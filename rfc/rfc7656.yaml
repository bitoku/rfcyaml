- title: __initial_text__
  contents:
  - "               A Taxonomy of Semantics and Mechanisms for\n               Real-Time\
    \ Transport Protocol (RTP) Sources\n"
- title: Abstract
  contents:
  - "Abstract\n   The terminology about, and associations among, Real-time Transport\n\
    \   Protocol (RTP) sources can be complex and somewhat opaque.  This\n   document\
    \ describes a number of existing and proposed properties and\n   relationships\
    \ among RTP sources and defines common terminology for\n   discussing protocol\
    \ entities and their relationships.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7656.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   5\n   2.  Concepts  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n     2.1.  Media Chain . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n       2.1.1.  Physical Stimulus . . . . . . . . . . . . . . . .\
    \ . .  10\n       2.1.2.  Media Capture . . . . . . . . . . . . . . . . . . .\
    \ .  10\n       2.1.3.  Raw Stream  . . . . . . . . . . . . . . . . . . . . .\
    \  10\n       2.1.4.  Media Source  . . . . . . . . . . . . . . . . . . . .  11\n\
    \       2.1.5.  Source Stream . . . . . . . . . . . . . . . . . . . .  11\n  \
    \     2.1.6.  Media Encoder . . . . . . . . . . . . . . . . . . . .  12\n    \
    \   2.1.7.  Encoded Stream  . . . . . . . . . . . . . . . . . . .  13\n      \
    \ 2.1.8.  Dependent Stream  . . . . . . . . . . . . . . . . . .  13\n       2.1.9.\
    \  Media Packetizer  . . . . . . . . . . . . . . . . . .  13\n       2.1.10. RTP\
    \ Stream  . . . . . . . . . . . . . . . . . . . . .  14\n       2.1.11. RTP-Based\
    \ Redundancy  . . . . . . . . . . . . . . . .  14\n       2.1.12. Redundancy RTP\
    \ Stream . . . . . . . . . . . . . . . .  15\n       2.1.13. RTP-Based Security\
    \  . . . . . . . . . . . . . . . . .  15\n       2.1.14. Secured RTP Stream  .\
    \ . . . . . . . . . . . . . . . .  16\n       2.1.15. Media Transport . . . .\
    \ . . . . . . . . . . . . . . .  16\n       2.1.16. Media Transport Sender  .\
    \ . . . . . . . . . . . . . .  17\n       2.1.17. Sent RTP Stream . . . . . .\
    \ . . . . . . . . . . . . .  18\n       2.1.18. Network Transport . . . . . .\
    \ . . . . . . . . . . . .  18\n       2.1.19. Transported RTP Stream  . . . .\
    \ . . . . . . . . . . .  18\n       2.1.20. Media Transport Receiver  . . . .\
    \ . . . . . . . . . .  18\n       2.1.21. Received Secured RTP Stream . . . .\
    \ . . . . . . . . .  19\n       2.1.22. RTP-Based Validation  . . . . . . . .\
    \ . . . . . . . .  19\n       2.1.23. Received RTP Stream . . . . . . . . . .\
    \ . . . . . . .  19\n       2.1.24. Received Redundancy RTP Stream  . . . . .\
    \ . . . . . .  19\n       2.1.25. RTP-Based Repair  . . . . . . . . . . . . .\
    \ . . . . .  19\n       2.1.26. Repaired RTP Stream . . . . . . . . . . . . .\
    \ . . . .  19\n       2.1.27. Media Depacketizer  . . . . . . . . . . . . . .\
    \ . . .  20\n       2.1.28. Received Encoded Stream . . . . . . . . . . . . .\
    \ . .  20\n       2.1.29. Media Decoder . . . . . . . . . . . . . . . . . . .\
    \ .  20\n       2.1.30. Received Source Stream  . . . . . . . . . . . . . . .\
    \  20\n       2.1.31. Media Sink  . . . . . . . . . . . . . . . . . . . . .  21\n\
    \       2.1.32. Received Raw Stream . . . . . . . . . . . . . . . . .  21\n  \
    \     2.1.33. Media Render  . . . . . . . . . . . . . . . . . . . .  21\n    \
    \ 2.2.  Communication Entities  . . . . . . . . . . . . . . . . .  22\n      \
    \ 2.2.1.  Endpoint  . . . . . . . . . . . . . . . . . . . . . .  23\n       2.2.2.\
    \  RTP Session . . . . . . . . . . . . . . . . . . . . .  23\n       2.2.3.  Participant\
    \ . . . . . . . . . . . . . . . . . . . . .  24\n       2.2.4.  Multimedia Session\
    \  . . . . . . . . . . . . . . . . .  24\n       2.2.5.  Communication Session\
    \ . . . . . . . . . . . . . . . .  25\n   3.  Concepts of Inter-Relations . .\
    \ . . . . . . . . . . . . . . .  25\n     3.1.  Synchronization Context . . .\
    \ . . . . . . . . . . . . . .  26\n       3.1.1.  RTCP CNAME  . . . . . . . .\
    \ . . . . . . . . . . . . .  26\n       3.1.2.  Clock Source Signaling  . . .\
    \ . . . . . . . . . . . .  26\n       3.1.3.  Implicitly via RtcMediaStream .\
    \ . . . . . . . . . . .  26\n       3.1.4.  Explicitly via SDP Mechanisms . .\
    \ . . . . . . . . . .  26\n     3.2.  Endpoint  . . . . . . . . . . . . . . .\
    \ . . . . . . . . .  27\n     3.3.  Participant . . . . . . . . . . . . . . .\
    \ . . . . . . . .  27\n     3.4.  RtcMediaStream  . . . . . . . . . . . . . .\
    \ . . . . . . .  27\n     3.5.  Multi-Channel Audio . . . . . . . . . . . . .\
    \ . . . . . .  28\n     3.6.  Simulcast . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  28\n     3.7.  Layered Multi-Stream  . . . . . . . . . . . . . .\
    \ . . . .  30\n     3.8.  RTP Stream Duplication  . . . . . . . . . . . . . .\
    \ . . .  32\n     3.9.  Redundancy Format . . . . . . . . . . . . . . . . . .\
    \ . .  33\n     3.10. RTP Retransmission  . . . . . . . . . . . . . . . . . .\
    \ .  33\n     3.11. Forward Error Correction  . . . . . . . . . . . . . . . .\
    \  35\n     3.12. RTP Stream Separation . . . . . . . . . . . . . . . . . .  36\n\
    \     3.13. Multiple RTP Sessions over one Media Transport  . . . . .  37\n  \
    \ 4.  Mapping from Existing Terms . . . . . . . . . . . . . . . . .  37\n    \
    \ 4.1.  Telepresence Terms  . . . . . . . . . . . . . . . . . . .  37\n      \
    \ 4.1.1.  Audio Capture . . . . . . . . . . . . . . . . . . . .  37\n       4.1.2.\
    \  Capture Device  . . . . . . . . . . . . . . . . . . .  37\n       4.1.3.  Capture\
    \ Encoding  . . . . . . . . . . . . . . . . . .  38\n       4.1.4.  Capture Scene\
    \ . . . . . . . . . . . . . . . . . . . .  38\n       4.1.5.  Endpoint  . . .\
    \ . . . . . . . . . . . . . . . . . . .  38\n       4.1.6.  Individual Encoding\
    \ . . . . . . . . . . . . . . . . .  38\n       4.1.7.  Media Capture . . . .\
    \ . . . . . . . . . . . . . . . .  38\n       4.1.8.  Media Consumer  . . . .\
    \ . . . . . . . . . . . . . . .  38\n       4.1.9.  Media Provider  . . . . .\
    \ . . . . . . . . . . . . . .  39\n       4.1.10. Stream  . . . . . . . . . .\
    \ . . . . . . . . . . . . .  39\n       4.1.11. Video Capture . . . . . . . .\
    \ . . . . . . . . . . . .  39\n     4.2.  Media Description . . . . . . . . .\
    \ . . . . . . . . . . .  39\n     4.3.  Media Stream  . . . . . . . . . . . .\
    \ . . . . . . . . . .  39\n     4.4.  Multimedia Conference . . . . . . . . .\
    \ . . . . . . . . .  39\n     4.5.  Multimedia Session  . . . . . . . . . . .\
    \ . . . . . . . .  40\n     4.6.  Multipoint Control Unit (MCU) . . . . . . .\
    \ . . . . . . .  40\n     4.7.  Multi-Session Transmission (MST)  . . . . . .\
    \ . . . . . .  40\n     4.8.  Recording Device  . . . . . . . . . . . . . . .\
    \ . . . . .  41\n     4.9.  RtcMediaStream  . . . . . . . . . . . . . . . . .\
    \ . . . .  41\n     4.10. RtcMediaStreamTrack . . . . . . . . . . . . . . . .\
    \ . . .  41\n     4.11. RTP Receiver  . . . . . . . . . . . . . . . . . . . .\
    \ . .  41\n     4.12. RTP Sender  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  41\n     4.13. RTP Session . . . . . . . . . . . . . . . . . . . . . . .\
    \  41\n     4.14. Single-Session Transmission (SST) . . . . . . . . . . . .  41\n\
    \     4.15. SSRC  . . . . . . . . . . . . . . . . . . . . . . . . . .  42\n  \
    \ 5.  Security Considerations . . . . . . . . . . . . . . . . . . .  42\n   6.\
    \  Informative References  . . . . . . . . . . . . . . . . . . .  42\n   Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  45\n   Contributors  . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . .  45\n   Authors' Addresses  .\
    \ . . . . . . . . . . . . . . . . . . . . . .  46\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The existing taxonomy of sources in the Real-time Transport\
    \ Protocol\n   (RTP) [RFC3550] has previously been regarded as confusing and\n\
    \   inconsistent.  Consequently, a deep understanding of how the\n   different\
    \ terms relate to each other becomes a real challenge.\n   Frequently cited examples\
    \ of this confusion are (1) how different\n   protocols that make use of RTP use\
    \ the same terms to signify\n   different things and (2) how the complexities\
    \ addressed at one layer\n   are often glossed over or ignored at another.\n \
    \  This document improves clarity by reviewing the semantics of various\n   aspects\
    \ of sources in RTP.  As an organizing mechanism, it approaches\n   this by describing\
    \ various ways that RTP sources are transformed on\n   their way between sender\
    \ and receiver, and how they can be grouped\n   and associated together.\n   All\
    \ non-specific references to ControLling mUltiple streams for\n   tElepresence\
    \ (CLUE) in this document map to [CLUE-FRAME], and all\n   references to Web Real-time\
    \ Communications (WebRTC) map to\n   [WEBRTC-OVERVIEW].\n"
- title: 2.  Concepts
  contents:
  - "2.  Concepts\n   This section defines concepts that serve to identify and name\
    \ various\n   transformations and streams in a given RTP usage.  For each concept,\n\
    \   alternate definitions and usages that coexist today are listed along\n   with\
    \ various characteristics that further describe the concept.\n   These concepts\
    \ are divided into two categories: one is related to the\n   chain of streams\
    \ and transformations that Media can be subject to,\n   and the other is for entities\
    \ involved in the communication.\n"
- title: 2.1.  Media Chain
  contents:
  - "2.1.  Media Chain\n   In the context of this document, media is a sequence of\
    \ synthetic or\n   Physical Stimuli (Section 2.1.1) -- for example, sound waves,\n\
    \   photons, key strokes -- represented in digital form.  Synthesized\n   media\
    \ is typically generated directly in the digital domain.\n   This section contains\
    \ the concepts that can be involved in taking\n   media at a sender side and transporting\
    \ it to a receiver, which may\n   recover a sequence of physical stimuli.  This\
    \ chain of concepts is of\n   two main types: streams and transformations.  Streams\
    \ are time-based\n   sequences of samples of the physical stimulus in various\n\
    \   representations, while transformations change the representation of\n   the\
    \ streams in some way.\n   The below examples are basic ones, and it is important\
    \ to keep in\n   mind that this conceptual model enables more complex usages.\
    \  Some\n   will be further discussed in later sections of this document.  In\n\
    \   general the following applies to this model:\n   o  A transformation may have\
    \ zero or more inputs and one or more\n      outputs.\n   o  A stream is of some\
    \ type, such as audio, video, real-time text,\n      etc.\n   o  A stream has\
    \ one source transformation and one or more sink\n      transformations (with\
    \ the exception of physical stimulus\n      (Section 2.1.1) that may lack source\
    \ or sink transformation).\n   o  Streams can be forwarded from a transformation\
    \ output to any\n      number of inputs on other transformations that support\
    \ that type.\n   o  If the output of a transformation is sent to multiple\n  \
    \    transformations, those streams will be identical; it takes a\n      transformation\
    \ to make them different.\n   o  There are no formal limitations on how streams\
    \ are connected to\n      transformations.\n   It is also important to remember\
    \ that this is a conceptual model.\n   Thus, real-world implementations may look\
    \ different and have a\n   different structure.\n   To provide a basic understanding\
    \ of the relationships in the chain,\n   we first introduce the concepts for the\
    \ sender side (Figure 1).  This\n   covers physical stimuli until media packets\
    \ are emitted onto the\n   network.\n               Physical Stimulus\n      \
    \                |\n                      V\n           +----------------------+\n\
    \           |     Media Capture    |\n           +----------------------+\n  \
    \                    |\n                 Raw Stream\n                      V\n\
    \           +----------------------+\n           |     Media Source     |<- Synchronization\
    \ Timing\n           +----------------------+\n                      |\n     \
    \           Source Stream\n                      V\n           +----------------------+\n\
    \           |    Media Encoder     |\n           +----------------------+\n  \
    \                    |\n                Encoded Stream      +------------+\n \
    \                     V             |            V\n           +----------------------+\
    \ | +----------------------+\n           |   Media Packetizer   | | | RTP-Based\
    \ Redundancy |\n           +----------------------+ | +----------------------+\n\
    \                      |             |            |\n                      +-------------+\
    \  Redundancy RTP Stream\n               Source RTP Stream                 |\n\
    \                      V                          V\n           +----------------------+\
    \   +----------------------+\n           |  RTP-Based Security  |   |  RTP-Based\
    \ Security  |\n           +----------------------+   +----------------------+\n\
    \                      |                          |\n              Secured RTP\
    \ Stream   Secured Redundancy RTP Stream\n                      V            \
    \              V\n           +----------------------+   +----------------------+\n\
    \           |   Media Transport    |   |   Media Transport    |\n           +----------------------+\
    \   +----------------------+\n             Figure 1: Sender Side Concepts in the\
    \ Media Chain\n   In Figure 1, we have included a branched chain to cover the\
    \ concepts\n   for using redundancy to improve the reliability of the transport.\n\
    \   The Media Transport concept is an aggregate that is decomposed in\n   Section\
    \ 2.1.15.\n   In Figure 2, we review a receiver media chain matching the sender\n\
    \   side, to look at the inverse transformations and their attempts to\n   recover\
    \ identical streams as in the sender chain, subject to what may\n   be lossy compression\
    \ and imperfect media transport.  Note that the\n   streams out of a reverse transformation,\
    \ like the Source Stream out\n   of the Media Decoder, are in many cases not the\
    \ same as the\n   corresponding ones on the sender side; thus, they are prefixed\
    \ with a\n   \"received\" to denote a potentially modified version.  The reason\
    \ for\n   not being the same lies in the transformations that can be of\n   irreversible\
    \ type.  For example, lossy source coding in the Media\n   Encoder prevents the\
    \ source stream out of the media decoder from\n   being the same as the one fed\
    \ into the media encoder.  Other reasons\n   include packet loss in the media\
    \ transport transformation that even\n   RTP-based Repair, if used, fails to repair.\n\
    \          +----------------------+   +----------------------+\n          |  \
    \ Media Transport    |   |   Media Transport    |\n          +----------------------+\
    \   +----------------------+\n            Received |                 Received\
    \ | Secured\n            Secured RTP Stream       Redundancy RTP Stream\n    \
    \                 V                          V\n          +----------------------+\
    \   +----------------------+\n          | RTP-Based Validation |   | RTP-Based\
    \ Validation |\n          +----------------------+   +----------------------+\n\
    \                     |                          |\n            Received RTP Stream\
    \   Received Redundancy RTP Stream\n                     |                   \
    \       |\n                     |     +--------------------+\n               \
    \      V     V\n          +----------------------+\n          |   RTP-Based Repair\
    \   |\n          +----------------------+\n                     |\n          \
    \  Repaired RTP Stream\n                     V\n          +----------------------+\n\
    \          |  Media Depacketizer  |\n          +----------------------+\n    \
    \                 |\n           Received Encoded Stream\n                    \
    \ V\n          +----------------------+\n          |    Media Decoder     |\n\
    \          +----------------------+\n                     |\n           Received\
    \ Source Stream\n                     V\n          +----------------------+\n\
    \          |      Media Sink      |--> Synchronization Information\n         \
    \ +----------------------+\n                     |\n            Received Raw Stream\n\
    \                     V\n          +----------------------+\n          |     Media\
    \ Render     |\n          +----------------------+\n                     |\n \
    \                    V\n             Physical Stimulus\n            Figure 2:\
    \ Receiver Side Concepts of the Media Chain\n"
- title: 2.1.1.  Physical Stimulus
  contents:
  - "2.1.1.  Physical Stimulus\n   The physical stimulus is a physical event in the\
    \ analog domain that\n   can be sampled and converted to digital form by an appropriate\
    \ sensor\n   or transducer.  This includes sound waves making up audio, photons\
    \ in\n   a light field, or other excitations or interactions with sensors,\n \
    \  like keystrokes on a keyboard.\n"
- title: 2.1.2.  Media Capture
  contents:
  - "2.1.2.  Media Capture\n   Media Capture is the process of transforming the analog\
    \ physical\n   stimulus (Section 2.1.1) into digital media using an appropriate\n\
    \   sensor or transducer.  The media capture performs a digital sampling\n   of\
    \ the physical stimulus, usually periodically, and outputs this in\n   some representation\
    \ as a Raw Stream (Section 2.1.3).  This data is\n   considered \"media\", because\
    \ it includes data that is periodically\n   sampled or made up of a set of timed\
    \ asynchronous events.  The media\n   capture is normally instantiated in some\
    \ type of device, i.e., media\n   capture device.  Examples of different types\
    \ of media capturing\n   devices are digital cameras, microphones connected to\
    \ A/D converters,\n   or keyboards.\n   Characteristics:\n   o  A media capture\
    \ is identified either by hardware/manufacturer ID\n      or via a session-scoped\
    \ device identifier as mandated by the\n      application usage.\n   o  A media\
    \ capture can generate an Encoded Stream (Section 2.1.7) if\n      the capture\
    \ device supports such a configuration.\n   o  The nature of the media capture\
    \ may impose constraints on the\n      clock handling in some of the subsequent\
    \ steps.  For example, many\n      audio or video capture devices are not completely\
    \ free in\n      selecting the sample rate.\n"
- title: 2.1.3.  Raw Stream
  contents:
  - "2.1.3.  Raw Stream\n   A raw stream is the time progressing stream of digitally\
    \ sampled\n   information, usually periodically sampled and provided by a media\n\
    \   capture (Section 2.1.2).  A raw stream can also contain synthesized\n   media\
    \ that may not require any explicit media capture, since it is\n   already in\
    \ an appropriate digital form.\n"
- title: 2.1.4.  Media Source
  contents:
  - "2.1.4.  Media Source\n   A Media Source is the logical source of a time progressing\
    \ digital\n   media stream synchronized to a reference clock.  This stream is\n\
    \   called a source stream (Section 2.1.5).  This transformation takes\n   one\
    \ or more raw streams (Section 2.1.3) and provides a source stream\n   as output.\
    \  The output is synchronized with a reference clock\n   (Section 3.1), which\
    \ can be as simple as a system local wall clock or\n   as complex as an NTP synchronized\
    \ clock.\n   The output can be of different types.  One type is directly\n   associated\
    \ with a particular media capture's raw stream.  Others are\n   more conceptual\
    \ sources, like an audio mix of multiple source streams\n   (Figure 3).  Mixing\
    \ multiple streams typically requires that the\n   input streams are possible\
    \ to relate in time, meaning that they have\n   to be source streams (Section\
    \ 2.1.5) rather than raw streams.  In\n   Figure 3, the generated source stream\
    \ is a mix of the three input\n   source streams.\n                Source    Source\
    \    Source\n                Stream    Stream    Stream\n                  | \
    \        |         |\n                  V         V         V\n              +--------------------------+\n\
    \              |        Media Source      |<-- Reference Clock\n             \
    \ |           Mixer          |\n              +--------------------------+\n \
    \                           |\n                            V\n               \
    \       Source Stream\n      Figure 3: Conceptual Media Source in the form of\
    \ an Audio Mixer\n   Another possible example of a conceptual media source is\
    \ a video\n   surveillance switch, where the input is multiple source streams\
    \ from\n   different cameras, and the output is one of those source streams\n\
    \   based on some selection criteria, such as round robin or some video\n   activity\
    \ measure.\n"
- title: 2.1.5.  Source Stream
  contents:
  - "2.1.5.  Source Stream\n   A source stream is a stream of digital samples that\
    \ has been\n   synchronized with a reference clock and comes from a particular\
    \ media\n   source (Section 2.1.4).\n"
- title: 2.1.6.  Media Encoder
  contents:
  - "2.1.6.  Media Encoder\n   A media encoder is a transform that is responsible\
    \ for encoding the\n   media data from a source stream (Section 2.1.5) into another\n\
    \   representation, usually more compact, that is output as an encoded\n   stream\
    \ (Section 2.1.7).\n   The media encoder step commonly includes pre-encoding\n\
    \   transformations, such as scaling, resampling, etc.  The media encoder\n  \
    \ can have a significant number of configuration options that affects\n   the\
    \ properties of the encoded stream.  This includes properties such\n   as codec,\
    \ bitrate, start points for decoding, resolution, bandwidth,\n   or other fidelity\
    \ affecting properties.\n   Scalable media encoders need special attention as\
    \ they produce\n   multiple outputs that are potentially of different types. \
    \ As shown\n   in Figure 4, a scalable media encoder takes one input source stream\n\
    \   and encodes it into multiple output streams of two different types:\n   at\
    \ least one encoded stream that is independently decodable and one\n   or more\
    \ Dependent Streams (Section 2.1.8).  Decoding requires at\n   least one encoded\
    \ stream and zero or more dependent streams.  A\n   dependent stream's dependency\
    \ is one of the grouping relations this\n   document discusses further in Section\
    \ 3.7.\n                              Source Stream\n                        \
    \            |\n                                    V\n                      \
    \ +--------------------------+\n                       |  Scalable Media Encoder\
    \  |\n                       +--------------------------+\n                  \
    \        |         |   ...    |\n                          V         V       \
    \   V\n                       Encoded  Dependent  Dependent\n                \
    \       Stream    Stream     Stream\n            Figure 4: Scalable Media Encoder\
    \ Input and Outputs\n   There are also other variants of encoders, like so-called\
    \ Multiple\n   Description Coding (MDC).  Such media encoders produce multiple\n\
    \   independent and thus individually decodable encoded streams.\n   However,\
    \ (logically) combining multiple of these encoded streams into\n   a single Received\
    \ Source Stream during decoding leads to an\n   improvement in perceptual reproduced\
    \ quality when compared to\n   decoding a single encoded stream.\n   Creating\
    \ multiple encoded streams from the same source stream, where\n   the encoded\
    \ streams are neither in a scalable nor in an MDC\n   relationship is commonly\
    \ utilized in simulcast [SDP-SIMULCAST]\n   environments.\n"
- title: 2.1.7.  Encoded Stream
  contents:
  - "2.1.7.  Encoded Stream\n   A stream of time synchronized encoded media that can\
    \ be independently\n   decoded.\n   Due to temporal dependencies, an encoded stream\
    \ may have limitations\n   in where decoding can be started.  These entry points,\
    \ for example,\n   Intra frames from a video encoder, may require identification\
    \ and\n   their generation may be event based or configured to occur\n   periodically.\n"
- title: 2.1.8.  Dependent Stream
  contents:
  - "2.1.8.  Dependent Stream\n   A stream of time synchronized encoded media fragments\
    \ that are\n   dependent on one or more encoded streams (Section 2.1.7) and zero\
    \ or\n   more dependent streams to be possible to decode.\n   Each dependent stream\
    \ has a set of dependencies.  These dependencies\n   must be understood by the\
    \ parties in a Multimedia Session\n   (Section 2.2.4) that intend to use a dependent\
    \ stream.\n"
- title: 2.1.9.  Media Packetizer
  contents:
  - "2.1.9.  Media Packetizer\n   The transformation of taking one or more encoded\
    \ (Section 2.1.7) or\n   dependent streams (Section 2.1.8) and putting their content\
    \ into one\n   or more sequences of packets, normally RTP Packets, and output\
    \ Source\n   RTP Streams (Section 2.1.10).  This step includes both generating\
    \ RTP\n   Payloads as well as RTP packets.  The Media Packetizer then selects\n\
    \   which synchronization source(s) (SSRC) [RFC3550] and RTP Sessions\n   (Section\
    \ 2.2.2) to use.\n   The media packetizer can combine multiple encoded or dependent\n\
    \   streams into one or more RTP Streams:\n   o  The media packetizer can use\
    \ multiple inputs when producing a\n      single RTP stream.  One such example\
    \ is Single RTP stream on a\n      Single media Transport (SRST) packetization\
    \ when using Scalable\n      Video Coding (SVC) (Section 3.7).\n   o  The media\
    \ packetizer can also produce multiple RTP streams, for\n      example, when encoded\
    \ and/or dependent streams are distributed\n      over multiple RTP streams. \
    \ One example of this is Multiple RTP\n      streams on Multiple media Transports\
    \ (MRMT) packetization when\n      using SVC (Section 3.7).\n"
- title: 2.1.10.  RTP Stream
  contents:
  - "2.1.10.  RTP Stream\n   An RTP stream is a stream of RTP packets containing media\
    \ data,\n   source or redundant.  The RTP stream is identified by an SSRC\n  \
    \ belonging to a particular RTP Session.  The RTP session is identified\n   as\
    \ discussed in Section 2.2.2.\n   A source RTP stream is an RTP stream directly\
    \ related to an encoded\n   stream (Section 2.1.7), targeted for transport over\
    \ RTP without any\n   additional RTP-based Redundancy (Section 2.1.11) applied.\n\
    \   Characteristics:\n   o  Each RTP stream is identified by an SSRC [RFC3550]\
    \ that is carried\n      in every RTP and RTP Control Protocol (RTCP) packet header.\
    \  The\n      SSRC is unique in a specific RTP session context.\n   o  At any\
    \ given point in time, an RTP stream can have one and only\n      one SSRC, but\
    \ SSRCs for a given RTP stream can change over time.\n      SSRC collision and\
    \ clock rate change [RFC7160] are examples of\n      valid reasons to change SSRC\
    \ for an RTP stream.  In those cases,\n      the RTP stream itself is not changed\
    \ in any significant way, only\n      the identifying SSRC number.\n   o  Each\
    \ SSRC defines a unique RTP sequence numbering and timing\n      space.\n   o\
    \  Several RTP streams, each with their own SSRC, may represent a\n      single\
    \ media source.\n   o  Several RTP streams, each with their own SSRC, can be carried\
    \ in a\n      single RTP session.\n"
- title: 2.1.11.  RTP-Based Redundancy
  contents:
  - "2.1.11.  RTP-Based Redundancy\n   RTP-based redundancy is defined here as a transformation\
    \ that\n   generates redundant or repair packets sent out as a Redundancy RTP\n\
    \   Stream (Section 2.1.12) to mitigate Network Transport\n   (Section 2.1.18)\
    \ impairments, like packet loss and delay.  Note that\n   this excludes the type\
    \ of redundancy that most suitable media\n   encoders (Section 2.1.6) may add\
    \ to the media format of the encoded\n   stream (Section 2.1.7) that makes it\
    \ cope better with RTP packet\n   losses.\n   The RTP-based redundancy exists\
    \ in many flavors: they may generate\n   independent repair streams that are used\
    \ in addition to the source\n   stream (like RTP Retransmission (Section 3.10)\
    \ and some special types\n   of Forward Error Correction (FEC) (Section 3.11),\
    \ like RTP stream\n   duplication (Section 3.8)); they may generate a new source\
    \ stream by\n   combining redundancy information with source information (using\
    \ XOR\n   FEC as a redundancy payload (Section 3.9)); or they may completely\n\
    \   replace the source information with only redundancy packets.\n"
- title: 2.1.12.  Redundancy RTP Stream
  contents:
  - "2.1.12.  Redundancy RTP Stream\n   A redundancy RTP stream is an RTP stream (Section\
    \ 2.1.10) that\n   contains no original source data, only redundant data, which\
    \ may\n   either be used as standalone or be combined with one or more Received\n\
    \   RTP Streams (Section 2.1.23) to produce Repaired RTP Streams\n   (Section\
    \ 2.1.26).\n"
- title: 2.1.13.  RTP-Based Security
  contents:
  - "2.1.13.  RTP-Based Security\n   The optional RTP-based Security transformation\
    \ applies security\n   services such as authentication, integrity protection,\
    \ and\n   confidentiality to an input RTP stream, like what is specified in\n\
    \   \"The Secure Real-time Transport Protocol (SRTP)\" [RFC3711], producing\n\
    \   a Secured RTP Stream (Section 2.1.14).  Either an RTP stream\n   (Section\
    \ 2.1.10) or a redundancy RTP stream (Section 2.1.12) can be\n   used as input\
    \ to this transformation.\n   In SRTP and the related Secure RTCP (SRTCP), all\
    \ of the above-\n   mentioned security services are optional, except for integrity\n\
    \   protection of SRTCP, which is mandatory.  Also confidentiality\n   (encryption)\
    \ is effectively optional in SRTP, since it is possible to\n   use a NULL encryption\
    \ algorithm.  As described in [RFC7201], the\n   strength of SRTP data origin\
    \ authentication depends on the\n   cryptographic transform and key management\
    \ used.  For example, in\n   group communication, where it is sometimes possible\
    \ to authenticate\n   group membership but not the actual RTP stream sender.\n\
    \   RTP-based security and RTP-based redundancy can be combined in a few\n   different\
    \ ways.  One way is depicted in Figure 1, where an RTP stream\n   and its corresponding\
    \ redundancy RTP stream are protected by separate\n   RTP-based security transforms.\
    \  In other cases, like when a Media\n   Translator is adding FEC in Section 3.2.1.3\
    \ of [RTP-TOPOLOGIES], a\n   middlebox can apply RTP-based redundancy to an already\
    \ secured RTP\n   stream instead of a source RTP stream.  One example of that\
    \ is\n   depicted in Figure 5 below.\n               Source RTP Stream    +------------+\n\
    \                      V             |            V\n           +----------------------+\
    \ | +----------------------+\n           |  RTP-Based Security  | | | RTP-Based\
    \ Redundancy |\n           +----------------------+ | +----------------------+\n\
    \                      |             |            |\n                      | \
    \            |  Redundancy RTP Stream\n                      +-------------+ \
    \           |\n                      |                          V\n          \
    \            |               +----------------------+\n              Secured RTP\
    \ Stream      |  RTP-Based Security  |\n                      |              \
    \ +----------------------+\n                      |                          |\n\
    \                      |            Secured Redundancy RTP Stream\n          \
    \            V                          V\n           +----------------------+\
    \   +----------------------+\n           |   Media Transport    |   |   Media\
    \ Transport    |\n           +----------------------+   +----------------------+\n\
    \            Figure 5: Adding Redundancy to a Secured RTP Stream\n   In this case,\
    \ the redundancy RTP stream may already have been secured\n   for confidentiality\
    \ (encrypted) by the first RTP-based security, and\n   it may therefore not be\
    \ necessary to apply additional confidentiality\n   protection in the second RTP-based\
    \ security.  To avoid attacks and\n   negative impact on RTP-based Repair (Section\
    \ 2.1.25) and the\n   resulting repaired RTP stream (Section 2.1.26), it is, however,\
    \ still\n   necessary to have this second RTP-based security apply both\n   authentication\
    \ and integrity protection to the redundancy RTP stream.\n"
- title: 2.1.14.  Secured RTP Stream
  contents:
  - "2.1.14.  Secured RTP Stream\n   A secured RTP stream is a source or redundancy\
    \ RTP stream that is\n   protected through RTP-based security (Section 2.1.13)\
    \ by one or more\n   of the confidentiality, integrity, or authentication security\n\
    \   services.\n"
- title: 2.1.15.  Media Transport
  contents:
  - "2.1.15.  Media Transport\n   A media transport defines the transformation that\
    \ the RTP streams\n   (Section 2.1.10) are subjected to by the end-to-end transport\
    \ from\n   one RTP Sender (Section 4.12) to one specific RTP Receiver\n   (Section\
    \ 4.11) (an RTP session (Section 2.2.2) may contain multiple\n   RTP receivers\
    \ per sender).  Each media transport is defined by a\n   transport association\
    \ that is normally identified by a 5-tuple\n   (source address, source port, destination\
    \ address, destination port,\n   transport protocol), but a proposal exists for\
    \ sending multiple\n   transport associations on a single 5-tuple [TRANSPORT-MULTIPLEX].\n\
    \   Characteristics:\n   o  Media transport transmits RTP streams of RTP packets\
    \ from a source\n      transport address to a destination transport address.\n\
    \   o  Each media transport contains only a single RTP session.\n   o  A single\
    \ RTP session can span multiple media transports.\n   The media transport concept\
    \ sometimes needs to be decomposed into\n   more steps to enable discussion of\
    \ what a sender emits that gets\n   transformed by the network before it is received\
    \ by the receiver.\n   Thus, we provide also this media transport decomposition\
    \ (Figure 6).\n                               RTP Stream\n                   \
    \                 |\n                                    V\n                 \
    \      +--------------------------+\n                       |  Media Transport\
    \ Sender  |\n                       +--------------------------+\n           \
    \                         |\n                             Sent RTP Stream\n  \
    \                                  V\n                       +--------------------------+\n\
    \                       |    Network Transport     |\n                       +--------------------------+\n\
    \                                    |\n                         Transported RTP\
    \ Stream\n                                    V\n                       +--------------------------+\n\
    \                       | Media Transport Receiver |\n                       +--------------------------+\n\
    \                                    |\n                                    V\n\
    \                           Received RTP Stream\n                Figure 6: Decomposition\
    \ of Media Transport\n"
- title: 2.1.16.  Media Transport Sender
  contents:
  - "2.1.16.  Media Transport Sender\n   The first transformation within the media\
    \ transport (Section 2.1.15)\n   is the Media Transport Sender.  The sending Endpoint\
    \ (Section 2.2.1)\n   takes an RTP stream and emits the packets onto the network\
    \ using the\n   transport association established for this media transport, thereby\n\
    \   creating a Sent RTP Stream (Section 2.1.17).  In the process, it\n   transforms\
    \ the RTP stream in several ways.  First, it generates the\n   necessary protocol\
    \ headers for the transport association, for\n   example, IP and UDP headers,\
    \ thus forming IP/UDP/RTP packets.  In\n   addition, the media transport sender\
    \ may queue, intentionally pace,\n   or otherwise affect how the packets are emitted\
    \ onto the network,\n   thereby potentially introducing delay and delay variations\
    \ [RFC5481]\n   that characterize the sent RTP stream.\n"
- title: 2.1.17.  Sent RTP Stream
  contents:
  - "2.1.17.  Sent RTP Stream\n   The sent RTP stream is the RTP stream as entering\
    \ the first hop of\n   the network path to its destination.  The sent RTP stream\
    \ is\n   identified using network transport addresses, like the 5-tuple\n   (source\
    \ IP address, source port, destination IP address, destination\n   port, and protocol\
    \ (UDP)) for IP/UDP.\n"
- title: 2.1.18.  Network Transport
  contents:
  - "2.1.18.  Network Transport\n   Network transport is the transformation that subjects\
    \ the sent RTP\n   stream (Section 2.1.17) to traveling from the source to the\n\
    \   destination through the network.  This transformation can result in\n   loss\
    \ of some packets, delay, and delay variation on a per-packet\n   basis, packet\
    \ duplication, and packet header or data corruption.\n   This transformation produces\
    \ a Transported RTP Stream\n   (Section 2.1.19) at the exit of the network path.\n"
- title: 2.1.19.  Transported RTP Stream
  contents:
  - "2.1.19.  Transported RTP Stream\n   The transported RTP stream is the RTP stream\
    \ that is emitted out of\n   the network path at the destination, subjected to\
    \ the network\n   transport's transformation (Section 2.1.18).\n"
- title: 2.1.20.  Media Transport Receiver
  contents:
  - "2.1.20.  Media Transport Receiver\n   The Media Transport Receiver is the receiver\
    \ endpoint's\n   (Section 2.2.1) transformation of the transported RTP stream\n\
    \   (Section 2.1.19) by its reception process, which results in the\n   received\
    \ RTP stream (Section 2.1.23).  This transformation includes\n   transport checksums\
    \ being verified.  Sensible system designs\n   typically either discard packets\
    \ with mismatching checksums or pass\n   them on while somehow marking them in\
    \ the resulting received RTP\n   stream so to alert subsequent transformations\
    \ about the possible\n   corrupt state.  In this context, it is worth noting that\
    \ there is\n   typically some probability for corrupt packets to pass through\n\
    \   undetected (with a seemingly correct checksum).  Other\n   transformations\
    \ can compensate for delay variations in receiving a\n   packet on the network\
    \ interface and providing it to the application\n   (de-jitter buffer).\n"
- title: 2.1.21.  Received Secured RTP Stream
  contents:
  - "2.1.21.  Received Secured RTP Stream\n   This is the secured RTP stream (Section\
    \ 2.1.14) resulting from the\n   media transport (Section 2.1.15) aggregate transformation.\n"
- title: 2.1.22.  RTP-Based Validation
  contents:
  - "2.1.22.  RTP-Based Validation\n   RTP-based Validation is the reverse transformation\
    \ of RTP-based\n   security (Section 2.1.13).  If this transformation fails, the\
    \ result\n   is either not usable and must be discarded or may be usable but\n\
    \   cannot be trusted.  If the transformation succeeds, the result can be\n  \
    \ a received RTP stream (Section 2.1.23) or a Received Redundancy RTP\n   Stream\
    \ (Section 2.1.24), depending on what was input to the\n   corresponding RTP-based\
    \ security transformation, but it can also be a\n   Received Secured RTP Stream\
    \ (Section 2.1.21) in case several RTP-\n   based security transformations were\
    \ applied.\n"
- title: 2.1.23.  Received RTP Stream
  contents:
  - "2.1.23.  Received RTP Stream\n   The received RTP stream is the RTP stream (Section\
    \ 2.1.10) resulting\n   from the media transport's aggregate transformation (Section\
    \ 2.1.15),\n   i.e., subjected to packet loss, packet corruption, packet\n   duplication,\
    \ delay, and delay variation from sender to receiver.\n"
- title: 2.1.24.  Received Redundancy RTP Stream
  contents:
  - "2.1.24.  Received Redundancy RTP Stream\n   The received redundancy RTP stream\
    \ is the redundancy RTP stream\n   (Section 2.1.12) resulting from the media transport's\
    \ aggregate\n   transformation, i.e., subjected to packet loss, packet corruption,\n\
    \   packet duplication, delay, and delay variation from sender to\n   receiver.\n"
- title: 2.1.25.  RTP-Based Repair
  contents:
  - "2.1.25.  RTP-Based Repair\n   RTP-based repair is a transformation that takes\
    \ as input zero or more\n   received RTP streams (Section 2.1.23) and one or more\
    \ received\n   redundancy RTP streams (Section 2.1.24) and produces one or more\n\
    \   repaired RTP streams (Section 2.1.26) that are as close to the\n   corresponding\
    \ sent source RTP streams (Section 2.1.10) as possible,\n   using different RTP-based\
    \ repair methods, for example, the ones\n   referred to in RTP-based redundancy\
    \ (Section 2.1.11).\n"
- title: 2.1.26.  Repaired RTP Stream
  contents:
  - "2.1.26.  Repaired RTP Stream\n   A repaired RTP stream is a received RTP stream\
    \ (Section 2.1.23) for\n   which received redundancy RTP stream (Section 2.1.24)\
    \ information has\n   been used to try to recover the source RTP stream (Section\
    \ 2.1.10) as\n   it was before media transport (Section 2.1.15).\n"
- title: 2.1.27.  Media Depacketizer
  contents:
  - "2.1.27.  Media Depacketizer\n   A Media Depacketizer takes one or more RTP streams\
    \ (Section 2.1.10),\n   depacketizes them, and attempts to reconstitute the encoded\
    \ streams\n   (Section 2.1.7) or dependent streams (Section 2.1.8) present in\
    \ those\n   RTP streams.\n   In practical implementations, the media depacketizer\
    \ and the media\n   decoder may be tightly coupled and share information to improve\
    \ or\n   optimize the overall decoding and error concealment process.  It is,\n\
    \   however, not expected that there would be any benefit in defining a\n   taxonomy\
    \ for those detailed (and likely very implementation-\n   dependent) steps.\n"
- title: 2.1.28.  Received Encoded Stream
  contents:
  - "2.1.28.  Received Encoded Stream\n   The Received Encoded Stream is the received\
    \ version of an encoded\n   stream (Section 2.1.7).\n"
- title: 2.1.29.  Media Decoder
  contents:
  - "2.1.29.  Media Decoder\n   A media decoder is a transformation that is responsible\
    \ for decoding\n   encoded streams (Section 2.1.7) and any dependent streams\n\
    \   (Section 2.1.8) into a source stream (Section 2.1.5).\n   In practical implementations,\
    \ the media decoder and the media\n   depacketizer may be tightly coupled and\
    \ share information to improve\n   or optimize the overall decoding process in\
    \ various ways.  It is,\n   however, not expected that there would be any benefit\
    \ in defining a\n   taxonomy for those detailed (and likely very implementation-\n\
    \   dependent) steps.\n   A media decoder has to deal with any errors in the encoded\
    \ streams\n   that resulted from corruption or failure to repair packet losses.\n\
    \   Therefore, it commonly is robust to error and losses, and includes\n   concealment\
    \ methods.\n"
- title: 2.1.30.  Received Source Stream
  contents:
  - "2.1.30.  Received Source Stream\n   The received source stream is the received\
    \ version of a source stream\n   (Section 2.1.5).\n"
- title: 2.1.31.  Media Sink
  contents:
  - "2.1.31.  Media Sink\n   The Media Sink receives a source stream (Section 2.1.5)\
    \ that\n   contains, usually periodically, sampled media data together with\n\
    \   associated synchronization information.  Depending on application,\n   this\
    \ source stream then needs to be transformed into a raw stream\n   (Section 2.1.3)\
    \ that is conveyed to the Media Render (Section 2.1.33)\n   and synchronized with\
    \ the output from other media sinks.  The media\n   sink may also be connected\
    \ with a media source (Section 2.1.4) and be\n   used as part of a conceptual\
    \ media source.\n   The media sink can further transform the source stream into\
    \ a\n   representation that is suitable for rendering on the media render as\n\
    \   defined by the application or system-wide configuration.  This\n   includes\
    \ sample scaling, level adjustments, etc.\n"
- title: 2.1.32.  Received Raw Stream
  contents:
  - "2.1.32.  Received Raw Stream\n   The Received Raw Stream is the received version\
    \ of a raw stream\n   (Section 2.1.3).\n"
- title: 2.1.33.  Media Render
  contents:
  - "2.1.33.  Media Render\n   A media render takes a raw stream (Section 2.1.3) and\
    \ converts it\n   into physical stimulus (Section 2.1.1) that a human user can\n\
    \   perceive.  Examples of such devices are screens and D/A converters\n   connected\
    \ to amplifiers and loudspeakers.\n   An endpoint can potentially have multiple\
    \ media renders for each\n   media type.\n"
- title: 2.2.  Communication Entities
  contents:
  - "2.2.  Communication Entities\n   This section contains concepts for entities\
    \ involved in the\n   communication.\n      +------------------------------------------------------------+\n\
    \      | Communication Session                                      |\n      |\
    \                                                            |\n      | +----------------+\
    \                      +----------------+ |\n      | | Participant A  |    +------------+\
    \    | Participant B  | |\n      | |                |    | Multimedia |    | \
    \               | |\n      | | +------------+ |<==>| Session    |<==>| +------------+\
    \ | |\n      | | | Endpoint A | |    |            |    | | Endpoint B | | |\n\
    \      | | |            | |    +------------+    | |            | | |\n      |\
    \ | | +----------+-+----------------------+-+----------+ | | |\n      | | | |\
    \ RTP      | |                      | |          | | | |\n      | | | | Session\
    \  |-+---Media Transport----+>|          | | | |\n      | | | | Audio    |<+---Media\
    \ Transport----+-|          | | | |\n      | | | |          | |          ^   \
    \        | |          | | | |\n      | | | +----------+-+----------|-----------+-+----------+\
    \ | | |\n      | | |            | |          v           | |            | | |\n\
    \      | | |            | | +-----------------+  | |            | | |\n      |\
    \ | |            | | | Synchronization |  | |            | | |\n      | | |  \
    \          | | |     Context     |  | |            | | |\n      | | |        \
    \    | | +-----------------+  | |            | | |\n      | | |            | |\
    \          ^           | |            | | |\n      | | | +----------+-+----------|-----------+-+----------+\
    \ | | |\n      | | | | RTP      | |          v           | |          | | | |\n\
    \      | | | | Session  |<+---Media Transport----+-|          | | | |\n      |\
    \ | | | Video    |-+---Media Transport----+>|          | | | |\n      | | | |\
    \          | |                      | |          | | | |\n      | | | +----------+-+----------------------+-+----------+\
    \ | | |\n      | | +------------+ |                      | +------------+ | |\n\
    \      | +----------------+                      +----------------+ |\n      +------------------------------------------------------------+\n\
    \    Figure 7: Example Point-to-Point Communication Session with Two RTP\n   \
    \                              Sessions\n   Figure 7 shows a high-level example\
    \ representation of a very basic\n   point-to-point Communication Session between\
    \ Participants A and B.\n   It uses two different audio and video RTP sessions\
    \ between A's and\n   B's endpoints, where each RTP session is a group communications\n\
    \   channel that can potentially carry a number of RTP streams.  It is\n   using\
    \ separate media transports for those RTP sessions.  The\n   multimedia session\
    \ shared by the participants can, for example, be\n   established using SIP (i.e.,\
    \ there is a SIP dialog between A and B).\n   The terms used in Figure 7 are further\
    \ elaborated in the subsections\n   below.\n"
- title: 2.2.1.  Endpoint
  contents:
  - "2.2.1.  Endpoint\n   An endpoint is a single addressable entity sending or receiving\
    \ RTP\n   packets.  It may be decomposed into several functional blocks, but as\n\
    \   long as it behaves as a single RTP stack entity, it is classified as\n   a\
    \ single \"endpoint\".\n   Characteristics:\n   o  Endpoints can be identified\
    \ in several different ways.  While RTCP\n      Canonical Names (CNAMEs) [RFC3550]\
    \ provide a globally unique and\n      stable identification mechanism for the\
    \ duration of the\n      communication session (see Section 2.2.5), their validity\
    \ applies\n      exclusively within a Synchronization Context (Section 3.1). \
    \ Thus,\n      one endpoint can handle multiple CNAMEs, each of which can be\n\
    \      shared among a set of endpoints belonging to the same participant\n   \
    \   (Section 2.2.3).  Therefore, mechanisms outside the scope of RTP,\n      such\
    \ as application-defined mechanisms, must be used to provide\n      endpoint identification\
    \ when outside this synchronization context.\n   o  An endpoint can be associated\
    \ with at most one participant\n      (Section 2.2.3) at any single point in time.\n\
    \   o  In some contexts, an endpoint would typically correspond to a\n      single\
    \ \"host\", for example, a computer using a single network\n      interface and\
    \ being used by a single human user.  In other\n      contexts, a single \"host\"\
    \ can serve multiple participants, in\n      which case each participant's endpoint\
    \ may share properties, for\n      example, the IP address part of a transport\
    \ address.\n"
- title: 2.2.2.  RTP Session
  contents:
  - "2.2.2.  RTP Session\n   An RTP session is an association among a group of participants\n\
    \   communicating with RTP.  It is a group communications channel that\n   can\
    \ potentially carry a number of RTP streams.  Within an RTP\n   session, every\
    \ participant can find metadata and control information\n   (over RTCP) about\
    \ all the RTP streams in the RTP session.  The\n   bandwidth of the RTCP control\
    \ channel is shared between all\n   participants within an RTP session.\n   Characteristics:\n\
    \   o  An RTP session can carry one or more RTP streams.\n   o  An RTP session\
    \ shares a single SSRC space as defined in [RFC3550].\n      That is, the endpoints\
    \ participating in an RTP session can see an\n      SSRC identifier transmitted\
    \ by any of the other endpoints.  An\n      endpoint can receive an SSRC either\
    \ as SSRC or as a contributing\n      source (CSRC) in RTP and RTCP packets, as\
    \ defined by the\n      endpoints' network interconnection topology.\n   o  An\
    \ RTP session uses at least two media transports\n      (Section 2.1.15): one\
    \ for sending and one for receiving.\n      Commonly, the receiving media transport\
    \ is the reverse direction\n      of the media transport used for sending.  An\
    \ RTP session may use\n      many media transports and these define the session's\
    \ network\n      interconnection topology.\n   o  A single media transport always\
    \ carries a single RTP session.\n   o  Multiple RTP sessions can be conceptually\
    \ related, for example,\n      originating from or targeted for the same participant\n\
    \      (Section 2.2.3) or endpoint (Section 2.2.1), or by containing RTP\n   \
    \   streams that are somehow related (Section 3).\n"
- title: 2.2.3.  Participant
  contents:
  - "2.2.3.  Participant\n   A participant is an entity reachable by a single signaling\
    \ address\n   and is thus related more to the signaling context than to the media\n\
    \   context.\n   Characteristics:\n   o  A single signaling-addressable entity,\
    \ using an application-\n      specific signaling address space, for example,\
    \ a SIP URI.\n   o  A participant can participate in several multimedia sessions\n\
    \      (Section 2.2.4).\n   o  A participant can be comprised of several associated\
    \ endpoints\n      (Section 2.2.1).\n"
- title: 2.2.4.  Multimedia Session
  contents:
  - "2.2.4.  Multimedia Session\n   A multimedia session is an association among a\
    \ group of participants\n   (Section 2.2.3) engaged in the communication via one\
    \ or more RTP\n   sessions (Section 2.2.2).  It defines logical relationships\
    \ among\n   media sources (Section 2.1.4) that appear in multiple RTP sessions.\n\
    \   Characteristics:\n   o  A multimedia session can be composed of several RTP\
    \ sessions with\n      potentially multiple RTP streams per RTP session.\n   o\
    \  Each participant in a multimedia session can have a multitude of\n      media\
    \ captures and media rendering devices.\n   o  A single multimedia session can\
    \ contain media from one or more\n      synchronization contexts (Section 3.1).\
    \  An example of that is a\n      multimedia session containing one set of audio\
    \ and video for\n      communication purposes belonging to one synchronization\
    \ context,\n      and another set of audio and video for presentation purposes\
    \ (like\n      playing a video file) with a separate synchronization context that\n\
    \      has no strong timing relationship and need not be strictly\n      synchronized\
    \ with the audio and video used for communication.\n"
- title: 2.2.5.  Communication Session
  contents:
  - "2.2.5.  Communication Session\n   A communication session is an association among\
    \ two or more\n   participants (Section 2.2.3) communicating with each other via\
    \ one or\n   more multimedia sessions (Section 2.2.4).\n   Characteristics:\n\
    \   o  Each participant in a communication session is identified via an\n    \
    \  application-specific signaling address.\n   o  A communication session is composed\
    \ of participants that share at\n      least one multimedia session, involving\
    \ one or more parallel RTP\n      sessions with potentially multiple RTP streams\
    \ per RTP session.\n   For example, in a full mesh communication, the communication\
    \ session\n   consists of a set of separate multimedia sessions between each pair\n\
    \   of participants.  Another example is a centralized conference, where\n   the\
    \ communication session consists of a set of multimedia sessions\n   between each\
    \ participant and the conference handler.\n"
- title: 3.  Concepts of Inter-Relations
  contents:
  - "3.  Concepts of Inter-Relations\n   This section uses the concepts from previous\
    \ sections and looks at\n   different types of relationships among them.  These\
    \ relationships\n   occur at different abstraction levels and for different purposes,\
    \ but\n   the reason for the needed relationship at a certain step in the media\n\
    \   handling chain may exist at another step.  For example, the use of\n   simulcast\
    \ (Section 3.6) implies a need to determine relations at the\n   RTP stream level,\
    \ but the underlying reason is that multiple media\n   encoders use the same media\
    \ source, i.e., to be able to identify a\n   common media source.\n"
- title: 3.1.  Synchronization Context
  contents:
  - "3.1.  Synchronization Context\n   A synchronization context defines a requirement\
    \ for a strong timing\n   relationship between the media sources, typically requiring\
    \ alignment\n   of clock sources.  Such a relationship can be identified in multiple\n\
    \   ways as listed below.  A single media source can only belong to a\n   single\
    \ synchronization context, since it is assumed that a single\n   media source\
    \ can only have a single media clock and requiring\n   alignment to several synchronization\
    \ contexts (and thus reference\n   clocks) will effectively merge those into a\
    \ single synchronization\n   context.\n"
- title: 3.1.1.  RTCP CNAME
  contents:
  - "3.1.1.  RTCP CNAME\n   [RFC3550] describes inter-media synchronization between\
    \ RTP sessions\n   based on RTCP CNAME, RTP, and timestamps of a reference clock\n\
    \   formatted using the Network Time Protocol (NTP) [RFC5905].  As\n   indicated\
    \ in [RFC7273], despite using NTP format timestamps, it is\n   not required that\
    \ the clock be synchronized to an NTP source.\n"
- title: 3.1.2.  Clock Source Signaling
  contents:
  - "3.1.2.  Clock Source Signaling\n   [RFC7273] provides a mechanism to signal the\
    \ clock source in the\n   Session Description Protocol (SDP) [RFC4566] both for\
    \ the reference\n   clock as well as the media clock, thus allowing a synchronization\n\
    \   context to be defined beyond the one defined by the usage of CNAME\n   source\
    \ descriptions.\n"
- title: 3.1.3.  Implicitly via RtcMediaStream
  contents:
  - "3.1.3.  Implicitly via RtcMediaStream\n   WebRTC defines RtcMediaStream with\
    \ one or more RtcMediaStreamTracks.\n   All tracks in a RtcMediaStream are intended\
    \ to be synchronized when\n   rendered, implying that they must be generated such\
    \ that\n   synchronization is possible.\n"
- title: 3.1.4.  Explicitly via SDP Mechanisms
  contents:
  - "3.1.4.  Explicitly via SDP Mechanisms\n   The SDP Grouping Framework [RFC5888]\
    \ defines an \"m=\" line\n   (Section 4.2) grouping mechanism called Lip Synchronization\
    \ (with LS\n   identification-tag) for establishing the synchronization requirement\n\
    \   across \"m=\" lines when they map to individual sources.\n   Source-Specific\
    \ Media Attributes in SDP [RFC5576] extends the above\n   mechanism when multiple\
    \ media sources are described by a single \"m=\"\n   line.\n"
- title: 3.2.  Endpoint
  contents:
  - "3.2.  Endpoint\n   Some applications require knowledge of what media sources\
    \ originate\n   from a particular endpoint (Section 2.2.1).  This can include\
    \ such\n   decisions as packet routing between parts of the topology, knowing\n\
    \   the endpoint origin of the RTP streams.\n   In RTP, this identification has\
    \ been overloaded with the\n   synchronization context (Section 3.1) through the\
    \ usage of the RTCP\n   source description CNAME (Section 3.1.1).  This works\
    \ for some\n   usages, but in others it breaks down.  For example, if an endpoint\n\
    \   has two sets of media sources that have different synchronization\n   contexts,\
    \ like the audio and video of the human participant as well\n   as a set of media\
    \ sources of audio and video for a shared movie,\n   CNAME would not be an appropriate\
    \ identification for that endpoint.\n   Therefore, an endpoint may have multiple\
    \ CNAMEs.  The CNAMEs or the\n   media sources themselves can be related to the\
    \ endpoint.\n"
- title: 3.3.  Participant
  contents:
  - "3.3.  Participant\n   In communication scenarios, information about which media\
    \ sources\n   originate from which participant (Section 2.2.3) is commonly needed.\n\
    \   One reason is, for example, to enable the application to correctly\n   display\
    \ participant identity information associated with the media\n   sources.  This\
    \ association is handled through signaling to point at a\n   specific multimedia\
    \ session where the media sources may be explicitly\n   or implicitly tied to\
    \ a particular endpoint.\n   Participant information becomes more problematic\
    \ when there are media\n   sources that are generated through mixing or other\
    \ conceptual\n   processing of raw streams or source streams that originate from\n\
    \   different participants.  These types of media sources can thus have a\n  \
    \ dynamically varying set of origins and participants.  RTP contains\n   the concept\
    \ of CSRC that carries information about the previous step\n   origin of the included\
    \ media content on the RTP level.\n"
- title: 3.4.  RtcMediaStream
  contents:
  - "3.4.  RtcMediaStream\n   An RtcMediaStream in WebRTC is an explicit grouping\
    \ of a set of media\n   sources (RtcMediaStreamTracks) that share a common identifier\
    \ and a\n   single synchronization context (Section 3.1).\n"
- title: 3.5.  Multi-Channel Audio
  contents:
  - "3.5.  Multi-Channel Audio\n   There exist a number of RTP payload formats that\
    \ can carry multi-\n   channel audio, despite the codec being a single-channel\
    \ (mono)\n   encoder.  Multi-channel audio can be viewed as multiple media sources\n\
    \   sharing a common synchronization context.  These are independently\n   encoded\
    \ by a media encoder and the different encoded streams are\n   packetized together\
    \ in a time-synchronized way into a single source\n   RTP stream, using the used\
    \ codec's RTP payload format.  Examples of\n   codecs that support multi-channel\
    \ audio are PCMA and PCMU [RFC3551],\n   Adaptive Multi Rate (AMR) [RFC4867],\
    \ and G.719 [RFC5404].\n"
- title: 3.6.  Simulcast
  contents:
  - "3.6.  Simulcast\n   A media source represented as multiple independent encoded\
    \ streams\n   constitutes a simulcast [SDP-SIMULCAST] or Modification Detection\n\
    \   Code (MDC) of that media source.  Figure 8 shows an example of a\n   media\
    \ source that is encoded into three separate simulcast streams,\n   that are in\
    \ turn sent on the same media transport flow.  When using\n   simulcast, the RTP\
    \ streams may be sharing an RTP session and media\n   transport, or be separated\
    \ on different RTP sessions and media\n   transports, or be any combination of\
    \ these two.  One major reason to\n   use separate media transports is to make\
    \ use of different quality of\n   service (QoS) for the different source RTP streams.\
    \  Some\n   considerations on separating related RTP streams are discussed in\n\
    \   Section 3.12.\n                            +----------------+\n          \
    \                  |  Media Source  |\n                            +----------------+\n\
    \                     Source Stream  |\n             +----------------------+----------------------+\n\
    \             |                      |                      |\n             V\
    \                      V                      V\n    +------------------+   +------------------+\
    \   +------------------+\n    |  Media Encoder   |   |  Media Encoder   |   |\
    \  Media Encoder   |\n    +------------------+   +------------------+   +------------------+\n\
    \             | Encoded              | Encoded              | Encoded\n      \
    \       | Stream               | Stream               | Stream\n             V\
    \                      V                      V\n    +------------------+   +------------------+\
    \   +------------------+\n    | Media Packetizer |   | Media Packetizer |   |\
    \ Media Packetizer |\n    +------------------+   +------------------+   +------------------+\n\
    \             | Source               | Source               | Source\n       \
    \      | RTP                  | RTP                  | RTP\n             | Stream\
    \               | Stream               | Stream\n             +-----------------+\
    \    |    +-----------------+\n                               |    |    |\n  \
    \                             V    V    V\n                          +-------------------+\n\
    \                          |  Media Transport  |\n                          +-------------------+\n\
    \                Figure 8: Example of Media Source Simulcast\n   The simulcast\
    \ relation between the RTP streams is the common media\n   source.  In addition,\
    \ to be able to identify the common media source,\n   a receiver of the RTP stream\
    \ may need to know which configuration or\n   encoding goals lay behind the produced\
    \ encoded stream and its\n   properties.  This enables selection of the stream\
    \ that is most useful\n   in the application at that moment.\n"
- title: 3.7.  Layered Multi-Stream
  contents:
  - "3.7.  Layered Multi-Stream\n   Layered Multi-Stream (LMS) is a mechanism by which\
    \ different portions\n   of a layered or scalable encoding of a source stream\
    \ are sent using\n   separate RTP streams (sometimes in separate RTP sessions).\
    \  LMSs are\n   useful for receiver control of layered media.\n   A media source\
    \ represented as an encoded stream and multiple\n   dependent streams constitutes\
    \ a media source that has layered\n   dependencies.  Figure 9 represents an example\
    \ of a media source that\n   is encoded into three dependent layers, where two\
    \ layers are sent on\n   the same media transport using different RTP streams,\
    \ i.e., SSRCs,\n   and the third layer is sent on a separate media transport.\n\
    \                            +----------------+\n                            |\
    \  Media Source  |\n                            +----------------+\n         \
    \                           |\n                                    |\n       \
    \                             V\n       +---------------------------------------------------------+\n\
    \       |                      Media Encoder                      |\n       +---------------------------------------------------------+\n\
    \               |                    |                     |\n        Encoded\
    \ Stream       Dependent Stream     Dependent Stream\n               |       \
    \             |                     |\n               V                    V \
    \                    V\n       +----------------+   +----------------+   +----------------+\n\
    \       |Media Packetizer|   |Media Packetizer|   |Media Packetizer|\n       +----------------+\
    \   +----------------+   +----------------+\n               |                \
    \    |                     |\n          RTP Stream           RTP Stream      \
    \      RTP Stream\n               |                    |                     |\n\
    \               +------+      +------+                     |\n               \
    \       |      |                            |\n                      V      V\
    \                            V\n                +-----------------+          \
    \    +-----------------+\n                | Media Transport |              | Media\
    \ Transport |\n                +-----------------+              +-----------------+\n\
    \           Figure 9: Example of Media Source Layered Dependency\n   It is sometimes\
    \ useful to make a distinction between using a single\n   media transport or multiple\
    \ separate media transports when (in both\n   cases) using multiple RTP streams\
    \ to carry encoded streams and\n   dependent streams for a media source.  Therefore,\
    \ the following new\n   terminology is defined here:\n   SRST:  Single RTP stream\
    \ on a Single media Transport\n   MRST:  Multiple RTP streams on a Single media\
    \ Transport\n   MRMT:  Multiple RTP streams on Multiple media Transports\n   MRST\
    \ and MRMT relations need to identify the common media encoder\n   origin for\
    \ the encoded and dependent streams.  When using different\n   RTP sessions (MRMT),\
    \ a single RTP stream per media encoder, and a\n   single media source in each\
    \ RTP session, common SSRCs and CNAMEs can\n   be used to identify the common\
    \ media source.  When multiple RTP\n   streams are sent from one media encoder\
    \ in the same RTP session\n   (MRST), then CNAME is the only currently specified\
    \ RTP identifier\n   that can be used.  In cases where multiple media encoders\
    \ use\n   multiple media sources sharing synchronization context, and thus have\n\
    \   a common CNAME, additional heuristics or identification need to be\n   applied\
    \ to create the MRST or MRMT relationships between the RTP\n   streams.\n"
- title: 3.8.  RTP Stream Duplication
  contents:
  - "3.8.  RTP Stream Duplication\n   RTP Stream Duplication [RFC7198], using the\
    \ same or different media\n   transports, and optionally also delaying the duplicate\
    \ [RFC7197],\n   offers a simple way to protect media flows from packet loss in\
    \ some\n   cases (see Figure 10).  This is a specific type of redundancy.  All\n\
    \   but one source RTP stream (Section 2.1.10) are effectively redundancy\n  \
    \ RTP streams (Section 2.1.12), but since both source and redundant RTP\n   streams\
    \ are the same, it does not matter which one is which.  This\n   can also be seen\
    \ as a specific type of simulcast (Section 3.6) that\n   transmits the same encoded\
    \ stream (Section 2.1.7) multiple times.\n                            +----------------+\n\
    \                            |  Media Source  |\n                            +----------------+\n\
    \                     Source Stream  |\n                                    V\n\
    \                            +----------------+\n                            |\
    \ Media Encoder  |\n                            +----------------+\n         \
    \           Encoded Stream  |\n                        +-----------+-----------+\n\
    \                        |                       |\n                        V\
    \                       V\n               +------------------+    +------------------+\n\
    \               | Media Packetizer |    | Media Packetizer |\n               +------------------+\
    \    +------------------+\n                 Source | RTP Stream     Source | RTP\
    \ Stream\n                        |                       V\n                \
    \        |                +-------------+\n                        |         \
    \       | Delay (opt) |\n                        |                +-------------+\n\
    \                        |                       |\n                        +-----------+-----------+\n\
    \                                    |\n                                    V\n\
    \                          +-------------------+\n                          |\
    \  Media Transport  |\n                          +-------------------+\n     \
    \          Figure 10: Example of RTP Stream Duplication\n"
- title: 3.9.  Redundancy Format
  contents:
  - "3.9.  Redundancy Format\n   \"RTP Payload for Redundant Audio Data\" [RFC2198]\
    \ defines a transport\n   for redundant audio data together with primary data\
    \ in the same RTP\n   payload.  The redundant data can be a time-delayed version\
    \ of the\n   primary or another time-delayed encoded stream using a different\n\
    \   media encoder to encode the same media source as the primary, as\n   depicted\
    \ in Figure 11.\n              +--------------------+\n              |    Media\
    \ Source    |\n              +--------------------+\n                        |\n\
    \                   Source Stream\n                        |\n               \
    \         +------------------------+\n                        |              \
    \          |\n                        V                        V\n           \
    \   +--------------------+   +--------------------+\n              |   Media Encoder\
    \    |   |   Media Encoder    |\n              +--------------------+   +--------------------+\n\
    \                        |                        |\n                        |\
    \                 +------------+\n                  Encoded Stream          |\
    \ Time Delay |\n                        |                 +------------+\n   \
    \                     |                        |\n                        |  \
    \   +------------------+\n                        V     V\n              +--------------------+\n\
    \              |  Media Packetizer  |\n              +--------------------+\n\
    \                        |\n                        V\n                   RTP\
    \ Stream\n   Figure 11: Concept for Usage of Audio Redundancy with Different Media\n\
    \                                 Encoders\n   The redundancy format is thus providing\
    \ the necessary meta\n   information to correctly relate different parts of the\
    \ same encoded\n   stream.  The case depicted above (Figure 11) relates the received\n\
    \   source stream fragments coming out of different media decoders, to be\n  \
    \ able to combine them together into a less erroneous source stream.\n"
- title: 3.10.  RTP Retransmission
  contents:
  - "3.10.  RTP Retransmission\n   Figure 12 shows an example where a media source's\
    \ source RTP stream\n   is protected by a retransmission (RTX) flow [RFC4588].\
    \  In this\n   example, the source RTP stream and the redundancy RTP stream share\n\
    \   the same media transport.\n          +--------------------+\n          | \
    \   Media Source    |\n          +--------------------+\n                    |\n\
    \                    V\n          +--------------------+\n          |   Media\
    \ Encoder    |\n          +--------------------+\n                    |      \
    \                        Retransmission\n              Encoded Stream     +--------+\
    \     +---- Request\n                    V            |        V     V\n     \
    \     +--------------------+ | +--------------------+\n          |  Media Packetizer\
    \  | | | RTP Retransmission |\n          +--------------------+ | +--------------------+\n\
    \                    |            |           |\n                    +------------+\
    \  Redundancy RTP Stream\n             Source RTP Stream               |\n   \
    \                 |                        |\n                    +---------+\
    \    +---------+\n                              |    |\n                     \
    \         V    V\n                       +-----------------+\n               \
    \        | Media Transport |\n                       +-----------------+\n   \
    \       Figure 12: Example of Media Source Retransmission Flows\n   The RTP retransmission\
    \ example (Figure 12) illustrates that this\n   mechanism works purely on the\
    \ source RTP stream.  The RTP\n   retransmission transforms buffers from the sent\
    \ source RTP stream\n   and, upon request, emits a retransmitted packet with an\
    \ extra payload\n   header as a redundancy RTP stream.  The RTP retransmission\
    \ mechanism\n   [RFC4588] is specified such that there is a one-to-one relation\n\
    \   between the source RTP stream and the redundancy RTP stream.\n   Therefore,\
    \ a redundancy RTP stream needs to be associated with its\n   source RTP stream.\
    \  This is done based on CNAME selectors and\n   heuristics to match requested\
    \ packets for a given source RTP stream\n   with the original sequence number\
    \ in the payload of any new\n   redundancy RTP stream using the RTX payload format.\
    \  In cases where\n   the redundancy RTP stream is sent in a different RTP session\
    \ than the\n   source RTP stream, the RTP session relation is signaled by using\
    \ the\n   SDP media grouping's [RFC5888] Flow Identification (FID\n   identification-tag)\
    \ semantics.\n"
- title: 3.11.  Forward Error Correction
  contents:
  - "3.11.  Forward Error Correction\n   Figure 13 shows an example where two media\
    \ sources' source RTP\n   streams are protected by FEC.  Source RTP stream A has\
    \ an RTP-based\n   redundancy transformation in FEC encoder 1.  This produces\
    \ a\n   redundancy RTP stream 1, that is only related to source RTP stream A.\n\
    \   The FEC encoder 2, however, takes two source RTP streams (A and B)\n   and\
    \ produces a redundancy RTP stream 2 that protects them jointly,\n   i.e., redundancy\
    \ RTP stream 2 relates to two source RTP streams (a\n   FEC group).  FEC decoding,\
    \ when needed due to packet loss or packet\n   corruption at the receiver, requires\
    \ knowledge about which source RTP\n   streams that the FEC encoding was based\
    \ on.\n   In Figure 13, all RTP streams are sent on the same media transport.\n\
    \   This is, however, not the only possible choice.  Numerous\n   combinations\
    \ exist for spreading these RTP streams over different\n   media transports to\
    \ achieve the communication application's goal.\n       +--------------------+\
    \                +--------------------+\n       |   Media Source A   |       \
    \         |   Media Source B   |\n       +--------------------+              \
    \  +--------------------+\n                 |                                \
    \     |\n                 V                                     V\n       +--------------------+\
    \                +--------------------+\n       |   Media Encoder A  |       \
    \         |   Media Encoder B  |\n       +--------------------+              \
    \  +--------------------+\n                 |                                \
    \     |\n           Encoded Stream                        Encoded Stream\n   \
    \              V                                     V\n       +--------------------+\
    \                +--------------------+\n       | Media Packetizer A |       \
    \         | Media Packetizer B |\n       +--------------------+              \
    \  +--------------------+\n                 |                                \
    \     |\n        Source RTP Stream A                   Source RTP Stream B\n \
    \                |                                     |\n           +-----+---------+-------------+\
    \         +---+---+\n           |               V             V         V    \
    \   |\n           |       +---------------+  +---------------+    |\n        \
    \   |       | FEC Encoder 1 |  | FEC Encoder 2 |    |\n           |       +---------------+\
    \  +---------------+    |\n           |  Redundancy   |     Redundancy   |   \
    \         |\n           |  RTP Stream 1 |     RTP Stream 2 |            |\n  \
    \         V               V                  V            V\n       +----------------------------------------------------------+\n\
    \       |                    Media Transport                       |\n       +----------------------------------------------------------+\n\
    \             Figure 13: Example of FEC Redundancy RTP Streams\n   As FEC encoding\
    \ exists in various forms, the methods for relating FEC\n   redundancy RTP streams\
    \ with its source information in source RTP\n   streams are many.  The XOR-based\
    \ RTP FEC payload format [RFC5109] is\n   defined in such a way that a redundancy\
    \ RTP stream has a one-to-one\n   relation with a source RTP stream.  In fact,\
    \ the RFC requires the\n   redundancy RTP stream to use the same SSRC as the source\
    \ RTP stream.\n   This requires the use of either a separate RTP session or the\n\
    \   redundancy RTP payload format [RFC2198].  The underlying relation\n   requirement\
    \ for this FEC format and a particular redundancy RTP\n   stream is to know the\
    \ related source RTP stream, including its SSRC.\n"
- title: 3.12.  RTP Stream Separation
  contents:
  - "3.12.  RTP Stream Separation\n   RTP streams can be separated exclusively based\
    \ on their SSRCs, at the\n   RTP session level, or at the multimedia session level.\n\
    \   When the RTP streams that have a relationship are all sent in the\n   same\
    \ RTP session and are uniquely identified based on their SSRC\n   only, it is\
    \ termed an \"SSRC-only-based separation\".  Such streams can\n   be related via\
    \ RTCP CNAME to identify that the streams belong to the\n   same endpoint.  SSRC-based\
    \ approaches [RFC5576], when used, can\n   explicitly relate various such RTP\
    \ streams.\n   On the other hand, when RTP streams that are related are sent in\
    \ the\n   context of different RTP sessions to achieve separation, it is known\n\
    \   as \"RTP session-based separation\".  This is commonly used when the\n   different\
    \ RTP streams are intended for different media transports.\n   Several mechanisms\
    \ that use RTP session-based separation rely on it\n   as a grouping mechanism\
    \ expressing the relationship.  The solutions\n   have been based on using the\
    \ same SSRC value in the different RTP\n   sessions to implicitly indicate their\
    \ relation.  That way, no\n   explicit RTP level mechanism has been needed; only\
    \ signaling level\n   relations have been established using semantics from the\
    \ media-line\n   grouping framework [RFC5888].  Examples of this are RTP\n   retransmission\
    \ [RFC4588], SVC Multi-Session Transmission [RFC6190],\n   and XOR-based FEC [RFC5109].\
    \  RTCP CNAME explicitly relates RTP\n   streams across different RTP sessions,\
    \ as explained in the previous\n   section.  Such a relationship can be used to\
    \ perform inter-media\n   synchronization.\n   RTP streams that are related and\
    \ need to be associated can be part of\n   different multimedia sessions, rather\
    \ than just different RTP\n   sessions within the same multimedia session context.\
    \  This puts\n   further demand on the scope of the mechanism(s) and its handling\
    \ of\n   identifiers used for expressing the relationships.\n"
- title: 3.13.  Multiple RTP Sessions over one Media Transport
  contents:
  - "3.13.  Multiple RTP Sessions over one Media Transport\n   [TRANSPORT-MULTIPLEX]\
    \ describes a mechanism that allows several RTP\n   sessions to be carried over\
    \ a single underlying media transport.  The\n   main reasons for doing this are\
    \ related to the impact of using one or\n   more media transports (using a common\
    \ network path or potentially\n   having different ones).  The fewer media transports\
    \ used, the less\n   need for NAT/firewall traversal resources and smaller number\
    \ of flow-\n   based QoS.\n   However, multiple RTP sessions over one media transport\
    \ imply that a\n   single media transport 5-tuple is not sufficient to express\
    \ in which\n   RTP session context a particular RTP stream exists.  Complexities\
    \ in\n   the relationship between media transports and RTP sessions already\n\
    \   exist as one RTP session contains multiple media transports, e.g.,\n   even\
    \ a Peer-to-Peer RTP Session with RTP/RTCP Multiplexing requires\n   two media\
    \ transports, one in each direction.  The relationship\n   between media transports\
    \ and RTP sessions as well as additional\n   levels of identifiers needs to be\
    \ considered in both signaling design\n   and when defining terminology.\n"
- title: 4.  Mapping from Existing Terms
  contents:
  - "4.  Mapping from Existing Terms\n   This section describes a selected set of\
    \ terms from some relevant\n   RFCs and Internet-Drafts (at the time of writing),\
    \ using the concepts\n   from previous sections.\n"
- title: 4.1.  Telepresence Terms
  contents:
  - "4.1.  Telepresence Terms\n   The terms in this subsection are used in the context\
    \ of CLUE\n   [CLUE-FRAME].  Note that some terms listed in this subsection use\
    \ the\n   same names as terms defined elsewhere in this document.  Unless\n  \
    \ explicitly stated (as \"RTP Taxonomy\") and in this subsection, they\n   are\
    \ to be read as references to the CLUE-specific term within this\n   subsection.\n"
- title: 4.1.1.  Audio Capture
  contents:
  - "4.1.1.  Audio Capture\n   Defined in CLUE as a Media Capture (Section 4.1.7)\
    \ for audio.\n   Describes an audio media source (Section 2.1.4).\n"
- title: 4.1.2.  Capture Device
  contents:
  - "4.1.2.  Capture Device\n   Defined in CLUE as a device that converts physical\
    \ input into an\n   electrical signal.  Identifies a physical entity performing\
    \ an RTP\n   Taxonomy media capture (Section 2.1.2) transformation.\n"
- title: 4.1.3.  Capture Encoding
  contents:
  - "4.1.3.  Capture Encoding\n   Defined in CLUE as a specific Encoding (Section\
    \ 4.1.6) of a Media\n   Capture (Section 4.1.7).  Describes an encoded stream\
    \ (Section 2.1.7)\n   related to CLUE-specific semantic information.\n"
- title: 4.1.4.  Capture Scene
  contents:
  - "4.1.4.  Capture Scene\n   Defined in CLUE as a structure representing a spatial\
    \ region captured\n   by one or more Capture Devices (Section 4.1.2), each capturing\
    \ media\n   representing a portion of the region.  Describes a set of spatially\n\
    \   related media sources (Section 2.1.4).\n"
- title: 4.1.5.  Endpoint
  contents:
  - "4.1.5.  Endpoint\n   Defined in CLUE as a CLUE-capable device that is the logical\
    \ point of\n   final termination through receiving, decoding, and rendering and/or\n\
    \   initiation through capturing, encoding, and sending of media Streams\n   (Section\
    \ 4.1.10).  CLUE further defines it to consist of one or more\n   physical devices\
    \ with source and sink media streams, and exactly one\n   participant [RFC4353].\
    \  Describes exactly one participant\n   (Section 2.2.3) and one or more RTP Taxonomy\
    \ endpoints\n   (Section 2.2.1).\n"
- title: 4.1.6.  Individual Encoding
  contents:
  - "4.1.6.  Individual Encoding\n   Defined in CLUE as a set of parameters representing\
    \ a way to encode a\n   Media Capture (Section 4.1.7) to become a Capture Encoding\n\
    \   (Section 4.1.3).  Describes the configuration information needed to\n   perform\
    \ a media encoder (Section 2.1.6) transformation.\n"
- title: 4.1.7.  Media Capture
  contents:
  - "4.1.7.  Media Capture\n   Defined in CLUE as a source of media, such as from\
    \ one or more\n   Capture Devices (Section 4.1.2) or constructed from other media\n\
    \   Streams (Section 4.1.10).  Describes either an RTP Taxonomy media\n   capture\
    \ (Section 2.1.2) or a media source (Section 2.1.4), depending\n   on in which\
    \ context the term is used.\n"
- title: 4.1.8.  Media Consumer
  contents:
  - "4.1.8.  Media Consumer\n   Defined in CLUE as a CLUE-capable device that intends\
    \ to receive\n   Capture Encodings (Section 4.1.3).  Describes the media receiving\n\
    \   part of an RTP Taxonomy endpoint (Section 2.2.1).\n"
- title: 4.1.9.  Media Provider
  contents:
  - "4.1.9.  Media Provider\n   Defined in CLUE as a CLUE-capable device that intends\
    \ to send Capture\n   Encodings (Section 4.1.3).  Describes the media sending\
    \ part of an\n   RTP Taxonomy endpoint (Section 2.2.1).\n"
- title: 4.1.10.  Stream
  contents:
  - "4.1.10.  Stream\n   Defined in CLUE as a Capture Encoding (Section 4.1.3) sent\
    \ from a\n   Media Provider (Section 4.1.9) to a Media Consumer (Section 4.1.8)\n\
    \   via RTP.  Describes an RTP stream (Section 2.1.10).\n"
- title: 4.1.11.  Video Capture
  contents:
  - "4.1.11.  Video Capture\n   Defined in CLUE as a Media Capture (Section 4.1.7)\
    \ for video.\n   Describes a video media source (Section 2.1.4).\n"
- title: 4.2.  Media Description
  contents:
  - "4.2.  Media Description\n   A single Session Description Protocol (SDP) [RFC4566]\
    \ Media\n   Description (or media block; an \"m=\" line and all subsequent lines\n\
    \   until the next \"m=\" line or the end of the SDP) describes part of the\n\
    \   necessary configuration and identification information needed for a\n   media\
    \ encoder transformation, as well as the necessary configuration\n   and identification\
    \ information for the media decoder to be able to\n   correctly interpret a received\
    \ RTP stream.\n   A media description typically relates to a single media source.\
    \  This\n   is, for example, an explicit restriction in WebRTC.  However, nothing\n\
    \   prevents that the same media description (and same RTP session) is\n   reused\
    \ for multiple media sources [RTP-MULTI-STREAM].  It can thus\n   describe properties\
    \ of one or more RTP streams, and can also describe\n   properties valid for an\
    \ entire RTP session (via [RFC5576] mechanisms,\n   for example).\n"
- title: 4.3.  Media Stream
  contents:
  - "4.3.  Media Stream\n   RTP [RFC3550] uses media stream, audio stream, video stream,\
    \ and a\n   stream of (RTP) packets interchangeably, which are all RTP streams.\n"
- title: 4.4.  Multimedia Conference
  contents:
  - "4.4.  Multimedia Conference\n   A Multimedia Conference is a communication session\
    \ (Section 2.2.5)\n   between two or more participants (Section 2.2.3), along\
    \ with the\n   software they are using to communicate.\n"
- title: 4.5.  Multimedia Session
  contents:
  - "4.5.  Multimedia Session\n   SDP [RFC4566] defines a multimedia session as a\
    \ set of multimedia\n   senders and receivers and the data streams flowing from\
    \ senders to\n   receivers, which would correspond to a set of endpoints and the\
    \ RTP\n   streams that flow between them.  In this document, multimedia session\n\
    \   (Section 2.2.4) also assumes those endpoints belong to a set of\n   participants\
    \ that are engaged in communication via a set of related\n   RTP streams.\n  \
    \ RTP [RFC3550] defines a multimedia session as a set of concurrent RTP\n   sessions\
    \ among a common group of participants.  For example, a video\n   conference may\
    \ contain an audio RTP session and a video RTP session.\n   This would correspond\
    \ to a group of participants (each using one or\n   more endpoints) sharing a\
    \ set of concurrent RTP sessions.  In this\n   document, multimedia session also\
    \ defines those RTP sessions to have\n   some relation and be part of a communication\
    \ among the participants.\n"
- title: 4.6.  Multipoint Control Unit (MCU)
  contents:
  - "4.6.  Multipoint Control Unit (MCU)\n   This term is commonly used to describe\
    \ the central node in any type\n   of star topology [RTP-TOPOLOGIES] conference.\
    \  It describes a device\n   that includes one participant (Section 2.2.3) (usually\
    \ corresponding\n   to a so-called conference focus) and one or more related endpoints\n\
    \   (Section 2.2.1) (sometimes one or more per conference participant).\n"
- title: 4.7.  Multi-Session Transmission (MST)
  contents:
  - "4.7.  Multi-Session Transmission (MST)\n   One of two transmission modes defined\
    \ in H.264-based SVC [RFC6190],\n   the other mode being a Single-Session Transmission\
    \ (SST)\n   (Section 4.14).  In Multi-Session Transmission (MST), the SVC media\n\
    \   encoder sends encoded streams and dependent streams distributed\n   across\
    \ two or more RTP streams in one or more RTP sessions.  The term\n   \"MST\" is\
    \ ambiguous in RFC 6190, especially since the name indicates\n   the use of multiple\
    \ \"sessions\", while MST-type packetization is in\n   fact required whenever\
    \ two or more RTP streams are used for the\n   encoded and dependent streams,\
    \ regardless if those are sent in one or\n   more RTP sessions.  Corresponds either\
    \ to MRST or MRMT (Section 3.7)\n   stream relations defined in this document.\
    \  The SVC RTP payload RFC\n   [RFC6190] is not particularly explicit about how\
    \ the common media\n   encoder (Section 2.1.6) relation between encoded streams\n\
    \   (Section 2.1.7) and dependent streams (Section 2.1.8) is to be\n   implemented.\n"
- title: 4.8.  Recording Device
  contents:
  - "4.8.  Recording Device\n   WebRTC specifications use this term to refer to locally\
    \ available\n   entities performing a media capture (Section 2.1.2) transformation.\n"
- title: 4.9.  RtcMediaStream
  contents:
  - "4.9.  RtcMediaStream\n   A WebRTC RtcMediaStream is a set of media sources (Section\
    \ 2.1.4)\n   sharing the same synchronization context (Section 3.1).\n"
- title: 4.10.  RtcMediaStreamTrack
  contents:
  - "4.10.  RtcMediaStreamTrack\n   A WebRTC RtcMediaStreamTrack is a media source\
    \ (Section 2.1.4).\n"
- title: 4.11.  RTP Receiver
  contents:
  - "4.11.  RTP Receiver\n   RTP [RFC3550] uses this term, which can be seen as the\
    \ RTP protocol\n   part of a media depacketizer (Section 2.1.27).\n"
- title: 4.12.  RTP Sender
  contents:
  - "4.12.  RTP Sender\n   RTP [RFC3550] uses this term, which can be seen as the\
    \ RTP protocol\n   part of a media packetizer (Section 2.1.9).\n"
- title: 4.13.  RTP Session
  contents:
  - "4.13.  RTP Session\n   Within the context of SDP, a singe \"m=\" line can map\
    \ to a single RTP\n   session (Section 2.2.2), or multiple \"m=\" lines can map\
    \ to a single\n   RTP session.  The latter is enabled via multiplexing schemes\
    \ such as\n   BUNDLE [SDP-BUNDLE], for example, which allows mapping of multiple\n\
    \   \"m=\" lines to a single RTP session.\n"
- title: 4.14.  Single-Session Transmission (SST)
  contents:
  - "4.14.  Single-Session Transmission (SST)\n   One of two transmission modes defined\
    \ in H.264-based SVC [RFC6190],\n   the other mode being MST (Section 4.7).  In\
    \ SST, the SVC media\n   encoder sends encoded streams (Section 2.1.7) and dependent\
    \ streams\n   (Section 2.1.8) combined into a single RTP stream (Section 2.1.10)\
    \ in\n   a single RTP session (Section 2.2.2), using the SVC RTP payload\n   format.\
    \  The term \"SST\" is ambiguous in RFC 6190, in that it\n   sometimes refers\
    \ to the use of a single RTP stream, like in sections\n   relating to packetization,\
    \ and sometimes appears to refer to use of a\n   single RTP session, like in the\
    \ context of discussing SDP.  Closely\n   corresponds to SRST (Section 3.7) defined\
    \ in this document.\n"
- title: 4.15.  SSRC
  contents:
  - "4.15.  SSRC\n   RTP [RFC3550] defines this as \"the source of a stream of RTP\n\
    \   packets\", which indicates that an SSRC is not only a unique\n   identifier\
    \ for the encoded stream (Section 2.1.7) carried in those\n   packets but is also\
    \ effectively used as a term to denote a media\n   packetizer (Section 2.1.9).\
    \  In [RFC3550], it is stated that \"a\n   synchronization source may change its\
    \ data format, e.g., audio\n   encoding, over time\".  The related encoded stream\
    \ data format in an\n   RTP stream (Section 2.1.10) is identified by the RTP payload\
    \ type.\n   Changing the data format for an encoded stream effectively also\n\
    \   changes what media encoder (Section 2.1.6) is used for the encoded\n   stream.\
    \  No ambiguity is introduced to SSRC as an encoded stream\n   identifier by allowing\
    \ RTP payload type changes, as long as only a\n   single RTP payload type is valid\
    \ for any given RTP Timestamp.  This\n   is aligned with and further described\
    \ by Section 5.2 of [RFC3550].\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The purpose of this document is to make clarifications\
    \ and reduce the\n   confusion prevalent in RTP taxonomy because of inconsistent\
    \ usage by\n   multiple technologies and protocols making use of the RTP protocol.\n\
    \   It does not introduce any new security considerations beyond those\n   already\
    \ well documented in the RTP protocol [RFC3550] and each of the\n   many respective\
    \ specifications of the various protocols making use of\n   it.\n   Having a well-defined\
    \ common terminology and understanding of the\n   complexities of the RTP architecture\
    \ will help lead us to better\n   standards, avoiding security problems.\n"
- title: 6.  Informative References
  contents:
  - "6.  Informative References\n   [CLUE-FRAME]\n              Duckworth, M., Pepperell,\
    \ A., and S. Wenger, \"Framework\n              for Telepresence Multi-Streams\"\
    , Work in Progress,\n              draft-ietf-clue-framework-22, April 2015.\n\
    \   [RFC2198]  Perkins, C., Kouvelas, I., Hodson, O., Hardman, V.,\n         \
    \     Handley, M., Bolot, J., Vega-Garcia, A., and S. Fosse-\n              Parisis,\
    \ \"RTP Payload for Redundant Audio Data\", RFC 2198,\n              DOI 10.17487/RFC2198,\
    \ September 1997,\n              <http://www.rfc-editor.org/info/rfc2198>.\n \
    \  [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n           \
    \   Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC3551]  Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and\n  \
    \            Video Conferences with Minimal Control\", STD 65, RFC 3551,\n   \
    \           DOI 10.17487/RFC3551, July 2003,\n              <http://www.rfc-editor.org/info/rfc3551>.\n\
    \   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n   \
    \           Norrman, \"The Secure Real-time Transport Protocol (SRTP)\",\n   \
    \           RFC 3711, DOI 10.17487/RFC3711, March 2004,\n              <http://www.rfc-editor.org/info/rfc3711>.\n\
    \   [RFC4353]  Rosenberg, J., \"A Framework for Conferencing with the\n      \
    \        Session Initiation Protocol (SIP)\", RFC 4353,\n              DOI 10.17487/RFC4353,\
    \ February 2006,\n              <http://www.rfc-editor.org/info/rfc4353>.\n  \
    \ [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n     \
    \         Description Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n          \
    \    July 2006, <http://www.rfc-editor.org/info/rfc4566>.\n   [RFC4588]  Rey,\
    \ J., Leon, D., Miyazaki, A., Varsa, V., and R.\n              Hakenberg, \"RTP\
    \ Retransmission Payload Format\", RFC 4588,\n              DOI 10.17487/RFC4588,\
    \ July 2006,\n              <http://www.rfc-editor.org/info/rfc4588>.\n   [RFC4867]\
    \  Sjoberg, J., Westerlund, M., Lakaniemi, A., and Q. Xie,\n              \"RTP\
    \ Payload Format and File Storage Format for the\n              Adaptive Multi-Rate\
    \ (AMR) and Adaptive Multi-Rate Wideband\n              (AMR-WB) Audio Codecs\"\
    , RFC 4867, DOI 10.17487/RFC4867,\n              April 2007, <http://www.rfc-editor.org/info/rfc4867>.\n\
    \   [RFC5109]  Li, A., Ed., \"RTP Payload Format for Generic Forward Error\n \
    \             Correction\", RFC 5109, DOI 10.17487/RFC5109, December\n       \
    \       2007, <http://www.rfc-editor.org/info/rfc5109>.\n   [RFC5404]  Westerlund,\
    \ M. and I. Johansson, \"RTP Payload Format for\n              G.719\", RFC 5404,\
    \ DOI 10.17487/RFC5404, January 2009,\n              <http://www.rfc-editor.org/info/rfc5404>.\n\
    \   [RFC5481]  Morton, A. and B. Claise, \"Packet Delay Variation\n          \
    \    Applicability Statement\", RFC 5481, DOI 10.17487/RFC5481,\n            \
    \  March 2009, <http://www.rfc-editor.org/info/rfc5481>.\n   [RFC5576]  Lennox,\
    \ J., Ott, J., and T. Schierl, \"Source-Specific\n              Media Attributes\
    \ in the Session Description Protocol\n              (SDP)\", RFC 5576, DOI 10.17487/RFC5576,\
    \ June 2009,\n              <http://www.rfc-editor.org/info/rfc5576>.\n   [RFC5888]\
    \  Camarillo, G. and H. Schulzrinne, \"The Session Description\n             \
    \ Protocol (SDP) Grouping Framework\", RFC 5888,\n              DOI 10.17487/RFC5888,\
    \ June 2010,\n              <http://www.rfc-editor.org/info/rfc5888>.\n   [RFC5905]\
    \  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n              \"Network\
    \ Time Protocol Version 4: Protocol and Algorithms\n              Specification\"\
    , RFC 5905, DOI 10.17487/RFC5905, June 2010,\n              <http://www.rfc-editor.org/info/rfc5905>.\n\
    \   [RFC6190]  Wenger, S., Wang, Y., Schierl, T., and A. Eleftheriadis,\n    \
    \          \"RTP Payload Format for Scalable Video Coding\", RFC 6190,\n     \
    \         DOI 10.17487/RFC6190, May 2011,\n              <http://www.rfc-editor.org/info/rfc6190>.\n\
    \   [RFC7160]  Petit-Huguenin, M. and G. Zorn, Ed., \"Support for Multiple\n \
    \             Clock Rates in an RTP Session\", RFC 7160,\n              DOI 10.17487/RFC7160,\
    \ April 2014,\n              <http://www.rfc-editor.org/info/rfc7160>.\n   [RFC7197]\
    \  Begen, A., Cai, Y., and H. Ou, \"Duplication Delay\n              Attribute\
    \ in the Session Description Protocol\", RFC 7197,\n              DOI 10.17487/RFC7197,\
    \ April 2014,\n              <http://www.rfc-editor.org/info/rfc7197>.\n   [RFC7198]\
    \  Begen, A. and C. Perkins, \"Duplicating RTP Streams\",\n              RFC 7198,\
    \ DOI 10.17487/RFC7198, April 2014,\n              <http://www.rfc-editor.org/info/rfc7198>.\n\
    \   [RFC7201]  Westerlund, M. and C. Perkins, \"Options for Securing RTP\n   \
    \           Sessions\", RFC 7201, DOI 10.17487/RFC7201, April 2014,\n        \
    \      <http://www.rfc-editor.org/info/rfc7201>.\n   [RFC7273]  Williams, A.,\
    \ Gross, K., van Brandenburg, R., and H.\n              Stokking, \"RTP Clock\
    \ Source Signalling\", RFC 7273,\n              DOI 10.17487/RFC7273, June 2014,\n\
    \              <http://www.rfc-editor.org/info/rfc7273>.\n   [RTP-MULTI-STREAM]\n\
    \              Lennox, J., Westerlund, M., Wu, W., and C. Perkins,\n         \
    \     \"Sending Multiple Media Streams in a Single RTP Session\",\n          \
    \    Work in Progress, draft-ietf-avtcore-rtp-multi-stream-08,\n             \
    \ July 2015.\n   [RTP-TOPOLOGIES]\n              Westerlund, M. and S. Wenger,\
    \ \"RTP Topologies\", Work in\n              Progress, draft-ietf-avtcore-rtp-topologies-update-10,\n\
    \              July 2015.\n   [SDP-BUNDLE]\n              Holmberg, C., Alvestrand,\
    \ H., and C. Jennings,\n              \"Negotiating Media Multiplexing Using the\
    \ Session\n              Description Protocol (SDP)\", Work in Progress,\n   \
    \           draft-ietf-mmusic-sdp-bundle-negotiation-23, July 2015.\n   [SDP-SIMULCAST]\n\
    \              Burman, B., Westerlund, M., Nandakumar, S., and M. Zanaty,\n  \
    \            \"Using Simulcast in SDP and RTP Sessions\", Work in\n          \
    \    Progress, draft-ietf-mmusic-sdp-simulcast-01, July 2015.\n   [TRANSPORT-MULTIPLEX]\n\
    \              Westerlund, M. and C. Perkins, \"Multiplexing Multiple RTP\n  \
    \            Sessions onto a Single Lower-Layer Transport\", Work in\n       \
    \       Progress, draft-westerlund-avtcore-transport-multiplexing-\n         \
    \     07, October 2013.\n   [WEBRTC-OVERVIEW]\n              Alvestrand, H., \"\
    Overview: Real Time Protocols for\n              Browser-based Applications\"\
    , Work in Progress,\n              draft-ietf-rtcweb-overview-14, June 2015.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document has many concepts borrowed from several documents\
    \ such\n   as WebRTC [WEBRTC-OVERVIEW], CLUE [CLUE-FRAME], and Multiplexing\n\
    \   Architecture [TRANSPORT-MULTIPLEX].  The authors would like to thank\n   all\
    \ the authors of each of those documents.\n   The authors would also like to acknowledge\
    \ the insights, guidance,\n   and contributions of Magnus Westerlund, Roni Even,\
    \ Paul Kyzivat,\n   Colin Perkins, Keith Drage, Harald Alvestrand, Alex Eleftheriadis,\
    \ Mo\n   Zanaty, Stephan Wenger, and Bernard Aboba.\n"
- title: Contributors
  contents:
  - "Contributors\n   Magnus Westerlund has contributed the concept model for the\
    \ media\n   chain using transformations and streams model, including rewriting\n\
    \   pre-existing concepts into this model and adding missing concepts.\n   The\
    \ first proposal for updating the relationships and the topologies\n   based on\
    \ this concept was also performed by Magnus.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jonathan Lennox\n   Vidyo, Inc.\n   433 Hackensack Avenue\n\
    \   Seventh Floor\n   Hackensack, NJ  07601\n   United States\n   Email: jonathan@vidyo.com\n\
    \   Kevin Gross\n   AVA Networks, LLC\n   Boulder, CO\n   United States\n   Email:\
    \ kevin.gross@avanw.com\n   Suhas Nandakumar\n   Cisco Systems\n   170 West Tasman\
    \ Drive\n   San Jose, CA  95134\n   United States\n   Email: snandaku@cisco.com\n\
    \   Gonzalo Salgueiro\n   Cisco Systems\n   7200-12 Kit Creek Road\n   Research\
    \ Triangle Park, NC  27709\n   United States\n   Email: gsalguei@cisco.com\n \
    \  Bo Burman (editor)\n   Ericsson\n   Kistavagen 25\n   SE-16480 Stockholm\n\
    \   Sweden\n   Email: bo.burman@ericsson.com\n"
