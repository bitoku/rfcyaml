- title: __initial_text__
  contents:
  - "                Internet X.509 Public Key Infrastructure\n        Operational\
    \ Protocols: Certificate Store Access via HTTP\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The protocol conventions described in this document satisfy some\
    \ of\n   the operational requirements of the Internet Public Key\n   Infrastructure\
    \ (PKI).  This document specifies the conventions for\n   using the Hypertext\
    \ Transfer Protocol (HTTP/HTTPS) as an interface\n   mechanism to obtain certificates\
    \ and certificate revocation lists\n   (CRLs) from PKI repositories.  Additional\
    \ mechanisms addressing PKIX\n   operational requirements are specified in separate\
    \ documents.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. HTTP Certificate Store Interface ................................3\n  \
    \    2.1. Converting Binary Blobs into Search Keys ...................4\n    \
    \  2.2. Attribute Types: X.509 .....................................5\n      2.3.\
    \ Attribute Types: PGP .......................................6\n      2.4. Attribute\
    \ Types: XML .......................................6\n      2.5. Implementation\
    \ Notes and Rationale .........................6\n           2.5.1. Identification\
    \ ......................................7\n           2.5.2. Checking of Input\
    \ Values ............................9\n           2.5.3. URI Notes ..........................................10\n\
    \           2.5.4. Responses ..........................................11\n  \
    \         2.5.5. Performance Issues .................................12\n    \
    \       2.5.6. Miscellaneous ......................................13\n      2.6.\
    \ Examples ..................................................14\n   3. Locating\
    \ HTTP Certificate Stores ...............................15\n      3.1. Information\
    \ in the Certificate ............................15\n      3.2. Use of DNS SRV\
    \ ............................................16\n           3.2.1. Example ............................................16\n\
    \      3.3. Use of a \"well-known\" Location ............................16\n\
    \           3.3.1. Examples ...........................................17\n  \
    \    3.4. Manual Configuration of the Client Software ...............18\n    \
    \  3.5. Implementation Notes and Rationale ........................18\n      \
    \     3.5.1. DNS SRV ............................................18\n        \
    \   3.5.2. \"well-known\" Locations .............................19\n        \
    \   3.5.3. Information in the Certificate .....................19\n          \
    \ 3.5.4. Miscellaneous ......................................20\n   4. Security\
    \ Considerations ........................................20\n   5. IANA Considerations\
    \ ............................................22\n   6. Acknowledgements ...............................................22\n\
    \   7. References .....................................................22\n  \
    \    7.1. Normative References ......................................22\n    \
    \  7.2. Informative References ....................................23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification is part of a multi-part standard for\
    \ the Internet\n   Public Key Infrastructure (PKI) using X.509 certificates and\n\
    \   certificate revocation lists (CRLs).  This document specifies the\n   conventions\
    \ for using the Hypertext Transfer Protocol (HTTP), or\n   optionally, HTTPS as\
    \ an interface mechanism to obtain certificates or\n   public keys, and certificate\
    \ revocation lists (CRLs), from PKI\n   repositories.  Throughout the remainder\
    \ of this document the generic\n   term HTTP will be used to cover either option.\n\
    \   Although RFC 2585 [RFC2585] covers fetching certificates via HTTP,\n   this\
    \ merely mentions that certificates may be fetched from a static\n   URL, which\
    \ doesn't provide any general-purpose interface capabilities\n   to a certificate\
    \ store.  The conventions described in this document\n   allow HTTP to be used\
    \ as a general-purpose, transparent interface to\n   any type of certificate or\
    \ key store including flat files, standard\n   databases such as Berkeley DB and\
    \ relational databases, and\n   traditional X.500/LDAP directories.  Typical applications\
    \ would\n   include use with web-enabled relational databases (which most\n  \
    \ databases are) or simple {key,value} lookup mechanisms such as\n   Berkeley\
    \ DB and its various descendants.\n   Additional mechanisms addressing PKIX operational\
    \ requirements are\n   specified in separate documents.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this document are to be\n   interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  HTTP Certificate Store Interface
  contents:
  - "2.  HTTP Certificate Store Interface\n   The GET method is used in combination\
    \ with an HTTP query URI\n   [RFC2616] to retrieve certificates from the underlying\
    \ certificate\n   store:\n   http_URL = \"http:\" \"//\" host [ \":\" port ] [\
    \ abs_path [ \"?\" query ]]\n   The parameters for the query portion of the URI\
    \ are a certificate or\n   key identifier consisting of an attribute type and\
    \ a value that\n   specifies one or more certificates or public keys to be returned\
    \ from\n   the query:\n      query = attribute '=' value\n   Certificates and\
    \ public keys are retrieved from one URI (the\n   certificate URI) and CRLs from\
    \ another URI (the revocation URI).\n   These may or may not correspond to the\
    \ same certificate store and/or\n   server (the exact interpretation is a local\
    \ configuration issue).\n   The query value MUST be encoded using the form-urlencoded\
    \ media type\n   [RFC2854].  Further details of URI construction, size limits,\
    \ and\n   other factors are given in [RFC2616].\n   Responses to unsuccessful\
    \ queries (for example, to indicate a non-\n   match or an error condition) are\
    \ handled in the standard manner as\n   per [RFC2616].  Clients should in particular\
    \ be aware that in some\n   instances servers may return HTTP type 3xx redirection\
    \ requests to\n   explicitly redirect queries to another server.  Obviously, implicit\n\
    \   DNS-based redirection is also possible.\n   If more than one certificate matches\
    \ a query, it MUST be returned as\n   a multipart/mixed response.  The returned\
    \ data MUST be returned\n   verbatim; it MUST NOT use any additional content-\
    \ or transfer-\n   encoding at the HTTP level (for example, it can't be compressed\
    \ or\n   encoded as base64 or quoted-printable text).  Implementations SHOULD\n\
    \   NOT use chunked encoding in responses.\n   The query component of the URI\
    \ MAY optionally contain additional\n   attribute/value pairs separated by the\
    \ standard ampersand delimiter\n   '&' that specify further actions to be taken\
    \ by the certificate\n   store.  Certificate stores SHOULD ignore any additional\
    \ unrecognised\n   attribute/value pairs present in the URI.\n   Other information,\
    \ such as naming conventions and MIME types, is\n   specified in [RFC2585] (with\
    \ additional MIME types for non-X.509\n   content in [RFC3156] and [RFC3275]).\n"
- title: 2.1.  Converting Binary Blobs into Search Keys
  contents:
  - "2.1.  Converting Binary Blobs into Search Keys\n   Some fields (indicated by\
    \ the \"Process\" column in the tables below)\n   are of arbitrary length and/or\
    \ contain non-textual data.  Both of\n   these properties make them unsuited for\
    \ direct use in HTTP queries.\n   In order to make them usable, fields for which\
    \ the processing option\n   is \"Hash\" are first hashed down to a fixed-length\
    \ 160-bit value.\n   Fields for which the processing option is \"Hash\" or \"\
    Base64\" are\n   base64-encoded to transform the binary data into textual forms:\n\
    \   Processing  Processing step\n   option\n   \"Hash\"      Hash the key value\
    \ using SHA-1 [FIPS180] to produce a\n               160-bit value, then continue\
    \ with the base64 encoding\n               step that follows.\n   \"Hash\"   \
    \   Encode the binary value using base64 encoding to produce\n   \"Base64\"  \
    \  a 27-byte text-only value.  Base64 encoding of the 20\n               byte\
    \ value will produce 28 bytes, and the last byte will\n               always be\
    \ a '=' padding character.  The 27-byte value is\n               created by dropping\
    \ the trailing '=' character.\n   For cases where the binary value is smaller\
    \ or larger than the 20-\n   byte SHA-1 output (for example, with 64-bit/8 byte\
    \ PGP key IDs), the\n   final value is created by removing any trailing '=' padding\
    \ from the\n   encoding of the binary value (this is a generalisation of the above\n\
    \   case).\n   Implementations MUST verify that the base64-encoded values submitted\n\
    \   in requests contain only characters in the ranges 'a'-'z', 'A'-'Z',\n   '0'-'9',\
    \ '+', and '/'.  Queries containing any other character MUST\n   be rejected.\
    \  (See the implementation notes in Section 2.5 and the\n   security considerations\
    \ in Section 4 for more details on this\n   requirement.)\n"
- title: '2.2.  Attribute Types: X.509'
  contents:
  - "2.2.  Attribute Types: X.509\n   Permitted attribute types and associated values\
    \ for use with X.509\n   certificates and CRLs are described below.  Arbitrary-length\
    \ binary\n   values (as indicated in the table below) are converted into a search\n\
    \   key by the process described in Section 2.1.  Note that the values\n   are\
    \ checked for an exact match (after decoding of any form-urlencoded\n   [RFC2854]\
    \ portions if this is necessary) and are therefore case\n   sensitive.\n   Attribute\
    \  Process Value\n   ---------  ------- -----\n   certHash    Hash   Search key\
    \ derived from the SHA-1 hash of the\n                      certificate (sometimes\
    \ called the certificate\n                      fingerprint or thumbprint).\n\
    \   uri         None   Subject URI associated with the certificate,\n        \
    \              without the (optional) scheme specifier.  The URI\n           \
    \           type depends on the certificate.  For S/MIME\n                   \
    \   certificates, it would be an email address; for\n                      SSL/TLS\
    \ certificates, it would be the server's DNS\n                      name (this\
    \ is usually also specified as the\n                      CommonName); for IPsec\
    \ certificates, it would be\n                      the DNS name/IP address; and\
    \ so on.\n   iHash       Hash   Search key derived from the DER-encoded issuer\
    \ DN\n                      as it appears in the certificate, CRL, or other\n\
    \                      object.\n   iAndSHash   Hash   Search key derived from\
    \ the certificate's\n                      DER-encoded issuerAndSerialNumber [RFC3852].\n\
    \   name        None   Subject CommonName contained in the certificate.\n   sHash\
    \       Hash   Search key derived from the DER-encoded subject\n             \
    \         DN as it appears in the certificate or other\n                     \
    \ object.\n   sKIDHash    Hash   Search key derived from the certificate's\n \
    \                     subjectKeyIdentifier (specifically the contents\n      \
    \                octets of the KeyIdentifier OCTET STRING).\n   Certificate URIs\
    \ MUST support retrieval by all the above attribute\n   types.\n   CRL URIs MUST\
    \ support retrieval by the iHash and sKIDHash attribute\n   types, which identify\
    \ the issuer of the CRL.  In addition, CRL URIs\n   MAY support retrieval by certHash\
    \ and iAndSHash attribute types, for\n   cases where this is required by the use\
    \ of the\n   issuingDistributionPoint extension.  A CRL query MUST return the\n\
    \   matching CRL with the greatest thisUpdate value (in other words, the\n   most\
    \ recent CRL).\n"
- title: '2.3.  Attribute Types: PGP'
  contents:
  - "2.3.  Attribute Types: PGP\n   Permitted attribute types and associated values\
    \ for use with PGP\n   public keys and key revocation information are described\
    \ below.\n   Binary values (as indicated in the table below) are converted into\
    \ a\n   search key by the process described in Section 2.1.\n   Attribute   Process\
    \  Value\n   ---------   -------  -----\n   email       None     email address\
    \ associated with the key.\n   fingerprint Base64   160-bit PGP key fingerprint\
    \ [RFC2440].\n   keyID       Base64   64-bit PGP key ID [RFC2440].\n   name  \
    \      None     User name associated with the key.\n   Key URIs MUST support retrieval\
    \ by all of the above attribute types.\n   Revocation URIs MUST support retrieval\
    \ by the fingerprint and keyID\n   attribute types, which identify the issuer\
    \ of the key revocation.\n"
- title: '2.4.  Attribute Types: XML'
  contents:
  - "2.4.  Attribute Types: XML\n   Permitted attribute types and associated values\
    \ for use with XML are\n   as specified in sections 2.2 and 2.3.  Since XML allows\
    \ arbitrary\n   attributes to be associated with the <RetrievalMethod> child element\n\
    \   of <KeyInfo> [RFC3275], there are no additional special requirements\n   for\
    \ use with XML.\n"
- title: 2.5.  Implementation Notes and Rationale
  contents:
  - "2.5.  Implementation Notes and Rationale\n   This informative section documents\
    \ the rationale behind the design in\n   Section 2 and provides guidance for implementors.\n"
- title: 2.5.1.  Identification
  contents:
  - "2.5.1.  Identification\n   The identifiers are taken from PKCS #15 [PKCS15],\
    \ a standard that\n   covers (among other things) a transparent interface to a\n\
    \   certificate/public key store.  These identifiers have been field\n   proven,\
    \ as they have been in common use for a number of years,\n   typically via PKCS\
    \ #11 [PKCS11].  Certificate stores and the\n   identifiers that are required\
    \ for typical certificate lookup\n   operations are analysed in some detail in\
    \ [Gutmann].\n   The URI identifier type specifies the identifier associated with\
    \ the\n   certificate's intended usage with a given Internet security protocol.\n\
    \   For example, an SSL/TLS server certificate would contain the server's\n  \
    \ DNS name (this is traditionally also specified as the CommonName or\n   CN)\
    \ an S/MIME certificate would contain the subject's email address;\n   an IPsec\
    \ certificate would contain a DNS name or IP address; and a\n   SIP certificate\
    \ would contain a SIP URI.  A modicum of common sense\n   is assumed when deciding\
    \ upon an appropriate URI field value.\n   For historical reasons going back to\
    \ its primary use as a means of\n   looking up users' S/MIME email certificates,\
    \ some clients may specify\n   the URI attribute name as \"email\" rather than\
    \ \"uri\".  Although not\n   required by this specification, servers may choose\
    \ to allow the use\n   of \"email\" as an alias for \"uri\".\n   In addition,\
    \ it is common practice to use the Internet identifier\n   associated with the\
    \ certificate's intended field of application as\n   the CN for the certificate\
    \ when this is the most sensible name for\n   the certificate subject.  For example,\
    \ an SSL/TLS server certificate\n   will contain the server's DNS name in the\
    \ CN field.  In web-enabled\n   devices, this may indeed be the only name that\
    \ exists for the device.\n   It is therefore quite possible that the URI will\
    \ duplicate the CN,\n   and that it may be the only identifier present (that is,\
    \ there's no\n   full DN but only a single CN field).\n   By long-standing convention,\
    \ URIs in certificates are given without a\n   scheme specifier.  For example,\
    \ an SSL/TLS server certificate would\n   contain www.example.com rather than\
    \ https://www.example.com, and an\n   S/MIME certificate would contain user@example.com\
    \ rather than\n   mailto:user@example.com.  This convention is extended to other\
    \ URI\n   types as well, so that a certificate containing the (effective) URIs\n\
    \   im:user@example.com and xmpp:user@example.com would be queried using\n   the\
    \ single URI user@example.com.  The certificate store would then\n   return all\
    \ certificates containing this URI, leaving it to the client\n   to determine\
    \ which one is most appropriate for its use.  This\n   approach is taken both\
    \ because for the most common URI types there's\n   no schema specifier (see the\
    \ paragraphs above) and no easy way to\n   determine what the intended use is\
    \ (an SSL/TLS server certificate is\n   simply one presented by an SSL/TLS server),\
    \ and because the relying\n   party/client is in a better position to judge the\
    \ certificate's most\n   appropriate use than the certificate store server.\n\
    \   Another possible identifier that has been suggested is an IP address\n   or\
    \ DNS name, which will be required for web-enabled embedded devices.\n   This\
    \ is necessary to allow for example a home automation controller\n   to be queried\
    \ for certificates for the devices that it controls.\n   Since this value is regarded\
    \ as the CN for the device, common\n   practice is to use this value for the CN\
    \ in the same way that web\n   server certificates set the CN to the server's\
    \ DNS name, so this\n   option is already covered in a widely-accepted manner.\n\
    \   The name and email address are an exact copy of what is present in\n   the\
    \ certificate, without any canonicalisation or rewriting (other\n   than the transport\
    \ encoding required by HTTP).  This follows standard\n   implementation practice,\
    \ which transfers an exact copy of these data\n   items in order to avoid problems\
    \ due to character set translation,\n   handling of whitespace, and other issues.\n\
    \   Hashes are used for arbitrary-length fields such as ones containing\n   DNs\
    \ in place of the full field to keep the length manageable.  In\n   addition,\
    \ the use of the hashed form emphasizes that searching for\n   structured name\
    \ data isn't a supported feature, since this is a\n   simple interface to a {key,value}\
    \ certificate store rather than an\n   HTTP interface to an X.500 directory. \
    \ Users specifically requiring\n   an HTTP interface to X.500 may use technology\
    \ such as HTTP LDAP\n   gateways for this purpose.\n   Although clients will always\
    \ submit a fixed 160-bit value, servers\n   are free to use as many bits of this\
    \ value as they require.  For\n   example, a server may choose to use only the\
    \ first 40, 64, 80, or 128\n   bits for efficiency in searching and maintaining\
    \ indices.\n   PGP has traditionally encoded IDs using a C-style 0xABCDEF notation\n\
    \   based on the display format used for IDs in PGP 2.0.  Unfortunately,\n   strings\
    \ in this format are also valid strings in the base64 format,\n   complicated\
    \ further by the fact that near-misses such as 0xABCDRF\n   could be either a\
    \ mistyped attempt at a hex ID or a valid base64 ID.\n   For this reason, and\
    \ to ensure consistency, base64 IDs are used\n   throughout this specification.\
    \  The search keys used internally will\n   be binary values, so whether these\
    \ are converted from ASCII-hex or\n   base64 is immaterial in the long run.\n\
    \   The attributes are given shortened name forms (for example, iAndSHash\n  \
    \ in place of issuerAndSerialNumberHash) in order to keep the lengths\n   reasonable,\
    \ or common name forms (for example, email in place of\n   rfc822Name, rfc822Mailbox,\
    \ emailAddress, mail, or email) where\n   multiple name forms exist.\n   In some\
    \ cases, users may require additional, application-specific\n   attribute types.\
    \  For example, a healthcare application that uses a\n   healthcare ID as the\
    \ primary key for its databases may require the\n   ability to perform certificate\
    \ lookups based on this healthcare ID.\n   The formatting and use of such application-specific\
    \ identifiers is\n   beyond the scope of this document.  However, they should\
    \ begin with\n   'x-' to ensure that they don't conflict with identifiers that\
    \ may be\n   defined in future versions of this specification.\n"
- title: 2.5.2.  Checking of Input Values
  contents:
  - "2.5.2.  Checking of Input Values\n   The attribute value portion of the identifier\
    \ should be carefully\n   checked for invalid characters since allowing raw data\
    \ presents a\n   security risk.  Consider, for example, a certificate/public key\
    \ store\n   implemented using an RDBMS in which the SQL query is built up as\n\
    \   \"SELECT certificate FROM certificates WHERE iHash = \" + <search key>.\n\
    \   If <search key> is set to \"ABCD;DELETE FROM certificates\", the\n   results\
    \ of the query will be quite different from what was expected\n   by the certificate\
    \ store administrators.  Even a read-only query can\n   be problematic; for example,\
    \ setting <search key> to \"UNION SELECT\n   password FROM master.sysxlogins\"\
    \ will list all passwords in an SQL\n   Server database (in an easily-decrypted\
    \ format) if the user is\n   running under the sa (DBA) account.  For this reason,\
    \ only valid\n   base64 encodings should be allowed.  The same checking applies\
    \ to\n   queries by name or email address.\n   Straightforward sanitisation of\
    \ queries may not be sufficient to\n   prevent all attacks; for example, a filter\
    \ that removes the SQL query\n   string \"DELETE\" can be bypassed by submitting\
    \ the string embedded in\n   another instance of the string.  Removing \"DELETE\"\
    \ from\n   \"DELDELETEETE\" leaves the outer \"DELETE\" in place.  Abusing the\n\
    \   truncation of over-long strings by filters can also be used as a\n   means\
    \ of attack, with the attacker ensuring that the truncation\n   occurs in the\
    \ middle of an escape sequence, bypassing the filtering.\n   Although in theory\
    \ recursive filtering may help here, the use of\n   parameterised queries (often\
    \ called placeholders) that aren't\n   vulnerable to SQL injection should be used\
    \ to avoid these attacks.\n   More information on securing database back-ends\
    \ may be found in\n   [Birkholz], and more comments on sanitisation and safety\
    \ concerns may\n   be found in the security considerations section.\n"
- title: 2.5.3.  URI Notes
  contents:
  - "2.5.3.  URI Notes\n   Pre-constructed URIs that fetch a certificate/public key\
    \ matching a\n   fixed search criterion may be useful for items such as web pages\
    \ or\n   business cards, or even for technical support/helpdesk staff who want\n\
    \   to mail to users but can't find the certificate themselves.  These\n   URIs\
    \ may also be used to enforce privacy measures when distributing\n   certificates\
    \ by perturbing the search key in a manner known only to\n   the certificate/public\
    \ key store, or to the certificate store and\n   users (in other words, by converting\
    \ the URI into a capability).  For\n   example, a user with a newly-issued certificate\
    \ could be instructed\n   to fetch it with a key of \"x-encrCertHash=...\", which\
    \ is decrypted by\n   the certificate store to fetch the appropriate certificate,\
    \ ensuring\n   that only the certificate owner can fetch their certificate\n \
    \  immediately after issue.  Similarly, an organisation that doesn't\n   want\
    \ to make its certificates available for public query might\n   require a MAC\
    \ on search keys (e.g., \"x-macCertHash=...\") to ensure\n   that only authorised\
    \ users can search for certificates (although a\n   more logical place for access\
    \ control, if a true web server is being\n   used to access the store, would obviously\
    \ be at the HTTP level).\n   The query types have been specifically chosen to\
    \ be not just an HTTP\n   interface to LDAP but a general-purpose retrieval mechanism\
    \ that\n   allows arbitrary certificate/public key storage mechanisms (with a\n\
    \   bias towards simple {key,value} stores, which are deployed almost\n   universally,\
    \ whether as ISAM, Berkeley DB, or an RDBMS) to be\n   employed as back-ends.\
    \  This specification has been deliberately\n   written to be technology neutral,\
    \ allowing any {key,value} lookup\n   mechanism to be used.  It doesn't matter\
    \ if you choose to have\n   trained chimpanzees look up certificates in books\
    \ of tables, as long\n   as your method can provide the correct response with\
    \ reasonable\n   efficiency.\n   Certificate/public key and CRL stores are allocated\
    \ separate URIs\n   because they may be implemented using different mechanisms.\
    \  A\n   certificate store typically contains large numbers of small items,\n\
    \   while a CRL store contains a very small number of potentially large\n   items.\
    \  By providing independent URIs, it's possible to implement the\n   two stores\
    \ using mechanisms tailored to the data they contain.\n   PGP combines key and\
    \ revocation information into a single data object\n   so that it's possible to\
    \ return both public keys and revocation\n   information from the same URI.  If\
    \ distinct key and revocation\n   servers are available, these can provide a slight\
    \ performance gain\n   since fetching revocation information doesn't require fetching\
    \ the\n   key that it applies to.  If no separate servers are available, a\n \
    \  single server can be used to satisfy both types of queries with a\n   slight\
    \ performance loss, since fetching revocation information will\n   also fetch\
    \ the public key data associated with the revocation data.\n"
- title: 2.5.4.  Responses
  contents:
  - "2.5.4.  Responses\n   The disallowance of exotic encoding forms reflects the\
    \ fact that most\n   clients (and many servers, particularly for embedded devices)\
    \ are not\n   general-purpose web browsers or servers capable of handling an\n\
    \   arbitrary range of encoding forms and types, but simply basic HTTP\n   engines\
    \ attached to key management applications.  In other words, the\n   HTTP interface\
    \ is a rudimentary add-on to a key management\n   application, rather than key-management\
    \ being an add-on to a\n   general-purpose web client or server.  Eliminating\
    \ unnecessary\n   choices simplifies the implementation task and reduces code\
    \ size and\n   complexity, with an accompanying decrease in the probability of\n\
    \   security issues arising from the added complexity.\n   The use of an \"Accept-encoding:\
    \ identity\" header would achieve the\n   same effect as disallowing any additional\
    \ encodings and may indeed be\n   useful since section 14.3 of [RFC2616] indicates\
    \ that the absence of\n   this header may be taken to mean that any encoding is\
    \ permitted.\n   However, this unnecessarily bloats the HTTP header in a potentially\n\
    \   performance-affecting manner (see Section 2.5.5), whereas\n   establishing\
    \ a requirement that the response be returned without any\n   additional decoration\
    \ avoids the need to specify this in each\n   request.  Implementations should\
    \ therefore omit the Accept-encoding\n   header entirely or if it has to be included,\
    \ include \"identity\" or\n   the wildcard \"*\" as an accepted content-encoding\
    \ type.\n   Use of chunked encoding is given as a SHOULD NOT rather than a MUST\n\
    \   NOT because support for it is required by [RFC2616].  Nevertheless,\n   this\
    \ form of encoding is strongly discouraged, as the data quantities\n   being transferred\
    \ (1-2kB) make it entirely unnecessary, and support\n   for this encoding form\
    \ is vulnerable to various implementation bugs,\n   some of which may affect security.\
    \  However, implementors should be\n   aware that many versions of the Apache\
    \ web server will unnecessarily\n   use chunked encoding when returning responses.\
    \  Although it would be\n   better to make this a MUST NOT, this would render\
    \ clients that\n   rejected it incompatible with the world's most widely used\
    \ web\n   server.  For this reason, support for chunked encoding is strongly\n\
    \   discouraged but is nevertheless permitted.  Clients that choose not\n   to\
    \ support it should be aware that they may run into problems when\n   communicating\
    \ with Apache-based HTTP certificate stores.\n   Multiple responses are returned\
    \ as multipart/mixed rather than an\n   ASN.1 SEQUENCE OF Certificate or PKCS\
    \ #7/CMS certificate chain\n   (degenerate signed data containing only certificates)\
    \ because this is\n   more straightforward to implement with standard web-enabled\
    \ tools.\n   An additional advantage is that it doesn't restrict this access\n\
    \   mechanism to DER-based data, allowing it to be extended to other\n   certificate\
    \ types, such as XML, PGP, and SPKI.\n"
- title: 2.5.5.  Performance Issues
  contents:
  - "2.5.5.  Performance Issues\n   Where high throughput/performance under load is\
    \ a critical issue, a\n   main-memory database that acts as a form of content\
    \ cache may be\n   interposed between the on-disk database and the HTTP interface\n\
    \   [Garcia-Molina].  A main-memory database provides the same\n   functionality\
    \ as an on-disk database and is fully transparent to the\n   HTTP front-end, but\
    \ offers buffer management and retrieval facilities\n   optimised for memory-resident\
    \ data.  Where further scalability is\n   required, the content-caching system\
    \ could be implemented as a\n   cluster of main-memory databases [Ji].\n   Various\
    \ network efficiency considerations need to be taken into\n   account when implementing\
    \ this certificate/public key distribution\n   mechanism.  For example, a simplistic\
    \ implementation that performs\n   two writes (the HTTP header and the certificate,\
    \ written separately)\n   followed by a read will interact badly with TCP delayed-ACK\
    \ and\n   slow-start.  This occurs because the TCP MSS is typically 1460 bytes\n\
    \   on a LAN (Ethernet) or 512/536 bytes on a WAN, while HTTP headers are\n  \
    \ ~200-300 bytes, far less than the MSS.  When an HTTP message is first\n   sent,\
    \ the TCP congestion window begins at one segment, with the TCP\n   slow-start\
    \ then doubling its size for each ACK.  Sending the headers\n   separately will\
    \ send one short segment and a second MSS-size segment,\n   whereupon the TCP\
    \ stack will wait for the responder's ACK before\n   continuing.  The responder\
    \ gets both segments, then delays its ACK\n   for 200ms in the hopes of piggybacking\
    \ it on responder data, which is\n   never sent, since it's still waiting for\
    \ the rest of the HTTP body\n   from the initiator.  As a result, there is a 200ms\
    \ (+assorted RTT)\n   delay in each message sent.\n   There are various other\
    \ considerations that need to be taken into\n   account to provide maximum efficiency.\
    \  These are covered in depth\n   elsewhere [Spero] [Heidemann] [Nielsen].  In\
    \ addition, modifications\n   to TCP's behaviour, such as the use of 4K initial\
    \ windows [RFC3390]\n   (designed to reduce small HTTP transfer times to a single\
    \ RTT),\n   should also ameliorate some of these issues.\n   A rule of thumb for\
    \ optimal performance is to combine the HTTP header\n   and data payload into\
    \ a single write (any reasonable HTTP\n   implementation will do this anyway,\
    \ thanks to the considerable body\n   of experience that exists for HTTP server\
    \ performance tuning), and to\n   keep the HTTP headers to a minimum to try to\
    \ fit data within the TCP\n   MSS.  For example, since this protocol doesn't involve\
    \ a web browser,\n   there's no need to include various common browser-related\
    \ headers\n   such as ones detailing software versions or acceptable languages.\n"
- title: 2.5.6.  Miscellaneous
  contents:
  - "2.5.6.  Miscellaneous\n   The interface specified in this document is a basic\
    \ read-only type\n   that will be used by the majority of clients.  The handling\
    \ of\n   updates (both insertion and deletion) is a complex issue involving\n\
    \   both technological issues (a variety of fields used for indexing and\n   information\
    \ retrieval need to be specified in a technology-neutral\n   manner, or the certificate\
    \ store needs to perform its own parsing of\n   the item being added, moving it\
    \ from a near-universal key=value\n   lookup mechanism to a full public-key/certificate\
    \ processing system)\n   and political ones (who can perform updates to the certificate\
    \ store,\n   and under what conditions?).  Because of this complexity, the details\n\
    \   of any potential update mechanism are left as a local configuration\n   issue,\
    \ although they may at some point be covered in a future\n   document if there\
    \ is sufficient demand.\n   Concerns have been raised over the use of HTTP as\
    \ a substrate\n   [RFC3205].  The mechanism described here, which implements a\n\
    \   straightforward request/response protocol with the same semantics as\n   traditional\
    \ HTTP requests, is unaffected by these issues.\n   Specifically, it does not\
    \ implement any form of complex RPC\n   mechanism, does not require HTTP security\
    \ measures, is not affected\n   by firewalls (since it uses only a basic HTTP\
    \ GET rather than\n   layering a new protocol on top of HTTP), and has well-defined\
    \ MIME\n   media types specified in standards documents.  As such, the concerns\n\
    \   expressed in [RFC3205] do not apply here.  In addition, although a\n   number\
    \ of servers still don't fully support some of the more advanced\n   features\
    \ of HTTP 1.1 [Krishnamurthy], the minimal subset used here is\n   well supported\
    \ by the majority of servers and HTTP implementations.\n   This access mechanism\
    \ is similar to the PGP HKP protocol [HKP];\n   however, the latter is almost\
    \ entirely undocumented and requires that\n   implementors reverse-engineer other\
    \ implementations.  Because of this\n   lack of standardisation, no attempt has\
    \ been made to ensure\n   interoperability or compatibility with HKP-based servers,\
    \ although\n   PGP developers provided much valuable input for this document.\
    \  One\n   benefit that HKP does bring is extensive implementation experience,\n\
    \   which indicates that this is a very workable solution to the problem\n   of\
    \ a simple certificate/public key retrieval mechanism.  HKP servers\n   have been\
    \ implemented using flat files, Berkeley DB, and various\n   databases, such as\
    \ Postgres and MySQL.\n"
- title: 2.6.  Examples
  contents:
  - "2.6.  Examples\n   To convert the subject DN C=NZ, O=... CN=Fred Dagg into a\
    \ search key:\n      Hash the DN, in the DER-encoded form it appears in the\n\
    \      certificate, to obtain\n         96 4C 70 C4 1E C9 08 E5 CA 45 25 10 D6\
    \ C8 28 3A 1A C1 DF E2\n      Base-64 encode this to obtain:\n         lkxwxB7JCOXKRSUQ1sgoOhrB3+I\n\
    \   (Note the absence of trailing '=' padding.)  This is the search key\n   to\
    \ use in the query URI.\n   To fetch all certificates useful for sending encrypted\
    \ email to\n   foo@example.com:\n      GET /search.cgi?email=foo%40example.com\
    \ HTTP/1.1\n   (For simplicity, the additional Host: header required by [RFC2616]\
    \ is\n   omitted here and in the following examples.)  In this case,\n   \"/search.cgi\"\
    \ is the abs_path portion of the query URI, and the\n   request is submitted to\
    \ the server located at the net_loc portion of\n   the query URI.  Note the encoding\
    \ of the '@' symbol as per [RFC2854].\n   Remaining required headers, such as\
    \ the \"Host\" header required by\n   HTTP 1.1, have been omitted for the sake\
    \ of clarity.\n   To fetch the CA certificate that issued the email certificate:\n\
    \      <Convert the issuer DN to a search key>\n      GET /search.cgi?sHash=<search\
    \ key> HTTP/1.1\n   Alternatively, if chaining is by key identifier:\n      <Extract\
    \ the keyIdentifier from the authorityKeyIdentifier>\n      GET /search.cgi?sKIDHash=<search\
    \ key> HTTP/1.1\n   To fetch other certificates belonging to the same user as\
    \ the email\n   certificate:\n      <Convert the subject DN to a search key>\n\
    \      GET /search.cgi?sHash=<search key> HTTP/1.1\n   To fetch the CRL for the\
    \ certificate:\n      <Convert the issuer DN to a search key>\n      GET /search.cgi?iHash=<search\
    \ key> HTTP/1.1\n   Note that since the differentiator is the URI base, the above\
    \ two\n   queries appear identical (since the URI base isn't shown) but are in\n\
    \   fact distinct.\n   To retrieve a key using XML methods, the <KeyName> (which\
    \ contains\n   the string identifier for the key), used with the subject DN hash\n\
    \   above, would be:\n      <KeyName KeyID=\"sHash\">lkxwxB7JCOXKRSUQ1sgoOhrB3+I</KeyName>.\n"
- title: 3.  Locating HTTP Certificate Stores
  contents:
  - "3.  Locating HTTP Certificate Stores\n   In order to locate servers from which\
    \ certificates may be retrieved,\n   relying parties can employ one or more of\
    \ the following strategies:\n      - Information contained in the certificate\n\
    \      - Use of DNS SRV\n      - Use of a \"well-known\" location\n      - Manual\
    \ configuration of the client software\n   The intent of the various options provided\
    \ here is to make the\n   certificate store access as transparent as possible,\
    \ only requiring\n   manual user configuration as a last resort.\n"
- title: 3.1.  Information in the Certificate
  contents:
  - "3.1.  Information in the Certificate\n   In order to convey a well-known point\
    \ of information access to\n   relying parties, CAs SHOULD use the SubjectInfoAccess\
    \ (SIA) and\n   AuthorityInfoAccess (AIA) extension [RFC3280] in certificates.\
    \  The\n   OID value for the accessMethod is one of:\n    id-ad-http-certs   \
    \  OBJECT IDENTIFIER ::= { id-ad 6 }\n    id-ad-http-crls      OBJECT IDENTIFIER\
    \ ::= { id-ad 7 }\n   where:\n    id-ad                OBJECT IDENTIFIER ::= {\
    \ iso(1)\n                                   identified-organization(3) dod(6)\n\
    \                                   internet(1) security(5) mechanisms(5)\n  \
    \                                 pkix(7) 48 }\n   The corresponding accessLocation\
    \ is the query URI.  The use of this\n   facility provides a CA with a convenient,\
    \ standard location to\n   indicate where further certificates may be found, for\
    \ example, for\n   certification path construction purposes.  Note that it doesn't\
    \ mean\n   that the provision of certificate store access services is limited\
    \ to\n   CAs only.\n"
- title: 3.2.  Use of DNS SRV
  contents:
  - "3.2.  Use of DNS SRV\n   DNS SRV is a facility for specifying the location of\
    \ the server(s)\n   for a specific protocol and domain [RFC2782].  For the certificate\n\
    \   store interface, the DNS SRV symbolic name for the certificate store\n   interface\
    \ SHALL be \"certificates\".  The name for the CRL store\n   interface SHALL be\
    \ \"crls\".  The name for the PGP public key store\n   SHALL be \"pgpkeys\". \
    \ The name for the PGP revocation store SHALL be\n   \"pgprevocations\".  Handling\
    \ of additional DNS SRV facilities, such as\n   the priority and weight fields,\
    \ is as per [RFC2782].\n"
- title: 3.2.1.  Example
  contents:
  - "3.2.1.  Example\n   If a CA with the domain example.com were to make its certificates\n\
    \   available via an HTTP certificate store interface, the server details\n  \
    \ could be obtained by a lookup on:\n      _certificates._tcp.example.com\n  \
    \ and\n      _crls._tcp.example.com\n   This would return the server(s) and port(s)\
    \ for the service as\n   specified in [RFC2782].\n"
- title: 3.3.  Use of a "well-known" Location
  contents:
  - "3.3.  Use of a \"well-known\" Location\n   If no other location information is\
    \ available, the certificate store\n   interface may be located at a \"well-known\"\
    \ location constructed from\n   the service provider's domain name.  In the usual\
    \ case, the URI is\n   constructed by prepending the type of information to be\
    \ retrieved\n   (\"certificates.\", \"crls.\", \"pgpkeys.\", or \"pgprevocations.\"\
    ) to the\n   domain name to obtain the net_loc portion of the URI, and by\n  \
    \ appending a fixed abs_path portion \"search.cgi\".  The URI form of the\n  \
    \ \"well-known\" location is therefore:\n      certificates.<domain_name>/search.cgi\n\
    \      crls.<domain_name>/search.cgi\n      pgpkeys.<domain_name>/search.cgi\n\
    \      pgprevocations.<domain_name>/search.cgi\n   Certificate store service providers\
    \ SHOULD use these URIs in\n   preference to other alternatives.  Note that the\
    \ use of \"search.cgi\"\n   does not imply the use of CGI scripts [RFC3875]. \
    \ This would be the\n   exception rather than the rule, since it would lead to\
    \ a rather\n   inefficient implementation; it merely provides one possible (and\n\
    \   relatively simple to set up) implementation alternative (see the\n   rationale\
    \ for more on this).\n   A second case occurs when the certificate access service\
    \ is being\n   provided by web-enabled embedded devices, such as Universal Plug\
    \ and\n   Play devices [UPNP].  These devices have a single, fixed net_loc\n \
    \  (either an IP address or a DNS name) and make services available via\n   an\
    \ HTTP interface.  In this case, the URI is constructed by appending\n   a fixed\
    \ abs_path portion \"certificates/search.cgi\" for certificates,\n   \"crls/search.cgi\"\
    \ for CRLs, \"pgpkeys/search.cgi\" for PGP public keys,\n   and \"pgprevocations/search.cgi\"\
    \ for PGP revocation information to the\n   net_loc.  The URI form of the \"well-known\"\
    \ location is therefore:\n      <net_loc>/certificates/search.cgi\n      <net_loc>/crls/search.cgi\n\
    \      <net_loc>/pgpkeys/search.cgi\n      <net_loc>/pgprevocations/search.cgi\n\
    \   If certificate access as described in this document is implemented by\n  \
    \ the device, then it SHOULD use these URIs in preference to other\n   alternatives\
    \ (see the rationale for more on this requirement).\n"
- title: 3.3.1.  Examples
  contents:
  - "3.3.1.  Examples\n   If a CA with the domain example.com were to make its certificates\n\
    \   available via an HTTP certificate store interface, the \"well-known\"\n  \
    \ query URIs for certificates and CRLs would be:\n      http://certificates.example.com/search.cgi\n\
    \      http://crls.example.com/search.cgi\n   A home automation controller with\
    \ the IP address 192.0.2.1 (a control\n   point in UPnP terminology) would make\
    \ certificates for devices such\n   as HVAC controllers, lighting and appliance\
    \ controllers, and fire and\n   physical intrusion detection devices available\
    \ as:\n      http://192.0.2.1/certificates/search.cgi\n      http://192.0.2.1/crls/search.cgi\n\
    \   A print server with DNS name \"printspooler\" would make certificates\n  \
    \ for web-enabled printers that it communicates with available as:\n      http://printspooler/certificates/search.cgi\n\
    \      http://printspooler/crls/search.cgi\n"
- title: 3.4.  Manual Configuration of the Client Software
  contents:
  - "3.4.  Manual Configuration of the Client Software\n   The accessLocation for\
    \ the HTTP certificate/public key/CRL store MAY\n   be configured locally at the\
    \ client.  This can be used if no other\n   information is available, or if it\
    \ is necessary to override other\n   information.\n"
- title: 3.5.  Implementation Notes and Rationale
  contents:
  - "3.5.  Implementation Notes and Rationale\n   This informative section documents\
    \ the rationale behind the design in\n   Section 3 and provides guidance for implementors.\n"
- title: 3.5.1.  DNS SRV
  contents:
  - "3.5.1.  DNS SRV\n   The optimal solution for the problem of service location\
    \ would be DNS\n   SRV.  Unfortunately, the operating system used by the user\
    \ group most\n   desperately in need of this type of handholding has no support\
    \ for\n   anything beyond the most basic DNS address lookups, making it\n   impossible\
    \ to use DNS SRV with anything but very recent Win2K and XP\n   systems.  To make\
    \ things even more entertaining, several of the\n   function names and some of\
    \ the function parameters changed at various\n   times during the Win2K phase\
    \ of development, and the behaviour of\n   portions of the Windows sockets API\
    \ changed in undocumented ways to\n   match.  This leads to an unfortunate situation\
    \ in which a Unix\n   sysadmin can make use of DNS SRV to avoid having to deal\
    \ with\n   technical configuration issues, but a Windows'95 user can't.  Because\n\
    \   of these problems, an alternative to DNS SRV is provided for\n   situations\
    \ where it's not possible to use this.\n   The SRV or \"well-known\" location\
    \ option can frequently be\n   automatically derived by user software from currently-known\n\
    \   parameters.  For example, if the recipient's email address is\n   @example.com,\
    \ the user software would query\n   _certificates._tcp.example.com or go to certificates.example.com\
    \ and\n   request the certificate.  In addition, user software may maintain a\n\
    \   list of known certificate sources in the way that known CA lists are\n   maintained\
    \ by web browsers.  The specific mention of support for\n   redirection in Section\
    \ 2 emphasises that many sites will outsource\n   the certificate-storage task.\
    \  At worst, all that will be required is\n   the addition of a single static\
    \ web page pointing to the real server.\n   Alternatives such as DNS CNAME RRs\
    \ are also possible but may not be\n   as easy to set up as HTTP redirects (corporate\
    \ policies tend to be\n   more flexible in regard to web page contents than modifying\
    \ DNS\n   configurations would be).\n"
- title: 3.5.2.  "well-known" Locations
  contents:
  - "3.5.2.  \"well-known\" Locations\n   The \"well-known\" location URI is designed\
    \ to make hosting options as\n   flexible as possible.  Locating the service at\
    \ www.<domain name>\n   would generally require that it be handled by the provider's\
    \ main web\n   server, while using a distinct server URI allows for it be handled\
    \ as\n   desired by the provider.  Although there will no doubt be servers\n \
    \  that implement the interface using Apache and Perl scripts, a more\n   logical\
    \ implementation would consist of a simple network interface to\n   a key-and-value\
    \ lookup mechanism, such as Berkeley DB.  The URI form\n   presented in Section\
    \ 3.3 allows for maximum flexibility, since it\n   will work with both web servers/CGI\
    \ scripts and non-web-server-based\n   network front-ends for certificate stores.\n"
- title: 3.5.3.  Information in the Certificate
  contents:
  - "3.5.3.  Information in the Certificate\n   Implementations that require the use\
    \ of nonstandard locations, ports,\n   or HTTPS rather than HTTP in combination\
    \ with \"well-known\" locations\n   should use an HTTP redirect at the \"well-known\"\
    \ location to point to\n   the nonstandard location.  For example, if the print\
    \ spooler in\n   Section 3.3 used an SSL-protected server named printspooler-server\n\
    \   with an abs_path portion of cert_access, it would use an HTTP 302\n   redirect\
    \ to https://printspooler-server/cert_access.  This combines\n   the plug-and-play\
    \ capability of \"well-known\" locations with the\n   ability to use nonstandard\
    \ locations and ports.\n   The SIA and AIA extensions are used to indicate the\
    \ location for the\n   CRL store interface rather than the CRLDistributionPoint\
    \ (CRLDP)\n   extension, since the two perform entirely different functions. \
    \ A\n   CRLDP contains \"a pointer to the current CRL\", a fixed location\n  \
    \ containing a CRL for the current certificate, while the SIA/AIA\n   extension\
    \ indicates \"how to access CA information and services for\n   the subject/issuer\
    \ of the certificate in which the extension\n   appears\", in this case, the CRL\
    \ store interface that provides CRLs\n   for any certificates issued by the CA.\
    \  In addition, CRLDP associates\n   other attribute information with a query\
    \ that is incompatible with\n   the simple query mechanisms presented in this\
    \ document.\n   A single server can be used to handle both CRLDP and AIA/SIA queries\n\
    \   provided that the CRLDP form uses an HTTP URI.  Since CRLDP points to\n  \
    \ a single static location for a CRL, a query can be pre-constructed\n   and stored\
    \ in the CRLDP extension.  Software that uses the CRLDP will\n   retrieve the\
    \ single CRL that applies to the certificate from the\n   server, and software\
    \ that uses the AIA/SIA can retrieve any CRL from\n   the server.  Similar pre-constructed\
    \ URIs may also be useful in other\n   circumstances (for example, for links on\
    \ web pages) to place in\n   appropriate locations like the issuerAltName, or\
    \ even for technical\n   support/helpdesk staff to email to users who can't find\
    \ the\n   certificate themselves, as described in Section 2.5.  The resulting\n\
    \   certstore URL, when clicked on by the user, will directly access the\n   certificate\
    \ when used in conjunction with any certificate-aware\n   application, such as\
    \ a browser or mail program.\n"
- title: 3.5.4.  Miscellaneous
  contents:
  - "3.5.4.  Miscellaneous\n   Web-enabled (or, more strictly, HTTP-enabled) devices\
    \ are intended to\n   be plug-and-play, with minimal (or no) user configuration\
    \ necessary.\n   The \"well-known\" URI allows any known device (for example,\
    \ one\n   discovered via UPNP's Simple Service Discovery Protocol, SSDP) to be\n\
    \   queried for certificates without requiring further user\n   configuration.\
    \  Note that in practice no embedded device would ever\n   use the address given\
    \ in the example (the de facto standard address\n   for web-enabled embedded devices\
    \ is 192.168.1.x and not 192.0.2.x);\n   however, IETF policy requires the use\
    \ of this non-address for\n   examples.\n   Protocols such as UPnP have their\
    \ own means of disseminating device\n   and protocol information.  For example,\
    \ UPnP uses SOAP, which\n   provides a GetPublicKeys action for pulling device\
    \ keys and a\n   PresentKeys action for pushing control point keys.  The text\
    \ in\n   Section 3.3 is not meant to imply that this document overrides the\n\
    \   existing UPnP mechanism, but merely that, if a device implements the\n   mechanism\
    \ described here, it should use the naming scheme in Section\n   3.3 rather than\
    \ use arbitrary names.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   HTTP caching proxies are common on the Internet,\
    \ and some proxies may\n   not check for the latest version of an object correctly.\
    \  [RFC2616]\n   specifies that responses to query URLs should not be cached,\
    \ and most\n   proxies and servers correctly implement the \"Cache-Control: no-cache\"\
    \n   mechanism, which can be used to override caching (\"Pragma: no-cache\"\n\
    \   for HTTP 1.0).  However, in the rare instance in which an HTTP\n   request\
    \ for a certificate or CRL goes through a misconfigured or\n   otherwise broken\
    \ proxy, the proxy may return an out-of-date response.\n   Care should be taken\
    \ to ensure that only valid queries are fed\n   through to the back-end used to\
    \ retrieve certificates.  Allowing\n   attackers to submit arbitrary queries may\
    \ allow them to manipulate\n   the certificate store in unexpected ways if the\
    \ back-end tries to\n   interpret the query contents.  For example, if a certificate\
    \ store is\n   implemented using an RDBMS for which the calling application\n\
    \   assembles a complete SQL string to perform the query, and the SQL\n   query\
    \ is built up as \"SELECT certificate FROM certificates WHERE\n   iHash = \" +\
    \ <search key>, and <search key> is set to \"X;DELETE FROM\n   certificates\"\
    , the results of the query will be quite different from\n   what was expected\
    \ by the certificate store administrator.  The same\n   applies to queries by\
    \ name and email address.  Even a read-only query\n   can be problematic; for\
    \ example, setting <search key> to \"UNION\n   SELECT password FROM master.sysxlogins\"\
    \ will list all passwords in an\n   SQL Server database (in an easily decrypted\
    \ format) if the user is\n   running under the sa (DBA) account.  Straightforward\
    \ sanitisation of\n   queries may not be sufficient to prevent all attacks; for\
    \ example, a\n   filter that removes the SQL query string \"DELETE\" can be bypassed\
    \ by\n   submitting the string embedded in another instance of the string.\n \
    \  Removing \"DELETE\" from \"DELDELETEETE\" leaves the outer \"DELETE\" in\n\
    \   place.  Abusing the truncation of over-long strings by filters can\n   also\
    \ be used as a means of attack, in which the attacker ensures that\n   the truncation\
    \ occurs in the middle of an escape sequence, bypassing\n   the filtering.  The\
    \ use of parameterised queries (often called\n   placeholders) that aren't vulnerable\
    \ to SQL injection should be used\n   to avoid these attacks.\n   In addition,\
    \ since some query data may be encoded/decoded before\n   being sent to the back-end,\
    \ applications should check both the\n   encoded and decoded form for valid data.\
    \  A simple means of avoiding\n   these problems is to use parameterised commands\
    \ rather than hand-\n   assembling SQL strings for use in queries (this is also\
    \ more\n   efficient for most database interfaces).  The use of parameterised\n\
    \   commands means that the query value is never present in any position\n   where\
    \ it could be interpreted as a portion of the query command.\n   Alongside filtering\
    \ of queries, the back-end should be configured to\n   disable any form of update\
    \ access via the web interface.  For\n   Berkeley DB, this restriction can be\
    \ imposed by opening the\n   certificate store in read-only mode from the web\
    \ interface.  For\n   relational databases, it can be imposed through the SQL\
    \ GRANT/REVOKE\n   mechanism, for example, \"REVOKE ALL ON certificates FROM webuser.\n\
    \   GRANT SELECT ON certificates TO webuser\" will allow read-only access\n  \
    \ of the appropriate kind for the web interface.  Server-specific\n   security\
    \ measures may also be employed; for example, the SQL Server\n   provides the\
    \ built-in db_datareader account that only allows read\n   access to tables (but\
    \ see the note above about what can be done even\n   with read-only access) and\
    \ the ability to run the server under a\n   dedicated low-privilege account (a\
    \ standard feature of Unix systems).\n   The mechanism described in this document\
    \ is not intended to function\n   as a trusted directory/database.  In particular,\
    \ users should not\n   assume that just because they fetched a public key or certificate\n\
    \   from an entity claiming to be X, that X has made any statement about\n   the\
    \ veracity of the public key or certificate.  The use of a signed\n   representation\
    \ of the items stored removes the need to depend on the\n   certificate store\
    \ for any security service other than availability.\n   Although it's possible\
    \ to implement a trusted directory/database\n   using HTTPS or some other form\
    \ of secured/trusted link, this is a\n   local policy/configuration issue, and\
    \ in the absence of such\n   additional security measures users should apply appropriate\
    \ levels of\n   verification to any keys or certificates fetched before they take\n\
    \   them into use.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   No action by IANA is needed.  The AIA/SIA accessMethod\
    \ types are\n   identified by object identifiers (OIDs) from an arc managed by\
    \ the\n   PKIX working group.  Should additional accessMethods be introduced\n\
    \   (for example, for attribute certificates or non-X.509 certificate\n   types),\
    \ the advocates for such accessMethods are expected to assign\n   the necessary\
    \ OIDs from their own arcs.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Anders Rundgren, Blake Ramsdell, Jeff Jacoby, David\
    \ Shaw, and members\n   of the ietf-pkix working group provided useful input and\
    \ feedback on\n   this document.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [FIPS180]       Federal Information Processing\
    \ Standards Publication\n                   (FIPS PUB) 180-1, Secure Hash Standard,\
    \ 17 April\n                   1995.\n   [RFC2119]       Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n                   Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [RFC2440]       Callas, J., Donnerhacke, L., Finney,\
    \ H., and R.\n                   Thayer, \"OpenPGP Message Format\", RFC 2440,\
    \ November\n                   1998.\n   [RFC2585]       Housley, R. and P. Hoffman,\
    \ \"Internet X.509 Public\n                   Key Infrastructure Operational Protocols:\
    \ FTP and\n                   HTTP\", RFC 2585, May 1999.\n   [RFC2616]      \
    \ Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n                   Masinter,\
    \ L., Leach, P., and T. Berners-Lee,\n                   \"Hypertext Transfer\
    \ Protocol -- HTTP/1.1\", RFC 2616,\n                   June 1999.\n   [RFC2782]\
    \       Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR\n              \
    \     for specifying the location of services (DNS SRV)\",\n                 \
    \  RFC 2782, February 2000.\n   [RFC2854]       Connolly, D. and L. Masinter,\
    \ \"The 'text/html' Media\n                   Type\", RFC 2854, June 2000.\n \
    \  [RFC3156]       Elkins, M., Del Torto, D., Levien, R., and T.\n           \
    \        Roessler, \"MIME Security with OpenPGP\", RFC 3156,\n               \
    \    August 2001.\n   [RFC3275]       Eastlake 3rd, D., Reagle, J., and D. Solo,\n\
    \                   \"(Extensible Markup Language) XML-Signature Syntax\n    \
    \               and Processing\", RFC 3275, March 2002.\n   [RFC3280]       Housley,\
    \ R., Polk, W., Ford, W., and D. Solo,\n                   \"Internet X.509 Public\
    \ Key Infrastructure Certificate\n                   and Certificate Revocation\
    \ List (CRL) Profile\", RFC\n                   3280, April 2002.\n   [RFC3852]\
    \       Housley, R., \"Cryptographic Message Syntax (CMS)\",\n               \
    \    RFC 3852, July 2004.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [Birkholz]      \"Special Ops: Host and Network\
    \ Security for\n                   Microsoft, Unix, and Oracle\", Erik Birkholz\
    \ et al,\n                   Syngress Publishing, November 2002.\n   [Garcia-Molina]\
    \ \"Main Memory Database Systems\", Hector Garcia-Molina\n                   and\
    \ Kenneth Salem, IEEE Transactions on Knowledge and\n                   Data Engineering,\
    \ Vol.4, No.6 (December 1992), p.509.\n   [Gutmann]       \"A Reliable, Scalable\
    \ General-purpose Certificate\n                   Store\", P.  Gutmann, Proceedings\
    \ of the 16th Annual\n                   Computer Security Applications Conference,\
    \ December\n                   2000.\n   [Heidemann]     \"Performance Interactions\
    \ Between P-HTTP and TCP\n                   Implementations\", J. Heidemann,\
    \ ACM Computer\n                   Communications Review, April 1997.\n   [HKP]\
    \           \"A PGP Public Key Server\", Marc Horowitz, 2000,\n              \
    \     http://www.mit.edu/afs/net.mit.edu/project/pks/\n                   thesis/paper/thesis.html.\
    \  A more complete and up-\n                   to-date overview of HKP may be\
    \ obtained from the\n                   source code of an open-source OpenPGP\
    \ implementation\n                   such as GPG.\n   [Ji]            \"Affinity-based\
    \ Management of Main Memory Database\n                   Clusters\", Minwen Ji,\
    \ ACM Transactions on Internet\n                   Technology, Vol.2, No.4 (November\
    \ 2002), p.307.\n   [Krishnamurthy] \"PRO-COW: Protocol Compliance on the Web\
    \ - A\n                   Longitudinal Survey\", Balachander Krishnamurthy and\n\
    \                   Martin Arlitt, Proceedings of the 3rd Usenix\n           \
    \        Symposium on Internet Technologies and Systems\n                   (USITS'01),\
    \ March 2001, p.109.\n   [Nielsen]       \"Network Performance Effects of HTTP/1.1,\
    \ CSS1, and\n                   PNG\", H.Nielsen, J.Gettys, A.Baird-Smith,\n \
    \                  E.Prud'hommeaux, H.Wium Lie, and C.Lilley, 24 June\n      \
    \             1997, http://www.w3.org/Protocols/HTTP/\n                   Performance/Pipeline.html\n\
    \   [PKCS11]        PKCS #11 Cryptographic Token Interface Standard, RSA\n   \
    \                Laboratories, December 1999.\n   [PKCS15]        PKCS #15 Cryptographic\
    \ Token Information Syntax\n                   Standard, RSA Laboratories, June\
    \ 2000.\n   [RFC3205]       Moore, K., \"On the use of HTTP as a Substrate\",\
    \ BCP\n                   56, RFC 3205, February 2002.\n   [RFC3390]       Allman,\
    \ M., Floyd, S., and C. Partridge, \"Increasing\n                   TCP's Initial\
    \ Window\", RFC 3390, October 2002.\n   [RFC3875]       Robinson, D. and K. Coar,\
    \ \"The Common Gateway\n                   Interface (CGI) Version 1.1\", RFC\
    \ 3875, October 2004.\n   [Spero]         \"Analysis of HTTP Performance Problems\"\
    , S.Spero,\n                   July 1994, http://www.w3.org/Protocols/HTTP/1.0/\n\
    \                   HTTPPerformance.html.\n   [UPNP]          \"Universal Plug\
    \ and Play Device Architecture, Version\n                   1.0\", UPnP Forum,\
    \ 8 June 2000.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Peter Gutmann\n   University of Auckland\n   Private Bag\
    \ 92019\n   Auckland, New Zealand\n   EMail: pgut001@cs.auckland.ac.nz\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
