- title: __initial_text__
  contents:
  - '                    Sieve: A Mail Filtering Language

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a language for filtering e-mail messages\
    \ at\n   time of final delivery.  It is designed to be implementable on either\n\
    \   a mail client or mail server.  It is meant to be extensible, simple,\n   and\
    \ independent of access protocol, mail architecture, and operating\n   system.\
    \  It is suitable for running on a mail server where users may\n   not be allowed\
    \ to execute arbitrary programs, such as on black box\n   Internet Message Access\
    \ Protocol (IMAP) servers, as it has no\n   variables, loops, or ability to shell\
    \ out to external programs.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   2.6.     Arguments .............................................\
    \   9\n   2.6.1.   Positional Arguments ..................................   9\n\
    \   2.6.2.   Tagged Arguments ......................................  10\n   2.6.3.\
    \   Optional Arguments ....................................  10\n   2.6.4.   Types\
    \ of Arguments ....................................  10\n   2.7.     String Comparison\
    \ .....................................  11\n   2.7.1.   Match Type ............................................\
    \  11\n   2.7.2.   Comparisons Across Character Sets .....................  12\n\
    \   2.7.3.   Comparators ...........................................  12\n   2.7.4.\
    \   Comparisons Against Addresses .........................  13\n   2.8.     Blocks\
    \ ................................................  14\n   2.9.     Commands ..............................................\
    \  14\n   2.10.    Evaluation ............................................  15\n\
    \   2.10.1.  Action Interaction ....................................  15\n   2.10.2.\
    \  Implicit Keep .........................................  15\n   2.10.3.  Message\
    \ Uniqueness in a Mailbox .......................  15\n   2.10.4.  Limits on Numbers\
    \ of Actions ..........................  16\n   2.10.5.  Extensions and Optional\
    \ Features ......................  16\n   2.10.6.  Errors ................................................\
    \  17\n   2.10.7.  Limits on Execution ...................................  17\n\
    \   3.      Control Commands .......................................  17\n   3.1.\
    \     Control Structure If ..................................  18\n   3.2.   \
    \  Control Structure Require .............................  19\n   3.3.     Control\
    \ Structure Stop ................................  19\n   4.      Action Commands\
    \ ........................................  19\n   4.1.     Action reject .........................................\
    \  20\n   4.2.     Action fileinto .......................................  20\n\
    \   4.3.     Action redirect .......................................  21\n   4.4.\
    \     Action keep ...........................................  21\n   4.5.   \
    \  Action discard ........................................  22\n   5.      Test\
    \ Commands ..........................................  22\n   5.1.     Test address\
    \ ..........................................  23\n   5.2.     Test allof ............................................\
    \  23\n   5.3.     Test anyof ............................................  24\n\
    \   5.4.     Test envelope .........................................  24\n   5.5.\
    \     Test exists ...........................................  25\n   5.6.   \
    \  Test false ............................................  25\n   5.7.     Test\
    \ header ...........................................  25\n   5.8.     Test not\
    \ ..............................................  26\n   5.9.     Test size .............................................\
    \  26\n   5.10.    Test true .............................................  26\n\
    \   6.      Extensibility ..........................................  26\n   6.1.\
    \     Capability String .....................................  27\n   6.2.   \
    \  IANA Considerations ...................................  28\n   6.2.1.   Template\
    \ for Capability Registrations .................  28\n   6.2.2.   Initial Capability\
    \ Registrations ......................  28\n   6.3.     Capability Transport ..................................\
    \  29\n   7.      Transmission ...........................................  29\n\
    \   8.      Parsing ................................................  30\n   8.1.\
    \     Lexical Tokens ........................................  30\n   8.2.   \
    \  Grammar ...............................................  31\n   9.      Extended\
    \ Example .......................................  32\n   10.     Security Considerations\
    \ ................................  34\n   11.     Acknowledgments ........................................\
    \  34\n   12.     Author's Address .......................................  34\n\
    \   13.     References .............................................  34\n   14.\
    \     Full Copyright Statement ...............................  36\n"
- title: 1.      Introduction
  contents:
  - "1.      Introduction\n   This memo documents a language that can be used to create\
    \ filters for\n   electronic mail.  It is not tied to any particular operating\
    \ system or\n   mail architecture.  It requires the use of [IMAIL]-compliant\n\
    \   messages, but should otherwise generalize to many systems.\n   The language\
    \ is powerful enough to be useful but limited in order to\n   allow for a safe\
    \ server-side filtering system.  The intention is to\n   make it impossible for\
    \ users to do anything more complex (and\n   dangerous) than write simple mail\
    \ filters, along with facilitating\n   the use of GUIs for filter creation and\
    \ manipulation.  The language is\n   not Turing-complete: it provides no way to\
    \ write a loop or a function\n   and variables are not provided.\n   Scripts written\
    \ in Sieve are executed during final delivery, when the\n   message is moved to\
    \ the user-accessible mailbox.  In systems where\n   the MTA does final delivery,\
    \ such as traditional Unix mail, it is\n   reasonable to sort when the MTA deposits\
    \ mail into the user's\n   mailbox.\n   There are a number of reasons to use a\
    \ filtering system.  Mail\n   traffic for most users has been increasing due to\
    \ increased usage of\n   e-mail, the emergence of unsolicited email as a form\
    \ of advertising,\n   and increased usage of mailing lists.\n   Experience at\
    \ Carnegie Mellon has shown that if a filtering system is\n   made available to\
    \ users, many will make use of it in order to file\n   messages from specific\
    \ users or mailing lists.  However, many others\n   did not make use of the Andrew\
    \ system's FLAMES filtering language\n   [FLAMES] due to difficulty in setting\
    \ it up.\n   Because of the expectation that users will make use of filtering\
    \ if\n   it is offered and easy to use, this language has been made simple\n \
    \  enough to allow many users to make use of it, but rich enough that it\n   can\
    \ be used productively.  However, it is expected that GUI-based\n   editors will\
    \ be the preferred way of editing filters for a large\n   number of users.\n"
- title: 1.1.     Conventions Used in This Document
  contents:
  - "1.1.     Conventions Used in This Document\n   In the sections of this document\
    \ that discuss the requirements of\n   various keywords and operators, the following\
    \ conventions have been\n   adopted.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"SHOULD\", \"SHOULD NOT\", and\n   \"MAY\" in this document are to be interpreted\
    \ as defined in\n   [KEYWORDS].\n   Each section on a command (test, action, or\
    \ control structure) has a\n   line labeled \"Syntax:\".  This line describes\
    \ the syntax of the\n   command, including its name and its arguments.  Required\
    \ arguments\n   are listed inside angle brackets (\"<\" and \">\").  Optional\
    \ arguments\n   are listed inside square brackets (\"[\" and \"]\").  Each argument\
    \ is\n   followed by its type, so \"<key: string>\" represents an argument\n \
    \  called \"key\" that is a string.  Literal strings are represented with\n  \
    \ double-quoted strings.  Alternatives are separated with slashes, and\n   parenthesis\
    \ are used for grouping, similar to [ABNF].\n   In the \"Syntax\" line, there\
    \ are three special pieces of syntax that\n   are frequently repeated, MATCH-TYPE,\
    \ COMPARATOR, and ADDRESS-PART.\n   These are discussed in sections 2.7.1, 2.7.3,\
    \ and 2.7.4,\n   respectively.\n   The formal grammar for these commands in section\
    \ 10 and is the\n   authoritative reference on how to construct commands, but\
    \ the formal\n   grammar does not specify the order, semantics, number or types\
    \ of\n   arguments to commands, nor the legal command names.  The intent is to\n\
    \   allow for extension without changing the grammar.\n"
- title: 1.2.     Example mail messages
  contents:
  - "1.2.     Example mail messages\n   The following mail messages will be used throughout\
    \ this document in\n   examples.\n   Message A\n   -----------------------------------------------------------\n\
    \   Date: Tue, 1 Apr 1997 09:06:31 -0800 (PST)\n   From: coyote@desert.example.org\n\
    \   To: roadrunner@acme.example.com\n   Subject: I have a present for you\n  \
    \ Look, I'm sorry about the whole anvil thing, and I really\n   didn't mean to\
    \ try and drop it on you from the top of the\n   cliff.  I want to try to make\
    \ it up to you.  I've got some\n   great birdseed over here at my place--top of\
    \ the line\n   stuff--and if you come by, I'll have it all wrapped up\n   for\
    \ you.  I'm really sorry for all the problems I've caused\n   for you over the\
    \ years, but I know we can work this out.\n   --\n   Wile E. Coyote   \"Super\
    \ Genius\"   coyote@desert.example.org\n   -----------------------------------------------------------\n\
    \   Message B\n   -----------------------------------------------------------\n\
    \   From: youcouldberich!@reply-by-postal-mail.invalid\n   Sender: b1ff@de.res.example.com\n\
    \   To: rube@landru.example.edu\n   Date:  Mon, 31 Mar 1997 18:26:10 -0800\n \
    \  Subject: $$$ YOU, TOO, CAN BE A MILLIONAIRE! $$$\n   YOU MAY HAVE ALREADY WON\
    \ TEN MILLION DOLLARS, BUT I DOUBT\n   IT!  SO JUST POST THIS TO SIX HUNDRED NEWSGROUPS!\
    \  IT WILL\n   GUARANTEE THAT YOU GET AT LEAST FIVE RESPONSES WITH MONEY!\n  \
    \ MONEY! MONEY! COLD HARD CASH!  YOU WILL RECEIVE OVER\n   $20,000 IN LESS THAN\
    \ TWO MONTHS!  AND IT'S LEGAL!!!!!!!!!\n   !!!!!!!!!!!!!!!!!!111111111!!!!!!!11111111111!!1\
    \  JUST\n   SEND $5 IN SMALL, UNMARKED BILLS TO THE ADDRESSES BELOW!\n   -----------------------------------------------------------\n"
- title: 2.      Design
  contents:
  - '2.      Design

    '
- title: 2.1.     Form of the Language
  contents:
  - "2.1.     Form of the Language\n   The language consists of a set of commands.\
    \  Each command consists of\n   a set of tokens delimited by whitespace.  The\
    \ command identifier is\n   the first token and it is followed by zero or more\
    \ argument tokens.\n   Arguments may be literal data, tags, blocks of commands,\
    \ or test\n   commands.\n   The language is represented in UTF-8, as specified\
    \ in [UTF-8].\n   Tokens in the ASCII range are considered case-insensitive.\n"
- title: 2.2.     Whitespace
  contents:
  - "2.2.     Whitespace\n   Whitespace is used to separate tokens.  Whitespace is\
    \ made up of\n   tabs, newlines (CRLF, never just CR or LF), and the space character.\n\
    \   The amount of whitespace used is not significant.\n"
- title: 2.3.     Comments
  contents:
  - "2.3.     Comments\n   Two types of comments are offered.  Comments are semantically\n\
    \   equivalent to whitespace and can be used anyplace that whitespace is\n   (with\
    \ one exception in multi-line strings, as described in the\n   grammar).\n   Hash\
    \ comments begin with a \"#\" character that is not contained within\n   a string\
    \ and continue until the next CRLF.\n   Example:  if size :over 100K { # this\
    \ is a comment\n                discard;\n             }\n   Bracketed comments\
    \ begin with the token \"/*\" and end with \"*/\" outside\n   of a string.  Bracketed\
    \ comments may span multiple lines. Bracketed\n   comments do not nest.\n   Example:\
    \  if size :over 100K { /* this is a comment\n                this is still a\
    \ comment */ discard /* this is a comment\n                */ ;\n            \
    \ }\n"
- title: 2.4.     Literal Data
  contents:
  - "2.4.     Literal Data\n   Literal data means data that is not executed, merely\
    \ evaluated \"as\n   is\", to be used as arguments to commands.  Literal data\
    \ is limited to\n   numbers and strings.\n"
- title: 2.4.1.   Numbers
  contents:
  - "2.4.1.   Numbers\n   Numbers are given as ordinary decimal numbers.  However,\
    \ those\n   numbers that have a tendency to be fairly large, such as message\n\
    \   sizes, MAY have a \"K\", \"M\", or \"G\" appended to indicate a multiple of\n\
    \   a power of two.  To be comparable with the power-of-two-based\n   versions\
    \ of SI units that computers frequently use, K specifies\n   kibi-, or 1,024 (2^10)\
    \ times the value of the number; M specifies\n   mebi-, or 1,048,576 (2^20) times\
    \ the value of the number; and G\n   specifies tebi-, or 1,073,741,824 (2^30)\
    \ times the value of the\n   number [BINARY-SI].\n   Implementations MUST provide\
    \ 31 bits of magnitude in numbers, but MAY\n   provide more.\n   Only positive\
    \ integers are permitted by this specification.\n"
- title: 2.4.2.   Strings
  contents:
  - "2.4.2.   Strings\n   Scripts involve large numbers of strings as they are used\
    \ for pattern\n   matching, addresses, textual bodies, etc.  Typically, short\
    \ quoted\n   strings suffice for most uses, but a more convenient form is provided\n\
    \   for longer strings such as bodies of messages.\n   A quoted string starts\
    \ and ends with a single double quote (the <\">\n   character, ASCII 34).  A backslash\
    \ (\"\\\", ASCII 92) inside of a quoted\n   string is followed by either another\
    \ backslash or a double quote.\n   This two-character sequence represents a single\
    \ backslash or double-\n   quote within the string, respectively.\n   No other\
    \ characters should be escaped with a single backslash.\n   An undefined escape\
    \ sequence (such as \"\\a\" in a context where \"a\" has\n   no special meaning)\
    \ is interpreted as if there were no backslash (in\n   this case, \"\\a\" is just\
    \ \"a\").\n   Non-printing characters such as tabs, CR and LF, and control\n \
    \  characters are permitted in quoted strings.  Quoted strings MAY span\n   multiple\
    \ lines.  NUL (ASCII 0) is not allowed in strings.\n   For entering larger amounts\
    \ of text, such as an email message, a\n   multi-line form is allowed.  It starts\
    \ with the keyword \"text:\",\n   followed by a CRLF, and ends with the sequence\
    \ of a CRLF, a single\n   period, and another CRLF.  In order to allow the message\
    \ to contain\n   lines with a single-dot, lines are dot-stuffed.  That is, when\n\
    \   composing a message body, an extra `.' is added before each line\n   which\
    \ begins with a `.'.  When the server interprets the script,\n   these extra dots\
    \ are removed.  Note that a line that begins with a\n   dot followed by a non-dot\
    \ character is not interpreted dot-stuffed;\n   that is, \".foo\" is interpreted\
    \ as \".foo\".  However, because this is\n   potentially ambiguous, scripts SHOULD\
    \ be properly dot-stuffed so such\n   lines do not appear.\n   Note that a hashed\
    \ comment or whitespace may occur in between the\n   \"text:\" and the CRLF, but\
    \ not within the string itself.  Bracketed\n   comments are not allowed here.\n"
- title: 2.4.2.1. String Lists
  contents:
  - "2.4.2.1. String Lists\n   When matching patterns, it is frequently convenient\
    \ to match against\n   groups of strings instead of single strings.  For this\
    \ reason, a list\n   of strings is allowed in many tests, implying that if the\
    \ test is\n   true using any one of the strings, then the test is true.\n   Implementations\
    \ are encouraged to use short-circuit evaluation in\n   these cases.\n   For instance,\
    \ the test `header :contains [\"To\", \"Cc\"]\n   [\"me@example.com\", \"me00@landru.example.edu\"\
    ]' is true if either the\n   To header or Cc header of the input message contains\
    \ either of the\n   e-mail addresses \"me@example.com\" or \"me00@landru.example.edu\"\
    .\n   Conversely, in any case where a list of strings is appropriate, a\n   single\
    \ string is allowed without being a member of a list: it is\n   equivalent to\
    \ a list with a single member.  This means that the test\n   `exists \"To\"' is\
    \ equivalent to the test `exists [\"To\"]'.\n"
- title: 2.4.2.2. Headers
  contents:
  - "2.4.2.2. Headers\n   Headers are a subset of strings.  In the Internet Message\n\
    \   Specification [IMAIL] [RFC1123], each header line is allowed to have\n   whitespace\
    \ nearly anywhere in the line, including after the field\n   name and before the\
    \ subsequent colon.  Extra spaces between the\n   header name and the \":\" in\
    \ a header field are ignored.\n   A header name never contains a colon.  The \"\
    From\" header refers to a\n   line beginning \"From:\" (or \"From   :\", etc.).\
    \  No header will match\n   the string \"From:\" due to the trailing colon.\n\
    \   Folding of long header lines (as described in [IMAIL] 3.4.8) is\n   removed\
    \ prior to interpretation of the data.  The folding syntax (the\n   CRLF that\
    \ ends a line plus any leading whitespace at the beginning of\n   the next line\
    \ that indicates folding) are interpreted as if they were\n   a single space.\n"
- title: 2.4.2.3. Addresses
  contents:
  - "2.4.2.3. Addresses\n   A number of commands call for email addresses, which are\
    \ also a\n   subset of strings.  When these addresses are used in outbound\n \
    \  contexts, addresses must be compliant with [IMAIL], but are further\n   constrained.\
    \  Using the symbols defined in [IMAIL], section 6.1, the\n   syntax of an address\
    \ is:\n   sieve-address = addr-spec                ; simple address\n        \
    \         / phrase \"<\" addr-spec \">\" ; name & addr-spec\n   That is, routes\
    \ and group syntax are not permitted.  If multiple\n   addresses are required,\
    \ use a string list.  Named groups are not used\n   here.\n   Implementations\
    \ MUST ensure that the addresses are syntactically\n   valid, but need not ensure\
    \ that they actually identify an email\n   recipient.\n"
- title: 2.4.2.4. MIME Parts
  contents:
  - "2.4.2.4. MIME Parts\n   In a few places, [MIME] body parts are represented as\
    \ strings.  These\n   parts include MIME headers and the body.  This provides\
    \ a way of\n   embedding typed data within a Sieve script so that, among other\n\
    \   things, character sets other than UTF-8 can be used for output\n   messages.\n"
- title: 2.5.     Tests
  contents:
  - "2.5.     Tests\n   Tests are given as arguments to commands in order to control\
    \ their\n   actions.  In this document, tests are given to if/elsif/else to\n\
    \   decide which block of code is run.\n   Tests MUST NOT have side effects. \
    \ That is, a test cannot affect the\n   state of the filter or message.  No tests\
    \ in this specification have\n   side effects, and side effects are forbidden\
    \ in extension tests as\n   well.\n   The rationale for this is that tests with\
    \ side effects impair\n   readability and maintainability and are difficult to\
    \ represent in a\n   graphic interface for generating scripts.  Side effects are\
    \ confined\n   to actions where they are clearer.\n"
- title: 2.5.1.   Test Lists
  contents:
  - "2.5.1.   Test Lists\n   Some tests (\"allof\" and \"anyof\", which implement\
    \ logical \"and\" and\n   logical \"or\", respectively) may require more than\
    \ a single test as an\n   argument.  The test-list syntax element provides a way\
    \ of grouping\n   tests.\n   Example:  if anyof (not exists [\"From\", \"Date\"\
    ],\n                   header :contains \"from\" \"fool@example.edu\") {\n   \
    \             discard;\n             }\n"
- title: 2.6.     Arguments
  contents:
  - "2.6.     Arguments\n   In order to specify what to do, most commands take arguments.\
    \  There\n   are three types of arguments: positional, tagged, and optional.\n"
- title: 2.6.1.   Positional Arguments
  contents:
  - "2.6.1.   Positional Arguments\n   Positional arguments are given to a command\
    \ which discerns their\n   meaning based on their order.  When a command takes\
    \ positional\n   arguments, all positional arguments must be supplied and must\
    \ be in\n   the order prescribed.\n"
- title: 2.6.2.   Tagged Arguments
  contents:
  - "2.6.2.   Tagged Arguments\n   This document provides for tagged arguments in\
    \ the style of\n   CommonLISP.  These are also similar to flags given to commands\
    \ in\n   most command-line systems.\n   A tagged argument is an argument for a\
    \ command that begins with \":\"\n   followed by a tag naming the argument, such\
    \ as \":contains\".  This\n   argument means that zero or more of the next tokens\
    \ have some\n   particular meaning depending on the argument.  These next tokens\
    \ may\n   be numbers or strings but they are never blocks.\n   Tagged arguments\
    \ are similar to positional arguments, except that\n   instead of the meaning\
    \ being derived from the command, it is derived\n   from the tag.\n   Tagged arguments\
    \ must appear before positional arguments, but they\n   may appear in any order\
    \ with other tagged arguments.  For simplicity\n   of the specification, this\
    \ is not expressed in the syntax definitions\n   with commands, but they still\
    \ may be reordered arbitrarily provided\n   they appear before positional arguments.\
    \  Tagged arguments may be\n   mixed with optional arguments.\n   To simplify\
    \ this specification, tagged arguments SHOULD NOT take\n   tagged arguments as\
    \ arguments.\n"
- title: 2.6.3.   Optional Arguments
  contents:
  - "2.6.3.   Optional Arguments\n   Optional arguments are exactly like tagged arguments\
    \ except that they\n   may be left out, in which case a default value is implied.\
    \  Because\n   optional arguments tend to result in shorter scripts, they have\
    \ been\n   used far more than tagged arguments.\n   One particularly noteworthy\
    \ case is the \":comparator\" argument, which\n   allows the user to specify which\
    \ [ACAP] comparator will be used to\n   compare two strings, since different languages\
    \ may impose different\n   orderings on UTF-8 [UTF-8] characters.\n"
- title: 2.6.4.   Types of Arguments
  contents:
  - "2.6.4.   Types of Arguments\n   Abstractly, arguments may be literal data, tests,\
    \ or blocks of\n   commands.  In this way, an \"if\" control structure is merely\
    \ a command\n   that happens to take a test and a block as arguments and may execute\n\
    \   the block of code.\n   However, this abstraction is ambiguous from a parsing\
    \ standpoint.\n   The grammar in section 9.2 presents a parsable version of this:\n\
    \   Arguments are string-lists, numbers, and tags, which may be followed\n   by\
    \ a test or a test-list, which may be followed by a block of\n   commands.  No\
    \ more than one test or test list, nor more than one\n   block of commands, may\
    \ be used, and commands that end with blocks of\n   commands do not end with semicolons.\n"
- title: 2.7.     String Comparison
  contents:
  - "2.7.     String Comparison\n   When matching one string against another, there\
    \ are a number of ways\n   of performing the match operation.  These are accomplished\
    \ with three\n   types of matches: an exact match, a substring match, and a wildcard\n\
    \   glob-style match.  These are described below.\n   In order to provide for\
    \ matches between character sets and case\n   insensitivity, Sieve borrows ACAP's\
    \ comparator registry.\n   However, when a string represents the name of a header,\
    \ the\n   comparator is never user-specified.  Header comparisons are always\n\
    \   done with the \"i;ascii-casemap\" operator, i.e., case-insensitive\n   comparisons,\
    \ because this is the way things are defined in the\n   message specification\
    \ [IMAIL].\n"
- title: 2.7.1.   Match Type
  contents:
  - "2.7.1.   Match Type\n   There are three match types describing the matching used\
    \ in this\n   specification:  \":is\", \":contains\", and \":matches\".  Match\
    \ type\n   arguments are supplied to those commands which allow them to specify\n\
    \   what kind of match is to be performed.\n   These are used as tagged arguments\
    \ to tests that perform string\n   comparison.\n   The \":contains\" match type\
    \ describes a substring match.  If the value\n   argument contains the key argument\
    \ as a substring, the match is true.\n   For instance, the string \"frobnitzm\"\
    \ contains \"frob\" and \"nit\", but\n   not \"fbm\".  The null key (\"\") is\
    \ contained in all values.\n   The \":is\" match type describes an absolute match;\
    \ if the contents of\n   the first string are absolutely the same as the contents\
    \ of the\n   second string, they match.  Only the string \"frobnitzm\" is the\
    \ string\n   \"frobnitzm\".  The null key \":is\" and only \":is\" the null value.\n\
    \   The \":matches\" version specifies a wildcard match using the\n   characters\
    \ \"*\" and \"?\".  \"*\" matches zero or more characters, and \"?\"\n   matches\
    \ a single character.  \"?\" and \"*\" may be escaped as \"\\\\?\" and\n   \"\\\
    \\*\" in strings to match against themselves.  The first backslash\n   escapes\
    \ the second backslash; together, they escape the \"*\".  This is\n   awkward,\
    \ but it is commonplace in several programming languages that\n   use globs and\
    \ regular expressions.\n   In order to specify what type of match is supposed\
    \ to happen,\n   commands that support matching take optional tagged arguments\n\
    \   \":matches\", \":is\", and \":contains\".  Commands default to using \":is\"\
    \n   matching if no match type argument is supplied.  Note that these\n   modifiers\
    \ may interact with comparators; in particular, some\n   comparators are not suitable\
    \ for matching with \":contains\" or\n   \":matches\".  It is an error to use\
    \ a comparator with \":contains\" or\n   \":matches\" that is not compatible with\
    \ it.\n   It is an error to give more than one of these arguments to a given\n\
    \   command.\n   For convenience, the \"MATCH-TYPE\" syntax element is defined\
    \  here  as\n   follows:\n   Syntax:   \":is\" / \":contains\" / \":matches\"\n"
- title: 2.7.2.   Comparisons Across Character Sets
  contents:
  - "2.7.2.   Comparisons Across Character Sets\n   All Sieve scripts are represented\
    \ in UTF-8, but messages may involve\n   a number of character sets.  In order\
    \ for comparisons to work across\n   character sets, implementations SHOULD implement\
    \ the following\n   behavior:\n      Implementations decode header charsets to\
    \ UTF-8.  Two strings are\n      considered equal if their UTF-8 representations\
    \ are identical.\n      Implementations should decode charsets represented in\
    \ the forms\n      specified by [MIME] for both message headers and bodies.\n\
    \      Implementations must be capable of decoding US-ASCII, ISO-8859-1,\n   \
    \   the ASCII subset of ISO-8859-* character sets, and UTF-8.\n   If implementations\
    \ fail to support the above behavior, they MUST\n   conform to the following:\n\
    \      No two strings can be considered equal if one contains octets\n      greater\
    \ than 127.\n"
- title: 2.7.3.   Comparators
  contents:
  - "2.7.3.   Comparators\n   In order to allow for language-independent, case-independent\
    \ matches,\n   the match type may be coupled with a comparator name.  Comparators\n\
    \   are described for [ACAP]; a registry is defined for ACAP, and this\n   specification\
    \ uses that registry.\n   ACAP defines multiple comparator types.  Only equality\
    \ types are used\n   in this specification.\n   All implementations MUST support\
    \ the \"i;octet\" comparator (simply\n   compares octets) and the \"i;ascii-casemap\"\
    \ comparator (which treats\n   uppercase and lowercase characters in the ASCII\
    \ subset of UTF-8 as\n   the same).  If left unspecified, the default is \"i;ascii-casemap\"\
    .\n   Some comparators may not be usable with substring matches; that is,\n  \
    \ they may only work with \":is\".  It is an error to try and use a\n   comparator\
    \ with \":matches\" or \":contains\" that is not compatible with\n   it.\n   A\
    \ comparator is specified by the \":comparator\" option with commands\n   that\
    \ support matching.  This option is followed by a string providing\n   the name\
    \ of the comparator to be used.  For convenience, the syntax\n   of a comparator\
    \ is abbreviated to \"COMPARATOR\", and (repeated in\n   several tests) is as\
    \ follows:\n   Syntax:   \":comparator\" <comparator-name: string>\n   So in this\
    \ example,\n   Example:  if header :contains :comparator \"i;octet\" \"Subject\"\
    \n                \"MAKE MONEY FAST\" {\n                   discard;\n       \
    \      }\n   would discard any message with subjects like \"You can MAKE MONEY\n\
    \   FAST\", but not \"You can Make Money Fast\", since the comparator used\n \
    \  is case-sensitive.\n   Comparators other than i;octet and i;ascii-casemap must\
    \ be declared\n   with require, as they are extensions.  If a comparator declared\
    \ with\n   require is not known, it is an error, and execution fails.  If the\n\
    \   comparator is not declared with require, it is also an error, even if\n  \
    \ the comparator is supported.  (See 2.10.5.)\n   Both \":matches\" and \":contains\"\
    \ match types are compatible with the\n   \"i;octet\" and \"i;ascii-casemap\"\
    \ comparators and may be used with\n   them.\n   It is an error to give more than\
    \ one of these arguments to a given\n   command.\n"
- title: 2.7.4.   Comparisons Against Addresses
  contents:
  - "2.7.4.   Comparisons Against Addresses\n   Addresses are one of the most frequent\
    \ things represented as strings.\n   These are structured, and being able to compare\
    \ against the local-\n   part or the domain of an address is useful, so some tests\
    \ that act\n   exclusively on addresses take an additional optional argument that\n\
    \   specifies what the test acts on.\n   These optional arguments are \":localpart\"\
    , \":domain\", and \":all\",\n   which act on the local-part (left-side), the\
    \ domain part (right-\n   side), and the whole address.\n   The kind of comparison\
    \ done, such as whether or not the test done is\n   case-insensitive, is specified\
    \ as a comparator argument to the test.\n   If an optional address-part is omitted,\
    \ the default is \":all\".\n   It is an error to give more than one of these arguments\
    \ to a given\n   command.\n   For convenience, the \"ADDRESS-PART\" syntax element\
    \ is defined here as\n   follows:\n   Syntax:   \":localpart\" / \":domain\" /\
    \ \":all\"\n"
- title: 2.8.     Blocks
  contents:
  - "2.8.     Blocks\n   Blocks are sets of commands enclosed within curly braces.\
    \  Blocks are\n   supplied to commands so that the commands can implement control\n\
    \   commands.\n   A control structure is a command that happens to take a test\
    \ and a\n   block as one of its arguments; depending on the result of the test\n\
    \   supplied as another argument, it runs the code in the block some\n   number\
    \ of times.\n   With the commands supplied in this memo, there are no loops. \
    \ The\n   control structures supplied--if, elsif, and else--run a block either\n\
    \   once or not at all.  So there are two arguments, the test and the\n   block.\n"
- title: 2.9.     Commands
  contents:
  - "2.9.     Commands\n   Sieve scripts are sequences of commands.  Commands can\
    \ take any of\n   the tokens above as arguments, and arguments may be either tagged\
    \ or\n   positional arguments.  Not all commands take all arguments.\n   There\
    \ are three kinds of commands: test commands, action commands,\n   and control\
    \ commands.\n   The simplest is an action command.  An action command is an\n\
    \   identifier followed by zero or more arguments, terminated by a\n   semicolon.\
    \  Action commands do not take tests or blocks as arguments.\n   A control command\
    \ is similar, but it takes a test as an argument, and\n   ends with a block instead\
    \ of a semicolon.\n   A test command is used as part of a control command.  It\
    \ is used to\n   specify whether or not the block of code given to the control\
    \ command\n   is executed.\n"
- title: 2.10.    Evaluation
  contents:
  - '2.10.    Evaluation

    '
- title: 2.10.1.  Action Interaction
  contents:
  - "2.10.1.  Action Interaction\n   Some actions cannot be used with other actions\
    \ because the result\n   would be absurd.  These restrictions are noted throughout\
    \ this memo.\n   Extension actions MUST state how they interact with actions defined\n\
    \   in this specification.\n"
- title: 2.10.2.  Implicit Keep
  contents:
  - "2.10.2.  Implicit Keep\n   Previous experience with filtering systems suggests\
    \ that cases tend\n   to be missed in scripts.  To prevent errors, Sieve has an\
    \ \"implicit\n   keep\".\n   An implicit keep is a keep action (see 4.4) performed\
    \ in absence of\n   any action that cancels the implicit keep.\n   An implicit\
    \ keep is performed if a message is not written to a\n   mailbox, redirected to\
    \ a new address, or explicitly thrown out.  That\n   is, if a fileinto, a keep,\
    \ a redirect, or a discard is performed, an\n   implicit keep is not.\n   Some\
    \ actions may be defined to not cancel the implicit keep.  These\n   actions may\
    \ not directly affect the delivery of a message, and are\n   used for their side\
    \ effects.  None of the actions specified in this\n   document meet that criteria,\
    \ but extension actions will.\n   For instance, with any of the short messages\
    \ offered above, the\n   following script produces no actions.\n   Example:  if\
    \ size :over 500K { discard; }\n   As a result, the implicit keep is taken.\n"
- title: 2.10.3.  Message Uniqueness in a Mailbox
  contents:
  - "2.10.3.  Message Uniqueness in a Mailbox\n   Implementations SHOULD NOT deliver\
    \ a message to the same folder more\n   than once, even if a script explicitly\
    \ asks for a message to be\n   written to a mailbox twice.\n   The test for equality\
    \ of two messages is implementation-defined.\n   If a script asks for a message\
    \ to be written to a mailbox twice, it\n   MUST NOT be treated as an error.\n"
- title: 2.10.4.  Limits on Numbers of Actions
  contents:
  - "2.10.4.  Limits on Numbers of Actions\n   Site policy MAY limit numbers of actions\
    \ taken and MAY impose\n   restrictions on which actions can be used together.\
    \  In the event\n   that a script hits a policy limit on the number of actions\
    \ taken for\n   a particular message, an error occurs.\n   Implementations MUST\
    \ prohibit more than one reject.\n   Implementations MUST allow at least one keep\
    \ or one fileinto.  If\n   fileinto is not implemented, implementations MUST allow\
    \ at least one\n   keep.\n   Implementations SHOULD prohibit reject when used\
    \ with other actions.\n"
- title: 2.10.5.  Extensions and Optional Features
  contents:
  - "2.10.5.  Extensions and Optional Features\n   Because of the differing capabilities\
    \ of many mail systems, several\n   features of this specification are optional.\
    \  Before any of these\n   extensions can be executed, they must be declared with\
    \ the \"require\"\n   action.\n   If an extension is not enabled with \"require\"\
    , implementations MUST\n   treat it as if they did not support it at all.\n  \
    \ If a script does not understand an extension declared with require,\n   the\
    \ script must not be used at all.  Implementations MUST NOT execute\n   scripts\
    \ which require unknown capability names.\n   Note: The reason for this restriction\
    \ is that prior experiences with\n         languages such as LISP and Tcl suggest\
    \ that this is a workable\n         way of noting that a given script uses an\
    \ extension.\n         Experience with PostScript suggests that mechanisms that\
    \ allow\n         a script to work around missing extensions are not used in\n\
    \         practice.\n   Extensions which define actions MUST state how they interact\
    \ with\n   actions discussed in the base specification.\n"
- title: 2.10.6.  Errors
  contents:
  - "2.10.6.  Errors\n   In any programming language, there are compile-time and run-time\n\
    \   errors.\n   Compile-time errors are ones in syntax that are detectable if\
    \ a\n   syntax check is done.\n   Run-time errors are not detectable until the\
    \ script is run.  This\n   includes transient failures like disk full conditions,\
    \ but also\n   includes issues like invalid combinations of actions.\n   When\
    \ an error occurs in a Sieve script, all processing stops.\n   Implementations\
    \ MAY choose to do a full parse, then evaluate the\n   script, then do all actions.\
    \  Implementations might even go so far as\n   to ensure that execution is atomic\
    \ (either all actions are executed\n   or none are executed).\n   Other implementations\
    \ may choose to parse and run at the same time.\n   Such implementations are simpler,\
    \ but have issues with partial\n   failure (some actions happen, others don't).\n\
    \   Implementations might even go so far as to ensure that scripts can\n   never\
    \ execute an invalid set of actions (e.g., reject + fileinto)\n   before execution,\
    \ although this could involve solving the Halting\n   Problem.\n   This specification\
    \ allows any of these approaches.  Solving the\n   Halting Problem is considered\
    \ extra credit.\n   When an error happens, implementations MUST notify the user\
    \ that an\n   error occurred, which actions (if any) were taken, and do an implicit\n\
    \   keep.\n"
- title: 2.10.7.  Limits on Execution
  contents:
  - "2.10.7.  Limits on Execution\n   Implementations may limit certain constructs.\
    \  However, this\n   specification places a lower bound on some of these limits.\n\
    \   Implementations MUST support fifteen levels of nested blocks.\n   Implementations\
    \ MUST support fifteen levels of nested test lists.\n"
- title: 3.      Control Commands
  contents:
  - "3.      Control Commands\n   Control structures are needed to allow for multiple\
    \ and conditional\n   actions.\n"
- title: 3.1.     Control Structure If
  contents:
  - "3.1.     Control Structure If\n   There are three pieces to if: \"if\", \"elsif\"\
    , and \"else\".  Each is\n   actually a separate command in terms of the grammar.\
    \  However, an\n   elsif MUST only follow an if, and an else MUST follow only\
    \ either an\n   if or an elsif.  An error occurs if these conditions are not met.\n\
    \   Syntax:   if <test1: test> <block1: block>\n   Syntax:   elsif <test2: test>\
    \ <block2: block>\n   Syntax:   else <block>\n   The semantics are similar to\
    \ those of any of the many other\n   programming languages these control commands\
    \ appear in.  When the\n   interpreter sees an \"if\", it evaluates the test associated\
    \ with it.\n   If the test is true, it executes the block associated with it.\n\
    \   If the test of the \"if\" is false, it evaluates the test of the first\n \
    \  \"elsif\" (if any).  If the test of \"elsif\" is true, it runs the\n   elsif's\
    \ block.  An elsif may be followed by an elsif, in which case,\n   the interpreter\
    \ repeats this process until it runs out of elsifs.\n   When the interpreter runs\
    \ out of elsifs, there may be an \"else\" case.\n   If there is, and none of the\
    \ if or elsif tests were true, the\n   interpreter runs the else case.\n   This\
    \ provides a way of performing exactly one of the blocks in the\n   chain.\n \
    \  In the following example, both Message A and B are dropped.\n   Example:  require\
    \ \"fileinto\";\n             if header :contains \"from\" \"coyote\" {\n    \
    \            discard;\n             } elsif header :contains [\"subject\"] [\"\
    $$$\"] {\n                discard;\n             } else {\n                fileinto\
    \ \"INBOX\";\n             }\n   When the script below is run over message A,\
    \ it redirects the message\n   to  acm@example.edu;  message B, to postmaster@example.edu;\
    \ any other\n   message is redirected to field@example.edu.\n   Example:  if header\
    \ :contains [\"From\"] [\"coyote\"] {\n                redirect \"acm@example.edu\"\
    ;\n             } elsif header :contains \"Subject\" \"$$$\" {\n             \
    \   redirect \"postmaster@example.edu\";\n             } else {\n            \
    \    redirect \"field@example.edu\";\n             }\n   Note that this definition\
    \ prohibits the \"... else if ...\" sequence\n   used by C.  This is intentional,\
    \ because this construct produces a\n   shift-reduce conflict.\n"
- title: 3.2.     Control Structure Require
  contents:
  - "3.2.     Control Structure Require\n   Syntax:   require <capabilities: string-list>\n\
    \   The require action notes that a script makes use of a certain\n   extension.\
    \  Such a declaration is required to use the extension, as\n   discussed in section\
    \ 2.10.5.  Multiple capabilities can be declared\n   with a single require.\n\
    \   The require command, if present, MUST be used before anything other\n   than\
    \ a require can be used.  An error occurs if a require appears\n   after a command\
    \ other than require.\n   Example:  require [\"fileinto\", \"reject\"];\n   Example:\
    \  require \"fileinto\";\n             require \"vacation\";\n"
- title: 3.3.     Control Structure Stop
  contents:
  - "3.3.     Control Structure Stop\n   Syntax:   stop\n   The \"stop\" action ends\
    \ all processing.  If no actions have been\n   executed, then the keep action\
    \ is taken.\n"
- title: 4.      Action Commands
  contents:
  - "4.      Action Commands\n   This document supplies five actions that may be taken\
    \ on a message:\n   keep, fileinto, redirect, reject, and discard.\n   Implementations\
    \ MUST support the \"keep\", \"discard\", and \"redirect\"\n   actions.\n   Implementations\
    \ SHOULD support \"reject\" and \"fileinto\".\n   Implementations MAY limit the\
    \ number of certain actions taken (see\n   section 2.10.4).\n"
- title: 4.1.     Action reject
  contents:
  - "4.1.     Action reject\n   Syntax:   reject <reason: string>\n   The optional\
    \ \"reject\" action refuses delivery of a message by sending\n   back an [MDN]\
    \ to the sender.  It resends the message to the sender,\n   wrapping it in a \"\
    reject\" form, noting that it was rejected by the\n   recipient.  In the following\
    \ script, message A is rejected and\n   returned to the sender.\n   Example: \
    \ if header :contains \"from\" \"coyote@desert.example.org\" {\n             \
    \   reject \"I am not taking mail from you, and I don't want\n               \
    \ your birdseed, either!\";\n             }\n   A reject message MUST take the\
    \ form of a failure MDN as specified  by\n   [MDN].    The  human-readable  portion\
    \  of  the  message,  the  first\n   component of the MDN, contains the human\
    \ readable message  describing\n   the  error,  and  it  SHOULD  contain  additional\
    \  text  alerting the\n   original sender that mail was refused by a filter. \
    \ This part of  the\n   MDN might appear as follows:\n   ------------------------------------------------------------\n\
    \   Message was refused by recipient's mail filtering program.  Reason\n   given\
    \ was as follows:\n   I am not taking mail from you, and I don't want your birdseed,\n\
    \   either!\n   ------------------------------------------------------------\n\
    \   The MDN action-value field as defined in the MDN specification MUST\n   be\
    \ \"deleted\" and MUST have the MDN-sent-automatically and automatic-\n   action\
    \ modes set.\n   Because some implementations can not or will not implement the\
    \ reject\n   command, it is optional.  The capability string to be used with the\n\
    \   require command is \"reject\".\n"
- title: 4.2.     Action fileinto
  contents:
  - "4.2.     Action fileinto\n   Syntax:   fileinto <folder: string>\n   The \"fileinto\"\
    \ action delivers the message into the specified folder.\n   Implementations SHOULD\
    \ support fileinto, but in some environments\n   this may be impossible.\n   The\
    \ capability string for use with the require command is \"fileinto\".\n   In the\
    \ following script, message A is filed into folder\n   \"INBOX.harassment\".\n\
    \   Example:  require \"fileinto\";\n             if header :contains [\"from\"\
    ] \"coyote\" {\n                fileinto \"INBOX.harassment\";\n             }\n"
- title: 4.3.     Action redirect
  contents:
  - "4.3.     Action redirect\n   Syntax:   redirect <address: string>\n   The \"\
    redirect\" action is used to send the message to another user at\n   a supplied\
    \ address, as a mail forwarding feature does.  The\n   \"redirect\" action makes\
    \ no changes to the message body or existing\n   headers, but it may add new headers.\
    \  The \"redirect\" modifies the\n   envelope recipient.\n   The redirect command\
    \ performs an MTA-style \"forward\"--that is, what\n   you get from a .forward\
    \ file using sendmail under UNIX.  The address\n   on the SMTP envelope is replaced\
    \ with the one on the redirect command\n   and the message is sent back out. \
    \ (This is not an MUA-style forward,\n   which creates a new message with a different\
    \ sender and message ID,\n   wrapping the old message in a new one.)\n   A simple\
    \ script can be used for redirecting all mail:\n   Example:  redirect \"bart@example.edu\"\
    ;\n   Implementations SHOULD take measures to implement loop control,\n   possibly\
    \ including adding headers to the message or counting received\n   headers.  If\
    \ an implementation detects a loop, it causes an error.\n"
- title: 4.4.     Action keep
  contents:
  - "4.4.     Action keep\n   Syntax:   keep\n   The \"keep\" action is whatever action\
    \ is taken in lieu of all other\n   actions, if no filtering happens at all; generally,\
    \ this simply means\n   to file the message into the user's main mailbox.  This\
    \ command\n   provides a way to execute this action without needing to know the\n\
    \   name of the user's main mailbox, providing a way to call it without\n   needing\
    \ to understand the user's setup, or the underlying mail\n   system.\n   For instance,\
    \ in an implementation where the IMAP server is running\n   scripts on behalf\
    \ of the user at time of delivery, a keep command is\n   equivalent to a fileinto\
    \ \"INBOX\".\n   Example:  if size :under 1M { keep; } else { discard; }\n   Note\
    \ that the above script is identical to the one below.\n   Example:  if not size\
    \ :under 1M { discard; }\n"
- title: 4.5.     Action discard
  contents:
  - "4.5.     Action discard\n   Syntax:   discard\n   Discard is used to silently\
    \ throw away the message.  It does so by\n   simply canceling the implicit keep.\
    \  If discard is used with other\n   actions, the other actions still happen.\
    \  Discard is compatible with\n   all other actions.  (For instance fileinto+discard\
    \ is equivalent to\n   fileinto.)\n   Discard MUST be silent; that is, it MUST\
    \ NOT return a non-delivery\n   notification of any kind ([DSN], [MDN], or otherwise).\n\
    \   In the following script, any mail from \"idiot@example.edu\" is thrown\n \
    \  out.\n   Example:  if header :contains [\"from\"] [\"idiot@example.edu\"] {\n\
    \                discard;\n             }\n   While an important part of this\
    \ language, \"discard\" has the potential\n   to create serious problems for users:\
    \ Students who leave themselves\n   logged in to an unattended machine in a public\
    \ computer lab may find\n   their script changed to just \"discard\".  In order\
    \ to protect users in\n   this situation (along with similar situations), implementations\
    \ MAY\n   keep messages destroyed by a script for an indefinite period, and MAY\n\
    \   disallow scripts that throw out all mail.\n"
- title: 5.      Test Commands
  contents:
  - "5.      Test Commands\n   Tests are used in conditionals to decide which part(s)\
    \ of the\n   conditional to execute.\n   Implementations MUST support these tests:\
    \ \"address\", \"allof\",\n   \"anyof\", \"exists\", \"false\", \"header\", \"\
    not\", \"size\", and \"true\".\n   Implementations SHOULD support the \"envelope\"\
    \ test.\n"
- title: 5.1.     Test address
  contents:
  - "5.1.     Test address\n   Syntax:   address [ADDRESS-PART] [COMPARATOR] [MATCH-TYPE]\n\
    \             <header-list: string-list> <key-list: string-list>\n   The address\
    \ test matches Internet addresses in structured headers\n   that contain addresses.\
    \  It returns true if any header contains any\n   key in the specified part of\
    \ the address, as modified by the\n   comparator and the match keyword.\n   Like\
    \ envelope and header, this test returns true if any combination\n   of the header-list\
    \ and key-list arguments match.\n   Internet email addresses [IMAIL] have the\
    \ somewhat awkward\n   characteristic that the local-part to the left of the at-sign\
    \ is\n   considered case sensitive, and the domain-part to the right of the\n\
    \   at-sign is case insensitive.  The \"address\" command does not deal\n   with\
    \ this itself, but provides the ADDRESS-PART argument for allowing\n   users to\
    \ deal with it.\n   The address primitive never acts on the phrase part of an\
    \ email\n   address, nor on comments within that address.  It also never acts\
    \ on\n   group names, although it does act on the addresses within the group\n\
    \   construct.\n   Implementations MUST restrict the address test to headers that\n\
    \   contain addresses, but MUST include at least From, To, Cc, Bcc,\n   Sender,\
    \ Resent-From, Resent-To, and SHOULD include any other header\n   that utilizes\
    \ an \"address-list\" structured header body.\n   Example:  if address :is :all\
    \ \"from\" \"tim@example.com\" {\n                discard;\n"
- title: 5.2.     Test allof
  contents:
  - "5.2.     Test allof\n   Syntax:   allof <tests: test-list>\n   The allof test\
    \ performs a logical AND on the tests supplied to it.\n   Example:  allof (false,\
    \ false)  =>   false\n             allof (false, true)   =>   false\n        \
    \     allof (true,  true)   =>   true\n   The allof test takes as its argument\
    \ a test-list.\n"
- title: 5.3.     Test anyof
  contents:
  - "5.3.     Test anyof\n   Syntax:   anyof <tests: test-list>\n   The anyof test\
    \ performs a logical OR on the tests supplied to it.\n   Example:  anyof (false,\
    \ false)  =>   false\n             anyof (false, true)   =>   true\n         \
    \    anyof (true,  true)   =>   true\n"
- title: 5.4.     Test envelope
  contents:
  - "5.4.     Test envelope\n   Syntax:   envelope [COMPARATOR] [ADDRESS-PART] [MATCH-TYPE]\n\
    \             <envelope-part: string-list> <key-list: string-list>\n   The \"\
    envelope\" test is true if the specified part of the SMTP (or\n   equivalent)\
    \ envelope matches the specified key.\n   If one of the envelope-part strings\
    \ is (case insensitive) \"from\",\n   then matching occurs against the FROM address\
    \ used in the SMTP MAIL\n   command.\n   If one of the envelope-part strings is\
    \ (case insensitive) \"to\", then\n   matching occurs against the TO address used\
    \ in the SMTP RCPT command\n   that resulted in this message getting delivered\
    \ to this user.  Note\n   that only the most recent TO is available, and only\
    \ the one relevant\n   to this user.\n   The envelope-part is a string list and\
    \ may contain more than one\n   parameter, in which case all of the strings specified\
    \ in the key-list\n   are matched against all parts given in the envelope-part\
    \ list.\n   Like address and header, this test returns true if any combination\
    \ of\n   the envelope-part and key-list arguments is true.\n   All tests against\
    \ envelopes MUST drop source routes.\n   If the SMTP transaction involved several\
    \ RCPT commands, only the data\n   from the RCPT command that caused delivery\
    \ to this user is available\n   in the \"to\" part of the envelope.\n   If a protocol\
    \ other than SMTP is used for message transport,\n   implementations are expected\
    \ to adapt this command appropriately.\n   The envelope command is optional. \
    \ Implementations SHOULD support it,\n   but the necessary information may not\
    \ be available in all cases.\n   Example:  require \"envelope\";\n           \
    \  if envelope :all :is \"from\" \"tim@example.com\" {\n                discard;\n\
    \             }\n"
- title: 5.5.     Test exists
  contents:
  - "5.5.     Test exists\n   Syntax:   exists <header-names: string-list>\n   The\
    \ \"exists\" test is true if the headers listed in the header-names\n   argument\
    \ exist within the message.  All of the headers must exist or\n   the test is\
    \ false.\n   The following example throws out mail that doesn't have a From header\n\
    \   and a Date header.\n   Example:  if not exists [\"From\",\"Date\"] {\n   \
    \             discard;\n             }\n"
- title: 5.6.     Test false
  contents:
  - "5.6.     Test false\n   Syntax:   false\n   The \"false\" test always evaluates\
    \ to false.\n"
- title: 5.7.     Test header
  contents:
  - "5.7.     Test header\n   Syntax:   header [COMPARATOR] [MATCH-TYPE]\n       \
    \      <header-names: string-list> <key-list: string-list>\n   The \"header\"\
    \ test evaluates to true if any header name matches any\n   key.  The type of\
    \ match is specified by the optional match argument,\n   which defaults to \"\
    :is\" if not specified, as specified in section\n   2.6.\n   Like address and\
    \ envelope, this test returns true if any combination\n   of the string-list and\
    \ key-list arguments match.\n   If a header listed in the header-names argument\
    \ exists, it contains\n   the null key (\"\").  However, if the named header is\
    \ not present, it\n   does not contain the null key.  So if a message contained\
    \ the header\n           X-Caffeine: C8H10N4O2\n   these tests on that header\
    \ evaluate as follows:\n           header :is [\"X-Caffeine\"] [\"\"]        \
    \ => false\n           header :contains [\"X-Caffeine\"] [\"\"]   => true\n"
- title: 5.8.     Test not
  contents:
  - "5.8.     Test not\n   Syntax:   not <test>\n   The \"not\" test takes some other\
    \ test as an argument, and yields the\n   opposite result.  \"not false\" evaluates\
    \ to \"true\" and \"not true\"\n   evaluates to \"false\".\n"
- title: 5.9.     Test size
  contents:
  - "5.9.     Test size\n   Syntax:   size <\":over\" / \":under\"> <limit: number>\n\
    \   The \"size\" test deals with the size of a message.  It takes either a\n \
    \  tagged argument of \":over\" or \":under\", followed by a number\n   representing\
    \ the size of the message.\n   If the argument is \":over\", and the size of the\
    \ message is greater\n   than the number provided, the test is true; otherwise,\
    \ it is false.\n   If the argument is \":under\", and the size of the message\
    \ is less than\n   the number provided, the test is true; otherwise, it is false.\n\
    \   Exactly one of \":over\" or \":under\" must be specified, and anything\n \
    \  else is an error.\n   The size of a message is defined to be the number of\
    \ octets from the\n   initial header until the last character in the message body.\n\
    \   Note that for a message that is exactly 4,000 octets, the message is\n   neither\
    \ \":over\" 4000 octets or \":under\" 4000 octets.\n"
- title: 5.10.    Test true
  contents:
  - "5.10.    Test true\n   Syntax:   true\n   The \"true\" test always evaluates\
    \ to true.\n"
- title: 6.      Extensibility
  contents:
  - "6.      Extensibility\n   New control structures, actions, and tests can be added\
    \ to the\n   language.  Sites must make these features known to their users; this\n\
    \   document does not define a way to discover the list of extensions\n   supported\
    \ by the server.\n   Any extensions to this language MUST define a capability\
    \ string that\n   uniquely identifies that extension.  If a new version of an\
    \ extension\n   changes the functionality of a previously defined extension, it\
    \ MUST\n   use a different name.\n   In a situation where there is a submission\
    \ protocol and an extension\n   advertisement mechanism aware of the details of\
    \ this language,\n   scripts submitted can be checked against the mail server\
    \ to prevent\n   use of an extension that the server does not support.\n   Extensions\
    \ MUST state how they interact with constraints defined in\n   section 2.10, e.g.,\
    \ whether they cancel the implicit keep, and which\n   actions they are compatible\
    \ and incompatible with.\n"
- title: 6.1.     Capability String
  contents:
  - "6.1.     Capability String\n   Capability strings are typically short strings\
    \ describing what\n   capabilities are supported by the server.\n   Capability\
    \ strings beginning with \"vnd.\" represent vendor-defined\n   extensions.  Such\
    \ extensions are not defined by Internet standards or\n   RFCs, but are still\
    \ registered with IANA in order to prevent\n   conflicts.  Extensions starting\
    \ with \"vnd.\" SHOULD be followed by the\n   name of the vendor and product,\
    \ such as \"vnd.acme.rocket-sled\".\n   The following capability strings are defined\
    \ by this document:\n   envelope    The string \"envelope\" indicates that the\
    \ implementation\n               supports the \"envelope\" command.\n   fileinto\
    \    The string \"fileinto\" indicates that the implementation\n             \
    \  supports the \"fileinto\" command.\n   reject      The string \"reject\" indicates\
    \ that the implementation\n               supports the \"reject\" command.\n \
    \  comparator- The string \"comparator-elbonia\" is provided if the\n        \
    \       implementation supports the \"elbonia\" comparator.\n               Therefore,\
    \ all implementations have at least the\n               \"comparator-i;octet\"\
    \ and \"comparator-i;ascii-casemap\"\n               capabilities.  However, these\
    \ comparators may be used\n               without being declared with require.\n"
- title: 6.2.     IANA Considerations
  contents:
  - "6.2.     IANA Considerations\n   In order to provide a standard set of extensions,\
    \ a registry is\n   provided by IANA.  Capability names may be registered on a\
    \ first-\n   come, first-served basis.  Extensions designed for interoperable\
    \ use\n   SHOULD be defined as standards track or IESG approved experimental\n\
    \   RFCs.\n"
- title: 6.2.1.     Template for Capability Registrations
  contents:
  - "6.2.1.     Template for Capability Registrations\n   The following template is\
    \ to be used for registering new Sieve\n   extensions with IANA.\n   To: iana@iana.org\n\
    \   Subject: Registration of new Sieve extension\n   Capability name:\n   Capability\
    \ keyword:\n   Capability arguments:\n   Standards Track/IESG-approved experimental\
    \ RFC number:\n   Person and email address to contact for further information:\n"
- title: 6.2.2.     Initial Capability Registrations
  contents:
  - "6.2.2.     Initial Capability Registrations\n   The following are to be added\
    \ to the IANA registry for Sieve\n   extensions as the initial contents of the\
    \ capability registry.\n   Capability name:        fileinto\n   Capability keyword:\
    \     fileinto\n   Capability arguments:   fileinto <folder: string>\n   Standards\
    \ Track/IESG-approved experimental RFC number:\n           RFC 3028 (Sieve base\
    \ spec)\n   Person and email address to contact for further information:\n   \
    \        Tim Showalter\n           tjs@mirapoint.com\n   Capability name:    \
    \    reject\n   Capability keyword:     reject\n   Capability arguments:   reject\
    \ <reason: string>\n   Standards Track/IESG-approved experimental RFC number:\n\
    \           RFC 3028 (Sieve base spec)\n   Person and email address to contact\
    \ for further information:\n           Tim Showalter\n           tjs@mirapoint.com\n\
    \   Capability name:        envelope\n   Capability keyword:     envelope\n  \
    \ Capability arguments:\n           envelope [COMPARATOR] [ADDRESS-PART] [MATCH-TYPE]\n\
    \           <envelope-part: string-list> <key-list: string-list>\n   Standards\
    \ Track/IESG-approved experimental RFC number:\n           RFC 3028 (Sieve base\
    \ spec)\n   Person and email address to contact for further information:\n   \
    \        Tim Showalter\n           tjs@mirapoint.com\n   Capability name:    \
    \    comparator-*\n   Capability keyword:\n           comparator-* (anything starting\
    \ with \"comparator-\")\n   Capability arguments:   (none)\n   Standards Track/IESG-approved\
    \ experimental RFC number:\n           RFC 3028, Sieve, by reference of\n    \
    \       RFC 2244, Application Configuration Access Protocol\n   Person and email\
    \ address to contact for further information:\n           Tim Showalter\n    \
    \       tjs@mirapoint.com\n"
- title: 6.3.     Capability Transport
  contents:
  - "6.3.     Capability Transport\n   As the range of mail systems that this document\
    \ is intended to apply\n   to is quite varied, a method of advertising which capabilities\
    \ an\n   implementation supports is difficult due to the wide range of\n   possible\
    \ implementations.  Such a mechanism, however, should have\n   property that the\
    \ implementation can advertise the complete set of\n   extensions that it supports.\n"
- title: 7.      Transmission
  contents:
  - "7.      Transmission\n   The MIME type for a Sieve script is \"application/sieve\"\
    .\n   The registration of this type for RFC 2048 requirements is as\n   follows:\n\
    \    Subject: Registration of MIME media type application/sieve\n    MIME media\
    \ type name: application\n    MIME subtype name: sieve\n    Required parameters:\
    \ none\n    Optional parameters: none\n    Encoding considerations: Most sieve\
    \ scripts will be textual,\n       written in UTF-8.  When non-7bit characters\
    \ are used,\n       quoted-printable is appropriate for transport systems\n  \
    \     that require 7bit encoding.\n    Security considerations: Discussed in section\
    \ 10 of RFC 3028.\n    Interoperability considerations: Discussed in section 2.10.5\n\
    \       of RFC 3028.\n    Published specification: RFC 3028.\n    Applications\
    \ which use this media type: sieve-enabled mail servers\n    Additional information:\n\
    \      Magic number(s):\n      File extension(s): .siv\n      Macintosh File Type\
    \ Code(s):\n    Person & email address to contact for further information:\n \
    \      See the discussion list at ietf-mta-filters@imc.org.\n    Intended usage:\n\
    \       COMMON\n    Author/Change controller:\n       See Author information in\
    \ RFC 3028.\n"
- title: 8.      Parsing
  contents:
  - "8.      Parsing\n   The Sieve grammar is separated into tokens and a separate\
    \ grammar as\n   most programming languages are.\n"
- title: 8.1.     Lexical Tokens
  contents:
  - "8.1.     Lexical Tokens\n   Sieve scripts are encoded in UTF-8.  The following\
    \ assumes a valid\n   UTF-8 encoding; special characters in Sieve scripts are\
    \ all ASCII.\n   The following are tokens in Sieve:\n           - identifiers\n\
    \           - tags\n           - numbers\n           - quoted strings\n      \
    \     - multi-line strings\n           - other separators\n   Blanks, horizontal\
    \ tabs, CRLFs, and comments (\"white space\") are\n   ignored except as they separate\
    \ tokens.  Some white space is required\n   to separate otherwise adjacent tokens\
    \ and in specific places in the\n   multi-line strings.\n   The other separators\
    \ are single individual characters, and are\n   mentioned explicitly in the grammar.\n\
    \   The lexical structure of sieve is defined in the following BNF (as\n   described\
    \ in [ABNF]):\n   bracket-comment = \"/*\" *(CHAR-NOT-STAR / (\"*\" CHAR-NOT-SLASH))\
    \ \"*/\"\n           ;; No */ allowed inside a comment.\n           ;; (No * is\
    \ allowed unless it is the last character,\n           ;; or unless it is followed\
    \ by a character that isn't a\n           ;; slash.)\n   CHAR-NOT-DOT = (%x01-09\
    \ / %x0b-0c / %x0e-2d / %x2f-ff)\n           ;; no dots, no CRLFs\n   CHAR-NOT-CRLF\
    \ = (%x01-09 / %x0b-0c / %x0e-ff)\n   CHAR-NOT-SLASH = (%x00-57 / %x58-ff)\n \
    \  CHAR-NOT-STAR = (%x00-51 / %x53-ff)\n   comment = bracket-comment / hash-comment\n\
    \   hash-comment = ( \"#\" *CHAR-NOT-CRLF CRLF )\n   identifier = (ALPHA / \"\
    _\") *(ALPHA DIGIT \"_\")\n   tag = \":\" identifier\n   number = 1*DIGIT [QUANTIFIER]\n\
    \   QUANTIFIER = \"K\" / \"M\" / \"G\"\n   quoted-string = DQUOTE *CHAR DQUOTE\n\
    \           ;; in general, \\ CHAR inside a string maps to CHAR\n           ;;\
    \ so \\\" maps to \" and \\\\ maps to \\\n           ;; note that newlines and\
    \ other characters are all allowed\n           ;; strings\n   multi-line     \
    \     = \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n                       \
    \  *(multi-line-literal / multi-line-dotstuff)\n                         \".\"\
    \ CRLF\n   multi-line-literal  = [CHAR-NOT-DOT *CHAR-NOT-CRLF] CRLF\n   multi-line-dotstuff\
    \ = \".\" 1*CHAR-NOT-CRLF CRLF\n           ;; A line containing only \".\" ends\
    \ the multi-line.\n           ;; Remove a leading '.' if followed by another '.'.\n\
    \   white-space = 1*(SP / CRLF / HTAB) / comment\n"
- title: 8.2.     Grammar
  contents:
  - "8.2.     Grammar\n   The following is the grammar of Sieve after it has been\
    \ lexically\n   interpreted.  No white space or comments appear below.  The start\n\
    \   symbol is \"start\".\n   argument = string-list / number / tag\n   arguments\
    \ = *argument [test / test-list]\n   block = \"{\" commands \"}\"\n   command\
    \ = identifier arguments ( \";\" / block )\n   commands = *command\n   start =\
    \ commands\n   string = quoted-string / multi-line\n   string-list = \"[\" string\
    \ *(\",\" string) \"]\" / string         ;; if\n   there is only a single string,\
    \ the brackets are optional\n   test = identifier arguments\n   test-list = \"\
    (\" test *(\",\" test) \")\"\n"
- title: 9.      Extended Example
  contents:
  - "9.      Extended Example\n   The following is an extended example of a Sieve\
    \ script.  Note that it\n   does not make use of the implicit keep.\n    #\n \
    \   # Example Sieve Filter\n    # Declare any optional features or extension used\
    \ by the script\n    #\n    require [\"fileinto\", \"reject\"];\n    #\n    #\
    \ Reject any large messages (note that the four leading dots get\n    # \"stuffed\"\
    \ to three)\n    #\n    if size :over 1M\n            {\n            reject text:\n\
    \    Please do not send me large attachments.\n    Put your file on a server and\
    \ send me the URL.\n    Thank you.\n    .... Fred\n    .\n    ;\n            stop;\n\
    \            }\n    #\n    # Handle messages from known mailing lists\n    # Move\
    \ messages from IETF filter discussion list to filter folder\n    #\n    if header\
    \ :is \"Sender\" \"owner-ietf-mta-filters@imc.org\"\n            {\n         \
    \   fileinto \"filter\";  # move to \"filter\" folder\n            }\n    #\n\
    \    # Keep all messages to or from people in my company\n    #\n    elsif address\
    \ :domain :is [\"From\", \"To\"] \"example.com\"\n            {\n            keep;\
    \               # keep in \"In\" folder\n            }\n    #\n    # Try and catch\
    \ unsolicited email.  If a message is not to me,\n    # or it contains a subject\
    \ known to be spam, file it away.\n    #\n    elsif anyof (not address :all :contains\n\
    \                   [\"To\", \"Cc\", \"Bcc\"] \"me@example.com\",\n          \
    \       header :matches \"subject\"\n                   [\"*make*money*fast*\"\
    , \"*university*dipl*mas*\"])\n            {\n            # If message header\
    \ does not contain my address,\n            # it's from a list.\n            fileinto\
    \ \"spam\";   # move to \"spam\" folder\n            }\n    else\n           \
    \ {\n            # Move all other (non-company) mail to \"personal\"\n       \
    \     # folder.\n            fileinto \"personal\";\n            }\n"
- title: 10.     Security Considerations
  contents:
  - "10.     Security Considerations\n   Users must get their mail.  It is imperative\
    \ that whatever method\n   implementations use to store the user-defined filtering\
    \ scripts be\n   secure.\n   It is equally important that implementations sanity-check\
    \ the user's\n   scripts, and not allow users to create on-demand mailbombs. \
    \ For\n   instance, an implementation that allows a user to reject or redirect\n\
    \   multiple times to a single message might also allow a user to create\n   a\
    \ mailbomb triggered by mail from a specific user.  Site- or\n   implementation-defined\
    \ limits on actions are useful for this.\n   Several commands, such as \"discard\"\
    , \"redirect\", and \"fileinto\" allow\n   for actions to be taken that are potentially\
    \ very dangerous.\n   Implementations SHOULD take measures to prevent languages\
    \ from\n   looping.\n"
- title: 11.     Acknowledgments
  contents:
  - "11.     Acknowledgments\n   I am very thankful to Chris Newman for his support\
    \ and his ABNF\n   syntax checker, to John Myers and Steve Hole for outlining\
    \ the\n   requirements for the original drafts, to Larry Greenfield for nagging\n\
    \   me about the grammar and finally fixing it, to Greg Sereda for\n   repeatedly\
    \ fixing and providing examples, to Ned Freed for fixing\n   everything else,\
    \ to Rob Earhart for an early implementation and a\n   great deal of help, and\
    \ to Randall Gellens for endless amounts of\n   proofreading.  I am grateful to\
    \ Carnegie Mellon University where most\n   of the work on this document was done.\
    \  I am also indebted to all of\n   the readers of the ietf-mta-filters@imc.org\
    \ mailing list.\n"
- title: 12.     Author's Address
  contents:
  - "12.     Author's Address\n   Tim Showalter\n   Mirapoint, Inc.\n   909 Hermosa\
    \ Court\n   Sunnyvale, CA 94085\n   EMail: tjs@mirapoint.com\n"
- title: 13.  References
  contents:
  - "13.  References\n   [ABNF]      Crocker, D. and P. Overell, \"Augmented BNF for\
    \ Syntax\n               Specifications: ABNF\", RFC 2234, November 1997.\n  \
    \ [ACAP]      Newman, C. and J. G. Myers, \"ACAP -- Application\n            \
    \   Configuration Access Protocol\", RFC 2244, November 1997.\n   [BINARY-SI]\
    \ \"Standard IEC 60027-2: Letter symbols to be used in\n               electrical\
    \ technology - Part 2: Telecommunications and\n               electronics\", January\
    \ 1999.\n   [DSN]       Moore, K. and G. Vaudreuil, \"An Extensible Message Format\n\
    \               for Delivery Status Notifications\", RFC 1894, January\n     \
    \          1996.\n   [FLAMES]    Borenstein, N, and C. Thyberg, \"Power, Ease\
    \ of Use, and\n               Cooperative Work in a Practical Multimedia Message\n\
    \               System\", Int. J.  of Man-Machine Studies, April, 1991.\n    \
    \           Reprinted in Computer-Supported Cooperative Work and\n           \
    \    Groupware, Saul Greenberg, editor, Harcourt Brace\n               Jovanovich,\
    \ 1991.  Reprinted in Readings in Groupware and\n               Computer-Supported\
    \ Cooperative Work, Ronald Baecker,\n               editor, Morgan Kaufmann, 1993.\n\
    \   [KEYWORDS]  Bradner, S., \"Key words for use in RFCs to Indicate\n       \
    \        Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [IMAP]      Crispin,\
    \ M., \"Internet Message Access Protocol - version\n               4rev1\", RFC\
    \ 2060, December 1996.\n   [IMAIL]     Crocker, D., \"Standard for the Format\
    \ of ARPA Internet\n               Text Messages\", STD 11, RFC 822, August 1982.\n\
    \   [MIME]      Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n  \
    \             Extensions (MIME) Part One: Format of Internet Message\n       \
    \        Bodies\", RFC 2045, November 1996.\n   [MDN]       Fajman, R., \"An Extensible\
    \ Message Format for Message\n               Disposition Notifications\", RFC\
    \ 2298, March 1998.\n   [RFC1123]   Braden, R., \"Requirements for Internet Hosts\
    \ --\n               Application and Support\", STD 3, RFC 1123, November 1989.\n\
    \   [SMTP]      Postel, J., \"Simple Mail Transfer Protocol\", STD 10, RFC\n \
    \              821, August 1982.\n   [UTF-8]     Yergeau, F., \"UTF-8, a transformation\
    \ format of Unicode\n               and ISO 10646\", RFC 2044, October 1996.\n"
- title: 14. Full Copyright Statement
  contents:
  - "14. Full Copyright Statement\n   Copyright (C) The Internet Society (2001). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
