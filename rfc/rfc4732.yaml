- title: __initial_text__
  contents:
  - '               Internet Denial-of-Service Considerations

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides an overview of possible avenues for denial-\n\
    \   of-service (DoS) attack on Internet systems.  The aim is to encourage\n  \
    \ protocol designers and network engineers towards designs that are\n   more robust.\
    \  We discuss partial solutions that reduce the\n   effectiveness of attacks,\
    \ and how some solutions might inadvertently\n   open up alternative vulnerabilities.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. An Overview of Denial-of-Service Threats ........................4\n  \
    \    2.1. DoS Attacks on End-Systems .................................4\n    \
    \       2.1.1. Exploiting Poor Software Quality ....................4\n      \
    \     2.1.2. Application Resource Exhaustion .....................5\n        \
    \   2.1.3. Operating System Resource Exhaustion ................6\n          \
    \ 2.1.4. Triggered Lockouts and Quota Exhaustion .............7\n      2.2. DoS\
    \ Attacks on Routers .....................................8\n           2.2.1.\
    \ Attacks on Routers through Routing Protocols ........8\n           2.2.2. IP\
    \ Multicast-based DoS Attacks ......................9\n           2.2.3. Attacks\
    \ on Router Forwarding Engines ...............10\n      2.3. Attacks on Ongoing\
    \ Communications .........................11\n      2.4. Attacks Using the Victim's\
    \ Own Resources ..................12\n      2.5. DoS Attacks on Local Hosts or\
    \ Infrastructure ..............12\n      2.6. DoS Attacks on Sites through DNS\
    \ ..........................15\n      2.7. DoS Attacks on Links ......................................16\n\
    \      2.8. DoS Attacks on Firewalls ..................................17\n  \
    \    2.9. DoS Attacks on IDS Systems ................................18\n    \
    \  2.10. DoS Attacks on or via NTP ................................18\n      2.11.\
    \ Physical DoS .............................................18\n      2.12. Social\
    \ Engineering DoS ...................................19\n      2.13. Legal DoS\
    \ ................................................19\n      2.14. Spam and Black-Hole\
    \ Lists ................................19\n   3. Attack Amplifiers ..............................................20\n\
    \      3.1. Methods of Attack Amplification ...........................20\n  \
    \    3.2. Strategies to Mitigate Attack Amplification ...............22\n   4.\
    \ DoS Mitigation Strategies ......................................22\n      4.1.\
    \ Protocol Design ...........................................23\n           4.1.1.\
    \ Don't Hold State for Unverified Hosts ..............23\n           4.1.2. Make\
    \ It Hard to Simulate a Legitimate User .........23\n           4.1.3. Graceful\
    \ Routing Degradation .......................24\n           4.1.4. Autoconfiguration\
    \ and Authentication ...............24\n      4.2. Network Design and Configuration\
    \ ..........................25\n           4.2.1. Redundancy and Distributed Service\
    \ .................25\n           4.2.2. Authenticate Routing Adjacencies ...................25\n\
    \           4.2.3. Isolate Router-to-Router Traffic ...................26\n  \
    \    4.3. Router Implementation Issues ..............................26\n    \
    \       4.3.1. Checking Protocol Syntax and Semantics .............26\n      \
    \     4.3.2. Consistency Checks .................................27\n        \
    \   4.3.3. Enhance Router Robustness through\n                  Operational Adjustments\
    \ ............................28\n           4.3.4. Proper Handling of Router\
    \ Resource Exhaustion ......28\n      4.4. End-System Implementation Issues ..........................29\n\
    \           4.4.1. State Lookup Complexity ............................29\n  \
    \         4.4.2. Operational Issues .................................30\n   5.\
    \ Conclusions ....................................................30\n   6. Security\
    \ Considerations ........................................31\n   7. Acknowledgements\
    \ ...............................................31\n   8. Normative References\
    \ ...........................................31\n   9. Informative References\
    \ .........................................32\n   Appendix A. IAB Members at the\
    \ Time of This Writing ...............36\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A Denial-of-Service (DoS) attack is an attack in which one\
    \ or more\n   machines target a victim and attempt to prevent the victim from\
    \ doing\n   useful work.  The victim can be a network server, client or router,\
    \ a\n   network link or an entire network, an individual Internet user or a\n\
    \   company doing business using the Internet, an Internet Service\n   Provider\
    \ (ISP), country, or any combination of or variant on these.\n   Denial-of-service\
    \ attacks may involve gaining unauthorized access to\n   network or computing\
    \ resources, but for the most part in this\n   document we focus on the cases\
    \ where the denial-of-service attack\n   itself does not involve a compromise\
    \ of the victim's computing\n   facilities.\n   Because of the closed context\
    \ of the original ARPANET and NSFNet, no\n   consideration was given to denial-of-service\
    \ attacks in the original\n   Internet Architecture.  As a result, almost all\
    \ Internet services are\n   vulnerable to denial-of-service attacks of sufficient\
    \ scale.  In most\n   cases, sufficient scale can be achieved by compromising\
    \ enough end-\n   hosts (typically using a virus or worm) or routers, and using\
    \ those\n   compromised hosts to perpetrate the attack.  Such an attack is known\n\
    \   as a Distributed Denial-of-Service (DDoS) attack.  However, there are\n  \
    \ also many cases where a single well-connected end-system can\n   perpetrate\
    \ a successful DoS attack.\n   This document is intended to serve several purposes:\n\
    \   o To highlight possible avenues for attack, and by so doing encourage\n  \
    \   protocol designers and network engineers towards designs that are\n     more\
    \ robust.\n   o To discuss partial solutions that reduce the effectiveness of\n\
    \     attacks.\n   o To highlight how some partial solutions can be taken advantage\
    \ of\n     by attackers to perpetrate alternative attacks.\n   This last point\
    \ appears to be a recurrent theme in DoS, and\n   highlights the lack of proper\
    \ architectural solutions.  It is our\n   hope that this document will help initiate\
    \ informed debate about\n   future architectural solutions that might be feasible\
    \ and cost-\n   effective for deployment.\n   In addition, it is our hope that\
    \ this document will spur discussion\n   leading to architectural solutions that\
    \ reduce the susceptibility of\n   all Internet systems to denial-of-service attacks.\n\
    \   We note that in principle it is not possible to distinguish between a\n  \
    \ sufficiently subtle DoS attack and a flash crowd (where unexpected\n   heavy\
    \ but non-malicious traffic has the same effect as a DoS attack).\n   Whilst this\
    \ is true, such malicious attacks are usually more\n   expensive to launch than\
    \ many of the crude attacks that have been\n   seen to date.  Thus, defending\
    \ against DoS is not about preventing\n   all possible attacks, but rather is\
    \ largely a question of raising the\n   bar sufficiently high for malicious traffic.\n\
    \   However, it is also important to note that not all DoS problems are\n   malicious.\
    \  Failed links, flash crowds, misconfigured bots, and\n   numerous other causes\
    \ can result in resource exhaustion problems, and\n   so the overall goal should\
    \ be to be robust to all forms of overload.\n"
- title: 2.  An Overview of Denial-of-Service Threats
  contents:
  - "2.  An Overview of Denial-of-Service Threats\n   In this section, we will discuss\
    \ a wide range of possible DoS\n   attacks.  This list cannot be exhaustive, but\
    \ the intent is to\n   provide a good overview of the spectrum of possibilities\
    \ that need to\n   be defended against.\n   We do not provide descriptions of\
    \ any attacks that are not already\n   publicly well documented.\n"
- title: 2.1.  DoS Attacks on End-Systems
  contents:
  - "2.1.  DoS Attacks on End-Systems\n   We first discuss attacks on end-systems.\
    \  An end-system in this\n   context is typically a PC or network server, but\
    \ it can also include\n   any communication endpoint.  For example, a router also\
    \ is an end-\n   system from the point of view of terminating TCP connections\
    \ for BGP\n   [10] or ssh [46].\n"
- title: 2.1.1.  Exploiting Poor Software Quality
  contents:
  - "2.1.1.  Exploiting Poor Software Quality\n   The simplest DoS attacks on end-systems\
    \ exploit poor software quality\n   on the end-systems themselves, and cause that\
    \ software to simply\n   crash.  For example, buffer-overflow attacks might be\
    \ used to\n   compromise the end-system, but even if the buffer-overflow cannot\
    \ be\n   used to gain access, it will usually be possible to overwrite memory\n\
    \   and cause the software to crash.  Such vulnerabilities can in\n   principle\
    \ affect any software that uses data supplied from the\n   network.  Thus, not\
    \ only might a web server be potentially\n   vulnerable, but it might also be\
    \ possible to crash the back-end\n   software (such as a database) to which a\
    \ web server provides data.\n   Software crashes due to poor coding affect not\
    \ only application\n   software, but also the operating system kernel itself.\
    \  A classic\n   example is the so-called \"ping of death\", which became widely\
    \ known\n   in 1996 [21].  This exploit caused many popular operating systems\
    \ to\n   crash when sent a single fragmented ICMP echo request packet whose\n\
    \   fragments totaled more than the 65535 bytes allowed in an IPv4\n   packet.\n\
    \   While DoS attacks such as the ping of death are a significant\n   problem,\
    \ they are not a significant architectural problem.  Once such\n   an attack is\
    \ discovered, the relevant code can easily be patched, and\n   the problem goes\
    \ away.  We should note though that as more and more\n   software becomes embedded,\
    \ it is important not to lose the\n   possibility of upgrading the software in\
    \ such systems.\n"
- title: 2.1.2.  Application Resource Exhaustion
  contents:
  - "2.1.2.  Application Resource Exhaustion\n   Network applications exist in a context\
    \ that has finite resources.\n   In processing network traffic, such an application\
    \ uses these\n   resources to do its intended task.  However, an attacker may\
    \ be able\n   to prevent the application from performing its intended task by\n\
    \   causing the application to exhaust the finite supply of a specific\n   resource.\n\
    \   The obvious resources that might be exhausted include:\n   o Available memory.\n\
    \   o The CPU cycles available.\n   o The disk space available to the application.\n\
    \   o The number of processes or threads or both that the application is\n   \
    \  permitted to use.\n   o The configured maximum number of simultaneous connections\
    \ the\n     application is permitted.\n   This list is clearly not exhaustive,\
    \ but it illustrates a number of\n   points.\n   Some resources are self-renewing:\
    \ CPU cycles fall in this category --\n   if the attack ceases, more CPU cycles\
    \ become available.\n   Some resources such as disk space require an explicit\
    \ action to free\n   up -- if the application cannot do this automatically then\
    \ the\n   effects of the attack may be persistent after the attack has ceased.\n\
    \   This problem has been understood for many years, and it is common\n   practice\
    \ for logs and incoming email to be stored in a separate disk\n   partition (/var\
    \ on Unix systems) in order to limit the impact of\n   exhaustion.\n   Some resources\
    \ are constrained by configuration: the maximum number\n   of processes and the\
    \ maximum number of simultaneous connections are\n   not normally hard limits,\
    \ but rather are configured limits.  The\n   purpose of such limits is clearly\
    \ to allow the machine to perform\n   other tasks in the event the application\
    \ misbehaves.  However, great\n   care needs to be taken to choose such limits\
    \ appropriately.  For\n   example, if a machine's sole task is to be an FTP server,\
    \ then\n   setting the maximum number of simultaneous connections to be\n   significantly\
    \ less than the machine can service makes the attacker's\n   job easier.  But\
    \ setting the limit too high may permit the attacker\n   to cause the machine\
    \ to crash (due to poor OS design in handling\n   resource exhaustion) or permit\
    \ livelock (see below), which are\n   generally even less desirable failure modes.\n"
- title: 2.1.3.  Operating System Resource Exhaustion
  contents:
  - "2.1.3.  Operating System Resource Exhaustion\n   Conceptually, OS resource exhaustion\
    \ and application resource\n   exhaustion are very similar.  However, in the case\
    \ of application\n   resource exhaustion, the operating system may be able to\
    \ protect\n   other tasks from being affected by the DoS attack.  In the case\
    \ of\n   the operating system itself running out of resources, the problem may\n\
    \   be more catastrophic.\n   Perhaps the best-known DoS attack on an operating\
    \ system is the TCP\n   SYN-flood [19], which is essentially a memory-exhaustion\
    \ attack.  The\n   attacker sends a flood of TCP SYN packets to the victim, requesting\n\
    \   connection setup, but then does not complete the connection setup.\n   The\
    \ victim instantiates state to handle the incoming connections.  If\n   the attacker\
    \ can instantiate state faster than the victim times it\n   out, then the victim\
    \ will run out of memory that it can use to hold\n   TCP state, and so it cannot\
    \ service legitimate TCP connection setup\n   attempts.  This issue was exacerbated\
    \ in some implementations by the\n   use of a small dedicated storage space for\
    \ half-open connections,\n   which made the attack easier than it might otherwise\
    \ have been.  In\n   the case of a poorly coded operating system, running out\
    \ of resources\n   may also cause a system crash.\n   An alternative TCP DoS attack\
    \ is the Ack-flood [23], which is\n   essentially a CPU exhaustion attack on the\
    \ victim.  The attacker\n   floods the victim with TCP packets pretending to be\
    \ from connections\n   that have never been established.  A busy server that has\
    \ a large\n   number of outstanding connections needs to check which connection\
    \ the\n   packet corresponds to.  Some TCP implementations implemented this\n\
    \   search rather inefficiently, and so the attacker could use all the\n   victim's\
    \ CPU resources servicing these packets rather than servicing\n   legitimate requests.\n\
    \   We note that strong authentication mechanisms do not necessarily\n   mitigate\
    \ against such CPU exhaustion attacks.  In fact, poorly\n   designed authentication\
    \ mechanisms using cryptographic methods can\n   exacerbate the problem.  If such\
    \ an authentication mechanism allows\n   an attacker to present a packet to the\
    \ victim that requires\n   relatively expensive cryptographic authentication before\
    \ the packet\n   can be discarded, then this makes the attacker's CPU exhaustion\n\
    \   attack easier.\n   CPU exhaustion attacks can be also be exacerbated by poor\
    \ OS handling\n   of incoming network traffic.  In the absence of malicious traffic,\
    \ an\n   ideal OS should behave as follows:\n   o As incoming traffic increases,\
    \ the useful work done by the OS\n     should increase until some resource (such\
    \ as the CPU) is saturated.\n   o From this point on, as incoming traffic continues\
    \ to increase the\n     useful work done should be constant.\n   However, this\
    \ is often not the case.  Many systems suffer from\n   livelock [33] where, after\
    \ saturation, increasing the load causes a\n   decrease in the useful work done.\
    \  One cause of this is that the\n   system spends an increasing amount of time\
    \ processing network\n   interrupts for packets that will never be processed,\
    \ and hence a\n   decreasing amount of time is available for the application for\
    \ which\n   these packets were intended.\n"
- title: 2.1.4.  Triggered Lockouts and Quota Exhaustion
  contents:
  - "2.1.4.  Triggered Lockouts and Quota Exhaustion\n   Many user-authentication\
    \ mechanisms attempt to protect against\n   password guessing attacks by locking\
    \ the user out after a small\n   number of failed authentications.  If an attacker\
    \ can guess or\n   discover a user's ID, they may be able to trigger such a mechanism,\n\
    \   locking out the legitimate user.\n   Another way to deny service using protection\
    \ mechanisms is to cause a\n   quota to be exhausted.  This is perhaps most common\
    \ in the case of\n   small web servers being commercially hosted, where the server\
    \ has a\n   contract with the hosting company allowing a fixed amount of traffic\n\
    \   per day.  An attacker may be able to rapidly exhaust this quota, and\n   cause\
    \ service to be suspended.  Similar attacks may be possible\n   against other\
    \ forms of quota.\n   In the absence of such quotas, if the victim is charged\
    \ for their\n   network traffic, a financial denial-of-service may be possible.\n"
- title: 2.2.  DoS Attacks on Routers
  contents:
  - "2.2.  DoS Attacks on Routers\n   Many of the denial-of-service attacks that can\
    \ be launched against\n   end-systems can also be launched against the control\
    \ processor of an\n   IP router, for example, by flooding the command and control\
    \ access\n   ports.  In the case of a router, these attacks may cause the router\n\
    \   to stall, or may cause the router to cease processing routing\n   packets.\
    \  Even if the router does not stop servicing routing packets,\n   it may become\
    \ sufficiently slow that routing protocols time out.  In\n   any of these circumstances,\
    \ the consequence of routing failure is not\n   only that the router ceases to\
    \ forward traffic, but also that it\n   causes routing protocol churn that may\
    \ have further side effects.\n   An example of such a side effect is caused by\
    \ BGP route flap damping\n   [11], which is intended to reduce global routing\
    \ churn.  If an\n   attacker can cause BGP routing churn, route flap damping may\
    \ then\n   cause the flapping routes to be suppressed [31].  This suppression\n\
    \   likely causes the networks served by those routes to become\n   unreachable.\n\
    \   A DoS attack on the router control processor might also prevent the\n   router\
    \ from being managed effectively.  This may prevent actions\n   being taken that\
    \ would mitigate the DoS attack, and it might prevent\n   diagnosis of the cause\
    \ of the problem.\n"
- title: 2.2.1.  Attacks on Routers through Routing Protocols
  contents:
  - "2.2.1.  Attacks on Routers through Routing Protocols\n   In addition to their\
    \ roles as end-systems, most routers run dynamic\n   routing protocols.  The routing\
    \ protocols themselves can be used to\n   stage a DoS attack on a router or a\
    \ network of routers.  This\n   requires the ability to send traffic from addresses\
    \ that might\n   plausibly have generated the relevant routing messages, which\
    \ is\n   somewhat difficult with interior routing protocols but fairly easy\n\
    \   with External Border Gateway Protocol (eBGP), for instance.\n   The simplest\
    \ attack on a network of routers is to overload the\n   routing table with sufficiently\
    \ many routes that the router runs out\n   of memory, or the router has insufficient\
    \ CPU power to process the\n   routes [26].  We note that depending on the distribution\
    \ and\n   capacities of various routers around the network, such an attack\n \
    \  might not overwhelm routers near to the attacking router, but might\n   cause\
    \ problems to show up elsewhere in the network.\n   Some routing protocol implementations\
    \ allow limits to be configured\n   on the maximum number of routes to be heard\
    \ from a neighbor [27].\n   However, limits often make the problem worse rather\
    \ than better, by\n   making it possible for the attacker to push out legitimate\
    \ routes\n   with spoofed routes, thus creating an easy form of DoS attack.\n\
    \   An alternative attack is to overload the routers on the network by\n   creating\
    \ sufficient routing table churn that routers are unable to\n   process the changes.\
    \  Many routing protocols allow damping factors to\n   be configured to avoid\
    \ just such a problem.  However, as with table\n   size, such a threshold applied\
    \ inconsistently may allow the spoofed\n   routes to merge with legitimate routes\
    \ before the mechanism is\n   applied, causing legitimate routes to be damped.\n\
    \   The simplest routing attack on a specific destination is for an\n   attacker\
    \ to announce a spoofed desirable route to that destination.\n   Such a route\
    \ might be desirable because it has low metric, or because\n   it is a more specific\
    \ route than the legitimate route.  In any event,\n   if the route is believed,\
    \ it will cause traffic for the victim to be\n   drawn towards the attacking router,\
    \ where it will typically be\n   discarded.\n   A more subtle denial-of-service\
    \ attack might be launched against a\n   network rather than against a destination.\
    \  Under some circumstances,\n   the propagation of inconsistent routing information\
    \ can cause traffic\n   to loop.  If an attacker can cause this to happen on a\
    \ busy path, the\n   looping traffic might cause significant congestion, as well\
    \ as fail\n   to reach the legitimate destination.\n   In the past, there have\
    \ been cases where different generations of\n   routers interpreted a routing\
    \ protocol specification differently.  In\n   particular, BGP specifies that in\
    \ the case of an error, the BGP\n   peering should be dropped.  However, if some\
    \ of the routers in a\n   network treat a particular route as valid and other\
    \ routers treat the\n   route as invalid, then it may be possible to inject a\
    \ BGP route at\n   one point in the Internet and cause peerings to be dropped\
    \ at many\n   other places in the Internet.  Unlike many of the examples above,\n\
    \   while such an issue might be a serious short-term problem, this is\n   not\
    \ a fundamental architectural problem.  Once the problem is\n   understood, deploying\
    \ patched routing code can permanently solve the\n   issue.\n"
- title: 2.2.2.  IP Multicast-based DoS Attacks
  contents:
  - "2.2.2.  IP Multicast-based DoS Attacks\n   There are essentially two forms of\
    \ IP multicast: traditional Any-\n   Source Multicast (ASM), as specified in RFC\
    \ 1112 [4] where multiple\n   sources can send to the same multicast group, and\
    \ Source-Specific\n   Multicast (SSM) where the receiver must specify both the\
    \ IP source\n   address and the group address.  The two forms of multicast provide\n\
    \   rather different DoS possibilities.\n   ASM protocols such as PIM-SM [6],\
    \ MSDP [32], and DVMRP [12] typically\n   cause some routers to instantiate routing\
    \ state at the time a packet\n   is sent to a multicast group.  They do this to\
    \ ensure that the\n   traffic goes to the group receivers and not to non-receivers.\
    \  Such\n   protocols are particularly vulnerable to DoS attacks, as an attacker\n\
    \   that sends to many multicast groups may cause both multicast routing\n   table\
    \ explosion (and hence control processor memory exhaustion) and\n   multicast\
    \ forwarding table exhaustion (and hence forwarding card\n   memory exhaustion\
    \ or thrashing).\n   ASM also permits an attacker to send traffic to the same\
    \ group as\n   legitimate traffic, potentially causing network congestion and\n\
    \   denying service to the legitimate group.\n   SSM does not permit senders to\
    \ send to arbitrary groups unless a\n   receiver has requested the traffic.  Thus,\
    \ sender-based attacks on\n   multicast routing state are not possible with SSM.\
    \  However, as with\n   ASM, a receiver can still join a large number of multicast\
    \ groups\n   causing routers to hold a large amount of multicast routing state,\n\
    \   potentially causing memory exhaustion and hence denial-of-service to\n   legitimate\
    \ traffic.\n   With IPv6, hosts are required to send ICMP Packet Too Big or\n\
    \   Parameter Problem messages under certain circumstances, even if the\n   destination\
    \ address is a multicast address.  If the attacker can\n   place himself in the\
    \ appropriate position in the multicast tree, a\n   packet with an unknown but\
    \ mandatory Destination Option, for\n   instance, could generate a very large\
    \ number of responses to the\n   claimed sender.\n   With IPv4, the same problem\
    \ exists with multicast ICMP Echo Request\n   packets, but these are somewhat\
    \ easier to filter.\n   The examples above should not be taken as exhaustive.\
    \  These are\n   actually specific cases of a general problem that can happen\
    \ when a\n   multicast/broadcast request solicits a reply from a large number\
    \ of\n   nodes.\n"
- title: 2.2.3.  Attacks on Router Forwarding Engines
  contents:
  - "2.2.3.  Attacks on Router Forwarding Engines\n   Router vendors implement many\
    \ different mechanisms for packet\n   forwarding, but broadly speaking they fall\
    \ into two categories: ones\n   that use a forwarding cache, and ones that do\
    \ not.  With a forwarding\n   cache, the forwarding engine does not hold the full\
    \ routing table,\n   but rather holds just the currently active subset of the\
    \ forwarding\n   table.\n   Many modern routers use a loosely coupled architecture,\
    \ where one or\n   more control processors handle the routing protocols and communicate\n\
    \   over an internal network link to special-purpose forwarding engines,\n   which\
    \ actually forward the data traffic.  In such architectures, it\n   may be possible\
    \ for an attacker to overwhelm the communications link\n   between the control\
    \ processor and the forwarding engine.  This is\n   possible because the forwarding\
    \ engines support very high speed\n   links, and the control processor simply\
    \ cannot handle a similar rate\n   of traffic.\n   There may be many ways in which\
    \ an attacker can trigger communication\n   between the forwarding engines and\
    \ the control processor.  The\n   simplest way is for the attacker to simply send\
    \ to the router's IP\n   address, but this should in principle be relatively easy\
    \ to prevent\n   using filtering on the forwarding engines.  Another way might\
    \ be to\n   cause the router to forward data packets using the \"slow path\".\
    \  This\n   involves sending packets that require special attention from the\n\
    \   forwarding router; if the forwarding engine is not smart enough to\n   perform\
    \ such forwarding, then it will typically pass the packet to\n   the control processor.\
    \  In a router using a forwarding cache, it may\n   be possible to overload the\
    \ internal communications by thrashing the\n   forwarding cache.  Finally, any\
    \ form of data-triggered communication\n   between the forwarding engine and the\
    \ control processor might cause\n   such a problem.  Certain multicast routing\
    \ protocols including PIM-SM\n   contain many such data triggered events that\
    \ could potentially be\n   problematic.\n   The effects of overloading such internal\
    \ communications are hard to\n   predict and are very implementation-dependent.\
    \  One possible effect\n   might be that the forwarding table in the forwarding\
    \ engine gets out\n   of synchronization with the routing table in the control\
    \ processor\n   that reflects what the routing protocols believe is happening.\
    \  This\n   might cause traffic to be dropped or to loop.\n   Finally, if an attacker\
    \ can generate traffic that causes a router to\n   auto-install access control\
    \ list (ACL) entries, perhaps by triggering\n   a response from an intrusion detection\
    \ system, then it may be\n   possible to exhaust the ACL resources on the router.\
    \  This might\n   prevent future attacks from being filtered, or worse, cause\
    \ ACL\n   processing to be handled by the route processor.\n"
- title: 2.3.  Attacks on Ongoing Communications
  contents:
  - "2.3.  Attacks on Ongoing Communications\n   Instead of attacking the end-system\
    \ itself, it is also possible for\n   an attacker to disrupt ongoing communications.\
    \  If an attacker can\n   observe a TCP connection, then it is relatively easy\
    \ for them to\n   spoof packets to either reset that connection or to de-synchronize\
    \ it\n   so that no further progress can be made [29].  Such attacks are not\n\
    \   prevented by transport or application-level security mechanisms such\n   as\
    \ TLS [5] or ssh, because the authentication takes place after TCP\n   has finished\
    \ processing the packets.\n   If an attacker cannot observe a TCP connection,\
    \ but can infer that\n   such a connection exists, it is theoretically possible\
    \ to reset or\n   de-synchronize that connection by spoofing packets into the\n\
    \   connection.  However, this might require an excessively large number\n   of\
    \ spoofed packets to guess both the port of the active end of the\n   TCP connection\
    \ (in most cases, the port of the passive end is\n   predictable) and the currently\
    \ valid TCP sequence numbers.  However,\n   as some operating systems have poorly\
    \ implemented predictable\n   algorithms for selecting either the dynamically\
    \ selected port or the\n   TCP initial sequence number [41] [20], then such attacks\
    \ have been\n   found to be feasible [34].  Advice as to how to reduce the\n \
    \  vulnerability in the specific case of TCP is available in [37].\n   An attacker\
    \ might be able to significantly reduce the throughput of a\n   connection by\
    \ sending spoofed ICMP source quench packets, although\n   most modern operating\
    \ systems should ignore such packets.  However,\n   care should be taken in the\
    \ design of future transport and signaling\n   protocols to avoid the introduction\
    \ of similar mechanisms that could\n   be exploited.\n"
- title: 2.4.  Attacks Using the Victim's Own Resources
  contents:
  - "2.4.  Attacks Using the Victim's Own Resources\n   Instead of directly overloading\
    \ the victim, it may be possible to\n   cause the victim or a machine on the same\
    \ subnet as the victim to\n   overload itself.\n   An example of such an attack\
    \ is documented in [18], where the\n   attacker spoofs the source address on a\
    \ packet sent to the victim's\n   UDP echo port.  The source address is that of\
    \ another machine that is\n   running a UDP chargen server (a chargen server sends\
    \ a character\n   pattern back to the originating source).  The result is that\
    \ the two\n   machines bounce packets back and forth as fast as they can,\n  \
    \ overloading either the network between them or one of the end-systems\n   itself.\n"
- title: 2.5.  DoS Attacks on Local Hosts or Infrastructure
  contents:
  - "2.5.  DoS Attacks on Local Hosts or Infrastructure\n   There are a number of\
    \ attacks that might only be performed by a local\n   attacker.\n   An attacker\
    \ with access to a subnet may be able to prevent other\n   local hosts from accessing\
    \ the network at all by simply exhausting\n   the address pool allocated by a\
    \ Dynamic Host Configuration Protocol\n   (DHCP) server.  This requires being\
    \ able to spoof the MAC address of\n   an ethernet or wireless card, but this\
    \ is quite feasible with certain\n   hardware and operating systems.\n   An alternative\
    \ DHCP-based attack is simply to respond faster than the\n   legitimate DHCP server,\
    \ and to give out an address that is not useful\n   to the victim.\n   These sorts\
    \ of bootstrapping attacks tend to be difficult to avoid\n   because most of the\
    \ time trust relationships are established after IP\n   communication has already\
    \ been established.\n   Similar attacks are possible through ARP spoofing [16];\
    \ an attacker\n   can respond to ARP requests before the victim and prevent traffic\n\
    \   from reaching the victim.  Some brands of ethernet switch allow an\n   even\
    \ simpler attack: simply send from the victim's MAC address, and\n   the switch\
    \ will redirect traffic destined for the victim to the\n   attacker's port.  This\
    \ attack might also potentially be used to block\n   traffic from the victim by\
    \ engaging screening or flap-dampening\n   algorithms in the switch, depending\
    \ on the switch design.\n   It may be possible to cause broadcast storms [16]\
    \ on a local LAN by\n   sending a stream of unicast IP packets to the broadcast\
    \ MAC address.\n   Some hosts on the LAN may then attempt to forward the packets\
    \ to the\n   correct MAC address, greatly amplifying the traffic on the LAN.\n\
    \   802.11 wireless networks provide many opportunities to deny service\n   to\
    \ other users.  In some cases, the lack of defenses against DoS was\n   a deliberate\
    \ choice--because 802.11 operates on unlicensed spectrum\n   it was assumed that\
    \ there would be sources of interference and that\n   producing intentional radio-level\
    \ jamming would be trivial.  Thus,\n   the amount of DoS protection possible at\
    \ higher levels was minimal.\n   Nevertheless, some of the weaknesses of the protocols\
    \ against more\n   sophisticated attacks are worth noting.  The most prominent\
    \ of these\n   is that association is unprotected, thus allowing rogue access\
    \ points\n   (APs) to solicit notifications that would otherwise have gone to\n\
    \   legitimate APs.\n   The SSID field provides effectively no defense against\
    \ this kind of\n   attack.  Unless encryption is enabled, it is trivial to announce\
    \ the\n   presence of a base station (or even of an ad-hoc mode host) with the\n\
    \   same network name (SSID) as the legitimate basestation.  Even adding\n   authentication\
    \ and encryption a la 802.1X and 802.11i may not help\n   much in this respect.\
    \  The SSID space is unmanaged, so everyone is\n   free to put anything they want\
    \ in the SSID field.  Most host stacks\n   don't deal gracefully with this.  Moreover,\
    \ SSIDs are very often set\n   to the manufacturer's default, making them highly\
    \ predictable.\n   Some 802.11 basestations have limited memory for the number\
    \ of\n   associations they can support.  If this is exceeded, they may drop\n\
    \   all associations.  In an attempt to forestall this problem, some APs\n   advertise\
    \ their load so as to enable stations to choose APs that are\n   less loaded.\
    \  However, crude implementations of these algorithms can\n   result in instability.\n\
    \   Finally, as the authentication in 802.11 takes place at a\n   comparatively\
    \ high level in the stack, it is possible to simply\n   deauthenticate or disassociate\
    \ the victim from the basestation, even\n   if Wired Equivalent Privacy (WEP)\
    \ is in use [30].  Bellardo and\n   Savage [15] describe some simple remedies\
    \ that reduce the\n   effectiveness of such attacks.  While IEEE 802.11w will\
    \ protect\n   Deauthenticate or Disassociate frames, this attack is still possible\n\
    \   via forging of Association frames.\n   What all these attacks have in common\
    \ is that they exploit\n   vulnerabilities in the link auto-configuration mechanisms.\
    \  In a\n   wireless network, it is necessary for a station to detect the\n  \
    \ presence of APs in order to choose which one to connect to.  In\n   802.11,\
    \ this is handled via the Beacon and Probe Request/Response\n   mechanisms.\n\
    \   Beacons cannot easily be encrypted, because the station needs to\n   utilize\
    \ them prior to authentication in order to discover which APs\n   it may wish\
    \ to communicate with.  Since authentication can only occur\n   after interpreting\
    \ the Beacon, an encrypted Beacon would present a\n   chicken-egg problem: you\
    \ can't obtain a key to decrypt the Beacon\n   until completing authentication,\
    \ and you may not be able to figure\n   out which AP to authenticate with prior\
    \ to decrypting the Beacon.\n   Note that in principle you could encrypt Beacons\
    \ with a shared\n   (per-AP) key but this would require each station to trial-decrypt\n\
    \   beacons until it finds one that matches up to whatever shared\n   authentication\
    \ secret it had.  This is not particularly convenient.\n   As a result, discussions\
    \ of Beacon frame security have largely\n   focused on authentication of Beacon\
    \ frames, not encryption.  Even\n   here, solutions are difficult.  While it may\
    \ be possible for a\n   station to validate a Beacon *after* authentication (either\
    \ by\n   checking a Message Integrity Check (MIC) computed with the group key\n\
    \   provided by the AP or verifying the Beacon parameters during the\n   4-way\
    \ handshake), doing so *before* authentication may require\n   synchronization\
    \ of keys between APs within an SSID.\n"
- title: 2.6.  DoS Attacks on Sites through DNS
  contents:
  - "2.6.  DoS Attacks on Sites through DNS\n   In today's Internet, DNS is of sufficient\
    \ importance that if access\n   to a site's DNS servers is denied, the site is\
    \ effectively\n   unreachable, even if there is no actual communication problem\
    \ with\n   the site itself.\n   Many of the attacks on end-systems described above\
    \ can be perpetrated\n   on DNS servers.  As servers go, DNS servers are not particularly\n\
    \   vulnerable to DoS.  So long as a DNS server has sufficient memory, a\n   modern\
    \ host can usually respond very rapidly to DNS requests for\n   which it is authoritative.\
    \  This was demonstrated in October 2002\n   when the root nameservers were subjected\
    \ to a very large DoS attack\n   [38].  A number of the root nameservers have\
    \ since been replicated\n   using anycast [1] to further improve their resistance\
    \ to DoS.\n   However, it is important for authoritative servers to have relaying\n\
    \   disabled, or it is possible for an attacker to force the DNS servers\n   to\
    \ hold state [40].\n   Many of the routing attacks can also be used against DNS\
    \ servers by\n   targeting the routing for the server.  If the DNS server is co-\n\
    \   located with the site for which is authoritative, then the fact that\n   the\
    \ DNS server is also unavailable is of secondary importance.\n   However, if all\
    \ the DNS servers are made unavailable, this may cause\n   email to that site\
    \ to bounce rather than being stored while the mail\n   servers are unreachable,\
    \ so distribution of DNS server locations is\n   important.\n   Causing network\
    \ congestion on links to and from a DNS server can have\n   similar effects to\
    \ end-system attacks or routing attacks, causing DNS\n   to fail to obtain an\
    \ answer, and effectively denying access to the\n   site being served.\n   We\
    \ note that if an attacker can deny external access to all the DNS\n   servers\
    \ for a site, this will not only cause email to that site to be\n   dropped, but\
    \ it will also cause email from that site to be dropped.\n   This is because recent\
    \ versions of mail transfer agents such as\n   sendmail will drop email if the\
    \ mail originates from a domain that\n   does not exist.  This is a classic example\
    \ of unexpected\n   consequences.  Sendmail performs this check as an anti-spam\
    \ measure,\n   and spam itself can be viewed as a form of DoS attack.  Thus,\n\
    \   defending against one DoS attack opens up the vulnerability that\n   allows\
    \ another DoS attack.  If a receiving implementation is using a\n   black-hole\
    \ list (see Section 2.14) served by DNS, an attacker can\n   also mount a DoS\
    \ attack by attacking the black-hole server.\n   Finally, a data corruption attack\
    \ is possible if a site's nameserver\n   is permitted to relay requests from untrusted\
    \ third parties [40].\n   The attacker issues a query for the data he wishes to\
    \ corrupt, and\n   the victim's nameserver relays the request to the authoritative\n\
    \   nameserver.  The request contains a 16-bit ID that is used to match\n   up\
    \ the response with the request.  If the attacker spoofs sufficient\n   response\
    \ packets from the authoritative nameserver just before the\n   official response\
    \ arrives, each containing a forged response and a\n   different DNS ID, then\
    \ there is a reasonable chance that one of the\n   forged responses will have\
    \ the correct DNS ID.  The incorrect data\n   will then be believed and cached\
    \ by the victim's nameserver, so\n   giving the incorrect response to future queries.\
    \  The probability of\n   the attack can further be increased if the attacker\
    \ issues many\n   different requests for the same data with different DNS IDs,\
    \ because\n   many nameserver implementations will issue relayed requests with\n\
    \   different DNS IDs, and so the response only has to match any one of\n   these\
    \ request IDs [17] [36].\n   The use of anycast for DNS services makes it even\
    \ more vulnerable to\n   spoofing attacks.  An attacker who can convince the ISP\
    \ to accept an\n   anycast route to his fake DNS server can arrange to receive\
    \ requests\n   and generate fake responses.  Anycast DNS also makes DoS attacks\
    \ on\n   DNS easier.  The idea is to disable one of the DNS servers while\n  \
    \ maintaining the BGP route to that server.  This creates failures for\n   any\
    \ client that is routed to the (now defunct) server.\n"
- title: 2.7.  DoS Attacks on Links
  contents:
  - "2.7.  DoS Attacks on Links\n   The simplest DoS attack is to simply send enough\
    \ non-congestion-\n   controlled traffic such that a link becomes excessively\
    \ congested,\n   and legitimate traffic suffers unacceptably high packet loss.\n\
    \   Under some circumstances, the effect of such a link DoS can be much\n   more\
    \ extensive.  We have already discussed the effects of denying\n   access to a\
    \ DNS server.  Congesting a link might also cause a routing\n   protocol to drop\
    \ an adjacency if sufficient routing packets are lost,\n   potentially greatly\
    \ amplifying the effects of the attack.  Good\n   router implementations will\
    \ prioritize the transmission of routing\n   packets, but this is not a total\
    \ panacea.  If routers are peered\n   across a shared medium such as ethernet,\
    \ it may be possible to\n   congest the medium sufficiently that routing packets\
    \ are still lost.\n   Even if a link DoS does not cause routing packets to be\
    \ lost, it may\n   prevent remote access to a router using ssh or Simple Network\n\
    \   Management Protocol (SNMP) [48].  This might make the router\n   unmanageable,\
    \ or prevent the attack from being correctly diagnosed.\n   The prioritization\
    \ of routing packets can itself cause a DoS problem.\n   If the attacker can cause\
    \ a large amount of routing flux, it may be\n   possible for a router to send\
    \ routing packets at a high enough rate\n   that normal traffic is effectively\
    \ excluded.  However, this is\n   unlikely except on low-bandwidth links.\n  \
    \ Finally, it may be possible for an attacker to deny access to a link\n   by\
    \ causing the router to generate sufficient monitoring or report\n   traffic that\
    \ the link is filled.  SNMP traps are one possible vector\n   for such an attack,\
    \ as they are not normally congestion controlled.\n   Attackers with physical\
    \ access to multiple access links can easily\n   bring down the link.  This is\
    \ particularly easy to mount and\n   difficult to counter with wireless networks.\n"
- title: 2.8.  DoS Attacks on Firewalls
  contents:
  - "2.8.  DoS Attacks on Firewalls\n   Firewalls are intended to defend the systems\
    \ behind them against\n   attack.  In that they restrict the traffic that can\
    \ reach those\n   systems, they may also aid in defending against denial-of-service\n\
    \   attacks.  However, under some circumstances the firewall itself may\n   also\
    \ be used as a weapon in a DoS attack.\n   There are many different types of firewall,\
    \ but generally speaking\n   they fall into stateful and stateless classes.  The\
    \ state here refers\n   to whether the firewall holds state for the active flows\
    \ traversing\n   the firewall.  Stateless firewalls generally can only be attacked\
    \ by\n   attempting to exhaust the processing resources of the firewall.\n   Stateful\
    \ firewalls can be attacked by sending traffic that causes the\n   firewall to\
    \ hold excessive state or state that has pathological\n   structure.\n   In the\
    \ case of excessive state, the firewall simply runs out of\n   memory, and can\
    \ no longer instantiate the state required to pass\n   legitimate flows.  Most\
    \ firewalls will then fail disconnected,\n   causing denial-of-service to the\
    \ systems behind the firewall.\n   In the case of pathological structure, the\
    \ attacker sends traffic\n   that causes the firewall's data structures to exhibit\
    \ worst-case\n   behaviour.  An example of this would be when the firewall uses\
    \ hash\n   tables to look up forwarding state, and the attacker can predict the\n\
    \   hash function used.  The attacker may then be able to cause a large\n   amount\
    \ of flow state to hash to the same bucket, which causes the\n   firewall's lookup\
    \ performance to change from O(1) to O(n), where n is\n   the number of flows\
    \ the attacker can instantiate [28].  Thus, the\n   attacker can cause forwarding\
    \ performance to degrade to the point\n   where service is effectively denied\
    \ to the legitimate traffic\n   traversing the firewall.\n"
- title: 2.9.  DoS Attacks on IDS Systems
  contents:
  - "2.9.  DoS Attacks on IDS Systems\n   Intrusion detection systems (IDSs) suffer\
    \ from similar problems to\n   firewalls.  It may be possible for an attacker\
    \ to cause the IDS to\n   exhaust its available processing power, to run out of\
    \ memory, or to\n   instantiate state with pathological structure.  Unlike a firewall,\
    \ an\n   IDS will normally fail open, which will not deny service to the\n   systems\
    \ protected by the IDS.  However, it may mean that subsequent\n   attacks that\
    \ the IDS would have detected will be missed.\n   Some IDSs are reactive; that\
    \ is, on detection of a hostile event they\n   react to block subsequent traffic\
    \ from the hostile system, or to\n   terminate an ongoing connection from that\
    \ system.  It may be possible\n   for an attacker to spoof packets from a legitimate\
    \ system, and hence\n   cause the IDS to believe that system is hostile.  The\
    \ IDS will then\n   cause traffic from the legitimate system to be blocked, hence\
    \ denying\n   service to it.  The effect can be particularly bad if the legitimate\n\
    \   system is a router, DNS server, or other system whose performance is\n   essential\
    \ for the operation of a large number of other systems.\n"
- title: 2.10.  DoS Attacks on or via NTP
  contents:
  - "2.10.  DoS Attacks on or via NTP\n   Network time servers are generally not considered\
    \ security-critical\n   services, but under some circumstances NTP servers might\
    \ be used to\n   perpetrate a DoS attack.\n   The most obvious such attack is\
    \ to DoS the NTP servers themselves.\n   Many end-systems have rather poor clock\
    \ accuracy and so, without\n   access to network time, their clock will naturally\
    \ drift.  This can\n   cause problems with distributed systems that rely on good\
    \ clocks.\n   For example, one commonly used revision control system can fail\
    \ if it\n   perceives the modification timestamp to be in the future.\n   If the\
    \ NTP servers relied on by a host can be subverted, either\n   through compromising\
    \ or impersonating them, then the attacker may be\n   able to control the host's\
    \ system clock.  This can cause many\n   unexpected consequences, including the\
    \ premature expiry of dated\n   resources such as encryption or authentication\
    \ keys.  This in turn\n   can prevent access to other more critical services.\n"
- title: 2.11.  Physical DoS
  contents:
  - "2.11.  Physical DoS\n   The discussion thus far has centered on denial-of-service\
    \ attacks\n   perpetrated using the network.  However, computer systems are only\
    \ as\n   resilient as the weakest link.  It may be easier to deny service by\n\
    \   causing a power failure, by cutting network cables, or by simply\n   switching\
    \ a system off, and so physical security is at least as\n   important as network\
    \ security.  Physical attacks can also serve as\n   entry points for non-physical\
    \ DoS, for instance, by reducing the\n   resources available to deal with overcapacity.\n"
- title: 2.12.  Social Engineering DoS
  contents:
  - "2.12.  Social Engineering DoS\n   The weakest link may also be human.  In defending\
    \ against DoS, the\n   possibility of denial-of-service through social engineering\
    \ should\n   not be neglected, such as convincing an employee to make a\n   configuration\
    \ change that prevents normal operation.\n"
- title: 2.13.  Legal DoS
  contents:
  - "2.13.  Legal DoS\n   Computer systems cannot be considered in isolation from\
    \ the social\n   and legal systems in which they operate.  This document focuses\n\
    \   primarily on the technical issues, but we note that \"cease and\n   desist\"\
    \ letters, government censorship, and other legal mechanisms\n   also touch on\
    \ denial-of-service issues.\n"
- title: 2.14.  Spam and Black-Hole Lists
  contents:
  - "2.14.  Spam and Black-Hole Lists\n   Unsolicited commercial email, also known\
    \ as \"spam\", can effectively\n   cause denial-of-service to email systems. \
    \ While the intent is not\n   denial-of-service, the large amount of unwanted\
    \ mail can waste the\n   recipient's time or cause legitimate email to fail to\
    \ be noticed\n   amongst all the background noise.  If spam filtering software\
    \ is\n   used, some level of false positives is to be expected, and so these\n\
    \   messages are effectively denied service.\n   One mechanism to reduce spam\
    \ is the use of black-hole lists.  The IP\n   addresses of dial-up ISPs or mail\
    \ servers used to originate or relay\n   spam are added to black-hole lists. \
    \ The recipients of mail choose to\n   consult these lists and reject spam if\
    \ it originates or is relayed by\n   systems on the list.  One significant problem\
    \ with such lists is that\n   it may be possible for an attacker to cause a victim\
    \ to be black-\n   hole-listed, even if the victim was not responsible for relaying\n\
    \   spam.  Thus, the black-hole list itself can be a mechanism for\n   effecting\
    \ a DoS attack.  Note that every black-hole list has its own\n   policy regarding\
    \ additions, and some are less susceptible to this DoS\n   attack than others.\
    \  Consumers of black-hole list technology are\n   advised to investigate these\
    \ policies before they subscribe.  Similar\n   considerations apply to feeds of\
    \ bad BGP bad route advertisements.\n"
- title: 3.  Attack Amplifiers
  contents:
  - "3.  Attack Amplifiers\n   Many of the attacks described above rely on sending\
    \ sufficient\n   traffic to overwhelm the victim.  Such attacks are made much\
    \ easier\n   by the existence of \"attack amplifiers\", where an attacker can\
    \ send\n   traffic from the spoofed source address of the victim and cause\n \
    \  larger responses to be returned to the victim.  A detailed discussion\n   of\
    \ such reflection attacks can be found in [35].\n"
- title: 3.1.  Methods of Attack Amplification
  contents:
  - "3.1.  Methods of Attack Amplification\n   The simplest such attack was the \"\
    smurf\" attack [22], where an ICMP\n   echo request packet with the spoofed source\
    \ address of the victim is\n   sent to the subnet-broadcast address of a network\
    \ to be used as an\n   amplifier.  Every system on that subnet then responds with\
    \ an ICMP\n   echo response that returns to the victim.  Smurf attacks are no\n\
    \   longer such a serious problem, as these days routers usually drop\n   such\
    \ packets and end-systems do not respond to them.\n   An alternative form of attack\
    \ amplifier is typified by a DNS\n   reflection attack.  An attacker sends a DNS\
    \ request to a DNS server\n   requesting resolution of a domain name.  Again the\
    \ source address of\n   the request is the spoofed address of the victim.  The\
    \ request is\n   carefully chosen so that the size of the response is significantly\n\
    \   greater than the size of the request, thereby providing the\n   amplification.\
    \  As an aside, it is interesting to note that the\n   largest DNS responses tend\
    \ to be those incorporating DNSsec\n   authentication information.  This attack\
    \ amplifier can only be used\n   by an attacker with the ability to spoof the\
    \ source address of the\n   victim.  However, we note that if the victim's DNS\
    \ server is\n   configured to relay requests from external clients, it may be\n\
    \   possible to cause it to congest its own incoming network link.\n   Another\
    \ variant of attack amplifier involves amplification through\n   retransmission.\
    \  This is typified by a TCP amplification attack known\n   as \"bang.c\".  The\
    \ attacker sends a spoofed TCP SYN with the source\n   address of the victim to\
    \ an arbitrary TCP server.  The server will\n   respond with a SYN|ACK that is\
    \ sent to the victim, and when no final\n   ACK is received to complete the handshake,\
    \ the SYN|ACK will be\n   retransmitted a number of times.  Typically, this attack\
    \ uses a very\n   large list of arbitrarily chosen servers as reflectors.  For\
    \ the\n   attack to be successful, the reflector must not receive a RST from\n\
    \   the victim in response to the SYN|ACK.  However, if the attack\n   traffic\
    \ sufficiently overwhelms the server or access link to the\n   server, then packet\
    \ loss will ensure that many reflectors do not\n   receive a RST in response to\
    \ their SYN|ACK, and so continue to\n   retransmit.  The attack can be exacerbated\
    \ by firewalls that silently\n   drop the incoming SYN|ACK without sending a RST.\n\
    \   Care must also be taken with services that relay requests.  If an\n   attacker\
    \ can send a request to a proxy, and that proxy now attempts\n   to connect to\
    \ a victim whose address is chosen by the attacker, then,\n   if the proxy repeatedly\
    \ resends the request when receiving no answer,\n   this can also serve as an\
    \ attack amplifier.\n   Another variant of amplification occurs in protocols that\
    \ include,\n   within the protocol payload, an IP address or name of host to which\n\
    \   subsequent messages should be sent.  An example of such a protocol is\n  \
    \ the Session Initiation Protocol (SIP) [50], which carries a payload\n   defined\
    \ by the Session Description Protocol (SDP) [51].  The SDP\n   payload of the\
    \ SIP message conveys the IP address and port to which\n   media packets, typically\
    \ encoded using the Real Time Transport\n   Protocol (RTP) [52], are sent.\n \
    \  To launch this attack, an attacker sends a protocol message, and sets\n   the\
    \ IP address within the payload to point to the attack target.  The\n   recipient\
    \ of the message will generate subsequent traffic to that IP\n   address.  Depending\
    \ on the protocol, this attack can provide\n   substantial amplification properties.\
    \  In the specific case of SIP,\n   if a caller makes calls to high-bandwidth\
    \ media sources (such as a\n   video server or streaming audio server), a single\
    \ SIP INVITE packet,\n   typically a few hundred bytes, can result in a nearly\
    \ continuous\n   stream of media packets at rates anywhere from a few kbits per\
    \ second\n   up to megabits per second.  This particular attack is called the\n\
    \   \"voice hammer\".\n   Unlike the other techniques described above, this technique\
    \ does not\n   require the attacker to modify packets or even spoof their source\
    \ IP\n   address.  This makes it easier to launch.\n   This attack is prevented\
    \ through careful protocol design.  Protocols\n   should, whenever possible, avoid\
    \ including IP addresses or hostnames\n   within protocol payloads as addresses\
    \ to which subsequent messaging\n   should be sent.  Rather, when possible, messages\
    \ should be sent to\n   the source IP from which the protocol packet came.  If\
    \ such a design\n   is not possible, the protocol should include a handshake whereby\
    \ it\n   can be positively determined that the protocol entity at that IP\n  \
    \ address or hostname does, in fact, wish to receive that subsequent\n   messaging.\
    \  That handshake itself needs to be lightweight (to avoid\n   being the source\
    \ of another DoS attack), and secured against the\n   spoofing of the handshake\
    \ response.\n   Finally, a somewhat similar attack is possible with some protocols\n\
    \   where one message leads to another message that is not sent as a\n   reply\
    \ to the source address of the first message.  This can be an\n   issue with protocols\
    \ to enable mobility, for example, and might\n   permit an attacker to avoid ingress\
    \ filtering.  Such protocols are\n   notoriously difficult to get right.\n"
- title: 3.2.  Strategies to Mitigate Attack Amplification
  contents:
  - "3.2.  Strategies to Mitigate Attack Amplification\n   In general, the architectural\
    \ lessons to be learnt are simple:\n   o  As far as possible, perform ingress\
    \ filtering [7] [39] to prevent\n      source address spoofing.\n   o  Avoid designing\
    \ protocols or mechanisms that can return\n      significantly larger responses\
    \ than the size of the request,\n      unless a handshake is performed to validate\
    \ the client's source\n      address.  Such a handshake needs to incorporate an\
    \ unpredictable\n      nonce that is secure enough to mitigate the amplification\
    \ effects\n      of the protocol.\n   o  All retransmission during initial connection\
    \ setup should be\n      performed by the client.\n   o  Proxies should not arbitrarily\
    \ relay requests to destinations\n      chosen by a client.\n   o  Avoid signaling\
    \ third-party connections.  Any unavoidable third-\n      party connections set\
    \ up by a signaling protocol should\n      incorporate lightweight validation\
    \ before sending significant\n      data.\n"
- title: 4.  DoS Mitigation Strategies
  contents:
  - "4.  DoS Mitigation Strategies\n   A general problem with DoS defense is that\
    \ it is not in principle\n   possible to distinguish between a flash crowd and\
    \ a DoS attack.\n   Indeed, having your site taken down by a flash crowd is probably\
    \ a\n   more common experience than having it DoS-ed -- so common it has\n   acquired\
    \ its own names: being Slashdotted or Farked, after the web\n   sites that are\
    \ common sources of flash crowds.  Thus, the first line\n   of defense against\
    \ DoS attacks must be to provision your service so\n   that it can handle a foreseeable\
    \ legitimate peak load.\n   Underprovisioned sites are the easiest to take down.\n\
    \   Specific strategies for DoS defense fall into two broad categories:\n   1.\
    \  Avoiding allowing attacks that are better than generic resource\n       consumption.\n\
    \   2.  Minimizing the extent to which generic resource consumption\n       attacks\
    \ crowd out legitimate users.\n   In the remainder of this section, we consider\
    \ specific applications\n   of these two approaches at a variety of levels of\
    \ network system\n   architecture.\n"
- title: 4.1.  Protocol Design
  contents:
  - '4.1.  Protocol Design

    '
- title: 4.1.1.  Don't Hold State for Unverified Hosts
  contents:
  - "4.1.1.  Don't Hold State for Unverified Hosts\n   From an end-system server point\
    \ of view, one simple aim is to avoid\n   instantiating state without having completed\
    \ a handshake with the\n   client to validate their address, and as far as possible\
    \ to push work\n   and stateholding to client.  There are a number of techniques\
    \ that\n   might be used to do this, including SYN cookies [2] [14].  All\n  \
    \ client-server protocols should probably be designed to allow such\n   techniques\
    \ to be used, but the enabling of the mechanism should\n   normally be at the\
    \ server's discretion to avoid unnecessary work\n   under normal circumstances.\n"
- title: 4.1.2.  Make It Hard to Simulate a Legitimate User
  contents:
  - "4.1.2.  Make It Hard to Simulate a Legitimate User\n   Other than having massive\
    \ overcapacity, the only real defense against\n   resource consumption attacks\
    \ is to preferentially discriminate\n   against attackers.  The general idea is\
    \ to find something that\n   legitimate users can do but attackers can't.  The\
    \ most commonly\n   proposed approaches include:\n   1.  Puzzles: force the attacker\
    \ to do some computation that would not\n       be onerous for a single user but\
    \ is too expensive to do en masse\n       [14].\n   2.  Reverse Turing tests:\
    \ specialized puzzles that are hard for\n       machines to do but easy for humans,\
    \ thus making automated attacks\n       hard [13].\n   3.  Reachability testing:\
    \ force the proposed client to demonstrate\n       that it can receive traffic\
    \ at a given IP address.  This makes it\n       easier to trace attackers.\n \
    \  All of these techniques have substantial limitations.  Puzzles tend\n   to\
    \ discriminate against legitimate users with slow computers.  In\n   addition,\
    \ the wide availability of remotely controlled compromised\n   machines (\"bots\"\
    ) means that attackers have ample computing power at\n   their disposal.  There\
    \ has been substantial work in attacking reverse\n   Turing tests automatically,\
    \ thus making them of limited\n   applicability.  Finally, reachability testing\
    \ is substantially\n   weakened by bots because the attacker does not need to\
    \ hide his\n   source address.\n"
- title: 4.1.3.  Graceful Routing Degradation
  contents:
  - "4.1.3.  Graceful Routing Degradation\n   A goal with routing protocols is that\
    \ of graceful degradation in\n   overload, and automatic recovery after the source\
    \ of the overload has\n   been remedied.  Some routing protocols satisfy this\
    \ goal more than\n   others.  Although RIP [53] doesn't scale well, if a router\
    \ runs out\n   of memory when receiving a RIP route, it can just drop the route\
    \ and\n   send an infinite metric to its peers.  The route will later be\n   refreshed,\
    \ and if the original source of the problem has been\n   resolved, the router\
    \ will now be able to process it correctly.\n   On the other hand, BGP is stateful\
    \ in the sense that a peer assumes\n   you have processed or chosen to filter\
    \ any route that it sent you.\n   There is no mechanism to refresh state in the\
    \ base BGP spec, and even\n   the later route refresh option [3] is hard to use\
    \ in the presence of\n   overload.  A BGP router that cannot store a route it\
    \ received has two\n   choices: completely restart BGP or shut down one or more\
    \ peerings\n   [26].  This means that the effects of a BGP overload are rather\
    \ more\n   severe than they need to be, and so amplifies the effect of any\n \
    \  attack.\n   In general, few routing protocol designs actively consider the\n\
    \   possible behaviour of routers under overload conditions; this should\n   be\
    \ an explicit part of future routing protocol designs.  Although\n   precise details\
    \ should clearly be left to implementors, the protocol\n   design needs to give\
    \ them the capability to do their job properly.\n"
- title: 4.1.4.  Autoconfiguration and Authentication
  contents:
  - "4.1.4.  Autoconfiguration and Authentication\n   Autoconfiguration mechanisms\
    \ greatly ease deployment, and are\n   increasingly necessary as the number of\
    \ networked devices grows\n   beyond what can be managed manually.  However, it\
    \ should be\n   recognised that unauthenticated autoconfiguration opens up many\n\
    \   avenues for attack.  There is a clear tension between ease of\n   configuration\
    \ and security of configuration, especially because there\n   are environments\
    \ in which it is desirable for units to operate with\n   effectively no authentication\
    \ (e.g., airport hotspots).  Future\n   autoconfiguration protocols should consider\
    \ the need to allow\n   different end-systems to operate at different points in\
    \ this spectrum\n   within the same autoconfiguration framework.  However, this\
    \ also\n   implies that the network elements should avoid acting for\n   unauthenticated\
    \ hosts, instead just letting them access the network\n   more or less directly.\n"
- title: 4.2.  Network Design and Configuration
  contents:
  - "4.2.  Network Design and Configuration\n   In general, networks should be provisioned\
    \ with private, out-of-band\n   access to console or control ports so that such\
    \ control facilities\n   will be available in the face of a DoS attack launched\
    \ against either\n   the control or data plane of the (in-band) network.  Typically,\
    \ such\n   out-of-band networks are provisioned on a separate infrastructure for\n\
    \   exactly this purpose.  Out-of-band access is a crucial capability for\n  \
    \ DoS mitigation, since many of the typical redundancy and capacity\n   management\
    \ techniques (such as prioritizing routing or network\n   management traffic)\
    \ fail during such attacks.  In addition, many\n   redundancy protocols such as\
    \ VRRP [47] can fail during such attacks\n   as they may be unable to keep adjacencies\
    \ alive.\n   There are several default configuration settings that can also be\n\
    \   exploited to generate several of the attacks outlined in this\n   document.\
    \  For example, some vendors may have features such as IP\n   redirect, directed\
    \ broadcast, and proxy ARP enabled by default.\n   Similar defaults, such as publicly\
    \ readable SNMP [48] communities\n   (e.g., \"public\") can be used to reveal\
    \ otherwise confidential\n   information to a prospective attacker.  Finally,\
    \ other\n   unauthenticated configuration management protocols such as TFTP [49]\n\
    \   should be avoided if possible; at the very least access to TFTP\n   configuration\
    \ archives should be protected and TFTP should be\n   filtered at administrative\
    \ boundaries.  Finally, since many of the\n   password encryption techniques used\
    \ by router vendors are reversible,\n   keeping such passwords on a configuration\
    \ archive (as part of a\n   configuration file), even in the encrypted form written\
    \ by the\n   router, can lead to unauthorized access if the archive is\n   compromised.\n"
- title: 4.2.1.  Redundancy and Distributed Service
  contents:
  - "4.2.1.  Redundancy and Distributed Service\n   A basic principle of designing\
    \ systems to handle failure is to have\n   redundant servers that can take over\
    \ when one fails.  This is equally\n   true in the case of DoS attacks, which\
    \ often focus on a given server\n   and/or link.  If service delivery points can\
    \ be distributed across\n   the network, then it becomes much harder to attack\
    \ the entire\n   service.  In particular, this makes attacks on a single network\
    \ link\n   more difficult.\n"
- title: 4.2.2.  Authenticate Routing Adjacencies
  contents:
  - "4.2.2.  Authenticate Routing Adjacencies\n   In general, cryptographic authentication\
    \ mechanisms are too costly to\n   form the main part in DoS prevention.  However,\
    \ routing adjacencies\n   are too important to risk an attacker being able to\
    \ inject bad\n   routing information, which can affect more than the router in\n\
    \   question.  Additional non-cryptographic mechanisms should then be\n   used\
    \ to avoid arbitrary end-systems being able to cause the router to\n   spend CPU\
    \ cycles on validating authentication data.\n   For BGP, at the very least, this\
    \ implies the use of TCP MD5 [9] or\n   IPsec authentication, combined with the\
    \ GTSM [8] to prevent eBGP\n   association with non-immediate neighbors.  In the\
    \ future, this will\n   likely imply better authentication of the routing information\
    \ itself.\n"
- title: 4.2.3.  Isolate Router-to-Router Traffic
  contents:
  - "4.2.3.  Isolate Router-to-Router Traffic\n   As far as is feasible, router-to-router\
    \ traffic should be isolated\n   from data traffic.  How this should be implemented\
    \ depends on the\n   precise technologies available, both in the router and at\
    \ the link\n   layer.  The goal should be that failure of the link for data traffic\n\
    \   should also cause failure for the routing traffic, but that an\n   attacker\
    \ cannot directly send packets to the control processor of the\n   routers.\n\
    \   A downside of this is that some diagnostic techniques (such as\n   pinging\
    \ consecutive routers to find the source of a delay) may no\n   longer be possible.\
    \  Ideally, alternative mechanisms (which do not\n   open up additional avenues\
    \ for DoS) should be designed to replace\n   such lost techniques.\n"
- title: 4.3.  Router Implementation Issues
  contents:
  - "4.3.  Router Implementation Issues\n   Because a router can be considered as\
    \ an end-system, it can\n   potentially benefit from all the prevention mechanisms\
    \ prescribed for\n   end-system implementation.  However, one basic distinction\
    \ between a\n   router and a host is that the former implements routing protocols\
    \ and\n   forwards data, which in turn lead to additional router-specific\n  \
    \ implementation considerations.  The issues described below are meant\n   to\
    \ be illustrative and not exhaustive.\n"
- title: 4.3.1.  Checking Protocol Syntax and Semantics
  contents:
  - "4.3.1.  Checking Protocol Syntax and Semantics\n   Protocol syntax defines the\
    \ formation of the protocol messages and\n   the rules of exchanges.  The questions\
    \ addressed by protocol syntax\n   checking includes, but is not limited to, the\
    \ following:\n   1.  Who sent the message?\n   2.  Does the content conform to\
    \ the protocol format?\n   3.  Was the message sent with correct timing?\n   The\
    \ first step in protocol syntax verification is to ensure that an\n   incoming\
    \ message was sent by a legitimate party.  There are multiple\n   ways to perform\
    \ this check.  One can verify the source IP address and\n   even the MAC address\
    \ of the message.  Utilizing the fact that eBGP\n   peers are normally directly\
    \ connected, one can also check the TTL\n   value in a packet and discard any\
    \ BGP updates packet whose TTL is\n   less than some maximum value (typically,\
    \ max TTL - 1) [8].\n   Cryptographic authentication should also be used whenever\
    \ available\n   to verify that an incoming message is indeed from an expected\
    \ sender.\n   For BGP, at the very least, this implies the use of TCP MD5 [9]\
    \ or\n   IPsec authentication.\n   In addition to the sender verification, it\
    \ is also important to check\n   the syntax of a received routing message, as\
    \ opposed to assuming that\n   all messages came in a correct format.  It happened\
    \ in the past that\n   routers crashed upon receiving ill-formed routing messages.\
    \  Such\n   faults will be prevented by performing rigorous syntax checking.\n"
- title: 4.3.2.  Consistency Checks
  contents:
  - "4.3.2.  Consistency Checks\n   Protocol semantics define the meaning of the message\
    \ content, the\n   interpretation of the values, and the actions to be taken according\n\
    \   to the content.  Here is a simple example of using semantic checking.\n  \
    \ When a link failure causes a router in Autonomous System (AS) A to\n   send\
    \ a peer router B a withdrawal message for prefix P, B should make\n   sure that\
    \ any alternative path it finds to reach P does not go\n   through A.  This simple\
    \ check is shown to significantly improve BGP\n   convergence time in many cases\
    \ [42].\n   Another example of using semantic checking against false routing\n\
    \   injection is described in [44].  The basic idea is to attach to the\n   route\
    \ announcement for prefix P a list of the valid origin ASes.  Due\n   to the rich\
    \ connectivity in today's Internet topology, a remote AS\n   will receive routing\
    \ updates from multiple different paths and can\n   check to see whether each\
    \ update carries the identical origin AS\n   list.  Although a false origin may\
    \ announce reachability to P, or\n   alter the origin AS list, it would be difficult,\
    \ if not impossible,\n   to block the correct updates from propagating out, and\
    \ thus remote\n   ASes can detect the existence of false updates by observing\
    \ the\n   inconsistency of the received origin AS lists for P.  Research\n   studies\
    \ show that the \"allowed origin list\" test can effectively\n   detect the majority\
    \ of falsely originated updates.\n   Generally speaking, verifying the validity\
    \ of BGP routes can be\n   challenging because BGP is policy driven and policies\
    \ of individual\n   ISPs are not known in most cases.  But assuming that policies\
    \ do not\n   change in short time scale, in principle one could verify new updates\n\
    \   against observed routes from the recent past, which reflect the\n   routing\
    \ policies in place.  Research work is needed to explore this\n   direction.\n\
    \   Note that while the above steps are all fairly simple and don't\n   really\
    \ \"bulletproof\" the protocol, each adds some degree of\n   protection.  As such,\
    \ the combination of the above techniques can\n   result in an effective reduction\
    \ in the probability of undetected\n   faults.\n"
- title: 4.3.3.  Enhance Router Robustness through Operational Adjustments
  contents:
  - "4.3.3.  Enhance Router Robustness through Operational Adjustments\n   There exist\
    \ a number of configuration tunings that can enhance\n   robustness of BGP operations.\
    \  One example is to let BGP peers\n   coordinate the setting of a limit on the\
    \ number of prefixes that one\n   BGP speaker will send to its peer [43].  Although\
    \ such a check does\n   not validate the prefix owned by each peer, it can prevent\
    \ false\n   announcements of large numbers of invalid routes.  Had all BGP\n \
    \  routers been configured with this simple checking earlier, several\n   large-scale\
    \ routing outages in the past could have been prevented.\n   Note, however, that\
    \ care must be taken with hard limits of this type\n   because they can be used\
    \ to mount a DoS because implementations often\n   discard excess routes indiscriminately,\
    \ thus potentially causing\n   black-holing of correct routes.\n   Another example\
    \ of useful configuration tuning is to adjust the BGP's\n   KeepAlive and Hold\
    \ Timer values to minimize BGP peering session\n   resets.  Previous measurements\
    \ show that heavy traffic load, such as\n   those caused by worms, can cause BGP\
    \ KeepAlive messages to be delayed\n   or dropped, which in turn cause BGP peering\
    \ session breakdown.  Such\n   load-induced session breaks and re-establishments\
    \ can lead to an\n   excessive amount of BGP updates during the periods when stable\n\
    \   routing is needed most.\n"
- title: 4.3.4.  Proper Handling of Router Resource Exhaustion
  contents:
  - "4.3.4.  Proper Handling of Router Resource Exhaustion\n   In addition to the\
    \ resource exhaustion problems that are generally\n   apply to all end-systems,\
    \ as described in Section 2, router\n   implementations must also take special\
    \ care in handling resource\n   exhaustions when they occur in order to keep the\
    \ router operating\n   despite the problem.  For example, under normal operations\
    \ a router\n   does not require a large cache to hold outstanding ARP requests\n\
    \   because the replies are normally received within a few milliseconds.\n   However,\
    \ certain conditions can lead to ARP cache exhaustion, for\n   example, during\
    \ a virus attack where many packets are sent to non-\n   existing IP addresses,\
    \ thus there are no ARP replies to the requests\n   for those addresses.  Such\
    \ phenomena have happened in the past and\n   led to routers failing to forward\
    \ packets.\n   Another example is queue management.  Many high-end routers are\n\
    \   designed so that most packets can be handled purely in specialized\n   processors\
    \ (Application-Specific Integrated Circuit (ASICs), Field\n   Programmable Gate-Arrays\
    \ (FPGAs), etc.).  However, exceptional\n   packets must be routed to a supporting\
    \ general purpose CPU for\n   handling.  On some such systems, it may be possible\
    \ mount a low-\n   effort DoS attack by saturating the queues between the specialized\n\
    \   hardware and the supporting processor.\n   So the attack vector on routers/network\
    \ devices is a low packets-\n   per-second (PPS) queue saturation attack on the\
    \ ASIC's raw queue\n   structure.  The countermeasure here is to have multiple\
    \ such queues\n   designed in such a way that it's difficult for an attacker to\
    \ arrange\n   to fill multiple queues [45].\n"
- title: 4.4.  End-System Implementation Issues
  contents:
  - '4.4.  End-System Implementation Issues

    '
- title: 4.4.1.  State Lookup Complexity
  contents:
  - "4.4.1.  State Lookup Complexity\n   Any system that instantiates per-connection\
    \ state should take great\n   care to implement state-lookup mechanisms in such\
    \ a way that\n   performance cannot be controlled by the attacker.  One way to\
    \ achieve\n   this is to use hash tables where the hash mechanism is keyed in\
    \ such\n   a way that the attacker cannot instantiate a large number of flows\
    \ in\n   the same hash bucket.\n"
- title: 4.4.1.1.  Avoid Livelock
  contents:
  - "4.4.1.1.  Avoid Livelock\n   Most operating systems use network interrupts to\
    \ receive data from\n   the network, which is a good solution if the host spends\
    \ only a small\n   amount of its time handling network traffic.  However, this\
    \ leaves\n   the host open to livelock [33], where under heavy load the OS spends\n\
    \   all its time handling interrupts and no time doing the work needed to\n  \
    \ handle the traffic at the application level.  Server operating\n   systems should\
    \ consider using network polling at times of heavy load,\n   rather than being\
    \ interrupt-driven, and should be carefully\n   architected so that as far as\
    \ reasonably possible, traffic received\n   by the OS is processed to completion\
    \ or very cheaply discarded.\n"
- title: 4.4.1.2.  Use Unpredictable Values for Session IDs
  contents:
  - "4.4.1.2.  Use Unpredictable Values for Session IDs\n   Most recent TCP implementations\
    \ use fairly good random mechanisms for\n   allocating the TCP initial sequence\
    \ numbers.  In general, any\n   dynamically allocated value used purely to identify\
    \ a communication\n   session should be allocated using an unpredictable mechanism,\
    \ as this\n   increases the search space for an attacker that wishes to disrupt\n\
    \   ongoing communications.  Thus, the dynamically allocated port of the\n   active\
    \ end of a TCP connection might also be randomly allocated.\n   With DNS, the\
    \ ID that is used to match responses with requests should\n   also be randomly\
    \ generated.  However, as the ID field is only 16\n   bits, the protection is\
    \ rather limited.\n"
- title: 4.4.2.  Operational Issues
  contents:
  - '4.4.2.  Operational Issues

    '
- title: 4.4.2.1.  Eliminate Bad Traffic Early
  contents:
  - "4.4.2.1.  Eliminate Bad Traffic Early\n   Many DoS attacks are generic bandwidth\
    \ consumption attacks that\n   operate by clogging the link that connects the\
    \ victim server to the\n   Internet.  Filtering these attacks at the server does\
    \ no good because\n   the traffic has already traversed the link that is the scarce\n\
    \   resource.  Such flows need to be filtered at some point closer to the\n  \
    \ attacker.  Where possible, operators should filter out obviously bad\n   traffic.\
    \  In particular, they should perform ingress filtering [7].\n"
- title: 4.4.2.2.  Establish a Monitoring Framework
  contents:
  - "4.4.2.2.  Establish a Monitoring Framework\n   Network operators are strongly\
    \ encouraged to establish a monitoring\n   framework to detect and log abnormal\
    \ network activity.  One cannot\n   defend against an attack that one doesn't\
    \ detect or understand.  Such\n   monitoring tools can be used to set a baseline\
    \ of \"normal\" traffic,\n   and can be used to detect aberrant flows and determine\
    \ the type and\n   source of the aberrant flows.  This is extremely helpful when\n\
    \   responding to distributed DoS attacks or a flash crowd, and should be\n  \
    \ in place prior to the event.\n"
- title: 5.  Conclusions
  contents:
  - "5.  Conclusions\n   In this document, we have highlighted possible avenues for\
    \ DoS\n   attacks on networks and networked systems, with the aim of\n   encouraging\
    \ protocol designers and network engineers towards designs\n   that are more robust.\
    \  We have discussed partial solutions that\n   reduce the effectiveness of attacks,\
    \ and highlighted how some partial\n   solutions can be taken advantage of by\
    \ attackers to perpetrate\n   alternative attacks.\n   Our focus has primarily\
    \ been on protocol and network architecture\n   issues, but there are many things\
    \ that network and service operators\n   can do to lessen the threat.  Further\
    \ advice and information for\n   network operators can be found in [24] [39] [25].\n\
    \   It is our hope that this document will spur discussion leading to\n   architectural\
    \ solutions that reduce the succeptibility of all\n   Internet systems to denial-of-service\
    \ attacks.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This entire document is about security.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   We are very grateful to Vern Paxson, Paul Vixie, Rob\
    \ Thomas, Dug\n   Song, George Jones, Jari Arkko, Geoff Huston, and Barry Greene\
    \ for\n   their constructive comments on earlier versions of this document.\n"
- title: 8.  Normative References
  contents:
  - "8.  Normative References\n   [1]  J. Abley, \"Hierarchical Anycast for Global\
    \ Service\n        Distribution\", http://www.isc.org/index.pl?/pubs/tn/\n   \
    \     index.pl?tn=isc-tn-2003-1.txt.\n   [2]  D.J. Bernstein, \"SYN Cookies\"\
    , http://cr.yp.to/syncookies.html.\n   [3]  Chen, E., \"Route Refresh Capability\
    \ for BGP-4\", RFC 2918,\n        September 2000.\n   [4]  Deering, S., \"Host\
    \ extensions for IP multicasting\", STD 5, RFC\n        1112, August 1989.\n \
    \  [5]  Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS)\n   \
    \     Protocol Version 1.1\", RFC 4346, April 2006.\n   [6]  Fenner, B., Handley,\
    \ M., Holbrook, H., and I. Kouvelas,\n        \"Protocol Independent Multicast\
    \ - Sparse Mode (PIM-SM): Protocol\n        Specification (Revised)\", RFC 4601,\
    \ August 2006.\n   [7]  Ferguson, P. and D. Senie, \"Network Ingress Filtering:\
    \ Defeating\n        Denial of Service Attacks which employ IP Source Address\n\
    \        Spoofing\", BCP 38, RFC 2827, May 2000.\n   [8]  Gill, V., Heasley, J.,\
    \ and D. Meyer, \"The Generalized TTL\n        Security Mechanism (GTSM)\", RFC\
    \ 3682, February 2004.\n   [9]  Heffernan, A., \"Protection of BGP Sessions via\
    \ the TCP MD5\n        Signature Option\", RFC 2385, August 1998.\n   [10] Rekhter,\
    \ Y., Li, T., and S. Hares, \"A Border Gateway Protocol 4\n        (BGP-4)\",\
    \ RFC 4271, January 2006.\n   [11] Villamizar, C., Chandra, R., and R. Govindan,\
    \ \"BGP Route Flap\n        Damping\", RFC 2439, November 1998.\n   [12] Waitzman,\
    \ D., Partridge, C., and S. Deering, \"Distance Vector\n        Multicast Routing\
    \ Protocol\", RFC 1075, November 1988.\n   [13] L. von Ahn, M. Blum, N. Hopper,\
    \ and J. Langford.  CAPTCHA: Using\n        hard AI problems for security.  In\
    \ Proceedings of Eurocrypt,\n        2003.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [14] T. Aura, P. Nikander, J. Leiwo, \"DOS-resistant\
    \ authentication\n        with client puzzles\", In B. Christianson, B. Crispo,\
    \ and M. Roe,\n        editors, Proceedings of the 8th International Workshop\
    \ on\n        Security Protocols, Lecture Notes in Computer Science,\n       \
    \ Cambridge, UK, April 2000.\n   [15] J. Bellardo, S. Savage, \"802.11 Denial-of-Service\
    \ Attacks: Real\n        Vulnerabilities and Practical Solutions\", Proceedings\
    \ of the\n        USENIX Security Symposium, Washington D.C., August 2003.\n \
    \  [16] S.M. Bellovin, \"Security Problems in the TCP/IP Protocol Suite\",\n \
    \       Computer Communication Review, Vol. 19, No. 2, pp. 32-48, April\n    \
    \    1989.\n   [17] CCAIS/RNP Alertas do Cais ALR-19112002a, \"Vulnerability in\
    \ the\n        sending requests control of Bind versions 4 and 8 allows DNS\n\
    \        spoofing\",\n        http://www.rnp.br/cais/alertas/2002/cais-ALR-19112002a.html.\n\
    \   [18] CERT Advisory CA-1996-01, \"UDP Port Denial-of-Service Attack\",\n  \
    \      Feb 1996.\n   [19] CERT Advisory CA-1996-21, \"TCP SYN Flooding and IP\
    \ Spoofing\n        Attacks\", Sept 1996.\n   [20] CERT Advisory CA-2001-09, \"\
    Statistical Weaknesses in TCP/IP\n        Initial Sequence Numbers\", May 2001.\n\
    \   [21] CERT Advisory CA-1996-26, \"Denial-of-Service Attack via ping\",\n  \
    \      Dec 1996.\n   [22] CERT Advisory CA-1998-01, \"Smurf IP Denial-of-Service\
    \ Attacks\",\n        http://www.cert.org/advisories/CA-1998-01.html, Jan 1998.\n\
    \   [23] CERT Incident Note IN-2000-05, \"'mstream' Distributed Denial of\n  \
    \      Service Tool\", May 2000.\n   [24] CERT/CC - \"Managing the Threat of Denial\
    \ of Service Attacks\",\n        http://www.cert.org/archive/pdf/Managing_DoS.pdf.\n\
    \   [25] CERT/CC - \"Trends in Denial of Service Attack Technology\",\n      \
    \  http://www.cert.org/archive/pdf/DoS_trends.pdf.\n   [26] D.F. Chang, R. Govindan,\
    \ J. Heidemann, \"An Empirical Study of\n        Router Response to Large Routing\
    \ Table Load\", Proceedings of the\n        2nd Internet Measurement Workshop\
    \ (IMW 2002), 2002.\n   [27] Cisco Systems, \"Configuring the BGP Maximum-Prefix\
    \ Feature\",\n        Cisco Document ID: 25160,\n        http://www.cisco.com/warp/public/459/bgp-maximum-prefix.html.\n\
    \   [28] Scott A Crosby and Dan S Wallach, \"Denial of Service via\n        Algorithmic\
    \ Complexity Attacks\", Proceedings of the USENIX\n        Security Symposium,\
    \ Washington D.C., August 2003.\n   [29] Laurent Joncheray, \"Simple Active Attack\
    \ Against TCP\", 5th\n        USENIX Security Symposium, 1995.\n   [30] M. Lough,\
    \ \"A Taxonomy of Computer Attacks with Applications to\n        Wireless\", PhD\
    \ thesis, Virginia Polytechnic Institute, April\n        2001.\n   [31] Z. Mao,\
    \ R. Govindan, G. Varghese, R. Katz, \"Route Flap Dampening\n        Exacerbates\
    \ Internet Routing Convergence\", Proceedings of ACM\n        SIGCOMM, 2002.\n\
    \   [32] Fenner, B., Ed., and D. Meyer, Ed., \"Multicast Source Discovery\n  \
    \      Protocol (MSDP)\", RFC 3618, October 2003.\n   [33] J. Mogul, KK.  Ramakrishnan,\
    \ \"Eliminating Receive Livelock in an\n        Interrupt-driven Kernel\", ACM\
    \ Transactions on Computer Systems,\n        Vol 15, Number 3, pp. 217-252, 1997.\n\
    \   [34] Watson, P., \"Slipping in the Window: TCP Reset attacks\",\n        Presentation\
    \ at 2004 CanSecWest,\n        http://www.cansecwest.com/archives.html.\n   [35]\
    \ V. Paxson, \"An Analysis of Using Reflectors for Distributed\n        Denial-of-Service\
    \ Attacks\", Computer Communication Review 31(3),\n        July 2001.\n   [36]\
    \ Joe Stewart, \"DNS Cache Poisoning - The Next Generation\", Jan 27\n       \
    \ 2003, http://www.lurhq.com/dnscache.pdf.\n   [37] Stewart, R., Ed., and M. Dalal,\
    \ Ed., \"Improving TCP's Robustness\n        to Blind In-Window Attacks\", Work\
    \ in Progress, June 2006.\n   [38] P. Vixie, G. Sneeringer, M. Schleifer, \"Events\
    \ of 21-Oct-2002\",\n        http://f.root-servers.org/october21.txt.\n   [39]\
    \ P. Vixie, \"Securing the Edge\",\n        http://www.icann.org/committees/security/sac004.txt.\n\
    \   [40] D. Wessels, \"Running An Authoritative-Only BIND Nameserver\",\n    \
    \    http://www.isc.org/index.pl?/pubs/tn/\n        index.pl?tn=isc-tn-2002-2.txt.\n\
    \   [41] M. Zalewski, \"Strange Attractors and TCP/IP Sequence Number\n      \
    \  Analysis\",\n        http://www.bindview.com/Services/Razor/Papers/2001/tcpseq.cfm.\n\
    \   [42] D. Pei, X. Zhao, L. Wang, D. Massey, A. Mankin, F. S. Wu, and L.\n  \
    \      Zhang.  Improving BGP Conver-gence Through Assertions Approach.\n     \
    \   In Proc. of IEEE INFOCOM, June 2002.\n   [43] Chavali, S., Radoaca, V., Miri,\
    \ M., Fang, L., and S. Hares,\n        \"Peer Prefix Limits Exchange in BGP\"\
    , Work in Progress, April\n        2004.\n   [44] X. Zhao, D. Massey, A. Mankin,\
    \ S.F. Wu, D. Pei, L. Wang, L.\n        Zhang, \"BGP Multiple Origin AS (MOAS)\
    \ Conflicts\",\n        http://nanog.org/mtg-0110/lixia.html, 2001.\n   [45] Cisco\
    \ Systems, \"Building Security Into the Hardware\",\n        ftp://ftp-eng.cisco.com/cons/isp/security/CPN-Summit-2004/\n\
    \        Paris-Sept-04/SE14-BUILDING-SECURITY-INTO-THE-HARDWARE-\n        c1_8_30_04.pdf,\
    \ 2004.\n   [46] Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH) Protocol\n\
    \        Architecture\", RFC 4251, January 2006.\n   [47] Hinden, R., \"Virtual\
    \ Router Redundancy Protocol (VRRP)\", RFC\n        3768, April 2004.\n   [48]\
    \ Harrington, D., Presuhn, R., and B. Wijnen, \"An Architecture for\n        Describing\
    \ Simple Network Management Protocol (SNMP) Management\n        Frameworks\",\
    \ STD 62, RFC 3411, December 2002.\n   [49] Malkin, G. and A. Harkin, \"TFTP Timeout\
    \ Interval and Transfer\n        Size Options\", RFC 2349, May 1998.\n   [50]\
    \ Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n        Peterson,\
    \ J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n        Session Initiation\
    \ Protocol\", RFC 3261, June 2002.\n   [51] Handley, M., Jacobson, V., and C.\
    \ Perkins, \"SDP: Session\n        Description Protocol\", RFC 4566, July 2006.\n\
    \   [52] Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,\n      \
    \  \"RTP: A Transport Protocol for Real-Time Applications\", STD 64,\n       \
    \ RFC 3550, July 2003.\n   [53] Hedrick, C., \"Routing Information Protocol\"\
    , RFC 1058, June\n        1988.\n"
- title: Appendix A.  IAB Members at the Time of This Writing
  contents:
  - "Appendix A.  IAB Members at the Time of This Writing\n   o  Bernard Aboba\n \
    \  o  Loa Andersson\n   o  Brian Carpenter\n   o  Leslie Daigle\n   o  Elwyn Davies\n\
    \   o  Kevin Fall\n   o  Olaf Kolkman\n   o  Kurtis Lindvist\n   o  David Meyer\n\
    \   o  David Oran\n   o  Eric Rescorla\n   o  Dave Thaler\n   o  Lixia Zhang\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark J. Handley, Ed.\n   UCL\n   Gower Street\n   London\
    \  WC1E 6BT\n   UK\n   EMail: M.Handley@cs.ucl.ac.uk\n   Eric Rescorla, Ed.\n\
    \   Network Resonance\n   2483 E. Bayshore #212\n   Palo Alto  94303\n   USA\n\
    \   EMail: ekr@networkresonance.com\n   Internet Architecture Board\n   IAB\n\
    \   EMail: iab@ietf.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
