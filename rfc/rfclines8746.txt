Abstract The Concise Binary Object Representation (CBOR), as defined in RFC 7049, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.
This document makes use of this extensibility to define a number of CBOR tags for typed arrays of numeric data, as well as additional tags for multi dimensional and homogeneous arrays.
It is intended as the reference document for the IANA registration of the CBOR tags defined.
The Concise Binary Object Representation (CBOR) [RFC7049] provides for the interchange of structured data without a requirement for a pre agreed schema.
[RFC7049] defines a basic set of data types as well as a tagging mechanism that enables extending the set of data types supported via an IANA registry.
Recently, a simple form of typed arrays of numeric data has received interest both in the Web graphics community [TypedArray] and in the JavaScript specification (see Section 22.2 (
international.org/ecma 262/10.0/index.html#sec typedarray objects) of [ECMA ES10]) as well as in corresponding implementations [ArrayBuffer].
Since these typed arrays may carry significant amounts of data, there is interest in interchanging them in CBOR without the need of lengthy conversion of each number in the array.
This can also save space overhead with encoding a type for each element of an array.
This document defines a number of interrelated CBOR tags that cover these typed arrays, as well as additional tags for multi dimensional and homogeneous arrays.
It is intended as the reference document for the IANA registration of the tags defined.
Note that an application that generates CBOR with these tags has considerable freedom in choosing variants (e.g., with respect to endianness, embedded type (signed vs. unsigned), and number of bits per element) or whether a tag defined in this specification is used at all instead of more basic CBOR.
In contrast to representation variants of single CBOR numbers, there is no representation that could be identified as "preferred".
If deterministic encoding is desired in a CBOR based protocol making use of these tags, the protocol has to define which of the encoding variants are used for each individual case.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
The term "byte" is used in its now customary sense as a synonym for "octet".
The term "array" is used in a general sense in this document unless further specified.
The term "classical CBOR array" describes an array represented with CBOR major type 4.
A "homogeneous array" is an array of elements that are all the same type (the term is neutral as to whether that is a representation type or an application data model type).
The terms "big endian" and "little endian" are used to indicate a most significant byte first (MSB first) representation of integers and a least significant byte first (LSB first) representation, respectively.
Typed arrays are homogeneous arrays of numbers, all of which are encoded in a single form of binary representation.
The concatenation of these representations is encoded as a single CBOR byte string (major type 2), enclosed by a single tag indicating the type and encoding of all the numbers represented in the byte string.
Three classes of numbers are of interest: unsigned integers (uint), signed integers (two's complement, sint), and IEEE 754 binary floating point numbers (which are always signed).
For each of these classes, there are multiple representation lengths in active use:
Here, sintN stands for a signed integer of exactly N bits (for instance, sint16), and uintN stands for an unsigned integer of exactly N bits (for instance, uint32).
The name binaryN stands for the number form of the same name defined in IEEE 754
Since one objective of these tags is to be able to directly ship the ArrayBuffers underlying the Typed Arrays without re encoding them, and these may be either in big endian (network byte order) or in little endian form, we need to define tags for both variants.
In total, this leads to 24 variants.
In the tag, we need to express the choice between integer and floating point, the signedness (for integers), the endianness, and one of the four length values.
In order to simplify implementation, a range of tags is being allocated that allows retrieving all this information from the bits of the tag: tag values from 64 to 87.
The value is split up into 5 bit fields: 0b010, f, s, e, and ll as detailed in Table 2.
the constant bits 0, 1, 0
A number for the length (Table 1).
Bit Fields in the Low 8 Bits of the Tag
(Notice that 0f and ll are the two least significant bits, respectively, of each 4 bit nibble in the byte.)
In the CBOR representation, the total number of elements in the array is not expressed explicitly but is implied from the length of the byte string and the length of each representation.
It can be computed from the length, in bytes, of the byte string comprising the representation of the array by inverting the previous formula: "bytelength >>
For the uint8/sint8 values, the endianness is redundant.
Only the tag for the big endian variant is used and assigned as such.
The tag that would signify the little endian variant of sint8 MUST NOT be used; its tag number is marked as reserved.
As a special case, the tag that would signify the little endian variant of uint8 is instead assigned to signify that the numbers in the array are using clamped conversion from integers, as described in more detail in Section 7.1.11
(http://www.ecma international.org/ecma 262/6.0/#sec  touint8clamp) of the ES10 JavaScript specification ("ToUint8Clamp") [ECMA ES10]; the assumption here is that a program internal representation of this array after decoding would be marked this way for further processing providing "roundtripping" of JavaScript typed arrays through CBOR.
IEEE 754 binary floating numbers are always signed.
Therefore, for the float variants ("f"   1), there is no need to distinguish between signed and unsigned variants; the "s" bit is always zero.
The tag numbers where "s" would be one (which would have tag values 88 to 95) remain free to use by other specifications.
This specification defines three additional array tags.
The Multi  dimensional Array tags can be combined with classical CBOR arrays as well as with Typed Arrays in order to build multi dimensional arrays with constant numbers of elements in the sub arrays.
The Homogeneous Array tag can be used as a signal by an application to identify a classical CBOR array as a homogeneous array, even when a Typed Array does not apply.
dimensional Array A multi dimensional array is represented as a tagged array that contains two (one dimensional) arrays.
The first array defines the dimensions of the multi dimensional array (in the sequence of outer dimensions towards inner dimensions) while the second array represents the contents of the multi dimensional array.
If the second array is itself tagged as a Typed Array, then the element type of the multi dimensional array is known to be the same type as that of the Typed Array.
Two tags are defined by this document: one for elements arranged in row major order and another for column major order [RowColMajor].
40 Data Item:  Array (major type 4) of two arrays: one array (major type 4) of dimensions, which are unsigned integers distinct from zero; and one array (any one of a CBOR array of major type 4, a Typed Array, or a Homogeneous Array) of elements.
Data in the second array consists of consecutive values where the last dimension is considered contiguous (row major order).
Figure 1 shows a declaration of a two dimensional array in the C language, a representation of that in CBOR using both a multi  dimensional array tag and a typed array tag.
> # multi dimensional array tag 82
) 2nd Dimension <Tag 65
> # uint16 array 4c
Multi dimensional Array in C and CBOR Figure 2 shows the same two dimensional array using the multi  dimensional array tag in conjunction with a basic CBOR array (which, with the small numbers chosen for the example, happens to be shorter).
# multi dimensional array tag 82
Multi dimensional Array Using Basic CBOR Array 3.1.2.
The multi dimensional arrays specified in the previous sub subsection are in "row major" order, which is the preferred order for the purposes of this specification.
An analogous representation that uses "column major" order arrays is provided in this subsection under the tag 1040, as illustrated in Figure 3.
Data Item:  The same as tag 40, except the data in the second array consists of consecutive values where the first dimension is considered contiguous (column major order).
> # multi dimensional array tag, column major order 82
Multi dimensional Array Using Basic CBOR Array, Column  3.2.
Tag:  41 Data Item:  Array (major type 4)
This tag identifies the classical CBOR array (a one dimensional array) tagged by it as a homogeneous array, that is, it has elements that are all of the same application model data type.
The element type of the array is therefore determined by the application model data type of the first array element.
This can be used in application data models that apply specific semantics to homogeneous arrays.
Also, in certain cases, implementations in strongly typed languages may be able to create native homogeneous arrays of specific types instead of ordered lists while decoding.
Which CBOR data items constitute elements of the same application type is specific to the application.
Figure 4 shows an example for a homogeneous array of booleans in C  [CPlusPlus] and CBOR.
: Homogeneous Array in C  and CBOR Figure 5 extends the example with a more complex structure.
Homogeneous Array in C  and CBOR 4.
Discussion Support for both little  and big endian representation may seem out of character with CBOR, which is otherwise fully big endian.
This support is in line with the intended use of the typed arrays and the objective not to require conversion of each array element.
This specification allocates a sizable chunk out of the single byte tag space.
This use of code point space is justified by the wide use of typed arrays in data interchange.
Providing a column major order variant of the multi dimensional array may seem superfluous to some and useful to others.
It is cheap to define the additional tag so that it is available when actually needed.
Allocating it out of a different number space makes the preference for row major evident.
Applying a Homogeneous Array tag to a Typed Array would usually be redundant and is therefore not provided by the present specification.
For use with CDDL [RFC8610], the typenames defined in Figure 6 are recommended: ta uint8
#6.67(bstr) ta uint8 clamped   #6.68(bstr) ta uint16le
#6.74(bstr) ta sint64be   #6.75(bstr) ; reserved: #6.76(bstr) ta sint16le
Recommended Typenames for CDDL 6.
IANA Considerations IANA has allocated the tags in Table 3 using this document as the specification reference.
(The reserved value is for a future revision of typed array tags.)
The allocations were assigned from the "specification required" space (24..255) with the exception of 1040, which was assigned from the "first come first served" space (256..).
Values for Tags  40 or 1040 data item:
The second element of the outer array in the data item is a native CBOR array (major type 4) or Typed Array (one of tag 64..87
The security considerations of [RFC7049] apply; special attention is drawn to the second paragraph of Section 8 of [RFC7049].
The tag for homogeneous arrays makes a promise about its tagged data item, which a maliciously constructed CBOR input can then choose to ignore.
As always, the decoder therefore has to ensure that it is not driven into an undefined state by array elements that do not fulfill the promise, and that it does continue to fulfill its API contract in this case as well.
As with all formats that are used for data interchange, an attacker may have control over the shape of the data delivered as input to the application, which therefore needs to validate that shape before it makes it the basis of its further processing.
One unique aspect that typed arrays add to this is that an attacker might substitute a Uint8ClampedArray for where the application expects a Uint8Array, or vice versa, potentially leading to very different (and unexpected) processing semantics of the in memory data structures constructed.
Applications that could be affected by this will therefore need to be careful about making this distinction in their input validation.
The initial draft version of this specification was written by Johnathan Roatch <roatch@gmail.com
Many thanks for getting this ball rolling.
Glenn Engel suggested the tags for multi dimensional arrays and homogeneous arrays.
