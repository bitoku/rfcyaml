- title: __initial_text__
  contents:
  - "        Representing Tables and Subtrees in the X.500 Directory\nStatus of this\
    \ Memo\n   This memo defines an Experimental Protocol for the Internet\n   community.\
    \  This memo does not specify an Internet standard of any\n   kind.  Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\nAbstract\n   This document defines techniques for representing\
    \ two types of\n   information mapping in the OSI Directory [1].\n   1.  Mapping\
    \ from a key to a value (or set of values), as might be\n       done in a table\
    \ lookup.\n   2.  Mapping from a distinguished name to an associated value (or\n\
    \       values), where the values are not defined by the owner of the\n      \
    \ entry.  This is achieved by use of a directory subtree.\n   These techniques\
    \ were developed for supporting MHS use of Directory\n   [2], but are specified\
    \ separately as they have more general\n   applicability.\n1.  Representing Flat\
    \ Tables\n   Before considering specific function, a general purpose technique\
    \ for\n   representing tables in the directory is introduced.  The schema for\n\
    \   this is given in Figure 1.\n   A table can be considered as an unordered set\
    \ of key to (single or\n   multiple) value mappings, where the key cannot be represented\
    \ as a\n   global name.  There are four reasons why this may occur:\n   1.  The\
    \ object does not have a natural global name.\n   2.  The object can only be named\
    \ effectively in the context of being\n       a key to a binding.  In this case,\
    \ the object will be given a\n       natural global name by the table.\n   3.\
    \  The object has a global name, and the table is being used to\n       associate\
    \ parameters with this object, in cases where they cannot\n       be placed in\
    \ the objects global entry.  Reasons why they might\n       not be so placed include:\n\
    \        o  The object does not have a directory entry\n        o  There is no\
    \ authority to place the parameters in the global\n           entry\n        o\
    \  The parameters are not global --- they only make sense in the\n           context\
    \ of the table.\n   4.  It is desirable to group information together as a performance\n\
    \       optimisation, so that the block of information may be widely\n       replicated.\n\
    \   A table is represented as a single level subtree.  The root of the\n   subtree\
    \ is an entry of object class Table.  This is named with a\n   common name descriptive\
    \ of the table.  The table will be located\n   somewhere appropriate to its function.\
    \  If a table is private to an\n   MTA, it will be below the MTA's entry.  If\
    \ it is shared by MTA's in\n   an organisation, it will be located under the organisation.\n\
    \   The generic table entry contains only a description.  All instances\n   will\
    \ be subclassed, and the subclass will define the naming\n   attribute.  Two subclasses\
    \ are defined:\n-----------------------------------------------------------------------\n\
    table OBJECT-CLASS ::= {\n    SUBCLASS OF {top}\n    MUST CONTAIN {commonName}\n\
    \    MAY CONTAIN {manager}\n    ID oc-table}\ntableEntry OBJECT-CLASS ::= {\n\
    \    SUBCLASS OF {top}\n    MAY CONTAIN {description}                        \
    \               10\n    ID oc-table-entry}\ntextTableEntry OBJECT-CLASS ::= {\n\
    \    SUBCLASS OF {tableEntry}\n    MUST CONTAIN {textTableKey}\n    MAY CONTAIN\
    \ {textTableValue}\n    ID oc-text-table-entry}\ntextTableKey ATTRIBUTE ::= {\n\
    \    SUBTYPE OF name                                                 20\n    WITH\
    \ SYNTAX DirectoryString {ub-name}\n    ID at-text-table-key}\ntextTableValue\
    \ ATTRIBUTE ::= {\n    SUBTYPE OF name\n    WITH SYNTAX  DirectoryString {ub-description}\n\
    \    ID at-text-table-value}\ndistinguishedNameTableEntry OBJECT-CLASS ::= {\n\
    \    SUBCLASS OF {tableEntry}                                        30\n    MUST\
    \ CONTAIN {distinguishedNameTableKey}\n    ID oc-distinguished-name-table-entry}\n\
    distinguishedNameTableKey ATTRIBUTE ::= {\n    SUBTYPE OF distinguishedName\n\
    \    ID at-distinguished-name-table-key}\n                     Figure 1:  Representing\
    \ Tables\n1.  TextEntry, which define table entries with text keys, which may\n\
    \    have single or multiple values of any type.  An attribute is\n    defined\
    \ to allow a text value, to support the frequent text key to\n    text value mapping.\
    \  Additional values may be defined.\n2.  DistinguishedNameEntry.  This is used\
    \ for associating information\n    with globally defined objects.  This approach\
    \ should be used where\n    the number of objects in the table is small or very\
    \ sparsely\n    spread over the DIT. In other cases where there are many objects\n\
    \    or the objects are tightly clustered in the DIT, the subtree\n    approach\
    \ defined in Section 2 will be preferable.  No value\n    attributes are defined\
    \ for this type of entry.  An application of\n    this will make appropriate subtyping\
    \ to define the needed values.\nThis is best illustrated by example.  Consider\
    \ the MTA:\nCN=Bells, OU=Computer Science,\nO=University College London, C=GB\n\
    Suppose that the MTA needs a table mapping from private keys to fully\nqualified\
    \ domain names (this example is fictitious).  The table might\nbe named as:\n\
    CN=domain-nicknames,\nCN=Bells, OU=Computer Science,\nO=University College London,\
    \ C=GB\nTo represent a mapping in this table from \"euclid\" to\n\"bloomsbury.ac.uk\"\
    , the entry:\nCN=euclid, CN=domain-nicknames,\nCN=Bells, OU=Computer Science,\n\
    O=University College London, C=GB\nwill contain the attribute:\nTextTableValue=bloomsbury.ac.uk\n\
    A second example, showing the use of DistinguishedNameEntry is now\ngiven.  Consider\
    \ again the MTA:\nCN=Bells, OU=Computer Science,\nO=University College London,\
    \ C=GB\nSuppose that the MTA needs a table mapping from MTA Name to bilateral\n\
    agreement information of that MTA. The table might be named as:\nCN=MTA Bilateral\
    \ Agreements,\nCN=Bells, OU=Computer Science,\nO=University College London, C=GB\n\
    To represent information on the MTA which has the Distinguished Name:\nCN=Q3T21,\
    \ ADMD=Gold 400, C=GB\n   There would be an entry in this table with the Relative\
    \ Distinguished\n   Name of the table entry being the Distinguished Name of the\
    \ MTA being\n   referred to.  The MTA Bilateral information would be an attribute\
    \ in\n   this entry.  Using a non-standard notation, the Distinguished Name of\n\
    \   the table entry is:\n   DistinguishedNameTableValue=<CN=Q3T21, ADMD=Gold 400,\
    \ C=GB>,\n   CN=MTA Bilateral Agreements,\n   CN=Bells, OU=Computer Science,\n\
    \   O=University College London, C=GB\n2.  Representing Subtrees\n   A subtree\
    \ is similar to a table, except that the keys are constructed\n   as a distinguished\
    \ name hierarchy relative to the location of the\n   subtree in the DIT. The subtree\
    \ effectively starts a private \"root\",\n   and has distinguished names relative\
    \ to this root.  Typically, this\n   approach is used to associate local information\
    \ with global objects.\n   The schema used is defined in Figure 2.  Functionally,\
    \ this is\n   equivalent to a table with distinguished name keys.  The table\n\
    \   approach is best when the tree is very sparse.  This approach is\n   better\
    \ for subtrees which are more populated.\n   The subtree object class defines\
    \ the root for a subtree in an\n   analogous means to the table.  Information\
    \ within the subtree will\n   generally be defined in the same way as for the\
    \ global object, and so\n   ---------------------------------------------------------------------\n\
    \   subtree OBJECT-CLASS ::= {\n       SUBCLASS OF {top}\n       MUST CONTAIN\
    \ {commonName}\n       MAY CONTAIN {manager}\n       ID oc-subtree}\n        \
    \             Figure 2:  Representing Subtrees\n   no specific object classes\
    \ for subtree entries are needed.\n   For example consider University College\
    \ London.\n   O=University College London, C=GB\n   Suppose that the UCL needs\
    \ a private subtree, with interesting\n   information about directory objects.\
    \  The table might be named as:\n   CN=private subtree,\n   O=University College\
    \ London, C=GB\n   UCL specific information on Inria might be stored in the entry:\n\
    \   O=Inria, C=FR,\n   CN=private subtree,\n   O=University College London, C=GB\n\
    \   Practical examples of this mapping are given in [2].\n3.  Acknowledgements\n\
    \   Acknowledgements for work on this document are given in [2].\nReferences\n\
    \   [1] The Directory --- overview of concepts, models and services,\n       1993.\
    \ CCITT X.500 Series Recommendations.\n   [2] Kille, S., \"MHS use of the X.500\
    \ Directory to Support MHS\n       Routing\", RFC 1801, ISODE Consortium, June\
    \ 1995.\n4.  Security Considerations\n   Security issues are not discussed in\
    \ this memo.\n5.  Author's Address\n   Steve Kille\n   ISODE Consortium\n   The\
    \ Dome\n   The Square\n   Richmond\n   TW9 1DT\n   England\n   Phone:  +44-81-332-9091\n\
    \   Internet EMail:  S.Kille@ISODE.COM\n   X.400:  I=S; S=Kille; O=ISODE Consortium;\
    \ P=ISODE;\n   A=Mailnet; C=FI;\n   DN: CN=Steve Kille,\n   O=ISODE Consortium,\
    \ C=GB\n   UFN: S. Kille, ISODE Consortium, GB\nA.  Object Identifier Assignment\n\
    -----------------------------------------------------------------------\nmhs-ds\
    \ OBJECT IDENTIFIER ::= {iso(1) org(3) dod(6) internet(1)\n          private(4)\
    \ enterprises(1) isode-consortium (453) mhs-ds (7)}\ntables OBJECT IDENTIFIER\
    \ ::= {mhs-ds 1}\noc OBJECT IDENTIFIER ::= {tables 1}\nat OBJECT IDENTIFIER ::=\
    \ {tables 2}\noc-subtree OBJECT IDENTIFIER ::= {oc 1}\noc-table OBJECT IDENTIFIER\
    \ ::= {oc 2}                               10\noc-table-entry OBJECT IDENTIFIER\
    \ ::= {oc 3}\noc-text-table-entry OBJECT IDENTIFIER ::= {oc 4}\noc-distinguished-name-table-entry\
    \  OBJECT IDENTIFIER ::= {oc 5}\nat-text-table-key OBJECT IDENTIFIER ::= {at 1}\n\
    at-text-table-value OBJECT IDENTIFIER ::= {at 2}\nat-distinguished-name-table-key\
    \ OBJECT IDENTIFIER ::= {at 3}\n                 Figure 3:  Object Identifier\
    \ Assignment\n"
