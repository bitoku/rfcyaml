- title: __initial_text__
  contents:
  - '     Relay Extensions for the Message Session Relay Protocol (MSRP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Two separate models for conveying instant messages have been defined.\n\
    \   Page-mode messages stand alone and are not part of a Session\n   Initiation\
    \ Protocol (SIP) session, whereas session-mode messages are\n   set up as part\
    \ of a session using SIP.  The Message Session Relay\n   Protocol (MSRP) is a\
    \ protocol for near real-time, peer-to-peer\n   exchanges of binary content without\
    \ intermediaries, which is designed\n   to be signaled using a separate rendezvous\
    \ protocol such as SIP.\n   This document introduces the notion of message relay\
    \ intermediaries\n   to MSRP and describes the extensions necessary to use them.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction and Requirements ...................................3\n\
    \   2. Conventions and Definitions .....................................4\n  \
    \ 3. Protocol Overview ...............................................4\n    \
    \  3.1. Authorization Overview ....................................11\n   4. New\
    \ Protocol Elements ..........................................11\n      4.1. The\
    \ AUTH Method ...........................................11\n      4.2. The Use-Path\
    \ Header .......................................12\n      4.3. The HTTP Authentication\
    \ \"WWW-Authenticate\" Header .........12\n      4.4. The HTTP Authentication\
    \ \"Authorization\" Header ............12\n      4.5. The HTTP Authentication\
    \ \"Authentication-Info\" Header ......12\n      4.6. Time-Related Headers ......................................12\n\
    \   5. Client Behavior ................................................13\n  \
    \    5.1. Connecting to Relays Acting on Your Behalf ................13\n    \
    \  5.2. Sending Requests ..........................................18\n      5.3.\
    \ Receiving Requests ........................................18\n      5.4. Managing\
    \ Connections ......................................18\n   6. Relay Behavior .................................................18\n\
    \      6.1. Handling Incoming Connections .............................18\n  \
    \    6.2. Generic Request Behavior ..................................19\n    \
    \  6.3. Receiving AUTH Requests ...................................19\n      6.4.\
    \ Forwarding ................................................20\n           6.4.1.\
    \ Forwarding SEND Requests ...........................21\n           6.4.2. Forwarding\
    \ Non-SEND Requests .......................22\n           6.4.3. Handling Responses\
    \ .................................22\n      6.5. Managing Connections ......................................23\n\
    \   7. Formal Syntax ..................................................23\n  \
    \ 8. Finding MSRP Relays ............................................24\n   9.\
    \ Security Considerations ........................................25\n      9.1.\
    \ Using HTTP Authentication .................................25\n      9.2. Using\
    \ TLS .................................................26\n      9.3. Threat Model\
    \ ..............................................27\n      9.4. Security Mechanism\
    \ ........................................29\n   10. IANA Considerations ...........................................31\n\
    \      10.1. New MSRP Method ..........................................31\n  \
    \    10.2. New MSRP Headers .........................................31\n    \
    \  10.3. New MSRP Response Codes ..................................31\n   11.\
    \ Example SDP with Multiple Hops ................................31\n   12. Acknowledgments\
    \ ...............................................32\n   13. References ....................................................32\n\
    \      13.1. Normative References .....................................32\n  \
    \    13.2. Informative References ...................................33\n   Appendix\
    \ A.  Implementation Considerations ........................34\n"
- title: 1.  Introduction and Requirements
  contents:
  - "1.  Introduction and Requirements\n   There are a number of scenarios in which\
    \ using a separate protocol\n   for bulk messaging is desirable.  In particular,\
    \ there is a need to\n   handle a sequence of messages as a session of media initiated\
    \ using\n   SIP [8], just like any other media type.  The Message Session Relay\n\
    \   Protocol (MSRP) [11] is used to convey a session of messages directly\n  \
    \ between two end systems with no intermediaries.  With MSRP, messages\n   can\
    \ be arbitrarily large and all traffic is sent over reliable,\n   congestion-safe\
    \ transports.\n   This document describes extensions to the core MSRP protocol\
    \ to\n   introduce intermediaries called relays.  With these extensions, MSRP\n\
    \   clients can communicate directly, or through an arbitrary number of\n   relays.\
    \  Each client is responsible for identifying any relays acting\n   on its behalf\
    \ and providing appropriate credentials.  Clients that\n   can receive new TCP\
    \ connections directly do not have to implement any\n   new functionality to work\
    \ with these relays.\n   The goals of the MSRP relay extensions are listed below:\n\
    \   o  convey arbitrary binary MIME data without modification or transfer\n  \
    \    encoding\n   o  continue to support client-to-client operation (no relay\
    \ servers\n      required)\n   o  operate through an arbitrary number of relays\
    \ for policy\n      enforcement\n   o  operate through relays under differing\
    \ administrative control\n   o  allow each client to control which relays are\
    \ traversed on its\n      behalf\n   o  prevent unsolicited messages (spam), \"\
    open relays\", and Denial of\n      Service (DoS) amplification\n   o  allow relays\
    \ to use one or a small number of TCP or TLS [2]\n      connections to carry messages\
    \ for multiple sessions, recipients,\n      and senders\n   o  allow large messages\
    \ to be sent over slow connections without\n      causing head-of-line blocking\
    \ problems\n   o  allow transmissions of large messages to be interrupted and\n\
    \      resumed in places where network connectivity is lost and later\n      reestablished\n\
    \   o  offer notification of message failure at any intermediary\n   o  allow\
    \ relays to delete state after a short amount of time\n"
- title: 2.  Conventions and Definitions
  contents:
  - "2.  Conventions and Definitions\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [9].\n   Below we list several definitions important to MSRP:\n\
    \   MSRP node: a host that implements the MSRP protocols as a client or a\n  \
    \    relay.\n   MSRP client: an MSRP node that is the initial sender or final\
    \ target\n      of messages and delivery status.\n   MSRP relay: an MSRP node\
    \ that forwards messages and delivery status\n      and may provide policy enforcement.\
    \  Relays can fragment and\n      reassemble portions of messages.\n   Message:\
    \ arbitrary MIME [13][14] content that one client wishes to\n      send to another.\
    \  For the purposes of this specification, a\n      complete MIME body as opposed\
    \ to a portion of a complete message.\n   chunk: a portion of a complete message\
    \ delivered in a SEND request.\n   end-to-end: delivery of data from the initiating\
    \ client to the final\n      target client.\n   hop: delivery of data between\
    \ one MSRP node and an adjacent node.\n"
- title: 3.  Protocol Overview
  contents:
  - "3.  Protocol Overview\n   With the introduction of this extension, MSRP has the\
    \ concept of both\n   clients and relays.  Clients send messages to relays and/or\
    \ other\n   clients.  Relays forward messages and message delivery status to\n\
    \   clients and other relays.  Clients that can open TCP connections to\n   each\
    \ other without intervening policy restrictions can communicate\n   directly with\
    \ each other.  Clients who are behind firewalls or who\n   need to use intermediaries\
    \ for policy reasons can use the services of\n   a relay.  Each client is responsible\
    \ for enlisting the assistance of\n   one or more relays for its side of the communication.\n\
    \   Clients that use a relay operate by first opening a TLS connection\n   with\
    \ a relay, authenticating, and retrieving an msrps: URI (from the\n   relay) that\
    \ the client can provide to its peers to receive messages\n   later.  There are\
    \ several steps for doing this.  First, the client\n   opens a TLS connection\
    \ to its first relay, and verifies that the name\n   in the certificate matches\
    \ the name of the relay to which it is\n   trying to connect.  Such verification\
    \ is performed according to the\n   procedures defined in Section 9.2.  After\
    \ verifying that it has\n   connected to the proper host, the client authenticates\
    \ itself to the\n   relay using an AUTH request containing appropriate authentication\n\
    \   credentials.  In a successful AUTH response, the relay provides an\n   msrps:\
    \ URI associated with the path back to the client.  The client\n   can then give\
    \ this URI to other clients for end-to-end message\n   delivery.\n   When clients\
    \ wish to send a short message, they issue a SEND request\n   with the entire\
    \ contents of the message.  If any relays are required,\n   they are included\
    \ in the To-Path header.  The leftmost URI in the To-\n   Path header is the next\
    \ hop to deliver a request or response.  The\n   rightmost URI in the To-Path\
    \ header is the final target.\n   SEND requests contain headers that indicate\
    \ how they are acknowledged\n   in a hop-by-hop form and in an end-to-end form.\
    \  The default is that\n   SEND messages are acknowledged hop-by-hop.  (Each relay\
    \ that receives\n   a SEND request acknowledges receipt of the request before\
    \ forwarding\n   the content to the next relay or the final target.)  All other\n\
    \   requests are acknowledged end-to-end.\n   With the introduction of relays,\
    \ the subtle semantics of the To-Path\n   header and the From-Path header become\
    \ more relevant.  The To-Path in\n   both requests and responses is the list of\
    \ URIs that need to be\n   visited in order to reach the final target of the request\
    \ or\n   response.  The From-Path is the list of URIs that indicate how to get\n\
    \   back to the original sender of the request or response.  These\n   headers\
    \ differ from the To and From headers in SIP, which do not\n   \"swap\" from request\
    \ to response.  (Note that sometimes a request is\n   sent to or from an intermediary\
    \ directly.)\n   When a relay forwards a request, it removes its address from\
    \ the To-\n   Path header and inserts it as the first URI in the From-Path header.\n\
    \   For example, if the path from Alice to Bob is through relays A and B,\n  \
    \ when B receives the request it contains path headers that look like\n   the\
    \ following. (Note that MSRP does not permit line folding.  A \"\\\"\n   in the\
    \ examples shows a line continuation due to limitations in line\n   length of\
    \ this document.  Neither the backslash nor the extra CRLF is\n   included in\
    \ the actual request or response.)\n   To-Path:   msrps://B.example.com/bbb;tcp\
    \ \\\n              msrps://Bob.example.com/bob;tcp\n   From-Path: msrps://A.example.com/aaa;tcp\
    \ \\\n              msrps://Alice.example.com/alice;tcp\n   After forwarding the\
    \ request, the path headers look like this:\n   To-Path: msrps://Bob.example.com/bob;tcp\n\
    \   From-Path: msrps://B.example.com/bbb;tcp \\\n              msrps://A.example.com/aaa;tcp\
    \ \\\n              msrps://Alice.example.com/alice;tcp\n   The sending of an\
    \ acknowledgment for SEND requests is controlled by\n   the Success-Report and\
    \ Failure-Report headers and works the same way\n   as in the base MSRP protocol.\
    \  When a relay receives a SEND request,\n   if the Failure-Report is set to \"\
    yes\", it means that the previous hop\n   is running a timer and the relay needs\
    \ to send a response to the\n   request.  If the final response conveys an error,\
    \ the previous hop is\n   responsible for constructing the error report and sending\
    \ it back to\n   the original sender of the message.  The 200 response acknowledges\n\
    \   receipt of the request so that the previous hop knows that it is no\n   longer\
    \ responsible for the request.  If the relay knows that it will\n   not be able\
    \ to deliver the request and the Failure-Report is set to\n   any value other\
    \ than \"no\", then it sends a REPORT to tell the sender\n   about the error.\
    \  If the Failure-Report is set to \"yes\", then after\n   the relay is done sending\
    \ the request to the next hop it starts\n   running a timer; if the timer expires\
    \ before a response is received\n   from the next hop, the relay assumes that\
    \ an error has happened and\n   sends a REPORT to the sender.  If the Failure-Report\
    \ is not set to\n   \"yes\", there is no need for the relay to run this timer.\n\
    \   The following example shows a typical MSRP session.  The AUTH\n   requests\
    \ are explained in a later section but left in the example for\n   call flow completeness.\n\
    \   Alice              a.example.org       b.example.net             Bob\n   \
    \  |                     |                    |                     |\n     |::::::::::::::::::::>|\
    \ connection opened  |<::::::::::::::::::::|\n     |--- AUTH ----------->|   \
    \                 |<-- AUTH ------------|\n     |<-- 200 OK-----------|      \
    \              |--- 200 OK---------->|\n     |                     |         \
    \           |                     |\n           ....                time passes\
    \           ....\n     |                     |                    |          \
    \           |\n     |--- SEND ----------->|                    |             \
    \        |\n     |<-- 200 OK ----------|:::::::::::::::::::>|  (slow link)   \
    \     |\n     |                     |--- SEND ---------->|                   \
    \  |\n     |                     |<-- 200 OK ---------|--- SEND ----------->|\n\
    \     |                     |                    |                ....>|\n   \
    \  |                     |                    |                  ..>|\n     |\
    \                     |                    |<-- 200 OK ----------|\n     |   \
    \                  |                    |<-- REPORT ----------|\n     |      \
    \               |<-- REPORT ---------|                     |\n     |<-- REPORT\
    \ ----------|                    |                     |\n     |             \
    \        |                    |                     |\n   The SEND and REPORT\
    \ messages are shown below to illustrate the To-\n   Path and From-Path headers.\
    \  (Note that MSRP does not permit line\n   folding.  A \"\\\" in the examples\
    \ shows a line continuation due to\n   limitations in line length of this document.\
    \  Neither the backslash,\n   nor the extra CRLF is included in the actual request\
    \ or response.)\n    MSRP 6aef SEND\n    To-Path: msrps://a.example.org:9000/kjfjan;tcp\
    \ \\\n             msrps://b.example.net:9000/aeiug;tcp \\\n             msrps://bob.example.net:8145/foo;tcp\n\
    \    From-Path: msrps://alice.example.org:7965/bar;tcp\n    Success-Report: yes\n\
    \    Byte-Range: 1-*/*\n    Message-ID: 87652\n    Content-Type: text/plain\n\
    \    Hi Bob, I'm about to send you file.mpeg\n    -------6aef$\n    MSRP 6aef\
    \ 200 OK\n    To-Path: msrps://alice.example.org:7965/bar;tcp\n    From-Path:\
    \ msrps://a.example.org:9000/kjfjan;tcp\n    Message-ID: 87652\n    -------6aef$\n\
    \    MSRP juh76 SEND\n    To-Path: msrps://b.example.net:9000/aeiug;tcp \\\n \
    \            msrps://bob.example.net:8145/foo;tcp\n    From-Path: msrps://a.example.org:9000/kjfjan;tcp\
    \ \\\n               msrps://alice.example.org:7965/bar;tcp\n    Success-Report:\
    \ yes\n    Message-ID: 87652\n    Byte-Range: 1-*/*\n    Content-Type: text/plain\n\
    \    Hi Bob, I'm about to send you file.mpeg\n    -------juh76$\n    MSRP juh76\
    \ 200 OK\n    To-Path: msrps://a.example.org:9000/kjfjan;tcp\n    From-Path: msrps://b.example.net:9000/aeiug;tcp\n\
    \    Message-ID: 87652\n    -------juh76$\n    MSRP xght6 SEND\n    To-Path: msrps://bob.example.net:8145/foo;tcp\n\
    \    From-Path: msrps://b.example.net:9000/aeiug;tcp \\\n               msrps://a.example.org:9000/kjfjan;tcp\
    \ \\\n               msrps://alice.example.org:7965/bar;tcp\n    Success-Report:\
    \ yes\n    Message-ID: 87652\n    Byte-Range: 1-*/*\n    Content-Type: text/plain\n\
    \    Hi Bob, I'm about to send you file.mpeg\n    -------xght6$\n    MSRP xght6\
    \ 200 OK\n    To-Path: msrps://b.example.net:9000/aeiug;tcp\n    From-Path: msrps://bob.example.net:8145/foo;tcp\n\
    \    Message-ID: 87652\n    MSRP yh67 REPORT\n    To-Path: msrps://b.example.net:9000/aeiug;tcp\
    \ \\\n             msrps://a.example.org:9000/kjfjan;tcp \\\n             msrps://alice.example.org:7965/bar;tcp\n\
    \    From-Path: msrps://bob.example.net:8145/foo;tcp\n    Message-ID: 87652\n\
    \    Byte-Range: 1-39/39\n    Status: 000 200 OK\n    -------yh67$\n    MSRP yh67\
    \ REPORT\n    To-Path: msrps://a.example.org:9000/kjfjan;tcp \\\n            \
    \ msrps://alice.example.org:7965/bar;tcp\n    From-Path: msrps://b.example.net:9000/aeiug;tcp\
    \ \\\n               msrps://bob.example.net:8145/foo;tcp\n    Message-ID: 87652\n\
    \    Byte-Range: 1-39/39\n    Status: 000 200 OK\n    -------yh67$\n    MSRP yh67\
    \ REPORT\n    To-Path: msrps://alice.example.org:7965/bar;tcp\n    From-Path:\
    \ msrps://a.example.org:9000/kjfjan;tcp \\\n               msrps://b.example.net:9000/aeiug;tcp\
    \ \\\n               msrps://bob.example.net:8145/foo;tcp\n    Message-ID: 87652\n\
    \    Byte-Range: 1-39/39\n    Status: 000 200 OK\n    -------yh67$\n   When sending\
    \ large content, the client may split up a message into\n   smaller pieces; each\
    \ SEND request might contain only a portion of the\n   complete message.  For\
    \ example, when Alice sends Bob a 4-GB file\n   called \"file.mpeg\", she sends\
    \ several SEND requests each with a\n   portion of the complete message.  Relays\
    \ can repack message fragments\n   en route.  As individual parts of the complete\
    \ message arrive at the\n   final destination client, the receiving client can\
    \ optionally send\n   REPORT requests indicating delivery status.\n   MSRP nodes\
    \ can send individual portions of a complete message in\n   multiple SEND requests.\
    \  As relays receive chunks, they can\n   reassemble or re-fragment them as long\
    \ as they resend the resulting\n   chunks in order.  (Receivers still need to\
    \ be prepared to receive\n   out-of-order chunks, however.)  If the sender has\
    \ set the Success-\n   Report header to \"yes\", once a chunk or complete message\
    \ arrives at\n   the destination client, the destination will send a REPORT request\n\
    \   indicating that a chunk arrived end-to-end.  This request travels\n   back\
    \ along the reverse path of the SEND request.  Unlike the SEND\n   request, which\
    \ can be acknowledged along every hop, REPORT requests\n   are never acknowledged.\n\
    \   The following example shows a message being re-chunked through two\n   relays:\n\
    \   Alice              a.example.org       b.example.net             Bob\n   \
    \  |                     |                    |                     |\n     |---\
    \ SEND 1-3 ------->|                    |                     |\n     |<-- 200\
    \ OK ----------|                    |  (slow link)        |\n     |--- SEND 4-7\
    \ ------->|--- SEND 1-5 ------>|                     |\n     |<-- 200 OK ----------|<--\
    \ 200 OK ---------|--- SEND 1-3 ------->|\n     |--- SEND 8-10 ------>|--- SEND\
    \ 6-10 ----->|                ....>|\n     |<-- 200 OK ----------|<-- 200 OK ---------|\
    \                  ..>|\n     |                     |                    |<--\
    \ 200 OK ----------|\n     |                     |                    |<-- REPORT\
    \ 1-3 ------|\n     |                     |<-- REPORT 1-3 -----|--- SEND 4-7 ------->|\n\
    \     |<-- REPORT 1-3 ------|                    |                 ...>|\n   \
    \  |                     |                    |<-- REPORT 4-7 ----->|\n     |\
    \                     |<-- REPORT 4-7 -----|--- SEND 8-10 ------>|\n     |<--\
    \ REPORT 4-7 ------|                    |                  ..>|\n     |      \
    \               |                    |<-- 200 OK ----------|\n     |         \
    \            |<-- REPORT done-----|<-- REPORT done -----|\n     |<-- REPORT done\
    \ -----|                    |                     |\n     |                  \
    \   |                    |                     |\n   Relays only keep transaction\
    \ states for a short time for each chunk.\n   Delivery over each hop should take\
    \ no more than 30 seconds after the\n   last byte of data is sent.  Client applications\
    \ define their own\n   implementation-dependent timers for end-to-end message\
    \ delivery.\n   For client-to-client communication, the sender of a message typically\n\
    \   opens a new TCP connection (with or without TLS) if one is needed.\n   Relays\
    \ reuse existing connections first, but can open new connections\n   (typically\
    \ to other relays) to deliver requests such as SEND or\n   REPORT.  Responses\
    \ can only be sent over existing connections.\n   The relationship between MSRP\
    \ and signaling protocols (such as SIP)\n   is unchanged by this document, and\
    \ is as described in [11].  An\n   example of an SDP exchange for an MSRP session\
    \ involving relays is\n   shown in Section 11.\n"
- title: 3.1.  Authorization Overview
  contents:
  - "3.1.  Authorization Overview\n   A key element of this protocol is that it cannot\
    \ introduce open\n   relays, with all the associated problems they create, including\
    \ DoS\n   attacks.  A message is only forwarded by a relay if it is either\n \
    \  going to or coming from a client that has authenticated to the relay\n   and\
    \ been authorized for relaying messages on that particular session.\n   Because\
    \ of this, clients use an AUTH message to authenticate to a\n   relay and get\
    \ a URI that can be used for forwarding messages.\n   If a client wishes to use\
    \ a relay, it sends an AUTH request to the\n   relay.  The client authenticates\
    \ the relay using the relay's TLS\n   certificate.  The client uses HTTP Digest\
    \ authentication [1] to\n   authenticate to the relay.  When the authentication\
    \ succeeds, the\n   relay returns a 200 response that contains the URI that the\
    \ client\n   can use in the MSRP path for the relay.\n   A typical challenge response\
    \ flow is shown below:\n   Alice              a.example.org\n     |          \
    \           |\n     |::::::::::::::::::::>|\n     |--- AUTH ----------->|\n  \
    \   |<- 401 Unauthorized -|\n     |--- AUTH ----------->|\n     |<-- 200 OK-----------|\n\
    \     |                     |\n   The URI that the client should use is returned\
    \ in the Use-Path header\n   of the 200.\n   Note that URIs returned to the client\
    \ are effectively secret tokens\n   that should be shared only with the other\
    \ MSRP client in a session.\n   For that reason, the client MUST NOT reuse the\
    \ same URI for multiple\n   sessions, and needs to protect these URIs from eavesdropping.\n"
- title: 4.  New Protocol Elements
  contents:
  - '4.  New Protocol Elements

    '
- title: 4.1.  The AUTH Method
  contents:
  - "4.1.  The AUTH Method\n   AUTH requests are used by clients to create a handle\
    \ they can use to\n   receive incoming requests.  AUTH requests also contain credentials\n\
    \   used to authenticate a client and authorization policy used to block\n   Denial\
    \ of Service attacks.\n   In response to an AUTH request, a successful response\
    \ contains a Use-\n   Path header with a list of URIs that the client can give\
    \ to its peers\n   to route responses back to the client.\n"
- title: 4.2.  The Use-Path Header
  contents:
  - "4.2.  The Use-Path Header\n   The Use-Path header is a list of URIs provided\
    \ by an MSRP relay in\n   response to a successful AUTH request.  This list of\
    \ URIs can be used\n   by the MSRP client that sent the AUTH request to receive\
    \ MSRP\n   requests and to advertise this list of URIs, for example, in a\n  \
    \ session description.  URIs in the Use-Path header MUST include a\n   fully qualified\
    \ domain name (as opposed to a numeric IP address) and\n   an explicit port number.\n\
    \   The URIs in the Use-Path header are in the same order that the\n   authenticating\
    \ client uses them in a To-Path header.  Instructions on\n   forming To-Path headers\
    \ and SDP [7] path attributes from information\n   in the Use-Path header are\
    \ provided in Section 5.1.\n"
- title: 4.3.  The HTTP Authentication "WWW-Authenticate" Header
  contents:
  - "4.3.  The HTTP Authentication \"WWW-Authenticate\" Header\n   The \"WWW-Authenticate\"\
    \ header contains a challenge token used in the\n   HTTP Digest authentication\
    \ procedure (from RFC 2617 [1]).  The usage\n   of HTTP Digest authentication\
    \ in MSRP is described in detail in\n   Section 5.1.\n"
- title: 4.4.  The HTTP Authentication "Authorization" Header
  contents:
  - "4.4.  The HTTP Authentication \"Authorization\" Header\n   The \"Authorization\"\
    \ header contains authentication credentials for\n   HTTP Digest authentication\
    \ (from RFC 2617 [1]).  The usage of HTTP\n   Digest authentication in MSRP is\
    \ described in detail in Section 5.1.\n"
- title: 4.5.  The HTTP Authentication "Authentication-Info" Header
  contents:
  - "4.5.  The HTTP Authentication \"Authentication-Info\" Header\n   The \"Authentication-Info\"\
    \ header contains future challenges to be\n   used for HTTP Digest authentication\
    \ (from RFC 2617 [1]).  The usage\n   of HTTP Digest authentication in MSRP is\
    \ described in detail in\n   Section 5.1.\n"
- title: 4.6.  Time-Related Headers
  contents:
  - "4.6.  Time-Related Headers\n   The Expires header in a request provides a relative\
    \ time after which\n   the action implied by the method of the request is no longer\
    \ of\n   interest.  In a request, the Expires header indicates how long the\n\
    \   sender would like the request to remain valid.  In a response, the\n   Expires\
    \ header indicates how long the responder considers this\n   information relevant.\
    \  Specifically, an Expires header in an AUTH\n   request indicates how long the\
    \ provided URIs will be valid.\n   The Min-Expires header contains the minimum\
    \ duration a server will\n   permit in an Expires header.  It is sent only in\
    \ 423 \"Interval Out-\n   of-Bounds\" responses.  Likewise, the Max-Expires header\
    \ contains the\n   maximum duration a server will permit in an Expires header.\n"
- title: 5.  Client Behavior
  contents:
  - '5.  Client Behavior

    '
- title: 5.1.  Connecting to Relays Acting on Your Behalf
  contents:
  - "5.1.  Connecting to Relays Acting on Your Behalf\n   Clients that want to use\
    \ the services of a relay or list of relays\n   need to send an AUTH request to\
    \ each relay that will act on their\n   behalf.  (For example, some organizations\
    \ could deploy an \"intra-org\"\n   relay and an \"extra-org\" relay.)  The inner\
    \ relay is used to tunnel\n   the AUTH requests to the outer relay.  For example,\
    \ the client will\n   send an AUTH to intra-org and get back a path that can be\
    \ used for\n   forwarding through intra-org.  The client would then send a second\n\
    \   AUTH destined to extra-org but sent through intra-org.  The intra-org\n  \
    \ relay forwards this to extra-org and extra-org returns a path that\n   can be\
    \ used to forward messages from another destination to extra-org\n   to intra-org\
    \ and then on to this client.  Each relay authenticates\n   the client.  The client\
    \ authenticates the first relay and each relay\n   authenticates the next relay.\n\
    \   Clients can be configured (typically, through discovery or manual\n   provisioning)\
    \ with a list of relays they need to use.  They MUST be\n   able to form a connection\
    \ to the first relay and send an AUTH command\n   to get a URI that can be used\
    \ in a To-Path header.  The client can\n   authenticate its first relay by looking\
    \ at the relay's TLS\n   certificate.  The client MUST authenticate itself to\
    \ each of its\n   relays using HTTP Digest authentication [1] (see Section 9.1\
    \ for\n   details).\n   The relay returns a URI, or list of URIs, in the \"Use-Path\"\
    \ header of\n   a success response.  Each URI SHOULD be used for only one unique\n\
    \   session.  These URIs are used by the client in the path attribute\n   that\
    \ is sent in the SDP to set up the session, and in the To-Path\n   header of outgoing\
    \ requests.  To form the To-Path header for outgoing\n   requests, the client\
    \ takes the list of URIs in the Use-Path header\n   after the outermost authentication\
    \ and appends the list of URIs\n   provided in the path attribute in the peer's\
    \ session description.  To\n   form the SDP path attribute to provide to the peer,\
    \ the client\n   reverses the list of URIs in the Use-Path header (after the outermost\n\
    \   authentication), and appends the client's own URI.\n      For example, \"\
    A\" has to traverse its own relays \"B\" and \"C\", and\n      then relays \"\
    D\" and \"E\" in domain2 to reach \"F\".  Client \"A\" will\n      authenticate\
    \ with its relays \"B\" and \"C\" and eventually receive a\n      Use-Path header\
    \ containing \"B C\".  Client \"A\" reverses the list\n      (now \"C B\") and\
    \ appends its own URI (now \"C B A\"), and provides\n      this list to \"F\"\
    \ in a path SDP attribute.  Client \"F\" sends its\n      SDP path list \"D E\
    \ F\", which client \"A\" appends to the Use-Path\n      list it received \"B\
    \ C\".  The resulting To-Path header is \"B C D E\n      F\".\n     domain 1 \
    \                   domain 2\n   ----------------          -----------------\n\
    \   client    relays          relays     client\n     A ----- B -- C --------\
    \ D -- E ----- F\n   Use-Path returned by C:           B C\n   path: attribute\
    \ generated by A:   C B A\n   path: attribute received from F:  D E F\n   To-Path\
    \ header generated by A:    B C D E F\n   The initial AUTH request sent to a relay\
    \ by a client will generally\n   not contain an Authorization header, since the\
    \ client has no\n   challenge to which it can respond.  In response to an AUTH\
    \ request\n   that does not contain an Authorization header, a relay MUST respond\n\
    \   with a \"401 Unauthorized\" response containing a WWW-Authenticate\n   header.\
    \  The WWW-Authenticate header is formed as described in RFC\n   2617 [1], with\
    \ the restrictions and modifications described in\n   Section 9.1.  The realm\
    \ chosen by the MSRP relay in such a challenge\n   is a matter of administrative\
    \ policy.  Because a single relay does\n   not have multiple protection spaces\
    \ in MSRP, it is not unreasonable\n   to always use the relay's hostname as the\
    \ realm.\n   Upon receiving a 401 response to a request, the client SHOULD fetch\n\
    \   the realm from the WWW-Authenticate header in the response and retry\n   the\
    \ request, including an Authorization header with the correct\n   credentials\
    \ for the realm.  The Authorization header is formed as\n   described in RFC 2617\
    \ [1], with the restrictions and modifications\n   described in Section 9.1.\n\
    \   When a client wishes to use more than one relay, it MUST send an AUTH\n  \
    \ request to each relay it wishes to use.  Consider a client A, that\n   wishes\
    \ messages to flow from A to the first relay, R1, then on to a\n   second relay,\
    \ R2.  This client will do a normal AUTH with R1.  It\n   will then do an AUTH\
    \ transaction with R2 that is routed through R1.\n   The client will form this\
    \ AUTH message by setting the To-Path to\n   msrps://R1;tcp msrps://R2;tcp.  R1\
    \ will forward this request onward\n   to R2.\n   When sending an AUTH request,\
    \ the client MAY add an Expires header to\n   request a MSRP URI that is valid\
    \ for no longer than the provided\n   interval (a whole number of seconds).  The\
    \ server will include an\n   Expires header in a successful response indicating\
    \ how long its URI\n   from the Use-Path will be valid.  Note that each server\
    \ can return an\n   independent expiration time.\n   Note that MSRP does not permit\
    \ line folding.  A \"\\\" in the examples\n   shows a line continuation due to\
    \ limitations in line length of this\n   document.  Neither the backslash nor\
    \ the extra CRLF is included in\n   the actual request or response.\n   (Alice\
    \ opens a TLS connection to intra.example.com and sends an AUTH\n   request to\
    \ initiate the authentication process.)\n    MSRP 49fh AUTH\n    To-Path: msrps://alice@intra.example.com;tcp\n\
    \    From-Path: msrps://alice.example.com:9892/98cjs;tcp\n    -------49fh$\n \
    \  (Alice's relay challenges the AUTH request.)\n    MSRP 49fh 401 Unauthorized\n\
    \    To-Path: msrps://alice.example.com:9892/98cjs;tcp\n    From-Path: msrps://alice@intra.example.com;tcp\n\
    \    WWW-Authenticate: Digest realm=\"intra.example.com\", qop=\"auth\", \\\n\
    \                      nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\"\n    -------49fh$\n\
    \   (Alice responds to the challenge.)\n    MSRP 49fi AUTH\n    To-Path: msrps://alice@intra.example.com;tcp\n\
    \    From-Path: msrps://alice.example.com:9892/98cjs;tcp\n    Authorization: Digest\
    \ username=\"Alice\",\n                   realm=\"intra.example.com\", \\\n  \
    \                 nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\", \\\n         \
    \          qop=auth, nc=00000001, cnonce=\"0a4f113b\", \\\n                  \
    \ response=\"6629fae49393a05397450978507c4ef1\"\n    -------49fi$\n   (Alice's\
    \ relay confirms that Alice is an authorized user.  As a\n   matter of local policy,\
    \ it includes an \"Authentication-Info\" header\n   with a new nonce value to\
    \ expedite future AUTH requests.)\n    MSRP 49fi 200 OK\n    To-Path: msrps://alice.example.com:9892/98cjs;tcp\n\
    \    From-Path: msrps://alice@intra.example.com;tcp\n    Use-Path: msrps://intra.example.com:9000/jui787s2f;tcp\n\
    \    Authentication-Info: nextnonce=\"40f2e879449675f288476d772627370a\",\\\n\
    \                         rspauth=\"7327570c586207eca2afae94fc20903d\", \\\n \
    \                        cnonce=\"0a4f113b\", nc=00000001, qop=auth\n    Expires:\
    \ 900\n    -------49fi$\n   (Alice now sends an AUTH request to her \"external\"\
    \ relay through her\n   \"internal\" relay, using the URI she just obtained; the\
    \ AUTH request\n   is challenged.)\n    MSRP mnbvw AUTH\n    To-Path: msrps://intra.example.com:9000/jui787s2f;tcp\
    \ \\\n             msrps://extra.example.com;tcp\n    From-Path: msrps://alice.example.com:9892/98cjs;tcp\n\
    \    -------mnbvw$\n    MSRP m2nbvw AUTH\n    To-Path: msrps://extra.example.com;tcp\n\
    \    From-Path: msrps://intra.example.com:9000/jui787s2f;tcp \\\n            \
    \   msrps://alice.example.com:9892/98cjs;tcp\n    -------m2nbvw$\n    MSRP m2nbvw\
    \ 401 Unauthorized\n    To-Path: msrps://intra.example.com:9000/jui787s2f;tcp\
    \ \\\n             msrps://alice.example.com:9892/98cjs;tcp\n    From-Path: msrps://extra.example.com;tcp\n\
    \    WWW-Authenticate: Digest realm=\"extra.example.com\", qop=\"auth\", \\\n\
    \                      nonce=\"Uumu8cAV38FGsEF31VLevIbNXj9HWO\"\n    -------m2nbvw$\n\
    \    MSRP mnbvw 401 Unauthorized\n    To-Path: msrps://alice.example.com:9892/98cjs;tcp\n\
    \    From-Path: msrps://intra.example.com:9000/jui787s2f;tcp \\\n            \
    \   msrps://extra.example.com;tcp\n    WWW-Authenticate: Digest realm=\"extra.example.com\"\
    , qop=\"auth\", \\\n                      nonce=\"Uumu8cAV38FGsEF31VLevIbNXj9HWO\"\
    \n    -------mnbvw$\n   (Alice replies to the challenge with her credentials and\
    \ is then\n   authorized to use the \"external\" relay).\n    MSRP m3nbvx AUTH\n\
    \    To-Path: msrps://intra.example.com:9000/jui787s2f;tcp \\\n             msrps://extra.example.com;tcp\n\
    \    From-Path: msrps://alice.example.com:9892/98cjs;tcp\n    Authorization: Digest\
    \ username=\"Alice\",\n                   realm=\"extra.example.com\", \\\n  \
    \                 nonce=\"Uumu8cAV38FGsEF31VLevIbNXj9HWO\", \\\n             \
    \      qop=auth, nc=00000001, cnonce=\"85a0dca8\", \\\n                   response=\"\
    cb06c4a77cd90918cd7914432032e0e6\"\n    -------m3nbvx$\n    MSRP m4nbvx AUTH\n\
    \    To-Path: msrps://extra.example.com;tcp\n    From-Path: msrps://intra.example.com:9000/jui787s2f;tcp\
    \ \\\n               msrps://alice.example.com:9892/98cjs;tcp\n    Authorization:\
    \ Digest username=\"Alice\",\n                   realm=\"extra.example.com\",\
    \ \\\n                   nonce=\"Uumu8cAV38FGsEF31VLevIbNXj9HWO\", \\\n      \
    \             qop=auth, nc=00000001, cnonce=\"85a0dca8\", \\\n               \
    \    response=\"cb06c4a77cd90918cd7914432032e0e6\"\n    -------m4nbvx$\n    MSRP\
    \ m4nbvx 200 OK\n    To-Path: msrps://intra.example.com:9000/jui787s2f;tcp \\\n\
    \             msrps://alice.example.com:9892/98cjs;tcp\n    From-Path: msrps://extra.example.com;tcp\n\
    \    Use-Path: msrps://intra.example.com:9000/jui787s2f;tcp \\\n             \
    \ msrps://extra.example.com:9000/mywdEe1233;tcp\n    Authentication-Info: nextnonce=\"\
    bz8V080GEA2sLyEDpITF2AZCq7gIkc\", \\\n                         rspauth=\"72f109ed2755d7ed0d0a213ec653b3f2\"\
    , \\\n                         cnonce=\"85a0dca8\", nc=00000001, qop=auth\n  \
    \  Expires: 1800\n    -------m4nbvx$\n    MSRP m3nbvx 200 OK\n    To-Path: msrps://alice.example.com:9892/98cjs;tcp\n\
    \    From-Path: msrps://intra.example.com:9000/jui787s2f;tcp \\\n            \
    \   msrps://extra.example.com;tcp\n    Use-Path: msrps://extra.example.com:9000/mywdEe1233;tcp\
    \ \\\n              msrps://extra.example.com:9000/mywdEe1233;tcp\n    Authentication-Info:\
    \ nextnonce=\"bz8V080GEA2sLyEDpITF2AZCq7gIkc\", \\\n                         rspauth=\"\
    72f109ed2755d7ed0d0a213ec653b3f2\", \\\n                         cnonce=\"85a0dca8\"\
    , nc=00000001, qop=auth\n    Expires: 1800\n    -------m3nbvx$\n"
- title: 5.2.  Sending Requests
  contents:
  - "5.2.  Sending Requests\n   The procedure for forming SEND and REPORT requests\
    \ is identical for\n   clients whether or not relays are involved.  The specific\
    \ procedures\n   are described in Section 7 of the core MSRP protocol.\n   As\
    \ usual, once the next-hop URI is determined, the client MUST find\n   the appropriate\
    \ address, port, and transport to use and then check if\n   there is already a\
    \ suitable existing connection to the next-hop\n   target.  If so, the client\
    \ MUST send the request over the most\n   suitable connection.  Suitability MAY\
    \ be determined by a variety of\n   factors such as measured load and local policy,\
    \ but in most simple\n   implementations a connection will be suitable if it exists\
    \ and is\n   active.\n"
- title: 5.3.  Receiving Requests
  contents:
  - "5.3.  Receiving Requests\n   The procedure for receiving requests is identical\
    \ for clients whether\n   or not relays are involved.\n"
- title: 5.4.  Managing Connections
  contents:
  - "5.4.  Managing Connections\n   Clients should open a connection whenever they\
    \ wish to deliver a\n   request and no suitable connection exists.  For connections\
    \ to\n   relays, the client should leave a connection up until no sessions\n \
    \  have used it for a locally defined period of time, which defaults to\n   5\
    \ minutes for foreign relays and one hour for the client's relays.\n"
- title: 6.  Relay Behavior
  contents:
  - '6.  Relay Behavior

    '
- title: 6.1.  Handling Incoming Connections
  contents:
  - "6.1.  Handling Incoming Connections\n   When a relay receives an incoming connection\
    \ on a port configured for\n   TLS, it includes a client CertificateRequest in\
    \ the same record in\n   which it sends its ServerHello.  If the TLS client provides\
    \ a\n   certificate, the server verifies it and continues if the certificate\n\
    \   is valid and rooted in a trusted authority.  If the TLS client does\n   not\
    \ provide a certificate, the server assumes that the client is an\n   MSRP endpoint\
    \ and invokes Digest authentication.  Once a TCP or TLS\n   channel is negotiated,\
    \ the server waits for up to 30 seconds to\n   receive an MSRP request over the\
    \ channel.  If no request is received\n   in that time, the server closes the\
    \ connection.  If no successful\n   requests are sent during this probationary\
    \ period, the server closes\n   the connection.  Likewise, if several unsuccessful\
    \ requests are sent\n   during the probation period and no requests are sent successfully,\n\
    \   the server SHOULD close the connection.\n"
- title: 6.2.  Generic Request Behavior
  contents:
  - "6.2.  Generic Request Behavior\n   Upon receiving a new request, relays first\
    \ verify the validity of the\n   request.  Relays then examine the first URI in\
    \ the To-Path header and\n   remove this URI if it matches a URI corresponding\
    \ to the relay.  If\n   the request is not addressed to the relay, the relay immediately\n\
    \   drops the corresponding connection over which the request was\n   received.\n"
- title: 6.3.  Receiving AUTH Requests
  contents:
  - "6.3.  Receiving AUTH Requests\n   When a relay receives an AUTH request, the\
    \ first thing it does is to\n   authenticate and authorize the previous hop and\
    \ the client at the far\n   end.  If there are no other relays between this relay\
    \ and the client,\n   then these are the same thing.\n   When the previous hop\
    \ is a relay, authentication is done with TLS\n   using mutual authentication.\
    \  If the TLS client presented a host\n   certificate, the relay checks that the\
    \ subjectAltName in the\n   certificate of the TLS client matches the hostname\
    \ in the first From-\n   Path URI.  If the TLS client doesn't provide a host certificate,\
    \ the\n   relay assumes the TLS client is an MSRP client and sends it a\n   challenge.\n\
    \   Authorization is a matter of local policy at the relay.  Many relays\n   will\
    \ choose to authorize all relays that can be authenticated,\n   possibly in conjunction\
    \ with a blacklisting mechanism.  Relays\n   intended to operate only within a\
    \ limited federation may choose to\n   authorize only those relays whose identity\
    \ appears in a provisioned\n   list.  Other authorization policies may also be\
    \ applied.\n   When the previous hop is a client, the previous hop is the same\
    \ as\n   the identity of the client.  The relay checks the credentials\n   (username\
    \ and password) provided by the client in the Authorization\n   header and checks\
    \ if this client is allowed to use the relay.  If the\n   client is not authorized,\
    \ the relay returns a 403 response.  If the\n   client has requested a particular\
    \ expiration time in an Expires\n   header, the relay needs to check that the\
    \ time is acceptable to it\n   and, if not, return an error containing a Min-Expires\
    \ or Max-Expires\n   header, as appropriate.\n   Next the relay will generate\
    \ an MSRP URI that allows messages to be\n   forwarded to or from this previous\
    \ hop.  If the previous hop was a\n   relay authenticated by mutual TLS, then\
    \ the URI MUST be valid to\n   route across any connection the relay has to the\
    \ previous hop relay.\n   If the previous hop is a client, then the URI MUST only\
    \ be valid to\n   route across the same connection over which the AUTH request\
    \ was\n   received.  If the client's connection is closed and then reopened,\n\
    \   the URI MUST be invalidated.\n   If the AUTH request contains an Expires header,\
    \ the relay MUST ensure\n   that the URI is invalidated after the expiry time.\
    \  The URI MUST\n   contain at least 64 bits of cryptographically random material\
    \ so that\n   it is not guessable by attackers.  If a relay is requested to forward\n\
    \   a message for which the URI is not valid, the relay MUST discard the\n   message\
    \ and MAY send a REPORT indicating that the AUTH URI was bad.\n   A successful\
    \ AUTH response returns a Use-Path header that contains an\n   MSRP URI that the\
    \ client can use.  It also returns an Expires header\n   that indicates how long\
    \ the URI will be valid (expressed as a whole\n   number of seconds).\n   If a\
    \ relay receives several unsuccessful AUTH requests from a client\n   that is\
    \ directly connected to it via TLS, the relay SHOULD terminate\n   the corresponding\
    \ connection.  Similarly, if a relay forwards several\n   failed AUTH requests\
    \ to the same destination that originate from a\n   client that is directly connected\
    \ to it via TLS, the relay SHOULD\n   terminate the corresponding connection.\
    \  Determination of a remote\n   AUTH failure can be made by observing an AUTH\
    \ request containing an\n   Authorization header that triggers a 401 response\
    \ without a\n   \"stale=TRUE\" indication.  These preventive measures apply only\
    \ to a\n   connection between a relay and a client; a relay SHOULD NOT use\n \
    \  excessive AUTH request failures as a reason to terminate a connection\n   with\
    \ another relay.\n"
- title: 6.4.  Forwarding
  contents:
  - "6.4.  Forwarding\n   Before any request is forwarded, the relay MUST check that\
    \ the first\n   URI in the To-Path header corresponds to a URI that this relay\
    \ has\n   created and handed out in the Use-Path header of an AUTH request.\n\
    \   Next it verifies that either 1) the next hop is the next hop back\n   toward\
    \ the client that obtained this URI, or 2) the previous hop was\n   the correct\
    \ previous hop coming from the client that obtained this\n   URI.\n   Since transact-id\
    \ values are not allowed to conflict on a given\n   connection, a relay will generally\
    \ need to construct a new transact-\n   id value for any request that it forwards.\n"
- title: 6.4.1.  Forwarding SEND Requests
  contents:
  - "6.4.1.  Forwarding SEND Requests\n   If an incoming SEND request contains a Failure-Report\
    \ header with a\n   value of \"yes\", an MSRP relay that receives that SEND request\
    \ MUST\n   respond with a final response immediately.  A 200-class response\n\
    \   indicates the successful receipt of a message fragment but does not\n   mean\
    \ that the message has been forwarded on to the next hop.  The\n   final response\
    \ to the SEND MUST be sent only to the previous hop,\n   which could be an MSRP\
    \ relay or the original sender of the SEND\n   request.\n   If the Failure-Report\
    \ header is \"yes\", then the relay MUST run a\n   timer to detect if transmission\
    \ to the next hop fails.  The timer\n   starts when the last byte of the message\
    \ has been sent to the next\n   hop.  If after 30 seconds the next hop has not\
    \ sent any response,\n   then the relay MUST construct a REPORT with a status\
    \ code of 408 to\n   indicate a timeout error happened sending the message, and\
    \ send the\n   REPORT to the original sender of the message.\n   If the Failure-Report\
    \ header is \"yes\" or \"partial\", and if there is a\n   problem processing the\
    \ SEND request or if an error response is\n   received for that SEND request,\
    \ then the relay MUST respond with an\n   appropriate error response in a REPORT\
    \ back to the original source of\n   the message.\n   The MSRP relay MAY further\
    \ break up the message fragment received in\n   the SEND request into smaller\
    \ fragments and forward them to the next\n   hop in separate SEND requests.  It\
    \ MAY also combine message fragments\n   received before or after this SEND request,\
    \ and forward them out in a\n   single SEND request to the next hop identified\
    \ in the To-Path header.\n   The MSRP relay MUST NOT combine message fragments\
    \ from SEND requests\n   with different values in the Message-ID header.\n   The\
    \ MSRP relay MAY choose whether to further fragment the message, or\n   combine\
    \ message fragments, or send the message as is, based on some\n   policy that\
    \ is administered, or based on the network speed to the\n   next hop, or any other\
    \ mechanism.\n   If the MSRP relay has knowledge of the byte range that it will\n\
    \   transmit to the next hop, it SHOULD update the Byte-Range header in\n   the\
    \ SEND request appropriately.\n   Before forwarding the SEND request to the next\
    \ hop, the MSRP relay\n   MUST inspect the first URI in the To-Path header.  If\
    \ it indicates\n   this relay, the relay removes this URI from the To-Path header\
    \ and\n   inserts this URI in the From-Path header before any other URIs.  If\n\
    \   it does not indicate this relay, there has been an error in\n   forwarding\
    \ at a previous hop.  In this case, the relay SHOULD discard\n   the message,\
    \ and if the Failure-Report header is set to \"yes\", the\n   relay SHOULD generate\
    \ a failure report.\n"
- title: 6.4.2.  Forwarding Non-SEND Requests
  contents:
  - "6.4.2.  Forwarding Non-SEND Requests\n   An MSRP relay that receives any request\
    \ other than a SEND request\n   (including new methods unknown to the relay) first\
    \ follows the\n   validation and authorization rules for all requests.  Then the\
    \ relay\n   moves its URI from the beginning of the To-Path headers to the\n \
    \  beginning of the From-Path header and forwards the request on to the\n   next\
    \ hop.  If it already has a connection to the next hop, it SHOULD\n   use this\
    \ connection and not form a new connection.  If no suitable\n   connection exists,\
    \ the relay opens a new connection.\n   Requests with an unknown method are forwarded\
    \ as if they were REPORT\n   requests.  An MSRP node MAY be configured to block\
    \ unknown methods\n   for security reasons.\n"
- title: 6.4.3.  Handling Responses
  contents:
  - "6.4.3.  Handling Responses\n   Relays receiving a response first verify that\
    \ the first URI in the\n   To-Path corresponds to itself; if not, the response\
    \ SHOULD be\n   dropped.  Likewise, if the message cannot be parsed, the relay\
    \ MUST\n   drop the response.  Next the relay determines if there are additional\n\
    \   URIs in the To-Path.  (For responses to SEND requests there will be\n   no\
    \ additional URIs, whereas responses to AUTH requests have\n   additional URIs\
    \ directing the response back to the client.)\n   If the response matches an existing\
    \ transaction, then that\n   transaction is completed and any timers running on\
    \ it can be removed.\n   If the response is a non 200 response, and the original\
    \ request was a\n   SEND request that had a Failure-Report header with a value\
    \ other than\n   \"no\", then the relay MUST send a REPORT indicating the nature\
    \ of the\n   failure.  The response code received by the relay is used to form\
    \ the\n   status line in the REPORT that the relay sends.\n   If there are additional\
    \ URIs in the To-Path header, the relay MUST\n   then move its URI from the To-Path\
    \ header, insert its URI in front of\n   any other URIs in the From-Path header,\
    \ and forward the response to\n   the next URI in the To-Path header.  The relay\
    \ sends the request over\n   the best connection that corresponds to the next\
    \ URI in the To-Path\n   header.  If this connection has closed, then the response\
    \ is silently\n   discarded.\n"
- title: 6.5.  Managing Connections
  contents:
  - "6.5.  Managing Connections\n   Relays should keep connections open as long as\
    \ possible.  If a\n   connection has not been used in a significant time (more\
    \ than one\n   hour), it MAY be closed.  If the relay runs out of resources and\
    \ can\n   no longer establish new connections, it SHOULD start closing existing\n\
    \   connections.  It MAY choose to close the connections based on a least\n  \
    \ recently used basis.\n"
- title: 7.  Formal Syntax
  contents:
  - "7.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n\
    \   Form (ABNF) as described in RFC 4234 [10].\n   ; This ABNF imports all the\
    \ definitions in the ABNF of RFC 4975.\n   header =/  Expires / Min-Expires /\
    \ Max-Expires / Use-Path /\n              WWW-Authenticate / Authorization / Authentication-Info\n\
    \              ; this adds to the rule in RFC 4975\n   mAUTH               = %x41.55.54.48\
    \           ; AUTH in caps\n   method              =/ mAUTH\n                \
    \         ; this adds to the rule in RFC 4975\n   WWW-Authenticate    = \"WWW-Authenticate:\"\
    \ SP \"Digest\" SP digest-param\n                         *(\",\" SP digest-param)\n\
    \   digest-param        = ( realm / nonce / [ opaque ] / [ stale ] / [\n     \
    \                    algorithm ] / qop-options  / [auth-param] )\n   realm   \
    \            = \"realm=\" realm-value\n   realm-value         = quoted-string\n\
    \   auth-param          = token \"=\" ( token / quoted-string )\n   nonce    \
    \           = \"nonce=\" nonce-value\n   nonce-value         = quoted-string\n\
    \   opaque              = \"opaque=\" quoted-string\n   stale               =\
    \ \"stale=\" ( \"true\" / \"false\" )\n   algorithm           = \"algorithm=\"\
    \ ( \"MD5\" / token )\n   qop-options         = \"qop=\" DQUOTE qop-list DQUOTE\n\
    \   qop-list            = qop-value *( \",\" qop-value )\n   qop-value       \
    \    = \"auth\" / token\n   Authorization       = \"Authorization:\" SP credentials\n\
    \   credentials         = \"Digest\" SP digest-response\n                    \
    \     *( \",\" SP digest-response)\n   digest-response     = ( username / realm\
    \ / nonce / response / [\n                         algorithm ] / cnonce / [opaque]\
    \ / message-qop /\n                         [nonce-count]  / [auth-param] )\n\
    \   username            = \"username=\" username-value\n   username-value    \
    \  = quoted-string\n   message-qop         = \"qop=\" qop-value\n   cnonce   \
    \           = \"cnonce=\" cnonce-value\n   cnonce-value        = nonce-value\n\
    \   nonce-count         = \"nc=\" nc-value\n   nc-value            = 8LHEX\n \
    \  response            = \"response=\" request-digest\n   request-digest     \
    \ = DQUOTE 32LHEX DQUOTE\n   LHEX                = DIGIT / %x61-66 ;lowercase\
    \ a-f\n   Authentication-Info =  \"Authentication-Info:\" SP ainfo\n         \
    \                 *(\",\" ainfo)\n   ainfo               =  nextnonce / message-qop\n\
    \                           / response-auth / cnonce\n                       \
    \    / nonce-count\n   nextnonce           =  \"nextnonce=\" nonce-value\n   response-auth\
    \       =  \"rspauth=\" response-digest\n   response-digest     =  DQUOTE *LHEX\
    \ DQUOTE\n   Expires     = \"Expires:\" SP 1*DIGIT\n   Min-Expires = \"Min-Expires:\"\
    \ SP 1*DIGIT\n   Max-Expires = \"Max-Expires:\" SP 1*DIGIT\n   Use-Path = \"Use-Path:\"\
    \ SP MSRP-URI *(SP MSRP-URI)\n"
- title: 8.  Finding MSRP Relays
  contents:
  - "8.  Finding MSRP Relays\n   When resolving an MSRP URI that contains an explicit\
    \ port number, an\n   MSRP node follows the rules in Section 6 of the MSRP base\n\
    \   specification.  MSRP URIs exchanged in SDP and in To-Path and From-\n   Path\
    \ headers in non-AUTH requests MUST have an explicit port number.\n   (The only\
    \ message in this specification that can have an MSRP URI\n   without an explicit\
    \ port number is in the To-Path header in an AUTH\n   request.)  Similarly, if\
    \ the authority component of an msrps: URI\n   contains an IPv4 address or an\
    \ IPv6 reference, a port number MUST be\n   present.\n   The following rules allow\
    \ MSRP clients to discover MSRP relays more\n   easily in AUTH requests.  If the\
    \ authority component contains a\n   domain name and an explicit port number is\
    \ provided, attempt to look\n   up a valid address record (A or AAAA) for the\
    \ domain name.  Connect\n   using TLS over the default transport (TCP) with the\
    \ provided port\n   number.\n   If a domain name is provided but no port number,\
    \ perform a DNS SRV\n   [4] lookup for the '_msrps' service and '_tcp' transport\
    \ at the\n   domain name, and follow the Service Record (SRV) selection algorithm\n\
    \   defined in that specification to select the entry.  (An '_msrp'\n   service\
    \ is not defined, since AUTH requests are only sent over TLS.)\n   If no SRVs\
    \ are found, try an address lookup (A or AAAA) for the\n   domain name.  Connect\
    \ using TLS over the default transport (TCP) with\n   the default port number\
    \ (2855).  Note that AUTH requests MUST only be\n   sent over a TLS-protected\
    \ channel.  An SRV lookup in the example.com\n   domain might return:\n   ;; in\
    \ example.com.      Pri Wght Port Target\n   _msrps._tcp   IN SRV    0   1   \
    \ 9000 server1.example.com.\n   _msrps._tcp   IN SRV    0   2    9000 server2.example.com.\n\
    \   If implementing a relay farm, it is RECOMMENDED that each member of\n   the\
    \ relay farm have an SRV entry.  If any members of the farm have\n   multiple\
    \ IP addresses (for example, an IPv4 and an IPv6 address),\n   each of these addresses\
    \ SHOULD be registered in DNS as separate A or\n   AAAA records corresponding\
    \ to a single target.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This section first describes the security mechanisms\
    \ available for\n   use in MSRP.  Then the threat model is presented.  Finally,\
    \ we list\n   implementation requirements related to security.\n"
- title: 9.1.  Using HTTP Authentication
  contents:
  - "9.1.  Using HTTP Authentication\n   AUTH requests MUST be authenticated.  The\
    \ authentication mechanism\n   described in this specification uses HTTP Digest\
    \ authentication.\n   HTTP Digest authentication is performed as described in\
    \ RFC 2617 [1],\n   with the following restrictions and modifications:\n   o \
    \ Clients MUST NOT attempt to use Basic authentication, and relays\n      MUST\
    \ NOT request or accept Basic authentication.\n   o  The use of a qop value of\
    \ auth-int makes no sense for MSRP.\n      Integrity protection is provided by\
    \ the use of TLS.  Consequently,\n      MSRP relays MUST NOT indicate a qop of\
    \ auth-int in a challenge.\n   o  The interaction between the MD5-sess algorithm\
    \ and the nextnonce\n      mechanism is underspecified in RFC 2617 [1]; consequently,\
    \ MSRP\n      relays MUST NOT send challenges indicating the MD5-sess algorithm.\n\
    \   o  Clients SHOULD consider the protection space within a realm to be\n   \
    \   scoped to the authority portion of the URI, without regard to the\n      contents\
    \ of the path portion of the URI.  Accordingly, relays\n      SHOULD NOT send\
    \ the \"domain\" parameter on the \"WWW-Authenticate\"\n      header, and clients\
    \ MUST ignore it if present.\n   o  Clients and relays MUST include a qop parameter\
    \ in all \"WWW-\n      Authenticate\" and \"Authorization\" headers.  Note that\
    \ the value of\n      the qop parameter in a \"WWW-Authenticate\" header is quoted,\
    \ but\n      the value of the qop parameter in an \"Authorization\" header or\n\
    \      \"Authentication-Info\" header is not quoted.\n   o  Clients MUST send\
    \ cnonce and nonce-count parameters in all\n      \"Authorization\" headers.\n\
    \   o  The request-URI to be used in calculating H(A2) is the rightmost\n    \
    \  URI in the To-Path header.\n   o  Relays MUST include rspauth, cnonce, nc,\
    \ and qop parameters in a\n      \"Authentication-Info\" header for all \"200\
    \ OK\" responses to an AUTH\n      request.\n   Note that the BNF in RFC 2617\
    \ has a number of errors.  In particular,\n   the value of the uri parameter MUST\
    \ be in quotes; further, the\n   parameters in the Authentication-Info header\
    \ MUST be separated by\n   commas.  The BNF in this document is correct, as are\
    \ the examples in\n   RFC 2617 [1].\n   The use of the nextnonce and nc parameters\
    \ is supported as described\n   in RFC 2617 [1], which provides guidance on how\
    \ and when they should\n   be used.  As a slight modification to the guidance\
    \ provided in RFC\n   2617, implementors of relays should note that AUTH requests\
    \ cannot be\n   pipelined; consequently, there is no detrimental impact on throughput\n\
    \   when relays use the nextnonce mechanism.\n   See Section 5.1 for further information\
    \ on the procedures for client\n   authentication.\n"
- title: 9.2.  Using TLS
  contents:
  - "9.2.  Using TLS\n   TLS is used to authenticate relays to senders and to provide\n\
    \   integrity and confidentiality for the headers being transported.\n   MSRP\
    \ clients and relays MUST implement TLS.  Clients MUST send the\n   TLS ClientExtendedHello\
    \ extended hello information for server name\n   indication as described in RFC\
    \ 4366 [5].  A TLS cipher-suite of\n   TLS_RSA_WITH_AES_128_CBC_SHA [6] MUST be\
    \ supported (other cipher-\n   suites MAY also be supported).  A relay MUST act\
    \ as a TLS server and\n   present a certificate with its identity in the SubjectAltName\
    \ using\n   the choice type of dnsName.  Relay-to-relay connections MUST use TLS\n\
    \   with mutual authentication.  Client-to-relay communications MUST use\n   TLS\
    \ for AUTH requests and responses.\n   The SubjectAltName in the certificate received\
    \ from a relay MUST\n   match the hostname part of the URI, and the certificate\
    \ MUST be valid\n   according to RFC 3280 [12], including having a date that is\
    \ valid and\n   being signed by an acceptable certification authority.  After\n\
    \   validating that such is the case, the device that initiated the TLS\n   connection\
    \ can assume that it has connected to the correct relay.\n   This document does\
    \ not define procedures for using mutual\n   authentication between an MSRP client\
    \ and an MSRP relay.\n   Authentication of clients is handled using the AUTH method\
    \ via the\n   procedures described in Section 5.1 and Section 6.3.  Other\n  \
    \ specifications may define the use of TLS mutual authentication for\n   the purpose\
    \ of authenticating users associated with MSRP clients.\n   Unless operating under\
    \ such other specifications, MSRP clients SHOULD\n   present an empty certificate\
    \ list (if one is requested by the MSRP\n   relay), and MSRP relays SHOULD ignore\
    \ any certificates presented by\n   the client.\n      This behavior is defined\
    \ specifically to allow forward-\n      compatibility with specifications that\
    \ define the use of TLS for\n      client authentication.\n   Note: When relays\
    \ are involved in a session, TCP without TLS is only\n   used when a user that\
    \ does not use relays connects directly to the\n   relay of a user that is using\
    \ relays.  In this case, the client has\n   no way to authenticate the relay other\
    \ than to use the URIs that form\n   a shared secret in the same way those URIs\
    \ are used when no relays\n   are involved.\n"
- title: 9.3.  Threat Model
  contents:
  - "9.3.  Threat Model\n   This section discusses the threat model and the broad\
    \ mechanism that\n   needs to be in place to secure the protocol.  The next section\n\
    \   describes the details of how the protocol mechanism meets the broad\n   requirements.\n\
    \   MSRP allows two peer-to-peer clients to exchange messages.  Each peer\n  \
    \ can select a set of relays to perform certain policy operations for\n   them.\
    \  This combined set of relays is referred to as the route set.\n   A channel\
    \ outside of MSRP always needs to exist, such as out-of-band\n   provisioning\
    \ or an explicit rendezvous protocol such as SIP, that can\n   securely negotiate\
    \ setting up the MSRP session and communicate the\n   route set to both clients.\
    \  A client may trust a relay with certain\n   types of routing and policy decisions,\
    \ but it might or might not\n   trust the relay with all the contents of the session.\
    \  For example, a\n   relay being trusted to look for viruses would probably need\
    \ to be\n   allowed to see all the contents of the session.  A relay that helped\n\
    \   deal with traversal of the ISP's Network Address Translator (NAT)\n   would\
    \ likely not be trusted with the contents of the session but\n   would be trusted\
    \ to correctly forward messages.\n   Clients implicitly trust the relays through\
    \ which they send and\n   receive messages to honor the routing indicated in those\
    \ messages,\n   within the constraints of the MSRP protocol.  Clients also need\
    \ to\n   trust that the relays they use do not insert new messages on their\n\
    \   behalf or modify messages sent to or by the clients.  It is worth\n   noting\
    \ that some relays are in a position to cause a client to\n   misroute a message\
    \ by maliciously modifying a Use-Path returned by a\n   relay further down the\
    \ chain.  However, this is not an additional\n   security threat because these\
    \ same relays can also decide to misroute\n   a message in the first place.  If\
    \ the relay is trusted to route\n   messages, it is reasonable to trust it not\
    \ to tamper with the Use-\n   Path header.  If the relay cannot be trusted to\
    \ route messages, then\n   it cannot be used.\n   Under certain circumstances,\
    \ relays need to trust other relays not to\n   modify information between them\
    \ and the client they represent.  For\n   example, if a client is operating through\
    \ Relay A to get to Relay B,\n   and Relay B is logging messages sent by the client,\
    \ Relay B may be\n   required to authenticate that the messages they logged originate\
    \ with\n   the client, and have not been modified or forged by Relay A.  This\n\
    \   can be done by having the client sign the message.\n   Clients need to be\
    \ able to authenticate that the relay they are\n   communicating with is the one\
    \ they trust.  Likewise, relays need to\n   be able to authenticate that the client\
    \ is the one they are\n   authorized to forward information to.  Clients need\
    \ the option of\n   ensuring that information between the relay and the client\
    \ is\n   integrity protected and confidential to elements other than the\n   relays\
    \ and clients.  To simplify the number of options, traffic\n   between relays\
    \ is always integrity protected and encrypted regardless\n   of whether or not\
    \ the client requests it.  There is no way for the\n   clients to tell the relays\
    \ what strength of cryptographic mechanisms\n   to use between relays other than\
    \ to have the clients choose relays\n   that are administered to require an adequate\
    \ level of security.\n   The system also needs to stop messages from being directed\
    \ to relays\n   that are not supposed to see them.  To keep the relays from being\n\
    \   used in Denial of Service (DoS) attacks, the relays never forward\n   messages\
    \ unless they have a trust relationship with either the client\n   sending or\
    \ the client receiving the message; further, they only\n   forward a message if\
    \ it is coming from or going to the client with\n   which they have the trust\
    \ relationship.  If a relay has a trust\n   relationship with the client that\
    \ is the destination of the message,\n   it should not send the message anywhere\
    \ except to the client that is\n   the destination.\n   Some terminology used\
    \ in this discussion: SClient is the client\n   sending a message and RClient\
    \ is the client receiving a message.\n   SRelay is a relay the sender trusts and\
    \ RRelay is a relay the\n   receiver trusts.  The message will go from SClient\
    \ to SRelay1 to\n   SRelay2 to RRelay2 to RRelay1 to RClient.\n"
- title: 9.4.  Security Mechanism
  contents:
  - "9.4.  Security Mechanism\n   Confidentiality and privacy from elements not in\
    \ the route set is\n   provided by using TLS on all the transports.  Relays always\
    \ use TLS.\n   A client can use unprotected TCP for peer-to-peer MSRP, but any\
    \ time\n   a client communicates with its relay, it MUST use TLS.\n   The relays\
    \ authenticate to the clients using TLS (but don't have to\n   do mutual TLS).\
    \  Further, the use of the rspauth parameter in the\n   Authentication-Info header\
    \ provides limited authentication of relays\n   to which the client is not directly\
    \ connected.  The clients\n   authenticate to the relays using HTTP Digest authentication.\
    \  Relays\n   authenticate to each other using TLS mutual authentication.\n  \
    \ By using Secure/Multipurpose Internet Mail Extensions (S/MIME) [3]\n   encryption,\
    \ the clients can protect their actual message contents so\n   that the relays\
    \ cannot see the contents.  End-to-end signing is also\n   possible with S/MIME.\n\
    \   The complex part is making sure that relays cannot successfully be\n   instructed\
    \ to send messages to a place where they should not.  This\n   is done by having\
    \ the client authenticate to the relay and having the\n   relay return a token.\
    \  Messages that contain this token can be\n   relayed if they come from the client\
    \ that got the token or if they\n   are being forwarded towards the client that\
    \ got the token.  The\n   tokens are the URIs that the relay places in the Use-Path\
    \ header.\n   The tokens contain random material (defined in Section 6.3) so that\n\
    \   they are not guessable by attackers.  The tokens need to be protected\n  \
    \ so they are only ever seen by elements in the route set or other\n   elements\
    \ that at least one of the parties trusts.  If some third\n   party discovers\
    \ the token that RRelay2 uses to forward messages to\n   RClient, then that third\
    \ party can send as many messages as they want\n   to RRelay2 and it will forward\
    \ them to RClient.  The third party\n   cannot cause them to be forwarded anywhere\
    \ except to RClient,\n   eliminating the open relay problems.  SRelay1 will not\
    \ forward the\n   message unless it contains a valid token.\n   When SClient goes\
    \ to get a token from SRelay2, this request is\n   relayed through SRelay1.  SRelay2\
    \ authenticates that it really is\n   SClient requesting the token, but it generates\
    \ a token that is only\n   valid for forwarding messages to or from SRelay1. \
    \ SRelay2 knows it\n   is connected to SRelay1 because of the mutual TLS.\n  \
    \ The tokens are carried in the resource portion of the MSRP URIs.  The\n   length\
    \ of time the tokens are valid for is negotiated using the\n   Expire header in\
    \ the AUTH request.  Clients need to re-negotiate the\n   tokens using a new offer/answer\
    \ [15] exchange (e.g., a SIP re-invite)\n   before the tokens expire.\n   Note\
    \ that this scheme relies on relays as trusted nodes, acting on\n   behalf of\
    \ the users authenticated to them.  There is no security\n   mechanism to prevent\
    \ relays on the path from inserting forged\n   messages, manipulating the contents\
    \ of messages, sending messages in\n   a session to a party other than that specified\
    \ by the sender, or from\n   copying them to a third party.  However, the one-to-one\
    \ binding\n   between session identifiers and sessions helps mitigate any damage\n\
    \   that can be caused by rogue relays by limiting the destinations to\n   which\
    \ forged or modified messages can be sent to the two parties\n   involved in the\
    \ session, and only for the duration of the session.\n   Additionally, the use\
    \ of S/MIME encryption can be employed to limit\n   the utility of redirecting\
    \ messages.  Finally, clients can employ\n   S/MIME signatures to guarantee the\
    \ authenticity of messages they\n   send, making it possible under some circumstances\
    \ to detect relay\n   manipulation or the forging of messages.\n   Clients are\
    \ not the only actors in the network who need to trust\n   relays to act in non-malicious\
    \ ways.  If a relay does not have a\n   direct TLS connection with the client\
    \ on whose behalf it is acting\n   (i.e.  There are one or more intervening relays),\
    \ it is at the mercy\n   of any such intervening relays to accurately transmit\
    \ the messages\n   sent to and from the client.  If a stronger guarantee of the\n\
    \   authentic origin of a message is necessary (e.g.  The relay is\n   performing\
    \ logging of messages as part of a legal requirement), then\n   users of that\
    \ relay can be instructed by their administrators to use\n   detached S/MIME signatures\
    \ on all messages sent by their client.  The\n   relay can enforce such a policy\
    \ by returning a 415 response to any\n   SEND requests using a top-level MIME\
    \ type other than \"multipart/\n   signed\".  Such relays may choose to make policy\
    \ decisions (such as\n   terminating sessions and/or suspending user authorization)\
    \ if such\n   signatures fail to match the contents of the message.\n"
- title: 10.  IANA Considerations
  contents:
  - '10.  IANA Considerations

    '
- title: 10.1.  New MSRP Method
  contents:
  - "10.1.  New MSRP Method\n   This specification defines a new MSRP method, to be\
    \ added to the\n   Methods sub-registry under the MSRP Parameters registry: AUTH.\
    \  See\n   Section 5.1 for details on the AUTH method.\n"
- title: 10.2.  New MSRP Headers
  contents:
  - "10.2.  New MSRP Headers\n   This specification defines several new MSRP header\
    \ fields, to be\n   added to the header-field sub-registry under the MSRP Parameters\n\
    \   registry:\n   o  Expires\n   o  Min-Expires\n   o  Max-Expires\n   o  Use-Path\n\
    \   o  WWW-Authenticate\n   o  Authorization\n   o  Authentication-Info\n"
- title: 10.3.  New MSRP Response Codes
  contents:
  - "10.3.  New MSRP Response Codes\n   This specification defines one new MSRP status\
    \ code, to be added to\n   the Status-Code sub-registry under the MSRP Parameters\
    \ registry:\n   The 401 response indicates that an AUTH request contained no\n\
    \   credentials, an expired nonce value, or invalid credentials.  The\n   response\
    \ includes a \"WWW-Authenticate\" header containing a challenge\n   (among other\
    \ fields); see Section 9.1 for further details.  The\n   default response phrase\
    \ for this response is \"Unauthorized\".\n"
- title: 11.  Example SDP with Multiple Hops
  contents:
  - "11.  Example SDP with Multiple Hops\n   The following section shows an example\
    \ SDP that could occur in a SIP\n   message to set up an MSRP session between\
    \ Alice and Bob where Bob\n   uses a relay.  Alice makes an offer with a path\
    \ to Alice.\n    c=IN IP4 a.example.com\n    m=message 1234 TCP/MSRP *\n    a=accept-types:\
    \ message/cpim text/plain text/html\n    a=path:msrp://a.example.com:1234/agic456;tcp\n\
    \   In this offer, Alice wishes to receive MSRP messages at\n   a.example.com.\
    \  She wants to use TCP as the transport for the MSRP\n   session.  She can accept\
    \ message/cpim, text/plain, and text/html\n   message bodies in SEND requests.\
    \  She does not need a relay to set up\n   the MSRP session.\n   To this offer,\
    \ Bob's answer could look like:\n    c=IN IP4 bob.example.com\n    m=message 1234\
    \ TCP/TLS/MSRP *\n    a=accept-types: message/cpim text/plain\n    a=path:msrps://relay.example.com:9000/hjdhfha;tcp\
    \  \\\n           msrps://bob.example.com:1234/fuige;tcp\n   Here Bob wishes to\
    \ receive the MSRP messages at bob.example.com.  He\n   can accept only message/cpim\
    \ and text/plain message bodies in SEND\n   requests and has rejected the text/html\
    \ content offered by Alice.  He\n   wishes to use a relay called relay.example.com\
    \ for the MSRP session.\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   Many thanks to Avshalom Houri, Hisham Khartabil, Robert\
    \ Sparks,\n   Miguel Garcia, Hans Persson, and Orit Levin, who provided detailed\n\
    \   proofreading and helpful text.  Thanks to the following members of\n   the\
    \ SIMPLE WG for spirited discussions on session mode: Chris\n   Boulton, Ben Campbell,\
    \ Juhee Garg, Paul Kyzivat, Allison Mankin, Aki\n   Niemi, Pekka Pessi, Jon Peterson,\
    \ Brian Rosen, Jonathan Rosenberg,\n   and Dean Willis.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [1]   Franks, J., Hallam-Baker, P., Hostetler,\
    \ J., Lawrence, S.,\n         Leach, P., Luotonen, A., and L. Stewart, \"HTTP\
    \ Authentication:\n         Basic and Digest Access Authentication\", RFC 2617,\
    \ June 1999.\n   [2]   Dierks, T. and E. Rescorla, \"The Transport Layer Security\
    \ (TLS)\n         Protocol Version 1.1\", RFC 4346, April 2006.\n   [3]   Ramsdell,\
    \ B., \"Secure/Multipurpose Internet Mail Extensions\n         (S/MIME) Version\
    \ 3.1 Message Specification\", RFC 3851, July\n         2004.\n   [4]   Gulbrandsen,\
    \ A., Vixie, P., and L. Esibov, \"A DNS RR for\n         specifying the location\
    \ of services (DNS SRV)\", RFC 2782,\n         February 2000.\n   [5]   Blake-Wilson,\
    \ S., Nystrom, M., Hopwood, D., Mikkelsen, J., and\n         T. Wright, \"Transport\
    \ Layer Security (TLS) Extensions\", RFC\n         4366, April 2006.\n   [6] \
    \  Chown, P., \"Advanced Encryption Standard (AES) Ciphersuites for\n        \
    \ Transport Layer Security (TLS)\", RFC 3268, June 2002.\n   [7]   Handley, M.,\
    \ Jacobson, V., and C. Perkins, \"SDP: Session\n         Description Protocol\"\
    , RFC 4566, July 2006.\n   [8]   Rosenberg, J., Schulzrinne, H., Camarillo, G.,\
    \ Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [9]\
    \   Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n       \
    \  Levels\", BCP 14, RFC 2119, March 1997.\n   [10]  Crocker, D. and P. Overell,\
    \ \"Augmented BNF for Syntax\n         Specifications: ABNF\", RFC 4234, October\
    \ 2005.\n   [11]  Campbell, B., Ed., Mahy, R., Ed., and C. Jennings, Ed., \"The\n\
    \         Message Session Relay Protocol (MSRP)\", RFC 4975, September\n     \
    \    2007.\n   [12]  Housley, R., Polk, W., Ford, W., and D. Solo, \"Internet\
    \ X.509\n         Public Key Infrastructure Certificate and Certificate\n    \
    \     Revocation List (CRL) Profile\", RFC 3280, April 2002.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [13]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n         Extensions (MIME) Part One: Format of Internet Message\
    \ Bodies\",\n         RFC 2045, November 1996.\n   [14]  Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n         Extensions (MIME) Part Two: Media Types\"\
    , RFC 2046, November\n         1996.\n   [15]  Rosenberg, J. and H. Schulzrinne,\
    \ \"An Offer/Answer Model with\n         Session Description Protocol (SDP)\"\
    , RFC 3264, June 2002.\n"
- title: Appendix A.  Implementation Considerations
  contents:
  - "Appendix A.  Implementation Considerations\n   This text is not necessary in\
    \ order to implement MSRP in an\n   interoperable way, but is still useful as\
    \ an implementation\n   discussion for the community.  It is purely an implementation\
    \ detail.\n   Note: The idea has been proposed of having a relay return a base\
    \ URI\n   that the client can use to construct more URIs, but this allows third\n\
    \   parties that have had a session with the client to know URIs that the\n  \
    \ relay will use for forwarding after the session with the third party\n   has\
    \ ended.  Effectively, this reveals the secret URIs to third\n   parties, which\
    \ compromises the security of the solution, so this\n   approach is not used.\n\
    \   An alternative to this approach causes the relays to return a URI\n   that\
    \ is divided into an index portion and a secret portion.  The\n   client can encrypt\
    \ its identifier and its own opaque data with the\n   secret portion, and concatenate\
    \ this with the index portion to create\n   a plurality of valid URIs.  When the\
    \ relay receives one of these\n   URIs, it could use the index to look up the\
    \ appropriate secret,\n   decrypt the client portion, and verify that it contains\
    \ the client\n   identifier.  The relay can then forward the request.  The client\
    \ does\n   not need to send an AUTH request for each URI it uses.  This is an\n\
    \   implementation detail that is out of the scope of this document.\n   It is\
    \ possible to implement forwarding requirements in a farm without\n   the relay\
    \ saving any state.  One possible implementation that a relay\n   might use is\
    \ described in the rest of this section.  When a relay\n   starts up, it could\
    \ pick a cryptographically random 128-bit password\n   (K) and 128-bit initialization\
    \ vector (IV).  If the relay was\n   actually a farm of servers with the same\
    \ DNS name, all the machines\n   in the farm would need to share the same K. \
    \ When an AUTH request is\n   received, the relay forms a string that contains\
    \ the expiry time of\n   the URI, an indication if the previous hop was mutual\
    \ TLS\n   authenticated or not, and if it was, the name of the previous hop,\n\
    \   and if it was not, the identifier for the connection that received\n   the\
    \ AUTH request.  This string would be padded by appending a byte\n   with the\
    \ value 0x80 then adding zero or more bytes with the value of\n   0x00 until the\
    \ string length is a multiple of 16 bytes long.  A new\n   random IV would be\
    \ selected (it needs to change because it forms the\n   salt) and the padded string\
    \ would be encrypted using AES-CBC with a\n   key of K.  The IV and encrypted\
    \ data and an SPI (security parameter\n   index) that changes each time K changes\
    \ would be base 64 encoded and\n   form the resource portion of the request URI.\
    \  The SPI allows the key\n   to be changed and for the system to know which K\
    \ should be used.\n   Later when the relay receives this URI, it could decrypt\
    \ it and check\n   that the current time was before the expiry time and check\
    \ that the\n   message was coming from or going to the connection or location\n\
    \   specified in the URI.  Integrity protection is not required because\n   it\
    \ is extremely unlikely that random data that was decrypted would\n   result in\
    \ a valid location that was the same as the one the message\n   was routing to\
    \ or from.  When implementing something like this,\n   implementors should be\
    \ careful not to use a scheme like EBE that\n   would allows portions of encrypted\
    \ tokens to be cut and pasted into\n   other URIs.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Cullen Jennings\n   Cisco Systems, Inc.\n   170 West Tasman\
    \ Dr.\n   MS: SJC-21/2\n   San Jose, CA  95134\n   USA\n   Phone: +1 408 421-9990\n\
    \   EMail: fluffy@cisco.com\n   Rohan Mahy\n   Plantronics\n   345 Encincal Street\n\
    \   Santa Cruz, CA  95060\n   USA\n   EMail: rohan@ekabal.com\n   Adam Roach\n\
    \   Estacado Systems\n   17210 Campbell Rd.\n   Suite 250\n   Dallas, TX  75252\n\
    \   USA\n   Phone: sip:adam@estacado.net\n   EMail: adam@estacado.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
