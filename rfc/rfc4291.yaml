- contents:
  - '                  IP Version 6 Addressing Architecture

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This specification defines the addressing architecture of the IP\n
    \  Version 6 (IPv6) protocol.  The document includes the IPv6 addressing\n   model,
    text representations of IPv6 addresses, definition of IPv6\n   unicast addresses,
    anycast addresses, and multicast addresses, and an\n   IPv6 node's required addresses.\n
    \  This document obsoletes RFC 3513, \"IP Version 6 Addressing\n   Architecture\".\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. IPv6 Addressing .................................................2\n      2.1.
    Addressing Model ...........................................3\n      2.2. Text
    Representation of Addresses ...........................4\n      2.3. Text Representation
    of Address Prefixes ....................5\n      2.4. Address Type Identification
    ................................6\n      2.5. Unicast Addresses ..........................................6\n
    \          2.5.1. Interface Identifiers ...............................7\n           2.5.2.
    The Unspecified Address .............................9\n           2.5.3. The
    Loopback Address ................................9\n           2.5.4. Global Unicast
    Addresses ............................9\n           2.5.5. IPv6 Addresses with
    Embedded IPv4 Addresses ........10\n           2.5.6. Link-Local IPv6 Unicast
    Addresses ..................11\n           2.5.7. Site-Local IPv6 Unicast Addresses
    ..................11\n      2.6. Anycast Addresses .........................................12\n
    \          2.6.1. Required Anycast Address ...........................12\n      2.7.
    Multicast Addresses .......................................13\n           2.7.1.
    Pre-Defined Multicast Addresses ....................15\n      2.8. A Node's Required
    Addresses ...............................17\n   3. Security Considerations ........................................18\n
    \  4. IANA Considerations ............................................18\n   5.
    Acknowledgements ...............................................18\n   6. References
    .....................................................18\n      6.1. Normative
    References ......................................18\n      6.2. Informative References
    ....................................18\n   Appendix A: Creating Modified EUI-64
    Format Interface Identifiers .20\n   Appendix B: Changes from RFC 3513 .................................22\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This specification defines the addressing architecture of
    the IP\n   Version 6 protocol.  It includes the basic formats for the various\n
    \  types of IPv6 addresses (unicast, anycast, and multicast).\n"
  title: 1.  Introduction
- contents:
  - "2.  IPv6 Addressing\n   IPv6 addresses are 128-bit identifiers for interfaces
    and sets of\n   interfaces (where \"interface\" is as defined in Section 2 of
    [IPV6]).\n   There are three types of addresses:\n    Unicast:   An identifier
    for a single interface.  A packet sent to a\n               unicast address is
    delivered to the interface identified\n               by that address.\n    Anycast:
    \  An identifier for a set of interfaces (typically\n               belonging
    to different nodes).  A packet sent to an\n               anycast address is delivered
    to one of the interfaces\n               identified by that address (the \"nearest\"
    one, according\n               to the routing protocols' measure of distance).\n
    \   Multicast: An identifier for a set of interfaces (typically\n               belonging
    to different nodes).  A packet sent to a\n               multicast address is
    delivered to all interfaces\n               identified by that address.\n   There
    are no broadcast addresses in IPv6, their function being\n   superseded by multicast
    addresses.\n   In this document, fields in addresses are given a specific name,
    for\n   example, \"subnet\".  When this name is used with the term \"ID\" for\n
    \  identifier after the name (e.g., \"subnet ID\"), it refers to the\n   contents
    of the named field.  When it is used with the term \"prefix\"\n   (e.g., \"subnet
    prefix\"), it refers to all of the address from the\n   left up to and including
    this field.\n   In IPv6, all zeros and all ones are legal values for any field,\n
    \  unless specifically excluded.  Specifically, prefixes may contain, or\n   end
    with, zero-valued fields.\n"
  - contents:
    - "2.1.  Addressing Model\n   IPv6 addresses of all types are assigned to interfaces,
      not nodes.\n   An IPv6 unicast address refers to a single interface.  Since
      each\n   interface belongs to a single node, any of that node's interfaces'\n
      \  unicast addresses may be used as an identifier for the node.\n   All interfaces
      are required to have at least one Link-Local unicast\n   address (see Section
      2.8 for additional required addresses).  A\n   single interface may also have
      multiple IPv6 addresses of any type\n   (unicast, anycast, and multicast) or
      scope.  Unicast addresses with a\n   scope greater than link-scope are not needed
      for interfaces that are\n   not used as the origin or destination of any IPv6
      packets to or from\n   non-neighbors.  This is sometimes convenient for point-to-point\n
      \  interfaces.  There is one exception to this addressing model:\n      A unicast
      address or a set of unicast addresses may be assigned to\n      multiple physical
      interfaces if the implementation treats the\n      multiple physical interfaces
      as one interface when presenting it\n      to the internet layer.  This is useful
      for load-sharing over\n      multiple physical interfaces.\n   Currently, IPv6
      continues the IPv4 model in that a subnet prefix is\n   associated with one
      link.  Multiple subnet prefixes may be assigned\n   to the same link.\n"
    title: 2.1.  Addressing Model
  - contents:
    - "2.2.  Text Representation of Addresses\n   There are three conventional forms
      for representing IPv6 addresses as\n   text strings:\n   1. The preferred form
      is x:x:x:x:x:x:x:x, where the 'x's are one to\n      four hexadecimal digits
      of the eight 16-bit pieces of the address.\n      Examples:\n         ABCD:EF01:2345:6789:ABCD:EF01:2345:6789\n
      \        2001:DB8:0:0:8:800:200C:417A\n      Note that it is not necessary to
      write the leading zeros in an\n      individual field, but there must be at
      least one numeral in every\n      field (except for the case described in 2.).\n
      \  2. Due to some methods of allocating certain styles of IPv6\n      addresses,
      it will be common for addresses to contain long strings\n      of zero bits.
      \ In order to make writing addresses containing zero\n      bits easier, a special
      syntax is available to compress the zeros.\n      The use of \"::\" indicates
      one or more groups of 16 bits of zeros.\n      The \"::\" can only appear once
      in an address.  The \"::\" can also be\n      used to compress leading or trailing
      zeros in an address.\n      For example, the following addresses\n         2001:DB8:0:0:8:800:200C:417A
      \  a unicast address\n         FF01:0:0:0:0:0:0:101           a multicast address\n
      \        0:0:0:0:0:0:0:1                the loopback address\n         0:0:0:0:0:0:0:0
      \               the unspecified address\n      may be represented as\n         2001:DB8::8:800:200C:417A
      \     a unicast address\n         FF01::101                      a multicast
      address\n         ::1                            the loopback address\n         ::
      \                            the unspecified address\n   3. An alternative form
      that is sometimes more convenient when dealing\n      with a mixed environment
      of IPv4 and IPv6 nodes is\n      x:x:x:x:x:x:d.d.d.d, where the 'x's are the
      hexadecimal values of\n      the six high-order 16-bit pieces of the address,
      and the 'd's are\n      the decimal values of the four low-order 8-bit pieces
      of the\n      address (standard IPv4 representation).  Examples:\n         0:0:0:0:0:0:13.1.68.3\n
      \        0:0:0:0:0:FFFF:129.144.52.38\n      or in compressed form:\n         ::13.1.68.3\n
      \        ::FFFF:129.144.52.38\n"
    title: 2.2.  Text Representation of Addresses
  - contents:
    - "2.3.  Text Representation of Address Prefixes\n   The text representation of
      IPv6 address prefixes is similar to the\n   way IPv4 address prefixes are written
      in Classless Inter-Domain\n   Routing (CIDR) notation [CIDR].  An IPv6 address
      prefix is\n   represented by the notation:\n      ipv6-address/prefix-length\n
      \  where\n      ipv6-address    is an IPv6 address in any of the notations listed\n
      \                     in Section 2.2.\n      prefix-length   is a decimal value
      specifying how many of the\n                      leftmost contiguous bits of
      the address comprise\n                      the prefix.\n   For example, the
      following are legal representations of the 60-bit\n   prefix 20010DB80000CD3
      (hexadecimal):\n      2001:0DB8:0000:CD30:0000:0000:0000:0000/60\n      2001:0DB8::CD30:0:0:0:0/60\n
      \     2001:0DB8:0:CD30::/60\n   The following are NOT legal representations
      of the above prefix:\n      2001:0DB8:0:CD3/60   may drop leading zeros, but
      not trailing\n                           zeros, within any 16-bit chunk of the
      address\n      2001:0DB8::CD30/60   address to left of \"/\" expands to\n                           2001:0DB8:0000:0000:0000:0000:0000:CD30\n
      \     2001:0DB8::CD3/60    address to left of \"/\" expands to\n                           2001:0DB8:0000:0000:0000:0000:0000:0CD3\n
      \  When writing both a node address and a prefix of that node address\n   (e.g.,
      the node's subnet prefix), the two can be combined as follows:\n      the node
      address      2001:0DB8:0:CD30:123:4567:89AB:CDEF\n      and its subnet number
      2001:0DB8:0:CD30::/60\n      can be abbreviated as 2001:0DB8:0:CD30:123:4567:89AB:CDEF/60\n"
    title: 2.3.  Text Representation of Address Prefixes
  - contents:
    - "2.4.  Address Type Identification\n   The type of an IPv6 address is identified
      by the high-order bits of\n   the address, as follows:\n      Address type         Binary
      prefix        IPv6 notation   Section\n      ------------         -------------
      \       -------------   -------\n      Unspecified          00...0  (128 bits)
      \  ::/128          2.5.2\n      Loopback             00...1  (128 bits)   ::1/128
      \        2.5.3\n      Multicast            11111111             FF00::/8        2.7\n
      \     Link-Local unicast   1111111010           FE80::/10       2.5.6\n      Global
      Unicast       (everything else)\n   Anycast addresses are taken from the unicast
      address spaces (of any\n   scope) and are not syntactically distinguishable
      from unicast\n   addresses.\n   The general format of Global Unicast addresses
      is described in\n   Section 2.5.4.  Some special-purpose subtypes of Global
      Unicast\n   addresses that contain embedded IPv4 addresses (for the purposes
      of\n   IPv4-IPv6 interoperation) are described in Section 2.5.5.\n   Future
      specifications may redefine one or more sub-ranges of the\n   Global Unicast
      space for other purposes, but unless and until that\n   happens, implementations
      must treat all addresses that do not start\n   with any of the above-listed
      prefixes as Global Unicast addresses.\n"
    title: 2.4.  Address Type Identification
  - contents:
    - "2.5.  Unicast Addresses\n   IPv6 unicast addresses are aggregatable with prefixes
      of arbitrary\n   bit-length, similar to IPv4 addresses under Classless Inter-Domain\n
      \  Routing.\n   There are several types of unicast addresses in IPv6, in particular,\n
      \  Global Unicast, site-local unicast (deprecated, see Section 2.5.7),\n   and
      Link-Local unicast.  There are also some special-purpose subtypes\n   of Global
      Unicast, such as IPv6 addresses with embedded IPv4\n   addresses.  Additional
      address types or subtypes can be defined in\n   the future.\n   IPv6 nodes may
      have considerable or little knowledge of the internal\n   structure of the IPv6
      address, depending on the role the node plays\n   (for instance, host versus
      router).  At a minimum, a node may\n   consider that unicast addresses (including
      its own) have no internal\n   structure:\n   |                           128
      bits                              |\n   +-----------------------------------------------------------------+\n
      \  |                          node address                           |\n   +-----------------------------------------------------------------+\n
      \  A slightly sophisticated host (but still rather simple) may\n   additionally
      be aware of subnet prefix(es) for the link(s) it is\n   attached to, where different
      addresses may have different values for\n   n:\n   |          n bits               |
      \          128-n bits            |\n   +-------------------------------+---------------------------------+\n
      \  |       subnet prefix           |           interface ID          |\n   +-------------------------------+---------------------------------+\n
      \  Though a very simple router may have no knowledge of the internal\n   structure
      of IPv6 unicast addresses, routers will more generally have\n   knowledge of
      one or more of the hierarchical boundaries for the\n   operation of routing
      protocols.  The known boundaries will differ\n   from router to router, depending
      on what positions the router holds\n   in the routing hierarchy.\n   Except
      for the knowledge of the subnet boundary discussed in the\n   previous paragraphs,
      nodes should not make any assumptions about the\n   structure of an IPv6 address.\n"
    - contents:
      - "2.5.1.  Interface Identifiers\n   Interface identifiers in IPv6 unicast addresses
        are used to identify\n   interfaces on a link.  They are required to be unique
        within a subnet\n   prefix.  It is recommended that the same interface identifier
        not be\n   assigned to different nodes on a link.  They may also be unique
        over\n   a broader scope.  In some cases, an interface's identifier will be\n
        \  derived directly from that interface's link-layer address.  The same\n
        \  interface identifier may be used on multiple interfaces on a single\n   node,
        as long as they are attached to different subnets.\n   Note that the uniqueness
        of interface identifiers is independent of\n   the uniqueness of IPv6 addresses.
        \ For example, a Global Unicast\n   address may be created with a local scope
        interface identifier and a\n   Link-Local address may be created with a universal
        scope interface\n   identifier.\n   For all unicast addresses, except those
        that start with the binary\n   value 000, Interface IDs are required to be
        64 bits long and to be\n   constructed in Modified EUI-64 format.\n   Modified
        EUI-64 format-based interface identifiers may have universal\n   scope when
        derived from a universal token (e.g., IEEE 802 48-bit MAC\n   or IEEE EUI-64
        identifiers [EUI64]) or may have local scope where a\n   global token is not
        available (e.g., serial links, tunnel end-points)\n   or where global tokens
        are undesirable (e.g., temporary tokens for\n   privacy [PRIV]).\n   Modified
        EUI-64 format interface identifiers are formed by inverting\n   the \"u\"
        bit (universal/local bit in IEEE EUI-64 terminology) when\n   forming the
        interface identifier from IEEE EUI-64 identifiers.  In\n   the resulting Modified
        EUI-64 format, the \"u\" bit is set to one (1)\n   to indicate universal scope,
        and it is set to zero (0) to indicate\n   local scope.  The first three octets
        in binary of an IEEE EUI-64\n   identifier are as follows:\n          0       0
        0       1 1       2\n         |0       7 8       5 6       3|\n         +----+----+----+----+----+----+\n
        \        |cccc|ccug|cccc|cccc|cccc|cccc|\n         +----+----+----+----+----+----+\n
        \  written in Internet standard bit-order, where \"u\" is the\n   universal/local
        bit, \"g\" is the individual/group bit, and \"c\" is the\n   bits of the company_id.
        \ Appendix A, \"Creating Modified EUI-64 Format\n   Interface Identifiers\",
        provides examples on the creation of Modified\n   EUI-64 format-based interface
        identifiers.\n   The motivation for inverting the \"u\" bit when forming an
        interface\n   identifier is to make it easy for system administrators to hand\n
        \  configure non-global identifiers when hardware tokens are not\n   available.
        \ This is expected to be the case for serial links and\n   tunnel end-points,
        for example.  The alternative would have been for\n   these to be of the form
        0200:0:0:1, 0200:0:0:2, etc., instead of the\n   much simpler 0:0:0:1, 0:0:0:2,
        etc.\n   IPv6 nodes are not required to validate that interface identifiers\n
        \  created with modified EUI-64 tokens with the \"u\" bit set to universal\n
        \  are unique.\n   The use of the universal/local bit in the Modified EUI-64
        format\n   identifier is to allow development of future technology that can
        take\n   advantage of interface identifiers with universal scope.\n   The
        details of forming interface identifiers are defined in the\n   appropriate
        \"IPv6 over <link>\" specification, such as \"IPv6 over\n   Ethernet\" [ETHER],
        and \"IPv6 over FDDI\" [FDDI].\n"
      title: 2.5.1.  Interface Identifiers
    - contents:
      - "2.5.2.  The Unspecified Address\n   The address 0:0:0:0:0:0:0:0 is called
        the unspecified address.  It\n   must never be assigned to any node.  It indicates
        the absence of an\n   address.  One example of its use is in the Source Address
        field of\n   any IPv6 packets sent by an initializing host before it has learned\n
        \  its own address.\n   The unspecified address must not be used as the destination
        address\n   of IPv6 packets or in IPv6 Routing headers.  An IPv6 packet with
        a\n   source address of unspecified must never be forwarded by an IPv6\n   router.\n"
      title: 2.5.2.  The Unspecified Address
    - contents:
      - "2.5.3.  The Loopback Address\n   The unicast address 0:0:0:0:0:0:0:1 is called
        the loopback address.\n   It may be used by a node to send an IPv6 packet
        to itself.  It must\n   not be assigned to any physical interface.  It is
        treated as having\n   Link-Local scope, and may be thought of as the Link-Local
        unicast\n   address of a virtual interface (typically called the \"loopback\n
        \  interface\") to an imaginary link that goes nowhere.\n   The loopback address
        must not be used as the source address in IPv6\n   packets that are sent outside
        of a single node.  An IPv6 packet with\n   a destination address of loopback
        must never be sent outside of a\n   single node and must never be forwarded
        by an IPv6 router.  A packet\n   received on an interface with a destination
        address of loopback must\n   be dropped.\n"
      title: 2.5.3.  The Loopback Address
    - contents:
      - "2.5.4.  Global Unicast Addresses\n   The general format for IPv6 Global Unicast
        addresses is as follows:\n   |         n bits         |   m bits  |       128-n-m
        bits         |\n   +------------------------+-----------+----------------------------+\n
        \  | global routing prefix  | subnet ID |       interface ID         |\n   +------------------------+-----------+----------------------------+\n
        \  where the global routing prefix is a (typically hierarchically-\n   structured)
        value assigned to a site (a cluster of subnets/links),\n   the subnet ID is
        an identifier of a link within the site, and the\n   interface ID is as defined
        in Section 2.5.1.\n   All Global Unicast addresses other than those that start
        with binary\n   000 have a 64-bit interface ID field (i.e., n + m = 64), formatted
        as\n   described in Section 2.5.1.  Global Unicast addresses that start with\n
        \  binary 000 have no such constraint on the size or structure of the\n   interface
        ID field.\n   Examples of Global Unicast addresses that start with binary
        000 are\n   the IPv6 address with embedded IPv4 addresses described in Section\n
        \  2.5.5.  An example of global addresses starting with a binary value\n   other
        than 000 (and therefore having a 64-bit interface ID field) can\n   be found
        in [GLOBAL].\n"
      title: 2.5.4.  Global Unicast Addresses
    - contents:
      - "2.5.5.  IPv6 Addresses with Embedded IPv4 Addresses\n   Two types of IPv6
        addresses are defined that carry an IPv4 address in\n   the low-order 32 bits
        of the address.  These are the \"IPv4-Compatible\n   IPv6 address\" and the
        \"IPv4-mapped IPv6 address\".\n"
      - contents:
        - "2.5.5.1.  IPv4-Compatible IPv6 Address\n   The \"IPv4-Compatible IPv6 address\"
          was defined to assist in the IPv6\n   transition.  The format of the \"IPv4-Compatible
          IPv6 address\" is as\n   follows:\n   |                80 bits               |
          16 |      32 bits        |\n   +--------------------------------------+--------------------------+\n
          \  |0000..............................0000|0000|    IPv4 address     |\n
          \  +--------------------------------------+----+---------------------+\n
          \  Note: The IPv4 address used in the \"IPv4-Compatible IPv6 address\"\n
          \  must be a globally-unique IPv4 unicast address.\n   The \"IPv4-Compatible
          IPv6 address\" is now deprecated because the\n   current IPv6 transition
          mechanisms no longer use these addresses.\n   New or updated implementations
          are not required to support this\n   address type.\n"
        title: 2.5.5.1.  IPv4-Compatible IPv6 Address
      - contents:
        - "2.5.5.2.  IPv4-Mapped IPv6 Address\n   A second type of IPv6 address that
          holds an embedded IPv4 address is\n   defined.  This address type is used
          to represent the addresses of\n   IPv4 nodes as IPv6 addresses.  The format
          of the \"IPv4-mapped IPv6\n   address\" is as follows:\n   |                80
          bits               | 16 |      32 bits        |\n   +--------------------------------------+--------------------------+\n
          \  |0000..............................0000|FFFF|    IPv4 address     |\n
          \  +--------------------------------------+----+---------------------+\n
          \  See [RFC4038] for background on the usage of the \"IPv4-mapped IPv6\n
          \  address\".\n"
        title: 2.5.5.2.  IPv4-Mapped IPv6 Address
      title: 2.5.5.  IPv6 Addresses with Embedded IPv4 Addresses
    - contents:
      - "2.5.6.  Link-Local IPv6 Unicast Addresses\n   Link-Local addresses are for
        use on a single link.  Link-Local\n   addresses have the following format:\n
        \  |   10     |\n   |  bits    |         54 bits         |          64 bits
        \          |\n   +----------+-------------------------+----------------------------+\n
        \  |1111111010|           0             |       interface ID         |\n   +----------+-------------------------+----------------------------+\n
        \  Link-Local addresses are designed to be used for addressing on a\n   single
        link for purposes such as automatic address configuration,\n   neighbor discovery,
        or when no routers are present.\n   Routers must not forward any packets with
        Link-Local source or\n   destination addresses to other links.\n"
      title: 2.5.6.  Link-Local IPv6 Unicast Addresses
    - contents:
      - "2.5.7.  Site-Local IPv6 Unicast Addresses\n   Site-Local addresses were originally
        designed to be used for\n   addressing inside of a site without the need for
        a global prefix.\n   Site-local addresses are now deprecated as defined in
        [SLDEP].\n   Site-Local addresses have the following format:\n   |   10     |\n
        \  |  bits    |         54 bits         |         64 bits            |\n   +----------+-------------------------+----------------------------+\n
        \  |1111111011|        subnet ID        |       interface ID         |\n   +----------+-------------------------+----------------------------+\n
        \  The special behavior of this prefix defined in [RFC3513] must no\n   longer
        be supported in new implementations (i.e., new implementations\n   must treat
        this prefix as Global Unicast).\n   Existing implementations and deployments
        may continue to use this\n   prefix.\n"
      title: 2.5.7.  Site-Local IPv6 Unicast Addresses
    title: 2.5.  Unicast Addresses
  - contents:
    - "2.6.  Anycast Addresses\n   An IPv6 anycast address is an address that is assigned
      to more than\n   one interface (typically belonging to different nodes), with
      the\n   property that a packet sent to an anycast address is routed to the\n
      \  \"nearest\" interface having that address, according to the routing\n   protocols'
      measure of distance.\n   Anycast addresses are allocated from the unicast address
      space, using\n   any of the defined unicast address formats.  Thus, anycast
      addresses\n   are syntactically indistinguishable from unicast addresses.  When
      a\n   unicast address is assigned to more than one interface, thus turning\n
      \  it into an anycast address, the nodes to which the address is\n   assigned
      must be explicitly configured to know that it is an anycast\n   address.\n   For
      any assigned anycast address, there is a longest prefix P of that\n   address
      that identifies the topological region in which all\n   interfaces belonging
      to that anycast address reside.  Within the\n   region identified by P, the
      anycast address must be maintained as a\n   separate entry in the routing system
      (commonly referred to as a \"host\n   route\"); outside the region identified
      by P, the anycast address may\n   be aggregated into the routing entry for prefix
      P.\n   Note that in the worst case, the prefix P of an anycast set may be\n
      \  the null prefix, i.e., the members of the set may have no topological\n   locality.
      \ In that case, the anycast address must be maintained as a\n   separate routing
      entry throughout the entire Internet, which presents\n   a severe scaling limit
      on how many such \"global\" anycast sets may be\n   supported.  Therefore, it
      is expected that support for global anycast\n   sets may be unavailable or very
      restricted.\n   One expected use of anycast addresses is to identify the set
      of\n   routers belonging to an organization providing Internet service.\n   Such
      addresses could be used as intermediate addresses in an IPv6\n   Routing header,
      to cause a packet to be delivered via a particular\n   service provider or sequence
      of service providers.\n   Some other possible uses are to identify the set of
      routers attached\n   to a particular subnet, or the set of routers providing
      entry into a\n   particular routing domain.\n"
    - contents:
      - "2.6.1.  Required Anycast Address\n   The Subnet-Router anycast address is
        predefined.  Its format is as\n   follows:\n   |                         n
        bits                 |   128-n bits   |\n   +------------------------------------------------+----------------+\n
        \  |                   subnet prefix                | 00000000000000 |\n   +------------------------------------------------+----------------+\n
        \  The \"subnet prefix\" in an anycast address is the prefix that\n   identifies
        a specific link.  This anycast address is syntactically\n   the same as a
        unicast address for an interface on the link with the\n   interface identifier
        set to zero.\n   Packets sent to the Subnet-Router anycast address will be
        delivered\n   to one router on the subnet.  All routers are required to support
        the\n   Subnet-Router anycast addresses for the subnets to which they have\n
        \  interfaces.\n   The Subnet-Router anycast address is intended to be used
        for\n   applications where a node needs to communicate with any one of the\n
        \  set of routers.\n"
      title: 2.6.1.  Required Anycast Address
    title: 2.6.  Anycast Addresses
  - contents:
    - "2.7.  Multicast Addresses\n   An IPv6 multicast address is an identifier for
      a group of interfaces\n   (typically on different nodes).  An interface may
      belong to any\n   number of multicast groups.  Multicast addresses have the
      following\n   format:\n   |   8    |  4 |  4 |                  112 bits                   |\n
      \  +------ -+----+----+---------------------------------------------+\n   |11111111|flgs|scop|
      \                 group ID                   |\n   +--------+----+----+---------------------------------------------+\n
      \     binary 11111111 at the start of the address identifies the address\n      as
      being a multicast address.\n                                    +-+-+-+-+\n
      \     flgs is a set of 4 flags:     |0|R|P|T|\n                                    +-+-+-+-+\n
      \        The high-order flag is reserved, and must be initialized to 0.\n         T
      = 0 indicates a permanently-assigned (\"well-known\") multicast\n         address,
      assigned by the Internet Assigned Numbers Authority\n         (IANA).\n         T
      = 1 indicates a non-permanently-assigned (\"transient\" or\n         \"dynamically\"
      assigned) multicast address.\n         The P flag's definition and usage can
      be found in [RFC3306].\n         The R flag's definition and usage can be found
      in [RFC3956].\n      scop is a 4-bit multicast scope value used to limit the
      scope of\n      the multicast group.  The values are as follows:\n         0
      \ reserved\n         1  Interface-Local scope\n         2  Link-Local scope\n
      \        3  reserved\n         4  Admin-Local scope\n         5  Site-Local
      scope\n         6  (unassigned)\n         7  (unassigned)\n         8  Organization-Local
      scope\n         9  (unassigned)\n         A  (unassigned)\n         B  (unassigned)\n
      \        C  (unassigned)\n         D  (unassigned)\n         E  Global scope\n
      \        F  reserved\n         Interface-Local scope spans only a single interface
      on a node\n         and is useful only for loopback transmission of multicast.\n
      \        Link-Local multicast scope spans the same topological region as\n         the
      corresponding unicast scope.\n         Admin-Local scope is the smallest scope
      that must be\n         administratively configured, i.e., not automatically
      derived\n         from physical connectivity or other, non-multicast-related\n
      \        configuration.\n         Site-Local scope is intended to span a single
      site.\n         Organization-Local scope is intended to span multiple sites\n
      \        belonging to a single organization.\n         scopes labeled \"(unassigned)\"
      are available for administrators\n         to define additional multicast regions.\n
      \     group ID identifies the multicast group, either permanent or\n      transient,
      within the given scope.  Additional definitions of the\n      multicast group
      ID field structure are provided in [RFC3306].\n   The \"meaning\" of a permanently-assigned
      multicast address is\n   independent of the scope value.  For example, if the
      \"NTP servers\n   group\" is assigned a permanent multicast address with a group
      ID of\n   101 (hex), then\n      FF01:0:0:0:0:0:0:101 means all NTP servers
      on the same interface\n      (i.e., the same node) as the sender.\n      FF02:0:0:0:0:0:0:101
      means all NTP servers on the same link as the\n      sender.\n      FF05:0:0:0:0:0:0:101
      means all NTP servers in the same site as the\n      sender.\n      FF0E:0:0:0:0:0:0:101
      means all NTP servers in the Internet.\n   Non-permanently-assigned multicast
      addresses are meaningful only\n   within a given scope.  For example, a group
      identified by the non-\n   permanent, site-local multicast address FF15:0:0:0:0:0:0:101
      at one\n   site bears no relationship to a group using the same address at a\n
      \  different site, nor to a non-permanent group using the same group ID\n   with
      a different scope, nor to a permanent group with the same group\n   ID.\n   Multicast
      addresses must not be used as source addresses in IPv6\n   packets or appear
      in any Routing header.\n   Routers must not forward any multicast packets beyond
      of the scope\n   indicated by the scop field in the destination multicast address.\n
      \  Nodes must not originate a packet to a multicast address whose scop\n   field
      contains the reserved value 0; if such a packet is received, it\n   must be
      silently dropped.  Nodes should not originate a packet to a\n   multicast address
      whose scop field contains the reserved value F; if\n   such a packet is sent
      or received, it must be treated the same as\n   packets destined to a global
      (scop E) multicast address.\n"
    - contents:
      - "2.7.1.  Pre-Defined Multicast Addresses\n   The following well-known multicast
        addresses are pre-defined.  The\n   group IDs defined in this section are
        defined for explicit scope\n   values.\n   Use of these group IDs for any
        other scope values, with the T flag\n   equal to 0, is not allowed.\n      Reserved
        Multicast Addresses:   FF00:0:0:0:0:0:0:0\n                                      FF01:0:0:0:0:0:0:0\n
        \                                     FF02:0:0:0:0:0:0:0\n                                      FF03:0:0:0:0:0:0:0\n
        \                                     FF04:0:0:0:0:0:0:0\n                                      FF05:0:0:0:0:0:0:0\n
        \                                     FF06:0:0:0:0:0:0:0\n                                      FF07:0:0:0:0:0:0:0\n
        \                                     FF08:0:0:0:0:0:0:0\n                                      FF09:0:0:0:0:0:0:0\n
        \                                     FF0A:0:0:0:0:0:0:0\n                                      FF0B:0:0:0:0:0:0:0\n
        \                                     FF0C:0:0:0:0:0:0:0\n                                      FF0D:0:0:0:0:0:0:0\n
        \                                     FF0E:0:0:0:0:0:0:0\n                                      FF0F:0:0:0:0:0:0:0\n
        \  The above multicast addresses are reserved and shall never be\n   assigned
        to any multicast group.\n      All Nodes Addresses:    FF01:0:0:0:0:0:0:1\n
        \                             FF02:0:0:0:0:0:0:1\n   The above multicast addresses
        identify the group of all IPv6 nodes,\n   within scope 1 (interface-local)
        or 2 (link-local).\n      All Routers Addresses:   FF01:0:0:0:0:0:0:2\n                               FF02:0:0:0:0:0:0:2\n
        \                              FF05:0:0:0:0:0:0:2\n   The above multicast
        addresses identify the group of all IPv6 routers,\n   within scope 1 (interface-local),
        2 (link-local), or 5 (site-local).\n      Solicited-Node Address:  FF02:0:0:0:0:1:FFXX:XXXX\n
        \  Solicited-Node multicast address are computed as a function of a\n   node's
        unicast and anycast addresses.  A Solicited-Node multicast\n   address is
        formed by taking the low-order 24 bits of an address\n   (unicast or anycast)
        and appending those bits to the prefix\n   FF02:0:0:0:0:1:FF00::/104 resulting
        in a multicast address in the\n   range\n         FF02:0:0:0:0:1:FF00:0000\n
        \  to\n         FF02:0:0:0:0:1:FFFF:FFFF\n   For example, the Solicited-Node
        multicast address corresponding to\n   the IPv6 address 4037::01:800:200E:8C6C
        is FF02::1:FF0E:8C6C.  IPv6\n   addresses that differ only in the high-order
        bits (e.g., due to\n   multiple high-order prefixes associated with different
        aggregations)\n   will map to the same Solicited-Node address, thereby reducing
        the\n   number of multicast addresses a node must join.\n   A node is required
        to compute and join (on the appropriate interface)\n   the associated Solicited-Node
        multicast addresses for all unicast and\n   anycast addresses that have been
        configured for the node's interfaces\n   (manually or automatically).\n"
      title: 2.7.1.  Pre-Defined Multicast Addresses
    title: 2.7.  Multicast Addresses
  - contents:
    - "2.8.  A Node's Required Addresses\n   A host is required to recognize the following
      addresses as\n   identifying itself:\n      o Its required Link-Local address
      for each interface.\n      o Any additional Unicast and Anycast addresses that
      have been\n        configured for the node's interfaces (manually or\n        automatically).\n
      \     o The loopback address.\n      o The All-Nodes multicast addresses defined
      in Section 2.7.1.\n      o The Solicited-Node multicast address for each of
      its unicast and\n        anycast addresses.\n      o Multicast addresses of
      all other groups to which the node\n        belongs.\n   A router is required
      to recognize all addresses that a host is\n   required to recognize, plus the
      following addresses as identifying\n   itself:\n      o The Subnet-Router Anycast
      addresses for all interfaces for which\n        it is configured to act as a
      router.\n      o All other Anycast addresses with which the router has been\n
      \       configured.\n      o The All-Routers multicast addresses defined in
      Section 2.7.1.\n"
    title: 2.8.  A Node's Required Addresses
  title: 2.  IPv6 Addressing
- contents:
  - "3.  Security Considerations\n   IPv6 addressing documents do not have any direct
    impact on Internet\n   infrastructure security.  Authentication of IPv6 packets
    is defined\n   in [AUTH].\n"
  title: 3.  Security Considerations
- contents:
  - "4.  IANA Considerations\n   The \"IPv4-Compatible IPv6 address\" is deprecated
    by this document.\n   The IANA should continue to list the address block containing
    these\n   addresses at http://www.iana.org/assignments/ipv6-address-space as\n
    \  \"Reserved by IETF\" and not reassign it for any other purpose.  For\n   example:\n
    \     0000::/8        Reserved by IETF        [RFC3513]      [1]\n   The IANA
    has added the following note and link to this address block.\n      [5]  0000::/96
    was previously defined as the \"IPv4-Compatible IPv6\n           address\" prefix.
    \ This definition has been deprecated by RFC\n           4291.\n   The IANA has
    updated the references for the IPv6 Address Architecture\n   in the IANA registries
    accordingly.\n"
  title: 4.  IANA Considerations
- contents:
  - "5.  Acknowledgements\n   The authors would like to acknowledge the contributions
    of Paul\n   Francis, Scott Bradner, Jim Bound, Brian Carpenter, Matt Crawford,\n
    \  Deborah Estrin, Roger Fajman, Bob Fink, Peter Ford, Bob Gilligan,\n   Dimitry
    Haskin, Tom Harsch, Christian Huitema, Tony Li, Greg\n   Minshall, Thomas Narten,
    Erik Nordmark, Yakov Rekhter, Bill Simpson,\n   Sue Thomson, Markku Savela, Larry
    Masinter, Jun-ichiro Itojun Hagino,\n   Tatuya Jinmei, Suresh Krishnan, and Mahmood
    Ali.\n"
  title: 5.  Acknowledgements
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [IPV6]    Deering, S. and R. Hinden, \"Internet
      Protocol, Version 6\n             (IPv6) Specification\", RFC 2460, December
      1998.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [AUTH]    Kent, S. and R. Atkinson, \"IP Authentication
      Header\", RFC\n             2402, November 1998.\n   [CIDR]    Fuller, V., Li,
      T., Yu, J., and K. Varadhan, \"Classless\n             Inter-Domain Routing
      (CIDR): an Address Assignment and\n             Aggregation Strategy\", RFC
      1519, September 1993.\n   [ETHER]   Crawford, M., \"Transmission of IPv6 Packets
      over Ethernet\n             Networks\", RFC 2464, December 1998.\n   [EUI64]
      \  IEEE, \"Guidelines for 64-bit Global Identifier (EUI-64)\n             Registration
      Authority\",\n             http://standards.ieee.org/regauth/oui/tutorials/EUI64.html,\n
      \            March 1997.\n   [FDDI]    Crawford, M., \"Transmission of IPv6
      Packets over FDDI\n             Networks\", RFC 2467, December 1998.\n   [GLOBAL]
      \ Hinden, R., Deering, S., and E. Nordmark, \"IPv6 Global\n             Unicast
      Address Format\", RFC 3587, August 2003.\n   [PRIV]    Narten, T. and R. Draves,
      \"Privacy Extensions for Stateless\n             Address Autoconfiguration in
      IPv6\", RFC 3041, January 2001.\n   [RFC3513] Hinden, R. and S. Deering, \"Internet
      Protocol Version 6\n             (IPv6) Addressing Architecture\", RFC 3513,
      April 2005.\n   [RFC3306] Haberman, B. and D. Thaler, \"Unicast-Prefix-based
      IPv6\n             Multicast Addresses\", RFC 3306, August 2002.\n   [RFC3956]
      Savola, P. and B. Haberman, \"Embedding the Rendezvous Point\n             (RP)
      Address in an IPv6 Multicast Address\", RFC 3956,\n             November 2004.\n
      \  [RFC4038] Shin, M-K., Hong, Y-G., Hagino, J., Savola, P., and E.\n             Castro,
      \"Application Aspects of IPv6 Transition\", RFC 4038,\n             March 2005.\n
      \  [SLDEP]   Huitema, C. and B. Carpenter, \"Deprecating Site Local\n             Addresses\",
      RFC 3879, September 2004.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Appendix A: Creating Modified EUI-64 Format Interface Identifiers\n   Depending
    on the characteristics of a specific link or node, there\n   are a number of approaches
    for creating Modified EUI-64 format\n   interface identifiers. This appendix describes
    some of these\n   approaches.\n   Links or Nodes with IEEE EUI-64 Identifiers\n
    \  The only change needed to transform an IEEE EUI-64 identifier to an\n   interface
    identifier is to invert the \"u\" (universal/local) bit.  An\n   example is a
    globally unique IEEE EUI-64 identifier of the form:\n   |0              1|1              3|3
    \             4|4              6|\n   |0              5|6              1|2              7|8
    \             3|\n   +----------------+----------------+----------------+----------------+\n
    \  |cccccc0gcccccccc|ccccccccmmmmmmmm|mmmmmmmmmmmmmmmm|mmmmmmmmmmmmmmmm|\n   +----------------+----------------+----------------+----------------+\n
    \  where \"c\" is the bits of the assigned company_id, \"0\" is the value of\n
    \  the universal/local bit to indicate universal scope, \"g\" is\n   individual/group
    bit, and \"m\" is the bits of the manufacturer-\n   selected extension identifier.
    \ The IPv6 interface identifier would\n   be of the form:\n   |0              1|1
    \             3|3              4|4              6|\n   |0              5|6              1|2
    \             7|8              3|\n   +----------------+----------------+----------------+----------------+\n
    \  |cccccc1gcccccccc|ccccccccmmmmmmmm|mmmmmmmmmmmmmmmm|mmmmmmmmmmmmmmmm|\n   +----------------+----------------+----------------+----------------+\n
    \  The only change is inverting the value of the universal/local bit.\n   Links
    or Nodes with IEEE 802 48-bit MACs\n   [EUI64] defines a method to create an IEEE
    EUI-64 identifier from an\n   IEEE 48-bit MAC identifier.  This is to insert two
    octets, with\n   hexadecimal values of 0xFF and 0xFE (see the Note at the end
    of\n   appendix), in the middle of the 48-bit MAC (between the company_id\n   and
    vendor-supplied id).  An example is the 48-bit IEEE MAC with\n   Global scope:\n
    \  |0              1|1              3|3              4|\n   |0              5|6
    \             1|2              7|\n   +----------------+----------------+----------------+\n
    \  |cccccc0gcccccccc|ccccccccmmmmmmmm|mmmmmmmmmmmmmmmm|\n   +----------------+----------------+----------------+\n
    \  where \"c\" is the bits of the assigned company_id, \"0\" is the value of\n
    \  the universal/local bit to indicate Global scope, \"g\" is\n   individual/group
    bit, and \"m\" is the bits of the manufacturer-\n   selected extension identifier.
    \ The interface identifier would be of\n   the form:\n   |0              1|1              3|3
    \             4|4              6|\n   |0              5|6              1|2              7|8
    \             3|\n   +----------------+----------------+----------------+----------------+\n
    \  |cccccc1gcccccccc|cccccccc11111111|11111110mmmmmmmm|mmmmmmmmmmmmmmmm|\n   +----------------+----------------+----------------+----------------+\n
    \  When IEEE 802 48-bit MAC addresses are available (on an interface or\n   a
    node), an implementation may use them to create interface\n   identifiers due
    to their availability and uniqueness properties.\n   Links with Other Kinds of
    Identifiers\n   There are a number of types of links that have link-layer interface\n
    \  identifiers other than IEEE EUI-64 or IEEE 802 48-bit MACs.  Examples\n   include
    LocalTalk and Arcnet.  The method to create a Modified EUI-64\n   format identifier
    is to take the link identifier (e.g., the LocalTalk\n   8-bit node identifier)
    and zero fill it to the left.  For example, a\n   LocalTalk 8-bit node identifier
    of hexadecimal value 0x4F results in\n   the following interface identifier:\n
    \  |0              1|1              3|3              4|4              6|\n   |0
    \             5|6              1|2              7|8              3|\n   +----------------+----------------+----------------+----------------+\n
    \  |0000000000000000|0000000000000000|0000000000000000|0000000001001111|\n   +----------------+----------------+----------------+----------------+\n
    \  Note that this results in the universal/local bit set to \"0\" to\n   indicate
    local scope.\n   Links without Identifiers\n   There are a number of links that
    do not have any type of built-in\n   identifier.  The most common of these are
    serial links and configured\n   tunnels.  Interface identifiers that are unique
    within a subnet\n   prefix must be chosen.\n   When no built-in identifier is
    available on a link, the preferred\n   approach is to use a universal interface
    identifier from another\n   interface or one that is assigned to the node itself.
    \ When using\n   this approach, no other interface connecting the same node to
    the\n   same subnet prefix may use the same identifier.\n   If there is no universal
    interface identifier available for use on\n   the link, the implementation needs
    to create a local-scope interface\n   identifier.  The only requirement is that
    it be unique within a\n   subnet prefix.  There are many possible approaches to
    select a\n   subnet-prefix-unique interface identifier.  These include the\n   following:\n
    \     Manual Configuration\n      Node Serial Number\n      Other Node-Specific
    Token\n   The subnet-prefix-unique interface identifier should be generated in\n
    \  a manner such that it does not change after a reboot of a node or if\n   interfaces
    are added or deleted from the node.\n   The selection of the appropriate algorithm
    is link and implementation\n   dependent.  The details on forming interface identifiers
    are defined\n   in the appropriate \"IPv6 over <link>\" specification.  It is
    strongly\n   recommended that a collision detection algorithm be implemented as\n
    \  part of any automatic algorithm.\n   Note: [EUI-64] actually defines 0xFF and
    0xFF as the bits to be\n         inserted to create an IEEE EUI-64 identifier
    from an IEEE MAC-\n         48 identifier.  The 0xFF and 0xFE values are used
    when starting\n         with an IEEE EUI-48 identifier.  The incorrect value was
    used\n         in earlier versions of the specification due to a\n         misunderstanding
    about the differences between IEEE MAC-48 and\n         EUI-48 identifiers.\n
    \        This document purposely continues the use of 0xFF and 0xFE\n         because
    it meets the requirements for IPv6 interface\n         identifiers (i.e., that
    they must be unique on the link), IEEE\n         EUI-48 and MAC-48 identifiers
    are syntactically equivalent, and\n         that it doesn't cause any problems
    in practice.\n"
  title: 'Appendix A: Creating Modified EUI-64 Format Interface Identifiers'
- contents:
  - "Appendix B: Changes from RFC 3513\n   The following changes were made from RFC
    3513, \"IP Version 6\n   Addressing Architecture\":\n    o The restrictions on
    using IPv6 anycast addresses were removed\n      because there is now sufficient
    experience with the use of anycast\n      addresses, the issues are not specific
    to IPv6, and the GROW\n      working group is working in this area.\n    o Deprecated
    the Site-Local unicast prefix.  Changes include the\n      following:\n       -
    Removed Site-Local from special list of prefixes in Section\n         2.4.\n       -
    Split section titled \"Local-use IPv6 Unicast Addresses\" into\n         two sections,
    \"Link-Local IPv6 Unicast Addresses\" and \"Site-\n         Local IPv6 Unicast
    Addresses\".\n       - Added text to new section describing Site-Local deprecation.\n
    \   o Changes to resolve issues raised in IAB response to Robert Elz\n      appeal.
    \ Changes include the following:\n       - Added clarification to Section 2.5
    that nodes should make no\n         assumptions about the structure of an IPv6
    address.\n       - Changed the text in Section 2.5.1 and Appendix A to refer to\n
    \        the Modified EUI-64 format interface identifiers with the \"u\"\n         bit
    set to one (1) as universal.\n       - Added clarification to Section 2.5.1 that
    IPv6 nodes are not\n         required to validate that interface identifiers created
    in\n         Modified EUI-64 format with the \"u\" bit set to one are unique.\n
    \   o Changed the reference indicated in Section 2.5.4 \"Global Unicast\n      Addresses\"
    to RFC 3587.\n    o Removed mention of NSAP addresses in examples.\n    o Clarified
    that the \"x\" in the textual representation can be one to\n      four digits.\n
    \   o Deprecated the \"IPv6 Compatible Address\" because it is not being\n      used
    in the IPv6 transition mechanisms.\n    o Added the \"R\" and \"P\" flags to Section
    2.7 on multicast addresses,\n      and pointers to the documents that define them.\n
    \   o Editorial changes.\n"
  title: 'Appendix B: Changes from RFC 3513'
- contents:
  - "Authors' Addresses\n   Robert M. Hinden\n   Nokia\n   313 Fairchild Drive\n   Mountain
    View, CA 94043\n   USA\n   Phone: +1 650 625-2004\n   EMail: bob.hinden@nokia.com\n
    \  Stephen E. Deering\n   Cisco Systems, Inc.\n   170 West Tasman Drive\n   San
    Jose, CA 95134-1706\n   USA\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
