- title: __initial_text__
  contents:
  - '  A Common Operational Problem in DNS Servers: Failure to Communicate

    '
- title: Abstract
  contents:
  - "Abstract\n   The DNS is a query/response protocol.  Failing to respond to queries,\n\
    \   or responding incorrectly, causes both immediate operational problems\n  \
    \ and long-term problems with protocol development.\n   This document identifies\
    \ a number of common kinds of queries to which\n   some servers either fail to\
    \ respond or respond incorrectly.  This\n   document also suggests procedures\
    \ for zone operators to apply to\n   identify and remediate the problem.\n   The\
    \ document does not look at the DNS data itself, just the structure\n   of the\
    \ responses.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 7841.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8906.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Consequences\n   3.  Common Kinds\
    \ of Queries That Result in No or Bad Responses\n     3.1.  Basic DNS Queries\n\
    \       3.1.1.  Zone Existence\n       3.1.2.  Unknown/Unsupported Type Queries\n\
    \       3.1.3.  DNS Flags\n       3.1.4.  Unknown DNS Opcodes\n       3.1.5. \
    \ TCP Queries\n     3.2.  EDNS Queries\n       3.2.1.  EDNS Queries: Version Independent\n\
    \       3.2.2.  EDNS Queries: Version Specific\n       3.2.3.  EDNS Options\n\
    \       3.2.4.  EDNS Flags\n       3.2.5.  Truncated EDNS Responses\n       3.2.6.\
    \  DO=1 Handling\n       3.2.7.  EDNS over TCP\n   4.  Firewalls and Load Balancers\n\
    \   5.  Packet Scrubbing Services\n   6.  Whole Answer Caches\n   7.  Response\
    \ Code Selection\n   8.  Testing\n     8.1.  Testing: Basic DNS\n       8.1.1.\
    \  Is the server configured for the zone?\n       8.1.2.  Testing Unknown Types\n\
    \       8.1.3.  Testing Header Bits\n       8.1.4.  Testing Unknown Opcodes\n\
    \       8.1.5.  Testing TCP\n     8.2.  Testing: Extended DNS\n       8.2.1. \
    \ Testing Minimal EDNS\n       8.2.2.  Testing EDNS Version Negotiation\n    \
    \   8.2.3.  Testing Unknown EDNS Options\n       8.2.4.  Testing Unknown EDNS\
    \ Flags\n       8.2.5.  Testing EDNS Version Negotiation with Unknown EDNS\n \
    \              Flags\n       8.2.6.  Testing EDNS Version Negotiation with Unknown\
    \ EDNS\n               Options\n       8.2.7.  Testing Truncated Responses\n \
    \      8.2.8.  Testing DO=1 Handling\n       8.2.9.  Testing EDNS Version Negotiation\
    \ with DO=1\n       8.2.10. Testing with Multiple Defined EDNS Options\n     8.3.\
    \  When EDNS Is Not Supported\n   9.  Remediation\n   10. Security Considerations\n\
    \   11. IANA Considerations\n   12. References\n     12.1.  Normative References\n\
    \     12.2.  Informative References\n   Acknowledgements\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The DNS [RFC1034] [RFC1035] is a query/response protocol.\
    \  Failing to\n   respond to queries or responding incorrectly causes both immediate\n\
    \   operational problems and long-term problems with protocol\n   development.\n\
    \   Failure to respond to a query is indistinguishable from packet loss\n   without\
    \ doing an analysis of query-response patterns.  Additionally,\n   failure to\
    \ respond results in unnecessary queries being made by DNS\n   clients and introduces\
    \ delays to the resolution process.\n   Due to the inability to distinguish between\
    \ packet loss and\n   nameservers or middleboxes dropping Extension Mechanisms\
    \ for DNS\n   (EDNS) [RFC6891] queries, packet loss is sometimes misclassified\
    \ as\n   lack of EDNS support, which can lead to DNSSEC validation failures.\n\
    \   The existence of servers that fail to respond to queries results in\n   developers\
    \ being hesitant to deploy new standards.  Such servers need\n   to be identified\
    \ and remediated.\n   The DNS has response codes that cover almost any conceivable\
    \ query\n   response.  A nameserver should be able to respond to any conceivable\n\
    \   query using them.  There should be no need to drop queries because a\n   nameserver\
    \ does not understand them.\n   Unless a nameserver is under attack, it should\
    \ respond to all DNS\n   requests directed to it.  When a nameserver is under\
    \ attack, it may\n   wish to drop packets.  A common attack is to use a nameserver\
    \ as an\n   amplifier by sending spoofed packets.  This is done because response\n\
    \   packets are bigger than the queries and large amplification factors\n   are\
    \ available, especially if EDNS is supported.  Limiting the rate of\n   responses\
    \ is reasonable when this is occurring, and the client should\n   retry.  However,\
    \ this only works if legitimate clients are not being\n   forced to guess whether\
    \ or not EDNS queries are accepted.  As long as\n   there is still a pool of servers\
    \ that don't respond to EDNS requests,\n   clients have no way to know if the\
    \ lack of response is due to packet\n   loss, EDNS packets not being supported,\
    \ or rate limiting due to the\n   server being under attack.  Misclassification\
    \ of server behaviour is\n   unavoidable when rate limiting is used until the\
    \ population of\n   servers that fail to respond to well-formed queries drops\
    \ to near\n   zero.\n   Nameservers should respond to queries even if the queried\
    \ name is not\n   for any name the server is configured to answer for.  Misconfigured\n\
    \   nameservers are a common occurrence in the DNS, and receiving queries\n  \
    \ for zones that the server is not configured for is not necessarily an\n   indication\
    \ that the server is under attack.  Parent zone operators\n   are advised to regularly\
    \ check that the delegating NS records are\n   consistent with those of the delegated\
    \ zone and to correct them when\n   they are not (Section 4.2.2 of [RFC1034],\
    \ Paragraph 3).  Doing this\n   regularly should reduce the instances of broken\
    \ delegations.\n   This document does not try to identify all possible errors\
    \ nor does\n   it supply an exhaustive list of tests.\n"
- title: 2.  Consequences
  contents:
  - "2.  Consequences\n   Failure to follow the guidance in relevant DNS RFCs has\
    \ multiple\n   adverse consequences.  Some are caused directly by the non-compliant\n\
    \   behaviour and others as a result of workarounds forced on recursive\n   servers.\
    \  Addressing known issues now will reduce future\n   interoperability issues\
    \ as the DNS protocol continues to evolve and\n   clients make use of newly introduced\
    \ DNS features.  In particular,\n   the base DNS specification [RFC1034] [RFC1035]\
    \ and the EDNS\n   specification [RFC6891], when implemented, need to be followed.\n\
    \   Some examples of known consequences include the following:\n   *  The AD (Authenticated\
    \ Data) bit in a response cannot be trusted to\n      mean anything, as some servers\
    \ incorrectly copy the flag bit from\n      the request to the response [RFC1035]\
    \ [RFC4035].  The use of the\n      AD bit in requests is defined in [RFC6840].\n\
    \   *  Widespread non-response to EDNS queries has led to recursive\n      servers\
    \ having to assume that EDNS is not supported and that\n      fallback to plain\
    \ DNS is required, potentially causing DNSSEC\n      validation failures.\n  \
    \ *  Widespread non-response to EDNS options requires recursive servers\n    \
    \  to decide whether to probe to see if it is the specific EDNS\n      option\
    \ or the use of EDNS in general that is causing the non-\n      response.  In\
    \ the limited amount of time required to resolve a\n      query before the client\
    \ times out, this is not possible.\n   *  Incorrectly returning FORMERR to an\
    \ EDNS option being present\n      leads to the recursive server not being able\
    \ to determine if the\n      server is just broken in the handling of the EDNS\
    \ option or if it\n      doesn't support EDNS at all.\n   *  Mishandling of unknown\
    \ query types has contributed to the\n      abandonment of the transition of the\
    \ SPF type.\n   *  Mishandling of unknown query types has slowed up the development\n\
    \      of DNS-Based Authentication of Named Entities (DANE) and resulted\n   \
    \   in additional rules being specified to reduce the probability of\n      interacting\
    \ with a broken server when making TLSA queries.\n   The consequences of servers\
    \ not following the RFCs will only grow if\n   measures are not put in place to\
    \ remove non-compliant servers from\n   the ecosystem.  Working around issues\
    \ due to non-compliance with RFCs\n   is not sustainable.\n   Most (if not all)\
    \ of these consequences could have been avoided if\n   action had been taken to\
    \ remove non-compliant servers as soon as\n   people were aware of them, i.e.,\
    \ to actively seek out broken\n   implementations and servers and inform their\
    \ developers and operators\n   that they need to fix their servers.\n"
- title: 3.  Common Kinds of Queries That Result in No or Bad Responses
  contents:
  - "3.  Common Kinds of Queries That Result in No or Bad Responses\n   This section\
    \ is broken down into Basic DNS requests and EDNS\n   requests.\n"
- title: 3.1.  Basic DNS Queries
  contents:
  - '3.1.  Basic DNS Queries

    '
- title: 3.1.1.  Zone Existence
  contents:
  - "3.1.1.  Zone Existence\n   If a zone is delegated to a server, that server should\
    \ respond to a\n   SOA query for that zone with an SOA record.  Failing to respond\
    \ at\n   all is always incorrect, regardless of the configuration of the\n   server.\
    \  Responding with anything other than an SOA record in the\n   answer section\
    \ indicates a bad delegation.\n"
- title: 3.1.2.  Unknown/Unsupported Type Queries
  contents:
  - "3.1.2.  Unknown/Unsupported Type Queries\n   Some servers fail to respond to\
    \ unknown or unsupported types.  If a\n   server receives a query for a type that\
    \ it doesn't recognise, or\n   doesn't implement, it is expected to return the\
    \ appropriate response\n   as if it did recognise the type but does not have any\
    \ data for that\n   type, i.e., either NOERROR or NXDOMAIN.  The exceptions to\
    \ this are\n   queries for Meta-RR types, which may return NOTIMP.\n"
- title: 3.1.3.  DNS Flags
  contents:
  - "3.1.3.  DNS Flags\n   Some servers fail to respond to DNS queries with various\
    \ DNS flags\n   set, regardless of whether they are defined or still reserved.\
    \  At\n   the time of writing, there are servers that fail to respond to\n   queries\
    \ with the AD flag set to 1 and servers that fail to respond to\n   queries with\
    \ the last reserved flag set.\n   Servers should respond to such queries.  If\
    \ the server does not know\n   the meaning of a flag, it must not copy it to the\
    \ response\n   (Section 4.1.1 of [RFC1035]).  If the server does not understand\
    \ the\n   meaning of a request, it should reply with a FORMERR response with\n\
    \   unknown flags set to zero.\n"
- title: 3.1.3.1.  Recursive Queries
  contents:
  - "3.1.3.1.  Recursive Queries\n   A non-recursive server is supposed to respond\
    \ to recursive queries as\n   if the Recursion Desired (RD) bit is not set [RFC1034].\n"
- title: 3.1.4.  Unknown DNS Opcodes
  contents:
  - "3.1.4.  Unknown DNS Opcodes\n   The use of previously undefined opcodes is to\
    \ be expected.  Since the\n   DNS was first defined, two new opcodes have been\
    \ added, UPDATE and\n   NOTIFY.\n   NOTIMP is the expected rcode to an unknown\
    \ or unimplemented opcode.\n      |  NOTE: while new opcodes will most probably\
    \ use the current\n      |  layout structure for the rest of the message, there\
    \ is no\n      |  requirement that anything other than the DNS header match.\n"
- title: 3.1.5.  TCP Queries
  contents:
  - "3.1.5.  TCP Queries\n   All DNS servers are supposed to respond to queries over\
    \ TCP\n   [RFC7766].  While firewalls should not block TCP connection attempts,\n\
    \   those that do should cleanly terminate the connection by sending TCP\n   RESET\
    \ or sending ICMP/ICMPv6 Administratively Prohibited messages.\n   Dropping TCP\
    \ connections introduces excessive delays to the\n   resolution process.\n"
- title: 3.2.  EDNS Queries
  contents:
  - "3.2.  EDNS Queries\n   EDNS queries are specified in [RFC6891].\n"
- title: '3.2.1.  EDNS Queries: Version Independent'
  contents:
  - "3.2.1.  EDNS Queries: Version Independent\n   Identifying servers that fail to\
    \ respond to EDNS queries can be done\n   by first confirming that the server\
    \ responds to regular DNS queries,\n   followed by a series of otherwise identical\
    \ queries using EDNS, then\n   making the original query again.  A series of EDNS\
    \ queries is needed,\n   as at least one DNS implementation responds to the first\
    \ EDNS query\n   with FORMERR but fails to respond to subsequent queries from\
    \ the same\n   address for a period until a regular DNS query is made.  The EDNS\n\
    \   query should specify a UDP buffer size of 512 bytes to avoid false\n   classification\
    \ of not supporting EDNS due to response packet size.\n   If the server responds\
    \ to the first and last queries but fails to\n   respond to most or all of the\
    \ EDNS queries, it is probably faulty.\n   The test should be repeated a number\
    \ of times to eliminate the\n   likelihood of a false positive due to packet loss.\n\
    \   Firewalls may also block larger EDNS responses, but there is no easy\n   way\
    \ to check authoritative servers to see if the firewall is\n   misconfigured.\n"
- title: '3.2.2.  EDNS Queries: Version Specific'
  contents:
  - "3.2.2.  EDNS Queries: Version Specific\n   Some servers respond correctly to\
    \ EDNS version 0 queries but fail to\n   respond to EDNS queries with version\
    \ numbers that are higher than\n   zero.  Servers should respond with BADVERS\
    \ to EDNS queries with\n   version numbers that they do not support.\n   Some\
    \ servers respond correctly to EDNS version 0 queries but fail to\n   set QR=1\
    \ when responding to EDNS versions they do not support.  Such\n   responses may\
    \ be discarded as invalid (as QR is not 1) or treated as\n   requests (when the\
    \ source port of the original request was port 53).\n"
- title: 3.2.3.  EDNS Options
  contents:
  - "3.2.3.  EDNS Options\n   Some servers fail to respond to EDNS queries with EDNS\
    \ options set.\n   The original EDNS specification left this behaviour undefined\n\
    \   [RFC2671], but the correct behaviour was clarified in [RFC6891].\n   Unknown\
    \ EDNS options are supposed to be ignored by the server.\n"
- title: 3.2.4.  EDNS Flags
  contents:
  - "3.2.4.  EDNS Flags\n   Some servers fail to respond to EDNS queries with EDNS\
    \ flags set.\n   Servers should ignore EDNS flags they do not understand and must\
    \ not\n   add them to the response [RFC6891].\n"
- title: 3.2.5.  Truncated EDNS Responses
  contents:
  - "3.2.5.  Truncated EDNS Responses\n   Some EDNS-aware servers fail to include\
    \ an OPT record when a\n   truncated response is sent.  An OPT record is supposed\
    \ to be included\n   in a truncated response [RFC6891].\n   Some EDNS-aware servers\
    \ fail to honour the advertised EDNS UDP buffer\n   size and send oversized responses\
    \ [RFC6891].  Servers must send UDP\n   responses no larger than the advertised\
    \ EDNS UDP buffer size.\n"
- title: 3.2.6.  DO=1 Handling
  contents:
  - "3.2.6.  DO=1 Handling\n   Some nameservers incorrectly only return an EDNS response\
    \ when the\n   DNSSEC OK (DO) bit [RFC3225] is 1 in the query.  Servers that support\n\
    \   EDNS should always respond to EDNS requests with EDNS responses.\n   Some\
    \ nameservers fail to copy the DO bit to the response despite\n   clearly supporting\
    \ DNSSEC by returning an RRSIG records to EDNS\n   queries with DO=1.  Nameservers\
    \ that support DNSSEC are expected to\n   copy the DO bit from the request to\
    \ the response.\n"
- title: 3.2.7.  EDNS over TCP
  contents:
  - "3.2.7.  EDNS over TCP\n   Some EDNS-aware servers incorrectly limit the TCP response\
    \ sizes to\n   the advertised UDP response size.  This breaks DNS resolution to\n\
    \   clients where the response sizes exceed the advertised UDP response\n   size\
    \ despite the server and the client being capable of sending and\n   receiving\
    \ larger TCP responses, respectively.  It effectively defeats\n   setting TC=1\
    \ in UDP responses.\n"
- title: 4.  Firewalls and Load Balancers
  contents:
  - "4.  Firewalls and Load Balancers\n   Firewalls and load balancers can affect\
    \ the externally visible\n   behaviour of a nameserver.  Tests for conformance\
    \ should to be done\n   from outside of any firewall so that the system is tested\
    \ as a whole.\n   Firewalls and load balancers should not drop DNS packets that\
    \ they\n   don't understand.  They should either pass the packets or generate\
    \ an\n   appropriate error response.\n   Requests for unknown query types are\
    \ normal client behaviour and\n   should not be construed as an attack.  Nameservers\
    \ have always been\n   expected to be able to handle such queries.\n   Requests\
    \ for unknown query classes are normal client behaviour and\n   should not be\
    \ construed as an attack.  Nameservers have always been\n   expected to be able\
    \ to handle such queries.\n   Requests with unknown opcodes are normal client\
    \ behaviour and should\n   not be construed as an attack.  Nameservers have always\
    \ been expected\n   to be able to handle such queries.\n   Requests with unassigned\
    \ flags set (DNS or EDNS) are expected client\n   behaviour and should not be\
    \ construed as an attack.  The behaviour\n   for unassigned flags is to ignore\
    \ them in the request and to not set\n   them in the response.  Dropping DNS/EDNS\
    \ packets with unassigned\n   flags makes it difficult to deploy extensions that\
    \ make use of them\n   due to the need to reconfigure and update firewalls.\n\
    \   Requests with unknown EDNS options are expected client behaviour and\n   should\
    \ not be construed as an attack.  The correct behaviour for\n   unknown EDNS options\
    \ is to ignore their presence when constructing a\n   reply.\n   Requests with\
    \ unknown EDNS versions are expected client behaviour and\n   should not be construed\
    \ as an attack.  The correct behaviour for\n   unknown EDNS versions is to return\
    \ BADVERS along with the highest\n   EDNS version the server supports.  Dropping\
    \ EDNS packets breaks EDNS\n   version negotiation.\n   Firewalls should not assume\
    \ that there will only be a single response\n   message to a request.  There have\
    \ been proposals to use EDNS to\n   signal that multiple DNS messages be returned\
    \ rather than a single\n   UDP message that is fragmented at the IP layer.\n \
    \  DNS, and EDNS in particular, are designed to allow clients to be able\n   to\
    \ use new features against older servers without having to validate\n   every\
    \ option.  Indiscriminate blocking of messages breaks that\n   design.\n   However,\
    \ there may be times when a nameserver mishandles messages\n   with a particular\
    \ flag, EDNS option, EDNS version field, opcode, type\n   or class field, or combination\
    \ thereof to the point where the\n   integrity of the nameserver is compromised.\
    \  Firewalls should offer\n   the ability to selectively reject messages using\
    \ an appropriately\n   constructed response based on all these fields while awaiting\
    \ a fix\n   from the nameserver vendor.  Returning FORMERR or REFUSED are two\n\
    \   potential error codes to return.\n"
- title: 5.  Packet Scrubbing Services
  contents:
  - "5.  Packet Scrubbing Services\n   Packet scrubbing services are used to filter\
    \ out undesired traffic,\n   including but not limited to denial-of-service traffic.\
    \  This is\n   often done using heuristic analysis of the traffic.\n   Packet\
    \ scrubbing services can affect the externally visible behaviour\n   of a nameserver\
    \ in a similar way to firewalls.  If an operator uses a\n   packet scrubbing service,\
    \ they should check that legitimate queries\n   are not being blocked.\n   Packet\
    \ scrubbing services, unlike firewalls, are also turned on and\n   off in response\
    \ to denial-of-service attacks.  One needs to take care\n   when choosing a scrubbing\
    \ service.\n   Ideally, operators should run these tests against a packet scrubbing\n\
    \   service to ensure that these tests are not seen as attack vectors.\n"
- title: 6.  Whole Answer Caches
  contents:
  - "6.  Whole Answer Caches\n   Whole answer caches take a previously constructed\
    \ answer and return\n   it to a subsequent query for the same question.  However,\
    \ they can\n   return the wrong response if they do not take all of the relevant\n\
    \   attributes of the query into account.\n   In addition to the standard tuple\
    \ of <qname,qtype,qclass>, a non-\n   exhaustive set of attributes that must be\
    \ considered include: RD, AD,\n   CD, OPT record, DO, EDNS buffer size, EDNS version,\
    \ EDNS options, and\n   transport.\n"
- title: 7.  Response Code Selection
  contents:
  - "7.  Response Code Selection\n   Choosing the correct response code when responding\
    \ to DNS queries is\n   important.  Response codes should be chosen considering\
    \ how clients\n   will handle them.\n   For unimplemented opcodes, NOTIMP is the\
    \ expected response code.\n   Note: newly implemented opcodes may change the message\
    \ format by\n   extending the header, changing the structure of the records, etc.\n\
    \   Servers are not expected to be able to parse these and should respond\n  \
    \ with a response code of NOTIMP rather than FORMERR (which would be\n   expected\
    \ if there was a parse error with a known opcode).\n   For unimplemented type\
    \ codes, and in the absence of other errors, the\n   only valid response is NOERROR\
    \ if the qname exists and NXDOMAIN\n   otherwise.  For Meta-RRs, NOTIMP may be\
    \ returned instead.\n   If a zone cannot be loaded because it contains unimplemented\
    \ type\n   codes that are not encoded as unknown record types according to\n \
    \  [RFC3597], then the expected response is SERVFAIL, as the whole zone\n   should\
    \ be rejected (Section 5.2 of [RFC1035]).  If a zone loads, then\n   Section 4.3.2\
    \ of [RFC1034] applies.\n   If the server supports EDNS and receives a query with\
    \ an unsupported\n   EDNS version, the correct response is BADVERS [RFC6891].\n\
    \   If the server does not support EDNS at all, FORMERR is the expected\n   error\
    \ code.  That said, a minimal EDNS server implementation requires\n   parsing\
    \ the OPT records and responding with an empty OPT record in\n   the additional\
    \ section in most cases.  There is no need to interpret\n   any EDNS options present\
    \ in the request, as unsupported EDNS options\n   are expected to be ignored [RFC6891].\
    \  Additionally, EDNS flags can\n   be ignored.  The only part of the OPT record\
    \ that needs to be\n   examined is the version field to determine if BADVERS needs\
    \ to be\n   sent or not.\n"
- title: 8.  Testing
  contents:
  - "8.  Testing\n   Testing is divided into two sections: \"Basic DNS\", which all\
    \ servers\n   should meet, and \"Extended DNS\", which should be met by all servers\n\
    \   that support EDNS (a server is deemed to support EDNS if it gives a\n   valid\
    \ EDNS response to any EDNS query).  If a server does not support\n   EDNS, it\
    \ should still respond to all the tests, albeit with error\n   responses.\n  \
    \ These tests query for records at the apex of a zone that the server\n   is nominally\
    \ configured to serve.  All tests should use the same\n   zone.\n   It is advisable\
    \ to run all of the tests below in parallel so as to\n   minimise the delays due\
    \ to multiple timeouts when the servers do not\n   respond.  There are 16 queries\
    \ directed to each nameserver (assuming\n   no packet loss) testing different\
    \ aspects of Basic DNS and Extended\n   DNS.\n   The tests below use dig from\
    \ BIND 9.11.0 [ISC].  Replace $zone with\n   the name of the zone being used for\
    \ testing.  Replace $server with\n   the name or address of the server being tested.\n\
    \   When testing, recursive servers set RD=1 and choose a zone name that\n   is\
    \ known to exist and is not being served by the recursive server.\n   The root\
    \ zone (\".\") is often a good candidate, as it is DNSSEC\n   signed.  RD=1, rather\
    \ than RD=0, should be present in the responses\n   for all test involving the\
    \ opcode QUERY.  Non-authoritative answers\n   (AA=0) are expected when talking\
    \ to a recursive server.  AD=1 is only\n   expected if the server is validating\
    \ responses and one or both AD=1\n   or DO=1 is set in the request, otherwise\
    \ AD=0 is expected.\n"
- title: '8.1.  Testing: Basic DNS'
  contents:
  - "8.1.  Testing: Basic DNS\n   This first set of tests cover Basic DNS server behaviour\
    \ and all\n   servers should pass these tests.\n"
- title: 8.1.1.  Is the server configured for the zone?
  contents:
  - "8.1.1.  Is the server configured for the zone?\n   Ask for the SOA record of\
    \ the configured zone.  This query is made\n   with no DNS flag bits set and without\
    \ EDNS.\n   We expect the SOA record for the zone to be returned in the answer\n\
    \   section, the rcode to be set to NOERROR, and the Authoritative Answer\n  \
    \ (AA) and Query/Response (QR) bits to be set in the header; the\n   Recursion\
    \ Available (RA) bits may also be set [RFC1034].  We do not\n   expect an OPT\
    \ record to be returned [RFC6891].\n   Verify the server is configured for the\
    \ zone:\n   dig +noedns +noad +norec soa $zone @$server\n   expect: status: NOERROR\n\
    \   expect: the SOA record to be present in the answer section\n   expect: flag:\
    \ aa to be present\n   expect: flag: rd to NOT be present\n   expect: flag: ad\
    \ to NOT be present\n   expect: the OPT record to NOT be present\n"
- title: 8.1.2.  Testing Unknown Types
  contents:
  - "8.1.2.  Testing Unknown Types\n   Identifying servers that fail to respond to\
    \ unknown or unsupported\n   types can be done by making an initial DNS query\
    \ for an A record,\n   making a number of queries for an unallocated type, then\
    \ making a\n   query for an A record again.  IANA maintains a registry of allocated\n\
    \   types [IANA-DNS].\n   If the server responds to the first and last queries\
    \ but fails to\n   respond to the queries for the unallocated type, it is probably\n\
    \   faulty.  The test should be repeated a number of times to eliminate\n   the\
    \ likelihood of a false positive due to packet loss.\n   Ask for the TYPE1000\
    \ RRset at the configured zone's name.  This query\n   is made with no DNS flag\
    \ bits set and without EDNS.  TYPE1000 has\n   been chosen for this purpose, as\
    \ IANA is unlikely to allocate this\n   type in the near future and it is not\
    \ in a range reserved for private\n   use [RFC6895].  Any unallocated type code\
    \ could be chosen for this\n   test.\n   We expect no records to be returned in\
    \ the answer section, the rcode\n   to be set to NOERROR, and the AA and QR bits\
    \ to be set in the header;\n   RA may also be set [RFC1034].  We do not expect\
    \ an OPT record to be\n   returned [RFC6891].\n   Check that queries for an unknown\
    \ type work:\n   dig +noedns +noad +norec type1000 $zone @$server\n   expect:\
    \ status: NOERROR\n   expect: an empty answer section.\n   expect: flag: aa to\
    \ be present\n   expect: flag: rd to NOT be present\n   expect: flag: ad to NOT\
    \ be present\n   expect: the OPT record to NOT be present\n"
- title: 8.1.3.  Testing Header Bits
  contents:
  - '8.1.3.  Testing Header Bits

    '
- title: 8.1.3.1.  Testing CD=1 Queries
  contents:
  - "8.1.3.1.  Testing CD=1 Queries\n   Ask for the SOA record of the configured zone.\
    \  This query is made\n   with only the CD DNS flag bit set, with all other DNS\
    \ bits clear, and\n   without EDNS.\n   We expect the SOA record for the zone\
    \ to be returned in the answer\n   section, the rcode to be set to NOERROR, and\
    \ the AA and QR bits to be\n   set in the header.  We do not expect an OPT record\
    \ to be returned.\n   If the server supports DNSSEC, CD should be set in the response\n\
    \   [RFC4035]; otherwise, CD should be clear [RFC1034].\n   Check that queries\
    \ with CD=1 work:\n   dig +noedns +noad +norec +cd soa $zone @$server\n   expect:\
    \ status: NOERROR\n   expect: the SOA record to be present in the answer section\n\
    \   expect: flag: aa to be present\n   expect: flag: rd to NOT be present\n  \
    \ expect: flag: ad to NOT be present\n   expect: the OPT record to NOT be present\n"
- title: 8.1.3.2.  Testing AD=1 Queries
  contents:
  - "8.1.3.2.  Testing AD=1 Queries\n   Ask for the SOA record of the configured zone.\
    \  This query is made\n   with only the AD DNS flag bit set, with all other DNS\
    \ bits clear, and\n   without EDNS.\n   We expect the SOA record for the zone\
    \ to be returned in the answer\n   section, the rcode to be set to NOERROR, and\
    \ the AA and QR bits to be\n   set in the header.  We do not expect an OPT record\
    \ to be returned.\n   The purpose of this query is to detect blocking of queries\
    \ with the\n   AD bit present, not the specific value of AD in the response.\n\
    \   Check that queries with AD=1 work:\n   dig +noedns +norec +ad soa $zone @$server\n\
    \   expect: status: NOERROR\n   expect: the SOA record to be present in the answer\
    \ section\n   expect: flag: aa to be present\n   expect: flag: rd to NOT be present\n\
    \   expect: the OPT record to NOT be present\n   AD use in queries is defined\
    \ in [RFC6840].\n"
- title: 8.1.3.3.  Testing Reserved Bit
  contents:
  - "8.1.3.3.  Testing Reserved Bit\n   Ask for the SOA record of the configured zone.\
    \  This query is made\n   with only the final reserved DNS flag bit set, with\
    \ all other DNS\n   bits clear, and without EDNS.\n   We expect the SOA record\
    \ for the zone to be returned in the answer\n   section, the rcode to be set to\
    \ NOERROR, and the AA and QR bits to be\n   set in the header; RA may be set.\
    \  The final reserved bit must not be\n   set [RFC1034].  We do not expect an\
    \ OPT record to be returned\n   [RFC6891].\n   Check that queries with the last\
    \ unassigned DNS header flag work and\n   that the flag bit is not copied to the\
    \ response:\n   dig +noedns +noad +norec +zflag soa $zone @$server\n   expect:\
    \ status: NOERROR\n   expect: the SOA record to be present in the answer section\n\
    \   expect: MBZ to NOT be in the response (see below)\n   expect: flag: aa to\
    \ be present\n   expect: flag: rd to NOT be present\n   expect: flag: ad to NOT\
    \ be present\n   expect: the OPT record to NOT be present\n   MBZ (Must Be Zero)\
    \ is a dig-specific indication that the flag bit has\n   been incorrectly copied.\
    \  See Section 4.1.1 of [RFC1035]:\n   \"Z  Reserved for future use.  Must be\
    \ zero in all queries and\n      responses.\"\n"
- title: 8.1.3.4.  Testing Recursive Queries
  contents:
  - "8.1.3.4.  Testing Recursive Queries\n   Ask for the SOA record of the configured\
    \ zone.  This query is made\n   with only the RD DNS flag bit set and without\
    \ EDNS.\n   We expect the SOA record for the zone to be returned in the answer\n\
    \   section, the rcode to be set to NOERROR, and the AA, QR and RD bits\n   to\
    \ be set in the header; RA may also be set [RFC1034].  We do not\n   expect an\
    \ OPT record to be returned [RFC6891].\n   Check that recursive queries work:\n\
    \   dig +noedns +noad +rec soa $zone @$server\n   expect: status: NOERROR\n  \
    \ expect: the SOA record to be present in the answer section\n   expect: flag:\
    \ aa to be present\n   expect: flag: rd to be present\n   expect: flag: ad to\
    \ NOT be present\n   expect: the OPT record to NOT be present\n"
- title: 8.1.4.  Testing Unknown Opcodes
  contents:
  - "8.1.4.  Testing Unknown Opcodes\n   Construct a DNS message that consists of\
    \ only a DNS header with\n   opcode set to 15 (currently not allocated), no DNS\
    \ header bits set,\n   and empty question, answer, authority, and additional sections.\n\
    \   Check that new opcodes are handled:\n   dig +noedns +noad +opcode=15 +norec\
    \ +header-only @$server\n   expect: status: NOTIMP\n   expect: opcode: 15\n  \
    \ expect: all sections to be empty\n   expect: flag: aa to NOT be present\n  \
    \ expect: flag: rd to NOT be present\n   expect: flag: ad to NOT be present\n\
    \   expect: the OPT record to NOT be present\n"
- title: 8.1.5.  Testing TCP
  contents:
  - "8.1.5.  Testing TCP\n   Whether a server accepts TCP connections can be tested\
    \ by first\n   checking that it responds to UDP queries to confirm that it is\
    \ up and\n   operating, then attempting the same query over TCP.  An additional\n\
    \   query should be made over UDP if the TCP connection attempt fails to\n   confirm\
    \ that the server under test is still operating.\n   Ask for the SOA record of\
    \ the configured zone.  This query is made\n   with no DNS flag bits set and without\
    \ EDNS.  This query is to be sent\n   using TCP.\n   We expect the SOA record\
    \ for the zone to be returned in the answer\n   section, the rcode to be set to\
    \ NOERROR, and the AA and QR bits to be\n   set in the header; RA may also be\
    \ set [RFC1034].  We do not expect an\n   OPT record to be returned [RFC6891].\n\
    \   Check that TCP queries work:\n   dig +noedns +noad +norec +tcp soa $zone @$server\n\
    \   expect: status: NOERROR\n   expect: the SOA record to be present in the answer\
    \ section\n   expect: flag: aa to be present\n   expect: flag: rd to NOT be present\n\
    \   expect: flag: ad to NOT be present\n   expect: the OPT record to NOT be present\n\
    \   The requirement that TCP be supported is defined in [RFC7766].\n"
- title: '8.2.  Testing: Extended DNS'
  contents:
  - "8.2.  Testing: Extended DNS\n   The next set of tests cover various aspects of\
    \ EDNS behaviour.  If\n   any of these tests succeed (indicating at least some\
    \ EDNS support),\n   then all of them should succeed.  There are servers that\
    \ support EDNS\n   but fail to handle plain EDNS queries correctly, so a plain\
    \ EDNS\n   query is not a good indicator of lack of EDNS support.\n"
- title: 8.2.1.  Testing Minimal EDNS
  contents:
  - "8.2.1.  Testing Minimal EDNS\n   Ask for the SOA record of the configured zone.\
    \  This query is made\n   with no DNS flag bits set.  EDNS version 0 is used without\
    \ any EDNS\n   options or EDNS flags set.\n   We expect the SOA record for the\
    \ zone to be returned in the answer\n   section, the rcode to be set to NOERROR,\
    \ and the AA and QR bits to be\n   set in the header; RA may also be set [RFC1034].\
    \  We expect an OPT\n   record to be returned.  There should be no EDNS flags\
    \ present in the\n   response.  The EDNS version field should be 0, and there\
    \ should be no\n   EDNS options present [RFC6891].\n   Check that plain EDNS queries\
    \ work:\n   dig +nocookie +edns=0 +noad +norec soa $zone @$server\n   expect:\
    \ status: NOERROR\n   expect: the SOA record to be present in the answer section\n\
    \   expect: an OPT record to be present in the additional section\n   expect:\
    \ EDNS Version 0 in response\n   expect: flag: aa to be present\n   expect: flag:\
    \ ad to NOT be present\n   +nocookie disables sending an EDNS COOKIE option, which\
    \ is otherwise\n   enabled by default in BIND 9.11.0 (and later).\n"
- title: 8.2.2.  Testing EDNS Version Negotiation
  contents:
  - "8.2.2.  Testing EDNS Version Negotiation\n   Ask for the SOA record of a zone\
    \ the server is nominally configured\n   to serve.  This query is made with no\
    \ DNS flag bits set.  EDNS\n   version 1 is used without any EDNS options or EDNS\
    \ flags set.\n   We expect the SOA record for the zone to NOT be returned in the\n\
    \   answer section with the extended rcode set to BADVERS and the QR bit\n   to\
    \ be set in the header; RA may also be set [RFC1034].  We expect an\n   OPT record\
    \ to be returned.  There should be no EDNS flags present in\n   the response.\
    \  The EDNS version field should be 0 in the response, as\n   no other EDNS version\
    \ has as yet been specified [RFC6891].\n   Check that EDNS version 1 queries work\
    \ (EDNS supported):\n   dig +nocookie +edns=1 +noednsneg +noad +norec soa $zone\
    \ @$server\n   expect: status: BADVERS\n   expect: the SOA record to NOT be present\
    \ in the answer section\n   expect: an OPT record to be present in the additional\
    \ section\n   expect: EDNS Version 0 in response\n   expect: flag: aa to NOT be\
    \ present\n   expect: flag: ad to NOT be present\n   +noednsneg has been set,\
    \ as dig supports EDNS version negotiation,\n   and we want to see only the response\
    \ to the initial EDNS version 1\n   query.\n"
- title: 8.2.3.  Testing Unknown EDNS Options
  contents:
  - "8.2.3.  Testing Unknown EDNS Options\n   Ask for the SOA record of the configured\
    \ zone.  This query is made\n   with no DNS flag bits set.  EDNS version 0 is\
    \ used without any EDNS\n   flags.  An EDNS option is present with a value that\
    \ has not yet been\n   assigned by IANA.  We have picked an unassigned code of\
    \ 100 for the\n   example below.  Any unassigned EDNS option code could have been\n\
    \   chosen for this test.\n   We expect the SOA record for the zone to be returned\
    \ in the answer\n   section, the rcode to be set to NOERROR, and the AA and QR\
    \ bits to be\n   set in the header; RA may also be set [RFC1034].  We expect an\
    \ OPT\n   record to be returned.  There should be no EDNS flags present in the\n\
    \   response.  The EDNS version field should be 0, as EDNS versions other\n  \
    \ than 0 are yet to be specified, and there should be no EDNS options\n   present,\
    \ as unknown EDNS options are supposed to be ignored by the\n   server (Section\
    \ 6.1.1 of [RFC6891]).\n   Check that EDNS queries with an unknown option work\
    \ (EDNS supported):\n   dig +nocookie +edns=0 +noad +norec +ednsopt=100 soa $zone\
    \ @$server\n   expect: status: NOERROR\n   expect: the SOA record to be present\
    \ in the answer section\n   expect: an OPT record to be present in the additional\
    \ section\n   expect: OPT=100 to NOT be present\n   expect: EDNS Version 0 in\
    \ response\n   expect: flag: aa to be present\n   expect: flag: ad to NOT be present\n"
- title: 8.2.4.  Testing Unknown EDNS Flags
  contents:
  - "8.2.4.  Testing Unknown EDNS Flags\n   Ask for the SOA record of the configured\
    \ zone.  This query is made\n   with no DNS flag bits set.  EDNS version 0 is\
    \ used without any EDNS\n   options.  An unassigned EDNS flag bit is set (0x40\
    \ in this case).\n   We expect the SOA record for the zone to be returned in the\
    \ answer\n   section, the rcode to be set to NOERROR, and the AA and QR bits to\
    \ be\n   set in the header; RA may also be set [RFC1034].  We expect an OPT\n\
    \   record to be returned.  There should be no EDNS flags present in the\n   response,\
    \ as unknown EDNS flags are supposed to be ignored.  The EDNS\n   version field\
    \ should be 0, and there should be no EDNS options\n   present [RFC6891].\n  \
    \ Check that EDNS queries with unknown flags work (EDNS supported):\n   dig +nocookie\
    \ +edns=0 +noad +norec +ednsflags=0x40 soa $zone @$server\n   expect: status:\
    \ NOERROR\n   expect: the SOA record to be present in the answer section\n   expect:\
    \ an OPT record to be present in the additional section\n   expect: MBZ not to\
    \ be present\n   expect: EDNS Version 0 in response\n   expect: flag: aa to be\
    \ present\n   expect: flag: ad to NOT be present\n   MBZ (Must Be Zero) is a dig-specific\
    \ indication that a flag bit has\n   been incorrectly copied, as per Section 6.1.4\
    \ of [RFC6891].\n"
- title: 8.2.5.  Testing EDNS Version Negotiation with Unknown EDNS Flags
  contents:
  - "8.2.5.  Testing EDNS Version Negotiation with Unknown EDNS Flags\n   Ask for\
    \ the SOA record of the configured zone.  This query is made\n   with no DNS flag\
    \ bits set.  EDNS version 1 is used without any EDNS\n   options.  An unassigned\
    \ EDNS flag bit is set (0x40 in this case).\n   We expect the SOA record for the\
    \ zone to NOT be returned in the\n   answer section with the extended rcode set\
    \ to BADVERS and the QR bit\n   to be set in the header; RA may also be set [RFC1034].\
    \  We expect an\n   OPT record to be returned.  There should be no EDNS flags\
    \ present in\n   the response, as unknown EDNS flags are supposed to be ignored.\
    \  The\n   EDNS version field should be 0, as EDNS versions other than 0 are yet\n\
    \   to be specified, and there should be no EDNS options present\n   [RFC6891].\n\
    \   Check that EDNS version 1 queries with unknown flags work (EDNS\n   supported):\n\
    \   dig +nocookie +edns=1 +noednsneg +noad +norec +ednsflags=0x40 soa \\\n   \
    \    $zone @$server\n   expect: status: BADVERS\n   expect: SOA record to NOT\
    \ be present\n   expect: an OPT record to be present in the additional section\n\
    \   expect: MBZ not to be present\n   expect: EDNS Version 0 in response\n   expect:\
    \ flag: aa to NOT be present\n   expect: flag: ad to NOT be present\n"
- title: 8.2.6.  Testing EDNS Version Negotiation with Unknown EDNS Options
  contents:
  - "8.2.6.  Testing EDNS Version Negotiation with Unknown EDNS Options\n   Ask for\
    \ the SOA record of the configured zone.  This query is made\n   with no DNS flag\
    \ bits set.  EDNS version 1 is used.  An unknown EDNS\n   option is present. \
    \ We have picked an unassigned code of 100 for the\n   example below.  Any unassigned\
    \ EDNS option code could have been\n   chosen for this test.\n   We expect the\
    \ SOA record for the zone to NOT be returned in the\n   answer section with the\
    \ extended rcode set to BADVERS and the QR bit\n   to be set in the header; RA\
    \ may also be set [RFC1034].  We expect an\n   OPT record to be returned.  There\
    \ should be no EDNS flags present in\n   the response.  The EDNS version field\
    \ should be 0, as EDNS versions\n   other than 0 are yet to be specified, and\
    \ there should be no EDNS\n   options present [RFC6891].\n   Check that EDNS version\
    \ 1 queries with unknown options work (EDNS\n   supported):\n   dig +nocookie\
    \ +edns=1 +noednsneg +noad +norec +ednsopt=100 soa \\\n       $zone @$server\n\
    \   expect: status: BADVERS\n   expect: SOA record to NOT be present\n   expect:\
    \ an OPT record to be present in the additional section\n   expect: OPT=100 to\
    \ NOT be present\n   expect: EDNS Version 0 in response\n   expect: flag: aa to\
    \ NOT be present\n   expect: flag: ad to NOT be present\n"
- title: 8.2.7.  Testing Truncated Responses
  contents:
  - "8.2.7.  Testing Truncated Responses\n   Ask for the DNSKEY records of the configured\
    \ zone, which must be a\n   DNSSEC signed zone.  This query is made with no DNS\
    \ flag bits set.\n   EDNS version 0 is used without any EDNS options.  The only\
    \ EDNS flag\n   set is DO.  The EDNS UDP buffer size is set to 512.  The intention\
    \ of\n   this query is to elicit a truncated response from the server.  Most\n\
    \   signed DNSKEY responses are bigger than 512 bytes.  This test will\n   not\
    \ give a valid result if the zone is not signed.\n   We expect a response, the\
    \ rcode to be set to NOERROR, and the AA and\n   QR bits to be set.  AD may be\
    \ set in the response if the server\n   supports DNSSEC; otherwise it should be\
    \ clear; TC and RA may also be\n   set [RFC1035] [RFC4035].  We expect an OPT\
    \ record to be present in\n   the response.  There should be no EDNS flags other\
    \ than DO present in\n   the response.  The EDNS version field should be 0, and\
    \ there should\n   be no EDNS options present [RFC6891].\n   If TC is not set,\
    \ it is not possible to confirm that the server\n   correctly adds the OPT record\
    \ to the truncated responses or not.\n   dig +norec +dnssec +bufsize=512 +ignore\
    \ dnskey $zone @$server\n   expect: NOERROR\n   expect: OPT record with version\
    \ set to 0\n"
- title: 8.2.8.  Testing DO=1 Handling
  contents:
  - "8.2.8.  Testing DO=1 Handling\n   Ask for the SOA record of the configured zone,\
    \ which does not need to\n   be DNSSEC signed.  This query is made with no DNS\
    \ flag bits set.\n   EDNS version 0 is used without any EDNS options.  The only\
    \ EDNS flag\n   set is DO.\n   We expect the SOA record for the zone to be returned\
    \ in the answer\n   section, the rcode to be set to NOERROR, and the AA and QR\
    \ bits to be\n   set in the response.  AD may be set in the response if the server\n\
    \   supports DNSSEC, otherwise it should be clear; RA may also be set\n   [RFC1034].\
    \  We expect an OPT record to be returned.  There should be\n   no EDNS flags\
    \ other than DO present in the response, which should be\n   present if the server\
    \ supports DNSSEC.  The EDNS version field should\n   be 0, and there should be\
    \ no EDNS options present [RFC6891].\n   Check that DO=1 queries work (EDNS supported):\n\
    \   dig +nocookie +edns=0 +noad +norec +dnssec soa $zone @$server\n   expect:\
    \ status: NOERROR\n   expect: the SOA record to be present in the answer section\n\
    \   expect: an OPT record to be present in the additional section\n   expect:\
    \ DO=1 to be present if an RRSIG is in the response\n   expect: EDNS Version 0\
    \ in response\n   expect: flag: aa to be present\n"
- title: 8.2.9.  Testing EDNS Version Negotiation with DO=1
  contents:
  - "8.2.9.  Testing EDNS Version Negotiation with DO=1\n   Ask for the SOA record\
    \ of the configured zone, which does not need to\n   be DNSSEC signed.  This query\
    \ is made with no DNS flag bits set.\n   EDNS version 1 is used without any EDNS\
    \ options.  The only EDNS flag\n   set is DO.\n   We expect the SOA record for\
    \ the zone NOT to be returned in the\n   answer section, the extended rcode to\
    \ be set to BADVERS, and the QR\n   bit to be set in the header; RA may also be\
    \ set [RFC1034].  We expect\n   an OPT record to be returned.  There should be\
    \ no EDNS flags other\n   than DO present in the response, which should be there\
    \ if the server\n   supports DNSSEC.  The EDNS version field should be 0, and\
    \ there\n   should be no EDNS options present [RFC6891].\n   Check that EDNS version\
    \ 1, DO=1 queries work (EDNS supported):\n   dig +nocookie +edns=1 +noednsneg\
    \ +noad +norec +dnssec soa \\\n       $zone @$server\n   expect: status: BADVERS\n\
    \   expect: SOA record to NOT be present\n   expect: an OPT record to be present\
    \ in the additional section\n   expect: DO=1 to be present if the EDNS version\
    \ 0 DNSSEC query test\n           returned DO=1\n   expect: EDNS Version 0 in\
    \ response\n   expect: flag: aa to NOT be present\n"
- title: 8.2.10.  Testing with Multiple Defined EDNS Options
  contents:
  - "8.2.10.  Testing with Multiple Defined EDNS Options\n   Ask for the SOA record\
    \ of the configured zone.  This query is made\n   with no DNS flag bits set. \
    \ EDNS version 0 is used.  A number of\n   defined EDNS options are present (NSID\
    \ [RFC5001], DNS COOKIE\n   [RFC7873], EDNS Client Subnet [RFC7871], and EDNS\
    \ Expire [RFC7314]).\n   We expect the SOA record for the zone to be returned\
    \ in the answer\n   section, the rcode to be set to NOERROR, and the AA and QR\
    \ bits to be\n   set in the header; RA may also be set [RFC1034].  We expect an\
    \ OPT\n   record to be returned.  There should be no EDNS flags present in the\n\
    \   response.  The EDNS version field should be 0.  Any of the requested\n   EDNS\
    \ options supported by the server and permitted server\n   configuration may be\
    \ returned [RFC6891].\n   Check that EDNS queries with multiple defined EDNS options\
    \ work:\n   dig +edns=0 +noad +norec +cookie +nsid +expire +subnet=0.0.0.0/0 \\\
    \n       soa $zone @$server\n   expect: status: NOERROR\n   expect: the SOA record\
    \ to be present in the answer section\n   expect: an OPT record to be present\
    \ in the additional section\n   expect: EDNS Version 0 in response\n   expect:\
    \ flag: aa to be present\n   expect: flag: ad to NOT be present\n"
- title: 8.3.  When EDNS Is Not Supported
  contents:
  - "8.3.  When EDNS Is Not Supported\n   If EDNS is not supported by the nameserver,\
    \ we expect a response to\n   each of the above queries.  That response may be\
    \ a FORMERR error\n   response, or the OPT record may just be ignored.\n   Some\
    \ nameservers only return an EDNS response when a particular EDNS\n   option or\
    \ flag (e.g., DO=1) is present in the request.  This\n   behaviour is not compliant\
    \ behaviour and may hide other incorrect\n   behaviour from the above tests. \
    \ Retesting with the triggering\n   option/flag present will expose this misbehaviour.\n"
- title: 9.  Remediation
  contents:
  - "9.  Remediation\n   Nameserver operators are generally expected to test their\
    \ own\n   infrastructure for compliance to standards.  The above tests should\n\
    \   be run when new systems are brought online and should be repeated\n   periodically\
    \ to ensure continued interoperability.\n   Domain registrants who do not maintain\
    \ their own DNS infrastructure\n   are entitled to a DNS service that conforms\
    \ to standards and\n   interoperates well.  Registrants who become aware that\
    \ their DNS\n   operator does not have a well-maintained or compliant infrastructure\n\
    \   should insist that their service provider correct issues and switch\n   providers\
    \ if they do not.\n   In the event that an operator experiences problems due to\
    \ the\n   behaviour of nameservers outside their control, the above tests will\n\
    \   help in narrowing down the precise issue(s), which can then be\n   reported\
    \ to the relevant party.\n   If contact information for the operator of a misbehaving\
    \ nameserver\n   is not already known, the following methods of communication\
    \ could be\n   considered:\n   *  the RNAME of the zone authoritative for the\
    \ name of the\n      misbehaving server\n   *  the RNAME of zones for which the\
    \ offending server is authoritative\n   *  administrative or technical contacts\
    \ listed in the registration\n      information for the parent domain of the name\
    \ of the misbehaving\n      server or for zones for which the nameserver is authoritative\n\
    \   *  the registrar or registry for such zones\n   *  DNS-specific, operational\
    \ fora (e.g., mailing lists)\n   Operators of parent zones may wish to regularly\
    \ test the\n   authoritative nameservers of their child zones.  However, parent\n\
    \   operators can have widely varying capabilities in terms of\n   notification\
    \ or remediation depending on whether they have a direct\n   relationship with\
    \ the child operator.  Many Top-Level Domain (TLD)\n   registries, for example,\
    \ cannot directly contact their registrants\n   and may instead need to communicate\
    \ through the relevant registrar.\n   In such cases, it may be most efficient\
    \ for registrars to take on the\n   responsibility for testing the nameservers\
    \ of their registrants,\n   since they have a direct relationship.\n   When notification\
    \ is not effective at correcting problems with a\n   misbehaving nameserver, parent\
    \ operators can choose to remove NS\n   record sets (and glue records below) that\
    \ refer to the faulty server\n   until the servers are fixed.  This should only\
    \ be done as a last\n   resort and with due consideration, as removal of a delegation\
    \ can\n   have unanticipated side effects.  For example, other parts of the DNS\n\
    \   tree may depend on names below the removed zone cut, and the parent\n   operator\
    \ may find themselves responsible for causing new DNS failures\n   to occur.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Testing protocol compliance can potentially\
    \ result in false reports\n   of attempts to attack services from Intrusion Detection\
    \ Services and\n   firewalls.  All of the tests are well-formed (though not necessarily\n\
    \   common) DNS queries.  None of the tests listed above should cause any\n  \
    \ harm to a protocol-compliant server.\n   Relaxing firewall settings to ensure\
    \ EDNS compliance could\n   potentially expose a critical implementation flaw\
    \ in the nameserver.\n   Nameservers should be tested for conformance before relaxing\
    \ firewall\n   settings.\n   When removing delegations for non-compliant servers,\
    \ there can be a\n   knock-on effect on other zones that require these zones to\
    \ be\n   operational for the nameservers addresses to be resolved.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names -\
    \ concepts and facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034,\
    \ November 1987,\n              <https://www.rfc-editor.org/info/rfc1034>.\n \
    \  [RFC1035]  Mockapetris, P., \"Domain names - implementation and\n         \
    \     specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n             \
    \ November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n   [RFC3225]  Conrad,\
    \ D., \"Indicating Resolver Support of DNSSEC\",\n              RFC 3225, DOI\
    \ 10.17487/RFC3225, December 2001,\n              <https://www.rfc-editor.org/info/rfc3225>.\n\
    \   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Protocol Modifications for the DNS Security\n              Extensions\"\
    , RFC 4035, DOI 10.17487/RFC4035, March 2005,\n              <https://www.rfc-editor.org/info/rfc4035>.\n\
    \   [RFC6840]  Weiler, S., Ed. and D. Blacka, Ed., \"Clarifications and\n    \
    \          Implementation Notes for DNS Security (DNSSEC)\", RFC 6840,\n     \
    \         DOI 10.17487/RFC6840, February 2013,\n              <https://www.rfc-editor.org/info/rfc6840>.\n\
    \   [RFC6891]  Damas, J., Graff, M., and P. Vixie, \"Extension Mechanisms\n  \
    \            for DNS (EDNS(0))\", STD 75, RFC 6891,\n              DOI 10.17487/RFC6891,\
    \ April 2013,\n              <https://www.rfc-editor.org/info/rfc6891>.\n   [RFC6895]\
    \  Eastlake 3rd, D., \"Domain Name System (DNS) IANA\n              Considerations\"\
    , BCP 42, RFC 6895, DOI 10.17487/RFC6895,\n              April 2013, <https://www.rfc-editor.org/info/rfc6895>.\n\
    \   [RFC7766]  Dickinson, J., Dickinson, S., Bellis, R., Mankin, A., and\n   \
    \           D. Wessels, \"DNS Transport over TCP - Implementation\n          \
    \    Requirements\", RFC 7766, DOI 10.17487/RFC7766, March 2016,\n           \
    \   <https://www.rfc-editor.org/info/rfc7766>.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [IANA-DNS] IANA, \"Domain Name System (DNS)\
    \ Parameters\",\n              <https://www.iana.org/assignments/dns-parameters/>.\n\
    \   [ISC]      \"Internet Systems Consortuim\", <https://www.isc.org/>.\n   [RFC2671]\
    \  Vixie, P., \"Extension Mechanisms for DNS (EDNS0)\",\n              RFC 2671,\
    \ DOI 10.17487/RFC2671, August 1999,\n              <https://www.rfc-editor.org/info/rfc2671>.\n\
    \   [RFC3597]  Gustafsson, A., \"Handling of Unknown DNS Resource Record\n   \
    \           (RR) Types\", RFC 3597, DOI 10.17487/RFC3597, September\n        \
    \      2003, <https://www.rfc-editor.org/info/rfc3597>.\n   [RFC5001]  Austein,\
    \ R., \"DNS Name Server Identifier (NSID) Option\",\n              RFC 5001, DOI\
    \ 10.17487/RFC5001, August 2007,\n              <https://www.rfc-editor.org/info/rfc5001>.\n\
    \   [RFC7314]  Andrews, M., \"Extension Mechanisms for DNS (EDNS) EXPIRE\n   \
    \           Option\", RFC 7314, DOI 10.17487/RFC7314, July 2014,\n           \
    \   <https://www.rfc-editor.org/info/rfc7314>.\n   [RFC7871]  Contavalli, C.,\
    \ van der Gaast, W., Lawrence, D., and W.\n              Kumari, \"Client Subnet\
    \ in DNS Queries\", RFC 7871,\n              DOI 10.17487/RFC7871, May 2016,\n\
    \              <https://www.rfc-editor.org/info/rfc7871>.\n   [RFC7873]  Eastlake\
    \ 3rd, D. and M. Andrews, \"Domain Name System (DNS)\n              Cookies\"\
    , RFC 7873, DOI 10.17487/RFC7873, May 2016,\n              <https://www.rfc-editor.org/info/rfc7873>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The contributions of Matthew Pounsett and Tim Wicinski are\
    \ gratefully\n   acknowledged.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   M. Andrews\n   Internet Systems Consortium\n   PO Box\
    \ 360\n   Newmarket, NH 03857\n   United States of America\n   Email: marka@isc.org\n\
    \   Ray Bellis\n   Internet Systems Consortium\n   PO Box 360\n   Newmarket, NH\
    \ 03857\n"
