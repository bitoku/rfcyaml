- contents:
  - '     Better-Than-Nothing Security: An Unauthenticated Mode of IPsec

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2008 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies how to use the Internet Key Exchange (IKE)\n
    \  protocols, such as IKEv1 and IKEv2, to setup \"unauthenticated\"\n   security
    associations (SAs) for use with the IPsec Encapsulating\n   Security Payload (ESP)
    and the IPsec Authentication Header (AH).  No\n   changes to IKEv2 bits-on-the-wire
    are required, but Peer\n   Authorization Database (PAD) and Security Policy Database
    (SPD)\n   extensions are specified.  Unauthenticated IPsec is herein referred\n
    \  to by its popular acronym, \"BTNS\" (Better-Than-Nothing Security).\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n     1.1.  Conventions Used in This Document  . . . . . . . .
    . . . .  2\n   2.  BTNS . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . .  3\n   3.  Usage Scenarios  . . . . . . . . . . . . . . . . . . . . . . .
    \ 5\n     3.1.  Example #1: A Security Gateway . . . . . . . . . . . . . .  5\n
    \    3.2.  Example #2: A Mixed End-System . . . . . . . . . . . . . .  7\n     3.3.
    \ Example #3: A BTNS-Only System . . . . . . . . . . . . . .  8\n     3.4.  Miscellaneous
    Comments . . . . . . . . . . . . . . . . . .  9\n   4.  Security Considerations
    \ . . . . . . . . . . . . . . . . . . .  9\n     4.1.  Connection Latching and
    Channel Binding  . . . . . . . . .  9\n     4.2.  Leap-of-Faith (LoF) for BTNS
    . . . . . . . . . . . . . . . 10\n   5.  Acknowledgements . . . . . . . . . .
    . . . . . . . . . . . . . 10\n   6.  References . . . . . . . . . . . . . . .
    . . . . . . . . . . . 10\n     6.1.  Normative References . . . . . . . . . .
    . . . . . . . . . 10\n     6.2.  Informative References . . . . . . . . . . .
    . . . . . . . 10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Here we describe how to establish unauthenticated IPsec
    SAs using\n   IKEv2 [RFC4306] and unauthenticated public keys.  No new on-the-wire\n
    \  protocol elements are added to IKEv2.\n   The [RFC4301] processing model is
    assumed.\n   This document does not define an opportunistic BTNS mode of IPsec\n
    \  whereby nodes may fall back to unprotected IP when their peers do not\n   support
    IKEv2, nor does it describe \"leap-of-faith\" modes or\n   \"connection latching\".\n
    \  See [RFC5387] for the applicability and uses of BTNS and definitions\n   of
    these terms.\n   This document describes BTNS in terms of IKEv2 and [RFC4301]'s\n
    \  concepts.  There is no reason why the same methods cannot be used\n   with
    IKEv1 [RFC2408], [RFC2409], and [RFC2401]; however, those\n   specifications do
    not include the PAD concepts, and therefore it may\n   not be possible to implement
    BTNS on all compliant RFC2401\n   implementations.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [RFC2119].\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  BTNS\n   The IPsec processing model is hereby modified as follows:\n   o
    \ A new ID type is added: 'PUBLICKEY'.  IDs of this type have public\n      keys
    as values.  This ID type is not used on the wire.\n   o  PAD entries that match
    on PUBLICKEY IDs are referred to as \"BTNS\n      PAD entries\".  All other PAD
    entries are referred to as \"non-BTNS\n      PAD entries\".\n   o  BTNS PAD entries
    may match on specific peer PUBLICKEY IDs (or\n      public key fingerprints) or
    on all peer public keys.  The latter\n      is referred to as the \"wildcard BTNS
    PAD entry\".\n   o  BTNS PAD entries MUST logically (see below) follow all other
    PAD\n      entries (the PAD being an ordered list).\n   o  At most one wildcard
    BTNS PAD entry may appear in the PAD, and, if\n      present, MUST be the last
    entry in the PAD (see below).\n   o  Any peer that uses an IKEv2 AUTH method involving
    a digital\n      signature (made with a private key to a public key cryptosystem)\n
    \     may match a BTNS PAD entry, provided that it matches no non-BTNS\n      PAD
    entries.  Suitable AUTH methods as of August 2007 are: RSA\n      Digital Signature
    (method #1) and DSS Digital Signature (method\n      #3); see [RFC4306], Section
    3.8.\n   o  A BTNS-capable implementation of IPsec will first search the PAD\n
    \     for non-BTNS entries matching a peer's ID.  If no matching\n      non-BTNS
    PAD entries are found, then the peer's ID MUST be coerced\n      to be of 'PUBLICKEY'
    type with the peer's public key as its value.\n      The PAD is then searched
    again for matching BTNS PAD entries.\n      This ensures that BTNS PAD entries
    logically follow non-BTNS PAD\n      entries.  A single PAD search that preserves
    these semantics is\n      allowed.\n   o  A peer that matches a BTNS PAD entry
    is referred to as a \"BTNS\n      peer\".  Such a peer is \"authenticated\" by
    verifying the signature\n      in its IKEv2 AUTH payload with the public key from
    the peer's CERT\n      payload.\n   o  Of course, if no matching PAD entry is
    found, then the IKE SA is\n      rejected as usual.\n   o  A new flag for SPD
    entries: 'BTNS_OK'.  Traffic to/from peers that\n      match the BTNS PAD entry
    will match only SPD entries that have the\n      BTNS_OK flag set.  The SPD may
    be searched by address or by ID (of\n      type PUBLICKEY for BTNS peers), as
    per the IPsec processing model\n      [RFC4301].  Searching by ID in this case
    requires creation of SPD\n      entries that are bound to public key values.  This
    could be used\n      to build \"leap-of-faith\" [RFC5387] behavior (see Section
    4.2), for\n      example.\n   Nodes MUST reject IKE_SA proposals from peers that
    match non-BTNS PAD\n   entries but fail to authenticate properly.\n   Nodes wishing
    to be treated as BTNS nodes by their peers MUST include\n   bare public key CERT
    payloads.  Currently only bare RSA public key\n   CERT payloads are defined, which
    means that BTNS works only with RSA\n   public keys at this time (see \"Raw RSA
    Key\" in Section 3.6 of\n   [RFC4306]).  Nodes MAY also include any number of
    certificates that\n   bind the same public key.  These certificates do not need
    to be\n   pre-shared with their peers (e.g., because ephemeral, self-signed).\n
    \  RSA keys for use in BTNS may be generated at any time, but connection\n   latching
    [ConnLatch] requires that they remain constant between IKEv2\n   exchanges that
    are used to establish SAs for latched connections.\n   To preserve standard IPsec
    access control semantics:\n   o  BTNS PAD entries MUST logically follow all non-BTNS
    PAD entries,\n   o  the wildcard BTNS PAD entry MUST be the last entry in the
    PAD,\n      logically, and\n   o  the wildcard BTNS PAD entry MUST have ID constraints
    that do not\n      logically overlap those of other PAD entries.\n   As described
    above, the logical PAD ordering requirements can easily\n   be implemented by
    searching the PAD twice at peer authentication\n   time: once using the peer-asserted
    ID, and if that fails, once using\n   the peer's public key as a PUBLICKEY ID.
    \ A single pass\n   implementation that meets this requirement is permitted.\n
    \  The BTNS entry ID constraint non-overlap requirement can easily be\n   implemented
    by searching the PAD twice: once when BTNS peers\n   authenticate, and again when
    BTNS peers negotiate child SAs.  In the\n   first pass, the PAD is searched for
    a matching PAD entry as described\n   above.  In the second, it is searched to
    make sure that BTNS peers'\n   asserted child SA traffic selectors do not conflict
    with non-BTNS PAD\n   entries.  Single pass implementations that preserve these
    semantics\n   are feasible.\n"
  title: 2.  BTNS
- contents:
  - "3.  Usage Scenarios\n   In order to explain the above rules, a number of scenarios
    will be\n   examined.  The goal here is to persuade the reader that the above\n
    \  rules are both sufficient and necessary.\n   This section is informative only.\n
    \  To explain the scenarios, a reference diagram describing an example\n   network
    will be used.  It is as follows:\n                             [Q]  [R]\n        AS1
    \                  .    .              AS2\n     [A]----+----[SG-A].......+....+.......[SG-B]-------[B]\n
    \                             ......               \\\n                              ..PI..
    \               ----[btns-B]\n                              ......\n                 [btns-C].....+....+.......[btns-D]\n
    \                   Figure 1: Reference Network Diagram\n   In this diagram, there
    are eight systems.  Six systems are end-nodes\n   (A, B, C, D, Q, and R).  Two
    are security gateways (SG-A, SG-B)\n   protecting networks on which [A] and [B]
    reside.  Node [Q] is IPsec\n   and BTNS capable.  Node [R] is a simple node, with
    no IPsec or BTNS\n   capability.  Nodes [C] and [D] are BTNS capable.\n   Nodes
    [C] and [Q] have fixed addresses.  Node [D] has a non-fixed\n   address.\n   We
    will examine how these various nodes communicate with node [SG-A]\n   and/or how
    [SG-A] rejects communications with some such nodes.  In\n   the first example,
    we examine [SG-A]'s point of view.  In the second\n   example, we look at [Q]'s
    point of view.  In the third example, we\n   look at [C]'s point of view.\n   PI
    is the Public Internet (\"The Wild\").\n"
  - contents:
    - "3.1.  Example #1: A Security Gateway\n   The machine that we will focus on
      in this example is [SG-A], a\n   firewall device of some kind that we wish to
      configure to respond to\n   BTNS connections from [C].\n   [SG-A] has the following
      PAD and SPD entries:\n                                Child SA\n         Rule
      Remote ID        IDs allowed  SPD Search by\n         ---- ---------        -----------
      \ -------------\n          1   <B's ID>         <B's network>  by-IP\n          2
      \  <Q's ID>         <Q's host>     by-IP\n          3   PUBLICKEY:any         ANY
      \      by-IP\n   The last entry is the BTNS entry.\n                        Figure
      2: [SG-A] PAD Table\n   Note that [SG-A]'s PAD entry has one and only one wildcard
      PAD entry:\n   the BTNS catch-all PAD entry as the last entry, as described
      in\n   Section 2.\n   <Child SA IDs allowed> and <SPD Search by> are from [RFC4301],\n
      \  Section 4.4.3.\n         Rule Local Remote Next Layer BTNS  Action\n               addr
      \ addr   Protocol   ok\n         ---- ----- ------ ---------- ----  -----------------------\n
      \         1   [A]    [R]      ANY      N/A  BYPASS\n          2   [A]    [Q]
      \     ANY      no   PROTECT(ESP,tunnel,AES,\n                                                        SHA256)\n
      \         3   [A]     B-net   ANY      no   PROTECT(ESP,tunnel,AES,\n                                                        SHA256)\n
      \         4   [A]     ANY     ANY      yes  PROTECT(ESP,transport,\n                                                        integr+conf)\n
      \                       Figure 3: [SG-A] SPD Table\n   The processing by [SG-A]
      of SA establishment attempts by various\n   peers is as follows:\n   o  [Q]
      does not match PAD entry #1 but does match PAD entry #2.  PAD\n      processing
      stops, then the SPD is searched by [Q]'s ID to find\n      entry #2.  CHILD
      SAs are then allowed that have [SG-A]'s and [Q]'s\n      addresses as the end-point
      addresses.\n   o  [SG-B] matches PAD entry #1.  PAD processing stops, then the
      SPD\n      is searched by [SG-B]'s ID to find SPD entry #3.  CHILD SAs are\n
      \     then allowed that have [SG-A]'s address and any addresses from B's\n      network
      as the end-point addresses.\n   o  [R] does not initiate any IKE SAs; its traffic
      to [A] is bypassed\n      by SPD entry #1.\n   o  [C] does not match PAD entries
      #1 or #2 but does match entry #3,\n      the BTNS wildcard PAD entry.  The SPD
      is searched by [C]'s\n      address, and SPD entry #4 is matched.  CHILD SAs
      are then allowed\n      that have [SG-A]'s address and [C]'s address as the
      end-point\n      addresses, provided that [C]'s address is neither [Q]'s nor
      any of\n      [B]'s (see Section 2).  See the last bullet item below.\n   o
      \ A rogue BTNS node attempting to assert [Q]'s or [B]'s addresses\n      will
      either match the PAD entries for [Q] or [B] and fail to\n      authenticate
      as [Q] or [B], in which case they are rejected, or\n      they will match PAD
      entry #3 but will not be allowed to create\n      CHILD SAs with [Q]'s or [B]'s
      addresses as traffic selectors.\n   o  A rogue BTNS node attempting to establish
      an SA whereby the rogue\n      node asserts [C]'s address will succeed at establishing
      such an\n      SA.  Protection for [C] requires additional bindings of [C]'s\n
      \     specific BTNS ID (that is, its public key) to its traffic flows\n      through
      connection latching and channel binding or through leap-\n      of-faith, none
      of which are described here.\n"
    title: '3.1.  Example #1: A Security Gateway'
  - contents:
    - "3.2.  Example #2: A Mixed End-System\n   [Q] is an NFSv4 server.\n   [Q] is
      a native IPsec implementation, and its NFSv4 implementation is\n   IPsec-aware.\n
      \  [Q] wants to protect all traffic with [A].  [Q] also wants to protect\n   NFSv4
      traffic with all peers.  Its PAD and SPD are configured as\n   follows:\n                                Child
      SA\n         Rule Remote ID        IDs allowed  SPD Search by\n         ----
      ---------        -----------  -------------\n          1   <[A]'s ID>       <[A]'s
      address> by-IP\n          2   PUBLICKEY:any    ANY             by-IP\n   The
      last entry is the BTNS entry.\n                          Figure 4: [Q] PAD Table\n
      \        Rule Local Remote Next Layer BTNS  Action\n               addr  addr
      \  Protocol   ok\n         ---- ----- ------ ---------- ----  -----------------------\n
      \         1    [Q]    [A]     ANY      no   PROTECT(ESP,tunnel,AES,\n                                                        SHA256)\n
      \         2    [Q]    ANY     ANY      yes  PROTECT(ESP,transport,\n               with
      \                                     integr+conf)\n             port 2049\n
      \                         Figure 5: [Q] SPD Table\n   The same analysis shown
      above in Section 3.1 applies here with\n   respect to [SG-A], [C], and rogue
      peers.  The second SPD entry\n   permits any BTNS-capable node to negotiate
      a port-specific SA to port\n   2049, the port on which NFSv4 runs.  Additionally,
      [SG-B] is treated\n   as a BTNS peer as it is not known to [Q], and therefore
      any host\n   behind [SG-B] can access the NFSv4 service on [Q].  As [Q] has
      no\n   formal relationship with [SG-B], rogues can impersonate [B] (i.e.,\n
      \  assert [B]'s addresses).\n"
    title: '3.2.  Example #2: A Mixed End-System'
  - contents:
    - "3.3.  Example #3: A BTNS-Only System\n   [C] supports only BTNS and wants to
      use BTNS to protect NFSv4\n   traffic.  Its PAD and SPD are configured as follows:\n
      \                               Child SA\n         Rule Remote ID        IDs
      allowed  SPD Search by\n         ---- ---------        -----------  -------------\n
      \         1   PUBLICKEY:any    ANY          by-IP\n   The last (and only) entry
      is the BTNS entry.\n                          Figure 6: [Q] PAD Table\n         Rule
      Local Remote Next Layer BTNS  Action\n               addr  addr   Protocol   ok\n
      \        ---- ----- ------ ---------- ----  -----------------------\n          1
      \   [C]    ANY      ANY      yes  PROTECT(ESP,transport,\n                     with
      \                              integr+conf)\n                     port\n                     2049\n
      \         2    [C]    ANY      ANY      N/A  BYPASS\n                        Figure
      7: [SG-A] SPD Table\n   The analysis from Section 3.1 applies as follows:\n
      \  o  Communication with [Q] on port 2049 matches SPD entry number 1.\n      This
      causes [C] to initiate an IKEv2 exchange with [Q].  The PAD\n      entry on
      [C] causes it to not care what identity [Q] asserts.\n      Further authentication
      (and channel binding) could occur within\n      the NFSv4 protocol.\n   o  Communication
      with [A], [B], or any other internet machine\n      (including [Q]), occurs
      in the clear, so long as it is not on port\n      2049.\n   o  All analysis
      about rogue BTNS nodes applies, but they can only\n      assert SAs for port
      2049.\n"
    title: '3.3.  Example #3: A BTNS-Only System'
  - contents:
    - "3.4.  Miscellaneous Comments\n   If [SG-A] were not BTNS capable, then it would
      not have PAD and SPD\n   entries #3 and #4, respectively, in example #1.  Then
      [C] would be\n   rejected as usual under the standard IPsec model [RFC4301].\n
      \  Similarly, if [Q] were not BTNS capable, then it would not have PAD\n   and
      SPD entries #2 in example #2.  Then [C] would be rejected as\n   usual under
      the standard IPsec model [RFC4301].\n"
    title: 3.4.  Miscellaneous Comments
  title: 3.  Usage Scenarios
- contents:
  - "4.  Security Considerations\n   Unauthenticated security association negotiation
    is subject to man-\n   in-the-middle (MITM) attacks and should be used with care.
    \ Where\n   security infrastructures are lacking, this may indeed be better than\n
    \  nothing.\n   Use with applications that bind authentication at higher network\n
    \  layers to secure channels at lower layers may provide one secure way\n   to
    use unauthenticated IPsec, but this is not specified herein.\n   The BTNS PAD
    entry must be last and its child SA ID constraints must\n   be non-overlapping
    with any other PAD entry, as described in\n   Section 2.  This will ensure that
    no BTNS peer can impersonate\n   another IPsec non-BTNS peer.\n"
  - contents:
    - "4.1.  Connection Latching and Channel Binding\n   BTNS is subject to MITM attacks.
      \ One way to protect against MITM\n   attacks subsequent to initial communications
      is to use \"connection\n   latching\" [ConnLatch].  In connection latching,
      upper layer protocols\n   (ULPs) cooperate with IPsec to bind discrete packet
      flows to\n   sequences of similar SAs.  Connection latching requires native
      IPsec\n   implementations.\n   MITMs can be detected by using application-layer
      authentication\n   frameworks and/or mechanisms, such as the GSS-API [RFC2743],
      with\n   channel binding [RFC5056].  IPsec \"channels\" are nothing other than\n
      \  latched connections.\n"
    title: 4.1.  Connection Latching and Channel Binding
  - contents:
    - "4.2.  Leap-of-Faith (LoF) for BTNS\n   \"Leap of faith\" is the term generally
      used when a user accepts the\n   assertion that a given key identifies a peer
      on the first\n   communication (despite a lack of strong evidence for that assertion),\n
      \  and then remembers this association for future communications.\n   Specifically
      this is a common mode of operation for Secure Shell\n   [RFC4251] clients.  When
      a server is encountered for the first time,\n   the Secure Shell client may
      ask the user whether to accept the\n   server's public key.  If so, the client
      records the server's name (as\n   given by the user) and public key in a database.\n
      \  Leap of faith can work in a similar way for BTNS nodes, but it is\n   currently
      still being designed and specified by the IETF BTNS WG.\n"
    title: 4.2.  Leap-of-Faith (LoF) for BTNS
  title: 4.  Security Considerations
- contents:
  - "5.  Acknowledgements\n   Thanks to the following reviewer: Stephen Kent.\n"
  title: 5.  Acknowledgements
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use
      in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC4301]    Kent, S. and K. Seo, \"Security Architecture for
      the\n                Internet Protocol\", RFC 4301, December 2005.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [ConnLatch]  Williams, N., \"IPsec Channels:
      Connection Latching\",\n                Work in Progress, April 2008.\n   [RFC2401]
      \   Kent, S. and R. Atkinson, \"Security Architecture for the\n                Internet
      Protocol\", RFC 2401, November 1998.\n   [RFC2408]    Maughan, D., Schneider,
      M., and M. Schertler, \"Internet\n                Security Association and Key
      Management Protocol\n                (ISAKMP)\", RFC 2408, November 1998.\n
      \  [RFC2409]    Harkins, D. and D. Carrel, \"The Internet Key Exchange\n                (IKE)\",
      RFC 2409, November 1998.\n   [RFC2743]    Linn, J., \"Generic Security Service
      Application Program\n                Interface Version 2, Update 1\", RFC 2743,
      January 2000.\n   [RFC4251]    Ylonen, T. and C. Lonvick, \"The Secure Shell
      (SSH)\n                Protocol Architecture\", RFC 4251, January 2006.\n   [RFC4306]
      \   Kaufman, C., \"Internet Key Exchange (IKEv2) Protocol\",\n                RFC
      4306, December 2005.\n   [RFC5056]    Williams, N., \"On the Use of Channel
      Bindings to Secure\n                Channels\", RFC 5056, November 2007.\n   [RFC5387]
      \   Touch, J., Black, D., and Y. Wang, \"Problem and\n                Applicability
      Statement for Better-Than-Nothing Security\n                (BTNS)\", RFC 5387,
      November 2008.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Authors' Addresses\n   Nicolas Williams\n   Sun Microsystems\n   5300 Riata Trace
    Ct\n   Austin, TX  78727\n   US\n   EMail: Nicolas.Williams@sun.com\n   Michael
    C. Richardson\n   Sandelman Software Works\n   470 Dawson Avenue\n   Ottawa, ON
    \ K1Z 5V7\n   CA\n   EMail: mcr@sandelman.ottawa.on.ca\n   URI:   http://www.sandelman.ottawa.on.ca/\n"
  title: Authors' Addresses
