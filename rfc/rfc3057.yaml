- title: __initial_text__
  contents:
  - '                    ISDN Q.921-User Adaptation Layer

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a protocol for backhauling of ISDN Q.921 User\n\
    \   messages over IP using the Stream Control Transmission Protocol\n   (SCTP).\
    \  This protocol would be used between a Signaling Gateway (SG)\n   and Media\
    \ Gateway Controller (MGC).  It is assumed that the SG\n   receives ISDN signaling\
    \ over a standard ISDN interface.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction.................................................\
    \  2\n     1.1  Scope.....................................................  2\n\
    \     1.2  Terminology...............................................  3\n   \
    \  1.3  IUA Overview..............................................  4\n     1.4\
    \  Services Provided by the IUA Layer........................  9\n     1.5  Functions\
    \ Implemented by the IUA Layer.................... 12\n     1.6  Definition of\
    \ IUA Boundaries.............................. 14\n   2.  Conventions..................................................\
    \ 16\n   3.  Protocol Elements............................................ 17\n\
    \     3.1  Common Message Header..................................... 17\n   \
    \  3.2  IUA Message Header........................................ 20\n     3.3\
    \  Description of Messages................................... 22\n   4.  Procedures...................................................\
    \ 45\n     4.1  Procedures to Support Service in Section 1.4.1............ 45\n\
    \     4.2  Procedures to Support Service in Section 1.4.2............ 46\n   \
    \  4.3  Procedures to Support Service in Section 1.4.3............ 47\n   5. Examples......................................................\
    \ 56\n     5.1 Establishment of associations between SG and MGC examples.. 56\n\
    \     5.2 ASP Traffic Fail-over Examples............................. 58\n   \
    \  5.3 Q.921/Q.931 primitives backhaul Examples................... 59\n     5.4\
    \ Layer Management Communication Examples.................... 61\n   6.  Security.....................................................\
    \ 61\n     6.1 Threats.................................................... 61\n\
    \     6.2 Protecting Confidentiality ................................ 62\n   7.\
    \  IANA Considerations.......................................... 62\n     7.1\
    \ SCTP Payload Protocol Identifier........................... 62\n     7.2 IUA\
    \ Protocol Extensions.................................... 62\n   8.  Acknowledgements.............................................\
    \ 64\n   9.  References................................................... 64\n\
    \   10. Authors' Addresses........................................... 65\n   11.\
    \ Full Copyright Statement..................................... 66\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In this document, the term Q.921-User refers to an upper\
    \ layer which\n   uses the services of Q.921, not the user side of ISDN interface\
    \ [1].\n   Examples of the upper layer would be Q.931 and QSIG.\n   This section\
    \ describes the need for ISDN Q.921-User Adaptation (IUA)\n   layer protocol as\
    \ well as how this protocol shall be implemented.\n"
- title: 1.1 Scope
  contents:
  - "1.1 Scope\n   There is a need for Switched Circuit Network (SCN) signaling protocol\n\
    \   delivery from an ISDN Signaling Gateway (SG) to a Media Gateway\n   Controller\
    \ (MGC) as described in the Framework Architecture for\n   Signaling Transport\
    \ [4].  The delivery mechanism SHOULD meet the\n   following criteria:\n   * \
    \ Support for transport of the Q.921 / Q.931 boundary primitives\n   *  Support\
    \ for communication between Layer Management modules on SG\n      and MGC\n  \
    \ *  Support for management of active associations between SG and MGC\n   This\
    \ document supports both ISDN Primary Rate Access (PRA) as well as\n   Basic Rate\
    \ Access (BRA) including the support for both point-to-point\n   and point-to-multipoint\
    \ modes of communication.  This support\n   includes Facility Associated Signaling\
    \ (FAS), Non-Facility Associated\n   Signaling (NFAS) and NFAS with backup D channel.\
    \  QSIG adaptation\n   layer requirements do not differ from Q.931 adaptation\
    \ layer, hence;\n   the procedures described in this document are also applicable\
    \ for a\n   QSIG adaptation layer.  For simplicity, only Q.931 will be mentioned\n\
    \   in the rest of this document.\n"
- title: 1.2 Terminology
  contents:
  - "1.2 Terminology\n   Interface - For the purposes of this document an interface\
    \ supports\n   the relevant ISDN signaling channel.  This signaling channel MAY\
    \ be a\n   16 kbps D channel for an ISDN BRA as well as 64 kbps primary or\n \
    \  backup D channel for an ISDN PRA.  For QSIG, the signaling channel is\n   a\
    \ Qc channel.\n   Q.921-User - Any protocol normally using the services of the\
    \ ISDN\n   Q.921 (e.g., Q.931, QSIG, etc.).\n   Backhaul - A SG terminates the\
    \ lower layers of an SCN protocol and\n   backhauls the upper layer(s) to MGC\
    \ for call processing.  For the\n   purposes of this document the SG terminates\
    \ Q.921 and backhauls Q.931\n   to MGC.\n   Association - An association refers\
    \ to a SCTP association.  The\n   association will provide the transport for the\
    \ delivery of Q.921-User\n   protocol data units and IUA adaptation layer peer\
    \ messages.\n   Stream - A stream refers to an SCTP stream; a uni-directional\
    \ logical\n   channel established from one SCTP endpoint to another associated\
    \ SCTP\n   endpoint, within which all user messages are delivered in-sequence\n\
    \   except for those submitted to the un-ordered delivery service.\n   Interface\
    \ Identifier - The Interface Identifier identifies the\n   physical interface\
    \ at the SG for which the signaling messages are\n   sent/received. The format\
    \ of the Interface Identifier parameter can\n   be text or integer, the values\
    \ of which are assigned according to\n   network operator policy. The values used\
    \ are of local significance\n   only, coordinated between the SG and ASP.  Significance\
    \ is not\n   implied across SGs served by an AS.\n   Application Server (AS) -\
    \ A logical entity serving a specific\n   application instance.  An example of\
    \ an Application Server is a MGC\n   handling the Q.931 and call processing for\
    \ D channels terminated by\n   the Signaling Gateways.  Practically speaking,\
    \ an AS is modeled at\n   the SG as an ordered list of one or more related Application\
    \ Server\n   Processes (e.g., primary, secondary, tertiary).\n   Application Server\
    \ Process (ASP) - A process instance of an\n   Application Server.  Examples of\
    \ Application Server Processes are\n   primary or backup MGC instances.\n   Fail-over\
    \ - The capability to re-route signaling traffic as required\n   between related\
    \ ASPs in the event of failure or unavailability of the\n   currently used ASP\
    \ (e.g., from primary MGC to back-up MGC).  Fail-\n   over also applies upon the\
    \ return to service of a previously\n   unavailable process.\n   Layer Management\
    \ - Layer Management is a nodal function that handles\n   the inputs and outputs\
    \ between the IUA layer and a local management\n   entity.\n   Network Byte Order\
    \ - Most significant byte first, a.k.a Big Endian.\n   Host - The computing platform\
    \ that the ASP process is running on.\n"
- title: 1.3 IUA Overview
  contents:
  - "1.3 IUA Overview\n   The architecture that has been defined [4] for SCN signaling\n\
    \   transport over IP uses multiple components, including an IP transport\n  \
    \ protocol, a signaling common transport protocol and an adaptation\n   module\
    \ to support the services expected by a particular SCN signaling\n   protocol\
    \ from its underlying protocol layer.\n   This document defines an adaptation\
    \ module that is suitable for the\n   transport of ISDN Q.921-User (e.g., Q.931)\
    \ messages.\n"
- title: 1.3.1  Example - SG to MGC
  contents:
  - "1.3.1  Example - SG to MGC\n   In a Signaling Gateway, it is expected that the\
    \ ISDN signaling is\n   received over a standard ISDN network termination.  The\
    \ SG then\n   provides interworking of transport functions with IP Signaling\n\
    \   Transport, in order to transport the Q.931 signaling messages to the\n   MGC\
    \ where the peer Q.931 protocol layer exists, as shown below:\n            ******\
    \   ISDN        ******      IP      *******\n            * EP *---------------*\
    \ SG *--------------* MGC *\n            ******               ******         \
    \     *******\n            +-----+                                  +-----+\n\
    \            |Q.931|              (NIF)               |Q.931|\n            +-----+\
    \           +----------+           +-----+\n            |     |           |  \
    \   | IUA|           | IUA |\n            |     |           |     +----+     \
    \      +-----+\n            |Q.921|           |Q.921|SCTP|           |SCTP |\n\
    \            |     |           |     +----+           +-----+\n            | \
    \    |           |     | IP |           | IP  |\n            +-----+         \
    \  +-----+----+           +-----+\n            NIF  - Nodal Interworking Function\n\
    \            EP   - ISDN End Point\n            SCTP - Stream Control Transmission\
    \ Protocol (Refer to [3])\n            IUA  - ISDN User Adaptation Layer Protocol\n\
    \   It is recommended that the IUA use the services of the Stream Control\n  \
    \ Transmission Protocol (SCTP) as the underlying reliable common\n   signaling\
    \ transport protocol.  The use of SCTP provides the following\n   features:\n\
    \      -  explicit packet-oriented delivery (not stream-oriented)\n      -  sequenced\
    \ delivery of user messages within multiple streams,\n         with an option\
    \ for order-of-arrival delivery of individual user\n         messages,\n     \
    \ -  optional multiplexing of user messages into SCTP datagrams,\n      -  network-level\
    \ fault tolerance through support of multi-homing\n         at either or both\
    \ ends of an association,\n      -  resistance to flooding and masquerade attacks,\
    \ and\n      -  data segmentation to conform to discovered path MTU size\n   There\
    \ are scenarios without redundancy requirements and scenarios in\n   which redundancy\
    \ is supported below the transport layer.  In these\n   cases, the SCTP functions\
    \ above MAY NOT be a requirement and TCP can\n   be used as the underlying common\
    \ transport protocol.\n"
- title: 1.3.2  Support for the management of SCTP associations between the SG
  contents:
  - "1.3.2  Support for the management of SCTP associations between the SG\n     \
    \  and ASPs\n   The IUA layer at the SG maintains the availability state of all\n\
    \   dynamically registered remote ASPs, in order to manage the SCTP\n   Associations\
    \ and the traffic between the SG and ASPs.  As well, the\n   active/inactive state\
    \ of remote ASP(s) are also maintained.  Active\n   ASPs are those currently receiving\
    \ traffic from the SG.\n   The IUA layer MAY be instructed by local management\
    \ to establish an\n   SCTP association to a peer IUA node.  This can be achieved\
    \ using the\n   M-SCTP ESTABLISH primitive to request, indicate and confirm the\n\
    \   establishment of an SCTP association with a peer IUA node.\n   The IUA layer\
    \ MAY also need to inform local management of the status\n   of the underlying\
    \ SCTP associations using the M-SCTP STATUS request\n   and indication primitive.\
    \  For example, the IUA MAY inform local\n   management of the reason for the\
    \ release of an SCTP association,\n   determined either locally within the IUA\
    \ layer or by a primitive from\n   the SCTP.\n"
- title: 1.3.3  Signaling Network Architecture
  contents:
  - "1.3.3  Signaling Network Architecture\n   A Signaling Gateway is used to support\
    \ the transport of Q.921-User\n   signaling traffic to one or more distributed\
    \ ASPs (e.g., MGCs).\n   Clearly, the IUA protocol is not designed to meet the\
    \ performance and\n   reliability requirements for such transport by itself. \
    \ However, the\n   conjunction of distributed architecture and redundant networks\
    \ does\n   allow for a sufficiently reliable transport of signaling traffic over\n\
    \   IP.  The IUA protocol is flexible enough to allow its operation and\n   management\
    \ in a variety of physical configurations, enabling Network\n   Operators to meet\
    \ their performance and reliability requirements.\n   To meet the ISDN signaling\
    \ reliability and performance requirements\n   for carrier grade networks, Network\
    \ Operators SHOULD ensure that\n   there is no single point of failure provisioned\
    \ in the end-to-end\n   network architecture between an ISDN node and an IP ASP.\n\
    \   Depending of course on the reliability of the SG and ASP functional\n   elements,\
    \ this can typically be met by the provision of redundant\n   QOS-bounded IP network\
    \ paths for SCTP Associations between SCTP End\n   Points, and redundant Hosts,\
    \ and redundant SGs.  The distribution of\n   ASPs within the available Hosts\
    \ is also important.  For a particular\n   Application Server, the related ASPs\
    \ SHOULD be distributed over at\n   least two Hosts.\n   An example logical network\
    \ architecture relevant to carrier-grade\n   operation in the IP network domain\
    \ is shown in Figure 1 below:\n                                              \
    \            Host1\n     ********                                         **************\n\
    \     *      *_________________________________________*  ********  *\n     *\
    \      *                                _________*  * ASP1 *  *\n     *  SG1 *\
    \   SCTP Associations           |         *  ********  *\n     *      *_______________________\
    \        |         *            *\n     ********                       |     \
    \  |         **************\n                                    |       |\n \
    \    ********                       |       |\n     *      *_______________________________|\n\
    \     *      *                       |\n     *  SG2 *    SCTP Associations  |\n\
    \     *      *____________           |\n     *      *            |          |\
    \                     Host2\n     ********            |          |           \
    \      **************\n                         |          |_________________*\
    \  ********  *\n                         |____________________________*  * ASP1\
    \ *  *\n                                                      *  ********  *\n\
    \                                                      *            *\n      \
    \                                                **************\n            \
    \                                                  .\n                       \
    \                                       .\n                                  \
    \                            .\n                       Figure 2 - Logical Model\
    \ Example\n   For carrier grade networks, the failure or isolation of a particular\n\
    \   ASP SHOULD NOT cause stable calls to be dropped.  This implies that\n   ASPs\
    \ need, in some cases, to share the call state or be able to pass\n   the call\
    \ state between each other.  However, this sharing or\n   communication of call\
    \ state information is outside the scope of this\n   document.\n"
- title: 1.3.4 ASP Fail-over Model and Terminology
  contents:
  - "1.3.4 ASP Fail-over Model and Terminology\n   The IUA layer supports ASP fail-over\
    \ functions in order to support a\n   high availability of call processing capability.\
    \  All Q.921-User\n   messages incoming to an SG are assigned to a unique Application\n\
    \   Server, based on the Interface Identifier of the message.\n   The Application\
    \ Server is, in practical terms, a list of all ASPs\n   configured to process\
    \ Q.921-User messages from certain Interface\n   Identifiers.  One or more ASPs\
    \ in the list are normally active (i.e.,\n   handling traffic) while any others\
    \ MAY be unavailable or inactive, to\n   be possibly used in the event of failure\
    \ or unavailability of the\n   active ASP(s).\n   The fail-over model supports\
    \ an n+k redundancy model, where n ASP(s)\n   are the minimum number of redundant\
    \ ASPs required to handle traffic\n   and k ASPs are available to take over for\
    \ a failed or unavailable\n   ASP.  Note that 1+1 active/standby redundancy is\
    \ a subset of this\n   model.  A simplex 1+0 model is also supported as a subset,\
    \ with no\n   ASP redundancy.\n   To avoid a single point of failure, it is recommended\
    \ that a minimum\n   of two ASPs be in the list, resident in separate hosts and\
    \ therefore\n   available over different SCTP Associations.  For example, in the\n\
    \   network shown in Figure 2, all messages from a particular D Channel\n   (Interface\
    \ Identifier) could be sent to ASP1 in Host1 or ASP1 in\n   Host2. The AS list\
    \ at SG1 might look like the following:\n      Interface Identifier(s) - Application\
    \ Server #1\n          ASP1/Host1  - State=Up, Active\n          ASP1/Host2  -\
    \ State=Up, Inactive\n   In this 1+1 redundancy case, ASP1 in Host1 would be sent\
    \ any incoming\n   message for the Interface Identifiers registered.  ASP1 in\
    \ Host2\n   would normally be brought to the active state upon failure of, or\n\
    \   loss of connectivity to, ASP1/Host1.  In this example, both ASPs are\n   Up,\
    \ meaning that the related SCTP association and far-end IUA peer is\n   ready.\n\
    \   The AS List at SG1 might also be set up in load-share mode as shown\n   below:\n\
    \      Interface Identifier(s) - Application Server #1\n          ASP1/Host1 -\
    \ State=Up, Active\n          ASP1/Host2 - State=Up, Active\n   In this case,\
    \ both the ASPs would be sent a portion of the traffic.\n   In the process of\
    \ fail-over, it is recommended that in the case of\n   ASPs supporting call processing,\
    \ stable calls do not get released.\n   It is possible that calls in transition\
    \ MAY fail, although measures\n   of communication between the ASPs involved can\
    \ be used to mitigate\n   this problem.  For example, the two ASPs MAY share call\
    \ state via\n   shared memory, or MAY use an ASP to ASP protocol to pass call\
    \ state\n   information.  The ASP to ASP protocol is outside the scope of this\n\
    \   document.\n"
- title: 1.3.5  Client/Server Model
  contents:
  - "1.3.5  Client/Server Model\n   It is recommended that the SG and ASP be able\
    \ to support both client\n   and server operation.  The peer endpoints using IUA\
    \ SHOULD be\n   configured so that one always takes on the role of client and\
    \ the\n   other the role of server for initiating SCTP associations.  The\n  \
    \ default orientation would be for the SG to take on the role of server\n   while\
    \ the ASP is the client.  In this case, ASPs SHOULD initiate the\n   SCTP association\
    \ to the SG.\n   The SCTP (and UDP/TCP) Registered User Port Number Assignment\
    \ for IUA\n   is 9900.\n"
- title: 1.4  Services Provided by the IUA Layer
  contents:
  - '1.4  Services Provided by the IUA Layer

    '
- title: 1.4.1  Support for transport of Q.921/Q.931 boundary primitives
  contents:
  - "1.4.1  Support for transport of Q.921/Q.931 boundary primitives\n   In the backhaul\
    \ scenario, the Q.921/Q.931 boundary primitives are\n   exposed.  IUA layer needs\
    \ to support all of the primitives of this\n   boundary to successfully backhaul\
    \ Q.931.\n   This includes the following primitives [1]:\n   DL-ESTABLISH\n  \
    \ The DL-ESTABLISH primitives are used to request, indicate and confirm\n   the\
    \ outcome of the procedures for establishing multiple frame\n   operation.\n \
    \  DL-RELEASE\n   DL-RELEASE primitives are used to request, indicate, and confirm\
    \ the\n   outcome of the procedures for terminating a previously established\n\
    \   multiple frame operation, or for reporting an unsuccessful\n   establishment\
    \ attempt.\n   DL-DATA\n   The DL-DATA primitives are used to request and indicate\
    \ layer 3\n   (Q.931) messages which are to be transmitted, or have been received,\n\
    \   by the Q.921 layer using the acknowledged information transfer\n   service.\n\
    \   DL-UNIT DATA\n   The DL-UNIT DATA primitives are used to request and indicate\
    \ layer 3\n   (Q.931) messages which are to be transmitted, by the Q.921 layer\n\
    \   using the unacknowledged information transfer service.\n"
- title: 1.4.2  Support for communication between Layer Management modules on SG
  contents:
  - "1.4.2  Support for communication between Layer Management modules on SG\n   \
    \    and MGC\n   It is envisioned that the IUA layer needs to provide some services\n\
    \   that will facilitate communication between Layer Management modules\n   on\
    \ the SG and MGC.  These primitives are pointed out in [2], which\n   are shown\
    \ below:\n   M-TEI STATUS\n   The M-TEI STATUS primitives are used to request,\
    \ confirm and indicate\n   the status (assigned/unassigned) of a TEI.\n   M-ERROR\n\
    \   The M-ERROR primitive is used to indicate an error with a received\n   IUA\
    \ message (e.g., interface identifier value is not known to the\n   SG).\n"
- title: 1.4.3 Support for management of active associations between SG and MGC
  contents:
  - "1.4.3 Support for management of active associations between SG and MGC\n   A\
    \ set of primitives between the IUA layer and the Layer Management\n   are defined\
    \ below to help the Layer Management manage the SCTP\n   association(s) between\
    \ the SG and MGC.  The IUA layer can be\n   instructed by the Layer Management\
    \ to establish an SCTP association\n   to a peer IUA node.  This procedure can\
    \ be achieved using the M-SCTP\n   ESTABLISH primitive.\n   M-SCTP ESTABLISH\n\
    \   The M-SCTP ESTABLISH primitives are used to request, indicate, and\n   confirm\
    \ the establishment of an SCTP association to a peer IUA node.\n   M-SCTP RELEASE\n\
    \   The M-SCTP RELEASE primitives are used to request, indicate, and\n   confirm\
    \ the release of an SCTP association to a peer IUA node.\n   The IUA layer MAY\
    \ also need to inform the status of the SCTP\n   associations to the Layer Management.\
    \  This can be achieved using the\n   M-SCTP STATUS primitive.\n   M-SCTP STATUS\n\
    \   The M-SCTP STATUS primitives are used to request and indicate the\n   status\
    \ of the underlying SCTP association(s).\n   The Layer Management MAY need to\
    \ inform the IUA layer of an AS/ASP\n   status (i.e., failure, active, etc.),\
    \ so that messages can be\n   exchanged between IUA layer peers to stop traffic\
    \ to the local IUA\n   user.  This can be achieved using the M-ASP STATUS primitive.\n\
    \   M-ASP STATUS\n   The ASP status is stored inside IUA layer on both the SG\
    \ and MGC\n   sides.  The M-ASP STATUS primitive can be used by Layer Management\
    \ to\n   request the status of the Application Server Process from the IUA\n \
    \  layer.  This primitive can also be used to indicate the status of the\n   Application\
    \ Server Process.\n   M-ASP-UP\n   The M-ASP-UP primitive can be used by Layer\
    \ Management to send a ASP\n   Up message for the Application Server Process.\
    \  It can also be used\n   to generate an ASP Up Acknowledgement.\n   M-ASP-DOWN\n\
    \   The M-ASP-DOWN primitive can be used by Layer Management to send a\n   ASP\
    \ Down message for the Application Server Process.  It can also be\n   used to\
    \ generate an ASP Down Acknowledgement.\n   M-ASP-ACTIVE\n   The M-ASP-UP primitive\
    \ can be used by Layer Management to send a ASP\n   Active message for the Application\
    \ Server Process.  It can also be\n   used to generate an ASP Active Acknowledgement.\n\
    \   M-ASP-INACTIVE\n   The M-ASP-UP primitive can be used by Layer Management\
    \ to send a ASP\n   Inactive message for the Application Server Process.  It can\
    \ also be\n   used to generate an ASP Inactive Acknowledgement.\n   M-AS STATUS\n\
    \   The M-AS STATUS primitive can be used by Layer Management to request\n   the\
    \ status of the Application Server.  This primitive can also be\n   used to indicate\
    \ the status of the Application Server.\n"
- title: 1.5 Functions Implemented by the IUA Layer
  contents:
  - '1.5 Functions Implemented by the IUA Layer

    '
- title: 1.5.1 Mapping
  contents:
  - "1.5.1 Mapping\n   The IUA layer MUST maintain a map of the Interface Identifier\
    \ to a\n   physical interface on the Signaling Gateway.  A physical interface\n\
    \   would be a T1 line, E1 line, etc., and could include the TDM\n   timeslot.\
    \ In addition, for a given interface the SG MUST be able to\n   identify the associated\
    \ signaling channel.  IUA layers on both SG and\n   MGC MAY maintain the status\
    \ of TEIs and SAPIs.\n   The SG maps an Interface Identifier to an SCTP association/stream\n\
    \   only when an ASP sends an ASP Active message for a particular\n   Interface\
    \ Identifier.  It MUST be noted, however, that this mapping\n   is dynamic and\
    \ could change at any time due to a change of ASP state.\n   This mapping could\
    \ even temporarily be invalid, for example during\n   failover of one ASP to another.\
    \  Therefore, the SG MUST maintain the\n   states of AS/ASP and reference them\
    \ during the routing of an messages\n   to an AS/ASP.\n   One example of the logical\
    \ view of relationship between D channel,\n   Interface Identifier, AS and ASP\
    \ in the SG is shown below:\n          /---------------------------------------------------+\n\
    \         /   /------------------------------------------------|--+\n        /\
    \   /                                                 v  |\n       /   /    +----+\
    \             act+-----+    +-------+ -+--+-|+--+-\n"
- title: D chan1-------->|IID |-+          +-->| ASP |--->| Assoc |       v
  contents:
  - "D chan1-------->|IID |-+          +-->| ASP |--->| Assoc |       v\n        \
    \ /      +----+ |  +----+  |   +-----+    +-------+ -+--+--+--+-\n        /  \
    \            +->| AS |--+                        Streams\n       /        +----+\
    \ |  +----+   stb+-----+\n"
- title: D chan2-------->|IID |-+              | ASP |
  contents:
  - "D chan2-------->|IID |-+              | ASP |\n                +----+       \
    \         +-----+\n   where IID = Interface Identifier\n   Note that an ASP can\
    \ be in more than one AS.\n"
- title: 1.5.2 Status of ASPs
  contents:
  - "1.5.2 Status of ASPs\n   The IUA layer on the SG MUST maintain the state of the\
    \ ASPs it is\n   supporting.  The state of an ASP changes because of reception\
    \ of\n   peer-to-peer messages (ASPM messages as described in Section 3.3.2)\n\
    \   or reception of indications from the local SCTP association.  ASP\n   state\
    \ transition procedures are described in Section 4.3.1.\n   At a SG, an Application\
    \ Server list MAY contain active and inactive\n   ASPs to support ASP load-sharing\
    \ and fail-over procedures.  When, for\n   example, both a primary and a back-up\
    \ ASP are available, IUA peer\n   protocol is required to control which ASP is\
    \ currently active.  The\n   ordered list of ASPs within a logical Application\
    \ Server is kept\n   updated in the SG to reflect the active Application Server\n\
    \   Process(es).\n   Also the IUA layer MAY need to inform the local management\
    \ of the\n   change in status of an ASP or AS.  This can be achieved using the\
    \ M-\n   ASP STATUS or M-AS STATUS primitives.\n"
- title: 1.5.3 SCTP Stream Management
  contents:
  - "1.5.3 SCTP Stream Management\n   SCTP allows a user specified number of streams\
    \ to be opened during\n   the initialization.  It is the responsibility of the\
    \ IUA layer to\n   ensure proper management of these streams.  Because of the\n\
    \   unidirectional nature of streams, an IUA layer is not aware of the\n   stream\
    \ number to Interface Identifier mapping of its peer IUA layer.\n   Instead, the\
    \ Interface Identifier is in the IUA message header.\n   The use of SCTP streams\
    \ within IUA is recommended in order to\n   minimize transmission and buffering\
    \ delay, therefore improving the\n   overall performance and reliability of the\
    \ signaling elements.  It is\n   recommended that a separate SCTP stream is used\
    \ for each D channel.\n"
- title: 1.5.4 Seamless Network Management Interworking
  contents:
  - "1.5.4 Seamless Network Management Interworking\n   The IUA layer on the SG SHOULD\
    \ pass an indication of unavailability\n   of the IUA-User (Q.931) to the local\
    \ Layer Management, if the\n   currently active ASP moves from the ACTIVE state.\
    \  The Layer\n   Management could instruct Q.921 to take some action, if it deems\n\
    \   appropriate.\n   Likewise, if an SCTP association fails, the IUA layer on\
    \ both the SG\n   and ASP sides MAY generate Release primitives to take the data\
    \ links\n   out-of-service.\n"
- title: 1.5.5 Congestion Management
  contents:
  - "1.5.5 Congestion Management\n   If the IUA layer becomes congested (implementation\
    \ dependent), it MAY\n   stop reading from the SCTP association to flow control\
    \ from the peer\n   IUA.\n"
- title: 1.6 Definition of IUA Boundaries
  contents:
  - '1.6 Definition of IUA Boundaries

    '
- title: 1.6.1 Definition of IUA/Q.921 boundary
  contents:
  - "1.6.1 Definition of IUA/Q.921 boundary\n   DL-ESTABLISH\n   DL-RELEASE\n   DL-DATA\n\
    \   DL-UNIT DATA\n"
- title: 1.6.2 Definition of IUA/Q.931 boundary
  contents:
  - "1.6.2 Definition of IUA/Q.931 boundary\n   DL-ESTABLISH\n   DL-RELEASE\n   DL-DATA\n\
    \   DL-UNIT DATA\n"
- title: 1.6.3 Definition of SCTP/IUA Boundary
  contents:
  - "1.6.3 Definition of SCTP/IUA Boundary\n   An example of the upper layer primitives\
    \ provided by SCTP are\n   available in Reference [3] section 10.\n"
- title: 1.6.4 Definition of IUA/Layer-Management Boundary
  contents:
  - "1.6.4 Definition of IUA/Layer-Management Boundary\n   M-SCTP ESTABLISH request\n\
    \   Direction: LM -> IUA\n   Purpose: LM requests ASP to establish an SCTP association\
    \ with an SG.\n   M-STCP ESTABLISH confirm\n   Direction: IUA -> LM\n   Purpose:\
    \ ASP confirms to LM that it has established an SCTP\n            association\
    \ with an SG.\n   M-SCTP ESTABLISH indication\n   Direction: IUA -> LM\n   Purpose:\
    \ SG informs LM that an ASP has established an SCTP\n            association.\n\
    \   M-SCTP RELEASE request\n   Direction: LM -> IUA\n   Purpose: LM requests ASP\
    \ to release an SCTP association with SG.\n   M-SCTP RELEASE confirm\n   Direction:\
    \ IUA -> LM\n   Purpose: ASP confirms to LM that it has released SCTP association\n\
    \            with SG.\n   M-SCTP RELEASE indication\n   Direction: IUA -> LM\n\
    \   Purpose: SG informs LM that ASP has released an SCTP association.\n   M-SCTP\
    \ STATUS request\n   Direction: LM -> IUA\n   Purpose: LM requests IUA to report\
    \ status of SCTP association.\n   M-SCTP STATUS indication\n   Direction: IUA\
    \ -> LM\n   Purpose: IUA reports status of SCTP association.\n   M-ASP STATUS\
    \ request\n   Direction: LM -> IUA\n   Purpose: LM requests SG to report status\
    \ of remote ASP.\n   M-ASP STATUS indication\n   Direction: IUA -> LM\n   Purpose:\
    \ SG reports status of remote ASP.\n   M-AS-STATUS request\n   Direction: LM ->\
    \ IUA\n   Purpose: LM requests SG to report status of AS.\n   M-AS-STATUS indication\n\
    \   Direction: IUA -> LM\n   Purpose: SG reports status of AS.\n   M-NOTIFY indication\n\
    \   Direction: IUA -> LM\n   Purpose: ASP reports that it has received a NOTIFY\
    \ message\n            from its peer.\n   M-ERROR indication\n   Direction: IUA\
    \ -> LM\n   Purpose: ASP or SG reports that it has received an ERROR\n       \
    \     message from its peer.\n   M-ASP-UP request\n   Direction: LM -> IUA\n \
    \  Purpose: LM requests ASP to start its operation and send an ASP UP\n      \
    \      message to the SG.\n   M-ASP-UP confirm\n   Direction: IUA -> LM\n   Purpose:\
    \ ASP reports that is has received an ASP UP Acknowledgement\n            message\
    \ from the SG.\n   M-ASP-DOWN request\n   Direction: LM -> IUA\n   Purpose: LM\
    \ requests ASP to stop its operation and send an ASP DOWN\n            message\
    \ to the SG.\n   M-ASP-DOWN confirm\n   Direction: IUA -> LM\n   Purpose: ASP\
    \ reports that is has received an ASP DOWN\n            Acknowledgement message\
    \ from the SG.\n   M-ASP-ACTIVE request\n   Direction: LM -> IUA\n   Purpose:\
    \ LM requests ASP to send an ASP ACTIVE message to the SG.\n   M-ASP-ACTIVE confirm\n\
    \   Direction: IUA -> LM\n   Purpose: ASP reports that is has received an ASP\
    \ ACTIVE\n            Acknowledgement message from the SG.\n   M-ASP-INACTIVE\
    \ request\n   Direction: LM -> IUA\n   Purpose: LM requests ASP to send an ASP\
    \ INACTIVE message to the SG.\n   M-ASP-INACTIVE confirm\n   Direction: IUA ->\
    \ LM\n   Purpose: ASP reports that is has received an ASP INACTIVE\n         \
    \   Acknowledgement message from the SG.\n   M-TEI STATUS request\n   Direction:\
    \ LM -> IUA\n   Purpose: LM requests ASP to send a TEI status request to the SG.\n\
    \   M-TEI STATUS indication\n   Direction: IUA -> LM\n   Purpose: ASP reports\
    \ that is has received a TEI status indication\n            from the SG.\n   M-TEI\
    \ STATUS confirm\n   Direction: IUA -> LM\n   Purpose: ASP reports that is has\
    \ received a TEI status confirm from the\n            SG.\n"
- title: 2.0 Conventions
  contents:
  - "2.0 Conventions\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT,\
    \ SHOULD,\n   SHOULD NOT, RECOMMENDED, NOT RECOMMENDED, MAY, and OPTIONAL, when\n\
    \   they appear in this document, are to be interpreted as described in\n   [RFC2119].\n"
- title: 3.0 Protocol Elements
  contents:
  - "3.0 Protocol Elements\n   This section describes the format of various messages\
    \ used in this\n   protocol.\n"
- title: 3.1 Common Message Header
  contents:
  - "3.1 Common Message Header\n   The protocol messages for Q.921-User Adaptation\
    \ require a message\n   header which contains the adaptation layer version, the\
    \ message type,\n   and message length.\n    0                   1           \
    \        2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    |   Reserved    | Message Class | Message Type  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Message Length                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 3 Common Header Format\n   All fields in an IUA message\
    \ MUST be transmitted in the network byte\n   order, unless otherwise stated.\n"
- title: 3.1.1 Version
  contents:
  - "3.1.1 Version\n   The version field contains the version of the IUA adaptation\
    \ layer.\n   The supported versions are the following:\n      Value    Version\n\
    \      -----    -------\n        1      Release 1.0\n"
- title: 3.1.2  Message Classes and Types
  contents:
  - "3.1.2  Message Classes and Types\n   The following List contains the valid Message\
    \ Classes:\n   Message Class: 8 bits (unsigned integer)\n     0      Management\
    \ (MGMT) Message [IUA/M2UA/M3UA/SUA]\n     1      Transfer Messages [M3UA]\n \
    \    2      SS7 Signalling Network Management (SSNM) Messages [M3UA/SUA]\n   \
    \  3      ASP State Maintenance (ASPSM) Messages [IUA/M2UA/M3UA/SUA]\n     4 \
    \     ASP Traffic Maintenance (ASPTM) Messages [IUA/M2UA/M3UA/SUA]\n     5   \
    \   Q.921/Q.931 Boundary Primitives Transport (QPTM)\n            Messages [IUA]\n\
    \     6      MTP2 User Adaptation (MAUP) Messages [M2UA]\n     7      Connectionless\
    \ Messages [SUA]\n     8      Connection-Oriented Messages [SUA]\n  9 to 127 \
    \ Reserved by the IETF\n"
- title: 128 to 255  Reserved for IETF-Defined Message Class extensions
  contents:
  - "128 to 255  Reserved for IETF-Defined Message Class extensions\n   The following\
    \ list contains the message names for the defined\n   messages.\n    Q.921/Q.931\
    \ Boundary Primitives Transport (QPTM) Messages\n       0        Reserved\n  \
    \     1        Data Request Message\n       2        Data Indication Message\n\
    \       3        Unit Data Request Message\n       4        Unit Data Indication\
    \ Message\n       5        Establish Request\n       6        Establish Confirm\n\
    \       7        Establish Indication\n       8        Release Request\n     \
    \  9        Release Confirm\n      10        Release Indication\n    11 to 127\
    \   Reserved by the IETF\n   128 to 255   Reserved for IETF-Defined QPTM extensions\n\
    \    Application Server Process State Maintenance (ASPSM) messages\n       0 \
    \       Reserved\n       1        ASP Up (UP)\n       2        ASP Down (DOWN)\n\
    \       3        Heartbeat (BEAT)\n       4        ASP Up Ack (UP ACK)\n     \
    \  5        ASP Down Ack (DOWN ACK)\n       6        Heatbeat Ack (BEAT ACK)\n\
    \     7 to 127   Reserved by the IETF\n   128 to 255   Reserved for IETF-Defined\
    \ ASPSM extensions\n    Application Server Process Traffic Maintenance (ASPTM)\
    \ messages\n       0        Reserved\n       1        ASP Active (ACTIVE)\n  \
    \     2        ASP Inactive (INACTIVE)\n       3        ASP Active Ack (ACTIVE\
    \ ACK)\n       4        ASP Inactive Ack (INACTIVE ACK)\n     5 to 127   Reserved\
    \ by the IETF\n   128 to 255   Reserved for IETF-Defined ASPTM extensions\n  \
    \  Management (MGMT) Messages\n       0        Error (ERR)\n       1        Notify\
    \ (NTFY)\n       2        TEI Status Request\n       3        TEI Status Confirm\n\
    \       4        TEI Status Indication\n     5 to 127   Reserved by the IETF\n\
    \   128 to 255   Reserved for IETF-Defined MGMT extensions\n"
- title: 3.1.3  Reserved
  contents:
  - "3.1.3  Reserved\n   The Reserved field is 8-bits.  It SHOULD be set to all '0's\
    \ and\n   ignored by the receiver.\n"
- title: 3.1.4  Message Length
  contents:
  - "3.1.4  Message Length\n   The Message length defines the length of the message\
    \ in octets,\n   including the Common header.\n"
- title: 3.1.5  Variable-Length Parameter Format
  contents:
  - "3.1.5  Variable-Length Parameter Format\n   IUA messages consist of a Common\
    \ Header followed by zero or more\n   variable-length parameters, as defined by\
    \ the message type.  The\n   variable-length parameters contained in a message\
    \ are defined in a\n   Tag-Length-Value format as shown below.\n    0        \
    \           1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Parameter Tag        |       Parameter Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                       Parameter Value                         /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Mandatory parameters MUST be placed before optional parameters in a\n   message.\n\
    \   Parameter Tag: 16 bits (unsigned integer)\n   The Tag field is a 16 bit identifier\
    \ of the type of parameter.  It\n   takes a value of 0 to 65534.\n   The value\
    \ of 65535 is reserved for IETF-defined extensions.  Values\n   other than those\
    \ defined in specific parameter description are\n   reserved for use by the IETF.\n\
    \   Parameter Length: 16 bits (unsigned integer)\n   The Parameter Length field\
    \ contains the size of the parameter in\n   bytes, including the Parameter Tag,\
    \ Parameter Length, and Parameter\n   Value fields.  The Parameter Length does\
    \ not include any padding\n   bytes.\n   Parameter Value: variable-length\n  \
    \ The Parameter Value field contains the actual information to be\n   transferred\
    \ in the parameter.\n   The total length of a parameter (including Tag, Parameter\
    \ Length and\n   Value fields) MUST be a multiple of 4 bytes.  If the length of\
    \ the\n   parameter is not a multiple of 4 bytes, the sender pads the Parameter\n\
    \   at the end (i.e., after the Parameter Value field) with all zero\n   bytes.\
    \ The length of the padding is NOT included in the parameter\n   length field.\
    \  A sender SHOULD NEVER pad with more than 3 bytes.  The\n   receiver MUST ignore\
    \ the padding bytes.\n"
- title: 3.2 IUA Message Header
  contents:
  - "3.2 IUA Message Header\n   In addition to the common message header, there will\
    \ be a specific\n   message header for QPTM and the TEI Status MGMT messages.\
    \  The IUA\n   message header will immediately follow the Common header in these\n\
    \   messages.\n   This message header will contain the Interface Identifier and\
    \ Data\n   Link Connection Identifier (DLCI).  The Interface Identifier\n   identifies\
    \ the physical interface terminating the signaling channel\n   at the SG for which\
    \ the signaling messages are sent/received.  The\n   format of the Interface Identifier\
    \ parameter can be text or integer.\n   The Interface Identifiers are assigned\
    \ according to network operator\n   policy.  The integer values used are of local\
    \ significance only,\n   coordinated between the SG and ASP.\n   The integer formatted\
    \ Interface Identifier MUST be supported.  The\n   text formatted Interface Identifier\
    \ MAY optionally be supported.\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x1)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier (integer)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x5)           |             Length=8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            DLCI               |              Spare            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Figure 4 IUA Message Header (Integer-based Interface Identifier)\n   The\
    \ Tag value for the Integer-based Interface Identifier is 0x1.  The\n   length\
    \ is always set to a value of 8.\n    0                   1                  \
    \ 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x3)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   Interface Identifier (text)                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x5)           |             Length=8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            DLCI               |             Spare             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Figure 5  IUA Message Header (Text-based Interface Identifier)\n   The Tag\
    \ value for the Text-based Interface Identifier is 0x3.  The\n   length is variable.\n\
    \   The DLCI format is shown below in Figure 6.\n      0     1     2     3   \
    \  4     5     6     7\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   |  0  | SPR |      SAPI                         |\n   +-----------------------------------------------+\n\
    \   |  1  |            TEI                          |\n   +-----------------------------------------------+\n\
    \              Figure 6  DLCI Format\n   SPR:  Spare 2nd bit in octet 1, (1 bit)\n\
    \   SAPI: Service Access Point Identifier, 3rd through 8th bits in octet\n   \
    \   1 (6 bits)\n   TEI:  Terminal Endpoint Identifier, 2nd through 8th bits in\
    \ octet 2\n      (7 bits)\n   The DLCI field (including the SAPI and TEI) is coded\
    \ in accordance\n   with Q.921.\n"
- title: 3.3 IUA  Messages
  contents:
  - "3.3 IUA  Messages\n   The following section defines the messages and parameter\
    \ contents.\n   The IUA messages will use the common message header (Figure 3)\
    \ and\n   the IUA message header (Figure 4 and Figure 5).\n"
- title: 3.3.1 Q.921/Q.931 Boundary Primitives Transport (QPTM) Messages
  contents:
  - '3.3.1 Q.921/Q.931 Boundary Primitives Transport (QPTM) Messages

    '
- title: 3.3.1.1  Establish Messages (Request, Confirm, Indication)
  contents:
  - "3.3.1.1  Establish Messages (Request, Confirm, Indication)\n   The Establish\
    \ Messages are used to establish a data link on the\n   signaling channel or to\
    \ confirm that a data link on the signaling\n   channel has been established.\
    \  The MGC controls the state of the D\n   channel.  When the MGC desires the\
    \ D channel to be in-service, it\n   will send the Establish Request message.\n\
    \   When the MGC sends an IUA Establish Request message, the MGC MAY\n   start\
    \ a timer.  This timer would be stopped upon receipt of an IUA\n   Establish Confirm\
    \ or Establish Indication.  If the timer expires, the\n   MGC would re-send the\
    \ IUA Establish Request message and restart the\n   timer.  In other words, the\
    \ MGC MAY continue to request the\n   establishment of the data link on periodic\
    \ basis until the desired\n   state is achieved or take some other action (notify\
    \ the Management\n   Layer).\n   When the SG receives an IUA Establish Request\
    \ from the MGC, the SG\n   shall send the Q.921 Establish Request primitive to\
    \ the its Q.921\n   entity.  In addition, the SG shall map any response received\
    \ from the\n   Q.921 entity to the appropriate message to the MGC.  For example,\
    \ if\n   the Q.921 entity responds with a Q.921 Establish Confirm primitive,\n\
    \   the IUA layer shall map this to an IUA Establish Confirm message.  As\n  \
    \ another example, if the IUA Layer receives a Q.921 Release Confirm or\n   Release\
    \ Indication as an apparent response to the Q.921 Establish\n   Request primitive,\
    \ the IUA Layer shall map these to the corresponding\n   IUA Release Confirm or\
    \ Release Indication messages.\n   The Establish messages contain the common message\
    \ header followed by\n   IUA message header.  It does not contain any additional\
    \ parameters.\n"
- title: 3.3.1.2  Release Messages (Request, Indication, Confirmation)
  contents:
  - "3.3.1.2  Release Messages (Request, Indication, Confirmation)\n   The Release\
    \ Request message is used to release the data link on the\n   signaling channel.\
    \  The Release Confirm and Indication messages are\n   used to indicate that the\
    \ data link on the signaling channel has been\n   released.\n   If a response\
    \ to the Release Request message is not received, the MGC\n   MAY resend the Release\
    \ Request message.  If no response is received,\n   the MGC can consider the data\
    \ link as being released.  In this case,\n   signaling traffic on that D channel\
    \ is not expected from the SG and\n   signaling traffic will not be sent to the\
    \ SG for that D channel.\n   The Release messages contain the common message header\
    \ followed by\n   IUA message header.  The Release confirm message is in response\
    \ to a\n   Release Request message and it does not contain any additional\n  \
    \ parameters.  The Release Request and Indication messages contain the\n   following\
    \ parameter:\n     REASON\n    0                   1                   2     \
    \              3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xf)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              Reason                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The valid values for Reason are shown in the following table.\n      Define\
    \     Value           Description\n   RELEASE_MGMT   0x0     Management layer\
    \ generated release.\n   RELEASE_PHYS   0x1     Physical layer alarm generated\
    \ release.\n   RELEASE_DM     0x2     Specific to a request.  Indicates Layer\
    \ 2\n                          SHOULD release and deny all requests from\n   \
    \                       far end to establish a data link on the\n            \
    \              signaling channel (i.e., if SABME is\n                        \
    \  received send a DM)\n   RELEASE_OTHER  0x3     Other reasons\n   Note:  Only\
    \ RELEASE_MGMT, RELEASE_DM and RELEASE_OTHER are valid\n   reason codes for a\
    \ Release Request message.\n"
- title: 3.3.1.3 Data Messages (Request, Indication)
  contents:
  - "3.3.1.3 Data Messages (Request, Indication)\n   The Data message contains an\
    \ ISDN Q.921-User Protocol Data Unit (PDU)\n   corresponding to acknowledged information\
    \ transfer service.\n   The Data messages contain the common message header followed\
    \ by IUA\n   message header.  The Data message contains the following parameters:\n\
    \     PROTOCOL DATA\n    0                   1                   2           \
    \        3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |           Tag (0xe)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Protocol Data                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The protocol data contains upper layer signaling message e.g.  Q.931,\n  \
    \ QSIG.\n"
- title: 3.3.1.4 Unit Data Messages (Request, Indication)
  contents:
  - "3.3.1.4 Unit Data Messages (Request, Indication)\n   The Unit Data message contains\
    \ an ISDN Q.921-User Protocol Data Unit\n   (PDU) corresponding to unacknowledged\
    \ information transfer service.\n   The Unit Data messages contain the common\
    \ message header followed by\n   IUA message header.  The Unit Data message contains\
    \ the following\n   parameters\n     PROTOCOL DATA\n    0                   1\
    \                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xe)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Protocol Data                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.3.2  Application Server Process Maintenance (ASPM) Messages
  contents:
  - "3.3.2  Application Server Process Maintenance (ASPM) Messages\n   The ASPM messages\
    \ will only use the common message header.\n"
- title: 3.3.2.1  ASP Up (ASPUP)
  contents:
  - "3.3.2.1  ASP Up (ASPUP)\n   The ASP Up (ASPUP) message is sent by an ASP to indicate\
    \ to an SG\n   that it is ready to receive traffic or maintenance messages.\n\
    \   The ASPUP message contains the following parameters:\n     Info String (optional)\n\
    \   The format for ASPUP Message parameters is as follows:\n    0            \
    \       1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x4)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The optional INFO String parameter can carry any meaningful 8-bit\n   ASCII\
    \ character string along with the message.  Length of the INFO\n   String parameter\
    \ is from 0 to 255 characters.  No procedures are\n   presently identified for\
    \ its use but the INFO String MAY be used for\n   debugging purposes.\n"
- title: 3.3.2.2 ASP Up Ack
  contents:
  - "3.3.2.2 ASP Up Ack\n   The ASP Up Ack message is used to acknowledge an ASP Up\
    \ message\n   received from a remote IUA peer.\n   The ASPUP Ack message contains\
    \ the following parameters:\n      INFO String (optional)\n   The format for ASPUP\
    \ Ack Message parameters is as follows:\n    0                   1           \
    \        2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x4)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format and description of the optional Info String parameter is\n   the\
    \ same as for the ASP Up message (See Section 3.3.3.1).\n"
- title: 3.3.2.3  ASP Down (ASPDN)
  contents:
  - "3.3.2.3  ASP Down (ASPDN)\n   The ASP Down (ASPDN) message is sent by an ASP\
    \ to indicate to an SG\n   that it is NOT ready to receive traffic or maintenance\
    \ messages.\n   The ASPDN message contains the following parameters:\n      Reason\n\
    \      INFO String (Optional)\n   The format for the ASPDN message parameters\
    \ is as follows:\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \         Tag (0xa)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              Reason                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x4)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         INFO String*                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format and description of the optional Info String parameter is\n   the\
    \ same as for the ASP Up message (See Section 3.3.3.1.).\n   The Reason parameter\
    \ indicates the reason that the remote IUA\n   adaptation layer is unavailable.\
    \  The valid values for Reason are\n   shown in the following table.\n      Value\
    \         Description\n      0x1          Management Inhibit\n   If a ASP is removed\
    \ from Management Inhibit, the ASP will send an ASP\n   Up message.\n"
- title: 3.3.2.4  ASP Down Ack
  contents:
  - "3.3.2.4  ASP Down Ack\n   The ASP Down Ack message is used to acknowledge an\
    \ ASP Down message\n   received from a remote IUA peer.\n   The ASP Down Ack message\
    \ contains the following parameters:\n      Reason\n      INFO String (Optional)\n\
    \   The format for the ASP Down Ack message parameters is as follows:\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xa)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              Reason                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x4)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         INFO String*                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format and description of the optional Info String parameter is\n   the\
    \ same as for the ASP Up message (See Section 3.3.2.1.).\n   The format of the\
    \ Reason parameter is the same as for the ASP Down\n   message (See Section 3.3.2.3).\n"
- title: 3.3.2.5  ASP Active (ASPAC)
  contents:
  - "3.3.2.5  ASP Active (ASPAC)\n   The ASPAC message is sent by an ASP to indicate\
    \ to an SG that it is\n   Active and ready to be used.\n   The ASPAC message contains\
    \ the following parameters\n      Traffic Mode Type (Mandatory)\n      Interface\
    \ Identifier (Optional)\n         - Combination of integer and integer ranges,\
    \ OR\n         - string (text formatted)\n      INFO String (Optional)\n   The\
    \ format for the ASPAC message using integer formatted Interface\n   Identifiers\
    \ is as follows:\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \         Tag (0xb)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Identifiers*                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Tag (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           .                                                           .\n  \
    \         .                                                           .\n    \
    \       .                                                           .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Additional Interface Identifiers                 |\n   |  \
    \                  of Tag Type 0x1 or 0x8                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format for the ASPAC message using text formatted (string)\n   Interface\
    \ Identifiers is as follows:\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xb)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Identifier*                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Additional Interface Identifiers                 |\n   |  \
    \                      of Tag Type 0x3                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Traffic Mode Type parameter identifies the traffic mode of\n   operation\
    \ of the ASP within an AS.  The valid values for Type are\n   shown in the following\
    \ table:\n     Value          Description\n      0x1            Over-ride\n  \
    \    0x2            Load-share\n   Within a particular Interface Identifier, only\
    \ one Traffic Mode Type\n   can be used.  The Over-ride value indicates that the\
    \ ASP is operating\n   in Over-ride mode, where the ASP takes over all traffic\
    \ in an\n   Application Server (i.e., primary/back-up operation), over-riding\
    \ any\n   currently active ASPs in the AS.  In Load-share mode, the ASP will\n\
    \   share in the traffic distribution with any other currently active\n   ASPs.\n\
    \   The optional Interface Identifiers parameter contains a list of\n   Interface\
    \ Identifier integers (Type 0x1 or Type 0x8) or text strings\n   (Type 0x3) indexing\
    \ the Application Server traffic that the sending\n   ASP is configured/registered\
    \ to receive.  If integer formatted\n   Interface Identifiers are being used,\
    \ the ASP can also send ranges of\n   Interface Identifiers (Type 0x8).  Interface\
    \ Identifier types Integer\n   (0x1) and Integer Range (0x8) are allowed in the\
    \ same message.  Text\n   formatted Interface Identifiers (0x3) cannot be used\
    \ with either\n   Integer (0x1) or Integer Range (0x8) types.\n   If no Interface\
    \ Identifiers are included, the message is for all\n   provisioned Interface Identifiers\
    \ within the AS(s) in which the ASP\n   is provisioned.  If only a subset of Interface\
    \ Identifiers are\n   included, the ASP is noted as Active for all the Interface\n\
    \   Identifiers provisioned for that AS.\n   Note:  If the optional Interface\
    \ Identifier parameter is present, the\n   integer formatted Interface Identifier\
    \ MUST be supported, while the\n   text formatted Interface Identifier MAY be\
    \ supported.\n   The format and description of the optional Info String parameter\
    \ is\n   the same as for the ASP Up message (See Section 3.3.2.1.).\n   An SG\
    \ that receives an ASPAC with an incorrect Traffic Mode Type for\n   a particular\
    \ Interface Identifier will respond with an Error Message\n   (Cause: Unsupported\
    \ Traffic Handling Mode).\n"
- title: 3.3.2.6 ASP Active Ack
  contents:
  - "3.3.2.6 ASP Active Ack\n   The ASPAC Ack message is used to acknowledge an ASP-Active\
    \ message\n   received from a remote IUA peer.\n   The ASPAC Ack message contains\
    \ the following parameters:\n      Traffic Mode Type (Mandatory)\n      Interface\
    \ Identifier (Optional)\n         - Combination of integer and integer ranges,\
    \ OR\n         - string (text formatted)\n      INFO String (Optional)\n   The\
    \ format for the ASPAC Ack message with Integer-formatted Interface\n   Identifiers\
    \ is as follows:\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \         Tag (0xb)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Traffic Mode Type                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Identifiers*                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Tag (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           .                                                           .\n  \
    \         .                                                           .\n    \
    \       .                                                           .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Additional Interface Identifiers                 |\n   |  \
    \                  of Tag Type 0x1 or 0x8                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format for the ASP Active Ack message using text formatted\n   (string)\
    \ Interface Identifiers is as follows:\n    0                   1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xb)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Identifier*                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Additional Interface Identifiers                 |\n   |  \
    \                      of Tag Type 0x3                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format of the Traffic Mode Type and Interface Identifier\n   parameters\
    \ is the same as for the ASP Active message (See Section\n   3.3.2.5).\n   The\
    \ format and description of the optional Info String parameter is\n   the same\
    \ as for the ASP Up message (See Section 3.3.2.1.).\n"
- title: 3.3.2.7  ASP Inactive (ASPIA)
  contents:
  - "3.3.2.7  ASP Inactive (ASPIA)\n   The ASPIA message is sent by an ASP to indicate\
    \ to an SG that it is\n   no longer an active ASP to be used from within a list\
    \ of ASPs.  The\n   SG will respond with an ASPIA Ack message and either discard\
    \ incoming\n   messages or buffer for a timed period and then discard.\n   The\
    \ ASPIA message contains the following parameters\n      Traffic Mode Type (Mandatory)\n\
    \      Interface Identifiers (Optional)\n         - Combination of integer and\
    \ integer ranges, OR\n         - string (text formatted)\n      INFO String (Optional)\n\
    \   The format for the ASP Inactive message parameters using Integer\n   formatted\
    \ Interface Identifiers is as follows:\n    0                   1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xb)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Identifiers*                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Tag (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           .                                                           .\n  \
    \         .                                                           .\n    \
    \       .                                                           .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Additional Interface Identifiers                 |\n   |  \
    \                  of Tag Type 0x1 or 0x8                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x4)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format for the ASP Inactive message using text formatted (string)\n  \
    \ Interface Identifiers is as follows:\n    0                   1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xb)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Identifier*                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Additional Interface Identifiers                 |\n   |  \
    \                      of Tag Type 0x3                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Traffic Mode Type parameter identifies the traffic mode of\n   operation\
    \ of the ASP within an AS.  The valid values for Traffic Mode\n   Type are shown\
    \ in the following table:\n      Value          Description\n       0x1      \
    \      Over-ride\n       0x2            Load-share\n   The format and description\
    \ of the optional Interface Identifiers and\n   Info String parameters is the\
    \ same as for the ASP Active message (See\n   Section 3.3.2.3.).\n   The optional\
    \ Interface Identifiers parameter contains a list of\n   Interface Identifier\
    \ integers or text strings indexing the\n   Application Server traffic that the\
    \ sending ASP is\n   configured/registered to receive, but does not want to receive\
    \ at\n   this time.\n"
- title: 3.3.2.8  ASP Inactive Ack
  contents:
  - "3.3.2.8  ASP Inactive Ack\n   The ASP Inactive (ASPIA) Ack message is used to\
    \ acknowledge an ASP\n   Inactive message received from a remote IUA peer.\n \
    \  The ASPIA Ack message contains the following parameters:\n      Traffic Mode\
    \ Type (Mandatory)\n      Interface Identifiers (Optional)\n         - Combination\
    \ of integer and integer ranges, OR\n         - string (text formatted)\n    \
    \  INFO String (Optional)\n    0                   1                   2     \
    \              3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xb)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Identifiers*                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Tag (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           .                                                           .\n  \
    \         .                                                           .\n    \
    \       .                                                           .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Additional Interface Identifiers                 |\n   |  \
    \                  of Tag Type 0x1 or 0x8                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format for the ASP Inactive Ack message using text formatted\n   (string)\
    \ Interface Identifiers is as follows:\n    0                   1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xb)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Identifier*                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Additional Interface Identifiers                 |\n   |  \
    \                      of Tag Type 0x3                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format of the Traffic Mode Type and Interface Identifier\n   parameters\
    \ is the same as for the ASP Inactive message (See Section\n   3.3.2.7).\n   The\
    \ format and description of the optional Info String parameter is\n   the same\
    \ as for the ASP Up message (See Section 3.3.2.1).\n"
- title: 3.3.2.9  Heartbeat (BEAT)
  contents:
  - "3.3.2.9  Heartbeat (BEAT)\n   The Heartbeat message is optionally used to ensure\
    \ that the IUA peers\n   are still available to each other.  It is recommended\
    \ for use when\n   the IUA runs over a transport layer other than the SCTP, which\
    \ has\n   its own heartbeat.\n   The BEAT message contains the following parameters:\n\
    \      Heartbeat Data         Optional\n   The format for the BEAT message is\
    \ as follows:\n    0                   1                   2                 \
    \  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    \
    \        Tag = 9            |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   |\
    \                       Heartbeat Data *                        |\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Heartbeat Data parameter contents are defined by the sending\n   node.\
    \ The Heartbeat Data could include, for example, a Heartbeat\n   Sequence Number\
    \ and, or Timestamp.  The receiver of a Heartbeat\n   message does not process\
    \ this field as it is only of significance to\n   the sender. The receiver MUST\
    \ respond with a Heartbeat Ack message.\n"
- title: 3.3.2.10  Heartbeat Ack (BEAT-Ack)
  contents:
  - "3.3.2.10  Heartbeat Ack (BEAT-Ack)\n   The Heartbeat Ack message is sent in response\
    \ to a received Heartbeat\n   message.  It includes all the parameters of the\
    \ received Heartbeat\n   message, without any change.\n"
- title: 3.3.3  Layer Management (MGMT) Messages
  contents:
  - '3.3.3  Layer Management (MGMT) Messages

    '
- title: 3.3.3.1  Error (ERR)
  contents:
  - "3.3.3.1  Error (ERR)\n   The Error message is used to notify a peer of an error\
    \ event\n   associated with an incoming message.  For example, the message type\n\
    \   might be unexpected given the current state, or a parameter value\n   might\
    \ be invalid.\n   The Error message will only have the common message header.\
    \  The\n   Error message contains the following parameters:\n      Error Code\n\
    \      Diagnostic Information (optional)\n    0                   1          \
    \         2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xc)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Error Code                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x7)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Diagnostic Information*                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Error Code parameter indicates the reason for the Error Message.\n   The\
    \ Error parameter value can be one of the following values:\n      Invalid Version\
    \                               0x01\n      Invalid Interface Identifier     \
    \             0x02\n      Unsupported Message Class                     0x03\n\
    \      Unsupported Message Type                      0x04\n      Unsupported Traffic\
    \ Handling Mode             0x05\n      Unexpected Message                   \
    \         0x06\n      Protocol Error                                0x07\n   \
    \   Unsupported Interface Identifier Type         0x08\n      Invalid Stream Identifier\
    \                     0x09\n      Unassigned TEI                             \
    \   0x0a\n      Unrecognized SAPI                             0x0b\n      Invalid\
    \ TEI, SAPI combination                 0x0c\n   The \"Invalid Version\" error\
    \ would be sent if a message was received\n   with an invalid or unsupported version.\
    \  The Error message would\n   contain the supported version in the Common header.\
    \  The Error\n   message could optionally provide the supported version in the\n\
    \   Diagnostic Information area.\n   The \"Invalid Interface Identifier\" error\
    \ would be sent by a SG if an\n   ASP sends a message with an invalid (unconfigured)\
    \ Interface\n   Identifier value.\n   The \"Unsupported Traffic Handling Mode\"\
    \ error would be sent by a SG\n   if an ASP sends an ASP Active with an unsupported\
    \ Traffic Handling\n   Mode.  An example would be a case in which the SG did not\
    \ support\n   load-sharing.\n   The \"Unexpected Message\" error would be sent\
    \ by an ASP if it received\n   a QPTM message from an SG while it was in the Inactive\
    \ state (the ASP\n   could optionally drop the message and not send an Error).\
    \  It would\n   also be sent by an ASP if it received a defined and recognized\n\
    \   message that the SG is not expected to send (e.g., if the MGC\n   receives\
    \ an IUA Establish Request message).\n   The \"Protocol Error\" error would be\
    \ sent for any protocol anomaly\n   (i.e., a bogus message).\n   The \"Invalid\
    \ Stream Identifier\" error would be sent if a message was\n   received on an\
    \ unexpected SCTP stream (i.e., a MGMT message was\n   received on a stream other\
    \ than \"0\").\n   The \"Unsupported Interface Identifier Type\" error would be\
    \ sent by a\n   SG if an ASP sends a Text formatted Interface Identifier and the\
    \ SG\n   only supports Integer formatted Interface Identifiers.  When the ASP\n\
    \   receives this error, it will need to resend its message with an\n   Integer\
    \ formatted Interface Identifier.\n   The \"Unsupported Message Type\" error would\
    \ be sent if a message with\n   an unexpected or unsupported Message Type is received.\n\
    \   The \"Unsupported Message Class\" error would be sent if a message with\n\
    \   an unexpected or unsupported Message Class is received.\n   The \"Unassigned\
    \ TEI\" error may be used when the SG receives an IUA\n   message that includes\
    \ a TEI which has not been assigned or recognized\n   for use on the indicated\
    \ ISDN D-channel.\n   The \"Unrecognized SAPI\" error would handle the case of\
    \ using a SAPI\n   that is not recognized by the SG.  The \"Invalid TEI, SAPI\n\
    \   combination\" error identify errors where the TEI is assigned and the\n  \
    \ the SAPI is recognized, but the combination is not valid for the\n   interface\
    \ (e.g., on a BRI the MGC tries to send Q.921 Management\n   messages via IUA\
    \ when Layer Management at the SG SHOULD be performing\n   this function).\n \
    \  The optional Diagnostic information can be any information germane to\n   the\
    \ error condition, to assist in identification of the error\n   condition.  To\
    \ enhance debugging, the Diagnostic information could\n   contain the first 40\
    \ bytes of the offending message.\n"
- title: 3.3.3.2  Notify (NTFY)
  contents:
  - "3.3.3.2  Notify (NTFY)\n   The Notify message used to provide an autonomous indication\
    \ of IUA\n   events to an IUA peer.\n   The Notify message will only use the common\
    \ message header.  The\n   Notify message contains the following parameters:\n\
    \      Status Type\n      Status Identification\n      Interface Identifiers (Optional)\n\
    \      INFO String (Optional)\n   The format for the Notify message with Integer-formatted\
    \ Interface\n   Identifiers is as follows:\n    0                   1        \
    \           2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xd)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Status Type            |    Status Identification      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Identifiers*                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Tag (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           .                                                           .\n  \
    \         .                                                           .\n    \
    \       .                                                           .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Additional Interface Identifiers                 |\n   |  \
    \                  of Tag Type 0x1 or 0x8                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format for the Notify message with Text-formatted Interface\n   Identifiers\
    \ is as follows:\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \         Tag (0xd)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Status Type            |    Status Identification      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Interface Identifier*                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Additional Interface Identifiers                 |\n   |  \
    \                      of Tag Type 0x3                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          INFO String*                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Status Type parameter identifies the type of the Notify message.\n   The\
    \ following are the valid Status Type values:\n      Value          Description\n\
    \       0x1   Application Server state change (AS_State_Change)\n       0x2  \
    \ Other\n   The Status Identification parameter contains more detailed\n   information\
    \ for the notification, based on the value of the Status\n   Type.  If the Status\
    \ Type is AS_State_Change the following Status\n   Identification values are used:\n\
    \      Value          Description\n        1    Application Server Down (AS_Down)\n\
    \        2    Application Server Inactive (AS_Inactive)\n        3    Application\
    \ Server Active (AS_Active)\n        4    Application Server Pending (AS_Pending)\n\
    \   These notifications are sent from an SG to an ASP upon a change in\n   status\
    \ of a particular Application Server.  The value reflects the\n   new state of\
    \ the Application Server.\n   If the Status Type is Other, then the following\
    \ Status Information\n   values are defined:\n      Value          Description\n\
    \        1    Insufficient ASP resources active in AS\n        2    Alternate\
    \ ASP Active\n   These notifications are not based on the SG reporting the state\n\
    \   change of an ASP or AS.  In the Insufficient ASP Resources case, the\n   SG\
    \ is indicating to an \"Inactive\" ASP(s) in the AS that another ASP\n   is required\
    \ in order to handle the load of the AS (Load-sharing\n   mode). For the Alternate\
    \ ASP Active case, an ASP is informed when an\n   alternate ASP transitions to\
    \ the ASP-Active state in Over-ride mode.\n   The format and description of the\
    \ optional Interface Identifiers and\n   Info String parameters is the same as\
    \ for the ASP Active message (See\n   Section 3.3.2.3.).\n"
- title: 3.3.3.3 TEI Status Messages (Request, Confirm and Indication)
  contents:
  - "3.3.3.3 TEI Status Messages (Request, Confirm and Indication)\n   The TEI Status\
    \ messages are exchanged between IUA layer peers to\n   request, confirm and indicate\
    \ the status of a particular TEI.\n   The TEI Status messages contain the common\
    \ message header followed by\n   IUA message header.  The TEI Status Request message\
    \ does not contain\n   any additional parameters.\n   In the integrated ISDN Layer\
    \ 2/3 model (e.g., in traditional ISDN\n   switches), it is assumed that the Layer\
    \ Management for the Q.921\n   Layer and the Q.931 layer are co-located.  When\
    \ backhauling ISDN,\n   this assumption is not necessarily valid.  The TEI status\
    \ messages\n   allow the two Layer Management entities to communicate the status\
    \ of\n   the TEI.  In addition, knowing that a TEI is in service allows the\n\
    \   ASP to request the SG to establish the datalink to the terminal (via\n   the\
    \ IUA Establish message) for signaling if the ASP wants to be in\n   control of\
    \ data link establishment.  Another use of the TEI status\n   procedure is where\
    \ the Layer Management at the ASP can prepare for\n   send/receive signaling to/from\
    \ a given TEI and confirm/verify the\n   establishment of a datalink to that TEI.\
    \  For example, if a datalink\n   is established for a TEI that the ASP did not\
    \ know was assigned, the\n   ASP can check to see whether it was assigned or whether\
    \ there was an\n   error in the signaling message.  Also, knowing that a TEI is\
    \ out of\n   service, the ASP need not request the SG to establish a datalink\
    \ to\n   that TEI.\n   The TEI Status Indication, and Confirm messages contain\
    \ the following\n   parameter:\n     STATUS\n    0                   1       \
    \            2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Tag (0x10)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              Status                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The valid values for Status are shown in the following table.\n      Define\
    \     Value           Description\n   ASSIGNED       0x0        TEI is considered\
    \ assigned by Q.921\n   UNASSIGNED     0x1        TEI is considered unassigned\
    \ by Q.921\n"
- title: 4.0  Procedures
  contents:
  - "4.0  Procedures\n   The IUA layer needs to respond to various primitives it receives\
    \ from\n   other layers as well as messages it receives from the peer IUA layer.\n\
    \   This section describes various procedures involved in response to\n   these\
    \ events.\n"
- title: 4.1  Procedures to support service in section 1.4.1
  contents:
  - "4.1  Procedures to support service in section 1.4.1\n   These procedures achieve\
    \ the IUA layer's \"Transport of Q.921/Q.931\n   boundary\" service.\n"
- title: 4.1.1  Q.921 or Q.931 primitives procedures
  contents:
  - "4.1.1  Q.921 or Q.931 primitives procedures\n   On receiving these primitives\
    \ from the local layer, the IUA layer\n   will send the corresponding QPTM message\
    \ (Data, Unit Data, Establish,\n   Release) to its peer.  While doing so, the\
    \ IUA layer needs to fill\n   various fields of the common and specific headers\
    \ correctly.  In\n   addition the message needs to be sent on the SCTP stream\
    \ that\n   corresponds to the D channel (Interface Identifier).\n"
- title: 4.1.2  QPTM message procedures
  contents:
  - "4.1.2  QPTM message procedures\n   On receiving QPTM messages from a peer IUA\
    \ layer, the IUA layer on an\n   SG or MGC needs to invoke the corresponding layer\
    \ primitives (DL-\n   ESTABLISH, DL-DATA, DL-UNIT DATA, DL-RELEASE) to the local\
    \ Q.921 or\n   Q.931 layer.\n"
- title: 4.2  Procedures to support service in section 1.4.2
  contents:
  - "4.2  Procedures to support service in section 1.4.2\n   These procedures achieve\
    \ the IUA layer's \"Support for Communication\n   between Layer Managements\"\
    \ service.\n"
- title: 4.2.1 Layer Management primitives procedures
  contents:
  - "4.2.1 Layer Management primitives procedures\n   On receiving these primitives\
    \ from the local Layer Management, the\n   IUA layer will provide the appropriate\
    \ response primitive across the\n   internal local Layer Management interface.\n\
    \   An M-SCTP ESTABLISH request from Layer Management will initiate the\n   establishment\
    \ of an SCTP association.  An M-SCTP ESTABLISH confirm\n   will be sent to Layer\
    \ Management when the initiated association set-\n   up is complete.  An M-SCTP\
    \ ESTABLISH indication is sent to Layer\n   Management upon successful completion\
    \ of an incoming SCTP association\n   set-up from a peer IUA node\n   An M-SCTP\
    \ RELEASE request from Layer Management will initiate the\n   tear-down of an\
    \ SCTP association.  An M-SCTP RELEASE confirm will be\n   sent by Layer Management\
    \ when the association teardown is complete.\n   An M-SCTP RELEASE indication\
    \ is sent to Layer Management upon\n   successful tear-down of an SCTP association\
    \ initiated by a peer IUA.\n   M-SCTP STATUS request and indication support a\
    \ Layer Management query\n   of the local status of a particular SCTP association.\n\
    \   M-NOTIFY indication and M-ERROR indication indicate to Layer\n   Management\
    \ the notification or error information contained in a\n   received IUA Notify\
    \ or Error message respectively.  These indications\n   can also be generated\
    \ based on local IUA events.\n   M-ASP STATUS request/indication and M-AS-STATUS\
    \ request/indication\n   support a Layer Management query of the local status\
    \ of a particular\n   ASP or AS.  No IUA peer protocol is invoked.\n   M-ASP-UP\
    \ request, M-ASP-DOWN request, M-ASP-INACTIVE request and M-\n   ASP-ACTIVE request\
    \ allow Layer Management at an ASP to initiate state\n   changes.  These requests\
    \ result in outgoing IUA ASP UP, ASP DOWN, ASP\n   INACTIVE and ASP ACTIVE messages.\n\
    \   M-ASP-UP confirmation, M-ASP-DOWN confirmation, M-ASP-INACTIVE\n   confirmation\
    \ and M-ASP-ACTIVE confirmation indicate to Layer\n   Management that the previous\
    \ request has been confirmed.\n   Upon receipt of a M-TEI Status primitive from\
    \ Layer Management, the\n   IUA will send the corresponding MGMT message (TEI\
    \ Status) to its\n   peer.  While doing so, the IUA layer needs to fill various\
    \ fields of\n   the common and specific headers correctly.\n   All MGMT messages\
    \ are sent on a sequenced stream to ensure ordering.\n   SCTP stream '0' SHOULD\
    \ be used.\n"
- title: 4.2.2  Receipt of IUA Peer Management messages
  contents:
  - "4.2.2  Receipt of IUA Peer Management messages\n   Upon receipt of IUA Management\
    \ messages, the IUA layer MUST invoke\n   the corresponding Layer Management primitive\
    \ indications (e.g., M-AS\n   Status ind., M-ASP Status ind., M-ERROR ind., M-TEI\
    \ STATUS...) to the\n   local layer management.\n   M-NOTIFY indication and M-ERROR\
    \ indication indicate to Layer\n   Management the notification or error information\
    \ contained in a\n   received IUA Notify or Error message.  These indications\
    \ can also be\n   generated based on local IUA events.\n   All MGMT messages are\
    \ sent on a sequenced stream to ensure ordering.\n   SCTP stream '0' SHOULD be\
    \ used.\n"
- title: 4.3 Procedures to support service in section 1.4.3
  contents:
  - "4.3 Procedures to support service in section 1.4.3\n   These procedures achieve\
    \ the IUA layer's \"Support for management of\n   active associations between\
    \ SG and MGC\" service.\n"
- title: 4.3.1 AS and ASP State Maintenance
  contents:
  - "4.3.1 AS and ASP State Maintenance\n   The IUA layer on the SG needs to maintain\
    \ the states of each ASP as\n   well as the state of the AS.\n"
- title: 4.3.1.1  ASP States
  contents:
  - "4.3.1.1  ASP States\n   The state of the each ASP, in each AS that it is configured,\
    \ is\n   maintained in the IUA layer on the SG.  The state of an ASP changes\n\
    \   due to the following type of events:\n      *  Reception of messages from\
    \ peer IUA layer at that ASP\n      *  Reception of some messages from the peer\
    \ IUA layer at other\n         ASPs in the AS\n      *  Reception of indications\
    \ from SCTP layer\n   The ASP state transition diagram is shown in Figure 7. \
    \ The possible\n   states of an ASP are the following:\n   ASP-DOWN: Application\
    \ Server Process is unavailable and/or the\n   related SCTP association is down.\
    \  Initially, all ASPs will be in\n   this state. An ASP in this state SHOULD\
    \ NOT be sent any IUA messages.\n   ASP-INACTIVE: The remote IUA peer at the ASP\
    \ is available (and the\n   related SCTP association is up) but application traffic\
    \ is stopped.\n   In this state the ASP can be sent any non-QPTM IUA messages\
    \ (except\n   for TEI Status messages).\n   ASP-ACTIVE: The remote IUA peer at\
    \ the ASP is available and\n   application traffic is active.\n              \
    \     Figure 7  ASP State Transition Diagram\n                               \
    \     +-------------+\n             +----------------------|             |\n \
    \            |   Alternate  +-------| ASP-ACTIVE  |\n             |       ASP\
    \    |       +-------------+\n             |    Takeover  |           ^     |\n\
    \             |              |    ASP    |     | ASP\n             |         \
    \     |    Active |     | Inactive\n             |              |           |\
    \     v\n             |              |       +-------------+\n             | \
    \             |       |             |\n             |              +------>| \
    \ ASP-INACT  |\n             |                      +-------------+\n        \
    \     |                          ^    |\n   ASP Down/ |                     ASP\
    \  |    | ASP Down /\n   SCTP CDI  |                     Up   |    | SCTP CDI\n\
    \             |                          |    v\n             |              \
    \        +-------------+\n             +--------------------->|             |\n\
    \                                    |  ASP-DOWN   |\n                       \
    \             +-------------+\n   SCTP CDI:  The local SCTP layer's Communication\
    \ Down Indication to\n   the Upper Layer Protocol (IUA) on an SG.  The local SCTP\
    \ will send\n   this indication when it detects the loss of connectivity to the\
    \ ASP's\n   peer SCTP layer.  SCTP CDI is understood as either a SHUTDOWN\n  \
    \ COMPLETE notification and COMMUNICATION LOST notification from the\n   SCTP.\n"
- title: 4.3.1.2  AS States
  contents:
  - "4.3.1.2  AS States\n   The state of the AS is maintained in the IUA layer on\
    \ the SG.\n   The state of an AS changes due to events.  These events include\
    \ the\n   following:\n      *  ASP state transitions\n      *  Recovery timer\
    \ triggers\n   The possible states of an AS are the following:\n   AS-DOWN: The\
    \ Application Server is unavailable.  This state implies\n   that all related\
    \ ASPs are in the ASP-DOWN state for this AS.\n   Initially the AS will be in\
    \ this state.\n   AS-INACTIVE: The Application Server is available but no application\n\
    \   traffic is active (i.e., one or more related ASPs are in the ASP-\n   INACTIVE\
    \ state, but none in the ASP-ACTIVE state).  The recovery\n   timer T(r) is not\
    \ running or has expired.\n   AS-ACTIVE: The Application Server is available and\
    \ application\n   traffic is active.  This state implies that at least one ASP\
    \ is in\n   the ASP-ACTIVE state.\n   AS-PENDING: An active ASP has transitioned\
    \ from active to inactive or\n   down and it was the last remaining active ASP\
    \ in the AS.  A recovery\n   timer T(r) will be started and all incoming SCN messages\
    \ will be\n   queued by the SG.  If an ASP becomes active before T(r) expires,\
    \ the\n   AS will move to AS-ACTIVE state and all the queued messages will be\n\
    \   sent to the active ASP.\n   If T(r) expires before an ASP becomes active,\
    \ the SG stops queuing\n   messages and  discards all previously queued messages.\
    \  The AS will\n   move to AS-INACTIVE if at least one ASP is in ASP-INACTIVE\
    \ state,\n   otherwise it will move to AS-DOWN state.\n                 Figure\
    \ 8  AS State Transition Diagram\n        +----------+  one ASP trans ACTIVE \
    \  +-------------+\n        |          |------------------------>|           \
    \  |\n        | AS-INACT |                         |  AS-ACTIVE  |\n        |\
    \          |                         |             |\n        |          |<  \
    \                      |             |\n        +----------+ \\              \
    \         +-------------+\n           ^   |      \\ Tr Trigger               \
    \ ^    |\n           |   |       \\ at least one             |    |\n        \
    \   |   |        \\ ASP in UP               |    |\n           |   |         \\\
    \                        |    |\n           |   |          \\                \
    \       |    |\n           |   |           \\                      |    |\n  \
    \ one ASP |   |            \\            one ASP  |    | Last ACTIVE ASP\n   trans\
    \   |   | all ASP     \\------\\    trans to |    | trans to INACT\n   to    \
    \  |   | trans to            \\   ACTIVE   |    | or DOWN\n   INACT   |   | DOWN\
    \                 \\           |    | (start Tr timer)\n           |   |     \
    \                  \\          |    |\n           |   |                      \
    \  \\         |    |\n           |   |                         \\        |   \
    \ |\n           |   v                          \\       |    v\n        +----------+\
    \                       \\ +-------------+\n        |          |             \
    \           -|             |\n        | AS-DOWN  |                         | AS-PENDING\
    \  |\n        |          |                         |  (queueing) |\n        |\
    \          |<------------------------|             |\n        +----------+   \
    \ Tr Expiry and no     +-------------+\n                       ASP in INACTIVE\
    \ state\n      Tr = Recovery Timer\n"
- title: 4.3.2 ASPM procedures for primitives
  contents:
  - "4.3.2 ASPM procedures for primitives\n   Before the establishment of an SCTP\
    \ association the ASP state at both\n   the SG and ASP is assumed to be \"Down\"\
    .\n   As the ASP is responsible for initiating the setup of an SCTP\n   association\
    \ to an SG, the IUA layer at an ASP receives an M-SCTP\n   ESTABLISH request primitive\
    \ from the Layer Management, the IUA layer\n   will try to establish an SCTP association\
    \ with the remote IUA peer at\n   an SG.  Upon reception of an eventual SCTP-Communication\
    \ Up confirm\n   primitive from the SCTP, the IUA layer will invoke the primitive\
    \ M-\n   SCTP ESTABLISH confirm to the Layer Management.\n   At the SG, the IUA\
    \ layer will receive an SCTP Communication Up\n   indication primitive from the\
    \ SCTP.  The IUA layer will then invoke\n   the primitive M-SCTP ESTABLISH indication\
    \ to the Layer Management.\n   Once the SCTP association is established and assuming\
    \ that the local\n   IUA-User is ready, the local ASP IUA Application Server Process\n\
    \   Maintenance (ASPM) function will initiate the ASPM procedures, using\n   the\
    \ ASP Up/-Down/-Active/-Inactive messages to convey the ASP state\n   to the SG\
    \ - see Section 4.3.3.\n   The Layer Management and the IUA layer on SG can communicate\
    \ the\n   status of the application server using the M-AS STATUS primitives.\n\
    \   The Layer Management and the IUA layer on both the SG and ASP can\n   communicate\
    \ the status of an SCTP association using the M-SCTP STATUS\n   primitives.\n\
    \   If the Layer Management on SG or ASP wants to bring down an SCTP\n   association\
    \ for management reasons, they would send M-SCTP RELEASE\n   request primitive\
    \ to the local IUA layer.  The IUA layer would\n   release the SCTP association\
    \ and upon receiving the SCTP\n   Communication Down indication from the underlying\
    \ SCTP layer, it\n   would inform the local Layer Management using M-SCTP RELEASE\
    \ confirm\n   primitive.\n   If the IUA layer receives an SCTP-Communication Down\
    \ indication from\n   the underlying SCTP layer, it will inform the Layer Management\
    \ by\n   invoking the M-SCTP RELEASE indication primitive.  The state of the\n\
    \   ASP will be moved to \"Down\" at both the SG and ASP.\n   At an ASP, the Layer\
    \ Management MAY try to reestablish the SCTP\n   association using M-SCTP ESTABLISH\
    \ request primitive.\n"
- title: 4.3.3 ASPM procedures for peer-to-peer messages
  contents:
  - "4.3.3 ASPM procedures for peer-to-peer messages\n   All ASPM messages are sent\
    \ on a sequenced stream to ensure ordering.\n   SCTP stream '0' SHOULD be used.\n"
- title: 4.3.3.1 ASP Up
  contents:
  - "4.3.3.1 ASP Up\n   After an ASP has successfully established an SCTP association\
    \ to an\n   SG, the SG waits for the ASP to send an ASP Up message, indicating\n\
    \   that the ASP IUA peer is available.  The ASP is always the initiator\n   of\
    \ the ASP Up exchange.\n   When an ASP Up message is received at an SG and internally\
    \ the remote\n   ASP is not considered locked-out for local management reasons,\
    \ the SG\n   marks the remote ASP as \"Inactive\".  The SG responds with an ASP\
    \ Up\n   Ack message in acknowledgement.  The SG sends an ASP-Up Ack message\n\
    \   in response to a received ASP Up message even if the ASP is already\n   marked\
    \ as \"Inactive\" at the SG.\n   If for any local reason the SG cannot respond\
    \ with an ASP Up, the SG\n   responds to a ASP Up with a with an ASP-Down Ack\
    \ message with Reason\n   \"Management Blocking\".\n   At the ASP, the ASP Up\
    \ Ack message received from the SG is not\n   acknowledged by the ASP.  If the\
    \ ASP does not receive a response from\n   the SG, or an ASP Down Ack is received,\
    \ the ASP MAY resend ASP Up\n   messages every 2 seconds until it receives a ASP\
    \ Up Ack message from\n   the SG.  The ASP MAY decide to reduce the frequency\
    \ (say to every 5\n   seconds) if an ASP Up Ack is not received after a few tries.\n\
    \   The ASP MUST wait for the ASP Up Ack message from the SG before\n   sending\
    \ any ASP traffic control messages (ASPAC or ASPIA) or Data\n   messages or it\
    \ will risk message loss.  If the SG receives QPTM, ASP\n   Active or ASP Inactive\
    \ messages before an ASP Up is received, the SG\n   SHOULD discard these messages.\n"
- title: 4.3.3.2 ASP Down
  contents:
  - "4.3.3.2 ASP Down\n   The ASP will send an ASP Down to an SG when the ASP is to\
    \ be removed\n   from the list of ASPs in all Application Servers that it is a\
    \ member\n   and no longer receive any IUA traffic or management messages.\n \
    \  Whether the ASP is permanently removed from an AS is a function of\n   configuration\
    \ management.\n   The SG marks the ASP as \"Down\" and returns an ASP Down Ack\
    \ message to\n   the ASP if one of the following events occur:\n      -  to acknowledge\
    \ an ASP Down message from an ASP,\n      -  to reply to ASPM messages from an\
    \ ASP which is locked out for\n         management reasons.\n   The SG sends an\
    \ ASP Down Ack message in response to a received ASP\n   Down message from the\
    \ ASP even if the ASP is already marked as \"Down\"\n   at the SG.\n   If the\
    \ ASP does not receive a response from the SG, the ASP MAY send\n   ASP Down messages\
    \ every 2 seconds until it receives an ASP Down Ack\n   message from the SG or\
    \ the SCTP association goes down.  The ASP MAY\n   decide to reduce the frequency\
    \ (say to every 5 seconds) if an ASP\n   Down Ack is not received after a few\
    \ tries.\n"
- title: 4.3.3.3 IUA Version Control
  contents:
  - "4.3.3.3 IUA Version Control\n   If a ASP Up message with an unsupported version\
    \ is received, the\n   receiving end responds with an Error message, indicating\
    \ the version\n   the receiving node supports and notifies Layer Management.\n\
    \   This is useful when protocol version upgrades are being performed in\n   a\
    \ network.  A node upgraded to a newer version SHOULD support the\n   older versions\
    \ used on other nodes it is communicating with.  Because\n   ASPs initiate the\
    \ ASP Up procedure it is assumed that the Error\n   message would normally come\
    \ from the SG.\n"
- title: 4.3.3.4 ASP Active
  contents:
  - "4.3.3.4 ASP Active\n   Any time after the ASP has received a ASP Up Ack from\
    \ the SG, the ASP\n   sends an ASP-Active (ASPAC) to the SG indicating that the\
    \ ASP is\n   ready to start processing traffic.  In the case where an ASP is\n\
    \   configured/registered to process the traffic for more than one\n   Application\
    \ Server across an SCTP association, the ASPAC contains one\n   or more Interface\
    \ Identifiers to indicate for which Application\n   Servers the ASPAC applies.\n\
    \   When an ASP Active (ASPAC) message is received, the SG responds to\n   the\
    \ ASP with a ASPAC Ack message acknowledging that the ASPAC was\n   received and\
    \ starts sending traffic for the associated Application\n   Server(s) to that\
    \ ASP.\n   The ASP MUST wait for the ASP-Active Ack message from the SG before\n\
    \   sending any Data messages or it will risk message loss.  If the SG\n   receives\
    \ QPTM messages before an ASP Active is received, the SG\n   SHOULD discard these\
    \ messages.\n   There are two modes of Application Server traffic handling in\
    \ the SG\n   IUA - Over-ride and Load-sharing.  The Type parameter in the ASPAC\n\
    \   message indicates the mode used in a particular Application Server.\n   If\
    \ the SG determines that the mode indicates in an ASPAC is\n   incompatible with\
    \ the traffic handling mode currently used in the AS,\n   the SG responds with\
    \ an Error message indicating Unsupported Traffic\n   Handling Mode.\n   In the\
    \ case of an Over-ride mode AS, reception of an ASPAC message at\n   an SG causes\
    \ the redirection of all traffic for the AS to the ASP\n   that sent the ASPAC.\
    \  The SG responds to the ASPAC with an ASP-Active\n   Ack message to the ASP.\
    \  Any previously active ASP in the AS is now\n   considered Inactive and will\
    \ no longer receive traffic from the SG\n   within the AS.  The SG sends a Notify\
    \ (Alternate ASP-Active) to the\n   previously active ASP in the AS, after stopping\
    \ all traffic to that\n   ASP.\n   In the case of a load-share mode AS, reception\
    \ of an ASPAC message at\n   an SG causes the direction of traffic to the ASP\
    \ sending the ASPAC,\n   in addition to all the other ASPs that are currently\
    \ active in the\n   AS. The algorithm at the SG for load-sharing traffic within\
    \ an AS to\n   all the active ASPs is implementation dependent.  The algorithm\n\
    \   could, for example be round-robin or based on information in the Data\n  \
    \ message, such as Interface Identifier, depending on the requirements\n   of\
    \ the application and the call state handling assumptions of the\n   collection\
    \ of ASPs in the AS.  The SG responds to the ASPAC with a\n   ASP-Active Ack message\
    \ to the ASP.\n"
- title: 4.3.3.5 ASP Inactive
  contents:
  - "4.3.3.5 ASP Inactive\n   When an ASP wishes to withdraw from receiving traffic\
    \ within an AS,\n   the ASP sends an ASP Inactive (ASPIA) to the SG.  In the case\
    \ where\n   an ASP is configured/registered to process the traffic for more than\n\
    \   one Application Server across an SCTP association, the ASPIA contains\n  \
    \ one or more Interface Identifiers to indicate for which Application\n   Servers\
    \ the ASPIA applies.\n   There are two modes of Application Server traffic handling\
    \ in the SG\n   IUA when withdrawing an ASP from service - Over-ride and Load-\n\
    \   sharing. The Type parameter in the ASPIA message indicates the mode\n   used\
    \ in a particular Application Server.  If the SG determines that\n   the mode\
    \ indicates in an ASPAC is incompatible with the traffic\n   handling mode currently\
    \ used in the AS, the SG responds with an Error\n   message indicating Unsupported\
    \ Traffic Handling Mode.\n   In the case of an Over-ride mode AS, where normally\
    \ another ASP has\n   already taken over the traffic within the AS with an Over-ride\
    \ ASPAC,\n   the ASP which sends the ASPIA is already considered by the SG to\
    \ be\n   \"Inactive\".  An ASPIA Ack message is sent to the ASP, after ensuring\n\
    \   that all traffic is stopped to the ASP.\n   In the case of a Load-share mode\
    \ AS, the SG moves the ASP to the\n   \"Inactive\" state and the AS traffic is\
    \ re-allocated across the\n   remaining \"active\" ASPs per the load-sharing algorithm\
    \ currently used\n   within the AS.  An ASPIA Ack message is sent to the ASP after\
    \ all\n   traffic is halted to the ASP.  A NTFY (Insufficient ASPs) MAY be sent\n\
    \   to all inactive ASPs, if required.\n   If no other ASPs are Active in the\
    \ Application Server, the SG sends a\n   NTFY (AS-Pending) to all inactive ASPs\
    \ of the AS and either discards\n   all incoming messages for the AS or starts\
    \ buffering the incoming\n   messages for T(r)seconds, after which messages will\
    \ be discarded.\n   T(r) is configurable by the network operator.  If the SG receives\
    \ an\n   ASPAC from an ASP in the AS before expiry of T(r), the buffered\n   traffic\
    \ is directed to the ASP and the timer is cancelled.  If T(r)\n   expires, the\
    \ AS is moved to the \"Inactive\" state.\n"
- title: 4.3.3.6  Notify
  contents:
  - "4.3.3.6  Notify\n   A Notify message reflecting a change in the AS state is sent\
    \ to all\n   ASPs in the AS, except those in the \"Down\" state, with appropriate\n\
    \   Status Identification.\n   In the case where a Notify (AS-Pending) message\
    \ is sent by an SG that\n   now has no ASPs active to service the traffic, or\
    \ a NTFY\n   (Insufficient ASPs) is sent in the Load-share mode, the Notify does\n\
    \   not explicitly force the ASP(s) receiving the message to become\n   active.\
    \  The ASPs remain in control of what (and when) action is\n   taken.\n"
- title: 4.3.3.7  Heartbeat
  contents:
  - "4.3.3.7  Heartbeat\n   The optional Heartbeat procedures MAY be used when operating\
    \ over\n   transport layers that do not have their own heartbeat mechanism for\n\
    \   detecting loss of the transport association (i.e., other than the\n   SCTP).\n\
    \   After receiving an ASP Up Ack message from the SG in response to an\n   ASP\
    \ Up message, the ASP MAY optionally send Beat messages\n   periodically, subject\
    \ to a provisionable timer T(beat).  The SG IUA,\n   upon receiving a BEAT message\
    \ from the ASP, responds with a BEAT ACK\n   message.  If no BEAT message (or\
    \ any other IUA message) is received\n   from the SG within the timer 2*T(beat),\
    \ the SG will consider the\n   remote IUA as \"Down\".  The SG will also send\
    \ an ASP Down Ack message\n   to the ASP.\n   At the ASP, if no BEAT ACK message\
    \ (or any other IUA message) is\n   received from the SG within 2*T(beat), the\
    \ SG is considered\n   unavailable.  Transmission of BEAT messages is stopped\
    \ and ASP Up\n   procedures are used to re-establish communication with the SG\
    \ IUA\n   peer.\n   The BEAT message MAY optionally contain an opaque Heartbeat\
    \ Data\n   parameter that MUST be echoed back unchanged in the related Beat Ack\n\
    \   message.  The ASP upon examining the contents of the returned BEAT\n   Ack\
    \ message MAY choose to consider the remote ASP as unavailable.\n   The contents/format\
    \ of the Heartbeat Data parameter is\n   implementation-dependent and only of\
    \ local interest to the original\n   sender.  The contents MAY be used, for example,\
    \ to support a\n   Heartbeat sequence algorithm (to detect missing Heartbeats),\
    \ and/or a\n   timestamp mechanism (to evaluate delays).\n   Note:  Heartbeat\
    \ related events are not shown in Figure 4 \"ASP state\n   transition diagram\"\
    .\n"
- title: 5.0 Examples
  contents:
  - '5.0 Examples

    '
- title: 5.1 Establishment of Association and Traffic between SGs and ASPs
  contents:
  - '5.1 Establishment of Association and Traffic between SGs and ASPs

    '
- title: 5.1.1 Single ASP in an Application Server (1+0 sparing)
  contents:
  - "5.1.1 Single ASP in an Application Server (1+0 sparing)\n   This scenario shows\
    \ the example IUA message flows for the\n   establishment of traffic between an\
    \ SG and an ASP, where only one ASP\n   is configured within an AS (no backup).\
    \  It is assumed that the SCTP\n   association is already set-up.\n          \
    \      SG                       ASP1\n                 |\n                 |<---------ASP\
    \ Up----------|\n                 |--------ASP Up Ack------->|\n             \
    \    |                          |\n                 |<-------ASP Active--------|\n\
    \                 |------ASP Active Ack----->|\n                 |           \
    \               |\n"
- title: 5.1.2 Two ASPs in Application Server (1+1 sparing)
  contents:
  - "5.1.2 Two ASPs in Application Server (1+1 sparing)\n   This scenario shows the\
    \ example IUA message flows for the\n   establishment of traffic between an SG\
    \ and two ASPs in the same\n   Application Server, where ASP1 is configured to\
    \ be Active and ASP2 a\n   standby in the event of communication failure or the\
    \ withdrawal from\n   service of ASP1.  ASP2 MAY act as a hot, warm, or cold standby\n\
    \   depending on the extent to which ASP1 and ASP2 share call state or\n   can\
    \ communicate call state under failure/withdrawal events.  The\n   example message\
    \ flow is the same whether the ASP-Active messages are\n   Over-ride or Load-share\
    \ mode although typically this example would\n   use an Over-ride mode.\n    \
    \      SG                        ASP1                        ASP2\n          \
    \ |                         |                          |\n           |<--------ASP\
    \ Up----------|                          |\n           |-------ASP Up Ack------->|\
    \                          |\n           |                         |         \
    \                 |\n           |<-----------------------------ASP Up----------------|\n\
    \           |----------------------------ASP Up Ack------------->|\n         \
    \  |                         |                          |\n           |      \
    \                   |                          |\n           |<-------ASP Active-------|\
    \                          |\n           |-----ASP Active Ack----->|         \
    \                 |\n           |                         |                  \
    \        |\n"
- title: 5.1.3 Two ASPs in an Application Server (1+1 sparing, load-sharing case)
  contents:
  - "5.1.3 Two ASPs in an Application Server (1+1 sparing, load-sharing case)\n  \
    \ This scenario shows a similar case to Section 5.1.2 but where the two\n   ASPs\
    \ are brought to active and load-share the traffic load.  In this\n   case, one\
    \ ASP is sufficient to handle the total traffic load.\n          SG          \
    \             ASP1                       ASP2\n           |                  \
    \       |                          |\n           |<---------ASP Up---------| \
    \                         |\n           |--------ASP Up Ack------>|          \
    \                |\n           |                         |                   \
    \       |\n           |<------------------------------ASP Up---------------|\n\
    \           |-----------------------------ASP Up Ack------------>|\n         \
    \  |                         |                          |\n           |      \
    \                   |                          |\n           |<--ASP Active (Ldshr)----|\
    \                          |\n           |----ASP Active Ack------>|         \
    \                 |\n           |                         |                  \
    \        |\n           |<----------------------------ASP Active (Ldshr)-----|\n\
    \           |-----------------------------ASP Active Ack-------->|\n         \
    \  |                         |                          |\n"
- title: 5.1.4 Three ASPs in an Application Server (n+k sparing, load-sharing
  contents:
  - "5.1.4 Three ASPs in an Application Server (n+k sparing, load-sharing\n      case)\n\
    \   This scenario shows the example IUA message flows for the\n   establishment\
    \ of traffic between an SG and three ASPs in the same\n   Application Server,\
    \ where two of the ASPs are brought to active and\n   share the load.  In this\
    \ case, a minimum of two ASPs are required to\n   handle the total traffic load\
    \ (2+1 sparing).\n      SG                  ASP1                ASP2         \
    \       ASP3\n       |                    |                   |              \
    \     |\n       |<------ASP Up-------|                   |                   |\n\
    \       |-----ASP Up Ack---->|                   |                   |\n     \
    \  |                    |                   |                   |\n       |<--------------------------ASP\
    \ Up-------|                   |\n       |------------------------ASPUp Ack)----->|\
    \                   |\n       |                    |                   |     \
    \              |\n       |<---------------------------------------------ASP Up--------|\n\
    \       |--------------------------------------------ASP Up Ack----->|\n     \
    \  |                    |                   |                   |\n       |  \
    \                  |                   |                   |\n       |<-ASP Act\
    \ (Ldshr)---|                   |                   |\n       |----ASP Act Ack---->|\
    \                   |                   |\n       |                    |     \
    \              |                   |\n       |<---------------------ASP Act (Ldshr)---|\
    \                   |\n       |----------------------ASP Act Ack------>|     \
    \              |\n       |                    |                   |          \
    \         |\n"
- title: 5.2 ASP Traffic Fail-over Examples
  contents:
  - '5.2 ASP Traffic Fail-over Examples

    '
- title: 5.2.1 (1+1 Sparing, withdrawal of ASP, Back-up Over-ride)
  contents:
  - "5.2.1 (1+1 Sparing, withdrawal of ASP, Back-up Over-ride)\n   The following example\
    \ shows a case in which an ASP withdraws from\n   service:\n          SG     \
    \                  ASP1                       ASP2\n           |             \
    \            |                          |\n           |<-----ASP Inactive-------|\
    \                          |\n           |----ASP Inactive Ack---->|         \
    \                 |\n           |-------------------NTFY(AS-Pending) --------------->|\n\
    \           |                         |                          |\n         \
    \  |<------------------------------ ASP Active----------|\n           |-----------------------------ASP\
    \ Active Ack)------->|\n           |                                         \
    \           |\n   In this case, the SG notifies ASP2 that the AS has moved to\
    \ the Down\n   state.  The SG could have also (optionally) sent a Notify message\n\
    \   when the AS moved to the Pending state.\n   Note:  If the SG detects loss\
    \ of the IUA peer (IUA heartbeat loss or\n   detection of SCTP failure), the initial\
    \ SG-ASP1 ASP Inactive message\n   exchange would not occur.\n"
- title: 5.2.2 (1+1 Sparing, Back-up Over-ride)
  contents:
  - "5.2.2 (1+1 Sparing, Back-up Over-ride)\n   The following example shows a case\
    \ in which ASP2 wishes to over-ride\n   ASP1 and take over the traffic:\n    \
    \      SG                       ASP1                       ASP2\n           |\
    \                         |                          |\n           |<-------------------------------ASP\
    \ Active----------|\n           |-----------------------------ASP Active Ack-------->|\n\
    \           |----NTFY( Alt ASP-Act)-->|\n           |                        \
    \ |                          |\n   In this case, the SG notifies ASP1 that an\
    \ alternative ASP has\n   overridden it.\n"
- title: 5.2.3 (n+k Sparing, Load-sharing case, withdrawal of ASP)
  contents:
  - "5.2.3 (n+k Sparing, Load-sharing case, withdrawal of ASP)\n   Following on from\
    \ the example in Section 5.1.4, and ASP1 withdraws\n   from service\n     SG \
    \                 ASP1                 ASP2                 ASP3\n      |    \
    \                |                   |                   |\n      |<----ASP Inact------|\
    \                   |                   |\n      |---ASP Inact Ack--->|      \
    \             |                   |\n      |                    |            \
    \       |                   |\n      |---------------------------------NTFY(Ins.\
    \ ASPs)----------->|\n      |                    |                   |       \
    \            |\n      |<-----------------------------------------ASP Act (Ldshr)---|\n\
    \      |-------------------------------------------ASP Act (Ack)--->|\n      |\
    \                    |                   |                   |\n   In this case,\
    \ the SG has knowledge of the minimum ASP resources\n   required (implementation\
    \ dependent) for example if the SG knows that\n   n+k = 2+1 for a load-share AS\
    \ and n currently equals 1.\n   Note:  If the SG detects loss of the ASP1 IUA\
    \ peer (IUA heartbeat\n   loss or detection of SCTP failure), the first SG-ASP1\
    \ ASP Inactive\n   message exchange would not occur.\n"
- title: 5.3 Q.921/Q.931 primitives backhaul Examples
  contents:
  - "5.3 Q.921/Q.931 primitives backhaul Examples\n   When the IUA layer on the ASP\
    \ has a QPTM message to send to the SG,\n   it will do the following:\n      -\
    \  Determine the correct SG\n      -  Find the SCTP association to the chosen\
    \ SG\n      -  Determine the correct stream in the SCTP association based on\n\
    \         the D channel\n      -  Fill in the QPTM message, fill in IUA Message\
    \ Header, fill in\n         Common Header\n      -  Send the QPTM message to the\
    \ remote IUA peer in the SG, over\n         the SCTP association\n   When the\
    \ IUA layer on the SG has a QPTM message to send to the ASP,\n   it will do the\
    \ following:\n      -  Determine the AS for the Interface Identifier\n      -\
    \  Determine the Active ASP (SCTP association) within the AS\n      -  Determine\
    \ the correct stream in the SCTP association based on\n         the D channel\n\
    \      -  Fill in the QPTM message, fill in IUA Message Header, fill in\n    \
    \     Common Header\n      -  Send the QPTM message to the remote IUA peer in\
    \ the ASP, over\n         the SCTP association\n   An example of the message flows\
    \ for establishing a data link on a\n   signaling channel, passing PDUs and releasing\
    \ a data link on a\n   signaling channel is shown below.  An active association\
    \ between MGC\n   and SG is established (Section 5.1) prior to the following message\n\
    \   flows.\n            SG                             ASP\n                 \
    \       <----------- Establish Request\n      Establish Confirm  ---------->\n\
    \                        <----------- Data Request\n         Data Indication ----------->\n\
    \                        <----------- Data Request\n         Data Indication ----------->\n\
    \                        <----------- Data Request\n                        <-----------\
    \ Data Request\n         Data Indication ----------->\n                      \
    \  <----------- Release Request (RELEASE_MGMT)\n        Release Confirm  ---------->\n\
    \   An example of the message flows for a failed attempt to establish a\n   data\
    \ link on the signaling channel is shown below.  In this case, the\n   gateway\
    \ has a problem with its physical connection (e.g., Red Alarm),\n   so it cannot\
    \ establish a data link on the signaling channel.\n            SG            \
    \                 ASP\n                        <----------- Establish Request\
    \ (ESTABLISH_START)\n      Release Indication ---------->\n      (RELEASE_PHYS)\n"
- title: 5.4 Layer Management Communication Examples
  contents:
  - "5.4 Layer Management Communication Examples\n   An example of the message flows\
    \ for communication between Layer\n   Management modules between SG and ASP is\
    \ shown below.  An active\n   association between ASP and SG is established (Section\
    \ 5.1) prior to\n   the following message flows.\n                  SG       \
    \                ASP\n                        <----------- Data Request\n    \
    \    Error Indication ---------->\n         (INVALID_TEI)\n                  \
    \      <----------- TEI Status Request\n      TEI Status Confirm ---------->\n\
    \           (Unassigned)\n"
- title: 6.0 Security
  contents:
  - "6.0 Security\n   IUA is designed to carry signaling messages for telephony services.\n\
    \   As such, IUA MUST involve the security needs of several parties the\n   end\
    \ users of the services; the network providers and the applications\n   involved.\
    \  Additional requirements MAY come from local regulation.\n   While having some\
    \ overlapping security needs, any security solution\n   SHOULD fulfill all of\
    \ the different parties' needs.\n"
- title: 6.1 Threats
  contents:
  - "6.1 Threats\n   There is no quick fix, one-size-fits-all solution for security.\
    \  As a\n   transport protocol, IUA has the following security objectives:\n \
    \     *  Availability of reliable and timely user data transport.\n      *  Integrity\
    \ of user data transport.\n      *  Confidentiality of user data.\n   IUA runs\
    \ on top of SCTP.  SCTP [3] provides certain transport related\n   security features,\
    \ such as\n      *  Blind Denial of Service Attacks\n      *  Flooding\n     \
    \ *  Masquerade\n      *  Improper Monopolization of Services\n   When IUA is\
    \ running in professionally managed corporate or service\n   provider network,\
    \ it is reasonable to expect that this network\n   includes an appropriate security\
    \ policy framework.  The \"Site\n   Security Handbook\" [5] SHOULD be consulted\
    \ for guidance.\n   When the network in which IUA runs in involves more than one\
    \ party,\n   it MAY NOT be reasonable to expect that all parties have implemented\n\
    \   security in a sufficient manner.  In such a case, it is recommended\n   that\
    \ IPSEC is used to ensure confidentiality of user payload.\n   Consult [6] for\
    \ more information on configuring IPSEC services.\n"
- title: 6.2 Protecting Confidentiality
  contents:
  - "6.2 Protecting Confidentiality\n   Particularly for mobile users, the requirement\
    \ for confidentiality\n   MAY include the masking of IP addresses and ports. \
    \ In this case\n   application level encryption is not sufficient; IPSEC ESP SHOULD\
    \ be\n   used instead.  Regardless of which level performs the encryption, the\n\
    \   IPSEC ISAKMP service SHOULD be used for key management.\n"
- title: 7.0 IANA Considerations
  contents:
  - '7.0 IANA Considerations

    '
- title: 7.1 SCTP Payload Protocol Identifier
  contents:
  - "7.1 SCTP Payload Protocol Identifier\n   A request will be made to IANA to assign\
    \ an IUA value for the Payload\n   Protocol Identifier in SCTP Payload Data chunk.\
    \  The following SCTP\n   Payload Protocol Identifier will be registered:\n  \
    \       IUA    \"1\"\n   The SCTP Payload Protocol Identifier is included in each\
    \ SCTP Data\n   chunk, to indicate which protocol the SCTP is carrying.  This\
    \ Payload\n   Protocol Identifier is not directly used by SCTP but MAY be used\
    \ by\n   certain network entities to identify the type of information being\n\
    \   carried in a Data chunk.\n   The User Adaptation peer MAY use the Payload\
    \ Protocol Identifier as a\n   way of determining additional information about\
    \ the data being\n   presented to it by SCTP.\n"
- title: 7.2  IUA Protocol Extensions
  contents:
  - "7.2  IUA Protocol Extensions\n   This protocol may also be extended through IANA\
    \ in three ways:\n      -- through definition of additional message classes,\n\
    \      -- through definition of additional message types, and\n      -- through\
    \ definition of additional message parameters.\n   The definition and use of new\
    \ message classes, types and parameters\n   is an integral part of SIGTRAN adaptation\
    \ layers.  Thus, these\n   extensions are assigned by IANA through an IETF Consensus\
    \ action as\n   defined in [RFC2434].\n   The proposed extension must in no way\
    \ adversely affect the general\n   working of the protocol.\n"
- title: 7.2.1 IETF Defined Message Classes
  contents:
  - "7.2.1 IETF Defined Message Classes\n   The documentation for a new message class\
    \ MUST include the following\n   information:\n   (a) A long and short name for\
    \ the message class.\n   (b) A detailed description of the purpose of the message\
    \ class.\n"
- title: 7.2.2 IETF Defined Message Types
  contents:
  - "7.2.2 IETF Defined Message Types\n   Documentation of the message type MUST contain\
    \ the following\n   information:\n   (a) A long and short name for the new message\
    \ type.\n   (b) A detailed description of the structure of the message.\n   (c)\
    \ A detailed definition and description of intended use of each\n       field\
    \ within the message.\n       ti3 (d) A detailed procedural description of the\
    \ use of the new\n       message type within the operation of the protocol.\n\
    \   (e) A detailed description of error conditions when receiving this\n     \
    \  message type.\n   When an implementation receives a message type which it does\
    \ not\n   support, it MUST respond with an Error (ERR) message with an Error\n\
    \   Code of Unsupported Message Type.\n"
- title: 7.2.3 IETF-defined TLV Parameter Extension
  contents:
  - "7.2.3 IETF-defined TLV Parameter Extension\n   Documentation of the message parameter\
    \ MUST contain the following\n   information:\n   (a) Name of the parameter type.\n\
    \   (b) Detailed description of the structure of the parameter field.\n      \
    \ This structure MUST conform to the general type-length-value\n       format\
    \ described in Section 3.1.5.\n   (c) Detailed definition of each component of\
    \ the parameter value.\n   (d) Detailed description of the intended use of this\
    \ parameter type,\n       and an indication of whether and under what circumstances\n\
    \       multiple instances of this parameter type may be found within the\n  \
    \     same message type.\n"
- title: 8.0 Acknowledgements
  contents:
  - "8.0 Acknowledgements\n   The authors would like to thank Alex Audu, Maria Sonia\
    \ Vazquez\n   Arevalillo, Ming-te Chao, Keith Drage, Norm Glaude, Nikhil Jain,\n\
    \   Bernard Kuc, Ming Lin, Stephen Lorusso, John Loughney, Barry\n   Nagelberg,\
    \ Neil Olson, Lyndon Ong, Heinz Prantner, Jose Luis Jimenez\n   Ramirez, Ian Rytina,\
    \ Michael Tuexen and Hank Wang for their valuable\n   comments and suggestions.\n"
- title: 9.0  References
  contents:
  - "9.0  References\n   [1] ITU-T Recommendation Q.920, 'Digital Subscriber signaling\
    \ System\n       No. 1 (DSS1) - ISDN User-Network Interface Data Link Layer -\n\
    \       General Aspects'\n   [2] T1S1.7/99-220 Contribution, 'Back-hauling of\
    \ DSS1 protocol in a\n       Voice over Packet Network'\n   [3] Stewart, R., Xie,\
    \ Q., Morneault, K., Sharp, C., Schwarzbauer, H.,\n       Taylor, T., Rytina,\
    \ I., Kalla, M., Zhang, L. and V. Paxson,\n       \"Stream Control Transmission\
    \ Protocol\", RFC 2960, October 2000.\n   [4] Ong, L., Rytina, I., Garcia, M.,\
    \ Schwarzbauer, H., Coene, L.,\n       Lin, H., Juhasz, I., Holdrege, M., and\
    \ C. Sharp, \"Architectural\n       Framework for Signaling Transport\", RFC 2719,\
    \ October 1999.\n   [5] Fraser, B., \"Site Security Handbook\", FYI 8, RFC 2196,\
    \ September\n       1997.\n   [6] Kent, S. and R. Atkinson, \"Security Architecture\
    \ for the Internet\n       Protocol\", RFC 2401, November 1998.\n   [7] Bradner,\
    \ s., \"Key words for use in RFCs to Indicate Requirement\n       Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [8] Narten, T. and H. Alvestrand, \"Guidelines\
    \ for Writing an IANA\n       Considerations Section in RFCs\", BCP 26, RFC 2434,\
    \ October 1998.\n"
- title: 10.0 Authors' Addresses
  contents:
  - "10.0 Authors' Addresses\n   Ken Morneault\n   Cisco Systems Inc.\n   13615 Dulles\
    \ Technology Drive\n   Herndon, VA. 20171\n   USA\n   Phone: +1-703-484-3323\n\
    \   EMail: kmorneau@cisco.com\n   Malleswar Kalla\n   Telcordia Technologies\n\
    \   PYA 2J-341\n   3 Corporate Place\n   Piscataway, NJ 08854\n   USA\n   Phone:\
    \ +1-732-699-3728\n   EMail: mkalla@telcordia.com\n   Selvam Rengasami\n   Telcordia\
    \ Technologies\n   NVC-2Z439\n   331 Newman Springs Road\n   Red Bank, NJ 07701\n\
    \   USA\n   Phone: +1-732-758-5260\n   EMail: srengasa@telcordia.com\n   Greg\
    \ Sidebottom\n   Nortel Networks\n   3685 Richmond Road\n   Nepean, Ontario\n\
    \   Canada  K2H5B7\n   Phone: +1-613-763-7305\n   EMail: gregside@nortelnetworks.com\n"
- title: 10. Full Copyright Statement
  contents:
  - "10. Full Copyright Statement\n   Copyright (C) The Internet Society (2001). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
