- title: __initial_text__
  contents:
  - "          Network Working Group                                  J. Case\n  \
    \        Request for Comments: 1448                 SNMP Research, Inc.\n    \
    \                           Protocol Operations\n                            \
    \   for version 2 of the\n                   Simple Network Management Protocol\
    \ (SNMPv2)\n          Status of this Memo\n          This RFC specifes an IAB\
    \ standards track protocol for the\n          Internet community, and requests\
    \ discussion and suggestions\n          for improvements.  Please refer to the\
    \ current edition of the\n          \"IAB Official Protocol Standards\" for the\
    \ standardization\n          state and status of this protocol.  Distribution\
    \ of this memo\n          is unlimited.\n          Table of Contents\n       \
    \   1 Introduction ..........................................    2\n         \
    \ 1.1 A Note on Terminology ...............................    2\n          2\
    \ Overview ..............................................    3\n          2.1\
    \ Roles of Protocol Entities ..........................    3\n          2.2 Management\
    \ Information ..............................    3\n          2.3 Access to Management\
    \ Information ....................    4\n          2.4 Retransmission of Requests\
    \ ..........................    4\n          2.5 Message Sizes .......................................\
    \    5\n          2.6 Transport Mappings ..................................  \
    \  6\n          3 Definitions ...........................................    7\n\
    \          4 Protocol Specification ................................   12\n  \
    \        4.1 Common Constructs ...................................   12\n    \
    \      4.2 PDU Processing ......................................   12\n      \
    \    4.2.1 The GetRequest-PDU ................................   13\n        \
    \  4.2.2 The GetNextRequest-PDU ............................   15\n          4.2.2.1\
    \ Example of Table Traversal ......................   16\n          4.2.3 The\
    \ GetBulkRequest-PDU ............................   18\n          4.2.3.1 Another\
    \ Example of Table Traversal ..............   21\n          4.2.4 The Response-PDU\
    \ ..................................   22\n          4.2.5 The SetRequest-PDU\
    \ ................................   23\n          4.2.6 The SNMPv2-Trap-PDU ...............................\
    \   26\n          4.2.7 The InformRequest-PDU .............................  \
    \ 27\n          RFC 1448        Protocol Operations for SNMPv2      April 1993\n\
    \          5 Acknowledgements ......................................   29\n  \
    \        6 References ............................................   33\n    \
    \      7 Security Considerations ...............................   35\n      \
    \    8 Authors' Addresses ....................................   35\n        \
    \  RFC 1448        Protocol Operations for SNMPv2      April 1993\n          1.\
    \  Introduction\n          A network management system contains: several (potentially\n\
    \          many) nodes, each with a processing entity, termed an agent,\n    \
    \      which has access to management instrumentation; at least one\n        \
    \  management station; and, a management protocol, used to convey\n          management\
    \ information between the agents and management\n          stations.  Operations\
    \ of the protocol are carried out under an\n          administrative framework\
    \ which defines both authentication and\n          authorization policies.\n \
    \         Network management stations execute management applications\n      \
    \    which monitor and control network elements.  Network elements\n         \
    \ are devices such as hosts, routers, terminal servers, etc.,\n          which\
    \ are monitored and controlled through access to their\n          management information.\n\
    \          Management information is viewed as a collection of managed\n     \
    \     objects, residing in a virtual information store, termed the\n         \
    \ Management Information Base (MIB).  Collections of related\n          objects\
    \ are defined in MIB modules.  These modules are written\n          using a subset\
    \ of OSI's Abstract Syntax Notation One (ASN.1)\n          [1], termed the Structure\
    \ of Management Information (SMI) [2].\n          The management protocol, version\
    \ 2 of the Simple Network\n          Management Protocol, provides for the exchange\
    \ of messages\n          which convey management information between the agents\
    \ and the\n          management stations.  The form of these messages is a message\n\
    \          \"wrapper\" which encapsulates a Protocol Data Unit (PDU).  The\n \
    \         form and meaning of the \"wrapper\" is determined by an\n          administrative\
    \ framework which defines both authentication and\n          authorization policies.\n\
    \          It is the purpose of this document, Protocol Operations for\n     \
    \     SNMPv2, to define the operations of the protocol with respect\n        \
    \  to the sending and receiving of the PDUs.\n          1.1.  A Note on Terminology\n\
    \          For the purpose of exposition, the original Internet-standard\n   \
    \       Network Management Framework, as described in RFCs 1155, 1157,\n     \
    \     and 1212, is termed the SNMP version 1 framework (SNMPv1).\n          The\
    \ current framework is termed the SNMP version 2 framework\n          (SNMPv2).\n\
    \          RFC 1448        Protocol Operations for SNMPv2      April 1993\n  \
    \        2.  Overview\n          2.1.  Roles of Protocol Entities\n          A\
    \ SNMPv2 entity may operate in a manager role or an agent\n          role.\n \
    \         A SNMPv2 entity acts in an agent role when it performs SNMPv2\n    \
    \      management operations in response to received SNMPv2 protocol\n       \
    \   messages (other than an inform notification) or when it sends\n          trap\
    \ notifications.\n          A SNMPv2 entity acts in a manager role when it initiates\n\
    \          SNMPv2 management operations by the generation of SNMPv2\n        \
    \  protocol messages or when it performs SNMPv2 management\n          operations\
    \ in response to received trap or inform\n          notifications.\n         \
    \ A SNMPv2 entity may support either or both roles, as dictated\n          by\
    \ its implementation and configuration.  Further, a SNMPv2\n          entity can\
    \ also act in the role of a proxy agent, in which it\n          appears to be\
    \ acting in an agent role, but satisfies\n          management requests by acting\
    \ in a manager role with a remote\n          entity.  The use of proxy agents\
    \ and the transparency\n          principle that defines their behavior is described\
    \ in [3].\n          2.2.  Management Information\n          The term, variable,\
    \ refers to an instance of a non-aggregate\n          object type defined according\
    \ to the conventions set forth in\n          the SMI [2] or the textual conventions\
    \ based on the SMI [4].\n          The term, variable binding, normally refers\
    \ to the pairing of\n          the name of a variable and its associated value.\
    \  However, if\n          certain kinds of exceptional conditions occur during\n\
    \          processing of a retrieval request, a variable binding will\n      \
    \    pair a name and an indication of that exception.\n          A variable-binding\
    \ list is a simple list of variable bindings.\n          The name of a variable\
    \ is an OBJECT IDENTIFIER which is the\n          concatenation of the OBJECT\
    \ IDENTIFIER of the corresponding\n          object-type together with an OBJECT\
    \ IDENTIFIER fragment\n          identifying the instance.  The OBJECT IDENTIFIER\
    \ of the\n          corresponding object-type is called the OBJECT IDENTIFIER\n\
    \          RFC 1448        Protocol Operations for SNMPv2      April 1993\n  \
    \        prefix of the variable.\n          2.3.  Access to Management Information\n\
    \          Three types of access to management information are provided\n    \
    \      by the protocol.  One type is a request-response interaction,\n       \
    \   in which a SNMPv2 entity, acting in a manager role, sends a\n          request\
    \ to a SNMPv2 entity, acting in an agent role, and the\n          latter SNMPv2\
    \ entity then responds to the request.  This type\n          is used to retrieve\
    \ or modify management information\n          associated with the managed device.\n\
    \          A second type is also a request-response interaction, in which\n  \
    \        a SNMPv2 entity, acting in a manager role, sends a request to\n     \
    \     a SNMPv2 entity, also acting in a manager role, and the latter\n       \
    \   SNMPv2 entity then responds to the request.  This type is used\n         \
    \ to notify a SNMPv2 entity, acting in a manager role, of\n          management\
    \ information associated with another SNMPv2 entity,\n          also acting in\
    \ a manager role.\n          The third type of access is an unconfirmed interaction,\
    \ in\n          which a SNMPv2 entity, acting in an agent role, sends a\n    \
    \      unsolicited message, termed a trap, to a SNMPv2 entity, acting\n      \
    \    in a manager role, and no response is returned.  This type is\n         \
    \ used to notify a SNMPv2 entity, acting in a manager role, of\n          an exceptional\
    \ situation, which has resulted in changes to\n          management information\
    \ associated with the managed device.\n          2.4.  Retransmission of Requests\n\
    \          For all types of request in this protocol, the receiver is\n      \
    \    required under normal circumstances, to generate and transmit\n         \
    \ a response to the originator of the request.  Whether or not a\n          request\
    \ should be retransmitted if no corresponding response\n          is received\
    \ in an appropriate time interval, is at the\n          discretion of the application\
    \ originating the request.  This\n          will normally depend on the urgency\
    \ of the request.  However,\n          such an application needs to act responsibly\
    \ in respect to the\n          frequency and duration of re-transmissions.\n \
    \         RFC 1448        Protocol Operations for SNMPv2      April 1993\n   \
    \       2.5.  Message Sizes\n          The maximum size of a SNMPv2 message is\
    \ limited the minimum\n          of:\n          (1)  the maximum message size\
    \ which the destination SNMPv2\n               entity can accept; and,\n     \
    \     (2)  the maximum message size which the source SNMPv2 entity\n         \
    \      can generate.\n          The former is indicated by partyMaxMessageSize[5]\
    \ of the\n          destination party.  The latter is imposed by implementation-\n\
    \          specific local constraints.\n          Each transport mapping for the\
    \ SNMPv2 indicates the minimum\n          message size which a SNMPv2 implementation\
    \ must be able to\n          produce or consume.  Although implementations are\
    \ encouraged\n          to support larger values whenever possible, a conformant\n\
    \          implementation must never generate messages larger than\n         \
    \ allowed by the receiving SNMPv2 entity.\n          One of the aims of the GetBulkRequest-PDU,\
    \ specified in this\n          protocol, is to minimize the number of protocol\
    \ exchanges\n          required to retrieve a large amount of management information.\n\
    \          As such, this PDU type allows a SNMPv2 entity acting in a\n       \
    \   manager role to request that the response be as large as\n          possible\
    \ given the constraints on message sizes.  These\n          constraints include\
    \ the limits on the size of messages which\n          the SNMPv2 entity acting\
    \ in an agent role can generate, and\n          the SNMPv2 entity acting in a\
    \ manager role can receive.\n          However, it is possible that such maximum\
    \ sized messages may\n          be larger than the Path MTU of the path across\
    \ the network\n          traversed by the messages.  In this situation, such messages\n\
    \          are subject to fragmentation.  Fragmentation is generally\n       \
    \   considered to be harmful [6], since among other problems, it\n          leads\
    \ to a decrease in the reliability of the transfer of the\n          messages.\
    \  Thus, a SNMPv2 entity which sends a\n          GetBulkRequest-PDU must take\
    \ care to set its parameters\n          accordingly, so as to reduce the risk\
    \ of fragmentation.  In\n          particular, under conditions of network stress,\
    \ only small\n          values should be used for max-repetitions.\n         \
    \ RFC 1448        Protocol Operations for SNMPv2      April 1993\n          2.6.\
    \  Transport Mappings\n          It is important to note that the exchange of\
    \ SNMPv2 messages\n          requires only an unreliable datagram service, with\
    \ every\n          message being entirely and independently contained in a single\n\
    \          transport datagram.  Specific transport mappings and encoding\n   \
    \       rules are specified elsewhere [7].  However, the preferred\n         \
    \ mapping is the use of the User Datagram Protocol [8].\n          RFC 1448  \
    \      Protocol Operations for SNMPv2      April 1993\n          3.  Definitions\n\
    \               SNMPv2-PDU DEFINITIONS ::= BEGIN\n               IMPORTS\n   \
    \                ObjectName, ObjectSyntax, Integer32\n                       FROM\
    \ SNMPv2-SMI;\n               -- protocol data units\n               PDUs ::=\n\
    \                   CHOICE {\n                       get-request\n           \
    \                GetRequest-PDU,\n                       get-next-request\n  \
    \                         GetNextRequest-PDU,\n                       get-bulk-request\n\
    \                           GetBulkRequest-PDU,\n                       response\n\
    \                           Response-PDU,\n                       set-request\n\
    \                           SetRequest-PDU,\n                       inform-request\n\
    \                           InformRequest-PDU,\n                       snmpV2-trap\n\
    \                           SNMPv2-Trap-PDU\n                   }\n          RFC\
    \ 1448        Protocol Operations for SNMPv2      April 1993\n               --\
    \ PDUs\n               GetRequest-PDU ::=\n                   [0]\n          \
    \             IMPLICIT PDU\n               GetNextRequest-PDU ::=\n          \
    \         [1]\n                       IMPLICIT PDU\n               Response-PDU\
    \ ::=\n                   [2]\n                       IMPLICIT PDU\n         \
    \      SetRequest-PDU ::=\n                   [3]\n                       IMPLICIT\
    \ PDU\n               -- [4] is obsolete\n               GetBulkRequest-PDU ::=\n\
    \                   [5]\n                       IMPLICIT BulkPDU\n           \
    \    InformRequest-PDU ::=\n                   [6]\n                       IMPLICIT\
    \ PDU\n               SNMPv2-Trap-PDU ::=\n                   [7]\n          \
    \             IMPLICIT PDU\n          RFC 1448        Protocol Operations for\
    \ SNMPv2      April 1993\n               max-bindings\n                   INTEGER\
    \ ::= 2147483647\n               PDU ::=\n                   SEQUENCE {\n    \
    \                   request-id\n                           Integer32,\n      \
    \                 error-status            -- sometimes ignored\n             \
    \              INTEGER {\n                               noError(0),\n       \
    \                        tooBig(1),\n                               noSuchName(2),\
    \   -- for proxy compatibility\n                               badValue(3),  \
    \   -- for proxy compatibility\n                               readOnly(4),  \
    \   -- for proxy compatibility\n                               genErr(5),\n  \
    \                             noAccess(6),\n                               wrongType(7),\n\
    \                               wrongLength(8),\n                            \
    \   wrongEncoding(9),\n                               wrongValue(10),\n      \
    \                         noCreation(11),\n                               inconsistentValue(12),\n\
    \                               resourceUnavailable(13),\n                   \
    \            commitFailed(14),\n                               undoFailed(15),\n\
    \                               authorizationError(16),\n                    \
    \           notWritable(17),\n                               inconsistentName(18)\n\
    \                           },\n                       error-index           \
    \ -- sometimes ignored\n                           INTEGER (0..max-bindings),\n\
    \                       variable-bindings   -- values are sometimes ignored\n\
    \                           VarBindList\n                   }\n          RFC 1448\
    \        Protocol Operations for SNMPv2      April 1993\n               BulkPDU\
    \ ::=                     -- MUST be identical in\n                   SEQUENCE\
    \ {                  -- structure to PDU\n                       request-id\n\
    \                           Integer32,\n                       non-repeaters\n\
    \                           INTEGER (0..max-bindings),\n                     \
    \  max-repetitions\n                           INTEGER (0..max-bindings),\n  \
    \                     variable-bindings       -- values are ignored\n        \
    \                   VarBindList\n                   }\n          RFC 1448    \
    \    Protocol Operations for SNMPv2      April 1993\n               -- variable\
    \ binding\n               VarBind ::=\n                   SEQUENCE {\n       \
    \                name\n                           ObjectName,\n              \
    \         CHOICE {\n                           value\n                       \
    \        ObjectSyntax,\n                           unSpecified         -- in retrieval\
    \ requests\n                                   NULL,\n                       \
    \                        -- exceptions in responses\n                        \
    \   noSuchObject[0]\n                                   IMPLICIT NULL,\n     \
    \                      noSuchInstance[1]\n                                   IMPLICIT\
    \ NULL,\n                           endOfMibView[2]\n                        \
    \           IMPLICIT NULL\n                       }\n                   }\n  \
    \             -- variable-binding list\n               VarBindList ::=\n     \
    \              SEQUENCE (SIZE (0..max-bindings)) OF\n                       VarBind\n\
    \               END\n          RFC 1448        Protocol Operations for SNMPv2\
    \      April 1993\n          4.  Protocol Specification\n          4.1.  Common\
    \ Constructs\n          The value of the request-id field in a Response-PDU takes\
    \ the\n          value of the request-id field in the request PDU to which it\n\
    \          is a response.  By use of the request-id value, a SNMPv2\n        \
    \  application can distinguish the (potentially multiple)\n          outstanding\
    \ requests, and thereby correlate incoming responses\n          with outstanding\
    \ requests.  In cases where an unreliable\n          datagram service is used,\
    \ the request-id also provides a\n          simple means of identifying messages\
    \ duplicated by the\n          network.  Use of the same request-id on a retransmission\
    \ of a\n          request allows the response to either the original\n       \
    \   transmission or the retransmission to satisfy the request.\n          However,\
    \ in order to calculate the round trip time for\n          transmission and processing\
    \ of a request-response transaction,\n          the SNMPv2 application needs to\
    \ use a different request-id\n          value on a retransmitted request.  The\
    \ latter strategy is\n          recommended for use in the majority of situations.\n\
    \          A non-zero value of the error-status field in a Response-PDU\n    \
    \      is used to indicate that an exception occurred to prevent the\n       \
    \   processing of the request.  In these cases, a non-zero value\n          of\
    \ the Response-PDU's error-index field provides additional\n          information\
    \ by identifying which variable binding in the list\n          caused the exception.\
    \  A variable binding is identified by its\n          index value.  The first\
    \ variable binding in a variable-binding\n          list is index one, the second\
    \ is index two, etc.\n          SNMPv2 limits OBJECT IDENTIFIER values to a maximum\
    \ of 128\n          sub-identifiers, where each sub-identifier has a maximum value\n\
    \          of 2**32-1.\n          4.2.  PDU Processing\n          It is mandatory\
    \ that all SNMPv2 entities acting in an agent\n          role be able to generate\
    \ the following PDU types: Response-PDU\n          and SNMPv2-Trap-PDU; further,\
    \ all such implementations must be\n          able to receive the following PDU\
    \ types: GetRequest-PDU,\n          GetNextRequest-PDU, GetBulkRequest-PDU, and\
    \ SetRequest-PDU.\n          RFC 1448        Protocol Operations for SNMPv2  \
    \    April 1993\n          It is mandatory that all SNMPv2 entities acting in\
    \ a manager\n          role be able to generate the following PDU types: GetRequest-\n\
    \          PDU, GetNextRequest-PDU, GetBulkRequest-PDU, SetRequest-PDU,\n    \
    \      InformRequest-PDU, and Response-PDU; further, all such\n          implementations\
    \ must be able to receive the following PDU\n          types: Response-PDU, SNMPv2-Trap-PDU,\
    \ InformRequest-PDU;\n          In the elements of procedure below, any field\
    \ of a PDU which\n          is not referenced by the relevant procedure is ignored\
    \ by the\n          receiving SNMPv2 entity.  However, all components of a PDU,\n\
    \          including those whose values are ignored by the receiving\n       \
    \   SNMPv2 entity, must have valid ASN.1 syntax and encoding.  For\n         \
    \ example, some PDUs (e.g., the GetRequest-PDU) are concerned\n          only\
    \ with the name of a variable and not its value.  In this\n          case, the\
    \ value portion of the variable binding is ignored by\n          the receiving\
    \ SNMPv2 entity.  The unSpecified value is defined\n          for use as the value\
    \ portion of such bindings.\n          For all generated PDUs, the message \"\
    wrapper\" to encapsulate\n          the PDU is generated and transmitted as specified\
    \ in [3].  The\n          size of a message is limited only by constraints on\
    \ the\n          maximum message size, either a local limitation or the limit\n\
    \          associated with the message's destination party, i.e., it is\n    \
    \      not limited by the number of variable bindings.\n          On receiving\
    \ a management communication, the procedures\n          defined in Section 3.2\
    \ of [3] are followed.  If these\n          procedures indicate that the PDU contained\
    \ within the message\n          \"wrapper\" is to be processed, then the SNMPv2\
    \ context\n          associated with the PDU defines the object resources which\
    \ are\n          visible to the operation.\n          4.2.1.  The GetRequest-PDU\n\
    \          A GetRequest-PDU is generated and transmitted at the request\n    \
    \      of a SNMPv2 application.\n          Upon receipt of a GetRequest-PDU, the\
    \ receiving SNMPv2 entity\n          processes each variable binding in the variable-binding\
    \ list\n          to produce a Response-PDU.  All fields of the Response-PDU\n\
    \          have the same values as the corresponding fields of the\n         \
    \ received request except as indicated below.  Each variable\n          binding\
    \ is processed as follows:\n          RFC 1448        Protocol Operations for\
    \ SNMPv2      April 1993\n          (1)  If the variable binding's name does not\
    \ have an OBJECT\n               IDENTIFIER prefix which exactly matches the OBJECT\n\
    \               IDENTIFIER prefix of any variable accessible by this\n       \
    \        request, then its value field is set to `noSuchObject'.\n          (2)\
    \  Otherwise, if the variable binding's name does not\n               exactly\
    \ match the name of a variable accessible by this\n               request, then\
    \ its value field is set to `noSuchInstance'.\n          (3)  Otherwise, the variable\
    \ binding's value field is set to\n               the value of the named variable.\n\
    \          If the processing of any variable binding fails for a reason\n    \
    \      other than listed above, then the Response-PDU is re-formatted\n      \
    \    with the same values in its request-id and variable-bindings\n          fields\
    \ as the received GetRequest-PDU, with the value of its\n          error-status\
    \ field set to `genErr', and the value of its\n          error-index field is\
    \ set to the index of the failed variable\n          binding.\n          Otherwise,\
    \ the value of the Response-PDU's error-status field\n          is set to `noError',\
    \ and the value of its error-index field is\n          zero.\n          The generated\
    \ Response-PDU is then encapsulated into a\n          message.  If the size of\
    \ the resultant message is less than or\n          equal to both a local constraint\
    \ and the maximum message size\n          of the request's source party, it is\
    \ transmitted to the\n          originator of the GetRequest-PDU.\n          Otherwise,\
    \ an alternate Response-PDU is generated.  This\n          alternate Response-PDU\
    \ is formatted with the same value in its\n          request-id field as the received\
    \ GetRequest-PDU, with the\n          value of its error-status field set to `tooBig',\
    \ the value of\n          its error-index field set to zero, and an empty variable-\n\
    \          bindings field.  This alternate Response-PDU is then\n          encapsulated\
    \ into a message.  If the size of the resultant\n          message is less than\
    \ or equal to both a local constraint and\n          the maximum message size\
    \ of the request's source party, it is\n          transmitted to the originator\
    \ of the GetRequest-PDU.\n          Otherwise, the resultant message is discarded.\n\
    \          RFC 1448        Protocol Operations for SNMPv2      April 1993\n  \
    \        4.2.2.  The GetNextRequest-PDU\n          A GetNextRequest-PDU is generated\
    \ and transmitted at the\n          request of a SNMPv2 application.\n       \
    \   Upon receipt of a GetNextRequest-PDU, the receiving SNMPv2\n          entity\
    \ processes each variable binding in the variable-binding\n          list to produce\
    \ a Response-PDU.  All fields of the Response-\n          PDU have the same values\
    \ as the corresponding fields of the\n          received request except as indicated\
    \ below.  Each variable\n          binding is processed as follows:\n        \
    \  (1)  The variable is located which is in the lexicographically\n          \
    \     ordered list of the names of all variables which are\n               accessible\
    \ by this request and whose name is the first\n               lexicographic successor\
    \ of the variable binding's name in\n               the incoming GetNextRequest-PDU.\
    \  The corresponding\n               variable binding's name and value fields\
    \ in the\n               Response-PDU are set to the name and value of the located\n\
    \               variable.\n          (2)  If the requested variable binding's\
    \ name does not\n               lexicographically precede the name of any variable\n\
    \               accessible by this request, i.e., there is no\n              \
    \ lexicographic successor, then the corresponding variable\n               binding\
    \ produced in the Response-PDU has its value field\n               set to 'endOfMibView',\
    \ and its name field set to the\n               variable binding's name in the\
    \ request.\n          If the processing of any variable binding fails for a reason\n\
    \          other than listed above, then the Response-PDU is re-formatted\n  \
    \        with the same values in its request-id and variable-bindings\n      \
    \    fields as the received GetNextRequest-PDU, with the value of\n          its\
    \ error-status field set to `genErr', and the value of its\n          error-index\
    \ field is set to the index of the failed variable\n          binding.\n     \
    \     Otherwise, the value of the Response-PDU's error-status field\n        \
    \  is set to `noError', and the value of its error-index field is\n          zero.\n\
    \          The generated Response-PDU is then encapsulated into a\n          message.\
    \  If the size of the resultant message is less than or\n          equal to both\
    \ a local constraint and the maximum message size\n          of the request's\
    \ source party, it is transmitted to the\n          RFC 1448        Protocol Operations\
    \ for SNMPv2      April 1993\n          originator of the GetNextRequest-PDU.\n\
    \          Otherwise, an alternate Response-PDU is generated.  This\n        \
    \  alternate Response-PDU is formatted with the same values in\n          its\
    \ request-id field as the received GetNextRequest-PDU, with\n          the value\
    \ of its error-status field set to `tooBig', the value\n          of its error-index\
    \ field set to zero, and an empty variable-\n          bindings field.  This alternate\
    \ Response-PDU is then\n          encapsulated into a message.  If the size of\
    \ the resultant\n          message is less than or equal to both a local constraint\
    \ and\n          the maximum message size of the request's source party, it is\n\
    \          transmitted to the originator of the GetNextRequest-PDU.\n        \
    \  Otherwise, the resultant message is discarded.\n          4.2.2.1.  Example\
    \ of Table Traversal\n          An important use of the GetNextRequest-PDU is\
    \ the traversal of\n          conceptual tables of information within a MIB. \
    \ The semantics\n          of this type of request, together with the method of\n\
    \          identifying individual instances of objects in the MIB,\n         \
    \ provides access to related objects in the MIB as if they\n          enjoyed\
    \ a tabular organization.\n          In the protocol exchange sketched below,\
    \ a SNMPv2 application\n          retrieves the media-dependent physical address\
    \ and the\n          address-mapping type for each entry in the IP net-to-media\n\
    \          Address Translation Table [9] of a particular network element.\n  \
    \        It also retrieves the value of sysUpTime [9], at which the\n        \
    \  mappings existed.  Suppose that the agent's IP net-to-media\n          table\
    \ has three entries:\n            Interface-Number  Network-Address  Physical-Address\
    \  Type\n                   1            10.0.0.51     00:00:10:01:23:45  static\n\
    \                   1             9.2.3.4      00:00:10:54:32:10  dynamic\n  \
    \                 2            10.0.0.15     00:00:10:98:76:54  dynamic\n    \
    \      The SNMPv2 entity acting in a manager role begins by sending a\n      \
    \    GetNextRequest-PDU containing the indicated OBJECT IDENTIFIER\n         \
    \ values as the requested variable names:\n              GetNextRequest ( sysUpTime,\n\
    \                               ipNetToMediaPhysAddress,\n                   \
    \            ipNetToMediaType )\n          RFC 1448        Protocol Operations\
    \ for SNMPv2      April 1993\n          The SNMPv2 entity acting in an agent role\
    \ responds with a\n          Response-PDU:\n              Response (( sysUpTime.0\
    \ =  \"123456\" ),\n                        ( ipNetToMediaPhysAddress.1.9.2.3.4\
    \ =\n                                                   \"000010543210\" ),\n\
    \                        ( ipNetToMediaType.1.9.2.3.4 =  \"dynamic\" ))\n    \
    \      The SNMPv2 entity acting in a manager role continues with:\n          \
    \    GetNextRequest ( sysUpTime,\n                               ipNetToMediaPhysAddress.1.9.2.3.4,\n\
    \                               ipNetToMediaType.1.9.2.3.4 )\n          The SNMPv2\
    \ entity acting in an agent role responds with:\n              Response (( sysUpTime.0\
    \ =  \"123461\" ),\n                        ( ipNetToMediaPhysAddress.1.10.0.0.51\
    \ =\n                                                    \"000010012345\" ),\n\
    \                        ( ipNetToMediaType.1.10.0.0.51 =  \"static\" ))\n   \
    \       The SNMPv2 entity acting in a manager role continues with:\n         \
    \     GetNextRequest ( sysUpTime,\n                               ipNetToMediaPhysAddress.1.10.0.0.51,\n\
    \                               ipNetToMediaType.1.10.0.0.51 )\n          The\
    \ SNMPv2 entity acting in an agent role responds with:\n              Response\
    \ (( sysUpTime.0 =  \"123466\" ),\n                        ( ipNetToMediaPhysAddress.2.10.0.0.15\
    \ =\n                                                     \"000010987654\" ),\n\
    \                        ( ipNetToMediaType.2.10.0.0.15 =  \"dynamic\" ))\n  \
    \        The SNMPv2 entity acting in a manager role continues with:\n        \
    \      GetNextRequest ( sysUpTime,\n                               ipNetToMediaPhysAddress.2.10.0.0.15,\n\
    \                               ipNetToMediaType.2.10.0.0.15 )\n          As there\
    \ are no further entries in the table, the SNMPv2\n          entity acting in\
    \ an agent role responds with the variables\n          that are next in the lexicographical\
    \ ordering of the\n          accessible object names, for example:\n         \
    \ RFC 1448        Protocol Operations for SNMPv2      April 1993\n           \
    \   Response (( sysUpTime.0 =  \"123471\" ),\n                        ( ipNetToMediaNetAddress.1.9.2.3.4\
    \ =\n                                                         \"9.2.3.4\" ),\n\
    \                        ( ipRoutingDiscards.0 =  \"2\" ))\n          This response\
    \ signals the end of the table to the SNMPv2\n          entity acting in a manager\
    \ role.\n          4.2.3.  The GetBulkRequest-PDU\n          A GetBulkRequest-PDU\
    \ is generated and transmitted at the\n          request of a SNMPv2 application.\
    \  The purpose of the\n          GetBulkRequest-PDU is to request the transfer\
    \ of a potentially\n          large amount of data, including, but not limited\
    \ to, the\n          efficient and rapid retrieval of large tables.\n        \
    \  Upon receipt of a GetBulkRequest-PDU, the receiving SNMPv2\n          entity\
    \ processes each variable binding in the variable-binding\n          list to produce\
    \ a Response-PDU with its request-id field\n          having the same value as\
    \ in the request.  Processing begins by\n          examining the values in the\
    \ non-repeaters and max-repetitions\n          fields.  If the value in the non-repeaters\
    \ field is less than\n          zero, then the value of the field is set to zero.\
    \  Similarly,\n          if the value in the max-repetitions field is less than\
    \ zero,\n          then the value of the field is set to zero.\n          For\
    \ the GetBulkRequest-PDU type, the successful processing of\n          each variable\
    \ binding in the request generates zero or more\n          variable bindings in\
    \ the Response-PDU.  That is, the one-to-\n          one mapping between the variable\
    \ bindings of the GetRequest-\n          PDU, GetNextRequest-PDU, and SetRequest-PDU\
    \ types and the\n          resultant Response-PDUs does not apply for the mapping\
    \ between\n          the variable bindings of a GetBulkRequest-PDU and the\n \
    \         resultant Response-PDU.\n          The values of the non-repeaters and\
    \ max-repetitions fields in\n          the request specify the processing requested.\
    \  One variable\n          binding in the Response-PDU is requested for the first\
    \ N\n          variable bindings in the request and M variable bindings are\n\
    \          requested for each of the R remaining variable bindings in the\n  \
    \        request.  Consequently, the total number of requested variable\n    \
    \      bindings communicated by the request is given by N + (M * R),\n       \
    \   where N is the minimum of: a) the value of the non-repeaters\n          field\
    \ in the request, and b) the number of variable bindings\n          RFC 1448 \
    \       Protocol Operations for SNMPv2      April 1993\n          in the request;\
    \ M is the value of the max-repetitions field in\n          the request; and R\
    \ is the maximum of: a) number of variable\n          bindings in the request\
    \ - N, and b)  zero.\n          The receiving SNMPv2 entity produces a Response-PDU\
    \ with up to\n          the total number of requested variable bindings communicated\n\
    \          by the request.  The request-id shall have the same value as\n    \
    \      the received GetBulkRequest-PDU.\n          If N is greater than zero,\
    \ the first through the (N)-th\n          variable bindings of the Response-PDU\
    \ are each produced as\n          follows:\n          (1)  The variable is located\
    \ which is in the lexicographically\n               ordered list of the names\
    \ of all variables which are\n               accessible by this request and whose\
    \ name is the first\n               lexicographic successor of the variable binding's\
    \ name in\n               the incoming GetBulkRequest-PDU.  The corresponding\n\
    \               variable binding's name and value fields in the\n            \
    \   Response-PDU are set to the name and value of the located\n              \
    \ variable.\n          (2)  If the requested variable binding's name does not\n\
    \               lexicographically precede the name of any variable\n         \
    \      accessible by this request, i.e., there is no\n               lexicographic\
    \ successor, then the corresponding variable\n               binding produced\
    \ in the Response-PDU has its value field\n               set to `endOfMibView',\
    \ and its name field set to the\n               variable binding's name in the\
    \ request.\n          If M and R are non-zero, the (N + 1)-th and subsequent\n\
    \          variable bindings of the Response-PDU are each produced in a\n    \
    \      similar manner.  For each iteration i, such that i is greater\n       \
    \   than zero and less than or equal to M, and for each repeated\n          variable,\
    \ r, such that r is greater than zero and less than or\n          equal to R,\
    \ the (N + ( (i-1) * R ) + r)-th variable binding of\n          the Response-PDU\
    \ is produced as follows:\n          (1)  The variable which is in the lexicographically\
    \ ordered\n               list of the names of all variables which are accessible\n\
    \               by this request and whose name is the (i)-th\n               lexicographic\
    \ successor of the (N + r)-th variable\n               binding's name in the incoming\
    \ GetBulkRequest-PDU is\n               located and the variable binding's name\
    \ and value fields\n               are set to the name and value of the located\
    \ variable.\n          RFC 1448        Protocol Operations for SNMPv2      April\
    \ 1993\n          (2)  If there is no (i)-th lexicographic successor, then the\n\
    \               corresponding variable binding produced in the Response-\n   \
    \            PDU has its value field set to `endOfMibView', and its\n        \
    \       name field set to either the last lexicographic\n               successor,\
    \ or if there are no lexicographic successors,\n               to the (N + r)-th\
    \ variable binding's name in the request.\n          While the maximum number\
    \ of variable bindings in the\n          Response-PDU is bounded by N + (M * R),\
    \ the response may be\n          generated with a lesser number of variable bindings\
    \ (possibly\n          zero) for either of two reasons.\n          (1)  If the\
    \ size of the message encapsulating the Response-PDU\n               containing\
    \ the requested number of variable bindings\n               would be greater than\
    \ either a local constraint or the\n               maximum message size of the\
    \ request's source party, then\n               the response is generated with\
    \ a lesser number of\n               variable bindings.  This lesser number is\
    \ the ordered set\n               of variable bindings with some of the variable\
    \ bindings\n               at the end of the set removed, such that the size of\
    \ the\n               message encapsulating the Response-PDU is approximately\n\
    \               equal to but no greater than the minimum of the local\n      \
    \         constraint and the maximum message size of the request's\n         \
    \      source party.  Note that the number of variable bindings\n            \
    \   removed has no relationship to the values of N, M, or R.\n          (2)  The\
    \ response may also be generated with a lesser number\n               of variable\
    \ bindings if for some value of iteration i,\n               such that i is greater\
    \ than zero and less than or equal\n               to M, that all of the generated\
    \ variable bindings have\n               the value field set to the `endOfMibView'.\
    \  In this case,\n               the variable bindings may be truncated after\
    \ the (N + (i\n               * R))-th variable binding.\n          If the processing\
    \ of any variable binding fails for a reason\n          other than listed above,\
    \ then the Response-PDU is re-formatted\n          with the same values in its\
    \ request-id and variable-bindings\n          fields as the received GetBulkRequest-PDU,\
    \ with the value of\n          its error-status field set to `genErr', and the\
    \ value of its\n          error-index field is set to the index of the failed\
    \ variable\n          binding.\n          Otherwise, the value of the Response-PDU's\
    \ error-status field\n          is set to `noError', and the value of its error-index\
    \ field to\n          zero.\n          RFC 1448        Protocol Operations for\
    \ SNMPv2      April 1993\n          The generated Response-PDU (possibly with\
    \ an empty variable-\n          bindings field) is then encapsulated into a message.\
    \  If the\n          size of the resultant message is less than or equal to both\
    \ a\n          local constraint and the maximum message size of the request's\n\
    \          source party, it is transmitted to the originator of the\n        \
    \  GetBulkRequest-PDU.  Otherwise, the resultant message is\n          discarded.\n\
    \          4.2.3.1.  Another Example of Table Traversal\n          This example\
    \ demonstrates how the GetBulkRequest-PDU can be\n          used as an alternative\
    \ to the GetNextRequest-PDU.  The same\n          traversal of the IP net-to-media\
    \ table as shown in Section\n          4.2.2.1 is achieved with fewer exchanges.\n\
    \          The SNMPv2 entity acting in a manager role begins by sending a\n  \
    \        GetBulkRequest-PDU with the modest max-repetitions value of 2,\n    \
    \      and containing the indicated OBJECT IDENTIFIER values as the\n        \
    \  requested variable names:\n              GetBulkRequest [ non-repeaters = 1,\
    \ max-repetitions = 2 ]\n                              ( sysUpTime,\n        \
    \                        ipNetToMediaPhysAddress,\n                          \
    \      ipNetToMediaType )\n          The SNMPv2 entity acting in an agent role\
    \ responds with a\n          Response-PDU:\n              Response (( sysUpTime.0\
    \ =  \"123456\" ),\n                        ( ipNetToMediaPhysAddress.1.9.2.3.4\
    \ =\n                                                   \"000010543210\" ),\n\
    \                        ( ipNetToMediaType.1.9.2.3.4 =  \"dynamic\" ),\n    \
    \                    ( ipNetToMediaPhysAddress.1.10.0.0.51 =\n               \
    \                                     \"000010012345\" ),\n                  \
    \      ( ipNetToMediaType.1.10.0.0.51 =  \"static\" ))\n          The SNMPv2 entity\
    \ acting in a manager role continues with:\n              GetBulkRequest [ non-repeaters\
    \ = 1, max-repetitions = 2 ]\n                              ( sysUpTime,\n   \
    \                             ipNetToMediaPhysAddress.1.10.0.0.51,\n         \
    \                       ipNetToMediaType.1.10.0.0.51 )\n          RFC 1448   \
    \     Protocol Operations for SNMPv2      April 1993\n          The SNMPv2 entity\
    \ acting in an agent role responds with:\n              Response (( sysUpTime.0\
    \ =  \"123466\" ),\n                        ( ipNetToMediaPhysAddress.2.10.0.0.15\
    \ =\n                                                   \"000010987654\" ),\n\
    \                        ( ipNetToMediaType.2.10.0.0.15 =\n                  \
    \                                      \"dynamic\" ),\n                      \
    \  ( ipNetToMediaNetAddress.1.9.2.3.4 =\n                                    \
    \                    \"9.2.3.4\" ),\n                        ( ipRoutingDiscards.0\
    \ =  \"2\" ))\n          This response signals the end of the table to the SNMPv2\n\
    \          entity acting in a manager role.\n          4.2.4.  The Response-PDU\n\
    \          The Response-PDU is generated by a SNMPv2 entity only upon\n      \
    \    receipt of a GetRequest-PDU, GetNextRequest-PDU,\n          GetBulkRequest-PDU,\
    \ SetRequest-PDU, or InformRequest-PDU, as\n          described elsewhere in this\
    \ document.\n          If the error-status field of the Response-PDU is non-zero,\
    \ the\n          value fields of the variable bindings in the variable binding\n\
    \          list are ignored.\n          If both the error-status field and the\
    \ error-index field of\n          the Response-PDU are non-zero, then the value\
    \ of the error-\n          index field is the index of the variable binding (in\
    \ the\n          variable-binding list of the corresponding request) for which\n\
    \          the request failed.  The first variable binding in a request's\n  \
    \        variable-binding list is index one, the second is index two,\n      \
    \    etc.\n          A compliant SNMPv2 entity acting in a manager role must be\n\
    \          able to properly receive and handle a Response-PDU with an\n      \
    \    error-status field equal to `noSuchName', `badValue', or\n          `readOnly'.\
    \  (See Section 3.1.2 of [10].)\n          Upon receipt of a Response-PDU, the\
    \ receiving SNMPv2 entity\n          presents its contents to the SNMPv2 application\
    \ which\n          generated the request with the same request-id value.\n   \
    \       RFC 1448        Protocol Operations for SNMPv2      April 1993\n     \
    \     4.2.5.  The SetRequest-PDU\n          A SetRequest-PDU is generated and\
    \ transmitted at the request\n          of a SNMPv2 application.\n          Upon\
    \ receipt of a SetRequest-PDU, the receiving SNMPv2 entity\n          determines\
    \ the size of a message encapsulating a Response-PDU\n          with the same\
    \ values in its request-id, error-status, error-\n          index and variable-bindings\
    \ fields as the received\n          SetRequest-PDU.  If the determined message\
    \ size is greater\n          than either a local constraint or the maximum message\
    \ size of\n          the request's source party, then an alternate Response-PDU\
    \ is\n          generated, transmitted to the originator of the SetRequest-\n\
    \          PDU, and processing of the SetRequest-PDU terminates\n          immediately\
    \ thereafter.  This alternate Response-PDU is\n          formatted with the same\
    \ values in its request-id field as the\n          received SetRequest-PDU, with\
    \ the value of its error-status\n          field set to `tooBig', the value of\
    \ its error-index field set\n          to zero, and an empty variable-bindings\
    \ field.  This alternate\n          Response-PDU is then encapsulated into a message.\
    \  If the size\n          of the resultant message is less than or equal to both\
    \ a local\n          constraint and the maximum message size of the request's\n\
    \          source party, it is transmitted to the originator of the\n        \
    \  SetRequest-PDU.  Otherwise, the resultant message is\n          discarded.\
    \  Regardless, processing of the SetRequest-PDU\n          terminates.\n     \
    \     Otherwise, the receiving SNMPv2 entity processes each variable\n       \
    \   binding in the variable-binding list to produce a Response-\n          PDU.\
    \  All fields of the Response-PDU have the same values as\n          the corresponding\
    \ fields of the received request except as\n          indicated below.\n     \
    \     The variable bindings are conceptually processed as a two\n          phase\
    \ operation.  In the first phase, each variable binding is\n          validated;\
    \ if all validations are successful, then each\n          variable is altered\
    \ in the second phase.  Of course,\n          implementors are at liberty to implement\
    \ either the first, or\n          second, or both, of the these conceptual phases\
    \ as multiple\n          implementation phases.  Indeed, such multiple implementation\n\
    \          phases may be necessary in some cases to ensure consistency.\n    \
    \      The following validations are performed in the first phase on\n       \
    \   each variable binding until they are all successful, or until\n          one\
    \ fails:\n          RFC 1448        Protocol Operations for SNMPv2      April\
    \ 1993\n          (1)  If the variable binding's name specifies a variable which\n\
    \               is not accessible by this request, then the value of the\n   \
    \            Response-PDU's error-status field is set to `noAccess',\n       \
    \        and the value of its error-index field is set to the\n              \
    \ index of the failed variable binding.\n          (2)  Otherwise, if the variable\
    \ binding's name specifies a\n               variable which does not exist and\
    \ could not ever be\n               created, then the value of the Response-PDU's\
    \ error-\n               status field is set to `noCreation', and the value of\
    \ its\n               error-index field is set to the index of the failed\n  \
    \             variable binding.\n          (3)  Otherwise, if the variable binding's\
    \ name specifies a\n               variable which exists but can not be modified\
    \ no matter\n               what new value is specified, then the value of the\n\
    \               Response-PDU's error-status field is set to\n               `notWritable',\
    \ and the value of its error-index field is\n               set to the index of\
    \ the failed variable binding.\n          (4)  Otherwise, if the variable binding's\
    \ value field\n               specifies, according to the ASN.1 language, a type\
    \ which\n               is inconsistent with that required for the variable, then\n\
    \               the value of the Response-PDU's error-status field is set\n  \
    \             to `wrongType', and the value of its error-index field is\n    \
    \           set to the index of the failed variable binding.\n          (5)  Otherwise,\
    \ if the variable binding's value field\n               specifies, according to\
    \ the ASN.1 language, a length\n               which is inconsistent with that\
    \ required for the\n               variable, then the value of the Response-PDU's\
    \ error-\n               status field is set to `wrongLength', and the value of\n\
    \               its error-index field is set to the index of the failed\n    \
    \           variable binding.\n          (6)  Otherwise, if the variable binding's\
    \ value field contains\n               an ASN.1 encoding which is inconsistent\
    \ with that field's\n               ASN.1 tag, then: the value of the Response-PDU's\
    \ error-\n               status field is set to `wrongEncoding', and the value\
    \ of\n               its error-index field is set to the index of the failed\n\
    \               variable binding.\n          (7)  Otherwise, if the variable binding's\
    \ value field\n               specifies a value which could under no circumstances\
    \ be\n               assigned to the variable, then: the value of the\n      \
    \    RFC 1448        Protocol Operations for SNMPv2      April 1993\n        \
    \       Response-PDU's error-status field is set to `wrongValue',\n          \
    \     and the value of its error-index field is set to the\n               index\
    \ of the failed variable binding.\n          (8)  Otherwise, if the variable binding's\
    \ name specifies a\n               variable which does not exist but can not be\
    \ created not\n               under the present circumstances (even though it\
    \ could be\n               created under other circumstances), then the value\
    \ of the\n               Response-PDU's error-status field is set to\n       \
    \        `inconsistentName', and the value of its error-index\n              \
    \ field is set to the index of the failed variable binding.\n          (9)  Otherwise,\
    \ if the variable binding's value field\n               specifies a value that\
    \ could under other circumstances be\n               assigned to the variable,\
    \ but is presently inconsistent,\n               then the value of the Response-PDU's\
    \ error-status field\n               is set to `inconsistentValue', and the value\
    \ of its\n               error-index field is set to the index of the failed\n\
    \               variable binding.\n          (10) Otherwise, if the assignment\
    \ of the value specified by\n               the variable binding's value field\
    \ to the specified\n               variable requires the allocation of a resource\
    \ which is\n               presently unavailable, then: the value of the Response-\n\
    \               PDU's error-status field is set to `resourceUnavailable',\n  \
    \             and the value of its error-index field is set to the\n         \
    \      index of the failed variable binding.\n          (11) If the processing\
    \ of the variable binding fails for a\n               reason other than listed\
    \ above, then the value of the\n               Response-PDU's error-status field\
    \ is set to `genErr', and\n               the value of its error-index field is\
    \ set to the index of\n               the failed variable binding.\n         \
    \ (12) Otherwise, the validation of the variable binding\n               succeeds.\n\
    \          At the end of the first phase, if the validation of all\n         \
    \ variable bindings succeeded, then:\n          The value of the Response-PDU's\
    \ error-status field is set to\n          `noError' and the value of its error-index\
    \ field is zero.\n          For each variable binding in the request, the named\
    \ variable\n          is created if necessary, and the specified value is assigned\n\
    \          RFC 1448        Protocol Operations for SNMPv2      April 1993\n  \
    \        to it.  Each of these variable assignments occurs as if\n          simultaneously\
    \ with respect to all other assignments specified\n          in the same request.\
    \  However, if the same variable is named\n          more than once in a single\
    \ request, with different associated\n          values, then the actual assignment\
    \ made to that variable is\n          implementation-specific.\n          If any\
    \ of these assignments fail (even after all the previous\n          validations),\
    \ then all other assignments are undone, and the\n          Response-PDU is modified\
    \ to have the value of its error-status\n          field set to `commitFailed',\
    \ and the value of its error-index\n          field set to the index of the failed\
    \ variable binding.\n          If and only if it is not possible to undo all the\
    \ assignments,\n          then the Response-PDU is modified to have the value\
    \ of its\n          error-status field set to `undoFailed', and the value of its\n\
    \          error-index field is set to zero.  Note that implementations\n    \
    \      are strongly encouraged to take all possible measures to avoid\n      \
    \    use of either `commitFailed' or `undoFailed' - these two\n          error-status\
    \ codes are not to be taken as license to take the\n          easy way out in\
    \ an implementation.\n          Finally, the generated Response-PDU is encapsulated\
    \ into a\n          message, and transmitted to the originator of the SetRequest-\n\
    \          PDU.\n          4.2.6.  The SNMPv2-Trap-PDU\n          A SNMPv2-Trap-PDU\
    \ is generated and transmitted by a SNMPv2\n          entity acting in an agent\
    \ role when an exceptional situation\n          occurs.\n          The destination(s)\
    \ to which a SNMPv2-Trap-PDU is sent is\n          determined by consulting the\
    \ aclTable [5] to find all entries\n          satisfying the following conditions:\n\
    \          (1)  The value of aclSubject refers to the SNMPv2 entity.\n       \
    \   (2)  The value of aclPrivileges allows for the SNMPv2-Trap-\n            \
    \   PDU.\n          (3)  aclResources refers to a SNMPv2 context denoting local\n\
    \               object resources, and the notification's administratively\n  \
    \             assigned name is present in the corresponding MIB view.\n      \
    \    RFC 1448        Protocol Operations for SNMPv2      April 1993\n        \
    \       (That is, the set of entries in the viewTable [5] for\n              \
    \ which the instance of viewIndex has the same value as the\n               aclResources's\
    \ contextViewIndex, define a MIB view which\n               contains the notification's\
    \ administratively assigned\n               name.)\n          (4)  If the OBJECTS\
    \ clause is present in the invocation of the\n               corresponding NOTIFICATION-TYPE\
    \ macro, then the\n               correspondent variables are all present in the\
    \ MIB view\n               corresponding to aclResource.\n          Then, for\
    \ each entry satisfying these conditions, a SNMPv2-\n          Trap-PDU is sent\
    \ from aclSubject with context aclResources to\n          aclTarget.  The instance\
    \ of snmpTrapNumbers [11] corresponding\n          to aclTarget is incremented,\
    \ and is used as the request-id\n          field of the SNMPv2-Trap-PDU.  Then,\
    \ the variable-bindings\n          field are constructed as:\n          (1)  The\
    \ first variable is sysUpTime.0 [9].\n          (2)  The second variable is snmpTrapOID.0\
    \ [11], which contains\n               the administratively assigned name of the\
    \ notification.\n          (3)  If the OBJECTS clause is present in the invocation\
    \ of the\n               corresponding NOTIFICATION-TYPE macro, then each\n  \
    \             corresponding variable is copied, in order, to the\n           \
    \    variable-bindings field.\n          (4)  At the option of the SNMPv2 entity\
    \ acting in an agent\n               role, additional variables may follow in\
    \ the variable-\n               bindings field.\n          4.2.7.  The InformRequest-PDU\n\
    \          An InformRequest-PDU is generated and transmitted at the\n        \
    \  request an application in a SNMPv2 entity acting in a manager\n          role,\
    \ that wishes to notify another application (in a SNMPv2\n          entity also\
    \ acting in a manager role) of information in the\n          MIB View of a party\
    \ local to the sending application.\n          The destination(s) to which an\
    \ InformRequest-PDU is sent is\n          determined by inspecting the snmpEventNotifyTable\
    \ [12], or as\n          specified by the requesting application.  The first two\n\
    \          variable bindings in the variable binding list of an\n          RFC\
    \ 1448        Protocol Operations for SNMPv2      April 1993\n          InformRequest-PDU\
    \ are sysUpTime.0 [9] and snmpEventID.i [12]\n          respectively.  If the\
    \ OBJECTS clause is present in the\n          invocation of the corresponding\
    \ NOTIFICATION-TYPE macro, then\n          each corresponding variable, as instantiated\
    \ by this\n          notification, is copied, in order, to the variable-bindings\n\
    \          field.\n          Upon receipt of an InformRequest-PDU, the receiving\
    \ SNMPv2\n          entity determines the size of a message encapsulating a\n\
    \          Response-PDU with the same values in its request-id, error-\n     \
    \     status, error-index and variable-bindings fields as the\n          received\
    \ InformRequest-PDU.  If the determined message size is\n          greater than\
    \ either a local constraint or the maximum message\n          size of the request's\
    \ source party, then an alternate\n          Response-PDU is generated, transmitted\
    \ to the originator of\n          the InformRequest-PDU, and processing of the\
    \ InformRequest-PDU\n          terminates immediately thereafter.  This alternate\
    \ Response-\n          PDU is formatted with the same values in its request-id\
    \ field\n          as the received InformRequest-PDU, with the value of its\n\
    \          error-status field set to `tooBig', the value of its error-\n     \
    \     index field set to zero, and an empty variable-bindings field.\n       \
    \   This alternate Response-PDU is then encapsulated into a\n          message.\
    \  If the size of the resultant message is less than or\n          equal to both\
    \ a local constraint and the maximum message size\n          of the request's\
    \ source party, it is transmitted to the\n          originator of the InformRequest-PDU.\
    \  Otherwise, the resultant\n          message is discarded.  Regardless, processing\
    \ of the\n          InformRequest-PDU terminates.\n          Otherwise, the receiving\
    \ SNMPv2 entity:\n          (1)  presents its contents to the appropriate SNMPv2\n\
    \               application;\n          (2)  generates a Response-PDU with the\
    \ same values in its\n               request-id and variable-bindings fields as\
    \ the received\n               InformRequest-PDU, with the value of its error-status\n\
    \               field is set to `noError' and the value of its error-\n      \
    \         index field is zero; and\n          (3)  transmits the generated Response-PDU\
    \ to the originator of\n               the InformRequest-PDU.\n          RFC 1448\
    \        Protocol Operations for SNMPv2      April 1993\n          5.  Acknowledgements\n\
    \          This document is based, in part, on RFC 1157.  The mechanism\n    \
    \      for bulk retrieval is influenced by many experiments,\n          including\
    \ RFC1187 and also Greg Satz's work on SNMP over TCP.\n          Finally, the\
    \ comments of the SNMP version 2 working group are\n          gratefully acknowledged:\n\
    \               Beth Adams, Network Management Forum\n               Steve Alexander,\
    \ INTERACTIVE Systems Corporation\n               David Arneson, Cabletron Systems\n\
    \               Toshiya Asaba\n               Fred Baker, ACC\n              \
    \ Jim Barnes, Xylogics, Inc.\n               Brian Bataille\n               Andy\
    \ Bierman, SynOptics Communications, Inc.\n               Uri Blumenthal, IBM\
    \ Corporation\n               Fred Bohle, Interlink\n               Jack Brown\n\
    \               Theodore Brunner, Bellcore\n               Stephen F. Bush, GE\
    \ Information Services\n               Jeffrey D. Case, University of Tennessee,\
    \ Knoxville\n               John Chang, IBM Corporation\n               Szusin\
    \ Chen, Sun Microsystems\n               Robert Ching\n               Chris Chiotasso,\
    \ Ungermann-Bass\n               Bobby A. Clay, NASA/Boeing\n               John\
    \ Cooke, Chipcom\n               Tracy Cox, Bellcore\n               Juan Cruz,\
    \ Datability, Inc.\n               David Cullerot, Cabletron Systems\n       \
    \        Cathy Cunningham, Microcom\n               James R. (Chuck) Davin, Bellcore\n\
    \               Michael Davis, Clearpoint\n               Mike Davison, FiberCom\n\
    \               Cynthia DellaTorre, MITRE\n               Taso N. Devetzis, Bellcore\n\
    \               Manual Diaz, DAVID Systems, Inc.\n               Jon Dreyer, Sun\
    \ Microsystems\n               David Engel, Optical Data Systems\n           \
    \    Mike Erlinger, Lexcel\n               Roger Fajman, NIH\n               Daniel\
    \ Fauvarque, Sun Microsystems\n               Karen Frisa, CMU\n          RFC\
    \ 1448        Protocol Operations for SNMPv2      April 1993\n               Shari\
    \ Galitzer, MITRE\n               Shawn Gallagher, Digital Equipment Corporation\n\
    \               Richard Graveman, Bellcore\n               Maria Greene, Xyplex,\
    \ Inc.\n               Michel Guittet, Apple\n               Robert Gutierrez,\
    \ NASA\n               Bill Hagerty, Cabletron Systems\n               Gary W.\
    \ Haney, Martin Marietta Energy Systems\n               Patrick Hanil, Nokia Telecommunications\n\
    \               Matt Hecht, SNMP Research, Inc.\n               Edward A. Heiner,\
    \ Jr., Synernetics Inc.\n               Susan E. Hicks, Martin Marietta Energy\
    \ Systems\n               Geral Holzhauer, Apple\n               John Hopprich,\
    \ DAVID Systems, Inc.\n               Jeff Hughes, Hewlett-Packard\n         \
    \      Robin Iddon, Axon Networks, Inc.\n               David Itusak\n       \
    \        Kevin M. Jackson, Concord Communications, Inc.\n               Ole J.\
    \ Jacobsen, Interop Company\n               Ronald Jacoby, Silicon Graphics, Inc.\n\
    \               Satish Joshi, SynOptics Communications, Inc.\n               Frank\
    \ Kastenholz, FTP Software\n               Mark Kepke, Hewlett-Packard\n     \
    \          Ken Key, SNMP Research, Inc.\n               Zbiginew Kielczewski,\
    \ Eicon\n               Jongyeoi Kim\n               Andrew Knutsen, The Santa\
    \ Cruz Operation\n               Michael L. Kornegay, VisiSoft\n             \
    \  Deirdre C. Kostik, Bellcore\n               Cheryl Krupczak, Georgia Tech\n\
    \               Mark S. Lewis, Telebit\n               David Lin\n           \
    \    David Lindemulder, AT&T/NCR\n               Ben Lisowski, Sprint\n      \
    \         David Liu, Bell-Northern Research\n               John Lunny, The Wollongong\
    \ Group\n               Robert C. Lushbaugh Martin, Marietta Energy Systems\n\
    \               Michael Luufer, BBN\n               Carl Madison, Star-Tek, Inc.\n\
    \               Keith McCloghrie, Hughes LAN Systems\n               Evan McGinnis,\
    \ 3Com Corporation\n               Bill McKenzie, IBM Corporation\n          \
    \     Donna McMaster, SynOptics Communications, Inc.\n               John Medicke,\
    \ IBM Corporation\n               Doug Miller, Telebit\n          RFC 1448   \
    \     Protocol Operations for SNMPv2      April 1993\n               Dave Minnich,\
    \ FiberCom\n               Mohammad Mirhakkak, MITRE\n               Rohit Mital,\
    \ Protools\n               George Mouradian, AT&T Bell Labs\n               Patrick\
    \ Mullaney, Cabletron Systems\n               Dan Myers, 3Com Corporation\n  \
    \             Rina Nathaniel, Rad Network Devices Ltd.\n               Hien V.\
    \ Nguyen, Sprint\n               Mo Nikain\n               Tom Nisbet\n      \
    \         William B. Norton, MERIT\n               Steve Onishi, Wellfleet Communications,\
    \ Inc.\n               David T. Perkins, SynOptics Communications, Inc.\n    \
    \           Carl Powell, BBN\n               Ilan Raab, SynOptics Communications,\
    \ Inc.\n               Richard Ramons, AT&T\n               Venkat D. Rangan,\
    \ Metric Network Systems, Inc.\n               Louise Reingold, Sprint\n     \
    \          Sam Roberts, Farallon Computing, Inc.\n               Kary Robertson,\
    \ Concord Communications, Inc.\n               Dan Romascanu, Lannet Data Communications\
    \ Ltd.\n               Marshall T. Rose, Dover Beach Consulting, Inc.\n      \
    \         Shawn A. Routhier, Epilogue Technology Corporation\n               Chris\
    \ Rozman\n               Asaf Rubissa, Fibronics\n               Jon Saperia,\
    \ Digital Equipment Corporation\n               Michael Sapich\n             \
    \  Mike Scanlon, Interlan\n               Sam Schaen, MITRE\n               John\
    \ Seligson, Ultra Network Technologies\n               Paul A. Serice, Corporation\
    \ for Open Systems\n               Chris Shaw, Banyan Systems\n              \
    \ Timon Sloane\n               Robert Snyder, Cisco Systems\n               Joo\
    \ Young Song\n               Roy Spitier, Sprint\n               Einar Stefferud,\
    \ Network Management Associates\n               John Stephens, Cayman Systems,\
    \ Inc.\n               Robert L. Stewart, Xyplex, Inc. (chair)\n             \
    \  Kaj Tesink, Bellcore\n               Dean Throop, Data General\n          \
    \     Ahmet Tuncay, France Telecom-CNET\n               Maurice Turcotte, Racal\
    \ Datacom\n               Warren Vik, INTERACTIVE Systems Corporation\n      \
    \         Yannis Viniotis\n          RFC 1448        Protocol Operations for SNMPv2\
    \      April 1993\n               Steven L. Waldbusser, Carnegie Mellon Universitty\n\
    \               Timothy M. Walden, ACC\n               Alice Wang, Sun Microsystems\n\
    \               James Watt, Newbridge\n               Luanne Waul, Timeplex\n\
    \               Donald E. Westlake III, Digital Equipment Corporation\n      \
    \         Gerry White\n               Bert Wijnen, IBM Corporation\n         \
    \      Peter Wilson, 3Com Corporation\n               Steven Wong, Digital Equipment\
    \ Corporation\n               Randy Worzella, IBM Corporation\n              \
    \ Daniel Woycke, MITRE\n               Honda Wu\n               Jeff Yarnell,\
    \ Protools\n               Chris Young, Cabletron\n               Kiho Yum, 3Com\
    \ Corporation\n          RFC 1448        Protocol Operations for SNMPv2      April\
    \ 1993\n          6.  References\n          [1]  Information processing systems\
    \ - Open Systems\n               Interconnection - Specification of Abstract Syntax\n\
    \               Notation One (ASN.1), International Organization for\n       \
    \        Standardization.  International Standard 8824, (December,\n         \
    \      1987).\n          [2]  Case, J., McCloghrie, K., Rose, M., and Waldbusser,\
    \ S.,\n               \"Structure of Management Information for version 2 of the\n\
    \               Simple Network Management Protocol (SNMPv2)\", RFC 1442,\n   \
    \            SNMP Research, Inc., Hughes LAN Systems, Dover Beach\n          \
    \     Consulting, Inc., Carnegie Mellon University, April 1993.\n          [3]\
    \  Galvin, J., and McCloghrie, K., \"Administrative Model for\n              \
    \ version 2 of the Simple Network Management Protocol\n               (SNMPv2)\"\
    , RFC 1445, Trusted Information Systems, Hughes\n               LAN Systems, April\
    \ 1993.\n          [4]  Case, J., McCloghrie, K., Rose, M., and Waldbusser, S.,\n\
    \               \"Textual Conventions for version 2 of the the Simple\n      \
    \         Network Management Protocol (SNMPv2)\", RFC 1443, SNMP\n           \
    \    Research, Inc., Hughes LAN Systems, Dover Beach\n               Consulting,\
    \ Inc., Carnegie Mellon University, April 1993.\n          [5]  McCloghrie, K.,\
    \ and Galvin, J., \"Party MIB for version 2\n               of the Simple Network\
    \ Management Protocol (SNMPv2)\", RFC\n               1447, Hughes LAN Systems,\
    \ Trusted Information Systems,\n               April 1993.\n          [6]  C.\
    \ Kent, J. Mogul, Fragmentation Considered Harmful,\n               Proceedings,\
    \ ACM SIGCOMM '87, Stowe, VT, (August 1987).\n          [7]  Case, J., McCloghrie,\
    \ K., Rose, M., and Waldbusser, S.,\n               \"Transport Mappings for version\
    \ 2 of the Simple Network\n               Management Protocol (SNMPv2)\", RFC\
    \ 1449, SNMP Research,\n               Inc., Hughes LAN Systems, Dover Beach Consulting,\
    \ Inc.,\n               Carnegie Mellon University, April 1993.\n          [8]\
    \  Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n               USC/Information\
    \ Sciences Institute, August 1980.\n          [9]  McCloghrie, K., and Rose, M.,\
    \ \"Management Information\n               Base for Network Management of TCP/IP-based\
    \ internets:\n               MIB-II\", STD 17, RFC 1213, March 1991.\n       \
    \   RFC 1448        Protocol Operations for SNMPv2      April 1993\n         \
    \ [10] Case, J., McCloghrie, K., Rose, M., and Waldbusser, S.,\n             \
    \  \"Coexistence between version 1 and version 2 of the\n               Internet-standard\
    \ Network Management Framework\", RFC\n               1452, SNMP Research, Inc.,\
    \ Hughes LAN Systems, Dover\n               Beach Consulting, Inc., Carnegie Mellon\
    \ University, April\n               1993.\n          [11] Case, J., McCloghrie,\
    \ K., Rose, M., and Waldbusser, S.,\n               \"Management Information Base\
    \ for version 2 of the Simple\n               Network Management Protocol (SNMPv2)\"\
    , RFC 1450, SNMP\n               Research, Inc., Hughes LAN Systems, Dover Beach\n\
    \               Consulting, Inc., Carnegie Mellon University, April 1993.\n  \
    \        [12] Case, J., McCloghrie, K., Rose, M., and Waldbusser, S.,\n      \
    \         \"Manager-to-Manager Management Information Base\", RFC\n          \
    \     1451, SNMP Research, Inc., Hughes LAN Systems, Dover\n               Beach\
    \ Consulting, Inc., Carnegie Mellon University, April\n               1993.\n\
    \          RFC 1448        Protocol Operations for SNMPv2      April 1993\n  \
    \        7.  Security Considerations\n          Security issues are not discussed\
    \ in this memo.\n          8.  Authors' Addresses\n               Jeffrey D. Case\n\
    \               SNMP Research, Inc.\n               3001 Kimberlin Heights Rd.\n\
    \               Knoxville, TN  37920-9716\n               US\n               Phone:\
    \ +1 615 573 1434\n               Email: case@snmp.com\n               Keith McCloghrie\n\
    \               Hughes LAN Systems\n               1225 Charleston Road\n    \
    \           Mountain View, CA  94043\n               US\n               Phone:\
    \ +1 415 966 7934\n               Email: kzm@hls.com\n               Marshall\
    \ T. Rose\n               Dover Beach Consulting, Inc.\n               420 Whisman\
    \ Court\n               Mountain View, CA  94043-2186\n               US\n   \
    \            Phone: +1 415 968 1052\n               Email: mrose@dbc.mtview.ca.us\n\
    \               Steven Waldbusser\n               Carnegie Mellon University\n\
    \               4910 Forbes Ave\n               Pittsburgh, PA  15213\n      \
    \         US\n               Phone: +1 412 268 6628\n               Email: waldbusser@cmu.edu\n"
