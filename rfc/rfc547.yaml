- title: __initial_text__
  contents:
  - "             Change to the Very Distant Host Specification\n   Attached is a\
    \ new version of figure F-4 for BBN Report 1822,\n   Specification for the Interconnection\
    \ of a Host and an IMP.  Also\n   attached is replacement text for the paragraph\
    \ beginning at the\n   bottom of page F-7 and continuing through page F-8.\n \
    \  Please put this RFC with your copy of 1822 pending update of 1822.\n   DCW/ph\n\
    \                   SPECIAL PACKET BIT ___\n      ___HELLO/I-HEARD-YOU BIT   \
    \        |      ___ UNUSED __\n     V                                   V    \
    \ V             V\n    _______________________________________________________________\n\
    \   |___|___|___|___|___|___|___|___|___|___|///|///|___|___|///|___|\n     ^\
    \   ^     PACKET WORD COUNT     ^               ^   ^       ^\n     |   |    \
    \     ( 6 BITS )        |               |   |       |\n     |  PACKET        \
    \          HOST/IMP BIT         |  CHANNEL ZERO\n     |  ODD/EVEN BIT        \
    \                         |  ACKNOWLEDGE BIT\n    LAST PACKET BIT            \
    \                    CHANNEL ONE\n                          FIG. F-4   CONTROL\
    \ WORD FORMAT\n   The following algorithm is used to decide whether the circuit\
    \ between\n   an IMP and a very distant Host is dead or alive.  We first define\n\
    \   what we call a special packet -- this is (logically) a one word\n   packet\
    \ consisting of only the control word and having the SPECIAL\n   PACKET bit set\
    \ to one.  All packets which are not special packets\n   (i.e., which are regular\
    \ data packets or null packets) have the\n   SPECIAL PACKET bit set to zero. \
    \ In a special packet, none of the\n   control word fields or bits have their\
    \ usual meanings; consequently,\n   a special packet cannot be used to acknowledge\
    \ data packets or send\n   data.  In a special packet, only one bit other than\
    \ the SPECIAL\n   PACKET bit has any meaning, the HELLO/I-HEARD-YOU bit.\n   Every\
    \ r seconds both IMP and Host (independently) send a HELLO\n   packet, a special\
    \ packet with the HELLO/I-HEARD-YOU bit set to zero.\n   When either IMP or Hosts\
    \ receives a HELLO packet, it must promptly\n   (with highest priority) send the\
    \ other an I-HEARD-YOU packet, a\n   special packet with the HELLO/I-HEAR-YOU\
    \ bit set to one.  In other\n   words, the I-HEARD-YOU packet is an acknowledgement\
    \ of the periodic\n   HELLO packet, and a I-HEARD-YOU packet must only be sent\
    \ as\n   acknowledgement for a HELLO packet.  If either IMP or Host sends more\n\
    \   than t HELLO packets without receiving an I-HEARD-YOU packet in\n   acknowledgement,\
    \ the IMP or Host declares the line dead.  Once either\n   IMP or Host declares\
    \ the line dead, it must send or accept no packets\n   (either special or regular)\
    \ for 2*t*r* seconds to allow the other\n   party also to declare the line dead.\
    \  After waiting 2*t*r* seconds,\n   an attempt is made to bring the line alive.\
    \  This is done by sending\n   HELLO packets (but no regular packets) every r\
    \ seconds while noting\n   received I-HEARD-YOU packets until k HELLO packets\
    \ in a row are\n   acknowledged with I-HEARD-YOU packets.  While doing this, received\n\
    \   HELLO packets must be acknowledged with I-HEARD-YOU packets.  Once\n   acknowledgement\
    \ for k HELLO packets have been received in a row\n   (i.e., one acknowledgement\
    \ every r seconds for k intervals[1]), the\n   line is declared alive, and regular\
    \ packets again may be sent,\n   received, and acknowledged along with the periodic\
    \ (every r seconds)\n   HELLO packets.  If a regular data packet is received while\
    \ a party is\n   trying to bring the line up (due perhaps to slight timing differences\n\
    \   between the parties at the ends of the line), the data packet must\n   not\
    \ be acknowledged.\n   The odd/even bits, the used/unused bits, and the channel\
    \ filling and\n   emptying sequences must be initialized at start up[2] and\n\
    \   reinitialized every time the line is declared dead.  If either the\n   IMP\
    \ or Host decides the line is dead, the same action is taken as the\n   IMP or\
    \ Host normally takes when the other's ready line is down.  The\n   line being\
    \ up causes the same action as is normally taken when the\n   ready line is up.\
    \  The value of r is currently 1.25 seconds, the\n   value of t is currently 4,\
    \ and the value of k is currently also 4.\n   It is likely that the values of\
    \ r, t, and k will be adjusted in the\n   future; very distant Host programmers\
    \ are advised to make it easy to\n   change these parameters.\n"
- title: Endnotes
  contents:
  - "Endnotes\n   [1] In particular, the IMP implementation requires the receipt of\
    \ an\n   acknowledgement within r seconds of the transmission of a HELLO\n   packet\
    \ in order to consider that the HELLO packet was successfully\n   acknowledged.\n\
    \   [2] At start-up, the line must be assumed to be dead and the\n   procedure\
    \ of waiting 2*t*r* seconds before sending HELLO packets,\n   etc. must be used\
    \ to bring the line alive initially.\n         [ This RFC was put into machine\
    \ readable form for entry ]\n          [ into the online RFC archives by Jeff\
    \ McClellan 1/98 ]\n"
