- title: __initial_text__
  contents:
  - "                          National Institute of Standards and Technology\n  \
    \    Software Inventory Message and Attributes (SWIMA) for PA-TNC\n"
- title: Abstract
  contents:
  - "Abstract\n   This document extends \"PA-TNC: A Posture Attribute (PA) Protocol\n\
    \   Compatible with Trusted Network Connect (TNC)\" (RFC 5792) by\n   providing\
    \ specific attributes and message exchanges to allow\n   endpoints to report their\
    \ installed software inventory information to\n   a NEA Server, as defined in\
    \ \"Network Endpoint Assessment (NEA):\n   Overview and Requirements\" (RFC 5209).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8412.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Network Endpoint Assessment (NEA) ..........................6\n  \
    \    1.2. Conventions Used in This Document ..........................7\n    \
    \  1.3. Definitions ................................................7\n   2. Background\
    \ ......................................................8\n      2.1. Supported\
    \ Use Cases ........................................8\n           2.1.1. Use Software\
    \ Inventory as an Access Control Factor ..8\n           2.1.2. Central Stores\
    \ of Up-to-Date Endpoint\n                  Software Inventory Data .............................9\n\
    \           2.1.3. PA-TNC Use Cases ....................................9\n  \
    \    2.2. Use Cases That Are Not Supported ...........................9\n    \
    \  2.3. SWIMA Requirements ........................................10\n      2.4.\
    \ Non-SWIMA Requirements ....................................11\n      2.5. Assumptions\
    \ ...............................................12\n      2.6. Assumptions Not\
    \ Made ......................................12\n   3. System Requirements ............................................12\n\
    \      3.1. Data Sources ..............................................13\n  \
    \    3.2. Data Models ...............................................14\n    \
    \  3.3. Basic Attribute Exchange ..................................16\n      3.4.\
    \ Core Software-Reporting Information .......................17\n           3.4.1.\
    \ Software Identifiers ...............................17\n           3.4.2. Data\
    \ Model Type ....................................19\n           3.4.3. Record\
    \ Identifiers .................................19\n           3.4.4. Software\
    \ Locators ..................................20\n           3.4.5. Source Identifiers\
    \ .................................21\n           3.4.6. Using Software and Record\
    \ Identifiers in\n                  SWIMA Attributes ...................................22\n\
    \      3.5. Targeted Requests .........................................22\n  \
    \    3.6. Monitoring Changes in an Endpoint's Software\n           Inventory Evidence\
    \ Collection .............................23\n      3.7. Reporting Change Events\
    \ ...................................26\n           3.7.1. Event Identifiers ..................................27\n\
    \           3.7.2. Core Event-Tracking Information ....................28\n  \
    \         3.7.3. Updating Inventory Knowledge Based on Events .......29\n    \
    \       3.7.4. Using Event Records in SWIMA Attributes ............29\n      \
    \     3.7.5. Partial and Complete Lists of Event Records\n                  in\
    \ SWIMA Attributes ................................30\n           3.7.6. Synchronizing\
    \ Event Identifiers and Epochs .........32\n      3.8. Subscriptions .............................................33\n\
    \           3.8.1. Establishing Subscriptions .........................34\n  \
    \         3.8.2. Managing Subscriptions .............................35\n    \
    \       3.8.3. Terminating Subscriptions ..........................36\n      \
    \     3.8.4. Subscription Status ................................36\n        \
    \   3.8.5. Fulfilling Subscriptions ...........................37\n          \
    \        3.8.5.1. Subscriptions That Report Inventories .....38\n            \
    \      3.8.5.2. Subscriptions That Report Events ..........38\n              \
    \    3.8.5.3. Targeted Subscriptions ....................40\n                \
    \  3.8.5.4. No Subscription Consolidation .............40\n                  3.8.5.5.\
    \ Delayed Subscription Fulfillment ..........41\n      3.9. Error Handling ............................................41\n\
    \   4. Protocol .......................................................43\n  \
    \    4.1. Direct Response to a SWIMA Request ........................44\n    \
    \  4.2. Subscription-Based Response ...............................45\n      4.3.\
    \ Required Exchanges ........................................45\n   5. Software\
    \ Inventory Messages and Attributes .....................46\n      5.1. PA Subtype\
    \ (aka PA-TNC Component Type) ....................46\n      5.2. SWIMA Attribute\
    \ Overview ..................................46\n      5.3. Message Diagram Syntax\
    \ ....................................48\n      5.4. Normalization of Text Encoding\
    \ ............................49\n      5.5. Request IDs ...............................................49\n\
    \      5.6. SWIMA Request .............................................50\n  \
    \    5.7. Software Identifier Inventory .............................54\n    \
    \  5.8. Software Identifier Events ................................58\n      5.9.\
    \ Software Inventory ........................................64\n      5.10. Software\
    \ Events ..........................................67\n      5.11. Subscription\
    \ Status Request ..............................72\n      5.12. Subscription Status\
    \ Response .............................73\n      5.13. Source Metadata Request\
    \ ..................................75\n      5.14. Source Metadata Response .................................76\n\
    \      5.15. PA-TNC Error as Used by SWIMA ............................78\n  \
    \         5.15.1. SWIMA_ERROR, SWIMA_SUBSCRIPTION_DENIED_ERROR, and\n        \
    \           SWIMA_SUBSCRIPTION_ID_REUSE_ERROR Information .....81\n          \
    \ 5.15.2. SWIMA_RESPONSE_TOO_LARGE_ERROR Information ........83\n           5.15.3.\
    \ SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR Information ..85\n   6. Supported Data\
    \ Models ..........................................87\n      6.1. ISO 2015 SWID\
    \ Tags Using XML ..............................87\n           6.1.1. Guidance\
    \ on Normalizing Source Data to ISO 2015\n                  SWID Tags Using XML\
    \ ................................87\n           6.1.2. Guidance on Creation of\
    \ Software Identifiers from\n                  ISO 2015 SWID Tags .................................88\n\
    \      6.2. ISO 2009 SWID Tags Using XML ..............................88\n  \
    \         6.2.1. Guidance on Normalizing Source Data to ISO 2009\n           \
    \       SWID Tags Using XML ................................88\n           6.2.2.\
    \ Guidance on Creation of Software Identifiers from\n                  ISO 2009\
    \ SWID Tags .................................89\n   7. Relationship to Other Specifications\
    \ ...........................89\n   8. Security Considerations ........................................90\n\
    \      8.1. Evidentiary Value of Software Inventory Evidence Records ..90\n  \
    \    8.2. Sensitivity of Collected Records ..........................91\n    \
    \  8.3. Integrity of Endpoint Records .............................92\n      8.4.\
    \ SWIMA-PC Access Permissions ...............................92\n      8.5. Sanitization\
    \ of Record Fields .............................93\n      8.6. PA-TNC Security\
    \ Threats ...................................93\n   9. Privacy Considerations\
    \ .........................................93\n   10. IANA Considerations ...........................................94\n\
    \      10.1. Guidance for the Designated Experts ......................94\n  \
    \    10.2. PA Subtypes ..............................................95\n    \
    \  10.3. PA-TNC Attribute Types ...................................96\n      10.4.\
    \ PA-TNC Error Codes .......................................97\n      10.5. Software\
    \ Data Model Types ................................97\n   11. References ....................................................98\n\
    \      11.1. Normative References .....................................98\n  \
    \    11.2. Informative References ...................................99\n   Authors'\
    \ Addresses ...............................................101\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Knowing the list of software installed on endpoints is useful\
    \ to\n   understand and maintain the security state of a network.  For\n   example,\
    \ if an enterprise policy requires the presence of certain\n   software and prohibits\
    \ the presence of other software, reported\n   software installation information\
    \ can be used to indicate compliance\n   and non-compliance with these requirements.\
    \  Endpoint software\n   installation inventory lists (hereinafter \"software\
    \ inventories\") can\n   further be used to determine an endpoint's exposure to\
    \ attack based\n   on comparison of vulnerability or threat alerts against identified\n\
    \   software's patch-level data.  These are some of the highly useful\n   management\
    \ use cases supported by software inventory data.\n   Software Inventory Message\
    \ and Attributes (SWIMA) for PA-TNC (see\n   \"PA-TNC: A Posture Attribute (PA)\
    \ Protocol Compatible with Trusted\n   Network Connect (TNC)\" [RFC5792]) provides\
    \ a standardized method for\n   exchanging software inventory data that includes\
    \ a unique Software\n   Identifier associated with a specific version of a software\
    \ product.\n   SWIMA can also convey metadata about software products beyond this\n\
    \   identifier.  SWIMA enables software identification, installation, and\n  \
    \ characterization information to be transported to a central server\n   from\
    \ any endpoint that supports this specification.  Such information\n   can come\
    \ from multiple sources, including tag files (such as ISO\n   Software Identification\
    \ (SWID) tags [SWID15]), reports from\n   third-party inventory tools, output\
    \ from package managers, and other\n   sources.  SWIMA does not standardize how\
    \ software is detected,\n   instead relying on a set of \"data sources\" to provide\
    \ information\n   about installed software.  SWIMA provides a flexible transport\n\
    \   capable of conveying this information, regardless of how it is\n   expressed.\n\
    \   This specification is designed to only report software that is\n   installed\
    \ on a target endpoint.  In particular, it does not monitor\n   or report information\
    \ about what software is running on the endpoint.\n   Likewise, it is not intended\
    \ to report individual files, libraries,\n   installation packages, or similar\
    \ artifacts.  While all of this\n   information has its uses, this information\
    \ requires different\n   metadata and monitoring methods.  As a result, this specification\n\
    \   focuses solely on software inventory information, leaving the\n   reporting\
    \ of other classes of endpoint information to other\n   specifications.\n   Note\
    \ that while this specification focuses on \"software inventory\",\n   the mechanisms\
    \ it describes could also be used to convey information\n   about firmware and\
    \ operating systems associated with an endpoint.\n   The focus on software throughout\
    \ this document should not be read as\n   excluding the use of SWIMA for these\
    \ other purposes.\n   This specification defines a new set of PA-TNC attributes;\
    \ these\n   attributes are used to communicate requests for software inventory\n\
    \   information and software installation change events.  The exchange of\n  \
    \ these messages allows software inventory information to be sent to a\n   Network\
    \ Endpoint Assessment (NEA) Server, which can make this\n   information available\
    \ to other applications.\n   Part of the motivation for the development of SWIMA\
    \ was to support\n   the IETF's Security Automation and Continuous Monitoring\
    \ (SACM)\n   architecture.  More details about SWIMA's role in SACM appear in\n\
    \   Section 7.  However, SWIMA has no dependencies on any part of SACM\n   and\
    \ is usable wherever the NEA architecture is employed.\n"
- title: 1.1.  Network Endpoint Assessment (NEA)
  contents:
  - "1.1.  Network Endpoint Assessment (NEA)\n   SWIMA defines extensions to the PA-TNC\
    \ specification [RFC5792]; these\n   extensions are part of the NEA architecture.\
    \  The NEA specifications\n   define an open solution architecture that enables\
    \ network operators\n   to collect and utilize information about endpoint configuration\
    \ and\n   state.  This information can be used to enforce policies and monitor\n\
    \   endpoint health, among many other activities.  Information about the\n   software\
    \ present on an endpoint is an important consideration for\n   such activities.\
    \  The new PA-TNC attributes defined in this document\n   are used to communicate\
    \ software inventory evidence, collected from a\n   range of possible sources,\
    \ from the Posture Collector on the endpoint\n   to the Posture Validator on a\
    \ NEA Server using the PA-TNC interface,\n   as shown in Figure 1 below.\n   \
    \    +-------------+                          +--------------+\n       |  Posture\
    \    |   <--------PA-------->   |   Posture    |\n       |  Collectors |     \
    \                     |   Validators |\n       |  (1 .. N)   |               \
    \           |   (1 .. N)   |\n       +-------------+                         \
    \ +--------------+\n             |                                         |\n\
    \             |                                         |\n             |    \
    \                                     |\n       +-------------+              \
    \            +--------------+\n       |   Posture   |                        \
    \  |   Posture    |\n       |   Broker    |   <--------PB-------->   |   Broker\
    \     |\n       |   Client    |                          |   Server     |\n  \
    \     +-------------+                          +--------------+\n            \
    \ |                                         |\n             |                \
    \                         |\n       +-------------+                          +--------------+\n\
    \       |   Posture   |                          |   Posture    |\n       |  \
    \ Transport |   <--------PT-------->   |   Transport  |\n       |   Client   \
    \ |                          |   Server     |\n       |   (1 .. N)  |        \
    \                  |   (1 .. N)   |\n       +-------------+                  \
    \        +--------------+\n          NEA CLIENT                              \
    \ NEA SERVER\n                       Figure 1: NEA Reference Model\n   To better\
    \ understand this specification, the reader should review the\n   NEA reference\
    \ architecture as described in \"Network Endpoint\n   Assessment (NEA): Overview\
    \ and Requirements\" [RFC5209].  The reader\n   should also review the PA-TNC\
    \ interfaces as defined in RFC 5792\n   [RFC5792].\n   This document is based\
    \ on standards published by the Trusted\n   Computing Group's Trusted Network\
    \ Communications (TNC) workgroup (see\n   <https://trustedcomputinggroup.org/>).\
    \  The TNC and NEA architectures\n   are interoperable, and many components are\
    \ equivalent.\n"
- title: 1.2.  Conventions Used in This Document
  contents:
  - "1.2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,\
    \ they appear in all\n   capitals, as shown here.\n"
- title: 1.3.  Definitions
  contents:
  - "1.3.  Definitions\n   This section defines terms that have special meaning within\
    \ this\n   document.\n   o  SWIMA-PC - A NEA Posture Collector (PC) that interprets\
    \ SWIMA\n      attributes sent by SWIMA-PVs and that conforms to this\n      specification.\
    \  Note that such a Posture Collector might also\n      support other PA-TNC exchanges\
    \ beyond those defined herein.\n   o  SWIMA-PV - A NEA Posture Validator (PV)\
    \ that interprets SWIMA\n      attributes sent by SWIMA-PCs and that conforms\
    \ to this\n      specification.  Note that such a Posture Validator might also\n\
    \      support other PA-TNC exchanges beyond those defined herein.\n   o  SWIMA\
    \ Attribute - A PA-TNC attribute (as defined in RFC 5792\n      [RFC5792]) whose\
    \ structure and behavior is defined in this\n      specification.\n   o  Endpoint's\
    \ Software Inventory Evidence Collection - The set of\n      information regarding\
    \ the set of software installed on an\n      endpoint.  An endpoint's Software\
    \ Inventory Evidence Collection\n      might include information created by or\
    \ derived from multiple\n      sources, including but not limited to SWID tag\
    \ files deposited on\n      the filesystem during software installation, information\
    \ generated\n      by software discovery tools, and information dynamically generated\n\
    \      by a software or package management system on an endpoint.\n   o  Software\
    \ Inventory Evidence Record - Part of the endpoint's\n      Software Inventory\
    \ Evidence Collection (which is composed of\n      \"records\").  Each record\
    \ corresponds to one installed instance of\n      a particular software product\
    \ as reported by some data source.  It\n      is possible for a single installed\
    \ instance to have multiple\n      Software Inventory Evidence Records in an endpoint's\
    \ Software\n      Inventory Evidence Collection -- this can happen if multiple\n\
    \      sources all report the same software installation instance.\n   o  Software\
    \ Identifier - A string associated with a specific version\n      of a specific\
    \ software product.  These identifiers are derived\n      from the records used\
    \ to describe software products.  SWIMA does\n      not limit the formats of these\
    \ records, nor does it enforce that\n      all data sources populate records using\
    \ the same format.  As such,\n      while each Software Identifier uniquely identifies\
    \ a specific\n      software product, the same software product might be associated\n\
    \      with multiple Software Identifiers reflecting differences between\n   \
    \   different data sources and supported record formats.\n"
- title: 2.  Background
  contents:
  - '2.  Background

    '
- title: 2.1.  Supported Use Cases
  contents:
  - "2.1.  Supported Use Cases\n   This section describes the use cases supported\
    \ by this specification.\n   The primary use of exchanging software inventory\
    \ information over the\n   PA-TNC interface is to enable a challenger (e.g., a\
    \ NEA Server) to\n   obtain inventory evidence about some system in a way that\
    \ conforms to\n   NEA procedures.  Collected software information can support\
    \ a range\n   of security activities, including determining whether an endpoint\
    \ is\n   permitted to connect to the enterprise, determining which endpoints\n\
    \   contain software that requires patching, and similar activities.\n"
- title: 2.1.1.  Use Software Inventory as an Access Control Factor
  contents:
  - "2.1.1.  Use Software Inventory as an Access Control Factor\n   Some enterprises\
    \ might define security policies that require\n   connected endpoints to have\
    \ certain pieces of security software\n   installed.  By contrast, some security\
    \ policies might prevent access\n   to resources by endpoints that have certain\
    \ prohibited pieces of\n   software installed, since such applications might pose\
    \ a security\n   risk.  To support such policies, the NEA Server needs to collect\n\
    \   software inventory evidence from a target endpoint that is seeking to\n  \
    \ initiate or continue connectivity to the enterprise resource.\n   Based on this\
    \ specification, the SWIMA-PC can provide a complete or\n   partial inventory\
    \ to the SWIMA-PV as required to determine policy\n   compliance.  The SWIMA-PV\
    \ can then use this as evidence of compliance\n   or non-compliance to make a\
    \ policy-based access decision.\n"
- title: 2.1.2.  Central Stores of Up-to-Date Endpoint Software Inventory Data
  contents:
  - "2.1.2.  Central Stores of Up-to-Date Endpoint Software Inventory Data\n   Many\
    \ tools use information about an endpoint's software inventory to\n   monitor\
    \ and enforce the security of a network.  For example, a\n   software-patching\
    \ tool needs to determine if there is out-of-date\n   software installed that\
    \ needs to be updated.  A vulnerability\n   management tool needs to identify\
    \ endpoints with known vulnerable\n   software installed (patched or otherwise)\
    \ to gauge an endpoint's\n   relative exposure to attack.  A license management\
    \ tool needs to\n   verify that all installed software within the enterprise is\
    \ accounted\n   for.  A central repository representing an up-to-date understanding\n\
    \   of each endpoint's software inventory facilitates these activities.\n   Multiple\
    \ tools can share such a repository, ensuring that software\n   inventory information\
    \ is collected more frequently and efficiently,\n   leading to a more complete\
    \ and consistent understanding of installed\n   software state as compared to\
    \ each tool collecting the same inventory\n   information from endpoints individually.\n\
    \   This specification supports these activities through a number of\n   mechanisms.\
    \  As noted above, a SWIMA-PC can provide a complete list\n   of software present\
    \ in an endpoint's Software Inventory Evidence\n   Collection to the SWIMA-PV,\
    \ which can then pass this information on\n   to a central repository, such as\
    \ a Configuration Management Database\n   (CMDB) or similar application.  In addition,\
    \ SWIMA-PCs are required\n   to be able to monitor for changes to an endpoint's\
    \ Software Inventory\n   Evidence Collection in near real time and can be requested\
    \ to\n   immediately push reports of detected changes to the SWIMA-PV.  Thus,\n\
    \   any central repository fed by a SWIMA-PV receiving inventory\n   information\
    \ can be updated quickly after a change occurs.  Keeping a\n   central repository\
    \ synchronized with current software inventory\n   information in this way allows\
    \ tools to make efficient decisions\n   based on up-to-date, consistent information.\n"
- title: 2.1.3.  PA-TNC Use Cases
  contents:
  - "2.1.3.  PA-TNC Use Cases\n   SWIMA is intended to operate over the PA-TNC interface\
    \ and, as such,\n   is intended to meet the use cases set out in the PA-TNC\n\
    \   specification.\n"
- title: 2.2.  Use Cases That Are Not Supported
  contents:
  - "2.2.  Use Cases That Are Not Supported\n   Some use cases not covered by this\
    \ specification include:\n   o  Addressing how the endpoint's Software Inventory\
    \ Evidence\n      Collection is populated.  In particular, NEA components are\
    \ not\n      expected to perform software discovery activities beyond compiling\n\
    \      information in an endpoint's Software Inventory Evidence\n      Collection.\
    \  This collection might come from multiple sources on\n      the endpoint (e.g.,\
    \ information generated dynamically by package\n      management tools or discovery\
    \ tools, as well as SWID tag files\n      discovered on the filesystem).  While\
    \ an enterprise might make use\n      of software discovery capabilities to identify\
    \ installed software,\n      such capabilities are outside the scope of this specification.\n\
    \   o  Converting inventory information expressed in a proprietary format\n  \
    \    into formats used in the attributes described in this\n      specification.\
    \  Instead, this specification focuses exclusively on\n      defining interfaces\
    \ for the transportation of software\n      information, expecting that reporting\
    \ tools will converge around\n      some set of standardized formats for this\
    \ information.\n   o  Mechanisms for a Posture Validator to request a specific\
    \ list of\n      software information based on arbitrary software properties.\
    \  For\n      example, requesting only information about software from a\n   \
    \   particular vendor is not supported.  After the endpoint's Software\n     \
    \ Inventory Evidence Collection has been copied to some central\n      location,\
    \ such as the CMDB, processes there can perform queries\n      based on any criteria\
    \ present in the collected information, but\n      this specification does not\
    \ address using such queries to\n      constrain the initial collection of this\
    \ information from the\n      endpoint.\n   o  Use of properties of certain sources\
    \ of software information that\n      might facilitate local tests (i.e., on the\
    \ endpoint) of endpoint\n      state.  For example, the optional package_footprint\
    \ field of an\n      ISO SWID tag can contain a list of files and hash values\n\
    \      associated with the software indicated by the tag.  Tools on the\n    \
    \  endpoint can use the values in this field to test for the presence\n      of\
    \ the indicated files.  Successful evaluation of such tests leads\n      to greater\
    \ assurance that the indicated software is present on the\n      endpoint.  Currently,\
    \ most SWID tag creators do not provide values\n      for tag fields that support\
    \ local testing.  For this reason, the\n      added complexity of supporting endpoint\
    \ testing using these fields\n      is out of scope for this specification, but\
    \ this topic may be\n      considered in a future version.\n"
- title: 2.3.  SWIMA Requirements
  contents:
  - "2.3.  SWIMA Requirements\n   Below are the requirements that SWIMA must meet\
    \ in order to\n   successfully play its role in the NEA architecture.\n   Efficient:\
    \  The NEA architecture enables delay of network access\n      until the endpoint\
    \ is determined not to pose a security threat to\n      the network, based on\
    \ its asserted integrity information.  To\n      minimize user frustration, SWIMA\
    \ ought to minimize overhead delays\n      and make PA-TNC communications as rapid\
    \ and efficient as possible.\n   Scalable:  SWIMA needs to be usable in enterprises\
    \ that contain tens\n      of thousands of endpoints or more.  As such, it needs\
    \ to allow\n      security tools to make decisions based on up-to-date information\n\
    \      about an endpoint's software inventory without creating an\n      excessive\
    \ burden on the enterprise's network.\n   Support precise and complete historical\
    \ reporting:  This\n      specification outlines capabilities that support real-time\n\
    \      understanding of the state of endpoints in a network in a way that\n  \
    \    can be used by other tools.  One means of facilitating such an\n      outcome\
    \ is for a CMDB to be able to contain information about all\n      endpoints connected\
    \ to the enterprise for all points in time\n      between the endpoint's first\
    \ connection and the present.  In such\n      a scenario, it is necessary that\
    \ any SWIMA-PC be able to report\n      any changes to its Software Inventory\
    \ Evidence Collection in near\n      real time while connected and, upon reconnection\
    \ to the\n      enterprise, be able to update the NEA Server (and, through it,\
    \ the\n      CMDB) with regard to the state of its Software Inventory Evidence\n\
    \      Collection throughout the entire interval when it was not\n      connected.\n"
- title: 2.4.  Non-SWIMA Requirements
  contents:
  - "2.4.  Non-SWIMA Requirements\n   There are certain capabilities that users of\
    \ SWIMA might require but\n   that are beyond the scope of SWIMA itself and need\
    \ to be addressed by\n   other standards.\n   Confidentiality:  SWIMA does not\
    \ define a mechanism for\n      confidentiality, nor is confidentiality automatically\
    \ provided by\n      using the PA-TNC interface.  In the NEA architecture,\n \
    \     confidentiality is generally provided by the underlying transport\n    \
    \  protocols, such as the PT binding to TLS [RFC6876] or PT-EAP\n      (Posture\
    \ Transport for Tunneled Extensible Authentication Protocol\n      (EAP) Methods)\
    \ [RFC7171]; see Section 7 for more information on\n      related standards. \
    \ The information conveyed by SWIMA is often\n      sensitive in nature for both\
    \ security (Section 8) and privacy\n      (Section 9) reasons.  Those who implement\
    \ SWIMA need to ensure\n      that appropriate NEA transport mechanisms are employed\
    \ to meet\n      confidentiality requirements.\n"
- title: 2.5.  Assumptions
  contents:
  - "2.5.  Assumptions\n   The Posture Broker Client and Posture Broker Server are\
    \ assumed to\n   provide reliable delivery for PA-TNC messages and attributes\
    \ sent\n   between the SWIMA-PCs and the SWIMA-PVs.  \"Reliable delivery\" means\n\
    \   that either a message is delivered or the sender is made aware of the\n  \
    \ delivery failure.  In the event that reliable delivery cannot be\n   provided,\
    \ some SWIMA features, primarily subscriptions, might not\n   behave as expected.\n"
- title: 2.6.  Assumptions Not Made
  contents:
  - "2.6.  Assumptions Not Made\n   This specification explicitly does not assume\
    \ that software inventory\n   information exchanges reflect the software installation\
    \ state of the\n   endpoint.  This specification does not attempt to detect when\
    \ the\n   endpoint is providing false information, either through malice or\n\
    \   error, but instead focuses on correctly and reliably providing the\n   reported\
    \ Software Inventory Evidence Collection to the NEA Server.\n   Tools that employ\
    \ the SWIMA standard can include methods to help\n   verify the accuracy of reports,\
    \ but how those tools do so is beyond\n   the scope of this specification.\n \
    \  Similarly, this specification makes no assumption about the\n   completeness\
    \ of the Software Inventory Evidence Collection's coverage\n   of the total set\
    \ of software installed on the endpoint.  It is\n   possible, and even likely,\
    \ that some installed software is not\n   represented by a record in an endpoint's\
    \ Software Inventory Evidence\n   Collection.  Instead, SWIMA ensures that what\
    \ does get reported is\n   reported consistently and that the software products\
    \ that are\n   reported can be reliably tracked.\n   See Section 8 for more on\
    \ this security consideration.\n"
- title: 3.  System Requirements
  contents:
  - "3.  System Requirements\n   SWIMA facilitates the exchange of software inventory\
    \ and event\n   information.  Specifically, each application supporting SWIMA\n\
    \   includes a component known as the SWIMA-PC that receives SWIMA\n   attributes.\
    \  The SWIMA-PC is also responsible for sending appropriate\n   SWIMA attributes\
    \ back to the SWIMA-PV in response.  This section\n   outlines what software inventories\
    \ and events are and the\n   requirements on SWIMA-PCs and SWIMA-PVs in order\
    \ to support the\n   stated use cases of this specification.\n"
- title: 3.1.  Data Sources
  contents:
  - "3.1.  Data Sources\n   The records in an endpoint's Software Inventory Evidence\
    \ Collection\n   come from one or more \"sources\".  A source represents one collection\n\
    \   of software inventory information about the endpoint.  Examples of\n   sources\
    \ include, but are not limited to, ISO SWID tags deposited on\n   the filesystem\
    \ and collected therefrom, information derived from\n   package managers, and\
    \ the output of software inventory-scanning\n   tools.\n   There is no expectation\
    \ that any one source of inventory information\n   will have either perfect or\
    \ complete software inventory information.\n   For this reason, this specification\
    \ supports the simultaneous use of\n   multiple sources of software inventory\
    \ information.  Each source\n   might have its own \"sphere of expertise\" and\
    \ report the software\n   within that sphere.  For example, a package manager\
    \ would have an\n   excellent understanding of the software that it managed but\
    \ would not\n   necessarily have any information about software installed via\
    \ other\n   means.\n   A SWIMA-PC is not required to utilize every possible source\
    \ of\n   software information on its endpoint.  Some SWIMA-PCs might be\n   explicitly\
    \ tied only to one or a handful of software inventory\n   sources, or a given\
    \ SWIMA-PC could be designed to dynamically\n   accommodate new sources.  For\
    \ all software inventory evidence sources\n   that a particular SWIMA-PC supports,\
    \ it MUST completely support all\n   requirements of this specification with regard\
    \ to those sources.  A\n   potential source that cannot support some set of required\n\
    \   functionality (e.g., it is unable to monitor the software it reports\n   for\
    \ change events, as discussed in Section 3.6) MUST NOT be used as a\n   source\
    \ of endpoint software inventory information, even if it could\n   provide some\
    \ information.  In other words, a source either supports\n   full functionality\
    \ as described in this specification or cannot be\n   used at all.  In the event\
    \ that a previously used source becomes\n   unavailable, this would be treated\
    \ as a discontinuity in the\n   SWIMA-PC's reporting.  Section 3.7.1 describes\
    \ how to use changes in\n   the Event Identifier (EID) Epoch value to indicate\
    \ a reporting\n   discontinuity.\n   When sending information about installed\
    \ software, the SWIMA-PC MUST\n   include the complete set of relevant data from\
    \ all supported sources\n   of software inventory evidence.  In other words, sources\
    \ need to be\n   used consistently.  This is because if a particular source is\n\
    \   included in an initial inventory but excluded from a later inventory,\n  \
    \ the SWIMA-PV receiving this information might reasonably conclude\n   that the\
    \ software reported by that source was no longer installed on\n   the endpoint.\
    \  As such, it is important that all supported sources be\n   used every time\
    \ the SWIMA-PC provides information to a SWIMA-PV.\n   Note that if a SWIMA-PC\
    \ collects data from multiple sources, it is\n   possible that some software products\
    \ might be \"double counted\".  This\n   can happen if two or more sources of\
    \ inventory evidence provide a\n   record for a single installation of a software\
    \ product.  When a\n   SWIMA-PC reports information or records events from multiple\n\
    \   inventory evidence sources, it MUST use the information those sources\n  \
    \ provide, rather than attempt to perform some form of reduction.  In\n   other\
    \ words, if multiple sources report records corresponding to a\n   single installation\
    \ of a software product, all such records from each\n   source are required to\
    \ be part of the SWIMA-PC's processing even if\n   this might lead to multiple\
    \ reporting, and the SWIMA-PC is not to\n   ignore some records to avoid such\
    \ multiple reporting.\n   All inventory records reported by a SWIMA-PC include\
    \ a Source\n   Identifier linking them to a particular source.  Source Identifiers\n\
    \   are discussed more in Section 3.4.5.  As discussed in that section,\n   Source\
    \ Identifiers can help consumers of SWIMA data identify cases of\n   multiple\
    \ reporting.\n"
- title: 3.2.  Data Models
  contents:
  - "3.2.  Data Models\n   SWIMA conveys records about software presence from a SWIMA-PC\
    \ to a\n   SWIMA-PV.  SWIMA does not manage the actual generation or collection\n\
    \   of such records on the endpoint.  As a result, information available\n   to\
    \ SWIMA-PCs might come in a variety of formats, and a SWIMA-PC could\n   have\
    \ little control over the format of the data made available to it.\n   Because\
    \ of this, SWIMA places no constraints on the format of these\n   generated records\
    \ and supports an open set of record formats by which\n   installed software instances\
    \ can be described.  The following terms\n   are used in this document:\n   o\
    \  Data model - The format used to structure data within a given\n      record.\
    \  SWIMA does not constrain the data models it conveys.\n   o  Record - A populated\
    \ instance of some data model that describes a\n      software product.\n   Do\
    \ not confuse the \"data model\" described here with the structure of\n   the\
    \ SWIMA messages and attributes used to convey information between\n   SWIMA-PVs\
    \ and SWIMA-PCs.  The SWIMA standard dictates the structure\n   of its messages\
    \ and attributes.  Some attributes, however, have\n   specific fields used to\
    \ convey inventory records, and those fields\n   support an extensible list of\
    \ data models for their values.  In other\n   words, SWIMA data models provide\
    \ an extension point within SWIMA\n   attributes that allows the structure of\
    \ inventory records to evolve.\n   The data model used to structure software inventory\
    \ information has\n   very little impact on the behavior of the components defined\
    \ in this\n   specification.  The SWIMA-PV has no dependency on the data model\
    \ of\n   records conveyed in SWIMA messages.  For this reason, it MUST NOT\n \
    \  reject a message or respond with a PA-TNC Error due to the data model\n   used\
    \ to structure records in attributes it receives.  Similarly, it\n   MUST NOT\
    \ reject a message or respond with a PA-TNC Error if a record\n   fails to comply\
    \ with a stated format, unless that failure prevents\n   correct parsing of the\
    \ attribute itself.  In short, the record bodies\n   are effectively treated as\
    \ \"black boxes\" by the SWIMA-PV.  (Note that\n   the SWIMA-PV might serve as\
    \ the \"front end\" of other functionality\n   that does have a dependency on\
    \ the data model used to structure\n   software information, but any such dependency\
    \ is beyond the scope of\n   this specification and needs to be addressed outside\
    \ the behaviors\n   specified in this document.  This specification is only concerned\n\
    \   with the collection and delivery of software inventory information;\n   components\
    \ that consume and use this information are a separate\n   concern.)\n   The SWIMA-PC\
    \ does have one functional dependency on the data models\n   used in the software\
    \ records it delivers, but only insofar as it is\n   required to deterministically\
    \ create a Software Identifier (described\n   in Section 3.4.1) based on each\
    \ record it delivers.  The SWIMA-PC\n   MUST be able to generate a Software Identifier\
    \ for each record it\n   delivers, and if the SWIMA-PC cannot do so, it cannot\
    \ deliver the\n   record.  All SWIMA-PCs MUST at least be able to generate Software\n\
    \   Identifiers for the data model types specified in Section 6 of this\n   document.\
    \  A SWIMA-PC MAY include the ability to generate Software\n   Identifiers for\
    \ other data model types and thus be able to support\n   them as well.\n"
- title: 3.3.  Basic Attribute Exchange
  contents:
  - "3.3.  Basic Attribute Exchange\n   In the most basic exchange supported by this\
    \ specification, a\n   SWIMA-PV sends a request to the SWIMA-PC, requesting some\
    \ type of\n   information about the endpoint's software inventory.  This simple\n\
    \   exchange is shown in Figure 2.\n       +-------------+                   \
    \       +--------------+\n       |  SWIMA-PC   |                          |  \
    \ SWIMA-PV   |  Time\n       +-------------+                          +--------------+\
    \   |\n             |                                         |           |\n\
    \             |<------------SWIMA Request---------------|           |\n      \
    \       |                                         |           |\n            \
    \ |-------------SWIMA Response------------->|           |\n             |    \
    \                                     |           V\n                 Figure 2:\
    \ Basic SWIMA Attribute Exchange\n   Upon receiving such a SWIMA Request from\
    \ the SWIMA-PV, the SWIMA-PC\n   is expected to collect all the relevant software\
    \ inventory\n   information from the endpoint's Software Inventory Evidence\n\
    \   Collection and place it within its response attribute.\n   SWIMA-PVs MUST\
    \ discard, without error, any SWIMA Response attributes\n   that they receive\
    \ for which they do not know the SWIMA Request\n   parameters that led to this\
    \ SWIMA Response.  This is due to the fact\n   that the SWIMA Request includes\
    \ parameters that control the nature of\n   the response (as will be described\
    \ in the following sections);\n   without knowing those parameters, the SWIMA\
    \ Response cannot be\n   reliably interpreted.  Each SWIMA Request includes a\
    \ Request ID,\n   which is echoed in any SWIMA Response to that request and allows\n\
    \   matching of responses to requests.  See Section 5.5 for more on\n   Request\
    \ IDs.  Receiving an unsolicited SWIMA Response attribute will\n   most often\
    \ happen when a NEA Server has multiple SWIMA-PVs; one\n   SWIMA-PV sends a SWIMA\
    \ Request, but unless exclusive delivery\n   [RFC5793] is set by the sender and\
    \ honored by the recipient, multiple\n   SWIMA-PVs will receive copies of the\
    \ resulting SWIMA Response.  In\n   this case, the SWIMA-PV that didn't send the\
    \ SWIMA Request would lack\n   the context necessary to correctly interpret the\
    \ SWIMA Response it\n   received and would simply discard it.  Note, however,\
    \ that\n   proprietary measures might allow a SWIMA-PV to discover the SWIMA\n\
    \   Request parameters for a SWIMA Response even if that SWIMA-PV did not\n  \
    \ send the given SWIMA Request.  As such, there is no blanket\n   requirement\
    \ for a SWIMA-PV to discard all SWIMA Responses to SWIMA\n   Requests that the\
    \ SWIMA-PV did not generate itself -- only that\n   SWIMA-PVs are required to\
    \ discard SWIMA Responses for which they\n   cannot get the necessary context\
    \ to interpret.\n   In the case that it is possible to do so, the SWIMA-PC SHOULD\
    \ send\n   its SWIMA Response attribute to the SWIMA-PV that requested it, using\n\
    \   exclusive delivery as described in Section 4.5 of \"PB-TNC: A Posture\n  \
    \ Broker (PB) Protocol Compatible with Trusted Network Connect (TNC)\"\n   [RFC5793].\
    \  Exclusive delivery requests that only the sender of the\n   SWIMA Request be\
    \ the receiver of the resulting SWIMA Response.  Note,\n   however, that PB-TNC\
    \ does not require the recipient to honor the\n   exclusive delivery flag in messages\
    \ that it receives, so setting the\n   flag cannot be guaranteed to prevent a\
    \ SWIMA-PV from receiving\n   unsolicited SWIMA Responses.\n   Note that, in the\
    \ case that a single endpoint hosts multiple\n   SWIMA-PCs, a single SWIMA Request\
    \ could result in multiple SWIMA\n   Responses.  SWIMA-PVs need to handle such\
    \ an occurrence without\n   error.\n   All numeric values sent in SWIMA messages\
    \ are sent in network\n   (big endian) byte order.\n"
- title: 3.4.  Core Software-Reporting Information
  contents:
  - "3.4.  Core Software-Reporting Information\n   Different parameters in the SWIMA\
    \ Request can influence what\n   information is returned in the SWIMA Response.\
    \  However, while each\n   SWIMA Response provides different additional information\
    \ about this\n   installed software, the responses all share a common set of fields\n\
    \   that support reliable software identification on an endpoint.  These\n   fields\
    \ include Software Identifiers, Data Model Type, Record\n   Identifiers, Software\
    \ Locators, and Source Identifiers.  These fields\n   are present for each reported\
    \ piece of software in each type of SWIMA\n   Response.  The following sections\
    \ examine these information types in\n   more detail.\n"
- title: 3.4.1.  Software Identifiers
  contents:
  - "3.4.1.  Software Identifiers\n   A Software Identifier uniquely identifies a\
    \ specific version of a\n   specific software product.  The SWIMA standard does\
    \ not dictate the\n   structure of a Software Identifier (beyond stating that\
    \ it is a\n   string) or define how it is created.  Instead, each data model\n\
    \   described in the \"Software Data Model Types\" registry (Section 10.5)\n \
    \  includes its own rules for how a Software Identifier is created based\n   on\
    \ a record in the endpoint's Software Inventory Evidence Collection\n   expressed\
    \ in that data model.  Other data models will have their own\n   procedures for\
    \ the creation of associated Software Identifiers.\n   Within SWIMA, the Software\
    \ Identifier is simply an opaque string, and\n   there is never any need to unpack\
    \ any information that might be part\n   of that identifier.\n   A Software Identifier\
    \ is a fraction of the size of the inventory\n   record from which it is derived.\
    \  For this reason, it is often more\n   efficient to collect full inventories\
    \ using Software Identifiers and\n   only collect full records when necessary\
    \ using targeted requests.\n   For some combinations of data models and sources,\
    \ the full record\n   might never be necessary, as the identifier can be directly\n\
    \   correlated to the contents of the full record.  This is possible with\n  \
    \ authoritative SWID tags, since these tags always have the same\n   contents\
    \ and thus a Software Identifier derived from these tags can\n   be used as a\
    \ lookup to a local copy of the full tag.  For other\n   combinations of source\
    \ and data model, a server might not be able to\n   determine the specific software\
    \ product and version associated with\n   the identifier without requesting the\
    \ delivery of the full record.\n   However, even in those cases, downstream consumers\
    \ of this\n   information might never need the full record as long as the Software\n\
    \   Identifiers they receive can be tracked reliably.  A SWIMA-PV can use\n  \
    \ Software Identifiers to track the presence of specific software\n   products\
    \ on an endpoint over time in a bandwidth-efficient manner.\n   There are two\
    \ important limitations of Software Identifiers to keep\n   in mind:\n   1.  The\
    \ identifiers do not necessarily change when the associated\n       record changes.\
    \  In some situations, a record in the endpoint's\n       Software Inventory Evidence\
    \ Collection will change due to new\n       information becoming available or\
    \ in order to correct prior\n       errors in that information.  Such changes\
    \ might or might not\n       result in changes to the Software Identifier, depending\
    \ on the\n       nature of the changes and the rules governing how Software\n\
    \       Identifiers are derived from records of the appropriate data\n       model.\n\
    \   2.  It is possible that a single software product is installed on a\n    \
    \   single endpoint multiple times.  If these multiple installation\n       instances\
    \ are reported by the same source using the same data\n       format, then this\
    \ can result in identical Software Identifiers\n       for both installation instances.\
    \  In other words, Software\n       Identifiers might not uniquely identify installation\
    \ instances;\n       they are just intended to uniquely identify software products\n\
    \       (which might have more than one installation instance).  Instead,\n  \
    \     to reliably distinguish between multiple instances of a single\n       software\
    \ product, one needs to make use of Record Identifiers as\n       described in\
    \ Section 3.4.3.\n"
- title: 3.4.2.  Data Model Type
  contents:
  - "3.4.2.  Data Model Type\n   The Data Model Type consists of two fields: Data\
    \ Model Type PEN and\n   Data Model Type.  (\"PEN\" stands for \"Private Enterprise\
    \ Number\".)\n   The combination of these fields is used to identify the type\
    \ of data\n   model of the associated software inventory record.  The data model\
    \ is\n   significant not only because it informs the recipient of the data\n \
    \  model of the associated record but also because the process for\n   generating\
    \ the Software Identifier for the record depends on the\n   record's data model.\
    \  Clearly identifying the type of data model from\n   which the Software Identifier\
    \ was derived thus provides useful\n   context for that value.\n   The PEN identifies\
    \ the organization that assigns meaning to the Data\n   Model Type field value.\
    \  PENs are managed by IANA in the \"Private\n   Enterprise Numbers\" registry.\
    \  PENs allow vendors to designate their\n   own set of data models for software\
    \ inventory description.  IANA\n   reserves the PEN of 0x000000.  Data Model Types\
    \ associated with this\n   PEN are defined in the \"Software Data Model Types\"\
    \ registry; see\n   Section 10.5 of this specification.  Note that this IANA table\n\
    \   reserves all values greater than or equal to 0xC0 (192) for local\n   enterprise\
    \ use.  This means that local enterprises can use custom\n   data formats and\
    \ indicate them with the IANA PEN and a Data Model\n   Type value between 0xC0\
    \ and 0xFF, inclusive.  Those enterprises are\n   responsible for configuring\
    \ their SWIMA-PCs to correctly report those\n   custom data models.\n"
- title: 3.4.3.  Record Identifiers
  contents:
  - "3.4.3.  Record Identifiers\n   A Record Identifier is a 4-byte unsigned integer\
    \ that is generated by\n   the SWIMA-PC and is uniquely associated with a specific\
    \ record within\n   the endpoint's Software Inventory Evidence Collection.  The\
    \ SWIMA-PC\n   MUST assign a unique identifier to each record when it is added\
    \ to\n   the endpoint's Software Inventory Evidence Collection.  The Record\n\
    \   Identifier SHOULD remain unchanged if that record is modified.\n   However,\
    \ it is recognized that, in some circumstances, record\n   modification might\
    \ be hard to distinguish from record deletion\n   followed by creation of a new\
    \ record.  For this reason, retaining a\n   constant Record Identifier across\
    \ a record modification is\n   recommended but not required.  Similarly, in the\
    \ case that the\n   software product associated with a record is moved, ideally\
    \ the\n   Record Identifier for the record of the moved software will remain\n\
    \   unchanged, reflecting that it represents the same software product\n   instance,\
    \ albeit in a new location.  However, this level of tracking\n   could prove difficult\
    \ to achieve and is not required.  The SWIMA-PC\n   might wish to assign Record\
    \ Identifiers sequentially, but any scheme\n   is acceptable, provided that no\
    \ two records receive the same\n   identifier.\n   Servers can use Record Identifiers\
    \ to distinguish between multiple\n   instances of a single software product installed\
    \ on an endpoint.\n   Since each installation instance of a software product is\
    \ associated\n   with a separate record, servers can use the Record Identifier\
    \ to\n   distinguish between instances.  For example, if an event is reported\n\
    \   (as described in Section 3.7), the Record Identifier will allow the\n   server\
    \ to discern which instance of a software product is involved.\n"
- title: 3.4.4.  Software Locators
  contents:
  - "3.4.4.  Software Locators\n   In addition to the need to identify what software\
    \ products are on an\n   endpoint, some processes that use inventory information\
    \ also need to\n   know where software is located on the endpoint.  This information\n\
    \   might be needed to direct remediation actions or similar processes.\n   For\
    \ this reason, every reported software product also includes a\n   Software Locator\
    \ to identify where the software is installed on the\n   endpoint.\n   If the\
    \ location is not provided directly by the data source, the\n   SWIMA-PC is responsible\
    \ for attempting to determine the location of\n   the software product.  The \"\
    location\" of a product SHOULD be the\n   directory in which the software product's\
    \ executables are kept.  The\n   SWIMA-PC MUST be consistent in reporting the\
    \ location of a software\n   product.  In other words, assuming that a software\
    \ product has not\n   moved, the SWIMA-PC cannot use one location in one report\
    \ and a\n   different location for the same software product in another.  (If\
    \ a\n   software product has moved, the Software Locator needs to reflect the\n\
    \   new location.)\n   The location is expressed as a URI string.  The string\
    \ MUST conform\n   to URI syntax requirements [RFC3986].  The URI scheme describes\
    \ the\n   context of the described location.  For example, in most cases the\n\
    \   location of the installed software product will be expressed in terms\n  \
    \ of its path in the filesystem.  For such locations, the location URI\n   scheme\
    \ MUST be \"file\", and the URI MUST conform to the \"file\" URI\n   scheme standard\
    \ [RFC8089], including the percent-encoding of\n   whitespace and other special\
    \ characters.  It is possible that other\n   schemes could be used to represent\
    \ other location contexts.  Apart\n   from specifying the use of the \"file\"\
    \ scheme, this specification does\n   not identify other schemes or define their\
    \ use.  When representing\n   software products in other location contexts, tools\
    \ MUST be\n   consistent in their use of schemes, but the exact schemes are not\n\
    \   normatively defined here.  SWIMA implementations are not limited to\n   the\
    \ IANA list of URI schemes <https://www.iana.org/assignments/\n   uri-schemes/>\
    \ and can define new schemes to support other types of\n   application locations.\n\
    \   It is possible that a SWIMA-PC is unable to determine the location of\n  \
    \ a reported software product.  In this case, the SWIMA-PC MUST provide\n   a\
    \ zero-length Software Locator.\n"
- title: 3.4.5.  Source Identifiers
  contents:
  - "3.4.5.  Source Identifiers\n   All SWIMA-PCs MUST track the source of each piece\
    \ of software\n   information they report.  Each time a SWIMA-PC gets information\
    \ to\n   send to a given SWIMA-PV from a new source (from the perspective of\n\
    \   that SWIMA-PV), the SWIMA-PC MUST assign that source a Source\n   Identifier,\
    \ which is an 8-bit unsigned integer.  Each item reported\n   includes the number\
    \ of the Source Identifier for the source that\n   provided that information.\
    \  All information that is provided by that\n   source MUST be delivered with\
    \ this same Source Identifier.  This MUST\n   be done for each source used.  If\
    \ the SWIMA-PC is ever unclear as to\n   whether a given source is new or not,\
    \ it MUST assume that this is a\n   new source and assign it a new Source Identifier.\
    \  Source Identifier\n   numbers do not need to be assigned sequentially.  SWIMA\
    \ does not\n   support the presence of more than 256 sources, as the chance that\
    \ a\n   single endpoint will have more than 256 methods of collecting\n   inventory\
    \ information is vanishingly small.  All possible values\n   between 0 and 255\
    \ are valid; there are no reserved Source Identifier\n   numbers.\n   Source Identifiers\
    \ can help with (although will not completely\n   eliminate) the challenges posed\
    \ by multiple reporting of a single\n   software instance.  If multiple sources\
    \ each report the same type of\n   software product once, there is most likely\
    \ a single instance of that\n   product installed on the endpoint, which each\
    \ source has detected\n   independently.  On the other hand, if multiple instances\
    \ are reported\n   by a single source, this almost certainly means that there\
    \ are\n   actually multiple instances that are being reported.\n   The SWIMA-PC\
    \ is responsible for tracking associations between Source\n   Identifiers and\
    \ the given data source.  This association MUST remain\n   consistent with regard\
    \ to a given SWIMA-PV while there is an active\n   PB-TNC session with that SWIMA-PV.\
    \  The SWIMA-PC MAY have a different\n   Source Identifier association for different\
    \ SWIMA-PVs.  Likewise, the\n   SWIMA-PC MAY change the Source Identifier association\
    \ for a given\n   SWIMA-PV if the PB-TNC session terminates.  However, implementers\
    \ of\n   SWIMA-PCs will probably find it easier to manage associations by\n  \
    \ maintaining the same association for all SWIMA-PVs and across\n   multiple sessions.\n\
    \   Of special note, event records reported from the SWIMA-PC's event log\n  \
    \ (discussed in Section 3.7) also need to be sent with their associated\n   data\
    \ source.  The Source Identifier reported with events MUST be the\n   current\
    \ (i.e., at the time the event is sent) Source Identifier\n   associated with\
    \ the data source that produced the event, regardless\n   of how long ago that\
    \ event occurred.  Event logs are likely to\n   persist far longer than a single\
    \ PB-TNC session.  SWIMA-PCs MUST\n   ensure that each event can be linked to\
    \ the appropriate data source,\n   even if the Source Identifiers used when the\
    \ event was created have\n   since been reassigned.  In other words, when sending\
    \ an event, it\n   needs to be sent with the Source Identifier currently linked\
    \ to the\n   data source that produced it, regardless of whether a different\n\
    \   Source Identifier would have been associated with the event when the\n   event\
    \ was first created.\n   Note that the Source Identifier is primarily used to\
    \ support\n   recognition, rather than identification, of sources.  That is to\
    \ say,\n   a Source Identifier can tell a recipient that two events were\n   reported\
    \ by the same source, but the number will not necessarily help\n   that recipient\
    \ determine which source was used.  Moreover, different\n   SWIMA-PCs will not\
    \ necessarily use the same Source Identifiers for\n   the same sources.  SWIMA-PCs\
    \ MUST track the assignment of Source\n   Identifiers to ensure consistent application\
    \ thereof.  SWIMA-PCs MUST\n   also track which Source Identifiers have been used\
    \ with each SWIMA-PV\n   with which they communicate.\n"
- title: 3.4.6.  Using Software and Record Identifiers in SWIMA Attributes
  contents:
  - "3.4.6.  Using Software and Record Identifiers in SWIMA Attributes\n   A SWIMA\
    \ attribute reporting an endpoint's Software Inventory Evidence\n   Collection\
    \ always contains the Software Identifiers associated with\n   the identified\
    \ software products.  A SWIMA attribute might or might\n   not also contain copies\
    \ of Software Inventory Evidence Records.  The\n   attribute exchange is identical\
    \ to the diagram shown in Figure 2,\n   regardless of whether Software Inventory\
    \ Evidence Records are\n   included.  The SWIMA Request attribute indicates whether\
    \ the response\n   is required to include Software Inventory Evidence Records.\n\
    \   Excluding Software Inventory Evidence Records can reduce the\n   attribute\
    \ size of the response by multiple orders of magnitude when\n   compared to sending\
    \ the same inventory with full records.\n"
- title: 3.5.  Targeted Requests
  contents:
  - "3.5.  Targeted Requests\n   Sometimes a SWIMA-PV does not require information\
    \ about every piece\n   of software on an endpoint but only needs to receive updates\
    \ about\n   certain software instances.  For example, enterprise endpoints might\n\
    \   be required to have certain software products installed and to keep\n   these\
    \ updated.  Instead of requesting a complete inventory just to\n   see if these\
    \ products are present, the SWIMA-PV can make a \"targeted\n   request\" for the\
    \ software in question.\n   Targeted requests follow the same attribute exchange\
    \ as the exchange\n   described in Figure 2.  The SWIMA-PV targets its request\
    \ by providing\n   one or more Software Identifiers in its SWIMA Request attribute.\
    \  The\n   SWIMA-PC MUST then limit its response to contain only records that\n\
    \   match the indicated Software Identifier(s).  This allows the network\n   exchange\
    \ to exclude information that is not relevant to a given\n   policy question,\
    \ thus reducing unnecessary bandwidth consumption.\n   The SWIMA-PC's response\
    \ might or might not include Software Inventory\n   Evidence Records, depending\
    \ on the parameters of the SWIMA Request.\n   Note that targeted requests identify\
    \ the software relevant to the\n   request only through Software Identifiers.\
    \  This specification does\n   not support arbitrary, parameterized querying of\
    \ records.  For\n   example, one cannot request all records from a certain software\n\
    \   publisher or all records created by a particular data source.\n   Targeted\
    \ requests only allow a requester to request specific software\n   (as identified\
    \ by their Software Identifiers) and receive a response\n   that is limited to\
    \ the named software.\n   There is no assumption that a SWIMA-PC will recognize\
    \ \"synonymous\n   records\" -- that is, records from different sources for the\
    \ same\n   software.  Recall that different sources and data models may use\n\
    \   different Software Identifier strings for the same software product.\n   The\
    \ SWIMA-PC returns only records that match the Software Identifiers\n   in the\
    \ SWIMA Request, even if there might be other records in the\n   endpoint's Software\
    \ Inventory Evidence Collection for the same\n   software product.  This is necessary\
    \ because SWIMA-PCs might not have\n   the ability to determine that two Software\
    \ Identifiers refer to the\n   same product.\n   A targeted SWIMA Request attribute\
    \ does not specify Record\n   Identifiers or Software Locators.  The response\
    \ to a targeted request\n   MUST include all records associated with the named\
    \ Software\n   Identifiers, including the case where there are multiple records\n\
    \   associated with a single Software Identifier.\n   SWIMA-PCs MUST accept targeted\
    \ requests and process them correctly as\n   described above.  SWIMA-PVs MUST\
    \ be capable of making targeted\n   requests and processing the responses thereto.\n"
- title: 3.6.  Monitoring Changes in an Endpoint's Software Inventory Evidence
  contents:
  - "3.6.  Monitoring Changes in an Endpoint's Software Inventory Evidence\n     \
    \ Collection\n   The software collection on an endpoint is not static.  As software\
    \ is\n   installed, uninstalled, patched, or updated, the Software Inventory\n\
    \   Evidence Collection is expected to change to reflect the new software\n  \
    \ state on the endpoint.  Different data sources might update the\n   evidence\
    \ collection at different rates.  For example, a package\n   manager might update\
    \ its records in the Software Inventory Evidence\n   Collection immediately whenever\
    \ it is used to add or remove a\n   software product.  By contrast, sources that\
    \ perform periodic\n   examination of the endpoint would likely only update their\
    \ records in\n   the Software Inventory Evidence Collection after each examination.\n\
    \   All SWIMA-PCs MUST be able to detect changes to the Software\n   Inventory\
    \ Evidence Collection.  Specifically, SWIMA-PCs MUST be able\n   to detect:\n\
    \   o  The creation of records\n   o  The deletion of records\n   o  The alteration\
    \ of records\n   An \"alteration\" is anything that modifies the contents of a\
    \ record\n   (or would modify it, if the record is dynamically generated on\n\
    \   demand) in any way, regardless of whether the change is functionally\n   meaningful.\n\
    \   SWIMA-PCs MUST detect such changes to the endpoint's Software\n   Inventory\
    \ Evidence Collection in close to real time (i.e., within\n   seconds) when the\
    \ SWIMA-PC is operating.  In addition, in the case\n   where there is a period\
    \ during which the SWIMA-PC is not operating,\n   the SWIMA-PC MUST be able to\
    \ determine the net change to the\n   endpoint's Software Inventory Evidence Collection\
    \ over the period it\n   was not operational.  Specifically, the \"net change\"\
    \ represents the\n   difference between (1) the state of the endpoint's Software\
    \ Inventory\n   Evidence Collection when the SWIMA-PC was last operational and\n\
    \   monitoring its state and (2) the state of the endpoint's Software\n   Inventory\
    \ Evidence Collection when the SWIMA-PC resumed operation.\n   Note that a net\
    \ change might not reflect the total number of change\n   events over this interval.\
    \  For example, if a record was altered\n   three times during a period when the\
    \ SWIMA-PC was unable to monitor\n   for changes, the net change of this interval\
    \ might only note that\n   there was an alteration to the record, but not how\
    \ many individual\n   alteration events occurred.  It is sufficient for a SWIMA-PC's\n\
    \   determination of a net change to note that there was a difference\n   between\
    \ the earlier and current state, rather than to enumerate all\n   the individual\
    \ events that allowed the current state to be reached.\n   The SWIMA-PC MUST assign\
    \ a time to each detected change in the\n   endpoint's Software Inventory Evidence\
    \ Collection.  These timestamps\n   correspond to the SWIMA-PC's best understanding\
    \ as to when the\n   detected change occurred.  For changes to the endpoint's\
    \ Software\n   Inventory Evidence Collection that occur while the SWIMA-PC is\n\
    \   operating, the SWIMA-PC ought to be able to assign a time to the\n   event\
    \ that is accurate to within a few seconds.  For changes to the\n   endpoint's\
    \ Software Inventory Evidence Collection that occur while\n   the SWIMA-PC is\
    \ not operational, upon becoming operational the\n   SWIMA-PC needs to make a\
    \ best guess as to the time of the relevant\n   events (possibly by looking at\
    \ timestamps on files), but these values\n   might be off.  In the case of dynamically\
    \ generated records, the time\n   of change is the time at which the data from\
    \ which the records are\n   generated changes, not the time at which a changed\
    \ record is\n   generated.  For example, if records are dynamically generated\
    \ based\n   on data in an RPM database (<http://rpm.org/>), the time of change\n\
    \   would be when the RPM database changed.\n   With regard to deletions of records,\
    \ the SWIMA-PC needs to detect the\n   deletion of a given record and MUST retain\
    \ a copy of the full deleted\n   record along with the associated Record Identifier\
    \ and Software\n   Locator so that the record and associated information can be\
    \ provided\n   to the SWIMA-PV upon request.  This copy of the record MUST be\n\
    \   retained for a reasonable amount of time.  Vendors and administrators\n  \
    \ determine what \"reasonable\" means, but a copy of the record SHOULD be\n  \
    \ retained for as long as the event recording the deletion of the\n   record remains\
    \ in the SWIMA-PC's event log (as described in\n   Section 3.7).  This is recommended,\
    \ because as long as the event is\n   in the SWIMA-PC's event log the SWIMA-PC\
    \ might send a change event\n   attribute (described in Section 3.7) that references\
    \ this record, and\n   a copy of the record is needed if the SWIMA-PV wants a\
    \ full copy of\n   the relevant record.  In the case that a SWIMA-PC is called\
    \ upon to\n   report a deletion event that is still in the event log but where\
    \ the\n   record itself is no longer available, the SWIMA-PC will still return\n\
    \   an entry corresponding to the deletion event, but the field of that\n   entry\
    \ that would normally contain the full copy of the record SHOULD\n   be zero-length.\n\
    \   With regard to alterations to a record, SWIMA-PCs MUST detect any\n   alterations\
    \ to the contents of a record.  Alterations need to be\n   detected even if they\
    \ have no functional impact on the record.  A\n   good guideline is that any alteration\
    \ to a record that might change\n   the value of a hash taken on the record's\
    \ contents needs to be\n   detected by the SWIMA-PC.  A SWIMA-PC might be unable\
    \ to distinguish\n   modifications to the contents of a record from modifications\
    \ to the\n   metadata that the filesystem associates with the record.  For\n \
    \  example, a SWIMA-PC might use the \"last modification\" timestamp as an\n \
    \  indication of alteration to a given record, but a record's last\n   modification\
    \ time can change for reasons other than modifications to\n   the record's contents.\
    \  A SWIMA-PC is still considered compliant with\n   this specification if it\
    \ also reports metadata change events that do\n   not change the record itself\
    \ as alterations to the record.  In other\n   words, while SWIMA-PC implementers\
    \ are encouraged to exclude\n   modifications that do not affect the bytes within\
    \ the record,\n   discriminating between modifications to file contents and changes\
    \ to\n   file metadata can be difficult and time consuming on some systems.\n\
    \   As such, as long as the alterations detected by a SWIMA-PC always\n   cover\
    \ all modifications to the contents of a record, the SWIMA-PC is\n   considered\
    \ compliant even if it also registers alterations that do\n   not modify the contents\
    \ of a record as well.  When recording an\n   alteration to a record, the SWIMA-PC\
    \ is only required to note that an\n   alteration occurred.  The SWIMA-PC is not\
    \ required to note or record\n   how the record was altered, nor is it possible\
    \ to include such\n   details in SWIMA attributes reporting the change to a SWIMA-PV.\n\
    \   There is no need to retain a copy of the original record prior to the\n  \
    \ alteration.\n   When a record changes, it SHOULD retain the same Record Identifier.\n\
    \   The Software Locator might or might not change, depending on whether\n   the\
    \ software changed locations during the changes that led to the\n   record change.\
    \  A record change MUST retain the same Software\n   Identifier.  This means that\
    \ any action that changes a software\n   product (e.g., application of a patch\
    \ that results in a change to the\n   product's version) MUST NOT be reflected\
    \ by a record change but\n   instead MUST result in the deletion of the old record\
    \ and the\n   creation of a new record.  This reflects the requirement that a\n\
    \   record in the endpoint's Software Inventory Evidence Collection\n   correspond\
    \ directly with an instance of a specific software product.\n"
- title: 3.7.  Reporting Change Events
  contents:
  - "3.7.  Reporting Change Events\n   As noted in Section 3.6, SWIMA-PCs are required\
    \ to detect changes to\n   the endpoint's Software Inventory Evidence Collection\
    \ (creation,\n   deletion, and alteration) in near real time while the SWIMA-PC\
    \ is\n   operational, and a given SWIMA-PC MUST be able to account for any net\n\
    \   change to the endpoint's Software Inventory Evidence Collection that\n   occurs\
    \ when the SWIMA-PC is not operational.  However, to be of use\n   to the enterprise,\
    \ the NEA Server needs to be able to receive these\n   events and be able to understand\
    \ how new changes relate to earlier\n   changes.  In SWIMA, this is facilitated\
    \ by reporting change events.\n   All SWIMA-PCs MUST be capable of receiving requests\
    \ for change events\n   and sending change event attributes.  All SWIMA-PVs MUST\
    \ be capable\n   of requesting and receiving change event attributes.\n"
- title: 3.7.1.  Event Identifiers
  contents:
  - "3.7.1.  Event Identifiers\n   To be useful, change events need to be correctly\
    \ ordered.  The\n   ordering of events is facilitated by two pieces of information:\
    \ an\n   Event Identifier (EID) value and an EID Epoch value.\n   An EID is a\
    \ 4-byte unsigned integer that the SWIMA-PC assigns\n   sequentially to each observed\
    \ event (whether detected in real time or\n   deduced by looking for net changes\
    \ over a period of SWIMA-PC\n   inactivity).  All EIDs exist within the context\
    \ of some \"EID Epoch\",\n   which is also represented as a 4-byte unsigned integer.\
    \  EID Epochs\n   are used to ensure synchronization between the SWIMA-PC and\
    \ any\n   SWIMA-PVs with which it communicates.  EID Epoch values MUST be\n  \
    \ generated in such a way as to minimize the chance that an EID Epoch\n   will\
    \ be reused, even in the case where the SWIMA-PC reverts to an\n   earlier state.\
    \  For this reason, sequential EID Epochs are\n   discouraged, since loss of state\
    \ could result in value reuse.  There\n   are multiple reasons that a SWIMA-PC\
    \ might need to deliberately reset\n   its EID counter, including exhaustion of\
    \ available EID values, the\n   need to purge entries from the event log to recover\
    \ memory, or\n   corruption of the event log.  In all cases where a SWIMA-PC needs\
    \ to\n   reset its EID counter, a new EID Epoch MUST be selected.\n   Within an\
    \ Epoch, EIDs MUST be assigned sequentially, so that if a\n   particular event\
    \ is assigned an EID of N, the next observed event is\n   given an EID of N+1.\
    \  In some cases, events might occur\n   simultaneously, or the SWIMA-PC might\
    \ not otherwise be able to\n   determine an ordering for events.  In these cases,\
    \ the SWIMA-PC\n   creates an arbitrary ordering of the events and assigns EIDs\n\
    \   according to this ordering.  Two change events MUST NOT ever be\n   assigned\
    \ the same EID within the same EID Epoch.  No meaningful\n   comparison can be\
    \ made between EID values of different Epochs.\n   The EID value of 0 is reserved\
    \ and MUST NOT be associated with any\n   event.  Specifically, an EID of 0 in\
    \ a SWIMA Request attribute\n   indicates that a SWIMA-PV wants an inventory response\
    \ rather than an\n   event response, while an EID of 0 in a SWIMA Response is\
    \ used to\n   indicate the initial state of the endpoint's Software Inventory\n\
    \   Evidence Collection prior to the observation of any events.  Thus,\n   the\
    \ very first recorded event in a SWIMA-PC's records within an EID\n   Epoch MUST\
    \ be assigned a value of 1.  Note that EID and EID Epoch\n   values are assigned\
    \ by the SWIMA-PC without regard to whether events\n   are being reported to one\
    \ or more SWIMA-PVs.  The SWIMA-PC records\n   events and assigns EIDs during\
    \ its operation.  All SWIMA-PVs that\n   request event information from the SWIMA-PC\
    \ will have those requests\n   served from the same event records and thus will\
    \ see the same EIDs\n   and EID Epochs for the same events.\n   If a SWIMA-PC\
    \ uses multiple sources, a SWIMA-PC's assignment of EIDs\n   MUST reflect the\
    \ presence and order of all events on the endpoint (at\n   least for supported\
    \ sources), regardless of the source.  This means\n   that if source A experiences\
    \ an event and then source B experiences\n   two events, and then source A experiences\
    \ another two events, the\n   SWIMA-PC is required to capture five events with\
    \ consecutive EID\n   values reflecting the order in which the events occurred.\n\
    \   The SWIMA-PC MUST ensure that there is no coverage gap (i.e., change\n   events\
    \ that are not recorded in the SWIMA-PC's records) in its change\n   event records.\
    \  This is necessary because a coverage gap might give a\n   SWIMA-PV a false\
    \ impression of the endpoint's state.  For example, if\n   a SWIMA-PV saw an event\
    \ indicating that a particular record had been\n   added to the endpoint's Software\
    \ Inventory Evidence Collection but\n   did not see any subsequent events indicating\
    \ that the record in\n   question had been deleted, it might reasonably assume\
    \ that this\n   record was still present and thus that the indicated software\
    \ was\n   still installed (assuming that the Epoch has not changed).  If there\n\
    \   is a coverage gap in the SWIMA-PC's event records, however, this\n   assumption\
    \ could be false.  For this reason, the SWIMA-PC's event\n   records MUST NOT\
    \ contain gaps.  In the case where there are periods\n   where it is possible\
    \ that changes occurred without the SWIMA-PC\n   detecting or recording them,\
    \ the SWIMA-PC MUST either (1) compute a\n   net change and update its event records\
    \ appropriately or (2) pick a\n   new EID Epoch to indicate a discontinuity with\
    \ previous event\n   records.\n   Within a given Epoch, once a particular event\
    \ has been assigned an\n   EID, this association MUST NOT be changed.  That is,\
    \ within an Epoch,\n   once an EID is assigned to an event, that EID cannot be\
    \ reassigned to\n   a different event, and the event cannot be assigned a different\
    \ EID.\n   When the SWIMA-PC's Epoch changes, all of these associations between\n\
    \   EIDs and events are cancelled, and EID values once again become free\n   for\
    \ assignment.\n"
- title: 3.7.2.  Core Event-Tracking Information
  contents:
  - "3.7.2.  Core Event-Tracking Information\n   Whether reporting events or full\
    \ inventories, it is important to know\n   how the reported information fits into\
    \ the overall timeline of change\n   events.  This is why all SWIMA Response attributes\
    \ include fields to\n   place that response within the sequence of detected events.\n\
    \   Specifically, all SWIMA Responses include a Last EID field and an EID\n  \
    \ Epoch field.  The EID Epoch field identifies the EID Epoch in which\n   the\
    \ SWIMA Response was sent.  If the SWIMA Response is reporting\n   events, all\
    \ reported events occurred within the named EID Epoch.  The\n   Last EID (which\
    \ is also always from the named EID Epoch) indicates\n   the EID of the last recorded\
    \ change event at the time that the SWIMA\n   Response was sent.  These two fields\
    \ allow any response to be placed\n   in the context of the complete set of detected\
    \ change events within a\n   given EID Epoch.\n"
- title: 3.7.3.  Updating Inventory Knowledge Based on Events
  contents:
  - "3.7.3.  Updating Inventory Knowledge Based on Events\n   Modern endpoints can\
    \ have hundreds of software products installed,\n   most of which are unlikely\
    \ to change from one day to the next.  As\n   such, instead of exchanging a complete\
    \ list of an endpoint's\n   inventory on a regular basis, one might wish to only\
    \ identify changes\n   since some earlier known state of this inventory.  This\
    \ is readily\n   facilitated by the use of EIDs to place change events in a context\n\
    \   relative to the earlier state.\n   As noted above, every SWIMA Response sent\
    \ by a SWIMA-PC to a SWIMA-PV\n   (as described in Sections 3.3 through 3.5) includes\
    \ the EID Epoch and\n   EID of the last event recorded prior to that response\
    \ being compiled.\n   This allows the SWIMA-PV to place all subsequently received\
    \ event\n   records in context relative to this SWIMA Response attribute (since\n\
    \   the EIDs represent a total ordering of all changes to the endpoint's\n   Software\
    \ Inventory Evidence Collection).  Specifically, a SWIMA-PV\n   (or, more likely,\
    \ a database that collects and records its findings)\n   can record an endpoint's\
    \ full inventory and also the EID and Epoch of\n   the most recent event reflected\
    \ at the time of that inventory.  From\n   that point on, if change events are\
    \ observed, the attribute\n   describing these events indicates the nature of\
    \ the change, the\n   affected records, and the order in which these events occurred\
    \ (as\n   indicated by the sequential EIDs).  Using this information, any\n  \
    \ remote record of the endpoint's Software Inventory Evidence\n   Collection can\
    \ be updated appropriately.\n"
- title: 3.7.4.  Using Event Records in SWIMA Attributes
  contents:
  - "3.7.4.  Using Event Records in SWIMA Attributes\n   A SWIMA-PV MUST be able to\
    \ request a list of event records instead of\n   an inventory.  The attribute\
    \ flow in such an exchange looks the same\n   as the basic flow shown in Figure\
    \ 2.  The only difference is that in\n   the SWIMA Request attribute the SWIMA-PV\
    \ provides an EID other than\n   0.  (An EID value of 0 in a SWIMA Request represents\
    \ a request for an\n   inventory.)  When the SWIMA-PC receives such a request,\
    \ instead of\n   identifying records from the endpoint's Software Inventory Evidence\n\
    \   Collection, it consults its list of detected changes.  The SWIMA-PC\n   MUST\
    \ add an event record to the SWIMA Response attribute for each\n   recorded change\
    \ event with an EID greater than or equal to the EID in\n   the SWIMA Request\
    \ attribute (although the targeting of requests, as\n   described in the next\
    \ paragraph, might limit this list).  A list of\n   event records MUST only contain\
    \ events with EIDs that all come from\n   the current Epoch.\n   SWIMA-PVs can\
    \ target requests for event records by including one or\n   more Software Identifiers,\
    \ as described in Section 3.5, in the SWIMA\n   Request that requests an event\
    \ record list.  A targeted request for\n   event records is used to indicate that\
    \ only events affecting software\n   that matches one of the provided Software\
    \ Identifiers are to be\n   returned.  Specifically, in response to a targeted\
    \ request for event\n   records, the SWIMA-PC MUST exclude any event records that\
    \ are less\n   than the indicated EID (within the current EID Epoch) and exclude\
    \ any\n   event records where the affected software does not match one of the\n\
    \   provided Software Identifiers.  This might mean that the resulting\n   list\
    \ of event records sent in the response attribute does not provide\n   a continuous\
    \ sequence of EIDs.  Both SWIMA-PCs and SWIMA-PVs MUST\n   support targeted requests\
    \ for event records.\n"
- title: 3.7.5.  Partial and Complete Lists of Event Records in SWIMA Attributes
  contents:
  - "3.7.5.  Partial and Complete Lists of Event Records in SWIMA Attributes\n   Over\
    \ time, a SWIMA-PC might record a large number of change events.\n   If a SWIMA-PV\
    \ requests all change events covering a long period of\n   time, the resulting\
    \ SWIMA Response attribute might be extremely\n   large, especially if the SWIMA-PV\
    \ requests the inclusion of Software\n   Inventory Evidence Records in the response.\
    \  In the case that the\n   resulting attribute is too large to send (because\
    \ it exceeds either\n   (1) the 4 GB attribute size limit imposed by the PA-TNC\
    \ specification\n   or (2) some smaller size limit imposed on the SWIMA-PC), the\
    \ SWIMA-PC\n   MAY send a partial list of event records back to the SWIMA-PV.\n\
    \   The generation of a partial list of events in a SWIMA Response\n   attribute\
    \ requires the SWIMA-PC to identify a \"consulted range\" of\n   EIDs.  A consulted\
    \ range is the set of event records that are\n   examined for inclusion in the\
    \ SWIMA Response attribute and that are\n   included in that attribute if applicable.\
    \  Recall that if a SWIMA\n   Request is targeted, only event records that involve\
    \ the indicated\n   software would be applicable.  (See Section 3.5 for more on\
    \ targeted\n   requests.)  If a request is not targeted, all event records in\
    \ the\n   consulted range are applicable and are included in the SWIMA Response\n\
    \   attribute.\n   The lower bound of the consulted range MUST be the EID provided\
    \ in\n   the SWIMA Request.  (Recall that a SWIMA-PV indicates a request for\n\
    \   event records by providing a non-zero EID value in the SWIMA Request.\n  \
    \ See Section 3.7.4.)  The upper bound of the consulted range is the\n   EID of\
    \ the latest event record (as ordered by EID values) that is\n   included in the\
    \ SWIMA Response attribute if it is applicable to the\n   request.  The EID of\
    \ this last event record is called the \"Last\n   Consulted EID\".  The SWIMA-PC\
    \ chooses this Last Consulted EID based\n   on the size of the event record list\
    \ it is willing to provide to the\n   SWIMA-PV.\n   A partial result list MUST\
    \ include all applicable event records\n   within the consulted range.  This means\
    \ that for any applicable event\n   record (i.e., any event record in a non-targeted\
    \ request or any event\n   record associated with software matching a requested\
    \ Software\n   Identifier in a targeted request) whose EID is greater than or\
    \ equal\n   to the EID provided in the SWIMA Request and whose EID is less than\n\
    \   or equal to the Last Consulted EID, that event record MUST be\n   included\
    \ in the SWIMA Response conveying this partial list of event\n   records.  This\
    \ ensures that every partial list of event records is\n   always complete within\
    \ its indicated range.  Remember that for\n   targeted requests, \"complete\"\
    \ doesn't mean that all EIDs between the\n   range endpoints are present -- only\
    \ that every matching EID between\n   the range endpoints is included.\n   In\
    \ addition to the EID Epoch and Last EID fields that are present in\n   all SWIMA\
    \ Responses, all SWIMA Response attributes that convey event\n   records include\
    \ a Last Consulted EID field.  Note that if responding\n   to a targeted SWIMA\
    \ Request, the SWIMA Response attribute might not\n   contain the event record\
    \ whose EID matches the Last Consulted EID\n   value.  For example, that record\
    \ might have been deemed inapplicable\n   because it did not match the specified\
    \ list of Software Identifiers\n   in the SWIMA Request.\n   If a SWIMA-PV receives\
    \ a SWIMA Response attribute where the Last EID\n   and Last Consulted EID fields\
    \ are identical, the SWIMA-PV knows that\n   it has received a result list that\
    \ is complete, given the parameters\n   of the request, up to the present time.\n\
    \   On the other hand, if the Last EID is greater than the Last Consulted\n  \
    \ EID, the SWIMA-PV has received a partial result list.  (The Last\n   Consulted\
    \ EID MUST NOT exceed the Last EID.)  In this case, if the\n   SWIMA-PV wishes\
    \ to try to collect the rest of the partially delivered\n   result list, it then\
    \ sends a new SWIMA Request whose EID is one\n   greater than the Last Consulted\
    \ EID in the preceding response.  Doing\n   this causes the SWIMA-PC to generate\
    \ another SWIMA Response attribute\n   containing event records where the earliest\
    \ reported event record is\n   the one immediately after the event record with\
    \ the Last Consulted\n   EID (since EIDs are assigned sequentially).  By repeating\
    \ this\n   process until it receives a SWIMA Response where the Last EID and\n\
    \   Last Consulted EID are equal, the SWIMA-PV is able to collect all\n   event\
    \ records over a given range, even if the complete set of event\n   records would\
    \ be too large to deliver via a single attribute.\n   Implementers need to be\
    \ aware that a SWIMA Request might specify an\n   EID that is greater than the\
    \ EID of the last event recorded by a\n   SWIMA-PC.  In accordance with the behaviors\
    \ described in\n   Section 3.7.4, a SWIMA-PC MUST respond to such a request with\
    \ a SWIMA\n   Response attribute that contains zero event records.  This is because\n\
    \   the SWIMA-PC has recorded no event records with EIDs greater than or\n   equal\
    \ to the EID in the SWIMA Request.  In such a case, the Last\n   Consulted EID\
    \ field MUST be set to the same value as the Last EID\n   field in this SWIMA\
    \ Response attribute.  This case is called out\n   because the consulted range\
    \ on a SWIMA-PC in such a situation is a\n   negative range, where the \"first\"\
    \ EID in the range (provided in the\n   SWIMA Request) is greater than the \"\
    last\" EID in the range (this\n   being the EID of the last recorded event on\
    \ the SWIMA-PC).\n   Implementers need to ensure that SWIMA-PCs do not experience\
    \ problems\n   in such a circumstance.\n   Note that this specification only supports\
    \ the returning of partial\n   results when returning event records.  There is\
    \ no way to return a\n   partial inventory list under this specification.\n"
- title: 3.7.6.  Synchronizing Event Identifiers and Epochs
  contents:
  - "3.7.6.  Synchronizing Event Identifiers and Epochs\n   Since EIDs are sequential\
    \ within an Epoch, if a SWIMA-PV's list of\n   event records contains gaps in\
    \ the EID values within a single Epoch,\n   the SWIMA-PV knows that there are\
    \ events that it has not accounted\n   for.  The SWIMA-PV can request either (1)\
    \ a new event list to collect\n   the missing events or (2) a full inventory to\
    \ resync its\n   understanding of the state of the endpoint's Software Inventory\n\
    \   Evidence Collection.  In either case, after the SWIMA-PV's record of\n   the\
    \ endpoint's Software Inventory Evidence Collection has been\n   updated, the\
    \ SWIMA-PV can record the new latest EID value and track\n   events normally from\
    \ that point on.\n   If the SWIMA-PV receives any attribute from a SWIMA-PC where\
    \ the EID\n   Epoch differs from the EID Epoch that was used previously, then\
    \ the\n   SWIMA-PV or any entity using this information to track the endpoint's\n\
    \   Software Inventory Evidence Collection knows that there is a\n   discontinuity\
    \ in its understanding of the endpoint's state.  To move\n   past this discontinuity\
    \ and reestablish a current understanding of\n   the state of the endpoint's Software\
    \ Inventory Evidence Collection,\n   the SWIMA-PV needs to receive a full inventory\
    \ from the endpoint.\n   The SWIMA-PV cannot be brought in sync with the endpoint's\
    \ state\n   through the collection of any set of event records in this situation.\n\
    \   This is because it is not possible to account for all events on the\n   SWIMA-PC\
    \ since the previous Epoch was used: there is no way to query\n   for EIDs from\
    \ a previous Epoch.  Once the SWIMA-PV has received a\n   full inventory for the\
    \ new Epoch, the SWIMA-PV records the latest EID\n   reported in this new Epoch\
    \ and can track further events normally.\n   A SWIMA-PC MUST NOT report events\
    \ with EIDs from any Epoch other than\n   the current EID Epoch.  The SWIMA-PC\
    \ MAY choose to purge all event\n   records from a previous Epoch from memory\
    \ after an Epoch change.\n   Alternately, the SWIMA-PC MAY choose to retain some\
    \ event records\n   from a previous EID Epoch and assign them new EIDs in the\
    \ current\n   Epoch.  However, in the case where a SWIMA-PC chooses the latter\n\
    \   option it MUST ensure that the order of events according to their\n   EIDs\
    \ is unchanged and that there is no coverage gap between the first\n   retained\
    \ event recorded during the previous Epoch (now reassigned\n   with an EID in\
    \ the current Epoch) and the first event recorded during\n   the current Epoch.\
    \  In particular, the SWIMA-PC MUST ensure that all\n   change events that occurred\
    \ after the last recorded event from the\n   previous Epoch are known and recorded.\
    \  (This might not be possible\n   if the Epoch change is due to state corruption\
    \ on the SWIMA-PC.)  A\n   SWIMA-PC might choose to reassign EIDs to records from\
    \ a preceding\n   Epoch to create a \"sliding window\" of events, where each Epoch\
    \ change\n   represents a shift in the window of available events.\n   In the\
    \ case where a SWIMA-PC suffers a crash and loses track of its\n   current EID\
    \ Epoch or current EID, then it MUST generate a new EID\n   Epoch value and begin\
    \ assigning EIDs within that Epoch.  In this\n   case, the SWIMA-PC MUST purge\
    \ all event records from before the\n   crash, as it cannot ensure that there\
    \ is not a gap between the last\n   of those records and the next detected event.\
    \  The process for\n   generating a new EID Epoch MUST minimize the possibility\
    \ that the\n   newly generated EID Epoch is the same as a previously used EID\
    \ Epoch.\n   The SWIMA-PV will normally never receive an attribute indicating\
    \ that\n   the latest EID is less than the latest EID reported in a previous\n\
    \   attribute within the same EID Epoch.  If this occurs, the SWIMA-PC\n   has\
    \ suffered an error of some kind, possibly indicative of at least\n   partial\
    \ corruption of its event log.  In this case, the SWIMA-PV MUST\n   treat the\
    \ situation as if there was a change in Epoch and treat any\n   local copy of\
    \ the endpoint's Software Inventory Evidence Collection\n   as being out of sync\
    \ until a full inventory can be reported by the\n   SWIMA-PC.  The SWIMA-PV SHOULD\
    \ log the occurrence so the SWIMA-PC can\n   be examined to ensure that it is\
    \ now operating properly.\n"
- title: 3.8.  Subscriptions
  contents:
  - "3.8.  Subscriptions\n   Thus far, all attribute exchanges discussed assume that\
    \ a SWIMA-PV\n   sent a SWIMA Request attribute and the SWIMA-PC is providing\
    \ a direct\n   response to that request.  SWIMA also supports the ability of a\n\
    \   SWIMA-PC to send a SWIMA Response to the SWIMA-PV in response to\n   observed\
    \ changes in the endpoint's Software Inventory Evidence\n   Collection, instead\
    \ of in direct response to a SWIMA Request.  An\n   agreement by a SWIMA-PC to\
    \ send content when certain changes to the\n   endpoint's Software Inventory Evidence\
    \ Collection are detected is\n   referred to in this specification as a \"subscription\"\
    , and the\n   SWIMA-PV that receives this content is said to be \"subscribed to\"\
    \ the\n   given SWIMA-PC.  All SWIMA-PCs and SWIMA-PVs MUST support the use of\n\
    \   subscriptions.\n"
- title: 3.8.1.  Establishing Subscriptions
  contents:
  - "3.8.1.  Establishing Subscriptions\n   A SWIMA-PV establishes a subscription\
    \ on a particular SWIMA-PC by\n   sending a SWIMA Request attribute with the Subscribe\
    \ flag set.  The\n   SWIMA Request attribute is otherwise identical to the SWIMA\
    \ Requests\n   discussed in previous sections.  Specifically, such a SWIMA Request\n\
    \   might or might not request the inclusion of Software Inventory\n   Evidence\
    \ Records, might or might not be targeted, and might request\n   change event\
    \ records or endpoint inventory.  Assuming that no error\n   is encountered, a\
    \ SWIMA-PC MUST send a SWIMA Response attribute in\n   direct response to this\
    \ SWIMA Request attribute, just as if the\n   Subscribe flag was not set.  As\
    \ such, the attribute exchange that\n   establishes a new subscription in a SWIMA-PC\
    \ has the same flow as the\n   flow seen in the previous attribute exchanges,\
    \ as depicted in\n   Figure 2.  If the SWIMA-PV does not receive a PA-TNC Error\
    \ attribute\n   (as described in Sections 3.9 and 5.15) in response to its\n \
    \  subscription request, the subscription has been successfully\n   established\
    \ on the SWIMA-PC.  The SWIMA Request attribute that\n   establishes a new subscription\
    \ is referred to as the \"establishing\n   request\" for that subscription.\n\
    \   When a subscription is established, it is assigned a Subscription ID\n   value.\
    \  The Subscription ID is equal to the value of the Request ID\n   of the establishing\
    \ request.  (For more about Request IDs, see\n   Section 5.5.)\n   A SWIMA-PC\
    \ MUST have the ability to record and support at least 8\n   simultaneous subscriptions\
    \ and SHOULD have the ability to support\n   more than this.  These subscriptions\
    \ might all come from a single\n   SWIMA-PV, might all be from different SWIMA-PVs\
    \ (residing on the same\n   or different NEA Servers), or might be a mix.  In\
    \ the case that a\n   SWIMA-PC receives a subscription request but is unable to\
    \ support an\n   additional subscription, it MUST respond to the request with\
    \ a PA-TNC\n   Error attribute with error code SWIMA_SUBSCRIPTION_DENIED_ERROR.\n\
    \   A SWIMA-PV MUST have the ability to record and support at least 256\n   simultaneous\
    \ subscriptions and SHOULD have the ability to support\n   more than this.  Any\
    \ number of these subscriptions might be to the\n   same SWIMA-PC, and any number\
    \ of these subscriptions might be to\n   different SWIMA-PCs.  In the latter case,\
    \ some of these SWIMA-PCs\n   might share a single endpoint, while others might\
    \ be on different\n   endpoints.\n"
- title: 3.8.2.  Managing Subscriptions
  contents:
  - "3.8.2.  Managing Subscriptions\n   The SWIMA-PC MUST record each accepted subscription\
    \ along with the\n   identity of the party to whom attributes are to be pushed.\
    \  This\n   identity includes two parts:\n   o  An identifier for the PB-TNC session\
    \ between the Posture Broker\n      Server on a NEA Server and the Posture Broker\
    \ Client on the\n      endpoint.  This identifier is called the \"Connection ID\"\
    \n   o  The Posture Validator Identifier for the SWIMA-PV that made the\n    \
    \  subscription request\n   The Posture Validator Identifier is provided in the\
    \ field of the same\n   name in the PB-PA message that encapsulates the subscription\
    \ request\n   attribute (Section 4.5 of [RFC5793]), and this information is passed\n\
    \   along to NEA Posture Collectors (Section 3.3 of [RFC5792]).  The\n   Connection\
    \ ID is a value local to a particular endpoint's Posture\n   Broker Client that\
    \ identifies an ongoing session between a specific\n   Posture Broker Client and\
    \ a specific Posture Broker Server.  Posture\n   Broker Clients and Posture Broker\
    \ Servers need to be capable of\n   supporting multiple simultaneous sessions,\
    \ so they already need a way\n   to locally distinguish each ongoing session.\
    \  (See Section 3.1 of\n   [RFC5793].)  A Posture Broker Client needs to assign\
    \ each session at\n   a given time its own Connection ID that lasts for the life\
    \ of that\n   session.  Connection IDs only need to be unique among the Connection\n\
    \   IDs of simultaneously occurring sessions on that endpoint.  This\n   Connection\
    \ ID needs to be exposed to the SWIMA-PC, and the SWIMA-PC\n   needs to be informed\
    \ when the Connection ID is unbound due to the\n   closure of that connection.\n\
    \   Likewise, SWIMA-PVs MUST record each accepted subscription for which\n   they\
    \ are the subscribing party, including the parameters of the\n   establishing\
    \ request, along with the associated Subscription ID and\n   the identity of the\
    \ SWIMA-PC that will be fulfilling the\n   subscription.  The SWIMA-PV needs to\
    \ retain this information in order\n   to correctly interpret pushed SWIMA Response\
    \ attributes sent in\n   fulfillment of the subscription.  The identity of the\
    \ SWIMA-PC is\n   given in the Posture Collector Identifier [RFC5793] of the PB-PA\n\
    \   message header in all messages from that SWIMA-PC.  The SWIMA-PV has\n   no\
    \ need to record the associated connection ID of the subscription as\n   the SWIMA-PV\
    \ is only receiving, not sending, attributes once a\n   subscription is established.\n"
- title: 3.8.3.  Terminating Subscriptions
  contents:
  - "3.8.3.  Terminating Subscriptions\n   Subscriptions MAY be terminated at any\
    \ time by the subscribing\n   SWIMA-PV by setting the Clear Subscriptions flag\
    \ in a SWIMA Request.\n   (See Section 5.6 for more on using this flag.)  In the\
    \ case that a\n   SWIMA Request with the Clear Subscriptions flag set is received,\
    \ the\n   SWIMA-PC MUST only clear subscriptions that match both the NEA\n   Server's\
    \ Connection ID and the SWIMA-PV's Posture Validator\n   Identifier for this SWIMA\
    \ Request and MUST clear all such\n   subscriptions.\n   This specification does\
    \ not give the SWIMA-PV the ability to\n   terminate subscriptions individually\
    \ -- all subscriptions to the\n   SWIMA-PV are cleared when the Clear Subscriptions\
    \ flag is set.\n   This specification does not give the SWIMA-PC the ability to\n\
    \   unilaterally terminate a subscription.  However, if the SWIMA-PC\n   experiences\
    \ a fatal error while fulfilling a subscription, resulting\n   in sending a PA-TNC\
    \ Error attribute with error code\n   SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR, then\
    \ the subscription whose\n   fulfillment led to the error MUST be treated as terminated\
    \ by both\n   the SWIMA-PC and the SWIMA-PV.  Only the subscription experiencing\n\
    \   the error is cancelled; other subscriptions are unaffected.  See\n   Section\
    \ 3.9 for more on this error condition.\n   Finally, a subscription is terminated\
    \ if the connection between the\n   SWIMA-PC and SWIMA-PV is closed.  This occurs\
    \ when the Connection ID\n   used in the messages between the SWIMA-PC and the\
    \ SWIMA-PV becomes\n   unbound.  Loss of this Connection ID would prevent the\
    \ SWIMA-PC from\n   sending messages in fulfillment of this subscription.  As\
    \ such, loss\n   of the Connection ID necessarily forces subscription termination\n\
    \   between the affected parties.\n"
- title: 3.8.4.  Subscription Status
  contents:
  - "3.8.4.  Subscription Status\n   A SWIMA-PV can request that a SWIMA-PC report\
    \ the list of active\n   subscriptions for which the SWIMA-PV is the subscriber.\
    \  A SWIMA-PV\n   can use this capability to recover lost information about active\n\
    \   subscriptions.  A SWIMA-PV can also use this capability to verify\n   that\
    \ a SWIMA-PC has not forgotten any of its subscriptions.  The\n   latter is especially\
    \ useful in cases where a SWIMA-PC does not send\n   any attributes in fulfillment\
    \ of a given subscription for a long\n   period of time.  The SWIMA-PV can check\
    \ the list of active\n   subscriptions on the SWIMA-PC and verify whether the\
    \ inactivity is\n   due to (1) a lack of reportable events or (2) the SWIMA-PC\
    \ forgetting\n   its obligations to fulfill a given subscription.\n   A SWIMA-PV\
    \ requests a list of its subscriptions on a given SWIMA-PC\n   by sending that\
    \ SWIMA-PC a Subscription Status Request.  The SWIMA-PC\n   MUST then respond\
    \ with a Subscription Status Response (or a PA-TNC\n   Error if an error condition\
    \ is experienced).  The Subscription Status\n   Response MUST contain one subscription\
    \ record for each of the active\n   subscriptions for which the SWIMA-PV is the\
    \ subscribing party.\n"
- title: 3.8.5.  Fulfilling Subscriptions
  contents:
  - "3.8.5.  Fulfilling Subscriptions\n   As noted in Section 3.6, SWIMA-PCs are required\
    \ to automatically\n   detect changes to an endpoint's Software Inventory Evidence\n\
    \   Collection in near real time.  For every active subscription, the\n   SWIMA-PC\
    \ MUST send an attribute to the subscribed SWIMA-PV whenever a\n   change to relevant\
    \ records is detected within the endpoint's Software\n   Inventory Evidence Collection.\
    \  Such an attribute is said to be sent\n   \"in fulfillment of\" the given subscription,\
    \ and any such attribute\n   MUST include that subscription's Subscription ID.\
    \  If the\n   establishing request for that subscription was a targeted request,\n\
    \   then only records that match the Software Identifiers provided in\n   that\
    \ establishing request are considered relevant.  Otherwise (i.e.,\n   for non-targeted\
    \ requests), any record is considered relevant for\n   this purpose.  Figure 3\
    \ shows a sample attribute exchange where a\n   subscription is established and\
    \ then attributes are sent from the\n   SWIMA-PC in fulfillment of the established\
    \ subscription.\n            +-------------+                    +--------------+\n\
    \            |  SWIMA-PC   |                    |   SWIMA-PV   |  Time\n     \
    \       +-------------+                    +--------------+   |\n            \
    \      |                                   |           |\n                  |<----------SWIMA\
    \ Request-----------|           |\n                  |                       \
    \            |           |\n                  |-----------SWIMA Response--------->|\
    \           |\n                  |                                   |       \
    \    |\n                  .                                   .           .\n\
    \                  .                                   .           .\n       \
    \           .                                   .           .\n    <Change Event>|\
    \                                   |           |\n                  |----------SWIMA\
    \ Response---------->|           |\n                  |                      \
    \             |           |\n                  .                             \
    \      .           .\n                  .                                   .\
    \           .\n                  .                                   .       \
    \    .\n    <Change Event>|                                   |           |\n\
    \                  |----------SWIMA Response---------->|           |\n       \
    \           |                                   |           V\n           Figure\
    \ 3: Subscription Establishment and Fulfillment\n   The contents of an attribute\
    \ sent in fulfillment of a subscription\n   depend on the parameters provided\
    \ in the establishing request for\n   that subscription.  Specifically, the attribute\
    \ sent in fulfillment\n   of a subscription has the same attribute type as would\
    \ a direct\n   response to the establishing request.  For example, if the\n  \
    \ establishing request stipulated a response that contained an event\n   record\
    \ list that included Software Inventory Evidence Records, all\n   attributes sent\
    \ in fulfillment of this subscription will also consist\n   of event record lists\
    \ with Software Inventory Evidence Records.  As\n   such, all SWIMA Responses\
    \ displayed in the exchange depicted in\n   Figure 3 are the same attribute type.\
    \  A SWIMA Response generated in\n   fulfillment of an active subscription MUST\
    \ be a valid SWIMA Response\n   attribute according to all the rules outlined\
    \ in the preceding\n   sections.  In other words, an attribute constructed in\
    \ fulfillment of\n   a subscription will look the same as an attribute sent in\
    \ direct\n   response to an explicit request from a SWIMA-PV that had the same\n\
    \   request parameters and that arrived immediately after the given\n   change\
    \ event.  There are a few special rules that expand on this\n   guideline, as\
    \ discussed in Sections 3.8.5.1 through 3.8.5.5.\n"
- title: 3.8.5.1.  Subscriptions That Report Inventories
  contents:
  - "3.8.5.1.  Subscriptions That Report Inventories\n   In the case that a SWIMA-PV\
    \ subscribes to a SWIMA-PC and requests an\n   inventory attribute whenever changes\
    \ are detected (i.e., the EID in\n   the establishing request is 0), then the\
    \ SWIMA-PC MUST send the\n   requested inventory whenever a relevant change is\
    \ detected.  (A\n   \"relevant change\" is any change for non-targeted requests\
    \ or a change\n   to an indicated record in a targeted request.)  Upon detection\
    \ of a\n   relevant change for an active subscription, the SWIMA-PC sends the\n\
    \   appropriate inventory information as if it had just received the\n   establishing\
    \ request.  Inventory attributes sent in fulfillment of\n   this subscription\
    \ will probably have a large amount of redundancy, as\n   the same records are\
    \ likely to be present in each of these SWIMA\n   attributes.  The role of an\
    \ inventory subscription is not to report\n   records just for the items that\
    \ changed -- that is the role of a\n   subscription that reports events (see Section\
    \ 3.8.5.2).  A SWIMA-PC\n   MUST NOT exclude a record from an attribute sent in\
    \ fulfillment of an\n   inventory subscription simply because that record was\
    \ not involved in\n   the triggering event (although a record might be excluded\
    \ for other\n   reasons, such as if the subscription is targeted; see\n   Section\
    \ 3.8.5.3).\n"
- title: 3.8.5.2.  Subscriptions That Report Events
  contents:
  - "3.8.5.2.  Subscriptions That Report Events\n   A SWIMA-PV indicates that it wishes\
    \ to establish a subscription\n   requesting event records by providing a non-zero\
    \ EID in the SWIMA\n   Request establishing the subscription (see Section 3.7.1).\
    \  However,\n   when the SWIMA-PC constructs an attribute in fulfillment of the\n\
    \   subscription (other than the direct response to the establishing\n   request),\
    \ it MUST only include event records for the detected\n   change(s) that precipitated\
    \ this response attribute.  In other words,\n   it MUST NOT send a complete list\
    \ of all changes starting with the\n   establishing request's EID, up through\
    \ the latest change, every time\n   a new event is detected.  In effect, the EID\
    \ in the establishing\n   request is treated as being updated every time an attribute\
    \ is sent\n   in fulfillment of this subscription, such that a single event is\
    \ not\n   reported twice in fulfillment of a single subscription.  As such,\n\
    \   every SWIMA-PC MUST track the EID of the last event that triggered an\n  \
    \ attribute for the given subscription.  When the next event (or set of\n   events)\
    \ is detected, the SWIMA-PC MUST only report events with EIDs\n   after the last\
    \ reported event.  In the case that the EID Epoch of the\n   SWIMA-PC changes,\
    \ the SWIMA-PC MUST reset this EID tracker to zero\n   (if the event log is completely\
    \ purged) or to the new EID of the last\n   reported retained event (if the event\
    \ log is partially purged to\n   create a \"sliding window\").  Doing this ensures\
    \ that the SWIMA-PC\n   continues to only send events that have not been previously\
    \ reported.\n   Note that while a subscription is active, the subscribing SWIMA-PV\n\
    \   MAY make other requests for event records that overlap with events\n   that\
    \ are reported in fulfillment of a subscription.  Such requests\n   are not affected\
    \ by the presence of the subscription, nor is the\n   subscription affected by\
    \ such requests.  In other words, a given\n   request will get the same results\
    \ back whether or not there was a\n   subscription.  Likewise, an attribute sent\
    \ in fulfillment of a\n   subscription will contain the same information whether\
    \ or not other\n   requests had been received from the SWIMA-PV.\n   A SWIMA-PV\
    \ needs to pay attention to the EID Epoch in these\n   attributes, as changes\
    \ in the Epoch might create discontinuities in\n   the SWIMA-PV's understanding\
    \ of the endpoint's Software Inventory\n   Evidence Collection state, as discussed\
    \ in Section 3.7.6.  In\n   particular, once the EID Epoch changes, a SWIMA-PV\
    \ is unable to have\n   confidence that it has a correct understanding of the\
    \ state of an\n   endpoint's Software Inventory Evidence Collection until after\
    \ the\n   SWIMA-PV collects a complete inventory.\n   SWIMA-PCs MAY send partial\
    \ lists of event records in fulfillment of a\n   subscription.  (See Section 3.7.5\
    \ for more on partial lists of event\n   records.)  In the case that a SWIMA-PC\
    \ sends a partial list of event\n   records in fulfillment of a subscription,\
    \ it MUST immediately send\n   the next consecutive partial list and continue\
    \ doing so until it has\n   sent the equivalent of the complete list of event\
    \ records.  In other\n   words, if the SWIMA-PC sends a partial list, it does\
    \ not wait for\n   another change event to send another SWIMA Response; rather,\
    \ it\n   continues sending SWIMA Responses until it has sent all event records\n\
    \   that would have been included in a complete fulfillment of the\n   subscription.\
    \  Note that the direct response to the establishing\n   request is not considered\
    \ to be sent in fulfillment of a\n   subscription.  However, in this case the\
    \ SWIMA-PC MUST treat the\n   presence of unreported events as a triggering event\
    \ for pushing\n   additional messages in fulfillment of the newly established\n\
    \   subscription.  As such, the net effect is that if the direct response\n  \
    \ to the establishing request (i.e., the Subscription Fulfillment flag\n   is\
    \ unset) is partial, the SWIMA-PC will immediately follow this with\n   additional\
    \ attributes (with the Subscription Fulfillment flag set)\n   until the complete\
    \ set of events has been sent to the SWIMA-PV.\n"
- title: 3.8.5.3.  Targeted Subscriptions
  contents:
  - "3.8.5.3.  Targeted Subscriptions\n   Subscriptions MAY be targeted to only apply\
    \ to records that match a\n   given set of Software Identifiers.  In the case\
    \ where changes that\n   affect multiple records are detected -- some matching\
    \ the\n   establishing request's Software Identifiers and some not -- the\n  \
    \ attribute sent in fulfillment of the subscription MUST only include\n   inventory\
    \ or events (as appropriate) for records that match the\n   establishing request's\
    \ Software Identifiers.  The SWIMA-PC MUST NOT\n   include non-matching records\
    \ in the attribute, even if those\n   non-matching records experienced change\
    \ events that were simultaneous\n   with change events on the matching records.\n\
    \   In addition, a SWIMA-PC MUST send an attribute in fulfillment of a\n   targeted\
    \ subscription only when changes to the endpoint's Software\n   Inventory Evidence\
    \ Collection impact one or more records matching the\n   subscription's establishing\
    \ request's Software Identifiers.  A\n   SWIMA-PC MUST NOT send any attribute\
    \ in fulfillment of a targeted\n   subscription based on detected changes to the\
    \ endpoint's Software\n   Inventory Evidence Collection that did not involve any\
    \ of the records\n   targeted by that subscription.\n"
- title: 3.8.5.4.  No Subscription Consolidation
  contents:
  - "3.8.5.4.  No Subscription Consolidation\n   A SWIMA-PV MAY establish multiple\
    \ subscriptions to a given SWIMA-PC.\n   If this is the case, it is possible that\
    \ a single change event on the\n   endpoint might require fulfillment by multiple\
    \ subscriptions and that\n   the information included in attributes that fulfill\
    \ each of these\n   subscriptions might overlap.  The SWIMA-PC MUST send separate\n\
    \   attributes for each established subscription that requires a response\n  \
    \ due to the given event.  Each of these attributes MUST contain all\n   information\
    \ required to fulfill that individual subscription, even if\n   that information\
    \ is also sent in other attributes sent in fulfillment\n   of other subscriptions\
    \ at the same time.  In other words, SWIMA-PCs\n   MUST NOT attempt to combine\
    \ information when fulfilling multiple\n   subscriptions simultaneously, even\
    \ if this results in some redundancy\n   in the attributes sent to the SWIMA-PV.\n"
- title: 3.8.5.5.  Delayed Subscription Fulfillment
  contents:
  - "3.8.5.5.  Delayed Subscription Fulfillment\n   A SWIMA-PC MAY delay the fulfillment\
    \ of a subscription following a\n   change event in the interest of waiting to\
    \ see if additional change\n   events are forthcoming and, if so, conveying the\
    \ relevant records\n   back to the SWIMA-PV in a single SWIMA Response attribute.\
    \  This can\n   help reduce network bandwidth consumption between the SWIMA-PC\
    \ and\n   the SWIMA-PV.  For example, consider a situation where 10 changes\n\
    \   occur a tenth of a second apart.  If the SWIMA-PC does not delay in\n   assembling\
    \ and sending SWIMA Response attributes, the SWIMA-PV will\n   receive 10 separate\
    \ SWIMA Response attributes over a period of\n   1 second.  However, if the SWIMA-PC\
    \ waits half a second after the\n   initial event before assembling a SWIMA Response,\
    \ the SWIMA-PV only\n   receives two SWIMA Response attributes over the same period\
    \ of time.\n   Note that the ability to consolidate events for a single subscription\n\
    \   over a given period of time does not contradict the rules in\n   Section 3.8.5.4\
    \ prohibiting consolidation across multiple\n   subscriptions.  When delaying\
    \ fulfillment of subscriptions, SWIMA-PCs\n   are still required to fulfill each\
    \ individual subscription\n   separately.  Moreover, in the case that change events\
    \ within the\n   delay window cancel each other out (e.g., a record is deleted\
    \ and\n   then re-added), the SWIMA-PC MUST still report each change event,\n\
    \   rather than just report the net effect of changes over the delay\n   period.\
    \  In other words, delayed fulfillment can decrease the number\n   of attributes\
    \ sent by the SWIMA-PC, but it does not reduce the total\n   number of change\
    \ events reported.\n   SWIMA-PCs are not required to support delayed fulfillment\
    \ of\n   subscriptions.  However, in the case that the SWIMA-PC does support\n\
    \   delayed subscription fulfillment, it MUST be possible to configure\n   the\
    \ SWIMA-PC to disable delayed fulfillment.  In other words, parties\n   deploying\
    \ SWIMA-PCs need to be allowed to disable delayed\n   subscription fulfillment\
    \ in their SWIMA-PCs.  The manner in which\n   such configuration occurs is left\
    \ to the discretion of implementers,\n   although implementers MUST protect the\
    \ configuration procedure from\n   unauthorized tampering.  In other words, there\
    \ needs to be some\n   assurance that unauthorized individuals are not able to\
    \ introduce\n   long delays in subscription fulfillment.\n"
- title: 3.9.  Error Handling
  contents:
  - "3.9.  Error Handling\n   In the case where the SWIMA-PC detects an error in a\
    \ SWIMA Request\n   attribute that it receives, it MUST respond with a PA-TNC\
    \ Error\n   attribute with an error code appropriate to the nature of the error.\n\
    \   (See Section 4.2.8 of PA-TNC [RFC5792] for more details about PA-TNC\n   Error\
    \ attributes and error codes, and see Section 5.15 in this\n   specification for\
    \ error codes specific to SWIMA attributes.)  In the\n   case that an error is\
    \ detected in a SWIMA Request, the SWIMA-PC\n   MUST NOT take any action requested\
    \ by this SWIMA Request, even if\n   partial completion of the request is possible.\
    \  In other words, a\n   SWIMA Request that contains an error will be completely\
    \ ignored by\n   the SWIMA-PC (beyond sending a PA-TNC Error attribute and possibly\n\
    \   logging the error locally); no attempt at partial completion of the\n   request\
    \ will be made.\n   In the case where the SWIMA-PC receives a valid SWIMA Request\n\
    \   attribute but experiences an error during the process of responding\n   to\
    \ that attribute's instructions where that error prevents the\n   SWIMA-PC from\
    \ properly or completely fulfilling that request, the\n   SWIMA-PC MUST send a\
    \ PA-TNC Error attribute with an error code\n   appropriate to the nature of the\
    \ error.  In the case where a PA-TNC\n   Error attribute is sent, the SWIMA-PC\
    \ MUST NOT take any of the\n   actions requested by the SWIMA Request attribute\
    \ that led to the\n   detected error.  This is the case even if some actions could\
    \ have\n   been completed successfully and might even require the SWIMA-PC to\n\
    \   reverse some successful actions already taken before the error\n   condition\
    \ was detected.  In other words, either (1) all aspects of a\n   SWIMA Request\
    \ complete fully and successfully (in which case the\n   SWIMA-PC sends a SWIMA\
    \ Response attribute) or (2) no aspects of the\n   SWIMA Request occur (in which\
    \ case the SWIMA-PC sends a PA-TNC Error\n   attribute).  In the case that a SWIMA-PC\
    \ sends a PA-TNC Error\n   attribute in response to a SWIMA Request, then the\
    \ SWIMA-PC MUST NOT\n   also send any SWIMA Response attribute in response to\
    \ the same SWIMA\n   Request.  For this reason, the sending of a SWIMA Response\
    \ attribute\n   MUST be the last action taken by a SWIMA-PC in response to a SWIMA\n\
    \   Request, to avoid the possibility of a processing error occurring\n   after\
    \ that SWIMA Response attribute is sent.\n   In the case that the SWIMA-PC detects\
    \ an error that prevents it from\n   properly or completely fulfilling its obligations\
    \ under an active\n   subscription, the SWIMA-PC MUST send a PA-TNC Error attribute\
    \ with\n   error code SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR to the SWIMA-PV that\n\
    \   established this subscription.  This type of PA-TNC Error attribute\n   identifies\
    \ the specific subscription that cannot be adequately\n   honored due to the error\
    \ condition and also identifies an error\n   \"subtype\".  The error subtype indicates\
    \ the error code of the error\n   condition the SWIMA-PC experienced that prevented\
    \ it from honoring\n   the given subscription.  In the case that the error condition\
    \ cannot\n   be identified or does not align with any of the defined error codes,\n\
    \   the SWIMA_ERROR error code SHOULD be used in the subtype.  In the\n   case\
    \ that a SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR is sent, the\n   associated subscription\
    \ MUST be treated as cancelled by both the\n   SWIMA-PC and the SWIMA-PV.\n  \
    \ The SWIMA-PV MUST NOT send any PA-TNC Error attributes to SWIMA-PCs.\n   In\
    \ the case that a SWIMA-PV detects an error condition, it SHOULD log\n   this\
    \ error, but the SWIMA-PV does not inform any SWIMA-PCs of this\n   event.  Errors\
    \ might include, but are not limited to, the detection\n   of malformed SWIMA\
    \ Response attributes sent from a given SWIMA-PC, as\n   well as the detection\
    \ of error conditions when the SWIMA-PV processes\n   SWIMA Responses.\n   Both\
    \ SWIMA-PCs and SWIMA-PVs SHOULD log errors so that administrators\n   can trace\
    \ the causes of errors.  Log entries SHOULD include the code\n   of the error,\
    \ the time it was detected, and additional descriptive\n   information to aid\
    \ in understanding the nature and cause of the\n   error.  Logs are an important\
    \ debugging tool, and implementers are\n   strongly advised to include comprehensive\
    \ logging capabilities in\n   their products.\n"
- title: 4.  Protocol
  contents:
  - "4.  Protocol\n   The SWIMA protocol supports two different types of message exchanges\n\
    \   for conveying software inventory information.  These message\n   exchanges\
    \ are described in the following subsections, along with\n   implementation requirements\
    \ for supporting them.\n   The SWIMA protocol also supports two simple status\
    \ exchanges: a\n   Subscription Status exchange for conveying information about\
    \ active\n   subscriptions, and a Source Metadata exchange for conveying\n   information\
    \ about a SWIMA-PC's data sources.  In both cases, a\n   SWIMA-PV sends a request\
    \ attribute (Subscription Status Request or\n   Source Metadata Request, respectively)\
    \ and a SWIMA-PC responds with a\n   matching response attribute (Subscription\
    \ Status Response or Source\n   Metadata Response, respectively).  As these exchanges\
    \ are\n   straightforward, no additional information on the exchanges is\n   provided.\n"
- title: 4.1.  Direct Response to a SWIMA Request
  contents:
  - "4.1.  Direct Response to a SWIMA Request\n   The first type of software information\
    \ exchange is used to provide\n   the SWIMA-PV with a software inventory or event\
    \ collection from the\n   queried endpoint.\n       +-------------+          \
    \            +--------------+\n       |  SWIMA-PC   |                      | \
    \  SWIMA-PV   |  Time\n       +-------------+                      +--------------+\
    \   |\n             |                                     |           |\n    \
    \         |<-----------SWIMA Request------------|           |\n             |\
    \                                     |           |\n             |          \
    \ SWIMA Response*           |           |\n             |-----------------or----------------->|\
    \           |\n             |             PA-TNC Error            |          \
    \ |\n             |                                     |           V\n     *SWIMA\
    \ Response is one of the following: Software Identifier\n      Inventory, Software\
    \ Identifier Events, Software Inventory,\n      or Software Events.\n   Figure\
    \ 4: SWIMA Attribute Exchange (Direct Response to SWIMA Request)\n   In this exchange,\
    \ the SWIMA-PV indicates to the SWIMA-PC, via a SWIMA\n   Request, the nature\
    \ of the information it wishes to receive\n   (inventory vs. events, full or targeted)\
    \ and how it wishes the\n   returned inventory to be expressed (with or without\
    \ Software\n   Inventory Evidence Records).  The SWIMA-PC responds with the\n\
    \   requested information using the appropriate attribute type.  A single\n  \
    \ SWIMA Request MUST only lead to a single SWIMA Response or PA-TNC\n   Error\
    \ that is in direct response to that request.\n"
- title: 4.2.  Subscription-Based Response
  contents:
  - "4.2.  Subscription-Based Response\n   The second type of software information\
    \ exchange allows change-event-\n   based reporting based on a subscription. \
    \ If there is an active\n   subscription on the endpoint, the SWIMA-PC sends a\
    \ SWIMA Response to\n   the SWIMA-PV following a change event on the endpoint\
    \ in fulfillment\n   of that subscription.  Such an exchange is shown in Figure\
    \ 5.\n            +-------------+                +--------------+\n          \
    \  |  SWIMA-PC   |                |   SWIMA-PV   |  Time\n            +-------------+\
    \                +--------------+   |\n                  |                   \
    \            |           |\n    <Change Event>|                              \
    \ |           |\n                  |------SWIMA Response(s)*------>|         \
    \  |\n                  |                               |           |\n      \
    \            |                               |           V\n     *SWIMA Response\
    \ is one of the following: Software Identifier\n      Inventory, Software Identifier\
    \ Events, Software Inventory,\n      or Software Events.\n         Figure 5: SWIMA\
    \ Attribute Exchange (in Fulfillment of an\n                           Active\
    \ Subscription)\n   Note that unlike direct responses to a SWIMA Request, a single\
    \ change\n   event can precipitate multiple SWIMA Responses for a single\n   subscription,\
    \ but only if all but the last of those SWIMA Responses\n   convey partial lists\
    \ of event records.  When providing multiple SWIMA\n   Responses in this way,\
    \ the initial responses contain partial lists of\n   event records and the last\
    \ of those SWIMA Responses conveys the\n   remainder of the relevant event records,\
    \ completing the delivery of\n   all relevant events in response to the change\
    \ event.  A single change\n   event MUST NOT otherwise be followed by multiple\
    \ SWIMA Responses or\n   PA-TNC Error attributes in any combination.\n"
- title: 4.3.  Required Exchanges
  contents:
  - "4.3.  Required Exchanges\n   All SWIMA-PVs and SWIMA-PCs MUST support both types\
    \ of software\n   information exchanges.  In particular, SWIMA-PCs MUST be capable\
    \ of\n   pushing a SWIMA Response to a SWIMA-PV immediately upon detection of\n\
    \   a change to the endpoint's Software Inventory Evidence Collection in\n   fulfillment\
    \ of established SWIMA-PV subscriptions, as described in\n   Section 3.8.\n  \
    \ All SWIMA-PCs MUST support both status exchanges (Subscription Status\n   and\
    \ Source Metadata); SWIMA-PVs are recommended to support these\n   status exchanges,\
    \ but doing so is not required.\n"
- title: 5.  Software Inventory Messages and Attributes
  contents:
  - "5.  Software Inventory Messages and Attributes\n   This section describes the\
    \ format and semantics of the SWIMA\n   protocol.  This protocol uses the PA-TNC\
    \ message header format\n   [RFC5792].\n"
- title: 5.1.  PA Subtype (aka PA-TNC Component Type)
  contents:
  - "5.1.  PA Subtype (aka PA-TNC Component Type)\n   The NEA PB-TNC [RFC5793] interface\
    \ provides a general\n   message-batching protocol capable of carrying one or\
    \ more PA-TNC\n   messages between the Posture Broker Client and Posture Broker\
    \ Server.\n   When PB-TNC is carrying a PA-TNC message, the PB-TNC message headers\n\
    \   contain a 32-bit identifier called the \"PA Subtype\".  The PA Subtype\n \
    \  field indicates the type of component associated with all of the\n   PA-TNC\
    \ attributes carried by the PB-TNC message.  The core set of\n   PA Subtypes is\
    \ defined in the PA-TNC specification.  This\n   specification defines a new \"\
    SWIMA Attributes\" PA Subtype, which is\n   registered in Section 10.2 of this\
    \ document and is used as a\n   namespace for the collection of SWIMA attributes\
    \ defined in this\n   document.\n   For more information on PB-TNC messages and\
    \ PA-TNC messages, as well\n   as their message headers, see the PB-TNC [RFC5793]\
    \ and PA-TNC\n   [RFC5792] specifications, respectively.\n"
- title: 5.2.  SWIMA Attribute Overview
  contents:
  - "5.2.  SWIMA Attribute Overview\n   Each PA-TNC attribute described in this specification\
    \ is intended to\n   be sent between the SWIMA-PC and SWIMA-PV and so will be\
    \ carried in a\n   PB-TNC message indicating a PA Subtype of \"SWIMA Attributes\"\
    .  PB-TNC\n   messages MUST always include the SWIMA Attributes Subtype defined\
    \ in\n   Section 5.1 when carrying SWIMA attributes over PA-TNC.  The\n   attributes\
    \ defined in this specification appear below, along with a\n   short summary of\
    \ their purposes.\n   PA-TNC attribute types are identified in the PA-TNC Attribute\
    \ Header\n   via the PA-TNC Attribute Vendor ID field and the PA-TNC Attribute\n\
    \   Type field; see Section 4.1 of [RFC5792] for details.  Table 1\n   identifies\
    \ the appropriate values for these fields for each attribute\n   type used within\
    \ the SWIMA protocol.  All attributes have a PEN value\n   of 0x000000.  Both\
    \ the hexadecimal and decimal values are provided in\n   the Integer column in\
    \ the table.  Each attribute is described in\n   greater detail in subsequent\
    \ sections (identified in the table's\n   Description column).\n   +--------------+-----------------+----------------------------------+\n\
    \   | Attribute    | Integer         | Description                      |\n  \
    \ | Name         |                 |                                  |\n   +--------------+-----------------+----------------------------------+\n\
    \   | SWIMA        | 0x0000000D (13) | Request sent from a SWIMA-PV to  |\n  \
    \ | Request      |                 | a SWIMA-PC for the SWIMA-PC to   |\n   |\
    \              |                 | provide a software inventory or  |\n   |  \
    \            |                 | event list.  It might also       |\n   |    \
    \          |                 | establish a subscription.        |\n   |      \
    \        |                 | (Section 5.6)                    |\n   |        \
    \      |                 |                                  |\n   | Software \
    \    | 0x0000000E (14) | An inventory sent without        |\n   | Identifier \
    \  |                 | Software Inventory Evidence      |\n   | Inventory    |\
    \                 | Records sent from a SWIMA-PC.    |\n   |              |  \
    \               | (Section 5.7)                    |\n   |              |    \
    \             |                                  |\n   | Software     | 0x0000000F\
    \ (15) | A collection of events impacting |\n   | Identifier   |             \
    \    | the endpoint's Software          |\n   | Events       |               \
    \  | Inventory Evidence Collection,   |\n   |              |                 |\
    \ where events do not include      |\n   |              |                 | Software\
    \ Inventory Evidence      |\n   |              |                 | Records.  (Section\
    \ 5.8)          |\n   |              |                 |                     \
    \             |\n   | Software     | 0x00000010 (16) | An inventory including\
    \ Software  |\n   | Inventory    |                 | Inventory Evidence Records\
    \ sent  |\n   |              |                 | from a SWIMA-PC.  (Section 5.9)\
    \  |\n   |              |                 |                                  |\n\
    \   | Software     | 0x00000011 (17) | A collection of events impacting |\n  \
    \ | Events       |                 | the endpoint's Software          |\n   |\
    \              |                 | Inventory Evidence Collection,   |\n   |  \
    \            |                 | where events include Software    |\n   |    \
    \          |                 | Inventory Evidence Records.      |\n   |      \
    \        |                 | (Section 5.10)                   |\n   |        \
    \      |                 |                                  |\n   | Subscription\
    \ | 0x00000012 (18) | A request for a list of a        |\n   | Status       |\
    \                 | SWIMA-PV's active subscriptions  |\n   | Request      |  \
    \               | on a SWIMA-PC.  (Section 5.11)   |\n   |              |    \
    \             |                                  |\n   | Subscription | 0x00000013\
    \ (19) | A list of a SWIMA-PV's active    |\n   | Status       |             \
    \    | subscriptions on a SWIMA-PC.     |\n   | Response     |               \
    \  | (Section 5.12)                   |\n   |              |                 |\
    \                                  |\n   | Source       | 0x00000014 (20) | A\
    \ request for information about  |\n   | Metadata     |                 | a SWIMA-PC's\
    \ data sources.       |\n   | Request      |                 | (Section 5.13)\
    \                   |\n   |              |                 |                 \
    \                 |\n   | Source       | 0x00000015 (21) | Descriptive metadata\
    \ about a     |\n   | Metadata     |                 | SWIMA-PC's data sources.\
    \         |\n   | Response     |                 | (Section 5.14)            \
    \       |\n   |              |                 |                             \
    \     |\n   | PA-TNC Error | 0x00000008 (8)  | An error attribute as defined in\
    \ |\n   |              |                 | the PA-TNC specification         |\n\
    \   |              |                 | [RFC5792].                       |\n  \
    \ +--------------+-----------------+----------------------------------+\n    \
    \               Table 1: SWIMA Attribute Enumeration\n   Because one of the Software\
    \ Identifier Inventory, Software Identifier\n   Events, Software Inventory, or\
    \ Software Events attributes is expected\n   to be sent to a SWIMA-PV in direct\
    \ response to a SWIMA Request\n   attribute or in fulfillment of an active subscription,\
    \ those four\n   attribute types are referred to collectively in this document\
    \ as\n   \"SWIMA Response attributes\".\n   All SWIMA-PVs MUST be capable of sending\
    \ SWIMA Request attributes and\n   be capable of receiving and processing all\
    \ SWIMA Response attributes\n   as well as PA-TNC Error attributes.  All SWIMA-PCs\
    \ MUST be capable of\n   receiving and processing SWIMA Request attributes and\
    \ be capable of\n   sending all types of SWIMA Response attributes as well as\
    \ PA-TNC\n   Error attributes.  SWIMA-PVs MUST ignore any SWIMA Request attributes\n\
    \   that they receive.  SWIMA-PCs MUST ignore any SWIMA Response\n   attributes\
    \ or PA-TNC Error attributes that they receive.\n"
- title: 5.3.  Message Diagram Syntax
  contents:
  - "5.3.  Message Diagram Syntax\n   This specification uses diagrams to define the\
    \ syntax of new PA-TNC\n   messages and attributes.  Each diagram depicts the\
    \ format and size of\n   each field in bits.  Implementations MUST send the bits\
    \ depicted in\n   each diagram as they are shown from left to right for each 32-bit\n\
    \   quantity, \"traversing\" the diagram from top to bottom.  Fields\n   representing\
    \ numeric values MUST be sent in network (big endian) byte\n   order.\n   Descriptions\
    \ of bit field (e.g., flag) values refer to the position\n   of the bit within\
    \ the field.  These bit positions are numbered from\n   the most significant bit\
    \ through the least significant bit.  As such,\n   an octet with only bit 0 set\
    \ would have a value of 0x80 (1000 0000),\n   an octet with only bit 1 set would\
    \ have a value of 0x40 (0100 0000),\n   and an octet with only bit 7 set would\
    \ have a value of 0x01\n   (0000 0001).\n"
- title: 5.4.  Normalization of Text Encoding
  contents:
  - "5.4.  Normalization of Text Encoding\n   In order to ensure consistency of transmitted\
    \ attributes, some fields\n   require normalization of their format.  When this\
    \ is necessary, this\n   information is indicated in the field's description.\
    \  In such cases,\n   the field contents MUST be normalized to Network Unicode\
    \ format as\n   defined in RFC 5198 [RFC5198].  Network Unicode format defines\
    \ a\n   refinement of UTF-8 [RFC3629] that ensures a normalized expression of\n\
    \   characters.  SWIMA-PCs and SWIMA-PVs MUST NOT perform conversion and\n   normalization\
    \ on any field values except those specifically\n   identified in the following\
    \ sections as requiring normalization.\n   Note, however, that some data models\
    \ require additional normalization\n   before source information is added to an\
    \ endpoint's Software\n   Inventory Evidence Collection as a record.  The references\
    \ from the\n   \"Software Data Model Types\" registry (see Section 10.5) will\
    \ note\n   where this is necessary.\n"
- title: 5.5.  Request IDs
  contents:
  - "5.5.  Request IDs\n   All SWIMA Request attributes MUST include a Request ID\
    \ value.  The\n   Request ID field provides a value that identifies a given request\n\
    \   relative to other requests between a SWIMA-PV and the receiving\n   SWIMA-PC.\
    \  Specifically, the SWIMA-PV assigns each SWIMA Request\n   attribute a Request\
    \ ID value that is intended to be unique within the\n   lifetime of a given network\
    \ Connection ID.\n   In the case that a SWIMA Request requests the establishment\
    \ of a\n   subscription and the receiving SWIMA-PC agrees to that subscription,\n\
    \   the Request ID of that SWIMA Request (i.e., the establishing request\n   of\
    \ the subscription) becomes that subscription's Subscription ID.\n   All attributes\
    \ sent in fulfillment of this subscription include a\n   flag indicating that\
    \ the attribute fulfills a subscription and the\n   subscription's Subscription\
    \ ID.  A SWIMA-PV MUST NOT reuse a Request\n   ID value in communications with\
    \ a given SWIMA-PC while that Request\n   ID is also serving as a Subscription\
    \ ID for an active subscription\n   with that SWIMA-PC.  In the case where a SWIMA-PC\
    \ receives a SWIMA\n   Request from a given SWIMA-PV where that Request ID is\
    \ also the\n   Subscription ID of an active subscription with that SWIMA-PV, the\n\
    \   SWIMA-PC MUST respond with a PA-TNC Error attribute with an error\n   code\
    \ of SWIMA_SUBSCRIPTION_ID_REUSE_ERROR.  Note that this error does\n   not cancel\
    \ the indicated subscription.\n   Subscription Status Requests and Subscription\
    \ Status Responses do not\n   include Request IDs.\n   In the case where all possible\
    \ Request ID values have been exhausted\n   within the lifetime of a single network\
    \ Connection ID, the sender MAY\n   reuse previously used Request IDs within the\
    \ same network connection\n   if the ID is not being used as a Subscription ID.\
    \  In the case where\n   reuse is necessary due to exhaustion of possible ID values,\
    \ the\n   SWIMA-PV SHOULD structure the reuse to maximize the time between\n \
    \  original and subsequent use.  The Request ID value is included in a\n   SWIMA\
    \ Response attribute directly responding to this SWIMA Request to\n   indicate\
    \ which SWIMA Request was received and caused the response.\n   Request IDs can\
    \ be randomly generated or sequential, as long as\n   values are not repeated\
    \ per the rules in this paragraph.  SWIMA-PCs\n   are not required to check for\
    \ duplicate Request IDs, except insofar\n   as is necessary to detect Subscription\
    \ ID reuse.\n"
- title: 5.6.  SWIMA Request
  contents:
  - "5.6.  SWIMA Request\n   A SWIMA-PV sends this attribute to a SWIMA-PC to request\
    \ that the\n   SWIMA-PC send software inventory information to the SWIMA-PV. \
    \ A\n   SWIMA-PC MUST NOT send this attribute.\n                        1    \
    \               2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Flags        |       Software Identifier Count               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Request ID                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Earliest EID                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \  SUB-BLOCK (Repeated \"Software Identifier Count\" times)     |\n   |      \
    \                                                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 6: SWIMA Request Attribute\n                    \
    \    1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Software Identifier Length  | Software Identifier (var len) |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 7: SWIMA Request Attribute SUB-BLOCK\n   +---------------+---------------------------------------------------+\n\
    \   | Field         | Description                                       |\n  \
    \ +---------------+---------------------------------------------------+\n   |\
    \ Flags: Bit 0  | If set (1), the SWIMA-PC MUST delete all          |\n   | -\
    \ Clear       | subscriptions established by the requesting       |\n   | Subscriptions\
    \ | SWIMA-PV (barring any errors).                    |\n   |               |\
    \                                                   |\n   | Flags: Bit 1  | If\
    \ set (1), in addition to responding to the      |\n   | - Subscribe   | request\
    \ as described, the SWIMA-PC MUST establish |\n   |               | a subscription\
    \ with parameters matching those in  |\n   |               | the SWIMA Request\
    \ attribute (barring any errors). |\n   |               |                    \
    \                               |\n   | Flags: Bit 2  | If unset (0), the SWIMA-PC's\
    \ response MUST        |\n   | - Result Type | include Software Inventory Evidence\
    \ Records, and  |\n   |               | thus the response MUST be a Software Inventory,\
    \   |\n   |               | Software Events, or PA-TNC Error attribute.  If  \
    \ |\n   |               | set (1), the response MUST NOT include Software   |\n\
    \   |               | Inventory Evidence Records, and thus the response |\n  \
    \ |               | MUST be a Software Identifier Inventory, Software |\n   |\
    \               | Identifier Events, or PA-TNC Error attribute.     |\n   |  \
    \             |                                                   |\n   | Flags:\
    \ Bits   | Reserved for future use.  This field MUST be set  |\n   | 3-7 -   \
    \      | to zero on transmission and ignored upon          |\n   | Reserved  \
    \    | reception.                                        |\n   |             \
    \  |                                                   |\n   | Software      |\
    \ A 3-byte unsigned integer indicating the number   |\n   | Identifier    | of\
    \ Software Identifiers that follow.  If this     |\n   | Count         | value\
    \ is non-zero, this is a targeted request, as |\n   |               | described\
    \ in Section 3.5.  The Software           |\n   |               | Identifier Length\
    \ and Software Identifier fields  |\n   |               | are repeated, in order,\
    \ the number of times       |\n   |               | indicated in this field. \
    \ In the case where       |\n   |               | Software Identifiers are present,\
    \ the SWIMA-PC    |\n   |               | MUST only report software that corresponds\
    \ to the |\n   |               | identifiers the SWIMA-PV provided in this   \
    \      |\n   |               | attribute (or respond with a PA-TNC Error     \
    \    |\n   |               | attribute).  This field value MAY be 0, in which\
    \  |\n   |               | case there are no instances of the Software       |\n\
    \   |               | Identifier Length and Software Identifier fields. |\n  \
    \ |               | In this case, the SWIMA-PV is indicating an       |\n   |\
    \               | interest in all Software Inventory Evidence       |\n   |  \
    \             | Records on the endpoint (i.e., this is not a      |\n   |    \
    \           | targeted request).                                |\n   |      \
    \         |                                                   |\n   | Request\
    \ ID    | A value that uniquely identifies this SWIMA       |\n   |          \
    \     | Request from a particular SWIMA-PV.               |\n   |            \
    \   |                                                   |\n   | Earliest EID \
    \ | In the case where the SWIMA-PV is requesting      |\n   |               |\
    \ software events, this field contains the EID      |\n   |               | value\
    \ of the earliest event the SWIMA-PV wishes   |\n   |               | to have\
    \ reported.  (Note: The report will be      |\n   |               | inclusive\
    \ of the event with this EID value.)  In  |\n   |               | the case where\
    \ the SWIMA-PV is requesting an      |\n   |               | inventory, then this\
    \ field MUST be 0              |\n   |               | (0x00000000).  In the case\
    \ where this field is    |\n   |               | non-zero, the SWIMA-PV is requesting\
    \ events, and  |\n   |               | the SWIMA-PC MUST respond using a Software\
    \        |\n   |               | Events, Software Identifier Events, or PA-TNC\
    \     |\n   |               | Error attribute.  In the case where this field is\
    \ |\n   |               | zero, the SWIMA-PV is requesting an inventory,    |\n\
    \   |               | and the SWIMA-PC MUST respond using a Software    |\n  \
    \ |               | Inventory, Software Identifier Inventory, or      |\n   |\
    \               | PA-TNC Error attribute.                           |\n   |  \
    \             |                                                   |\n   | Software\
    \      | A 2-byte unsigned integer indicating the length,  |\n   | Identifier\
    \    | in bytes, of the Software Identifier field.       |\n   | Length      \
    \  |                                                   |\n   |               |\
    \                                                   |\n   | Software      | A\
    \ string containing the Software Identifier value |\n   | Identifier    | from\
    \ a Software Inventory Evidence Record.  This  |\n   |               | field value\
    \ MUST be normalized to Network Unicode |\n   |               | format, as described\
    \ in Section 5.4.  This string |\n   |               | MUST NOT be null terminated.\
    \                      |\n   +---------------+---------------------------------------------------+\n\
    \                  Table 2: SWIMA Request Attribute Fields\n   The SWIMA-PV sends\
    \ the SWIMA Request attribute to a SWIMA-PC to\n   request the indicated information.\
    \  Note that between the Result Type\n   flag and the Earliest EID field, the\
    \ SWIMA-PC is constrained to a\n   single possible SWIMA Response attribute type\
    \ (or a PA-TNC Error\n   attribute) in its response to the request.\n   The Subscribe\
    \ flag and the Clear Subscriptions flag are used to\n   manage subscriptions for\
    \ the requesting SWIMA-PV on the receiving\n   SWIMA-PC.  Specifically, an attribute\
    \ with the Subscribe flag set\n   seeks to establish a new subscription by the\
    \ requesting SWIMA-PV to\n   the given SWIMA-PC, while an attribute with the Clear\
    \ Subscriptions\n   flag set seeks to delete all existing subscriptions by the\
    \ requesting\n   SWIMA-PV on the given SWIMA-PC.  Note that in the latter case,\
    \ only\n   the subscriptions associated with the Connection ID and the Posture\n\
    \   Validator Identifier of the requester are deleted as described in\n   Section\
    \ 3.8.3.  A newly established subscription has the parameters\n   outlined in\
    \ the SWIMA Request attribute.  Specifically, the Result\n   Type flag indicates\
    \ the type of result to send in fulfillment of the\n   subscription, the value\
    \ of the Earliest EID field indicates whether\n   the fulfillment attributes list\
    \ inventories or events, and the fields\n   describing Software Identifiers (if\
    \ present) indicate if and how a\n   subscription is targeted.  In the case that\
    \ the SWIMA-PC is unable or\n   unwilling to comply with the SWIMA-PV's request\
    \ to establish or clear\n   subscriptions, the SWIMA-PC MUST respond with a PA-TNC\
    \ Error\n   attribute with the SWIMA_SUBSCRIPTION_DENIED_ERROR error code.  If\n\
    \   the SWIMA-PV requests that subscriptions be cleared but has no\n   existing\
    \ subscriptions, this is not an error.\n   An attribute requesting the establishment\
    \ of a subscription is\n   effectively doing \"double duty\", as it is a request\
    \ for an immediate\n   response from the SWIMA-PC in addition to setting up the\n\
    \   subscription.  Assuming that the SWIMA-PC is willing to comply with\n   the\
    \ subscription, it MUST send an appropriate response attribute to a\n   request\
    \ with the Subscribe flag set containing all requested\n   information.  The same\
    \ is true of the Clear Subscriptions flag --\n   assuming that there is no error,\
    \ the SWIMA-PC MUST generate a\n   response attribute without regard to the presence\
    \ of this flag, in\n   addition to clearing its subscription list.\n   Both the\
    \ Subscribe flag and the Clear Subscriptions flag MAY be set\n   in a single SWIMA\
    \ Request attribute.  In the case where this request\n   is successful, the end\
    \ result MUST be equivalent to the SWIMA-PC\n   clearing its subscription list\
    \ for the given SWIMA-PV first and then\n   creating a new subscription in accordance\
    \ with the request\n   parameters.  In other words, do not first create the new\
    \ subscription\n   and then clear all the subscriptions (including the one that\
    \ was just\n   created).  In the case that the requested actions are successfully\n\
    \   completed, the SWIMA-PC MUST respond with a SWIMA Response attribute.\n  \
    \ The specific type of SWIMA Response attribute depends on the Result\n   Type\
    \ flag and the Earliest EID field, as described above.  In the\n   case where\
    \ there is a failure that prevents some part of this request\n   from completing,\
    \ the SWIMA-PC MUST NOT add a new subscription,\n   MUST NOT clear the old subscriptions,\
    \ and MUST respond with a PA-TNC\n   Error attribute.  In other words, the SWIMA-PC\
    \ MUST NOT partially\n   succeed at implementing such a request; either all actions\
    \ succeed or\n   none succeed.\n   The Earliest EID field is used to indicate\
    \ if the SWIMA-PV is\n   requesting an inventory or event list from the SWIMA-PC.\
    \  A value of\n   0 (0x00000000) represents a request for inventory information.\n\
    \   Otherwise, the SWIMA-PV is requesting event information.  For\n   Earliest\
    \ EID values other than 0, the SWIMA-PC MUST respond with\n   event records, as\
    \ described in Section 3.7.  Note that the request\n   does not identify a particular\
    \ EID Epoch, since responses can only\n   include events in the SWIMA-PC's current\
    \ EID Epoch.\n   The Software Identifier Count indicates the number of Software\n\
    \   Identifiers in the attribute.  This number might be any value between\n  \
    \ 0 and 16,777,216, inclusive.  A single Software Identifier is\n   represented\
    \ by the following fields: Software Identifier Length and\n   Software Identifier.\
    \  These fields are repeated a number of times\n   equal to the Software Identifier\
    \ Count, which may be 0.  The Software\n   Identifier Length field indicates the\
    \ number of bytes allocated to\n   the Software Identifier field.  The Software\
    \ Identifier field\n   contains a Software Identifier as described in Section\
    \ 3.4.1.  The\n   presence of one or more Software Identifiers is used by the\
    \ SWIMA-PV\n   to indicate a targeted request, which seeks only inventories of\
    \ or\n   events affecting software corresponding to the given identifiers.\n \
    \  The SWIMA-PC MUST only report software that matched the Software\n   Identifiers\
    \ provided in the SWIMA-PV's SWIMA Request attribute.\n"
- title: 5.7.  Software Identifier Inventory
  contents:
  - "5.7.  Software Identifier Inventory\n   A SWIMA-PC sends this attribute to a\
    \ SWIMA-PV to convey the inventory\n   of the endpoint's Software Inventory Evidence\
    \ Collection without the\n   inclusion of Software Inventory Evidence Records.\
    \  This list might\n   represent a complete inventory or a targeted list of records,\n\
    \   depending on the parameters in the SWIMA-PV's request.  A SWIMA-PV\n   MUST\
    \ NOT send this attribute.  The SWIMA-PC sends this attribute\n   either (1) in\
    \ fulfillment of an existing subscription where the\n   establishing request has\
    \ a Result Type of 1 and the Earliest EID is\n   zero or (2) in direct response\
    \ to a SWIMA Request attribute where the\n   Result Type is 1 and the Earliest\
    \ EID is zero.\n                        1                   2                \
    \   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Flags\
    \        |         Software Identifier Count             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Request ID Copy / Subscription ID               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        EID Epoch                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Last EID                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \  SUB-BLOCK (Repeated \"Software Identifier Count\" times)     |\n   |      \
    \                                                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 8: Software Identifier Inventory Attribute\n            \
    \            1                   2                   3\n    0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Record Identifier                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Data Model Type PEN                 |Data Model Type|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Source Id Num |  Reserved     |   Software Identifier Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Software Identifier (variable length)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Software Locator Length     |Software Locator (variable len)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        Figure 9: Software Identifier Inventory Attribute SUB-BLOCK\n   +----------------+--------------------------------------------------+\n\
    \   | Field          | Description                                      |\n  \
    \ +----------------+--------------------------------------------------+\n   |\
    \ Flags: Bit 0 - | In the case that this attribute is sent in       |\n   | Subscription\
    \   | fulfillment of a subscription, this bit MUST be  |\n   | Fulfillment   \
    \ | set (1).  In the case that this attribute is a   |\n   |                |\
    \ direct response to a SWIMA Request, this bit     |\n   |                | MUST\
    \ be unset (0).                               |\n   |                |       \
    \                                           |\n   | Flags: Bits    | Reserved\
    \ for future use.  This field MUST be set |\n   | 1-7 - Reserved | to zero on\
    \ transmission and ignored upon         |\n   |                | reception.  \
    \                                     |\n   |                |               \
    \                                   |\n   | Software       | The number of Software\
    \ Identifiers that follow.  |\n   | Identifier     | This field is an unsigned\
    \ integer.  The Record   |\n   | Count          | Identifier, Data Model Type\
    \ PEN, Data Model      |\n   |                | Type, Source Identification Number,\
    \ Reserved,    |\n   |                | Software Identifier Length, Software Identifier,\
    \ |\n   |                | Software Locator Length, and Software Locator    |\n\
    \   |                | fields are repeated, in order, the number of     |\n  \
    \ |                | times indicated in this field.  This field value |\n   |\
    \                | MAY be 0, in which case there are no instances   |\n   |  \
    \              | of these fields.                                 |\n   |    \
    \            |                                                  |\n   | Request\
    \ ID     | In the case where this attribute is in direct    |\n   | Copy /   \
    \      | response to a SWIMA Request attribute from a     |\n   | Subscription\
    \   | SWIMA-PV, this field MUST contain an exact copy  |\n   | ID            \
    \ | of the Request ID field from that SWIMA Request. |\n   |                |\
    \ In the case where this attribute is sent in      |\n   |                | fulfillment\
    \ of an active subscription, this      |\n   |                | field MUST contain\
    \ the Subscription ID of the    |\n   |                | subscription being fulfilled\
    \ by this attribute.  |\n   |                |                               \
    \                   |\n   | EID Epoch      | The EID Epoch of the Last EID value.\
    \  This field |\n   |                | is a 4-byte unsigned integer.         \
    \           |\n   |                |                                         \
    \         |\n   | Last EID       | The EID of the last event recorded by the \
    \       |\n   |                | SWIMA-PC, or 0 if the SWIMA-PC has no recorded\
    \   |\n   |                | events.  This field is a 4-byte unsigned        \
    \ |\n   |                | integer.                                         |\n\
    \   |                |                                                  |\n  \
    \ | Record         | A 4-byte unsigned integer containing the Record  |\n   |\
    \ Identifier     | Identifier value from a Software Inventory       |\n   |  \
    \              | Evidence Record.                                 |\n   |    \
    \            |                                                  |\n   | Data Model\
    \     | A 3-byte unsigned integer containing the Private |\n   | Type PEN    \
    \   | Enterprise Number (PEN) of the organization that |\n   |               \
    \ | assigned the meaning of the Data Model Type      |\n   |                |\
    \ value.                                           |\n   |                |  \
    \                                                |\n   | Data Model     | A 1-byte\
    \ unsigned integer containing an          |\n   | Type           | identifier\
    \ number that identifies the data model |\n   |                | of the reported\
    \ record.                          |\n   |                |                  \
    \                                |\n   | Source         | The Source Identifier\
    \ number associated with the |\n   | Identification | source from which this software\
    \ installation     |\n   | Number         | inventory instance was reported. \
    \                |\n   |                |                                    \
    \              |\n   | Reserved       | Reserved for future use.  This field MUST\
    \ be set |\n   |                | to zero on transmission and ignored upon   \
    \      |\n   |                | reception.                                   \
    \    |\n   |                |                                                \
    \  |\n   | Software       | A 2-byte unsigned integer indicating the length, |\n\
    \   | Identifier     | in bytes, of the Software Identifier field.      |\n  \
    \ | Length         |                                                  |\n   |\
    \                |                                                  |\n   | Software\
    \       | A string containing the Software Identifier      |\n   | Identifier\
    \     | value from a Software Inventory Evidence Record. |\n   |             \
    \   | This field value MUST be normalized to Network   |\n   |               \
    \ | Unicode format, as described in Section 5.4.     |\n   |                |\
    \ This string MUST NOT be null terminated.         |\n   |                |  \
    \                                                |\n   | Software       | A 2-byte\
    \ unsigned integer indicating the length, |\n   | Locator Length | in bytes, of\
    \ the Software Locator field.         |\n   |                |               \
    \                                   |\n   | Software       | A string containing\
    \ the Software Locator value.  |\n   | Locator        | This field value MUST\
    \ first be normalized to     |\n   |                | Network Unicode format,\
    \ as described in          |\n   |                | Section 5.4, and then encoded\
    \ as a URI           |\n   |                | [RFC3986].  This string MUST NOT\
    \ be null         |\n   |                | terminated.                       \
    \               |\n   +----------------+--------------------------------------------------+\n\
    \          Table 3: Software Identifier Inventory Attribute Fields\n   In the\
    \ case that this attribute is sent in fulfillment of a\n   subscription, the Subscription\
    \ Fulfillment bit MUST be set (1).  In\n   the case that this attribute is sent\
    \ in direct response to a SWIMA\n   Request, the Subscription Fulfillment bit\
    \ MUST be unset (0).  Note\n   that the SWIMA Response attribute sent in direct\
    \ response to a SWIMA\n   Request that establishes a subscription (i.e., a subscription's\n\
    \   establishing request) MUST be treated as a direct response to that\n   SWIMA\
    \ Request (and thus the Subscription Fulfillment bit is unset).\n   SWIMA Response\
    \ attributes are only treated as being in fulfillment of\n   a subscription (i.e.,\
    \ Subscription Fulfillment bit set) if they are\n   sent following a change event,\
    \ as shown in Figure 3.\n   The Software Identifier Count field indicates the\
    \ number of Software\n   Identifiers present in this inventory.  Each Software\
    \ Identifier is\n   represented by the following set of fields: Record Identifier,\
    \ Data\n   Model Type PEN, Data Model Type, Source Identification Number,\n  \
    \ Reserved, Software Identifier Length, Software Identifier, Software\n   Locator\
    \ Length, and Software Locator.  These fields will appear once\n   for each reported\
    \ record.\n   When responding directly to a SWIMA Request attribute, the Request\
    \ ID\n   Copy / Subscription ID field MUST contain an exact copy of the\n   Request\
    \ ID field from that SWIMA Request.  When this attribute is\n   sent in fulfillment\
    \ of an existing subscription on this SWIMA-PC,\n   this field MUST contain the\
    \ Subscription ID of the fulfilled\n   subscription.\n   The EID Epoch field indicates\
    \ the EID Epoch of the Last EID value.\n   The Last EID field MUST contain the\
    \ EID of the last recorded change\n   event (see Section 3.7 for more about EIDs\
    \ and recorded events) at\n   the time this inventory was collected.  In the case\
    \ where there are\n   no recorded change events at the time that this inventory\
    \ was\n   collected, the Last EID field MUST contain 0.  These fields can be\n\
    \   interpreted to indicate that the provided inventory reflects the\n   state\
    \ of the endpoint after all changes up to and including this last\n   event have\
    \ been accounted for.\n   The Data Model Type PEN and Data Model Type fields are\
    \ used to\n   identify the data model associated with the given software record.\n\
    \   These fields are discussed more in Section 3.4.2.\n   The Source Identification\
    \ Number field is used to identify the source\n   that provided the given record,\
    \ as described in Section 3.1.\n"
- title: 5.8.  Software Identifier Events
  contents:
  - "5.8.  Software Identifier Events\n   A SWIMA-PC sends this attribute to a SWIMA-PV\
    \ to convey events where\n   the affected records are reported without Software\
    \ Inventory Evidence\n   Records.  A SWIMA-PV MUST NOT send this attribute.  The\
    \ SWIMA-PC\n   sends this attribute either (1) in fulfillment of an existing\n\
    \   subscription where the establishing request has a Result Type of 1\n   and\
    \ the Earliest EID is non-zero or (2) in direct response to a SWIMA\n   Request\
    \ attribute where the Result Type is 1 and the Earliest EID is\n   non-zero.\n\
    \                        1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Flags        |                Event Count                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Request ID Copy / Subscription ID                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       EID Epoch                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Last EID                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Last Consulted EID                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \          SUB-BLOCK (Repeated \"Event Count\" times)           |\n   |      \
    \                                                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 10: Software Identifier Events Attribute\n             \
    \           1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            EID                                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +- \
    \                                                            -+\n   |        \
    \                                                       |\n   +-             \
    \                                                -+\n   |                    \
    \     Timestamp                             |\n   +-                         \
    \                                    -+\n   |                                \
    \                               |\n   +-                                     \
    \                        -+\n   |                                            \
    \                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   Record Identifier                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Data Model Type PEN                 |Data Model Type|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Source Id Num |  Action       |   Software Identifier Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Software Identifier (variable length)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Software Locator Length     |Software Locator (variable len)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Figure 11: Software Identifier Events Attribute SUB-BLOCK\n   +----------------+--------------------------------------------------+\n\
    \   | Field          | Description                                      |\n  \
    \ +----------------+--------------------------------------------------+\n   |\
    \ Flags: Bit 0 - | In the case that this attribute is sent in       |\n   | Subscription\
    \   | fulfillment of a subscription, this bit MUST be  |\n   | Fulfillment   \
    \ | set (1).  In the case that this attribute is a   |\n   |                |\
    \ direct response to a SWIMA Request, this bit     |\n   |                | MUST\
    \ be unset (0).                               |\n   |                |       \
    \                                           |\n   | Flags: Bits    | Reserved\
    \ for future use.  This field MUST be set |\n   | 1-7 - Reserved | to zero on\
    \ transmission and ignored upon         |\n   |                | reception.  \
    \                                     |\n   |                |               \
    \                                   |\n   | Event Count    | The number of events\
    \ that are reported in this   |\n   |                | attribute.  This field\
    \ is a 3-byte unsigned      |\n   |                | integer.  The EID, Timestamp,\
    \ Record Identifier, |\n   |                | Data Model Type PEN, Data Model\
    \ Type, Source     |\n   |                | Identification Number, Action, Software\
    \          |\n   |                | Identifier Length, Software Identifier, Software\
    \ |\n   |                | Locator Length, and Software Locator fields are  |\n\
    \   |                | repeated, in order, the number of times          |\n  \
    \ |                | indicated in this field.  This field value MAY   |\n   |\
    \                | be 0, in which case there are no instances of    |\n   |  \
    \              | these fields.                                    |\n   |    \
    \            |                                                  |\n   | Request\
    \ ID     | In the case where this attribute is in direct    |\n   | Copy /   \
    \      | response to a SWIMA Request attribute from a     |\n   | Subscription\
    \   | SWIMA-PV, this field MUST contain an exact copy  |\n   | ID            \
    \ | of the Request ID field from that SWIMA Request. |\n   |                |\
    \ In the case where this attribute is sent in      |\n   |                | fulfillment\
    \ of an active subscription, this      |\n   |                | field MUST contain\
    \ the Subscription ID of the    |\n   |                | subscription being fulfilled\
    \ by this attribute.  |\n   |                |                               \
    \                   |\n   | EID Epoch      | The EID Epoch of the Last EID value.\
    \  This field |\n   |                | is a 4-byte unsigned integer.         \
    \           |\n   |                |                                         \
    \         |\n   | Last EID       | The EID of the last event recorded by the \
    \       |\n   |                | SWIMA-PC, or 0 if the SWIMA-PC has no recorded\
    \   |\n   |                | events.  This field contains the EID of the     \
    \ |\n   |                | SWIMA-PC's last recorded change event (which     |\n\
    \   |                | might or might not be included as an event       |\n  \
    \ |                | record in this attribute).                       |\n   |\
    \                |                                                  |\n   | Last\
    \ Consulted | The EID of the last event record that was        |\n   | EID   \
    \         | consulted when generating the event record list  |\n   |         \
    \       | included in this attribute.  This is different   |\n   |           \
    \     | from the Last EID field value if and only if     |\n   |             \
    \   | this attribute is conveying a partial list of    |\n   |               \
    \ | event records.  See Section 3.7.5 for more on    |\n   |                |\
    \ partial lists of event records.                  |\n   |                |  \
    \                                                |\n   | EID            | The\
    \ EID of the event in this event record.       |\n   |                |      \
    \                                            |\n   | Timestamp      | The timestamp\
    \ associated with the event in this  |\n   |                | event record.  This\
    \ timestamp is the SWIMA-PC's  |\n   |                | best understanding of\
    \ when the given event       |\n   |                | occurred.  Note that this\
    \ timestamp might be an  |\n   |                | estimate.  The Timestamp date\
    \ and time MUST be   |\n   |                | represented as an ASCII string that\
    \ is expressed |\n   |                | in Coordinated Universal Time (UTC) and\
    \ is       |\n   |                | compliant with RFC 3339 [RFC3339], with the\
    \      |\n   |                | additional restrictions that the 'T' delimiter\
    \   |\n   |                | and the 'Z' suffix MUST be capitalized and      \
    \ |\n   |                | fractional seconds (time-secfrac) MUST NOT be    |\n\
    \   |                | included.  This field conforms to the date-time  |\n  \
    \ |                | ABNF production from Section 5.6 of RFC 3339,    |\n   |\
    \                | with the above restrictions.  Leap seconds are   |\n   |  \
    \              | permitted, and SWIMA-PVs MUST support them.  The |\n   |    \
    \            | Timestamp string MUST NOT be null terminated or  |\n   |      \
    \          | padded in any way.  The length of this field is  |\n   |        \
    \        | always 20 octets.                                |\n   |          \
    \      |                                                  |\n   | Record     \
    \    | A 4-byte unsigned integer containing the Record  |\n   | Identifier   \
    \  | Identifier value from a Software Inventory       |\n   |                |\
    \ Evidence Record.                                 |\n   |                |  \
    \                                                |\n   | Data Model     | A 3-byte\
    \ unsigned integer containing the PEN of  |\n   | Type PEN       | the organization\
    \ that assigned the meaning of    |\n   |                | the Data Model Type\
    \ value.                       |\n   |                |                      \
    \                            |\n   | Data Model     | A 1-byte unsigned integer\
    \ containing an          |\n   | Type           | identifier number that identifies\
    \ the data model |\n   |                | of the reported record.            \
    \              |\n   |                |                                      \
    \            |\n   | Source         | The Source Identifier number associated\
    \ with the |\n   | Identification | source for the software installation inventory\
    \   |\n   | Number         | instance that this event record reported.       \
    \ |\n   |                |                                                  |\n\
    \   | Action         | The type of event that is recorded in this event |\n  \
    \ |                | record.  Possible values are as follows: 1 =     |\n   |\
    \                | CREATION - the addition of a record to the       |\n   |  \
    \              | endpoint's Software Inventory Evidence           |\n   |    \
    \            | Collection; 2 = DELETION - the removal of a      |\n   |      \
    \          | record from the endpoint's Software Inventory    |\n   |        \
    \        | Evidence Collection; 3 = ALTERATION - an         |\n   |          \
    \      | alteration that was made to a record within the  |\n   |            \
    \    | endpoint's Software Inventory Evidence           |\n   |              \
    \  | Collection.  All other values are reserved for   |\n   |                |\
    \ future use and MUST NOT be used when sending     |\n   |                | attributes.\
    \  In the case where a SWIMA-PV        |\n   |                | receives an event\
    \ record that uses an action     |\n   |                | value other than the\
    \ ones defined here, it MUST  |\n   |                | ignore that event record\
    \ but SHOULD process      |\n   |                | other event records in this\
    \ attribute as normal. |\n   |                |                              \
    \                    |\n   | Software       | A 2-byte unsigned integer indicating\
    \ the length, |\n   | Identifier     | in bytes, of the Software Identifier field.\
    \      |\n   | Length         |                                              \
    \    |\n   |                |                                                \
    \  |\n   | Software       | A string containing the Software Identifier      |\n\
    \   | Identifier     | value from a Software Inventory Evidence Record. |\n  \
    \ |                | This field value MUST first be normalized to     |\n   |\
    \                | Network Unicode format, as described in          |\n   |  \
    \              | Section 5.4.  This string MUST NOT be null       |\n   |    \
    \            | terminated.                                      |\n   |      \
    \          |                                                  |\n   | Software\
    \       | A 2-byte unsigned integer indicating the length, |\n   | Locator Length\
    \ | in bytes, of the Software Locator field.         |\n   |                |\
    \                                                  |\n   | Software       | A\
    \ string containing the Software Locator value.  |\n   | Locator        | This\
    \ field value MUST first be normalized to     |\n   |                | Network\
    \ Unicode format, as described in          |\n   |                | Section 5.4,\
    \ and then encoded as a URI           |\n   |                | [RFC3986].  This\
    \ string MUST NOT be null         |\n   |                | terminated.       \
    \                               |\n   +----------------+--------------------------------------------------+\n\
    \           Table 4: Software Identifier Events Attribute Fields\n   The first\
    \ few fields in the Software Identifier Events attribute\n   mirror those in the\
    \ Software Identifier Inventory attribute.  The\n   primary difference is that\
    \ instead of conveying an inventory the\n   attribute conveys zero or more event\
    \ records, consisting of the EID,\n   Timestamp, Record Identifier, Data Model\
    \ Type PEN, Data Model Type,\n   Source Identification Number, Action, Software\
    \ Identifier Length,\n   Software Identifier, Software Locator Length, and Software\
    \ Locator\n   fields of the affected Software Inventory Evidence Record.\n   With\
    \ regard to the Timestamp field, it is important to note that\n   clock skew between\
    \ the SWIMA-PC and SWIMA-PV as well as between\n   different SWIMA-PCs within\
    \ an enterprise might make correlation of\n   Timestamp values difficult.  This\
    \ specification does not attempt to\n   resolve clock skew issues, although other\
    \ mechanisms (which are\n   outside the scope of this specification) do exist\
    \ to reduce the\n   impact of clock skew and make the timestamp more useful for\
    \ such\n   correlation.  Instead, SWIMA uses the Timestamp value primarily as\
    \ a\n   means to indicate the amount of time between two events on a single\n\
    \   endpoint.  For example, by taking the difference of the times for\n   when\
    \ a record was removed and then subsequently re-added, one can get\n   an indication\
    \ as to how long the system was without the given record\n   (and thus without\
    \ the associated software).  Since this will involve\n   comparison of Timestamp\
    \ values all originating on the same system,\n   clock skew between the SWIMA-PC\
    \ and SWIMA-PV is not an issue.\n   However, if the SWIMA-PC's clock was adjusted\
    \ between two recorded\n   events, it is possible for such a calculation to lead\
    \ to\n   misunderstandings regarding the temporal distance between events.\n \
    \  Users of this field need to be aware of the possibility for such\n   occurrences.\
    \  In the case where the Timestamp values of two events\n   appear to contradict\
    \ the EID ordering of those events (i.e., the\n   later EID has an earlier timestamp),\
    \ the recipient MUST treat the EID\n   ordering as correct.\n   All events recorded\
    \ in a Software Identifier Events attribute are\n   required to be part of the\
    \ same EID Epoch.  Specifically, all such\n   reported events MUST have an EID\
    \ that is from the same EID Epoch and\n   that is the same as the EID Epoch of\
    \ the Last EID and Last Consulted\n   EID values.  The SWIMA-PC MUST NOT report\
    \ events with EIDs from\n   different EID Epochs.\n   The Last Consulted EID field\
    \ contains the EID of the last event\n   record considered for inclusion in this\
    \ attribute.  If this attribute\n   contains a partial event set (as described\
    \ in Section 3.7.5), this\n   field value will be less than the Last EID value;\
    \ if this attribute\n   contains a complete event set, the Last EID and Last Consulted\
    \ EID\n   values are identical.\n   If multiple events are sent in a Software\
    \ Identifier Events\n   attribute, the order in which they appear within the attribute\
    \ is not\n   significant.  The EIDs associated with them are used for ordering\
    \ the\n   indicated events appropriately.  Also note that a single software\n\
    \   record might be reported multiple times in an attribute, such as if\n   multiple\
    \ events involving the associated record were being reported.\n"
- title: 5.9.  Software Inventory
  contents:
  - "5.9.  Software Inventory\n   A SWIMA-PC sends this attribute to a SWIMA-PV to\
    \ convey a list of\n   inventory records.  A SWIMA-PV MUST NOT send this attribute.\
    \  The\n   SWIMA-PC sends this attribute either (1) in fulfillment of an\n   existing\
    \ subscription where the establishing request has a Result\n   Type of 0 and the\
    \ Earliest EID is zero or (2) in direct response to a\n   SWIMA Request attribute\
    \ where the Result Type is 0 and the Earliest\n   EID is zero.\n             \
    \           1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Flags         |             Record Count                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                Request ID Copy / Subscription ID              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            EID Epoch                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            Last EID                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \        SUB-BLOCK (Repeated \"Record Count\" times)            |\n   |      \
    \                                                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 12: Software Inventory Attribute\n                 \
    \       1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Record Identifier                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Data Model Type PEN                 |Data Model Type|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Source Id Num |  Reserved     |   Software Identifier Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Software Identifier (variable length)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Software Locator Length     |Software Locator (variable len)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Record Length                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   Record (variable length)                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 13: Software Inventory Attribute SUB-BLOCK\n   +----------------+--------------------------------------------------+\n\
    \   | Field          | Description                                      |\n  \
    \ +----------------+--------------------------------------------------+\n   |\
    \ Flags: Bit 0 - | In the case that this attribute is sent in       |\n   | Subscription\
    \   | fulfillment of a subscription, this bit MUST be  |\n   | Fulfillment   \
    \ | set (1).  In the case that this attribute is a   |\n   |                |\
    \ direct response to a SWIMA Request, this bit     |\n   |                | MUST\
    \ be unset (0).                               |\n   |                |       \
    \                                           |\n   | Flags: Bits    | Reserved\
    \ for future use.  This field MUST be set |\n   | 1-7 - Reserved | to zero on\
    \ transmission and ignored upon         |\n   |                | reception.  \
    \                                     |\n   |                |               \
    \                                   |\n   | Record Count   | The number of records\
    \ that follow.  This field   |\n   |                | is a 3-byte unsigned integer.\
    \  The Record        |\n   |                | Identifier, Data Model Type PEN,\
    \ Data Model      |\n   |                | Type, Source Identification Number,\
    \ Reserved,    |\n   |                | Software Identifier Length, Software Identifier,\
    \ |\n   |                | Software Locator Length, Software Locator,       |\n\
    \   |                | Record Length, and Record fields are repeated,   |\n  \
    \ |                | in order, the number of times indicated in this  |\n   |\
    \                | field.  This field value MAY be 0, in which case |\n   |  \
    \              | there are no instances of these fields.          |\n   |    \
    \            |                                                  |\n   | Request\
    \ ID     | In the case where this attribute is in direct    |\n   | Copy /   \
    \      | response to a SWIMA Request attribute from a     |\n   | Subscription\
    \   | SWIMA-PV, this field MUST contain an exact copy  |\n   | ID            \
    \ | of the Request ID field from that SWIMA Request. |\n   |                |\
    \ In the case where this attribute is sent in      |\n   |                | fulfillment\
    \ of an active subscription, this      |\n   |                | field MUST contain\
    \ the Subscription ID of the    |\n   |                | subscription being fulfilled\
    \ by this attribute.  |\n   |                |                               \
    \                   |\n   | EID Epoch      | The EID Epoch of the Last EID value.\
    \  This field |\n   |                | is a 4-byte unsigned integer.         \
    \           |\n   |                |                                         \
    \         |\n   | Last EID       | The EID of the last event recorded by the \
    \       |\n   |                | SWIMA-PC, or 0 if the SWIMA-PC has no recorded\
    \   |\n   |                | events.  This field is a 4-byte unsigned        \
    \ |\n   |                | integer.                                         |\n\
    \   |                |                                                  |\n  \
    \ | Record         | A 4-byte unsigned integer containing the Record  |\n   |\
    \ Identifier     | Identifier value from a Software Inventory       |\n   |  \
    \              | Evidence Record.                                 |\n   |    \
    \            |                                                  |\n   | Data Model\
    \     | A 3-byte unsigned integer containing the PEN of  |\n   | Type PEN    \
    \   | the organization that assigned the meaning of    |\n   |               \
    \ | the Data Model Type value.                       |\n   |                |\
    \                                                  |\n   | Data Model     | A\
    \ 1-byte unsigned integer containing an          |\n   | Type           | identifier\
    \ number that identifies the data model |\n   |                | of the reported\
    \ record.                          |\n   |                |                  \
    \                                |\n   | Source         | The Source Identifier\
    \ number associated with the |\n   | Identification | source from which this software\
    \ installation     |\n   | Number         | inventory instance was reported. \
    \                |\n   |                |                                    \
    \              |\n   | Reserved       | Reserved for future use.  This field MUST\
    \ be set |\n   |                | to zero on transmission and ignored upon   \
    \      |\n   |                | reception.                                   \
    \    |\n   |                |                                                \
    \  |\n   | Software       | A 2-byte unsigned integer indicating the length, |\n\
    \   | Identifier     | in bytes, of the Software Identifier field.      |\n  \
    \ | Length         |                                                  |\n   |\
    \                |                                                  |\n   | Software\
    \       | A string containing the Software Identifier      |\n   | Identifier\
    \     | value from a Software Inventory Evidence Record. |\n   |             \
    \   | This field value MUST first be normalized to     |\n   |               \
    \ | Network Unicode format, as described in          |\n   |                |\
    \ Section 5.4.  This string MUST NOT be null       |\n   |                | terminated.\
    \                                      |\n   |                |              \
    \                                    |\n   | Software       | A 2-byte unsigned\
    \ integer indicating the length, |\n   | Locator Length | in bytes, of the Software\
    \ Locator field.         |\n   |                |                            \
    \                      |\n   | Software       | A string containing the Software\
    \ Locator value.  |\n   | Locator        | This field value MUST first be normalized\
    \ to     |\n   |                | Network Unicode format, as described in    \
    \      |\n   |                | Section 5.4, and then encoded as a URI       \
    \    |\n   |                | [RFC3986].  This string MUST NOT be null       \
    \  |\n   |                | terminated.                                      |\n\
    \   |                |                                                  |\n  \
    \ | Record Length  | A 4-byte unsigned integer indicating the length, |\n   |\
    \                | in bytes, of the Record field.                   |\n   |  \
    \              |                                                  |\n   | Record\
    \         | A Software Inventory Evidence Record expressed   |\n   |         \
    \       | as a string.  The record MUST be converted and   |\n   |           \
    \     | normalized to Network Unicode format, as         |\n   |             \
    \   | described in Section 5.4.  This string MUST NOT  |\n   |               \
    \ | be null terminated.                              |\n   +----------------+--------------------------------------------------+\n\
    \               Table 5: Software Inventory Attribute Fields\n   The Software\
    \ Inventory attribute contains some number of Software\n   Inventory Evidence\
    \ Records along with the core response attribute\n   fields.  Given that the size\
    \ of records can vary considerably, the\n   length of this attribute is highly\
    \ variable and, if transmitting a\n   complete inventory, can be extremely large.\
    \  To avoid unnecessarily\n   overburdening the network, enterprises might wish\
    \ to constrain the\n   use of Software Inventory attributes to targeted requests.\n\
    \   When copying a Software Inventory Evidence Record into the Record\n   field,\
    \ the record MUST be converted and normalized to use Network\n   Unicode format\
    \ prior to its inclusion in the Record field.\n"
- title: 5.10.  Software Events
  contents:
  - "5.10.  Software Events\n   A SWIMA-PC sends this attribute to a SWIMA-PV to convey\
    \ a list of\n   events that include Software Inventory Evidence Records.  A SWIMA-PV\n\
    \   MUST NOT send this attribute.  The SWIMA-PC sends this attribute\n   either\
    \ (1) in fulfillment of an existing subscription where the\n   establishing request\
    \ has a Result Type of 0 and the Earliest EID is\n   non-zero or (2) in direct\
    \ response to a SWIMA Request attribute where\n   the Result Type is 0 and the\
    \ Earliest EID is non-zero.\n                        1                   2   \
    \                3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Flags       |                  Event Count                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Request ID Copy / Subscription ID               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           EID Epoch                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Last EID                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Last Consulted EID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \           SUB-BLOCK (Repeated \"Event Count\" times)          |\n   |      \
    \                                                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 14: Software Events Attribute\n                   \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             EID                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +- \
    \                                                            -+\n   |        \
    \                                                       |\n   +-             \
    \                                                -+\n   |                    \
    \     Timestamp                             |\n   +-                         \
    \                                    -+\n   |                                \
    \                               |\n   +-                                     \
    \                        -+\n   |                                            \
    \                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Record Identifier                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Data Model Type PEN                 |Data Model Type|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Source Id Num |  Action       |   Software Identifier Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Software Identifier (variable length)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Software Locator Length     |Software Locator (variable len)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Record Length                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Record (variable length)                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 15: Software Events Attribute SUB-BLOCK\n   +----------------+--------------------------------------------------+\n\
    \   | Field          | Description                                      |\n  \
    \ +----------------+--------------------------------------------------+\n   |\
    \ Flags: Bit 0 - | In the case that this attribute is sent in       |\n   | Subscription\
    \   | fulfillment of a subscription, this bit MUST be  |\n   | Fulfillment   \
    \ | set (1).  In the case that this attribute is a   |\n   |                |\
    \ direct response to a SWIMA Request, this bit     |\n   |                | MUST\
    \ be unset (0).                               |\n   |                |       \
    \                                           |\n   | Flags: Bits    | Reserved\
    \ for future use.  This field MUST be set |\n   | 1-7 - Reserved | to zero on\
    \ transmission and ignored upon         |\n   |                | reception.  \
    \                                     |\n   |                |               \
    \                                   |\n   | Event Count    | The number of events\
    \ being reported in this      |\n   |                | attribute.  This field\
    \ is a 3-byte unsigned      |\n   |                | integer.  The EID, Timestamp,\
    \ Record Identifier, |\n   |                | Data Model Type PEN, Data Model\
    \ Type, Source     |\n   |                | Identification Number, Action, Software\
    \          |\n   |                | Identifier Length, Software Identifier, Software\
    \ |\n   |                | Locator Length, Software Locator, Record Length, |\n\
    \   |                | and Record fields are repeated, in order, the    |\n  \
    \ |                | number of times indicated in this field.  This   |\n   |\
    \                | field value MAY be 0, in which case there are no |\n   |  \
    \              | instances of these fields.                       |\n   |    \
    \            |                                                  |\n   | Request\
    \ ID     | In the case where this attribute is in direct    |\n   | Copy /   \
    \      | response to a SWIMA Request attribute from a     |\n   | Subscription\
    \   | SWIMA-PV, this field MUST contain an exact copy  |\n   | ID            \
    \ | of the Request ID field from that SWIMA Request. |\n   |                |\
    \ In the case where this attribute is sent in      |\n   |                | fulfillment\
    \ of an active subscription, this      |\n   |                | field MUST contain\
    \ the Subscription ID of the    |\n   |                | subscription being fulfilled\
    \ by this attribute.  |\n   |                |                               \
    \                   |\n   | EID Epoch      | The EID Epoch of the Last EID value.\
    \  This field |\n   |                | is a 4-byte unsigned integer.         \
    \           |\n   |                |                                         \
    \         |\n   | Last EID       | The EID of the last event recorded by the \
    \       |\n   |                | SWIMA-PC, or 0 if the SWIMA-PC has no recorded\
    \   |\n   |                | events.  This field contains the EID of the     \
    \ |\n   |                | SWIMA-PC's last recorded change event (which     |\n\
    \   |                | might or might not be included as an event       |\n  \
    \ |                | record in this attribute).                       |\n   |\
    \                |                                                  |\n   | Last\
    \ Consulted | The EID of the last event record that was        |\n   | EID   \
    \         | consulted when generating the event record list  |\n   |         \
    \       | included in this attribute.  This is different   |\n   |           \
    \     | from the Last EID field value if and only if     |\n   |             \
    \   | this attribute is conveying a partial list of    |\n   |               \
    \ | event records.  See Section 3.7.5 for more on    |\n   |                |\
    \ partial lists of event records.                  |\n   |                |  \
    \                                                |\n   | EID            | The\
    \ EID of the event in this event record.       |\n   |                |      \
    \                                            |\n   | Timestamp      | The timestamp\
    \ associated with the event in this  |\n   |                | event record.  This\
    \ timestamp is the SWIMA-PC's  |\n   |                | best understanding of\
    \ when the given event       |\n   |                | occurred.  Note that this\
    \ timestamp might be an  |\n   |                | estimate.  The Timestamp date\
    \ and time MUST be   |\n   |                | represented as an ASCII string that\
    \ is expressed |\n   |                | in Coordinated Universal Time (UTC) and\
    \ is       |\n   |                | compliant with RFC 3339 [RFC3339], with the\
    \      |\n   |                | additional restrictions that the 'T' delimiter\
    \   |\n   |                | and the 'Z' suffix MUST be capitalized and      \
    \ |\n   |                | fractional seconds (time-secfrac) MUST NOT be    |\n\
    \   |                | included.  This field conforms to the date-time  |\n  \
    \ |                | ABNF production from Section 5.6 of RFC 3339,    |\n   |\
    \                | with the above restrictions.  Leap seconds are   |\n   |  \
    \              | permitted, and SWIMA-PVs MUST support them.  The |\n   |    \
    \            | Timestamp string MUST NOT be null terminated or  |\n   |      \
    \          | padded in any way.  The length of this field is  |\n   |        \
    \        | always 20 octets.                                |\n   |          \
    \      |                                                  |\n   | Record     \
    \    | A 4-byte unsigned integer containing the Record  |\n   | Identifier   \
    \  | Identifier value from a Software Inventory       |\n   |                |\
    \ Evidence Record.                                 |\n   |                |  \
    \                                                |\n   | Data Model     | A 3-byte\
    \ unsigned integer containing the PEN of  |\n   | Type PEN       | the organization\
    \ that assigned the meaning of    |\n   |                | the Data Model Type\
    \ value.                       |\n   |                |                      \
    \                            |\n   | Data Model     | A 1-byte unsigned integer\
    \ containing an          |\n   | Type           | identifier number that identifies\
    \ the data model |\n   |                | of the reported record.            \
    \              |\n   |                |                                      \
    \            |\n   | Source         | The Source Identifier number associated\
    \ with the |\n   | Identification | source for the software installation inventory\
    \   |\n   | Number         | instance that this event record reported.       \
    \ |\n   |                |                                                  |\n\
    \   | Action         | The type of event that is recorded in this event |\n  \
    \ |                | record.  Possible values are as follows: 1 =     |\n   |\
    \                | CREATION - the addition of a record to the       |\n   |  \
    \              | endpoint's Software Inventory Evidence           |\n   |    \
    \            | Collection; 2 = DELETION - the removal of a      |\n   |      \
    \          | record from the endpoint's Software Inventory    |\n   |        \
    \        | Evidence Collection; 3 = ALTERATION - an         |\n   |          \
    \      | alteration that was made to a record within the  |\n   |            \
    \    | endpoint's Software Inventory Evidence           |\n   |              \
    \  | Collection.  All other values are reserved for   |\n   |                |\
    \ future use and MUST NOT be used when sending     |\n   |                | attributes.\
    \  In the case where a SWIMA-PV        |\n   |                | receives an event\
    \ record that uses an action     |\n   |                | value other than the\
    \ ones defined here, it MUST  |\n   |                | ignore that event record\
    \ but SHOULD process      |\n   |                | other event records in this\
    \ attribute as normal. |\n   |                |                              \
    \                    |\n   | Software       | A 2-byte unsigned integer indicating\
    \ the length, |\n   | Identifier     | in bytes, of the Software Identifier field.\
    \      |\n   | Length         |                                              \
    \    |\n   |                |                                                \
    \  |\n   | Software       | A string containing the Software Identifier      |\n\
    \   | Identifier     | value from a Software Inventory Evidence Record. |\n  \
    \ |                | This field value MUST first be normalized to     |\n   |\
    \                | Network Unicode format, as described in          |\n   |  \
    \              | Section 5.4.  This string MUST NOT be null       |\n   |    \
    \            | terminated.                                      |\n   |      \
    \          |                                                  |\n   | Software\
    \       | A 2-byte unsigned integer indicating the length, |\n   | Locator Length\
    \ | in bytes, of the Software Locator field.         |\n   |                |\
    \                                                  |\n   | Software       | A\
    \ string containing the Software Locator value.  |\n   | Locator        | This\
    \ field value MUST first be normalized to     |\n   |                | Network\
    \ Unicode format, as described in          |\n   |                | Section 5.4,\
    \ and then encoded as a URI           |\n   |                | [RFC3986].  This\
    \ string MUST NOT be null         |\n   |                | terminated.       \
    \                               |\n   |                |                     \
    \                             |\n   | Record Length  | A 4-byte unsigned integer\
    \ indicating the length, |\n   |                | in bytes, of the Record field.\
    \                   |\n   |                |                                 \
    \                 |\n   | Record         | A Software Inventory Evidence Record\
    \ expressed   |\n   |                | as a string.  The record MUST be converted\
    \ and   |\n   |                | normalized to Network Unicode format, as    \
    \     |\n   |                | described in Section 5.4.  This string MUST NOT\
    \  |\n   |                | be null terminated.                              |\n\
    \   +----------------+--------------------------------------------------+\n  \
    \               Table 6: Software Events Attribute Fields\n   The fields of this\
    \ attribute are used in the same way as the\n   corresponding fields of the previous\
    \ attributes.  As with the\n   Software Inventory attribute, a Software Events\
    \ attribute can be\n   quite large if many events have occurred following the\
    \ event\n   indicated by a request's Earliest EID.  As such, it is recommended\n\
    \   that the SWIMA Request attributes only request that full records be\n   sent\
    \ (Result Type set to zero) in a targeted request, thus\n   constraining the response\
    \ just to records that match a given set of\n   Software Identifiers.\n   As with\
    \ the Software Identifier Events attribute, this attribute MUST\n   only contain\
    \ event records with EIDs coming from the current EID\n   Epoch of the SWIMA-PC.\n\
    \   As with the Software Inventory attribute, the SWIMA-PC MUST perform\n   conversion\
    \ and normalization of the record.\n"
- title: 5.11.  Subscription Status Request
  contents:
  - "5.11.  Subscription Status Request\n   A SWIMA-PV sends this attribute to a SWIMA-PC\
    \ to request a list of\n   active subscriptions for which the requesting SWIMA-PV\
    \ is the\n   subscriber.  A SWIMA-PC MUST NOT send this attribute.\n   This attribute\
    \ has no fields.\n   A SWIMA-PC MUST respond to this attribute by sending a Subscription\n\
    \   Status Response attribute (or a PA-TNC Error attribute if it is\n   unable\
    \ to correctly provide a response).\n"
- title: 5.12.  Subscription Status Response
  contents:
  - "5.12.  Subscription Status Response\n   A SWIMA-PC sends this attribute to a\
    \ SWIMA-PV to report the list of\n   active subscriptions for which the receiving\
    \ SWIMA-PV is the\n   subscriber.  A SWIMA-PV MUST NOT send this attribute.\n\
    \                        1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Status Flags  |            Subscription Record Count          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \  SUB-BLOCK (Repeated \"Subscription Record Count\" times)     |\n   |      \
    \                                                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 16: Subscription Status Response Attribute\n            \
    \            1                   2                   3\n    0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Flags         |          Software Identifier Count            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Request ID                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Earliest EID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  SUB-SUB-BLOCK\
    \ (Repeated \"Software Identifier Count\" times)   |\n   |                   \
    \                                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        Figure 17: Subscription Status Response Attribute SUB-BLOCK\n       \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Software Identifier Length   | Software Identifier (var len) |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Figure 18: Subscription Status Response Attribute SUB-SUB-BLOCK\n   +--------------+----------------------------------------------------+\n\
    \   | Field        | Description                                        |\n  \
    \ +--------------+----------------------------------------------------+\n   |\
    \ Status       | Reserved for future use.  This field MUST be set   |\n   | Flags:\
    \ Bits  | to zero on transmission and ignored upon           |\n   | 0-7 -   \
    \     | reception.                                         |\n   | Reserved  \
    \   |                                                    |\n   |             \
    \ |                                                    |\n   | Subscription |\
    \ The number of subscription records that follow.    |\n   | Record Count | This\
    \ field is a 3-byte unsigned integer.  The      |\n   |              | Flags,\
    \ Software Identifier Count, Request ID, and  |\n   |              | Earliest\
    \ EID fields, and zero or more instances of |\n   |              | Software Identifier\
    \ Length and Software            |\n   |              | Identifier, are repeated,\
    \ in order, the number of  |\n   |              | times indicated in this field.\
    \  (The Software      |\n   |              | Identifier Length and Software Identifier\
    \ fields   |\n   |              | within each of these sets of fields are repeated\
    \ a |\n   |              | number of times equal to the preceding Software   \
    \ |\n   |              | Identifier Count value.)  The Subscription Record  |\n\
    \   |              | Count field value MAY be 0, in which case there    |\n  \
    \ |              | are no instances of these fields.                  |\n   |\
    \              |                                                    |\n   | Flags,\
    \       | For each active subscription, these fields contain |\n   | Software\
    \     | an exact copy of the fields with the corresponding |\n   | Identifier\
    \   | name provided in the subscription's establishing   |\n   | Count,      \
    \ | request.                                           |\n   | Request ID,  |\
    \                                                    |\n   | Earliest     |  \
    \                                                  |\n   | EID,         |    \
    \                                                |\n   | Software     |      \
    \                                              |\n   | Identifier   |        \
    \                                            |\n   | Length, and  |          \
    \                                          |\n   | Software     |            \
    \                                        |\n   | Identifier   |              \
    \                                      |\n   +--------------+----------------------------------------------------+\n\
    \               Table 7: Subscription Status Response Fields\n   A Subscription\
    \ Status Response contains zero or more subscription\n   records.  Specifically,\
    \ it MUST contain one subscription record for\n   each active subscription associated\
    \ with the party that sent the\n   Subscription Status Request to which this attribute\
    \ is a response.\n   As described in Section 3.8.2, the SWIMA-PC MUST use the\
    \ requester's\n   Connection ID and its Posture Validator Identifier to determine\
    \ which\n   subscriptions are associated with the requester.\n   A SWIMA-PC MUST\
    \ send a Subscription Status Response attribute in\n   response to a Subscription\
    \ Status Request attribute, except in cases\n   where the SWIMA-PC experiences\
    \ an error condition that prevents it\n   from correctly populating the Subscription\
    \ Status Response attribute\n   (in which case it MUST respond with a PA-TNC Error\
    \ attribute\n   appropriate to the type of error experienced).  If there are no\n\
    \   active subscriptions associated with the requesting party, the\n   Subscription\
    \ Status Response attribute will consist only of its\n   Status Flags field and\
    \ a Subscription Record Count field with a value\n   of 0, and no additional fields.\n\
    \   Each subscription record included in a Subscription Status Response\n   attribute\
    \ duplicates the fields of the SWIMA Request attribute that\n   was the establishing\
    \ request of a subscription.  Note that the\n   Request ID field in the record\
    \ captures the Subscription ID\n   associated with the given subscription record\
    \ (since the Subscription\n   ID is the same as the Request ID of the establishing\
    \ request).  Note\n   also that if the establishing request is targeted, then\
    \ its Record\n   Count field will be non-zero and, within that subscription record,\n\
    \   the Software Identifier Length and Software Identifier fields are\n   repeated,\
    \ in order, the number of times indicated in the Record Count\n   field.  As such,\
    \ each subscription record can be different sizes.  If\n   the establishing request\
    \ is not targeted (Record Count field is 0),\n   the subscription record has no\
    \ Software Identifier Length or Software\n   Identifier fields.\n   When a SWIMA-PV\
    \ compares the information received in a Subscription\n   Status Response to its\
    \ own records of active subscriptions, it should\n   be aware that the SWIMA-PC\
    \ might be unable to distinguish this\n   SWIMA-PV from other SWIMA-PVs on the\
    \ same NEA Server.  As a result,\n   it is possible that the SWIMA-PC will report\
    \ more subscription\n   records than the SWIMA-PV recognizes.  For this reason,\
    \ SWIMA-PVs\n   SHOULD NOT automatically assume that extra subscriptions reported\
    \ in\n   a Subscription Status Response indicate a problem.\n"
- title: 5.13.  Source Metadata Request
  contents:
  - "5.13.  Source Metadata Request\n   A SWIMA-PV sends this attribute to a SWIMA-PC\
    \ to request metadata\n   about sources that the SWIMA-PC is using to collect\
    \ software\n   inventory information.  A SWIMA-PC MUST NOT send this attribute.\n\
    \   This attribute has no fields.\n   A SWIMA-PC MUST respond to this attribute\
    \ by sending a Source\n   Metadata Response attribute (or a PA-TNC Error attribute\
    \ if it is\n   unable to correctly provide a response).\n"
- title: 5.14.  Source Metadata Response
  contents:
  - "5.14.  Source Metadata Response\n   A SWIMA-PC sends this attribute to a SWIMA-PV\
    \ to provide descriptive\n   metadata about the sources of software inventory\
    \ information used by\n   the SWIMA-PC.  A SWIMA-PV MUST NOT send this attribute.\n\
    \                        1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Reserved            | Source Count  |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \               |\n   |                                                      \
    \         |\n   |           SUB-BLOCK (Repeated \"Source Count\" times)      \
    \     |\n   |                                                               |\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \         Figure 19: Source Metadata Response Attribute\n                    \
    \    1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Source Id Num |       Metadata Length         | Metadata (var)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          Figure 20: Source Metadata Response Attribute SUB-BLOCK\n   +----------------+--------------------------------------------------+\n\
    \   | Field          | Description                                      |\n  \
    \ +----------------+--------------------------------------------------+\n   |\
    \ Reserved       | Reserved for future use.  This field MUST be set |\n   |  \
    \              | to zero on transmission and ignored upon         |\n   |    \
    \            | reception.                                       |\n   |      \
    \          |                                                  |\n   | Source Count\
    \   | The number of source records that follow.  The   |\n   |               \
    \ | Source Identification Number, Metadata Length,   |\n   |                |\
    \ and Metadata fields are repeated, in order, the  |\n   |                | number\
    \ of times indicated by this field.  This   |\n   |                | field MAY\
    \ be 0, in which case no fields follow   |\n   |                | (but this would\
    \ only be done to indicate that    |\n   |                | the SWIMA-PC has no\
    \ active sources; this would   |\n   |                | not be a typical situation).\
    \                     |\n   |                |                               \
    \                   |\n   | Source         | The Source Identifier number associated\
    \ with the |\n   | Identification | described source for any communications with\
    \ the |\n   | Number         | recipient SWIMA-PV.                           \
    \   |\n   |                |                                                 \
    \ |\n   | Metadata       | A 2-byte unsigned integer indicating the length, |\n\
    \   | Length         | in bytes, of the Metadata field.                 |\n  \
    \ |                |                                                  |\n   |\
    \ Metadata       | A string containing descriptive metadata about   |\n   |  \
    \              | the indicated data source.  This string MUST NOT |\n   |    \
    \            | be null terminated.                              |\n   +----------------+--------------------------------------------------+\n\
    \                 Table 8: Source Metadata Response Fields\n   A Source Metadata\
    \ Response attribute contains zero or more records,\n   each describing one of\
    \ the data sources the SWIMA-PC uses to collect\n   software inventory information.\
    \  It SHOULD contain one metadata\n   record for each source that the SWIMA-PC\
    \ uses.  (There might be\n   reasons not to inform certain SWIMA-PVs of the presence\
    \ of certain\n   data sources.)  The attribute MUST contain a metadata record\
    \ for each\n   source that has been identified in inventory or event messages\
    \ to the\n   given SWIMA-PV.\n   A SWIMA-PC MUST send a Source Metadata Response\
    \ attribute in response\n   to a Source Metadata Request attribute, except in\
    \ cases where the\n   SWIMA-PC experiences an error condition that prevents it\
    \ from\n   correctly populating the Source Metadata Response attribute (in which\n\
    \   case it MUST respond with a PA-TNC Error attribute appropriate to the\n  \
    \ type of error experienced).\n   The Source Count field indicates how many source\
    \ metadata records are\n   included in the attribute.  Each included record consists\
    \ of a Source\n   Identification Number field, a Metadata Length field, and a\
    \ Metadata\n   field.\n   The Source Identification Number field in the Source\
    \ Metadata\n   Response attribute corresponds to the Source Identification Number\n\
    \   field in inventory and event messages.  In the case where (1) the\n   Source\
    \ Identification Number value in this attribute matches a Source\n   Identification\
    \ Number field in an inventory or event record and\n   (2) both the Source Metadata\
    \ Response and the inventory or event\n   record were sent to the same SWIMA-PV,\
    \ the source described in the\n   Metadata field MUST be the same source that\
    \ provided the inventory or\n   event record associated with this Source Identifier.\
    \  Recall that a\n   SWIMA-PC MAY use different Source Identification Number associations\n\
    \   with different SWIMA-PVs.  As such, the association between a Source\n   Identification\
    \ Number and the conveyed metadata is also only\n   meaningful for communications\
    \ between the sending SWIMA-PC and\n   receiving SWIMA-PV.  When sending to a\
    \ given SWIMA-PV, the SWIMA-PC\n   MUST use the recipient SWIMA-PV's Source Identification\
    \ Number\n   associations.\n   The Metadata Length field indicates the length,\
    \ in bytes, of the\n   Metadata field.  The Metadata field contains information\
    \ about the\n   indicated data source.  This specification does not dictate a\
    \ format\n   for the contents of the Metadata field.  This field MAY include\n\
    \   machine-readable information.  For broadest utility, the Metadata\n   field\
    \ SHOULD include human-readable, descriptive information about\n   the data source.\n"
- title: 5.15.  PA-TNC Error as Used by SWIMA
  contents:
  - "5.15.  PA-TNC Error as Used by SWIMA\n   The PA-TNC Error attribute is defined\
    \ in the PA-TNC specification\n   [RFC5792], and its use here conforms to that\
    \ specification.  A PA-TNC\n   Error can be sent due to any error in the PA-TNC\
    \ exchange and might\n   also be sent in response to error conditions specific\
    \ to the SWIMA\n   exchange.  The latter case utilizes error codes defined below.\n\
    \   A PA-TNC Error MUST be sent by a SWIMA-PC in response to a SWIMA\n   Request\
    \ in the case where the SWIMA-PC encounters a fatal error\n   (i.e., an error\
    \ that prevents further processing of an exchange)\n   relating to the attribute\
    \ exchange.  A SWIMA-PV MUST NOT send this\n   attribute.  In the case where the\
    \ SWIMA-PV experiences a fatal error,\n   it MUST handle the error without sending\
    \ a PA-TNC Error attribute.\n   The SWIMA-PV MAY take other actions in response\
    \ to the error, such as\n   logging the cause of the error or even taking actions\
    \ to isolate the\n   endpoint.\n   A PA-TNC Error attribute is sent instead of\
    \ a SWIMA Response\n   attribute when certain issues prevent the reliable creation\
    \ of a\n   SWIMA Response.  As such, a SWIMA-PC MUST NOT send both a PA-TNC\n\
    \   Error attribute and a SWIMA Response attribute in response to a\n   single\
    \ SWIMA Request attribute.\n   Table 9 lists the error code values for the PA-TNC\
    \ Error attribute\n   that are specific to the SWIMA exchange.  Error codes are\
    \ shown in\n   both hexadecimal and decimal format.  In all of these cases, the\n\
    \   Error Code Vendor ID field MUST be set to 0x000000, corresponding to\n   the\
    \ IETF SMI PEN.  The error information structures for each error\n   code are\
    \ described in the following subsections.\n   Note that a message with a SWIMA\
    \ attribute might also result in an\n   error condition covered by the IETF Standard\
    \ PA-TNC Error Codes\n   defined in Section 4.2.8 of [RFC5792].  For example,\
    \ a SWIMA\n   attribute might have an invalid parameter, leading to an error code\n\
    \   of \"Invalid Parameter\".  In this case, the SWIMA-PC MUST use the\n   appropriate\
    \ PA-TNC Error Code value as defined in Section 4.2.8 of\n   [RFC5792].\n   +----------------+--------------------------------------------------+\n\
    \   | Error Code     | Description                                      |\n  \
    \ | Value          |                                                  |\n   +----------------+--------------------------------------------------+\n\
    \   | 0x00000004 (4) | SWIMA_ERROR.  This indicates a fatal error       |\n  \
    \ |                | (i.e., an error that precludes the creation of a |\n   |\
    \                | suitable response attribute) other than the      |\n   |  \
    \              | errors described below but still specific to the |\n   |    \
    \            | processing of SWIMA attributes.  The Description |\n   |      \
    \          | field SHOULD contain additional diagnostic       |\n   |        \
    \        | information.                                     |\n   |          \
    \      |                                                  |\n   | 0x00000005 (5)\
    \ | SWIMA_SUBSCRIPTION_DENIED_ERROR.  This indicates |\n   |                |\
    \ that the SWIMA-PC denied the SWIMA-PV's request  |\n   |                | to\
    \ establish a subscription.  The Description    |\n   |                | field\
    \ SHOULD contain additional diagnostic       |\n   |                | information.\
    \                                     |\n   |                |               \
    \                                   |\n   | 0x00000006 (6) | SWIMA_RESPONSE_TOO_LARGE_ERROR.\
    \  This indicates  |\n   |                | that the SWIMA-PC's response to the\
    \ SWIMA-PV's   |\n   |                | request was too large to be serviced.\
    \  The error |\n   |                | information structure indicates the largest\
    \      |\n   |                | possible size of a response supported by the \
    \    |\n   |                | SWIMA-PC (see Section 5.15.2).  The Description\
    \  |\n   |                | field SHOULD contain additional diagnostic       |\n\
    \   |                | information.                                     |\n  \
    \ |                |                                                  |\n   |\
    \ 0x00000007 (7) | SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR.  This      |\n   |  \
    \              | indicates that the SWIMA-PC experienced an error |\n   |    \
    \            | while fulfilling a given subscription.  The      |\n   |      \
    \          | error information includes the Subscription ID   |\n   |        \
    \        | of the relevant subscription, as well as a       |\n   |          \
    \      | sub-error that describes the nature of the error |\n   |            \
    \    | the SWIMA-PC experienced.  The SWIMA-PC and      |\n   |              \
    \  | SWIMA-PV MUST treat the identified subscription  |\n   |                |\
    \ as cancelled.                                    |\n   |                |  \
    \                                                |\n   | 0x00000008 (8) | SWIMA_SUBSCRIPTION_ID_REUSE_ERROR.\
    \  This         |\n   |                | indicates that the SWIMA-PC received\
    \ a SWIMA     |\n   |                | Request from a given SWIMA-PV where the\
    \ Request  |\n   |                | ID of that SWIMA Request is currently used\
    \ as    |\n   |                | the Subscription ID of an active subscription\
    \    |\n   |                | with that SWIMA-PV.  This error does not cancel\
    \  |\n   |                | the identified subscription.                     |\n\
    \   +----------------+--------------------------------------------------+\n  \
    \                 Table 9: PA-TNC Error Codes for SWIMA\n   The following subsections\
    \ describe the structures present in the\n   error information fields.  Note that\
    \ all error structures include a\n   variable-length field but do not include\
    \ any fields indicating the\n   length of those fields.  A length field is unnecessary\
    \ because all\n   other fields in the PA-TNC Error attribute are of fixed length,\
    \ and\n   thus the length of the variable-length field can be found by\n   subtracting\
    \ the size of these fixed-length fields from the PA-TNC\n   Attribute Length field\
    \ in the PA-TNC Attribute Header.\n"
- title: 5.15.1.  SWIMA_ERROR, SWIMA_SUBSCRIPTION_DENIED_ERROR, and
  contents:
  - "5.15.1.  SWIMA_ERROR, SWIMA_SUBSCRIPTION_DENIED_ERROR, and\n         SWIMA_SUBSCRIPTION_ID_REUSE_ERROR\
    \ Information\n   The SWIMA_ERROR error code indicates that the sender (the SWIMA-PC)\n\
    \   has encountered an error that is related to the processing of a SWIMA\n  \
    \ Request attribute but that is not covered by SWIMA error codes that\n   are\
    \ more specific.  The SWIMA_SUBSCRIPTION_DENIED_ERROR is used when\n   the SWIMA-PV\
    \ sends a request to establish a subscription or clear all\n   subscriptions from\
    \ the given SWIMA-PV but the SWIMA-PC is unable or\n   unwilling to comply with\
    \ this request.  The\n   SWIMA_SUBSCRIPTION_ID_REUSE_ERROR is used when the SWIMA-PC\
    \ receives\n   a SWIMA Request whose Request ID duplicates a Subscription ID of\
    \ an\n   active subscription with the request's sender.  All of these error\n\
    \   codes use the following error information structure.\n                   \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Copy of Request ID / Subscription ID               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                Description (variable length)                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       Figure 21: SWIMA_ERROR, SWIMA_SUBSCRIPTION_DENIED_ERROR, and\n       \
    \        SWIMA_SUBSCRIPTION_ID_REUSE_ERROR Information\n   +--------------+----------------------------------------------------+\n\
    \   | Field        | Description                                        |\n  \
    \ +--------------+----------------------------------------------------+\n   |\
    \ Copy of      | In the case that this error condition is generated |\n   | Request\
    \ ID / | in direct response to a SWIMA Request attribute,   |\n   | Subscription\
    \ | this field MUST contain an exact copy of the       |\n   | ID           |\
    \ Request ID field in the SWIMA Request attribute    |\n   |              | that\
    \ caused this error.  In the case that the      |\n   |              | attribute\
    \ in question is generated in fulfillment  |\n   |              | of an active\
    \ subscription, this field MUST contain |\n   |              | the Subscription\
    \ ID of the subscription for which  |\n   |              | the attribute was generated.\
    \  (This is only        |\n   |              | possible if the error code is SWIMA_ERROR,\
    \ as the  |\n   |              | other errors are not generated by subscription\
    \     |\n   |              | fulfillment.)  Note that in the case of failed  \
    \   |\n   |              | subscription fulfillment, the indicated error     \
    \ |\n   |              | appears as a sub-error for a                       |\n\
    \   |              | SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR, as described |\n  \
    \ |              | in Section 5.15.3.                                 |\n   |\
    \              |                                                    |\n   | Description\
    \  | A UTF-8 [RFC3629] string describing the condition  |\n   |              |\
    \ that caused this error.  This field MAY be zero-   |\n   |              | length.\
    \  However, senders SHOULD include some kind |\n   |              | of description\
    \ in all PA-TNC Error attributes with |\n   |              | these error codes.\
    \  This field MUST NOT be null    |\n   |              | terminated.         \
    \                               |\n   +--------------+----------------------------------------------------+\n\
    \        Table 10: SWIMA_ERROR, SWIMA_SUBSCRIPTION_DENIED_ERROR, and\n       \
    \    SWIMA_SUBSCRIPTION_ID_REUSE_ERROR Information Fields\n   This error information\
    \ structure is used with SWIMA_ERROR,\n   SWIMA_SUBSCRIPTION_DENIED_ERROR, and\n\
    \   SWIMA_SUBSCRIPTION_ID_REUSE_ERROR status codes to identify the SWIMA\n   Request\
    \ attribute that precipitated the error condition and to\n   describe the error.\
    \  The Description field contains text describing\n   the error.  The SWIMA-PC\
    \ MAY encode machine-interpretable information\n   in this field but SHOULD also\
    \ include a human-readable description of\n   the error, since the receiving SWIMA-PV\
    \ might not recognize the\n   SWIMA-PC's encoded information.\n"
- title: 5.15.2.  SWIMA_RESPONSE_TOO_LARGE_ERROR Information
  contents:
  - "5.15.2.  SWIMA_RESPONSE_TOO_LARGE_ERROR Information\n   The SWIMA_RESPONSE_TOO_LARGE_ERROR\
    \ error code indicates that a\n   SWIMA-PC's response to a SWIMA-PV's SWIMA Request\
    \ attribute was too\n   large to send.\n                        1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Copy of Request ID / Subscription ID             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Maximum Allowed Size                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Description (variable length)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Figure 22: SWIMA_RESPONSE_TOO_LARGE_ERROR Information\n   +--------------+----------------------------------------------------+\n\
    \   | Field        | Description                                        |\n  \
    \ +--------------+----------------------------------------------------+\n   |\
    \ Copy of      | In the case that the attribute in question is      |\n   | Request\
    \ ID / | generated in direct response to a SWIMA Request,   |\n   | Subscription\
    \ | this field MUST contain an exact copy of the       |\n   | ID           |\
    \ Request ID field in the SWIMA Request attribute    |\n   |              | that\
    \ caused this error.  In the case that the      |\n   |              | attribute\
    \ in question is generated in fulfillment  |\n   |              | of an active\
    \ subscription, this field MUST contain |\n   |              | the Subscription\
    \ ID of the subscription for which  |\n   |              | the attribute was generated.\
    \  Note that in the     |\n   |              | latter case, the SWIMA_RESPONSE_TOO_LARGE_ERROR\
    \    |\n   |              | appears as a sub-error for a                     \
    \  |\n   |              | SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR, as described |\n\
    \   |              | in Section 5.15.3.                                 |\n  \
    \ |              |                                                    |\n   |\
    \ Maximum      | This field MUST contain an unsigned integer        |\n   | Allowed\
    \ Size | indicating the largest permissible size, in bytes, |\n   |          \
    \    | of the SWIMA attribute that the SWIMA-PC is        |\n   |            \
    \  | currently willing to send in response to a SWIMA   |\n   |              |\
    \ Request attribute.                                 |\n   |              |  \
    \                                                  |\n   | Description  | A UTF-8\
    \ [RFC3629] string describing the condition  |\n   |              | that caused\
    \ this error.  This field MAY be zero-   |\n   |              | length.  However,\
    \ senders SHOULD include some kind |\n   |              | of description in all\
    \ PA-TNC Error attributes with |\n   |              | this error code.  This field\
    \ MUST NOT be null      |\n   |              | terminated.                   \
    \                     |\n   +--------------+----------------------------------------------------+\n\
    \        Table 11: SWIMA_RESPONSE_TOO_LARGE_ERROR Information Fields\n   This\
    \ error structure is used with the SWIMA_RESPONSE_TOO_LARGE_ERROR\n   status code\
    \ to identify the SWIMA Request attribute that precipitated\n   the error condition\
    \ and to describe the error.  The Maximum Allowed\n   Size field indicates the\
    \ largest attribute the SWIMA-PC is willing to\n   send in response to a SWIMA\
    \ Request under the current circumstances.\n   Note that under other circumstances,\
    \ the SWIMA-PC might be willing to\n   return larger or smaller responses than\
    \ indicated (such as if the\n   endpoint connects to the NEA Server using a different\
    \ network\n   protocol).  The other fields in this error information structure\
    \ have\n   the same meanings as corresponding fields in the SWIMA_ERROR and\n\
    \   SWIMA_SUBSCRIPTION_DENIED_ERROR information structures.\n"
- title: 5.15.3.  SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR Information
  contents:
  - "5.15.3.  SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR Information\n   The SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR\
    \ error code indicates that\n   the SWIMA-PC encountered an error while fulfilling\
    \ a subscription.\n   The bytes after the first 4 octets duplicate a PA-TNC Error\
    \ attribute\n   (as described in Section 4.2.8 of PA-TNC [RFC5792]) that is used\
    \ to\n   identify the nature of the encountered error.\n                     \
    \   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Subscription ID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Reserved   |           Sub-error Code Vendor ID            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Sub-error Code                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Sub-error Information (variable length)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        Figure 23: SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR Information\n   +--------------+----------------------------------------------------+\n\
    \   | Field        | Description                                        |\n  \
    \ +--------------+----------------------------------------------------+\n   |\
    \ Subscription | This field MUST contain the Subscription ID of the |\n   | ID\
    \           | subscription whose fulfillment caused this error.  |\n   |     \
    \         |                                                    |\n   | Reserved\
    \     | This field MUST contain the value of the Reserved  |\n   |           \
    \   | field of a PA-TNC Error attribute that describes   |\n   |             \
    \ | the error condition encountered during             |\n   |              |\
    \ subscription processing.                           |\n   |              |  \
    \                                                  |\n   | Sub-error    | This\
    \ field MUST contain the value of the Error     |\n   | Code Vendor  | Code Vendor\
    \ ID field of a PA-TNC Error attribute   |\n   | ID           | that describes\
    \ the error condition encountered     |\n   |              | during subscription\
    \ processing.                    |\n   |              |                      \
    \                              |\n   | Sub-error    | This field MUST contain\
    \ the value of the Error     |\n   | Code         | Code field of a PA-TNC Error\
    \ attribute that        |\n   |              | describes the error condition encountered\
    \ during   |\n   |              | subscription processing.                   \
    \        |\n   |              |                                              \
    \      |\n   | Sub-error    | This field MUST contain the value of the Error \
    \    |\n   | Information  | Information field of a PA-TNC Error attribute that\
    \ |\n   |              | describes the error condition encountered during   |\n\
    \   |              | subscription processing.                           |\n  \
    \ +--------------+----------------------------------------------------+\n    \
    \ Table 12: SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR Information Fields\n   This error\
    \ structure is used with the\n   SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR status code.\
    \  The first 4 octets\n   of this error structure contain the Subscription ID\
    \ of the\n   subscription that was being fulfilled when the error occurred.  The\n\
    \   remaining fields of this error structure duplicate the fields of a\n   PA-TNC\
    \ Error attribute, referred to as the \"sub-error\".  The error\n   code of the\
    \ sub-error corresponds to the code of the error that the\n   SWIMA-PC encountered\
    \ while fulfilling the given subscription.  The\n   sub-error MUST NOT have an\
    \ error code of\n   SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR.\n   The SWIMA-PC sending\
    \ a PA-TNC Error attribute with this error code,\n   and the SWIMA-PV receiving\
    \ it, MUST treat the subscription identified\n   by the Subscription ID field\
    \ as cancelled.  All other subscriptions\n   are unaffected.\n"
- title: 6.  Supported Data Models
  contents:
  - "6.  Supported Data Models\n   SWIMA supports an extensible list of data models\
    \ for representing and\n   transmitting software inventory information.  This\
    \ list of data\n   models appears in the \"Software Data Model Types\" registry\
    \ (see\n   Section 10.5).  This document provides guidance for an initial set\
    \ of\n   data models.  Other documents might provide guidance on the use of\n\
    \   new data models by SWIMA and will be referenced by extensions to the\n   \"\
    Software Data Model Types\" registry.\n"
- title: 6.1.  ISO 2015 SWID Tags Using XML
  contents:
  - "6.1.  ISO 2015 SWID Tags Using XML\n   The International Organization for Standardization\
    \ and the\n   International Electrotechnical Commission (ISO/IEC) published the\n\
    \   specification governing SWID tag construction and use\n   (ISO/IEC 19770-2:2009)\
    \ in 2009 [SWID09], with a revised version of\n   the specification (ISO/IEC 19770-2:2015)\
    \ published in 2015 [SWID15].\n   Since that time, a growing number of vendors\
    \ have integrated SWID\n   tags into their software products.  SWID tags significantly\
    \ simplify\n   the task of identifying pieces of software: instead of relying\
    \ on\n   discovery processes that look for clues as to software presence, such\n\
    \   as the presence of particular files or registry keys, vendors can use\n  \
    \ a readily available list of SWID tags that provides simple and\n   immediate\
    \ evidence as to the presence of the given piece of software.\n   SWIMA has no\
    \ reliance on the presence or management of SWID tags on\n   an endpoint as described\
    \ in the ISO 2015 SWID tag specification.\n   However, as presented in the ISO\
    \ 2015 SWID tag specification, the\n   data model for describing software provides\
    \ a robust and\n   comprehensive way of describing software and is adopted here\
    \ as a\n   means of representing and transmitting software information.  It\n\
    \   should be emphasized that the use of the ISO SWID tag data model\n   makes\
    \ no assumption as to whether (1) the source of the recorded\n   information was,\
    \ in fact, an ISO SWID tag harvested from the endpoint\n   or (2) the information\
    \ was created using some other source and\n   normalized to the SWID format.\n"
- title: 6.1.1.  Guidance on Normalizing Source Data to ISO 2015 SWID Tags
  contents:
  - "6.1.1.  Guidance on Normalizing Source Data to ISO 2015 SWID Tags\n        Using\
    \ XML\n   Any record associated with this Software Data Model Type MUST conform\n\
    \   to [SWID15].\n   If generating a new ISO 2015 SWID tag, the software generating\
    \ the\n   tag MUST use a Tag Creator RegID that is associated with the\n   generating\
    \ software, unless this is impossible, in which case it MUST\n   use the \"http://invalid.unavailable\"\
    \ Tag Creator RegID value.  (This\n   conforms to conventions for an unknown tag\
    \ creator in the ISO 2015\n   SWID tag specification.)  Do not use a RegID associated\
    \ with any\n   other party.  In particular, it is incorrect to use a Tag Creator\n\
    \   RegID associated with the software being described by the tag, the\n   enterprise\
    \ that is using the software, or any other entity except\n   that of the party\
    \ that built the tool that is generating the SWID\n   tag.  This reflects the\
    \ requirement that the Tag Creator RegID\n   identify the party that created the\
    \ tag.  Moreover, any generated\n   tags SHOULD conform to guidance for tag creators\
    \ as provided in\n   NISTIR 8060 [NIST8060], which provides additional recommendations\
    \ to\n   increase interoperable use of SWID tags.\n"
- title: 6.1.2.  Guidance on Creation of Software Identifiers from ISO 2015
  contents:
  - "6.1.2.  Guidance on Creation of Software Identifiers from ISO 2015\n        SWID\
    \ Tags\n   A Software Identifier generated from an ISO 2015 SWID tag is\n   expressed\
    \ as a concatenation of the value of the Tag Creator RegID\n   field and the Unique\
    \ ID field.  Specifically, (1) it MUST be of the\n   form TAG_CREATOR_REGID \"\
    _\" \"_\" UNIQUE_ID and (2) it consists of the\n   Tag Creator RegID and the Unique\
    \ ID from the tag connected with a\n   double underscore (_), without any other\
    \ connecting character or\n   whitespace.\n"
- title: 6.2.  ISO 2009 SWID Tags Using XML
  contents:
  - "6.2.  ISO 2009 SWID Tags Using XML\n   As noted above, ISO's SWID tag specification\
    \ provides a useful data\n   model for representation of software information.\
    \  As of the writing\n   of this specification, while the ISO 2015 specification\
    \ is considered\n   more comprehensive and addresses some issues with the ISO\
    \ 2009\n   specification, 2009-format SWID tags remain far more common in\n  \
    \ deployments.  For this reason, ISO 2009 SWID tags are included in the\n   \"\
    Software Data Model Types\" registry.\n"
- title: 6.2.1.  Guidance on Normalizing Source Data to ISO 2009 SWID Tags
  contents:
  - "6.2.1.  Guidance on Normalizing Source Data to ISO 2009 SWID Tags\n        Using\
    \ XML\n   Any record associated with this Software Data Model Type MUST conform\n\
    \   to [SWID09].  Any such tag SHOULD use a UTF-8 encoding [RFC3629] but\n   MUST\
    \ NOT alter the existing encoding if doing so would invalidate\n   digital signatures\
    \ included in the tag.\n   If generating a new ISO 2009 SWID tag, the software\
    \ generating the\n   tag MUST use a Tag Creator RegID that is associated with\
    \ the\n   generating software, unless this is impossible, in which case it MUST\n\
    \   use \"unknown\", which indicates that the tag creator is unknown.\n   (This\
    \ conforms to conventions for an unknown tag creator in the\n   ISO 2009 SWID\
    \ tag specification.)  Do not use a RegID associated with\n   any other party.\
    \  In particular, it is incorrect to use a Tag Creator\n   RegID associated with\
    \ the software being described by the tag, the\n   enterprise that is using the\
    \ software, or any other entity except\n   that of the party that built the tool\
    \ that is generating the SWID\n   tag.  This reflects the requirement that the\
    \ Tag Creator RegID\n   identify the party that created the tag.\n"
- title: 6.2.2.  Guidance on Creation of Software Identifiers from ISO 2009
  contents:
  - "6.2.2.  Guidance on Creation of Software Identifiers from ISO 2009\n        SWID\
    \ Tags\n   A Software Identifier generated from an ISO 2009 SWID tag is\n   expressed\
    \ as a concatenation of the value of the Tag Creator RegID\n   field and the Unique\
    \ ID field.  Specifically, (1) it MUST be of the\n   form TAG_CREATOR_REGID \"\
    _\" \"_\" UNIQUE_ID and (2) it consists of the\n   Tag Creator RegID and the Unique\
    \ ID from the tag connected with a\n   double underscore (_), without any other\
    \ connecting character or\n   whitespace.\n"
- title: 7.  Relationship to Other Specifications
  contents:
  - "7.  Relationship to Other Specifications\n   This specification is expected to\
    \ participate in a standard NEA\n   architecture.  As such, it is expected to\
    \ be used in conjunction with\n   the other protocols used in a NEA exchange.\
    \  In particular, SWIMA\n   attributes are conveyed over PB-TNC [RFC5793], which\
    \ is in turn\n   conveyed over some variant of PT (either PT-TLS [RFC6876] or\
    \ PT-EAP\n   [RFC7171]).  These protocols have an especially important role, as\n\
    \   they are responsible for ensuring that attributes defined under this\n   specification\
    \ are delivered reliably, securely, and to the\n   appropriate party.\n   It is\
    \ important to note that the Product Information, Numeric\n   Version, and String\
    \ Version attributes defined in the PA-TNC\n   specification [RFC5792] are also\
    \ meant to convey information about\n   installed applications and the versions\
    \ thereof.  As such, there is\n   some conceptual overlap between those attributes\
    \ and the intent of\n   this specification.  However, PA-TNC was designed to respond\
    \ to very\n   specific queries about specific classes of products, while SWIMA\
    \ is\n   able to convey a broader query, resulting in a more comprehensive set\n\
    \   of information regarding an endpoint's installed software.  As such,\n   this\
    \ specification provides important capabilities not present in the\n   PA-TNC\
    \ specification.\n   The NEA architecture is intended to support a broad range\
    \ of\n   activities and, as such, might be employed by other specifications.\n\
    \   For example, requirement T-001 in the SACM Requirements document\n   [RFC8248]\
    \ notes that NEA can support data collection from endpoints\n   within the broader\
    \ SACM architecture.  (Other parts of the NEA\n   architecture, which SWIMA uses,\
    \ meet the other SACM data transport\n   requirements.)  In the SACM architecture,\
    \ a SWIMA-PV corresponds to a\n   \"SACM Collector\" and a SWIMA-PC corresponds\
    \ to a \"SACM Internal\n   Collector\".  In the SACM architecture, SWIMA can support\
    \ activities\n   relating to software inventory collection.  Specifically, SWIMA\n\
    \   supports the SACM \"Endpoint Posture Attribute Value Collection\" use\n  \
    \ case (Section 2.1.3 in [RFC7632]) by describing a collection\n   mechanism that\
    \ enables event-driven, scheduled, and ad hoc data\n   collection of software\
    \ inventory information.  SWIMA's flexibility\n   with regard to the format of\
    \ inventory data records means that it is\n   compatible with virtually any data\
    \ format that implements SACM's\n   \"Define, Publish, Query, and Retrieve Security\
    \ Automation Data\" use\n   case (Section 2.1.1 in [RFC7632]).  This is just one\
    \ example of how\n   SWIMA can support broader security solution standards.  Note\
    \ that\n   while SWIMA can support these SACM use cases, SWIMA has no\n   dependencies\
    \ on the SACM architecture or any other context in which\n   NEA might reasonably\
    \ be applied.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This section discusses some of the security threats\
    \ facing SWIMA-PCs\n   and SWIMA-PVs.  This section primarily notes potential\
    \ issues for\n   implementers to consider, although it does contain a handful\
    \ of\n   normative requirements to address certain security issues.  The\n   issues\
    \ identified below focus on capabilities specific to this\n   document.  Implementers\
    \ are advised to consult other relevant NEA\n   specifications, particularly [RFC5209]\
    \ (the NEA architecture) and\n   [RFC5792] (PA-TNC), for security issues that\
    \ are applicable to such\n   components in general.\n"
- title: 8.1.  Evidentiary Value of Software Inventory Evidence Records
  contents:
  - "8.1.  Evidentiary Value of Software Inventory Evidence Records\n   The degree\
    \ to which an endpoint's Software Inventory Evidence\n   Collection accurately\
    \ reflects the endpoint's actual software load\n   and any changes made to this\
    \ software load is dependent on the\n   accuracy of the tools used to populate\
    \ and manage the Software\n   Inventory Evidence Records in this collection. \
    \ While the SWIMA-PC is\n   required to detect changes to an endpoint's Software\
    \ Inventory\n   Evidence Collection in near real time, some tools might not be\n\
    \   designed to update records in the Software Inventory Evidence\n   Collection\
    \ in real time.  This can result in a collection that is out\n   of sync with\
    \ actual system state.  Moreover, tools might inaccurately\n   characterize software\
    \ or fail to properly record its removal.\n   Finally, it is likely that there\
    \ will be software on the endpoint\n   that is not tracked by any source and thus\
    \ is not reflected in the\n   Software Inventory Evidence Collection.  Tools that\
    \ implement SWIMA\n   ought to be aware of these potential issues and minimize\
    \ them, but\n   completely eliminating such issues is likely impossible.  Users\
    \ of\n   collected Software Inventory Evidence Records need to understand that\n\
    \   the information provided by SWIMA cannot be treated as completely\n   accurate.\
    \  Nonetheless, having endpoints report this information can\n   still provide\
    \ useful insights into the state of the endpoint's\n   software load and can alert\
    \ administrators and policy tools of\n   situations that require remediation.\n"
- title: 8.2.  Sensitivity of Collected Records
  contents:
  - "8.2.  Sensitivity of Collected Records\n   Collected software records can be\
    \ sensitive in nature.  This can\n   include both security sensitivities and privacy\
    \ sensitivities.\n   Privacy sensitivities are discussed more in Section 9.  With\
    \ regard\n   to security, inventory records represent a wealth of information\n\
    \   about the endpoint in question, and for an adversary who does not\n   already\
    \ have access to the endpoint a collection of the endpoint's\n   inventory records\
    \ might provide many details that are useful for\n   mounting an attack.  A list\
    \ of the inventory records associated with\n   an endpoint reveals a list of software\
    \ installed on the endpoint.\n   This list can be very detailed, noting specific\
    \ versions and even\n   patch levels; an adversary can use this information to\
    \ identify\n   vulnerable software and design efficacious attacks.\n   The following\
    \ information might also be gleaned from a collection of\n   software inventory\
    \ records:\n   o  An inventory record might include information about where the\n\
    \      product was installed on a given endpoint.  This can reveal\n      details\
    \ about the file organization of that endpoint that an\n      attacker can utilize.\n\
    \   o  An inventory record might include information about how the\n      software\
    \ was provided to the endpoint, who in an organization\n      signs off on the\
    \ package release, and who packaged the product for\n      installation.  This\
    \ information might be used as a starting point\n      for the development of\
    \ supply chain attacks.\n   o  Events affecting inventory records are reported\
    \ with timestamps\n      indicating when each given event occurred.  This can\
    \ give the\n      attacker an indication of how quickly an organization distributes\n\
    \      patches and updates, helping the attacker determine how long an\n     \
    \ attack window might remain open.\n   Any consolidated software inventory is\
    \ a potential risk, because such\n   an inventory can provide an adversary an\
    \ insight into the\n   enterprise's configuration and management process.  It\
    \ is recommended\n   that a centralized software inventory record collection be\
    \ protected\n   against unauthorized access.  Mechanisms to accomplish this can\n\
    \   include encrypting the data at rest, ensuring that access to the data\n  \
    \ is limited only to authorized individuals and processes, and other\n   basic\
    \ security precautions.\n"
- title: 8.3.  Integrity of Endpoint Records
  contents:
  - "8.3.  Integrity of Endpoint Records\n   SWIMA-PCs maintain records of detected\
    \ changes to the endpoint's\n   Software Inventory Evidence Collection.  These\
    \ records are used to\n   respond to a SWIMA-PV's request for change events. \
    \ The SWIMA-PV\n   might use a list of reported events to update its understanding\
    \ of\n   the endpoint's Software Inventory Evidence Collection without needing\n\
    \   to receive a full inventory report from the SWIMA-PC.  For this\n   reason,\
    \ preserving the integrity of the SWIMA-PC's record of events\n   is extremely\
    \ important.  If an attacker modifies the SWIMA-PC's\n   record of changes to\
    \ the endpoint's Software Inventory Evidence\n   Collection, this might cause\
    \ the SWIMA-PV's understanding of the\n   endpoint's Software Inventory Evidence\
    \ Collection to differ from its\n   actual state.  The results of such an attack\
    \ might include leading\n   the SWIMA-PV to believe that (1) absent software was\
    \ present or,\n   conversely, that present software was absent or (2) patches\
    \ have been\n   installed even if this is not the case.  Such an attack could\
    \ also\n   cause the SWIMA-PV to be unaware of other changes to Software\n   Inventory\
    \ Evidence Records.  As such, the SWIMA-PC MUST take steps to\n   protect the\
    \ integrity of its event records.\n   In addition, records of established SWIMA-PV\
    \ subscriptions also\n   require protection against manipulation or corruption.\
    \  If an\n   attacker is able to modify or delete records of a SWIMA-PV's\n  \
    \ established subscription, the SWIMA-PC might fail to correctly\n   fulfill this\
    \ subscription.  The SWIMA-PV would not be aware that its\n   subscription was\
    \ not being correctly fulfilled unless it received\n   additional information\
    \ that indicated a discrepancy.  For example,\n   the SWIMA-PV might collect a\
    \ full inventory and realize from this\n   information that certain events had\
    \ not been correctly reported in\n   accordance with an established subscription.\
    \  For this reason, the\n   SWIMA-PC MUST protect the integrity of subscription\
    \ records.\n"
- title: 8.4.  SWIMA-PC Access Permissions
  contents:
  - "8.4.  SWIMA-PC Access Permissions\n   A SWIMA-PC requires sufficient permissions\
    \ to collect Software\n   Inventory Evidence Records from all of its supported\
    \ sources, as well\n   as sufficient permissions to interact with the endpoint's\
    \ Posture\n   Broker Client.  With regard to the former, this might require\n\
    \   permissions to read the contents of directories throughout the\n   filesystem.\
    \  Depending on the operating environment and other\n   activities undertaken\
    \ by a SWIMA-PC (or software that incorporates a\n   SWIMA-PC as one of its capabilities),\
    \ additional permissions might be\n   required by the SWIMA-PC software.  The\
    \ SWIMA-PC SHOULD NOT be\n   granted permissions beyond what it needs to fulfill\
    \ its duties.\n"
- title: 8.5.  Sanitization of Record Fields
  contents:
  - "8.5.  Sanitization of Record Fields\n   Not all sources of software inventory\
    \ evidence are necessarily\n   tightly controlled.  For example, consider a source\
    \ that gathers\n   .swid files from the endpoint's filesystem.  Any party could\
    \ create a\n   new .swid file that could be collected and turned into a Software\n\
    \   Inventory Evidence Record.  As a result, it is important that the\n   contents\
    \ of source information not be automatically trusted.  In\n   particular, tools\
    \ that read source information and the Software\n   Inventory Evidence Records\
    \ derived therefrom, including SWIMA-PCs,\n   need to be careful to sanitize input\
    \ to prevent buffer overflow\n   attacks, encoding attacks, and other weaknesses\
    \ that might be\n   exploited by an adversary who can control the contents of\
    \ a record.\n"
- title: 8.6.  PA-TNC Security Threats
  contents:
  - "8.6.  PA-TNC Security Threats\n   In addition to the aforementioned considerations,\
    \ the SWIMA protocol\n   is subject to the same security threats as other PA-TNC\
    \ transactions;\n   see Section 5.2 of PA-TNC [RFC5792].  These include, but are\
    \ not\n   limited to, attribute theft, message fabrication, attribute\n   modification,\
    \ attribute replay, attribute insertion, and denial of\n   service.  Implementers\
    \ are advised to consult the PA-TNC\n   specification to better understand these\
    \ security issues.\n"
- title: 9.  Privacy Considerations
  contents:
  - "9.  Privacy Considerations\n   As noted in Section 8.2, if an adversary can gain\
    \ an understanding of\n   the software installed on an endpoint, they can utilize\
    \ this to\n   launch attacks and maintain footholds on this endpoint.  For this\n\
    \   reason, the NEA Server needs to ensure that adequate safeguards are\n   in\
    \ place to prevent exposure of collected inventory records.  For\n   similar reasons,\
    \ it is advisable that an endpoint only send records\n   to a NEA Server that\
    \ is authorized to receive this information and\n   that can be trusted to safeguard\
    \ this information after collection.\n   In addition, software inventory information\
    \ can lead to insights\n   about the endpoint's primary user if that user is able\
    \ to install\n   software.  (Note that users might be \"able\" to install their\
    \ own\n   software even if they are not \"allowed\" to do so.)  This is\n   especially\
    \ true on endpoints that support \"apps\", as individual apps\n   can be closely\
    \ tied to specific groups or activities.  This could\n   conceivably allow inferences\
    \ about things such as a user's hobbies;\n   the banks and other financial institutions\
    \ that they use; and\n   information about the user's race, sex, or sexual orientation.\n\
    \   Organizations that collect software inventory information from\n   endpoints\
    \ ought to make sure the endpoints' users are aware of this\n   collection.  In\
    \ addition, organizations should be aware that a\n   software inventory associated\
    \ with an individual, such as the\n   inventory of the individual's primary endpoint,\
    \ could expose\n   sensitive personal information.  For this reason, privacy safeguards\n\
    \   are necessary for collected inventory information.  Such safeguards\n   would\
    \ require not only protection of the inventory's confidentiality\n   but also\
    \ appropriate access controls so that only those trained in\n   relevant privacy\
    \ requirements are able to view the data.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   This section extends multiple existing IANA registries.\n\
    \   Specifically, it extends the \"PA-TNC Attribute Types\" and \"PA-TNC\n   Error\
    \ Codes\" registries defined in the PA-TNC specification [RFC5792]\n   and the\
    \ \"PA Subtypes\" registry defined in the PB-TNC specification\n   [RFC5793] and\
    \ extended in PA-TNC.  This specification only adds\n   values to these registries\
    \ and does not alter how these registries\n   work or are maintained.  Consult\
    \ the appropriate specifications for\n   details on the operations and maintenance\
    \ of these registries.\n   This section also defines a new IANA registry for \"\
    Software Data\n   Model Types\".  The structure and requirements for this registry\
    \ are\n   provided, as well as guidelines for reviewers adjudicating the\n   addition\
    \ of new entries to this registry.\n"
- title: 10.1.  Guidance for the Designated Experts
  contents:
  - "10.1.  Guidance for the Designated Experts\n   For the \"Software Data Model\
    \ Types\" registry defined by this\n   specification, new values are added to\
    \ the registry using the\n   \"Specification Required\" process defined in RFC\
    \ 8126 [RFC8126].\n   This section provides guidance to designated experts so\
    \ that they may\n   make decisions using a philosophy appropriate for this registry.\n\
    \   Designated experts should focus on the following requirements.  All\n   values\
    \ in this IANA registry MUST be documented in a specification\n   that is permanently\
    \ and publicly available.  Values MUST also be\n   useful, not harmful to the\
    \ Internet, and defined in a manner that is\n   clear and likely to ensure interoperability.\n\
    \   Designated experts should encourage vendors to avoid defining similar\n  \
    \ but incompatible values and instead agree on a single value allocated\n   via\
    \ IETF standards.  However, it is beneficial to document existing\n   practice.\n\
    \   There are several ways to ensure that a specification is permanently\n   and\
    \ publicly available.  It may be published as an RFC.\n   Alternatively, it may\
    \ be published in another manner that makes it\n   freely available to anyone.\
    \  However, in this latter case, the vendor\n   MUST supply a copy to IANA and\
    \ authorize IANA to archive this copy\n   and make it freely available to all,\
    \ if at some point the document\n   becomes no longer freely available to all\
    \ through other channels.\n   Sections 10.2, 10.3, and 10.4 define a new PA Subtype,\
    \ new PA-TNC\n   Attribute Types, and new PA-TNC Error Codes, respectively.\n\
    \   Section 10.5 provides guidance to IANA in creating and managing the\n   new\
    \ \"Software Data Model Types\" registry defined by this\n   specification.\n"
- title: 10.2.  PA Subtypes
  contents:
  - "10.2.  PA Subtypes\n   The following is an extension to the list of PA Subtypes\
    \ provided in\n   Section 7.2 of [RFC5792] and defined in the \"PA Subtypes\"\
    \ registry in\n   Section 6.3 of [RFC5793].  See <https://www.iana.org/assignments/\n\
    \   pb-tnc-parameters/>.\n       +-----+---------+------------------+------------------------+\n\
    \       | PEN | Integer | Name             | Defining Specification |\n      \
    \ +-----+---------+------------------+------------------------+\n       | 0  \
    \ | 9       | SWIMA Attributes | RFC 8412               |\n       +-----+---------+------------------+------------------------+\n"
- title: 10.3.  PA-TNC Attribute Types
  contents:
  - "10.3.  PA-TNC Attribute Types\n   Section 5.2 of this specification defines several\
    \ new PA-TNC\n   attributes.  The following values have been added to the \"PA-TNC\n\
    \   Attribute Types\" registry defined in the PA-TNC specification.  Note\n  \
    \ that Table 1 in Section 5.2 lists these attributes in both\n   hexadecimal and\
    \ decimal format.  The decimal values given in that\n   table are identical to\
    \ those provided here.  Note also that Table 1\n   includes an entry for the PA-TNC\
    \ Error attribute, but the IANA\n   information associated with the PA-TNC Error\
    \ attribute is already\n   defined in the PA-TNC specification and is not reproduced\
    \ here.\n   +-----+---------+----------------------------+----------------------+\n\
    \   | PEN | Integer | Name                       | Defining             |\n  \
    \ |     |         |                            | Specification        |\n   +-----+---------+----------------------------+----------------------+\n\
    \   | 0   | 13      | SWIMA Request              | RFC 8412             |\n  \
    \ |     |         |                            |                      |\n   |\
    \ 0   | 14      | Software Identifier        | RFC 8412             |\n   |  \
    \   |         | Inventory                  |                      |\n   |    \
    \ |         |                            |                      |\n   | 0   |\
    \ 15      | Software Identifier Events | RFC 8412             |\n   |     |  \
    \       |                            |                      |\n   | 0   | 16 \
    \     | Software Inventory         | RFC 8412             |\n   |     |      \
    \   |                            |                      |\n   | 0   | 17     \
    \ | Software Events            | RFC 8412             |\n   |     |         |\
    \                            |                      |\n   | 0   | 18      | Subscription\
    \ Status        | RFC 8412             |\n   |     |         | Request       \
    \             |                      |\n   |     |         |                 \
    \           |                      |\n   | 0   | 19      | Subscription Status\
    \        | RFC 8412             |\n   |     |         | Response             \
    \      |                      |\n   |     |         |                        \
    \    |                      |\n   | 0   | 20      | Source Metadata Request  \
    \  | RFC 8412             |\n   |     |         |                            |\
    \                      |\n   | 0   | 21      | Source Metadata Response   | RFC\
    \ 8412             |\n   +-----+---------+----------------------------+----------------------+\n"
- title: 10.4.  PA-TNC Error Codes
  contents:
  - "10.4.  PA-TNC Error Codes\n   Section 5.15 of this specification defines several\
    \ new PA-TNC Error\n   Codes.  The following values have been added to the \"\
    PA-TNC Error\n   Codes\" registry defined in the PA-TNC specification.  Note that\n\
    \   Table 9 in Section 5.15 lists these codes in both hexadecimal and\n   decimal\
    \ format.  The decimal values given in that table are identical\n   to those provided\
    \ here.\n"
- title: +-----+---------+--------------------------------------+---------------+
  contents:
  - '+-----+---------+--------------------------------------+---------------+

    '
- title: '| PEN | Integer | Name                                 | Defining      |'
  contents:
  - '| PEN | Integer | Name                                 | Defining      |

    '
- title: '|     |         |                                      | Specification |'
  contents:
  - '|     |         |                                      | Specification |

    '
- title: +-----+---------+--------------------------------------+---------------+
  contents:
  - '+-----+---------+--------------------------------------+---------------+

    '
- title: '| 0   | 4       | SWIMA_ERROR                          | RFC 8412      |'
  contents:
  - '| 0   | 4       | SWIMA_ERROR                          | RFC 8412      |

    '
- title: '|     |         |                                      |               |'
  contents:
  - '|     |         |                                      |               |

    '
- title: '| 0   | 5       | SWIMA_SUBSCRIPTION_DENIED_ERROR      | RFC 8412      |'
  contents:
  - '| 0   | 5       | SWIMA_SUBSCRIPTION_DENIED_ERROR      | RFC 8412      |

    '
- title: '|     |         |                                      |               |'
  contents:
  - '|     |         |                                      |               |

    '
- title: '| 0   | 6       | SWIMA_RESPONSE_TOO_LARGE_ERROR       | RFC 8412      |'
  contents:
  - '| 0   | 6       | SWIMA_RESPONSE_TOO_LARGE_ERROR       | RFC 8412      |

    '
- title: '|     |         |                                      |               |'
  contents:
  - '|     |         |                                      |               |

    '
- title: '| 0   | 7       | SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR | RFC 8412      |'
  contents:
  - '| 0   | 7       | SWIMA_SUBSCRIPTION_FULFILLMENT_ERROR | RFC 8412      |

    '
- title: '|     |         |                                      |               |'
  contents:
  - '|     |         |                                      |               |

    '
- title: '| 0   | 8       | SWIMA_SUBSCRIPTION_ID_REUSE_ERROR    | RFC 8412      |'
  contents:
  - '| 0   | 8       | SWIMA_SUBSCRIPTION_ID_REUSE_ERROR    | RFC 8412      |

    '
- title: +-----+---------+--------------------------------------+---------------+
  contents:
  - '+-----+---------+--------------------------------------+---------------+

    '
- title: 10.5.  Software Data Model Types
  contents:
  - "10.5.  Software Data Model Types\n   For the \"Software Data Model Types\" registry\n\
    \   (<https://www.iana.org/assignments/pa-tnc-parameters/\n   #software-data-model-types>,\
    \ each entry should include a\n   human-readable name, an SMI PEN, a decimal integer\
    \ value between 0\n   and 2^8-1 (inclusive), and a reference to the specification\
    \ where the\n   use of this data model is defined.  This referenced specification\n\
    \   needs to provide both a description of the format used by the data\n   model\
    \ and the procedures by which Software Identifiers are derived\n   from a record\
    \ expressed using this data model.  Note that a\n   specification that just defines\
    \ the data model structure and its use\n   is generally not sufficient, as it\
    \ would likely lack the procedures\n   for constructing a Software Identifier.\
    \  This is why the table below\n   uses the SWIMA standard for ISO SWID tags as\
    \ the reference for the\n   use of ISO SWID tags and does not reference the ISO\
    \ SWID tag\n   specification.\n   The following entries for this registry are\
    \ defined in this document.\n   They are the initial entries in the \"Software\
    \ Data Model Types\"\n   registry.  Additional entries to this registry are added\
    \ following\n   the \"Specification Required\" policy defined in [RFC8126], following\n\
    \   the guidelines in Section 10.1.\n   +-----+---------+-----------------------------+---------------------+\n\
    \   | PEN | Integer | Name                        | Defining            |\n  \
    \ |     |         |                             | Specification       |\n   +-----+---------+-----------------------------+---------------------+\n\
    \   | 0   | 0       | ISO 2015 SWID tags using    | RFC 8412            |\n  \
    \ |     |         | XML                         |                     |\n   |\
    \     |         |                             |                     |\n   | 0\
    \   | 1       | ISO 2009 SWID tags using    | RFC 8412            |\n   |    \
    \ |         | XML                         |                     |\n   |     |\
    \         |                             |                     |\n   | 0   | 192-255\
    \ | Reserved for local          | N/A                 |\n   |     |         |\
    \ enterprise use              |                     |\n   +-----+---------+-----------------------------+---------------------+\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [NIST8060]\n              Waltermire, D., Cheikes,\
    \ B., Feldman, L., and G. Witte,\n              \"Guidelines for the Creation\
    \ of Interoperable Software\n              Identification (SWID) Tags\", DOI 10.6028/NIST.IR.8060,\n\
    \              April 2016, <https://nvlpubs.nist.gov/nistpubs/ir/2016/\n     \
    \         NIST.IR.8060.pdf>.\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3339]  Klyne, G. and C. Newman, \"Date and Time on the Internet:\n   \
    \           Timestamps\", RFC 3339, DOI 10.17487/RFC3339, July 2002,\n       \
    \       <https://www.rfc-editor.org/info/rfc3339>.\n   [RFC3629]  Yergeau, F.,\
    \ \"UTF-8, a transformation format of\n              ISO 10646\", STD 63, RFC\
    \ 3629, DOI 10.17487/RFC3629,\n              November 2003, <https://www.rfc-editor.org/info/rfc3629>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC5198]  Klensin, J. and M. Padlipsky, \"Unicode Format for Network\n  \
    \            Interchange\", RFC 5198, DOI 10.17487/RFC5198, March 2008,\n    \
    \          <https://www.rfc-editor.org/info/rfc5198>.\n   [RFC5792]  Sangster,\
    \ P. and K. Narayan, \"PA-TNC: A Posture Attribute\n              (PA) Protocol\
    \ Compatible with Trusted Network Connect\n              (TNC)\", RFC 5792, DOI\
    \ 10.17487/RFC5792, March 2010,\n              <https://www.rfc-editor.org/info/rfc5792>.\n\
    \   [RFC8089]  Kerwin, M., \"The \"file\" URI Scheme\", RFC 8089,\n          \
    \    DOI 10.17487/RFC8089, February 2017,\n              <https://www.rfc-editor.org/info/rfc8089>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n         \
    \     RFC 2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174,\
    \ May 2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n   [SWID09]\
    \   The International Organization for Standardization/\n              International\
    \ Electrotechnical Commission, \"Information\n              technology - Software\
    \ asset management - Part 2: Software\n              identification tag\", ISO/IEC\
    \ 19770-2:2009, November 2009,\n              <https://www.iso.org/standard/53670.html>.\n\
    \   [SWID15]   The International Organization for Standardization/\n         \
    \     International Electrotechnical Commission, \"Information\n             \
    \ technology - Software asset management - Part 2: Software\n              identification\
    \ tag\", ISO/IEC 19770-2:2015, October 2015,\n              <https://www.iso.org/standard/65666.html>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC5209]  Sangster, P., Khosravi, H., Mani,\
    \ M., Narayan, K., and J.\n              Tardo, \"Network Endpoint Assessment\
    \ (NEA): Overview and\n              Requirements\", RFC 5209, DOI 10.17487/RFC5209,\
    \ June 2008,\n              <https://www.rfc-editor.org/info/rfc5209>.\n   [RFC5793]\
    \  Sahita, R., Hanna, S., Hurst, R., and K. Narayan, \"PB-TNC:\n             \
    \ A Posture Broker (PB) Protocol Compatible with Trusted\n              Network\
    \ Connect (TNC)\", RFC 5793, DOI 10.17487/RFC5793,\n              March 2010,\
    \ <https://www.rfc-editor.org/info/rfc5793>.\n   [RFC6876]  Sangster, P., Cam-Winget,\
    \ N., and J. Salowey, \"A Posture\n              Transport Protocol over TLS (PT-TLS)\"\
    , RFC 6876,\n              DOI 10.17487/RFC6876, February 2013,\n            \
    \  <https://www.rfc-editor.org/info/rfc6876>.\n   [RFC7171]  Cam-Winget, N. and\
    \ P. Sangster, \"PT-EAP: Posture Transport\n              (PT) Protocol for Extensible\
    \ Authentication Protocol (EAP)\n              Tunnel Methods\", RFC 7171, DOI\
    \ 10.17487/RFC7171, May 2014,\n              <https://www.rfc-editor.org/info/rfc7171>.\n\
    \   [RFC7632]  Waltermire, D. and D. Harrington, \"Endpoint Security\n       \
    \       Posture Assessment: Enterprise Use Cases\", RFC 7632,\n              DOI\
    \ 10.17487/RFC7632, September 2015,\n              <https://www.rfc-editor.org/info/rfc7632>.\n\
    \   [RFC8248]  Cam-Winget, N. and L. Lorenzin, \"Security Automation and\n   \
    \           Continuous Monitoring (SACM) Requirements\", RFC 8248,\n         \
    \     DOI 10.17487/RFC8248, September 2017,\n              <https://www.rfc-editor.org/info/rfc8248>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Charles Schmidt\n   The MITRE Corporation\n   202 Burlington\
    \ Road\n   Bedford, MA  01730\n   United States of America\n   Email: cmschmidt@mitre.org\n\
    \   Daniel Haynes\n   The MITRE Corporation\n   202 Burlington Road\n   Bedford,\
    \ MA  01730\n   United States of America\n   Email: dhaynes@mitre.org\n   Chris\
    \ Coffin\n   The MITRE Corporation\n   202 Burlington Road\n   Bedford, MA  01730\n\
    \   United States of America\n   Email: ccoffin@mitre.org\n   David Waltermire\n\
    \   National Institute of Standards and Technology\n   100 Bureau Drive\n   Gaithersburg,\
    \ Maryland\n   United States of America\n   Email: david.waltermire@nist.gov\n\
    \   Jessica Fitzgerald-McKay\n   United States National Security Agency\n   9800\
    \ Savage Road\n   Ft. Meade, Maryland\n   United States of America\n   Email:\
    \ jmfitz2@radium.ncsc.mil\n"
