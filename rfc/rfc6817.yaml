- title: __initial_text__
  contents:
  - '             Low Extra Delay Background Transport (LEDBAT)

    '
- title: Abstract
  contents:
  - "Abstract\n   Low Extra Delay Background Transport (LEDBAT) is an experimental\n\
    \   delay-based congestion control algorithm that seeks to utilize the\n   available\
    \ bandwidth on an end-to-end path while limiting the\n   consequent increase in\
    \ queueing delay on that path.  LEDBAT uses\n   changes in one-way delay measurements\
    \ to limit congestion that the\n   flow itself induces in the network.  LEDBAT\
    \ is designed for use by\n   background bulk-transfer applications to be no more\
    \ aggressive than\n   standard TCP congestion control (as specified in RFC 5681)\
    \ and to\n   yield in the presence of competing flows, thus limiting interference\n\
    \   with the network performance of competing flows.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6817.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Requirements Notation ......................................4\n  \
    \    1.2. Design Goals ...............................................4\n    \
    \  1.3. Applicability ..............................................5\n   2. LEDBAT\
    \ Congestion Control .......................................6\n      2.1. Overview\
    \ ...................................................6\n      2.2. Preliminaries\
    \ ..............................................6\n      2.3. Receiver-Side Operation\
    \ ....................................7\n      2.4. Sender-Side Operation ......................................7\n\
    \           2.4.1. An Overview .........................................7\n  \
    \         2.4.2. The Complete Sender Algorithm .......................8\n    \
    \  2.5. Parameter Values ..........................................11\n   3. Understanding\
    \ LEDBAT Mechanisms ................................13\n      3.1. Delay Estimation\
    \ ..........................................13\n           3.1.1. Estimating Base\
    \ Delay ..............................13\n           3.1.2. Estimating Queueing\
    \ Delay ..........................13\n      3.2. Managing the Congestion Window\
    \ ............................14\n           3.2.1. Window Increase: Probing for\
    \ More Bandwidth ........14\n           3.2.2. Window Decrease: Responding to\
    \ Congestion ..........14\n      3.3. Choosing the Queuing Delay Target .........................15\n\
    \   4. Discussion .....................................................15\n  \
    \    4.1. Framing and ACK Frequency Considerations ..................15\n    \
    \  4.2. Competing with TCP Flows ..................................15\n      4.3.\
    \ Competing with Non-TCP Flows ..............................16\n      4.4. Fairness\
    \ among LEDBAT Flows ...............................16\n   5. Open Areas for Experimentation\
    \ .................................17\n      5.1. Network Effects and Monitoring\
    \ ............................17\n      5.2. Parameter Values ..........................................18\n\
    \      5.3. Filters ...................................................19\n  \
    \    5.4. Framing ...................................................19\n   6.\
    \ Security Considerations ........................................19\n   7. Acknowledgements\
    \ ...............................................20\n   8. References .....................................................20\n\
    \      8.1. Normative References ......................................20\n  \
    \    8.2. Informative References ....................................20\n   Appendix\
    \ A. Measurement Errors ....................................22\n     A.1. Clock\
    \ Offset ...............................................22\n     A.2. Clock Skew\
    \ .................................................22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   TCP congestion control [RFC5681] seeks to share bandwidth\
    \ at a\n   bottleneck link equitably among flows competing at the bottleneck,\n\
    \   and it is the predominant congestion control mechanism used on the\n   Internet.\
    \  However, not all applications seek an equitable share of\n   network throughput.\
    \  \"Background\" applications, such as software\n   updates or file-sharing applications,\
    \ seek to operate without\n   interfering with the performance of more interactive\
    \ and delay-\n   and/or bandwidth-sensitive \"foreground\" applications.  Standard\
    \ TCP\n   congestion control, as specified in [RFC5681], may be too aggressive\n\
    \   for use with such background applications.\n   Low Extra Delay Background\
    \ Transport (LEDBAT) is an experimental\n   delay-based congestion control mechanism\
    \ that reacts early to\n   congestion in the network, thus enabling \"background\"\
    \ applications to\n   use the network while avoiding interference with the network\n\
    \   performance of competing flows.  A LEDBAT sender uses one-way delay\n   measurements\
    \ to estimate the amount of queueing on the data path,\n   controls the LEDBAT\
    \ flow's congestion window based on this estimate,\n   and minimizes interference\
    \ with competing flows by adding low extra\n   queueing delay on the end-to-end\
    \ path.\n   Delay-based congestion control protocols, such as TCP-Vegas\n   [Bra94][Low02],\
    \ are generally designed to achieve more, not less\n   throughput than standard\
    \ TCP, and often outperform TCP under\n   particular network settings.  For further\
    \ discussion on Lower-than-\n   Best-Effort transport protocols see [RFC6297].\
    \  In contrast, LEDBAT\n   is designed to be no more aggressive than TCP [RFC5681];\
    \ LEDBAT is a\n   \"scavenger\" congestion control mechanism that seeks to utilize\
    \ all\n   available bandwidth and yields quickly when competing with standard\n\
    \   TCP at a bottleneck link.\n   In the rest of this document, we refer to congestion\
    \ control\n   specified in [RFC5681] as \"standard TCP\".\n"
- title: 1.1.  Requirements Notation
  contents:
  - "1.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  Design Goals
  contents:
  - "1.2.  Design Goals\n   LEDBAT congestion control seeks to achieve the following\
    \ goals:\n   1.  to utilize end-to-end available bandwidth and to maintain low\n\
    \       queueing delay when no other traffic is present,\n   2.  to add limited\
    \ queuing delay to that induced by concurrent flows,\n       and\n   3.  to yield\
    \ quickly to standard TCP flows that share the same\n       bottleneck link.\n"
- title: 1.3.  Applicability
  contents:
  - "1.3.  Applicability\n   LEDBAT is a \"scavenger\" congestion control mechanism\
    \ that is\n   motivated primarily by background bulk-transfer applications, such\
    \ as\n   large file transfers (as with file-sharing applications) and software\n\
    \   updates.  It can be used with any application that seeks to minimize\n   its\
    \ impact on the network and on other interactive delay- and/or\n   bandwidth-sensitive\
    \ network applications.  LEDBAT is expected to work\n   well when the sender and/or\
    \ receiver is connected via a residential\n   access network.\n   LEDBAT can be\
    \ used as part of a transport protocol or as part of an\n   application, as long\
    \ as the data transmission mechanisms are capable\n   of carrying timestamps and\
    \ acknowledging data frequently.  LEDBAT can\n   be used with TCP, Stream Control\
    \ Transmission Protocol (SCTP), and\n   Datagram Congestion Control Protocol (DCCP),\
    \ with appropriate\n   extensions where necessary; and it can be used with proprietary\n\
    \   application protocols, such as those built on top of UDP for peer-to-\n  \
    \ peer (P2P) applications.\n   When used with an ECN-capable framing protocol,\
    \ LEDBAT should react\n   to an Explicit Congestion Notification (ECN) mark as\
    \ it would to a\n   loss, as specified in [RFC3168].\n   LEDBAT is designed to\
    \ reduce buildup of a standing queue by long-\n   lived LEDBAT flows at a link\
    \ with a tail-drop FIFO queue, so as to\n   avoid persistently delaying other\
    \ flows sharing the queue.  If Active\n   Queue Management (AQM) is configured\
    \ to drop or ECN-mark packets\n   before the LEDBAT flow starts reacting to persistent\
    \ queue buildup,\n   LEDBAT reverts to standard TCP behavior rather than yielding\
    \ to other\n   TCP flows.  However, such an AQM is still desirable since it keeps\n\
    \   queuing delay low, achieving an outcome that is in line with LEDBAT's\n  \
    \ goals.  Additionally, a LEDBAT transport that supports ECN enjoys the\n   advantages\
    \ that an ECN-capable TCP enjoys over an ECN-agnostic TCP;\n   avoiding losses\
    \ and possible retransmissions.  Weighted Fair Queuing\n   (WFQ), as employed\
    \ by some home gateways, seeks to isolate and\n   protect delay-sensitive flows\
    \ from delays due to standing queues\n   built up by concurrent long-lived flows.\
    \  Consequently, while it\n   prevents LEDBAT from yielding to other TCP flows,\
    \ it again achieves\n   an outcome that is in line with LEDBAT's goals [Sch10].\n"
- title: 2.  LEDBAT Congestion Control
  contents:
  - '2.  LEDBAT Congestion Control

    '
- title: 2.1.  Overview
  contents:
  - "2.1.  Overview\n   A standard TCP sender increases its congestion window until\
    \ a loss\n   occurs [RFC5681] or an ECN mark is received [RFC3168], which, in\
    \ the\n   absence of link errors in the network, occurs only when the queue at\n\
    \   the bottleneck link on the end-to-end path overflows or an AQM is\n   applied.\
    \  Since packet loss or marking at the bottleneck link is\n   expected to be preceded\
    \ by an increase in the queueing delay at the\n   bottleneck link, LEDBAT congestion\
    \ control uses this increase in\n   queueing delay as an early signal of congestion,\
    \ enabling it to\n   respond to congestion earlier than standard TCP and enabling\
    \ it to\n   yield bandwidth to a competing TCP flow.\n   LEDBAT employs one-way\
    \ delay measurements to estimate queueing delay.\n   When the estimated queueing\
    \ delay is less than a predetermined\n   target, LEDBAT infers that the network\
    \ is not yet congested and\n   increases its sending rate to utilize any spare\
    \ capacity in the\n   network.  When the estimated queueing delay becomes greater\
    \ than the\n   predetermined target, LEDBAT decreases its sending rate as a response\n\
    \   to potential congestion in the network.\n"
- title: 2.2.  Preliminaries
  contents:
  - "2.2.  Preliminaries\n   A LEDBAT sender uses a congestion window (cwnd) to gate\
    \ the amount of\n   data that the sender can send into the network in one round-trip\
    \ time\n   (RTT).  A sender MAY maintain its cwnd in bytes or in packets; this\n\
    \   document uses cwnd in bytes.  LEDBAT requires that each data segment\n   carries\
    \ a \"timestamp\" from the sender, based on which the receiver\n   computes the\
    \ one-way delay from the sender and sends this computed\n   value back to the\
    \ sender.\n   In addition to the LEDBAT mechanism described below, we note that\
    \ a\n   slow start mechanism can be used as specified in [RFC5681].  Since\n \
    \  slow start leads to faster increase in the window than that specified\n   in\
    \ LEDBAT, conservative congestion control implementations employing\n   LEDBAT\
    \ may skip slow start altogether and start with an initial\n   window of INIT_CWND\
    \ * MSS.  (INIT_CWND is described later in\n   Section 2.5.)\n   The term \"MSS\"\
    , or the sender's Maximum Segment Size, used in this\n   document refers to the\
    \ size of the largest segment that the sender\n   can transmit.  The value of\
    \ MSS can be based on the path MTU\n   discovery [RFC4821] algorithm and/or on\
    \ other factors.\n"
- title: 2.3.  Receiver-Side Operation
  contents:
  - "2.3.  Receiver-Side Operation\n   A LEDBAT receiver calculates the one-way delay\
    \ from the sender to the\n   receiver based on its own system time and timestamps\
    \ in the received\n   data packets.  The receiver then feeds the computed one-way\
    \ delay\n   back to the sender in the next acknowledgement.  A LEDBAT receiver\n\
    \   operates as follows:\n   on data_packet:\n       remote_timestamp = data_packet.timestamp\n\
    \       acknowledgement.delay = local_timestamp() - remote_timestamp\n       #\
    \ fill in other fields of acknowledgement\n       acknowledgement.send()\n   A\
    \ receiver may choose to delay sending an ACK and may combine\n   acknowledgements\
    \ for more than one data packet into a single ACK\n   packet, as with delayed\
    \ ACKs in standard TCP, for example.  In such\n   cases, the receiver MAY bundle\
    \ all the delay samples into one ACK\n   packet and MUST transmit the samples\
    \ in the order generated.  When\n   multiple delay samples are bundled within\
    \ a single ACK, the sender\n   applies these bundled delay samples at once during\
    \ its cwnd\n   adjustment (discussed in the next section).  Since the sender's\n\
    \   adjustment may be sensitive to the order in which the delay samples\n   are\
    \ applied, the computed delay samples should be available to the\n   sender in\
    \ the order they were generated at the receiver.\n"
- title: 2.4.  Sender-Side Operation
  contents:
  - '2.4.  Sender-Side Operation

    '
- title: 2.4.1.  An Overview
  contents:
  - "2.4.1.  An Overview\n   As a first approximation, a LEDBAT sender operates as\
    \ shown below;\n   the complete algorithm is specified later in Section 2.4.2.\
    \  TARGET\n   is the maximum queueing delay that LEDBAT itself may introduce in\
    \ the\n   network, and GAIN determines the rate at which the cwnd responds to\n\
    \   changes in queueing delay; both constants are specified later.\n   off_target\
    \ is a normalized value representing the difference between\n   the measured current\
    \ queueing delay and the predetermined TARGET\n   delay. off_target can be positive\
    \ or negative; consequently, cwnd\n   increases or decreases in proportion to\
    \ off_target.\n   on initialization:\n       base_delay = +INFINITY\n   on acknowledgement:\n\
    \       current_delay = acknowledgement.delay\n       base_delay = min(base_delay,\
    \ current_delay)\n       queuing_delay = current_delay - base_delay\n       off_target\
    \ = (TARGET - queuing_delay) / TARGET\n       cwnd += GAIN * off_target * bytes_newly_acked\
    \ * MSS / cwnd\n   The simplified mechanism above ignores multiple delay samples\
    \ in an\n   acknowledgement, noise filtering, base delay expiration, and sender\n\
    \   idle times, which we now take into account in our complete sender\n   algorithm\
    \ below.\n"
- title: 2.4.2.  The Complete Sender Algorithm
  contents:
  - "2.4.2.  The Complete Sender Algorithm\n   update_current_delay() maintains a\
    \ list of one-way delay\n   measurements, of which a filtered value is used as\
    \ an estimate of the\n   current end-to-end delay. update_base_delay() maintains\
    \ a list of\n   one-way delay minima over a number of one-minute intervals, to\n\
    \   measure and to track changes in the base delay of the end-to-end\n   path.\
    \  Both of these lists are maintained per LEDBAT flow.\n   We note this algorithm\
    \ assumes that slight random fluctuations exist\n   in inter-packet arrival times\
    \ at the bottleneck queue, to allow a\n   LEDBAT sender to correctly measure the\
    \ base delay.  See Section 4.4\n   for a more complete discussion.\n   The full\
    \ sender-side algorithm is given below:\n   on initialization:\n       # cwnd\
    \ is the amount of data that is allowed to be\n       # outstanding in an RTT\
    \ and is defined in bytes.\n       # CTO is the congestion timeout value.\n  \
    \     create current_delays list with CURRENT_FILTER elements\n       create base_delays\
    \ list with BASE_HISTORY number of elements\n       initialize elements in base_delays\
    \ to +INFINITY\n       initialize elements in current_delays according to FILTER()\n\
    \       last_rollover = -INFINITY # More than a minute in the past\n       flightsize\
    \ = 0\n       cwnd = INIT_CWND * MSS\n       CTO = 1 second\n   on acknowledgement:\n\
    \       # flightsize is the amount of data outstanding before this ACK\n     \
    \  #    was received and is updated later;\n       # bytes_newly_acked is the\
    \ number of bytes that this ACK\n       #    newly acknowledges, and it MAY be\
    \ set to MSS.\n       for each delay sample in the acknowledgement:\n        \
    \   delay = acknowledgement.delay\n           update_base_delay(delay)\n     \
    \      update_current_delay(delay)\n       queuing_delay = FILTER(current_delays)\
    \ - MIN(base_delays)\n       off_target = (TARGET - queuing_delay) / TARGET\n\
    \       cwnd += GAIN * off_target * bytes_newly_acked * MSS / cwnd\n       max_allowed_cwnd\
    \ = flightsize + ALLOWED_INCREASE * MSS\n       cwnd = min(cwnd, max_allowed_cwnd)\n\
    \       cwnd = max(cwnd, MIN_CWND * MSS)\n       flightsize = flightsize - bytes_newly_acked\n\
    \       update_CTO()\n   on data loss:\n       # at most once per RTT\n      \
    \ cwnd = min (cwnd, max (cwnd/2, MIN_CWND * MSS))\n       if data lost is not\
    \ to be retransmitted:\n           flightsize = flightsize - bytes_not_to_be_retransmitted\n\
    \   if no ACKs are received within a CTO:\n       # extreme congestion, or significant\
    \ RTT change.\n       # set cwnd to 1MSS and backoff the congestion timer.\n \
    \      cwnd = 1 * MSS\n       CTO = 2 * CTO\n"
- title: update_CTO()
  contents:
  - "update_CTO()\n    # implements an RTT estimation mechanism using data\n    #\
    \ transmission times and ACK reception times,\n    # which is used to implement\
    \ a congestion timeout (CTO).\n    # If implementing LEDBAT in TCP, sender SHOULD\
    \ use\n    # mechanisms described in RFC 6298 [RFC6298],\n    # and the CTO would\
    \ be the same as the retransmission timeout (RTO).\n   update_current_delay(delay)\n\
    \       # Maintain a list of CURRENT_FILTER last delays observed.\n       delete\
    \ first item in current_delays list\n       append delay to current_delays list\n\
    \   update_base_delay(delay)\n       # Maintain BASE_HISTORY delay-minima.\n \
    \      # Each minimum is measured over a period of a minute.\n       # 'now' is\
    \ the current system time\n       if round_to_minute(now) != round_to_minute(last_rollover)\n\
    \           last_rollover = now\n           delete first item in base_delays list\n\
    \           append delay to base_delays list\n       else\n           base_delays.tail\
    \ = MIN(base_delays.tail, delay)\n   The LEDBAT sender seeks to extract the actual\
    \ delay estimate from the\n   current_delay samples by implementing FILTER() to\
    \ eliminate any\n   outliers.  Different types of filters MAY be used for FILTER()\
    \ -- a\n   NULL filter, that does not filter at all, is a reasonable candidate\n\
    \   as well, since LEDBAT's use of a linear controller for cwnd increase\n   and\
    \ decrease may allow it to recover quickly from errors induced by\n   bad samples.\
    \  Another example of a filter is the exponentially\n   weighted moving average\
    \ (EWMA) function, with weights that enable\n   agile tracking of changing network\
    \ delay.  A simple MIN filter\n   applied over a small window (much smaller than\
    \ BASE_HISTORY) may also\n   provide robustness to large delay peaks, as may occur\
    \ with delayed\n   ACKs in TCP.  Care should be taken that the filter used, while\n\
    \   providing robustness to noise, remains sensitive to persistent\n   congestion\
    \ signals.\n   We note that when multiple delay samples are bundled within a single\n\
    \   ACK, the sender's resulting cwnd may be slightly different than when\n   the\
    \ samples are sent individually in separate ACKs.  The cwnd is\n   adjusted based\
    \ on the total number of bytes ACKed and the final\n   filtered value of queueing_delay,\
    \ irrespective of the number of delay\n   samples in an ACK.\n   To implement\
    \ an approximate minimum over the past few minutes, a\n   LEDBAT sender stores\
    \ BASE_HISTORY separate minima -- one each for the\n   last BASE_HISTORY-1 minutes,\
    \ and one for the running current minute.\n   At the end of the current minute,\
    \ the window moves -- the earliest\n   minimum is dropped and the latest minimum\
    \ is added.  If the\n   connection is idle for a given minute, no data is available\
    \ for the\n   one-way delay and, therefore, a value of +INFINITY has to be stored\n\
    \   in the list.  If the connection has been idle for BASE_HISTORY\n   minutes,\
    \ all minima in the list are thus set to +INFINITY and\n   measurement begins\
    \ anew.  LEDBAT thus requires that during idle\n   periods, an implementation\
    \ must maintain the base delay list.\n   LEDBAT restricts cwnd growth after a\
    \ period of inactivity.  When the\n   sender is application-limited, the sender's\
    \ cwnd is clamped down\n   using max_allowed_cwnd to a little more than flightsize.\
    \  To be TCP-\n   friendly, LEDBAT halves its cwnd on data loss.\n   LEDBAT uses\
    \ a congestion timeout (CTO) to avoid transmitting data\n   during periods of\
    \ heavy congestion and to avoid congestion collapse.\n   A CTO is used to detect\
    \ heavy congestion indicated by loss of all\n   outstanding data or acknowledgements,\
    \ resulting in reduction of the\n   cwnd to 1 MSS and an exponential backoff of\
    \ the CTO interval.  This\n   backoff of the CTO value avoids sending more data\
    \ into an overloaded\n   queue, and it also allows the sender to cope with sudden\
    \ changes in\n   the RTT of the path.  The function of a CTO is similar to that\
    \ of an\n   retransmission timeout (RTO) in TCP [RFC6298], but since LEDBAT\n\
    \   separates reliability from congestion control, a retransmission need\n   not\
    \ be triggered by a CTO.  LEDBAT, however, does not preclude a CTO\n   from triggering\
    \ retransmissions, as could be the case if LEDBAT\n   congestion control were\
    \ to be used with TCP framing and reliability.\n   The CTO is a gating mechanism\
    \ that ensures exponential backoff of\n   sending rate under heavy congestion,\
    \ and it may be implemented with\n   or without a timer.  An implementation choosing\
    \ to avoid timers may\n   consider using a \"next-time-to-send\" variable, set\
    \ based on the CTO,\n   to control the earliest time a sender may transmit without\
    \ receiving\n   any ACKs.  A maximum value MAY be placed on the CTO, and if placed,\n\
    \   it MUST be at least 60 seconds.\n"
- title: 2.5.  Parameter Values
  contents:
  - "2.5.  Parameter Values\n   TARGET MUST be 100 milliseconds or less, and this\
    \ choice of value is\n   explained further in Section 3.3.  Note that using the\
    \ same TARGET\n   value across LEDBAT flows enables equitable sharing of the bottleneck\n\
    \   bandwidth.  A flow with a higher TARGET value than other competing\n   LEDBAT\
    \ flows may get a larger share of the bottleneck bandwidth.  It\n   is possible\
    \ to consider the use of different TARGET values for\n   implementing a relative\
    \ priority between two competing LEDBAT flows\n   by setting a higher TARGET value\
    \ for the higher-priority flow.\n   ALLOWED_INCREASE SHOULD be 1, and it MUST\
    \ be greater than 0.  An\n   ALLOWED_INCREASE of 0 results in no cwnd growth at\
    \ all, and an\n   ALLOWED_INCREASE of 1 allows and limits the cwnd increase based\
    \ on\n   flightsize in the previous RTT.  An ALLOWED_INCREASE greater than 1\n\
    \   MAY be used when interactions between LEDBAT and the framing protocol\n  \
    \ provide a clear reason for doing so.\n   GAIN MUST be set to 1 or less.  A GAIN\
    \ of 1 limits the maximum cwnd\n   ramp-up to the same rate as TCP Reno in Congestion\
    \ Avoidance.  While\n   this document specifies the use of the same GAIN for both\
    \ cwnd\n   increase (when off_target is greater than zero) and decrease (when\n\
    \   off_target is less than zero), implementations MAY use a higher GAIN\n   for\
    \ cwnd decrease than for the increase; our justification follows.\n   When a competing\
    \ non-LEDBAT flow increases its sending rate, the\n   LEDBAT sender may only measure\
    \ a small amount of additional delay and\n   decrease the sending rate slowly.\
    \  To ensure no impact on a competing\n   non-LEDBAT flow, the LEDBAT flow should\
    \ decrease its sending rate at\n   least as quickly as the competing flow increases\
    \ its sending rate.  A\n   higher decrease-GAIN MAY be used to allow the LEDBAT\
    \ flow to decrease\n   its sending rate faster than the competing flow's increase\
    \ rate.\n   The size of the base_delays list, BASE_HISTORY, SHOULD be 10.  If\
    \ the\n   actual base delay decreases, due to a route change, for instance, a\n\
    \   LEDBAT sender adapts immediately, irrespective of the value of\n   BASE_HISTORY.\
    \  If the actual base delay increases, however, a LEDBAT\n   sender will take\
    \ BASE_HISTORY minutes to adapt and may wrongly infer\n   a little more extra\
    \ delay than intended (TARGET) in the meanwhile.  A\n   value for BASE_HISTORY\
    \ is thus a trade-off: a higher value may yield\n   a more accurate measurement\
    \ when the base delay is unchanging, and a\n   lower value results in a quicker\
    \ response to actual increase in base\n   delay.\n   A LEDBAT sender uses the\
    \ current_delays list to maintain only delay\n   measurements made within an RTT\
    \ amount of time in the past, seeking\n   to eliminate noise spikes in its measurement\
    \ of the current one-way\n   delay through the network.  The size of this list,\
    \ CURRENT_FILTER,\n   may be variable, and it depends on the FILTER() function\
    \ as well as\n   the number of successful measurements made within an RTT amount\
    \ of\n   time in the past.  The sender should seek to gather enough delay\n  \
    \ samples in each RTT so as to have statistical confidence in the\n   measurements.\
    \  While the number of delay samples required for such\n   confidence will vary\
    \ depending on network conditions, the sender\n   SHOULD use at least 4 delay\
    \ samples in each RTT, unless the number of\n   samples is lower due to a small\
    \ congestion window.  The value of\n   CURRENT_FILTER will depend on the filter\
    \ being employed, but\n   CURRENT_FILTER MUST be limited such that samples in\
    \ the list are not\n   older than an RTT in the past.\n   INIT_CWND and MIN_CWND\
    \ SHOULD both be 2.  An INIT_CWND of 2 should\n   help seed FILTER() at the sender\
    \ when there are no samples at the\n   beginning of a flow, and a MIN_CWND of\
    \ 2 allows FILTER() to use more\n   than a single instantaneous delay estimate\
    \ while not being too\n   aggressive.  Slight deviations may be warranted, for\
    \ example, when\n   these values of INIT_CWND and MIN_CWND interact poorly with\
    \ the\n   framing protocol.  However, INIT_CWND and MIN_CWND MUST be no larger\n\
    \   than the corresponding values specified for TCP [RFC5681].\n"
- title: 3.  Understanding LEDBAT Mechanisms
  contents:
  - "3.  Understanding LEDBAT Mechanisms\n   This section describes the delay estimation\
    \ and window management\n   mechanisms used in LEDBAT.\n"
- title: 3.1.  Delay Estimation
  contents:
  - "3.1.  Delay Estimation\n   LEDBAT estimates congestion in the direction of the\
    \ data flow, and to\n   avoid measuring additional delay from, e.g., queue buildup\
    \ on the\n   reverse path (or ACK path) or reordering, LEDBAT uses one-way delay\n\
    \   estimates.  LEDBAT assumes that measurements are done with data\n   packets,\
    \ thus avoiding the need for separate measurement packets and\n   avoiding the\
    \ pitfall of measurement packets being treated differently\n   from the data packets\
    \ in the network.\n   End-to-end delay can be decomposed into transmission (or\n\
    \   serialization) delay, propagation (or speed-of-light) delay, queueing\n  \
    \ delay, and processing delay.  On any given path, barring some noise,\n   all\
    \ delay components except for queueing delay are constant.  To\n   observe an\
    \ increase in the queueing delay in the network, a LEDBAT\n   sender separates\
    \ the queueing delay component from the rest of the\n   end-to-end delay, as described\
    \ below.\n"
- title: 3.1.1.  Estimating Base Delay
  contents:
  - "3.1.1.  Estimating Base Delay\n   Since queuing delay is always additive to the\
    \ end-to-end delay,\n   LEDBAT estimates the sum of the constant delay components,\
    \ which we\n   call \"base delay\", to be the minimum delay observed on the end-to-end\n\
    \   path.\n   To respond to true changes in the base delay, as can be caused by\
    \ a\n   route change, LEDBAT uses only recent measurements in estimating the\n\
    \   base delay.  The duration of the observation window itself is a\n   trade-off\
    \ between robustness of measurement and responsiveness to\n   change -- a larger\
    \ observation window increases the chances that the\n   true base delay will be\
    \ detected (as long as the true base delay is\n   unchanged), whereas a smaller\
    \ observation window results in faster\n   response to true changes in the base\
    \ delay.\n"
- title: 3.1.2.  Estimating Queueing Delay
  contents:
  - "3.1.2.  Estimating Queueing Delay\n   Assuming that the base delay is constant\
    \ (in the absence of any route\n   changes), the queueing delay is represented\
    \ by the variable component\n   of the measured end-to-end delay.  LEDBAT measures\
    \ queueing delay as\n   simply the difference between an end-to-end delay measurement\
    \ and the\n   current estimate of base delay.  The queueing delay should be\n\
    \   filtered (depending on the usage scenario) to eliminate noise in the\n   delay\
    \ estimation, such as due to spikes in processing delay at a node\n   on the path.\n"
- title: 3.2.  Managing the Congestion Window
  contents:
  - "3.2.  Managing the Congestion Window\n   LEDBAT uses a simple linear controller\
    \ to determine the sending rate\n   as a function of the delay estimate, where\
    \ the response of the sender\n   is proportional to the difference between the\
    \ current queueing delay\n   estimate and the target.\n"
- title: '3.2.1.  Window Increase: Probing for More Bandwidth'
  contents:
  - "3.2.1.  Window Increase: Probing for More Bandwidth\n   When the queuing delay\
    \ is smaller than a delay target value, as\n   specified by the TARGET parameter\
    \ in this document, a LEDBAT sender\n   will increase its congestion window proportionally\
    \ to the relative\n   difference between the current queueing delay and the delay\
    \ target.\n   As the current queuing delay gets closer to TARGET, LEDBAT's window\n\
    \   growth gets slower.  To compete fairly with concurrent TCP flows, we\n   set\
    \ the highest rate of LEDBAT's window growth (when the current\n   queueing delay\
    \ estimate is zero) to be the same as TCP's (increase of\n   one packet per RTT).\
    \  In other words, a LEDBAT flow never ramps up\n   faster than a competing TCP\
    \ flow over the same path.  The TARGET\n   value specifies the maximum extra queuing\
    \ delay that LEDBAT will\n   induce.  If the current queuing delay equals the\
    \ TARGET value, LEDBAT\n   tries to maintain this extra delay.\n"
- title: '3.2.2.  Window Decrease: Responding to Congestion'
  contents:
  - "3.2.2.  Window Decrease: Responding to Congestion\n   When a sender's queueing\
    \ delay estimate is higher than the target,\n   the LEDBAT flow's rate should\
    \ be reduced.  LEDBAT's linear controller\n   allows the sender to decrease the\
    \ window proportional to the\n   difference between the target and the current\
    \ queueing delay.\n   Unlike TCP-like loss-based congestion control, LEDBAT seeks\
    \ to avoid\n   losses and so a LEDBAT sender is not expected to normally rely\
    \ on\n   losses to determine the sending rate.  However, when data loss does\n\
    \   occur, LEDBAT must respond as standard TCP does; even if the queueing\n  \
    \ delay estimates indicate otherwise, a loss is assumed to be a strong\n   indication\
    \ of congestion.  Thus, to deal with severe congestion when\n   packets are dropped\
    \ in the network, and to provide a fallback against\n   incorrect queuing delay\
    \ estimates, a LEDBAT sender halves its\n   congestion window when a loss event\
    \ is detected.  As with TCP New-\n   Reno, LEDBAT reduces its cwnd by half at\
    \ most once per RTT.\n"
- title: 3.3.  Choosing the Queuing Delay Target
  contents:
  - "3.3.  Choosing the Queuing Delay Target\n   The International Telecommunication\
    \ Union's (ITU's) Recommendation\n   G.114 defines a one-way delay of 150 ms to\
    \ be acceptable for most\n   user voice applications [g114].  Thus, the delay\
    \ induced by LEDBAT\n   must be well below 150 ms to limit its impact on concurrent\
    \ delay-\n   sensitive traffic sharing the same bottleneck queue.  A target that\n\
    \   is too low, on the other hand, increases the sensitivity of the\n   sender's\
    \ algorithm to noise in the one-way delays and in the delay\n   measurement process,\
    \ and may lead to reduced throughput for the\n   LEDBAT flow and to under-utilization\
    \ of the bottleneck link.\n   Our recommendation of 100 ms or less as the target\
    \ is a trade-off\n   between these considerations.  Anecdotal evidence indicates\
    \ that this\n   value works well -- LEDBAT has been implemented and successfully\n\
    \   deployed with a target value of 100 ms in two BitTorrent\n   implementations:\
    \ as the exclusive congestion control mechanism in\n   BitTorrent Delivery Network\
    \ Accelerator (DNA), and as an experimental\n   mechanism in uTorrent [uTorrent].\n"
- title: 4.  Discussion
  contents:
  - '4.  Discussion

    '
- title: 4.1.  Framing and ACK Frequency Considerations
  contents:
  - "4.1.  Framing and ACK Frequency Considerations\n   While the actual framing and\
    \ wire format of the protocols using\n   LEDBAT are outside the scope of this\
    \ document, we briefly consider\n   the data framing and ACK frequency needs of\
    \ LEDBAT mechanisms.\n   To compute the data path's one-way delay, our discussion\
    \ of LEDBAT\n   assumes a framing that allows the sender to timestamp packets\
    \ and for\n   the receiver to convey the measured one-way delay back to the sender\n\
    \   in ACK packets.  LEDBAT does not require this particular method, but\n   it\
    \ does require unambiguous delay estimates using data and ACK\n   packets.\n \
    \  A LEDBAT receiver may send an ACK as frequently as one for every data\n   packet\
    \ received or less frequently; LEDBAT does require that the\n   receiver MUST\
    \ transmit at least one ACK in every RTT.\n"
- title: 4.2.  Competing with TCP Flows
  contents:
  - "4.2.  Competing with TCP Flows\n   LEDBAT is designed to respond to congestion\
    \ indications earlier than\n   loss-based standard TCP [RFC5681].  A LEDBAT flow\
    \ gets more\n   aggressive as the queueing delay estimate gets lower; since the\n\
    \   queueing delay estimate is non-negative, LEDBAT is most aggressive\n   when\
    \ the queueing delay estimate is zero.  In this case, LEDBAT ramps\n   up its\
    \ congestion window at the same rate as standard TCP [RFC5681].\n   LEDBAT may\
    \ reduce its rate earlier than standard TCP and always\n   halves its congestion\
    \ window on loss.  Thus, in the worst case, where\n   the delay estimates are\
    \ completely and consistently off, a LEDBAT\n   flow falls back to standard TCP\
    \ behavior, and is no more aggressive\n   than standard TCP [RFC5681].\n"
- title: 4.3.  Competing with Non-TCP Flows
  contents:
  - "4.3.  Competing with Non-TCP Flows\n   While LEDBAT yields to all high-load flows,\
    \ both TCP and non-TCP,\n   LEDBAT may not yield to low-load and latency-sensitive\
    \ traffic that\n   do not induce a measurable delay at the bottleneck queue, such\
    \ as\n   Voice over IP (VoIP) traffic.  While such flows will experience\n   additional\
    \ delay due to any concurrent LEDBAT flows, the TARGET delay\n   sets a limit\
    \ to the total amount of additional delay that all the\n   concurrent LEDBAT flows\
    \ will jointly induce.  If the TARGET delay is\n   higher than what the bottleneck\
    \ queue can sustain, the LEDBAT flows\n   should experience loss and will fall\
    \ back to standard loss-based TCP\n   behavior.  Thus, in the worst case, LEDBAT\
    \ will add no more latency\n   than standard TCP when competing with non-TCP flows.\
    \  In the common\n   case however, we expect LEDBAT flows to add TARGET amount\
    \ of delay,\n   which ought to be within the delay tolerance for most latency-\n\
    \   sensitive applications, including VoIP applications.\n"
- title: 4.4.  Fairness among LEDBAT Flows
  contents:
  - "4.4.  Fairness among LEDBAT Flows\n   The primary design goals of LEDBAT are\
    \ focused on the aggregate\n   behavior of LEDBAT flows when they compete with\
    \ standard TCP.  Since\n   LEDBAT is designed for background traffic, we consider\
    \ link\n   utilization to be more important than fairness amongst LEDBAT flows.\n\
    \   Nevertheless, we now consider fairness issues that might arise\n   amongst\
    \ competing LEDBAT flows.\n   LEDBAT as described so far lacks a mechanism specifically\
    \ designed to\n   equalize utilization amongst LEDBAT flows.  Anecdotally observed\n\
    \   behavior of existing implementations indicates that a rough\n   equalization\
    \ does occur since in most environments some amount of\n   randomness in the inter-packet\
    \ transmission times exists, as\n   explained further below.\n   Delay-based congestion\
    \ control systems suffer from the possibility of\n   latecomers incorrectly measuring\
    \ and using a higher base-delay than\n   an active flow that started earlier.\
    \  Consider that a bottleneck is\n   saturated by a single LEDBAT flow, and the\
    \ flow therefore maintains\n   the bottleneck queue at TARGET delay.  When a new\
    \ LEDBAT flow arrives\n   at the bottleneck, it might incorrectly include the\
    \ steady queueing\n   delay in its measurement of the base delay on the path.\
    \  The new flow\n   has an inflated estimate of the base delay, and may now effectively\n\
    \   build on top of the existing, already maximal, queueing delay.  As\n   the\
    \ latecomer flow builds up, the old flow sees the true queueing\n   delay and\
    \ backs off, while the latecomer keeps building up, using up\n   the entire link's\
    \ capacity, and effectively shutting the old flow\n   out.  This advantage is\
    \ called the \"latecomer's advantage\".\n   In the worst case, if the first flow\
    \ yields at the same rate as the\n   new flow increases its sending rate, the\
    \ new flow will see constant\n   end-to-end delay, which it assumes is the base\
    \ delay, until the first\n   flow backs off completely.  As a result, by the time\
    \ the second flow\n   stops increasing its cwnd, it would have added twice the\
    \ target\n   queueing delay to the network.\n   This advantage can be reduced\
    \ if the first flow yields and empties\n   the bottleneck queue faster than the\
    \ incoming flow increases its\n   occupancy in the queue.  In such a case, the\
    \ latecomer might measure\n   correctly a delay that is closer to the base delay.\
    \  While such a\n   reduction might be achieved through a multiplicative decrease\
    \ of the\n   congestion window, this may cause strong fluctuations in flow\n \
    \  throughput during the flow's steady state.  Thus, we do not recommend\n   a\
    \ multiplicative decrease scheme.\n   We note that in certain use-case scenarios,\
    \ it is possible for a\n   later LEDBAT flow to gain an unfair advantage over\
    \ an existing one\n   [Car10].  In practice, this concern ought to be alleviated\
    \ by the\n   burstiness of network traffic: all that's needed to measure the base\n\
    \   delay is one small gap in transmission schedules between the LEDBAT\n   flows.\
    \  These gaps can occur for a number of reasons such as latency\n   introduced\
    \ due to application sending patterns, OS scheduling at the\n   sender, processing\
    \ delay at the sender or any network node, and link\n   contention.  When such\
    \ a gap occurs in the first sender's\n   transmission while the latecomer is starting,\
    \ base delay is\n   immediately correctly measured.  With a small number of LEDBAT\
    \ flows,\n   system noise may sufficiently regulate the latecomer's advantage.\n"
- title: 5.  Open Areas for Experimentation
  contents:
  - "5.  Open Areas for Experimentation\n   We now outline some areas that need experimentation\
    \ in the Internet\n   and under different network scenarios.  These experiments\
    \ should help\n   the community understand LEDBAT's dynamics and should help towards\n\
    \   further standardization of LEDBAT and LEDBAT-related documents.\n"
- title: 5.1.  Network Effects and Monitoring
  contents:
  - "5.1.  Network Effects and Monitoring\n   Further study is required to fully understand\
    \ the behavior and\n   convergence properties of LEDBAT in networks with non-tail-drop,\
    \ non-\n   FIFO queues, in networks with frequent route changes, and in networks\n\
    \   with network-level load balancing.  These studies should have two\n   broad\
    \ goals: (i) to understand the effects of different network\n   mechanisms on\
    \ LEDBAT, and (ii) to understand the impact of LEDBAT on\n   the network.\n  \
    \ Network mechanisms and dynamics can influence LEDBAT flows in\n   unintended\
    \ ways.  For instance, frequent route changes that result in\n   increasing base\
    \ delays may, in the worst case, throttle a LEDBAT\n   flow's throughput significantly.\
    \  The influence of different network\n   traffic management mechanisms on LEDBAT\
    \ throughput should be studied.\n   An increasing number of LEDBAT flows in the\
    \ network will likely\n   result in operator-visible network effects as well,\
    \ and these should\n   thus be studied.  For instance, as long as the bottleneck\
    \ queue in a\n   network is larger than TARGET (in terms of delay), we expect\
    \ that\n   both the average queueing delay and loss rate in the network should\n\
    \   reduce as LEDBAT traffic increasingly dominates the traffic mix in\n   the\
    \ network.  Note that for bottleneck queues that are smaller than\n   TARGET,\
    \ LEDBAT will appear to behave very similar to standard TCP and\n   its flow-level\
    \ behavior may not be distinguishable from that of\n   standard TCP.\n   We note\
    \ that a network operator may be able to verify the operation\n   of a LEDBAT\
    \ flow by monitoring per-flow behavior and queues in the\n   network -- when the\
    \ queueing delay at a bottleneck queue is above\n   TARGET as specified in this\
    \ document, LEDBAT flows should be expected\n   to back off and reduce their sending\
    \ rate.\n"
- title: 5.2.  Parameter Values
  contents:
  - "5.2.  Parameter Values\n   The throughput and response of LEDBAT to the proposed\
    \ parameter\n   values of TARGET, decrease-GAIN, BASE_HISTORY, INIT_CWND, and\n\
    \   MIN_CWND should be evaluated with different types of competing\n   traffic\
    \ in different network settings, including with different AQM\n   schemes at the\
    \ bottleneck queue.  TARGET controls LEDBAT's added\n   latency, while decrease-GAIN\
    \ controls LEDBAT's response to competing\n   traffic.  Since LEDBAT is intended\
    \ to be minimally intrusive to\n   competing traffic, the impact of TARGET and\
    \ decrease-GAIN on delay-\n   sensitive traffic should be studied.  TARGET also\
    \ impacts the growth\n   rate of the congestion window when off_target is smaller\
    \ than 1.\n   This impact of TARGET on the rate of cwnd growth should be studied.\n\
    \   The amount of history maintained by the base delay estimator,\n   BASE_HISTORY,\
    \ influences the responsiveness of LEDBAT to changing\n   network conditions.\
    \  LEDBAT's responsiveness and throughput should be\n   evaluated in the wide\
    \ area and under conditions where abrupt changes\n   in base delay might occur,\
    \ such as with route changes and with\n   cellular handovers.  The impact and\
    \ efficacy of these parameters\n   should be carefully studied with tests over\
    \ the Internet.\n"
- title: 5.3.  Filters
  contents:
  - "5.3.  Filters\n   LEDBAT's effectiveness depends on a sender's ability to accurately\n\
    \   estimate end-to-end queueing delay from delay samples.  Consequently,\n  \
    \ the filtering algorithm used for this estimation, FILTER(), is an\n   important\
    \ candidate for experiments.  This document suggests the use\n   of NULL, EWMA,\
    \ and MIN filters for estimating the current delay; the\n   efficacy of these\
    \ and other possible filters for this estimate should\n   be investigated.  FILTER()\
    \ may also impact cwnd dynamics when delay\n   samples are bundled in ACKs, since\
    \ cwnd adaption is done once per ACK\n   irrespective of the number of delay samples\
    \ in the ACK.  This impact\n   should be studied when the different filters are\
    \ considered.\n"
- title: 5.4.  Framing
  contents:
  - "5.4.  Framing\n   This document defines only a congestion control algorithm and\
    \ assumes\n   that framing mechanisms for exchanging delay information exist within\n\
    \   the protocol in which LEDBAT is being implemented.  If implemented in\n  \
    \ a new protocol, both the sender and receiver may be LEDBAT-aware, but\n   if\
    \ implemented in an existing protocol that is capable of providing\n   one-way\
    \ delay information, LEDBAT may be implemented as a sender-\n   side-only modification.\
    \  In either case, the parent protocol may\n   interact with LEDBAT's algorithms;\
    \ for instance, the rate of ACK\n   feedback to the data sender may be dictated\
    \ by other protocol\n   parameters, but will interact with the LEDBAT flow's dynamics.\n\
    \   Careful experimentation is necessary to understand and integrate\n   LEDBAT\
    \ into both new and existing protocols.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   LEDBAT's aggressiveness is contingent on the\
    \ delay estimates and on\n   the TARGET delay value.  If these parameter values\
    \ at the sender are\n   compromised such that delay estimates are artificially\
    \ set to zero\n   and the TARGET delay value is set to +INFINITY, the LEDBAT algorithm\n\
    \   deteriorates to TCP-like behavior.  Thus, while LEDBAT is sensitive\n   to\
    \ these parameters, the algorithm is fundamentally limited in the\n   worst case\
    \ to be as aggressive as standard TCP.\n   A man in the middle may be able to\
    \ change queueing delay on a network\n   path, and/or modify the timestamps transmitted\
    \ by a LEDBAT sender\n   and/or modify the delays reported by a LEDBAT receiver,\
    \ thus causing\n   a LEDBAT flow to back off even when there's no congestion.\
    \  A\n   protocol using LEDBAT ought to minimize the risk of such man-in-the-\n\
    \   middle attacks by at least authenticating the timestamp field in the\n   data\
    \ packets and the delay field in the ACK packets.\n   LEDBAT is not known to introduce\
    \ any new concerns with privacy,\n   integrity, or other security issues for flows\
    \ that use it.  LEDBAT is\n   compatible with use of IPsec and Transport Layer\
    \ Security (TLS) /\n   Datagram Transport Layer Security (DTLS).\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   We thank folks in the LEDBAT working group for their\
    \ comments and\n   feedback.  Special thanks to Murari Sridharan and Rolf Winter\
    \ for\n   their patient and untiring shepherding.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3168]   Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n\
    \               of Explicit Congestion Notification (ECN) to IP\",\n         \
    \      RFC 3168, September 2001.\n   [RFC4821]   Mathis, M. and J. Heffner, \"\
    Packetization Layer Path MTU\n               Discovery\", RFC 4821, March 2007.\n\
    \   [RFC5681]   Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion\n   \
    \            Control\", RFC 5681, September 2009.\n   [RFC6298]   Paxson, V.,\
    \ Allman, M., Chu, J., and M. Sargent,\n               \"Computing TCP's Retransmission\
    \ Timer\", RFC 6298,\n               June 2011.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [Bra94]     Brakmo, L., O'Malley, S., and L.\
    \ Peterson, \"TCP Vegas:\n               New techniques for congestion detection\
    \ and avoidance\",\n               Proceedings of SIGCOMM '94, pages 24-35, August\
    \ 1994.\n   [Car10]     Carofiglio, G., Muscariello, L., Rossi, D., Testa, C.,\n\
    \               and S. Valenti, \"Rethinking Low Extra Delay Background\n    \
    \           Transport Protocols\", October 2010,\n               <http://arxiv.org/abs/1010.5623v1>.\n\
    \   [Low02]     Low, S., Peterson, L., and L. Wang, \"Understanding TCP\n    \
    \           Vegas: A Duality Model\", JACM 49 (2), March 2002.\n   [RFC5905] \
    \  Mills, D., Martin, J., Burbank, J., and W. Kasch,\n               \"Network\
    \ Time Protocol Version 4: Protocol and Algorithms\n               Specification\"\
    , RFC 5905, June 2010.\n   [RFC6297]   Welzl, M. and D. Ros, \"A Survey of Lower-than-Best-Effort\n\
    \               Transport Protocols\", RFC 6297, June 2011.\n   [Sch10]     Schneider,\
    \ J., Wagner, J., Winter, R., and H. Kolbe, \"Out\n               of my Way --\
    \ Evaluating Low Extra Delay Background\n               Transport in an ADSL Access\
    \ Network\", Proceedings of 22nd\n               International Teletraffic Congress\
    \ (ITC22), September\n               2010.\n   [g114]      \"SERIES G: TRANSMISSION\
    \ SYSTEMS AND MEDIA, DIGITAL\n               SYSTEMS AND NETWORKS; International\
    \ telephone connections\n               and circuits - General; Recommendations\
    \ on the\n               transmission quality for an entire international\n  \
    \             telephone connection; One-way transmission time\", ITU-T\n     \
    \          Recommendation G.114, 05/2003.\n   [uTorrent]  Hazel, G., \"uTorrent\
    \ Transport Protocol library\",\n               July 2012, <http://github.com/bittorrent/libutp>.\n"
- title: Appendix A.  Measurement Errors
  contents:
  - "Appendix A.  Measurement Errors\n   LEDBAT measures and uses one-way delays,\
    \ and we now consider\n   measurement errors in timestamp generation and use.\
    \  In this section,\n   we use the same locally linear clock model and the same\
    \ terminology\n   as Network Time Protocol (NTP) [RFC5905].  In particular, NTP\
    \ uses\n   the terms \"offset\" to refer to the difference between measured time\n\
    \   and true time, and \"skew\" to refer to difference of clock rate from\n  \
    \ the true rate.  A clock thus has two time measurement errors: a fixed\n   offset\
    \ from the true time, and a skew.  We now consider these errors\n   in the context\
    \ of LEDBAT.\n"
- title: A.1.  Clock Offset
  contents:
  - "A.1.  Clock Offset\n   The offset of the clocks, both the sender's and the receiver's,\
    \ shows\n   up as a fixed error in LEDBAT's one-way delay measurement.  The\n\
    \   offset in the measured one-way delay is simply the difference in\n   offsets\
    \ between the receiver's and the sender's clocks.  LEDBAT,\n   however, does not\
    \ use this estimate directly, but uses the difference\n   between the measured\
    \ one-way delay and a measured base delay.  Since\n   the offset error (difference\
    \ of clock offsets) is the same for the\n   measured one-way delay and the base\
    \ delay, the offsets cancel each\n   other out in the queuing delay estimate,\
    \ which LEDBAT uses for its\n   window computations.  Clock offset error thus\
    \ has no impact on\n   LEDBAT.\n"
- title: A.2.  Clock Skew
  contents:
  - "A.2.  Clock Skew\n   Clock skew generally shows up as a linearly changing error\
    \ in a time\n   estimate.  Similar to the offset, the skew of LEDBAT's one-way\
    \ delay\n   estimate is thus the difference between the two clocks' skews.\n \
    \  Unlike the offset, however, skew does not cancel out when the queuing\n   delay\
    \ estimate is computed, since it causes the two clocks' offsets\n   to change\
    \ over time.\n   While the offset could be large, with some clocks off by minutes\
    \ or\n   even hours or more, skew is typically small.  Typical skews of\n   untrained\
    \ clocks seem to be around 100-200 parts per million (ppm)\n   [RFC5905], where\
    \ a skew of 100 ppm translates to an error\n   accumulation of 6 milliseconds\
    \ per minute.  This accumulation is\n   limited in LEDBAT, since any error accumulation\
    \ is limited to the\n   amount of history maintained by the base delay estimator,\
    \ as dictated\n   by the BASE_HISTORY parameter.  The effects of clock skew error\
    \ on\n   LEDBAT should generally be insignificant unless the skew is unusually\n\
    \   high, or unless extreme values have been chosen for TARGET (extremely\n  \
    \ low) and BASE_HISTORY (extremely large).  Nevertheless, we now\n   consider\
    \ the possible impact of skew on LEDBAT behavior.\n   Clock skew can manifest\
    \ in two ways: the sender's clock can be faster\n   than the receiver's clock,\
    \ or the receiver's clock can be faster than\n   the sender's clock.  In the first\
    \ case, the measured one-way delay\n   will decrease as the sender's clock drifts\
    \ forward.  While this drift\n   can lead to an artificially low estimate of the\
    \ queueing delay, the\n   drift should also lead to a lower base delay measurement,\
    \ which\n   consequently absorbs the erroneous reduction in the one-way delay\n\
    \   estimates.\n   In the second case, the one-way delay estimate will artificially\n\
    \   increase with time.  This increase can reduce a LEDBAT flow's\n   throughput\
    \ unnecessarily.  In this case, a skew correction mechanism\n   can be beneficial.\n\
    \   We now discuss an example clock skew correction mechanism.  In this\n   example,\
    \ the receiver sends back raw (sending and receiving)\n   timestamps.  Using this\
    \ information, the sender can estimate one-way\n   delays in both directions,\
    \ and the sender can also compute and\n   maintain an estimate of the base delay\
    \ as would be observed by the\n   receiver.  If the sender detects the receiver\
    \ reducing its estimate\n   of the base delay, it may infer that this reduction\
    \ is due to clock\n   drift.  The sender then compensates by increasing its base\
    \ delay\n   estimate by the same amount.  To apply this mechanism, timestamps\n\
    \   need to be transmitted in both directions.\n   We now outline a few other\
    \ ideas that can be used for skew\n   correction.\n   o  Skew correction with\
    \ faster virtual clock:\n      Since having a faster clock on the sender will\
    \ result in\n      continuous updates of the base delay, a faster virtual clock\
    \ can\n      be used for sender timestamping.  This virtual clock can be\n   \
    \   computed from the default machine clock through a linear\n      transformation.\
    \  For instance, with a 500 ppm speed-up the\n      sender's clock is very likely\
    \ to be faster than a receiver's\n      clock.  Consequently, LEDBAT will benefit\
    \ from the implicit\n      correction when updating the base delay.\n   o  Skew\
    \ correction with estimating drift:\n      A LEDBAT sender maintains a history\
    \ of base delay minima.  This\n      history can provide a base to compute the\
    \ clock skew difference\n      between the two hosts.  The slope of a linear function\
    \ fitted to\n      the set of minima base delays gives an estimate of the clock\
    \ skew.\n      This estimation can be used to correct the clocks.  If the other\n\
    \      endpoint is doing the same, the clock should be corrected by half\n   \
    \   of the estimated skew amount.\n   o  Byzantine skew correction:\n      When\
    \ it is known that each host maintains long-lived connections\n      to a number\
    \ of different other hosts, a byzantine scheme can be\n      used to estimate\
    \ the skew with respect to the true time.  Namely,\n      a host calculates the\
    \ skew difference for each of the peer hosts\n      as described with the previous\
    \ approach, then take the median of\n      the skew differences.  While this scheme\
    \ is not universally\n      applicable, it combines well with other schemes, since\
    \ it is\n      essentially a clock training mechanism.  The scheme also corrects\n\
    \      fast, since state is preserved between connections.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stanislav Shalunov\n   BitTorrent, Inc.\n   303 Second\
    \ St., Suite S200\n   San Francisco, CA  94107\n   USA\n   EMail: shalunov@shlang.com\n\
    \   URI:   http://shlang.com\n   Greg Hazel\n   BitTorrent, Inc.\n   303 Second\
    \ St., Suite S200\n   San Francisco, CA  94107\n   USA\n   EMail: greg@bittorrent.com\n\
    \   Janardhan Iyengar\n   Franklin and Marshall College\n   415 Harrisburg Ave.\n\
    \   Lancaster, PA  17603\n   USA\n   EMail: jiyengar@fandm.edu\n   Mirja Kuehlewind\n\
    \   University of Stuttgart\n   Stuttgart\n   DE\n   EMail: mirja.kuehlewind@ikr.uni-stuttgart.de\n"
