- title: __initial_text__
  contents:
  - '                Securely Available Credentials Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a protocol whereby a user can acquire\n\
    \   cryptographic credentials (e.g., private keys, PKCS #15 structures)\n   from\
    \ a credential server, using a workstation that has locally\n   trusted software\
    \ installed, but with no user-specific configuration.\n   The protocol's payloads\
    \ are described in XML.  This memo also\n   specifies a Blocks Extensible Exchange\
    \ Protocol (BEEP) profile of the\n   protocol.  Security requirements are  met\
    \ by mandating support for\n   TLS and/or DIGEST-MD5 (through BEEP).\n"
- title: Table Of Contents
  contents:
  - "Table Of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  The Protocol. . . . . .  . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  BEEP Profile for SACRED. . . . . . . . . . . . . . . .\
    \ . . . .  9\n   4.  IANA Considerations. . . . . . . . . . . . . . . . . . .\
    \ . . . 12\n   5.  Security Considerations. . . . . . . . . . . . . . . . . .\
    \ . . 13\n   6.  References . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 15\n   Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 16\n   Appendix A: XML Schema . . . . . . . . . . . . . . . . . . . . . . 17\n\
    \   Appendix B: An Example of Tuning with BEEP . . . . . . . . . . . . 20\n  \
    \ Appendix C: Provision SACRED using other Protocols . . . . . . . . 23\n   Editor's\
    \ Address . . . . . . . . . . . . . . . . . . . . . . . . . 24\n   Full Copyright\
    \ Statement. . . . . . . . . . . .  . . . . . . . . . 25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Digital credentials, such as private keys and corresponding\n\
    \   certificates, are used to support various Internet protocols, e.g.\n   S/MIME,\
    \ IPSec, and TLS.  In a number of environments, end users wish\n   to use the\
    \ same credentials on different end-user devices.  In a\n   \"typical\" desktop\
    \ environment, the user already has many tools\n   available to allow import/export\
    \ of these credentials.  However, this\n   is not very practical.  In addition,\
    \ with some devices, especially\n   wireless and other more constrained devices,\
    \ the tools required\n   simply do not exist.\n   This document describes a protocol\
    \ for the secure exchange of such\n   credentials and is a realization of the\
    \ abstract protocol framework\n   described in [RFC3760].\n   Many user-chosen\
    \ passwords are vulnerable to dictionary attacks.  So\n   the SACRED protocol\
    \ is designed to give no information with which an\n   attacker can acquire information\
    \ for launching a dictionary attack,\n   whether by eavesdropping or by impersonating\
    \ either the client or\n   server.\n   The protocol also allows a user to create\
    \ or delete an account,\n   change her account password and/or credentials, and\
    \ upload the new\n   values to the server.  The protocol ensures that only someone\
    \ that\n   knew the old account password is able to modify the credentials as\n\
    \   stored on the credential server.  The protocol does not preclude\n   configuring\
    \ a server to disallow some operations (e.g. credential\n   upload) for some users.\
    \  The account management operations as a whole\n   are optional implementations\
    \ for both credential servers and clients.\n   Note that there are potentially\
    \ two \"passwords\" involved when using\n   this protocol - the first used to\
    \ authenticate the user to the\n   credential server, and the second to decrypt\
    \ (parts of) the\n   credential following a download operation.  Where the context\n\
    \   requires it, we refer to the former as the account password and the\n   latter\
    \ as the credential password.\n   Using a protocol such as this is somewhat less\
    \ secure than using a\n   smart card, but can be used until smart cards and smart\
    \ card readers\n   on workstations become ubiquitous, and can be useful even after\
    \ smart\n   cards are ubiquitous, as a backup strategy when a user's smart card\n\
    \   is lost or malfunctioning.\n   The protocol sets out to meet the requirements\
    \ in [REQS].\n   Cryptographic credentials may take the form of private keys,\
    \ PKCS #15\n   [PKCS15], or structures.  As stated, a profile based on BEEP [BEEP]\n\
    \   is specified for message transport and security (integrity,\n   authentication,\
    \ and confidentiality).  In that case, the security\n   requirements are met by\
    \ mandating support (via BEEP) for TLS [TLS]\n   and/or DIGEST-MD5 [DIGEST-MD5].\n\
    \   We assume the only authentication information available to the user\n   is\
    \ a username and password.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \
    \ \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  The Protocol
  contents:
  - "2.  The Protocol\n   This section defines the account management and \"run-time\"\
    \ operations\n   for the SACRED protocol.\n   It also describes the message formats\
    \ used, which are described in\n   XML [XMLSCHEMA].  Appendix A provides an XML\
    \ schema for these\n   elements.\n   The approach taken here is to define SACRED\
    \ elements that are\n   compatible with the elements used in [XKMS] and [XMLDSIG],\
    \ so that an\n   implementation of this protocol can easily also support XKMS,\
    \ and\n   vice versa.\n   It is also intended that other SACRED protocol instances\
    \ (e.g. using\n   a different authentication scheme, credential format, or transport\n\
    \   protocol) could re-use many of the definitions here.\n"
- title: 2.1.  Account Management Operations
  contents:
  - "2.1.  Account Management Operations\n   These operations MAY be implemented,\
    \ that is, they are OPTIONAL.\n"
- title: 2.1.1.  Information Request
  contents:
  - "2.1.1.  Information Request\n   This operation does NOT REQUIRE authentication.\n\
    \   The purpose of this operation is to provide the client with the\n   values\
    \ required for account creation.\n   The client sends an InfoRequest message (which\
    \ has no content).\n   The server responds with an InfoResponse message which\
    \ contains the\n   authentication mechanism parameters for the server and the\
    \ list of\n   supported ProcessInfo types.  For DIGEST-MD5, this consists of the\n\
    \   list of realms (each as an XML element named \"Realm\") which the\n   server\
    \ supports.  There MUST be at least one realm specified.\n   Clients MUST be able\
    \ to select one from a list of Realms and MUST be\n   able to disregard any other\
    \ information present (allowed for\n   extensibility).\n"
- title: 2.1.2.  Create Account
  contents:
  - "2.1.2.  Create Account\n   This operation REQUIRES server authentication.\n \
    \  The purpose of this operation is to setup a new account on the\n   server.\
    \  The information required for a \"new\" account will depend on\n   the SASL\
    \ [SASL] mechanism used.\n   The client sends a CreateAccountRequest, which contains\
    \ the account\n   name (e.g. username).  It also contains the elements required\
    \ to\n   create an account for a particular authentication mechanism.  The\n \
    \  actual information is defined according to the authentication\n   mechanism.\
    \  For DIGEST-MD5, this consists of the password verifier\n   (the hashed username,\
    \ password and realm) and the chosen realm.\n   Although more than one set of\
    \ such data is allowed by the data\n   structures defined in the appendix, clients\
    \ SHOULD only include one\n   here.\n   The server responds with an error or acknowledgement\
    \ message.\n"
- title: 2.1.3.  Remove Account
  contents:
  - "2.1.3.  Remove Account\n   This operation REQUIRES mutual authentication.\n \
    \  The purpose of this operation is to delete the entire account.\n   The client\
    \ sends a RemoveAccountRequest message (which has no\n   content) to the server.\n\
    \   The server MUST delete all information relating to the account and\n   respond\
    \ with an error or acknowledgement message.\n"
- title: 2.1.4.  Modify Account
  contents:
  - "2.1.4.  Modify Account\n   This operation REQUIRES mutual authentication.\n \
    \  The purpose of this operation is to allow the client to change the\n   information\
    \ required for authentication.  The information required\n   will depend on the\
    \ authentication method used.\n   The client sends a ModifyAccountRequest message,\
    \ which contains the\n   elements required to change the authentication information\
    \ for the\n   account, for a particular authentication mechanism.  The actual\n\
    \   information is defined according to the authentication mechanism. For\n  \
    \ [DIGEST-MD5], it will consist of a realm and password verifier value.\n   Once\
    \ the account information has been changed, the server will\n   respond with an\
    \ error or acknowledgement message.\n"
- title: 2.2.  "Run-time" Operations
  contents:
  - "2.2.  \"Run-time\" Operations\n   These operations MUST be supported by all conformant\
    \ implementations.\n"
- title: 2.2.1.  Credential Upload
  contents:
  - "2.2.1.  Credential Upload\n   This operation REQUIRES mutual authentication.\n\
    \   The purpose of this operation is to allow the client to deposit a\n   credential\
    \ with the server.\n   The client sends an UploadRequest message to the server\
    \ which MUST\n   contain one Credential.\n   If a credential with the same credential\
    \ selector field as in the\n   UploadRequest (a \"matching\" credential) already\
    \ exists for the\n   account, then that credential is replaced with the new credential\n\
    \   from the UploadRequest.  Otherwise a \"new\" credential is associated\n  \
    \ with that account.  If a new credential is being uploaded, then the\n   client\
    \ SHOULD include (in LastModified) its local concept of the time\n   (if it has\
    \ one), or an indicator that it has no clock.  The actual\n   value of LastModified\
    \ can be anything, (but the element has to be\n   present) since this will be\
    \ overwritten by the server in any case.\n   If any change is made to the stored\
    \ credentials associated with the\n   account, then the server MUST update the\
    \ corresponding LastModified\n   value (returned in DownloadResponse messages)\
    \ to the current time (at\n   the server).\n   The LastModified value in the UploadRequest\
    \ MUST be the value which\n   was most recently received in a corresponding DownloadResponse\
    \ for\n   that credential.  This means the clients are strongly RECOMMENDED to\n\
    \   only produce an UploadRequest based on recently downloaded\n   credentials,\
    \ since otherwise the LastModified value may be out of\n   date.\n   The LastModified\
    \ value can also be of use in detecting conflicts.\n   For example, download to\
    \ platform A, download to platform B, update\n   from B, update from A.  The server\
    \ could detect a conflict on the\n   second upload.  In this case the server MUST\
    \ respond with a BEEP\n   error (which SHOULD be StaleCredential).\n   The server\
    \ replaces the provided LastModified value with the current\n   time at the server\
    \ before storing the credential.  (Note that this\n   means that it would be unwise\
    \ for a client to include the\n   LastModified field in a ClientInfo digital signature\
    \ which is\n   calculated over the CredentialType.)\n   The server responds with\
    \ an error or acknowledgement message.\n"
- title: 2.2.2.  Credential Download
  contents:
  - "2.2.2.  Credential Download\n   This operation REQUIRES mutual authentication.\n\
    \   The purpose of this operation is to allow a client to get one or more\n  \
    \ credentials from a server (the purpose of the entire protocol\n   really!).\n\
    \   The client sends a DownloadRequest message to the server which MAY\n   contain\
    \ a credential selector string for the credential.  No, or an\n   empty credential\
    \ selector means the request is for all credentials\n   associated with the account.\n\
    \   The server responds with a DownloadResponse or an error message.  A\n   DownloadResponse\
    \ contains one or more credential payloads, including\n   the LastModified time\
    \ which represents the time (at the server) when\n   the last change was made\
    \ to each credential associated with the\n   account (e.g. subsequent to an UploadRequest).\n"
- title: 2.2.3.  Credential Delete
  contents:
  - "2.2.3.  Credential Delete\n   This operation REQUIRES mutual authentication.\n\
    \   The purpose of this operation is to allow the client to delete one or\n  \
    \ all credentials associated with the account.\n   The client sends a DeleteRequest\
    \ message to the server which can\n   contain either a CredentialSelector or an\
    \ All element.\n   If the DeleteRequest contains an All element, then all of the\n\
    \   credentials associated with that account are deleted.\n   If the DeleteRequest\
    \ contains a CredentialSelector, then the request\n   MAY include a LastModified\
    \ value.  If the LastModified value is\n   present in the DeleteRequest, then\
    \ it MUST be the value which was\n   most recently received in a corresponding\
    \ DownloadResponse for that\n   credential.  If the value does not match, then\
    \ the server MUST NOT\n   delete the credentials.\n   If no \"matching\" credential\
    \ exists, the server returns an error.\n   The server responds to this request\
    \ with an error or acknowledgement\n   message.\n"
- title: 2.3.  Miscellaneous
  contents:
  - '2.3.  Miscellaneous

    '
- title: 2.3.1.  Session Security
  contents:
  - "2.3.1.  Session Security\n   Six SACRED operations are defined above.  In this\
    \ section we specify\n   the requirements for security for each of the operations\
    \ (where\n   supported).\n        Operation                 Security REQUIRED\n\
    \        ---------                 -----------------\n        Information request\
    \       NONE\n        Create account            Server authentication,\n     \
    \                             Confidentiality, Integrity\n        Remove account\
    \            Mutual authentication,\n                                  Confidentiality,\
    \ Integrity\n        Modify account            Mutual authentication,\n      \
    \                            Confidentiality, Integrity\n        Credential upload\
    \         Mutual authentication,\n                                  Confidentiality,\
    \ Integrity\n        Credential download       Mutual authentication,\n      \
    \                            Confidentiality, Integrity\n        Credential delete\
    \         Mutual authentication,\n                                  Confidentiality,\
    \ Integrity\n   The security requirements can be met by several mechanisms.  This\n\
    \   document REQUIRES credential servers to support TLS and DIGEST-MD5.\n   Clients\
    \ MUST support DIGEST-MD5 and TLS with server authentication.\n   The mandatory-to-implement\
    \ TLS cipher suite for SACRED is\n   TLS_RSA_WITH_3DES-EDE_CBC_SHA.  Implementations\
    \ SHOULD also support\n   TLS_RSA_WITH_AES_128_CBC_SHA [TLSAES].\n   When performing\
    \ mutual authentication using DIGEST-MD5 for the\n   client, DIGEST-MD5 MUST only\
    \ be used \"within\" a TLS server-\n   authenticated \"pipe\", and MUST only be\
    \ used for client\n   authentication.  That is, we do not use the DIGEST-MD5 security\n\
    \   services (confidentiality, integrity etc.).\n"
- title: 2.3.2.  Handling Multiple Credentials for an Account
  contents:
  - "2.3.2.  Handling Multiple Credentials for an Account\n   When more than one credential\
    \ is stored under a single account, the\n   client can select a single credential\
    \ using the optional credential\n   selector string.\n   There is no concept of\
    \ a \"default credential\" - all credentials MUST\n   have an associated selector\
    \ unique for that account.  The selector is\n   REQUIRED for upload requests and\
    \ OPTIONAL for download requests.  If\n   the selector is omitted in a download\
    \ request, it MUST be interpreted\n   as a request for all the stored credentials.\n\
    \   An empty selector string value (i.e. \"\") in a credential download\n   request\
    \ is to be interpreted as if the selector string were omitted,\n   i.e. a download\
    \ request containing this is a request for all\n   credentials.\n   It is an error\
    \ to have more than one credential stored under the same\n   account where both\
    \ have the same credential selector string.\n"
- title: 2.3.3.  Common Fields
  contents:
  - "2.3.3.  Common Fields\n   All messages sent to the server MAY contain ProcessInfo\
    \ values.  This\n   field MAY be used by other specifications or for vendor extensions.\n\
    \   For example, a server might require clients to include a phone number\n  \
    \ in this field.  The information response message contains a list of\n   the\
    \ types of ProcessInfo that the server supports.  This\n   extensibility scheme\
    \ is similar to that used in [XKMS] and [XBULK].\n   Where no specific response\
    \ message is defined for an operation (e.g.\n   for UploadRequest), then the transport\
    \ will indicate success or\n   failure.\n   All of the response messages defined\
    \ here MAY contain a Status\n   string, containing a value intended for human\
    \ consumption.\n"
- title: 2.3.4.  Credential Format
  contents:
  - "2.3.4.  Credential Format\n   A number of messages involve the Credential element.\
    \  It has the\n   following fields (all optional fields may occur exactly zero\
    \ or one\n   times unless otherwise stated):\n   -  CredentialSelector contains\
    \ a string by which this particular\n      credential (for this account) can be\
    \ identified.\n   -  PayLoad contains either a ds:KeyInfo or some other form of\n\
    \      credential.  Implementations MUST support the PKCS #15 form of\n      ds:KeyInfo\
    \ defined below (the SacredPKCS15 element).\n   -  LastModified is a string containing\
    \ the time (at the server) at\n      which this credential was last modified.\n\
    \   -  TimeToLive (optional) is a hint clients SHOULD honor, which\n      specifies\
    \ the number of seconds the downloaded credential is to be\n      usable.\n  \
    \ -  ProcessInfo (optional) MAY contain any (typed) information that\n      the\
    \ server is intended to process.  If the server doesn't support\n      any of\
    \ the ProcessInfo data, it MAY ignore that data.\n   -  ClientInfo (optional)\
    \ MAY contain any (typed) information that the\n      client is intended to process,\
    \ but which the server MUST ignore.\n      If the client doesn't support any of\
    \ the ClientInfo data, it MAY\n      ignore that data (e.g. if the ClientInfo\
    \ is device specific).\n"
- title: 3.  BEEP Profile for SACRED
  contents:
  - "3.  BEEP Profile for SACRED\n   The protocol described in this memo is realized\
    \ as a [BEEP] profile.\n   Future memos may define alternative versions of the\
    \ BEEP profile for\n   SACRED.  When a BEEP peer sends its greeting, it indicates\
    \ which\n   profiles it is willing to support.  Accordingly, when the BEEP client\n\
    \   asks to start a channel, it indicates the versions it supports, and\n   if\
    \ any of these are acceptable to the BEEP server; the latter\n   specifies which\
    \ profile it is starting.\n   Profile Identification: http://iana.org/beep/sacred\n\
    \   Messages Exchanged during Channel Creation:\n        InfoRequest,\n      \
    \  CreateAccountRequest,\n        RemoveAccountRequest,\n        ModifyAccountRequest,\n\
    \        DownloadRequest,\n        UploadRequest,\n        DeleteRequest,\n  \
    \      InfoResponse,\n        DownloadResponse,\n        error,\n        ok\n\
    \   Messages starting one-to-one exchanges:\n        InfoRequest,\n        CreateAccountRequest,\n\
    \        RemoveAccountRequest,\n        ModifyAccountRequest,\n        DownloadRequest,\n\
    \        UploadRequest,\n        DeleteRequest\n   Messages in positive replies:\n\
    \        ok,\n        InfoResponse,\n        DownloadResponse\n   Messages in\
    \ negative replies: error\n   Messages in one-to-many changes: none\n   Message\
    \ Syntax: c.f.,Section 3\n   Message Semantics: c.f., Section 2\n   Contact Information:\
    \ c.f., the editor's address section of this memo\n"
- title: 3.1.  Profile Initialization
  contents:
  - "3.1.  Profile Initialization\n   Because all but one of the operations of the\
    \ SACRED profile have\n   security requirements (cf., Section 2.3.1), before starting\
    \ the\n   SACRED profile, the BEEP session will likely be tuned using either\n\
    \          http://iana.org/beep/TLS\n          or\n          http://iana.org/beep/TLS\
    \ followed by\n          http://iana.org/SASL/DIGEST-MD5\n   Appendix B gives\
    \ an example of tuning a BEEP session using DIGEST-\n   MD5 (i.e. it shows how\
    \ to turn on BEEP security).\n   Regardless, upon completion of the negotiation\
    \ process, a tuning\n   reset occurs in which both BEEP peers issue a new greeting.\
    \  Consult\n   Section 3 of [BEEP] for an example of how a BEEP peer may choose\
    \ to\n   issue different greetings based on whether confidentiality is in use.\n\
    \   Any of the messages listed in section 3.2 below may be exchanged\n   during\
    \ channel initialization (c.f., Section 2.3.1.2 of [BEEP]),\n   e.g.,\n      \
    \  C: <start number='1'>\n        C:   <profile uri='http://iana.org/beep/sacred'>\n\
    \        C:             <![CDATA[<DownloadRequest ...>]]>\n        C:     </profile>\n\
    \        C: </start>\n        S: <profile uri='http://iana.org/beep/sacred'>\n\
    \        S:   <![CDATA[<DownloadResponse ...>]]>\n        S: </profile>\n   Note\
    \ that BEEP imposes both encoding and length limitations on the\n   messages that\
    \ are piggybacked during channel initialization.\n"
- title: 3.2.  Profile Exchange
  contents:
  - "3.2.  Profile Exchange\n   All messages are exchanged as \"application/beep+xml\"\
    \ (c.f., Section\n   6.4 of [BEEP]):\n   Role         MSG                   RPY\
    \                     ERR\n   ----         ---                   ---         \
    \            ---\n   I            InfoRequest           InfoResponse         \
    \   error\n   I            CreateAccountRequest  ok                      error\n\
    \   I            RemoveAccountRequest  ok                      error\n   I   \
    \         ModifyAccountRequest  ok                      error\n   I          \
    \  DownloadRequest       DownloadResponse        error\n   I            UploadRequest\
    \         ok                      error\n   I            DeleteRequest       \
    \  Ok                      error\n"
- title: 3.3.  Error Handling
  contents:
  - "3.3.  Error Handling\n   The \"error\" message from Section 2.3.1.5 of [BEEP]\
    \ is used to convey\n   error information.  Typically, after flagging an error,\
    \ a peer will\n   initiate a graceful release of the BEEP session.\n   The following\
    \ BEEP error reply codes from [BEEP] are to be used:\n    code  Meaning\n    ====\
    \  =======\n    421   service not available\n    450   requested action not taken\
    \ (e.g., lock already in\n           use)\n    451   requested action aborted\
    \ (e.g., local error in\n           processing)\n    454   temporary authentication\
    \ failure\n    500   general syntax error (e.g., poorly-formed XML)\n    501 \
    \  syntax error in parameters (e.g., non-valid XML)\n    504   parameter not implemented\n\
    \    530   authentication required\n    534   authentication mechanism insufficient\
    \ (e.g., too\n           weak, sequence exhausted, etc.)\n    535   authentication\
    \ failure\n    537   action not authorized for user\n    538   authentication\
    \ mechanism requires encryption\n    550   requested action not taken (e.g., no\
    \ requested\n           profiles are acceptable)\n    553   parameter invalid\n\
    \    554   transaction failed (e.g., policy violation)\n   The following SACRED-specific\
    \ error reply codes can also be used:\n    code  Meaning\n    ====  =======\n\
    \    555   Extension (ProcessInfo) used not supported\n    556   Required extension\
    \ (ProcessInfo) not present\n    557   StaleCredential (A bad LastModified value\
    \ was\n           contained in an UploadRequest.)\n"
- title: 3.4.  SASL Authorization Identity
  contents:
  - "3.4.  SASL Authorization Identity\n   The use of the SASL authorization identity\
    \ in this protocol is\n   implementation-specific.  If used, the authorization\
    \ identity is not\n   a substitute for the credential selector field, but may\
    \ be used to\n   affect authorization for access to credentials.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   The IANA has registered the BEEP profile specified\
    \ in Section 4.\n      http://iana.org/beep/sacred\n   The sacred protocol SHOULD\
    \ be run over port 1118.\n   The GSSAPI service name (required when using SASL)\
    \ for this protocol\n   SHALL be \"sacred\".\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   [REQS] calls for specifications to state how\
    \ they address the\n   vulnerabilities listed below.\n      V1.   A passive attacker\
    \ can watch all packets on the network and\n            later carry out a dictionary\
    \ attack.\n            - The use of DIGEST-MD5 and/or TLS counters this\n    \
    \        vulnerability.\n      V2.   An attacker can attempt to masquerade as\
    \ a credential server\n            in an attempt to get a client to reveal information\
    \ online\n            that allows for a later dictionary attack.\n           \
    \ - The use of server or mutual authentication counters this\n            vulnerability.\n\
    \      V3.   An attacker can attempt to get a client to decrypt a chosen\n   \
    \         \"ciphertext\" and get the client to make use of the resulting\n   \
    \         plaintext - the attacker may then be able to carry out a\n         \
    \   dictionary attack (e.g. if the plaintext resulting from\n            \"decryption\"\
    \ of a random string is used as a DSA private\n            key).\n           \
    \ - The use of server or mutual authentication counters this\n            vulnerability.\n\
    \      V4.   An attacker could overwrite a repository entry so that when\n   \
    \         a user subsequently uses what they think is a good\n            credential,\
    \ they expose information about their password\n            (and hence the \"\
    real\" credential).\n            - Server implementations SHOULD take measures\
    \ to protect the\n            database.  Clients MAY use the ClientInfo field\
    \ to store\n            e.g. a signature over the Credential, which they then\
    \ verify\n            before using the private component.\n      V5.   An attacker\
    \ can copy a credential server's repository and\n            carry out a dictionary\
    \ attack.\n            - Server implementations SHOULD take measures to protect\
    \ the\n            database.\n      V6.   An attacker can attempt to masquerade\
    \ as a client in an\n            attempt to get a server to reveal information\
    \ that allows\n            for a later dictionary attack.\n            - The mutual\
    \ authentication requirements of this protocol\n            counter this to a\
    \ great extent.  Additionally, credential\n            servers MAY choose to provide\
    \ mechanisms that protect\n            against online dictionary attacks against\
    \ user account\n            passwords, either by repeated access attempts to a\
    \ single\n            user account (varying the password) or by attempting to\n\
    \            access many user accounts using the same password.\n      V7.   An\
    \ attacker can persuade a server that a successful login\n            has occurred,\
    \ even if it hasn't.\n            - Client authentication prevents this.\n   \
    \   V8.   (Upload) An attacker can overwrite someone else's\n            credentials\
    \ on the server.\n            - Only if they know the account password already\
    \ (thanks to\n            mutual authentication).\n      V9.   (When using password-based\
    \ authentication) An attacker can\n            force a password change to a known\
    \ (or \"weak\") password.\n            - Client authentication counters this.\n\
    \      V10.  An attacker can attempt a man-in-the-middle attack for lots\n   \
    \         of reasons...\n            - Mutual authentication and the encryption\
    \ of subsequent\n            messages prevents this.\n      V11.  User enters\
    \ password instead of name.\n            - Since the DIGEST-MD5 mechanism is only\
    \ used after TLS\n            tuning, the user's name is also protected.\n   \
    \   V12.  An attacker could attempt various denial-of-service attacks.\n     \
    \       - No specific countermeasures against DoS are proposed.\n   If the CreateAccountRequest\
    \ message were sent over a cleartext\n   channel (or otherwise exposed), then\
    \ an attacker could mount a\n   dictionary attack and recover the account password.\
    \  This is why the\n   server authenticated TLS transport is REQUIRED for this\
    \ operation.\n   If someone steals the server database they can launch a dictionary\n\
    \   attack.  If the dictionary attack is successful, the attacker can\n   decrypt\
    \ the user's credentials.  An attacker that has learned the\n   user's account\
    \ password can also upload new credentials, assuming the\n   user is authorized\
    \ to modify the credentials, because someone who\n   knows the user's account\
    \ password is assumed to be the user.\n   However, if someone steals the server\
    \ database and is unsuccessful at\n   obtaining the user's account password through\
    \ a dictionary attack,\n   they will be unable to upload new credentials.\n  \
    \ Credential servers SHOULD incorporate measures that act to counter\n   denial\
    \ of service attacks.  In particular, they SHOULD drop inactive\n   connections\
    \ and minimize the use of resources by un-authenticated\n   connections.  A number\
    \ of recommendations are listed at [DDOS].\n   Various operations in the SACRED\
    \ protocol depend upon server\n   authentication being provided by server authenticated\
    \ TLS.  SACRED\n   clients SHOULD take care that the correct server is at the\
    \ far end of\n   the TLS \"pipe\" by performing the checks which are listed in\
    \ section\n   3.1 of RFC 2818 [RFC2818].  Clients SHOULD also include the optional\n\
    \   BEEP serverName field in their \"start\" message and SHOULD then ensure\n\
    \   that the BEEP serverName is consistent with the checks on the TLS\n   server\
    \ described in RFC 2818.  Failure to carry out these checks\n   could allow a\
    \ spoof server access to a user's credential.\n   If the SACRED account password\
    \ were to be used in some other, less\n   secure protocol, using DIGEST-MD5, then\
    \ it might appear to be the\n   case that a man-in-the-middle (MITM) attack could\
    \ be mounted.\n   However, this is not the case since the DIGEST-MD5 client hash\n\
    \   includes a client-selected \"digest-uri-value\", which in SACRED's case\n\
    \   will be \"sacred/<serverName>\".  In a MITM attack, those values will\n  \
    \ be something else.  A MITM attack as described is therefore thwarted,\n   because\
    \ digest-uri-value wouldn't match what the SACRED server is\n   expecting.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [BEEP]       Rose, M., \"The Blocks Extensible\
    \ Exchange Protocol\n                Core\", RFC 3080, March 2001.\n   [DIGEST-MD5]\
    \ Leach, P. and C. Newman, \"Using Digest Authentication as\n                a\
    \ SASL Mechanism\", RFC 2831, May 2000.\n   [PKCS15]     \"PKCS #15 v1.1: Cryptographic\
    \ Token Information Syntax\n                Standard,\" RSA Laboratories, June\
    \ 2000.\n   [REQS]       Arsenault, A. and S. Farrell, \"Securely Available\n\
    \                Credentials - Requirements\", RFC 3157, August 2001.\n   [RFC2119]\
    \    Bradner, S., \"Key words for use in RFCs to Indicate\n                Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [SASL]       Myers, J., \"Simple\
    \ Authentication and Security Layer\n                (SASL)\", RFC 2222, October\
    \ 1997.\n   [TLS]        Dierks, T. and C. Allen, \"The TLS Protocol - Version\n\
    \                1.0\", RFC 2246, January 1999.\n   [TLSAES]     Chown, P., \"\
    Advanced Encryption Standard (AES)\n                Ciphersuites for Transport\
    \ Layer Security (TLS)\", RFC\n                3268, June 2002.\n   [XMLDSIG]\
    \    Eastlake, 3rd, D., Reagle, J. and D. Solo, \"(Extensible\n              \
    \  Mark-Up Language) XML-Signature Syntax and Processing\",\n                RFC\
    \ 3275, March 2002.\n   [XMLSCHEMA]  \"XML Schema Part 1: Structures\", D. Beech,\
    \ M. Maloney,\n                N. Mendelsohn, and H. Thompson.  W3C Recommendation,\
    \ May\n                2001.  Available at http://www.w3.org/TR/2001/REC-\n  \
    \              xmlschema-2-20010502/\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [DDOS]       \"Recommendations for the Protection\
    \ against Distributed\n                Denial-of-Service Attacks in the Internet\"\
    ,\n                http://www.iwar.org.uk/comsec/resources/dos/ddos_en.htm\n \
    \  [RFC2818]    Rescorla, E., \"HTTP over TLS\", RFC 2818, May 2000.\n   [RFC3760]\
    \    Gustafson, D., Just, M. and M. Nystrom, \"Securely\n                Available\
    \ Credentials - Credential Server Framework,\"\n                RFC 3760, April\
    \ 2004.\n   [XKMS]       Hallam-Baker, P. (ed), \"XML Key Management\n       \
    \         Specification\", http://www.w3.org/TR/xkms2/\n   [XBULK]      Hughes,\
    \ M (ed), \"XML Key Management Specification - Bulk\n                Operation\"\
    , http://www.w3.org/TR/xkms2-xbulk/\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Radia Perlman (radia.perlman@sun.com) and Charlie Kaufman\n\
    \   (charliek@microsoft.com) co-authored earlier versions of this\n   document.\
    \  Michael Zolotarev (mzolotar@tpg.com.au) did much of the\n   initial work, adapting\
    \ an earlier version to the use of SRP (though\n   SRP was subsequently dropped,\
    \ much of the framework survives).\n   Marshall Rose (mrose@dbc.mtview.ca.us)\
    \ helped out a lot, in\n   particular, with the BEEP profile.  And the following\
    \ people were\n   actively involved in the mailing list discussions leading to\
    \ this\n   document:\n        David Chizmadia,\n        Dave Crocker (dcrocker@brandenburg.com),\n\
    \        Lawrence Greenfield (leg+@andrew.cmu.edu),\n        Dale Gustafson (degustafson@comcast.net),\n\
    \        Mike Just (just.mike@tbs-sct.gc.ca),\n        John Linn (jlinn@rsasecurity.com),\n\
    \        Neal McBurnett (neal@bcn.boulder.co.us),\n        Keith Moore (moore@cs.utk.edu),\n\
    \        RL \"Bob\" Morgan (rlmorgan@washington.edu),\n        Magnus Nystrom\
    \ (magnus@rsasecurity.com),\n        Eamon O'Tuathail (eamon.otuathail@clipcode.com),\n\
    \        Gareth Richards (grichards@rsasecurity.com)\n   Of course, any and all\
    \ errors remain the editor's responsibility.\n"
- title: 'Appendix A: XML Schema'
  contents:
  - "Appendix A: XML Schema\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n     \
    \ <schema\n        targetNamespace=\"urn:sacred-2002-12-19\"\n        xmlns:ds=\"\
    http://www.w3.org/2000/09/xmldsig#\"\n        xmlns:sacred=\"urn:sacred-2002-12-19\"\
    \n        xmlns=\"http://www.w3.org/2001/XMLSchema\">\n        <import namespace=\"\
    http://www.w3.org/2000/09/xmldsig#\"\n        schemaLocation=\n        \"http://www.w3.org/TR/xmldsig-core/xmldsig-core-schema.xsd\"\
    />\n        <!-- extensibility holes -->\n        <complexType name=\"ProcessInfoType\"\
    >\n         <sequence maxOccurs=\"unbounded\">\n          <any namespace=\"##other\"\
    />\n         </sequence>\n        </complexType>\n        <element name=\"ProcessInfo\"\
    \ type=\"sacred:ProcessInfoType\"/>\n        <complexType name=\"ClientInfoType\"\
    >\n         <sequence maxOccurs=\"unbounded\">\n          <any namespace=\"##other\"\
    />\n         </sequence>\n        </complexType>\n        <element name=\"ClientInfo\"\
    \ type=\"sacred:ClientInfoType\"/>\n        <!-- Where to put authenentication\
    \ information -->\n        <complexType name=\"AuthInfoType\">\n         <choice\
    \ maxOccurs=\"unbounded\">\n          <element name=\"DigestMD5AuthInfo\">\n \
    \          <complexType>\n            <sequence>\n             <element name=\"\
    PasswordVerifier\" type=\"base64Binary\"/>\n             <element name=\"Realm\"\
    \ type=\"string\" />\n            </sequence>\n           </complexType>\n   \
    \       </element>\n          <any namespace=\"##other\"/>\n         </choice>\n\
    \        </complexType>\n        <element name=\"AuthInfo\" type=\"sacred:AuthInfoType\"\
    />\n        <!-- authentication mechanism parameters -->\n        <complexType\
    \ name=\"AuthParamsType\">\n         <choice maxOccurs=\"unbounded\">\n      \
    \    <element name=\" DigestMD5AuthParams\">\n           <complexType>\n     \
    \       <sequence>\n             <element name=\"Realm\" type=\"string\"\n   \
    \            minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n            </sequence>\n\
    \           </complexType>\n          </element>\n          <any namespace=\"\
    ##other\"/>\n         </choice>\n        </complexType>\n        <element name=\"\
    AuthParams\" type=\"sacred:AuthParamsType\"/>\n        <!-- Protocol messsages\
    \ -->\n        <!-- \"account handling\" operations -->\n        <!-- Information\
    \ request -->\n        <element name=\"InfoRequest\"/>\n        <element name=\"\
    InfoResponse\">\n         <complexType>\n          <sequence>\n           <element\
    \ name=\"Status\" type=\"string\" minOccurs=\"0\"/>\n           <element name=\"\
    ServerId\" type=\"string\"/>\n           <element ref=\"sacred:AuthParams\"/>\n\
    \           <element ref=\"sacred:ProcessInfo\" minOccurs=\"0\"/>\n          </sequence>\n\
    \         </complexType>\n        </element>\n        <!-- Create Account Request\
    \ -->\n        <element name=\"CreateAccountRequest\">\n         <complexType>\n\
    \          <sequence>\n           <element name=\"UserId\" type=\"string\"/>\n\
    \           <element ref=\"sacred:AuthInfo\"/>\n           <element ref=\"sacred:ProcessInfo\"\
    \ minOccurs=\"0\"/>\n          </sequence>\n         </complexType>\n        </element>\n\
    \        <!-- remove account request -->\n        <element name=\"RemoveAccountRequest\"\
    >\n         <complexType>\n          <sequence>\n           <element ref=\"sacred:ProcessInfo\"\
    \ minOccurs=\"0\"/>\n          </sequence>\n         </complexType>\n        </element>\n\
    \        <!-- password change request -->\n        <element name=\"ModifyAccountRequest\"\
    >\n         <complexType>\n          <sequence>\n           <element ref=\"sacred:AuthInfo\"\
    />\n           <element ref=\"sacred:ProcessInfo\" minOccurs=\"0\"/>\n       \
    \   </sequence>\n         </complexType>\n        </element>\n        <!-- \"\
    run-time\" operations -->\n        <!-- DownLoad Request -->\n        <element\
    \ name=\"DownloadRequest\">\n         <complexType>\n          <sequence>\n  \
    \         <element name=\"CredentialSelector\" type=\"string\"\n             minOccurs=\"\
    0\"/>\n           <element ref=\"sacred:ProcessInfo\" minOccurs=\"0\"/>\n    \
    \      </sequence>\n         </complexType>\n        </element>\n        <!--\
    \ Download Response -->\n        <element name=\"DownloadResponse\">\n       \
    \  <complexType>\n          <sequence>\n           <element name=\"Status\" type=\"\
    string\" minOccurs=\"0\"/>\n           <element name=\"Credential\" type=\"sacred:CredentialType\"\
    \n            maxOccurs=\"unbounded\"/>\n          </sequence>\n         </complexType>\n\
    \        </element>\n        <!-- Upload request -->\n        <element name=\"\
    UploadRequest\">\n         <complexType>\n          <sequence>\n           <element\
    \ name=\"Credential\" type=\"sacred:CredentialType\"/>\n          </sequence>\n\
    \         </complexType>\n        </element>\n        <element name=\"DeleteRequest\"\
    >\n          <complexType>\n            <sequence>\n              <choice>\n \
    \               <sequence>\n                  <element name=\"CredentialSelector\"\
    \ type=\"string\"/>\n                  <element name=\"LastModified\" type=\"\
    dateTime\"\n                        minOccurs=\"0\"/>\n                </sequence>\n\
    \                <element name=\"All\"/>\n              </choice>\n          \
    \    <element ref=\"sacred:ProcessInfo\" minOccurs=\"0\"/>\n            </sequence>\n\
    \          </complexType>\n        </element>\n        <!-- Credential related\
    \ structures -->\n        <!-- A new ds:KeyInfo thing -->\n        <element name=\"\
    SacredPKCS15\" type=\"base64Binary\"/>\n        <!-- credential -->\n        <complexType\
    \ name=\"CredentialType\">\n         <sequence>\n          <element name=\"CredentialSelector\"\
    \ type=\"string\"/>\n          <element name=\"LastModified\" type=\"dateTime\"\
    />\n          <element name=\"Payload\" type=\"ds:KeyInfoType\" minOccurs=\"0\"\
    />\n          <element name=\"TimeToLive\" type=\"string\" minOccurs=\"0\"/>\n\
    \          <element ref=\"sacred:ProcessInfo\" minOccurs=\"0\"/>\n          <element\
    \ ref=\"sacred:ClientInfo\" minOccurs=\"0\"/>\n         </sequence>\n        </complexType>\n\
    \   </schema>\n"
- title: 'Appendix B: An Example of Tuning with BEEP'
  contents:
  - "Appendix B: An Example of Tuning with BEEP\n   Here is what tuning BEEP for authentication\
    \ and confidentiality\n   looks like using TLS and SASL's DIGEST-MD5:\n   L: <wait\
    \ for incoming connection>\n   I: <open connection>\n    ... each peer sends a\
    \ greeting indicating the services that\n       it offers ...\n   L: RPY 0 0 .\
    \ 0 233\n   L: Content-Type: application/beep+xml\n   L:\n   L: <greeting>\n \
    \  L:    <profile uri='http://iana.org/beep/SASL/DIGEST-MD5' />\n   L:    <profile\
    \ uri='http://iana.org/beep/TLS' />\n   L:    <profile uri='http://iana.org/beep/sacred'\
    \ />\n   L: </greeting>\n   L: END\n   I: RPY 0 0 . 0 52\n   I: Content-Type:\
    \ application/beep+xml\n   I:\n   I: <greeting />\n   I: END\n    ... the initiator\
    \ starts a channel for TLS and piggybacks a request\n       to start the TLS negotiation\
    \ ...\n   I: MSG 0 1 . 52 149\n   I: Content-Type: application/beep+xml\n   I:\n\
    \   I: <start number='1' serverName=\"sacred.example.org\">\n   I:    <profile\
    \ uri='http://iana.org/beep/TLS'>\n   I:        &lt;ready />\n   I:    </profile>\n\
    \   I: </start>\n   I: END\n    ... the listener creates the channel and piggybacks\
    \ its readiness to\n       start TLS ...\n   L: RPY 0 1 . 233 112\n   L: Content-Type:\
    \ application/beep+xml\n   L:\n   L: <profile uri='http://iana.org/beep/TLS'>\n\
    \   L:     &lt;proceed />\n   L: </profile>\n   L: END\n    ... upon receiving\
    \ the reply, the initiator starts up TLS ...\n    ... successful transport security\
    \ negotiation ...\n    ... a new greeting is sent (cf., Section 9 of RFC 3080),\
    \ note that\n       the listener no longer advertises TLS (we're already running\n\
    \       it)\n   L: RPY 0 0 . 0 186\n   L: Content-Type: application/beep+xml\n\
    \   L:\n   L: <greeting>\n   L:    <profile uri='http://iana.org/beep/SASL/DIGEST-MD5'\
    \ />\n   L:    <profile uri='http://iana.org/beep/sacred' />\n   L: </greeting>\n\
    \   L: END\n   I: RPY 0 0 . 0 52\n   I: Content-Type: application/beep+xml\n \
    \  I:\n   I: <greeting />\n   I: END\n    ... the initiator starts a channel for\
    \ DIGEST-MD5 and piggybacks\n       initialization information for the mechanism\
    \ ...\n   I: MSG 0 1 . 52 178\n   I: Content-Type: application/beep+xml\n   I:\n\
    \   I: <start number='1'>\n   I:    <profile uri='http://iana.org/beep/SASL/DIGEST-MD5'>\n\
    \   I:        &lt;blob> ... &lt;/blob>\n   I:    </profile>\n   I: </start>\n\
    \   I: END\n    ... the listener creates the channel and piggybacks a challenge\
    \ ...\n   L: RPY 0 1 . 186 137\n   L: Content-Type: application/beep+xml\n   L:\n\
    \   L: <profile uri='http://iana.org/beep/SASL/DIGEST-MD5'>\n   L:     &lt;blob>\
    \ ... &lt;/blob>\n   L: </profile>\n   L: END\n    ... the initiator sends a response\
    \ to the challenge ...\n   I: MSG 1 0 . 0 58\n   I: Content-Type: application/beep+xml\n\
    \   I:\n   I: <blob> ... </blob>\n   I: END\n    ... the listener accepts the\
    \ challenge and tells the initiator\n       that it is now authenticated ...\n\
    \   L: RPY 1 0 . 0 66\n   L: Content-Type: application/beep+xml\n   L:\n   L:\
    \ <blob status='complete' />\n   L: END\n    ... the initiator starts a channel\
    \ for SACRED and piggybacks its\n       initial SACRED request ...\n   I: MSG\
    \ 0 2 . 230 520\n   I: Content-Type: application/beep+xml\n   I:\n   I: <start\
    \ number='3'>\n   I:    <profile uri='http://iana.org/beep/sacred' />\n   I: \
    \       &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   I:        &lt;sacred:DownloadRequest\n\
    \   I:          xmlns:sacred=\"urn:sacred-2002-12-19\"\n   I:          xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n   I:          xsi:schemaLocation=\"\
    urn:sacred-2002-12-19 sacred.xsd\">\n   I:          &lt;CredentialSelector>\n\
    \   I:                      magnus-credentials&lt;/CredentialSelector>\n   I:\
    \        &lt;/sacred:DownloadRequest>\n   I: </start>\n   I: END\n    ... the\
    \ listener creates the channel and piggybacks the response to\n   the initial\
    \ SACRED request\n   L: RPY 0 2 . 323 805\n   L: Content-Type: application/beep+xml\n\
    \   L:\n   L: <profile uri='http://iana.org/beep/sacred' />\n   L:     &lt;?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   L:     &lt;sacred:DownloadResponse\n\
    \   L:       xmlns:sacred=\"urn:sacred-2002-12-19\"\n   L:       xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n   L:       xsi:schemaLocation=\"\
    urn:sacred-2002-12-19 sacred.xsd\">\n   L:       &lt;Status>Success&lt;/Status>\n\
    \   L:       &lt;Credential>\n   L:         &lt;CredentialSelector>\n   L:   \
    \           magnus-credential&lt;/CredentialSelector>\n   L:         &lt;LastModified>2002-11-22T00:00:08Z&lt;/LastModified>\n\
    \   L:         &lt;Payload>\n   L:             &lt;sacred:SacredPKCS15\n   L:\
    \               xmlns:sacred=\"urn:sacred-2002-12-19\">GpM7\n   L:           \
    \  &lt;/sacred:SacredPKCS15>\n   L:         &lt;/Payload>\n   L:       &lt;/Credential>\n\
    \   L:     &lt;/sacred:DownloadResponse>\n   L: </profile>\n   L: END\n"
- title: 'Appendix C: Provision SACRED using other Protocols'
  contents:
  - "Appendix C: Provision SACRED using other Protocols\n   SACRED may be implemented\
    \ in a non-BEEP environment, provided that\n   before any SACRED PDUs are sent,\
    \ the application protocol must be\n   protected according to the security mandates\
    \ provided in Section 2.3.\n   For example, if SACRED is provisioned as the payload\
    \ of an\n   application protocol that supports SASL and TLS, then the appropriate\n\
    \   SASL and/or TLS negotiation must successfully occur before exchanging\n  \
    \ Sacred PDUs.\n   Alternatively, if the application protocol doesn't support\
    \ SASL, then\n   one or more PDUs are defined to facilitate a SASL negotiation,\
    \ and\n   the appropriate negotiation must occur before exchanging Sacred PDUs.\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Stephen Farrell,\n   Distributed Systems Group,\n   Computer\
    \ Science Department,\n   Trinity College Dublin,\n   IRELAND\n   Phone: +353-1-608-3070\n\
    \   EMail: stephen.farrell@cs.tcd.ie\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
