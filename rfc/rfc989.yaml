- title: __initial_text__
  contents:
  - "           Privacy Enhancement for Internet Electronic Mail:\n       Part I:\
    \ Message Encipherment and Authentication Procedures\n"
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   This RFC suggests a proposed protocol for the Internet\
    \ community and\n   requests discussion and suggestions for improvements.  Distribution\n\
    \   of this memo is unlimited.\n"
- title: ACKNOWLEDGMENT
  contents:
  - "ACKNOWLEDGMENT\n   This RFC is the outgrowth of a series of IAB Privacy Task\
    \ Force\n   meetings and of internal working papers distributed for those\n  \
    \ meetings.  I would like to thank the following Privacy Task Force\n   members\
    \ and meeting guests for their comments and contributions at\n   the meetings\
    \ which led to the preparation of this RFC: David\n   Balenson, Matt Bishop, Danny\
    \ Cohen, Tom Daniel, Charles Fox, Morrie\n   Gasser, Steve Kent (chairman), John\
    \ Laws, Steve Lipner, Dan Nessett,\n   Mike Padlipsky, Rob Shirey, Miles Smid,\
    \ Steve Walker, and Steve\n   Wilbur.\n"
- title: 1  Executive Summary
  contents:
  - "1  Executive Summary\n   This RFC defines message encipherment and authentication\
    \ procedures,\n   as the initial phase of an effort to provide privacy enhancement\n\
    \   services for electronic mail transfer in the Internet.  Detailed key\n   management\
    \ mechanisms to support these procedures will be defined in\n   a subsequent RFC.\
    \  As a goal of this initial phase, it is intended\n   that the procedures defined\
    \ here be compatible with a wide range of\n   key management approaches, including\
    \ both conventional (symmetric)\n   and public-key (asymmetric) approaches for\
    \ encryption of data\n   encrypting keys.  Use of conventional cryptography for\
    \ message text\n   encryption and/or authentication is anticipated.\n   Privacy\
    \  enhancement services (confidentiality, authentication, and\n   message integrity\
    \ assurance) are offered through the use of end-to-\n   end cryptography between\
    \ originator and recipient User Agent\n   processes, with no special processing\
    \ requirements imposed on the\n   Message Transfer System at endpoints or at intermediate\
    \ relay sites.\n   This approach allows privacy enhancement facilities to be\n\
    \   incorporated on a site-by-site or user-by-user basis without impact\n   on\
    \ other Internet entities.  Interoperability among heterogeneous\n   components\
    \ and mail transport facilities is supported.\n"
- title: 2  Terminology
  contents:
  - "2  Terminology\n   For descriptive purposes, this RFC uses some terms defined\
    \ in the OSI\n   X.400 Message Handling System Model.  This section replicates\
    \ a\n   portion of X.400's Section 2.2.1, \"Description of the MHS Model:\n  \
    \ Overview\" in order to make the terminology clear to readers who may\n   not\
    \ be familiar with the OSI MHS Model.\n   In the [MHS] model, a user is a person\
    \ or a computer application.  A\n   user is referred to as either an originator\
    \ (when sending a message)\n   or a recipient (when receiving one).  MH Service\
    \ elements define the\n   set of message types and the capabilities that enable\
    \ an originator\n   to transfer messages of those types to one or more recipients.\n\
    \   An originator prepares messages with the assistance of his User\n   Agent.\
    \  A User Agent (UA) is an application process that interacts\n   with the Message\
    \ Transfer System (MTS) to submit messages.  The MTS\n   delivers to one or more\
    \ recipient UAs the messages submitted to it.\n   Functions performed solely by\
    \ the UA and not standardized as part of\n   the MH Service elements are called\
    \ local UA functions.\n   The MTS is composed of a number of Message Transfer\
    \ Agents (MTAs).\n   Operating together, the MTAs relay messages and deliver them\
    \ to the\n   intended recipient UAs, which then make the messages available to\
    \ the\n   intended recipients.\n   The collection of UAs and MTAs is called the\
    \ Message Handling System\n   (MHS).  The MHS and all of its users are collectively\
    \ referred to as\n   the Message Handling Environment.\n"
- title: 3  Services, Constraints, and Implications
  contents:
  - "3  Services, Constraints, and Implications\n   This RFC's goal is to define mechanisms\
    \ to enhance privacy for\n   electronic mail transferred in the Internet.  The\
    \ facilities\n   discussed in this RFC provide privacy enhancement services on\
    \ an\n   end-to-end basis between sender and recipient UAs.  No privacy\n   enhancements\
    \ are offered for message fields which are added or\n   transformed by intermediate\
    \ relay points.  Two distinct privacy\n   enhancement service options are supported:\n\
    \      1.  an option providing sender authentication and integrity\n         \
    \ verification\n      2.  an option providing sender authentication and integrity\n\
    \          verification in addition to confidentiality service through\n     \
    \     encryption\n   No facility for confidentiality service in the absence of\n\
    \   authentication is provided.  Encryption and authentication facilities\n  \
    \ may be applied selectively to portions of a message's contents; this\n   allows\
    \ less sensitive portions of messages (e.g., descriptive fields)\n   to be processed\
    \ by a recipient's delegate in the absence of the\n   recipient's personal cryptographic\
    \ keys.\n   In keeping with the Internet's heterogeneous constituencies and usage\n\
    \   modes, the measures defined here are applicable to a broad range of\n   Internet\
    \ hosts and usage paradigms.  In particular, it is worth\n   noting the following\
    \ attributes:\n        1.   The mechanisms defined in this RFC are not restricted\
    \ to a\n             particular host or operating system, but rather allow\n \
    \            interoperability among a broad range of systems.  All\n         \
    \    privacy enhancements are implemented at the application\n             layer,\
    \ and are not dependent on any privacy features at\n             lower protocol\
    \ layers.\n        2.   The defined mechanisms offer compatibility with non-\n\
    \             enhanced Internet components.  Privacy enhancements will be\n  \
    \           implemented in an end-to-end fashion which does not impact\n     \
    \        mail processing by intermediate relay hosts which do not\n          \
    \   incorporate privacy enhancement facilities.  It is\n             necessary,\
    \ however, for a message's sender to be cognizant\n             of whether a message's\
    \ intended recipient implements\n             privacy enhancements, in order that\
    \ encoding and possible\n             encipherment will not be performed on a\
    \ message whose\n             destination is not equipped to perform corresponding\n\
    \             inverse transformations.\n        3.   The defined mechanisms offer\
    \ compatibility with a range of\n             mail transport facilities (MTAs).\
    \  Within the Internet,\n             electronic mail transport is effected by\
    \ a variety of SMTP\n             implementations.  Certain sites, accessible\
    \ via SMTP,\n             forward mail into other mail processing environments\
    \ (e.g.,\n             USENET, CSNET, BITNET).  The privacy enhancements must\
    \ be\n             able to operate across the SMTP realm; it is desirable that\n\
    \             they also be compatible with protection of electronic mail\n   \
    \          sent between the SMTP environment and other connected\n           \
    \  environments.\n        4.   The defined mechanisms offer compatibility with\
    \ a broad\n             range of electronic mail user agents (UAs).  A large\n\
    \             variety of electronic mail user agent programs, with a\n       \
    \      corresponding broad range of user interface paradigms, is\n           \
    \  used in the Internet.  In order that an electronic mail\n             privacy\
    \ enhancement be available to the broadest possible\n             user community,\
    \ it is desirable that the selected mechanism\n             be usable with the\
    \ widest possible variety of existing UA\n             programs.  For purposes\
    \ of pilot implementation, it is\n             desirable that privacy enhancement\
    \ processing be\n             incorporable into a separate program, applicable\
    \ to a range\n             of UAs, rather than requiring internal modifications\
    \ to\n             each UA with which enhanced privacy services are to be\n  \
    \           provided.\n        5.   The defined mechanisms allow electronic mail\
    \ privacy\n             enhancement processing to be performed on personal\n \
    \            computers (PCs) separate from the systems on which UA\n         \
    \    functions are implemented.  Given the expanding use of PCs\n            \
    \ and the limited degree of trust which can be placed in UA\n             implementations\
    \ on many multi-user systems, this attribute\n             can allow many users\
    \ to process privacy-enhanced mail with\n             a higher assurance level\
    \ than a strictly UA-based approach\n             would allow.\n        6.   The\
    \ defined mechanisms support privacy protection of\n             electronic mail\
    \ addressed to mailing lists.\n   In order to achieve applicability to the broadest\
    \ possible range of\n   Internet hosts and mail systems, and to facilitate pilot\n\
    \   implementation and testing without the need for prior modifications\n   throughout\
    \ the Internet, three basic restrictions are imposed on the\n   set of measures\
    \ to be considered in this RFC:\n          1.   Measures will be restricted to\
    \ implementation at\n               endpoints and will be amenable to integration\
    \ at the user\n               agent (UA) level or above, rather than necessitating\n\
    \               integration into the message transport system (e.g., SMTP\n  \
    \             servers).\n          2.   The set of supported measures enhances\
    \ rather than\n               restricts user capabilities.  Trusted implementations,\n\
    \               incorporating integrity features protecting software from\n  \
    \             subversion by local users, cannot be assumed in general.\n     \
    \          In the absence of such features, it appears more feasible\n       \
    \        to provide facilities which enhance user services (e.g.,\n          \
    \     by protecting and authenticating inter-user traffic) than\n            \
    \   to enforce restrictions (e.g., inter-user access control)\n              \
    \ on user actions.\n          3.   The set of supported measures focuses on a\
    \ set of\n               functional capabilities selected to provide significant\n\
    \               and tangible benefits to a broad user community.  By\n       \
    \        concentrating on the most critical set of services, we\n            \
    \   aim to maximize the added privacy value that can be\n               provided\
    \ with a modest level of implementation effort.\n   As a result of these restrictions,\
    \ the following facilities can be\n   provided:\n         -- disclosure protection,\n\
    \         -- sender authenticity, and\n         -- message integrity measures,\n\
    \   but the following privacy-relevant concerns are not addressed:\n         --\
    \ access control,\n         -- traffic flow security,\n         -- address list\
    \ accuracy,\n         -- routing control,\n         -- issues relating to the\
    \ serial reuse of PCs by multiple users,\n         -- assurance of message receipt\
    \ and non-deniability of receipt, and\n         -- automatic association of acknowledgments\
    \ with the messages to\n            which they refer\n   An important goal is\
    \ that privacy enhancement mechanisms impose a\n   minimum of burden on the users\
    \ they serve.  In particular, this goal\n   suggests eventual automation of the\
    \ key management mechanisms\n   supporting message encryption and authentication.\
    \  In order to\n   facilitate deployment and testing of pilot privacy enhancement\n\
    \   implementations in the near term, however, compatibility with out-\n   of-band\
    \ (e.g., manual) key distribution must also be supported.\n   A message's sender\
    \ will determine whether privacy enhancements are to\n   be performed on a particular\
    \ message.  This will necessitate\n   mechanisms by which a sender can determine\
    \ whether particular\n   recipients are equipped to process privacy-enhanced mail.\
    \  In a\n   general architecture, these mechanisms will be based on server\n \
    \  queries; thus, the query function could be integrated into a UA to\n   avoid\
    \ imposing burdens or inconvenience on electronic mail users.\n"
- title: 4  Processing of Messages
  contents:
  - '4  Processing of Messages

    '
- title: 4.1  Message Processing Overview
  contents:
  - "4.1  Message Processing Overview\n   This subsection provides a high-level overview\
    \ of the components and\n   processing steps involved in electronic mail privacy\
    \ enhancement\n   processing.  Subsequent subsections will define the procedures\
    \ in\n   more detail.\n   A two-level keying hierarchy is used to support privacy-enhanced\n\
    \   message transmission:\n     1.   Data Encrypting Keys (DEKs) are used for\
    \ encryption of message\n          text and for computation of message authentication\
    \ codes\n          (MACs).  DEKs are generated individually for each transmitted\n\
    \          message; no predistribution of DEKs is needed to support\n        \
    \  privacy-enhanced message transmission.\n     2.   Interchange Keys (IKs) are\
    \ used to encrypt DEKs for\n          transmission.  An IK may either be a single\
    \ symmetric\n          cryptographic key or, where asymmetric (public-key)\n \
    \         cryptography is used for DEK encryption, the composition of a\n    \
    \      public component used by an originator and a secret component\n       \
    \   used by a recipient.  Ordinarily, the same IK will be used for\n         \
    \ all messages sent between a given originator-recipient pair\n          over\
    \ a period of time.  Each transmitted message includes a\n          representation\
    \ of the DEK(s) used for message encryption\n          and/or authentication,\
    \ encrypted under an individual IK per\n          named recipient.  This representation\
    \ is accompanied by an\n          identifier (IK ID) to enable the recipient to\
    \ determine which\n          IK was used, and so to decrypt the representation\
    \ yielding the\n          DEK required for message text decryption and/or MAC\n\
    \          verification.\n   An encoding procedure is employed in order to represent\
    \ encrypted\n   message text in a universally transmissible form and to enable\n\
    \   messages encrypted on one type of system to be decrypted on a\n   different\
    \ type.  Four phases are involved in this process.  A\n   plaintext message is\
    \ accepted in local form, using the host's native\n   character set and line representation.\
    \  The local form is converted\n   to a canonical message text representation,\
    \ defined as equivalent to\n   the inter-SMTP representation of message text.\
    \  The canonical\n   representation is padded to an integral multiple of eight\
    \ octets, as\n   required by the encryption algorithm.  MAC computation is performed,\n\
    \   and (if disclosure protection is required), the padded canonical\n   representation\
    \ is encrypted.  The output of this step is encoded into\n   a printable form.\
    \  The printable form is composed of a restricted\n   character set which is chosen\
    \ to be universally representable across\n   sites, and which will not be disrupted\
    \ by processing within and\n   between MTS entities.\n   The output of the encoding\
    \ procedure is combined with a set of header\n   fields (to be defined in Section\
    \ 4.8) carrying cryptographic control\n   information.  The result is passed to\
    \ the electronic mail system to\n   be encapsulated as the text portion of a transmitted\
    \ message.\n   When a privacy-enhanced message is received, the cryptographic\n\
    \   control fields within its text portion provide the information\n   required\
    \ for the authorized recipient to perform MAC verification and\n   decryption\
    \ on the received message text.  First, the printable\n   encoding is converted\
    \ to a bitstring.  If the transmitted message was\n   encrypted, it is decrypted\
    \ into the canonical representation.  If the\n   message was not encrypted, decoding\
    \ from the printable form produces\n   the canonical representation directly.\
    \  The MAC is verified, and the\n   canonical representation is converted to the\
    \ recipient's local form,\n   which need not be the same as the sender's local\
    \ form.\n"
- title: 4.2  Encryption Algorithms and Modes
  contents:
  - "4.2  Encryption Algorithms and Modes\n   For purposes of this RFC, the Block\
    \ Cipher Algorithm DEA-1, defined\n   in ISO draft international standard DIS\
    \ 8227 [1] shall be used for\n   encryption of message text and for computation\
    \ of authentication\n   codes on messages.  The DEA-1 is equivalent to the Data\
    \ Encryption\n   Standard (DES), as defined in FIPS PUB 46 [2].  When used for\
    \ these\n   purposes, the DEA-1 shall be used in the Cipher Block Chaining (CBC)\n\
    \   mode, as defined in ISO DIS 8372 [3].  The CBC mode definition in DIS\n  \
    \ 8372 is equivalent to that provided in FIPS PUB 81 [4].  A unique\n   initializing\
    \ vector (IV) will be generated for and transmitted with\n   each encrypted electronic\
    \ mail message.\n   An algorithm other than DEA-1 may be employed, provided that\
    \ it\n   satisfies the following requirements:\n       1.  it must be a 64-bit\
    \ block cipher, enciphering and deciphering\n           in 8 octet blocks\n  \
    \     2.  it is usable in the ECB and CBC modes defined in DIS8372\n       3.\
    \  it is able to be keyed using the procedures and parameters\n           defined\
    \ in this RFC\n       4.  it is appropriate for MAC computation\n       5.  cryptographic\
    \ key field lengths are limited to 16 octets\n           in length\n   Certain\
    \ operations require that one key be encrypted under another\n   key (interchange\
    \ key) for purposes of transmission.  For purposes of\n   this RFC, such encryption\
    \ will be performed using DEA-1 in Electronic\n   Codebook (ECB) mode.  An optional\
    \ facility is available to an\n   interchange key provider to indicate that an\
    \ associated key is to be\n   used for encryption in another mode (e.g., the Encrypt-Decrypt-\n\
    \   Encrypt (EDE) mode used for key encryption and decryption with pairs\n   of\
    \ 64-bit keys, as described [5] by ASC X3T1).\n   Future support of public key\
    \ algorithms for key encryption is under\n   consideration, and it is intended\
    \ that the procedures defined in this\n   RFC be appropriate to allow such usage.\
    \  Support of key encryption\n   modes other than ECB is optional for implementations,\
    \ however.\n   Therefore, in support of universal interoperability, interchange\
    \ key\n   providers should not specify other modes in the absence of a priori\n\
    \   information indicating that recipients are equipped to perform key\n   encryption\
    \ in other modes.\n"
- title: 4.3  Canonical Encoding
  contents:
  - "4.3  Canonical Encoding\n   Any encryption scheme must be compatible with the\
    \ transparency\n   constraints of its underlying electronic mail facilities. \
    \ These\n   constraints are generally established based on expected user\n   requirements\
    \ and on the characteristics of anticipated endpoint\n   transport facilities.\
    \  SMTP, designed primarily for interpersonal\n   messages and anticipating systems\
    \ and transport media which may be\n   restricted to a 7-bit character set, can\
    \ transmit any 7-bit\n   characters (but not arbitrary 8-bit binary data) in message\
    \ text.\n   SMTP introduces other transparency constraints related to line\n \
    \  lengths and message delimiters.  Message text may not contain the\n   string\
    \ \"<CR><LF>.<CR><LF>\" in sequence before the end of a message,\n   and must\
    \ contain the string \"<CR><LF>\" at least every 1000\n   characters.  Another\
    \ important SMTP transparency issue must be noted.\n   Although SMTP specifies\
    \ a standard representation for line delimiters\n   (ASCII <CR><LF>), numerous\
    \ systems use a different native\n   representation to delimit lines.  For example,\
    \ the <CR><LF> sequences\n   delimiting lines in mail inbound to UNIX(tm) systems\
    \ are transformed\n   to single <LF>s as mail is written into local mailbox files.\
    \  Lines\n   in mail incoming to record-oriented systems (such as VAX VMS) may\
    \ be\n   converted to appropriate records by the destination SMTP [6] server.\n\
    \   As a result, if the encryption process generated <CR>s or <LF>s,\n   those\
    \ characters might not be accessible to a recipient UA program at\n   a destination\
    \ using different line delimiting conventions.  It is\n   also possible that conversion\
    \ between tabs and spaces may be\n   performed in the course of mapping between\
    \ inter-SMTP and local\n   format; this is a matter of local option.  If such\
    \ transformations\n   changed the form of transmitted ciphertext, decryption would\
    \ fail to\n   regenerate the transmitted plaintext, and a transmitted MAC would\n\
    \   fail to compare with that computed at the destination.\n   The conversion\
    \ performed by an SMTP server at a system with EBCDIC as\n   a native character\
    \ set has even more severe impact, since the\n   conversion from EBCDIC into ASCII\
    \ is an information-losing\n   transformation.  In principle, the transformation\
    \ function mapping\n   between inter-SMTP canonical ASCII message representation\
    \ and local\n   format could be moved from the SMTP server up to the UA, given\
    \ a\n   means to direct that the SMTP server should no longer perform that\n \
    \  transformation.  This approach has the disadvantage that it would\n   imply\
    \ internal file (e.g., mailbox) formats which would be\n   incompatible with the\
    \ systems on which they reside, an untenable\n   prospect.  Further, it would\
    \ require modification to SMTP servers, as\n   mail would be passed to SMTP in\
    \ a different representation than it is\n   passed at present.\n   Our approach\
    \ to this problem selects a canonical character set,\n   uniformly representable\
    \ across privacy-enhanced UAs regardless of\n   their systems' native character\
    \ sets, to transport encrypted mail\n   text (but not electronic mail transport\
    \ headers!) between endpoints.\n   In this approach, an outbound privacy-enhanced\
    \ message is transformed\n   between four forms, in sequence:\n     1.   (Local_Form)\
    \ The message text is created (e.g., via an editor)\n          in the system's\
    \ native character set, with lines delimited in\n          accordance with local\
    \ convention.\n     2.   (Canonicalize) The message text is converted to the universal\n\
    \          canonical form, equivalent to the inter-SMTP representation as\n  \
    \        defined in RFC822 [7] (ASCII character set, <CR><LF> line\n         \
    \ delimiters).  (The processing required to perform this\n          conversion\
    \ is relatively small, at least on systems whose\n          native character set\
    \ is ASCII.)\n     3.   (Encipher/Authenticate) A padded version of the canonical\n\
    \          plaintext representation is created by appending zero-valued\n    \
    \      octets to the end of the representation until the length is an\n      \
    \    integral multiple of 8 octets, as is required to perform\n          encryption\
    \ in the DEA-1 CBC mode.  No padding is applied if\n          the canonical plaintext\
    \ representation's length is already a\n          multiple of 8 octets.  This\
    \ padded representation is used as\n          the input to the encryption function\
    \ and to the MAC\n          computation function.\n     4.   (Encode to Printable\
    \ Form) The bits resulting from the\n          encryption operation are encoded\
    \ into characters which are\n          universally representable at all sites,\
    \ though not necessarily\n          with the same bit patterns (e.g., although\
    \ the character \"E\"\n          is represented in an ASCII-based system as hexadecimal\
    \ 45 and\n          as hexadecimal C5 in an EBCDIC-based system, the local\n \
    \         significance of the two representations is equivalent).  Use\n     \
    \     of a 64-character subset of International Alphabet IA5 is\n          proposed,\
    \ enabling 6 bits to be represented per printable\n          character.  (The\
    \ proposed subset of characters is represented\n          identically in IA5 and\
    \ ASCII.) Two additional characters, \"=\"\n          and \"*\", are used to signify\
    \ special processing functions.\n          The encoding function's output is delimited\
    \ into text lines\n          (using local conventions), with each line containing\
    \ 64\n          printable characters.  The encoding process is performed as\n\
    \          follows, transforming strings of 3 arbitrary (8-bit)\n          characters\
    \ to strings of 4 encoded characters:\n          4a.  Proceeding from left to\
    \ right across the input characters\n               (considered as a contiguous\
    \ bitstring), each group of 6\n               bits is used as an index into an\
    \ array of 64 printable\n               characters; the character referenced by\
    \ the index is\n               placed in the output string.  These characters,\n\
    \               identified in Table 1, are selected so as to be\n            \
    \   universally representable, and the set excludes\n               characters\
    \ with particular significance to SMTP e.g.,\n               \".\", \"<CR>\",\
    \ \"<LF>\").\n          4b.  If fewer than 3 input characters are available in\
    \ a final\n               quantum, zero bits are added (on the right) to form\
    \ an\n               integral number of 6-bit groups.  Output character\n    \
    \           positions which are not required to represent actual\n           \
    \    input data are set to a 65th reserved, universally\n               representable\
    \ character (\"=\").  Use of a reserved\n               character for padding\
    \ allows compensatory processing to\n               be performed by a recipient,\
    \ allowing the decoded message\n               text's length to be precisely the\
    \ same as the input\n               message's length.  A final 3-octet input quantum\
    \ will be\n               represented as a 4 octet encoding with no terminal \"\
    =\", a\n               2-octet input quantum will be represented as 3 octets\n\
    \               followed by one terminal \"=\", and a 1-octet input quantum\n\
    \               will be represented as 2 octets followed by two\n            \
    \   occurrences of \"=\".\n   A sender may exclude one or more portions of a message\
    \ from\n   encryption/authentication processing.  Explicit action is required\
    \ to\n   exclude a portion of a message from such processing; by default,\n  \
    \ encryption/authentication is applied to the entirety of message text.\n   The\
    \ user-level delimiter which specifies such exclusion is a local\n   matter, and\
    \ hence may vary between sender and recipient, but all\n   systems should provide\
    \ a means for unambiguous  identification of\n   areas excluded from encryption/authentication\
    \ processing.  An\n   excluded area is represented in the inter-SMTP transmission\
    \ form\n   (universal across communicating systems) by bracketing with the\n \
    \  reserved delimiter \"*\".  Cryptographic state is preserved\n   transparently\
    \ across an excluded area and continued after the end of\n   the excluded area.\
    \  A printable encoding quantum (per step 4b) is\n   completed before the delimiter\
    \ \"*\" is output to initiate or terminate\n   the representation of an excluded\
    \ block.  Note that the\n   canonicalizing transformation (step 2 above) and the\
    \ encoding to\n   printable form (step 4 above) are applied to all portions of\
    \ message\n   text, even those excluded from encryption and authentication.\n\
    \   In summary, the outbound message is subjected to the following\n   composition\
    \ of transformations:\n     Transmit_Form = Encode(Encipher(Canonicalize(Local_Form)))\n\
    \   The inverse transformations are performed, in reverse order, to\n   process\
    \ inbound privacy-enhanced mail:\n     Local_Form = DeCanonicalize(Decipher(Decode(Transmit_Form)))\n\
    \   Note that the local form and the functions to transform messages to\n   and\
    \ from canonical form may vary between the sender and recipient\n   systems without\
    \ loss of information.\n        Value Encoding Value Encoding Value Encoding Value\
    \ Encoding\n        0     A        17    R        34    i        51    z\n   \
    \     1     B        18    S        35    j        52    0\n        2     C  \
    \      19    T        36    k        53    1\n        3     D        20    U \
    \       37    l        54    2\n        4     E        21    V        38    m\
    \        55    3\n        5     F        22    W        39    n        56    4\n\
    \        6     G        23    X        40    o        57    5\n        7     H\
    \        24    Y        41    p        58    6\n        8     I        25    Z\
    \        42    q        59    7\n        9     J        26    a        43    r\
    \        60    8\n        10    K        27    b        44    s        61    9\n\
    \        11    L        28    c        45    t        62    +\n        12    M\
    \        29    d        46    u        63    /\n        13    N        30    e\
    \        47    v\n        14    O        31    f        48    w        (pad) =\n\
    \        15    P        32    g        49    x\n        16    Q        33    h\
    \        50    y        (1)   *\n        (1) The character \"*\" is used to delimit\
    \ portions of an\n        encoded message to which encryption/authentication\n\
    \        processing has not been applied.\n                         Printable\
    \ Encoding Characters\n                                    Table 1\n"
- title: 4.4  Encapsulation Mechanism
  contents:
  - "4.4  Encapsulation Mechanism\n   Encapsulation of privacy-enhanced messages within\
    \ an enclosing layer\n   of headers interpreted by the electronic mail transport\
    \ system offers\n   a number of advantages in comparison to a flat approach in\
    \ which\n   certain fields within a single header are encrypted and/or carry\n\
    \   cryptographic control information.  Encapsulation provides generality\n  \
    \ and segregates fields with user-to-user significance from those\n   transformed\
    \ in transit.  As far as the MTS is concerned, information\n   incorporated into\
    \ cryptographic authentication or encryption\n   processing will reside in a message's\
    \ text portion, not its header\n   portion.\n   The encapsulation mechanism to\
    \ be used for privacy-enhanced mail is\n   derived from that described in RFC934\
    \ [8] which is, in turn, based on\n   precedents in the processing of message\
    \ digests in the Internet\n   community.  To prepare a user message for encrypted\
    \ or authenticated\n   transmission, it will be transformed into the representation\
    \ shown in\n   Figure 1.  Note that, while encryption and/or authentication\n\
    \   processing of transmitted mail may depend on information contained in\n  \
    \ the enclosing header (e.g., \"To:\"), all fields inserted in the course\n  \
    \ of encryption/authentication processing are placed in the\n   encapsulated header.\
    \  This facilitates compatibility with mail\n   handling programs which accept\
    \ only text, not header fields, from\n   input files or from other programs. \
    \ Further, privacy enhancement\n   processing can be applied recursively.\n  \
    \ Sensitive data should be protected by incorporating the data within\n   the\
    \ encapsulated text rather than by applying measures selectively to\n   fields\
    \ in the enclosing header.  Examples of potentially sensitive\n   header information\
    \ may include fields such as \"Subject:\", with\n   contents which are significant\
    \ on an end-to-end, inter-user basis.\n   The (possibly empty) set of headers\
    \ to which protection is to be\n   applied is a user option.  If an authenticated\
    \ version of header\n   information is desired, that data can be replicated within\
    \ the\n   encapsulated text portion in addition to its inclusion in the\n   enclosing\
    \ header.  If a user wishes disclosure protection for header\n   fields, they\
    \ must occur only in the encapsulated text and not in the\n   enclosing or encapsulated\
    \ header.  If disclosure protection is\n   desired for the \"Subject:\" field,\
    \ it is recommended that the\n   enclosing header contain a \"Subject:\" field\
    \ indicating that\n   \"Encrypted Mail Follows\".\n   A specific point regarding\
    \ the integration of privacy-enhanced mail\n   facilities with the message encapsulation\
    \ mechanism is worthy of\n   note.  The subset of IA5 selected for transmission\
    \ encoding\n   intentionally excludes the character \"-\", so encapsulated text\
    \ can be\n   distinguished unambiguously from a message's closing encapsulation\n\
    \   boundary (Post-EB) without recourse to character stuffing.\n"
- title: 4.5  Processing for Authentication Without Confidentiality
  contents:
  - "4.5  Processing for Authentication Without Confidentiality\n   When a message\
    \ is to be authenticated without confidentiality\n   service, a DEK is generated\
    \ [9] for use in MAC computation, and a MAC\n   is computed using that DEK.  For\
    \ each individually identified\n   recipient, an IK is selected and identified\
    \ with an \"X-IK-ID:\" field.\n   Each \"X-IK-ID:\" field is followed by an \"\
    X-Key-Info:\" field which\n   transfers the key under which MAC computation was\
    \ performed,\n   encrypted under the IK identified by the preceding \"X-IK-ID:\"\
    \ field,\n   along with a representation of the MAC encrypted under the same IK.\n\
    \   The encapsulated text portion following the encapsulated header is\n   canonically\
    \ encoded, and coded into printable characters for\n   transmission, but not encrypted.\n\
    \   Enclosing Header Portion\n          (Contains header fields per RFC-822)\n\
    \   Blank Line\n          (Separates Enclosing Header from Encapsulated Message)\n\
    \   Encapsulated Message\n       Pre-Encapsulation Boundary (Pre-EB)\n       \
    \    -----PRIVACY-ENHANCED MESSAGE BOUNDARY-----\n       Encapsulated Header Portion\n\
    \           (Contains encryption control fields inserted in plaintext.\n     \
    \      Examples include \"X-IV:\", \"X-IK-ID:\", \"X-Key-Info:\",\n          \
    \ and \"X-Pad-Count:\".  Note that, although these control\n           fields\
    \ have line-oriented representations similar to\n           RFC-822 header fields,\
    \ the set of fields valid in this\n           context is disjoint from those used\
    \ in RFC-822 processing.)\n       Blank Line\n           (Separates Encapsulated\
    \ Header from subsequent encoded\n           Encapsulated Text Portion)\n    \
    \   Encapsulated Text Portion\n           (Contains message data encoded as specified\
    \ in Section 4.3;\n           may incorporate protected copies of \"Subject:\"\
    , etc.)\n       Post-Encapsulation Boundary (Post-EB)\n           -----PRIVACY-ENHANCED\
    \ MESSAGE BOUNDARY-----\n                           Message Encapsulation\n  \
    \                               Figure 1\n"
- title: 4.6  Processing for Authentication and Confidentiality
  contents:
  - "4.6  Processing for Authentication and Confidentiality\n   When a message is\
    \ to be authenticated with confidentiality service, a\n   DEK is generated for\
    \ use in MAC computation and a variant of the DEK\n   is formed for use in message\
    \ encryption.  For each individually\n   identified recipient, an IK is selected\
    \ and identified with an \"X-\n   IK-ID:\" field.  Each \"X-IK-ID:\" field is\
    \ followed by an \"X-Key-Info:\"\n   field, which transfers the DEK and computed\
    \ MAC, each encrypted under\n   the IK identified in the preceding \"X-IK-ID:\"\
    \ field.  The\n   encapsulated text portion following the encapsulated header\
    \ is\n   canonically encoded, encrypted, and coded into printable characters\n\
    \   for transmission.\n"
- title: 4.7  Mail for Mailing Lists
  contents:
  - "4.7  Mail for Mailing Lists\n   When mail is addressed to mailing lists, two\
    \ different methods of\n   processing can be applicable: the IK-per-list method\
    \ and the IK-per-\n   recipient method.  The choice depends on the information\
    \ available to\n   the sender and on the sender's preference.\n   If a message's\
    \ sender addresses a message to a list name or alias,\n   use of an IK associated\
    \ with that name or alias as a entity (IK-per-\n   list), rather than resolution\
    \ of the name or alias to its constituent\n   destinations, is implied.  Such\
    \ an IK must, therefore, be available\n   to all list members.  This alternative\
    \ will be the normal case for\n   messages sent via remote exploder sites, as\
    \ a sender to such lists\n   may not be cognizant of the set of individual recipients.\n\
    \   Unfortunately, it implies an undesirable level of exposure for the\n   shared\
    \ IK, and makes its revocation difficult.  Moreover, use of the\n   IK-per-list\
    \ method allows any holder of the list's IK to masquerade\n   as another sender\
    \ to the list for authentication purposes.\n   If, in contrast, a message's sender\
    \ is equipped to expand the\n   destination mailing list into its individual constituents\
    \ and elects\n   to do so (IK-per-recipient), the message's DEK and MAC will be\n\
    \   encrypted under each per-recipient IK and all such encrypted\n   representations\
    \ will be incorporated into the transmitted message.\n   (Note that per-recipient\
    \ encryption is required only for the\n   relatively small DEK and MAC quantities\
    \ carried in the X-Key-Info\n   field, not for the message text which is, in general,\
    \ much larger.)\n   Although more IKs are involved in processing under the IK-per-\n\
    \   recipient method, the pairwise IKs can be individually revoked and\n   possession\
    \ of one IK does not enable a successful masquerade of\n   another user on the\
    \ list.\n"
- title: 4.8  Summary of Added Header and Control Fields
  contents:
  - "4.8  Summary of Added Header and Control Fields\n   This section summarizes the\
    \ syntax and semantics of the new header\n   and control fields to be added to\
    \ messages in the course of privacy\n   enhancement processing, indicating whether\
    \ a particular field occurs\n   in a message's encapsulated header portion or\
    \ its encapsulated text\n   portion.  Figure 2 shows the appearance of a small\
    \ example\n   encapsulated message using these fields.  In all cases, hexadecimal\n\
    \   quantities are represented as contiguous strings of digits, where\n   each\
    \ digit is represented by a character from the ranges \"0\"-\"9\" or\n   upper\
    \ case \"A\"-\"F\".  Unless otherwise specified, all arguments are to\n   be processed\
    \ in a case-sensitive fashion.\n   Although the encapsulated header fields resemble\
    \ RFC-822 header\n   fields, they are a disjoint set and will not in general be\
    \ processed\n   by the same parser which operates on enclosing header fields.\
    \  The\n   complexity of lexical analysis needed and appropriate for\n   encapsulated\
    \ header field processing is significantly less than that\n   appropriate to RFC-822\
    \ header processing.  For example, many\n   characters with special significance\
    \ to RFC-822 at the syntactic\n   level have no such significance within encapsulated\
    \ header fields.\n   The \"X-IK-ID\" and \"X-Key-Info\" fields are the only encapsulated\n\
    \   header fields with lengths which can vary beyond a size conveniently\n   printable\
    \ on a line.  Whitespace may be used between the subfields of\n   these fields\
    \ to fold them in the manner of RFC-822; such whitespace\n   is not to be interpreted\
    \ as a part of a subfield.\n      -----PRIVACY-ENHANCED MESSAGE BOUNDARY-----\n\
    \      X-Proc-Type: 1,E\n      X-Pad-Count: 1\n      X-IV: F8143EDE5960C597\n\
    \      X-IK-ID: JL:3:ECB\n      X-Key-Info: 9FD3AAD2F2691B9A,B70665BB9BF7CBCD\n\
    \      X-IK-ID: JL:1:ECB\n      X-Key-Info: 161A3F75DC82EF26,E2EF532C65CBCFF7\n\
    \      LLrHB0eJzyhP+/fSStdW8okeEnv47jxe7SJ/iN72ohNcUk2jHEUSoH1nvNSIWL9M\n    \
    \  8tEjmF/zxB+bATMtPjCUWbz8Lr9wloXIkjHUlBLpvXR0UrUzYbkNpk0agV2IzUpk\n      J6UiRRGcDSvzrsoK+oNvqu6z7Xs5Xfz5rDqUcMlK1Z6720dcBWGGsDLpTpSCnpot\n\
    \      dXd/H5LMDWnonNvPCwQUHt==\n      -----PRIVACY-ENHANCED MESSAGE BOUNDARY-----\n\
    \                         Example Encapsulated Message\n                     \
    \              Figure 2\n     X-IK-ID:      This field is placed in the encapsulated\
    \ header\n                   portion of a message to identify the Interchange\
    \ Key\n                   used for encryption of an associated Data Encrypting\n\
    \                   Key or keys (used for message text encryption and/or\n   \
    \                MAC computation).  This field is used for messages\n        \
    \           authenticated without confidentiality service and for\n          \
    \         messages authenticated with confidentiality service.\n             \
    \      The field contains (in order) an Issuing Authority\n                  \
    \ subfield and an IK Qualifier subfield, and may also\n                   contain\
    \ an optional IK Use Indicator subfield.  The\n                   subfields are\
    \ delimited by the colon character (\":\"),\n                   optionally followed\
    \ by whitespace.  Section 5.1.2,\n                   Interchange Keys, discusses\
    \ the semantics of these\n                   subfields and specifies the alphabet\
    \ from which they\n                   are chosen.  Note that multiple X-IK-ID\
    \ fields may\n                   occur within a single encapsulated header.  Each\
    \ X-\n                   IK-ID field is associated with an immediately\n     \
    \              subsequent X-Key-Info field.\n     X-IV:         This field is\
    \ placed in the encapsulated header\n                   portion of a message to\
    \ carry the Initializing Vector\n                   used for message encryption.\
    \  It is used only for\n                   messages where confidentiality service\
    \ is applied.\n                   Following the field name, and one or more delimiting\n\
    \                   whitespace characters, a 64-bit Initializing Vector\n    \
    \               is represented as a contiguous string of 16\n                \
    \   hexadecimal digits.\n     X-Key-Info:   This field is placed in a message's\
    \ encapsulated\n                   header portion to transfer two items: a DEK\
    \ and a\n                   MAC.  Both items are encrypted under the IK\n    \
    \               identified by a preceding X-IK-ID field; they are\n          \
    \         represented as two strings of contiguous hexadecimal\n             \
    \      digits, separated by a comma.  For DEA-1, the DEK\n                   representation\
    \ will be 16 hexadecimal digits\n                   (corresponding to a 64-bit\
    \ key); this subfield can be\n                   extended to 32 hexadecimal digits\
    \ (corresponding to a\n                   128-bit key) if required to support\
    \ other algorithms.\n                   The MAC is a 64-bit quantity, represented\
    \ as 16\n                   hexadecimal digits.  The MAC is computed under an\n\
    \                   unmodified version of the DEK.  Message encryption is\n  \
    \                 performed using a variant of the DEK, formed by\n          \
    \         modulo-2 addition of the hexadecimal quantity\n                   F0F0F0F0F0F0F0F0\
    \ to the DEK.\n     X-Pad-Count:  This field is placed in the encapsulated header\n\
    \                   portion of a message to indicate the number of zero-\n   \
    \                valued octets which were added to pad the input\n           \
    \        stream to the encryption function to an integral\n                  \
    \ multiple of eight octets, as required by the DEA-1\n                   CBC encryption\
    \ mode.  A decimal number in the range\n                   0-7 follows the field\
    \ name, and one or more\n                   delimiting whitespace characters.\
    \  Inclusion of this\n                   field allows disambiguation between terminal\
    \ zero-\n                   valued octets in message text (admittedly, a\n   \
    \                relatively unlikely prospect) and zero-valued octets\n      \
    \             inserted for padding purposes.\n     X-Proc-Type:  This field is\
    \ placed in the encapsulated header\n                   portion of a message to\
    \ identify the type of\n                   processing performed on the transmitted\
    \ message.  The\n                   first subfield is a decimal version number,\
    \ which\n                   will be used if future developments make it necessary\n\
    \                   to redefine the interpretation of encapsulated header\n  \
    \                 fields.  At present, this field may assume only the\n      \
    \             value \"1\".  The second subfield, delimited by a\n            \
    \       comma, assumes one of two single-character alphabetic\n              \
    \     values: \"A\" and \"E\", to signify, respectively, (1)\n               \
    \    authentication processing only and (2) the\n                   combination\
    \ of authentication and confidentiality\n                   service through encryption.\n"
- title: 5 Key Management
  contents:
  - '5 Key Management

    '
- title: 5.1 Types of Keys
  contents:
  - '5.1 Types of Keys

    '
- title: 5.1.1 Data Encrypting Keys (DEKs)
  contents:
  - "5.1.1 Data Encrypting Keys (DEKs)\n   Data Encrypting Keys (DEKs) are used for\
    \ encryption of message text\n   and for computation of message authentication\
    \ codes (MACs).  It is\n   strongly recommended that DEKs be generated and used\
    \ on a one-time\n   basis.  A transmitted message will incorporate a representation\
    \ of\n   the DEK encrypted under an interchange key (IK) known to the\n   authorized\
    \ recipient.\n   DEK generation can be performed either centrally by key distribution\n\
    \   centers (KDCs) or by endpoint systems.  One advantage of centralized\n   KDC-based\
    \ generation is that DEKs can be returned to endpoints\n   already encrypted under\
    \ the IKs of message recipients.  This reduces\n   IK exposure and simplifies\
    \ endpoint key management requirements.\n   Further, dedicated KDC systems may\
    \ be able to implement better\n   algorithms for random key generation than can\
    \ be supported in\n   endpoint systems.  On the other hand, decentralization allows\n\
    \   endpoints to be relatively self-sufficient, reducing the level of\n   trust\
    \ which must be placed in components other than a message's\n   originator and\
    \ recipient.  Moreover, decentralized DEK generation by\n   endpoints reduces\
    \ the frequency with which senders must make real-\n   time queries of (potentially\
    \ unique) servers in order to send mail,\n   enhancing communications availability.\n"
- title: 5.1.2 Interchange Keys (IKs)
  contents:
  - "5.1.2 Interchange Keys (IKs)\n   Interchange Keys (IKs) are used to encrypt Data\
    \ Encrypting Keys.  In\n   general, the granularity of IK usage is at the pairwise\
    \ per-user\n   level except for mail sent to address lists comprising multiple\n\
    \   users.  In order for two principals to engage in a useful exchange of\n  \
    \ privacy-enhanced electronic mail using conventional cryptography,\n   they must\
    \ first share a common interchange key.  When asymmetric\n   cryptography is used,\
    \ an originator and recipient must possess\n   appropriate public and secret components\
    \ which, in composition,\n   constitute an interchange key.\n   The means by which\
    \ interchange keys are provided to appropriate\n   parties are outside the scope\
    \ of this RFC, but may be centralized\n   (e.g., via key management servers) or\
    \ decentralized (e.g., via direct\n   distribution among users).  In any case,\
    \ a given IK is associated\n   with a responsible Issuing Authority (IA).  When\
    \ an IA generates and\n   distributes an IK, associated control information must\
    \ be provided to\n   direct how that IK is to be used.  In order to select the\
    \ appropriate\n   IK to use in message encryption, a sender must retain a\n  \
    \ correspondence between IKs and the recipients with which they are\n   associated.\
    \  Expiration date information must also be retained, in\n   order that cached\
    \ entries may be invalidated and replaced as\n   appropriate.\n   When a privacy-enhanced\
    \ message is transmitted, an indication of the\n   IK (or IKs, in the case of\
    \ a message sent to multiple recipients)\n   used for DEK encryption must be included.\
    \  To this end, the IK ID\n   construct is defined to provide the following data:\n\
    \        1.   Identification of the relevant Issuing Authority (IA\n         \
    \    subfield)\n        2.   Qualifier string to distinguish the particular IK\
    \ within\n             the set of IKs distributed by the IA (IK qualifier\n  \
    \           subfield)\n        3.   (Optional) Indicator of IK usage mode (IK\
    \ use indicator\n             subfield)\n   The subfields of an IK ID are delimited\
    \ with the colon character\n   (\":\").  The IA and IK qualifier subfields are\
    \ generated from a\n   restricted character set, as prescribed by the following\
    \ BNF (using\n   notation as defined in RFC-822, sections 2 and 3.3):\n   IAorIKQual\
    \   :=      1*ia-char\n   ia-char      :=      DIGIT / ALPHA / \"'\" / \"+\" /\
    \ \"(\" / \")\" /\n                        \",\" / \".\" / \"/\" / \"=\" / \"\
    ?\" / \"-\" / \"@\" /\n                        \"%\" / \"!\" / '\"' / \"_\" /\
    \ \"<\" / \">\"\n   The IK use indicator subfield assumes a value from a small\
    \ set of\n   reserved strings, described later in this section.\n   IA identifiers\
    \ must be assigned in a manner which assures uniqueness.\n   This can be done\
    \ on a centralized or hierarchic basis.\n   The IK qualifier string format may\
    \ vary among different IAs, but must\n   satisfy certain functional constraints.\
    \  An IA's IK qualifiers must\n   be sufficient to distinguish among the set of\
    \ IKs issued by that IA.\n   Since a message may be sent with multiple IK IDs,\
    \ corresponding to\n   multiple intended recipients, each recipient must be able\
    \ to\n   determine which IK is intended for it.  Moreover, if no corresponding\n\
    \   IK is available in the recipient's database when a message arrives,\n   the\
    \ recipient must be able to determine which IK to request and to\n   identify\
    \ that IK's associated IA.  Note that different IKs may be\n   used for different\
    \ messages between a pair of communicants.\n   Consider, for example, one message\
    \ sent from A to B and another\n   message sent (using the IK-per-list method)\
    \ from A to a mailing list\n   of which B is a member.  The first message would\
    \ use an IK shared\n   between A and B, but the second would use an IK shared\
    \ among list\n   members.\n   While use of a monotonically increasing number as\
    \ an IK qualifier is\n   sufficient to distinguish among the set of IKs distributed\
    \ by an IA,\n   it offers no facility for a recipient lacking a matching IK to\n\
    \   determine the appropriate IK to request.  This suggests that sender\n   and\
    \ recipient name information should be incorporated into an IK\n   qualifier,\
    \ along with a number to distinguish among multiple IKs used\n   between a sender/recipient\
    \ pair.  In order to support universal\n   interoperability, it is necessary to\
    \ assume a universal form for the\n   naming information.  General definition\
    \ of such a form requires\n   further study; issues and possible approaches will\
    \ be noted in\n   Section 6.  As an interim measure, the following IK qualifier\
    \ format\n   is suggested:\n              <sender-name>/<recipient-name>/<numid>\n\
    \   where <sender-name> and <recipient-name> are in the following form:\n    \
    \          <user>@<domain-qualified-host>\n   For the case of installations which\
    \ transform local host names before\n   transmission into the broader Internet,\
    \ it is strongly recommended\n   that the host name as presented to the Internet\
    \ be employed.  The\n   <numid> is a contiguous string of decimal digits.\n  \
    \ The IK use indicator subfield is an optional facility, provided to\n   identify\
    \ the encryption mode in which the IK is to be used.\n   Currently, this subfield\
    \ may assume the following reserved string\n   values: \"ECB\" and \"EDE\"; the\
    \ default value is ECB.\n   An example IK ID adhering to this recommendation is\
    \ as follows:\n          ptf-kmc:linn@CCY.BBN.COM/privacy-tf@C.ISI.EDU/2:ECB\n\
    \   This IK ID would indicate that IA \"ptf-kmc\" has issued an IK for use\n \
    \  on messages sent from \"linn@CCY.BBN.COM\" to \"privacy-tf@C.ISI.EDU\",\n \
    \  that the IA has associated number 2 with that IK, and that the IK is\n   to\
    \ be used in ECB mode.\n   IKs will remain valid for a period which will be longer\
    \ than a single\n   message and will be identified by an expiration time distributed\n\
    \   along with the IK; IK cryptoperiod is dictated in part by a tradeoff\n   between\
    \ key management overhead and revocation responsiveness.  It\n   would be undesirable\
    \ to delete an IK permanently before receipt of a\n   message encrypted using\
    \ that IK, as this would render the message\n   permanently undecipherable.  Access\
    \ to an expired IK would be needed,\n   for example, to process mail received\
    \ by a user (or system) which had\n   been inactive for an extended period of\
    \ time.  In order to enable\n   very old IKs to be deleted, a message's recipient\
    \ desiring encrypted\n   local long term storage should transform the DEK used\
    \ for message\n   text encryption via re-encryption under a locally maintained\
    \ IK,\n   rather than relying on IA maintenance of old IKs for indefinite\n  \
    \ periods.\n"
- title: 6 User Naming
  contents:
  - "6 User Naming\n   Unique naming of electronic mail users, as is needed in order\
    \ to\n   select corresponding keys correctly, is an important topic and one\n\
    \   requiring significant study.  A logical association exists between\n   key\
    \ distribution and name/directory server functions; their\n   relationship is\
    \ a topic deserving further consideration.  These\n   issues have not been fully\
    \ resolved at this writing.  The interim\n   architecture relies on association\
    \ of IKs with user names represented\n   in a universal form, which has the following\
    \ properties:\n          1.   The universal form must be specifiable by an IA\
    \ as it\n               distributes IKs and known to a UA as it processes\n  \
    \             received IKs and IK IDs.  If a UA or IA uses addresses in\n    \
    \           a local form which is different from the universal form,\n       \
    \        it must be able to perform an unambiguous mapping from\n            \
    \   the universal form into the local representation.\n          2.   The universal\
    \ form, when processed by a sender UA, must\n               have a recognizable\
    \ correspondence with the form of a\n               recipient address as specified\
    \ by a user (perhaps\n               following local transformation from an alias\
    \ into a\n               universal form)\n   It is difficult to ensure these properties\
    \ throughout the Internet.\n   For example, an MTS which transforms address representations\
    \ between\n   the local form used within an organization and the global form used\n\
    \   for Internet mail transmission may cause property 2 to be violated.\n   The\
    \ use of flat (non-hierarchic) electronic mail user identifiers,\n   which are\
    \ unrelated to the hosts on which the users reside, appears\n   useful.  Personal\
    \ characteristics, like social security numbers,\n   might be considered.  Individually-selected\
    \ identifiers could be\n   registered with a central authority, but a means to\
    \ resolve name\n   conflicts would be necessary.\n   A point of particular note\
    \ is the desire to accommodate multiple\n   names for a single individual, in\
    \ order to represent and allow\n   delegation of various roles in which that individual\
    \ may act.  A\n   naming mechanism that binds user roles to keys is needed.  Bindings\n\
    \   cannot be immutable since roles sometimes change (e.g., the\n   comptroller\
    \ of a corporation is fired).\n   It may be appropriate to examine the prospect\
    \ of extending the Domain\n   Name System and its associated name servers to resolve\
    \ user names to\n   unique user IDs.  An additional issue arises with regard to\
    \ mailing\n   list support: name servers do not currently perform (potentially\n\
    \   recursive) expansion of lists into users.  ISO and CSNet are working\n   on\
    \ user-level directory service mechanisms, which may also bear\n   consideration.\n"
- title: 7  Example User Interface and Implementation
  contents:
  - "7  Example User Interface and Implementation\n   In order to place the mechanisms\
    \ and approaches discussed in this RFC\n   into context, this section presents\
    \ an overview of a prototype\n   implementation.  This implementation is a standalone\
    \ program [10]\n   which is invoked by a user, and lies above the existing UA\
    \ sublayer.\n   This form of integration offers the advantage that the program\
    \ can be\n   used in conjunction with a range of UA programs, rather than being\n\
    \   compatible only with a particular UA.  When a user wishes to apply\n   privacy\
    \ enhancements to an outgoing message, the user prepares the\n   message's text\
    \ and invokes the standalone program (interacting with\n   the program in order\
    \ to provide address information and other data\n   required to perform privacy\
    \ enhancement processing), which in turn\n   generates output suitable for transmission\
    \ via the UA.  When a user\n   receives a privacy-enhanced message, the UA delivers\
    \ the message in\n   encrypted form, suitable for decryption and associated processing\
    \ by\n   the standalone program.\n   In this prototype implementation, a cache\
    \ of IKs is maintained in a\n   local file, with entries managed manually based\
    \ on pairwise\n   agreements between originators and recipients.  This cache is,\n\
    \   effectively, a simple database.  IKs are selected for transmitted\n   messages\
    \ based on recipient names, and corresponding IK IDs are\n   placed into the message's\
    \ encapsulated header.  When a message is\n   received, the IK ID is used as a\
    \ basis for a lookup in the database,\n   yielding the appropriate IK entry. \
    \ DEKs and IVs are generated\n   dynamically within the program.\n   Options (e.g.,\
    \ authentication only vs. authentication with\n   confidentiality service) are\
    \ selected by command line arguments to\n   the standalone program.  Destination\
    \ addresses are specified in the\n   same fashion.  The function of specifying\
    \ destination addresses to\n   the privacy enhancement program is logically distinct\
    \ from the\n   function of specifying the corresponding addresses to the UA for\
    \ use\n   by the MTS.  This separation results from the fact that, in many\n \
    \  cases, the local form of an address as specified to a UA differs from\n   the\
    \ Internet global form as used for IK ID fields.\n"
- title: 8  Areas For Further Study
  contents:
  - "8  Areas For Further Study\n   The procedures defined in this RFC are sufficient\
    \ to support pilot\n   implementation of privacy-enhanced electronic mail transmission\
    \ among\n   cooperating parties in the Internet.  Further effort will be needed,\n\
    \   however, to enhance robustness, generality, and interoperability.  In\n  \
    \ particular, further work is needed in the following areas:\n     1.   User naming\
    \ techniques, and their relationship to the domain\n          system, name servers,\
    \ directory services, and key management\n          functions\n     2.   Standardization\
    \ of Issuing Authority functions, including\n          protocols for communications\
    \ among IAs and between User Agents\n          and IAs\n     3.   Use of public\
    \ key encryption algorithms to encrypt data\n          encrypting keys\n     4.\
    \   Interoperability with X.400 mail\n   We anticipate generation of subsequent\
    \ RFCs which will address these\n   topics.\n"
- title: 9 References
  contents:
  - "9 References\n   This section identifies background references which may be useful\
    \ to\n   those contemplating use of the mechanisms defined in this RFC.\n    \
    \ ISO 7498/Part 2 - Security Architecture, prepared by ISO.TC97/SC\n         \
    \ 21/WG 1 Ad hoc group on Security, extends the OSI Basic\n          Reference\
    \ Model to cover security aspects which are general\n          architectural elements\
    \ of communications protocols, and\n          provides an annex with tutorial\
    \ and background information.\n     US Federal Information Processing Standards\
    \ Publication (FIPS PUB)\n          46, Data Encryption Standard, 15 January 1977,\
    \ defines the\n          encipherment algorithm used for message text encryption\
    \ and\n          MAC computation.\n     FIPS PUB 81, DES Modes of Operation, 2\
    \ December 1980, defines\n          specific modes in which the Data Encryption\
    \ Standard algorithm\n          is to be used to perform encryption and MAC computation.\n"
- title: 'NOTES:'
  contents:
  - "NOTES:\n     [1]  Information Processing Systems: Data Encipherment: Block\n\
    \          Cipher Algorithm DEA 1.\n     [2]  Federal Information Processing Standards\
    \ Publication 46, Data\n          Encryption Standard, 15 January 1977.\n    \
    \ [3]  Information Processing Systems: Data Encipherment: Modes of\n         \
    \ Operation of a 64-bit Block Cipher\n     [4]  Federal Information Processing\
    \ Standards Publication 81, DES\n          Modes of Operation, 2 December 1980.\n\
    \     [5]  Addendum to the Transport Layer Protocol Definition for\n         \
    \ Providing Connection Oriented End to End Cryptographic Data\n          Protection\
    \ Using a 64-Bit Block Cipher, X3T1-85-50.3, draft of\n          19 December 1985,\
    \ Gaithersburg, MD, p. 15.\n     [6]  This transformation should occur only at\
    \ an SMTP endpoint, not\n          at an intervening relay, but may take place\
    \ at a gateway\n          system linking the SMTP realm with other environments.\n\
    \     [7]  Crocker, D. Standard for the Format of ARPA Internet Text\n       \
    \   Messages (RFC822), August 1982.\n     [8]  Rose, M. T., and Stefferud, E.\
    \ A., Proposed Standard for\n          Message Encapsulation, January 1985.\n\
    \     [9]  Key generation for authentication and message text encryption\n   \
    \       may either be performed by the sending host or by a\n          centralized\
    \ server.  This RFC does not constrain this design\n          alternative.  Section\
    \ 5.1.1 identifies possible advantages of\n          a centralized server approach.\n\
    \     [10] Note that in the UNIX(tm) system, and possibly in other\n         \
    \ environments as well, such a program can be invoked as a\n          \"filter\"\
    \ within an electronic mail UA or a text editor,\n          simplifying the sequence\
    \ of operations which must be performed\n          by the user.\n"
