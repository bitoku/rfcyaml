- title: __initial_text__
  contents:
  - "           Internet Small Computer System Interface (iSCSI)\n               \
    \      Corrections and Clarifications\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet Small Computer System Interface (iSCSI) is a SCSI\n\
    \   transport protocol and maps the SCSI architecture and command sets\n   onto\
    \ TCP/IP.  RFC 3720 defines the iSCSI protocol.  This document\n   compiles the\
    \ clarifications to the original protocol definition in\n   RFC 3720 to serve\
    \ as a companion document for the iSCSI implementers.\n   This document updates\
    \ RFC 3720 and the text in this document\n   supersedes the text in RFC 3720 when\
    \ the two differ.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Definitions, Acronyms, and Document Summary .....................3\n  \
    \    2.1. Definitions ................................................3\n    \
    \  2.2. Acronyms ...................................................4\n      2.3.\
    \ Clarifications, Changes, and New Semantics .................5\n   3. iSCSI Semantics\
    \ for SCSI Tasks ..................................7\n      3.1. Residual Handling\
    \ ..........................................7\n           3.1.1. Overview ............................................7\n\
    \           3.1.2. SCSI REPORT LUNS and Residual Overflow ..............7\n  \
    \    3.2. R2T Ordering ...............................................9\n    \
    \  3.3. Model Assumptions for Response Ordering ....................9\n      \
    \     3.3.1. Model Description ..................................10\n        \
    \   3.3.2. iSCSI Semantics with the Interface Model ...........10\n          \
    \ 3.3.3. Current List of Fenced Response Use Cases ..........11\n   4. Task Management\
    \ ................................................12\n      4.1. Requests Affecting\
    \ Multiple Tasks .........................12\n           4.1.1. Scope of Affected\
    \ Tasks ............................12\n           4.1.2. Clarified Multi-Task\
    \ Abort Semantics ...............13\n           4.1.3. Updated Multi-Task Abort\
    \ Semantics .................14\n           4.1.4. Affected Tasks Shared across\
    \ RFC 3720 and\n                  FastAbort Sessions .................................16\n\
    \           4.1.5. Implementation Considerations ......................17\n  \
    \         4.1.6. Rationale behind the New Semantics .................17\n   5.\
    \ Discovery Semantics ............................................19\n      5.1.\
    \ Error Recovery for Discovery Sessions .....................19\n      5.2. Reinstatement\
    \ Semantics of Discovery Sessions .............19\n           5.2.1. Unnamed Discovery\
    \ Sessions .........................20\n           5.2.2. Named Discovery Sessions\
    \ ...........................20\n      5.3. Target PDUs during Discovery ..............................20\n\
    \   6. Negotiation and Others .........................................21\n  \
    \    6.1. TPGT Values ...............................................21\n    \
    \  6.2. SessionType Negotiation ...................................21\n      6.3.\
    \ Understanding NotUnderstood ...............................21\n      6.4. Outstanding\
    \ Negotiation Exchanges .........................22\n   7. iSCSI Error Handling\
    \ and Recovery ..............................22\n      7.1. ITT .......................................................22\n\
    \      7.2. Format Errors .............................................22\n  \
    \    7.3. Digest Errors .............................................22\n    \
    \  7.4. Message Error Checking ....................................23\n   8. iSCSI\
    \ PDUs .....................................................23\n      8.1. Asynchronous\
    \ Message ......................................23\n      8.2. Reject ....................................................24\n\
    \   9. Login/Text Operational Text Keys ...............................24\n  \
    \    9.1. TaskReporting .............................................24\n   10.\
    \ Security Considerations .......................................25\n   11. IANA\
    \ Considerations ...........................................26\n      11.1. iSCSI-Related\
    \ IANA Registries ............................26\n      11.2. iSCSI Opcodes ............................................26\n\
    \      11.3. iSCSI Login/Text Keys ....................................28\n  \
    \    11.4. iSCSI Asynchronous Events ................................30\n    \
    \  11.5. iSCSI Task Management Function Codes .....................31\n      11.6.\
    \ iSCSI Login Response Status Codes ........................32\n      11.7. iSCSI\
    \ Reject Reason Codes ................................34\n      11.8. iSER Opcodes\
    \ .............................................35\n   12. References ....................................................36\n\
    \      12.1. Normative References .....................................36\n  \
    \    12.2. Informative References ...................................36\n   Acknowledgements\
    \ ..................................................37\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Several iSCSI implementations have been built since [RFC3720]\
    \ was\n   published and the iSCSI community is now richer by the resulting\n \
    \  implementation expertise.  The goal of this document is to leverage\n   this\
    \ expertise both to offer clarifications to the [RFC3720]\n   semantics and to\
    \ address defects in [RFC3720] as appropriate.  This\n   document intends to offer\
    \ critical guidance to implementers with\n   regard to non-obvious iSCSI implementation\
    \ aspects so as to improve\n   interoperability and accelerate iSCSI adoption.\
    \  This document,\n   however, does not purport to be an all-encompassing iSCSI\
    \ how-to\n   guide for implementers, nor a complete revision of [RFC3720].\n \
    \  Instead, this document is intended as a companion document to\n   [RFC3720]\
    \ for the iSCSI implementers.\n   iSCSI implementers are required to reference\
    \ [RFC3722] and [RFC3723]\n   in addition to [RFC3720] for mandatory requirements.\
    \  In addition,\n   [RFC3721] also contains useful information for iSCSI implementers.\n\
    \   The text in this document, however, updates and supersedes the text\n   in\
    \ [RFC3720] whenever there is such a question.\n"
- title: 2.  Definitions, Acronyms, and Document Summary
  contents:
  - '2.  Definitions, Acronyms, and Document Summary

    '
- title: 2.1.  Definitions
  contents:
  - "2.1.  Definitions\n   I/O Buffer\n      A buffer that is used in a SCSI Read\
    \ or Write operation so SCSI\n      data may be sent from or received into that\
    \ buffer.  For a read or\n      write data transfer to take place for a task,\
    \ an I/O Buffer is\n      required on the initiator and at least one is required\
    \ on the\n      target.\n   SCSI-Presented Data Transfer Length (SPDTL)\n    \
    \  SPDTL is the aggregate data length of the data that the SCSI layer\n      logically\
    \ \"presents\" to the iSCSI layer for a Data-In or Data-Out\n      transfer in\
    \ the context of a SCSI task.  For a bidirectional task,\n      there are two\
    \ SPDTL values -- one for Data-In and one for Data-\n      Out.  Note that the\
    \ notion of \"presenting\" includes immediate data\n      per the data transfer\
    \ model in [SAM2], and excludes overlapping\n      data transfers, if any, requested\
    \ by the SCSI layer.\n   Third-party\n      A term used in this document to denote\
    \ nexus objects (I_T or\n      I_T_L) and iSCSI sessions that reap the side effects\
    \ of actions\n      that take place in the context of a separate iSCSI session,\
    \ while\n      being third parties to the action that caused the side effects.\n\
    \      One example of a third-party session is an iSCSI session hosting\n    \
    \  an I_T_L nexus to an LU that is reset with an LU Reset TMF via a\n      separate\
    \ I_T nexus.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 2.2.  Acronyms
  contents:
  - "2.2.  Acronyms\n   Acronym        Definition\n   -------------------------------------------------------------\n\
    \   EDTL           Expected Data Transfer Length\n   IANA           Internet Assigned\
    \ Numbers Authority\n   IETF           Internet Engineering Task Force\n   I/O\
    \            Input - Output\n   IP             Internet Protocol\n   iSCSI   \
    \       Internet SCSI\n   iSER           iSCSI Extensions for RDMA\n   ITT   \
    \         Initiator Task Tag\n   LO             Leading Only\n   LU          \
    \   Logical Unit\n   LUN            Logical Unit Number\n   PDU            Protocol\
    \ Data Unit\n   RDMA           Remote Direct Memory Access\n   R2T           \
    \ Ready To Transfer\n   R2TSN          Ready To Transfer Sequence Number\n   RFC\
    \            Request For Comments\n   SAM            SCSI Architecture Model\n\
    \   SCSI           Small Computer Systems Interface\n   SN             Sequence\
    \ Number\n   SNACK          Selective Negative Acknowledgment - also\n       \
    \           Sequence Number Acknowledgement for data\n   TCP            Transmission\
    \ Control Protocol\n   TMF            Task Management Function\n   TTT       \
    \     Target Transfer Tag\n   UA             Unit Attention\n"
- title: 2.3.  Clarifications, Changes, and New Semantics
  contents:
  - "2.3.  Clarifications, Changes, and New Semantics\n   This document specifies\
    \ certain changes to [RFC3720] semantics as\n   well as defines new iSCSI semantics.\
    \  In addition, this document also\n   clarifies the [RFC3720] semantics.  This\
    \ section summarizes the\n   contents of the document, categorizing each section\
    \ into one or more\n   of a clarification, change, or new semantic.\n      Section\
    \ 3.1.1: Clarification on iSCSI residuals computation\n      general principles\n\
    \      Section 3.1.2: Clarification on iSCSI residuals computation with\n    \
    \  an example\n      Section 3.2: Clarification on R2T ordering requirements\n\
    \      Section 3.3: New Semantics for Response Ordering in multi-\n      connection\
    \ iSCSI sessions\n      Section 4.1.2: Clarifications, changes, and new semantics\
    \ on\n      multi-task abort semantics that all implementations must comply\n\
    \      with\n      Section 4.1.3: Changes and new semantics (FastAbort semantics)\
    \ on\n      multi-task abort semantics that implementations should use for\n \
    \     faster error recovery\n      Section 4.1.3.1: Changes in iSCSI clearing\
    \ effects semantics\n      resulting from new FastAbort semantics\n      Section\
    \ 4.1.4: New Semantics on third-party session interactions\n      with the new\
    \ FastAbort semantics\n      Section 4.1.5: Clarification on implementation considerations\n\
    \      related to outstanding data transfers in order to realize correct\n   \
    \   iSCSI protocol behavior\n      Section 4.1.6: Clarification on the intent\
    \ behind FastAbort\n      semantics (not clarifications to [RFC3720] semantics)\n\
    \      Section 5.1: Clarification on error recovery semantics as\n      applicable\
    \ to Discovery sessions\n      Section 5.2.1: Clarification and new semantics\
    \ on applying the\n      Initiator Session Identifier (ISID) RULE ([RFC3720])\
    \ to Unnamed\n      Discovery Sessions\n      Section 5.2.2: Clarification on\
    \ applying the ISID RULE to Named\n      Discovery Sessions\n      Section 5.3:\
    \ Clarification on allowed PDU types and target Logout\n      notification behavior\
    \ on a Discovery session\n      Section 6.1: Clarification on the legality of\
    \ the Target Portal\n      Group Tag (TPGT) value of zero\n      Section 6.2:\
    \ Clarification on the negotiating order of SessionType\n      with respect to\
    \ other keys\n      Section 6.3: Clarification on the NotUnderstood negotiation\n\
    \      response on declarative keys and the implied semantics\n      Section 6.4:\
    \ Clarification on the number of legal outstanding\n      negotiation PDUs (Text\
    \ or Login-related)\n      Section 7.1: Clarification on usage of the ITT value\
    \ of 0xffffffff\n      Section 7.2: Clarification on what constitutes format errors\
    \ for\n      the purpose of error recovery defined in [RFC3720]\n      Section\
    \ 7.3: Change in error recovery semantics for the case of\n      discarding unsolicited\
    \ PDUs\n      Section 7.4: Clarification on the intended level of error checking\n\
    \      on inbound PDUs\n      Section 8.1: New semantics for a new AsyncEvent\
    \ code\n      Section 8.2: Change of legal status for Reject reason code 0x0b;\n\
    \      it is now deprecated\n      Section 9.1: New semantics for a new text key\
    \ TaskReporting\n"
- title: 3.  iSCSI Semantics for SCSI Tasks
  contents:
  - '3.  iSCSI Semantics for SCSI Tasks

    '
- title: 3.1.  Residual Handling
  contents:
  - "3.1.  Residual Handling\n   Section 10.4.1 of [RFC3720] defines the notion of\
    \ \"residuals\" and\n   specifies how the residual information should be encoded\
    \ into the\n   SCSI Response PDU in the Counts and Flags fields.  Section 3.1.1\n\
    \   clarifies the intent of [RFC3720] and explains the general\n   principles.\
    \  Section 3.1.2 describes the residual handling in the\n   REPORT LUNS scenario.\n"
- title: 3.1.1.  Overview
  contents:
  - "3.1.1.  Overview\n   SCSI-Presented Data Transfer Length (SPDTL) is the term\
    \ this document\n   uses (see Section 1.1 for definition) to represent the aggregate\
    \ data\n   length that the target SCSI layer attempts to transfer using the\n\
    \   local iSCSI layer for a task.  Expected Data Transfer Length (EDTL)\n   is\
    \ the iSCSI term that represents the length of data that the iSCSI\n   layer expects\
    \ to transfer for a task.  EDTL is specified in the SCSI\n   Command PDU.\n  \
    \ When SPDTL = EDTL for a task, the target iSCSI layer completes the\n   task\
    \ with no residuals.  Whenever SPDTL differs from EDTL for a task,\n   that task\
    \ is said to have a residual.\n   If SPDTL > EDTL for a task, iSCSI Overflow MUST\
    \ be signaled in the\n   SCSI Response PDU as specified in [RFC3720].  The Residual\
    \ Count MUST\n   be set to the numerical value of (SPDTL - EDTL).\n   If SPDTL\
    \ < EDTL for a task, iSCSI Underflow MUST be signaled in the\n   SCSI Response\
    \ PDU as specified in [RFC3720].  The Residual Count MUST\n   be set to the numerical\
    \ value of (EDTL - SPDTL).\n   Note that the Overflow and Underflow scenarios\
    \ are independent of\n   Data-In and Data-Out.  Either scenario is logically possible\
    \ in\n   either direction of data transfer.\n"
- title: 3.1.2.  SCSI REPORT LUNS and Residual Overflow
  contents:
  - "3.1.2.  SCSI REPORT LUNS and Residual Overflow\n   This section discusses the\
    \ residual overflow issues citing the\n   example of the SCSI REPORT LUNS command.\
    \  Note however that there are\n   several SCSI commands (e.g., INQUIRY) with\
    \ ALLOCATION LENGTH fields\n   following the same underlying rules.  The semantics\
    \ in the rest of\n   the section apply to all such SCSI commands.\n   The specification\
    \ of the SCSI REPORT LUNS command requires that the\n   SCSI target limit the\
    \ amount of data transferred to a maximum size\n   (ALLOCATION LENGTH) provided\
    \ by the initiator in the REPORT LUNS CDB.\n   If the Expected Data Transfer Length\
    \ (EDTL) in the iSCSI header of\n   the SCSI Command PDU for a REPORT LUNS command\
    \ is set to at least as\n   large as that ALLOCATION LENGTH, the SCSI layer truncation\
    \ prevents\n   an iSCSI Residual Overflow from occurring.  A SCSI initiator can\n\
    \   detect that such truncation has occurred via other information at the\n  \
    \ SCSI layer.  The rest of the section elaborates this required\n   behavior.\n\
    \   iSCSI uses the (O) bit (bit 5) in the Flags field of the SCSI\n   Response\
    \ and the last SCSI Data-In PDUs to indicate that an iSCSI\n   target was unable\
    \ to transfer all of the SCSI data for a command to\n   the initiator because\
    \ the amount of data to be transferred exceeded\n   the EDTL in the corresponding\
    \ SCSI Command PDU (see Section 10.4.1 of\n   [RFC3720]).\n   The SCSI REPORT\
    \ LUNS command requests a target SCSI layer to return a\n   logical unit inventory\
    \ (LUN list) to the initiator SCSI layer (see\n   Section 6.21 of SPC-3 [SPC3]).\
    \  The size of this LUN list may not be\n   known to the initiator SCSI layer\
    \ when it issues the REPORT LUNS\n   command; to avoid transferring more LUN list\
    \ data than the initiator\n   is prepared for, the REPORT LUNS CDB contains an\
    \ ALLOCATION LENGTH\n   field to specify the maximum amount of data to be transferred\
    \ to the\n   initiator for this command.  If the initiator SCSI layer has under-\n\
    \   estimated the number of logical units at the target, it is possible\n   that\
    \ the complete logical unit inventory does not fit in the\n   specified ALLOCATION\
    \ LENGTH.  In this situation, Section 4.3.3.6 in\n   [SPC3] requires that the\
    \ target SCSI layer \"shall terminate transfers\n   to the Data-In Buffer\" when\
    \ the number of bytes specified by the\n   ALLOCATION LENGTH field have been transferred.\n\
    \   Therefore, in response to a REPORT LUNS command, the SCSI layer at\n   the\
    \ target presents at most ALLOCATION LENGTH bytes of data (logical\n   unit inventory)\
    \ to iSCSI for transfer to the initiator.  For a REPORT\n   LUNS command, if the\
    \ iSCSI EDTL is at least as large as the\n   ALLOCATION LENGTH, the SCSI truncation\
    \ ensures that the EDTL will\n   accommodate all of the data to be transferred.\
    \  If all of the logical\n   unit inventory data presented to the iSCSI layer\
    \ -- i.e., the data\n   remaining after any SCSI truncation -- is transferred\
    \ to the\n   initiator by the iSCSI layer, an iSCSI Residual Overflow has not\n\
    \   occurred and the iSCSI (O) bit MUST NOT be set in the SCSI Response\n   or\
    \ final SCSI Data-Out PDU.  This is not a new requirement but is\n   already required\
    \ by the combination of [RFC3720] with the\n   specification of the REPORT LUNS\
    \ command in [SPC3].  However, if the\n   iSCSI EDTL is larger than the ALLOCATION\
    \ LENGTH in this scenario,\n   note that the iSCSI Underflow MUST be signaled\
    \ in the SCSI Response\n   PDU.  An iSCSI Underflow MUST also be signaled when\
    \ the iSCSI EDTL is\n   equal to the ALLOCATION LENGTH but the logical unit inventory\
    \ data\n   presented to the iSCSI layer is smaller than the ALLOCATION LENGTH.\n\
    \   The LUN LIST LENGTH field in the logical unit inventory (the first\n   field\
    \ in the inventory) is not affected by truncation of the\n   inventory to fit\
    \ in ALLOCATION LENGTH; this enables a SCSI initiator\n   to determine that the\
    \ received inventory is incomplete by noticing\n   that the LUN LIST LENGTH in\
    \ the inventory is larger than the\n   ALLOCATION LENGTH that was sent in the\
    \ REPORT LUNS CDB.  A common\n   initiator behavior in this situation is to re-issue\
    \ the REPORT LUNS\n   command with a larger ALLOCATION LENGTH.\n"
- title: 3.2.  R2T Ordering
  contents:
  - "3.2.  R2T Ordering\n   Section 10.8 in [RFC3720] says the following:\n      The\
    \ target may send several R2T PDUs.  It, therefore, can have a\n      number of\
    \ pending data transfers.  The number of outstanding R2T\n      PDUs is limited\
    \ by the value of the negotiated key\n      MaxOutstandingR2T.  Within a connection,\
    \ outstanding R2Ts MUST be\n      fulfilled by the initiator in the order in which\
    \ they were\n      received.\n   The quoted [RFC3720] text was unclear on the\
    \ scope of applicability\n   -- either per task, or across all tasks on a connection\
    \ -- and may be\n   interpreted as either.  This section is intended to clarify\
    \ that the\n   scope of applicability of the quoted text is a task.  No R2T ordering\n\
    \   relationship -- either in generation at the target or in fulfilling\n   at\
    \ the initiator -- across tasks is implied.  That is, outstanding\n   R2Ts within\
    \ a task MUST be fulfilled by the initiator in the order in\n   which they were\
    \ received on a connection.\n"
- title: 3.3.  Model Assumptions for Response Ordering
  contents:
  - "3.3.  Model Assumptions for Response Ordering\n   Whenever an iSCSI session is\
    \ composed of multiple connections, the\n   Response PDUs (task responses or TMF\
    \ responses) originating in the\n   target SCSI layer are distributed onto the\
    \ multiple connections by\n   the target iSCSI layer according to iSCSI connection\
    \ allegiance\n   rules.  This process generally may not preserve the ordering\
    \ of the\n   responses by the time they are delivered to the initiator SCSI layer.\n\
    \   Since ordering is not expected across SCSI responses anyway, this\n   approach\
    \ works fine in the general case.  However, to address the\n   special cases where\
    \ some ordering is desired by the SCSI layer, the\n   following \"Response Fence\"\
    \ semantics are defined with respect to\n   handling SCSI response messages as\
    \ they are handed off from the SCSI\n   protocol layer to the iSCSI layer.\n"
- title: 3.3.1.  Model Description
  contents:
  - "3.3.1.  Model Description\n   The target SCSI protocol layer hands off the SCSI\
    \ response messages\n   to the target iSCSI layer by invoking the \"Send Command\
    \ Complete\"\n   protocol data service ([SAM2], clause 5.4.2) and \"Task Management\n\
    \   Function Executed\" ([SAM2], clause 6.9) service.  On receiving the\n   SCSI\
    \ response message, the iSCSI layer exhibits the Response Fence\n   behavior for\
    \ certain SCSI response messages (Section 3.3.3 describes\n   the specific instances\
    \ where the semantics must be realized).\n   Whenever the Response Fence behavior\
    \ is required for a SCSI response\n   message, the target iSCSI layer MUST ensure\
    \ that the following\n   conditions are met in delivering the response message\
    \ to the\n   initiator iSCSI layer:\n   (1) Response with Response Fence MUST\
    \ be delivered chronologically\n       after all the \"preceding\" responses on\
    \ the I_T_L nexus, if the\n       preceding responses are delivered at all, to\
    \ the initiator iSCSI\n       layer.\n   (2) Response with Response Fence MUST\
    \ be delivered chronologically\n       prior to all the \"following\" responses\
    \ on the I_T_L nexus.\n   The \"preceding\" and \"following\" notions refer to\
    \ the order of handoff\n   of a response message from the target SCSI protocol\
    \ layer to the\n   target iSCSI layer.\n"
- title: 3.3.2.  iSCSI Semantics with the Interface Model
  contents:
  - "3.3.2.  iSCSI Semantics with the Interface Model\n   Whenever the TaskReporting\
    \ key (Section 9.1) is negotiated to\n   ResponseFence or FastAbort for an iSCSI\
    \ session and the Response\n   Fence behavior is required for a SCSI response\
    \ message, the target\n   iSCSI layer MUST perform the actions described in this\
    \ section for\n   that session.\n      a) If it is a single-connection session,\
    \ no special processing is\n         required.  The standard SCSI Response PDU\
    \ build and dispatch\n         process happens.\n      b) If it is a multi-connection\
    \ session, the target iSCSI layer\n         takes note of the last-sent and unacknowledged\
    \ StatSN on each\n         of the connections in the iSCSI session, and waits\
    \ for an\n         acknowledgement (NOP-In PDUs MAY be used to solicit\n     \
    \    acknowledgements as needed in order to accelerate this process)\n       \
    \  of each such StatSN to clear the fence.  The SCSI response\n         requiring\
    \ Response Fence behavior MUST NOT be sent to the\n         initiator before acknowledgements\
    \ are received for each of the\n         unacknowledged StatSNs.\n      c) The\
    \ target iSCSI layer must wait for an acknowledgement of the\n         SCSI Response\
    \ PDU that carried the SCSI response requiring the\n         Response Fence behavior.\
    \  The fence MUST be considered cleared\n         only after receiving the acknowledgement.\n\
    \      d) All further status processing for the LU is resumed only after\n   \
    \      clearing the fence.  If any new responses for the I_T_L nexus\n       \
    \  are received from the SCSI layer before the fence is cleared,\n         those\
    \ Response PDUs MUST be held and queued at the iSCSI layer\n         until the\
    \ fence is cleared.\n"
- title: 3.3.3.  Current List of Fenced Response Use Cases
  contents:
  - "3.3.3.  Current List of Fenced Response Use Cases\n   This section lists the\
    \ fenced response use cases that iSCSI\n   implementations MUST comply with. \
    \ However, this is not an exhaustive\n   enumeration.  It is expected that as\
    \ SCSI protocol specifications\n   evolve, the specifications will specify when\
    \ response fencing is\n   required on a case-by-case basis.\n   Whenever the TaskReporting\
    \ key (Section 9.1) is negotiated to\n   ResponseFence or FastAbort for an iSCSI\
    \ session, the target iSCSI\n   layer MUST assume that the Response Fence is required\
    \ for the\n   following SCSI completion messages:\n      1. The first completion\
    \ message carrying the UA after the multi-\n         task abort on issuing and\
    \ third-party sessions.  See Section\n         4.1.1 for related TMF discussion.\n\
    \      2. The TMF Response carrying the multi-task TMF Response on the\n     \
    \    issuing session.\n      3. The completion message indicating ACA establishment\
    \ on the\n         issuing session.\n      4. The first completion message carrying\
    \ the ACA ACTIVE status\n         after ACA establishment on issuing and third-party\
    \ sessions.\n      5. The TMF Response carrying the Clear ACA response on the\
    \ issuing\n         session.\n      6. The response to a PERSISTENT RESERVE OUT/PREEMPT\
    \ AND ABORT\n         command.\n   Note: Due to the absence of ACA-related fencing\
    \ requirements in\n   [RFC3720], initiator implementations SHOULD NOT use ACA\
    \ on multi-\n   connection iSCSI sessions to targets complying only with [RFC3720].\n\
    \   Initiators that want to employ ACA on multi-connection iSCSI sessions\n  \
    \ SHOULD first assess response-fencing behavior via negotiating for\n   ResponseFence\
    \ or FastAbort values for the TaskReporting (Section 9.1)\n   key.\n"
- title: 4.  Task Management
  contents:
  - '4.  Task Management

    '
- title: 4.1.  Requests Affecting Multiple Tasks
  contents:
  - "4.1.  Requests Affecting Multiple Tasks\n   This section clarifies and updates\
    \ the original text in Section\n   10.6.2 of [RFC3720].  The clarified semantics\
    \ (Section 4.1.2) are a\n   superset of the protocol behavior required in the\
    \ original text and\n   all iSCSI implementations MUST support the new behavior.\
    \  The updated\n   semantics (Section 4.1.3) on the other hand are mandatory only\
    \ when\n   the new key TaskReporting (Section 9.1) is negotiated to \"FastAbort\"\
    .\n"
- title: 4.1.1.  Scope of Affected Tasks
  contents:
  - "4.1.1.  Scope of Affected Tasks\n   This section defines the notion of \"affected\
    \ tasks\" in multi-task\n   abort scenarios.  Scope definitions in this section\
    \ apply to both the\n   clarified protocol behavior (Section 4.1.2) and the updated\
    \ protocol\n   behavior (Section 4.1.3).\n      ABORT TASK SET: All outstanding\
    \ tasks for the I_T_L nexus\n         identified by the LUN field in the ABORT\
    \ TASK SET TMF Request\n         PDU.\n      CLEAR TASK SET: All outstanding tasks\
    \ in the task set for the LU\n         identified by the LUN field in the CLEAR\
    \ TASK SET TMF Request\n         PDU.  See [SPC3] for the definition of a \"task\
    \ set\".\n      LOGICAL UNIT RESET: All outstanding tasks from all initiators\
    \ for\n         the LU identified by the LUN field in the LOGICAL UNIT RESET\n\
    \         Request PDU.\n      TARGET WARM RESET/TARGET COLD RESET: All outstanding\
    \ tasks from\n         all initiators across all LUs to which the TMF-issuing\
    \ session\n         has access on the SCSI target device hosting the iSCSI session.\n\
    \   Usage: An \"ABORT TASK SET TMF Request PDU\" in the preceding text is\n  \
    \ an iSCSI TMF Request PDU with the \"Function\" field set to \"ABORT TASK\n \
    \  SET\" as defined in [RFC3720].  Similar usage is employed for other\n   scope\
    \ descriptions.\n"
- title: 4.1.2.  Clarified Multi-Task Abort Semantics
  contents:
  - "4.1.2.  Clarified Multi-Task Abort Semantics\n   All iSCSI implementations MUST\
    \ support the protocol behavior defined\n   in this section as the default behavior.\
    \  The execution of ABORT TASK\n   SET, CLEAR TASK SET, LOGICAL UNIT RESET, TARGET\
    \ WARM RESET, and\n   TARGET COLD RESET TMF Requests consists of the following\
    \ sequence of\n   actions in the specified order on the specified party.\n   The\
    \ initiator iSCSI layer:\n      a. MUST continue to respond to each TTT received\
    \ for the affected\n         tasks.\n      b. SHOULD process any responses received\
    \ for affected tasks in the\n         normal fashion.  This is acceptable because\
    \ the responses are\n         guaranteed to have been sent prior to the TMF response.\n\
    \      c. SHOULD receive the TMF Response concluding all the tasks in the\n  \
    \       set of affected tasks unless the initiator has done something\n      \
    \   (e.g., LU reset, connection drop) that may prevent the TMF\n         Response\
    \ from being sent or received.  The initiator MUST thus\n         conclude all\
    \ affected tasks as part of this step in either\n         case, and MUST discard\
    \ any TMF Response received after the\n         affected tasks are concluded.\n\
    \   The target iSCSI layer:\n      a. MUST wait for responses on currently valid\
    \ target-transfer tags\n         of the affected tasks from the issuing initiator.\
    \  MAY wait for\n         responses on currently valid target-transfer tags of\
    \ the\n         affected tasks from third-party initiators.\n      b. MUST wait\
    \ (concurrent with the wait in Step a) for all commands\n         of the affected\
    \ tasks to be received based on the CmdSN\n         ordering.  SHOULD NOT wait\
    \ for new commands on third-party\n         affected sessions -- only the instantiated\
    \ tasks have to be\n         considered for the purpose of determining the affected\
    \ tasks.\n         In the case of target-scoped requests (i.e., TARGET WARM RESET\n\
    \         and TARGET COLD RESET), all of the commands that are not yet\n     \
    \    received on the issuing session in the command stream however\n         can\
    \ be considered to have been received with no command waiting\n         period\
    \ -- i.e., the entire CmdSN space up to the CmdSN of the\n         task management\
    \ function can be \"plugged\".\n      c. MUST propagate the TMF request to and\
    \ receive the response from\n         the target SCSI layer.\n      d. MUST provide\
    \ the Response Fence behavior for the TMF Response\n         on the issuing session\
    \ as specified in Section 3.3.2.\n      e. MUST provide the Response Fence behavior\
    \ on the first post-TMF\n         Response on third-party sessions as specified\
    \ in Section 3.3.2.\n         If some tasks originate from non-iSCSI I_T_L nexuses,\
    \ then the\n         means by which the target ensures that all affected tasks\
    \ have\n         returned their status to the initiator are defined by the\n \
    \        specific non-iSCSI transport protocol(s).\n   Technically, the TMF servicing\
    \ is complete in Step d.  Data transfers\n   corresponding to terminated tasks\
    \ may however still be in progress on\n   third-party iSCSI sessions even at the\
    \ end of Step e.  The TMF\n   Response MUST NOT be sent by the target iSCSI layer\
    \ before the end of\n   Step d, and MAY be sent at the end of Step d despite these\n\
    \   outstanding data transfers until after Step e.\n"
- title: 4.1.3.  Updated Multi-Task Abort Semantics
  contents:
  - "4.1.3.  Updated Multi-Task Abort Semantics\n   Protocol behavior defined in this\
    \ section MUST be implemented by all\n   iSCSI implementations complying with\
    \ this document.  Protocol\n   behavior defined in this section MUST be exhibited\
    \ by iSCSI\n   implementations on an iSCSI session when they negotiate the\n \
    \  TaskReporting (Section 9.1) key to \"FastAbort\" on that session.  The\n  \
    \ execution of ABORT TASK SET, CLEAR TASK SET, LOGICAL UNIT RESET,\n   TARGET\
    \ WARM RESET, and TARGET COLD RESET TMF Requests consists of the\n   following\
    \ sequence of actions in the specified order on the specified\n   party.\n   The\
    \ initiator iSCSI layer:\n      a. MUST NOT send any more Data-Out PDUs for affected\
    \ tasks on the\n         issuing connection of the issuing iSCSI session once\
    \ the TMF is\n         sent to the target.\n      b. SHOULD process any responses\
    \ received for affected tasks in the\n         normal fashion.  This is acceptable\
    \ because the responses are\n         guaranteed to have been sent prior to the\
    \ TMF response.\n      c. MUST respond to each Async Message PDU with AsyncEvent=5\
    \ as\n         defined in Section 8.1.\n      d. MUST treat the TMF response as\
    \ terminating all affected tasks\n         for which responses have not been received,\
    \ and MUST discard\n         any responses for affected tasks received after the\
    \ TMF\n         response is passed to the SCSI layer (although the semantics\n\
    \         defined in this section ensure that such an out-of-order\n         scenario\
    \ will never happen with a compliant target\n         implementation).\n   The\
    \ target iSCSI layer:\n      a. MUST wait for all commands of the affected tasks\
    \ to be received\n         based on the CmdSN ordering on the issuing session.\
    \  SHOULD NOT\n         wait for new commands on third-party affected sessions\
    \ -- only\n         the instantiated tasks have to be considered for the purpose\
    \ of\n         determining the affected tasks.  In the case of target-scoped\n\
    \         requests (i.e., TARGET WARM RESET and TARGET COLD RESET), all\n    \
    \     the commands that are not yet received on the issuing session\n        \
    \ in the command stream can be considered to have been received\n         with\
    \ no command waiting period -- i.e., the entire CmdSN space\n         up to the\
    \ CmdSN of the task management function can be\n         \"plugged\".\n      b.\
    \ MUST propagate the TMF request to and receive the response from\n         the\
    \ target SCSI layer.\n      c. MUST leave all active \"affected TTTs\" (i.e.,\
    \ active TTTs\n         associated with affected tasks) valid.\n      d. MUST\
    \ send an Asynchronous Message PDU with AsyncEvent=5\n         (Section 8.1) on:\n\
    \          i) each connection of each third-party session to which at\n      \
    \       least one affected task is allegiant if\n             TaskReporting=FastAbort\
    \ is operational on that third-party\n             session, and\n         ii)\
    \ each connection except the issuing connection of the\n             issuing session\
    \ that has at least one allegiant affected\n             task.\n      If there\
    \ are multiple affected LUs (say, due to a target reset),\n      then one Async\
    \ Message PDU MUST be sent for each such LU on each\n      connection that has\
    \ at least one allegiant affected task.  The LUN\n      field in the Asynchronous\
    \ Message PDU MUST be set to match the LUN\n      for each such LU.\n      e.\
    \ MUST address the Response Fence flag on the TMF Response on the\n         issuing\
    \ session as defined in Section 3.3.2.\n      f. MUST address the Response Fence\
    \ flag on the first post-TMF\n         Response on third-party sessions as defined\
    \ in Section 3.3.2.\n         If some tasks originate from non-iSCSI I_T_L nexuses,\
    \ then the\n         means by which the target ensures that all affected tasks\
    \ have\n         returned their status to the initiator are defined by the\n \
    \        specific non-iSCSI transport protocol(s).\n      g. MUST free up the\
    \ affected TTTs (and STags, if applicable) and\n         the corresponding buffers,\
    \ if any, once it receives each\n         associated NOP-Out acknowledgement that\
    \ the initiator generated\n         in response to each Async Message.\n   Technically,\
    \ the TMF servicing is complete in Step e.  Data transfers\n   corresponding to\
    \ terminated tasks may however still be in progress\n   even at the end of Step\
    \ f.  A TMF Response MUST NOT be sent by the\n   target iSCSI layer before the\
    \ end of Step e, and MAY be sent at the\n   end of Step e despite these outstanding\
    \ Data transfers until Step g.\n   Step g specifies an event to free up any such\
    \ resources that may have\n   been reserved to support outstanding data transfers.\n"
- title: 4.1.3.1.  Clearing Effects Update
  contents:
  - "4.1.3.1.  Clearing Effects Update\n   Appendix F.1 of [RFC3720] specifies the\
    \ clearing effects of target\n   and LU resets on \"Incomplete TTTs\" as \"Y\"\
    .  This meant that a target\n   warm reset or a target cold reset or an LU reset\
    \ would clear the\n   active TTTs upon completion.  However, the TaskReporting=FastAbort\n\
    \   (Section 9.1) semantics defined by this section do not guarantee that\n  \
    \ the active TTTs are cleared by the end of the reset operations.  In\n   fact,\
    \ the new semantics are designed to allow clearing the TTTs in a\n   \"lazy\"\
    \ fashion after the TMF Response is delivered.  Thus, when\n   TaskReporting=FastAbort\
    \ is operational on a session, the clearing\n   effects of reset operations on\
    \ \"Incomplete TTTs\" is \"N\".\n"
- title: 4.1.4.  Affected Tasks Shared across RFC 3720 and FastAbort Sessions
  contents:
  - "4.1.4.  Affected Tasks Shared across RFC 3720 and FastAbort Sessions\n   If an\
    \ iSCSI target implementation is capable of supporting\n   TaskReporting=FastAbort\
    \ functionality (Section 9.1), it may end up in\n   a situation where some sessions\
    \ have TaskReporting=RFC3720\n   operational (RFC 3720 sessions) while some other\
    \ sessions have\n   TaskReporting=FastAbort operational (FastAbort sessions) even\
    \ while\n   accessing a shared set of affected tasks (Section 4.1.1).\n   If the\
    \ issuing session is an RFC 3720 session, the iSCSI target\n   implementation\
    \ is FastAbort-capable, and the third-party affected\n   session is a FastAbort\
    \ session, the following behavior SHOULD be\n   exhibited by the iSCSI target\
    \ layer:\n      a. Between Steps c and d of the target behavior in Section 4.1.2,\n\
    \         send an Asynchronous Message PDU with AsyncEvent=5 (Section\n      \
    \   8.1) on each connection of each third-party session to which at\n        \
    \ least one affected task is allegiant.  If there are multiple\n         affected\
    \ LUs, then send one Async Message PDU for each such LU\n         on each connection\
    \ that has at least one allegiant affected\n         task.  When sent, the LUN\
    \ field in the Asynchronous Message PDU\n         MUST be set to match the LUN\
    \ for each such LU.\n      b. After Step e of the target behavior in Section 4.1.2,\
    \ free up\n         the affected TTTs (and STags, if applicable) and the\n   \
    \      corresponding buffers, if any, once each associated NOP-Out\n         acknowledgement\
    \ is received that the third-party initiator\n         generated in response to\
    \ each Async Message sent in Step a.\n   If the issuing session is a FastAbort\
    \ session, the iSCSI target\n   implementation is FastAbort-capable, and the third-party\
    \ affected\n   session is an RFC 3720 session, the following behavior MUST be\n\
    \   exhibited by the iSCSI target layer: Asynchronous Message PDUs MUST\n   NOT\
    \ be sent on the third-party session to prompt the FastAbort\n   behavior.\n \
    \  If the third-party affected session is a FastAbort session and the\n   issuing\
    \ session is a FastAbort session, the initiator in the third-\n   party role MUST\
    \ respond to each Async Message PDU with AsyncEvent=5\n   as defined in Section\
    \ 8.1.  Note that an initiator MAY thus receive\n   these Async Messages on a\
    \ third-party affected session even if the\n   session is a single-connection\
    \ session.\n"
- title: 4.1.5.  Implementation Considerations
  contents:
  - "4.1.5.  Implementation Considerations\n   Both in clarified semantics (Section\
    \ 4.1.2) and updated semantics\n   (Section 4.1.3), there may be outstanding data\
    \ transfers even after\n   the TMF completion is reported on the issuing session.\
    \  In the case\n   of iSCSI/iSER [iSER], these would be tagged data transfers\
    \ for STags\n   not owned by any active tasks.  Whether or not real buffers support\n\
    \   these data transfers is implementation-dependent.  However, the data\n   transfers\
    \ logically MUST be silently discarded by the target iSCSI\n   layer in all cases.\
    \  A target MAY, on an implementation-defined\n   internal timeout, also choose\
    \ to drop the connections on which it did\n   not receive the expected Data-Out\
    \ sequences (Section 4.1.2) or NOP-\n   Out acknowledgements (Section 4.1.3) so\
    \ as to reclaim the associated\n   buffer, STag, and TTT resources as appropriate.\n"
- title: 4.1.6.  Rationale behind the New Semantics
  contents:
  - "4.1.6.  Rationale behind the New Semantics\n   There are fundamentally three\
    \ basic objectives behind the semantics\n   specified in Sections 4.1.2 and 4.1.3.\n\
    \      1. Maintaining an ordered command flow I_T nexus abstraction to\n     \
    \    the target SCSI layer even with multi-connection sessions.\n         o  Target\
    \ iSCSI processing of a TMF request must maintain the\n            single flow\
    \ illusion.  Target behavior in Step b of Section\n            4.1.2 and Step\
    \ a of Section 4.1.3 correspond to this\n            objective.\n      2. Maintaining\
    \ a single ordered response flow I_T nexus\n         abstraction to the initiator\
    \ SCSI layer even with multi-\n         connection sessions when one response\
    \ (i.e., TMF response)\n         could imply the status of other unfinished tasks\
    \ from the\n         initiator's perspective.\n         o  The target must ensure\
    \ that the initiator does not see \"old\"\n            task responses (that were\
    \ placed on the wire chronologically\n            earlier than the TMF Response)\
    \ after seeing the TMF\n            response.  The target behavior in Step d of\
    \ Section 4.1.2\n            and Step e of Section 4.1.3 correspond to this objective.\n\
    \         o  Whenever the result of a TMF action is visible across\n         \
    \   multiple I_T_L nexuses, [SAM2] requires the SCSI device\n            server\
    \ to trigger a UA on each of the other I_T_L nexuses.\n            Once an initiator\
    \ is notified of such an UA, the application\n            client on the receiving\
    \ initiator is required to clear its\n            task state (clause 5.5 in [SAM2])\
    \ for the affected tasks.\n            It would thus be inappropriate to deliver\
    \ a SCSI Response\n            for a task after the task state is cleared on the\
    \ initiator,\n            i.e., after the UA is notified.  The UA notification\n\
    \            contained in the first SCSI Response PDU on each affected\n     \
    \       Third-party I_T_L nexus after the TMF action thus MUST NOT\n         \
    \   pass the affected task responses on any of the iSCSI\n            sessions\
    \ accessing the LU.  The target behavior in Step e of\n            Section 4.1.2\
    \ and Step f of Section 4.1.3 correspond to this\n            objective.\n   \
    \   3. Draining all active TTTs corresponding to affected tasks in a\n       \
    \  deterministic fashion.\n         o  Data-Out PDUs with stale TTTs arriving\
    \ after the tasks are\n            terminated can create a buffer management problem\
    \ even for\n            traditional iSCSI implementations, and is fatal for the\n\
    \            connection for iSCSI/iSER implementations.  Either the\n        \
    \    termination of affected tasks should be postponed until the\n           \
    \ TTTs are retired (as in Step a of Section 4.1.2), or the\n            TTTs and\
    \ the buffers should stay allocated beyond task\n            termination to be\
    \ deterministically freed up later (as in\n            Steps c and g of Section\
    \ 4.1.3).\n   The only other notable optimization is the plugging.  If all tasks\
    \ on\n   an I_T nexus will be aborted anyway (as with a target reset), there\n\
    \   is no need to wait to receive all commands to plug the CmdSN holes.\n   The\
    \ target iSCSI layer can simply plug all missing CmdSN slots and\n   move on with\
    \ TMF processing.  The first objective (maintaining a\n   single ordered command\
    \ flow) is still met with this optimization\n   because the target SCSI layer\
    \ only sees ordered commands.\n"
- title: 5.  Discovery Semantics
  contents:
  - '5.  Discovery Semantics

    '
- title: 5.1.  Error Recovery for Discovery Sessions
  contents:
  - "5.1.  Error Recovery for Discovery Sessions\n   The negotiation of the key ErrorRecoveryLevel\
    \ is not required for\n   Discovery sessions -- i.e., for sessions that negotiated\n\
    \   \"SessionType=Discovery\" -- because the default value of 0 is\n   necessary\
    \ and sufficient for Discovery sessions.  It is however\n   possible that some\
    \ legacy iSCSI implementations might attempt to\n   negotiate the ErrorRecoveryLevel\
    \ key on Discovery sessions.  When\n   such a negotiation attempt is made by the\
    \ remote side, a compliant\n   iSCSI implementation MUST propose a value of 0\
    \ (zero) in response.\n   The operational ErrorRecoveryLevel for Discovery sessions\
    \ thus MUST\n   be 0.  This naturally follows from the functionality constraints\
    \ that\n   [RFC3720] imposes on Discovery sessions.\n"
- title: 5.2.  Reinstatement Semantics of Discovery Sessions
  contents:
  - "5.2.  Reinstatement Semantics of Discovery Sessions\n   Discovery sessions are\
    \ intended to be relatively short-lived.\n   Initiators are not expected to establish\
    \ multiple Discovery sessions\n   to the same iSCSI Network Portal (see [RFC3720]).\
    \  An initiator may\n   use the same iSCSI Initiator Name and ISID when establishing\n\
    \   different unique sessions with different targets and/or different\n   portal\
    \ groups.  This behavior is discussed in Section 9.1.1 of\n   [RFC3720] and is,\
    \ in fact, encouraged as conservative reuse of ISIDs.\n   The ISID RULE in [RFC3720]\
    \ states that there must not be more than\n   one session with a matching 4-tuple:\
    \ <InitiatorName, ISID,\n   TargetName, TargetPortalGroupTag>.  While the spirit\
    \ of the ISID RULE\n   applies to Discovery sessions the same as it does for Normal\n\
    \   sessions, note that some Discovery sessions differ from the Normal\n   sessions\
    \ in two important aspects:\n      Because [RFC3720] allows a Discovery session\
    \ to be established\n      without specifying a TargetName key in the Login Request\
    \ PDU (let\n      us call such a session an \"Unnamed\" Discovery session), there\
    \ is\n      no Target Node context to enforce the ISID RULE.\n      Portal Groups\
    \ are defined only in the context of a Target Node.\n      When the TargetName\
    \ key is NULL-valued (i.e., not specified), the\n      TargetPortalGroupTag thus\
    \ cannot be ascertained to enforce the\n      ISID RULE.\n   The following sections\
    \ describe the two scenarios -- Named Discovery\n   sessions and Unnamed Discovery\
    \ sessions -- separately.\n"
- title: 5.2.1.  Unnamed Discovery Sessions
  contents:
  - "5.2.1.  Unnamed Discovery Sessions\n   For Unnamed Discovery sessions, neither\
    \ the TargetName nor the\n   TargetPortalGroupTag is available to the targets\
    \ in order to enforce\n   the ISID RULE.  So the following rule applies.\n   UNNAMED\
    \ ISID RULE: Targets MUST enforce the uniqueness of the\n   following 4-tuple\
    \ for Unnamed Discovery sessions: <InitiatorName,\n   ISID, NULL, TargetAddress>.\
    \  The following semantics are implied by\n   this uniqueness requirement.\n \
    \  Targets SHOULD allow concurrent establishment of one Discovery\n   session\
    \ with each of its Network Portals by the same initiator port\n   with a given\
    \ iSCSI Node Name and an ISID.  Each of the concurrent\n   Discovery sessions,\
    \ if established by the same initiator port to\n   other Network Portals, MUST\
    \ be treated as independent sessions --\n   i.e., one session MUST NOT reinstate\
    \ the other.\n   A new Unnamed Discovery session that has a matching <InitiatorName,\n\
    \   ISID, NULL, TargetAddress> to an existing Discovery session MUST\n   reinstate\
    \ the existing Unnamed Discovery session.  Note thus that\n   only an Unnamed\
    \ Discovery session may reinstate an Unnamed Discovery\n   session.\n"
- title: 5.2.2.  Named Discovery Sessions
  contents:
  - "5.2.2.  Named Discovery Sessions\n   For a Named Discovery session, the TargetName\
    \ key is specified by the\n   initiator and thus the target can unambiguously\
    \ ascertain the\n   TargetPortalGroupTag as well.  Since all the four elements\
    \ of the 4-\n   tuple are known, the ISID RULE MUST be enforced by targets with\
    \ no\n   changes from [RFC3720] semantics.  A new session with a matching\n  \
    \ <InitiatorName, ISID, TargetName, TargetPortalGroupTag> thus will\n   reinstate\
    \ an existing session.  Note in this case that any new iSCSI\n   session (Discovery\
    \ or Normal) with the matching 4-tuple may reinstate\n   an existing Named Discovery\
    \ iSCSI session.\n"
- title: 5.3.  Target PDUs during Discovery
  contents:
  - "5.3.  Target PDUs during Discovery\n   Targets SHOULD NOT send any responses\
    \ other than a Text Response and\n   Logout Response on a Discovery session, once\
    \ in Full Feature Phase.\n   Implementation Note: A target may simply drop the\
    \ connection in a\n   Discovery session when it would have requested a Logout\
    \ via an Async\n   Message on Normal sessions.\n"
- title: 6.  Negotiation and Others
  contents:
  - '6.  Negotiation and Others

    '
- title: 6.1.  TPGT Values
  contents:
  - "6.1.  TPGT Values\n   [SAM2] and [SAM3] specifications incorrectly note in their\n\
    \   informative text that TPGT value should be non-zero, although\n   [RFC3720]\
    \ allows the value of zero for TPGT.  This section is to\n   clarify that a zero\
    \ value is expressly allowed as a legal value for\n   TPGT.  This discrepancy\
    \ currently stands corrected in [SAM4].\n"
- title: 6.2.  SessionType Negotiation
  contents:
  - "6.2.  SessionType Negotiation\n   During the Login Phase, the SessionType key\
    \ is offered by the\n   initiator to choose the type of session it wants to create\
    \ with the\n   target.  The target may accept or reject the offer.  Depending\
    \ on the\n   type of the session, a target may decide on resources to allocate\
    \ and\n   the security to enforce, etc. for the session.  If the SessionType\n\
    \   key is thus going to be offered as \"Discovery\", it SHOULD be offered\n \
    \  in the initial Login request by the initiator.\n"
- title: 6.3.  Understanding NotUnderstood
  contents:
  - "6.3.  Understanding NotUnderstood\n   [RFC3720] defines NotUnderstood as a valid\
    \ answer during a\n   negotiation text key exchange between two iSCSI nodes. \
    \ NotUnderstood\n   has the reserved meaning that the sending side did not understand\
    \ the\n   proposed key semantics.  This section seeks to clarify that\n   NotUnderstood\
    \ is a valid answer for both declarative and negotiated\n   keys.  The general\
    \ iSCSI philosophy is that comprehension precedes\n   processing for any iSCSI\
    \ key.  A proposer of an iSCSI key, negotiated\n   or declarative, in a text key\
    \ exchange MUST thus be able to properly\n   handle a NotUnderstood response.\n\
    \   The proper way to handle a NotUnderstood response depends on where\n   the\
    \ key is specified and whether the key is declarative vs.\n   negotiated.  All\
    \ keys defined in [RFC3720] MUST be supported by all\n   compliant implementations;\
    \ a NotUnderstood answer on any of the\n   [RFC3720] keys therefore MUST be considered\
    \ a protocol error and\n   handled accordingly.  For all other later keys, a NotUnderstood\n\
    \   answer concludes the negotiation for a negotiated key whereas for a\n   declarative\
    \ key, a NotUnderstood answer simply informs the declarer\n   of a lack of comprehension\
    \ by the receiver.\n   In either case, a NotUnderstood answer always requires\
    \ that the\n   protocol behavior associated with that key not be used within the\n\
    \   scope of the key (connection/session) by either side.\n"
- title: 6.4.  Outstanding Negotiation Exchanges
  contents:
  - "6.4.  Outstanding Negotiation Exchanges\n   There was some uncertainty around\
    \ the number of outstanding Login\n   Response PDUs on a connection.  [RFC3720]\
    \ offers the analogy of SCSI\n   linked commands to Login and Text negotiations\
    \ in Sections 5.3 and\n   10.10.3, respectively, but does not make it fully explicit.\
    \  This\n   section is to offer a clarification in this regard.\n   There MUST\
    \ NOT be more than one outstanding Login Request, Login\n   Response, Text Request,\
    \ or Text Response PDU on an iSCSI connection.\n   An outstanding PDU in this\
    \ context is one that has not been\n   acknowledged by the remote iSCSI side.\n"
- title: 7.  iSCSI Error Handling and Recovery
  contents:
  - '7.  iSCSI Error Handling and Recovery

    '
- title: 7.1.  ITT
  contents:
  - "7.1.  ITT\n   An ITT value of 0xffffffff is reserved and MUST NOT be assigned\
    \ for a\n   task by the initiator.  The only instance in which it may be seen\
    \ on\n   the wire is in a target-initiated NOP-In PDU (and in the initiator\n\
    \   response to that PDU, if necessary).  Section 10.19 in [RFC3720]\n   mentions\
    \ this in passing but is noted here again to make it obvious\n   since the semantics\
    \ apply to the initiators in general.\n"
- title: 7.2.  Format Errors
  contents:
  - "7.2.  Format Errors\n   Section 6.6 of [RFC3720] discusses format error handling.\
    \  This\n   section elaborates on the \"inconsistent\" PDU field contents noted\
    \ in\n   [RFC3720].\n   All initiator-detected PDU construction errors MUST be\
    \ considered as\n   format errors.  Some examples of such errors are:\n      -\
    \  NOP-In with a valid TTT but an invalid LUN\n      -  NOP-In with a valid ITT\
    \ (i.e., a NOP-In response) and also a\n         valid TTT\n      -  SCSI Response\
    \ PDU with Status=CHECK CONDITION, but\n         DataSegmentLength = 0\n"
- title: 7.3.  Digest Errors
  contents:
  - "7.3.  Digest Errors\n   Section 6.7 of [RFC3720] discusses digest error handling.\
    \  It states\n   that \"No further action is necessary for initiators if the discarded\n\
    \   PDU is an unsolicited PDU (e.g., Async, Reject)\" on detecting a\n   payload\
    \ digest error.  This is incorrect.\n   An Asynchronous Message PDU or a Reject\
    \ PDU carries the next StatSN\n   value on an iSCSI connection, advancing the\
    \ StatSN.  When an\n   initiator discards one of these PDUs due to a payload digest\
    \ error,\n   the entire PDU including the header MUST be discarded.  Consequently,\n\
    \   the initiator MUST treat the exception like a loss of any other\n   solicited\
    \ response PDU -- i.e., it MUST use one of the following\n   options noted in\
    \ [RFC3720]:\n      a) Request PDU retransmission with a status SNACK.\n     \
    \ b) Logout the connection for recovery and continue the tasks on a\n        \
    \ different connection instance.\n      c) Logout to close the connection (abort\
    \ all the commands\n         associated with the connection).\n"
- title: 7.4.  Message Error Checking
  contents:
  - "7.4.  Message Error Checking\n   There has been some uncertainty on the extent\
    \ to which incoming\n   messages have to be checked for protocol errors, beyond\
    \ what is\n   strictly required for processing the inbound message.  This section\n\
    \   addresses this question.\n   Unless [RFC3720] or this document requires it,\
    \ an iSCSI\n   implementation is not required to do an exhaustive protocol\n \
    \  conformance check on an incoming iSCSI PDU.  The iSCSI implementation\n   especially\
    \ is not required to double-check the remote iSCSI\n   implementation's conformance\
    \ to protocol requirements.\n"
- title: 8.  iSCSI PDUs
  contents:
  - '8.  iSCSI PDUs

    '
- title: 8.1.  Asynchronous Message
  contents:
  - "8.1.  Asynchronous Message\n   This section defines additional semantics for\
    \ the Asynchronous\n   Message PDU defined in Section 10.9 of [RFC3720] using\
    \ the same\n   conventions.\n   The following new legal value for the AsyncEvent\
    \ is defined:\n   5: all active tasks for LU with a matching LUN field in the\
    \ Async\n   Message PDU are being terminated.\n   The receiving initiator iSCSI\
    \ layer MUST respond to this Message by\n   taking the following steps in order.\n\
    \       i) Stop Data-Out transfers on that connection for all active TTTs\n  \
    \        for the affected LUN quoted in the Async Message PDU.\n      ii) Acknowledge\
    \ the StatSN of the Async Message PDU via a NOP-Out\n          PDU with ITT=0xffffffff\
    \ (i.e., non-ping flavor), while copying\n          the LUN field from the Async\
    \ Message to NOP-Out.\n   The new AsyncEvent defined in this section however MUST\
    \ NOT be used\n   on an iSCSI session unless the new TaskReporting text key defined\
    \ in\n   Section 9.1 was negotiated to FastAbort on the session.\n"
- title: 8.2.  Reject
  contents:
  - "8.2.  Reject\n   Section 10.17.1 of [RFC3720] specifies the Reject reason code\
    \ of 0x0b\n   with an explanation of \"Negotiation Reset\".  At this point, we\
    \ do not\n   see any legitimate iSCSI protocol use case for using this reason\n\
    \   code.  Thus, reason code 0x0b MUST be considered as deprecated and\n   MUST\
    \ NOT be sent by implementations that comply with the requirements\n   of this\
    \ document.  An implementation receiving reason code 0x0b MUST\n   treat it as\
    \ a negotiation failure that terminates the Login Phase and\n   the TCP connection,\
    \ as specified in Section 6.10 of [RFC3720].\n   Section 5.4 of [RFC3720] states:\n\
    \      Neither the initiator nor the target should attempt to declare or\n   \
    \   negotiate a parameter more than once during any negotiation\n      sequence\
    \ without an intervening operational parameter negotiation\n      reset, except\
    \ for responses to specific keys that explicitly allow\n      repeated key declarations\
    \ (e.g., TargetAddress).\n   The deprecation of reason code 0x0b eliminates the\
    \ possibility of an\n   operational parameter negotiation reset, causing the phrase\
    \ \"without\n   an intervening operational parameter negotiation reset\" in [RFC3720]\n\
    \   to refer to an impossible event.  The quoted phrase SHOULD be ignored\n  \
    \ by receivers that handle reason code 0x0b in the manner specified in\n   this\
    \ section.\n"
- title: 9.  Login/Text Operational Text Keys
  contents:
  - "9.  Login/Text Operational Text Keys\n   This section follows the same conventions\
    \ as Section 12 of [RFC3720].\n"
- title: 9.1.  TaskReporting
  contents:
  - "9.1.  TaskReporting\n   Use: LO\n   Senders: Initiator and Target\n   Scope:\
    \ SW\n   Irrelevant when: SessionType=Discovery\n   TaskReporting=<list-of-values>\n\
    \   Default is RFC3720.\n   Result function is AND.\n   This key is used to negotiate\
    \ the task completion reporting semantics\n   from the SCSI target.  The following\
    \ table describes the semantics\n   that an iSCSI target MUST support for respective\
    \ negotiated key\n   values.  Whenever this key is negotiated, at least the RFC3720\
    \ and\n   ResponseFence values MUST be offered as options by the negotiation\n\
    \   originator.\n   +--------------+------------------------------------------+\n\
    \   | Name         |             Description                  |\n   +--------------+------------------------------------------+\n\
    \   | RFC3720      | RFC 3720-compliant semantics.  Response  |\n   |        \
    \      | fencing is not guaranteed and fast       |\n   |              | completion\
    \ of multi-task aborting is not |\n   |              | supported             \
    \                   |\n   +--------------+------------------------------------------+\n\
    \   | ResponseFence| Response Fence (Section 3.3.1) semantics |\n   |        \
    \      | MUST be supported in reporting task      |\n   |              | completions\
    \                              |\n   +--------------+------------------------------------------+\n\
    \   | FastAbort    | Updated fast multi-task abort semantics  |\n   |        \
    \      | defined in Section 4.1.3 MUST be         |\n   |              | supported.\
    \  Support for Response Fence is|\n   |              | implied -- i.e., Section\
    \ 3.3.1 semantics |\n   |              | MUST be supported as well           \
    \     |\n   +--------------+------------------------------------------+\n   When\
    \ TaskReporting is not negotiated to FastAbort, the [RFC3720] TMF\n   semantics\
    \ as clarified in Section 4.1.2 MUST be used.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This document does not introduce any new security\
    \ considerations\n   other than those already noted in [RFC3720].  Consequently,\
    \ all the\n   iSCSI-related security text in [RFC3723] is also directly applicable\n\
    \   to this document.\n"
- title: 11.  IANA Considerations
  contents:
  - '11.  IANA Considerations

    '
- title: 11.1.  iSCSI-Related IANA Registries
  contents:
  - "11.1.  iSCSI-Related IANA Registries\n   This document creates the following\
    \ iSCSI-related registries for IANA\n   to manage.\n      1. iSCSI Opcodes\n \
    \     2. iSCSI Login/Text Keys\n      3. iSCSI Asynchronous Events\n      4. iSCSI\
    \ Task Management Function Codes\n      5. iSCSI Login Response Status Codes\n\
    \      6. iSCSI Reject Reason Codes\n      7. iSER Opcodes\n   Each of the following\
    \ sections describes a registry, its sub-\n   registries if any, and their administration\
    \ policies in more detail.\n   IANA has registered what this document calls the\
    \ main \"registries\" as\n   sub-registries of a larger iSCSI registry.  However,\
    \ wherever\n   registry-to-sub-registry relationships are specified by this\n\
    \   document, they have been preserved intact.\n   [RFC3720] specifies three iSCSI-related\
    \ registries -- extended key,\n   authentication methods, and digests.  This document\
    \ recommends that\n   these registries be published together with the registries\
    \ defined by\n   this document.  Further, this document recommends that the three\n\
    \   [RFC3720] registries be listed in between items 6 and 7 in the\n   registry\
    \ list above.\n"
- title: 11.2.  iSCSI Opcodes
  contents:
  - "11.2.  iSCSI Opcodes\n   Name of the registry: \"iSCSI Opcodes\"\n   Namespace\
    \ details: Numerical values that can fit in one octet with\n   the most significant\
    \ two bits (bits 0 and 1) already designated by\n   [RFC3720], bit 0 being reserved\
    \ and bit 1 for immediate delivery.\n   Bit 2 is designated to identify the originator\
    \ of the opcode.  Bit 2\n   = 0 for initiator and Bit 2 = 1 for target.\n   Information\
    \ that must be provided to assign a new value: An IESG-\n   approved standards-track\
    \ specification defining the semantics and\n   interoperability requirements of\
    \ the proposed new value and the\n   fields to be recorded in the registry.\n\
    \   Allocation request guidance to requesters:\n      1) If the initiator opcode\
    \ and target opcode used to identify the\n         request and response of a new\
    \ type of protocol operation are\n         requested, assign the same lower five\
    \ bits (i.e., Bit 3 through\n         Bit 7) for both opcodes, e.g., 0x13 and\
    \ 0x33.\n      2) If only the initiator opcode or target opcode is requested to\n\
    \         identify a one-way protocol message (i.e., request without a\n     \
    \    response or a \"response\" without a request), assign an unused\n       \
    \  number from the appropriate category (i.e., Bit 2 set to 0 or 1\n         for\
    \ initiator category or target category) and add the other\n         pair member\
    \ (i.e., same opcode with Bit 2 set to 1 or 0,\n         respectively) to \"no\
    \ opcode pair is available\" list.\n      3) If there are no other opcodes available\
    \ in the appropriate\n         \"Reserved to IANA\" list to assign on a request\
    \ for a new opcode\n         except the reserved opcodes in the \"no opcode pair\
    \ is\n         available\" list, allocate the opcode from the appropriate\n  \
    \       category (initiator or target) of the \"no opcode pair is\n         available\"\
    \ list.\n   Fields to record in the registry: Assigned value, Who can originate\n\
    \   (Initiator or Target), Operation Name, and its associated RFC\n   reference.\n\
    \   Initial registry contents:\n   0x00, Initiator, NOP-Out, [RFC3720]\n   0x01,\
    \ Initiator, SCSI Command, [RFC3720]\n   0x02, Initiator, SCSI Task Management\
    \ function request, [RFC3720]\n   0x03, Initiator, Login Request, [RFC3720]\n\
    \   0x04, Initiator, Text Request, [RFC3720]\n   0x05, Initiator, SCSI Data-Out,\
    \ [RFC3720]\n   0x06, Initiator, Logout Request, [RFC3720]\n   0x10, Initiator,\
    \ SNACK Request, [RFC3720]\n   0x1c-0x1e, Initiator, Vendor specific codes, [RFC3720]\n\
    \   0x20, Target, NOP-In, [RFC3720]\n   0x21, Target, SCSI Response, [RFC3720]\n\
    \   0x22, Target, SCSI Task Management function response, [RFC3720]\n   0x23,\
    \ Target, Login Response, [RFC3720]\n   0x24, Target, Text Response, [RFC3720]\n\
    \   0x25, Target, SCSI Data-In, [RFC3720]\n   0x26, Target, Logout Response, [RFC3720]\n\
    \   0x31, Target, Ready To Transfer (R2T), [RFC3720]\n   0x32, Target, Asynchronous\
    \ Message, [RFC3720]\n   0x3c-0x3e, Target, Vendor specific codes, [RFC3720]\n\
    \   0x3f, Target, Reject, [RFC3720]\n   Reserved to IANA:\n       0x07-0x0f, 0x13-0x1b\
    \ (initiator codes)\n       0x27-0x2f, 0x33-0x3b (target codes)\n   No opcode\
    \ pair is available:\n       0x11, 0x12, 0x1f (initiator codes)\n       0x30 (target\
    \ codes)\n   Allocation Policy:\n   Standards Action ([IANA]): This is required\
    \ for defining the\n   semantics of the opcode.\n   Expert Review ([IANA]): This\
    \ is required for selecting the specific\n   opcode(s) to allocate in order to\
    \ ensure compliance with the earlier\n   \"Allocation request guidance to requesters\"\
    .\n"
- title: 11.3.  iSCSI Login/Text Keys
  contents:
  - "11.3.  iSCSI Login/Text Keys\n   Name of the registry: \"iSCSI Text Keys\"\n\
    \   Namespace details: Key=value pairs with \"Key\" names in UTF-8 Unicode,\n\
    \   and the permissible \"value\" options for the \"Key\" are Key-dependent.\n\
    \   [RFC3720] defines the rules on key names and allowed values.\n   Information\
    \ that must be provided to assign a new value: An IESG-\n   approved standards-track\
    \ specification defining the semantics and\n   interoperability requirements of\
    \ the proposed new Key per [RFC3720]\n   key specification template and the fields\
    \ to be recorded in the\n   registry.\n   Assignment policy:\n   If the requested\
    \ Key name is not already assigned and is roughly\n   representative of its proposed\
    \ semantics, it may be assigned to the\n   requester.\n   Given the arbitrary\
    \ nature of text strings, there is no maximum\n   reserved by IANA for assignment\
    \ in this registry.\n   Fields to record in the registry: Assigned Key Name and\
    \ its\n   associated RFC reference.\n   Initial registry contents:\n   AuthMethod,\
    \ [RFC3720]\n   HeaderDigest, [RFC3720]\n   DataDigest, [RFC3720]\n   MaxConnections,\
    \ [RFC3720]\n   SendTargets, [RFC3720]\n   TargetName, [RFC3720]\n   InitiatorName,\
    \ [RFC3720]\n   TargetAlias, [RFC3720]\n   InitiatorAlias, [RFC3720]\n   TargetAddress,\
    \ [RFC3720]\n   TargetPortalGroupTag, [RFC3720]\n   InitialR2T, [RFC3720]\n  \
    \ ImmediateData, [RFC3720]\n   MaxRecvDataSegmentLength, [RFC3720]\n   MaxBurstLength,\
    \ [RFC3720]\n   FirstBurstLength, [RFC3720]\n   DefaultTime2Wait, [RFC3720]\n\
    \   DefaultTime2Retain, [RFC3720]\n   MaxOutstandingR2T, [RFC3720]\n   DataPDUInOrder,\
    \ [RFC3720]\n   DataSequenceInOrder, [RFC3720]\n   ErrorRecoveryLevel, [RFC3720]\n\
    \   SessionType, [RFC3720]\n   RDMAExtensions, [iSER]\n   TargetRecvDataSegmentLength,\
    \ [iSER]\n   InitiatorRecvDataSegmentLength, [iSER]\n   MaxOutstandingUnexpectedPDUs,\
    \ [iSER]\n   TaskReporting, this document\n   Allocation Policy:\n   Standards\
    \ Action ([IANA])\n"
- title: 11.4.  iSCSI Asynchronous Events
  contents:
  - "11.4.  iSCSI Asynchronous Events\n   Name of the registry: \"iSCSI Asynchronous\
    \ Events\"\n   Namespace details: Numerical values that can fit in one octet.\n\
    \   Information that must be provided to assign a new value: An IESG-\n   approved\
    \ standards-track specification defining the semantics and\n   interoperability\
    \ requirements of the proposed new Event and the\n   fields to be recorded in\
    \ the registry.\n   Assignment policy:\n   If the requested value is not already\
    \ assigned, it may be assigned to\n   the requester.\n   6-247: range reserved\
    \ by IANA for assignment in this registry.\n   Fields to record in the registry:\
    \ Assigned Event number, Description\n   and its associated RFC reference.\n \
    \  Initial registry contents:\n   0, SCSI Async Event, [RFC3720]\n   1, Logout\
    \ Request, [RFC3720]\n   2, Connection drop notification, [RFC3720]\n   3, Session\
    \ drop notification, [RFC3720]\n   4, Negotiation Request, [RFC3720]\n   5, Task\
    \ termination, this document\n   248-254, Vendor-unique, this document\n   255,\
    \ Vendor-unique, [RFC3720]\n   Allocation Policy:\n   Standards Action ([IANA])\n"
- title: 11.5.  iSCSI Task Management Function Codes
  contents:
  - "11.5.  iSCSI Task Management Function Codes\n   Name of the registry: \"iSCSI\
    \ TMF Codes\"\n   Namespace details: Numerical values that can fit in 7 bits.\n\
    \   Information that must be provided to assign a new value: An IESG-\n   approved\
    \ standards-track specification defining the semantics and\n   interoperability\
    \ requirements of the proposed new Code and the fields\n   to be recorded in the\
    \ registry.\n   Assignment policy:\n   If the requested value is not already assigned,\
    \ it may be assigned to\n   the requester.\n   9-127: range reserved by IANA for\
    \ assignment in this registry.\n   Fields to record in the registry: Assigned\
    \ Code, Description, and its\n   associated RFC reference.\n   Initial registry\
    \ contents:\n   1, ABORT TASK, [RFC3720]\n   2, ABORT TASK SET, [RFC3720]\n  \
    \ 3, CLEAR ACA, [RFC3720]\n   4, CLEAR TASK SET, [RFC3720]\n   5, LOGICAL UNIT\
    \ RESET, [RFC3720]\n   6, TARGET WARM RESET, [RFC3720]\n   7, TARGET COLD RESET,\
    \ [RFC3720]\n   8, TASK REASSIGN, [RFC3720]\n   Allocation Policy:\n   Standards\
    \ Action ([IANA])\n"
- title: 11.6.  iSCSI Login Response Status Codes
  contents:
  - "11.6.  iSCSI Login Response Status Codes\n   Name of the registry: \"iSCSI Login\
    \ Response Status Codes\"\n   Namespace details: Numerical values; Status-Class\
    \ (one octet),\n   Status-Detail (one octet) for each possible value of Status-Class\n\
    \   except for Vendor-Unique Status-Class (0x0f).\n   Information that must be\
    \ provided to assign a new value: An IESG-\n   approved specification defining\
    \ the semantics and interoperability\n   requirements of the proposed new Code,\
    \ its Status-Class affiliation\n   (only if a new Status-Detail value is being\
    \ proposed for a Status-\n   Class), Status-Class definition (only if a new Status-Class\
    \ is being\n   proposed), and the fields to be recorded in the registry.\n   Assignment\
    \ policy:\n   If the requested value is not already assigned, it may be assigned\
    \ to\n   the requester.\n   4-14 and 16-255: range reserved by IANA for assignment\
    \ in this\n   registry.\n   Fields to record in the Status-Class main registry:\
    \ Assigned Code,\n   Description, and its associated RFC reference.\n   Fields\
    \ to record in the Status-Detail sub-registries: Status-Class,\n   Assigned Code,\
    \ Description, and its associated RFC reference.\n   Initial registry contents\
    \ (Status-Class):\n   0x00, Success, [RFC3720]\n   0x01, Redirection, [RFC3720]\n\
    \   0x02, Initiator Error, [RFC3720]\n   0x03, Target Error, [RFC3720]\n   0x0f,\
    \ Vendor-Unique, this document\n   Initial sub-registry contents (Status-Detail\
    \ for Status-Class=0x00):\n   0x00, 0x00, Success, [RFC3720]\n   1-255: range\
    \ reserved by IANA for assignment in Status-Class=0 sub-\n   registry.\n   Initial\
    \ sub-registry contents (Status-Detail for Status-Class=0x01):\n   0x01, 0x01,\
    \ Temporary move, [RFC3720]\n   0x01, 0x02, Permanent move, [RFC3720]\n   3-255:\
    \ range reserved by IANA for assignment in Status-Class=1 sub-\n   registry.\n\
    \   Initial sub-registry contents (Status-Detail for Status-Class=0x02):\n   0x02,\
    \ 0x00, Miscellaneous, [RFC3720]\n   0x02, 0x01, Authentication failure, [RFC3720]\n\
    \   0x02, 0x02, Authorization failure, [RFC3720]\n   0x02, 0x03, Not found, [RFC3720]\n\
    \   0x02, 0x04, Target removed, [RFC3720]\n   0x02, 0x05, Unsupported version,\
    \ [RFC3720]\n   0x02, 0x06, Too many connections, [RFC3720]\n   0x02, 0x07, Missing\
    \ parameter, [RFC3720]\n   0x02, 0x08, Can't include in session, [RFC3720]\n \
    \  0x02, 0x09, Unsupported session type, [RFC3720]\n   0x02, 0x0a, Non-existent\
    \ session, [RFC3720]\n   0x02, 0x0b, Invalid during login, [RFC3720]\n   12-255:\
    \ range reserved by IANA for assignment in Status-Class=2 sub-\n   registry.\n\
    \   Initial sub-registry contents (Status-Detail for Status-Class=0x03):\n   0x03,\
    \ 0x00, Target error, [RFC3720]\n   0x03, 0x01, Service unavailable, [RFC3720]\n\
    \   0x03, 0x02, Out of resources, [RFC3720]\n   3-255: range reserved by IANA\
    \ for assignment in Status-Class=3 sub-\n   registry.\n   Allocation Policy:\n\
    \   Standards Action ([IANA])\n"
- title: 11.7.  iSCSI Reject Reason Codes
  contents:
  - "11.7.  iSCSI Reject Reason Codes\n   Name of the registry: \"iSCSI Reject Reason\
    \ Codes\"\n   Namespace details: Numerical values that can fit in a single octet.\n\
    \   Information that must be provided to assign a new value: A published\n   specification\
    \ defining the semantics and interoperability\n   requirements of the proposed\
    \ new Code and the fields to be recorded\n   in the registry.\n   Assignment policy:\n\
    \   If the requested value is not already assigned, it may be assigned to\n  \
    \ the requester.\n   13-255: range reserved by IANA for assignment in this registry.\n\
    \   Fields to record in the registry: Assigned Code, Description, and its\n  \
    \ associated RFC reference.\n   Initial registry contents:\n   0x01, Reserved,\
    \ [RFC3720]\n   0x02, Data digest error, [RFC3720]\n   0x03, SNACK Reject, [RFC3720]\n\
    \   0x04, Protocol Error, [RFC3720]\n   0x05, Command not supported, [RFC3720]\n\
    \   0x06, Immediate command reject, [RFC3720]\n   0x07, Task in progress, [RFC3720]\n\
    \   0x08, Invalid data ack, [RFC3720]\n   0x09, Invalid PDU field, [RFC3720]\n\
    \   0x0a, Long op reject, [RFC3720]\n   0x0b, \"Deprecated reason code\", this\
    \ document\n   0x0c, Waiting for Logout, [RFC3720]\n   Allocation Policy:\n  \
    \ Standards Action ([IANA])\n"
- title: 11.8.  iSER Opcodes
  contents:
  - "11.8.  iSER Opcodes\n   Name of the registry: \"iSER Opcodes\"\n   Namespace\
    \ details: Numerical values that can fit in 4 bits.\n   Information that must\
    \ be provided to assign a new value: An IESG-\n   approved specification defining\
    \ the semantics and interoperability\n   requirements of the proposed new value\
    \ and the fields to be recorded\n   in the registry.\n   Assignment policy:\n\
    \   If the requested value is not already assigned, it may be assigned to\n  \
    \ the requester.\n   4-15: range reserved by IANA for assignment in this registry.\n\
    \   Fields to record in the registry: Assigned value, Operation Name, and\n  \
    \ its associated RFC reference.\n   Initial registry contents:\n   0x1, iSCSI\
    \ control-type, [iSER]\n   0x2, iSER Hello, [iSER]\n   0x3, iSER HelloReply, [iSER]\n\
    \   Allocation Policy:\n   Standards Action ([IANA])\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC3720] Satran, J., Meth, K., Sapuntzakis,\
    \ C., Chadalapaka, M., and\n             E. Zeidner, \"Internet Small Computer\
    \ Systems Interface\n             (iSCSI)\", RFC 3720, April 2004.\n   [SPC3]\
    \    ANSI INCITS 408-2005, SCSI Primary Commands-3.\n   [RFC2119] Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n             Requirement Levels\",\
    \ BCP 14, RFC 2119, March 1997.\n   [IANA]    Narten, T. and H. Alvestrand, \"\
    Guidelines for Writing an\n             IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 2434,\n             October 1998.\n   [iSER]    Ko, M., Chadalapaka,\
    \ M., Hufferd, J., Elzur, U., Shah, H.,\n             and P. Thaler, \"Internet\
    \ Small Computer System Interface\n             (iSCSI) Extensions for Remote\
    \ Direct Memory Access (RDMA)\",\n             RFC 5046, October 2007.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC3721] Bakke, M., Hafner, J., Hufferd, J.,\
    \ Voruganti, K., and M.\n             Krueger, \"Internet Small Computer Systems\
    \ Interface (iSCSI)\n             Naming and Discovery\", RFC 3721, April 2004.\n\
    \   [RFC3723] Aboba, B., Tseng, J., Walker, J., Rangan, V., and F.\n         \
    \    Travostino, \"Securing Block Storage Protocols over IP\", RFC\n         \
    \    3723, April 2004.\n   [RFC3722] Bakke, M., \"String Profile for Internet\
    \ Small Computer\n             Systems Interface (iSCSI) Names\", RFC 3722, April\
    \ 2004.\n   [SAM2]    ANSI INCITS 366-2003, SCSI Architecture Model-2 (SAM-2).\n\
    \   [SAM3]    ANSI INCITS 402-2005, SCSI Architecture Model-3 (SAM-a3).\n   [SAM4]\
    \    T10 Project: 1683-D, SCSI Architecture Model-4 (SAM-4),\n             Work\
    \ in Progress.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The IP Storage (IPS) Working Group in the Transport Area\
    \ of the IETF\n   has been responsible for defining the iSCSI protocol (apart\
    \ from a\n   host of other relevant IP Storage protocols).  The editor\n   acknowledges\
    \ the contributions of the entire working group.\n   The following individuals\
    \ directly contributed to identifying\n   [RFC3720] issues and/or suggesting resolutions\
    \ to the issues\n   clarified in this document: David Black, Gwendal Grignou,\
    \ Mike Ko,\n   Dmitry Fomichev, Bill Studenmund, Ken Sandars, Bob Russell, Julian\n\
    \   Satran, Rob Elliott, Joseph Pittman, Somesh Gupta, Eddy Quicksall,\n   Paul\
    \ Koning.  This document benefited from all of these\n   contributions.\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Mallikarjun Chadalapaka\n   Hewlett-Packard Company\n  \
    \ 8000 Foothills Blvd.\n   Roseville, CA 95747-5668, USA\n   Phone: +1-916-785-5621\n\
    \   EMail: cbm@rose.hp.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
