This document provides LDAP [RFC4510] schema definitions [RFC4512] for a subset of elements specified in X.509 [X.509] and X.521 [X.521], including attribute types for certificates, cross certificate pairs, and certificate revocation lists; matching rules to be used with these attribute types; and related object classes.
LDAP syntax definitions are also provided for associated assertion and attribute values.
As the semantics of these elements are as defined in X.509 and X.521, knowledge of X.509 and X.521 is necessary to make use of the LDAP schema definitions provided herein.
This document, together with [RFC4510], obsoletes RFCs 2252 and 2256 in their entirety.
The changes (in this document) made since RFC 2252 and RFC 2256 include:  addition of pkiUser, pkiCA, and deltaCRL classes;  update of attribute types to include equality matching rules in accordance with their X.500 specifications;  addition of certificate, certificate pair, certificate list, and algorithm identifier matching rules; and  addition of LDAP syntax for assertion syntaxes for these matching rules.
This document obsoletes RFC 2587.
The X.509 schema descriptions for LDAPv2
[RFC1777] are Historic, as is
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
Schema definitions are provided using LDAP description formats [RFC4512].
Definitions provided here are formatted (line wrapped) for readability.
This section describes various syntaxes used in LDAP to transfer certificates and related data types.
Certificate ( 1.3.6.1.4.1.1466.115.121.1.8 DESC 'X.509 Certificate' )
A value of this syntax is an X.509 Certificate [X.509, clause 7].
Due to changes made to the definition of a Certificate through time, no LDAP specific encoding is defined for this syntax.
Values of this syntax SHOULD be encoded using Distinguished Encoding Rules (DER) [X.690] and MUST only be transferred using the ;binary transfer option [RFC4522]; that is, by requesting and returning values using attribute descriptions such as "userCertificate;binary".
As values of this syntax contain digitally signed data, values of this syntax and the form of each value MUST be preserved as presented.
CertificateList ( 1.3.6.1.4.1.1466.115.121.1.9 DESC 'X.509 Certificate List' )
A value of this syntax is an X.509 CertificateList [X.509, clause 7.3].
Due to changes made to the definition of a CertificateList through time, no LDAP specific encoding is defined for this syntax.
Values of this syntax SHOULD be encoded using DER [X.690] and MUST only be transferred using the ;binary transfer option [RFC4522]; that is, by requesting and returning values using attribute descriptions such as "certificateRevocationList;binary".
As values of this syntax contain digitally signed data, values of this syntax and the form of each value MUST be preserved as presented.
CertificatePair ( 1.3.6.1.4.1.1466.115.121.1.10 DESC 'X.509 Certificate Pair' )
A value of this syntax is an X.509 CertificatePair [X.509, clause 11.2.3].
Due to changes made to the definition of an X.509 CertificatePair through time, no LDAP specific encoding is defined for this syntax.
Values of this syntax SHOULD be encoded using DER [X.690] and MUST only be transferred using the ;binary transfer option [RFC4522]; that is, by requesting and returning values using attribute descriptions such as "crossCertificatePair;binary".
As values of this syntax contain digitally signed data, values of this syntax and the form of each value MUST be preserved as presented.
SupportedAlgorithm ( 1.3.6.1.4.1.1466.115.121.1.49 DESC 'X.509 Supported Algorithm' )
A value of this syntax is an X.509 SupportedAlgorithm [X.509, clause 11.2.7].
Due to changes made to the definition of an X.509 SupportedAlgorithm through time, no LDAP specific encoding is defined for this syntax.
Values of this syntax SHOULD be encoded using DER [X.690] and MUST only be transferred using the ;binary transfer option [RFC4522]; that is, by requesting and returning values using attribute descriptions such as "supportedAlgorithms;binary".
As values of this syntax contain digitally signed data, values of this syntax and the form of the value MUST be preserved as presented.
( 1.3.6.1.1.15.1 DESC 'X.509 Certificate Exact Assertion' )
A value of this syntax is an X.509 CertificateExactAssertion [X.509, clause 11.3.1].
Values of this syntax MUST be encoded using the Generic String Encoding Rules (GSER) [RFC3641].
Appendix A.1 provides an equivalent Augmented Backus Naur Form (ABNF)
[RFC4234] grammar for this syntax.
CertificateAssertion ( 1.3.6.1.1.15.2 DESC 'X.509 Certificate Assertion' )
A value of this syntax is an X.509 CertificateAssertion [X.509, clause 11.3.2].
Values of this syntax MUST be encoded using GSER [RFC3641].
Appendix A.2 provides an equivalent ABNF [RFC4234] grammar for this syntax.
CertificatePairExactAssertion ( 1.3.6.1.1.15.3 DESC 'X.509 Certificate Pair Exact Assertion' )
A value of this syntax is an X.509 CertificatePairExactAssertion [X.509, clause 11.3.3].
Values of this syntax MUST be encoded using GSER [RFC3641].
Appendix A.3 provides an equivalent ABNF [RFC4234] grammar for this syntax.
CertificatePairAssertion ( 1.3.6.1.1.15.4 DESC 'X.509 Certificate Pair Assertion' )
A value of this syntax is an X.509 CertificatePairAssertion [X.509, clause 11.3.4].
Values of this syntax MUST be encoded using GSER [RFC3641].
Appendix A.4 provides an equivalent ABNF [RFC4234] grammar for this syntax.
CertificateListExactAssertion ( 1.3.6.1.1.15.5 DESC 'X.509 Certificate List Exact Assertion' )
A value of this syntax is an X.509 CertificateListExactAssertion [X.509, clause 11.3.5].
Values of this syntax MUST be encoded using GSER [RFC3641].
Appendix A.5 provides an equivalent ABNF grammar for this syntax.
CertificateListAssertion ( 1.3.6.1.1.15.6 DESC 'X.509 Certificate List Assertion' )
A value of this syntax is an X.509 CertificateListAssertion [X.509, clause 11.3.6].
Values of this syntax MUST be encoded using GSER [RFC3641].
Appendix A.6 provides an equivalent ABNF [RFC4234] grammar for this syntax.
AlgorithmIdentifier ( 1.3.6.1.1.15.7 DESC 'X.509 Algorithm Identifier' )
A value of this syntax is an X.509 AlgorithmIdentifier [X.509, Clause 7].
Values of this syntax MUST be encoded using GSER [RFC3641].
Appendix A.7 provides an equivalent ABNF [RFC4234] grammar for this syntax.
This section introduces a set of certificate and related matching rules for use in LDAP.
These rules are intended to act in accordance with their X.500 counterparts.
The certificateExactMatch matching rule compares the presented certificate exact assertion value with an attribute value of the certificate syntax as described in clause 11.3.1 of [X.509].
( 2.5.13.34 NAME 'certificateExactMatch' DESC 'X.509 Certificate Exact Match' SYNTAX 1.3.6.1.1.15.1 )
The certificateMatch matching rule compares the presented certificate assertion value with an attribute value of the certificate syntax as described in clause 11.3.2 of [X.509].
( 2.5.13.35 NAME 'certificateMatch' DESC 'X.509 Certificate Match' SYNTAX 1.3.6.1.1.15.2 ) 3.3.
certificatePairExactMatch The certificatePairExactMatch matching rule compares the presented certificate pair exact assertion value with an attribute value of the certificate pair syntax as described in clause 11.3.3 of [X.509].
( 2.5.13.36 NAME 'certificatePairExactMatch' DESC 'X.509 Certificate Pair Exact Match' SYNTAX 1.3.6.1.1.15.3 ) 3.4.
The certificatePairMatch matching rule compares the presented certificate pair assertion value with an attribute value of the certificate pair syntax as described in clause 11.3.4 of [X.509].
( 2.5.13.37 NAME 'certificatePairMatch' DESC 'X.509 Certificate Pair Match' SYNTAX 1.3.6.1.1.15.4 ) 3.5.
The certificateListExactMatch matching rule compares the presented certificate list exact assertion value with an attribute value of the certificate pair syntax as described in clause 11.3.5 of [X.509].
( 2.5.13.38 NAME 'certificateListExactMatch' DESC 'X.509 Certificate List Exact Match' SYNTAX 1.3.6.1.1.15.5 ) 3.6.
The certificateListMatch matching rule compares the presented certificate list assertion value with an attribute value of the certificate pair syntax as described in clause 11.3.6 of [X.509].
( 2.5.13.39 NAME 'certificateListMatch' DESC 'X.509 Certificate List Match' SYNTAX 1.3.6.1.1.15.6 ) 3.7.
The algorithmIdentifierMatch mating rule compares a presented algorithm identifier with an attribute value of the supported algorithm as described in clause 11.3.7 of [X.509].
( 2.5.13.40 NAME 'algorithmIdentifier' DESC 'X.509 Algorithm Identifier Match' SYNTAX 1.3.6.1.1.15.7 )
This section details a set of certificate and related attribute types for use in LDAP.
The userCertificate attribute holds the X.509 certificates issued to the user by one or more certificate authorities, as discussed in clause 11.2.1 of [X.509].
( 2.5.4.36 NAME 'userCertificate' DESC 'X.509 user certificate' EQUALITY certificateExactMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.8 )
As required by this attribute type's syntax, values of this attribute are requested and transferred using the attribute description "userCertificate;binary".
cACertificate The cACertificate attribute holds the X.509 certificates issued to the certificate authority (CA), as discussed in clause 11.2.2 of [X.509].
( 2.5.4.37 NAME 'cACertificate' DESC 'X.509 CA certificate' EQUALITY certificateExactMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.8 )
As required by this attribute type's syntax, values of this attribute are requested and transferred using the attribute description "cACertificate;binary".
The crossCertificatePair attribute holds an X.509 certificate pair, as discussed in clause 11.2.3 of [X.509].
( 2.5.4.40 NAME 'crossCertificatePair' DESC 'X.509 cross certificate pair' EQUALITY certificatePairExactMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.10 )
As required by this attribute type's syntax, values of this attribute are requested and transferred using the attribute description "crossCertificatePair;binary".
The certificateRevocationList attribute holds certificate lists, as discussed in 11.2.4 of [X.509].
( 2.5.4.39 NAME 'certificateRevocationList' DESC 'X.509 certificate revocation list' EQUALITY certificateListExactMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.9 )
As required by this attribute type's syntax, values of this attribute are requested and transferred using the attribute description "certificateRevocationList;binary".
The authorityRevocationList attribute holds certificate lists, as discussed in 11.2.5 of [X.509].
( 2.5.4.38 NAME 'authorityRevocationList' DESC 'X.509 authority revocation list' EQUALITY certificateListExactMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.9 )
As required by this attribute type's syntax, values of this attribute are requested and transferred using the attribute description "authorityRevocationList;binary".
The deltaRevocationList attribute holds certificate lists, as discussed in 11.2.6 of [X.509].
( 2.5.4.53 NAME 'deltaRevocationList' DESC 'X.509 delta revocation list' EQUALITY certificateListExactMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.9 ) As required by this attribute type's syntax, values of this attribute MUST be requested and transferred using the attribute description "deltaRevocationList;binary".
The supportedAlgorithms attribute holds supported algorithms, as discussed in 11.2.7 of [X.509].
( 2.5.4.52 NAME 'supportedAlgorithms' DESC 'X.509 supported algorithms' EQUALITY
As required by this attribute type's syntax, values of this attribute MUST be requested and transferred using the attribute description "supportedAlgorithms;binary".
This section details a set of certificate related object classes for use in LDAP.
pkiUser This object class is used in augment entries for objects that may be subject to certificates, as defined in clause 11.1.1 of [X.509].
( 2.5.6.21 NAME 'pkiUser' DESC 'X.509 PKI User' SUP top AUXILIARY MAY userCertificate )
This object class is used to augment entries for objects that act as certificate authorities, as defined in clause 11.1.2 of [X.509] ( 2.5.6.22 NAME 'pkiCA' DESC 'X.509 PKI Certificate Authority' SUP top AUXILIARY MAY ( cACertificate $ certificateRevocationList $ authorityRevocationList $ crossCertificatePair ) )
This class is used to represent objects that act as CRL distribution points, as discussed in clause 11.1.3 of [X.509].
( 2.5.6.19 NAME 'cRLDistributionPoint' DESC 'X.509 CRL distribution point' SUP top STRUCTURAL MUST cn MAY
( certificateRevocationList $ authorityRevocationList $ deltaRevocationList ) )
The deltaCRL object class is used to augment entries to hold delta revocation lists, as discussed in clause 11.1.4 of [X.509].
( 2.5.6.23 NAME 'deltaCRL' DESC 'X.509 delta CRL' SUP top AUXILIARY
This object class is used to augment entries for objects participating in certificate based authentication, as defined in clause 6.15 of [X.521].
This object class is deprecated in favor of pkiUser.
( 2.5.6.15 NAME 'strongAuthenticationUser' DESC '
X.521 strong authentication user' SUP top AUXILIARY MUST userCertificate )
This object class is used to augment entries with needed additional associated security information, as defined in clause 6.16 of [X.521].
This object class is used to augment entries for objects that act as certificate authorities, as defined in clause 6.17 of [X.521].
This object class is deprecated in favor of pkiCA.
( 2.5.6.16 NAME 'certificationAuthority' DESC 'X.509 certificate authority' SUP top AUXILIARY MUST ( authorityRevocationList
$ certificateRevocationList $ cACertificate )
This object class is used to augment entries for objects that act as certificate authorities, as defined in clause 6.18 of [X.521].
This object class is deprecated in favor of pkiCA.
( 2.5.6.16.2 NAME 'certificationAuthority V2' DESC 'X.509 certificate authority, version 2' SUP certificationAuthority AUXILIARY MAY deltaRevocationList )
Security Considerations General certificate considerations
[RFC3280] apply to LDAP aware certificate applications.
While elements of certificate information are commonly signed, these signatures only protect the integrity of the signed information.
In the absence of data integrity protections in LDAP (or lower layer, e.g., IPsec), a server is not assured that client certificate request (or other request) was unaltered in transit.
Likewise, a client cannot be assured that the results of the query were unaltered in transit.
Hence, it is generally recommended that implementations make use of authentication and data integrity services in LDAP [RFC4513][RFC4511].
The IANA has registered an LDAP Object Identifier [RFC4520] for use in this technical specification.
Request for LDAP OID Registration Person & email address to contact for further information:
Identifies the LDAP X.509 Certificate schema elements introduced in this document.
The IANA has updated the LDAP Descriptor registry [RFC44520] as indicated below.
Request for LDAP Descriptor Registration Descriptor (short name): see table Object Identifier: see table Person & email address to contact for further information:
Kurt Zeilenga <kurt@OpenLDAP.org> Usage: see table Specification:
RFC 4523 Author/Change Controller: IESG algorithmIdentifierMatch
M 2.5.13.35 certificatePairExactMatch    M 2.5.13.36 certificatePairMatch
This appendix provides ABNF [RFC4234] grammars for GSER based [RFC3641] LDAP specific encodings specified in this document.
These grammars where produced using, and relying on, Common Elements for GSER Encodings [RFC3642].
serialNumber msp CertificateSerialNumber cea issuer
sep sp ca subjectKeyIdentifier ]
[ sep sp ca certificateValid ]
[ sep sp ca subjectAltName ]
[ sep sp ca policy ]
[ sep sp ca pathToName ]
[ sep sp ca subject ]
subjectPublicKeyAlgID msp OBJECT IDENTIFIER ca keyUsage
d keyUsage msp KeyUsage ca subjectAltName
id subjectAltName msp AltNameType ca policy
subjectKeyIdentifier' id authorityKeyIdentifier   %x61.75.74.68.6F.72.69.74.79.4B.65.79.49.64.65.6E.74.69.66.69.65.72 ; 'authorityKeyIdentifier
' id certificateValid   %x63.65.72.74.69.66.69.63.61.74.65.56.61.6C.69.64 ; 'certificateValid
'keyUsage' id subjectAltName   %x73.75.62.6A.65.63.74.41.6C.74.4E.61.6D.65 ; 'subjectAltName' id policy   %x70.6F.6C.69.63.79 ;
' id subject   %x73.75.62.6A.65.63.74 ; 'subject' id nameConstraints
[ sep sp aki authorityCertIssuer ]
keyIdentifier msp KeyIdentifier aki authorityCertIssuer
otherName / gn rfc822Name / gn
/ gn x400Address / gn directoryName / gn
" OCTET STRING gn registeredID
" OBJECT IDENTIFIER gn uniformResourceIdentifier
d registeredID   %x72.65.67.69.73.74.65.72.65.64.49.44 ; '
msp OBJECT IDENTIFIER on value
;; Note: The <ORAddress> rule encodes the x400Address component ;; of a GeneralName as a character string between double quotes.
;; The character string is first derived according to Section 4.1 ;; of [RFC2156], and then any embedded double quotes are escaped ;; by being repeated.
This resulting string is output between ;; double quotes.
DirectoryString id nameAssigner   %x6E.61.6D.65.41.73.73.69.67.6E.65.72 ; 'nameAssigner' i
%x6B.65.79.49.64.65.6E.74.69.66.69.65.72 ; 'keyIdentifier' id authorityCertIssuer   %x61.75.74.68.6F.72.69.74.79.43.65.72.74.49.73.73.75.65.72 ; 'authorityCertIssuer' id authorityCertSerialNumber   %x61.75.74.68.6F.72.69.74.79.43 %x65.72.74.53.65.72.69.61.6C.4E.75.6D.62.65.72 ; 'authorityCertSerialNumber' Time   time utcTime / time generalizedTime time
GeneralizedTime id utcTime   %x75.74.63.54.69.6D.65 ; '
utcTime' id generalizedTime   %x67.65.6E.65.72.61.6C.69.7A.65.64.54.69.6D.65 ; '
;; Note: The <key usage bit list
> rule encodes the one bits in ;; a KeyUsage value as a comma separated list of identifiers.
id keyEncipherment / id dataEncipherment
x64.69.67.69.74.61.6C.53.69.67.6E.61.74 %x75.72.65 ; 'digitalSignature' id nonRepudiation
%x72.66.63.38.32.32.4E.61.6D.65 ; 'rfc822Name' id dNSName
id iPAddress   %x69.50.41.64.64.72.65.73.73 ; 'iPAddress' id registeredId
id base msp GeneralName gs minimum
'base' id minimum   %x6D.69.6E.69.6D.75.6D ; 'minimum' id maximum   %x6D.61.78.69.6D.75.6D ; 'maximum' BaseDistance   INTEGER 0 MAX A.3.
id issuedToThisCAAssertion msp CertificateExactAssertion cpea issuedBy
issuedByThisCAAssertion   %x69.73.73.75.65.64.42.79.54.68.69.73 %x43.41.41.73.73.65.72.74.69.6F.6E ; 'issuedByThisCAAssertion' A.4.
[ sp cpa issuedTo ]
thisUpdate msp Time clea distributionPoint
; 'thisUpdate' id distributionPoint   %x64.69.73.74.72.69.62.75.74.69.6F.6E.50.6F.69.6E.74 ; 'distributionPoint' DistributionPointName
; 'fullName' id nameRelativeToCRLIssuer   %x6E.61.6D.65.52.65.6C.61.74.69.76.65 %x54.6F.43.52.4C.49.73.73.75.65.72 ; 'nameRelativeToCRLIssuer' A.6.
[ sep sp cla maxCRLNumber ]
[ sep sp cla reasonFlags ]
[ sep sp cla dateAndTime ]
[ sep sp cla distributionPoint ]
[ sep sp cla authorityKeyIdentifier ] sp "
id distributionPoint msp DistributionPointName cla
%x6D.69.6E.43.52.4C.4E.75.6D.62.65.72 ; 'minCRLNumber' id maxCRLNumber   %x6D.61.78.43.52.4C.4E.75.6D.62.65.72 ; '
%x72.65.61.73.6F.6E.46.6C.61.67.73 ; 'reasonFlags' id dateAndTime
%x64.61.74.65.41.6E.64.54.69.6D.65 ; 'dateAndTime' CRLNumber   INTEGER 0
id keyCompromise / id cACompromise /
' id superseded   %x73.75.70.65.72.73.65.64.65.64 ; 'superseded' id
" sp ai parameters ] sp "}
algorithm msp OBJECT IDENTIFIER ai parameters
%x61.6C.67.6F.72.69.74.68.6D ; 'algorithm' id parameters
