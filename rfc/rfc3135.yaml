- title: __initial_text__
  contents:
  - "    Performance Enhancing Proxies Intended to Mitigate Link-Related\n       \
    \                       Degradations\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is a survey of Performance Enhancing Proxies (PEPs)\n\
    \   often employed to improve degraded TCP performance caused by\n   characteristics\
    \ of specific link environments, for example, in\n   satellite, wireless WAN,\
    \ and wireless LAN environments.  Different\n   types of Performance Enhancing\
    \ Proxies are described as well as the\n   mechanisms used to improve performance.\
    \  Emphasis is put on proxies\n   operating with TCP.  In addition, motivations\
    \ for their development\n   and use are described along with some of the consequences\
    \ of using\n   them, especially in the context of the Internet.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2. Types of Performance Enhancing Proxies  . . . . . . .\
    \ . . . . .  4\n   2.1 Layering . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   2.1.1 Transport Layer PEPs . . . . . . . . . . . . . . . . .\
    \ . . .  5\n   2.1.2 Application Layer PEPs . . . . . . . . . . . . . . . . .\
    \ . .  5\n   2.2 Distribution . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n   2.3 Implementation Symmetry  . . . . . . . . . . . . . . . . . . .\
    \  6\n   2.4 Split Connections  . . . . . . . . . . . . . . . . . . . . . .  7\n\
    \   2.5 Transparency . . . . . . . . . . . . . . . . . . . . . . . . .  8\n  \
    \ 3. PEP Mechanisms  . . . . . . . . . . . . . . . . . . . . . . . .  9\n   3.1\
    \ TCP ACK Handling . . . . . . . . . . . . . . . . . . . . . . .  9\n   3.1.1\
    \ TCP ACK Spacing  . . . . . . . . . . . . . . . . . . . . . .  9\n   3.1.2 Local\
    \ TCP Acknowledgements . . . . . . . . . . . . . . . . .  9\n   3.1.3 Local TCP\
    \ Retransmissions  . . . . . . . . . . . . . . . . .  9\n   3.1.4 TCP ACK Filtering\
    \ and Reconstruction . . . . . . . . . . . . 10\n   3.2 Tunneling  . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 10\n   3.3 Compression  . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . 10\n   3.4 Handling Periods of Link Disconnection\
    \ with TCP  . . . . . . . 11\n   3.5 Priority-based Multiplexing  . . . . . .\
    \ . . . . . . . . . . . 12\n   3.6 Protocol Booster Mechanisms  . . . . . . .\
    \ . . . . . . . . . . 13\n   4. Implications of Using PEPs  . . . . . . . . .\
    \ . . . . . . . . . 14\n   4.1 The End-to-end Argument  . . . . . . . . . . .\
    \ . . . . . . . . 14\n   4.1.1 Security . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 14\n   4.1.1.1 Security Implications  . . . . . . . . . . . .\
    \ . . . . . . 15\n   4.1.1.2 Security Implication Mitigations . . . . . . . .\
    \ . . . . . 16\n   4.1.1.3 Security Research Related to PEPs  . . . . . . . .\
    \ . . . . 16\n   4.1.2 Fate Sharing . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 16\n   4.1.3 End-to-end Reliability . . . . . . . . . . . . . . . . .\
    \ . . 17\n   4.1.4 End-to-end Failure Diagnostics . . . . . . . . . . . . . .\
    \ . 19\n   4.2 Asymmetric Routing . . . . . . . . . . . . . . . . . . . . . .\
    \ 19\n   4.3 Mobile Hosts . . . . . . . . . . . . . . . . . . . . . . . . . 20\n\
    \   4.4 Scalability  . . . . . . . . . . . . . . . . . . . . . . . . . 20\n  \
    \ 4.5 Other Implications of Using PEPs . . . . . . . . . . . . . . . 21\n   5.\
    \ PEP Environment Examples  . . . . . . . . . . . . . . . . . . . 21\n   5.1 VSAT\
    \ Environments  . . . . . . . . . . . . . . . . . . . . . . 21\n   5.1.1 VSAT\
    \ Network Characteristics . . . . . . . . . . . . . . . . 22\n   5.1.2 VSAT Network\
    \ PEP Implementations . . . . . . . . . . . . . . 23\n   5.1.3 VSAT Network PEP\
    \ Motivation  . . . . . . . . . . . . . . . . 24\n   5.2 W-WAN Environments .\
    \ . . . . . . . . . . . . . . . . . . . . . 25\n   5.2.1 W-WAN Network Characteristics\
    \  . . . . . . . . . . . . . . . 25\n   5.2.2 W-WAN PEP Implementations  . . .\
    \ . . . . . . . . . . . . . . 26\n   5.2.2.1 Mowgli System  . . . . . . . . .\
    \ . . . . . . . . . . . . . 26\n   5.2.2.2 Wireless Application Protocol (WAP)\
    \  . . . . . . . . . . . 28\n   5.2.3 W-WAN PEP Motivation . . . . . . . . . .\
    \ . . . . . . . . . . 29\n   5.3 W-LAN Environments . . . . . . . . . . . . .\
    \ . . . . . . . . . 30\n   5.3.1 W-LAN Network Characteristics  . . . . . . .\
    \ . . . . . . . . 30\n   5.3.2 W-LAN PEP Implementations: Snoop . . . . . . .\
    \ . . . . . . . 31\n   5.3.3 W-LAN PEP Motivation . . . . . . . . . . . . . .\
    \ . . . . . . 33\n   6. Security Considerations . . . . . . . . . . . . . . .\
    \ . . . . . 34\n   7. IANA Considerations . . . . . . . . . . . . . . . . . .\
    \ . . . . 34\n   8. Acknowledgements  . . . . . . . . . . . . . . . . . . . .\
    \ . . . 34\n   9. References  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 35\n   10. Authors' Addresses . . . . . . . . . . . . . . . . . . . . .\
    \ . 39\n   Appendix A - PEP Terminology Summary . . . . . . . . . . . . . . .\
    \ 41\n   Full Copyright Statement . . . . . . . . . . . . . . . . . . . . . 45\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Transmission Control Protocol [RFC0793] (TCP) is used\
    \ as the\n   transport layer protocol by many Internet and intranet applications.\n\
    \   However, in certain environments, TCP and other higher layer protocol\n  \
    \ performance is limited by the link characteristics of the\n   environment.\n\
    \   This document is a survey of Performance Enhancing Proxy (PEP)\n   performance\
    \ migitigation techniques.  A PEP is used to improve the\n   performance of the\
    \ Internet protocols on network paths where native\n   performance suffers due\
    \ to characteristics of a link or subnetwork on\n   the path.  This document is\
    \ informational and does not make\n   recommendations about using PEPs or not\
    \ using them.  Distinct\n   standards track recommendations for the performance\
    \ mitigation of TCP\n   over links with high error rates, links with low bandwidth,\
    \ and so\n   on, have been developed or are in development by the Performance\n\
    \   Implications of Link Characteristics WG (PILC) [PILCWEB].\n   Link design\
    \ choices may have a significant influence on the\n   performance and efficiency\
    \ of the Internet.  However, not all link\n   characteristics, for example, high\
    \ latency, can be compensated for by\n   choices in the link layer design.  And,\
    \ the cost of compensating for\n   some link characteristics may be prohibitive\
    \ for some technologies.\n   The techniques surveyed here are applied to existing\
    \ link\n   technologies.  When new link technologies are designed, they should\n\
    \   be designed so that these techniques are not required, if at all\n   possible.\n\
    \   This document does not advocate the use of PEPs in any general case.\n   On\
    \ the contrary, we believe that the end-to-end principle in\n   designing Internet\
    \ protocols should be retained as the prevailing\n   approach and PEPs should\
    \ be used only in specific environments and\n   circumstances where end-to-end\
    \ mechanisms providing similar\n   performance enhancements are not available.\
    \  In any environment where\n   one might consider employing a PEP for improved\
    \ performance, an end\n   user (or, in some cases, the responsible network administrator)\n\
    \   should be aware of the PEP and the choice of employing PEP\n   functionality\
    \ should be under the control of the end user, especially\n   if employing the\
    \ PEP would interfere with end-to-end usage of IP\n   layer security mechanisms\
    \ or otherwise have undesirable implications\n   in some circumstances.  This\
    \ would allow the user to choose end-to-\n   end IP at all times but, of course,\
    \ without the performance\n   enhancements that employing the PEP may yield.\n\
    \   This survey does not make recommendations, for or against, with\n   respect\
    \ to using PEPs.  Standards track recommendations have been or\n   are being developed\
    \ within the IETF for individual link\n   characteristics, e.g., links with high\
    \ error rates, links with low\n   bandwidth, links with asymmetric bandwidth,\
    \ etc., by the Performance\n   Implications of Link Characteristics WG (PILC)\
    \ [PILCWEB].\n   The remainder of this document is organized as follows.  Section\
    \ 2\n   provides an overview of different kinds of PEP implementations.\n   Section\
    \ 3 discusses some of the mechanisms which PEPs may employ in\n   order to improve\
    \ performance.  Section 4 discusses some of the\n   implications with respect\
    \ to using PEPs, especially in the context of\n   the global Internet.  Finally,\
    \ Section 5 discusses some example\n   environments where PEPs are used: satellite\
    \ very small aperture\n   terminal (VSAT) environments, mobile wireless WAN (W-WAN)\n\
    \   environments and wireless LAN (W-LAN) environments.  A summary of PEP\n  \
    \ terminology is included in an appendix (Appendix A).\n"
- title: 2. Types of Performance Enhancing Proxies
  contents:
  - "2. Types of Performance Enhancing Proxies\n   There are many types of Performance\
    \ Enhancing Proxies.  Different\n   types of PEPs are used in different environments\
    \ to overcome\n   different link characteristics which affect protocol performance.\n\
    \   Note that enhancing performance is not necessarily limited in scope\n   to\
    \ throughput.  Other performance related aspects, like usability of\n   a link,\
    \ may also be addressed.  For example, [M-TCP] addresses the\n   issue of keeping\
    \ TCP connections alive during periods of\n   disconnection in wireless networks.\n\
    \   The following sections describe some of the key characteristics which\n  \
    \ differentiate different types of PEPs.\n"
- title: 2.1 Layering
  contents:
  - "2.1 Layering\n   In principle, a PEP implementation may function at any protocol\
    \ layer\n   but typically it functions at one or two layers only.  In this\n \
    \  document we focus on PEP implementations that function at the\n   transport\
    \ layer or at the application layer as such PEPs are most\n   commonly used to\
    \ enhance performance over links with problematic\n   characteristics.  A PEP\
    \ implementation may also operate below the\n   network layer, that is, at the\
    \ link layer, but this document pays\n   only little attention to such PEPs as\
    \ link layer mechanisms can be\n   and typically are implemented transparently\
    \ to network and higher\n   layers, requiring no modifications to protocol operation\
    \ above the\n   link layer.  It should also be noted that some PEP implementations\n\
    \   operate across several protocol layers by exploiting the protocol\n   information\
    \ and possibly modifying the protocol operation at more\n   than one layer.  For\
    \ such a PEP it may be difficult to define at\n   which layer(s) it exactly operates\
    \ on.\n"
- title: 2.1.1 Transport Layer PEPs
  contents:
  - "2.1.1 Transport Layer PEPs\n   Transport layer PEPs operate at the transport\
    \ level.  They may be\n   aware of the type of application being carried by the\
    \ transport layer\n   but, at most, only use this information to influence their\
    \ behavior\n   with respect to the transport protocol; they do not modify the\n\
    \   application protocol in any way, but let the application protocol\n   operate\
    \ end-to-end.  Most transport layer PEP implementations\n   interact with TCP.\
    \  Such an implementation is called a TCP\n   Performance Enhancing Proxy (TCP\
    \ PEP).  For example, in an\n   environment where ACKs may bunch together causing\
    \ undesirable data\n   segment bursts, a TCP PEP may be used to simply modify\
    \ the ACK\n   spacing in order to improve performance.  On the other hand, in\
    \ an\n   environment with a large bandwidth*delay product, a TCP PEP may be\n\
    \   used to alter the behavior of the TCP connection by generating local\n   acknowledgments\
    \ to TCP data segments in order to improve the\n   connection's throughput.\n\
    \   The term TCP spoofing is sometimes used synonymously for TCP PEP\n   functionality.\
    \  However, the term TCP spoofing more accurately\n   describes the characteristic\
    \ of intercepting a TCP connection in the\n   middle and terminating the connection\
    \ as if the interceptor is the\n   intended destination.  While this is a characteristic\
    \ of many TCP PEP\n   implementations, it is not a characteristic of all TCP PEP\n\
    \   implementations.\n"
- title: 2.1.2 Application Layer PEPs
  contents:
  - "2.1.2 Application Layer PEPs\n   Application layer PEPs operate above the transport\
    \ layer.  Today,\n   different kinds of application layer proxies are widely used\
    \ in the\n   Internet.  Such proxies include Web caches and relay Mail Transfer\n\
    \   Agents (MTA) and they typically try to improve performance or service\n  \
    \ availability and reliability in general and in a way which is\n   applicable\
    \ in any environment but they do not necessarily include any\n   optimizations\
    \ that are specific to certain link characteristics.\n   Application layer PEPs,\
    \ on the other hand, can be implemented to\n   improve application protocol as\
    \ well as transport layer performance\n   with respect to a particular application\
    \ being used with a particular\n   type of link.  An application layer PEP may\
    \ have the same\n   functionality as the corresponding regular proxy for the same\n\
    \   application (e.g., relay MTA or Web caching proxy) but extended with\n   link-specific\
    \ optimizations of the application protocol operation.\n   Some application protocols\
    \ employ extraneous round trips, overly\n   verbose headers and/or inefficient\
    \ header encoding which may have a\n   significant impact on performance, in particular,\
    \ with long delay and\n   slow links.  This unnecessary overhead can be reduced,\
    \ in general or\n   for a particular type of link, by using an application layer\
    \ PEP in\n   an intermediate node.  Some examples of application layer PEPs which\n\
    \   have been shown to improve performance on slow wireless WAN links are\n  \
    \ described in [LHKR96] and [CTC+97].\n"
- title: 2.2 Distribution
  contents:
  - "2.2 Distribution\n   A PEP implementation may be integrated, i.e., it comprises\
    \ a single\n   PEP component implemented within a single node, or distributed,\
    \ i.e.,\n   it comprises two or more PEP components, typically implemented in\n\
    \   multiple nodes.  An integrated PEP implementation represents a single\n  \
    \ point at which performance enhancement is applied.  For example, a\n   single\
    \ PEP component might be implemented to provide impedance\n   matching at the\
    \ point where wired and wireless links meet.\n   A distributed PEP implementation\
    \ is generally used to surround a\n   particular link for which performance enhancement\
    \ is desired.  For\n   example, a PEP implementation for a satellite connection\
    \ may be\n   distributed between two PEPs located at each end of the satellite\n\
    \   link.\n"
- title: 2.3 Implementation Symmetry
  contents:
  - "2.3 Implementation Symmetry\n   A PEP implementation may be symmetric or asymmetric.\
    \  Symmetric PEPs\n   use identical behavior in both directions, i.e., the actions\
    \ taken by\n   the PEP occur independent from which interface a packet is received.\n\
    \   Asymmetric PEPs operate differently in each direction.  The direction\n  \
    \ can be defined in terms of the link (e.g., from a central site to a\n   remote\
    \ site) or in terms of protocol traffic (e.g., the direction of\n   TCP data flow,\
    \ often called the TCP data channel, or the direction of\n   TCP ACK flow, often\
    \ called the TCP ACK channel).  An asymmetric PEP\n   implementation is generally\
    \ used at a point where the characteristics\n   of the links on each side of the\
    \ PEP differ or with asymmetric\n   protocol traffic.  For example, an asymmetric\
    \ PEP might be placed at\n   the intersection of wired and wireless networks or\
    \ an asymmetric\n   application layer PEP might be used for the request-reply\
    \ type of\n   HTTP traffic.  A PEP implementation may also be both symmetric and\n\
    \   asymmetric at the same time with regard to different mechanisms it\n   employs.\
    \  (PEP mechanisms are described in Section 3.)\n   Whether a PEP implementation\
    \ is symmetric or asymmetric is\n   independent of whether the PEP implementation\
    \ is integrated or\n   distributed.  In other words, a distributed PEP implementation\
    \ might\n   operate symmetrically at each end of a link (i.e., the two PEPs\n\
    \   function identically).  On the other hand, a distributed PEP\n   implementation\
    \ might operate asymmetrically, with a different PEP\n   implementation at each\
    \ end of the link.  Again, this usually is used\n   with asymmetric links.  For\
    \ example, for a link with an asymmetric\n   amount of bandwidth available in\
    \ each direction, the PEP on the end\n   of the link forwarding traffic in the\
    \ direction with a large amount\n   of bandwidth might focus on locally acknowledging\
    \ TCP traffic in\n   order to use the available bandwidth.  At the same time,\
    \ the PEP on\n   the end of the link forwarding traffic in the direction with\
    \ very\n   little bandwidth might focus on reducing the amount of TCP\n   acknowledgement\
    \ traffic being forwarded across the link (to keep the\n   link from congesting).\n"
- title: 2.4 Split Connections
  contents:
  - "2.4 Split Connections\n   A split connection TCP implementation terminates the\
    \ TCP connection\n   received from an end system and establishes a corresponding\
    \ TCP\n   connection to the other end system.  In a distributed PEP\n   implementation,\
    \ this is typically done to allow the use of a third\n   connection between two\
    \ PEPs optimized for the link.  This might be a\n   TCP connection optimized for\
    \ the link or it might be another\n   protocol, for example, a proprietary protocol\
    \ running on top of UDP.\n   Also, the distributed implementation might use a\
    \ separate connection\n   between the proxies for each TCP connection or it might\
    \ multiplex the\n   data from multiple TCP connections across a single connection\
    \ between\n   the PEPs.\n   In an integrated PEP split connection TCP implementation,\
    \ the PEP\n   again terminates the connection from one end system and originates\
    \ a\n   separate connection to the other end system.  [I-TCP] documents an\n \
    \  example of a single PEP split connection implementation.\n   Many integrated\
    \ PEPs use a split connection implementation in order\n   to address a mismatch\
    \ in TCP capabilities between two end systems.\n   For example, the TCP window\
    \ scaling option [RFC1323] can be used to\n   extend the maximum amount of TCP\
    \ data which can be \"in flight\" (i.e.,\n   sent and awaiting acknowledgement).\
    \  This is useful for filling a\n   link which has a high bandwidth*delay product.\
    \  If one end system is\n   capable of using scaled TCP windows but the other\
    \ is not, the end\n   system which is not capable can set up its connection with\
    \ a PEP on\n   its side of the high bandwidth*delay link.  The split connection\
    \ PEP\n   then sets up a TCP connection with window scaling over the link to\n\
    \   the other end system.\n   Split connection TCP implementations can effectively\
    \ leverage TCP\n   performance enhancements optimal for a particular link but\
    \ which\n   cannot necessarily be employed safely over the global Internet.\n\
    \   Note that using split connection PEPs does not necessarily exclude\n   simultaneous\
    \ use of IP for end-to-end connectivity.  If a split\n   connection is managed\
    \ per application or per connection and is under\n   the control of the end user,\
    \ the user can decide whether a particular\n   TCP connection or application makes\
    \ use of the split connection PEP\n   or whether it operates end-to-end.  When\
    \ a PEP is employed on a last\n   hop link, the end user control is relatively\
    \ easy to implement.\n   In effect, application layer proxies for TCP-based applications\
    \ are\n   split connection TCP implementations with end systems using PEPs as\
    \ a\n   service related to a particular application.  Therefore, all\n   transport\
    \ (TCP) layer enhancements that are available with split\n   connection TCP implementations\
    \ can also be employed with application\n   layer PEPs in conjunction with application\
    \ layer enhancements.\n"
- title: 2.5 Transparency
  contents:
  - "2.5 Transparency\n   Another key characteristic of a PEP is its degree of transparency.\n\
    \   PEPs may operate totally transparently to the end systems, transport\n   endpoints,\
    \ and/or applications involved (in a connection), requiring\n   no modifications\
    \ to the end systems, transport endpoints, or\n   applications.\n   On the other\
    \ hand, a PEP implementation may require modifications to\n   both ends in order\
    \ to be used.  In between, a PEP implementation may\n   require modifications\
    \ to only one of the ends involved.  Either of\n   these kind of PEP implementations\
    \ is non-transparent, at least to the\n   layer requiring modification.\n   It\
    \ is sometimes useful to think of the degree of transparency of a\n   PEP implementation\
    \ at four levels, transparency with respect to the\n   end systems (network-layer\
    \ transparent PEP), transparency with\n   respect to the transport endpoints (transport-layer\
    \ transparent PEP),\n   transparency with respect to the applications (application-layer\n\
    \   transparent PEP) and transparency with respect to the users.  For\n   example,\
    \ a user who subscribes to a satellite Internet access service\n   may be aware\
    \ that the satellite terminal is providing a performance\n   enhancing service\
    \ even though the TCP/IP stack and the applications\n   in the user's PC are not\
    \ aware of the PEP which implements it.\n   Note that the issue of transparency\
    \ is not the same as the issue of\n   maintaining end-to-end semantics.  For example,\
    \ a PEP implementation\n   which simply uses a TCP ACK spacing mechanism maintains\
    \ the end-to-\n   end semantics of the TCP connection while a split connection\
    \ TCP PEP\n   implementation may not.  Yet, both can be implemented transparently\n\
    \   to the transport endpoints at both ends.  The implications of not\n   maintaining\
    \ the end-to-end semantics, in particular the end-to-end\n   semantics of TCP\
    \ connections, are discussed in Section 4.\n"
- title: 3. PEP Mechanisms
  contents:
  - "3. PEP Mechanisms\n   An obvious key characteristic of a PEP implementation is\
    \ the\n   mechanism(s) it uses to improve performance.  Some examples of PEP\n\
    \   mechanisms are described in the following subsections.  A PEP\n   implementation\
    \ might implement more than one of these mechanisms.\n"
- title: 3.1 TCP ACK Handling
  contents:
  - "3.1 TCP ACK Handling\n   Many TCP PEP implementations are based on TCP ACK manipulation.\
    \  The\n   handling of TCP acknowledgments can differ significantly between\n\
    \   different TCP PEP implementations.  The following subsections\n   describe\
    \ various TCP ACK handling mechanisms.  Many implementations\n   combine some\
    \ of these mechanisms and possibly employ some additional\n   mechanisms as well.\n"
- title: 3.1.1 TCP ACK Spacing
  contents:
  - "3.1.1 TCP ACK Spacing\n   In environments where ACKs tend to bunch together,\
    \ ACK spacing is\n   used to smooth out the flow of TCP acknowledgments traversing\
    \ a link.\n   This improves performance by eliminating bursts of TCP data segments\n\
    \   that the TCP sender would send due to back-to-back arriving TCP\n   acknowledgments\
    \ [BPK97].\n"
- title: 3.1.2 Local TCP Acknowledgements
  contents:
  - "3.1.2 Local TCP Acknowledgements\n   In some PEP implementations, TCP data segments\
    \ received by the PEP\n   are locally acknowledged by the PEP.  This is very useful\
    \ over\n   network paths with a large bandwidth*delay product as it speeds up\n\
    \   TCP slow start and allows the sending TCP to quickly open up its\n   congestion\
    \ window.  Local (negative) acknowledgments are often also\n   employed to trigger\
    \ local (and faster) error recovery on links with\n   significant error rates.\
    \  (See Section 3.1.3.)\n   Local acknowledgments are automatically employed with\
    \ split\n   connection TCP implementations.  When local acknowledgments are used,\n\
    \   the burden falls upon the TCP PEP to recover any data which is\n   dropped\
    \ after the PEP acknowledges it.\n"
- title: 3.1.3 Local TCP Retransmissions
  contents:
  - "3.1.3 Local TCP Retransmissions\n   A TCP PEP may locally retransmit data segments\
    \ lost on the path\n   between the TCP PEP and the receiving end system, thus\
    \ aiming at\n   faster recovery from lost data.  In order to achieve this the\
    \ TCP PEP\n   may use acknowledgments arriving from the end system that receives\n\
    \   the TCP data segments, along with appropriate timeouts, to determine\n   when\
    \ to locally retransmit lost data.  TCP PEPs sending local\n   acknowledgments\
    \ to the sending end system are required to employ\n   local retransmissions towards\
    \ the receiving end system.\n   Some PEP implementations perform local retransmissions\
    \ even though\n   they do not use local acknowledgments to alter TCP connection\n\
    \   performance.  Basic Snoop [SNOOP] is a well know example of such a\n   PEP\
    \ implementation.  Snoop caches TCP data segments it receives and\n   forwards\
    \ and then monitors the end-to-end acknowledgments coming from\n   the receiving\
    \ TCP end system for duplicate acknowledgments (DUPACKs).\n   When DUPACKs are\
    \ received, Snoop locally retransmits the lost TCP\n   data segments from its\
    \ cache, suppressing the DUPACKs flowing to the\n   sending TCP end system until\
    \ acknowledgments for new data are\n   received.  The Snoop system also implements\
    \ an option to employ local\n   negative acknowledgments to trigger local TCP\
    \ retransmissions.  This\n   can be achieved, for example, by applying TCP selective\n\
    \   acknowledgments locally on the error-prone link.  (See Section 5.3\n   for\
    \ details.)\n"
- title: 3.1.4 TCP ACK Filtering and Reconstruction
  contents:
  - "3.1.4 TCP ACK Filtering and Reconstruction\n   On paths with highly asymmetric\
    \ bandwidth the TCP ACKs flowing in the\n   low-speed direction may get congested\
    \ if the asymmetry ratio is high\n   enough.  The ACK filtering and reconstruction\
    \ mechanism addresses\n   this by filtering the ACKs on one side of the link and\
    \ reconstructing\n   the deleted ACKs on the other side of the link.  The mechanism\
    \ and\n   the issue of dealing with TCP ACK congestion with highly asymmetric\n\
    \   links are discussed in detail in [RFC2760] and in [BPK97].\n"
- title: 3.2 Tunneling
  contents:
  - "3.2 Tunneling\n   A Performance Enhancing Proxy may encapsulate messages to carry\
    \ the\n   messages across a particular link or to force messages to traverse a\n\
    \   particular path.  A PEP at the other end of the encapsulation tunnel\n   removes\
    \ the tunnel wrappers before final delivery to the receiving\n   end system. \
    \ A tunnel might be used by a distributed split connection\n   TCP implementation\
    \ as the means for carrying the connection between\n   the distributed PEPs. \
    \ A tunnel might also be used to support forcing\n   TCP connections which use\
    \ asymmetric routing to go through the end\n   points of a distributed PEP implementation.\n"
- title: 3.3 Compression
  contents:
  - "3.3 Compression\n   Many PEP implementations include support for one or more\
    \ forms of\n   compression.  In some PEP implementations, compression may even\
    \ be\n   the only mechanism used for performance improvement.  Compression\n \
    \  reduces the number of bytes which need to be sent across a link.\n   This is\
    \ useful in general and can be very important for bandwidth\n   limited links.\
    \  Benefits of using compression include improved link\n   efficiency and higher\
    \ effective link utilization, reduced latency and\n   improved interactive response\
    \ time, decreased overhead and reduced\n   packet loss rate over lossy links.\n\
    \   Where appropriate, link layer compression is used.  TCP and IP header\n  \
    \ compression are also frequently used with PEP implementations.\n   [RFC1144]\
    \ describes a widely deployed method for compressing TCP\n   headers.  Other header\
    \ compression algorithms are described in\n   [RFC2507], [RFC2508] and [RFC2509].\n\
    \   Payload compression is also desirable and is increasing in importance\n  \
    \ with today's increased emphasis on Internet security.  Network (IP)\n   layer\
    \ (and above) security mechanisms convert IP payloads into random\n   bit streams\
    \ which defeat applicable link layer compression mechanisms\n   by removing or\
    \ hiding redundant \"information.\"  Therefore,\n   compression of the payload\
    \ needs to be applied before security\n   mechanisms are applied.  [RFC2393] defines\
    \ a framework where common\n   compression algorithms can be applied to arbitrary\
    \ IP segment\n   payloads.  However, [RFC2393] compression is not always applicable.\n\
    \   Many types of IP payloads (e.g., images, audio, video and \"zipped\"\n   files\
    \ being transferred) are already compressed.  And, when security\n   mechanisms\
    \ such as TLS [RFC2246] are applied above the network (IP)\n   layer, the data\
    \ is already encrypted (and possibly also compressed),\n   again removing or hiding\
    \ any redundancy in the payload.  The\n   resulting additional transport or network\
    \ layer compression will\n   compact only headers, which are small, and possibly\
    \ already covered\n   by separate compression algorithms of their own.\n   With\
    \ application layer PEPs one can employ application-specific\n   compression.\
    \  Typically an application-specific (or content-specific)\n   compression mechanism\
    \ is much more efficient than any generic\n   compression mechanism.  For example,\
    \ a distributed Web PEP\n   implementation may implement more efficient binary\
    \ encoding of HTTP\n   headers, or a PEP can employ lossy compression that reduces\
    \ the image\n   quality of online-images on Web pages according to end user\n\
    \   instructions, thus reducing the number of bytes transferred over a\n   slow\
    \ link and consequently the response time perceived by the user\n   [LHKR96].\n"
- title: 3.4 Handling Periods of Link Disconnection with TCP
  contents:
  - "3.4 Handling Periods of Link Disconnection with TCP\n   Periods of link disconnection\
    \ or link outages are very common with\n   some wireless links.  During these\
    \ periods, a TCP sender does not\n   receive the expected acknowledgments.  Upon\
    \ expiration of the\n   retransmit timer, this causes TCP to close its congestion\
    \ window with\n   all of the related drawbacks.  A TCP PEP may monitor the traffic\n\
    \   coming from the TCP sender towards the TCP receiver behind the\n   disconnected\
    \ link.  The TCP PEP retains the last ACK, so that it can\n   shut down the TCP\
    \ sender's window by sending the last ACK with a\n   window set to zero.  Thus,\
    \ the TCP sender will go into persist mode.\n   To make this work in both directions\
    \ with an integrated TCP PEP\n   implementation, the TCP receiver behind the disconnected\
    \ link must be\n   aware of the current state of the connection and, in the event\
    \ of a\n   disconnection, it must be capable of freezing all timers.  [M-TCP]\n\
    \   implements such operation.  Another possibility is that the\n   disconnected\
    \ link is surrounded by a distributed PEP pair.\n   In split connection TCP implementations,\
    \ a period of link\n   disconnection can easily be hidden from the end host on\
    \ the other\n   side of the PEP thus precluding the TCP connection from breaking\
    \ even\n   if the period of link disconnection lasts a very long time; if the\n\
    \   TCP PEP cannot forward data due to link disconnection, it stops\n   receiving\
    \ data.  Normal TCP flow control then prevents the TCP sender\n   from sending\
    \ more than the TCP advertised window allowed by the PEP.\n   Consequently, the\
    \ PEP and its counterpart behind the disconnected\n   link can employ a modified\
    \ TCP version which retains the state and\n   all unacknowledged data segments\
    \ across the period of disconnection\n   and then performs local recovery as the\
    \ link is reconnected.  The\n   period of link disconnection may or may not be\
    \ hidden from the\n   application and user, depending upon what application the\
    \ user is\n   using the TCP connection for.\n"
- title: 3.5 Priority-based Multiplexing
  contents:
  - "3.5 Priority-based Multiplexing\n   Implementing priority-based multiplexing\
    \ of data over a slow and\n   expensive link may significantly improve the performance\
    \ and\n   usability of the link for selected applications or connections.\n  \
    \ A user behind a slow link would experience the link more feasible to\n   use\
    \ in case of simultaneous data transfers, if urgent data transfers\n   (e.g.,\
    \ interactive connections) could have shorter response time\n   (better performance)\
    \ than less urgent background transfers.  If the\n   interactive connections transmit\
    \ enough data to keep the slow link\n   fully utilized, it might be necessary\
    \ to fully suspend the background\n   transfers for awhile to ensure timely delivery\
    \ for the interactive\n   connections.\n   In flight TCP segments of an end-to-end\
    \ TCP connection (with low\n   priority) cannot be delayed for a long time.  Otherwise,\
    \ the TCP\n   timer at the sending end would expire, resulting in suboptimal\n\
    \   performance.  However, this kind of operation can be controlled in\n   conjunction\
    \ with a split connection TCP PEP by assigning different\n   priorities for different\
    \ connections (or applications).  A split\n   connection PEP implementation allows\
    \ the PEP in an intermediate node\n   to delay the data delivery of a lower-priority\
    \ TCP flow for an\n   unlimited period of time by simply rescheduling the order\
    \ in which it\n   forwards data of different flows to the destination host behind\
    \ the\n   slow link.  This does not have a negative impact on the delayed TCP\n\
    \   flow as normal TCP flow control takes care of suspending the flow\n   between\
    \ the TCP sender and the PEP, when the PEP is not forwarding\n   data for the\
    \ flow, and resumes it once the PEP decides to continue\n   forwarding data for\
    \ the flow.  This can further be assisted, if the\n   protocol stacks on both\
    \ sides of the slow link implement priority\n   based scheduling of connections.\n\
    \   With such a PEP implementation, along with user-controlled\n   priorities,\
    \ the user can assign higher priority for selected\n   interactive connection(s)\
    \ and have much shorter response time for the\n   selected connection(s), even\
    \ if there are simultaneous low priority\n   bulk data transfers which in regular\
    \ end-to-end operation would\n   otherwise eat the available bandwidth of the\
    \ slow link almost\n   completely.  These low priority bulk data transfers would\
    \ then\n   proceed nicely during the idle periods of interactive connections,\n\
    \   allowing the user to keep the slow and expensive link (e.g., wireless\n  \
    \ WAN) fully utilized.\n   Other priority-based mechanisms may be applied on shared\
    \ wireless\n   links with more than two terminals.  With shared wireless mediums\n\
    \   becoming a weak link in Internet QoS architectures, many may turn to\n   PEPs\
    \ to provide extra priority levels across a shared wireless medium\n   [SHEL00].\
    \  These PEPs are distributed on all nodes of the shared\n   wireless medium.\
    \  For example, in an 802.11 WLAN this PEP is\n   implemented in the access point\
    \ (base station) and each mobile host.\n   One PEP then uses distributed queuing\
    \ techniques to coordinate\n   traffic classes of all nodes.  This is also sometimes\
    \ called subnet\n   bandwidth management.  See [BBKT97] for an example of queuing\n\
    \   techniques which can be used to achieve this.  This technique can be\n   implemented\
    \ either above or below the IP layer.  Priority treatment\n   can typically be\
    \ specified either by the user or by marking the\n   (IPv4) ToS or (IPv6) Traffic\
    \ Class IP header field.\n"
- title: 3.6 Protocol Booster Mechanisms
  contents:
  - "3.6 Protocol Booster Mechanisms\n   Work in [FMSBMR98] shows a range of other\
    \ possible PEP mechanisms\n   called protocol boosters.  Some of these mechanisms\
    \ are specific to\n   UDP flows.  For example, a PEP may apply asymmetrical methods\
    \ such as\n   extra UDP error detection.  Since the 16 bit UDP checksum is\n \
    \  optional, it is typically not computed.  However, for links with\n   errors,\
    \ the checksum could be beneficial.  This checksum can be added\n   to outgoing\
    \ UDP packets by a PEP.\n   Symmetrical mechanisms have also been developed. \
    \ A Forward Erasure\n   Correction (FZC) mechanism can be used with real-time\
    \ and multicast\n   traffic.  The encoding PEP adds a parity packet over a block\
    \ of\n   packets.  Upon reception, the parity is removed and missing data is\n\
    \   regenerated.  A jitter control mechanism can be implemented at the\n   expense\
    \ of extra latency.  A sending PEP can add a timestamp to\n   outgoing packets.\
    \  The receiving PEP then delays packets in order to\n   reproduce the correct\
    \ interval.\n"
- title: 4. Implications of Using PEPs
  contents:
  - "4. Implications of Using PEPs\n   The following sections describe some of the\
    \ implications of using\n   Performance Enhancing Proxies.\n"
- title: 4.1 The End-to-end Argument
  contents:
  - "4.1 The End-to-end Argument\n   As indicated in [RFC1958], the end-to-end argument\
    \ [SRC84] is one of\n   the architectural principles of the Internet.  The basic\
    \ argument is\n   that, as a first principle, certain required end-to-end functions\
    \ can\n   only be correctly performed by the end systems themselves.  Most of\n\
    \   the potential negative implications associated with using PEPs are\n   related\
    \ to the possibility of breaking the end-to-end semantics of\n   connections.\
    \  This is one of the main reasons why PEPs are not\n   recommended for general\
    \ use.\n   As indicated in Section 2.5, not all PEP implementations break the\n\
    \   end-to-end semantics of connections.  Correctly designed PEPs do not\n   attempt\
    \ to replace any application level end-to-end function, but\n   only attempt to\
    \ add performance optimizations to a subpath of the\n   end-to-end path between\
    \ the application endpoints.  Doing this can be\n   consistent with the end-to-end\
    \ argument.  However, a user or network\n   administrator adding a PEP to his\
    \ network configuration should be\n   aware of the potential end-to-end implications\
    \ related to the\n   mechanisms being used by the particular PEP implementation.\n"
- title: 4.1.1 Security
  contents:
  - "4.1.1 Security\n   In most cases, security applied above the transport layer\
    \ can be used\n   with PEPs, especially transport layer PEPs.  However, today,\
    \ only a\n   limited number of applications include support for the use of\n \
    \  transport (or higher) layer security.  Network (IP) layer security\n   (IPsec)\
    \ [RFC2401], on the other hand, can generally be used by any\n   application,\
    \ transparently to the application.\n"
- title: 4.1.1.1 Security Implications
  contents:
  - "4.1.1.1 Security Implications\n   The most detrimental negative implication of\
    \ breaking the end-to-end\n   semantics of a connection is that it disables end-to-end\
    \ use of\n   IPsec.  In general, a user or network administrator must choose\n\
    \   between using PEPs and using IPsec.  If IPsec is employed end-to-end,\n  \
    \ PEPs that are implemented on intermediate nodes in the network cannot\n   examine\
    \ the transport or application headers of IP packets because\n   encryption of\
    \ IP packets via IPsec's ESP header (in either transport\n   or tunnel mode) renders\
    \ the TCP header and payload unintelligible to\n   the PEPs.  Without being able\
    \ to examine the transport or application\n   headers, a PEP may not function\
    \ optimally or at all.\n   If a PEP implementation is non-transparent to the users\
    \ and the users\n   trust the PEP in the middle, IPsec can be used separately\
    \ between\n   each end system and PEP.  However, in most cases this is an\n  \
    \ undesirable or unacceptable alternative as the end systems cannot\n   trust\
    \ PEPs in general.  In addition, this is not as secure as end-\n   to-end security.\
    \  (For example, the traffic is exposed in the PEP\n   when it is decrypted to\
    \ be processed.)  And, it can lead to\n   potentially misleading security level\
    \ assumptions by the end systems.\n   If the two end systems negotiate different\
    \ levels of security with\n   the PEP, the end system which negotiated the stronger\
    \ level of\n   security may not be aware that a lower level of security is being\n\
    \   provided for part of the connection.  The PEP could be implemented to\n  \
    \ prevent this from happening by being smart enough to force the same\n   level\
    \ of security to each end system but this increases the\n   complexity of the\
    \ PEP implementation (and still is not as secure as\n   end-to-end security).\n\
    \   With a transparent PEP implementation, it is difficult for the end\n   systems\
    \ to trust the PEP because they may not be aware of its\n   existence.  Even if\
    \ the user is aware of the PEP, setting up\n   acceptable security associations\
    \ with the PEP while maintaining the\n   PEP's transparent nature is problematic\
    \ (if not impossible).\n   Note that even when a PEP implementation does not break\
    \ the end-to-\n   end semantics of a connection, the PEP implementation may not\
    \ be able\n   to function in the presence of IPsec.  For example, it is difficult\n\
    \   to do ACK spacing if the PEP cannot reliably determine which IP\n   packets\
    \ contain ACKs of interest.  In any case, the authors are\n   currently not aware\
    \ of any PEP implementations, transparent or non-\n   transparent, which provide\
    \ support for end-to-end IPsec, except in a\n   case where the PEPs are implemented\
    \ on the end hosts.\n"
- title: 4.1.1.2 Security Implication Mitigations
  contents:
  - "4.1.1.2 Security Implication Mitigations\n   There are some steps which can be\
    \ taken to allow the use of IPsec and\n   PEPs to coexist.  If an end user can\
    \ select the use of IPsec for some\n   traffic and not for other traffic, PEP\
    \ processing can be applied to\n   the traffic sent without IPsec.  Of course,\
    \ the user must then do\n   without security for this traffic or provide security\
    \ for the traffic\n   via other means (for example, by using transport layer security).\n\
    \   However, even when this is possible, significant complexity may need\n   to\
    \ be added to the configuration of the end system.\n   Another alternative is\
    \ to implement IPsec between the two PEPs of a\n   distributed PEP implementation.\
    \  This at least protects the traffic\n   between the two PEPs.  (The issue of\
    \ trusting the PEPs does not\n   change.)  In the case where the PEP implementation\
    \ is not transparent\n   to the user, (assuming that the user trusts the PEPs,)\
    \ the user can\n   configure his end system to use the PEPs as the end points\
    \ of an\n   IPsec tunnel.  And, an IPsec tunnel could even potentially be used\n\
    \   between the end system and a PEP to protect traffic on this part of\n   the\
    \ path.  But, all of this adds complexity.  And, it still does not\n   eliminate\
    \ the risk of the traffic being exposed in the PEP itself as\n   the traffic is\
    \ received from one IPsec tunnel, processed and then\n   forwarded (even if forwarded\
    \ through another IPsec tunnel).\n"
- title: 4.1.1.3 Security Research Related to PEPs
  contents:
  - "4.1.1.3 Security Research Related to PEPs\n   There is research underway investigating\
    \ the possibility of changing\n   the implementation of IPsec to be more friendly\
    \ to the use of PEPs.\n   One approach being actively looked at is the use of\
    \ multi-layer IP\n   security.  [Zhang00] describes a method which allows TCP\
    \ headers to\n   be encrypted as one layer (with the PEPs in the path of the TCP\n\
    \   connections included in the security associations used to encrypt the\n  \
    \ TCP headers) while the TCP payload is encrypted end-to-end as a\n   separate\
    \ layer.  This still involves trusting the PEP, but to a much\n   lesser extent.\
    \  However, a drawback to this approach is that it adds\n   a significant amount\
    \ of complexity to the IP security implementation.\n   Given the existing complexity\
    \ of IPsec, this drawback is a serious\n   impediment to the standardization of\
    \ the multi-layer IP security idea\n   and it is very unlikely that this approach\
    \ will be adopted as a\n   standard any time soon.  Therefore, relying on this\
    \ type of approach\n   will likely involve the use of non-standard protocols (and\
    \ the\n   associated risk of doing so).\n"
- title: 4.1.2 Fate Sharing
  contents:
  - "4.1.2 Fate Sharing\n   Another important aspect of the end-to-end argument is\
    \ fate sharing.\n   If a failure occurs in the network, the ability of the connection\
    \ to\n   survive the failure depends upon how much state is being maintained\n\
    \   on behalf of the connection in the network and whether the state is\n   self-healing.\
    \  If no connection specific state resides in the network\n   or such state is\
    \ self-healing as in case of regular end-to-end\n   operation, then a failure\
    \ in the network will break the connection\n   only if there is no alternate path\
    \ through the network between the\n   end systems.  And, if there is no path,\
    \ both end systems can detect\n   this.  However, if the connection depends upon\
    \ some state being\n   stored in the network (e.g., in a PEP), then a failure\
    \ in the network\n   (e.g., the node containing a PEP crashes) causes this state\
    \ to be\n   lost, forcing the connection to terminate even if an alternate path\n\
    \   through the network exists.\n   The importance of this aspect of the end-to-end\
    \ argument with respect\n   to PEPs is dependent upon both the PEP implementation\
    \ and upon the\n   types of applications being used.  Sometimes coincidentally\
    \ but more\n   often by design, PEPs are used in environments where there is no\n\
    \   alternate path between the end systems and, therefore, a failure of\n   the\
    \ intermediate node containing a PEP would result in the\n   termination of the\
    \ connection in any case.  And, even when this is\n   not the case, the risk of\
    \ losing the connection in the case of\n   regular end-to-end operation may exist\
    \ as the connection could break\n   for some other reason, for example, a long\
    \ enough link outage of a\n   last-hop wireless link to the end host.  Therefore,\
    \ users may choose\n   to accept the risk of a PEP crashing in order to take advantage\
    \ of\n   the performance gains offered by the PEP implementation.  The\n   important\
    \ thing is that accepting the risk should be under the\n   control of the user\
    \ (i.e., the user should always have the option to\n   choose end-to-end operation)\
    \ and, if the user chooses to use the PEP,\n   the user should be aware of the\
    \ implications that a PEP failure has\n   with respect to the applications being\
    \ used.\n"
- title: 4.1.3 End-to-end Reliability
  contents:
  - "4.1.3 End-to-end Reliability\n   Another aspect of the end-to-end argument is\
    \ that of acknowledging\n   the receipt of data end-to-end in order to achieve\
    \ reliable end-to-\n   end delivery of data.  An application aiming at reliable\
    \ end-to-end\n   delivery must implement an end-to-end check and recovery at the\n\
    \   application level.  According to the end-to-end argument, this is the\n  \
    \ only possibility to correctly implement reliable end-to-end\n   operation. \
    \ Otherwise the application violates the end-to-end\n   argument.  This also means\
    \ that a correctly designed application can\n   never fully rely on the transport\
    \ layer (e.g., TCP) or any other\n   communication subsystem to provide reliable\
    \ end-to-end delivery.\n   First, a TCP connection may break down for some reason\
    \ and result in\n   lost data that must be recovered at the application level.\
    \  Second,\n   the checksum provided by TCP may be considered inadequate, resulting\n\
    \   in undetected (by TCP) data corruption [Pax99] and requiring an\n   application\
    \ level check for data corruption.  Third, a TCP\n   acknowledgement only indicates\
    \ that data was delivered to the TCP\n   implementation on the other end system.\
    \  It does not guarantee that\n   the data was delivered to the application layer\
    \ on the other end\n   system.  Therefore, a well designed application must use\
    \ an\n   application layer acknowledgement to ensure end-to-end delivery of\n\
    \   application layer data.  Note that this does not diminish the value\n   of\
    \ a reliable transport protocol (i.e., TCP) as such a protocol\n   allows efficient\
    \ implementation of several essential functions (e.g.,\n   congestion control)\
    \ for an application.\n   If a PEP implementation acknowledges application data\
    \ prematurely\n   (before the PEP receives an application ACK from the other endpoint),\n\
    \   end-to-end reliability cannot be guaranteed.  Typically, application\n   layer\
    \ PEPs do not acknowledge data prematurely, i.e., the PEP does\n   not send an\
    \ application ACK to the sender until it receives an\n   application ACK from\
    \ the receiver.  And, transport layer PEP\n   implementations, including TCP PEPs,\
    \ generally do not interfere with\n   end-to-end application layer acknowledgments\
    \ as they let applications\n   operate end-to-end.  However, the user and/or network\
    \ administrator\n   employing the PEP must understand how it operates in order\
    \ to\n   understand the risks related to end-to-end reliability.\n   Some Internet\
    \ applications do not necessarily operate end-to-end in\n   their regular operation,\
    \ thus abandoning any end-to-end reliability\n   guarantee.  For example, Internet\
    \ email delivery often operates via\n   relay Mail Transfer Agents, that is, relay\
    \ Simple Mail Transfer\n   Protocol (SMTP) servers.  An originating MTA (SMTP\
    \ server) sends the\n   mail message to a relay MTA that receives the mail message,\
    \ stores it\n   in non-volatile storage (e.g., on disk) and then sends an application\n\
    \   level acknowledgement.  The relay MTA then takes \"full\n   responsibility\"\
    \ for delivering the mail message to the destination\n   SMTP server (maybe via\
    \ another relay MTA); it tries to forward the\n   message for a relatively long\
    \ time (typically around 5 days).  This\n   scheme does not give a 100% guarantee\
    \ of email delivery, but\n   reliability is considered \"good enough\".\n   An\
    \ application layer PEP for this kind of an application may\n   acknowledge application\
    \ data (e.g., mail message) without essentially\n   decreasing reliability, as\
    \ long as the PEP operates according to the\n   same procedure as the regular\
    \ proxy (e.g., relay MTA).  Again, as\n   indicated above, the user and/or network\
    \ administrator employing such\n   a PEP needs to understand how it operates in\
    \ order to understand the\n   reliability risks associated with doing so.\n"
- title: 4.1.4 End-to-end Failure Diagnostics
  contents:
  - "4.1.4 End-to-end Failure Diagnostics\n   Another aspect of the end-to-end argument\
    \ is the ability to support\n   end-to-end failure diagnostics when problems are\
    \ encountered.  If a\n   network problem occurs which breaks a connection, the\
    \ end points of\n   the connection will detect the failure via timeouts.  However,\
    \ the\n   existence of a PEP in between the two end points could delay\n   (sometimes\
    \ significantly) the detection of the failure by one or both\n   of the end points.\
    \  (Of course, some PEPs are intentionally designed\n   to hide these types of\
    \ failures as described in Section 3.4.)  The\n   implications of delayed detection\
    \ of a failed connection depend on\n   the applications being used.  Possibilities\
    \ range from no impact at\n   all (or just minor annoyance to the end user) all\
    \ the way up to\n   impacting mission critical business functions by delaying\
    \ switchovers\n   to alternate communications paths.\n   In addition, tools used\
    \ to debug connection failures may be affected\n   by the use of a PEP.  For example,\
    \ PING (described in [RFC792] and\n   [RFC2151]) is often used to test for connectivity.\
    \  But, because PING\n   is based on ICMP instead of TCP (i.e., it is implemented\
    \ using ICMP\n   Echo and Reply commands at the network layer), it is possible\
    \ that\n   the configuration of the network might route PING traffic around the\n\
    \   PEP.  Thus, PING could indicate that an end-to-end path exists\n   between\
    \ two hosts when it does not actually exist for TCP traffic.\n   Even when the\
    \ PING traffic does go through the PEP, the diagnostics\n   indications provided\
    \ by the PING traffic are altered.  For example,\n   if the PING traffic goes\
    \ transparently through the PEP, PING does not\n   provide any indication that\
    \ the PEP exists and since the PING traffic\n   is not being subjected to the\
    \ same processing as TCP traffic, it may\n   not necessarily provide an accurate\
    \ indication of the network delay\n   being experienced by TCP traffic.  On the\
    \ other hand, if the PEP\n   terminates the PING and responds to it on behalf\
    \ of the end host,\n   then the PING provides information only on the connectivity\
    \ to the\n   PEP.  Traceroute (also described in [RFC2151]) is similarly affected\n\
    \   by the presence of the PEP.\n"
- title: 4.2 Asymmetric Routing
  contents:
  - "4.2 Asymmetric Routing\n   Deploying a PEP implementation usually requires that\
    \ traffic to and\n   from the end hosts is routed through the intermediate node(s)\
    \ where\n   PEPs reside.  With some networks, this cannot be accomplished, or\
    \ it\n   might require that the intermediate node is located several hops away\n\
    \   from the target link edge which in turn is impractical in many cases\n   and\
    \ may result in non-optimal routing.\n   Note that this restriction does not apply\
    \ to all PEP implementations.\n   For example, a PEP which is simply doing ACK\
    \ spacing only needs to\n   see one direction of the traffic flow (the direction\
    \ in which the\n   ACKs are flowing).  ACK spacing can be done without seeing\
    \ the actual\n   flow of data.\n"
- title: 4.3 Mobile Hosts
  contents:
  - "4.3 Mobile Hosts\n   In environments where a PEP implementation is used to serve\
    \ mobile\n   hosts, additional problems may be encountered because PEP related\n\
    \   state information may need to be transferred to a new PEP node during\n  \
    \ a handoff.\n   When a mobile host moves, it is subject to handovers.  If the\n\
    \   intermediate node and home for the serving PEP changes due to\n   handover,\
    \ any state information that the PEP maintains and is\n   required for continuous\
    \ operation must be transferred to the new\n   intermediate node to ensure continued\
    \ operation of the connection.\n   This requires extra work and overhead and may\
    \ not be possible to\n   perform fast enough, especially if the host moves frequently\
    \ over\n   cell boundaries of a wireless network.  If the mobile host moves to\n\
    \   another IP network, routing to and from the mobile host may need to\n   be\
    \ changed to traverse a new PEP node.\n   Today, mobility implications with respect\
    \ to using PEPs are more\n   significant to W-LAN networks than to W-WAN networks.\
    \  Currently, a\n   W-WAN base station typically does not provide the mobile host\
    \ with\n   the connection point to the wireline Internet.  (A W-WAN base station\n\
    \   may not even have an IP stack.)  Instead, the W-WAN network takes\n   care\
    \ of mobility with the connection point to the wireline Internet\n   remaining\
    \ unchanged while the mobile host moves.  Thus, PEP state\n   handover is not\
    \ currently required in most W-WAN networks when the\n   host moves.  However,\
    \ this is generally not true in W-LAN networks\n   and, even in the case of W-WAN\
    \ networks, the user and/or network\n   administrator using a PEP needs to be\
    \ cognizant of how the W-WAN base\n   stations and the PEP work in case W-WAN\
    \ PEP state handoff becomes\n   necessary in the future.\n"
- title: 4.4 Scalability
  contents:
  - "4.4 Scalability\n   Because a PEP typically processes packet information above\
    \ the IP\n   layer, a PEP requires more processing power per packet than a router.\n\
    \   Therefore, PEPs will always be (at least) one step behind routers in\n   terms\
    \ of the total throughput they can support.  (Processing above\n   the IP layer\
    \ is also more difficult to implement in hardware.)  In\n   addition, since most\
    \ PEP implementations require per connection\n   state, PEP memory requirements\
    \ are generally significantly higher\n   than with a router.  Therefore, a PEP\
    \ implementation may have a limit\n   on the number of connections which it can\
    \ support whereas a router\n   has no such limitation.\n   Increased processing\
    \ power and memory requirements introduce\n   scalability issues with respect\
    \ to the use of PEPs.  Placement of a\n   PEP on a high speed link or a link which\
    \ supports a large number of\n   connections may require network topology changes\
    \ beyond just\n   inserting the PEP into the path of the traffic.  For example,\
    \ if a\n   PEP can only handle half of the traffic on a link, multiple PEPs may\n\
    \   need to be used in parallel, adding complexity to the network\n   configuration\
    \ to divide the traffic between the PEPs.\n"
- title: 4.5 Other Implications of Using PEPs
  contents:
  - "4.5 Other Implications of Using PEPs\n   This document describes some significant\
    \ implications with respect to\n   using Performance Enhancing Proxies.  However,\
    \ the list of\n   implications provided in this document is not necessarily exhaustive.\n\
    \   Some examples of other potential implications related to using PEPs\n   include\
    \ the use of PEPs in multi-homing environments and the use of\n   PEPs with respect\
    \ to Quality of Service (QoS) transparency.  For\n   example, there may be potential\
    \ interaction with the priority-based\n   multiplexing mechanism described in\
    \ Section 3.5 and the use of\n   differentiated services [RFC2475].  Therefore,\
    \ users and network\n   administrators who wish to deploy a PEP should look not\
    \ only at the\n   implications described in this document but also at the overall\n\
    \   impact (positive and negative) that the PEP will have on their\n   applications\
    \ and network infrastructure, both initially and in the\n   future when new applications\
    \ are added and/or changes in the network\n   infrastructure are required.\n"
- title: 5. PEP Environment Examples
  contents:
  - "5. PEP Environment Examples\n   The following sections describe examples of environments\
    \ where PEP is\n   currently used to improve performance.  The examples are provided\
    \ to\n   illustrate the use of the various PEP types and PEP mechanisms\n   described\
    \ earlier in the document and to help illustrate the\n   motivation for their\
    \ development and use.\n"
- title: 5.1 VSAT Environments
  contents:
  - "5.1 VSAT Environments\n   Today, VSAT networks are implemented with geosynchronous\
    \ satellites.\n   VSAT data networks are typically implemented using a star topology.\n\
    \   A large hub earth station is located at the center of the star with\n   VSATs\
    \ used at the remote sites of the network.  Data is sent from the\n   hub to the\
    \ remote sites via an outroute.  Data is sent from the\n   remote sites to the\
    \ hub via one or more inroutes.  VSATs represent an\n   environment with highly\
    \ asymmetric links, with an outroute typically\n   much larger than an inroute.\
    \  (Multiple inroutes can be used with\n   each outroute but any particular VSAT\
    \ only has access to a single\n   inroute at a time, making the link asymmetric.)\n\
    \   VSAT networks are generally used to implement private networks (i.e.,\n  \
    \ intranets) for enterprises (e.g., corporations) with geographically\n   dispersed\
    \ sites.  VSAT networks are rarely, if ever, used to\n   implement Internet connectivity\
    \ except at the edge of the Internet\n   (i.e., as the last hop).  Connection\
    \ to the Internet for the VSAT\n   network is usually implemented at the VSAT\
    \ network hub site using\n   appropriate firewall and (when necessary) NAT [RFC2663]\
    \ devices.\n"
- title: 5.1.1 VSAT Network Characteristics
  contents:
  - "5.1.1 VSAT Network Characteristics\n   With respect to TCP performance, VSAT\
    \ networks exhibit the following\n   subset of the satellite characteristics documented\
    \ in [RFC2488]:\n   Long feedback loops\n      Propagation delay from a sender\
    \ to a receiver in a geosynchronous\n      satellite network can range from 240\
    \ to 280 milliseconds,\n      depending on where the sending and receiving sites\
    \ are in the\n      satellite footprint.  This makes the round trip time just\
    \ due to\n      propagation delay at least 480 milliseconds.  Queueing delay and\n\
    \      delay due to shared channel access methods can sometimes increase\n   \
    \   the total delay up to on the order of a few seconds.\n   Large bandwidth*delay\
    \ products\n      VSAT networks can support capacity ranging from a few kilobits\
    \ per\n      second up to multiple megabits per second.  When combined with the\n\
    \      relatively long round trip time, TCP needs to keep a large number\n   \
    \   of packets \"in flight\" in order to fully utilize the satellite\n      link.\n\
    \   Asymmetric capacity\n      As indicated above, the outroute of a VSAT network\
    \ is usually\n      significantly larger than an inroute.  Even though multiple\n\
    \      inroutes can be used within a network, a given VSAT can only\n      access\
    \ one inroute at a time.  Therefore, the incoming (outroute)\n      and outgoing\
    \ (inroute) capacity for a VSAT is often very\n      asymmetric.  As outroute\
    \ capacity has increased in recent years,\n      ratios of 400 to 1 or greater\
    \ are becoming more and more common.\n      With a TCP maximum segment size of\
    \ 1460 bytes and delayed\n      acknowledgments [RFC1122] in use, the ratio of\
    \ IP packet bytes for\n      data to IP packet bytes for ACKs is only (3000 to\
    \ 40) 75 to 1.\n      Thus, inroute capacity for carrying ACKs can have a significant\n\
    \      impact on TCP performance.  (The issue of asymmetric link impact\n    \
    \  on TCP performance is described in more detail in [BPK97].)\n   With respect\
    \ to the other satellite characteristics listed in\n   [RFC2488], VSAT networks\
    \ typically do not suffer from intermittent\n   connectivity or variable round\
    \ trip times.  Also, VSAT networks\n   generally include a significant amount\
    \ of error correction coding.\n   This makes the bit error rate very low during\
    \ clear sky conditions,\n   approaching the bit error rate of a typical terrestrial\
    \ network.  In\n   severe weather, the bit error rate may increase significantly\
    \ but\n   such conditions are rare (when looked at from an overall network\n \
    \  availability point of view) and VSAT networks are generally\n   engineered\
    \ to work during these conditions but not to optimize\n   performance during these\
    \ conditions.\n"
- title: 5.1.2 VSAT Network PEP Implementations
  contents:
  - "5.1.2 VSAT Network PEP Implementations\n   Performance Enhancing Proxies implemented\
    \ for VSAT networks generally\n   focus on improving throughput (for applications\
    \ such as FTP and HTTP\n   web page retrievals).  To a lesser degree, PEP implementations\
    \ also\n   work to improve interactive response time for small transactions.\n\
    \   There is not a dominant PEP implementation used with VSAT networks.\n   Each\
    \ VSAT network vendor tends to implement their own version of PEP\n   functionality,\
    \ integrated with the other features of their VSAT\n   product.  [HNS] and [SPACENET]\
    \ describe VSAT products with integrated\n   PEP capabilities.  There are also\
    \ third party PEP implementations\n   designed to be used with VSAT networks.\
    \  These products run on nodes\n   external to the VSAT network at the hub and\
    \ remote sites.  NettGain\n   [FLASH] and Venturi [FOURELLE] are examples of such\
    \ products.  VSAT\n   network PEP implementations generally share the following\n\
    \   characteristics:\n      - They focus on improving TCP performance;\n     \
    \ - They use an asymmetric distributed implementation;\n      - They use a split\
    \ connection approach with local acknowledgments\n        and local retransmissions;\n\
    \      - They support some form of compression to reduce the amount of\n     \
    \   bandwidth required (with emphasis on saving inroute bandwidth).\n   The key\
    \ differentiators between VSAT network PEP implementations are:\n      - The maximum\
    \ throughput they attempt to support (mainly a\n        function of the amount\
    \ of buffer space they use);\n      - The protocol used over the satellite link.\
    \  Some implementations\n        use a modified version of TCP while others use\
    \ a proprietary\n        protocol running on top of UDP;\n      - The type of\
    \ compression used.  Third party VSAT network PEP\n        implementations generally\
    \ focus on application (e.g., HTTP)\n        specific compression algorithms while\
    \ PEP implementations\n        integrated into the VSAT network generally focus\
    \ on link\n        specific compression.\n   PEP implementations integrated into\
    \ a VSAT product are generally\n   transparent to the end systems.  Third party\
    \ PEP implementations used\n   with VSAT networks usually require configuration\
    \ changes in the\n   remote site end systems to route TCP packets to the remote\
    \ site\n   proxies but do not require changes to the hub site end systems.  In\n\
    \   some cases, the PEP implementation is actually integrated\n   transparently\
    \ into the end system node itself, using a \"bump in the\n   stack\" approach.\
    \  In all cases, the use of a PEP is non-transparent\n   to the user, i.e., the\
    \ user is aware when a PEP implementation is\n   being used to boost performance.\n"
- title: 5.1.3 VSAT Network PEP Motivation
  contents:
  - "5.1.3 VSAT Network PEP Motivation\n   VSAT networks, since the early stages of\
    \ their deployment, have\n   supported the use of local termination of a protocol\
    \ (e.g., SDLC and\n   X.25) on each side of the satellite link to hide the satellite\
    \ link\n   from the applications using the protocol.  Therefore, when LAN\n  \
    \ capabilities were added to VSAT networks, VSAT customers expected\n   and, in\
    \ fact, demanded, the use of similar techniques for improving\n   the performance\
    \ of IP based traffic, in particular TCP traffic.\n   As indicated in Section\
    \ 5.1, VSAT networks are primarily used to\n   implement intranets with Internet\
    \ connectivity limited to and closely\n   controlled at the hub site of the VSAT\
    \ network.  Therefore, VSAT\n   customers are not as affected (or at least perceive\
    \ that they are not\n   as affected) by the Internet related implications of using\
    \ PEPs as\n   are other technologies.  Instead, what is more important to VSAT\n\
    \   customers is the optimization of the network.  And, VSAT customers,\n   in\
    \ general, prefer that the optimization of the network be done by\n   the network\
    \ itself rather than by implementing changes (such as\n   enabling the TCP scaled\
    \ window option) to their own equipment.  VSAT\n   customers prefer to optimize\
    \ their end system configuration for local\n   communications related to their\
    \ local mission critical functions and\n   let the VSAT network hide the presence\
    \ of the satellite link as much\n   as possible.  VSAT network vendors have also\
    \ been able to use PEP\n   functionality to provide value added \"services\" to\
    \ their customers\n   such as extending the useful of life of older equipment\
    \ which\n   includes older, \"non-modern\" TCP stacks.\n   Of course, as the line\
    \ between intranets and the Internet continues\n   to fade, the implications of\
    \ using PEPs start to become more\n   significant for VSAT networks.  For example,\
    \ twelve years ago\n   security was not a major concern because the equipment\
    \ cost related\n   to being able to intercept VSAT traffic was relatively high.\
    \  Now, as\n   technology has advanced, the cost is much less prohibitive.\n \
    \  Therefore, because the use of PEP functionality in VSAT networks\n   prevents\
    \ the use of IPsec, customers must rely on the use of higher\n   layer security\
    \ mechanisms such as TLS or on proprietary security\n   mechanisms implemented\
    \ in the VSAT networks themselves (since\n   currently many applications are incapable\
    \ of making (or simply don't\n   make) use of the standardized higher layer security\
    \ mechanisms).\n   This, in turn, affects the cost of the VSAT network as well\
    \ as\n   affects the ability of the customers to make use of Internet based\n\
    \   capabilities.\n"
- title: 5.2 W-WAN Environments
  contents:
  - "5.2 W-WAN Environments\n   In mobile wireless WAN (W-WAN) environments the wireless\
    \ link is\n   typically used as the last-hop link to the end user.  W-WANs include\n\
    \   such networks as GSM [GSM], GPRS [GPRS],[BW97], CDPD [CDPD], IS-95\n   [CDMA],\
    \ RichoNet, and PHS.  Many of these networks, but not all, have\n   been designed\
    \ to provide mobile telephone voice service in the first\n   place but include\
    \ data services as well or they evolve from a mobile\n   telephone network.\n"
- title: 5.2.1 W-WAN Network Characteristics
  contents:
  - "5.2.1 W-WAN Network Characteristics\n   W-WAN links typically exhibit some combination\
    \ of the following link\n   characteristics:\n      -  low bandwidth (with some\
    \ links the available bandwidth might be\n         as low as a few hundred bits/sec)\n\
    \      -  high latency (minimum round-trip delay close to one second is\n    \
    \     not exceptional)\n      -  high BER resulting in frame or packet losses,\
    \ or long variable\n         delays due to local link-layer error recovery\n \
    \     -  some W-WAN links have a lot of internal buffer space which tend\n   \
    \      to accumulate data, thus resulting in increased round-trip\n         delay\
    \ due to long (and variable) queuing delays\n      -  on some W-WAN links the\
    \ users may share common channels for\n         their data packet delivery which,\
    \ in turn, may cause unexpected\n         delays to the packet delivery of a user\
    \ due to simultaneous use\n         of the same channel resources by the other\
    \ users\n      -  unexpected link disconnections (or intermittent link outages)\n\
    \         may occur frequently and the period of disconnection may last a\n  \
    \       very long time\n      -  (re)setting the link-connection up may take a\
    \ long time\n         (several tens of seconds or even minutes)\n      -  the\
    \ W-WAN network typically takes care of terminal mobility:\n         the connection\
    \ point to the Internet is retained while the user\n         moves with the mobile\
    \ host\n      -  the use of most W-WAN links is expensive.  Many of the service\n\
    \         providers apply time-based charging.\n"
- title: 5.2.2 W-WAN PEP Implementations
  contents:
  - "5.2.2 W-WAN PEP Implementations\n   Performance Enhancing Proxies implemented\
    \ for W-WAN environments\n   generally focus on improving the interactive response\
    \ time but at the\n   same time aim at improving throughput, mainly by reducing\
    \ the\n   transfer volume over the inherently slow link in various ways.  To\n\
    \   achieve this, typically enhancements are applied at almost all\n   protocol\
    \ layers.\n"
- title: 5.2.2.1 Mowgli System
  contents:
  - "5.2.2.1 Mowgli System\n   The Mowgli system [KRA94] is one of the early approaches\
    \ to address\n   the challenges induced by the problematic characteristics of\
    \ low\n   bandwidth W-WAN links.\n   The indirect approach used in Mowgli is not\
    \ limited to a single layer\n   as in many other split connection approaches,\
    \ but it involves all\n   protocol layers.  The basic architecture is based on\
    \ split TCP (UDP\n   is also supported) together with full support for application\
    \ layer\n   proxies with a distributed PEP approach.  An application layer proxy\n\
    \   pair may be added between a client and server, the agent (local\n   proxy)\
    \ on a mobile host and the proxy on an intermediate node that\n   provides the\
    \ mobile host with the connection to the wireline\n   Internet.  Such a pair may\
    \ be either explicit or fully transparent to\n   the applications, but it is,\
    \ at all times, under end-user control\n   thus allowing the user to select the\
    \ traffic that traverses through\n   the PEP implementation and choose end-to-end\
    \ IP for other traffic.\n   In order to allow running legacy applications unmodified\
    \ and without\n   recompilation, the socket layer implementation on the mobile\
    \ host is\n   slightly modified to connect the applications, which are configured\n\
    \   to traverse through the PEP, to a local agent while retaining the\n   original\
    \ TCP/IP socket semantics.  Two types of application layer\n   agent-proxy pairs\
    \ can be configured for mobile host application use.\n   A generic pair can be\
    \ used with any application and it simply\n   provides split transport service\
    \ with some optional generic\n   enhancements like compression.  An application-specific\
    \ pair can be\n   retailed for any application or a group of applications that\
    \ are able\n   to take leverage on the same kind of enhancements.  A good example\
    \ of\n   enhancements achieved with an application-specific proxy pair is the\n\
    \   Mowgli WWW system that improves significantly the user perceived\n   response\
    \ time of Web browsing mainly by reducing the transfer volume\n   and the number\
    \ of round trips over the wireless link [LAKLR95],\n   [LHKR96].\n   Mowgli provides\
    \ also an option to replace the TCP/IP core protocols\n   on the last-hop link\
    \ with a custom protocol that is tuned for low-\n   bandwidth W-WAN links [KRLKA97].\
    \  This protocol was designed to\n   provide the same transport service with similar\
    \ semantics as regular\n   TCP and UDP provide, but use a different protocol implementation\
    \ that\n   can freely apply any appropriate protocol mechanisms without being\n\
    \   constrained by the current TCP/IP packet format or protocol\n   operation.\
    \  As this protocol is required to operate over a single\n   logical link only,\
    \ it could partially combine the protocol control\n   information and protocol\
    \ operation of the link, network, and\n   transport layers.  In addition, the\
    \ protocol can operate on top of\n   various link services, for example on top\
    \ of different raw link\n   services, on top of PPP, on top of IP, or even on\
    \ top of a single TCP\n   connection using it as a link service and implementing\
    \ \"TCP\n   multiplexing\" over it.  In all other cases, except when the protocol\n\
    \   is configured to operate on top of raw (wireless) link service, IP\n   may\
    \ co-exist with the custom protocol allowing simultaneous end-to-\n   end IP delivery\
    \ for the traffic not traversing through the PEP\n   implementation.\n   Furthermore,\
    \ the custom protocol can be run in different operation\n   modes which turn on\
    \ or off certain protocol functions depending on\n   the underlying link service.\
    \  For example, if the underlying link\n   service provides reliable data delivery,\
    \ the checksum and the\n   window-based error recovery can be turned off, thus\
    \ reducing the\n   protocol overhead; only a very simple recovery mechanism is\
    \ needed to\n   allow recovery from an unexpected link disconnection.  Therefore,\
    \ the\n   protocol design was able to use extremely efficient header encoding\n\
    \   (only 1-3 bytes per packet in a typical case), reduce the number of\n   round\
    \ trips significantly, and various features that are useful with\n   low-bandwidth\
    \ W-WAN links were easy to add.  Such features include\n   suspending the protocol\
    \ operation over the periods of link\n   disconnection or link outage together\
    \ with fast start once the link\n   becomes operational again, priority-based\
    \ multiplexing of user data\n   over the W-WAN link thus offering link capacity\
    \ to interactive\n   applications in a timely manner even in presence of bandwidth-\n\
    \   intensive background transfers, and link-level flow control to\n   prevent\
    \ data from accumulating into the W-WAN link internal buffers.\n   If desired,\
    \ regular TCP/IP transport, possibly with corresponding\n   protocol modifications\
    \ in TCP (and UDP) that would tune it more\n   suitable for W-WAN links, can be\
    \ employed on the last-hop link.\n"
- title: 5.2.2.2 Wireless Application Protocol (WAP)
  contents:
  - "5.2.2.2 Wireless Application Protocol (WAP)\n   The Mowgli system was designed\
    \ to support mobile hosts that are\n   attached to the Internet over constrained\
    \ links, but did not address\n   the specific challenges with low-end mobile devices.\
    \  Many mobile\n   wireless devices are power, memory, and processing constrained,\
    \ and\n   the communication links to these devices have lower bandwidth and\n\
    \   less stable connections.  These limitations led designers to develop\n   the\
    \ Wireless Application Protocol (WAP) that specifies an application\n   framework\
    \ and network protocols intended to work across differing\n   narrowband wireless\
    \ network technologies bringing Internet content\n   and advanced data services\
    \ to low-end digital cellular phones and\n   other mobile wireless terminals,\
    \ such as pagers and PDAs.\n   The WAP model consists of a WAP client (mobile\
    \ terminal), a WAP\n   proxy, and an origin server.  It requires a WAP proxy between\
    \ the WAP\n   client and the server on the Internet.  WAP uses a layered, scalable\n\
    \   architecture [WAPARCH], specifying the following five protocol layers\n  \
    \ to be used between the terminal and the proxy: Application Layer\n   (WAE) [WAPWAE],\
    \ Session Layer (WSP) [WAPWSP], Transaction Layer (WTP)\n   [WAPWTP], Security\
    \ Layer (WTLS) [WAPWTLS], and Transport Layer (WDP)\n   [WAPWDP].  Standard Internet\
    \ protocols are used between the proxy and\n   the origin server.  If the origin\
    \ server includes WAP proxy\n   functionality, it is called a WAP Server.\n  \
    \ In a typical scenario, a WAP client sends an encoded WAP request to a\n   WAP\
    \ proxy.  The WAP proxy translates the WAP request into a WWW\n   (HTTP) request,\
    \ performing the required protocol conversions, and\n   submits this request to\
    \ a standard web server on the Internet.  After\n   the web server responds to\
    \ the WAP proxy, the response is encoded\n   into a more compact binary format\
    \ to decrease the size of the data\n   over the air.  This encoded response is\
    \ forwarded to the WAP client\n   [WAPPROXY].\n   WAP operates over a variety\
    \ of bearer datagram services.  When\n   communicating over these bearer services,\
    \ the WAP transport layer\n   (WDP) is always used between the WAP client and\
    \ WAP proxy and it\n   provides port addressed datagram service to the higher\
    \ WAP layers.\n   If the bearer service supports IP (e.g., GSM-CSD, GSM-GPRS,\
    \ IS-136,\n   CDPD), UDP is used as the datagram protocol.  However, if the bearer\n\
    \   service does not support IP (e.g., GSM-SMS, GSM-USSD, GSM Cell\n   Broadcast,\
    \ CDMS-SMS, TETRA-SDS), WDP implements the required datagram\n   protocol as an\
    \ adaptation layer between the bearer network and the\n   protocol stack.\n  \
    \ The use of the other layers depends on the port number.  WAP has\n   registered\
    \ a set of well-known ports with IANA.  The port number\n   selected by the application\
    \ for communication between a WAP client\n   and proxy defines the other layers\
    \ to be used at each end.  The\n   security layer, WTLS, provides privacy, data\
    \ integrity and\n   authentication.  Its functionality is similar to TLS 1.0 [RFC2246]\n\
    \   extended with datagram support, optimized handshake and dynamic key\n   refreshing.\
    \  If the origin server includes WAP proxy functionality,\n   it might be used\
    \ to facilitate the end-to-end security solutions,\n   otherwise it provides security\
    \ between the mobile terminal and the\n   proxy.\n   The transaction layer, WTP,\
    \ is message based without connection\n   establishment and tear down.  It supports\
    \ three types of transaction\n   classes: an unconfirmed request (unidirectional),\
    \ a reliable\n   (confirmed) request (unidirectional), and a reliable (confirmed)\n\
    \   request-reply transaction.  Data is carried in the first packet and\n   3-way\
    \ handshake is eliminated to reduce latencies.  In addition\n   acknowledgments,\
    \ retransmission, and flow control are provided.  It\n   allows more than one\
    \ outstanding transaction at a time.  It handles\n   the bearer dependence of\
    \ a transfer, e.g., selects timeout values and\n   packet sizes according to the\
    \ bearer.  Unfortunately, WTP uses fixed\n   retransmission timers and does not\
    \ include congestion control, which\n   is a potential problem area as the use\
    \ of WAP increases [RFC3002].\n   The session layer, WSP, supports binary encoded\
    \ HTTP 1.1 with some\n   extensions such as long living session with suspend/resume\
    \ facility\n   and state handling, header caching, and push facility.  On top\
    \ of the\n   architecture is the application environment (WAE).\n"
- title: 5.2.3 W-WAN PEP Motivation
  contents:
  - "5.2.3 W-WAN PEP Motivation\n   As indicated in Section 5.2.1, W-WAN networks\
    \ typically offer very\n   low bandwidth connections with high latency and relatively\
    \ frequent\n   periods of link disconnection and they usually are expensive to\
    \ use.\n   Therefore, the transfer volume and extra round-trips, such as those\n\
    \   associated with TCP connection setup and teardown, must be reduced\n   and\
    \ the slow W-WAN link should be efficiently shielded from excess\n   traffic and\
    \ global (wired) Internet congestion to make Internet\n   access usable and economical.\
    \  Furthermore, interactive traffic must\n   be transmitted in a timely manner\
    \ even if there are other\n   simultaneous bandwidth intensive (background) transfers\
    \ and during\n   the periods with connectivity the link must be kept fully utilized\n\
    \   due to expensive use.  In addition, the (long) periods of link\n   disconnection\
    \ must not abort active (bulk data) transfers, if an\n   end-user so desires.\n\
    \   As (all) applications cannot be made mobility/W-WAN aware in short\n   time\
    \ frame or maybe ever, support for mobile W-WAN use should be\n   implemented\
    \ in a way which allows most applications, at least those\n   running on fixed\
    \ Internet hosts, to continue their operation\n   unmodified.\n"
- title: 5.3 W-LAN Environments
  contents:
  - "5.3 W-LAN Environments\n   Wireless LANs (W-LAN) are typically organized in a\
    \ cellular topology\n   where an access point with a W-LAN transceiver controls\
    \ a single\n   cell.  A cell is defined in terms of the coverage area of the base\n\
    \   station.  The access points are directly connected to the wired\n   network.\
    \  The access point in each of the cells is responsible for\n   forwarding packets\
    \ to and from the hosts located in the cell.  Often\n   the hosts with W-LAN transceivers\
    \ are mobile.  When such a mobile\n   host moves from one cell to another cell,\
    \ the responsibility for\n   forwarding packets between the wired network and\
    \ the mobile host must\n   be transferred to the access point of the new cell.\
    \  This is known as\n   a handoff.  Many W-LAN systems also support an operation\
    \ mode\n   enabling ad-hoc networking.  In this mode access points are not\n \
    \  necessarily needed, but hosts with W-LAN transceiver can communicate\n   directly\
    \ with the other hosts within the transceiver's transmission\n   range.\n"
- title: 5.3.1 W-LAN Network Characteristics
  contents:
  - "5.3.1 W-LAN Network Characteristics\n   Current wireless LANs typically provide\
    \ link bandwidth from 1 Mbps to\n   11 Mbps.  In the future, wide deployment of\
    \ higher bandwidths up to\n   54 Mbps or even higher can be expected.  The round-trip\
    \ delay with\n   wireless LANs is on the order of a few milliseconds or tens of\n\
    \   milliseconds.  Examples of W-LANs include IEEE 802.11, HomeRF, and\n   Hiperlan.\
    \  Wireless personal area networks (WPAN) such as Bluethooth\n   can use the same\
    \ PEP techniques.\n   Wireless LANs are error-prone due to bit errors, collisions\
    \ and link\n   outages.  In addition, consecutive packet losses may also occur\n\
    \   during handoffs.  Most W-LAN MAC protocols perform low level\n   retransmissions.\
    \  This feature shields upper layers from most losses.\n   However, unavoidable\
    \ losses, retransmission latency and link outages\n   still affect upper layers.\
    \  TCP performance over W-LANs or a network\n   path involving a W-LAN link is\
    \ likely to suffer from these effects.\n   As TCP wrongly interprets these packet\
    \ losses to be network\n   congestion, the TCP sender reduces its congestion window\
    \ and is often\n   forced to timeout in order to recover from the consecutive\
    \ losses.\n   The result is often unacceptably poor end-to-end performance.\n"
- title: '5.3.2 W-LAN PEP Implementations: Snoop'
  contents:
  - "5.3.2 W-LAN PEP Implementations: Snoop\n   Berkeley's Snoop protocol [SNOOP]\
    \ is a TCP-specific approach in which\n   a TCP-aware module, a Snoop agent, is\
    \ deployed at the W-LAN base\n   station that acts as the last-hop router to the\
    \ mobile host.  Snoop\n   aims at retaining the TCP end-to-end semantics.  The\
    \ Snoop agent\n   monitors every packet that passes through the base station in\
    \ either\n   direction and maintains soft state for each TCP connection.  The\n\
    \   Snoop agent is an asymmetric PEP implementation as it operates\n   differently\
    \ on TCP data and ACK channels as well as on the uplink\n   (from the mobile host)\
    \ and downlink (to the mobile host) TCP\n   segments.\n   For a data transfer\
    \ to a mobile host, the Snoop agent caches\n   unacknowledged TCP data segments\
    \ which it forwards to the TCP\n   receiver and monitors the corresponding ACKs.\
    \  It does two things:\n   1. Retransmits any lost data segments locally by using\
    \ local timers\n      and TCP duplicate ACKs to identify packet loss, instead\
    \ of waiting\n      for the TCP sender to do so end-to-end.\n   2. Suppresses\
    \ the duplicate ACKs on their way from the mobile host\n      back to the sender,\
    \ thus avoiding fast retransmit and congestion\n      avoidance at the latter.\n\
    \   Suppressing the duplicate ACKs is required to avoid unnecessary fast\n   retransmits\
    \ by the TCP sender as the Snoop agent retransmits a packet\n   locally.  Consider\
    \ a system that employs the Snoop agent and a TCP\n   sender S that sends packets\
    \ to receiver R via a base station BS.\n   Assume that S sends packets A, B, C,\
    \ D, E (in that order) which are\n   forwarded by BS to the wireless receiver\
    \ R.  Assume the first\n   transmission of packet B is lost due to errors on the\
    \ wireless link.\n   In this case, R receives packets A, C, D, E and B (in that\
    \ order).\n   Receipt of packets C, D and E trigger duplicate ACKs.  When S\n\
    \   receives three duplicate ACKs, it triggers fast retransmit (which\n   results\
    \ in a retransmission, as well as reduction of the congestion\n   window).  The\
    \ Snoop agent also retransmits B locally, when it\n   receives three duplicate\
    \ ACKs.  The fast retransmit at S occurs\n   despite the local retransmit on the\
    \ wireless link, degrading\n   throughput.  Snoop deals with this problem by dropping\
    \ TCP duplicate\n   ACKs appropriately at BS.\n   For a data transfer from a mobile\
    \ host, the Snoop agent detects the\n   packet losses on the wireless link by\
    \ monitoring the data segments it\n   forwards.  It then employs either Negative\
    \ Acknowledgements (NAK)\n   locally or Explicit Loss Notifications (ELN) to inform\
    \ the mobile\n   sender that the packet loss was not related to congestion, thus\n\
    \   allowing the sender to retransmit without triggering normal\n   congestion\
    \ control procedures.  To implement this, changes at the\n   mobile host are required.\n\
    \   When a Snoop agent uses NAKs to inform the TCP sender of the packet\n   losses\
    \ on the wireless link, one possibility to implement them is\n   using the Selective\
    \ Acknowledgment (SACK) option of TCP [RFC2018].\n   This requires enabling SACK\
    \ processing at the mobile host.  The Snoop\n   agent sends a TCP SACK, when it\
    \ detects a hole in the transmission\n   sequence from the mobile host or when\
    \ it has not received any new\n   packets from the mobile host for a certain time\
    \ period.  This\n   approach relies on the advisory nature of the SACKs: the mobile\n\
    \   sender is advised to retransmit the missing segments indicated by\n   SACK,\
    \ but it must not assume successful end-to-end delivery of the\n   segments acknowledged\
    \ with SACK as these segments might get lost\n   later in the path to the receiver.\
    \  Instead, the sender must wait for\n   a cumulative ACK to arrive.\n   When\
    \ the ELN mechanism is used to inform the mobile sender of the\n   packet losses,\
    \ Snoop uses one of the 'unreserved' bits in the TCP\n   header for ELN [SNOOPELN].\
    \  The Snoop agent keeps track of the holes\n   that correspond to segments lost\
    \ over the wireless link.  When a\n   (duplicate) ACK corresponding to a hole\
    \ in the sequence space arrives\n   from the TCP receiver, the Snoop agent sets\
    \ the ELN bit on the ACK to\n   indicate that the loss is unrelated to congestion\
    \ and then forwards\n   the ACK to the TCP sender.  When the sender receives a\
    \ certain number\n   of (duplicate) ACKs with ELN (a configurable variable at\
    \ the mobile\n   host, e.g., two), it retransmit the missing segment without\n\
    \   performing any congestion control measures.\n   The ELN mechanism using one\
    \ of the six bits reserved for future use\n   in the TCP header is dangerous as\
    \ it exercises checks that might not\n   be correctly implemented in TCP stacks,\
    \ and may expose bugs.\n   A scheme such as Snoop is needed only if the possibility\
    \ of a fast\n   retransmit due to wireless errors is non-negligible.  In particular,\n\
    \   if the wireless link uses link-layer recovery for lost data, then\n   this\
    \ scheme is not beneficial.  Also, if the TCP window tends to stay\n   smaller\
    \ than four segments, for example, due to congestion related\n   losses on the\
    \ wired network, the probability that the Snoop agent\n   will have an opportunity\
    \ to locally retransmit a lost packet is\n   small.  This is because at least\
    \ three duplicate ACKs are needed to\n   trigger the local retransmission, but\
    \ due to small window the Snoop\n   agent may not be able to forward three new\
    \ packets after the lost\n   packet and thus induce the required three duplicate\
    \ ACKs.\n   Conversely, when the TCP window is large enough, Snoop can provide\n\
    \   significant performance improvement (compared with standard TCP).\n   In order\
    \ to alleviate the problem with small TCP windows, Snoop\n   proposes a solution\
    \ in which a TCP sender is allowed to transmit a\n   new data segment for each\
    \ duplicate ACK it receives as long as the\n   number of duplicate ACKs is less\
    \ than the threshold for TCP fast\n   retransmission (three duplicate ACKs). \
    \ If the new segment reaches\n   the receiver, it will generate another duplicate\
    \ ACK which, in turn,\n   allows the sender to transmit yet another data segment.\
    \  This\n   continues until enough duplicate ACKs have accumulated to trigger\
    \ TCP\n   fast retransmission.  This proposal is the same as the \"Limited\n \
    \  Transfer\" proposal [RFC3042] that has recently been forwarded to the\n   standards\
    \ track.  However, to be able to benefit from this solution,\n   it needs to be\
    \ deployed on TCP senders and therefore it is not ready\n   for use in a short\
    \ time frame.\n   Snoop requires the intermediate node (base station) to examine\
    \ and\n   operate on the traffic between the mobile host and the other end host\n\
    \   on the wired Internet.  Hence, Snoop does not work if the IP traffic\n   is\
    \ encrypted.  Possible solutions involve:\n   - making the Snoop agent a party\
    \ to the security association\n     between the client and the server;\n   - IPsec\
    \ tunneling mode, terminated at the Snooping base station.\n   However, these\
    \ techniques require that users trust base stations.\n   Snoop also requires that\
    \ both the data and the corresponding ACKs\n   traverse the same base station.\
    \  Furthermore, the Snoop agent may\n   duplicate efforts by the link layer as\
    \ it retransmits the TCP data\n   segments \"at the transport layer\" across \
    \ the wireless link.  (Snoop\n   has been described by its designers as a TCP-aware\
    \ link layer.  This\n   is the right approach: the link and network layers can\
    \ be much more\n   aware of each other than strict layering suggests.)\n"
- title: 5.3.3 W-LAN PEP Motivation
  contents:
  - "5.3.3 W-LAN PEP Motivation\n   Wireless LANs suffer from an error prone wireless\
    \ channel.  Errors\n   can typically be considered bursty and channel conditions\
    \ may change\n   rapidly from mobility and environmental changes.  Packets are\
    \ dropped\n   from bit errors or during handovers.  Periods of link outage can\
    \ also\n   be experienced.  Although the typical MAC performs retransmissions,\n\
    \   dropped packets, outages and retransmission latency still can have\n   serious\
    \ performance implications for IP performance, especially TCP.\n   PEPs can be\
    \ used to alleviate problems caused by packet losses,\n   protect TCP from link\
    \ outages, and to add priority multiplexing.\n   Techniques such as Snoop are\
    \ integrally implemented in access points,\n   while priority and compression\
    \ schemes are distributed across the W-\n   LAN.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   The use of Performance Enhancing Proxies introduces\
    \ several issues\n   which impact security.  First, (as described in detail in\
    \ Section\n   4.1.1,) using PEPs and using IPsec is generally mutually exclusive.\n\
    \   Unless the PEP is also both capable and trusted to be the endpoint of\n  \
    \ an IPsec tunnel (and the use of an IPsec tunnel is deemed good enough\n   security\
    \ for the applicable threat model), a user or network\n   administrator must choose\
    \ between improved performance and network\n   layer security.  In some cases,\
    \ transport (or higher) layer security\n   can be used in conjunction with a PEP\
    \ to mitigate the impact of not\n   having network layer security.  But, support\
    \ by applications for the\n   use of transport (or higher) layer security is far\
    \ from ubiquitous.\n   Additionally, the PEP itself needs to be protected from\
    \ attack.\n   First, even when IPsec tunnels are used with the PEP, the PEP\n\
    \   represents a point in the network where traffic is exposed.  And, the\n  \
    \ placement of a PEP in the network makes it an ideal platform from\n   which\
    \ to launch a denial of service or man in the middle attack.\n   (Also, taking\
    \ the PEP out of action is a potential denial of service\n   attack itself.) \
    \ Therefore, the PEP must be protected (e.g., by a\n   firewall) or must protect\
    \ itself from improper access by an attacker\n   just like any other device which\
    \ resides in a network.\n"
- title: 7. IANA Considerations
  contents:
  - "7. IANA Considerations\n   This document is an informational overview document\
    \ and, as such,\n   does not introduce new nor modify existing name or number\
    \ spaces\n   managed by IANA.\n"
- title: 8. Acknowledgements
  contents:
  - "8. Acknowledgements\n   This document grew out of the Internet-Draft \"TCP Performance\n\
    \   Enhancing Proxy Terminology\", RFC 2757 \"Long Thin Networks\", and work\n\
    \   done in the IETF TCPSAT working group.  The authors are indebted to\n   the\
    \ active members of the PILC working group.  In particular, Joe\n   Touch and\
    \ Mark Allman gave us invaluable feedback on various aspects\n   of the document\
    \ and Magdolna Gerendai provided us with essential help\n   on the WAP example.\n"
- title: 9. References
  contents:
  - "9. References\n   [BBKT97]    P. Bhagwat, P. Bhattacharya, A. Krishma, S.K. Tripathi,\n\
    \               \"Using channel state dependent packet scheduling to\n       \
    \        improve TCP throughput over wireless LANs,\" ACM Wireless\n         \
    \      Networks, March 1997, pp. 91 - 102.  Available at:\n               http://www.acm.org/pubs\n\
    \               /articles/journals/wireless/1997-3-1/p91-bhagwat/p91-\n      \
    \         bhagwat.pdf\n   [BPK97]     H. Balakrishnan, V.N. Padmanabhan, R.H.\
    \ Katz, \"The\n               Effects of Asymmetry on TCP Performance,\" Proc.\
    \ ACM/IEEE\n               Mobicom, Budapest, Hungary, September 1997.\n   [BW97]\
    \      G. Brasche, B. Walke, \"Concepts, Services, and Protocols\n           \
    \    of the New GSM Phase 2+ general Packet Radio Service,\"\n               IEEE\
    \ Communications Magazine, Vol. 35, No. 8, August\n               1997.\n   [CDMA]\
    \      Electronic Industry Alliance (EIA)/Telecommunications\n               Industry\
    \ Association (TIA), IS-95: Mobile Station-Base\n               Station Compatibility\
    \ Standard for Dual-Mode Wideband\n               Spread Spectrum Cellular System,\
    \ 1993.\n   [CDPD]      Wireless Data Forum, CDPD System Specification, Release\n\
    \               1.1, 1995.\n   [CTC+97]    H. Chang, C. Tait, N. Cohen, M. Shapiro,\
    \ S. Mastrianni,\n               R. Floyd, B. Housel, D. Lindquist, \"Web Browsing\
    \ in a\n               Wireless Environment: Disconnected and Asynchronous\n \
    \              Operation in ARTour Web Express,\" Proc. MobiCom'97,\n        \
    \       Budapest, Hungary, September 1997.\n   [FMSBMR98]  D.C. Feldmeier, A.J.\
    \ McAuley, J.M. Smith, D.S. Bakin,\n               W.S. Marcus, T.M. Raleigh,\
    \ \"Protocol Boosters,\" IEEE\n               Journal on Selected Areas of Communication,\
    \ Vol. 16, No.\n               3, April 1998.\n   [FLASH]     Flash Networks Ltd.,\
    \ performance boosting products\n               technology vendor based in Holmdel,\
    \ New Jersey.  Website\n               at http://www.flashnetworks.com.\n   [FOURELLE]\
    \  Fourelle Systems, performance boosting products\n               technology\
    \ vendor based in Santa Clara, California.\n               Website at http://www.fourelle.com.\n\
    \   [GPRS]      ETSI, \"General Packet Radio Service (GPRS): Service\n       \
    \        Description, Stage 2,\" GSM03.60, v.6.1.1, August 1998.\n   [GSM]   \
    \    M. Rahnema, \"Overview of the GSM system and protocol\n               architecture,\"\
    \ IEEE Communications Magazine, Vol. 31, No.\n               4, pp. 92-100, April\
    \ 1993.\n   [HNS]       Hughes Network Systems, Inc., VSAT technology vendor\n\
    \               based in Germantown, Maryland.  Website at\n               http://www.hns.com.\n\
    \   [I-TCP]     A. Bakre, B.R. Badrinath, \"I-TCP: Indirect TCP for Mobile\n \
    \              Hosts,\" Proc. 15th International Conference on\n             \
    \  Distributed Computing Systems (ICDCS), May 1995.\n   [KRA94]     M. Kojo, K.\
    \ Raatikainen, T. Alanko, \"Connecting Mobile\n               Workstations to\
    \ the Internet over a Digital Cellular\n               Telephone Network,\" Proc.\
    \ Workshop on Mobile and Wireless\n               Information Systems (MOBIDATA),\
    \ Rutgers University, NJ,\n               November 1994.  Revised version published\
    \ in Mobile\n               Computing, pp. 253-270, Kluwer, 1996.\n   [KRLKA97]\
    \   M. Kojo, K. Raatikainen, M. Liljeberg, J. Kiiskinen, T.\n               Alanko,\
    \ \"An Efficient Transport Service for Slow Wireless\n               Telephone\
    \ Links,\" IEEE Journal on Selected Areas of\n               Communication, Vol.\
    \ 15, No. 7, September 1997.\n   [LAKLR95]   M. Liljeberg, T. Alanko, M. Kojo,\
    \ H. Laamanen, K.\n               Raatikainen, \"Optimizing World-Wide Web for\
    \ Weakly-\n               Connected Mobile Workstations: An Indirect Approach,\"\
    \n               Proc. of the 2nd Int. Workshop on Services in Distributed\n \
    \              and Networked Environments, Whistler, Canada, pp. 132-\n      \
    \         139, June 1995.\n   [LHKR96]    M. Liljeberg, H. Helin, M. Kojo, K.\
    \ Raatikainen, \"Mowgli\n               WWW Software: Improved Usability of WWW\
    \ in Mobile WAN\n               Environments,\" Proc. IEEE Global Internet 1996\n\
    \               Conference, London, UK, November 1996.\n   [M-TCP]     K. Brown,\
    \ S. Singh, \"M-TCP: TCP for Mobile Cellular\n               Networks,\" ACM Computer\
    \ Communications Review Volume\n               27(5), 1997.  Available at\n  \
    \             ftp://ftp.ece.orst.edu/pub/singh/papers/mtcp.ps.gz.\n   [Pax99]\
    \     V. Paxson, \"End-to-End Internet Packet Dynamics,\"\n               IEEE/ACM\
    \ Transactions on Networking, Vol. 7, No. 3, 1999,\n               pp. 277-292.\n\
    \   [PILCWEB]   http://pilc.grc.nasa.gov.\n   [RFC0792]   Postel, J., \"Internet\
    \ Control Message Protocol\", STD 5,\n               RFC 792, September 1981.\n\
    \   [RFC0793]   Postel, J., \"Transmission Control Protocol\", STD 7, RFC\n  \
    \             793, September 1981.\n   [RFC1122]   Braden, R., \"Requirements\
    \ for Internet Hosts --\n               Communications Layers\", STD 3, RFC 1122,\
    \ October 1989.\n   [RFC1144]   Jacobson, V., \"Compressing TCP/IP Headers for\
    \ Low-Speed\n               Serial Links\", RFC 1144, February 1990.\n   [RFC1323]\
    \   Jacobson, V., Braden, R. and D. Borman, \"TCP Extensions\n               for\
    \ High Performance\", RFC 1323, May 1992.\n   [RFC1958]   Carpenter, B., \"Architectural\
    \ Principles of the\n               Internet\", RFC 1958, June 1996.\n   [RFC2018]\
    \   Mathis, M., Mahdavi, J., Floyd, S. and A. Romanow, \"TCP\n               Selective\
    \ Acknowledgment Options\", RFC 2018, October\n               1996.\n   [RFC2151]\
    \   Kessler, G. and S. Shepard, \"A Primer On Internet and\n               TCP/IP\
    \ Tools and Utilities\", FYI 30, RFC 2151, June 1997.\n   [RFC2246]   Dierk, T.\
    \ and E. Allen, \"TLS Protocol Version 1,\" RFC\n               2246, January\
    \ 1999.\n   [RFC2393]   Shacham, A., Monsour, R., Pereira, R. and M. Thomas, \"\
    IP\n               Payload Compression Protocol (IPcomp)\", RFC 2393,\n      \
    \         December 1998.\n   [RFC2401]   Kent, S., and R. Atkinson, \"Security\
    \ Architecture for the\n               Internet Protocol\", RFC 2401, November\
    \ 1998.\n   [RFC2475]   Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z.\n\
    \               and W. Weiss, \"An Architecture for Differentiated\n         \
    \      Services\", RFC 2475, December 1998.\n   [RFC2488]   Allman, M., Glover,\
    \ D. and L. Sanchez, \"Enhancing TCP\n               Over Satellite Channels using\
    \ Standard Mechanisms\", BCP\n               28, RFC 2488, January 1999.\n   [RFC2507]\
    \   Degermark, M., Nordgren, B. and S. Pink, \"IP Header\n               Compression\"\
    , RFC 2507, February 1999.\n   [RFC2508]   Casner, S. and V. Jacobson, \"Compressing\
    \ IP/UDP/RTP\n               Headers for Low-Speed Serial Links\", RFC 2508, February\n\
    \               1999.\n   [RFC2509]   Engan, M., Casner, S. and C. Bormann, \"\
    IP Header\n               Compression over PPP\", RFC 2509, February 1999.\n \
    \  [RFC2663]   Srisuresh, P. and Y. Holdrege, \"IP Network Address\n         \
    \      Translator (NAT) Terminology and Considerations\", RFC\n              \
    \ 2663, August 1999.\n   [RFC2760]   Allman, M., Dawkins, S., Glover, D., Griner,\
    \ J.,\n               Henderson, T., Heidemann, J., Kruse, H., Ostermann, S.,\n\
    \               Scott, K., Semke, J., Touch, J. and D. Tran, \"Ongoing TCP\n \
    \              Research Related to Satellites\", RFC 2760, February 2000.\n  \
    \ [RFC3002]   Mitzel, D., \"Overview of 2000 IAB Wireless\n               Internetworking\
    \ Workshop\", RFC 3002, December 2000.\n   [RFC3042]   Allman, M., Balakrishnan,\
    \ H. and S. Floyd, \"Enhancing\n               TCP's Loss Recovery Using Limited\
    \ Transmit\", RFC 3042,\n               January 2001.\n   [SHEL00]    Z. Shelby,\
    \ T. Saarinen, P. Mahonen, D. Melpignano, A.\n               Marshall, L. Munoz,\
    \ \"Wireless IPv6 Networks - WINE,\" IST\n               Mobile Summit, Ireland,\
    \ October 2000.\n   [SNOOP]     H. Balakrishnan, S. Seshan, E. Amir, R. Katz,\
    \ \"Improving\n               TCP/IP Performance over Wireless Networks,\" Proc.\
    \ 1st ACM\n               Conference on Mobile Communications and Networking\n\
    \               (Mobicom), Berkeley, California, November 1995.\n   [SNOOPELN]\
    \  H. Balakrishnan, R. Katz, \"Explicit Loss Notification and\n              \
    \ Wireless Web Performance,\" Proc. IEEE Globecom 1998,\n               Internet\
    \ Mini-Conference, Sydney, Australia, November\n               1998.\n   [SPACENET]\
    \  Spacenet, VSAT technology vendor based in Mclean,\n               Virginia.\
    \  Website at http://www.spacenet.com.\n   [SRC84]     J.H. Saltzer, D.P. Reed,\
    \ D.D. Clark, \"End-To-End\n               Arguments in System Design,\" ACM TOCS,\
    \ Vol. 2, No. 4, pp.\n               277-288, November 1984.\n   [WAPARCH]   Wireless\
    \ Application Protocol Architecture Specification,\n               April 1998,\
    \ http://www.wapforum.org.\n   [WAPPROXY]  Wireless Application Protocol Push\
    \ Proxy Gateway Service\n               Specification, August 1999, http://www.wapforum.org.\n\
    \   [WAPWAE]    Wireless Application Protocol Wireless Application\n         \
    \      Environment Overview, March 2000,\n               http://www.wapforum.org.\n\
    \   [WAPWDP]    Wireless Application Protocol Wireless Datagram Protocol\n   \
    \            Specification, February 2000, http://www.wapforum.org.\n   [WAPWSP]\
    \    Wireless Application Protocol Wireless Session Protocol\n               Specification,\
    \ May 2000, http://www.wapforum.org.\n   [WAPWTLS]   Wireless Application Protocol\
    \ Wireless Transport Layer\n               Security Specification, February 2000,\n\
    \               http://www.wapforum.org.\n   [WAPWTP]    Wireless Application\
    \ Protocol Wireless Transaction\n               Protocol Specification, February\
    \ 2000,\n               http://www.wapforum.org.\n   [Zhang00]   Y. Zhang, B.\
    \ Singh, \"A Multi-Layer IPsec Protocol,\" Proc.\n               proceedings of\
    \ 9th USENIX Security Symposium, Denver,\n               Colorado, August 2000.\
    \  Available at\n               http://www.wins.hrl.com/people/ygz/papers/usenix00.html.\n"
- title: 10. Authors' Addresses
  contents:
  - "10. Authors' Addresses\n   Questions about this document may be directed to:\n\
    \   John Border\n   Hughes Network Systems\n   11717 Exploration Lane\n   Germantown,\
    \ Maryland  20876\n   Phone: +1-301-548-6819\n   Fax:   +1-301-548-1196\n   EMail:\
    \ border@hns.com\n   Markku Kojo\n   Department of Computer Science\n   University\
    \ of Helsinki\n   P.O. Box 26 (Teollisuuskatu 23)\n   FIN-00014 HELSINKI\n   Finland\n\
    \   Phone: +358-9-1914-4179\n   Fax:   +358-9-1914-4441\n   EMail: kojo@cs.helsinki.fi\n\
    \   Jim Griner\n   NASA Glenn Research Center\n   MS: 54-5\n   21000 Brookpark\
    \ Orad\n   Cleveland, Ohio  44135-3191\n   Phone: +1-216-433-5787\n   Fax:   +1-216-433-8705\n\
    \   EMail: jgriner@grc.nasa.gov\n   Gabriel Montenegro\n   Sun Microsystems Laboratories,\
    \ Europe\n   29, chemin du Vieux Chene\n   38240 Meylan, FRANCE\n   Phone: +33\
    \ 476 18 80 45\n   EMail: gab@sun.com\n   Zach Shelby\n   University of Oulu\n\
    \   Center for Wireless Communications\n   PO Box 4500\n   FIN-90014\n   Finland\n\
    \   Phone: +358-40-779-6297\n   EMail: zach.shelby@ee.oulu.fi\n"
- title: Appendix A - PEP Terminology Summary
  contents:
  - "Appendix A - PEP Terminology Summary\n   This appendix provides a summary of\
    \ terminology frequently used\n   during discussion of Performance Enhancing Proxies.\
    \  (In some cases,\n   these terms have different meanings from their non-PEP\
    \ related\n   usage.)\n   ACK filtering\n      Removing acknowledgments to prevent\
    \ congestion of a low speed\n      link, usually used with paths which include\
    \ a highly asymmetric\n      link.  Sometimes also called ACK reduction.  See\
    \ Section 3.1.4.\n   ACK spacing\n      Delayed forwarding of acknowledgments\
    \ in order to space them\n      appropriately, for example, to help minimize the\
    \ burstiness of\n      TCP data.  See Section 3.1.1.\n   application layer PEP\n\
    \      A Performance Enhancing Proxy operating above the transport\n      layer.\
    \  May be aimed at improving application or transport\n      protocol performance\
    \ (or both).  Described in detail in Section\n      2.1.2.\n   asymmetric link\n\
    \      A link which has different rates for the forward channel (used for\n  \
    \    data segments) and the back (or return) channel (used for ACKs).\n   available\
    \ bandwidth\n      The total capacity of a link available to carry information\
    \ at any\n      given time.  May be lower than the raw bandwidth due to competing\n\
    \      traffic.\n   bandwidth utilization\n      The actual amount of information\
    \ delivered over a link in a given\n      period, usually expressed as a percent\
    \ of the raw bandwidth of\n      the link.\n   gateway\n      Has several meanings\
    \ with respect to PEPs, depending on context:\n         -  An access point to\
    \ a particular link;\n         -  A device capable of initiating and terminating\
    \ connections\n            on\n            behalf of a user or end system (e.g.,\
    \ a firewall or proxy).\n      Not necessarily, but could be, a router.\n   in\
    \ flight (data)\n      Data sent but not yet acknowledged.  More precisely, data\
    \ sent for\n      which the sender has not yet received the acknowledgement.\n\
    \   link layer PEP\n      A Performance Enhancing Proxy operating below the network\
    \ layer.\n   local acknowledgement\n      The generation of acknowledgments by\
    \ an entity in the path\n      between two end systems in order to allow the sending\
    \ system to\n      transmit more data without waiting for end-to-end\n      acknowledgments.\
    \  Described (in the context of TCP) in Section\n      3.1.2.\n   performance\
    \ enhancing proxy\n      An entity in the network acting on behalf of an end system\
    \ or user\n      (with or without the knowledge of the end system or user) in\
    \ order\n      to enhance protocol performance.  Section 2 describes various\n\
    \      types of performance enhancing proxies.  Section 3 describes the\n    \
    \  mechanisms performance enhancing proxies use to improve\n      performance.\n\
    \   raw bandwidth\n      The total capacity of an unloaded link available to carry\n\
    \      information.\n   Snoop\n      A TCP-aware link layer developed for wireless\
    \ packet radio and\n      cellular networks.  It works by caching segments at\
    \ a wireless\n      base station.  If the base station sees duplicate acknowledgments\n\
    \      for a segment that it has cached, it retransmits the missing\n      segment\
    \ while suppressing the duplicate acknowledgement stream\n      being forwarded\
    \ back to the sender until the wireless receiver\n      starts to acknowledge\
    \ new data.  Described in detail in Section\n      5.3.2 and [SNOOP].\n   split\
    \ connection\n      A connection that has been terminated before reaching the\
    \ intended\n      destination end system in order to initiate another connection\n\
    \      towards the end system.  This allows the use of different\n      connection\
    \ characteristics for different parts of the path of\n      the originally intended\
    \ connection.  See Section 2.4.\n   TCP PEP\n      A Performance Enhancing Proxy\
    \ operating at the transport layer\n      with TCP.  Aimed at improving TCP performance.\n\
    \   TCP splitting\n      Using one or more split TCP connections to improve TCP\n\
    \      performance.\n   TCP spoofing\n      Sometimes used as a synonym for TCP\
    \ PEP.  More accurately, TCP\n      spoofing refers to using transparent (to the\
    \ TCP stacks in the\n      end systems) mechanisms to improve TCP performance.\
    \  See Section\n      2.1.1.\n   transparent\n      In the context of a PEP, transparent\
    \ refers to not requiring\n      changes to be made to the end systems, transport\
    \ endpoints\n      and/or applications involved in a connection.  See Section\
    \ 2.5\n      for a more detailed explanation.\n   transport layer PEP\n      A\
    \ Performance Enhancing Proxy operating at the transport layer.\n      Described\
    \ in detail in Section 2.1.1.\n   tunneling\n      In the context of PEPs, tunneling\
    \ refers to the process of\n      wrapping a packet for transmission over a particular\
    \ link\n      between two PEPs.  See Section 3.2.\n   WAP\n      The Wireless\
    \ Application Protocol specifies an application\n      framework and network protocols\
    \ intended to work across\n      differing narrow-band wireless network technologies.\
    \  See\n      Section 5.2.2.2.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
