- title: __initial_text__
  contents:
  - "                      JSON Web Token (JWT) Profile\n      for OAuth 2.0 Client\
    \ Authentication and Authorization Grants\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification defines the use of a JSON Web Token (JWT) Bearer\n\
    \   Token as a means for requesting an OAuth 2.0 access token as well as\n   for\
    \ client authentication.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7523.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Notational Conventions  . . . . . . . . . . . . .\
    \ . . . .   4\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   2.  HTTP Parameter Bindings for Transporting Assertions . . .\
    \ . .   4\n     2.1.  Using JWTs as Authorization Grants  . . . . . . . . . .\
    \ .   4\n     2.2.  Using JWTs for Client Authentication  . . . . . . . . . .\
    \   5\n   3.  JWT Format and Processing Requirements  . . . . . . . . . . .  \
    \ 5\n     3.1.  Authorization Grant Processing  . . . . . . . . . . . . .   7\n\
    \     3.2.  Client Authentication Processing  . . . . . . . . . . . .   8\n  \
    \ 4.  Authorization Grant Example . . . . . . . . . . . . . . . . .   8\n   5.\
    \  Interoperability Considerations . . . . . . . . . . . . . . .   9\n   6.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .   9\n   7.  Privacy Considerations\
    \  . . . . . . . . . . . . . . . . . . .  10\n   8.  IANA Considerations . . .\
    \ . . . . . . . . . . . . . . . . . .  10\n     8.1.  Sub-Namespace Registration\
    \ of\n           urn:ietf:params:oauth:grant-type:jwt-bearer . . . . . . .  10\n\
    \     8.2.  Sub-Namespace Registration of\n           urn:ietf:params:oauth:client-assertion-type:jwt-bearer\
    \  .  10\n   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  11\n     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  11\n\
    \     9.2.  Informative References  . . . . . . . . . . . . . . . . .  11\n  \
    \ Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  12\n   Authors'\
    \ Addresses  . . . . . . . . . . . . . . . . . . . . . . .  12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   JSON Web Token (JWT) [JWT] is a JSON-based [RFC7159] security\
    \ token\n   encoding that enables identity and security information to be shared\n\
    \   across security domains.  A security token is generally issued by an\n   Identity\
    \ Provider and consumed by a Relying Party that relies on its\n   content to identify\
    \ the token's subject for security-related\n   purposes.\n   The OAuth 2.0 Authorization\
    \ Framework [RFC6749] provides a method for\n   making authenticated HTTP requests\
    \ to a resource using an access\n   token.  Access tokens are issued to third-party\
    \ clients by an\n   authorization server (AS) with the (sometimes implicit) approval\
    \ of\n   the resource owner.  In OAuth, an authorization grant is an abstract\n\
    \   term used to describe intermediate credentials that represent the\n   resource\
    \ owner authorization.  An authorization grant is used by the\n   client to obtain\
    \ an access token.  Several authorization grant types\n   are defined to support\
    \ a wide range of client types and user\n   experiences.  OAuth also allows for\
    \ the definition of new extension\n   grant types to support additional clients\
    \ or to provide a bridge\n   between OAuth and other trust frameworks.  Finally,\
    \ OAuth allows the\n   definition of additional authentication mechanisms to be\
    \ used by\n   clients when interacting with the authorization server.\n   \"Assertion\
    \ Framework for OAuth 2.0 Client Authentication and\n   Authorization Grants\"\
    \ [RFC7521] is an abstract extension to OAuth 2.0\n   that provides a general\
    \ framework for the use of assertions (a.k.a.\n   security tokens) as client credentials\
    \ and/or authorization grants\n   with OAuth 2.0.  This specification profiles\
    \ the OAuth Assertion\n   Framework [RFC7521] to define an extension grant type\
    \ that uses a JWT\n   Bearer Token to request an OAuth 2.0 access token as well\
    \ as for use\n   as client credentials.  The format and processing rules for the\
    \ JWT\n   defined in this specification are intentionally similar, though not\n\
    \   identical, to those in the closely related specification \"Security\n   Assertion\
    \ Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client\n   Authentication and\
    \ Authorization Grants\" [RFC7522].  The differences\n   arise where the structure\
    \ and semantics of JWTs differ from SAML\n   Assertions.  JWTs, for example, have\
    \ no direct equivalent to the\n   <SubjectConfirmation> or <AuthnStatement> elements\
    \ of SAML\n   Assertions.\n   This document defines how a JWT Bearer Token can\
    \ be used to request\n   an access token when a client wishes to utilize an existing\
    \ trust\n   relationship, expressed through the semantics of the JWT, without\
    \ a\n   direct user-approval step at the authorization server.  It also\n   defines\
    \ how a JWT can be used as a client authentication mechanism.\n   The use of a\
    \ security token for client authentication is orthogonal\n   to and separable\
    \ from using a security token as an authorization\n   grant.  They can be used\
    \ either in combination or separately.  Client\n   authentication using a JWT\
    \ is nothing more than an alternative way\n   for a client to authenticate to\
    \ the token endpoint and must be used\n   in conjunction with some grant type\
    \ to form a complete and meaningful\n   protocol request.  JWT authorization grants\
    \ may be used with or\n   without client authentication or identification.  Whether\
    \ or not\n   client authentication is needed in conjunction with a JWT\n   authorization\
    \ grant, as well as the supported types of client\n   authentication, are policy\
    \ decisions at the discretion of the\n   authorization server.\n   The process\
    \ by which the client obtains the JWT, prior to exchanging\n   it with the authorization\
    \ server or using it for client\n   authentication, is out of scope.\n"
- title: 1.1.  Notational Conventions
  contents:
  - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n   Unless otherwise noted, all the protocol parameter\
    \ names and values\n   are case sensitive.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   All terms are as defined in the following specifications:\
    \ \"The OAuth\n   2.0 Authorization Framework\" [RFC6749], the OAuth Assertion\
    \ Framework\n   [RFC7521], and \"JSON Web Token (JWT)\" [JWT].\n"
- title: 2.  HTTP Parameter Bindings for Transporting Assertions
  contents:
  - "2.  HTTP Parameter Bindings for Transporting Assertions\n   The OAuth Assertion\
    \ Framework [RFC7521] defines generic HTTP\n   parameters for transporting assertions\
    \ (a.k.a. security tokens)\n   during interactions with a token endpoint.  This\
    \ section defines\n   specific parameters and treatments of those parameters for\
    \ use with\n   JWT Bearer Tokens.\n"
- title: 2.1.  Using JWTs as Authorization Grants
  contents:
  - "2.1.  Using JWTs as Authorization Grants\n   To use a Bearer JWT as an authorization\
    \ grant, the client uses an\n   access token request as defined in Section 4 of\
    \ the OAuth Assertion\n   Framework [RFC7521] with the following specific parameter\
    \ values and\n   encodings.\n   The value of the \"grant_type\" is \"urn:ietf:params:oauth:grant-\n\
    \   type:jwt-bearer\".\n   The value of the \"assertion\" parameter MUST contain\
    \ a single JWT.\n   The \"scope\" parameter may be used, as defined in the OAuth\
    \ Assertion\n   Framework [RFC7521], to indicate the requested scope.\n   Authentication\
    \ of the client is optional, as described in\n   Section 3.2.1 of OAuth 2.0 [RFC6749]\
    \ and consequently, the\n   \"client_id\" is only needed when a form of client\
    \ authentication that\n   relies on the parameter is used.\n   The following example\
    \ demonstrates an access token request with a JWT\n   as an authorization grant\
    \ (with extra line breaks for display\n   purposes only):\n     POST /token.oauth2\
    \ HTTP/1.1\n     Host: as.example.com\n     Content-Type: application/x-www-form-urlencoded\n\
    \     grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer\n     &assertion=eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0.\n\
    \     eyJpc3Mi[...omitted for brevity...].\n     J9l-ZhwP[...omitted for brevity...]\n"
- title: 2.2.  Using JWTs for Client Authentication
  contents:
  - "2.2.  Using JWTs for Client Authentication\n   To use a JWT Bearer Token for\
    \ client authentication, the client uses\n   the following parameter values and\
    \ encodings.\n   The value of the \"client_assertion_type\" is\n   \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\
    .\n   The value of the \"client_assertion\" parameter contains a single JWT.\n\
    \   It MUST NOT contain more than one JWT.\n   The following example demonstrates\
    \ client authentication using a JWT\n   during the presentation of an authorization\
    \ code grant in an access\n   token request (with extra line breaks for display\
    \ purposes only):\n     POST /token.oauth2 HTTP/1.1\n     Host: as.example.com\n\
    \     Content-Type: application/x-www-form-urlencoded\n     grant_type=authorization_code&\n\
    \     code=n0esc3NRze7LTCu7iYzS6a5acc3f0ogp4&\n     client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3A\n\
    \     client-assertion-type%3Ajwt-bearer&\n     client_assertion=eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.\n\
    \     eyJpc3Mi[...omitted for brevity...].\n     cC4hiUPo[...omitted for brevity...]\n"
- title: 3.  JWT Format and Processing Requirements
  contents:
  - "3.  JWT Format and Processing Requirements\n   In order to issue an access token\
    \ response as described in OAuth 2.0\n   [RFC6749] or to rely on a JWT for client\
    \ authentication, the\n   authorization server MUST validate the JWT according\
    \ to the criteria\n   below.  Application of additional restrictions and policy\
    \ are at the\n   discretion of the authorization server.\n   1.   The JWT MUST\
    \ contain an \"iss\" (issuer) claim that contains a\n        unique identifier\
    \ for the entity that issued the JWT.  In the\n        absence of an application\
    \ profile specifying otherwise,\n        compliant applications MUST compare issuer\
    \ values using the\n        Simple String Comparison method defined in Section\
    \ 6.2.1 of RFC\n        3986 [RFC3986].\n   2.   The JWT MUST contain a \"sub\"\
    \ (subject) claim identifying the\n        principal that is the subject of the\
    \ JWT.  Two cases need to be\n        differentiated:\n        A.  For the authorization\
    \ grant, the subject typically\n            identifies an authorized accessor\
    \ for which the access token\n            is being requested (i.e., the resource\
    \ owner or an\n            authorized delegate), but in some cases, may be a\n\
    \            pseudonymous identifier or other value denoting an anonymous\n  \
    \          user.\n        B.  For client authentication, the subject MUST be the\n\
    \            \"client_id\" of the OAuth client.\n   3.   The JWT MUST contain\
    \ an \"aud\" (audience) claim containing a\n        value that identifies the\
    \ authorization server as an intended\n        audience.  The token endpoint URL\
    \ of the authorization server\n        MAY be used as a value for an \"aud\" element\
    \ to identify the\n        authorization server as an intended audience of the\
    \ JWT.  The\n        authorization server MUST reject any JWT that does not contain\n\
    \        its own identity as the intended audience.  In the absence of an\n  \
    \      application profile specifying otherwise, compliant applications\n    \
    \    MUST compare the audience values using the Simple String\n        Comparison\
    \ method defined in Section 6.2.1 of RFC 3986\n        [RFC3986].  As noted in\
    \ Section 5, the precise strings to be\n        used as the audience for a given\
    \ authorization server must be\n        configured out of band by the authorization\
    \ server and the\n        issuer of the JWT.\n   4.   The JWT MUST contain an\
    \ \"exp\" (expiration time) claim that\n        limits the time window during\
    \ which the JWT can be used.  The\n        authorization server MUST reject any\
    \ JWT with an expiration time\n        that has passed, subject to allowable clock\
    \ skew between\n        systems.  Note that the authorization server may reject\
    \ JWTs\n        with an \"exp\" claim value that is unreasonably far in the\n\
    \        future.\n   5.   The JWT MAY contain an \"nbf\" (not before) claim that\
    \ identifies\n        the time before which the token MUST NOT be accepted for\n\
    \        processing.\n   6.   The JWT MAY contain an \"iat\" (issued at) claim\
    \ that identifies\n        the time at which the JWT was issued.  Note that the\n\
    \        authorization server may reject JWTs with an \"iat\" claim value\n  \
    \      that is unreasonably far in the past.\n   7.   The JWT MAY contain a \"\
    jti\" (JWT ID) claim that provides a\n        unique identifier for the token.\
    \  The authorization server MAY\n        ensure that JWTs are not replayed by\
    \ maintaining the set of used\n        \"jti\" values for the length of time for\
    \ which the JWT would be\n        considered valid based on the applicable \"\
    exp\" instant.\n   8.   The JWT MAY contain other claims.\n   9.   The JWT MUST\
    \ be digitally signed or have a Message\n        Authentication Code (MAC) applied\
    \ by the issuer.  The\n        authorization server MUST reject JWTs with an invalid\
    \ signature\n        or MAC.\n   10.  The authorization server MUST reject a JWT\
    \ that is not valid in\n        all other respects per \"JSON Web Token (JWT)\"\
    \ [JWT].\n"
- title: 3.1.  Authorization Grant Processing
  contents:
  - "3.1.  Authorization Grant Processing\n   JWT authorization grants may be used\
    \ with or without client\n   authentication or identification.  Whether or not\
    \ client\n   authentication is needed in conjunction with a JWT authorization\n\
    \   grant, as well as the supported types of client authentication, are\n   policy\
    \ decisions at the discretion of the authorization server.\n   However, if client\
    \ credentials are present in the request, the\n   authorization server MUST validate\
    \ them.\n   If the JWT is not valid, or the current time is not within the\n \
    \  token's valid time window for use, the authorization server\n   constructs\
    \ an error response as defined in OAuth 2.0 [RFC6749].  The\n   value of the \"\
    error\" parameter MUST be the \"invalid_grant\" error\n   code.  The authorization\
    \ server MAY include additional information\n   regarding the reasons the JWT\
    \ was considered invalid using the\n   \"error_description\" or \"error_uri\"\
    \ parameters.\n   For example:\n     HTTP/1.1 400 Bad Request\n     Content-Type:\
    \ application/json\n     Cache-Control: no-store\n     {\n      \"error\":\"invalid_grant\"\
    ,\n      \"error_description\":\"Audience validation failed\"\n     }\n"
- title: 3.2.  Client Authentication Processing
  contents:
  - "3.2.  Client Authentication Processing\n   If the client JWT is not valid, the\
    \ authorization server constructs\n   an error response as defined in OAuth 2.0\
    \ [RFC6749].  The value of\n   the \"error\" parameter MUST be the \"invalid_client\"\
    \ error code.  The\n   authorization server MAY include additional information\
    \ regarding the\n   reasons the JWT was considered invalid using the \"error_description\"\
    \n   or \"error_uri\" parameters.\n"
- title: 4.  Authorization Grant Example
  contents:
  - "4.  Authorization Grant Example\n   The following examples illustrate what a\
    \ conforming JWT and an access\n   token request would look like.\n   The example\
    \ shows a JWT issued and signed by the system entity\n   identified as \"https://jwt-idp.example.com\"\
    .  The subject of the JWT\n   is identified by email address as \"mike@example.com\"\
    .  The intended\n   audience of the JWT is \"https://jwt-rp.example.net\", which\
    \ is an\n   identifier with which the authorization server identifies itself.\n\
    \   The JWT is sent as part of an access token request to the\n   authorization\
    \ server's token endpoint at \"https://authz.example.net/\n   token.oauth2\".\n\
    \   Below is an example JSON object that could be encoded to produce the\n   JWT\
    \ Claims Set for a JWT:\n     {\"iss\":\"https://jwt-idp.example.com\",\n    \
    \  \"sub\":\"mailto:mike@example.com\",\n      \"aud\":\"https://jwt-rp.example.net\"\
    ,\n      \"nbf\":1300815780,\n      \"exp\":1300819380,\n      \"http://claims.example.com/member\"\
    :true}\n   The following example JSON object, used as the header of a JWT,\n \
    \  declares that the JWT is signed with the Elliptic Curve Digital\n   Signature\
    \ Algorithm (ECDSA) P-256 SHA-256 using a key identified by\n   the \"kid\" value\
    \ \"16\".\n     {\"alg\":\"ES256\",\"kid\":\"16\"}\n   To present the JWT with\
    \ the claims and header shown in the previous\n   example as part of an access\
    \ token request, for example, the client\n   might make the following HTTPS request\
    \ (with extra line breaks for\n   display purposes only):\n     POST /token.oauth2\
    \ HTTP/1.1\n     Host: authz.example.net\n     Content-Type: application/x-www-form-urlencoded\n\
    \     grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer\n     &assertion=eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0.\n\
    \     eyJpc3Mi[...omitted for brevity...].\n     J9l-ZhwP[...omitted for brevity...]\n"
- title: 5.  Interoperability Considerations
  contents:
  - "5.  Interoperability Considerations\n   Agreement between system entities regarding\
    \ identifiers, keys, and\n   endpoints is required in order to achieve interoperable\
    \ deployments\n   of this profile.  Specific items that require agreement are\
    \ as\n   follows: values for the issuer and audience identifiers, the location\n\
    \   of the token endpoint, the key used to apply and verify the digital\n   signature\
    \ or MAC over the JWT, one-time use restrictions on the JWT,\n   maximum JWT lifetime\
    \ allowed, and the specific subject and claim\n   requirements of the JWT.  The\
    \ exchange of such information is\n   explicitly out of scope for this specification.\
    \  In some cases,\n   additional profiles may be created that constrain or prescribe\
    \ these\n   values or specify how they are to be exchanged.  Examples of such\n\
    \   profiles include the OAuth 2.0 Dynamic Client Registration Core\n   Protocol\
    \ [OAUTH-DYN-REG], OpenID Connect Dynamic Client Registration\n   1.0 [OpenID.Registration],\
    \ and OpenID Connect Discovery 1.0\n   [OpenID.Discovery].\n   The \"RS256\" algorithm,\
    \ from [JWA], is a mandatory-to-implement JSON\n   Web Signature algorithm for\
    \ this profile.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The security considerations described within\
    \ the following\n   specifications are all applicable to this document: \"Assertion\n\
    \   Framework for OAuth 2.0 Client Authentication and Authorization\n   Grants\"\
    \ [RFC7521], \"The OAuth 2.0 Authorization Framework\" [RFC6749],\n   and \"JSON\
    \ Web Token (JWT)\" [JWT].\n   The specification does not mandate replay protection\
    \ for the JWT\n   usage for either the authorization grant or for client\n   authentication.\
    \  It is an optional feature, which implementations may\n   employ at their own\
    \ discretion.\n"
- title: 7.  Privacy Considerations
  contents:
  - "7.  Privacy Considerations\n   A JWT may contain privacy-sensitive information\
    \ and, to prevent\n   disclosure of such information to unintended parties, should\
    \ only be\n   transmitted over encrypted channels, such as Transport Layer Security\n\
    \   (TLS).  In cases where it is desirable to prevent disclosure of\n   certain\
    \ information to the client, the JWT should be encrypted to the\n   authorization\
    \ server.\n   Deployments should determine the minimum amount of information\n\
    \   necessary to complete the exchange and include only such claims in\n   the\
    \ JWT.  In some cases, the \"sub\" (subject) claim can be a value\n   representing\
    \ an anonymous or pseudonymous user, as described in\n   Section 6.3.1 of the\
    \ OAuth Assertion Framework [RFC7521].\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: 8.1.  Sub-Namespace Registration of
  contents:
  - "8.1.  Sub-Namespace Registration of\n      urn:ietf:params:oauth:grant-type:jwt-bearer\n\
    \   This section registers the value \"grant-type:jwt-bearer\" in the IANA\n \
    \  \"OAuth URI\" registry established by \"An IETF URN Sub-Namespace for\n   OAuth\"\
    \ [RFC6755].\n   o  URN: urn:ietf:params:oauth:grant-type:jwt-bearer\n   o  Common\
    \ Name: JWT Bearer Token Grant Type Profile for OAuth 2.0\n   o  Change Controller:\
    \ IESG\n   o  Specification Document: RFC 7523\n"
- title: 8.2.  Sub-Namespace Registration of
  contents:
  - "8.2.  Sub-Namespace Registration of\n      urn:ietf:params:oauth:client-assertion-type:jwt-bearer\n\
    \   This section registers the value \"client-assertion-type:jwt-bearer\"\n  \
    \ in the IANA \"OAuth URI\" registry established by \"An IETF URN Sub-\n   Namespace\
    \ for OAuth\" [RFC6755].\n   o  URN: urn:ietf:params:oauth:client-assertion-type:jwt-bearer\n\
    \   o  Common Name: JWT Bearer Token Profile for OAuth 2.0 Client\n      Authentication\n\
    \   o  Change Controller: IESG\n   o  Specification Document: RFC 7523\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [JWA]      Jones, M., \"JSON Web Algorithms (JWA)\"\
    , RFC 7518,\n              DOI 10.17487/RFC7518, May 2015,\n              <http://www.rfc-editor.org/info/rfc7518>.\n\
    \   [JWT]      Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n   \
    \           (JWT)\", RFC 7519, DOI 10.17487/RFC7519, May 2015,\n             \
    \ <http://www.rfc-editor.org/info/rfc7519>.\n   [RFC2119]  Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n              Requirement Levels\", BCP 14,\
    \ RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC6749]  Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n  \
    \            RFC 6749, DOI 10.17487/RFC6749, October 2012,\n              <http://www.rfc-editor.org/info/rfc6749>.\n\
    \   [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n  \
    \            2014, <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7521]  Campbell,\
    \ B., Mortimore, C., Jones, M., and Y. Goland,\n              \"Assertion Framework\
    \ for OAuth 2.0 Client Authentication\n              and Authorization Grants\"\
    , RFC 7521, DOI 10.17487/RFC7521,\n              May 2015, <http://www.rfc-editor.org/info/rfc7521>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [OAUTH-DYN-REG]\n              Richer, J., Jones,\
    \ M., Bradley, J., Machulak, M., and P.\n              Hunt, \"OAuth 2.0 Dynamic\
    \ Client Registration Protocol\",\n              Work in Progress, draft-ietf-oauth-dyn-reg-29,\
    \ May 2015.\n   [OpenID.Discovery]\n              Sakimura, N., Bradley, J., Jones,\
    \ M., and E. Jay, \"OpenID\n              Connect Discovery 1.0 incorporating\
    \ errata set 1\",\n              November 2014, <http://openid.net/specs/\n  \
    \            openid-connect-discovery-1_0.html>.\n   [OpenID.Registration]\n \
    \             Sakimura, N., Bradley, J., and M. Jones, \"OpenID Connect\n    \
    \          Dynamic Client Registration 1.0 incorporating errata set\n        \
    \      1\", November 2014, <http://openid.net/specs/\n              openid-connect-registration-1_0.html>.\n\
    \   [RFC6755]  Campbell, B. and H. Tschofenig, \"An IETF URN Sub-Namespace\n \
    \             for OAuth\", RFC 6755, DOI 10.17487/RFC6755, October 2012,\n   \
    \           <http://www.rfc-editor.org/info/rfc6755>.\n   [RFC7522]  Campbell,\
    \ B., Mortimore, C., and M. Jones, \"Security\n              Assertion Markup\
    \ Language (SAML) 2.0 Profile for OAuth 2.0\n              Client Authentication\
    \ and Authorization Grants\", RFC 7522,\n              DOI 10.17487/RFC7522, May\
    \ 2015,\n              <http://www.rfc-editor.org/info/rfc7522>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This profile was derived from \"Security Assertion Markup\
    \ Language\n   (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and\n  \
    \ Authorization Grants\" [RFC7522], which has the same authors as this\n   document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael B. Jones\n   Microsoft\n   EMail: mbj@microsoft.com\n\
    \   URI:   http://self-issued.info/\n   Brian Campbell\n   Ping Identity\n   EMail:\
    \ brian.d.campbell@gmail.com\n   Chuck Mortimore\n   Salesforce\n   EMail: cmortimore@salesforce.com\n"
