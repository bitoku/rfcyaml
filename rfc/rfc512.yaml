- title: __initial_text__
  contents:
  - "                    MORE ON LOST MESSAGE DETECTION\nI would like to second Edwin\
    \ Meyer's (RFC #492) strong opposition to the\nproposals made in RFC #467 concerning\
    \ solutions to the \"lost allocate\"\nand \"half-closed\" phenomena.  In particular\
    \ I support all of his\nprinciples concerning the \"half-closed\" phenomenon.\
    \  I also agree that\nthe proposed \"lost allocate\" solution tends to mask the\
    \ real problem of\nlost messages.  I would, however, like to propose the following\n\
    alternative scheme for recognizing lost messages.\nI propose that one of the two\
    \ unused eight-bit bytes in the level 2\nmessage leader be designated the \"Sequence\
    \ Control Byte\" (SCB).  This\nSCB would be essentially a modulo 255 message count.\
    \  Upon receipt of a\nmessage, the receiving NCP would compare the SCB in the\
    \ previous the\nmessage with the expected SCB as computed from the SCB in the\
    \ previous\nmessage on the same link.  A discrepancy indicates a lost message,\
    \ which\ncould then be reported immediately via an appropriate ERR message.  This\n\
    ERR message (to be defined) would contain both received and expected\nSCB's, allowing\
    \ possible recovery of the lost message (if sufficient\nspace were available in\
    \ the sending host to save the last several\nmessages for each link).  At any\
    \ rate, the lost message would be\nrecognized immediately, whether it was an ALL\
    \ (or any control message)\nor a data message.  The message with the unexpected\
    \ SCB should be\nprocessed normally, with the SCB for the next message computed\
    \ from it.\nFor compatibility, the SCB would be defined such that an SCB of zero\n\
    indicates that no checking is to be done.  The SCB following 255 would\nthus be\
    \ 1.  This would mean that current NCP's would not have to be\nchanged unless\
    \ actual checking were desired (since the level 2 protocol\nspecifies that these\
    \ two unused bytes must be zero.)  This special\ndefinition of zero SCB would\
    \ also allow RST's and ERR's to bypass\nchecking, which would be useful in avoiding\
    \ possible loops.\nThis proposed scheme is similar to the second scheme suggested\
    \ by Jon\nPostel (RFC #516) except that it is on a per-link basis rather than\
    \ a\nper-host basis.  This is significant, however, as it removes the\nrequirement\
    \ that all messages from one host to another arrive in the\norder sent (which\
    \ cannot be guaranteed).  It also provides for\ncompatibility with existing NCP's.\
    \  Jon's first proposal (save all\nmessages until RFNM received) is weak in two\
    \ areas: first, it is\npossible that the receiving IMP has sent a RFNM for a message\
    \ that in\nfact never gets to its host, and second, it requires (at least for\n\
    swapped systems such as ours) either that messages be saved in resident\nstorage\
    \ (expensive) or that RFNM's be handled by a swapped process (also\nexpensive).\
    \  The third proposal (that of a host-to-host acknowledgment\nscheme) is perhaps\
    \ the best, but as that requires quite major changes to\nthe level 2 protocol,\
    \ an interim solution such as that proposed here\nseems of value.\n       [ This\
    \ RFC was put into machine readable form for entry ]\n       [ into the online\
    \ RFC archives by Alex McKenzie with    ]\n       [ support from GTE, formerly\
    \ BBN Corp.             9/99 ]\n"
