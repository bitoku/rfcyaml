- title: __initial_text__
  contents:
  - '                     Mapping the BEEP Core onto TCP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes how a BEEP (Blocks Extensible Exchange Protocol)\n\
    \   session is mapped onto a single TCP (Transmission Control Protocol)\n   connection.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.    Introduction . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 1\n   2.    Session Management . . . . . . . . . . . . . . . . .\
    \ . . . . 2\n   3.    Message Exchange . . . . . . . . . . . . . . . . . . . .\
    \ . . 2\n   3.1   Flow Control . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 3\n   3.1.1 Channel Creation . . . . . . . . . . . . . . . . . . . . . . 3\n\
    \   3.1.2 Sending Messages . . . . . . . . . . . . . . . . . . . . . . 3\n   3.1.3\
    \ Processing SEQ Frames  . . . . . . . . . . . . . . . . . . . 4\n   3.1.4 Use\
    \ of Flow Control  . . . . . . . . . . . . . . . . . . . . 4\n   4.    Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . 6\n         References .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 6\n         Author's Address\
    \ . . . . . . . . . . . . . . . . . . . . . . 6\n   A.    Acknowledgements . .\
    \ . . . . . . . . . . . . . . . . . . . . 7\n         Full Copyright Statement\
    \ . . . . . . . . . . . . . . . . . . 8\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo describes how a BEEP [1] session is mapped onto\
    \ a single\n   TCP [2] connection.  Refer to Section 2.5 of [1] for an explanation\n\
    \   of the mapping requirements.\n"
- title: 2. Session Management
  contents:
  - "2. Session Management\n   The mapping of BEEP session management onto the TCP\
    \ service is\n   straight-forward.\n   A BEEP session is established when a TCP\
    \ connection is established\n   between two BEEP peers:\n   o  the BEEP peer that\
    \ issues a passive TCP OPEN call is termed the\n      listener; and,\n   o  the\
    \ BEEP peer that issues an active TCP OPEN call is termed the\n      initiator.\n\
    \   A simultaneous TCP OPEN would result in both BEEP peers believing\n   they\
    \ are the initiator and neither peer will be able to start any\n   channels. \
    \ Because of this, services based on BEEP must be designed\n   so that simultaneous\
    \ TCP OPENs cannot occur.\n   If both peers agree to release a BEEP session (c.f.,\
    \ [1]'s Section\n   2.4), the peer sending the \"ok\" reply, immediately issues\
    \ the TCP\n   CLOSE call.  Upon receiving the reply, the other peer immediately\n\
    \   issues the TCP CLOSE call.\n   A BEEP session is terminated when either peer\
    \ issues the TCP ABORT\n   call, and the TCP connection is subsequently aborted.\n"
- title: 3. Message Exchange
  contents:
  - "3. Message Exchange\n   The mapping of BEEP exchanges onto the TCP service is\
    \ less straight-\n   forward.\n   Messages are reliably sent and received using\
    \ TCP's SEND and RECEIVE\n   calls.  (This also provides ordered delivery of messages\
    \ on the same\n   channel.)\n   Although TCP imposes flow control on a per-connection\
    \ basis, if\n   multiple channels are simultaneously in use on a BEEP session,\
    \ BEEP\n   must provide a mechanism to avoid starvation and deadlock.  To\n  \
    \ achieve this, BEEP re-introduces a mechanism used by the TCP:\n   window-based\
    \ flow control -- each channel has a sliding window that\n   indicates the number\
    \ of payload octets that a peer may transmit\n   before receiving further permission.\n"
- title: 3.1 Flow Control
  contents:
  - "3.1 Flow Control\n   Recall from Section 2.2.1.2 of [1] that every payload octet\
    \ sent in\n   each direction on a channel has an associated sequence number.\n\
    \   Numbering of payload octets within a data frame is such that the\n   first\
    \ payload octet is the lowest numbered, and the following payload\n   octets are\
    \ numbered consecutively.\n   The actual sequence number space is finite, though\
    \ very large,\n   ranging from 0..4294967295 (2**32 - 1).  Since the space is\
    \ finite,\n   all arithmetic dealing with sequence numbers is performed modulo\n\
    \   2**32.  This unsigned arithmetic preserves the relationship of\n   sequence\
    \ numbers as they cycle from 2**32 - 1 to 0 again.  Consult\n   Sections 2 through\
    \ 5 of [3] for a discussion of the arithmetic\n   properties of sequence numbers.\n"
- title: 3.1.1 Channel Creation
  contents:
  - "3.1.1 Channel Creation\n   When a channel is created, the sequence number associated\
    \ with the\n   first payload octet of the first data frame is 0, and the initial\n\
    \   window size for that channel is 4096 octets.  After channel creation,\n  \
    \ a BEEP peer may update the window size by sending a SEQ frame\n   (Section 3.1.3).\n\
    \   If a BEEP peer is asked to create a channel and it is unable to\n   allocate\
    \ at least 4096 octets for that channel, it must decline\n   creation of the channel,\
    \ as specified in Section 2.3.1.2 of [1].\n   Similarly, during establishment\
    \ of the BEEP session, if the BEEP peer\n   acting in the listening role is unable\
    \ to allocate at least 4096\n   octets for channel 0, then it must return a negative\
    \ reply, as\n   specified in Section 2.4 of [1], instead of a greeting.\n"
- title: 3.1.2 Sending Messages
  contents:
  - "3.1.2 Sending Messages\n   Before a message is sent, the sending BEEP peer must\
    \ ensure that the\n   size of the payload is within the window advertised by the\
    \ receiving\n   BEEP peer.  If not, it has three choices:\n   o  if the window\
    \ would allow for at least one payload octet to be\n      sent, the BEEP peer\
    \ may segment the message and start by sending a\n      smaller data frame (up\
    \ to the size of the remaining window);\n   o  the BEEP peer may delay sending\
    \ the message until the window\n      becomes larger; or,\n   o  the BEEP peer\
    \ may signal to its application that it is unable to\n      send the message,\
    \ allowing the application to try again at a later\n      time (or perhaps signaling\
    \ its application when a larger window is\n      available).\n   The choice is\
    \ implementation-dependent, although it is recommended\n   that the application\
    \ using BEEP be given a mechanism for influencing\n   the decision.\n"
- title: 3.1.3 Processing SEQ Frames
  contents:
  - "3.1.3 Processing SEQ Frames\n   As an application accepts responsibility for\
    \ incoming data frames,\n   its BEEP peer should send SEQ frames to advertise\
    \ a new window.\n   The ABNF [4] for a SEQ frame is:\n      seq        = \"SEQ\"\
    \ SP channel SP ackno SP window CR LF\n      ackno      = seqno\n      window\
    \     = size\n      ; channel, seqno, and size are defined in Section 2.2.1 of\
    \ [1].\n   The SEQ frame has three parameters:\n   o  a channel number;\n   o\
    \  an acknowledgement number, that indicates the value of the next\n      sequence\
    \ number that the sender is expecting to receive on this\n      channel; and,\n\
    \   o  a window size, that indicates the number of payload octets\n      beginning\
    \ with the one indicated by the acknowledgement number\n      that the sender\
    \ is expecting to receive on this channel.\n   A single space character (decimal\
    \ code 32, \" \") separates each\n   component.  The SEQ frame is terminated with\
    \ a CRLF pair.\n   When a SEQ frame is received, if any of the channel number,\n\
    \   acknowledgement number, or window size cannot be determined or is\n   invalid,\
    \ then the BEEP session is terminated without generating a\n   response, and it\
    \ is recommended that a diagnostic entry be logged.\n"
- title: 3.1.4 Use of Flow Control
  contents:
  - "3.1.4 Use of Flow Control\n   The key to successful use of flow control within\
    \ BEEP is to balance\n   performance and fairness:\n   o  large messages should\
    \ be segmented into frames no larger than\n      two-thirds of TCP's negotiated\
    \ maximum segment size;\n   o  frames for different channels with traffic ready\
    \ to send should be\n      sent in a round-robin fashion;\n   o  each time a frame\
    \ is received, a SEQ frame should be sent whenever\n      the window size that\
    \ will be sent is at least one half of the\n      buffer space available to this\
    \ channel; and,\n   o  if the transport service presents multiple frames to a\
    \ BEEP peer\n      simultaneously, then a single consolidating SEQ frame may be\
    \ sent.\n   In order to avoid pathological interactions with the transport\n \
    \  service, it is important that a BEEP peer advertise windows based on\n   available\
    \ buffer space, to allow data to be read from the transport\n   service as soon\
    \ as available.  Further, SEQ frames for a channel must\n   have higher priority\
    \ than messages for that channel.\n   Implementations may wish to provide queue\
    \ management facilities to\n   the application using BEEP, e.g., channel priorities,\
    \ (relative)\n   buffer allocations, and so on.  In particular, implementations\
    \ should\n   not allow a given channel to monopolize the underlying transport\n\
    \   window (e.g., slow readers should get small windows).\n   In addition, where\
    \ possible, implementations should support transport\n   layer APIs that convey\
    \ congestion information.  These APIs allow an\n   implementation to determine\
    \ its share of the available bandwidth, and\n   also be notified of changes in\
    \ the estimated path bandwidth.  Note\n   that when a BEEP session has multiple\
    \ channels that are\n   simultaneously exchanging large messages, implementations\
    \ without\n   access to this information may have uncertain fairness and progress\n\
    \   properties during times of network congestion.\n   Finally, implementors should\
    \ follow the guidelines given in the\n   relevant portions of RFC1122 [5] that\
    \ deal with flow control (and\n   bear in mind that issues such as retransmission,\
    \ while they interact\n   with flow control in TCP, are not applicable to this\
    \ memo).  For\n   example, Section 4.2.2.16 of RFC1122 [5] indicates that a \"\
    receiver\n   SHOULD NOT shrink the window, i.e., move the right window edge to\
    \ the\n   left\" and then discusses the impact of this rule on unacknowledged\n\
    \   data.  In the context of mapping BEEP onto a single TCP connection,\n   only\
    \ the portions concerning flow control should be implemented.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   Consult Section [1]'s Section 9 for a discussion\
    \ of security issues.\n"
- title: References
  contents:
  - "References\n   [1]  Rose, M., \"The Blocks Extensible Exchange Protocol Core\"\
    , RFC\n        3080, March 2001.\n   [2]  Postel, J., \"Transmission Control Protocol\"\
    , STD 7, RFC 793,\n        September 1981.\n   [3]  Elz, R. and R. Bush, \"Serial\
    \ Number Arithmetic\", RFC 1982,\n        August 1996.\n   [4]  Crocker, D. and\
    \ P. Overell, \"Augmented BNF for Syntax\n        Specifications: ABNF\", RFC\
    \ 2234, November 1997.\n   [5]  Braden, R., \"Requirements for Internet Hosts\
    \ -- Communication\n        Layers\", STD 3, RFC 1122, October 1989.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Marshall T. Rose\n   Invisible Worlds, Inc.\n   1179 North\
    \ McDowell Boulevard\n   Petaluma, CA  94954-6559\n   US\n   Phone: +1 707 789\
    \ 3700\n   EMail: mrose@invisible.net\n   URI:   http://invisible.net/\n"
- title: Appendix A. Acknowledgements
  contents:
  - "Appendix A. Acknowledgements\n   The author gratefully acknowledges the contributions\
    \ of: Dave\n   Crocker, Steve Harris, Eliot Lear, Keith McCloghrie, Craig Partridge,\n\
    \   Vernon Schryver, and, Joe Touch.  In particular, Dave Crocker\n   provided\
    \ helpful suggestions on the nature of flow control in the\n   mapping.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
