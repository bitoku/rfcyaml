Abstract This document describes an Extensible Provisioning Protocol (EPP) mapping for the provisioning and management of Internet host names stored in a shared central repository.
Specified in XML, the mapping defines EPP command syntax and semantics as applied to host names.
This document obsoletes RFC 4932.
This document describes an Internet host name mapping for version 1.0 of the Extensible Provisioning Protocol (EPP).
This mapping is specified using the Extensible Markup Language (XML) 1.0 as described in [W3C.REC xml 20040204] and XML Schema notation as described in [W3C.REC xmlschema 1 20041028] and [W3C.REC xmlschema 2 20041028].
This document obsoletes RFC 4932
[RFC5730] provides a complete description of EPP command and response structures.
A thorough understanding of the base protocol specification is necessary to understand the mapping described in this document.
Unless stated otherwise, XML specifications and examples provided in this document MUST be interpreted in the character case presented to develop a conforming implementation.
Relationship of Host Objects and Domain Objects
This document assumes that host name objects have a subordinate relationship to a superordinate domain name object.
For example, host name "ns1.example.com" has a subordinate relationship to domain name "example.com".
EPP actions (such as object transfers) that do not preserve this relationship MUST be explicitly disallowed.
A host name object can be created in a repository for which no superordinate domain name object exists.
For example, host name "ns1.example.com" can be created in the ".example" repository so that DNS domains in ".example" can be delegated to the host.
Such hosts are described as "external" hosts in this specification since the name of the host does not belong to the namespace of the repository in which the host is being used for delegation purposes.
Whether a host is external or internal relates to the repository in which the host is being used for delegation purposes.
An internal host is subordinate if the name of the host belongs to the domain within the repository in which the host is being used for delegation purposes.
For example, host ns1.example1.com is a subordinate host of domain
but it is not a subordinate host of domain
example2.com. ns1.example1.com can be used as a name server for example2.com.
In this case, ns1.example1.com MUST be treated as an internal host, subject to the rules governing operations on subordinate hosts within the same repository.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
In examples, "C:" represents lines sent by a protocol client and "S:" represents lines returned by a protocol server.
Indentation and white space in examples are provided only to illustrate element relationships and are not a REQUIRED feature of this protocol.
An EPP host object has attributes and associated values that can be viewed and modified by the sponsoring client or the server.
This section describes each attribute type in detail.
The formal syntax for the attribute values described here can be found in the "Formal Syntax" section of this document and in the appropriate normative references.
The syntax for host names described in this document MUST conform to [RFC0952] as updated by [RFC1123].
At the time of this writing, RFC 3490 [RFC3490] describes a standard to use certain ASCII name labels to represent non ASCII name labels.
These conformance requirements might change in the future as a result of progressing work in developing standards for internationalized host names.
All EPP clients are identified by a server unique identifier.
Client identifiers conform to the "clIDType" syntax described in [RFC5730].
A host object MUST always have at least one associated status value.
Status values MAY be set only by the client that sponsors a host object and by the server on which the object resides.
A client can change the status of a host object using the EPP <update> command.
Each status value MAY be accompanied by a string of human readable text that describes the rationale for the status applied to the object.
A client MUST NOT alter status values set by the server.
A server MAY alter or override status values set by a client, subject to local server policies.
The status of an object MAY change as a result of either a client initiated transform command or an action performed by a server operator.
Status values that can be added or removed by a client are prefixed with "client".
Corresponding status values that can be added or removed by a server are prefixed with "server".
Status values that do not begin with either "client" or "server" are server managed.
Status Value Descriptions:  clientDeleteProhibited, serverDeleteProhibited Requests to delete the object MUST be rejected.
clientUpdateProhibited, serverUpdateProhibited Requests to update the object (other than to remove this status)
linked The host object has at least one active association with another object, such as a domain object.
Servers SHOULD provide services to determine existing object associations.
This is the normal status value for an object that has no pending operations or prohibitions.
This value is set and removed by the server as other status values are added or removed.
pendingUpdate A transform command has been processed for the object (or in the case of a <transfer> command, for the host object's superordinate domain object), but the action has not been completed by the server.
Server operators can delay action completion for a variety of reasons, such as to allow for human review or third  party action.
A transform command that is processed, but whose requested action is pending, is noted with response code 1001.
When the requested action has been completed, the pendingCreate, pendingDelete, pendingTransfer, or pendingUpdate status value MUST be removed.
All clients involved in the transaction MUST be notified using a service message that the action has been completed and that the status of the object has changed.
"ok" status MAY only be combined with "linked" status.
"linked" status MAY be combined with any status. "
pendingDelete" status MUST NOT be combined with either "clientDeleteProhibited" or "serverDeleteProhibited" status.
pendingUpdate" status MUST NOT be combined with either "clientUpdateProhibited" or "serverUpdateProhibited" status.
The pendingCreate, pendingDelete, pendingTransfer, and pendingUpdate status values MUST NOT be combined with each other.
Other status combinations not expressly prohibited MAY be used.
Dates and Times Date and time attribute values MUST be represented in Universal Coordinated Time (UTC) using the Gregorian calendar.
The extended date time form using upper case "T" and "Z" characters defined in [W3C.REC xmlschema 2 20041028]
MUST be used to represent date time values, as XML Schema does not support truncated date time forms or lower case "T" and "Z" characters.
The syntax for IPv4 addresses described in this document MUST conform to [RFC0791].
The syntax for IPv6 addresses described in this document MUST conform to [RFC4291].
Practical considerations for publishing IPv6 address information in zone files are documented in [RFC2874] and [RFC3596].
A server MAY reject IP addresses that have not been allocated for public use by IANA.
When a host object is provisioned for use as a DNS name server, IP addresses SHOULD be required only as needed to generate DNS glue records.
A detailed description of the EPP syntax and semantics can be found in [RFC5730].
The command mappings described here are specifically for use in provisioning and managing Internet host names via EPP.
EPP Query Commands EPP provides two commands to retrieve host information:
<check> to determine if a host object can be provisioned within a repository, and <info> to retrieve detailed information associated with a host object.
> command is used to determine if an object can be provisioned within a repository.
It provides a hint that allows a client to anticipate the success or failure of provisioning an object using the <create> command, as object provisioning requirements are ultimately a matter of server policy.
In addition to the standard EPP command elements, the <check> command MUST contain a <host:check> element that identifies the host namespace.
The <host:check> element contains the following child elements:  One or more <host:name> elements that contain the fully qualified names of the host
Example <check> command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <check> command has been processed successfully, the EPP <resData> element MUST contain a child <host:chkData
> element that identifies the host namespace.
element contains one or more <host:
cd> elements that contain the following child elements:  A <host:name
> element that contains the fully qualified name of the queried host object.
This element MUST contain an "avail" attribute whose value indicates object availability (can it be provisioned or not) at the moment the <check> command was completed.
A value of "1" or "true" means that the object can be provisioned.
A value of "0" or "false" means that the object cannot be provisioned.
An OPTIONAL <host:reason> element that MAY be provided when an object cannot be provisioned.
If present, this element contains server specific text to help explain why the object cannot be provisioned.
This text MUST be represented in the response language previously negotiated with the client; an OPTIONAL "lang" attribute MAY be present to identify the language if the negotiated value is something other than the default value of "en" (English).
Example <check> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <check> command cannot be processed for any reason.
command is used to retrieve information associated with a host object.
In addition to the standard EPP command elements, the <info> command MUST contain a <host:info> element that identifies the host namespace.
> element contains the following child elements:  A <host:name
> element that contains the fully qualified name of the host object for which information is requested.
Example <info> command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When an <info> command has been processed successfully, the EPP <resData> element MUST contain a child <host:
> element that identifies the host namespace.
> element contains the following child elements:  A <host:name
> element that contains the fully qualified name of the host object.
> element that contains the Repository Object IDentifier assigned to the host object when the object was created.
One or more <host:status> elements that describe the status of the host object.
Zero or more <host:addr> elements that contain the IP addresses associated with the host object.
A <host:clID> element that contains the identifier of the sponsoring client.
A <host:crID> element that contains the identifier of the client that created the host object.
A <host:crDate> element that contains the date and time of host  object creation.
A <host:upID> element that contains the identifier of the client that last updated the host object.
This element MUST NOT be present if the host object has never been modified.
A <host:upDate> element that contains the date and time of the most recent host object modification.
This element MUST NOT be present if the host object has never been modified.
A <host:trDate> element that contains the date and time of the most recent successful host object transfer.
This element MUST NOT be provided if the host object has never been transferred.
Note that host objects MUST NOT be transferred directly; host objects MUST be transferred implicitly when the host object's superordinate domain object is transferred.
Host objects that are subject to transfer when transferring a domain object are listed in the response to an EPP <info> command performed on the domain object.
Example <info> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if an <info> command cannot be processed for any reason.
EPP <transfer> Query Command Transfer semantics do not directly apply to host objects, so there is no mapping defined for the EPP <transfer> query command.
EPP Transform Commands EPP provides three commands to transform host objects: <create> to create an instance of a host object, <delete> to delete an instance of a host object, and <update> to change information associated with a host object.
This document does not define host object mappings for the EPP <renew> and <transfer> commands.
Transform commands are typically processed and completed in real time.
Server operators MAY receive and process transform commands but defer completing the requested action if human or third party review is required before the requested action can be completed.
In such situations, the server MUST return a 1001 response code to the client to note that the command has been received and processed but that the requested action is pending.
The server MUST also manage the status of the object that is the subject of the command to reflect the initiation and completion of the requested action.
Once the action has been completed, all clients involved in the transaction MUST be notified using a service message that the action has been completed and that the status of the object has changed.
Other notification methods MAY be used in addition to the required service message.
Server operators SHOULD confirm that a client is authorized to perform a transform command on a given object.
Any attempt to transform an object by an unauthorized client MUST be rejected, and the server MUST return a 2201 response code to the client to note that the client lacks privileges to execute the requested command.
The EPP <create> command provides a transform operation that allows a client to create a host object.
In addition to the standard EPP command elements, the <create> command MUST contain a <host:create> element that identifies the host namespace.
The <host:create> element contains the following child elements:  A <host:name
> element that contains the fully qualified name of the host object to be created.
Zero or more <host:addr> elements that contain the IP addresses to be associated with the host.
Each element MAY contain an "ip" attribute to identify the IP address format.
Attribute value "v4" is used to note IPv4 address format.
Attribute value "v6" is used to note IPv6 address format.
If the "ip" attribute is not specified, "v4" is the default attribute value.
Hosts can be provisioned for use as name servers in the Domain Name System (DNS), described in [RFC1034] and [RFC1035].
Hosts provisioned as name servers might be subject to server operator policies that require or prohibit specification of IP addresses, depending on the name of the host and the namespace in which the server will be used as a name server.
When provisioned for use as a name server, IP addresses are REQUIRED only as needed to produce DNS glue records.
For example, if the server is authoritative for the "com" namespace and the name of the server is "ns1.example.net", the server is not required to produce DNS glue records for the name server, and IP addresses for the server are not required by the DNS.
If the host name exists in a namespace for which the server is authoritative, then the superordinate domain of the host MUST be known to the server before the host object can be created.
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <create> command has been processed successfully, the EPP <resData> element MUST contain a child <host:creData
> element that identifies the host namespace.
> element contains the following child elements:  A <host:name
> element that contains the fully qualified name of the host object.
A <host:crDate> element that contains the date and time of host  object creation.
Example <create> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <create> command cannot be processed for any reason.
The EPP <delete> command provides a transform operation that allows a client to delete a host object.
In addition to the standard EPP command elements, the <delete> command MUST contain a <host:
> element that identifies the host namespace.
> element contains the following child elements:  A <host:name
> element that contains the fully qualified name of the host object to be deleted.
A host name object SHOULD NOT be deleted if the host object is associated with any other object.
For example, if the host object is associated with a domain object, the host object SHOULD NOT be deleted until the existing association has been broken.
Deleting a host object without first breaking existing associations can cause DNS resolution failure for domain objects that refer to the deleted host object.
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When a <delete> command has been processed successfully, a server MUST respond with an EPP response with no <
Example <delete> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if a <delete> command cannot be processed for any reason.
EPP <renew> Command Renewal semantics do not apply to host objects, so there is no mapping defined for the EPP <renew> command.
Command Transfer semantics do not directly apply to host objects, so there is no mapping defined for the EPP <transfer> command.
Host objects are subordinate to an existing superordinate domain object and, as such, they are subject to transfer when a domain object is transferred.
The EPP <update> command provides a transform operation that allows a client to modify the attributes of a host object.
In addition to the standard EPP command elements, the <update> command MUST contain a <host:update> element that identifies the host namespace.
The <host: update> element contains the following child elements:  A <host:name
> element that contains the fully qualified name of the host object to be updated.
An OPTIONAL <host:add> element that contains attribute values to be added to the object.
An OPTIONAL <host:rem> element that contains attribute values to be removed from the object.
> element that contains object attribute values to be changed.
At least one <host:add>, <host:rem>, or <host:
chg> element MUST be provided if the command is not being extended.
All of these elements MAY be omitted if an <update> extension is present.
rem> elements contain the following child elements:  One or more <host:addr> elements that contain IP addresses to be associated with or removed from the host object.
IP address restrictions described in the <create> command mapping apply here as well.
One or more <host:status> elements that contain status values to be associated with or removed from the object.
When specifying a value to be removed, only the attribute value is significant; element text is not required to match a value for removal.
> element contains the following child elements:  A <host:name
> element that contains a new fully qualified host name by which the host object will be known.
Host name changes MAY require the addition or removal of IP addresses to be accepted by the server.
IP address association MAY be subject to server policies for provisioning hosts as name servers.
Host name changes can have an impact on associated objects that refer to the host object.
A host name change SHOULD NOT require additional updates of associated objects to preserve existing associations, with one exception: changing an external host object that has associations with objects that are sponsored by a different client.
Attempts to update such hosts directly MUST fail with EPP error code 2305.
The change can be provisioned by creating a new external host with a new name and any needed new attributes, and subsequently updating the other objects sponsored by the client.
Example <update> command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When an <update> command has been processed successfully, a server MUST respond with an EPP response with no <
Example <update> response: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
An EPP error response MUST be returned if an <update> command could not be processed for any reason.
Offline Review of Requested Actions Commands are processed by a server in the order they are received from a client.
Though an immediate response confirming receipt and processing of the command is produced by the server, a server operator MAY perform an offline review of requested transform commands before completing the requested action.
In such situations, the response from the server MUST clearly note that the transform command has been received and processed, but the requested action is pending.
The status of the corresponding object MUST clearly reflect processing of the pending action.
The server MUST notify the client when offline processing of the action has been completed.
Examples describing a <create> command that requires offline review are included here.
Note the result code and message returned in response to the <create> command.
S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Command completed successfully; action pending</msg
The status of the host object after returning this response MUST include "pendingCreate".
The server operator reviews the request offline and informs the client of the outcome of the review either by queuing a service message for retrieval via the <poll> command or by using an out of band mechanism to inform the client of the request.
The service message MUST contain text that describes the notification in the child <msg
> element of the response <msgQ> element.
In addition, the EPP <
resData> element MUST contain a child <host:
> element that identifies the host namespace.
> element contains the following child elements:  A <host:name
> element that contains the fully qualified name of the host object.
> element contains a REQUIRED "paResult" attribute.
A positive boolean value indicates that the request has been approved and completed.
A negative boolean value indicates that the request has been denied and the requested action has not been taken.
A <host:paTRID> element that contains the client transaction identifier and server
transaction identifier returned with the original response to process the command.
The client transaction identifier is OPTIONAL and will only be returned if the client provided an identifier with the original <create> command.
A <host:paDate> element that contains the date and time describing when review of the requested action was completed.
Example "review completed" service message: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
Command completed successfully; ack to dequeue</msg
An EPP object mapping is specified in XML Schema notation.
The formal syntax presented here is a complete schema representation of the object mapping suitable for automated validation of EPP XML instances.
The BEGIN and END tags are not part of the schema; they are used to note the beginning and ending of the schema for URI registration purposes.
Copyright (c) 2009 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
Neither the name of Internet Society, IETF or IETF Trust, nor the names of specific contributors, may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "
AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
xml version "1.0" encoding "UTF 8"?
Child elements found in EPP commands.
> <element name "info" type "host:sNameType"/
Child elements of the <create> command.
<element name "name" type "eppcom:
" minOccurs "0" maxOccurs "
> <simpleType name "addrStringType"> <restriction base "token"> <minLength value "3"/
> <simpleType name "ipType"> <restriction base "token"> <enumeration value "v4"/>
Child elements of the <delete> and <info> commands.
<element name "name" type "eppcom:
Child element of commands that accept multiple names.
mNameType"> <sequence> <element name "name" type "
Child elements of the <update> command.
<complexType name "updateType"> <sequence> <element name "name" type "
> <element name "rem" type "host:addRemType
> <element name "chg" type "host:chgType" minOccurs "
Data elements that can be added or removed.
<element name "addr" type "host:addrType" minOccurs "0" maxOccurs "
Data elements that can be changed.
<element name "name" type "eppcom:
<element name "chkData" type "host:chkDataType"/
> <element name "creData" type "host:creDataType"/
<element name "infData" type "host:infDataType"/
> <complexType name "checkNameType"> <simpleContent> <extension base "eppcom:labelType
<element name "name" type "eppcom:
<element name "name" type "eppcom:
> <element name "crID" type "
> <element name "crDate" type "dateTime"/>
<element name "upID" type "eppcom:
> <element name "upDate" type "dateTime" minOccurs "
> <element name "trDate" type "dateTime" minOccurs "
Status is a combination of attributes and an optional human readable message that may be expressed in languages other than English.
Pending action notification response elements.
Internationalization Considerations EPP is represented in XML, which provides native support for encoding information using the Unicode character set and its more compact representations including UTF 8.
Conformant XML processors recognize both UTF 8 and UTF 16
Though XML includes provisions to identify and use other character encodings through use of an "encoding" attribute in an <?
> declaration, use of UTF 8 is RECOMMENDED in environments where parser encoding support incompatibility exists.
All date time values presented via EPP MUST be expressed in Universal Coordinated Time using the Gregorian calendar.
XML Schema allows use of time zone identifiers to indicate offsets from the zero meridian, but this option MUST NOT be used with EPP.
The extended date time form using upper case "T" and "Z" characters defined in [W3C.REC xmlschema 2 20041028]
MUST be used to represent date time values, as XML Schema does not support truncated date time forms or lower case "T" and "Z" characters.
The syntax for domain and host names described in this document MUST conform to [RFC0952] and [RFC1123].
At the time of this writing, RFC 3490 [RFC3490] describes a standard to use certain ASCII name labels to represent non ASCII name labels.
These conformance requirements might change as a result of progressing work in developing standards for internationalized host names.
This document uses URNs to describe XML namespaces and XML schemas conforming to a registry mechanism described in [RFC3688].
Two URI assignments have been registered by the IANA.
Registration request for the host namespace:
: See the "Author's Address" section of this document.
Namespace URIs do not represent an XML specification.
Registration request for the host XML schema:
: See the "Author's Address" section of this document.
: See the "Formal Syntax" section of this document.
The object mapping described in this document does not provide any security services or introduce any additional considerations beyond those described by [RFC5730] or those caused by the protocol layers used by EPP.
Appendix A.  Changes from RFC 4932 1.
"This document obsoletes RFC 3732" to
"This document obsoletes RFC 4932".
2.  Replaced references to RFC 1886 with references to 3596.
Removed references to RFC 3152 since both it and 1886 have been obsoleted by 3596.
Replaced references to RFC 3732 with references to 4932.
Replaced references to RFC 4930 with references to 5730.
Other notification methods MAY be used in addition to the required service message" in Section 3.2.
Added 2201 response code text in Section 3.2.
Added BSD license text to XML schema section.
