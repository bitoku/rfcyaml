- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                         P. Timmel
  contents:
  - "Independent Submission                                         P. Timmel\n  \
    \ NSA's Cryptographic Message Syntax (CMS) Key Management Attributes\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines key management attributes used by the National\n\
    \   Security Agency (NSA).  The attributes can appear in asymmetric\n   and/or\
    \ symmetric key packages as well as the Cryptographic Message\n   Syntax (CMS)\
    \ content types that subsequently envelope the key\n   packages.  Key packages\
    \ described in RFCs 5958 and 6031 are examples\n   of where these attributes can\
    \ be used.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7906.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Attribute Locations ........................................3\n  \
    \    1.2. ASN.1 Notation .............................................4\n    \
    \  1.3. Terminology ................................................5\n   2. CMS-Defined\
    \ Attributes ..........................................6\n   3. Community Identifiers\
    \ ...........................................7\n   4. Key Province Attribute ..........................................8\n\
    \   5. Binary Signing Time .............................................8\n  \
    \ 6. Manifest ........................................................9\n   7.\
    \ Key Algorithm ...................................................9\n   8. User\
    \ Certificate ...............................................11\n   9. Key Package\
    \ Receivers ..........................................11\n   10. TSEC Nomenclature\
    \ .............................................13\n   11. Key Purpose ...................................................16\n\
    \   12. Key Use .......................................................17\n  \
    \ 13. Transport Key .................................................20\n   14.\
    \ Key Distribution Period .......................................20\n   15. Key\
    \ Validity Period ...........................................22\n   16. Key Duration\
    \ ..................................................23\n   17. Classification\
    \ ................................................24\n      17.1. Security Label\
    \ ...........................................25\n   18. Split Key Identifier ..........................................29\n\
    \   19. Key Package Type ..............................................30\n  \
    \ 20. Signature Usage ...............................................30\n   21.\
    \ Other Certificate Format ......................................33\n   22. PKI\
    \ Path ......................................................34\n   23. Useful\
    \ Certificates ...........................................35\n   24. Key Wrap\
    \ Algorithm ............................................35\n   25. Content Decryption\
    \ Key Identifier .............................36\n      25.1. Content Decryption\
    \ Key Identifier: Symmetric Key\n            and Symmetric ............................................36\n\
    \      25.2. Content Decryption Key Identifier: Unprotected ...........37\n  \
    \ 26. Certificate Pointers ..........................................37\n   27.\
    \ CRL Pointers ..................................................38\n   28. Key\
    \ Package Identifier and Receipt Request ....................38\n   29. Additional\
    \ Error Codes ........................................39\n   30. Processing Key\
    \ Package Attribute Values and CMS\n       Content Constraints ...........................................39\n\
    \   31. Attribute Scope ...............................................41\n  \
    \ 32. Security Considerations .......................................48\n   33.\
    \ References ....................................................48\n      33.1.\
    \ Normative References .....................................48\n      33.2. Informative\
    \ References ...................................51\n   Appendix A. ASN.1 Module\
    \ ..........................................52\n   Authors' Addresses ................................................68\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines key management attributes used by\
    \ the National\n   Security Agency (NSA).  The attributes can appear in asymmetric\n\
    \   and/or symmetric key packages as well as the Cryptographic Message\n   Syntax\
    \ (CMS) content types that subsequently envelope the key\n   packages.\n   This\
    \ document contains definitions for new attributes as well as\n   previously defined\
    \ attributes.  References are provided to the\n   previously defined attributes;\
    \ however, their definitions are\n   included herein for convenience.\n   CMS\
    \ allows for arbitrary nesting of content types.  Attributes are\n   also supported\
    \ in various locations in content types and key\n   packages, which are themselves\
    \ content types (see Section 1.1).  An\n   implementation that supports all of\
    \ the possibilities would be\n   extremely complex.  Instead of implementing the\
    \ full flexibility\n   supported by this document, some devices may choose to\
    \ support one or\n   more templates, which is a profile for a combination of CMS\
    \ content\n   type(s), key package, and attribute(s); see Section 19.\n"
- title: 1.1.  Attribute Locations
  contents:
  - "1.1.  Attribute Locations\n   There are a number of CMS content types that support\
    \ attributes\n   SignedData [RFC5652], EnvelopedData [RFC5652], EncryptedData\n\
    \   [RFC5652], AuthenticatedData [RFC5652], and AuthEnvelopedData\n   [RFC5083]\
    \ as well as ContentWithAttributes [RFC4073].  There are also\n   a number of\
    \ other content types defined with CONTENT-TYPE [RFC6268]\n   that support attributes\
    \ including AsymmetricKeyPackage [RFC5958] and\n   SymmetricKeyPackage [RFC6031].\n\
    \   CMS defines a number of \"protecting content types\" -- SignedData\n   [RFC5652],\
    \ EnvelopedData [RFC5652], EncryptedData [RFC5652],\n   AuthenticatedData [RFC5652],\
    \ and AuthEnvelopedData [RFC5083] -- that\n   provide some type of security service.\
    \  There are also other CMS\n   content types -- Data [RFC5652], ContentWithAttributes\
    \ [RFC4073], and\n   ContentCollection [RFC4073] -- that provide no security service.\n\
    \   There are also different kinds of attributes in these content types:\n   \
    \   o  SignedData supports two kinds of attributes: signed and\n         unsigned\
    \ attributes in the signedAttrs and unsignedAttrs\n         fields, respectively.\n\
    \      o  EnvelopedData and EncryptedData each support one kind of\n         attribute:\
    \ unprotected attributes in the unprotectedAttrs\n         field.\n      o  AuthEnvelopedData\
    \ supports two kinds of attributes:\n         authenticated and unauthenticated\
    \ attributes in the authAttrs\n         and unauthAttrs fields, respectively.\
    \  Both of these attributes\n         are also unprotected (i.e., they are not\
    \ encrypted); therefore,\n         when referring to AuthEnvelopedData attributes,\
    \ they are\n         authenticated&unprotected and unauthenticated&unprotected.\
    \  For\n         this specification, unauthenticated attributes MUST NOT be\n\
    \         included.\n      o  AuthenticatedData supports two kinds of attributes:\n\
    \         authenticated and unauthenticated attributes in the authAttrs\n    \
    \     and unauthAttrs fields, respectively.  For this specification,\n       \
    \  unauthenticated attributes MUST NOT be included.\n      o  ContentWithAttributes\
    \ supports one kind of attribute: content\n         attributes in the attrs field.\n\
    \      o  AsymmetricKeyPackage supports one kind of attribute: asymmetric\n  \
    \       key attributes in the attributes field.  If an attribute\n         appears\
    \ as part of an asymmetric key package, it SHOULD appear\n         in the attributes\
    \ field of the AsymmetricKeyPackage.\n      o  SymmetricKeyPackage supports two\
    \ kinds of attributes: symmetric\n         key and symmetric key package attributes\
    \ in the sKeyAttrs and\n         sKeyPkgAttrs fields, respectively.  Note that\
    \ [RFC6031]\n         prohibits the same attribute from appearing in both locations\n\
    \         in the same SymmetricKeyPackage.\n   Note that this specification updates\
    \ the following information object\n   sets SignedAttributesSet, UnsignedAttributes,\n\
    \   UnprotectedEnvAttributes, UnprotectedEncAttributes, AuthAttributeSet,\n  \
    \ UnauthAttributeSet, AuthEnvDataAttributeSet,\n   UnauthEnvDataAttributeSet,\
    \ and ContentAttributeSet from [RFC6268] as\n   well as OneAsymmetricKeyAttributes\
    \ from [RFC5958], SKeyPkgAttributes\n   from [RFC6031], and SKeyAttributes from\
    \ [RFC6031] to constrain the\n   permissible locations for attributes.  See Appendix\
    \ A for the ASN.1\n   for the information object sets.\n"
- title: 1.2.  ASN.1 Notation
  contents:
  - "1.2.  ASN.1 Notation\n   The attributes defined in this document use 2002 ASN.1\
    \ [X.680]\n   [X.681] [X.682] [X.683].  The attributes MUST be DER [X.690] encoded.\n\
    \   Each of the attributes has a single attribute value instance in the\n   values\
    \ set.  Even though the syntax is defined as a set, there MUST\n   be exactly\
    \ one instance of AttributeValue present.  Further, the\n   SignedAttributes,\
    \ UnsignedAttributes, UnprotectedAttributes,\n   AuthAttributes, and UnauthAttributes\
    \ are also defined as a set, and\n   this set MUST include only one instance of\
    \ any particular type of\n   attribute.  That is, any object identifier appearing\
    \ in AttributeType\n   MUST only appear one time in the set of attributes.\n \
    \  SignedData, EnvelopedData, EncryptedData, AuthenticatedData,\n   AuthEnvelopedData,\
    \ and ContentWithAttributes were originally defined\n   using the 1988 version\
    \ of ASN.1.  These definitions were updated to\n   the 2008 version of ASN.1 by\
    \ [RFC6268].  None of the new 2008 ASN.1\n   tokens are used; this allows 2002\
    \ compilers to compile 2008 ASN.1.\n   AsymmetricKeyPackage and SymmetricKeyPackage\
    \ are defined using the\n   2002 ASN.1.\n   [RFC5652] and [RFC2634] define generally\
    \ useful attributes for CMS\n   using the 1988 version of ASN.1.  These definitions\
    \ were updated to\n   the 2008 version of ASN.1 by [RFC6268] and the 2002 version\
    \ of ASN.1\n   by [RFC5911], respectively.  [RFC4108] and [RFC6019] also defined\n\
    \   attributes using the 1988 version of ASN.1, which this document uses.\n  \
    \ Both were updated by [RFC5911] to the 2002 ASN.1.  Refer to\n   [RFC2634], [RFC4108],\
    \ [RFC5652], and [RFC6019] for the attribute's\n   semantics, but refer to [RFC5911]\
    \ or [RFC6268] for the attribute's\n   ASN.1 syntax.\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in RFC\n   2119 [RFC2119].\n   Attribute Scope: The scope of an\
    \ attribute is the compilation of\n   keying material to which the attribute value\
    \ is assigned.  The scope\n   of each attribute is determined by its placement\
    \ within the key\n   package or content collection.  See Section 31.\n   SIR:\
    \ Source Intermediary Receiver is a model with three entities:\n      o  A source\
    \ initiates the delivery of a key to one or more\n         receivers.  It may\
    \ wrap or encrypt the key for delivery.  This\n         is expected to be the\
    \ common case, since a cleartext key is\n         vulnerable to exposure and compromise.\
    \  If the sender is to\n         encrypt the key for delivery, it must know how\
    \ to encrypt the\n         key so that the receiver(s) can decrypt it.  A sender\
    \ may also\n         carry out any of the functions of an intermediary.\n    \
    \     *  The original key package creators are sometimes referred to\n       \
    \     as key source authorities.  These entities create the\n            symmetric\
    \ and/or asymmetric key package and apply the\n            initial CMS protecting\
    \ layer, which is normally a SignedData\n            but sometimes an AuthenticatedData.\
    \  This initial CMS\n            protecting layer is maintained through any intermediary\
    \ for\n            the receivers of the key package to ensure that receivers\n\
    \            can validate the key source authority.\n      o  An intermediary\
    \ does not have access to the cleartext key.  An\n         intermediary may perform\
    \ source authentication on key packages\n         and may append or remove management\
    \ information related to the\n         package.  It may encapsulate the encrypted\
    \ key packages in\n         larger packages that contain other user data destined\
    \ for later\n         intermediaries or receivers.\n      o  A receiver has access\
    \ to the cleartext key. If the received key\n         package is encrypted, it\
    \ can unwrap or decrypt the encrypted\n         key to obtain the cleartext key.\
    \  A receiver may be the final\n         destination of the cryptographic product.\
    \  An element that acts\n         as a receiver and is not the final destination\
    \ of the key\n         package may also act as a sender or as an intermediary.\
    \  After\n         receiving a key, a receiver may encrypt the received key for\n\
    \         local storage.\n   NOTE: As noted in Section 1, a receiver can be tailored\
    \ to support a\n   particular combination of CMS content type(s), key package,\
    \ and\n   attribute(s) resulting in less-complex implementations.  All of these\n\
    \   tailored receivers can be supported by a common key management\n   infrastructure\
    \ that uses this specification; this also can yield\n   efficiencies in generation\
    \ and provisioning.  Senders and\n   intermediaries that have to understand multiple\
    \ tailored receivers\n   get the efficiency of a common specification language\
    \ and modular\n   implementation, as opposed to needing stove-piped processing\
    \ for each\n   different receiver.\n"
- title: 2.  CMS-Defined Attributes
  contents:
  - "2.  CMS-Defined Attributes\n   The following attributes are defined for [RFC5652]:\n\
    \      o  content-type [RFC5652] [RFC5911] [RFC6268] uniquely specifies\n    \
    \     the CMS content type.  This attribute MUST be included as a\n         signed,\
    \ authenticated, or authenticated&unprotected attribute.\n      o  message-digest\
    \ [RFC5652] [RFC5911] [RFC6268] is the message\n         digest of the encapsulated\
    \ content calculated using the\n         signer's message digest algorithm.  As\
    \ specified in [RFC5652],\n         it must be included as a signed attribute\
    \ and an authenticated\n         attribute; as specified in [RFC5652], it must\
    \ not be an\n         unsigned attribute, unauthenticated attribute, or unprotected\n\
    \         attribute; as specified in [RFC5083], it should not be included\n  \
    \       as an authenticated&unprotected attribute in AuthEnvelopedData.\n    \
    \     This attribute MUST NOT be included elsewhere.\n      o  content-hints [RFC2634]\
    \ [RFC5911] [RFC6268] identifies the\n         innermost content when multiple\
    \ layers of encapsulation have\n         been applied.  Every instance of SignedData,\
    \ AuthenticatedData,\n         and AuthEnvelopedData that does not directly encapsulate\
    \ a\n         SymmetricKeyPackage, an AsymmetricKeyPackage, or an\n         EncryptedKeyPackage\
    \ [RFC6032] MUST include this attribute.\n"
- title: 3.  Community Identifiers
  contents:
  - "3.  Community Identifiers\n   The community-identifiers attribute, defined in\
    \ [RFC4108] and\n   [RFC5911], lists the communities that are authorized recipients\
    \ of\n   the signed content.  It can appear as a signed, authenticated,\n   authenticated&unprotected,\
    \ or content attribute.  This attribute MUST\n   be supported.\n   The 2002 ASN.1\
    \ syntax for the community-identifiers attribute is\n   included for convenience:\n\
    \     aa-communityIdentifiers ATTRIBUTE ::= {\n       TYPE CommunityIdentifiers\n\
    \       IDENTIFIED BY id-aa-communityIdentifiers }\n     id-aa-communityIdentifiers\
    \ OBJECT IDENTIFIER ::= {\n       iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs9(9)\n       smime(16) aa(2) 40 }\n     CommunityIdentifiers ::=\
    \ SEQUENCE OF CommunityIdentifier\n     CommunityIdentifier ::= CHOICE {\n   \
    \    communityOID  OBJECT IDENTIFIER,\n       hwModuleList  HardwareModules }\n\
    \     HardwareModules ::= SEQUENCE {\n       hwType           OBJECT IDENTIFIER,\n\
    \       hwSerialEntries  SEQUENCE OF HardwareSerialEntry }\n     HardwareSerialEntry\
    \ ::= CHOICE {\n       all    NULL,\n       single OCTET STRING,\n       block\
    \  SEQUENCE {\n                low OCTET STRING,\n                high OCTET STRING\
    \ } }\n   Consult [RFC4108] for the attribute's semantics.\n"
- title: 4.  Key Province Attribute
  contents:
  - "4.  Key Province Attribute\n   The key-province-v2 attribute identifies the scope,\
    \ range, or\n   jurisdiction in which the key is to be used.  The key-province-v2\n\
    \   attribute MUST be present as a signed attribute or an authenticated\n   attribute\
    \ in the innermost CMS protection content type that provides\n   authentication\
    \ (i.e., SignedData, AuthEnvelopedData, or\n   AuthenticatedData) and encapsulates\
    \ a symmetric key package or an\n   asymmetric key package.\n   The key-province\
    \ attribute has the following syntax:\n     aa-keyProvince-v2 ATTRIBUTE ::= {\n\
    \       TYPE KeyProvinceV2\n       IDENTIFIED BY id-aa-KP-keyProvinceV2 }\n  \
    \   id-aa-KP-keyProvinceV2 OBJECT IDENTIFIER ::=\n       { joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1) gov(101)\n         dod(2) infosec(1) attributes(5)\
    \ 71 }\n     KeyProvinceV2 ::= OBJECT IDENTIFIER\n"
- title: 5.  Binary Signing Time
  contents:
  - "5.  Binary Signing Time\n   The binary-signing-time attribute, defined in [RFC6019]\
    \ and\n   [RFC6268], specifies the time at which the signature or the Message\n\
    \   Authentication Code (MAC) was applied to the encapsulated content.\n   It\
    \ can appear as a signed, authenticated, or\n   authenticated&unprotected attribute.\n\
    \   The 2002 ASN.1 syntax is included for convenience:\n     aa-binarySigningTime\
    \ ATTRIBUTE ::= {\n       TYPE BinarySigningTime\n       IDENTIFIED BY id-aa-binarySigningTime\
    \ }\n     id-aa-binarySigningTime OBJECT IDENTIFIER ::= {\n       iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n       smime(16) aa(2) 46 }\n     BinarySigningTime\
    \ ::= BinaryTime\n     BinaryTime ::= INTEGER (0..MAX)\n   Consult [RFC6019] for\
    \ the binary-signing-time attribute's semantics.\n"
- title: 6.  Manifest
  contents:
  - "6.  Manifest\n   The manifest attribute lists the short titles of all the Transmission\n\
    \   Security Nomenclature (TSEC-Nomenclature) attributes from inner key\n   packages.\
    \  It MUST only appear as an outermost signed, authenticated,\n   or authenticated&unprotected\
    \ attribute.  If a short title is repeated\n   in inner packages, it need only\
    \ appear once in the manifest\n   attribute.  The manifest attribute MUST NOT\
    \ appear in the same level\n   as the TSEC-Nomenclature from Section 10.\n   The\
    \ manifest attribute has the following syntax:\n     aa-manifest ATTRIBUTE ::=\
    \ {\n       TYPE Manifest\n       IDENTIFIED BY id-aa-KP-manifest }\n     id-aa-KP-manifest\
    \ OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1)\n\
    \       gov(101) dod(2) infosec(1) attributes(5) 72 }\n     Manifest ::= SEQUENCE\
    \ SIZE (1..MAX) OF ShortTitle\n"
- title: 7.  Key Algorithm
  contents:
  - "7.  Key Algorithm\n   The key-algorithm attribute indirectly specifies the size\
    \ and format\n   of the keying material in the skey field of a symmetric key package,\n\
    \   which is defined in [RFC6031].  It can appear as a symmetric key,\n   symmetric\
    \ key package, signed, authenticated,\n   authenticated&unprotected, or content\
    \ attribute.  If this attribute\n   appears as a signed attribute, then all of\
    \ the keying material within\n   the SignedData content MUST be associated with\
    \ the same algorithm.\n   If this attribute appears as an authenticated or\n \
    \  authenticated&unprotected attribute, then all of the keying material\n   within\
    \ the AuthenticatedData or AuthEnvelopedData content type MUST\n   be associated\
    \ with the same algorithm.  If this attribute appears as\n   a content attribute,\
    \ then all of the keying material within the\n   collection MUST be associated\
    \ with the same algorithm.  If both the\n   key-wrap-algorithm (Section 24) and\
    \ key-algorithm attributes apply to\n   an sKey, then the key-algorithm attribute\
    \ refers to the decrypted\n   value of sKey rather than to the content of sKey\
    \ itself.  This\n   attribute MUST be supported.\n   The key-algorithm attribute\
    \ has the following syntax:\n     aa-keyAlgorithm ATTRIBUTE ::= {\n       TYPE\
    \ KeyAlgorithm\n       IDENTIFIED BY id-kma-keyAlgorithm }\n     id-kma-keyAlgorithm\
    \ OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1)\n\
    \       gov(101) dod(2) infosec(1) keying-material-attributes(13) 1 }\n     KeyAlgorithm\
    \ ::= SEQUENCE {\n       keyAlg            OBJECT IDENTIFIER,\n       checkWordAlg\
    \  [1] OBJECT IDENTIFIER OPTIONAL,\n       crcAlg        [2] OBJECT IDENTIFIER\
    \ OPTIONAL }\n   The fields in the key-algorithm attribute have the following\n\
    \   semantics:\n      o  keyAlg specifies the size and format of the keying material.\n\
    \      o  If the particular key format supports more than one check-word\n   \
    \      algorithm, then the OPTIONAL checkWordAlg identifier indicates\n      \
    \   which check-word algorithm was used to generate the check word\n         that\
    \ is present.  If the check-word algorithm is implied by the\n         key algorithm,\
    \ then the checkWordAlg field SHOULD be omitted.\n      o  If the particular key\
    \ format supports more than one Cyclic\n         Redundancy Check (CRC) algorithm,\
    \ then the OPTIONAL crcAlg\n         identifier indicates which CRC algorithm\
    \ was used to generate\n         the value that is present.  If the CRC algorithm\
    \ is implied by\n         the key algorithm, then the crcAlg field SHOULD be omitted.\n\
    \   The keyAlg identifier, the checkWordAlg identifier, and the crcAlg\n   identifier\
    \ are object identifiers.  The use of an object identifier\n   accommodates any\
    \ algorithm from any registry.\n   The format of the keying material in the skey\
    \ field of a symmetric\n   key package will not match this attribute if the keying\
    \ material is\n   split (see Section 18 for a discussion of the split-identifier\n\
    \   attribute).  In this situation, this attribute identifies the format\n   of\
    \ the keying material once the two splits are combined.\n   Due to multiple layers\
    \ of encapsulation or the use of content\n   collections, the key-algorithm attribute\
    \ can appear in more than one\n   location in the overall key package.  When there\
    \ are multiple\n   occurrences of the key-algorithm attribute within the same\
    \ scope, the\n   keyAlg field MUST match in all instances.  The OPTIONAL checkWordAlg\n\
    \   and crcAlg fields can be omitted in the key-algorithm attribute when\n   it\
    \ appears as a signed, authenticated, authenticated&unprotected, or\n   content\
    \ attribute.  However, if these optional fields are present,\n   they MUST also\
    \ match the other occurrences within the same scope.\n   Receivers MUST reject\
    \ any key package that fails these consistency\n   checks.\n"
- title: 8.  User Certificate
  contents:
  - "8.  User Certificate\n   The user-certificate attribute specifies the type, format,\
    \ and value\n   of an X.509 certificate and is used in asymmetric key package's\n\
    \   attributes field.  This attribute can appear as an asymmetric key\n   attribute.\
    \  This attribute MUST NOT appear in an asymmetric key\n   package attributes\
    \ field that includes the other-certificate-formats\n   attribute.  Symmetric\
    \ key packages do not contain any certificates,\n   so the user-certificate attribute\
    \ MUST NOT appear in a symmetric key\n   package.  The user-certificate attribute\
    \ MUST NOT appear as a signed,\n   authenticated, authenticated&unprotected, or\
    \ content attribute.  This\n   attribute MUST be supported.\n   The syntax is\
    \ taken from [X.509] but redefined using the ATTRIBUTE\n   CLASS from [RFC5912].\
    \  The user-certificate attribute has the\n   following syntax:\n     aa-userCertificate\
    \ ATTRIBUTE ::= {\n       TYPE Certificate\n       EQUALITY MATCHING RULE certificateExactMatch\n\
    \       IDENTIFIED BY id-at-userCertificate }\n     id-at-userCertificate OBJECT\
    \ IDENTIFIER ::= {\n       joint-iso-itu-t(2) ds(5) attributes(4) 36 }\n   Since\
    \ the user-certificate attribute MUST NOT appear as a signed,\n   authenticated,\
    \ authenticated&unprotected, or content attribute, an\n   asymmetric key package\
    \ cannot include multiple occurrences of the\n   user-certificate attribute within\
    \ the same scope.  Receivers MUST\n   reject any asymmetric key package in which\
    \ the user-certificate\n   attribute appears as a signed, authenticated,\n   authenticated&unprotected,\
    \ or content attribute.\n"
- title: 9.  Key Package Receivers
  contents:
  - "9.  Key Package Receivers\n   The key-package-receivers-v2 attribute indicates\
    \ the intended\n   audience for the key package.  The key-package-receivers-v2\
    \ attribute\n   is not intended for access control decisions; rather, intermediate\n\
    \   systems may use this attribute to make routing and relaying\n   decisions.\
    \  If the receiver is not listed, it will not be able to\n   decrypt the package;\
    \ therefore, the receiver SHOULD reject the key\n   package if the key-package-receivers-v2\
    \ attribute is present and they\n   are not listed as an intended receiver.  The\
    \ key-package-receivers-v2\n   attribute can be used as a signed, authenticated,\n\
    \   authenticated&unprotected, or content attribute.  If the key-package-\n  \
    \ receivers-v2 attribute is associated with a collection, then the\n   named receivers\
    \ MUST be able to receive all of the key packages\n   within the collection. \
    \ This attribute MUST be supported.\n   The key-package-receivers-v2 attribute\
    \ has the following syntax:\n     aa-keyPackageReceivers-v2 ATTRIBUTE ::= {\n\
    \       TYPE KeyPkgReceiversV2\n       IDENTIFIED BY id-kma-keyPkgReceiversV2\
    \ }\n     id-kma-keyPkgReceiversV2 OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1) gov(101)\n       dod(2) infosec(1) keying-material-attributes(13)\
    \ 16 }\n     KeyPkgReceiversV2 ::= SEQUENCE SIZE (1..MAX) OF KeyPkgReceiver\n\
    \     KeyPkgReceiver ::= CHOICE {\n       sirEntity  [0] SIREntityName,\n    \
    \   community  [1] CommunityIdentifier }\n   The key-package-receivers-v2 attribute\
    \ contains a list of receiver\n   identifiers.  The receiver identifier is either\
    \ a SIREntityName\n   [RFC7191] or a CommunityIdentifier (see Section 3).  The\n\
    \   SIREntityName syntax does not impose any particular structure on the\n   receiver\
    \ identifier, but it does require registration of receiver\n   identifier types.\
    \  The nameType ensures that two receiver identifiers\n   of different types that\
    \ contain the same values are not interpreted\n   as equivalent.  Name types are\
    \ expected to be defined that represent\n   several different granularities. \
    \ For example, one name type will\n   represent the receiver organization.  At\
    \ a finer granularity, the\n   name type will identify a specific cryptographic\
    \ device, perhaps\n   using a manufacturer identifier and serial number.\n   If\
    \ a receiver does not recognize a particular nameType or a community\n   identifier,\
    \ then keying material within the scope of the unrecognized\n   nameType or community\
    \ identifier MUST NOT be used in any manner.\n   However, the receiver need not\
    \ discard the associated key package.\n   Since many cryptographic devices are\
    \ programmable, a different\n   firmware load may recognize the nameType.  Likewise,\
    \ a change in the\n   configuration may lead to the recognition of a previously\n\
    \   unrecognized community identifier.  Therefore, the receiver may\n   retain\
    \ the key package, but refuse to use it for anything with a\n   firmware load\
    \ that does not recognize the nameType or a configuration\n   that does not recognize\
    \ the community identifier.\n   Whenever a key package is saved for later processing\
    \ due to an\n   unrecognized nameType or community identifier, subsequent processing\n\
    \   MUST NOT rely on any checks that were made the first time the key\n   package\
    \ processing was attempted.  That is, the subsequent processing\n   MUST include\
    \ the full complement of checks.  Further, a receipt for\n   the packages MUST\
    \ NOT be generated unless all of these checks are\n   successfully completed.\n\
    \   Due to multiple layers of encapsulation or the use of content\n   collections,\
    \ the key-package-receivers-v2 attribute can appear in\n   more than one location\
    \ in the overall key package.  When that\n   happens, each occurrence is evaluated\
    \ independently.\n   In a content collection, each member of the collection might\
    \ contain\n   its own signed, authenticated, authenticated&unprotected, or content\n\
    \   attribute that includes a key-package-receivers-v2 attribute.  In\n   this\
    \ situation, each member of the collection is evaluated\n   separately, and any\
    \ member that includes an acceptable receiver\n   SHOULD be retained.  Other members\
    \ can be rejected or retained for\n   later processing with a different firmware\
    \ load.\n"
- title: 10.  TSEC Nomenclature
  contents:
  - "10.  TSEC Nomenclature\n   The Telecommunications Security Nomenclature (TSEC-Nomenclature)\n\
    \   attribute provides the name for a piece of keying material, which\n   always\
    \ includes a printable string called a \"short title\" (see\n   below).  The TSEC-Nomenclature\
    \ attribute also contains other\n   identifiers when the shortTitle is insufficient\
    \ to uniquely name a\n   particular piece of keying material.  This attribute\
    \ can appear as a\n   symmetric key, symmetric key package, asymmetric key, signed,\n\
    \   authenticated, authenticated&unprotected, or content attribute.  If\n   this\
    \ attribute appears in the sKeyAttrs field, the editionID,\n   registerID, and\
    \ segmentID attribute fields MUST NOT be ranges.  If\n   this attribute appears\
    \ as a signed, authenticated,\n   authenticated&unprotected, or content attribute,\
    \ all of the keying\n   material within the associated content MUST have the same\
    \ shortTitle,\n   and the attribute value MUST contain only a shortTitle.  That\
    \ is,\n   when this attribute appears as a signed, authenticated,\n   authenticated&unprotected,\
    \ or content attribute, all of the optional\n   fields MUST be absent.  If this\
    \ attribute is associated with a\n   collection, all of the keying material within\
    \ the collection MUST\n   have the same shortTitle; however, the editionID, registerID,\
    \ and\n   segmentID will be different for each key package in the collection.\n\
    \   This attribute MUST be supported.\n   The TSEC-Nomenclature attribute has\
    \ the following syntax:\n     aa-tsecNomenclature ATTRIBUTE ::= {\n       TYPE\
    \ TSECNomenclature\n       IDENTIFIED BY id-kma-TSECNomenclature }\n     id-kma-TSECNomenclature\
    \ OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 3 }\n    \
    \ TSECNomenclature ::= SEQUENCE {\n       shortTitle  ShortTitle,\n       editionID\
    \   EditionID OPTIONAL,\n       registerID  RegisterID OPTIONAL,\n       segmentID\
    \   SegmentID OPTIONAL }\n     ShortTitle ::= PrintableString\n     EditionID\
    \ ::= CHOICE {\n       char CHOICE {\n           charEdition       [1] CharEdition,\n\
    \           charEditionRange  [2] CharEditionRange }\n       num CHOICE {\n  \
    \         numEdition        [3] NumEdition,\n           numEditionRange   [4]\
    \ NumEditionRange } }\n     CharEdition ::= PrintableString\n     CharEditionRange\
    \ ::= SEQUENCE {\n       firstCharEdition  CharEdition,\n       lastCharEdition\
    \   CharEdition }\n     NumEdition ::= INTEGER (0..308915776)\n     NumEditionRange\
    \ ::= SEQUENCE {\n       firstNumEdition  NumEdition,\n       lastNumEdition \
    \  NumEdition }\n     RegisterID ::= CHOICE {\n       register       [5] Register,\n\
    \       registerRange  [6] RegisterRange }\n     Register ::= INTEGER (0..2147483647)\n\
    \     RegisterRange ::= SEQUENCE {\n       firstRegister  Register,\n       lastRegister\
    \   Register }\n     SegmentID ::= CHOICE {\n       segmentNumber  [7] SegmentNumber,\n\
    \       segmentRange   [8] SegmentRange }\n     SegmentNumber ::= INTEGER (1..127)\n\
    \     SegmentRange ::= SEQUENCE {\n       firstSegment  SegmentNumber,\n     \
    \  lastSegment   SegmentNumber }\n   The fields in the TSEC-Nomenclature attribute\
    \ have the following\n   semantics:\n      o  The shortTitle consists of up to\
    \ 32 alphanumeric characters.\n         shortTitle processing always uses the\
    \ value in its entirety.\n      o  The editionID is OPTIONAL, and the editionIdentifier\
    \ is used to\n         distinguish accountable items.  The editionID consists\
    \ of\n         either six alphanumeric characters or an integer.  When\n     \
    \    present, the editionID is either a single value or a range.\n         The\
    \ integer encoding should be used when it is important to\n         keep key package\
    \ size to a minimum.\n      o  The registerID is OPTIONAL.  For electronic keying\
    \ material,\n         the registerID is usually omitted.  The registerID is an\n\
    \         accounting number assigned to identify Communications Security\n   \
    \      (COMSEC) material.  The registerID is either a single value or\n      \
    \   a range.\n      o  The segmentID is OPTIONAL, and it distinguishes the individual\n\
    \         symmetric keys delivered in one edition.  A unique\n         segmentNumber\
    \ is assigned to each key in an edition.  The\n         segmentNumber is set to\
    \ one for the first item in each edition,\n         and it is incremented by one\
    \ for each additional item within\n         that edition.  The segmentID is either\
    \ a single value or a\n         range.\n   The order that the keying material\
    \ will appear in the key package is\n   illustrated by the following example:\
    \ a cryptographic device may\n   require fresh keying material every day, an edition\
    \ represents the\n   keying material for a single month, and the segments represent\
    \ the\n   keying material for a day within that month.  Consider a key package\n\
    \   that contains the keying material for July and August; it will\n   contain\
    \ keying material for 62 days.  The keying material will appear\n   in the following\
    \ order: Edition 1, Segment 1; Edition 1, Segment 2;\n   Edition 1, Segment 3;\
    \ ...; Edition 1, Segment 31; Edition 2,\n   Segment 1; Edition 2, Segment 2;\
    \ Edition 2, Segment 3; ...;\n   Edition 2, Segment 31.\n   Due to multiple layers\
    \ of encapsulation or the use of content\n   collections, the TSEC-Nomenclature\
    \ attribute can appear in more than\n   one location in the overall key package.\
    \  When there are multiple\n   occurrences of the TSEC-Nomenclature attribute\
    \ within the same scope,\n   the shortTitle field MUST match in all instances.\
    \  Receivers MUST\n   reject any key package that fails these consistency checks.\n\
    \   When the manifest attribute from Section 6 is included in an outer\n   layer,\
    \ the ShortTitle field values present in TSEC-Nomenclature\n   attributes MUST\
    \ be one of the values in the manifest attribute.\n   Receivers MUST reject any\
    \ key package that fails this consistency\n   check.\n"
- title: 11.  Key Purpose
  contents:
  - "11.  Key Purpose\n   The key-purpose attribute specifies the intended purpose\
    \ of the key\n   material.  It can appear as a symmetric key, symmetric key package,\n\
    \   asymmetric key, signed, authenticated, authenticated&unprotected, or\n   content\
    \ attribute.  If the key-purpose attribute appears as a signed,\n   authenticated,\
    \ authenticated&unprotected, or content attribute, then\n   all of the keying\
    \ material within the associated content MUST have\n   the same key purpose value.\n\
    \   The key-purpose attribute has the following syntax:\n     aa-keyPurpose ATTRIBUTE\
    \ ::= {\n       TYPE KeyPurpose\n       IDENTIFIED BY id-kma-keyPurpose }\n  \
    \   id-kma-keyPurpose OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2) country(16)\
    \ us(840) organization(1) gov(101)\n       dod(2) infosec(1) keying-material-attributes(13)\
    \ 13 }\n     KeyPurpose ::= ENUMERATED {\n       n-a    (0),   -- Not Applicable\n\
    \       A     (65),   -- Operational\n       B     (66),   -- Compatible Multiple\
    \ Key\n       L     (76),   -- Logistics Combinations\n       M     (77),   --\
    \ Maintenance\n       R     (82),   -- Reference\n       S     (83),   -- Sample\n\
    \       T     (84),   -- Training\n       V     (86),   -- Developmental\n   \
    \    X     (88),   -- Exercise\n       Z     (90),   -- \"On the Air\" Testing\n\
    \       ... -- Expect additional key purpose values -- }\n   Due to multiple layers\
    \ of encapsulation or the use of content\n   collections, the key-purpose attribute\
    \ can appear in more than one\n   location in the overall key package.  When there\
    \ are multiple\n   occurrences of the key-purpose attribute within the same scope,\
    \ all\n   fields within the attribute MUST contain exactly the same values.\n\
    \   Receivers MUST reject any key package that fails these consistency\n   checks.\n"
- title: 12.  Key Use
  contents:
  - "12.  Key Use\n   The key-use attribute specifies the intended use of the key\
    \ material.\n   It can appear as a symmetric key, symmetric key package, asymmetric,\n\
    \   signed, authenticated, authenticated&unprotected, or content\n   attribute.\
    \  If the key-use attribute appears as a signed,\n   authenticated, authenticated&unprotected,\
    \ or content attribute, then\n   all of the keying material within the associated\
    \ content MUST have\n   the same key use value.\n   The key-use attribute has\
    \ the following syntax:\n     aa-key-Use ATTRIBUTE ::= {\n       TYPE KeyUse\n\
    \       IDENTIFIED BY id-kma-keyUse }\n     id-kma-keyUse OBJECT IDENTIFIER ::=\
    \ {\n       joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n\
    \       dod(2) infosec(1) keying-material-attributes(13) 14 }\n     KeyUse ::=\
    \ ENUMERATED {\n       n-a    (0),    -- Not applicable\n       ffk    (1),  \
    \  -- FIREFLY/CROSSTALK Key (Basic Format)\n       kek    (2),    -- Key Encryption\
    \ Key\n       kpk    (3),    -- Key Production Key\n       msk    (4),    -- Message\
    \ Signature Key\n       qkek   (5),    -- QUADRANT Key Encryption Key\n      \
    \ tek    (6),    -- Traffic Encryption Key\n       tsk    (7),    -- Transmission\
    \ Security Key\n       trkek  (8),    -- Transfer Key Encryption Key\n       nfk\
    \    (9),    -- Netted FIREFLY Key\n       effk  (10),    -- FIREFLY Key (Enhanced\
    \ Format)\n       ebfk  (11),    -- FIREFLY Key (Enhanceable Basic Format)\n \
    \      aek   (12),    -- Algorithm Encryption Key\n       wod   (13),    -- Word\
    \ of Day\n       kesk (246),    -- Key Establishment Key\n       eik  (247), \
    \   -- Entity Identification Key\n       ask  (248),    -- Authority Signature\
    \ Key\n       kmk  (249),    -- Key Modifier Key\n       rsk  (250),    -- Revocation\
    \ Signature Key\n       csk  (251),    -- Certificate Signature Key\n       sak\
    \  (252),    -- Symmetric Authentication Key\n       rgk  (253),    -- Random\
    \ Generation Key\n       cek  (254),    -- Certificate Encryption Key\n      \
    \ exk  (255),    -- Exclusion Key\n       ... -- Expect additional key use values\
    \ -- }\n   The values for the key-use attribute have the following semantics:\n\
    \      o  ffk: A FIREFLY/CROSSTALK key is used to establish a Key\n         Establishment\
    \ Key (KEK) or a Transmission Encryption Key (TEK)\n         between two parties.\
    \  The KEK or TEK generated from the\n         exchange is used with a symmetric\
    \ encryption algorithm.  This\n         key use value is associated with keys\
    \ in the basic format.\n      o  kek: A Key Encryption Key is used to encrypt\
    \ or decrypt other\n         keys for transmission or storage.\n      o  kpk:\
    \ A Key Production Key is used to initialize a keystream\n         generator for\
    \ the production of other electronically generated\n         keys.\n      o  msk:\
    \ A Message Signature Key is used in a digital signature\n         process that\
    \ operates on a message to assure message source\n         authentication, message\
    \ integrity, and non-repudiation.\n      o  qkek: QUADRANT Key Encryption Key\
    \ is one part of a tamper-\n         resistance solution.\n      o  tek: A Traffic\
    \ Encryption Key is used to encrypt plaintext, to\n         superencrypt previously\
    \ encrypted data, and/or to decrypt\n         ciphertext.\n      o  tsk: A Transmission\
    \ Security Key is used to protect\n         transmissions from interception and\
    \ exploitation by means other\n         than cryptanalysis.\n      o  trkek: Transfer\
    \ Key Encryption Key.  The keys used to protect\n         communications with\
    \ an intermediary.\n      o  nfk: A Netted FIREFLY Key is a FIREFLY key that has\
    \ an edition\n         number associated with it.  When rekeyed, it is incremented,\n\
    \         preventing communications with FIREFLY key of previous\n         editions.\
    \  This edition number is maintained within a universal\n         edition.\n \
    \     o  effk: Enhanced FIREFLY Key is used to establish a KEK or a TEK\n    \
    \     between two parties.  The KEK or TEK generated from an exchange\n      \
    \   is used with a symmetric encryption algorithm.  This key use\n         value\
    \ is associated with keys in the enhanced format.\n      o  ebfk: Enhanceable\
    \ Basic FIREFLY Key is used to establish a KEK\n         or a TEK between two\
    \ parties.  The KEK or TEK generated from an\n         exchange is used with a\
    \ symmetric encryption algorithm.  This\n         key use value is associated\
    \ with keys in the enhanceable basic\n         format.\n      o  aek: An Algorithm\
    \ Encryption Key is used to encrypt or decrypt\n         an algorithm implementation\
    \ as well as other functionality in\n         the implementation.\n      o  wod:\
    \ A key used to generate the Word of the Day (WOD).\n      o  kesk: A Key Establishment\
    \ Key is an asymmetric key set (e.g.,\n         public/private/parameters) used\
    \ to enable the establishment of\n         symmetric key(s) between entities.\n\
    \      o  eik: An Entity Identification Key is an asymmetric key set\n       \
    \  (e.g., public/private/parameters) used to identify one entity\n         to\
    \ another for access control and other similar purposes.\n      o  ask: An Authority\
    \ Signature Key is an asymmetric key set (e.g.,\n         public/private/parameters)\
    \ used by designated authorities to\n         sign objects such as Trust Anchor\
    \ Management Protocol (TAMP)\n         messages and firmware packages.\n     \
    \ o  kmk: A Key Modifier Key is a symmetric key used to modify the\n         results\
    \ of the process that forms a symmetric key from a public\n         key exchange\
    \ process.\n      o  rsk: A Revocation Signature Key is an asymmetric key set\
    \ (e.g.,\n         public/private/parameters) used to sign and authenticate\n\
    \         revocation lists and compromised key lists.\n      o  csk: A Certificate\
    \ Signature Key is an asymmetric key set\n         (e.g., public/private/parameters)\
    \ used to sign and authenticate\n         public key certificates.\n      o  sak:\
    \ A Symmetric Authentication Key is used in a MAC algorithm\n         to provide\
    \ message integrity.  Differs from a Message Signature\n         Key in that it\
    \ is symmetric key material and it does not\n         provide source authentication\
    \ or non-repudiation.\n      o  rgk: Random Generation Key is a key used to seed\
    \ a\n         deterministic pseudorandom number generator.\n      o  cek: A Certificate\
    \ Encryption Key is used to encrypt public key\n         certificates to support\
    \ privacy.\n      o  exk: An Exclusion Key is a symmetric key used to\n      \
    \   cryptographically subdivide a single large security domain into\n        \
    \ smaller segregated domains.\n   Due to multiple layers of encapsulation or the\
    \ use of content\n   collections, the key-use attribute can appear in more than\
    \ one\n   location in the overall key package.  When there are multiple\n   occurrences\
    \ of the key-use attribute within the same scope, all\n   fields within the attribute\
    \ MUST contain exactly the same values.\n   Receivers MUST reject any key package\
    \ that fails these consistency\n   checks.\n"
- title: 13.  Transport Key
  contents:
  - "13.  Transport Key\n   The transport-key attribute identifies whether an asymmetric\
    \ key is a\n   transport key or an operational key (i.e., whether or not the key\
    \ can\n   be used as is).  It can appear as an asymmetric key, signed,\n   authenticated,\
    \ authenticated&unprotected, or content attribute.  If\n   the transport-key attribute\
    \ appears as a signed, authenticated,\n   authenticated&unprotected, or content\
    \ attribute, then all of the\n   keying material within the associated content\
    \ MUST have the same\n   operational/transport key material.\n     aa-transportKey\
    \ ATTRIBUTE ::= {\n       TYPE TransOp\n       IDENTIFIED BY id-kma-transportKey\
    \ }\n     id-kma-transportKey OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1) gov(101)\n       dod(2) infosec(1) keying-material-attributes(13)\
    \ 15 }\n     TransOp ::= ENUMERATED {\n       transport    (1),\n       operational\
    \  (2) }\n   Due to multiple layers of encapsulation or the use of content\n \
    \  collections, the transport-key attribute can appear in more than one\n   location\
    \ in the overall key package.  When there are multiple\n   occurrences of the\
    \ transport-key attribute within the same scope, all\n   fields within the attribute\
    \ MUST contain exactly the same values.\n   Receivers MUST reject any key package\
    \ that fails these consistency\n   checks.\n"
- title: 14.  Key Distribution Period
  contents:
  - "14.  Key Distribution Period\n   The key-distribution-period attribute indicates\
    \ the period of time\n   that the keying material is intended for distribution.\
    \  Keying\n   material is often distributed before it is intended to be used.\
    \  Time\n   of day must be represented in Coordinated Universal Time (UTC).  It\n\
    \   can appear as a symmetric key, symmetric key package, asymmetric key,\n  \
    \ signed, authenticated, authenticated&unprotected, or content\n   attribute.\
    \  If the key-distribution-period attribute appears as a\n   signed, authenticated,\
    \ authenticated&unprotected, or content\n   attribute, then all of the keying\
    \ material within the content MUST\n   have the same key distribution period.\n\
    \   The key-distribution-period attribute has the following syntax:\n     aa-keyDistributionPeriod\
    \ ATTRIBUTE ::= {\n       TYPE KeyDistPeriod\n       IDENTIFIED BY id-kma-keyDistPeriod\
    \ }\n     id-kma-keyDistPeriod OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1) gov(101)\n       dod(2) infosec(1) keying-material-attributes(13)\
    \ 5 }\n     KeyDistPeriod ::= SEQUENCE {\n       doNotDistBefore  [0] BinaryTime\
    \ OPTIONAL,\n       doNotDistAfter       BinaryTime }\n     BinaryTime ::= INTEGER\n\
    \   The fields in the key-distribution-period attribute have the\n   following\
    \ semantics:\n      o  The doNotDistBefore field is OPTIONAL, and when it is present,\n\
    \         the keying material SHOULD NOT be distributed before the date\n    \
    \     and time provided.\n      o  The doNotDistAfter field is REQUIRED, and the\
    \ keying material\n         SHOULD NOT be distributed after the date and time\
    \ provided.\n   When the key-distribution-period attribute is associated with\
    \ a\n   collection of keying material, the distribution period applies to all\n\
    \   of the keys in the collection.  None of the keying material in the\n   collection\
    \ SHOULD be distributed outside the indicated period.\n   Due to multiple layers\
    \ of encapsulation or the use of content\n   collections, the key-distribution-period\
    \ attribute can appear in more\n   than one location in the overall key package.\
    \  When there are\n   multiple occurrences of the key-distribution-period attribute\
    \ within\n   the same scope, all of the included attribute fields MUST contain\n\
    \   exactly the same value.  However, if the doNotDistBefore field is\n   absent\
    \ in an inner layer, a value MAY appear in an outer layer\n   because the outer\
    \ layer constrains the inner layer.  Receivers MUST\n   reject any key package\
    \ that fails these consistency checks.\n"
- title: 15.  Key Validity Period
  contents:
  - "15.  Key Validity Period\n   The key-validity-period attribute indicates the\
    \ period of time that\n   the keying material is intended for use.  Time of day\
    \ MUST be\n   represented in Coordinated Universal Time (UTC).  It can appear\
    \ as a\n   symmetric key, symmetric key package, asymmetric key, signed,\n   authenticated,\
    \ authenticated&unprotected, or content attribute.  If\n   the key-validity-period\
    \ attribute appears as a signed, authenticated,\n   authenticated&unprotected,\
    \ or content attribute, then all of the\n   keying material within the content\
    \ MUST have the same key validity\n   period.\n   The key-validity-period attribute\
    \ has the following syntax:\n     aa-keyValidityPeriod ATTRIBUTE ::= {\n     \
    \  TYPE KeyValidityPeriod\n       IDENTIFIED BY id-kma-keyValidityPeriod }\n \
    \    id-kma-keyValidityPeriod OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1) gov(101)\n       dod(2) infosec(1) keying-material-attributes(13)\
    \ 6 }\n     KeyValidityPeriod ::= SEQUENCE {\n       doNotUseBefore      BinaryTime,\n\
    \       doNotUseAfter       BinaryTime OPTIONAL }\n     BinaryTime ::= INTEGER\n\
    \   The fields in the key-validity-period attribute have the following\n   semantics:\n\
    \      o  The doNotUseBefore field is REQUIRED, and the keying material\n    \
    \     SHOULD NOT be used before the date and time provided.\n      o  The doNotUseAfter\
    \ field is OPTIONAL, and when it is present,\n         the keying material SHOULD\
    \ NOT be used after the date and time\n         provided.\n   For a key package\
    \ that is being used for rekey, the doNotUseAfter\n   field MAY be required by\
    \ some templates even though the syntax is\n   OPTIONAL.\n   When the key-validity-period\
    \ attribute is associated with a\n   collection of keying material, the validity\
    \ period applies to all of\n   the keys in the collection.  None of the keying\
    \ material in the\n   collection SHOULD be used outside the indicated period.\n\
    \   The key-validity-period attribute described in this section and the\n   key-duration\
    \ attribute described in the next section provide\n   complementary functions.\
    \  The key-validity-period attribute provides\n   explicit date and time values,\
    \ which indicate the beginning and\n   ending of the keying material usage period.\
    \  The key-duration\n   attribute provides the maximum length of time that the\
    \ keying\n   material SHOULD be used.  If both attributes are provided, this\n\
    \   duration MAY occur at any time within the specified period, but the\n   limits\
    \ imposed by both attributes SHOULD be honored.\n   Due to multiple layers of\
    \ encapsulation or the use of content\n   collections, the key-validity-period\
    \ attribute can appear in more\n   than one location in the overall key package.\
    \  When there are\n   multiple occurrences of the key-validity-period attribute\
    \ within the\n   same scope, all of the included attribute fields MUST contain\
    \ exactly\n   the same value.  However, if the doNotUseAfter field is absent in\
    \ an\n   inner layer, a value MAY appear in an outer layer.  Receivers MUST\n\
    \   reject any key package that fails these consistency checks.\n"
- title: 16.  Key Duration
  contents:
  - "16.  Key Duration\n   The key-duration attribute indicates the maximum period\
    \ of time that\n   the keying material is intended for use.  The date and time\
    \ that the\n   duration begins is not specified, but the maximum amount of time\
    \ that\n   the keying material can be used to provide security services is\n \
    \  specified.  It can appear as a symmetric key, symmetric key package,\n   asymmetric\
    \ key, signed, authenticated, authenticated&unprotected, or\n   content attribute.\
    \  If the key-duration attribute appears as a\n   signed, authenticated, authenticated&unprotected,\
    \ or content\n   attribute, then all of the keying material within the content\
    \ MUST\n   have the same key duration.\n   The key-duration attribute has the\
    \ following syntax:\n     aa-keyDurationPeriod ATTRIBUTE ::= {\n       TYPE KeyDuration\n\
    \       IDENTIFIED BY id-kma-keyDuration }\n     id-kma-keyDuration OBJECT IDENTIFIER\
    \ ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n\
    \       dod(2) infosec(1) keying-material-attributes(13) 7 }\n     KeyDuration\
    \ ::= CHOICE {\n       hours      [0] INTEGER (1..ub-KeyDuration-hours),\n   \
    \    days           INTEGER (1..ub-KeyDuration-days),\n       weeks      [1] INTEGER\
    \ (1..ub-KeyDuration-weeks),\n       months     [2] INTEGER (1..ub-KeyDuration-months),\n\
    \       years      [3] INTEGER (1..ub-KeyDuration-years) }\n     ub-KeyDuration-hours\
    \  INTEGER ::=  96\n     ub-KeyDuration-days   INTEGER ::= 732\n     ub-KeyDuration-weeks\
    \  INTEGER ::= 104\n     ub-KeyDuration-months INTEGER ::=  72\n     ub-KeyDuration-years\
    \  INTEGER ::= 100\n   The key-validity-period attribute described in the previous\
    \ section\n   and the key-duration attribute described in this section provide\
    \ a\n   complementary function.  The relationship between these attributes is\n\
    \   described in the previous section.\n   Due to multiple layers of encapsulation\
    \ or the use of content\n   collections, the key-duration attribute can appear\
    \ in more than one\n   location in the overall key package.  When there are multiple\n\
    \   occurrences of the key-duration attribute within the same scope, all\n   of\
    \ the included attribute fields MUST contain exactly the same value.\n   Receivers\
    \ MUST reject any key package that fails these consistency\n   checks.\n"
- title: 17.  Classification
  contents:
  - "17.  Classification\n   The classification attribute indicates level of classification.\
    \  The\n   classification attribute specifies the aggregate classification of\n\
    \   the package content.  It can appear as a symmetric key, symmetric key\n  \
    \ package, asymmetric key, signed, authenticated,\n   authenticated&unprotected,\
    \ or content attribute.  If the\n   classification attribute appears as a signed,\
    \ authenticated,\n   authenticated&unprotected, or content attribute, then the\
    \ value MUST\n   represent the classification of all of the keying material within\
    \ the\n   content.  Encrypted layers MAY contain content at a higher\n   classification\
    \ that will be revealed once they are decrypted.  If the\n   classification attribute\
    \ is associated with a collection, then the\n   sensitivity of all the data within\
    \ the collection MUST be dominated\n   by the classification carried in this attribute.\n\
    \   The classification attribute makes use of the ESSSecurityLabel\n   defined\
    \ in Section 17.1 as well as [RFC2634] and [RFC5911].  The term\n   \"classification\"\
    \ is used in this document, but the term \"security\n   label\" is used in [RFC2634].\
    \  The two terms have the same meaning.\n   [RFC2634] and [RFC5911] specify an\
    \ object identifier and syntax for\n   the security label attribute.  The same\
    \ values are used for the\n   classification attribute:\n     aa-classificationAttribute\
    \ ATTRIBUTE ::= {\n       TYPE Classification\n       IDENTIFIED BY id-aa-KP-classification\
    \ }\n     id-aa-KP-classification OBJECT IDENTIFIER ::= id-aa-securityLabel\n\
    \     -- id-aa-securityLabel OBJECT IDENTIFIER ::= {\n     --  iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1)\n     --   pkcs-9(9) smime(16) id-aa(2) 2 }\n\
    \     Classification ::= ESSSecurityLabel\n   The syntax of ESSSecurityLabel is\
    \ not repeated here; however, see\n   Section 17.1 for security label conventions\
    \ that MUST be followed by\n   implementations of this specification.  See [RFC2634]\
    \ for a complete\n   discussion of the semantics and syntax.\n   When the classification\
    \ attribute appears in more than one location\n   in the overall key package,\
    \ each occurrence is evaluated\n   independently.  The content originator MUST\
    \ ensure that the\n   classification attribute represents the sensitivity of the\
    \ plaintext\n   within the content.  That is, the classification MUST dominate\
    \ any\n   other plaintext classification attribute value that is present\n   elsewhere\
    \ in the overall key package.  Note that the classification\n   attribute value\
    \ may exceed these other plaintext classification\n   attribute values if the\
    \ other attribute values within the SignerInfo,\n   AuthEnvelopedData, or AuthenticatedData\
    \ are themselves classified and\n   warrant the higher-security label value.\n\
    \   When the classification attribute appears in more than one location\n   in\
    \ the overall key package, each security label might be associated\n   with a\
    \ different security policy.  Content originators SHOULD avoid\n   mixing multiple\
    \ security policies in the same key package whenever\n   possible, since this\
    \ requires that receivers and intermediaries that\n   check the classification\
    \ attribute values include support for the\n   union of the security policies\
    \ that are present.  Failure to\n   recognize an included security policy MUST\
    \ result in rejection of the\n   key package.\n   Receivers MUST reject any key\
    \ package that includes a classification\n   for which the receiver's processing\
    \ environment is not authorized.\n"
- title: 17.1.  Security Label
  contents:
  - "17.1.  Security Label\n   The ESSSecurityLabel ASN.1 type is used to represent\
    \ the\n   classification.  The ESSSecurityLabel is defined in Section 3.2 of\n\
    \   [RFC2634].  The syntax definition is repeated here to facilitate\n   discussion:\n\
    \     ESSSecurityLabel ::= SET {\n       security-policy-identifier SecurityPolicyIdentifier,\n\
    \       security-classification    SecurityClassification OPTIONAL,\n       privacy-mark\
    \               ESSPrivacyMark OPTIONAL,\n       security-categories        SecurityCategories\
    \ OPTIONAL }\n     ESSPrivacyMark ::= CHOICE {\n       pString      PrintableString\
    \ (SIZE (1..ub-privacy-mark-length)),\n       utf8String   UTF8String (SIZE (1..MAX))\
    \ }\n   A security policy is a set of criteria for the provision of security\n\
    \   services.  The security-policy-identifier, which is an object\n   identifier,\
    \ is used to identify the security policy associated with\n   the security label.\
    \  It indicates the semantics of the other security\n   label components.\n  \
    \ If the key package receiver does not recognize the object identifier\n   in\
    \ the security-policy-identifier field and the security label\n   includes a security-categories\
    \ field, then the key package contents\n   MUST NOT be accepted and the enclosed\
    \ keying material MUST NOT be\n   used.  If the key package receiver does not\
    \ recognize the object\n   identifier in the security-policy-identifier field\
    \ and the security\n   label does not include a security-categories field, then\
    \ the key\n   package contents MAY be accepted only if the security-classification\n\
    \   field is present and it contains a value from the basic hierarchy as\n   described\
    \ below.\n   This specification defines the use of the SecurityClassification\n\
    \   field exactly as is it specified in the 1988 edition of ITU-T\n   Recommendation\
    \ X.411 [X.411], which states in part:\n      If present, a security-classification\
    \ may have one of a\n      hierarchical list of values.  The basic security-classification\n\
    \      hierarchy is defined in this Recommendation, but the use of these\n   \
    \   values is defined by the security-policy in force.  Additional\n      values\
    \ of security-classification, and their position in the\n      hierarchy, may\
    \ also be defined by a security-policy as a local\n      matter or by bilateral\
    \ agreement.  The basic security-\n      classification hierarchy is, in ascending\
    \ order: unmarked,\n      unclassified, restricted, confidential, secret, top-secret.\n\
    \   Implementations MUST support the basic security classification\n   hierarchy.\
    \  Such implementations MAY also support other security-\n   classification values;\
    \ however, the placement of additional values in\n   the hierarchy MUST be specified\
    \ by the security policy.\n   Implementations MUST NOT make access control decisions\
    \ based on the\n   privacy-mark.  However, information in the privacy-mark can\
    \ be\n   displayed to human users by devices that have displays to do so.  The\n\
    \   privacy-mark length MUST NOT exceed 128 characters.  The privacy-mark\n  \
    \ SHALL use the PrintableString choice if all of the characters in the\n   privacy-mark\
    \ are members of the printable string character set.\n   If present, security-categories\
    \ provide further granularity for the\n   keying material.  The security policy\
    \ in force indicates the\n   permitted syntaxes of any entries in the set of security\
    \ categories.\n   At most, 64 security categories may be present.  The security-\n\
    \   categories have ASN.1 type SecurityCategories and further\n   SecurityCategory\
    \ [RFC5912], which are both repeated here to\n   facilitate discussion:\n    \
    \ SecurityCategories ::= SET SIZE (1..ub-security-categories) OF\n           \
    \                   SecurityCategory\n                                {{SupportedSecurityCategories}}\n\
    \     SecurityCategory {SECURITY-CATEGORY:Supported} ::= SEQUENCE {\n        \
    \ type      [0]  IMPLICIT SECURITY-CATEGORY.\n                          &id({Supported}),\n\
    \         value     [1]  EXPLICIT SECURITY-CATEGORY.\n                       \
    \   &Type({Supported}{@type})\n     }\n   Four security categories are defined\
    \ and are referred to as the\n   Restrictive Tag, the Enumerated Tag, the Permissive\
    \ Tag, and the\n   Informative Tag.  Only the Enumerated Tag and Informative Tag\
    \ are\n   permitted in the classification attribute.\n   The Enumerated Tag is\
    \ composed of one or more non-negative integers.\n   Each non-negative integer\
    \ represents a non-hierarchical security\n   attribute that applies to the labeled\
    \ content.  A security policy\n   might define a large set of security categories\
    \ attributes, but a\n   particular key package generally contains only a few security\n\
    \   categories attributes.  In this case, use of the integer\n   representation\
    \ is intended to minimize the size of the label.\n   Security attributes enumerated\
    \ by tags of this type could be\n   restrictive (such as compartments) or permissive\
    \ (such as release\n   permissions).  Two object identifiers for the SecurityCategory\
    \ type\n   field have been defined, one for restrictive and one for permissive.\n\
    \   The object identifiers are:\n     id-enumeratedRestrictiveAttributes OBJECT\
    \ IDENTIFIER ::= {\n       2 16 840 1 101 2 1 8 3 4 }\n     id-enumeratedPermissiveAttributes\
    \ OBJECT IDENTIFIER ::= {\n       2 16 840 1 101 2 1 8 3 1 }\n   With both the\
    \ restrictive and permissive security category types, the\n   corresponding SecurityCategory\
    \ value has the following ASN.1\n   definition:\n     EnumeratedTag ::= SEQUENCE\
    \ {\n       tagName          OBJECT IDENTIFIER,\n       attributeList    SET OF\
    \ SecurityAttribute }\n     SecurityAttribute ::= INTEGER (0..MAX)\n   Any security\
    \ policy that makes use of security categories MUST assign\n   object identifiers\
    \ for each tagName, assign the set of integer values\n   associated with each\
    \ tagName, and specify the semantic meaning for\n   each integer value.  Restrictive\
    \ security attributes and permissive\n   security attributes SHOULD be associated\
    \ with different tagName\n   object identifiers.\n   The Informative Tag is composed\
    \ of either a) one or more non-negative\n   integers or b) a bit string.  Only\
    \ the integer choice is allowed in\n   this specification.  Each non-negative\
    \ integer represents a non-\n   hierarchical security attribute that applies to\
    \ the labeled content.\n   Use of the integer representation is intended to minimize\
    \ the size of\n   the label since a particular key package generally contains\
    \ only a\n   few security categories attributes, even though a security policy\n\
    \   might define a large set of security categories attributes.  Security\n  \
    \ attributes enumerated by tags of this type are informative (i.e., no\n   access\
    \ control is performed).  One object identifier for the\n   SecurityCategory type\
    \ field has been defined and is as follows:\n     id-informativeAttributes OBJECT\
    \ IDENTIFIER ::= {\n       2 16 840 1 101 2 1 8 3 3 }\n   The corresponding SecurityCategory\
    \ value has the following ASN.1\n   definition:\n     InformativeTag ::= SEQUENCE\
    \ {\n       tagName     OBJECT IDENTIFIER,\n       attributes  FreeFormField }\n\
    \     FreeFormField ::= CHOICE {\n       bitSetAttributes    BIT STRING,\n   \
    \    securityAttributes  SET OF SecurityAttribute }\n   Any security policy that\
    \ makes use of security categories MUST assign\n   object identifiers for each\
    \ tagName, assign the set of integer values\n   associated with each tagName,\
    \ and specify the semantic meaning for\n   each integer value.\n"
- title: 18.  Split Identifier
  contents:
  - "18.  Split Identifier\n   The key package originator may include a split-identifier\
    \ attribute\n   to designate that the keying material contains a split rather\
    \ than a\n   complete key.  It may appear as a symmetric and asymmetric key\n\
    \   attribute.  The split-identifier attribute MUST NOT appear as a\n   symmetric\
    \ key package, signed, authenticated,\n   authenticated&unprotected, or content\
    \ attribute.  Split keys have two\n   halves, which are called \"A\" and \"B\"\
    .  The split-identifier attribute\n   indicates which half is included in the\
    \ key package, and it\n   optionally indicates the algorithm that is needed to\
    \ combine the two\n   halves.  The combine algorithm is OPTIONAL since each key\
    \ algorithm\n   has a default mechanism for this purpose, and the combine algorithm\n\
    \   is present only if the default mechanism is not employed.\n   The split-identifier\
    \ attribute has the following syntax:\n     aa-splitIdentifier ATTRIBUTE ::= {\n\
    \       TYPE SplitID\n       IDENTIFIED BY id-kma-splitID }\n     id-kma-splitID\
    \ OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 11 }\n   \
    \  SplitID ::= SEQUENCE {\n       ENUMERATED { a(0), b(1) },\n       combineAlg\
    \  AlgorithmIdentifier\n                   {COMBINE-ALGORITHM, {CombineAlgorithms}}\
    \ OPTIONAL }\n   In most cases, the default combine algorithm will be employed;\
    \ it\n   makes this attribute a simple constant that identifies either the \"\
    A\"\n   or \"B\" half of the split key.  This supports implementation of some\n\
    \   key distribution policies.\n   Note that each split might have its own CRC,\
    \ but the key and the\n   check word are both recovered when the two splits are\
    \ combined.\n   Since the split-identifier attribute MUST NOT appear as a signed,\n\
    \   authenticated, authenticated&unprotected, or content attribute, a key\n  \
    \ package cannot include multiple occurrences of the split-identifier\n   attribute\
    \ within the same scope.  Receivers MUST reject any key\n   package in which the\
    \ split-identifier attribute appears as a signed,\n   authenticated, authenticated&unprotected,\
    \ or content attribute.\n"
- title: 19.  Key Package Type
  contents:
  - "19.  Key Package Type\n   The key-package-type attribute is a shorthand method\
    \ for specifying\n   all aspects of the key package format, including which attributes\
    \ are\n   present and the structure of the encapsulated content or collection.\n\
    \   The key-package-type attribute can be used as a signed,\n   authenticated,\
    \ authenticated&unprotected, or content attribute.\n   Rather than implementing\
    \ the full flexibility of this specification,\n   some devices may implement support\
    \ for one or more specific key\n   package formats instantiating this specification.\
    \  Those specific\n   formats are called templates and can be identified using\
    \ a key-\n   package-type attribute.\n   The key-package-type attribute has the\
    \ following syntax:\n     aa-keyPackageType ATTRIBUTE ::= {\n       TYPE KeyPkgType\n\
    \       IDENTIFIED BY id-kma-keyPkgType }\n     id-kma-keyPkgType OBJECT IDENTIFIER\
    \ ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n\
    \       dod(2) infosec(1) keying-material-attributes(13) 12 }\n     KeyPkgType\
    \ ::= OBJECT IDENTIFIER\n   Due to multiple layers of encapsulation or the use\
    \ of content\n   collections, the key-package-type attribute can appear in more\
    \ than\n   one location in the overall key package.  When that happens, each\n\
    \   occurrence is used independently.  Since the receiver is likely to\n   use\
    \ the key-package-type attribute value as a decoding aid, any error\n   will most\
    \ likely lead to parsing problems, and these problems could\n   result in many\
    \ different errors being reported.\n"
- title: 20.  Signature Usage
  contents:
  - "20.  Signature Usage\n   The signature-usage attribute identifies the CMS content\
    \ types that\n   this key can be used to sign, or that are permitted to be signed\
    \ by\n   the end-entity key in a cert path validated by this key.  Symmetric\n\
    \   key packages do not contain signature generation or signature\n   validation\
    \ keying material, so the signature-usage attribute MUST NOT\n   appear in a symmetric\
    \ key package.  For an asymmetric key package,\n   the signature-usage attribute\
    \ indicates the kind of objects that are\n   to be signed with the private key\
    \ in the package.  However, if the\n   asymmetric key package contains a Certificate\
    \ Signature Key, then the\n   signature-usage attribute also indicates what signed\
    \ objects can be\n   validated using certificates that are signed by the private\
    \ key in\n   the asymmetric key package.  Therefore, the signature-usage attribute\n\
    \   also indicates what kind of objects can be signed by the private keys\n  \
    \ associated with these certificates.  The signature-usage attribute\n   MUST\
    \ NOT appear as a signed, authenticated,\n   authenticated&unprotected, or content\
    \ attribute.\n   The signature-usage attribute has the following syntax:\n   \
    \  aa-signatureUsage-v3 ATTRIBUTE ::= {\n       TYPE SignatureUsage\n       IDENTIFIED\
    \ BY id-kma-sigUsageV3 }\n     id-kma-sigUsageV3 OBJECT IDENTIFIER ::= {\n   \
    \    joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n       dod(2)\
    \ infosec(1) keying-material-attributes(13) 22 }\n     SignatureUsage ::= CMSContentConstraints\n\
    \   The SignatureUsage structure has the same syntax as the\n   CMSContentConstraints\
    \ structure from [RFC6010], and it is repeated\n   here for convenience.\n   \
    \  CMSContentConstraints ::= SEQUENCE SIZE (1..MAX) OF\n                     \
    \           ContentTypeConstraint\n     ContentTypeGeneration ::= ENUMERATED \
    \ {\n       canSource(0),\n       cannotSource(1)}\n     ContentTypeConstraint\
    \ ::= SEQUENCE {\n       contentType      CONTENT-TYPE.&id ({ContentSet|ct-Any,...}),\n\
    \       canSource        ContentTypeGeneration DEFAULT canSource,\n       attrConstraints\
    \  AttrConstraintList OPTIONAL }\n     Constraint { ATTRIBUTE:ConstraintList }\
    \ ::= SEQUENCE {\n       attrType    ATTRIBUTE.&id({ConstraintList}),\n      \
    \ attrValues  SET SIZE (1..MAX) OF ATTRIBUTE.\n                     &Type({ConstraintList}{@attrType})\
    \  }\n     SupportedConstraints ATTRIBUTE ::= {SignedAttributesSet, ... }\n  \
    \   AttrConstraintList ::= SEQUENCE SIZE (1..MAX) OF\n                       \
    \     Constraint {{ SupportedConstraints }}\n     NOTE: SignedAttributesSet is\
    \ updated by this specification.\n   The SignatureUsage contains a type of CMSContentConstraints.\
    \  One or\n   more ContentTypeConstraint MUST appear in CMSContentConstraints.\n\
    \   Within ContentTypeConstraint, the contentType field indicates the\n   encapsulated\
    \ content type identifier that can be signed with the\n   signature key.  A particular\
    \ content type MUST NOT appear more than\n   once in the list.  The CMS protecting\
    \ content types need not be\n   included in the list of permitted content types\
    \ as the use of CMS is\n   always authorized (see [RFC6010]).\n   Within ContentTypeConstraint,\
    \ the canSource enumeration indicates\n   whether the signature key can be used\
    \ to directly sign the indicated\n   content type.  If the ContentTypeConstraint\
    \ is canSource (the default\n   value), then the signature key can be used to\
    \ directly sign the\n   specified content type.  If the ContentTypeConstraint\
    \ is\n   cannotSource, then the signature key can only be used with the\n   specified\
    \ content type if it encapsulates a signature that was\n   generated by an originator\
    \ with a ContentTypeConstraint that is\n   canSource.\n   Within ContentTypeList,\
    \ the attrConstraints OPTIONAL field contains a\n   sequence of constraints specific\
    \ to the content type.  If the\n   attrConstraints field is absent, the signature\
    \ key can be used to\n   sign the specified content type, without any further\
    \ checking.  If\n   the attrConstraints field is present, then the signature key\
    \ can only\n   be used to sign the specified content type if all of the constraints\n\
    \   for that content type are satisfied.  Content type constraints are\n   checked\
    \ by matching the attribute values in the attrConstraint field\n   against the\
    \ attribute value in the content.  The constraints succeed\n   if the attribute\
    \ is not present; they fail if the attribute is\n   present and the value is not\
    \ one of the values provided in\n   attrConstraint.\n   The fields of attrConstraints\
    \ implement constraints specific to the\n   content type.  The attrType field\
    \ is an AttributeType, which is an\n   object identifier of a signed attribute\
    \ carried in the SignerInfo of\n   the content.  The attrValues field provides\
    \ one or more acceptable\n   signed attribute values.  It is a set of AttributeValue.\
    \  For a\n   signed content to satisfy the constraint, the SignerInfo MUST include\n\
    \   a signed attribute of the type identified in the attrType field, and\n   the\
    \ signed attribute MUST contain one of the values in the set\n   carried in attrValues.\n\
    \   Since the signature-usage attribute MUST NOT appear as a signed,\n   authenticated,\
    \ authenticated&unprotected, or content attribute, an\n   asymmetric key package\
    \ cannot include multiple occurrences of the\n   signature-usage attribute within\
    \ the same scope.  Receivers MUST\n   reject any asymmetric key package in which\
    \ the signature-usage\n   attribute appears as a signed, authenticated,\n   authenticated&unprotected,\
    \ or content attribute.\n"
- title: 21.  Other Certificate Format
  contents:
  - "21.  Other Certificate Format\n   The other-certificate-formats attribute specifies\
    \ the type, format,\n   and value of certificates that are not X.509 public key\
    \ certificates.\n   Symmetric key packages do not contain any certificates, so\
    \ the other-\n   certificate-formats attribute MUST NOT appear in a symmetric\
    \ key\n   package.  It SHOULD appear in the attributes field, when the\n   publicKey\
    \ field is absent and the certificate format is not X.509.\n   This attribute\
    \ MUST NOT appear in an attributes field that includes\n   the user-certificate\
    \ attribute from Section 8.  The other-\n   certificate-formats attribute MUST\
    \ NOT appear as a signed,\n   authenticated, authenticated&unprotected, or content\
    \ attribute.\n   The other-certificate-formats attribute has the following syntax:\n\
    \     aa-otherCertificateFormats ATTRIBUTE ::= {\n       TYPE CertificateChoices\n\
    \       IDENTIFIED BY id-kma-otherCertFormats }\n     id-kma-otherCertFormats\
    \ OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 19 }\n   \
    \  CertificateChoices ::= CHOICE {\n       certificate             Certificate,\n\
    \       extendedCertificate [0] IMPLICIT ExtendedCertificate,\n              \
    \                          -- Obsolete\n       v1AttrCert          [1] IMPLICIT\
    \ AttributeCertificateV1,\n                                        -- Obsolete\n\
    \       v2AttrCert          [2] IMPLICIT AttributeCertificateV2,\n       other\
    \               [3] IMPLICIT OtherCertificateFormat }\n     OtherCertificateFormat\
    \ ::= SEQUENCE {\n       otherCertFormat           OBJECT IDENTIFIER,\n      \
    \ otherCert ANY DEFINED BY  otherCertFormat }\n   The other-certificate-formats\
    \ attribute makes use of the\n   CertificateChoices field defined in Section 10.2.2\
    \ of [RFC5652].  The\n   certificate, extendedCertificate, and v1AttrCert fields\
    \ MUST be\n   omitted.  The v2AttrCert field can include Version 2 Attribute\n\
    \   Certificates.  The other field can include Enhanced FIREFLY\n   certificates\
    \ and other as yet undefined certificate formats.\n   Since the other-certificate-formats\
    \ attribute MUST NOT appear as a\n   signed, authenticated, authenticated&unprotected,\
    \ or content\n   attribute, an asymmetric key package cannot include multiple\n\
    \   occurrences of the other-certificate-formats attribute within the\n   same\
    \ scope.  Receivers MUST reject any asymmetric key package in\n   which the other-certificate-formats\
    \ attribute appears as a signed,\n   authenticated, authenticated&unprotected,\
    \ or content attribute.\n"
- title: 22.  PKI Path
  contents:
  - "22.  PKI Path\n   The pki-path attribute includes certificates that can aid in\
    \ the\n   validation of the certificate carried in the user-certificate\n   attribute.\
    \  Symmetric key packages do not contain any certificates,\n   so the pkiPath\
    \ attribute MUST NOT appear in a symmetric key package.\n   It can appear as an\
    \ asymmetric key, signed, authenticated,\n   authenticated&unprotected, or content\
    \ attribute.  It can appear in\n   the attributes field, when the publicKey field\
    \ is absent and the\n   certificate format is X.509.  This attribute MUST NOT\
    \ appear in an\n   AsymmetricKeyPackage that has an other-certificate-formats\
    \ attribute\n   in the attributes field.  If the pki-path attribute appears as\
    \ a\n   signed, authenticated, authenticated&unprotected, or content\n   attribute,\
    \ then the value includes certificates that can be used to\n   construct a certification\
    \ path to all of the keying material within\n   the content.  This attribute MUST\
    \ be supported.\n   The syntax is taken from [X.509] but redefined using the ATTRIBUTE\n\
    \   CLASS from [RFC5912].  The pki-path attribute has the following\n   syntax:\n\
    \     aa-pkiPath ATTRIBUTE ::= {\n       TYPE PkiPath\n       IDENTIFIED BY id-at-pkiPath\
    \ }\n     id-at-pkiPath OBJECT IDENTIFIER ::= {\n      joint-iso-itu-t(2) ds(5)\
    \ attributes(4) 70 }\n     PkiPath ::= SEQUENCE SIZE (1..MAX) OF Certificate\n\
    \   The first certificate in the sequence is the subject's parent\n   Certification\
    \ Authority (CA).  The next certificate is that CA's\n   parent, and so on.  The\
    \ end-entity and trust anchor are not included\n   in this attribute.\n   Due\
    \ to multiple layers of encapsulation or the use of content\n   collections, the\
    \ pki-path attribute can appear in more than one\n   location in the overall key\
    \ package.  When that happens, each\n   occurrence is evaluated independently.\n"
- title: 23.  Useful Certificates
  contents:
  - "23.  Useful Certificates\n   The useful-certificates attribute includes certificates\
    \ that can aid\n   in the validation of certificates associated with other parties\
    \ with\n   whom secure communications are anticipated.  It can appear as an\n\
    \   asymmetric key, signed, authenticated, authenticated&unprotected, or\n   content\
    \ attribute.  For an asymmetric key that has an other-\n   certificate-formats\
    \ attribute (Section 21) in the attributes field,\n   the useful-certificates\
    \ attribute MUST NOT appear.  If the useful-\n   certificates attribute appears\
    \ as a signed, authenticated,\n   authenticated&unprotected, or content attribute,\
    \ then the value\n   includes certificates that may be used to validate certificates\
    \ of\n   others with whom the receiver communicates.  This attribute MUST be\n\
    \   supported.\n   The useful-certificates attribute has the following syntax:\n\
    \     aa-usefulCertificates ATTRIBUTE ::= {\n       TYPE CertificateSet\n    \
    \   IDENTIFIED BY id-kma-usefulCerts }\n     id-kma-usefulCerts OBJECT IDENTIFIER\
    \ ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n\
    \       dod(2) infosec(1) keying-material-attributes(13) 20 }\n     CertificateSet\
    \ ::= SET OF CertificateChoices\n   The useful-certificates attribute makes use\
    \ of the CertificateSet\n   field defined in Section 10.2.3 of [RFC5652].  Within\
    \ the\n   CertificateChoices field, the extendedCertificate and v1AttrCert\n \
    \  fields MUST always be omitted.  If the userCertificate attribute from\n   Section\
    \ 8 is included, the other field MUST NOT be present.  If the\n   other-certificate-formats\
    \ attribute (Section 21) is included, the\n   certificate field MUST NOT be present.\n\
    \   Due to multiple layers of encapsulation or the use of content\n   collections,\
    \ the useful-certificates attribute can appear in more\n   than one location in\
    \ the overall key package.  When the useful-\n   certificates attribute appears\
    \ in more than one location in the\n   overall key package, each occurrence is\
    \ evaluated independently.\n"
- title: 24.  Key Wrap Algorithm
  contents:
  - "24.  Key Wrap Algorithm\n   The key-wrap-algorithm attribute identifies a key\
    \ wrap algorithm with\n   an algorithm identifier.  It can appear as a symmetric\
    \ key or\n   symmetric key package attribute.  When this attribute is present\
    \ in\n   sKeyAttrs, it indicates that the associated sKey field contains a\n \
    \  black key, which is an encrypted key, that was wrapped by the\n   identified\
    \ algorithm.  When this attribute is present in\n   sKeyPkgAttrs, it indicates\
    \ that every sKey field in that symmetric\n   key package contains a black key\
    \ and that all keys are wrapped by the\n   same designated algorithm.\n   The\
    \ key-wrap-algorithm attribute has the following syntax:\n     aa-keyWrapAlgorithm\
    \ ATTRIBUTE ::= {\n       TYPE AlgorithmIdentifier{KEY-WRAP, {KeyEncryptionAlgorithmSet}}\n\
    \       IDENTIFIED BY id-kma-keyWrapAlgorithm }\n     id-kma-keyWrapAlgorithm\
    \ OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 21 }\n   \
    \  KeyEncryptionAlgorithmSet KEY-WRAP ::= { ... }\n"
- title: 25.  Content Decryption Key Identifier
  contents:
  - "25.  Content Decryption Key Identifier\n   The content-decryption-key-identifier\
    \ attribute can appear as an\n   unprotected attribute as well as a symmetric\
    \ and symmetric key\n   package attribute.  The attribute's semantics differ based\
    \ on the\n   location.\n"
- title: '25.1.  Content Decryption Key Identifier: Symmetric Key and Symmetric'
  contents:
  - "25.1.  Content Decryption Key Identifier: Symmetric Key and Symmetric\n     \
    \  Key Package\n   The content-decryption-key-identifier attribute [RFC6032] identifies\n\
    \   the keying material needed to decrypt the sKey.  It can appear as a\n   symmetric\
    \ key and symmetric key package attribute.  If the key-wrap-\n   algorithm attribute\
    \ appears in sKeyPkgAttrs, then the corresponding\n   content-decryption-identifier\
    \ attribute can appear in either\n   sKeyPkgAttrs or sKeyAttrs.  If the key-wrap-algorithm\
    \ attribute\n   (Section 24) appears in sKeyAttrs, then the corresponding content-\n\
    \   decryption-identifier attribute MUST appear in sKeyAttrs.\n   The content-decryption-key-identifier\
    \ attribute in included for\n   convenience:\n     aa-contentDecryptKeyIdentifier\
    \ ATTRIBUTE ::= {\n       TYPE ContentDecryptKeyID\n       IDENTIFIED BY id-aa-KP-contentDecryptKeyID\
    \ }\n     id-aa-KP-contentDecryptKeyID OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1) gov(101)\n       dod(2) infosec(1) attributes(5)\
    \ 66 }\n     ContentDecryptKeyID ::= OCTET STRING\n   The content decryption key\
    \ identifier contains an octet string, and\n   this syntax does not impose any\
    \ particular structure on the\n   identifier value.\n"
- title: '25.2.  Content Decryption Key Identifier: Unprotected'
  contents:
  - "25.2.  Content Decryption Key Identifier: Unprotected\n   The content-decryption-key-identifier\
    \ attribute can be used to\n   identify the keying material that is needed for\
    \ decryption of the\n   EncryptedData content if there is any ambiguity.\n   The\
    \ content-decryption-key-identifier attribute syntax is found in\n   Section 25.1.\
    \  The content decryption key identifier contains an\n   octet string, and this\
    \ syntax does not impose any particular\n   structure on the identifier value.\n\
    \   Due to multiple layers of encryption, the content-decryption-key-\n   identifier\
    \ attribute can appear in more than one location in the\n   overall key package.\
    \  When that happens, each occurrence is evaluated\n   independently.  Each one\
    \ is used to identify the needed keying\n   material for that layer of encryption.\n"
- title: 26.  Certificate Pointers
  contents:
  - "26.  Certificate Pointers\n   The certificate-pointers attribute can be used\
    \ to reference one or\n   more certificates that may be helpful in the processing\
    \ of the\n   content once it is decrypted.  Sometimes certificates are omitted\
    \ if\n   they can be easily fetched.  However, an intermediary may have better\n\
    \   facilities to perform the fetching than the receiver.  The\n   certificate-pointers\
    \ attribute may be useful in some environments.\n   This attribute can appear\
    \ as an unprotected and an\n   unauthenticated&unprotected attribute.\n   The\
    \ certificate-pointers attribute uses the same syntax and semantics\n   as the\
    \ subject information access certificate extension [RFC5280].\n   The certificate-pointers\
    \ attribute has the following syntax:\n     aa-certificatePointers ATTRIBUTE ::=\
    \ {\n       TYPE SubjectInfoAccessSyntax\n       IDENTIFIED BY id-pe-subjectInfoAccess\
    \ }\n     id-pe-subjectInfoAccess OBJECT IDENTIFIER ::= {\n       iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n       security(5) mechanisms(5) pkix(7) pe(1) 11 }\n  \
    \   SubjectInfoAccessSyntax ::= SEQUENCE SIZE (1..MAX) OF\n                  \
    \                 AccessDescription\n     AccessDescription ::= SEQUENCE {\n \
    \      accessMethod       OBJECT IDENTIFIER,\n       accessLocation     GeneralName\
    \ }\n   As specified in [RFC5280], the id-ad-caRepository access method can\n\
    \   be used to point to a repository where a Certification Authority\n   publishes\
    \ certificates and Certificate Revocation Lists (CRLs).  In\n   this case, the\
    \ accessLocation field tells how to access the\n   repository.  Where the information\
    \ is available via HTTP, FTP, or the\n   Lightweight Directory Access Protocol\
    \ (LDAP), accessLocation contains\n   a Uniform Resource Identifier (URI).  Where\
    \ the information is\n   available via the Directory Access Protocol (DAP), accessLocation\n\
    \   contains a directory name.\n"
- title: 27.  CRL Pointers
  contents:
  - "27.  CRL Pointers\n   The CRL-pointers attribute can be used to reference one\
    \ or more CRLs\n   that may be helpful in the processing of the content once it\
    \ is\n   decrypted.  Sometimes CRLs are omitted to conserve space or to ensure\n\
    \   that the most recent CRL is obtained when the certificate is\n   validated.\
    \  However, an intermediary may have better facilities to\n   perform the fetching\
    \ than the receiver.  The CRL-pointers attribute\n   may be useful in some environments.\
    \  This attribute can appear as an\n   unprotected and unauthenticated&unprotected\
    \ attribute.\n   The CRL-pointers attribute has the following syntax:\n     aa-crlPointers\
    \ ATTRIBUTE ::= {\n       TYPE GeneralNames\n       IDENTIFIED BY id-aa-KP-crlPointers\
    \ }\n     id-aa-KP-crlPointers OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1) gov(101)\n       dod(2) infosec(1) attributes(5)\
    \ 70 }\n   The CRL-pointers attribute uses the GeneralNames syntax from\n   [RFC5280].\
    \  Each name describes a different mechanism to obtain the\n   same CRL.  Where\
    \ the information is available via HTTP, FTP, or LDAP,\n   GeneralNames contains\
    \ a URI.  Where the information is available via\n   DAP, GeneralNames contains\
    \ a directory name.\n"
- title: 28.  Key Package Identifier and Receipt Request
  contents:
  - "28.  Key Package Identifier and Receipt Request\n   The key-package-identifier-and-receipt-request\
    \ attribute from\n   [RFC7191] is also supported.  It can appear as a signed attribute,\n\
    \   authenticated, authenticated&unprotected, or content attribute.\n"
- title: 29.  Additional Error Codes
  contents:
  - "29.  Additional Error Codes\n   This specification also defines three additional\
    \ extended\n   ErrorCodeChoice object identifiers for the oid field [RFC7191]:\n\
    \     id-errorCodes OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2) country(16)\
    \ us(840) organization(1) gov(101)\n       dod(2) infosec(1) errorCodes(22) }\n\
    \     id-missingKeyType OBJECT IDENTIFIER ::= {\n       id-errorCodes 1 }\n  \
    \   id-privacyMarkTooLong OBJECT IDENTIFIER ::= {\n       id-errorCodes 2 }\n\
    \     id-unrecognizedSecurityPolicy OBJECT IDENTIFIER ::= {\n       id-errorCodes\
    \ 3 }\n     id-incorrectKeyProvince OBJECT IDENTIFIER ::= {\n       id-errorCodes\
    \ 4 }\n   missingKeyType indicates that all keying material within a package is\n\
    \   of the same type; however, the key-package-type attribute is not\n   specified\
    \ in sKeyPkgAttrs [RFC6031].\n   privacyMarkTooLong indicates that a classification\
    \ attribute includes\n   a privacy-mark that exceeds 128 characters in length.\n\
    \   unrecognizedSecurityPolicy indicates that a security-policy-\n   identifier\
    \ is not supported.\n   incorrectKeyProvince indicates that the value of the key-province-v2\n\
    \   attribute in a key package does not match the key province constraint\n  \
    \ of the trust anchor used to validate the key package.\n"
- title: 30.  Processing Key Package Attribute Values and CMS Content Constraints
  contents:
  - "30.  Processing Key Package Attribute Values and CMS Content Constraints\n  \
    \ Trust anchors may contain constraints for any content type [RFC5934].\n   When\
    \ the trust anchor contains constraints for the symmetric key\n   package content\
    \ type or the asymmetric key package content type, then\n   the constraints provide\
    \ default values for key package attributes\n   that are not present in the key\
    \ package and define the set of\n   acceptable values for key package attributes\
    \ that are present.\n   When a trust anchor delegates authority by issuing an\
    \ X.509\n   certificate, the CMS content constraints certificate extension\n \
    \  [RFC6010] may be included to constrain the authorizations.  The trust\n   anchor\
    \ and the X.509 certification path provide default values for\n   key package\
    \ attributes that are not present in the key package and\n   define the set of\
    \ acceptable of values for key package attributes\n   that are present.\n   Constraints\
    \ on content type usage are represented as attributes.\n   The processing procedures\
    \ for the CMS content constraints certificate\n   extension [RFC6010] are part\
    \ of the validation of a signed or\n   authenticated object, and the procedures\
    \ yield three output values:\n   cms_constraints, cms_effective_attributes, and\n\
    \   cms_default_attributes.  Object validation MUST be performed before\n   processing\
    \ the key package contents, and these output values are used\n   as part of key\
    \ package processing.  These same output values are\n   easily generated directly\
    \ from a trust anchor and the key package\n   when no X.509 certification path\
    \ is involved in validation.\n   The cms_effective_attributes provides the set\
    \ of acceptable values\n   for attributes.  Each attribute present in the key\
    \ package that\n   corresponds to an entry in cms_effective_attributes MUST contain\
    \ a\n   value that appears in cms_effective_attributes entry.  Attributes\n  \
    \ that do not correspond to an entry in cms_effective_attributes are\n   unconstrained\
    \ and may contain any value.  Correspondence between\n   attributes and cms_effective_attributes\
    \ is determined by comparing\n   the attribute object identifier to object identifier\
    \ for each entry\n   in cms_effective_attributes.\n   The cms_default_attributes\
    \ provides values for attributes that do not\n   appear in the key package.  If\
    \ cms_default_attributes includes only\n   one attribute value for a particular\
    \ attribute, then that value is\n   used as if it were included in the key package\
    \ itself.  However, if\n   cms_default_attributes includes more than one value\
    \ for a particular\n   attribute, then the appropriate value remains ambiguous\
    \ and the key\n   package should be rejected.\n   Some attributes can appear in\
    \ more than one place in the key package,\n   and for this reason, the attribute\
    \ definitions include consistency\n   checks.  These checks are independent of\
    \ constraints checking.  In\n   addition to the consistency checks, each instance\
    \ of the attribute\n   MUST be checked against the set of cms_effective_attributes,\
    \ and the\n   key package MUST be rejected if any of the attributes values are\
    \ not\n   in the set of authorized set of values.\n"
- title: 31.  Attribute Scope
  contents:
  - "31.  Attribute Scope\n   This section provides an example symmetric key package\
    \ in order to\n   provide a discussion of the scope of attributes.  This is an\n\
    \   informative section; it is not a normative portion of this\n   specification.\
    \  Figure 1 provides the example.  All of the concepts\n   apply to either a symmetric\
    \ key package or an asymmetric key package,\n   with the exception of the key-algorithm\
    \ attribute, which is only\n   applicable to a symmetric key package.  Each of\
    \ the components is\n   labeled with a number inside parentheses for easy reference:\n\
    \      (1) is the ContentInfo that must be present as the outermost layer\n  \
    \        of encapsulation.  It contains no attributes.  It is shown for\n    \
    \      completeness.\n      (2) is a SignedData content type, which includes six\
    \ signed\n          attributes.  Four of the signed attributes are keying material\n\
    \          attributes.\n      (3) is a ContentCollection that includes two encapsulated\
    \ content\n          types: a ContentWithAttributes and an EncryptedKeyPackage.\n\
    \          This content type does not provide any attributes.\n      (4) is a\
    \ ContentWithAttributes content type.  It encapsulates a\n          SignedData\
    \ content type.  Four key material attributes are\n          provided.\n     \
    \ (5) is a SignedData content type.  It encapsulates a\n          SymmetricKeyPackage\
    \ content type.  Six signed attributes are\n          provided.  Four attributes\
    \ are key material attributes.\n      (6) is a SymmetricKeyPackage content type,\
    \ and it includes three\n          key material attributes.  Note that the contents\
    \ of this key\n          package are not encrypted, but the contents are covered\
    \ by two\n          digital signatures.\n      (7) is an EncryptedKeyPackage content\
    \ type.  It encapsulates a\n          SignedData content type.  This content type\
    \ provides one\n          unprotected attribute.\n      (8) is a SignedData content\
    \ type.  It encapsulates a\n          SymmetricKeyPackage content type.  Six signed\
    \ attributes are\n          provided.  Four attributes are key material attributes.\n\
    \      (9) is a SymmetricKeyPackage content type, and it includes three\n    \
    \      key material attributes.  Note that the contents of this key\n        \
    \  package are encrypted; the plaintext keying material is\n          covered\
    \ by one digital signature, and the ciphertext keying\n          material is covered\
    \ by another digital signature.\n   SignedData content type (2) includes six signed\
    \ attributes:\n      o  The content-type attribute contains id-ct-contentCollection\
    \ to\n         indicate the type of the encapsulated content, and it has no\n\
    \         further scope.\n      o  The message-digest attribute contains the one-way\
    \ hash value of\n         the encapsulated content; it is needed to validate the\
    \ digital\n         signature.  It has no further scope.\n      o  The classification\
    \ attribute contains the security label for\n         all of the plaintext in\
    \ the encapsulated content.  Each\n         classification attribute is evaluated\
    \ separately; it has no\n         further scope.  In general, the values of this\
    \ attribute will\n         match or dominate the security label values in (4),\
    \ (5), and\n         (6).  The value of this attribute might not match or dominate\n\
    \         the security label values in (8) and (9) since they are\n         encrypted.\
    \  It is possible that these various security label\n         values are associated\
    \ with different security policies.  To\n         avoid the processing complexity\
    \ associated with policy mapping,\n         comparison is not required.\n    \
    \  o  The key-package-receivers-v2 attribute indicates the authorized\n      \
    \   key package receivers, and it has no further scope.  The\n         additional\
    \ instances of key-package-receivers-v2 attribute\n         embedded in (4) are\
    \ evaluated without regard to the value of\n         the instance in (2).\n  \
    \    o  The key-distribution-period attribute contains two date values:\n    \
    \     doNotDistBefore and doNotDistAfter.  These values must match\n         all\
    \ others within the same scope, which in this example is the\n         key-distribution-period\
    \ within (4).\n      o  The key-package-type attributes indicates the format of\
    \ the key\n         package, and it has no further scope.  The key-package-type\n\
    \         attributes values within (5) and (8) are evaluated without\n       \
    \  regard to the value of this attribute.\n   ContentWithAttributes content type\
    \ (4) includes four attributes:\n      o  The classification attribute contains\
    \ the security label for\n         all of the plaintext in the encapsulated content.\
    \  Each\n         classification attribute is evaluated separately; it has no\n\
    \         further scope.\n      o  The TSEC-Nomenclature attribute includes only\
    \ the shortTitle\n         field, and the value must match all other instances\
    \ within the\n         same scope, which appear in (5) and (6).  Note that the\
    \ TSEC-\n         Nomenclature attribute values in (8) and (9) are not in the\n\
    \         same scope as the TSEC-Nomenclature attribute that appears in\n    \
    \     (4).\n      o  The key-package-receivers-v2 attribute indicates the authorized\n\
    \         key package receivers, and it has no further scope.  The\n         enveloping\
    \ instance of key-package-receivers-v2 attribute value\n         in (2) is evaluated\
    \ without regard to the value of this\n         instance in (4), and has no effect\
    \ on the value of this\n         instance in (4).\n      o  The key-distribution-period\
    \ attribute contains two date values:\n         doNotDistBefore and doNotDistAfter.\
    \  These values must match\n         all others within the same scope, which in\
    \ this example is the\n         key-distribution-period within (2).\n   SignedData\
    \ content type (5) includes six signed attributes:\n      o  The content-type\
    \ attribute contains id-ct-KP-skeyPackage to\n         indicate the type of the\
    \ encapsulated content, and it has no\n         further scope.\n      o  The message-digest\
    \ attribute contains the one-way hash value of\n         the encapsulated content;\
    \ it is needed to validate the digital\n         signature.  It has no further\
    \ scope.\n      o  The classification attribute contains the security label for\n\
    \         all of the plaintext in the encapsulated content.  Each\n         classification\
    \ attribute is evaluated separately; it has no\n         further scope.\n    \
    \  o  The TSEC-Nomenclature attribute includes only the shortTitle\n         field,\
    \ and the value must match all other instances within the\n         same scope,\
    \ which appear in (6).  Since this is within the\n         scope of (4), these\
    \ shortTitle field values must match as well.\n         Note that the TSEC-Nomenclature\
    \ attribute values in (8) and (9)\n         are not in the same scope.\n     \
    \ o  The key-purpose attribute specifies the purpose of the key\n         material.\
    \  All occurrences within the scope must have the same\n         value; however,\
    \ in this example, there are no other occurrences\n         within the scope.\
    \  The key-purpose attribute value within (8)\n         is evaluated without regard\
    \ to the value of this attribute.\n      o  The key-package-type attribute indicates\
    \ the format of the key\n         package, and it has no further scope.  The key-package-type\n\
    \         attribute values within (2) and (8) are evaluated without\n        \
    \ regard to the value of this attribute.\n   SymmetricKeyPackage content type\
    \ (6) includes three keying material\n   attributes, which could appear in the\
    \ sKeyPkgAttrs or sKeyAttrs\n   fields:\n      o  The key-algorithm attribute\
    \ includes only the keyAlg field, and\n         it must match all other occurrences\
    \ within the same scope.\n         However, there are no other key-algorithm attribute\
    \ occurrences\n         in the same scope; the key-algorithm attribute value in\
    \ (9) is\n         not in the same scope.\n      o  The classification attribute\
    \ contains the security label for\n         all of the plaintext in the key package.\
    \  Each classification\n         attribute is evaluated separately; it has no\
    \ further scope.\n      o  The TSEC-Nomenclature attribute includes the shortTitle\
    \ field\n         as well as some of the optional fields.  The shortTitle field\n\
    \         value must match the values in (4) and (5), since this content\n   \
    \      type is within their scope.  Note that the TSEC-Nomenclature\n        \
    \ attribute values in (8) and (9) are not in the same scope.\n   EncryptedKeyPackage\
    \ content type (7) includes one unprotected\n   attribute, and the encryption\
    \ will prevent any intermediary that does\n   not have the ability to decrypt\
    \ the content from making any\n   consistency checks on (8) and (9):\n      o\
    \  The content-decryption-key-identifier attribute identifies the\n         key\
    \ that is needed to decrypt the encapsulated content; it has\n         no further\
    \ scope.\n   SignedData content type (8) includes six signed attributes:\n   \
    \   o  The content-type attribute contains id-ct-KP-skeyPackage to\n         indicate\
    \ the type of the encapsulated content, and it has no\n         further scope.\n\
    \      o  The message-digest attribute contains the one-way hash value of\n  \
    \       the encapsulated content; it is needed to validate the digital\n     \
    \    signature.  It has no further scope.\n      o  The classification attribute\
    \ contains the security label for\n         content.  Each classification attribute\
    \ is evaluated\n         separately; it has no further scope.\n      o  The TSEC-Nomenclature\
    \ attribute includes only the shortTitle\n         field, and the value must match\
    \ all other instances within the\n         same scope, which appear in (9).  Note\
    \ that the TSEC-\n         Nomenclature attribute values in (4), (5), and (6)\
    \ are not in\n         the same scope.\n      o  The key-purpose attribute specifies\
    \ the purpose of the key\n         material.  All occurrences within the scope\
    \ must have the same\n         value; however, in this example, there are no other\
    \ occurrences\n         within the scope.  The key-purpose attribute value within\
    \ (5)\n         is evaluated without regard to the value of this attribute.\n\
    \      o  The key-package-type attribute indicates the format of the key\n   \
    \      package, and it has no further scope.  The key-package-type\n         attribute\
    \ values within (2) and (5) are evaluated without\n         regard to the value\
    \ of this attribute.\n   SymmetricKeyPackage content type (9) includes three keying\
    \ material\n   attributes, which could appear in the sKeyPkgAttrs or sKeyAttrs\n\
    \   fields:\n      o  The key-algorithm attribute includes only the keyAlg field,\
    \ and\n         it must match all other occurrences within the same scope.\n \
    \        However, there are no other key-algorithm attribute occurrences\n   \
    \      in the same scope; the key-algorithm attribute value in (6) is\n      \
    \   not in the same scope.\n      o  The classification attribute contains the\
    \ security label for\n         all of the plaintext in the key package.  Each\
    \ classification\n         attribute is evaluated separately; it has no further\
    \ scope.\n      o  The TSEC-Nomenclature attribute includes the shortTitle field\n\
    \         as well as some of the optional fields.  The shortTitle field\n    \
    \     value must match the values in (8), since this content type is\n       \
    \  within its scope.  Note that the TSEC-Nomenclature attributes\n         values\
    \ in (4), (5), and (6) are not in the same scope.\n   In summary, the scope of\
    \ an attribute includes the encapsulated\n   content of the CMS content type in\
    \ which it appears, and some\n   attributes also require consistency checks with\
    \ other instances that\n   appear within the encapsulated content.  Proper recognition\
    \ of scope\n   is required to accurately perform attribute processing.\n   +------------------------------------------------------------------+\n\
    \   | ContentInfo (1)                                                  |\n   |+----------------------------------------------------------------+|\n\
    \   || SignedData (2)                                                 ||\n   ||+--------------------------------------------------------------+||\n\
    \   ||| ContentCollection (3)                                        |||\n   |||+-----------------------------++-----------------------------+|||\n\
    \   |||| ContentWithAttributes (4)   || EncryptedKeyPackage (7)     ||||\n   ||||+---------------------------+||+---------------------------+||||\n\
    \   ||||| SignedData (5)            |||| SignedData (8)            |||||\n   |||||+-------------------------+||||+-------------------------+|||||\n\
    \   |||||| SymmetricKeyPackage (6) |||||| SymmetricKeyPackage (9) ||||||\n   ||||||\
    \ Attributes:             |||||| Attributes:             ||||||\n   ||||||  Key\
    \ Algorithm          ||||||  Key Algorithm          ||||||\n   ||||||  Classification\
    \         ||||||  Classification         ||||||\n   ||||||  TSEC-Nomenclature\
    \      ||||||  TSEC-Nomenclature      ||||||\n   |||||+-------------------------+||||+-------------------------+|||||\n\
    \   ||||| Attributes:               |||| Attributes:               |||||\n   |||||\
    \  Content Type             ||||  Content Type             |||||\n   |||||  Message\
    \ Digest           ||||  Message Digest           |||||\n   |||||  Classification\
    \           ||||  Classification           |||||\n   |||||  TSEC-Nomenclature\
    \        ||||  TSEC-Nomenclature        |||||\n   |||||  Key Purpose         \
    \     ||||  Key Purpose              |||||\n   |||||  Key Package Type       \
    \  ||||  Key Package Type         |||||\n   ||||+-------------------------- +||+---------------------------+||||\n\
    \   |||| Attributes:                 || Unprotect Attributes:       ||||\n   ||||\
    \  Classification             ||  Content Decrypt Key ID     ||||\n   ||||  TSEC-Nomenclature\
    \          |+-----------------------------+|||\n   ||||  Key Package Receivers\
    \      |                               |||\n   ||||  Key Distribution Period \
    \   |                               |||\n   |||+-----------------------------+\
    \                               |||\n   ||+--------------------------------------------------------------+||\n\
    \   || Attributes:                                                    ||\n   ||\
    \  Content Type                                                  ||\n   ||  Message\
    \ Digest                                                ||\n   ||  Classification\
    \                                                ||\n   ||  Key Package Receivers\
    \                                         ||\n   ||  Key Distribution Period \
    \                                      ||\n   ||  Key Package Type           \
    \                                   ||\n   |+----------------------------------------------------------------+|\n\
    \   +------------------------------------------------------------------+\n   \
    \         Figure 1: Example Illustrating Scope of Attributes\n"
- title: 32.  Security Considerations
  contents:
  - "32.  Security Considerations\n   The majority of this specification is devoted\
    \ to the syntax and\n   semantics of key package attributes.  It relies on other\n\
    \   specifications, especially [RFC2634], [RFC4073], [RFC4108],\n   [RFC5652],\
    \ [RFC5911], [RFC5912], [RFC5958], [RFC6010], and [RFC6031];\n   their security\
    \ considerations apply here.  Additionally,\n   cryptographic algorithms are used\
    \ with CMS protecting content types\n   as specified in [RFC5959], [RFC6160],\
    \ [RFC6161], and [RFC6162]; the\n   security considerations from those documents\
    \ apply here as well.\n   This specification also relies upon [RFC5280] for the\
    \ syntax and\n   semantics of X.509 certificates.  Digital signatures provide\
    \ data\n   integrity or data origin authentication, and encryption provides\n\
    \   confidentiality.\n   Security factors outside the scope of this specification\
    \ greatly\n   affect the assurance provided.  The procedures used by Certification\n\
    \   Authorities (CAs) to validate the binding of the subject identity to\n   their\
    \ public key greatly affect the assurance that ought to be placed\n   in the certificate.\
    \  This is particularly important when issuing\n   certificates to other CAs.\n\
    \   The CMS AuthenticatedData content type MUST be used with care since a\n  \
    \ Message Authentication Code (MAC) is used.  The same key is needed to\n   generate\
    \ the MAC or validate the MAC.  Thus, any party with access to\n   the key needed\
    \ to validate the MAC can generate a replacement that\n   will be acceptable to\
    \ other recipients.\n   In some situations, returning very detailed error information\
    \ can\n   provide an attacker with insight into the security processing.  Where\n\
    \   this is a concern, the implementation should return the most generic\n   error\
    \ code that is appropriate.  However, detailed error codes are\n   very helpful\
    \ during development, debugging, and interoperability\n   testing.  For this reason,\
    \ implementations may want to have a way to\n   configure the use of generic or\
    \ detailed error codes.\n"
- title: 33.  References
  contents:
  - '33.  References

    '
- title: 33.1.  Normative References
  contents:
  - "33.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2634]  Hoffman, P., Ed., \"Enhanced Security Services for S/MIME\",\n\
    \              RFC 2634, DOI 10.17487/RFC2634, June 1999,\n              <http://www.rfc-editor.org/info/rfc2634>.\n\
    \   [RFC4073]  Housley, R., \"Protecting Multiple Contents with the\n        \
    \      Cryptographic Message Syntax (CMS)\", RFC 4073,\n              DOI 10.17487/RFC4073,\
    \ May 2005,\n              <http://www.rfc-editor.org/info/rfc4073>.\n   [RFC4108]\
    \  Housley, R., \"Using Cryptographic Message Syntax (CMS) to\n              Protect\
    \ Firmware Packages\", RFC 4108,\n              DOI 10.17487/RFC4108, August 2005,\n\
    \              <http://www.rfc-editor.org/info/rfc4108>.\n   [RFC5083]  Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\n              Authenticated-Enveloped-Data\
    \ Content Type\", RFC 5083,\n              DOI 10.17487/RFC5083, November 2007,\n\
    \              <http://www.rfc-editor.org/info/rfc5083>.\n   [RFC5280]  Cooper,\
    \ D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley, R., and\
    \ W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI\
    \ 10.17487/RFC5280, May 2008,\n              <http://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n\
    \              RFC 5652, DOI 10.17487/RFC5652, September 2009,\n             \
    \ <http://www.rfc-editor.org/info/rfc5652>.\n   [RFC5911]  Hoffman, P. and J.\
    \ Schaad, \"New ASN.1 Modules for\n              Cryptographic Message Syntax\
    \ (CMS) and S/MIME\", RFC 5911,\n              DOI 10.17487/RFC5911, June 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5911>.\n   [RFC5912]  Hoffman,\
    \ P. and J. Schaad, \"New ASN.1 Modules for the\n              Public Key Infrastructure\
    \ Using X.509 (PKIX)\", RFC 5912,\n              DOI 10.17487/RFC5912, June 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5912>.\n   [RFC5958]  Turner,\
    \ S., \"Asymmetric Key Packages\", RFC 5958,\n              DOI 10.17487/RFC5958,\
    \ August 2010,\n              <http://www.rfc-editor.org/info/rfc5958>.\n   [RFC5959]\
    \  Turner, S., \"Algorithms for Asymmetric Key Package Content\n             \
    \ Type\", RFC 5959, DOI 10.17487/RFC5959, August 2010,\n              <http://www.rfc-editor.org/info/rfc5959>.\n\
    \   [RFC6010]  Housley, R., Ashmore, S., and C. Wallace, \"Cryptographic\n   \
    \           Message Syntax (CMS) Content Constraints Extension\",\n          \
    \    RFC 6010, DOI 10.17487/RFC6010, September 2010,\n              <http://www.rfc-editor.org/info/rfc6010>.\n\
    \   [RFC6019]  Housley, R., \"BinaryTime: An Alternate Format for\n          \
    \    Representing Date and Time in ASN.1\", RFC 6019,\n              DOI 10.17487/RFC6019,\
    \ September 2010,\n              <http://www.rfc-editor.org/info/rfc6019>.\n \
    \  [RFC6031]  Turner, S. and R. Housley, \"Cryptographic Message Syntax\n    \
    \          (CMS) Symmetric Key Package Content Type\", RFC 6031,\n           \
    \   DOI 10.17487/RFC6031, December 2010,\n              <http://www.rfc-editor.org/info/rfc6031>.\n\
    \   [RFC6032]  Turner, S. and R. Housley, \"Cryptographic Message Syntax\n   \
    \           (CMS) Encrypted Key Package Content Type\", RFC 6032,\n          \
    \    DOI 10.17487/RFC6032, December 2010,\n              <http://www.rfc-editor.org/info/rfc6032>.\n\
    \   [RFC6160]  Turner, S., \"Algorithms for Cryptographic Message Syntax\n   \
    \           (CMS) Protection of Symmetric Key Package Content Types\",\n     \
    \         RFC 6160, DOI 10.17487/RFC6160, April 2011,\n              <http://www.rfc-editor.org/info/rfc6160>.\n\
    \   [RFC6162]  Turner, S., \"Elliptic Curve Algorithms for Cryptographic\n   \
    \           Message Syntax (CMS) Asymmetric Key Package Content Type\",\n    \
    \          RFC 6162, DOI 10.17487/RFC6162, April 2011,\n              <http://www.rfc-editor.org/info/rfc6162>.\n\
    \   [RFC6268]  Schaad, J. and S. Turner, \"Additional New ASN.1 Modules\n    \
    \          for the Cryptographic Message Syntax (CMS) and the Public\n       \
    \       Key Infrastructure Using X.509 (PKIX)\", RFC 6268,\n              DOI\
    \ 10.17487/RFC6268, July 2011,\n              <http://www.rfc-editor.org/info/rfc6268>.\n\
    \   [RFC7191]  Housley, R., \"Cryptographic Message Syntax (CMS) Key\n       \
    \       Package Receipt and Error Content Types\", RFC 7191,\n              DOI\
    \ 10.17487/RFC7191, April 2014,\n              <http://www.rfc-editor.org/info/rfc7191>.\n\
    \   [X.509]    ITU-T, \"Information technology - Open Systems\n              Interconnection\
    \ - The Directory: Public-key and attribute\n              certificate frameworks\"\
    , ITU-T Recommendation X.509 |\n              ISO/IEC 9594-8:2005, 2005.\n   [X.680]\
    \    ITU-T, \"Information Technology - Abstract Syntax Notation\n            \
    \  One\", ITU-T Recommendation X.680 | ISO/IEC 8824-1:2002,\n              2002.\n\
    \   [X.681]    ITU-T, \"Information Technology - Abstract Syntax Notation\n  \
    \            One: Information Object Specification\", ITU-T\n              Recommendation\
    \ X.681 | ISO/IEC 8824-2:2002, 2002.\n   [X.682]    ITU-T, \"Information Technology\
    \ - Abstract Syntax Notation\n              One: Constraint Specification\", ITU-T\
    \ Recommendation X.682\n              | ISO/IEC 8824-3:2002, 2002.\n   [X.683]\
    \    ITU-T, \"Information Technology - Abstract Syntax Notation\n            \
    \  One: Parameterization of ASN.1 Specifications\", ITU-T\n              Recommendation\
    \ X.683 | ISO/IEC 8824-4:2002, 2002.\n   [X.690]    ITU-T, \"Information Technology\
    \ - ASN.1 encoding rules:\n              Specification of Basic Encoding Rules\
    \ (BER), Canonical\n              Encoding Rules (CER) and Distinguished Encoding\
    \ Rules\n              (DER)\", ITU-T Recommendation X.690 | ISO/IEC 8825-1:2002,\n\
    \              2002.\n"
- title: 33.2.  Informative References
  contents:
  - "33.2.  Informative References\n   [RFC5934]  Housley, R., Ashmore, S., and C.\
    \ Wallace, \"Trust Anchor\n              Management Protocol (TAMP)\", RFC 5934,\n\
    \              DOI 10.17487/RFC5934, August 2010,\n              <http://www.rfc-editor.org/info/rfc5934>.\n\
    \   [X.411]    ITU-T, \"Information technology - Message Handling Systems\n  \
    \            (MHS): Message Transfer System: Abstract Service\n              Definition\
    \ and Procedures\", ITU-T Recommendation X.411 |\n              ISO/IEC 10021-4:1999,\
    \ 1999.\n"
- title: Appendix A.  ASN.1 Module
  contents:
  - "Appendix A.  ASN.1 Module\n   KMAttributes2012\n     { joint-iso-itu-t(2) country(16)\
    \ us(840) organization(1)\n       gov(101) dod(2) infosec(1) modules(0) 39 }\n\
    \   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORT ALL\n   IMPORTS\n  \
    \ -- From [RFC5911]\n   aa-communityIdentifiers, CommunityIdentifier\n     FROM\
    \ CMSFirmwareWrapper-2009\n       { iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9)\n         smime(16) modules(0) id-mod-cms-firmware-wrap-02(40)\
    \ }\n   -- From [RFC5911]\n   aa-contentHint, ESSSecurityLabel, id-aa-securityLabel\n\
    \     FROM ExtendedSecurityServices-2009\n       { iso(1) member-body(2) us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-9(9)\n         smime(16) modules(0) id-mod-ess-2006-02(42)\
    \ }\n   -- From [RFC5911] [RFC5912]\n   AlgorithmIdentifier{}, SMIME-CAPS, ParamOptions,\
    \ KEY-WRAP\n     FROM AlgorithmInformation-2009\n       { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n         security(5) mechanisms(5) pkix(7) id-mod(0)\n \
    \        id-mod-algorithmInformation-02(58) }\n   -- From [RFC5912]\n   Name,\
    \ Certificate\n     FROM PKIX1Explicit-2009\n       { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n         security(5) mechanisms(5) pkix(7) id-mod(0)\n \
    \        id-mod-pkix1-explicit-02(51) }\n   -- From [RFC5912]\n   GeneralNames,\
    \ SubjectInfoAccessSyntax, id-pe-subjectInfoAccess\n     FROM PKIX1Implicit-2009\n\
    \       { iso(1) identified-organization(3) dod(6) internet(1)\n         security(5)\
    \ mechanisms(5) pkix(7) id-mod(0)\n         id-mod-pkix1-implicit-02(59) }\n \
    \  -- FROM [RFC5912]\n   ATTRIBUTE\n     FROM PKIX-CommonTypes-2009\n       {\
    \ iso(1) identified-organization(3) dod(6) internet(1)\n         security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n         id-mod-pkixCommon-02(57) }\n   -- From [RFC6010]\n\
    \   CMSContentConstraints\n     FROM CMSContentConstraintsCertExtn\n       { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n          security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n          cmsContentConstr-93(42) }\n   -- From [RFC6268]\n\
    \   aa-binarySigningTime, BinaryTime\n     FROM BinarySigningTimeModule-2010\n\
    \       { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n   \
    \      smime(16) modules(0) id-mod-binSigningTime-2009(55) }\n   -- From [RFC6268]\n\
    \   CertificateChoices, CertificateSet, Attribute {},\n   aa-contentType, aa-messageDigest\n\
    \     FROM CryptographicMessageSyntax-2010\n       { iso(1) member-body(2) us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-9(9)\n         smime(16) modules(0) id-mod-cms-2009(58)\
    \ }\n   -- From [RFC7191]\n   aa-keyPackageIdentifierAndReceiptRequest, SIREntityName\n\
    \     FROM KeyPackageReceiptAndErrorModuleV2\n       { iso(1) member-body(2) us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-9(9)\n         smime(16) modules(0) id-mod-keyPkgReceiptAndErrV2(63)\
    \ }\n   -- From [X.509]\n   certificateExactMatch\n     FROM CertificateExtensions\n\
    \       { joint-iso-itu-t ds(5) module(1) certificateExtensions(26) 4 }\n   ;\n\
    \   -- ATTRIBUTES\n   -- Replaces SignedAttributesSet information object set from\n\
    \   -- [RFC6268].\n   SignedAttributesSet ATTRIBUTE ::= {\n     aa-contentType\
    \                           |\n     aa-messageDigest                         |\n\
    \     aa-contentHint                           |\n     aa-communityIdentifiers\
    \                  |\n     aa-binarySigningTime                     |\n     aa-keyProvince-v2\
    \                        |\n     aa-keyPackageIdentifierAndReceiptRequest |\n\
    \     aa-manifest                              |\n     aa-keyAlgorithm       \
    \                   |\n     aa-userCertificate                       |\n     aa-keyPackageReceivers-v2\
    \                |\n     aa-tsecNomenclature                      |\n     aa-keyPurpose\
    \                            |\n     aa-keyUse                               \
    \ |\n     aa-transportKey                          |\n     aa-keyDistributionPeriod\
    \                 |\n     aa-keyValidityPeriod                     |\n     aa-keyDurationPeriod\
    \                     |\n     aa-classificationAttribute               |\n   \
    \  aa-keyPackageType                        |\n     aa-pkiPath               \
    \                |\n     aa-usefulCertificates,\n     ... }\n   -- Replaces UnsignedAttributes\
    \ from [RFC6268].\n   UnsignedAttributes ATTRIBUTE ::= {\n      ...\n      }\n\
    \   -- Replaces UnprotectedEnvAttributes from [RFC6268].\n   UnprotectedEnvAttributes\
    \ ATTRIBUTE ::= {\n     aa-contentDecryptKeyIdentifier |\n     aa-certificatePointers\
    \         |\n     aa-cRLDistributionPoints,\n     ...\n     }\n   -- Replaces\
    \ UnprotectedEncAttributes from [RFC6268].\n   UnprotectedEncAttributes ATTRIBUTE\
    \ ::= {\n     aa-certificatePointers |\n     aa-cRLDistributionPoints,\n     ...\n\
    \     }\n   -- Replaces AuthAttributeSet from [RFC6268]\n   AuthAttributeSet ATTRIBUTE\
    \ ::= {\n     aa-contentType                           |\n     aa-messageDigest\
    \                         |\n     aa-contentHint                           |\n\
    \     aa-communityIdentifiers                  |\n     aa-keyProvince-v2     \
    \                   |\n     aa-binarySigningTime                     |\n     aa-keyPackageIdentifierAndReceiptRequest\
    \ |\n     aa-manifest                              |\n     aa-keyAlgorithm   \
    \                       |\n     aa-userCertificate                       |\n \
    \    aa-keyPackageReceivers-v2                |\n     aa-tsecNomenclature    \
    \                  |\n     aa-keyPurpose                            |\n     aa-keyUse\
    \                                |\n     aa-transportKey                     \
    \     |\n     aa-keyDistributionPeriod                 |\n     aa-keyValidityPeriod\
    \                     |\n     aa-keyDurationPeriod                     |\n   \
    \  aa-classificationAttribute               |\n     aa-keyPackageType        \
    \                |\n     aa-pkiPath                               |\n     aa-usefulCertificates,\n\
    \     ... }\n   -- Replaces UnauthAttributeSet from [RFC6268]\n   UnauthAttributeSet\
    \ ATTRIBUTE ::= {\n     ...\n     }\n   -- Replaces AuthEnvDataAttributeSet from\
    \ [RFC6268]\n   AuthEnvDataAttributeSet ATTRIBUTE ::= {\n     aa-certificatePointers\
    \ |\n     aa-cRLDistributionPoints,\n     ...\n     }\n    -- Replaces UnauthEnvDataAttributeSet\
    \ from [RFC6268]\n   UnauthEnvDataAttributeSet ATTRIBUTE ::= {\n     ...\n   \
    \  }\n   -- Replaces OneAsymmetricKeyAttributes from [RFC5958]\n   OneAsymmetricKeyAttributes\
    \ ATTRIBUTE ::= {\n     aa-userCertificate            |\n     aa-tsecNomenclature\
    \           |\n     aa-keyPurpose                 |\n     aa-keyUse          \
    \           |\n     aa-transportKey               |\n     aa-keyDistributionPeriod\
    \      |\n     aa-keyValidityPeriod          |\n     aa-keyDurationPeriod    \
    \      |\n     aa-classificationAttribute    |\n     aa-splitIdentifier      \
    \      |\n     aa-signatureUsage-v3          |\n     aa-otherCertificateFormats\
    \    |\n     aa-pkiPath                    |\n     aa-usefulCertificates,\n  \
    \   ... }\n   -- Replaces SKeyPkgAttributes from [RFC6031]\n   SKeyPkgAttributes\
    \ ATTRIBUTE ::= {\n     aa-keyAlgorithm                |\n     aa-tsecNomenclature\
    \            |\n     aa-keyPurpose                  |\n     aa-keyUse        \
    \              |\n     aa-keyDistributionPeriod       |\n     aa-keyValidityPeriod\
    \           |\n     aa-keyDurationPeriod           |\n     aa-classificationAttribute\
    \     |\n     aa-keyWrapAlgorithm            |\n     aa-contentDecryptKeyIdentifier,\n\
    \     ... }\n   -- Replaces SKeyAttributes from [RFC6031]\n   SKeyAttributes ATTRIBUTE\
    \ ::= {\n     aa-keyAlgorithm                |\n     aa-tsecNomenclature     \
    \       |\n     aa-keyPurpose                  |\n     aa-keyUse             \
    \         |\n     aa-keyDistributionPeriod       |\n     aa-keyValidityPeriod\
    \           |\n     aa-keyDurationPeriod           |\n     aa-classificationAttribute\
    \     |\n     aa-splitIdentifier             |\n     aa-keyWrapAlgorithm     \
    \       |\n     aa-contentDecryptKeyIdentifier,\n     ... }\n   -- Replaces ContentAttributeSet\
    \ from [RFC6268]\n   ContentAttributeSet ATTRIBUTE ::= {\n     aa-communityIdentifiers\
    \                  |\n     aa-keyPackageIdentifierAndReceiptRequest |\n     aa-keyAlgorithm\
    \                          |\n     aa-keyPackageReceivers-v2                |\n\
    \     aa-tsecNomenclature                      |\n     aa-keyPurpose         \
    \                   |\n     aa-keyUse                                |\n     aa-transportKey\
    \                          |\n     aa-keyDistributionPeriod                 |\n\
    \     aa-transportKey                          |\n     aa-keyDistributionPeriod\
    \                 |\n     aa-keyValidityPeriod                     |\n     aa-keyDurationPeriod\
    \                     |\n     aa-classificationAttribute               |\n   \
    \  aa-keyPackageType                        |\n     aa-pkiPath               \
    \                |\n     aa-usefulCertificates,\n     ... }\n   -- Content Type,\
    \ Message Digest, Content Hint, and Binary Signing\n   -- Time are imported from\
    \ [RFC6268].\n   -- Community Identifiers is imported from [RFC5911].\n   -- Key\
    \ Province\n   aa-keyProvince-v2 ATTRIBUTE ::= {\n     TYPE KeyProvinceV2\n  \
    \   IDENTIFIED BY id-aa-KP-keyProvinceV2 }\n   id-aa-KP-keyProvinceV2 OBJECT IDENTIFIER\
    \ ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n\
    \       dod(2) infosec(1) attributes(5) 71 }\n   KeyProvinceV2 ::= OBJECT IDENTIFIER\n\
    \   -- Manifest Attribute\n   aa-manifest ATTRIBUTE ::= {\n     TYPE Manifest\n\
    \     IDENTIFIED BY id-aa-KP-manifest }\n   id-aa-KP-manifest OBJECT IDENTIFIER\
    \ ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n\
    \       dod(2) infosec(1) attributes(5) 72 }\n   Manifest ::= SEQUENCE SIZE (1..MAX)\
    \ OF ShortTitle\n   -- Key Algorithm Attribute\n   aa-keyAlgorithm ATTRIBUTE ::=\
    \ {\n     TYPE KeyAlgorithm\n     IDENTIFIED BY id-kma-keyAlgorithm }\n   id-kma-keyAlgorithm\
    \  OBJECT IDENTIFIER ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 1 }\n   KeyAlgorithm\
    \ ::= SEQUENCE {\n     keyAlg            OBJECT IDENTIFIER,\n     checkWordAlg\
    \  [1] OBJECT IDENTIFIER OPTIONAL,\n     crcAlg        [2] OBJECT IDENTIFIER OPTIONAL\
    \ }\n   -- User Certificate Attribute\n   aa-userCertificate ATTRIBUTE ::= {\n\
    \     TYPE Certificate\n     EQUALITY MATCHING RULE certificateExactMatch\n  \
    \   IDENTIFIED BY id-at-userCertificate }\n   id-at-userCertificate OBJECT IDENTIFIER\
    \ ::=\n     { joint-iso-itu-t(2) ds(5) attributes(4) 36 }\n   -- Key Package Receivers\
    \ Attribute\n   aa-keyPackageReceivers-v2 ATTRIBUTE ::= {\n     TYPE KeyPkgReceiversV2\n\
    \     IDENTIFIED BY id-kma-keyPkgReceiversV2 }\n   id-kma-keyPkgReceiversV2  OBJECT\
    \ IDENTIFIER ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 16 }\n   KeyPkgReceiversV2\
    \ ::= SEQUENCE SIZE (1..MAX) OF KeyPkgReceiver\n   KeyPkgReceiver ::= CHOICE {\n\
    \     sirEntity  [0] SIREntityName,\n     community  [1] CommunityIdentifier }\n\
    \   -- TSEC Nomenclature Attribute\n   aa-tsecNomenclature ATTRIBUTE ::= {\n \
    \    TYPE TSECNomenclature\n     IDENTIFIED BY id-kma-TSECNomenclature }\n   id-kma-TSECNomenclature\
    \  OBJECT IDENTIFIER ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 3 }\n   TSECNomenclature\
    \ ::= SEQUENCE {\n     shortTitle  ShortTitle,\n     editionID   EditionID OPTIONAL,\n\
    \     registerID  RegisterID OPTIONAL,\n     segmentID   SegmentID OPTIONAL }\n\
    \   ShortTitle ::= PrintableString\n   EditionID ::= CHOICE {\n     char CHOICE\
    \ {\n       charEdition      [1] CharEdition,\n       charEditionRange [2] CharEditionRange\
    \ },\n     num CHOICE {\n       numEdition       [3] NumEdition,\n       numEditionRange\
    \  [4] NumEditionRange } }\n   CharEdition ::= PrintableString\n   CharEditionRange\
    \ ::= SEQUENCE {\n     firstCharEdition  CharEdition,\n     lastCharEdition  \
    \ CharEdition }\n   NumEdition ::= INTEGER (0..308915776)\n   NumEditionRange\
    \ ::= SEQUENCE {\n     firstNumEdition  NumEdition,\n     lastNumEdition   NumEdition\
    \ }\n   RegisterID ::= CHOICE {\n     register       [5] Register,\n     registerRange\
    \  [6] RegisterRange }\n   Register ::= INTEGER (0..2147483647)\n   RegisterRange\
    \ ::= SEQUENCE {\n     firstRegister  Register,\n     lastRegister   Register\
    \ }\n   SegmentID ::= CHOICE {\n     segmentNumber  [7] SegmentNumber,\n     segmentRange\
    \   [8] SegmentRange }\n   SegmentNumber ::= INTEGER (1..127)\n   SegmentRange\
    \ ::= SEQUENCE {\n     firstSegment  SegmentNumber,\n     lastSegment   SegmentNumber\
    \ }\n   -- Key Purpose Attribute\n   aa-keyPurpose ATTRIBUTE ::= {\n     TYPE\
    \ KeyPurpose\n     IDENTIFIED BY id-kma-keyPurpose }\n   id-kma-keyPurpose  OBJECT\
    \ IDENTIFIER ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 13 }\n   KeyPurpose\
    \ ::= ENUMERATED {\n     n-a    (0),   -- Not Applicable\n     a     (65),   --\
    \ Operational\n     b     (66),   -- Compatible Multiple Key\n     l     (76),\
    \   -- Logistics Combinations\n     m     (77),   -- Maintenance\n     r     (82),\
    \   -- Reference\n     s     (83),   -- Sample\n     t     (84),   -- Training\n\
    \     v     (86),   -- Developmental\n     x     (88),   -- Exercise\n     z \
    \    (90),   -- \"On the Air\" Testing\n     ... -- Expect additional key purpose\
    \ values -- }\n   -- Key Use Attribute\n   aa-keyUse ATTRIBUTE ::= {\n     TYPE\
    \ KeyUse\n     IDENTIFIED BY id-kma-keyUse }\n   id-kma-keyUse  OBJECT IDENTIFIER\
    \ ::=\n      { joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n\
    \        dod(2) infosec(1) keying-material-attributes(13) 14 }\n   KeyUse ::=\
    \ ENUMERATED {\n     n-a    (0),    -- Not Applicable\n     ffk    (1),    --\
    \ FIREFLY/CROSSTALK Key (Basic Format)\n     kek    (2),    -- Key Encryption\
    \ Key\n     kpk    (3),    -- Key Production Key\n     msk    (4),    -- Message\
    \ Signature Key\n     qkek   (5),    -- QUADRANT Key Encryption Key\n     tek\
    \    (6),    -- Traffic Encryption Key\n     tsk    (7),    -- Transmission Security\
    \ Key\n     trkek  (8),    -- Transfer Key Encryption Key\n     nfk    (9),  \
    \  -- Netted FIREFLY Key\n     effk  (10),    -- FIREFLY Key (Enhanced Format)\n\
    \     ebfk  (11),    -- FIREFLY Key (Enhanceable Basic Format)\n     aek   (12),\
    \    -- Algorithm Encryption Key\n     wod   (13),    -- Word of Day\n     kesk\
    \ (246),    -- Key Establishment Key\n     eik  (247),    -- Entity Identification\
    \ Key\n     ask  (248),    -- Authority Signature Key\n     kmk  (249),    --\
    \ Key Modifier Key\n     rsk  (250),    -- Revocation Signature Key\n     csk\
    \  (251),    -- Certificate Signature Key\n     sak  (252),    -- Symmetric Authentication\
    \ Key\n     rgk  (253),    -- Random Generation Key\n     cek  (254),    -- Certificate\
    \ Encryption Key\n     exk  (255),    -- Exclusion Key\n     ... -- Expect additional\
    \ key use values -- }\n   -- Transport Key Attribute\n   aa-transportKey ATTRIBUTE\
    \ ::= {\n     TYPE TransOp\n     IDENTIFIED BY id-kma-transportKey }\n   id-kma-transportKey\
    \  OBJECT IDENTIFIER ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 15 }\n   TransOp\
    \ ::= ENUMERATED {\n     transport    (1),\n     operational  (2) }\n   -- Key\
    \ Distribution Period Attribute\n   aa-keyDistributionPeriod ATTRIBUTE ::= {\n\
    \     TYPE KeyDistPeriod\n     IDENTIFIED BY id-kma-keyDistPeriod }\n   id-kma-keyDistPeriod\
    \  OBJECT IDENTIFIER ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 5 }\n   KeyDistPeriod\
    \ ::= SEQUENCE {\n     doNotDistBefore  [0] BinaryTime OPTIONAL,\n     doNotDistAfter\
    \       BinaryTime }\n   -- Key Validity Period Attribute\n   aa-keyValidityPeriod\
    \ ATTRIBUTE ::= {\n     TYPE KeyValidityPeriod\n     IDENTIFIED BY id-kma-keyValidityPeriod\
    \ }\n   id-kma-keyValidityPeriod  OBJECT IDENTIFIER ::=\n     { joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1) gov(101)\n       dod(2) infosec(1) keying-material-attributes(13)\
    \ 6 }\n   KeyValidityPeriod ::= SEQUENCE {\n     doNotUseBefore  BinaryTime,\n\
    \     doNotUseAfter   BinaryTime OPTIONAL }\n   -- Key Duration Attribute\n  \
    \ aa-keyDurationPeriod ATTRIBUTE ::= {\n     TYPE KeyDuration\n     IDENTIFIED\
    \ BY id-kma-keyDuration }\n   id-kma-keyDuration  OBJECT IDENTIFIER ::=\n    \
    \ { joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n       dod(2)\
    \ infosec(1) keying-material-attributes(13) 7 }\n   KeyDuration ::= CHOICE {\n\
    \     hours   [0] INTEGER (1..ub-KeyDuration-hours),\n     days        INTEGER\
    \ (1..ub-KeyDuration-days),\n     weeks   [1] INTEGER (1..ub-KeyDuration-weeks),\n\
    \     months  [2] INTEGER (1..ub-KeyDuration-months),\n     years   [3] INTEGER\
    \ (1..ub-KeyDuration-years) }\n   ub-KeyDuration-hours  INTEGER ::=  96\n   ub-KeyDuration-days\
    \   INTEGER ::= 732\n   ub-KeyDuration-weeks  INTEGER ::= 104\n   ub-KeyDuration-months\
    \ INTEGER ::=  72\n   ub-KeyDuration-years  INTEGER ::= 100\n   -- Classification\
    \ Attribute\n   -- The attribute syntax is imported from [RFC6268].  The term\n\
    \   -- \"classification\" is used in this document, but the term \"security\n\
    \   -- label\" is used in [RFC2634].  The terms have the same meaning.\n   aa-classificationAttribute\
    \ ATTRIBUTE ::= {\n     TYPE Classification\n     IDENTIFIED BY id-aa-KP-classification\
    \ }\n   id-aa-KP-classification OBJECT IDENTIFIER ::= id-aa-securityLabel\n  \
    \ Classification ::= ESSSecurityLabel\n   id-enumeratedRestrictiveAttributes OBJECT\
    \ IDENTIFIER ::=\n     { 2 16 840 1 101 2 1 8 3 4 }\n   id-enumeratedPermissiveAttributes\
    \ OBJECT IDENTIFIER ::=\n     { 2 16 840 1 101 2 1 8 3 1 }\n   EnumeratedTag ::=\
    \ SEQUENCE {\n     tagName          OBJECT IDENTIFIER,\n     attributeList   \
    \ SET OF SecurityAttribute }\n   SecurityAttribute ::= INTEGER (0..MAX)\n   --\
    \ Split Identifier Attribute\n   aa-splitIdentifier ATTRIBUTE ::= {\n     TYPE\
    \ SplitID\n     IDENTIFIED BY id-kma-splitID }\n   id-kma-splitID  OBJECT IDENTIFIER\
    \ ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n\
    \       dod(2) infosec(1) keying-material-attributes(13) 11 }\n   SplitID ::=\
    \ SEQUENCE {\n     half        ENUMERATED { a(0), b(1) },\n     combineAlg  AlgorithmIdentifier\n\
    \                   {COMBINE-ALGORITHM, {CombineAlgorithms}}  OPTIONAL }\n   COMBINE-ALGORITHM\
    \ ::= CLASS {\n     &id                OBJECT IDENTIFIER UNIQUE,\n     &Params\
    \            OPTIONAL,\n     &paramPresence     ParamOptions DEFAULT absent,\n\
    \     &smimeCaps         SMIME-CAPS OPTIONAL\n   }\n   WITH SYNTAX {\n     IDENTIFIER\
    \ &id\n     [PARAMS [TYPE &Params] ARE &paramPresence]\n     [SMIME-CAPS &smimeCaps]\n\
    \   }\n   CombineAlgorithms COMBINE-ALGORITHM ::= {\n     ...\n     }\n   -- Key\
    \ Package Type Attribute\n   aa-keyPackageType ATTRIBUTE ::= {\n     TYPE KeyPkgType\n\
    \     IDENTIFIED BY id-kma-keyPkgType }\n   id-kma-keyPkgType  OBJECT IDENTIFIER\
    \ ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n\
    \       dod(2) infosec(1) keying-material-attributes(13) 12 }\n   KeyPkgType ::=\
    \ OBJECT IDENTIFIER\n   -- Signature Usage Attribute\n   aa-signatureUsage-v3\
    \ ATTRIBUTE ::= {\n     TYPE SignatureUsage\n     IDENTIFIED BY id-kma-sigUsageV3\
    \ }\n   id-kma-sigUsageV3  OBJECT IDENTIFIER ::=\n     { joint-iso-itu-t(2) country(16)\
    \ us(840) organization(1) gov(101)\n       dod(2) infosec(1) keying-material-attributes(13)\
    \ 22 }\n   SignatureUsage ::= CMSContentConstraints\n   -- Other Certificate Format\
    \ Attribute\n   aa-otherCertificateFormats ATTRIBUTE ::= {\n     TYPE CertificateChoices\n\
    \     IDENTIFIED BY id-kma-otherCertFormats }\n   id-kma-otherCertFormats OBJECT\
    \ IDENTIFIER ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 19 }\n   --\
    \ PKI Path Attribute\n   aa-pkiPath ATTRIBUTE ::= {\n     TYPE PkiPath\n     IDENTIFIED\
    \ BY id-at-pkiPath }\n   id-at-pkiPath OBJECT IDENTIFIER ::=\n     { joint-iso-itu-t(2)\
    \ ds(5) attributes(4) 70 }\n   PkiPath ::= SEQUENCE SIZE (1..MAX) OF Certificate\n\
    \   -- Useful Certificates Attribute\n   aa-usefulCertificates ATTRIBUTE ::= {\n\
    \     TYPE CertificateSet\n     IDENTIFIED BY id-kma-usefulCerts }\n   id-kma-usefulCerts\
    \ OBJECT IDENTIFIER ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) keying-material-attributes(13) 20 }\n   --\
    \ Key Wrap Attribute\n   aa-keyWrapAlgorithm ATTRIBUTE ::= {\n     TYPE AlgorithmIdentifier{KEY-WRAP,\
    \ {KeyEncryptionAlgorithmSet}}\n     IDENTIFIED BY id-kma-keyWrapAlgorithm }\n\
    \   id-kma-keyWrapAlgorithm OBJECT IDENTIFIER ::=\n     { joint-iso-itu-t(2) country(16)\
    \ us(840) organization(1) gov(101)\n       dod(2) infosec(1) keying-material-attributes(13)\
    \ 21 }\n   KeyEncryptionAlgorithmSet KEY-WRAP ::= { ... }\n   -- Content Decryption\
    \ Key Identifier Attribute\n   aa-contentDecryptKeyIdentifier ATTRIBUTE ::= {\n\
    \     TYPE ContentDecryptKeyID\n     IDENTIFIED BY id-aa-KP-contentDecryptKeyID\
    \ }\n   id-aa-KP-contentDecryptKeyID OBJECT IDENTIFIER ::=\n     { joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1) gov(101)\n       dod(2) infosec(1) attributes(5)\
    \ 66 }\n   ContentDecryptKeyID::= OCTET STRING\n   -- Certificate Pointers Attribute\n\
    \   aa-certificatePointers ATTRIBUTE ::= {\n     TYPE SubjectInfoAccessSyntax\n\
    \     IDENTIFIED BY id-pe-subjectInfoAccess }\n   -- CRL Pointers Attribute\n\
    \   aa-cRLDistributionPoints ATTRIBUTE ::= {\n     TYPE GeneralNames\n     IDENTIFIED\
    \ BY id-aa-KP-crlPointers }\n   id-aa-KP-crlPointers  OBJECT IDENTIFIER ::=\n\
    \     { joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n    \
    \   dod(2) infosec(1) attributes (5) 70 }\n   -- ExtendedErrorCodes\n   id-errorCodes\
    \ OBJECT IDENTIFIER ::=\n     { joint-iso-itu-t(2) country(16) us(840) organization(1)\
    \ gov(101)\n       dod(2) infosec(1) errorCodes(22) }\n   id-missingKeyType OBJECT\
    \ IDENTIFIER ::= {\n     id-errorCodes 1 }\n   id-privacyMarkTooLong OBJECT IDENTIFIER\
    \ ::= {\n     id-errorCodes 2 }\n   id-unrecognizedSecurityPolicy OBJECT IDENTIFIER\
    \ ::= {\n     id-errorCodes 3 }\n   END\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paul Timmel\n   National Information Assurance Research\
    \ Laboratory\n   National Security Agency\n   Email: pstimme@nsa.gov\n   Russ\
    \ Housley\n   Vigil Security, LLC\n   918 Spring Knoll Drive\n   Herndon, VA 20170\n\
    \   United States\n   Email: housley@vigilsec.com\n   Sean Turner\n   IECA, Inc.\n\
    \   3057 Nutley Street, Suite 106\n   Fairfax, VA 22031\n   United States\n  \
    \ Email: turners@ieca.com\n"
