- title: __initial_text__
  contents:
  - "               Message Processing and Dispatching for the\n               Simple\
    \ Network Management Protocol (SNMP)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Message Processing and Dispatching for\n\
    \   SNMP messages within the SNMP architecture [RFC2571].  It defines the\n  \
    \ procedures for dispatching potentially multiple versions of SNMP\n   messages\
    \ to the proper SNMP Message Processing Models, and for\n   dispatching PDUs to\
    \ SNMP applications.  This document also describes\n   one Message Processing\
    \ Model - the SNMPv3 Message Processing Model.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   4.1.1. Sending a Request or Notification .......................\
    \    7\n   4.1.2. Sending a Response to the Network .......................  \
    \  9\n   4.2. Receiving an SNMP Message from the Network ................   11\n\
    \   4.2.1. Message Dispatching of received SNMP Messages ...........   11\n  \
    \ 4.2.2. PDU Dispatching for Incoming Messages ...................   12\n   4.2.2.1.\
    \ Incoming Requests and Notifications ...................   12\n   4.2.2.2. Incoming\
    \ Responses ....................................   14\n   4.3. Application Registration\
    \ for Handling PDU types ...........   15\n   4.4. Application Unregistration\
    \ for Handling PDU Types .........   16\n   5. Definitions .................................................\
    \   16\n   5.1. Definitions for SNMP Message Processing and Dispatching ...  \
    \ 16\n   6. The SNMPv3 Message Format ...................................   20\n\
    \   6.1. msgVersion ................................................   21\n  \
    \ 6.2. msgID .....................................................   21\n   6.3.\
    \ msgMaxSize ................................................   21\n   6.4. msgFlags\
    \ ..................................................   22\n   6.5. msgSecurityModel\
    \ ..........................................   24\n   6.6. msgSecurityParameters\
    \ .....................................   24\n   6.7. scopedPduData .............................................\
    \   24\n   6.8. scopedPDU .................................................  \
    \ 25\n   6.8.1. contextEngineID .........................................   25\n\
    \   6.8.2. contextName .............................................   25\n  \
    \ 6.8.3. data ....................................................   25\n   7.\
    \ Elements of Procedure for v3MP ..............................   25\n   7.1.\
    \ Prepare an Outgoing SNMP Message ..........................   36\n   7.2. Prepare\
    \ Data Elements from an Incoming SNMP Message .......   31\n   8. Intellectual\
    \ Property .......................................   37\n   9. Acknowledgements\
    \ ............................................   37\n   10. Security Considerations\
    \ ....................................   39\n   11. References .................................................\
    \   40\n   12. Editors' Addresses .........................................  \
    \ 41\n   13. Changes From RFC 2272 ......................................   42\n\
    \   14. Full Copyright Statement ...................................   44\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Architecture for describing Internet Management Frameworks\n\
    \   [RFC2571] describes that an SNMP engine is composed of:\n        1) a Dispatcher\n\
    \        2) a Message Processing Subsystem,\n        3) a Security Subsystem,\
    \ and\n        4) an Access Control Subsystem.\n   Applications make use of the\
    \ services of these subsystems.\n   It is important to understand the SNMP architecture\
    \ and its\n   terminology to understand where the Message Processing Subsystem\
    \ and\n   Dispatcher described in this document fit into the architecture and\n\
    \   interact with other subsystems within the architecture.  The reader\n   is\
    \ expected to have read and understood the description of the SNMP\n   architecture,\
    \ defined in [RFC2571].\n   The Dispatcher in the SNMP engine sends and receives\
    \ SNMP messages.\n   It also dispatches SNMP PDUs to SNMP applications. When an\
    \ SNMP\n   message needs to be prepared or when data needs to be extracted from\n\
    \   an SNMP message, the Dispatcher delegates these tasks to a message\n   version-specific\
    \ Message Processing Model within the Message\n   Processing Subsystem.\n   A\
    \ Message Processing Model is responsible for processing a SNMP\n   version-specific\
    \ message and for coordinating the interaction with\n   the Security Subsystem\
    \ to ensure proper security is applied to the\n   SNMP message being handled.\n\
    \   Interactions between the Dispatcher, the Message Processing\n   Subsystem,\
    \ and applications are modeled using abstract data elements\n   and abstract service\
    \ interface primitives defined by the SNMP\n   architecture.\n   Similarly, interactions\
    \ between the Message Processing Subsystem and\n   the Security Subsystem are\
    \ modeled using abstract data elements and\n   abstract service interface primitives\
    \ as defined by the SNMP\n   architecture.\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in RFC 2119.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   The following illustration depicts the Message Processing in\
    \ relation\n   to SNMP applications, the Security Subsystem and Transport Mappings.\n\
    \   +-------------------------------------------------------------------+\n  \
    \ | SNMP Entity                                                       |\n   |\
    \                                                                   |\n   | +---------------------------------------------------------------+\
    \ |\n   | | Applications                                                  | |\n\
    \   | | +-----------+  +--------------+                               | |\n  \
    \ | | | Command   |  | Notification |                               | |\n   |\
    \ | | Generator |  | Originator   | +-----------+ +--------------+| |\n   | |\
    \ +-----------+  +--------------+ | Proxy     | | Other         | |\n   | | +-----------+\
    \  +--------------+ | Forwarder | |Application(s)|| |\n   | | | Command   |  |\
    \ Notification | +-----------+ +--------------+| |\n   | | | Responder |  | Receiver\
    \     |                               | |\n   | | +-----------+  +--------------+\
    \                               | |\n   | +---------------------------------------------------------------+\
    \ |\n   |        ^                ^               ^           ^             |\n\
    \   |        |                |               |           |             |\n  \
    \ |        v                v               v           v             |\n   |\
    \        +--------+-------+---------------+-----------+             |\n   |  \
    \               ^                                                 |\n   |    \
    \             |    +---------------------+  +-----------------+ |\n   |      \
    \           |    | Message Processing  |  | Security        | |\n   | Dispatcher\
    \      v    | Subsystem           |  | Subsystem       | |\n   | +------------------+\
    \ |     +------------+  |  |                 | |\n   | | PDU Dispatcher   | |\
    \  +->| v1MP     * |<--->| +-------------+ | |\n   | |                  | |  |\
    \  +------------+  |  | | Other       | | |\n   | |                  | |  |  +------------+\
    \  |  | | Security    | | |\n   | |                  | |  +->| v2cMP    * |<--->|\
    \ | Model       | | |\n   | | Message          | |  |  +------------+  |  | +-------------+\
    \ | |\n   | | Dispatcher  <-------->+                  |  |                 |\
    \ |\n   | |                  | |  |  +------------+  |  | +-------------+ | |\n\
    \   | |                  | |  +->| v3MP     * |<--->| | User-based  | | |\n  \
    \ | | Transport        | |  |  +------------+  |  | | Security    | | |\n   |\
    \ | Mapping          | |  |  +------------+  |  | | Model       | | |\n   | |\
    \ (e.g RFC 1906)   | |  +->| otherMP  * |<--->| +-------------+ | |\n   | +------------------+\
    \ |     +------------+  |  |                 | |\n   |          ^           +---------------------+\
    \  +-----------------+ |\n   |          |                                    \
    \                    |\n   +----------|--------------------------------------------------------+\n\
    \              v\n     +------------------+\n     |   Network        |\n     +------------------+\n"
- title: 2.1.  The Dispatcher.
  contents:
  - "2.1.  The Dispatcher.\n   The Dispatcher is a key piece of an SNMP engine. There\
    \ is only one in\n   an SNMP engine, and its job is to dispatch tasks to the multiple\n\
    \   version-specific Message Processing Models, and to dispatch PDUs to\n   various\
    \ applications.\n   For outgoing messages, an application provides a PDU to be\
    \ sent, plus\n   the data needed to prepare and send the message, and the application\n\
    \   specifies which version-specific Message Processing Model will be\n   used\
    \ to prepare the message with the desired security processing.\n   Once the message\
    \ is prepared, the Dispatcher sends the message.\n   For incoming messages, the\
    \ Dispatcher determines the SNMP version of\n   the incoming message and passes\
    \ the message to the version-specific\n   Message Processing Model to extract\
    \ the components of the message and\n   to coordinate the processing of security\
    \ services for the message.\n   After version-specific processing, the PDU Dispatcher\
    \ determines\n   which application, if any, should receive the PDU for processing\
    \ and\n   forwards it accordingly.\n   The Dispatcher, while sending and receiving\
    \ SNMP messages, collects\n   statistics about SNMP messages and the behavior\
    \ of the SNMP engine in\n   managed objects to make them accessible to remote\
    \ SNMP entities.\n   This document defines these managed objects, the MIB module\
    \ which\n   contains them, and how these managed objects might be used to provide\n\
    \   useful management.\n"
- title: 2.2.  Message Processing Subsystem
  contents:
  - "2.2.  Message Processing Subsystem\n   The SNMP Message Processing Subsystem\
    \ is the part of an SNMP engine\n   which interacts with the Dispatcher to handle\
    \ the version-specific\n   SNMP messages. It contains one or more Message Processing\
    \ Models.\n   This document describes one Message Processing Model, the SNMPv3\n\
    \   Message Processing Model, in Section 6. The SNMPv3 Message Processing\n  \
    \ Model is defined in a separate section to show that multiple\n   (independent)\
    \ Message Processing Models can exist at the same time\n   and that such Models\
    \ can be described in different documents. The\n   SNMPv3 Message Processing Model\
    \ can be replaced or supplemented with\n   other Message Processing Models in\
    \ the future. Two Message Processing\n   Models which are expected to be developed\
    \ in the future are the\n   SNMPv1 message format [RFC1157] and the SNMPv2c message\
    \ format\n   [RFC1901].  Others may be developed as needed.\n"
- title: 3.  Elements of Message Processing and Dispatching
  contents:
  - "3.  Elements of Message Processing and Dispatching\n   See [RFC2571] for the\
    \ definitions of\n           contextEngineID\n           contextName\n       \
    \    scopedPDU\n           maxSizeResponseScopedPDU\n           securityModel\n\
    \           securityName\n           securityLevel\n           messageProcessingModel\n\
    \   For incoming messages, a version-specific message processing module\n   provides\
    \ these values to the Dispatcher. For outgoing messages, an\n   application provides\
    \ these values to the Dispatcher.\n   For some version-specific processing, the\
    \ values may be extracted\n   from received messages; for other versions, the\
    \ values may be\n   determined by algorithm, or by an implementation-defined mechanism.\n\
    \   The mechanism by which the value is determined is irrelevant to the\n   Dispatcher.\n\
    \   The following additional or expanded definitions are for use within\n   the\
    \ Dispatcher.\n"
- title: 3.1.  messageProcessingModel
  contents:
  - "3.1.  messageProcessingModel\n   The value of messageProcessingModel identifies\
    \ a Message Processing\n   Model.  A Message Processing Model describes the version-specific\n\
    \   procedures for extracting data from messages, generating messages,\n   calling\
    \ upon a securityModel to apply its security services to\n   messages, for converting\
    \ data from a version-specific message format\n   into a generic format usable\
    \ by the Dispatcher, and for converting\n   data from Dispatcher format into a\
    \ version-specific message format.\n"
- title: 3.2.  pduVersion
  contents:
  - "3.2.  pduVersion\n   The value of pduVersion represents a specific version of\
    \ protocol\n   operation and its associated PDU formats, such as SNMPv1 or SNMPv2\n\
    \   [RFC1905].  The values of pduVersion are specific to the version of\n   the\
    \ PDU contained in a message, and the PDUs processed by\n   applications. The\
    \ Dispatcher does not use the value of pduVersion\n   directly.\n   An application\
    \ specifies the pduVersion when it requests the PDU\n   Dispatcher to send a PDU\
    \ to another SNMP engine. The Dispatcher\n   passes the pduVersion to a Message\
    \ Processing Model, so it knows how\n   to handle the PDU properly.\n   For incoming\
    \ messages, pduVersion is provided to the Dispatcher by a\n   version-specific\
    \ Message Processing module. The PDU Dispatcher passes\n   the pduVersion to the\
    \ application so it knows how to handle the PDU\n   properly.  For example, a\
    \ command responder application needs to know\n   whether to use [RFC1905] elements\
    \ of procedure and syntax instead of\n   those specified for SNMPv1.\n"
- title: 3.3.  pduType
  contents:
  - "3.3.  pduType\n   A value of pduType represents a specific type of protocol operation.\n\
    \   The values of pduType are specific to the version of the PDU\n   contained\
    \ in a message.\n   Applications register to support particular pduTypes for particular\n\
    \   contextEngineIDs.\n   For incoming messages, pduType is provided to the Dispatcher\
    \ by a\n   version-specific Message Processing module. It is subsequently used\n\
    \   to dispatch the PDU to the application which registered for the\n   pduType\
    \ for the contextEngineID of the associated scopedPDU.\n"
- title: 3.4.  sendPduHandle
  contents:
  - "3.4.  sendPduHandle\n   This handle is generated for coordinating the processing\
    \ of requests\n   and responses between the SNMP engine and an application. The\
    \ handle\n   must be unique across all version-specific Message Processing Models,\n\
    \   and is of local significance only.\n"
- title: 4.  Dispatcher Elements of Procedure
  contents:
  - "4.  Dispatcher Elements of Procedure\n   This section describes the procedures\
    \ followed by the Dispatcher when\n   generating and processing SNMP messages.\n"
- title: 4.1.  Sending an SNMP Message to the Network
  contents:
  - "4.1.  Sending an SNMP Message to the Network\n   This section describes the procedure\
    \ followed by an SNMP engine\n   whenever it sends an SNMP message.\n"
- title: 4.1.1.  Sending a Request or Notification
  contents:
  - "4.1.1.  Sending a Request or Notification\n   The following procedures are followed\
    \ by the Dispatcher when an\n   application wants to send an SNMP PDU to another\
    \ (remote)\n   application, i.e., to initiate a communication by originating a\n\
    \   message, such as one containing a request or a trap.\n   1) The application\
    \ requests this using the abstract service\n      primitive:\n       statusInformation\
    \ =              -- sendPduHandle if success\n                               \
    \         -- errorIndication if failure\n         sendPdu(\n         IN   transportDomain\
    \           -- transport domain to be used\n         IN   transportAddress   \
    \       -- destination network address\n         IN   messageProcessingModel \
    \   -- typically, SNMP version\n         IN   securityModel             -- Security\
    \ Model to use\n         IN   securityName              -- on behalf of this principal\n\
    \         IN   securityLevel             -- Level of Security requested\n    \
    \     IN   contextEngineID           -- data from/at this entity\n         IN\
    \   contextName               -- data from/in this context\n         IN   pduVersion\
    \                -- the version of the PDU\n         IN   PDU                \
    \       -- SNMP Protocol Data Unit\n         IN   expectResponse            --\
    \ TRUE or FALSE\n              )\n   2) If the messageProcessingModel value does\
    \ not represent a Message\n      Processing Model known to the Dispatcher, then\
    \ an errorIndication\n      (implementation-dependent) is returned to the calling\
    \ application.\n      No further processing is performed.\n   3) The Dispatcher\
    \ generates a sendPduHandle to coordinate subsequent\n      processing.\n   4)\
    \ The Message Dispatcher sends the request to the version-specific\n      Message\
    \ Processing module identified by messageProcessingModel\n      using the abstract\
    \ service primitive:\n      statusInformation =              - success or error\
    \ indication\n        prepareOutgoingMessage(\n        IN   transportDomain  \
    \         -- as specified by application\n        IN   transportAddress      \
    \    -- as specified by application\n        IN   messageProcessingModel    --\
    \ as specified by application\n        IN   securityModel             -- as specified\
    \ by application\n        IN   securityName              -- as specified by application\n\
    \        IN   securityLevel             -- as specified by application\n     \
    \   IN   contextEngineID           -- as specified by application\n        IN\
    \   contextName               -- as specified by application\n        IN   pduVersion\
    \                -- as specified by application\n        IN   PDU            \
    \           -- as specified by application\n        IN   expectResponse      \
    \      -- as specified by application\n        IN   sendPduHandle            \
    \ -- as determined in step 3.\n        OUT  destTransportDomain       -- destination\
    \ transport domain\n        OUT  destTransportAddress      -- destination transport\
    \ address\n        OUT  outgoingMessage           -- the message to send\n   \
    \     OUT  outgoingMessageLength     -- the message length\n             )\n \
    \  5) If the statusInformation indicates an error, the errorIndication\n     \
    \ is returned to the calling application.  No further processing is\n      performed.\n\
    \   6) If the statusInformation indicates success, the sendPduHandle is\n    \
    \  returned to the application, and the outgoingMessage is sent via\n      the\
    \ transport specified by the transportDomain to the address\n      specified by\
    \ the transportAddress.\n   Outgoing Message Processing is complete.\n"
- title: 4.1.2.  Sending a Response to the Network
  contents:
  - "4.1.2.  Sending a Response to the Network\n   The following procedure is followed\
    \ when an application wants to\n   return a response back to the originator of\
    \ an SNMP Request.\n   1) An application can request this using the abstract service\n\
    \      primitive:\n      result =\n      returnResponsePdu(\n       IN   messageProcessingModel\
    \   -- typically, SNMP version\n       IN   securityModel            -- Security\
    \ Model in use\n       IN   securityName             -- on behalf of this principal\n\
    \       IN   securityLevel            -- same as on incoming request\n       IN\
    \   contextEngineID          -- data from/at this SNMP entity\n       IN   contextName\
    \              -- data from/in this context\n       IN   pduVersion          \
    \     -- the version of the PDU\n       IN   PDU                      -- SNMP\
    \ Protocol Data Unit\n       IN   maxSizeResponseScopedPDU -- maximum size of\
    \ Response PDU\n       IN   stateReference           -- reference to state information\n\
    \                                     -- as presented with the request\n     \
    \  IN   statusInformation        -- success or errorIndication\n       )     \
    \                        -- (error counter OID and value\n                   \
    \                  -- when errorIndication)\n   2) The Message Dispatcher sends\
    \ the request to the appropriate\n      Message Processing Model indicated by\
    \ the received value of\n      messageProcessingModel using the abstract service\
    \ primitive:\n      result =                        -- SUCCESS or errorIndication\n\
    \       prepareResponseMessage(\n       IN   messageProcessingModel   -- specified\
    \ by application\n       IN   securityModel            -- specified by application\n\
    \       IN   securityName             -- specified by application\n       IN \
    \  securityLevel            -- specified by application\n       IN   contextEngineID\
    \          -- specified by application\n       IN   contextName              --\
    \ specified by application\n       IN   pduVersion               -- specified\
    \ by application\n       IN   PDU                      -- specified by application\n\
    \       IN   maxSizeResponseScopedPDU -- specified by application\n       IN \
    \  stateReference           -- specified by application\n       IN   statusInformation\
    \        -- specified by application\n       OUT  destTransportDomain      --\
    \ destination transport domain\n       OUT  destTransportAddress     -- destination\
    \ transport address\n       OUT  outgoingMessage          -- the message to send\n\
    \       OUT  outgoingMessageLength    -- the message length\n            )\n \
    \  3) If the result is an errorIndication, the errorIndication is\n      returned\
    \ to the calling application.  No further processing is\n      performed.\n  \
    \ 4) If the result is success, the outgoingMessage is sent over the\n      transport\
    \ specified by the transportDomain to the address\n      specified by the transportAddress.\n\
    \   Message Processing is complete.\n"
- title: 4.2.  Receiving an SNMP Message from the Network
  contents:
  - "4.2.  Receiving an SNMP Message from the Network\n   This section describes the\
    \ procedure followed by an SNMP engine\n   whenever it receives an SNMP message.\n\
    \   Please note, that for the sake of clarity and to prevent the text\n   from\
    \ being even longer and more complicated, some details were\n   omitted from the\
    \ steps below.  In particular, The elements of\n   procedure do not always explicitly\
    \ indicate when state information\n   needs to be released. The general rule is\
    \ that if state information\n   is available when a message is to be \"discarded\
    \ without further\n   processing\", then the state information must also be released\
    \ at that\n   same time.\n"
- title: 4.2.1.  Message Dispatching of received SNMP Messages
  contents:
  - "4.2.1.  Message Dispatching of received SNMP Messages\n   1) The snmpInPkts counter\
    \ [RFC1907] is incremented.\n   2) The version of the SNMP message is determined\
    \ in an\n      implementation-dependent manner.  If the packet cannot be\n   \
    \   sufficiently parsed to determine the version of the SNMP message,\n      then\
    \ the snmpInASNParseErrs [RFC1907] counter is incremented, and\n      the message\
    \ is discarded without further processing.  If the\n      version is not supported,\
    \ then the snmpInBadVersions [RFC1907]\n      counter is incremented, and the\
    \ message is discarded without\n      further processing.\n   3) The origin transportDomain\
    \ and origin transportAddress are\n      determined.\n   4) The message is passed\
    \ to the version-specific Message Processing\n      Model which returns the abstract\
    \ data elements required by the\n      Dispatcher.  This is performed using the\
    \ abstract service\n      primitive:\n      result =                        --\
    \ SUCCESS or errorIndication\n        prepareDataElements(\n        IN   transportDomain\
    \          -- origin as determined in step 3.\n        IN   transportAddress \
    \        -- origin as determined in step 3.\n        IN   wholeMsg           \
    \      -- as received from the network\n        IN   wholeMsgLength          \
    \ -- as received from the network\n        OUT  messageProcessingModel   -- typically,\
    \ SNMP version\n        OUT  securityModel            -- Security Model specified\n\
    \        OUT  securityName             -- on behalf of this principal\n      \
    \  OUT  securityLevel            -- Level of Security specified\n        OUT \
    \ contextEngineID          -- data from/at this entity\n        OUT  contextName\
    \              -- data from/in this context\n        OUT  pduVersion         \
    \      -- the version of the PDU\n        OUT  PDU                      -- SNMP\
    \ Protocol Data Unit\n        OUT  pduType                  -- SNMP PDU type\n\
    \        OUT  sendPduHandle            -- handle for a matched request\n     \
    \   OUT  maxSizeResponseScopedPDU -- maximum size of Response PDU\n        OUT\
    \  statusInformation        -- success or errorIndication\n                  \
    \                    -- (error counter OID and value\n                       \
    \               -- when errorIndication)\n        OUT  stateReference        \
    \   -- reference to state information\n                                      --\
    \ to be used for a possible\n             )                        -- Response\n\
    \   5) If the result is a FAILURE errorIndication, the message is\n      discarded\
    \ without further processing.\n   6) At this point, the abstract data elements\
    \ have been prepared and\n      processing continues as described in Section 4.2.2,\
    \ PDU\n      Dispatching for Incoming Messages.\n"
- title: 4.2.2.  PDU Dispatching for Incoming Messages
  contents:
  - "4.2.2.  PDU Dispatching for Incoming Messages\n   The elements of procedure for\
    \ the dispatching of PDUs depends on the\n   value of sendPduHandle.  If the value\
    \ of sendPduHandle is <none>,\n   then this is a request or notification and the\
    \ procedures specified\n   in Section 4.2.2.1 apply.  If the value of snmpPduHandle\
    \ is not\n   <none>, then this is a response and the procedures specified in\n\
    \   Section 4.2.2.2 apply.\n"
- title: 4.2.2.1.  Incoming Requests and Notifications
  contents:
  - "4.2.2.1.  Incoming Requests and Notifications\n   The following procedures are\
    \ followed for the dispatching of PDUs\n   when the value of sendPduHandle is\
    \ <none>, indicating this is a\n   request or notification.\n   1) The combination\
    \ of contextEngineID and pduType is used to\n      determine which application\
    \ has registered for this request or\n      notification.\n   2) If no application\
    \ has registered for the combination, then\n      a) The snmpUnknownPDUHandlers\
    \ counter is incremented.\n      b) A Response message is generated using the\
    \ abstract service\n         primitive:\n         result =                   \
    \      -- SUCCESS or FAILURE\n         prepareResponseMessage(\n         IN  \
    \ messageProcessingModel    -- as provided by MP module\n         IN   securityModel\
    \             -- as provided by MP module\n         IN   securityName        \
    \      -- as provided by MP module\n         IN   securityLevel             --\
    \ as provided by MP module\n         IN   contextEngineID           -- as provided\
    \ by MP module\n         IN   contextName               -- as provided by MP module\n\
    \         IN   pduVersion                -- as provided by MP module\n       \
    \  IN   PDU                       -- as provided by MP module\n         IN   maxSizeResponseScopedPDU\
    \  -- as provided by MP module\n         IN   stateReference            -- as\
    \ provided by MP module\n         IN   statusInformation         -- errorIndication\
    \ plus\n                                        -- snmpUnknownPDUHandlers OID\n\
    \                                        -- value pair.\n         OUT  destTransportDomain\
    \       -- destination transportDomain\n         OUT  destTransportAddress   \
    \   -- destination transportAddress\n         OUT  outgoingMessage           --\
    \ the message to send\n         OUT  outgoingMessageLength     -- its length\n\
    \         )\n      c) If the result is SUCCESS, then the prepared message is sent\
    \ to\n         the originator of the request as identified by the\n         transportDomain\
    \ and transportAddress.\n      d) The incoming message is discarded without further\
    \ processing.\n         Message Processing for this message is complete.\n   3)\
    \ The PDU is dispatched to the application, using the abstract\n      service\
    \ primitive:\n      processPdu(                     -- process Request/Notification\n\
    \        IN   messageProcessingModel   -- as provided by MP module\n        IN\
    \   securityModel            -- as provided by MP module\n        IN   securityName\
    \             -- as provided by MP module\n        IN   securityLevel        \
    \    -- as provided by MP module\n        IN   contextEngineID          -- as\
    \ provided by MP module\n        IN   contextName              -- as provided\
    \ by MP module\n        IN   pduVersion               -- as provided by MP module\n\
    \        IN   PDU                      -- as provided by MP module\n        IN\
    \   maxSizeResponseScopedPDU -- as provided by MP module\n        IN   stateReference\
    \           -- as provided by MP module\n                                    \
    \  -- needed when sending response\n             )\n      Message processing for\
    \ this message is complete.\n"
- title: 4.2.2.2.  Incoming Responses
  contents:
  - "4.2.2.2.  Incoming Responses\n   The following procedures are followed for the\
    \ dispatching of PDUs\n   when the value of sendPduHandle is not <none>, indicating\
    \ this is a\n   response.\n      1) The value of sendPduHandle is used to determine,\
    \ in an\n         implementation-defined manner, which application is waiting\
    \ for\n         a response associated with this sendPduHandle.\n      2) If no\
    \ waiting application is found, the message is discarded\n         without further\
    \ processing, and the stateReference is released.\n         The snmpUnknownPDUHandlers\
    \ counter is incremented.  Message\n         Processing is complete for this message.\n\
    \      3) Any cached information, including stateReference, about the\n      \
    \   message is discarded.\n      4) The response is dispatched to the application\
    \ using the\n         abstract service primitive:\n         processResponsePdu(\
    \              -- process Response PDU\n           IN   messageProcessingModel\
    \    -- provided by the MP module\n           IN   securityModel             --\
    \ provided by the MP module\n           IN   securityName              -- provided\
    \ by the MP module\n           IN   securityLevel             -- provided by the\
    \ MP module\n           IN   contextEngineID           -- provided by the MP module\n\
    \           IN   contextName               -- provided by the MP module\n    \
    \       IN   pduVersion                -- provided by the MP module\n        \
    \   IN   PDU                       -- provided by the MP module\n           IN\
    \   statusInformation         -- provided by the MP module\n           IN   sendPduHandle\
    \             -- provided by the MP module\n                )\n         Message\
    \ Processing is complete for this message.\n"
- title: 4.3.  Application Registration for Handling PDU types
  contents:
  - "4.3.  Application Registration for Handling PDU types\n   Applications that want\
    \ to process certain PDUs must register with the\n   PDU Dispatcher. Applications\
    \ specify the combination of\n   contextEngineID and pduType(s) for which they\
    \ want to take\n   responsibility\n   1) An application registers according to\
    \ the abstract interface\n      primitive:\n      statusInformation =        \
    \   -- success or errorIndication\n        registerContextEngineID(\n        IN\
    \   contextEngineID        -- take responsibility for this one\n        IN   pduType\
    \                -- the pduType(s) to be registered\n             )\n      Note:\
    \ implementations may provide a means of requesting\n      registration for simultaneous\
    \ multiple contextEngineID values,\n      e.g., all contextEngineID values, and\
    \ may also provide means for\n      requesting simultaneous registration for multiple\
    \ values of\n      pduType.\n   2) The parameters may be checked for validity;\
    \ if they are not, then\n      an errorIndication (invalidParameter) is returned\
    \ to the\n      application.\n   3) Each combination of contextEngineID and pduType\
    \ can be registered\n      only once.  If another application has already registered\
    \ for the\n      specified combination, then an errorIndication (alreadyRegistered)\n\
    \      is returned to the application.\n   4) Otherwise, the registration is saved\
    \ so that SNMP PDUs can be\n      dispatched to this application.\n"
- title: 4.4.  Application Unregistration for Handling PDU Types
  contents:
  - "4.4.  Application Unregistration for Handling PDU Types\n   Applications that\
    \ no longer want to process certain PDUs must\n   unregister with the PDU Dispatcher.\n\
    \   1) An application unregisters using the abstract service primitive:\n    \
    \  unregisterContextEngineID(\n       IN   contextEngineID        -- give up responsibility\
    \ for this\n       IN   pduType                -- the pduType(s) to be unregistered\n\
    \             )\n      Note: implementations may provide means for requesting\n\
    \      unregistration for simultaneous multiple contextEngineID values,\n    \
    \  e.g., all contextEngineID values, and may also provide means for\n      requesting\
    \ simultaneous unregistration for multiple values of\n      pduType.\n   2) If\
    \ the contextEngineID and pduType combination has been\n      registered, then\
    \ the registration is deleted.\n      If no such registration exists, then the\
    \ request is ignored.\n"
- title: 5.  Definitions
  contents:
  - '5.  Definitions

    '
- title: 5.1.  Definitions for SNMP Message Processing and Dispatching
  contents:
  - "5.1.  Definitions for SNMP Message Processing and Dispatching\n   SNMP-MPD-MIB\
    \ DEFINITIONS ::= BEGIN\n   IMPORTS\n       MODULE-COMPLIANCE, OBJECT-GROUP  \
    \       FROM SNMPv2-CONF\n       MODULE-IDENTITY, OBJECT-TYPE,\n       snmpModules,\
    \ Counter32                  FROM SNMPv2-SMI;\n   snmpMPDMIB MODULE-IDENTITY\n\
    \       LAST-UPDATED \"9905041636Z\"              -- 4 April 1999\n       ORGANIZATION\
    \ \"SNMPv3 Working Group\"\n       CONTACT-INFO \"WG-EMail:   snmpv3@lists.tislabs.com\n\
    \                     Subscribe:  majordomo@lists.tislabs.com\n              \
    \                   In message body:  subscribe snmpv3\n                     Chair:\
    \      Russ Mundy\n                                 TIS Labs at Network Associates\n\
    \                     postal:     3060 Washington Road\n                     \
    \            Glenwood, MD 21738\n                                 USA\n      \
    \               EMail:      mundy@tislabs.com\n                     phone:   \
    \   +1 301-854-6889\n                     Co-editor:  Jeffrey Case\n         \
    \                        SNMP Research, Inc.\n                     postal:   \
    \  3001 Kimberlin Heights Road\n                                 Knoxville, TN\
    \ 37920-9716\n                                 USA\n                     EMail:\
    \      case@snmp.com\n                     phone:      +1 423-573-1434\n     \
    \                Co-editor   Dave Harrington\n                               \
    \  Cabletron Systems, Inc.\n                     postal:     Post Office Box 5005\n\
    \                                 MailStop: Durham\n                         \
    \        35 Industrial Way\n                                 Rochester, NH 03867-5005\n\
    \                                 USA\n                     EMail:      dbh@ctron.com\n\
    \                     phone:      +1 603-337-7357\n                     Co-editor:\
    \  Randy Presuhn\n                                 BMC Software, Inc.\n      \
    \               postal:     965 Stewart Drive\n                              \
    \   Sunnyvale, CA 94086\n                                 USA\n              \
    \       EMail:      randy_presuhn@bmc.com\n                     phone:      +1\
    \ 408-616-3100\n                     Co-editor:  Bert Wijnen\n               \
    \                  IBM T. J. Watson Research\n                     postal:   \
    \  Schagen 33\n                                 3461 GL Linschoten\n         \
    \                        Netherlands\n                     EMail:      wijnen@vnet.ibm.com\n\
    \                     phone:      +31 348-432-794\n                    \"\n  \
    \     DESCRIPTION  \"The MIB for Message Processing and Dispatching\"\n      \
    \ REVISION     \"9905041636Z\"              -- 4 April 1999\n       DESCRIPTION\
    \  \"Updated addresses, published as RFC 2572.\"\n       REVISION     \"9709300000Z\"\
    \              -- 30 September 1997\n       DESCRIPTION  \"Original version, published\
    \ as RFC 2272.\"\n       ::= { snmpModules 11 }\n   -- Administrative assignments\
    \ ***************************************\n   snmpMPDAdmin           OBJECT IDENTIFIER\
    \ ::= { snmpMPDMIB 1 }\n   snmpMPDMIBObjects      OBJECT IDENTIFIER ::= { snmpMPDMIB\
    \ 2 }\n   snmpMPDMIBConformance  OBJECT IDENTIFIER ::= { snmpMPDMIB 3 }\n   --\
    \ Statistics for SNMP Messages *************************************\n   snmpMPDStats\
    \           OBJECT IDENTIFIER ::= { snmpMPDMIBObjects 1 }\n   snmpUnknownSecurityModels\
    \ OBJECT-TYPE\n       SYNTAX       Counter32\n       MAX-ACCESS   read-only\n\
    \       STATUS       current\n       DESCRIPTION \"The total number of packets\
    \ received by the SNMP\n                    engine which were dropped because\
    \ they referenced a\n                    securityModel that was not known to or\
    \ supported by\n                    the SNMP engine.\n                   \"\n\
    \       ::= { snmpMPDStats 1 }\n   snmpInvalidMsgs OBJECT-TYPE\n       SYNTAX\
    \       Counter32\n       MAX-ACCESS   read-only\n       STATUS       current\n\
    \       DESCRIPTION \"The total number of packets received by the SNMP\n     \
    \               engine which were dropped because there were invalid\n       \
    \             or inconsistent components in the SNMP message.\n              \
    \     \"\n       ::= { snmpMPDStats 2 }\n   snmpUnknownPDUHandlers OBJECT-TYPE\n\
    \       SYNTAX       Counter32\n       MAX-ACCESS   read-only\n       STATUS \
    \      current\n       DESCRIPTION \"The total number of packets received by the\
    \ SNMP\n                    engine which were dropped because the PDU contained\n\
    \                    in the packet could not be passed to an application\n   \
    \                 responsible for handling the pduType, e.g. no SNMP\n       \
    \             application had registered for the proper\n                    combination\
    \ of the contextEngineID and the pduType.\n                   \"\n       ::= {\
    \ snmpMPDStats 3 }\n   -- Conformance information ******************************************\n\
    \   snmpMPDMIBCompliances OBJECT IDENTIFIER ::= {snmpMPDMIBConformance 1}\n  \
    \ snmpMPDMIBGroups      OBJECT IDENTIFIER ::= {snmpMPDMIBConformance 2}\n   --\
    \ Compliance statements\n   snmpMPDCompliance MODULE-COMPLIANCE\n       STATUS\
    \       current\n       DESCRIPTION \"The compliance statement for SNMP entities\
    \ which\n                    implement the SNMP-MPD-MIB.\n                   \"\
    \n       MODULE    -- this module\n           MANDATORY-GROUPS { snmpMPDGroup\
    \ }\n       ::= { snmpMPDMIBCompliances 1 }\n   snmpMPDGroup OBJECT-GROUP\n  \
    \     OBJECTS {\n                 snmpUnknownSecurityModels,\n               \
    \  snmpInvalidMsgs,\n                 snmpUnknownPDUHandlers\n               }\n\
    \       STATUS       current\n       DESCRIPTION \"A collection of objects providing\
    \ for remote\n                    monitoring of the SNMP Message Processing and\n\
    \                    Dispatching process.\n                   \"\n       ::= {\
    \ snmpMPDMIBGroups 1 }\n   END\n"
- title: 6.  The SNMPv3 Message Format
  contents:
  - "6.  The SNMPv3 Message Format\n   This section defines the SNMPv3 message format\
    \ and the corresponding\n   SNMP version 3 Message Processing Model (v3MP).\n\
    \   SNMPv3MessageSyntax DEFINITIONS IMPLICIT TAGS ::= BEGIN\n       SNMPv3Message\
    \ ::= SEQUENCE {\n           -- identify the layout of the SNMPv3Message\n   \
    \        -- this element is in same position as in SNMPv1\n           -- and SNMPv2c,\
    \ allowing recognition\n           -- the value 3 is used for snmpv3\n       \
    \    msgVersion INTEGER ( 0 .. 2147483647 ),\n           -- administrative parameters\n\
    \           msgGlobalData HeaderData,\n           -- security model-specific parameters\n\
    \           -- format defined by Security Model\n           msgSecurityParameters\
    \ OCTET STRING,\n           msgData  ScopedPduData\n       }\n       HeaderData\
    \ ::= SEQUENCE {\n           msgID      INTEGER (0..2147483647),\n           msgMaxSize\
    \ INTEGER (484..2147483647),\n           msgFlags   OCTET STRING (SIZE(1)),\n\
    \                      --  .... ...1   authFlag\n                      --  ....\
    \ ..1.   privFlag\n                      --  .... .1..   reportableFlag\n    \
    \                  --              Please observe:\n                      -- \
    \ .... ..00   is OK, means noAuthNoPriv\n                      --  .... ..01 \
    \  is OK, means authNoPriv\n                      --  .... ..10   reserved, must\
    \ NOT be used.\n                      --  .... ..11   is OK, means authPriv\n\
    \           msgSecurityModel INTEGER (1..2147483647)\n       }\n       ScopedPduData\
    \ ::= CHOICE {\n           plaintext    ScopedPDU,\n           encryptedPDU OCTET\
    \ STRING  -- encrypted scopedPDU value\n       }\n       ScopedPDU ::= SEQUENCE\
    \ {\n           contextEngineID  OCTET STRING,\n           contextName      OCTET\
    \ STRING,\n           data             ANY -- e.g., PDUs as defined in RFC 1905\n\
    \       }\n   END\n"
- title: 6.1.  msgVersion
  contents:
  - "6.1.  msgVersion\n   The msgVersion field is set to snmpv3(3) and identifies\
    \ the message\n   as an SNMP version 3 Message.\n"
- title: 6.2.  msgID
  contents:
  - "6.2.  msgID\n   The msgID is used between two SNMP entities to coordinate request\n\
    \   messages and responses, and by the v3MP to coordinate the processing\n   of\
    \ the message by different subsystem models within the architecture.\n   Values\
    \ for msgID SHOULD be generated in a manner that avoids re-use\n   of any outstanding\
    \ values.  Doing so provides protection against some\n   replay attacks.  One\
    \ possible implementation strategy would be to use\n   the low-order bits of snmpEngineBoots\
    \ [RFC2571] as the high-order\n   portion of the msgID value and a monotonically\
    \ increasing integer for\n   the low-order portion of msgID.\n   Note that the\
    \ request-id in a PDU may be used by SNMP applications to\n   identify the PDU;\
    \ the msgID is used by the engine to identify the\n   message which carries a\
    \ PDU. The engine needs to identify the message\n   even if decryption of the\
    \ PDU (and request-id) fails.  No assumption\n   should be made that the value\
    \ of the msgID and the value of the\n   request-id are equivalent.\n   The value\
    \ of the msgID field for a response takes the value of the\n   msgID field from\
    \ the message to which it is a response.  By use of\n   the msgID value, an engine\
    \ can distinguish the (potentially multiple)\n   outstanding requests, and thereby\
    \ correlate incoming responses with\n   outstanding requests.  In cases where\
    \ an unreliable datagram service\n   is used, the msgID also provides a simple\
    \ means of identifying\n   messages duplicated by the network.  If a request is\
    \ retransmitted, a\n   new msgID value SHOULD be used for each retransmission.\n"
- title: 6.3.  msgMaxSize
  contents:
  - "6.3.  msgMaxSize\n   The msgMaxSize field of the message conveys the maximum\
    \ message size\n   supported by the sender of the message, i.e., the maximum message\n\
    \   size that the sender can accept when another SNMP engine sends an\n   SNMP\
    \ message (be it a response or any other message) to the sender of\n   this message\
    \ on the transport in use for this message.\n   When an SNMP message is being\
    \ generated, the msgMaxSize is provided\n   by the SNMP engine which generates\
    \ the message.  At the receiving\n   SNMP engine, the msgMaxSize is used to determine\
    \ the maximum message\n   size the sender can accommodate.\n"
- title: 6.4.  msgFlags
  contents:
  - "6.4.  msgFlags\n   The msgFlags field of the message contains several bit fields\
    \ which\n   control processing of the message.\n   The reportableFlag is a secondary\
    \ aid in determining whether a Report\n   PDU must be sent.  It is only used in\
    \ cases where the PDU portion of\n   a message cannot be decoded, due to, for\
    \ example, an incorrect\n   encryption key.  If the PDU can be decoded, the PDU\
    \ type forms the\n   basis for decisions on sending Report PDUs.\n   When the\
    \ reportableFlag is used, if its value is one, a Report PDU\n   MUST be returned\
    \ to the sender under those conditions which can cause\n   the generation of Report\
    \ PDUs.  Similarly, when the reportableFlag is\n   used and its value is zero,\
    \ then a Report PDU MUST NOT be sent.  The\n   reportableFlag MUST always be zero\
    \ when the message contains a PDU\n   from the Unconfirmed Class, such as a Report\
    \ PDU, a response-type PDU\n   (such as a Response PDU), or an unacknowledged\
    \ notification-type PDU\n   (such as an SNMPv2-trap PDU).  The reportableFlag\
    \ MUST always be one\n   for a PDU from the Confirmed Class, include request-type\
    \ PDUs (such\n   as a Get PDU) and an acknowledged notification-type PDUs (such\
    \ as an\n   Inform PDU).\n   If the reportableFlag is set to one for a message\
    \ containing a PDU\n   from the Unconfirmed Class, such as a Report PDU, a response-type\
    \ PDU\n   (such as a Response PDU), or an unacknowledged notification-type PDU\n\
    \   (such as an SNMPv2-trap PDU), then the receiver of that message MUST\n   process\
    \ it as though the reportableFlag had been set to zero.\n   If the reportableFlag\
    \ is set to zero for a message containing a\n   request-type PDU (such as a Get\
    \ PDU) or an acknowledged\n   notification-type PDU (such as an Inform PDU), then\
    \ the receiver of\n   that message must process it as though the reportableFlag\
    \ had been\n   set to one.\n   Report PDUs are generated directly by the SNMPv3\
    \ Message Processing\n   Model, and support engine-to-engine communications, but\
    \ may be passed\n   to applications for processing.\n   An SNMP engine that receives\
    \ a reportPDU may use it to determine what\n   kind of problem was detected by\
    \ the remote SNMP engine.  It can do so\n   based on the error counter included\
    \ as the first (and only) varBind\n   of the reportPDU.  Based on the detected\
    \ error, the SNMP engine may\n   try to send a corrected SNMP message.  If that\
    \ is not possible, it\n   may pass an indication of the error to the application\
    \ on whose\n   behalf the failed SNMP request was issued.\n   The authFlag and\
    \ privFlag portions of the msgFlags field are set by\n   the sender to indicate\
    \ the securityLevel that was applied to the\n   message before it was sent on\
    \ the wire.  The receiver of the message\n   MUST apply the same securityLevel\
    \ when the message is received and\n   the contents are being processed.\n   There\
    \ are three securityLevels, namely noAuthNoPriv, which is less\n   than authNoPriv,\
    \ which is in turn less than authPriv.  See the SNMP\n   architecture document\
    \ [RFC2571] for details about the securityLevel.\n   a) authFlag\n      If the\
    \ authFlag is set to one, then the securityModel used by the\n      SNMP engine\
    \ which sent the message MUST identify the securityName\n      on whose behalf\
    \ the SNMP message was generated and MUST provide,\n      in a securityModel-specific\
    \ manner, sufficient data for the\n      receiver of the message to be able to\
    \ authenticate that\n      identification.  In general, this authentication will\
    \ allow the\n      receiver to determine with reasonable certainty that the message\n\
    \      was:\n      -  sent on behalf of the principal associated with the\n  \
    \       securityName,\n      -  was not redirected,\n      -  was not modified\
    \ in transit, and\n      -  was not replayed.\n      If the authFlag is zero,\
    \ then the securityModel used by the SNMP\n      engine which sent the message\
    \ must identify the securityName on\n      whose behalf the SNMP message was generated\
    \ but it does not need\n      to provide sufficient data for the receiver of the\
    \ message to\n      authenticate the identification, as there is no need to\n\
    \      authenticate the message in this case.\n   b) privFlag\n      If the privFlag\
    \ is set, then the securityModel used by the SNMP\n      engine which sent the\
    \ message MUST also protect the scopedPDU in\n      an SNMP message from disclosure,\
    \ i.e., it MUST encrypt/decrypt the\n      scopedPDU. If the privFlag is zero,\
    \ then the securityModel in use\n      does not need to protect the data from\
    \ disclosure.\n      It is an explicit requirement of the SNMP architecture that\
    \ if\n      privacy is selected, then authentication is also required.  That\n\
    \      means that if the privFlag is set, then the authFlag MUST also be\n   \
    \   set to one.\n      The combination of the authFlag and the privFlag comprises\
    \ a Level\n      of Security as follows:\n         authFlag zero, privFlag zero\
    \ -> securityLevel is noAuthNoPriv\n         authFlag zero, privFlag one  -> invalid\
    \ combination, see below\n         authFlag one,  privFlag zero -> securityLevel\
    \ is authNoPriv\n         authFlag one,  privFlag one  -> securityLevel is authPriv\n\
    \   The elements of procedure (see below) describe the action to be taken\n  \
    \ when the invalid combination of authFlag equal to zero and privFlag\n   equal\
    \ to one is encountered.\n   The remaining bits in msgFlags are reserved, and\
    \ MUST be set to zero\n   when sending a message and SHOULD be ignored when receiving\
    \ a\n   message.\n"
- title: 6.5.  msgSecurityModel
  contents:
  - "6.5.  msgSecurityModel\n   The v3MP supports the concurrent existence of multiple\
    \ Security\n   Models to provide security services for SNMPv3 messages.  The\n\
    \   msgSecurityModel field in an SNMPv3 Message identifies which Security\n  \
    \ Model was used by the sender to generate the message and therefore\n   which\
    \ securityModel must be used by the receiver to perform security\n   processing\
    \ for the message.  The mapping to the appropriate\n   securityModel implementation\
    \ within an SNMP engine is accomplished in\n   an implementation-dependent manner.\n"
- title: 6.6.  msgSecurityParameters
  contents:
  - "6.6.  msgSecurityParameters\n   The msgSecurityParameters field of the SNMPv3\
    \ Message is used for\n   communication between the Security Model modules in\
    \ the sending and\n   receiving SNMP engines. The data in the msgSecurityParameters\
    \ field\n   is used exclusively by the Security Model, and the contents and\n\
    \   format of the data is defined by the Security Model.  This OCTET\n   STRING\
    \ is not interpreted by the v3MP, but is passed to the local\n   implementation\
    \ of the Security Model indicated by the\n   msgSecurityModel field in the message.\n"
- title: 6.7.  scopedPduData
  contents:
  - "6.7.  scopedPduData\n   The scopedPduData field represents either the plain text\
    \ scopedPDU if\n   the privFlag in the msgFlags is zero, or it represents an\n\
    \   encryptedPDU (encoded as an OCTET STRING) which must be decrypted by\n   the\
    \ securityModel in use to produce a plaintext scopedPDU.\n"
- title: 6.8.  scopedPDU
  contents:
  - "6.8.  scopedPDU\n   The scopedPDU contains information to identify an administratively\n\
    \   unique context and a PDU. The object identifiers in the PDU refer to\n   managed\
    \ objects which are (expected to be) accessible within the\n   specified context.\n"
- title: 6.8.1.  contextEngineID
  contents:
  - "6.8.1.  contextEngineID\n   The contextEngineID in the SNMPv3 message, uniquely\
    \ identifies,\n   within an administrative domain, an SNMP entity that may realize\
    \ an\n   instance of a context with a particular contextName.\n   For incoming\
    \ messages, the contextEngineID is used in conjunction\n   with pduType to determine\
    \ to which application the scopedPDU will be\n   sent for processing.\n   For\
    \ outgoing messages, the v3MP sets the contextEngineID to the value\n   provided\
    \ by the application in the request for a message to be sent.\n"
- title: 6.8.2.  contextName
  contents:
  - "6.8.2.  contextName\n   The contextName field in an SNMPv3 message, in conjunction\
    \ with the\n   contextEngineID field, identifies the particular context associated\n\
    \   with the management information contained in the PDU portion of the\n   message.\
    \  The contextName is unique within the SNMP entity specified\n   by the contextEngineID,\
    \ which may realize the managed objects\n   referenced within the PDU.  An application\
    \ which originates a message\n   provides the value for the contextName field\
    \ and this value may be\n   used during processing by an application at the receiving\
    \ SNMP\n   Engine.\n"
- title: 6.8.3.  data
  contents:
  - "6.8.3.  data\n   The data field of the SNMPv3 Message contains the PDU.  Among\
    \ other\n   things, the PDU contains the PDU type that is used by the v3MP to\n\
    \   determine the type of the incoming SNMP message.  The v3MP specifies\n   that\
    \ the PDU must be one of those specified in [RFC1905].\n"
- title: 7.  Elements of Procedure for v3MP
  contents:
  - "7.  Elements of Procedure for v3MP\n   This section describes the procedures\
    \ followed by an SNMP engine when\n   generating and processing SNMP messages\
    \ according to the SNMPv3\n   Message Processing Model.\n   Please note, that\
    \ for the sake of clarity and to prevent the text\n   from being even longer and\
    \ more complicated, some details were\n   omitted from the steps below.\n    \
    \  a) Some steps specify that when some error conditions are\n         encountered\
    \ when processing a received message, a message\n         containing a Report\
    \ PDU is generated and the received message\n         is discarded without further\
    \ processing.  However, a Report-PDU\n         must not be generated unless the\
    \ PDU causing generation of the\n         Report PDU can be determine to be a\
    \ member of the Confirmed\n         Class, or the reportableFlag is set to one\
    \ and the PDU class\n         cannot be determined.\n      b) The elements of\
    \ procedure do not always explicitly indicate\n         when state information\
    \ needs to be released. The general rule\n         is that if state information\
    \ is available when a message is to\n         be \"discarded without further processing\"\
    , then the state\n         information should also be released at that same time.\n"
- title: 7.1.  Prepare an Outgoing SNMP Message
  contents:
  - "7.1.  Prepare an Outgoing SNMP Message\n   This section describes the procedure\
    \ followed to prepare an SNMPv3\n   message from the data elements passed by the\
    \ Message Dispatcher.\n   1) The Message Dispatcher may request that an SNMPv3\
    \ message\n      containing a Read Class, Write Class, or Notification Class PDU\
    \ be\n      prepared for sending.\n      a) It makes such a request according\
    \ to the abstract service\n         primitive:\n         statusInformation = \
    \          -- success or errorIndication\n           prepareOutgoingMessage(\n\
    \           IN   transportDomain        -- requested transport domain\n      \
    \     IN   transportAddress       -- requested destination address\n         \
    \  IN   messageProcessingModel -- typically, SNMP version\n           IN   securityModel\
    \          -- Security Model to use\n           IN   securityName           --\
    \ on behalf of this principal\n           IN   securityLevel          -- Level\
    \ of Security requested\n           IN   contextEngineID        -- data from/at\
    \ this entity\n           IN   contextName            -- data from/in this context\n\
    \           IN   pduVersion             -- version of the PDU\n           IN \
    \  PDU                    -- SNMP Protocol Data Unit\n           IN   expectResponse\
    \         -- TRUE or FALSE *\n           IN   sendPduHandle          -- the handle\
    \ for matching\n                                       -- incoming responses\n\
    \           OUT  destTransportDomain    -- destination transport domain\n    \
    \       OUT  destTransportAddress   -- destination transport address\n       \
    \    OUT  outgoingMessage        -- the message to send\n           OUT  outgoingMessageLength\
    \  -- the length of the message\n           )\n      *  The SNMPv3 Message Processing\
    \ Model does not use the values of\n         expectResponse or pduVersion.\n \
    \     b) A unique msgID is generated.  The number used for msgID should\n    \
    \     not have been used recently, and must not be the same as was\n         used\
    \ for any outstanding request.\n   2) The Message Dispatcher may request that\
    \ an SNMPv3 message\n      containing a Response Class or Internal Class PDU be\
    \ prepared for\n      sending.\n      a) It makes such a request according to\
    \ the abstract service\n         primitive:\n         result =               \
    \         -- SUCCESS or FAILURE\n         prepareResponseMessage(\n          IN\
    \   messageProcessingModel   -- typically, SNMP version\n          IN   securityModel\
    \            -- same as on incoming request\n          IN   securityName     \
    \        -- same as on incoming request\n          IN   securityLevel        \
    \    -- same as on incoming request\n          IN   contextEngineID          --\
    \ data from/at this SNMP entity\n          IN   contextName              -- data\
    \ from/in this context\n          IN   pduVersion               -- version of\
    \ the PDU\n          IN   PDU                      -- SNMP Protocol Data Unit\n\
    \          IN   maxSizeResponseScopedPDU -- maximum size sender can accept\n \
    \         IN   stateReference           -- reference to state\n              \
    \                          -- information presented with\n                   \
    \                     -- the request\n          IN   statusInformation       \
    \ -- success or errorIndication\n                                        -- error\
    \ counter OID and value\n                                        -- when errorIndication\n\
    \          OUT  destTransportDomain      -- destination transport domain\n   \
    \       OUT  destTransportAddress     -- destination transport address\n     \
    \     OUT  outgoingMessage          -- the message to send\n          OUT  outgoingMessageLength\
    \    -- the length of the message\n          )\n      b) The cached information\
    \ for the original request is retrieved\n         via the stateReference, including\n\
    \                  - msgID,\n                  - contextEngineID,\n          \
    \        - contextName,\n                  - securityModel,\n                \
    \  - securityName,\n                  - securityLevel,\n                  - securityStateReference,\n\
    \                  - reportableFlag,\n                  - transportDomain, and\n\
    \                  - transportAddress.\n         The SNMPv3 Message Processing\
    \ Model does not allow cached data\n         to be overridden, except by error\
    \ indications as detailed in\n         (3) below.\n   3) If statusInformation\
    \ contains values for an OID/value combination\n      (potentially also containing\
    \ a securityLevel value,\n      contextEngineID value, or contextName value),\
    \ then\n      a) If reportableFlag is zero, then the original message is\n   \
    \      discarded, and no further processing is done. A result of\n         FAILURE\
    \ is returned. SNMPv3 Message Processing is complete.\n      b) If a PDU is provided,\
    \ it is the PDU from the original request.\n         If possible, extract the\
    \ request-id.\n      c) A Report PDU is prepared:\n         1) the varBindList\
    \ is set to contain the OID and value from the\n            statusInformation\n\
    \         2) error-status is set to 0\n         3) error-index is set to 0.\n\
    \         4) request-id is set to the value extracted in step b)\n           \
    \ Otherwise, request-id is set to 0\n      d) The errorIndication in statusInformation\
    \ may be accompanied by\n         a securityLevel value, a contextEngineID value,\
    \ or a\n         contextName value.\n         1) If statusInformation contains\
    \ a value for securityLevel,\n            then securityLevel is set to that value,\
    \ otherwise it is set\n            to noAuthNoPriv.\n         2) If statusInformation\
    \ contains a value for contextEngineID,\n            then contextEngineID is set\
    \ to that value, otherwise it is\n            set to the value of this entity's\
    \ snmpEngineID.\n         3) If statusInformation contains a value for contextName,\
    \ then\n            contextName is set to that value, otherwise it is set to the\n\
    \            default context of \"\" (zero-length string).\n      e) PDU is set\
    \ to refer to the new Report-PDU.  The old PDU is\n         discarded.\n     \
    \ f) Processing continues with step 6) below.\n   4) If contextEngineID is not\
    \ yet determined, then the contextEngineID\n      is determined, in an implementation-dependent\
    \ manner, possibly\n      using the transportDomain and transportAddress.\n  \
    \ 5) If the contextName is not yet determined, the contextName is set\n      to\
    \ the default context.\n   6) A scopedPDU is prepared from the contextEngineID,\
    \ contextName, and\n      PDU.\n   7) msgGlobalData is constructed as follows\n\
    \      a) The msgVersion field is set to snmpv3(3).\n      b) msgID is set as\
    \ determined in step 1 or 2 above.\n      c) msgMaxSize is set to an implementation-dependent\
    \ value.\n      d) msgFlags are set as follows:\n         -  If securityLevel\
    \ specifies noAuthNoPriv, then authFlag and\n            privFlag are both set\
    \ to zero.\n         -  If securityLevel specifies authNoPriv, then authFlag is\
    \ set\n            to one and privFlag is set to zero.\n         -  If securityLevel\
    \ specifies authPriv, then authFlag is set to\n            one and privFlag is\
    \ set to one.\n         -  If the PDU is from the Unconfirmed Class, then the\n\
    \            reportableFlag is set to zero.\n         -  If the PDU is from the\
    \ Confirmed Class then the\n            reportableFlag is set to one.\n      \
    \   -  All other msgFlags bits are set to zero.\n      e) msgSecurityModel is\
    \ set to the value of securityModel\n   8) If the PDU is from the Response Class\
    \ or the Internal Class, then\n      a) The specified Security Model is called\
    \ to generate the message\n         according to the primitive:\n         statusInformation\
    \ =\n           generateResponseMsg(\n           IN   messageProcessingModel --\
    \ SNMPv3 Message Processing\n                                       -- Model\n\
    \           IN   globalData             -- msgGlobalData from step 7\n       \
    \    IN   maxMessageSize         -- from msgMaxSize (step 7c)\n           IN \
    \  securityModel          -- as determined in step 7e\n           IN   securityEngineID\
    \       -- the value of snmpEngineID\n           IN   securityName           --\
    \ on behalf of this principal\n           IN   securityLevel          -- for the\
    \ outgoing message\n           IN   scopedPDU              -- as prepared in step\
    \ 6)\n           IN   securityStateReference -- as determined in step 2\n    \
    \       OUT  securityParameters     -- filled in by Security Module\n        \
    \   OUT  wholeMsg               -- complete generated message\n           OUT\
    \  wholeMsgLength         -- length of generated message\n           )\n     \
    \    If, upon return from the Security Model, the statusInformation\n        \
    \ includes an errorIndication, then any cached information about\n         the\
    \ outstanding request message is discarded, and an\n         errorIndication is\
    \ returned, so it can be returned to the\n         calling application. SNMPv3\
    \ Message Processing is complete.\n      b) A SUCCESS result is returned. SNMPv3\
    \ Message Processing is\n         complete.\n   9) If the PDU is from the Confirmed\
    \ Class or the Notification Class,\n      then\n      a) If the PDU is from the\
    \ Unconfirmed Class, then securityEngineID\n         is set to the value of this\
    \ entity's snmpEngineID.\n         Otherwise, the snmpEngineID of the target entity\
    \ is determined,\n         in an implementation-dependent manner, possibly using\n\
    \         transportDomain and transportAddress.  The value of\n         securityEngineID\
    \ is set to the value of the target entity's\n         snmpEngineID.\n      b)\
    \ The specified Security Model is called to generate the message\n         according\
    \ to the primitive:\n         statusInformation =\n          generateRequestMsg(\n\
    \          IN  messageProcessingModel -- SNMPv3 Message Processing Model\n   \
    \       IN  globalData             -- msgGlobalData, from step 7\n          IN\
    \  maxMessageSize         -- from msgMaxSize in step 7 c)\n          IN  securityModel\
    \          -- as provided by caller\n          IN  securityEngineID       -- authoritative\
    \ SNMP entity\n                                     -- from step 9 a)\n      \
    \    IN  securityName           -- as provided by caller\n          IN  securityLevel\
    \          -- as provided by caller\n          IN  scopedPDU              -- as\
    \ prepared in step 6\n          OUT securityParameters     -- filled in by Security\
    \ Module\n          OUT wholeMsg               -- complete generated message\n\
    \          OUT wholeMsgLength         -- length of the generated message\n   \
    \       )\n         If, upon return from the Security Model, the statusInformation\n\
    \         includes an errorIndication, then the message is discarded, and\n  \
    \       the errorIndication is returned, so it can be returned to the\n      \
    \   calling application, and no further processing is done.\n         SNMPv3 Message\
    \ Processing is complete.\n      c) If the PDU is from the Confirmed Class, information\
    \ about the\n         outgoing message is cached, and a (implementation-specific)\n\
    \         stateReference is created.  Information to be cached includes\n    \
    \     the values of:\n                      - sendPduHandle\n                \
    \      - msgID\n                      - snmpEngineID\n                      -\
    \ securityModel\n                      - securityName\n                      -\
    \ securityLevel\n                      - contextEngineID\n                   \
    \   - contextName\n      d) A SUCCESS result is returned.  SNMPv3 Message Processing\
    \ is\n         complete.\n"
- title: 7.2.  Prepare Data Elements from an Incoming SNMP Message
  contents:
  - "7.2.  Prepare Data Elements from an Incoming SNMP Message\n   This section describes\
    \ the procedure followed to extract data from an\n   SNMPv3 message, and to prepare\
    \ the data elements required for further\n   processing of the message by the\
    \ Message Dispatcher.\n   1)  The message is passed in from the Message Dispatcher\
    \ according to\n       the abstract service primitive:\n       result =      \
    \                   -- SUCCESS or errorIndication\n         prepareDataElements(\n\
    \         IN  transportDomain          -- origin transport domain\n         IN\
    \  transportAddress         -- origin transport address\n         IN  wholeMsg\
    \                 -- as received from the network\n         IN  wholeMsgLength\
    \           -- as received from the network\n         OUT messageProcessingModel\
    \   -- typically, SNMP version\n         OUT securityModel            -- Security\
    \ Model to use\n         OUT securityName             -- on behalf of this principal\n\
    \         OUT securityLevel            -- Level of Security requested\n      \
    \   OUT contextEngineID          -- data from/at this entity\n         OUT contextName\
    \              -- data from/in this context\n         OUT pduVersion         \
    \      -- version of the PDU\n         OUT PDU                      -- SNMP Protocol\
    \ Data Unit\n         OUT pduType                  -- SNMP PDU type\n        \
    \ OUT sendPduHandle            -- handle for matched request\n         OUT maxSizeResponseScopedPDU\
    \ -- maximum size sender can accept\n         OUT statusInformation        --\
    \ success or errorIndication\n                                      -- error counter\
    \ OID and value\n                                      -- when errorIndication\n\
    \         OUT stateReference           -- reference to state information\n   \
    \                                   -- to be used for a possible\n         ) \
    \                           -- Response\n   2)  If the received message is not\
    \ the serialization (according to\n       the conventions of [RFC1906]) of an\
    \ SNMPv3Message value, then the\n       snmpInASNParseErrs counter [RFC1907] is\
    \ incremented, the message\n       is discarded without further processing, and\
    \ a FAILURE result is\n       returned. SNMPv3 Message Processing is complete.\n\
    \   3)  The values for msgVersion, msgID, msgMaxSize, msgFlags,\n       msgSecurityModel,\
    \ msgSecurityParameters, and msgData are\n       extracted from the message.\n\
    \   4)  If the value of the msgSecurityModel component does not match a\n    \
    \   supported securityModel, then the snmpUnknownSecurityModels\n       counter\
    \ is incremented, the message is discarded without further\n       processing,\
    \ and a FAILURE result is returned. SNMPv3 Message\n       Processing is complete.\n\
    \   5)  The securityLevel is determined from the authFlag and the\n       privFlag\
    \ bits of the msgFlags component as follows:\n       a) If the authFlag is not\
    \ set and the privFlag is not set, then\n          securityLevel is set to noAuthNoPriv.\n\
    \       b) If the authFlag is set and the privFlag is not set, then\n        \
    \  securityLevel is set to authNoPriv.\n       c) If the authFlag is set and the\
    \ privFlag is set, then\n          securityLevel is set to authPriv.\n       d)\
    \ If the authFlag is not set and privFlag is set, then the\n          snmpInvalidMsgs\
    \ counter is incremented, the message is\n          discarded without further\
    \ processing, and a FAILURE result is\n          returned. SNMPv3 Message Processing\
    \ is complete.\n       e) Any other bits in the msgFlags are ignored.\n   6) \
    \ The security module implementing the Security Model as specified\n       by\
    \ the securityModel component is called for authentication and\n       privacy\
    \ services.  This is done according to the abstract service\n       primitive:\n\
    \       statusInformation =            -- errorIndication or success\n       \
    \                               -- error counter OID and\n                   \
    \                   -- value if error\n         processIncomingMsg(\n        \
    \ IN  messageProcessingModel   -- SNMPv3 Message Processing Model\n         IN\
    \  maxMessageSize           -- of the sending SNMP entity\n         IN  securityParameters\
    \       -- for the received message\n         IN  securityModel            --\
    \ for the received message\n         IN  securityLevel            -- Level of\
    \ Security\n         IN  wholeMsg                 -- as received on the wire\n\
    \         IN  wholeMsgLength           -- length as received on the wire\n   \
    \      OUT securityEngineID         -- authoritative SNMP entity\n         OUT\
    \ securityName             -- identification of the principal\n         OUT scopedPDU,\
    \               -- message (plaintext) payload\n         OUT maxSizeResponseScopedPDU\
    \ -- maximum size sender can accept\n         OUT securityStateReference   --\
    \ reference to security state\n         )                            -- information,\
    \ needed for\n                                      -- response\n       If an\
    \ errorIndication is returned by the security module, then\n       a) If statusInformation\
    \ contains values for an OID/value pair,\n          then generation of a Report\
    \ PDU is attempted (see step 3 in\n          section 7.1).\n          1) If the\
    \ scopedPDU has been returned from processIncomingMsg\n             then determine\
    \ contextEngineID, contextName, and PDU.\n          2) Information about the message\
    \ is cached and a\n             stateReference is created (implementation-specific).\n\
    \             Information to be cached includes the values of:\n             \
    \             msgVersion,\n                          msgID,\n                \
    \          securityLevel,\n                          msgFlags,\n             \
    \             msgMaxSize,\n                          securityModel,\n        \
    \                  maxSizeResponseScopedPDU,\n                          securityStateReference\n\
    \          3) Request that a Report-PDU be prepared and sent, according\n    \
    \         to the abstract service primitive:\n             result =          \
    \           -- SUCCESS or FAILURE\n             returnResponsePdu(\n         \
    \    IN  messageProcessingModel   -- SNMPv3(3)\n             IN  securityModel\
    \            -- same as on incoming request\n             IN  securityName   \
    \          -- from processIncomingMsg\n             IN  securityLevel        \
    \    -- same as on incoming request\n             IN  contextEngineID        \
    \  -- from step 6 a) 1)\n             IN  contextName              -- from step\
    \ 6 a) 1)\n             IN  pduVersion               -- SNMPv2-PDU\n         \
    \    IN  PDU                      -- from step 6 a) 1)\n             IN  maxSizeResponseScopedPDU\
    \ -- from processIncomingMsg\n             IN  stateReference           -- from\
    \ step 6 a) 2)\n             IN  statusInformation        -- from processIncomingMsg\n\
    \             )\n       b) The incoming message is discarded without further processing,\n\
    \          and a FAILURE result is returned. SNMPv3 Message Processing is\n  \
    \        complete.\n   7)  The scopedPDU is parsed to extract the contextEngineID,\
    \ the\n       contextName and the PDU.  If any parse error occurs, then the\n\
    \       snmpInASNParseErrs counter [RFC1907] is incremented, the security\n  \
    \     state information is discarded, the message is discarded without\n     \
    \  further processing, and a FAILURE result is returned. SNMPv3\n       Message\
    \ Processing is complete.  Treating an unknown PDU type is\n       treated as\
    \ a parse error is an implementation option.\n   8)  The pduVersion is determined\
    \ in an implementation-dependent\n       manner.  For SNMPv3, the pduVersion would\
    \ be an SNMPv2-PDU.\n   9)  The pduType is determined, in an implementation-dependent\
    \ manner.\n       For RFC 1905, the pduTypes include:\n               - GetRequest-PDU,\n\
    \               - GetNextRequest-PDU,\n               - GetBulkRequest-PDU,\n\
    \               - SetRequest-PDU,\n               - InformRequest-PDU,\n     \
    \          - SNMPv2-Trap-PDU,\n               - Response-PDU,\n              \
    \ - Report-PDU.\n   10) If the pduType is from the Response Class or the Internal\
    \ Class,\n       then\n       a) The value of the msgID component is used to find\
    \ the cached\n          information for a corresponding outstanding Request message.\n\
    \          If no such outstanding Request message is found, then the\n       \
    \   security state information is discarded, the message is\n          discarded\
    \ without further processing, and a FAILURE result is\n          returned. SNMPv3\
    \ Message Processing is complete.\n       b) sendPduHandle is retrieved from the\
    \ cached information.\n       Otherwise, sendPduHandle is set to <none>, an implementation\n\
    \       defined value.\n    11) If the pduType is from the Internal Class, then\n\
    \        a) statusInformation is created using the contents of the\n         \
    \  Report-PDU, in an implementation-dependent manner. This\n           statusInformation\
    \ will be forwarded to the application\n           associated with the sendPduHandle.\n\
    \        b) The cached data for the outstanding message, referred to by\n    \
    \       stateReference, is retrieved.  If the securityModel or\n           securityLevel\
    \ values differ from the cached ones, it is\n           important to recognize\
    \ that Internal Class PDUs delivered at\n           the security level of noAuthNoPriv\
    \ open a window of\n           opportunity for spoofing or replay attacks.  If\
    \ the receiver\n           of such messages is aware of these risks, the use of\
    \ such\n           unauthenticated messages is acceptable and may provide a\n\
    \           useful function for discovering engine IDs or for detecting\n    \
    \       misconfiguration at remote nodes.\n           When the securityModel or\
    \ securityLevel values differ from\n           the cached ones, an implementation\
    \ may retain the cached\n           information about the outstanding Request\
    \ message, in\n           anticipation of the possibility that the Internal Class\
    \ PDU\n           received might be illegitimate.  Otherwise, any cached\n   \
    \        information about the outstanding Request message message is\n      \
    \     discarded.\n        c) The security state information for this incoming\
    \ message is\n           discarded.\n        d) stateReference is set to <none>\n\
    \        e) A SUCCESS result is returned. SNMPv3 Message Processing is\n     \
    \      complete.\n    12) If the pduType is from the Response Class, then\n  \
    \      a) The cached data for the outstanding request, referred to by\n      \
    \     stateReference, is retrieved, including\n                       - snmpEngineID\n\
    \                       - securityModel\n                       - securityName\n\
    \                       - securityLevel\n                       - contextEngineID\n\
    \                       - contextName\n        b) If the values extracted from\
    \ the incoming message differ from\n           the cached data, then any cached\
    \ information about the\n           outstanding Request message is discarded,\
    \ the incoming\n           message is discarded without further processing, and\
    \ a\n           FAILURE result is returned.  SNMPv3 Message Processing is\n  \
    \         complete.\n           When the securityModel or securityLevel values\
    \ differ from\n           the cached ones, an implementation may retain the cached\n\
    \           information about the outstanding Request message, in\n          \
    \ anticipation of the possibility that the Response Class PDU\n           received\
    \ might be illegitimate.\n        c) Otherwise, any cached information about the\
    \ outstanding\n           Request message is discarded, and stateReference is\
    \ set to\n           <none>.\n        d) A SUCCESS result is returned. SNMPv3\
    \ Message Processing is\n           complete.\n    13) If the pduType is from\
    \ the Confirmed Class, then\n        a) If the value of securityEngineID is not\
    \ equal to the value of\n           snmpEngineID, then the security state information\
    \ is\n           discarded, any cached information about this message is\n   \
    \        discarded, the incoming message is discarded without further\n      \
    \     processing, and a FAILURE result is returned.  SNMPv3 Message\n        \
    \   Processing is complete.\n        b) Information about the message is cached\
    \ and a stateReference\n           is created (implementation-specific).  Information\
    \ to be\n           cached includes the values of:\n                        msgVersion,\n\
    \                        msgID,\n                        securityLevel,\n    \
    \                    msgFlags,\n                        msgMaxSize,\n        \
    \                securityModel,\n                        maxSizeResponseScopedPDU,\n\
    \                        securityStateReference\n        c) A SUCCESS result is\
    \ returned. SNMPv3 Message Processing is\n           complete.\n    14) If the\
    \ pduType is from the Unconfirmed Class, then A SUCCESS\n        result is returned.\
    \ SNMPv3 Message Processing is complete.\n"
- title: 8.  Intellectual Property
  contents:
  - "8.  Intellectual Property\n   The IETF takes no position regarding the validity\
    \ or scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards-related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementors or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   This document is the result of the efforts of the SNMPv3\
    \ Working\n   Group.  Some special thanks are in order to the following SNMPv3\
    \ WG\n   members:\n       Harald Tveit Alvestrand (Maxware)\n       Dave Battle\
    \ (SNMP Research, Inc.)\n       Alan Beard (Disney Worldwide Services)\n     \
    \  Paul Berrevoets (SWI Systemware/Halcyon Inc.)\n       Martin Bjorklund (Ericsson)\n\
    \       Uri Blumenthal (IBM T. J. Watson Research Center)\n       Jeff Case (SNMP\
    \ Research, Inc.)\n       John Curran (BBN)\n       Mike Daniele (Compaq Computer\
    \ Corporation)\n       T. Max Devlin (Eltrax Systems)\n       John Flick (Hewlett\
    \ Packard)\n       Rob Frye (MCI)\n       Wes Hardaker (U.C.Davis, Information\
    \ Technology - D.C.A.S.)\n       David Harrington (Cabletron Systems Inc.)\n \
    \      Lauren Heintz (BMC Software, Inc.)\n       N.C. Hien (IBM T. J. Watson\
    \ Research Center)\n       Michael Kirkham (InterWorking Labs, Inc.)\n       Dave\
    \ Levi (SNMP Research, Inc.)\n       Louis A Mamakos (UUNET Technologies Inc.)\n\
    \       Joe Marzot (Nortel Networks)\n       Paul Meyer (Secure Computing Corporation)\n\
    \       Keith McCloghrie (Cisco Systems)\n       Bob Moore (IBM)\n       Russ\
    \ Mundy (TIS Labs at Network Associates)\n       Bob Natale (ACE*COMM Corporation)\n\
    \       Mike O'Dell (UUNET Technologies Inc.)\n       Dave Perkins (DeskTalk)\n\
    \       Peter Polkinghorne (Brunel University)\n       Randy Presuhn (BMC Software,\
    \ Inc.)\n       David Reeder (TIS Labs at Network Associates)\n       David Reid\
    \ (SNMP Research, Inc.)\n       Aleksey Romanov (Quality Quorum)\n       Shawn\
    \ Routhier (Epilogue)\n       Juergen Schoenwaelder (TU Braunschweig)\n      \
    \ Bob Stewart (Cisco Systems)\n       Mike Thatcher (Independent Consultant)\n\
    \       Bert Wijnen (IBM T. J. Watson Research Center)\n   The document is based\
    \ on recommendations of the IETF Security and\n   Administrative Framework Evolution\
    \ for SNMP Advisory Team.  Members\n   of that Advisory Team were:\n       David\
    \ Harrington (Cabletron Systems Inc.)\n       Jeff Johnson (Cisco Systems)\n \
    \      David Levi (SNMP Research Inc.)\n       John Linn (Openvision)\n      \
    \ Russ Mundy (Trusted Information Systems) chair\n       Shawn Routhier (Epilogue)\n\
    \       Glenn Waters (Nortel)\n       Bert Wijnen (IBM T. J. Watson Research Center)\n\
    \   As recommended by the Advisory Team and the SNMPv3 Working Group\n   Charter,\
    \ the design incorporates as much as practical from previous\n   RFCs and drafts.\
    \ As a result, special thanks are due to the authors\n   of previous designs known\
    \ as SNMPv2u and SNMPv2*:\n       Jeff Case (SNMP Research, Inc.)\n       David\
    \ Harrington (Cabletron Systems Inc.)\n       David Levi (SNMP Research, Inc.)\n\
    \       Keith McCloghrie (Cisco Systems)\n       Brian O'Keefe (Hewlett Packard)\n\
    \       Marshall T. Rose (Dover Beach Consulting)\n       Jon Saperia (BGS Systems\
    \ Inc.)\n       Steve Waldbusser (International Network Services)\n       Glenn\
    \ W. Waters (Bell-Northern Research Ltd.)\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The Dispatcher coordinates the processing of\
    \ messages to provide a\n   level of security for management messages and to direct\
    \ the SNMP PDUs\n   to the proper SNMP application(s).\n   A Message Processing\
    \ Model, and in particular the V3MP defined in\n   this document, interacts as\
    \ part of the Message Processing with\n   Security Models in the Security Subsystem\
    \ via the abstract service\n   interface primitives defined in [RFC2571] and elaborated\
    \ above.\n   The level of security actually provided is primarily determined by\n\
    \   the specific Security Model implementation(s) and the specific SNMP\n   application\
    \ implementation(s) incorporated into this framework.\n   Applications have access\
    \ to data which is not secured. Applications\n   should take reasonable steps\
    \ to protect the data from disclosure, and\n   when they send data across the\
    \ network, they should obey the\n   securityLevel and call upon the services of\
    \ an Access Control Model\n   as they apply access control.\n   The values for\
    \ the msgID element used in communication between SNMP\n   entities must be chosen\
    \ to avoid replay attacks.  The values do not\n   need to be unpredictable; it\
    \ is sufficient that they not repeat.\n   When exchanges are carried out over\
    \ an insecure network, there is an\n   open opportunity for a third party to spoof\
    \ or replay messages when\n   any message of an exchange is given at the security\
    \ level of\n   noAuthNoPriv.  For most exchanges, all messages exist at the same\n\
    \   security level.  In the case where the final message is an Internal\n   Class\
    \ PDU, this message may be delivered at a level of noAuthNoPriv\n   or authNoPriv,\
    \ independent of the security level of the preceding\n   messages.  Internal Class\
    \ PDUs delivered at the level of authNoPriv\n   are not considered to pose a security\
    \ hazard.  Internal Class PDUs\n   delivered at the security level of noAuthNoPriv\
    \ open a window of\n   opportunity for spoofing or replay attacks.  If the receiver\
    \ of such\n   messages is aware of these risks, the use of such unauthenticated\n\
    \   messages is acceptable and may provide a useful function for\n   discovering\
    \ engine IDs or for detecting misconfiguration at remote\n   nodes.\n   This document\
    \ also contains a MIB definition module.  None of the\n   objects defined is writable,\
    \ and the information they represent is\n   not deemed to be particularly sensitive.\
    \  However, if they are deemed\n   sensitive in a particular environment, access\
    \ to them should be\n   restricted through the use of appropriately configured\
    \ Security and\n   Access Control models.\n"
- title: 11.  References
  contents:
  - "11.  References\n   [RFC1901]    The SNMPv2 Working Group, Case, J., McCloghrie,\
    \ K.,\n                Rose, M.  and S. Waldbusser, \"Introduction to\n      \
    \          Community-based SNMPv2\", RFC 1901, January 1996.\n   [RFC2578]   \
    \ McCloghrie, K., Perkins, D. and J. Schoenwaelder,\n                \"Structure\
    \ of Management Information Version 2 (SMIv2)\",\n                STD 58, RFC\
    \ 2578, April 1999.\n   [RFC1905]    The SNMPv2 Working Group, Case, J., McCloghrie,\
    \ K.,\n                Rose, M. and S. Waldbusser, \"Protocol Operations for\n\
    \                Version 2 of the Simple Network Management Protocol\n       \
    \         (SNMPv2)\", RFC 1905, January 1996.\n   [RFC1906]    The SNMPv2 Working\
    \ Group, Case, J., McCloghrie, K.,\n                Rose, M. and S. Waldbusser,\
    \ \"Transport Mappings for\n                Version 2 of the Simple Network Management\
    \ Protocol\n                (SNMPv2)\", RFC 1906, January 1996.\n   [RFC1907]\
    \    The SNMPv2 Working Group, Case, J., McCloghrie, K.,\n                Rose,\
    \ M. and S. Waldbusser, \"Management Information Base\n                for Version\
    \ 2 of the Simple Network Management Protocol\n                (SNMPv2)\", RFC\
    \ 1907 January 1996.\n   [RFC1908]    The SNMPv2 Working Group, Case, J., McCloghrie,\
    \ K.,\n                Rose, M. and S. Waldbusser, \"Coexistence between Version\n\
    \                1 and Version 2 of the Internet-standard Network\n          \
    \      Management Framework\", RFC 1908, January 1996.\n   [RFC2119]    Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n                Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2028]    Hovey, R. and S. Bradner, \"\
    The Organizations Involved in\n                the IETF Standards Process\", BCP\
    \ 11, RFC 2028, October\n                1996.\n   [RFC2571]    Harrington, D.,\
    \ Presuhn, R. and B. Wijnen, \"An\n                Architecture for describing\
    \ SNMP Management Frameworks\",\n                RFC 2571, April 1999.\n   [RFC2574]\
    \    Blumenthal, U.  and B. Wijnen, \"The User-Based Security\n              \
    \  Model for Version 3 of the Simple Network Management\n                Protocol\
    \ (SNMPv3)\", RFC 2574, April 1999.\n   [RFC2575]    Wijnen, B., Presuhn, R. \
    \ and K. McCloghrie, \"View-based\n                Access Control Model for the\
    \ Simple Network Management\n                Protocol (SNMP)\", RFC 2575, April\
    \ 1999.\n   [RFC2573]    Levi, D., Meyer, P.  and B. Stewart, \"SNMP\n       \
    \         Applications\", RFC 2573, April 1999.\n   [RFC2570]    Case, J., Mundy,\
    \ R., Partain, D. and B. Stewart,\n                \"Introduction to Version 3\
    \ of the Internet-standard\n                Network Management Framework\", RFC\
    \ 2570, April 1999.\n"
- title: 12.  Editors' Addresses
  contents:
  - "12.  Editors' Addresses\n   Jeffrey Case\n   SNMP Research, Inc.\n   3001 Kimberlin\
    \ Heights Road\n   Knoxville, TN 37920-9716\n   USA\n   Phone:     +1 423-573-1434\n\
    \   EMail:     case@snmp.com\n   Dave Harrington\n   Cabletron Systems, Inc\n\
    \   Post Office Box 5005\n   Mail Stop: Durham\n   35 Industrial Way\n   Rochester,\
    \ NH 03867-5005\n   USA\n   Phone:      +1 603-337-7357\n   EMail:      dbh@ctron.com\n\
    \   Randy Presuhn\n   BMC Software, Inc.\n   965 Stewart Drive\n   Sunnyvale,\
    \ CA 94086\n   USA\n   Phone:      +1 408-616-3100\n   EMail:      randy_presuhn@bmc.com\n\
    \   Bert Wijnen\n   IBM T. J. Watson Research\n   Schagen 33\n   3461 GL Linschoten\n\
    \   Netherlands\n   Phone:      +31 348-432-794\n   EMail:      wijnen@vnet.ibm.com\n"
- title: 13.  Changes From RFC 2272
  contents:
  - "13.  Changes From RFC 2272\n   The following change log records major changes\
    \ from the previous\n   version of this document, RFC 2272.\n      -  Updated\
    \ contact information for editors.\n      -  Made parameter identification in\
    \ prepareResponseMessage()\n         consistent, both internally and with architecture.\n\
    \      -  Made references to processIncomingMsg() consistent, both\n         internally\
    \ and with architecture.\n      -  Deleted superfluous expectResponse parameter\
    \ from\n         processIncomingMsg(), consistent with architecture.\n      -\
    \  Fixed typos.\n      -  Removed sending of a report PDU from step 4 on page\
    \ 30 on RFC\n         2272.\n      -  Use \"PDU Class\" terminology instead of\
    \ directly using RFC 1905\n         PDU types, in order to potentially allow use\
    \ of new PDU types\n         in the future.\n      -  Added intro document to\
    \ references.\n      -  Made various clarifications to the text.\n      -  The\
    \ handling of the reportableFlag has been made consistent.\n      -  The acknowledgement\
    \ list has been updated.\n"
- title: 14.  Full Copyright Statement
  contents:
  - "14.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
