- title: __initial_text__
  contents:
  - "           A Roadmap for Transmission Control Protocol (TCP)\n              \
    \          Specification Documents\n"
- title: Abstract
  contents:
  - "Abstract\n   This document contains a roadmap to the Request for Comments (RFC)\n\
    \   documents relating to the Internet's Transmission Control Protocol\n   (TCP).\
    \  This roadmap provides a brief summary of the documents\n   defining TCP and\
    \ various TCP extensions that have accumulated in the\n   RFC series.  This serves\
    \ as a guide and quick reference for both TCP\n   implementers and other parties\
    \ who desire information contained in\n   the TCP-related RFCs.\n   This document\
    \ obsoletes RFC 4614.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7414.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Core Functionality ..............................................6\n  \
    \ 3. Strongly Encouraged Enhancements ................................8\n    \
    \  3.1. Fundamental Changes ........................................9\n      3.2.\
    \ Congestion Control Extensions .............................10\n      3.3. Loss\
    \ Recovery Extensions ..................................11\n      3.4. Detection\
    \ and Prevention of Spurious Retransmissions ......13\n      3.5. Path MTU Discovery\
    \ ........................................14\n      3.6. Header Compression ........................................15\n\
    \      3.7. Defending Spoofing and Flooding Attacks ...................15\n  \
    \ 4. Experimental Extensions ........................................17\n    \
    \  4.1. Architectural Guidelines ..................................18\n      4.2.\
    \ Fundamental Changes .......................................18\n      4.3. Congestion\
    \ Control Extensions .............................19\n      4.4. Loss Recovery\
    \ Extensions ..................................20\n      4.5. Detection and Prevention\
    \ of Spurious Retransmissions ......21\n      4.6. TCP Timeouts ..............................................22\n\
    \      4.7. Multipath TCP .............................................22\n  \
    \ 5. TCP Parameters at IANA .........................................23\n   6.\
    \ Historic and Undeployed Extensions .............................24\n   7. Support\
    \ Documents ..............................................27\n      7.1. Foundational\
    \ Works ........................................27\n      7.2. Architectural Guidelines\
    \ ..................................29\n      7.3. Difficult Network Environments\
    \ ............................30\n      7.4. Guidance for Developing, Analyzing,\
    \ and Evaluating TCP ....33\n      7.5. Implementation Advice .....................................34\n\
    \      7.6. Tools and Tutorials .......................................36\n  \
    \    7.7. MIB Modules ...............................................37\n    \
    \  7.8. Case Studies ..............................................39\n   8. Undocumented\
    \ TCP Features ......................................40\n   9. Security Considerations\
    \ ........................................41\n   10. References ....................................................42\n\
    \      10.1. Normative References .....................................42\n  \
    \    10.2. Informative References ...................................53\n   Acknowledgments\
    \ ...................................................56\n   Authors' Addresses\
    \ ................................................57\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A correct and efficient implementation of the Transmission\
    \ Control\n   Protocol (TCP) is a critical part of the software of most Internet\n\
    \   hosts.  As TCP has evolved over the years, many distinct documents\n   have\
    \ become part of the accepted standard for TCP.  At the same time,\n   a large\
    \ number of experimental modifications to TCP have also been\n   published in\
    \ the RFC series, along with informational notes, case\n   studies, and other\
    \ advice.\n   As an introduction to newcomers and an attempt to organize the\n\
    \   plethora of information for old hands, this document contains a\n   roadmap\
    \ to the TCP-related RFCs.  It provides a brief summary of the\n   RFC documents\
    \ that define TCP.  This should provide guidance to\n   implementers on the relevance\
    \ and significance of the standards-track\n   extensions, informational notes,\
    \ and best current practices that\n   relate to TCP.\n   This document is not\
    \ an update of RFC 1122 [RFC1122] and is not a\n   rigorous standard for what\
    \ needs to be implemented in TCP.  This\n   document is merely an informational\
    \ roadmap that captures, organizes,\n   and summarizes most of the RFC documents\
    \ that a TCP implementer,\n   experimenter, or student should be aware of.  Particular\
    \ comments or\n   broad categorizations that this document makes about individual\n\
    \   mechanisms and behaviors are not to be taken as definitive, nor\n   should\
    \ the content of this document alone influence implementation\n   decisions.\n\
    \   This roadmap includes a brief description of the contents of each\n   TCP-related\
    \ RFC.  In some cases, we simply supply the abstract or a\n   key summary sentence\
    \ from the text as a terse description.  In\n   addition, a letter code after\
    \ an RFC number indicates its category in\n   the RFC series (see BCP 9 [RFC2026]\
    \ for explanation of these\n   categories):\n   S - Standards Track (Proposed\
    \ Standard, Draft Standard, or Internet\n       Standard)\n   E - Experimental\n\
    \   I - Informational\n   H - Historic\n   B - Best Current Practice\n   U - Unknown\
    \ (not formally defined)\n   Note that the category of an RFC does not necessarily\
    \ reflect its\n   current relevance.  For instance, RFC 5681 [RFC5681] is considered\n\
    \   part of the required core functionality of TCP, although the RFC is\n   only\
    \ a Draft Standard.  Similarly, some Informational RFCs contain\n   significant\
    \ technical proposals for changing TCP.\n   Finally, if an error in the technical\
    \ content has been found after\n   publication of an RFC (at the time of this\
    \ writing), this fact is\n   indicated by the term \"(Errata)\" in the headline\
    \ of the RFC's\n   description.  The contents of the errata can be found through\
    \ the RFC\n   Errata page [Errata].\n   This roadmap is divided into three main\
    \ sections.  Section 2 lists\n   the RFCs that describe absolutely required TCP\
    \ behaviors for proper\n   functioning and interoperability.  Further RFCs that\
    \ describe\n   strongly encouraged, but nonessential, behaviors are listed in\n\
    \   Section 3.  Experimental extensions that are not yet standard\n   practices,\
    \ but that potentially could be in the future, are described\n   in Section 4.\n\
    \   The reader will probably notice that these three sections are broadly\n  \
    \ equivalent to MUST/SHOULD/MAY specifications (per RFC 2119\n   [RFC2119]), and\
    \ although the authors support this intuition, this\n   document is merely descriptive;\
    \ it does not represent a binding\n   Standards Track position.  Individual implementers\
    \ still need to\n   examine the Standards Track RFCs themselves to evaluate specific\n\
    \   requirement levels.\n   Section 5 describes both the procedures that the Internet\
    \ Assigned\n   Numbers Authority (IANA) uses and an RFC author should follow when\n\
    \   new TCP parameters are requested and finally assigned.\n   A small number\
    \ of older experimental extensions that have not been\n   widely implemented,\
    \ deployed, and used are noted in Section 6.  Many\n   other supporting documents\
    \ that are relevant to the development,\n   implementation, and deployment of\
    \ TCP are described in Section 7.\n   A small number of fairly ubiquitous important\
    \ implementation\n   practices that are not currently documented in the RFC series\
    \ are\n   listed in Section 8.\n   Within each section, RFCs are listed in the\
    \ chronological order of\n   their publication dates.\n"
- title: 2.  Core Functionality
  contents:
  - "2.  Core Functionality\n   A small number of documents compose the core specification\
    \ of TCP.\n   These define the required core functionalities of TCP's header\n\
    \   parsing, state machine, congestion control, and retransmission\n   timeout\
    \ computation.  These base specifications must be correctly\n   followed for interoperability.\n\
    \   RFC 793 S: \"Transmission Control Protocol\", STD 7 (September 1981)\n   \
    \           (Errata)\n      This is the fundamental TCP specification document\
    \ [RFC793].\n      Written by Jon Postel as part of the Internet protocol suite's\n\
    \      core, it describes the TCP packet format, the TCP state machine\n     \
    \ and event processing, and TCP's semantics for data transmission,\n      reliability,\
    \ flow control, multiplexing, and acknowledgment.\n      Section 3.6 of RFC 793,\
    \ describing TCP's handling of the IP\n      precedence and security compartment,\
    \ is mostly irrelevant today.\n      RFC 2873 (discussed later in Section 2 below)\
    \ changed the IP\n      precedence handling, and the security compartment portion\
    \ of the\n      API is no longer implemented or used.  In addition, RFC 793 did\n\
    \      not describe any congestion control mechanism.  Otherwise,\n      however,\
    \ the majority of this document still accurately describes\n      modern TCPs.\
    \  RFC 793 is the last of a series of developmental TCP\n      specifications,\
    \ starting in the Internet Experimental Notes (IENs)\n      and continuing in\
    \ the RFC series.\n   RFC 1122 S: \"Requirements for Internet Hosts - Communication\
    \ Layers\"\n               (October 1989)\n      This document [RFC1122] updates\
    \ and clarifies RFC 793 (see above\n      in Section 2), fixing some specification\
    \ bugs and oversights.  It\n      also explains some features such as keep-alives\
    \ and Karn's and\n      Jacobson's RTO estimation algorithms [KP87][Jac88][JK92].\
    \  ICMP\n      interactions are mentioned, and some tips are given for efficient\n\
    \      implementation.  RFC 1122 is an Applicability Statement, listing\n    \
    \  the various features that MUST, SHOULD, MAY, SHOULD NOT, and MUST\n      NOT\
    \ be present in standards-conforming TCP implementations.\n      Unlike a purely\
    \ informational roadmap, this Applicability\n      Statement is a standards document\
    \ and gives formal rules for\n      implementation.\n   RFC 2460 S: \"Internet\
    \ Protocol, Version 6 (IPv6) Specification\"\n               (December 1998) (Errata)\n\
    \      This document [RFC2460] is of relevance to TCP because it defines\n   \
    \   how the pseudo-header for TCP's checksum computation is derived\n      when\
    \ 128-bit IPv6 addresses are used instead of 32-bit IPv4\n      addresses.  Additionally,\
    \ RFC 2675 (see Section 3.1 of this\n      document) describes TCP changes required\
    \ to support IPv6\n      jumbograms.\n   RFC 2873 S: \"TCP Processing of the IPv4\
    \ Precedence Field\" (June 2000)\n               (Errata)\n      This document\
    \ [RFC2873] removes from the TCP specification all\n      processing of the precedence\
    \ bits of the TOS byte of the IP\n      header.  This resolves a conflict over\
    \ the use of these bits\n      between RFC 793 (see above in Section 2) and Differentiated\n\
    \      Services [RFC2474].\n   RFC 5681 S: \"TCP Congestion Control\" (August\
    \ 2009)\n      Although RFC 793 (see above in Section 2) did not contain any\n\
    \      congestion control mechanisms, today congestion control is a\n      required\
    \ component of TCP implementations.  This document\n      [RFC5681] defines congestion\
    \ avoidance and control mechanism for\n      TCP, based on Van Jacobson's 1988\
    \ SIGCOMM paper [Jac88].\n      A number of behaviors that together constitute\
    \ what the community\n      refers to as \"Reno TCP\" is described in RFC 5681.\
    \  The name \"Reno\"\n      comes from the Net/2 release of the 4.3 BSD operating\
    \ system.\n      This is generally regarded as the least common denominator among\n\
    \      TCP flavors currently found running on Internet hosts.  Reno TCP\n    \
    \  includes the congestion control features of slow start, congestion\n      avoidance,\
    \ fast retransmit, and fast recovery.\n      RFC 5681 details the currently accepted\
    \ congestion control\n      mechanism, while RFC 1122, (see above in Section 2)\
    \ mandates that\n      such a congestion control mechanism must be implemented.\
    \  RFC 5681\n      differs slightly from the other documents listed in this section,\n\
    \      as it does not affect the ability of two TCP endpoints to\n      communicate;\
    \ however, congestion control remains a critical\n      component of any widely\
    \ deployed TCP implementation and is\n      required for the avoidance of congestion\
    \ collapse and to ensure\n      fairness among competing flows.\n      RFCs 2001\
    \ and 2581 are the conceptual precursors of RFC 5681.  The\n      most important\
    \ changes relative to RFC 2581 are:\n      (a)  The initial window requirements\
    \ were changed to allow larger\n           Initial Windows as standardized in\
    \ [RFC3390] (see Section 3.2\n           of this document).\n      (b)  During\
    \ slow start and congestion avoidance, the usage of\n           Appropriate Byte\
    \ Counting [RFC3465] (see Section 3.2 of this\n           document) is explicitly\
    \ recommended.\n      (c)  The use of Limited Transmit [RFC3042] (see Section\
    \ 3.3 of\n           this document) is now recommended.\n   RFC 6093 S: \"On the\
    \ Implementation of the TCP Urgent Mechanism\"\n               (January 2011)\n\
    \      This document [RFC6093] analyzes how current TCP stacks process\n     \
    \ TCP urgent indications, and how the behavior of widely deployed\n      middleboxes\
    \ affects the urgent indications processing.  The\n      document updates the\
    \ relevant specifications such that it\n      accommodates current practice in\
    \ processing TCP urgent\n      indications.  Finally, the document raises awareness\
    \ about the\n      reliability of TCP urgent indications in the Internet, and\n\
    \      recommends against the use of urgent mechanism.\n   RFC 6298 S: \"Computing\
    \ TCP's Retransmission Timer\" (June 2011)\n      Abstract of RFC 6298 [RFC6298]:\
    \ \"This document defines the\n      standard algorithm that Transmission Control\
    \ Protocol (TCP)\n      senders are required to use to compute and manage their\n\
    \      retransmission timer.  It expands on the discussion in\n      Section 4.2.3.1\
    \ of RFC 1122 and upgrades the requirement of\n      supporting the algorithm\
    \ from a SHOULD to a MUST.\"  RFC 6298\n      updates RFC 2988 by changing the\
    \ initial RTO from 3s to 1s.\n   RFC 6691 I: \"TCP Options and Maximum Segment\
    \ Size (MSS)\" (July 2012)\n      This document [RFC6691] clarifies what value\
    \ to use with the TCP\n      Maximum Segment Size (MSS) option when IP and TCP\
    \ options are in\n      use.\n"
- title: 3.  Strongly Encouraged Enhancements
  contents:
  - "3.  Strongly Encouraged Enhancements\n   This section describes recommended TCP\
    \ modifications that improve\n   performance and security.  Section 3.1 represents\
    \ fundamental changes\n   to the protocol.  Sections 3.2 and 3.3 list improvements\
    \ over the\n   congestion control and loss recovery mechanisms as specified in\
    \ RFC\n   5681 (see Section 2).  Section 3.4 describes algorithms that allow a\n\
    \   TCP sender to detect whether it has entered loss recovery spuriously.\n  \
    \ Section 3.5 comprises Path MTU Discovery mechanisms.  Schemes for\n   TCP/IP\
    \ header compression are listed in Section 3.6.  Finally,\n   Section 3.7 deals\
    \ with the problem of preventing acceptance of forged\n   segments and flooding\
    \ attacks.\n"
- title: 3.1.  Fundamental Changes
  contents:
  - "3.1.  Fundamental Changes\n   RFCs 2675 and 7323 represent fundamental changes\
    \ to TCP by redefining\n   how parts of the basic TCP header and options are interpreted.\
    \  RFC\n   7323 defines the Window Scale option, which reinterprets the\n   advertised\
    \ receive window.  RFC 2675 specifies that MSS option and\n   urgent pointer fields\
    \ with a value of 65,535 are to be treated\n   specially.\n   RFC 2675 S: \"IPv6\
    \ Jumbograms\" (August 1999) (Errata)\n      IPv6 supports longer datagrams than\
    \ were allowed in IPv4.  These\n      are known as jumbograms, and use with TCP\
    \ has necessitated changes\n      to the handling of TCP's MSS and Urgent fields\
    \ (both 16 bits).\n      This document [RFC2675] explains those changes.  Although\
    \ it\n      describes changes to basic header semantics, these changes should\n\
    \      only affect the use of very large segments, such as IPv6\n      jumbograms,\
    \ which are currently rarely used in the general\n      Internet.\n      Supporting\
    \ the behavior described in this document does not affect\n      interoperability\
    \ with other TCP implementations when IPv4 or non-\n      jumbogram IPv6 is used.\
    \  This document states that jumbograms are\n      to only be used when it can\
    \ be guaranteed that all receiving\n      nodes, including each router in the\
    \ end-to-end path, will support\n      jumbograms.  If even a single node that\
    \ does not support\n      jumbograms is attached to a local network, then no host\
    \ on that\n      network may use jumbograms.  This explains why jumbogram use\
    \ has\n      been rare, and why this document is considered a performance\n  \
    \    optimization and not part of TCP over IPv6's basic functionality.\n   RFC\
    \ 7323 S: \"TCP Extensions for High Performance\" (September 2014)\n      This\
    \ document [RFC7323] defines TCP extensions for window scaling,\n      timestamps,\
    \ and protection against wrapped sequence numbers, for\n      efficient and safe\
    \ operation over paths with large bandwidth-delay\n      products.  These extensions\
    \ are commonly found in currently used\n      systems.  The predecessor of this\
    \ document, RFC 1323, was\n      published in 1992, and is deployed in most TCP\
    \ implementations.\n      This document includes fixes and clarifications based\
    \ on the\n      gained deployment experience.  One specific issued addressed in\n\
    \      this specification is a recommendation how to modify the algorithm\n  \
    \    for estimating the mean RTT when timestamps are used.  RFCs 1072,\n     \
    \ 1185, and 1323 are the conceptual precursors of RFC 7323.\n"
- title: 3.2.  Congestion Control Extensions
  contents:
  - "3.2.  Congestion Control Extensions\n   Two of the most important aspects of\
    \ TCP are its congestion control\n   and loss recovery features.  TCP treats lost\
    \ packets as indicating\n   congestion-related loss and cannot distinguish between\
    \ congestion-\n   related loss and loss due to transmission errors.  Even when\
    \ ECN is\n   in use, there is a rather intimate coupling between congestion\n\
    \   control and loss recovery mechanisms.  There are several extensions\n   to\
    \ both features, and more often than not, a particular extension\n   applies to\
    \ both.  In these two subsections, we group enhancements to\n   TCP's congestion\
    \ control, while the next subsection focus on TCP's\n   loss recovery.\n   RFC\
    \ 3168 S: \"The Addition of Explicit Congestion Notification (ECN)\n         \
    \      to IP\" (September 2001)\n      This document [RFC3168] defines a means\
    \ for end hosts to detect\n      congestion before congested routers are forced\
    \ to discard packets.\n      Although congestion notification takes place at the\
    \ IP level, ECN\n      requires support at the transport level (e.g., in TCP)\
    \ to echo the\n      bits and adapt the sending rate.  This document updates RFC\
    \ 793\n      (see Section 2 of this document) to define two previously unused\n\
    \      flag bits in the TCP header for ECN support.  RFC 3540 (see\n      Section\
    \ 4.3 of this document) provides a supplementary\n      (experimental) means for\
    \ more secure use of ECN, and RFC 2884 (see\n      Section 7.8 of this document)\
    \ provides some sample results from\n      using ECN.\n   RFC 3390 S: \"Increasing\
    \ TCP's Initial Window\" (October 2002)\n      This document [RFC3390] specifies\
    \ an increase in the permitted\n      initial window for TCP from one segment\
    \ to three or four segments\n      during the slow start phase, depending on the\
    \ segment size.\n   RFC 3465 E: \"TCP Congestion Control with Appropriate Byte\
    \ Counting\n               (ABC)\" (February 2003)\n      This document [RFC3465]\
    \ suggests that congestion control use the\n      number of bytes acknowledged\
    \ instead of the number of\n      acknowledgments received.  This change improves\
    \ the performance of\n      TCP in situations where there is no one-to-one relationship\n\
    \      between data segments and acknowledgments (e.g., delayed ACKs or\n    \
    \  ACK loss) and closes a security hole TCP receivers can use to\n      induce\
    \ the sender into increasing the sending rate too rapidly\n      (ACK-division\
    \ [SCWA99] [RFC3449]).  ABC is recommended by RFC 5681\n      (see Section 2 of\
    \ this document).\n   RFC 6633 S: \"Deprecation of ICMP Source Quench Messages\"\
    \ (May 2012)\n      This document [RFC6633] formally deprecates the use of ICMP\
    \ Source\n      Quench messages by transport protocols and recommends against\
    \ the\n      implementation of [RFC1016].\n"
- title: 3.3.  Loss Recovery Extensions
  contents:
  - "3.3.  Loss Recovery Extensions\n   For the typical implementation of the TCP\
    \ fast recovery algorithm\n   described in RFC 5681 (see Section 2 of this document),\
    \ a TCP sender\n   only retransmits a segment after a retransmit timeout has occurred,\n\
    \   or after three duplicate ACKs have arrived triggering the fast\n   retransmit.\
    \  A single RTO might result in the retransmission of\n   several segments, while\
    \ the fast retransmit algorithm in RFC 5681\n   leads only to a single retransmission.\
    \  Hence, multiple losses from a\n   single window of data can lead to a performance\
    \ degradation.\n   Documents listed in this section aim to improve the overall\n\
    \   performance of TCP's standard loss recovery algorithms.  In\n   particular,\
    \ some of them allow TCP senders to recover more\n   effectively when multiple\
    \ segments are lost from a single flight of\n   data.\n   RFC 2018 S: \"TCP Selective\
    \ Acknowledgment Options\" (October 1996)\n               (Errata)\n      When\
    \ more than one packet is lost during one RTT, TCP may\n      experience poor\
    \ performance since a TCP sender can only learn\n      about a single lost packet\
    \ per RTT from cumulative\n      acknowledgments.  This document [RFC2018] defines\
    \ the basic\n      selective acknowledgment (SACK) mechanism for TCP, which can\
    \ help\n      to overcome these limitations.  The receiving TCP returns SACK\n\
    \      blocks to inform the sender which data has been received.  The\n      sender\
    \ can then retransmit only the missing data segments.\n   RFC 3042 S: \"Enhancing\
    \ TCP's Loss Recovery Using Limited Transmit\"\n               (January 2001)\n\
    \      Abstract of RFC 3042 [RFC3042]: \"This document proposes a new\n      Transmission\
    \ Control Protocol (TCP) mechanism that can be used to\n      more effectively\
    \ recover lost segments when a connection's\n      congestion window is small,\
    \ or when a large number of segments are\n      lost in a single transmission\
    \ window.\"  This algorithm described\n      in RFC 3042 is called \"Limited Transmit\"\
    .  Tests from 2004 showed\n      that Limited Transmit was deployed in roughly\
    \ one third of the web\n      servers tested [MAF04].  Limited Transmit is recommended\
    \ by RFC\n      5681 (see Section 2 of this document).\n   RFC 6582 S: \"The NewReno\
    \ Modification to TCP's Fast Recovery\n               Algorithm\" (April 2012)\n\
    \      This document [RFC6582] specifies a modification to the standard\n    \
    \  Reno fast recovery algorithm, whereby a TCP sender can use partial\n      acknowledgments\
    \ to make inferences determining the next segment to\n      send in situations\
    \ where SACK would be helpful but isn't\n      available.  Although it is only\
    \ a slight modification, the NewReno\n      behavior can make a significant difference\
    \ in performance when\n      multiple segments are lost from a single window of\
    \ data.\n      RFCs 2582 and 3782 are the conceptual precursors of RFC 6582. \
    \ The\n      main change in RFC 3782 relative to RFC 2582 was to specify the\n\
    \      Careful variant of NewReno's Fast Retransmit and Fast Recovery\n      algorithms\
    \ and advance those two algorithms from Experimental to\n      Standards Track\
    \ status.  The main change in RFC 6582 relative to\n      RFC 3782 was to solve\
    \ a performance degradation that could occur\n      if FlightSize on Full ACK\
    \ reception is zero.\n   RFC 6675 S: \"A Conservative Loss Recovery Algorithm\
    \ Based on\n               Selective Acknowledgment (SACK) for TCP\" (August 2012)\n\
    \      This document [RFC6675] describes a conservative loss recovery\n      algorithm\
    \ for TCP that is based on the use of the selective\n      acknowledgment (SACK)\
    \ TCP option [RFC2018] (see above in\n      Section 3.3).  The algorithm conforms\
    \ to the spirit of the\n      congestion control specification in RFC 5681 (see\
    \ Section 2 of\n      this document), but allows TCP senders to recover more effectively\n\
    \      when multiple segments are lost from a single flight of data.\n      RFC\
    \ 6675 is a revision of RFC 3517 to address several situations\n      that are\
    \ not handled explicitly before.  In particular,\n      (a)  it improves the loss\
    \ detection in the event that the sender\n           has outstanding segments\
    \ that are smaller than Sender Maximum\n           Segment Size (SMSS).\n    \
    \  (b)  it modifies the definition of a \"duplicate acknowledgment\" to\n    \
    \       utilize the SACK information in detecting loss.\n      (c)  it maintains\
    \ the ACK clock under certain circumstances\n           involving loss at the\
    \ end of the window.\n"
- title: 3.4.  Detection and Prevention of Spurious Retransmissions
  contents:
  - "3.4.  Detection and Prevention of Spurious Retransmissions\n   Spurious retransmission\
    \ timeouts are harmful to TCP performance and\n   multiple algorithms have been\
    \ defined for detecting when spurious\n   retransmissions have occurred, but they\
    \ respond differently with\n   regard to their manners of recovering performance.\
    \  The IETF defined\n   multiple algorithms because there are trade-offs in whether\
    \ or not\n   certain TCP options need to be implemented and concerns about IPR\n\
    \   status.  The Standards Track RFCs in this section are closely related\n  \
    \ to the Experimental RFCs in Section 4.5 also addressing this topic.\n   RFC\
    \ 2883 S: \"An Extension to the Selective Acknowledgement (SACK)\n           \
    \    Option for TCP\" (July 2000)\n      This document [RFC2883] extends RFC 2018\
    \ (see Section 3.3 of this\n      document).  It enables use of the SACK option\
    \ to acknowledge\n      duplicate packets.  With this extension, called DSACK,\
    \ the sender\n      is able to infer the order of packets received at the receiver\n\
    \      and, therefore, to infer when it has unnecessarily retransmitted a\n  \
    \    packet.  A TCP sender could then use this information to detect\n      spurious\
    \ retransmissions (see [RFC3708]).\n   RFC 4015 S: \"The Eifel Response Algorithm\
    \ for TCP\" (February 2005)\n      This document [RFC4015] describes the response\
    \ portion of the\n      Eifel algorithm, which can be used in conjunction with\
    \ one of\n      several methods of detecting when loss recovery has been\n   \
    \   spuriously entered, such as the Eifel detection algorithm in RFC\n      3522\
    \ (see Section 4.5), the algorithm in RFC 3708 (see Section 4.5\n      of this\
    \ document), or F-RTO in RFC 5682 (see below in\n      Section 3.4).\n      Abstract\
    \ of RFC 4015 [RFC4015]: \"Based on an appropriate detection\n      algorithm,\
    \ the Eifel response algorithm provides a way for a TCP\n      sender to respond\
    \ to a detected spurious timeout.  It adapts the\n      retransmission timer to\
    \ avoid further spurious timeouts and\n      (depending on the detection algorithm)\
    \ can avoid the often\n      unnecessary go-back-N retransmits that would otherwise\
    \ be sent.\n      In addition, the Eifel response algorithm restores the congestion\n\
    \      control state in such a way that packet bursts are avoided.\"\n   RFC 5682\
    \ S: \"Forward RTO-Recovery (F-RTO): An Algorithm for Detecting\n            \
    \   Spurious Retransmission Timeouts with TCP\" (September\n               2009)\n\
    \      The F-RTO detection algorithm [RFC5682], originally described in\n    \
    \  RFC 4138, provides an option for inferring spurious retransmission\n      timeouts.\
    \  Unlike some similar detection methods (e.g., RFCs 3522\n      and 3708, both\
    \ listed in Section 4.5 of this document), F-RTO does\n      not rely on the use\
    \ of any TCP options.  The basic idea is to send\n      previously unsent data\
    \ after the first retransmission after a RTO.\n      If the ACKs advance the window,\
    \ the RTO may be declared spurious.\n"
- title: 3.5.  Path MTU Discovery
  contents:
  - "3.5.  Path MTU Discovery\n   The MTUs supported by different links and tunnels\
    \ within the Internet\n   can vary widely.  Fragmentation of packets larger than\
    \ the supported\n   MTU on a hop is undesirable.  As TCP is the segmentation layer\
    \ for\n   dividing an application's byte stream into IP packet payloads, TCP\n\
    \   implementations generally include Path MTU Discovery (PMTUD)\n   mechanisms\
    \ in order to maximize the size of segments they send,\n   without causing fragmentation\
    \ within the network.  Some algorithms\n   may utilize signaling from routers\
    \ on the path to determine that the\n   MTU on some part of the path has been\
    \ exceeded.\n   RFC 1191 S: \"Path MTU Discovery\" (November 1990)\n      Abstract\
    \ of RFC 1191 [RFC1191]: \"This memo describes a technique\n      for dynamically\
    \ discovering the maximum transmission unit (MTU) of\n      an arbitrary internet\
    \ path.  It specifies a small change to the\n      way routers generate one type\
    \ of ICMP message.  For a path that\n      passes through a router that has not\
    \ been so changed, this\n      technique might not discover the correct Path MTU,\
    \ but it will\n      always choose a Path MTU as accurate as, and in many cases\
    \ more\n      accurate than, the Path MTU that would be chosen by current\n  \
    \    practice.\"\n   RFC 1981 S: \"Path MTU Discovery for IP version 6\" (August\
    \ 1996)\n      Abstract of RFC 1981 [RFC1981]: \"This document describes Path\
    \ MTU\n      Discovery for IP version 6.  It is largely derived from RFC 1191,\n\
    \      which describes Path MTU Discovery for IP version 4.\"\n   RFC 4821 S:\
    \ \"Packetization Layer Path MTU Discovery\" (March 2007)\n      Abstract of RFC\
    \ 4821 [RFC4821]: \"This document describes a robust\n      method for Path MTU\
    \ Discovery (PMTUD) that relies on TCP or some\n      other Packetization Layer\
    \ to probe an Internet path with\n      progressively larger packets.  This method\
    \ is described as an\n      extension to RFC 1191 and RFC 1981, which specify\
    \ ICMP-based Path\n      MTU Discovery for IP versions 4 and 6, respectively.\"\
    \n"
- title: 3.6.  Header Compression
  contents:
  - "3.6.  Header Compression\n   Especially in streaming applications, the overhead\
    \ of TCP/IP headers\n   could correspond to more than 50% of the total amount\
    \ of data sent.\n   Such large overheads may be tolerable in wired LANs where\
    \ capacity is\n   often not an issue, but are excessive for WANs and wireless\
    \ systems\n   where bandwidth is scarce.  Header compression schemes for TCP/IP\n\
    \   like RObust Header Compression (ROHC) can significantly compress this\n  \
    \ overhead.  It performs well over links with significant error rates\n   and\
    \ long round-trip times.\n   RFC 1144 S: \"Compressing TCP/IP Headers for Low-Speed\
    \ Serial Links\"\n               (February 1990)\n      This document [RFC1144]\
    \ describes a method for compressing the\n      headers of TCP/IP datagrams to\
    \ improve performance over low-speed\n      serial links.  The method described\
    \ in this document is limited in\n      its handling of TCP options and cannot\
    \ compress the headers of\n      SYNs and FINs.\n   RFC 6846 S: \"RObust Header\
    \ Compression (ROHC): A Profile for TCP/IP\n               (ROHC-TCP)\" (January\
    \ 2013)\n      From the Abstract of RFC 6846 [RFC6846]: \"This document specifies\n\
    \      a RObust Header Compression (ROHC) profile for compression of TCP/\n  \
    \    IP packets.  The profile, called ROHC-TCP, provides efficient and\n     \
    \ robust compression of TCP headers, including frequently used TCP\n      options\
    \ such as selective acknowledgments (SACKs) and Timestamps.\"\n      RFC 6846\
    \ is the successor of RFC 4996.  It fixes a technical issue\n      with the SACK\
    \ compression and clarifies other compression methods\n      used.\n"
- title: 3.7.  Defending Spoofing and Flooding Attacks
  contents:
  - "3.7.  Defending Spoofing and Flooding Attacks\n   By default, TCP lacks any cryptographic\
    \ structures to differentiate\n   legitimate segments from those spoofed from\
    \ malicious hosts.\n   Spoofing valid segments requires correctly guessing a number\
    \ of\n   fields.  The documents in this subsection describe ways to make that\n\
    \   guessing harder or to prevent it from being able to affect a\n   connection\
    \ negatively.\n   RFC 4953 I: \"Defending TCP Against Spoofing Attacks\" (July\
    \ 2007)\n      This document [RFC4953] discusses the recently increased\n    \
    \  vulnerability of long-lived TCP connections, such as BGP\n      connections,\
    \ to reset (send RST) spoofing attacks.  The document\n      analyzes the vulnerability,\
    \ discussing proposed solutions at the\n      transport level and their inherent\
    \ challenges, as well as existing\n      network level solutions and the feasibility\
    \ of their deployment.\n   RFC 5461 I: \"TCP's Reaction to Soft Errors\" (February\
    \ 2009)\n      This document [RFC5461] describes a nonstandard but widely\n  \
    \    implemented modification to TCP's handling of ICMP soft error\n      messages\
    \ that rejects pending connection-requests when such error\n      messages are\
    \ received.  This behavior reduces the likelihood of\n      long delays between\
    \ connection-establishment attempts that may\n      arise in some scenarios.\n\
    \   RFC 4987 I: \"TCP SYN Flooding Attacks and Common Mitigations\" (August\n\
    \               2007)\n      This document [RFC4987] describes the well-known\
    \ TCP SYN flooding\n      attack.  It analyzes and discusses various countermeasures\
    \ against\n      these attacks, including their use and trade-offs.\n   RFC 5925\
    \ S: \"The TCP Authentication Option\" (June 2010)\n      This document [RFC5925]\
    \ describes the TCP Authentication Option\n      (TCP-AO), which is used to authenticate\
    \ TCP segments.  TCP-AO\n      obsoletes the TCP MD5 Signature option of RFC 2385.\
    \  It supports\n      the use of stronger hash functions, protects against replays\
    \ for\n      long-lived TCP connections (as used, e.g., in BGP and LDP),\n   \
    \   coordinates key exchanges between endpoints, and provides a more\n      explicit\
    \ recommendation for external key management.\n      Cryptographic algorithms\
    \ for TCP-AO are defined in [RFC5926] (see\n      below in Section 3.7).\n   RFC\
    \ 5926 S: \"Cryptographic Algorithms for the TCP Authentication\n            \
    \   Option (TCP-AO)\" (June 2010)\n      This document [RFC5926] specifies the\
    \ algorithms and attributes\n      that can be used in TCP Authentication Option's\
    \ (TCP-AO) [RFC5925]\n      (see above in Section 3.7) current manual keying mechanism\
    \ and\n      provides the interface for future message authentication codes\n\
    \      (MACs).\n   RFC 5927 I: \"ICMP Attacks against TCP\" (July 2010)\n    \
    \  Abstract of RFC 5927 [RFC5927]: \"This document discusses the use\n      of\
    \ the Internet Control Message Protocol (ICMP) to perform a\n      variety of\
    \ attacks against the Transmission Control Protocol\n      (TCP).  Additionally,\
    \ this document describes a number of widely\n      implemented modifications\
    \ to TCP's handling of ICMP error messages\n      that help to mitigate these\
    \ issues.\"\n   RFC 5961 S: \"Improving TCP's Robustness to Blind In-Window Attacks\"\
    \n               (August 2010)\n      This document [RFC5961] describes minor\
    \ modifications to how TCP\n      handles inbound segments.  This renders TCP\
    \ connections,\n      especially long-lived connections such as H-323 or BGP,\
    \ less\n      vulnerable to spoofed packet injection attacks where the 4-tuple\n\
    \      (the source and destination IP addresses and the source and\n      destination\
    \ ports) has been guessed.\n   RFC 6528 S: \"Defending against Sequence Number\
    \ Attacks\" (February\n               2012)\n      Abstract of RFC 6528 [RFC6528]:\
    \ \"This document specifies an\n      algorithm for the generation of TCP Initial\
    \ Sequence Numbers\n      (ISNs), such that the chances of an off-path attacker\
    \ guessing the\n      sequence numbers in use by a target connection are reduced.\
    \  This\n      document revises (and formally obsoletes) RFC 1948, and takes the\n\
    \      ISN generation algorithm originally proposed in that document to\n    \
    \  Standards Track, formally updating RFC 793\"\n"
- title: 4.  Experimental Extensions
  contents:
  - "4.  Experimental Extensions\n   The RFCs in this section are either Experimental\
    \ and may become\n   Proposed Standards in the future or are Proposed Standards\
    \ (or\n   Informational), but can be considered experimental due to lack of\n\
    \   wide deployment.  At least part of the reason that they are still\n   experimental\
    \ is to gain more wide-scale experience with them before a\n   standards track\
    \ decision is made.\n   If the Experimental RFC is a proposal for a new protocol\
    \ capability\n   or service, i.e., it requires a new TCP option code point, the\n\
    \   implementation and experimentation should follow [RFC6994] (see\n   Section\
    \ 5 of this document), which describes how the experimental TCP\n   option code\
    \ points can concurrently support multiple TCP extensions.\n   By their publication\
    \ as Experimental RFCs, it is hoped that the\n   community of TCP researchers\
    \ will analyze and test the contents of\n   these RFCs.  Although experimentation\
    \ is encouraged, there is not yet\n   formal consensus that these are fully logical\
    \ and safe behaviors.\n   Wide-scale deployment of implementations that use these\
    \ features\n   should be well thought out in terms of consequences.\n"
- title: 4.1.  Architectural Guidelines
  contents:
  - "4.1.  Architectural Guidelines\n   As multiple flows may share the same paths,\
    \ sections of paths, or\n   other resources, the TCP implementation may benefit\
    \ from sharing\n   information across TCP connections or other flows.  Some experimental\n\
    \   proposals have been documented and some implementations have included\n  \
    \ the concepts.\n   RFC 2140 I: \"TCP Control Block Interdependence\" (April 1997)\n\
    \      This document [RFC2140] suggests how TCP connections between the\n    \
    \  same endpoints might share information, such as their congestion\n      control\
    \ state.  To some degree, this is done in practice by a few\n      operating systems;\
    \ for example, Linux currently has a destination\n      cache.  Although this\
    \ RFC is technically Informational, the\n      concepts it describes are in experimental\
    \ use, so we include it in\n      this section.\n   RFC 3124 S: \"The Congestion\
    \ Manager\" (June 2001)\n      This document [RFC3124] is a related proposal to\
    \ RFC 2140 (see\n      above in Section 4.1).  The idea behind the Congestion\
    \ Manager,\n      moving congestion control outside of individual TCP connections,\n\
    \      represents a modification to the core of TCP, which supports\n      sharing\
    \ information among TCP connections.  Although a Proposed\n      Standard, some\
    \ pieces of the Congestion Manager support\n      architecture have not been specified\
    \ yet, and it has not achieved\n      use or implementation beyond experimental\
    \ stacks, so it is not\n      listed among the standard TCP enhancements in this\
    \ roadmap.\n"
- title: 4.2.  Fundamental Changes
  contents:
  - "4.2.  Fundamental Changes\n   Like the Standards Track documents listed in Section\
    \ 3.1, there also\n   exist new Experimental RFCs that specify fundamental changes\
    \ to TCP.\n   At the time of writing, the only example so far is TCP Fast Open\
    \ that\n   deviates from the standard TCP semantics of [RFC793].\n   RFC 7413\
    \ E: \"TCP Fast Open\" (December 2014)\n      This document [RFC7413] describes\
    \ TCP Fast Open that allows data\n      to be carried in the SYN and SYN-ACK packets\
    \ and consumed by the\n      receiver during the initial connection handshake.\
    \  It saves up to\n      one RTT compared to the standard TCP, which requires\
    \ a three-way\n      handshake to complete before data can be exchanged.\n"
- title: 4.3.  Congestion Control Extensions
  contents:
  - "4.3.  Congestion Control Extensions\n   TCP congestion control has been an extremely\
    \ active research area for\n   many years (see RFC 5783 discussed in Section 7.6\
    \ of this document),\n   as it determines the performance of many applications\
    \ that use TCP.\n   A number of Experimental RFCs address issues with flow start\
    \ up,\n   overshoot, and steady-state behavior in the basic algorithms of RFC\n\
    \   5681 (see Section 2 of this document).  In these subsections,\n   enhancements\
    \ to TCP's congestion control are listed.  The next\n   subsection focuses on\
    \ TCP's loss recovery.\n   RFC 2861 E: \"TCP Congestion Window Validation\" (June\
    \ 2000)\n      This document [RFC2861] suggests reducing the congestion window\n\
    \      over time when no packets are flowing.  This behavior is more\n      aggressive\
    \ than that specified in RFC 5681 (see Section 2 of this\n      document), which\
    \ says that a TCP sender SHOULD set its congestion\n      window to the initial\
    \ window after an idle period of an RTO or\n      greater.\n   RFC 3540 E: \"\
    Robust Explicit Congestion Notification (ECN) Signaling\n               with Nonces\"\
    \ (June 2003)\n      This document [RFC3540] describes an optional addition to\
    \ ECN that\n      protects against accidental or malicious concealment of marked\n\
    \      packets from the TCP sender.\n   RFC 3649 E: \"HighSpeed TCP for Large\
    \ Congestion Windows\" (December\n               2003)\n      This document [RFC3649]\
    \ proposes a modification to TCP's\n      congestion control mechanism for use\
    \ with TCP connections with\n      large congestion windows, to allow TCP to achieve\
    \ a higher\n      throughput in high-bandwidth environments.\n   RFC 3742 E: \"\
    Limited Slow-Start for TCP with Large Congestion\n               Windows\" (March\
    \ 2004)\n      This document [RFC3742] describes a more conservative slow-start\n\
    \      behavior to prevent massive packet losses when a connection uses a\n  \
    \    very large congestion window.\n   RFC 4782 E: \"Quick-Start for TCP and IP\"\
    \ (January 2007) (Errata)\n      This document [RFC4782] specifies the optional\
    \ Quick-Start\n      mechanism for TCP.  This mechanism allows connections to\
    \ use\n      higher sending rates at the beginning of the data transfer or\n \
    \     after an idle period, provided that there is significant unused\n      bandwidth\
    \ along the path, and the sender and all of the routers\n      along the path\
    \ approve this higher rate.\n   RFC 5562 E: \"Adding Explicit Congestion Notification\
    \ (ECN) Capability\n               to TCP's SYN/ACK Packets\" (June 2009)\n  \
    \    This document [RFC5562] describes an experimental modification to\n     \
    \ ECN [RFC3168] (see Section 3.2 of this document) for the use of\n      ECN in\
    \ TCP SYN/ACK packets.  This would allow to ECN-mark rather\n      than drop the\
    \ TCP SYN/ACK packet at an ECN-capable router, and to\n      avoid the severe\
    \ penalty of a retransmission timeout for a\n      connection when the SYN/ACK\
    \ packet is dropped.\n   RFC 5690 I: \"Adding Acknowledgement Congestion Control\
    \ to TCP\"\n               (February 2010)\n      This document [RFC5690] describes\
    \ a congestion control mechanism\n      for acknowledgment (ACKs) traffic in TCP.\
    \  The mechanism is based\n      on the acknowledgment congestion control of the\
    \ Datagram\n      Congestion Control Protocol's (DCCP's) [RFC4340] Congestion\n\
    \      Control Identifier (CCID) 2 [RFC4341].\n   RFC 6928 E: \"Increasing TCP's\
    \ Initial Window\" (April 2013)\n      This document [RFC6928] proposes to increase\
    \ the TCP initial\n      window from between 2 and 4 segments, as specified in\
    \ RFC 3390\n      (see Section 3.2 of this document), to 10 segments with a fallback\n\
    \      to the existing recommendation when performance issues are\n      detected.\n"
- title: 4.4.  Loss Recovery Extensions
  contents:
  - "4.4.  Loss Recovery Extensions\n   RFC 5827 E: \"Early Retransmit for TCP and\
    \ Stream Control Transmission\n               Protocol (SCTP)\" (April 2010)\n\
    \      This document [RFC5827] proposes the \"Early Retransmit\" mechanism\n \
    \     for TCP (and SCTP) that can be used to recover lost segments when\n    \
    \  a connection's congestion window is small.  In certain special\n      circumstances,\
    \ Early Retransmit reduces the number of duplicate\n      acknowledgments required\
    \ to trigger fast retransmit to recover\n      segment losses without waiting\
    \ for a lengthy retransmission\n      timeout.\n   RFC 6069 E: \"Making TCP More\
    \ Robust to Long Connectivity Disruptions\n               (TCP-LCD)\" (December\
    \ 2010)\n      This document [RFC6069] describes how standard ICMP messages can\n\
    \      be used to disambiguate true congestion loss from non-congestion\n    \
    \  loss caused by connectivity disruptions.  It proposes a reversion\n      strategy\
    \ of TCP's retransmission timer that enables a more prompt\n      detection of\
    \ whether or not the connectivity has been restored.\n   RFC 6937 E: \"Proportional\
    \ Rate Reduction for TCP\" (May 2013)\n      This document [RFC6937] describes\
    \ an experimental Proportional\n      Rate Reduction (PRR) algorithm as an alternative\
    \ to the widely\n      deployed Fast Recovery algorithm, to improve the accuracy\
    \ of the\n      amount of data sent by TCP during loss recovery.\n"
- title: 4.5.  Detection and Prevention of Spurious Retransmissions
  contents:
  - "4.5.  Detection and Prevention of Spurious Retransmissions\n   In addition to\
    \ the Standards Track extensions to deal with spurious\n   retransmissions in\
    \ Section 3.4, Experimental proposals have also been\n   documented.\n   RFC 3522\
    \ E: \"The Eifel Detection Algorithm for TCP\" (April 2003)\n      The Eifel detection\
    \ algorithm [RFC3522] allows a TCP sender to\n      detect a posteriori whether\
    \ it has entered loss recovery\n      unnecessarily by using the TCP timestamp\
    \ option to solve the ACK\n      ambiguity.\n   RFC 3708 E: \"Using TCP Duplicate\
    \ Selective Acknowledgement (DSACKs)\n               and Stream Control Transmission\
    \ Protocol (SCTP) Duplicate\n               Transmission Sequence Numbers (TSNs)\
    \ to Detect Spurious\n               Retransmissions\" (February 2004)\n     \
    \ Abstract: \"TCP and Stream Control Transmission Protocol (SCTP)\n      provide\
    \ notification of duplicate segment receipt through\n      Duplicate Selective\
    \ Acknowledgement (DSACKs) and Duplicate\n      Transmission Sequence Number (TSN)\
    \ notification, respectively.\n      This document presents conservative methods\
    \ of using this\n      information to identify unnecessary retransmissions for\
    \ various\n      applications.\"\n   RFC 4653 E: \"Improving the Robustness of\
    \ TCP to Non-Congestion\n               Events\" (August 2006)\n      In the presence\
    \ of non-congestion events, such as packet\n      reordering, an out-of-order\
    \ segment does not necessarily indicate\n      a lost segment and congestion.\
    \  This document [RFC4653] proposes\n      to increase the threshold used to trigger\
    \ a fast retransmission\n      from the fixed value of three duplicate ACKs to\
    \ about one\n      congestion window of data in order to disambiguate true segment\n\
    \      loss from segment reordering.\n"
- title: 4.6.  TCP Timeouts
  contents:
  - "4.6.  TCP Timeouts\n   Besides the well-known retransmission timeout the TCP\
    \ standard\n   [RFC793] defines other timeouts.  This section lists documents\
    \ that\n   deal with TCP's various timeouts.\n   RFC 5482 S: \"TCP User Timeout\
    \ Option\" (March 2009)\n      As a local per-connection parameter, the TCP user\
    \ timeout controls\n      how long transmitted data may remain unacknowledged\
    \ before a\n      connection is forcefully closed.  This document [RFC5482]\n\
    \      specifies the TCP User Timeout Option that allows one end of a TCP\n  \
    \    connection to advertise its current user timeout value.  This\n      information\
    \ provides advice to the other end of the TCP connection\n      to adapt its user\
    \ timeout accordingly.\n"
- title: 4.7.  Multipath TCP
  contents:
  - "4.7.  Multipath TCP\n   MultiPath TCP (MPTCP) is an ongoing effort within the\
    \ IETF that\n   allows a TCP connection to simultaneously use multiple IP addresses\
    \ /\n   interfaces to spread their data across several subflows, while\n   presenting\
    \ a regular TCP interface to applications.  Benefits of this\n   include better\
    \ resource utilization, better throughput and smoother\n   reaction to failures.\
    \  The documents listed in this section specify\n   the Multipath TCP scheme,\
    \ while the documents in Sections 7.2, 7.4,\n   and 7.5 provide some additional\
    \ background information.\n   RFC 6356 E: \"Coupled Congestion Control for Multipath\
    \ Transport\n               Protocols\" (October 2011)\n      This document [RFC6356]\
    \ presents a congestion control algorithm\n      for multipath transport protocols\
    \ such as Multipath TCP.  It\n      couples the congestion control algorithms\
    \ running on different\n      subflows by linking their increase functions, and\
    \ dynamically\n      controls the overall aggressiveness of the multipath flow.\
    \  The\n      result is an algorithm that is fair to TCP at bottlenecks while\n\
    \      moving traffic away from congested links.\n   RFC 6824 E: \"TCP Extensions\
    \ for Multipath Operation with Multiple\n               Addresses\" (January 2013)\
    \ (Errata)\n      This document [RFC6824] presents protocol changes required to\
    \ add\n      multipath capability to TCP; specifically, those for signaling and\n\
    \      setting up multiple paths (\"subflows\"), managing these subflows,\n  \
    \    reassembly of data, and termination of sessions.\n"
- title: 5.  TCP Parameters at IANA
  contents:
  - "5.  TCP Parameters at IANA\n   RFCs listed here describes both the procedures\
    \ that the Internet\n   Assigned Numbers Authority (IANA) uses when handling assignments\
    \ and\n   the procedures an RFC author should follow when requesting new TCP\n\
    \   option code points.\n   RFC 2780 B: \"IANA Allocation Guidelines For Values\
    \ In the Internet\n               Protocol and Related Headers\" (March 2000)\n\
    \      Abstract of RFC 2780 [RFC2780]: \"This memo provides guidance for\n   \
    \   the IANA to use in assigning parameters for fields in the IPv4,\n      IPv6,\
    \ ICMP, UDP and TCP protocol headers.\"\n   RFC 4727 S: \"Experimental Values\
    \ in IPv4, IPv6, ICMPv4, ICMPv6, UDP,\n               and TCP Headers\" (November\
    \ 2006)\n      This document [RFC4727] reserves both TCP options 253 and 254 for\n\
    \      experimentation purposes.  When such experiments are deployed in\n    \
    \  the Internet, they should follow the additional requirements in\n      RFC\
    \ 6994 (see below in Section 5).\n   RFC 6335 B: \"Internet Assigned Numbers Authority\
    \ (IANA) Procedures\n               for the Management of the Service Name and\
    \ Transport\n               Protocol Port Number Registry\" (August 2011)\n  \
    \    From the Abstract of RFC 6335 [RFC6335]: \"This document defines\n      the\
    \ procedures that the Internet Assigned Numbers Authority (IANA)\n      uses when\
    \ handling assignment and other requests related to the\n      Service Name and\
    \ Transport Protocol Port Number registry.\"\n   RFC 6994 S: \"Shared Use of Experimental\
    \ TCP Options (August 2013)\n      This document [RFC6994] describes how the experimental\
    \ TCP option\n      code points can concurrently support multiple TCP extensions,\
    \ even\n      within the same connection.  It creates an IANA registry for\n \
    \     extensions to the experimental code points.\n"
- title: 6.  Historic and Undeployed Extensions
  contents:
  - "6.  Historic and Undeployed Extensions\n   The RFCs listed here define extensions\
    \ that have thus far failed to\n   arouse substantial interest from implementers\
    \ and have never seen\n   widespread deployment or were found to be defective\
    \ for general use.\n   Most of them were reclassified by [RFC6247] to Historic\
    \ status.\n   RFC 721 U: \"Out-of-Band Control Signals in a Host-to-Host Protocol\"\
    \n               (September 1976): lack of interest\n      RFC 721 [RFC721] addresses\
    \ the problem of implementing a reliable\n      out-of-band signal (interrupts)\
    \ for use in a host-to-host\n      protocol.  The proposal was not included in\
    \ the final TCP\n      specification.\n   RFC 1078 U: \"TCP Port Service Multiplexer\
    \ (TCPMUX)\" (November 1988):\n               lack of interest\n      This document\
    \ [RFC1078] proposes a protocol to contact multiple\n      services on a single\
    \ well-known TCP port using a service name\n      instead of a well-known number.\n\
    \   RFC 1106 H: \"TCP Big Window and Nak Options\" (June 1989): found\n      \
    \         defective\n      This RFC [RFC1106] defined an alternative to the Window\
    \ Scale\n      option for using large windows and described the \"negative\n \
    \     acknowledgment\" or NAK option.  There is a comparison of NAK and\n    \
    \  SACK methods and early discussion of TCP over satellite issues.\n      RFC\
    \ 1110 (see below in Section 6) explains some problems with the\n      approaches\
    \ described in RFC 1106.  The options described in this\n      document have not\
    \ been adopted by the larger community, although\n      NAKs are used in the SCPS-TP\
    \ adaptation of TCP for satellite and\n      spacecraft use, developed by the\
    \ Consultative Committee for Space\n      Data Systems (CCSDS).\n   RFC 1110 H:\
    \ \"A Problem with the TCP Big Window Option\" (August 1989):\n              \
    \ deprecates RFC 1106\n      Abstract of RFC 1110 [RFC1110]: \"The TCP Big Window\
    \ option\n      discussed in RFC 1106 will not work properly in an Internet\n\
    \      environment which has both a high bandwidth * delay product and\n     \
    \ the possibility of disordering and duplicating packets.  In such\n      networks,\
    \ the window size must not be increased without a similar\n      increase in the\
    \ sequence number space.  Therefore, a different\n      approach to big windows\
    \ should be taken in the Internet.\"\n   RFC 1146 H: \"TCP Alternate Checksum\
    \ Options\" (March 1990): lack of\n               interest\n      This document\
    \ [RFC1146] defined more robust TCP checksums than the\n      16-bit ones-complement\
    \ in use today.  A typographical error in RFC\n      1145 is fixed in RFC 1146;\
    \ otherwise, the documents are the same.\n   RFC 1263 I: \"TCP Extensions Considered\
    \ Harmful\" (October 1991): lack\n               of interest\n      This document\
    \ [RFC1263] argues against \"backwards compatible\" TCP\n      extensions.  Specifically\
    \ mentioned are several TCP enhancements\n      that have been successful, including\
    \ timestamps, window scaling,\n      PAWS, and SACK.  RFC 1263 presents an alternative\
    \ approach called\n      \"protocol evolution\", whereby several evolutionary\
    \ versions of TCP\n      would exist on hosts.  These distinct TCP versions would\
    \ represent\n      upgrades to each other and could be header incompatible.\n\
    \      Interoperability would be provided by having a virtualization\n      layer\
    \ select the right TCP version for a particular connection.\n      This idea did\
    \ not catch on with the community, while the type of\n      extensions RFC 1263\
    \ specifically targeted as harmful did become\n      popular.\n   RFC 1379 H:\
    \ \"Extending TCP for Transactions -- Concepts\" (November\n               1992):\
    \ found defective\n      See RFC 1644, in Section 6 below.\n   RFC 1644 H: \"\
    T/TCP -- TCP Extensions for Transactions Functional\n               Specification\"\
    \ (July 1994): found defective\n      The inventors of TCP believed that cached\
    \ connection state could\n      have been used to eliminate TCP's three-way handshake,\
    \ to support\n      two-packet request/response exchanges.  RFC 1379 [RFC1379]\
    \ (see\n      above in Section 6) and RFC 1644 [RFC1644] show that this is far\n\
    \      from simple.  Furthermore, T/TCP floundered on the ease of denial-\n  \
    \    of-service attacks that can result.  One idea pioneered by T/TCP\n      lives\
    \ on in RFC 2140 (see Section 4.1 of this document), in the\n      sharing of\
    \ state across connections.\n   RFC 1693 H: \"An Extension to TCP: Partial Order\
    \ Service\" (November\n               1994): lack of interest\n      This document\
    \ [RFC1693] defines a TCP extension for applications\n      that do not care about\
    \ the order in which application-layer\n      objects are received.  Examples\
    \ are multimedia and database\n      applications.  In practice, these applications\
    \ either accept the\n      possible performance loss because of TCP's strict ordering\
    \ or use\n      specialized transport protocols other than TCP, such as PR-SCTP\n\
    \      [RFC3758].\n   RFC 1705 I: \"Six Virtual Inches to the Left: The Problem\
    \ with IPng\"\n               (October 1994): lack of interest\n      To overcome\
    \ the exhaustion of the IP class B address space, this\n      document [RFC1705]\
    \ suggests that a new version of TCP (TCPng)\n      needs to be developed and\
    \ deployed.  It proposes that a globally\n      unique address be assigned to\
    \ the transport layer to uniquely\n      identify an Internet host without specifying\
    \ any routing\n      information.  Later work on splitting locator and identifier\n\
    \      values is summarized well in [RFC6115], but no resulting changes\n    \
    \  to TCP have occurred.\n   RFC 6013 E: \"TCP Cookie Transactions (TCPCT)\" (January\
    \ 2011): lack of\n               interest\n      This document [RFC6013] describes\
    \ a method to exchange a cookie\n      (nonce) during the connection establishment\
    \ to negotiate\n      elimination of receiver state.  These cookies are later\
    \ used to\n      inhibit premature closing of connections and reduce retention\
    \ of\n      state after the connection has terminated.\n      Since the cookie\
    \ pair is too large to fit with the other TCP\n      options in the 40 bytes of\
    \ TCP option space, the document further\n      describes a method to extent the\
    \ option space after the connection\n      establishment.\n      Although RFC\
    \ 6013 was published in 2011, the authors of this\n      document places it in\
    \ this section of the roadmap document due to\n      two factors.\n      (a) \
    \ The authors are not aware of any wide deployment and use of\n           RFC\
    \ 6013.\n      (b)  RFC 6013 uses experimental TCP option code points, which\n\
    \           prohibits a large-scale deployment.\n"
- title: 7.  Support Documents
  contents:
  - "7.  Support Documents\n   This section contains several classes of documents\
    \ that do not\n   necessarily define current protocol behaviors but that are\n\
    \   nevertheless of interest to TCP implementers.  Section 7.1 describes\n   several\
    \ foundational RFCs that give modern readers a better\n   understanding of the\
    \ principles underlying TCP's behaviors and\n   development over the years.  Section\
    \ 7.2 contains architectural\n   guidelines and principles for TCP architects\
    \ and designers.  The\n   documents listed in Section 7.3 provide advice on using\
    \ TCP in\n   various types of network situations that pose challenges above those\n\
    \   of typical wired links.  Guidance for developing, analyzing, and\n   evaluating\
    \ TCP is given in Section 7.4.  Some implementation notes\n   and implementation\
    \ advice can be found in Section 7.5.  RFCs that\n   describe tools for testing\
    \ and debugging TCP implementations or that\n   contain high-level tutorials on\
    \ the protocol are listed Section 7.6.\n   The TCP Management Information Bases\
    \ are described in Section 7.7,\n   and Section 7.8 lists a number of case studies\
    \ that have explored TCP\n   performance.\n"
- title: 7.1.  Foundational Works
  contents:
  - "7.1.  Foundational Works\n   The documents listed in this section contain information\
    \ that is\n   largely duplicated by the standards documents previously discussed.\n\
    \   However, some of them contain a greater depth of problem statement\n   explanation\
    \ or other context.  Particularly, RFCs 813 - 817 (known as\n   the \"Dave Clark\
    \ Five\") describe some early problems and solutions\n   (RFC 815 only describes\
    \ the reassembly of IP fragments and is not\n   included in this TCP roadmap).\n\
    \   RFC 675 U: \"Specification of Internet Transmission Control Program\"\n  \
    \             (December 1974)\n      This document [RFC675] is a very early precursor\
    \ of the\n      fundamental RFC 793 (see Section 2 of this document), which\n\
    \      already contained the three-way handshake in its final form and\n     \
    \ the concept of sliding windows for reliable data transmission.\n      Apart\
    \ from that, the segment layout is totally different and the\n      specified\
    \ API differs from the latter RFC 793 (see Section 2 of\n      this document).\n\
    \   RFC 761 U: \"DoD Standard Transmission Control Protocol\" (January\n     \
    \          1980)\n      This document [RFC761] is the immediate precursor of RFC\
    \ 793 (see\n      Section 2 of this document).  The header format, the connection\n\
    \      establishment (including the different connection states), and the\n  \
    \    overall API correspond mostly to the final Standard RFC 793 (see\n      Section\
    \ 2 of this document).\n   RFC 813 U: \"Window and Acknowledgement Strategy in\
    \ TCP\" (July 1982)\n      This document [RFC813] contains an early discussion\
    \ of Silly\n      Window Syndrome and its avoidance and motivates and describes\
    \ the\n      use of delayed acknowledgments.\n   RFC 814 U: \"Name, Addresses,\
    \ Ports, and Routes\" (July 1982)\n      Suggestions and guidance for the design\
    \ of tables and algorithms\n      to keep track of various identifiers within\
    \ a TCP/IP\n      implementation are provided by this document [RFC814].\n   RFC\
    \ 816 U: \"Fault Isolation and Recovery\" (July 1982)\n      In this document\
    \ [RFC816], TCP's response to indications of\n      network error conditions such\
    \ as timeouts or received ICMP\n      messages is discussed.\n   RFC 817 U: \"\
    Modularity and Efficiency in Protocol Implementation\"\n               (July 1982)\n\
    \      This document [RFC817] contains implementation suggestions that\n     \
    \ are general and not TCP specific.  However, they have been used to\n      develop\
    \ TCP implementations and describe some performance\n      implications of the\
    \ interactions between various layers in the\n      Internet stack.\n   RFC 872\
    \ U: \"TCP-on-a-LAN\" (September 1982)\n      Conclusion of RFC 872 [RFC872]:\
    \ \"The sometimes-expressed fear that\n      using TCP on a local net is a bad\
    \ idea is unfounded.\"\n   RFC 896 U: \"Congestion Control in IP/TCP Internetworks\"\
    \ (January\n               1984)\n      This document [RFC896] contains some early\
    \ experiences with\n      congestion collapse and some initial thoughts on how\
    \ to avoid it\n      using congestion control in TCP.  Furthermore, it defined\
    \ an\n      algorithm for efficient transmission of small packets that is\n  \
    \    today known as the Nagle algorithm.\n   RFC 964 U: \"Some Problems with the\
    \ Specification of the Military\n               Standard Transmission Control\
    \ Protocol\" (November 1985)\n      This document [RFC964] points out several\
    \ specification bugs in\n      the US Military's MIL-STD-1778 document, which\
    \ was intended as a\n      successor to RFC 793 (see Section 2 of this document).\
    \  This\n      serves to remind us of the difficulty in specification writing\n\
    \      (even when we work from existing documents!).\n"
- title: 7.2.  Architectural Guidelines
  contents:
  - "7.2.  Architectural Guidelines\n   Some documents in this section contain architectural\
    \ guidance and\n   concerns, while others specify TCP- and congestion-control-related\n\
    \   mechanisms that are broadly applicable and have impacts on TCP's\n   congestion\
    \ control techniques.  Some of these documents are direct\n   products of the\
    \ Internet Architecture Board (IAB) giving their\n   guidance on specific aspects\
    \ of congestion control in the Internet.\n   RFC 1958 I: \"Architectural Principles\
    \ of the Internet\" (June 1996)\n      This document [RFC1958] describes the underlying\
    \ principles of the\n      Internet architecture.  It provides guidelines for\
    \ network systems\n      designs that have proven useful in the evolution of the\
    \ Internet.\n   RFC 2914 B: \"Congestion Control Principles\" (September 2000)\n\
    \      This document [RFC2914] motivates the use of end-to-end congestion\n  \
    \    control for preventing congestion collapse and providing fairness\n     \
    \ to TCP.  Later work on TCP has included several more aggressive\n      mechanisms\
    \ than Reno TCP includes, and RFC 5033 (see Section 7.4\n      of this document)\
    \ provides additional guidance on use of such\n      algorithms.  The fundamental\
    \ architectural discussion in RFC 2914\n      remains valid, regarding the standards\
    \ process role in defining\n      protocol aspects that are critical to performance\
    \ and avoiding\n      congestion collapse scenarios.\n   RFC 3360 B: \"Inappropriate\
    \ TCP Resets Considered Harmful\" (August\n               2002)\n      This document\
    \ [RFC3360] is a plea that firewall vendors not send\n      gratuitous TCP RST\
    \ (Reset) packets when unassigned TCP header bits\n      are used.  This practice\
    \ prevents desirable extension and\n      evolution of the protocol and thus is\
    \ potentially harmful to the\n      future of the Internet.\n   RFC 3439 I: \"\
    Some Internet Architectural Guidelines and Philosophy\"\n               (December\
    \ 2002)\n      This document [RFC3439] updates RFC 1958 (see above in\n      Section\
    \ 7.2) by outlining some philosophical guidelines for\n      architects and designers\
    \ of Internet backbone networks.  The\n      document describes the Simplicity\
    \ Principle, which states that\n      complexity is the primary impediment to\
    \ efficient scaling.\n   RFC 4774 B: \"Specifying Alternate Semantics for the\
    \ Explicit\n               Congestion Notification (ECN) Field\" (November 2006)\n\
    \      This document [RFC4774] discusses some of the issues in defining\n    \
    \  alternate semantics for the ECN field and specifies requirements\n      for\
    \ a safe coexistence with routers that do not understand the\n      defined alternate\
    \ semantics.\n   RFC 6182 I: \"Architectural Guidelines for Multipath TCP Development\"\
    \n               (March 2011)\n      Abstract of RFC 6182 [RFC6182]: \"This document\
    \ outlines\n      architectural guidelines for the development of a Multipath\n\
    \      Transport Protocol, with references to how these architectural\n      components\
    \ come together in the development of a Multipath TCP\n      (MPTCP) (see Section\
    \ 4.7 of this document).  This document lists\n      certain high-level design\
    \ decisions that provide foundations for\n      the design of the MPTCP protocol,\
    \ based upon these architectural\n      requirements\"\n"
- title: 7.3.  Difficult Network Environments
  contents:
  - "7.3.  Difficult Network Environments\n   As the internetworking field has explored\
    \ wireless, satellite,\n   cellular telephone, and other kinds of link-layer technologies,\
    \ a\n   large body of work has built up on enhancing TCP performance for such\n\
    \   links.  The RFCs listed in this section describe some of these more\n   challenging\
    \ network environments and how TCP interacts with them.\n   RFC 2488 B: \"Enhancing\
    \ TCP Over Satellite Channels using Standard\n               Mechanisms\" (January\
    \ 1999)\n      From the Abstract of RFC 2488 [RFC2488]: \"While TCP works over\n\
    \      satellite channels there are several IETF standardized mechanisms\n   \
    \   that enable TCP to more effectively utilize the available capacity\n     \
    \ of the network path.  This document outlines some of these TCP\n      mitigations.\
    \  At this time, all mitigations discussed in this\n      document are IETF standards\
    \ track mechanisms (or are compliant\n      with IETF standards).\"\n   RFC 2757\
    \ I: \"Long Thin Networks\" (January 2000)\n      Several methods of improving\
    \ TCP performance over long thin\n      networks (i.e., networks with low bandwidth\
    \ and high delay), such\n      as geosynchronous satellite links, are discussed\
    \ in this document\n      [RFC2757].  A particular set of TCP options is developed\
    \ that\n      should work well in such environments and be safe to use in the\n\
    \      global Internet.  The implications of such environments have been\n   \
    \   further discussed in RFCs 3150 and 3155 (see below in\n      Section 7.3),\
    \ and these documents should be preferred where there\n      is overlap between\
    \ them and RFC 2757 (see Section 7.3 of this\n      document).\n   RFC 2760 I:\
    \ \"Ongoing TCP Research Related to Satellites\" (February\n               2000)\n\
    \      This document [RFC2760] discusses the advantages and disadvantages\n  \
    \    of several different experimental means of improving TCP\n      performance\
    \ over long-delay or error-prone paths.  These include\n      T/TCP, larger initial\
    \ windows, byte counting, delayed\n      acknowledgments, slow start thresholds,\
    \ NewReno and SACK-based\n      loss recovery, FACK [MM96], ECN, various corruption-detection\n\
    \      mechanisms, congestion avoidance changes for fairness, use of\n      multiple\
    \ parallel flows, pacing, header compression, state\n      sharing, and ACK congestion\
    \ control, filtering, and\n      reconstruction.  Although RFC 2488 (see above\
    \ in Section 7.3)\n      looks at standard extensions, this document focuses on\
    \ more\n      experimental means of performance enhancement.\n   RFC 3135 I: \"\
    Performance Enhancing Proxies Intended to Mitigate Link-\n               Related\
    \ Degradations\" (June 2001)\n      From the Abstract of RFC 3135 [RFC3135]: \"\
    This document is a\n      survey of Performance Enhancing Proxies (PEPs) often\
    \ employed to\n      improve degraded TCP performance caused by characteristics\
    \ of\n      specific link environments, for example, in satellite, wireless\n\
    \      WAN, and wireless LAN environments.  Different types of\n      Performance\
    \ Enhancing Proxies are described as well as the\n      mechanisms used to improve\
    \ performance.\"\n   RFC 3150 B: \"End-to-end Performance Implications of Slow\
    \ Links\" (July\n               2001)\n      From the Abstract of RFC 3150 [RFC3150]:\
    \ \"This document makes\n      performance-related recommendations for users of\
    \ network paths\n      that traverse \"very low bit-rate\" links....This recommendation\
    \ may\n      be useful in any network where hosts can saturate available\n   \
    \   bandwidth, but the design space for this recommendation explicitly\n     \
    \ includes connections that traverse 56 Kb/second modem links or 4.8\n      Kb/second\
    \ wireless access links - both of which are widely\n      deployed.\"\n   RFC\
    \ 3155 B: \"End-to-end Performance Implications of Links with\n              \
    \ Errors\" (August 2001)\n      From the Abstract of RFC 3155 [RFC3155]: \"This\
    \ document discusses\n      the specific TCP mechanisms that are problematic in\
    \ environments\n      with high uncorrected error rates, and discusses what can\
    \ be done\n      to mitigate the problems without introducing intermediate devices\n\
    \      into the connection.\"\n   RFC 3366 B: \"Advice to link designers on link\
    \ Automatic Repeat\n               reQuest (ARQ)\" (August 2002)\n      From the\
    \ Abstract of RFC 3366 [RFC3366]: \"This document provides\n      advice to the\
    \ designers of digital communication equipment and\n      link-layer protocols\
    \ employing link-layer Automatic Repeat reQuest\n      (ARQ) techniques.  This\
    \ document presumes that the designers wish\n      to support Internet protocols,\
    \ but may be unfamiliar with the\n      architecture of the Internet and with\
    \ the implications of their\n      design choices for the performance and efficiency\
    \ of Internet\n      traffic carried over their links.\"\n   RFC 3449 B: \"TCP\
    \ Performance Implications of Network Path Asymmetry\"\n               (December\
    \ 2002)\n      From the Abstract of RFC 3449 [RFC3449]: \"This document describes\n\
    \      TCP performance problems that arise because of asymmetric effects.\n  \
    \    These problems arise in several access networks, including\n      bandwidth-asymmetric\
    \ networks and packet radio subnetworks, for\n      different underlying reasons.\
    \  However, the end result on TCP\n      performance is the same in both cases:\
    \ performance often degrades\n      significantly because of imperfection and\
    \ variability in the ACK\n      feedback from the receiver to the sender.\n  \
    \    The document details several mitigations to these effects, which\n      have\
    \ either been proposed or evaluated in the literature, or are\n      currently\
    \ deployed in networks.\n   RFC 3481 B: \"TCP over Second (2.5G) and Third (3G)\
    \ Generation\n               Wireless Networks\" (February 2003)\n      From the\
    \ Abstract of RFC 3481 [RFC3481]: \"This document describes\n      a profile for\
    \ optimizing TCP to adapt so that it handles paths\n      including second (2.5G)\
    \ and third (3G) generation wireless\n      networks.\"\n   RFC 3819 B: \"Advice\
    \ for Internet Subnetwork Designers\" (July 2004)\n      This document [RFC3819]\
    \ describes how TCP performance can be\n      negatively affected by some particular\
    \ lower-layer behaviors and\n      provides guidance in designing lower-layer\
    \ networks and protocols\n      to be amicable to TCP.  RFC 3366 (see above in\
    \ Section 7.3)\n      specifically focuses on ARQ mechanisms, while RFC 3819 more\
    \ widely\n      covers additional aspects of the underlying layers\n"
- title: 7.4.  Guidance for Developing, Analyzing, and Evaluating TCP
  contents:
  - "7.4.  Guidance for Developing, Analyzing, and Evaluating TCP\n   Documents in\
    \ this section give general guidance for developing,\n   analyzing, and evaluating\
    \ TCP.  Some of the documents discuss, for\n   example, the properties of congestion\
    \ control protocols that are\n   \"safe\" for Internet deployment as well as how\
    \ to measure the\n   properties of congestion control mechanisms and transport\
    \ protocols.\n   RFC 5033 B: \"Specifying New Congestion Control Algorithms\"\
    \ (August\n               2007)\n      This document [RFC5033] considers the evaluation\
    \ of suggested\n      congestion control algorithms that differ from the principles\n\
    \      outlined in RFC 2914 (see Section 7.2 of this document).  It is\n     \
    \ useful for authors of such algorithms as well as for IETF members\n      reviewing\
    \ the associated documents.\n   RFC 5166 I: \"Metrics for the Evaluation of Congestion\
    \ Control\n               Mechanisms\" (March 2008)\n      This document [RFC5166]\
    \ discusses metrics that need to be\n      considered when evaluating new or modified\
    \ congestion control\n      mechanisms for the Internet.  Among other topics,\
    \ the document\n      discusses throughput, delay, loss rates, response times,\
    \ fairness,\n      and robustness for challenging environments.\n   RFC 6077 I:\
    \ \"Open Research Issues in Internet Congestion Control\"\n               (February\
    \ 2011)\n      This document [RFC6077] summarizes the main open problems in the\n\
    \      domain of Internet congestion control.  As a good starting point\n    \
    \  for newcomers, the document describes several new challenges that\n      are\
    \ becoming important as the network grows, as well as some\n      issues that\
    \ have been known for many years.\n   RFC 6181 I: \"Threat Analysis for TCP Extensions\
    \ for Multipath\n               Operation with Multiple Addresses\" (March 2011)\n\
    \      This document [RFC6181] describes a threat analysis for Multipath\n   \
    \   TCP (MPTCP) (see Section 4.7 of this document).  The document\n      discusses\
    \ several types of attacks and provides recommendations\n      for MPTCP designers\
    \ how to create an MPTCP specification that is\n      as secure as the current\
    \ (single-path) TCP.\n   RFC 6349 I: \"Framework for TCP Throughput Testing\"\
    \ (August 2011)\n      From the Abstract of RFC 6349 [RFC6349]: \"This framework\
    \ describes\n      a practical methodology for measuring end-to-end TCP Throughput\
    \ in\n      a managed IP network.  The goal is to provide a better indication\n\
    \      in regard to user experience.  In this framework, TCP and IP\n      parameters\
    \ are specified to optimize TCP Throughput.\"\n"
- title: 7.5.  Implementation Advice
  contents:
  - "7.5.  Implementation Advice\n   RFC 794 U: \"PRE-EMPTION\" (September 1981)\n\
    \      This document [RFC794] clarifies that operating systems need to\n     \
    \ manage their limited resources, which may include TCP connection\n      state,\
    \ and that these decisions can be made with application\n      input, but they\
    \ do not need to be part of the TCP protocol\n      specification itself.\n  \
    \ RFC 879 U: \"The TCP Maximum Segment Size and Related Topics\"\n           \
    \    (November 1983)\n      Abstract of RFC 879 [RFC879]: \"This memo discusses\
    \ the TCP Maximum\n      Segment Size Option and related topics.  The purposes\
    \ [sic] is to\n      clarify some aspects of TCP and its interaction with IP.\
    \  This\n      memo is a clarification to the TCP specification, and contains\n\
    \      information that may be considered as 'advice to implementers'.\"\n   RFC\
    \ 1071 U: \"Computing the Internet Checksum\" (September 1988)\n             \
    \  (Errata)\n      This document [RFC1071] lists a number of implementation\n\
    \      techniques for efficiently computing the Internet checksum (used\n    \
    \  by TCP).\n   RFC 1624 I: \"Computation of the Internet Checksum via Incremental\n\
    \               Update\" (May 1994)\n      Incrementally updating the Internet\
    \ checksum is useful to routers\n      in updating IP checksums.  Some middleboxes\
    \ that alter TCP headers\n      may also be able to update the TCP checksum incrementally.\
    \  This\n      document [RFC1624] expands upon the explanation of the incremental\n\
    \      update procedure in RFC 1071 (see above in Section 7.5).\n   RFC 1936 I:\
    \ \"Implementing the Internet Checksum in Hardware\" (April\n               1996)\n\
    \      This document [RFC1936] describes the motivation for implementing\n   \
    \   the Internet checksum in hardware, rather than in software, and\n      provides\
    \ an implementation example.\n   RFC 2525 I: \"Known TCP Implementation Problems\"\
    \ (March 1999)\n      From the Abstract of RFC 2525 [RFC2525]: \"This memo catalogs\
    \ a\n      number of known TCP implementation problems.  The goal in doing so\n\
    \      is to improve conditions in the existing Internet by enhancing the\n  \
    \    quality of current TCP/IP implementations.\"\n   RFC 2923 I: \"TCP Problems\
    \ with Path MTU Discovery\" (September 2000)\n      From abstract: \"This memo\
    \ catalogs several known Transmission\n      Control Protocol (TCP) implementation\
    \ problems dealing with Path\n      Maximum Transmission Unit Discovery (PMTUD),\
    \ including the long-\n      standing black hole problem, stretch acknowledgments\
    \ (ACKs) due to\n      confusion between Maximum Segment Size (MSS) and segment\
    \ size, and\n      MSS advertisement based on PMTU.\"  [RFC2923]\n   RFC 3493\
    \ I: \"Basic Socket Interface Extensions for IPv6\" (February\n              \
    \ 2003)\n      This document [RFC3493] describes the de facto standard sockets\n\
    \      API for programming with TCP.  This API is implemented nearly\n      ubiquitously\
    \ in modern operating systems and programming\n      languages.\n   RFC 6056 B:\
    \ \"Recommendations for Transport-Protocol Port\n               Randomization\"\
    \ (December 2010)\n      This document [RFC6056] describes a number of simple\
    \ and efficient\n      methods for the selection of the client port number.  It\
    \ reduces\n      the possibility of an attacker guessing the correct five-tuple\n\
    \      (Protocol, Source/Destination Address, Source/Destination Port).\n   RFC\
    \ 6191 B: \"Reducing the TIME-WAIT State Using TCP Timestamps\"\n            \
    \   (April 2011)\n      This document [RFC6191] describes the usage of the TCP\
    \ Timestamps\n      option (RFC 7323, see Section 3.1 of this document) to perform\n\
    \      heuristics to determine whether or not to allow the creation of a\n   \
    \   new incarnation of a connection that is in the TIME-WAIT state.\n   RFC 6429\
    \ I: \"TCP Sender Clarification for Persist Condition\"\n               (December\
    \ 2011)\n      This document [RFC6429] clarifies the actions that a TCP can take\n\
    \      on connections that are experiencing the Zero Window Probe (ZWP)\n    \
    \  condition.\n   RFC 6897 I: \"Multipath TCP (MPTCP) Application Interface\n\
    \               Considerations\" (March 2013)\n      This document [RFC6897] characterizes\
    \ the impact that Multipath\n      TCP (MPTCP) (see Section 4.7 of this document)\
    \ may have on\n      applications.  It further discusses compatibility issues\
    \ of MPTCP\n      in combination with non-MPTCP-aware applications.  Finally,\
    \ it\n      describes a basic API that is a simple extension of TCP's\n      interface\
    \ for MPTCP-aware applications.\n"
- title: 7.6.  Tools and Tutorials
  contents:
  - "7.6.  Tools and Tutorials\n   RFC 1180 I: \"TCP/IP Tutorial\" (January 1991)\
    \ (Errata)\n      This document [RFC1180] is an extremely brief overview of the\
    \ TCP/\n      IP protocol suite as a whole.  It gives some explanation as to how\n\
    \      and where TCP fits in.\n   RFC 1470 I: \"FYI on a Network Management Tool\
    \ Catalog: Tools for\n               Monitoring and Debugging TCP/IP Internets\
    \ and\n               Interconnected Devices\" (June 1993)\n      A few of the\
    \ tools that this document [RFC1470] describes are\n      still maintained and\
    \ in use today, for example, ttcp and tcpdump.\n      However, many of the tools\
    \ described do not relate specifically to\n      TCP and are no longer used or\
    \ easily available.\n   RFC 2398 I: \"Some Testing Tools for TCP Implementors\"\
    \ (August 1998)\n      This document [RFC2398] describes a number of TCP packet\n\
    \      generation and analysis tools.  Although some of these tools are\n    \
    \  no longer readily available or widely used, for the most part they\n      are\
    \ still relevant and usable.\n   RFC 5783 I: \"Congestion Control in the RFC Series\"\
    \ (February 2010)\n      This document [RFC5783] provides an overview of RFCs\
    \ related to\n      congestion control that had been published at the time.  The\
    \ focus\n      of the document is on end-host-based congestion control.\n"
- title: 7.7.  MIB Modules
  contents:
  - "7.7.  MIB Modules\n   The first MIB module defined for use with Simple Network\
    \ Management\n   Protocol (SNMP) was a single monolithic MIB module, called MIB-I,\n\
    \   defined in RFC 1156.  This evolved over time to the MIB-II\n   specification\
    \ in RFC 1213, which obsoletes RFC 1156.  It then became\n   apparent that having\
    \ a single monolithic MIB module was not scalable,\n   given the number and breadth\
    \ of MIB data definitions that needed to\n   be included.  Thus, additional MIB\
    \ modules were defined, and those\n   parts of MIB-II that needed to evolve were\
    \ split off.  Eventually,\n   the remaining parts of MIB-II were also split off,\
    \ the TCP-specific\n   part being documented in RFC 2012.  RFC 2012 was obsoleted\
    \ by RFC\n   4022, which is the primary TCP MIB document at the time of writing.\n\
    \   For current TCP implementers, RFC 4022 should be supported.\n   RFC 1156 S:\
    \ \"Management Information Base for Network Management of\n               TCP/IP-based\
    \ Internets\" (May 1990)\n      This document [RFC1156] describes the required\
    \ MIB fields for TCP\n      implementations with minor corrections and no technical\
    \ changes\n      from RFC 1066, which it obsoletes.  This is the Standards Track\n\
    \      RFC for MIB-I.\n   RFC 1213 S: \"Management Information Base for Network\
    \ Management of\n               TCP/IP-based internets: MIB-II\" (March 1991)\n\
    \      This document [RFC1213] describes the second version of the MIB in\n  \
    \    a monolithic form.  It is the immediate successor of RFC 1158,\n      with\
    \ minor modifications.  It obsoletes the MIB-I, defined in RFC\n      1156 (see\
    \ above in Section 7.7).\n   RFC 2012 S: \"SNMPv2 Management Information Base\
    \ for the Transmission\n               Control Protocol using SMIv2\" (November\
    \ 1996)\n      In an update to RFC 1213 (see Section 7.7 of this document), this\n\
    \      document [RFC2012] defines the TCP MIB by splitting out the TCP-\n    \
    \  specific portions.  It is now obsoleted by RFC 4022 (see below in\n      Section\
    \ 7.7).\n   RFC 2452 S: \"IP Version 6 Management Information Base for the\n \
    \              Transmission Control Protocol\" (December 1998)\n      This document\
    \ [RFC2452] augments RFC 2012 (see Section 7.7 of this\n      document) by adding\
    \ an IPv6-specific connection table.  The rest\n      of RFC 2012 holds for any\
    \ IP version.  RFC 2452 is now obsoleted\n      by RFC 4022 (see below in Section\
    \ 7.7).\n      Although it is a Standards Track RFC, RFC 2452 is considered a\n\
    \      historic mistake by the MIB community, as it is based on the idea\n   \
    \   of parallel IPv4 and IPv6 structures.  Although IPv6 requires new\n      structures,\
    \ the community has decided to define a single generic\n      structure for both\
    \ IPv4 and IPv6.  This will aid in definition,\n      implementation, and transition\
    \ between IPv4 and IPv6.\n   RFC 4022 S: \"Management Information Base for the\
    \ Transmission Control\n               Protocol (TCP)\" (March 2005)\n      This\
    \ document [RFC4022] obsoletes RFCs 2012 and 2452 (see above in\n      Section\
    \ 7.7) and specifies the current standard for the TCP MIB\n      that should be\
    \ deployed.\n   RFC 4898 S: \"TCP Extended Statistics MIB\" (May 2007)\n     \
    \ This document [RFC4898] describes extended performance statistics\n      for\
    \ TCP.  They are designed to use TCP's ideal vantage point to\n      diagnose\
    \ performance problems in both the network and the\n      application.\n"
- title: 7.8.  Case Studies
  contents:
  - "7.8.  Case Studies\n   RFC 700 U: \"A Protocol Experiment\" (August 1974)\n \
    \     This document [RFC700] presents a field report about the\n      deployment\
    \ of a very early version of TCP, the so-called INWN #39\n      protocol, which\
    \ is originally described by Cerf and Kahn in INWG\n      Note #39 [CK73] to use\
    \ a PDP-11 line printer via the ARPANET.\n   RFC 889 U: \"Internet Delay Experiments\"\
    \ (December 1983)\n      This document [RFC889] is a status report about experiments\n\
    \      concerning the TCP retransmission timeout calculation and also\n      provides\
    \ advice for implementers.\n   RFC 1337 I: \"TIME-WAIT Assassination Hazards in\
    \ TCP\" (May 1992)\n      This document [RFC1337] points out a problem with acting\
    \ on\n      received reset segments while one is in the TIME-WAIT state.  The\n\
    \      main recommendation is that hosts in TIME-WAIT ignore resets.\n      This\
    \ recommendation might not currently be widely implemented.\n   RFC 2415 I: \"\
    Simulation Studies of Increased Initial TCP Window Size\"\n               (September\
    \ 1998)\n      This document [RFC2415] presents results of some simulations using\n\
    \      TCP initial windows greater than 1 segment.  The analysis\n      indicates\
    \ that user-perceived performance can be improved by\n      increasing the initial\
    \ window to 3 segments.\n   RFC 2416 I: \"When TCP Starts Up With Four Packets\
    \ Into Only Three\n               Buffers\" (September 1998)\n      This document\
    \ [RFC2416] uses simulation results to clear up some\n      concerns about using\
    \ an initial window of 4 segments when the\n      network path has less provisioning.\n\
    \   RFC 2884 I: \"Performance Evaluation of Explicit Congestion\n            \
    \   Notification (ECN) in IP Networks\" (July 2000)\n      This document [RFC2884]\
    \ describes experimental results that show\n      some improvements to the performance\
    \ of both short- and long-lived\n      connections due to ECN.\n"
- title: 8.  Undocumented TCP Features
  contents:
  - "8.  Undocumented TCP Features\n   There are a few important implementation tactics\
    \ for the TCP that\n   have not yet been described in any RFC.  Although this\
    \ roadmap is\n   primarily concerned with mapping the TCP RFCs, this section is\n\
    \   included because an implementer needs to be aware of these important\n   issues.\n\
    \   Header Prediction\n      Header prediction is a trick to speed up the processing\
    \ of\n      segments.  Van Jacobson and Mike Karels developed the technique in\n\
    \      the late 1980s.  The basic idea is that some processing time can\n    \
    \  be saved when most of a segment's fields can be predicted from\n      previous\
    \ segments.  A good description of this was sent to the\n      TCP-IP mailing\
    \ list by Van Jacobson on March 9, 1988 (see\n      [Jacobson] for the full message):\n\
    \         Quite a bit of the speedup comes from an algorithm that we\n       \
    \  ('we' refers to collaborator Mike Karels and myself) are\n         calling\
    \ \"header prediction\".  The idea is that if you're in the\n         middle of\
    \ a bulk data transfer and have just seen a packet, you\n         know what the\
    \ next packet is going to look like: It will look\n         just like the current\
    \ packet with either the sequence number or\n         ack number updated (depending\
    \ on whether you're the sender or\n         receiver).  Combining this with the\
    \ \"Use hints\" epigram from\n         Butler Lampson's classic \"Epigrams for\
    \ System Designers\", you\n         start to think of the tcp state (rcv.nxt,\
    \ snd.una, etc.) as\n         \"hints\" about what the next packet should look\
    \ like.\n         If you arrange those \"hints\" so they match the layout of a\
    \ tcp\n         packet header, it takes a single 14-byte compare to see if your\n\
    \         prediction is correct (3 longword compares to pick up the send\n   \
    \      & ack sequence numbers, header length, flags and window, plus a\n     \
    \    short compare on the length).  If the prediction is correct,\n         there's\
    \ a single test on the length to see if you're the sender\n         or receiver\
    \ followed by the appropriate processing.  E.g., if\n         the length is non-zero\
    \ (you're the receiver), checksum and\n         append the data to the socket\
    \ buffer then wake any process\n         that's sleeping on the buffer.  Update\
    \ rcv.nxt by the length of\n         this packet (this updates your \"prediction\"\
    \ of the next\n         packet).  Check if you can handle another packet the same\
    \ size\n         as the current one.  If not, set one of the unused flag bits\
    \ in\n         your header prediction to guarantee that the prediction will\n\
    \         fail on the next packet and force you to go through full\n         protocol\
    \ processing.  Otherwise, you're done with this packet.\n         So, the *total*\
    \ tcp protocol processing, exclusive of\n         checksumming, is on the order\
    \ of 6 compares and an add.\n   Forward Acknowledgement (FACK)\n      FACK [MM96]\
    \ includes an alternate algorithm for triggering fast\n      retransmit [RFC5681],\
    \ based on the extent of the SACK scoreboard.\n      Its goal is to trigger fast\
    \ retransmit as soon as the receiver's\n      reassembly queue is larger than\
    \ the duplicate ACK threshold, as\n      indicated by the difference between the\
    \ forward most SACK block\n      edge and SND.UNA.  This algorithm quickly and\
    \ reliably triggers\n      fast retransmit in the presence of burst losses --\
    \ often on the\n      first SACK following such a loss.  Such a threshold-based\n\
    \      algorithm also triggers fast retransmit immediately in the\n      presence\
    \ of any reordering with extent greater than the duplicate\n      ACK threshold.\
    \  FACK is implemented in Linux and turned on per\n      default.\n   Congestion\
    \ Control for High Rate Flows\n      In the last decade significant research effort\
    \ has been put into\n      experimental TCP congestion control modifications for\
    \ obtaining\n      high throughput with reduced startup and recovery times.  Only\
    \ a\n      few RFCs have been published on some of these modifications,\n    \
    \  including HighSpeed TCP [RFC3649], Limited Slow-Start [RFC3742],\n      and\
    \ Quick-Start [RFC4782] (see Section 4.3 of this document for\n      more information\
    \ on each), but high-rate congestion control\n      mechanisms are still considered\
    \ an open issue in congestion\n      control research.  Some other schemes have\
    \ been published as\n      Internet-Drafts, e.g.  CUBIC [CUBIC] (the standard\
    \ TCP congestion\n      control algorithm in Linux), Compound TCP [CTCP], and\
    \ H-TCP [HTCP]\n      or have been discussed a little by the IETF, but much of\
    \ the work\n      in this area has not been adopted within the IETF yet, so the\n\
    \      majority of this work is outside the RFC series and may be\n      discussed\
    \ in other products of the IRTF Internet Congestion\n      Control Research Group\
    \ (ICCRG).\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document introduces no new security considerations.\
    \  Each RFC\n   listed in this document attempts to address the security\n   considerations\
    \ of the specification it contains.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC675]   Cerf, V., Dalal, Y., and C. Sunshine,\
    \ \"Specification of\n              Internet Transmission Control Program\", RFC\
    \ 675, December\n              1974, <http://www.rfc-editor.org/info/rfc675>.\n\
    \   [RFC700]   Mader, E., Plummer, W., and R. Tomlinson, \"Protocol\n        \
    \      experiment\", RFC 700, August 1974,\n              <http://www.rfc-editor.org/info/rfc700>.\n\
    \   [RFC721]   Garlick, L., \"Out-of-Band Control Signals in a Host-to-\n    \
    \          Host Protocol\", RFC 721, September 1976,\n              <http://www.rfc-editor.org/info/rfc721>.\n\
    \   [RFC761]   Postel, J., \"DoD standard Transmission Control Protocol\",\n \
    \             RFC 761, January 1980,\n              <http://www.rfc-editor.org/info/rfc761>.\n\
    \   [RFC793]   Postel, J., \"Transmission Control Protocol\", STD 7, RFC\n   \
    \           793, September 1981,\n              <http://www.rfc-editor.org/info/rfc793>.\n\
    \   [RFC794]   Cerf, V., \"Pre-emption\", RFC 794, September 1981,\n         \
    \     <http://www.rfc-editor.org/info/rfc794>.\n   [RFC813]   Clark, D., \"Window\
    \ and Acknowledgement Strategy in TCP\",\n              RFC 813, July 1982,\n\
    \              <http://www.rfc-editor.org/info/rfc813>.\n   [RFC814]   Clark,\
    \ D., \"Name, addresses, ports, and routes\", RFC 814,\n              July 1982,\
    \ <http://www.rfc-editor.org/info/rfc814>.\n   [RFC816]   Clark, D., \"Fault isolation\
    \ and recovery\", RFC 816, July\n              1982, <http://www.rfc-editor.org/info/rfc816>.\n\
    \   [RFC817]   Clark, D., \"Modularity and efficiency in protocol\n          \
    \    implementation\", RFC 817, July 1982,\n              <http://www.rfc-editor.org/info/rfc817>.\n\
    \   [RFC872]   Padlipsky, M., \"TCP-on-a-LAN\", RFC 872, September 1982,\n   \
    \           <http://www.rfc-editor.org/info/rfc872>.\n   [RFC879]   Postel, J.,\
    \ \"TCP maximum segment size and related topics\",\n              RFC 879, November\
    \ 1983,\n              <http://www.rfc-editor.org/info/rfc879>.\n   [RFC889] \
    \  Mills, D., \"Internet delay experiments\", RFC 889, December\n            \
    \  1983, <http://www.rfc-editor.org/info/rfc889>.\n   [RFC896]   Nagle, J., \"\
    Congestion control in IP/TCP internetworks\",\n              RFC 896, January\
    \ 1984,\n              <http://www.rfc-editor.org/info/rfc896>.\n   [RFC964] \
    \  Sidhu, D. and T. Blumer, \"Some problems with the\n              specification\
    \ of the Military Standard Transmission\n              Control Protocol\", RFC\
    \ 964, November 1985,\n              <http://www.rfc-editor.org/info/rfc964>.\n\
    \   [RFC1071]  Braden, R., Borman, D., Partridge, C., and W. Plummer,\n      \
    \        \"Computing the Internet checksum\", RFC 1071, September\n          \
    \    1988, <http://www.rfc-editor.org/info/rfc1071>.\n   [RFC1078]  Lottor, M.,\
    \ \"TCP port service Multiplexer (TCPMUX)\", RFC\n              1078, November\
    \ 1988,\n              <http://www.rfc-editor.org/info/rfc1078>.\n   [RFC1106]\
    \  Fox, R., \"TCP big window and NAK options\", RFC 1106, June\n             \
    \ 1989, <http://www.rfc-editor.org/info/rfc1106>.\n   [RFC1110]  McKenzie, A.,\
    \ \"Problem with the TCP big window option\",\n              RFC 1110, August\
    \ 1989,\n              <http://www.rfc-editor.org/info/rfc1110>.\n   [RFC1122]\
    \  Braden, R., \"Requirements for Internet Hosts -\n              Communication\
    \ Layers\", STD 3, RFC 1122, October 1989,\n              <http://www.rfc-editor.org/info/rfc1122>.\n\
    \   [RFC1144]  Jacobson, V., \"Compressing TCP/IP headers for low-speed\n    \
    \          serial links\", RFC 1144, February 1990,\n              <http://www.rfc-editor.org/info/rfc1144>.\n\
    \   [RFC1146]  Zweig, J. and C. Partridge, \"TCP alternate checksum\n        \
    \      options\", RFC 1146, March 1990,\n              <http://www.rfc-editor.org/info/rfc1146>.\n\
    \   [RFC1156]  McCloghrie, K. and M. Rose, \"Management Information Base\n   \
    \           for network management of TCP/IP-based internets\", RFC\n        \
    \      1156, May 1990, <http://www.rfc-editor.org/info/rfc1156>.\n   [RFC1180]\
    \  Socolofsky, T. and C. Kale, \"TCP/IP tutorial\", RFC 1180,\n              January\
    \ 1991, <http://www.rfc-editor.org/info/rfc1180>.\n   [RFC1191]  Mogul, J. and\
    \ S. Deering, \"Path MTU discovery\", RFC 1191,\n              November 1990,\
    \ <http://www.rfc-editor.org/info/rfc1191>.\n   [RFC1213]  McCloghrie, K. and\
    \ M. Rose, \"Management Information Base\n              for Network Management\
    \ of TCP/IP-based internets:MIB-II\",\n              STD 17, RFC 1213, March 1991,\n\
    \              <http://www.rfc-editor.org/info/rfc1213>.\n   [RFC1263]  O'Malley,\
    \ S. and L. Peterson, \"TCP Extensions Considered\n              Harmful\", RFC\
    \ 1263, October 1991,\n              <http://www.rfc-editor.org/info/rfc1263>.\n\
    \   [RFC1337]  Braden, B., \"TIME-WAIT Assassination Hazards in TCP\", RFC\n \
    \             1337, May 1992, <http://www.rfc-editor.org/info/rfc1337>.\n   [RFC1379]\
    \  Braden, B., \"Extending TCP for Transactions -- Concepts\",\n             \
    \ RFC 1379, November 1992,\n              <http://www.rfc-editor.org/info/rfc1379>.\n\
    \   [RFC1470]  Enger, R. and J. Reynolds, \"FYI on a Network Management\n    \
    \          Tool Catalog: Tools for Monitoring and Debugging TCP/IP\n         \
    \     Internets and Interconnected Devices\", RFC 1470, June\n              1993,\
    \ <http://www.rfc-editor.org/info/rfc1470>.\n   [RFC1624]  Rijsinghani, A., \"\
    Computation of the Internet Checksum via\n              Incremental Update\",\
    \ RFC 1624, May 1994,\n              <http://www.rfc-editor.org/info/rfc1624>.\n\
    \   [RFC1644]  Braden, B., \"T/TCP -- TCP Extensions for Transactions\n      \
    \        Functional Specification\", RFC 1644, July 1994,\n              <http://www.rfc-editor.org/info/rfc1644>.\n\
    \   [RFC1693]  Connolly, T., Amer, P., and P. Conrad, \"An Extension to\n    \
    \          TCP : Partial Order Service\", RFC 1693, November 1994,\n         \
    \     <http://www.rfc-editor.org/info/rfc1693>.\n   [RFC1705]  Carlson, R. and\
    \ D. Ficarella, \"Six Virtual Inches to the\n              Left: The Problem with\
    \ IPng\", RFC 1705, October 1994,\n              <http://www.rfc-editor.org/info/rfc1705>.\n\
    \   [RFC1936]  Touch, J. and B. Parham, \"Implementing the Internet\n        \
    \      Checksum in Hardware\", RFC 1936, April 1996,\n              <http://www.rfc-editor.org/info/rfc1936>.\n\
    \   [RFC1958]  Carpenter, B., \"Architectural Principles of the Internet\",\n\
    \              RFC 1958, June 1996,\n              <http://www.rfc-editor.org/info/rfc1958>.\n\
    \   [RFC1981]  McCann, J., Deering, S., and J. Mogul, \"Path MTU Discovery\n \
    \             for IP version 6\", RFC 1981, August 1996,\n              <http://www.rfc-editor.org/info/rfc1981>.\n\
    \   [RFC2012]  McCloghrie, K., \"SNMPv2 Management Information Base for\n    \
    \          the Transmission Control Protocol using SMIv2\", RFC 2012,\n      \
    \        November 1996, <http://www.rfc-editor.org/info/rfc2012>.\n   [RFC2018]\
    \  Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, \"TCP\n              Selective\
    \ Acknowledgment Options\", RFC 2018, October 1996,\n              <http://www.rfc-editor.org/info/rfc2018>.\n\
    \   [RFC2140]  Touch, J., \"TCP Control Block Interdependence\", RFC 2140,\n \
    \             April 1997, <http://www.rfc-editor.org/info/rfc2140>.\n   [RFC2398]\
    \  Parker, S. and C. Schmechel, \"Some Testing Tools for TCP\n              Implementors\"\
    , RFC 2398, August 1998,\n              <http://www.rfc-editor.org/info/rfc2398>.\n\
    \   [RFC2415]  Poduri, K., \"Simulation Studies of Increased Initial TCP\n   \
    \           Window Size\", RFC 2415, September 1998,\n              <http://www.rfc-editor.org/info/rfc2415>.\n\
    \   [RFC2416]  Shepard, T. and C. Partridge, \"When TCP Starts Up With\n     \
    \         Four Packets Into Only Three Buffers\", RFC 2416, September\n      \
    \        1998, <http://www.rfc-editor.org/info/rfc2416>.\n   [RFC2452]  Daniele,\
    \ M., \"IP Version 6 Management Information Base for\n              the Transmission\
    \ Control Protocol\", RFC 2452, December\n              1998, <http://www.rfc-editor.org/info/rfc2452>.\n\
    \   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n   \
    \           (IPv6) Specification\", RFC 2460, December 1998,\n              <http://www.rfc-editor.org/info/rfc2460>.\n\
    \   [RFC2488]  Allman, M., Glover, D., and L. Sanchez, \"Enhancing TCP\n     \
    \         Over Satellite Channels using Standard Mechanisms\", BCP\n         \
    \     28, RFC 2488, January 1999,\n              <http://www.rfc-editor.org/info/rfc2488>.\n\
    \   [RFC2525]  Paxson, V., Dawson, S., Fenner, W., Griner, J., Heavens,\n    \
    \          I., Lahey, K., Semke, J., and B. Volz, \"Known TCP\n              Implementation\
    \ Problems\", RFC 2525, March 1999,\n              <http://www.rfc-editor.org/info/rfc2525>.\n\
    \   [RFC2675]  Borman, D., Deering, S., and R. Hinden, \"IPv6 Jumbograms\",\n\
    \              RFC 2675, August 1999,\n              <http://www.rfc-editor.org/info/rfc2675>.\n\
    \   [RFC2757]  Montenegro, G., Dawkins, S., Kojo, M., Magret, V., and N.\n   \
    \           Vaidya, \"Long Thin Networks\", RFC 2757, January 2000,\n        \
    \      <http://www.rfc-editor.org/info/rfc2757>.\n   [RFC2760]  Allman, M., Dawkins,\
    \ S., Glover, D., Griner, J., Tran, D.,\n              Henderson, T., Heidemann,\
    \ J., Touch, J., Kruse, H.,\n              Ostermann, S., Scott, K., and J. Semke,\
    \ \"Ongoing TCP\n              Research Related to Satellites\", RFC 2760, February\
    \ 2000,\n              <http://www.rfc-editor.org/info/rfc2760>.\n   [RFC2780]\
    \  Bradner, S. and V. Paxson, \"IANA Allocation Guidelines For\n             \
    \ Values In the Internet Protocol and Related Headers\", BCP\n              37,\
    \ RFC 2780, March 2000,\n              <http://www.rfc-editor.org/info/rfc2780>.\n\
    \   [RFC2861]  Handley, M., Padhye, J., and S. Floyd, \"TCP Congestion\n     \
    \         Window Validation\", RFC 2861, June 2000,\n              <http://www.rfc-editor.org/info/rfc2861>.\n\
    \   [RFC2873]  Xiao, X., Hannan, A., Paxson, V., and E. Crabbe, \"TCP\n      \
    \        Processing of the IPv4 Precedence Field\", RFC 2873, June\n         \
    \     2000, <http://www.rfc-editor.org/info/rfc2873>.\n   [RFC2883]  Floyd, S.,\
    \ Mahdavi, J., Mathis, M., and M. Podolsky, \"An\n              Extension to the\
    \ Selective Acknowledgement (SACK) Option\n              for TCP\", RFC 2883,\
    \ July 2000,\n              <http://www.rfc-editor.org/info/rfc2883>.\n   [RFC2884]\
    \  Hadi Salim, J. and U. Ahmed, \"Performance Evaluation of\n              Explicit\
    \ Congestion Notification (ECN) in IP Networks\",\n              RFC 2884, July\
    \ 2000,\n              <http://www.rfc-editor.org/info/rfc2884>.\n   [RFC2914]\
    \  Floyd, S., \"Congestion Control Principles\", BCP 41, RFC\n              2914,\
    \ September 2000,\n              <http://www.rfc-editor.org/info/rfc2914>.\n \
    \  [RFC2923]  Lahey, K., \"TCP Problems with Path MTU Discovery\", RFC\n     \
    \         2923, September 2000,\n              <http://www.rfc-editor.org/info/rfc2923>.\n\
    \   [RFC3042]  Allman, M., Balakrishnan, H., and S. Floyd, \"Enhancing\n     \
    \         TCP's Loss Recovery Using Limited Transmit\", RFC 3042,\n          \
    \    January 2001, <http://www.rfc-editor.org/info/rfc3042>.\n   [RFC3124]  Balakrishnan,\
    \ H. and S. Seshan, \"The Congestion Manager\",\n              RFC 3124, June\
    \ 2001,\n              <http://www.rfc-editor.org/info/rfc3124>.\n   [RFC3135]\
    \  Border, J., Kojo, M., Griner, J., Montenegro, G., and Z.\n              Shelby,\
    \ \"Performance Enhancing Proxies Intended to\n              Mitigate Link-Related\
    \ Degradations\", RFC 3135, June 2001,\n              <http://www.rfc-editor.org/info/rfc3135>.\n\
    \   [RFC3150]  Dawkins, S., Montenegro, G., Kojo, M., and V. Magret,\n       \
    \       \"End-to-end Performance Implications of Slow Links\", BCP\n         \
    \     48, RFC 3150, July 2001,\n              <http://www.rfc-editor.org/info/rfc3150>.\n\
    \   [RFC3155]  Dawkins, S., Montenegro, G., Kojo, M., Magret, V., and N.\n   \
    \           Vaidya, \"End-to-end Performance Implications of Links with\n    \
    \          Errors\", BCP 50, RFC 3155, August 2001,\n              <http://www.rfc-editor.org/info/rfc3155>.\n\
    \   [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n   \
    \           of Explicit Congestion Notification (ECN) to IP\", RFC\n         \
    \     3168, September 2001,\n              <http://www.rfc-editor.org/info/rfc3168>.\n\
    \   [RFC3360]  Floyd, S., \"Inappropriate TCP Resets Considered Harmful\",\n \
    \             BCP 60, RFC 3360, August 2002,\n              <http://www.rfc-editor.org/info/rfc3360>.\n\
    \   [RFC3366]  Fairhurst, G. and L. Wood, \"Advice to link designers on\n    \
    \          link Automatic Repeat reQuest (ARQ)\", BCP 62, RFC 3366,\n        \
    \      August 2002, <http://www.rfc-editor.org/info/rfc3366>.\n   [RFC3390]  Allman,\
    \ M., Floyd, S., and C. Partridge, \"Increasing TCP's\n              Initial Window\"\
    , RFC 3390, October 2002,\n              <http://www.rfc-editor.org/info/rfc3390>.\n\
    \   [RFC3439]  Bush, R. and D. Meyer, \"Some Internet Architectural\n        \
    \      Guidelines and Philosophy\", RFC 3439, December 2002,\n              <http://www.rfc-editor.org/info/rfc3439>.\n\
    \   [RFC3449]  Balakrishnan, H., Padmanabhan, V., Fairhurst, G., and M.\n    \
    \          Sooriyabandara, \"TCP Performance Implications of Network\n       \
    \       Path Asymmetry\", BCP 69, RFC 3449, December 2002,\n              <http://www.rfc-editor.org/info/rfc3449>.\n\
    \   [RFC3465]  Allman, M., \"TCP Congestion Control with Appropriate Byte\n  \
    \            Counting (ABC)\", RFC 3465, February 2003,\n              <http://www.rfc-editor.org/info/rfc3465>.\n\
    \   [RFC3481]  Inamura, H., Montenegro, G., Ludwig, R., Gurtov, A., and\n    \
    \          F. Khafizov, \"TCP over Second (2.5G) and Third (3G)\n            \
    \  Generation Wireless Networks\", BCP 71, RFC 3481, February\n              2003,\
    \ <http://www.rfc-editor.org/info/rfc3481>.\n   [RFC3493]  Gilligan, R., Thomson,\
    \ S., Bound, J., McCann, J., and W.\n              Stevens, \"Basic Socket Interface\
    \ Extensions for IPv6\", RFC\n              3493, February 2003,\n           \
    \   <http://www.rfc-editor.org/info/rfc3493>.\n   [RFC3522]  Ludwig, R. and M.\
    \ Meyer, \"The Eifel Detection Algorithm\n              for TCP\", RFC 3522, April\
    \ 2003,\n              <http://www.rfc-editor.org/info/rfc3522>.\n   [RFC3540]\
    \  Spring, N., Wetherall, D., and D. Ely, \"Robust Explicit\n              Congestion\
    \ Notification (ECN) Signaling with Nonces\", RFC\n              3540, June 2003,\
    \ <http://www.rfc-editor.org/info/rfc3540>.\n   [RFC3649]  Floyd, S., \"HighSpeed\
    \ TCP for Large Congestion Windows\",\n              RFC 3649, December 2003,\n\
    \              <http://www.rfc-editor.org/info/rfc3649>.\n   [RFC3708]  Blanton,\
    \ E. and M. Allman, \"Using TCP Duplicate Selective\n              Acknowledgement\
    \ (DSACKs) and Stream Control Transmission\n              Protocol (SCTP) Duplicate\
    \ Transmission Sequence Numbers\n              (TSNs) to Detect Spurious Retransmissions\"\
    , RFC 3708,\n              February 2004, <http://www.rfc-editor.org/info/rfc3708>.\n\
    \   [RFC3742]  Floyd, S., \"Limited Slow-Start for TCP with Large\n          \
    \    Congestion Windows\", RFC 3742, March 2004,\n              <http://www.rfc-editor.org/info/rfc3742>.\n\
    \   [RFC3819]  Karn, P., Bormann, C., Fairhurst, G., Grossman, D.,\n         \
    \     Ludwig, R., Mahdavi, J., Montenegro, G., Touch, J., and L.\n           \
    \   Wood, \"Advice for Internet Subnetwork Designers\", BCP 89,\n            \
    \  RFC 3819, July 2004,\n              <http://www.rfc-editor.org/info/rfc3819>.\n\
    \   [RFC4015]  Ludwig, R. and A. Gurtov, \"The Eifel Response Algorithm\n    \
    \          for TCP\", RFC 4015, February 2005,\n              <http://www.rfc-editor.org/info/rfc4015>.\n\
    \   [RFC4022]  Raghunarayan, R., \"Management Information Base for the\n     \
    \         Transmission Control Protocol (TCP)\", RFC 4022, March\n           \
    \   2005, <http://www.rfc-editor.org/info/rfc4022>.\n   [RFC4653]  Bhandarkar,\
    \ S., Reddy, A., Allman, M., and E. Blanton,\n              \"Improving the Robustness\
    \ of TCP to Non-Congestion\n              Events\", RFC 4653, August 2006,\n \
    \             <http://www.rfc-editor.org/info/rfc4653>.\n   [RFC4727]  Fenner,\
    \ B., \"Experimental Values In IPv4, IPv6, ICMPv4,\n              ICMPv6, UDP,\
    \ and TCP Headers\", RFC 4727, November 2006,\n              <http://www.rfc-editor.org/info/rfc4727>.\n\
    \   [RFC4774]  Floyd, S., \"Specifying Alternate Semantics for the\n         \
    \     Explicit Congestion Notification (ECN) Field\", BCP 124,\n             \
    \ RFC 4774, November 2006,\n              <http://www.rfc-editor.org/info/rfc4774>.\n\
    \   [RFC4782]  Floyd, S., Allman, M., Jain, A., and P. Sarolahti, \"Quick-\n \
    \             Start for TCP and IP\", RFC 4782, January 2007,\n              <http://www.rfc-editor.org/info/rfc4782>.\n\
    \   [RFC4821]  Mathis, M. and J. Heffner, \"Packetization Layer Path MTU\n   \
    \           Discovery\", RFC 4821, March 2007,\n              <http://www.rfc-editor.org/info/rfc4821>.\n\
    \   [RFC4898]  Mathis, M., Heffner, J., and R. Raghunarayan, \"TCP\n         \
    \     Extended Statistics MIB\", RFC 4898, May 2007,\n              <http://www.rfc-editor.org/info/rfc4898>.\n\
    \   [RFC4953]  Touch, J., \"Defending TCP Against Spoofing Attacks\", RFC\n  \
    \            4953, July 2007, <http://www.rfc-editor.org/info/rfc4953>.\n   [RFC4987]\
    \  Eddy, W., \"TCP SYN Flooding Attacks and Common\n              Mitigations\"\
    , RFC 4987, August 2007,\n              <http://www.rfc-editor.org/info/rfc4987>.\n\
    \   [RFC5033]  Floyd, S. and M. Allman, \"Specifying New Congestion\n        \
    \      Control Algorithms\", BCP 133, RFC 5033, August 2007,\n              <http://www.rfc-editor.org/info/rfc5033>.\n\
    \   [RFC5166]  Floyd, S., \"Metrics for the Evaluation of Congestion\n       \
    \       Control Mechanisms\", RFC 5166, March 2008,\n              <http://www.rfc-editor.org/info/rfc5166>.\n\
    \   [RFC5461]  Gont, F., \"TCP's Reaction to Soft Errors\", RFC 5461,\n      \
    \        February 2009, <http://www.rfc-editor.org/info/rfc5461>.\n   [RFC5482]\
    \  Eggert, L. and F. Gont, \"TCP User Timeout Option\", RFC\n              5482,\
    \ March 2009,\n              <http://www.rfc-editor.org/info/rfc5482>.\n   [RFC5562]\
    \  Kuzmanovic, A., Mondal, A., Floyd, S., and K.\n              Ramakrishnan,\
    \ \"Adding Explicit Congestion Notification\n              (ECN) Capability to\
    \ TCP's SYN/ACK Packets\", RFC 5562, June\n              2009, <http://www.rfc-editor.org/info/rfc5562>.\n\
    \   [RFC5681]  Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion\n    \
    \          Control\", RFC 5681, September 2009,\n              <http://www.rfc-editor.org/info/rfc5681>.\n\
    \   [RFC5682]  Sarolahti, P., Kojo, M., Yamamoto, K., and M. Hata,\n         \
    \     \"Forward RTO-Recovery (F-RTO): An Algorithm for Detecting\n           \
    \   Spurious Retransmission Timeouts with TCP\", RFC 5682,\n              September\
    \ 2009, <http://www.rfc-editor.org/info/rfc5682>.\n   [RFC5690]  Floyd, S., Arcia,\
    \ A., Ros, D., and J. Iyengar, \"Adding\n              Acknowledgement Congestion\
    \ Control to TCP\", RFC 5690,\n              February 2010, <http://www.rfc-editor.org/info/rfc5690>.\n\
    \   [RFC5783]  Welzl, M. and W. Eddy, \"Congestion Control in the RFC\n      \
    \        Series\", RFC 5783, February 2010,\n              <http://www.rfc-editor.org/info/rfc5783>.\n\
    \   [RFC5827]  Allman, M., Avrachenkov, K., Ayesta, U., Blanton, J., and\n   \
    \           P. Hurtig, \"Early Retransmit for TCP and Stream Control\n       \
    \       Transmission Protocol (SCTP)\", RFC 5827, May 2010,\n              <http://www.rfc-editor.org/info/rfc5827>.\n\
    \   [RFC5925]  Touch, J., Mankin, A., and R. Bonica, \"The TCP\n             \
    \ Authentication Option\", RFC 5925, June 2010,\n              <http://www.rfc-editor.org/info/rfc5925>.\n\
    \   [RFC5926]  Lebovitz, G. and E. Rescorla, \"Cryptographic Algorithms\n    \
    \          for the TCP Authentication Option (TCP-AO)\", RFC 5926,\n         \
    \     June 2010, <http://www.rfc-editor.org/info/rfc5926>.\n   [RFC5927]  Gont,\
    \ F., \"ICMP Attacks against TCP\", RFC 5927, July 2010,\n              <http://www.rfc-editor.org/info/rfc5927>.\n\
    \   [RFC5961]  Ramaiah, A., Stewart, R., and M. Dalal, \"Improving TCP's\n   \
    \           Robustness to Blind In-Window Attacks\", RFC 5961, August\n      \
    \        2010, <http://www.rfc-editor.org/info/rfc5961>.\n   [RFC6013]  Simpson,\
    \ W., \"TCP Cookie Transactions (TCPCT)\", RFC 6013,\n              January 2011,\
    \ <http://www.rfc-editor.org/info/rfc6013>.\n   [RFC6056]  Larsen, M. and F. Gont,\
    \ \"Recommendations for Transport-\n              Protocol Port Randomization\"\
    , BCP 156, RFC 6056, January\n              2011, <http://www.rfc-editor.org/info/rfc6056>.\n\
    \   [RFC6069]  Zimmermann, A. and A. Hannemann, \"Making TCP More Robust\n   \
    \           to Long Connectivity Disruptions (TCP-LCD)\", RFC 6069,\n        \
    \      December 2010, <http://www.rfc-editor.org/info/rfc6069>.\n   [RFC6077]\
    \  Papadimitriou, D., Welzl, M., Scharf, M., and B. Briscoe,\n              \"\
    Open Research Issues in Internet Congestion Control\", RFC\n              6077,\
    \ February 2011,\n              <http://www.rfc-editor.org/info/rfc6077>.\n  \
    \ [RFC6093]  Gont, F. and A. Yourtchenko, \"On the Implementation of the\n   \
    \           TCP Urgent Mechanism\", RFC 6093, January 2011,\n              <http://www.rfc-editor.org/info/rfc6093>.\n\
    \   [RFC6181]  Bagnulo, M., \"Threat Analysis for TCP Extensions for\n       \
    \       Multipath Operation with Multiple Addresses\", RFC 6181,\n           \
    \   March 2011, <http://www.rfc-editor.org/info/rfc6181>.\n   [RFC6182]  Ford,\
    \ A., Raiciu, C., Handley, M., Barre, S., and J.\n              Iyengar, \"Architectural\
    \ Guidelines for Multipath TCP\n              Development\", RFC 6182, March 2011,\n\
    \              <http://www.rfc-editor.org/info/rfc6182>.\n   [RFC6191]  Gont,\
    \ F., \"Reducing the TIME-WAIT State Using TCP\n              Timestamps\", BCP\
    \ 159, RFC 6191, April 2011,\n              <http://www.rfc-editor.org/info/rfc6191>.\n\
    \   [RFC6247]  Eggert, L., \"Moving the Undeployed TCP Extensions RFC\n      \
    \        1072, RFC 1106, RFC 1110, RFC 1145, RFC 1146, RFC 1379,\n           \
    \   RFC 1644, and RFC 1693 to Historic Status\", RFC 6247, May\n             \
    \ 2011, <http://www.rfc-editor.org/info/rfc6247>.\n   [RFC6298]  Paxson, V., Allman,\
    \ M., Chu, J., and M. Sargent,\n              \"Computing TCP's Retransmission\
    \ Timer\", RFC 6298, June\n              2011, <http://www.rfc-editor.org/info/rfc6298>.\n\
    \   [RFC6335]  Cotton, M., Eggert, L., Touch, J., Westerlund, M., and S.\n   \
    \           Cheshire, \"Internet Assigned Numbers Authority (IANA)\n         \
    \     Procedures for the Management of the Service Name and\n              Transport\
    \ Protocol Port Number Registry\", BCP 165, RFC\n              6335, August 2011,\n\
    \              <http://www.rfc-editor.org/info/rfc6335>.\n   [RFC6349]  Constantine,\
    \ B., Forget, G., Geib, R., and R. Schrage,\n              \"Framework for TCP\
    \ Throughput Testing\", RFC 6349, August\n              2011, <http://www.rfc-editor.org/info/rfc6349>.\n\
    \   [RFC6356]  Raiciu, C., Handley, M., and D. Wischik, \"Coupled\n          \
    \    Congestion Control for Multipath Transport Protocols\", RFC\n           \
    \   6356, October 2011,\n              <http://www.rfc-editor.org/info/rfc6356>.\n\
    \   [RFC6429]  Bashyam, M., Jethanandani, M., and A. Ramaiah, \"TCP Sender\n \
    \             Clarification for Persist Condition\", RFC 6429, December\n    \
    \          2011, <http://www.rfc-editor.org/info/rfc6429>.\n   [RFC6528]  Gont,\
    \ F. and S. Bellovin, \"Defending against Sequence\n              Number Attacks\"\
    , RFC 6528, February 2012,\n              <http://www.rfc-editor.org/info/rfc6528>.\n\
    \   [RFC6582]  Henderson, T., Floyd, S., Gurtov, A., and Y. Nishida, \"The\n \
    \             NewReno Modification to TCP's Fast Recovery Algorithm\",\n     \
    \         RFC 6582, April 2012,\n              <http://www.rfc-editor.org/info/rfc6582>.\n\
    \   [RFC6633]  Gont, F., \"Deprecation of ICMP Source Quench Messages\",\n   \
    \           RFC 6633, May 2012,\n              <http://www.rfc-editor.org/info/rfc6633>.\n\
    \   [RFC6675]  Blanton, E., Allman, M., Wang, L., Jarvinen, I., Kojo, M.,\n  \
    \            and Y. Nishida, \"A Conservative Loss Recovery Algorithm\n      \
    \        Based on Selective Acknowledgment (SACK) for TCP\", RFC\n           \
    \   6675, August 2012,\n              <http://www.rfc-editor.org/info/rfc6675>.\n\
    \   [RFC6691]  Borman, D., \"TCP Options and Maximum Segment Size (MSS)\",\n \
    \             RFC 6691, July 2012,\n              <http://www.rfc-editor.org/info/rfc6691>.\n\
    \   [RFC6824]  Ford, A., Raiciu, C., Handley, M., and O. Bonaventure,\n      \
    \        \"TCP Extensions for Multipath Operation with Multiple\n            \
    \  Addresses\", RFC 6824, January 2013,\n              <http://www.rfc-editor.org/info/rfc6824>.\n\
    \   [RFC6846]  Pelletier, G., Sandlund, K., Jonsson, L-E., and M. West,\n    \
    \          \"RObust Header Compression (ROHC): A Profile for TCP/IP\n        \
    \      (ROHC-TCP)\", RFC 6846, January 2013,\n              <http://www.rfc-editor.org/info/rfc6846>.\n\
    \   [RFC6897]  Scharf, M. and A. Ford, \"Multipath TCP (MPTCP) Application\n \
    \             Interface Considerations\", RFC 6897, March 2013,\n            \
    \  <http://www.rfc-editor.org/info/rfc6897>.\n   [RFC6928]  Chu, J., Dukkipati,\
    \ N., Cheng, Y., and M. Mathis,\n              \"Increasing TCP's Initial Window\"\
    , RFC 6928, April 2013,\n              <http://www.rfc-editor.org/info/rfc6928>.\n\
    \   [RFC6937]  Mathis, M., Dukkipati, N., and Y. Cheng, \"Proportional\n     \
    \         Rate Reduction for TCP\", RFC 6937, May 2013,\n              <http://www.rfc-editor.org/info/rfc6937>.\n\
    \   [RFC6994]  Touch, J., \"Shared Use of Experimental TCP Options\", RFC\n  \
    \            6994, August 2013,\n              <http://www.rfc-editor.org/info/rfc6994>.\n\
    \   [RFC7323]  Borman, D., Braden, B., Jacobson, V., and R.\n              Scheffenegger,\
    \ \"TCP Extensions for High Performance\", RFC\n              7323, September\
    \ 2014,\n              <http://www.rfc-editor.org/info/rfc7323>.\n   [RFC7413]\
    \  Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP\n              Fast\
    \ Open\", RFC 7413, December 2014,\n              <http://www.rfc-editor.org/info/rfc7413>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [CK73]     Cerf, V. and R. Kahn, \"Towards\
    \ Protocols for Internetwork\n              Communication\", IFIP/TC6.1, NIC 18764,\
    \ INWG 39, September\n              1973.\n   [CTCP]     Sridharan, M., Tan, K.,\
    \ Bansal, D., and D. Thaler,\n              \"Compound TCP: A New TCP Congestion\
    \ Control for High-Speed\n              and Long Distance Networks\", Work in\
    \ Progress,\n              draft-sridharan-tcpm-ctcp-02, November 2008.\n   [CUBIC]\
    \    Rhee, I., Xu, L., and S. Ha, \"CUBIC for Fast Long-Distance\n           \
    \   Networks\", Work in Progress, draft-rhee-tcpm-cubic-02,\n              August\
    \ 2008.\n   [Errata]   RFC Editor, \"RFC Errata\",\n              <http://www.rfc-editor.org/errata.php>.\n\
    \   [HTCP]     Leith, D., \"H-TCP: TCP Congestion Control for High\n         \
    \     Bandwidth-Delay Product Paths\", Work in Progress,\n              draft-leith-tcp-htcp-06,\
    \ April 2008.\n   [JK92]     Jacobson, V. and M. Karels, \"Congestion Avoidance\
    \ and\n              Control\", November 1992,\n              <ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z>.\n\
    \   [Jac88]    Jacobson, V., \"Congestion Avoidance and Control\", ACM\n     \
    \         SIGCOMM 1988 Proceedings, in ACM Computer Communication\n          \
    \    Review, 18 (4), pp. 314-329, August 1988.\n   [Jacobson] Jacobson, V., \"\
    TCP-IP Mailing List\", Article 167 of\n              comp.protocols.tcp-ip, March\
    \ 1988,\n              <ftp://ftp.ee.lbl.gov/email/vanj.88mar10.txt>.\n   [KP87]\
    \     Karn, P. and C. Partridge, \"Round Trip Time Estimation\",\n           \
    \   ACM SIGCOMM 1987 Proceedings, in ACM Computer\n              Communication\
    \ Review, 17 (5), pp. 2-7, August 1987.\n   [MAF04]    Medina, A., Allman, M.,\
    \ and S. Floyd, \"Measuring the\n              Evolution of Transport Protocols\
    \ in the Internet\", ACM\n              Computer Communication Review, 35 (2),\
    \ April 2005.\n   [MM96]     Mathis, M. and J. Mahdavi, \"Forward Acknowledgement:\n\
    \              Refining TCP Congestion Control\", ACM SIGCOMM 1996\n         \
    \     Proceedings, in ACM Computer Communication Review 26 (4),\n            \
    \  pp. 281-292, October 1996.\n   [RFC1016]  Prue, W. and J. Postel, \"Something\
    \ a host could do with\n              source quench: The Source Quench Introduced\
    \ Delay\n              (SQuID)\", RFC 1016, July 1987,\n              <http://www.rfc-editor.org/info/rfc1016>.\n\
    \   [RFC2026]  Bradner, S., \"The Internet Standards Process -- Revision\n   \
    \           3\", BCP 9, RFC 2026, October 1996,\n              <http://www.rfc-editor.org/info/rfc2026>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2474]  Nichols, K., Blake, S., Baker, F., and D. Black,\n            \
    \  \"Definition of the Differentiated Services Field (DS\n              Field)\
    \ in the IPv4 and IPv6 Headers\", RFC 2474, December\n              1998, <http://www.rfc-editor.org/info/rfc2474>.\n\
    \   [RFC3758]  Stewart, R., Ramalho, M., Xie, Q., Tuexen, M., and P.\n       \
    \       Conrad, \"Stream Control Transmission Protocol (SCTP)\n              Partial\
    \ Reliability Extension\", RFC 3758, May 2004,\n              <http://www.rfc-editor.org/info/rfc3758>.\n\
    \   [RFC4340]  Kohler, E., Handley, M., and S. Floyd, \"Datagram\n           \
    \   Congestion Control Protocol (DCCP)\", RFC 4340, March 2006,\n            \
    \  <http://www.rfc-editor.org/info/rfc4340>.\n   [RFC4341]  Floyd, S. and E. Kohler,\
    \ \"Profile for Datagram Congestion\n              Control Protocol (DCCP) Congestion\
    \ Control ID 2: TCP-like\n              Congestion Control\", RFC 4341, March\
    \ 2006,\n              <http://www.rfc-editor.org/info/rfc4341>.\n   [RFC6115]\
    \  Li, T., \"Recommendation for a Routing Architecture\", RFC\n              6115,\
    \ February 2011,\n              <http://www.rfc-editor.org/info/rfc6115>.\n  \
    \ [SCWA99]   Savage, S., Cardwell, N., Wetherall, D., and T. Anderson,\n     \
    \         \"TCP Congestion Control with a Misbehaving Receiver\", ACM\n      \
    \        Computer Communication Review, 29 (5), pp. 71-78, October\n         \
    \     1999.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document grew out of a discussion on the end2end-interest\n\
    \   mailing list, the public list of the End-to-End Research Group of the\n  \
    \ IRTF, and continued development under the IETF's TCP Maintenance and\n   Minor\
    \ Extensions (TCPM) working group.  We thank Mark Allman, Yuchung\n   Cheng, Ted\
    \ Faber, Gorry Fairhurst, Sally Floyd, Janardhan Iyengar,\n   Reiner Ludwig, Pekka\
    \ Savola, and Joe Touch for their contributions,\n   in particular.  Keith McCloghrie\
    \ provided some useful notes and\n   clarification on the various MIB-related\
    \ RFCs.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Martin Duke\n   F5 Networks\n   401 Elliott Ave W\n  \
    \ Seattle, WA  98119\n   United States\n   Phone: 206-272-7537\n   EMail: m.duke@f5.com\n\
    \   Robert Braden\n   USC Information Sciences Institute\n   Marina del Rey, CA\
    \  90292-6695\n   United States\n   Phone: 310-448-9173\n   EMail: braden@isi.edu\n\
    \   Wesley M. Eddy\n   MTI Systems\n   18013 Cleveland Parkway\n   Suite 170\n\
    \   Cleveland, OH  44135\n   United States\n   Phone: 216-433-6682\n   EMail:\
    \ wes@mti-systems.com\n   Ethan Blanton\n   Interrupt Sciences\n   EMail: elb@interruptsciences.com\n\
    \   Alexander Zimmermann\n   NetApp, Inc.\n   Sonnenallee 1\n   Kirchheim  85551\n\
    \   Germany\n   Phone: +49 89 900594712\n   EMail: alexander.zimmermann@netapp.com\n"
