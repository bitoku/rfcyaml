- title: __initial_text__
  contents:
  - '                      WebNFS Client Specification

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a lightweight binding mechanism that allows\n\
    \   NFS clients to obtain service from WebNFS-enabled servers with a\n   minimum\
    \ of protocol overhead.  In removing this overhead, WebNFS\n   clients see benefits\
    \ in faster response to requests, easy transit of\n   packet filter firewalls\
    \ and TCP-based proxies, and better server\n   scalability.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.    Introduction . . . . . . . . . . . . . . . . . .\
    \ . . . . . 2\n   2.    TCP vs UDP . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 2\n   3.    Well-known Port  . . . . . . . . . . . . . . . . . . . . . 2\n\
    \   4.    NFS Version 3  . . . . . . . . . . . . . . . . . . . . . . 3\n   4.1\
    \     Transfer Size  . . . . . . . . . . . . . . . . . . . . . 3\n   4.2     Fast\
    \ Writes  . . . . . . . . . . . . . . . . . . . . . . 4\n   4.3     READDIRPLUS\
    \  . . . . . . . . . . . . . . . . . . . . . . 4\n   5.    Public Filehandle \
    \ . . . . . . . . . . . . . . . . . . . . 5\n   5.1     NFS Version 2 Public Filehandle\
    \  . . . . . . . . . . . . 5\n   5.2     NFS Version 3 Public Filehandle  . .\
    \ . . . . . . . . . . 5\n   6.    Multi-component Lookup . . . . . . . . . . .\
    \ . . . . . . . 6\n   6.1     Canonical Path vs. Native Path . . . . . . . . .\
    \ . . . . 6\n   6.2     Symbolic Links . . . . . . . . . . . . . . . . . . . .\
    \ . 7\n   6.2.1     Absolute Link  . . . . . . . . . . . . . . . . . . . . 8\n\
    \   6.2.2     Relative Link  . . . . . . . . . . . . . . . . . . . . 8\n   6.3\
    \     Filesystem Spanning Pathnames  . . . . . . . . . . . . . 9\n   7.    Contacting\
    \ the Server  . . . . . . . . . . . . . . . . . . 9\n   8.    Mount Protocol .\
    \ . . . . . . . . . . . . . . . . . . . . . 11\n   9.    Exploiting Concurrency\
    \ . . . . . . . . . . . . . . . . . . 12\n   9.1     Read-ahead . . . . . . .\
    \ . . . . . . . . . . . . . . . . 12\n   9.2     Concurrent File Download . .\
    \ . . . . . . . . . . . . . . 13\n   10.   Timeout and Retransmission . . . .\
    \ . . . . . . . . . . . . 13\n   11.   Bibliography . . . . . . . . . . . . .\
    \ . . . . . . . . . . 15\n   12.   Security Considerations  . . . . . . . . .\
    \ . . . . . . . . 16\n   13.   Acknowledgements . . . . . . . . . . . . . . .\
    \ . . . . . . 16\n   14.   Author's Address . . . . . . . . . . . . . . . . .\
    \ . . . . 16\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The NFS protocol provides access to shared filesystems across\n\
    \   networks.  It is designed to be machine, operating system, network\n   architecture,\
    \ and transport protocol independent.  The protocol\n   currently exists in two\
    \ versions: version 2 [RFC1094] and version 3\n   [RFC1813], both built on Sun\
    \ RPC [RFC1831] at its associated eXternal\n   Data Representation (XDR) [RFC1832]\
    \ and Binding Protocol [RFC1833].\n   WebNFS provides additional semantics that\
    \ can be applied to NFS\n   version 2 and 3 to eliminate the overhead of PORTMAP\
    \ and MOUNT\n   protocols, make the protocol easier to use where firewall transit\
    \ is\n   required, and reduce the number of LOOKUP requests required to\n   identify\
    \ a particular file on the server. WebNFS server requirements\n   are described\
    \ in RFC 2055.\n"
- title: 2. TCP vs UDP
  contents:
  - "2. TCP vs UDP\n   The NFS protocol is most well known for its use of UDP which\
    \ performs\n   acceptably on local area networks.  However, on wide area networks\n\
    \   with error prone, high-latency connections and bandwidth contention,\n   TCP\
    \ is well respected for its congestion control and superior error\n   handling.\
    \  A growing number of NFS implementations now support the\n   NFS protocol over\
    \ TCP connections.\n   Use of NFS version 3 is particularly well matched to the\
    \ use of TCP\n   as a transport protocol.  Version 3 removes the arbitrary 8k\
    \ transfer\n   size limit of version 2, allowing the READ or WRITE of very large\n\
    \   streams of data over a TCP connection.  Note that NFS version 2 is\n   also\
    \ supported on TCP connections, though the benefits of TCP data\n   streaming\
    \ will not be as great.\n   A WebNFS client must first attempt to connect to its\
    \ server with a\n   TCP connection.  If the server refuses the connection, the\
    \ client\n   should attempt to use UDP.\n"
- title: 3. Well-known Port
  contents:
  - "3. Well-known Port\n   While Internet protocols are generally identified by registered\
    \ port\n   number assignments, RPC based protocols register a 32 bit program\n\
    \   number and a dynamically assigned port with the portmap service which\n  \
    \ is registered on the well-known port 111.  Since the NFS protocol is\n   RPC-based,\
    \ NFS servers register their port assignment with the\n   portmap service.\n \
    \  NFS servers are constrained by a requirement to re-register at the\n   same\
    \ port after a server crash and recovery so that clients can\n   recover simply\
    \ by retransmitting an RPC request until a response is\n   received.  This is\
    \ simpler than the alternative of having the client\n   repeatedly check with\
    \ the portmap service for a new port assignment.\n   NFS servers typically achieve\
    \ this port invariance by registering a\n   constant port assignment, 2049, for\
    \ both UDP and TCP.\n   To avoid the overhead of contacting the server's portmap\
    \ service, and\n   to facilitate transit through packet filtering firewalls, WebNFS\n\
    \   clients optimistically assume that WebNFS servers register on port\n   2049.\
    \  Most NFS servers use this port assignment already, so this\n   client optimism\
    \ is well justified. Refer to section 8 for further\n   details on port binding.\n"
- title: 4. NFS Version 3
  contents:
  - "4. NFS Version 3\n   NFS version 3 corrects deficiencies in version 2 of the\
    \ protocol as\n   well as providing a number of features suitable to WebNFS clients\n\
    \   accessing servers over high-latency, low-bandwidth connections.\n"
- title: 4.1 Transfer Size
  contents:
  - "4.1 Transfer Size\n   NFS version 2 limited the amount of data in a single request\
    \ or reply\n   to 8 kilobytes.  This limit was based on what was then considered\
    \ a\n   reasonable upper bound on the amount of data that could be\n   transmitted\
    \ in a UDP datagram across an Ethernet.  The 8k transfer\n   size limitation affects\
    \ READ, WRITE, and READDIR requests. When using\n   version 2, a WebNFS client\
    \ must not transmit any request that exceeds\n   the 8k transfer size.  Additionally,\
    \ the client must be able to\n   adjust its requests to suit servers that limit\
    \ transfer sizes to\n   values smaller than 8k.\n   NFS version 3 removes the\
    \ 8k limit, allowing the client and server to\n   negotiate whatever limit they\
    \ choose.  Larger transfer sizes are\n   preferred since they require fewer READ\
    \ or WRITE requests to transfer\n   a given amount of data and utilize a TCP stream\
    \ more efficiently.\n   While the client can use the FSINFO procedure to request\
    \ the server's\n   maximum and preferred transfer sizes, in the interests of keeping\
    \ the\n   number of NFS requests to a minimum, WebNFS clients should\n   optimistically\
    \ choose a transfer size and make corrections if\n   necessary based on the server's\
    \ response.\n   For instance, given that the file attributes returned with the\n\
    \   filehandle from a LOOKUP request indicate that the file has a size of\n  \
    \ 50k, the client might transmit a READ request for 50k.  If the server\n   returns\
    \ only 32k, then the client can assume that the server's\n   maximum transfer\
    \ size is 32k and issue another read request for the\n   remaining data.  The\
    \ server will indicate positively when the end of\n   file is reached.\n   A similar\
    \ strategy can be used when writing to a file on the server,\n   though the client\
    \ should be more conservative in choosing write\n   request sizes so as to avoid\
    \ transmitting large amounts of data that\n   the server cannot handle.\n"
- title: 4.2 Fast Writes
  contents:
  - "4.2 Fast Writes\n   NFS version 2 requires the server to write client data to\
    \ stable\n   storage before responding to the client.  This avoids the possibility\n\
    \   of the the server crashing and losing the client's data after a\n   positive\
    \ response.  While this requirement protects the client from\n   data loss, it\
    \ requires that the server direct client write requests\n   directly to the disk,\
    \ or to buffer client data in expensive non-\n   volatile memory (NVRAM).  Either\
    \ way, the effect is poor write\n   performance, either through inefficient synchronous\
    \ writes to the\n   disk or through the limited buffering available in NVRAM.\n\
    \   NFS version 3 provides clients with the option of having the server\n   buffer\
    \ a series of WRITE requests in unstable storage.  A subsequent\n   COMMIT request\
    \ from the client will have the server flush the data to\n   stable storage and\
    \ have the client verify that the server lost none\n   of the data.  Since fast\
    \ writes benefit both the client and the\n   server, WebNFS clients should use\
    \ WRITE/COMMIT when writing to the\n   server.\n"
- title: 4.3 READDIRPLUS
  contents:
  - "4.3 READDIRPLUS\n   The NFS version 2 READDIR procedure is also supported in\
    \ version 3.\n   READDIR returns the names of the entries in a directory along\
    \ with\n   their fileids.  Browser programs that display directory contents as\
    \ a\n   list will usually display more than just the filename; a different\n \
    \  icon may be displayed if the entry is a directory or a file.\n   Similarly,\
    \ the browser may display the file size, and date of last\n   modification.\n\
    \   Since this additional information is not returned by READDIR, version\n  \
    \ 2 clients must issue a series of LOOKUP requests, one per directory\n   member,\
    \ to retrieve the attribute data.  Clearly this is an expensive\n   operation\
    \ where the directory is large (perhaps several hundred\n   entries) and the network\
    \ latency is high.\n   The version 3 READDIRPLUS request allows the client to\
    \ retrieve not\n   only the names of the directory entries, but also their file\n\
    \   attributes and filehandles in a single call.  WebNFS clients that\n   require\
    \ attribute information for directory entries should use\n   READDIRPLUS in preference\
    \ to READDIR.\n"
- title: 5. Public Filehandle
  contents:
  - "5. Public Filehandle\n   NFS filehandles are normally created by the server and\
    \ used to\n   identify uniquely a particular file or directory on the server.\
    \  The\n   client does not normally create filehandles or have any knowledge of\n\
    \   the contents of a filehandle.\n   The public filehandle is an an exception.\
    \  It is an NFS filehandle\n   with a reserved value and special semantics that\
    \ allow an initial\n   filehandle to be obtained.  A WebNFS client can use the\
    \ public\n   filehandle as an initial filehandle rather than using the MOUNT\n\
    \   protocol.  Since NFS version 2 and version 3 have different\n   filehandle\
    \ formats, the public filehandle is defined differently for\n   each.\n   The\
    \ public filehandle is a zero filehandle.  For NFS version 2 this\n   is a filehandle\
    \ with 32 zero octets.  A version 3 public filehandle\n   has zero length.\n"
- title: 5.1 NFS Version 2 Public Filehandle
  contents:
  - "5.1 NFS Version 2 Public Filehandle\n   A version 2 filehandle is defined in\
    \ RFC 1094 as an opaque value\n   occupying 32 octets.  A version 2 public filehandle\
    \ has a zero in\n   each octet, i.e. all zeros.\n    1                       \
    \                                      32\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 5.2 NFS Version 3 Public Filehandle
  contents:
  - "5.2 NFS Version 3 Public Filehandle\n   A version 3 filehandle is defined in\
    \ RFC 1813 as a variable length\n   opaque value occupying up to 64 octets.  The\
    \ length of the filehandle\n   is indicated by an integer value contained in a\
    \ 4 octet value which\n   describes the number of valid octets that follow. A\
    \ version 3 public\n   filehandle has a length of zero.\n   +-+-+-+-+\n   |  \
    \ 0   |\n   +-+-+-+-+\n"
- title: 6. Multi-component Lookup
  contents:
  - "6. Multi-component Lookup\n   Normally the NFS LOOKUP request (version 2 or 3)\
    \ takes a directory\n   filehandle along with the name of a directory member,\
    \ and returns the\n   filehandle of the directory member.  If a client needs to\
    \ evaluate a\n   pathname that contains a sequence of components, then beginning\
    \ with\n   the directory filehandle of the first component it must issue a\n \
    \  series of LOOKUP requests one component at a time.  For instance,\n   evaluation\
    \ of the Unix path  \"a/b/c\" will generate separate LOOKUP\n   requests for each\
    \ component of the pathname \"a\", \"b\", and \"c\".\n   A LOOKUP request that\
    \ uses the public filehandle can provide a\n   pathname containing multiple components.\
    \  The server is expected to\n   evaluate the entire pathname and return a filehandle\
    \ for the final\n   component. Both canonical (slash-separated) and server native\n\
    \   pathnames are supported.\n   For example, rather than evaluate the path \"\
    a/b/c\" as:\n        LOOKUP  FH=0x0  \"a\"  --->\n                           \
    \  <---  FH=0x1\n        LOOKUP  FH=0x1  \"b\"  --->\n                       \
    \      <---  FH=0x2\n        LOOKUP  FH=0x2  \"c\"  --->\n                   \
    \          <---  FH=0x3\n   Relative to the public filehandle these three LOOKUP\
    \ requests can be\n   replaced by a single multi-component lookup:\n        LOOKUP\
    \  FH=0x0  \"a/b/c\"  --->\n                                 <---  FH=0x3\n  \
    \ Multi-component lookup is supported only for LOOKUP requests relative\n   to\
    \ the public filehandle.\n"
- title: 6.1 Canonical Path vs. Native Path
  contents:
  - "6.1 Canonical Path vs. Native Path\n   If the pathname in a multi-component LOOKUP\
    \ request begins with an\n   ASCII character, then it must be a canonical path.\
    \  A canonical path\n   is a hierarchically-related, slash-separated sequence\
    \ of components,\n   <directory>/<directory>/.../<name>.  Occurrences of the \"\
    /\" character\n   within a component must be escaped using the escape code %2f.\
    \  Non-\n   ascii characters within components must also be escaped using the\
    \ \"%\"\n   character to introduce a two digit hexadecimal code. Occurrences of\n\
    \   the \"%\" character that do not introduce an encoded character must\n   themselves\
    \ be encoded with %25.\n   If the first character of the path is a slash, then\
    \ the canonical\n   path will be evaluated relative to the server's root directory.\
    \  If\n   the first character is not a slash, then the path will be evaluated\n\
    \   relative to the directory with which the public filehandle is\n   associated.\n\
    \   Not all WebNFS servers can support arbitrary use of absolute paths.\n   Clearly,\
    \ the server cannot return a filehandle if the path identifies\n   a file or directory\
    \ that is not exported by the server.  In addition,\n   some servers will not\
    \ return a filehandle if the path names a file or\n   directory in an exported\
    \ filesystem different from the one that is\n   associated with the public filehandle.\n\
    \   If the first character of the path is 0x80 (non-ascii) then the\n   following\
    \ character is the first in a native path.  A native path\n   conforms to the\
    \ normal pathname syntax of the server. For example:\n        Lookup for Canonical\
    \ Path:\n                LOOKUP FH=0x0 \"/a/b/c\"\n        Lookup for Native Path:\n\
    \                LOOKUP FH=0x0  0x80 \"a:b:c\"\n"
- title: 6.2 Symbolic Links
  contents:
  - "6.2 Symbolic Links\n   On Unix servers, components within a pathname may be symbolic\
    \ links.\n   The server will evaluate these symbolic links as a part of the normal\n\
    \   pathname evaluation process.  If the final component is a symbolic\n   link,\
    \ the server will return its filehandle, rather than evaluate it.\n   If the attributes\
    \ returned with a filehandle indicate that it refers\n   to a symbolic link, then\
    \ it is the client's responsibility to deal\n   with the link by fetching the\
    \ contents of the link using the READLINK\n   procedure. What follows is determined\
    \ by the contents of the link.\n   Evaluation of symbolic links by the client\
    \ is defined only if the\n   symbolic link is retrieved via the multi-component\
    \ lookup of a\n   canonical path.\n"
- title: 6.2.1 Absolute Link
  contents:
  - "6.2.1 Absolute Link\n   If the first character of the link text is a slash \"\
    /\", then the\n   following path can be assumed to be absolute.  The entire path\
    \ must\n   be evaluated by the server relative to the public filehandle:\n   \
    \     LOOKUP  FH=0x0  \"a/b\"  --->\n                               <---  FH=0x1\
    \ (symbolic link)\n        READLINK FH=0x1        --->\n                     \
    \          <---  \"/x/y\"\n        LOOKUP  FH=0x0  \"/x/y\"\n                \
    \               <---  FH=0x2\n   So in this case the client just passes the link\
    \ text back to the\n   server for evaluation.\n"
- title: 6.2.2 Relative Link
  contents:
  - "6.2.2 Relative Link\n   If the first character of the link text is not a slash,\
    \ then the\n   following path can be assumed to be relative to the location of\
    \ the\n   symbolic link.  To evaluate this correctly, the client must\n   substitute\
    \ the link text in place of the final pathname component\n   that named the link\
    \ and issue a another LOOKUP relative to the public\n   filehandle.\n        LOOKUP\
    \  FH=0x0  \"a/b\"  --->\n                               <---  FH=0x1 (symbolic\
    \ link)\n        READLINK FH=0x1        --->\n                               <---\
    \  \"x/y\"\n        LOOKUP  FH=0x0  \"a/x/y\"\n                              \
    \ <---  FH=0x2\n   By substituting the link text in the link path and having the\
    \ server\n   evaluate the new path, the server effectively gets to evaluate the\n\
    \   link relative to the link's location.\n   The client may also \"clean up\"\
    \ the resulting pathname by removing\n   redundant components as described in\
    \ Section 4. of RFC 1808.\n"
- title: 6.3 Filesystem Spanning Pathnames
  contents:
  - "6.3 Filesystem Spanning Pathnames\n   NFS LOOKUP requests normally do not cross\
    \ from one filesystem to\n   another on the server.  For instance if the server\
    \ has the following\n   export and mounts:\n      /export           (exported)\n\
    \      /export/bigdata   (mountpoint)\n   then an NFS LOOKUP for \"bigdata\" using\
    \ the filehandle for \"/export\"\n   will return a \"no file\" error because the\
    \ LOOKUP request did not\n   cross the mountpoint on the server.  There is a practical\
    \ reason for\n   this limitation: if the server permitted the mountpoint crossing\
    \ to\n   occur, then a Unix client might receive ambiguous fileid information\n\
    \   inconsistent with it's view of a single remote mount for \"/export\".\n  \
    \ It is expected that the client resolve this by mirroring the\n   additional\
    \ server mount, e.g.\n      Client                           Server\n      /mnt\
    \         <--- mounted on --- /export\n      /mnt/bigdata <--- mounted on ---\
    \ /export/bigdata\n   However, this semantic changes if the client issues the\
    \ filesystem\n   spanning LOOKUP relative to the public filehandle. If the following\n\
    \   filesystems are exported:\n      /export           (exported public)\n   \
    \   /export/bigdata   (exported mountpoint)\n   then an NFS LOOKUP for \"bigdata\"\
    \ relative to the public filehandle\n   will cross the mountpoint - just as if\
    \ the client had issued a MOUNT\n   request - but only if the new filesystem is\
    \ exported, and only if the\n   server supports Export Spanning Pathnames described\
    \ in Section 6.3 of\n   RFC 2055 [RFC2055].\n"
- title: 7. Contacting the Server
  contents:
  - "7. Contacting the Server\n   WebNFS clients should be optimistic in assuming\
    \ that the server\n   supports WebNFS, but should be capable of fallback to conventional\n\
    \   methods for server access if the server does not support WebNFS.\n   The client\
    \ should start with the assumption that the server supports:\n     - NFS version\
    \ 3.\n     - NFS TCP connections.\n     - Public Filehandles.\n   If these assumptions\
    \ are not met, the client should fall back\n   gracefully with a minimum number\
    \ of messages. The following steps are\n   recommended:\n   1. Attempt to create\
    \ a TCP connection to the server's\n      port 2049.\n      If the connection\
    \ fails then assume that a request\n      sent over UDP will work.  Use UDP port\
    \ 2049.\n      Do not use the PORTMAP protocol to determine the\n      server's\
    \ port unless the server does not respond to\n      port 2049 for both TCP and\
    \ UDP.\n   2. Assume WebNFS and V3 are supported.\n      Send an NFS version 3\
    \ LOOKUP with the public filehandle\n      for the requested pathname.\n     \
    \ If the server returns an RPC PROG_MISMATCH error then\n      assume that NFS\
    \ version 3 is not supported.  Retry\n      the LOOKUP with an NFS version 2 public\
    \ filehandle.\n      Note: The first call may not necessarily be a LOOKUP\n  \
    \    if the operation is directed at the public filehandle\n      itself, e.g.\
    \ a READDIR or READDIRPLUS of the directory\n      that is associated with the\
    \ public filehandle.\n      If the server returns an NFS3ERR_STALE, NFS3ERR_INVAL,\
    \ or\n      NFS3ERR_BADHANDLE error, then assume that the server does\n      not\
    \ support WebNFS since it does not recognize the public\n      filehandle. The\
    \ client must use the server's portmap\n      service to locate and use the MOUNT\
    \ protocol to obtain an\n      initial filehandle for the requested path.\n  \
    \ WebNFS clients can benefit by caching information about the server:\n   whether\
    \ the server supports TCP connections (if TCP is supported then\n   the client\
    \ should cache the TCP connection as well), which protocol\n   the server supports\
    \ and whether the server supports public\n   filehandles.  If the server does\
    \ not support public filehandles, the\n   client may choose to cache the port\
    \ assignment of the MOUNT service\n   as well as previously used pathnames and\
    \ their filehandles.\n"
- title: 8. Mount Protocol
  contents:
  - "8. Mount Protocol\n   If the server returns an error to the client that indicates\
    \ no\n   support for public filehandles, the client must use the MOUNT\n   protocol\
    \ to convert the given pathname to a filehandle.  Version 1 of\n   the MOUNT protocol\
    \ is described in Appendix A of RFC 1094 and version\n   3 in Appendix I of RFC\
    \ 1813. Version 2 of the MOUNT protocol is\n   identical to version 1 except for\
    \ the addition of a procedure\n   MOUNTPROC_PATHCONF which returns POSIX pathconf\
    \ information from the\n   server.\n   At this point the client must already have\
    \ some indication as to\n   which version of the NFS protocol is supported on\
    \ the server.  Since\n   the filehandle format differs between NFS versions 2\
    \ and 3, the\n   client must select the appropriate version of the MOUNT protocol.\n\
    \   MOUNT versions 1 and 2 return only NFS version 2 filehandles, whereas\n  \
    \ MOUNT version 3 returns NFS version 3 filehandles.\n   Unlike the NFS service,\
    \ the MOUNT service is not registered on a\n   well-known port.  The client must\
    \ use the PORTMAP service to locate\n   the server's MOUNT port before it can\
    \ transmit a MOUNTPROC_MNT\n   request to retrieve the filehandle corresponding\
    \ to the requested\n   path.\n       Client                                  \
    \     Server\n       ------                                       ------\n   \
    \    -------------- MOUNT port ? -------------->  Portmapper\n       <--------------\
    \ Port=984 ------------------\n       ------- Filehandle for /export/foo ?  ---->\
    \  Mountd @ port 984\n       <--------- Filehandle=0xf82455ce0..  ------\n   NFS\
    \ servers commonly use a client's successful MOUNTPROC_MNT request\n   request\
    \ as an indication that the client has \"mounted\" the filesystem\n   and may\
    \ maintain this information in a file that lists the\n   filesystems that clients\
    \ currently have mounted.  This information is\n   removed from the file when\
    \ the client transmits an MOUNTPROC_UMNT\n   request.  Upon receiving a successful\
    \ reply to a MOUNTPROC_MNT\n   request, a WebNFS client should send a MOUNTPROC_UMNT\
    \ request to\n   prevent an accumulation of \"mounted\" records on the server.\n\
    \   Note that the additional overhead of the PORTMAP and MOUNT protocols\n   will\
    \ have an effect on the client's binding time to the server and\n   the dynamic\
    \ port assignment of the MOUNT protocol may preclude easy\n   firewall or proxy\
    \ server transit.\n   The client may regain some performance improvement by utilizing\
    \ a\n   pathname prefix cache.  For instance, if the client already has a\n  \
    \ filehandle for the pathname \"a/b\" then there is a good chance that\n   the\
    \ filehandle for \"a/b/c\" can be recovered by by a lookup of \"c\"\n   relative\
    \ to the filehandle for \"a/b\", eliminating the need to have\n   the MOUNT protocol\
    \ translate the pathname.  However, there are risks\n   in doing this.  Since\
    \ the LOOKUP response provides no indication of\n   filesystem mountpoint crossing\
    \ on the server, the relative LOOKUP may\n   fail, since NFS requests do not normally\
    \ cross mountpoints on the\n   server.  The MOUNT service can be relied upon to\
    \ evaluate the\n   pathname correctly - including the crossing of mountpoints\
    \ where\n   necessary.\n"
- title: 9. Exploiting Concurrency
  contents:
  - "9. Exploiting Concurrency\n   NFS servers are known for their high capacity and\
    \ their\n   responsiveness to clients transmitting multiple concurrent requests.\n\
    \   For best performance, a WebNFS client should take advantage of server\n  \
    \ concurrency. The RPC protocol on which the NFS protocol is based,\n   provides\
    \ transport-independent support for this concurrency via a\n   unique transaction\
    \ ID (XID) in every NFS request.\n   There is no need for a client to open multiple\
    \ TCP connections to\n   transmit concurrent requests.  The RPC record marking\
    \ protocol allows\n   the client to transmit and receive a stream of NFS requests\
    \ and\n   replies over a single connection.\n"
- title: 9.1 Read-ahead
  contents:
  - "9.1 Read-ahead\n   To keep the number of READ requests to a minimum, a  WebNFS\
    \ client\n   should use the maximum transfer size that it and the server can\n\
    \   support.  The client can often optimize utilization of the link\n   bandwidth\
    \ by transmitting concurrent READ requests.  The optimum\n   number of READ requests\
    \ needs to be determined dynamically taking\n   into account the available bandwidth,\
    \ link latency, and I/O bandwidth\n   of the client and server, e.g.  the following\
    \ series of READ requests\n   show a client using a single read-ahead to transfer\
    \ a 128k file from\n   the server with 32k READ requests:\n        READ XID=77\
    \ offset=0   for 32k  -->\n        READ XID=78 offset=32k for 32k  -->\n     \
    \                            <-- Data for XID 77\n        READ XID=79 offset=64k\
    \ for 32k  -->\n                                 <-- Data for XID 78\n       \
    \ READ XID=80 offset=96k for 32k  -->\n                                 <-- Data\
    \ for XID 79\n                                 <-- Data for XID 80\n   The client\
    \ must be able to handle the return of data out of order.\n   For instance, in\
    \ the above example the data for XID 78 may be\n   received before the data for\
    \ XID 77.\n   The client should be careful not to use read-ahead beyond the\n\
    \   capacity of the server, network, or client, to handle the data. This\n   might\
    \ be determined by a heuristic that measures throughput as the\n   download proceeds.\n"
- title: 9.2 Concurrent File Download
  contents:
  - "9.2 Concurrent File Download\n   A client may combine read-ahead with concurrent\
    \ download of multiple\n   files.  A practical example is that of Web pages that\
    \ contain\n   multiple images, or a Java Applet that imports multiple class files\n\
    \   from the server.\n   Omitting read-ahead for clarity, the download of multiple\
    \ files,\n   \"file1\", \"file2\", and \"file3\" might look something like this:\n\
    \        LOOKUP XID=77 0x0 \"file1\"         -->\n        LOOKUP XID=78 0x0 \"\
    file2\"         -->\n        LOOKUP XID=79 0x0 \"file3\"         -->\n       \
    \                                   <-- FH=0x01 for XID 77\n        READ XID=80\
    \ 0x01 offset=0 for 32k -->\n                                          <-- FH=0x02\
    \ for XID 78\n        READ XID=81 0x02 offset=0 for 32k -->\n                \
    \                          <-- FH=0x03 for XID 79\n        READ XID=82 0x03 offset=0\
    \ for 32k -->\n                                          <-- Data for XID 80\n\
    \                                          <-- Data for XID 81\n             \
    \                             <-- Data for XID 82\n   Note that the replies may\
    \ be received in a different order from the\n   order in which the requests were\
    \ transmitted. This is not a problem,\n   since RPC uses the XID to match requests\
    \ with replies.  A benefit of\n   the request/reply multiplexing provided by the\
    \ RPC protocol is that\n   the download of a large file that requires many READ\
    \ requests will\n   not delay the concurrent download of smaller files.\n   Again,\
    \ the client must be careful not to drown the server with\n   download requests.\n"
- title: 10.0 Timeout and Retransmission
  contents:
  - "10.0 Timeout and Retransmission\n   A WebNFS client should follow the example\
    \ of conventional NFS clients\n   and handle server or network outages gracefully.\
    \  If a reply is not\n   received within a given timeout, the client should retransmit\
    \ the\n   request with its original XID (described in Section 8 of RFC 1831).\n\
    \   The XID can be used by the server to detect duplicate requests and\n   avoid\
    \ unnecessary work.\n   While it would seem that retransmission over a TCP connection\
    \ is\n   unnecessary (since TCP is responsible for detecting and\n   retransmitting\
    \ lost data), at the RPC layer retransmission is still\n   required for recovery\
    \ from a lost TCP connection, perhaps due to a\n   server crash or, because of\
    \ resource limitations, the server has\n   closed the connection.  When the TCP\
    \ connection is lost, the client\n   must re-establish the connection and retransmit\
    \ pending requests.\n   The client should set the request timeout according to\
    \ the following\n   guidelines:\n        - A timeout that is too small may result\
    \ in the\n          wasteful transmission of duplicate requests.\n          The\
    \ server may be just slow to respond, either because\n          it is heavily\
    \ loaded, or because the link latency is high.\n        - A timeout that is too\
    \ large may harm throughput if\n          the request is lost and the connection\
    \ is idle waiting\n          for the retransmission to occur.\n        - The optimum\
    \ timeout may vary with the server's\n          responsiveness over time, and\
    \ with the congestion\n          and latency of the network.\n        - The optimum\
    \ timeout will vary with the type of NFS\n          request.  For instance, the\
    \ response to a LOOKUP\n          request will be received more quickly than the\
    \ response\n          to a READ request.\n        - The timeout should be increased\
    \ according to an\n          exponential backoff until a limit is reached.\n \
    \         For instance, if the timeout is 1 second, the\n          first retransmitted\
    \ request should have a timeout of\n          two seconds, the second retransmission\
    \ 4 seconds, and\n          so on until the timeout reaches a limit, say 30 seconds.\n\
    \          This avoids flooding the network with retransmission\n          requests\
    \ when the server is down, or overloaded.\n   As a general rule of thumb, the\
    \ client should start with a long\n   timeout until the server's responsiveness\
    \ is determined.  The timeout\n   can then be set to a value that reflects the\
    \ server's responsiveness\n   to previous requests.\n"
- title: 11.0 Bibliography
  contents:
  - "11.0 Bibliography\n   [RFC1808]       Fielding, R.,\n                   \"Relative\
    \ Uniform Resource Locators\", RFC 1808,\n                   June 1995.\n    \
    \               http://www.internic.net/rfc/rfc1808.txt\n   [RFC1831]       Srinivasan,\
    \ R., \"RPC: Remote Procedure Call\n                   Protocol Specification\
    \ Version 2\", RFC 1831,\n                   August 1995.\n                  \
    \ http://www.internic.net/rfc/rfc1831.txt\n   [RFC1832]       Srinivasan, R, \"\
    XDR: External Data Representation\n                   Standard\", RFC 1832, August\
    \ 1995.\n                   http://www.internic.net/rfc/rfc1832.txt\n   [RFC1833]\
    \       Srinivasan, R., \"Binding Protocols for ONC RPC\n                   Version\
    \ 2\", RFC 1833, August 1995.\n                   http://www.internic.net/rfc/rfc1833.txt\n\
    \   [RFC1094]       Sun Microsystems, Inc., \"Network Filesystem\n           \
    \        Specification\", RFC 1094, March 1989.  NFS\n                   version\
    \ 2 protocol specification.\n                   http://www.internic.net/rfc/rfc1094.txt\n\
    \   [RFC1813]       Sun Microsystems, Inc., \"NFS Version 3 Protocol\n       \
    \            Specification,\" RFC 1813, June 1995.  NFS version\n            \
    \       3 protocol specification.\n                   http://www.internic.net/rfc/rfc1813.txt\n\
    \   [RFC2055]       Callaghan, B., \"WebNFS Server Specification\",\n        \
    \           RFC 2055, October 1996.\n                   http://www.internic.net/rfc/rfc2055.txt\n\
    \   [Sandberg]      Sandberg, R., D. Goldberg, S. Kleiman, D. Walsh,\n       \
    \            B.  Lyon, \"Design and Implementation of the Sun\n              \
    \     Network Filesystem,\" USENIX Conference\n                   Proceedings,\
    \ USENIX Association, Berkeley, CA,\n                   Summer 1985.  The basic\
    \ paper describing the\n                   SunOS implementation of the NFS version\
    \ 2\n                   protocol, and discusses the goals, protocol\n        \
    \           specification and trade-offs.\n   [X/OpenNFS]     X/Open Company,\
    \ Ltd., X/Open CAE Specification:\n                   Protocols for X/Open Internetworking:\
    \ XNFS,\n                   X/Open Company, Ltd., Apex Plaza, Forbury Road,\n\
    \                   Reading Berkshire, RG1 1AX, United Kingdom,\n            \
    \       1991.  This is an indispensable reference for\n                   NFS\
    \ version 2 protocol and accompanying\n                   protocols, including\
    \ the Lock Manager and the\n                   Portmapper.\n   [X/OpenPCNFS] \
    \  X/Open Company, Ltd., X/Open CAE Specification:\n                   Protocols\
    \ for X/Open Internetworking: (PC)NFS,\n                   Developer's Specification,\
    \ X/Open Company, Ltd.,\n                   Apex Plaza, Forbury Road, Reading\
    \ Berkshire, RG1\n                   1AX, United Kingdom, 1991.  This is an\n\
    \                   indispensable reference for NFS version 2\n              \
    \     protocol and accompanying protocols, including\n                   the Lock\
    \ Manager and the Portmapper.\n"
- title: 12. Security Considerations
  contents:
  - "12. Security Considerations\n   Since the WebNFS server features are based on\
    \ NFS protocol versions 2\n   and 3, the RPC based security considerations described\
    \ in RFC 1094,\n   RFC 1831, and RFC 1832 apply here also.\n   Clients and servers\
    \ may separately negotiate secure connection\n   schemes for authentication, data\
    \ integrity, and privacy.\n"
- title: 13. Acknowledgements
  contents:
  - "13. Acknowledgements\n   This specification was extensively reviewed by the NFS\
    \ group at\n   SunSoft and brainstormed by Michael Eisler.\n"
- title: 14. Author's Address
  contents:
  - "14. Author's Address\n   Address comments related to this document to:\n   nfs@eng.sun.com\n\
    \   Brent Callaghan\n   Sun Microsystems, Inc.\n   2550 Garcia Avenue\n   Mailstop\
    \ Mpk17-201\n   Mountain View, CA 94043-1100\n   Phone: 1-415-786-5067\n   Fax:\
    \   1-415-786-5896\n   EMail: brent.callaghan@eng.sun.com\n"
