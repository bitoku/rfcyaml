- title: __initial_text__
  contents:
  - '               Simple Network Paging Protocol - Version 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This RFC suggests a simple way for delivering both alphanumeric\
    \ and\n   numeric pages (one-way) to radio paging terminals.  Gateways\n   supporting\
    \ this protocol, as well as SMTP, have been in use for\n   several months for\
    \ nationwide paging and messaging.  In addition,\n   email filters and SNPP client\
    \ software for Unix and Windows are\n   available at no cost.  Please contact\
    \ the author for more\n   information.\n   Earlier versions of this specification\
    \ were reviewed by IESG members\n   and the \"822 Extensions\" Working Group.\
    \  They preferred an alternate\n   strategy, as discussed under \"Relationship\
    \ to Other IETF Work\",\n   below.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Beepers are as much a part of computer nerdom as X-terminals\n\
    \   (perhaps, unfortunately, more).  The intent of Simple Network Paging\n   Protocol\
    \ is to provide a standard whereby pages can be delivered to\n   individual paging\
    \ terminals.  The most obvious benefit is the\n   elimination of the need for\
    \ modems and phone lines to produce\n   alphanumeric pages, and the added ease\
    \ of delivery of pages to\n   terminals in other cities or countries.  Additionally,\
    \ automatic page\n   delivery should be somewhat more simplified.\n"
- title: 2. System Philosophy
  contents:
  - "2. System Philosophy\n   Radio paging is somewhat taken for granted, because\
    \ of the wide\n   availability and wide use of paging products.  However, the\
    \ actual\n   delivery of the page, and the process used (especially in wider area\n\
    \   paging) is somewhat complicated.  When a user initiates a page, by\n   dialing\
    \ a number on a telephone, or entering an alphanumeric page\n   through some input\
    \ device, the page must ultimately be delivered to\n   some paging terminal, somewhere.\
    \  In most cases, this delivery is\n   made using TAP (Telocator Alphanumeric\
    \ input Protocol, also known as\n   IXO).  This protocol can be a somewhat convoluted,\
    \ and complicated\n   protocol using older style ASCII control characters and\
    \ a non-\n   standard checksumming routine to assist in validating the data.\n\
    \   Even though TAP is widely used throughout the industry, there are\n   plans\
    \ on the table to move to a more flexible \"standard\" protocol\n   referred to\
    \ as TME (Telocator Message Entry Protocol).  The level two\n   enhancements to\
    \ SNPP (as described below) are intended for use with\n   this forthcoming standard.\n\
    \   However, acknowledging the complexity and flexibility of the current\n   protocols\
    \ (or the lack thereof), the final user function is quite\n   simple: to deliver\
    \ a page from point-of-origin to someone's beeper.\n   That is the simple, real-time\
    \ function that the base protocol\n   attempts to address.  Validation of the\
    \ paging information is left\n   completely up to the paging terminal, making\
    \ an SNPP gateway a direct\n   \"shim\" between a paging terminal and the Internet.\n"
- title: 3. Why not just use Email and SMTP?
  contents:
  - "3. Why not just use Email and SMTP?\n   Email, while quite reliable, is not always\
    \ timely.  A good example of\n   this is deferred messaging when a gateway is\
    \ down. Suppose Mary Ghoti\n   (fish@hugecompany.org) sends a message to Zaphod\
    \ Beeblebrox's beeper\n   (5551212@pager.pagingcompany.com). Hugecompany's gateway\
    \ to the\n   Internet is down causing Mary's message to be deferred.  Mary,\n\
    \   however, is not notified of this delay because her message has not\n   actually\
    \ failed to reach its destination.  Three hours later, the\n   link is restored,\
    \ and (as soon as sendmail wakes up) the message is\n   sent.  Obviously, if Mary's\
    \ page concerned a meeting that was\n   supposed to happen 2 hours ago, there\
    \ will be some minor\n   administrative details to work out between Mary and Zaphod!\n\
    \   On the other hand, if Mary had used her SNPP client (or simply\n   telnetted\
    \ to the SNPP gateway), she would have immediately discovered\n   the network\
    \ problem.  She would have decided to invoke plan \"B\" and\n   call Zaphod's\
    \ pager on the telephone, ringing him that way.\n   The obvious difference here\
    \ is not page delivery, but the immediate\n   notification of a problem that affects\
    \ your message. Standard email\n   and SMTP, while quite reliable in most cases,\
    \ cannot be positively\n   guaranteed between all nodes at all times, making it\
    \ less desirable\n   for emergency or urgent paging.  This inability to guarantee\
    \ delivery\n   could, whether rightly or wrongly, place the service provider in\
    \ an\n   uncomfortable position with a client who has just received his or her\n\
    \   emergency page, six hours too late.\n   Another advantage of using a separate\
    \ protocol for paging delivery is\n   that it gives the sender absolute flexibility\
    \ over what is sent to\n   the pager.  For instance, in the paging arena, where\
    \ messages are\n   sent to alphanumeric pagers, it is less desirable to send the\n\
    \   recipient general header lines from a standard SMTP message.  Much of\n  \
    \ the information is useless, possibly redundant, and a waste of\n   precious\
    \ RF bandwidth.\n   Therefore, when implementing an SMTP gateway, the service\
    \ provider\n   should elect to parse out needed information (such as the sender,\
    \ and\n   possibly subject) such to maximize the utility of the transmission.\n\
    \   Parsing generally means less control over content and format by the\n   message\
    \ originator.  SNPP provides a clean, effective way to send a\n   message, as\
    \ written, to the recipient's pager.\n   The other consideration is the relative\
    \ simplicity of the SNPP\n   protocol for manual telnet sessions versus someone\
    \ trying to manually\n   hack a mail message into a gateway.\n"
- title: 4. The SNPP Protocol
  contents:
  - "4. The SNPP Protocol\n   The SNPP protocol is a sequence of commands and replies,\
    \ and is based\n   on the philosophy of many other Internet protocols currently\
    \ in use.\n   SNPP has several input commands (the first 4 characters of each\
    \ are\n   significant) that solicit various server responses falling into four\n\
    \   categories:\n    2xx - Successful, continue\n    3xx - Begin DATA input (see\
    \ \"DATA\" command)\n    4xx - Failed with connection terminated\n    5xx - Failed,\
    \ but continue session\n   The first character of every server response code is\
    \ a digit\n   indicating the category of response.  The text portion of the\n\
    \   response following the code may be altered to suit individual\n   applications.\n\
    \   The session interaction is actually quite simple (hence the name).\n   The\
    \ client initiates the connection with the listening server.  Upon\n   opening\
    \ the connection, the server issues a \"220\" level message\n   (indicating the\
    \ willingness of the server to accept SNPP commands).\n   The client passes pager\
    \ ID information, and a message, then issues a\n   \"SEND\" command.  The server\
    \ then feeds the information to the paging\n   terminal, gathers a response, and\
    \ reports the success or failure to\n   the client.\n"
- title: 4.1 Examples of SNPP Transactions
  contents:
  - "4.1 Examples of SNPP Transactions\n   The following illustrate examples of client-server\
    \ communication\n   using SNPP.\n"
- title: 4.1.1 A Typical Level One Connection
  contents:
  - "4.1.1 A Typical Level One Connection\n            Client                    \
    \     Server\n    Open Connection               -->\n                        \
    \          <--  220 SNPP Gateway Ready\n    PAGE 5551212                  -->\n\
    \                                  <--  250 Pager ID Accepted\n    MESS Your network\
    \ is hosed    -->\n                                  <--  250 Message OK\n   \
    \ SEND                          -->\n                                  <--  250\
    \ Message Sent OK\n    QUIT                          -->\n                   \
    \               <--  221 OK, Goodbye\n"
- title: 4.1.2 A Typical Level Two, Multiple Transaction
  contents:
  - "4.1.2 A Typical Level Two, Multiple Transaction\n   The following example illustrates\
    \ a single message sent to two\n   pagers.  Using this level protocol, pager-specific\
    \ options may be\n   selected for each receiver by specifying the option prior\
    \ to issuing\n   the \"PAGEr\" command.  In this example, an alternate coverage\
    \ area is\n   selected for the first pager, while delayed messaging is specified\n\
    \   for the second.\n            Client                         Server\n    Open\
    \ Connection               -->\n                                  <--  220 SNPP\
    \ Server Ready\n    COVE 2                        -->\n                      \
    \            <--  250 Alternate Area Selected\n    PAGE 5551212 FOOBAR       \
    \    -->\n                                  <--  250 Pager ID Accepted\n    HOLD\
    \ 9401152300 -0600         -->\n                                  <--  250 Delayed\
    \ Message OK\n    PAGE 5552323 XYZZY            -->\n                        \
    \          <--  250 Pager ID Accepted\n    SUBJ Seattle Meeting          -->\n\
    \                                  <--  250 Message Subject OK\n    DATA     \
    \                     -->\n                                  <--  354 Begin Input,\
    \ End With '.'\n    Please meet me tomorrow at    -->\n    the Seattle office\
    \            -->\n                                  <--  250 DATA Accepted\n \
    \   SEND                          -->\n                                  <-- \
    \ 250 Message Sent OK\n    QUIT                          -->\n               \
    \                   <--  221 OK, Goodbye\n"
- title: 4.2 Level 1 Commands
  contents:
  - "4.2 Level 1 Commands\n   Level one commands are designed as a minimum implementation\
    \ of the\n   protocol.  This collection of commands may be used with either\n\
    \   TAP/IXO or TME for message delivery to the paging terminal.\n"
- title: 4.2.1 PAGEr <Pager ID>
  contents:
  - "4.2.1 PAGEr <Pager ID>\n   The PAGEr command submits a pager ID (PID) number,\
    \ for inclusion in\n   the next messaging transaction.  The PID used must reside\
    \ in, and be\n   validated by the paging terminal.  Limited validation may optionally\n\
    \   be done on the server (such as all numeric, and ID length), or\n   validation\
    \ can be left up to the terminal at the time the page is\n   sent.\n   When implementing\
    \ SNPP, the user may elect to support multiple\n   recipients per message sent.\
    \  However, be wary that validation-\n   prior-to-sending is not possible with\
    \ TAP/IXO (and is not an official\n   option of the current TME specification).\
    \  What this means is that in\n   order to validate a PID, one must generate a\
    \ message to the pager.\n   The terminal responds favorably or negatively.  When\
    \ reporting\n   failure of a single PID in a sequence, delineating and reporting\
    \ the\n   failure in a \"standard format\" may prove to be a challenge.\n   Possible\
    \ responses from the SNPP server, with suggested text, in\n   response to a PAGEr\
    \ command are:\n    250 Pager ID Accepted\n    421 Too Many Errors, Goodbye (terminate\
    \ connection)\n    421 Gateway Service Unavailable (terminate connection)\n  \
    \  550 Error, Invalid Pager ID\n    554 Error, failed (technical reason)\n   The\
    \ level 2 enhancements affect the PAGEr command.  Please refer to\n   the appropriate\
    \ section for details.\n"
- title: 4.2.2 MESSage <Alpha or Numeric Message>
  contents:
  - "4.2.2 MESSage <Alpha or Numeric Message>\n   The MESSage command specifies a\
    \ single-line message, into the\n   gateway.  Limited validation of the message\
    \ may be done on the SNPP\n   server (such as length), but type-of-message validation\
    \ should be\n   done by the paging terminal.  Duplicating the MESSage command\
    \ before\n   SENDing the message should produce an \"503 ERROR, Message Already\n\
    \   Entered\" message, and allow the user to continue.\n   Possible responses\
    \ from the SNPP server, with suggested text, in\n   response to a MESSage command\
    \ are:\n    250 Message OK\n    421 Too Many Errors, Goodbye (terminate connection)\n\
    \    421 Gateway Service Unavailable (terminate connection)\n    503 ERROR, Message\
    \ Already Entered\n    550 ERROR, Invalid Message\n    554 Error, failed (technical\
    \ reason)\n"
- title: 4.2.3 RESEt
  contents:
  - "4.2.3 RESEt\n   The RESEt command clears already entered information from the\
    \ server\n   session, resetting it to the state of a freshly opened connection.\n\
    \   This is provided, primarily, as a means to reset accidentally entered\n  \
    \ information during a manual session.\n   Possible responses from the SNPP server,\
    \ with suggested text, in\n   response to a RESEt command are:\n    250 RESET\
    \ OK\n    421 Too Many Errors, Goodbye (terminate connection\n    421 Gateway\
    \ Service Unavailable (terminate connection)\n"
- title: 4.2.4 SEND
  contents:
  - "4.2.4 SEND\n   The SEND command finalizes the current message transaction, and\n\
    \   processes the page to the paging terminal.  Prior to processing, the\n   PAGEr\
    \ and MESSage fields (or message DATA when using the level two\n   option) should\
    \ be checked for the existence of information.  Should\n   one of these required\
    \ fields be missing, the server should respond\n   \"503 Error, Incomplete Information\"\
    \ and allow the user to continue.\n   Assuming that the information is complete,\
    \ the SNPP server should\n   format and send the page to the paging terminal,\
    \ and await a\n   response.\n   Possible responses from the SNPP server, with\
    \ suggested text, in\n   response to a SEND command are:\n    250 Message Sent\
    \ Successfully\n    421 Too Many Errors, Goodbye (terminate connection)\n    421\
    \ Gateway Service Unavailable (terminate connection)\n    503 Error, Pager ID\
    \ or Message Incomplete\n    554 Message Failed [non-administrative reason]\n\
    \   Or, in the case of an illegal or non-existent pager ID, or some other\n  \
    \ administrative reason for rejecting the page, the server should\n   respond:\n\
    \    550 Failed, Illegal Pager ID (or other explanation)\n   After processing\
    \ a SEND command, the server should remain online to\n   allow the client to submit\
    \ another transaction.\n"
- title: 4.2.5 QUIT
  contents:
  - "4.2.5 QUIT\n   The QUIT command terminates the current session.  The server should\n\
    \   simply respond:\n    221 OK, Goodbye\"\n   and close the connection.\n"
- title: 4.2.6 HELP (optional)
  contents:
  - "4.2.6 HELP (optional)\n   The optional HELP command displays a screen of information\
    \ about\n   commands that are valid on the SNPP server.  This is primarily to\n\
    \   assist manual users of the gateway.  Each line of the HELP screen\n   (responses)\
    \ are preceded by a code \"214\".  At the end of the HELP\n   sequence, a \"250\"\
    \ series message is issued.\n   Possible responses from the SNPP server, with\
    \ suggested text, in\n   response to a HELP command are:\n    214 [Help Text]\
    \  (repeated for each line of information)\n    250 End of Help Information\n\
    \    421 Too Many Errors, Goodbye (terminate connection)\n    421 Gateway Service\
    \ Unavailable (terminate connection)\n    500 Command Not Implemented\n"
- title: 4.3 Level 2 - Minimum Extensions
  contents:
  - "4.3 Level 2 - Minimum Extensions\n   This section specifies minimum enhancements\
    \ to the SNPP protocol for\n   added functionality.\n"
- title: 4.3.1 DATA
  contents:
  - "4.3.1 DATA\n   The DATA command is an alternate form of the MESSage command,\n\
    \   allowing for multiple line delivery of a message to the paging\n   terminal.\
    \  This command's function is similar to the DATA command\n   implemented in SMTP\
    \ (Internet STD10, RFC821).  The SNPP server should\n   only allow one DATA or\
    \ MESSage command to be issued prior to a SEND.\n   Possible responses from the\
    \ SNPP server, with suggested text, in\n   response to a DATA command are:\n \
    \   354 Begin Input; End with <CRLF>'.'<CRLF>\n    421 Too Many Errors, Goodbye\
    \ (terminate connection)\n    421 Gateway Service Unavailable (terminate connection)\n\
    \    503 ERROR, Message Already Entered\n    500 Command Not Implemented\n   \
    \ 550 ERROR, failed (administrative reason)\n    554 ERROR, failed (technical\
    \ reason)\n   Upon receiving a \"354\" response, the client begins line input\
    \ of the\n   message to send to the pager.  A single period (\".\"), in the first\n\
    \   position of the line, terminates input.  After input, the server may\n   respond:\n\
    \    250 Message OK\n    421 Too Many Errors, Goodbye (terminate connection)\n\
    \    421 Gateway Service Unavailable (terminate connection)\n    550 ERROR, Invalid\
    \ Message (or administrative reason)\n    554 ERROR, Failed (technical reason)\n"
- title: 4.4 Level 2 - Optional Extensions
  contents:
  - "4.4 Level 2 - Optional Extensions\n   This section discusses enhancements to\
    \ the SNPP protocol for more\n   control over paging functions.  These are primarily\
    \ designed to\n   mirror the added functionality built into the Telocator Message\
    \ Entry\n   (TME) protocol as specified in the TDP protocol suite. These\n   functions\
    \ may, optionally (as is being done by the author), be\n   integrated into a paging\
    \ terminal.  There is no requirement to\n   implement all of these functions.\
    \  Requests for invalid functions\n   should return a \"500 Function Not Implemented\"\
    \ error.\n   It is important to note that, at the time of this publication, the\n\
    \   TME standard is still not finalized.\n"
- title: 4.4.1 LOGIn <loginid> [password]
  contents:
  - "4.4.1 LOGIn <loginid> [password]\n   This command allows for a session login\
    \ ID to be specified.  It is\n   used to validate the person attempting to access\
    \ the paging terminal.\n   If no LOGIn command is issued, \"anonymous\" user status\
    \ is assumed.\n   Possible responses from the SNPP server, with suggested text,\
    \ in\n   response to a LOGIn command are:\n    250 Login Accepted\n    421 Too\
    \ Many Errors, Goodbye (terminate connection)\n    421 Gateway Service Unavailable\
    \ (terminate connection)\n    421 Illegal Access Attempt\n    550 Error, Invalid\
    \ LoginID or Password\n    554 Error, failed (technical reason)\n"
- title: 4.4.2 PAGEr <PagerID> [Password/PIN]
  contents:
  - "4.4.2 PAGEr <PagerID> [Password/PIN]\n   This PAGEr command is an enhancement\
    \ to the level one specification.\n   The primary difference is the ability to\
    \ specify a password or PIN\n   for validation or feature access.\n   Before proceeding,\
    \ it is important to understand the logical function\n   of the PAGEr command\
    \ with respect to the LEVEl, COVErage, HOLDtime,\n   and ALERt commands (option\
    \ parameters as described below).  Each time\n   a PAGEr command is issued, it\
    \ should be thought of as the last step\n   in a multiple step transaction.\n\
    \   When the PAGEr command is processed, the pager ID (and password) is\n   submitted\
    \ to the paging terminal with LEVEl, COVErage, HOLDtime, and\n   ALERt.  If these\
    \ parameters have not been altered, then their\n   defaults are assumed for the\
    \ transaction.  After the next PAGEr\n   command has been processed, these option\
    \ parameters are reset their\n   defaults.  Using this type of \"option-option-\
    \ option-go\" scheme, it\n   is possible to specify a different priority level\
    \ for \"Jeff,\" and an\n   alternate coverage area for \"Kathy,\" while sending\
    \ the same message\n   to each.\n   Possible responses from the SNPP server, with\
    \ suggested text, in\n   response to a PAGEr command are:\n    250 Pager ID Accepted\n\
    \    421 Too Many Errors, Goodbye (terminate connection)\n    421 Gateway Service\
    \ Unavailable (terminate connection)\n    550 Error, Invalid Pager ID or Password\n\
    \    554 Error, failed (technical reason)\n"
- title: 4.4.3 LEVEl <ServiceLevel>
  contents:
  - "4.4.3 LEVEl <ServiceLevel>\n   The LEVEl function is used to specify an optional\
    \ alternate level of\n   service for the next PAGEr command.  Ideally, \"ServiceLevel\"\
    \ should\n   be an integer between 0 and 11 inclusive.  The TME protocol specifies\n\
    \   ServiceLevel as follows:\n    0 - Priority\n    1 - Normal (default)\n   \
    \ 2 - Five minutes\n    3 - Fifteen minutes\n    4 - One hour\n    5 - Four hours\n\
    \    6 - Twelve hours\n    7 - Twenty Four hours\n    8 - Carrier specific '1'\n\
    \    9 - Carrier specific '2'\n   10 - Carrier specific '3'\n   11 - Carrier specific\
    \ '4'\n   The choice on how to implement this feature, or to what level it\n \
    \  should be implemented, should be optional and up to the discretion of\n   the\
    \ carrier.\n   Possible responses from the SNPP server, with suggested text, in\n\
    \   response to a LEVEl command are:\n    250 OK, Alternate Service Level Accepted\n\
    \    421 Too Many Errors, Goodbye (terminate connection)\n    421 Gateway Service\
    \ Unavailable (terminate connection)\n    500 Command Not Implemented\n    550\
    \ Error, Invalid Service Level Specified\n    554 Error, failed (technical reason)\n"
- title: 4.4.4 ALERt <AlertOverride>
  contents:
  - "4.4.4 ALERt <AlertOverride>\n   The optional ALERt command may be used to override\
    \ the default\n   setting and specify whether or not to alert the subscriber upon\n\
    \   receipt of a message.  This option, like the previous command, alters\n  \
    \ the parameters submitted to the paging terminal using the PAGEr\n   command.\
    \  The TME protocol specifies AlertOverride as either 0-\n   DoNotAlert, or 1-Alert.\n\
    \   Possible responses from the SNPP server, with suggested text, in\n   response\
    \ to a ALERt command are:\n    250 OK, Alert Override Accepted\n    421 Too Many\
    \ Errors, Goodbye (terminate connection)\n    421 Gateway Service Unavailable\
    \ (terminate connection)\n    500 Command Not Implemented\n    550 Error, Invalid\
    \ Alert Parameter\n    554 Error, failed (technical reason)\n"
- title: 4.4.5 COVErage <AlternateArea>
  contents:
  - "4.4.5 COVErage <AlternateArea>\n   The optional COVErage command is used to override\
    \ the subscriber's\n   default coverage area, and allow for the selection of an\
    \ alternate\n   region.  This option, like the previous command, alters the\n\
    \   parameters submitted to the paging terminal using the PAGEr command.\n   AlternateArea\
    \ is a designator for one of the following:\n    - A subscriber-specific alternate\
    \ coverage area\n    - A carrier-defined region available to subscribers\n   As\
    \ an example, Mary Ghoti is a subscriber having local service in\n   Chicago,\
    \ Illinois (Mary's region '1').  Her account has been set up\n   in such a manner\
    \ as to allow Mary's pager to be paged nationwide upon\n   demand (Mary's region\
    \ '2').  Specifying \"COVErage 2\" prior to issuing\n   the appropriate \"PAGEr\"\
    \ command allows the default Chicago area to be\n   overridden, and Mary's pager\
    \ to be messaged nationally for that\n   transaction.  It is assumed that the\
    \ carrier providing Mary's service\n   will keep track of how many pages have\
    \ been sent to her pager in this\n   manner, and will bill her accordingly.\n\
    \   Possible responses from the SNPP server, with suggested text, in\n   response\
    \ to a COVErage command are:\n    250 Alternate Coverage Selected\n    421 Too\
    \ Many Errors, Goodbye (terminate connection)\n    421 Gateway Service Unavailable\
    \ (terminate connection)\n    500 Command Not Implemented\n    550 Error, Invalid\
    \ Alternate Region\n    554 Error, failed (technical reason)\n"
- title: 4.4.6 HOLDuntil <YYMMDDHHMMSS> [+/-GMTdifference]
  contents:
  - "4.4.6 HOLDuntil <YYMMDDHHMMSS> [+/-GMTdifference]\n   The HOLDuntil command allows\
    \ for the delayed delivery of a message,\n   to a particular subscriber, until\
    \ after the time specified.  The time\n   may be specified in local time (e.g.\
    \ local to the paging terminal),\n   or with an added parameter specifying offset\
    \ from GMT (in other\n   words, \"-0600\" specifies Eastern Standard Time).  This\
    \ option, like\n   the previous command, alters the parameters submitted to the\
    \ paging\n   terminal using the PAGEr command.\n   Possible responses from the\
    \ SNPP server, with suggested text, in\n   response to a HOLDuntil command are:\n\
    \    250 Delayed Messaging Selected\n    421 Too Many Errors, Goodbye (terminate\
    \ connection)\n    421 Gateway Service Unavailable (terminate connection)\n  \
    \  500 Command Not Implemented\n    550 Error, Invalid Delivery Date/Time\n  \
    \  554 Error, failed (technical reason)\n"
- title: 4.4.7 CALLerid <CallerID>
  contents:
  - "4.4.7 CALLerid <CallerID>\n   The CALLerid function is a message-oriented function\
    \ (as opposed to\n   the subscriber-oriented functions just described).  This\
    \ allows for\n   the specification of the CallerIdentifier function as described\
    \ in\n   TME.  This parameter is optional, and is at the discretion of the\n \
    \  carrier as to how it should be implemented or used.\n   Possible responses\
    \ from the SNPP server, with suggested text, in\n   response to a CALLerid command\
    \ are:\n    250 Caller ID Accepted\n    421 Too Many Errors, Goodbye (terminate\
    \ connection)\n    421 Gateway Service Unavailable (terminate connection)\n  \
    \  500 Command Not Implemented\n    550 Error, Invalid Caller ID\n    554 Error,\
    \ failed (technical reason)\n"
- title: 4.4.8 SUBJect <MessageSubject>
  contents:
  - "4.4.8 SUBJect <MessageSubject>\n   The SUBJect function allows is a message-oriented\
    \ function that\n   allows the sender to specify a subject for the next message\
    \ to be\n   sent.  This parameter is optional and is at the discretion of the\n\
    \   carrier as to how it should be implemented or used.\n   Possible responses\
    \ from the SNPP server, with suggested text, in\n   response to a SUBJect command\
    \ are:\n    250 Message Subject Accepted\n    421 Too Many Errors, Goodbye (terminate\
    \ connection)\n    421 Gateway Service Unavailable (terminate connection)\n  \
    \  500 Command Not Implemented\n    550 Error, Invalid Subject Option\n    554\
    \ Error, failed (technical reason)\n"
- title: 4.5 Illegal Commands
  contents:
  - "4.5 Illegal Commands\n   Should the client issue an illegal command, the server\
    \ may respond in\n   one of the two following ways:\n    421 Too Many Errors,\
    \ Goodbye (terminate connection)\n    500 Command Not Implemented, Try Again\n\
    \   The number of illegal commands allowed before terminating the\n   connection\
    \ should be at the discretion of the operator of the SNPP\n   server.  The only\
    \ response that has not been discussed is:\n    421 SERVER DOWN, Goodbye\n   This\
    \ is used to refuse or terminate connections when the gateway is\n   administratively\
    \ down, or when there is some other technical or\n   administrative problem with\
    \ the paging terminal.\n"
- title: 4.6 Timeouts
  contents:
  - "4.6 Timeouts\n   The SNPP server can, optionally, have an inactivity timeout\n\
    \   implemented.  At the expiration of the allotted time, the server\n   responds\
    \ \"421 Timeout, Goodbye\" and closes the connection.\n"
- title: 4.7 Rigidity of Command Structure
  contents:
  - "4.7 Rigidity of Command Structure\n   The commands from client to server should\
    \ remain constant. However,\n   since the first character of the response indicates\
    \ success or\n   failure, the text of the server responses could be altered to\
    \ suit\n   the tastes of the operator of the SNPP server. It is suggested that\n\
    \   the response codes mirror SMTP response codes as closely as possible.\n"
- title: 5. Revision History
  contents:
  - "5. Revision History\n   Originally, when proposed, the author employed POP2 style\n\
    \   result/response codes.  The Internet community suggested that this\n   '+'\
    \ and '-' style theory be altered to provide numeric response codes\n   -- similar\
    \ to those used in other services such as SMTP.  The\n   protocol has been altered\
    \ to this specification from the first\n   proposed draft.\n   Administrative\
    \ errors (Illegal Pager ID, for example) have been\n   separated from technical\
    \ errors (out-of-space on disk, for example).\n   Administrative failures are\
    \ generally preceded with a 550 series\n   response, while technical failures\
    \ bear a 554 series code.\n   Level two enhancements to the protocol have been\
    \ added in preparation\n   for TME deployment.\n   Error code \"502 Command not\
    \ implemented\" was changed to a general\n   \"500 Command not recognized\" failure\
    \ result to closer follow SMTP.\n"
- title: 6. Relationship to Other IETF Work
  contents:
  - "6. Relationship to Other IETF Work\n   The strategy of this specification, and\
    \ many of its details, were\n   reviewed by an IETF Working Group and three IESG\
    \ members.  They\n   concluded that an approach using the existing email infrastructure\n\
    \   was preferable, due in large measure to the very high costs of\n   deploying\
    \ a new protocol and the advantages of using the Internet's\n   most widely-distributed\
    \ applications protocol infrastructure.  Most\n   reviewers felt that no new protocol\
    \ was needed at all because the\n   special \"deliver immediately or fail\" requirements\
    \ of SNPP could be\n   accomplished by careful configuration of clients and servers.\
    \  The\n   experimental network printing protocol [4] was identified as an\n \
    \  example of an existing infrastructure approach to an existing\n   problem.\
    \ Other reviewers believed that a case could be made for new\n   protocol details\
    \ to identify paging clients and servers to each other\n   and negotiate details\
    \ of the transactions, but that it would be\n   sensible to handle those details\
    \ as extensions to SMTP [1, 2] rather\n   than deploying a new protocol structure.\n\
    \   The author, while recognizing these positions, believes that there is\n  \
    \ merit in a separate protocol to isolate details of TAP/IXO and its\n   evolving\
    \ successors from users and, indeed, from mail-based\n   approaches that might\
    \ reach systems that would act as SMTP/MIME [3]\n   to SNPP gateways.  Such systems\
    \ and gateways are, indeed, undergoing\n   design and development concurrent with\
    \ this work.  See the section\n   \"Why not just use Email and SMTP?\" for additional\
    \ discussion of the\n   author's view of the classical electronic email approach.\n"
- title: 7. References
  contents:
  - "7. References\n   [1] Postel, J., \"Simple Mail Transfer Protocol\", STD 10,\
    \ RFC 821,\n       USC/Information Sciences Institute, August 1982.\n   [2] Klensin,\
    \ J., Freed, N., Rose, M., Stefferud, E., and D. Crocker,\n       \"SMTP Service\
    \ Extensions\", United Nations University, Innosoft,\n       Dover Beach Consulting,\
    \ Inc., Network Management Associates,\n       Inc., The Branch Office, RFC 1425,\
    \ February 1993.\n   [3] Borenstein, N., and N. Freed, \"MIME  (Multipurpose Internet\
    \ Mail\n       Extensions) Part One:  Mechanisms for Specifying and Describing\n\
    \       the Format of Internet Message Bodies\", RFC 1521, Bellcore,\n       Innosoft,\
    \ September 1993.\n   [4] Rose, M., and C. Malamud, \"An Experiment in Remote\
    \ Printing\", RFC\n       1486, Dover Beach Consulting, Inc., Internet Multicasting\n\
    \       Service, July 1993.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 9. Author's Address
  contents:
  - "9. Author's Address\n   R. Allen Gwinn, Jr.\n   Associate Director, Computing\
    \ Services\n   Business Information Center\n   Southern Methodist University\n\
    \   Dallas, TX  75275\n   Phone:  214/768-3186\n   EMail:  allen@mail.cox.smu.edu\
    \  or  allen@sulaco.lonestar.org\n"
