- title: __initial_text__
  contents:
  - '                Hypertext Transfer Protocol -- HTTP/1.0

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n   The IESG has concerns about this protocol,\
    \ and expects this document\n   to be replaced relatively soon by a standards\
    \ track document.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Hypertext Transfer Protocol (HTTP) is an application-level\n\
    \   protocol with the lightness and speed necessary for distributed,\n   collaborative,\
    \ hypermedia information systems. It is a generic,\n   stateless, object-oriented\
    \ protocol which can be used for many tasks,\n   such as name servers and distributed\
    \ object management systems,\n   through extension of its request methods (commands).\
    \ A feature of\n   HTTP is the typing of data representation, allowing systems\
    \ to be\n   built independently of the data being transferred.\n   HTTP has been\
    \ in use by the World-Wide Web global information\n   initiative since 1990. This\
    \ specification reflects common usage of\n   the protocol referred to as \"HTTP/1.0\"\
    .\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n       3.1  HTTP Version .........................................\
    \ 12\n       3.2  Uniform Resource Identifiers ......................... 14\n\
    \            3.2.1  General Syntax ................................ 14\n     \
    \       3.2.2  http URL ...................................... 15\n       3.3\
    \  Date/Time Formats .................................... 15\n       3.4  Character\
    \ Sets ....................................... 17\n       3.5  Content Codings\
    \ ...................................... 18\n       3.6  Media Types ..........................................\
    \ 19\n            3.6.1  Canonicalization and Text Defaults ............ 19\n\
    \            3.6.2  Multipart Types ............................... 20\n     \
    \  3.7  Product Tokens ....................................... 20\n   4.  HTTP\
    \ Message .............................................. 21\n       4.1  Message\
    \ Types ........................................ 21\n       4.2  Message Headers\
    \ ...................................... 22\n       4.3  General Header Fields\
    \ ................................ 23\n   5.  Request ...................................................\
    \ 23\n       5.1  Request-Line ......................................... 23\n\
    \            5.1.1  Method ........................................ 24\n     \
    \       5.1.2  Request-URI ................................... 24\n       5.2\
    \  Request Header Fields ................................ 25\n   6.  Response\
    \ .................................................. 25\n       6.1  Status-Line\
    \ .......................................... 26\n            6.1.1  Status Code\
    \ and Reason Phrase ................. 26\n       6.2  Response Header Fields ...............................\
    \ 28\n   7.  Entity .................................................... 28\n\
    \       7.1  Entity Header Fields ................................. 29\n     \
    \  7.2  Entity Body .......................................... 29\n          \
    \  7.2.1  Type .......................................... 29\n            7.2.2\
    \  Length ........................................ 30\n   8.  Method Definitions\
    \ ........................................ 30\n       8.1  GET ..................................................\
    \ 31\n       8.2  HEAD ................................................. 31\n\
    \       8.3  POST ................................................. 31\n   9.\
    \  Status Code Definitions ................................... 32\n       9.1\
    \  Informational 1xx .................................... 32\n       9.2  Successful\
    \ 2xx ....................................... 32\n       9.3  Redirection 3xx\
    \ ...................................... 34\n       9.4  Client Error 4xx .....................................\
    \ 35\n       9.5  Server Error 5xx ..................................... 37\n\
    \   10. Header Field Definitions .................................. 37\n     \
    \  10.1  Allow ............................................... 38\n       10.2\
    \  Authorization ....................................... 38\n       10.3  Content-Encoding\
    \ .................................... 39\n       10.4  Content-Length ......................................\
    \ 39\n       10.5  Content-Type ........................................ 40\n\
    \       10.6  Date ................................................ 40\n     \
    \  10.7  Expires ............................................. 41\n       10.8\
    \  From ................................................ 42\n       10.9  If-Modified-Since\
    \ ................................... 42\n       10.10 Last-Modified .......................................\
    \ 43\n       10.11 Location ............................................ 44\n\
    \       10.12 Pragma .............................................. 44\n     \
    \  10.13 Referer ............................................. 44\n       10.14\
    \ Server .............................................. 45\n       10.15 User-Agent\
    \ .......................................... 46\n       10.16 WWW-Authenticate\
    \ .................................... 46\n   11. Access Authentication .....................................\
    \ 47\n       11.1  Basic Authentication Scheme ......................... 48\n\
    \   12. Security Considerations ................................... 49\n     \
    \  12.1  Authentication of Clients ........................... 49\n       12.2\
    \  Safe Methods ........................................ 49\n       12.3  Abuse\
    \ of Server Log Information ..................... 50\n       12.4  Transfer of\
    \ Sensitive Information ................... 50\n       12.5  Attacks Based On\
    \ File and Path Names ................ 51\n   13. Acknowledgments ...........................................\
    \ 51\n   14. References ................................................ 52\n\
    \   15. Authors' Addresses ........................................ 54\n   Appendix\
    \ A.   Internet Media Type message/http ................ 55\n   Appendix B.  \
    \ Tolerant Applications ........................... 55\n   Appendix C.   Relationship\
    \ to MIME ............................ 56\n       C.1  Conversion to Canonical\
    \ Form ......................... 56\n       C.2  Conversion of Date Formats ...........................\
    \ 57\n       C.3  Introduction of Content-Encoding ..................... 57\n\
    \       C.4  No Content-Transfer-Encoding ......................... 57\n     \
    \  C.5  HTTP Header Fields in Multipart Body-Parts ........... 57\n   Appendix\
    \ D.   Additional Features ............................. 57\n       D.1  Additional\
    \ Request Methods ........................... 58\n            D.1.1  PUT ...........................................\
    \ 58\n            D.1.2  DELETE ........................................ 58\n\
    \            D.1.3  LINK .......................................... 58\n     \
    \       D.1.4  UNLINK ........................................ 58\n       D.2\
    \  Additional Header Field Definitions .................. 58\n            D.2.1\
    \  Accept ........................................ 58\n            D.2.2  Accept-Charset\
    \ ................................ 59\n            D.2.3  Accept-Encoding ...............................\
    \ 59\n            D.2.4  Accept-Language ............................... 59\n\
    \            D.2.5  Content-Language .............................. 59\n     \
    \       D.2.6  Link .......................................... 59\n          \
    \  D.2.7  MIME-Version .................................. 59\n            D.2.8\
    \  Retry-After ................................... 60\n            D.2.9  Title\
    \ ......................................... 60\n            D.2.10 URI ...........................................\
    \ 60\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1  Purpose
  contents:
  - "1.1  Purpose\n   The Hypertext Transfer Protocol (HTTP) is an application-level\n\
    \   protocol with the lightness and speed necessary for distributed,\n   collaborative,\
    \ hypermedia information systems. HTTP has been in use\n   by the World-Wide Web\
    \ global information initiative since 1990. This\n   specification reflects common\
    \ usage of the protocol referred too as\n   \"HTTP/1.0\". This specification describes\
    \ the features that seem to be\n   consistently implemented in most HTTP/1.0 clients\
    \ and servers. The\n   specification is split into two sections. Those features\
    \ of HTTP for\n   which implementations are usually consistent are described in\
    \ the\n   main body of this document. Those features which have few or\n   inconsistent\
    \ implementations are listed in Appendix D.\n   Practical information systems\
    \ require more functionality than simple\n   retrieval, including search, front-end\
    \ update, and annotation. HTTP\n   allows an open-ended set of methods to be used\
    \ to indicate the\n   purpose of a request. It builds on the discipline of reference\n\
    \   provided by the Uniform Resource Identifier (URI) [2], as a location\n   (URL)\
    \ [4] or name (URN) [16], for indicating the resource on which a\n   method is\
    \ to be applied. Messages are passed in a format similar to\n   that used by Internet\
    \ Mail [7] and the Multipurpose Internet Mail\n   Extensions (MIME) [5].\n   HTTP\
    \ is also used as a generic protocol for communication between\n   user agents\
    \ and proxies/gateways to other Internet protocols, such as\n   SMTP [12], NNTP\
    \ [11], FTP [14], Gopher [1], and WAIS [8], allowing\n   basic hypermedia access\
    \ to resources available from diverse\n   applications and simplifying the implementation\
    \ of user agents.\n"
- title: 1.2  Terminology
  contents:
  - "1.2  Terminology\n   This specification uses a number of terms to refer to the\
    \ roles\n   played by participants in, and objects of, the HTTP communication.\n\
    \   connection\n       A transport layer virtual circuit established between two\n\
    \       application programs for the purpose of communication.\n   message\n \
    \      The basic unit of HTTP communication, consisting of a structured\n    \
    \   sequence of octets matching the syntax defined in Section 4 and\n       transmitted\
    \ via the connection.\n   request\n       An HTTP request message (as defined\
    \ in Section 5).\n   response\n       An HTTP response message (as defined in\
    \ Section 6).\n   resource\n       A network data object or service which can\
    \ be identified by a\n       URI (Section 3.2).\n   entity\n       A particular\
    \ representation or rendition of a data resource, or\n       reply from a service\
    \ resource, that may be enclosed within a\n       request or response message.\
    \ An entity consists of\n       metainformation in the form of entity headers\
    \ and content in the\n       form of an entity body.\n   client\n       An application\
    \ program that establishes connections for the\n       purpose of sending requests.\n\
    \   user agent\n       The client which initiates a request. These are often browsers,\n\
    \       editors, spiders (web-traversing robots), or other end user\n       tools.\n\
    \   server\n       An application program that accepts connections in order to\n\
    \       service requests by sending back responses.\n   origin server\n      \
    \ The server on which a given resource resides or is to be created.\n   proxy\n\
    \       An intermediary program which acts as both a server and a client\n   \
    \    for the purpose of making requests on behalf of other clients.\n       Requests\
    \ are serviced internally or by passing them, with\n       possible translation,\
    \ on to other servers. A proxy must\n       interpret and, if necessary, rewrite\
    \ a request message before\n       forwarding it. Proxies are often used as client-side\
    \ portals\n       through network firewalls and as helper applications for\n \
    \      handling requests via protocols not implemented by the user\n       agent.\n\
    \   gateway\n       A server which acts as an intermediary for some other server.\n\
    \       Unlike a proxy, a gateway receives requests as if it were the\n      \
    \ origin server for the requested resource; the requesting client\n       may\
    \ not be aware that it is communicating with a gateway.\n       Gateways are often\
    \ used as server-side portals through network\n       firewalls and as protocol\
    \ translators for access to resources\n       stored on non-HTTP systems.\n  \
    \ tunnel\n       A tunnel is an intermediary program which is acting as a blind\n\
    \       relay between two connections. Once active, a tunnel is not\n       considered\
    \ a party to the HTTP communication, though the tunnel\n       may have been initiated\
    \ by an HTTP request. The tunnel ceases to\n       exist when both ends of the\
    \ relayed connections are closed.\n       Tunnels are used when a portal is necessary\
    \ and the intermediary\n       cannot, or should not, interpret the relayed communication.\n\
    \   cache\n       A program's local store of response messages and the subsystem\n\
    \       that controls its message storage, retrieval, and deletion. A\n      \
    \ cache stores cachable responses in order to reduce the response\n       time\
    \ and network bandwidth consumption on future, equivalent\n       requests. Any\
    \ client or server may include a cache, though a\n       cache cannot be used\
    \ by a server while it is acting as a tunnel.\n   Any given program may be capable\
    \ of being both a client and a server;\n   our use of these terms refers only\
    \ to the role being performed by the\n   program for a particular connection,\
    \ rather than to the program's\n   capabilities in general. Likewise, any server\
    \ may act as an origin\n   server, proxy, gateway, or tunnel, switching behavior\
    \ based on the\n   nature of each request.\n"
- title: 1.3  Overall Operation
  contents:
  - "1.3  Overall Operation\n   The HTTP protocol is based on a request/response paradigm.\
    \ A client\n   establishes a connection with a server and sends a request to the\n\
    \   server in the form of a request method, URI, and protocol version,\n   followed\
    \ by a MIME-like message containing request modifiers, client\n   information,\
    \ and possible body content. The server responds with a\n   status line, including\
    \ the message's protocol version and a success\n   or error code, followed by\
    \ a MIME-like message containing server\n   information, entity metainformation,\
    \ and possible body content.\n   Most HTTP communication is initiated by a user\
    \ agent and consists of\n   a request to be applied to a resource on some origin\
    \ server. In the\n   simplest case, this may be accomplished via a single connection\
    \ (v)\n   between the user agent (UA) and the origin server (O).\n          request\
    \ chain ------------------------>\n       UA -------------------v-------------------\
    \ O\n          <----------------------- response chain\n   A more complicated\
    \ situation occurs when one or more intermediaries\n   are present in the request/response\
    \ chain. There are three common\n   forms of intermediary: proxy, gateway, and\
    \ tunnel. A proxy is a\n   forwarding agent, receiving requests for a URI in its\
    \ absolute form,\n   rewriting all or parts of the message, and forwarding the\
    \ reformatted\n   request toward the server identified by the URI. A gateway is\
    \ a\n   receiving agent, acting as a layer above some other server(s) and, if\n\
    \   necessary, translating the requests to the underlying server's\n   protocol.\
    \ A tunnel acts as a relay point between two connections\n   without changing\
    \ the messages; tunnels are used when the\n   communication needs to pass through\
    \ an intermediary (such as a\n   firewall) even when the intermediary cannot understand\
    \ the contents\n   of the messages.\n          request chain -------------------------------------->\n\
    \       UA -----v----- A -----v----- B -----v----- C -----v----- O\n         \
    \ <------------------------------------- response chain\n   The figure above shows\
    \ three intermediaries (A, B, and C) between the\n   user agent and origin server.\
    \ A request or response message that\n   travels the whole chain must pass through\
    \ four separate connections.\n   This distinction is important because some HTTP\
    \ communication options\n   may apply only to the connection with the nearest,\
    \ non-tunnel\n   neighbor, only to the end-points of the chain, or to all connections\n\
    \   along the chain. Although the diagram is linear, each participant may\n  \
    \ be engaged in multiple, simultaneous communications. For example, B\n   may\
    \ be receiving requests from many clients other than A, and/or\n   forwarding\
    \ requests to servers other than C, at the same time that it\n   is handling A's\
    \ request.\n   Any party to the communication which is not acting as a tunnel\
    \ may\n   employ an internal cache for handling requests. The effect of a cache\n\
    \   is that the request/response chain is shortened if one of the\n   participants\
    \ along the chain has a cached response applicable to that\n   request. The following\
    \ illustrates the resulting chain if B has a\n   cached copy of an earlier response\
    \ from O (via C) for a request which\n   has not been cached by UA or A.\n   \
    \       request chain ---------->\n       UA -----v----- A -----v----- B - - -\
    \ - - - C - - - - - - O\n          <--------- response chain\n   Not all responses\
    \ are cachable, and some requests may contain\n   modifiers which place special\
    \ requirements on cache behavior. Some\n   HTTP/1.0 applications use heuristics\
    \ to describe what is or is not a\n   \"cachable\" response, but these rules are\
    \ not standardized.\n   On the Internet, HTTP communication generally takes place\
    \ over TCP/IP\n   connections. The default port is TCP 80 [15], but other ports\
    \ can be\n   used. This does not preclude HTTP from being implemented on top of\n\
    \   any other protocol on the Internet, or on other networks. HTTP only\n   presumes\
    \ a reliable transport; any protocol that provides such\n   guarantees can be\
    \ used, and the mapping of the HTTP/1.0 request and\n   response structures onto\
    \ the transport data units of the protocol in\n   question is outside the scope\
    \ of this specification.\n   Except for experimental applications, current practice\
    \ requires that\n   the connection be established by the client prior to each\
    \ request and\n   closed by the server after sending the response. Both clients\
    \ and\n   servers should be aware that either party may close the connection\n\
    \   prematurely, due to user action, automated time-out, or program\n   failure,\
    \ and should handle such closing in a predictable fashion. In\n   any case, the\
    \ closing of the connection by either or both parties\n   always terminates the\
    \ current request, regardless of its status.\n"
- title: 1.4  HTTP and MIME
  contents:
  - "1.4  HTTP and MIME\n   HTTP/1.0 uses many of the constructs defined for MIME,\
    \ as defined in\n   RFC 1521 [5]. Appendix C describes the ways in which the context\
    \ of\n   HTTP allows for different use of Internet Media Types than is\n   typically\
    \ found in Internet mail, and gives the rationale for those\n   differences.\n"
- title: 2.  Notational Conventions and Generic Grammar
  contents:
  - '2.  Notational Conventions and Generic Grammar

    '
- title: 2.1  Augmented BNF
  contents:
  - "2.1  Augmented BNF\n   All of the mechanisms specified in this document are described\
    \ in\n   both prose and an augmented Backus-Naur Form (BNF) similar to that\n\
    \   used by RFC 822 [7]. Implementors will need to be familiar with the\n   notation\
    \ in order to understand this specification. The augmented BNF\n   includes the\
    \ following constructs:\n   name = definition\n       The name of a rule is simply\
    \ the name itself (without any\n       enclosing \"<\" and \">\") and is separated\
    \ from its definition by\n       the equal character \"=\". Whitespace is only\
    \ significant in that\n       indentation of continuation lines is used to indicate\
    \ a rule\n       definition that spans more than one line. Certain basic rules\n\
    \       are in uppercase, such as SP, LWS, HT, CRLF, DIGIT, ALPHA, etc.\n    \
    \   Angle brackets are used within definitions whenever their\n       presence\
    \ will facilitate discerning the use of rule names.\n   \"literal\"\n       Quotation\
    \ marks surround literal text. Unless stated otherwise,\n       the text is case-insensitive.\n\
    \   rule1 | rule2\n       Elements separated by a bar (\"I\") are alternatives,\n\
    \       e.g., \"yes | no\" will accept yes or no.\n   (rule1 rule2)\n       Elements\
    \ enclosed in parentheses are treated as a single\n       element. Thus, \"(elem\
    \ (foo | bar) elem)\" allows the token\n       sequences \"elem foo elem\" and\
    \ \"elem bar elem\".\n   *rule\n       The character \"*\" preceding an element\
    \ indicates repetition. The\n       full form is \"<n>*<m>element\" indicating\
    \ at least <n> and at\n       most <m> occurrences of element. Default values\
    \ are 0 and\n       infinity so that \"*(element)\" allows any number, including\
    \ zero;\n       \"1*element\" requires at least one; and \"1*2element\" allows\
    \ one\n       or two.\n   [rule]\n       Square brackets enclose optional elements;\
    \ \"[foo bar]\" is\n       equivalent to \"*1(foo bar)\".\n   N rule\n       Specific\
    \ repetition: \"<n>(element)\" is equivalent to\n       \"<n>*<n>(element)\";\
    \ that is, exactly <n> occurrences of\n       (element). Thus 2DIGIT is a 2-digit\
    \ number, and 3ALPHA is a\n       string of three alphabetic characters.\n   #rule\n\
    \       A construct \"#\" is defined, similar to \"*\", for defining lists\n \
    \      of elements. The full form is \"<n>#<m>element\" indicating at\n      \
    \ least <n> and at most <m> elements, each separated by one or\n       more commas\
    \ (\",\") and optional linear whitespace (LWS). This\n       makes the usual form\
    \ of lists very easy; a rule such as\n       \"( *LWS element *( *LWS \",\" *LWS\
    \ element ))\" can be shown as\n       \"1#element\". Wherever this construct\
    \ is used, null elements are\n       allowed, but do not contribute to the count\
    \ of elements present.\n       That is, \"(element), , (element)\" is permitted,\
    \ but counts as\n       only two elements. Therefore, where at least one element\
    \ is\n       required, at least one non-null element must be present. Default\n\
    \       values are 0 and infinity so that \"#(element)\" allows any\n       number,\
    \ including zero; \"1#element\" requires at least one; and\n       \"1#2element\"\
    \ allows one or two.\n   ; comment\n       A semi-colon, set off some distance\
    \ to the right of rule text,\n       starts a comment that continues to the end\
    \ of line. This is a\n       simple way of including useful notes in parallel\
    \ with the\n       specifications.\n   implied *LWS\n       The grammar described\
    \ by this specification is word-based.\n       Except where noted otherwise, linear\
    \ whitespace (LWS) can be\n       included between any two adjacent words (token\
    \ or\n       quoted-string), and between adjacent tokens and delimiters\n    \
    \   (tspecials), without changing the interpretation of a field. At\n       least\
    \ one delimiter (tspecials) must exist between any two\n       tokens, since they\
    \ would otherwise be interpreted as a single\n       token. However, applications\
    \ should attempt to follow \"common\n       form\" when generating HTTP constructs,\
    \ since there exist some\n       implementations that fail to accept anything\
    \ beyond the common\n       forms.\n"
- title: 2.2  Basic Rules
  contents:
  - "2.2  Basic Rules\n   The following rules are used throughout this specification\
    \ to\n   describe basic parsing constructs. The US-ASCII coded character set\n\
    \   is defined by [17].\n       OCTET          = <any 8-bit sequence of data>\n\
    \       CHAR           = <any US-ASCII character (octets 0 - 127)>\n       UPALPHA\
    \        = <any US-ASCII uppercase letter \"A\"..\"Z\">\n       LOALPHA      \
    \  = <any US-ASCII lowercase letter \"a\"..\"z\">\n       ALPHA          = UPALPHA\
    \ | LOALPHA\n       DIGIT          = <any US-ASCII digit \"0\"..\"9\">\n     \
    \  CTL            = <any US-ASCII control character\n                        (octets\
    \ 0 - 31) and DEL (127)>\n       CR             = <US-ASCII CR, carriage return\
    \ (13)>\n       LF             = <US-ASCII LF, linefeed (10)>\n       SP     \
    \        = <US-ASCII SP, space (32)>\n       HT             = <US-ASCII HT, horizontal-tab\
    \ (9)>\n       <\">            = <US-ASCII double-quote mark (34)>\n   HTTP/1.0\
    \ defines the octet sequence CR LF as the end-of-line marker\n   for all protocol\
    \ elements except the Entity-Body (see Appendix B for\n   tolerant applications).\
    \ The end-of-line marker within an Entity-Body\n   is defined by its associated\
    \ media type, as described in Section 3.6.\n       CRLF           = CR LF\n  \
    \ HTTP/1.0 headers may be folded onto multiple lines if each\n   continuation\
    \ line begins with a space or horizontal tab. All linear\n   whitespace, including\
    \ folding, has the same semantics as SP.\n       LWS            = [CRLF] 1*( SP\
    \ | HT )\n   However, folding of header lines is not expected by some\n   applications,\
    \ and should not be generated by HTTP/1.0 applications.\n   The TEXT rule is only\
    \ used for descriptive field contents and values\n   that are not intended to\
    \ be interpreted by the message parser. Words\n   of *TEXT may contain octets\
    \ from character sets other than US-ASCII.\n       TEXT           = <any OCTET\
    \ except CTLs,\n                        but including LWS>\n   Recipients of header\
    \ field TEXT containing octets outside the US-\n   ASCII character set may assume\
    \ that they represent ISO-8859-1\n   characters.\n   Hexadecimal numeric characters\
    \ are used in several protocol elements.\n       HEX            = \"A\" | \"B\"\
    \ | \"C\" | \"D\" | \"E\" | \"F\"\n                      | \"a\" | \"b\" | \"\
    c\" | \"d\" | \"e\" | \"f\" | DIGIT\n   Many HTTP/1.0 header field values consist\
    \ of words separated by LWS\n   or special characters. These special characters\
    \ must be in a quoted\n   string to be used within a parameter value.\n      \
    \ word           = token | quoted-string\n       token          = 1*<any CHAR\
    \ except CTLs or tspecials>\n       tspecials      = \"(\" | \")\" | \"<\" | \"\
    >\" | \"@\"\n                      | \",\" | \";\" | \":\" | \"\\\" | <\">\n \
    \                     | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n              \
    \        | \"{\" | \"}\" | SP | HT\n   Comments may be included in some HTTP header\
    \ fields by surrounding\n   the comment text with parentheses. Comments are only\
    \ allowed in\n   fields containing \"comment\" as part of their field value definition.\n\
    \   In all other fields, parentheses are considered part of the field\n   value.\n\
    \       comment        = \"(\" *( ctext | comment ) \")\"\n       ctext      \
    \    = <any TEXT excluding \"(\" and \")\">\n   A string of text is parsed as\
    \ a single word if it is quoted using\n   double-quote marks.\n       quoted-string\
    \  = ( <\"> *(qdtext) <\"> )\n       qdtext         = <any CHAR except <\"> and\
    \ CTLs,\n                        but including LWS>\n   Single-character quoting\
    \ using the backslash (\"\\\") character is not\n   permitted in HTTP/1.0.\n"
- title: 3.  Protocol Parameters
  contents:
  - '3.  Protocol Parameters

    '
- title: 3.1  HTTP Version
  contents:
  - "3.1  HTTP Version\n   HTTP uses a \"<major>.<minor>\" numbering scheme to indicate\
    \ versions\n   of the protocol. The protocol versioning policy is intended to\
    \ allow\n   the sender to indicate the format of a message and its capacity for\n\
    \   understanding further HTTP communication, rather than the features\n   obtained\
    \ via that communication. No change is made to the version\n   number for the\
    \ addition of message components which do not affect\n   communication behavior\
    \ or which only add to extensible field values.\n   The <minor> number is incremented\
    \ when the changes made to the\n   protocol add features which do not change the\
    \ general message parsing\n   algorithm, but which may add to the message semantics\
    \ and imply\n   additional capabilities of the sender. The <major> number is\n\
    \   incremented when the format of a message within the protocol is\n   changed.\n\
    \   The version of an HTTP message is indicated by an HTTP-Version field\n   in\
    \ the first line of the message. If the protocol version is not\n   specified,\
    \ the recipient must assume that the message is in the\n   simple HTTP/0.9 format.\n\
    \       HTTP-Version   = \"HTTP\" \"/\" 1*DIGIT \".\" 1*DIGIT\n   Note that the\
    \ major and minor numbers should be treated as separate\n   integers and that\
    \ each may be incremented higher than a single digit.\n   Thus, HTTP/2.4 is a\
    \ lower version than HTTP/2.13, which in turn is\n   lower than HTTP/12.3. Leading\
    \ zeros should be ignored by recipients\n   and never generated by senders.\n\
    \   This document defines both the 0.9 and 1.0 versions of the HTTP\n   protocol.\
    \ Applications sending Full-Request or Full-Response\n   messages, as defined\
    \ by this specification, must include an HTTP-\n   Version of \"HTTP/1.0\".\n\
    \   HTTP/1.0 servers must:\n      o recognize the format of the Request-Line for\
    \ HTTP/0.9 and\n        HTTP/1.0 requests;\n      o understand any valid request\
    \ in the format of HTTP/0.9 or\n        HTTP/1.0;\n      o respond appropriately\
    \ with a message in the same protocol\n        version used by the client.\n \
    \  HTTP/1.0 clients must:\n      o recognize the format of the Status-Line for\
    \ HTTP/1.0 responses;\n      o understand any valid response in the format of\
    \ HTTP/0.9 or\n        HTTP/1.0.\n   Proxy and gateway applications must be careful\
    \ in forwarding requests\n   that are received in a format different than that\
    \ of the\n   application's native HTTP version. Since the protocol version\n \
    \  indicates the protocol capability of the sender, a proxy/gateway must\n   never\
    \ send a message with a version indicator which is greater than\n   its native\
    \ version; if a higher version request is received, the\n   proxy/gateway must\
    \ either downgrade the request version or respond\n   with an error. Requests\
    \ with a version lower than that of the\n   application's native format may be\
    \ upgraded before being forwarded;\n   the proxy/gateway's response to that request\
    \ must follow the server\n   requirements listed above.\n"
- title: 3.2  Uniform Resource Identifiers
  contents:
  - "3.2  Uniform Resource Identifiers\n   URIs have been known by many names: WWW\
    \ addresses, Universal Document\n   Identifiers, Universal Resource Identifiers\
    \ [2], and finally the\n   combination of Uniform Resource Locators (URL) [4]\
    \ and Names (URN)\n   [16]. As far as HTTP is concerned, Uniform Resource Identifiers\
    \ are\n   simply formatted strings which identify--via name, location, or any\n\
    \   other characteristic--a network resource.\n"
- title: 3.2.1 General Syntax
  contents:
  - "3.2.1 General Syntax\n   URIs in HTTP can be represented in absolute form or\
    \ relative to some\n   known base URI [9], depending upon the context of their\
    \ use. The two\n   forms are differentiated by the fact that absolute URIs always\
    \ begin\n   with a scheme name followed by a colon.\n       URI            = (\
    \ absoluteURI | relativeURI ) [ \"#\" fragment ]\n       absoluteURI    = scheme\
    \ \":\" *( uchar | reserved )\n       relativeURI    = net_path | abs_path | rel_path\n\
    \       net_path       = \"//\" net_loc [ abs_path ]\n       abs_path       =\
    \ \"/\" rel_path\n       rel_path       = [ path ] [ \";\" params ] [ \"?\" query\
    \ ]\n       path           = fsegment *( \"/\" segment )\n       fsegment    \
    \   = 1*pchar\n       segment        = *pchar\n       params         = param *(\
    \ \";\" param )\n       param          = *( pchar | \"/\" )\n       scheme   \
    \      = 1*( ALPHA | DIGIT | \"+\" | \"-\" | \".\" )\n       net_loc        =\
    \ *( pchar | \";\" | \"?\" )\n       query          = *( uchar | reserved )\n\
    \       fragment       = *( uchar | reserved )\n       pchar          = uchar\
    \ | \":\" | \"@\" | \"&\" | \"=\" | \"+\"\n       uchar          = unreserved\
    \ | escape\n       unreserved     = ALPHA | DIGIT | safe | extra | national\n\
    \       escape         = \"%\" HEX HEX\n       reserved       = \";\" | \"/\"\
    \ | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\"\n       extra          = \"\
    !\" | \"*\" | \"'\" | \"(\" | \")\" | \",\"\n       safe           = \"$\" | \"\
    -\" | \"_\" | \".\"\n       unsafe         = CTL | SP | <\"> | \"#\" | \"%\" |\
    \ \"<\" | \">\"\n       national       = <any OCTET excluding ALPHA, DIGIT,\n\
    \                        reserved, extra, safe, and unsafe>\n   For definitive\
    \ information on URL syntax and semantics, see RFC 1738\n   [4] and RFC 1808 [9].\
    \ The BNF above includes national characters not\n   allowed in valid URLs as\
    \ specified by RFC 1738, since HTTP servers\n   are not restricted in the set\
    \ of unreserved characters allowed to\n   represent the rel_path part of addresses,\
    \ and HTTP proxies may\n   receive requests for URIs not defined by RFC 1738.\n"
- title: 3.2.2 http URL
  contents:
  - "3.2.2 http URL\n   The \"http\" scheme is used to locate network resources via\
    \ the HTTP\n   protocol. This section defines the scheme-specific syntax and\n\
    \   semantics for http URLs.\n       http_URL       = \"http:\" \"//\" host [\
    \ \":\" port ] [ abs_path ]\n       host           = <A legal Internet host domain\
    \ name\n                         or IP address (in dotted-decimal form),\n   \
    \                      as defined by Section 2.1 of RFC 1123>\n       port   \
    \        = *DIGIT\n   If the port is empty or not given, port 80 is assumed. The\
    \ semantics\n   are that the identified resource is located at the server listening\n\
    \   for TCP connections on that port of that host, and the Request-URI\n   for\
    \ the resource is abs_path. If the abs_path is not present in the\n   URL, it\
    \ must be given as \"/\" when used as a Request-URI (Section\n   5.1.2).\n   \
    \   Note: Although the HTTP protocol is independent of the transport\n      layer\
    \ protocol, the http URL only identifies resources by their\n      TCP location,\
    \ and thus non-TCP resources must be identified by\n      some other URI scheme.\n\
    \   The canonical form for \"http\" URLs is obtained by converting any\n   UPALPHA\
    \ characters in host to their LOALPHA equivalent (hostnames are\n   case-insensitive),\
    \ eliding the [ \":\" port ] if the port is 80, and\n   replacing an empty abs_path\
    \ with \"/\".\n"
- title: 3.3  Date/Time Formats
  contents:
  - "3.3  Date/Time Formats\n   HTTP/1.0 applications have historically allowed three\
    \ different\n   formats for the representation of date/time stamps:\n       Sun,\
    \ 06 Nov 1994 08:49:37 GMT    ; RFC 822, updated by RFC 1123\n       Sunday, 06-Nov-94\
    \ 08:49:37 GMT   ; RFC 850, obsoleted by RFC 1036\n       Sun Nov  6 08:49:37\
    \ 1994         ; ANSI C's asctime() format\n   The first format is preferred as\
    \ an Internet standard and represents\n   a fixed-length subset of that defined\
    \ by RFC 1123 [6] (an update to\n   RFC 822 [7]). The second format is in common\
    \ use, but is based on the\n   obsolete RFC 850 [10] date format and lacks a four-digit\
    \ year.\n   HTTP/1.0 clients and servers that parse the date value should accept\n\
    \   all three formats, though they must never generate the third\n   (asctime)\
    \ format.\n      Note: Recipients of date values are encouraged to be robust in\n\
    \      accepting date values that may have been generated by non-HTTP\n      applications,\
    \ as is sometimes the case when retrieving or posting\n      messages via proxies/gateways\
    \ to SMTP or NNTP.\n   All HTTP/1.0 date/time stamps must be represented in Universal\
    \ Time\n   (UT), also known as Greenwich Mean Time (GMT), without exception.\n\
    \   This is indicated in the first two formats by the inclusion of \"GMT\"\n \
    \  as the three-letter abbreviation for time zone, and should be assumed\n   when\
    \ reading the asctime format.\n       HTTP-date      = rfc1123-date | rfc850-date\
    \ | asctime-date\n       rfc1123-date   = wkday \",\" SP date1 SP time SP \"GMT\"\
    \n       rfc850-date    = weekday \",\" SP date2 SP time SP \"GMT\"\n       asctime-date\
    \   = wkday SP date3 SP time SP 4DIGIT\n       date1          = 2DIGIT SP month\
    \ SP 4DIGIT\n                        ; day month year (e.g., 02 Jun 1982)\n  \
    \     date2          = 2DIGIT \"-\" month \"-\" 2DIGIT\n                     \
    \   ; day-month-year (e.g., 02-Jun-82)\n       date3          = month SP ( 2DIGIT\
    \ | ( SP 1DIGIT ))\n                        ; month day (e.g., Jun  2)\n     \
    \  time           = 2DIGIT \":\" 2DIGIT \":\" 2DIGIT\n                       \
    \ ; 00:00:00 - 23:59:59\n       wkday          = \"Mon\" | \"Tue\" | \"Wed\"\n\
    \                      | \"Thu\" | \"Fri\" | \"Sat\" | \"Sun\"\n       weekday\
    \        = \"Monday\" | \"Tuesday\" | \"Wednesday\"\n                      | \"\
    Thursday\" | \"Friday\" | \"Saturday\" | \"Sunday\"\n       month          = \"\
    Jan\" | \"Feb\" | \"Mar\" | \"Apr\"\n                      | \"May\" | \"Jun\"\
    \ | \"Jul\" | \"Aug\"\n                      | \"Sep\" | \"Oct\" | \"Nov\" | \"\
    Dec\"\n       Note: HTTP requirements for the date/time stamp format apply\n \
    \      only to their usage within the protocol stream. Clients and\n       servers\
    \ are not required to use these formats for user\n       presentation, request\
    \ logging, etc.\n"
- title: 3.4  Character Sets
  contents:
  - "3.4  Character Sets\n   HTTP uses the same definition of the term \"character\
    \ set\" as that\n   described for MIME:\n      The term \"character set\" is used\
    \ in this document to refer to a\n      method used with one or more tables to\
    \ convert a sequence of\n      octets into a sequence of characters. Note that\
    \ unconditional\n      conversion in the other direction is not required, in that\
    \ not all\n      characters may be available in a given character set and a\n\
    \      character set may provide more than one sequence of octets to\n      represent\
    \ a particular character. This definition is intended to\n      allow various\
    \ kinds of character encodings, from simple single-\n      table mappings such\
    \ as US-ASCII to complex table switching methods\n      such as those that use\
    \ ISO 2022's techniques. However, the\n      definition associated with a MIME\
    \ character set name must fully\n      specify the mapping to be performed from\
    \ octets to characters. In\n      particular, use of external profiling information\
    \ to determine the\n      exact mapping is not permitted.\n      Note: This use\
    \ of the term \"character set\" is more commonly\n      referred to as a \"character\
    \ encoding.\" However, since HTTP and\n      MIME share the same registry, it\
    \ is important that the terminology\n      also be shared.\n   HTTP character\
    \ sets are identified by case-insensitive tokens. The\n   complete set of tokens\
    \ are defined by the IANA Character Set registry\n   [15]. However, because that\
    \ registry does not define a single,\n   consistent token for each character set,\
    \ we define here the preferred\n   names for those character sets most likely\
    \ to be used with HTTP\n   entities. These character sets include those registered\
    \ by RFC 1521\n   [5] -- the US-ASCII [17] and ISO-8859 [18] character sets --\
    \ and\n   other names specifically recommended for use within MIME charset\n \
    \  parameters.\n     charset = \"US-ASCII\"\n             | \"ISO-8859-1\" | \"\
    ISO-8859-2\" | \"ISO-8859-3\"\n             | \"ISO-8859-4\" | \"ISO-8859-5\"\
    \ | \"ISO-8859-6\"\n             | \"ISO-8859-7\" | \"ISO-8859-8\" | \"ISO-8859-9\"\
    \n             | \"ISO-2022-JP\" | \"ISO-2022-JP-2\" | \"ISO-2022-KR\"\n     \
    \        | \"UNICODE-1-1\" | \"UNICODE-1-1-UTF-7\" | \"UNICODE-1-1-UTF-8\"\n \
    \            | token\n   Although HTTP allows an arbitrary token to be used as\
    \ a charset\n   value, any token that has a predefined value within the IANA\n\
    \   Character Set registry [15] must represent the character set defined\n   by\
    \ that registry. Applications should limit their use of character\n   sets to\
    \ those defined by the IANA registry.\n   The character set of an entity body\
    \ should be labelled as the lowest\n   common denominator of the character codes\
    \ used within that body, with\n   the exception that no label is preferred over\
    \ the labels US-ASCII or\n   ISO-8859-1.\n"
- title: 3.5  Content Codings
  contents:
  - "3.5  Content Codings\n   Content coding values are used to indicate an encoding\
    \ transformation\n   that has been applied to a resource. Content codings are\
    \ primarily\n   used to allow a document to be compressed or encrypted without\
    \ losing\n   the identity of its underlying media type. Typically, the resource\
    \ is\n   stored in this encoding and only decoded before rendering or\n   analogous\
    \ usage.\n       content-coding = \"x-gzip\" | \"x-compress\" | token\n      \
    \ Note: For future compatibility, HTTP/1.0 applications should\n       consider\
    \ \"gzip\" and \"compress\" to be equivalent to \"x-gzip\"\n       and \"x-compress\"\
    , respectively.\n   All content-coding values are case-insensitive. HTTP/1.0 uses\n\
    \   content-coding values in the Content-Encoding (Section 10.3) header\n   field.\
    \ Although the value describes the content-coding, what is more\n   important\
    \ is that it indicates what decoding mechanism will be\n   required to remove\
    \ the encoding. Note that a single program may be\n   capable of decoding multiple\
    \ content-coding formats. Two values are\n   defined by this specification:\n\
    \   x-gzip\n       An encoding format produced by the file compression program\n\
    \       \"gzip\" (GNU zip) developed by Jean-loup Gailly. This format is\n   \
    \    typically a Lempel-Ziv coding (LZ77) with a 32 bit CRC.\n   x-compress\n\
    \       The encoding format produced by the file compression program\n       \"\
    compress\". This format is an adaptive Lempel-Ziv-Welch coding\n       (LZW).\n\
    \       Note: Use of program names for the identification of\n       encoding\
    \ formats is not desirable and should be discouraged\n       for future encodings.\
    \ Their use here is representative of\n       historical practice, not good design.\n"
- title: 3.6  Media Types
  contents:
  - "3.6  Media Types\n   HTTP uses Internet Media Types [13] in the Content-Type\
    \ header field\n   (Section 10.5) in order to provide open and extensible data\
    \ typing.\n       media-type     = type \"/\" subtype *( \";\" parameter )\n \
    \      type           = token\n       subtype        = token\n   Parameters may\
    \ follow the type/subtype in the form of attribute/value\n   pairs.\n       parameter\
    \      = attribute \"=\" value\n       attribute      = token\n       value  \
    \        = token | quoted-string\n   The type, subtype, and parameter attribute\
    \ names are case-\n   insensitive. Parameter values may or may not be case-sensitive,\n\
    \   depending on the semantics of the parameter name. LWS must not be\n   generated\
    \ between the type and subtype, nor between an attribute and\n   its value. Upon\
    \ receipt of a media type with an unrecognized\n   parameter, a user agent should\
    \ treat the media type as if the\n   unrecognized parameter and its value were\
    \ not present.\n   Some older HTTP applications do not recognize media type parameters.\n\
    \   HTTP/1.0 applications should only use media type parameters when they\n  \
    \ are necessary to define the content of a message.\n   Media-type values are\
    \ registered with the Internet Assigned Number\n   Authority (IANA [15]). The\
    \ media type registration process is\n   outlined in RFC 1590 [13]. Use of non-registered\
    \ media types is\n   discouraged.\n"
- title: 3.6.1 Canonicalization and Text Defaults
  contents:
  - "3.6.1 Canonicalization and Text Defaults\n   Internet media types are registered\
    \ with a canonical form. In\n   general, an Entity-Body transferred via HTTP must\
    \ be represented in\n   the appropriate canonical form prior to its transmission.\
    \ If the body\n   has been encoded with a Content-Encoding, the underlying data\
    \ should\n   be in canonical form prior to being encoded.\n   Media subtypes of\
    \ the \"text\" type use CRLF as the text line break\n   when in canonical form.\
    \ However, HTTP allows the transport of text\n   media with plain CR or LF alone\
    \ representing a line break when used\n   consistently within the Entity-Body.\
    \ HTTP applications must accept\n   CRLF, bare CR, and bare LF as being representative\
    \ of a line break in\n   text media received via HTTP.\n   In addition, if the\
    \ text media is represented in a character set that\n   does not use octets 13\
    \ and 10 for CR and LF respectively, as is the\n   case for some multi-byte character\
    \ sets, HTTP allows the use of\n   whatever octet sequences are defined by that\
    \ character set to\n   represent the equivalent of CR and LF for line breaks.\
    \ This\n   flexibility regarding line breaks applies only to text media in the\n\
    \   Entity-Body; a bare CR or LF should not be substituted for CRLF\n   within\
    \ any of the HTTP control structures (such as header fields and\n   multipart\
    \ boundaries).\n   The \"charset\" parameter is used with some media types to\
    \ define the\n   character set (Section 3.4) of the data. When no explicit charset\n\
    \   parameter is provided by the sender, media subtypes of the \"text\"\n   type\
    \ are defined to have a default charset value of \"ISO-8859-1\" when\n   received\
    \ via HTTP. Data in character sets other than \"ISO-8859-1\" or\n   its subsets\
    \ must be labelled with an appropriate charset value in\n   order to be consistently\
    \ interpreted by the recipient.\n      Note: Many current HTTP servers provide\
    \ data using charsets other\n      than \"ISO-8859-1\" without proper labelling.\
    \ This situation reduces\n      interoperability and is not recommended. To compensate\
    \ for this,\n      some HTTP user agents provide a configuration option to allow\
    \ the\n      user to change the default interpretation of the media type\n   \
    \   character set when no charset parameter is given.\n"
- title: 3.6.2 Multipart Types
  contents:
  - "3.6.2 Multipart Types\n   MIME provides for a number of \"multipart\" types --\
    \ encapsulations of\n   several entities within a single message's Entity-Body.\
    \ The multipart\n   types registered by IANA [15] do not have any special meaning\
    \ for\n   HTTP/1.0, though user agents may need to understand each type in\n \
    \  order to correctly interpret the purpose of each body-part. An HTTP\n   user\
    \ agent should follow the same or similar behavior as a MIME user\n   agent does\
    \ upon receipt of a multipart type. HTTP servers should not\n   assume that all\
    \ HTTP clients are prepared to handle multipart types.\n   All multipart types\
    \ share a common syntax and must include a boundary\n   parameter as part of the\
    \ media type value. The message body is itself\n   a protocol element and must\
    \ therefore use only CRLF to represent line\n   breaks between body-parts. Multipart\
    \ body-parts may contain HTTP\n   header fields which are significant to the meaning\
    \ of that part.\n"
- title: 3.7  Product Tokens
  contents:
  - "3.7  Product Tokens\n   Product tokens are used to allow communicating applications\
    \ to\n   identify themselves via a simple product token, with an optional\n  \
    \ slash and version designator. Most fields using product tokens also\n   allow\
    \ subproducts which form a significant part of the application to\n   be listed,\
    \ separated by whitespace. By convention, the products are\n   listed in order\
    \ of their significance for identifying the\n   application.\n       product \
    \        = token [\"/\" product-version]\n       product-version = token\n   Examples:\n\
    \       User-Agent: CERN-LineMode/2.15 libwww/2.17b3\n       Server: Apache/0.8.4\n\
    \   Product tokens should be short and to the point -- use of them for\n   advertizing\
    \ or other non-essential information is explicitly\n   forbidden. Although any\
    \ token character may appear in a product-\n   version, this token should only\
    \ be used for a version identifier\n   (i.e., successive versions of the same\
    \ product should only differ in\n   the product-version portion of the product\
    \ value).\n"
- title: 4.  HTTP Message
  contents:
  - '4.  HTTP Message

    '
- title: 4.1  Message Types
  contents:
  - "4.1  Message Types\n   HTTP messages consist of requests from client to server\
    \ and responses\n   from server to client.\n       HTTP-message   = Simple-Request\
    \           ; HTTP/0.9 messages\n                      | Simple-Response\n   \
    \                   | Full-Request             ; HTTP/1.0 messages\n         \
    \             | Full-Response\n   Full-Request and Full-Response use the generic\
    \ message format of RFC\n   822 [7] for transferring entities. Both messages may\
    \ include optional\n   header fields (also known as \"headers\") and an entity\
    \ body. The\n   entity body is separated from the headers by a null line (i.e.,\
    \ a\n   line with nothing preceding the CRLF).\n       Full-Request   = Request-Line\
    \             ; Section 5.1\n                        *( General-Header       \
    \ ; Section 4.3\n                         | Request-Header        ; Section 5.2\n\
    \                         | Entity-Header )       ; Section 7.1\n            \
    \            CRLF\n                        [ Entity-Body ]          ; Section\
    \ 7.2\n       Full-Response  = Status-Line              ; Section 6.1\n      \
    \                  *( General-Header        ; Section 4.3\n                  \
    \       | Response-Header       ; Section 6.2\n                         | Entity-Header\
    \ )       ; Section 7.1\n                        CRLF\n                      \
    \  [ Entity-Body ]          ; Section 7.2\n   Simple-Request and Simple-Response\
    \ do not allow the use of any header\n   information and are limited to a single\
    \ request method (GET).\n       Simple-Request  = \"GET\" SP Request-URI CRLF\n\
    \       Simple-Response = [ Entity-Body ]\n   Use of the Simple-Request format\
    \ is discouraged because it prevents\n   the server from identifying the media\
    \ type of the returned entity.\n"
- title: 4.2  Message Headers
  contents:
  - "4.2  Message Headers\n   HTTP header fields, which include General-Header (Section\
    \ 4.3),\n   Request-Header (Section 5.2), Response-Header (Section 6.2), and\n\
    \   Entity-Header (Section 7.1) fields, follow the same generic format as\n  \
    \ that given in Section 3.1 of RFC 822 [7]. Each header field consists\n   of\
    \ a name followed immediately by a colon (\":\"), a single space (SP)\n   character,\
    \ and the field value. Field names are case-insensitive.\n   Header fields can\
    \ be extended over multiple lines by preceding each\n   extra line with at least\
    \ one SP or HT, though this is not\n   recommended.\n       HTTP-header    = field-name\
    \ \":\" [ field-value ] CRLF\n       field-name     = token\n       field-value\
    \    = *( field-content | LWS )\n       field-content  = <the OCTETs making up\
    \ the field-value\n                        and consisting of either *TEXT or combinations\n\
    \                        of token, tspecials, and quoted-string>\n   The order\
    \ in which header fields are received is not significant.\n   However, it is \"\
    good practice\" to send General-Header fields first,\n   followed by Request-Header\
    \ or Response-Header fields prior to the\n   Entity-Header fields.\n   Multiple\
    \ HTTP-header fields with the same field-name may be present\n   in a message\
    \ if and only if the entire field-value for that header\n   field is defined as\
    \ a comma-separated list [i.e., #(values)]. It must\n   be possible to combine\
    \ the multiple header fields into one \"field-\n   name: field-value\" pair, without\
    \ changing the semantics of the\n   message, by appending each subsequent field-value\
    \ to the first, each\n   separated by a comma.\n"
- title: 4.3  General Header Fields
  contents:
  - "4.3  General Header Fields\n   There are a few header fields which have general\
    \ applicability for\n   both request and response messages, but which do not apply\
    \ to the\n   entity being transferred. These headers apply only to the message\n\
    \   being transmitted.\n       General-Header = Date                     ; Section\
    \ 10.6\n                      | Pragma                   ; Section 10.12\n   General\
    \ header field names can be extended reliably only in\n   combination with a change\
    \ in the protocol version. However, new or\n   experimental header fields may\
    \ be given the semantics of general\n   header fields if all parties in the communication\
    \ recognize them to\n   be general header fields. Unrecognized header fields are\
    \ treated as\n   Entity-Header fields.\n"
- title: 5. Request
  contents:
  - "5. Request\n   A request message from a client to a server includes, within the\n\
    \   first line of that message, the method to be applied to the resource,\n  \
    \ the identifier of the resource, and the protocol version in use. For\n   backwards\
    \ compatibility with the more limited HTTP/0.9 protocol,\n   there are two valid\
    \ formats for an HTTP request:\n       Request        = Simple-Request | Full-Request\n\
    \       Simple-Request = \"GET\" SP Request-URI CRLF\n       Full-Request   =\
    \ Request-Line             ; Section 5.1\n                        *( General-Header\
    \        ; Section 4.3\n                         | Request-Header        ; Section\
    \ 5.2\n                         | Entity-Header )       ; Section 7.1\n      \
    \                  CRLF\n                        [ Entity-Body ]          ; Section\
    \ 7.2\n   If an HTTP/1.0 server receives a Simple-Request, it must respond with\n\
    \   an HTTP/0.9 Simple-Response. An HTTP/1.0 client capable of receiving\n   a\
    \ Full-Response should never generate a Simple-Request.\n"
- title: 5.1  Request-Line
  contents:
  - "5.1  Request-Line\n   The Request-Line begins with a method token, followed by\
    \ the\n   Request-URI and the protocol version, and ending with CRLF. The\n  \
    \ elements are separated by SP characters. No CR or LF are allowed\n   except\
    \ in the final CRLF sequence.\n       Request-Line = Method SP Request-URI SP\
    \ HTTP-Version CRLF\n   Note that the difference between a Simple-Request and\
    \ the Request-\n   Line of a Full-Request is the presence of the HTTP-Version\
    \ field and\n   the availability of methods other than GET.\n"
- title: 5.1.1 Method
  contents:
  - "5.1.1 Method\n   The Method token indicates the method to be performed on the\
    \ resource\n   identified by the Request-URI. The method is case-sensitive.\n\
    \       Method         = \"GET\"                    ; Section 8.1\n          \
    \            | \"HEAD\"                   ; Section 8.2\n                    \
    \  | \"POST\"                   ; Section 8.3\n                      | extension-method\n\
    \       extension-method = token\n   The list of methods acceptable by a specific\
    \ resource can change\n   dynamically; the client is notified through the return\
    \ code of the\n   response if a method is not allowed on a resource. Servers should\n\
    \   return the status code 501 (not implemented) if the method is\n   unrecognized\
    \ or not implemented.\n   The methods commonly used by HTTP/1.0 applications are\
    \ fully defined\n   in Section 8.\n"
- title: 5.1.2 Request-URI
  contents:
  - "5.1.2 Request-URI\n   The Request-URI is a Uniform Resource Identifier (Section\
    \ 3.2) and\n   identifies the resource upon which to apply the request.\n    \
    \   Request-URI    = absoluteURI | abs_path\n   The two options for Request-URI\
    \ are dependent on the nature of the\n   request.\n   The absoluteURI form is\
    \ only allowed when the request is being made\n   to a proxy. The proxy is requested\
    \ to forward the request and return\n   the response. If the request is GET or\
    \ HEAD and a prior response is\n   cached, the proxy may use the cached message\
    \ if it passes any\n   restrictions in the Expires header field. Note that the\
    \ proxy may\n   forward the request on to another proxy or directly to the server\n\
    \   specified by the absoluteURI. In order to avoid request loops, a\n   proxy\
    \ must be able to recognize all of its server names, including\n   any aliases,\
    \ local variations, and the numeric IP address. An example\n   Request-Line would\
    \ be:\n       GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.0\n   The most\
    \ common form of Request-URI is that used to identify a\n   resource on an origin\
    \ server or gateway. In this case, only the\n   absolute path of the URI is transmitted\
    \ (see Section 3.2.1,\n   abs_path). For example, a client wishing to retrieve\
    \ the resource\n   above directly from the origin server would create a TCP connection\n\
    \   to port 80 of the host \"www.w3.org\" and send the line:\n       GET /pub/WWW/TheProject.html\
    \ HTTP/1.0\n   followed by the remainder of the Full-Request. Note that the absolute\n\
    \   path cannot be empty; if none is present in the original URI, it must\n  \
    \ be given as \"/\" (the server root).\n   The Request-URI is transmitted as an\
    \ encoded string, where some\n   characters may be escaped using the \"% HEX HEX\"\
    \ encoding defined by\n   RFC 1738 [4]. The origin server must decode the Request-URI\
    \ in order\n   to properly interpret the request.\n"
- title: 5.2  Request Header Fields
  contents:
  - "5.2  Request Header Fields\n   The request header fields allow the client to\
    \ pass additional\n   information about the request, and about the client itself,\
    \ to the\n   server. These fields act as request modifiers, with semantics\n \
    \  equivalent to the parameters on a programming language method\n   (procedure)\
    \ invocation.\n       Request-Header = Authorization            ; Section 10.2\n\
    \                      | From                     ; Section 10.8\n           \
    \           | If-Modified-Since        ; Section 10.9\n                      |\
    \ Referer                  ; Section 10.13\n                      | User-Agent\
    \               ; Section 10.15\n   Request-Header field names can be extended\
    \ reliably only in\n   combination with a change in the protocol version. However,\
    \ new or\n   experimental header fields may be given the semantics of request\n\
    \   header fields if all parties in the communication recognize them to\n   be\
    \ request header fields. Unrecognized header fields are treated as\n   Entity-Header\
    \ fields.\n"
- title: 6.  Response
  contents:
  - "6.  Response\n   After receiving and interpreting a request message, a server\
    \ responds\n   in the form of an HTTP response message.\n       Response     \
    \   = Simple-Response | Full-Response\n       Simple-Response = [ Entity-Body\
    \ ]\n       Full-Response   = Status-Line             ; Section 6.1\n        \
    \                 *( General-Header       ; Section 4.3\n                    \
    \      | Response-Header      ; Section 6.2\n                          | Entity-Header\
    \ )      ; Section 7.1\n                         CRLF\n                      \
    \   [ Entity-Body ]         ; Section 7.2\n   A Simple-Response should only be\
    \ sent in response to an HTTP/0.9\n   Simple-Request or if the server only supports\
    \ the more limited\n   HTTP/0.9 protocol. If a client sends an HTTP/1.0 Full-Request\
    \ and\n   receives a response that does not begin with a Status-Line, it should\n\
    \   assume that the response is a Simple-Response and parse it\n   accordingly.\
    \ Note that the Simple-Response consists only of the\n   entity body and is terminated\
    \ by the server closing the connection.\n"
- title: 6.1  Status-Line
  contents:
  - "6.1  Status-Line\n   The first line of a Full-Response message is the Status-Line,\n\
    \   consisting of the protocol version followed by a numeric status code\n   and\
    \ its associated textual phrase, with each element separated by SP\n   characters.\
    \ No CR or LF is allowed except in the final CRLF sequence.\n       Status-Line\
    \ = HTTP-Version SP Status-Code SP Reason-Phrase CRLF\n   Since a status line\
    \ always begins with the protocol version and\n   status code\n       \"HTTP/\"\
    \ 1*DIGIT \".\" 1*DIGIT SP 3DIGIT SP\n   (e.g., \"HTTP/1.0 200 \"), the presence\
    \ of that expression is\n   sufficient to differentiate a Full-Response from a\
    \ Simple-Response.\n   Although the Simple-Response format may allow such an expression\
    \ to\n   occur at the beginning of an entity body, and thus cause a\n   misinterpretation\
    \ of the message if it was given in response to a\n   Full-Request, most HTTP/0.9\
    \ servers are limited to responses of type\n   \"text/html\" and therefore would\
    \ never generate such a response.\n"
- title: 6.1.1 Status Code and Reason Phrase
  contents:
  - "6.1.1 Status Code and Reason Phrase\n   The Status-Code element is a 3-digit\
    \ integer result code of the\n   attempt to understand and satisfy the request.\
    \ The Reason-Phrase is\n   intended to give a short textual description of the\
    \ Status-Code. The\n   Status-Code is intended for use by automata and the Reason-Phrase\
    \ is\n   intended for the human user. The client is not required to examine or\n\
    \   display the Reason-Phrase.\n   The first digit of the Status-Code defines\
    \ the class of response. The\n   last two digits do not have any categorization\
    \ role. There are 5\n   values for the first digit:\n      o 1xx: Informational\
    \ - Not used, but reserved for future use\n      o 2xx: Success - The action was\
    \ successfully received,\n             understood, and accepted.\n      o 3xx:\
    \ Redirection - Further action must be taken in order to\n             complete\
    \ the request\n      o 4xx: Client Error - The request contains bad syntax or\
    \ cannot\n             be fulfilled\n      o 5xx: Server Error - The server failed\
    \ to fulfill an apparently\n             valid request\n   The individual values\
    \ of the numeric status codes defined for\n   HTTP/1.0, and an example set of\
    \ corresponding Reason-Phrase's, are\n   presented below. The reason phrases listed\
    \ here are only recommended\n   -- they may be replaced by local equivalents without\
    \ affecting the\n   protocol. These codes are fully defined in Section 9.\n  \
    \     Status-Code    = \"200\"   ; OK\n                      | \"201\"   ; Created\n\
    \                      | \"202\"   ; Accepted\n                      | \"204\"\
    \   ; No Content\n                      | \"301\"   ; Moved Permanently\n    \
    \                  | \"302\"   ; Moved Temporarily\n                      | \"\
    304\"   ; Not Modified\n                      | \"400\"   ; Bad Request\n    \
    \                  | \"401\"   ; Unauthorized\n                      | \"403\"\
    \   ; Forbidden\n                      | \"404\"   ; Not Found\n             \
    \         | \"500\"   ; Internal Server Error\n                      | \"501\"\
    \   ; Not Implemented\n                      | \"502\"   ; Bad Gateway\n     \
    \                 | \"503\"   ; Service Unavailable\n                      | extension-code\n\
    \       extension-code = 3DIGIT\n       Reason-Phrase  = *<TEXT, excluding CR,\
    \ LF>\n   HTTP status codes are extensible, but the above codes are the only\n\
    \   ones generally recognized in current practice. HTTP applications are\n   not\
    \ required to understand the meaning of all registered status\n   codes, though\
    \ such understanding is obviously desirable. However,\n   applications must understand\
    \ the class of any status code, as\n   indicated by the first digit, and treat\
    \ any unrecognized response as\n   being equivalent to the x00 status code of\
    \ that class, with the\n   exception that an unrecognized response must not be\
    \ cached. For\n   example, if an unrecognized status code of 431 is received by\
    \ the\n   client, it can safely assume that there was something wrong with its\n\
    \   request and treat the response as if it had received a 400 status\n   code.\
    \ In such cases, user agents should present to the user the\n   entity returned\
    \ with the response, since that entity is likely to\n   include human-readable\
    \ information which will explain the unusual\n   status.\n"
- title: 6.2  Response Header Fields
  contents:
  - "6.2  Response Header Fields\n   The response header fields allow the server to\
    \ pass additional\n   information about the response which cannot be placed in\
    \ the Status-\n   Line. These header fields give information about the server\
    \ and about\n   further access to the resource identified by the Request-URI.\n\
    \       Response-Header = Location                ; Section 10.11\n          \
    \             | Server                  ; Section 10.14\n                    \
    \   | WWW-Authenticate        ; Section 10.16\n   Response-Header field names\
    \ can be extended reliably only in\n   combination with a change in the protocol\
    \ version. However, new or\n   experimental header fields may be given the semantics\
    \ of response\n   header fields if all parties in the communication recognize\
    \ them to\n    be response header fields. Unrecognized header fields are treated\
    \ as\n   Entity-Header fields.\n"
- title: 7.  Entity
  contents:
  - "7.  Entity\n   Full-Request and Full-Response messages may transfer an entity\
    \ within\n   some requests and responses. An entity consists of Entity-Header\n\
    \   fields and (usually) an Entity-Body. In this section, both sender and\n  \
    \ recipient refer to either the client or the server, depending on who\n   sends\
    \ and who receives the entity.\n"
- title: 7.1  Entity Header Fields
  contents:
  - "7.1  Entity Header Fields\n   Entity-Header fields define optional metainformation\
    \ about the\n   Entity-Body or, if no body is present, about the resource identified\n\
    \   by the request.\n       Entity-Header  = Allow                    ; Section\
    \ 10.1\n                      | Content-Encoding         ; Section 10.3\n    \
    \                  | Content-Length           ; Section 10.4\n               \
    \       | Content-Type             ; Section 10.5\n                      | Expires\
    \                  ; Section 10.7\n                      | Last-Modified     \
    \       ; Section 10.10\n                      | extension-header\n       extension-header\
    \ = HTTP-header\n   The extension-header mechanism allows additional Entity-Header\
    \ fields\n   to be defined without changing the protocol, but these fields cannot\n\
    \   be assumed to be recognizable by the recipient. Unrecognized header\n   fields\
    \ should be ignored by the recipient and forwarded by proxies.\n"
- title: 7.2  Entity Body
  contents:
  - "7.2  Entity Body\n   The entity body (if any) sent with an HTTP request or response\
    \ is in\n   a format and encoding defined by the Entity-Header fields.\n     \
    \  Entity-Body    = *OCTET\n   An entity body is included with a request message\
    \ only when the\n   request method calls for one. The presence of an entity body\
    \ in a\n   request is signaled by the inclusion of a Content-Length header field\n\
    \   in the request message headers. HTTP/1.0 requests containing an\n   entity\
    \ body must include a valid Content-Length header field.\n   For response messages,\
    \ whether or not an entity body is included with\n   a message is dependent on\
    \ both the request method and the response\n   code. All responses to the HEAD\
    \ request method must not include a\n   body, even though the presence of entity\
    \ header fields may lead one\n   to believe they do. All 1xx (informational),\
    \ 204 (no content), and\n   304 (not modified) responses must not include a body.\
    \ All other\n   responses must include an entity body or a Content-Length header\n\
    \   field defined with a value of zero (0).\n"
- title: 7.2.1 Type
  contents:
  - "7.2.1 Type\n   When an Entity-Body is included with a message, the data type\
    \ of that\n   body is determined via the header fields Content-Type and Content-\n\
    \   Encoding. These define a two-layer, ordered encoding model:\n       entity-body\
    \ := Content-Encoding( Content-Type( data ) )\n   A Content-Type specifies the\
    \ media type of the underlying data. A\n   Content-Encoding may be used to indicate\
    \ any additional content\n   coding applied to the type, usually for the purpose\
    \ of data\n   compression, that is a property of the resource requested. The\n\
    \   default for the content encoding is none (i.e., the identity\n   function).\n\
    \   Any HTTP/1.0 message containing an entity body should include a\n   Content-Type\
    \ header field defining the media type of that body. If\n   and only if the media\
    \ type is not given by a Content-Type header, as\n   is the case for Simple-Response\
    \ messages, the recipient may attempt\n   to guess the media type via inspection\
    \ of its content and/or the name\n   extension(s) of the URL used to identify\
    \ the resource. If the media\n   type remains unknown, the recipient should treat\
    \ it as type\n   \"application/octet-stream\".\n"
- title: 7.2.2 Length
  contents:
  - "7.2.2 Length\n   When an Entity-Body is included with a message, the length of\
    \ that\n   body may be determined in one of two ways. If a Content-Length header\n\
    \   field is present, its value in bytes represents the length of the\n   Entity-Body.\
    \ Otherwise, the body length is determined by the closing\n   of the connection\
    \ by the server.\n   Closing the connection cannot be used to indicate the end\
    \ of a\n   request body, since it leaves no possibility for the server to send\n\
    \   back a response. Therefore, HTTP/1.0 requests containing an entity\n   body\
    \ must include a valid Content-Length header field. If a request\n   contains\
    \ an entity body and Content-Length is not specified, and the\n   server does\
    \ not recognize or cannot calculate the length from other\n   fields, then the\
    \ server should send a 400 (bad request) response.\n      Note: Some older servers\
    \ supply an invalid Content-Length when\n      sending a document that contains\
    \ server-side includes dynamically\n      inserted into the data stream. It must\
    \ be emphasized that this\n      will not be tolerated by future versions of HTTP.\
    \ Unless the\n      client knows that it is receiving a response from a compliant\n\
    \      server, it should not depend on the Content-Length value being\n      correct.\n"
- title: 8.  Method Definitions
  contents:
  - "8.  Method Definitions\n   The set of common methods for HTTP/1.0 is defined\
    \ below. Although\n   this set can be expanded, additional methods cannot be assumed\
    \ to\n   share the same semantics for separately extended clients and servers.\n"
- title: 8.1  GET
  contents:
  - "8.1  GET\n   The GET method means retrieve whatever information (in the form\
    \ of an\n   entity) is identified by the Request-URI. If the Request-URI refers\n\
    \   to a data-producing process, it is the produced data which shall be\n   returned\
    \ as the entity in the response and not the source text of the\n   process, unless\
    \ that text happens to be the output of the process.\n   The semantics of the\
    \ GET method changes to a \"conditional GET\" if the\n   request message includes\
    \ an If-Modified-Since header field. A\n   conditional GET method requests that\
    \ the identified resource be\n   transferred only if it has been modified since\
    \ the date given by the\n   If-Modified-Since header, as described in Section\
    \ 10.9. The\n   conditional GET method is intended to reduce network usage by\n\
    \   allowing cached entities to be refreshed without requiring multiple\n   requests\
    \ or transferring unnecessary data.\n"
- title: 8.2  HEAD
  contents:
  - "8.2  HEAD\n   The HEAD method is identical to GET except that the server must\
    \ not\n   return any Entity-Body in the response. The metainformation contained\n\
    \   in the HTTP headers in response to a HEAD request should be identical\n  \
    \ to the information sent in response to a GET request. This method can\n   be\
    \ used for obtaining metainformation about the resource identified\n   by the\
    \ Request-URI without transferring the Entity-Body itself. This\n   method is\
    \ often used for testing hypertext links for validity,\n   accessibility, and\
    \ recent modification.\n   There is no \"conditional HEAD\" request analogous\
    \ to the conditional\n   GET. If an If-Modified-Since header field is included\
    \ with a HEAD\n   request, it should be ignored.\n"
- title: 8.3  POST
  contents:
  - "8.3  POST\n   The POST method is used to request that the destination server\
    \ accept\n   the entity enclosed in the request as a new subordinate of the\n\
    \   resource identified by the Request-URI in the Request-Line. POST is\n   designed\
    \ to allow a uniform method to cover the following functions:\n      o Annotation\
    \ of existing resources;\n      o Posting a message to a bulletin board, newsgroup,\
    \ mailing list,\n        or similar group of articles;\n      o Providing a block\
    \ of data, such as the result of submitting a\n        form [3], to a data-handling\
    \ process;\n      o Extending a database through an append operation.\n   The\
    \ actual function performed by the POST method is determined by the\n   server\
    \ and is usually dependent on the Request-URI. The posted entity\n   is subordinate\
    \ to that URI in the same way that a file is subordinate\n   to a directory containing\
    \ it, a news article is subordinate to a\n   newsgroup to which it is posted,\
    \ or a record is subordinate to a\n   database.\n   A successful POST does not\
    \ require that the entity be created as a\n   resource on the origin server or\
    \ made accessible for future\n   reference. That is, the action performed by the\
    \ POST method might not\n   result in a resource that can be identified by a URI.\
    \ In this case,\n   either 200 (ok) or 204 (no content) is the appropriate response\n\
    \   status, depending on whether or not the response includes an entity\n   that\
    \ describes the result.\n   If a resource has been created on the origin server,\
    \ the response\n   should be 201 (created) and contain an entity (preferably of\
    \ type\n   \"text/html\") which describes the status of the request and refers\
    \ to\n   the new resource.\n   A valid Content-Length is required on all HTTP/1.0\
    \ POST requests. An\n   HTTP/1.0 server should respond with a 400 (bad request)\
    \ message if it\n   cannot determine the length of the request message's content.\n\
    \   Applications must not cache responses to a POST request because the\n   application\
    \ has no way of knowing that the server would return an\n   equivalent response\
    \ on some future request.\n"
- title: 9.  Status Code Definitions
  contents:
  - "9.  Status Code Definitions\n   Each Status-Code is described below, including\
    \ a description of which\n   method(s) it can follow and any metainformation required\
    \ in the\n   response.\n"
- title: 9.1  Informational 1xx
  contents:
  - "9.1  Informational 1xx\n   This class of status code indicates a provisional\
    \ response,\n   consisting only of the Status-Line and optional headers, and is\n\
    \   terminated by an empty line. HTTP/1.0 does not define any 1xx status\n   codes\
    \ and they are not a valid response to a HTTP/1.0 request.\n   However, they may\
    \ be useful for experimental applications which are\n   outside the scope of this\
    \ specification.\n"
- title: 9.2  Successful 2xx
  contents:
  - "9.2  Successful 2xx\n   This class of status code indicates that the client's\
    \ request was\n   successfully received, understood, and accepted.\n   200 OK\n\
    \   The request has succeeded. The information returned with the\n   response\
    \ is dependent on the method used in the request, as follows:\n   GET    an entity\
    \ corresponding to the requested resource is sent\n          in the response;\n\
    \   HEAD   the response must only contain the header information and\n       \
    \   no Entity-Body;\n   POST   an entity describing or containing the result of\
    \ the action.\n   201 Created\n   The request has been fulfilled and resulted\
    \ in a new resource being\n   created. The newly created resource can be referenced\
    \ by the URI(s)\n   returned in the entity of the response. The origin server\
    \ should\n   create the resource before using this Status-Code. If the action\n\
    \   cannot be carried out immediately, the server must include in the\n   response\
    \ body a description of when the resource will be available;\n   otherwise, the\
    \ server should respond with 202 (accepted).\n   Of the methods defined by this\
    \ specification, only POST can create a\n   resource.\n   202 Accepted\n   The\
    \ request has been accepted for processing, but the processing\n   has not been\
    \ completed. The request may or may not eventually be\n   acted upon, as it may\
    \ be disallowed when processing actually takes\n   place. There is no facility\
    \ for re-sending a status code from an\n   asynchronous operation such as this.\n\
    \   The 202 response is intentionally non-committal. Its purpose is to\n   allow\
    \ a server to accept a request for some other process (perhaps\n   a batch-oriented\
    \ process that is only run once per day) without\n   requiring that the user agent's\
    \ connection to the server persist\n   until the process is completed. The entity\
    \ returned with this\n   response should include an indication of the request's\
    \ current\n   status and either a pointer to a status monitor or some estimate\
    \ of\n   when the user can expect the request to be fulfilled.\n   204 No Content\n\
    \   The server has fulfilled the request but there is no new\n   information to\
    \ send back. If the client is a user agent, it should\n   not change its document\
    \ view from that which caused the request to\n   be generated. This response is\
    \ primarily intended to allow input\n   for scripts or other actions to take place\
    \ without causing a change\n   to the user agent's active document view. The response\
    \ may include\n   new metainformation in the form of entity headers, which should\n\
    \   apply to the document currently in the user agent's active view.\n"
- title: 9.3  Redirection 3xx
  contents:
  - "9.3  Redirection 3xx\n   This class of status code indicates that further action\
    \ needs to be\n   taken by the user agent in order to fulfill the request. The\
    \ action\n   required may be carried out by the user agent without interaction\n\
    \   with the user if and only if the method used in the subsequent\n   request\
    \ is GET or HEAD. A user agent should never automatically\n   redirect a request\
    \ more than 5 times, since such redirections usually\n   indicate an infinite\
    \ loop.\n   300 Multiple Choices\n   This response code is not directly used by\
    \ HTTP/1.0 applications,\n   but serves as the default for interpreting the 3xx\
    \ class of\n   responses.\n   The requested resource is available at one or more\
    \ locations.\n   Unless it was a HEAD request, the response should include an\
    \ entity\n   containing a list of resource characteristics and locations from\n\
    \   which the user or user agent can choose the one most appropriate.\n   If the\
    \ server has a preferred choice, it should include the URL in\n   a Location field;\
    \ user agents may use this field value for\n   automatic redirection.\n   301\
    \ Moved Permanently\n   The requested resource has been assigned a new permanent\
    \ URL and\n   any future references to this resource should be done using that\n\
    \   URL. Clients with link editing capabilities should automatically\n   relink\
    \ references to the Request-URI to the new reference returned\n   by the server,\
    \ where possible.\n   The new URL must be given by the Location field in the response.\n\
    \   Unless it was a HEAD request, the Entity-Body of the response\n   should contain\
    \ a short note with a hyperlink to the new URL.\n   If the 301 status code is\
    \ received in response to a request using\n   the POST method, the user agent\
    \ must not automatically redirect the\n   request unless it can be confirmed by\
    \ the user, since this might\n   change the conditions under which the request\
    \ was issued.\n       Note: When automatically redirecting a POST request after\n\
    \       receiving a 301 status code, some existing user agents will\n       erroneously\
    \ change it into a GET request.\n   302 Moved Temporarily\n   The requested resource\
    \ resides temporarily under a different URL.\n   Since the redirection may be\
    \ altered on occasion, the client should\n   continue to use the Request-URI for\
    \ future requests.\n   The URL must be given by the Location field in the response.\
    \ Unless\n   it was a HEAD request, the Entity-Body of the response should\n \
    \  contain a short note with a hyperlink to the new URI(s).\n   If the 302 status\
    \ code is received in response to a request using\n   the POST method, the user\
    \ agent must not automatically redirect the\n   request unless it can be confirmed\
    \ by the user, since this might\n   change the conditions under which the request\
    \ was issued.\n       Note: When automatically redirecting a POST request after\n\
    \       receiving a 302 status code, some existing user agents will\n       erroneously\
    \ change it into a GET request.\n   304 Not Modified\n   If the client has performed\
    \ a conditional GET request and access is\n   allowed, but the document has not\
    \ been modified since the date and\n   time specified in the If-Modified-Since\
    \ field, the server must\n   respond with this status code and not send an Entity-Body\
    \ to the\n   client. Header fields contained in the response should only include\n\
    \   information which is relevant to cache managers or which may have\n   changed\
    \ independently of the entity's Last-Modified date. Examples\n   of relevant header\
    \ fields include: Date, Server, and Expires. A\n   cache should update its cached\
    \ entity to reflect any new field\n   values given in the 304 response.\n"
- title: 9.4  Client Error 4xx
  contents:
  - "9.4  Client Error 4xx\n   The 4xx class of status code is intended for cases\
    \ in which the\n   client seems to have erred. If the client has not completed\
    \ the\n   request when a 4xx code is received, it should immediately cease\n \
    \  sending data to the server. Except when responding to a HEAD request,\n   the\
    \ server should include an entity containing an explanation of the\n   error situation,\
    \ and whether it is a temporary or permanent\n   condition. These status codes\
    \ are applicable to any request method.\n      Note: If the client is sending\
    \ data, server implementations on TCP\n      should be careful to ensure that\
    \ the client acknowledges receipt\n      of the packet(s) containing the response\
    \ prior to closing the\n      input connection. If the client continues sending\
    \ data to the\n      server after the close, the server's controller will send\
    \ a reset\n      packet to the client, which may erase the client's unacknowledged\n\
    \      input buffers before they can be read and interpreted by the HTTP\n   \
    \   application.\n   400 Bad Request\n   The request could not be understood by\
    \ the server due to malformed\n   syntax. The client should not repeat the request\
    \ without\n   modifications.\n   401 Unauthorized\n   The request requires user\
    \ authentication. The response must include\n   a WWW-Authenticate header field\
    \ (Section 10.16) containing a\n   challenge applicable to the requested resource.\
    \ The client may\n   repeat the request with a suitable Authorization header field\n\
    \   (Section 10.2). If the request already included Authorization\n   credentials,\
    \ then the 401 response indicates that authorization has\n   been refused for\
    \ those credentials. If the 401 response contains\n   the same challenge as the\
    \ prior response, and the user agent has\n   already attempted authentication\
    \ at least once, then the user\n   should be presented the entity that was given\
    \ in the response,\n   since that entity may include relevant diagnostic information.\
    \ HTTP\n   access authentication is explained in Section 11.\n   403 Forbidden\n\
    \   The server understood the request, but is refusing to fulfill it.\n   Authorization\
    \ will not help and the request should not be repeated.\n   If the request method\
    \ was not HEAD and the server wishes to make\n   public why the request has not\
    \ been fulfilled, it should describe\n   the reason for the refusal in the entity\
    \ body. This status code is\n   commonly used when the server does not wish to\
    \ reveal exactly why\n   the request has been refused, or when no other response\
    \ is\n   applicable.\n   404 Not Found\n   The server has not found anything matching\
    \ the Request-URI. No\n   indication is given of whether the condition is temporary\
    \ or\n   permanent. If the server does not wish to make this information\n   available\
    \ to the client, the status code 403 (forbidden) can be\n   used instead.\n"
- title: 9.5  Server Error 5xx
  contents:
  - "9.5  Server Error 5xx\n   Response status codes beginning with the digit \"5\"\
    \ indicate cases in\n   which the server is aware that it has erred or is incapable\
    \ of\n   performing the request. If the client has not completed the request\n\
    \   when a 5xx code is received, it should immediately cease sending data\n  \
    \ to the server. Except when responding to a HEAD request, the server\n   should\
    \ include an entity containing an explanation of the error\n   situation, and\
    \ whether it is a temporary or permanent condition.\n   These response codes are\
    \ applicable to any request method and there\n   are no required header fields.\n\
    \   500 Internal Server Error\n   The server encountered an unexpected condition\
    \ which prevented it\n   from fulfilling the request.\n   501 Not Implemented\n\
    \   The server does not support the functionality required to fulfill\n   the\
    \ request. This is the appropriate response when the server does\n   not recognize\
    \ the request method and is not capable of supporting\n   it for any resource.\n\
    \   502 Bad Gateway\n   The server, while acting as a gateway or proxy, received\
    \ an invalid\n   response from the upstream server it accessed in attempting to\n\
    \   fulfill the request.\n   503 Service Unavailable\n   The server is currently\
    \ unable to handle the request due to a\n   temporary overloading or maintenance\
    \ of the server. The implication\n   is that this is a temporary condition which\
    \ will be alleviated\n   after some delay.\n       Note: The existence of the\
    \ 503 status code does not imply\n       that a server must use it when becoming\
    \ overloaded. Some\n       servers may wish to simply refuse the connection.\n"
- title: 10.  Header Field Definitions
  contents:
  - "10.  Header Field Definitions\n   This section defines the syntax and semantics\
    \ of all commonly used\n   HTTP/1.0 header fields. For general and entity header\
    \ fields, both\n   sender and recipient refer to either the client or the server,\n\
    \   depending on who sends and who receives the message.\n"
- title: 10.1  Allow
  contents:
  - "10.1  Allow\n   The Allow entity-header field lists the set of methods supported\
    \ by\n   the resource identified by the Request-URI. The purpose of this field\n\
    \   is strictly to inform the recipient of valid methods associated with\n   the\
    \ resource. The Allow header field is not permitted in a request\n   using the\
    \ POST method, and thus should be ignored if it is received\n   as part of a POST\
    \ entity.\n       Allow          = \"Allow\" \":\" 1#method\n    Example of use:\n\
    \       Allow: GET, HEAD\n   This field cannot prevent a client from trying other\
    \ methods.\n   However, the indications given by the Allow header field value\
    \ should\n   be followed. The actual set of allowed methods is defined by the\n\
    \   origin server at the time of each request.\n   A proxy must not modify the\
    \ Allow header field even if it does not\n   understand all the methods specified,\
    \ since the user agent may have\n   other means of communicating with the origin\
    \ server.\n   The Allow header field does not indicate what methods are implemented\n\
    \   by the server.\n"
- title: 10.2  Authorization
  contents:
  - "10.2  Authorization\n   A user agent that wishes to authenticate itself with\
    \ a server--\n   usually, but not necessarily, after receiving a 401 response--may\
    \ do\n   so by including an Authorization request-header field with the\n   request.\
    \ The Authorization field value consists of credentials\n   containing the authentication\
    \ information of the user agent for the\n   realm of the resource being requested.\n\
    \       Authorization  = \"Authorization\" \":\" credentials\n   HTTP access authentication\
    \ is described in Section 11. If a request\n   is authenticated and a realm specified,\
    \ the same credentials should\n   be valid for all other requests within this\
    \ realm.\n   Responses to requests containing an Authorization field are not\n\
    \   cachable.\n"
- title: 10.3  Content-Encoding
  contents:
  - "10.3  Content-Encoding\n   The Content-Encoding entity-header field is used as\
    \ a modifier to the\n   media-type. When present, its value indicates what additional\
    \ content\n   coding has been applied to the resource, and thus what decoding\n\
    \   mechanism must be applied in order to obtain the media-type\n   referenced\
    \ by the Content-Type header field. The Content-Encoding is\n   primarily used\
    \ to allow a document to be compressed without losing\n   the identity of its\
    \ underlying media type.\n       Content-Encoding = \"Content-Encoding\" \":\"\
    \ content-coding\n   Content codings are defined in Section 3.5. An example of\
    \ its use is\n       Content-Encoding: x-gzip\n   The Content-Encoding is a characteristic\
    \ of the resource identified\n   by the Request-URI. Typically, the resource is\
    \ stored with this\n   encoding and is only decoded before rendering or analogous\
    \ usage.\n"
- title: 10.4  Content-Length
  contents:
  - "10.4  Content-Length\n   The Content-Length entity-header field indicates the\
    \ size of the\n   Entity-Body, in decimal number of octets, sent to the recipient\
    \ or,\n   in the case of the HEAD method, the size of the Entity-Body that\n \
    \  would have been sent had the request been a GET.\n       Content-Length = \"\
    Content-Length\" \":\" 1*DIGIT\n   An example is\n       Content-Length: 3495\n\
    \   Applications should use this field to indicate the size of the\n   Entity-Body\
    \ to be transferred, regardless of the media type of the\n   entity. A valid Content-Length\
    \ field value is required on all\n   HTTP/1.0 request messages containing an entity\
    \ body.\n   Any Content-Length greater than or equal to zero is a valid value.\n\
    \   Section 7.2.2 describes how to determine the length of a response\n   entity\
    \ body if a Content-Length is not given.\n      Note: The meaning of this field\
    \ is significantly different from\n      the corresponding definition in MIME,\
    \ where it is an optional\n      field used within the \"message/external-body\"\
    \ content-type. In\n      HTTP, it should be used whenever the entity's length\
    \ can be\n      determined prior to being transferred.\n"
- title: 10.5  Content-Type
  contents:
  - "10.5  Content-Type\n   The Content-Type entity-header field indicates the media\
    \ type of the\n   Entity-Body sent to the recipient or, in the case of the HEAD\
    \ method,\n   the media type that would have been sent had the request been a\
    \ GET.\n       Content-Type   = \"Content-Type\" \":\" media-type\n   Media types\
    \ are defined in Section 3.6. An example of the field is\n       Content-Type:\
    \ text/html\n   Further discussion of methods for identifying the media type of\
    \ an\n   entity is provided in Section 7.2.1.\n"
- title: 10.6  Date
  contents:
  - "10.6  Date\n   The Date general-header field represents the date and time at\
    \ which\n   the message was originated, having the same semantics as orig-date\
    \ in\n   RFC 822. The field value is an HTTP-date, as described in Section\n \
    \  3.3.\n       Date           = \"Date\" \":\" HTTP-date\n   An example is\n\
    \       Date: Tue, 15 Nov 1994 08:12:31 GMT\n   If a message is received via direct\
    \ connection with the user agent\n   (in the case of requests) or the origin server\
    \ (in the case of\n   responses), then the date can be assumed to be the current\
    \ date at\n   the receiving end. However, since the date--as it is believed by\
    \ the\n   origin--is important for evaluating cached responses, origin servers\n\
    \   should always include a Date header. Clients should only send a Date\n   header\
    \ field in messages that include an entity body, as in the case\n   of the POST\
    \ request, and even then it is optional. A received message\n   which does not\
    \ have a Date header field should be assigned one by the\n   recipient if the\
    \ message will be cached by that recipient or\n   gatewayed via a protocol which\
    \ requires a Date.\n   In theory, the date should represent the moment just before\
    \ the\n   entity is generated. In practice, the date can be generated at any\n\
    \   time during the message origination without affecting its semantic\n   value.\n\
    \      Note: An earlier version of this document incorrectly specified\n     \
    \ that this field should contain the creation date of the enclosed\n      Entity-Body.\
    \ This has been changed to reflect actual (and proper)\n      usage.\n"
- title: 10.7  Expires
  contents:
  - "10.7  Expires\n   The Expires entity-header field gives the date/time after which\
    \ the\n   entity should be considered stale. This allows information providers\n\
    \   to suggest the volatility of the resource, or a date after which the\n   information\
    \ may no longer be valid. Applications must not cache this\n   entity beyond the\
    \ date given. The presence of an Expires field does\n   not imply that the original\
    \ resource will change or cease to exist\n   at, before, or after that time. However,\
    \ information providers that\n   know or even suspect that a resource will change\
    \ by a certain date\n   should include an Expires header with that date. The format\
    \ is an\n   absolute date and time as defined by HTTP-date in Section 3.3.\n \
    \      Expires        = \"Expires\" \":\" HTTP-date\n   An example of its use\
    \ is\n       Expires: Thu, 01 Dec 1994 16:00:00 GMT\n   If the date given is equal\
    \ to or earlier than the value of the Date\n   header, the recipient must not\
    \ cache the enclosed entity. If a\n   resource is dynamic by nature, as is the\
    \ case with many data-\n   producing processes, entities from that resource should\
    \ be given an\n   appropriate Expires value which reflects that dynamism.\n  \
    \ The Expires field cannot be used to force a user agent to refresh its\n   display\
    \ or reload a resource; its semantics apply only to caching\n   mechanisms, and\
    \ such mechanisms need only check a resource's\n   expiration status when a new\
    \ request for that resource is initiated.\n   User agents often have history mechanisms,\
    \ such as \"Back\" buttons and\n   history lists, which can be used to redisplay\
    \ an entity retrieved\n   earlier in a session. By default, the Expires field\
    \ does not apply to\n   history mechanisms. If the entity is still in storage,\
    \ a history\n   mechanism should display it even if the entity has expired, unless\n\
    \   the user has specifically configured the agent to refresh expired\n   history\
    \ documents.\n      Note: Applications are encouraged to be tolerant of bad or\n\
    \      misinformed implementations of the Expires header. A value of zero\n  \
    \    (0) or an invalid date format should be considered equivalent to\n      an\
    \ \"expires immediately.\" Although these values are not legitimate\n      for\
    \ HTTP/1.0, a robust implementation is always desirable.\n"
- title: 10.8  From
  contents:
  - "10.8  From\n   The From request-header field, if given, should contain an Internet\n\
    \   e-mail address for the human user who controls the requesting user\n   agent.\
    \ The address should be machine-usable, as defined by mailbox in\n   RFC 822 [7]\
    \ (as updated by RFC 1123 [6]):\n       From           = \"From\" \":\" mailbox\n\
    \   An example is:\n       From: webmaster@w3.org\n   This header field may be\
    \ used for logging purposes and as a means for\n   identifying the source of invalid\
    \ or unwanted requests. It should not\n   be used as an insecure form of access\
    \ protection. The interpretation\n   of this field is that the request is being\
    \ performed on behalf of the\n   person given, who accepts responsibility for\
    \ the method performed. In\n   particular, robot agents should include this header\
    \ so that the\n   person responsible for running the robot can be contacted if\
    \ problems\n   occur on the receiving end.\n   The Internet e-mail address in\
    \ this field may be separate from the\n   Internet host which issued the request.\
    \ For example, when a request\n   is passed through a proxy, the original issuer's\
    \ address should be\n   used.\n      Note: The client should not send the From\
    \ header field without the\n      user's approval, as it may conflict with the\
    \ user's privacy\n      interests or their site's security policy. It is strongly\n\
    \      recommended that the user be able to disable, enable, and modify\n    \
    \  the value of this field at any time prior to a request.\n"
- title: 10.9  If-Modified-Since
  contents:
  - "10.9  If-Modified-Since\n   The If-Modified-Since request-header field is used\
    \ with the GET\n   method to make it conditional: if the requested resource has\
    \ not been\n   modified since the time specified in this field, a copy of the\n\
    \   resource will not be returned from the server; instead, a 304 (not\n   modified)\
    \ response will be returned without any Entity-Body.\n       If-Modified-Since\
    \ = \"If-Modified-Since\" \":\" HTTP-date\n   An example of the field is:\n  \
    \     If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT\n   A conditional GET method\
    \ requests that the identified resource be\n   transferred only if it has been\
    \ modified since the date given by the\n   If-Modified-Since header. The algorithm\
    \ for determining this includes\n   the following cases:\n      a) If the request\
    \ would normally result in anything other than\n         a 200 (ok) status, or\
    \ if the passed If-Modified-Since date\n         is invalid, the response is exactly\
    \ the same as for a\n         normal GET. A date which is later than the server's\
    \ current\n         time is invalid.\n      b) If the resource has been modified\
    \ since the\n         If-Modified-Since date, the response is exactly the same\
    \ as\n         for a normal GET.\n      c) If the resource has not been modified\
    \ since a valid\n         If-Modified-Since date, the server shall return a 304\
    \ (not\n         modified) response.\n   The purpose of this feature is to allow\
    \ efficient updates of cached\n   information with a minimum amount of transaction\
    \ overhead.\n"
- title: 10.10  Last-Modified
  contents:
  - "10.10  Last-Modified\n   The Last-Modified entity-header field indicates the\
    \ date and time at\n   which the sender believes the resource was last modified.\
    \ The exact\n   semantics of this field are defined in terms of how the recipient\n\
    \   should interpret it:  if the recipient has a copy of this resource\n   which\
    \ is older than the date given by the Last-Modified field, that\n   copy should\
    \ be considered stale.\n       Last-Modified  = \"Last-Modified\" \":\" HTTP-date\n\
    \   An example of its use is\n       Last-Modified: Tue, 15 Nov 1994 12:45:26\
    \ GMT\n   The exact meaning of this header field depends on the implementation\n\
    \   of the sender and the nature of the original resource. For files, it\n   may\
    \ be just the file system last-modified time. For entities with\n   dynamically\
    \ included parts, it may be the most recent of the set of\n   last-modify times\
    \ for its component parts. For database gateways, it\n   may be the last-update\
    \ timestamp of the record. For virtual objects,\n   it may be the last time the\
    \ internal state changed.\n   An origin server must not send a Last-Modified date\
    \ which is later\n   than the server's time of message origination. In such cases,\
    \ where\n   the resource's last modification would indicate some time in the\n\
    \   future, the server must replace that date with the message\n   origination\
    \ date.\n"
- title: 10.11  Location
  contents:
  - "10.11  Location\n   The Location response-header field defines the exact location\
    \ of the\n   resource that was identified by the Request-URI. For 3xx responses,\n\
    \   the location must indicate the server's preferred URL for automatic\n   redirection\
    \ to the resource. Only one absolute URL is allowed.\n       Location       =\
    \ \"Location\" \":\" absoluteURI\n   An example is\n       Location: http://www.w3.org/hypertext/WWW/NewLocation.html\n"
- title: 10.12  Pragma
  contents:
  - "10.12  Pragma\n   The Pragma general-header field is used to include implementation-\n\
    \   specific directives that may apply to any recipient along the\n   request/response\
    \ chain. All pragma directives specify optional\n   behavior from the viewpoint\
    \ of the protocol; however, some systems\n   may require that behavior be consistent\
    \ with the directives.\n       Pragma           = \"Pragma\" \":\" 1#pragma-directive\n\
    \       pragma-directive = \"no-cache\" | extension-pragma\n       extension-pragma\
    \ = token [ \"=\" word ]\n   When the \"no-cache\" directive is present in a request\
    \ message, an\n   application should forward the request toward the origin server\
    \ even\n   if it has a cached copy of what is being requested. This allows a\n\
    \   client to insist upon receiving an authoritative response to its\n   request.\
    \ It also allows a client to refresh a cached copy which is\n   known to be corrupted\
    \ or stale.\n   Pragma directives must be passed through by a proxy or gateway\n\
    \   application, regardless of their significance to that application,\n   since\
    \ the directives may be applicable to all recipients along the\n   request/response\
    \ chain. It is not possible to specify a pragma for a\n   specific recipient;\
    \ however, any pragma directive not relevant to a\n   recipient should be ignored\
    \ by that recipient.\n"
- title: 10.13  Referer
  contents:
  - "10.13  Referer\n   The Referer request-header field allows the client to specify,\
    \ for\n   the server's benefit, the address (URI) of the resource from which\n\
    \   the Request-URI was obtained. This allows a server to generate lists\n   of\
    \ back-links to resources for interest, logging, optimized caching,\n   etc. It\
    \ also allows obsolete or mistyped links to be traced for\n   maintenance. The\
    \ Referer field must not be sent if the Request-URI\n   was obtained from a source\
    \ that does not have its own URI, such as\n   input from the user keyboard.\n\
    \       Referer        = \"Referer\" \":\" ( absoluteURI | relativeURI )\n   Example:\n\
    \       Referer: http://www.w3.org/hypertext/DataSources/Overview.html\n   If\
    \ a partial URI is given, it should be interpreted relative to the\n   Request-URI.\
    \ The URI must not include a fragment.\n      Note: Because the source of a link\
    \ may be private information or\n      may reveal an otherwise private information\
    \ source, it is strongly\n      recommended that the user be able to select whether\
    \ or not the\n      Referer field is sent. For example, a browser client could\
    \ have a\n      toggle switch for browsing openly/anonymously, which would\n \
    \     respectively enable/disable the sending of Referer and From\n      information.\n"
- title: 10.14  Server
  contents:
  - "10.14  Server\n   The Server response-header field contains information about\
    \ the\n   software used by the origin server to handle the request. The field\n\
    \   can contain multiple product tokens (Section 3.7) and comments\n   identifying\
    \ the server and any significant subproducts. By\n   convention, the product tokens\
    \ are listed in order of their\n   significance for identifying the application.\n\
    \       Server         = \"Server\" \":\" 1*( product | comment )\n   Example:\n\
    \       Server: CERN/3.0 libwww/2.17\n   If the response is being forwarded through\
    \ a proxy, the proxy\n   application must not add its data to the product list.\n\
    \      Note: Revealing the specific software version of the server may\n     \
    \ allow the server machine to become more vulnerable to attacks\n      against\
    \ software that is known to contain security holes. Server\n      implementors\
    \ are encouraged to make this field a configurable\n      option.\n      Note:\
    \ Some existing servers fail to restrict themselves to the\n      product token\
    \ syntax within the Server field.\n"
- title: 10.15  User-Agent
  contents:
  - "10.15  User-Agent\n   The User-Agent request-header field contains information\
    \ about the\n   user agent originating the request. This is for statistical purposes,\n\
    \   the tracing of protocol violations, and automated recognition of user\n  \
    \ agents for the sake of tailoring responses to avoid particular user\n   agent\
    \ limitations. Although it is not required, user agents should\n   include this\
    \ field with requests. The field can contain multiple\n   product tokens (Section\
    \ 3.7) and comments identifying the agent and\n   any subproducts which form a\
    \ significant part of the user agent. By\n   convention, the product tokens are\
    \ listed in order of their\n   significance for identifying the application.\n\
    \       User-Agent     = \"User-Agent\" \":\" 1*( product | comment )\n   Example:\n\
    \       User-Agent: CERN-LineMode/2.15 libwww/2.17b3\n       Note: Some current\
    \ proxy applications append their product\n       information to the list in the\
    \ User-Agent field. This is not\n       recommended, since it makes machine interpretation\
    \ of these\n       fields ambiguous.\n       Note: Some existing clients fail\
    \ to restrict themselves to\n       the product token syntax within the User-Agent\
    \ field.\n"
- title: 10.16  WWW-Authenticate
  contents:
  - "10.16  WWW-Authenticate\n   The WWW-Authenticate response-header field must be\
    \ included in 401\n   (unauthorized) response messages. The field value consists\
    \ of at\n   least one challenge that indicates the authentication scheme(s) and\n\
    \   parameters applicable to the Request-URI.\n       WWW-Authenticate = \"WWW-Authenticate\"\
    \ \":\" 1#challenge\n   The HTTP access authentication process is described in\
    \ Section 11.\n   User agents must take special care in parsing the WWW-Authenticate\n\
    \   field value if it contains more than one challenge, or if more than\n   one\
    \ WWW-Authenticate header field is provided, since the contents of\n   a challenge\
    \ may itself contain a comma-separated list of\n   authentication parameters.\n"
- title: 11.  Access Authentication
  contents:
  - "11.  Access Authentication\n   HTTP provides a simple challenge-response authentication\
    \ mechanism\n   which may be used by a server to challenge a client request and\
    \ by a\n   client to provide authentication information. It uses an extensible,\n\
    \   case-insensitive token to identify the authentication scheme,\n   followed\
    \ by a comma-separated list of attribute-value pairs which\n   carry the parameters\
    \ necessary for achieving authentication via that\n   scheme.\n       auth-scheme\
    \    = token\n       auth-param     = token \"=\" quoted-string\n   The 401 (unauthorized)\
    \ response message is used by an origin server\n   to challenge the authorization\
    \ of a user agent. This response must\n   include a WWW-Authenticate header field\
    \ containing at least one\n   challenge applicable to the requested resource.\n\
    \       challenge      = auth-scheme 1*SP realm *( \",\" auth-param )\n      \
    \ realm          = \"realm\" \"=\" realm-value\n       realm-value    = quoted-string\n\
    \   The realm attribute (case-insensitive) is required for all\n   authentication\
    \ schemes which issue a challenge. The realm value\n   (case-sensitive), in combination\
    \ with the canonical root URL of the\n   server being accessed, defines the protection\
    \ space. These realms\n   allow the protected resources on a server to be partitioned\
    \ into a\n   set of protection spaces, each with its own authentication scheme\n\
    \   and/or authorization database. The realm value is a string, generally\n  \
    \ assigned by the origin server, which may have additional semantics\n   specific\
    \ to the authentication scheme.\n   A user agent that wishes to authenticate itself\
    \ with a server--\n   usually, but not necessarily, after receiving a 401 response--may\
    \ do\n   so by including an Authorization header field with the request. The\n\
    \   Authorization field value consists of credentials containing the\n   authentication\
    \ information of the user agent for the realm of the\n   resource being requested.\n\
    \       credentials    = basic-credentials\n                      | ( auth-scheme\
    \ #auth-param )\n   The domain over which credentials can be automatically applied\
    \ by a\n   user agent is determined by the protection space. If a prior request\n\
    \   has been authorized, the same credentials may be reused for all other\n  \
    \ requests within that protection space for a period of time determined\n   by\
    \ the authentication scheme, parameters, and/or user preference.\n   Unless otherwise\
    \ defined by the authentication scheme, a single\n   protection space cannot extend\
    \ outside the scope of its server.\n   If the server does not wish to accept the\
    \ credentials sent with a\n   request, it should return a 403 (forbidden) response.\n\
    \   The HTTP protocol does not restrict applications to this simple\n   challenge-response\
    \ mechanism for access authentication. Additional\n   mechanisms may be used,\
    \ such as encryption at the transport level or\n   via message encapsulation,\
    \ and with additional header fields\n   specifying authentication information.\
    \ However, these additional\n   mechanisms are not defined by this specification.\n\
    \   Proxies must be completely transparent regarding user agent\n   authentication.\
    \ That is, they must forward the WWW-Authenticate and\n   Authorization headers\
    \ untouched, and must not cache the response to a\n   request containing Authorization.\
    \ HTTP/1.0 does not provide a means\n   for a client to be authenticated with\
    \ a proxy.\n"
- title: 11.1  Basic Authentication Scheme
  contents:
  - "11.1  Basic Authentication Scheme\n   The \"basic\" authentication scheme is\
    \ based on the model that the user\n   agent must authenticate itself with a user-ID\
    \ and a password for each\n   realm. The realm value should be considered an opaque\
    \ string which\n   can only be compared for equality with other realms on that\
    \ server.\n   The server will authorize the request only if it can validate the\n\
    \   user-ID and password for the protection space of the Request-URI.\n   There\
    \ are no optional authentication parameters.\n   Upon receipt of an unauthorized\
    \ request for a URI within the\n   protection space, the server should respond\
    \ with a challenge like the\n   following:\n       WWW-Authenticate: Basic realm=\"\
    WallyWorld\"\n   where \"WallyWorld\" is the string assigned by the server to\
    \ identify\n   the protection space of the Request-URI.\n   To receive authorization,\
    \ the client sends the user-ID and password,\n   separated by a single colon (\"\
    :\") character, within a base64 [5]\n   encoded string in the credentials.\n \
    \      basic-credentials = \"Basic\" SP basic-cookie\n       basic-cookie    \
    \  = <base64 [5] encoding of userid-password,\n                            except\
    \ not limited to 76 char/line>\n       userid-password   = [ token ] \":\" *TEXT\n\
    \   If the user agent wishes to send the user-ID \"Aladdin\" and password\n  \
    \ \"open sesame\", it would use the following header field:\n       Authorization:\
    \ Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\n   The basic authentication scheme is a\
    \ non-secure method of filtering\n   unauthorized access to resources on an HTTP\
    \ server. It is based on\n   the assumption that the connection between the client\
    \ and the server\n   can be regarded as a trusted carrier. As this is not generally\
    \ true\n   on an open network, the basic authentication scheme should be used\n\
    \   accordingly. In spite of this, clients should implement the scheme in\n  \
    \ order to communicate with servers that use it.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   This section is meant to inform application\
    \ developers, information\n   providers, and users of the security limitations\
    \ in HTTP/1.0 as\n   described by this document. The discussion does not include\n\
    \   definitive solutions to the problems revealed, though it does make\n   some\
    \ suggestions for reducing security risks.\n"
- title: 12.1  Authentication of Clients
  contents:
  - "12.1  Authentication of Clients\n   As mentioned in Section 11.1, the Basic authentication\
    \ scheme is not\n   a secure method of user authentication, nor does it prevent\
    \ the\n   Entity-Body from being transmitted in clear text across the physical\n\
    \   network used as the carrier. HTTP/1.0 does not prevent additional\n   authentication\
    \ schemes and encryption mechanisms from being employed\n   to increase security.\n"
- title: 12.2  Safe Methods
  contents:
  - "12.2  Safe Methods\n   The writers of client software should be aware that the\
    \ software\n   represents the user in their interactions over the Internet, and\n\
    \   should be careful to allow the user to be aware of any actions they\n   may\
    \ take which may have an unexpected significance to themselves or\n   others.\n\
    \   In particular, the convention has been established that the GET and\n   HEAD\
    \ methods should never have the significance of taking an action\n   other than\
    \ retrieval. These methods should be considered \"safe.\" This\n   allows user\
    \ agents to represent other methods, such as POST, in a\n   special way, so that\
    \ the user is made aware of the fact that a\n   possibly unsafe action is being\
    \ requested.\n   Naturally, it is not possible to ensure that the server does\
    \ not\n   generate side-effects as a result of performing a GET request; in\n\
    \   fact, some dynamic resources consider that a feature. The important\n   distinction\
    \ here is that the user did not request the side-effects,\n   so therefore cannot\
    \ be held accountable for them.\n"
- title: 12.3  Abuse of Server Log Information
  contents:
  - "12.3  Abuse of Server Log Information\n   A server is in the position to save\
    \ personal data about a user's\n   requests which may identify their reading patterns\
    \ or subjects of\n   interest. This information is clearly confidential in nature\
    \ and its\n   handling may be constrained by law in certain countries. People\
    \ using\n   the HTTP protocol to provide data are responsible for ensuring that\n\
    \   such material is not distributed without the permission of any\n   individuals\
    \ that are identifiable by the published results.\n"
- title: 12.4  Transfer of Sensitive Information
  contents:
  - "12.4  Transfer of Sensitive Information\n   Like any generic data transfer protocol,\
    \ HTTP cannot regulate the\n   content of the data that is transferred, nor is\
    \ there any a priori\n   method of determining the sensitivity of any particular\
    \ piece of\n   information within the context of any given request. Therefore,\n\
    \   applications should supply as much control over this information as\n   possible\
    \ to the provider of that information. Three header fields are\n   worth special\
    \ mention in this context: Server, Referer and From.\n   Revealing the specific\
    \ software version of the server may allow the\n   server machine to become more\
    \ vulnerable to attacks against software\n   that is known to contain security\
    \ holes. Implementors should make the\n   Server header field a configurable option.\n\
    \   The Referer field allows reading patterns to be studied and reverse\n   links\
    \ drawn. Although it can be very useful, its power can be abused\n   if user details\
    \ are not separated from the information contained in\n   the Referer. Even when\
    \ the personal information has been removed, the\n   Referer field may indicate\
    \ a private document's URI whose publication\n   would be inappropriate.\n   The\
    \ information sent in the From field might conflict with the user's\n   privacy\
    \ interests or their site's security policy, and hence it\n   should not be transmitted\
    \ without the user being able to disable,\n   enable, and modify the contents\
    \ of the field. The user must be able\n   to set the contents of this field within\
    \ a user preference or\n   application defaults configuration.\n   We suggest,\
    \ though do not require, that a convenient toggle interface\n   be provided for\
    \ the user to enable or disable the sending of From and\n   Referer information.\n"
- title: 12.5  Attacks Based On File and Path Names
  contents:
  - "12.5  Attacks Based On File and Path Names\n   Implementations of HTTP origin\
    \ servers should be careful to restrict\n   the documents returned by HTTP requests\
    \ to be only those that were\n   intended by the server administrators. If an\
    \ HTTP server translates\n   HTTP URIs directly into file system calls, the server\
    \ must take\n   special care not to serve files that were not intended to be\n\
    \   delivered to HTTP clients. For example, Unix, Microsoft Windows, and\n   other\
    \ operating systems use \"..\" as a path component to indicate a\n   directory\
    \ level above the current one. On such a system, an HTTP\n   server must disallow\
    \ any such construct in the Request-URI if it\n   would otherwise allow access\
    \ to a resource outside those intended to\n   be accessible via the HTTP server.\
    \ Similarly, files intended for\n   reference only internally to the server (such\
    \ as access control\n   files, configuration files, and script code) must be protected\
    \ from\n   inappropriate retrieval, since they might contain sensitive\n   information.\
    \ Experience has shown that minor bugs in such HTTP server\n   implementations\
    \ have turned into security risks.\n"
- title: 13.  Acknowledgments
  contents:
  - "13.  Acknowledgments\n   This specification makes heavy use of the augmented\
    \ BNF and generic\n   constructs defined by David H. Crocker for RFC 822 [7].\
    \ Similarly, it\n   reuses many of the definitions provided by Nathaniel Borenstein\
    \ and\n   Ned Freed for MIME [5]. We hope that their inclusion in this\n   specification\
    \ will help reduce past confusion over the relationship\n   between HTTP/1.0 and\
    \ Internet mail message formats.\n   The HTTP protocol has evolved considerably\
    \ over the past four years.\n   It has benefited from a large and active developer\
    \ community--the\n   many people who have participated on the www-talk mailing\
    \ list--and\n   it is that community which has been most responsible for the success\n\
    \   of HTTP and of the World-Wide Web in general. Marc Andreessen, Robert\n  \
    \ Cailliau, Daniel W. Connolly, Bob Denny, Jean-Francois Groff, Phillip\n   M.\
    \ Hallam-Baker, Hakon W. Lie, Ari Luotonen, Rob McCool, Lou\n   Montulli, Dave\
    \ Raggett, Tony Sanders, and Marc VanHeyningen deserve\n   special recognition\
    \ for their efforts in defining aspects of the\n   protocol for early versions\
    \ of this specification.\n   Paul Hoffman contributed sections regarding the informational\
    \ status\n   of this document and Appendices C and D.\n   This document has benefited\
    \ greatly from the comments of all those\n   participating in the HTTP-WG. In\
    \ addition to those already mentioned,\n   the following individuals have contributed\
    \ to this specification:\n       Gary Adams                         Harald Tveit\
    \ Alvestrand\n       Keith Ball                         Brian Behlendorf\n   \
    \    Paul Burchard                      Maurizio Codogno\n       Mike Cowlishaw\
    \                     Roman Czyborra\n       Michael A. Dolan                \
    \   John Franks\n       Jim Gettys                         Marc Hedlund\n    \
    \   Koen Holtman                       Alex Hopmann\n       Bob Jernigan     \
    \                  Shel Kaphan\n       Martijn Koster                     Dave\
    \ Kristol\n       Daniel LaLiberte                   Paul Leach\n       Albert\
    \ Lunde                       John C. Mallery\n       Larry Masinter         \
    \            Mitra\n       Jeffrey Mogul                      Gavin Nicol\n  \
    \     Bill Perry                         Jeffrey Perry\n       Owen Rees     \
    \                     Luigi Rizzo\n       David Robinson                     Marc\
    \ Salomon\n       Rich Salz                          Jim Seidman\n       Chuck\
    \ Shotton                      Eric W. Sink\n       Simon E. Spero           \
    \          Robert S. Thau\n       Francois Yergeau                   Mary Ellen\
    \ Zurko\n       Jean-Philippe Martin-Flatin\n"
- title: 14. References
  contents:
  - "14. References\n   [1]  Anklesaria, F., McCahill, M., Lindner, P., Johnson, D.,\n\
    \        Torrey, D., and B. Alberti, \"The Internet Gopher Protocol: A\n     \
    \   Distributed Document Search and Retrieval Protocol\", RFC 1436,\n        University\
    \ of Minnesota, March 1993.\n   [2]  Berners-Lee, T., \"Universal Resource Identifiers\
    \ in WWW: A\n        Unifying Syntax for the Expression of Names and Addresses\
    \ of\n        Objects on the Network as used in the World-Wide Web\",\n      \
    \  RFC 1630, CERN, June 1994.\n   [3]  Berners-Lee, T., and D. Connolly, \"Hypertext\
    \ Markup Language -\n        2.0\", RFC 1866, MIT/W3C, November 1995.\n   [4]\
    \  Berners-Lee, T., Masinter, L., and M. McCahill, \"Uniform\n        Resource\
    \ Locators (URL)\", RFC 1738, CERN, Xerox PARC,\n        University of Minnesota,\
    \ December 1994.\n   [5]  Borenstein, N., and N. Freed, \"MIME (Multipurpose Internet\
    \ Mail\n        Extensions) Part One: Mechanisms for Specifying and Describing\n\
    \        the Format of Internet Message Bodies\", RFC 1521, Bellcore,\n      \
    \  Innosoft, September 1993.\n   [6]  Braden, R., \"Requirements for Internet\
    \ hosts - Application and\n        Support\", STD 3, RFC 1123, IETF, October 1989.\n\
    \   [7]  Crocker, D., \"Standard for the Format of ARPA Internet Text\n      \
    \  Messages\", STD 11, RFC 822, UDEL, August 1982.\n   [8]  F. Davis, B. Kahle,\
    \ H. Morris, J. Salem, T. Shen, R. Wang,\n        J. Sui, and M. Grinbaum. \"\
    WAIS Interface Protocol Prototype\n        Functional Specification.\" (v1.5),\
    \ Thinking Machines\n        Corporation, April 1990.\n   [9]  Fielding, R., \"\
    Relative Uniform Resource Locators\", RFC 1808,\n        UC Irvine, June 1995.\n\
    \   [10] Horton, M., and R. Adams, \"Standard for interchange of USENET\n    \
    \    Messages\", RFC 1036 (Obsoletes RFC 850), AT&T Bell\n        Laboratories,\
    \ Center for Seismic Studies, December 1987.\n   [11] Kantor, B., and P. Lapsley,\
    \ \"Network News Transfer Protocol:\n        A Proposed Standard for the Stream-Based\
    \ Transmission of News\",\n        RFC 977, UC San Diego, UC Berkeley, February\
    \ 1986.\n   [12] Postel, J., \"Simple Mail Transfer Protocol.\" STD 10, RFC 821,\n\
    \        USC/ISI, August 1982.\n   [13] Postel, J., \"Media Type Registration\
    \ Procedure.\" RFC 1590,\n        USC/ISI, March 1994.\n   [14] Postel, J., and\
    \ J. Reynolds, \"File Transfer Protocol (FTP)\",\n        STD 9, RFC 959, USC/ISI,\
    \ October 1985.\n   [15] Reynolds, J., and J. Postel, \"Assigned Numbers\", STD\
    \ 2, RFC\n        1700, USC/ISI, October 1994.\n   [16] Sollins, K., and L. Masinter,\
    \ \"Functional Requirements for\n        Uniform Resource Names\", RFC 1737, MIT/LCS,\
    \ Xerox Corporation,\n        December 1994.\n   [17] US-ASCII. Coded Character\
    \ Set - 7-Bit American Standard Code\n        for Information Interchange. Standard\
    \ ANSI X3.4-1986, ANSI,\n        1986.\n   [18] ISO-8859. International Standard\
    \ -- Information Processing --\n        8-bit Single-Byte Coded Graphic Character\
    \ Sets --\n        Part 1: Latin alphabet No. 1, ISO 8859-1:1987.\n        Part\
    \ 2: Latin alphabet No. 2, ISO 8859-2, 1987.\n        Part 3: Latin alphabet No.\
    \ 3, ISO 8859-3, 1988.\n        Part 4: Latin alphabet No. 4, ISO 8859-4, 1988.\n\
    \        Part 5: Latin/Cyrillic alphabet, ISO 8859-5, 1988.\n        Part 6: Latin/Arabic\
    \ alphabet, ISO 8859-6, 1987.\n        Part 7: Latin/Greek alphabet, ISO 8859-7,\
    \ 1987.\n        Part 8: Latin/Hebrew alphabet, ISO 8859-8, 1988.\n        Part\
    \ 9: Latin alphabet No. 5, ISO 8859-9, 1990.\n"
- title: 15.  Authors' Addresses
  contents:
  - "15.  Authors' Addresses\n   Tim Berners-Lee\n   Director, W3 Consortium\n   MIT\
    \ Laboratory for Computer Science\n   545 Technology Square\n   Cambridge, MA\
    \ 02139, U.S.A.\n   Fax: +1 (617) 258 8682\n   EMail: timbl@w3.org\n   Roy T.\
    \ Fielding\n   Department of Information and Computer Science\n   University of\
    \ California\n   Irvine, CA 92717-3425, U.S.A.\n   Fax: +1 (714) 824-4056\n  \
    \ EMail: fielding@ics.uci.edu\n   Henrik Frystyk Nielsen\n   W3 Consortium\n \
    \  MIT Laboratory for Computer Science\n   545 Technology Square\n   Cambridge,\
    \ MA 02139, U.S.A.\n   Fax: +1 (617) 258 8682\n   EMail: frystyk@w3.org\n"
- title: Appendices
  contents:
  - "Appendices\n   These appendices are provided for informational reasons only --\
    \ they\n   do not form a part of the HTTP/1.0 specification.\n"
- title: A.  Internet Media Type message/http
  contents:
  - "A.  Internet Media Type message/http\n   In addition to defining the HTTP/1.0\
    \ protocol, this document serves\n   as the specification for the Internet media\
    \ type \"message/http\". The\n   following is to be registered with IANA [13].\n\
    \       Media Type name:         message\n       Media subtype name:      http\n\
    \       Required parameters:     none\n       Optional parameters:     version,\
    \ msgtype\n              version: The HTTP-Version number of the enclosed message\n\
    \                       (e.g., \"1.0\"). If not present, the version can be\n\
    \                       determined from the first line of the body.\n        \
    \      msgtype: The message type -- \"request\" or \"response\". If\n        \
    \               not present, the type can be determined from the\n           \
    \            first line of the body.\n       Encoding considerations: only \"\
    7bit\", \"8bit\", or \"binary\" are\n                                permitted\n\
    \       Security considerations: none\n"
- title: B.  Tolerant Applications
  contents:
  - "B.  Tolerant Applications\n   Although this document specifies the requirements\
    \ for the generation\n   of HTTP/1.0 messages, not all applications will be correct\
    \ in their\n   implementation. We therefore recommend that operational applications\n\
    \   be tolerant of deviations whenever those deviations can be\n   interpreted\
    \ unambiguously.\n   Clients should be tolerant in parsing the Status-Line and\
    \ servers\n   tolerant when parsing the Request-Line. In particular, they should\n\
    \   accept any amount of SP or HT characters between fields, even though\n   only\
    \ a single SP is required.\n   The line terminator for HTTP-header fields is the\
    \ sequence CRLF.\n   However, we recommend that applications, when parsing such\
    \ headers,\n   recognize a single LF as a line terminator and ignore the leading\
    \ CR.\n"
- title: C.  Relationship to MIME
  contents:
  - "C.  Relationship to MIME\n   HTTP/1.0 uses many of the constructs defined for\
    \ Internet Mail (RFC\n   822 [7]) and the Multipurpose Internet Mail Extensions\
    \ (MIME [5]) to\n   allow entities to be transmitted in an open variety of\n \
    \  representations and with extensible mechanisms. However, RFC 1521\n   discusses\
    \ mail, and HTTP has a few features that are different than\n   those described\
    \ in RFC 1521. These differences were carefully chosen\n   to optimize performance\
    \ over binary connections, to allow greater\n   freedom in the use of new media\
    \ types, to make date comparisons\n   easier, and to acknowledge the practice\
    \ of some early HTTP servers\n   and clients.\n   At the time of this writing,\
    \ it is expected that RFC 1521 will be\n   revised. The revisions may include\
    \ some of the practices found in\n   HTTP/1.0 but not in RFC 1521.\n   This appendix\
    \ describes specific areas where HTTP differs from RFC\n   1521. Proxies and gateways\
    \ to strict MIME environments should be\n   aware of these differences and provide\
    \ the appropriate conversions\n   where necessary. Proxies and gateways from MIME\
    \ environments to HTTP\n   also need to be aware of the differences because some\
    \ conversions may\n   be required.\n"
- title: C.1  Conversion to Canonical Form
  contents:
  - "C.1  Conversion to Canonical Form\n   RFC 1521 requires that an Internet mail\
    \ entity be converted to\n   canonical form prior to being transferred, as described\
    \ in Appendix G\n   of RFC 1521 [5]. Section 3.6.1 of this document describes\
    \ the forms\n   allowed for subtypes of the \"text\" media type when transmitted\
    \ over\n   HTTP.\n   RFC 1521 requires that content with a Content-Type of \"\
    text\"\n   represent line breaks as CRLF and forbids the use of CR or LF outside\n\
    \   of line break sequences. HTTP allows CRLF, bare CR, and bare LF to\n   indicate\
    \ a line break within text content when a message is\n   transmitted over HTTP.\n\
    \   Where it is possible, a proxy or gateway from HTTP to a strict RFC\n   1521\
    \ environment should translate all line breaks within the text\n   media types\
    \ described in Section 3.6.1 of this document to the RFC\n   1521 canonical form\
    \ of CRLF. Note, however, that this may be\n   complicated by the presence of\
    \ a Content-Encoding and by the fact\n   that HTTP allows the use of some character\
    \ sets which do not use\n   octets 13 and 10 to represent CR and LF, as is the\
    \ case for some\n   multi-byte character sets.\n"
- title: C.2  Conversion of Date Formats
  contents:
  - "C.2  Conversion of Date Formats\n   HTTP/1.0 uses a restricted set of date formats\
    \ (Section 3.3) to\n   simplify the process of date comparison. Proxies and gateways\
    \ from\n   other protocols should ensure that any Date header field present in\
    \ a\n   message conforms to one of the HTTP/1.0 formats and rewrite the date\n\
    \   if necessary.\n"
- title: C.3  Introduction of Content-Encoding
  contents:
  - "C.3  Introduction of Content-Encoding\n   RFC 1521 does not include any concept\
    \ equivalent to HTTP/1.0's\n   Content-Encoding header field. Since this acts\
    \ as a modifier on the\n   media type, proxies and gateways from HTTP to MIME-compliant\n\
    \   protocols must either change the value of the Content-Type header\n   field\
    \ or decode the Entity-Body before forwarding the message. (Some\n   experimental\
    \ applications of Content-Type for Internet mail have used\n   a media-type parameter\
    \ of \";conversions=<content-coding>\" to perform\n   an equivalent function as\
    \ Content-Encoding. However, this parameter\n   is not part of RFC 1521.)\n"
- title: C.4  No Content-Transfer-Encoding
  contents:
  - "C.4  No Content-Transfer-Encoding\n   HTTP does not use the Content-Transfer-Encoding\
    \ (CTE) field of RFC\n   1521. Proxies and gateways from MIME-compliant protocols\
    \ to HTTP must\n   remove any non-identity CTE (\"quoted-printable\" or \"base64\"\
    ) encoding\n   prior to delivering the response message to an HTTP client.\n \
    \  Proxies and gateways from HTTP to MIME-compliant protocols are\n   responsible\
    \ for ensuring that the message is in the correct format\n   and encoding for\
    \ safe transport on that protocol, where \"safe\n   transport\" is defined by\
    \ the limitations of the protocol being used.\n   Such a proxy or gateway should\
    \ label the data with an appropriate\n   Content-Transfer-Encoding if doing so\
    \ will improve the likelihood of\n   safe transport over the destination protocol.\n"
- title: C.5  HTTP Header Fields in Multipart Body-Parts
  contents:
  - "C.5  HTTP Header Fields in Multipart Body-Parts\n   In RFC 1521, most header\
    \ fields in multipart body-parts are generally\n   ignored unless the field name\
    \ begins with \"Content-\". In HTTP/1.0,\n   multipart body-parts may contain\
    \ any HTTP header fields which are\n   significant to the meaning of that part.\n"
- title: D.  Additional Features
  contents:
  - "D.  Additional Features\n   This appendix documents protocol elements used by\
    \ some existing HTTP\n   implementations, but not consistently and correctly across\
    \ most\n   HTTP/1.0 applications. Implementors should be aware of these\n   features,\
    \ but cannot rely upon their presence in, or interoperability\n   with, other\
    \ HTTP/1.0 applications.\n"
- title: D.1  Additional Request Methods
  contents:
  - 'D.1  Additional Request Methods

    '
- title: D.1.1 PUT
  contents:
  - "D.1.1 PUT\n   The PUT method requests that the enclosed entity be stored under\
    \ the\n   supplied Request-URI. If the Request-URI refers to an already\n   existing\
    \ resource, the enclosed entity should be considered as a\n   modified version\
    \ of the one residing on the origin server. If the\n   Request-URI does not point\
    \ to an existing resource, and that URI is\n   capable of being defined as a new\
    \ resource by the requesting user\n   agent, the origin server can create the\
    \ resource with that URI.\n   The fundamental difference between the POST and\
    \ PUT requests is\n   reflected in the different meaning of the Request-URI. The\
    \ URI in a\n   POST request identifies the resource that will handle the enclosed\n\
    \   entity as data to be processed. That resource may be a data-accepting\n  \
    \ process, a gateway to some other protocol, or a separate entity that\n   accepts\
    \ annotations. In contrast, the URI in a PUT request identifies\n   the entity\
    \ enclosed with the request -- the user agent knows what URI\n   is intended and\
    \ the server should not apply the request to some other\n   resource.\n"
- title: D.1.2 DELETE
  contents:
  - "D.1.2 DELETE\n   The DELETE method requests that the origin server delete the\
    \ resource\n   identified by the Request-URI.\n"
- title: D.1.3 LINK
  contents:
  - "D.1.3 LINK\n   The LINK method establishes one or more Link relationships between\n\
    \   the existing resource identified by the Request-URI and other\n   existing\
    \ resources.\n"
- title: D.1.4 UNLINK
  contents:
  - "D.1.4 UNLINK\n   The UNLINK method removes one or more Link relationships from\
    \ the\n   existing resource identified by the Request-URI.\n"
- title: D.2  Additional Header Field Definitions
  contents:
  - 'D.2  Additional Header Field Definitions

    '
- title: D.2.1 Accept
  contents:
  - "D.2.1 Accept\n   The Accept request-header field can be used to indicate a list\
    \ of\n   media ranges which are acceptable as a response to the request. The\n\
    \   asterisk \"*\" character is used to group media types into ranges, with\n\
    \   \"*/*\" indicating all media types and \"type/*\" indicating all subtypes\n\
    \   of that type. The set of ranges given by the client should represent\n   what\
    \ types are acceptable given the context of the request.\n"
- title: D.2.2 Accept-Charset
  contents:
  - "D.2.2 Accept-Charset\n   The Accept-Charset request-header field can be used\
    \ to indicate a\n   list of preferred character sets other than the default US-ASCII\
    \ and\n   ISO-8859-1. This field allows clients capable of understanding more\n\
    \   comprehensive or special-purpose character sets to signal that\n   capability\
    \ to a server which is capable of representing documents in\n   those character\
    \ sets.\n"
- title: D.2.3 Accept-Encoding
  contents:
  - "D.2.3 Accept-Encoding\n   The Accept-Encoding request-header field is similar\
    \ to Accept, but\n   restricts the content-coding values which are acceptable\
    \ in the\n   response.\n"
- title: D.2.4 Accept-Language
  contents:
  - "D.2.4 Accept-Language\n   The Accept-Language request-header field is similar\
    \ to Accept, but\n   restricts the set of natural languages that are preferred\
    \ as a\n   response to the request.\n"
- title: D.2.5 Content-Language
  contents:
  - "D.2.5 Content-Language\n   The Content-Language entity-header field describes\
    \ the natural\n   language(s) of the intended audience for the enclosed entity.\
    \ Note\n   that this may not be equivalent to all the languages used within the\n\
    \   entity.\n"
- title: D.2.6 Link
  contents:
  - "D.2.6 Link\n   The Link entity-header field provides a means for describing a\n\
    \   relationship between the entity and some other resource. An entity\n   may\
    \ include multiple Link values. Links at the metainformation level\n   typically\
    \ indicate relationships like hierarchical structure and\n   navigation paths.\n"
- title: D.2.7 MIME-Version
  contents:
  - "D.2.7 MIME-Version\n   HTTP messages may include a single MIME-Version general-header\
    \ field\n   to indicate what version of the MIME protocol was used to construct\n\
    \   the message. Use of the MIME-Version header field, as defined by RFC\n   1521\
    \ [5], should indicate that the message is MIME-conformant.\n   Unfortunately,\
    \ some older HTTP/1.0 servers send it indiscriminately,\n   and thus this field\
    \ should be ignored.\n"
- title: D.2.8 Retry-After
  contents:
  - "D.2.8 Retry-After\n   The Retry-After response-header field can be used with\
    \ a 503 (service\n   unavailable) response to indicate how long the service is\
    \ expected to\n   be unavailable to the requesting client. The value of this field\
    \ can\n   be either an HTTP-date or an integer number of seconds (in decimal)\n\
    \   after the time of the response.\n"
- title: D.2.9 Title
  contents:
  - "D.2.9 Title\n   The Title entity-header field indicates the title of the entity.\n"
- title: D.2.10 URI
  contents:
  - "D.2.10 URI\n   The URI entity-header field may contain some or all of the Uniform\n\
    \   Resource Identifiers (Section 3.2) by which the Request-URI resource\n   can\
    \ be identified. There is no guarantee that the resource can be\n   accessed using\
    \ the URI(s) specified.\n"
