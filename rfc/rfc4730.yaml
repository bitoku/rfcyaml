- title: __initial_text__
  contents:
  - "           A Session Initiation Protocol (SIP) Event Package\n              \
    \       for Key Press Stimulus (KPML)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a SIP Event Package \"kpml\" that enables\n\
    \   monitoring of Dual Tone Multi-Frequency (DTMF) signals and uses\n   Extensible\
    \ Markup Language (XML) documents referred to as Key Press\n   Markup Language\
    \ (KPML).  The kpml Event Package may be used to\n   support applications consistent\
    \ with the principles defined in the\n   document titled \"A Framework for Application\
    \ Interaction in the\n   Session Initiation Protocol (SIP)\".  The event package\
    \ uses SUBSCRIBE\n   messages and allows for XML documents that define and describe\
    \ filter\n   specifications for capturing key presses (DTMF Tones) entered at\
    \ a\n   presentation-free User Interface SIP User Agent (UA).  The event\n   package\
    \ uses NOTIFY messages and allows for XML documents to report\n   the captured\
    \ key presses (DTMF tones), consistent with the filter\n   specifications, to\
    \ an Application Server.  The scope of this package\n   is for collecting supplemental\
    \ key presses or mid-call key presses\n   (triggers).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Conventions Used in This Document ..........................5\n  \
    \ 2. Protocol Overview ...............................................5\n   3.\
    \ Key Concepts ....................................................6\n      3.1.\
    \ Subscription Duration ......................................6\n      3.2. Timers\
    \ .....................................................7\n      3.3. Pattern Matches\
    \ ............................................8\n      3.4. Digit Suppression\
    \ .........................................12\n      3.5. User Input Buffer Behavior\
    \ ................................14\n      3.6. DRegex ....................................................16\n\
    \           3.6.1. Overview ...........................................16\n  \
    \         3.6.2. Operation ..........................................18\n    \
    \  3.7. Monitoring Direction ......................................20\n      3.8.\
    \ Multiple Simultaneous Subscriptions .......................20\n   4. Event Package\
    \ Formal Definition ................................21\n      4.1. Event Package\
    \ Name ........................................21\n      4.2. Event Package Parameters\
    \ ..................................21\n      4.3. SUBSCRIBE Bodies ..........................................22\n\
    \      4.4. Subscription Duration .....................................22\n  \
    \    4.5. NOTIFY Bodies .............................................22\n    \
    \  4.6. Subscriber Generation of SUBSCRIBE Requests ...............22\n      4.7.\
    \ Notifier Processing of SUBSCRIBE Requests .................23\n      4.8. Notifier\
    \ Generation of NOTIFY Requests ....................25\n      4.9. Subscriber\
    \ Processing of NOTIFY Requests ..................27\n      4.10. Handling of\
    \ Forked Requests ..............................28\n      4.11. Rate of Notifications\
    \ ....................................28\n      4.12. State Agents and Lists ...................................28\n\
    \      4.13. Behavior of a Proxy Server ...............................29\n  \
    \ 5. Formal Syntax ..................................................29\n    \
    \  5.1. DRegex ....................................................29\n      5.2.\
    \ KPML Request ..............................................30\n      5.3. KPML\
    \ Response .............................................33\n   6. Enumeration\
    \ of KPML Status Codes ...............................34\n   7. IANA Considerations\
    \ ............................................34\n      7.1. SIP Event Package\
    \ Registration ............................34\n      7.2. MIME Media Type application/kpml-request+xml\
    \ ..............35\n      7.3. MIME Media Type application/kpml-response+xml .............35\n\
    \      7.4. URN Sub-Namespace Registration for\n           urn:ietf:xml:ns:kpml-request\
    \ ..............................35\n      7.5. URN Sub-Namespace Registration\
    \ for\n           urn:ietf:xml:ns:kpml-response .............................36\n\
    \      7.6. KPML Request Schema Registration ..........................37\n  \
    \    7.7. KPML Response Schema Registration .........................37\n   8.\
    \ Security Considerations ........................................37\n   9. Examples\
    \ .......................................................38\n      9.1. Monitoring\
    \ for Octothorpe .................................38\n      9.2. Dial String Collection\
    \ ....................................39\n   10. Call Flow Examples ............................................40\n\
    \      10.1. Supplemental Digits ......................................40\n  \
    \    10.2. Multiple Applications ....................................45\n   11.\
    \ References ....................................................52\n      11.1.\
    \ Normative References .....................................52\n      11.2. Informative\
    \ References ...................................53\n   Appendix A.  Contributors\
    \ .........................................54\n   Appendix B.  Acknowledgements\
    \ .....................................54\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a SIP Event Package \"kpml\" that\
    \ enables\n   monitoring of key presses and utilizes XML documents referred to\
    \ as\n   Key Press Markup Language (KPML).  KPML is a markup [14] that enables\n\
    \   presentation-free User Interfaces as described in the Application\n   Interaction\
    \ Framework [15].  The Key Press Stimulus Package is a SIP\n   Event Notification\
    \ Package [5] that uses the SUBSCRIBE and NOTIFY\n   methods of SIP.  The subscription\
    \ filter and notification report\n   bodies use the Keypad Markup Language, KPML.\n\
    \   The \"kpml\" event package requires the definition of two new MIME\n   types,\
    \ two new URN sub-namespaces, and two schemas for the KPML\n   Request and the\
    \ KPML Response.  The scope of this package is for\n   collecting supplemental\
    \ key presses or mid-call key presses\n   (triggers).  This capability allows\
    \ an Application Server service\n   provider to monitor (filter) for a set of\
    \ DTMF patterns at a SIP User\n   Agent located in either an end-user device or\
    \ a gateway.\n   In particular, the \"kpml\" event package enables \"dumb phones\"\
    \ and\n   \"gateways\" that receive signals from dumb phones to report user key-\n\
    \   press events.  Colloquially, this mechanism provides for \"digit\n   reporting\"\
    \ or \"Dual Tone Multi-Frequency (DTMF) reporting.\"  The\n   capability eliminates\
    \ the need for \"hair-pinning\" (routing media into\n   and then out of the same\
    \ device) through a Media Server or\n   duplicating all the DTMF events, when\
    \ an Application Server needs to\n   trigger mid-call service processing on DTMF\
    \ digit patterns.\n   A goal of KPML is to fit in an extremely small memory and\
    \ processing\n   footprint.\n   The name of the XML document, KPML, reflects its\
    \ legacy support role.\n   The public switched telephony network (PSTN) accomplished\
    \ signaling\n   by transporting DTMF tones in the bearer channel (in-band signaling)\n\
    \   from the user terminal to the local exchange.\n   Voice-over-IP networks transport\
    \ in-band signals with actual DTMF\n   waveforms or RFC 2833 [10] packets.  In\
    \ RFC 2833, the signaling\n   application inserts RFC 2833 named signal packets\
    \ as well as, or\n   instead of, generating tones in the media path.  The receiving\n\
    \   application receives the signal information in the media stream.\n   RFC 2833\
    \ tones are ideal for conveying telephone-events point-to-\n   point in a Real-time\
    \ Transport Protocol (RTP) stream, as in the\n   context of straightforward sessions\
    \ like a 2-party call or a simple,\n   centrally mixed conference.  However, there\
    \ are other environments\n   where additional or alternative requirements are\
    \ needed.  These other\n   environments include protocol translation and complex\
    \ call control.\n   An interested application could request notifications of every\
    \ key\n   press.  However, many of the use cases for such signaling show that\n\
    \   most applications are interested in only one or a few keystrokes.\n   Thus\
    \ a mechanism is needed for specifying to the user's interface\n   what stimuli\
    \ the application requires.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   RFC 2119 [1] provides the interpretations\
    \ for the key words \"MUST\",\n   \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL\
    \ NOT\", \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"\
    \ found in this document.\n   The Application Interaction Framework document [15]\
    \ provides the\n   interpretations for the terms \"User Device\", \"SIP Application\"\
    , and\n   \"User Input\".  This document uses the term \"Application\" and\n \
    \  \"Requesting Application\" interchangeably with \"SIP Application\".\n   Additionally,\
    \ the Application Interaction Framework document\n   discusses User Device Proxies.\
    \  A common instantiation of a User\n   Device Proxy is a Public Switched Telephone\
    \ Network (PSTN) gateway.\n   Because the normative behavior of a presentation-free\
    \ User Interface\n   is identical for a presentation-free SIP User Agent and a\n\
    \   presentation-free User Device Proxy, this document uses \"User Device\"\n\
    \   for both cases.\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   The \"kpml\" event package uses explicit subscription\
    \ notification\n   requests using the SIP SUBSCRIBE and NOTIFY methods.  An Application\n\
    \   that wants to collect digits creates an application/kpml-request+xml\n   document\
    \ with the digit patterns of interest to the Application and\n   places this document\
    \ in its SUBSCRIBE request.  SIP SUBSCRIBE\n   messages are routed to the User\
    \ Interface using standard SIP request\n   routing.  KPML Subscriptions do not\
    \ fork.  The KPML request contained\n   in the SUBSCRIBE message identifies the\
    \ target media stream by\n   referencing the dialog identifiers corresponding\
    \ to the session\n   responsible for the media stream.  Once a subscription is\n\
    \   established, the User Interface sends application/kpml-response+xml\n   documents\
    \ in NOTIFY requests when digits are collected or when\n   timeouts or errors\
    \ occur.\n   A KPML subscription can be persistent or one-shot.  Persistent\n\
    \   requests are active until the subscription terminates, the\n   Application\
    \ replaces the request, the Application deletes the request\n   by sending a null\
    \ document on the dialog, or the Application\n   explicitly deletes the subscription\
    \ by sending a SUBSCRIBE with an\n   expires value of zero (0).\n   One-shot requests\
    \ terminate the subscription upon the receipt of DTMF\n   values that provide\
    \ a match.  The \"persist\" KPML element specifies\n   whether the subscription\
    \ remains active for the duration specified in\n   the SUBSCRIBE message or if\
    \ it automatically terminates upon a\n   pattern match.\n   NOTIFY messages can\
    \ contain XML documents.  If the User Interface\n   matches a digitmap, the NOTIFY\
    \ message (response) contains an XML\n   document that indicates the User Input\
    \ detected and whether the User\n   Interface suppressed the representation of\
    \ User Input, such as tones,\n   or RFC 2833, from the media streams.  If the\
    \ User Interface\n   encountered an error condition, such as a timeout, this will\
    \ also be\n   reported.\n"
- title: 3.  Key Concepts
  contents:
  - '3.  Key Concepts

    '
- title: 3.1.  Subscription Duration
  contents:
  - "3.1.  Subscription Duration\n   KPML recognizes two types of subscriptions: one-shot\
    \ and persistent.\n   Persistent subscriptions have two sub-types: continuous\
    \ notify and\n   single-notify.\n   One-shot subscriptions terminate after a pattern\
    \ match occurs and a\n   report is issued in a NOTIFY message.  If the User Interface\
    \ detects\n   a key press stimulus that triggers a one-shot KPML event, then the\n\
    \   User Interface (notifier) MUST set the \"Subscription-State\" in the\n   NOTIFY\
    \ message to \"terminated\".  At this point, the User Interface\n   MUST consider\
    \ the subscription expired.\n   Persistent subscriptions remain active at the\
    \ User Interface, even\n   after a match.  For continuous-notify persistent subscriptions,\
    \ the\n   User Interface will emit a NOTIFY message whenever the User Input\n\
    \   matches a subscribed pattern.  For single-notify persistent\n   subscriptions,\
    \ the user device will emit a NOTIFY message at the\n   first match, but will\
    \ not emit further NOTIFY messages until the\n   Application issues a new subscription\
    \ request on the subscription\n   dialog.\n      NOTE: The single-notify persistent\
    \ subscription enables lock-step\n      (race-free) quarantining of User Input\
    \ between different digit\n      maps.\n   The \"persist\" attribute to the <pattern>\
    \ tag in the KPML subscription\n   body affects the lifetime of the subscription.\n\
    \   If the \"persist\" attribute is \"one-shot\", then once there is a match\n\
    \   (or no match is possible), the subscription ends after the User\n   Interface\
    \ notifies the Application.\n   If the \"persist\" attribute is \"persist\" or\
    \ \"single-notify\", then the\n   subscription ends when the Application explicitly\
    \ ends it or the User\n   Interface terminates the subscription.\n   If the User\
    \ Interface does not support persistent subscriptions, it\n   returns a NOTIFY\
    \ message with the KPML status code set to 531.  If\n   there are digits in the\
    \ buffer and the digits match an expression in\n   the SUBSCRIBE filter, the User\
    \ Interface prepares the appropriate\n   NOTIFY response message.\n   The values\
    \ of the \"persist\" attribute are case sensitive.\n"
- title: 3.2.  Timers
  contents:
  - "3.2.  Timers\n   To address the various key press collection scenarios, three\
    \ timers\n   are defined.  They are the extra, critical, and inter-digit timers.\n\
    \   o  The inter-digit timer is the maximum time to wait between digits.\n   \
    \   Note: unlike Media Gateway Control Protocol (MGCP) [11] or H.248\n      [12],\
    \ there is no start timer, as that concept does not apply in\n      the KPML context.\n\
    \   o  The critical timer is the time to wait for another digit if the\n     \
    \ collected digits can match more than one potential pattern.\n   o  The extra\
    \ timer is the time to wait for another digit if the\n      collected digits can\
    \ only match one potential pattern, but a\n      longer match for this pattern\
    \ is possible.\n   The User Interface MAY support an inter-digit timeout value.\
    \  This is\n   the amount of time the User Interface will wait for User Input\
    \ before\n   returning a timeout error result on a partially matched pattern.\
    \  The\n   application can specify the inter-digit timeout as an integer number\n\
    \   of milliseconds by using the \"interdigittimer\" attribute to the\n   <pattern>\
    \ tag.  The default is 4000 milliseconds.  If the User\n   Interface does not\
    \ support the specification of an inter-digit\n   timeout, the User Interface\
    \ MUST silently ignore the specification.\n   If the User Interface supports the\
    \ specification of an inter-digit\n   timeout, but not to the granularity specified\
    \ by the value presented,\n   the User Interface MUST round up the requested value\
    \ to the closest\n   value it can support.\n   The purpose of the inter-digit\
    \ timeout is to protect applications\n   from starting to match a pattern, yet\
    \ never returning a result.  This\n   can occur, for example, if the user accidentally\
    \ enters a key that\n   begins to match a pattern.  However, since the user accidentally\n\
    \   entered the key, the rest of the pattern never comes.  Moreover, when\n  \
    \ the user does enter a pattern, since they have already entered a key,\n   the\
    \ pattern may not match or may not match as expected.  Likewise,\n   consider\
    \ the case where the user thinks they entered a key press, but\n   the User Interface\
    \ does not detect the key.  This could occur when\n   collecting ten digits, but\
    \ the device actually only receives 9.  In\n   this case, the User Interface will\
    \ wait forever for the tenth key\n   press, while the user becomes frustrated\
    \ wondering why the\n   application is not responding.\n   The User Interface\
    \ MAY support a critical-digit timeout value.  This\n   is the amount of time\
    \ the User Interface will wait for another key\n   press when it already has a\
    \ matched <regex> but there is another,\n   longer <regex> that may also match\
    \ the pattern.  The application can\n   specify the critical-digit timeout as\
    \ an integer number of\n   milliseconds by using the \"criticaldigittimer\" attribute\
    \ to the\n   <pattern> tag.  The default is 1000 milliseconds.\n   The purpose\
    \ of the critical-digit timeout is to allow the application\n   to collect longer\
    \ matches than the shortest presented.  This is\n   unlike MGCP [11], where the\
    \ shortest match gets returned.  For\n   example, if the application registers\
    \ for the patterns \"0011\", \"011\",\n   \"00\", and \"0\", the critical-digit\
    \ timeout enables the User Interface\n   to distinguish between \"0\", \"00\"\
    , \"011\", and \"0011\".  Without this\n   feature, the only value that the User\
    \ Interface can detect is \"0\".\n   The User Interface MAY support an extra-digit\
    \ timeout value.  This is\n   the amount of time the User Interface will wait\
    \ for another key press\n   when it already has matched the longest <regex>. \
    \ The application can\n   specify the extra-digit timeout as an integer number\
    \ of milliseconds\n   by using the \"extradigittimer\" attribute to the <pattern>\
    \ tag.  The\n   default is 500 milliseconds.  If there is no enterkey specified,\
    \ then\n   the User Interface MAY default the exteradigittimer to zero.\n   The\
    \ purpose of the extra-digit timeout is to allow the User Interface\n   to collect\
    \ the enterkey.  Without this feature, the User Interface\n   would match the\
    \ pattern, and the enterkey would be buffered and\n   returned as the next pattern.\n"
- title: 3.3.  Pattern Matches
  contents:
  - "3.3.  Pattern Matches\n   During the subscription lifetime, the User Interface\
    \ may detect a key\n   press stimulus that triggers a KPML event.  In this case,\
    \ the User\n   Interface (notifier) MUST return the appropriate KPML document.\n\
    \   The pattern matching logic works as follows.  KPML User Interfaces\n   MUST\
    \ follow the logic presented in this section so that different\n   implementations\
    \ will perform deterministically on the same KPML\n   document given the same\
    \ User Input.\n   A kpml request document contains a <pattern> element with a\
    \ series of\n   <regex> tags.  Each <regex> element specifies a potential pattern\
    \ for\n   the User Interface to match.  The Section 5.1 describes the DRegex,\n\
    \   or digit regular expression, language.\n   The pattern match algorithm matches\
    \ the longest regular expression.\n   This is the same mode as H.248.1 [12] and\
    \ not the mode presented by\n   MGCP [11].  The pattern match algorithm choice\
    \ has an impact on\n   determining when a pattern matches.  Consider the following\
    \ KPML\n   document.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <kpml-request\
    \ xmlns=\"urn:ietf:params:xml:ns:kpml-request\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n         xsi:schemaLocation=\n           \"urn:ietf:params:xml:ns:kpml-request\
    \ kpml-request.xsd\"\n         version=\"1.0\">\n     <pattern>\n       <regex>0</regex>\n\
    \       <regex>011</regex>\n     </pattern>\n   </kpml-request>\n            \
    \             Figure 1: Greedy Matching\n   In Figure 1, if we were to match on\
    \ the first found pattern, the\n   string \"011\" would never match.  This happens\
    \ because the \"0\" rule\n   would match first.\n   While this behavior is what\
    \ most applications desire, it does come at\n   a cost.  Consider the following\
    \ KPML document snippet.\n     <regex>x{7}</regex>\n     <regex>x{10}</regex>\n\
    \                        Figure 2: Timeout Matching\n   Figure 2 shows a typical\
    \ North American dial plan.  From an\n   application perspective, users expect\
    \ a seven-digit number to respond\n   quickly, not waiting the typical inter-digit\
    \ critical timer (usually\n   four seconds).  Conversely, the user does not want\
    \ the system to cut\n   off their ten-digit number at seven digits because they\
    \ did not enter\n   the number fast enough.\n   One approach to this problem is\
    \ to have an explicit dial string\n   terminator.  Often, it is the pound key\
    \ (#).  Now, consider the\n   following snippet.\n   <regex>x{7}#</regex>\n  \
    \ <regex>x{10}#</regex>\n                   Figure 3: Timeout Matching with Enter\n\
    \   The problem with the approach in Figure 3 is that the \"#\" will appear\n\
    \   in the returned dial string.  Moreover, one often wants to allow the\n   user\
    \ to enter the string without the dial string termination key.  In\n   addition,\
    \ using explicit matching on the key means one has to double\n   the number of\
    \ patterns, e.g., \"x{7}\", \"x{7}#\", \"x{10}\", and \"x{10}#\".\n   The approach\
    \ used in KPML is to have an explicit \"Enter Key\", as\n   shown in the following\
    \ snippet.\n   <pattern enterkey=\"#\">\n     <regex>x{7}</regex>\n     <regex>x{10}</regex>\n\
    \   </pattern>\n                 Figure 4: Timeout Matching with Enter Key\n \
    \  In Figure 4, the enterkey attribute to the <pattern> tag specifies a\n   string\
    \ that terminates a pattern.  In this situation, if the user\n   enters seven\
    \ digits followed by the \"#\" key, the pattern matches (or\n   fails) immediately.\
    \  KPML indicates a terminated nomatch with a KPML\n   status code 402.\n    \
    \  NOTE: The enterkey is a string.  The enterkey can be a sequence of\n      key\
    \ presses, such as \"**\".\n   Some patterns look for long-duration key presses.\
    \  For example, some\n   applications look for long \"#\" or long \"*\".\n   KPML\
    \ uses the \"L\" modifier to <regex> characters to indicate long key\n   presses.\
    \  The following KPML document looks for a long pound of at\n   least 3 seconds.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <kpml-request xmlns=\"urn:ietf:params:xml:ns:kpml-request\"\
    \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\n\
    \           \"urn:ietf:params:xml:ns:kpml-request kpml-request.xsd\"\n       \
    \  version=\"1.0\">\n     <pattern long=\"3000\">\n       <regex>L#</regex>\n\
    \     </pattern>\n   </kpml-request>\n                                Long Pound\n\
    \   The request can specify what constitutes \"long\" by setting the long\n  \
    \ attribute to the <pattern>.  This attribute is an integer\n   representing the\
    \ number of milliseconds.  If the user presses a key\n   for longer than \"long\"\
    \ milliseconds, the Long modifier is true.  The\n   default length of the long\
    \ attribute is 2500 milliseconds.\n   User Interfaces MUST distinguish between\
    \ long and short input when\n   the KPML document specifies both in a document.\
    \  However, if there is\n   not a corresponding long key press pattern in a document,\
    \ the User\n   Interface MUST match the key press pattern irrespective of the\
    \ length\n   of time the user presses the key.\n   As an example, in the following\
    \ snippet in Figure 6, the User\n   Interface discriminates between a long \"\
    *\" and a normal \"*\", but any\n   length \"#\" will match the pattern.\n   <pattern>\n\
    \     <regex tag=\"short_star\">*</regex>\n     <regex tag=\"long_star\">L*</regex>\n\
    \     <regex>#</regex>\n   </pattern>\n                     Figure 6: Long and\
    \ Short Matching\n   Some User Interfaces are unable to present long key presses.\
    \  An\n   example is an old private branch exchange (PBX) phone set that emits\n\
    \   fixed-length tones when the user presses a key.  To address this\n   issue,\
    \ the User Interface MAY interpret a succession of presses of a\n   single key\
    \ to be equivalent to a long key press of the same key.  The\n   Application indicates\
    \ it wants this behavior by setting the\n   \"longrepeat\" attribute to the <pattern>\
    \ to \"true\".\n   The KPML document specifies if the patterns are to be persistent\
    \ by\n   setting the \"persist\" attribute to the <pattern> tag to \"persist\"\
    \ or\n   \"single-notify\".  Any other value, including \"one-shot\", indicates\n\
    \   the request is a one-shot subscription.  If the User Interface does\n   not\
    \ support persistent subscriptions, it returns a KPML document with\n   the KPML\
    \ status code set to 531.  If there are digits in the buffer\n   and the digits\
    \ match an expression in the KPML document, the User\n   Interface emits the appropriate\
    \ kpml notification.\n   Note the values of the \"persist\" attribute are case\
    \ sensitive.\n   Some User Interfaces may support multiple regular expressions\
    \ in a\n   given pattern request.  In this situation, the application may wish\n\
    \   to know which pattern triggered the event.\n   KPML provides a \"tag\" attribute\
    \ to the <regex> tag.  The \"tag\" is an\n   opaque string that the User Interface\
    \ sends back in the notification\n   report upon a match in the digit map.  In\
    \ the case of multiple\n   matches, the User Interface MUST choose the longest\
    \ match in the KPML\n   document.  If multiple matches match the same length,\
    \ the User\n   Interface MUST choose the first expression listed in the subscription\n\
    \   KPML document based on KPML document order.\n   If the User Interface cannot\
    \ support multiple regular expressions in\n   a pattern request, the User Interface\
    \ MUST return a KPML document\n   with the KPML status code set to 532.  If the\
    \ User Interface cannot\n   support the number of regular expressions in the pattern\
    \ request, the\n   User Interface MUST return a KPML document with the KPML status\
    \ code\n   set to 534.\n      NOTE: We could mandate a minimum number of regular\
    \ expressions\n      that a User Interface must support per subscription request\
    \ and\n      globally.  However, such minimums tend to become designed-in,\n \
    \     hard-coded limits.  For guidance, one should be able to easily\n      handle\
    \ tens of expressions per subscription and thousands\n      globally.  A good\
    \ implementation should have effectively no\n      limits.  That said, to counter\
    \ possible denial-of-service attacks,\n      implementers of User Interfaces should\
    \ be aware of the 534 and 501\n      status codes and feel free to use them.\n"
- title: 3.4.  Digit Suppression
  contents:
  - "3.4.  Digit Suppression\n   Under basic operation, a KPML User Interface will\
    \ transmit in-band\n   tones (RFC 2833 [10] or actual tone) in parallel with User\
    \ Input\n   reporting.\n      NOTE: If KPML did not have this behavior, then a\
    \ User Interface\n      executing KPML could easily break called applications.\
    \  For\n      example, take a personal assistant that uses \"*9\" for attention.\n\
    \      If the user presses the \"*\" key, KPML will hold the digit, looking\n\
    \      for the \"9\".  What if the user just enters a \"*\" key, possibly\n  \
    \    because they accessed an interactive voice response (IVR) system\n      that\
    \ looks for \"*\"?  In this case, the \"*\" would get held by the\n      User\
    \ Interface, because it is looking for the \"*9\" pattern.  The\n      user would\
    \ probably press the \"*\" key again, hoping that the\n      called IVR system\
    \ just did not hear the key press.  At that point,\n      the User Interface would\
    \ send both \"*\" entries, as \"**\" does not\n      match \"*9\".  However, that\
    \ would not have the effect the user\n      intended when they pressed \"*\".\n\
    \   On the other hand, there are situations where passing through tones\n   in-band\
    \ is not desirable.  Such situations include call centers that\n   use in-band\
    \ tone spills to initiate a transfer.\n   For those situations, KPML adds a suppression\
    \ tag, \"pre\", to the\n   <regex> tag.  There MUST NOT be more than one <pre>\
    \ tag in any given\n   <regex> tag.\n   If there is only a single <pattern> and\
    \ a single <regex>, suppression\n   processing is straightforward.  The end-point\
    \ passes User Input until\n   the stream matches the regular expression <pre>.\
    \  At that point, the\n   User Interface will continue collecting User Input,\
    \ but will suppress\n   the generation or pass-through of any in-band User Input.\n\
    \   If the User Interface suppressed stimulus, it MUST indicate this by\n   including\
    \ the attribute \"suppressed\" with a value of \"true\" in the\n   notification.\n\
    \   Clearly, if the User Interface is processing the KPML document\n   against\
    \ buffered User Input, it is too late to suppress the\n   transmission of the\
    \ User Input, as the User Interface has long sent\n   the stimulus.  This is a\
    \ situation where there is a <pre>\n   specification, but the \"suppressed\" attribute\
    \ will not be \"true\" in\n   the notification.  If there is a <pre> tag that\
    \ the User Interface\n   matched and the User Interface is unable to suppress\
    \ the User Input,\n   it MUST set the \"suppressed\" attribute to \"false\".\n\
    \   A KPML User Interface MAY perform suppression.  If it is not capable\n   of\
    \ suppression, it ignores the suppression attribute.  It MUST set\n   the \"suppressed\"\
    \ attribute to \"false\".  In this case, the pattern to\n   match is the concatenated\
    \ pattern of pre+value.\n   At some point in time, the User Interface will collect\
    \ enough User\n   Input to the point it matches a <pre> pattern.  The interdigittimer\n\
    \   attribute indicates how long to wait for the user to enter stimulus\n   before\
    \ reporting a time-out error.  If the interdigittimer expires,\n   the User Interface\
    \ MUST issue a time-out report, transmit the\n   suppressed User Input on the\
    \ media stream, and stop suppression.\n   Once the User Interface detects a match\
    \ and it sends a NOTIFY request\n   to report the User Input, the User Interface\
    \ MUST stop suppression.\n   Clearly, if subsequent User Input matches another\
    \ <pre> expression,\n   then the User Interface MUST start suppression.\n   After\
    \ suppression begins, it may become clear that a match will not\n   occur.  For\
    \ example, take the expression\n   <regex><pre>*8</pre>xxx[2-9]xxxxxx</regex>\n\
    \   At the point the User Interface receives \"*8\", it will stop\n   forwarding\
    \ stimulus.  Let us say that the next three digits are\n   \"408\".  If the next\
    \ digit is a zero or one, the pattern will not\n   match.\n      NOTE: It is critically\
    \ important for the User Interface to have a\n      sensible inter-digit timer.\
    \  This is because an errant dot (\".\")\n      may suppress digit sending forever.\n\
    \   Applications should be very careful to indicate suppression only when\n  \
    \ they are fairly sure the user will enter a digit string that will\n   match\
    \ the regular expression.  In addition, applications should deal\n   with situations\
    \ such as no-match or time-out.  This is because the\n   User Interface will hold\
    \ digits, which will have obvious User\n   Interface issues in the case of a failure.\n"
- title: 3.5.  User Input Buffer Behavior
  contents:
  - "3.5.  User Input Buffer Behavior\n   User Interfaces MUST buffer User Input upon\
    \ receipt of an\n   authenticated and accepted subscription.  Subsequent KPML\
    \ documents\n   apply their patterns against the buffered User Input.  Some\n\
    \   applications use modal interfaces where the first few key presses\n   determine\
    \ what the following key presses mean.  For a novice user,\n   the application\
    \ may play a prompt describing what mode the\n   application is in.  However,\
    \ \"power users\" often barge through the\n   prompt.\n   User Interfaces MUST\
    \ NOT provide a subscriber with digits that were\n   detected prior to the authentication\
    \ and authorization of that\n   subscriber.  Without prohibition, a subscriber\
    \ might be able to gain\n   access to calling card or other information that predated\
    \ the\n   subscriber's participation in the call.  Note that this prohibition\n\
    \   MUST be applied on a per-subscription basis.\n   KPML provides a <flush> tag\
    \ in the <pattern> element.  The default is\n   not to flush User Input.  Flushing\
    \ User Input has the effect of\n   ignoring key presses entered before the installation\
    \ of the KPML\n   subscription.  To flush User Input, include the tag\n   <flush>yes</flush>\
    \ in the KPML subscription document.  Note that this\n   directive affects only\
    \ the current subscription dialog/id\n   combination.\n   Lock-step processing\
    \ of User Input is where the User Interface issues\n   a notification, the Application\
    \ processes the notification while the\n   User Interface buffers additional User\
    \ Input, the Application\n   requests more User Input, and only then does the\
    \ User Interface\n   notify the Application based on the collected User Input.\
    \  To direct\n   the User Interface to operate in lock-step mode, set the <pattern>\n\
    \   attribute persist=\"single-notify\".\n   The User Interface MUST be able to\
    \ process <flush>no</flush>.  This\n   directive is effectively a no-op.\n   Other\
    \ string values for <flush> may be defined in the future.  If the\n   User Interface\
    \ receives a string it does not understand, it MUST\n   treat the string as a\
    \ no-op.\n   If the user presses a key that cannot match any pattern within a\n\
    \   <regex> tag, the User Interface MUST discard all buffered key presses\n  \
    \ up to and including the current key press from consideration against\n   the\
    \ current or future KPML documents on a given dialog.  However, as\n   described\
    \ above, once there is a match, the User Interface buffers\n   any key presses\
    \ the user entered subsequent to the match.\n      NOTE: This behavior allows\
    \ applications to receive only User Input\n      that is of interest to them.\
    \  For example, a pre-paid application\n      only wishes to monitor for a long\
    \ pound.  If the user enters other\n      stimulus, presumably for other applications,\
    \ the pre-paid\n      application does not want notification of that User Input.\
    \  This\n      feature is fundamentally different than the behavior of Time\n\
    \      Division Multiplexer (TDM)-based equipment where every application\n  \
    \    receives every key press.\n   To limit reports to only complete matches,\
    \ set the \"nopartial\"\n   attribute to the <pattern> tag to \"true\".  In this\
    \ case, the User\n   Interface attempts to match a rolling window over the collected\
    \ User\n   input.\n   KPML subscriptions are independent.  Thus, it is not possible\
    \ for the\n   current document to know if a following document will enable barging\n\
    \   or want User Input flushed.  Therefore, the User Interface MUST\n   buffer\
    \ all User Input, subject to the forced_flush caveat described\n   below.\n  \
    \ On a given SUBSCRIBE dialog with a given id, the User Interface MUST\n   buffer\
    \ all User Input detected between the time of the report and the\n   receipt of\
    \ the next document, if any.  If the next document indicates\n   a buffer flush,\
    \ then the interpreter MUST flush all collected User\n   Input from consideration\
    \ from KPML documents received on that dialog\n   with the given event id.  If\
    \ the next document does not indicate\n   flushing the buffered User Input, then\
    \ the interpreter MUST apply the\n   collected User Input (if possible) against\
    \ the digit maps presented\n   by the script's <regex> tags.  If there is a match,\
    \ the interpreter\n   MUST follow the procedures in Section 5.3.  If there is\
    \ no match, the\n   interpreter MUST flush all of the collected User Input.\n\
    \   Given the potential for needing an infinite buffer for User Input,\n   the\
    \ User Interface MAY discard the oldest User Input from the buffer.\n   If the\
    \ User Interface discards digits, when the User Interface issues\n   a KPML notification,\
    \ it MUST set the forced_flush attribute of the\n   <response> tag to \"true\"\
    .  For future use, the Application MUST\n   consider any non-null value, other\
    \ than \"false\", that it does not\n   understand to be the same as \"true\".\n\
    \      NOTE: The requirement to buffer all User Input for the entire\n      length\
    \ of the session is not onerous under normal operation.  For\n      example, if\
    \ one has a gateway with 8,000 sessions, and the gateway\n      buffers 50 key\
    \ presses on each session, the requirement is only\n      400,000 bytes, assuming\
    \ one byte per key press.\n   Unless there is a suppress indicator in the digit\
    \ map, it is not\n   possible to know if the User Input is for local KPML processing\
    \ or\n   for other recipients of the media stream.  Thus, in the absence of a\n\
    \   suppression indicator, the User Interface transmits the User Input to\n  \
    \ the far end in real time, using either RFC 2833, generating the\n   appropriate\
    \ tones, or both.\n"
- title: 3.6.  DRegex
  contents:
  - '3.6.  DRegex

    '
- title: 3.6.1.  Overview
  contents:
  - "3.6.1.  Overview\n   This subsection is informative in nature.\n   The Digit\
    \ REGular EXpression (DRegex) syntax is a telephony-oriented\n   mapping of POSIX\
    \ Extended Regular Expressions (ERE) [13].\n   KPML does not use full POSIX ERE\
    \ for the following reasons.\n   o  KPML will often run on high density or extremely\
    \ low power and\n      memory footprint devices.\n   o  Telephony application\
    \ convention uses the star symbol (\"*\") for\n      the star key and \"x\" for\
    \ any digit 0-9.  Requiring the developer\n      to escape the star (\"\\*\")\
    \ and expand the \"x\" (\"[0-9]\") is error\n      prone.  This also leads DRegex\
    \ to use the dot (\".\") to indicate\n      repetition, which was the function\
    \ of the unadorned star in POSIX\n      ERE.\n   o  Implementation experience\
    \ with MGCP [11] and H.248.1 [12] has been\n      that implementers and users\
    \ have a hard time understanding the\n      precedence of the alternation operator\
    \ (\"|\").  This is due both to\n      an under-specification of the operator\
    \ in those documents and\n      conceptual problems for users.  Thus, the SIPPING\
    \ Working Group\n      concluded that DRegex should not support alternation. \
    \ That said,\n      each KPML <pattern> element may contain multiple regular\n\
    \      expressions (<regex> elements).  Thus, it is straightforward to\n     \
    \ have pattern alternatives (use multiple <regex> elements) without\n      the\
    \ problems associated with the alternation operator (\"|\").\n      Thus, DRegex\
    \ does not support the POSIX alternation operator.\n   o  DRegex includes character\
    \ classes (characters enclosed in square\n      brackets).  However, the negation\
    \ operator inside a character\n      class only operates on numbers.  That is,\
    \ a negation class\n      implicitly includes A-D, *, and #.  Including A-D, *,\
    \ and # in a\n      negation operator is a no-op.  Those familiar with POSIX would\n\
    \      expect negation of the digits 4 and 5 (e.g., \"[^45]\") to include\n  \
    \    all other characters (including A-D, R, *, and #), while those\n      familiar\
    \ with telephony digit maps would expect negation to\n      implicitly exclude\
    \ non-digit characters.  Since the complete\n      character set of DRegex is\
    \ very small, constructing a negation\n      class using A-D, R, *, and # requires\
    \ the user to specify the\n      positive inverse mapping.  For example, to specify\
    \ all key\n      presses, including A-D and *, except #, the specification would\
    \ be\n      \"[0-9A-D*]\" instead of \"[^#R]\".\n   The following table shows\
    \ the mapping from DRegex to POSIX ERE.\n                          +--------+-----------+\n\
    \                          | DRegex | POSIX ERE |\n                          +--------+-----------+\n\
    \                          | *      | \\*        |\n                         \
    \ | .      | *         |\n                          | x      | [0-9]     |\n \
    \                         | [xc]   | [0-9c]    |\n                          +--------+-----------+\n\
    \                   Table 1: DRegex to POSIX ERE Mapping\n   The first substitution,\
    \ which replaces a star for an escaped star, is\n   because telephony application\
    \ designers are used to using the star\n   for the (very common) star key.  Requiring\
    \ an escape sequence for\n   this common pattern would be error prone.  In addition,\
    \ the usage\n   found in DRegex is the same as found in MGCP [11] and H.248.1\
    \ [12].\n   Likewise, the use of the dot instead of star is common usage from\n\
    \   MGCP and H.248.1, and reusing the star in this context would also be\n   confusing\
    \ and error prone.\n   The \"x\" character is a common indicator of the digits\
    \ 0 through 9.\n   We use it here, continuing the convention.  Clearly, for the\
    \ case\n   \"[xc]\", where c is any character, the substitution is not a blind\n\
    \   replacement of \"[0-9]\" for \"x\", as that would result in \"[[0-9]c]\",\n\
    \   which is not a legal POSIX ERE.  Rather, the substitution for \"[xc]\"\n \
    \  is \"[0-9c]\".\n      NOTE: \"x\" does not include the characters *, #, R,\
    \ or A through D.\n   Users need to take care not to confuse the DRegex syntax\
    \ with POSIX\n   EREs.  They are NOT identical.  In particular, there are many\n\
    \   features of POSIX EREs that DRegex does not support.\n   As an implementation\
    \ note, if one makes the substitutions described\n   in the above table, then\
    \ a standard POSIX ERE engine can parse the\n   digit string.  However, the mapping\
    \ does not work in the reverse\n   (POSIX ERE to DRegex) direction.  DRegex only\
    \ implements the\n   normative behavior described below.\n"
- title: 3.6.2.  Operation
  contents:
  - "3.6.2.  Operation\n   White space is removed before parsing DRegex.  This enables\
    \ sensible\n   pretty printing in XML without affecting the meaning of the DRegex\n\
    \   string.\n   The following rules demonstrate the use of DRegex in KPML.\n \
    \  +---------+---------------------------------------------------------+\n   |\
    \ Entity  | Matches                                                 |\n   +---------+---------------------------------------------------------+\n\
    \   | c       | digits 0-9, *, #, R, and A-D (case insensitive)         |\n  \
    \ | *       | the * character                                         |\n   |\
    \ #       | the # character                                         |\n   | R\
    \       | The R (Register Recall) key                             |\n   | [c]\
    \     | Any character in selector                               |\n   | [^d] \
    \   | Any digit (0-9) not in selector                         |\n   | [r1-r2]\
    \ | Any character in range from r1 to r2, inclusive         |\n   | x       |\
    \ Any digit 0-9                                           |\n   | {m}     | m\
    \ repetitions of previous pattern                       |\n   | {m,}    | m or\
    \ more repetitions of previous pattern               |\n   | {,n}    | At most\
    \ n (including zero) repetitions of previous      |\n   |         | pattern  \
    \                                               |\n   | {m,n}   | At least m and\
    \ at most n repetitions of previous        |\n   |         | pattern         \
    \                                        |\n   | Lc      | Match the character\
    \ c if it is \"long\"; c is a digit 0-9 |\n   |         | and A-D, #, or *.  \
    \                                     |\n   +---------+---------------------------------------------------------+\n\
    \                              DRegex Entities\n   For ranges, the A-D characters\
    \ are disjoint from the 0-9 characters.\n   If the device does not have an \"\
    R\" key, the device MAY report a hook\n   flash as an R character.\n       +--------------+--------------------------------------------+\n\
    \       | Example      | Description                                |\n      \
    \ +--------------+--------------------------------------------+\n       | 1  \
    \          | Matches the digit 1                        |\n       | [179]    \
    \    | Matches 1, 7, or 9                         |\n       | [2-9]        | Matches\
    \ 2, 3, 4, 5, 6, 7, 8, 9             |\n       | [^15]        | Matches 0, 2,\
    \ 3, 4, 6, 7, 8, 9             |\n       | [02-46-9A-D] | Matches 0, 2, 3, 4,\
    \ 6, 7, 8, 9, A, B, C, D |\n       | x            | Matches 0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9       |\n       | *6[179#]     | Matches *61, *67, *69, or *6#  \
    \            |\n       | x{10}        | Ten digits (0-9)                     \
    \      |\n       | 011x{7,15}   | 011 followed by seven to fifteen digits    |\n\
    \       | L*           | Long star                                  |\n      \
    \ +--------------+--------------------------------------------+\n            \
    \                  DRegex Examples\n"
- title: 3.7.  Monitoring Direction
  contents:
  - "3.7.  Monitoring Direction\n   SIP identifies dialogs by their dialog identifier.\
    \  The dialog\n   identifier is the remote-tag, local-tag, and Call-ID entities\
    \ defined\n   in RFC 3261 [4].\n   One method of determining the dialog identifier,\
    \ particularly for\n   third-party applications, is the SIP Dialog Package [17].\n\
    \   For most situations, such as a monaural point-to-point call with a\n   single\
    \ codec, the stream to monitor is obvious.  In such situations\n   the Application\
    \ need not specify which stream to monitor.\n   But there may be ambiguity in\
    \ specifying only the SIP dialog to\n   monitor.  The dialog may specify multiple\
    \ SDP streams that could\n   carry key press events.  For example, a dialog may\
    \ have multiple\n   audio streams.  Wherever possible, the User Interface MAY\
    \ apply local\n   policy to disambiguate which stream or streams to monitor. \
    \ In order\n   to have an extensible mechanism for identifying streams, the\n\
    \   mechanism for specifying streams is as an element content to the\n   <stream>\
    \ tag.  The only content defined today is the\n   <stream>reverse</stream> tag.\n\
    \   By default, the User Interface monitors key presses emanating from\n   the\
    \ User Interface.  Given a dialog identifier of Call-ID, local-tag,\n   and remote-tag,\
    \ the User Interface monitors the key presses\n   associated with the local-tag.\n\
    \   In the media proxy case, and potentially other cases, there is a need\n  \
    \ to monitor the key presses arriving from the remote user agent.  The\n   optional\
    \ <stream> element to the <request> tag specifies which stream\n   to monitor.\
    \  The only legal value is \"reverse\", which means to\n   monitor the stream\
    \ associated with the remote-tag.  The User\n   Interface MUST ignore other values.\n\
    \      NOTE: The reason this is a tag is so individual stream selection,\n   \
    \   if needed, can be addressed in a backwards-compatible way.\n      Further\
    \ specification of the stream to monitor is the subject of\n      future standardization.\n"
- title: 3.8.  Multiple Simultaneous Subscriptions
  contents:
  - "3.8.  Multiple Simultaneous Subscriptions\n   An Application MAY register multiple\
    \ User Input patterns in a single\n   KPML subscription.  If the User Interface\
    \ supports multiple,\n   simultaneous KPML subscriptions, the Application installs\
    \ the\n   subscriptions either in a new SUBSCRIBE-initiated dialog or on an\n\
    \   existing SUBSCRIBE-initiated dialog with a new event id tag.  If the\n   User\
    \ Interface does not support multiple, simultaneous KPML\n   subscriptions, the\
    \ User Interface MUST respond with an appropriate\n   KPML status code.\n   Some\
    \ User Interfaces may support multiple key press event\n   notification subscriptions\
    \ at the same time.  In this situation, the\n   User Interface honors each subscription\
    \ individually and\n   independently.\n   A SIP user agent may request multiple\
    \ subscriptions on the same\n   SUBSCRIBE dialog, using the id parameter to the\
    \ kpml event request.\n   One or more SIP user agents may request independent\
    \ subscriptions on\n   different SIP dialogs, although reusing the same dialog\
    \ for multiple\n   subscriptions is NOT RECOMMENDED.\n   If the User Interface\
    \ does not support multiple, simultaneous\n   subscriptions, the User Interface\
    \ MUST return a KPML document with\n   the KPML status code set to 533 on the\
    \ dialog that requested the\n   second subscription.  The User Interface MUST\
    \ NOT modify the state of\n   the first subscription on account of the second\
    \ subscription attempt.\n"
- title: 4.  Event Package Formal Definition
  contents:
  - '4.  Event Package Formal Definition

    '
- title: 4.1.  Event Package Name
  contents:
  - "4.1.  Event Package Name\n   This document defines a SIP Event Package as defined\
    \ in RFC 3265 [5].\n   The event-package token name for this package is:\n   \
    \        \"kpml\"\n"
- title: 4.2.  Event Package Parameters
  contents:
  - "4.2.  Event Package Parameters\n   This package defines three Event Package parameters:\
    \ call-id, remote-\n   tag, and local-tag.  These parameters MUST be present,\
    \ to identify\n   the subscription dialog.  The User Interface matches the local-tag\n\
    \   against the to tag, the remote-tag against the from tag, and the\n   call-id\
    \ against the Call-ID.\n   The ABNF for these parameters is below.  It refers\
    \ to many\n   constructions from the ABNF of RFC 3261, such as EQUAL, DQUOTE,\
    \ and\n   token.\n   call-id     =  \"call-id\" EQUAL ( token / DQUOTE callid\
    \ DQUOTE )\n                    ;; NOTE: any DQUOTEs inside callid MUST be escaped!\n\
    \   remote-tag  =  \"remote-tag\" EQUAL token\n   local-tag   =  \"local-tag\"\
    \ EQUAL token\n   If any call-ids contain embedded double-quotes, those double-quotes\n\
    \   MUST be escaped using the backslash-quoting mechanism.  Note that the\n  \
    \ call-id parameter may need to be expressed as a quoted string.  This\n   is\
    \ because the ABNF for the callid production and the word\n   production, which\
    \ is used by callid (both from RFC 3261 [1]), allow\n   some characters (such\
    \ as \"@\", \"[\", and \":\") that are not allowed\n   within a token.\n"
- title: 4.3.  SUBSCRIBE Bodies
  contents:
  - "4.3.  SUBSCRIBE Bodies\n   Applications using this event package include an application/\n\
    \   kpml-request+xml body in SUBSCRIBE requests to indicate which digit\n   patterns\
    \ they are interested in.  The syntax of this body type is\n   formally described\
    \ in Section 5.2.\n"
- title: 4.4.  Subscription Duration
  contents:
  - "4.4.  Subscription Duration\n   The subscription lifetime should be longer than\
    \ the expected call\n   time.  Subscriptions to this event package MAY range from\
    \ minutes to\n   weeks.  Subscriptions in hours or days are more typical and are\n\
    \   RECOMMENDED.  The default subscription duration for this event\n   package\
    \ is 7200 seconds.\n      Subscribers MUST be able to handle the User Interface\
    \ returning an\n      Expires value smaller than the requested value.  Per RFC\
    \ 3265 [5],\n      the subscription duration is the value returned by the Notifier\
    \ in\n      the 200 OK Expires header.\n"
- title: 4.5.  NOTIFY Bodies
  contents:
  - "4.5.  NOTIFY Bodies\n   NOTIFY requests can contain application/kpml-response+xml\
    \ (KPML\n   Response) bodies.  The syntax of this body type is formally described\n\
    \   in Section 5.3.  NOTIFY requests in immediate response to a SUBSCRIBE\n  \
    \ request MUST NOT contain a body unless they are notifying the\n   subscriber\
    \ of an error condition or previously buffered digits.\n   Notifiers MAY send\
    \ notifications with any format acceptable to the\n   subscriber (based on the\
    \ subscriber's inclusion of these formats in\n   an Accept header).  A future\
    \ extension MAY define other NOTIFY\n   bodies.  If no \"Accept\" header is present\
    \ in the SUBSCRIBE, the body\n   type defined in this document MUST be assumed.\n"
- title: 4.6.  Subscriber Generation of SUBSCRIBE Requests
  contents:
  - "4.6.  Subscriber Generation of SUBSCRIBE Requests\n   A kpml request document\
    \ contains a <pattern> element with a series of\n   <regex> tags.  Each <regex>\
    \ element specifies a potential pattern for\n   the User Interface to match. \
    \ Section 5.1 describes the DRegex, or\n   digit regular expression, language.\n\
    \   KPML specifies key press event notification filters.  The MIME type\n   for\
    \ KPML requests is application/kpml-request+xml.\n   The KPML request document\
    \ MUST be well formed and SHOULD be valid.\n   KPML documents MUST conform to\
    \ XML 1.0 [14] and MUST use UTF-8\n   encoding.\n   Because of the potentially\
    \ sensitive nature of the information\n   reported by KPML, subscribers SHOULD\
    \ use sips: and MAY use S/MIME on\n   the content.\n   Subscribers MUST be prepared\
    \ for the notifier to insist on\n   authentication of the subscription request.\
    \  Subscribers MUST be\n   prepared for the notifier to insist on using a secure\
    \ communication\n   channel.\n"
- title: 4.7.  Notifier Processing of SUBSCRIBE Requests
  contents:
  - "4.7.  Notifier Processing of SUBSCRIBE Requests\n   The user information transported\
    \ by KPML is potentially sensitive.\n   For example, it could include calling\
    \ card or credit card numbers.\n   Thus the User Interface (notifier) MUST authenticate\
    \ the requesting\n   party in some way before accepting the subscription.\n  \
    \ User Interfaces MUST implement SIP Digest authentication as required\n   by\
    \ RFC 3261 [4] and MUST implement the sips: scheme and TLS.\n   Upon authenticating\
    \ the requesting party, the User Interface\n   determines if the requesting party\
    \ has authorization to monitor the\n   user's key presses.  The default authorization\
    \ policy is to allow a\n   KPML subscriber who can authenticate with a specific\
    \ identity to\n   monitor key presses from SIP sessions in which the same or equivalent\n\
    \   authenticated identity is a participant.  In addition, KPML will\n   often\
    \ be used, for example, between \"application servers\"\n   (subscribers) and\
    \ PSTN gateways (notifiers) operated by the same\n   domain or federation of domains.\
    \  In this situation a notifier MAY be\n   configured with a list of subscribers\
    \ which are specifically trusted\n   and authorized to subscribe to key press\
    \ information related to all\n   sessions in a particular context.\n   The User\
    \ Interface returns a Contact URI that may have GRUU [9]\n   properties in the\
    \ Contact header of a SIP INVITE, 1xx, or 2xx\n   response.\n   After authorizing\
    \ the request, the User Interface checks to see if\n   the request is to terminate\
    \ a subscription.  If the request will\n   terminate the subscription, the User\
    \ Interface does the appropriate\n   processing, including the procedures described\
    \ in Section 5.2.\n   If the request has no KPML body, then any KPML document\
    \ running on\n   that dialog and addressed by the event id, if present, immediately\n\
    \   terminates.  This is a mechanism for unloading a KPML document while\n   keeping\
    \ the SUBSCRIBE-initiated dialog active.  This can be important\n   for secure\
    \ sessions that have high costs for session establishment.\n   The User Interface\
    \ follows the procedures described in Section 5.2.\n   If the dialog referenced\
    \ by the kpml subscription does not exist, the\n   User Interface follows the\
    \ procedures in Section 5.3.  Note the User\n   Interface MUST issue a 200 OK\
    \ to the SUBSCRIBE request before issuing\n   the NOTIFY, as the SUBSCRIBE itself\
    \ is well formed.\n   If the request has a KPML body, the User Interface parses\
    \ the KPML\n   document.  The User Interface SHOULD validate the XML document\n\
    \   against the schema presented in Section 5.2.  If the document is not\n   valid,\
    \ the User Interface rejects the SUBSCRIBE request with an\n   appropriate error\
    \ response and terminates the subscription.  If there\n   is a loaded KPML document\
    \ on the subscription, the User Interface\n   unloads the document.\n   In addition,\
    \ if there is a loaded KPML document on the subscription,\n   the end device unloads\
    \ the document.\n   Following the semantics of SUBSCRIBE, if the User Interface\
    \ receives\n   a resubscription, the User Interface MUST terminate the existing\
    \ KPML\n   request and replace it with the new request.\n   It is possible for\
    \ the INVITE usage of the dialog to terminate during\n   key press collection.\
    \  The cases enumerated here are explicit\n   subscription termination, automatic\
    \ subscription termination, and\n   underlying (INVITE-initiated) dialog termination.\n\
    \   If a SUBSCRIBE request has an expires of zero (explicit SUBSCRIBE\n   termination),\
    \ includes a KPML document, and there is buffered User\n   Input, then the User\
    \ Interface attempts to process the buffered\n   digits against the document.\
    \  If there is a match, the User Interface\n   MUST generate the appropriate KPML\
    \ report with the KPML status code\n   of 200.  The SIP NOTIFY body terminates\
    \ the subscription by setting\n   the subscription state to \"terminated\" and\
    \ a reason of \"timeout\".\n   If the SUBSCRIBE request has an expires of zero\
    \ and no KPML body or\n   the expires timer on the SUBSCRIBE-initiated dialog\
    \ fires at the User\n   Interface (notifier), then the User Interface MUST issue\
    \ a KPML\n   report with the KPML status code 487, Subscription Expired.  The\n\
    \   report also includes the User Input collected up to the time the\n   expires\
    \ timer expired or when the subscription with expires equal to\n   zero was processed.\
    \  This could be the null string.\n   Per the mechanisms of RFC 3265 [5], the\
    \ User Interface MUST terminate\n   the SIP SUBSCRIBE dialog.  The User Interface\
    \ does this via the SIP\n   NOTIFY body transporting the final report described\
    \ in the preceding\n   paragraph.  In particular, the subscription state will\
    \ be\n   \"terminated\" and a reason of \"timeout\".\n   Terminating the subscription\
    \ when a dialog terminates ensures\n   reauthorization (if necessary) for attaching\
    \ to subsequent\n   subscriptions.\n   If a SUBSCRIBE request references a dialog\
    \ that is not present at the\n   User Interface, the User Interface MUST generate\
    \ a KPML report with\n   the KPML status code 481, Dialog Not Found.  The User\
    \ Interface\n   terminates the subscription by setting the subscription state\
    \ to\n   \"terminated\".\n   If the KPML document is not valid, the User Interface\
    \ generates a\n   KPML report with the KPML status code 501, Bad Document.  The\
    \ User\n   Interface terminates the subscription by setting the subscription\n\
    \   state to \"terminated\".\n   If the document is valid but the User Interface\
    \ does not support a\n   namespace in the document, the User Interface MUST respond\
    \ with a\n   KPML status code 502, Namespace Not Supported.\n"
- title: 4.8.  Notifier Generation of NOTIFY Requests
  contents:
  - "4.8.  Notifier Generation of NOTIFY Requests\n   Immediately after a subscription\
    \ is accepted, the Notifier MUST send\n   a NOTIFY with the current location information\
    \ as appropriate based\n   on the identity of the subscriber.  This allows the\
    \ Subscriber to\n   resynchronize its state.\n   The User Interface (notifier\
    \ in SUBSCRIBE/NOTIFY parlance) generates\n   NOTIFY requests based on the requirements\
    \ of RFC 3265 [5].\n   Specifically, if a SUBSCRIBE request is valid and authorized,\
    \ it will\n   result in an immediate NOTIFY.\n   The KPML payload distinguishes\
    \ between an initial NOTIFY and a NOTIFY\n   informing of key presses.  If there\
    \ is no User Input buffered at the\n   time of the SUBSCRIBE (see below) or the\
    \ buffered User Input does not\n   match the new KPML document, then the immediate\
    \ NOTIFY MUST NOT\n   contain a KPML body.  If User Interface has User Input buffered\
    \ that\n   results in a match using the new KPML document, then the NOTIFY MUST\n\
    \   return the appropriate KPML document.\n   The NOTIFY in response to a SUBSCRIBE\
    \ request has no KPML if there\n   are no matching buffered digits.  An example\
    \ of this is in Figure 10.\n   If there are buffered digits in the SUBSCRIBE request\
    \ that match a\n   pattern, then the NOTIFY message in response to the SUBSCRIBE\
    \ request\n   MUST include the appropriate KPML document.\n   NOTIFY sip:application@example.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP proxy.example.com\n   Max-Forwards: 70\n   To:\
    \ <sip:application@example.com>\n   From: <sip:endpoint@example.net>\n   Call-Id:\
    \ 439hu409h4h09903fj0ioij\n   Subscription-State: active; expires=7200\n   CSeq:\
    \ 49851 NOTIFY\n   Event: kpml\n                    Figure 10: Immediate NOTIFY\
    \ Example\n   All subscriptions MUST be authenticated, particularly those that\n\
    \   match on buffered input.\n   KPML specifies the key press notification report\
    \ format.  The MIME\n   type for KPML reports is application/kpml-response+xml.\
    \  The default\n   MIME type for the kpml event package is application/\n   kpml-response+xml.\n\
    \   If the requestor is not using a secure transport protocol such as TLS\n  \
    \ for every hop (e.g., by using a sips: URI), the User Interface SHOULD\n   use\
    \ S/MIME to protect the user information in responses.\n   When the user enters\
    \ key presses that match a <regex> tag, the User\n   Interface will issue a report.\n\
    \   After reporting, the interpreter terminates the KPML session unless\n   the\
    \ subscription has a persistence indicator.  If the subscription\n   does not\
    \ have a persistence indicator, the User Interface MUST set\n   the state of the\
    \ subscription to \"terminated\" in the NOTIFY report.\n   If the subscription\
    \ does not have a persistence indicator, to collect\n   more digits, the requestor\
    \ must issue a new request.\n      NOTE: This highlights the \"one shot\" nature\
    \ of KPML, reflecting\n      the balance of features and ease of implementing\
    \ an interpreter.\n   KPML reports have two mandatory attributes, code and text.\
    \  These\n   attributes describe the state of the KPML interpreter on the User\n\
    \   Interface.  Note the KPML status code is not necessarily related to\n   the\
    \ SIP result code.  An important example of this is where a legal\n   SIP subscription\
    \ request gets a normal SIP 200 OK followed by a\n   NOTIFY, but there is something\
    \ wrong with the KPML request.  In this\n   case, the NOTIFY would include the\
    \ KPML status code in the KPML\n   report.  Note that from a SIP perspective,\
    \ the SUBSCRIBE and NOTIFY\n   were successful.  Also, if the KPML failure is\
    \ not recoverable, the\n   User Interface will most likely set the Subscription-State\
    \ to\n   \"terminated\".  This lets the SIP machinery know the subscription is\n\
    \   no longer active.\n   If a pattern matches, the User Interface will emit a\
    \ KPML report.\n   Since this is a success report, the code is \"200\", and the\
    \ text is\n   \"OK\".\n   The KPML report includes the actual digits matched in\
    \ the digit\n   attribute.  The digit string uses the conventional characters\
    \ '*' and\n   '#' for star and octothorpe, respectively.  The KPML report also\n\
    \   includes the tag attribute if the regex that matched the digits had a\n  \
    \ tag attribute.\n   If the subscription requested digit suppression and the User\n\
    \   Interface suppressed digits, the suppressed attribute indicates\n   \"true\"\
    .  The default value of suppressed is \"false\".\n      NOTE: KPML does not include\
    \ a timestamp.  There are a number of\n      reasons for this.  First, what timestamp\
    \ would it include?  Would\n      it be the time of the first detected key press?\
    \  The time the\n      interpreter collected the entire string?  A range?  Second,\
    \ if the\n      RTP timestamp is a datum of interest, why not simply get RTP in\n\
    \      the first place?  That all said, if it is really compelling to\n      have\
    \ the timestamp in the response, it could be an attribute to\n      the <response>\
    \ tag.\n   Note that if the monitored (INVITE-initiated) dialog terminates, the\n\
    \   notifier still MUST explicitly terminate the KPML subscriptions\n   monitoring\
    \ that dialog.\n"
- title: 4.9.  Subscriber Processing of NOTIFY Requests
  contents:
  - "4.9.  Subscriber Processing of NOTIFY Requests\n   If there is no KPML body,\
    \ it means the SUBSCRIBE was successful.\n   This establishes the dialog if there\
    \ is no buffered User Input to\n   report.\n   If there is a KPML document, and\
    \ the KPML status code is 200, then a\n   match occurred.\n   If there is a KPML\
    \ document, and the KPML status code is between 400\n   and 499, then an error\
    \ occurred with User Input collection.  The most\n   likely cause is a timeout\
    \ condition.\n   If there is a KPML document, and the KPML status code is between\
    \ 500\n   and 599, then an error occurred with the subscription.  See Section\
    \ 6\n   for more on the meaning of KPML status codes.\n   The subscriber MUST\
    \ be mindful of the subscription state.  The User\n   Interface may terminate\
    \ the subscription at any time.\n"
- title: 4.10.  Handling of Forked Requests
  contents:
  - "4.10.  Handling of Forked Requests\n   Forked requests are NOT ALLOWED for this\
    \ event type.  This can be\n   ensured if the Subscriptions to this event package\
    \ are sent to SIP\n   URIs that have GRUU properties.\n"
- title: 4.11.  Rate of Notifications
  contents:
  - "4.11.  Rate of Notifications\n   The User Interface MUST NOT generate messages\
    \ faster than 25 messages\n   per second, or one message every 40 milliseconds.\
    \  This is the\n   minimum time period for MF digit spills.  Even 30-millisecond\
    \ DTMF,\n   as one sometimes finds in Japan, has a 20-millisecond off time,\n\
    \   resulting in a 50-millisecond interdigit time.  This document\n   strongly\
    \ RECOMMENDS AGAINST using KPML for digit-by-digit messaging,\n   such as would\
    \ be the case if the only <regex> is \"x\".\n   The sustained rate of notification\
    \ shall be no more than 100 Notifies\n   per minute.\n   The User Interface MUST\
    \ reliably deliver notifications.  Because\n   there is no meaningful metric for\
    \ throttling requests, the User\n   Interface SHOULD send NOTIFY messages over\
    \ a congestion-controlled\n   transport, such as TCP.\n      Note that all SIP\
    \ implementations are already required to\n      implement SIP over TCP.\n"
- title: 4.12.  State Agents and Lists
  contents:
  - "4.12.  State Agents and Lists\n   KPML requests are sent to a specific SIP URI,\
    \ which may have GRUU\n   properties, and they attempt to monitor a specific stream\
    \ that\n   corresponds with a specific target dialog.  Consequently,\n   implementers\
    \ MUST NOT define state agents for this event package or\n   allow subscriptions\
    \ for this event package to resource lists using\n   the event list extension\
    \ [18].\n"
- title: 4.13.  Behavior of a Proxy Server
  contents:
  - "4.13.  Behavior of a Proxy Server\n   There are no additional requirements on\
    \ a SIP Proxy, other than to\n   transparently forward the SUBSCRIBE and NOTIFY\
    \ methods as required in\n   SIP.\n"
- title: 5.  Formal Syntax
  contents:
  - '5.  Formal Syntax

    '
- title: 5.1.  DRegex
  contents:
  - "5.1.  DRegex\n   The following definition follows RFC 4234 [2].  The definition\
    \ of\n   DIGIT is from RFC 4234, namely, the characters \"0\" through \"9\". \
    \ Note\n   the DRegexCharacter is not a HEXDIG from RFC 4234.  In particular,\n\
    \   DRegexCharacter includes neither \"E\" nor \"F\".  Note that\n   DRegexCharacter\
    \ is case insensitive.\n   DRegex           = 1*( DRegexPosition [ RepeatCount\
    \ ] )\n   DRegexPosition   = DRegexSymbol / DRegexSet\n   DRegexSymbol     = [\
    \ \"L\" ] DRegexCharacter\n   DRegexSet        = \"[\" 1*DRegexSetList \"]\"\n\
    \   DRegexSetList    = DRegexCharacter [ \"-\" DRegexCharacter ]\n   DRegexCharacter\
    \  = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"R\" / \"*\" / \"#\" /\n       \
    \                     \"a\" / \"b\" / \"c\" / \"d\" / \"r\"\n   RepeatCount  \
    \    = \".\" / \"{\" RepeatRange \"}\"\n   RepeatRange      = Count / ( Count\
    \ \",\" Count ) /\n                              ( Count \",\" ) / ( \",\" Count\
    \ )\n   Count            = 1*DIGIT\n                              ABNF for DRegex\n\
    \   Note that future extensions to this document may introduce other\n   characters\
    \ for DRegexCharacter, in the scheme of H.248.1 [12] or\n   possibly as named\
    \ strings or XML namespaces.\n"
- title: 5.2.  KPML Request
  contents:
  - "5.2.  KPML Request\n   The following syntax for KPML requests uses the XML Schema\
    \ [8].\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema targetNamespace=\"\
    urn:ietf:params:xml:ns:kpml-request\"\n    xmlns=\"urn:ietf:params:xml:ns:kpml-request\"\
    \n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n    elementFormDefault=\"\
    qualified\"\n    attributeFormDefault=\"unqualified\">\n     <xs:element name=\"\
    kpml-request\">\n       <xs:annotation>\n         <xs:documentation>IETF Keypad\
    \ Markup Language Request\n         </xs:documentation>\n       </xs:annotation>\n\
    \       <xs:complexType>\n         <xs:sequence>\n           <xs:element name=\"\
    stream\" minOccurs=\"0\">\n             <xs:complexType>\n               <xs:choice>\n\
    \                 <xs:element name=\"reverse\" minOccurs=\"0\"/>\n           \
    \      <xs:any namespace=\"##other\"/>\n               </xs:choice>\n        \
    \     </xs:complexType>\n           </xs:element>\n           <xs:element name=\"\
    pattern\">\n             <xs:complexType>\n               <xs:sequence>\n    \
    \             <xs:element name=\"flush\" minOccurs=\"0\">\n                  \
    \ <xs:annotation>\n                     <xs:documentation>\n                 \
    \      Default is to not flush buffer\n                     </xs:documentation>\n\
    \                   </xs:annotation>\n                   <xs:complexType>\n  \
    \                   <xs:simpleContent>\n                       <xs:extension base=\"\
    xs:string\"/>\n                     </xs:simpleContent>\n                   </xs:complexType>\n\
    \                 </xs:element>\n                 <xs:element name=\"regex\" maxOccurs=\"\
    unbounded\">\n                   <xs:annotation>\n                     <xs:documentation>\n\
    \                       Key press notation is a string to allow\n            \
    \           for future extension of non-16 digit\n                       keypads\
    \ or named keys\n                     </xs:documentation>\n                  \
    \ </xs:annotation>\n                   <xs:complexType mixed=\"true\">\n     \
    \                <xs:choice>\n                       <xs:element name=\"pre\"\
    \ minOccurs=\"0\">\n                         <xs:complexType>\n              \
    \             <xs:simpleContent>\n                             <xs:extension base=\"\
    xs:string\"/>\n                           </xs:simpleContent>\n              \
    \           </xs:complexType>\n                       </xs:element>\n        \
    \               <xs:any namespace=\"##other\"/>\n                     </xs:choice>\n\
    \                     <xs:attribute name=\"tag\" type=\"xs:string\"\n        \
    \                           use=\"optional\"/>\n                   </xs:complexType>\n\
    \                 </xs:element>\n               </xs:sequence>\n             \
    \  <xs:attribute name=\"persist\" use=\"optional\">\n                 <xs:annotation>\n\
    \                   <xs:documentation>Default is \"one-shot\"\n              \
    \     </xs:documentation>\n                 </xs:annotation>\n               \
    \  <xs:simpleType>\n                   <xs:restriction base=\"xs:string\">\n \
    \                    <xs:enumeration value=\"one-shot\"/>\n                  \
    \   <xs:enumeration value=\"persist\"/>\n                     <xs:enumeration\
    \ value=\"single-notify\"/>\n                   </xs:restriction>\n          \
    \       </xs:simpleType>\n               </xs:attribute>\n               <xs:attribute\
    \ name=\"interdigittimer\"\n                             type=\"xs:integer\"\n\
    \                             use=\"optional\">\n                 <xs:annotation>\n\
    \                   <xs:documentation>Default is 4000 (ms)\n                 \
    \  </xs:documentation>\n                 </xs:annotation>\n               </xs:attribute>\n\
    \               <xs:attribute name=\"criticaldigittimer\"\n                  \
    \           type=\"xs:integer\"\n                             use=\"optional\"\
    >\n                 <xs:annotation>\n                   <xs:documentation>Default\
    \ is 1000 (ms)\n                   </xs:documentation>\n                 </xs:annotation>\n\
    \               </xs:attribute>\n               <xs:attribute name=\"extradigittimer\"\
    \n                             type=\"xs:integer\"\n                         \
    \    use=\"optional\">\n                 <xs:annotation>\n                   <xs:documentation>Default\
    \ is 500 (ms)\n                   </xs:documentation>\n                 </xs:annotation>\n\
    \               </xs:attribute>\n               <xs:attribute name=\"long\" type=\"\
    xs:integer\"\n                             use=\"optional\"/>\n              \
    \ <xs:attribute name=\"longrepeat\" type=\"xs:boolean\"\n                    \
    \         use=\"optional\"/>\n               <xs:attribute name=\"nopartial\"\
    \ type=\"xs:boolean\"\n                             use=\"optional\">\n      \
    \           <xs:annotation>\n                   <xs:documentation>Default is false\n\
    \                   </xs:documentation>\n                 </xs:annotation>\n \
    \              </xs:attribute>\n               <xs:attribute name=\"enterkey\"\
    \ type=\"xs:string\"\n                             use=\"optional\">\n       \
    \          <xs:annotation>\n                   <xs:documentation>No default enterkey\n\
    \                   </xs:documentation>\n                 </xs:annotation>\n \
    \              </xs:attribute>\n             </xs:complexType>\n           </xs:element>\n\
    \         </xs:sequence>\n         <xs:attribute name=\"version\" type=\"xs:string\"\
    \n                       use=\"required\"/>\n       </xs:complexType>\n     </xs:element>\n\
    \   </xs:schema>\n                  Figure 12: XML Schema for KPML Requests\n"
- title: 5.3.  KPML Response
  contents:
  - "5.3.  KPML Response\n   The following syntax for KPML responses uses the XML\
    \ Schema [8].\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema targetNamespace=\"\
    urn:ietf:params:xml:ns:kpml-response\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    \n    xmlns=\"urn:ietf:params:xml:ns:kpml-response\"\n    elementFormDefault=\"\
    qualified\"\n    attributeFormDefault=\"unqualified\">\n     <xs:element name=\"\
    kpml-response\">\n       <xs:annotation>\n         <xs:documentation>IETF Keypad\
    \ Markup Language Response\n         </xs:documentation>\n       </xs:annotation>\n\
    \       <xs:complexType>\n         <xs:attribute name=\"version\" type=\"xs:string\"\
    \n                       use=\"required\"/>\n         <xs:attribute name=\"code\"\
    \ type=\"xs:string\"\n                       use=\"required\"/>\n         <xs:attribute\
    \ name=\"text\" type=\"xs:string\"\n                       use=\"required\"/>\n\
    \         <xs:attribute name=\"suppressed\" type=\"xs:boolean\"\n            \
    \           use=\"optional\"/>\n         <xs:attribute name=\"forced_flush\" type=\"\
    xs:string\"\n                       use=\"optional\">\n           <xs:annotation>\n\
    \             <xs:documentation>\n               String for future use for e.g.,\
    \ number of digits lost.\n             </xs:documentation>\n           </xs:annotation>\n\
    \         </xs:attribute>\n         <xs:attribute name=\"digits\" type=\"xs:string\"\
    \n                       use=\"optional\"/>\n         <xs:attribute name=\"tag\"\
    \ type=\"xs:string\" use=\"optional\">\n           <xs:annotation>\n         \
    \    <xs:documentation>Matches tag from regex in request\n             </xs:documentation>\n\
    \           </xs:annotation>\n         </xs:attribute>\n       </xs:complexType>\n\
    \     </xs:element>\n   </xs:schema>\n                       XML Schema for KPML\
    \ Responses\n"
- title: 6.  Enumeration of KPML Status Codes
  contents:
  - "6.  Enumeration of KPML Status Codes\n   KPML status codes broadly follow their\
    \ SIP counterparts.  Codes that\n   start with a 2 indicate success.  Codes that\
    \ start with a 4 indicate\n   failure.  Codes that start with a 5 indicate a server\
    \ failure,\n   usually a failure to interpret the document or to support a requested\n\
    \   feature.\n   KPML clients MUST be able to handle arbitrary status codes by\n\
    \   examining the first digit only.\n   Any text can be in a KPML report document.\
    \  KPML clients MUST NOT\n   interpret the text field.\n        +------+--------------------------------------------------+\n\
    \        | Code | Text                                             |\n       \
    \ +------+--------------------------------------------------+\n        | 200 \
    \ | Success                                          |\n        | 402  | User\
    \ Terminated without Match                    |\n        | 423  | Timer Expired\
    \                                    |\n        | 481  | Dialog Not Found    \
    \                             |\n        | 487  | Subscription Expired       \
    \                      |\n        | 501  | Bad Document                      \
    \               |\n        | 502  | Namespace Not Supported                  \
    \        |\n        | 531  | Persistent Subscriptions Not Supported          \
    \ |\n        | 532  | Multiple Regular Expressions Not Supported       |\n   \
    \     | 533  | Multiple Subscriptions on a Dialog Not Supported |\n        | 534\
    \  | Too Many Regular Expressions                     |\n        +------+--------------------------------------------------+\n\
    \                        Table 4: KPML Status Codes\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document registers a new SIP Event Package,\
    \ two new MIME types,\n   and two new XML namespaces.\n"
- title: 7.1.  SIP Event Package Registration
  contents:
  - "7.1.  SIP Event Package Registration\n   Package name:  kpml\n   Type:  package\n\
    \   Contact:  Eric Burger, <e.burger@ieee.org>\n   Change Controller:  SIPPING\
    \ Working Group delegated from the IESG\n   Published Specification:  RFC 4730\n"
- title: 7.2.  MIME Media Type application/kpml-request+xml
  contents:
  - "7.2.  MIME Media Type application/kpml-request+xml\n   MIME media type name:\
    \  application\n   MIME subtype name:  kpml-request+xml\n   Required parameters:\
    \  none\n   Optional parameters:  Same as charset parameter application/xml as\n\
    \      specified in XML Media Types [3]\n   Encoding considerations:  See RFC\
    \ 3023 [3].\n   Security considerations:  See Section 10 of RFC 3023 [3] and\n\
    \      Section 8 of RFC 4730\n   Interoperability considerations:  See RFC 2023\
    \ [3] and RFC 4730\n   Published specification:  RFC 4730\n   Applications which\
    \ use this media type:  Session-oriented\n      applications that have primitive\
    \ User Interfaces.\n   Change controller:  SIPPING Working Group delegated from\
    \ the IESG\n   Personal and email address for further information:  Eric Burger\n\
    \      <e.burger@ieee.org>\n   Intended usage:  COMMON\n"
- title: 7.3.  MIME Media Type application/kpml-response+xml
  contents:
  - "7.3.  MIME Media Type application/kpml-response+xml\n   MIME media type name:\
    \  application\n   MIME subtype name:  kpml-response+xml\n   Required parameters:\
    \  none\n   Optional parameters:  Same as charset parameter application/xml as\n\
    \      specified in XML Media Types [3]\n   Encoding considerations:  See RFC\
    \ 3023 [3].\n   Security considerations:  See Section 10 of RFC 3023 [3] and\n\
    \      Section 8 of RFC 4730\n   Interoperability considerations:  See RFC 2023\
    \ [3] and RFC 4730\n   Published specification:  RFC 4730\n   Applications which\
    \ use this media type:  Session-oriented\n      applications that have primitive\
    \ User Interfaces.\n   Change controller:  SIPPING Working Group delegated from\
    \ the IESG\n   Personal and email address for further information:  Eric Burger\n\
    \      <e.burger@ieee.org>\n   Intended usage:  COMMON\n"
- title: 7.4.  URN Sub-Namespace Registration for urn:ietf:xml:ns:kpml-request
  contents:
  - "7.4.  URN Sub-Namespace Registration for urn:ietf:xml:ns:kpml-request\n   URI:\
    \ urn:ietf:params:xml:ns:kpml-request\n   Registrant Contact: The IESG <iesg@ietf.org>\n\
    \   XML:\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE html PUBLIC \"-//W3C/DTD XHTML\
    \ Basic 1.0//EN\"\n             \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n     <head>\n       <meta\
    \ http-equiv=\"content-type\"\n             content=\"text/html;charset=iso-8859-1\"\
    />\n       <title>Key Press Markup Language Request</title>\n     </head>\n  \
    \   <body>\n       <h1>Namespace for Key Press Markup Language Request</h1>\n\
    \       <h2>urn:ietf:params:xml:ns:kpml-request</h2>\n       <p>\n   <a href=\"\
    ftp://ftp.rfc-editor.org/in-notes/RFC4730.txt\">RFC 4730</a>.\n       </p>\n \
    \    </body>\n   </html>\n"
- title: 7.5.  URN Sub-Namespace Registration for urn:ietf:xml:ns:kpml-response
  contents:
  - "7.5.  URN Sub-Namespace Registration for urn:ietf:xml:ns:kpml-response\n   URI:\
    \ urn:ietf:params:xml:ns:kpml-response\n   Registrant Contact: The IESG <iesg@ietf.org>\n\
    \   XML:\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE html PUBLIC \"-//W3C/DTD XHTML\
    \ Basic 1.0//EN\"\n             \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n     <head>\n       <meta\
    \ http-equiv=\"content-type\"\n             content=\"text/html;charset=iso-8859-1\"\
    />\n       <title>Key Press Markup Language Response</title>\n     </head>\n \
    \    <body>\n       <h1>Namespace for Key Press Markup Language Response</h1>\n\
    \       <h2>urn:ietf:params:xml:ns:kpml-response</h2>\n       <p>\n   <a href=\"\
    ftp://ftp.rfc-editor.org/in-notes/rfc4730.txt\">RFC 4730</a>.\n       </p>\n \
    \    </body>\n   </html>\n"
- title: 7.6.  KPML Request Schema Registration
  contents:
  - "7.6.  KPML Request Schema Registration\n   Per RFC 3688 [7], IANA registered\
    \ the XML Schema for KPML as\n   referenced in Section 5.2 of RFC 4730.\n   URI:\
    \ urn:ietf:params:xml:schema:kpml-request\n   Registrant Contact: <iesg@ietf.org>\n"
- title: 7.7.  KPML Response Schema Registration
  contents:
  - "7.7.  KPML Response Schema Registration\n   Per RFC 3688 [7], IANA registered\
    \ the XML Schema for KPML as\n   referenced in Section 5.3 of RFC 4730.\n   URI:\
    \ urn:ietf:params:xml:schema:kpml-response\n   Registrant Contact: IETF, SIPPING\
    \ Work Group <sipping@ietf.org>, Eric\n   Burger <e.burger@ieee.org>.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The user information transported by KPML is potentially\
    \ sensitive.\n   For example, it could include calling card or credit card numbers.\n\
    \   This potentially private information could be provided accidentally\n   if\
    \ the notifier does not properly authenticate or authorize a\n   subscription.\
    \  Similarly private information (such as a credit card\n   number or calling\
    \ card number) could be revealed to an otherwise\n   legitimate subscriber (one\
    \ operating an IVR) if digits buffered\n   earlier in the session are provided\
    \ unintentionally to the new\n   subscriber.\n   Likewise, an eavesdropper could\
    \ view KPML digit information if it is\n   not encrypted, or an attacker could\
    \ inject fraudulent notifications\n   unless the messages or the SIP path over\
    \ which they travel are\n   integrity protected.\n   Therefore, User Interfaces\
    \ MUST NOT downgrade their own security\n   policy.  That is, if a User Interface\
    \ policy is to restrict\n   notifications to authenticated and authorized subscribers\
    \ over secure\n   communications, then the User Interface must not accept an\n\
    \   unauthenticated, unauthorized subscription over an insecure\n   communication\
    \ channel.\n   As an XML markup, all of the security considerations of RFC 3023\
    \ [3]\n   and RFC 3406 [6] MUST be met.  Pay particular attention to the\n   robustness\
    \ requirements of parsing XML.\n   Key press information is potentially sensitive.\
    \  For example, it can\n   represent credit card, calling card, or other personal\
    \ information.\n   Hijacking sessions allow unauthorized entities access to this\n\
    \   sensitive information.  Therefore, signaling SHOULD be secure, e.g.,\n   use\
    \ of TLS and sips: SHOULD be used.  Moreover, the information\n   itself is sensitive\
    \ so S/MIME or other appropriate mechanisms SHOULD\n   be used.\n   Subscriptions\
    \ MUST be authenticated in some manner.  As required by\n   the core SIP [4] specification,\
    \ all SIP implementations MUST support\n   digest authentication.  In addition,\
    \ User Interfaces MUST implement\n   support for the sips: scheme and SIP over\
    \ TLS.  Subscribers MUST\n   expect the User Interface to demand the use of an\
    \ authentication\n   scheme.  If the local policy of a User Interface is to use\n\
    \   authentication or secure communication channels, the User Interface\n   MUST\
    \ reject subscription requests that do not meet that policy.\n   User Interfaces\
    \ MUST begin buffering User Input upon receipt of an\n   authenticated and accepted\
    \ subscription.  This buffering is done on a\n   per-subscription basis.\n"
- title: 9.  Examples
  contents:
  - "9.  Examples\n   This section is informative in nature.  If there is a discrepancy\n\
    \   between this section and the normative sections above, the normative\n   sections\
    \ take precedence.\n"
- title: 9.1.  Monitoring for Octothorpe
  contents:
  - "9.1.  Monitoring for Octothorpe\n   A common need for pre-paid and personal assistant\
    \ applications is to\n   monitor a conversation for a signal indicating a change\
    \ in user focus\n   from the party they called through the application to the\
    \ application\n   itself.  For example, if you call a party using a pre-paid calling\n\
    \   card, and the party you call redirects you to voice mail, digits you\n   press\
    \ are for the voice mail system.  However, many applications have\n   a special\
    \ key sequence, such as the octothorpe (#, or pound sign) or\n   *9, that terminate\
    \ the called party session and shift the user's\n   focus to the application.\n\
    \   Figure 16 shows the KPML for long octothorpe.\n   <?xml version=\"1.0\"?>\n\
    \   <kpml-request xmlns=\"urn:ietf:params:xml:ns:kpml-request\"\n         xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\n  \
    \         \"urn:ietf:params:xml:ns:kpml-request kpml-request.xsd\"\n         version=\"\
    1.0\">\n     <pattern>\n       <regex>L#</regex>\n     </pattern>\n   </kpml-request>\n\
    \                    Figure 16: Long Octothorpe Example\n   The regex value L\
    \ indicates the following digit needs to be a long-\n   duration key press.\n"
- title: 9.2.  Dial String Collection
  contents:
  - "9.2.  Dial String Collection\n   In this example, the User Interface collects\
    \ a dial string.  The\n   application uses KPML to quickly determine when the\
    \ user enters a\n   target number.  In addition, KPML indicates what type of number\
    \ the\n   user entered.\n   <?xml version=\"1.0\"?>\n   <kpml-request xmlns=\"\
    urn:ietf:params:xml:ns:kpml-request\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n         xsi:schemaLocation=\n           \"urn:ietf:params:xml:ns:kpml-request\
    \ kpml-request.xsd\"\n         version=\"1.0\">\n     <pattern>\n       <regex\
    \ tag=\"local-operator\">0</regex>\n       <regex tag=\"ld-operator\">00</regex>\n\
    \       <regex tag=\"vpn\">7[x][x][x]</regex>\n       <regex tag=\"local-number7\"\
    >9xxxxxxx</regex>\n       <regex tag=\"RI-number\">9401xxxxxxx</regex>\n     \
    \  <regex tag=\"local-number10\">9xxxxxxxxxx</regex>\n       <regex tag=\"ddd\"\
    >91xxxxxxxxxx</regex>\n       <regex tag=\"iddd\">011x.</regex>\n     </pattern>\n\
    \   </kpml-request>\n                 Figure 17: Dial String KPML Example Code\n\
    \   Note the use of the \"tag\" attribute to indicate which regex matched\n  \
    \ the dialed string.  The interesting case here is if the user entered\n   \"\
    94015551212\".  This string matches both the \"9401xxxxxxx\" and\n   \"9xxxxxxxxxx\"\
    \ regular expressions.  Both expressions are the same\n   length.  Thus the KPML\
    \ interpreter will pick the \"9401xxxxxxx\"\n   string, as it occurs first in\
    \ document order.  Figure 18 shows the\n   response.\n   <?xml version=\"1.0\"\
    ?>\n   <kpml-response xmlns=\"urn:ietf:params:xml:ns:kpml-resposne\"\n       \
    \  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\n\
    \           \"urn:ietf:params:xml:ns:kpml-response kpml-response.xsd\"\n     \
    \    version=\"1.0\"\n         code=\"200\" text=\"OK\"\n         digits=\"94015551212\"\
    \ tag=\"RI-number\"/>\n                   Figure 18: Dial String KPML Response\n"
- title: 10.  Call Flow Examples
  contents:
  - '10.  Call Flow Examples

    '
- title: 10.1.  Supplemental Digits
  contents:
  - "10.1.  Supplemental Digits\n   This section gives a non-normative example of\
    \ an application that\n   collects supplemental digits.  Supplemental digit collection\
    \ is where\n   the network requests additional digits after the caller enters\
    \ the\n   destination address.  A typical supplemental dial string is four\n \
    \  digits in length.\n   Ingress Gateway      Application Server       Egress\
    \ Gateway\n          |                      |                      |\n       \
    \   |                      |                      |\n          |             \
    \         |                      |\n          |(1) INVITE            |       \
    \               |\n          |-------------------------------------------->|\n\
    \          |                      |                      |\n          |      \
    \                |                      |\n          |(2) 200 OK            |\
    \                      |\n          |<--------------------------------------------|\n\
    \          |                      |                      |\n          |      \
    \                |                      |\n          |(3) ACK               |\
    \                      |\n          |-------------------------------------------->|\n\
    \          |                      |                      |\n          |      \
    \                |                      |\n          |(4) SUBSCRIBE (one-shot)\
    \                     |\n          |<---------------------|                  \
    \    |\n          |                      |                      |\n          |\
    \                      |                      |\n          |(5) 200 OK       \
    \     |                      |\n          |--------------------->|           \
    \           |\n          |                      |                      |\n   \
    \       |                      |                      |\n          |(6) NOTIFY\
    \            |                      |\n          |--------------------->|    \
    \                  |\n          |                      |                     \
    \ |\n          |                      |                      |\n          |(7)\
    \ 200 OK            |                      |\n          |<---------------------|\
    \                      |\n          |                      |                 \
    \     |\n          |                      |                      |\n         \
    \ |(8)                   |                      |\n          |......................|\
    \                      |\n          |                      |                 \
    \     |\n          |                      |                      |\n         \
    \ |(9) NOTIFY (digits)   |                      |\n          |--------------------->|\
    \                      |\n          |                      |                 \
    \     |\n          |                      |                      |\n         \
    \ |(10) 200 OK           |                      |\n          |<---------------------|\
    \                      |\n          |                      |                 \
    \     |\n          |                      |                      |\n         \
    \ |                      |                      |\n          |               \
    \       |                      |\n                 Figure 19: Supplemental Digits\
    \ Call Flow\n   In messages (1-3), the ingress gateway establishes a dialog with\
    \ an\n   egress gateway.  The application learns the dialog ID through out-of-\n\
    \   band mechanisms, such as the Dialog Package or being co-resident with\n  \
    \ the egress gateway.  Part of the ACK message is below, to illustrate\n   the\
    \ dialog identifiers.\n   ACK sip:gw@subA.example.com SIP/2.0\n   Via: ...\n \
    \  Max-Forwards: ...\n   Route: ...\n   From: <sip:phn@example.com>;tag=jfh21\n\
    \   To: <sip:gw@subA.example.com>;tag=onjwe2\n   Call-ID: 12345592@subA.example.com\n\
    \   ...\n   In message (4), the application the requests that gateway collect\
    \ a\n   string of four key presses.\n   SUBSCRIBE sip:gw@subA.example.com SIP/2.0\n\
    \   Via: SIP/2.0/TCP client.subB.example.com;branch=q4i9ufr4ui3\n   From: <sip:ap@subB.example.com>;tag=567890\n\
    \   To: <sip:gw@subA.example.com>\n   Call-ID: 12345601@subA.example.com\n   CSeq:\
    \ 1 SUBSCRIBE\n   Contact: <sip:ap@client.subB.example.com>\n   Max-Forwards:\
    \ 70\n   Event: kpml ;remote-tag=\"sip:phn@example.com;tag=jfh21\"\n         \
    \      ;local-tag=\"sip:gw@subA.example.com;tag=onjwe2\"\n               ;call-id=\"\
    12345592@subA.example.com\"\n   Expires: 7200\n   Accept: application/kpml-response+xml\n\
    \   Content-Type: application/kpml-request+xml\n   Content-Length: 292\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <kpml-request xmlns=\"urn:ietf:params:xml:ns:kpml-request\"\
    \n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\n\
    \         \"urn:ietf:params:xml:ns:kpml-request kpml-request.xsd\"\n       version=\"\
    1.0\">\n     <pattern persist=\"one-shot\">\n       <regex>xxxx</regex>\n    \
    \ </pattern>\n   </kpml-request>\n   Message (5) is the acknowledgement of the\
    \ subscription request.\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP subB.example.com;branch=q4i9ufr4ui3;\n\
    \        received=192.168.125.12\n   From: <sip:ap@subB.example.com>;tag=567890\n\
    \   To: <sip:gw@subA.example.com>;tag=1234567\n   Call-ID: 12345601@subA.example.com\n\
    \   CSeq: 1 SUBSCRIBE\n   Contact: <sip:gw27@subA.example.com>\n   Expires: 3600\n\
    \   Event: kpml\n   Message (6) is the immediate notification of the subscription.\n\
    \   NOTIFY sip:ap@client.subB.example.com SIP/2.0\n   Via: SIP/2.0/UDP subA.example.com;branch=gw27id4993\n\
    \   To: <sip:ap@subB.example.com>;tag=567890\n   From: <sip:gw@subA.example.com>;tag=1234567\n\
    \   Call-ID: 12345601@subA.example.com\n   CSeq: 1000 NOTIFY\n   Contact: <sip:gw27@subA.example.com>\n\
    \   Event: kpml\n   Subscription-State: active;expires=3599\n   Max-Forwards:\
    \ 70\n   Content-Length: 0\n   Message (7) is the acknowledgement of the notification\
    \ message.\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP subA.example.com;branch=gw27id4993\n\
    \   To: <sip:ap@subB.example.com>;tag=567890\n   From: <sip:gw@subA.example.com>;tag=1234567\n\
    \   Call-ID: 12345601@subA.example.com\n   CSeq: 1000 NOTIFY\n   Some time elapses\
    \ (8).\n   The user enters the input.  The device provides the notification of\n\
    \   the collected digits in message (9).  Since this was a one-shot\n   subscription,\
    \ note the Subscription-State is \"terminated\".\n   NOTIFY sip:ap@client.subB.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP subA.example.com;branch=gw27id4993\n   To: <sip:ap@subB.example.com>;tag=567890\n\
    \   From: <sip:gw@subA.example.com>;tag=1234567\n   Call-ID: 12345601@subA.example.com\n\
    \   CSeq: 1001 NOTIFY\n   Contact: <sip:gw27@subA.example.com>\n   Event: kpml\n\
    \   Subscription-State: terminated\n   Max-Forwards: 70\n   Content-Type: application/kpml-response+xml\n\
    \   Content-Length: 258\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <kpml-response\
    \ xmlns=\"urn:ietf:params:xml:ns:kpml-response\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n         xsi:schemaLocation=\n           \"urn:ietf:params:xml:ns:kpml-response\
    \ kpml-response.xsd\"\n         version=\"1.0\"\n         code=\"200\" text=\"\
    OK\"\n         digits=\"4336\"/>\n   Message (10) is the acknowledgement of the\
    \ notification.\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP subA.example.com;branch=gw27id4993\n\
    \   To: <sip:ap@subB.example.com>;tag=567890\n   From: <sip:gw@subA.example.com>;tag=1234567\n\
    \   Call-ID: 12345601@subA.example.com\n   CSeq: 1001 NOTIFY\n"
- title: 10.2.  Multiple Applications
  contents:
  - "10.2.  Multiple Applications\n   This section gives a non-normative example of\
    \ multiple applications.\n   One application collects a destination number to\
    \ call.  That\n   application then waits for a \"long pound.\"  During the call,\
    \ the call\n   goes to a personal assistant application, which interacts with\
    \ the\n   user.  In addition, the personal assistant application looks for a\n\
    \   \"short pound.\"\n   For clarity, we do not show the INVITE dialogs.\n   Gateway\
    \           Card Application      Personal Assistant\n      |                \
    \      |                      |\n      |                      |              \
    \        |\n      |                      |                      |\n      |(1)\
    \ SUBSCRIBE (persistent)                   |\n      |<---------------------| \
    \                     |\n      |                      |                      |\n\
    \      |                      |                      |\n      |(2) 200 OK    \
    \        |                      |\n      |--------------------->|            \
    \          |\n      |                      |                      |\n      | \
    \                     |                      |\n      |(3) NOTIFY            |\
    \                      |\n      |--------------------->|                     \
    \ |\n      |                      |                      |\n      |          \
    \            |                      |\n      |(4) 200 OK            |        \
    \              |\n      |<---------------------|                      |\n    \
    \  |                      |                      |\n      |                  \
    \    |                      |\n      |(5)                   |                \
    \      |\n      |......................|                      |\n      |     \
    \                 |                      |\n      |                      |   \
    \                   |\n      |(6) NOTIFY (tag=card) |                      |\n\
    \      |--------------------->|                      |\n      |              \
    \        |                      |\n      |                      |            \
    \          |\n      |(7) 200 OK            |                      |\n      |<---------------------|\
    \                      |\n      |                      |                     \
    \ |\n      |                      |                      |\n      |(8)       \
    \            |                      |\n      |......................|        \
    \              |\n      |                      |                      |\n    \
    \  |                      |                      |\n      |(9) NOTIFY (tag=number)\
    \                      |\n      |--------------------->|                     \
    \ |\n      |                      |                      |\n      |          \
    \            |                      |\n      |(10) 200 OK           |        \
    \              |\n      |<---------------------|                      |\n    \
    \  |                      |                      |\n      |                  \
    \    |                      |\n      |(11) SUBSCRIBE        |                \
    \      |\n      |<--------------------------------------------|\n      |     \
    \                 |                      |\n      |                      |   \
    \                   |\n      |(12) 200 OK           |                      |\n\
    \      |-------------------------------------------->|\n      |              \
    \        |                      |\n      |                      |            \
    \          |\n      |(13) NOTIFY           |                      |\n      |-------------------------------------------->|\n\
    \      |                      |                      |\n      |              \
    \        |                      |\n      |(14) 200 OK           |            \
    \          |\n      |<--------------------------------------------|\n      | \
    \                     |                      |\n      |                      |\
    \                      |\n      |(15)                  |                     \
    \ |\n      |.............................................|\n      |          \
    \            |                      |\n      |                      |        \
    \              |\n      |(16) NOTIFY (tag=number)                     |\n    \
    \  |-------------------------------------------->|\n      |                  \
    \    |                      |\n      |                      |                \
    \      |\n      |(17) 200 OK           |                      |\n      |<--------------------------------------------|\n\
    \      |                      |                      |\n      |              \
    \        |                      |\n      |(18)                  |            \
    \          |\n      |.............................................|\n      | \
    \                     |                      |\n      |                      |\
    \                      |\n      |(19) NOTIFY (tag=#)   |                     \
    \ |\n      |-------------------------------------------->|\n      |          \
    \            |                      |\n      |                      |        \
    \              |\n      |(20) 200 OK           |                      |\n    \
    \  |<--------------------------------------------|\n      |                  \
    \    |                      |\n      |                      |                \
    \      |\n      |(21)                  |                      |\n      |.............................................|\n\
    \      |                      |                      |\n      |              \
    \        |                      |\n      |(22) NOTIFY (tag=number)           \
    \          |\n      |-------------------------------------------->|\n      | \
    \                     |                      |\n      |                      |\
    \                      |\n      |(23) 200 OK           |                     \
    \ |\n      |<--------------------------------------------|\n      |          \
    \            |                      |\n      |                      |        \
    \              |\n      |(24)                  |                      |\n    \
    \  |.............................................|\n      |                  \
    \    |                      |\n      |                      |                \
    \      |\n      |(25) NOTIFY (L#)      |                      |\n      |--------------------->|\
    \                      |\n      |                      |                     \
    \ |\n      |                      |                      |\n      |(26) 200 OK\
    \           |                      |\n      |<---------------------|         \
    \             |\n      |                      |                      |\n     \
    \ |                      |                      |\n      |                   \
    \   |                      |\n      |                      |                 \
    \     |\n                 Figure 27: Multiple Application Call Flow\n   Message\
    \ (1) is the subscription request for the card number.\n   SUBSCRIBE sip:gw@subA.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TCP client.subB.example.com;branch=3qo3j0ouq\n   From:\
    \ <sip:ap@subB.example.com>;tag=978675\n   To: <sip:gw@subA.example.com>\n   Call-ID:\
    \ 12345601@subA.example.com\n   CSeq: 20 SUBSCRIBE\n   Contact: <sip:ap@client.subB.example.com>\n\
    \   Max-Forwards: 70\n   Event: kpml ;remote-tag=\"<sip:phn@example.com;tag=jfi23>\"\
    \n               ;local-tag=\"sip:gw@subA.example.com;tag=oi43jfq\"\n        \
    \       ;call-id=\"12345598@subA.example.com\"\n   Expires: 7200\n   Accept: application/kpml-response+xml\n\
    \   Content-Type: application/kpml-request+xml\n   Content-Length: 339\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <kpml-request xmlns=\"urn:ietf:params:xml:ns:kpml-request\"\
    \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\n\
    \           \"urn:ietf:params:xml:ns:kpml-request kpml-request.xsd\"\n       \
    \  version=\"1.0\">\n     <pattern persist=\"persist\">\n       <regex tag=\"\
    card\">x{16}</regex>\n       <regex tag=\"number\">x{10}</regex>\n     </pattern>\n\
    \   </kpml-request>\n   Messages (2-4) are not shown, for brevity.  Message (6)\
    \ is the\n   notification of the card number.\n   NOTIFY sip:ap@client.subB.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP subA.example.com;branch=3qo3j0ouq\n   To: <sip:ap@subB.example.com>;tag=978675\n\
    \   From: <sip:gw@subA.example.com>;tag=9783453\n   Call-ID: 12345601@subA.example.com\n\
    \   CSeq: 3001 NOTIFY\n   Contact: <sip:gw27@subA.example.com>\n   Event: kpml\n\
    \   Subscription-State: active;expires=3442\n   Max-Forwards: 70\n   Content-Type:\
    \ application/kpml-response+xml\n   Content-Length: 271\n   <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\"?>\n   <kpml-response xmlns=\"urn:ietf:params:xml:ns:kpml-response\"\
    \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\n\
    \           \"urn:ietf:params:xml:ns:kpml-response kpml-response.xsd\"\n     \
    \    version=\"1.0\"\n         code=\"200\" text=\"OK\"\n         digits=\"9999888877776666\"\
    />\n   Message (7) is the acknowledgement of the notification.  Time goes by\n\
    \   in (8).  Message (9) is the notification of the dialed number.\n   NOTIFY\
    \ sip:ap@client.subB.example.com SIP/2.0\n   Via: SIP/2.0/UDP subA.example.com;branch=3qo3j0ouq\n\
    \   To: <sip:ap@subB.example.com>;tag=978675\n   From: <sip:gw@subA.example.com>;tag=9783453\n\
    \   Call-ID: 12345601@subA.example.com\n   CSeq: 3001 NOTIFY\n   Contact: <sip:gw27@subA.example.com>\n\
    \   Event: kpml\n   Subscription-State: active;expires=3542\n   Max-Forwards:\
    \ 70\n   Content-Type: application/kpml-response+xml\n   Content-Length: 278\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <kpml-response xmlns=\"urn:ietf:params:xml:ns:kpml-response\"\
    \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\n\
    \           \"urn:ietf:params:xml:ns:kpml-response kpml-response.xsd\"\n     \
    \    version=\"1.0\"\n         code=\"200\" text=\"OK\"\n         digits=\"2225551212\"\
    \ tag=\"number\"/>\n   Message (11) is the request for long-pound monitoring.\n\
    \   SUBSCRIBE sip:gw@subA.example.com SIP/2.0\n   Via: SIP/2.0/TCP client.subB.example.com;branch=3qo3j0ouq\n\
    \   From: <sip:ap@subB.example.com>;tag=978675\n   To: <sip:gw@subA.example.com>\n\
    \   Call-ID: 12345601@subA.example.com\n   CSeq: 21 SUBSCRIBE\n   Contact: <sip:ap@client.subB.example.com>\n\
    \   Max-Forwards: 70\n   Event: kpml ;remote-tag=\"<sip:phn@example.com;tag=jfi23>\"\
    \n               ;local-tag=\"sip:gw@subA.example.com;tag=oi43jfq\"\n        \
    \       ;call-id=\"12345598@subA.example.com\"\n   Expires: 7200\n   Accept: application/kpml-response+xml\n\
    \   Content-Type: application/kpml-request+xml\n   Content-Length: 295\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <kpml-request xmlns=\"urn:ietf:params:xml:ns:kpml-request\"\
    \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\n\
    \           \"urn:ietf:params:xml:ns:kpml-request kpml-request.xsd\"\n       \
    \  version=\"1.0\">\n     <pattern persist=\"single-notify\">\n       <regex>L#</regex>\n\
    \     </pattern>\n   </kpml-request>\n   Message (13) is the request from the\
    \ personal assistant application\n   for number and pound sign monitoring.\n \
    \  SUBSCRIBE sip:gw@subA.example.com SIP/2.0\n   Via: SIP/2.0/TCP pahost.example.com;branch=xzvsadf\n\
    \   From: <sip:pa@example.com>;tag=4rgj0f\n   To: <sip:gw@subA.example.com>\n\
    \   Call-ID: 93845@pahost.example.com\n   CSeq: 21 SUBSCRIBE\n   Contact: <sip:pa12@pahost.example.com>\n\
    \   Max-Forwards: 70\n   Event: kpml ;remote-tag=\"<sip:phn@example.com;tag=jfi23>\"\
    \n               ;local-tag=\"sip:gw@subA.example.com;tag=oi43jfq\"\n        \
    \       ;call-id=\"12345598@subA.example.com\"\n   Expires: 7200\n   Accept: application/kpml-response+xml\n\
    \   Content-Type: application/kpml-request+xml\n   Content-Length: 332\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <kpml-request xmlns=\"urn:ietf:params:xml:ns:kpml-request\"\
    \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\n\
    \           \"urn:ietf:params:xml:ns:kpml-request kpml-request.xsd\"\n       \
    \  version=\"1.0\">\n     <pattern persist=\"persist\">\n       <regex tag=\"\
    number\">x{10}</regex>\n       <regex tag=\"#\">#</regex>\n     </pattern>\n \
    \  </kpml-request>\n   Message (18) is the notification of the number collected.\n\
    \   NOTIFY sip:pa@example.com SIP/2.0\n   Via: SIP/2.0/UDP subA.example.com;branch=xzvsadf\n\
    \   To: <sip:pa@example.com>;tag=4rgj0f\n   From: <sip:gw@subA.example.com>;tag=9788823\n\
    \   Call-ID: 93845@pahost.example.com\n   CSeq: 3021 NOTIFY\n   Contact: <sip:gw27@subA.example.com>\n\
    \   Event: kpml\n   Subscription-State: active;expires=3540\n   Max-Forwards:\
    \ 70\n   Content-Type: application/kpml-response+xml\n   Content-Length: 278\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <kpml-response xmlns=\"urn:ietf:params:xml:ns:kpml-response\"\
    \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\n\
    \           \"urn:ietf:params:xml:ns:kpml-response kpml-response.xsd\"\n     \
    \    version=\"1.0\"\n         code=\"200\" text=\"OK\" digits=\"3335551212\"\
    \ tag=\"number\"/>\n   Message (21) is the notification of pound sign detected.\n\
    \   NOTIFY sip:pa@example.com SIP/2.0\n   Via: SIP/2.0/UDP subA.example.com;branch=xzvsadf\n\
    \   To: <sip:pa@example.com>;tag=4rgj0f\n   From: <sip:gw@subA.example.com>;tag=9788823\n\
    \   Call-ID: 93845@pahost.example.com\n   CSeq: 3022 NOTIFY\n   Contact: <sip:gw27@subA.example.com>\n\
    \   Event: kpml\n   Subscription-State: active;expires=3540\n   Max-Forwards:\
    \ 70\n   Content-Type: application/kpml-response+xml\n   Content-Length: 264\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <kpml-response xmlns=\"urn:ietf:params:xml:ns:kpml-response\"\
    \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\n\
    \           \"urn:ietf:params:xml:ns:kpml-response kpml-response.xsd\"\n     \
    \    version=\"1.0\"\n         code=\"200\" text=\"OK\"\n         digits=\"#\"\
    \ tag=\"#\"/>\n   Message (27) is the notification of long pound to the card\n\
    \   application.\n   NOTIFY sip:ap@client.subB.example.com SIP/2.0\n   Via: SIP/2.0/UDP\
    \ subA.example.com;branch=3qo3j0ouq\n   To: <sip:ap@subB.example.com>;tag=978675\n\
    \   From: <sip:gw@subA.example.com>;tag=9783453\n   Call-ID: 12345601@subA.example.com\n\
    \   CSeq: 3037 NOTIFY\n   Contact: <sip:gw27@subA.example.com>\n   Event: kpml\n\
    \   Subscription-State: active;expires=3216\n   Max-Forwards: 70\n   Content-Type:\
    \ application/kpml-response+xml\n   Content-Length: 256\n   <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\"?>\n   <kpml-response xmlns=\"urn:ietf:params:xml:ns:kpml-response\"\
    \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\n\
    \           \"urn:ietf:params:xml:ns:kpml-response kpml-response.xsd\"\n     \
    \    version=\"1.0\"\n         code=\"200\" text=\"OK\"\n         digits=\"#\"\
    />\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n \
    \  [2]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n        Specifications:\
    \ ABNF\", RFC 4234, October 2005.\n   [3]  Murata, M., St. Laurent, S., and D.\
    \ Kohn, \"XML Media Types\",\n        RFC 3023, January 2001.\n   [4]  Rosenberg,\
    \ J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n        Peterson, J., Sparks,\
    \ R., Handley, M., and E. Schooler, \"SIP:\n        Session Initiation Protocol\"\
    , RFC 3261, June 2002.\n   [5]  Roach, A., \"Session Initiation Protocol (SIP)-Specific\
    \ Event\n        Notification\", RFC 3265, June 2002.\n   [6]  Daigle, L., van\
    \ Gulik, D., Iannella, R., and P. Faltstrom,\n        \"Uniform Resource Names\
    \ (URN) Namespace Definition Mechanisms\",\n        BCP 66, RFC 3406, October\
    \ 2002.\n   [7]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n\
    \        January 2004.\n   [8]  Thompson, H., Beech, D., Maloney, M., and N. Mendelsohn,\
    \ \"XML\n        Schema Part 1: Structures\", W3C REC REC-xmlschema-1-20010502,\n\
    \        May 2001.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [9]   Rosenberg, J., \"Obtaining and Using\
    \ Globally Routable User\n         Agent (UA) URIs (GRUU) in the  Session Initiation\
    \ Protocol\n         (SIP)\", Work in Progress, June 2006.\n   [10]  Schulzrinne,\
    \ H. and S. Petrack, \"RTP Payload for DTMF Digits,\n         Telephony Tones\
    \ and Telephony Signals\", RFC 2833, May 2000.\n   [11]  Andreasen, F. and B.\
    \ Foster, \"Media Gateway Control Protocol\n         (MGCP) Version 1.0\", RFC\
    \ 3435, January 2003.\n   [12]  Groves, C., Pantaleo, M., Anderson, T., and T.\
    \ Taylor, \"Gateway\n         Control Protocol Version 1\", RFC 3525, June 2003.\n\
    \   [13]  Institute of Electrical and Electronics Engineers, \"Information\n \
    \        Technology - Portable Operating System Interface (POSIX) - Part\n   \
    \      1: Base Definitions, Chapter 9\", IEEE Standard 1003.1,\n         June\
    \ 2001.\n   [14]  Bray, T., Paoli, J., Sperberg-McQueen, C., and E. Maler,\n \
    \        \"Extensible Markup Language (XML) 1.0 (Second Edition)\", W3C\n    \
    \     REC REC-xml-20001006, October 2000.\n   [15]  Rosenberg, J., \"A Framework\
    \ for Application Interaction in the\n         Session Initiation Protocol  (SIP)\"\
    , Work in Progress,\n         July 2005.\n   [16]  Burger, E., Van Dyke, J., and\
    \ A. Spitzer, \"Media Server Control\n         Markup Language (MSCML) and Protocol\"\
    , RFC 4722, November 2006.\n   [17]  Rosenberg, J., Schulzrinne, H., and R. Mahy,\
    \ \"An INVITE-\n         Initiated Dialog Event Package for the Session Initiation\n\
    \         Protocol (SIP)\", RFC 4235, November 2005.\n   [18]  Roach, A., Campbell,\
    \ B., and J. Rosenberg, \"A Session\n         Initiation Protocol (SIP) Event\
    \ Notification Extension for\n         Resource Lists\", RFC 4662, August 2006.\n"
- title: Appendix A.  Contributors
  contents:
  - "Appendix A.  Contributors\n   Ophir Frieder of the Illinois Institute of Technology\
    \ collaborated on\n   the development of the buffer algorithm.\n   Jeff Van Dyke\
    \ worked enough hours and wrote enough text to be\n   considered an author under\
    \ the old rules.\n   Robert Fairlie-Cuninghame, Cullen Jennings, Jonathan Rosenberg,\
    \ and\n   we were the members of the Application Stimulus Signaling Design\n \
    \  Team.  All members of the team contributed to this work.  In\n   addition,\
    \ Jonathan Rosenberg postulated DML in his \"A Framework for\n   Stimulus Signaling\
    \ in SIP Using Markup\" draft.\n   This version of KPML has significant influence\
    \ from MSCML [16], the\n   SnowShore Media Server Control Markup Language.  Jeff\
    \ Van Dyke and\n   Andy Spitzer were the primary contributors to that effort.\n\
    \   Rohan Mahy did a significant reorganization of the content, as well\n   as\
    \ providing considerable moral support in the production of this\n   document.\n\
    \   That said, any errors, misinterpretation, or fouls in this document\n   are\
    \ our own.\n"
- title: Appendix B.  Acknowledgements
  contents:
  - "Appendix B.  Acknowledgements\n   Hal Purdy and Eric Cheung of AT&T Laboratories\
    \ helped immensely\n   through many conversations and challenges.\n   Steve Fisher\
    \ of AT&T Laboratories suggested the digit suppression\n   syntax and provided\
    \ excellent review of the document.\n   Terence Lobo of SnowShore Networks made\
    \ it all work.\n   Jerry Kamitses, Swati Dhuleshia, Shaun Bharrat, Sunil Menon,\
    \ and\n   Bryan Hill helped with clarifying the buffer behavior and DRegex\n \
    \  syntax.\n   Silvano Brewster and Bill Fenner of AT&T Laboratories and Joe Zebarth\n\
    \   of Nortel helped considerably with making the text clear and DRegex\n   tight.\n\
    \   Bert Culpepper and Allison Mankin gave an early version of this\n   document\
    \ a good scouring.\n   Scott Hollenbeck provided XML and MIME review.  Tim Bray\
    \ pointed out\n   the general issue of UTF-8 versus UTF-16 with XML.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Eric Burger\n   Cantata Technology, Inc.\n   18 Keewaydin\
    \ Dr.\n   Salem, NH  03079\n   USA\n   EMail: eburger@cantata.com\n   Martin Dolly\n\
    \   AT&T Labs\n   EMail: mdolly@att.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
