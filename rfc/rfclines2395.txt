Abstract This document describes a compression method based on the LZS compression algorithm.
This document defines the application of the LZS algorithm to the IP Payload Compression Protocol [IPCOMP].
[IPCOMP] defines a method for applying lossless compression to the payloads of Internet Protocol datagrams.
This document specifies the application of LZS compression, a lossless compression algorithm, to IP datagram payloads.
This document is to be used in conjunction with the IP Payload Compression Protocol [IPCOMP].
This specification assumes a thorough understanding of the IPComp protocol.
1.2 Background of LZS Compression Starting with a sliding window compression history, similar to [LZ1],
Hi/fn developed a new, enhanced compression algorithm identified as LZS.
The LZS algorithm is a general purpose lossless compression algorithm for use with a wide variety of data types.
Its encoding method is very efficient, providing compression for strings as short as two octets in length.
The LZS algorithm uses a sliding window of 2,048 bytes.
During compression, redundant sequences of data are replaced with tokens that represent those sequences.
During decompression, the original sequences are substituted for the tokens in such a way that the original data is exactly recovered.
LZS differs from lossy compression algorithms, such as those often used for video compression
, that do not exactly reproduce the original data.
The details of LZS compression can be found in [ANSI94].
The efficiency of the LZS algorithm depends on the degree of redundancy in the original data.
A table of compression ratios for the [Calgary] Corpus file set is provided in the appendix in Section 7.
Hi/fn, Inc. holds patents on the LZS algorithm.
Licenses for a reference implementation are available for use in IPPCP, IPSec, TLS and PPP applications at no cost.
Source and object licenses are available on a non discriminatory basis.
Hardware implementations are also available.
Hi/fn at the address listed with the authors' addresses.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC 2119].
Compression Process 2.1 Compression History
The sender MUST reset the compression history prior to processing each datagram's payload.
This ensures that each datagram's payload can be decompressed independently of any other, as is needed when datagrams are received out of order.
The sender MUST flush the compressor each time it transmits a compressed datagram.
Flushing means that all data going into the compressor is included in the output, i.e., no data is held back in the hope of achieving better compression.
Flushing is necessary to prevent a datagram's data from spilling over into a later datagram.
The input to the payload compression algorithm is an IP datagram payload.
The output of the algorithm is a new (and hopefully smaller) payload.
The output payload contains the input payload's data in either compressed or uncompressed format.
The input and output payloads are each an integral number of bytes in length.
If the uncompressed form is used, the output payload is identical to the input payload and the IPComp header is omitted.
If the compressed form is used, the output payload is prepended with the IPComp header and encoded as defined in [ANSI94], which is repeated here for informational purposes ONLY.
2.3 Padding A datagram payload compressed using LZS always ends with the last compressed data byte (also known as the <end marker>), which is used to disambiguate padding.
This allows trailing bits as well as bytes to be considered padding.
The size of a compressed payload MUST be in whole octet units.
If the received datagram is compressed, the receiver MUST reset the decompression history prior to processing the datagram.
This ensures that each datagram can be decompressed independently of any other, as is needed when datagrams are received out of order.
Following the reset of the decompression history, the receiver decompresses the Payload Data field according to the encoding specified in section 3.2 of [ANSI94].
If the received datagram is not compressed, the receiver needs to perform no decompression processing and the Payload Data field of the datagram is ready for processing by the next protocol layer.
Parameters ISAKMP MAY be used to negotiate the use of the LZS compression method to establish an IPCA, as defined in [IPCOMP].
The LZS Transform ID as IPCOMP LZS, as specified in The Internet IP Security Domain of Interpretation [SECDOI].
This value is used to negotiate the LZS compression algorithm under the ISAKMP protocol.
4.2 ISAKMP Security Association Attributes
There are no other parameters required for LZS compression negotiated under ISAKMP.
4.3 Manual configuration The CPI value IPCOMP LZS is used for a manually configured IPComp Compression Associations.
4.4 Minimum packet size threshold As stated in [IPCOMP], small packets may not compress well.
Informal tests using the LZS algorithm over the Calgary Corpus data set show that the average payload size that may produce expanded data is approximately 90 bytes.
Thus implementations may not want to attempt to compress payloads smaller than 90 bytes.
There is no adaptive algorithm embodied in the LZS algorithm, for compressibility testing, as referenced in [IPCOMP].
This document does not add any further security considerations that [IPCOMP] and [Deutsch96] have already declared.
Compression Efficiency versus Datagram Size
The following table offers some guidance on the compression efficiency that can be achieved as a function of datagram size.
Each entry in the table shows the compression ratio that was achieved when LZS was applied to a test file using datagrams of a specified size.
The test file was the University of Calgary Text Compression Corpus [Calgary].
The Calgary Corpus consists of 18 files with a total size (all files) of 3.278MB.
Compression    1.18  1.28  1.43  1.58  1.74  1.91
