- title: __initial_text__
  contents:
  - '               Defending against Sequence Number Attacks

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an algorithm for the generation of TCP\n\
    \   Initial Sequence Numbers (ISNs), such that the chances of an off-path\n  \
    \ attacker guessing the sequence numbers in use by a target connection\n   are\
    \ reduced.  This document revises (and formally obsoletes) RFC\n   1948, and takes\
    \ the ISN generation algorithm originally proposed in\n   that document to Standards\
    \ Track, formally updating RFC 793.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6528.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Generation of Initial Sequence Numbers . . . . . . .\
    \ . . . . .  3\n   3.  Proposed Initial Sequence Number Generation Algorithm \
    \ . . . .  4\n   4.  Security Considerations  . . . . . . . . . . . . . . . .\
    \ . . .  5\n   5.  Acknowledgements . . . . . . . . . . . . . . . . . . . . .\
    \ . .  6\n   6.  References . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n     6.1.  Normative References . . . . . . . . . . . . . . . . . . .\
    \  6\n     6.2.  Informative References . . . . . . . . . . . . . . . . . .  7\n\
    \   Appendix A.  Address-Based Trust-Relationship Exploitation\n             \
    \   Attacks . . . . . . . . . . . . . . . . . . . . . . . 10\n     A.1.  Blind\
    \ TCP Connection-Spoofing  . . . . . . . . . . . . . . 10\n   Appendix B.  Changes\
    \ from RFC 1948 . . . . . . . . . . . . . . . . 12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   For a long time, the Internet has experienced a number of\
    \ off-path\n   attacks against TCP connections.  These attacks have ranged from\n\
    \   trust-relationship exploitation to denial-of-service attacks\n   [CPNI-TCP].\
    \  Discussion of some of these attacks dates back to at\n   least 1985, when Morris\
    \ [Morris1985] described a form of attack based\n   on guessing what sequence\
    \ numbers TCP [RFC0793] will use for new\n   connections between two known end-points.\n\
    \   In 1996, RFC 1948 [RFC1948] proposed an algorithm for the selection\n   of\
    \ TCP Initial Sequence Numbers (ISNs), such that the chances of an\n   off-path\
    \ attacker guessing valid sequence numbers are reduced.  With\n   the aforementioned\
    \ algorithm, such attacks would remain possible if\n   and only if the attacker\
    \ already has the ability to perform \"man-in-\n   the-middle\" attacks.\n   This\
    \ document revises (and formally obsoletes) RFC 1948, and takes\n   the ISN generation\
    \ algorithm originally proposed in that document to\n   Standards Track.\n   Section\
    \ 2 provides a brief discussion of the requirements for a good\n   ISN generation\
    \ algorithm.  Section 3 specifies a good ISN selection\n   algorithm.  Appendix\
    \ A provides a discussion of the trust-\n   relationship exploitation attacks\
    \ that originally motivated the\n   publication of RFC 1948 [RFC1948].  Finally,\
    \ Appendix B lists the\n   differences from RFC 1948 to this document.\n   The\
    \ key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n\
    \   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n"
- title: 2.  Generation of Initial Sequence Numbers
  contents:
  - "2.  Generation of Initial Sequence Numbers\n   RFC 793 [RFC0793] suggests that\
    \ the choice of the ISN of a connection\n   is not arbitrary, but aims to reduce\
    \ the chances of a stale segment\n   from being accepted by a new incarnation\
    \ of a previous connection.\n   RFC 793 [RFC0793] suggests the use of a global\
    \ 32-bit ISN generator\n   that is incremented by 1 roughly every 4 microseconds.\n\
    \   It is interesting to note that, as a matter of fact, protection\n   against\
    \ stale segments from a previous incarnation of the connection\n   is enforced\
    \ by preventing the creation of a new incarnation of a\n   previous connection\
    \ before 2*MSL have passed since a segment\n   corresponding to the old incarnation\
    \ was last seen (where \"MSL\" is\n   the \"Maximum Segment Lifetime\" [RFC0793]).\
    \  This is accomplished by\n   the TIME-WAIT state and TCP's \"quiet time\" concept\
    \ (see Appendix B of\n   [RFC1323]).\n   Based on the assumption that ISNs are\
    \ monotonically increasing across\n   connections, many stacks (e.g., 4.2BSD-derived)\
    \ use the ISN of an\n   incoming SYN segment to perform \"heuristics\" that enable\
    \ the creation\n   of a new incarnation of a connection while the previous incarnation\n\
    \   is still in the TIME-WAIT state (see p. 945 of [Wright1994]).  This\n   avoids\
    \ an interoperability problem that may arise when a node\n   establishes connections\
    \ to a specific TCP end-point at a high rate\n   [Silbersack2005].\n   Unfortunately,\
    \ the ISN generator described in [RFC0793] makes it\n   trivial for an off-path\
    \ attacker to predict the ISN that a TCP will\n   use for new connections, thus\
    \ allowing a variety of attacks against\n   TCP connections [CPNI-TCP].  One of\
    \ the possible attacks that takes\n   advantage of weak sequence numbers was first\
    \ described in\n   [Morris1985], and its exploitation was widely publicized about\
    \ 10\n   years later [Shimomura1995].  [CERT2001] and [USCERT2001] are\n   advisories\
    \ about the security implications of weak ISN generators.\n   [Zalewski2001] and\
    \ [Zalewski2002] contain a detailed analysis of ISN\n   generators, and a survey\
    \ of the algorithms in use by popular TCP\n   implementations.\n   Simple random\
    \ selection of the TCP ISNs would mitigate those attacks\n   that require an attacker\
    \ to guess valid sequence numbers.  However,\n   it would also break the 4.4BSD\
    \ \"heuristics\" to accept a new incoming\n   connection when there is a previous\
    \ incarnation of that connection in\n   the TIME-WAIT state [Silbersack2005].\n\
    \   We can prevent sequence number guessing attacks by giving each\n   connection\
    \ -- that is, each four-tuple of (localip, localport,\n   remoteip, remoteport)\
    \ -- a separate sequence number space.  Within\n   each space, the ISN is incremented\
    \ according to [RFC0793]; however,\n   there is no obvious relationship between\
    \ the numbering in different\n   spaces.\n   An obvious way to prevent sequence\
    \ number guessing attacks while not\n   breaking the 4.4BSD heuristics would be\
    \ to perform a simple random\n   selection of TCP ISNs while maintaining state\
    \ for dead connections\n   (e.g. changing the TCP state transition diagram so\
    \ that both end-\n   points of all connections go to TIME-WAIT state).  That would\
    \ work\n   but would consume system memory to store the additional state.\n  \
    \ Instead, we propose an improvement to the TCP ISN generation\n   algorithm that\
    \ does not require TCP to keep state for all recently\n   terminated connections.\n"
- title: 3.  Proposed Initial Sequence Number Generation Algorithm
  contents:
  - "3.  Proposed Initial Sequence Number Generation Algorithm\n   TCP SHOULD generate\
    \ its Initial Sequence Numbers with the expression:\n      ISN = M + F(localip,\
    \ localport, remoteip, remoteport, secretkey)\n   where M is the 4 microsecond\
    \ timer, and F() is a pseudorandom\n   function (PRF) of the connection-id.  F()\
    \ MUST NOT be computable from\n   the outside, or an attacker could still guess\
    \ at sequence numbers\n   from the ISN used for some other connection.  The PRF\
    \ could be\n   implemented as a cryptographic hash of the concatenation of the\n\
    \   connection-id and some secret data; MD5 [RFC1321] would be a good\n   choice\
    \ for the hash function.\n   The result of F() is no more secure than the secret\
    \ key.  If an\n   attacker is aware of which cryptographic hash function is being\
    \ used\n   by the victim (which we should expect), and the attacker can obtain\n\
    \   enough material (i.e., ISNs selected by the victim), the attacker may\n  \
    \ simply search the entire secret-key space to find matches.  To\n   protect against\
    \ this, the secret key should be of a reasonable\n   length.  Key lengths of 128\
    \ bits should be adequate.  The secret key\n   can either be a true random number\
    \ [RFC4086] or some per-host secret.\n   A possible mechanism for protecting the\
    \ secret key would be to change\n   it on occasion.  For example, the secret key\
    \ could be changed\n   whenever one of the following events occur:\n   o  The\
    \ system is being bootstrapped (e.g., the secret key could be a\n      combination\
    \ of some secret and the boot time of the machine).\n   o  Some predefined/random\
    \ time has expired.\n   o  The secret key has been used sufficiently often that\
    \ it should be\n      regarded as insecure at that point.\n   Note that changing\
    \ the secret would change the ISN space used for\n   reincarnated connections,\
    \ and thus could cause the 4.4BSD heuristics\n   to fail; to maintain safety,\
    \ either dead connection state could be\n   kept or a quiet time observed for\
    \ two maximum segment lifetimes\n   before such a change.\n   It should be noted\
    \ that while there have been concerns about the\n   security properties of MD5\
    \ [RFC6151], the algorithm specified in this\n   document simply aims at reducing\
    \ the chances of an off-path attacker\n   guessing the ISN of a new connection,\
    \ and thus in our threat model it\n   is not worth the effort for an attacker\
    \ to try to learn the secret\n   key.  Since MD5 is faster than other \"stronger\"\
    \ alternatives, and is\n   used in virtually all existing implementations of this\
    \ algorithm, we\n   consider that use of MD5 in the specified algorithm is acceptable.\n\
    \   However, implementations should consider the trade-offs involved in\n   using\
    \ functions with stronger security properties, and employ them if\n   it is deemed\
    \ appropriate.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Good sequence numbers are not a replacement for\
    \ cryptographic\n   authentication, such as that provided by IPsec [RFC4301] or\
    \ the TCP\n   Authentication Option (TCP-AO) [RFC5925].  At best, they are a\n\
    \   palliative measure.\n   If random numbers are used as the sole source of the\
    \ secret, they\n   MUST be chosen in accordance with the recommendations given\
    \ in\n   [RFC4086].\n   A security consideration that should be made about the\
    \ algorithm\n   proposed in this document is that it might allow an attacker to\
    \ count\n   the number of systems behind a Network Address Translator (NAT)\n\
    \   [RFC3022].  Depending on the ISN generators implemented by each of\n   the\
    \ systems behind the NAT, an attacker might be able to count the\n   number of\
    \ systems behind a NAT by establishing a number of TCP\n   connections (using\
    \ the public address of the NAT) and identifying the\n   number of different sequence\
    \ number \"spaces\".  [Gont2009] discusses\n   how this and other information\
    \ leakages at NATs could be mitigated.\n   An eavesdropper who can observe the\
    \ initial messages for a connection\n   can determine its sequence number state,\
    \ and may still be able to\n   launch sequence number guessing attacks by impersonating\
    \ that\n   connection.  However, such an eavesdropper can also hijack existing\n\
    \   connections [Joncheray1995], so the incremental threat is not that\n   high.\
    \  Still, since the offset between a fake connection and a given\n   real connection\
    \ will be more or less constant for the lifetime of the\n   secret, it is important\
    \ to ensure that attackers can never capture\n   such packets.  Typical attacks\
    \ that could disclose them include both\n   eavesdropping and the variety of routing\
    \ attacks discussed in\n   [Bellovin1989].\n   Off-path attacks against TCP connections\
    \ require the attacker to\n   guess or know the four-tuple (localip, localport,\
    \ remoteip,\n   remoteport) that identifies the target connection.  TCP port number\n\
    \   randomization [RFC6056] reduces the chances of an attacker of\n   guessing\
    \ such a four-tuple by obfuscating the selection of TCP\n   ephemeral ports, therefore\
    \ contributing to the mitigation of such\n   attacks.  [RFC6056] provides advice\
    \ on the selection of TCP ephemeral\n   ports, such that the overall protection\
    \ of TCP connections against\n   off-path attacks is improved.\n   [CPNI-TCP]\
    \ contains a discussion of all the currently known attacks\n   that require an\
    \ attacker to know or be able to guess the TCP sequence\n   numbers in use by\
    \ the target connection.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   Matt Blaze and Jim Ellis contributed some crucial ideas\
    \ to RFC 1948,\n   on which this document is based.  Frank Kastenholz contributed\n\
    \   constructive comments to that memo.\n   The authors of this document would\
    \ like to thank (in chronological\n   order) Alfred Hoenes, Lloyd Wood, Lars Eggert,\
    \ Joe Touch, William\n   Allen Simpson, Tim Shepard, Wesley Eddy, Anantha Ramaiah,\
    \ and Ben\n   Campbell for providing valuable comments on draft versions of this\n\
    \   document.\n   Fernando Gont wishes to thank Jorge Oscar Gont, Nelida Garcia,\
    \ and\n   Guillermo Gont for their love and support, and Daniel Bellomo and\n\
    \   Christian O'Flaherty for their support in his Internet engineering\n   activities.\n\
    \   Fernando Gont's attendance to IETF meetings was supported by ISOC's\n   \"\
    Fellowship to the IETF\" program.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC0793]         Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n                     RFC 793, September 1981.\n   [RFC1321]\
    \         Rivest, R., \"The MD5 Message-Digest Algorithm\",\n                \
    \     RFC 1321, April 1992.\n   [RFC1323]         Jacobson, V., Braden, B., and\
    \ D. Borman, \"TCP\n                     Extensions for High Performance\", RFC\
    \ 1323,\n                     May 1992.\n   [RFC2119]         Bradner, S., \"\
    Key words for use in RFCs to Indicate\n                     Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC4086]         Eastlake, D., Schiller,\
    \ J., and S. Crocker,\n                     \"Randomness Requirements for Security\"\
    , BCP 106,\n                     RFC 4086, June 2005.\n   [RFC6056]         Larsen,\
    \ M. and F. Gont, \"Recommendations for\n                     Transport-Protocol\
    \ Port Randomization\", BCP 156,\n                     RFC 6056, January 2011.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [Bellovin1989]    Morris, R., \"Security Problems\
    \ in the TCP/IP\n                     Protocol Suite\", Computer Communications\
    \ Review,\n                     vol. 19, no. 2, pp. 32-48, 1989.\n   [CERT2001]\
    \        CERT, \"CERT Advisory CA-2001-09: Statistical\n                     Weaknesses\
    \ in TCP/IP Initial Sequence Numbers\",\n                     http://www.cert.org/advisories/CA-2001-09.html,\n\
    \                     2001.\n   [CPNI-TCP]        CPNI, \"Security Assessment\
    \ of the Transmission\n                     Control Protocol (TCP)\",  http://www.gont.com.ar/\n\
    \                     papers/tn-03-09-security-assessment-TCP.pdf, 2009.\n   [Gont2009]\
    \        Gont, F. and P. Srisuresh, \"Security implications\n                \
    \     of Network Address Translators (NATs)\", Work\n                     in Progress,\
    \ October 2009.\n   [Joncheray1995]   Joncheray, L., \"A Simple Active Attack\
    \ Against\n                     TCP\", Proc. Fifth Usenix UNIX Security Symposium,\n\
    \                     1995.\n   [Morris1985]      Morris, R., \"A Weakness in\
    \ the 4.2BSD UNIX TCP/IP\n                     Software\", CSTR 117, AT&T Bell\
    \ Laboratories, Murray\n                     Hill, NJ, 1985.\n   [RFC0854]   \
    \      Postel, J. and J. Reynolds, \"Telnet Protocol\n                     Specification\"\
    , STD 8, RFC 854, May 1983.\n   [RFC1034]         Mockapetris, P., \"Domain names\
    \ - concepts and\n                     facilities\", STD 13, RFC 1034, November\
    \ 1987.\n   [RFC1948]         Bellovin, S., \"Defending Against Sequence Number\n\
    \                     Attacks\", RFC 1948, May 1996.\n   [RFC3022]         Srisuresh,\
    \ P. and K. Egevang, \"Traditional IP\n                     Network Address Translator\
    \ (Traditional NAT)\",\n                     RFC 3022, January 2001.\n   [RFC4120]\
    \         Neuman, C., Yu, T., Hartman, S., and K. Raeburn,\n                 \
    \    \"The Kerberos Network Authentication Service (V5)\",\n                 \
    \    RFC 4120, July 2005.\n   [RFC4251]         Ylonen, T. and C. Lonvick, \"\
    The Secure Shell (SSH)\n                     Protocol Architecture\", RFC 4251,\
    \ January 2006.\n   [RFC4301]         Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n                     Internet Protocol\", RFC 4301, December 2005.\n\
    \   [RFC4954]         Siemborski, R. and A. Melnikov, \"SMTP Service\n       \
    \              Extension for Authentication\", RFC 4954, July 2007.\n   [RFC5321]\
    \         Klensin, J., \"Simple Mail Transfer Protocol\",\n                  \
    \   RFC 5321, October 2008.\n   [RFC5925]         Touch, J., Mankin, A., and R.\
    \ Bonica, \"The TCP\n                     Authentication Option\", RFC 5925, June\
    \ 2010.\n   [RFC5936]         Lewis, E. and A. Hoenes, \"DNS Zone Transfer\n \
    \                    Protocol (AXFR)\", RFC 5936, June 2010.\n   [RFC6151]   \
    \      Turner, S. and L. Chen, \"Updated Security\n                     Considerations\
    \ for the MD5 Message-Digest and the\n                     HMAC-MD5 Algorithms\"\
    , RFC 6151, March 2011.\n   [Shimomura1995]   Shimomura, T., \"Technical details\
    \ of the attack\n                     described by Markoff in NYT\",\n       \
    \              http://www.gont.com.ar/docs/post-shimomura-\n                 \
    \    usenet.txt, Message posted in USENET's\n                     comp.security.misc\
    \ newsgroup, Message-ID:\n                     <3g5gkl$5j1@ariel.sdsc.edu>, 1995.\n\
    \   [Silbersack2005]  Silbersack, M., \"Improving TCP/IP security through\n  \
    \                   randomization without sacrificing\n                     interoperability\"\
    , EuroBSDCon 2005 Conference.\n   [USCERT2001]      US-CERT, \"US-CERT Vulnerability\
    \ Note VU#498440:\n                     Multiple TCP/IP implementations may use\n\
    \                     statistically predictable initial sequence\n           \
    \          numbers\",  http://www.kb.cert.org/vuls/id/498440,\n              \
    \       2001.\n   [Wright1994]      Wright, G. and W. Stevens, \"TCP/IP Illustrated,\n\
    \                     Volume 2: The Implementation\", Addison-Wesley,\n      \
    \               1994.\n   [Zalewski2001]    Zalewski, M., \"Strange Attractors\
    \ and TCP/IP\n                     Sequence Number Analysis\",\n             \
    \        http://lcamtuf.coredump.cx/oldtcp/tcpseq.html,\n                    \
    \ 2001.\n   [Zalewski2002]    Zalewski, M., \"Strange Attractors and TCP/IP\n\
    \                     Sequence Number Analysis - One Year Later\",\n         \
    \             http://lcamtuf.coredump.cx/newtcp/, 2002.\n"
- title: Appendix A.  Address-Based Trust-Relationship Exploitation Attacks
  contents:
  - "Appendix A.  Address-Based Trust-Relationship Exploitation Attacks\n   This section\
    \ discusses the trust-relationship exploitation attack\n   that originally motivated\
    \ the publication of RFC 1948 [RFC1948].  It\n   should be noted that while RFC\
    \ 1948 focused its discussion of\n   address-based trust-relationship exploitation\
    \ attacks on Telnet\n   [RFC0854] and the various UNIX \"r\" commands, both Telnet\
    \ and the\n   various \"r\" commands have since been largely replaced by secure\n\
    \   counterparts (such as SSH [RFC4251]) for the purpose of remote login\n   and\
    \ remote command execution.  Nevertheless, address-based trust\n   relationships\
    \ are still employed nowadays in some scenarios.  For\n   example, some SMTP [RFC5321]\
    \ deployments still authenticate their\n   users by means of their IP addresses,\
    \ even when more appropriate\n   authentication mechanisms are available [RFC4954].\
    \  Another example\n   is the authentication of DNS secondary servers [RFC1034]\
    \ by means of\n   their IP addresses for allowing DNS zone transfers [RFC5936],\
    \ or any\n   other access control mechanism based on IP addresses.\n   In 1985,\
    \ Morris [Morris1985] described a form of attack based on\n   guessing what sequence\
    \ numbers TCP [RFC0793] will use for new\n   connections.  Briefly, the attacker\
    \ gags a host trusted by the\n   target, impersonates the IP address of the trusted\
    \ host when talking\n   to the target, and completes the three-way handshake based\
    \ on its\n   guess at the next ISN to be used.  An ordinary connection to the\n\
    \   target is used to gather sequence number state information.  This\n   entire\
    \ sequence, coupled with address-based authentication, allows\n   the attacker\
    \ to execute commands on the target host.\n   Clearly, the proper solution for\
    \ these attacks is cryptographic\n   authentication [RFC4301] [RFC4120] [RFC4251].\n\
    \   The following subsection provides technical details for the trust-\n   relationship\
    \ exploitation attack described by Morris [Morris1985].\n"
- title: A.1.  Blind TCP Connection-Spoofing
  contents:
  - "A.1.  Blind TCP Connection-Spoofing\n   In order to understand the particular\
    \ case of sequence number\n   guessing, one must look at the three-way handshake\
    \ used in the TCP\n   open sequence [RFC0793].  Suppose client machine A wants\
    \ to talk to\n   rsh server B.  It sends the following message:\n            \
    \                  A->B: SYN, ISNa\n   That is, it sends a packet with the SYN\
    \ (\"synchronize sequence\n   number\") bit set and an initial sequence number\
    \ ISNa.\n   B replies with\n                         B->A: SYN, ISNb, ACK(ISNa)\n\
    \   In addition to sending its own ISN, it acknowledges A's.  Note that\n   the\
    \ actual numeric value ISNa must appear in the message.\n   A concludes the handshake\
    \ by sending\n                              A->B: ACK(ISNb)\n   RFC 793 [RFC0793]\
    \ specifies that the 32-bit counter be incremented by\n   1 in the low-order position\
    \ about every 4 microseconds.  Instead,\n   Berkeley-derived kernels traditionally\
    \ incremented it by a constant\n   every second, and by another constant for each\
    \ new connection.  Thus,\n   if you opened a connection to a machine, you knew\
    \ to a very high\n   degree of confidence what sequence number it would use for\
    \ its next\n   connection.  And therein lied the vulnerability.\n   The attacker\
    \ X first opens a real connection to its target B -- say,\n   to the mail port\
    \ or the TCP echo port.  This gives ISNb.  It then\n   impersonates A and sends\n\
    \                              Ax->B: SYN, ISNx\n   where \"Ax\" denotes a packet\
    \ sent by X pretending to be A.\n   B's response to X's original SYN (so to speak)\n\
    \                        B->A: SYN, ISNb', ACK(ISNx)\n   goes to the legitimate\
    \ A, about which more anon.  X never sees that\n   message but can still send\n\
    \                             Ax->B: ACK(ISNb')\n   using the predicted value\
    \ for ISNb'.  If the guess is right -- and\n   usually it will be, if the sequence\
    \ numbers are weak -- B's rsh\n   server thinks it has a legitimate connection\
    \ with A, when in fact X\n   is sending the packets.  X can't see the output from\
    \ this session,\n   but it can execute commands as more or less any user -- and\
    \ in that\n   case, the game is over and X has won.\n   There is a minor difficulty\
    \ here.  If A sees B's message, it will\n   realize that B is acknowledging something\
    \ it never sent, and will\n   send a RST packet in response to tear down the connection.\
    \  However,\n   an attacker could send the TCP segments containing the commands\
    \ to be\n   executed back-to-back with the segments required to establish the\
    \ TCP\n   connection, and thus by the time the connection is reset, the\n   attacker\
    \ has already won.\n      In the past, attackers exploited a common TCP implementation\
    \ bug\n      to prevent the connection from being reset (see subsection \"A\n\
    \      Common TCP Bug\" in [RFC1948]).  However, all TCP implementations\n   \
    \   that used to implement this bug have been fixed for a long time.\n"
- title: Appendix B.  Changes from RFC 1948
  contents:
  - "Appendix B.  Changes from RFC 1948\n   o  This document is Standards Track (rather\
    \ than Informational).\n   o  Formal requirements [RFC2119] are specified.\n \
    \  o  The discussion of address-based trust-relationship attacks has\n      been\
    \ updated and moved to an appendix.\n   o  The subsection entitled \"A Common\
    \ TCP Bug\" (describing a common\n      bug in the BSD TCP implementation) has\
    \ been removed.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Fernando Gont\n   SI6 Networks / UTN-FRH\n   Evaristo\
    \ Carriego 2644\n   Haedo, Provincia de Buenos Aires  1706\n   Argentina\n   Phone:\
    \ +54 11 4650 8472\n   EMail: fgont@si6networks.com\n   URI:   http://www.si6networks.com\n\
    \   Steven M. Bellovin\n   Columbia University\n   1214 Amsterdam Avenue\n   MC\
    \ 0401\n   New York, NY  10027\n   US\n   Phone: +1 212 939 7149\n   EMail: bellovin@acm.org\n"
