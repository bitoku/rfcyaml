- title: __initial_text__
  contents:
  - "           Internet Key Exchange Protocol Version 2 (IKEv2)\n               \
    \            Session Resumption\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet Key Exchange version 2 (IKEv2) protocol has a certain\n\
    \   computational and communication overhead with respect to the number\n   of\
    \ round trips required and the cryptographic operations involved.\n   In remote\
    \ access situations, the Extensible Authentication Protocol\n   (EAP) is used\
    \ for authentication, which adds several more round trips\n   and consequently\
    \ latency.\n   To re-establish security associations (SAs) upon a failure recovery\n\
    \   condition is time consuming especially when an IPsec peer (such as a\n   VPN\
    \ gateway) needs to re-establish a large number of SAs with various\n   endpoints.\
    \  A high number of concurrent sessions might cause\n   additional problems for\
    \ an IPsec peer during SA re-establishment.\n   In order to avoid the need to\
    \ re-run the key exchange protocol from\n   scratch, it would be useful to provide\
    \ an efficient way to resume an\n   IKE/IPsec session.  This document proposes\
    \ an extension to IKEv2 that\n   allows a client to re-establish an IKE SA with\
    \ a gateway in a highly\n   efficient manner, utilizing a previously established\
    \ IKE SA.\n   A client can reconnect to a gateway from which it was disconnected.\n\
    \   The proposed approach encodes partial IKE state into an opaque\n   ticket,\
    \ which can be stored on the client or in a centralized store,\n   and is later\
    \ made available to the IKEv2 responder for re-\n   authentication.  We use the\
    \ term ticket to refer to the opaque data\n   that is created by the IKEv2 responder.\
    \  This document does not\n   specify the format of the ticket but examples are\
    \ provided.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5723.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................5\n  \
    \ 3. Usage Scenario ..................................................5\n   4.\
    \ Protocol Sequences ..............................................7\n      4.1.\
    \ Requesting a Ticket ........................................7\n      4.2. Receiving\
    \ a Ticket .........................................8\n      4.3. Presenting a\
    \ Ticket ........................................9\n           4.3.1. Prologue\
    \ ............................................9\n           4.3.2. IKE_SESSION_RESUME\
    \ Exchange ........................10\n           4.3.3. IKE_AUTH Exchange ..................................11\n\
    \           4.3.4. Epilogue ...........................................12\n  \
    \ 5. IKE and IPsec State after Resumption ...........................12\n    \
    \  5.1. Generating Cryptographic Material for the Resumed IKE SA ..15\n   6. Ticket\
    \ Handling ................................................16\n      6.1. Ticket\
    \ Content ............................................16\n      6.2. Ticket Identity\
    \ and Lifecycle .............................16\n   7. IKE Notifications ..............................................17\n\
    \      7.1. TICKET_LT_OPAQUE Notify Payload ...........................17\n  \
    \    7.2. TICKET_OPAQUE Notify Payload ..............................18\n   8.\
    \ IANA Considerations ............................................18\n   9. Security\
    \ Considerations ........................................19\n      9.1. Stolen\
    \ Tickets ............................................19\n      9.2. Forged Tickets\
    \ ............................................19\n      9.3. Denial-of-Service\
    \ Attacks .................................20\n      9.4. Detecting the Need for\
    \ Resumption .........................20\n      9.5. Key Management for \"Tickets\
    \ by Value\" .....................20\n      9.6. Ticket Lifetime ...........................................21\n\
    \      9.7. Tickets and Identity ......................................21\n  \
    \    9.8. Ticket Revocation .........................................21\n    \
    \  9.9. Ticket by Value Format ....................................21\n      9.10.\
    \ Identity Privacy, Anonymity, and Unlinkability ...........22\n   10. Acknowledgements\
    \ ..............................................22\n   11. References ....................................................23\n\
    \      11.1. Normative References .....................................23\n  \
    \    11.2. Informative References ...................................23\n   Appendix\
    \ A.  Ticket Format ........................................25\n     A.1.  Example\
    \ \"Ticket by Value\" Format ..........................25\n     A.2.  Example\
    \ \"Ticket by Reference\" Format ......................25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Internet Key Exchange version 2 (IKEv2) protocol has\
    \ a certain\n   computational and communication overhead with respect to the number\n\
    \   of round trips required and the cryptographic operations involved.\n   In\
    \ particular, the Extensible Authentication Protocol (EAP) is used\n   for authentication\
    \ in remote access cases, which increases latency.\n   To re-establish security\
    \ associations (SAs) upon a failure recovery\n   condition is time-consuming,\
    \ especially when an IPsec peer, such as a\n   VPN gateway, needs to re-establish\
    \ a large number of SAs with various\n   endpoints.  A high number of concurrent\
    \ sessions might cause\n   additional problems for an IPsec responder.  Usability\
    \ is also\n   affected when the re-establishment of an IKE SA involves user\n\
    \   interaction for re-authentication.\n   In many failure cases, it would be\
    \ useful to provide an efficient way\n   to resume an interrupted IKE/IPsec session.\
    \  This document proposes\n   an extension to IKEv2 that allows a client to re-establish\
    \ an IKE SA\n   with a gateway in a highly efficient manner, utilizing a previously\n\
    \   established IKE SA.\n   The client (IKEv2 initiator) stores the state about\
    \ the previous IKE\n   SA locally.  The gateway (IKEv2 responder) has two options\
    \ for\n   maintaining the IKEv2 state about the previous IKE SA:\n   o  In the\
    \ \"ticket by reference\" approach, the gateway stores the\n      state locally,\
    \ and gives the client a protected and opaque\n      reference (e.g., an index\
    \ to the gateway's table) that the gateway\n      can later use to find the state.\
    \  The client includes this opaque\n      reference when it resumes the session.\n\
    \   o  In the \"ticket by value\" approach, the gateway stores its state in\n\
    \      a ticket (data structure) that is encrypted and integrity-\n      protected\
    \ by a key known only to the gateway.  The ticket is\n      passed to the client\
    \ (who treats the ticket as an opaque string)\n      and sent back to the gateway\
    \ when the session is resumed.  The\n      gateway can then decrypt the ticket\
    \ and recover the state.\n   Note that the client behaves identically in both\
    \ cases, and in\n   general does not know which approach the gateway is using.\
    \  Since the\n   ticket (or reference) is only interpreted by the same party that\n\
    \   created it, this document does not specify the exact format for it.\n   However,\
    \ Appendix A contains examples for both \"ticket by reference\"\n   and \"ticket\
    \ by value\" formats.\n   This approach is similar to the one taken by Transport\
    \ Layer Security\n   (TLS) session resumption [RFC5077] with the required adaptations\
    \ for\n   IKEv2, e.g., to accommodate the two-phase protocol structure.  We\n\
    \   have borrowed heavily from that specification.\n   The proposed solution should\
    \ additionally meet the following goals:\n   o  Using only symmetric cryptography\
    \ to minimize CPU consumption.\n   o  Providing cryptographic agility.\n   o \
    \ Having no negative impact on IKEv2 security features.\n   The following are\
    \ non-goals of this solution:\n   o  Failover from one gateway to another.  This\
    \ use case may be added\n      in a future specification.\n   o  Providing load\
    \ balancing among gateways.\n   o  Specifying how a client detects the need for\
    \ resumption.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   This document uses terminology defined in [RFC4301] and [RFC4306].\n   In\
    \ addition, this document uses the following term:\n   Ticket:  An IKEv2 ticket\
    \ is a data structure that contains all the\n      necessary information that\
    \ allows an IKEv2 responder to re-\n      establish an IKEv2 security association.\n\
    \   In this document, we use the term \"ticket\" and thereby refer to an\n   opaque\
    \ data structure that may either contain IKEv2 state as\n   described above or\
    \ a reference pointing to such state.\n"
- title: 3.  Usage Scenario
  contents:
  - "3.  Usage Scenario\n   This specification envisions two usage scenarios for efficient\
    \ IKEv2\n   and IPsec SA session re-establishment.\n   The first is similar to\
    \ the use case specified in Section 1.1.3 of\n   the IKEv2 specification [RFC4306],\
    \ where the IPsec tunnel mode is\n   used to establish a secure channel between\
    \ a remote access client and\n   a gateway; the traffic flow may be between the\
    \ client and entities\n   beyond the gateway.  This scenario is further discussed\
    \ below.\n   The second use case focuses on the usage of transport (or tunnel)\n\
    \   mode to secure the communicate between two endpoints (e.g., two\n   servers).\
    \  The two endpoints have a client-server relationship with\n   respect to a protocol\
    \ that runs using the protections afforded by the\n   IPsec SA.\n    (a)\n   \
    \ +-+-+-+-+-+                          +-+-+-+-+-+\n    |         |      IKEv2/IKEv2-EAP\
    \     |         |     Protected\n    | Remote  |<------------------------>|  \
    \       |     Subnet\n    | Access  |                          | Access  |<---\
    \ and/or\n    | Client  |<------------------------>| Gateway |     Internet\n\
    \    |         |      IPsec tunnel        |         |\n    +-+-+-+-+-+       \
    \                   +-+-+-+-+-+\n    (b)\n    +-+-+-+-+-+                    \
    \      +-+-+-+-+-+\n    |         |    IKE_SESSION_RESUME    |         |\n   \
    \ | Remote  |<------------------------>|         |\n    | Access  |          \
    \                | Access  |\n    | Client  |<------------------------>| Gateway\
    \ |\n    |         |      IPsec tunnel        |         |\n    +-+-+-+-+-+   \
    \                       +-+-+-+-+-+\n         Figure 1: Resuming a Session with\
    \ a Remote Access Gateway\n   In the first use case above, an end host (an entity\
    \ with a host\n   implementation of IPsec [RFC4301]) establishes a tunnel mode\
    \ IPsec SA\n   with a gateway in a remote network using IKEv2.  The end host in\
    \ this\n   scenario is sometimes referred to as a remote access client.  At a\n\
    \   later stage, when a client needs to re-establish the IKEv2 session,\n   it\
    \ may choose to establish IPsec SAs using a full IKEv2 exchange or\n   the IKE_SESSION_RESUME\
    \ exchange (shown in Figure 1).\n   For either of the above use cases, there are\
    \ multiple possible\n   situations where the mechanism specified in this document\
    \ could be\n   useful.  These include the following (note that this list is not\n\
    \   meant to be exhaustive, and any particular deployment may not care\n   about\
    \ all of these):\n   o  If a client temporarily loses network connectivity (and\
    \ the IKE SA\n      times out through the liveness test facility, a.k.a. \"dead\
    \ peer\n      detection\"), this mechanism could be used to re-establish the SA\n\
    \      with less overhead (network, CPU, authentication infrastructure)\n    \
    \  and without requiring user interaction for authentication.\n   o  If the connectivity\
    \ problems affect a large number of clients\n      (e.g., a large remote access\
    \ VPN gateway), when the connectivity\n      is restored, all the clients might\
    \ reconnect almost\n      simultaneously.  This mechanism could be used to reduce\
    \ the load\n      spike for cryptographic operations and authentication\n    \
    \  infrastructure.\n   o  Losing connectivity can also be predictable and planned;\
    \ for\n      example, putting a laptop to \"stand-by\" mode before traveling.\n\
    \      This mechanism could be used to re-establish the SA when the\n      laptop\
    \ is switched back on (again, with less overhead and without\n      requiring\
    \ user interaction for authentication).  However, such\n      user-level \"resumption\"\
    \ may often be disallowed by policy.\n      Moreover, this document requires the\
    \ client to destroy the ticket\n      when the user explicitly \"logs out\" (Section\
    \ 6.2).\n"
- title: 4.  Protocol Sequences
  contents:
  - "4.  Protocol Sequences\n   This section provides protocol details and contains\
    \ the normative\n   parts.  This document defines two protocol exchanges, namely\n\
    \   requesting a ticket, see Section 4.1, and presenting a ticket, see\n   Section\
    \ 4.3.\n"
- title: 4.1.  Requesting a Ticket
  contents:
  - "4.1.  Requesting a Ticket\n   A client MAY request a ticket in the following\
    \ exchanges:\n   o  In an IKE_AUTH exchange, as shown in the example message exchange\n\
    \      in Figure 2 below.\n   o  In a CREATE_CHILD_SA exchange, when an IKE SA\
    \ is rekeyed (and only\n      when this exchange is initiated by the client).\n\
    \   o  In an Informational exchange at any time, e.g., if the gateway\n      previously\
    \ replied with an N(TICKET_ACK) instead of providing a\n      ticket, or when\
    \ the ticket lifetime is about to expire, or\n      following a gateway-initiated\
    \ IKE rekey.  All such Informational\n      exchanges MUST be initiated by the\
    \ client.\n   o  While resuming an IKE session, i.e., in the IKE_AUTH exchange\
    \ that\n      follows an IKE_SESSION_RESUME exchange, see Section 4.3.3.\n   Normally,\
    \ a client requests a ticket in the third message of an IKEv2\n   exchange (the\
    \ first of IKE_AUTH).  Figure 2 shows the message\n   exchange for this typical\
    \ case.\n      Initiator                Responder\n     -----------          \
    \    -----------\n    HDR, SAi1, KEi, Ni  -->\n                        <--   \
    \ HDR, SAr1, KEr, Nr [, CERTREQ]\n    HDR, SK {IDi, [CERT,] [CERTREQ,] [IDr,]\n\
    \    AUTH, SAi2, TSi, TSr, N(TICKET_REQUEST)}     -->\n        Figure 2: Example\
    \ Message Exchange for Requesting a Ticket\n   The notification payloads are described\
    \ in Section 7.  The above is\n   an example, and IKEv2 allows a number of variants\
    \ on these messages.\n   Refer to [RFC4306] and [IKEV2-BIS] for more details on\
    \ IKEv2.\n   When an IKEv2 responder receives a request for a ticket using the\n\
    \   N(TICKET_REQUEST) payload, it MUST perform one of the following\n   operations\
    \ if it supports the extension defined in this document:\n   o  it creates a ticket\
    \ and returns it with the N(TICKET_LT_OPAQUE)\n      payload in a subsequent message\
    \ towards the IKEv2 initiator.  This\n      is shown in Figure 3.\n   o  it returns\
    \ an N(TICKET_NACK) payload, if it refuses to grant a\n      ticket for some reason.\n\
    \   o  it returns an N(TICKET_ACK), if it cannot grant a ticket\n      immediately,\
    \ e.g., due to packet size limitations.  In this case,\n      the client MAY request\
    \ a ticket later using an Informational\n      exchange, at any time during the\
    \ lifetime of the IKE SA.\n   Regardless of this choice, there is no change to\
    \ the behavior of the\n   responder with respect to the IKE exchange, and the\
    \ proper IKE\n   response (e.g., an IKE_AUTH response or an error notification)\
    \ MUST\n   be sent.\n"
- title: 4.2.  Receiving a Ticket
  contents:
  - "4.2.  Receiving a Ticket\n   The IKEv2 initiator receives the ticket and may\
    \ accept it, provided\n   the IKEv2 exchange was successful.  The ticket may be\
    \ used later with\n   an IKEv2 responder that supports this extension.  Figure\
    \ 3 shows how\n   the initiator receives the ticket.\n      Initiator        \
    \        Responder\n     -----------              -----------\n            <--\
    \    HDR, SK {IDr, [CERT,] AUTH, SAr2, TSi,\n                        TSr, N(TICKET_LT_OPAQUE)\
    \ }\n                       Figure 3: Receiving a Ticket\n   When a multi-round-trip\
    \ IKE_AUTH exchange is used, the\n   N(TICKET_REQUEST) payload MUST be included\
    \ in the first IKE_AUTH\n   request, and N(TICKET_LT_OPAQUE) (or TICKET_NACK/TICKET_ACK)\
    \ MUST\n   only be returned in the final IKE_AUTH response.\n   When the client\
    \ accepts the ticket, it stores it in its local storage\n   for later use, along\
    \ with the IKE SA to which the ticket refers.\n   Since the ticket itself is opaque\
    \ to the client, the local storage\n   MUST also include all items marked as \"\
    from the ticket\" in the table\n   of Section 5.\n"
- title: 4.3.  Presenting a Ticket
  contents:
  - "4.3.  Presenting a Ticket\n   When the client wishes to recover from an interrupted\
    \ session, it\n   presents the ticket to resume the session.  This section describes\n\
    \   the resumption process, consisting of some preparations, an\n   IKE_SESSION_RESUME\
    \ exchange, an IKE_AUTH exchange and finalization.\n"
- title: 4.3.1.  Prologue
  contents:
  - "4.3.1.  Prologue\n   It is up to the client's local policy to decide when the\n\
    \   communication with the IKEv2 responder is seen as interrupted and the\n  \
    \ session resumption procedure is to be initiated.\n   A client MAY initiate a\
    \ regular (non-ticket-based) IKEv2 exchange\n   even if it is in possession of\
    \ a valid, unexpired ticket.  A client\n   MUST NOT present a ticket when it knows\
    \ that the ticket's lifetime\n   has expired.\n   Tickets are intended for one-time\
    \ use, i.e., a client MUST NOT reuse\n   a ticket.  A reused ticket SHOULD be\
    \ rejected by a gateway.  Note\n   that a ticket is considered as used only when\
    \ an IKE SA has been\n   established successfully with it.\n"
- title: 4.3.2.  IKE_SESSION_RESUME Exchange
  contents:
  - "4.3.2.  IKE_SESSION_RESUME Exchange\n   This document specifies a new IKEv2 exchange\
    \ type called\n   IKE_SESSION_RESUME whose value is 38.  This exchange is equivalent\
    \ to\n   the IKE_SA_INIT exchange, and MUST be followed by an IKE_AUTH\n   exchange.\
    \  The client SHOULD NOT use this exchange type unless it\n   knows that the gateway\
    \ supports it (this condition is trivially true\n   in the context of the current\
    \ document, since the client always\n   resumes into the same gateway that generated\
    \ the ticket).\n     Initiator                Responder\n    -----------     \
    \         -----------\n    HDR, [N(COOKIE),] Ni, N(TICKET_OPAQUE) [,N+]   -->\n\
    \           Figure 4: IKEv2 Initiator Wishes to Resume an IKE SA\n   The exchange\
    \ type in HDR is set to 'IKE_SESSION_RESUME'.  The\n   initiator sets the SPIi\
    \ (Security Parameter Index, Initiator) value\n   in the HDR to a new, unique\
    \ value and the SPIr value is set to 0.\n   When the IKEv2 responder receives\
    \ a ticket using the N(TICKET_OPAQUE)\n   payload, it MUST perform one of the\
    \ following steps if it supports\n   the extension defined in this document:\n\
    \   o  If it is willing to accept the ticket, it responds as shown in\n      Figure\
    \ 5.\n   o  It responds with an unprotected N(TICKET_NACK) notification, if it\n\
    \      rejects the ticket for any reason.  In that case, the initiator\n     \
    \ should re-initiate a regular IKE exchange.  One such case is when\n      the\
    \ responder receives a ticket for an IKE SA that has previously\n      been terminated\
    \ on the responder itself, which may indicate\n      inconsistent state between\
    \ the IKEv2 initiator and the responder.\n      However, a responder is not required\
    \ to maintain the state for\n      terminated sessions.\n     Initiator      \
    \          Responder\n    -----------              -----------\n             \
    \       <--  HDR, Nr [,N+]\n               Figure 5: IKEv2 Responder Accepts the\
    \ Ticket\n   Again, the exchange type in HDR is set to 'IKE_SESSION_RESUME'. \
    \ The\n   responder copies the SPIi value from the request, and the SPIr value\n\
    \   is set to a new, unique value.\n   Where not specified otherwise, the IKE_SESSION_RESUME\
    \ exchange\n   behaves exactly like the IKE_SA_INIT exchange.  Specifically:\n\
    \   o  The client MAY resume the IKE exchange from any IP address and\n      port,\
    \ regardless of its original address.  The gateway MAY reject\n      the resumed\
    \ exchange if its policy depends on the client's address\n      (although this\
    \ rarely makes sense).\n   o  The first message MAY be rejected in denial-of-service\
    \ (DoS)\n      situations, with the initiator instructed to send a cookie.\n \
    \  o  Notifications normally associated with IKE_SA_INIT can be sent.\n      In\
    \ particular, NAT detection payloads.\n   o  The client's NAT traversal status\
    \ SHOULD be determined anew in\n      IKE_SESSION_RESUME.  If NAT is detected,\
    \ the initiator switches to\n      UDP encapsulation on port 4500, as per [RFC4306],\
    \ Section 2.23.\n      NAT status is explicitly not part of the session resumption\
    \ state.\n   o  The SPI values and Message ID fields behave similarly to\n   \
    \   IKE_SA_INIT.\n   Although the IKE SA is not fully valid until the completion\
    \ of the\n   IKE_AUTH exchange, the peers must create much of the SA state\n \
    \  (Section 5) now.  Specifically, the shared key values are required to\n   protect\
    \ the IKE_AUTH payloads.  Their generation is described in\n   Section 5.1.\n"
- title: 4.3.3.  IKE_AUTH Exchange
  contents:
  - "4.3.3.  IKE_AUTH Exchange\n   Following the IKE_SESSION_RESUME exchange, the\
    \ client MUST initiate\n   an IKE_AUTH exchange, which is largely as specified\
    \ in [RFC4306].\n   This section lists the differences and constraints compared\
    \ to the\n   base document.\n   The value of the AUTH payload is derived in a\
    \ manner similar to the\n   usage of IKEv2 pre-shared secret authentication:\n\
    \            AUTH = prf(SK_px, <message octets>)\n   Each of the initiator and\
    \ responder uses its own value for SK_px,\n   namely SK_pi for the initiator and\
    \ SK_pr for the responder.  Both are\n   taken from the newly generated IKE SA\
    \ (Section 5.1).\n   The exact material to be signed is defined in Section 2.15\
    \ of\n   [RFC4306].\n   The IDi value sent in the IKE_AUTH exchange MUST be identical\
    \ to the\n   value included in the ticket.  A CERT payload MUST NOT be included\
    \ in\n   this exchange, and therefore a new IDr value cannot be negotiated\n \
    \  (since it would not be authenticated).  As a result, the IDr value\n   sent\
    \ (by the gateway, and optionally by the client) in this exchange\n   MUST also\
    \ be identical to the value included in the ticket.\n   When resuming a session,\
    \ a client will typically request a new ticket\n   immediately, so that it is\
    \ able to resume the session again in the\n   case of a second failure.  The N(TICKET_REQUEST)\
    \ and\n   N(TICKET_LT_OPAQUE) notifications will be included in the IKE_AUTH\n\
    \   exchange that follows the IKE_SESSION_RESUME exchange, with similar\n   behavior\
    \ to a ticket request during a regular IKE exchange,\n   Section 4.1.  The returned\
    \ ticket (if any) will correspond to the IKE\n   SA created per the rules described\
    \ in Section 5.\n"
- title: 4.3.4.  Epilogue
  contents:
  - "4.3.4.  Epilogue\n   Following the IKE_AUTH exchange, a new IKE SA is created\
    \ by both\n   parties, see Section 5, and a Child SA is derived, per Section 2.17\n\
    \   of [RFC4306].\n   When the responder receives a ticket for an IKE SA that\
    \ is still\n   active and if the responder accepts it (i.e., following successful\n\
    \   completion of the IKE_AUTH exchange), the old SA SHOULD be silently\n   deleted\
    \ without sending a DELETE informational exchange.\n   Consequently, all the dependent\
    \ IPsec Child SAs are also deleted.\n"
- title: 5.  IKE and IPsec State after Resumption
  contents:
  - "5.  IKE and IPsec State after Resumption\n   During the resumption process, both\
    \ peers create IKE and IPsec state\n   for the resumed IKE SA.  Although the SA\
    \ is only completed following\n   a successful IKE_AUTH exchange, many of its\
    \ components are created\n   earlier, notably the SA's crypto material (Section\
    \ 5.1).\n   When a ticket is presented, the gateway needs to obtain the ticket\n\
    \   state.  In case a \"ticket by reference\" was provided by the client,\n  \
    \ the gateway needs to resolve the reference in order to obtain this\n   state.\
    \  In case the client has already provided a \"ticket by value\",\n   the gateway\
    \ can parse the ticket to obtain the state directly.  In\n   either case, the\
    \ gateway needs to process the ticket state in order\n   to restore the state\
    \ of the old IKE SA, and the client retrieves the\n   same state from its local\
    \ store.\n   The following table describes the IKE and IPsec state of the peers\n\
    \   after session resumption, and how it is related to their state before\n  \
    \ the IKE SA was interrupted.  When the table mentions that a certain\n   state\
    \ item is taken \"from the ticket\", this should be construed as:\n   o  The client\
    \ retrieves this item from its local store.\n   o  In the case of \"ticket by\
    \ value\", the gateway encodes this\n      information in the ticket.\n   o  In\
    \ the case of \"ticket by reference\", the gateway fetches this\n      information\
    \ from the ticket store.\n   +--------------------------------+----------------------------------+\n\
    \   | State Item                     | After Resumption                 |\n  \
    \ +--------------------------------+----------------------------------+\n   |\
    \ IDi                            | From the ticket (but must also   |\n   |  \
    \                              | be exchanged in IKE_AUTH).  See  |\n   |    \
    \                            | also Note 1.                     |\n   |      \
    \                          |                                  |\n   | IDr    \
    \                        | From the ticket (but must also   |\n   |          \
    \                      | be exchanged in IKE_AUTH).       |\n   |            \
    \                    |                                  |\n   | Authentication\
    \ method (PKI,    | From the ticket.                 |\n   | pre-shared secret,\
    \ EAP,        |                                  |\n   | PKI-less EAP [EAP-AUTH]\
    \ etc.)  |                                  |\n   |                          \
    \      |                                  |\n   | Certificates (when applicable)\
    \ | From the ticket, see Note 2.     |\n   |                                |\
    \                                  |\n   | Local IP address/port, peer IP | Selected\
    \ by the client, see Note |\n   | address/port                   | 3.        \
    \                       |\n   |                                |             \
    \                     |\n   | NAT detection status           | From new exchange.\
    \               |\n   |                                |                     \
    \             |\n   | SPIs                           | From new exchange, see\
    \ Note 4.   |\n   |                                |                         \
    \         |\n   | Which peer is the \"original    | Determined by the initiator\
    \ of   |\n   | initiator\"?                    | IKE_SESSION_RESUME.         \
    \     |\n   |                                |                               \
    \   |\n   | IKE SA sequence numbers        | Reset to 0 in                   \
    \ |\n   | (Message ID)                   | IKE_SESSION_RESUME, and          |\n\
    \   |                                | subsequently incremented         |\n  \
    \ |                                | normally.                        |\n   |\
    \                                |                                  |\n   | IKE\
    \ SA algorithms (SAr)        | From the ticket.                 |\n   |      \
    \                          |                                  |\n   | IKE SA keys\
    \ (SK_*)             | The old SK_d is obtained from    |\n   |              \
    \                  | the ticket and all keys are      |\n   |                \
    \                | refreshed, see Section 5.1.      |\n   |                  \
    \              |                                  |\n   | IKE SA window size \
    \            | Reset to 1.                      |\n   |                      \
    \          |                                  |\n   | Child SAs (ESP/AH)     \
    \        | Created in new exchange, see     |\n   |                          \
    \      | Note 6.                          |\n   |                            \
    \    |                                  |\n   | Internal IP address          \
    \  | Not resumed, but see Note 5.     |\n   |                                |\
    \                                  |\n   | Other Configuration Payload    | Not\
    \ resumed.                     |\n   | information                    |      \
    \                            |\n   |                                |        \
    \                          |\n   | Peer Vendor IDs                | Not resumed,\
    \ resent in new       |\n   |                                | exchange if required.\
    \            |\n   |                                |                        \
    \          |\n   | Peer supports MOBIKE [RFC4555] | From new exchange.       \
    \        |\n   |                                |                            \
    \      |\n   | MOBIKE additional addresses    | Not resumed, should be resent\
    \ by |\n   |                                | client if necessary.           \
    \  |\n   |                                |                                  |\n\
    \   | Time until re-authentication   | From new exchange (but ticket    |\n  \
    \ | [RFC4478]                      | lifetime is bounded by this      |\n   |\
    \                                | duration).                       |\n   |  \
    \                              |                                  |\n   | Peer\
    \ supports redirects        | From new exchange.               |\n   | [RFC5685]\
    \                      |                                  |\n   +--------------------------------+----------------------------------+\n\
    \   Note 1:  The authenticated peer identity used for policy lookups may\n   \
    \         not be the same as the IDi payload.  This is possible when\n       \
    \     using certain EAP methods, see Section 3.5 of [RFC4718].  If\n         \
    \   these identities are indeed different, then the\n            authenticated\
    \ client identity MUST be included in the\n            ticket.  Note that the\
    \ client may not have access to this\n            value.\n   Note 2:  Certificates\
    \ don't need to be stored if the peer never uses\n            them for anything\
    \ after the IKE SA is up; however, if they\n            are needed, e.g., if exposed\
    \ to applications via IPsec APIs,\n            they MUST be stored in the ticket.\n\
    \   Note 3:  If the certificate has an iPAddress SubjectAltName, and the\n   \
    \         implementation requires it to match the peer's source IP\n         \
    \   address, the same check needs to be performed on session\n            resumption\
    \ and the required information saved locally or in\n            the ticket.\n\
    \   Note 4:  SPI values of the old SA MAY be stored in the ticket, to\n      \
    \      help the gateway locate corresponding old IKE state.  These\n         \
    \   values MUST NOT be used for the resumed SA.\n   Note 5:  The client can request\
    \ the address it was using earlier, and\n            if possible, the gateway\
    \ SHOULD honor the request.\n   Note 6:  Since information about Child SAs and\
    \ configuration payloads\n            is not resumed, IKEv2 features related to\
    \ Child SA\n            negotiation (such as IPCOMP_SUPPORTED,\n            ESP_TFC_PADDING_NOT_SUPPORTED,\
    \ ROHC-over-IPsec [ROHCoIPsec]\n            and configuration) aren't usually\
    \ affected by session\n            resumption.\n   IKEv2 features that affect\
    \ only the IKE_AUTH exchange (including\n   HTTP_CERT_LOOKUP_SUPPORTED, multiple\
    \ authentication exchanges\n   [RFC4739], Elliptic Curve Digital Signature Algorithm\
    \ (ECDSA)\n   authentication [RFC4754], and the Online Certificate Status Protocol\n\
    \   (OCSP) [RFC4806]) don't usually need any state in the IKE SA (after\n   the\
    \ IKE_AUTH exchanges are done), so resumption doesn't affect them.\n   New IKEv2\
    \ features that are not covered by Note 6 or by the previous\n   paragraph should\
    \ specify how they interact with session resumption.\n"
- title: 5.1.  Generating Cryptographic Material for the Resumed IKE SA
  contents:
  - "5.1.  Generating Cryptographic Material for the Resumed IKE SA\n   The cryptographic\
    \ material is refreshed based on the ticket and the\n   nonce values, Ni, and\
    \ Nr, from the current exchange.  A new SKEYSEED\n   value is derived as follows:\n\
    \        SKEYSEED = prf(SK_d_old, \"Resumption\" | Ni | Nr)\n   where SK_d_old\
    \ is taken from the ticket.  The literal string is\n   encoded as 10 ASCII characters,\
    \ with no NULL terminator.\n   The keys are derived as follows, unchanged from\
    \ IKEv2:\n       {SK_d | SK_ai | SK_ar | SK_ei | SK_er | SK_pi | SK_pr} =\n  \
    \                                 prf+(SKEYSEED, Ni | Nr | SPIi | SPIr)\n   where\
    \ SPIi, SPIr are the SPI values created in the new IKE exchange.\n   See [RFC4306]\
    \ for the notation. \"prf\" is determined from the SA value\n   in the ticket.\n"
- title: 6.  Ticket Handling
  contents:
  - '6.  Ticket Handling

    '
- title: 6.1.  Ticket Content
  contents:
  - "6.1.  Ticket Content\n   When passing a \"ticket by value\" to the client, the\
    \ ticket content\n   MUST be integrity protected and encrypted.\n   A \"ticket\
    \ by reference\" does not need to be encrypted, as it does not\n   contain any\
    \ sensitive material, such as keying material.  However,\n   access to the storage\
    \ where that sensitive material is stored MUST be\n   protected so that only authorized\
    \ access is allowed.  We note that\n   such a ticket is analogous to the concept\
    \ of 'stub', as defined in\n   [SA-SYNC], or the concept of a Session ID from\
    \ TLS.\n   Although not strictly required for cryptographic protection, it is\n\
    \   RECOMMENDED to integrity-protect the \"ticket by reference\".  Failing\n \
    \  to do so could result in various security vulnerabilities on the\n   gateway\
    \ side, depending on the format of the reference.  Potential\n   vulnerabilities\
    \ include access by the gateway to unintended URLs\n   (similar to cross-site\
    \ scripting) or SQL injection.\n   When the state is passed by value, the ticket\
    \ MUST encode all state\n   information marked \"from the ticket\" in the table\
    \ on Section 5.  The\n   same state MUST be stored in the ticket store, in the\
    \ case of \"ticket\n   by reference\".\n   A \"ticket by value\" MUST include\
    \ a protected expiration time, which\n   is an absolute time value and SHOULD\
    \ correspond to the value included\n   in the TICKET_LT_OPAQUE payload.\n   The\
    \ \"ticket by value\" MUST additionally include a key identity field,\n   so that\
    \ keys for ticket encryption and authentication can be changed,\n   and when necessary,\
    \ algorithms can be replaced.\n"
- title: 6.2.  Ticket Identity and Lifecycle
  contents:
  - "6.2.  Ticket Identity and Lifecycle\n   Each ticket is associated with a single\
    \ IKE SA.  In particular, when\n   an IKE SA is deleted by the client or the gateway,\
    \ the client MUST\n   delete its stored ticket.  Similarly, when credentials associated\n\
    \   with the IKE SA are invalidated (e.g., when a user logs out), the\n   ticket\
    \ MUST be deleted.  When the IKE SA is rekeyed, the ticket is\n   invalidated,\
    \ and the client SHOULD request a new ticket.  When a\n   client does not follow\
    \ these rules, it might present an invalid\n   ticket to the gateway.  See Section\
    \ 9.8 for more about this issue.\n   The lifetime of the ticket sent by the gateway\
    \ SHOULD be the minimum\n   of the IKE SA lifetime (per the gateway's local policy)\
    \ and its re-\n   authentication time, according to [RFC4478].  Even if neither\
    \ of\n   these are enforced by the gateway, a finite lifetime MUST be\n   specified\
    \ for the ticket.\n   The key that is used to protect the ticket MUST have a lifetime\
    \ that\n   is significantly longer than the lifetime of an IKE SA.\n   In normal\
    \ operation, the client will request a ticket when\n   establishing the initial\
    \ IKE SA, and then every time the SA is\n   rekeyed or re-established because\
    \ of re-authentication.\n"
- title: 7.  IKE Notifications
  contents:
  - "7.  IKE Notifications\n   This document defines a number of notifications.  The\
    \ following\n   Notify Message types have been assigned by IANA.\n           \
    \   +-------------------+-------+-----------------+\n              | Notification\
    \ Name | Value | Data            |\n              +-------------------+-------+-----------------+\n\
    \              | TICKET_LT_OPAQUE  | 16409 | See Section 7.1 |\n             \
    \ |                   |       |                 |\n              | TICKET_REQUEST\
    \    | 16410 | None            |\n              |                   |       |\
    \                 |\n              | TICKET_ACK        | 16411 | None        \
    \    |\n              |                   |       |                 |\n      \
    \        | TICKET_NACK       | 16412 | None            |\n              |    \
    \               |       |                 |\n              | TICKET_OPAQUE   \
    \  | 16413 | See Section 7.2 |\n              +-------------------+-------+-----------------+\n\
    \   For all these notifications, the Protocol ID and the SPI Size fields\n   MUST\
    \ both be sent as 0.\n"
- title: 7.1.  TICKET_LT_OPAQUE Notify Payload
  contents:
  - "7.1.  TICKET_LT_OPAQUE Notify Payload\n   The data for the TICKET_LT_OPAQUE Notify\
    \ payload consists of the\n   Notify message header, a Lifetime field and the\
    \ ticket itself.  The\n   four octet Lifetime field contains a relative time value,\
    \ the number\n   of seconds until the ticket expires (encoded as an unsigned integer,\n\
    \   in network byte order).\n        0                     1                 \
    \  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       | Next Payload  |C|  Reserved   |      Payload Length           |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   | Protocol ID   | SPI Size = 0  |    Notify Message Type        |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Lifetime                                |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                                                               |\n  \
    \     ~                        Ticket                                 ~\n    \
    \   |                                                               |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \         Figure 6: TICKET_LT_OPAQUE Notify Payload\n"
- title: 7.2.  TICKET_OPAQUE Notify Payload
  contents:
  - "7.2.  TICKET_OPAQUE Notify Payload\n   The data for the TICKET_OPAQUE Notify\
    \ payload consists of the Notify\n   message header, and the ticket itself.  Unlike\
    \ the TICKET_LT_OPAQUE\n   payload, no lifetime value is included in the TICKET_OPAQUE\
    \ Notify\n   payload.\n        0                     1                   2   \
    \                3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       | Next Payload  |C|  Reserved   |      Payload Length           |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   | Protocol ID   | SPI Size = 0  |    Notify Message Type        |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                                                               |\n       ~  \
    \                      Ticket                                 ~\n       |    \
    \                                                           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 7: TICKET_OPAQUE Notify Payload\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   Section 4.3.2 defines a new IKEv2 exchange type,\
    \ IKE_SESSION_RESUME,\n   whose value has been allocated from the \"IKEv2 Exchange\
    \ Types\"\n   registry.\n   Section 7 defines several new IKEv2 notifications\
    \ whose Message Type\n   values have been allocated from the \"IKEv2 Notify Message\
    \ Types -\n   Status Types\" registry.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This section addresses security issues related\
    \ to the usage of a\n   ticket.\n"
- title: 9.1.  Stolen Tickets
  contents:
  - "9.1.  Stolen Tickets\n   A man in the middle may try to eavesdrop on an exchange\
    \ to obtain a\n   \"ticket by value\" and use it to establish a session with the\
    \ IKEv2\n   responder.  Since all exchanges where the client obtains a ticket\
    \ are\n   encrypted, this is only possible by listening in on a client's use of\n\
    \   the ticket to resume a session.  However, since the ticket's contents\n  \
    \ are encrypted and the attacker does not know the corresponding secret\n   key,\
    \ a stolen ticket cannot be used by an attacker to successfully\n   resume a session.\
    \  An IKEv2 responder MUST use strong encryption and\n   integrity protection\
    \ of the ticket to prevent an attacker from\n   obtaining the ticket's contents,\
    \ e.g., by using a brute force attack.\n   A \"ticket by reference\" does not\
    \ need to be encrypted.  When an\n   adversary is able to eavesdrop on a resumption\
    \ attempt, as described\n   in the previous paragraph, then the \"ticket by reference\"\
    \ may be\n   obtained.  A \"ticket by reference\" cannot be used by an attacker\
    \ to\n   successfully resume a session, for the same reasons as for a \"ticket\n\
    \   by value\", namely because the attacker would not be able to prove,\n   during\
    \ IKE_AUTH, its knowledge of the secret part of the IKE state\n   embedded in\
    \ the ticket.  Moreover, the adversary MUST NOT be able to\n   resolve the ticket\
    \ via the reference, i.e., access control MUST be\n   enforced to ensure disclosure\
    \ only to authorized entities.\n"
- title: 9.2.  Forged Tickets
  contents:
  - "9.2.  Forged Tickets\n   A malicious user could forge or alter a \"ticket by\
    \ value\" in order to\n   resume a session, to extend its lifetime, to impersonate\
    \ as another\n   user, or to gain additional privileges.  This attack is not possible\n\
    \   if the content of the \"ticket by value\" is protected using a strong\n  \
    \ integrity protection algorithm.\n   In the case of a \"ticket by reference\"\
    \ an adversary may attempt to\n   construct a fake \"ticket by reference\" to\
    \ point to state information\n   stored by the IKEv2 responder.  This attack will\
    \ fail because the\n   adversary is not in possession of the keying material associated\
    \ with\n   the IKEv2 SA.  As noted in Section 6.1, it is often useful to\n   integrity-protect\
    \ the \"ticket by reference\", too.\n"
- title: 9.3.  Denial-of-Service Attacks
  contents:
  - "9.3.  Denial-of-Service Attacks\n   An adversary could generate and send a large\
    \ number of \"tickets by\n   value\" to a gateway for verification.  Such an attack\
    \ could burden\n   the gateway's CPU, and/or exhaust its memory with half-open\
    \ IKE\n   state.  To minimize the possibility of such denial of service, ticket\n\
    \   verification should be lightweight (e.g., using efficient symmetric\n   key\
    \ cryptographic algorithms).\n   When an adversary chooses to send a large number\
    \ of \"tickets by\n   reference\" then this may lead to an amplification attack\
    \ as the IKEv2\n   responder is forced to resolve the reference to a ticket in\
    \ order to\n   determine that the adversary is not in possession of the keying\n\
    \   material corresponding to the stored state or that the reference is\n   void.\
    \  To minimize this attack, the protocol to resolve the reference\n   should be\
    \ as lightweight as possible and should not generate a large\n   number of messages.\n\
    \   Note also that the regular IKEv2 cookie mechanism can be used to\n   handle\
    \ state-overflow DoS situations.\n"
- title: 9.4.  Detecting the Need for Resumption
  contents:
  - "9.4.  Detecting the Need for Resumption\n   Detecting when an old IKE SA is no\
    \ longer usable and needs to be\n   resumed is out of scope of the current document.\
    \  However, clients\n   are warned against implementing a more liberal policy\
    \ than that used\n   to detect failed IKE SAs (Section 2.4 of RFC 4306).  In particular,\n\
    \   untrusted messages MUST NOT be relied upon to make this decision.\n"
- title: 9.5.  Key Management for "Tickets by Value"
  contents:
  - "9.5.  Key Management for \"Tickets by Value\"\n   A full description of the management\
    \ of the keys used to protect the\n   \"ticket by value\" is beyond the scope\
    \ of this document.  A list of\n   RECOMMENDED practices is given below.\n   o\
    \  The keys should be generated securely following the randomness\n      recommendations\
    \ in [RFC4086].\n   o  The keys and cryptographic protection algorithms should\
    \ be at\n      least 128 bits in strength.\n   o  The keys should not be used\
    \ for any other purpose than generating\n      and verifying tickets.\n   o  The\
    \ keys should be changed regularly.\n   o  The keys should be changed if the ticket\
    \ format or cryptographic\n      protection algorithms change.\n"
- title: 9.6.  Ticket Lifetime
  contents:
  - "9.6.  Ticket Lifetime\n   An IKEv2 responder controls the validity period of\
    \ the state\n   information by attaching a lifetime to a ticket.  The chosen lifetime\n\
    \   is based on the operational and security requirements of the\n   environment\
    \ in which this IKEv2 extension is deployed.  The responder\n   provides information\
    \ about the ticket lifetime to the IKEv2\n   initiator, allowing it to manage\
    \ its tickets.\n"
- title: 9.7.  Tickets and Identity
  contents:
  - "9.7.  Tickets and Identity\n   A ticket is associated with a certain identity,\
    \ and MUST be managed\n   securely on the client side.  Section 6.2 requires that\
    \ a ticket be\n   deleted when the credentials associated with the ticket's identity\n\
    \   are no longer valid, e.g., when a user whose credentials were used to\n  \
    \ create the SA logs out.\n"
- title: 9.8.  Ticket Revocation
  contents:
  - "9.8.  Ticket Revocation\n   A misbehaving client could present a ticket in its\
    \ possession to the\n   gateway resulting in session resumption, even though the\
    \ IKE SA\n   associated with this ticket had previously been deleted.  This is\n\
    \   disallowed by Section 6.2.  This issue is unique to \"ticket by value\"\n\
    \   cases, since a \"ticket by reference\" will have been deleted from the\n \
    \  ticket store.\n   To avoid this issue for \"ticket by value\", an Invalid Ticket\
    \ List\n   (ITL) may be maintained by the gateway, see [TOKENS].  This can be\
    \ a\n   simple blacklist of revoked tickets.  Alternatively, [TOKENS]\n   suggests\
    \ to use Bloom Filters [Bloom70] to maintain the list in\n   constant space. \
    \ Management of such lists is outside the scope of the\n   current document. \
    \ Note that a policy that requires tickets to have\n   shorter lifetimes (e.g.,\
    \ 1 hour) significantly mitigates this issue.\n"
- title: 9.9.  Ticket by Value Format
  contents:
  - "9.9.  Ticket by Value Format\n   The ticket's format is not defined by this document,\
    \ since this is\n   not required for interoperability.  However, great care must\
    \ be taken\n   when defining a ticket format such that the requirements outlined\
    \ in\n   Section 6.1 are met.  The \"ticket by value\" MUST have its integrity\n\
    \   and confidentiality protected with strong cryptographic techniques to\n  \
    \ prevent a breach in the security of the system.\n"
- title: 9.10.  Identity Privacy, Anonymity, and Unlinkability
  contents:
  - "9.10.  Identity Privacy, Anonymity, and Unlinkability\n   Since opaque state\
    \ information is passed around between the IKEv2\n   initiator and the IKEv2 responder\
    \ it is important that leakage of\n   information, such as the identities of an\
    \ IKEv2 initiator and a\n   responder, MUST be avoided.\n   When an IKEv2 initiator\
    \ presents a ticket as part of the\n   IKE_SESSION_RESUME exchange, confidentiality\
    \ is not provided for the\n   exchange.  There is thereby the possibility for\
    \ an on-path adversary\n   to observe multiple exchange handshakes where the same\
    \ state\n   information is used and therefore to conclude that they belong to\
    \ the\n   same communication endpoints.\n   This document therefore requires that\
    \ the ticket be presented to the\n   IKEv2 responder only once; under normal circumstances\
    \ (e.g., no\n   active attacker), there should be no multiple use of the same\
    \ ticket.\n   We are not aware of additional security issues associated with ticket\n\
    \   reuse: the protocol guarantees freshness of the generated crypto\n   material\
    \ even in such cases.  As noted in Section 4.3.1, the gateway\n   SHOULD prevent\
    \ multiple uses of the same ticket.  But this is only an\n   extra precaution,\
    \ to ensure that clients do not implement reuse.  In\n   other words, the gateway\
    \ is not expected to cache old tickets for\n   extended periods of time.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   We would like to thank Paul Hoffman, Pasi Eronen, Florian\
    \ Tegeler,\n   Stephen Kent, Sean Shen, Xiaoming Fu, Stjepan Gros, Dan Harkins,\
    \ Russ\n   Housely, Yoav Nir, Peny Yang, Sean Turner, and Tero Kivinen for their\n\
    \   comments.  We would like to particularly thank Florian Tegeler and\n   Stjepan\
    \ Gros for their implementation efforts and Florian Tegeler for\n   a formal verification\
    \ using the Casper tool set.\n   We would furthermore like to thank the authors\
    \ of [SA-SYNC] (Yan Xu,\n   Peny Yang, Yuanchen Ma, Hui Deng, and Ke Xu) for their\
    \ input on the\n   stub concept.\n   We would like to thank Hui Deng, Tero Kivinen,\
    \ Peny Yang, Ahmad\n   Muhanna, and Stephen Kent for their feedback regarding\
    \ the \"ticket by\n   reference\" concept.\n   Vidya Narayanan and Lakshminath\
    \ Dondeti coauthored several past\n   versions of this document, and we acknowledge\
    \ their significant\n   contribution.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC4306]     Kaufman, C., \"Internet Key Exchange (IKEv2) Protocol\"\
    ,\n                 RFC 4306, December 2005.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [Bloom70]     Bloom, B., \"Space/time trade-offs\
    \ in hash coding with\n                 allowable errors\", Comm. ACM 13(7):422-6,\
    \ July 1970.\n   [EAP-AUTH]    Eronen, P., Tschofenig, H., and Y. Sheffer, \"\
    An\n                 Extension for EAP-Only Authentication in IKEv2\", Work\n\
    \                 in Progress, October 2009.\n   [IKEV2-BIS]   Kaufman, C., Hoffman,\
    \ P., Nir, Y., and P. Eronen,\n                 \"Internet Key Exchange Protocol:\
    \ IKEv2\", Work\n                 in Progress, October 2009.\n   [RFC4086]   \
    \  Eastlake, D., Schiller, J., and S. Crocker, \"Randomness\n                \
    \ Requirements for Security\", BCP 106, RFC 4086,\n                 June 2005.\n\
    \   [RFC4301]     Kent, S. and K. Seo, \"Security Architecture for the\n     \
    \            Internet Protocol\", RFC 4301, December 2005.\n   [RFC4478]     Nir,\
    \ Y., \"Repeated Authentication in Internet Key\n                 Exchange (IKEv2)\
    \ Protocol\", RFC 4478, April 2006.\n   [RFC4555]     Eronen, P., \"IKEv2 Mobility\
    \ and Multihoming Protocol\n                 (MOBIKE)\", RFC 4555, June 2006.\n\
    \   [RFC4718]     Eronen, P. and P. Hoffman, \"IKEv2 Clarifications and\n    \
    \             Implementation Guidelines\", RFC 4718, October 2006.\n   [RFC4739]\
    \     Eronen, P. and J. Korhonen, \"Multiple Authentication\n                \
    \ Exchanges in the Internet Key Exchange (IKEv2)\n                 Protocol\"\
    , RFC 4739, November 2006.\n   [RFC4754]     Fu, D. and J. Solinas, \"IKE and\
    \ IKEv2 Authentication\n                 Using the Elliptic Curve Digital Signature\
    \ Algorithm\n                 (ECDSA)\", RFC 4754, January 2007.\n   [RFC4806]\
    \     Myers, M. and H. Tschofenig, \"Online Certificate Status\n             \
    \    Protocol (OCSP) Extensions to IKEv2\", RFC 4806,\n                 February\
    \ 2007.\n   [RFC5077]     Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig,\n\
    \                 \"Transport Layer Security (TLS) Session Resumption\n      \
    \           without Server-Side State\", RFC 5077, January 2008.\n   [RFC5685]\
    \     Devarapalli, V. and K. Weniger, \"Redirect Mechanism for\n             \
    \    the Internet Key Exchange Protocol Version 2 (IKEv2)\",\n               \
    \  RFC 5685, November 2009.\n   [ROHCoIPsec]  Ertekin, E., Christou, C., Jasani,\
    \ R., Kivinen, T., and\n                 C. Bormann, \"IKEv2 Extensions to Support\
    \ Robust Header\n                 Compression over IPsec (ROHCoIPsec)\", Work\
    \ in Progress,\n                 December 2009.\n   [SA-SYNC]     Xu, Y., Yang,\
    \ P., Ma, Y., Deng, H., and H. Deng, \"IKEv2\n                 SA Synchronization\
    \ for session resumption\", Work\n                 in Progress, October 2008.\n\
    \   [TOKENS]      Rescorla, E., \"How to Implement Secure (Mostly)\n         \
    \        Stateless Tokens\", Work in Progress, March 2007.\n"
- title: Appendix A.  Ticket Format
  contents:
  - "Appendix A.  Ticket Format\n   This document does not specify a particular ticket\
    \ format nor even\n   the suggested contents of a ticket: both are entirely up\
    \ to the\n   implementer.  The formats described in the following sub-sections\
    \ are\n   provided as useful examples, and implementers are free to adopt them\n\
    \   as-is or change them in any way necessary.\n"
- title: A.1.  Example "Ticket by Value" Format
  contents:
  - "A.1.  Example \"Ticket by Value\" Format\n  struct {\n      [authenticated] struct\
    \ {\n          octet format_version;    // 1 for this version of the protocol\n\
    \          octet reserved[3];       // sent as 0, ignored by receiver.\n     \
    \     octet key_id[8];         // arbitrary byte string\n          opaque IV[0..255];\
    \       // actual length (possibly 0) depends\n                              \
    \     // on the encryption algorithm\n          [encrypted] struct {\n       \
    \       opaque IDi, IDr;     // the full payloads\n              octet SPIi[8],\
    \ SPIr[8];\n              opaque SA;           // the full SAr payload\n     \
    \         octet SK_d[0..255];  // actual length depends on SA value\n        \
    \      enum ... authentication_method;\n              int32 expiration;    //\
    \ an absolute time value, seconds\n                                   // since\
    \ Jan. 1, 1970\n          } ikev2_state;\n      } protected_part;\n      opaque\
    \ MAC[0..255];          // the length (possibly 0) depends\n                 \
    \                  // on the integrity algorithm\n  } ticket;\n   Note that the\
    \ key defined by \"key_id\" determines the encryption and\n   authentication algorithms\
    \ used for this ticket.  Those algorithms are\n   unrelated to the transforms\
    \ defined by the SA payload.\n   The reader is referred to [TOKENS] that recommends\
    \ a similar (but not\n   identical) ticket format, and discusses related security\n\
    \   considerations in depth.\n"
- title: A.2.  Example "Ticket by Reference" Format
  contents:
  - "A.2.  Example \"Ticket by Reference\" Format\n   For implementations that prefer\
    \ to pass a reference to IKE state in\n   the ticket, rather than the state itself,\
    \ we suggest the following\n   format:\n  struct {\n        [authenticated] struct\
    \ {\n            octet format_version;  // 1 for this version of the protocol\n\
    \            octet reserved[3];     // sent as 0, ignored by receiver.\n     \
    \       octet key_id[8];       // arbitrary byte string\n            struct {\n\
    \                opaque state_ref;  // reference to IKE state\n              \
    \  int32 expiration;  // an absolute time value, seconds\n                   \
    \                // since Jan. 1, 1970\n            } ikev2_state_ref;\n     \
    \   } protected_part;\n        opaque MAC[0..255];        // the length depends\n\
    \                                   // on the integrity algorithm\n  } ticket;\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Yaron Sheffer\n   Check Point Software Technologies Ltd.\n\
    \   5 Hasolelim St.\n   Tel Aviv  67897\n   Israel\n   EMail: yaronf@checkpoint.com\n\
    \   Hannes Tschofenig\n   Nokia Siemens Networks\n   Linnoitustie 6\n   Espoo\
    \  02600\n   Finland\n   Phone: +358 (50) 4871445\n   EMail: Hannes.Tschofenig@gmx.net\n\
    \   URI:   http://www.tschofenig.priv.at\n"
