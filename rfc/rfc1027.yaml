- title: __initial_text__
  contents:
  - '           Using ARP to Implement Transparent Subnet Gateways

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n    This RFC describes the use of the Ethernet Address Resolution\n\
    \    Protocol (ARP) by subnet gateways to permit hosts on the connected\n    subnets\
    \ to communicate without being aware of the existence of\n    subnets, using the\
    \ technique of \"Proxy ARP\" [6].  It is based on\n    RFC-950 [1], RFC-922 [2],\
    \ and RFC-826 [3] and is a restricted subset\n    of the mechanism of RFC-925\
    \ [4].  Distribution of this memo is\n    unlimited.\n"
- title: Acknowledgment
  contents:
  - "Acknowledgment\n    The work described in this memo was performed while the authors\
    \ were\n    employed by the Computer Sciences Department of the University of\n\
    \    Texas at Austin.\n"
- title: Introduction
  contents:
  - "Introduction\n    The purpose of this memo is to describe in detail the implementation\n\
    \    of transparent subnet ARP gateways using the technique of Proxy ARP.\n  \
    \  The intent is to document this widely used technique.\n"
- title: 1.  Motivation
  contents:
  - "1.  Motivation\n    The Ethernet at the University of Texas at Austin is a large\n\
    \    installation connecting over ten buildings.  It currently has more\n    than\
    \ one hundred hosts connected to it [5].  The size of the\n    Ethernet and the\
    \ amount of traffic it handles prohibit tying it\n    together by use of repeaters.\
    \  The use of subnets provided an\n    attractive alternative for separating the\
    \ network into smaller\n    distinct units.\n    This is exactly the situation\
    \ for which Internet subnets as\n    described in RFC-950 are intended.  Unfortunately,\
    \ many vendors had\n    not yet implemented subnets, and it was not practical\
    \ to modify the\n    more than half a dozen different operating systems running\
    \ on hosts\n    on the local networks.\n    Therefore a method for hiding the\
    \ existence of subnets from hosts\n    was highly desirable.  Since all the local\
    \ area networks supported\n    ARP, an ARP-based method (commonly known as \"\
    Proxy ARP\" or the \"ARP\n    hack\") was chosen.  In this memo, whenever the\
    \ term \"subnet\" occurs\n    the \"RFC-950 subnet method\" is assumed.\n"
- title: 2.  Design
  contents:
  - '2.  Design

    '
- title: 2.1  Basic method
  contents:
  - "2.1  Basic method\n    On a network that supports ARP, when host A (the source)\
    \ broadcasts\n    an ARP request for the network address corresponding to the\
    \ IP\n    address of host B (the target), host B will recognize the IP address\n\
    \    as its own and will send a point-to-point ARP reply.  Host A keeps\n    the\
    \ IP-to-network-address mapping found in the reply in a local\n    cache and uses\
    \ it for later communication with host B.\n    If hosts A and B are on different\
    \ physical networks, host B will not\n    receive the ARP broadcast request from\
    \ host A and cannot respond to\n    it.  However, if the physical network of host\
    \ A is connected by a\n    gateway to the physical network of host B, the gateway\
    \ will see the\n    ARP request from host A.  Assuming that subnet numbers are\
    \ made to\n    correspond to physical networks, the gateway can also tell that\
    \ the\n    request is for a host that is on a different physical network from\n\
    \    the requesting host.  The gateway can then respond for host B,\n    saying\
    \ that the network address for host B is that of the gateway\n    itself.  Host\
    \ A will see this reply, cache it, and send future IP\n    packets for host B\
    \ to the gateway.  The gateway will forward such\n    packets to host B by the\
    \ usual IP routing mechanisms.  The gateway\n    is acting as an agent for host\
    \ B, which is why this technique is\n    called \"Proxy ARP\"; we will refer to\
    \ this as a transparent subnet\n    gateway or ARP subnet gateway.\n    When host\
    \ B replies to traffic from host A, the same algorithm\n    happens in reverse:\
    \ the gateway connected to the network of host B\n    answers the request for\
    \ the network address of host A, and host B\n    then sends IP packets for host\
    \ A to gateway.  The physical networks\n    of host A and B need not be connected\
    \ to the same gateway. All that\n    is necessary is that the networks be reachable\
    \ from the gateway.\n    With this approach, all ARP subnet handling is done in\
    \ the ARP\n    subnet gateways.  No changes to the normal ARP protocol or routing\n\
    \    need to be made to the source and target hosts.  From the host point\n  \
    \  of view, there are no subnets, and their physical networks are\n    simply\
    \ one big IP network.  If a host has an implementation of\n    subnets, its network\
    \ masks must be set to cover only the IP network\n    number, excluding the subnet\
    \ bits, for the system to work properly.\n"
- title: 2.2  Routing
  contents:
  - "2.2  Routing\n    As part of the implementation of subnets, it is expected that\
    \ the\n    elements of routing tables will include network numbers including\n\
    \    both the IP network number and the subnet bits, as specified by the\n   \
    \ subnet mask, where appropriate.  When an ARP request is seen, the\n    ARP subnet\
    \ gateway can determine whether it knows a route to the\n    target host by looking\
    \ in the ordinary routing table.  If attempts\n    to reach foreign IP networks\
    \ are eliminated early (see Sanity Checks\n    below), only a request for an address\
    \ on the local IP network will\n    reach this point.  We will assume that the\
    \ same network mask applies\n    to every subnet of the same IP network.  The\
    \ network mask of the\n    network interface on which the ARP request arrived\
    \ can then be\n    applied to the target IP address to produce the network part\
    \ to be\n    looked up in the routing table.\n    In 4.3BSD (and probably in other\
    \ operating systems), a default route\n    is possible.  This default route specifies\
    \ an address to forward a\n    packet to when no other route is found.  The default\
    \ route must not\n    be used when checking for a route to the target host of\
    \ an ARP\n    request.  If the default route were used, the check would always\n\
    \    succeed.  But the host specified by the default route is unlikely to\n  \
    \  know about subnet routing (since it is usually an Internet gateway),\n    and\
    \ thus packets sent to it will probably be lost.  This special\n    case in the\
    \ routing lookup method is the only implementation change\n    needed to the routing\
    \ mechanism.\n    If the network interfaces on which the request was received\
    \ and\n    through which the route to the target passes are the same, the\n  \
    \  gateway must not reply.  In this case, either the target host is on\n    the\
    \ same physical network as the gateway (and thus the host should\n    reply for\
    \ itself), or this gateway is not on the most direct path to\n    the desired\
    \ network, i.e., there is another gateway on the same\n    physical network that\
    \ is on a more direct path and the other gateway\n    should respond.\n    RFC-925\
    \ [4] describes a general mechanism for dynamic subnet routing\n    using Proxy\
    \ ARP and routing caches in the gateways.  Our technique\n    is restricted subset\
    \ of RFC-925, in which we use static subnet\n    routes which are determined administratively.\
    \  As a result, our\n    transparent subnet gateways require no new network routing\
    \ table\n    entries nor ARP cache entries; the only tables which are affected\n\
    \    are the ARP caches in the host.\n    In our implementation, routing loops\
    \ are prevented by proper\n    administration of the subnet routing tables in\
    \ the gateways.\n"
- title: 2.3  Multiple gateways
  contents:
  - "2.3  Multiple gateways\n    The simplest subnet organization to administer is\
    \ a tree structure,\n    which cannot have loops.  However, it may be desirable\
    \ for\n    reliability or traffic accommodation to have more than one gateway\n\
    \    (or path) between two physical networks.  ARP subnet gateways may be\n  \
    \  used in such a situation:  a requesting host will use the first ARP\n    response\
    \ it receives, even if more than one gateway supplies one.\n    This may even\
    \ provide a rudimentary load balancing service, since if\n    two gateways are\
    \ otherwise similar, the one most lightly loaded is\n    the more likely to reply\
    \ first.\n    More complex mechanisms could be built in the form of gateway-to-\n\
    \    gateway protocols, and will no doubt become necessary in networks\n    with\
    \ large numbers of subnets and gateways, in the same way that\n    gateway-to-gateway\
    \ protocols are generally necessary among IP\n    gateways.\n"
- title: 2.4  Sanity checks
  contents:
  - "2.4  Sanity checks\n    Care must be taken by the network and gateway administrators\
    \ to keep\n    the network masks the same on all the subnet gateway machines.\
    \  The\n    most common error is to set the network mask on a host without a\n\
    \    subnet implementation to include the subnet number.  This causes the\n  \
    \  host to fail to attempt to send packets to hosts not on its local\n    subnet.\
    \  Adjusting its routing tables will not help, since it will\n    not know how\
    \ to route to subnets.\n    If the IP networks of the source and target hosts\
    \ of an ARP request\n    are different, an ARP subnet gateway implementation should\
    \ not\n    reply.  This is to prevent the ARP subnet gateway from being used to\n\
    \    reach foreign IP networks and thus possibly bypass security checks\n    provided\
    \ by IP gateways.\n    An ARP subnet gateway implementation must not reply if\
    \ the physical\n    networks of the source and target of an ARP request are the\
    \ same.\n    In this case, either the target host is presumably either on the\n\
    \    same physical network as the source host and can answer for itself,\n   \
    \ or the target host lies in the same direction from the gateway as\n    does\
    \ the source host, and an ARP reply from the would cause a loop.\n    An ARP request\
    \ for a broadcast address must elicit no reply,\n    regardless of the source\
    \ address or physical networks involved.  If\n    the gateway were to respond\
    \ with an ARP reply in this situation, it\n    would be inviting the original\
    \ source to send actual traffic to a\n    broadcast address.  This could result\
    \ in the \"Chernobyl effect\"\n    wherein every host on the network replies to\
    \ such traffic, causing\n    network \"meltdown\".\n"
- title: 2.5  Multiple logical subnets per physical network
  contents:
  - "2.5  Multiple logical subnets per physical network\n    The most straightforward\
    \ way to assign subnet numbers is one to one\n    with physical networks.  There\
    \ are, however, circumstances in which\n    multiple logical subnets per physical\
    \ network are quite useful.  One\n    of the more common is when it is planned\
    \ that a group of\n    workstations will be put on their own physical network\
    \ but the\n    gateway to the new physical network needs to be tested first. \
    \ (A\n    repeater might be used when the gateway was not usable).  If a rule\n\
    \    of one subnet per physical network is enforced, the addresses of the\n  \
    \  workstations must be changed every time the gateway is tested.  If\n    they\
    \ may be assigned addresses using a new subnet number while they\n    are still\
    \ on the old physical network, no further address changes\n    are needed.\n \
    \   To permit multiple subnets per physical network, an ARP subnet\n    gateway\
    \ must use the physical network interface, not the subnet\n    number to determine\
    \ when to reply to an ARP request.  That is, it\n    should send a proxy ARP reply\
    \ only when the source network interface\n    differs from the target network\
    \ interface. In addition, appropriate\n    routing table entries for these \"\
    phantom\" subnets must be added to\n    the subnet gateway routing tables.\n"
- title: 2.6  Broadcast addresses
  contents:
  - "2.6  Broadcast addresses\n    There are two kinds of IP broadcast addresses:\
    \  main IP directed\n    network broadcast and subnet broadcast.  An IP network\
    \ broadcast\n    address consists of the network number plus a well-known value\
    \ in\n    the rest (local part) of the address.  An IP subnet broadcast is\n \
    \   similar, except both the IP network number and the subnet number\n    bits\
    \ are included.  RFC-922 standardized the use of all ones in the\n    local part,\
    \ but there were two conventions in use before that:  all\n    ones and all zeros.\
    \  For example, 4.2BSD used all zeros, and 4.3BSD\n    uses all ones.  Thus there\
    \ are four kinds of IP directed broadcast\n    addresses still currently in use\
    \ on many networks.\n    With transparent subnetting a subnet gateway must not\
    \ issue an IP\n    broadcast using the subnet broadcast address, e.g., 128.83.138.255.\n\
    \    Hosts on the physical network that receive the broadcast will not\n    understand\
    \ such an address as a broadcast address, since they will\n    not have subnets\
    \ enabled (or will not have subnet implementations).\n    In fact, 4.2BSD hosts\
    \ (with or without subnet implementations) will\n    instead treat an address\
    \ with all ones in the local part as a\n    specific host address and try to forward\
    \ the packet.  Since there is\n    no such target host, there will be no entry\
    \ in the forwarding host's\n    ARP tables and it will generate an ARP request\
    \ for the target host.\n    This presents the scenario (actually observed) of\
    \ a 4.3BSD gateway\n    running the rwho program, which broadcasts a packet once\
    \ a minute,\n    causing every 4.2BSD host on the local physical network to generate\n\
    \    an ARP request at the same time.  The same problem occurs with any\n    subnet\
    \ broadcast address, whether the local part is all zeros or all\n    ones.\n \
    \   Thus a subnet gateway in a network with hosts that do not understand\n   \
    \ subnets must take care not to use subnet broadcast addresses:\n    instead it\
    \ must use the IP network directed broadcast address\n    instead.\n    Finally,\
    \ since many hosts running out-of-date software will still be\n    using (and\
    \ expecting) old-style all-zeros IP network broadcast\n    addresses, the gateway\
    \ must send its broadcast addresses out in that\n    form, e.g., 128.83.0.0. \
    \ It might be safe to also send a duplicate\n    packet with all ones in the local\
    \ part, e.g., 128.83.255.255.  It is\n    not clear whether the local network\
    \ broadcast address of all ones,\n    255.255.255.255, will cause ill effects,\
    \ but it is very likely that\n    it will not be recognized by many hosts that\
    \ are running older\n    software.\n"
- title: 3.  Implementation in 4.3BSD
  contents:
  - "3.  Implementation in 4.3BSD\n    Subnet gateways using ARP have been implemented\
    \ by a number of\n    different people.  The particular method described in this\
    \ memo was\n    first implemented in 4.2BSD on top of retrofitted beta-test 4.3BSD\n\
    \    subnet code, and has since been reimplemented as an add-on to the\n    distributed\
    \ 4.3BSD sources.  The latter implementation is described\n    here.\n    Most\
    \ of the new kernel code for the subnet ARP gatewaying function\n    is in the\
    \ generic Ethernet interface module, netinet/if_ether.c.  It\n    consists of\
    \ eight lines in in_arpinput that perform a couple of\n    quick checks (to ensure\
    \ that the facility is enabled on the source\n    interface and that the source\
    \ and target addresses are on different\n    subnets), call a new routine, if_subarp,\
    \ for further checks, and\n    then build the ARP response if all checks succeed.\
    \  This code is\n    only reached when an ARP request is received, and does nothing\
    \ if\n    the facility is not enabled on the source interface.  Thus\n    performance\
    \ of the gateway should be very little degraded by this\n    addition.  (Performance\
    \ of the requesting host should also be\n    similar to the latter case, as the\
    \ only difference there is between\n    efficiency of the ARP cache and of the\
    \ routing tables).\n    The routine if_subarp (about sixty lines) ensures that\
    \ the source\n    and target addresses are on the same IP network and that the\
    \ target\n    address is none of the four kinds of directed broadcast address.\
    \  It\n    then attempts to find a path to the target either by finding a\n  \
    \  network interface with the desired subnet or by looking in the\n    routing\
    \ tables.  Even if a network interface is found that leads to\n    the target,\
    \ for a reply to be sent the ARP gateway must be enabled\n    on that interface\
    \ and the target and source interfaces must be\n    different.\n    The file netinet/route.c\
    \ has a static routing entry structure\n    definition added, and modifications\
    \ of about eight lines are made to\n    the main routing table lookup routine,\
    \ rtalloc, to recognize a\n    pointer to that structure (when passed by if_subarp)\
    \ as a direction\n    to not use the default route in this routing check.  The\
    \ processor\n    priority level (critical section protection) around the inner\n\
    \    routing lookup check is changed to a higher value, as the routine\n    may\
    \ now be called from network interface interrupts as well as from\n    the internal\
    \ software interrupts that drive processing of IP and\n    other high level protocols.\
    \  This raised processor priority could\n    conceivably slow the whole kernel\
    \ somewhat if there are many routing\n    checks, but since the critical section\
    \ is fast, the effect should be\n    small.\n    A key kernel modification is\
    \ about fifteen lines added to the\n    routine ip_output in netinet/ip_output.c.\
    \  It changes subnet\n    broadcast addresses in packets originating at the gateway\
    \ to IP\n    network broadcast addresses so that hosts without subnet code (or\n\
    \    with their network masks set to ignore subnets) will recognize them\n   \
    \ as broadcast addresses.  This section of code is only used if the\n    ARP gateway\
    \ is turned on for the outgoing interface, and only\n    affects subnet broadcast\
    \ addresses.\n    A new routine, in_mainnetof, of about fifteen lines, is added\
    \ to\n    netinet/in.c to return the IP network number (without subnet number)\n\
    \    from an IP address.  It is called from if_subarp and ip_output.\n    Two\
    \ kernel parameter files have one line added to each:  net/if.h\n    has a definition\
    \ of a bit in the network interface structure to\n    indicate whether subnet\
    \ ARP gateways are enabled, and netinet/in.h\n    refers to in_mainnetof.\n  \
    \  In addition to these approximately 110 lines of kernel source\n    additions,\
    \ there is one user-level modification.  The source to the\n    command ifconfig,\
    \ which is used to set addresses and network masks\n    of network interfaces,\
    \ has four lines added to allow it to turn the\n    subnet ARP gateway facility\
    \ on or off, for each interface.  This is\n    documented in eleven new lines\
    \ in the manual entry for that command.\n"
- title: 4.  Availability
  contents:
  - "4.  Availability\n    The 4.3BSD implementation is currently available by anonymous\
    \ FTP\n    (login anonymous, password guest) from sally.utexas.edu as\n    pub/subarp,\
    \ which is a 4.3BSD \"diff -c\" listing from the 4.3BSD\n    sources that were\
    \ distributed in September 1986.\n    This implementation was not included in\
    \ the 4.3BSD distribution\n    proper because U.C. Berkeley CSRG thought that\
    \ that would reduce the\n    incentive for vendors to implement subnets per RFC-950.\
    \  The authors\n    concur.  Nonetheless, there are circumstances in which the\
    \ use of\n    transparent subnet ARP gateways is indispensable.\n"
- title: References
  contents:
  - "References\n   1.  Mogul, J., and J. Postel, \"Internet Standard Subnetting\n\
    \       Procedure\", RFC-950, Stanford University and USC/Information\n      \
    \ Sciences Institute, August 1985.\n   2.  Mogul, J., \"Broadcasting Internet\
    \ Datagrams in the Presence of\n       Subnets\", RFC-922, Computer Science Department,\
    \ Stanford\n       University, October 1984.\n   3.  Plummer, D., \"An Ethernet\
    \ Address Resolution Protocol or\n       Converting Network Protocol Addresses\
    \ to 48-bit Ethernet\n       Addresses for Transmission on Ethernet Hardware\"\
    , RFC-826,\n       Symbolics, November 1982.\n   4.  Postel, J., \"Multi-LAN Address\
    \ Resolution\", RFC-925,\n       USC/Information Sciences Institute, October 1984.\n\
    \   5.  Carl-Mitchell, S., and J. S. Quarterman, \"Nameservers in a Campus\n \
    \      Domain\", SIGCUE Outlook, Vol.19, No.1/2, pp.78-88, ACM SIG\n       Computer\
    \ Uses in Education, P.O. Box 64145, Baltimore, MD 21264,\n       Spring/Summer\
    \ 1986.\n   6.  Braden, R., and J. Postel, \"Requirements for Internet Gateways\"\
    ,\n       RFC-1009, USC/Information Sciences Institute, June 1987.\n"
