- title: __initial_text__
  contents:
  - '                      Telnet Authentication Option

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the authentication option to the telnet\
    \ [1]\n   protocol as a generic method for negotiating an authentication type\n\
    \   and mode including whether encryption should be used and if\n   credentials\
    \ should be forwarded.  While this document summarizes\n   currently utilized\
    \ commands and types it does not define a specific\n   authentication type.  Separate\
    \ documents are to be published defining\n   each authentication type.\n   This\
    \ document updates a previous specification of the telnet\n   authentication option,\
    \ RFC 1416 [2], so that it can be used to\n   securely enable the telnet encryption\
    \ option [3].\n"
- title: 1.  Command Names and Codes
  contents:
  - "1.  Command Names and Codes\n      AUTHENTICATION          37\n          Authentication\
    \ Commands\n          IS                       0\n          SEND             \
    \        1\n          REPLY                    2\n          NAME             \
    \        3\n          Authentication Types\n          NULL                   \
    \  0\n          KERBEROS_V4              1\n          KERBEROS_V5            \
    \  2\n          SPX*                     3\n          MINK*                  \
    \  4\n          SRP                      5\n          RSA*[also used by SRA*]\
    \  6\n          SSL*                     7\n          [unassigned]           \
    \  8\n          [unassigned]             9\n          LOKI*                  \
    \ 10\n          SSA*                    11\n          KEA_SJ                 \
    \ 12\n          KEA_SJ_INTEG            13\n          DSS                    \
    \ 14\n          NTLM*                   15\n       Authentication types followed\
    \ by (*) were never submitted to the\n       IETF for consideration as an Internet\
    \ standard.\n       Following historical practice, future authentication type\
    \ numbers\n       and authentication modifiers will be assigned by the IANA under\
    \ a\n       First Come First Served policy as outlined by RFC 2434 [4].\n    \
    \   Despite the fact that authentication type numbers are allocated\n       out\
    \ of an 8-bit number space (as are most values in the telnet\n       specification)\
    \ it is not anticipated that the number space is or\n       will become in danger\
    \ of being exhausted.  However, if this\n       should become an issue, when over\
    \ 50% of the number space becomes\n       allocated, the IANA shall refer allocation\
    \ requests to either the\n       IESG or a designated expert for approval.  IANA\
    \ is instructed not\n       to issue new suboption values without submission of\
    \ documentation\n       of their use.\n          Modifiers\n          AUTH_WHO_MASK\
    \        1\n          AUTH_CLIENT_TO_SERVER    0\n          AUTH_SERVER_TO_CLIENT\
    \    1\n          AUTH_HOW_MASK        2\n          AUTH_HOW_ONE_WAY         0\n\
    \          AUTH_HOW_MUTUAL          2\n          ENCRYPT_MASK        20\n    \
    \      ENCRYPT_OFF              0\n          ENCRYPT_USING_TELOPT     4\n    \
    \      ENCRYPT_AFTER_EXCHANGE  16\n          ENCRYPT_RESERVED        20\n    \
    \      INI_CRED_FWD_MASK    8\n          INI_CRED_FWD_OFF         0\n        \
    \  INI_CRED_FWD_ON          8\n"
- title: 2.  Command Meanings
  contents:
  - "2.  Command Meanings\n   This document makes reference to a \"server\" and a\
    \ \"client\".  For the\n   purposes of this document, the \"server\" is the side\
    \ of the connection\n   that performed the passive TCP open (TCP LISTEN state),\
    \ and the\n   \"client\" is the side of the connection that did the active open.\n\
    \   IAC WILL AUTHENTICATION\n      The client side of the connection sends this\
    \ command to indicate\n      that it is willing to send and receive authentication\
    \ information.\n   IAC DO AUTHENTICATION\n      The servers side of the connection\
    \ sends this command to indicate\n      that it is willing to send and receive\
    \ authentication information.\n   IAC WONT AUTHENTICATION\n      The client side\
    \ of the connection sends this command to indicate\n      that it refuses to send\
    \ or receive authentication information; the\n      server side must send this\
    \ command if it receives a DO\n      AUTHENTICATION command.\n   IAC DONT AUTHENTICATION\n\
    \      The server side of the connection sends this command to indicate\n    \
    \  that it refuses to send or receive authentication information; the\n      client\
    \ side must send this command if it receives a WILL\n      AUTHENTICATION command.\n\
    \   IAC SB AUTHENTICATION SEND authentication-type-pair-list IAC SE\n      The\
    \ sender of this command (the server) requests that the remote\n      side send\
    \ authentication information for one of the authentication\n      types listed\
    \ in \"authentication-type-pair-list\".  The\n      \"authentication-type-pair-list\"\
    \ is an ordered list of\n      \"authentication-type\" pairs.  Only the server\
    \ side (DO\n      AUTHENTICATION) is allowed to send this.\n   IAC SB AUTHENTICATION\
    \ IS authentication-type-pair <auth data> IAC SE\n      The sender of this command\
    \ (the client) is sending the\n      authentication information for authentication\
    \ type\n      \"authentication-type-pair\".  Only the client side (WILL\n    \
    \  AUTHENTICATION) is allowed to send this.\n   IAC SB AUTHENTICATION REPLY authentication-type-pair\
    \ <auth data> IAC\n   SE\n      The sender of this command (the server) is sending\
    \ a reply to the\n      the authentication information received in a previous\
    \ IS command.\n      Only the server side (DO AUTHENTICATION) is allowed to send\
    \ this.\n   IAC SB AUTHENTICATION NAME remote-user IAC SE\n      This optional\
    \ command is sent to specify the account name on the\n      remote host that the\
    \ user wishes to be authorized to use.  Note\n      that authentication may succeed,\
    \ and the authorization to use a\n      particular account may still fail.  Some\
    \ authentication mechanisms\n      may ignore this command.\n   The \"authentication-type-pair\"\
    \ is two octets, the first is the\n   authentication type, and the second is a\
    \ modifier to the type.  The\n   authentication type may or may not include built-in\
    \ encryption.  For\n   instance, when the Kerberos 4 authentication type is negotiated\n\
    \   encryption must be negotiated with the telnet ENCRYPT option.\n   However,\
    \ the SSL and KEA_SJ authentication types provide an encrypted\n   channel as\
    \ part of a successful telnet AUTH option negotiation.\n   There are currently\
    \ five one bit fields defined in the modifier.  The\n   first two of these bits\
    \ are processed as a pair, the AUTH_WHO_MASK\n   bit and the AUTH_HOW_MASK bit.\
    \  There are four possible combinations\n   of these two bits:\n      AUTH_CLIENT_TO_SERVER\n\
    \      AUTH_HOW_ONE_WAY\n         The client will send authentication information\
    \ about the local\n         user to the server.  If the negotiation is successful,\
    \ the\n         server will have authenticated the user on the client side of\n\
    \         the connection.\n      AUTH_SERVER_TO_CLIENT\n      AUTH_HOW_ONE_WAY\n\
    \         The server will authenticate itself to the client.  If the\n       \
    \  negotiation is successful, the client will know that it is\n         connected\
    \ to the server that it wants to be connected to.\n      AUTH_CLIENT_TO_SERVER\n\
    \      AUTH_HOW_MUTUAL\n         The client will send authentication information\
    \ about the local\n         user to the server, and then the server will authenticate\n\
    \         itself to the client.  If the negotiation is successful, the\n     \
    \    server will have authenticated the user on the client side of\n         the\
    \ connection, and the client will know that it is connected\n         to the server\
    \ that it wants to be connected to.\n      AUTH_SERVER_TO_CLIENT\n      AUTH_HOW_MUTUAL\n\
    \         The server will authenticate itself to the client, and then the\n  \
    \       client will authenticate itself to the server.  If the\n         negotiation\
    \ is successful, the client will know that it is\n         connected to the server\
    \ that it wants to be connected to, and\n         the server will know that the\
    \ client is who it claims to be.\n      The third and fifth bits in the modifier\
    \ are the ENCRYPT_MASK\n      bits.  These bits are used to determine if and how\
    \ encryption\n      should be enabled.  Of the four possible combinations only\
    \ three\n      are currently defined:\n         ENCRYPT_OFF\n            Encryption\
    \ will not be used for this session.  TELOPT\n            ENCRYPT SHOULD NOT be\
    \ negotiated.  This mode MUST be used\n            with all AUTH types that do\
    \ not provide a shared secret to\n            be used as a session key.\n    \
    \     ENCRYPT_USING_TELOPT\n            Encryption will be negotiated via the\
    \ use of TELOPT ENCRYPT.\n            Immediately after authentication has completed\
    \ TELOPT\n            ENCRYPT MUST be negotiated in both directions.  This is\n\
    \            required to occur before credentials forwarding; other\n        \
    \    telnet options are negotiated; or any user data is\n            transmitted.\
    \  A failure to successfully negotiate TELOPT\n            ENCRYPT in either direction\
    \ MUST result in immediate session\n            termination.\n         ENCRYPT_AFTER_EXCHANGE\n\
    \            Encryption will be activated in both directions immediately\n   \
    \         after the successful exchange of the shared secret to be\n         \
    \   used as the session key.  The encryption algorithm to be\n            used\
    \ MUST be implied by the AUTH type.\n      The fourth bit field in the modifier\
    \ is the INI_CRED_FWD_MASK bit.\n      This bit is either set to INI_CRED_FWD_ON\
    \ or INI_CRED_FWD_OFF.\n      This bit is set by the client to advise the server\
    \ to expect\n      forwarded credentials from the client.\n         INI_CRED_FWD_OFF\n\
    \            The client will not be forwarding credentials to the server.\n  \
    \          This mode must be used if the selected authentication method\n    \
    \        does not support credentials forwarding.\n         INI_CRED_FWD_ON\n\
    \            Once authentication, and perhaps encryption, completes, the\n   \
    \         client will immediately forward authentication credentials\n       \
    \     to the server.\n      The motivation for this advisory bit is that the server\
    \ may wish\n      to wait until the forwarded credentials have been sent before\n\
    \      starting any operating system specific login procedures which may\n   \
    \   depend on these credentials.  Note that credentials forwarding may\n     \
    \ not be supported by all authentication mechanisms.  It is a\n      protocol\
    \ error to set this bit if the underlying authentication\n      mechanism does\
    \ not support credentials forwarding.\n      Credentials forwarding MUST NOT be\
    \ performed if\n      AUTH_CLIENT_TO_SERVER|AUTH_HOW_ONE_WAY was used since the\
    \ identity\n      of the server can not be assured.  Credentials SHOULD NOT be\n\
    \      forwarded if the telnet connection is not protected using some\n      encryption\
    \ or integrity protection services.\n      Note that older implementations of\
    \ the telnet authentication\n      option will not understand the ENCRYPT_MASK\
    \ and INI_CRED_FWD_MASK\n      bits.  Hence an implementation wishing to offer\
    \ these bits should\n      offer authentication type pairs with these bits both\
    \ set and not\n      set if backwards compatibility is required.\n"
- title: 3.  Default Specification
  contents:
  - "3.  Default Specification\n   The default specification for this option is\n\
    \      WONT AUTHENTICATION DONT AUTHENTICATION\n   meaning there will not be any\
    \ exchange of authentication information.\n"
- title: 4.  Motivation
  contents:
  - "4.  Motivation\n   One of the deficiencies of the Telnet protocol is that in\
    \ order to\n   log into remote systems, users have to type their passwords, which\n\
    \   are passed in clear text through the network.  If the connections go\n   through\
    \ untrusted networks, there is the possibility that passwords\n   will be compromised\
    \ by someone watching the packets while in transit.\n   The purpose of the AUTHENTICATION\
    \ option is to provide a framework\n   for the passing of authentication information\
    \ through the TELNET\n   session, and a mechanism to enable encryption of the\
    \ data stream as a\n   side effect of successful authentication or via subsequent\
    \ use of the\n   telnet ENCRYPT option.  This means that: 1) the users password\
    \ will\n   not be sent in clear text across the network, 2) if the front end\n\
    \   telnet process has the appropriate authentication information, it can\n  \
    \ automatically send the information, and the user will not have to\n   type any\
    \ password.  3) once authentication has succeeded, the data\n   stream can be\
    \ encrypted to provide protection against active attacks.\n   It is intended that\
    \ the AUTHENTICATION option be general enough that\n   it can be used to pass\
    \ information for any authentication and\n   encryption system.\n"
- title: 5.  Security Implications
  contents:
  - "5.  Security Implications\n   The ability to negotiate a common authentication\
    \ mechanism between\n   client and server is a feature of the authentication option\
    \ that\n   should be used with caution.  When the negotiation is performed, no\n\
    \   authentication has yet occurred.  Therefore each system has no way of\n  \
    \ knowing whether or not it is talking to the system it intends.  An\n   intruder\
    \ could attempt to negotiate the use of an authentication\n   system which is\
    \ either weak, or already compromised by the intruder.\n   If the authentication\
    \ type requires that encryption be enabled as a\n   separate optional negotiation\
    \ (the ENCRYPT option), it will provide a\n   window of vulnerability from when\
    \ the authentication completes, up to\n   and including the negotiation to turn\
    \ on encryption by an active\n   attacker.  An active attack is one where the\
    \ underlying TCP stream\n   can be modified or taken over by the active attacker.\
    \  If the server\n   only offers authentication type pairs that include the\n\
    \   ENCRYPT_USING_TELOPT set in the ENCRYPT_MASK field, this will avoid\n   the\
    \ window of vulnerability, since both parties will agree that\n   telnet ENCRYPT\
    \ option must be successfully negotiated immediately\n   following the successful\
    \ completion of telnet AUTH.\n   Other authentication types link the enabling\
    \ of encryption as a side\n   effect of successful authentication.  This will\
    \ also provide\n   protection against the active attacker.  The ENCRYPT_AFTER_EXCHANGE\n\
    \   bit allows these authentication types to negotiate encryption so that\n  \
    \ it can be made optional.\n   Another opportunity for active attacks is presented\
    \ when encryption\n   may be turned on and off without re-authentication.  Once\
    \ encryption\n   is disabled, an attacker may hijack the telnet stream, and interfere\n\
    \   with attempts to restart encryption.  Therefore, a client SHOULD NOT\n   support\
    \ the ability to turn off encryption.  Once encryption is\n   disabled, if an\
    \ attempt to re-enable encryption fails, the client\n   MUST terminate the telnet\
    \ connection.\n   It is important that in both cases the authentication type pair\
    \ be\n   integrity protected at the end of the authentication exchange.  This\n\
    \   must be specified for each authentication type to ensure that the\n   result\
    \ of the telnet authentication option negotiation is agreed to\n   by both the\
    \ client and the server.  Some authentication type\n   suboptions may wish to\
    \ include all of the telnet authentication\n   negotiation exchanges in the integrity\
    \ checksum, to fully protect the\n   entire exchange.\n   Each side MUST verify\
    \ the consistency of the auth-type-pairs in each\n   message received.  Any variation\
    \ in the auth-type-pair MUST be\n   treated as a fatal protocol error.\n"
- title: 6.  Implementation Rules
  contents:
  - "6.  Implementation Rules\n   WILL and DO are used only at the beginning of the\
    \ connection to\n   obtain and grant permission for future negotiations.\n   The\
    \ authentication is only negotiated in one direction; the server\n   must send\
    \ the \"DO\", and the client must send the \"WILL\".  This\n   restriction is\
    \ due to the nature of authentication; there are three\n   possible cases; server\
    \ authenticates client, client authenticates\n   server, and server and client\
    \ authenticate each other.  By only\n   negotiating the option in one direction,\
    \ and then determining which\n   of the three cases is being used via the suboption,\
    \ potential\n   ambiguity is removed.  If the server receives a \"DO\", it must\
    \ respond\n   with a \"WONT\".  If the client receives a \"WILL\", it must respond\
    \ with\n   a \"DONT\".\n   Once the two hosts have exchanged a DO and a WILL,\
    \ the server is free\n   to request authentication information.  In the request,\
    \ a list of\n   supported authentication types is sent.  Only the server may send\n\
    \   requests (\"IAC SB AUTHENTICATION SEND authentication-type-pair-list\n   IAC\
    \ SE\").  Only the client may transmit authentication information\n   via the\
    \ \"IAC SB AUTHENTICATION IS authentication-type ... IAC SE\"\n   command.  Only\
    \ the server may send replies (\"IAC SB AUTHENTICATION\n   REPLY authentication-type\
    \ ... IAC SE\").  As many IS and REPLY\n   suboptions may be exchanged as are\
    \ needed for the particular\n   authentication scheme chosen.\n   If the client\
    \ does not support any of the authentication types listed\n   in the authentication-type-pair-list,\
    \ a type of NULL should be used\n   to indicate this in the IS reply.  Note that\
    \ if the client responds\n   with a type of NULL, the server may choose to close\
    \ the connection.\n   When the server has concluded that authentication cannot\
    \ be\n   negotiated with the client it should send IAC DONT AUTH to the\n   client.\n\
    \   The order of the authentication types MUST be ordered to indicate a\n   preference\
    \ for different authentication types, the first type being\n   the most preferred,\
    \ and the last type the least preferred.\n   As long as the server is WILL AUTH\
    \ it may request authentication\n   information at any time.  This is done by\
    \ sending a new list of\n   supported authentication types.  Requesting authentication\n\
    \   information may be done as a way of verifying the validity of the\n   client's\
    \ credentials after an extended period of time or to negotiate\n   a new session\
    \ key for use during encryption.\n"
- title: 7.  User Interface
  contents:
  - "7.  User Interface\n   Normally protocol specifications do not address user interface\n\
    \   specifications.  However, due to the fact that the user will probably\n  \
    \ want to be able to configure the authentication and encryption and\n   know\
    \ whether or not the negotiations succeeded, some guidance needs\n   to be given\
    \ to implementors to provide some minimum level of user\n   control.\n   The user\
    \ MUST be able to specify whether or not authentication is to\n   be used, and\
    \ whether or not encryption is to used if the\n   authentication succeeds.  There\
    \ SHOULD be at least four settings,\n   REQUIRE, PROMPT, WARN and DISABLE.  Setting\
    \ the authentication switch\n   to REQUIRE means that if the authentication fails,\
    \ then an\n   appropriate error message must be displayed and the TELNET connection\n\
    \   must be terminated.  Setting the authentication switch to PROMPT\n   means\
    \ that if the authentication fails, then an appropriate error\n   message must\
    \ be displayed and the user must be prompted for\n   confirmation before continuing\
    \ the TELNET session.  Setting the\n   authentication switch to WARN means that\
    \ if the authentication fails,\n   then an appropriate error message must be displayed\
    \ before continuing\n   the TELNET session.  Setting the authentication switch\
    \ to DISABLE\n   means that authentication will not be attempted.  The encryption\n\
    \   switch SHOULD have the same settings as the authentication switch;\n   however\
    \ its settings are only used when authentication succeeds.  The\n   default setting\
    \ for both switches should be WARN.  Both of these\n   switches may be implemented\
    \ as a single switch, though having them\n   separate gives more control to the\
    \ user.\n"
- title: 8.  Example
  contents:
  - "8.  Example\n   The following is an example of use of the option:\n   Client\
    \                           Server\n                                    IAC DO\
    \ AUTHENTICATION\n   IAC WILL AUTHENTICATION\n   [ The server is now free to request\
    \ authentication information.\n     ]\n                                    IAC\
    \ SB AUTHENTICATION SEND\n                                    KERBEROS_V4 CLIENT|MUTUAL\n\
    \                                    KERBEROS_V4 CLIENT|ONE_WAY IAC\n        \
    \                            SE\n   [ The server has requested mutual Kerberos\
    \ authentication, but is\n     willing to do just one-way Kerberos authentication.\
    \  The client\n     will now respond with the name of the user that it wants to\
    \ log\n     in as, and the Kerberos ticket.  ]\n   IAC SB AUTHENTICATION NAME\
    \ \"joe\"\n   IAC SE\n   IAC SB AUTHENTICATION IS\n   KERBEROS_V4 CLIENT|MUTUAL\
    \ AUTH 4\n   7 1 67 82 65 89 46 67 7 9 77 0\n   48 24 49 244 109 240 50 208 43\n\
    \   35 25 116 104 44 167 21 201 224\n   229 145 20 2 244 213 220 33 134\n   148\
    \ 4 251 249 233 229 152 77 2\n   109 130 231 33 146 190 248 1 9\n   31 95 94 15\
    \ 120 224 0 225 76 205\n   70 136 245 190 199 147 155 13\n   IAC SE\n   [ The\
    \ server responds with an ACCEPT command to state that the\n     authentication\
    \ was successful.  ]\n                                    IAC SB AUTHENTICATION\
    \ REPLY\n                                    KERBEROS_V4 CLIENT|MUTUAL ACCEPT\n\
    \                                    IAC SE\n   [ Next, the client sends across\
    \ a CHALLENGE to verify that it is\n     really talking to the right server. \
    \ ]\n   IAC SB AUTHENTICATION IS\n   KERBEROS_V4 CLIENT|MUTUAL\n   CHALLENGE xx\
    \ xx xx xx xx xx xx\n   xx IAC SE\n   [ Lastly, the server sends across a RESPONSE\
    \ to prove that it\n     really is the right server.\n                       \
    \               IAC SB AUTHENTICATION REPLY\n                                \
    \      KERBEROS_V4 CLIENT|MUTUAL\n                                      RESPONSE\
    \ yy yy yy yy yy yy yy yy\n                                      IAC SE\n   The\
    \ following is an example of use of the option with encryption\n   negotiated\
    \ via telnet ENCRYPT:\n   Client                           Server\n          \
    \                          IAC DO AUTHENTICATION\n   IAC WILL AUTHENTICATION\n\
    \   [ The server is now free to request authentication information.\n     ]\n\
    \                                    IAC SB AUTHENTICATION SEND\n            \
    \                        KERBEROS_V4\n                                    CLIENT|MUTUAL|ENCRYPT_USING_TELOPT\n\
    \                                    KERBEROS_V4 CLIENT|ONE_WAY IAC\n        \
    \                            SE\n   [ The server has requested mutual Kerberos\
    \ authentication, but is\n     willing to do just one-way Kerberos authentication.\
    \  In both\n     cases it is willing to encrypt the data stream.  The client\n\
    \     will now respond with the name of the user that it wants to log\n     in\
    \ as, and the Kerberos ticket.  ]\n   IAC SB AUTHENTICATION NAME \"joe\"\n   IAC\
    \ SE\n   IAC SB AUTHENTICATION IS\n   KERBEROS_V4\n   CLIENT|MUTUAL|ENCRYPT_USING_TELOPT\n\
    \   AUTH 4 7 1 67 82 65 89 46 67 7 9\n   77 0 48 24 49 244 109 240 50 208\n  \
    \ 43 35 25 116 104 44 167 21 201\n   224 229 145 20 2 244 213 220 33\n   134 148\
    \ 4 251 249 233 229 152 77\n   2 109 130 231 33 146 190 248 1 9\n   31 95 94 15\
    \ 120 224 0 225 76 205\n   70 136 245 190 199 147 155 13\n   IAC SE\n   [ The\
    \ server responds with an ACCEPT command to state that the\n     authentication\
    \ was successful.  ]\n                                    IAC SB AUTHENTICATION\
    \ REPLY\n                                    KERBEROS_V4\n                   \
    \                 CLIENT|MUTUAL|ENCRYPT_USING_TELOPT\n                       \
    \             ACCEPT IAC SE\n   [ Next, the client sends across a CHALLENGE to\
    \ verify that it is\n     really talking to the right server.  ]\n   IAC SB AUTHENTICATION\
    \ IS\n   KERBEROS_V4\n   CLIENT|MUTUAL|ENCRYPT_USING_TELOPT\n   CHALLENGE xx xx\
    \ xx xx xx xx xx\n   xx IAC SE\n   [ The server sends across a RESPONSE to prove\
    \ that it really is\n     the right server.  ]\n                             \
    \       IAC SB AUTHENTICATION REPLY\n                                    KERBEROS_V4\n\
    \                                    CLIENT|MUTUAL|ENCRYPT_USING_TELOPT\n    \
    \                                RESPONSE yy yy yy yy yy yy yy yy\n          \
    \                          IAC SE\n   [ At this point, the client and server begin\
    \ to negotiate the\n     telnet ENCRYPT option in each direction for a secure\
    \ channel.\n     If the option fails in either direction for any reason the\n\
    \     connection must be immediately terminated.  ]\n   The following is an example\
    \ of use of the option with integrated\n   encryption:\n   Client            \
    \               Server\n                                    IAC DO AUTHENTICATION\n\
    \   IAC WILL AUTHENTICATION\n   [ The server is now free to request authentication\
    \ information.\n     ]\n                                    IAC SB AUTHENTICATION\
    \ SEND\n                                    KEA_SJ\n                         \
    \           CLIENT|MUTUAL|ENCRYPT_AFTER_EXCHANGE\n                           \
    \         IAC SE\n   [ The server has requested mutual KEA authentication with\n\
    \     SKIPJACK encryption.  The client will now respond with the name\n     of\
    \ the user that it wants to log in as and the KEA cert.  ]\n   IAC SB AUTHENTICATION\
    \ NAME \"joe\"\n   IAC SE IAC SB AUTHENTICATION IS\n   KEA_SJ\n   CLIENT|MUTUAL|ENCRYPT_AFTER_EXCHANGE\n\
    \   '1' CertA||Ra IAC SE\n   [ The server responds with its KEA Cert.  ]\n   \
    \                                 IAC SB AUTHENTICATION REPLY\n              \
    \                      KEA_SJ\n                                    CLIENT|MUTUAL|ENCRYPT_AFTER_EXCHANGE\n\
    \                                    '2'\n                                   \
    \ CertB||Rb||IVb||Encrypt(NonceB)\n                                    IAC SE\n\
    \   [ Next, the client sends across a CHALLENGE to verify that it is\n     really\
    \ talking to the right server.  ]\n   IAC SB AUTHENTICATION IS KEA_SJ\n   CLIENT|MUTUAL|ENCRYPT_AFTER_EXCHANGE\n\
    \   '3' IVa||Encrypt( NonceB xor\n   0x0C18 || NonceA ) IAC SE\n   [ At this point,\
    \ the client begins to encrypt the outgoing data\n     stream, and the server,\
    \ after receiving this command, begins to\n     decrypt the incoming data stream.\
    \  Lastly, the server sends\n     across a RESPONSE to prove that it really is\
    \ the right server.\n     ]\n                                    IAC SB AUTHENTICATION\
    \ REPLY\n                                    KEA_SJ\n                        \
    \            CLIENT|MUTUAL|ENCRYPT_AFTER_EXCHANGE\n                          \
    \          '4' Encrypt( NonceA xor 0x0C18 )\n                                \
    \    IAC SE\n   [ At this point, the server begins to encrypt its outgoing data\n\
    \     stream, and the client, after receiving this command, begins to\n     decrypt\
    \ its incoming data stream.  ]\n   It is expected that any implementation that\
    \ supports the Telnet\n   AUTHENTICATION option will support all of this specification.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This memo describes a general framework for adding\
    \ authentication and\n   encryption to the telnet protocol.  The actual authentication\n\
    \   mechanism is described in the authentication suboption\n   specifications,\
    \ and the security of the authentication option is\n   dependent on the strengths\
    \ and weaknesses of the authentication\n   suboption.\n   It should be noted that\
    \ the negotiation of the authentication type\n   pair is not protected, thus allowing\
    \ an attacker to force the result\n   of the authentication to the weakest mutually\
    \ acceptable method.\n   (For example, even if both sides of the negotiation can\
    \ accept a\n   \"strong\" mechanism and a \"40-bit\" mechanism, an attacker could\
    \ force\n   selection of the \"40-bit\" mechanism.)  An implementation should\n\
    \   therefore only accept an authentication mechanism to be negotiated if\n  \
    \ it is willing to trust it as being secure.\n   It should also be noted that\
    \ the negotiation of the username in the\n   IAC SB AUTHENTICATION NAME name IAC\
    \ SE message is not protected.\n   Implementations should verify the value by\
    \ a secure method before\n   using this untrusted value.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   Many people have worked on this document over the span\
    \ of many years.\n   Dave Borman was a document editor and author of much of the\
    \ original\n   text.  Other folks who have contributed ideas and suggestions to\
    \ this\n   text include: David Carrel, Jeff Schiller, and Richard Basch.\n"
- title: 10.  References
  contents:
  - "10.  References\n   [1] Postel, J. and J. Reynolds, \"Telnet Protocol Specification\"\
    , STD\n       8, RFC 854, May 1983.\n   [2] Borman D., \"Telnet Authentication\
    \ Option\", RFC 1416, February\n       1993.\n   [3] Ts'o, T., \"Telnet Data Encryption\
    \ Option\", RFC 2946, September\n       2000.\n   [4] Alvestrand, H. and T. Narten,\
    \ \"Guidelines for Writing an IANA\n       Considerations Section in RFCs\", BCP\
    \ 26, RFC 2434, October 1998.\n"
- title: 12.  Authors' Addresses
  contents:
  - "12.  Authors' Addresses\n   Theodore Ts'o, Editor\n   VA Linux Systems\n   43\
    \ Pleasant St.\n   Medford, MA 02155\n   Phone: (781) 391-3464\n   EMail: tytso@mit.edu\n\
    \   Jeffrey Altman\n   Columbia University\n   Watson Hall Room 716\n   612 West\
    \ 115th Street\n   New York NY 10025\n   Phone: +1 (212) 854-1344\n   EMail: jaltman@columbia.edu\n\
    \   Mailing List: telnet-wg@BSDI.COM\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
