- title: __initial_text__
  contents:
  - '                   Telnet Data Entry Terminal Option

    '
- title: '1.  Command Name and Code:'
  contents:
  - "1.  Command Name and Code:\n  DET             20\n"
- title: 2.  Command Meanings
  contents:
  - "2.  Command Meanings\n  IAC WILL DET\n    The sender of this command REQUESTS\
    \ or AGREES to send and receive\n    subcommands to control the Data Entry Terminal.\n\
    \  IAC WONT DET\n    The sender of this command REFUSES to send and receive subcommands\n\
    \    to control the Data Entry Terminal.\n  IAC DO DET\n    The sender of this\
    \ command REQUESTS or AGREES to send and receive\n    subcommands to control the\
    \ Data Entry Terminal.\n  IAC DONT DET\n    The sender of this command REFUSES\
    \ to send and receive subcommands\n    to control the Data Entry Terminal.\n \
    \ The DET option uses five classes of subcommands 1) to establish the\n  requirements\
    \ and capabilities of the application and the terminal, 2)\n  to format the screen,\
    \ and to control the 3) edit, 4) erasure, and 5)\n  transmission functions. The\
    \ subcommands that perform these functions\n  are described below.\n  The Network\
    \ Virtual Data Entry Terminal (NVDET)\n    The NVDET consists of a keyboard and\
    \ a rectangular display. The\n    keyboard is capable of generating all of the\
    \ characters of the ASCII\n    character set. In addition, the keyboard may possess\
    \ a number of\n    function keys which when pressed cause a FN subcommand to be\
    \ sent.\n"
- title: John Day                                                        [page 1]
  contents:
  - "John Day                                                        [page 1]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    (Although most DET's will support one or more\
    \ peripheral devices\n    such as a paper tape reader or a printer, this option\
    \ does not\n    consider their support. Support of peripheral devices should be\n\
    \    treated by a is a separate option).\n    The screen of the data entry terminal\
    \ is a rectangle M characters by\n    N lines. The values of M and N are set by\
    \ negotiating the Output\n    Line Width and Output Page Size options, respectively.\
    \ The next\n    writing position (x,y) on the screen (where x is the character\n\
    \    position and y is the position of the line on the screen) is\n    indicated\
    \ by a special display character called the cursor. The\n    cursor may be moved\
    \ to any position on the screen without disturbing\n    any characters already\
    \ on the screen. Cursor addressing in existing\n    terminals utilizes several\
    \ topologies and addressing methods. In\n    order to make the burden of implementaton\
    \ as easy as possible this\n    protocol supports two topologies (the finite plane\
    \ and the helical\n    torus) and three addressing methods ((x,y); x and y, and\
    \ relative\n    increments). Since the finite plane with absolute addressing is\
    \ the\n    least ambiguous and the easiest to translate to and from the others,\n\
    \    it is the default scheme used by the NVDET. The torodial form with\n    either\
    \ relative or absolute addressing is provided for convience.\n    Also the NVDET\
    \ provides a mechanism for defining on the screen\n    fields with special attributes.\
    \ For example, characters entered into\n    these fields may be displayed with\
    \ brighter intensity, highlighted\n    by reverse video or blinking, or protected\
    \ from modification by the\n    user. This latter feature is one of the most heavily\
    \ used for\n    applications where the DET displays a form to be filled out by\
    \ the\n    user.\n    The definition of the NVDET uses Telnet option subnegotiations\
    \ to\n    accomplish all of its functions. Since none of the ASCII characters\n\
    \    sent in the data stream have been used to define these functions,\n    the\
    \ DET option can be used in a \"raw\" or even \"rare\" mode. In\n    circumstances\
    \ where the application program knows what kind of\n    terminal is on the other\
    \ end, it can send the ASCII characters\n    required to control functions not\
    \ supported by the option or an\n    implementation. In general keeping all NVDET\
    \ functions out of the\n    data stream provides better flexibility.\n  Facility\
    \ Functions  (for detailed semantics see Section 5.)\n    IAC SB DET <DET facility\
    \ subcommand><facility map> IAC SE\n    where <DET facility subcommand> is one\
    \ 8-bit byte indicating  the\n    class of the facilities to be described, and\
    \ <facility map> is a\n    field of one or two  8-bit  bytes containing  flags\
    \  describing  the\n"
- title: John Day                                                        [page 2]
  contents:
  - "John Day                                                        [page 2]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    facilities required or desired by the sender.\
    \  The bits of the\n    facility maps are numbered from the right starting at\
    \ zero.  Thus,\n    if bit 2 is set the field will have a decimal  value  of \
    \ 4.   The\n    values of the field are as follows:\n    facility cmd:  EDIT FACILITIES\
    \                    subcommand code: 1\n      facility map:                 \
    \             bit numbers\n        Toroidal Cursor Addressing                \
    \  6\n        Incremental Cursor Addressing               5\n        Read Cursor\
    \ Address                         4\n        Line Insert/Delete              \
    \            3\n        Char Insert/Delete                          2\n      \
    \  Back Tab                                    1\n        Positive Addressing\
    \ only                    0\n    where:\n    If the Toroidal Cursor Addressing\
    \ bit is set, the sender requests or\n    provides that the SKIP TO LINE and SKIP\
    \ TO CHAR subcommands be\n    supported.\n    If the Incremental Cursor Addressing\
    \ bit is set, the sender requests\n    or provides that the UP, DOWN, LEFT, and\
    \ RIGHT subcommands be\n    supported.\n    If the Read Cursor bit is set, the\
    \ sender requests or provides the\n    READ CURSOR subcommand.\n    If the Line\
    \ Insert/Delete bit is set, the sender requests or\n    provides that the LINE\
    \ INSERT and LINE DELETE subcommands be\n    supported.\n    If the Char Insert/Delete\
    \ bit is set, the sender requests or\n    provides that the CHAR INSERT and CHAR\
    \ DELETE subcommands be\n    supported.\n    If the Back Tab bit is set, the sender\
    \ requests or provides that the\n    BACK TAB subcommand be supported.\n    If\
    \ the Positive Addressing bit is set, then the sender is informing\n    the receiver\
    \ that it can only move the cursor in the positive\n    direction. (Note: Terminals\
    \ that have this property also have a Home\n    function to get back to the beginning.)\n"
- title: John Day                                                        [page 3]
  contents:
  - "John Day                                                        [page 3]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    facility cmd:  ERASE FACILITIES             \
    \     subcommand code:  2\n      facility map:                               \
    \ bit numbers\n        Erase Field                                     4\n   \
    \     Erase Line                                      3\n        Erase Rest of\
    \ Screen                            2\n        Erase Rest of Line            \
    \                  1\n        Erase Rest of Field                            \
    \ 0\n    where:\n    If a bit of the facility map for this facility command is\
    \ set, the\n    sender requests or provides the facility indicated by the bit.\
    \ For a\n    more complete description of each of these functions see the Erase\n\
    \    Functions section below.\n    facility cmd:  TRANSMIT FACILITIES        \
    \       subcommand code:  3\n      facility map:                      bit numbers\n\
    \        Data Transmit                         5\n        Transmit Line      \
    \                   4\n        Transmit Field                        3\n     \
    \   Transmit Rest of Screen               2\n        Transmit Rest of Line   \
    \              1\n        Transmit Rest of Field                0\n    where:\n\
    \    If a bit of the facility map for this facility command is set, the\n    sender\
    \ requests or provides the facility indicated by the bit. For a\n    more complete\
    \ description of each of these functions see the\n    Transmit Functions section\
    \ below.\n    facility cmd:  FORMAT FACILITIES                 subcommand code:\
    \  4\n      facility map:                               bit numbers\n        FN\
    \                                 byte 0      7\n        Modified            \
    \                           6\n        Light Pen                             \
    \         5\n        Repeat                                         4\n      \
    \  Blinking                                       3\n        Reverse Video   \
    \                               2\n        Right Justification               \
    \             1\n        Overstrike                                     0\n"
- title: John Day                                                        [page 4]
  contents:
  - "John Day                                                        [page 4]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n        Protection On/Off                  byte 1\
    \      6\n        Protection                                     5\n        Alphabetic-only\
    \ Protection                     4\n        Numeric-only Protection          \
    \              3\n        Intensity                                      0-2\n\
    \    where:\n    If the FN bit is set, the sender requests or provides the FN\n\
    \    subcommand.\n    If the Modified bit is set, the sender requests or provides\
    \ the\n    ability to indicate fields that are modified and supports the\n   \
    \ TRANSMIT MODIFIED subcommand.\n    If the Light Pen bit is set, the sender requests\
    \ or provides the\n    support of a light pen, including the Pen Selectable attribute\
    \ of\n    the DATA FORMAT subcommand.\n    If the Repeat bit is set the sender\
    \ requests or provides the REPEAT\n    subcommand.\n    If the Blinking bit is\
    \ set, the sender requests or provides the\n    ability to highlight a string\
    \ of characters by causing them to\n    blink.\n    If the Reverse Video bit is\
    \ set, the sender requests or provides the\n    ability to highlight a string\
    \ of characters by \"reversing the video\n    image,\" i.e., if the characters\
    \ are normally displayed as black\n    characters on a white background, this\
    \ is reversed to be white\n    characters on a black background, or vice versa.\n\
    \    If the Right Justification bit is set, the sender requests or\n    provides\
    \ the ability to cause entries of data to be right justified\n    in the field.\n\
    \    If the Overstrike bit is set, the sender requests or provides the\n    ability\
    \ to superimpose one character over another on the screen much\n    like a hard\
    \ copy terminal would do if the print mechanism struck the\n    same position\
    \ on the paper with different characters.\n    If the Protection On/Off bit is\
    \ set, the sender requests or provides\n    the ability to turn on and off field\
    \ protection.\n    If the Protection bit is set, the sender requests or provides\
    \ the\n    ability to protect certain strings of\n"
- title: John Day                                                        [page 5]
  contents:
  - "John Day                                                        [page 5]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    characters displayed on the screen from being\
    \ altered by the user of\n    the terminal. Setting this bit also implies that\
    \ ERASE UNPROTECTED,\n    DATA TRANSMIT, FIELD SEPARATOR, and TRANSMIT UNPROTECTED\
    \ subcommands\n    (see below) are supported.\n    If the Alphabetic-only Protection\
    \ bit is set, the sender requests or\n    provides the ability to constrain the\
    \ user of the terminal such that\n    he may only enter alphabetic data into certain\
    \ areas of the screen.\n    If the Numeric-only Protection bit is set, the sender\
    \ requests or\n    provides the ability to constrain the user of the terminal\
    \ such that\n    he may only enter numerical data into certain areas of the screen.\n\
    \    The three bits of the Intensity field will contain a positive binary\n  \
    \  integer indicating the number of levels of intensity that the sender\n    requests\
    \ or provides for displaying the data. The value of the 3 bit\n    field should\
    \ be interpreted in the following way:\n      1        one visible intensity\n\
    \      2        two intensities; normal and bright\n      3        three intensities;\
    \ off, normal, and bright\n      >3        >3 intensities; off, and the remaining\
    \ levels\n      proportioned from dimmest to brightest intensity.\n    For the\
    \ all of the above commands, if the appropriate bit in\n    <facility map> is\
    \ not set, then the sender does not request or\n    provide that facility.\n \
    \ Editing Functions\n    IAC SB DET MOVE CURSOR <x><y> IAC SE              subcommand\
    \ code: 5\n    where <x> is an 8-bit byte containing a positive binary integer\n\
    \    representing the character position of the cursor, <y> is an 8-bit\n    byte\
    \ containing a positive binary integer representing the line\n    position of\
    \ the cursor.\n    This subcommand moves the cursor to the absolute screen address\n\
    \    (x,y) with the following boundary conditions:\n      if x>M-1, set x=M-1\
    \ and send an ERROR subcommand\n      if y>N-1, set y=N-1 and send an ERROR subcommand\n\
    \    This describes a finite plane topology on the screen.\n"
- title: John Day                                                        [page 6]
  contents:
  - "John Day                                                        [page 6]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    IAC SB DET SKIP TO LINE <y> IAC SE          \
    \      subcommand code: 6\n    where <y> is a positive 8-bit binary number.\n\
    \    This subcommand moves the cursor to the absolute screen line y. x\n    remains\
    \ constant. For values of y>N-1\n      y = y mod N.\n    IAC SB DET SKIP TO CHAR\
    \ <x> IAC SE                subcommand code: 7\n    where <x> is a positive 8-bit\
    \ binary number.\n    This subcommand moves the cursor to the absolute character\
    \ position\n    x. y remains constant, unless x>M-1 in which case:\n      x' =\
    \ (x mod M)\n      y' = (y+(x DIV N))\n      where x' and y' are the new values\
    \ of the cursor.\n    These last two subcommands define a toroidal topology on\
    \ the screen.\n    IAC SB DET UP IAC SE                              subcommand\
    \ code: 8\n    IAC SB DET DOWN IAC SE                            subcommand code:\
    \ 9\n    IAC SB DET LEFT IAC SE                           subcommand code: 10\n\
    \    IAC SB DET RIGHT IAC SE                          subcommand code: 11\n  \
    \  These subcommands are provided as a convenience for some terminals.\n    The\
    \ commands UP, DOWN, LEFT, and RIGHT are defined as\n    UP:     (x,y)=(x, y-1\
    \ mod N)\n    DOWN:   (x,y)=(x, y+1 mod N)\n    LEFT:   (x,y)=(x-1, y); if x=0\
    \ then x-1 = 0\n    RIGHT:  (x,y)=(x+1 mod M, y) and y = y+1 if x+1>M-1\n    Note:\
    \ DOWN, LEFT, and RIGHT cannot always be replaced by the ASCII\n    codes for\
    \ linefeed, backspace, and space respectively. The latter\n    are format effectors\
    \ while the former are cursor controls.\n    IAC SB DET HOME IAC SE          \
    \                 subcommand code: 12\n    This subcommand positions the cursor\
    \ to (0,0). This is equivalent to\n    a MOVE CURSOR 0,0 or the sequence SKIP\
    \ TO LINE 0, SKIP TO CHAR 0.\n"
- title: John Day                                                        [page 7]
  contents:
  - "John Day                                                        [page 7]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    This subcommand is provided for convenience,\
    \ since most terminals\n    have it as a separate control.\n    IAC SB DET LINE\
    \ INSERT IAC SE                    subcommand code: 13\n    This subcommand inserts\
    \ a line of spaces between lines y (the\n    current line, determined by the position\
    \ of the cursor) and line\n    y-1. Lines y through N-2 move down one line, i.e.\
    \ line y becomes\n    line y+1; y+1 becomes y+2, ...; N-2 becomes N-1. Line N-1\
    \ is lost\n    off the bottom of the screen. The position of the cursor remains\n\
    \    unchanged.\n    IAC SB DET LINE DELETE IAC SE                    subcommand\
    \ code: 14\n    This subcommand deletes line y where y is the current line position\n\
    \    of the cursor. Lines y+1 through N-1 move up one line, i.e. line y+1\n  \
    \  becomes line y; y+2 becomes y+1; ...; N-1 becomes N-2. The N-1st\n    line\
    \ position is set to all spaces. The cursor position remains\n    unchanged.\n\
    \    IAC SB DET CHAR INSERT IAC SE                    subcommand code: 15\n  \
    \  This subcommand inserts the next character in the data stream\n    between\
    \ the xth and x-1st characters, where x is the current\n    character position\
    \ of the cursor. The xth through M-2nd characters\n    on the line are shifted\
    \ one character positon to the right. The new\n    character is inserted at the\
    \ vacated xth position. The M-1st\n    character is lost. The position of the\
    \ cursor remains unchanged.\n    IAC SB DET CHAR DELETE IAC SE               \
    \     subcommand code: 16\n    This subcommand deletes the character on the screen\
    \ at the x-th\n    position. The x-th character is removed and the characters\
    \ x+1\n    through M-1 are shifted one character position to the left to become\n\
    \    the x-th through M-2nd characters. The M-1st character position is\n    left\
    \ empty. (For most terminals it will be set to a NUL or space.)\n    The cursor\
    \ position remains unchanged.\n    IAC SB DET READ CURSOR IAC SE             \
    \       subcommand code: 17\n    This subcommand requests the receiver to send\
    \ the present position\n    of the cursor to the sender.\n    IAC SB DET CURSOR\
    \ POSITION <x><y> IAC SE         subcommand code: 18\n    where <x> and <y> are\
    \ positive 8-bit binary integers.\n"
- title: John Day                                                        [page 8]
  contents:
  - "John Day                                                        [page 8]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    This subcommand is sent by a Telnet implementation\
    \ in response to a\n    READ CURSOR subcommand to convey the coordinates of the\
    \ cursor to\n    the other side. Note: x is less than M and y is less than N.\n\
    \    IAC SB DET REVERSE TAB IAC SE                    subcommand code: 19\n  \
    \  This subcommand causes the cursor to move to the previous tab\n    position.\
    \ If none exists on the present line, the cursor moves to\n    the previous line\
    \ and so on until a tab is found or the address\n    (0,0) is encountered. When\
    \ field protection is in effect the cursor\n    moves to the beginning of the\
    \ preceding unprotected field.\n  Transmit Functions (For detailed semantics see\
    \ Section 5.)\n    IAC SB DET TRANSMIT SCREEN IAC SE                subcommand\
    \ code: 20\n    This subcommand causes the terminal to transmit all characters\
    \ on\n    the screen from position (0,0) to (M-1,N-1). The cursor will be at\n\
    \    (0,0) after the operation is complete.\n    IAC SB DET TRANSMIT UNPROTECTED\
    \ IAC SE           subcommand code: 21\n    This subcommand causes the terminal\
    \ to transmit all characters in\n    unprotected fields from position (0,0) to\
    \ (M-1,N-1). The unprotected\n    fields are separated by the field separator\
    \ subcommand. The cursor\n    will be at (0,0) or at the beginning of the first\
    \ unprotected field\n    after the operation is complete.\n    IAC SB DET TRANSMIT\
    \ LINE IAC SE                  subcommand code: 22\n    This subcommand causes\
    \ the terminal to transmit all data on the yth\n    line where y is determined\
    \ by the present position of the cursor.\n    Data is sent from character position\
    \ (0,y) to the end-of-line or\n    position (M-1,y) whichever comes first. The\
    \ cursor position after\n    the transmission is one character position after\
    \ the end of line\n    condition or the beginning of the next line, (0,y+1).\n\
    \    IAC SB DET TRANSMIT FIELD IAC SE                 subcommand code: 23\n  \
    \  This subcommand causes the terminal to transmit all data in the\n    field\
    \ presently occupied by the cursor. The cursor position after\n    the operation\
    \ is complete is one character position after the end of\n    the field or, if\
    \ that\n    position is protected, at the beginning of the next unprotected\n\
    \    field.\n"
- title: John Day                                                        [page 9]
  contents:
  - "John Day                                                        [page 9]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    IAC SB DET TRANSMIT REST OF SCREEN IAC SE   \
    \     subcommand code: 24\n    This subcommand causes the terminal to transmit\
    \ all characters on\n    the screen from position (x,y) to (M-1,N-1) or until\
    \ the end of\n    text. (x,y) is the current cursor position. The cursor position\n\
    \    after the operation is one character position after the last text\n    character,\
    \ or (0,0) if the last filled character position is\n    (M-1,N-1).\n    IAC SB\
    \ DET TRANSMIT REST OF LINE IAC SE          subcommand code: 25\n    This subcommand\
    \ causes the terminal to transmit all characters on\n    the yth line from position\
    \ (x,y) to the end of line or (M-1,y)\n    whichever comes first. (x,y) is the\
    \ current cursor position. The\n    cursor position after the operation is one\
    \ character position after\n    the last character of the line or the first character\
    \ of the next\n    line.\n    IAC SB DET TRANSMIT REST OF FIELD IAC SE       \
    \  subcommand code: 26\n    This subcommand causes the receiver to transmit the\
    \ rest of the\n    characters in the field currently occupied by the cursor. The\
    \ cursor\n    position after the operation is at the beginning of the next field.\n\
    \    IAC SB DET TRANSMIT MODIFIED IAC SE              subcommand code: 27\n  \
    \  This subcommand causes the receiver to transmit only those fields\n    which\
    \ have the modified attribute set. The cursor position after the\n    operation\
    \ is unchanged.\n    IAC SB DET DATA TRANSMIT <x><y> IAC SE           subcommand\
    \ code: 28\n    This subcommand is used to preface data sent from the terminal\
    \ in\n    response to a user action or a TRANSMIT command. The parameters <x>\n\
    \    and <y> indicate the initial position of the cursor. See the\n    Transmit\
    \ Subcommands subsection in Section 5 for more details. A\n    DATA TRANSMIT subcommand\
    \ may precede an entire transmission with\n    each field being delineated by\
    \ the FIELD SEPARATOR subcommand as\n    would be the case in a response toa\n\
    \    TRANSMIT UNPROTECTED. Or, it may precede each field as would be the\n   \
    \ case in a response to a TRANSMIT MODIFIED.\n  Erase Functions\n    IAC SB DET\
    \ ERASE SCREEN IAC SE                   subcommand code: 29\n"
- title: John Day                                                       [page 10]
  contents:
  - "John Day                                                       [page 10]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    This subcommand causes all characters to be removed\
    \ from the screen.\n    All fields regardless of their attributes are deleted.\
    \ The cursor\n    position after the operation will be (0,0). Most terminals set\
    \ the\n    erased characters to either NUL or space characters.\n    IAC SB DET\
    \ ERASE LINE IAC SE                     subcommand code: 30\n    This subcommand\
    \ causes all characters on the yth line to be removed\n    from the screen, where\
    \ y is the line of the current cursor position.\n    All fields regardless of\
    \ their attributes are deleted. The cursor\n    position after this operation\
    \ will be (0,y). Note: This operation\n    can be easily simulated by the sequence:\
    \ LINE DELETE, LINE INSERT.\n    However, the order is important to insure that\
    \ no data is lost off\n    the bottom of the screen.\n    IAC SB DET ERASE FIELD\
    \ IAC SE                    subcommand code: 31\n    This subcommand causes all\
    \ characters in the field occupied by the\n    cursor to be removed. The cursor\
    \ position after the operation is at\n    the beginning of the field.\n    IAC\
    \ SB DET ERASE REST OF SCREEN IAC SE           subcommand code: 32\n    This subcommand\
    \ causes all characters from position (x,y) to\n    (M-1,N-1) to be removed from\
    \ the screen. All fields regardless of\n    their attributes are deleted. The\
    \ cursor position after the\n    operation is unchanged. This is equivalent to\
    \ doing an ERASE REST OF\n    LINE plus a LINE DELETE for lines greater than y.\n\
    \    IAC SB DET ERASE REST OF LINE IAC SE             subcommand code: 33\n  \
    \  This subcommand causes all characters from position (x,y) to (M-1,y)\n    to\
    \ be removed from the screen All fields regardless of their\n    attributes are\
    \ deleted. The cursor position after the operation is\n    unchanged.\n    IAC\
    \ SB DET ERASE REST OF FIELD IAC SE            subcommand code: 34\n    This subcommand\
    \ causes all characters from position (x,y) to the end\n    of the current field\
    \ to be removed from the screen. The cursor\n    position after the operation\
    \ is unchanged.\n    IAC SB DET ERASE UNPROTECTED IAC SE              subcommand\
    \ code: 35\n    This subcommand causes all characters on the screen in unprotected\n\
    \    fields to be removed from the screen. The cursor position after the\n"
- title: John Day                                                       [page 11]
  contents:
  - "John Day                                                       [page 11]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    operation is at (0,0) or, if that position is\
    \ protected, at the\n    beginning of the first unprotected field.\n  Format Functions\n\
    \    IAC SB DET FORMAT DATA <format map><count> IAC SE\n    where <format map>\
    \ is a two byte field containing the following\n    flags:\n      Byte 0\n   \
    \     Blinking                                 7\n        Reverse Video      \
    \                      6\n        Right Justification                      5\n\
    \        Protection                              3-4\n        Intensity      \
    \                         0-2\n      Byte 1\n        Modified                \
    \                1\n        Pen Selectable                          0\n    where:\n\
    \    If the Blinking bit is set, the following field of <count>\n    characters\
    \ should have the Blinking attribute applied to it by the\n    receiver.\n   \
    \ If the Reverse Video bit is set, the following field of <count>\n    characters\
    \ should be displayed by the receiver with video reversed.\n    If the Right Justification\
    \ bit is set, the input entered into the\n    field of <count> characters should\
    \ be right justified.\n    The Protection field is two bits wide and may take\
    \ on the\n    following values:\n      0         no protection\n      1      \
    \   protected\n      2         alphabetic only\n      3         numeric only\n\
    \    The protection attribute specifies that the other side may modify\n    any\
    \ character (no protection), modify no characters (protected),\n    enter only\
    \ alphabetical characters (A-Z, and a-z) (alphabetic only),\n    or enter only\
    \ numerical characters (0-9,+,.,and -) (numeric only) in\n    the following field\
    \ of <count> bytes.\n"
- title: John Day                                                       [page 12]
  contents:
  - "John Day                                                       [page 12]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    The Intensity field is 3 bits wide and should\
    \ be interpreted in the\n    following way:\n      The values 0-6 should be used\
    \ as an indication of the relative\n      brightness to be used when displaying\
    \ the characters in or entered\n      into the following field <count> characters\
    \ wide. The number of\n      levels of brightness available should have been obtained\n\
    \      previously by the Format Facility subcommand. The exact algorithm\n   \
    \   for mapping these values to the available levels of intensity is\n      left\
    \ to the implementors. A value of 7 in the intensity field\n      indicates that\
    \ the brightness should be off, and any characters in\n      or entered into the\
    \ field should not be displayed.\n    If the Modified bit is set, the field is\
    \ considered to have been\n    modified and will be transmitted in response to\
    \ a TRANSMIT MODIFIED\n    subcommand.\n    If the Pen Selectable bit is set,\
    \ the field can be selected with the\n    light pen. Note: Use of the light pen\
    \ should be the subject of\n    another Telnet option.\n    <count> is 2 bytes\
    \ that should be interpreted as a positive 16-bit\n    binary integer representing\
    \ the number of characters following this\n    command which are affected by it.\n\
    \    Data sent to the terminal or the Using Host for unwritten areas of\n    the\
    \ screen not in the scope of the count should be displayed with\n    the default\
    \ values of the format map. The default values are No\n    Blinking, Normal Video,\
    \ No Justification, No Protection and Normal\n    Intensity. For example, suppose\
    \ a FORMAT DATA subcommand was sent to\n    the terminal with attributes Blinking\
    \ and Protected and a\n    count of 5 followed by the string \"Name: John Doe\"\
    . The string\n    \"Name:\" would be protected and blinking, but the string \"\
    John Doe\"\n    would not be.\n    This subcommand is used to format data to be\
    \ displayed on the screen\n    of the terminal. The <format map> describes the\
    \ attributes that the\n    field <count> bytes wide should have. This field is\
    \ to start at the\n    position of the cursor when the command is acted upon.\
    \ The next\n    <count> displayable characters in the data stream are used to\
    \ fill\n    the field. Subsequent REPEAT subcommands may be used to specify the\n\
    \    contents of this field. If the sender specifies attributes that have\n  \
    \  not been agreed upon by the use of the Format Facility subcommand,\n    the\
    \ Telnet process should send an Error Subcommand to the sender,\n    but format\
    \ the screen as if the bit had not been set.\n"
- title: John Day                                                       [page 13]
  contents:
  - "John Day                                                       [page 13]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    IAC SB DET REPEAT <count><char> IAC SE      \
    \     subcommand code: 37\n    where <count> is a positive 8-bit binary integer.\
    \ <char> is an 8-bit\n    byte containing an ASCII character.\n    This subcommand\
    \ is used to perform data compression on data being\n    transferred to the terminal\
    \ by encoding strings of identical\n    characters as the character and a count.\
    \ The repeated characters may\n    be part of a field specified\n    IAC SB DET\
    \ SUPPRESS PROTECTION <negotiation> IAC SE\n    where <negotiation> may have the\
    \ values of the Telnet option\n    negotiation:\n      251                 WILL\n\
    \      252                 WONT\n      253                 DO\n      254     \
    \            DONT\n    This subcommand is used to suppress the field protection\
    \ in a\n    non-destructive manner. Many data entry terminals provide the means\n\
    \    by which protection may be turned on and off without modifying the\n    contents\
    \ of the screen or the terminal's memory. Thus, the\n    protection may be turned\
    \ off and back on without retransmitting the\n    form.\n    The default setting\
    \ of the option is that protection is on, in other\n    words\n      IAC SB DET\
    \ SUPPRESS PROTECTION WONT IAC SE\n      IAC SB DET SUPPRESS PROTECTION DONT IAC\
    \ SE\n    Negotiation of this subcommand follows the same rules as\n    negotiations\
    \ of the Telnet options.\n    IAC SB DET FIELD SEPARATOR IAC SE              \
    \  subcommand code: 39\n    It is necessary when transmitting only the unprotected\
    \ portion of\n    the screen to provide a means for delimiting the fields. Existing\n\
    \    DET's use a variety of ASCII characters such as Tab, Group\n    Separator,\
    \ Unit Separator, etc. In order to maintain transparency of\n    the NVDET this\
    \ subcommand is used to separate the fields. Clearly,\n    this incurs rather\
    \ high overhead. This overhead can be avoided by\n    using the Byte Macro Option\
    \ (see Appendix 3).\n"
- title: John Day                                                       [page 14]
  contents:
  - "John Day                                                       [page 14]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n  Miscellaneous Commands\n    IAC SB DET FN <code>\
    \ IAC SE                      subcommand code: 40\n    where: <code> is one byte.\n\
    \    Many data-entry terminals provide a set of \"function\" keys which\n    when\
    \ pressed send a one-character command to the server. This\n    subcommand describes\
    \ such a facility. The values of the <code> field\n    are defined by the user\
    \ and server. The option merely provides the\n    means to transfer the information.\n\
    \    IAC SB DET ERROR <cmd> <error code> IAC SE       subcommand code: 41\n  \
    \  where:\n      <cmd> is a byte containing the subcommand code of the subcommand\n\
    \      in error.\n      <error code> is a byte containing an error code.\n   \
    \   (For a list of the defined error codes see Appendix 2.)\n    This subcommand\
    \ is provided to allow DET option implementations to\n    report errors they detect\
    \ to the corresponding Telnet process. At\n    this point it is worth reiterating\
    \ that the philosophy of this\n    option is that when an error is detected it\
    \ should be reported;\n    however, the implementation should attempt its best\
    \ effort to carry\n    out the intent of the subcommand or data in error.\n"
- title: John Day                                                       [page 15]
  contents:
  - "John Day                                                       [page 15]\f"
- title: Data Entry Terminal Option
  contents:
  - 'Data Entry Terminal Option

    '
- title: 3. Default and Minimal Implementation Specifications
  contents:
  - "3. Default and Minimal Implementation Specifications\n  Default\n    WON'T DET\
    \ -- DON'T DET\n    Neither host wishes to use the Data Entry Terminal option.\n\
    \  Minimal Implementation\n    DET EDIT FACILITIES\n    DET ERASE FACILITIES\n\
    \    DET TRANSMIT FACILITIES\n    DET FORMAT FACILITIES\n    DET MOVE CURSOR <x><y>\n\
    \    DET HOME\n    DET ERASE SCREEN\n    DET TRANSMIT SCREEN\n    DET FORMAT DATA\n\
    \    DET ERROR <cmd> <error code>\n    In the case of formatting the data, the\
    \ minimal implementation\n    should be able to support a low and high level of\
    \ intensity and\n    protection for all or no characters in a field. These functions,\n\
    \    however, are not required.\n    The minimal implementation also requires\
    \ that the Output Line Width\n    and Output Page Size Telnet options be supported.\n"
- title: John Day                                                       [page 16]
  contents:
  - "John Day                                                       [page 16]\f"
- title: Data Entry Terminal Option
  contents:
  - 'Data Entry Terminal Option

    '
- title: 4. Motivation
  contents:
  - "4. Motivation\n  The Telnet protocol was originally designed to provide a means\
    \ for\n  scroll-mode terminals, such as the standard teletype, to communicate\n\
    \  with processes through the network. This was suitable for the vast\n  majority\
    \ of terminals and users at that time. However, as use of the\n  network has increased\
    \ into other areas, especially areas where the\n  network is considered to provide\
    \ a production environment for other\n  work, the desires and requirements of\
    \ the user community have changed.\n  Therefore, it is necessary to consider supporting\
    \ facilities that were\n  not initially supported. This Telnet option attempts\
    \ to do that for\n  applications that require data entry terminals.\n  This option\
    \ in effect defines the Network Virtual Data Entry Terminal.\n  Although the description\
    \ of this option is quite long, this does not\n  imply that the Telnet protocol\
    \ is a poor vehicle for this facility.\n  Data Entry Terminals are rather complex\
    \ and varied in their abilities.\n  This option attempts to support both the minimal\
    \ set of useful\n  functions that are either common to all or can be easily simulated\
    \ and\n  the more sophisticated functions supplied in some terminals.\n  Unlike\
    \ most real data entry terminals where the terminal functions are\n  encoded into\
    \ one or more characters of the native character set, this\n  option performs\
    \ all such controls within the Telnet subnegotiation\n  mechanism. This allows\
    \ programs that are intimately familiar with the\n  kind of terminal they are\
    \ communicating with to send commands that may\n  not be supported by either the\
    \ option or the implementation. In other\n  words, it is possible to operate in\
    \ a \"raw\" or at least \"rare\" mode\n  using as much of the option as necessary.\n\
    \  Although many data entry terminals support a variety of peripheral\n  devices\
    \ such as printers, cassettes, etc. it is beyond the scope of\n  this option to\
    \ entertain such considerations. A separate option should\n  be defined to handle\
    \ this aspect of these devices.\n"
- title: John Day                                                       [page 17]
  contents:
  - "John Day                                                       [page 17]\f"
- title: Data Entry Terminal Option
  contents:
  - 'Data Entry Terminal Option

    '
- title: 5. Description
  contents:
  - "5. Description\n  General Notes\n    All implementations of this option are required\
    \ to support a certain\n    minimal set of the subcommands for this option. Section\
    \ 3 contains a\n    complete list of the subcommands in this minimal set. In keeping\n\
    \    with the Telnet protocol philosophy that an implementation should\n    not\
    \ have to be able to parse commands it does not implement, every\n    subcommand\
    \ of this option is either in the minimal set or is covered\n    by one of the\
    \ facility subcommands. An implementation must\n    \"negotiate\" with its correspondent\
    \ for permission to use subcommands\n    not in the minimal set before using them.\
    \ For details of this\n    negotiation process see the section below on facility\
    \ subcommands.\n    Most data entry terminals are used in a half duplex mode.\
    \ (Although\n    most DET's on the market can be used either as data entry terminals\n\
    \    or as standard interactive terminals, we are only concerned here\n    with\
    \ their use as DET's.) When this option is used, it is suggested\n    that the\
    \ following Telnet options be refused: Echo, Remote\n    Controlled Transmission\
    \ and Echoing, and Suppress Go-Ahead. However,\n    this option could be used\
    \ to support a simple full duplex CRT based\n    application using the basic cursor\
    \ control functions provided here.\n    For these cases, one or more of the above\
    \ list of options might be\n    required. (Support of sophisticated interactive\
    \ calligraphic\n    applications is beyond the scope of this option and should\
    \ be done\n    by another option or the Network Graphics Protocol.)\n    In RFC\
    \ 728, it was noted that a synch sequence can cause undesired\n    interactions\
    \ between Telnet Control functions and the data stream. A\n    synch sequence\
    \ causes data but not control functions to be flushed.\n    If a control function\
    \ which has an effect on the data immediately\n    following it is present in\
    \ the data stream when a synch sequence\n    occurs, the control function will\
    \ have its effect not on the\n    intended data but on the data immediately following\
    \ the Data Mark.\n    The following DET subcommands are susceptible to this pitfall:\n\
    \      CHAR INSERT\n      DATA TRANSMIT\n      FORMAT DATA\n    The undesired\
    \ interactions are best avoided by the receiver\n    of the synch sequence deleting\
    \ these subcommands and all data\n    associated with them before continuing to\
    \ process the control\n    functions. This implies that the Data Mark should not\
    \ occur in the\n    middle of the data associated with these subcommands.\n"
- title: John Day                                                       [page 18]
  contents:
  - "John Day                                                       [page 18]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n  Facility Subcommands\n    These four subcommands\
    \ are used by the User and Server\n    implementations to negotiate the subcommands\
    \ and attributes of the\n    terminal that may be utilized. This negotiation can\
    \ be viewed as the\n    terminal (User Host) indicating what facilities are provided\
    \ and the\n    Server Host (or application program) indicating what facilities\
    \ are\n    desired.\n    When Sent: A Server Telnet implementation using the DET\
    \ option must\n    send a facility subcommand requesting the use of a particular\n\
    \    subcommand or terminal attribute not in the minimal implementation\n    before\
    \ the first use of that subcommand or attribute. The User\n    Telnet implementation\
    \ should respond as quickly as possible with its\n    reply. Neither the User\
    \ nor Server are required to negotiate one\n    subcommand at a time. Also, a\
    \ Telnet implementation responding to a\n    facility subcommand is not required\
    \ to give permission only for that\n    subcommand. It may send a format map indicating\
    \ all facilities of\n    that class which it supports. However, a Telnet implementation\n\
    \    requesting facilities must send a facility subcommand before its\n    first\
    \ use of the subcommand regardless of whether earlier\n    negotiations have indicated\
    \ the facility is provided. The facility\n    cannot be used until a corresponding\
    \ facility subcommand has been\n    received. There are no other constraints on\
    \ when the facility\n    subcommands may be sent. In particular, it is not necessary\
    \ for an\n    application to know at the beginning of a session all facilities\n\
    \    that it will use.\n    Action When Recieved: There are two possible actions\
    \ that may be\n    taken when a facility subcommand is received depending on whether\n\
    \    the receiver is a requestor or a provider (User).\n    Requestor: When a\
    \ facility subcommand is received by a requestor and\n    it is in the state of\
    \ Waiting for a Reply, it should go into the\n    state of Not Waiting. It should\
    \ then take the facility map it had\n    sent and form the logical intersection\
    \ with the facility map\n    received. (For the Intensity attribute, one should\
    \ take the minimum\n    of the number received and the number requested.) The\
    \ result\n    indicates the facilities successfully negotiated. Note: if\n   \
    \ the receiver is not in the Waiting for Reply state, then this is the\n    provider\
    \ case described next.\n    Provider: When a facility subcommand is received,\
    \ it should send a\n    facility subcommand with a facility map of the facilities\
    \ it\n    provides as soon as possible. It should then determine what new\n"
- title: John Day                                                       [page 19]
  contents:
  - "John Day                                                       [page 19]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    facilities it is providing for the Requestor\
    \ by forming the logical\n    intersection of the facility map received and the\
    \ one sent.\n    Note: Although in most cases the requestor will be the Server\
    \ Host\n    and the provider will be the User Host supporting the terminal, this\n\
    \    distinction may not always be true.\n  Transmit Subcommands\n    There are\
    \ two kinds of transmit subcommands: those used to request\n    that data be sent\
    \ to the requestor, and one to preface data sent to\n    the requestor. The first\
    \ kind allow the requestor to control when,\n    from where and to some degree\
    \ how much data is transmitted from the\n    terminal. Their explanation is straightforward\
    \ and may be found in\n    Section 2.\n    Data may be sent from the terminal\
    \ as a result of two events: the\n    user of the terminal caused the transmission\
    \ or in response to a\n    transmit subcommand. Some programs may wish to know\
    \ from where on\n    the screen the transmission began. (This is reasonable, since\
    \ the\n    terminal user may move the cursor around considerably before\n    transmitting.)\
    \ Other programs may not need such information. The\n    DATA TRANSMIT subcommand\
    \ is provided in case this function is\n    needed. When used this subcommand\
    \ prefaces data coming from the\n    terminal. The parameters <x> and <y> give\
    \ the screen coordinates of\n    the beginning of the transmission. <x> must be\
    \ less than or equal to\n    M-1 and <y> must be less than or equal to N-1. It\
    \ is assumed that\n    all data between this DATA TRANSMIT and the next one starts\
    \ at the\n    coordinates given by the first subcommand and continues filling\
    \ each\n    line thereafter according to the constraints of the screen and the\n\
    \    format effectors in the data. Thus an intelligent or sloppy\n    user-host\
    \ DET implementation (depending on your point of view) need\n    only include\
    \ a DATA TRANSMIT subcommand when the new starting point\n    is different from\
    \ the last ending point.\n"
- title: John Day                                                       [page 20]
  contents:
  - "John Day                                                       [page 20]\f"
- title: Data Entry Terminal Option
  contents:
  - 'Data Entry Terminal Option

    '
- title: 6.  Sample Interaction
  contents:
  - "6.  Sample Interaction\n  The nomenclature of RFC 726 will be used to describe\
    \ this example.  To\n  quote that RFC:\n    \"S:\"  is sent from serving host\
    \ to using host.\n    \"U:\"  is sent from using host to serving host.\n    \"\
    T:\"  is entered by the terminal user.\n    \"P:\"  is printed on the terminal.\n\
    \    Text surrounded by square brackets([]) is commentary. Text\n    surrounded\
    \ by angle brackets (<>) is to be taken as a single unit.\n    E.g, carriage return\
    \ is <cr>, and the decimal value 27 is\n    represented <27>.\n    We assume that\
    \ the user has established the Telnet connection,\n    logged on, and an application\
    \ program has just been started either\n    by the user directly or through a\
    \ canned start up  procedure. The\n    presentation on the page is meant to merely\
    \ group entities together\n    and does not imply the position of message boundaries.\
    \ One should\n    assume that any part of the dialogue may be sent as one or many\n\
    \    messages. The first action of the program  or Telnet is to negotiate\n  \
    \  the DET option:\n  S: <IAC><DO><DET>\n  U: <IAC><WILL><DET>\n  S:<IAC><DO><OUTPUT\
    \ PAGE SIZE>              [First negotiate the screen\n  U:<IAC><WILL><NAOP>\n\
    \  U:<IAC><SB><NAOP><DR><25><IAC><SE>\n  S:<IAC><SB><NAOP><DS><0><IAC><SE>\n \
    \ S:<IAC><DO><OUTPUT LINE WIDTH>\n"
- title: John Day                                                       [page 21]
  contents:
  - "John Day                                                       [page 21]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n  U:<IAC><SB><NAOL><DR><80><IAC><SE>         [Defines\
    \ the screen to be\n  S:<IAC><SB><NAOL><DS><0><IAC><SE>\n  S:<IAC><SB><DET><FORMAT\
    \ FACILITIES>\n  <Repeat><Protection, 3 Levels\n  Intensity><IAC><SE>        \
    \                [Now set the terminal\n  U:<IAC><SB><DET><FORMAT FACILITIES>\n\
    \  <Repeat, Blinking><Protection, 3\n  Levels Intensity><IAC><SE>\n  S:<IAC><SB><DET><ERASE\
    \ SCREEN><IAC><SE>    [Erase the screen and start\n    <IAC><SB><DET><FORMAT DATA>\n\
    \    <Protection=1, Intensity=1><0>\n    <5><IAC><SE>Name:\n    <IAC><SB><DET><MOVE\
    \ CURSOR><0><1><IAC><SE>\n    <IAC><SB><DET><FORMAT DATA>\n    <Protection=1,\
    \ Intensity=1><0>\n    <8><IAC><SE>Address:\n    <IAC><SB><MOVE CURSOR><0><4><IAC><SE>\n\
    \    <IAC><SB><DET><FORMAT DATA>\n    <Protection=1, Intensity=1><0>\n    <17><IAC><SE>Telephone\
    \ number:\n    <IAC><SB><DET><MOVE CURSOR><32><4><IAC><SE>\n    <IAC><SB><DET><FORMAT\
    \ DATA>\n    <Protection=1, Intensity=1><0>\n    <24><IAC><SE>Social Security\
    \ Number:\n    <IAC><SB><DET><FORMAT DATA>\n    <Protection=1, Intensity=7>\n\
    \    <0><11><IAC><SE>                         [Establish a field that\n"
- title: John Day                                                       [page 22]
  contents:
  - "John Day                                                       [page 22]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    <IAC><SB><DET><MOVE CURSOR><32><5><IAC><SE>\n\
    \    <IAC><SB><DET><FORMAT FACILITIES>\n    <Blinking><0><IAC><SE>           \
    \        [Get permission to use\n  U:<IAC><SB><DET><FORMAT FACILITIES>\n  <Repeat,\
    \ Blinking><Protection,\n  3 Levels Intensity><IAC><SE>\n  S:<IAC><SB><DET><FORMAT\
    \ DATA>\n  <Blinking=1, Protection=1,\n  Intensity=1><0><29><IAC><SE>\n    Your\
    \ SSN will not be printed.\n    <IAC><SB><DET><HOME><IAC><SE>\n    <IAC><GA>\n\
    \  The previous exchange has placed a form on the screen that looks like:\n  Name:\n\
    \  Address:\n  Telephone Number:                       Social Security Number:\n\
    \  where the quoted string is blinking.\n  The terminal user is now free to fill\
    \ in the form provided. He\n  positions the cursor at the beginning of the first\
    \ field (this usually\n  is done by hitting the tab key) and begins typing. We\
    \ do not show this\n  interaction since it does not generate any interaction with\
    \ the User\n  Telnet program or the network. After the terminal user has completed\n\
    \  filling in the form, he strikes the transmit key to send the\n  unprotected\
    \ part of the form, but first the User Telnet program\n  negotiates the Byte Macro\
    \ Option to condense the Field Separator\n  subcommand:\n  U:<IAC><DO><BM>   \
    \                         [Negotiate Byte Macro\n  S:<IAC><WILL><BM>         \
    \                 [Define decimal 166 to be\n"
- title: John Day                                                       [page 23]
  contents:
  - "John Day                                                       [page 23]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n  U:<IAC><SB><BM><DEFINE>\n  <166><6><IAC SB DET\
    \ FIELD\n  SEPARATOR IAC SE><IAC><SE>\n  S:<IAC><SB><BM><ACCEPT><166><IAC><SE>\
    \      [The server accepts the\n  U:<IAC><SB><DET><DATA TRANSMIT><0><6><IAC><SE>\n\
    \  John Doe <166> 1515 Elm St., Urbana, Il 61801\n  <166> 217-333-9999 <166> 123-45-6789\
    \ <166>\n  S:<IAC><SB><DET><ERASE SCREEN><IAC><SE>\n  Thank you.\n  And so on.\n"
- title: John Day                                                       [page 24]
  contents:
  - "John Day                                                       [page 24]\f"
- title: Data Entry Terminal Option
  contents:
  - 'Data Entry Terminal Option

    '
- title: Appendix 1 - Subcommands, opcodes and syntax
  contents:
  - "Appendix 1 - Subcommands, opcodes and syntax\n  1         EDIT FACILITIES   \
    \   <Facilty map>\n  2         ERASE FACILITIES     <Facility map>\n  3      \
    \   TRANSMIT FACILITIES  <Facility map>\n  4         FORMAT FACILITIES    <Facility\
    \ map 1> <Facility map 2>\n  5         MOVE CURSOR          <x> <y>\n  6     \
    \    SKIP TO LINE         <y>\n  7         SKIP TO CHAR         <x>\n  8     \
    \    UP\n  9         DOWN\n  10        LEFT\n  11        RIGHT\n  12        HOME\n\
    \  13        LINE INSERT\n  14        LINE DELETE\n  15        CHAR INSERT\n \
    \ 16        CHAR DELETE\n  17        READ CURSOR\n  18        CURSOR POSITION\
    \      <x><y>\n  19        REVERSE TAB\n  20        TRANSMIT SCREEN\n  21    \
    \    TRANSMIT UNPROTECTED\n  22        TRANSMIT LINE\n  23        TRANSMIT FIELD\n\
    \  24        TRANSMIT REST OF SCREEN\n  25        TRANSMIT REST OF LINE\n  26\
    \        TRANSMIT REST OF FIELD\n  27        TRANSMIT MODIFIED\n  28        DATA\
    \ TRANSMIT <x><y>\n  29        ERASE SCREEN\n  30        ERASE LINE\n  31    \
    \    ERASE FIELD\n  32        ERASE REST OF SCREEN\n  33        ERASE REST OF\
    \ LINE\n  34        ERASE REST OF FIELD\n  35        ERASE UNPROTECTED\n  36 \
    \       FORMAT DATA <format map>\n  37        REPEAT     <count><char>\n  38 \
    \       SUPPRESS PROTECTION <negotiation>\n  39        FIELD SEPARATOR\n  40 \
    \       FN <code>\n  41        ERROR  <cmd><error code>\n"
- title: John Day                                                       [page 25]
  contents:
  - "John Day                                                       [page 25]\f"
- title: Data Entry Terminal Option
  contents:
  - 'Data Entry Terminal Option

    '
- title: Appendix 2 - Error Codes
  contents:
  - "Appendix 2 - Error Codes\n  1         Facility not previously negotiated.\n \
    \ 2         Illegal subcommand code.\n  3         Cursor Address Out of Bounds.\n\
    \  4         Undefined FN value.\n  5         Can't negotiate acceptable line\
    \ width.\n  6         Can't negotiate acceptable page length.\n  7         Illegal\
    \ parameter in subcommand.\n  8         Syntax error in parsing subcommand.\n\
    \  9         Too many parameters in subcommand.\n  10        Too few parameters\
    \ in subcommand.\n  11        Undefined parameter value\n  12        Unsupported\
    \ combination of Format Attributes\n"
- title: John Day                                                       [page 26]
  contents:
  - "John Day                                                       [page 26]\f"
- title: Data Entry Terminal Option
  contents:
  - 'Data Entry Terminal Option

    '
- title: Appendix 3 - Use of the Byte Macro Option
  contents:
  - "Appendix 3 - Use of the Byte Macro Option\n  One of the major drawbacks of the\
    \ DET option is that because the\n  functions are encoded as Telnet option subnegotiations\
    \ a fairly high\n  overhead is incurred. A function like Character Insert which\
    \ is\n  encoded as a single byte in most terminals requires six bytes in the\n\
    \  DET option. Originally the only other solution that would have\n  accomplished\
    \ the same transparency that the use of subcommands\n  provides would have been\
    \ to define additional Telnet control\n  functions. However, since this would\
    \ entail modification of the Telnet\n  protocol itself, it was felt that this\
    \ was not a wise solution. Since\n  then the Telnet Byte Macro Option (RFC 729)\
    \ has been defined. This\n  option allows the user and server Telnets to map an\
    \ arbitrary\n  character string into a single byte which is then transferred over\
    \ the\n  net. Thus the Byte Macro Option provides the means for implementations\n\
    \  to avoid the overhead for heavily used subcommands. The rest of this\n  appendix\
    \ suggests how the Byte Macro Option should be applied to the\n  DET option.\n\
    \  In keeping with the specification of the Byte Macro Option, macro\n  bytes\
    \ will be chosen from the range 128 to 239. For the DET option, it\n  is suggested\
    \ that macro bytes be chosen by adding the subcommand code\n  to 128. In addition,\
    \ an unofficial DET subcommand might be defined\n  indicating that each side was\
    \ willing to support macro bytes for all\n  subcommands (but not necessarily support\
    \ all of the subcommands\n  themselves) according to this algorithm. This subcommand\
    \ would be:\n    IAC SB DET DET-MACRO <negotiation> IAC SE       subcommand code:\
    \ 254\n  where <negotiation> may have the values of the Telnet option\n  negotiation:\n\
    \    251     WILL\n    252     WONT\n    253     DO\n    254     DONT\n  This\
    \ subcommand is sent by a Telnet implementation to indicate its\n  willingness\
    \ to adopt byte macros for all of the DET subcommands\n  according to the following\
    \ algorithm:\n    The macro byte for subcommand i will be i+128 and will represent\
    \ the\n    following string for parameterless subcommands:\n    IAC SB DET <subcommand\
    \ code> IAC SE\n    and the following string for subcommands with parameters:\n"
- title: John Day                                                       [page 27]
  contents:
  - "John Day                                                       [page 27]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n    IAC SB DET <subcommand code>\n    The default\
    \ setting for this subcommand is that the macros are not\n    in effect, in other\
    \ words,\n      IAC SB DET DET-MACRO WONT IAC SE\n      IAC SB DET DET-MACRO DONT\
    \ IAC SE\n    Negotiation of this subcommand follows the same rules as\n    negotiations\
    \ of the Telnet options.\n"
- title: John Day                                                       [page 28]
  contents:
  - "John Day                                                       [page 28]\f"
- title: Data Entry Terminal Option
  contents:
  - 'Data Entry Terminal Option

    '
- title: References
  contents:
  - "References\n  1.   ADM-1 Interactive Display Terminal Operator's Handbook\n \
    \      Lear-Siegler, Inc. 7410-31.\n  2.   ADM-Interactive Display Terminal Operator's\
    \ Handbook\n       Lear-Siegler, Inc. EID, 1974.\n  3.   Burroughs TD 700/800\
    \ Reference Manual, Burroughs Corp., 1973\n  4.   Burroughs TD 820 Reference Manual,\
    \ Burroughs Corp. 1975.\n  5.   CC-40 Communications Station: General Information\
    \ Manual.\n       Computer Communication, Inc. Pub. No. MI-1100. 1974.\n  6. \
    \  Crocker, David. \"Telnet Byte Macro Option,\" RFC 729, 1977.\n  7.   Data Entry\
    \ Virtual Terminal Protocol for Euronet, DRAFT, 1977.\n  8.   Day, John. \"A Minor\
    \ Pitfall in the Telnet Protocol,\" RFC 728,\n       1977.\n  9.   Hazeltine 2000\
    \ Desk Top Display Operating Instructions. Hazeltine\n       IB-1866A, 1870.\n\
    \  10.  How to Use the Consul 980: A Terminal Operator's Guide and\n       Interface\
    \ Manual. Applied Digital Data Systems, Inc. 98-3000.\n  11.  How to Use the Consul\
    \ 520: A Terminal Operator's Guide and\n       Interface Manual. Applied Digital\
    \ Data Systems, Inc. 52-3000.\n  12.  Honeywell 7700 Series Visual Information\
    \ Projection (VIP)\n       Systems: Preliminary Edition. 1973.\n  13.  An Introduction\
    \ to the IBM 3270 Information Display System. IBM\n       GA27-2739-4. 1973.\n\
    \  14.  Naffah, N. \"Protocole Appareil Virtuel type Ecran\" Reseau\n       Cyclades.\
    \ TER 536. 1976.\n  15.  Postel, Jon and Crocker, David. \"Remote Controlled Transmission\n\
    \       and Echoing Telnet Option\", RFC 726 NIC 39237, Mar. 1977.\n  16.  Schicker,\
    \ Peter. \"Virtual Terminal Protocol (Proposal 2). INWG\n       Protocol Note\
    \ #32., 1976.\n"
- title: John Day                                                       [page 29]
  contents:
  - "John Day                                                       [page 29]\f"
- title: Data Entry Terminal Option
  contents:
  - "Data Entry Terminal Option\n  17.  UNISCOPE Display Terminal : Programmer Reference\
    \ . Sperry- Univac\n       UP-7807 Rev. 2, 1975.\n  18.  Universal Terminal System\
    \ 400: System Description. Sperry- Univac\n       UP-8357, 1976.\n  19.  Walden,\
    \ David C. \"Telnet Output Line Width Option.\" NIC # 20196,\n       1973, also\
    \ in ARPANET Protocol Handbook, 1976.\n  20.  Walden, David C. \"Telnet Output\
    \ Page Size\" NIC # 20197, 1973,\n       also in ARPANET Protocol Handbook, 1976.\n"
