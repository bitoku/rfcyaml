- contents:
  - '           GSS-API Authentication Method for SOCKS Version 5

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Table of Contents\n         1. Purpose ............................................
    1\n         2. Introduction ....................................... 1\n         3.
    GSS-API Security Context Establishment ............. 2\n         4. GSS-API Protection-level
    Options ................... 5\n         5. GSS-API Per-message Protection .....................
    7\n         6. GSS-API Security Context Termination ............... 8\n         7.
    References ......................................... 8\n         8. Acknowledgments
    .................................... 8\n         9. Security Considerations ............................
    8\n         10. Author's Address .................................. 9\n"
  title: Table of Contents
- contents:
  - "1. Purpose\n   The protocol specification for SOCKS Version 5 specifies a\n   generalized
    framework for the use of arbitrary authentication\n   protocols in the initial
    SOCKS connection setup.  This document\n   provides the specification for the
    SOCKS V5 GSS-API authentication\n   protocol, and defines a GSS-API-based encapsulation
    for provision of\n   integrity, authentication and optional confidentiality.\n"
  title: 1. Purpose
- contents:
  - "2. Introduction\n   GSS-API provides an abstract interface which provides security\n
    \  services for use in distributed applications, but isolates callers\n   from
    specific security mechanisms and implementations.\n   GSS-API peers achieve interoperability
    by establishing a common\n   security mechanism for security context establishment
    - either\n   through administrative action, or through negotiation.  GSS-API is\n
    \  specified in [RFC 1508], and [RFC 1509].  This specification is\n   intended
    for use with implementations of GSS-API, and the emerging\n   GSS-API V2 specification.\n
    \  The approach for use of GSS-API in SOCKS V5 is to authenticate the\n   client
    and server by successfully establishing a GSS-API security\n   context - such
    that the GSS-API encapsulates any negotiation protocol\n   for mechanism selection,
    and the agreement of security service\n   options.\n   The GSS-API enables the
    context initiator to know what security\n   services the target supports for the
    chosen mechanism.  The required\n   level of protection is then agreed by negotiation.\n
    \  The GSS-API per-message protection calls are subsequently used to\n   encapsulate
    any further TCP and UDP traffic between client and\n   server.\n"
  title: 2. Introduction
- contents:
  - '3. GSS-API Security Context Establishment

    '
  title: 3. GSS-API Security Context Establishment
- contents:
  - "3.1 Preparation\n   Prior to use of GSS-API primitives, the client and server
    should be\n   locally authenticated, and have established default GSS-API\n   credentials.\n
    \  The client should call gss_import_name to obtain an internal\n   representation
    of the server name.  For maximal portability the\n   default name_type GSS_C_NULL_OID
    should be used to specify the\n   default name space, and the input name_string
    should treated by the\n   client's code as an opaque name-space specific input.\n
    \  For example, when using Kerberos V5 naming, the imported name may be\n   of
    the form \"SERVICE:socks@socks_server_hostname\" where\n   \"socks_server_hostname\"
    is the fully qualified host name of the\n   server with all letters in lower case.
    Other mechanisms may, however,\n   have different name forms, so the client should
    not make assumptions\n   about the name syntax.\n"
  title: 3.1 Preparation
- contents:
  - "3.2 Client Context Establishment\n   The client should then call gss_init_sec_context,
    typically passing:\n         GSS_C_NO_CREDENTIAL into cred_handle to specify the
    default\n         credential (for initiator usage),\n         GSS_C_NULL_OID into
    mech_type to specify the default\n         mechanism,\n         GSS_C_NO_CONTEXT
    into context_handle to specify a NULL\n         context (initially), and,\n         the
    previously imported server name into target_name.\n   The client must also specify
    its requirements for replay protection,\n   delegation, and sequence protection
    via the gss_init_sec_context\n   req_flags parameter.  It is required by this
    specification that the\n   client always requests these service options (i.e.
    passes\n   GSS_C_MUTUAL_FLAG | GSS_C_REPLAY_FLAG | GSS_C_DELEG_FLAG |\n   GSS_C_SEQUENCE_FLAG
    into req_flags).\n   However, GSS_C_SEQUENCE_FLAG should only be passed in for
    TCP-based\n   clients, not for UDP-based clients.\n"
  title: 3.2 Client Context Establishment
- contents:
  - "3.3 Client Context Establishment Major Status codes\n   The gss_init_sec_context
    returned status code can take two different\n   success values:\n    - If gss_init_sec_context
    returns GSS_S_CONTINUE_NEEDED, then the\n      client should expect the server
    to issue a token in the\n      subsequent subnegotiation response.  The client
    must pass the\n      token to another call to gss_init_sec_context, and repeat
    this\n      procedure until \"continue\" operations are complete.\n    - If gss_init_sec_context
    returns GSS_S_COMPLETE, then the client\n      should respond to the server with
    any resulting output_token.\n      If there is no output_token, the client should
    proceed to send\n      the protected request details, including any required message\n
    \     protection subnegotiation as specified in sections 4 and 5\n      below.\n"
  title: 3.3 Client Context Establishment Major Status codes
- contents:
  - "3.4 Client initial token\n   The client's GSS-API implementation then typically
    responds with the\n   resulting output_token which the client sends in a message
    to the\n   server.\n    +------+------+------+.......................+\n    +
    ver  | mtyp | len  |       token           |\n    +------+------+------+.......................+\n
    \   + 0x01 | 0x01 | 0x02 | up to 2^16 - 1 octets |\n    +------+------+------+.......................+\n
    \   Where:\n    - \"ver\" is the protocol version number, here 1 to represent
    the\n      first version of the SOCKS/GSS-API protocol\n    - \"mtyp\" is the
    message type, here 1 to represent an\n      authentication message\n    - \"len\"
    is the length of the \"token\" field in octets\n    - \"token\" is the opaque
    authentication token emitted by GSS-API\n"
  title: 3.4 Client initial token
- contents:
  - "3.5 Client GSS-API Initialisation Failure\n   If, however, the client's GSS-API
    implementation failed during\n   gss_init_sec_context, the client must close its
    connection to the\n   server.\n"
  title: 3.5 Client GSS-API Initialisation Failure
- contents:
  - "3.6 Server Context Establishment\n   For the case where a client successfully
    sends a token emitted by\n   gss_init_sec_context() to the server, the server
    must pass the\n   client-supplied token to gss_accept_sec_context as input_token.\n
    \  When calling gss_accept_sec_context() for the first time, the\n   context_handle
    argument is initially set to GSS_C_NO_CONTEXT.\n   For portability, verifier_cred_handle
    is set to GSS_C_NO_CREDENTIAL\n   to specify default credentials (for acceptor
    usage).\n   If gss_accept_sec_context returns GSS_CONTINUE_NEEDED, the server\n
    \  should return the generated output_token to the client, and\n   subsequently
    pass the resulting client supplied token to another call\n   to gss_accept_sec_context.\n
    \  If gss_accept_sec_context returns GSS_S_COMPLETE, then, if an\n   output_token
    is returned, the server should return it to the client.\n   If no token is returned,
    a zero length token should be sent by the\n   server to signal to the client that
    it is ready to receive the\n   client's request.\n"
  title: 3.6 Server Context Establishment
- contents:
  - "3.7 Server Reply\n   In all continue/confirmation cases, the server uses the
    same message\n   type as for the client -> server interaction.\n    +------+------+------+.......................+\n
    \   + ver  | mtyp | len  |       token           |\n    +------+------+------+.......................+\n
    \   + 0x01 | 0x01 | 0x02 | up to 2^16 - 1 octets |\n    +------+------+------+.......................+\n"
  title: 3.7 Server Reply
- contents:
  - "3.8 Security Context Failure\n   If the server refuses the client's connection
    for any reason (GSS-API\n   authentication failure or otherwise), it will return:\n
    \   +------+------+\n    + ver  | mtyp |\n    +------+------+\n    + 0x01 | 0xff
    |\n    +------+------+\n    Where:\n    - \"ver\" is the protocol version number,
    here 1 to represent the\n      first version of the SOCKS/GSS-API protocol\n    -
    \"mtyp\" is the message type, here 0xff to represent an abort\n      message\n"
  title: 3.8 Security Context Failure
- contents:
  - '4. GSS-API Protection-level Options

    '
  title: 4. GSS-API Protection-level Options
- contents:
  - "4.1 Message protection\n   Establishment of a GSS-API security context enables
    comunicating\n   peers to determine which per-message protection services are\n
    \  available to them through the gss_init_sec_context() and\n   gss_accept_sec_context()
    ret_flags GSS_C_INTEG_FLAG and\n   GSS_C_CONF_FLAG which respectively indicate
    message integrity and\n   confidentiality services.\n   It is necessary to ensure
    that the message protection applied to the\n   traffic is appropriate to the sensitivity
    of the data, and the\n   severity of the threats.\n"
  title: 4.1 Message protection
- contents:
  - "4.2 Message Protection Subnegotiation\n   For TCP and UDP clients and servers,
    different levels of protection\n   are possible in the SOCKS V5 protocol, so an
    additional\n   subnegotiation stage is needed to agree the message protection
    level.\n   After successful completion of this subnegotiation, TCP and UDP\n   clients
    and servers use GSS-API encapsulation as defined in section\n   5.1.\n   After
    successful establishment of a GSS-API security context, the\n   client's GSS-API
    implementation sends its required security context\n   protection level to the
    server.  The server then returns the security\n   context protection level which
    it agrees to - which may or may not\n   take the the client's request into account.\n
    \  The security context protection level sent by client and server must\n   be
    one of the following values:\n         1 required per-message integrity\n         2
    required per-message integrity and confidentiality\n         3 selective per-message
    integrity or confidentiality based on\n           local client and server configurations\n
    \  It is anticipated that most implementations will agree on level 1 or\n   2
    due to the practical difficulties in applying selective controls to\n   messages
    passed through a socks library.\n"
  title: 4.2 Message Protection Subnegotiation
- contents:
  - "4.3 Message Protection Subnegotiation Message Format\n   The security context
    protection level is sent from client to server\n   and vice versa using the following
    protected message format:\n    +------+------+------+.......................+\n
    \   + ver  | mtyp | len  |   token               |\n    +------+------+------+.......................+\n
    \   + 0x01 | 0x02 | 0x02 | up to 2^16 - 1 octets |\n    +------+------+------+.......................+\n
    \   Where:\n    - \"ver\" is the protocol version number, here 1 to represent
    the\n      first version of the SOCKS/GSS-API protocol\n    - \"mtyp\" is the
    message type, here 2 to represent a protection\n      -level negotiation message\n
    \   - \"len\" is the length of the \"token\" field in octets\n    - \"token\"
    is the GSS-API encapsulated protection level\n"
  title: 4.3 Message Protection Subnegotiation Message Format
- contents:
  - "4.4 Message Protection Subnegotiation Message Generation\n   The token is produced
    by encapsulating an octet containing the\n   required protection level using gss_seal()/gss_wrap()
    with conf_req\n   set to FALSE.  The token is verified using gss_unseal()/\n   gss_unwrap().\n
    \  If the server's choice of protection level is unacceptable to the\n   client,
    then the client must close its connection to the server\n"
  title: 4.4 Message Protection Subnegotiation Message Generation
- contents:
  - "5. GSS-API Per-message Protection\n   For TCP and UDP clients and servers, the
    GSS-API functions for\n   encapsulation and de-encapsulation shall be used by
    implementations -\n   i.e. gss_seal()/gss_wrap(), and gss_unseal()/ gss_unwrap().\n
    \  The default value of quality of protection shall be specified, and\n   the
    use of conf_req_flag shall be as determined by the previous\n   subnegotiation
    step.  If protection level 1 is agreed then\n   conf_req_flag MUST always be FALSE;
    if protection level 2 is agreed\n   then conf_req_flag MUST always be TRUE; and
    if protection level 3 is\n   agreed then conf_req is determined on a per-message
    basis by client\n   and server using local configuration.\n   All encapsulated
    messages are prefixed by the following framing:\n    +------+------+------+.......................+\n
    \   + ver  | mtyp | len  |       token           |\n    +------+------+------+.......................+\n
    \   + 0x01 | 0x03 | 0x02 | up to 2^16 - 1 octets |\n    +------+------+------+.......................+\n
    \   Where:\n    - \"ver\" is the protocol version number, here 1 to represent
    the\n      first version of the SOCKS/GSS-API protocol\n    - \"mtyp\" is the
    message type, here 3 to represent encapulated user\n      data\n    - \"len\"
    is the length of the \"token\" field in octets\n    - \"token\" is the user data
    encapsulated by GSS-API\n"
  title: 5. GSS-API Per-message Protection
- contents:
  - "6. GSS-API Security Context Termination\n   The GSS-API context termination message
    (emitted by\n   gss_delete_sec_context) is not used by this protocol.\n   When
    the connection is closed, each peer invokes\n   gss_delete_sec_context() passing
    GSS_C_NO_BUFFER into the\n   output_token argument.\n"
  title: 6. GSS-API Security Context Termination
- contents:
  - "7. References\n    [RFC 1508] Linn, J., \"Generic Security Service API\",\n               September
    1993.\n    [RFC 1509] Wray, J., \"Generic Security Service API : C-bindings\",\n
    \              September 1993.\n    [SOCKS V5] Leech, M., Ganis, M., Lee, Y.,
    Kuris, R., Koblas, D.,\n               and L. Jones, \"SOCKS Protocol V5\", RFC
    1928, April\n               1996.\n"
  title: 7. References
- contents:
  - "8. Acknowledgment\n   This document builds from a previous memo produced by Marcus
    Leech\n   (BNR) - whose comments are gratefully acknowleged.  It also reflects\n
    \  input from the AFT WG, and comments arising from implementation\n   experience
    by Xavier Gosselin (IUT Lyons).\n"
  title: 8. Acknowledgment
- contents:
  - "9. Security Considerations\n   The security services provided through the GSS-API
    are entirely\n   dependent on the effectiveness of the underlying security mechanisms,\n
    \  and the correctness of the implementation of the underlying\n   algorithms
    and protocols.\n   The user of a GSS-API service must ensure that the quality
    of\n   protection provided by the mechanism implementation is consistent\n   with
    their security policy.\n   In addition, where negotiation is supported under the
    GSS-API,\n   constraints on acceptable mechanisms may be imposed to ensure\n   suitability
    for application to authenticated firewall traversal.\n"
  title: 9. Security Considerations
- contents:
  - "10. Author's Address\n   P. V. McMahon\n   ICL Enterprises\n   Kings House\n
    \  33 Kings Road\n   Reading, RG1 3PX\n   UK\n   EMail: p.v.mcmahon@rea0803.wins.icl.co.uk\n
    \  Phone: +44 1734 634882\n   Fax:   +44 1734 855106\n"
  title: 10. Author's Address
