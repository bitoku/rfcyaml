- contents:
  - "                   Use of the Prefer Header Field in\n           Web Distributed
    Authoring and Versioning (WebDAV)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines how the Prefer header field (RFC 7240) can
    be\n   used by a Web Distributed Authoring and Versioning (WebDAV) client to\n
    \  request that certain behaviors be employed by a server while\n   constructing
    a response to a request.  Furthermore, it defines the\n   new \"depth-noroot\"
    preference.\n   This document updates RFC 7240.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8144.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Notational Conventions .....................................3\n   2.
    Reducing WebDAV Response Verbosity with \"return=minimal\" ........3\n      2.1.
    Minimal PROPFIND and REPORT Responses ......................4\n      2.2. Minimal
    PROPPATCH Response .................................5\n      2.3. Minimal MKCALENDAR
    and MKCOL Responses .....................5\n   3. Reducing WebDAV Roundtrips with
    \"return=representation\" .........6\n      3.1. Successful State-Changing Requests
    .........................6\n      3.2. Unsuccessful Conditional State-Changing
    Requests ...........6\n   4. The \"depth-noroot\" Processing Preference ........................7\n
    \  5. Security Considerations .........................................7\n   6.
    IANA Considerations .............................................8\n      6.1.
    Preference Registration ....................................8\n      6.2. Method
    References ..........................................8\n      6.3. Status Code
    References .....................................9\n   7. References ......................................................9\n
    \     7.1. Normative References .......................................9\n      7.2.
    Informative References ....................................10\n   Appendix A.
    \ The Brief and Extended Depth Header Fields ...........12\n   Appendix B.  Examples
    .............................................12\n     B.1.  PROPFIND ..................................................12\n
    \    B.2.  REPORT ....................................................16\n     B.3.
    \ PROPPATCH .................................................21\n     B.4.  MKCOL
    .....................................................22\n     B.5.  POST ......................................................23\n
    \    B.6.  PUT .......................................................27\n   Acknowledgements
    ..................................................28\n   Author's Address ..................................................28\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   [RFC7240] defines the Prefer header field and the \"return=minimal\"\n
    \  preference, which indicate that a client wishes for the server to\n   return
    a minimal response to a successful request but states that\n   what constitutes
    an appropriate minimal response is left solely to\n   the discretion of the server.
    \ Section 2 of this specification\n   defines precisely what is expected of a
    server when constructing\n   minimal responses to successful WebDAV [RFC4918]
    requests.\n   [RFC7240] also defines the \"return=representation\" preference,
    which\n   indicates that a client wishes for the server to include an entity\n
    \  representing the current state of the resource in the response to a\n   successful
    request.  Section 3 of this specification makes\n   recommendations on when this
    preference should be used by clients and\n   extends its applicability to 412
    (Precondition Failed) [RFC7232]\n   responses.\n   Finally, Section 4 of this
    specification defines the \"depth-noroot\"\n   preference that can be used with
    HTTP methods that support the Depth\n   header field.\n"
  - contents:
    - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n   This document references XML element types in the \"DAV:\" [RFC4918],\n
      \  \"urn:ietf:params:xml:ns:caldav\" [RFC4791], and\n   \"urn:ietf:params:xml:ns:carddav\"
      [RFC6352] namespaces outside of the\n   context of an XML fragment.  When doing
      so, the strings \"DAV:\",\n   \"CALDAV:\", and \"CARDDAV:\" will be prepended
      to the XML element types,\n   respectively.\n"
    title: 1.1.  Notational Conventions
  title: 1.  Introduction
- contents:
  - "2.  Reducing WebDAV Response Verbosity with \"return=minimal\"\n   Some payload
    bodies in responses to WebDAV requests, such as 207\n   (Multi-Status) [RFC4918]
    responses, can be quite verbose or even\n   unnecessary at times.  This specification
    defines how the Prefer\n   header field, in conjunction with its \"return=minimal\"
    preference,\n   can be used by clients to reduce the verbosity of such responses
    by\n   requesting that the server omit those portions of the response that\n   can
    be inferred by their absence.\n"
  - contents:
    - "2.1.  Minimal PROPFIND and REPORT Responses\n   When a PROPFIND [RFC4918] request,
      or a REPORT [RFC3253] request\n   whose report type results in a 207 (Multi-Status)
      response, contains\n   a Prefer header field with a preference of \"return=minimal\",
      the\n   server SHOULD omit all DAV:propstat XML elements containing a\n   DAV:status
      XML element of value 404 (Not Found) [RFC7231] from the\n   207 (Multi-Status)
      response.  If the omission of such a DAV:propstat\n   element would result in
      a DAV:response XML element containing zero\n   DAV:propstat elements, the server
      MUST substitute one of the\n   following in its place:\n   o  a DAV:propstat
      element consisting of an empty DAV:prop element and\n      a DAV:status element
      of value 200 (OK) [RFC7231]\n   o  a DAV:status element of value 200 (OK)\n
      \  The following report types are candidates that could benefit from use\n   of
      the \"return=minimal\" preference.  NOTE: This list is not intended\n   to be
      normative or exhaustive.\n   o  DAV:expand-property [RFC3253]\n   o  DAV:acl-principal-prop-set
      [RFC3744]\n   o  DAV:principal-property-search [RFC3744]\n   o  DAV:sync-collection
      [RFC6578]\n   o  CALDAV:calendar-query [RFC4791]\n   o  CALDAV:calendar-multiget
      [RFC4791]\n   o  CARDDAV:addressbook-query [RFC6352]\n   o  CARDDAV:addressbook-multiget
      [RFC6352]\n   See Appendices B.1 and B.2 for examples.\n"
    title: 2.1.  Minimal PROPFIND and REPORT Responses
  - contents:
    - "2.2.  Minimal PROPPATCH Response\n   When a PROPPATCH [RFC4918] request contains
      a Prefer header field\n   with a preference of \"return=minimal\", and all instructions
      are\n   processed successfully, the server SHOULD return one of the following\n
      \  responses rather than a 207 (Multi-Status) response:\n   o  204 (No Content)
      [RFC7231]\n   o  200 (OK) [RFC7231] (preferably with a zero-length message body)\n
      \  See Appendix B.3 for examples.\n"
    title: 2.2.  Minimal PROPPATCH Response
  - contents:
    - "2.3.  Minimal MKCALENDAR and MKCOL Responses\n   Both the MKCALENDAR [RFC4791]
      and Extended MKCOL [RFC5689]\n   specifications indicate that a server MAY return
      a message body in\n   response to a successful request.  This specification
      explicitly\n   defines the intended behavior in the presence of the Prefer header\n
      \  field.\n   When a MKCALENDAR or an extended MKCOL request contains a Prefer\n
      \  header field with a preference of \"return=minimal\", and the\n   collection
      is created with all requested properties being set\n   successfully, the server
      SHOULD return a 201 (Created) [RFC7231]\n   response with an empty (zero-length)
      message body.\n   Note that the rationale for requiring that a minimal success
      response\n   have an empty body is twofold:\n   o  [RFC4791], Section 5.3.1
      states: \"If a response body for a\n      successful request is included, it
      MUST be a CALDAV:mkcalendar-\n      response XML element.\"\n   o  [RFC5689],
      Section 3 states: \"When an empty response body is\n      returned with a success
      request status code, the client can assume\n      that all properties were set.\"\n
      \  See Appendix B.4 for examples.\n"
    title: 2.3.  Minimal MKCALENDAR and MKCOL Responses
  title: 2.  Reducing WebDAV Response Verbosity with "return=minimal"
- contents:
  - "3.  Reducing WebDAV Roundtrips with \"return=representation\"\n   [RFC7240] describes
    the \"return=representation\" preference as being\n   intended to provide a means
    of optimizing communication between the\n   client and server by eliminating the
    need for a subsequent GET\n   request to retrieve the current representation of
    the resource\n   following a modification.  This preference is equally applicable
    to\n   situations where the server itself modifies a resource, and where a\n   resource
    has been modified by another client.\n"
  - contents:
    - "3.1.  Successful State-Changing Requests\n   The state-changing methods PUT
      [RFC7231], COPY/MOVE [RFC4918], PATCH\n   [RFC5789], and POST [RFC5995] can
      be used to create or update a\n   resource.  In some instances, such as with
      Calendaring Extensions to\n   WebDAV (CalDAV) Scheduling [RFC6638], the created
      or updated resource\n   representation may differ from the representation sent
      in the body of\n   the request or from that referenced by the effective request
      URI.  In\n   cases where the client, upon receiving a 2xx (Successful) [RFC7231]\n
      \  response to its state-changing request, would normally issue a\n   subsequent
      GET request to retrieve the current representation of the\n   resource, the
      client can instead include a Prefer header field with\n   the \"return=representation\"
      preference in the state-changing request.\n   When a state-changing request
      contains a Prefer header field with a\n   preference of \"return=representation\",
      and the resource is created or\n   updated successfully, the server SHOULD include
      an entity\n   representing the current state of the resource in the resulting
      201\n   (Created) or 200 (OK) [RFC7231] response.  In addition to coalescing\n
      \  the create/update and retrieve operations into a single roundtrip, by\n   returning
      the current representation of the resource in the response,\n   the client will
      know that any changes to the resource were produced\n   by the server rather
      than a concurrent client, thus providing a level\n   of atomicity to the operation.\n
      \  See Appendix B.5 for examples.\n"
    title: 3.1.  Successful State-Changing Requests
  - contents:
    - "3.2.  Unsuccessful Conditional State-Changing Requests\n   Frequently, clients
      using a state-changing method such as those\n   listed above will make them
      conditional by including either an\n   If-Match or an If-None-Match [RFC7232]
      header field in the request.\n   This is done to prevent the client from accidentally
      overwriting a\n   resource whose current state has been modified by another
      client\n   acting in parallel.  In cases where the client, upon receiving a
      412\n   (Precondition Failed) [RFC7232] response to its conditional state-\n
      \  changing request, would normally issue a subsequent GET request to\n   retrieve
      the current representation of the resource, the client can\n   instead include
      a Prefer header field with the\n   \"return=representation\" preference in the
      conditional state-changing\n   request.\n   When a conditional state-changing
      request contains a Prefer header\n   field with a preference of \"return=representation\",
      and the specified\n   condition evaluates to false, the server SHOULD include
      an entity\n   representing the current state of the resource in the resulting
      412\n   (Precondition Failed) [RFC7232] response.\n   See Appendix B.6 for examples.\n"
    title: 3.2.  Unsuccessful Conditional State-Changing Requests
  title: 3.  Reducing WebDAV Roundtrips with "return=representation"
- contents:
  - "4.  The \"depth-noroot\" Processing Preference\n   The \"depth-noroot\" preference
    indicates that the client wishes for\n   the server to exclude the target (root)
    resource from processing by\n   the HTTP method and only apply the HTTP method
    to the target\n   resource's subordinate resources.\n   This preference is only
    intended to be used with HTTP methods whose\n   definitions explicitly provide
    support for the Depth [RFC4918] header\n   field.  Furthermore, this preference
    only applies when the Depth\n   header field has a value of \"1\" or \"infinity\"
    (either implicitly or\n   explicitly).\n   The \"depth-noroot\" preference MAY
    be used in conjunction with the\n   \"return=minimal\" preference in a single
    request.\n   See Appendix B.1 for examples.\n"
  title: 4.  The "depth-noroot" Processing Preference
- contents:
  - "5.  Security Considerations\n   No new security considerations are introduced
    by use of the Prefer\n   header field with WebDAV requests, beyond those discussed
    in\n   [RFC7240] and those already inherent in those requests.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  IANA Considerations

    '
  - contents:
    - "6.1.  Preference Registration\n   The following preference has been added to
      the HTTP Preferences\n   Registry defined in Section 5.1 of [RFC7240].\n   Preference:
      \ depth-noroot\n   Description:  The \"depth-noroot\" preference indicates that
      the client\n      wishes for the server to exclude the target (root) resource
      from\n      processing by the HTTP method and only apply the HTTP method to\n
      \     the target resource's subordinate resources.\n   Reference:  RFC 8144,
      Section 4\n   Notes:  This preference is only intended to be used with HTTP
      methods\n      whose definitions explicitly provide support for the Depth\n
      \     [RFC4918] header field.  Furthermore, this preference only applies\n      when
      the Depth header field has a value of \"1\" or \"infinity\"\n      (either implicitly
      or explicitly).\n"
    title: 6.1.  Preference Registration
  - contents:
    - "6.2.  Method References\n   The following methods have had their references
      updated in the \"HTTP\n   Method Registry\" (http://www.iana.org/assignments/http-methods).\n
      \  +------------+------+------------+----------------------------------+\n   |
      Method     | Safe | Idempotent | References                       |\n   | Name
      \      |      |            |                                  |\n   +------------+------+------------+----------------------------------+\n
      \  | MKCALENDAR | no   | yes        | RFC 4791, Section 5.3.1; RFC     |\n   |
      \           |      |            | 8144, Section 2.3                |\n   | MKCOL
      \     | no   | yes        | RFC 4918, Section 9.3; RFC 5689, |\n   |            |
      \     |            | Section 3; RFC 8144, Section 2.3 |\n   | PROPFIND   | yes
      \ | yes        | RFC 4918, Section 9.1; RFC 8144, |\n   |            |      |
      \           | Section 2.1                      |\n   | PROPPATCH  | no   | yes
      \       | RFC 4918, Section 9.2; RFC 8144, |\n   |            |      |            |
      Section 2.2                      |\n   | REPORT     | yes  | yes        | RFC
      3253, Section 3.6; RFC 8144, |\n   |            |      |            | Section
      2.1                      |\n   +------------+------+------------+----------------------------------+\n"
    title: 6.2.  Method References
  - contents:
    - "6.3.  Status Code References\n   The following status code has had its references
      updated in the \"HTTP\n   Status Codes\" registry (http://www.iana.org/assignments/http-status-\n
      \  codes).\n   +-------+-------------------+---------------------------------------+\n
      \  | Value | Description       | References                            |\n   +-------+-------------------+---------------------------------------+\n
      \  | 412   | Precondition      | RFC 7232, Section 4.2; RFC 8144,      |\n   |
      \      | Failed            | Section 3.2                           |\n   +-------+-------------------+---------------------------------------+\n"
    title: 6.3.  Status Code References
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3253]  Clemm, G., Amsden, J., Ellison, T., Kaler, C., and J.\n              Whitehead,
      \"Versioning Extensions to WebDAV (Web\n              Distributed Authoring
      and Versioning)\", RFC 3253,\n              DOI 10.17487/RFC3253, March 2002,\n
      \             <http://www.rfc-editor.org/info/rfc3253>.\n   [RFC4791]  Daboo,
      C., Desruisseaux, B., and L. Dusseault,\n              \"Calendaring Extensions
      to WebDAV (CalDAV)\", RFC 4791,\n              DOI 10.17487/RFC4791, March 2007,\n
      \             <http://www.rfc-editor.org/info/rfc4791>.\n   [RFC4918]  Dusseault,
      L., Ed., \"HTTP Extensions for Web Distributed\n              Authoring and
      Versioning (WebDAV)\", RFC 4918,\n              DOI 10.17487/RFC4918, June 2007,\n
      \             <http://www.rfc-editor.org/info/rfc4918>.\n   [RFC5689]  Daboo,
      C., \"Extended MKCOL for Web Distributed Authoring\n              and Versioning
      (WebDAV)\", RFC 5689, DOI 10.17487/RFC5689,\n              September 2009, <http://www.rfc-editor.org/info/rfc5689>.\n
      \  [RFC5789]  Dusseault, L. and J. Snell, \"PATCH Method for HTTP\",\n              RFC
      5789, DOI 10.17487/RFC5789, March 2010,\n              <http://www.rfc-editor.org/info/rfc5789>.\n
      \  [RFC5995]  Reschke, J., \"Using POST to Add Members to Web Distributed\n
      \             Authoring and Versioning (WebDAV) Collections\", RFC 5995,\n              DOI
      10.17487/RFC5995, September 2010,\n              <http://www.rfc-editor.org/info/rfc5995>.\n
      \  [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI
      10.17487/RFC7231, June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n
      \  [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Conditional Requests\", RFC 7232,\n              DOI
      10.17487/RFC7232, June 2014,\n              <http://www.rfc-editor.org/info/rfc7232>.\n
      \  [RFC7240]  Snell, J., \"Prefer Header for HTTP\", RFC 7240,\n              DOI
      10.17487/RFC7240, June 2014,\n              <http://www.rfc-editor.org/info/rfc7240>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [MSDN.aa493854]\n              Microsoft Developer
      Network, \"PROPPATCH Method\", June\n              2006,\n              <http://msdn.microsoft.com/en-us/library/aa493854.aspx>.\n
      \  [MSDN.aa563501]\n              Microsoft Developer Network, \"Brief Header\",
      June 2006,\n              <http://msdn.microsoft.com/en-us/library/aa563501.aspx>.\n
      \  [MSDN.aa563950]\n              Microsoft Developer Network, \"Depth Header\",
      June 2006,\n              <http://msdn.microsoft.com/en-us/library/aa563950.aspx>.\n
      \  [MSDN.aa580336]\n              Microsoft Developer Network, \"PROPFIND Method\",
      June 2006,\n              <http://msdn.microsoft.com/en-us/library/aa580336.aspx>.\n
      \  [RFC3744]  Clemm, G., Reschke, J., Sedlar, E., and J. Whitehead, \"Web\n
      \             Distributed Authoring and Versioning (WebDAV) Access\n              Control
      Protocol\", RFC 3744, DOI 10.17487/RFC3744, May\n              2004, <http://www.rfc-editor.org/info/rfc3744>.\n
      \  [RFC6352]  Daboo, C., \"CardDAV: vCard Extensions to Web Distributed\n              Authoring
      and Versioning (WebDAV)\", RFC 6352,\n              DOI 10.17487/RFC6352, August
      2011,\n              <http://www.rfc-editor.org/info/rfc6352>.\n   [RFC6578]
      \ Daboo, C. and A. Quillaud, \"Collection Synchronization for\n              Web
      Distributed Authoring and Versioning (WebDAV)\",\n              RFC 6578, DOI
      10.17487/RFC6578, March 2012,\n              <http://www.rfc-editor.org/info/rfc6578>.\n
      \  [RFC6638]  Daboo, C. and B. Desruisseaux, \"Scheduling Extensions to\n              CalDAV\",
      RFC 6638, DOI 10.17487/RFC6638, June 2012,\n              <http://www.rfc-editor.org/info/rfc6638>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  The Brief and Extended Depth Header Fields\n   This document is
    based heavily on the Brief [MSDN.aa563501] and\n   extended Depth [MSDN.aa563950]
    header fields.  The behaviors\n   described in Sections 2.1 and 2.2 are identical
    to those provided by\n   the Brief header field when used with the PROPFIND [MSDN.aa580336]\n
    \  and PROPPATCH [MSDN.aa493854] methods, respectively.  The behavior\n   described
    in Section 4 is identical to that provided by the\n   \"1,noroot\" [MSDN.aa563950]
    and \"infinity,noroot\" [MSDN.aa563950]\n   Depth header field values.\n   Client
    and server implementations that already support the Brief\n   header field can
    add support for the \"return=minimal\" preference with\n   nominal effort.\n   If
    a server supporting the Prefer header field receives both the\n   Brief and Prefer
    header fields in a request, clients can expect the\n   server to ignore the Brief
    header field and only use the Prefer\n   header field preferences.\n"
  title: Appendix A.  The Brief and Extended Depth Header Fields
- contents:
  - 'Appendix B.  Examples

    '
  - contents:
    - 'B.1.  PROPFIND

      '
    - contents:
      - "B.1.1.  Typical PROPFIND Request/Response with Depth:1\n   This example tries
        to fetch one known and one unknown property from\n   child resources.\n   >>
        Request <<\n   PROPFIND /container/ HTTP/1.1\n   Host: webdav.example.com\n
        \  Content-Type: application/xml; charset=utf-8\n   Content-Length: 189\n
        \  Depth: 1\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <D:propfind
        xmlns:D=\"DAV:\" xmlns:X=\"http://ns.example.com/foobar/\">\n     <D:prop>\n
        \      <D:resourcetype/>\n       <X:foobar/>\n     </D:prop>\n   </D:propfind>\n
        \  >> Response <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type: application/xml;
        charset=utf-8\n   Content-Length: 1722\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n
        \  <D:multistatus xmlns:D=\"DAV:\"\n                  xmlns:X=\"http://ns.example.com/foobar/\">\n
        \    <D:response>\n       <D:href>/container/</D:href>\n       <D:propstat>\n
        \        <D:prop>\n           <D:resourcetype>\n             <D:collection/>\n
        \          </D:resourcetype>\n         </D:prop>\n         <D:status>HTTP/1.1
        200 OK</D:status>\n       </D:propstat>\n       <D:propstat>\n         <D:prop>\n
        \          <X:foobar/>\n         </D:prop>\n         <D:status>HTTP/1.1 404
        Not Found</D:status>\n       </D:propstat>\n     </D:response>\n     <D:response>\n
        \      <D:href>/container/work/</D:href>\n       <D:propstat>\n         <D:prop>\n
        \          <D:resourcetype>\n             <D:collection/>\n           </D:resourcetype>\n
        \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
        \      <D:propstat>\n         <D:prop>\n           <X:foobar/>\n         </D:prop>\n
        \        <D:status>HTTP/1.1 404 Not Found</D:status>\n       </D:propstat>\n
        \    </D:response>\n     <D:response>\n       <D:href>/container/home/</D:href>\n
        \      <D:propstat>\n         <D:prop>\n           <D:resourcetype>\n             <D:collection/>\n
        \          </D:resourcetype>\n         </D:prop>\n         <D:status>HTTP/1.1
        200 OK</D:status>\n       </D:propstat>\n       <D:propstat>\n         <D:prop>\n
        \          <X:foobar/>\n         </D:prop>\n         <D:status>HTTP/1.1 404
        Not Found</D:status>\n       </D:propstat>\n     </D:response>\n     <D:response>\n
        \      <D:href>/container/foo.txt</D:href>\n       <D:propstat>\n         <D:prop>\n
        \          <D:resourcetype/>\n         </D:prop>\n         <D:status>HTTP/1.1
        200 OK</D:status>\n       </D:propstat>\n       <D:propstat>\n         <D:prop>\n
        \          <X:foobar/>\n         </D:prop>\n         <D:status>HTTP/1.1 404
        Not Found</D:status>\n       </D:propstat>\n     </D:response>\n   </D:multistatus>\n"
      title: B.1.1.  Typical PROPFIND Request/Response with Depth:1
    - contents:
      - "B.1.2.  Minimal PROPFIND Request/Response with Depth:1\n   This example tries
        to fetch one known and one unknown property from\n   child resources only.\n
        \  >> Request <<\n   PROPFIND /container/ HTTP/1.1\n   Host: webdav.example.com\n
        \  Content-Type: application/xml; charset=utf-8\n   Content-Length: 189\n
        \  Depth: 1\n   Prefer: return=minimal, depth-noroot\n   <?xml version=\"1.0\"
        encoding=\"UTF-8\"?>\n   <D:propfind xmlns:D=\"DAV:\" xmlns:X=\"http://ns.example.com/foobar/\">\n
        \    <D:prop>\n       <D:resourcetype/>\n       <X:foobar/>\n     </D:prop>\n
        \  </D:propfind>\n   >> Response <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type:
        application/xml; charset=utf-8\n   Content-Length: 837\n   Preference-Applied:
        return=minimal, depth-noroot\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n
        \  <D:multistatus xmlns:D=\"DAV:\">\n     <D:response>\n       <D:href>/container/work/</D:href>\n
        \      <D:propstat>\n         <D:prop>\n           <D:resourcetype>\n             <D:collection/>\n
        \          </D:resourcetype>\n         </D:prop>\n         <D:status>HTTP/1.1
        200 OK</D:status>\n       </D:propstat>\n     </D:response>\n     <D:response>\n
        \      <D:href>/container/home/</D:href>\n       <D:propstat>\n         <D:prop>\n
        \          <D:resourcetype>\n             <D:collection/>\n           </D:resourcetype>\n
        \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
        \    </D:response>\n     <D:response>\n       <D:href>/container/foo.txt</D:href>\n
        \      <D:propstat>\n         <D:prop>\n           <D:resourcetype/>\n         </D:prop>\n
        \        <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n     </D:response>\n
        \  </D:multistatus>\n"
      title: B.1.2.  Minimal PROPFIND Request/Response with Depth:1
    - contents:
      - "B.1.3.  Minimal PROPFIND Request/Response with an Empty DAV:propstat\n        Element\n
        \  This example tries to fetch an unknown property from a collection.\n   >>
        Request <<\n   PROPFIND /container/ HTTP/1.1\n   Host: webdav.example.com\n
        \  Content-Type: application/xml; charset=utf-8\n   Content-Length: 166\n
        \  Prefer: return=minimal\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
        \  <D:propfind xmlns:D=\"DAV:\" xmlns:X=\"http://ns.example.com/foobar/\">\n
        \    <D:prop>\n       <X:foobar/>\n     </D:prop>\n   </D:propfind>\n   >>
        Response <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type: application/xml;
        charset=utf-8\n   Content-Length: 255\n   Preference-Applied: return=minimal\n
        \  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <D:multistatus xmlns:D=\"DAV:\">\n
        \    <D:response>\n       <D:href>/container/</D:href>\n       <D:propstat>\n
        \        <D:prop/>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
        \    </D:response>\n   </D:multistatus>\n"
      title: B.1.3.  Minimal PROPFIND Request/Response with an Empty DAV:propstat
    title: B.1.  PROPFIND
  - contents:
    - 'B.2.  REPORT

      '
    - contents:
      - "B.2.1.  Typical REPORT Request/Response\n   This example tries to fetch an
        unknown property from several\n   resources via the DAV:expand-property [RFC3253]
        REPORT type.\n   >> Request <<\n   REPORT /dav/principals/ HTTP/1.1\n   Host:
        webdav.example.com\n   Content-type: text/xml; charset=utf-8\n   Content-length:
        847\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <D:expand-property
        xmlns:D=\"DAV:\">\n     <D:property name=\"current-user-principal\">\n       <D:property
        name=\"resourcetype\"/>\n       <D:property name=\"displayname\"/>\n       <D:property
        name=\"foobar\"\n                   namespace=\"http://ns.example.com/foobar\"/>\n
        \      <D:property name=\"calendar-home-set\"\n                   namespace=\"urn:ietf:params:xml:ns:caldav\">\n
        \        <D:property name=\"resourcetype\"/>\n         <D:property name=\"foobar\"\n
        \                    namespace=\"http://ns.example.com/foobar\"/>\n       </D:property>\n
        \      <D:property name=\"addressbook-home-set\"\n                   namespace=\"urn:ietf:params:xml:ns:carddav\">\n
        \        <D:property name=\"resourcetype\"/>\n         <D:property name=\"foobar\"\n
        \                    namespace=\"http://ns.example.com/foobar\"/>\n       </D:property>\n
        \    </D:property>\n   </D:expand-property>\n   >> Response <<\n   HTTP/1.1
        207 Multi-Status\n   Content-Type: application/xml; charset=utf-8\n   Content-Length:
        2664\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <D:multistatus xmlns:D=\"DAV:\"\n
        \                 xmlns:C=\"urn:ietf:params:xml:ns:caldav\"\n                  xmlns:R=\"urn:ietf:params:xml:ns:carddav\"\n
        \                 xmlns:X=\"http://ns.example.com/foobar\">\n     <D:response>\n
        \      <D:href>/dav/principals/</D:href>\n       <D:propstat>\n         <D:prop>\n
        \          <D:current-user-principal>\n             <D:response>\n               <D:href>/dav/principals/user/ken/</D:href>\n
        \              <D:propstat>\n                 <D:prop>\n                   <D:resourcetype>\n
        \                    <D:principal/>\n                   </D:resourcetype>\n
        \                  <D:displayname>ken</D:displayname>\n                   <C:calendar-home-set>\n
        \                    <D:response>\n                       <D:href>/dav/calendars/user/ken/</D:href>\n
        \                      <D:propstat>\n                         <D:prop>\n                           <D:resourcetype>\n
        \                            <D:collection/>\n                           </D:resourcetype>\n
        \                        </D:prop>\n                         <D:status>HTTP/1.1
        200 OK</D:status>\n                       </D:propstat>\n                       <D:propstat>\n
        \                        <D:prop>\n                           <X:foobar/>\n
        \                        </D:prop>\n                         <D:status>HTTP/1.1
        404 Not Found</D:status>\n                       </D:propstat>\n                     </D:response>\n
        \                  </C:calendar-home-set>\n                   <R:addressbook-home-set>\n
        \                    <D:response>\n                       <D:href>/dav/addressbooks/user/ken/</D:href>\n
        \                      <D:propstat>\n                         <D:prop>\n                           <D:resourcetype>\n
        \                            <D:collection/>\n                           </D:resourcetype>\n
        \                        </D:prop>\n                         <D:status>HTTP/1.1
        200 OK</D:status>\n                       </D:propstat>\n                       <D:propstat>\n
        \                        <D:prop>\n                           <X:foobar/>\n
        \                        </D:prop>\n                         <D:status>HTTP/1.1
        404 Not Found</D:status>\n                       </D:propstat>\n                     </D:response>\n
        \                  </R:addressbook-home-set>\n                 </D:prop>\n
        \                <D:status>HTTP/1.1 200 OK</D:status>\n               </D:propstat>\n
        \              <D:propstat>\n                 <D:prop>\n                   <X:foobar/>\n
        \                </D:prop>\n                 <D:status>HTTP/1.1 404 Not Found</D:status>\n
        \              </D:propstat>\n             </D:response>\n           </D:current-user-principal>\n
        \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
        \    </D:response>\n   </D:multistatus>\n"
      title: B.2.1.  Typical REPORT Request/Response
    - contents:
      - "B.2.2.  Minimal REPORT Request/Response\n   This example tries to fetch an
        unknown property from several\n   resources via the DAV:expand-property [RFC3253]
        REPORT type.\n   >> Request <<\n   REPORT /dav/principals/ HTTP/1.1\n   Host:
        webdav.example.com\n   Content-Type: application/xml; charset=utf-8\n   Content-Length:
        847\n   Prefer: return=minimal\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n
        \  <D:expand-property xmlns:D=\"DAV:\">\n     <D:property name=\"current-user-principal\">\n
        \      <D:property name=\"resourcetype\"/>\n       <D:property name=\"displayname\"/>\n
        \      <D:property name=\"foobar\"\n                   namespace=\"http://ns.example.com/foobar\"/>\n
        \      <D:property name=\"calendar-home-set\"\n                   namespace=\"urn:ietf:params:xml:ns:caldav\">\n
        \        <D:property name=\"resourcetype\"/>\n         <D:property name=\"foobar\"\n
        \                    namespace=\"http://ns.example.com/foobar\"/>\n       </D:property>\n
        \      <D:property name=\"addressbook-home-set\"\n                   namespace=\"urn:ietf:params:xml:ns:carddav\">\n
        \        <D:property name=\"resourcetype\"/>\n         <D:property name=\"foobar\"\n
        \                    namespace=\"http://ns.example.com/foobar\"/>\n       </D:property>\n
        \    </D:property>\n   </D:expand-property>\n   >> Response <<\n   HTTP/1.1
        207 Multi-Status\n   Content-Type: application/xml; charset=utf-8\n   Content-Length:
        1998\n   Preference-Applied: return=minimal\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n
        \  <D:multistatus xmlns:D=\"DAV:\"\n                  xmlns:C=\"urn:ietf:params:xml:ns:caldav\"\n
        \                 xmlns:R=\"urn:ietf:params:xml:ns:carddav\"\n                  xmlns:X=\"http://ns.example.com/foobar\">\n
        \    <D:response>\n       <D:href>/dav/principals/</D:href>\n       <D:propstat>\n
        \        <D:prop>\n           <D:current-user-principal>\n             <D:response>\n
        \              <D:href>/dav/principals/user/ken/</D:href>\n               <D:propstat>\n
        \                <D:prop>\n                   <D:resourcetype>\n                     <D:principal/>\n
        \                  </D:resourcetype>\n                   <D:displayname>ken</D:displayname>\n
        \                  <C:calendar-home-set>\n                     <D:response>\n
        \                      <D:href>/dav/calendars/user/ken/</D:href>\n                       <D:propstat>\n
        \                        <D:prop>\n                           <D:resourcetype>\n
        \                            <D:collection/>\n                           </D:resourcetype>\n
        \                        </D:prop>\n                         <D:status>HTTP/1.1
        200 OK</D:status>\n                       </D:propstat>\n                     </D:response>\n
        \                  </C:calendar-home-set>\n                   <R:addressbook-home-set>\n
        \                    <D:response>\n                       <D:href>/dav/addressbooks/user/ken/</D:href>\n
        \                      <D:propstat>\n                         <D:prop>\n                           <D:resourcetype>\n
        \                            <D:collection/>\n                           </D:resourcetype>\n
        \                        </D:prop>\n                         <D:status>HTTP/1.1
        200 OK</D:status>\n                       </D:propstat>\n                     </D:response>\n
        \                  </R:addressbook-home-set>\n                 </D:prop>\n
        \                <D:status>HTTP/1.1 200 OK</D:status>\n               </D:propstat>\n
        \            </D:response>\n           </D:current-user-principal>\n         </D:prop>\n
        \        <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n     </D:response>\n
        \  </D:multistatus>\n"
      title: B.2.2.  Minimal REPORT Request/Response
    title: B.2.  REPORT
  - contents:
    - 'B.3.  PROPPATCH

      '
    - contents:
      - "B.3.1.  Typical PROPPATCH Request/Response\n   >> Request <<\n   PROPPATCH
        /container/ HTTP/1.1\n   Host: webdav.example.com\n   Content-Type: application/xml;
        charset=utf-8\n   Content-Length: 199\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n
        \  <D:propertyupdate xmlns:D=\"DAV:\">\n     <D:set>\n       <D:prop>\n         <D:displayname>My
        Container</D:displayname>\n       </D:prop>\n     </D:set>\n   </D:propertyupdate>\n
        \  >> Response <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type: application/xml;
        charset=utf-8\n   Content-Length: 297\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n
        \  <D:multistatus xmlns:D=\"DAV:\">\n     <D:response>\n       <D:href>/container/</D:href>\n
        \      <D:propstat>\n         <D:prop>\n           <D:displayname/>\n         </D:prop>\n
        \        <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n     </D:response>\n
        \  </D:multistatus>\n"
      title: B.3.1.  Typical PROPPATCH Request/Response
    - contents:
      - "B.3.2.  Minimal PROPPATCH Request/Response\n   >> Request <<\n   PROPPATCH
        /container/ HTTP/1.1\n   Host: webdav.example.com\n   Content-Type: application/xml;
        charset=utf-8\n   Content-Length: 199\n   Prefer: return=minimal\n   <?xml
        version=\"1.0\" encoding=\"utf-8\"?>\n   <D:propertyupdate xmlns:D=\"DAV:\">\n
        \    <D:set>\n       <D:prop>\n         <D:displayname>My Container</D:displayname>\n
        \      </D:prop>\n     </D:set>\n   </D:propertyupdate>\n   >> Response <<\n
        \  HTTP/1.1 200 OK\n   Content-Length: 0\n   Preference-Applied: return=minimal\n"
      title: B.3.2.  Minimal PROPPATCH Request/Response
    title: B.3.  PROPPATCH
  - contents:
    - 'B.4.  MKCOL

      '
    - contents:
      - "B.4.1.  Verbose MKCOL Request/Response\n   >> Request <<\n   MKCOL /container/
        HTTP/1.1\n   Host: webdav.example.com\n   Content-Type: application/xml; charset=utf-8\n
        \  Content-Length: 181\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <D:mkcol
        xmlns:D=\"DAV:\">\n     <D:set>\n       <D:prop>\n         <D:displayname>My
        Container</D:displayname>\n       </D:prop>\n     </D:set>\n   </D:mkcol>\n
        \  >> Response <<\n   HTTP/1.1 201 Created\n   Cache-Control: no-cache\n   Content-Type:
        application/xml; charset=utf-8\n   Content-Length: 224\n   <?xml version=\"1.0\"
        encoding=\"utf-8\"?>\n   <D:mkcol-response xmlns:D=\"DAV:\">\n     <D:propstat>\n
        \      <D:prop>\n         <D:displayname/>\n       </D:prop>\n       <D:status>HTTP/1.1
        200 OK</D:status>\n     </D:propstat>\n   </D:mkcol-response>\n"
      title: B.4.1.  Verbose MKCOL Request/Response
    - contents:
      - "B.4.2.  Minimal MKCOL Request/Response\n   >> Request <<\n   MKCOL /container/
        HTTP/1.1\n   Host: webdav.example.com\n   Content-Type: application/xml; charset=utf-8\n
        \  Content-Length: 181\n   Prefer: return=minimal\n   <?xml version=\"1.0\"
        encoding=\"utf-8\"?>\n   <D:mkcol xmlns:D=\"DAV:\">\n     <D:set>\n       <D:prop>\n
        \        <D:displayname>My Container</D:displayname>\n       </D:prop>\n     </D:set>\n
        \  </D:mkcol>\n   >> Response <<\n   HTTP/1.1 201 Created\n   Cache-Control:
        no-cache\n   Content-Length: 0\n   Preference-Applied: return=minimal\n"
      title: B.4.2.  Minimal MKCOL Request/Response
    title: B.4.  MKCOL
  - contents:
    - 'B.5.  POST

      '
    - contents:
      - "B.5.1.  Typical Resource Creation and Retrieval via POST + GET\n   Note that
        this request is not conditional because by using the POST\n   [RFC5995] method,
        the client lets the server choose the resource URI,\n   thereby guaranteeing
        that it will not modify an existing resource.\n   >> Request <<\n   POST /container/work;add-member/
        HTTP/1.1\n   Host: caldav.example.com\n   Content-Type: text/calendar; charset=utf-8\n
        \  Content-Length: 521\n   BEGIN:VCALENDAR\n   VERSION:2.0\n   PRODID:-//Example
        Corp.//CalDAV Client//EN\n   BEGIN:VEVENT\n   UID:CD87465FA\n   SEQUENCE:0\n
        \  DTSTAMP:20120602T185254Z\n   DTSTART:20120602T160000Z\n   DTEND:20120602T170000Z\n
        \  TRANSP:OPAQUE\n   SUMMARY:Lunch\n   ORGANIZER;CN=\"Ken Murchison\":mailto:murch@example.com\n
        \  ATTENDEE;CN=\"Ken Murchison\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n    mailto:murch@example.com\n
        \  ATTENDEE;CN=\"John Doe\";CUTYPE=INDIVIDUAL;PARTSTAT\n    =NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:jdoe@\n
        \   example.com\n   END:VEVENT\n   END:VCALENDAR\n   >> Response <<\n   HTTP/1.1
        201 Created\n   Location: /container/work/abc.ics\n   Content-Length: 0\n
        \  Note that the server did not include any validator header fields\n   (e.g.,
        ETag) in the response, signaling that the created\n   representation differs
        from the representation sent in the body of\n   the request.  The client has
        to send a separate GET request to\n   retrieve the current representation:\n
        \  >> Request <<\n   GET /container/work/abc.ics HTTP/1.1\n   Host: caldav.example.com\n
        \  >> Response <<\n   HTTP/1.1 200 OK\n   Content-Type: text/calendar; charset=utf-8\n
        \  Content-Length: 541\n   ETag: \"nahduyejc\"\n   Schedule-Tag: \"jfd84hgbcn\"\n
        \  BEGIN:VCALENDAR\n   VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Server//EN\n
        \  BEGIN:VEVENT\n   UID:CD87465FA\n   SEQUENCE:0\n   DTSTAMP:20120602T185300Z\n
        \  DTSTART:20120602T160000Z\n   DTEND:20120602T170000Z\n   TRANSP:OPAQUE\n
        \  SUMMARY:Lunch\n   ORGANIZER;CN=\"Ken Murchison\":mailto:murch@example.com\n
        \  ATTENDEE;CN=\"Ken Murchison\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n    mailto:murch@example.com\n
        \  ATTENDEE;CN=\"John Doe\";CUTYPE=INDIVIDUAL;PARTSTAT\n    =NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE;SCHEDULE-STATUS=\n
        \   1.2:mailto:jdoe@example.com\n   END:VEVENT\n   END:VCALENDAR\n"
      title: B.5.1.  Typical Resource Creation and Retrieval via POST + GET
    - contents:
      - "B.5.2.  Streamlined Resource Creation and Retrieval via POST\n   Note that
        this request is not conditional because by using the POST\n   [RFC5995] method,
        the client lets the server choose the resource URI,\n   thereby guaranteeing
        that it will not modify an existing resource.\n   >> Request <<\n   POST /container/work;add-member/
        HTTP/1.1\n   Host: caldav.example.com\n   Content-Type: text/calendar; charset=utf-8\n
        \  Content-Length: 521\n   Prefer: return=representation\n   BEGIN:VCALENDAR\n
        \  VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Client//EN\n   BEGIN:VEVENT\n
        \  UID:CD87465FA\n   SEQUENCE:0\n   DTSTAMP:20120602T185254Z\n   DTSTART:20120602T160000Z\n
        \  DTEND:20120602T170000Z\n   TRANSP:OPAQUE\n   SUMMARY:Lunch\n   ORGANIZER;CN=\"Ken
        Murchison\":mailto:murch@example.com\n   ATTENDEE;CN=\"Ken Murchison\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n
        \   mailto:murch@example.com\n   ATTENDEE;CN=\"John Doe\";CUTYPE=INDIVIDUAL;PARTSTAT\n
        \   =NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:jdoe@\n    example.com\n
        \  END:VEVENT\n   END:VCALENDAR\n   >> Response <<\n   HTTP/1.1 201 Created\n
        \  Location: /container/work/abc.ics\n   Content-Type: text/calendar; charset=utf-8\n
        \  Content-Length: 541\n   Content-Location: /container/work/abc.ics\n   ETag:
        \"nahduyejc\"\n   Schedule-Tag: \"jfd84hgbcn\"\n   Preference-Applied: return=representation\n
        \  BEGIN:VCALENDAR\n   VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Server//EN\n
        \  BEGIN:VEVENT\n   UID:CD87465FA\n   SEQUENCE:0\n   DTSTAMP:20120602T185300Z\n
        \  DTSTART:20120602T160000Z\n   DTEND:20120602T170000Z\n   TRANSP:OPAQUE\n
        \  SUMMARY:Lunch\n   ORGANIZER;CN=\"Ken Murchison\":mailto:murch@example.com\n
        \  ATTENDEE;CN=\"Ken Murchison\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n    mailto:murch@example.com\n
        \  ATTENDEE;CN=\"John Doe\";CUTYPE=INDIVIDUAL;PARTSTAT\n    =NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE;SCHEDULE-STATUS=\n
        \   1.2:mailto:jdoe@example.com\n   END:VEVENT\n   END:VCALENDAR\n"
      title: B.5.2.  Streamlined Resource Creation and Retrieval via POST
    title: B.5.  POST
  - contents:
    - 'B.6.  PUT

      '
    - contents:
      - "B.6.1.  Typical Conditional Resource Update Failure and Retrieval via\n        PUT
        + GET\n   >> Request <<\n   PUT /container/motd.txt HTTP/1.1\n   Host: dav.example.com\n
        \  Content-Type: text/plain\n   Content-Length: 69\n   If-Match: \"asd973\"\n
        \  Either write something worth reading or do something worth writing.\n   >>
        Response <<\n   HTTP/1.1 412 Precondition Failed\n   Content-Length: 0\n   The
        resource has been modified by another user agent (ETag mismatch);\n   therefore,
        the client has to send a separate GET request to retrieve\n   the current
        representation:\n   >> Request <<\n   GET /container/motd.txt HTTP/1.1\n   Host:
        dav.example.com\n   >> Response <<\n   HTTP/1.1 200 OK\n   Content-Type: text/plain\n
        \  Content-Length: 52\n   ETag: \"789sdas\"\n   An investment in knowledge
        pays the best interest.\n"
      title: B.6.1.  Typical Conditional Resource Update Failure and Retrieval via
    - contents:
      - "B.6.2.  Streamlined Conditional Resource Update Failure and Retrieval\n        via
        PUT\n   >> Request <<\n   PUT /container/motd.txt HTTP/1.1\n   Host: dav.example.com\n
        \  Content-Type: text/plain\n   Content-Length: 69\n   If-Match: \"asd973\"\n
        \  Prefer: return=representation\n   Either write something worth reading
        or do something worth writing.\n   >> Response <<\n   HTTP/1.1 412 Precondition
        Failed\n   Content-Type: text/plain\n   Content-Length: 52\n   Content-Location:
        /container/motd.txt\n   ETag: \"789sdas\"\n   Preference-Applied: return=representation\n
        \  An investment in knowledge pays the best interest.\n"
      title: B.6.2.  Streamlined Conditional Resource Update Failure and Retrieval
    title: B.6.  PUT
  title: Appendix B.  Examples
- contents:
  - "Acknowledgements\n   The author would like to thank the following individuals
    for\n   contributing their ideas and support for writing this specification:\n
    \  Cyrus Daboo, Helge Hess, Andrew McMillan, Arnaud Quillaud, and Julian\n   Reschke.\n
    \  The author would also like to thank the Calendaring and Scheduling\n   Consortium
    for advice with this specification and for organizing\n   interoperability testing
    events to help refine it.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Kenneth Murchison\n   Carnegie Mellon University\n   5000
    Forbes Avenue\n   Pittsburgh, PA  15213\n   United States of America\n   Phone:
    +1-412-268-1982\n   Email: murch@andrew.cmu.edu\n"
  title: Author's Address
