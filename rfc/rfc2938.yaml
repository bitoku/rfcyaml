- title: __initial_text__
  contents:
  - '                  Identifying Composite Media Features

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   In RFC 2533, an expression format is presented for describing media\n\
    \   feature capabilities as a combination of simple media feature tags.\n   This\
    \ document describes an abbreviated format for a composite media\n   feature set,\
    \ based upon a hash of the feature expression describing\n   that composite.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.    Introduction ................................................2\n\
    \   1.1   Organization of this document ...............................2\n   1.2\
    \   Terminology and document conventions ........................2\n   2.    Motivation\
    \ and goals ........................................3\n   3.    Composite feature\
    \ representation ............................4\n   3.1   Feature set hashed reference\
    \ format .........................5\n   3.1.1 Hash value calculation ......................................6\n\
    \   3.1.2 Base-32 value representation ................................7\n   3.2\
    \   Resolving feature set identifiers ...........................8\n   3.2.1 Query\
    \ protocol ..............................................8\n   3.2.2 Inline feature\
    \ set details ..................................9\n   4.    Examples ...................................................10\n\
    \   5.    Internationalization Considerations ........................12\n   6.\
    \    Security Considerations ....................................13\n   7.   \
    \ Acknowledgements ...........................................13\n   8.    References\
    \ .................................................13\n   9.    Authors' Addresses\
    \ .........................................15\n   10.   Appendix A: The birthday\
    \ paradox ...........................16\n   11.   Full Copyright Statement ...................................18\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   In \"A Syntax for Describing Media Feature Sets\" [1], an\
    \ expression\n   format is presented for describing media feature capabilities\
    \ as a\n   combination of simple media feature tags [2].\n   This document proposes\
    \ an abbreviated format for a composite media\n   feature set, based upon a hash\
    \ of the feature expression describing\n   that composite.\n   This memo extends\
    \ and builds upon the expression syntax described in\n   RFC 2533 [1], and it\
    \ is assumed that the reader is familiar with the\n   interpretation of feature\
    \ set expressions described there.\n"
- title: 1.1 Organization of this document
  contents:
  - "1.1 Organization of this document\n   Section 2 sets out some of the background\
    \ and goals for feature set\n   references.\n   Section 3 presents a syntax for\
    \ feature set references, and describes\n   how they are related to feature set\
    \ expressions.\n"
- title: 1.2 Terminology and document conventions
  contents:
  - "1.2 Terminology and document conventions\n   This section defines a number of\
    \ terms and other document\n   conventions, which are used with specific meaning\
    \ in this memo.  The\n   terms are listed in alphabetical order.\n   dereference\n\
    \            the act of replacing a feature set reference with its\n         \
    \   corresponding feature set expression.  Also called\n            \"resolution\"\
    .\n   feature set\n            some set of media features described by a media\
    \ feature\n            assertion, as described in \"A Syntax for Describing Media\n\
    \            Feature Sets\" [1].  (See that memo for a more formal\n         \
    \   definition of this term.)\n   feature set expression\n            a string\
    \ that describes some feature set, formulated\n            according to the rules\
    \ in \"A Syntax for Describing Media\n            feature sets\" [1] (and possibly\
    \ extended by other\n            specifications).\n   feature set reference\n\
    \            a brief construct that references some feature set.  (See\n     \
    \       also: \"dereference\".)\n   feature set tag\n            a name that conforms\
    \ to the syntax of a feature tag [2] that\n            is used to denote a feature\
    \ set rather than a single\n            feature.\n   resolution\n            (See\
    \ \"dereference\").\n   This specification uses syntax notation and conventions\
    \ described\n   in RFC 2234, \"Augmented BNF for Syntax Specifications: ABNF\"\
    \ [3].\n       NOTE: Comments like this provide additional nonessential\n    \
    \   information about the rationale behind this document.  Such\n       information\
    \ is not needed for building a conformant\n       implementation, but may help\
    \ those who wish to understand the\n       design in greater depth.\n"
- title: 2. Motivation and goals
  contents:
  - "2. Motivation and goals\n   The range of media feature capabilities of a message\
    \ handling system\n   can be quite extensive, and the corresponding feature set\
    \ expression\n   [1] can reach a significant size.\n   A requirement has been\
    \ identified to allow recurring feature sets to\n   be identified by a single\
    \ reference value, which can be combined with\n   other elements in a feature\
    \ set expression.  It is anticipated that\n   mechanisms will be provided that\
    \ allow the recipient of such a\n   feature set reference to discover the corresponding\
    \ feature set\n   expression, but any such mechanism is beyond the scope of this\n\
    \   specification.\n   Thus, the goals for this proposal are:\n   o  to provide\
    \ an abbreviated form for referencing an arbitrary\n      feature set expression.\n\
    \   o  the meaning of (i.e., the corresponding feature set expression) a\n   \
    \   feature set reference should be independent of any particular\n      mechanism\
    \ that may be used to dereference it.\n   o  to be able to verify whether a given\
    \ feature set expression\n      corresponds to some feature set reference without\
    \ having to\n      perform an explicit dereferencing operation (i.e., without\n\
    \      incurring additional network traffic).\n   o  for protocol processors that\
    \ conform to RFC 2533 [1] to be able to\n      sensibly handle a feature set reference\
    \ without explicit knowledge\n      of its meaning (i.e., the introduction of\
    \ feature set references\n      should not break existing feature expression processors).\
    \  That\n      is, the applicable interpretation and processing rules of RFC 2533\n\
    \      [1] apply equally to expressions containing feature set\n      references.\n\
    \       NOTE:  This proposal does not attempt to address the \"override\"\n  \
    \     or \"default\" problem.  (Where a feature set may be referenced and\n  \
    \     selectively modified.)\n   Some circumstances in which such an abbreviated\
    \ form might be used\n   include:\n   o  A media feature expression that contains\
    \ a repeated sub-\n      expression.  If the sub-expression is quite large, space\
    \ can be\n      saved by writing it out once, then using the abbreviated form\
    \ to\n      reference it.\n   o  A capability that is common to a range of devices,\
    \ such as a given\n      class of fax machine where are large number of feature\
    \ tags are\n      involved, but only a small number of common feature sets.  If\
    \ the\n      recipient understands, or can discover, that some abbreviation\n\
    \      stands for a given feature set then feature expression size can be\n  \
    \    reduced by using the abbreviation.\n      If feature set abbreviations are\
    \ used in this way, it may be that\n      they can be interpreted by a simple\
    \ table lookup rather than full\n      feature expression parsing.  (Making this\
    \ useful in practice will\n      depend on crafting the feature subsets appropriately.)\n\
    \   Examples of such usage are given in section 4 of this memo.\n   This memo\
    \ does not specify how a program that receives a feature set\n   abbreviation\
    \ should discover the corresponding feature set\n   expression: see section 3.2.\n"
- title: 3. Composite feature representation
  contents:
  - "3. Composite feature representation\n   This specification hinges on two central\
    \ ideas:\n   o  the use of auxiliary predicates (introduced in RFC 2533 [1]) to\n\
    \      form the basis of a feature set identifier, and\n   o  the use of a token\
    \ based on a hash function computed over the\n      referenced feature set expression.\n\
    \   A key reason to use a hash function to generate an identifier is to\n   define\
    \ a global name space without requiring a central naming\n   authority.  New feature\
    \ set tags can be introduced by any party\n   following the appropriate rules\
    \ of formulation, without reference to\n   any centralized authority.\n   Local\
    \ resolution services may be needed to map feature set tags to\n   their corresponding\
    \ feature set expressions, but these are not able\n   to vary the meaning of any\
    \ given tag.  Failure of a resolution\n   service to return the correct expression\
    \ is detectable by a calling\n   application, which should reject any incorrect\
    \ value supplied.\n       NOTE:  where a feature set reference is used, its meaning\
    \ is\n       defined by substitution of the referenced feature expression into\n\
    \       the referencing expression.  When all references have been thus\n    \
    \   replaced, the result is interpreted as a normal feature\n       expression.\n\
    \       In particular, if a referenced feature expression contains some\n    \
    \   feature tag that is also constrained by the referencing\n       expression,\
    \ the constraints are interpreted per RFC 2533 [1],\n       without regard for\
    \ their origin.  E.g., (using some notation\n       introduced below):\n     \
    \     (& (pix-x=100) (pix-y<=300)\n             (h.SBB5REAOMHC09CP2GM4V07PQP0)\
    \ )\n       where (h.SBB5REAOMHC09CP2GM4V07PQP0) resolves to:\n          (& (pix-x<=200)\
    \ (pix-y<=150) )\n       yields a result equivalent to:\n          (& (pix-x=100)\
    \ (pix-y<=150) )\n"
- title: 3.1 Feature set hashed reference format
  contents:
  - "3.1 Feature set hashed reference format\n   This specification introduces a special\
    \ form of auxiliary predicate\n   name with the following syntax:\n     fname\
    \       = \"h.\" 1*BASE32DIGIT\n     BASE32DIGIT = DIGIT\n                 / \"\
    A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\" / \"G\" / \"H\"\n                \
    \ / \"I\" / \"J\" / \"K\" / \"L\" / \"M\" / \"N\" / \"O\" / \"P\"\n          \
    \       / \"Q\" / \"R\" / \"S\" / \"T\" / \"U\" / \"V\"\n   The sequence of base-32\
    \ digits represents the value of a hash\n   function calculated over the corresponding\
    \ feature set expression\n   (see following sections).  Note that the above syntax\
    \ allows upper-\n   or lower-case letters for base-32 digits (per RFC 2234 [3]).\n\
    \   Thus, within a feature set expression, a hashed feature set reference\n  \
    \ would have the following form:\n      (h.123456789abcdefghijklmnopq)\n"
- title: 3.1.1 Hash value calculation
  contents:
  - "3.1.1 Hash value calculation\n   The hash value is calculated using the MD5 algorithm\
    \ [6] over the\n   text of the referenced feature set expression subjected to\
    \ certain\n   normalizations.  The feature expression must conform to the syntax\n\
    \   given for 'filter' in RFC 2533 [1]:\n      filter = \"(\" filtercomp \")\"\
    \ *( \";\" parameter )\n   The steps for calculating a hash value are:\n   1.\
    \ Whitespace normalization: all spaces, CR, LF, TAB and any other\n      layout\
    \ control characters that may be embedded in the feature\n      expression string,\
    \ other than those contained within quoted\n      strings, are removed (or ignored\
    \ for the purpose of hash value\n      computation).\n   2. Case normalization:\
    \  all lower case letters in the feature\n      expression, other than those contained\
    \ within quoted strings, are\n      converted to upper case.  That is, unquoted\
    \ characters with US-\n      ASCII values 97 to 122 (decimal) are changed to corresponding\n\
    \      characters in the range 65 to 90.\n   3. Hash computation: the MD5 algorithm,\
    \ described in RFC 1321 [6], is\n      applied to the normalized feature expression\
    \ string (represented\n      as a sequence of octets containing US-ASCII character\
    \ codes;  see\n      also section 5).\n      The result obtained in step 3 is\
    \ a 128-bit (16 octet) value that\n      is converted to a base-32 representation\
    \ to form the feature set\n      reference.\n       NOTE:  under some circumstances,\
    \ removal of ALL whitespace may\n       result in an invalid feature expression\
    \ string.  This should not\n       be a problem as this is done only for the purpose\
    \ of calculating\n       a hash value, and significantly different feature expressions\
    \ are\n       expected to differ in ways other than their whitespace.\n      \
    \ NOTE: case normalization is deemed appropriate since feature tag\n       and\
    \ token matching is case insensitive.\n"
- title: 3.1.2 Base-32 value representation
  contents:
  - "3.1.2 Base-32 value representation\n   RFC 1321 [6] describes how to calculate\
    \ an MD5 hash value that is a\n   sequence of 16 octets.  This is then required\
    \ to be coded as a base-\n   32 value, which is a sequence of base-32 digit characters.\n\
    \   Each successive character in a base-32 value represents 5 successive\n   bits\
    \ of the underlying octet sequence.  Thus, each group of 8\n   characters represents\
    \ a sequence of 5 octets (40 bits):\n                 1          2          3\n\
    \      01234567 89012345 67890123 45678901 23456789\n     +--------+--------+--------+--------+--------+\n\
    \     |< 1 >< 2| >< 3 ><|.4 >< 5.|>< 6 ><.|7 >< 8 >|\n     +--------+--------+--------+--------+--------+\n\
    \                                             <===> 8th character\n          \
    \                             <====> 7th character\n                         \
    \         <===> 6th character\n                            <====> 5th character\n\
    \                      <====> 4th character\n                 <===> 3rd character\n\
    \           <====> 2nd character\n      <===> 1st character\n   The value (i.e.\
    \ sequence of bits) represented by each base-32 digit\n   character is indicated\
    \ by the following table:\n       \"0\"  0       \"A\"  10     \"K\"  20     \
    \ \"U\"  30\n       \"1\"  1       \"B\"  11     \"L\"  21      \"V\"  31\n  \
    \     \"2\"  2       \"C\"  12     \"M\"  22\n       \"3\"  3       \"D\"  13\
    \     \"N\"  23\n       \"4\"  4       \"E\"  14     \"O\"  24\n       \"5\" \
    \ 5       \"F\"  15     \"P\"  25\n       \"6\"  6       \"G\"  16     \"Q\" \
    \ 26\n       \"7\"  7       \"H\"  17     \"R\"  27\n       \"8\"  8       \"\
    I\"  18     \"S\"  28\n       \"9\"  9       \"J\"  19     \"T\"  29\n   When\
    \ encoding a base-32 value, each full group of 5 octets is\n   represented by\
    \ a sequence of 8 characters indicated above.  If a\n   group of less than 5 octets\
    \ remain after this, they are encoded using\n   as many additional characters\
    \ as may be needed:  1, 2, 3 or 4 octets\n   are encoded by 2, 4, 5 or 7 characters\
    \ respectively.  Any spare bits\n   represented by the base-32 digit characters\
    \ are selected to be zero.\n   When decoding a base-32 value, the reverse mapping\
    \ is applied:  each\n   full group of 8 characters codes a sequence of 5 octets.\
    \  A final\n   group of 2, 4, 5 or 7 characters codes a sequence of 1, 2, 3 or\
    \ 4\n   octets respectively.  Any spare bits represented by the final group\n\
    \   of characters are discarded.\n   Thus, for a 128-bit (16 octet) MD5 hash value,\
    \ the first 15 octets\n   are coded as 24 base 32 digit characters, and the final\
    \ octet is\n   coded by two characters.\n       NOTE:  Base64 representation (per\
    \ MIME [4]) would be more compact\n       (21 rather than 26 characters for the\
    \ MD5 128-bit hash value),\n       but an auxiliary predicate name is defined\
    \ (by [1]) to have the\n       same syntax as a feature tag, and the feature tag\
    \ matching rules\n       (per [2]) state that feature tag matching is case insensitive.\n\
    \       Base36 representation was considered (i.e., using all letters\n      \
    \ \"A\"-\"Z\") but was not used because this would require extended\n       precision\
    \ multiplication and division operations to encode and\n       decode the hash\
    \ values.\n"
- title: 3.2 Resolving feature set identifiers
  contents:
  - "3.2 Resolving feature set identifiers\n   This memo does not mandate any particular\
    \ mechanism for dereferencing\n   a feature set identifier.  It is expected that\
    \ specific dereferencing\n   mechanisms will be specified for any application\
    \ or protocol that\n   uses them.\n   The following sections describe some ways\
    \ that feature set\n   dereferencing information may be incorporated into a feature\
    \ set\n   expression.  These are based on auxiliary predicate definitions\n  \
    \ within a \"where\" clause [1].\n   When a hashed feature set reference is used,\
    \ conformance to the\n   hashing rules takes precedence over any other determination\
    \ of the\n   feature expression.  Any expression, however obtained, may not be\n\
    \   substituted for the hash-based reference unless it yields the correct\n  \
    \ hash value.\n"
- title: 3.2.1 Query protocol
  contents:
  - "3.2.1 Query protocol\n   A protocol providing request/response type queries (e.g.,\
    \ HTTP, LDAP,\n   etc.) might be set up to provide a resolution service.\n   Thus,\
    \ a query to a server associated with the capabilities could be\n   performed\
    \ on the feature set identifier.  The response returned would\n   be a CONNEG\
    \ expression; e.g.,\n      (h.SBB5REAOMHC09CP2GM4V07PQP0)\n      where\n     \
    \ (h.SBB5REAOMHC09CP2GM4V07PQP0) :- (& (pix-x<=200) (pix-y<=150) )\n      end\n\
    \   or just:\n      (& (pix-x<=200) (pix-y<=150) )\n   This result would be combined\
    \ with the original expression to\n   obtain a result not including the hash based\
    \ predicate.\n   This process might be further enhanced by using URN resolution\n\
    \   mechanisms (e.g., DNS NAPTR [10]) to discover the resolution\n   protocol\
    \ and server.\n"
- title: 3.2.2 Inline feature set details
  contents:
  - "3.2.2 Inline feature set details\n   In this case, a reference is resolved by\
    \ including its definition\n   inline in an expression.\n   The feature set expression\
    \ associated with a reference value may be\n   specified directly in a \"where\"\
    \ clause, using the auxiliary\n   predicate definition syntax [1]; e.g.,\n   \
    \   (& (dpi=100) (h.SBB5REAOMHC09CP2GM4V07PQP0) )\n      where\n      (h.SBB5REAOMHC09CP2GM4V07PQP0)\
    \ :- (& (pix-x<=200) (pix-y<=150) )\n      end\n   This form might be used on\
    \ request (where the request mechanism is\n   defined by the invoking application\
    \ protocol), or when the originator\n   believes the recipient may not understand\
    \ the reference.\n   It is an error if the inline feature expression does not\
    \ yield the\n   hash value contained in auxiliary predicate name.\n       NOTE:\
    \  viewed in isolation, this format does not have any obvious\n       value, in\
    \ that the (h.xxx) form of auxiliary predicate could be\n       replaced by any\
    \ arbitrary name.\n       It is anticipated that this form might be used as a\
    \ follow-up\n       response in a sequence along the lines of:\n          A> Capabilities\
    \ are:\n            (& (dpi=100) (h.SBB5REAOMHC09CP2GM4V07PQP0) )\n          B>\
    \ Do not understand:\n            (h.SBB5REAOMHC09CP2GM4V07PQP0)\n          A>\
    \ Capabilities are:\n            (& (dpi=100) (h.SBB5REAOMHC09CP2GM4V07PQP0) )\n\
    \            where\n              (h.SBB5REAOMHC09CP2GM4V07PQP0) :- (& (pix-x<=200)\n\
    \                (pix-y<=150) )\n            end\n"
- title: 4. Examples
  contents:
  - "4. Examples\n   The following are some examples of feature set expressions containing\n\
    \   feature set references:\n      (& (dpi=100) (h.SBB5REAOMHC09CP2GM4V07PQP0)\
    \ )\n      (& (dpi=100) (h.SBB5REAOMHC09CP2GM4V07PQP0) )\n      where\n      (h.SBB5REAOMHC09CP2GM4V07PQP0)\
    \ :-\n        (& (pix-x<=200) (pix-y<=150) )\n      end\n      (h.QGEOPMCF02P09QC016CEPU22FO)\n\
    \      where\n      (h.QGEOPMCF02P09QC016CEPU22FO) :-\n       (| (& (ua-media=continuous)\
    \ (dpi=200) (dpi-xyratio=200/100)\n             (color=Binary) (paper-size=B4)\
    \ (image-coding=MH) )\n          (& (ua-media=continuous) (dpi=200) (dpi-xyratio=200/100)\n\
    \             (color=Binary) (paper-size=B4) (image-coding=MR) )\n          (&\
    \ (ua-media=stationery) (dpi=300) (dpi-xyratio=1)\n             (color=Binary)\
    \ (paper-size=A4) (image-coding=JBIG) )\n          (& (ua-media=transparency)\
    \ (dpi=300) (dpi-xyratio=1)\n             (color=Binary) (paper-size=A4) (image-coding=JBIG)\
    \ ) )\n      end\n   The following examples are based on Internet fax work, and\
    \ show how a\n   feature-hash might be used to express the commonly-used features.\
    \  A\n   form of Internet fax system that is expected to be quite common is a\n\
    \   so-called \"simple mode\" system, whose capabilities are described by\n  \
    \ the following feature expression:\n      (& (image-file-structure=TIFF-minimal)\n\
    \        (MRC-mode=0)\n        (color=Binary)\n        (image-coding=MH) (MRC-mode=0)\n\
    \        (| (& (dpi=204) (dpi-xyratio=[204/98,204/196]) )\n           (& (dpi=200)\
    \ (dpi-xyratio=[200/100,1]) ) )\n        (size-x<=2150/254)\n        (paper-size=A4)\n\
    \        (ua-media=stationery) )\n   This might be expressed by the hash-based\
    \ feature set identifier:\n      (h.MSB955PVIRT1QOHET9AJT5JM3O)\n   The following\
    \ example describes capabilities of a full-color\n   Internet fax system.  Note\
    \ a number of feature values are\n   applicable in common with '(color=grey)'\
    \ and '(color=full)':\n      (& (image-file-structure=TIFF)\n         (MRC-mode=0)\n\
    \         (| (& (color=Binary)\n               (image-coding=[MH,MR,MMR])\n  \
    \             (| (& (dpi=204) (dpi-xyratio=[204/98,204/196]) )\n             \
    \     (& (dpi=200) (dpi-xyratio=[200/100,1]) )\n                  (& (dpi=300)\
    \ (dpi-xyratio=1) ) ) )\n            (& (color=grey)\n               (image-coding=JPEG)\n\
    \               (image-coding-constraint=JPEG-T4E)\n               (color-levels<=256)\n\
    \               (color-space=CIELAB)\n               (color-illuminant=D50)\n\
    \               (CIELAB-L-min>=0)\n               (CIELAB-L-max<=100)\n      \
    \         (dpi=[100,200,300]) (dpi-xyratio=1) )\n            (& (color=full)\n\
    \               (image-coding=JPEG)\n               (image-coding-constraint=JPEG-T4E)\n\
    \               (color-subsampling=[\"1:1:1\",\"4:1:1\"])\n               (color-levels<=16777216)\n\
    \               (color-space=CIELAB)\n               (color-illuminant=D50)\n\
    \               (CIELAB-L-min>=0)\n               (CIELAB-L-max<=100)\n      \
    \         (CIELAB-a-min>=-85)\n               (CIELAB-a-max<=85)\n           \
    \    (CIELAB-b-min>=-75)\n               (CIELAB-b-max<=125)\n               (dpi=[100,200,300])\
    \ (dpi-xyratio=1) ) )\n         (size-x<=2150/254)\n         (paper-size=[letter,A4,B4])\
    \ )\n         (ua-media=stationery) )\n   Separating out the common capabilities\
    \ yields:\n     (& (image-file-structure=TIFF)\n        (MRC-mode=0)\n       \
    \ (| (& (color=Binary)\n              (image-coding=[MH,MR,MMR])\n           \
    \   (| (& (dpi=204) (dpi-xyratio=[204/98,204/196]) )\n                 (& (dpi=200)\
    \ (dpi-xyratio=[200/100,1]) )\n                 (& (dpi=300) (dpi-xyratio=1) )\
    \ ) )\n           (& (color=grey)\n              (color-levels<=256)\n       \
    \       (h.QVSEM8V2LMJ8VOR7V682J7079O) )\n           (& (color=full)\n       \
    \       (color-subsampling=[\"1:1:1\",\"4:1:1\"])\n              (color-levels<=16777216)\n\
    \              (CIELAB-a-min>=-85)\n              (CIELAB-a-max<=85)\n       \
    \       (CIELAB-b-min>=-75)\n              (CIELAB-b-max<=125)\n             \
    \ (h.QVSEM8V2LMJ8VOR7V682J7079O) ) )\n        (size-x<=2150/254)\n        (paper-size=[letter,A4,B4])\
    \ )\n        (ua-media=stationery) )\n     where\n     (h.QVSEM8V2LMJ8VOR7V682J7079O)\
    \ :-\n        (& (image-coding=JPEG)\n           (image-coding-constraint=JPEG-T4E)\n\
    \           (color-space=CIELAB)\n           (color-illuminant=D50)\n        \
    \   (CIELAB-L-min>=0)\n           (CIELAB-L-max<=100)\n           (dpi=[100,200,300])\
    \ (dpi-xyratio=1) )\n     end\n"
- title: 5. Internationalization Considerations
  contents:
  - "5. Internationalization Considerations\n   Feature set expressions and URI strings\
    \ are currently defined to\n   consist of only characters from the US-ASCII repertoire\
    \ [1,5]; under\n   these circumstances this specification is not impacted by\n\
    \   internationalization considerations (other than any already\n   applicable\
    \ to URIs [5]).\n   But, if future revisions of the feature set syntax permit\
    \ non-US-\n   ASCII characters (e.g. within quoted strings), then some canonical\n\
    \   representation must be defined for the purposes of calculating hash\n   values.\
    \  One choice might be to use a UTF-8 equivalent representation\n   as the basis\
    \ for calculating the feature set hash.  Another choice\n   might be to leave\
    \ this as an application protocol issue (but this\n   could lead to non-interoperable\
    \ feature sets between different\n   protocols).\n   Another conceivable issue\
    \ is that of up-casing the feature expression\n   in preparation for computing\
    \ a hash value.  This does not apply to\n   the content of strings so is not likely\
    \ to be an issue.  But if\n   changes are made that do permit non-US-ASCII characters\
    \ in feature\n   tags or token strings, consideration must be given to properly\n\
    \   defining how case conversion is to be performed.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   For the most part, security considerations are\
    \ the same as those that\n   apply for capability identification in general [1,2,9].\n\
    \   A possible added consideration is that use of a specific feature set\n   identifier\
    \ may reveal more information about a system than is\n   necessary for a transaction\
    \ at hand.\n"
- title: 7. Acknowledgements
  contents:
  - "7. Acknowledgements\n   Ideas here have been improved by early discussions with\
    \ Martin\n   Duerst, Al Gilman and Ted Hardie.  Useful suggestions for improvement\n\
    \   were provided by Maurizio Codogno.\n"
- title: 8. References
  contents:
  - "8. References\n   [1]  Klyne, G., \"A Syntax for Describing Media Feature Sets\"\
    , RFC\n        2533, March 1999.\n   [2]  Mutz, A. and T. Hardie, \"Media Feature\
    \ Tag Registration\n        Procedure\", RFC 2506, March 1999.\n   [3]  Crocker,\
    \ D. and P. Overell, \"Augmented BNF for Syntax\n        Specifications: ABNF\"\
    , RFC 2234, November 1997.\n   [4]  Freed, N. and N. Borenstein,  \"Multipurpose\
    \ Internet Mail\n        Extensions (MIME) Part 1: Format of Internet message\
    \ bodies\",\n        RFC 2045, November 1996.\n   [5]  Berners-Lee, T., Fielding,\
    \ R. and L. Masinter, \"Uniform Resource\n        Identifiers (URI): Generic Syntax\"\
    , RFC 2396, August 1998.\n   [6]  Rivest, R., \"The MD5 Message-Digest Algorithm\"\
    , RFC 1321, April\n        1992.\n   [7]  \"Applied Cryptography\"\n        Bruce\
    \ Schneier\n        John Wiley and Sons, 1996 (second edition)\n        ISBN 0-471-12845-7\
    \ (cloth)\n        ISBN 0-471-11709-9 (paper)\n   [8]  Klyne, G., \"Protocol-independent\
    \ Content Negotiation Framework\",\n        RFC 2703, September 1999.\n   [9]\
    \  \"Numerical Recipes\"\n        William H Press, Brian P Flannery, Saul A Teukolski\
    \ and\n        William T Vetterling\n        Cambridge University Press (1986)\n\
    \        ISBN 0 521 30811 9\n        (The Gamma function approximation is presented\
    \ in chapter 6 on\n        \"Special Functions\".  There have been several later\
    \ editions of\n        this book published, so the chapter reference may change.)\n\
    \   [10] Daniel, R. and M. Mealling, \"Resolution of Uniform Resource\n      \
    \  Identifiers using the Domain Name System\", RFC 2168, June 1997.\n   [11] Java\
    \ source code of feature set matching algorithm, with feature\n        set hash\
    \ computation option.  Linked from\n        <http://www.imc.org/ietf-medfree/>\n"
- title: 9. Authors' Addresses
  contents:
  - "9. Authors' Addresses\n   Graham Klyne\n   Content Technologies Ltd.\n   1220\
    \ Parkview,\n   Arlington Business Park\n   Theale\n   Reading, RG7 4SA\n   United\
    \ Kingdom\n   Phone: +44 118 930 1300\n   Fax:   +44 118 930 1301\n   EMail: GK@ACM.ORG\n\
    \   Larry Masinter\n   AT&T Labs\n   75 Willow Road\n   Menlo Park, CA 94025\n\
    \   Phone: +1-650-463-7059\n   EMail: LMM@acm.org\n   http://larry.masinter.net\n"
- title: '10. Appendix A: The birthday paradox'
  contents:
  - "10. Appendix A: The birthday paradox\n       NOTE: this entire section is commentary,\
    \ and does not affect the\n       feature set reference specification in any way.\n\
    \   The use of a hash value to represent an arbitrary feature set is\n   based\
    \ on a presumption that no two distinct feature sets will yield\n   the same hash\
    \ value.\n   There is a small but distinct possibility that two different feature\n\
    \   sets will indeed yield the same hash value.\n   We assume that the 128-bit\
    \ hash function distributes hash values for\n   feature sets, even those with\
    \ very small differences, randomly and\n   evenly through the range of 2^128 (approximately\
    \ 3*10^38) possible\n   values.  This is a fundamental property of a good digest\
    \ algorithm\n   like MD5.  Thus, the chance that any two distinct feature set\n\
    \   expressions yield the same hash is less than 1 in 10^38.  This is\n   negligible\
    \ when compared with, say, the probability that a receiving\n   system will fail\
    \ having received data conforming to a negotiated\n   feature set.\n   But when\
    \ the number of distinct feature sets in circulation\n   increases, the probability\
    \ of repeating a hash value increases\n   surprisingly.  This is illustrated by\
    \ the \"birthday paradox\":  given\n   a random collection of just 23 people,\
    \ there is a greater than even\n   chance that there exists some pair with the\
    \ same birthday.  This\n   topic is discussed further in sections 7.4 and 7.5\
    \ of Bruce\n   Schneier's \"Applied Cryptography\" [7].\n   The table below shows\
    \ the \"birthday paradox\" probabilities that at\n   least one pair of feature\
    \ sets has the same hash value for different\n   numbers of feature sets in use.\n\
    \          Number of feature   Probability of two\n          sets in use     \
    \    sets with the same\n                              hash value\n          1\
    \                   0\n          2                   3E-39\n          10     \
    \             1E-37\n          1E3                 1E-33\n          1E6      \
    \           1E-27\n          1E9                 1E-21\n          1E12       \
    \         1E-15\n          1E15                1E-9\n          1E18          \
    \      1E-3\n       The above probability computations are approximate, being\n\
    \       performed using logarithms of a Gamma function\n       approximation by\
    \ Lanczos [9].  The probability formula is\n       'P=1-(m!/((m-n)! m^n))', where\
    \ 'm' is the total number of\n       possible hash values (2^128) and 'n' is the\
    \ number of\n       feature sets in use.\n   If original feature set expressions\
    \ are generated manually, or only\n   in response to some manually constrained\
    \ process, the total number\n   of feature sets in circulation is likely to remain\
    \ very small in\n   relation to the total number of possible hash values.\n  \
    \ The outcome of all this is: assuming that the feature sets are\n   manually\
    \ generated, even taking account of the birthday paradox\n   effect, the probability\
    \ of incorrectly identifying a feature set\n   using a hash value is still negligibly\
    \ small when compared with\n   other possible failure modes.\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
