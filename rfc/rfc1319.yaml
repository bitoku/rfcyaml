- title: __initial_text__
  contents:
  - "                     The MD2 Message-Digest Algorithm\nStatus of this Memo\n\
    \   This memo provides information for the Internet community.  It does\n   not\
    \ specify an Internet standard.  Distribution of this memo is\n   unlimited.\n\
    Acknowlegements\n   The description of MD2 is based on material prepared by John\
    \ Linn and\n   Ron Rivest.  Their permission to incorporate that material is greatly\n\
    \   appreciated.\nTable of Contents\n   1. Executive Summary                 \
    \                               1\n   2. Terminology and Notation            \
    \                             2\n   3. MD2 Algorithm Description             \
    \                           2\n   4. Summary                                 \
    \                         4\n   References                                   \
    \                       5\n   APPENDIX A - Reference Implementation          \
    \                     5\n   Security Considerations                          \
    \                  17\n   Author's Address                                   \
    \                17\n1. Executive Summary\n   This document describes the MD2\
    \ message-digest algorithm. The\n   algorithm takes as input a message of arbitrary\
    \ length and produces\n   as output a 128-bit \"fingerprint\" or \"message digest\"\
    \ of the input.\n   It is conjectured that it is computationally infeasible to\
    \ produce\n   two messages having the same message digest, or to produce any\n\
    \   message having a given prespecified target message digest. The MD2\n   algorithm\
    \ is intended for digital signature applications, where a\n   large file must\
    \ be \"compressed\" in a secure manner before being\n   signed with a private\
    \ (secret) key under a public-key cryptosystem\n   such as RSA.\n   License to\
    \ use MD2 is granted for non-commerical Internet Privacy-\n   Enhanced Mail [1-3].\n\
    \   This document is an update to the August 1989 RFC 1115 [3], which\n   also\
    \ gives a reference implementation of MD2. The main differences\n   are that a\
    \ textual description of MD2 is included, and that the\n   reference implementation\
    \ of MD2 is more portable.\n   For OSI-based applications, MD2's object identifier\
    \ is\n   md2 OBJECT IDENTIFIER ::=\n   iso(1) member-body(2) US(840) rsadsi(113549)\
    \ digestAlgorithm(2) 2}\n   In the X.509 type AlgorithmIdentifier [4], the parameters\
    \ for MD2\n   should have type NULL.\n2. Terminology and Notation\n   In this\
    \ document, a \"byte\" is an eight-bit quantity.\n   Let x_i denote \"x sub i\"\
    . If the subscript is an expression, we\n   surround it in braces, as in x_{i+1}.\
    \ Similarly, we use ^ for\n   superscripts (exponentiation), so that x^i denotes\
    \ x to the i-th\n   power.\n   Let X xor Y denote the bit-wise XOR of X and Y.\n\
    3. MD2 Algorithm Description\n   We begin by supposing that we have a b-byte message\
    \ as input, and\n   that we wish to find its message digest. Here b is an arbitrary\n\
    \   nonnegative integer; b may be zero, and it may be arbitrarily large.\n   We\
    \ imagine the bytes of the message written down as follows:\n                \
    \   m_0 m_1 ... m_{b-1}\n   The following five steps are performed to compute\
    \ the message digest\n   of the message.\n3.1 Step 1. Append Padding Bytes\n \
    \  The message is \"padded\" (extended) so that its length (in bytes) is\n   congruent\
    \ to 0, modulo 16. That is, the message is extended so that\n   it is a multiple\
    \ of 16 bytes long. Padding is always performed, even\n   if the length of the\
    \ message is already congruent to 0, modulo 16.\n   Padding is performed as follows:\
    \ \"i\" bytes of value \"i\" are appended\n   to the message so that the length\
    \ in bytes of the padded message\n   becomes congruent to 0, modulo 16. At least\
    \ one byte and at most 16\n   16 bytes are appended.\n   At this point the resulting\
    \ message (after padding with bytes) has a\n   length that is an exact multiple\
    \ of 16 bytes. Let M[0 ... N-1] denote\n   the bytes of the resulting message,\
    \ where N is a multiple of 16.\n3.2 Step 2. Append Checksum\n   A 16-byte checksum\
    \ of the message is appended to the result of the\n   previous step.\n   This\
    \ step uses a 256-byte \"random\" permutation constructed from the\n   digits\
    \ of pi. Let S[i] denote the i-th element of this table. The\n   table is given\
    \ in the appendix.\n   Do the following:\n      /* Clear checksum. */\n      For\
    \ i = 0 to 15 do:\n         Set C[i] to 0.\n      end /* of loop on i */\n   \
    \   Set L to 0.\n      /* Process each 16-word block. */\n      For i = 0 to N/16-1\
    \ do\n         /* Checksum block i. */\n         For j = 0 to 15 do\n        \
    \    Set c to M[i*16+j].\n            Set C[j] to S[c xor L].\n            Set\
    \ L to C[j].\n          end /* of loop on j */\n       end /* of loop on i */\n\
    \   The 16-byte checksum C[0 ... 15] is appended to the message. Let M[0\n   with\
    \ checksum), where N' = N + 16.\n3.3 Step 3. Initialize MD Buffer\n   A 48-byte\
    \ buffer X is used to compute the message digest. The buffer\n   is initialized\
    \ to zero.\n3.4 Step 4. Process Message in 16-Byte Blocks\n   This step uses the\
    \ same 256-byte permutation S as step 2 does.\n   Do the following:\n      /*\
    \ Process each 16-word block. */\n      For i = 0 to N'/16-1 do\n         /* Copy\
    \ block i into X. */\n         For j = 0 to 15 do\n            Set X[16+j] to\
    \ M[i*16+j].\n            Set X[32+j] to (X[16+j] xor X[j]).\n          end /*\
    \ of loop on j */\n         Set t to 0.\n         /* Do 18 rounds. */\n      \
    \   For j = 0 to 17 do\n            /* Round j. */\n            For k = 0 to 47\
    \ do\n               Set t and X[k] to (X[k] xor S[t]).\n            end /* of\
    \ loop on k */\n            Set t to (t+j) modulo 256.\n         end /* of loop\
    \ on j */\n      end /* of loop on i */\n3.5 Step 5. Output\n   The message digest\
    \ produced as output is X[0 ... 15]. That is, we\n   begin with X[0], and end\
    \ with X[15].\n   This completes the description of MD2. A reference implementation\
    \ in\n   C is given in the appendix.\n4. Summary\n   The MD2 message-digest algorithm\
    \ is simple to implement, and provides\n   a \"fingerprint\" or message digest\
    \ of a message of arbitrary length.\n   It is conjectured that the difficulty\
    \ of coming up with two messages\n   having the same message digest is on the\
    \ order of 2^64 operations,\n   and that the difficulty of coming up with any\
    \ message having a given\n   message digest is on the order of 2^128 operations.\
    \ The MD2 algorithm\n   has been carefully scrutinized for weaknesses. It is,\
    \ however, a\n   relatively new algorithm and further security analysis is of\
    \ course\n   justified, as is the case with any new proposal of this sort.\nReferences\n\
    \   [1] Linn, J., \"Privacy Enhancement for Internet Electronic Mail: Part\n \
    \      I -- Message Encipherment and Authentication Procedures\", RFC\n      \
    \ 1113, DEC,  IAB Privacy Task Force, August 1989.\n   [2] Kent, S., and J. Linn,\
    \ \"Privacy Enhancement for Internet\n       Electronic Mail: Part II -- Certificate-Based\
    \ Key Management\",\n       RFC 1114, BBNCC, DEC, IAB Privacy Task Force, August\
    \ 1989.\n   [3] Linn, J., \"Privacy Enhancement for Internet Electronic Mail:\
    \ Part\n       III -- Algorithms, Modes, and Identifiers\", RFC 1115 DEC, IAB\n\
    \       Privacy Task Force, August 1989.\n   [4] CCITT Recommendation X.509 (1988),\
    \ \"The Directory -\n       Authentication Framework\".\nAPPENDIX A - Reference\
    \ Implementation\n   This appendix contains the following files taken from RSAREF:\
    \ A\n   Cryptographic Toolkit for Privacy-Enhanced Mail:\n     global.h -- global\
    \ header file\n     md2.h -- header file for MD2\n     md2c.c -- source code for\
    \ MD2\nFor more information on RSAREF, send email to <rsaref@rsa.com>.\nThe appendix\
    \ also includes the following file:\n     mddriver.c -- test driver for MD2, MD4\
    \ and MD5\nThe driver compiles for MD5 by default but can compile for MD2 or MD4\
    \ if\nthe symbol MD is defined on the C compiler command line as 2 or 4.\nA.1\
    \ global.h\n/* GLOBAL.H - RSAREF types and constants\n */\n/* PROTOTYPES should\
    \ be set to one if and only if the compiler supports\n     function argument prototyping.\n\
    \   The following makes PROTOTYPES default to 0 if it has not already\n     been\
    \ defined with C compiler flags.\n */\n#ifndef PROTOTYPES\n#define PROTOTYPES\
    \ 0\n#endif\n/* POINTER defines a generic pointer type */\ntypedef unsigned char\
    \ *POINTER;\n/* UINT2 defines a two byte word */\ntypedef unsigned short int UINT2;\n\
    /* UINT4 defines a four byte word */\ntypedef unsigned long int UINT4;\n/* PROTO_LIST\
    \ is defined depending on how PROTOTYPES is defined above.\n   If using PROTOTYPES,\
    \ then PROTO_LIST returns the list, otherwise it\n     returns an empty list.\n\
    \ */\n#if PROTOTYPES\n#define PROTO_LIST(list) list\n#else\n#define PROTO_LIST(list)\
    \ ()\n#endif\nA.2 md2.h\n/* MD2.H - header file for MD2C.C\n */\n/* Copyright\
    \ (C) 1990-2, RSA Data Security, Inc. Created 1990. All\n   rights reserved.\n\
    \   License to copy and use this software is granted for\n   non-commercial Internet\
    \ Privacy-Enhanced Mail provided that it is\n   identified as the \"RSA Data Security,\
    \ Inc. MD2 Message Digest\n   Algorithm\" in all material mentioning or referencing\
    \ this software\n   or this function.\n   RSA Data Security, Inc. makes no representations\
    \ concerning either\n   the merchantability of this software or the suitability\
    \ of this\n   software for any particular purpose. It is provided \"as is\"\n\
    \   without express or implied warranty of any kind.\n   These notices must be\
    \ retained in any copies of any part of this\n   documentation and/or software.\n\
    \ */\ntypedef struct {\n  unsigned char state[16];                           \
    \      /* state */\n  unsigned char checksum[16];                           /*\
    \ checksum */\n  unsigned int count;                 /* number of bytes, modulo\
    \ 16 */\n  unsigned char buffer[16];                         /* input buffer */\n\
    } MD2_CTX;\nvoid MD2Init PROTO_LIST ((MD2_CTX *));\nvoid MD2Update PROTO_LIST\n\
    \  ((MD2_CTX *, unsigned char *, unsigned int));\nvoid MD2Final PROTO_LIST ((unsigned\
    \ char [16], MD2_CTX *));\nA.3 md2c.c\n/* MD2C.C - RSA Data Security, Inc., MD2\
    \ message-digest algorithm\n */\n/* Copyright (C) 1990-2, RSA Data Security, Inc.\
    \ Created 1990. All\n   rights reserved.\n   License to copy and use this software\
    \ is granted for\n   non-commercial Internet Privacy-Enhanced Mail provided that\
    \ it is\n   identified as the \"RSA Data Security, Inc. MD2 Message Digest\n \
    \  Algorithm\" in all material mentioning or referencing this software\n   or\
    \ this function.\n   RSA Data Security, Inc. makes no representations concerning\
    \ either\n   the merchantability of this software or the suitability of this\n\
    \   software for any particular purpose. It is provided \"as is\"\n   without\
    \ express or implied warranty of any kind.\n   These notices must be retained\
    \ in any copies of any part of this\n   documentation and/or software.\n */\n\
    #include \"global.h\"\n#include \"md2.h\"\nstatic void MD2Transform PROTO_LIST\n\
    \  ((unsigned char [16], unsigned char [16], unsigned char [16]));\nstatic void\
    \ MD2_memcpy PROTO_LIST ((POINTER, POINTER, unsigned int));\nstatic void MD2_memset\
    \ PROTO_LIST ((POINTER, int, unsigned int));\n/* Permutation of 0..255 constructed\
    \ from the digits of pi. It gives a\n   \"random\" nonlinear byte substitution\
    \ operation.\n */\nstatic unsigned char PI_SUBST[256] = {\n  41, 46, 67, 201,\
    \ 162, 216, 124, 1, 61, 54, 84, 161, 236, 240, 6,\n  19, 98, 167, 5, 243, 192,\
    \ 199, 115, 140, 152, 147, 43, 217, 188,\n  76, 130, 202, 30, 155, 87, 60, 253,\
    \ 212, 224, 22, 103, 66, 111, 24,\n  138, 23, 229, 18, 190, 78, 196, 214, 218,\
    \ 158, 222, 73, 160, 251,\n  245, 142, 187, 47, 238, 122, 169, 104, 121, 145,\
    \ 21, 178, 7, 63,\n  148, 194, 16, 137, 11, 34, 95, 33, 128, 127, 93, 154, 90,\
    \ 144, 50,\n  39, 53, 62, 204, 231, 191, 247, 151, 3, 255, 25, 48, 179, 72, 165,\n\
    \  181, 209, 215, 94, 146, 42, 172, 86, 170, 198, 79, 184, 56, 210,\n  150, 164,\
    \ 125, 182, 118, 252, 107, 226, 156, 116, 4, 241, 69, 157,\n  112, 89, 100, 113,\
    \ 135, 32, 134, 91, 207, 101, 230, 45, 168, 2, 27,\n  96, 37, 173, 174, 176, 185,\
    \ 246, 28, 70, 97, 105, 52, 64, 126, 15,\n  85, 71, 163, 35, 221, 81, 175, 58,\
    \ 195, 92, 249, 206, 186, 197,\n  234, 38, 44, 83, 13, 110, 133, 40, 132, 9, 211,\
    \ 223, 205, 244, 65,\n  129, 77, 82, 106, 220, 55, 200, 108, 193, 171, 250, 36,\
    \ 225, 123,\n  8, 12, 189, 177, 74, 120, 136, 149, 139, 227, 99, 232, 109, 233,\n\
    \  203, 213, 254, 59, 0, 29, 57, 242, 239, 183, 14, 102, 88, 208, 228,\n  166,\
    \ 119, 114, 248, 235, 117, 75, 10, 49, 68, 80, 180, 143, 237,\n  31, 26, 219,\
    \ 153, 141, 51, 159, 17, 131, 20\n};\nstatic unsigned char *PADDING[] = {\n  (unsigned\
    \ char *)\"\",\n  (unsigned char *)\"\\001\",\n  (unsigned char *)\"\\002\\002\"\
    ,\n  (unsigned char *)\"\\003\\003\\003\",\n  (unsigned char *)\"\\004\\004\\\
    004\\004\",\n  (unsigned char *)\"\\005\\005\\005\\005\\005\",\n  (unsigned char\
    \ *)\"\\006\\006\\006\\006\\006\\006\",\n  (unsigned char *)\"\\007\\007\\007\\\
    007\\007\\007\\007\",\n  (unsigned char *)\"\\010\\010\\010\\010\\010\\010\\010\\\
    010\",\n  (unsigned char *)\"\\011\\011\\011\\011\\011\\011\\011\\011\\011\",\n\
    \  (unsigned char *)\"\\012\\012\\012\\012\\012\\012\\012\\012\\012\\012\",\n\
    \  (unsigned char *)\"\\013\\013\\013\\013\\013\\013\\013\\013\\013\\013\\013\"\
    ,\n  (unsigned char *)\"\\014\\014\\014\\014\\014\\014\\014\\014\\014\\014\\014\\\
    014\",\n  (unsigned char *)\n    \"\\015\\015\\015\\015\\015\\015\\015\\015\\\
    015\\015\\015\\015\\015\",\n  (unsigned char *)\n    \"\\016\\016\\016\\016\\\
    016\\016\\016\\016\\016\\016\\016\\016\\016\\016\",\n  (unsigned char *)\n   \
    \ \"\\017\\017\\017\\017\\017\\017\\017\\017\\017\\017\\017\\017\\017\\017\\017\"\
    ,\n  (unsigned char *)\n    \"\\020\\020\\020\\020\\020\\020\\020\\020\\020\\\
    020\\020\\020\\020\\020\\020\\020\"\n};\n/* MD2 initialization. Begins an MD2\
    \ operation, writing a new context.\n */\nvoid MD2Init (context)\nMD2_CTX *context;\
    \                                        /* context */\n{\n  context->count =\
    \ 0;\n  MD2_memset ((POINTER)context->state, 0, sizeof (context->state));\n  MD2_memset\n\
    \    ((POINTER)context->checksum, 0, sizeof (context->checksum));\n}\n/* MD2 block\
    \ update operation. Continues an MD2 message-digest\n     operation, processing\
    \ another message block, and updating the\n     context.\n */\nvoid MD2Update\
    \ (context, input, inputLen)\nMD2_CTX *context;                              \
    \          /* context */\nunsigned char *input;                              \
    \  /* input block */\nunsigned int inputLen;                     /* length of\
    \ input block */\n{\n  unsigned int i, index, partLen;\n  /* Update number of\
    \ bytes mod 16 */\n  index = context->count;\n  context->count = (index + inputLen)\
    \ & 0xf;\n  partLen = 16 - index;\n  /* Transform as many times as possible.\n\
    \    */\n  if (inputLen >= partLen) {\n    MD2_memcpy\n      ((POINTER)&context->buffer[index],\
    \ (POINTER)input, partLen);\n    MD2Transform (context->state, context->checksum,\
    \ context->buffer);\n    for (i = partLen; i + 15 < inputLen; i += 16)\n     \
    \ MD2Transform (context->state, context->checksum, &input[i]);\n    index = 0;\n\
    \  }\n  else\n    i = 0;\n  /* Buffer remaining input */\n  MD2_memcpy\n    ((POINTER)&context->buffer[index],\
    \ (POINTER)&input[i],\n     inputLen-i);\n}\n/* MD2 finalization. Ends an MD2\
    \ message-digest operation, writing the\n     message digest and zeroizing the\
    \ context.\n */\nvoid MD2Final (digest, context)\nunsigned char digest[16];  \
    \                       /* message digest */\nMD2_CTX *context;              \
    \                          /* context */\n{\n  unsigned int index, padLen;\n \
    \ /* Pad out to multiple of 16.\n   */\n  index = context->count;\n  padLen =\
    \ 16 - index;\n  MD2Update (context, PADDING[padLen], padLen);\n  /* Extend with\
    \ checksum */\n  MD2Update (context, context->checksum, 16);\n  /* Store state\
    \ in digest */\n  MD2_memcpy ((POINTER)digest, (POINTER)context->state, 16);\n\
    \  /* Zeroize sensitive information.\n   */\n  MD2_memset ((POINTER)context, 0,\
    \ sizeof (*context));\n}\n/* MD2 basic transformation. Transforms state and updates\
    \ checksum\n     based on block.\n */\nstatic void MD2Transform (state, checksum,\
    \ block)\nunsigned char state[16];\nunsigned char checksum[16];\nunsigned char\
    \ block[16];\n{\n  unsigned int i, j, t;\n  unsigned char x[48];\n  /* Form encryption\
    \ block from state, block, state ^ block.\n   */\n  MD2_memcpy ((POINTER)x, (POINTER)state,\
    \ 16);\n  MD2_memcpy ((POINTER)x+16, (POINTER)block, 16);\n  for (i = 0; i < 16;\
    \ i++)\n    x[i+32] = state[i] ^ block[i];\n  /* Encrypt block (18 rounds).\n\
    \   */\n  t = 0;\n  for (i = 0; i < 18; i++) {\n    for (j = 0; j < 48; j++)\n\
    \      t = x[j] ^= PI_SUBST[t];\n    t = (t + i) & 0xff;\n  }\n  /* Save new state\
    \ */\n  MD2_memcpy ((POINTER)state, (POINTER)x, 16);\n  /* Update checksum.\n\
    \   */\n  t = checksum[15];\n  for (i = 0; i < 16; i++)\n    t = checksum[i] ^=\
    \ PI_SUBST[block[i] ^ t];\n  /* Zeroize sensitive information.\n   */\n  MD2_memset\
    \ ((POINTER)x, 0, sizeof (x));\n}\n/* Note: Replace \"for loop\" with standard\
    \ memcpy if possible.\n */\nstatic void MD2_memcpy (output, input, len)\nPOINTER\
    \ output;\nPOINTER input;\nunsigned int len;\n{\n  unsigned int i;\n  for (i =\
    \ 0; i < len; i++)\n    output[i] = input[i];\n}\n/* Note: Replace \"for loop\"\
    \ with standard memset if possible.\n */\nstatic void MD2_memset (output, value,\
    \ len)\nPOINTER output;\nint value;\nunsigned int len;\n{\n  unsigned int i;\n\
    \  for (i = 0; i < len; i++)\n    ((char *)output)[i] = (char)value;\n}\nA.4 mddriver.c\n\
    /* MDDRIVER.C - test driver for MD2, MD4 and MD5\n */\n/* Copyright (C) 1990-2,\
    \ RSA Data Security, Inc. Created 1990. All\n   rights reserved.\n   RSA Data\
    \ Security, Inc. makes no representations concerning either\n   the merchantability\
    \ of this software or the suitability of this\n   software for any particular\
    \ purpose. It is provided \"as is\"\n   without express or implied warranty of\
    \ any kind.\n   These notices must be retained in any copies of any part of this\n\
    \   documentation and/or software.\n */\n/* The following makes MD default to\
    \ MD5 if it has not already been\n     defined with C compiler flags.\n */\n#ifndef\
    \ MD\n#define MD MD5\n#endif\n#include <stdio.h>\n#include <time.h>\n#include\
    \ <string.h>\n#include \"global.h\"\n#if MD == 2\n#include \"md2.h\"\n#endif\n\
    #if MD == 4\n#include \"md4.h\"\n#endif\n#if MD == 5\n#include \"md5.h\"\n#endif\n\
    /* Length of test block, number of test blocks.\n */\n#define TEST_BLOCK_LEN 1000\n\
    #define TEST_BLOCK_COUNT 1000\nstatic void MDString PROTO_LIST ((char *));\nstatic\
    \ void MDTimeTrial PROTO_LIST ((void));\nstatic void MDTestSuite PROTO_LIST ((void));\n\
    static void MDFile PROTO_LIST ((char *));\nstatic void MDFilter PROTO_LIST ((void));\n\
    static void MDPrint PROTO_LIST ((unsigned char [16]));\n#if MD == 2\n#define MD_CTX\
    \ MD2_CTX\n#define MDInit MD2Init\n#define MDUpdate MD2Update\n#define MDFinal\
    \ MD2Final\n#endif\n#if MD == 4\n#define MD_CTX MD4_CTX\n#define MDInit MD4Init\n\
    #define MDUpdate MD4Update\n#define MDFinal MD4Final\n#endif\n#if MD == 5\n#define\
    \ MD_CTX MD5_CTX\n#define MDInit MD5Init\n#define MDUpdate MD5Update\n#define\
    \ MDFinal MD5Final\n#endif\n/* Main driver.\n   Arguments (may be any combination):\n\
    \     -sstring - digests string\n     -t       - runs time trial\n     -x    \
    \   - runs test script\n     filename - digests file\n     (none)   - digests\
    \ standard input\n */\nint main (argc, argv)\nint argc;\nchar *argv[];\n{\n  int\
    \ i;\n  if (argc > 1)\n    for (i = 1; i < argc; i++)\n      if (argv[i][0] ==\
    \ '-' && argv[i][1] == 's')\n        MDString (argv[i] + 2);\n      else if (strcmp\
    \ (argv[i], \"-t\") == 0)\n        MDTimeTrial ();\n      else if (strcmp (argv[i],\
    \ \"-x\") == 0)\n        MDTestSuite ();\n      else\n        MDFile (argv[i]);\n\
    \  else\n    MDFilter ();\n  return (0);\n}\n/* Digests a string and prints the\
    \ result.\n */\nstatic void MDString (string)\nchar *string;\n{\n  MD_CTX context;\n\
    \  unsigned char digest[16];\n  unsigned int len = strlen (string);\n  MDInit\
    \ (&context);\n  MDUpdate (&context, string, len);\n  MDFinal (digest, &context);\n\
    \  printf (\"MD%d (\\\"%s\\\") = \", MD, string);\n  MDPrint (digest);\n  printf\
    \ (\"\\n\");\n}\n/* Measures the time to digest TEST_BLOCK_COUNT TEST_BLOCK_LEN-byte\n\
    \     blocks.\n */\nstatic void MDTimeTrial ()\n{\n  MD_CTX context;\n  time_t\
    \ endTime, startTime;\n  unsigned char block[TEST_BLOCK_LEN], digest[16];\n  unsigned\
    \ int i;\n  printf\n    (\"MD%d time trial. Digesting %d %d-byte blocks ...\"\
    , MD,\n     TEST_BLOCK_LEN, TEST_BLOCK_COUNT);\n  /* Initialize block */\n  for\
    \ (i = 0; i < TEST_BLOCK_LEN; i++)\n    block[i] = (unsigned char)(i & 0xff);\n\
    \  /* Start timer */\n  time (&startTime);\n  /* Digest blocks */\n  MDInit (&context);\n\
    \  for (i = 0; i < TEST_BLOCK_COUNT; i++)\n    MDUpdate (&context, block, TEST_BLOCK_LEN);\n\
    \  MDFinal (digest, &context);\n  /* Stop timer */\n  time (&endTime);\n  printf\
    \ (\" done\\n\");\n  printf (\"Digest = \");\n  MDPrint (digest);\n  printf (\"\
    \\nTime = %ld seconds\\n\", (long)(endTime-startTime));\n  printf\n    (\"Speed\
    \ = %ld bytes/second\\n\",\n     (long)TEST_BLOCK_LEN * (long)TEST_BLOCK_COUNT/(endTime-startTime));\n\
    }\n/* Digests a reference suite of strings and prints the results.\n */\nstatic\
    \ void MDTestSuite ()\n{\n  printf (\"MD%d test suite:\\n\", MD);\n  MDString\
    \ (\"\");\n  MDString (\"a\");\n  MDString (\"abc\");\n  MDString (\"message digest\"\
    );\n  MDString (\"abcdefghijklmnopqrstuvwxyz\");\n  MDString\n    (\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    );\n  MDString\n    (\"1234567890123456789012345678901234567890\\\n1234567890123456789012345678901234567890\"\
    );\n}\n/* Digests a file and prints the result.\n */\nstatic void MDFile (filename)\n\
    char *filename;\n{\n  FILE *file;\n  MD_CTX context;\n  int len;\n  unsigned char\
    \ buffer[1024], digest[16];\n  if ((file = fopen (filename, \"rb\")) == NULL)\n\
    \    printf (\"%s can't be opened\\n\", filename);\n  else {\n    MDInit (&context);\n\
    \    while (len = fread (buffer, 1, 1024, file))\n      MDUpdate (&context, buffer,\
    \ len);\n    MDFinal (digest, &context);\n    fclose (file);\n    printf (\"MD%d\
    \ (%s) = \", MD, filename);\n    MDPrint (digest);\n    printf (\"\\n\");\n  }\n\
    }\n/* Digests the standard input and prints the result.\n */\nstatic void MDFilter\
    \ ()\n{\n  MD_CTX context;\n  int len;\n  unsigned char buffer[16], digest[16];\n\
    \  MDInit (&context);\n  while (len = fread (buffer, 1, 16, stdin))\n    MDUpdate\
    \ (&context, buffer, len);\n  MDFinal (digest, &context);\n  MDPrint (digest);\n\
    \  printf (\"\\n\");\n}\n/* Prints a message digest in hexadecimal.\n */\nstatic\
    \ void MDPrint (digest)\nunsigned char digest[16];\n{\n  unsigned int i;\n  for\
    \ (i = 0; i < 16; i++)\n    printf (\"%02x\", digest[i]);\n}\nA.5 Test suite\n\
    \   The MD2 test suite (driver option \"-x\") should print the following\n   results:\n\
    MD2 test suite:\nMD2 (\"\") = 8350e5a3e24c153df2275c9f80692773\nMD2 (\"a\") =\
    \ 32ec01ec4a6dac72c0ab96fb34c0b5d1\nMD2 (\"abc\") = da853b0d3f88d99b30283a69e6ded6bb\n\
    MD2 (\"message digest\") = ab4f496bfb2a530b219ff33031fe06b0\nMD2 (\"abcdefghijklmnopqrstuvwxyz\"\
    ) = 4e8ddff3650292ab5a4108c3aa47940b\nMD2 (\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    ) =\nda33def2a42df13975352846c30338cd\nMD2 (\"123456789012345678901234567890123456789012345678901234567890123456\n\
    78901234567890\") = d5976f79d83d3a0dc9806c3c66f3efd8\nSecurity Considerations\n\
    \   The level of security discussed in this memo is considered to be\n   sufficient\
    \ for implementing very high security hybrid digital\n   signature schemes based\
    \ on MD2 and a public-key cryptosystem.\nAuthor's Address\n   Burton S. Kaliski\
    \ Jr.\n   RSA Laboratories (a division of RSA Data Security, Inc.)\n   10 Twin\
    \ Dolphin Drive\n   Redwood City, CA  94065\n   Phone: (415) 595-8782\n   FAX:\
    \ (415) 595-4126\n   EMail: burt@rsa.com\n"
