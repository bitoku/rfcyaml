- title: __initial_text__
  contents:
  - '                 An Experiment in DNS Based IP Routing

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  Discussion and suggestions for improvement are requested.\n  \
    \ Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Routing, scaling and hierarchies ......................\
    \    1\n   2. Routing based on MX records ...........................    2\n \
    \  3. Evaluation of DNS routing .............................    3\n   3.1 Loops\
    \ and relays .....................................    4\n   3.2 Performances and\
    \ scaling .............................    5\n   3.3 Tunneling or source routing\
    \ ..........................    6\n   3.4 Choosing a gateway ...................................\
    \    6\n   3.5 Routing dynamics .....................................    6\n \
    \  3.6 DNS connectivity .....................................    7\n   3.7 On\
    \ the way back ......................................    8\n   3.8 Flirting with\
    \ policy routing .........................    8\n   4. Rationales for deployment\
    \ .............................    9\n   4.1 The good citizens ....................................\
    \   10\n   4.2 The commercial approach ..............................   10\n \
    \  5. The experimental development ..........................   11\n   5.1 DNS\
    \ record ...........................................   11\n   5.2 Interface with\
    \ the standard IP router ................   12\n   5.3 The DNS query manager ................................\
    \   12\n   5.4 The real time forwarder ..............................   12\n \
    \  5.5 Interaction with routing protocols ...................   13\n   6. Acknowledgments\
    \ .......................................   13\n   7. Conclusion ............................................\
    \   13\n   8. References ............................................   14\n \
    \  9. Security Considerations ...............................   14\n   10. Author's\
    \ Address .....................................   14\n"
- title: 1.  Routing, scaling and hierarchies
  contents:
  - "1.  Routing, scaling and hierarchies\n   Several recent studies have outlined\
    \ the risk of \"routing explosion\"\n   in the current Internet: there are already\
    \ more than 5000 networks\n   announced in the NSFNET routing tables, more than\
    \ 7000 in the EBONE\n   routing tables.  As these numbers are growing, several\
    \ problems\n   occur:\n      *    The size of the routing tables grows linearly\
    \ with the\n           number of connected networks; handling this larger tables\n\
    \           requires more resources in all \"intelligent\" routers, in\n     \
    \      particular in all \"transit\" and \"external\" routers that\n         \
    \  cannot rely on default routes.\n      *    The volume of information carried\
    \ by the route exchange\n           protocols such as BGP grows with the number\
    \ of networks,\n           using more network resources and making the reaction\
    \ to\n           routing events slower.\n      *    Explicit administrative decisions\
    \ have to be exercised by\n           all transit networks administrators which\
    \ want to\n           implement \"routing policies\" for each and every\n    \
    \       additional \"multi-homed\" network.\n   The current \"textbook\" solution\
    \ to the routing explosion problem is\n   to use \"hierarchical routing\" based\
    \ on hierarchical addresses. This\n   is largely documented in routing protocols\
    \ such as IDRP, and is one\n   of the rationales for deploying the CIDR [3] addressing\
    \ structure in\n   the Internet. This textbook solution, while often perfectly\
    \ adequate,\n   as a number of inconveniences, particularly in the presence of\n\
    \   \"multihomed stubs\", e.g., customer networks that are connected to\n   more\
    \ than one service providers.\n   The current proposal presents a scheme that\
    \ allows for simple\n   routing. It is complementary with the classic \"hierarchical\
    \ routing\"\n   approach, but provides an easy to implement and low cost solution\
    \ for\n   \"multi-homed\" domains. The solution is a generalization of the \"\
    MX\n   record\" scheme currently used for mail routing.\n"
- title: 2.  Routing based on MX records
  contents:
  - "2.  Routing based on MX records\n   The \"MX records\" are currently used by\
    \ the mail routing application\n   to introduce a level of decoupling between\
    \ the \"domain names\" used\n   for user registration and the mailbox addresses.\
    \ They are\n   particularly useful for sending mail to \"non connected\" domains:\
    \ in\n   that case, the MX record points to one or several Internet hosts that\n\
    \   accept to relay mail towards the target domain.\n   We propose to generalize\
    \ this scheme for packet routing.  Suppose a\n   routing domain D, containing\
    \ several networks, subnetwork and hosts,\n   and connected to the Internet through\
    \ a couple of IP gateways. These\n   gateways are dual homed: they each have an\
    \ address within the domain\n   D -- say D1 and D2 -- and an address within the\
    \ Internet -- say I1\n   and I2 --. These gateways also have a particularity:\
    \ they retain\n   information, and don't try to announce to the Internet any\n\
    \   reachibility information on the networks contained within \"D\". These\n \
    \  networks however have been properly registered; a name server\n   accessible\
    \ from the Internet contains the \"in-addr.arpa\" records that\n   enable reverse\
    \ \"address to name\" lookup, and also contains the\n   network level equivalent\
    \ of \"MX records\", say \"RX records\". Given any\n   host address Dx within\
    \ D, one can get \"RX records\" pointing to the\n   Internet addresses of the\
    \ gateways, I1 and I2.\n   A standard Internet router Ix cannot in principle send\
    \ a packet to\n   the address Dx: it does not have any corresponding routing\n\
    \   information. However, if the said Internet router has been modified\n   to\
    \ exploit our scheme, it will query the DNS with the name build up\n   from \"\
    Dx\" in the \"in-addr.arpa\" domain, obtain the RX records, and\n   forward the\
    \ packet towards I1 (or I2), using some form of \"source\n   routing\". The gateway\
    \ I1 (or I2) will receive the packet; its routing\n   tables contain information\
    \ on the domain D and it can relay the\n   packet to the host Dx.\n   At this\
    \ stage, the readers should be convinced that we have presented\n   a scheme that:\n\
    \      *    avoid changes in host IP addresses as topology changes,\n        \
    \   without requiring extra overhead on routing (provided\n           that the\
    \ routing employs some form of hierarchical\n           information aggregation/abstraction),\n\
    \      *    allow to support multihomed domains without requiring\n          \
    \ additional overhead on routing and without requiring\n           hosts to have\
    \ explicit knowledge of multiple addresses.\n   They should also forcingly scratch\
    \ their head, and mumble that things\n   can't be so simple, and that one should\
    \ perhaps carefully look at the\n   details before assuming that the solution\
    \ really works.\n"
- title: 3.  Evaluation of DNS routing
  contents:
  - "3.  Evaluation of DNS routing\n   Several questions come to mind immediately\
    \ when confronted to such\n   schemes:\n       -    Should all relays access the\
    \ DNS? What about possible\n            loops?\n       -    Will the performances\
    \ be adequate?\n       -    How does one choose the best gateway when several\
    \ are\n            announced? What happens if the gateway is overloaded, or\n\
    \            unreachable?\n       -    What if the directory cannot be accessed?\n\
    \       -    How does it work in the reverse direction?\n       -    Should we\
    \ use tunnelling or loose source routing?\n       -    Can we be more general?\n\
    \   There may indeed be more questions, but these ones, at least, have\n   been\
    \ taken into account in the setting of our experiment.\n"
- title: 3.1.  Loops and relays
  contents:
  - "3.1.  Loops and relays\n   In the introduction to DNS-IP routing, we mentioned\
    \ that the packets\n   would be directed towards the access gateway I1 or I2 by\
    \ means of\n   \"source routing\" or \"tunnelling\". This is not, stricto sensu,\n\
    \   necessary. One could imagine that the packet would simply be routed\n   \"\
    as if it was directed towards I1 or I2\". The next relay would, in\n   turn, also\
    \ access the DNS to get routing information and forward the\n   packet.\n   Such\
    \ a strategy would have the advantage of leaving the header\n   untouched and\
    \ of letting the transit nodes choose the best routing\n   towards the destination,\
    \ based on their knowledge of the reachability\n   status. It would however have\
    \ two important disadvantages:\n          -    It would oblige all intermediate\
    \ relays to access the\n               DNS,\n          -    It would oblige all\
    \ these relays to exploit consistently\n               the DNS information.\n\
    \   Obliging all intermediate gateways to access the DNS is impractical\n   in\
    \ the short term: it would mean that we would have to update each\n   and every\
    \ transit relay before deploying the scheme. It could also\n   have an important\
    \ performance impact: the \"working set\" of transit\n   relays is typical much\
    \ wider than that of stub gateways, and the\n   argument presented previously\
    \ on the efficiency of caches may not\n   apply. This would perhaps remain impractical\
    \ even in the long term,\n   as it the volume of DNS traffic could well become\
    \ excessive.\n   The second argument would apply even if the performance problem\
    \ had\n   been solved. Suppose that several RX records are registered for a\n\
    \   given destination, such as I1 and I2 for Dx in our example, and that\n   a\
    \ \"hop by hop routing\" strategy is used. There would be a fair risk\n   that\
    \ some relays would choose to route the packet towards I1 and some\n   others\
    \ towards I2, resulting in inefficient routing and the\n   possibility of loops.\n\
    \   In order to ensure coherency, we propose that all routing decisions\n   be\
    \ made at the source, or by one of the first relays near the source.\n"
- title: 3.2.  Performances and scaling
  contents:
  - "3.2.  Performances and scaling\n   The performance impact of using the DNS for\
    \ acquiring routing\n   information is twofold:\n      *    The initial DNS exchanges\
    \ required for loading the\n           information may induce a response time\
    \ penalty for the\n           users,\n      *    The extra DNS traffic may contribute\
    \ to overloading the\n           network.\n   We already have some experience\
    \ of DNS routing in the Internet for\n   the \"mail\" application. After the introduction\
    \ of the \"MX record\",\n   the mail routing slowly evolved from a hardwired hierarchy,\
    \ e.g.,\n   send all mail to the addresses in the \".FR\" domain to the french\n\
    \   gateway, towards a decoupling between a name hierarchy used for\n   registration\
    \ and the physical hierarchy used for delivery.\n   If we consider that the mail\
    \ application represent about 1/4th of the\n   Internet traffic, and that a mail\
    \ message seldom include more than\n   half a dozen packets, we come to the point\
    \ that DNS access is already\n   needed at least once for every 24 packets. The\
    \ performances are not\n   apocalyptic -- or someone would have complained! In\
    \ fact, if we\n   generalize this, we may suppose that a given host has a \"working\
    \ set\"\n   of IP destinations, and that some caching strategy should be\n   sufficient\
    \ to alleviate the performance effect.\n   In the scheme that we propose, the\
    \ DNS is only accessed once, either\n   by the source host or by an intelligent\
    \ router located near the\n   source host. The routing decision is only made once,\
    \ and consistent\n   routing is pursued in the Internet until reaching an access\
    \ router to\n   the remote domain.\n   The volume of DNS traffic through the NSFNET,\
    \ as collected by MERIT,\n   is currently about 9%. When a host wants to establish\
    \ communication\n   with a remote host it usually need to obtain the name - IP\
    \ address\n   mapping. Getting extra information (I1 or I2 in our example) should\n\
    \   incur in most cases one more DNS lookup at the source. That lookup\n   would\
    \ at most double the volume of DNS traffic.\n"
- title: 3.3.  Tunneling or source routing
  contents:
  - "3.3.  Tunneling or source routing\n   Source directed routing, as described above,\
    \ can be implemented\n   through one of two techniques: source routing, or a form\
    \ of\n   encapsulation protocol. For the sake of simplicity, we will use\n   source\
    \ routing, as defined in [1]: we don't have to define a\n   particular tunnelling\
    \ protocol, and we don't have to require hosts to\n   implement a particular encapsulation\
    \ protocol.\n"
- title: 3.4.  Choosing a gateway
  contents:
  - "3.4.  Choosing a gateway\n   A simplification to the previous problem would be\
    \ to allow only one\n   RX record per destination, thus guaranteeing consistent\
    \ decisions in\n   the network. This would however have a number of draw-backs.\
    \ A single\n   access point would be a single point of failure, and would be\n\
    \   connected to only one transit network thus keeping the \"customer\n   locking\"\
    \ effect of hierarchical routing.\n   We propose that the RX records have a structure\
    \ parallel to that of\n   MX records, i.e., that they carry associated with each\
    \ gateway\n   address a preference identifier. The source host, when making the\n\
    \   routing decision based on RX records, should do the following:\n         \
    \ -    List all possible gateways,\n          -    Prune all gateways in the list\
    \ which are known as\n               \"unreachable\" from the local site,\n  \
    \        -    If the local host is present in the list with a\n              \
    \ preference index \"x\", prune all gateways whose preference\n              \
    \ index are larger than \"x\" or equal to \"x\".\n          -    Choose one of\
    \ the gateway in the list. If the list is\n               empty, consider the\
    \ destination as unreachable.\n   Indeed, these evaluations should not be repeated\
    \ for each and every\n   packet. The routers should maintain a cache of the most\
    \ frequently\n   used destinations, in order to speed up the processing.\n"
- title: 3.5.  Routing dynamics
  contents:
  - "3.5.  Routing dynamics\n   In theory, one could hope to extract \"distance\"\
    \ information from the\n   local routing table and combine it with the preference\
    \ index for\n   choosing the \"best\" gateway. In practice, as shown in the mail\n\
    \   context, it is extremely difficult to perform this kind of test, and\n   one\
    \ has to rely on more heuristical approaches. The easiest one is to\n   always\
    \ choose a \"preferred gateway\", i.e., the gateway which has the\n   minimal\
    \ preference index. One could also, alternatively, choose one\n   gateway at random\
    \ within the list: this would spread the traffic on\n   several routes, which\
    \ is known to introduce better load sharing and\n   more redundancy in the network.\n\
    \   As this decision is done only once, the particular algorithm to use\n   can\
    \ be left as a purely local matter. One domain may make this\n   decision based\
    \ purely on the RX record, another based purely on the\n   routing information\
    \ to the gateways listed in the RX record, and yet\n   the third one may employ\
    \ some weighted combinations of both.\n   Perhaps the most important feature is\
    \ the ability to cope rapidly\n   with network errors, i.e., to detect that one\
    \ of the route has become\n   \"unreachable\". This is clearly an area where we\
    \ lack experience, and\n   where the experiment will help. One can think of several\
    \ possible\n   solutions, e.g.,:\n      *    Let intermediate gateways rewrite\
    \ the loose source route\n           in order to replace an unreachable access\
    \ point by a\n           better alternative,\n      *    Monitor the LSR options\
    \ in the incoming packets, and use\n           the reverse LSR,\n      *    Monitor\
    \ the \"ICMP Unreachable\" messages received from\n           intermediate gateways,\
    \ and react accordingly,\n      *    Regularly probe the LSR, in order to check\
    \ that it is\n           still useful.\n   A particularly interesting line would\
    \ be to combine these\n   connectivity checks with the transport control protocol\n\
    \   acknowledgments; this would however require an important modification\n  \
    \ of the TCP codes, and is not practical in the short term. We will not\n   try\
    \ any such interaction in the early experiments.\n   The management of these reachability\
    \ informations should be taken\n   into account when caching the results of the\
    \ DNS queries.\n"
- title: 3.6.  DNS connectivity
  contents:
  - "3.6.  DNS connectivity\n   It should be obvious that a scheme relying on RX records\
    \ is only\n   valid if these records can be accessed. By definition, this is not\n\
    \   the case of the target domain itself, which is located at the outer\n   fringes\
    \ of the Internet.\n   A domain that want to obtain connectivity using the RX\
    \ scheme will\n   have to replicate its domain name service info, and in particular\
    \ the\n   RX records, so has to provide them through servers accessible from\n\
    \   the core of the Internet. A very obvious way to do so is to locate\n   replicated\
    \ name servers for the target domain in the access gateways\n   \"I1\" and \"\
    I2\".\n"
- title: 3.7.  On the way back
  contents:
  - "3.7.  On the way back\n   A source located in the fringe domain, when accessing\
    \ a core Internet\n   host, will have to choose an access relay, I1 or I2 in our\
    \ example.\n   A first approach to the problem is to let the access gateway relay\n\
    \   the general routing information provided by the routing domains\n   through\
    \ the fringe network. The fringe hosts would thus have the same\n   connectivity\
    \ as the core hosts, and would not have to use source\n   directed routing.  This\
    \ approach has the advantage of leaving the\n   packets untouched, but may pose\
    \ problems should the transit network\n   need to send back a ICMP packet: it\
    \ will have to specify a source\n   route through the access gateway for the ICMP\
    \ packet. This would be\n   guaranteed if the IP packets are source routed, as\
    \ the reverse source\n   route would be automatically used for the ICMP packet.\
    \ We are thus\n   led to recommend that all IP packets leaving a fringe domain\
    \ be\n   explicitly source routed.\n   The source route could be inserted by the\
    \ access gateway when the\n   packet exits the fringe domain, if the gateway has\
    \ been made aware of\n   our scheme. It can also be set by the source host, which\
    \ would then\n   have to explicitly choose the transit gateway, or by the first\
    \ router\n   in the path, usually the default router of the host sending the\n\
    \   packets. As we expect that hosts will be easier to modify than\n   routers,\
    \ we will develop here suitable algorithms.\n   The fringe hosts will have to\
    \ know the set of available gateways, of\n   which all temporarily unreachable\
    \ gateways shall indeed be pruned. In\n   the absence of more information, the\
    \ gateway will be chosen according\n   to some preference order, or possibly at\
    \ random.\n   It is very clear that if a \"fringe\" host wants to communicate\
    \ with\n   another \"fringe\" host, it will have to insert two relays in the LSR,\n\
    \   one for the domain that sources the packet, and one for the domain\n   where\
    \ the destination resides.\n"
- title: 3.8.  Flirting with policy routing
  contents:
  - "3.8.  Flirting with policy routing\n   The current memo assumes that all gateways\
    \ to a fringe domain are\n   equivalent: the objective of the experiment is to\
    \ test and evaluate a\n   simple form of directory base routing, not to provide\
    \ a particular\n   \"policy routing\" solution. It should be pointed out, however,\
    \ that\n   some form of policy routing could be implemented as a simple\n   extension\
    \ to our RX scheme.\n   In the proposed scheme, RX records are only qualified\
    \ by an \"order of\n   preference\".  It would not be very difficult to also qualify\
    \ them\n   with a \"supported policy\" indication, e.g., the numeric identifier\
    \ of\n   a particular \"policy\". The impact on the choice of gateways will be\n\
    \   obvious:\n      -    When going towards a fringe network, one should prune\n\
    \           from the usable list all the gateways that do not support\n      \
    \     at least one of the local policies,\n      -    When exiting a fringe network,\
    \ one should try to assess\n           the policies supported by the target, and\
    \ pick a\n           corresponding exit gateway,\n      -    When going from a\
    \ fringe network towards another fringe\n           network, one should pick a\
    \ pair of exit and access\n           gateway that have matching policies.\n \
    \  In fact, a similar but more general approach has been proposed by\n   Dave\
    \ Clark under the title of \"route fragments\". The only problem\n   here are\
    \ that we don't know how to identify policies, that we don't\n   know whether\
    \ a simple numeric identifier is good enough and that we\n   probably need to\
    \ provide a way for end users to assess the policy on\n   a packet per packet\
    \ or flow per flow basis. In short, we should try\n   to keep the initial experiment\
    \ simple. If it is shown to be\n   successful, we will have to let it evolve towards\
    \ some standard\n   service; it will be reasonable to provide policy hooks at\
    \ this stage.\n"
- title: 4.  Rationales for deployment
  contents:
  - "4.  Rationales for deployment\n   Readers should be convinced, after the previous\
    \ section, that the\n   DNS-IP routing scheme is sleek and safe. However, they\
    \ also are\n   probably convinced that a network which is only connected through\
    \ our\n   scheme will probably enjoy somewhat less services than if they add\n\
    \   have full traditional connectivity.  We can see two major reasons for\n  \
    \ inducing users into this kind of scheme:\n      -    Because they are good network\
    \ citizen and want to suffer\n           their share in order to ease the general\
    \ burden of the\n           Internet,\n      -    Because they are financially\
    \ induced to do so.\n   We will examine these two rationales separately.\n"
- title: 4.1.  The good citizens
  contents:
  - "4.1.  The good citizens\n   A strong tradition of the Internet is the display\
    \ of cooperative\n   spirit: individual users are ready to suffer a bit and \"\
    do the right\n   thing\" if this conduct can be demonstrated to improve the global\n\
    \   state of the network -- and also is not overly painful.\n   Restraining to\
    \ record your internal networks in the international\n   connectivity tables is\
    \ mainly an advantage for your Internet\n   partners, and in particular for the\
    \ backbone managers. The normal way\n   to relieve this burden is to follow a\
    \ hierarchical addressing plan,\n   as suggested by CIDR. However, when for some\
    \ reason the plan cannot\n   be followed, e.g., when the topology just changed\
    \ while the target\n   hosts have not yet been renumbered, our scheme provides\
    \ an\n   alternative to \"just announcing one more network number in the\n   tables\"\
    . Thus, it can help reducing the routing explosion problem.\n"
- title: 4.2.  The commercial approach
  contents:
  - "4.2.  The commercial approach\n   Announcing network numbers in connectivity\
    \ tables does have a\n   significant cost for network operators:\n      -    larger\
    \ routing tables means more memory hence more\n           expensive routres,\n\
    \      -    more networks means larger and more frequent routing\n           messages,\
    \ hence consume more network resources,\n      -    more remote networks means\
    \ more frequent administrative\n           decisions if policies have to be implemented.\n\
    \   These costs are very significant not only for regionals, but also for\n  \
    \ backbone networks. It would thus be very reasonable, from an\n   economical\
    \ point of view, for a backbone to charge regionals\n   according to the number\
    \ of networks that they announce. A similar\n   line of reasoning can be applied\
    \ by the regionals, which could thus\n   give the choice to their customers between:\n\
    \      -    being charged for announcing an address of their choice,\n      -\
    \    or being allocated at a lower cost a set of addresses in\n           an addressing\
    \ space belonging to the regional.\n   Our scheme may prove an interesting tool\
    \ if the charge for individual\n   addresses, which are necessary for \"multi\
    \ homed\" clients, becomes too\n   high.\n"
- title: 5.  The experimental development
  contents:
  - "5.  The experimental development\n   The experimental software, implemented under\
    \ BSD Unix in a \"socket\"\n   environment, contains two tasks:\n          - \
    \   a real time forwarder, which is implemented inside the\n               kernel\
    \ and handles the source demanded routes,\n          -    a DNS query manager,\
    \ which transmit to the real time\n               forwarder the source routing\
    \ information.\n   In this section, we will describe the real time forwarder,\
    \ the query\n   manager, the format of the DNS record, and the interface with\
    \ the\n   standard IP routers.\n"
- title: 5.1.  DNS record
  contents:
  - "5.1.  DNS record\n   In a definitive scheme, it would be necessary to define\
    \ a DNS record\n   type and the corresponding \"RX\" format. In order to deploy\
    \ this\n   scheme, we would then have to teach this new format to the domain\n\
    \   name service software. While not very difficult to do, this would\n   probably\
    \ take a couple of month, and will not be used in the early\n   experimentations,\
    \ which will use the general purpose \"TXT\" record.\n   This record is designed\
    \ for easy general purpose extensions in the\n   DNS, and its content is a text\
    \ string. The RX record will contain\n   three fields:\n          -    A record\
    \ identifier composed of the two characters \"RX\".\n               This is used\
    \ to disambiguate from other experimental uses\n               of the \"TXT\"\
    \ record.\n          -    A cost indicator, encoded on up to 3 numerical digits.\n\
    \               The corresponding positive integer value should be less\n    \
    \           that 256, in order to preserve future evolutions.\n          -   \
    \ An IP address, encoded as a text string following the\n               \"dot\"\
    \ notation.\n   The three strings will be separated by a single comma. An example\
    \ of\n   record would thus be:\n ___________________________________________________________________\n\
    \ |         domain          |   type |   record |   value           |\n |    \
    \        -            |        |          |                   |\n |*.27.32.192.in-addr.arpa\
    \ |   IP   |    TXT   |   RX, 10, 10.0.0.7|\n |_________________________|________|__________|___________________|\n\
    \   which means that for all hosts whose IP address starts by the three\n   octets\
    \ \"192.32.27\" the IP host \"10.0.0.7\" can be used as a gateway,\n   and that\
    \ the preference value is 10.\n"
- title: 5.2.  Interface with the standard IP router
  contents:
  - "5.2.  Interface with the standard IP router\n   We have implemented our real\
    \ time forwarder \"on the side\" of a\n   standard IP router, as if it were a\
    \ particular subnetwork connection:\n   we simply indicate to the IP router that\
    \ some destinations should be\n   forwarded to a particular \"interface\", i.e.,\
    \ through our real time\n   forwarder.\n   Of particular importance is indeed\
    \ to know efficiently which\n   destinations should be routed through our services.\
    \ As the service\n   would be useless for destinations which are directly reachable,\
    \ we\n   have to monitor the \"unreachable\" destinations.  We do so by\n   monitoring\
    \ the \"ICMP\" messages which signal the unreachable\n   destination networks,\
    \ and copying them to the DNS query manager.\n   There are indeed situations,\
    \ e.g., for fringe networks, where the\n   router knows that destinations outside\
    \ the local domain will have to\n   be routed through the real time forwarder.\
    \ In this case, it makes\n   sense to declare the real time forwarder as the \"\
    default route\" for\n   the host.\n"
- title: 5.3.  The DNS query manager
  contents:
  - "5.3.  The DNS query manager\n   Upon reception of the ICMP message, the query\
    \ manager updates the\n   local routing table, so that any new packet bound to\
    \ the requested\n   destination becomes routed through the real time forwarder.\n\
    \   At the same time, the query manager will send a DNS request, in order\n  \
    \ to read the RX records corresponding to the destination. After\n   reception\
    \ of the response, it will select a gateway, and pass the\n   information to the\
    \ real time forwarder.\n"
- title: 5.4.  The real time forwarder
  contents:
  - "5.4.  The real time forwarder\n   When the real time forwarder receives a packet,\
    \ it will check whether\n   a gateway is known for the corresponding destination.\
    \  If that is the\n   case, it will look at the packet, and insert the necessary\
    \ source\n   routing information; it will then forward the packet, either by\n\
    \   resending it through the general IP routing program, or by forwarding\n  \
    \ it directly to the network interface associated to the intermediate\n   gateway.\n\
    \   If the gateway is not yet known, the packet will be placed in a\n   waiting\
    \ queue. Each time the query manager will transmit to the real\n   time forwarder\
    \ new gateway information, the queue will be processed,\n   and packets for which\
    \ the information has become available will be\n   forwarded. Packets in this\
    \ waiting queue will \"age\"; their time to\n   live counts will be decremented\
    \ at regular intervals. If it become\n   null, the packets will be destroyed;\
    \ an ICMP message may be\n   forwarded.\n   The DNS query manager may be in some\
    \ cases unable to find RX\n   information for a particular destination. It will\
    \ in that case signal\n   to the real time forwarder that the destination is unreachable.\
    \ The\n   information will be kept in the destination table; queued packet for\n\
    \   this destination will be destroyed, and new packets will not be\n   forwarded.\n\
    \   The information in the destination table will not be permanent. A\n   time\
    \ to live will be associated to each line of the table, and the\n   aging lines\
    \ will be periodically removed.\n"
- title: 5.5.  Interaction with routing protocols
  contents:
  - "5.5.  Interaction with routing protocols\n   The monitoring of the \"destination\
    \ unreachable\" packets described\n   above is mostly justified by a desire to\
    \ leave standard IP routing,\n   and the corresponding kernel code, untouched.\n\
    \      If the IP routing code can be modified, and if the local host has\n   \
    \   full routing tables, it can take the decision to transmit the\n      packets\
    \ to the real time forwarder more efficiently, e.g., as a\n      default action\
    \ for the networks that are not announced in the\n      local tables. This procedure\
    \ is better practice, as it avoids the\n      risk of loosing the first packet\
    \ that would otherwise have\n      triggered the ICMP message.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   We would like to thank Yakov Rekhter, which contributed\
    \ a number of\n   very helpful comments.\n"
- title: 7.  Conclusion
  contents:
  - "7.  Conclusion\n   This memo suggests an experiment in directory based routing.\
    \  The\n   author believes that this technique can be deployed in the current\n\
    \   Internet infrastructure, and may help us to \"buy time\" before the\n   probably\
    \ painful migration towards IPv7.\n   The corresponding code is under development\
    \ at INRIA. It will be\n   placed in the public domain. Interested parties are\
    \ kindly asked to\n   contact us for more details.\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1] Postel, J., \"Internet Protocol - DARPA Internet Program\
    \ Protocol\n       Specification\", STD 5, RFC 791, DARPA, September 1981.\n \
    \  [2] Clark, D., \"Building routers for the routing of tomorrow\",\n       Message\
    \ to the \"big-internet\" mailing list, reference\n       <9207141905.AA06992@ginger.lcs.mit.edu>,\
    \ Tue, 14 Jul 92.\n   [3] Fuller, V., Li, T., Yu, J., and K. Varadhan, \"Supernetting:\
    \  an\n       Address Assignment and Aggregation Strategy\", RFC 1338, BARRNet,\n\
    \       cisco, Merit, OARnet, June 1992.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 10.  Author's Address
  contents:
  - "10.  Author's Address\n   Christian Huitema\n   INRIA, Sophia-Antipolis\n   2004\
    \ Route des Lucioles\n   BP 109\n   F-06561 Valbonne Cedex\n   France\n   Phone:\
    \ +33 93 65 77 15\n   EMail: Christian.Huitema@MIRSA.INRIA.FR\n"
