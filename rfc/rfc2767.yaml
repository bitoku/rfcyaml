- title: __initial_text__
  contents:
  - ''
- title: 'Requests for Comments: 2767                                  H. Higuchi'
  contents:
  - "Requests for Comments: 2767                                  H. Higuchi\n   \
    \  Dual Stack Hosts using the \"Bump-In-the-Stack\" Technique (BIS)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   In the especially initial stage of the transition from IPv4 to IPv6,\n\
    \   it is hard to provide a complete set of IPv6 applications.  This memo\n  \
    \ proposes a mechanism of dual stack hosts using the technique called\n   \"Bump-in-the-Stack\"\
    \ in the IP security area. The mechanism allows the\n   hosts to communicate with\
    \ other IPv6 hosts using existing IPv4\n   applications.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   RFC1933 [TRANS-MECH] specifies transition mechanisms, including\
    \ dual\n   stack and tunneling, for the initial stage. Hosts and routers with\n\
    \   the transition mechanisms are also developed. But there are few\n   applications\
    \ for IPv6 [IPV6] as compared with IPv4 [IPV4] in which a\n   great number of\
    \ applications are available. In order to advance the\n   transition smoothly,\
    \ it is highly desirable to make the availability\n   of IPv6 applications increase\
    \ to the same level as IPv4.\n   Unfortunately, however, this is expected to take\
    \ a very long time.\n   This memo proposes a mechanism of dual stack hosts using\
    \ the\n   technique called \"Bump-in-the-Stack\" [BUMP] in the IP security area.\n\
    \   The technique inserts modules, which snoop data flowing between a\n   TCP/IPv4\
    \ module and network card driver modules and translate IPv4\n   into IPv6 and\
    \ vice versa, into the hosts, and makes them self-\n   translators. When they\
    \ communicate with the other IPv6 hosts, pooled\n   IPv4 addresses are assigned\
    \ to the IPv6 hosts internally, but the\n   IPv4 addresses never flow out from\
    \ them. Moreover, since the\n   assignment is automatically carried out using\
    \ DNS protocol, users do\n   not need to know whether target hosts are IPv6 ones.\
    \ That is, this\n   allows them to communicate with other IPv6 hosts using existing\
    \ IPv4\n   applications; thus it seems as if they were dual stack hosts with\n\
    \   applications for both IPv4 and IPv6. So they can expand the territory\n  \
    \ of dual stack hosts.  Furthermore they can co-exist with other\n   translators\
    \ because their roles are different.\n   This memo uses the words defined in [IPV4],\
    \ [IPV6], and [TRANS-MECH].\n"
- title: 2. Components
  contents:
  - "2. Components\n   Dual stack hosts defined in RFC1933 [TRANS-MECH] need applications,\n\
    \   TCP/IP modules and addresses for both IPv4 and IPv6. The proposed\n   hosts\
    \ in this memo have 3 modules instead of IPv6 applications, and\n   communicate\
    \ with other IPv6 hosts using IPv4 applications. They are a\n   translator, an\
    \ extension name resolver and an address mapper.\n   Figure 1 illustrates the\
    \ structure of the host in which they are\n   installed.\n         +----------------------------------------------------------+\n\
    \         |  +----------------------------------------------------+  |\n     \
    \    |  | IPv4 applications                                  |  |\n         |\
    \  +----------------------------------------------------+  |\n         |  +----------------------------------------------------+\
    \  |\n         |  | TCP/IPv4                                           |  |\n\
    \         |  |        +-------------------------------------------+  |\n     \
    \    |  |        |  +-----------+  +---------+  +------------+  |\n         |\
    \  |        |  | extension |  | address |  | translator |  |\n         |  |  \
    \      |  | name      |  | mapper  |  +------------+  |\n         |  |       \
    \ |  | resolver  |  |         |  +------------+  |\n         |  |        |  |\
    \           |  |         |  | IPv6       |  |\n         |  +--------+  +-----------+\
    \  +---------+  +------------+  |\n         |  +----------------------------------------------------+\
    \  |\n         |  | Network card drivers                               |  |\n\
    \         |  +----------------------------------------------------+  |\n     \
    \    +----------------------------------------------------------+\n         +----------------------------------------------------------+\n\
    \         |    Network cards                                         |\n     \
    \    +----------------------------------------------------------+\n          \
    \     Figure. 1 Structure of the proposed dual stack host\n"
- title: 2.1 Translator
  contents:
  - "2.1 Translator\n   It translates IPv4 into IPv6 and vice versa using the IP conversion\n\
    \   mechanism defined in [SIIT].\n   When receiving IPv4 packets from IPv4 applications,\
    \ it converts IPv4\n   packet headers into IPv6 packet headers, then fragments\
    \ the IPv6\n   packets (because header length of IPv6 is typically 20 bytes larger\n\
    \   than that of IPv4), and sends them to IPv6 networks. When receiving\n   IPv6\
    \ packets from the IPv6 networks, it works symmetrically to the\n   previous case,\
    \ except that there is no need to fragment the packets.\n"
- title: 2.2 Extension Name Resolver
  contents:
  - "2.2 Extension Name Resolver\n   It returns a \"proper\" answer in response to\
    \ the IPv4 application's\n   request.\n   The application typically sends a query\
    \ to a name server to resolve\n   'A' records for the target host name. It snoops\
    \ the query, then\n   creates another query to resolve both 'A' and 'AAAA' records\
    \ for the\n   host name, and sends the query to the server. If the 'A' record\
    \ is\n   resolved, it returns the 'A' record to the application as is. In the\n\
    \   case, there is no need for the IP conversion by the translator.  If\n   only\
    \ the 'AAAA' record is available, it requests the mapper to assign\n   an IPv4\
    \ address corresponding to the IPv6 address, then creates the\n   'A' record for\
    \ the assigned IPv4 address, and returns the 'A' record\n   to the application.\n\
    \   NOTE: This action is similar to that of the DNS ALG (Application\n   Layer\
    \ Gateway) used in [NAT-PT]. See also [NAT-PT].\n"
- title: 2.3 Address mapper
  contents:
  - "2.3 Address mapper\n   It maintains an IPv4 address spool. The spool, for example,\
    \ consists\n   of private addresses [PRIVATE]. Also, it maintains a table which\n\
    \   consists of pairs of an IPv4 address and an IPv6 address.\n   When the resolver\
    \ or the translator requests it to assign an IPv4\n   address corresponding to\
    \ an IPv6 address, it selects and returns an\n   IPv4 address out of the spool,\
    \ and registers a new entry into the\n   table dynamically. The registration occurs\
    \ in the following 2 cases:\n   (1) When the resolver gets only an 'AAAA' record\
    \ for the target host\n       name and there is not a mapping entry for the IPv6\
    \ address.\n   (2) When the translator receives an IPv6 packet and there is not\
    \ a\n       mapping entry for the IPv6 source address.\n   NOTE: There is only\
    \ one exception. When initializing the table, it\n   registers a pair of its own\
    \ IPv4 address and IPv6 address into the\n   table statically.\n"
- title: 3. Action Examples
  contents:
  - "3. Action Examples\n   This section describes action of the proposed dual stack\
    \ host called\n   \"dual stack,\" which communicates with an IPv6 host called\
    \ \"host6\"\n   using an IPv4 application.\n"
- title: 3.1 Originator behavior
  contents:
  - "3.1 Originator behavior\n   This subsection describes the originator behavior\
    \ of \"dual stack.\"\n   The communication is triggered by \"dual stack.\"\n \
    \  The application sends a query to its name server to resolve 'A'\n   records\
    \ for \"host6.\"\n   The resolver snoops the query, then creates another query\
    \ to resolve\n   both 'A' and 'AAAA' records for the host name, and sends it to\
    \ the\n   server. In this case, only the 'AAAA' record is resolved, so the\n \
    \  resolver requests the mapper to assign an IPv4 address corresponding\n   to\
    \ the IPv6 address.\n   NOTE: In the case of communication with an IPv4 host,\
    \ the 'A' record\n   is resolved and then the resolver returns it to the application\
    \ as\n   is. There is no need for the IP conversion as shown later.\n   The mapper\
    \ selects an IPv4 address out of the spool and returns it to\n   the resolver.\n\
    \   The resolver creates the 'A' record for the assigned IPv4 address and\n  \
    \ returns it to the application.\n   NOTE: See subsection 4.3 about the influence\
    \ on other hosts caused by\n   an IPv4 address assigned here.\n   The application\
    \ sends an IPv4 packet to \"host6.\"\n   The IPv4 packet reaches the translator.\
    \ The translator tries to\n   translate the IPv4 packet into an IPv6 packet but\
    \ does not know how\n   to translate the IPv4 destination address and the IPv4\
    \ source\n   address. So the translator requests the mapper to provide mapping\n\
    \   entries for them.\n   The mapper checks its mapping table and finds entries\
    \ for each of\n   them, and then returns the IPv6 destination address and the\
    \ IPv6\n   source address to the translator.\n   NOTE: The mapper will register\
    \ its own IPv4 address and IPv6 address\n   into the table beforehand. See subsection\
    \ 2.3.\n   The translator translates the IPv4 packet into an IPv6 packet then\n\
    \   fragments the IPv6 packet if necessary and sends it to an IPv6\n   network.\n\
    \   The IPv6 packet reaches \"host6.\" Then \"host6\" sends a new IPv6 packet\n\
    \   to \"dual stack.\"\n   The IPv6 packet reaches the translator in \"dual stack.\"\
    \n   The translator gets mapping entries for the IPv6 destination address\n  \
    \ and the IPv6 source address from the mapper in the same way as\n   before.\n\
    \   Then the translator translates the IPv6 packet into an IPv4 packet\n   and\
    \ tosses it up to the application.\n   The following diagram illustrates the action\
    \ described above:\n   \"dual stack\"                                        \
    \    \"host6\"\n   IPv4    TCP/  extension  address  translator  IPv6\n   appli-\
    \  IPv4  name       mapper\n   cation        resolver\n     |      |       | \
    \        |       |           |         |\n   <<Resolve an IPv4 address for \"\
    host6\".>>       |         |\n     |      |       |         |       |        \
    \   |         |\n     |------|------>|  Query of 'A' records for \"host6\".  \
    \  | Name\n     |      |       |         |       |           |         | Server\n\
    \     |      |       |---------|-------|-----------|---------|--->|\n     |  \
    \    |       |  Query of 'A' records and 'AAAA' for \"host6\"\n     |      | \
    \      |         |       |           |         |    |\n     |      |       |<--------|-------|-----------|---------|----|\n\
    \     |      |       |  Reply only with 'AAAA' record.       |\n     |      |\
    \       |         |       |           |         |\n     |      |       |<<Only\
    \ 'AAAA' record is resolved.>>    |\n     |      |       |         |       | \
    \          |         |\n     |      |       |-------->|  Request one IPv4 address\
    \   |\n     |      |       |         |  corresponding to the IPv6 address.\n \
    \    |      |       |         |       |           |         |\n     |      | \
    \      |         |<<Assign one IPv4 address.>> |\n     |      |       |      \
    \   |       |           |         |\n     |      |       |<--------|  Reply with\
    \ the IPv4 address.\n     |      |       |         |       |           |     \
    \    |\n     |      |       |<<Create 'A' record for the IPv4 address.>>\n   \
    \  |      |       |         |       |           |         |\n     |<-----|-------|\
    \  Reply with the 'A' record. |         |\n     |      |       |         |   \
    \    |           |         |\n                  Figure 2 Action of the originator\
    \ (1/2)\n   \"dual stack\"                                           \"host6\"\
    \n   IPv4    TCP/  extension  address  translator  IPv6\n   appli-  IPv4  name\
    \       mapper\n   cation        resolver\n     |      |       |         |   \
    \    |           |         |\n   <<Send an IPv4 packet to \"host6\".>>|      \
    \     |         |\n     |      |       |         |       |           |       \
    \  |\n     |======|=======|=========|======>|  An IPv4 packet.    |\n     |  \
    \    |       |         |       |           |         |\n     |      |       |\
    \         |<------|  Request IPv6 addresses\n     |      |       |         | \
    \      |  corresponding to the IPv4\n     |      |       |         |       | \
    \ addresses.         |\n     |      |       |         |       |           |  \
    \       |\n     |      |       |         |------>|  Reply with the IPv6|\n   \
    \  |      |       |         |       |  addresses.         |\n     |      |   \
    \    |         |       |           |         |\n     |      |       |        \
    \ |       |<<Translate IPv4 into IPv6.>>\n     |      |       |         |    \
    \   |           |         |\n     |      |       |An IPv6 packet.  |===========|========>|\n\
    \     |      |       |         |       |           |         |\n     |      |\
    \       |         |     <<Reply an IPv6 packet to\n     |      |       |     \
    \    |       \"dual stack\".>>       |\n     |      |       |         |      \
    \ |           |         |\n     |      |       |An IPv6 packet.  |<==========|=========|\n\
    \     |      |       |         |       |           |         |\n     |      |\
    \       |         |       |<<Translate IPv6 into IPv4.>>\n     |      |      \
    \ |         |       |           |         |\n     |<=====|=======|=========|=======|\
    \  An IPv4 packet.    |\n     |      |       |         |       |           | \
    \        |\n                  Figure 2 Action of the originator (2/2)\n"
- title: 3.2 Recipient behavior
  contents:
  - "3.2 Recipient behavior\n   This subsection describes the recipient behavior of\
    \ \"dual stack.\"\n   The communication is triggered by \"host6.\"\n   \"host6\"\
    \ resolves the 'AAAA' record for \"dual stack\" through its name\n   server, and\
    \ then sends an IPv6 packet to the IPv6 address.\n   The IPv6 packet reaches the\
    \ translator in \"dual stack.\"\n   The translator tries to translate the IPv6\
    \ packet into an IPv4 packet\n   but does not know how to translate the IPv6 destination\
    \ address and\n   the IPv6 source address. So the translator requests the mapper\
    \ to\n   provide mapping entries for them.\n   The mapper checks its mapping table\
    \ with each of them and finds a\n   mapping entry for the IPv6 destination address.\n\
    \   NOTE: The mapper will register its own IPv4 address and IPv6 address\n   into\
    \ the table beforehand. See subsection 2.3.\n   But there is not a mapping entry\
    \ for the IPv6 source address, so the\n   mapper selects an IPv4 address out of\
    \ the spool for it, and then\n   returns the IPv4 destination address and the\
    \ IPv4 source address to\n   the translator.\n   NOTE: See subsection 4.3 about\
    \ the influence on other hosts caused by\n   an IPv4 address assigned here.\n\
    \   The translator translates the IPv6 packet into an IPv4 packet and\n   tosses\
    \ it up to the application.\n   The application sends a new IPv4 packet to \"\
    host6.\"\n   The following behavior is the same as that described in subsection\n\
    \   3.1.\n   The following diagram illustrates the action described above:\n \
    \  \"dual stack\"                                           \"host6\"\n   IPv4\
    \    TCP/  extension  address  translator  IPv6\n   appli-  IPv4  name       mapper\n\
    \   cation        resolver\n     |      |       |         |       |          \
    \ |         |\n   <<Receive data from \"host6\".>>     |           |         |\n\
    \     |      |       |         |       |           |         |\n     |      |\
    \       |An IPv6 packet.  |<==========|=========|\n     |      |       |     \
    \    |       |           |         |\n     |      |       |         |<------|\
    \  Request IPv4 addresses\n     |      |       |         |       |  corresponding\
    \ to the IPv6\n     |      |       |         |       |  addresses.         |\n\
    \     |      |       |         |       |           |         |\n     |      |\
    \       |         |------>|  Reply with the IPv4|\n     |      |       |     \
    \    |       |  addresses.         |\n     |      |       |         |       |\
    \           |         |\n     |      |       |         |       |<<Translate IPv6\
    \ into IPv4.>>\n     |      |       |         |       |           |         |\n\
    \     |<=====|=======|=========|=======|  An IPv4 packet.    |\n     |      |\
    \       |         |       |           |         |\n   <<Reply an IPv4 packet to\
    \ \"host6\".>>           |         |\n     |      |       |         |       |\
    \           |         |\n     |======|=======|=========|======>|  An IPv4 packet.\
    \    |\n     |      |       |         |       |           |         |\n     |\
    \      |       |         |       |<<Translate IPv4 into IPv6.>>\n     |      |\
    \       |         |       |           |         |\n     |      |       |An IPv6\
    \ packet.  |===========|========>|\n     |      |       |         |       |  \
    \         |         |\n                     Figure 3 Action of the recipient\n"
- title: 4. Considerations
  contents:
  - "4. Considerations\n   This section considers some issues of the proposed dual\
    \ stack hosts.\n"
- title: 4.1 IP conversion
  contents:
  - "4.1 IP conversion\n   In common with NAT [NAT], IP conversion needs to translate\
    \ IP\n   addresses embedded in application layer protocols, which are\n   typically\
    \ found in FTP [FTP]. So it is hard to translate all such\n   applications completely.\n"
- title: 4.2 IPv4 address spool and mapping table
  contents:
  - "4.2 IPv4 address spool and mapping table\n   The spool, for example, consists\
    \ of private addresses [PRIVATE]. So a\n   large address space can be used for\
    \ the spool. Nonetheless, IPv4\n   addresses in the spool will be exhausted and\
    \ cannot be assigned to\n   IPv6 target hosts, if the host communicates with a\
    \ great number of\n   other IPv6 hosts and the mapper never frees entries registered\
    \ into\n   the mapping table once. To solve the problem, for example, it is\n\
    \   desirable for the mapper to free the oldest entry in the mapping\n   table\
    \ and re-use the IPv4 address for creating a new entry.\n"
- title: 4.3 Internally assigned IPv4 addresses
  contents:
  - "4.3 Internally assigned IPv4 addresses\n   IPv4 addresses, which are internally\
    \ assigned to IPv6 target hosts\n   out of the spool, never flow out from the\
    \ host, and so do not\n   negatively affect other hosts.\n"
- title: 5. Applicability and Limitations
  contents:
  - "5. Applicability and Limitations\n   This section considers applicability and\
    \ limitations of the proposed\n   dual stack hosts.\n"
- title: 5.1 Applicability
  contents:
  - "5.1 Applicability\n   The mechanism can be useful for users in the especially\
    \ initial stage\n   where some applications not modified into IPv6 remain. And\
    \ it can\n   also help users who cannot upgrade their certain applications for\n\
    \   some reason after all applications have been modified. The reason is\n   that\
    \ it allows hosts to communicate with IPv6 hosts using existing\n   IPv4 applications,\
    \ and that they can get connectivity for both IPv4\n   and IPv6 even if they do\
    \ not have IPv6 applications as a result.\n   Note that it can also work in conjunction\
    \ with a complete IPv6 stack.\n   They can communicate with both IPv4 hosts and\
    \ IPv6 hosts using IPv4\n   applications via the mechanism, and can also communicate\
    \ with IPv6\n   hosts using IPv6 applications via the complete IPv6 stack.\n"
- title: 5.2 Limitations
  contents:
  - "5.2 Limitations\n   The mechanism is valid only for unicast communication, but\
    \ invalid\n   for multicast communication. Multicast communication needs another\n\
    \   mechanism.\n   It allows hosts to communicate with IPv6 hosts using existing\
    \ IPv4\n   applications, but this can not be applied to IPv4 applications which\n\
    \   use any IPv4 option since it is impossible to translate IPv4 options\n   into\
    \ IPv6. Similarly it is impossible to translate any IPv6 option\n   headers into\
    \ IPv4, except for fragment headers and routing headers.\n   So IPv6 inbound communication\
    \ having the option headers may be\n   rejected.\n   In common with NAT [NAT],\
    \ IP conversion needs to translate IP\n   addresses embedded in application layer\
    \ protocols, which are\n   typically found in FTP [FTP]. So it is hard to translate\
    \ all such\n   applications completely.\n   It may be impossible that the hosts\
    \ using the mechanism utilize the\n   security above network layer since the data\
    \ may carry IP addresses.\n   Finally it can not combine with secure DNS since\
    \ the extension name\n   resolver can not handle the protocol.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   This section considers security of the proposed\
    \ dual stack hosts.\n   The hosts can utilize the security of all layers like\
    \ ordinary IPv4\n   communication when they communicate with IPv4 hosts using\
    \ IPv4\n   applications via the mechanism. Likewise they can utilize the\n   security\
    \ of all layers like ordinary IPv6 communication when they\n   communicate with\
    \ IPv6 hosts using IPv6 applications via the complete\n   IPv6 stack. However,\
    \ unfortunately, they can not utilize the security\n   above network layer when\
    \ they communicate with IPv6 hosts using IPv4\n   applications via the mechanism.\
    \ The reason is that when the protocol\n   data with which IP addresses are embedded\
    \ is encrypted, or when the\n   protocol data is encrypted using IP addresses\
    \ as keys, it is\n   impossible for the mechanism to translate the IPv4 data into\
    \ IPv6 and\n   vice versa. Therefore it is highly desirable to upgrade to the\n\
    \   applications modified into IPv6 for utilizing the security at\n   communication\
    \ with IPv6 hosts.\n"
- title: 7. References
  contents:
  - "7. References\n   [SIIT]       Nordmark, E., \"Stateless IP/ICMP Translator (SIIT)\"\
    , RFC\n                2765, February 2000.\n   [IPV4]       Postel, J., \"Internet\
    \ Protocol\", STD 5, RFC 791,\n                September 1981.\n   [FTP]     \
    \   Postel, J. and J. Reynolds, \"File Transfer Protocol\",\n                STD\
    \ 9, RFC 959, October 1985.\n   [NAT]        Kjeld B. and P. Francis, \"The IP\
    \ Network Address\n                Translator (NAT)\", RFC 1631, May 1994.\n \
    \  [IPV6]       Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n  \
    \              (IPv6) Specification\", RFC 2460, December 1998.\n   [PRIVATE]\
    \    Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.\n              \
    \  J. and E. Lear, \"Address Allocation for Private\n                Internets\"\
    , BCP 5, RFC 1918, February 1996.\n   [TRANS-MECH] Gilligan, R. and E. Nordmark,\
    \ \"Transition Mechanisms for\n                IPv6 Hosts and Routers\", RFC 1933,\
    \ April 1996.\n   [BUMP]       D.A. Wagner and S.M. Bellovin, \"A Bump in the\
    \ Stack\n                Encryptor for MS-DOS Systems\", The 1996 Symposium on\n\
    \                Network and Distributed Systems Security (SNDSS'96)\n       \
    \         Proceedings.\n   [NAT-PT]     Tsirtsis, G. and P. Srisuresh, \"Network\
    \ Address\n                Translation - Protocol Translation (NAT-PT)\", RFC\
    \ 2766,\n                February 2000.\n"
- title: 8. Acknowledgements
  contents:
  - "8. Acknowledgements\n   The authors gratefully acknowledge the many helpful suggestions\
    \ of\n   the members of the WIDE Project, Kazuhiko YAMAMOTO, Jun MURAI,\n   Munechika\
    \ SUMIKAWA, Ken WATANABE, and Takahisa MIYAMOTO, at large.\n"
- title: 9. Authors' Addresses
  contents:
  - "9. Authors' Addresses\n   Kazuaki TSUCHIYA\n   Enterprise Server Division, Hitachi,\
    \ Ltd.\n   810 Shimoimaizumi, Ebina-shi, Kanagawa-ken, 243-0435 JAPAN\n   Phone:\
    \ +81-462-32-2121\n   Fax:   +81-462-35-8324\n   EMail: tsuchi@ebina.hitachi.co.jp\n\
    \   Hidemitsu HIGUCHI\n   Enterprise Server Division, Hitachi, Ltd.\n   810 Shimoimaizumi,\
    \ Ebina-shi, Kanagawa-ken, 243-0435 JAPAN\n   Phone: +81-462-32-2121\n   Fax:\
    \   +81-462-35-8324\n   EMail: h-higuti@ebina.hitachi.co.jp\n   Yoshifumi ATARASHI\n\
    \   Enterprise Server Division, Hitachi, Ltd.\n   810 Shimoimaizumi, Ebina-shi,\
    \ Kanagawa-ken, 243-0435 JAPAN\n   Phone: +81-462-32-2121\n   Fax:   +81-462-35-8324\n\
    \   EMail: atarashi@ebina.hitachi.co.jp\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
