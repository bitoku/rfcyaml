- title: __initial_text__
  contents:
  - '                   IP Authentication using Keyed SHA

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document defines an Experimental Protocol for the\
    \ Internet\n   community.  This does not specify an Internet standard of any kind.\n\
    \   Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the use of keyed SHA with the IP\n   Authentication\
    \ Header.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Authentication Header (AH) [RFC-1826] provides integrity\
    \ and\n   authentication for IP datagrams.  This specification describes the AH\n\
    \   use of keys with the Secure Hash Algorithm (SHA) [FIPS-180-1].\n      It should\
    \ be noted that this document specifies a newer version of\n      the SHA than\
    \ that described in [FIPS-180], which was flawed.  The\n      older version is\
    \ not interoperable with the newer version.\n   This document assumes that the\
    \ reader is familiar with the related\n   document \"Security Architecture for\
    \ the Internet Protocol\" [RFC-\n   1825], which defines the overall security\
    \ plan for IP, and provides\n   important background for this specification.\n"
- title: 1.1.  Keys
  contents:
  - "1.1.  Keys\n   The secret authentication key shared between the communicating\n\
    \   parties SHOULD be a cryptographically strong random number, not a\n   guessable\
    \ string of any sort.\n   The shared key is not constrained by this transform\
    \ to any particular\n   size.  Lengths of up to 160 bits MUST be supported by\
    \ the\n   implementation, although any particular key may be shorter.  Longer\n\
    \   keys are encouraged.\n"
- title: 1.2.  Data Size
  contents:
  - "1.2.  Data Size\n   SHA's 160-bit output is naturally 32-bit aligned.  However,\
    \ many\n   implementations require 64-bit alignment of the following headers,\
    \ in\n   which case an additional 32 bits of padding is added, either before\n\
    \   or after the SHA output.\n   The size and position of this padding are negotiated\
    \ as part of the\n   key management.  Padding bits are filled with unspecified\n\
    \   implementation dependent (random) values, which are ignored on\n   receipt.\n"
- title: 1.3.  Performance
  contents:
  - "1.3.  Performance\n   Preliminary results indicate that SHA is 62% as fast as\
    \ MD5, and 80%\n   as fast as DES hashing.  That is,\n                       \
    \    SHA < DES < MD5\n   Nota Bene:\n      Suggestions are sought on alternative\
    \ authentication algorithms\n      that have significantly faster throughput,\
    \ are not patent-\n      encumbered, and still retain adequate cryptographic strength.\n"
- title: 2.  Calculation
  contents:
  - "2.  Calculation\n   The 160-bit digest is calculated as described in [FIPS-180-1].\
    \  At\n   the time of writing, a portable C language implementation of SHA is\n\
    \   available via FTP from ftp://rand.org/pub/jim/sha.tar.gz.\n   The form of\
    \ the authenticated message is\n            key, keyfill, datagram, key, SHAfill\n\
    \   First, the variable length secret authentication key is filled to the\n  \
    \ next 512-bit boundary, using the same pad with length technique\n   defined\
    \ for SHA.\n   Then, the filled key is concatenated with (immediately followed\
    \ by)\n   the invariant fields of the entire IP datagram (variant fields are\n\
    \   zeroed), concatenated with (immediately followed by) the original\n   variable\
    \ length key again.\n   A trailing pad with length to the next 512-bit boundary\
    \ for the\n   entire message is added by SHA itself.  The 160-bit SHA digest is\n\
    \   calculated, and the result is inserted into the Authentication Data\n   field.\n\
    \   Discussion:\n      The leading copy of the key is padded in order to facilitate\n\
    \      copying of the key at machine boundaries without requiring re-\n      alignment\
    \ of the following datagram.  The padding technique\n      includes a length which\
    \ protects arbitrary length keys.  Filling\n      to the SHA block size also allows\
    \ the key to be prehashed to avoid\n      the physical copy in some implementations.\n\
    \      The trailing copy of the key is not necessary to protect against\n    \
    \  appending attacks, as the IP datagram already includes a total\n      length\
    \ field.  It reintroduces mixing of the entire key, providing\n      minimal protection\
    \ for very long and very short datagrams, and\n      marginal robustness against\
    \ possible attacks on the IP length\n      field itself.\n      When the implementation\
    \ adds the keys and padding in place before\n      and after the IP datagram,\
    \ care must be taken that the keys and/or\n      padding are not sent over the\
    \ link by the link driver.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Users need to understand that the quality of the\
    \ security provided by\n   this specification depends completely on the strength\
    \ of the SHA hash\n   function, the correctness of that algorithm's implementation,\
    \ the\n   security of the key management mechanism and its implementation, the\n\
    \   strength of the key [CN94], and upon the correctness of the\n   implementations\
    \ in all of the participating nodes.\n   The SHA algorithm was originally derived\
    \ from the MD4 algorithm\n   [RFC-1320].  A flaw was apparently found in the original\n\
    \   specification of SHA [FIPS-180], and this document specifies the use\n   of\
    \ a corrected version [FIPS-180-1].\n   At the time of writing of this document,\
    \ there are no known flaws in\n   the SHA algorithm.  That is, there are no known\
    \ attacks on SHA or any\n   of its components that are better than brute force,\
    \ and the 160-bit\n   hash output by SHA is substantially more resistant to brute\
    \ force\n   attacks than the 128-bit hash size of MD4 and MD5.\n   However, as\
    \ the flaw in the original SHA algorithm shows,\n   cryptographers are fallible,\
    \ and there may be substantial\n   deficiencies yet to be discovered in the algorithm.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Some of the text of this specification was derived from\
    \ work by\n   Randall Atkinson for the SIP, SIPP, and IPv6 Working Groups.\n \
    \  Preliminary performance analysis was provided by Joe Touch.\n   Comments should\
    \ be submitted to the ipsec@ans.net mailing list.\n"
- title: References
  contents:
  - "References\n   [CN94]   John M. Carroll & Sri Nudiati, \"On Weak Keys and Weak\
    \ Data:\n            Foiling the Two Nemeses\", Cryptologia, Vol. 18 No. 23 pp.\n\
    \            253-280, July 1994.\n   [FIPS-180]\n            \"Secure Hash Standard\"\
    , Computer Systems Laboratory,\n            National Institute of Standards and\
    \ Technology, U.S.\n            Department Of Commerce, May 1993.\n          \
    \  Also known as: 58 Fed Reg 27712 (1993).\n   [FIPS-180-1]\n            \"Secure\
    \ Hash Standard\", National Institute of Standards and\n            Technology,\
    \ U.S. Department Of Commerce, April 1995.\n            Also known as: 59 Fed\
    \ Reg 35317 (1994).\n   [RFC-1320]\n            Ronald Rivest, \"The MD4 Message-Digest\
    \ Algorithm\", RFC-1320,\n            April 1992.\n   [RFC-1700]\n           \
    \ Reynolds, J., and J. Postel, \"Assigned Numbers\", STD 2, RFC\n            1700,\
    \ USC/Information Sciences Institute, October 1994.\n   [RFC-1825]\n         \
    \   Atkinson, R., \"Security Architecture for the Internet\n            Protocol\"\
    , RFC-1825, Naval Research Laboratory, July 1995.\n   [RFC-1826]\n           \
    \ Atkinson, R., \"IP Authentication Header\", RFC-1826, Naval\n            Research\
    \ Laboratory, July 1995.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Questions about this memo can also be directed to:\n   \
    \   Perry Metzger\n      Piermont Information Systems Inc.\n      160 Cabrini\
    \ Blvd., Suite #2\n      New York, NY  10033\n      perry@piermont.com\n     \
    \ William Allen Simpson\n      Daydreamer\n      Computer Systems Consulting Services\n\
    \      1384 Fontaine\n      Madison Heights, Michigan  48071\n      Bill.Simpson@um.cc.umich.edu\n\
    \          bsimpson@MorningStar.com\n"
