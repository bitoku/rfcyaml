- title: __initial_text__
  contents:
  - '                  Trust Anchor Management Requirements

    '
- title: Abstract
  contents:
  - "Abstract\n   A trust anchor represents an authoritative entity via a public key\n\
    \   and associated data.  The public key is used to verify digital\n   signatures,\
    \ and the associated data is used to constrain the types of\n   information for\
    \ which the trust anchor is authoritative.  A relying\n   party uses trust anchors\
    \ to determine if a digitally signed object is\n   valid by verifying a digital\
    \ signature using the trust anchor's\n   public key, and by enforcing the constraints\
    \ expressed in the\n   associated data for the trust anchor.  This document describes\
    \ some\n   of the problems associated with the lack of a standard trust anchor\n\
    \   management mechanism and defines requirements for data formats and\n   push-based\
    \ protocols designed to address these problems.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6024.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Terminology  . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n     1.2.  Requirements Notation  . . . . . . . . . . . . . .\
    \ . . . .  4\n   2.  Problem Statement  . . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n   3.  Requirements . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  6\n     3.1.  Transport Independence . . . . . . . . . . . . . . . . .\
    \ .  6\n     3.2.  Basic Management Operations  . . . . . . . . . . . . . . .\
    \  7\n     3.3.  Management Targets . . . . . . . . . . . . . . . . . . . .  7\n\
    \     3.4.  Delegation of TA Manager Authority . . . . . . . . . . . .  8\n  \
    \   3.5.  RFC 5280 Support . . . . . . . . . . . . . . . . . . . . .  9\n    \
    \ 3.6.  Support Purposes other than Certification Path\n           Validation\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  9\n     3.7.  Trust Anchor\
    \ Format  . . . . . . . . . . . . . . . . . . . 10\n     3.8.  Source Authentication\
    \  . . . . . . . . . . . . . . . . . . 10\n     3.9.  Reduce Reliance on Out-of-Band\
    \ Trust Mechanisms  . . . . . 11\n     3.10. Replay Detection . . . . . . . .\
    \ . . . . . . . . . . . . . 11\n     3.11. Compromise or Disaster Recovery  .\
    \ . . . . . . . . . . . . 12\n   4.  Security Considerations  . . . . . . . .\
    \ . . . . . . . . . . . 12\n   5.  References . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 13\n     5.1.  Normative References . . . . . . . . . .\
    \ . . . . . . . . . 13\n     5.2.  Informative References . . . . . . . . . .\
    \ . . . . . . . . 13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Digital signatures are used in many applications.  For digital\n\
    \   signatures to provide integrity and authentication, the public key\n   used\
    \ to verify the digital signature must be \"trusted\", i.e.,\n   accepted by a\
    \ relying party (RP) as appropriate for use in the given\n   context.  A public\
    \ key used to verify a signature must be configured\n   as a trust anchor (TA)\
    \ or contained in a certificate that can be\n   transitively verified by a certification\
    \ path terminating at a trust\n   anchor.  A trust anchor is a public key and\
    \ associated data used by a\n   relying party to validate a signature on a signed\
    \ object where the\n   object is either:\n   o  a public key certificate that\
    \ begins a certification path\n      terminated by a signature certificate or\
    \ encryption certificate\n   o  an object, other than a public key certificate\
    \ or certificate\n      revocation list (CRL), that cannot be validated via use\
    \ of a\n      certification path\n   Trust anchors have only local significance,\
    \ i.e., each RP is\n   configured with a set of trust anchors, either by the RP\
    \ or by an\n   entity that manages TAs in the context in which the RP operates.\
    \  The\n   associated data defines the scope of a trust anchor by imposing\n \
    \  constraints on the signatures that the trust anchor may be used to\n   verify.\
    \  For example, if a trust anchor is used to verify signatures\n   on X.509 certificates,\
    \ these constraints may include a combination of\n   name spaces, certificate\
    \ policies, or application/usage types.\n   One use of digital signatures is the\
    \ verification of signatures on\n   firmware packages loaded into hardware modules,\
    \ such as cryptographic\n   modules, cable boxes, routers, etc.  Since such devices\
    \ are often\n   managed remotely, the devices must be able to authenticate the\
    \ source\n   of management interactions and can use trust anchors to perform this\n\
    \   authentication.  However, trust anchors require management as well.\n   Other\
    \ applications requiring trust anchor management include web\n   browsers (which\
    \ use trust anchors when authenticating web servers)\n   and email clients (which\
    \ use trust anchors when validating signed\n   email and when authenticating recipients\
    \ of encrypted email).\n   All applications that rely upon digital signatures\
    \ rely upon some\n   means of managing one or more sets of trust anchors.  Each\
    \ set of\n   trust anchors is referred to in this document as a trust anchor\n\
    \   store.  Often, the means of managing trust anchor stores are\n   application-specific\
    \ and rely upon out-of-band means to establish and\n   maintain trustworthiness.\
    \  An application may use multiple trust\n   anchor stores, and a given trust\
    \ anchor store may be used by multiple\n   applications.  Each trust anchor store\
    \ is managed by at least one TA\n   manager; a TA manager may manage multiple\
    \ TA stores.\n   The requirements stated in this document were prepared prior\
    \ to the\n   publication of [RFC5914] and [RFC5934].  The document was not\n \
    \  published at that time to allow for changes in requirements during\n   the\
    \ development of the associated technical specifications.  The\n   requirements\
    \ described below are those that were considered during\n   the development of\
    \ [RFC5914] and [RFC5934].\n   This section provides an introduction and defines\
    \ basic terminology.\n   Section 2 describes problems with current trust anchor\
    \ management\n   methods.  Sections 3 and 4 describe requirements and security\n\
    \   considerations for a trust anchor management solution.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The following terms are defined in order to provide a vocabulary\
    \ for\n   describing requirements for trust anchor management.\n   Trust Anchor:\
    \   A trust anchor represents an authoritative entity via\n      a public key\
    \ and associated data.  The public key is used to\n      verify digital signatures,\
    \ and the associated data is used to\n      constrain the types of information\
    \ for which the trust anchor is\n      authoritative.  A relying party uses trust\
    \ anchors to determine if\n      a digitally signed object is valid by verifying\
    \ a digital\n      signature using the trust anchor's public key, and by enforcing\n\
    \      the constraints expressed in the associated data for the trust\n      anchor.\n\
    \   Trust Anchor Manager:   A trust anchor manager is an entity\n      responsible\
    \ for managing the contents of a trust anchor store.\n      Throughout this document,\
    \ each trust anchor manager is assumed to\n      be represented as or delegated\
    \ by a distinct trust anchor.\n   Trust Anchor Store:   A trust anchor store is\
    \ a set of one or more\n      trust anchors stored in a device.  A trust anchor\
    \ store may be\n      managed by one or more trust anchor managers.  A device\
    \ may have\n      more than one trust anchor store, each of which may be used\
    \ by one\n      or more applications.\n"
- title: 1.2.  Requirements Notation
  contents:
  - "1.2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Problem Statement
  contents:
  - "2.  Problem Statement\n   Trust anchors are used to support many application\
    \ scenarios.  Most\n   Internet browsers and email clients use trust anchors when\n\
    \   authenticating Transport Layer Security (TLS) sessions, verifying\n   signed\
    \ email, and generating encrypted email by validating a\n   certification path\
    \ to a server's certificate, an email originator's\n   certificate, or an email\
    \ recipient's certificate, respectively.  Many\n   software distributions are\
    \ digitally signed to enable authentication\n   of the software source prior to\
    \ installation.  Trust anchors that\n   support these applications are typically\
    \ installed as part of the\n   operating system (OS) or application, installed\
    \ using an enterprise\n   configuration management system, or installed directly\
    \ by an OS or\n   application user.\n   Trust anchors are typically stored in\
    \ application-specific or\n   OS-specific trust anchor stores.  Often, a single\
    \ machine may have a\n   number of different trust anchor stores that may not\
    \ be synchronized.\n   Reviewing the contents of a particular trust anchor store\
    \ typically\n   involves use of a proprietary tool that interacts with a particular\n\
    \   type of trust store.\n   The presence of a trust anchor in a particular store\
    \ often conveys\n   implicit authorization to validate signatures for any contexts\
    \ from\n   which the store is accessed.  For example, the public key of a\n  \
    \ timestamp authority (TSA) may be installed in a trust anchor store to\n   validate\
    \ signatures on timestamps [RFC3161].  However, if the store\n   containing this\
    \ TA is used by multiple applications that serve\n   different purposes, the same\
    \ key may be used (inappropriately) to\n   validate other types of objects such\
    \ as certificates or Online\n   Certificate Status Protocol (OCSP) responses.\
    \  Prior to publication\n   of [RFC5914], there was no standard general-purpose\
    \ mechanism for\n   limiting the applicability (scope) of a trust anchor.  A common\n\
    \   practice to address this problem is to place different TAs in\n   different\
    \ stores and limit the set of applications that access a\n   given TA store.\n\
    \   Trust relationships between Public Key Infrastructures (PKIs) are\n   negotiated\
    \ by policy authorities.  Negotiations frequently require\n   significant time\
    \ to ensure all participating parties' requirements\n   are satisfied.  These\
    \ requirements are expressed, to some extent, in\n   public key certificates via\
    \ policy constraints, name constraints,\n   etc.  In order for these requirements\
    \ to be enforced, trust anchor\n   stores must be managed in accord with policy\
    \ authority intentions.\n   Otherwise, the constraints defined in a cross-certificate\
    \ could be\n   circumvented by recognizing the subject of the cross certificate\
    \ as a\n   trust anchor, which would enable path processing implementations to\n\
    \   avoid the cross-certificate.\n   Trust anchors are often represented as self-signed\
    \ certificates,\n   which provide no useful means of establishing the validity\
    \ of the\n   information contained in the certificate.  Confidence in the\n  \
    \ integrity of a trust anchor is typically established through out-of-\n   band\
    \ means, often by checking the \"fingerprint\" (one-way hash) of the\n   self-signed\
    \ certificate with an authoritative source.  Routine trust\n   anchor rekey operations\
    \ typically require similar out-of-band checks,\n   though in-band rekey of a\
    \ trust anchor is supported by the\n   Certificate Management Protocol (CMP) [RFC4210].\
    \  Ideally, only the\n   initial set of trust anchors are installed in a particular\
    \ trust\n   anchor store should require out-of-band verification, particularly\n\
    \   when the costs of performing out-of-band checks commensurate with the\n  \
    \ security requirements of applications using the trust anchor store\n   are high.\n\
    \   Despite the prevalent use of trust anchors, there is neither a\n   standard\
    \ means for discovering the set of trust anchors installed in\n   a particular\
    \ trust anchor store nor a standard means of managing\n   those trust anchors.\
    \  The remainder of this document describes\n   requirements for a solution to\
    \ this problem along with some security\n   considerations.\n"
- title: 3.  Requirements
  contents:
  - "3.  Requirements\n   This section describes the requirements for a trust anchor\
    \ management\n   protocol.  Requirements are provided for trust anchor contents\
    \ as\n   well as for trust anchor store management operations.\n"
- title: 3.1.  Transport Independence
  contents:
  - '3.1.  Transport Independence

    '
- title: 3.1.1.  Functional Requirements
  contents:
  - "3.1.1.  Functional Requirements\n   A general-purpose solution for the management\
    \ of trust anchors MUST\n   be transport independent in order to apply to a range\
    \ of device\n   communications environments.  It MUST work in both session-oriented\n\
    \   and store-and-forward communications environments as well as in both\n   push\
    \ and pull distribution models.  To accommodate both communication\n   models\
    \ in a uniform fashion, connectionless integrity and data origin\n   authentication\
    \ for TA transactions MUST be provided at the\n   application layer.  Confidentiality\
    \ MAY be provided for such\n   transactions.\n"
- title: 3.1.2.  Rationale
  contents:
  - "3.1.2.  Rationale\n   Not all devices that use trust anchors are available for\
    \ online\n   management operations; some devices may require manual interaction\n\
    \   for trust anchor management.  Data origin authentication and\n   integrity\
    \ are required to ensure that the transaction has not been\n   modified en route.\
    \  Only connectionless integrity is required, for\n   compatibility with store-and-forward\
    \ contexts.\n"
- title: 3.2.  Basic Management Operations
  contents:
  - '3.2.  Basic Management Operations

    '
- title: 3.2.1.  Functional Requirements
  contents:
  - "3.2.1.  Functional Requirements\n   At a minimum, a protocol used for trust anchor\
    \ management MUST enable\n   a trust anchor manager to perform the following operations:\n\
    \   o  Determine which trust anchors are installed in a particular trust\n   \
    \   anchor store\n   o  Add one or more trust anchors to a trust anchor store\n\
    \   o  Remove one or more trust anchors from a trust anchor store\n   o  Replace\
    \ an entire trust anchor store\n   A trust anchor management protocol MUST provide\
    \ support for these\n   basic operations; however, not all implementations must\
    \ support each\n   option.  For example, some implementations may support only\n\
    \   replacement of trust anchor stores.\n"
- title: 3.2.2.  Rationale
  contents:
  - "3.2.2.  Rationale\n   These requirements describe the core operations required\
    \ to manage\n   the contents of a trust anchor store.  An edit operation was omitted\n\
    \   for the sake of simplicity, with consecutive remove and add\n   operations\
    \ used for this purpose.  A single add or remove operation\n   can act upon more\
    \ than one trust anchor to avoid unnecessary round\n   trips and are provided\
    \ to avoid the need to always replace an entire\n   trust anchor store.  Trust\
    \ anchor store replacement may be useful as\n   a simple, higher-bandwidth alternative\
    \ to add and remove operations.\n"
- title: 3.3.  Management Targets
  contents:
  - '3.3.  Management Targets

    '
- title: 3.3.1.  Functional Requirements
  contents:
  - "3.3.1.  Functional Requirements\n   A protocol for TA management MUST allow a\
    \ TA management transaction\n   to be directed to:\n      All TA stores for which\
    \ the manager is responsible\n      An enumerated list of one or more named groups\
    \ of trust anchor\n      stores\n      An individual trust anchor store\n"
- title: 3.3.2.  Rationale
  contents:
  - "3.3.2.  Rationale\n   Connections between PKIs can be accomplished using different\
    \ means.\n   Unilateral or bilateral cross-certification can be performed, or\
    \ a\n   community may simply elect to explicitly accept a trust anchor from\n\
    \   another community.  Typically, these decisions occur at the\n   enterprise\
    \ level.  In some scenarios, it can be useful to establish\n   these connections\
    \ for a small community within an enterprise.\n   Enterprise-wide mechanisms such\
    \ as cross-certificates are ill-suited\n   for this purpose since certificate\
    \ revocation or expiration affects\n   the entire enterprise.\n   A trust anchor\
    \ management protocol can address this issue by\n   supporting limited installation\
    \ of trust anchors (i.e., installation\n   of TAs in subsets of the enterprise\
    \ user community), and by\n   supporting expression of constraints on trust anchor\
    \ use by relying\n   parties.  Limited installation requires the ability to identify\
    \ the\n   members of the community that are intended to rely upon a particular\n\
    \   trust anchor, as well as the ability to query and report on the\n   contents\
    \ of trust anchor stores.  Trust anchor constraints can be\n   used to represent\
    \ the limitations that might otherwise be expressed\n   in a cross-certificate,\
    \ and limited installation ensures the\n   recognition of the trust anchor does\
    \ not necessarily encompass an\n   entire enterprise.\n   Trust anchor configurations\
    \ may be uniform across an enterprise, or\n   they may be unique to a single application\
    \ or small set of\n   applications.  Many devices and some applications utilize\
    \ multiple\n   trust anchor stores.  By providing means of addressing a specific\n\
    \   store or collections of stores, a trust anchor management protocol\n   can\
    \ enable efficient management of all stores under a trust anchor\n   manager's\
    \ control.\n"
- title: 3.4.  Delegation of TA Manager Authority
  contents:
  - '3.4.  Delegation of TA Manager Authority

    '
- title: 3.4.1.  Functional Requirements
  contents:
  - "3.4.1.  Functional Requirements\n   A trust anchor management protocol MUST enable\
    \ secure transfer of\n   control of a trust anchor store from one trust anchor\
    \ manager to\n   another.  It also SHOULD enable delegation for specific operations\n\
    \   without requiring delegation of the overall trust anchor management\n   capability\
    \ itself.\n"
- title: 3.4.2.  Rationale
  contents:
  - "3.4.2.  Rationale\n   Trust anchor manager rekey is one type of transfer that\
    \ must be\n   supported.  In this case, the new key will be assigned the same\n\
    \   privileges as the old key.\n   Creation of trust anchors for specific purposes,\
    \ such as firmware\n   signing, is another example of delegation.  For example,\
    \ a trust\n   anchor manager may delegate only the authority to sign firmware\
    \ to an\n   entity, but disallow further delegation of that privilege, or the\n\
    \   trust anchor manager may allow its delegate to further delegate\n   firmware\
    \ signing authority to other entities.\n"
- title: 3.5.  RFC 5280 Support
  contents:
  - '3.5.  RFC 5280 Support

    '
- title: 3.5.1.  Functional Requirements
  contents:
  - "3.5.1.  Functional Requirements\n   A trust anchor management protocol MUST enable\
    \ management of trust\n   anchors that will be used to validate certification\
    \ paths and CRLs in\n   accordance with [RFC5280] and [RFC5055].  A trust anchor\
    \ format MUST\n   enable the representation of constraints that influence certification\n\
    \   path validation or otherwise establish the scope of usage of the\n   trust\
    \ anchor public key.  Examples of such constraints are name\n   constraints, certificate\
    \ policies, and key usage.\n"
- title: 3.5.2.  Rationale
  contents:
  - "3.5.2.  Rationale\n   Certification path validation is one of the most common\
    \ applications\n   of trust anchors.  The rules for using trust anchors for path\n\
    \   validation are established in [RFC5280].  [RFC5055] describes the use\n  \
    \ of trust anchors for delegated path validation.  Trust anchors used\n   to validate\
    \ certification paths are responsible for providing,\n   possibly through a delegate,\
    \ the revocation status information of\n   certificates it issues; this is often\
    \ accomplished by signing a CRL.\n"
- title: 3.6.  Support Purposes other than Certification Path Validation
  contents:
  - '3.6.  Support Purposes other than Certification Path Validation

    '
- title: 3.6.1.  Functional Requirements
  contents:
  - "3.6.1.  Functional Requirements\n   A trust anchor management protocol MUST enable\
    \ management of trust\n   anchors that can be used for purposes other than certification\
    \ path\n   validation, including trust anchors that cannot be used for\n   certification\
    \ path validation.  It SHOULD be possible to authorize a\n   trust anchor to delegate\
    \ authority (to other TAs or certificate\n   holders) and to prevent a trust anchor\
    \ from delegating authority.\n"
- title: 3.6.2.  Rationale
  contents:
  - "3.6.2.  Rationale\n   Trust anchors are used to validate a variety of signed\
    \ objects, not\n   just public key certificates and CRLs.  For example, a trust\
    \ anchor\n   may be used to verify firmware packages [RFC4108], OCSP responses\n\
    \   [RFC2560], Server-Based Certificate Validation Protocol (SCVP)\n   responses\
    \ [RFC5055], or timestamps [RFC3161].  TAs that are\n   authorized for use with\
    \ some or all of these other types of\n   operations may not be authorized to\
    \ verify public key certificates or\n   CRLs.  Thus, it is important to be able\
    \ to impose constraints on the\n   ways in which a given TA is employed.\n"
- title: 3.7.  Trust Anchor Format
  contents:
  - '3.7.  Trust Anchor Format

    '
- title: 3.7.1.  Functional Requirements
  contents:
  - "3.7.1.  Functional Requirements\n   Minimally, a trust anchor management protocol\
    \ MUST support management\n   of trust anchors represented as self-signed certificates\
    \ and trust\n   anchors represented as a distinguished name, public key information,\n\
    \   and, optionally, associated data.  The definition of a trust anchor\n   MUST\
    \ include a public key, a public key algorithm, and, if necessary,\n   public\
    \ key parameters.  When the public key is used to validate\n   certification paths\
    \ or CRLs, a distinguished name also MUST be\n   included per [RFC5280].  A trust\
    \ anchor format SHOULD enable\n   specification of a public key identifier to\
    \ enable other applications\n   of the trust anchor, for example, verification\
    \ of data signed using\n   the Cryptographic Message Syntax (CMS) SignedData structure\n\
    \   [RFC5652].  A trust anchor format also SHOULD enable the\n   representation\
    \ of constraints that can be applied to restrict the use\n   of a trust anchor.\n"
- title: 3.7.2.  Rationale
  contents:
  - "3.7.2.  Rationale\n   Prior to the publication of [RFC5914], there was no standardized\n\
    \   format for trust anchors.  Self-signed X.509 certificates are\n   typically\
    \ used, but [RFC5280] does not mandate a particular trust\n   anchor representation.\
    \  It requires only that a trust anchor's public\n   key information and distinguished\
    \ name be available during\n   certification path validation.  CMS is widely used\
    \ to protect a\n   variety of types of content using digital signatures, including\n\
    \   contents that may be verified directly using a trust anchor, such as\n   firmware\
    \ packages [RFC4108].  Constraints may include a validity\n   period, constraints\
    \ on certification path validation, etc.\n"
- title: 3.8.  Source Authentication
  contents:
  - '3.8.  Source Authentication

    '
- title: 3.8.1.  Functional Requirements
  contents:
  - "3.8.1.  Functional Requirements\n   An entity receiving trust anchor management\
    \ data MUST be able to\n   authenticate the identity of the party providing the\
    \ information and\n   MUST be able to confirm the party is authorized to provide\
    \ that trust\n   anchor information.\n   A trust anchor manager MUST be able to\
    \ authenticate which trust\n   anchor store corresponds to a report listing the\
    \ contents of the\n   trust anchor store and be able to confirm the contents of\
    \ the report\n   have not been subsequently altered.\n"
- title: 3.8.2.  Rationale
  contents:
  - "3.8.2.  Rationale\n   Data origin authentication and integrity are required to\
    \ support\n   remote management operations, even when TA management transactions\n\
    \   are effected via store-and-forward communications.\n"
- title: 3.9.  Reduce Reliance on Out-of-Band Trust Mechanisms
  contents:
  - '3.9.  Reduce Reliance on Out-of-Band Trust Mechanisms

    '
- title: 3.9.1.  Functional Requirements
  contents:
  - "3.9.1.  Functional Requirements\n   When performing add operations, a trust anchor\
    \ management protocol\n   SHOULD enable TA integrity to be checked automatically\
    \ by a relying\n   party without relying on out-of-band trust mechanisms.\n"
- title: 3.9.2.  Rationale
  contents:
  - "3.9.2.  Rationale\n   Traditionally, a trust anchor is distributed out-of-band\
    \ with its\n   integrity checked manually prior to installation.  Installation\n\
    \   typically is performed by anyone with sufficient administrative\n   privilege\
    \ on the system receiving the trust anchor.  Reliance on out-\n   of-band trust\
    \ mechanisms is one problem with current trust anchor\n   management approaches,\
    \ and reduction of the need to use out-of-band\n   trust mechanisms is a primary\
    \ motivation for developing a trust\n   anchor management protocol.  Ideally,\
    \ out-of-band trust mechanisms\n   will be required only during trust anchor store\
    \ initialization.\n"
- title: 3.10.  Replay Detection
  contents:
  - '3.10.  Replay Detection

    '
- title: 3.10.1.  Functional Requirements
  contents:
  - "3.10.1.  Functional Requirements\n   A trust anchor management protocol MUST\
    \ enable participants engaged\n   in a trust anchor management protocol exchange\
    \ to detect replay\n   attacks.  A replay detection mechanism that does not introduce\
    \ a\n   requirement for a reliable source of time MUST be available.\n   Mechanisms\
    \ that do require a reliable source of time MAY be\n   available.\n"
- title: 3.10.2.  Rationale
  contents:
  - "3.10.2.  Rationale\n   Detection of replays of trust anchor management transactions\
    \ is\n   required to support remote management operations.  Replay of old\n  \
    \ trust anchor management transactions could result in the\n   reintroduction\
    \ of compromised trust anchors to a trust anchor store,\n   potentially exposing\
    \ applications to malicious signed objects or\n   certification paths.\n   Some\
    \ devices that utilize trust anchors have no access to a reliable\n   source of\
    \ time, so a replay detection mechanism that requires a\n   reliable time source\
    \ is insufficient.\n"
- title: 3.11.  Compromise or Disaster Recovery
  contents:
  - '3.11.  Compromise or Disaster Recovery

    '
- title: 3.11.1.  Functional Requirements
  contents:
  - "3.11.1.  Functional Requirements\n   A trust anchor management protocol MUST\
    \ enable recovery from the\n   compromise or loss of a trust anchor private key,\
    \ including the\n   private key authorized to serve as a trust anchor manager,\
    \ without\n   requiring re-initialization of the trust store.\n"
- title: 3.11.2.  Rationale
  contents:
  - "3.11.2.  Rationale\n   Compromise or loss of a private key corresponding to a\
    \ trust anchor\n   can have significant negative consequences.  Currently, in\
    \ some\n   cases, re-initialization of all affected trust anchor stores is\n \
    \  required to recover from a lost or compromised trust anchor key.  Due\n   to\
    \ the costs associated with re-initialization, a trust anchor\n   management protocol\
    \ should support recovery options that do not\n   require trust anchor store re-initialization.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The public key used to authenticate a TA management\
    \ transaction may\n   have been placed in the client as the result of an earlier\
    \ TA\n   management transaction or during an initial bootstrap configuration\n\
    \   operation.  In most scenarios, at least one public key authorized for\n  \
    \ trust anchor management must be placed in each trust anchor store to\n   be\
    \ managed during the initial configuration of the trust anchor\n   store.  This\
    \ public key may be transported and checked using out-of-\n   band means.  In\
    \ all scenarios, regardless of the authentication\n   mechanism, at least one\
    \ trust anchor manager must be established for\n   each trust anchor store during\
    \ the initial configuration of the trust\n   anchor store.\n   Compromise of a\
    \ trust anchor's private key can result in many\n   security problems including\
    \ issuance of bogus certificates or\n   installation of rogue trust anchors.\n\
    \   Usage of trust anchor-based constraints requires great care when\n   defining\
    \ trust anchors.  Errors on the part of a trust anchor manager\n   could result\
    \ in denial of service or have serious security\n   consequences.  For example,\
    \ if a name constraint for a trust anchor\n   that serves as the root of a PKI\
    \ includes a typo, denial of service\n   results for certificate holders and relying\
    \ parties.  If a trust\n   anchor manager inadvertently delegates all of its privileges\
    \ and the\n   delegate subsequently removes the trust anchor manager from trust\n\
    \   anchor stores now under its control, recovery may require\n   re-initialization\
    \ of all effected trust anchor stores.\n   RFC 5280 requires that certificate\
    \ path validation be initialized\n   with a TA subject name and public key, but\
    \ does not require\n   processing of other information, such as name constraints\
    \ extensions.\n   Inclusion of constraints in trust anchors is optional.  When\n\
    \   constraints are explicitly included by a trust anchor manager using a\n  \
    \ trust anchor management protocol, there exists an expectation that\n   the certificate\
    \ path validation algorithm will make use of the\n   constraints.  Application\
    \ owners must confirm the path processing\n   implementations support the processing\
    \ of TA-based constraints, where\n   required.\n   Many of the security considerations\
    \ from [RFC5280] are also\n   applicable to trust anchor management.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5055]  Freeman, T., Housley, R., Malpani, A., Cooper, D., and\
    \ W.\n              Polk, \"Server-Based Certificate Validation Protocol\n   \
    \           (SCVP)\", RFC 5055, December 2007.\n   [RFC5280]  Cooper, D., Santesson,\
    \ S., Farrell, S., Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n              Infrastructure Certificate and Certificate Revocation\
    \ List\n              (CRL) Profile\", RFC 5280, May 2008.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [RFC2560]  Myers, M., Ankney, R., Malpani, A.,\
    \ Galperin, S., and C.\n              Adams, \"X.509 Internet Public Key Infrastructure\
    \ Online\n              Certificate Status Protocol - OCSP\", RFC 2560, June 1999.\n\
    \   [RFC3161]  Adams, C., Cain, P., Pinkas, D., and R. Zuccherato,\n         \
    \     \"Internet X.509 Public Key Infrastructure Time-Stamp\n              Protocol\
    \ (TSP)\", RFC 3161, August 2001.\n   [RFC4108]  Housley, R., \"Using Cryptographic\
    \ Message Syntax (CMS) to\n              Protect Firmware Packages\", RFC 4108,\
    \ August 2005.\n   [RFC4210]  Adams, C., Farrell, S., Kause, T., and T. Mononen,\n\
    \              \"Internet X.509 Public Key Infrastructure Certificate\n      \
    \        Management Protocol (CMP)\", RFC 4210, September 2005.\n   [RFC5652]\
    \  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n            \
    \  RFC 5652, September 2009.\n   [RFC5914]  Housley, R., Ashmore, S., and C. Wallace,\
    \ \"Trust Anchor\n              Format\", RFC 5914, June 2010.\n   [RFC5934] \
    \ Housley, R., Ashmore, S., and C. Wallace, \"Trust Anchor\n              Management\
    \ Protocol (TAMP)\", RFC 5934, August 2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Raksha Reddy\n   National Security Agency\n   Suite 6599\n\
    \   9800 Savage Road\n   Fort Meade, MD  20755\n   EMail: r.reddy@radium.ncsc.mil\n\
    \   Carl Wallace\n   Cygnacom Solutions\n   Suite 5400\n   7925 Jones Branch Drive\n\
    \   McLean, VA  22102\n   EMail: cwallace@cygnacom.com\n"
