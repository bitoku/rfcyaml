- title: __initial_text__
  contents:
  - '                           PPP Multiplexing

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a method to reduce the PPP (Point-to-Point\n\
    \   Protocol) framing overhead used to transport small packets over slow\n   links.\n"
- title: 1. Description
  contents:
  - "1. Description\n   The method, PPP Multiplexing, sends multiple PPP encapsulated\
    \ packets\n   in a single PPP frame.  As a result, the PPP overhead per packet\
    \ is\n   reduced.  PPP encapsulation (for example with PPP in HDLC framing)\n\
    \   adds several bytes of overhead: a HDLC flag (at least one to separate\n  \
    \ adjacent packets), the Address (0xFF) and Control (0x03) field bytes,\n   a\
    \ two byte PPP Protocol ID, and the two byte CRC field.  Even with\n   the Address\
    \ and Control Fields negotiated off and the PPP Protocol ID\n   compressed, each\
    \ PPP encapsulated frame will include four bytes of\n   overhead.  When PPP frames\
    \ are tunneled, as in L2TP [1], the L2TP\n   overhead per PPP frame is significant.\n\
    \   The key idea is to concatenate multiple PPP encapsulated frames into\n   a\
    \ single PPP multiplexed frame by inserting a delimiter before the\n   beginning\
    \ of each frame.  The description of the delimiters is\n   provided in Subsection\
    \ 1.1.  The delimiters are used by the\n   demultiplexor to separate the PPP frames\
    \ within the multiplexed\n   frame.  Each PPP encapsulated frame within the multiplexed\
    \ frame is\n   called a PPP subframe.\n   During the NCP negotiation phase of\
    \ PPP, a receiver can offer to\n   receive multiplexed frames using the PPP Mux\
    \ Control Protocol\n   (PPPMuxCP), as described in Section 2.  Once PPPMuxCP has\
    \ been\n   negotiated, the transmitter may choose which PPP frames to multiplex.\n\
    \   Frames should not be re-ordered by either the transmitter or receiver\n  \
    \ regardless of whether they arrive as part of the PPP multiplexed\n   frame or\
    \ by themselves.\n   The scheme proposed is similar to the concatenated framing\
    \ option\n   [2].  The key differences are that PPP multiplexing is more efficient\n\
    \   and that it allows concatenation of variable sized frames.  This is\n   unlike\
    \ concatenated framing which restricts all frames to be of fixed\n   length.\n\
    \   As with any concatenation scheme, the implementer has to consider the\n  \
    \ tradeoff between increased delay for multiplexing/demultiplexing and\n   reduced\
    \ packet overhead as the length of the multiplexed frame\n   increases.\n   The\
    \ key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n\
    \   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in RFC 2119 [7].\n"
- title: 1.1. Payload Format
  contents:
  - "1.1. Payload Format\n   The format of the complete PPP frame along with multiple\
    \ subframes\n   for PPP in HDLC-like framing [3] is shown in Figure 1.  Note that\n\
    \   regardless of the order in which individual bits are transmitted,\n   i.e.,\
    \ LSB first or MSB first, the PFF bit will be seen to be the MSB\n   of a byte\
    \ that contains both the PFF and the subframe length field.\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |       +P|L|     +       +     +   +P|L|\
    \     +       +     +     |\n   |  PPP/ +F|X|Len1 +  PPP  +     +   +F|X|LenN\
    \ +  PPP  +     +     |\n   |  HDLC +F|T|     + Prot. +Info1+ ~ +F|T|     + Prot.\
    \ +InfoN+ CRC |\n   | Header+ | |     + Field1+     +   + | |     +FieldN +  \
    \   +     |\n   | (2-5) +  (1-2 ) + (0-2) +     +   +  (1-2)  + (0-2) +     +\
    \ (2) |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 1. Multiplexing subframes in a PPP frame.\n   PPP Header:\n\
    \        The PPP header contains the PPP Protocol Field for a PPP\n        Multiplexed\
    \ Frame (0x0059).  The PPP header compression\n        options (ACFC and PFC)\
    \ may be negotiated during LCP and\n        could thus affect the format of this\
    \ header.\n   Length Field:\n     The length field consists of three subfields:\n\
    \      1. Protocol Field Flag (PFF):\n         The PFF refers to the most significant\
    \ bit of the first byte of\n         each subframe.  This one bit field indicates\
    \ whether the PPP\n         Protocol ID of the subframe follows the subframe length\
    \ field.\n         For the first subframe, the PFF bit could be set to zero if\
    \ the\n         PPP protocol ID of the first subframe is equal to the default\n\
    \         PID value negotiated in PPPMuxCP.  PFF = 1 indicates that the\n    \
    \     protocol field is present (and follows the length field) for\n         this\
    \ subframe.  PFF = 0 indicates that the protocol field is\n         absent for\
    \ this subframe.  If PFF = 0 then the PPP Protocol ID\n         is the same as\
    \ that of the preceding subframe with PFF = 1, or\n         it is equal to default\
    \ PID value of the PPPMuxCP Option for the\n         first subframe.  The transmitter\
    \ is not obligated to remove the\n         PPP Protocol ID for any subframe.\n\
    \      2. Length Extension (LXT)\n         This one bit field indicates whether\
    \ the length field is one\n         byte or two bytes long.  If the LXT bit is\
    \ set, then the length\n         field is two bytes long (a PFF bit, a length\
    \ extension bit, and\n         14 bits of sub-frame length).  If the LXT bit is\
    \ cleared, then\n         the length field is one byte long (a PFF bit, a length\n\
    \         extension bit, and 6 bits of sub-frame length).\n      3. Sub-frame\
    \ Length (LEN):\n         This is the length of the subframe in bytes not including\
    \ the\n         length field.  However, it does include the PPP Protocol ID if\n\
    \         present (i.e., if PFF = 1).  If the length of the subframe is\n    \
    \     less than 64 bytes (less than or equal to 63 bytes), LXT is set\n      \
    \   to zero and the last six bits of the length field is the\n         subframe\
    \ length.  If the length of the subframe is greater than\n         63 bytes, LXT\
    \ is set to one and the last 14 bits of the length\n         field is the length\
    \ of the subframe.  The maximum length of a\n         subframe is 16,383 bytes.\
    \  PPP packets larger than 16,383 bytes\n         will need to be sent in their\
    \ own PPP frame.  A transmitter is\n         not required to multiplex all frames\
    \ smaller than 16,383 bytes.\n         It may chose to only multiplex frames smaller\
    \ than a\n         configurable size into a PPP multiplexed frame.\n   Protocol\
    \ Field:\n      This field contains the Protocol Field value for the subframe.\n\
    \      This field is optional.  If PFF = 1 for a subframe, the protocol\n    \
    \  field is present in the subframe, otherwise it is inferred at the\n      receiver.\n\
    \      The receiver MUST support Protocol-Field-Compression (PFC) one or\n   \
    \   two bytes long.  The transmitter SHOULD compress PPP Protocol IDs\n      in\
    \ this field that have an upper byte of zero (i.e., Protocol IDs\n      from 0x21\
    \ thru 0xFD).  This Protocol Field Compression in each PPP\n      subframe is\
    \ not related to the negotiation of PFC during LCP\n      negotiation which affects\
    \ the length of PPP Multiplexed Frame\n      Protocol ID.\n   Information Field:\n\
    \      This field contains the actual packet being encapsulated. Any\n      frame\
    \ may be included here with the exception of LCP Configure\n      Request, ACK,\
    \ NAK and Reject frames and PPP Multiplexed frames.\n      If LCP is renegotiated\
    \ then PPP Multiplexing MUST be disabled\n      until the PPP Mux Control Protocol\
    \ is negotiated.\n"
- title: 1.2 Transmitter procedure
  contents:
  - "1.2 Transmitter procedure\n   A simple implementation of the transmitter is provided.\
    \  During the\n   transmission of a multiplexed PPP frame, the transmitter has\
    \ a state\n   variable, Last_PID, which is used to hold the most recent value\
    \ of\n   protocol field in a subframe with PFF=1.  At the start of the\n   multiplexing\
    \ process, Last_PID is set equal to the default PID value\n   negotiated in PPPMuxCP.\
    \  Also, a user configurable parameter, maximum\n   subframe length (MAX_SF_LEN),\
    \ is used to determine the maximum size\n   of a PPP frame which can be multiplexed.\
    \  The value of MAX_SF_LEN\n   should be less or equal to the minimum of MRU-2(maximum\
    \ size of\n   length field) and 16,383 (14 bits).\n   After transmitting a PPP\
    \ frame (multiplexed or not) on the channel,\n   the PPP multiplexing logic looks\
    \ at the buffers that hold the PPP\n   frames to be transmitted.  In case there\
    \ are multiple frames, the PPP\n   multiplexing logic checks if the length of\
    \ the first frame in the\n   buffer is less than or equal to MAX_SF_LEN bytes.\
    \  If so, the\n   transmitter starts compiling a multiplexed PPP frame with the\n\
    \   protocol field value corresponding to PPP Multiplexed Frame (0x59).\n   For\
    \ each subframe, the test for deciding to prepend the protocol\n   field to a\
    \ subframe is to compare the protocol field value of the\n   subframe to Last_PID.\
    \  If they are equal, PFF is set to 0 and the\n   protocol field is deleted. \
    \ If not, PFF is set to 1, the protocol\n   field is included, after PFC, in the\
    \ subframe and Last_PID is set to\n   the protocol field value of the current\
    \ subframe.  The stopping\n   criteria in the concatenation process are (i) when\
    \ the length of the\n   next subframe is greater than MAX_SF_LEN bytes or (ii)\
    \ the length of\n   the entire PPP frame by including the new subframe exceeds\
    \ the\n   maximum receive unit (MRU) parameter negotiated during LCP [4], or\n\
    \   (iii) there are no more subframes to concatenate.\n   Implementers may choose\
    \ additionally to implement using timers.  In\n   such a case a timeout in addition\
    \ to the conditions stated above is\n   used as a stopping criteria of the multiplexing\
    \ process.  Moreover,\n   it may be desirable to limit the maximum size of a multiplexed\
    \ packet\n   to be considerably smaller than MRU for reasons of multiplexing\n\
    \   latency and packet error considerations.\n"
- title: 1.3 Receiver procedure
  contents:
  - "1.3 Receiver procedure\n   If a multiplexed frame, i.e., a frame with Protocol\
    \ field value equal\n   to PPP Multiplexed Frame (0x0059), is received, the frame\
    \ is\n   demultiplexed in order using the following input demultiplexing\n   logic.\
    \  Similar to a transmitter, the receiver has a state variable\n   called Last_rcvd_PID,\
    \ which is the value of the protocol field in the\n   most recently demultiplexed\
    \ subframe with PFF=1.  Last_rcvd_PID is\n   initialized to default PID value\
    \ negotiated by PPPMuxCP.  If PFF=0\n   for a subframe, Last_rcvd_PID is appended\
    \ to the beginning of the\n   subframe before handing the subframe, as determined\
    \ by the length\n   field, to the PPP logic.  If PFF=1 for a subframe, Last_rcvd_PID\
    \ is\n   set to this value and the subframe, as determined by the length\n   field,\
    \ is passed to PPP logic.  The remainder of the frame is\n   returned to the demultiplexor.\
    \  Each succeeding subframe is processed\n   similarly.  This processing is complete\
    \ when the remainder of the\n   frame is empty, or when the size field of a subframe\
    \ exceeds the\n   amount of data remaining in a packet.  In the latter case, there\
    \ is\n   an error either in the length field of the last subframe or in the\n\
    \   length field of one of the previous subframes.  In either case the\n   last\
    \ subframe must be dropped by the demultiplexing logic.\n   It is illegal to put\
    \ a multiplexed frame within a multiplexed frame.\n"
- title: 2. PPP Network Control Protocol for PPP Multiplexing (PPPMuxCP)
  contents:
  - "2. PPP Network Control Protocol for PPP Multiplexing (PPPMuxCP)\n   A receiver\
    \ will offer its ability to received multiplexed frames by\n   negotiating NCP\
    \ for PPP multiplexing, PPPMuxCP.  The protocol field\n   value for a PPPMuxCP\
    \ frames is 0x8059.  PPPMuxCP is similar to other\n   NCPs such as IPCP [6]. \
    \ A transmitter may not send a multiplexed\n   frame unless the peer has offered\
    \ to receive multiplexed frames.\n   Support of multiplexed frame reception is\
    \ negotiated in each\n   direction independently.  Successful negotiation of PPPMuxCP\
    \ does not\n   obligate a peer to transmit multiplexed frames.\n   As part of\
    \ the PPPMuxCP negotiation, a 'default PID' option is always\n   negotiated. \
    \ This enables the transmitter to transmit the first\n   subframe of a PPP multiplexed\
    \ frame without a PID (PFF=0), thus\n   resulting in a saving of one or two bytes.\
    \  Note that the negotiation\n   of default PID does not require the transmitter\
    \ to send the first\n   subframe with PFF=0 even if doing so would optimize the\
    \ transmission.\n   And, as always, the option (and thus the default PID) is negotiated\n\
    \   by the receiver, i.e., the receiver will interpret a received PPPmux\n   packet\
    \ using the default PID it offered.\n   LCP frames MUST NOT be sent in Multiplexed\
    \ frames. The only option in\n   PPPMuxCP is the negotiation of Default PID and\
    \ is shown below\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \ Type = 1    |   Length = 4  |        Default PID            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 2. Default PID option for PPPMuxCP\n"
- title: 3. Interaction with PPP Multilink (MP) Protocol
  contents:
  - "3. Interaction with PPP Multilink (MP) Protocol\n   PPP multiplexed frame option\
    \ is negotiated by an NCP.  LCP is\n   negotiated over each member link of a multilink\
    \ bundle and not on the\n   bundle itself [5].  Thus in case of MP, PPPmux cannot\
    \ be negotiated\n   for individual links, but only for the bundle.\n   Hence,\
    \ on the transmitter side PPP multiplexing always occurs before\n   multilink\
    \ PPP encapsulation.  On a link, an MP header (if present)\n   MUST be outside\
    \ of a PPPmux header (if present).  Multilink frames\n   must not be sent in Multiplexed\
    \ frames.\n"
- title: 4. Interaction with CCP and ECP
  contents:
  - "4. Interaction with CCP and ECP\n   PPP multiplexing must be performed below\
    \ (after) any bundle-level CCP\n   and/or ECP, and above (before) MP and any per-link\
    \ CCP and/or ECP.\n   Thus,  to negotiate the hypothetical transmit path sequence\
    \ CCP ->\n   PPPMux -> ECP, the bundle-level version of CCP (80fd) and the per-\n\
    \   link version of ECP (8055) are negotiated along with the PPPMux\n   Option.\n\
    \   An implementation that cannot perform PPPMux above CCP or ECP MUST\n   issue\
    \ Protocol-Reject for the per-link forms of CCP and ECP if PPPMux\n   has been\
    \ negotiated.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This document does not impose additional security\
    \ considerations\n   beyond those that apply to PPP and header-compression schemes\
    \ over\n   PPP.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   The authors would like to thank contributors on the PPPext\
    \ mailing\n   list, especially James Carlson, for valuable inputs to this document.\n"
- title: 7. References
  contents:
  - "7. References\n   [1] Townsley, W., Valencia, A., Rubens, A., Pall, G., Zorn,\
    \ G. and B.\n       Palter, \"Layer Two Tunneling Protocol \"L2TP\"\", RFC 2661,\
    \ August\n       1999.\n   [2] Simpson, W., Ed., \"PPP LCP extensions\", RFC 1570,\
    \ January, 1994.\n   [3] Simpson, W., Ed., \"PPP in HDLC-like Framing\", STD 51,\
    \ RFC 1662,\n       July 1994.\n   [4] Simpson, W., Ed., \"The Point-To-Point\
    \ Protocol (PPP)\", STD 51,\n       RFC 1661, July 1994.\n   [5] Sklower, K.,\
    \ Lloyd, B., McGregor, G., Carr, D., and T. Coradetti,\n       \"The PPP Multilink\
    \ Protocol (MP)\", RFC 1990, August 1996.\n   [6] McGregor, G., \"The PPP Internet\
    \ Protocol Control Protocol\n       (IPCP)\", RFC 1332, May 1992.\n   [7] Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n       Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n"
- title: 8. Author's Addresses
  contents:
  - "8. Author's Addresses\n   Rajesh Pazhyannur\n   Motorola, Network Solutions Sector\n\
    \   1501, W. Shure Drive\n   Arlington Heights, IL 60004\n   Phone: (847) 632-4524\n\
    \   EMail: pazhynnr@cig.mot.com\n   Irfan Ali\n   Motorola, Network Solutions\
    \ Sector\n   1501, W. Shure Drive\n   Arlington Heights, IL 60004\n   Phone: (847)\
    \ 632-3281\n   EMail: fia225@email.mot.com\n   Craig Fox\n   Cisco Systems\n \
    \  170 W. Tasman Street\n   San Jose, CA 95134\n   Phone: (408) 526-6296\n   EMail:\
    \ fox@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
