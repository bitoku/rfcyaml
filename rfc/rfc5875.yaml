- title: __initial_text__
  contents:
  - ''
- title: An Extensible Markup Language (XML) Configuration Access Protocol (XCAP)
  contents:
  - "An Extensible Markup Language (XML) Configuration Access Protocol (XCAP)\n  \
    \                         Diff Event Package\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an \"xcap-diff\" SIP (Session Initiation\n\
    \   Protocol) event package for the SIP Event Notification Framework,\n   which\
    \ clients can use to receive notifications of changes to\n   Extensible Markup\
    \ Language (XML) Configuration Access Protocol (XCAP)\n   resources.  The initial\
    \ synchronization information exchange and\n   document updates are based on the\
    \ XCAP Diff format.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5875.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Definitions  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  XCAP Diff Event Package  . . . . . . . . . . . . . . . .\
    \ . . .  4\n     4.1.  Overview of Operation with Basic Requirements  . . . .\
    \ . .  4\n     4.2.  Event Package Name . . . . . . . . . . . . . . . . . . .\
    \ .  5\n     4.3.  'diff-processing' Event Package Parameter  . . . . . . . .\
    \  5\n     4.4.  SUBSCRIBE Bodies . . . . . . . . . . . . . . . . . . . . .  6\n\
    \     4.5.  Subscription Duration  . . . . . . . . . . . . . . . . . .  8\n  \
    \   4.6.  NOTIFY Bodies  . . . . . . . . . . . . . . . . . . . . . .  8\n    \
    \ 4.7.  Notifier Generation of NOTIFY Requests . . . . . . . . . .  8\n     4.8.\
    \  Subscriber Processing of NOTIFY Requests . . . . . . . . . 11\n     4.9.  Handling\
    \ of Forked Requests  . . . . . . . . . . . . . . . 13\n     4.10. Rate of Notifications\
    \  . . . . . . . . . . . . . . . . . . 13\n     4.11. State Agents . . . . . .\
    \ . . . . . . . . . . . . . . . . . 13\n   5.  An Initial Example NOTIFY Document\
    \ . . . . . . . . . . . . . . 13\n   6.  IANA Considerations  . . . . . . . .\
    \ . . . . . . . . . . . . . 14\n   7.  Security Considerations  . . . . . . .\
    \ . . . . . . . . . . . . 15\n   8.  Acknowledgments  . . . . . . . . . . . .\
    \ . . . . . . . . . . . 15\n   9.  References . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 16\n     9.1.  Normative References . . . . . . . . . .\
    \ . . . . . . . . . 16\n     9.2.  Informative References . . . . . . . . . .\
    \ . . . . . . . . 17\n   Appendix A.  Informative Examples  . . . . . . . . .\
    \ . . . . . . . 18\n     A.1.  Initial Documents on an XCAP Server  . . . . .\
    \ . . . . . . 18\n     A.2.  An Initial Subscription  . . . . . . . . . . . .\
    \ . . . . . 18\n     A.3.  A Document Addition into a Collection  . . . . . .\
    \ . . . . 19\n     A.4.  A Series of XCAP Component Modifications . . . . . .\
    \ . . . 20\n     A.5.  An XCAP Component Subscription . . . . . . . . . . . .\
    \ . . 23\n     A.6.  A Conditional Subscription . . . . . . . . . . . . . . .\
    \ . 26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The SIP events framework [RFC3265] describes subscription\
    \ and\n   notification conventions for the Session Initiation Protocol (SIP)\n\
    \   [RFC3261].  The Extensible Markup Language (XML)\n   [W3C.REC-xml-20060816]\
    \ Configuration Access Protocol (XCAP) [RFC4825]\n   allows a client to read,\
    \ write, and modify XML-formatted application\n   usage data stored on an XCAP\
    \ server.\n   While XCAP allows authorized users or devices to modify the same\
    \ XML\n   document, XCAP does not provide an effective mechanism (beyond\n   polling)\
    \ to keep resources synchronized between a server and a\n   client.  This memo\
    \ defines an \"xcap-diff\" event package that,\n   together with the SIP event\
    \ notification framework [RFC3265] and the\n   XCAP diff format [RFC5874], allows\
    \ a user to subscribe to changes in\n   an XML document, and to receive notifications\
    \ whenever the XML\n   document changes.\n   There are three basic features that\
    \ this event package enables:\n   First, a client can subscribe to a list of XCAP\
    \ documents' URLs in a\n   collection located on an XCAP server.  This allows\
    \ a subscriber to\n   compare server resources with its local resources using\
    \ the URLs and\n   the strong entity tag (ETag) values of XCAP documents, which\
    \ are\n   shown in the XCAP diff format, and to synchronize them.\n   Second,\
    \ this event package can signal a change in those documents in\n   one of three\
    \ ways.  The first mode only indicates the event type and\n   does not include\
    \ document contents, so the subscriber uses HTTP\n   [RFC2616] to retrieve the\
    \ updated document.  The second mode includes\n   document content changes in\
    \ notification messages, using the XML-\n   Patch-Ops [RFC5261] format with minimal\
    \ notification size.  The third\n   mode also includes document content changes\
    \ in notification messages\n   with the same XML-Patch-Ops format, but is more\
    \ verbose, and shows\n   the full HTTP version history.\n   Third, the client\
    \ can subscribe to specific XML elements or\n   attributes (XCAP components) showing\
    \ their existing contents in the\n   resulting XCAP diff format notification messages.\
    \  If the requested\n   component does not exist but is later created, the notifier\
    \ sends a\n   notification with the component's content.  The notifier also sends\n\
    \   notifications when the subscribed XCAP components are removed, for\n   example,\
    \ after a successful HTTP DELETE request.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119, BCP 14\n   [RFC2119] and indicate requirement levels for compliant\n \
    \  implementations.\n"
- title: 3.  Definitions
  contents:
  - "3.  Definitions\n   The following terms are used in this document:\n   XCAP component:\
    \  An XML element or an attribute, which can be\n      updated, removed, or retrieved\
    \ with XCAP.\n   Aggregating:  An XCAP client can update only a single XCAP component\n\
    \      at a time using HTTP.  However, a notifier may be able to\n      aggregate\
    \ a series of these modifications into a single\n      notification using XML-Patch-Ops\
    \ semantics encoded in the XCAP\n      diff format.\n   This document reuses terminology\
    \ mostly defined in XCAP [RFC4825] and\n   some in WebDAV [RFC4918].\n"
- title: 4.  XCAP Diff Event Package
  contents:
  - '4.  XCAP Diff Event Package

    '
- title: 4.1.  Overview of Operation with Basic Requirements
  contents:
  - "4.1.  Overview of Operation with Basic Requirements\n   To receive \"xcap-diff\"\
    \ event package features, the subscriber\n   indicates its interest in certain\
    \ resources by including a URI list\n   in the subscription body to the notifier.\
    \  Each URL in this list MUST\n   be an HTTP URL that identifies a collection,\
    \ an XCAP document, or an\n   XCAP component.  Collection URLs MUST have a trailing\
    \ forward slash\n   \"/\", following the conventions of WebDAV [RFC4918].  A collection\n\
    \   selection includes all documents in that collection and recursively\n   all\
    \ documents in sub-collections.  The URL of an XCAP component\n   consists of\
    \ the document URL with the XCAP Node Selector added.\n   Although the XCAP Node\
    \ Selector allows all in-scope namespaces of an\n   element to be requested, the\
    \ client MUST NOT subscribe to namespaces.\n   The notifier MUST support XCAP\
    \ component subscriptions.  The notifier\n   sends the first notification in response\
    \ to the subscription, and\n   this first notification MUST contain the URLs of\
    \ the documents and\n   XCAP component contents that are part of the subscription.\
    \  The\n   subsequent notifications MAY contain patches to these documents.  The\n\
    \   subscriber can specify how the notifier will signal the changes of\n   documents\
    \ by using the 'diff-processing' event package parameter,\n   covered in Section\
    \ 4.3.  Note that the existence of the \"diff-\n   processing\" parameter or its\
    \ value has no influence on XCAP component\n   subscriptions.\n"
- title: 4.2.  Event Package Name
  contents:
  - "4.2.  Event Package Name\n   The name of this event package is \"xcap-diff\"\
    .  As specified in\n   [RFC3265], this value appears in the Event header field\
    \ present in\n   SUBSCRIBE and NOTIFY requests.\n"
- title: 4.3.  'diff-processing' Event Package Parameter
  contents:
  - "4.3.  'diff-processing' Event Package Parameter\n   With the aid of the optional\
    \ \"diff-processing\" Event header field\n   parameter, the subscriber indicates\
    \ a preference as to how the\n   notifier SHOULD indicate change notifications\
    \ of documents.  The\n   possible values are \"no-patching\", \"xcap-patching\"\
    , and \"aggregate\".\n   All three modes provide information that allows the subscriber\
    \ to\n   synchronize its local cache, but only the \"xcap-patching\" mode\n  \
    \ provides intermediate states of the version history.  The notifier\n   SHOULD\
    \ use the indicated mode if it understands it (as doing so\n   optimizes network\
    \ traffic within the capabilities of the receiver).\n      The \"no-patching\"\
    \ value means that the notifier indicates only the\n      document and the event\
    \ type (creation, modification, and removal)\n      in the notification.  The\
    \ notification does not necessarily\n      indicate the full HTTP ETag change\
    \ history.  Notifiers MUST\n      support the \"no-patching\" mode as a base-line\
    \ for\n      interoperability.  The other, more complex modes are optional.\n\
    \      The \"xcap-patching\" value means that the notifier includes all\n    \
    \  updated XCAP component contents and entity tag (ETag) changes made\n      by\
    \ XCAP clients (via HTTP).  The client receives the full (HTTP)\n      ETag change\
    \ history of a document.\n      The \"aggregate\" value means that the notifier\
    \ MAY aggregate\n      several individual XCAP component updates into a single\
    \ XCAP diff\n      <document> element.  The policy for determining whether or\
    \ not to\n      apply aggregation or to determine how many updates to aggregate\
    \ is\n      locally determined.\n      The notifier SHOULD support the \"xcap-patching\"\
    \ and \"aggregate\"\n      modes, and thus implement XML-Patch-Ops [RFC5261] diff-generation,\n\
    \      because this can greatly reduce the required number of\n      notifications\
    \ and overall transmissions.\n   If the subscription does not contain the \"diff-processing\"\
    \ header\n   field parameter, the notifier MUST default to the \"no-patching\"\
    \ mode.\n      Note: To see the difference between \"xcap-patching\" and\n   \
    \   \"aggregate\" modes, consider a document that has versions \"a\", \"b\",\n\
    \      and \"c\" with corresponding ETag values \"1\", \"2\", and \"3\".  The\n\
    \      \"xcap-patching\" mode will include first the change from version\n   \
    \   \"a\" to \"b\" with the versions' corresponding \"1\" and \"2\" ETags and\n\
    \      then the change from version \"b\" to \"c\" with their \"2\" and \"3\"\n\
    \      ETags.  The \"aggregate\" mode optimizes the change and indicates\n   \
    \   only a single aggregated change from \"a\" to \"c\" with the old \"1\"\n \
    \     and new \"3\" ETags.  If these changes are closely related, that is,\n \
    \     the same element has been updated many times, the bandwidth\n      savings\
    \ are larger.\n   This \"diff-processing\" parameter is a subscriber hint to the\n\
    \   notifier.  The notifier may respond using a simpler mode, but not a\n   more\
    \ complex one.  Notifier selection of a mode is covered in\n   Section 4.7.  During\
    \ re-subscriptions, the subscriber MAY change the\n   diff-processing parameter.\n\
    \   The formal grammar [RFC5234] of the \"diff-processing\" parameter is:\n  \
    \      diff-processing = \"diff-processing\" EQUAL (\n          \"no-patching\"\
    \ /\n          \"xcap-patching\" /\n          \"aggregate\" /\n          token\
    \ )\n   where EQUAL and token are defined in RFC 3261 [RFC3261].\n"
- title: 4.4.  SUBSCRIBE Bodies
  contents:
  - "4.4.  SUBSCRIBE Bodies\n   The URI list is described by the XCAP resource list\
    \ format [RFC4826],\n   and is included as a body of the initial SUBSCRIBE request.\
    \  Only a\n   simple subset of that format is required, a flat list of XCAP request\n\
    \   URIs.  The \"uri\" attribute of the <entry> element contains these URI\n \
    \  values.  The subscriber MUST NOT use hierarchical lists or <entry-\n   ref>\
    \ references, etc. (though in the future, semantics may be\n   expanded thanks\
    \ to the functionality in the resource list format).\n   In subsequent SUBSCRIBE\
    \ requests, such as those used for refreshing\n   the expiration timer, the subscribed\
    \ URI list MAY change, in which\n   case the notifier MUST use the new list.\n\
    \   The SUBSCRIBE request MAY contain an Accept header field.  If no such\n  \
    \ header field is present, it has a default value of \"application/\n   xcap-diff+xml\"\
    .  If the header field is present, it MUST include\n   \"application/xcap-diff+xml\"\
    , and MAY include any other types.\n   The SUBSCRIBE request MAY contain the Suppress-If-Match\
    \ header field\n   [RFC5839], which directs the notifier to suppress either the\
    \ body of\n   a subsequent notification or the entire notification if the ETag\n\
    \   value matches.\n   If the SUBSCRIBE body contains elements or attributes that\
    \ the\n   notifier doesn't understand, the notifier MUST ignore them.\n   Subscribers\
    \ need to appropriately populate the Request-URI of the\n   SUBSCRIBE request,\
    \ typically set to the URI of the notifier.  This\n   document does not constrain\
    \ that URI.  It is assumed that the\n   subscriber is provisioned with or has\
    \ learned the URI of the notifier\n   of this event package.\n   The XCAP server\
    \ will usually be co-located with the SIP notifier, so\n   the subscriber MAY\
    \ use relative XCAP Request-URIs.  Because relative\n   Request-URIs are allowed,\
    \ the notifier MUST know how to resolve these\n   against the correct XCAP Root\
    \ URI value.\n   Figure 1 shows a SUBSCRIBE request and body covering several\
    \ XCAP\n   resources: a \"resource-list\" document, a specific element (XCAP\n\
    \   component) in a \"rls-services\" document, and a collection in \"pidf-\n \
    \  manipulation\" application usage.  The \"Content-Type\" header of this\n  \
    \ SUBSCRIBE request is \"application/resource-lists+xml\".\n   SUBSCRIBE sip:tests@xcap.example.com\
    \ SIP/2.0\n   ...\n   Accept: application/xcap-diff+xml\n   Event: xcap-diff;\
    \ diff-processing=aggregate\n   Content-Type: application/resource-lists+xml\n\
    \   Content-Length: [XXX]\n   Expires: 4200\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <resource-lists xmlns=\"urn:ietf:params:xml:ns:resource-lists\"\
    >\n    <list>\n     <entry uri=\"resource-lists/users/sip:joe@example.com/index\"\
    />\n     <entry uri=\"rls-services/users/sip:joe@example.com/index/\n   ~~/*/service%5b@uri='sip:marketing@example.com'%5d\"\
    />\n     <entry uri=\"pidf-manipulation/\"/>\n    </list>\n   </resource-lists>\n\
    \                    Figure 1: Example subscription body\n   When subscribing\
    \ to XCAP components, namespace prefixes of XCAP Node\n   Selectors MUST be properly\
    \ resolved to namespace URIs.  Section 6.4\n   of RFC 4825 [RFC4825] describes\
    \ the conventions when using prefixes\n   in XCAP Node Selectors.  If only XCAP\
    \ Default Document Namespace is\n   used, just like in the previous example (where\
    \ a <service> element is\n   selected), the query component of the \"uri\" value\
    \ is not required.\n"
- title: 4.5.  Subscription Duration
  contents:
  - "4.5.  Subscription Duration\n   The default expiration time for subscriptions\
    \ within this package is\n   3600 seconds.  As per RFC 3265 [RFC3265], the subscriber\
    \ MAY specify\n   an alternative expiration timer in the Expires header field.\n"
- title: 4.6.  NOTIFY Bodies
  contents:
  - "4.6.  NOTIFY Bodies\n   The format of the NOTIFY message body either is the default\
    \ of\n   \"application/xcap-diff+xml\" or is a format listed in the Accept\n \
    \  header field of the SUBSCRIBE.\n   In this event package, notification messages\
    \ contain an XCAP diff\n   document [RFC5874].\n   The XCAP diff format [RFC5874]\
    \ can include the subscribed XCAP\n   component contents.  For documents, the\
    \ format can also include\n   corresponding URIs, ETag values, and patching instructions\
    \ from\n   version \"a\" to \"b\".  Removal events (of documents, elements, or\n\
    \   attributes) can be identified too.  Except for collection selections,\n  \
    \ the \"sel\" selector values of the XCAP diff format MUST be octet-by-\n   octet\
    \ equivalent to the relevant \"uri\" parameter values of the\n   <entry> element\
    \ of the \"resource-list\" document.\n   With XCAP component subscriptions, XCAP\
    \ Node Selectors can contain\n   namespace prefixes.  A notifier MUST then resolve\
    \ these prefixes to\n   namespace URIs according to RFC 4825 [RFC4825] conventions.\
    \  In other\n   words, notifiers MUST be aware of XCAP Default Document Namespaces\n\
    \   for Application Usages when they locate unprefixed qualified XCAP\n   elements.\
    \  Note that the namespace resolving rules of Patch operation\n   elements <add>,\
    \ <replace>, and <remove> are described in Section\n   4.2.1 of [RFC5261].\n"
- title: 4.7.  Notifier Generation of NOTIFY Requests
  contents:
  - "4.7.  Notifier Generation of NOTIFY Requests\n   During the initial subscription,\
    \ or if the URI list changes in\n   SUBSCRIBE refresh requests, the notifier MUST\
    \ resolve the requested\n   XCAP resources and their privileges.  If there are\
    \ superfluous\n   resource selections in the requested URI list, the notifier\
    \ SHOULD\n   NOT provide overlapping similar responses for these resources.  A\n\
    \   resource for which an authenticated user does not have a read\n   privilege\
    \ MUST NOT be included in the XCAP diff format.  Note that an\n   XCAP component\
    \ that could not be located with XCAP semantics does not\n   produce an error.\
    \  Instead, the request remains in a \"pending\" state,\n   that is, waiting for\
    \ this resource to be created (or read access\n   granted if XCAP Application\
    \ Usages utilize dynamic access control\n   lists).  Subscriptions to collections\
    \ have a similar property: once a\n   new document is created into the subscribed\
    \ collection, the creation\n   of a new resource is signaled with the next NOTIFY\
    \ request.\n   After the notifier knows the list of authorized XCAP resources,\
    \ it\n   generates the first NOTIFY, which contains URI references to all\n  \
    \ subscribed, existing documents for which the subscriber has read\n   privileges,\
    \ and typically XCAP component(s) of existing content.\n   After sending the initial\
    \ notification, the notifier selects a diff-\n   processing mode for reporting\
    \ changes.  If the subscriber suggested a\n   mode in the \"diff-processing\"\
    \ parameter of the SUBSCRIBE, the\n   notifier MAY use that requested mode or\
    \ MAY fall back to a simpler\n   operational mode, but the notifier MUST NOT use\
    \ a more complex mode\n   than the one chosen by the subscriber.  From least to\
    \ most complex,\n   the order of the modes is the following: \"no-patching\",\
    \ \"xcap-\n   patching\", \"aggregate\".  Thus, the notifier may respond to an\n\
    \   \"aggregate\" request using any mode, but cannot reply to an \"xcap-\n   patching\"\
    \ subscription using the \"aggregate\" mode.  Naturally, the\n   notifier MUST\
    \ handle a \"no-patching\" request with the \"no-patching\"\n   mode.\n   In all\
    \ modes, the notifier MUST maintain the chronological order of\n   XCAP changes.\
    \  If several changes to a given resource are presented\n   in a single notification,\
    \ the chronological update order MUST be\n   preserved in the XML document order\
    \ of the notification body.\n   Chronological order is preserved to simplify the\
    \ required subscriber\n   implementation logic.\n   While the \"aggregate\" mode\
    \ uses bandwidth most efficiently, it\n   introduces other challenges.  The initial\
    \ synchronization might fail\n   with rapidly changing resources, because the\
    \ \"aggregate\" mode\n   messages might not include the full version history of\
    \ a document and\n   the base XCAP protocol does not support version history retrievals\
    \ of\n   documents.  When new documents are created in subscribed collections\n\
    \   and the notifier is aggregating patches, the same issue can occur.\n   In\
    \ a corner case (such as when the XML prolog changes), the notifier\n   may not\
    \ be able to provide patches with the XML-Patch-Ops [RFC5261]\n   semantics.\n\
    \   If the notifier has to temporarily disable diff generation and send\n   only\
    \ the URI references of some changed documents to the subscriber,\n   it MUST\
    \ continue with the \"xcap-patching\" mode afterwards for these\n   resources,\
    \ if the initial subscription also started with the \"xcap-\n   patching\" mode.\n\
    \      Note: The diff-generation may be disabled when the NOTIFY body\n      becomes\
    \ impractically large or an intermediate error has happened.\n      As the subscriber\
    \ loses track of the patching operations, it must\n      refresh to a \"known\
    \ good\" state by downloading current documents.\n      Once it has done so, it\
    \ can re-subscribe, for example, with the\n      \"aggregate\" mode.\n   In the\
    \ \"aggregate\" mode, the notifier chooses how long to wait for\n   multiple patches\
    \ to combine and how this combination is done.\n   In the \"xcap-patching\" mode,\
    \ the notifier MAY try to optimize the\n   diff-generation, for example, by eliminating\
    \ redundant information\n   since some XCAP clients will probably not have completely\
    \ optimized\n   their HTTP PUT request.\n      Note: It is straightforward to\
    \ change the XCAP client's change\n      requests: PUT and DELETE (sent via HTTP)\
    \ to use XML-Patch-Ops\n      semantics.  While XCAP does not support patching\
    \ of all XML node\n      types -- for example, namespace declarations cannot be\
    \ added\n      separately -- efficient utilization of XML-Patch-Ops can sometimes\n\
    \      significantly reduce the bandwidth requirements at the expense of\n   \
    \   extra processing.\n   After the notifier has reported the existence of an\
    \ XCAP component,\n   it MUST also report its removal consistently.  For example,\
    \ the\n   removal of the parent element of the subscribed element requires the\n\
    \   same signaling since the subscribed element ceases to exist.  To\n   signal\
    \ the removal of an XCAP component, the notifier sets the\n   Boolean \"exist\"\
    \ attribute value of the <element> or <attribute>\n   elements to false.  Even\
    \ with rapidly changing resources, the\n   notifier MUST signal only the latest\
    \ state: e.g., whether or not the\n   XCAP component exists.\n   When the notifier\
    \ receives a re-subscription, it MUST re-send the\n   current full XML diff content\
    \ unless the subscriber has requested a\n   conditional subscription [RFC5839]\
    \ by using the header field\n   Suppress-If-Match: [ETag value].  With a conditional\
    \ re-subscription,\n   the notifier MUST also inspect the subscription body when\
    \ determining\n   the current subscription state.  Since the subscription is based\
    \ on a\n   list of XCAP request URIs, it is RECOMMENDED that the notifier does\n\
    \   not consider the order of these URIs when determining the equivalence\n  \
    \ to \"stored\" previous states.  If a match to the previous state is not\n  \
    \ found, the NOTIFY message MUST contain the full XML diff state\n   (similar\
    \ to the initial notification).  The notifiers SHOULD\n   implement the conditional\
    \ subscription handling with this event\n   package.\n   During re-subscriptions,\
    \ the subscriber may change the value of the\n   diff-processing parameter.  The\
    \ value change influences only\n   subsequent notifications, not the notification\
    \ (if generated)\n   followed immediately after the (re-)SUBSCRIBE request.\n\
    \   Event packages like this require reliable transfer of NOTIFY\n   messages.\
    \  This means that all messages MUST successfully be\n   transferred or the document\
    \ will become out of sync, and then patches\n   will most likely fail (or worse,\
    \ have unintended consequences).  This\n   \"xcap-diff\" event package requires,\
    \ similar to Partial-PIDF-Notify\n   RFC 5263 [RFC5263], that a notifier MUST\
    \ NOT send a new NOTIFY\n   request to the same dialog unless a successful 200-response\
    \ has been\n   received for the last sent NOTIFY request.  If the NOTIFY request\n\
    \   fails due to a timeout, the notifier MUST remove the subscription.\n     \
    \ Note: This requirement ensures that out-of-order events will not\n      happen\
    \ or that the dialog will terminate after non-resolvable\n      NOTIFY request\
    \ failures.  In addition, some of the probable NOTIFY\n      error responses (for\
    \ example, 401, 407, 413) can possibly be\n      handled gracefully without tearing\
    \ down the dialog.\n   If, for example, the subscriber has selected too many elements\
    \ to\n   which to subscribe, such that the notification body would be\n   impractically\
    \ large (that is, an intermediate NOTIFY failure), the\n   notifier MAY discard\
    \ the <element> element content.  The existence of\n   elements is then indicated\
    \ with an empty <element> element, and the\n   content is not shown for those\
    \ resources.  In other words, the\n   <element> element does not have a child\
    \ element that would show the\n   subscribed \"full\" element content.\n"
- title: 4.8.  Subscriber Processing of NOTIFY Requests
  contents:
  - "4.8.  Subscriber Processing of NOTIFY Requests\n   The first NOTIFY request will\
    \ usually contain references to HTTP\n   resources including their strong ETag\
    \ values.  If the subscriber does\n   not have similar locally cached versions,\
    \ it will typically start an\n   unconditional HTTP GET request for those resources.\
    \  During this HTTP\n   retrieval time, the subscriber MAY also receive patches\
    \ to these\n   documents if it has requested them and if the documents are changing\n\
    \   rapidly.  It can happen that the version retrieved by HTTP is not the\n  \
    \ same than what is indicated in the initial notification.  A\n   subscriber can\
    \ then chain the modification list for each document,\n   and locate the position\
    \ where the previous ETag value is equal to\n   that retrieved via HTTP.  If an\
    \ ETag match is not found from the\n   first change, a subscriber MUST omit all\
    \ changes up to the point\n   where it is the same.  From that change onwards,\
    \ the subscriber\n   applies all reported patches.  If the version received via\
    \ HTTP is\n   newer than any received via the notifications, the subscriber may\
    \ not\n   find an equivalent match of an ETag value from the chain of patches.\n\
    \   This can happen since notifications are reported after HTTP changes\n   and\
    \ preferably at some minimum intervals.  Also, document removals\n   can be reported\
    \ in notifications and/or HTTP retrievals may fail\n   because of unexisting resources\
    \ (rapidly changing).  In any case, the\n   subscriber can re-fetch the possible\
    \ out-of-sync document, wait for\n   subsequent notifications or refresh the subscription\
    \ (with \"xcap-\n   patching\"), and repeat the described \"sync\" algorithm until\
    \ a \"full\"\n   sync is achieved.\n   If the notifier aggregates patches, the\
    \ previous modification list\n   may not contain the ETag value retrieved by HTTP\
    \ simply because of\n   aggregation optimizations.  A similar out-of-sync cycle\
    \ can happen\n   when new (subscribed) documents are created that change rapidly.\
    \  To\n   avoid such difficulties, the subscriber MAY start the subscription\n\
    \   with the \"xcap-patching\" mode, and then refresh the subscription with\n\
    \   the \"aggregate\" mode after the initial sync is achieved.  Naturally,\n \
    \  the subscriber can revert back to the \"xcap-patching\" mode from\n   \"aggregate\"\
    \ at any time and vice versa.\n   If the subscriber has received a \"full\" sync\
    \ and it has detected that\n   some of the resources are being served with the\
    \ \"xcap-patching\" mode\n   while others are in the \"aggregate\" mode, it SHOULD\
    \ refresh the\n   subscription to the \"aggregate\" mode.\n   The notifier MAY\
    \ at any time temporarily use the \"no-patching\" mode\n   for some resources\
    \ so that the subscriber receives only URI\n   references of modifications.  When\
    \ the notifier is acting in this\n   mode, several cycles MAY be needed before\
    \ an initial \"full\" sync is\n   achieved.  As the notifier MAY change modes\
    \ in the middle of a\n   dialog, the subscriber is always responsible for taking\
    \ appropriate\n   actions.  Also, as the last resort, the subscriber MAY always\
    \ disable\n   the usage of diff-processing by setting the \"diff-processing\"\n\
    \   parameter to \"no-patching\".\n   If a diff format cannot be applied due to\
    \ patch processing and/or\n   programming errors (for a list, see Section 5.1\
    \ of [RFC5261]), the\n   subscriber SHOULD refresh the subscription and disable\
    \ patching by\n   setting the \"diff-processing\" parameter to \"no-patching\"\
    .  The\n   subscriber SHOULD NOT reply with a non-200 response since the\n   notifier\
    \ cannot make corrections.\n   During unconditional re-subscriptions, the subscriber\
    \ MUST stamp the\n   received state of all previous resources as stale.  However,\
    \ if a\n   conditional [RFC5839] re-subscription is successful, the subscriber\n\
    \   MUST preserve the current state of resources unless the subscribed\n   URI\
    \ list has changed.  That is, the subscriber MUST fetch the\n   resource's state,\
    \ for example, from some local cache.\n"
- title: 4.9.  Handling of Forked Requests
  contents:
  - "4.9.  Handling of Forked Requests\n   This specification allows only a single\
    \ dialog to be constructed from\n   an initial SUBSCRIBE request.  If the subscriber\
    \ receives forked\n   responses to a SUBSCRIBE, the subscriber MUST apply the\
    \ procedures in\n   Section 4.4.9 of RFC 3265 [RFC3265] for handling non-allowed\
    \ forked\n   requests.\n"
- title: 4.10.  Rate of Notifications
  contents:
  - "4.10.  Rate of Notifications\n   Notifiers of an \"xcap-diff\" event package\
    \ SHOULD NOT generate\n   notifications for a single subscription at a rate of\
    \ more than once\n   every five seconds.\n"
- title: 4.11.  State Agents
  contents:
  - "4.11.  State Agents\n   State agents play no role in this package.\n"
- title: 5.  An Initial Example NOTIFY Document
  contents:
  - "5.  An Initial Example NOTIFY Document\n   Figure 2 shows an example initial\
    \ XCAP diff format document provided\n   by the first NOTIFY request to the SUBSCRIBE\
    \ example in Figure 1.\n   The following is an example Event header field for\
    \ this SUBSCRIBE\n   request:\n   Event: xcap-diff; diff-processing=aggregate\n\
    \   The subscriber requests that the notifier \"aggregate\" XCAP component\n \
    \  updates and anticipates that the subsequent notifications will\n   contain\
    \ aggregated patches to these documents.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <d:xcap-diff xmlns:d=\"urn:ietf:params:xml:ns:xcap-diff\"\n    \
    \            xmlns:s=\"urn:ietf:params:xml:ns:rls-services\"\n              xcap-root=\"\
    http://xcap.example.com/root/\">\n    <d:document new-etag=\"7ahggs\"\n      \
    \        sel=\"resource-lists/users/sip:joe@example.com/index\"/>\n    <d:document\
    \ new-etag=\"30376adf\"\n              sel=\"pidf-manipulation/users/sip:joe@example.com/index\"\
    />\n    <d:element sel=\"rls-services/users/sip:joe@example.com/index/\n   ~~/*/service%5b@uri='sip:marketing@example.com'%5d\"\
    \n             xmlns:rl=\"urn:ietf:params:xml:ns:resource-lists\"\n       ><s:service\
    \ uri=\"sip:marketing@example.com\">\n         <s:list name=\"marketing\">\n \
    \          <rl:entry uri=\"sip:joe@example.com\"/>\n           <rl:entry uri=\"\
    sip:sudhir@example.com\"/>\n         </s:list>\n         <s:packages>\n      \
    \     <s:package>presence</s:package>\n         </s:packages>\n       </s:service></d:element>\n\
    \   </d:xcap-diff>\n          Figure 2: An example initial XCAP diff format document\n\
    \   Note that the resource-list \"index\" document included only the new\n   ETag\
    \ value, as the document existed during the subscription time.  In\n   the \"\
    pidf-manipulation\" collection, there is only a single document\n   for which\
    \ the user has read privileges.  The <service> element exists\n   within the rls-services\
    \ \"index\" document and its content is shown.\n   Note also that the <service>\
    \ element was located using the Default\n   Document Namespace (no prefix in XCAP\
    \ Node Selector value) although\n   it has an \"s\" prefix in the source document.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA has added a new event package to the SIP Event\
    \ Types Namespace\n   registry as follows:\n     Package Name    Type        Contact\
    \                      Reference\n     -------------   --------    -------   \
    \                   ---------\n     xcap-diff       package     IETF Real-time\
    \ Applications  [RFC5875]\n                                 <rai@ietf.org>\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document defines a new SIP event package\
    \ for the SIP event\n   notification framework specified in RFC 3265 [RFC3265].\
    \  As such, all\n   the security considerations of RFC 3265 apply.  The configuration\n\
    \   data can contain sensitive information, and both the client and the\n   server\
    \ need to authenticate each other.  The notifiers MUST\n   authenticate the \"\
    xcap-diff\" event package subscriber using the\n   normal SIP authentication mechanisms,\
    \ for example, Digest as defined\n   in Section 22 of RFC 3261 [RFC3261].  The\
    \ notifiers MUST be aware of\n   XCAP User Identifiers (XUI) and how to map the\
    \ authenticated SIP\n   identities unambiguously with XUIs.\n   Since XCAP [RFC4825]\
    \ provides a basic authorization policy for\n   resources and since notifications\
    \ contain content similar to XCAP\n   resources, the security considerations of\
    \ XCAP also apply.  The\n   notifiers MUST obey the XCAP authorization rules when\
    \ signalling\n   resource changes.  In practice, this means following the read\n\
    \   privilege rules of XCAP resources.\n   Denial-of-service attacks against notifiers\
    \ deserve special mention.\n   The following can cause denial of service due to\
    \ intensive\n   processing: subscriptions to a long list of URIs, \"pending\"\n\
    \   subscriptions to non-existent documents or XCAP components, and diff-\n  \
    \ generation algorithms that try to optimize the required bandwidth\n   usage\
    \ to extremes.\n   The mechanism used for conveying xcap-diff event information\
    \ MUST\n   ensure integrity and SHOULD ensure confidentially of the information.\n\
    \   An end-to-end SIP encryption mechanism, such as S/MIME described in\n   Section\
    \ 26.2.4 of RFC 3261 [RFC3261], SHOULD be used.  If that is not\n   available,\
    \ it is RECOMMENDED that TLS [RFC5246] be used between\n   elements to provide\
    \ hop-by-hop authentication and encryption\n   mechanisms described in Sections\
    \ 26.2.2 (\"SIPS URI Scheme\") and\n   26.3.2.2 (\"Interdomain Requests\") of\
    \ RFC 3261 [RFC3261].\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The author would like to thank Jonathan Rosenberg for\
    \ his valuable\n   comments and for providing the initial event package, and Aki\
    \ Niemi,\n   Pekka Pessi, Miguel Garcia, Pavel Dostal, Krisztian Kiss, Anders\n\
    \   Lindgren, Sofie Lassborn, Keith Drage, Stephen Hinton, Byron Campen,\n   Avshalom\
    \ Houri, Ben Campbell, Paul Kyzivat, Spencer Dawkins, Pasi\n   Eronen, and Chris\
    \ Newman for their valuable comments.  Lisa Dusseault\n   critiqued the document\
    \ during IESG review, raising numerous issues\n   that resulted in improved document\
    \ quality.  Further, technical\n   writer A. Jean Mahoney devoted countless hours\
    \ to integrating Lisa's\n   comments and cleaning up the technical English usage.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n   \
    \           Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n       \
    \       Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3261]  Rosenberg,\
    \ J., Schulzrinne, H., Camarillo, G., Johnston,\n              A., Peterson, J.,\
    \ Sparks, R., Handley, M., and E.\n              Schooler, \"SIP: Session Initiation\
    \ Protocol\", RFC 3261,\n              June 2002.\n   [RFC3265]  Roach, A., \"\
    Session Initiation Protocol (SIP)-Specific\n              Event Notification\"\
    , RFC 3265, June 2002.\n   [RFC4825]  Rosenberg, J., \"The Extensible Markup Language\
    \ (XML)\n              Configuration Access Protocol (XCAP)\", RFC 4825, May 2007.\n\
    \   [RFC4826]  Rosenberg, J., \"Extensible Markup Language (XML) Formats\n   \
    \           for Representing Resource Lists\", RFC 4826, May 2007.\n   [RFC5234]\
    \  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5246]  Dierks, T. and E. Rescorla,\
    \ \"The Transport Layer Security\n              (TLS) Protocol Version 1.2\",\
    \ RFC 5246, August 2008.\n   [RFC5261]  Urpalainen, J., \"An Extensible Markup\
    \ Language (XML) Patch\n              Operations Framework Utilizing XML Path\
    \ Language (XPath)\n              Selectors\", RFC 5261, September 2008.\n   [RFC5839]\
    \  Niemi, A. and D. Willis, \"An Extension to Session\n              Initiation\
    \ Protocol (SIP) Events for Conditional Event\n              Notification\", RFC\
    \ 5839, May 2010.\n   [RFC5874]  Rosenberg, J. and J. Urpalainen, \"An Extensible\
    \ Markup\n              Language (XML) Document Format for Indicating a Change\
    \ in\n              XML Configuration Access Protocol (XCAP) Resources\",\n  \
    \            RFC 5874, May 2010.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC4918]               Dusseault, L., \"HTTP\
    \ Extensions for Web\n                           Distributed Authoring and Versioning\n\
    \                           (WebDAV)\", RFC 4918, June 2007.\n   [RFC5263]   \
    \            Lonnfors, M., Costa-Requena, J., Leppanen,\n                    \
    \       E., and H. Khartabil, \"Session Initiation\n                         \
    \  Protocol (SIP) Extension for Partial\n                           Notification\
    \ of Presence Information\",\n                           RFC 5263, September 2008.\n\
    \   [W3C.REC-xml-20060816]  Paoli, J., Bray, T., Yergeau, F., Maler, E.,\n   \
    \                        and C. Sperberg-McQueen, \"Extensible Markup\n      \
    \                     Language (XML) 1.0 (Fourth Edition)\", World\n         \
    \                  Wide Web Consortium FirstEdition REC-xml-\n               \
    \            20060816, August 2006,\n                           <http://www.w3.org/TR/2006/REC-xml-20060816>.\n"
- title: Appendix A.  Informative Examples
  contents:
  - "Appendix A.  Informative Examples\n   These examples illustrate the basic features\
    \ of the xcap-diff event\n   package.  Only the relevant header fields are shown.\
    \  Note also that\n   the SIP request URIs of these examples don't correspond\
    \ to reality.\n"
- title: A.1.  Initial Documents on an XCAP Server
  contents:
  - "A.1.  Initial Documents on an XCAP Server\n   The following documents exist on\
    \ an XCAP server (xcap.example.com)\n   with an imaginary \"tests\" application\
    \ usage (there's no Default\n   Document Namespace defined in this imaginary application\
    \ usage).\n   http://xcap.example.com/tests/users/sip:joe@example.com/index:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This is a\
    \ sample document</note>\n   </doc>\n   and then\n   http://xcap.example.com/tests/users/sip:john@example.com/index:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This is another\
    \ sample document</note>\n   </doc>\n"
- title: A.2.  An Initial Subscription
  contents:
  - "A.2.  An Initial Subscription\n   The following demonstrates the listing of collection\
    \ contents and it\n   shows only resources where the user has read privileges.\
    \  The user\n   Joe, whose XUI is \"sip:joe@example.com\", sends an initial\n\
    \   subscription:\n   SUBSCRIBE sip:tests@xcap.example.com SIP/2.0\n   ...\n \
    \  Accept: application/xcap-diff+xml\n   Event: xcap-diff; diff-processing=aggregate\n\
    \   Content-Type: application/resource-lists+xml\n   Content-Length: [XXX]\n \
    \  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <resource-lists xmlns=\"urn:ietf:params:xml:ns:resource-lists\"\
    >\n    <list>\n     <entry uri=\"tests/users/sip:joe@example.com/\"/>\n    </list>\n\
    \   </resource-lists>\n   In addition to the 200 (OK) response, the notifier sends\
    \ the first\n   NOTIFY:\n   NOTIFY sip:joe@userhost.example.com SIP/2.0\n   ...\n\
    \   Event: xcap-diff\n   Content-Type: application/xcap-diff+xml\n   Content-Length:\
    \ [XXX]\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xcap-diff xmlns=\"\
    urn:ietf:params:xml:ns:xcap-diff\"\n              xcap-root=\"http://xcap.example.com/\"\
    >\n    <document new-etag=\"7ahggs\"\n              sel=\"tests/users/sip:joe@example.com/index\"\
    />\n   </xcap-diff>\n   The subscriber learns that the document on this \"tests\"\
    \ application\n   usage is equivalent to its locally cached version, so it does\
    \ not\n   act.  If the local version had been different, the subscriber would\n\
    \   most likely re-fetch the document.\n   If the subscriber had requested the\
    \ \"tests/users/\" collection, the\n   notification body would have been the same\
    \ since Joe has no read\n   privileges to John's resources (XCAP default behavior).\n\
    \   If the Expires header field had a value \"0\", the request would be\n   similar\
    \ to the PROPFIND method of WebDAV.  The syntax and responses\n   differ, however.\n"
- title: A.3.  A Document Addition into a Collection
  contents:
  - "A.3.  A Document Addition into a Collection\n   Let's say that Joe adds a new\
    \ document to his collection, using\n   either the same client or another client\
    \ running on a different\n   device.  He does an HTTP PUT to his application usage\
    \ collection:\n   PUT /tests/users/sip:joe@example.com/another_document HTTP/1.1\n\
    \   Host: xcap.example.com\n   ....\n   Content-Type: application/xml\n   Content-Length:\
    \ [XXX]\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This\
    \ is another sample document</note>\n   </doc>\n   This HTTP PUT request results\
    \ in the XCAP client receiving a strong\n   HTTP ETag \"terteer\" for this new\
    \ document.\n   Then the subscriber receives a notification afterwards:\n   NOTIFY\
    \ sip:joe@userhost.example.com SIP/2.0\n   ...\n   Event: xcap-diff\n   Content-Type:\
    \ application/xcap-diff+xml\n   Content-Length: [XXX]\n   <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\"?>\n   <xcap-diff xmlns=\"urn:ietf:params:xml:ns:xcap-diff\"\
    \n              xcap-root=\"http://xcap.example.com/\">\n    <document new-etag=\"\
    terteer\"\n              sel=\"tests/users/sip:joe@example.com/another_document\"\
    />\n   </xcap-diff>\n   Note that the result is \"additive\"; it doesn't indicate\
    \ the already\n   indicated \"index\" document.  Only the initial (or refreshed)\n\
    \   notification contains all document URI references.\n   If Joe's client both\
    \ modifies the documents and refreshes the\n   subscriptions, it would typically\
    \ ignore this notification, since its\n   modifications had caused the notification.\
    \  If the client that\n   received this NOTIFY hadn't submitted the document change,\
    \ it would\n   probably fetch this new document.\n   If Joe's client refreshes\
    \ the subscription with the same request body\n   as in the initial subscription,\
    \ the result will include these two\n   documents: \"index\" and \"another_document\"\
    \ with their ETags.\n"
- title: A.4.  A Series of XCAP Component Modifications
  contents:
  - "A.4.  A Series of XCAP Component Modifications\n   Now Joe's client uses its\
    \ XCAP patching capability by doing the\n   following:\n   PUT /tests/users/sip:joe@example.com/index/~~/doc/foo\
    \ HTTP/1.1\n   Host: xcap.example.com\n   ....\n   Content-Type: application/xcap-el+xml\n\
    \   Content-Length: [XXX]\n   <foo>this is a new element</foo>\n   Since the insertion\
    \ of the element is successful, Joe's client\n   receives the new HTTP ETag \"\
    fgherhryt3\" of the updated \"index\"\n   document.\n   Immediately thereafter,\
    \ Joe's client issues another HTTP request\n   (this request could even be pipe-lined):\n\
    \   PUT /tests/users/sip:joe@example.com/index/~~/doc/bar HTTP/1.1\n   Host: xcap.example.com\n\
    \   ....\n   Content-Type: application/xcap-el+xml\n   Content-Length: [XXX]\n\
    \   <bar>this is a bar element\n   </bar>\n   The reported new HTTP ETag of \"\
    index\" is now \"dgdgdfgrrr\".\n   And Joe's client issues yet another HTTP request:\n\
    \   PUT /tests/users/sip:joe@example.com/index/~~/doc/foobar HTTP/1.1\n   Host:\
    \ xcap.example.com\n   ....\n   Content-Type: application/xcap-el+xml\n   Content-Length:\
    \ [XXX]\n   <foobar>this is a foobar element</foobar>\n   The reported new ETag\
    \ of \"index\" is now \"63hjjsll\".\n   After awhile, Joe's client receives a\
    \ notification with an embedded\n   patch since it has requested \"aggregate\"\
    \ diff-processing and the\n   notifier is capable of producing them:\n   NOTIFY\
    \ sip:joe@userhost.example.com SIP/2.0\n   ...\n   Event: xcap-diff\n   Content-Type:\
    \ application/xcap-diff+xml\n   Content-Length: [XXX]\n   <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\"?>\n   <d:xcap-diff xmlns:d=\"urn:ietf:params:xml:ns:xcap-diff\"\
    \n                xcap-root=\"http://xcap.example.com/\">\n    <d:document previous-etag=\"\
    7ahggs3\"\n                sel=\"tests/users/sip:joe@example.com/index\"\n   \
    \             new-etag=\"63hjjsll\">\n     <d:add sel=\"*\"\n       ><foo>this\
    \ is a new element</foo><bar>this is a bar element\n   </bar><foobar>this is a\
    \ foobar element</foobar></d:add>\n    </d:document>\n   </d:xcap-diff>\n   Joe's\
    \ client applies this patch to the locally cached \"index\"\n   document, detects\
    \ the ETag update, and stores the last ETag value.\n   Note how several XCAP component\
    \ modifications were aggregated.\n   Note also that, if Joe's client did not have\
    \ a locally cached version\n   of the reference document, it would have needed\
    \ to do an HTTP GET\n   request after the initial notification.  If the ETag of\
    \ the received\n   resource by HTTP did not match either the previous or new ETag\
    \ of\n   this aggregated patch, an out-of-sync condition would be probable.\n\
    \   This issue is not typical, but it can happen.  To resolve the issue,\n   the\
    \ client could re-fetch the \"index\" document and/or wait for\n   subsequent\
    \ notifications to detect a match.  A better and simpler way\n   to avoid the\
    \ issue is to refresh the subscription with the \"xcap-\n   patching\" mode and\
    \ later refresh with the \"aggregate\" mode.\n   Alternatively, if the notifier's\
    \ operational mode been \"xcap-\n   patching\", the NOTIFY could have been the\
    \ following:\n   NOTIFY sip:joe@userhost.example.com SIP/2.0\n   ...\n   Event:\
    \ xcap-diff\n   Content-Type: application/xcap-diff+xml\n   Content-Length: [XXX]\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <d:xcap-diff xmlns:d=\"urn:ietf:params:xml:ns:xcap-diff\"\
    \n              xcap-root=\"http://xcap.example.com/\">\n    <d:document previous-etag=\"\
    7ahggs\"\n                sel=\"tests/users/sip:joe@example.com/index\"\n    \
    \            new-etag=\"fgherhryt3\">\n      <d:add sel=\"*\"\n       ><foo>this\
    \ is a new element</foo></d:add></d:document>\n    <d:document previous-etag=\"\
    fgherhryt3\"\n                sel=\"tests/users/sip:joe@example.com/index\"\n\
    \                new-etag=\"dgdgdfgrrr\">\n      <d:add sel=\"*\"\n       ><bar>this\
    \ is a bar element\n   </bar></d:add></d:document>\n    <d:document previous-etag=\"\
    dgdgdfgrrr\"\n                sel=\"tests/users/sip:joe@example.com/index\"\n\
    \                new-etag=\"63hjjsll\">\n      <d:add sel=\"*\"\n       ><foobar>this\
    \ is a foobar element</foobar></d:add></d:document>\n   </d:xcap-diff>\n   If\
    \ the client had to re-fetch the \"index\" document after the initial\n   notification,\
    \ it could have skipped some or all of these patches,\n   depending on whether\
    \ the HTTP ETag matched some of these ETags in the\n   chain of patches.  If the\
    \ HTTP ETag did not match and the received\n   HTTP version is a newer version\
    \ indicated in later notification(s),\n   the sync may then be achieved since\
    \ the notifier provided the full\n   change history in the \"xcap-patching\" mode.\n\
    \   Last, the notifier could (temporarily) fall back to the \"no-patching\"\n\
    \   mode, which allows the notifier to keep the dialog alive when there\n   are\
    \ too many updates:\n   NOTIFY sip:joe@userhost.example.com SIP/2.0\n   ...\n\
    \   Event: xcap-diff\n   Content-Type: application/xcap-diff+xml\n   Content-Length:\
    \ [XXX]\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xcap-diff xmlns=\"\
    urn:ietf:params:xml:ns:xcap-diff\"\n              xcap-root=\"http://xcap.example.com/\"\
    >\n    <document previous-etag=\"7ahggs3\"\n              sel=\"tests/users/sip:joe@example.com/index\"\
    \n              new-etag=\"63hjjsll\"/>\n    </xcap-diff>\n   At any time, the\
    \ notifier may fall back to the \"no-patching\" mode for\n   some or all of the\
    \ subscribed documents.\n"
- title: A.5.  An XCAP Component Subscription
  contents:
  - "A.5.  An XCAP Component Subscription\n   The user Joe sends an initial subscription\
    \ for the \"id\" attribute of\n   a <doc> element.  The \"index\" document exists,\
    \ but the <doc> root\n   element does not contain the \"id\" attribute at the\
    \ time of the\n   subscription.\n   SUBSCRIBE sip:tests@xcap.example.com SIP/2.0\n\
    \   ...\n   Accept: application/xcap-diff+xml\n   Event: xcap-diff\n   Content-Type:\
    \ application/resource-lists+xml\n   Content-Length: [XXX]\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <resource-lists xmlns=\"urn:ietf:params:xml:ns:resource-lists\"\
    >\n    <list>\n     <entry uri=\"tests/users/sip:joe@example.com/index/~~/doc/@id\"\
    />\n    </list>\n   </resource-lists>\n   The first NOTIFY looks like the following\
    \ since there is nothing to\n   indicate:\n   NOTIFY sip:joe@userhost.example.com\
    \ SIP/2.0\n   ...\n   Event: xcap-diff\n   Content-Type: application/xcap-diff+xml\n\
    \   Content-Length: [XXX]\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xcap-diff\
    \ xmlns=\"urn:ietf:params:xml:ns:xcap-diff\"\n              xcap-root=\"http://xcap.example.com/\"\
    />\n   Note that if the \"index\" document hadn't existed, the first NOTIFY\n\
    \   request would have been the same.  The XCAP diff document format\n   doesn't\
    \ indicate reasons for non-existing resources.\n   Afterwards, Joe's client updates\
    \ the whole document root element\n   including the attribute \"id\" (not a typical\
    \ XCAP operation or a\n   preferred one, just an illustration here):\n   PUT /tests/users/sip:joe@example.com/index/~~/doc\
    \ HTTP/1.1\n   Host: xcap.example.com\n   ....\n   Content-Type: application/xcap-el+xml\n\
    \   Content-Length: [XXX]\n   <doc id=\"bar\">This is a new root element</doc>\n\
    \   The new HTTP ETag of the \"index\" document is now \"dwawrrtyy\".\n   Then\
    \ Joe's client gets a notification:\n   NOTIFY sip:joe@userhost.example.com SIP/2.0\n\
    \   ...\n   Event: xcap-diff\n   Content-Type: application/xcap-diff+xml\n   Content-Length:\
    \ [XXX]\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xcap-diff xmlns=\"\
    urn:ietf:params:xml:ns:xcap-diff\"\n              xcap-root=\"http://xcap.example.com/\"\
    >\n    <attribute sel=\"tests/users/sip:joe@example.com/index/~~/doc/@id\"\n \
    \    >bar</attribute>\n   </xcap-diff>\n   Note that the HTTP ETag value of the\
    \ new document is not shown, as it\n   is irrelevant for this use-case.\n   Then\
    \ Joe's client removes the \"id\" attribute:\n   DELETE /tests/users/sip:joe@example.com/index/~~/doc/@id\
    \ HTTP/1.1\n   Host: xcap.example.com\n   ....\n   Content-Length: 0\n   And the\
    \ subscriber gets a notification:\n   NOTIFY sip:joe@userhost.example.com SIP/2.0\n\
    \   ...\n   Event: xcap-diff\n   Content-Type: application/xcap-diff+xml\n   Content-Length:\
    \ [XXX]\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xcap-diff xmlns=\"\
    urn:ietf:params:xml:ns:xcap-diff\"\n              xcap-root=\"http://xcap.example.com/\"\
    >\n    <attribute sel=\"tests/users/sip:joe@example.com/index/~~/doc/@id\"\n \
    \    exists=\"0\"/>\n   </xcap-diff>\n   The notification indicates that the subscribed\
    \ attribute was removed\n   from the document.  Naturally, attributes are \"removed\"\
    \ if the\n   element where they belong is removed, for example, by an HTTP DELETE\n\
    \   request.  The component selections indicate only the existence of\n   attributes\
    \ or elements.\n"
- title: A.6.  A Conditional Subscription
  contents:
  - "A.6.  A Conditional Subscription\n   The last example is a conditional subscription\
    \ where a full refresh\n   can be avoided when there are no changes in resources.\
    \  Joe's client\n   sends an initial subscription:\n   SUBSCRIBE sip:tests@xcap.example.com\
    \ SIP/2.0\n   ...\n   Accept: application/xcap-diff+xml\n   Event: xcap-diff;\
    \ diff-processing=xcap-patching\n   Content-Type: application/resource-lists+xml\n\
    \   Content-Length: [XXX]\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <resource-lists\
    \ xmlns=\"urn:ietf:params:xml:ns:resource-lists\">\n    <list>\n     <entry uri=\"\
    tests/users/sip:joe@example.com/\"/>\n    </list>\n   </resource-lists>\n   Since\
    \ there are now two documents in the repository, the first NOTIFY\n   looks like\
    \ the following:\n   NOTIFY sip:joe@userhost.example.com SIP/2.0\n   ...\n   Event:\
    \ xcap-diff\n   SIP-ETag: xggfefe54\n   Content-Type: application/xcap-diff+xml\n\
    \   Content-Length: [XXX]\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xcap-diff\
    \ xmlns=\"urn:ietf:params:xml:ns:xcap-diff\"\n              xcap-root=\"http://xcap.example.com/\"\
    >\n    <document new-etag=\"63hjjsll\"\n              sel=\"tests/users/sip:joe@example.com/index\"\
    />\n    <document new-etag=\"terteer\"\n              sel=\"tests/users/sip:joe@example.com/another_document\"\
    />\n   </xcap-diff>\n   Note that the NOTIFY request contains the SIP-ETag \"\
    xggfefe54\".  This\n   SIP-ETag is placed in the Suppress-If-Match header field\
    \ of the\n   conditional subscription.  The \"diff-processing\" mode also is changed\n\
    \   (or is requested to change):\n   SUBSCRIBE sip:tests@xcap.example.com SIP/2.0\n\
    \   ...\n   Suppress-If-Match: xggfefe54\n   Accept: application/xcap-diff+xml\n\
    \   Event: xcap-diff; diff-processing=aggregate\n   Content-Type: application/resource-lists+xml\n\
    \   Content-Length: [XXX]\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <resource-lists\
    \ xmlns=\"urn:ietf:params:xml:ns:resource-lists\">\n    <list>\n     <entry uri=\"\
    tests/users/sip:joe@example.com/\"/>\n    </list>\n   </resource-lists>\n   If\
    \ the notifier finds a match to the previous stored state when it\n   evaluates\
    \ this request, it responds with 204 (No Notification).  If\n   there are no reportable\
    \ changes as per [RFC5839], NOTIFY request\n   generation is suppressed.  When\
    \ the notifier can aggregate several\n   modifications, this re-subscription enables\
    \ the processing of that\n   mode thereafter.  Indeed, the re-subscription may\
    \ be quite process-\n   intensive, especially when there are a large number of\
    \ relevant\n   reported resources.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jari Urpalainen\n   Nokia\n   Itamerenkatu 11-13\n   Helsinki\
    \  00180\n   Finland\n   Phone: +358 7180 37686\n   EMail: jari.urpalainen@nokia.com\n\
    \   Dean Willis (editor)\n   Softarmor Systems LLC\n   3100 Independence Pk #311-164\n\
    \   Plano, TX  75075\n   USA\n   Phone: +1 214 504 19876\n   EMail: dean.willis@softarmor.com\n"
