Abstract This document defines a telnet authentication mechanism using the Digital Signature Algorithm (DSA)
It relies on the Telnet Authentication Option [RFC2941].
Command Names and Codes AUTHENTICATION
1 AUTH CLIENT TO SERVER
0 AUTH SERVER TO CLIENT
TELNET Security Extensions TELNET, as a protocol, has no concept of security.
Without negotiated options, it merely passes characters back and forth between the NVTs represented by the two TELNET processes.
In its most common usage as a protocol for remote terminal access (TCP port 23), TELNET connects to a server that requires user level authentication through a user name and password in the clear; the server does not authenticate itself to the user.
The TELNET Authentication Option provides for user authentication and server authentication.
User authentication replaces or augments the normal host password mechanism.
Server authentication is normally done in conjunction with user authentication.
In order to support these security services, the two TELNET entities must first negotiate their willingness to support the TELNET Authentication Option.
Upon agreeing to support this option, the parties are then able to perform sub option negotiations to the authentication protocol to be used, and possibly the remote user name to be used for authorization checking.
Authentication and parameter negotiation occur within an unbounded series of exchanges.
The server proposes a preference ordered list of authentication types (mechanisms) which it supports.
In addition to listing the mechanisms it supports, the server qualifies each mechanism with a modifier that specifies whether the authentication is to be one way or mutual, and in which direction the authentication is to be performed.
The client selects one mechanism from the list and responds to the server indicating its choice and the first set of authentication data needed for the selected authentication type.
The server and the client then proceed through whatever number of iterations are required to arrive at the requested authentication.
Use of Digital Signature Algorithm (DSA) DSA is also known as the Digital Signature Standard (DSS), and the names are used interchangeably.
This paper specifies a method in which DSA may be used to achieve certain security services when used in conjunction with the TELNET Authentication Option.
[FIPS180 1] is used with DSA [FIPS186].
DSA may provide either unilateral or mutual authentication.
Due to TELNET's character by character nature, it is not well suited to the application of integrity only services, therefore use of the DSA profile provides authentication
but it does not provide session integrity.
This specification follows the token and exchanges defined in NIST FIPS PUB 196
[FIPS196], Standard for Public Key Cryptographic Entity Authentication Mechanisms including Appendix A on ASN.1 encoding of messages and tokens.
All data that is covered by a digital signature must be encoded using the Distinguished Encoding Rules (DER).
However, other data may use either the Basic Encoding Rules (BER) or DER [X.208].
Unilateral Authentication with DSA Unilateral authentication must be done client to server.
What follows are the protocol steps necessary to perform DSA authentication as specified in FIPS PUB 196 under the TELNET Authentication Option framework.
Where failure modes are encountered, the return codes follow those specified in the TELNET Authentication Option.
They are not enumerated here, as they are invariant among the mechanisms used.
FIPS PUB 196 employs a set of exchanges that are transferred to provide authentication.
Each exchange employs various fields and tokens, some of which are optional.
In addition, each token has several subfields that are optional.
A conformant subset of the fields and subfields have been selected.
The tokens are ASN.1 encoded as defined in Appendix A of FIPS PUB 196, and each token is named to indicate the direction in which it flows (e.g., TokenBA flows from Party B to Party A).
All data that is covered by a digital signature must be encoded using the Distinguished Encoding Rules (DER).
Data that is not covered by a digital signature may use either the Basic Encoding Rules (BER) or DER [X.208].
Figure 1 illustrates the exchanges for unilateral authentication.
During authentication, the client may provide the user name to the server by using the authentication name sub option.
If the name sub option is not used, the server will generally prompt for a name and password in the clear.
The name sub option must be sent after the server sends the list of authentication types supported and before the client finishes the authentication exchange, this ensures that the server will not prompt for a user name and password.
In figure 1, the name sub option is sent immediately after the server presents the list of authentication types supported.
For one way DSS authentication, the two octet authentication type pair is DSS AUTH CLIENT TO SERVER
This indicates that the DSS authentication mechanism will be used to authenticate the client to the server and that no encryption will be performed.
CertA is the clients certificate.
Both certificates are X.509 certificates that contain DSS public keys[RFC2459].
The client must validate the server's certificate before using the DSA public key it contains.
Within the unbounded authentication exchange, implementation is greatly simplified if each portion of the exchange carries a unique identifier.
For this reason, a single octet sub option identifier is carried immediately after the two octet authentication type pair.
The exchanges detailed in Figure 1 below presume knowledge of FIPS PUB 196 and the TELNET Authentication Option.
The client is Party A, while the server is Party B.
At the end of the exchanges, the client is authenticated to the server.
SEND <list of authentication options> IAC SE IAC SB AUTHENTICATION NAME <user name>
IAC SB AUTHENTICATION IS DSS AUTH CLIENT TO SERVER
INI CRED FWD OFF DSS TOKENBA Sequence( TokenID, TokenBA )
IAC SE IAC SB AUTHENTICATION IS DSS AUTH CLIENT TO SERVER
INI CRED FWD OFF DSS CERTA
TOKENAB Sequence( TokenID, CertA, TokenAB )
Mutual Authentication with DSA Mutual authentication is slightly more complex.
Figure 2 illustrates the exchanges.
For mutual DSS authentication, the two octet authentication type pair is DSS AUTH CLIENT TO SERVER
This indicates that the DSS authentication mechanism will be used to mutually authenticate the client and the server and that no encryption will be performed.
IS DSS AUTH CLIENT TO SERVER
INI CRED FWD OFF DSS TOKENBA Sequence( TokenID, TokenBA )
IAC SE Client (Party A)
IAC SB AUTHENTICATION IS DSS AUTH CLIENT TO SERVER
INI CRED FWD OFF DSS CERTA
TOKENAB Sequence( TokenID, CertA, TokenAB )
INI CRED FWD OFF DSS CERTB
Sequence( TokenID, CertB, TokenBA2 )
IAC SE   Figure 2 4.
As stated earlier, a conformant subset of the defined fields and subfields from FIPS PUB 196 have been selected.
This section provides the ASN.1 syntax for that conformant subset.
Figure 1 and Figure 2 include representations of the structures defined in this section.
Implementors should refer to the following table to determine the ASN.1 definitions that match the figure references:
Figure 1   Sequence( TokenID, TokenBA )
MessageBA Sequence( TokenID, CertA, TokenAB )
Figure 2   Sequence( TokenID, TokenBA )
MessageBA Sequence( TokenID, CertA, TokenAB )
MessageAB Sequence( TokenID, CertB, TokenBA2 )
The following ASN.1 definitions specify the conformant subset of FIPS 196.
For simplicity, no optional fields or subfields are included.
The ASN.1 definition for CertificationPath is imported from CCITT Recommendation X.509 [X.509], and The ASN.1 definition for Name is imported from CCITT Recommendation X.501 [X.501].
These ASN.1 definitions are not repeated here.
All DSA signature values are encoded as a sequence of two integers, employing the same conventions specified in RFC 2459, section 7.2.2.
TokenType is used to distinguish the message type and the authentication type (either unilateral or mutual).
The following table provides the values needed to implement this specification:
This entire memo is about security mechanisms.
For DSA to provide the authentication discussed, the implementation must protect the private key from disclosure.
Implementations must randomly generate DSS private keys, 'k' values used in DSS signatures, and nonces.
The use of inadequate pseudo  random number generators (PRNGs) to generate cryptographic values can result in little or no security.
An attacker may find it much easier to reproduce the PRNG environment that produced the values, searching the resulting small set of possibilities, rather than using a brute force search.
The generation of quality random numbers is difficult.
[RFC1750] offers important guidance in this area, and Appendix 3 of FIPS PUB 186
[FIPS186] provides one quality PRNG technique.
The authentication type DSS and its associated suboption values are registered with IANA.
Any suboption values used to extend the protocol as described in this document must be registered with IANA before use.
IANA is instructed not to issue new suboption values without submission of documentation of their use.
