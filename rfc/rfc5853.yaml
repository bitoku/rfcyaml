- title: __initial_text__
  contents:
  - "          Requirements from Session Initiation Protocol (SIP)\n             \
    \   Session Border Control (SBC) Deployments\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes functions implemented in Session Initiation\n\
    \   Protocol (SIP) intermediaries known as Session Border Controllers\n   (SBCs).\
    \  The goal of this document is to describe the commonly\n   provided functions\
    \ of SBCs.  A special focus is given to those\n   practices that are viewed to\
    \ be in conflict with SIP architectural\n   principles.  This document also explores\
    \ the underlying requirements\n   of network operators that have led to the use\
    \ of these functions and\n   practices in order to identify protocol requirements\
    \ and determine\n   whether those requirements are satisfied by existing specifications\n\
    \   or if additional standards work is required.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5853.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Background on SBCs ..............................................4\n  \
    \    2.1. Peering Scenario ...........................................6\n    \
    \  2.2. Access Scenario ............................................6\n   3. Functions\
    \ of SBCs ...............................................8\n      3.1. Topology\
    \ Hiding ............................................8\n           3.1.1. General\
    \ Information and Requirements ................8\n           3.1.2. Architectural\
    \ Issues ................................9\n           3.1.3. Example .............................................9\n\
    \      3.2. Media Traffic Management ..................................11\n  \
    \         3.2.1. General Information and Requirements ...............11\n    \
    \       3.2.2. Architectural Issues ...............................12\n      \
    \     3.2.3. Example ............................................13\n      3.3.\
    \ Fixing Capability Mismatches ..............................14\n           3.3.1.\
    \ General Information and Requirements ...............14\n           3.3.2. Architectural\
    \ Issues ...............................14\n           3.3.3. Example ............................................15\n\
    \      3.4. Maintaining SIP-Related NAT Bindings ......................15\n  \
    \         3.4.1. General Information and Requirements ...............15\n    \
    \       3.4.2. Architectural Issues ...............................16\n      \
    \     3.4.3. Example ............................................17\n      3.5.\
    \ Access Control ............................................18\n           3.5.1.\
    \ General Information and Requirements ...............18\n           3.5.2. Architectural\
    \ Issues ...............................19\n           3.5.3. Example ............................................19\n\
    \      3.6. Protocol Repair ...........................................20\n  \
    \         3.6.1. General Information and Requirements ...............20\n    \
    \       3.6.2. Architectural Issues ...............................21\n      \
    \     3.6.3. Examples ...........................................21\n      3.7.\
    \ Media Encryption ..........................................21\n           3.7.1.\
    \ General Information and Requirements ...............21\n           3.7.2. Architectural\
    \ Issues ...............................22\n           3.7.3. Example ............................................22\n\
    \   4. Derived Requirements for Future SIP Standardization Work .......23\n  \
    \ 5. Security Considerations ........................................23\n   6.\
    \ Acknowledgements ...............................................24\n   7. References\
    \ .....................................................25\n      7.1. Normative\
    \ References ......................................25\n      7.2. Informative\
    \ References ....................................25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In the past few years, there has been a rapid adoption of\
    \ the Session\n   Initiation Protocol (SIP) [1] and deployment of SIP-based\n\
    \   communications networks.  This has often outpaced the development and\n  \
    \ implementation of protocol specifications to meet network operator\n   requirements.\
    \  This has led to the development of proprietary\n   solutions.  Often, these\
    \ proprietary solutions are implemented in\n   network intermediaries known in\
    \ the marketplace as Session Border\n   Controllers (SBCs) because they typically\
    \ are deployed at the border\n   between two networks.  The reason for this is\
    \ that network policies\n   are typically enforced at the edge of the network.\n\
    \   Even though many SBCs currently behave in ways that can break end-to-\n  \
    \ end security and impact feature negotiations, there is clearly a\n   market\
    \ for them.  Network operators need many of the features current\n   SBCs provide,\
    \ and often there are no standard mechanisms available to\n   provide them.\n\
    \   The purpose of this document is to describe functions implemented in\n   SBCs.\
    \  A special focus is given to those practices that conflict with\n   SIP architectural\
    \ principles in some way.  The document also explores\n   the underlying requirements\
    \ of network operators that have led to the\n   use of these functions and practices\
    \ in order to identify protocol\n   requirements and determine whether those requirements\
    \ are satisfied\n   by existing specifications or if additional standards work\
    \ is\n   required.\n"
- title: 2.  Background on SBCs
  contents:
  - "2.  Background on SBCs\n   The term SBC is relatively non-specific, since it\
    \ is not standardized\n   or defined anywhere.  Nodes that may be referred to\
    \ as SBCs but do\n   not implement SIP are outside the scope of this document.\n\
    \   SBCs usually sit between two service provider networks in a peering\n   environment,\
    \ or between an access network and a backbone network to\n   provide service to\
    \ residential and/or enterprise customers.  They\n   provide a variety of functions\
    \ to enable or enhance session-based\n   multi-media services (e.g., Voice over\
    \ IP).  These functions include:\n   a) perimeter defense (access control, topology\
    \ hiding, and denial-of-\n   service prevention and detection); b) functionality\
    \ not available in\n   the endpoints (NAT traversal, protocol interworking or\
    \ repair); and\n   c) traffic management (media monitoring and Quality of Service\n\
    \   (QoS)).  Some of these functions may also get integrated into other\n   SIP\
    \ elements (like pre-paid platforms, Third Generation Partnership\n   Project\
    \ (3GPP) Proxy CSCF (P-CSCF) [6], 3GPP I-CSCF, etc.).\n   SIP-based SBCs typically\
    \ handle both signaling and media and can\n   implement behavior that is equivalent\
    \ to a \"privacy service\" (as\n   described in [2]) performing both Header Privacy\
    \ and Session\n   Privacy).  SBCs often modify certain SIP headers and message\
    \ bodies\n   that proxies are not allowed to modify.  Consequently, they are,\
    \ by\n   definition, B2BUAs (Back-to-Back User Agents).  The transparency of\n\
    \   these B2BUAs varies depending on the functions they perform.  For\n   example,\
    \ some SBCs modify the session description carried in the\n   message and insert\
    \ a Record-Route entry.  Other SBCs replace the\n   value of the Contact header\
    \ field with the SBCs' address and generate\n   a new Call-ID and new To and From\
    \ tags.\n                            +-----------------+\n                   \
    \         |       SBC       |\n                [signaling] |  +-----------+  |\n\
    \               <------------|->| signaling |<-|---------->\n                \
    \  outer     |  +-----------+  |  inner\n                  network   |       \
    \ |        |  network\n                            |  +-----------+  |\n     \
    \          <------------|->|   media   |<-|---------->\n                  [media]\
    \   |  +-----------+  |\n                            +-----------------+\n   \
    \                     Figure 1: SBC Architecture\n   Figure 1 shows the logical\
    \ architecture of an SBC, which includes a\n   signaling and a media component.\
    \  In this document, the terms outer\n   and inner network are used for describing\
    \ these two networks.  An SBC\n   is logically associated with the inner network,\
    \ and it typically\n   provides functions such as controlling and protecting access\
    \ to the\n   inner network from the outer network.  The SBC itself is configured\n\
    \   and managed by the organization operating the inner network.\n   In some scenarios,\
    \ SBCs operate with users' (implicit or explicit)\n   consent; while in others,\
    \ they operate without users' consent (this\n   latter case can potentially cause\
    \ problems).  For example, if an SBC\n   in the same administrative domain as\
    \ a set of enterprise users\n   performs topology hiding (see Section 3.1), the\
    \ enterprise users can\n   choose to route their SIP messages through it.  If\
    \ they choose to\n   route through the SBC, then the SBC can be seen as having\
    \ the users'\n   implicit consent.  Another example is a scenario where a service\n\
    \   provider has broken gateways and it deploys an SBC in front of them\n   for\
    \ protocol repair reasons (see Section 3.6).  Users can choose to\n   configure\
    \ the SBC as their gateway and, so, the SBC can be seen as\n   having the users'\
    \ implicit consent.\n"
- title: 2.1.  Peering Scenario
  contents:
  - "2.1.  Peering Scenario\n   A typical peering scenario involves two network operators\
    \ who\n   exchange traffic with each other.  An example peering scenario is\n\
    \   illustrated in Figure 2.  An originating gateway (GW-A1) in Operator\n   A's\
    \ network sends an INVITE that is routed to the SBC in Operator B's\n   network.\
    \  Then, the SBC forward it to the softswitch (SS-B).  The\n   softswitch responds\
    \ with a redirect (3xx) message back to the SBC\n   that points to the appropriate\
    \ terminating gateway (GW-B1) in\n   Operator B's network.  If Operator B does\
    \ not have an SBC, the\n   redirect message would go to the Operator A's originating\
    \ gateway.\n   After receiving the redirect message, the SBC sends the INVITE\
    \ to the\n   terminating gateway.\n            Operator A           .        \
    \        Operator B\n                                 .\n                    \
    \             .                2) INVITE\n         +-----+                 . \
    \           /--------------->+-----+\n         |SS-A |                 .     \
    \      / 3) 3xx (redir.) |SS-B |\n         +-----+                 .         \
    \ /  /---------------+-----+\n                                 .         /  /\n\
    \         +-----+  1) INVITE      +-----+--/  /                 +-----+\n    \
    \     |GW-A1|---------------->| SBC |<---/     4) INVITE    |GW-B1|\n        \
    \ +-----+                 +-----+---------------------->+-----+\n            \
    \                     .\n         +-----+                 .                  \
    \           +-----+\n         |GW-A2|                 .                      \
    \       |GW-B2|\n         +-----+                 .                          \
    \   +-----+\n                        Figure 2: Peering with SBC\n   From the SBC's\
    \ perspective the Operator A is the outer network, and\n   Operator B is the inner\
    \ network.  Operator B can use the SBC, for\n   example, to control access to\
    \ its network, protect its gateways and\n   softswitches from unauthorized use\
    \ and denial-of-service (DoS)\n   attacks, and monitor the signaling and media\
    \ traffic.  It also\n   simplifies network management by minimizing the number\
    \ of ACL (Access\n   Control List) entries in the gateways.  The gateways do not\
    \ need to\n   be exposed to the peer network, and they can restrict access (both\n\
    \   media and signaling) to the SBCs.  The SBC helps ensure that only\n   media\
    \ from sessions the SBC authorizes will reach the gateway.\n"
- title: 2.2.  Access Scenario
  contents:
  - "2.2.  Access Scenario\n   In an access scenario, presented in Figure 3, the SBC\
    \ is placed at\n   the border between the access network (outer network) and the\n\
    \   operator's network (inner network) to control access to the\n   operator's\
    \ network, protect its components (media servers,\n   application servers, gateways,\
    \ etc.) from unauthorized use and DoS\n   attacks, and monitor the signaling and\
    \ media traffic.  Also, since\n   the SBC is call stateful, it may provide access\
    \ control functions to\n   prevent over-subscription of the access links.  Endpoints\
    \ are\n   configured with the SBC as their outbound proxy address.  The SBC\n\
    \   routes requests to one or more proxies in the operator network.\n        \
    \   Access Network                  Operator Network\n         +-----+\n     \
    \    | UA1 |<---------\\\n         +-----+           \\\n                    \
    \        \\\n         +-----+             \\------->+-----+       +-------+\n\
    \         | UA2 |<-------------------->| SBC |<----->| proxy |<-- -\n        \
    \ +-----+                 /--->+-----+       +-------+\n                     \
    \           /\n         +-----+   +-----+     /\n         | UA3 +---+ NAT |<---/\n\
    \         +-----+   +-----+\n                    Figure 3: Access Scenario with\
    \ SBC\n   The SBC may be hosted in the access network (e.g., this is common\n\
    \   when the access network is an enterprise network), or in the operator\n  \
    \ network (e.g., this is common when the access network is a\n   residential or\
    \ small business network).  Despite where the SBC is\n   hosted, it is managed\
    \ by the organization maintaining the operator\n   network.\n   Some endpoints\
    \ may be behind enterprise or residential NATs.  In\n   cases where the access\
    \ network is a private network, the SBC is a NAT\n   for all traffic.  It is noteworthy\
    \ that SIP traffic may have to\n   traverse more than one NAT.  The proxy usually\
    \ does authentication\n   and/or authorization for registrations and outbound\
    \ calls.  The SBC\n   modifies the REGISTER request so that subsequent requests\
    \ to the\n   registered address-of-record are routed to the SBC.  This is done\n\
    \   either with a Path header field [3] or by modifying the Contact to\n   point\
    \ at the SBC.\n   The scenario presented in this section is a general one, and\
    \ it\n   applies also to other similar settings.  One example from a similar\n\
    \   setting is the one where an access network is the open internet, and\n   the\
    \ operator network is the network of a SIP service provider.\n"
- title: 3.  Functions of SBCs
  contents:
  - "3.  Functions of SBCs\n   This section lists those functions that are used in\
    \ SBC deployments\n   in current communication networks.  Each subsection describes\
    \ a\n   particular function or feature, the operators' requirements for\n   having\
    \ it, explanation of any impact to the end-to-end SIP\n   architecture, and a\
    \ concrete implementation example.  Each section\n   also discusses potential\
    \ concerns specific to that particular\n   implementation technique.  Suggestions\
    \ for alternative implementation\n   techniques that may be more architecturally\
    \ compatible with SIP are\n   outside the scope of this document.\n   All the\
    \ examples given in this section are simplified; only the\n   relevant header\
    \ lines from SIP and SDP (Session Description Protocol)\n   [7] messages are displayed.\n"
- title: 3.1.  Topology Hiding
  contents:
  - '3.1.  Topology Hiding

    '
- title: 3.1.1.  General Information and Requirements
  contents:
  - "3.1.1.  General Information and Requirements\n   Topology hiding consists of\
    \ limiting the amount of topology\n   information given to external parties. \
    \ Operators have a requirement\n   for this functionality because they do not\
    \ want the IP addresses of\n   their equipment (proxies, gateways, application\
    \ servers, etc.) to be\n   exposed to outside parties.  This may be because they\
    \ do not want to\n   expose their equipment to DoS attacks, they may use other\
    \ carriers\n   for certain traffic and do not want their customers to be aware\
    \ of\n   it, or they may want to hide their internal network architecture from\n\
    \   competitors or partners.  In some environments, the operator's\n   customers\
    \ may wish to hide the addresses of their equipment or the\n   SIP messages may\
    \ contain private, non-routable addresses.\n   The most common form of topology\
    \ hiding is the application of header\n   privacy (see Section 5.1 of [2]), which\
    \ involves stripping Via and\n   Record-Route headers, replacing the Contact header,\
    \ and even changing\n   Call-IDs.  However, in deployments that use IP addresses\
    \ instead of\n   domain names in headers that cannot be removed (e.g., From and\
    \ To\n   headers), the SBC may replace these IP addresses with its own IP\n  \
    \ address or domain name.\n   For a reference, there are also other ways of hiding\
    \ topology\n   information than inserting an intermediary, like an SBC, to the\n\
    \   signaling path.  One of the ways is the UA-driven privacy mechanism\n   [8],\
    \ where the UA can facilitate the concealment of topology\n   information.\n"
- title: 3.1.2.  Architectural Issues
  contents:
  - "3.1.2.  Architectural Issues\n   Performing topology hiding, as described above,\
    \ by SBCs that do not\n   have the users' consent presents some issues.  This\
    \ functionality is\n   based on a hop-by-hop trust model as opposed to an end-to-end\
    \ trust\n   model.  The messages are modified without the subscriber's consent\n\
    \   and could potentially modify or remove information about the user's\n   privacy,\
    \ security requirements, and higher-layer applications that\n   are communicated\
    \ end-to-end using SIP.  Neither user agent in an end-\n   to-end call has any\
    \ way to distinguish the SBC actions from a man-in-\n   the-middle (MITM) attack.\n\
    \   The topology hiding function does not work well with Authenticated\n   Identity\
    \ Management [4] in scenarios where the SBC does not have any\n   kind of consent\
    \ from the users.  The Authenticated Identity\n   Management mechanism is based\
    \ on a hash value that is calculated from\n   parts of From, To, Call-ID, CSeq,\
    \ Date, and Contact header fields\n   plus from the whole message body.  If the\
    \ authentication service is\n   not provided by the SBC itself, the modification\
    \ of the\n   aforementioned header fields and the message body is in violation\
    \ of\n   [4].  Some forms of topology hiding are in violation, because they\n\
    \   are, e.g., replacing the Contact header of a SIP message.\n"
- title: 3.1.3.  Example
  contents:
  - "3.1.3.  Example\n   The current way of implementing topology hiding consists\
    \ of having an\n   SBC act as a B2BUA (Back-to-Back User Agent) and remove all\
    \ traces of\n   topology information (e.g., Via and Record-Route entries) from\n\
    \   outgoing messages.\n   Imagine the following example scenario: the SBC\n \
    \  (p4.domain.example.com) receives an INVITE request from the inner\n   network,\
    \ which in this case is an operator network.  The received SIP\n   message is\
    \ shown in Figure 4.\n     INVITE sip:callee@u2.domain.example.com SIP/2.0\n \
    \    Via: SIP/2.0/UDP p3.middle.example.com;branch=z9hG4bK48jq9w174131.1\n   \
    \  Via: SIP/2.0/UDP p2.example.com;branch=z9hG4bK18an6i9234172.1\n     Via: SIP/2.0/UDP\
    \ p1.example.com;branch=z9hG4bK39bn2e5239289.1\n     Via: SIP/2.0/UDP u1.example.com;branch=z9hG4bK92fj4u7283927.1\n\
    \     Contact: sip:caller@u1.example.com\n     Record-Route: <sip:p3.middle.example.com;lr>\n\
    \     Record-Route: <sip:p2.example.com;lr>\n     Record-Route: <sip:p1.example.com;lr>\n\
    \             Figure 4: INVITE Request Prior to Topology Hiding\n   Then, the\
    \ SBC performs a topology hiding function.  In this scenario,\n   the SBC removes\
    \ and stores all existing Via and Record-Route headers,\n   and then inserts Via\
    \ and Record-Route header fields with its own SIP\n   URI.  After the topology\
    \ hiding function, the message could appear as\n   shown in Figure 5.\n     INVITE\
    \ sip:callee@u2.domain.example.com SIP/2.0\n     Via: SIP/2.0/UDP p4.domain.example.com;branch=z9hG4bK92es3w230129.1\n\
    \     Contact: sip:caller@u1.example.com\n     Record-Route: <sip:p4.domain.example.com;lr>\n\
    \              Figure 5: INVITE Request after Topology Hiding\n   Like a regular\
    \ proxy server that inserts a Record-Route entry, the\n   SBC handles every single\
    \ message of a given SIP dialog.  If the SBC\n   loses state (e.g., SBC restarts\
    \ for some reason), it may not be able\n   to route messages properly (note: some\
    \ SBCs preserve the state\n   information also on restart).  For example, if the\
    \ SBC removes Via\n   entries from a request and then restarts, thus losing state;\
    \ the SBC\n   may not be able to route responses to that request, depending on\
    \ the\n   information that was lost when the SBC restarted.\n   This is only one\
    \ example of topology hiding.  Besides topology hiding\n   (i.e., information\
    \ related to the network elements is being hidden),\n   SBCs may also do identity\
    \ hiding (i.e., information related to\n   identity of subscribers is being hidden).\
    \  While performing identity\n   hiding, SBCs may modify Contact header field\
    \ values and other header\n   fields containing identity information.  The header\
    \ fields containing\n   identity information is listed in Section 4.1 of [2].\
    \  Since the\n   publication of [2], the following header fields containing identity\n\
    \   information have been defined: \"P-Asserted-Identity\", \"Referred-By\",\n\
    \   \"Identity\", and \"Identity-Info\".\n"
- title: 3.2.  Media Traffic Management
  contents:
  - '3.2.  Media Traffic Management

    '
- title: 3.2.1.  General Information and Requirements
  contents:
  - "3.2.1.  General Information and Requirements\n   Media traffic management is\
    \ the function of controlling media\n   traffic.  Network operators may require\
    \ this functionality in order\n   to control the traffic being carried on their\
    \ network on behalf of\n   their subscribers.  Traffic management helps the creation\
    \ of\n   different kinds of billing models (e.g., video telephony can be\n   priced\
    \ differently than voice-only calls) and it also makes it\n   possible for operators\
    \ to enforce the usage of selected codecs.\n   One of the use cases for media\
    \ traffic management is the\n   implementation of intercept capabilities that\
    \ are required to support\n   audit or legal obligations.  It is noteworthy that\
    \ the legal\n   obligations mainly apply to operators providing voice services,\
    \ and\n   those operators typically have infrastructure (e.g., SIP proxies\n \
    \  acting as B2BUAs) for providing intercept capabilities even without\n   SBCs.\n\
    \   Since the media path is independent of the signaling path, the media\n   may\
    \ not traverse through the operator's network unless the SBC\n   modifies the\
    \ session description.  By modifying the session\n   description, the SBC can\
    \ force the media to be sent through a media\n   relay which may be co-located\
    \ with the SBC.  This kind of traffic\n   management can be done, for example,\
    \ to ensure a certain QoS level,\n   or to ensure that subscribers are using only\
    \ allowed codecs.  It is\n   noteworthy that the SBCs do not have direct ties\
    \ to routing topology\n   and they do not, for example, change bandwidth reservations\
    \ on\n   Traffic Engineering (TE) tunnels, nor do they have direct interaction\n\
    \   with routing protocol.\n   Some operators do not want to manage the traffic,\
    \ but only to monitor\n   it to collect statistics and make sure that they are\
    \ able to meet any\n   business service level agreements with their subscribers\
    \ and/or\n   partners.  The protocol techniques, from the SBC's viewpoint, needed\n\
    \   for monitoring media traffic are the same as for managing media\n   traffic.\n\
    \   SBCs on the media path are also capable of dealing with the \"lost\n   BYE\"\
    \ issue if either endpoint dies in the middle of the session.  The\n   SBC can\
    \ detect that the media has stopped flowing and issue a BYE to\n   both sides\
    \ to clean up any state in other intermediate elements and\n   the endpoints.\n\
    \   One possible form of media traffic management is that SBCs terminate\n   media\
    \ streams and SIP dialogs by generating BYE requests.  This kind\n   of procedure\
    \ can take place, for example, in a situation where the\n   subscriber runs out\
    \ of credits.  Media management is needed to ensure\n   that the subscriber cannot\
    \ just ignore the BYE request generated by\n   the SBC and continue its media\
    \ sessions.\n"
- title: 3.2.2.  Architectural Issues
  contents:
  - "3.2.2.  Architectural Issues\n   Implementing traffic management in this manner\
    \ requires the SBC to\n   access and modify the session descriptions (i.e., offers\
    \ and answers)\n   exchanged between the user agents.  Consequently, this approach\
    \ does\n   not work if user agents encrypt or integrity-protect their message\n\
    \   bodies end-to-end.  Again, messages are modified without subscriber\n   consent,\
    \ and user agents do not have any way to distinguish the SBC\n   actions from\
    \ an attack by a MITM.  Furthermore, this is in violation\n   of Authenticated\
    \ Identity Management [4], see Section 3.1.2.\n   The insertion of a media relay\
    \ can prevent \"non-media\" uses of the\n   media path, for example, the media\
    \ path key agreement.  Sometimes\n   this type of prevention is intentional, but\
    \ it is not always\n   necessary.  For example, if an SBC is used just for enabling\
    \ media\n   monitoring, but not for interception.\n   There are some possible\
    \ issues related to the media relaying.  If the\n   media relaying is not done\
    \ in the correct manner, it may break\n   functions like Explicit Congestion Notification\
    \ (ECN) and Path MTU\n   Discovery (PMTUD), for example.  The media relays easily\
    \ break such\n   IP and transport layer functionalities that rely on the correct\n\
    \   handling of the protocol fields.  Some especially sensitive fields\n   are,\
    \ for example, ECN and Type of Service (ToS) fields and the Don't\n   Fragment\
    \ (DF) bit.\n   The way in which media traffic management functions impedes\n\
    \   innovation.  The reason for the impediment is that in many cases,\n   SBCs\
    \ need to be able to support new forms of communication (e.g.,\n   extensions\
    \ to the SDP protocol) before new services can be put into\n   use, which slows\
    \ the adoption of new innovations.\n   If an SBC directs many media streams through\
    \ a central point in the\n   network, it is likely to cause a significant amount\
    \ of additional\n   traffic to a path to that central point.  This might create\
    \ possible\n   bottleneck in the path.\n   In this application, the SBC may originate\
    \ messages that the user may\n   not be able to authenticate as coming from the\
    \ dialog peer or the SIP\n   Registrar/Proxy.\n"
- title: 3.2.3.  Example
  contents:
  - "3.2.3.  Example\n   Traffic management may be performed in the following way:\
    \ The SBC\n   behaves as a B2BUA and inserts itself, or some other entity under\
    \ the\n   operator's control, in the media path.  In practice, the SBC modifies\n\
    \   the session descriptions carried in the SIP messages.  As a result,\n   the\
    \ SBC receives media from one user agent and relays it to the other\n   user agent\
    \ and performs the identical operation with media traveling\n   in the reverse\
    \ direction.\n   As mentioned in Section 3.2.1, codec restriction is a form of\
    \ traffic\n   management.  The SBC restricts the codec set negotiated in the offer/\n\
    \   answer exchange [5] between the user agents.  After modifying the\n   session\
    \ descriptions, the SBC can check whether or not the media\n   stream corresponds\
    \ to what was negotiated in the offer/answer\n   exchange.  If it differs, the\
    \ SBC has the ability to terminate the\n   media stream or take other appropriate\
    \ (configured) actions (e.g.,\n   raise an alarm).\n   Consider the following\
    \ example scenario: the SBC receives an INVITE\n   request from the outer network,\
    \ which in this case is an access\n   network.  The received SIP message contains\
    \ the SDP session\n   descriptor shown in Figure 6.\n     v=0\n     o=owner 2890844526\
    \ 2890842807 IN IP4 192.0.2.4\n     c=IN IP4 192.0.2.4\n     m=audio 49230 RTP/AVP\
    \ 96 98\n     a=rtpmap:96 L8/8000\n     a=rtpmap:98 L16/16000/2\n            \
    \    Figure 6: Request Prior to Media Management\n   In this example, the SBC\
    \ performs the media traffic management\n   function by rewriting the \"m=\" line,\
    \ and removing one \"a=\" line\n   according to some (external) policy.  Figure\
    \ 7 shows the session\n   description after the traffic management function.\n\
    \     v=0\n     o=owner 2890844526 2890842807 IN IP4 192.0.2.4\n     c=IN IP4\
    \ 192.0.2.4\n     m=audio 49230 RTP/AVP 96\n     a=rtpmap:96 L8/8000\n       \
    \        Figure 7: Request Body After Media Management\n   Media traffic management\
    \ has a problem where the SBC needs to\n   understand the session description\
    \ protocol and all extensions used\n   by the user agents.  This means that in\
    \ order to use a new extension\n   (e.g., an extension to implement a new service)\
    \ or a new session\n   description protocol, SBCs in the network may need to be\
    \ upgraded in\n   conjunction with the endpoints.  It is noteworthy that a similar\n\
    \   problem, but with header fields, applies to, for example, topology\n   hiding\
    \ function, see Section 3.1.  Certain extensions that do not\n   require active\
    \ manipulation of the session descriptors to facilitate\n   traffic management\
    \ will be able to be deployed without upgrading\n   existing SBCs, depending on\
    \ the degree of transparency the SBC\n   implementation affords.  In cases requiring\
    \ an SBC modification to\n   support the new protocol features, the rate of service\
    \ deployment may\n   be affected.\n"
- title: 3.3.  Fixing Capability Mismatches
  contents:
  - '3.3.  Fixing Capability Mismatches

    '
- title: 3.3.1.  General Information and Requirements
  contents:
  - "3.3.1.  General Information and Requirements\n   SBCs fixing capability mismatches\
    \ enable communications between user\n   agents with different capabilities or\
    \ extensions.  For example, an\n   SBC can enable a plain SIP [1] user agent to\
    \ connect to a 3GPP\n   network, or enable a connection between user agents that\
    \ support\n   different IP versions, different codecs, or that are in different\n\
    \   address realms.  Operators have a requirement and a strong motivation\n  \
    \ for performing capability mismatch fixing, so that they can provide\n   transparent\
    \ communication across different domains.  In some cases,\n   different SIP extensions\
    \ or methods to implement the same SIP\n   application (like monitoring session\
    \ liveness, call history/diversion\n   etc.) may also be interworked through the\
    \ SBC.\n"
- title: 3.3.2.  Architectural Issues
  contents:
  - "3.3.2.  Architectural Issues\n   SBCs that are fixing capability mismatches do\
    \ it by inserting a media\n   element into the media path using the procedures\
    \ described in\n   Section 3.2.  Therefore, these SBCs have the same concerns\
    \ as SBCs\n   performing traffic management: the SBC may modify SIP messages\n\
    \   without consent from any of the user agents.  This may break end-to-\n   end\
    \ security and application extensions negotiation.\n   The capability mismatch\
    \ fixing is a fragile function in the long\n   term.  The number of incompatibilities\
    \ built into various network\n   elements is increasing the fragility and complexity\
    \ over time.  This\n   might lead to a situation where SBCs need to be able to\
    \ handle a\n   large number of capability mismatches in parallel.\n"
- title: 3.3.3.  Example
  contents:
  - "3.3.3.  Example\n   Consider the following example scenario where the inner network\
    \ is an\n   access network using IPv4 and the outer network is using IPv6.  The\n\
    \   SBC receives an INVITE request with a session description from the\n   access\
    \ network:\n     INVITE sip:callee@ipv6.domain.example.com SIP/2.0\n     Via:\
    \ SIP/2.0/UDP 192.0.2.4\n     Contact: sip:caller@u1.example.com\n     v=0\n \
    \    o=owner 2890844526 2890842807 IN IP4 192.0.2.4\n     c=IN IP4 192.0.2.4\n\
    \     m=audio 49230 RTP/AVP 96\n     a=rtpmap:96 L8/8000\n               Figure\
    \ 8: Request Prior to Capabilities Match\n   Then, the SBC performs a capability\
    \ mismatch fixing function.  In\n   this scenario, the SBC inserts Record-Route\
    \ and Via headers and\n   rewrites the \"c=\" line from the sessions descriptor.\
    \  Figure 9 shows\n   the request after the capability mismatch adjustment.\n\
    \     INVITE sip:callee@ipv6.domain.com SIP/2.0\n     Record-Route: <sip:[2001:DB8::801:201:2ff:fe94:8e10];lr>\n\
    \     Via: SIP/2.0/UDP sip:[2001:DB8::801:201:2ff:fe94:8e10]\n     Via: SIP/2.0/UDP\
    \ 192.0.2.4\n     Contact: sip:caller@u1.example.com\n     v=0\n     o=owner 2890844526\
    \ 2890842807 IN IP4 192.0.2.4\n     c=IN IP6 2001:DB8::801:201:2ff:fe94:8e10\n\
    \     m=audio 49230 RTP/AVP 96\n     a=rtpmap:96 L8/8000\n                 Figure\
    \ 9: Request after Capability Match\n   This message is then sent by the SBC to\
    \ the onward IPv6 network.\n"
- title: 3.4.  Maintaining SIP-Related NAT Bindings
  contents:
  - '3.4.  Maintaining SIP-Related NAT Bindings

    '
- title: 3.4.1.  General Information and Requirements
  contents:
  - "3.4.1.  General Information and Requirements\n   NAT traversal in this instance\
    \ refers to the specific message\n   modifications required to assist a user agent\
    \ in maintaining SIP and\n   media connectivity when there is a NAT device located\
    \ between a user\n   agent and a proxy/registrar and, possibly, any other user\
    \ agent.  The\n   primary purpose of NAT traversal function is to keep up a control\n\
    \   connection to user agents behind NATs.  This can, for example, be\n   achieved\
    \ by generating periodic network traffic that keeps bindings\n   in NATs alive.\
    \  SBCs' NAT traversal function is required in scenarios\n   where the NAT is\
    \ outside the SBC (i.e., not in cases where SBC itself\n   acts as a NAT).\n \
    \  An SBC performing a NAT (Network Address Translator) traversal\n   function\
    \ for a user agent behind a NAT sits between the user agent\n   and the registrar\
    \ of the domain.  NATs are widely deployed in various\n   access networks today,\
    \ so operators have a requirement to support it.\n   When the registrar receives\
    \ a REGISTER request from the user agent\n   and responds with a 200 (OK) response,\
    \ the SBC modifies such a\n   response decreasing the validity of the registration\
    \ (i.e., the\n   registration expires sooner).  This forces the user agent to\
    \ send a\n   new REGISTER to refresh the registration sooner that it would have\n\
    \   done on receiving the original response from the registrar.  The\n   REGISTER\
    \ requests sent by the user agent refresh the binding of the\n   NAT before the\
    \ binding expires.\n   Note that the SBC does not need to relay all the REGISTER\
    \ requests\n   received from the user agent to the registrar.  The SBC can generate\n\
    \   responses to REGISTER requests received before the registration is\n   about\
    \ to expire at the registrar.  Moreover, the SBC needs to\n   deregister the user\
    \ agent if this fails to refresh its registration\n   in time, even if the registration\
    \ at the registrar would still be\n   valid.\n   SBCs can also force traffic to\
    \ go through a media relay for NAT\n   traversal purposes (more about media traffic\
    \ management in\n   Section 3.2).  A typical call has media streams to two directions.\n\
    \   Even though SBCs can force media streams from both directions to go\n   through\
    \ a media relay, in some cases, it is enough to relay only the\n   media from\
    \ one direction (e.g., in a scenario where only the other\n   endpoint is behind\
    \ a NAT).\n"
- title: 3.4.2.  Architectural Issues
  contents:
  - "3.4.2.  Architectural Issues\n   This approach to NAT traversal does not work\
    \ if end-to-end\n   confidentiality or integrity-protection mechanisms are used\
    \ (e.g.,\n   Secure/Multipurpose Internet Mail Extensions (S/MIME)).  The SBC\n\
    \   would be seen as a MITM modifying the messages between the user agent\n  \
    \ and the registrar.\n   There is also a problem related to the method of how\
    \ SBCs choose the\n   value for the validity of a registration period.  This value\
    \ should\n   be as high as possible, but it still needs to be low enough to\n\
    \   maintain the NAT binding.  Some SBCs do not have any deterministic\n   method\
    \ for choosing a suitable value.  However, SBCs can just use a\n   sub-optimal,\
    \ relatively small value that usually works.  An example\n   from such value is\
    \ 15 seconds (see [9]).\n   NAT traversal for media using SBCs poses few issues\
    \ as well.  For\n   example, an SBC normally guesses the recipient's public IP\
    \ address on\n   one of the media streams relayed by the SBC by snooping on the\
    \ source\n   IP address of another media stream relayed by the same SBC.  This\n\
    \   causes security and interoperability issues since the SBC can end up\n   associating\
    \ wrong destination IP addresses on media streams it is\n   relaying.  For example,\
    \ an attacker may snoop on the local IP address\n   and ports used by the SBC\
    \ for media relaying the streams and send a\n   few packets from a malicious IP\
    \ address to these destinations.  In\n   most cases, this can cause media streams\
    \ in the opposite directions\n   to divert traffic to the attacker resulting in\
    \ a successful MITM or\n   DoS attack.  A similar example of an interoperability\
    \ issue is caused\n   when an endpoint behind a NAT attempts to switch the IP\
    \ address of\n   the media streams by using a re-INVITE.  If any media packets\
    \ are re-\n   ordered or delayed in the network, they can cause the SBC to block\n\
    \   the switch from happening even if the re-INVITE successfully goes\n   through.\n"
- title: 3.4.3.  Example
  contents:
  - "3.4.3.  Example\n   Consider the following example scenario: The SBC resides\
    \ between the\n   UA and Registrar.  Previously, the UA has sent a REGISTER request\
    \ to\n   the Registrar, and the SBC receives the registration response shown\n\
    \   in Figure 10.\n     SIP/2.0 200 OK\n     From: Bob <sip:bob@biloxi.example.com>;tag=a73kszlfl\n\
    \     To: Bob <sip:bob@biloxi.example.com>;tag=34095828jh\n     CSeq: 1 REGISTER\n\
    \     Contact: <sips:bob@client.biloxi.example.com>;expires=3600\n           Figure\
    \ 10: Response Prior to NAT Maintenance Function\n   When performing the NAT traversal\
    \ function, the SBC may rewrite the\n   expiry time to coax the UA to re-register\
    \ prior to the intermediating\n   NAT deciding to close the pinhole.  Figure 11\
    \ shows a possible\n   modification of the response from Figure 10.\n     SIP/2.0\
    \ 200 OK\n     From: Bob <sip:bob@biloxi.example.com>;tag=a73kszlfl\n     To:\
    \ Bob <sip:bob@biloxi.example.com>;tag=34095828jh\n     CSeq: 1 REGISTER\n   \
    \  Contact: <sips:bob@client.biloxi.example.com>;expires=60\n             Figure\
    \ 11: Manipulated Response for NAT Traversal\n   Naturally, other measures could\
    \ be taken in order to enable the NAT\n   traversal (e.g., non-SIP keepalive messages),\
    \ but this example\n   illustrates only one mechanism for preserving the SIP-related\
    \ NAT\n   bindings.\n"
- title: 3.5.  Access Control
  contents:
  - '3.5.  Access Control

    '
- title: 3.5.1.  General Information and Requirements
  contents:
  - "3.5.1.  General Information and Requirements\n   Network operators may wish to\
    \ control what kind of signaling and\n   media traffic their network carries.\
    \  There is strong motivation and\n   a requirement to do access control on the\
    \ edge of an operator's\n   network.  Access control can be based on, for example,\
    \ link-layer\n   identifiers, IP addresses or SIP identities.\n   This function\
    \ can be implemented by protecting the inner network with\n   firewalls and configuring\
    \ them so that they only accept SIP traffic\n   from the SBC.  This way, all the\
    \ SIP traffic entering the inner\n   network needs to be routed though the SBC,\
    \ which only routes messages\n   from authorized parties or traffic that meets\
    \ a specific policy that\n   is expressed in the SBC administratively.\n   Access\
    \ control can be applied to either only the signaling or both\n   the signaling\
    \ and media.  If it is applied only to the signaling,\n   then the SBC might behave\
    \ as a proxy server.  If access control is\n   applied to both the signaling and\
    \ media, then the SBC behaves in a\n   similar manner as explained in Section\
    \ 3.2.  A key part of media-\n   layer access control is that only media for authorized\
    \ sessions is\n   allowed to pass through the SBC and/or associated media relay\n\
    \   devices.\n   Operators implement some functionalities, like NAT traversal\
    \ for\n   example, in an SBC instead of other elements in the inner network for\n\
    \   several reasons: (i) preventing packets from unregistered users to\n   prevent\
    \ chances of DoS attack, (ii) prioritization and/or re-routing\n   of traffic\
    \ (based on user or service, like E911) as it enters the\n   network, and (iii)\
    \ performing a load balancing function or reducing\n   the load on other network\
    \ equipment.\n   In environments where there is limited bandwidth on the access\
    \ links,\n   the SBC can compute the potential bandwidth use by examining the\n\
    \   codecs present in SDP offers and answers.  With this information, the\n  \
    \ SBC can reject sessions before the available bandwidth is exhausted\n   to allow\
    \ existing sessions to maintain acceptable quality of service.\n   Otherwise,\
    \ the link could become over-subscribed and all sessions\n   would experience\
    \ a deterioration in quality of service.  SBCs may\n   contact a policy server\
    \ to determine whether sufficient bandwidth is\n   available on a per-session\
    \ basis.\n"
- title: 3.5.2.  Architectural Issues
  contents:
  - "3.5.2.  Architectural Issues\n   Since the SBC needs to handle all SIP messages,\
    \ this function has\n   scalability implications.  In addition, the SBC is a single\
    \ point of\n   failure from an architectural point of view.  Although, in practice,\n\
    \   many current SBCs have the capability to support redundant\n   configuration,\
    \ which prevents the loss of calls and/or sessions in\n   the event of a failure\
    \ on a single node.\n   If access control is performed only on behalf of signaling,\
    \ then the\n   SBC is compatible with general SIP architectural principles, but\
    \ if\n   it is performed for signaling and for media, then there are similar\n\
    \   problems as described in Section 3.2.2.\n"
- title: 3.5.3.  Example
  contents:
  - "3.5.3.  Example\n   Figure 12 shows a callflow where the SBC is providing both\
    \ signaling\n   and media access control (ACKs omitted for brevity).\n       \
    \ caller                    SBC                     callee\n          |      \
    \                  |                        |\n          |  Identify the caller\
    \   |                        |\n          |<- - - - - - - - - - - >|         \
    \               |\n          |                        |                      \
    \  |\n          |      INVITE + SDP      |                        |\n        \
    \  |----------------------->|                        |\n          |          \
    \      [Modify the SDP]                 |\n          |                       \
    \ | INVITE + modified SDP  |\n          |                        |----------------------->|\n\
    \          |                        |                        |\n          |  \
    \                      |      200 OK + SDP      |\n          |               \
    \         |<-----------------------|\n          |                [Modify the SDP]\
    \                 |\n          |                        |                    \
    \    |\n          | 200 OK + modified SDP  |                        |\n      \
    \    |<-----------------------|                        |\n          |        \
    \                |                        |\n          |       Media   [Media\
    \ inspection]   Media        |\n          |<======================>|<======================>|\n\
    \          |                        |                        |\n             \
    \       Figure 12: Example Access Callflow\n   In this scenario, the SBC first\
    \ identifies the caller, so it can\n   determine whether or not to give signaling\
    \ access to the caller.\n   This might be achieved using information gathered\
    \ during\n   registration, or by other means.  Some SBCs may rely on the proxy\
    \ to\n   authenticate the user agent placing the call.  After identification,\n\
    \   the SBC modifies the session descriptors in INVITE and 200 OK\n   messages\
    \ in a way so that the media is going to flow through the SBC\n   itself.  When\
    \ the media starts flowing, the SBC can inspect whether\n   the callee and caller\
    \ use the codec(s) upon which they had previously\n   agreed.\n"
- title: 3.6.  Protocol Repair
  contents:
  - '3.6.  Protocol Repair

    '
- title: 3.6.1.  General Information and Requirements
  contents:
  - "3.6.1.  General Information and Requirements\n   SBCs are also used to repair\
    \ protocol messages generated by not-\n   fully-standard-compliant or badly implemented\
    \ clients.  Operators may\n   wish to support protocol repair, if they want to\
    \ support as many\n   clients as possible.  It is noteworthy that this function\
    \ affects\n   only the signaling component of an SBC, and that the protocol repair\n\
    \   function is not the same as protocol conversion (i.e., making\n   translation\
    \ between two completely different protocols).\n"
- title: 3.6.2.  Architectural Issues
  contents:
  - "3.6.2.  Architectural Issues\n   In many cases, doing protocol repair for SIP\
    \ header fields can be\n   seen as being compatible with SIP architectural principles,\
    \ and it\n   does not violate the end-to-end model of SIP.  The SBC repairing\n\
    \   protocol messages behaves as a proxy server that is liberal in what\n   it\
    \ accepts and strict in what it sends.\n   However, protocol repair may break\
    \ security mechanism that do\n   cryptographical computations on SIP header values.\
    \  Attempting\n   protocol repair for SIP message bodies (SDP) is incompatible\
    \ with\n   Authenticated Identity Management [4] and end-to-end security\n   mechanisms\
    \ such as S/MIME.\n   A similar problem related to increasing complexity, as explained\
    \ in\n   Section 3.3.2, also affects protocol repair function.\n"
- title: 3.6.3.  Examples
  contents:
  - "3.6.3.  Examples\n   The SBC can, for example, receive an INVITE message from\
    \ a relatively\n   new SIP UA as illustrated in Figure 13.\n     INVITE sip:callee@sbchost.example.com\n\
    \     Via: SIP/2.0/UDP u1.example.com:5060;lr\n     From: Caller <sip:caller@one.example.com>\n\
    \     To:        Callee   <sip:callee@two.example.com>\n     Call-ID: 18293281@u1.example.com\n\
    \     CSeq: 1   INVITE\n     Contact: sip:caller@u1.example.com\n            \
    \  Figure 13: Request from a Relatively New Client\n   If the SBC does protocol\
    \ repair, it can rewrite the 'lr' parameter on\n   the Via header field into the\
    \ form 'lr=true' in order to support some\n   older, badly implemented SIP stacks.\
    \  It could also remove excess\n   white spaces to make the SIP message more human\
    \ readable.\n"
- title: 3.7.  Media Encryption
  contents:
  - '3.7.  Media Encryption

    '
- title: 3.7.1.  General Information and Requirements
  contents:
  - "3.7.1.  General Information and Requirements\n   SBCs are used to perform media\
    \ encryption/decryption at the edge of\n   the network.  This is the case when\
    \ media encryption (e.g., Secure\n   Real-time Transport Protocol (SRTP)) is used\
    \ only on the access\n   network (outer network) side and the media is carried\
    \ unencrypted in\n   the inner network.  Some operators provide the ability to\
    \ do legal\n   interception while still giving their customers the ability to\n\
    \   encrypt media in the access network.  One possible way to do this is\n   to\
    \ perform media encryption function.\n"
- title: 3.7.2.  Architectural Issues
  contents:
  - "3.7.2.  Architectural Issues\n   While performing a media encryption function,\
    \ SBCs need to be able to\n   inject either themselves, or some other entity to\
    \ the media path.  It\n   must be noted that this kind of behavior is the same\
    \ as a classical\n   MITM attack.  Due to this, the SBCs have the same architectural\n\
    \   issues as explained in Section 3.2.\n"
- title: 3.7.3.  Example
  contents:
  - "3.7.3.  Example\n   Figure 14 shows an example where the SBC is performing media-\n\
    \   encryption-related functions (ACKs omitted for brevity).\n     caller    \
    \          SBC#1                SBC#2              callee\n      |           \
    \         |                    |                    |\n      |   INVITE + SDP\
    \     |                    |                    |\n      |------------------->|\
    \                    |                    |\n      |             [Modify the SDP]\
    \            |                    |\n      |                    |            \
    \        |                    |\n      |                    | INVITE + mod. SDP\
    \  |                    |\n      |                    |------------------->| \
    \                   |\n      |                    |             [Modify the SDP]\
    \            |\n      |                    |                    |            \
    \        |\n      |                    |                    | INVITE + mod. SDP\
    \  |\n      |                    |                    |------------------->|\n\
    \      |                    |                    |                    |\n    \
    \  |                    |                    |     200 OK + SDP   |\n      | \
    \                   |                    |<-------------------|\n      |     \
    \               |             [Modify the SDP]            |\n      |         \
    \           |                    |                    |\n      |             \
    \       | 200 OK + mod. SDP  |                    |\n      |                 \
    \   |<-------------------|                    |\n      |             [Modify the\
    \ SDP]            |                    |\n      |                    |       \
    \             |                    |\n      |  200 OK + mod. SDP |           \
    \         |                    |\n      |<-------------------|               \
    \     |                    |\n      |                    |                   \
    \ |                    |\n      |    Encrypted       |         Plain      |  \
    \       Encrypted  |\n      |      media     [enc./dec.]   media   [enc./dec.]\
    \    media    |\n      |<==================>|<- - - - - - - -  ->|<==================>|\n\
    \      |                    |                    |                    |\n    \
    \                Figure 14: Media Encryption Example\n   First, the UAC sends\
    \ an INVITE request, and the first SBC modifies\n   the session descriptor in\
    \ a way that it injects itself to the media\n   path.  The same happens in the\
    \ second SBC.  Then, the User Agent\n   Server (UAS) replies with a 200 OK response\
    \ and the SBCs inject\n   themselves in the returning media path.  After signaling,\
    \ the media\n   starts flowing, and both SBCs perform media encryption and\n \
    \  decryption.\n"
- title: 4.  Derived Requirements for Future SIP Standardization Work
  contents:
  - "4.  Derived Requirements for Future SIP Standardization Work\n   Some of the\
    \ functions listed in this document are more SIP-unfriendly\n   than others. \
    \ This list of requirements is derived from the functions\n   that break the principles\
    \ of SIP in one way or another when performed\n   by SBCs that do not have the\
    \ users' consent.  The derived\n   requirements are:\n   Req-1:  There should\
    \ be a SIP-friendly way to hide network topology\n           information.  Currently,\
    \ this is done by stripping and\n           replacing header fields, which is\
    \ against the principles of\n           SIP on behalf of some header fields (see\
    \ Section 3.1).\n   Req-2:  There should be a SIP-friendly way to direct media\
    \ traffic\n           through intermediaries.  Currently, this is done by modifying\n\
    \           session descriptors, which is against the principles of SIP\n    \
    \       (see Sections 3.2, 3.4, 3.5, and 3.7).\n   Req-3:  There should be a SIP-friendly\
    \ way to fix capability\n           mismatches in SIP messages.  This requirement\
    \ is harder to\n           fulfill on complex mismatch cases, like the 3GPP/SIP\
    \ [1]\n           network mismatch.  Currently, this is done by modifying SIP\n\
    \           messages, which may violate end-to-end security (see Sections\n  \
    \         3.3 and 3.6), on behalf of some header fields.\n   Req-1 and Req-3 do\
    \ not have an existing, standardized solution today.\n   There is ongoing work\
    \ in the IETF for addressing Req-2, such as SIP\n   session policies [10], Traversal\
    \ Using Relays around NAT (TURN) [11],\n   and Interactive Connectivity Establishment\
    \ (ICE) [12].  Nonetheless,\n   future work is needed in order to develop solutions\
    \ to these\n   requirements.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Many of the functions this document describes\
    \ have important security\n   and privacy implications.  One major security problem\
    \ is that many\n   functions implemented by SBCs (e.g., topology hiding and media\n\
    \   traffic management) modify SIP messages and their bodies without the\n   user\
    \ agents' consent.  The result is that the user agents may\n   interpret the actions\
    \ taken by an SBC as a MITM attack.  SBCs modify\n   SIP messages because it allows\
    \ them to, for example, protect elements\n   in the inner network from direct\
    \ attacks.\n   SBCs that place themselves (or another entity) on the media path\
    \ can\n   be used to eavesdrop on conversations.  Since, often, user agents\n\
    \   cannot distinguish between the actions of an attacker and those of an\n  \
    \ SBC, users cannot know whether they are being eavesdropped on or if\n   an SBC\
    \ on the path is performing some other function.  SBCs place\n   themselves on\
    \ the media path because it allows them to, for example,\n   perform legal interception.\n\
    \   On a general level, SBCs prevent the use of end-to-end\n   authentication.\
    \  This is because SBCs need to be able to perform\n   actions that look like\
    \ MITM attacks, and in order for user agents to\n   communicate, they must allow\
    \ those type of attacks.  It other words,\n   user agents cannot use end-to-end\
    \ security.  This is especially\n   harmful because other network elements, besides\
    \ SBCs, are then able\n   to do similar attacks.  However, in some cases, user\
    \ agents can\n   establish encrypted media connections between one another.  One\n\
    \   example is a scenario where SBC is used for enabling media monitoring\n  \
    \ but not for interception.\n   An SBC is a single point of failure from the architectural\
    \ point of\n   view.  This makes it an attractive target for DoS attacks.  The\
    \ fact\n   that some functions of SBCs require those SBCs to maintain session-\n\
    \   specific information makes the situation even worse.  If the SBC\n   crashes\
    \ (or is brought down by an attacker), ongoing sessions\n   experience undetermined\
    \ behavior.\n   If the IETF decides to develop standard mechanisms to address\
    \ the\n   requirements presented in Section 4, the security and privacy-related\n\
    \   aspects of those mechanisms will, of course, need to be taken into\n   consideration.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   The ad hoc meeting about SBCs, held on November 9, 2004\
    \ in Washington\n   DC during the 61st IETF meeting, provided valuable input to\
    \ this\n   document.  The authors would also like to thank Sridhar Ramachandran,\n\
    \   Gaurav Kulshreshtha, and Rakendu Devdhar.  Reviewers Spencer Dawkins\n   and\
    \ Francois Audet also deserve special thanks.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [1]   Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \   Peterson, J., \"A Privacy Mechanism for the Session Initiation\n         Protocol\
    \ (SIP)\", RFC 3323, November 2002.\n   [3]   Willis, D. and B. Hoeneisen, \"\
    Session Initiation Protocol (SIP)\n         Extension Header Field for Registering\
    \ Non-Adjacent Contacts\",\n         RFC 3327, December 2002.\n   [4]   Peterson,\
    \ J. and C. Jennings, \"Enhancements for Authenticated\n         Identity Management\
    \ in the Session Initiation Protocol (SIP)\",\n         RFC 4474, August 2006.\n\
    \   [5]   Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model with\n   \
    \      Session Description Protocol (SDP)\", RFC 3264, June 2002.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [6]   3GPP, \"IP Multimedia Subsystem (IMS);\
    \ Stage 2\", 3GPP TS 23.228\n         10.0.0, March 2010.\n   [7]   Handley, M.,\
    \ Jacobson, V., and C. Perkins, \"SDP: Session\n         Description Protocol\"\
    , RFC 4566, July 2006.\n   [8]   Munakata, M., Schubert, S., and T. Ohba, \"User-Agent-Driven\n\
    \         Privacy Mechanism for SIP\", RFC 5767, April 2010.\n   [9]   Eggert,\
    \ L. and G. Fairhurst, \"Unicast UDP Usage Guidelines for\n         Application\
    \ Designers\", BCP 145, RFC 5405, November 2008.\n   [10]  Hilt, V., Camarillo,\
    \ G., and J. Rosenberg, \"A Framework for\n         Session Initiation Protocol\
    \ (SIP) Session Policies\", Work\n         in Progress, February 2010.\n   [11]\
    \  Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal Using\n         Relays\
    \ around NAT (TURN): Relay Extensions to Session Traversal\n         Utilities\
    \ for NAT (STUN)\", RFC 5766, April 2010.\n   [12]  Rosenberg, J., \"Interactive\
    \ Connectivity Establishment (ICE): A\n         Protocol for Network Address Translator\
    \ (NAT) Traversal for\n         Offer/Answer Protocols\", RFC 5245, MonthTBD 2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jani Hautakorpi (editor)\n   Ericsson\n   Hirsalantie\
    \ 11\n   Jorvas  02420\n   Finland\n   EMail: Jani.Hautakorpi@ericsson.com\n \
    \  Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n\
    \   EMail: Gonzalo.Camarillo@ericsson.com\n   Robert F. Penfield\n   Acme Packet\n\
    \   71 Third Avenue\n   Burlington, MA  01803\n   US\n   EMail: bpenfield@acmepacket.com\n\
    \   Alan Hawrylyshen\n   Skype, Inc.\n   2055 E. Hamilton Ave\n   San Jose, CA\
    \  95125\n   US\n   EMail: alan.ietf@polyphase.ca\n   Medhavi Bhatia\n   3CLogic\n\
    \   9700 Great Seneca Hwy.\n   Rockville, MD  20850\n   US\n   EMail: mbhatia@3clogic.com\n"
