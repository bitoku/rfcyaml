- contents:
  - '               RTP Payload Format for H.261 Video Streams

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo describes a scheme to packetize an H.261 video stream
    for\n   transport using the Real-time Transport Protocol, RTP, with any of\n   the
    underlying protocols that carry RTP.\n   The memo also describes the syntax and
    semantics of the Session\n   Description Protocol (SDP) parameters needed to support
    the H.261\n   video codec.  A media type registration is included for this payload\n
    \  format.\n   This specification obsoletes RFC 2032.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................3\n   3.
    Structure of the Packet Stream ..................................3\n      3.1.
    Overview of the ITU-T Recommendation H.261 .................3\n      3.2. Considerations
    for Packetization ...........................4\n   4. Specification of the Packetization
    Scheme .......................5\n      4.1. Usage of RTP ...............................................5\n
    \     4.2. Recommendations for Operation with Hardware Codecs .........8\n   5.
    Packet Loss Issues ..............................................9\n   6. IANA
    Considerations ............................................10\n      6.1. Media
    Type Registrations ..................................10\n           6.1.1. Registration
    of MIME Media Type video/H261 .........10\n      6.2. SDP Parameters ............................................12\n
    \          6.2.1. Usage with the SDP Offer Answer Model ..............12\n   7.
    Backward Compatibility to RFC 2032 .............................13\n      7.1.
    Optional H.261-Specific Control Packets ...................13\n      7.2. New
    SDP Optional Parameters ...............................13\n   8. Security Considerations
    ........................................14\n   9. Acknowledgements ...............................................14\n
    \  10. Changes from RFC 2032 .........................................14\n   11.
    References ....................................................15\n      11.1.
    Normative References .....................................15\n      11.2. Informative
    References ...................................15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   ITU-T Recommendation H.261 [H261] specifies the encoding
    used by\n   ITU-T-compliant video-conference codecs.  Although this encoding was\n
    \  originally specified for fixed-data rate Integrated Services Digital\n   Network
    (ISDN) circuits, experiments [INRIA], [MICE] have shown that\n   they can also
    be used over packet-switched networks, such as the\n   Internet.\n   The purpose
    of this memo is to specify the RTP payload format for\n   encapsulating H.261
    video streams in RTP [RFC3550].\n   This document obsoletes RFC 2032 and updates
    the \"video/h261\" media\n   type that was registered in RFC 3555.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119]
    and\n   indicate requirement levels for compliant RTP implementations.\n"
  title: 2.  Terminology
- contents:
  - '3.  Structure of the Packet Stream

    '
  - contents:
    - "3.1.  Overview of the ITU-T Recommendation H.261\n   The H.261 coding is organized
      as a hierarchy of groupings.  The video\n   stream is composed of a sequence
      of images, or frames, which are\n   themselves organized as a set of Groups
      of Blocks (GOB).  Note that\n   H.261 \"pictures\" are referred to as \"frames\"
      in this document.  Each\n   GOB holds a set of 3 lines of 11 macro blocks (MB).
      \ Each MB carries\n   information on a group of 16x16 pixels: luminance information
      is\n   specified for 4 blocks of 8x8 pixels, whereas chrominance information\n
      \  is given by two \"red\" and \"blue\" color difference components at a\n   resolution
      of only 8x8 pixels.  These components and the codes\n   representing their sampled
      values are as defined in ITU-R\n   Recommendation 601 [BT601].\n   This grouping
      is used to specify information at each level of the\n   hierarchy:\n   - At
      the frame level, one specifies information such as the delay\n     from the
      previous frame, the image format, and various indicators.\n   - At the GOB level,
      one specifies the GOB number and the default\n     quantifier that will be used
      for the MBs.\n   - At the MB level, one specifies which blocks are present and
      which\n     did not change, and, optionally, a quantifier and motion vectors.\n
      \  Blocks that have changed are encoded by computing the discrete cosine\n   transform
      (DCT) of their coefficients, which are then quantized and\n   Huffman encoded
      (Variable Length Codes).\n   The H.261 Huffman encoding includes a special \"GOB
      start\" pattern,\n   which is a word of 16 bits, 0000 0000 0000 0001.  This
      pattern is\n   included at the beginning of each GOB header (and also at the\n
      \  beginning of each frame header) to mark the separation between two\n   GOBs
      and is in fact used as an indicator that the current GOB is\n   terminated.
      \ The encoding also includes a stuffing pattern, composed\n   of seven zero
      bits followed by four bits with a value of one; that\n   stuffing pattern can
      only be entered between the encoding of MBs, or\n   just before the GOB separator.\n"
    title: 3.1.  Overview of the ITU-T Recommendation H.261
  - contents:
    - "3.2.  Considerations for Packetization\n   H.261 codecs designed for operation
      over ISDN circuits produce a bit\n   stream composed of several levels of encoding
      specified by H.261 and\n   companion recommendations.  The bits resulting from
      the Huffman\n   encoding are arranged in 512-bit frames, containing 2 bits of\n
      \  synchronization, 492 bits of data and 18 bits of error correcting\n   code.
      \ The 512-bit frames are then interlaced with an audio stream\n   and transmitted
      over px 64 kbps circuits according to specification\n   H.221 [H221].\n   For
      transmitting over the Internet, we will directly consider the\n   output of
      the Huffman encoding.  All the bits produced by the Huffman\n   encoding stage
      will be included in the packet.  We will not carry the\n   512-bit frames, as
      protection against bit errors can be obtained by\n   other means.  Similarly,
      we will not attempt to multiplex audio and\n   video signals in the same packets,
      as UDP and RTP provide a much more\n   suitable way to achieve multiplexing.\n
      \  Directly transmitting the result of the Huffman encoding over an\n   unreliable
      stream of UDP datagrams would, however, have poor error\n   resistance characteristics.
      \ The result of the hierarchical structure\n   of the H.261 bit stream is that
      one needs to receive the information\n   present in the frame header to decode
      the GOBs, as well as the\n   information present in the GOB header to decode
      the MBs.  Without\n   precautions, this would mean that one has to receive all
      the packets\n   that carry an image in order to decode its components properly.\n
      \  If each image could be carried in a single packet, this requirement\n   would
      not create a problem.  However, a video image or even one GOB\n   by itself
      can sometimes be too large to fit in a single packet.\n   Therefore, the MB
      is taken as the unit of fragmentation.  Packets\n   must start and end on an
      MB boundary; that is, an MB cannot be split\n   across multiple packets.  Multiple
      MBs may be carried in a single\n   packet when they will fit within the maximal
      packet size allowed.\n   This practice is recommended to reduce the packet send
      rate and\n   packet overhead.\n   To allow each packet to be processed independently
      for efficient\n   resynchronization in the presence of packet losses, some state\n
      \  information from the frame header and GOB header is carried with each\n   packet
      to allow the MBs in that packet to be decoded.  This state\n   information includes
      the GOB number in effect at the start of the\n   packet, the macroblock address
      predictor (i.e., the last macroblock\n   address (MBA) encoded in the previous
      packet), the quantizer value in\n   effect prior to the start of this packet
      (GQUANT, MQUANT, or zero in\n   the case of a beginning of GOB) and the reference
      motion vector data\n   (MVD) for computing the true MVDs contained within this
      packet.  The\n   bit stream cannot be fragmented between a GOB header and MB
      1 of that\n   GOB.\n   Moreover, since the compressed MB may not fill an integer
      number of\n   octets, the data header contains two 3-bit integers, SBIT and
      EBIT,\n   to indicate the number of unused bits in the first and last octets
      of\n   the H.261 data, respectively.\n"
    title: 3.2.  Considerations for Packetization
  title: 3.  Structure of the Packet Stream
- contents:
  - '4.  Specification of the Packetization Scheme

    '
  - contents:
    - "4.1.  Usage of RTP\n   Each RTP packet starts with a fixed RTP header, as explained
      in RFC\n   3550 [RFC3550].  The following fields of the RTP fixed header used\n
      \  for H.261 video streams are further emphasized here:\n   - Payload type.
      \ The assignment of an RTP payload type for this\n     packet format is outside
      the scope of this document and will not be\n     specified here.  It is expected
      that the RTP profile for a\n     particular class of applications will assign
      a payload type for\n     this encoding, or, if that is not done, then a payload
      type in the\n     dynamic range shall be chosen.\n   - The RTP timestamp encodes
      the sampling instant of the first video\n     image contained in the RTP data
      packet.  If a video image occupies\n     more than one packet, the timestamp
      SHALL be the same on all of\n     those packets.  Packets from different video
      images MUST have a\n     different timestamp so that frames may be distinguished
      by the\n     timestamp.  For H.261 video streams, the RTP timestamp is based
      on\n     a 90-kHz clock.  This clock rate is a multiple of the natural H.261\n
      \    frame rate (i.e., 30000/1001 or approximately 29.97 Hz).  That way,\n     for
      each frame time, the clock is just incremented by the multiple,\n     and this
      removes inaccuracy in calculating the timestamp.\n     Furthermore, the initial
      value of the timestamp MUST be random\n     (unpredictable) to make known-plaintext
      attacks on encryption more\n     difficult; see RTP [RFC3550].  Note that if
      multiple frames are\n     encoded in a packet (e.g., when there are very few
      changes between\n     two images), it is necessary to calculate display times
      for the\n     frames after the first, using the timing information in the H.261\n
      \    frame header.  This is required because the RTP timestamp only\n     gives
      the display time of the first frame in the packet.\n   - The marker bit of the
      RTP header MUST be set to one in the last\n     packet of a video frame; otherwise,
      it MUST be zero.  Thus, it is\n     not necessary to wait for a following packet
      (which contains the\n     start code that terminates the current frame) to detect
      that a new\n     frame should be displayed.\n   The H.261 data SHALL follow
      the RTP header, as in the following:\n       0                   1                   2
      \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
      3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      .                                                               .\n       .
      \                         RTP header                           .\n       .                                                               .\n
      \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |
      \                         H.261  header                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                          H.261 stream ...                     .\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  The H.261 header is defined as follows:\n       0                   1                   2
      \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
      3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |SBIT |EBIT |I|V| GOBN  |   MBAP  |  QUANT  |  HMVD   |  VMVD   |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  The fields in the H.261 header have the following meanings:\n   Start bit
      position (SBIT): 3 bits\n      Number of most significant bits that should be
      ignored in the\n      first data octet.\n   End bit position (EBIT): 3 bits\n
      \     Number of least significant bits that should be ignored in the\n      last
      data octet.\n   INTRA-frame encoded data (I): 1 bit\n      Set to 1 if this
      stream contains only INTRA-frame coded blocks.\n      Set to 0 if this stream
      may or may not contain INTRA-frame coded\n      blocks.  The meaning of this
      bit should not be changed during the\n      course of the RTP session.\n   Motion
      Vector flag (V): 1 bit\n      Set to 0 if motion vectors are not used in this
      stream.  Set to 1\n      if motion vectors may or may not be used in this stream.
      \ The\n      meaning of this bit should not be changed during the course of
      the\n      session.\n   GOB number (GOBN): 4 bits\n      Encodes the GOB number
      in effect at the start of the packet.  Set\n      to 0 if the packet begins
      with a GOB header.\n   Macroblock address predictor (MBAP): 5 bits\n      Encodes
      the macroblock address predictor (i.e., the last MBA\n      encoded in the previous
      packet).  This predictor ranges from 0 -\n      32 (to predict the valid MBAs
      1 - 33), but because the bit stream\n      cannot be fragmented between a GOB
      header and MB 1, the predictor\n      at the start of the packet shall not be
      0.  Therefore, the range\n      is 1 - 32, which is biased by -1 to fit in 5
      bits.  For example,\n      if MBAP is 0, the value of the MBA predictor is 1.
      \ Set to 0 if\n      the packet begins with a GOB header.\n   Quantizer (QUANT):
      5 bits\n      Quantizer value (MQUANT or GQUANT) in effect prior to the start
      of\n      this packet.  Set to 0 if the packet begins with a GOB header.\n   Horizontal
      motion vector data (HMVD): 5 bits\n      Reference horizontal motion vector
      data (MVD).  Set to 0 if V flag\n      is 0 or if the packet begins with a GOB
      header, or when the MTYPE\n      of the last MB encoded in the previous packet
      was not motion\n      compensation (MC).  HMVD is encoded as a 2s complement
      number, and\n      '10000' corresponding to the value -16 is forbidden (motion
      vector\n      fields range from +/-15).\n   Vertical motion vector data (VMVD):
      5 bits\n      Reference vertical motion vector data (MVD).  Set to 0 if V flag\n
      \     is 0 or if the packet begins with a GOB header, or when the MTYPE\n      of
      the last MB encoded in the previous packet was not MC.  VMVD is\n      encoded
      as a 2s complement number, and '10000' corresponding to\n      the value -16
      SHALL not be used (motion vector fields range from\n      +/-15).\n   Note that
      the I and V flags are hint flags; i.e., they can be\n   inferred from the bit
      stream.  They are included to allow decoders to\n   make optimizations that
      would not be possible if these hints were not\n   provided before the bit stream
      was decoded.  Therefore, these bits\n   cannot change for the duration of the
      stream.  A conforming\n   implementation can always set V=1 and I=0.\n   The
      H.261 stream SHALL be used without BCH error correction and\n   without error
      correction framing.\n"
    title: 4.1.  Usage of RTP
  - contents:
    - "4.2.  Recommendations for Operation with Hardware Codecs\n   Packetizers for
      hardware codecs can trivially figure out GOB\n   boundaries, using the GOB-start
      pattern included in the H.261 data.\n   (Note that software encoders already
      know the boundaries.)  The\n   cheapest packetization implementation is to packetize
      at the GOB\n   level all the GOBs that fit in a packet.  But when a GOB is too\n
      \  large, the packetizer has to parse it to do MB fragmentation.  (Note\n   that
      only the Huffman encoding must be parsed and that it is not\n   necessary to
      decompress the stream fully, so this requires relatively\n   little processing;
      examples of implementations can be found in some\n   public H.261 codecs, such
      as IVS [IVS] and VIC [VIC].)  It is\n   recommended that MB level fragmentation
      be used when feasible in\n   order to obtain more efficient packetization.  Using
      this\n   fragmentation scheme reduces the output packet rate and therefore\n
      \  reduces the overhead.\n   At the receiver, the data stream can be depacketized
      and directed to\n   a hardware codec's input.  If the hardware decoder operates
      at a\n   fixed bit rate, synchronization may be maintained by inserting the\n
      \  stuffing pattern between MBs (i.e., between packets) when the packet\n   arrival
      rate is slower than the bit rate.\n"
    title: 4.2.  Recommendations for Operation with Hardware Codecs
  title: 4.  Specification of the Packetization Scheme
- contents:
  - "5.  Packet Loss Issues\n   On the Internet, most packet losses are due to network
    congestion\n   rather than to transmission errors.  Using UDP, no mechanism is\n
    \  available at the sender to know whether a packet has been\n   successfully
    received.  It is up to the application (i.e., coder and\n   decoder) to handle
    the packet loss.  Each RTP packet includes a\n   sequence number field that can
    be used to detect packet loss.\n   H.261 uses the temporal redundancy of video
    to perform compression.\n   This differential coding (or INTER-frame coding) is
    sensitive to\n   packet loss.  After a packet loss, parts of the image may remain\n
    \  corrupt until all corresponding MBs have been encoded in INTRA-frame\n   mode
    (i.e., encoded independently of past frames).  There are several\n   ways to mitigate
    packet loss:\n   (1)  One way is to use only INTRA-frame encoding and MB-level\n
    \       conditional replenishment.  That is, only MBs that change\n        (beyond
    some threshold) are transmitted.\n   (2)  Another way is to adjust the INTRA-frame
    encoding refreshment\n        rate according to the packet loss observed by the
    receivers.\n        The H.261 recommendation specifies that an MB be INTRA-frame\n
    \       encoded at least every 132 times it is transmitted.  However,\n        the
    INTRA-frame refreshment rate can be raised in order to speed\n        the recovery
    when the measured loss rate is significant.\n   (3)  The fastest way to repair
    a corrupted image is to request an\n        INTRA-frame coded image refreshment
    after a packet loss is\n        detected.  One means to accomplish this is for
    the decoder to\n        send to the coder a list of packets lost.  The coder can
    decide\n        to encode every MB of every GOB of the following video frame in\n
    \       INTRA-frame mode (i.e., full INTRA-frame encoded).  If the coder\n        can
    deduce from the packet sequence numbers which MBs were\n        affected by the
    loss, it can save bandwidth by sending only\n        those MBs in INTRA-frame
    mode.  This mode is particularly\n        efficient in point-to-point connection
    or when the number of\n        decoders is low.\n   The H.261-specific control
    packets FIR and NACK, as described in RFC\n   2032, SHALL NOT be used to request
    image refreshment.  Old\n   implementations are encouraged to use the methods
    described in this\n   section.  Image refreshment may be needed due to packet
    loss or due\n   to application requirements.  An example of application requirement\n
    \  may be the change of the speaker in a voice-activated multipoint\n   video
    switching conference.  There are two methods that can be used\n   for requesting
    image refreshment.  The first method is by using the\n   Extended RTP Profile
    for RTCP-based Feedback and sending RTCP generic\n   control packets, as described
    in RFC 4585 [RFC4585].  The second\n   method is by using application protocol-specific
    commands, such as\n   H.245 [ITU.H245] FastUpdateRequest.\n"
  title: 5.  Packet Loss Issues
- contents:
  - "6.  IANA Considerations\n   This section updates the H.261 media type described
    in RFC 3555\n   [RFC3555].\n   This section specifies optional parameters that
    MAY be used to select\n   optional features of the payload format.  The parameters
    are\n   specified here as part of the MIME subtype registration for the ITU-T\n
    \  H.261 codec.  A mapping of the parameters into the Session\n   Description
    Protocol (SDP) [RFC4566] is also provided for those\n   applications that use
    SDP.  Multiple parameters SHOULD be expressed\n   as a media type string, in the
    form of a semicolon-separated list of\n   parameters.\n"
  - contents:
    - "6.1.  Media Type Registrations\n   This section describes the media types and
      names associated with this\n   payload format.  The section updates the previous
      registered version\n   in RFC 3555 [RFC3555].  This registration uses the template
      defined\n   in RFC 4288 [RFC4288]\n"
    - contents:
      - "6.1.1.  Registration of MIME Media Type video/H261\n   MIME media type name:
        video\n   MIME subtype name: H261\n   Required parameters: None\n   Optional
        parameters:\n      CIF.  This parameter has the format of parameter=value.
        \ It\n      describes the maximum supported frame rate for CIF resolution.\n
        \     Permissible values are integer values 1 to 4, and it means that\n      the
        maximum rate is 29.97/specified value.\n      QCIF.  This parameter has the
        format of parameter=value.  It\n      describes the maximum supported frame
        rate for QCIF resolution.\n      Permissible values are integer values 1 to
        4, and it means that\n      the maximum rate is 29.97/specified value.\n      D.
        \ Specifies support for still image graphics according to H.261,\n      annex
        D.  If supported, the parameter value SHALL be \"1\".  If not\n      supported,
        the parameter SHOULD NOT be used or SHALL have the\n      value \"0\".\n   Encoding
        considerations:\n      This media type is framed and binary, see Section 4.8
        in\n      [RFC4288].\n   Security considerations: See Section 8\n   Interoperability
        considerations:\n      These are receiver options; current implementations
        will not send\n      any optional parameters in their SDP.  They will ignore
        the\n      optional parameters and will encode the H.261 stream without annex\n
        \     D.  Most decoders support at least QCIF resolutions, and they are\n
        \     expected to be available in almost every H.261-based video\n      application.\n
        \  Published specification: RFC 4587\n   Applications that use this media
        type:\n      Audio and video streaming and conferencing applications.\n   Additional
        information: None\n   Person and email address to contact for further information:\n
        \     Roni Even: roni.even@polycom.co.il\n   Intended usage: COMMON\n   Restrictions
        on usage:\n      This media type depends on RTP framing and thus is only defined\n
        \     for transfer via RTP [RFC3550].  Transport within other framing\n      protocols
        is not defined at this time.\n   Author: Roni Even\n   Change controller:\n
        \     IETF Audio/Video Transport working group, delegated from the IESG.\n"
      title: 6.1.1.  Registration of MIME Media Type video/H261
    title: 6.1.  Media Type Registrations
  - contents:
    - "6.2.  SDP Parameters\n   The MIME media type video/H261 string is mapped to
      fields in the\n   Session Description Protocol (SDP) as follows:\n   o  The
      media name in the \"m=\" line of SDP MUST be video.\n   o  The encoding name
      in the \"a=rtpmap\" line of SDP MUST be H261 (the\n      MIME subtype).\n   o
      \ The clock rate in the \"a=rtpmap\" line MUST be 90000.\n   o  The optional
      parameters \"CIF\", \"QCIF\", and \"D\", if any, SHALL be\n      included in
      the \"a=fmtp\" line of SDP.  These parameters are\n      expressed as a MIME
      media type string, in the form of as a\n      semicolon-separated list of parameters\n"
    - contents:
      - "6.2.1.  Usage with the SDP Offer Answer Model\n   When H.261 is offered over
        RTP using SDP in an Offer/Answer model\n   [RFC3264] the following considerations
        are necessary.\n   Codec options: (D) This option MUST NOT appear unless the
        sender of\n   this SDP message is able to decode this option.  This option
        SHALL be\n   considered a receiver's capability even when it is sent in a\n
        \  \"sendonly\" offer.\n   Picture sizes and MPI:\n   Supported picture sizes
        and their corresponding minimum picture\n   interval (MPI) information for
        H.261 can be combined.  All picture\n   sizes may be advertised to the other
        party, or only a subset of it.\n   Using the recvonly or sendrev direction
        attribute, a terminal SHOULD\n   announce those picture sizes (with their
        MPIs) that it is willing to\n   receive.  For example, CIF=2 means that receiver
        can receive a CIF\n   picture and that the frame rate SHALL be less then 15
        frames per\n   second.\n   When the direction attribute is sendonly, the parameters
        describe the\n   capabilities of the stream that the sender can produce.\n
        \  Implementations following this specification SHALL specify at least\n   one
        supported picture size.\n   If the receiver does not specify the picture size/MPI
        parameter, then\n   it is safe to assume that it is an implementation that
        follows RFC\n   2032.  In that case, it is RECOMMENDED to assume that such
        a receiver\n   is able to support reception of QCIF resolution with MPI=1.\n
        \  Parameters offered first are the most preferred picture mode to be\n   received.\n
        \  An example of media representation in SDP is as follows CIF at 15\n   frames
        per second, QCIF at 30 frames per second and annex D\n      m=video 49170/2
        RTP/AVP 31\n      a=rtpmap:31 H261/90000\n      a=fmtp:31 CIF=2;QCIF=1;D=1\n
        \  This means that the sender of this message can decode an H.261 bit\n   stream
        with the following options and parameters: preferred\n   resolution is CIF
        (its MPI is 2), but if that is not possible, then\n   QCIF size is also supported.
        \ Still image using annex D MAY be used.\n"
      title: 6.2.1.  Usage with the SDP Offer Answer Model
    title: 6.2.  SDP Parameters
  title: 6.  IANA Considerations
- contents:
  - "7.  Backward Compatibility to RFC 2032\n   The current document replaces RFC
    2032.  This section will address\n   the major backward compatibility issues.\n"
  - contents:
    - "7.1.  Optional H.261-Specific Control Packets\n   RFC 2032 defined two H.261-specific
      RTCP control packets, \"Full\n   INTRA-frame Request\" and \"Negative Acknowledgement\".
      \ Support of\n   these control packets was optional.  The H.261-specific control\n
      \  packets differ from normal RTCP packets in that they are not\n   transmitted
      to the normal RTCP destination transport address for the\n   RTP session (which
      is often a multicast address).  Instead, these\n   control packets are sent
      directly via unicast from the decoder to the\n   encoder.  The destination port
      for these control packets is the same\n   port that the encoder uses as a source
      port for transmitting RTP\n   (data) packets.  Therefore, these packets may
      be considered \"reverse\"\n   control packets.  This memo suggests generic methods
      to address the\n   same requirement.  The authors of the documents are not aware
      of\n   products that support these control packets.  Since these are\n   optional
      features, new implementations SHALL ignore them, and they\n   SHALL NOT be used
      by new implementations.\n"
    title: 7.1.  Optional H.261-Specific Control Packets
  - contents:
    - "7.2.  New SDP Optional Parameters\n   The document adds new optional parameters
      to the H261 payload type.\n   Since these are optional parameters, we expect
      that old\n   implementations ignore these parameters, whereas new implementations\n
      \  that receive the H261 payload type capabilities with no parameters\n   will
      assume that it is an old implementation and will send H.261 at\n   QCIF resolution
      and 30 frames per second.\n"
    title: 7.2.  New SDP Optional Parameters
  title: 7.  Backward Compatibility to RFC 2032
- contents:
  - "8.  Security Considerations\n   RTP packets using the payload format defined
    in this specification\n   are subject to the security considerations discussed
    in the RTP\n   specification [RFC3550], and in any appropriate RTP profile (e.g.,\n
    \  [RFC3551]).  This implies that confidentiality of the media streams\n   is
    achieved by encryption.  SRTP [RFC3711] may be used to provide\n   both encryption
    and integrity protection of RTP flow.  Because the\n   data compression used with
    this payload format is applied end to end,\n   encryption will be performed after
    compression, so there is no\n   conflict between the two operations.\n   A potential
    denial-of-service threat exists for data encoding using\n   compression techniques
    that have non-uniform receiver-end\n   computational load.  The attacker can inject
    pathological datagrams\n   into the stream that are complex to decode and cause
    the receiver to\n   be overloaded.  The usage of authentication of at least the
    RTP\n   packet is RECOMMENDED.  H.261 is vulnerable to such attacks because\n
    \  it is possible for an attacker to generate RTP packets containing\n   frames
    that affect the decoding process of future frames.  Therefore,\n   the usage of
    data origin authentication and data integrity protection\n   of at least the RTP
    packet is RECOMMENDED; for example, with SRTP.\n   Note that the appropriate mechanism
    to ensure confidentiality and\n   integrity of RTP packets and their payloads
    is very dependent on the\n   application and on the transport and signaling protocols
    employed.\n   Thus, although SRTP is given as an example above, other possible\n
    \  choices exist.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Acknowledgements\n   This is to acknowledge the authors of RFC 2032, Thierry
    Turletti and\n   Christian Huitema.  Special thanks for the work done by Petri\n
    \  Koskelainen from Nokia and Nermeen Ismail from Cisco, who helped with\n   drafting
    the text for the new MIME types.\n"
  title: 9.  Acknowledgements
- contents:
  - "10.  Changes from RFC 2032\n   The changes from the RFC 2032 are:\n   1.  The
    H.261 MIME type is now in the payload specification.\n   2.  Added optional parameters
    to the H.261 MIME type\n   3.  Deprecated the H.261 specific control packets\n
    \  4.  Editorial changes to be in line with RFC editing procedures\n"
  title: 10.  Changes from RFC 2032
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [H261]      International Telecommunications
      Union, \"Video codec for\n               audiovisual services at px 64 kbit/s\",
      ITU Recommendation\n               H.261, March 1993.\n   [RFC2119]   Bradner,
      S., \"Key words for use in RFCs to Indicate\n               Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [RFC3550]   Schulzrinne, H., Casner, S., Frederick,
      R., and V.\n               Jacobson, \"RTP: A Transport Protocol for Real-Time\n
      \              Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3264]   Rosenberg,
      J. and H. Schulzrinne, \"An Offer/Answer Model\n               with Session
      Description Protocol (SDP)\", RFC 3264,\n               June 2002.\n   [RFC3551]
      \  Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and\n               Video
      Conferences with Minimal Control\", STD 65,\n               RFC 3551, July 2003.\n
      \  [RFC3555]   Casner, S. and P. Hoschka, \"MIME Type Registration of RTP\n
      \              Payload Formats\", RFC 3555, July 2003.\n   [RFC4566]   Handley,
      M., Jacobson, V., and C. Perkins, \"SDP: Session\n               Description
      Protocol\", RFC 4566, July 2006.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC4288]   Freed, N. and J. Klensin, \"Media
      Type Specifications and\n               Registration Procedures\", BCP 13, RFC
      4288,\n               December 2005.\n   [RFC4585]   Ott, J., Wenger, S., Sato,
      N., Burmeister, C., and J.\n               Rey, \"Extended RTP Profile for Real-time
      Transport\n               Control Protocol (RTCP)-based Feedback (RTP/AVPF)\",
      RFC\n               4585, July 2006.\n   [ITU.H245]  International Telecommunications
      Union, \"CONTROL PROTOCOL\n               FOR MULTIMEDIA COMMUNICATION\", ITU
      Recommendation H.245,\n               2003.\n   [INRIA]     Turletti, T., \"H.261
      software codec for videoconferencing\n               over the Internet\", INRIA
      Research Report 1834,\n               January 1993.\n   [IVS]       Turletti,
      T., \"INRIA Videoconferencing tool (IVS)\",\n               available by anonymous
      ftp from zenon.inria.fr in the\n               \"rodeo/ivs/last_version\" directory.
      \ See also URL\n               <http://www.inria.fr/rodeo/ivs.html>.\n   [BT601]
      \    International Telecommunications Union, \"Studio encoding\n               parameters
      of digital television for standard 4:3 and\n               wide-screen 16:9
      aspect ratios\", ITU-R Recommendation\n               BT.601-5, October 1995.\n
      \  [MICE]      Sasse, MA., Bilting, U., Schultz, CD., and T.  Turletti,\n               \"Remote
      Seminars through MultiMedia Conferencing:\n               Experiences from the
      MICE project\", Proc. INET'94/JENC5,\n               Prague pp. 251/1-251/8,
      June 1994.\n   [VIC]       MacCanne, S., \"VIC Videoconferencing tool, available
      by\n               anonymous ftp from ee.lbl.gov in the \"conferencing/vic\"\n
      \              directory\".\n   [RFC3711]   Baugher, M., McGrew, D., Naslund,
      M., Carrara, E., and K.\n               Norrman, \"The Secure Real-time Transport
      Protocol\n               (SRTP)\", RFC 3711, March 2004.\n   [H221]      International
      Telecommunications Union, \"Frame structure\n               for a 64 to 1920
      kbit/s channel in audiovisual\n               teleservices\", ITU Recommendation
      H.221, May 1999.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Author's Address\n   Roni Even\n   Polycom\n   94 Derech Em Hamoshavot\n   Petach
    Tikva  49130\n   Israel\n   EMail: roni.even@polycom.co.il\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
