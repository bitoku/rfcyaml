- contents:
  - "                         SMTP Service Extension\n                   for Remote
    Message Queue Starting\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This memo defines an extension to the SMTP service whereby an SMTP\n
    \  client and server may interact to give the server an opportunity to\n   start
    the processing of its queues for messages to go to a given\n   host.  This extension
    is meant to be used in startup conditions as\n   well as for mail nodes that have
    transient connections to their\n   service providers.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   The TURN command was a valid attempt to address the problem
    of having\n   to start the processing for the mail queue on a remote machine.\n
    \  However, the TURN command presents a large security loophole.  As\n   there
    is no verification of the remote host name, the TURN command\n   could be used
    by a rogue system to download the mail for a site other\n   than itself.\n   Therefore,
    this memo introduces the ETRN command.  This command uses\n   the mechanism defined
    in [4] to define extensions to the SMTP service\n   whereby a client (\"sender-SMTP\")
    may request that the server\n   (\"receiver-SMTP\") start the processing of its
    mail queues for\n   messages that are waiting at the server for the client machine.
    \ If\n   any messages are at the server for the client, then the server should\n
    \  create a new SMTP session and send the messages at that time.\n"
  title: 1.  Introduction
- contents:
  - "2.  Framework for the ETRN Extension\n   The following service extension is therefore
    defined:\n   (1) the name of the SMTP service extension is \"Remote Queue\n   Processing
    Declaration\";\n   (2) the EHLO keyword value associated with this extension is
    \"ETRN\",\n   with no associated parameters;\n   (3) one additional verb, ETRN,
    with a single parameter that\n   specifies the name of the client(s) to start
    processing for;\n   (4) no additional SMTP verbs are defined by this extension.\n
    \  The remainder of this memo specifies how support for the extension\n   affects
    the behavior of an SMTP client and server.\n"
  title: 2.  Framework for the ETRN Extension
- contents:
  - "3.  The Remote Queue Processing Declaration service extension\n   To save money,
    many small companies want to only maintain transient\n   connections to their
    service providers.  In addition, there are some\n   situations where the client
    sites depend on their mail arriving\n   quickly, so forcing the queues on the
    server belonging to their\n   service provider may be more desirable than waiting
    for the retry\n   timeout to occur.\n   Both of these situations could currently
    be fixed using the TURN\n   command defined in [1], if it were not for a large
    security loophole\n   in the TURN command.  As it stands, the TURN command will
    reverse the\n   direction of the SMTP connection and assume that the remote host
    is\n   being honest about what its name is.  The security loophole is that\n   there
    is no documented stipulation for checking the authenticity of\n   the remote host
    name, as given in the HELO or EHLO command.  As such,\n   most SMTP and ESMTP
    implementations do not implement the TURN command\n   to avoid this security loophole.\n
    \  This has been addressed in the design of the ETRN command.  This\n   extended
    turn command was written with the points in the first\n   paragraph in mind, yet
    paying attention to the problems that\n   currently exist with the TURN command.
    \ The security loophole is\n   avoided by asking the server to start a new connection
    aimed at the\n   specified client.\n   In this manner, the server has a lot more
    certainty that it is\n   talking to the correct SMTP client.  This mechanism can
    just be seen\n   as a more immediate version of the retry queues that appear in
    most\n   SMTP implementations.  In addition, as this command will take a\n   single
    parameter, the name of the remote host(s) to start the queues\n   for, the server
    can decide whether it wishes to respect the request\n   or deny it for any local
    administrative reasons.\n"
  title: 3.  The Remote Queue Processing Declaration service extension
- contents:
  - "4.  Definitions\n   Remote queue processing means that using an SMTP or ESMTP
    connection,\n   the client may request that the server start to process parts
    of its\n   messaging queue.  This processing is performed using the existing\n
    \  SMTP infrastructure and will occur at some point after the processing\n   is
    initiated.\n      The server host is the node that is responding to the ETRN\n
    \     command.\n      The client host is the node that is initiating the ETRN
    command.\n   The remote host name is defined to be a plain-text field that\n   specifies
    a name for the remote host(s).  This remote host name may\n   also include an
    alias for the specified remote host or special\n   commands to identify other
    types of queues.\n"
  title: 4.  Definitions
- contents:
  - "5.  The extended ETRN command\n   The extended ETRN command is issued by the
    client host when it wishes\n   to start the SMTP queue processing of a given server
    host.  The\n   syntax of this command is as follows:\n      ETRN [<option character>]<node
    name><CR><LF>\n   This command may be issued at any time once a session is established,\n
    \  as long as there is not a transaction occuring.  Thus, this command\n   is
    illegal between a MAIL FROM: command and the end of the DATA\n   commands and
    responses.\n   The specified node name must be a fully qualified domain name for
    the\n   node, which may refer to a CNAME or MX pointer in the DNS.  If an\n   alias
    is used for the node, multiple ETRN commands may be needed to\n   start the processing
    for the node as it may be listed at the remote\n   site under multiple names.
    \ This can also be addressed using the\n   options discussed in section 5.3.\n
    \  The option character under normal circumstances is not used.\n"
  title: 5.  The extended ETRN command
- contents:
  - "5.1  Server action on receipt of the extended ETRN command\n   When the server
    host receives the ETRN command, it should have a look\n   at the node name that
    is specified in the command and make a local\n   decision if it should honour
    the request.  If not, the appropriate\n   error codes should be returned to the
    client.\n   Otherwise, the server host should force its retry queues to start\n
    \  sending messages to that remote site, using another SMTP connection.\n   At
    the moment, there is no requirement that a connection must occur,\n   or that
    the connection must occur within a given time frame.  This\n   should be noted
    in the case where there are no messages for the\n   client host at the server
    host and only the 250 response is used.\n   Since the processing of the queues
    may take an indeterminate amount\n   of time, this command should return immediately
    with a response to\n   the client host.  The valid return codes for this command
    are:\n   250 OK, queuing for node <x> started\n   251 OK, no messages waiting
    for node <x>\n   252 OK, pending messages for node <x> started\n   253 OK, <n>
    pending messages for node <x> started\n   458 Unable to queue messages for node
    <x>\n   459 Node <x> not allowed: <reason>\n   500 Syntax Error\n   501 Syntax
    Error in Parameters\n   The 250 response code does not indicate that messages
    will be sent to\n   the system in question, just that the queue has been started
    and some\n   action will occur.  If the server is capable of supporting it, the\n
    \  251, 252 or 253 response codes should be used to give more\n   information
    to the client side.  In this case, if there are messages\n   waiting for the client
    side node, a check can be performed using\n   these responses codes as an indication
    of when there are no more\n   pending messages in the queue for that node.\n   The
    458 and 459 result codes should be used to give more information\n   back to the
    client host as to why the action was not performed.  If\n   the syntax of the
    request is not correct, then the 500 and 501 result\n   codes should be used.\n"
  title: 5.1  Server action on receipt of the extended ETRN command
- contents:
  - "5.2  Client action on receiving response to extended ETRN command\n   If one
    of the 500 level error codes (550 or 551) are sent, the client\n   should assume
    that the protocol is not supported in the remote host\n   or that the protocol
    has not been implemented correctly on either the\n   client or server host.  In
    this case, multiple ETRN commands (dealing\n   with the aliases for the system)
    should not be sent.\n   If the 250 response is received, then the client host
    can assume that\n   the server host found its request to be satisfactory and it
    will send\n   any queued messages.  This process may involve going through a very\n
    \  large retry queue, and may take some time.\n   If the 400 level response is
    received, then the client can assume\n   that the server supports the command,
    but for some local reason does\n   not want to accept the ETRN command as is.
    \ In most cases, it will\n   mean that there is a list of nodes that it will accept
    the command\n   from and the current client is not on that list.  The 459 response\n
    \  code is presented to allow for a more in-depth reason as to why the\n   remote
    queuing cannot be started.\n"
  title: 5.2  Client action on receiving response to extended ETRN command
- contents:
  - "5.3  Use Of ETRN to release mail for a subdomain or queue\n   If the requesting
    server wishes to release all of the mail for a\n   given subdomain, a variation
    on the ETRN command can be used.  To\n   perform this request, the option character
    '@' should be used in\n   front of the node name.  In this manner, any domain
    names that are\n   formed with a suffix of the specified node name are released.\n
    \  For example, if the command ETRN @foo.com was issued, then any\n   accumulated
    mail for fred.foo.com, a.b.c.d.e.f.g.foo.com or foo.com\n   may be released.  It
    should be noted that the receiving side of the\n   ETRN command should make a
    decision based on the client in question\n   and only allow certain combinations
    for each of the nodes.  This is\n   more of a security issue than anything else.\n
    \  In a similar vein, it might be necessary under some circumstances to\n   release
    a certain queue, where that queue does not correspond to a\n   given domain name.
    \ To this end, the option character '#' can be used\n   to force the processing
    of a given queue.  In this case, the node\n   name would be used as a queue name
    instead, and its syntactical\n   structure would be dependant on the receiving
    server.  An example of\n   this would be using the command ETRN #uucp to force
    the flush of a\n   UUCP queue.  Note that the use of this option is entirely a
    local\n   matter and there is no way for a client to find a list of any such\n
    \  queues that exist.\n"
  title: 5.3  Use Of ETRN to release mail for a subdomain or queue
- contents:
  - "6.  Minimal usage\n   A \"minimal\" client may use this extension with its host
    name to start\n   the queues on the server host.  This minimal usage will not
    handle\n   cases where mail for 'x.y' is sent to 's.x.y'.\n   A minimal server
    may use this extensions to start the processing of\n   the queues for all remote
    sites.  In this case, the 458 error\n   response will not be seen, and it should
    always return the 250\n   response as it will always try and start the processing
    for any\n   request.\n"
  title: 6.  Minimal usage
- contents:
  - "7. Example\n   The following example illustrates the use of remote queue processing\n
    \  with some permanent and temporary failures.\n   S: <wait for connection on
    TCP port 25>\n   C: <open connection to server>\n   S: 220 sigurd.innosoft.com
    -- Server SMTP (PMDF V4.2-6 #1992)\n   C: EHLO ymir.claremont.edu\n   S: 250-sigurd.innosoft.com\n
    \  S: 250-EXPN\n   S: 250-HELP\n   S: 250 ETRN\n   C: ETRN\n   S: 500 Syntax Error\n
    \  C: ETRN localname\n   S: 501 Syntax Error in Parameters\n   C: ETRN uu.net\n
    \  S: 458 Unable to queue messages for node uu.net\n   ...\n   C: ETRN sigurd.innosoft.com\n
    \  S: 250 OK, queuing for node sigurd.innosoft.com started\n   C: ETRN innosoft.com\n
    \  S: 250 OK, queuing for node innosoft.com started\n   OR\n   C: ETRN sigurd.innosoft.com\n
    \  S: 251 OK, no messages waiting for node sigurd.innosoft.com\n   C: ETRN innosoft.com\n
    \  S: 252 OK, pending messages for node innosoft.com started\n   C: ETRN mysoft.com\n
    \  S: 253 OK, 14 pending messages for node mysoft.com started\n   ...\n   C: ETRN
    foo.bar\n   S: 459 Node foo.bar not allowed: Unable to resolve name.\n   ...\n
    \  C: QUIT\n   S: 250 Goodbye\n"
  title: 7. Example
- contents:
  - "8. Security Considerations\n   This command does not compromise any security
    considerations of any\n   existing SMTP or ESMTP protocols as it merely shortens
    the time that\n   a client needs to wait before their messages are retried.\n
    \  Precautions should be taken to make sure that any client server can\n   only
    use the @ and # option characters for systems that make sense.\n   Failure to
    implement some kind of sanity checking on the parameters\n   could lead to congestion.
    \ This would be evident if a person asking\n   to release @com, which would release
    mail for any address that ended\n   with com.\n"
  title: 8. Security Considerations
- contents:
  - "9.  Acknowledgements\n   This document was created with lots of support from
    the users of our\n   products, who have given some input to the functionality
    that they\n   would like to see in the software that they bought.\n"
  title: 9.  Acknowledgements
- contents:
  - "10.  References\n   [1] Postel, J., \"Simple Mail Transfer Protocol\", STD 10,
    RFC\n       821, August 1982.\n   [2] Klensin, J., WG Chair, Freed, N., Editor,
    Rose, M., Stefferud,\n       E., and D. Crocker, \"SMTP Service Extensions\" RFC
    1425, United\n       Nations University, Innosoft International, Inc., Dover Beach\n
    \      Consulting, Inc., Network Management Associates, Inc., The Branch\n       Office,
    February 1993.\n"
  title: 10.  References
- contents:
  - "11.  Author's Address\n   Jack De Winter\n   Wildbear Consulting, Inc.\n   17
    Brock Street\n   Kitchener, Ontario, Canada\n   N2M 1X2\n   Phone: +1 519 576
    3873\n   EMail: jack@wildbear.on.ca\n"
  title: 11.  Author's Address
