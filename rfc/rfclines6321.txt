Abstract This specification defines "xCal", an XML format for iCalendar data.
The iCalendar data format [RFC5545] is a widely deployed interchange format for calendaring and scheduling data.
While many applications and services consume and generate calendar data, iCalendar is a specialized format that requires its own parser/generator.
In contrast, XML based formats are widely used for interoperability between applications, and the many tools that generate, parse, and manipulate XML make it easier to work with than iCalendar.
The purpose of this specification is to define "xCal", an XML format for iCalendar data.
xCal is defined as a straightforward mapping into XML from iCalendar, so that iCalendar data can be converted to XML, and then back to iCalendar, without losing any semantic meaning in the data.
Anyone creating xCal calendar data according to this specification will know that their data can be converted to a valid iCalendar representation as well.
Key design considerations are: Round tripping (converting an iCalendar instance to xCal and back) will give the same semantic result as the starting point.
That is, all components, properties, and property parameters are guaranteed to be preserved, with the exception of those that have default values.
xCal preserves the semantics of the iCalendar data.
While a simple consumer can easily browse the calendar data in xCal, a full understanding of iCalendar is still required in order to modify and/or fully comprehend the calendar data.
xCal has the ability to handle many extensions to the underlying iCalendar specification without requiring an update to this document.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
When XML element types in the namespace "urn:ietf:params:xml:
ns:icalendar 2.0" are referenced in this document outside of the context of an XML fragment, the string "IC:" will be prefixed to the element types.
Some examples in this document contain "partial" XML documents used for illustrative purposes.
Converting from iCalendar to xCal
This section describes how iCalendar data is converted to xCal using a simple mapping between the iCalendar data model and XML elements.
Pre Processing iCalendar uses a line folding mechanism to limit lines of data to a maximum line length (typically 72 characters) to ensure maximum likelihood of preserving data integrity as it is transported via various means (e.g., email)
see Section 3.1 of [RFC5545].
Prior to converting iCalendar data into xCal, all folded lines MUST be unfolded.
iCalendar data uses an "escape" character sequence for text values and property parameter values.
When such text elements are converted into xCal, the escaping MUST be removed.
iCalendar uses a base64 encoding for binary data.
However, it does not restrict the encoding from being applied to non binary value types.
So, the following rules MUST be applied when processing a property with the "ENCODING" property parameter set to "BASE64":  If the property value type is "BINARY", the base64 encoding MUST be preserved.
If the value type is not "BINARY", the "ENCODING" property parameter MUST be removed, and the value MUST be base64 decoded.
When base64 encoding and decoding are used, they MUST conform to Section 4 of [RFC4648], which is the base64 method used in [RFC5545].
One key difference in the formatting of values used in iCalendar and xCal is that, in xCal, the specification uses date/time and UTC offset values aligned with the syntax of [W3C.REC xmlschema 2 20041028] to aid with XML processing.
iCalendar Stream (RFC 5545, Section 3.4)
At the top level of the iCalendar object model is an "iCalendar stream".
This object encompasses multiple "iCalendar objects".
In xCal, the entire stream is contained in the root IC:icalendar XML element.
An iCalendar stream can contain one or more iCalendar objects.
Each iCalendar object, delimited by "BEGIN:VCALENDAR" and "END:VCALENDAR", is enclosed by the IC:vcalendar XML element.
xml version "1.0" encoding "utf 8"?
> </icalendar> iCalendar objects are comprised of a set of "components", "properties", "parameters", and "values".
A "component" can contain other "components" or "properties".
A "property" has a value and a set of zero or more "parameters".
In xCal, component elements, for example, IC:vevent and IC:vtodo, are contained within an IC:components XML element.
Within the component element, another IC:components element could appear (representing components nested within components) or the IC:properties XML element could appear.
IC:properties is used to encapsulate iCalendar properties.
Each iCalendar property will be mapped to its own XML element as described below.
Within each of these elements, there is zero or one IC:
parameters XML element used to encapsulate any iCalendar property parameters.
Additionally there will be one or more XML elements representing the value of the iCalendar property.
xml version "1.0" encoding "utf 8"?
Components (RFC 5545, Section 3.6)
Each calendar component in the "VCALENDAR" object, delimited by "BEGIN" and "END", will be converted to an enclosing XML element with the same name, but in lowercase.
As an example, the table below shows iCalendar to xCal mappings for current iCalendar components.
Any new iCalendar components added in the future will be converted in the same way.
Properties (RFC 5545, Sections 3.7 and 3.8)
iCalendar properties, whether they apply to the "VCALENDAR" object or to a component, are handled in a consistent way in the xCal format.
iCalendar properties are enclosed in the XML element IC:properties.
Each individual iCalendar property is represented in xCal by an element of the same name as the iCalendar property, but in lowercase.
For example, the "CALSCALE" property is represented in xCal by the IC:calscale element.
xml version "1.0" encoding "utf 8"?
Each property can contain an IC:parameters XML element encapsulating any iCalendar property parameters associated with the iCalendar property.
Each property will contain one or more "value" XML elements as described below representing the value of the iCalendar property.
As an example, the table below shows iCalendar to xCal mappings for current iCalendar properties.
Any new iCalendar properties added in the future will be converted in the same way.
This section describes some properties that have special handling when converting to xCal.
The following iCalendar properties can have values that consist of a list of "standard" iCalendar values separated by a specific delimiter.
In xCal, these properties are represented by an XML element that contains multiple "value" elements (Section 3.6).
In iCalendar, the "GEO" property value is defined as a semicolon  separated list of two "FLOAT" values; the first representing latitude and the second longitude.
In xCal, the value for the IC:geo element is represented by two XML elements.
These are an IC:latitude element and an IC:longitude element, each of which contains float values.
See Appendix A # 3.8.1.6.
xml version "1.0" encoding "utf 8"?
In iCalendar, the "REQUEST STATUS" property value is defined as a semicolon separated list of two or three "TEXT" values.
The first represents a code, the second a description, and the third any additional data.
In xCal, the value for the IC:request status element is represented by two or three XML elements.
These are an IC:code element, an IC: description element, and an IC:data element, each of which contains the corresponding "TEXT" values.
If there is no additional data in the iCalendar value, the IC:data element (which would be empty) SHOULD NOT be present.
See Appendix A # 3.8.8.3.
xml version "1.0" encoding "utf 8"?
Parameters (RFC 5545, Section 3.2)
iCalendar property parameters are enclosed in the XML element IC: parameters, which occurs in each property XML element.
If there are no iCalendar property parameters, the IC:
parameters element (which would be empty) SHOULD NOT be present.
Each individual iCalendar property parameter is represented in xCal by an element of the same name as the iCalendar property parameter, but in lowercase.
For example, the "PARTSTAT" property parameter is represented in xCal by the IC:partstat element.
xml version "1.0" encoding "utf 8"?
Each XML parameter element contains one or more child XML elements representing iCalendar value types.
As an example, the table below shows iCalendar to xCal mappings for current iCalendar parameters.
Any new iCalendar parameters added in the future will be converted in the same way.
Parameter iCalendar defines a "VALUE" property parameter (Section 3.2.20 of [RFC5545]).
This property parameter is not mapped to an xCal XML element.
Instead, the value type is handled by having different XML elements for each value, and these appear inside of property elements.
Thus, when converting from iCalendar to xCal, any "VALUE" property parameters are skipped.
When converting from xCal into iCalendar, the appropriate "VALUE" property parameter MUST be included in the iCalendar property if the value type is not the default value type for that property.
Values (RFC 5545, Section 3.3)
In the typical case, iCalendar value types are mapped into XML elements with a matching name in all lowercase.
In the case of the value for a recurrence rule (see below), iCalendar defines "structured" values, and these are mapped into separate child elements for each value element.
Binary (RFC 5545, Section 3.3.1)
iCalendar "BINARY" property values are represented by the IC:binary XML element.
The content of the element is base64 encoded data, conforming to Section 4 of [RFC4648], which is the base64 method used in [RFC5545].
Whitespace MAY be inserted into the data at any point to "wrap" the data to reasonable line lengths.
When converting back to iCalendar, the whitespace MUST first be removed.
# 3.3.1 Example: <binary>SGVsbG8gV29ybGQh</binary> 3.6.2.
(RFC 5545, Section 3.3.2) Description:
iCalendar "BOOLEAN" property values are represented by the IC:boolean XML element.
The content of the element is a boolean value.
XML Definition:  Appendix A # 3.3.2 Example:
Calendar User Address (RFC 5545, Section 3.3.3)
iCalendar "CAL ADDRESS" property values are represented by the IC:cal address XML element.
The content of the element is a URI.
# 3.3.3 Example: <cal address
(RFC 5545, Section 3.3.4) Description:
iCalendar "DATE" property values are represented by the IC:date XML element.
(RFC 5545, Section 3.3.5) Description:
iCalendar "DATE TIME" property values are represented by the IC:date time XML element.
Note that while [W3C.REC xmlschema 2 20041028] allows for a UTC offset to be included in date/time values, xCal does not use that, and instead follows the iCalendar behavior of using time zone definitions via the "TZID" property parameter.
# 3.3.5 Example: <date time>2011 05
(RFC 5545, Section 3.3.6) Description:
iCalendar "DURATION" property values are represented by the IC:duration XML element.
The content of the element is the same duration value specified by [RFC5545].
Float (RFC 5545, Section 3.3.7)
"FLOAT" property values are represented by the IC:float XML element.
The content of the element is a text representation of a floating point number.
# 3.3.7 Example: <float>0.5</float> 3.6.8.
Integer (RFC 5545, Section 3.3.8)
iCalendar "INTEGER" property values are represented by the IC:integer XML element.
The content of the element is a text representation of an integer number.
A # 3.3.8 Examples: <integer>50</integer
Period of Time (RFC 5545, Section 3.3.9)
iCalendar "PERIOD" property values are represented by the IC:period XML element.
The content of the element is child elements representing the start, end, or duration components of the period.
XML Definition:  Appendix A # 3.3.9 Example: <period> <start>2011 05 17T12:00:00</start
Recurrence Rule (RFC 5545, Section 3.3.10)
"RECUR" property values are represented by the IC:recur XML element.
The content of the element is child elements representing the various components of a recurrence rule.
XML Definition:  Appendix A # 3.3.10 Example:
Text (RFC 5545, Section 3.3.11)
iCalendar "TEXT" property values are represented by the IC:text XML element.
The content of the element is simple text.
XML Definition:  Appendix A # 3.3.11 Example:
Time (RFC 5545, Section 3.3.12)
iCalendar "TIME" property values are represented by the IC:time XML element.
Note that while [W3C.REC xmlschema 2 20041028] allows for a UTC offset to be included in date/time values, xCal does not use that, and instead follows the iCalendar behavior of using time zone definitions via the "TZID" property parameter.
XML Definition:  Appendix A # 3.3.12 Example: <time>12:00:00</time
URI (RFC 5545, Section 3.3.13)
iCalendar "URI" property values are represented by the IC:uri XML element.
The content of the element is a URI.
UTC Offset (RFC 5545, Section 3.3.14)
iCalendar "UTC OFFSET" property values are represented by the IC:utc offset XML element.
Extensions iCalendar extension properties and property parameters (those with an "X " prefix in their name) are handled in the same way as other properties and property parameters: the property or property parameter is represented by an XML element with the same name, but in lowercase, e.g., the "X FOO" property in iCalendar turns into the IC:
x foo element in xCal.
However, see Section 5 for how to deal with default values for unrecognized extension properties or property parameters.
4.  Converting from xCal into iCalendar When converting component, property, and property parameter values, the names SHOULD be converted to uppercase.
Although iCalendar names are case insensitive, common practice is to keep them all uppercase following the actual definitions in [RFC5545].
BACKSLASH character encoding and line folding MUST be applied to the resulting iCalendar data as required by [RFC5545].
Non binary value types MUST NOT be base64 encoded.
4.1.  Converting XML Extensions into iCalendar XML extensions are converted back to iCalendar in one of two ways, depending on whether the extensions are in the iCalendar XML namespace or in an external namespace.
Extensions that are part of the iCalendar XML namespace MUST have element names that begin with "x ", and will be converted back to the equivalent extension property in iCalendar.
For example, the "x foo" element will convert to the "X FOO" iCalendar property.
Extensions that are in a namespace other than the iCalendar XML namespace SHOULD be preserved in the iCalendar representation using the "XML" iCalendar property described in Section 4.2.
Only those extension elements that are immediate child elements of the IC: properties element are converted, any others are ignored.
The XML Property for iCalendar
This section describes an extension property for iCalendar, as covered in Section 8.2.3 of [RFC5545].
To embed extended XML encoded iCalendar data in the iCalendar format.
The default value type is "TEXT".
The value type can also be set to "BINARY" to indicate base64 encoded content.
Property parameters: IANA, non standard, inline encoding, and value data type property parameters can be specified on this property.
The property can be specified multiple times in any calendar component.
The value of this property is a single XML 1.0 [W3C.REC xml 20081126] element.
The "XML" property MUST NOT be used to contain properties that are already defined in iCalendar.
Since all elements in the urn:ietf:params:xml:
icalendar 2.0 namespace convert to a well defined iCalendar object, the elements in this property MUST NOT be in the urn:
The XML element that is the value of this property MUST have an XML namespace declaration.
The default value type for this property is "TEXT", and normal BACKSLASH character encoding rules for that value MUST be applied.
Note that the source XML can contain characters not allowed in "TEXT" property values.
If this is the case, then the XML data MUST be base64 encoded.
As required by [RFC5545], the "ENCODING" property parameter MUST be present and set to "BASE64", and the "VALUE" property parameter MUST be present and set to "BINARY".
The ordering of "XML" properties is not preserved in the conversion between xCal and iCalendar.
This property is defined by the following notation
The following is an example of a location embedded in KML markup inside the "XML" property.
An incomplete example of a KML docum ent used as an example!</description>\n </Document>\n
Handling Unrecognized Properties or Parameters
In iCalendar, properties have a default value type specified by their definition,
e.g., "SUMMARY"'s value type is "TEXT" and "DURATION"
When a property uses its default value type, the "VALUE" property parameter does not need to be specified on the property.
When new properties are defined or "X " properties are used, an iCalendar >xCal converter might not recognize them, and know what the appropriate default value types are, yet they need to be able to preserve the values.
A similar issue arises for unrecognized property parameters.
As a result, the following rules are applied when dealing with unrecognized properties and property parameters:  When converting iCalendar into xCal:
Any property that does not include a "VALUE" property parameter and whose default value type is not known MUST be converted using the value type XML element IC:unknown.
The content of that element is the unprocessed value text.
Any unrecognized property parameter MUST be converted using the value type XML element IC:
unknown, with its content set to the property parameter value text, treated as if it were a "TEXT" value or list of "TEXT" values.
When converting xCal into iCalendar:
unknown property value XML elements are converted directly into iCalendar values.
The containing property MUST NOT have a "VALUE" property parameter.
unknown parameter value XML elements are converted as if they were IC:text value type XML elements.
The following is an example of an unrecognized iCalendar property (that uses a "DATE TIME" value as its default) and the equivalent xCal representation of that property.
The following is an example of an unrecognized iCalendar property parameter (that uses a "DURATION" value as its default) specified on a recognized iCalendar property, and the equivalent xCal representation of that property and property parameter.
DTSTART;X PARAM PT30M:20110512T130000Z xCal: <dtstart> <parameters> <
time>2011 05 12T13:00:00Z</date time> </dtstart
Security Considerations For security considerations specific to calendar data, see Section 7 of [RFC5545].
Since this specification is a mapping from iCalendar, no new security concerns are introduced related to calendar data.
The use of XML as a format does have security risks.
Section 7 of [RFC3470] discusses these risks.
See also the security discussion for the application/xml type in [RFC3023].
This document defines a new URN to identify a new XML namespace for iCalendar data.
The URN conforms to a registry mechanism described in [RFC3688].
This document defines a new media type.
The registration is in Section 7.2.
This document defines a new property for iCalendar.
The registration is in Section 7.3.
Namespace Registration Registration request for the iCalendar namespace:
: See the "Authors' Addresses" section of this document.
Namespace URIs do not represent an XML specification.
This section defines the MIME media type for use with iCalendar in XML data.
Type name:  application Subtype name:
calendar xml Required parameters:  None Optional parameters:  method, component, and optinfo as defined for the text/calendar media type in [RFC5545]; charset as defined for application/xml in [RFC3023]; per [RFC3023], use of the charset property parameter with the value "utf 8" is STRONGLY RECOMMENDED.
Encoding considerations:  Same as encoding considerations of application/xml as specified in [RFC3023].
This media type provides an alternative format for iCalendar data based on XML.
Applications that use this media type:  Applications that currently make use of the text/calendar media type can use this as an alternative.
Additional information: Magic number(s):  None File extension(s):  xcs Macintosh file type code(s):
Person & email address to contact for further information:
Intended usage:  COMMON Restrictions on usage:
There are no restrictions on where this media type can be used.
See the "Authors' Addresses" section of this document.
This document defines the following new iCalendar property to be added to the registry defined in Section 8.2.3 of [RFC5545]:
Below is a RELAX NG schema for iCalendar in XML.
The schema is non  normative and given for reference only.
This schema uses the compact notation of RELAX NG.
The numeric section numbers given in the comments refer to sections in [RFC5545].
The ordering of elements follows the section ordering of [RFC5545].
The RELAX NG compact notation "?"
operator is used to indicate an unordered list of items.
However, that operator, as defined, allows "mixing" each element that it operates on at any depth within the other elements, rather than just allowing "mixing" of siblings only.
As a result, the schema provided allows certain constructs that are not allowed in iCalendar.
Given that there is no sibling only unordered list operator in RELAX NG, this is the best representation that can be given.
Patterns for date/time, duration, and UTC offset values are given because those differ from the values used in iCalendar.
More restrictive schema with patterns and numerical limits could be derived from the example schema here if more comprehensive schema validation is required.
# RELAX NG Schema for iCalendar in XML default namespace
ns:icalendar 2.0" # 3.2 Property Parameters # 3.2.1
# 3.2.9 Free/Busy Time Type fbtypeparam
element fbtype { element text { "
memberparam   element member { value cal address  }
# 3.2.12 Participation Status partstatparam   element partstat { type partstat event
type partstat todo   type partstat
jour } type partstat event
element sent by { value cal address }
element float { xsd:float }
# 3.3.10 RECUR value recur   element recur { type freq, (type until   type count)?
positiveInteger } type bysecond   element bysecond { xsd:positiveInteger } type byminute
element byminute { xsd:positiveInteger } type byhour
, type weekday } type bymonthday
element bymonthday { xsd:integer } type byyearday   element byyearday { xsd:
integer } type byweekno   element byweekno { xsd:integer } type bymonth
element bysetpos { xsd:integer }
element uri { xsd:anyURI }
} type eventprop   element properties { property dtstamp & property dtstart & property uid & property class? & property created? & property description? & property geo?
last mod? & property location?
& property organizer? & property priority?
& property seq? & property status event?
property summary? & property transp?
& property url? & property recurid? & property rrule?
& (property dtend   property duration)?
& property attach  & property
attendee  & property categories  & property comment  & property contact  & property exdate  & property rstatus  & property related  & property
resources  & property rdate  }
To do Component component vtodo   element vtodo { type todoprop, element components { component valarm  }
} type todoprop   element properties { property dtstamp & property uid & property class? & property completed?
& property created? & property description? & property geo?
last mod? & property location?
& property organizer? & property percent?
& property priority? & property recurid?
& property seq? & property status todo?
& property url? & property rrule?
resources  & property rdate  }
# 3.6.3 Journal Component component vjournal   element vjournal { type jourprop } type jourprop   element properties { property dtstamp & property uid & property class? & property created? & property dtstart?
& property last mod? & property organizer? & property recurid?
& property seq? & property status jour? & property summary?
& property url? & property rrule?
& property attach  & property attendee  & property categories  & property comment  & property contact  & property description? &
property exdate  & property related  & property
rdate  & property rstatus  }
# 3.6.4 Free/Busy Component component vfreebusy   element vfreebusy { type fbprop } type fbprop
element properties { property dtstamp & property uid & property contact?
& property dtstart? & property dtend?
& property duration? & property organizer?
& property url? & property attendee  & property comment  & property freebusy  & property rstatus  }
} } component standard   element standard { type tzprop } component daylight
element daylight { type tzprop } type tzprop   element properties { property dtstart & property tzoffsetto & property tzoffsetfrom & property rrule? & property comment  & property rdate  & property tzname  }
type dispprop   element properties { property action & property description & property trigger & property
} type emailprop   element properties { property action & property description & property trigger & (property duration, property repeat)? }
{ xsd:float }, element longitude { xsd:float } }
# 3.8.1.7 Location property location   element location { element parameters
element resources { element parameters { altrepparam?
Time End property dtend   element dtend { element parameters { tzidparam? }?
Time Start property dtstart   element dtstart { element parameters { tzidparam? }?
# 3.8.3.3 Time Zone Offset
element tzoffsetfrom { element parameters { empty }?
, value cal address }
# 3.8.4.4 Recurrence ID property recurid   element recurrence id { element parameters { tzidparam? & rangeparam? }?
, value date time   value date }
Times property exdate   element exdate { element parameters { tzidparam? }?
, value date time    value date  }
# 3.8.5.2 Recurrence Date/Times property rdate
element rdate { element parameters { tzidparam? }?
, value date time    value date
# 3.8.5.3 Recurrence Rule property rrule   element rrule { element parameters { empty }?
This section contains two examples of iCalendar objects with their xCal representation.
xml version "1.0" encoding "utf 8"?
<vevent> <properties> <dtstamp> <date time>2008
02 05T19:12:24Z</date time> </dtstamp> <dtstart
FREQ YEARLY;BYDAY 1SU;BYMONTH 4 TZNAME:EDT TZOFFSETFROM:
VEVENT DTSTAMP:20060206T001121Z DTSTART;TZID US/Eastern:20060102T120000 DURATION:
FREQ DAILY;COUNT 5 RDATE;TZID US/
Event #2 DESCRIPTION:We are having a meeting all this week at 12 pm fo r one hour\, with an additional meeting on the first day 2 h ours long.\nPlease bring your own lunch for the 12 pm meetin gs.
xml version "1.0" encoding "utf 8" ?
> <last modified> <date time>2004
01 10T03:28:45Z</date time> </last modified>
> <daylight> <properties> <dtstart> <date
> </dtstart> <rrule> <recur> <freq
> </daylight> <standard> <properties> <dtstart> <date time>2000 10 26T02:00:00</date time
> </dtstart> <rrule> <recur> <freq
time>2006 02 06T00:11:21Z</date time> </dtstamp> <dtstart> <parameters> <tzid><text
time>2006 01 02T12:00:00</date time> </dtstart> <duration> <duration
We are having a meeting all this week at 12 pm for one hour, with an additional meeting on the first day 2 hours long.&#x0a;Please bring your own lunch for the 12 pm meetings.</text
time>2006 02 06T00:11:21Z</date time> </dtstamp> <dtstart> <parameters> <tzid><text
time>2006 01 04T14:00:00</date time> </dtstart
time>2006 01 04T12:00:00</date time> </recurrence id>
> </summary> <uid> <text>00959BC664CA650E933C892C@example.com</text> </uid
