- title: __initial_text__
  contents:
  - "              A Framework for Consent-Based Communications\n                in\
    \ the Session Initiation Protocol (SIP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   SIP supports communications for several services, including real-time\n\
    \   audio, video, text, instant messaging, and presence.  In its current\n   form,\
    \ it allows session invitations, instant messages, and other\n   requests to be\
    \ delivered from one party to another without requiring\n   explicit consent of\
    \ the recipient.  Without such consent, it is\n   possible for SIP to be used\
    \ for malicious purposes, including\n   amplification and DoS (Denial of Service)\
    \ attacks.  This document\n   identifies a framework for consent-based communications\
    \ in SIP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Definitions and Terminology .....................................3\n  \
    \ 3. Relays and Translations .........................................4\n   4.\
    \ Architecture ....................................................6\n      4.1.\
    \ Permissions at a Relay .....................................6\n      4.2. Consenting\
    \ Manipulations on a Relay's Translation Logic ....7\n      4.3. Store-and-Forward\
    \ Servers ..................................8\n      4.4. Recipients Grant Permissions\
    \ ...............................9\n      4.5. Entities Implementing This Framework\
    \ .......................9\n   5. Framework Operations ............................................9\n\
    \      5.1. Amplification Avoidance ...................................11\n  \
    \         5.1.1. Relay's Behavior ...................................12\n    \
    \  5.2. Subscription to the Permission Status .....................12\n      \
    \     5.2.1. Relay's Behavior ...................................13\n      5.3.\
    \ Request for Permission ....................................13\n           5.3.1.\
    \ Relay's Behavior ...................................13\n      5.4. Permission\
    \ Document Structure .............................15\n      5.5. Permission Requested\
    \ Notification .........................16\n      5.6. Permission Grant ..........................................17\n\
    \           5.6.1. Relay's Behavior ...................................17\n  \
    \                5.6.1.1. SIP Identity ..............................17\n    \
    \              5.6.1.2. P-Asserted-Identity .......................17\n      \
    \            5.6.1.3. Return Routability ........................18\n        \
    \          5.6.1.4. SIP Digest ................................19\n      5.7.\
    \ Permission Granted Notification ...........................19\n      5.8. Permission\
    \ Revocation .....................................19\n      5.9. Request-Contained\
    \ URI Lists ...............................20\n           5.9.1. Relay's Behavior\
    \ ...................................21\n           5.9.2. Definition of the 470\
    \ Response Code ................21\n           5.9.3. Definition of the Permission-Missing\
    \ Header Field ..22\n      5.10. Registrations ............................................22\n\
    \      5.11. Relays Generating Traffic towards Recipients .............25\n  \
    \         5.11.1. Relay's Behavior ..................................25\n    \
    \       5.11.2. Definition of the Trigger-Consent Header Field ....25\n   6. IANA\
    \ Considerations ............................................26\n      6.1. Registration\
    \ of the 470 Response Code .....................26\n      6.2. Registration of\
    \ the Trigger-Consent Header Field ..........26\n      6.3. Registration of the\
    \ Permission-Missing Header Field .......26\n      6.4. Registration of the target-uri\
    \ Header Field Parameter .....26\n   7. Security Considerations ........................................27\n\
    \   8. Acknowledgments ................................................28\n  \
    \ 9. References .....................................................28\n    \
    \  9.1. Normative References ......................................28\n      9.2.\
    \ Informative References ....................................29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Session Initiation Protocol (SIP) [RFC3261] supports\n\
    \   communications for several services, including real-time audio,\n   video,\
    \ text, instant messaging, and presence.  This communication is\n   established\
    \ by the transmission of various SIP requests (such as\n   INVITE and MESSAGE\
    \ [RFC3428]) from an initiator to the recipient with\n   whom communication is\
    \ desired.  Although a recipient of such a SIP\n   request can reject the request,\
    \ and therefore decline the session, a\n   network of SIP proxy servers will deliver\
    \ a SIP request to its\n   recipients without their explicit consent.\n   Receipt\
    \ of these requests without explicit consent can cause a number\n   of problems.\
    \  These include amplification and DoS (Denial of Service)\n   attacks.  These\
    \ problems are described in more detail in a companion\n   requirements document\
    \ [RFC4453].\n   This specification defines a basic framework for adding consent-based\n\
    \   communication to SIP.\n"
- title: 2.  Definitions and Terminology
  contents:
  - "2.  Definitions and Terminology\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n   Recipient URI:  The Request-URI of an outgoing request\
    \ sent by an\n      entity (e.g., a user agent or a proxy).  The sending of such\n\
    \      request can have been the result of a translation operation.\n   Relay:\
    \  Any SIP server, be it a proxy, B2BUA (Back-to-Back User\n      Agent), or some\
    \ hybrid, that receives a request, translates its\n      Request-URI into one\
    \ or more next-hop URIs (i.e., recipient URIs),\n      and delivers the request\
    \ to those URIs.\n   Target URI:  The Request-URI of an incoming request that\
    \ arrives to a\n      relay that will perform a translation operation.\n   Translation\
    \ logic:  The logic that defines a translation operation at\n      a relay.  This\
    \ logic includes the translation's target and\n      recipient URIs.\n   Translation\
    \ operation:  Operation by which a relay translates the\n      Request-URI of\
    \ an incoming request (i.e., the target URI) into one\n      or more URIs (i.e.,\
    \ recipient URIs) that are used as the Request-\n      URIs of one or more outgoing\
    \ requests.\n"
- title: 3.  Relays and Translations
  contents:
  - "3.  Relays and Translations\n   Relays play a key role in this framework.  A\
    \ relay is defined as any\n   SIP server, be it a proxy, B2BUA (Back-to-Back User\
    \ Agent), or some\n   hybrid, that receives a request, translates its Request-URI\
    \ into one\n   or more next-hop URIs, and delivers the request to those URIs.\
    \  The\n   Request-URI of the incoming request is referred to as 'target URI'\n\
    \   and the destination URIs of the outgoing requests are referred to as\n   'recipient\
    \ URIs', as shown in Figure 1.\n                       +---------------+  recipient\
    \ URI\n                       |               |---------------->\n           \
    \            |               |\n           target URI  |  Translation  |     [...]\n\
    \        -------------->|   Operation   |\n                       |          \
    \     |  recipient URI\n                       |               |---------------->\n\
    \                       +---------------+\n                      Figure 1: Translation\
    \ Operation\n   Thus, an essential aspect of a relay is that of translation. \
    \ When a\n   relay receives a request, it translates the Request-URI (target URI)\n\
    \   into one or more additional URIs (recipient URIs).  Through this\n   translation\
    \ operation, the relay can create outgoing requests to one\n   or more additional\
    \ recipient URIs, thus creating the consent problem.\n   The consent problem is\
    \ created by two types of translations:\n   translations based on local data and\
    \ translations that involve\n   amplifications.\n   Translation operations based\
    \ on local policy or local data (such as\n   registrations) are the vehicle by\
    \ which a request is delivered\n   directly to an endpoint, when it would not\
    \ otherwise be possible to.\n   In other words, if a spammer has the address of\
    \ a user,\n   'sip:user@example.com', it cannot deliver a MESSAGE request to the\
    \ UA\n   (user agent) of that user without having access to the registration\n\
    \   data that maps 'sip:user@example.com' to the user agent on which that\n  \
    \ user is present.  Thus, it is the usage of this registration data,\n   and more\
    \ generally, the translation logic, that is expected to be\n   authorized in order\
    \ to prevent undesired communications.  Of course,\n   if the spammer knows the\
    \ address of the user agent, it will be able\n   to deliver requests directly\
    \ to it.\n   Translation operations that result in more than one recipient URI\
    \ are\n   a source of amplification.  Servers that do not perform translations,\n\
    \   such as outbound proxy servers, do not cause amplification.  On the\n   other\
    \ hand, servers that perform translations (e.g., inbound proxies\n   authoritatively\
    \ responsible for a SIP domain) may cause amplification\n   if the user can be\
    \ reached at multiple endpoints (thereby resulting\n   in multiple recipient URIs).\n\
    \   Figure 2 shows a relay that performs translations.  The user agent\n   client\
    \ in the figure sends a SIP request to a URI representing a\n   resource in the\
    \ domain 'example.com' (sip:resource@example.com).\n   This request can pass through\
    \ a local outbound proxy (not shown), but\n   eventually arrives at a server authoritative\
    \ for the domain\n   'example.com'.  This server, which acts as a relay, performs\
    \ a\n   translation operation, translating the target URI into one or more\n \
    \  recipient URIs, which can (but need not) belong to the domain\n   'example.com'.\
    \  This relay can be, for instance, a proxy server or a\n   URI-list service [RFC5363].\n\
    \                                                    +-------+\n             \
    \                                       |       |\n                          \
    \                         >|  UA   |\n                                       \
    \           / |       |\n                                                 /  +-------+\n\
    \                                                /\n                         \
    \                      /\n                  +-----------------------+   /\n  \
    \                |                       |  /\n    +-----+       |         Relay\
    \         | /       +-------+\n    |     |       |                       |/  \
    \      |       |\n    | UA  |------>|                       |-------->| Proxy\
    \ |\n    |     |       |+---------------------+|\\        |       |\n    +-----+\
    \       ||     Translation     || \\       +-------+\n                  ||   \
    \     Logic        ||  \\\n                  |+---------------------+|   \\  \
    \     [...]\n                  +-----------------------+    \\\n             \
    \                                   \\\n                                     \
    \            \\  +-------+\n                                                 \
    \ \\ |       |\n                                                   >| B2BUA |\n\
    \                                                    |       |\n             \
    \                                       +-------+\n                 Figure 2:\
    \ Relay Performing a Translation\n   This framework allows potential recipients\
    \ of a translation to agree\n   to be actual recipients by giving the relay performing\
    \ the\n   translation permission to send them traffic.\n"
- title: 4.  Architecture
  contents:
  - "4.  Architecture\n   Figure 3 shows the architectural elements of this framework.\
    \  The\n   manipulation of a relay's translation logic typically causes the\n\
    \   relay to send a permission request, which in turn causes the\n   recipient\
    \ to grant or deny the relay permissions for the translation.\n   Section 4.1\
    \ describes the role of permissions at a relay.  Section\n   4.2 discusses the\
    \ actions taken by a relay when its translation logic\n   is manipulated by a\
    \ client.  Section 4.3 discusses store-and-forward\n   servers and their functionality.\
    \  Section 4.4 describes how potential\n   recipients can grant a relay permissions\
    \ to add them to the relay's\n   translation logic.  Section 4.5 discusses which\
    \ entities need to\n   implement this framework.\n                  +-----------------------+\
    \ Permission +-------------+\n                  |                       |  Request\
    \   |             |\n   +--------+     |         Relay         |----------->|\
    \ Store & Fwd |\n   |        |     |                       |            |   Server\
    \    |\n   | Client |     |                       |            |             |\n\
    \   |        |     |+-------+ +-----------+|            +-------------+\n   +--------+\
    \     ||Transl.| |Permissions||                   |\n       |          ||Logic\
    \  | |           ||        Permission |\n       |          |+-------+ +-----------+|\
    \         Request   |\n       |          +-----------------------+           \
    \        V\n       |               ^           ^                   +-------------+\n\
    \       | Manipulation  |           |  Permission Grant |             |\n    \
    \   +---------------+           +-------------------|  Recipient  |\n        \
    \                                               |             |\n            \
    \                                           +-------------+\n                \
    \     Figure 3: Reference Architecture\n"
- title: 4.1.  Permissions at a Relay
  contents:
  - "4.1.  Permissions at a Relay\n   Relays implementing this framework obtain and\
    \ store permissions\n   associated to their translation logic.  These permissions\
    \ indicate\n   whether or not a particular recipient has agreed to receive traffic\n\
    \   at any given time.  Recipients that have not given the relay\n   permission\
    \ to send them traffic are simply ignored by the relay when\n   performing a translation.\n\
    \   In principle, permissions are valid as long as the context where they\n  \
    \ were granted is valid or until they are revoked.  For example, the\n   permissions\
    \ obtained by a URI-list SIP service that distributes\n   MESSAGE requests to\
    \ a set of recipients will be valid as long as the\n   URI-list SIP service exists\
    \ or until the permissions are revoked.\n   Additionally, if a recipient is removed\
    \ from a relay's translation\n   logic, the relay SHOULD delete the permissions\
    \ related to that\n   recipient.  For example, if the registration of a contact\
    \ URI expires\n   or is otherwise terminated, the registrar deletes the permissions\n\
    \   related to that contact address.\n   It is also RECOMMENDED that relays request\
    \ recipients to refresh\n   their permissions periodically.  If a recipient fails\
    \ to refresh its\n   permissions for a given period of time, the relay SHOULD\
    \ delete the\n   permissions related to that recipient.\n      This framework\
    \ does not provide any guidance for the values of the\n      refreshment intervals\
    \ because different applications can have\n      different requirements to set\
    \ those values.  For example, a relay\n      dealing with recipients that do not\
    \ implement this framework may\n      choose to use longer intervals between refreshes.\
    \  The refresh\n      process in such recipients has to be performed manually\
    \ by their\n      users (since the recipients do not implement this framework),\
    \ and\n      having too short refresh intervals may become too heavy a burden\n\
    \      for those users.\n"
- title: 4.2.  Consenting Manipulations on a Relay's Translation Logic
  contents:
  - "4.2.  Consenting Manipulations on a Relay's Translation Logic\n   This framework\
    \ aims to ensure that any particular relay only performs\n   translations towards\
    \ destinations that have given the relay\n   permission to perform such a translation.\
    \  Consequently, when the\n   translation logic of a relay is manipulated (e.g.,\
    \ a new recipient\n   URI is added), the relay obtains permission from the new\
    \ recipient in\n   order to install the new translation logic.  Relays ask recipients\n\
    \   for permission using MESSAGE [RFC3428] requests.\n   For example, the relay\
    \ hosting the URI-list service at\n   'sip:friends@example.com' performs a translation\
    \ from that target URI\n   to a set of recipient URIs.  When a client (e.g., the\
    \ administrator\n   of that URI-list service) adds 'bob@example.org' as a new\
    \ recipient\n   URI, the relay sends a MESSAGE request to 'sip:bob@example.org'\n\
    \   asking whether or not it is OK to perform the translation from\n   'sip:friends@example.com'\
    \ to 'sip:bob@example.org'.  The MESSAGE\n   request carries in its message body\
    \ a permission document that\n   describes the translation for which permissions\
    \ are being requested\n   and a human-readable part that also describes the translation.\
    \  If\n   the answer is positive, the new translation logic is installed at the\n\
    \   relay.  That is, the new recipient URI is added.\n      The human-readable\
    \ part is included so that user agents that do\n      not understand permission\
    \ documents can still process the request\n      and display it in a sensible\
    \ way to the user.\n   The mechanism to be used to manipulate the translation\
    \ logic of a\n   particular relay depends on the relay.  Two existing mechanisms\
    \ to\n   manipulate translation logic are XML Configuration Access Protocol\n\
    \   (XCAP) [RFC4825] and REGISTER transactions.\n      Section 5 uses a URI-list\
    \ service whose translation logic is\n      manipulated with XCAP as an example\
    \ of a translation, in order to\n      specify this framework.  Section 5.10 discusses\
    \ how to apply this\n      framework to registrations, which are a different type\
    \ of\n      translation.\n   In any case, relays implementing this framework SHOULD\
    \ have a means\n   to indicate that a particular recipient URI is in the states\n\
    \   specified in [RFC5362] (i.e., pending, waiting, error, denied, or\n   granted).\n"
- title: 4.3.  Store-and-Forward Servers
  contents:
  - "4.3.  Store-and-Forward Servers\n   When a MESSAGE request with a permission\
    \ document arrives to the\n   recipient URI to which it was sent by the relay,\
    \ the receiving user\n   can grant or deny the permission needed to perform the\
    \ translation.\n   However, the receiving user may not be available when the MESSAGE\n\
    \   request arrives, or it may have expressed preferences to block all\n   incoming\
    \ requests for a certain time period.  In such cases, a\n   store-and-forward\
    \ server can act as a substitute for the user and\n   buffer the incoming MESSAGE\
    \ requests, which are subsequently\n   delivered to the user when he or she is\
    \ available again.\n   There are several mechanisms to implement store-and-forward\
    \ message\n   services (e.g., with an instant message to email gateway).  Any\
    \ of\n   these mechanisms can be used between a user agent and its store-and-\n\
    \   forward server as long as they agree on which mechanism to use.\n   Therefore,\
    \ this framework does not make any provision for the\n   interface between user\
    \ agents and their store-and-forward servers.\n      Note that the same store-and-forward\
    \ message service can handle\n      all incoming MESSAGE requests for a user while\
    \ they are offline,\n      not only those MESSAGE requests with a permission document\
    \ in\n      their bodies.\n   Even though store-and-forward servers perform a\
    \ useful function and\n   they are expected to be deployed in most domains, some\
    \ domains will\n   not deploy them from the outset.  However, user agents and\
    \ relays in\n   domains without store-and-forward servers can still use this consent\n\
    \   framework.\n   When a relay requests permissions from an offline user agent\
    \ that\n   does not have an associated store-and-forward server, the relay will\n\
    \   obtain an error response indicating that its MESSAGE request could\n   not\
    \ be delivered.  The client that attempted to add the offline user\n   to the\
    \ relay's translation logic will be notified about the error\n   (e.g., using\
    \ the Pending Additions event package [RFC5362]).  This\n   client MAY attempt\
    \ to add the same user at a later point, hopefully\n   when the user is online.\
    \  Clients can discover whether or not a user\n   is online by using a presence\
    \ service, for instance.\n"
- title: 4.4.  Recipients Grant Permissions
  contents:
  - "4.4.  Recipients Grant Permissions\n   Permission documents generated by a relay\
    \ include URIs that can be\n   used by the recipient of the document to grant\
    \ or deny the relay the\n   permission described in the document.  Relays always\
    \ include SIP URIs\n   and can include HTTP [RFC2616] URIs for this purpose. \
    \ Consequently,\n   recipients provide relays with permissions using SIP PUBLISH\
    \ requests\n   or HTTP GET requests.\n"
- title: 4.5.  Entities Implementing This Framework
  contents:
  - "4.5.  Entities Implementing This Framework\n   The goal of this framework is\
    \ to keep relays from executing\n   translations towards unwilling recipients.\
    \  Therefore, all relays\n   MUST implement this framework in order to avoid being\
    \ used to perform\n   attacks (e.g., amplification attacks).\n   This framework\
    \ has been designed with backwards compatibility in mind\n   so that legacy user\
    \ agents (i.e., user agents that do not implement\n   this framework) can act\
    \ both as clients and recipients with an\n   acceptable level of functionality.\
    \  However, it is RECOMMENDED that\n   user agents implement this framework, which\
    \ includes supporting the\n   Pending Additions event package specified in [RFC5362],\
    \ the format\n   for permission documents specified in [RFC5361], and the header\n\
    \   fields and response code specified in this document, in order to\n   achieve\
    \ full functionality.\n   The only requirement that this framework places on store-and-forward\n\
    \   servers is that they need to be able to deliver encrypted and\n   integrity-protected\
    \ messages to their user agents, as discussed in\n   Section 7.  However, this\
    \ is not a requirement specific to this\n   framework but a general requirement\
    \ for store-and-forward servers.\n"
- title: 5.  Framework Operations
  contents:
  - "5.  Framework Operations\n   This section specifies this consent framework using\
    \ an example of the\n   prototypical call flow.  The elements described in Section\
    \ 4 (i.e.,\n   relays, translations, and store-and-forward servers) play an\n\
    \   essential role in this call flow.\n   Figure 4 shows the complete process\
    \ to add a recipient URI\n   ('sip:B@example.com') to the translation logic of\
    \ a relay.  User A\n   attempts to add 'sip:B@example.com' as a new recipient\
    \ URI to the\n   translation logic of the relay (1).  User A uses XCAP [RFC4825]\
    \ and\n   the XML (Extensible Markup Language) format for representing resource\n\
    \   lists [RFC4826] to perform this addition.  Since the relay does not\n   have\
    \ permission from 'sip:B@example.com' to perform translations\n   towards that\
    \ URI, the relay places 'sip:B@example.com' in the pending\n   state, as specified\
    \ in [RFC5362].\n   A@example.com        Relay       B's Store & Fwd   B@example.com\n\
    \                                         Server\n         |(1) Add Recipient\
    \                |                |\n         |    sip:B@example.com         \
    \   |                |\n         |--------------->|                |         \
    \       |\n         |(2) HTTP 202 (Accepted)          |                |\n   \
    \      |<---------------|                |                |\n         |      \
    \          |(3) MESSAGE sip:B@example        |\n         |                |  \
    \  Permission Document          |\n         |                |--------------->|\
    \                |\n         |                |(4) 202 Accepted|             \
    \   |\n         |                |<---------------|                |\n       \
    \  |(5) SUBSCRIBE   |                |                |\n         |    Event:\
    \ pending-additions     |                |\n         |--------------->|      \
    \          |                |\n         |(6) 200 OK      |                |  \
    \              |\n         |<---------------|                |               \
    \ |\n         |(7) NOTIFY      |                |                |\n         |<---------------|\
    \                |                |\n         |(8) 200 OK      |             \
    \   |                |\n         |--------------->|                |         \
    \       |\n         |                |                |                |User B\
    \ goes\n         |                |                |                |  online\n\
    \         |                |                |(9) Request for |\n         |   \
    \             |                |  stored messages\n         |                |\
    \                |<---------------|\n         |                |             \
    \   |(10) Delivery of|\n         |                |                |  stored messages\n\
    \         |                |                |--------------->|\n         |   \
    \             |(11) PUBLISH uri-up              |\n         |                |<--------------------------------|\n\
    \         |                |(12) 200 OK     |                |\n         |   \
    \             |-------------------------------->|\n         |(13) NOTIFY     |\
    \                |                |\n         |<---------------|             \
    \   |                |\n         |(14) 200 OK     |                |         \
    \       |\n         |--------------->|                |                |\n   \
    \                  Figure 4: Prototypical Call Flow\n"
- title: 5.1.  Amplification Avoidance
  contents:
  - "5.1.  Amplification Avoidance\n   Once 'sip:B@example.com' is in the pending\
    \ state, the relay needs to\n   ask user B for permission by sending a MESSAGE\
    \ request to\n   'sip:B@example.com'.  However, the relay needs to ensure that\
    \ it is\n   not used as an amplifier to launch amplification attacks.\n   In such\
    \ an attack, the attacker would add a large number of recipient\n   URIs to the\
    \ translation logic of a relay.  The relay would then send\n   a MESSAGE request\
    \ to each of those recipient URIs.  The bandwidth\n   generated by the relay would\
    \ be much higher than the bandwidth used\n   by the attacker to add those recipient\
    \ URIs to the translation logic\n   of the relay.\n   This framework uses a credit-based\
    \ authorization mechanism to avoid\n   the attack just described.  It requires\
    \ users adding new recipient\n   URIs to a translation to generate an amount of\
    \ bandwidth that is\n   comparable to the bandwidth the relay will generate when\
    \ sending\n   MESSAGE requests towards those recipient URIs.  When XCAP is used,\n\
    \   this requirement is met by not allowing clients to add more than one\n   URI\
    \ per HTTP transaction.  When a REGISTER transaction is used, this\n   requirement\
    \ is met by not allowing clients to register more than one\n   contact per REGISTER\
    \ transaction.\n"
- title: 5.1.1.  Relay's Behavior
  contents:
  - "5.1.1.  Relay's Behavior\n   Relays implementing this framework MUST NOT allow\
    \ clients to add more\n   than one recipient URI per transaction.  If a client\
    \ using XCAP\n   attempts to add more than one recipient URI in a single HTTP\n\
    \   transaction, the XCAP server SHOULD return an HTTP 409 (Conflict)\n   response.\
    \  The XCAP server SHOULD describe the reason for the refusal\n   in an XML body\
    \ using the <constraint-failure> element, as described\n   in [RFC4825].  If a\
    \ client attempts to register more than one contact\n   in a single REGISTER transaction,\
    \ the registrar SHOULD return a SIP\n   403 response and explain the reason for\
    \ the refusal in its reason\n   phrase (e.g., maximum one contact per registration).\n"
- title: 5.2.  Subscription to the Permission Status
  contents:
  - "5.2.  Subscription to the Permission Status\n   Clients need a way to be informed\
    \ about the status of the operations\n   they requested.  Otherwise, users can\
    \ be waiting for an operation to\n   succeed when it has actually already failed.\
    \  In particular, if the\n   target of the request for consent was not reachable\
    \ and did not have\n   an associated store-and-forward server, the client needs\
    \ to know to\n   retry the request later.  The Pending Additions SIP event package\n\
    \   [RFC5362] is a way to provide clients with that information.\n   Clients can\
    \ use the Pending Additions SIP event package to be\n   informed about the status\
    \ of the operations they requested.  That is,\n   the client will be informed\
    \ when an operation (e.g., the addition of\n   a recipient URI to a relay's translation\
    \ logic) is authorized (and\n   thus executed) or rejected.  Clients use the target\
    \ URI of the SIP\n   translation being manipulated to subscribe to the 'pending-additions'\n\
    \   event package.\n   In our example, after receiving the response from the relay\
    \ (2), user\n   A subscribes to the Pending Additions event package at the relay\
    \ (5).\n   This subscription keeps user A informed about the status of the\n \
    \  permissions (e.g., granted or denied) the relay will obtain.\n"
- title: 5.2.1.  Relay's Behavior
  contents:
  - "5.2.1.  Relay's Behavior\n   Relays SHOULD support the Pending Additions SIP\
    \ event package\n   specified in [RFC5362].\n"
- title: 5.3.  Request for Permission
  contents:
  - "5.3.  Request for Permission\n   A relay requests permissions from potential\
    \ recipients to add them to\n   its translation logic using MESSAGE requests.\
    \  In our example, on\n   receiving the request to add user B to the translation\
    \ logic of the\n   relay (1), the relay generates a MESSAGE request (3) towards\n\
    \   'sip:B@example.com'.  This MESSAGE request carries a permission\n   document,\
    \ which describes the translation that needs to be authorized\n   and carries\
    \ a set of URIs to be used by the recipient to grant or to\n   deny the relay\
    \ permission to perform that translation.  Since user B\n   is offline, the MESSAGE\
    \ request will be buffered by user B's store-\n   and-forward server.  User B\
    \ will later go online and authorize the\n   translation by using one of those\
    \ URIs, as described in Section 5.6.\n   The MESSAGE request also carries a body\
    \ part that contains the same\n   information as the permission document but in\
    \ a human-readable\n   format.\n   When user B uses one of the URIs in the permission\
    \ document to grant\n   or deny permissions, the relay needs to make sure that\
    \ it was\n   actually user B using that URI, and not an attacker.  The relay can\n\
    \   use any of the methods described in Section 5.6 to authenticate the\n   permission\
    \ document.\n"
- title: 5.3.1.  Relay's Behavior
  contents:
  - "5.3.1.  Relay's Behavior\n   Relays that implement this framework MUST obtain\
    \ permissions from\n   potential recipients before adding them to their translation\
    \ logic.\n   Relays request permissions from potential recipients using MESSAGE\n\
    \   requests.\n   Section 5.6 describes the methods a relay can use to authenticate\n\
    \   those recipients giving the relay permission to perform a particular\n   translation.\
    \  These methods are SIP identity [RFC4474],\n   P-Asserted-Identity [RFC3325],\
    \ a return routability test, or SIP\n   digest.  Relays that use the method consisting\
    \ of a return\n   routability test have to send their MESSAGE requests to a SIPS\
    \ URI,\n   as specified in Section 5.6.\n   MESSAGE requests sent to request permissions\
    \ MUST include a\n   permission document and SHOULD include a human-readable part\
    \ in their\n   bodies.  The human-readable part contains the same information\
    \ as the\n   permission document (but in a human-readable format), including the\n\
    \   URIs to grant and deny permissions.  User agents that do not\n   understand\
    \ permission documents can still process the request and\n   display it in a sensible\
    \ way to the user, as they would display any\n   other instant message.  This\
    \ way, even if the user agent does not\n   implement this framework, the (human)\
    \ user will be able to manually\n   click on the correct URI in order to grant\
    \ or deny permissions.  The\n   following is an example of a MESSAGE request that\
    \ carries a human-\n   readable part and a permission document, which follows\
    \ the format\n   specified in [RFC5361], in its body.  Not all header fields are\
    \ shown\n   for simplicity reasons.\n   MESSAGE sip:bob@example.org SIP/2.0\n\
    \   From: <sip:alices-friends@example.com>;tag=12345678\n   To: <sip:bob@example.org>\n\
    \   Content-Type: multipart/mixed;boundary=\"boundary1\"\n   --boundary1\n   Content-Type:\
    \ text/plain\n   If you consent to receive traffic sent to\n   <sip:alices-friends@example.com>,\
    \ please use one of the following\n   URIs: <sips:grant-1awdch5Fasddfce34@example.com>\
    \ or\n   <https://example.com/grant-1awdch5Fasddfce34>.  Otherwise, use one of\n\
    \   the following URIs: <sips:deny-23rCsdfgvdT5sdfgye@example.com> or\n   <https://example.com/deny-23rCsdfgvdT5sdfgye>.\n\
    \   --boundary1\n   Content-Type: application/auth-policy+xml\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n        <cp:ruleset\n            xmlns=\"urn:ietf:params:xml:ns:consent-rules\"\
    \n            xmlns:cp=\"urn:ietf:params:xml:ns:common-policy\"\n            xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\">\n            <cp:rule id=\"f1\">\n\
    \         <cp:conditions>\n             <cp:identity>\n                 <cp:many/>\n\
    \             </cp:identity>\n             <recipient>\n                 <cp:one\
    \ id=\"sip:bob@example.org\"/>\n             </recipient>\n             <target>\n\
    \                 <cp:one id=\"sip:alices-friends@example.com\"/>\n          \
    \   </target>\n         </cp:conditions>\n         <cp:actions>\n            \
    \ <trans-handling\n                 perm-uri=\"sips:grant-1awdch5Fasddfce34@example.com\"\
    >\n                 grant</trans-handling>\n             <trans-handling\n   \
    \              perm-uri=\"https://example.com/grant-1awdch5Fasddfce34\">\n   \
    \              grant</trans-handling>\n             <trans-handling\n        \
    \         perm-uri=\"sips:deny-23rCsdfgvdT5sdfgye@example.com\">\n           \
    \      deny</trans-handling>\n             <trans-handling\n                 perm-uri=\"\
    https://example.com/deny-23rCsdfgvdT5sdfgye\">\n                 deny</trans-handling>\n\
    \         </cp:actions>\n         <cp:transformations/>\n     </cp:rule>\n   \
    \  </cp:ruleset>\n   --boundary1--\n"
- title: 5.4.  Permission Document Structure
  contents:
  - "5.4.  Permission Document Structure\n   A permission document is the representation\
    \ (e.g., encoded in XML) of\n   a permission.  A permission document contains\
    \ several pieces of data:\n   Identity of the Sender:  A URI representing the\
    \ identity of the\n      sender for whom permissions are granted.\n   Identity\
    \ of the Original Recipient:  A URI representing the identity\n      of the original\
    \ recipient, which is used as the input for the\n      translation operation.\
    \  This is also called the target URI.\n   Identity of the Final Recipient:  A\
    \ URI representing the result of\n      the translation.  The permission grants\
    \ ability for the sender to\n      send requests to the target URI and for a relay\
    \ receiving those\n      requests to forward them to this URI.  This is also called\
    \ the\n      recipient URI.\n   URIs to Grant Permission:  URIs that recipients\
    \ can use to grant the\n      relay permission to perform the translation described\
    \ in the\n      document.  Relays MUST support the use of SIP and SIPS URIs in\n\
    \      permission documents and MAY support the use of HTTP and HTTPS\n      URIs.\n\
    \   URIs to Deny Permission:  URIs that recipients can use to deny the\n     \
    \ relay permission to perform the translation described in the\n      document.\
    \  Relays MUST support the use of SIP and SIPS URIs in\n      permission documents\
    \ and MAY support the use of HTTP and HTTPS\n      URIs.\n   Permission documents\
    \ can contain wildcards.  For example, a\n   permission document can request permission\
    \ for any relay to forward\n   requests coming from a particular sender to a particular\
    \ recipient.\n   Such a permission document would apply to any target URI.  That\
    \ is,\n   the field containing the identity of the original recipient would\n\
    \   match any URI.  However, the recipient URI MUST NOT be wildcarded.\n   Entities\
    \ implementing this framework MUST support the format for\n   permission documents\
    \ defined in [RFC5361] and MAY support other\n   formats.\n   In our example,\
    \ the permission document in the MESSAGE request (3)\n   sent by the relay contains\
    \ the following values:\n   Identity of the Sender:  Any sender\n   Identity of\
    \ the Original Recipient:  sip:friends@example.com\n   Identity of the Final Recipient:\
    \  sip:B@example.com\n   URI to Grant Permission:  sips:grant-1awdch5Fasddfce34@example.com\n\
    \   URI to Grant Permission:  https://example.com/grant-1awdch5Fasddfce34\n  \
    \ URI to Deny Permission:  sips:deny-23rCsdfgvdT5sdfgye@example.com\n   URI to\
    \ Deny Permission:  https://example.com/deny-23rCsdfgvdT5sdfgye\n   It is expected\
    \ that the Sender field often contains a wildcard.\n   However, scenarios involving\
    \ request-contained URI lists, such as the\n   one described in Section 5.9, can\
    \ require permission documents that\n   apply to a specific sender.  In cases\
    \ where the identity of the\n   sender matters, relays MUST authenticate senders.\n"
- title: 5.5.  Permission Requested Notification
  contents:
  - "5.5.  Permission Requested Notification\n   On receiving the MESSAGE request\
    \ (3), user B's store-and-forward\n   server stores it because user B is offline\
    \ at that point.  When user\n   B goes online, user B fetches all the requests\
    \ its store-and-forward\n   server has stored (9).\n"
- title: 5.6.  Permission Grant
  contents:
  - "5.6.  Permission Grant\n   A recipient gives a relay permission to execute the\
    \ translation\n   described in a permission document by sending a SIP PUBLISH\
    \ or an\n   HTTP GET request to one of the URIs to grant permissions contained\
    \ in\n   the document.  Similarly, a recipient denies a relay permission to\n\
    \   execute the translation described in a permission document by sending\n  \
    \ a SIP PUBLISH or an HTTP GET request to one of the URIs to deny\n   permissions\
    \ contained in the document.  Requests to grant or deny\n   permissions contain\
    \ an empty body.\n   In our example, user B obtains the permission document (10)\
    \ that was\n   received earlier by its store-and-forward server in the MESSAGE\n\
    \   request (3).  User B authorizes the translation described in the\n   permission\
    \ document received by sending a PUBLISH request (11) to the\n   SIP URI to grant\
    \ permissions contained in the permission document.\n"
- title: 5.6.1.  Relay's Behavior
  contents:
  - "5.6.1.  Relay's Behavior\n   Relays MUST ensure that the SIP PUBLISH or the HTTP\
    \ GET request\n   received was generated by the recipient of the translation and\
    \ not by\n   an attacker.  Relays can use four methods to authenticate those\n\
    \   requests: SIP identity, P-Asserted-Identity [RFC3325], a return\n   routability\
    \ test, or SIP digest.  While return routability tests can\n   be used to authenticate\
    \ both SIP PUBLISH and HTTP GET requests, SIP\n   identity, P-Asserted-Identity,\
    \ and SIP digest can only be used to\n   authenticate SIP PUBLISH requests.  SIP\
    \ digest can only be used to\n   authenticate recipients that share a secret with\
    \ the relay (e.g.,\n   recipients that are in the same domain as the relay).\n"
- title: 5.6.1.1.  SIP Identity
  contents:
  - "5.6.1.1.  SIP Identity\n   The SIP identity [RFC4474] mechanism can be used to\
    \ authenticate the\n   sender of a PUBLISH request.  The relay MUST check that\
    \ the\n   originator of the PUBLISH request is the owner of the recipient URI\n\
    \   in the permission document.  Otherwise, the PUBLISH request SHOULD be\n  \
    \ responded with a 401 (Unauthorized) response and MUST NOT be\n   processed further.\n"
- title: 5.6.1.2.  P-Asserted-Identity
  contents:
  - "5.6.1.2.  P-Asserted-Identity\n   The P-Asserted-Identity [RFC3325] mechanism\
    \ can also be used to\n   authenticate the sender of a PUBLISH request.  However,\
    \ as discussed\n   in [RFC3325], this mechanism is intended to be used only within\n\
    \   networks of trusted SIP servers.  That is, the use of this mechanism\n   is\
    \ only applicable inside an administrative domain with previously\n   agreed-upon\
    \ policies.\n   The relay MUST check that the originator of the PUBLISH request\
    \ is\n   the owner of the recipient URI in the permission document.\n   Otherwise,\
    \ the PUBLISH request SHOULD be responded with a 401\n   (Unauthorized) response\
    \ and MUST NOT be processed further.\n"
- title: 5.6.1.3.  Return Routability
  contents:
  - "5.6.1.3.  Return Routability\n   SIP identity provides a good authentication\
    \ mechanism for incoming\n   PUBLISH requests.  Nevertheless, SIP identity is\
    \ not widely available\n   on the public Internet yet.  That is why an authentication\
    \ mechanism\n   that can already be used at this point is needed.\n   Return routability\
    \ tests do not provide the same level of security as\n   SIP identity, but they\
    \ provide a better-than-nothing security level\n   in architectures where the\
    \ SIP identity mechanism is not available\n   (e.g., the current Internet).  The\
    \ relay generates an unguessable URI\n   (i.e., with a cryptographically random\
    \ user part) and places it in\n   the permission document in the MESSAGE request\
    \ (3).  The recipient\n   needs to send a SIP PUBLISH request or an HTTP GET request\
    \ to that\n   URI.  Any incoming request sent to that URI SHOULD be considered\n\
    \   authenticated by the relay.\n      Note that the return routability method\
    \ is the only one that\n      allows the use of HTTP URIs in permission documents.\
    \  The other\n      methods require the use of SIP URIs.\n   Relays using a return\
    \ routability test to perform this authentication\n   MUST send the MESSAGE request\
    \ with the permission document to a SIPS\n   URI.  This ensures that attackers\
    \ do not get access to the\n   (unguessable) URI.  Thus, the only user able to\
    \ use the (unguessable)\n   URI is the receiver of the MESSAGE request.  Similarly,\
    \ permission\n   documents sent by relays using a return routability test MUST\
    \ only\n   contain secure URIs (i.e., SIPS and HTTPS) to grant and deny\n   permissions.\
    \  A part of these URIs (e.g., the user part of a SIPS\n   URI) MUST be cryptographically\
    \ random with at least 32 bits of\n   randomness.\n   Relays can transition from\
    \ return routability tests to SIP identity\n   by simply requiring the use of\
    \ SIP identity for incoming PUBLISH\n   requests.  That is, such a relay would\
    \ reject PUBLISH requests that\n   did not use SIP identity.\n"
- title: 5.6.1.4.  SIP Digest
  contents:
  - "5.6.1.4.  SIP Digest\n   The SIP digest mechanism can be used to authenticate\
    \ the sender of a\n   PUBLISH request as long as that sender shares a secret with\
    \ the\n   relay.  The relay MUST check that the originator of the PUBLISH\n  \
    \ request is the owner of the recipient URI in the permission document.\n   Otherwise,\
    \ the PUBLISH request SHOULD be responded with a 401\n   (Unauthorized) response\
    \ and MUST NOT be processed further.\n"
- title: 5.7.  Permission Granted Notification
  contents:
  - "5.7.  Permission Granted Notification\n   On receiving the PUBLISH request (11),\
    \ the relay sends a NOTIFY\n   request (13) to inform user A that the permission\
    \ for the translation\n   has been received and that the translation logic at\
    \ the relay has\n   been updated.  That is, 'sip:B@example.com' has been added\
    \ as a\n   recipient URI.\n"
- title: 5.8.  Permission Revocation
  contents:
  - "5.8.  Permission Revocation\n   At any time, if a recipient wants to revoke any\
    \ permission, it uses\n   the URI it received in the permission document to deny\
    \ the\n   permissions it previously granted.  If a recipient loses this URI for\n\
    \   some reason, it needs to wait until it receives a new request\n   produced\
    \ by the translation.  Such a request will contain a Trigger-\n   Consent header\
    \ field with a URI.  That Trigger-Consent header field\n   will have a target-uri\
    \ header field parameter identifying the target\n   URI of the translation.  The\
    \ recipient needs to send a PUBLISH\n   request with an empty body to the URI\
    \ in the Trigger-Consent header\n   field in order to receive a MESSAGE request\
    \ from the relay.  Such a\n   MESSAGE request will contain a permission document\
    \ with a URI to\n   revoke the permission that was previously granted.\n   Figure\
    \ 5 shows an example of how a user that lost the URI to revoke\n   permissions\
    \ at a relay can obtain a new URI using the Trigger-Consent\n   header field of\
    \ an incoming request.  The user rejects an incoming\n   INVITE (1) request, which\
    \ contains a Trigger-Consent header field.\n   Using the URI in that header field,\
    \ the user sends a PUBLISH request\n   (4) to the relay.  On receiving the PUBLISH\
    \ request (4), the relay\n   generates a MESSAGE request (6) towards the user.\
    \  Finally, the user\n   revokes the permissions by sending a PUBLISH request\
    \ (8) to the\n   relay.\n           Relay                     B@example.com\n\
    \             |(1) INVITE                   |\n             |    Trigger-Consent:\
    \ sip:123@relay.example.com\n             |     ;target-uri=\"sip:friends@relay.example.com\"\
    \n             |---------------------------->|\n             |(2) 603 Decline\
    \              |\n             |<----------------------------|\n             |(3)\
    \ ACK                      |\n             |---------------------------->|\n \
    \            |(4) PUBLISH sip:123@relay.example.com\n             |<----------------------------|\n\
    \             |(5) 200 OK                   |\n             |---------------------------->|\n\
    \             |(6) MESSAGE sip:B@example    |\n             |    Permission Document\
    \      |\n             |---------------------------->|\n             |(7) 200\
    \ OK                   |\n             |<----------------------------|\n     \
    \        |(8) PUBLISH uri-deny         |\n             |<----------------------------|\n\
    \             |(9) 200 OK                   |\n             |---------------------------->|\n\
    \                      Figure 5: Permission Revocation\n"
- title: 5.9.  Request-Contained URI Lists
  contents:
  - "5.9.  Request-Contained URI Lists\n   In the scenarios described so far, a user\
    \ adds recipient URIs to the\n   translation logic of a relay.  However, the relay\
    \ does not perform\n   translations towards those recipient URIs until permissions\
    \ are\n   obtained.\n   URI-list services using request-contained URI lists are\
    \ a special\n   case because the selection of recipient URIs is performed at the\
    \ same\n   time as the communication attempt.  A user places a set of recipient\n\
    \   URIs in a request and sends it to a relay so that the relay sends a\n   similar\
    \ request to all those recipient URIs.\n   Relays implementing this consent framework\
    \ and providing request-\n   contained URI-list services behave in a slightly\
    \ different way than\n   the relays described so far.  This type of relay also\
    \ maintains a\n   list of recipient URIs for which permissions have been received.\n\
    \   Clients also manipulate this list using a manipulation mechanism\n   (e.g.,\
    \ XCAP).  Nevertheless, this list does not represent the\n   recipient URIs of\
    \ every translation performed by the relay.  This\n   list just represents all\
    \ the recipient URIs for which permissions\n   have been received -- that is,\
    \ the set of URIs that will be accepted\n   if a request containing a URI-list\
    \ arrives to the relay.  This set of\n   URIs is a superset of the recipient URIs\
    \ of any particular\n   translation the relay performs.\n"
- title: 5.9.1.  Relay's Behavior
  contents:
  - "5.9.1.  Relay's Behavior\n   On receiving a request-contained URI list, the relay\
    \ checks whether\n   or not it has permissions for all the URIs contained in the\
    \ incoming\n   URI list.  If it does, the relay performs the translation.  If\
    \ it\n   lacks permissions for one or more URIs, the relay MUST NOT perform\n\
    \   the translation and SHOULD return an error response.\n   A relay that receives\
    \ a request-contained URI list with a URI for\n   which the relay has no permissions\
    \ SHOULD return a 470 (Consent\n   Needed) response.  The relay SHOULD add a Permission-Missing\
    \ header\n   field with the URIs for which the relay has no permissions.\n   Figure\
    \ 6 shows a relay that receives a request (1) that contains URIs\n   for which\
    \ the relay does not have permission (the INVITE carries the\n   recipient URIs\
    \ in its message body).  The relay rejects the request\n   with a 470 (Consent\
    \ Needed) response (2).  That response contains a\n   Permission-Missing header\
    \ field with the URIs for which there was no\n   permission.\n       A@example.com\
    \               Relay\n             |(1) INVITE             |\n             |\
    \    sip:B@example.com  |\n             |    sip:C@example.com  |\n          \
    \   |---------------------->|\n             |(2) 470 Consent Needed |\n      \
    \       |    Permission-Missing: sip:C@example.com\n             |<----------------------|\n\
    \             |(3) ACK                |\n             |---------------------->|\n\
    \               Figure 6: INVITE with a URI List in Its Body\n"
- title: 5.9.2.  Definition of the 470 Response Code
  contents:
  - "5.9.2.  Definition of the 470 Response Code\n   A 470 (Consent Needed) response\
    \ indicates that the request that\n   triggered the response contained a URI list\
    \ with at least one URI for\n   which the relay had no permissions.  A user agent\
    \ server generating a\n   470 (Consent Needed) response SHOULD include a Permission-Missing\n\
    \   header field in it.  This header field carries the URI or URIs for\n   which\
    \ the relay had no permissions.\n   A user agent client receiving a 470 (Consent\
    \ Needed) response without\n   a Permission-Missing header field needs to use\
    \ an alternative\n   mechanism (e.g., XCAP) to discover for which URI or URIs\
    \ there were\n   no permissions.\n   A client receiving a 470 (Consent Needed)\
    \ response uses a\n   manipulation mechanism (e.g., XCAP) to add those URIs to\
    \ the relay's\n   list of URIs.  The relay will obtain permissions for those URIs\
    \ as\n   usual.\n"
- title: 5.9.3.  Definition of the Permission-Missing Header Field
  contents:
  - "5.9.3.  Definition of the Permission-Missing Header Field\n   Permission-Missing\
    \ header fields carry URIs for which a relay did not\n   have permissions.  The\
    \ following is the augmented Backus-Naur Form\n   (BNF) [RFC5234] syntax of the\
    \ Permission-Missing header field.  Some\n   of its elements are defined in [RFC3261].\n\
    \      Permission-Missing  =  \"Permission-Missing\" HCOLON per-miss-spec\n  \
    \                           *( COMMA per-miss-spec )\n      per-miss-spec    \
    \   =  ( name-addr / addr-spec )\n                            *( SEMI generic-param\
    \ )\n   The following is an example of a Permission-Missing header field:\n  \
    \    Permission-Missing: sip:C@example.com\n"
- title: 5.10.  Registrations
  contents:
  - "5.10.  Registrations\n   Even though the example used to specify this framework\
    \ has been a\n   URI-list service, this framework applies to any type of translation\n\
    \   (i.e., not only to URI-list services).  Registrations are a different\n  \
    \ type of translations that deserve discussion.\n   Registrations are a special\
    \ type of translations.  The user\n   registering has a trust relationship with\
    \ the registrar in its home\n   domain.  This is not the case when a user gives\
    \ any type of\n   permissions to a relay in a different domain.\n   Traditionally,\
    \ REGISTER transactions have performed two operations at\n   the same time: setting\
    \ up a translation and authorizing the use of\n   that translation.  For example,\
    \ a user registering its current\n   contact URI is giving permission to the registrar\
    \ to forward traffic\n   sent to the user's AoR (Address of Record) to the registered\
    \ contact\n   URI.  This works fine when the entity registering is the same as\
    \ the\n   one that will be receiving traffic at a later point (e.g., the entity\n\
    \   receives traffic over the same connection used for the registration\n   as\
    \ described in [OUTBOUND]).  However, this schema creates some\n   potential attacks\
    \ that relate to third-party registrations.\n   An attacker binds, via a registration,\
    \ his or her AoR with the\n   contact URI of a victim.  Now the victim will receive\
    \ unsolicited\n   traffic that was originally addressed to the attacker.\n   The\
    \ process of authorizing a registration is shown in Figure 7.  User\n   A performs\
    \ a third-party registration (1) and receives a 202\n   (Accepted) response (2).\n\
    \   Since the relay does not have permission from\n   'sip:a@ws123.example.com'\
    \ to perform translations towards that\n   recipient URI, the relay places 'sip:a@ws123.example.com'\
    \ in the\n   'pending' state.  Once 'sip:a@ws123.example.com' is in the\n   'Permission\
    \ Pending' state, the registrar needs to ask\n   'sip:a@ws123.example.com' for\
    \ permission by sending a MESSAGE request\n   (3).\n   After receiving the response\
    \ from the relay (2), user A subscribes to\n   the Pending Additions event package\
    \ at the registrar (5).  This\n   subscription keeps the user informed about the\
    \ status of the\n   permissions (e.g., granted or denied) the registrar will obtain.\
    \  The\n   rest of the process is similar to the one described in Section 5.\n\
    \   A@example.com         Registrar      a@ws123.example.com\n         |(1) REGISTER\
    \       |                   |\n         |    Contact: sip:a@ws123.example.com\
    \   |\n         |------------------>|                   |\n         |(2) 202 Accepted\
    \ OK|                   |\n         |<------------------|                   |\n\
    \         |                   |(3) MESSAGE sip:a@ws123.example\n         |   \
    \                |    Permission Document\n         |                   |------------------>|\n\
    \         |                   |(4) 200 OK         |\n         |              \
    \     |<------------------|\n         |(5) SUBSCRIBE      |                  \
    \ |\n         |    Event: pending-additions           |\n         |------------------>|\
    \                   |\n         |(6) 200 OK         |                   |\n  \
    \       |<------------------|                   |\n         |(7) NOTIFY      \
    \   |                   |\n         |<------------------|                   |\n\
    \         |(8) 200 OK         |                   |\n         |------------------>|\
    \                   |\n         |                   |(9) PUBLISH uri-up |\n  \
    \       |                   |<------------------|\n         |                \
    \   |(10) 200 OK        |\n         |                   |------------------>|\n\
    \         |(11) NOTIFY        |                   |\n         |<------------------|\
    \                   |\n         |(12) 200 OK        |                   |\n  \
    \       |------------------>|                   |\n                          Figure\
    \ 7: Registration\n   Permission documents generated by registrars are typically\
    \ very\n   general.  For example, in one such document a registrar can ask a\n\
    \   recipient for permission to forward any request from any sender to\n   the\
    \ recipient's URI.  This is the type of granularity that this\n   framework intends\
    \ to provide for registrations.  Users who want to\n   define how incoming requests\
    \ are treated with a finer granularity\n   (e.g., requests from user A are only\
    \ accepted between 9:00 and 11:00)\n   will have to use other mechanisms such\
    \ as Call Processing Language\n   (CPL) [RFC3880].\n      Note that, as indicated\
    \ previously, user agents using the same\n      connection to register and to\
    \ receive traffic from the registrar,\n      as described in [OUTBOUND], do not\
    \ need to use the mechanism\n      described in this section.\n   A user agent\
    \ being registered by a third party can be unable to use\n   the SIP Identity,\
    \ P-Asserted-Identity, or SIP digest mechanisms to\n   prove to the registrar\
    \ that the user agent is the owner of the URI\n   being registered (e.g., sip:user@192.0.2.1),\
    \ which is the recipient\n   URI of the translation.  In this case, return routability\
    \ MUST be\n   used.\n"
- title: 5.11.  Relays Generating Traffic towards Recipients
  contents:
  - "5.11.  Relays Generating Traffic towards Recipients\n   Relays generating traffic\
    \ towards recipients need to make sure that\n   those recipients can revoke the\
    \ permissions they gave at any time.\n   The Trigger-Consent helps achieve this.\n"
- title: 5.11.1.  Relay's Behavior
  contents:
  - "5.11.1.  Relay's Behavior\n   A relay executing a translation that involves sending\
    \ a request to a\n   URI from which permissions were obtained previously SHOULD\
    \ add a\n   Trigger-Consent header field to the request.  The URI in the\n   Trigger-Consent\
    \ header field MUST have a target-uri header field\n   parameter identifying the\
    \ target URI of the translation.\n   On receiving a PUBLISH request addressed\
    \ to the URI that a relay\n   previously placed in a Trigger-Consent header field,\
    \ the relay SHOULD\n   send a MESSAGE request to the corresponding recipient URI\
    \ with a\n   permission document.  Therefore, the relay needs to be able to\n\
    \   correlate the URI it places in the Trigger-Consent header field with\n   the\
    \ recipient URI of the translation.\n"
- title: 5.11.2.  Definition of the Trigger-Consent Header Field
  contents:
  - "5.11.2.  Definition of the Trigger-Consent Header Field\n   The following is\
    \ the augmented Backus-Naur Form (BNF) [RFC5234]\n   syntax of the Trigger-Consent\
    \ header field.  Some of its elements are\n   defined in [RFC3261].\n      Trigger-Consent\
    \     =  \"Trigger-Consent\" HCOLON trigger-cons-spec\n                      \
    \       *( COMMA trigger-cons-spec )\n      trigger-cons-spec   =  ( SIP-URI /\
    \ SIPS-URI )\n                             *( SEMI trigger-param )\n      trigger-param\
    \       =  target-uri / generic-param\n      target-uri          =  \"target-uri\"\
    \ EQUAL\n                                 LDQUOT *( qdtext / quoted-pair ) RDQUOT\n\
    \   The target-uri header field parameter MUST contain a URI.\n   The following\
    \ is an example of a Trigger-Consent header field:\n      Trigger-Consent: sip:123@relay.example.com\n\
    \                       ;target-uri=\"sip:friends@relay.example.com\"\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   Per the following sections, IANA has registered a\
    \ SIP response code,\n   two SIP header fields, and a SIP header field parameter.\n"
- title: 6.1.  Registration of the 470 Response Code
  contents:
  - "6.1.  Registration of the 470 Response Code\n   IANA has added the following\
    \ new response code to the Methods and\n   Response Codes subregistry under the\
    \ SIP Parameters registry.\n      Response Code Number:   470\n      Default Reason\
    \ Phrase:  Consent Needed\n      Reference:              [RFC5360]\n"
- title: 6.2.  Registration of the Trigger-Consent Header Field
  contents:
  - "6.2.  Registration of the Trigger-Consent Header Field\n   IANA has added the\
    \ following new SIP header field to the Header\n   Fields subregistry under the\
    \ SIP Parameters registry.\n      Header Name:   Trigger-Consent\n      Compact\
    \ Form:  (none)\n      Reference:     [RFC5360]\n"
- title: 6.3.  Registration of the Permission-Missing Header Field
  contents:
  - "6.3.  Registration of the Permission-Missing Header Field\n   IANA has added\
    \ the following new SIP header field to the Header\n   Fields subregistry under\
    \ the SIP Parameters registry.\n      Header Name:   Permission-Missing\n    \
    \  Compact Form:  (none)\n      Reference:     [RFC5360]\n"
- title: 6.4.  Registration of the target-uri Header Field Parameter
  contents:
  - "6.4.  Registration of the target-uri Header Field Parameter\n   IANA has registered\
    \ the 'target-uri' Trigger-Consent header field\n   parameter under the Header\
    \ Field Parameters and Parameter Values\n   subregistry within the SIP Parameters\
    \ registry:\n                                                  Predefined\n  \
    \ Header Field                  Parameter Name     Values     Reference\n   ----------------------------\
    \  ---------------   ---------   ---------\n   Trigger-Consent               target-uri\
    \           No       [RFC5360]\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security has been discussed throughout the whole\
    \ document.  However,\n   there are some issues that deserve special attention.\n\
    \   Relays generally implement several security mechanisms that relate to\n  \
    \ client authentication and authorization.  Clients are typically\n   authenticated\
    \ before they can manipulate a relay's translation logic.\n   Additionally, clients\
    \ are typically also authenticated and sometimes\n   need to perform SPAM prevention\
    \ tasks [RFC5039] when they send\n   traffic to a relay.  It is important that\
    \ relays implement these\n   types of security mechanisms.  However, they fall\
    \ out of the scope of\n   this framework.  Even with these mechanisms in place,\
    \ there is still\n   a need for relays to implement this framework because the\
    \ use of\n   these mechanisms does not prevent authorized clients to add\n   recipients\
    \ to a translation without their consent.  Consequently,\n   relays performing\
    \ translations MUST implement this framework.\n      Note that, as indicated previously,\
    \ user agents using the same\n      connection to register and to receive traffic\
    \ from the registrar,\n      as described in [OUTBOUND], do not need to use this\
    \ framework.\n      Therefore, a registrar that did not accept third-party\n \
    \     registrations would not need to implement this framework.\n   As pointed\
    \ out in Section 5.6.1.3, when return routability tests are\n   used to authenticate\
    \ recipients granting or denying permissions, the\n   URIs used to grant or deny\
    \ permissions need to be protected from\n   attackers.  SIPS URIs provide a good\
    \ tool to meet this requirement,\n   as described in [RFC5361].  When store-and-forward\
    \ servers are used,\n   the interface between a user agent and its store-and-forward\
    \ server\n   is frequently not based on SIP.  In such a case, SIPS cannot be used\n\
    \   to secure those URIs.  Implementations of store-and-forward servers\n   MUST\
    \ provide a mechanism for delivering encrypted and integrity-\n   protected messages\
    \ to their user agents.\n   The information provided by the Pending Additions\
    \ event package can\n   be sensitive.  For this reason, as described in [RFC5362],\
    \ relays\n   need to use strong means for authentication and information\n   confidentiality.\
    \  SIPS URIs are a good mechanism to meet this\n   requirement.\n   Permission\
    \ documents can reveal sensitive information.  Attackers may\n   attempt to modify\
    \ them in order to have clients grant or deny\n   permissions different from the\
    \ ones they think they are granting or\n   denying.  For this reason, it is RECOMMENDED\
    \ that relays use strong\n   means for information integrity protection and confidentiality\
    \ when\n   sending permission documents to clients.\n   The mechanism used for\
    \ conveying information to clients SHOULD ensure\n   the integrity and confidentially\
    \ of the information.  In order to\n   achieve these, an end-to-end SIP encryption\
    \ mechanism, such as\n   S/MIME, as described in [RFC3261], SHOULD be used.\n\
    \   If strong end-to-end security means (such as above) are not\n   available,\
    \ it is RECOMMENDED that hop-by-hop security based on TLS\n   and SIPS URIs, as\
    \ described in [RFC3261], is used.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   Henning Schulzrinne, Jon Peterson, and Cullen Jennings\
    \ provided\n   useful ideas on this document.  Ben Campbell, AC Mahendran, Keith\n\
    \   Drage, and Mary Barnes performed a thorough review of this document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n   \
    \           Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n       \
    \       Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3261]  Rosenberg,\
    \ J., Schulzrinne, H., Camarillo, G., Johnston,\n              A., Peterson, J.,\
    \ Sparks, R., Handley, M., and E.\n              Schooler, \"SIP: Session Initiation\
    \ Protocol\", RFC 3261,\n              June 2002.\n   [RFC3428]  Campbell, B.,\
    \ Ed., Rosenberg, J., Schulzrinne, H.,\n              Huitema, C., and D. Gurle,\
    \ \"Session Initiation Protocol\n              (SIP) Extension for Instant Messaging\"\
    , RFC 3428, December\n              2002.\n   [RFC5234]  Crocker, D., Ed., and\
    \ P. Overell, \"Augmented BNF for\n              Syntax Specifications: ABNF\"\
    , STD 68, RFC 5234, January\n              2008.\n   [RFC5361]  Camarillo, G.,\
    \ \"A Document Format for Requesting Consent\",\n              RFC 5361, October\
    \ 2008.\n   [RFC5362]  Camarillo, G., \"The Session Initiation Protocol (SIP)\n\
    \              Pending Additions Event Package\", RFC 5362, October 2008.\n  \
    \ [RFC5363]  Camarillo, G. and A.B. Roach, \"Framework and Security\n        \
    \      Considerations for Session Initiation Protocol (SIP) URI-\n           \
    \   List Services\", RFC 5363, October 2008.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC3325]  Jennings, C., Peterson, J., and M.\
    \ Watson, \"Private\n              Extensions to the Session Initiation Protocol\
    \ (SIP) for\n              Asserted Identity within Trusted Networks\", RFC 3325,\n\
    \              November 2002.\n   [RFC3880]  Lennox, J., Wu, X., and H. Schulzrinne,\
    \ \"Call Processing\n              Language (CPL): A Language for User Control\
    \ of Internet\n              Telephony Services\", RFC 3880, October 2004.\n \
    \  [RFC4453]  Rosenberg, J., Camarillo, G., Ed., and D. Willis,\n            \
    \  \"Requirements for Consent-Based Communications in the\n              Session\
    \ Initiation Protocol (SIP)\", RFC 4453, April 2006.\n   [RFC4474]  Peterson,\
    \ J. and C. Jennings, \"Enhancements for\n              Authenticated Identity\
    \ Management in the Session\n              Initiation Protocol (SIP)\", RFC 4474,\
    \ August 2006.\n   [RFC4825]  Rosenberg, J., \"The Extensible Markup Language\
    \ (XML)\n              Configuration Access Protocol (XCAP)\", RFC 4825, May 2007.\n\
    \   [RFC4826]  Rosenberg, J., \"Extensible Markup Language (XML) Formats\n   \
    \           for Representing Resource Lists\", RFC 4826, May 2007.\n   [RFC5039]\
    \  Rosenberg, J. and C. Jennings, \"The Session Initiation\n              Protocol\
    \ (SIP) and Spam\", RFC 5039, January 2008.\n   [OUTBOUND] Jennings, C. and R.\
    \ Mahy, \"Managing Client Initiated\n              Connections in the Session\
    \ Initiation Protocol  (SIP)\",\n              Work in Progress, June 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jonathan Rosenberg\n   Cisco\n   Iselin, NJ 08830\n  \
    \ USA\n   EMail: jdrosen@cisco.com\n   URI:   http://www.jdrosen.net\n   Gonzalo\
    \ Camarillo (editor)\n   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n\
    \   EMail: Gonzalo.Camarillo@ericsson.com\n   Dean Willis\n   Unaffiliated\n \
    \  3100 Independence Pkwy #311-164\n   Plano, TX  75075\n   USA\n   EMail: dean.willis@softarmor.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
