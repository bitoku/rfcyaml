- contents:
  - '               Sieve Email Filtering: Variables Extension

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   In advanced mail filtering rule sets, it is useful to keep state
    or\n   configuration details across rules.  This document updates the Sieve\n
    \  filtering language (RFC 5228) with an extension to support variables.\n   The
    extension changes the interpretation of strings, adds an action\n   to store data
    in variables, and supplies a new test so that the value\n   of a string can be
    examined.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   This is an extension to the Sieve language defined by [SIEVE].
    \ It\n   adds support for storing and referencing named data.  The mechanisms\n
    \  detailed in this document will only apply to Sieve scripts that\n   include
    a require clause for the \"variables\" extension.  The require\n   clauses themselves
    are not affected by this extension.\n   Conventions for notations are as in [SIEVE]
    section 1.1, including\n   use of [KEYWORDS] and [ABNF].  The grammar builds on
    the grammar of\n   [SIEVE].  In this document, \"character\" means a character
    from the\n   ISO 10646 coded character set [ISO10646], which may consist of\n
    \  multiple octets coded in [UTF-8], and \"variable\" is a named reference\n   to
    data stored or read back using the mechanisms of this extension.\n"
  title: 1.  Introduction
- contents:
  - "2.  Capability Identifier\n   The capability string associated with the extension
    defined in this\n   document is \"variables\".\n"
  title: 2.  Capability Identifier
- contents:
  - "3.  Interpretation of Strings\n   This extension changes the semantics of quoted-string,
    multi-line-\n   literal and multi-line-dotstuff found in [SIEVE] to enable the\n
    \  inclusion of the value of variables.\n   When a string is evaluated, substrings
    matching variable-ref SHALL be\n   replaced by the value of variable-name.  Only
    one pass through the\n   string SHALL be done.  Variable names are case insensitive,
    so \"foo\"\n   and \"FOO\" refer to the same variable.  Unknown variables are
    replaced\n   by the empty string.\n      variable-ref        =  \"${\" [namespace]
    variable-name \"}\"\n      namespace           =  identifier \".\" *sub-namespace\n
    \     sub-namespace       =  variable-name \".\"\n      variable-name       =
    \ num-variable / identifier\n      num-variable        =  1*DIGIT\n   Examples:\n
    \     \"&%${}!\"     => unchanged, as the empty string is an illegal\n                      identifier\n
    \     \"${doh!}\"    => unchanged, as \"!\" is illegal in identifiers\n      The
    variable \"company\" holds the value \"ACME\".  No other variables\n      are
    set.\n      \"${full}\"         => the empty string\n      \"${company}\"      =>
    \"ACME\"\n      \"${BAD${Company}\" => \"${BADACME\"\n      \"${President, ${Company}
    Inc.}\"\n                        => \"${President, ACME Inc.}\"\n   The expanded
    string MUST use the variable values that are current\n   when control reaches
    the statement the string is part of.\n   Strings where no variable substitutions
    take place are referred to as\n   constant strings.  Future extensions may specify
    that passing non-\n   constant strings as arguments to its actions or tests is
    an error.\n   Namespaces are meant for future extensions that make internal state\n
    \  available through variables.  These variables SHOULD be put in a\n   namespace
    whose first component is the same as its capability string.\n   Such extensions
    SHOULD state which, if any, of the variables in its\n   namespace are modifiable
    with the \"set\" action.\n   References to namespaces without a prior require
    statement for the\n   relevant extension MUST cause an error.\n   Tests or actions
    in future extensions may need to access the\n   unexpanded version of the string
    argument and, e.g., do the expansion\n   after setting variables in its namespace.
    \ The design of the\n   implementation should allow this.\n"
  - contents:
    - "3.1.  Quoting and Encoded Characters\n   The semantics of quoting using backslash
      are not changed: backslash\n   quoting is resolved before doing variable substitution.
      \ Similarly,\n   encoded character processing (see Section 2.4.2.4 of [SIEVE])
      is\n   performed before doing variable substitution, but after quoting.\n   Examples:\n
      \     \"${fo\\o}\"  => ${foo}  => the expansion of variable foo.\n      \"${fo\\\\o}\"
      => ${fo\\o} => illegal identifier => left verbatim.\n      \"\\${foo}\"  =>
      ${foo}  => the expansion of variable foo.\n      \"\\\\${foo}\" => \\${foo}
      => a backslash character followed by the\n                               expansion
      of variable foo.\n      If it is required to include a character sequence such
      as\n      \"${beep}\" verbatim in a text literal, the user can define a\n      variable
      to circumvent expansion to the empty string.\n   Example:\n      set \"dollar\"
      \"$\";\n      set \"text\" \"regarding ${dollar}{beep}\";\n   Example:\n      require
      [\"encoded-character\", \"variables\"];\n      set \"name\" \"Ethelbert\"\n
      \     if header :contains \"Subject\" \"dear${hex:20 24 7b 4e}ame}\" {\n          #
      the test string is \"dear Ethelbert\"\n      }\n"
    title: 3.1.  Quoting and Encoded Characters
  - contents:
    - "3.2.  Match Variables\n   A \"match variable\" has a name consisting only of
      decimal digits and\n   has no namespace component.\n   The decimal value of
      the match variable name will index the list of\n   matching strings from the
      most recently evaluated successful match of\n   type \":matches\".  The list
      is empty if no match has been successful.\n       Note: Extra leading zeroes
      are allowed and ignored.\n   The list will contain one string for each wildcard
      (\"?\" and \"*\") in\n   the match pattern.  Each string holds the substring
      from the source\n   value that the corresponding wildcard expands to, possibly
      the empty\n   string.  The wildcards match as little as possible (non-greedy\n
      \  matching).\n   The first string in the list has index 1.  If the index is
      out of\n   range, the empty string will be substituted.  Index 0 contains the\n
      \  matched part of the source value.\n   The interpreter MUST short-circuit
      tests, i.e., not perform more\n   tests than necessary to find the result.  Evaluation
      order MUST be\n   left to right.  If a test has two or more list arguments,
      the\n   implementation is free to choose which to iterate over first.\n   An
      extension describing a new match type (e.g., [REGEX]) MAY specify\n   that match
      variables are set as a side effect when the match type is\n   used in a script
      that has enabled the \"variables\" extension.\n   Example:\n      require [\"fileinto\",
      \"variables\"];\n      if header :matches \"List-ID\" \"*<*@*\" {\n          fileinto
      \"INBOX.lists.${2}\"; stop;\n      }\n      # Imagine the header\n      # Subject:
      [acme-users] [fwd] version 1.0 is out\n      if header :matches \"Subject\"
      \"[*] *\" {\n          # ${1} will hold \"acme-users\",\n          # ${2} will
      hold \"[fwd] version 1.0 is out\"\n          fileinfo \"INBOX.lists.${1}\";
      stop;\n      }\n      # Imagine the header\n      # To: coyote@ACME.Example.COM\n
      \     if address :matches [\"To\", \"Cc\"] [\"coyote@**.com\",\n              \"wile@**.com\"]
      {\n          # ${0} is the matching address\n          # ${1} is always the
      empty string\n          # ${2} is part of the domain name (\"ACME.Example\")\n
      \         fileinto \"INBOX.business.${2}\"; stop;\n      } else {\n          #
      Control wouldn't reach this block if any match was\n          # successful,
      so no match variables are set at this\n          # point.\n      }\n      if
      anyof (true, address :domain :matches \"To\" \"*.com\") {\n          # The second
      test is never evaluated, so there are\n          # still no match variables
      set.\n          stop;\n      }\n"
    title: 3.2.  Match Variables
  title: 3.  Interpretation of Strings
- contents:
  - "4.  Action set\n   Usage:    set [MODIFIER] <name: string> <value: string>\n
    \  The \"set\" action stores the specified value in the variable\n   identified
    by name.  The name MUST be a constant string and conform\n   to the syntax of
    variable-name.  Match variables cannot be set.  A\n   namespace cannot be used
    unless an extension explicitly allows its\n   use in \"set\".  An invalid name
    MUST be detected as a syntax error.\n   Modifiers are applied on a value before
    it is stored in the variable.\n   See the next section for details.\n   Variables
    are only visible to the currently running script.  Note:\n   Future extensions
    may provide different scoping rules for variables.\n   Variable names are case
    insensitive.\n   Example:\n      set \"honorific\"  \"Mr\";\n      set \"first_name\"
    \"Wile\";\n      set \"last_name\"  \"Coyote\";\n      set \"vacation\" text:\n
    \     Dear ${HONORIFIC} ${last_name},\n      I'm out, please leave a message after
    the meep.\n      .\n      ;\n   \"set\" does not affect the implicit keep.  It
    is compatible with all\n   actions defined in [SIEVE].\n"
  - contents:
    - "4.1.  Modifiers\n   Usage:  \":lower\" / \":upper\" / \":lowerfirst\" / \":upperfirst\"
      /\n           \":quotewildcard\" / \":length\"\n   Modifier names are case insensitive.
      \ Unknown modifiers MUST yield a\n   syntax error.  More than one modifier can
      be specified, in which case\n   they are applied according to this precedence
      list, largest value\n   first:\n                     +--------------------------------+\n
      \                    | Precedence     Modifier        |\n                     +--------------------------------+\n
      \                    |     40         :lower          |\n                     |
      \               :upper          |\n                     +--------------------------------+\n
      \                    |     30         :lowerfirst     |\n                     |
      \               :upperfirst     |\n                     +--------------------------------+\n
      \                    |     20         :quotewildcard  |\n                     +--------------------------------+\n
      \                    |     10         :length         |\n                     +--------------------------------+\n
      \  It is an error to use two or more modifiers of the same precedence in\n   a
      single \"set\" action.\n   Examples:\n      # The value assigned to the variable
      is printed after the arrow\n      set \"a\" \"juMBlEd lETteRS\";             =>
      \"juMBlEd lETteRS\"\n      set :length \"b\" \"${a}\";                => \"15\"\n
      \     set :lower \"b\" \"${a}\";                 => \"jumbled letters\"\n      set
      :upperfirst \"b\" \"${a}\";            => \"JuMBlEd lETteRS\"\n      set :upperfirst
      :lower \"b\" \"${a}\";     => \"Jumbled letters\"\n      set :quotewildcard
      \"b\" \"Rock*\";        => \"Rock\\*\"\n"
    - contents:
      - "4.1.1.  Modifier \":length\"\n   The value is the decimal number of characters
        in the expansion,\n   converted to a string.\n"
      title: 4.1.1.  Modifier ":length"
    - contents:
      - "4.1.2.  Modifier \":quotewildcard\"\n   This modifier adds the necessary
        quoting to ensure that the expanded\n   text will only match a literal occurrence
        if used as a parameter to\n   :matches.  Every character with special meaning
        (\"*\", \"?\",  and \"\\\")\n   is prefixed with \"\\\" in the expansion.\n"
      title: 4.1.2.  Modifier ":quotewildcard"
    - contents:
      - "4.1.3.  Case Modifiers\n   These modifiers change the letters of the text
        from upper to lower\n   case or vice versa.  Characters other than \"A\"-\"Z\"
        and \"a\"-\"z\" from\n   US-ASCII are left unchanged.\n"
      - contents:
        - "4.1.3.1.  Modifier \":upper\"\n   All lower case letters are converted
          to their upper case\n   counterparts.\n"
        title: 4.1.3.1.  Modifier ":upper"
      - contents:
        - "4.1.3.2.  Modifier \":lower\"\n   All upper case letters are converted
          to their lower case\n   counterparts.\n"
        title: 4.1.3.2.  Modifier ":lower"
      - contents:
        - "4.1.3.3.  Modifier \":upperfirst\"\n   The first character of the string
          is converted to upper case if it is\n   a letter and set in lower case.
          \ The rest of the string is left\n   unchanged.\n"
        title: 4.1.3.3.  Modifier ":upperfirst"
      - contents:
        - "4.1.3.4.  Modifier \":lowerfirst\"\n   The first character of the string
          is converted to lower case if it is\n   a letter and set in upper case.
          \ The rest of the string is left\n   unchanged.\n"
        title: 4.1.3.4.  Modifier ":lowerfirst"
      title: 4.1.3.  Case Modifiers
    title: 4.1.  Modifiers
  title: 4.  Action set
- contents:
  - "5.  Test string\n   Usage:  string [MATCH-TYPE] [COMPARATOR]\n           <source:
    string-list> <key-list: string-list>\n   The \"string\" test evaluates to true
    if any of the source strings\n   matches any key.  The type of match defaults
    to \":is\".\n   In the \"string\" test, both source and key-list are taken from
    the\n   script, not the message, and whitespace stripping MUST NOT be done\n   unless
    the script explicitly requests this through some future\n   mechanism.\n   Example:\n
    \     set \"state\" \"${state} pending\";\n      if string :matches \" ${state}
    \" \"* pending *\" {\n          # the above test always succeeds\n      }\n   The
    \"relational\" extension [RELATIONAL] adds a match type called\n   \":count\".
    \ The count of a single string is 0 if it is the empty\n   string, or 1 otherwise.
    \ The count of a string list is the sum of the\n   counts of the member strings.\n"
  title: 5.  Test string
- contents:
  - "6.  Implementation Limits\n   An implementation of this document MUST support
    at least 128 distinct\n   variables.  The supported length of variable names MUST
    be at least\n   32 characters.  Each variable MUST be able to hold at least 4000\n
    \  characters.  Attempts to set the variable to a value larger than what\n   the
    implementation supports SHOULD be reported as an error at\n   compile-time if
    possible.  If the attempt is discovered during run-\n   time, the value SHOULD
    be truncated, and it MUST NOT be treated as an\n   error.\n   Match variables
    ${1} through ${9} MUST be supported.  References to\n   higher indices than those
    the implementation supports MUST be treated\n   as a syntax error, which SHOULD
    be discovered at compile-time.\n"
  title: 6.  Implementation Limits
- contents:
  - "7.  Security Considerations\n   When match variables are used, and the author
    of the script isn't\n   careful, strings can contain arbitrary values controlled
    by the\n   sender of the mail.\n   Since values stored by \"set\" that exceed
    implementation limits are\n   silently truncated, it's not appropriate to store
    large structures\n   with security implications in variables.\n   The introduction
    of variables makes advanced decision making easier\n   to write, but since no
    looping construct is provided, all Sieve\n   scripts will terminate in an orderly
    manner.\n   Sieve filtering should not be relied on as a security measure against\n
    \  hostile mail messages.  Sieve is designed to do simple, mostly static\n   tests,
    and is not suitable for use as a spam or virus checker, where\n   the perpetrator
    has a motivation to vary the format of the mail in\n   order to avoid filtering
    rules.  See also [SPAMTEST].\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   The following template specifies the IANA registration
    of the\n   variables Sieve extension specified in this document:\n   To: iana@iana.org\n
    \  Subject: Registration of new Sieve extension\n   Capability name: variables\n
    \  Description:     Adds support for variables to the Sieve filtering\n                    language.\n
    \  RFC number:      RFC 5229\n   Contact address: The Sieve discussion list <ietf-mta-filters@imc.org>\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Acknowledgments\n   Thanks to Cyrus Daboo, Jutta Degener, Ned Freed, Lawrence
    Greenfield,\n   Jeffrey Hutzelman, Mark E. Mallett, Alexey Melnikov, Peder Stray,
    and\n   Nigel Swinson for valuable feedback.\n"
  title: 9.  Acknowledgments
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [ABNF]       Crocker, D., Ed., and Overell,
      P., \"Augmented BNF for\n                Syntax Specifications: ABNF\", RFC
      4234, October 2005.\n   [KEYWORDS]   Bradner, S., \"Key words for use in RFCs
      to Indicate\n                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
      \  [RELATIONAL] Segmuller, W. and B. Leiba, \"Sieve Email Filtering:\n                Relational
      Extension\", RFC 5231, January 2008.\n   [SIEVE]      Guenther, P., Ed., and
      T. Showalter, Ed., \"Sieve: An\n                Email Filtering Language\",
      RFC 5228, January 2008.\n   [UTF-8]      Yergeau, F., \"UTF-8, a transformation
      format of Unicode\n                and ISO 10646\", RFC 3629, November 2003.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [ISO10646]   ISO/IEC, \"Information Technology
      - Universal Multiple-\n                Octet Coded Character Set (UCS) - Part
      1: Architecture\n                and Basic Multilingual Plane\", May 1993, with\n
      \               amendments.\n   [REGEX]      Murchison, K., \"Sieve Email Filtering
      -- Regular\n                Expression Extension\", Work in Progress, February
      2006.\n   [SPAMTEST]   Daboo, C., \"Sieve Email Filtering: Spamtest and\n                Virustest
      Extensions\", RFC 5235, January 2008.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Author's Address\n   Kjetil T. Homme\n   University of Oslo\n   PO Box 1080\n
    \  0316 Oslo, Norway\n   Phone: +47 9366 0091\n   EMail: kjetilho@ifi.uio.no\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
