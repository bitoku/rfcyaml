Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes managed objects for Multiprotocol Label Switching (MPLS) based traffic engineering (TE).
This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes managed objects for modeling a Multiprotocol Label Switching (MPLS) [RFC3031]
This MIB module should be used in conjunction with the companion document [RFC3813] for MPLS based traffic engineering configuration and management.
This document uses terminology from the MPLS architecture document [RFC3031] and MPLS Label Switch Router MIB [RFC3813].
Some frequently used terms are described next.
An explicitly routed LSP (ERLSP) is referred to as an MPLS tunnel.
It consists of in segment(s) and/or out segment(s) at the egress/ingress LSRs, each segment being associated with one MPLS interface.
These are also referred to as tunnel segments.
Additionally, at an intermediate LSR, we model a connection as consisting of one or more in segments and/or one or more out  segments.
The binding or interconnection between in segments and out segments is performed using a cross connect.
These objects are defined in the MPLS Label Switch Router MIB [RFC3813].
The Internet Standard Management Framework
For a detailed overview of the documents that describe the current Internet Standard Management Framework, please refer to section 7 of RFC 3410 [RFC3410].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
MIB objects are generally accessed through the Simple Network Management Protocol (SNMP).
Objects in the MIB are defined using the mechanisms defined in the Structure of Management Information (SMI).
This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58, RFC 2578 [RFC2578], STD 58
, RFC 2579 [RFC2579] and STD 58, RFC 2580
The MPLS traffic engineering MIB module is designed to satisfy the following requirements and constraints:
The MIB module supports configuration of point to point unidirectional tunnels.
MPLS tunnels need not be interfaces, but it is possible to configure a tunnel as an interface.
The MIB module supports tunnel establishment via an MPLS signalling protocol wherein the tunnel parameters are specified using this MIB module at the head end of the LSP, and end to end tunnel LSP establishment is accomplished via signalling.
The MIB module also supports manually configured tunnels, i.e., those for which label associations at each hop of the tunnel LSP are provisioned by the administrator via the LSR MIB [RFC3813].
The MIB module supports persistent, as well as non persistent tunnels.
Outline Traffic engineering support for MPLS tunnels requires the following configuration:  Setting up MPLS tunnels along with appropriate configuration parameters.
Configuring tunnel for loose and strict source routed hops.
These actions may need to be accompanied by corresponding actions using [RFC3813] to establish and configure tunnel segments, if this is done manually.
Also, the in segment and out segment performance tables, mplsInSegmentPerfTable, and mplsOutSegmentPerfTable
[RFC3813], should be used to determine performance of the tunnels and tunnel segments, in addition to mplsTunnelPerfTable in this MIB module.
Summary of Traffic Engineering MIB Module
The MIB module objects for performing these actions consist of the following tables:  Tunnel table (mplsTunnelTable) for setting up MPLS tunnels.
Resource table (mplsTunnelResourceTable) for setting up the tunnel resources.
Tunnel specified, actual, and computed hop tables (mplsTunnelHopTable, mplsTunnelARHopTable, and mplsTunnelCHopTable) for strict and loose source routed MPLS tunnel hops.
Tunnel performance table (mplsTunnelPerfTable) for measuring tunnel performance.
CRLDP resource table (mplsTunnelCRLDPResTable) for specifying resource objects applicable to tunnels signaled using CRLDP.
These tables are described in the subsequent sections.
Brief Description of MIB Objects
The objects described in this section support the functionality described in documents [RFC3209] and [RFC3212].
The tables support both manually configured and signaled tunnels.
The mplsTunnelTable allows new MPLS tunnels to be created between an MPLS LSR and a remote endpoint, and existing tunnels to be reconfigured or removed.
Note that we only support point to point tunnels, although multipoint to point and point to multipoint connections are supported by an LSR acting as a cross connect.
Each MPLS tunnel can thus have one out segment originating at an LSR and/or one in segment terminating at that LSR.
mplsTunnelTable does not define the in and out segments forming the tunnel.
Instead, these are defined by creating rows in the in  segment and out segment tables, defining relationships in the cross  connect table, and referring to these rows in the mplsTunnelTable using a cross connect index, mplsTunnelXCIndex.
These segment and cross connect related objects are defined in [RFC3813].
mplsTunnelResourceTable mplsTunnelResourceTable is used to indicate the resources required for a tunnel.
Multiple tunnels may share the same resources by pointing to the same entry in this table.
Tunnels that do not share resources must point to separate entries in this table.
mplsTunnelHopTable mplsTunnelHopTable is used to indicate the hops, strict or loose, for an MPLS tunnel defined in mplsTunnelTable, when it is established via signalling.
Multiple tunnels may share the same hops by pointing to the same entry in this table.
Each row also has a secondary index, mplsTunnelHopIndex, corresponding to the next hop of this tunnel.
The scalar mplsTunnelMaxHops indicates the maximum number of hops that can be specified on each tunnel supported by this LSR.
At transit LSRs, this table contains the hops, strict or loose, that apply to the downstream part of this tunnel only.
This corresponds to the requested path received through the signaling protocol.
mplsTunnelARHopTable mplsTunnelARHopTable is used to indicate the actual hops traversed by a tunnel as reported by the MPLS signalling protocol after the tunnel is setup.
The support of this table is optional since not all MPLS signalling protocols may support this feature.
At transit LSRs, this table contains the actual hops traversed by the tunnel along its entire length if that information is available.
This corresponds to the recorded path reported by the MPLS signalling protocol, possibly derived from multiple signaling messages.
mplsTunnelCHoptable mplsTunnelCHopTable lists the actual hops computed by a constraint  based routing algorithm based on the mplsTunnelHopTable for the MPLS signalling protocol in use.
The support of this table is optional since not all implementations may support computation of hop lists using a constraint based routing protocol.
At transit LSRs, this table contains the hops computed to apply to the downstream part of this tunnel.
This corresponds to the requested path signaled from this LSR through the signaling protocol.
mplsTunnelPerfTable mplsTunnelPerfTable provides several counters to measure the performance of the MPLS tunnels.
mplsTunnelCRLDPResTable mplsTunnelCRLDPResTable contains resource information for those tunnels that are signaled using CRLDP [RFC3212].
This is a sparse extension to mplsTunnelResourceTable and is also indexed by mplsTunnelResourceIndex.
As with mplsTunnelResourceTable, multiple tunnels may share the same resources by pointing to the same entry in this table.
Tunnels that do not share resources must point to separate entries in this table.
The mplsTunnelCRLDPResTable may be supported only by implementations that support the CR LDP signaling protocol.
Use of 32 bit and 64 bit Counters 64 bit counters are provided in this MIB module for high speed interfaces where the use of 32 bit counters might be impractical.
The requirements on the use of 32 bit and 64 bit counters (copied verbatim from [RFC2863]) are as follows:
For interfaces that operate at 20,000,000 (20 million) bits per second or less, 32 bit byte and packet counters MUST be supported.
For interfaces that operate faster than 20,000,000 bits/second, and slower than 650,000,000 bits/second, 32 bit packet counters MUST be supported and 64 bit octet counters MUST be supported.
For interfaces that operate at 650,000,000 bits/second or faster, 64 bit packet counters AND 64 bit octet counters MUST be supported.
Application of the Interface Group to MPLS Tunnels
The Interfaces Group of MIB II defines generic managed objects for managing interfaces.
This memo contains the media specific extensions to the Interfaces Group for managing MPLS Tunnels as logical interfaces.
This memo assumes the interpretation of the Interfaces Group to be in accordance with [RFC2863] which states that the interfaces table (ifTable) contains information on the managed resource's interfaces and that each sub layer below the internetwork layer of a network interface is considered an interface.
Thus, the MPLS interface is represented as an entry in the ifTable.
The inter relation of entries in the ifTable is defined by the Interfaces Stack Group defined in [RFC2863].
In the above diagram, "Underlying Layer" refers to the ifIndex of any interface type for which MPLS internetworking has been defined.
Examples include ATM, Frame Relay, and Ethernet.
Support of the MPLS Tunnel Interface by ifTable
Some specific interpretations of the ifTable for those MPLS tunnels represented as interfaces follow:
Each MPLS tunnel is represented by an ifEntry.
The value that is allocated for the MPLS tunnel is 150.
The total bandwidth in bits per second for use by the MPLS tunnel.
This value reflects the actual operational status of the MPLS tunnel.
down(2) if the MPLS tunnel is down.
The number of octets received over the MPLS tunnel.
The number of octets transmitted over the MPLS tunnel.
The number of labeled packets dropped due to uncorrectable errors.
The number of received packets discarded during packet header validation, including packets with unrecognized label values.
ifLinkUpDownTrapEnable Default is disabled (2).
The 64 bit version of ifInOctets; supported if required by the compliance statements in [RFC2863].
The 64 bit version of ifOutOctets; supported if required by the compliance statements in [RFC2863].
The non volatile 'alias' name for the MPLS tunnel as specified by a network manager.
This section contains an example of which MIB objects should be modified if one would like to create a best effort, loosely routed, unidirectional traffic engineered tunnel, which spans two hops of a simple network.
Note that these objects should be created on the "head end" LSR.
Those objects relevant to illustrating the relationships amongst different tables are shown here.
Other objects may be needed before conceptual row activation can happen.
The RowStatus values shown in this section are those to be used in the set request, typically createAndGo(4) which is used to create the conceptual row and have its status immediately set to active.
A subsequent retrieval operation on the conceptual row will return a different value, such as active(1).
Please see [RFC2579] for a detailed discussion on the use of RowStatus.
The next two instances of mplsTunnelHopEntry are used to denote the hops this tunnel will take across the network.
The following denotes the beginning of the tunnel, or the first hop.
We have used the fictitious LSR identified by "192.168.100.1" as our example head end router.
The following denotes the end of the tunnel, or the last hop in our example.
We have used the fictitious LSR identified by "192.168.101.1" as our end router.
They would also have other objects such as the mplsTunnelXCPointer set accordingly.
The Use of RowPointer RowPointer is a textual convention used to identify a conceptual row in a conceptual table in a MIB by pointing to the first accessible object.
In this MIB module, in mplsTunnelTable, the objects mplsTunnelXCPointer and mplsTunnelResourcePointer are of type RowPointer.
The object mplsTunnelXCPointer points to a specific entry in the mplsXCTable [RFC3813].
This entry in the mplsXCTable is the associated LSP for the given MPLS tunnel entry.
The object mplsTunnelResourcePointer points to a specific entry in a traffic parameter table.
An example of such a traffic parameter table is mplsTunnelResourceTable.
It indicates a specific instance of a traffic parameter entry that is associated with a given MPLS tunnel entry.
These RowPointer objects MUST point to the first instance of the first accessible columnar object in the appropriate conceptual row in order to allow the manager to find the appropriate corresponding entry in either MPLS LSR STD MIB [RFC3813] or MPLS TE  STD MIB.
mplsTunnelXCPointer returns zeroDotZero, it implies that there is no LSP associated with that particular instance of tunnel entry.
If object mplsTunnelResourcePointer returns zeroDotZero, it implies that there is no QoS resource associated with that particular instance of tunnel entry.
MODULE COMPLIANCE, OBJECT GROUP, NOTIFICATION GROUP FROM SNMPv2
] TruthValue, RowStatus, RowPointer, StorageType, TimeStamp FROM SNMPv2
mplsStdMIB, MplsBitRate, MplsBurstSize, MplsLSPID, MplsTunnelIndex, MplsTunnelInstanceIndex, MplsTunnelAffinity, MplsExtendedTunnelId, MplsPathIndex, MplsPathIndexOrZero, MplsOwner, TeHopAddressType, TeHopAddress, TeHopAddressAS, TeHopAddressUnnum FROM MPLS TC STD
[RFC3291] ; mplsTeStdMIB MODULE IDENTITY LAST UPDATED
"200406030000Z"   June 3, 2004 ORGANIZATION "Multiprotocol Label Switching (MPLS)
Srinivasan Bloomberg L.P. Email:  cheenu@bloomberg.net
Thomas D. Nadeau Cisco Systems,
Comments about this document should be emailed directly to the MPLS working group mailing list at mpls@uu.net.
The initial version of this MIB module was published in RFC 3812.
For full legal notices see the RFC itself or see: http://www.ietf.org/copyrights/ianamib.html
This MIB module contains managed object definitions for MPLS Traffic Engineering (TE) as defined in: 1.
Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001 2.
Constraint Based LSP Setup using LDP, Jamoussi (Editor), RFC 3212, January 2002 3.
Requirements for Traffic Engineering Over MPLS, Awduche, D., Malcolm, J., Agogbua, J., O'Dell, M., and J. McManus, [RFC2702], September 1999"   Revision history.
REVISION "200406030000Z"   June 3, 2004 DESCRIPTION "
Initial version issued as part of RFC 3812."
Top level components of this MIB module.
"The number of tunnels configured on this device.
A tunnel is considered configured if the mplsTunnelRowStatus is active(1)."
"The number of tunnels active on this device.
A tunnel is considered active if the mplsTunnelOperStatus is up(1)."
Note that an LSR may support more than one distribution protocol simultaneously."
"The maximum number of hops that can be specified for a tunnel on this device."
"This variable indicates the maximum number of notifications issued per second.
If events occur more rapidly, the implementation may simply fail to emit these notifications during that period, or may queue them until an appropriate time.
A value of 0 means no throttling is applied and events may be notified at the rate at which they occur."
End of MPLS Tunnel scalars.
"This object contains an unused value for mplsTunnelIndex, or a zero to indicate that none exist.
Negative values are not allowed, as they do not correspond to valid values of mplsTunnelIndex.
Note that this object offers an unused value for an mplsTunnelIndex value at the ingress side of a tunnel.
At other LSRs the value of mplsTunnelIndex SHOULD be taken from the value signaled by the MPLS signaling protocol. "
"The mplsTunnelTable allows new MPLS tunnels to be created between an LSR and a remote endpoint, and existing tunnels to be reconfigured or removed.
Note that only point to point tunnel segments are supported,
although multipoint to point and point  to multipoint connections are supported by an LSR acting as a cross connect.
Each MPLS tunnel can thus have one out segment originating at this LSR and/or one in segment terminating at this LSR."
An entry in this table represents an MPLS tunnel.
An entry can be created by a network administrator or by an SNMP agent as instructed by an MPLS signalling protocol.
Whenever a new entry is created with mplsTunnelIsIf set to true(1), then a corresponding entry is created in ifTable as well (see RFC 2863).
The ifType of this entry is mplsTunnel(150).
A tunnel entry needs to be uniquely identified across a MPLS network.
Indices mplsTunnelIndex and mplsTunnelInstance uniquely identify a tunnel on the LSR originating the tunnel.
To uniquely identify a tunnel across an MPLS network requires index mplsTunnelIngressLSRId.
The last index mplsTunnelEgressLSRId is useful in identifying all instances of a tunnel that terminate on the same egress LSR.
Uniquely identifies a set of tunnel instances between a pair of ingress and egress LSRs.
Managers should obtain new values for row creation in this table by reading mplsTunnelIndexNext.
When the MPLS signalling protocol is rsvp(2)
this value SHOULD be equal to the value signaled in the Tunnel Id of the Session object.
When the MPLS signalling protocol is crldp(3)
this value SHOULD be equal to the value signaled in the LSP ID."
Uniquely identifies a particular instance of a tunnel between a pair of ingress and egress LSRs.
It is useful to identify multiple instances of tunnels for the purposes of backup and parallel tunnels.
When the MPLS signaling protocol is rsvp(2)
this value SHOULD be equal to the LSP
Id of the Sender Template object.
When the signaling protocol is crldp(3) there is no equivalent signaling object."
{ mplsTunnelEntry 2 } mplsTunnelIngressLSRId OBJECT
When the MPLS signalling protocol is rsvp(2)
this value SHOULD be equal to the Tunnel Sender Address in the Sender Template object and MAY be equal to the Extended Tunnel Id field in the SESSION object.
When the MPLS signalling protocol is crldp(3)
this value SHOULD be equal to the Ingress LSR Router ID field in the LSPID TLV object.
RSVP TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001 2.
"The canonical name assigned to the tunnel.
This name can be used to refer to the tunnel on the LSR's console port.
If mplsTunnelIsIf is set to true then the ifName of the interface corresponding to this tunnel should have a value equal to mplsTunnelName.
Also see the description of ifName in RFC 2863.
The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000
"A textual string containing information about the tunnel.
If there is no description this object contains a zero length string.
This object is may not be signaled by MPLS signaling protocols, consequentally the value of this object at transit and egress LSRs MAY be automatically generated or absent."
"Denotes whether or not this tunnel corresponds to an interface represented in the interfaces group table.
Note that if this variable is set to true then the ifName of the interface corresponding to this tunnel should have a value equal to mplsTunnelName.
Also see the description of ifName in RFC 2863.
This object is meaningful only at the ingress and egress LSRs.
The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000
"If mplsTunnelIsIf is set to true, then this value contains the LSR assigned ifIndex which corresponds to an entry in the interfaces table.
Otherwise this variable should contain the value of zero indicating that a valid ifIndex was not assigned to this tunnel interface."
The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000
"Denotes the entity that created and is responsible for managing this tunnel.
This column is automatically filled by the agent on creation of a row."
"This value signifies the role that this tunnel entry/instance represents.
This value MUST be set to head(1) at the originating point of the tunnel.
This value MUST be set to transit(2) at transit points along the tunnel, if transit points are supported.
This value MUST be set to tail(3) at the terminating point of the tunnel if tunnel tails are supported.
The value headTail(4) is provided for tunnels that begin and end on the same LSR."
"This variable points to a row in the mplsXCTable.
This table identifies the segments that compose this tunnel, their characteristics, and relationships to each other.
A value of zeroDotZero indicates that no LSP has been associated with this tunnel yet.
REFERENCE "Srinivasan, C., Viswanathan, A., and T. Nadeau, Multiprotocol Label Switching (MPLS)
Label Switching Router (LSR) Management Information Base (MIB),
"The signalling protocol, if any, used to setup this tunnel."
"Indicates the setup priority of this tunnel.
RSVP TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001 2.
"Indicates the holding priority for this tunnel.
RSVP TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001 2.
fastReroute (0), mergingPermitted (1), isPersistent (2), isPinned (3), recordRoute(4) }
"This bit mask indicates optional session values for this tunnel.
The following describes these bit fields: fastRerouteThis flag indicates that the any tunnel hop may choose to reroute this tunnel without tearing it down.
This flag permits transit routers to use a local repair mechanism which may result in violation of the explicit routing of this tunnel.
When a fault is detected on an adjacent downstream link or node, a transit router can re route traffic for fast service restoration.
This flag permits transit routers to merge this session with other RSVP sessions for the purpose of reducing resource overhead on downstream transit routers, thereby providing better network scaling.
isPersistent  Indicates whether this tunnel should be restored automatically after a failure occurs.
This flag indicates whether the loose  routed hops of this tunnel are to be pinned.
recordRouteThis flag indicates whether or not the signalling protocol should remember the tunnel path after it has been signaled.
RSVP TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001."
"Indicates that the local repair mechanism is in use to maintain this tunnel (usually in the face of an outage of the link it was previously routed over).
"This variable represents a pointer to the traffic parameter specification for this tunnel.
This value may point at an entry in the mplsTunnelResourceEntry to indicate which mplsTunnelResourceEntry is to be assigned to this LSP instance.
This value may optionally point at an externally defined traffic parameter specification table.
A value of zeroDotZero indicates best effort treatment.
By having the same value of this object, two or more LSPs can indicate resource sharing.
"Specifies the instance index of the primary instance of this tunnel.
More details of the definition of tunnel instances and the primary tunnel instance can be found in the description of the TEXTUAL CONVENTION MplsTunnelInstanceIndex.
"This value indicates which priority, in descending order, with 0 indicating the lowest priority, within a group of tunnel instances.
A group of tunnel instances is defined as a set of LSPs with the same mplsTunnelIndex in this table, but with a different mplsTunnelInstance.
Tunnel instance priorities are used to denote the priority at which a particular tunnel instance will supercede another.
Instances of tunnels containing the same mplsTunnelInstancePriority will be used for load sharing.
This object is meaningful only at the head end of the tunnel.
"This value denotes the configured path that was chosen for this tunnel.
This value reflects the secondary index into mplsTunnelHopTable.
This path may not exactly match the one in mplsTunnelARHopTable due to the fact that some CSPF modification may have taken place.
See mplsTunnelARHopTable for the actual path being taken by the tunnel.
A value of zero denotes that no path is currently in use or available."
This is automatically updated by the agent when the actual hops becomes available."
This is automatically updated by the agent when computed hops become available or when computed hops get modified.
"A link satisfies the include any constraint if and only if the constraint is zero, or the link and the constraint have a resource class in common.
RSVP TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001."
"A link satisfies the include all constraint if and only if the link contains all of the administrative groups specified in the constraint."
RSVP TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001."
"A link satisfies the exclude any constraint if and only if the link contains none of the administrative groups specified in the constraint."
RSVP TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001.
} mplsTunnelTotalUpTime OBJECT TYPE SYNTAX
"This value represents the aggregate up time for all instances of this tunnel, if available.
"This value identifies the total time that this tunnel instance's operStatus has been Up(1)."
"Specifies the total time the primary instance of this tunnel has been active.
The primary instance of this tunnel is defined in mplsTunnelPrimaryInstance."
"Specifies the number of times the actual path for this tunnel instance has changed."
"Specifies the time since the last change to the actual path for this tunnel instance."
"Specifies the value of SysUpTime when the first instance of this tunnel came into existence.
That is, when the value of mplsTunnelOperStatus was first set to up(1).
,   in some test mode testing(3)
"Indicates the desired operational status of this tunnel."
"Indicates the actual operational status of this tunnel, which is typically but not limited to, a function of the state of individual segments of this tunnel."
"This variable is used to create, modify, and/or delete a row in this table.
When a row in this table is in active(1) state, no objects in that row can be modified by the agent except mplsTunnelAdminStatus, mplsTunnelRowStatus and mplsTunnelStorageType."
"The storage type for this tunnel entry.
Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row."
"This object contains an appropriate value to be used for mplsTunnelHopListIndex when creating entries in the mplsTunnelHopTable.
If the number of unassigned entries is exhausted, a retrieval operation will return a value of 0.
This object may also return a value of 0 when the LSR is unable to accept conceptual row creation, for example, if the mplsTunnelHopTable is implemented as read only.
To obtain the value of mplsTunnelHopListIndex for a new entry in the mplsTunnelHopTable, the manager issues a management protocol retrieval operation to obtain the current value of mplsTunnelHopIndex.
When the SET is performed to create a row in the mplsTunnelHopTable, the Command Responder (agent) must determine whether the value is indeed still unused; Two Network Management Applications may attempt to create a row (configuration entry) simultaneously and use the same value.
If it is currently unused, the SET succeeds and the Command Responder (agent) changes the value of this object, according to an implementation specific algorithm.
If the value is in use, however, the SET fails.
The Network Management Application must then re read this variable to obtain a new usable value."
MplsTunnelHopEntry MAX ACCESS    not accessible
"The mplsTunnelHopTable is used to indicate the hops, strict or loose, for an instance of an MPLS tunnel defined in mplsTunnelTable, when it is established via signalling, for the outgoing direction of the tunnel.
Thus at a transit LSR, this table contains the desired path of the tunnel from this LSR onwards.
Each row in this table is indexed by mplsTunnelHopListIndex which corresponds to a group of hop lists or path options.
Each row also has a secondary index mplsTunnelHopIndex, which indicates a group of hops (also known as a path option).
Finally, the third index, mplsTunnelHopIndex indicates the specific hop information for a path option.
In case we want to specify a particular interface on the originating LSR of an outgoing tunnel by which we want packets to exit the LSR, we specify this as the first hop for this tunnel in mplsTunnelHopTable."
An entry in this table represents a tunnel hop.
An entry is created by a network administrator for signaled ERLSP set up by an MPLS signalling protocol.
This is otherwise known as a path option."
"The Hop Address Type of this tunnel hop.
The value of this object cannot be changed if the value of the corresponding mplsTunnelHopRowStatus object is 'active'.
is a valid option only for tunnels signaled via CRLDP.
"The Tunnel Hop Address for this tunnel hop.
The type of this address is determined by the value of the corresponding mplsTunnelHopAddrType.
The value of this object cannot be changed if the value of the corresponding mplsTunnelHopRowStatus object is 'active'.
{ mplsTunnelHopEntry 5 } mplsTunnelHopIpPrefixLen
"If mplsTunnelHopAddrType is set to ipv4(1) or ipv6(2), then this value will contain an appropriate prefix length for the IP address in object mplsTunnelHopIpAddr.
Otherwise this value is irrelevant and should be ignored. "
"If mplsTunnelHopAddrType is set to asnumber(3), then this value will contain the AS number of this hop.
Otherwise the agent should set this object to zero  length string and the manager should ignore this."
"If mplsTunnelHopAddrType is set to unnum(4), then this value will contain the interface identifier of the unnumbered interface for this hop.
This object should be used in conjunction with mplsTunnelHopIpAddress which would contain the LSR Router ID in this case.
Otherwise the agent should set this object to zero length string and the manager should ignore this."
"If mplsTunnelHopAddrType is set to lspid(5), then this value will contain the LSPID of a tunnel of this hop.
The present tunnel being configured is tunneled through this hop (using label stacking).
This object is otherwise insignificant and should contain a value of 0 to indicate this fact."
"Denotes whether this tunnel hop is routed in a strict or loose fashion.
The value of this object has no meaning if the mplsTunnelHopInclude object is set to 'false'."
"If this value is set to true, then this indicates that this hop must be included in the tunnel's path.
If this value is set to 'false', then this hop must be avoided when calculating the path for this tunnel.
The default value of this object is 'true', so that by default all indicated hops are included in the CSPF path computation.
If this object is set to 'false' the value of mplsTunnelHopType should be ignored.
"The description of this series of hops as they relate to the specified path option.
The value of this object SHOULD be the same for each hop in the series that comprises a path option."
"If this value is set to dynamic, then the user should only specify the source and destination of the path and expect that the CSPF will calculate the remainder of the path.
If this value is set to explicit, the user should specify the entire path for the tunnel to take.
This path may contain strict or loose hops.
Each hop along a specific path SHOULD have this object set to the same value" ::
{ mplsTunnelHopEntry 13 } mplsTunnelHopRowStatus OBJECT TYPE SYNTAX
"This variable is used to create, modify, and/or delete a row in this table.
When a row in this table is in active(1) state, no objects in that row can be modified by the agent except mplsTunnelHopRowStatus and mplsTunnelHopStorageType."
"The storage type for this Hop entry.
Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row."
"This object contains the next appropriate value to be used for mplsTunnelResourceIndex when creating entries in the mplsTunnelResourceTable.
If the number of unassigned entries is exhausted, a retrieval operation will return a value of 0.
This object may also return a value of 0 when the LSR is unable to accept conceptual row creation, for example, if the mplsTunnelTable is implemented as read only.
To obtain the mplsTunnelResourceIndex value for a new entry, the manager must first issue a management protocol retrieval operation to obtain the current value of this object.
When the SET is performed to create a row in the mplsTunnelResourceTable, the Command Responder (agent) must determine whether the value is indeed still unused; Two Network Management Applications may attempt to create a row (configuration entry) simultaneously and use the same value.
If it is currently unused, the SET succeeds and the Command Responder (agent) changes the value of this object, according to an implementation specific algorithm.
If the value is in use, however, the SET fails.
The Network Management Application must then re read this variable to obtain a new usable value."
"The mplsTunnelResourceTable allows a manager to specify which resources are desired for an MPLS tunnel.
This table also allows several tunnels to point to a single entry in this table, implying that these tunnels should share resources."
"An entry in this table represents a set of resources for an MPLS tunnel.
An entry can be created by a network administrator or by an SNMP agent as instructed by any MPLS signalling protocol.
An entry in this table referenced by a tunnel instance with zero mplsTunnelInstance value indicates a configured set of resource parameter.
An entry referenced by a tunnel instance with a non zero mplsTunnelInstance reflects the in use resource parameters for the tunnel instance which may have been negotiated or modified by the MPLS signaling protocols.
"The maximum rate in bits/second.
Note that setting mplsTunnelResourceMaxRate, mplsTunnelResourceMeanRate, and mplsTunnelResourceMaxBurstSize to 0 indicates best  effort treatment."
"This object is copied into an instance of mplsTrafficParamMeanRate in the mplsTrafficParamTable.
The OID of this table entry is then copied into the corresponding mplsInSegmentTrafficParamPtr."
"The maximum burst size in bytes."
"The mean burst size in bytes.
The implementations which do not implement this variable must return a noSuchObject exception for this object and must not allow a user to set this object."
The implementations which do not implement this variable must return noSuchObject exception for this object and must not allow a user to set this value."
REFERENCE "CR LDP Specification, Section 4.3."
"The granularity of the availability of committed rate.
The implementations which do not implement this variable must return unspecified(1) for this value and must not allow a user to set this value."
REFERENCE "CR LDP Specification, Section 4.3."
{ mplsTunnelResourceEntry 7 } mplsTunnelResourceWeight    OBJECT
"The relative weight for using excess bandwidth above its committed rate.
The value of 0 means that weight is not applicable for the CR LSP."
REFERENCE "CR LDP Specification, Section 4.3."
"This variable is used to create, modify, and/or delete a row in this table.
When a row in this table is in active(1) state, no objects in that row can be modified by the agent except mplsTunnelResourceRowStatus and mplsTunnelResourceStorageType."
"The storage type for this Hop entry.
Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row."
End mplsTunnelResourceTable   Tunnel Actual Route Hop table.
"The mplsTunnelARHopTable is used to indicate the hops for an MPLS tunnel defined in mplsTunnelTable, as reported by the MPLS signalling protocol.
Thus at a transit LSR, this table (if the table is supported and if the signaling protocol is recording actual route information) contains the actual route of the whole tunnel.
If the signaling protocol is not recording the actual route, this table MAY report the information from the mplsTunnelHopTable or the mplsTunnelCHopTable.
Each row in this table is indexed by mplsTunnelARHopListIndex.
Each row also has a secondary index mplsTunnelARHopIndex, corresponding to the next hop that this row corresponds to.
Please note that since the information necessary to build entries within this table is not provided by some MPLS signalling protocols, implementation of this table is optional.
Furthermore, since the information in this table is actually provided by the MPLS signalling protocol after the path has been set up, the entries in this table are provided only for observation, and hence, all variables in this table are accessible exclusively as read  only.
Note also that the contents of this table may change while it is being read because of re routing activities.
A network administrator may verify that the actual route read is consistent by reference to the mplsTunnelLastPathChange object."
"An entry in this table represents a tunnel hop.
An entry is created by the agent for signaled ERLSP set up by an MPLS signalling protocol.
"The Hop Address Type of this tunnel hop.
is a valid option only for tunnels signaled via CRLDP.
The type of this address is determined by the value of the corresponding mplsTunnelARHopAddrType.
If mplsTunnelARHopAddrType is set to unnum(4), then this value contains the LSR Router ID of the unnumbered interface.
Otherwise the agent SHOULD set this object to the zero length string and the manager should ignore this object."
"If mplsTunnelARHopAddrType is set to unnum(4), then this value will contain the interface identifier of the unnumbered interface for this hop.
This object should be used in conjunction with mplsTunnelARHopIpAddr which would contain the LSR Router ID in this case.
Otherwise the agent should set this object to zero length string and the manager should ignore this."
"If mplsTunnelARHopAddrType is set to lspid(5), then this value will contain the LSP ID of this hop.
This object is otherwise insignificant and should contain a value of 0 to indicate this fact."
MplsTunnelCHopEntry MAX ACCESS    not accessible
"The mplsTunnelCHopTable is used to indicate the hops, strict or loose, for an MPLS tunnel defined in mplsTunnelTable, as computed by a constraint  based routing protocol, based on the mplsTunnelHopTable for the outgoing direction of the tunnel.
Thus at a transit LSR, this table (if the table is supported) MAY contain the path computed by the CSPF engine on (or on behalf of) this LSR.
Each row in this table is indexed by mplsTunnelCHopListIndex.
Each row also has a secondary index mplsTunnelCHopIndex, corresponding to the next hop that this row corresponds to.
In case we want to specify a particular interface on the originating LSR of an outgoing tunnel by which we want packets to exit the LSR, we specify this as the first hop for this tunnel in mplsTunnelCHopTable.
Please note that since the information necessary to build entries within this table may not be supported by some LSRs, implementation of this table is optional.
Furthermore, since the information in this table describes the path computed by the CSPF engine the entries in this table are read only."
"An entry in this table represents a tunnel hop.
An entry in this table is created by a path computation engine using CSPF techniques applied to the information collected by routing protocols and the hops specified in the corresponding mplsTunnelHopTable.
"The Hop Address Type of this tunnel hop.
is a valid option only for tunnels signaled via CRLDP.
The type of this address is determined by the value of the corresponding mplsTunnelCHopAddrType.
If mplsTunnelCHopAddrType is set to unnum(4), then this value will contain the LSR Router ID of the unnumbered interface.
Otherwise the agent should set this object to the zero length string and the manager SHOULD ignore this object."
"If mplsTunnelCHopAddrType is set to ipv4(1) or ipv6(2), then this value will contain an appropriate prefix length for the IP address in object mplsTunnelCHopIpAddr.
Otherwise this value is irrelevant and should be ignored. "
"If mplsTunnelCHopAddrType is set to asnumber(3), then this value will contain the AS number of this hop.
Otherwise the agent should set this object to zero length string and the manager should ignore this."
"If mplsTunnelCHopAddrType is set to unnum(4), then this value will contain the unnumbered interface identifier of this hop.
This object should be used in conjunction with mplsTunnelCHopIpAddr which would contain the LSR Router ID in this case.
Otherwise the agent should set this object to zero  length string and the manager should ignore this."
"If mplsTunnelCHopAddrType is set to lspid(5), then this value will contain the LSP ID of this hop.
This object is otherwise insignificant and should contain a value of 0 to indicate this fact."
"Denotes whether this is tunnel hop is routed in a strict or loose fashion."
"This table provides per tunnel instance MPLS performance information."
"An entry in this table is created by the LSR for every tunnel.
Its is an extension to mplsTunnelEntry."
This object should represents the 32 bit value of the least significant part of the 64 bit value if both mplsTunnelPerfHCPackets is returned."
High capacity counter for number of packets forwarded by the tunnel. "
This object should represents the 32 bit value of the least significant part of the 64 bit value if both mplsTunnelPerfHCBytes is returned."
High capacity counter for number of bytes forwarded by the tunnel."
CR LDP Tunnel Resource Table
"The mplsTunnelCRLDPResTable allows a manager to specify which CR LDP specific resources are desired for an MPLS tunnel if that tunnel is signaled using CR LDP.
Note that these attributes are in addition to those specified in mplsTunnelResourceTable.
This table also allows several tunnels to point to a single entry in this table, implying that these tunnels should share resources."
"An entry in this table represents a set of resources for an MPLS tunnel established using CRLDP (mplsTunnelSignallingProto equal to crldp (3)).
An entry can be created by a network administrator or by an SNMP agent as instructed by any MPLS signalling protocol.
"The mean burst size in bytes."
REFERENCE "CR LDP Specification, Section 4.3."
{ mplsTunnelCRLDPResEntry 2 } mplsTunnelCRLDPResFrequency OBJECT TYPE SYNTAX
INTEGER { unspecified(1), frequent(2), veryFrequent(3)
The granularity of the availability of committed rate."
REFERENCE "CR LDP Specification, Section 4.3."
"The relative weight for using excess bandwidth above its committed rate.
The value of 0 means that weight is not applicable for the CR LSP."
REFERENCE "CR LDP Specification, Section 4.3."
"The value of the 1 byte Flags conveyed as part of the traffic parameters during the establishment of the CRLSP.
The bits in this object are to be interpreted as follows.
Res  F6 F5 F4 F3 F2 F1    Res
F1 Corresponds to the PDR.
F2 Corresponds to the PBS.
F3 Corresponds to the CDR.
F4 Corresponds to the CBS.
F5 Corresponds to the EBS.
F6 Corresponds to the Weight.
Each flag if is a Negotiable Flag corresponding to a Traffic Parameter.
The Negotiable Flag value zero denotes Not Negotiable and value one denotes Negotiable.
Section 4.3, Constraint Based LSP Setup using LDP, Jamoussi (Editor), RFC 3212, January 2002
"This variable is used to create, modify, and/or delete a row in this table.
When a row in this table is in active(1) state, no objects in that row can be modified by the agent except mplsTunnelCRLDPResRowStatus and mplsTunnelCRLDPResStorageType."
"The storage type for this CR LDP Resource entry.
Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row."
"If this object is true, then it enables the generation of mplsTunnelUp and mplsTunnelDown traps, otherwise these traps are not emitted.
"This notification is generated when a mplsTunnelOperStatus object for one of the configured tunnels is about to leave the down state and transition into some other state (but not into the notPresent state).
This other state is indicated by the included value of mplsTunnelOperStatus."
"This notification is generated when a mplsTunnelOperStatus object for one of the configured tunnels is about to enter the down state from some other state (but not from the notPresent state).
This other state is indicated by the included value of mplsTunnelOperStatus."
"This notification is generated when a tunnel is rerouted.
If the mplsTunnelARHopTable is used, then this tunnel instance's entry in the mplsTunnelARHopTable MAY contain the new path for this tunnel some time after this trap is issued by the agent."
"This notification is generated when a tunnel is reoptimized.
If the mplsTunnelARHopTable is used, then this tunnel instance's entry in the mplsTunnelARHopTable MAY contain the new path for this tunnel some time after this trap is issued by the agent."
Compliance requirement for fully compliant implementations.
MODULE COMPLIANCE STATUS current DESCRIPTION "Compliance statement for agents that provide full support the MPLS TE STD MIB module.
MODULE IF MIB   The Interfaces Group MIB, RFC 2863.
MANDATORY GROUPS { ifGeneralInformationGroup, ifCounterDiscontinuityGroup } MODULE
The mandatory group has to be implemented by all   LSRs that originate/terminate ESLSPs/tunnels.
In addition, depending on the type of tunnels   supported, other groups become mandatory as   explained below.
{ mplsTunnelGroup, mplsTunnelScalarGroup } GROUP mplsTunnelManualGroup DESCRIPTION "
This group is mandatory for devices which support manual configuration of tunnels."
This group is mandatory for devices which support signaled tunnel set up."
"This group is mandatory for devices which support tunnels that are not interfaces."
This group is mandatory for devices which support tunnels that are interfaces."
"Objects in this group are required by implementations supporting the CR LDP protocol for signalling of TE tunnels."
This group is mandatory for those implementations which can implement the notifications contained in this group."
WRITE SYNTAX RowStatus { active(1), notInService(2), createAndGo(4), destroy(6
) } DESCRIPTION "Support for createAndWait and notReady is not required."
} WRITE SYNTAX RowStatus { active(1), notInService(2), createAndGo(4), destroy(6
) } DESCRIPTION "Support for createAndWait and notReady is not required."
} WRITE SYNTAX RowStatus { active(1), notInService(2), createAndGo(4), destroy(6
) } DESCRIPTION "Support for createAndWait and notReady is not required."
mplsTeModuleReadOnlyCompliance MODULE COMPLIANCE STATUS current DESCRIPTION
"Compliance requirement for implementations that only provide read only support for MPLS TE STD MIB.
Such devices can then be monitored but cannot be configured using this MIB modules.
This group is mandatory for devices which support manual configuration of tunnels."
This group is mandatory for devices which support signaled tunnel set up."
"This group is mandatory for devices which support tunnels that are not interfaces."
This group is mandatory for devices which support tunnels that are interfaces."
"Objects in this group are required by implementations supporting the CR LDP protocol for signalling of TE tunnels."
This group is mandatory for those implementations which can implement the notifications contained in this group."
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
mplsTunnelLocalProtectInUse MIN ACCESS  read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS  read only DESCRIPTION "Only up and down states must be supported.
Write access is not required.
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"loose(2) need not be supported.
Write access is not required."
mplsTunnelHopInclude MIN ACCESS  read only DESCRIPTION
"Write access is not required."
"Write access is not required.
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
"Write access is not required.
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
"Write access is not required."
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
OBJECT GROUP OBJECTS { mplsTunnelIndexNext, mplsTunnelName, mplsTunnelDescr, mplsTunnelOwner, mplsTunnelXCPointer, mplsTunnelIfIndex, mplsTunnelHopTableIndex, mplsTunnelARHopTableIndex, mplsTunnelCHopTableIndex, mplsTunnelAdminStatus, mplsTunnelOperStatus, mplsTunnelRowStatus, mplsTunnelNotificationEnable, mplsTunnelStorageType, mplsTunnelConfigured, mplsTunnelActive, mplsTunnelPrimaryInstance, mplsTunnelPrimaryUpTime, mplsTunnelPathChanges, mplsTunnelLastPathChange, mplsTunnelCreationTime, mplsTunnelStateTransitions, mplsTunnelIncludeAnyAffinity, mplsTunnelIncludeAllAffinity, mplsTunnelExcludeAnyAffinity, mplsTunnelPerfPackets, mplsTunnelPerfHCPackets, mplsTunnelPerfErrors, mplsTunnelPerfBytes, mplsTunnelPerfHCBytes, mplsTunnelResourcePointer, mplsTunnelInstancePriority, mplsTunnelPathInUse, mplsTunnelRole, mplsTunnelTotalUpTime, mplsTunnelInstanceUpTime, mplsTunnelResourceIndexNext, mplsTunnelResourceMaxRate, mplsTunnelResourceMeanRate, mplsTunnelResourceMaxBurstSize, mplsTunnelResourceMeanBurstSize, mplsTunnelResourceExBurstSize, mplsTunnelResourceFrequency, mplsTunnelResourceWeight, mplsTunnelResourceRowStatus, mplsTunnelResourceStorageType, mplsTunnelARHopAddrType, mplsTunnelARHopIpAddr, mplsTunnelARHopAddrUnnum, mplsTunnelARHopLspId, mplsTunnelCHopAddrType, mplsTunnelCHopIpAddr, mplsTunnelCHopIpPrefixLen, mplsTunnelCHopAsNumber, mplsTunnelCHopAddrUnnum, mplsTunnelCHopLspId, mplsTunnelCHopType } STATUS  current DESCRIPTION "
Necessary, but not sufficient, set of objects to implement tunnels.
In addition, depending on the type of the tunnels supported (for example, manually configured or signaled, persistent or non  persistent, etc.), the following other groups defined below are mandatory:
GROUP OBJECTS { mplsTunnelSignallingProto } STATUS  current DESCRIPTION "Object(s) needed to implement manually configured tunnels."
current DESCRIPTION "Objects needed to implement signaled tunnels."
current DESCRIPTION "Scalar object needed to implement MPLS tunnels."
current DESCRIPTION "Objects needed to implement tunnels that are interfaces."
current DESCRIPTION "Objects needed to implement tunnels that are not interfaces."
Set of notifications implemented in this module.
It is clear that this MIB module is potentially useful for the monitoring of MPLS TE tunnels.
This MIB module can also be used for the configuration of certain objects, and anything that can be configured can be incorrectly configured, with potentially disastrous results.
There are a number of management objects defined in this MIB module with a MAX ACCESS clause of read write and/or read create.
Such objects may be considered sensitive or vulnerable in some network environments.
The support for SET operations in a non secure environment without proper protection can have a negative effect on network operations.
These are the tables and objects and their sensitivity/vulnerability:  the mplsTunnelTable, mplsTunnelHopTable, mplsTunnelResourceTable, and mplsTunnelCRLDPResTable collectively contain objects to provision MPLS tunnels, tunnel hops, and tunnel resources.
Unauthorized access to objects in these tables, could result in disruption of traffic on the network.
This is especially true if a tunnel has been established.
The use of stronger mechanisms, such as SNMPv3 security, should be considered where possible.
Specifically, SNMPv3 VACM and USM MUST be used with any v3 agent which implements this MIB.
Administrators should consider whether read access to these objects should be allowed, since read access may be undesirable under certain circumstances.
Some of the readable objects in this MIB module (i.e., objects with a MAX ACCESS other than not accessible) may be considered sensitive or vulnerable in some network environments.
It is thus important to control
even GET and/or NOTIFY access to these objects and possibly to even encrypt the values of these objects when sending them over the network via SNMP.
These are the tables and objects and their sensitivity/vulnerability:  the mplsTunnelTable, mplsTunnelHopTable, mplsTunnelResourceTable, mplsTunnelARHopTable, mplsTunnelCHopTable, mplsTunnelPerfTable, and mplsTunnelCRLDPResTable
collectively show the MPLS TE tunnel network topology and its performance characteristics.
If an Administrator does not want to reveal this information, then these tables should be considered sensitive/vulnerable.
SNMP versions prior to SNMPv3 did not include adequate security.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and
the objects in this MIB module.
It is RECOMMENDED that implementers consider the security features as provided by the SNMPv3 framework (see [RFC3410], section 8), including full support for the SNMPv3 cryptographic mechanisms (for authentication and privacy).
Further, deployment of SNMP versions prior to SNMPv3 is NOT RECOMMENDED.
Instead, it is RECOMMENDED that SNMPv3 be deployed and cryptographic security enabled.
It is then a customer/operator responsibility to ensure that the SNMP entity giving access to an instance of this MIB module is properly configured to give access to only those principals (users) that have legitimate rights to those objects.
As described in [MPLSMGMT] and as requested in the MPLS TC STD MIB [RFC3811], MPLS related standards track MIB modules should be rooted under the mplsStdMIB subtree.
MIB Modules contained in this document, each of the following "IANA Considerations" subsections requests IANA for a new assignment under the mplsStdMIB subtree.
New assignments can only be made via a Standards Action as specified in [RFC2434].
IANA Considerations for MPLS TE STD MIB
The IANA has assigned { mplsStdMIB 3 } to the MPLS TE STD MIB module specified in this document.
