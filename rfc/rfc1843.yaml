- title: __initial_text__
  contents:
  - "               HZ - A Data Format for Exchanging Files of\n             Arbitrarily\
    \ Mixed Chinese and ASCII characters\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The content of this memo is identical to an article of the same\
    \ title\n   written by the author on September 4, 1989.  In this memo, GB stands\n\
    \   for GB2312-80.  Note that the title is kept only for historical\n   reasons.\
    \  HZ has been widely used for purposes other than \"file\n   exchange\".\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Most existing computer systems which can handle a text file\
    \ of\n   arbitrarily mixed Chinese and ASCII characters use 8-bit codes.  To\n\
    \   exchange such text files through electronic mail on ASCII computer\n   systems,\
    \ it is necessary to encode them in a 7-bit format.  A generic\n   binary to ASCII\
    \ encoder is not sufficient, because there is currently\n   no universal standard\
    \ for such 8-bit codes. For example, CCDOS and\n   Macintosh's Chinese OS use\
    \ different internal codes.  Fortunately,\n   there is a PRC national standard,\
    \ GuoBiao (GB), for the encoding of\n   Chinese characters, and Chinese characters\
    \ encoded in the above\n   systems can be easily converted to GB by a simple formula.\
    \ (* The ROC\n   standard BIG-5 is outside the scope of this article.)\n   HZ\
    \ is a 7-bit data format proposed for arbitrarily mixed GB and ASCII\n   text\
    \ file exchange.  HZ is also intended for the design of terminal\n   emulators\
    \ that display and edit mixed Chinese and ASCII text files in\n   real time.\n"
- title: 2. Specification
  contents:
  - "2. Specification\n   The format of HZ is described in the following.\n   Without\
    \ loss of generality, we assume that all Chinese characters\n   (HanZi) have already\
    \ been encoded in GB.  A GB (GB1 and GB2) code is\n   a two byte code, where the\
    \ first byte is in the range $21-$77\n   (hexadecimal), and the second byte is\
    \ in the range $21-$7E.\n   A graphical ASCII character is a byte in the range\
    \ $21-$7E. A non-\n   graphical ASCII character is a byte in the range $0-$20\
    \ or of the\n   value $7F.\n   Since the range of a graphical ASCII character\
    \ overlaps that of a GB\n   byte, a byte in the range $21-$7E is interpreted according\
    \ to the\n   mode it is in.  There are two modes, namely ASCII mode and GB mode.\n\
    \   By convention, a non-graphical ASCII character should only appear in\n   ASCII\
    \ mode.\n   The default mode is ASCII mode.\n   In ASCII mode, a byte is interpreted\
    \ as an ASCII character, unless a\n   '~' is encountered. The character '~' is\
    \ an escape character. By\n   convention, it must be immediately followed ONLY\
    \ by '~', '{' or '\\n'\n   (<LF>), with the following special meaning.\n   o The\
    \ escape sequence '~~' is interpreted as a '~'.\n   o The escape-to-GB sequence\
    \ '~{' switches the mode from ASCII to\n     GB.\n   o The escape sequence '~\\\
    n' is a line-continuation marker to be\n     consumed with no output produced.\n\
    \   In GB mode, characters are interpreted two bytes at a time as (pure)\n   GB\
    \ codes until the escape-from-GB code '~}' is read. This code\n   switches the\
    \ mode from GB back to ASCII.  (Note that the escape-\n   from-GB code '~}' ($7E7D)\
    \ is outside the defined GB range.)\n   The decoding process is clear from the\
    \ above description.\n   The encoding process is straightforward. Note that an\
    \ (ASCII) '~' is\n   always encoded as '~~'. A sequence of GB codes is enclosed\
    \ in '~{'\n   and '~}'.\n"
- title: 3. Remarks & Recommendations
  contents:
  - "3. Remarks & Recommendations\n   We choose to encode any ASCII character except\
    \ '~' as it is, rather\n   than as a two byte code, and we choose ASCII as the\
    \ default mode for\n   the following reasons. The computer systems we use is ASCII\
    \ based.  A\n   HZ file containing pure ASCII characters (i.e. no Chinese characters)\n\
    \   except '~' is precisely a pure ASCII file. In general, the English\n   (ASCII)\
    \ portion of a HZ file is directly readable.\n   The escape character '~' is chosen\
    \ not only because it is commonly\n   used in the ASCII world, but also because\
    \ '~' ($7E) is outside the\n   defined range ($21-$77) of the first byte of a\
    \ GB code.\n   In ASCII mode, other potential escape sequences, i.e., two byte\n\
    \   sequences beginning with '~' (other than '~~', '~{', '~\\n') are\n   currently\
    \ invalid HZ sequences. Hence, they can be used for future\n   extension of HZ\
    \ with total upward compatibility.\n   The line-continuation marker '~\\n' is\
    \ useful if one wants to encode\n   long lines in the original text into short\
    \ lines in this data format\n   without introducing extra newline characters in\
    \ the decoding process.\n   There is no limit on the length of a line. In fact,\
    \ the whole file\n   could be one long line or even contain no newline characters.\
    \ Any\n   DECODER of this HZ data format should not and has no need to operate\n\
    \   on the concept of a line.\n   It is easy to write encoders and decoders for\
    \ HZ. An encoder or\n   decoder needs to lookahead at most one character in the\
    \ input data\n   stream.\n   Given the current mode, it is also possible and easy\
    \ to decode a HZ\n   data stream by scanning backward. One of the implication\
    \ is that\n   \"backspaces\" can be handled correctly by a terminal emulator.\n\
    \   To facilitate the effective use of programs supporting line/page\n   skips\
    \ such as \"more\" on UNIX with a terminal emulator understanding\n   the HZ format,\
    \ it is RECOMMENDED that the ENCODER (which outputs in\n   HZ) sets a maximum\
    \ line size of less than 80 characters.  Since '\\n'\n   is an ASCII character,\
    \ the syntax of HZ then automatically implies\n   that GB codes appearing at the\
    \ end of a line must be terminated with\n   the escape-from-GB code '~}', and\
    \ the line-continuation marker '~\\n'\n   should be inserted appropriately. The\
    \ price to paid is that the\n   encoded file size is slightly larger.\n   It is\
    \ important to understand the following distinction.  Note that\n   the above\
    \ recommendation does NOT change the HZ format.  It is simply\n   an encoding\
    \ \"style\" which follows the syntax of HZ. Note that this\n   \"style\" is not\
    \ built into HZ. It is an additional convention built\n   \"on top of\" HZ.  Other\
    \ applications may require different \"styles\",\n   but the same basic HZ DECODER\
    \ will always work. The essence of HZ is\n   to provide such a flexible basic\
    \ data format for files of arbitrarily\n   mixed Chinese and ASCII characters.\n"
- title: 4. Examples
  contents:
  - "4. Examples\n   To illustrate the \"stylistic\" issue of HZ encoding, we give\
    \ the\n   following four examples of encoded text, which should produce the\n\
    \   same decoded output. (The recommendation in the last section refers\n   to\
    \ Example 2.)\n   Example 1:  (Suppose there is no line size limit.)\n   This\
    \ sentence is in ASCII.\n   The next sentence is in GB.~{<:Ky2;S{#,NpJ)l6HK!#~}Bye.\n\
    \   Example 2:  (Suppose the maximum line size is 42.)\n   This sentence is in\
    \ ASCII.\n   The next sentence is in GB.~{<:Ky2;S{#,~}~\n   ~{NpJ)l6HK!#~}Bye.\n\
    \   Example 3: (Suppose a new line is started whenever there is a mode\n     \
    \         switch.)\n   This sentence is in ASCII.\n   The next sentence is in\
    \ GB.~\n   ~{<:Ky2;S{#,NpJ)l6HK!#~}~\n   Bye.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Edmund Lai was the first one who brought my attention to\
    \ this topic.\n   Discussions with Ed, Tin-Fook Ngai, Yagui Wei and Ricky Yeung\
    \ were\n   very helpful in shaping the ideas in this article. Thanks to Tin-Fook\n\
    \   for his careful review of the draft and numerous interesting\n   suggestions.\n"
- title: References
  contents:
  - "References\n   [1] Fung Fung Lee, \"HZ - A Data Format for Exchanging Files of\n\
    \       Arbitrarily Mixed Chinese and ASCII Characters,\" September 4,\n     \
    \  1989.\n       As part of //ftp.ifcss.org/software/unix/convert/HZ-2.0.tar.gz\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not addressed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Fung Fung Lee\n   Computer Systems Laboratory\n   Stanford\
    \ University\n   Stanford, CA 94309\n   Phone: +1 415 723 1450\n   EMail: lee@csl.stanford.edu\n"
