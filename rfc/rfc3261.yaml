- contents:
  - '                    SIP: Session Initiation Protocol

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes Session Initiation Protocol (SIP), an\n
    \  application-layer control (signaling) protocol for creating,\n   modifying,
    and terminating sessions with one or more participants.\n   These sessions include
    Internet telephone calls, multimedia\n   distribution, and multimedia conferences.\n
    \  SIP invitations used to create sessions carry session descriptions\n   that
    allow participants to agree on a set of compatible media types.\n   SIP makes
    use of elements called proxy servers to help route requests\n   to the user's
    current location, authenticate and authorize users for\n   services, implement
    provider call-routing policies, and provide\n   features to users.  SIP also provides
    a registration function that\n   allows users to upload their current locations
    for use by proxy\n   servers.  SIP runs on top of several different transport
    protocols.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1          Introduction ........................................
    \   8\n   2          Overview of SIP Functionality .......................    9\n
    \  3          Terminology .........................................   10\n   4
    \         Overview of Operation ...............................   10\n   5          Structure
    of the Protocol ...........................   18\n   6          Definitions .........................................
    \  20\n   7          SIP Messages ........................................   26\n
    \  7.1        Requests ............................................   27\n   7.2
    \       Responses ...........................................   28\n   7.3        Header
    Fields .......................................   29\n   7.3.1      Header Field
    Format .................................   30\n   7.3.2      Header Field Classification
    .........................   32\n   7.3.3      Compact Form ........................................
    \  32\n   7.4        Bodies ..............................................   33\n
    \  7.4.1      Message Body Type ...................................   33\n   7.4.2
    \     Message Body Length .................................   33\n   7.5        Framing
    SIP Messages ................................   34\n   8          General User
    Agent Behavior .........................   34\n   8.1        UAC Behavior ........................................
    \  35\n   8.1.1      Generating the Request ..............................   35\n
    \  8.1.1.1    Request-URI .........................................   35\n   8.1.1.2
    \   To ..................................................   36\n   8.1.1.3    From
    ................................................   37\n   8.1.1.4    Call-ID .............................................
    \  37\n   8.1.1.5    CSeq ................................................   38\n
    \  8.1.1.6    Max-Forwards ........................................   38\n   8.1.1.7
    \   Via .................................................   39\n   8.1.1.8    Contact
    .............................................   40\n   8.1.1.9    Supported and
    Require ...............................   40\n   8.1.1.10   Additional Message
    Components .......................   41\n   8.1.2      Sending the Request .................................
    \  41\n   8.1.3      Processing Responses ................................   42\n
    \  8.1.3.1    Transaction Layer Errors ............................   42\n   8.1.3.2
    \   Unrecognized Responses ..............................   42\n   8.1.3.3    Vias
    ................................................   43\n   8.1.3.4    Processing
    3xx Responses ............................   43\n   8.1.3.5    Processing 4xx
    Responses ............................   45\n   8.2        UAS Behavior ........................................
    \  46\n   8.2.1      Method Inspection ...................................   46\n
    \  8.2.2      Header Inspection ...................................   46\n   8.2.2.1
    \   To and Request-URI ..................................   46\n   8.2.2.2    Merged
    Requests .....................................   47\n   8.2.2.3    Require .............................................
    \  47\n   8.2.3      Content Processing ..................................   48\n
    \  8.2.4      Applying Extensions .................................   49\n   8.2.5
    \     Processing the Request ..............................   49\n   8.2.6      Generating
    the Response .............................   49\n   8.2.6.1    Sending a Provisional
    Response ......................   49\n   8.2.6.2    Headers and Tags ....................................
    \  50\n   8.2.7      Stateless UAS Behavior ..............................   50\n
    \  8.3        Redirect Servers ....................................   51\n   9
    \         Canceling a Request .................................   53\n   9.1        Client
    Behavior .....................................   53\n   9.2        Server Behavior
    .....................................   55\n   10         Registrations .......................................
    \  56\n   10.1       Overview ............................................   56\n
    \  10.2       Constructing the REGISTER Request ...................   57\n   10.2.1
    \    Adding Bindings .....................................   59\n   10.2.1.1   Setting
    the Expiration Interval of Contact Addresses    60\n   10.2.1.2   Preferences
    among Contact Addresses .................   61\n   10.2.2     Removing Bindings
    ...................................   61\n   10.2.3     Fetching Bindings ...................................
    \  61\n   10.2.4     Refreshing Bindings .................................   61\n
    \  10.2.5     Setting the Internal Clock ..........................   62\n   10.2.6
    \    Discovering a Registrar .............................   62\n   10.2.7     Transmitting
    a Request ..............................   62\n   10.2.8     Error Responses .....................................
    \  63\n   10.3       Processing REGISTER Requests ........................   63\n
    \  11         Querying for Capabilities ...........................   66\n   11.1
    \      Construction of OPTIONS Request .....................   67\n   11.2       Processing
    of OPTIONS Request .......................   68\n   12         Dialogs .............................................
    \  69\n   12.1       Creation of a Dialog ................................   70\n
    \  12.1.1     UAS behavior ........................................   70\n   12.1.2
    \    UAC Behavior ........................................   71\n   12.2       Requests
    within a Dialog ............................   72\n   12.2.1     UAC Behavior
    ........................................   73\n   12.2.1.1   Generating the Request
    ..............................   73\n   12.2.1.2   Processing the Responses ............................
    \  75\n   12.2.2     UAS Behavior ........................................   76\n
    \  12.3       Termination of a Dialog .............................   77\n   13
    \        Initiating a Session ................................   77\n   13.1       Overview
    ............................................   77\n   13.2       UAC Processing
    ......................................   78\n   13.2.1     Creating the Initial
    INVITE .........................   78\n   13.2.2     Processing INVITE Responses
    .........................   81\n   13.2.2.1   1xx Responses .......................................
    \  81\n   13.2.2.2   3xx Responses .......................................   81\n
    \  13.2.2.3   4xx, 5xx and 6xx Responses ..........................   81\n   13.2.2.4
    \  2xx Responses .......................................   82\n   13.3       UAS
    Processing ......................................   83\n   13.3.1     Processing
    of the INVITE ............................   83\n   13.3.1.1   Progress ............................................
    \  84\n   13.3.1.2   The INVITE is Redirected ............................   84\n
    \  13.3.1.3   The INVITE is Rejected ..............................   85\n   13.3.1.4
    \  The INVITE is Accepted ..............................   85\n   14         Modifying
    an Existing Session .......................   86\n   14.1       UAC Behavior ........................................
    \  86\n   14.2       UAS Behavior ........................................   88\n
    \  15         Terminating a Session ...............................   89\n   15.1
    \      Terminating a Session with a BYE Request ............   90\n   15.1.1     UAC
    Behavior ........................................   90\n   15.1.2     UAS Behavior
    ........................................   91\n   16         Proxy Behavior ......................................
    \  91\n   16.1       Overview ............................................   91\n
    \  16.2       Stateful Proxy ......................................   92\n   16.3
    \      Request Validation ..................................   94\n   16.4       Route
    Information Preprocessing .....................   96\n   16.5       Determining
    Request Targets .........................   97\n   16.6       Request Forwarding
    ..................................   99\n   16.7       Response Processing .................................
    \ 107\n   16.8       Processing Timer C ..................................  114\n
    \  16.9       Handling Transport Errors ...........................  115\n   16.10
    \     CANCEL Processing ...................................  115\n   16.11      Stateless
    Proxy .....................................  116\n   16.12      Summary of Proxy
    Route Processing ...................  118\n   16.12.1    Examples ............................................
    \ 118\n   16.12.1.1  Basic SIP Trapezoid .................................  118\n
    \  16.12.1.2  Traversing a Strict-Routing Proxy ...................  120\n   16.12.1.3
    \ Rewriting Record-Route Header Field Values ..........  121\n   17         Transactions
    ........................................  122\n   17.1       Client Transaction
    ..................................  124\n   17.1.1     INVITE Client Transaction
    ...........................  125\n   17.1.1.1   Overview of INVITE Transaction
    ......................  125\n   17.1.1.2   Formal Description ..................................
    \ 125\n   17.1.1.3   Construction of the ACK Request .....................  129\n
    \  17.1.2     Non-INVITE Client Transaction .......................  130\n   17.1.2.1
    \  Overview of the non-INVITE Transaction ..............  130\n   17.1.2.2   Formal
    Description ..................................  131\n   17.1.3     Matching Responses
    to Client Transactions ...........  132\n   17.1.4     Handling Transport Errors
    ...........................  133\n   17.2       Server Transaction ..................................
    \ 134\n   17.2.1     INVITE Server Transaction ...........................  134\n
    \  17.2.2     Non-INVITE Server Transaction .......................  137\n   17.2.3
    \    Matching Requests to Server Transactions ............  138\n   17.2.4     Handling
    Transport Errors ...........................  141\n   18         Transport ...........................................
    \ 141\n   18.1       Clients .............................................  142\n
    \  18.1.1     Sending Requests ....................................  142\n   18.1.2
    \    Receiving Responses .................................  144\n   18.2       Servers
    .............................................  145\n   18.2.1     Receiving Requests
    ..................................  145\n   18.2.2     Sending Responses ...................................
    \ 146\n   18.3       Framing .............................................  147\n
    \  18.4       Error Handling ......................................  147\n   19
    \        Common Message Components ...........................  147\n   19.1       SIP
    and SIPS Uniform Resource Indicators ............  148\n   19.1.1     SIP and
    SIPS URI Components .........................  148\n   19.1.2     Character Escaping
    Requirements .....................  152\n   19.1.3     Example SIP and SIPS URIs
    ...........................  153\n   19.1.4     URI Comparison ......................................
    \ 153\n   19.1.5     Forming Requests from a URI .........................  156\n
    \  19.1.6     Relating SIP URIs and tel URLs ......................  157\n   19.2
    \      Option Tags .........................................  158\n   19.3       Tags
    ................................................  159\n   20         Header Fields
    .......................................  159\n   20.1       Accept ..............................................
    \ 161\n   20.2       Accept-Encoding .....................................  163\n
    \  20.3       Accept-Language .....................................  164\n   20.4
    \      Alert-Info ..........................................  164\n   20.5       Allow
    ...............................................  165\n   20.6       Authentication-Info
    .................................  165\n   20.7       Authorization .......................................
    \ 165\n   20.8       Call-ID .............................................  166\n
    \  20.9       Call-Info ...........................................  166\n   20.10
    \     Contact .............................................  167\n   20.11      Content-Disposition
    .................................  168\n   20.12      Content-Encoding ....................................
    \ 169\n   20.13      Content-Language ....................................  169\n
    \  20.14      Content-Length ......................................  169\n   20.15
    \     Content-Type ........................................  170\n   20.16      CSeq
    ................................................  170\n   20.17      Date ................................................
    \ 170\n   20.18      Error-Info ..........................................  171\n
    \  20.19      Expires .............................................  171\n   20.20
    \     From ................................................  172\n   20.21      In-Reply-To
    .........................................  172\n   20.22      Max-Forwards ........................................
    \ 173\n   20.23      Min-Expires .........................................  173\n
    \  20.24      MIME-Version ........................................  173\n   20.25
    \     Organization ........................................  174\n   20.26      Priority
    ............................................  174\n   20.27      Proxy-Authenticate
    ..................................  174\n   20.28      Proxy-Authorization .................................
    \ 175\n   20.29      Proxy-Require .......................................  175\n
    \  20.30      Record-Route ........................................  175\n   20.31
    \     Reply-To ............................................  176\n   20.32      Require
    .............................................  176\n   20.33      Retry-After
    .........................................  176\n   20.34      Route ...............................................
    \ 177\n   20.35      Server ..............................................  177\n
    \  20.36      Subject .............................................  177\n   20.37
    \     Supported ...........................................  178\n   20.38      Timestamp
    ...........................................  178\n   20.39      To ..................................................
    \ 178\n   20.40      Unsupported .........................................  179\n
    \  20.41      User-Agent ..........................................  179\n   20.42
    \     Via .................................................  179\n   20.43      Warning
    .............................................  180\n   20.44      WWW-Authenticate
    ....................................  182\n   21         Response Codes ......................................
    \ 182\n   21.1       Provisional 1xx .....................................  182\n
    \  21.1.1     100 Trying ..........................................  183\n   21.1.2
    \    180 Ringing .........................................  183\n   21.1.3     181
    Call Is Being Forwarded .........................  183\n   21.1.4     182 Queued
    ..........................................  183\n   21.1.5     183 Session Progress
    ................................  183\n   21.2       Successful 2xx ......................................
    \ 183\n   21.2.1     200 OK ..............................................  183\n
    \  21.3       Redirection 3xx .....................................  184\n   21.3.1
    \    300 Multiple Choices ................................  184\n   21.3.2     301
    Moved Permanently ...............................  184\n   21.3.3     302 Moved
    Temporarily ...............................  184\n   21.3.4     305 Use Proxy
    .......................................  185\n   21.3.5     380 Alternative Service
    .............................  185\n   21.4       Request Failure 4xx .................................
    \ 185\n   21.4.1     400 Bad Request .....................................  185\n
    \  21.4.2     401 Unauthorized ....................................  185\n   21.4.3
    \    402 Payment Required ................................  186\n   21.4.4     403
    Forbidden .......................................  186\n   21.4.5     404 Not
    Found .......................................  186\n   21.4.6     405 Method Not
    Allowed ..............................  186\n   21.4.7     406 Not Acceptable
    ..................................  186\n   21.4.8     407 Proxy Authentication
    Required ...................  186\n   21.4.9     408 Request Timeout .................................
    \ 186\n   21.4.10    410 Gone ............................................  187\n
    \  21.4.11    413 Request Entity Too Large ........................  187\n   21.4.12
    \   414 Request-URI Too Long ............................  187\n   21.4.13    415
    Unsupported Media Type ..........................  187\n   21.4.14    416 Unsupported
    URI Scheme ..........................  187\n   21.4.15    420 Bad Extension ...................................
    \ 187\n   21.4.16    421 Extension Required ..............................  188\n
    \  21.4.17    423 Interval Too Brief ..............................  188\n   21.4.18
    \   480 Temporarily Unavailable .........................  188\n   21.4.19    481
    Call/Transaction Does Not Exist .................  188\n   21.4.20    482 Loop
    Detected ...................................  188\n   21.4.21    483 Too Many
    Hops ...................................  189\n   21.4.22    484 Address Incomplete
    ..............................  189\n   21.4.23    485 Ambiguous .......................................
    \ 189\n   21.4.24    486 Busy Here .......................................  189\n
    \  21.4.25    487 Request Terminated ..............................  190\n   21.4.26
    \   488 Not Acceptable Here .............................  190\n   21.4.27    491
    Request Pending .................................  190\n   21.4.28    493 Undecipherable
    ..................................  190\n   21.5       Server Failure 5xx ..................................
    \ 190\n   21.5.1     500 Server Internal Error ...........................  190\n
    \  21.5.2     501 Not Implemented .................................  191\n   21.5.3
    \    502 Bad Gateway .....................................  191\n   21.5.4     503
    Service Unavailable .............................  191\n   21.5.5     504 Server
    Time-out .................................  191\n   21.5.6     505 Version Not
    Supported ...........................  192\n   21.5.7     513 Message Too Large
    ...............................  192\n   21.6       Global Failures 6xx .................................
    \ 192\n   21.6.1     600 Busy Everywhere .................................  192\n
    \  21.6.2     603 Decline .........................................  192\n   21.6.3
    \    604 Does Not Exist Anywhere .........................  192\n   21.6.4     606
    Not Acceptable ..................................  192\n   22         Usage of
    HTTP Authentication ........................  193\n   22.1       Framework ...........................................
    \ 193\n   22.2       User-to-User Authentication .........................  195\n
    \  22.3       Proxy-to-User Authentication ........................  197\n   22.4
    \      The Digest Authentication Scheme ....................  199\n   23         S/MIME
    ..............................................  201\n   23.1       S/MIME Certificates
    .................................  201\n   23.2       S/MIME Key Exchange .................................
    \ 202\n   23.3       Securing MIME bodies ................................  205\n
    \  23.4       SIP Header Privacy and Integrity using S/MIME:\n              Tunneling
    SIP .......................................  207\n   23.4.1     Integrity and
    Confidentiality Properties of SIP\n              Headers .............................................
    \ 207\n   23.4.1.1   Integrity ...........................................  207\n
    \  23.4.1.2   Confidentiality .....................................  208\n   23.4.2
    \    Tunneling Integrity and Authentication ..............  209\n   23.4.3     Tunneling
    Encryption ................................  211\n   24         Examples ............................................
    \ 213\n   24.1       Registration ........................................  213\n
    \  24.2       Session Setup .......................................  214\n   25
    \        Augmented BNF for the SIP Protocol ..................  219\n   25.1       Basic
    Rules .........................................  219\n   26         Security Considerations:
    Threat Model and Security\n              Usage Recommendations ...............................
    \ 232\n   26.1       Attacks and Threat Models ...........................  233\n
    \  26.1.1     Registration Hijacking ..............................  233\n   26.1.2
    \    Impersonating a Server ..............................  234\n   26.1.3     Tampering
    with Message Bodies .......................  235\n   26.1.4     Tearing Down Sessions
    ...............................  235\n   26.1.5     Denial of Service and Amplification
    .................  236\n   26.2       Security Mechanisms .................................
    \ 237\n   26.2.1     Transport and Network Layer Security ................  238\n
    \  26.2.2     SIPS URI Scheme .....................................  239\n   26.2.3
    \    HTTP Authentication .................................  240\n   26.2.4     S/MIME
    ..............................................  240\n   26.3       Implementing
    Security Mechanisms ....................  241\n   26.3.1     Requirements for
    Implementers of SIP ................  241\n   26.3.2     Security Solutions ..................................
    \ 242\n   26.3.2.1   Registration ........................................  242\n
    \  26.3.2.2   Interdomain Requests ................................  243\n   26.3.2.3
    \  Peer-to-Peer Requests ...............................  245\n   26.3.2.4   DoS
    Protection ......................................  246\n   26.4       Limitations
    .........................................  247\n   26.4.1     HTTP Digest .........................................
    \ 247\n   26.4.2     S/MIME ..............................................  248\n
    \  26.4.3     TLS .................................................  249\n   26.4.4
    \    SIPS URIs ...........................................  249\n   26.5       Privacy
    .............................................  251\n   27         IANA Considerations
    .................................  252\n   27.1       Option Tags .........................................
    \ 252\n   27.2       Warn-Codes ..........................................  252\n
    \  27.3       Header Field Names ..................................  253\n   27.4
    \      Method and Response Codes ...........................  253\n   27.5       The
    \"message/sip\" MIME type.  .......................  254\n   27.6       New Content-Disposition
    Parameter Registrations .....  255\n   28         Changes From RFC 2543 ...............................
    \ 255\n   28.1       Major Functional Changes ............................  255\n
    \  28.2       Minor Functional Changes ............................  260\n   29
    \        Normative References ................................  261\n   30         Informative
    References ..............................  262\n   A          Table of Timer Values
    ...............................  265\n   Acknowledgments ................................................
    \ 266\n   Authors' Addresses .............................................  267\n
    \  Full Copyright Statement .......................................  269\n"
  title: Table of Contents
- contents:
  - "1 Introduction\n   There are many applications of the Internet that require the
    creation\n   and management of a session, where a session is considered an\n   exchange
    of data between an association of participants.  The\n   implementation of these
    applications is complicated by the practices\n   of participants: users may move
    between endpoints, they may be\n   addressable by multiple names, and they may
    communicate in several\n   different media - sometimes simultaneously.  Numerous
    protocols have\n   been authored that carry various forms of real-time multimedia\n
    \  session data such as voice, video, or text messages.  The Session\n   Initiation
    Protocol (SIP) works in concert with these protocols by\n   enabling Internet
    endpoints (called user agents) to discover one\n   another and to agree on a characterization
    of a session they would\n   like to share.  For locating prospective session participants,
    and\n   for other functions, SIP enables the creation of an infrastructure of\n
    \  network hosts (called proxy servers) to which user agents can send\n   registrations,
    invitations to sessions, and other requests.  SIP is\n   an agile, general-purpose
    tool for creating, modifying, and\n   terminating sessions that works independently
    of underlying transport\n   protocols and without dependency on the type of session
    that is being\n   established.\n"
  title: 1 Introduction
- contents:
  - "2 Overview of SIP Functionality\n   SIP is an application-layer control protocol
    that can establish,\n   modify, and terminate multimedia sessions (conferences)
    such as\n   Internet telephony calls.  SIP can also invite participants to\n   already
    existing sessions, such as multicast conferences.  Media can\n   be added to (and
    removed from) an existing session.  SIP\n   transparently supports name mapping
    and redirection services, which\n   supports personal mobility [27] - users can
    maintain a single\n   externally visible identifier regardless of their network
    location.\n   SIP supports five facets of establishing and terminating multimedia\n
    \  communications:\n      User location: determination of the end system to be
    used for\n           communication;\n      User availability: determination of
    the willingness of the called\n           party to engage in communications;\n
    \     User capabilities: determination of the media and media parameters\n           to
    be used;\n      Session setup: \"ringing\", establishment of session parameters
    at\n           both called and calling party;\n      Session management: including
    transfer and termination of\n           sessions, modifying session parameters,
    and invoking\n           services.\n   SIP is not a vertically integrated communications
    system.  SIP is\n   rather a component that can be used with other IETF protocols
    to\n   build a complete multimedia architecture.  Typically, these\n   architectures
    will include protocols such as the Real-time Transport\n   Protocol (RTP) (RFC
    1889 [28]) for transporting real-time data and\n   providing QoS feedback, the
    Real-Time streaming protocol (RTSP) (RFC\n   2326 [29]) for controlling delivery
    of streaming media, the Media\n   Gateway Control Protocol (MEGACO) (RFC 3015
    [30]) for controlling\n   gateways to the Public Switched Telephone Network (PSTN),
    and the\n   Session Description Protocol (SDP) (RFC 2327 [1]) for describing\n
    \  multimedia sessions.  Therefore, SIP should be used in conjunction\n   with
    other protocols in order to provide complete services to the\n   users.  However,
    the basic functionality and operation of SIP does\n   not depend on any of these
    protocols.\n   SIP does not provide services.  Rather, SIP provides primitives
    that\n   can be used to implement different services.  For example, SIP can\n
    \  locate a user and deliver an opaque object to his current location.\n   If
    this primitive is used to deliver a session description written in\n   SDP, for
    instance, the endpoints can agree on the parameters of a\n   session.  If the
    same primitive is used to deliver a photo of the\n   caller as well as the session
    description, a \"caller ID\" service can\n   be easily implemented.  As this example
    shows, a single primitive is\n   typically used to provide several different services.\n
    \  SIP does not offer conference control services such as floor control\n   or
    voting and does not prescribe how a conference is to be managed.\n   SIP can be
    used to initiate a session that uses some other conference\n   control protocol.
    \ Since SIP messages and the sessions they establish\n   can pass through entirely
    different networks, SIP cannot, and does\n   not, provide any kind of network
    resource reservation capabilities.\n   The nature of the services provided make
    security particularly\n   important.  To that end, SIP provides a suite of security
    services,\n   which include denial-of-service prevention, authentication (both
    user\n   to user and proxy to user), integrity protection, and encryption and\n
    \  privacy services.\n   SIP works with both IPv4 and IPv6.\n"
  title: 2 Overview of SIP Functionality
- contents:
  - "3 Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\n
    \  RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as\n   described
    in BCP 14, RFC 2119 [2] and indicate requirement levels for\n   compliant SIP
    implementations.\n"
  title: 3 Terminology
- contents:
  - "4 Overview of Operation\n   This section introduces the basic operations of SIP
    using simple\n   examples.  This section is tutorial in nature and does not contain\n
    \  any normative statements.\n   The first example shows the basic functions of
    SIP: location of an\n   end point, signal of a desire to communicate, negotiation
    of session\n   parameters to establish the session, and teardown of the session
    once\n   established.\n   Figure 1 shows a typical example of a SIP message exchange
    between\n   two users, Alice and Bob.  (Each message is labeled with the letter\n
    \  \"F\" and a number for reference by the text.)  In this example, Alice\n   uses
    a SIP application on her PC (referred to as a softphone) to call\n   Bob on his
    SIP phone over the Internet.  Also shown are two SIP proxy\n   servers that act
    on behalf of Alice and Bob to facilitate the session\n   establishment.  This
    typical arrangement is often referred to as the\n   \"SIP trapezoid\" as shown
    by the geometric shape of the dotted lines\n   in Figure 1.\n   Alice \"calls\"
    Bob using his SIP identity, a type of Uniform Resource\n   Identifier (URI) called
    a SIP URI. SIP URIs are defined in Section\n   19.1.  It has a similar form to
    an email address, typically\n   containing a username and a host name.  In this
    case, it is\n   sip:bob@biloxi.com, where biloxi.com is the domain of Bob's SIP\n
    \  service provider.  Alice has a SIP URI of sip:alice@atlanta.com.\n   Alice
    might have typed in Bob's URI or perhaps clicked on a hyperlink\n   or an entry
    in an address book.  SIP also provides a secure URI,\n   called a SIPS URI.  An
    example would be sips:bob@biloxi.com.  A call\n   made to a SIPS URI guarantees
    that secure, encrypted transport\n   (namely TLS) is used to carry all SIP messages
    from the caller to the\n   domain of the callee.  From there, the request is sent
    securely to\n   the callee, but with security mechanisms that depend on the policy
    of\n   the domain of the callee.\n   SIP is based on an HTTP-like request/response
    transaction model.\n   Each transaction consists of a request that invokes a particular\n
    \  method, or function, on the server and at least one response.  In\n   this
    example, the transaction begins with Alice's softphone sending\n   an INVITE request
    addressed to Bob's SIP URI.  INVITE is an example\n   of a SIP method that specifies
    the action that the requestor (Alice)\n   wants the server (Bob) to take.  The
    INVITE request contains a number\n   of header fields.  Header fields are named
    attributes that provide\n   additional information about a message.  The ones
    present in an\n   INVITE include a unique identifier for the call, the destination\n
    \  address, Alice's address, and information about the type of session\n   that
    Alice wishes to establish with Bob.  The INVITE (message F1 in\n   Figure 1) might
    look like this:\n                     atlanta.com  . . . biloxi.com\n                 .
    \     proxy              proxy     .\n               .                                       .\n
    \      Alice's  . . . . . . . . . . . . . . . . . . . .  Bob's\n      softphone
    \                                       SIP Phone\n         |                |
    \               |                |\n         |    INVITE F1   |                |
    \               |\n         |--------------->|    INVITE F2   |                |\n
    \        |  100 Trying F3 |--------------->|    INVITE F4   |\n         |<---------------|
    \ 100 Trying F5 |--------------->|\n         |                |<--------------
    | 180 Ringing F6 |\n         |                | 180 Ringing F7 |<---------------|\n
    \        | 180 Ringing F8 |<---------------|     200 OK F9  |\n         |<---------------|
    \   200 OK F10  |<---------------|\n         |    200 OK F11  |<---------------|
    \               |\n         |<---------------|                |                |\n
    \        |                       ACK F12                    |\n         |------------------------------------------------->|\n
    \        |                   Media Session                  |\n         |<================================================>|\n
    \        |                       BYE F13                    |\n         |<-------------------------------------------------|\n
    \        |                     200 OK F14                   |\n         |------------------------------------------------->|\n
    \        |                                                  |\n         Figure
    1: SIP session setup example with SIP trapezoid\n      INVITE sip:bob@biloxi.com
    SIP/2.0\n      Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bK776asdhds\n      Max-Forwards:
    70\n      To: Bob <sip:bob@biloxi.com>\n      From: Alice <sip:alice@atlanta.com>;tag=1928301774\n
    \     Call-ID: a84b4c76e66710@pc33.atlanta.com\n      CSeq: 314159 INVITE\n      Contact:
    <sip:alice@pc33.atlanta.com>\n      Content-Type: application/sdp\n      Content-Length:
    142\n      (Alice's SDP not shown)\n   The first line of the text-encoded message
    contains the method name\n   (INVITE).  The lines that follow are a list of header
    fields.  This\n   example contains a minimum required set.  The header fields
    are\n   briefly described below:\n   Via contains the address (pc33.atlanta.com)
    at which Alice is\n   expecting to receive responses to this request.  It also
    contains a\n   branch parameter that identifies this transaction.\n   To contains
    a display name (Bob) and a SIP or SIPS URI\n   (sip:bob@biloxi.com) towards which
    the request was originally\n   directed.  Display names are described in RFC 2822
    [3].\n   From also contains a display name (Alice) and a SIP or SIPS URI\n   (sip:alice@atlanta.com)
    that indicate the originator of the request.\n   This header field also has a
    tag parameter containing a random string\n   (1928301774) that was added to the
    URI by the softphone.  It is used\n   for identification purposes.\n   Call-ID
    contains a globally unique identifier for this call,\n   generated by the combination
    of a random string and the softphone's\n   host name or IP address.  The combination
    of the To tag, From tag,\n   and Call-ID completely defines a peer-to-peer SIP
    relationship\n   between Alice and Bob and is referred to as a dialog.\n   CSeq
    or Command Sequence contains an integer and a method name.  The\n   CSeq number
    is incremented for each new request within a dialog and\n   is a traditional sequence
    number.\n   Contact contains a SIP or SIPS URI that represents a direct route
    to\n   contact Alice, usually composed of a username at a fully qualified\n   domain
    name (FQDN).  While an FQDN is preferred, many end systems do\n   not have registered
    domain names, so IP addresses are permitted.\n   While the Via header field tells
    other elements where to send the\n   response, the Contact header field tells
    other elements where to send\n   future requests.\n   Max-Forwards serves to limit
    the number of hops a request can make on\n   the way to its destination.  It consists
    of an integer that is\n   decremented by one at each hop.\n   Content-Type contains
    a description of the message body (not shown).\n   Content-Length contains an
    octet (byte) count of the message body.\n   The complete set of SIP header fields
    is defined in Section 20.\n   The details of the session, such as the type of
    media, codec, or\n   sampling rate, are not described using SIP.  Rather, the
    body of a\n   SIP message contains a description of the session, encoded in some\n
    \  other protocol format.  One such format is the Session Description\n   Protocol
    (SDP) (RFC 2327 [1]).  This SDP message (not shown in the\n   example) is carried
    by the SIP message in a way that is analogous to\n   a document attachment being
    carried by an email message, or a web\n   page being carried in an HTTP message.\n
    \  Since the softphone does not know the location of Bob or the SIP\n   server
    in the biloxi.com domain, the softphone sends the INVITE to\n   the SIP server
    that serves Alice's domain, atlanta.com.  The address\n   of the atlanta.com SIP
    server could have been configured in Alice's\n   softphone, or it could have been
    discovered by DHCP, for example.\n   The atlanta.com SIP server is a type of SIP
    server known as a proxy\n   server.  A proxy server receives SIP requests and
    forwards them on\n   behalf of the requestor.  In this example, the proxy server
    receives\n   the INVITE request and sends a 100 (Trying) response back to Alice's\n
    \  softphone.  The 100 (Trying) response indicates that the INVITE has\n   been
    received and that the proxy is working on her behalf to route\n   the INVITE to
    the destination.  Responses in SIP use a three-digit\n   code followed by a descriptive
    phrase.  This response contains the\n   same To, From, Call-ID, CSeq and branch
    parameter in the Via as the\n   INVITE, which allows Alice's softphone to correlate
    this response to\n   the sent INVITE.  The atlanta.com proxy server locates the
    proxy\n   server at biloxi.com, possibly by performing a particular type of DNS\n
    \  (Domain Name Service) lookup to find the SIP server that serves the\n   biloxi.com
    domain.  This is described in [4].  As a result, it\n   obtains the IP address
    of the biloxi.com proxy server and forwards,\n   or proxies, the INVITE request
    there.  Before forwarding the request,\n   the atlanta.com proxy server adds an
    additional Via header field\n   value that contains its own address (the INVITE
    already contains\n   Alice's address in the first Via).  The biloxi.com proxy
    server\n   receives the INVITE and responds with a 100 (Trying) response back
    to\n   the atlanta.com proxy server to indicate that it has received the\n   INVITE
    and is processing the request.  The proxy server consults a\n   database, generically
    called a location service, that contains the\n   current IP address of Bob.  (We
    shall see in the next section how\n   this database can be populated.)  The biloxi.com
    proxy server adds\n   another Via header field value with its own address to the
    INVITE and\n   proxies it to Bob's SIP phone.\n   Bob's SIP phone receives the
    INVITE and alerts Bob to the incoming\n   call from Alice so that Bob can decide
    whether to answer the call,\n   that is, Bob's phone rings.  Bob's SIP phone indicates
    this in a 180\n   (Ringing) response, which is routed back through the two proxies
    in\n   the reverse direction.  Each proxy uses the Via header field to\n   determine
    where to send the response and removes its own address from\n   the top.  As a
    result, although DNS and location service lookups were\n   required to route the
    initial INVITE, the 180 (Ringing) response can\n   be returned to the caller without
    lookups or without state being\n   maintained in the proxies.  This also has the
    desirable property that\n   each proxy that sees the INVITE will also see all
    responses to the\n   INVITE.\n   When Alice's softphone receives the 180 (Ringing)
    response, it passes\n   this information to Alice, perhaps using an audio ringback
    tone or by\n   displaying a message on Alice's screen.\n   In this example, Bob
    decides to answer the call.  When he picks up\n   the handset, his SIP phone sends
    a 200 (OK) response to indicate that\n   the call has been answered.  The 200
    (OK) contains a message body\n   with the SDP media description of the type of
    session that Bob is\n   willing to establish with Alice.  As a result, there is
    a two-phase\n   exchange of SDP messages: Alice sent one to Bob, and Bob sent
    one\n   back to Alice.  This two-phase exchange provides basic negotiation\n   capabilities
    and is based on a simple offer/answer model of SDP\n   exchange.  If Bob did not
    wish to answer the call or was busy on\n   another call, an error response would
    have been sent instead of the\n   200 (OK), which would have resulted in no media
    session being\n   established.  The complete list of SIP response codes is in
    Section\n   21.  The 200 (OK) (message F9 in Figure 1) might look like this as\n
    \  Bob sends it out:\n      SIP/2.0 200 OK\n      Via: SIP/2.0/UDP server10.biloxi.com\n
    \        ;branch=z9hG4bKnashds8;received=192.0.2.3\n      Via: SIP/2.0/UDP bigbox3.site3.atlanta.com\n
    \        ;branch=z9hG4bK77ef4c2312983.1;received=192.0.2.2\n      Via: SIP/2.0/UDP
    pc33.atlanta.com\n         ;branch=z9hG4bK776asdhds ;received=192.0.2.1\n      To:
    Bob <sip:bob@biloxi.com>;tag=a6c85cf\n      From: Alice <sip:alice@atlanta.com>;tag=1928301774\n
    \     Call-ID: a84b4c76e66710@pc33.atlanta.com\n      CSeq: 314159 INVITE\n      Contact:
    <sip:bob@192.0.2.4>\n      Content-Type: application/sdp\n      Content-Length:
    131\n      (Bob's SDP not shown)\n   The first line of the response contains the
    response code (200) and\n   the reason phrase (OK).  The remaining lines contain
    header fields.\n   The Via, To, From, Call-ID, and CSeq header fields are copied
    from\n   the INVITE request.  (There are three Via header field values - one\n
    \  added by Alice's SIP phone, one added by the atlanta.com proxy, and\n   one
    added by the biloxi.com proxy.)  Bob's SIP phone has added a tag\n   parameter
    to the To header field.  This tag will be incorporated by\n   both endpoints into
    the dialog and will be included in all future\n   requests and responses in this
    call.  The Contact header field\n   contains a URI at which Bob can be directly
    reached at his SIP phone.\n   The Content-Type and Content-Length refer to the
    message body (not\n   shown) that contains Bob's SDP media information.\n   In
    addition to DNS and location service lookups shown in this\n   example, proxy
    servers can make flexible \"routing decisions\" to\n   decide where to send a
    request.  For example, if Bob's SIP phone\n   returned a 486 (Busy Here) response,
    the biloxi.com proxy server\n   could proxy the INVITE to Bob's voicemail server.
    \ A proxy server can\n   also send an INVITE to a number of locations at the same
    time.  This\n   type of parallel search is known as forking.\n   In this case,
    the 200 (OK) is routed back through the two proxies and\n   is received by Alice's
    softphone, which then stops the ringback tone\n   and indicates that the call
    has been answered.  Finally, Alice's\n   softphone sends an acknowledgement message,
    ACK, to Bob's SIP phone\n   to confirm the reception of the final response (200
    (OK)).  In this\n   example, the ACK is sent directly from Alice's softphone to
    Bob's SIP\n   phone, bypassing the two proxies.  This occurs because the endpoints\n
    \  have learned each other's address from the Contact header fields\n   through
    the INVITE/200 (OK) exchange, which was not known when the\n   initial INVITE
    was sent.  The lookups performed by the two proxies\n   are no longer needed,
    so the proxies drop out of the call flow.  This\n   completes the INVITE/200/ACK
    three-way handshake used to establish\n   SIP sessions.  Full details on session
    setup are in Section 13.\n   Alice and Bob's media session has now begun, and
    they send media\n   packets using the format to which they agreed in the exchange
    of SDP.\n   In general, the end-to-end media packets take a different path from\n
    \  the SIP signaling messages.\n   During the session, either Alice or Bob may
    decide to change the\n   characteristics of the media session.  This is accomplished
    by\n   sending a re-INVITE containing a new media description.  This re-\n   INVITE
    references the existing dialog so that the other party knows\n   that it is to
    modify an existing session instead of establishing a\n   new session.  The other
    party sends a 200 (OK) to accept the change.\n   The requestor responds to the
    200 (OK) with an ACK.  If the other\n   party does not accept the change, he sends
    an error response such as\n   488 (Not Acceptable Here), which also receives an
    ACK.  However, the\n   failure of the re-INVITE does not cause the existing call
    to fail -\n   the session continues using the previously negotiated\n   characteristics.
    \ Full details on session modification are in Section\n   14.\n   At the end of
    the call, Bob disconnects (hangs up) first and\n   generates a BYE message.  This
    BYE is routed directly to Alice's\n   softphone, again bypassing the proxies.
    \ Alice confirms receipt of\n   the BYE with a 200 (OK) response, which terminates
    the session and\n   the BYE transaction.  No ACK is sent - an ACK is only sent
    in\n   response to a response to an INVITE request.  The reasons for this\n   special
    handling for INVITE will be discussed later, but relate to\n   the reliability
    mechanisms in SIP, the length of time it can take for\n   a ringing phone to be
    answered, and forking.  For this reason,\n   request handling in SIP is often
    classified as either INVITE or non-\n   INVITE, referring to all other methods
    besides INVITE.  Full details\n   on session termination are in Section 15.\n
    \  Section 24.2 describes the messages shown in Figure 1 in full.\n   In some
    cases, it may be useful for proxies in the SIP signaling path\n   to see all the
    messaging between the endpoints for the duration of\n   the session.  For example,
    if the biloxi.com proxy server wished to\n   remain in the SIP messaging path
    beyond the initial INVITE, it would\n   add to the INVITE a required routing header
    field known as Record-\n   Route that contained a URI resolving to the hostname
    or IP address of\n   the proxy.  This information would be received by both Bob's
    SIP\n   phone and (due to the Record-Route header field being passed back in\n
    \  the 200 (OK)) Alice's softphone and stored for the duration of the\n   dialog.
    \ The biloxi.com proxy server would then receive and proxy the\n   ACK, BYE, and
    200 (OK) to the BYE.  Each proxy can independently\n   decide to receive subsequent
    messages, and those messages will pass\n   through all proxies that elect to receive
    it.  This capability is\n   frequently used for proxies that are providing mid-call
    features.\n   Registration is another common operation in SIP.  Registration is
    one\n   way that the biloxi.com server can learn the current location of Bob.\n
    \  Upon initialization, and at periodic intervals, Bob's SIP phone sends\n   REGISTER
    messages to a server in the biloxi.com domain known as a SIP\n   registrar.  The
    REGISTER messages associate Bob's SIP or SIPS URI\n   (sip:bob@biloxi.com) with
    the machine into which he is currently\n   logged (conveyed as a SIP or SIPS URI
    in the Contact header field).\n   The registrar writes this association, also
    called a binding, to a\n   database, called the location service, where it can
    be used by the\n   proxy in the biloxi.com domain.  Often, a registrar server
    for a\n   domain is co-located with the proxy for that domain.  It is an\n   important
    concept that the distinction between types of SIP servers\n   is logical, not
    physical.\n   Bob is not limited to registering from a single device.  For example,\n
    \  both his SIP phone at home and the one in the office could send\n   registrations.
    \ This information is stored together in the location\n   service and allows a
    proxy to perform various types of searches to\n   locate Bob.  Similarly, more
    than one user can be registered on a\n   single device at the same time.\n   The
    location service is just an abstract concept.  It generally\n   contains information
    that allows a proxy to input a URI and receive a\n   set of zero or more URIs
    that tell the proxy where to send the\n   request.  Registrations are one way
    to create this information, but\n   not the only way.  Arbitrary mapping functions
    can be configured at\n   the discretion of the administrator.\n   Finally, it
    is important to note that in SIP, registration is used\n   for routing incoming
    SIP requests and has no role in authorizing\n   outgoing requests.  Authorization
    and authentication are handled in\n   SIP either on a request-by-request basis
    with a challenge/response\n   mechanism, or by using a lower layer scheme as discussed
    in Section\n   26.\n   The complete set of SIP message details for this registration
    example\n   is in Section 24.1.\n   Additional operations in SIP, such as querying
    for the capabilities\n   of a SIP server or client using OPTIONS, or canceling
    a pending\n   request using CANCEL, will be introduced in later sections.\n"
  title: 4 Overview of Operation
- contents:
  - "5 Structure of the Protocol\n   SIP is structured as a layered protocol, which
    means that its\n   behavior is described in terms of a set of fairly independent\n
    \  processing stages with only a loose coupling between each stage.  The\n   protocol
    behavior is described as layers for the purpose of\n   presentation, allowing
    the description of functions common across\n   elements in a single section.  It
    does not dictate an implementation\n   in any way.  When we say that an element
    \"contains\" a layer, we mean\n   it is compliant to the set of rules defined
    by that layer.\n   Not every element specified by the protocol contains every
    layer.\n   Furthermore, the elements specified by SIP are logical elements, not\n
    \  physical ones.  A physical realization can choose to act as different\n   logical
    elements, perhaps even on a transaction-by-transaction basis.\n   The lowest layer
    of SIP is its syntax and encoding.  Its encoding is\n   specified using an augmented
    Backus-Naur Form grammar (BNF).  The\n   complete BNF is specified in Section
    25; an overview of a SIP\n   message's structure can be found in Section 7.\n
    \  The second layer is the transport layer.  It defines how a client\n   sends
    requests and receives responses and how a server receives\n   requests and sends
    responses over the network.  All SIP elements\n   contain a transport layer.  The
    transport layer is described in\n   Section 18.\n   The third layer is the transaction
    layer.  Transactions are a\n   fundamental component of SIP.  A transaction is
    a request sent by a\n   client transaction (using the transport layer) to a server\n
    \  transaction, along with all responses to that request sent from the\n   server
    transaction back to the client.  The transaction layer handles\n   application-layer
    retransmissions, matching of responses to requests,\n   and application-layer
    timeouts.  Any task that a user agent client\n   (UAC) accomplishes takes place
    using a series of transactions.\n   Discussion of transactions can be found in
    Section 17.  User agents\n   contain a transaction layer, as do stateful proxies.
    \ Stateless\n   proxies do not contain a transaction layer.  The transaction layer\n
    \  has a client component (referred to as a client transaction) and a\n   server
    component (referred to as a server transaction), each of which\n   are represented
    by a finite state machine that is constructed to\n   process a particular request.\n
    \  The layer above the transaction layer is called the transaction user\n   (TU).
    \ Each of the SIP entities, except the stateless proxy, is a\n   transaction user.
    \ When a TU wishes to send a request, it creates a\n   client transaction instance
    and passes it the request along with the\n   destination IP address, port, and
    transport to which to send the\n   request.  A TU that creates a client transaction
    can also cancel it.\n   When a client cancels a transaction, it requests that
    the server stop\n   further processing, revert to the state that existed before
    the\n   transaction was initiated, and generate a specific error response to\n
    \  that transaction.  This is done with a CANCEL request, which\n   constitutes
    its own transaction, but references the transaction to be\n   cancelled (Section
    9).\n   The SIP elements, that is, user agent clients and servers, stateless\n
    \  and stateful proxies and registrars, contain a core that\n   distinguishes
    them from each other.  Cores, except for the stateless\n   proxy, are transaction
    users.  While the behavior of the UAC and UAS\n   cores depends on the method,
    there are some common rules for all\n   methods (Section 8).  For a UAC, these
    rules govern the construction\n   of a request; for a UAS, they govern the processing
    of a request and\n   generating a response.  Since registrations play an important
    role in\n   SIP, a UAS that handles a REGISTER is given the special name\n   registrar.
    \ Section 10 describes UAC and UAS core behavior for the\n   REGISTER method.
    \ Section 11 describes UAC and UAS core behavior for\n   the OPTIONS method, used
    for determining the capabilities of a UA.\n   Certain other requests are sent
    within a dialog.  A dialog is a\n   peer-to-peer SIP relationship between two
    user agents that persists\n   for some time.  The dialog facilitates sequencing
    of messages and\n   proper routing of requests between the user agents.  The INVITE\n
    \  method is the only way defined in this specification to establish a\n   dialog.
    \ When a UAC sends a request that is within the context of a\n   dialog, it follows
    the common UAC rules as discussed in Section 8 but\n   also the rules for mid-dialog
    requests.  Section 12 discusses dialogs\n   and presents the procedures for their
    construction and maintenance,\n   in addition to construction of requests within
    a dialog.\n   The most important method in SIP is the INVITE method, which is
    used\n   to establish a session between participants.  A session is a\n   collection
    of participants, and streams of media between them, for\n   the purposes of communication.
    \ Section 13 discusses how sessions are\n   initiated, resulting in one or more
    SIP dialogs.  Section 14\n   discusses how characteristics of that session are
    modified through\n   the use of an INVITE request within a dialog.  Finally, section
    15\n   discusses how a session is terminated.\n   The procedures of Sections 8,
    10, 11, 12, 13, 14, and 15 deal\n   entirely with the UA core (Section 9 describes
    cancellation, which\n   applies to both UA core and proxy core).  Section 16 discusses
    the\n   proxy element, which facilitates routing of messages between user\n   agents.\n"
  title: 5 Structure of the Protocol
- contents:
  - "6 Definitions\n   The following terms have special significance for SIP.\n      Address-of-Record:
    An address-of-record (AOR) is a SIP or SIPS URI\n         that points to a domain
    with a location service that can map\n         the URI to another URI where the
    user might be available.\n         Typically, the location service is populated
    through\n         registrations.  An AOR is frequently thought of as the \"public\n
    \        address\" of the user.\n      Back-to-Back User Agent: A back-to-back
    user agent (B2BUA) is a\n         logical entity that receives a request and processes
    it as a\n         user agent server (UAS).  In order to determine how the request\n
    \        should be answered, it acts as a user agent client (UAC) and\n         generates
    requests.  Unlike a proxy server, it maintains dialog\n         state and must
    participate in all requests sent on the dialogs\n         it has established.
    \ Since it is a concatenation of a UAC and\n         UAS, no explicit definitions
    are needed for its behavior.\n      Call: A call is an informal term that refers
    to some communication\n         between peers, generally set up for the purposes
    of a\n         multimedia conversation.\n      Call Leg: Another name for a dialog
    [31]; no longer used in this\n         specification.\n      Call Stateful: A
    proxy is call stateful if it retains state for a\n         dialog from the initiating
    INVITE to the terminating BYE\n         request.  A call stateful proxy is always
    transaction stateful,\n         but the converse is not necessarily true.\n      Client:
    A client is any network element that sends SIP requests\n         and receives
    SIP responses.  Clients may or may not interact\n         directly with a human
    user.  User agent clients and proxies are\n         clients.\n      Conference:
    A multimedia session (see below) that contains\n         multiple participants.\n
    \     Core: Core designates the functions specific to a particular type\n         of
    SIP entity, i.e., specific to either a stateful or stateless\n         proxy,
    a user agent or registrar.  All cores, except those for\n         the stateless
    proxy, are transaction users.\n      Dialog: A dialog is a peer-to-peer SIP relationship
    between two\n         UAs that persists for some time.  A dialog is established
    by\n         SIP messages, such as a 2xx response to an INVITE request.  A\n         dialog
    is identified by a call identifier, local tag, and a\n         remote tag.  A
    dialog was formerly known as a call leg in RFC\n         2543.\n      Downstream:
    A direction of message forwarding within a transaction\n         that refers to
    the direction that requests flow from the user\n         agent client to user
    agent server.\n      Final Response: A response that terminates a SIP transaction,
    as\n         opposed to a provisional response that does not.  All 2xx, 3xx,\n
    \        4xx, 5xx and 6xx responses are final.\n      Header: A header is a component
    of a SIP message that conveys\n         information about the message.  It is
    structured as a sequence\n         of header fields.\n      Header Field: A header
    field is a component of the SIP message\n         header.  A header field can
    appear as one or more header field\n         rows. Header field rows consist of
    a header field name and zero\n         or more header field values. Multiple header
    field values on a\n         given header field row are separated by commas. Some
    header\n         fields can only have a single header field value, and as a\n
    \        result, always appear as a single header field row.\n      Header Field
    Value: A header field value is a single value; a\n         header field consists
    of zero or more header field values.\n      Home Domain: The domain providing
    service to a SIP user.\n         Typically, this is the domain present in the
    URI in the\n         address-of-record of a registration.\n      Informational
    Response: Same as a provisional response.\n      Initiator, Calling Party, Caller:
    The party initiating a session\n         (and dialog) with an INVITE request.
    \ A caller retains this\n         role from the time it sends the initial INVITE
    that established\n         a dialog until the termination of that dialog.\n      Invitation:
    An INVITE request.\n      Invitee, Invited User, Called Party, Callee: The party
    that\n         receives an INVITE request for the purpose of establishing a\n
    \        new session.  A callee retains this role from the time it\n         receives
    the INVITE until the termination of the dialog\n         established by that INVITE.\n
    \     Location Service: A location service is used by a SIP redirect or\n         proxy
    server to obtain information about a callee's possible\n         location(s).
    \ It contains a list of bindings of address-of-\n         record keys to zero
    or more contact addresses.  The bindings\n         can be created and removed
    in many ways; this specification\n         defines a REGISTER method that updates
    the bindings.\n      Loop: A request that arrives at a proxy, is forwarded, and
    later\n         arrives back at the same proxy.  When it arrives the second\n
    \        time, its Request-URI is identical to the first time, and other\n         header
    fields that affect proxy operation are unchanged, so\n         that the proxy
    would make the same processing decision on the\n         request it made the first
    time.  Looped requests are errors,\n         and the procedures for detecting
    them and handling them are\n         described by the protocol.\n      Loose Routing:
    A proxy is said to be loose routing if it follows\n         the procedures defined
    in this specification for processing of\n         the Route header field.  These
    procedures separate the\n         destination of the request (present in the Request-URI)
    from\n         the set of proxies that need to be visited along the way\n         (present
    in the Route header field).  A proxy compliant to\n         these mechanisms is
    also known as a loose router.\n      Message: Data sent between SIP elements as
    part of the protocol.\n         SIP messages are either requests or responses.\n
    \     Method: The method is the primary function that a request is meant\n         to
    invoke on a server.  The method is carried in the request\n         message itself.
    \ Example methods are INVITE and BYE.\n      Outbound Proxy: A proxy that receives
    requests from a client, even\n         though it may not be the server resolved
    by the Request-URI.\n         Typically, a UA is manually configured with an outbound
    proxy,\n         or can learn about one through auto-configuration protocols.\n
    \     Parallel Search: In a parallel search, a proxy issues several\n         requests
    to possible user locations upon receiving an incoming\n         request.  Rather
    than issuing one request and then waiting for\n         the final response before
    issuing the next request as in a\n         sequential search, a parallel search
    issues requests without\n         waiting for the result of previous requests.\n
    \     Provisional Response: A response used by the server to indicate\n         progress,
    but that does not terminate a SIP transaction.  1xx\n         responses are provisional,
    other responses are considered\n         final.\n      Proxy, Proxy Server: An
    intermediary entity that acts as both a\n         server and a client for the
    purpose of making requests on\n         behalf of other clients.  A proxy server
    primarily plays the\n         role of routing, which means its job is to ensure
    that a\n         request is sent to another entity \"closer\" to the targeted\n
    \        user.  Proxies are also useful for enforcing policy (for\n         example,
    making sure a user is allowed to make a call).  A\n         proxy interprets,
    and, if necessary, rewrites specific parts of\n         a request message before
    forwarding it.\n      Recursion: A client recurses on a 3xx response when it generates
    a\n         new request to one or more of the URIs in the Contact header\n         field
    in the response.\n      Redirect Server: A redirect server is a user agent server
    that\n         generates 3xx responses to requests it receives, directing the\n
    \        client to contact an alternate set of URIs.\n      Registrar: A registrar
    is a server that accepts REGISTER requests\n         and places the information
    it receives in those requests into\n         the location service for the domain
    it handles.\n      Regular Transaction: A regular transaction is any transaction
    with\n         a method other than INVITE, ACK, or CANCEL.\n      Request: A SIP
    message sent from a client to a server, for the\n         purpose of invoking
    a particular operation.\n      Response: A SIP message sent from a server to a
    client, for\n         indicating the status of a request sent from the client
    to the\n         server.\n      Ringback: Ringback is the signaling tone produced
    by the calling\n         party's application indicating that a called party is
    being\n         alerted (ringing).\n      Route Set: A route set is a collection
    of ordered SIP or SIPS URI\n         which represent a list of proxies that must
    be traversed when\n         sending a particular request.  A route set can be
    learned,\n         through headers like Record-Route, or it can be configured.\n
    \     Server: A server is a network element that receives requests in\n         order
    to service them and sends back responses to those\n         requests.  Examples
    of servers are proxies, user agent servers,\n         redirect servers, and registrars.\n
    \     Sequential Search: In a sequential search, a proxy server attempts\n         each
    contact address in sequence, proceeding to the next one\n         only after the
    previous has generated a final response.  A 2xx\n         or 6xx class final response
    always terminates a sequential\n         search.\n      Session: From the SDP
    specification: \"A multimedia session is a\n         set of multimedia senders
    and receivers and the data streams\n         flowing from senders to receivers.
    \ A multimedia conference is\n         an example of a multimedia session.\" (RFC
    2327 [1]) (A session\n         as defined for SDP can comprise one or more RTP
    sessions.)  As\n         defined, a callee can be invited several times, by different\n
    \        calls, to the same session.  If SDP is used, a session is\n         defined
    by the concatenation of the SDP user name, session id,\n         network type,
    address type, and address elements in the origin\n         field.\n      SIP Transaction:
    A SIP transaction occurs between a client and a\n         server and comprises
    all messages from the first request sent\n         from the client to the server
    up to a final (non-1xx) response\n         sent from the server to the client.
    \ If the request is INVITE\n         and the final response is a non-2xx, the
    transaction also\n         includes an ACK to the response.  The ACK for a 2xx
    response to\n         an INVITE request is a separate transaction.\n      Spiral:
    A spiral is a SIP request that is routed to a proxy,\n         forwarded onwards,
    and arrives once again at that proxy, but\n         this time differs in a way
    that will result in a different\n         processing decision than the original
    request.  Typically, this\n         means that the request's Request-URI differs
    from its previous\n         arrival.  A spiral is not an error condition, unlike
    a loop.  A\n         typical cause for this is call forwarding.  A user calls\n
    \        joe@example.com.  The example.com proxy forwards it to Joe's\n         PC,
    which in turn, forwards it to bob@example.com.  This\n         request is proxied
    back to the example.com proxy.  However,\n         this is not a loop.  Since
    the request is targeted at a\n         different user, it is considered a spiral,
    and is a valid\n         condition.\n      Stateful Proxy: A logical entity that
    maintains the client and\n         server transaction state machines defined by
    this specification\n         during the processing of a request, also known as
    a transaction\n         stateful proxy.  The behavior of a stateful proxy is further\n
    \        defined in Section 16.  A (transaction) stateful proxy is not\n         the
    same as a call stateful proxy.\n      Stateless Proxy: A logical entity that does
    not maintain the\n         client or server transaction state machines defined
    in this\n         specification when it processes requests.  A stateless proxy\n
    \        forwards every request it receives downstream and every\n         response
    it receives upstream.\n      Strict Routing: A proxy is said to be strict routing
    if it follows\n         the Route processing rules of RFC 2543 and many prior
    work in\n         progress versions of this RFC.  That rule caused proxies to\n
    \        destroy the contents of the Request-URI when a Route header\n         field
    was present.  Strict routing behavior is not used in this\n         specification,
    in favor of a loose routing behavior.  Proxies\n         that perform strict routing
    are also known as strict routers.\n      Target Refresh Request: A target refresh
    request sent within a\n         dialog is defined as a request that can modify
    the remote\n         target of the dialog.\n      Transaction User (TU): The layer
    of protocol processing that\n         resides above the transaction layer.  Transaction
    users include\n         the UAC core, UAS core, and proxy core.\n      Upstream:
    A direction of message forwarding within a transaction\n         that refers to
    the direction that responses flow from the user\n         agent server back to
    the user agent client.\n      URL-encoded: A character string encoded according
    to RFC 2396,\n         Section 2.4 [5].\n      User Agent Client (UAC): A user
    agent client is a logical entity\n         that creates a new request, and then
    uses the client\n         transaction state machinery to send it.  The role of
    UAC lasts\n         only for the duration of that transaction.  In other words,
    if\n         a piece of software initiates a request, it acts as a UAC for\n         the
    duration of that transaction.  If it receives a request\n         later, it assumes
    the role of a user agent server for the\n         processing of that transaction.\n
    \     UAC Core: The set of processing functions required of a UAC that\n         reside
    above the transaction and transport layers.\n      User Agent Server (UAS): A
    user agent server is a logical entity\n         that generates a response to a
    SIP request.  The response\n         accepts, rejects, or redirects the request.
    \ This role lasts\n         only for the duration of that transaction.  In other
    words, if\n         a piece of software responds to a request, it acts as a UAS
    for\n         the duration of that transaction.  If it generates a request\n         later,
    it assumes the role of a user agent client for the\n         processing of that
    transaction.\n      UAS Core: The set of processing functions required at a UAS
    that\n         resides above the transaction and transport layers.\n      User
    Agent (UA): A logical entity that can act as both a user\n         agent client
    and user agent server.\n   The role of UAC and UAS, as well as proxy and redirect
    servers, are\n   defined on a transaction-by-transaction basis.  For example,
    the user\n   agent initiating a call acts as a UAC when sending the initial INVITE\n
    \  request and as a UAS when receiving a BYE request from the callee.\n   Similarly,
    the same software can act as a proxy server for one\n   request and as a redirect
    server for the next request.\n   Proxy, location, and registrar servers defined
    above are logical\n   entities; implementations MAY combine them into a single
    application.\n"
  title: 6 Definitions
- contents:
  - "7 SIP Messages\n   SIP is a text-based protocol and uses the UTF-8 charset (RFC
    2279\n   [7]).\n   A SIP message is either a request from a client to a server,
    or a\n   response from a server to a client.\n   Both Request (section 7.1) and
    Response (section 7.2) messages use\n   the basic format of RFC 2822 [3], even
    though the syntax differs in\n   character set and syntax specifics.  (SIP allows
    header fields that\n   would not be valid RFC 2822 header fields, for example.)
    \ Both types\n   of messages consist of a start-line, one or more header fields,
    an\n   empty line indicating the end of the header fields, and an optional\n   message-body.\n
    \        generic-message  =  start-line\n                             *message-header\n
    \                            CRLF\n                             [ message-body
    ]\n         start-line       =  Request-Line / Status-Line\n   The start-line,
    each message-header line, and the empty line MUST be\n   terminated by a carriage-return
    line-feed sequence (CRLF).  Note that\n   the empty line MUST be present even
    if the message-body is not.\n   Except for the above difference in character sets,
    much of SIP's\n   message and header field syntax is identical to HTTP/1.1.  Rather\n
    \  than repeating the syntax and semantics here, we use [HX.Y] to refer\n   to
    Section X.Y of the current HTTP/1.1 specification (RFC 2616 [8]).\n   However,
    SIP is not an extension of HTTP.\n"
  title: 7 SIP Messages
- contents:
  - "7.1 Requests\n   SIP requests are distinguished by having a Request-Line for
    a start-\n   line.  A Request-Line contains a method name, a Request-URI, and
    the\n   protocol version separated by a single space (SP) character.\n   The Request-Line
    ends with CRLF.  No CR or LF are allowed except in\n   the end-of-line CRLF sequence.
    \ No linear whitespace (LWS) is allowed\n   in any of the elements.\n         Request-Line
    \ =  Method SP Request-URI SP SIP-Version CRLF\n      Method: This specification
    defines six methods: REGISTER for\n           registering contact information,
    INVITE, ACK, and CANCEL for\n           setting up sessions, BYE for terminating
    sessions, and\n           OPTIONS for querying servers about their capabilities.
    \ SIP\n           extensions, documented in standards track RFCs, may define\n
    \          additional methods.\n      Request-URI: The Request-URI is a SIP or
    SIPS URI as described in\n           Section 19.1 or a general URI (RFC 2396 [5]).
    \ It indicates\n           the user or service to which this request is being
    addressed.\n           The Request-URI MUST NOT contain unescaped spaces or control\n
    \          characters and MUST NOT be enclosed in \"<>\".\n           SIP elements
    MAY support Request-URIs with schemes other than\n           \"sip\" and \"sips\",
    for example the \"tel\" URI scheme of RFC\n           2806 [9].  SIP elements
    MAY translate non-SIP URIs using any\n           mechanism at their disposal,
    resulting in SIP URI, SIPS URI,\n           or some other scheme.\n      SIP-Version:
    Both request and response messages include the\n           version of SIP in use,
    and follow [H3.1] (with HTTP replaced\n           by SIP, and HTTP/1.1 replaced
    by SIP/2.0) regarding version\n           ordering, compliance requirements, and
    upgrading of version\n           numbers.  To be compliant with this specification,\n
    \          applications sending SIP messages MUST include a SIP-Version\n           of
    \"SIP/2.0\".  The SIP-Version string is case-insensitive,\n           but implementations
    MUST send upper-case.\n           Unlike HTTP/1.1, SIP treats the version number
    as a literal\n           string.  In practice, this should make no difference.\n"
  title: 7.1 Requests
- contents:
  - "7.2 Responses\n   SIP responses are distinguished from requests by having a Status-Line\n
    \  as their start-line.  A Status-Line consists of the protocol version\n   followed
    by a numeric Status-Code and its associated textual phrase,\n   with each element
    separated by a single SP character.\n   No CR or LF is allowed except in the final
    CRLF sequence.\n      Status-Line  =  SIP-Version SP Status-Code SP Reason-Phrase
    CRLF\n   The Status-Code is a 3-digit integer result code that indicates the\n
    \  outcome of an attempt to understand and satisfy a request.  The\n   Reason-Phrase
    is intended to give a short textual description of the\n   Status-Code.  The Status-Code
    is intended for use by automata,\n   whereas the Reason-Phrase is intended for
    the human user.  A client\n   is not required to examine or display the Reason-Phrase.\n
    \  While this specification suggests specific wording for the reason\n   phrase,
    implementations MAY choose other text, for example, in the\n   language indicated
    in the Accept-Language header field of the\n   request.\n   The first digit of
    the Status-Code defines the class of response.\n   The last two digits do not
    have any categorization role.  For this\n   reason, any response with a status
    code between 100 and 199 is\n   referred to as a \"1xx response\", any response
    with a status code\n   between 200 and 299 as a \"2xx response\", and so on.  SIP/2.0
    allows\n   six values for the first digit:\n      1xx: Provisional -- request
    received, continuing to process the\n           request;\n      2xx: Success --
    the action was successfully received, understood,\n           and accepted;\n
    \     3xx: Redirection -- further action needs to be taken in order to\n           complete
    the request;\n      4xx: Client Error -- the request contains bad syntax or cannot
    be\n           fulfilled at this server;\n      5xx: Server Error -- the server
    failed to fulfill an apparently\n           valid request;\n      6xx: Global
    Failure -- the request cannot be fulfilled at any\n           server.\n   Section
    21 defines these classes and describes the individual codes.\n"
  title: 7.2 Responses
- contents:
  - "7.3 Header Fields\n   SIP header fields are similar to HTTP header fields in
    both syntax\n   and semantics.  In particular, SIP header fields follow the [H4.2]\n
    \  definitions of syntax for the message-header and the rules for\n   extending
    header fields over multiple lines.  However, the latter is\n   specified in HTTP
    with implicit whitespace and folding.  This\n   specification conforms to RFC
    2234 [10] and uses only explicit\n   whitespace and folding as an integral part
    of the grammar.\n   [H4.2] also specifies that multiple header fields of the same
    field\n   name whose value is a comma-separated list can be combined into one\n
    \  header field.  That applies to SIP as well, but the specific rule is\n   different
    because of the different grammars.  Specifically, any SIP\n   header whose grammar
    is of the form\n      header  =  \"header-name\" HCOLON header-value *(COMMA header-value)\n
    \  allows for combining header fields of the same name into a comma-\n   separated
    list.  The Contact header field allows a comma-separated\n   list unless the header
    field value is \"*\".\n"
  title: 7.3 Header Fields
- contents:
  - "7.3.1 Header Field Format\n   Header fields follow the same generic header format
    as that given in\n   Section 2.2 of RFC 2822 [3].  Each header field consists
    of a field\n   name followed by a colon (\":\") and the field value.\n      field-name:
    field-value\n   The formal grammar for a message-header specified in Section 25\n
    \  allows for an arbitrary amount of whitespace on either side of the\n   colon;
    however, implementations should avoid spaces between the field\n   name and the
    colon and use a single space (SP) between the colon and\n   the field-value.\n
    \     Subject:            lunch\n      Subject      :      lunch\n      Subject
    \           :lunch\n      Subject: lunch\n   Thus, the above are all valid and
    equivalent, but the last is the\n   preferred form.\n   Header fields can be extended
    over multiple lines by preceding each\n   extra line with at least one SP or horizontal
    tab (HT).  The line\n   break and the whitespace at the beginning of the next
    line are\n   treated as a single SP character.  Thus, the following are\n   equivalent:\n
    \     Subject: I know you're there, pick up the phone and talk to me!\n      Subject:
    I know you're there,\n               pick up the phone\n               and talk
    to me!\n   The relative order of header fields with different field names is not\n
    \  significant.  However, it is RECOMMENDED that header fields which are\n   needed
    for proxy processing (Via, Route, Record-Route, Proxy-Require,\n   Max-Forwards,
    and Proxy-Authorization, for example) appear towards\n   the top of the message
    to facilitate rapid parsing.  The relative\n   order of header field rows with
    the same field name is important.\n   Multiple header field rows with the same
    field-name MAY be present in\n   a message if and only if the entire field-value
    for that header field\n   is defined as a comma-separated list (that is, if follows
    the grammar\n   defined in Section 7.3).  It MUST be possible to combine the multiple\n
    \  header field rows into one \"field-name: field-value\" pair, without\n   changing
    the semantics of the message, by appending each subsequent\n   field-value to
    the first, each separated by a comma.  The exceptions\n   to this rule are the
    WWW-Authenticate, Authorization, Proxy-\n   Authenticate, and Proxy-Authorization
    header fields.  Multiple header\n   field rows with these names MAY be present
    in a message, but since\n   their grammar does not follow the general form listed
    in Section 7.3,\n   they MUST NOT be combined into a single header field row.\n
    \  Implementations MUST be able to process multiple header field rows\n   with
    the same name in any combination of the single-value-per-line or\n   comma-separated
    value forms.\n   The following groups of header field rows are valid and equivalent:\n
    \     Route: <sip:alice@atlanta.com>\n      Subject: Lunch\n      Route: <sip:bob@biloxi.com>\n
    \     Route: <sip:carol@chicago.com>\n      Route: <sip:alice@atlanta.com>, <sip:bob@biloxi.com>\n
    \     Route: <sip:carol@chicago.com>\n      Subject: Lunch\n      Subject: Lunch\n
    \     Route: <sip:alice@atlanta.com>, <sip:bob@biloxi.com>,\n             <sip:carol@chicago.com>\n
    \  Each of the following blocks is valid but not equivalent to the\n   others:\n
    \     Route: <sip:alice@atlanta.com>\n      Route: <sip:bob@biloxi.com>\n      Route:
    <sip:carol@chicago.com>\n      Route: <sip:bob@biloxi.com>\n      Route: <sip:alice@atlanta.com>\n
    \     Route: <sip:carol@chicago.com>\n      Route: <sip:alice@atlanta.com>,<sip:carol@chicago.com>,\n
    \            <sip:bob@biloxi.com>\n   The format of a header field-value is defined
    per header-name.  It\n   will always be either an opaque sequence of TEXT-UTF8
    octets, or a\n   combination of whitespace, tokens, separators, and quoted strings.\n
    \  Many existing header fields will adhere to the general form of a\n   value
    followed by a semi-colon separated sequence of parameter-name,\n   parameter-value
    pairs:\n         field-name: field-value *(;parameter-name=parameter-value)\n
    \  Even though an arbitrary number of parameter pairs may be attached to\n   a
    header field value, any given parameter-name MUST NOT appear more\n   than once.\n
    \  When comparing header fields, field names are always case-\n   insensitive.
    \ Unless otherwise stated in the definition of a\n   particular header field,
    field values, parameter names, and parameter\n   values are case-insensitive.
    \ Tokens are always case-insensitive.\n   Unless specified otherwise, values expressed
    as quoted strings are\n   case-sensitive.  For example,\n      Contact: <sip:alice@atlanta.com>;expires=3600\n
    \  is equivalent to\n      CONTACT: <sip:alice@atlanta.com>;ExPiReS=3600\n   and\n
    \     Content-Disposition: session;handling=optional\n   is equivalent to\n      content-disposition:
    Session;HANDLING=OPTIONAL\n   The following two header fields are not equivalent:\n
    \     Warning: 370 devnull \"Choose a bigger pipe\"\n      Warning: 370 devnull
    \"CHOOSE A BIGGER PIPE\"\n"
  title: 7.3.1 Header Field Format
- contents:
  - "7.3.2 Header Field Classification\n   Some header fields only make sense in requests
    or responses.  These\n   are called request header fields and response header
    fields,\n   respectively.  If a header field appears in a message not matching\n
    \  its category (such as a request header field in a response), it MUST\n   be
    ignored.  Section 20 defines the classification of each header\n   field.\n"
  title: 7.3.2 Header Field Classification
- contents:
  - "7.3.3 Compact Form\n   SIP provides a mechanism to represent common header field
    names in an\n   abbreviated form.  This may be useful when messages would otherwise\n
    \  become too large to be carried on the transport available to it\n   (exceeding
    the maximum transmission unit (MTU) when using UDP, for\n   example).  These compact
    forms are defined in Section 20.  A compact\n   form MAY be substituted for the
    longer form of a header field name at\n   any time without changing the semantics
    of the message.  A header\n   field name MAY appear in both long and short forms
    within the same\n   message.  Implementations MUST accept both the long and short
    forms\n   of each header name.\n"
  title: 7.3.3 Compact Form
- contents:
  - "7.4 Bodies\n   Requests, including new requests defined in extensions to this\n
    \  specification, MAY contain message bodies unless otherwise noted.\n   The interpretation
    of the body depends on the request method.\n   For response messages, the request
    method and the response status\n   code determine the type and interpretation
    of any message body.  All\n   responses MAY include a body.\n"
  title: 7.4 Bodies
- contents:
  - "7.4.1 Message Body Type\n   The Internet media type of the message body MUST
    be given by the\n   Content-Type header field.  If the body has undergone any
    encoding\n   such as compression, then this MUST be indicated by the Content-\n
    \  Encoding header field; otherwise, Content-Encoding MUST be omitted.\n   If
    applicable, the character set of the message body is indicated as\n   part of
    the Content-Type header-field value.\n   The \"multipart\" MIME type defined in
    RFC 2046 [11] MAY be used within\n   the body of the message.  Implementations
    that send requests\n   containing multipart message bodies MUST send a session
    description\n   as a non-multipart message body if the remote implementation requests\n
    \  this through an Accept header field that does not contain multipart.\n   SIP
    messages MAY contain binary bodies or body parts. When no\n   explicit charset
    parameter is provided by the sender, media subtypes\n   of the \"text\" type are
    defined to have a default charset value of\n   \"UTF-8\".\n"
  title: 7.4.1 Message Body Type
- contents:
  - "7.4.2 Message Body Length\n   The body length in bytes is provided by the Content-Length
    header\n   field.  Section 20.14 describes the necessary contents of this header\n
    \  field in detail.\n   The \"chunked\" transfer encoding of HTTP/1.1 MUST NOT
    be used for SIP.\n   (Note: The chunked encoding modifies the body of a message
    in order\n   to transfer it as a series of chunks, each with its own size\n   indicator.)\n"
  title: 7.4.2 Message Body Length
- contents:
  - "7.5 Framing SIP Messages\n   Unlike HTTP, SIP implementations can use UDP or
    other unreliable\n   datagram protocols.  Each such datagram carries one request
    or\n   response.  See Section 18 on constraints on usage of unreliable\n   transports.\n
    \  Implementations processing SIP messages over stream-oriented\n   transports
    MUST ignore any CRLF appearing before the start-line\n   [H4.1].\n      The Content-Length
    header field value is used to locate the end of\n      each SIP message in a stream.
    \ It will always be present when SIP\n      messages are sent over stream-oriented
    transports.\n"
  title: 7.5 Framing SIP Messages
- contents:
  - "8 General User Agent Behavior\n   A user agent represents an end system.  It
    contains a user agent\n   client (UAC), which generates requests, and a user agent
    server\n   (UAS), which responds to them.  A UAC is capable of generating a\n
    \  request based on some external stimulus (the user clicking a button,\n   or
    a signal on a PSTN line) and processing a response.  A UAS is\n   capable of receiving
    a request and generating a response based on\n   user input, external stimulus,
    the result of a program execution, or\n   some other mechanism.\n   When a UAC
    sends a request, the request passes through some number of\n   proxy servers,
    which forward the request towards the UAS. When the\n   UAS generates a response,
    the response is forwarded towards the UAC.\n   UAC and UAS procedures depend strongly
    on two factors.  First, based\n   on whether the request or response is inside
    or outside of a dialog,\n   and second, based on the method of a request.  Dialogs
    are discussed\n   thoroughly in Section 12; they represent a peer-to-peer relationship\n
    \  between user agents and are established by specific SIP methods, such\n   as
    INVITE.\n   In this section, we discuss the method-independent rules for UAC and\n
    \  UAS behavior when processing requests that are outside of a dialog.\n   This
    includes, of course, the requests which themselves establish a\n   dialog.\n   Security
    procedures for requests and responses outside of a dialog\n   are described in
    Section 26.  Specifically, mechanisms exist for the\n   UAS and UAC to mutually
    authenticate.  A limited set of privacy\n   features are also supported through
    encryption of bodies using\n   S/MIME.\n"
  title: 8 General User Agent Behavior
- contents:
  - "8.1 UAC Behavior\n   This section covers UAC behavior outside of a dialog.\n"
  title: 8.1 UAC Behavior
- contents:
  - "8.1.1 Generating the Request\n   A valid SIP request formulated by a UAC MUST,
    at a minimum, contain\n   the following header fields: To, From, CSeq, Call-ID,
    Max-Forwards,\n   and Via; all of these header fields are mandatory in all SIP\n
    \  requests.  These six header fields are the fundamental building\n   blocks
    of a SIP message, as they jointly provide for most of the\n   critical message
    routing services including the addressing of\n   messages, the routing of responses,
    limiting message propagation,\n   ordering of messages, and the unique identification
    of transactions.\n   These header fields are in addition to the mandatory request
    line,\n   which contains the method, Request-URI, and SIP version.\n   Examples
    of requests sent outside of a dialog include an INVITE to\n   establish a session
    (Section 13) and an OPTIONS to query for\n   capabilities (Section 11).\n"
  title: 8.1.1 Generating the Request
- contents:
  - "8.1.1.1 Request-URI\n   The initial Request-URI of the message SHOULD be set
    to the value of\n   the URI in the To field.  One notable exception is the REGISTER\n
    \  method; behavior for setting the Request-URI of REGISTER is given in\n   Section
    10.  It may also be undesirable for privacy reasons or\n   convenience to set
    these fields to the same value (especially if the\n   originating UA expects that
    the Request-URI will be changed during\n   transit).\n   In some special circumstances,
    the presence of a pre-existing route\n   set can affect the Request-URI of the
    message.  A pre-existing route\n   set is an ordered set of URIs that identify
    a chain of servers, to\n   which a UAC will send outgoing requests that are outside
    of a dialog.\n   Commonly, they are configured on the UA by a user or service
    provider\n   manually, or through some other non-SIP mechanism.  When a provider\n
    \  wishes to configure a UA with an outbound proxy, it is RECOMMENDED\n   that
    this be done by providing it with a pre-existing route set with\n   a single URI,
    that of the outbound proxy.\n   When a pre-existing route set is present, the
    procedures for\n   populating the Request-URI and Route header field detailed
    in Section\n   12.2.1.1 MUST be followed (even though there is no dialog), using
    the\n   desired Request-URI as the remote target URI.\n"
  title: 8.1.1.1 Request-URI
- contents:
  - "8.1.1.2 To\n   The To header field first and foremost specifies the desired\n
    \  \"logical\" recipient of the request, or the address-of-record of the\n   user
    or resource that is the target of this request.  This may or may\n   not be the
    ultimate recipient of the request.  The To header field\n   MAY contain a SIP
    or SIPS URI, but it may also make use of other URI\n   schemes (the tel URL (RFC
    2806 [9]), for example) when appropriate.\n   All SIP implementations MUST support
    the SIP URI scheme.  Any\n   implementation that supports TLS MUST support the
    SIPS URI scheme.\n   The To header field allows for a display name.\n   A UAC
    may learn how to populate the To header field for a particular\n   request in
    a number of ways.  Usually the user will suggest the To\n   header field through
    a human interface, perhaps inputting the URI\n   manually or selecting it from
    some sort of address book.  Frequently,\n   the user will not enter a complete
    URI, but rather a string of digits\n   or letters (for example, \"bob\").  It
    is at the discretion of the UA\n   to choose how to interpret this input.  Using
    the string to form the\n   user part of a SIP URI implies that the UA wishes the
    name to be\n   resolved in the domain to the right-hand side (RHS) of the at-sign
    in\n   the SIP URI (for instance, sip:bob@example.com).  Using the string to\n
    \  form the user part of a SIPS URI implies that the UA wishes to\n   communicate
    securely, and that the name is to be resolved in the\n   domain to the RHS of
    the at-sign.  The RHS will frequently be the\n   home domain of the requestor,
    which allows for the home domain to\n   process the outgoing request.  This is
    useful for features like\n   \"speed dial\" that require interpretation of the
    user part in the home\n   domain.  The tel URL may be used when the UA does not
    wish to specify\n   the domain that should interpret a telephone number that has
    been\n   input by the user.  Rather, each domain through which the request\n   passes
    would be given that opportunity.  As an example, a user in an\n   airport might
    log in and send requests through an outbound proxy in\n   the airport.  If they
    enter \"411\" (this is the phone number for local\n   directory assistance in
    the United States), that needs to be\n   interpreted and processed by the outbound
    proxy in the airport, not\n   the user's home domain.  In this case, tel:411 would
    be the right\n   choice.\n   A request outside of a dialog MUST NOT contain a
    To tag; the tag in\n   the To field of a request identifies the peer of the dialog.
    \ Since\n   no dialog is established, no tag is present.\n   For further information
    on the To header field, see Section 20.39.\n   The following is an example of
    a valid To header field:\n      To: Carol <sip:carol@chicago.com>\n"
  title: 8.1.1.2 To
- contents:
  - "8.1.1.3 From\n   The From header field indicates the logical identity of the
    initiator\n   of the request, possibly the user's address-of-record.  Like the
    To\n   header field, it contains a URI and optionally a display name.  It is\n
    \  used by SIP elements to determine which processing rules to apply to\n   a
    request (for example, automatic call rejection).  As such, it is\n   very important
    that the From URI not contain IP addresses or the FQDN\n   of the host on which
    the UA is running, since these are not logical\n   names.\n   The From header
    field allows for a display name.  A UAC SHOULD use\n   the display name \"Anonymous\",
    along with a syntactically correct, but\n   otherwise meaningless URI (like sip:thisis@anonymous.invalid),
    if the\n   identity of the client is to remain hidden.\n   Usually, the value
    that populates the From header field in requests\n   generated by a particular
    UA is pre-provisioned by the user or by the\n   administrators of the user's local
    domain.  If a particular UA is\n   used by multiple users, it might have switchable
    profiles that\n   include a URI corresponding to the identity of the profiled
    user.\n   Recipients of requests can authenticate the originator of a request\n
    \  in order to ascertain that they are who their From header field\n   claims
    they are (see Section 22 for more on authentication).\n   The From field MUST
    contain a new \"tag\" parameter, chosen by the UAC.\n   See Section 19.3 for details
    on choosing a tag.\n   For further information on the From header field, see Section
    20.20.\n   Examples:\n      From: \"Bob\" <sips:bob@biloxi.com> ;tag=a48s\n      From:
    sip:+12125551212@phone2net.com;tag=887s\n      From: Anonymous <sip:c8oqz84zk7z@privacy.org>;tag=hyh8\n"
  title: 8.1.1.3 From
- contents:
  - "8.1.1.4 Call-ID\n   The Call-ID header field acts as a unique identifier to group\n
    \  together a series of messages.  It MUST be the same for all requests\n   and
    responses sent by either UA in a dialog.  It SHOULD be the same\n   in each registration
    from a UA.\n   In a new request created by a UAC outside of any dialog, the Call-ID\n
    \  header field MUST be selected by the UAC as a globally unique\n   identifier
    over space and time unless overridden by method-specific\n   behavior.  All SIP
    UAs must have a means to guarantee that the Call-\n   ID header fields they produce
    will not be inadvertently generated by\n   any other UA.  Note that when requests
    are retried after certain\n   failure responses that solicit an amendment to a
    request (for\n   example, a challenge for authentication), these retried requests
    are\n   not considered new requests, and therefore do not need new Call-ID\n   header
    fields; see Section 8.1.3.5.\n   Use of cryptographically random identifiers (RFC
    1750 [12]) in the\n   generation of Call-IDs is RECOMMENDED.  Implementations
    MAY use the\n   form \"localid@host\".  Call-IDs are case-sensitive and are simply\n
    \  compared byte-by-byte.\n      Using cryptographically random identifiers provides
    some\n      protection against session hijacking and reduces the likelihood of\n
    \     unintentional Call-ID collisions.\n   No provisioning or human interface
    is required for the selection of\n   the Call-ID header field value for a request.\n
    \  For further information on the Call-ID header field, see Section\n   20.8.\n
    \  Example:\n      Call-ID: f81d4fae-7dec-11d0-a765-00a0c91e6bf6@foo.bar.com\n"
  title: 8.1.1.4 Call-ID
- contents:
  - "8.1.1.5 CSeq\n   The CSeq header field serves as a way to identify and order\n
    \  transactions.  It consists of a sequence number and a method.  The\n   method
    MUST match that of the request.  For non-REGISTER requests\n   outside of a dialog,
    the sequence number value is arbitrary.  The\n   sequence number value MUST be
    expressible as a 32-bit unsigned\n   integer and MUST be less than 2**31.  As
    long as it follows the above\n   guidelines, a client may use any mechanism it
    would like to select\n   CSeq header field values.\n   Section 12.2.1.1 discusses
    construction of the CSeq for requests\n   within a dialog.\n   Example:\n      CSeq:
    4711 INVITE\n"
  title: 8.1.1.5 CSeq
- contents:
  - "8.1.1.6 Max-Forwards\n   The Max-Forwards header field serves to limit the number
    of hops a\n   request can transit on the way to its destination.  It consists
    of an\n   integer that is decremented by one at each hop.  If the Max-Forwards\n
    \  value reaches 0 before the request reaches its destination, it will\n   be
    rejected with a 483(Too Many Hops) error response.\n   A UAC MUST insert a Max-Forwards
    header field into each request it\n   originates with a value that SHOULD be 70.
    \ This number was chosen to\n   be sufficiently large to guarantee that a request
    would not be\n   dropped in any SIP network when there were no loops, but not
    so large\n   as to consume proxy resources when a loop does occur.  Lower values\n
    \  should be used with caution and only in networks where topologies are\n   known
    by the UA.\n"
  title: 8.1.1.6 Max-Forwards
- contents:
  - "8.1.1.7 Via\n   The Via header field indicates the transport used for the transaction\n
    \  and identifies the location where the response is to be sent.  A Via\n   header
    field value is added only after the transport that will be\n   used to reach the
    next hop has been selected (which may involve the\n   usage of the procedures
    in [4]).\n   When the UAC creates a request, it MUST insert a Via into that\n
    \  request.  The protocol name and protocol version in the header field\n   MUST
    be SIP and 2.0, respectively.  The Via header field value MUST\n   contain a branch
    parameter.  This parameter is used to identify the\n   transaction created by
    that request.  This parameter is used by both\n   the client and the server.\n
    \  The branch parameter value MUST be unique across space and time for\n   all
    requests sent by the UA.  The exceptions to this rule are CANCEL\n   and ACK for
    non-2xx responses.  As discussed below, a CANCEL request\n   will have the same
    value of the branch parameter as the request it\n   cancels.  As discussed in
    Section 17.1.1.3, an ACK for a non-2xx\n   response will also have the same branch
    ID as the INVITE whose\n   response it acknowledges.\n      The uniqueness property
    of the branch ID parameter, to facilitate\n      its use as a transaction ID,
    was not part of RFC 2543.\n   The branch ID inserted by an element compliant with
    this\n   specification MUST always begin with the characters \"z9hG4bK\".  These\n
    \  7 characters are used as a magic cookie (7 is deemed sufficient to\n   ensure
    that an older RFC 2543 implementation would not pick such a\n   value), so that
    servers receiving the request can determine that the\n   branch ID was constructed
    in the fashion described by this\n   specification (that is, globally unique).
    \ Beyond this requirement,\n   the precise format of the branch token is implementation-defined.\n
    \  The Via header maddr, ttl, and sent-by components will be set when\n   the
    request is processed by the transport layer (Section 18).\n   Via processing for
    proxies is described in Section 16.6 Item 8 and\n   Section 16.7 Item 3.\n"
  title: 8.1.1.7 Via
- contents:
  - "8.1.1.8 Contact\n   The Contact header field provides a SIP or SIPS URI that
    can be used\n   to contact that specific instance of the UA for subsequent requests.\n
    \  The Contact header field MUST be present and contain exactly one SIP\n   or
    SIPS URI in any request that can result in the establishment of a\n   dialog.
    \ For the methods defined in this specification, that includes\n   only the INVITE
    request.  For these requests, the scope of the\n   Contact is global.  That is,
    the Contact header field value contains\n   the URI at which the UA would like
    to receive requests, and this URI\n   MUST be valid even if used in subsequent
    requests outside of any\n   dialogs.\n   If the Request-URI or top Route header
    field value contains a SIPS\n   URI, the Contact header field MUST contain a SIPS
    URI as well.\n   For further information on the Contact header field, see Section\n
    \  20.10.\n"
  title: 8.1.1.8 Contact
- contents:
  - "8.1.1.9 Supported and Require\n   If the UAC supports extensions to SIP that
    can be applied by the\n   server to the response, the UAC SHOULD include a Supported
    header\n   field in the request listing the option tags (Section 19.2) for those\n
    \  extensions.\n   The option tags listed MUST only refer to extensions defined
    in\n   standards-track RFCs.  This is to prevent servers from insisting that\n
    \  clients implement non-standard, vendor-defined features in order to\n   receive
    service.  Extensions defined by experimental and\n   informational RFCs are explicitly
    excluded from usage with the\n   Supported header field in a request, since they
    too are often used to\n   document vendor-defined extensions.\n   If the UAC wishes
    to insist that a UAS understand an extension that\n   the UAC will apply to the
    request in order to process the request, it\n   MUST insert a Require header field
    into the request listing the\n   option tag for that extension.  If the UAC wishes
    to apply an\n   extension to the request and insist that any proxies that are\n
    \  traversed understand that extension, it MUST insert a Proxy-Require\n   header
    field into the request listing the option tag for that\n   extension.\n   As with
    the Supported header field, the option tags in the Require\n   and Proxy-Require
    header fields MUST only refer to extensions defined\n   in standards-track RFCs.\n"
  title: 8.1.1.9 Supported and Require
- contents:
  - "8.1.1.10 Additional Message Components\n   After a new request has been created,
    and the header fields described\n   above have been properly constructed, any
    additional optional header\n   fields are added, as are any header fields specific
    to the method.\n   SIP requests MAY contain a MIME-encoded message-body.  Regardless
    of\n   the type of body that a request contains, certain header fields must\n
    \  be formulated to characterize the contents of the body.  For further\n   information
    on these header fields, see Sections 20.11 through 20.15.\n"
  title: 8.1.1.10 Additional Message Components
- contents:
  - "8.1.2 Sending the Request\n   The destination for the request is then computed.
    \ Unless there is\n   local policy specifying otherwise, the destination MUST
    be determined\n   by applying the DNS procedures described in [4] as follows.
    \ If the\n   first element in the route set indicated a strict router (resulting\n
    \  in forming the request as described in Section 12.2.1.1), the\n   procedures
    MUST be applied to the Request-URI of the request.\n   Otherwise, the procedures
    are applied to the first Route header field\n   value in the request (if one exists),
    or to the request's Request-URI\n   if there is no Route header field present.
    \ These procedures yield an\n   ordered set of address, port, and transports to
    attempt.  Independent\n   of which URI is used as input to the procedures of [4],
    if the\n   Request-URI specifies a SIPS resource, the UAC MUST follow the\n   procedures
    of [4] as if the input URI were a SIPS URI.\n   Local policy MAY specify an alternate
    set of destinations to attempt.\n   If the Request-URI contains a SIPS URI, any
    alternate destinations\n   MUST be contacted with TLS.  Beyond that, there are
    no restrictions\n   on the alternate destinations if the request contains no Route
    header\n   field.  This provides a simple alternative to a pre-existing route\n
    \  set as a way to specify an outbound proxy.  However, that approach\n   for
    configuring an outbound proxy is NOT RECOMMENDED; a pre-existing\n   route set
    with a single URI SHOULD be used instead.  If the request\n   contains a Route
    header field, the request SHOULD be sent to the\n   locations derived from its
    topmost value, but MAY be sent to any\n   server that the UA is certain will honor
    the Route and Request-URI\n   policies specified in this document (as opposed
    to those in RFC\n   2543).  In particular, a UAC configured with an outbound proxy
    SHOULD\n   attempt to send the request to the location indicated in the first\n
    \  Route header field value instead of adopting the policy of sending\n   all
    messages to the outbound proxy.\n      This ensures that outbound proxies that
    do not add Record-Route\n      header field values will drop out of the path of
    subsequent\n      requests.  It allows endpoints that cannot resolve the first
    Route\n      URI to delegate that task to an outbound proxy.\n   The UAC SHOULD
    follow the procedures defined in [4] for stateful\n   elements, trying each address
    until a server is contacted.  Each try\n   constitutes a new transaction, and
    therefore each carries a different\n   topmost Via header field value with a new
    branch parameter.\n   Furthermore, the transport value in the Via header field
    is set to\n   whatever transport was determined for the target server.\n"
  title: 8.1.2 Sending the Request
- contents:
  - "8.1.3 Processing Responses\n   Responses are first processed by the transport
    layer and then passed\n   up to the transaction layer.  The transaction layer
    performs its\n   processing and then passes the response up to the TU.  The majority\n
    \  of response processing in the TU is method specific.  However, there\n   are
    some general behaviors independent of the method.\n"
  title: 8.1.3 Processing Responses
- contents:
  - "8.1.3.1 Transaction Layer Errors\n   In some cases, the response returned by
    the transaction layer will\n   not be a SIP message, but rather a transaction
    layer error.  When a\n   timeout error is received from the transaction layer,
    it MUST be\n   treated as if a 408 (Request Timeout) status code has been received.\n
    \  If a fatal transport error is reported by the transport layer\n   (generally,
    due to fatal ICMP errors in UDP or connection failures in\n   TCP), the condition
    MUST be treated as a 503 (Service Unavailable)\n   status code.\n"
  title: 8.1.3.1 Transaction Layer Errors
- contents:
  - "8.1.3.2 Unrecognized Responses\n   A UAC MUST treat any final response it does
    not recognize as being\n   equivalent to the x00 response code of that class,
    and MUST be able\n   to process the x00 response code for all classes.  For example,
    if a\n   UAC receives an unrecognized response code of 431, it can safely\n   assume
    that there was something wrong with its request and treat the\n   response as
    if it had received a 400 (Bad Request) response code.  A\n   UAC MUST treat any
    provisional response different than 100 that it\n   does not recognize as 183
    (Session Progress).  A UAC MUST be able to\n   process 100 and 183 responses.\n"
  title: 8.1.3.2 Unrecognized Responses
- contents:
  - "8.1.3.3 Vias\n   If more than one Via header field value is present in a response,
    the\n   UAC SHOULD discard the message.\n      The presence of additional Via
    header field values that precede\n      the originator of the request suggests
    that the message was\n      misrouted or possibly corrupted.\n"
  title: 8.1.3.3 Vias
- contents:
  - "8.1.3.4 Processing 3xx Responses\n   Upon receipt of a redirection response (for
    example, a 301 response\n   status code), clients SHOULD use the URI(s) in the
    Contact header\n   field to formulate one or more new requests based on the redirected\n
    \  request.  This process is similar to that of a proxy recursing on a\n   3xx
    class response as detailed in Sections 16.5 and 16.6.  A client\n   starts with
    an initial target set containing exactly one URI, the\n   Request-URI of the original
    request.  If a client wishes to formulate\n   new requests based on a 3xx class
    response to that request, it places\n   the URIs to try into the target set.  Subject
    to the restrictions in\n   this specification, a client can choose which Contact
    URIs it places\n   into the target set.  As with proxy recursion, a client processing\n
    \  3xx class responses MUST NOT add any given URI to the target set more\n   than
    once.  If the original request had a SIPS URI in the Request-\n   URI, the client
    MAY choose to recurse to a non-SIPS URI, but SHOULD\n   inform the user of the
    redirection to an insecure URI.\n      Any new request may receive 3xx responses
    themselves containing\n      the original URI as a contact.  Two locations can
    be configured to\n      redirect to each other.  Placing any given URI in the
    target set\n      only once prevents infinite redirection loops.\n   As the target
    set grows, the client MAY generate new requests to the\n   URIs in any order.
    \ A common mechanism is to order the set by the \"q\"\n   parameter value from
    the Contact header field value.  Requests to the\n   URIs MAY be generated serially
    or in parallel.  One approach is to\n   process groups of decreasing q-values
    serially and process the URIs\n   in each q-value group in parallel.  Another
    is to perform only serial\n   processing in decreasing q-value order, arbitrarily
    choosing between\n   contacts of equal q-value.\n   If contacting an address in
    the list results in a failure, as defined\n   in the next paragraph, the element
    moves to the next address in the\n   list, until the list is exhausted.  If the
    list is exhausted, then\n   the request has failed.\n   Failures SHOULD be detected
    through failure response codes (codes\n   greater than 399); for network errors
    the client transaction will\n   report any transport layer failures to the transaction
    user.  Note\n   that some response codes (detailed in 8.1.3.5) indicate that the\n
    \  request can be retried; requests that are reattempted should not be\n   considered
    failures.\n   When a failure for a particular contact address is received, the\n
    \  client SHOULD try the next contact address.  This will involve\n   creating
    a new client transaction to deliver a new request.\n   In order to create a request
    based on a contact address in a 3xx\n   response, a UAC MUST copy the entire URI
    from the target set into the\n   Request-URI, except for the \"method-param\"
    and \"header\" URI\n   parameters (see Section 19.1.1 for a definition of these
    parameters).\n   It uses the \"header\" parameters to create header field values
    for the\n   new request, overwriting header field values associated with the\n
    \  redirected request in accordance with the guidelines in Section\n   19.1.5.\n
    \  Note that in some instances, header fields that have been\n   communicated
    in the contact address may instead append to existing\n   request header fields
    in the original redirected request.  As a\n   general rule, if the header field
    can accept a comma-separated list\n   of values, then the new header field value
    MAY be appended to any\n   existing values in the original redirected request.
    \ If the header\n   field does not accept multiple values, the value in the original\n
    \  redirected request MAY be overwritten by the header field value\n   communicated
    in the contact address.  For example, if a contact\n   address is returned with
    the following value:\n      sip:user@host?Subject=foo&Call-Info=<http://www.foo.com>\n
    \  Then any Subject header field in the original redirected request is\n   overwritten,
    but the HTTP URL is merely appended to any existing\n   Call-Info header field
    values.\n   It is RECOMMENDED that the UAC reuse the same To, From, and Call-ID\n
    \  used in the original redirected request, but the UAC MAY also choose\n   to
    update the Call-ID header field value for new requests, for\n   example.\n   Finally,
    once the new request has been constructed, it is sent using\n   a new client transaction,
    and therefore MUST have a new branch ID in\n   the top Via field as discussed
    in Section 8.1.1.7.\n   In all other respects, requests sent upon receipt of a
    redirect\n   response SHOULD re-use the header fields and bodies of the original\n
    \  request.\n   In some instances, Contact header field values may be cached at
    UAC\n   temporarily or permanently depending on the status code received and\n
    \  the presence of an expiration interval; see Sections 21.3.2 and\n   21.3.3.\n"
  title: 8.1.3.4 Processing 3xx Responses
- contents:
  - "8.1.3.5 Processing 4xx Responses\n   Certain 4xx response codes require specific
    UA processing,\n   independent of the method.\n   If a 401 (Unauthorized) or 407
    (Proxy Authentication Required)\n   response is received, the UAC SHOULD follow
    the authorization\n   procedures of Section 22.2 and Section 22.3 to retry the
    request with\n   credentials.\n   If a 413 (Request Entity Too Large) response
    is received (Section\n   21.4.11), the request contained a body that was longer
    than the UAS\n   was willing to accept.  If possible, the UAC SHOULD retry the\n
    \  request, either omitting the body or using one of a smaller length.\n   If
    a 415 (Unsupported Media Type) response is received (Section\n   21.4.13), the
    request contained media types not supported by the UAS.\n   The UAC SHOULD retry
    sending the request, this time only using\n   content with types listed in the
    Accept header field in the response,\n   with encodings listed in the Accept-Encoding
    header field in the\n   response, and with languages listed in the Accept-Language
    in the\n   response.\n   If a 416 (Unsupported URI Scheme) response is received
    (Section\n   21.4.14), the Request-URI used a URI scheme not supported by the\n
    \  server.  The client SHOULD retry the request, this time, using a SIP\n   URI.\n
    \  If a 420 (Bad Extension) response is received (Section 21.4.15), the\n   request
    contained a Require or Proxy-Require header field listing an\n   option-tag for
    a feature not supported by a proxy or UAS.  The UAC\n   SHOULD retry the request,
    this time omitting any extensions listed in\n   the Unsupported header field in
    the response.\n   In all of the above cases, the request is retried by creating
    a new\n   request with the appropriate modifications.  This new request\n   constitutes
    a new transaction and SHOULD have the same value of the\n   Call-ID, To, and From
    of the previous request, but the CSeq should\n   contain a new sequence number
    that is one higher than the previous.\n   With other 4xx responses, including
    those yet to be defined, a retry\n   may or may not be possible depending on the
    method and the use case.\n"
  title: 8.1.3.5 Processing 4xx Responses
- contents:
  - "8.2 UAS Behavior\n   When a request outside of a dialog is processed by a UAS,
    there is a\n   set of processing rules that are followed, independent of the method.\n
    \  Section 12 gives guidance on how a UAS can tell whether a request is\n   inside
    or outside of a dialog.\n   Note that request processing is atomic.  If a request
    is accepted,\n   all state changes associated with it MUST be performed.  If it
    is\n   rejected, all state changes MUST NOT be performed.\n   UASs SHOULD process
    the requests in the order of the steps that\n   follow in this section (that is,
    starting with authentication, then\n   inspecting the method, the header fields,
    and so on throughout the\n   remainder of this section).\n"
  title: 8.2 UAS Behavior
- contents:
  - "8.2.1 Method Inspection\n   Once a request is authenticated (or authentication
    is skipped), the\n   UAS MUST inspect the method of the request.  If the UAS recognizes\n
    \  but does not support the method of a request, it MUST generate a 405\n   (Method
    Not Allowed) response.  Procedures for generating responses\n   are described
    in Section 8.2.6.  The UAS MUST also add an Allow\n   header field to the 405
    (Method Not Allowed) response.  The Allow\n   header field MUST list the set of
    methods supported by the UAS\n   generating the message.  The Allow header field
    is presented in\n   Section 20.5.\n   If the method is one supported by the server,
    processing continues.\n"
  title: 8.2.1 Method Inspection
- contents:
  - "8.2.2 Header Inspection\n   If a UAS does not understand a header field in a
    request (that is,\n   the header field is not defined in this specification or
    in any\n   supported extension), the server MUST ignore that header field and\n
    \  continue processing the message.  A UAS SHOULD ignore any malformed\n   header
    fields that are not necessary for processing requests.\n"
  title: 8.2.2 Header Inspection
- contents:
  - "8.2.2.1 To and Request-URI\n   The To header field identifies the original recipient
    of the request\n   designated by the user identified in the From field.  The original\n
    \  recipient may or may not be the UAS processing the request, due to\n   call
    forwarding or other proxy operations.  A UAS MAY apply any\n   policy it wishes
    to determine whether to accept requests when the To\n   header field is not the
    identity of the UAS.  However, it is\n   RECOMMENDED that a UAS accept requests
    even if they do not recognize\n   the URI scheme (for example, a tel: URI) in
    the To header field, or\n   if the To header field does not address a known or
    current user of\n   this UAS.  If, on the other hand, the UAS decides to reject
    the\n   request, it SHOULD generate a response with a 403 (Forbidden) status\n
    \  code and pass it to the server transaction for transmission.\n   However, the
    Request-URI identifies the UAS that is to process the\n   request.  If the Request-URI
    uses a scheme not supported by the UAS,\n   it SHOULD reject the request with
    a 416 (Unsupported URI Scheme)\n   response.  If the Request-URI does not identify
    an address that the\n   UAS is willing to accept requests for, it SHOULD reject
    the request\n   with a 404 (Not Found) response.  Typically, a UA that uses the\n
    \  REGISTER method to bind its address-of-record to a specific contact\n   address
    will see requests whose Request-URI equals that contact\n   address.  Other potential
    sources of received Request-URIs include\n   the Contact header fields of requests
    and responses sent by the UA\n   that establish or refresh dialogs.\n"
  title: 8.2.2.1 To and Request-URI
- contents:
  - "8.2.2.2 Merged Requests\n   If the request has no tag in the To header field,
    the UAS core MUST\n   check the request against ongoing transactions.  If the
    From tag,\n   Call-ID, and CSeq exactly match those associated with an ongoing\n
    \  transaction, but the request does not match that transaction (based\n   on
    the matching rules in Section 17.2.3), the UAS core SHOULD\n   generate a 482
    (Loop Detected) response and pass it to the server\n   transaction.\n      The
    same request has arrived at the UAS more than once, following\n      different
    paths, most likely due to forking.  The UAS processes\n      the first such request
    received and responds with a 482 (Loop\n      Detected) to the rest of them.\n"
  title: 8.2.2.2 Merged Requests
- contents:
  - "8.2.2.3 Require\n   Assuming the UAS decides that it is the proper element to
    process the\n   request, it examines the Require header field, if present.\n   The
    Require header field is used by a UAC to tell a UAS about SIP\n   extensions that
    the UAC expects the UAS to support in order to\n   process the request properly.
    \ Its format is described in Section\n   20.32.  If a UAS does not understand
    an option-tag listed in a\n   Require header field, it MUST respond by generating
    a response with\n   status code 420 (Bad Extension).  The UAS MUST add an Unsupported\n
    \  header field, and list in it those options it does not understand\n   amongst
    those in the Require header field of the request.\n   Note that Require and Proxy-Require
    MUST NOT be used in a SIP CANCEL\n   request, or in an ACK request sent for a
    non-2xx response.  These\n   header fields MUST be ignored if they are present
    in these requests.\n   An ACK request for a 2xx response MUST contain only those
    Require and\n   Proxy-Require values that were present in the initial request.\n
    \  Example:\n      UAC->UAS:   INVITE sip:watson@bell-telephone.com SIP/2.0\n
    \                 Require: 100rel\n      UAS->UAC:   SIP/2.0 420 Bad Extension\n
    \                 Unsupported: 100rel\n      This behavior ensures that the client-server
    interaction will\n      proceed without delay when all options are understood
    by both\n      sides, and only slow down if options are not understood (as in
    the\n      example above).  For a well-matched client-server pair, the\n      interaction
    proceeds quickly, saving a round-trip often required\n      by negotiation mechanisms.
    \ In addition, it also removes ambiguity\n      when the client requires features
    that the server does not\n      understand.  Some features, such as call handling
    fields, are only\n      of interest to end systems.\n"
  title: 8.2.2.3 Require
- contents:
  - "8.2.3 Content Processing\n   Assuming the UAS understands any extensions required
    by the client,\n   the UAS examines the body of the message, and the header fields
    that\n   describe it.  If there are any bodies whose type (indicated by the\n
    \  Content-Type), language (indicated by the Content-Language) or\n   encoding
    (indicated by the Content-Encoding) are not understood, and\n   that body part
    is not optional (as indicated by the Content-\n   Disposition header field), the
    UAS MUST reject the request with a 415\n   (Unsupported Media Type) response.
    \ The response MUST contain an\n   Accept header field listing the types of all
    bodies it understands,\n   in the event the request contained bodies of types
    not supported by\n   the UAS.  If the request contained content encodings not
    understood\n   by the UAS, the response MUST contain an Accept-Encoding header
    field\n   listing the encodings understood by the UAS.  If the request\n   contained
    content with languages not understood by the UAS, the\n   response MUST contain
    an Accept-Language header field indicating the\n   languages understood by the
    UAS.  Beyond these checks, body handling\n   depends on the method and type.  For
    further information on the\n   processing of content-specific header fields, see
    Section 7.4 as well\n   as Section 20.11 through 20.15.\n"
  title: 8.2.3 Content Processing
- contents:
  - "8.2.4 Applying Extensions\n   A UAS that wishes to apply some extension when
    generating the\n   response MUST NOT do so unless support for that extension is\n
    \  indicated in the Supported header field in the request.  If the\n   desired
    extension is not supported, the server SHOULD rely only on\n   baseline SIP and
    any other extensions supported by the client.  In\n   rare circumstances, where
    the server cannot process the request\n   without the extension, the server MAY
    send a 421 (Extension Required)\n   response.  This response indicates that the
    proper response cannot be\n   generated without support of a specific extension.
    \ The needed\n   extension(s) MUST be included in a Require header field in the\n
    \  response.  This behavior is NOT RECOMMENDED, as it will generally\n   break
    interoperability.\n   Any extensions applied to a non-421 response MUST be listed
    in a\n   Require header field included in the response.  Of course, the server\n
    \  MUST NOT apply extensions not listed in the Supported header field in\n   the
    request.  As a result of this, the Require header field in a\n   response will
    only ever contain option tags defined in standards-\n   track RFCs.\n"
  title: 8.2.4 Applying Extensions
- contents:
  - "8.2.5 Processing the Request\n   Assuming all of the checks in the previous subsections
    are passed,\n   the UAS processing becomes method-specific.  Section 10 covers
    the\n   REGISTER request, Section 11 covers the OPTIONS request, Section 13\n
    \  covers the INVITE request, and Section 15 covers the BYE request.\n"
  title: 8.2.5 Processing the Request
- contents:
  - "8.2.6 Generating the Response\n   When a UAS wishes to construct a response to
    a request, it follows\n   the general procedures detailed in the following subsections.\n
    \  Additional behaviors specific to the response code in question, which\n   are
    not detailed in this section, may also be required.\n   Once all procedures associated
    with the creation of a response have\n   been completed, the UAS hands the response
    back to the server\n   transaction from which it received the request.\n"
  title: 8.2.6 Generating the Response
- contents:
  - "8.2.6.1 Sending a Provisional Response\n   One largely non-method-specific guideline
    for the generation of\n   responses is that UASs SHOULD NOT issue a provisional
    response for a\n   non-INVITE request.  Rather, UASs SHOULD generate a final response
    to\n   a non-INVITE request as soon as possible.\n   When a 100 (Trying) response
    is generated, any Timestamp header field\n   present in the request MUST be copied
    into this 100 (Trying)\n   response.  If there is a delay in generating the response,
    the UAS\n   SHOULD add a delay value into the Timestamp value in the response.\n
    \  This value MUST contain the difference between the time of sending of\n   the
    response and receipt of the request, measured in seconds.\n"
  title: 8.2.6.1 Sending a Provisional Response
- contents:
  - "8.2.6.2 Headers and Tags\n   The From field of the response MUST equal the From
    header field of\n   the request.  The Call-ID header field of the response MUST
    equal the\n   Call-ID header field of the request.  The CSeq header field of the\n
    \  response MUST equal the CSeq field of the request.  The Via header\n   field
    values in the response MUST equal the Via header field values\n   in the request
    and MUST maintain the same ordering.\n   If a request contained a To tag in the
    request, the To header field\n   in the response MUST equal that of the request.
    \ However, if the To\n   header field in the request did not contain a tag, the
    URI in the To\n   header field in the response MUST equal the URI in the To header\n
    \  field; additionally, the UAS MUST add a tag to the To header field in\n   the
    response (with the exception of the 100 (Trying) response, in\n   which a tag
    MAY be present).  This serves to identify the UAS that is\n   responding, possibly
    resulting in a component of a dialog ID.  The\n   same tag MUST be used for all
    responses to that request, both final\n   and provisional (again excepting the
    100 (Trying)).  Procedures for\n   the generation of tags are defined in Section
    19.3.\n"
  title: 8.2.6.2 Headers and Tags
- contents:
  - "8.2.7 Stateless UAS Behavior\n   A stateless UAS is a UAS that does not maintain
    transaction state.\n   It replies to requests normally, but discards any state
    that would\n   ordinarily be retained by a UAS after a response has been sent.
    \ If a\n   stateless UAS receives a retransmission of a request, it regenerates\n
    \  the response and resends it, just as if it were replying to the first\n   instance
    of the request. A UAS cannot be stateless unless the request\n   processing for
    that method would always result in the same response\n   if the requests are identical.
    This rules out stateless registrars,\n   for example.  Stateless UASs do not use
    a transaction layer; they\n   receive requests directly from the transport layer
    and send responses\n   directly to the transport layer.\n   The stateless UAS
    role is needed primarily to handle unauthenticated\n   requests for which a challenge
    response is issued.  If\n   unauthenticated requests were handled statefully,
    then malicious\n   floods of unauthenticated requests could create massive amounts
    of\n   transaction state that might slow or completely halt call processing\n
    \  in a UAS, effectively creating a denial of service condition; for\n   more
    information see Section 26.1.5.\n   The most important behaviors of a stateless
    UAS are the following:\n      o  A stateless UAS MUST NOT send provisional (1xx)
    responses.\n      o  A stateless UAS MUST NOT retransmit responses.\n      o  A
    stateless UAS MUST ignore ACK requests.\n      o  A stateless UAS MUST ignore
    CANCEL requests.\n      o  To header tags MUST be generated for responses in a
    stateless\n         manner - in a manner that will generate the same tag for the\n
    \        same request consistently.  For information on tag construction\n         see
    Section 19.3.\n   In all other respects, a stateless UAS behaves in the same manner
    as\n   a stateful UAS.  A UAS can operate in either a stateful or stateless\n
    \  mode for each new request.\n"
  title: 8.2.7 Stateless UAS Behavior
- contents:
  - "8.3 Redirect Servers\n   In some architectures it may be desirable to reduce
    the processing\n   load on proxy servers that are responsible for routing requests,
    and\n   improve signaling path robustness, by relying on redirection.\n   Redirection
    allows servers to push routing information for a request\n   back in a response
    to the client, thereby taking themselves out of\n   the loop of further messaging
    for this transaction while still aiding\n   in locating the target of the request.
    \ When the originator of the\n   request receives the redirection, it will send
    a new request based on\n   the URI(s) it has received.  By propagating URIs from
    the core of the\n   network to its edges, redirection allows for considerable
    network\n   scalability.\n   A redirect server is logically constituted of a server
    transaction\n   layer and a transaction user that has access to a location service
    of\n   some kind (see Section 10 for more on registrars and location\n   services).
    \ This location service is effectively a database\n   containing mappings between
    a single URI and a set of one or more\n   alternative locations at which the target
    of that URI can be found.\n   A redirect server does not issue any SIP requests
    of its own.  After\n   receiving a request other than CANCEL, the server either
    refuses the\n   request or gathers the list of alternative locations from the\n
    \  location service and returns a final response of class 3xx.  For\n   well-formed
    CANCEL requests, it SHOULD return a 2xx response.  This\n   response ends the
    SIP transaction.  The redirect server maintains\n   transaction state for an entire
    SIP transaction.  It is the\n   responsibility of clients to detect forwarding
    loops between redirect\n   servers.\n   When a redirect server returns a 3xx response
    to a request, it\n   populates the list of (one or more) alternative locations
    into the\n   Contact header field.  An \"expires\" parameter to the Contact header\n
    \  field values may also be supplied to indicate the lifetime of the\n   Contact
    data.\n   The Contact header field contains URIs giving the new locations or\n
    \  user names to try, or may simply specify additional transport\n   parameters.
    \ A 301 (Moved Permanently) or 302 (Moved Temporarily)\n   response may also give
    the same location and username that was\n   targeted by the initial request but
    specify additional transport\n   parameters such as a different server or multicast
    address to try, or\n   a change of SIP transport from UDP to TCP or vice versa.\n
    \  However, redirect servers MUST NOT redirect a request to a URI equal\n   to
    the one in the Request-URI; instead, provided that the URI does\n   not point
    to itself, the server MAY proxy the request to the\n   destination URI, or MAY
    reject it with a 404.\n      If a client is using an outbound proxy, and that
    proxy actually\n      redirects requests, a potential arises for infinite redirection\n
    \     loops.\n   Note that a Contact header field value MAY also refer to a different\n
    \  resource than the one originally called.  For example, a SIP call\n   connected
    to PSTN gateway may need to deliver a special informational\n   announcement such
    as \"The number you have dialed has been changed.\"\n   A Contact response header
    field can contain any suitable URI\n   indicating where the called party can be
    reached, not limited to SIP\n   URIs.  For example, it could contain URIs for
    phones, fax, or irc (if\n   they were defined) or a mailto:  (RFC 2368 [32]) URL.
    \ Section 26.4.4\n   discusses implications and limitations of redirecting a SIPS
    URI to a\n   non-SIPS URI.\n   The \"expires\" parameter of a Contact header field
    value indicates how\n   long the URI is valid.  The value of the parameter is
    a number\n   indicating seconds.  If this parameter is not provided, the value
    of\n   the Expires header field determines how long the URI is valid.\n   Malformed
    values SHOULD be treated as equivalent to 3600.\n      This provides a modest
    level of backwards compatibility with RFC\n      2543, which allowed absolute
    times in this header field.  If an\n      absolute time is received, it will be
    treated as malformed, and\n      then default to 3600.\n   Redirect servers MUST
    ignore features that are not understood\n   (including unrecognized header fields,
    any unknown option tags in\n   Require, or even method names) and proceed with
    the redirection of\n   the request in question.\n"
  title: 8.3 Redirect Servers
- contents:
  - "9 Canceling a Request\n   The previous section has discussed general UA behavior
    for generating\n   requests and processing responses for requests of all methods.
    \ In\n   this section, we discuss a general purpose method, called CANCEL.\n   The
    CANCEL request, as the name implies, is used to cancel a previous\n   request
    sent by a client.  Specifically, it asks the UAS to cease\n   processing the request
    and to generate an error response to that\n   request.  CANCEL has no effect on
    a request to which a UAS has\n   already given a final response.  Because of this,
    it is most useful\n   to CANCEL requests to which it can take a server long time
    to\n   respond.  For this reason, CANCEL is best for INVITE requests, which\n
    \  can take a long time to generate a response.  In that usage, a UAS\n   that
    receives a CANCEL request for an INVITE, but has not yet sent a\n   final response,
    would \"stop ringing\", and then respond to the INVITE\n   with a specific error
    response (a 487).\n   CANCEL requests can be constructed and sent by both proxies
    and user\n   agent clients.  Section 15 discusses under what conditions a UAC\n
    \  would CANCEL an INVITE request, and Section 16.10 discusses proxy\n   usage
    of CANCEL.\n   A stateful proxy responds to a CANCEL, rather than simply forwarding\n
    \  a response it would receive from a downstream element.  For that\n   reason,
    CANCEL is referred to as a \"hop-by-hop\" request, since it is\n   responded to
    at each stateful proxy hop.\n"
  title: 9 Canceling a Request
- contents:
  - "9.1 Client Behavior\n   A CANCEL request SHOULD NOT be sent to cancel a request
    other than\n   INVITE.\n      Since requests other than INVITE are responded to
    immediately,\n      sending a CANCEL for a non-INVITE request would always create
    a\n      race condition.\n   The following procedures are used to construct a
    CANCEL request.  The\n   Request-URI, Call-ID, To, the numeric part of CSeq, and
    From header\n   fields in the CANCEL request MUST be identical to those in the\n
    \  request being cancelled, including tags.  A CANCEL constructed by a\n   client
    MUST have only a single Via header field value matching the\n   top Via value
    in the request being cancelled.  Using the same values\n   for these header fields
    allows the CANCEL to be matched with the\n   request it cancels (Section 9.2 indicates
    how such matching occurs).\n   However, the method part of the CSeq header field
    MUST have a value\n   of CANCEL.  This allows it to be identified and processed
    as a\n   transaction in its own right (See Section 17).\n   If the request being
    cancelled contains a Route header field, the\n   CANCEL request MUST include that
    Route header field's values.\n      This is needed so that stateless proxies are
    able to route CANCEL\n      requests properly.\n   The CANCEL request MUST NOT
    contain any Require or Proxy-Require\n   header fields.\n   Once the CANCEL is
    constructed, the client SHOULD check whether it\n   has received any response
    (provisional or final) for the request\n   being cancelled (herein referred to
    as the \"original request\").\n   If no provisional response has been received,
    the CANCEL request MUST\n   NOT be sent; rather, the client MUST wait for the
    arrival of a\n   provisional response before sending the request.  If the original\n
    \  request has generated a final response, the CANCEL SHOULD NOT be\n   sent,
    as it is an effective no-op, since CANCEL has no effect on\n   requests that have
    already generated a final response.  When the\n   client decides to send the CANCEL,
    it creates a client transaction\n   for the CANCEL and passes it the CANCEL request
    along with the\n   destination address, port, and transport.  The destination
    address,\n   port, and transport for the CANCEL MUST be identical to those used
    to\n   send the original request.\n      If it was allowed to send the CANCEL
    before receiving a response\n      for the previous request, the server could
    receive the CANCEL\n      before the original request.\n   Note that both the
    transaction corresponding to the original request\n   and the CANCEL transaction
    will complete independently.  However, a\n   UAC canceling a request cannot rely
    on receiving a 487 (Request\n   Terminated) response for the original request,
    as an RFC 2543-\n   compliant UAS will not generate such a response.  If there
    is no\n   final response for the original request in 64*T1 seconds (T1 is\n   defined
    in Section 17.1.1.1), the client SHOULD then consider the\n   original transaction
    cancelled and SHOULD destroy the client\n   transaction handling the original
    request.\n"
  title: 9.1 Client Behavior
- contents:
  - "9.2 Server Behavior\n   The CANCEL method requests that the TU at the server
    side cancel a\n   pending transaction.  The TU determines the transaction to be\n
    \  cancelled by taking the CANCEL request, and then assuming that the\n   request
    method is anything but CANCEL or ACK and applying the\n   transaction matching
    procedures of Section 17.2.3.  The matching\n   transaction is the one to be cancelled.\n
    \  The processing of a CANCEL request at a server depends on the type of\n   server.
    \ A stateless proxy will forward it, a stateful proxy might\n   respond to it
    and generate some CANCEL requests of its own, and a UAS\n   will respond to it.
    \ See Section 16.10 for proxy treatment of CANCEL.\n   A UAS first processes the
    CANCEL request according to the general UAS\n   processing described in Section
    8.2.  However, since CANCEL requests\n   are hop-by-hop and cannot be resubmitted,
    they cannot be challenged\n   by the server in order to get proper credentials
    in an Authorization\n   header field.  Note also that CANCEL requests do not contain
    a\n   Require header field.\n   If the UAS did not find a matching transaction
    for the CANCEL\n   according to the procedure above, it SHOULD respond to the
    CANCEL\n   with a 481 (Call Leg/Transaction Does Not Exist).  If the transaction\n
    \  for the original request still exists, the behavior of the UAS on\n   receiving
    a CANCEL request depends on whether it has already sent a\n   final response for
    the original request.  If it has, the CANCEL\n   request has no effect on the
    processing of the original request, no\n   effect on any session state, and no
    effect on the responses generated\n   for the original request.  If the UAS has
    not issued a final response\n   for the original request, its behavior depends
    on the method of the\n   original request.  If the original request was an INVITE,
    the UAS\n   SHOULD immediately respond to the INVITE with a 487 (Request\n   Terminated).
    \ A CANCEL request has no impact on the processing of\n   transactions with any
    other method defined in this specification.\n   Regardless of the method of the
    original request, as long as the\n   CANCEL matched an existing transaction, the
    UAS answers the CANCEL\n   request itself with a 200 (OK) response.  This response
    is\n   constructed following the procedures described in Section 8.2.6\n   noting
    that the To tag of the response to the CANCEL and the To tag\n   in the response
    to the original request SHOULD be the same.  The\n   response to CANCEL is passed
    to the server transaction for\n   transmission.\n"
  title: 9.2 Server Behavior
- contents:
  - '10 Registrations

    '
  title: 10 Registrations
- contents:
  - "10.1 Overview\n   SIP offers a discovery capability.  If a user wants to initiate
    a\n   session with another user, SIP must discover the current host(s) at\n   which
    the destination user is reachable.  This discovery process is\n   frequently accomplished
    by SIP network elements such as proxy servers\n   and redirect servers which are
    responsible for receiving a request,\n   determining where to send it based on
    knowledge of the location of\n   the user, and then sending it there.  To do this,
    SIP network\n   elements consult an abstract service known as a location service,\n
    \  which provides address bindings for a particular domain.  These\n   address
    bindings map an incoming SIP or SIPS URI, sip:bob@biloxi.com,\n   for example,
    to one or more URIs that are somehow \"closer\" to the\n   desired user, sip:bob@engineering.biloxi.com,
    for example.\n   Ultimately, a proxy will consult a location service that maps
    a\n   received URI to the user agent(s) at which the desired recipient is\n   currently
    residing.\n   Registration creates bindings in a location service for a particular\n
    \  domain that associates an address-of-record URI with one or more\n   contact
    addresses.  Thus, when a proxy for that domain receives a\n   request whose Request-URI
    matches the address-of-record, the proxy\n   will forward the request to the contact
    addresses registered to that\n   address-of-record.  Generally, it only makes
    sense to register an\n   address-of-record at a domain's location service when
    requests for\n   that address-of-record would be routed to that domain.  In most\n
    \  cases, this means that the domain of the registration will need to\n   match
    the domain in the URI of the address-of-record.\n   There are many ways by which
    the contents of the location service can\n   be established.  One way is administratively.
    \ In the above example,\n   Bob is known to be a member of the engineering department
    through\n   access to a corporate database.  However, SIP provides a mechanism\n
    \  for a UA to create a binding explicitly.  This mechanism is known as\n   registration.\n
    \  Registration entails sending a REGISTER request to a special type of\n   UAS
    known as a registrar.  A registrar acts as the front end to the\n   location service
    for a domain, reading and writing mappings based on\n   the contents of REGISTER
    requests.  This location service is then\n   typically consulted by a proxy server
    that is responsible for routing\n   requests for that domain.\n   An illustration
    of the overall registration process is given in\n   Figure 2.  Note that the registrar
    and proxy server are logical roles\n   that can be played by a single device in
    a network; for purposes of\n   clarity the two are separated in this illustration.
    \ Also note that\n   UAs may send requests through a proxy server in order to
    reach a\n   registrar if the two are separate elements.\n   SIP does not mandate
    a particular mechanism for implementing the\n   location service.  The only requirement
    is that a registrar for some\n   domain MUST be able to read and write data to
    the location service,\n   and a proxy or a redirect server for that domain MUST
    be capable of\n   reading that same data.  A registrar MAY be co-located with
    a\n   particular SIP proxy server for the same domain.\n"
  title: 10.1 Overview
- contents:
  - "10.2 Constructing the REGISTER Request\n   REGISTER requests add, remove, and
    query bindings.  A REGISTER\n   request can add a new binding between an address-of-record
    and one or\n   more contact addresses.  Registration on behalf of a particular\n
    \  address-of-record can be performed by a suitably authorized third\n   party.
    \ A client can also remove previous bindings or query to\n   determine which bindings
    are currently in place for an address-of-\n   record.\n   Except as noted, the
    construction of the REGISTER request and the\n   behavior of clients sending a
    REGISTER request is identical to the\n   general UAC behavior described in Section
    8.1 and Section 17.1.\n   A REGISTER request does not establish a dialog.  A UAC
    MAY include a\n   Route header field in a REGISTER request based on a pre-existing\n
    \  route set as described in Section 8.1.  The Record-Route header field\n   has
    no meaning in REGISTER requests or responses, and MUST be ignored\n   if present.
    \ In particular, the UAC MUST NOT create a new route set\n   based on the presence
    or absence of a Record-Route header field in\n   any response to a REGISTER request.\n
    \  The following header fields, except Contact, MUST be included in a\n   REGISTER
    request.  A Contact header field MAY be included:\n      Request-URI: The Request-URI
    names the domain of the location\n           service for which the registration
    is meant (for example,\n           \"sip:chicago.com\").  The \"userinfo\" and
    \"@\" components of the\n           SIP URI MUST NOT be present.\n      To: The
    To header field contains the address of record whose\n           registration
    is to be created, queried, or modified.  The To\n           header field and the
    Request-URI field typically differ, as\n           the former contains a user
    name.  This address-of-record MUST\n           be a SIP URI or SIPS URI.\n      From:
    The From header field contains the address-of-record of the\n           person
    responsible for the registration.  The value is the\n           same as the To
    header field unless the request is a third-\n           party registration.\n
    \     Call-ID: All registrations from a UAC SHOULD use the same Call-ID\n           header
    field value for registrations sent to a particular\n           registrar.\n           If
    the same client were to use different Call-ID values, a\n           registrar
    could not detect whether a delayed REGISTER request\n           might have arrived
    out of order.\n      CSeq: The CSeq value guarantees proper ordering of REGISTER\n
    \          requests.  A UA MUST increment the CSeq value by one for each\n           REGISTER
    request with the same Call-ID.\n      Contact: REGISTER requests MAY contain a
    Contact header field with\n           zero or more values containing address bindings.\n
    \  UAs MUST NOT send a new registration (that is, containing new Contact\n   header
    field values, as opposed to a retransmission) until they have\n   received a final
    response from the registrar for the previous one or\n   the previous REGISTER
    request has timed out.\n                                                 bob\n
    \                                              +----+\n                                               |
    UA |\n                                               |    |\n                                               +----+\n
    \                                                 |\n                                                  |3)INVITE\n
    \                                                 |   carol@chicago.com\n         chicago.com
    \       +--------+            V\n         +---------+ 2)Store|Location|4)Query
    +-----+\n         |Registrar|=======>| Service|<=======|Proxy|sip.chicago.com\n
    \        +---------+        +--------+=======>+-----+\n               A                      5)Resp
    \     |\n               |                                  |\n               |
    \                                 |\n     1)REGISTER|                                  |\n
    \              |                                  |\n            +----+                                |\n
    \           | UA |<-------------------------------+\n   cube2214a|    |                            6)INVITE\n
    \           +----+                    carol@cube2214a.chicago.com\n             carol\n
    \                     Figure 2: REGISTER example\n      The following Contact
    header parameters have a special meaning in\n           REGISTER requests:\n      action:
    The \"action\" parameter from RFC 2543 has been deprecated.\n           UACs SHOULD
    NOT use the \"action\" parameter.\n      expires: The \"expires\" parameter indicates
    how long the UA would\n           like the binding to be valid.  The value is
    a number\n           indicating seconds.  If this parameter is not provided, the\n
    \          value of the Expires header field is used instead.\n           Implementations
    MAY treat values larger than 2**32-1\n           (4294967295 seconds or 136 years)
    as equivalent to 2**32-1.\n           Malformed values SHOULD be treated as equivalent
    to 3600.\n"
  title: 10.2 Constructing the REGISTER Request
- contents:
  - "10.2.1 Adding Bindings\n   The REGISTER request sent to a registrar includes
    the contact\n   address(es) to which SIP requests for the address-of-record should
    be\n   forwarded.  The address-of-record is included in the To header field\n
    \  of the REGISTER request.\n   The Contact header field values of the request
    typically consist of\n   SIP or SIPS URIs that identify particular SIP endpoints
    (for example,\n   \"sip:carol@cube2214a.chicago.com\"), but they MAY use any URI
    scheme.\n   A SIP UA can choose to register telephone numbers (with the tel URL,\n
    \  RFC 2806 [9]) or email addresses (with a mailto URL, RFC 2368 [32])\n   as
    Contacts for an address-of-record, for example.\n   For example, Carol, with address-of-record
    \"sip:carol@chicago.com\",\n   would register with the SIP registrar of the domain
    chicago.com.  Her\n   registrations would then be used by a proxy server in the
    chicago.com\n   domain to route requests for Carol's address-of-record to her
    SIP\n   endpoint.\n   Once a client has established bindings at a registrar, it
    MAY send\n   subsequent registrations containing new bindings or modifications
    to\n   existing bindings as necessary.  The 2xx response to the REGISTER\n   request
    will contain, in a Contact header field, a complete list of\n   bindings that
    have been registered for this address-of-record at this\n   registrar.\n   If
    the address-of-record in the To header field of a REGISTER request\n   is a SIPS
    URI, then any Contact header field values in the request\n   SHOULD also be SIPS
    URIs.  Clients should only register non-SIPS URIs\n   under a SIPS address-of-record
    when the security of the resource\n   represented by the contact address is guaranteed
    by other means.\n   This may be applicable to URIs that invoke protocols other
    than SIP,\n   or SIP devices secured by protocols other than TLS.\n   Registrations
    do not need to update all bindings.  Typically, a UA\n   only updates its own
    contact addresses.\n"
  title: 10.2.1 Adding Bindings
- contents:
  - "10.2.1.1 Setting the Expiration Interval of Contact Addresses\n   When a client
    sends a REGISTER request, it MAY suggest an expiration\n   interval that indicates
    how long the client would like the\n   registration to be valid.  (As described
    in Section 10.3, the\n   registrar selects the actual time interval based on its
    local\n   policy.)\n   There are two ways in which a client can suggest an expiration\n
    \  interval for a binding: through an Expires header field or an\n   \"expires\"
    Contact header parameter.  The latter allows expiration\n   intervals to be suggested
    on a per-binding basis when more than one\n   binding is given in a single REGISTER
    request, whereas the former\n   suggests an expiration interval for all Contact
    header field values\n   that do not contain the \"expires\" parameter.\n   If
    neither mechanism for expressing a suggested expiration time is\n   present in
    a REGISTER, the client is indicating its desire for the\n   server to choose.\n"
  title: 10.2.1.1 Setting the Expiration Interval of Contact Addresses
- contents:
  - "10.2.1.2 Preferences among Contact Addresses\n   If more than one Contact is
    sent in a REGISTER request, the\n   registering UA intends to associate all of
    the URIs in these Contact\n   header field values with the address-of-record present
    in the To\n   field.  This list can be prioritized with the \"q\" parameter in
    the\n   Contact header field.  The \"q\" parameter indicates a relative\n   preference
    for the particular Contact header field value compared to\n   other bindings for
    this address-of-record.  Section 16.6 describes\n   how a proxy server uses this
    preference indication.\n"
  title: 10.2.1.2 Preferences among Contact Addresses
- contents:
  - "10.2.2 Removing Bindings\n   Registrations are soft state and expire unless refreshed,
    but can\n   also be explicitly removed.  A client can attempt to influence the\n
    \  expiration interval selected by the registrar as described in Section\n   10.2.1.
    \ A UA requests the immediate removal of a binding by\n   specifying an expiration
    interval of \"0\" for that contact address in\n   a REGISTER request.  UAs SHOULD
    support this mechanism so that\n   bindings can be removed before their expiration
    interval has passed.\n   The REGISTER-specific Contact header field value of \"*\"
    applies to\n   all registrations, but it MUST NOT be used unless the Expires header\n
    \  field is present with a value of \"0\".\n      Use of the \"*\" Contact header
    field value allows a registering UA\n      to remove all bindings associated with
    an address-of-record\n      without knowing their precise values.\n"
  title: 10.2.2 Removing Bindings
- contents:
  - "10.2.3 Fetching Bindings\n   A success response to any REGISTER request contains
    the complete list\n   of existing bindings, regardless of whether the request
    contained a\n   Contact header field.  If no Contact header field is present in
    a\n   REGISTER request, the list of bindings is left unchanged.\n"
  title: 10.2.3 Fetching Bindings
- contents:
  - "10.2.4 Refreshing Bindings\n   Each UA is responsible for refreshing the bindings
    that it has\n   previously established.  A UA SHOULD NOT refresh bindings set
    up by\n   other UAs.\n   The 200 (OK) response from the registrar contains a list
    of Contact\n   fields enumerating all current bindings.  The UA compares each\n
    \  contact address to see if it created the contact address, using\n   comparison
    rules in Section 19.1.4.  If so, it updates the expiration\n   time interval according
    to the expires parameter or, if absent, the\n   Expires field value.  The UA then
    issues a REGISTER request for each\n   of its bindings before the expiration interval
    has elapsed.  It MAY\n   combine several updates into one REGISTER request.\n
    \  A UA SHOULD use the same Call-ID for all registrations during a\n   single
    boot cycle.  Registration refreshes SHOULD be sent to the same\n   network address
    as the original registration, unless redirected.\n"
  title: 10.2.4 Refreshing Bindings
- contents:
  - "10.2.5 Setting the Internal Clock\n   If the response for a REGISTER request
    contains a Date header field,\n   the client MAY use this header field to learn
    the current time in\n   order to set any internal clocks.\n"
  title: 10.2.5 Setting the Internal Clock
- contents:
  - "10.2.6 Discovering a Registrar\n   UAs can use three ways to determine the address
    to which to send\n   registrations:  by configuration, using the address-of-record,
    and\n   multicast.  A UA can be configured, in ways beyond the scope of this\n
    \  specification, with a registrar address.  If there is no configured\n   registrar
    address, the UA SHOULD use the host part of the address-\n   of-record as the
    Request-URI and address the request there, using the\n   normal SIP server location
    mechanisms [4].  For example, the UA for\n   the user \"sip:carol@chicago.com\"
    addresses the REGISTER request to\n   \"sip:chicago.com\".\n   Finally, a UA can
    be configured to use multicast.  Multicast\n   registrations are addressed to
    the well-known \"all SIP servers\"\n   multicast address \"sip.mcast.net\" (224.0.1.75
    for IPv4).  No well-\n   known IPv6 multicast address has been allocated; such
    an allocation\n   will be documented separately when needed.  SIP UAs MAY listen
    to\n   that address and use it to become aware of the location of other\n   local
    users (see [33]); however, they do not respond to the request.\n      Multicast
    registration may be inappropriate in some environments,\n      for example, if
    multiple businesses share the same local area\n      network.\n"
  title: 10.2.6 Discovering a Registrar
- contents:
  - "10.2.7 Transmitting a Request\n   Once the REGISTER method has been constructed,
    and the destination of\n   the message identified, UACs follow the procedures
    described in\n   Section 8.1.2 to hand off the REGISTER to the transaction layer.\n
    \  If the transaction layer returns a timeout error because the REGISTER\n   yielded
    no response, the UAC SHOULD NOT immediately re-attempt a\n   registration to the
    same registrar.\n      An immediate re-attempt is likely to also timeout.  Waiting
    some\n      reasonable time interval for the conditions causing the timeout to\n
    \     be corrected reduces unnecessary load on the network.  No specific\n      interval
    is mandated.\n"
  title: 10.2.7 Transmitting a Request
- contents:
  - "10.2.8 Error Responses\n   If a UA receives a 423 (Interval Too Brief) response,
    it MAY retry\n   the registration after making the expiration interval of all
    contact\n   addresses in the REGISTER request equal to or greater than the\n   expiration
    interval within the Min-Expires header field of the 423\n   (Interval Too Brief)
    response.\n"
  title: 10.2.8 Error Responses
- contents:
  - "10.3 Processing REGISTER Requests\n   A registrar is a UAS that responds to REGISTER
    requests and maintains\n   a list of bindings that are accessible to proxy servers
    and redirect\n   servers within its administrative domain.  A registrar handles\n
    \  requests according to Section 8.2 and Section 17.2, but it accepts\n   only
    REGISTER requests.  A registrar MUST not generate 6xx responses.\n   A registrar
    MAY redirect REGISTER requests as appropriate.  One\n   common usage would be
    for a registrar listening on a multicast\n   interface to redirect multicast REGISTER
    requests to its own unicast\n   interface with a 302 (Moved Temporarily) response.\n
    \  Registrars MUST ignore the Record-Route header field if it is\n   included
    in a REGISTER request.  Registrars MUST NOT include a\n   Record-Route header
    field in any response to a REGISTER request.\n      A registrar might receive
    a request that traversed a proxy which\n      treats REGISTER as an unknown request
    and which added a Record-\n      Route header field value.\n   A registrar has
    to know (for example, through configuration) the set\n   of domain(s) for which
    it maintains bindings.  REGISTER requests MUST\n   be processed by a registrar
    in the order that they are received.\n   REGISTER requests MUST also be processed
    atomically, meaning that a\n   particular REGISTER request is either processed
    completely or not at\n   all.  Each REGISTER message MUST be processed independently
    of any\n   other registration or binding changes.\n   When receiving a REGISTER
    request, a registrar follows these steps:\n      1. The registrar inspects the
    Request-URI to determine whether it\n         has access to bindings for the domain
    identified in the\n         Request-URI.  If not, and if the server also acts
    as a proxy\n         server, the server SHOULD forward the request to the addressed\n
    \        domain, following the general behavior for proxying messages\n         described
    in Section 16.\n      2. To guarantee that the registrar supports any necessary\n
    \        extensions, the registrar MUST process the Require header field\n         values
    as described for UASs in Section 8.2.2.\n      3. A registrar SHOULD authenticate
    the UAC.  Mechanisms for the\n         authentication of SIP user agents are described
    in Section 22.\n         Registration behavior in no way overrides the generic\n
    \        authentication framework for SIP.  If no authentication\n         mechanism
    is available, the registrar MAY take the From address\n         as the asserted
    identity of the originator of the request.\n      4. The registrar SHOULD determine
    if the authenticated user is\n         authorized to modify registrations for
    this address-of-record.\n         For example, a registrar might consult an authorization\n
    \        database that maps user names to a list of addresses-of-record\n         for
    which that user has authorization to modify bindings.  If\n         the authenticated
    user is not authorized to modify bindings,\n         the registrar MUST return
    a 403 (Forbidden) and skip the\n         remaining steps.\n         In architectures
    that support third-party registration, one\n         entity may be responsible
    for updating the registrations\n         associated with multiple addresses-of-record.\n
    \     5. The registrar extracts the address-of-record from the To header\n         field
    of the request.  If the address-of-record is not valid\n         for the domain
    in the Request-URI, the registrar MUST send a\n         404 (Not Found) response
    and skip the remaining steps.  The URI\n         MUST then be converted to a canonical
    form.  To do that, all\n         URI parameters MUST be removed (including the
    user-param), and\n         any escaped characters MUST be converted to their unescaped\n
    \        form.  The result serves as an index into the list of bindings.\n      6.
    The registrar checks whether the request contains the Contact\n         header
    field.  If not, it skips to the last step.  If the\n         Contact header field
    is present, the registrar checks if there\n         is one Contact field value
    that contains the special value \"*\"\n         and an Expires field.  If the
    request has additional Contact\n         fields or an expiration time other than
    zero, the request is\n         invalid, and the server MUST return a 400 (Invalid
    Request) and\n         skip the remaining steps.  If not, the registrar checks
    whether\n         the Call-ID agrees with the value stored for each binding.  If\n
    \        not, it MUST remove the binding.  If it does agree, it MUST\n         remove
    the binding only if the CSeq in the request is higher\n         than the value
    stored for that binding.  Otherwise, the update\n         MUST be aborted and
    the request fails.\n      7. The registrar now processes each contact address
    in the Contact\n         header field in turn.  For each address, it determines
    the\n         expiration interval as follows:\n         -  If the field value
    has an \"expires\" parameter, that value\n            MUST be taken as the requested
    expiration.\n         -  If there is no such parameter, but the request has an\n
    \           Expires header field, that value MUST be taken as the\n            requested
    expiration.\n         -  If there is neither, a locally-configured default value
    MUST\n            be taken as the requested expiration.\n         The registrar
    MAY choose an expiration less than the requested\n         expiration interval.
    \ If and only if the requested expiration\n         interval is greater than zero
    AND smaller than one hour AND\n         less than a registrar-configured minimum,
    the registrar MAY\n         reject the registration with a response of 423 (Interval
    Too\n         Brief).  This response MUST contain a Min-Expires header field\n
    \        that states the minimum expiration interval the registrar is\n         willing
    to honor.  It then skips the remaining steps.\n         Allowing the registrar
    to set the registration interval\n         protects it against excessively frequent
    registration refreshes\n         while limiting the state that it needs to maintain
    and\n         decreasing the likelihood of registrations going stale.  The\n         expiration
    interval of a registration is frequently used in the\n         creation of services.
    \ An example is a follow-me service, where\n         the user may only be available
    at a terminal for a brief\n         period.  Therefore, registrars should accept
    brief\n         registrations; a request should only be rejected if the\n         interval
    is so short that the refreshes would degrade registrar\n         performance.\n
    \        For each address, the registrar then searches the list of\n         current
    bindings using the URI comparison rules.  If the\n         binding does not exist,
    it is tentatively added.  If the\n         binding does exist, the registrar checks
    the Call-ID value.  If\n         the Call-ID value in the existing binding differs
    from the\n         Call-ID value in the request, the binding MUST be removed if\n
    \        the expiration time is zero and updated otherwise.  If they are\n         the
    same, the registrar compares the CSeq value.  If the value\n         is higher
    than that of the existing binding, it MUST update or\n         remove the binding
    as above.  If not, the update MUST be\n         aborted and the request fails.\n
    \        This algorithm ensures that out-of-order requests from the same\n         UA
    are ignored.\n         Each binding record records the Call-ID and CSeq values
    from\n         the request.\n         The binding updates MUST be committed (that
    is, made visible to\n         the proxy or redirect server) if and only if all
    binding\n         updates and additions succeed.  If any one of them fails (for\n
    \        example, because the back-end database commit failed), the\n         request
    MUST fail with a 500 (Server Error) response and all\n         tentative binding
    updates MUST be removed.\n      8. The registrar returns a 200 (OK) response.
    \ The response MUST\n         contain Contact header field values enumerating
    all current\n         bindings.  Each Contact value MUST feature an \"expires\"\n
    \        parameter indicating its expiration interval chosen by the\n         registrar.
    \ The response SHOULD include a Date header field.\n"
  title: 10.3 Processing REGISTER Requests
- contents:
  - "11 Querying for Capabilities\n   The SIP method OPTIONS allows a UA to query
    another UA or a proxy\n   server as to its capabilities.  This allows a client
    to discover\n   information about the supported methods, content types, extensions,\n
    \  codecs, etc. without \"ringing\" the other party.  For example, before\n   a
    client inserts a Require header field into an INVITE listing an\n   option that
    it is not certain the destination UAS supports, the\n   client can query the destination
    UAS with an OPTIONS to see if this\n   option is returned in a Supported header
    field.  All UAs MUST support\n   the OPTIONS method.\n   The target of the OPTIONS
    request is identified by the Request-URI,\n   which could identify another UA
    or a SIP server.  If the OPTIONS is\n   addressed to a proxy server, the Request-URI
    is set without a user\n   part, similar to the way a Request-URI is set for a
    REGISTER request.\n   Alternatively, a server receiving an OPTIONS request with
    a Max-\n   Forwards header field value of 0 MAY respond to the request\n   regardless
    of the Request-URI.\n      This behavior is common with HTTP/1.1.  This behavior
    can be used\n      as a \"traceroute\" functionality to check the capabilities
    of\n      individual hop servers by sending a series of OPTIONS requests\n      with
    incremented Max-Forwards values.\n   As is the case for general UA behavior, the
    transaction layer can\n   return a timeout error if the OPTIONS yields no response.
    \ This may\n   indicate that the target is unreachable and hence unavailable.\n
    \  An OPTIONS request MAY be sent as part of an established dialog to\n   query
    the peer on capabilities that may be utilized later in the\n   dialog.\n"
  title: 11 Querying for Capabilities
- contents:
  - "11.1 Construction of OPTIONS Request\n   An OPTIONS request is constructed using
    the standard rules for a SIP\n   request as discussed in Section 8.1.1.\n   A
    Contact header field MAY be present in an OPTIONS.\n   An Accept header field
    SHOULD be included to indicate the type of\n   message body the UAC wishes to
    receive in the response.  Typically,\n   this is set to a format that is used
    to describe the media\n   capabilities of a UA, such as SDP (application/sdp).\n
    \  The response to an OPTIONS request is assumed to be scoped to the\n   Request-URI
    in the original request.  However, only when an OPTIONS\n   is sent as part of
    an established dialog is it guaranteed that future\n   requests will be received
    by the server that generated the OPTIONS\n   response.\n   Example OPTIONS request:\n
    \     OPTIONS sip:carol@chicago.com SIP/2.0\n      Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKhjhs8ass877\n
    \     Max-Forwards: 70\n      To: <sip:carol@chicago.com>\n      From: Alice <sip:alice@atlanta.com>;tag=1928301774\n
    \     Call-ID: a84b4c76e66710\n      CSeq: 63104 OPTIONS\n      Contact: <sip:alice@pc33.atlanta.com>\n
    \     Accept: application/sdp\n      Content-Length: 0\n"
  title: 11.1 Construction of OPTIONS Request
- contents:
  - "11.2 Processing of OPTIONS Request\n   The response to an OPTIONS is constructed
    using the standard rules\n   for a SIP response as discussed in Section 8.2.6.
    \ The response code\n   chosen MUST be the same that would have been chosen had
    the request\n   been an INVITE.  That is, a 200 (OK) would be returned if the
    UAS is\n   ready to accept a call, a 486 (Busy Here) would be returned if the\n
    \  UAS is busy, etc.  This allows an OPTIONS request to be used to\n   determine
    the basic state of a UAS, which can be an indication of\n   whether the UAS will
    accept an INVITE request.\n   An OPTIONS request received within a dialog generates
    a 200 (OK)\n   response that is identical to one constructed outside a dialog
    and\n   does not have any impact on the dialog.\n   This use of OPTIONS has limitations
    due to the differences in proxy\n   handling of OPTIONS and INVITE requests.  While
    a forked INVITE can\n   result in multiple 200 (OK) responses being returned,
    a forked\n   OPTIONS will only result in a single 200 (OK) response, since it
    is\n   treated by proxies using the non-INVITE handling.  See Section 16.7\n   for
    the normative details.\n   If the response to an OPTIONS is generated by a proxy
    server, the\n   proxy returns a 200 (OK), listing the capabilities of the server.\n
    \  The response does not contain a message body.\n   Allow, Accept, Accept-Encoding,
    Accept-Language, and Supported header\n   fields SHOULD be present in a 200 (OK)
    response to an OPTIONS\n   request.  If the response is generated by a proxy,
    the Allow header\n   field SHOULD be omitted as it is ambiguous since a proxy
    is method\n   agnostic.  Contact header fields MAY be present in a 200 (OK)\n
    \  response and have the same semantics as in a 3xx response.  That is,\n   they
    may list a set of alternative names and methods of reaching the\n   user.  A Warning
    header field MAY be present.\n   A message body MAY be sent, the type of which
    is determined by the\n   Accept header field in the OPTIONS request (application/sdp
    is the\n   default if the Accept header field is not present).  If the types\n
    \  include one that can describe media capabilities, the UAS SHOULD\n   include
    a body in the response for that purpose.  Details on the\n   construction of such
    a body in the case of application/sdp are\n   described in [13].\n   Example OPTIONS
    response generated by a UAS (corresponding to the\n   request in Section 11.1):\n
    \     SIP/2.0 200 OK\n      Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKhjhs8ass877\n
    \      ;received=192.0.2.4\n      To: <sip:carol@chicago.com>;tag=93810874\n      From:
    Alice <sip:alice@atlanta.com>;tag=1928301774\n      Call-ID: a84b4c76e66710\n
    \     CSeq: 63104 OPTIONS\n      Contact: <sip:carol@chicago.com>\n      Contact:
    <mailto:carol@chicago.com>\n      Allow: INVITE, ACK, CANCEL, OPTIONS, BYE\n      Accept:
    application/sdp\n      Accept-Encoding: gzip\n      Accept-Language: en\n      Supported:
    foo\n      Content-Type: application/sdp\n      Content-Length: 274\n      (SDP
    not shown)\n"
  title: 11.2 Processing of OPTIONS Request
- contents:
  - "12 Dialogs\n   A key concept for a user agent is that of a dialog.  A dialog\n
    \  represents a peer-to-peer SIP relationship between two user agents\n   that
    persists for some time.  The dialog facilitates sequencing of\n   messages between
    the user agents and proper routing of requests\n   between both of them.  The
    dialog represents a context in which to\n   interpret SIP messages.  Section 8
    discussed method independent UA\n   processing for requests and responses outside
    of a dialog.  This\n   section discusses how those requests and responses are
    used to\n   construct a dialog, and then how subsequent requests and responses\n
    \  are sent within a dialog.\n   A dialog is identified at each UA with a dialog
    ID, which consists of\n   a Call-ID value, a local tag and a remote tag.  The
    dialog ID at each\n   UA involved in the dialog is not the same.  Specifically,
    the local\n   tag at one UA is identical to the remote tag at the peer UA.  The\n
    \  tags are opaque tokens that facilitate the generation of unique\n   dialog
    IDs.\n   A dialog ID is also associated with all responses and with any\n   request
    that contains a tag in the To field.  The rules for computing\n   the dialog ID
    of a message depend on whether the SIP element is a UAC\n   or UAS.  For a UAC,
    the Call-ID value of the dialog ID is set to the\n   Call-ID of the message, the
    remote tag is set to the tag in the To\n   field of the message, and the local
    tag is set to the tag in the From\n   field of the message (these rules apply
    to both requests and\n   responses).  As one would expect for a UAS, the Call-ID
    value of the\n   dialog ID is set to the Call-ID of the message, the remote tag
    is set\n   to the tag in the From field of the message, and the local tag is set\n
    \  to the tag in the To field of the message.\n   A dialog contains certain pieces
    of state needed for further message\n   transmissions within the dialog.  This
    state consists of the dialog\n   ID, a local sequence number (used to order requests
    from the UA to\n   its peer), a remote sequence number (used to order requests
    from its\n   peer to the UA), a local URI, a remote URI, remote target, a boolean\n
    \  flag called \"secure\", and a route set, which is an ordered list of\n   URIs.
    \ The route set is the list of servers that need to be traversed\n   to send a
    request to the peer.  A dialog can also be in the \"early\"\n   state, which occurs
    when it is created with a provisional response,\n   and then transition to the
    \"confirmed\" state when a 2xx final\n   response arrives.  For other responses,
    or if no response arrives at\n   all on that dialog, the early dialog terminates.\n"
  title: 12 Dialogs
- contents:
  - "12.1 Creation of a Dialog\n   Dialogs are created through the generation of non-failure
    responses\n   to requests with specific methods.  Within this specification, only\n
    \  2xx and 101-199 responses with a To tag, where the request was\n   INVITE,
    will establish a dialog.  A dialog established by a non-final\n   response to
    a request is in the \"early\" state and it is called an\n   early dialog.  Extensions
    MAY define other means for creating\n   dialogs.  Section 13 gives more details
    that are specific to the\n   INVITE method.  Here, we describe the process for
    creation of dialog\n   state that is not dependent on the method.\n   UAs MUST
    assign values to the dialog ID components as described\n   below.\n"
  title: 12.1 Creation of a Dialog
- contents:
  - "12.1.1 UAS behavior\n   When a UAS responds to a request with a response that
    establishes a\n   dialog (such as a 2xx to INVITE), the UAS MUST copy all Record-Route\n
    \  header field values from the request into the response (including the\n   URIs,
    URI parameters, and any Record-Route header field parameters,\n   whether they
    are known or unknown to the UAS) and MUST maintain the\n   order of those values.
    \ The UAS MUST add a Contact header field to\n   the response.  The Contact header
    field contains an address where the\n   UAS would like to be contacted for subsequent
    requests in the dialog\n   (which includes the ACK for a 2xx response in the case
    of an INVITE).\n   Generally, the host portion of this URI is the IP address or
    FQDN of\n   the host.  The URI provided in the Contact header field MUST be a
    SIP\n   or SIPS URI.  If the request that initiated the dialog contained a\n   SIPS
    URI in the Request-URI or in the top Record-Route header field\n   value, if there
    was any, or the Contact header field if there was no\n   Record-Route header field,
    the Contact header field in the response\n   MUST be a SIPS URI.  The URI SHOULD
    have global scope (that is, the\n   same URI can be used in messages outside this
    dialog).  The same way,\n   the scope of the URI in the Contact header field of
    the INVITE is not\n   limited to this dialog either.  It can therefore be used
    in messages\n   to the UAC even outside this dialog.\n   The UAS then constructs
    the state of the dialog.  This state MUST be\n   maintained for the duration of
    the dialog.\n   If the request arrived over TLS, and the Request-URI contained
    a SIPS\n   URI, the \"secure\" flag is set to TRUE.\n   The route set MUST be
    set to the list of URIs in the Record-Route\n   header field from the request,
    taken in order and preserving all URI\n   parameters.  If no Record-Route header
    field is present in the\n   request, the route set MUST be set to the empty set.
    \ This route set,\n   even if empty, overrides any pre-existing route set for
    future\n   requests in this dialog.  The remote target MUST be set to the URI\n
    \  from the Contact header field of the request.\n   The remote sequence number
    MUST be set to the value of the sequence\n   number in the CSeq header field of
    the request.  The local sequence\n   number MUST be empty.  The call identifier
    component of the dialog ID\n   MUST be set to the value of the Call-ID in the
    request.  The local\n   tag component of the dialog ID MUST be set to the tag
    in the To field\n   in the response to the request (which always includes a tag),
    and the\n   remote tag component of the dialog ID MUST be set to the tag from
    the\n   From field in the request.  A UAS MUST be prepared to receive a\n   request
    without a tag in the From field, in which case the tag is\n   considered to have
    a value of null.\n      This is to maintain backwards compatibility with RFC 2543,
    which\n      did not mandate From tags.\n   The remote URI MUST be set to the
    URI in the From field, and the\n   local URI MUST be set to the URI in the To
    field.\n"
  title: 12.1.1 UAS behavior
- contents:
  - "12.1.2 UAC Behavior\n   When a UAC sends a request that can establish a dialog
    (such as an\n   INVITE) it MUST provide a SIP or SIPS URI with global scope (i.e.,\n
    \  the same SIP URI can be used in messages outside this dialog) in the\n   Contact
    header field of the request.  If the request has a Request-\n   URI or a topmost
    Route header field value with a SIPS URI, the\n   Contact header field MUST contain
    a SIPS URI.\n   When a UAC receives a response that establishes a dialog, it\n
    \  constructs the state of the dialog.  This state MUST be maintained\n   for
    the duration of the dialog.\n   If the request was sent over TLS, and the Request-URI
    contained a\n   SIPS URI, the \"secure\" flag is set to TRUE.\n   The route set
    MUST be set to the list of URIs in the Record-Route\n   header field from the
    response, taken in reverse order and preserving\n   all URI parameters.  If no
    Record-Route header field is present in\n   the response, the route set MUST be
    set to the empty set.  This route\n   set, even if empty, overrides any pre-existing
    route set for future\n   requests in this dialog.  The remote target MUST be set
    to the URI\n   from the Contact header field of the response.\n   The local sequence
    number MUST be set to the value of the sequence\n   number in the CSeq header
    field of the request.  The remote sequence\n   number MUST be empty (it is established
    when the remote UA sends a\n   request within the dialog).  The call identifier
    component of the\n   dialog ID MUST be set to the value of the Call-ID in the
    request.\n   The local tag component of the dialog ID MUST be set to the tag in\n
    \  the From field in the request, and the remote tag component of the\n   dialog
    ID MUST be set to the tag in the To field of the response.  A\n   UAC MUST be
    prepared to receive a response without a tag in the To\n   field, in which case
    the tag is considered to have a value of null.\n      This is to maintain backwards
    compatibility with RFC 2543, which\n      did not mandate To tags.\n   The remote
    URI MUST be set to the URI in the To field, and the local\n   URI MUST be set
    to the URI in the From field.\n"
  title: 12.1.2 UAC Behavior
- contents:
  - "12.2 Requests within a Dialog\n   Once a dialog has been established between
    two UAs, either of them\n   MAY initiate new transactions as needed within the
    dialog.  The UA\n   sending the request will take the UAC role for the transaction.
    \ The\n   UA receiving the request will take the UAS role.  Note that these may\n
    \  be different roles than the UAs held during the transaction that\n   established
    the dialog.\n   Requests within a dialog MAY contain Record-Route and Contact
    header\n   fields.  However, these requests do not cause the dialog's route set\n
    \  to be modified, although they may modify the remote target URI.\n   Specifically,
    requests that are not target refresh requests do not\n   modify the dialog's remote
    target URI, and requests that are target\n   refresh requests do.  For dialogs
    that have been established with an\n   INVITE, the only target refresh request
    defined is re-INVITE (see\n   Section 14).  Other extensions may define different
    target refresh\n   requests for dialogs established in other ways.\n      Note
    that an ACK is NOT a target refresh request.\n   Target refresh requests only
    update the dialog's remote target URI,\n   and not the route set formed from the
    Record-Route.  Updating the\n   latter would introduce severe backwards compatibility
    problems with\n   RFC 2543-compliant systems.\n"
  title: 12.2 Requests within a Dialog
- contents:
  - '12.2.1 UAC Behavior

    '
  title: 12.2.1 UAC Behavior
- contents:
  - "12.2.1.1 Generating the Request\n   A request within a dialog is constructed
    by using many of the\n   components of the state stored as part of the dialog.\n
    \  The URI in the To field of the request MUST be set to the remote URI\n   from
    the dialog state.  The tag in the To header field of the request\n   MUST be set
    to the remote tag of the dialog ID.  The From URI of the\n   request MUST be set
    to the local URI from the dialog state.  The tag\n   in the From header field
    of the request MUST be set to the local tag\n   of the dialog ID.  If the value
    of the remote or local tags is null,\n   the tag parameter MUST be omitted from
    the To or From header fields,\n   respectively.\n      Usage of the URI from the
    To and From fields in the original\n      request within subsequent requests is
    done for backwards\n      compatibility with RFC 2543, which used the URI for
    dialog\n      identification.  In this specification, only the tags are used for\n
    \     dialog identification.  It is expected that mandatory reflection\n      of
    the original To and From URI in mid-dialog requests will be\n      deprecated
    in a subsequent revision of this specification.\n   The Call-ID of the request
    MUST be set to the Call-ID of the dialog.\n   Requests within a dialog MUST contain
    strictly monotonically\n   increasing and contiguous CSeq sequence numbers (increasing-by-one)\n
    \  in each direction (excepting ACK and CANCEL of course, whose numbers\n   equal
    the requests being acknowledged or cancelled).  Therefore, if\n   the local sequence
    number is not empty, the value of the local\n   sequence number MUST be incremented
    by one, and this value MUST be\n   placed into the CSeq header field.  If the
    local sequence number is\n   empty, an initial value MUST be chosen using the
    guidelines of\n   Section 8.1.1.5.  The method field in the CSeq header field
    value\n   MUST match the method of the request.\n      With a length of 32 bits,
    a client could generate, within a single\n      call, one request a second for
    about 136 years before needing to\n      wrap around.  The initial value of the
    sequence number is chosen\n      so that subsequent requests within the same call
    will not wrap\n      around.  A non-zero initial value allows clients to use a
    time-\n      based initial sequence number.  A client could, for example,\n      choose
    the 31 most significant bits of a 32-bit second clock as an\n      initial sequence
    number.\n   The UAC uses the remote target and route set to build the Request-URI\n
    \  and Route header field of the request.\n   If the route set is empty, the UAC
    MUST place the remote target URI\n   into the Request-URI.  The UAC MUST NOT add
    a Route header field to\n   the request.\n   If the route set is not empty, and
    the first URI in the route set\n   contains the lr parameter (see Section 19.1.1),
    the UAC MUST place\n   the remote target URI into the Request-URI and MUST include
    a Route\n   header field containing the route set values in order, including all\n
    \  parameters.\n   If the route set is not empty, and its first URI does not contain
    the\n   lr parameter, the UAC MUST place the first URI from the route set\n   into
    the Request-URI, stripping any parameters that are not allowed\n   in a Request-URI.
    \ The UAC MUST add a Route header field containing\n   the remainder of the route
    set values in order, including all\n   parameters.  The UAC MUST then place the
    remote target URI into the\n   Route header field as the last value.\n   For example,
    if the remote target is sip:user@remoteua and the route\n   set contains:\n      <sip:proxy1>,<sip:proxy2>,<sip:proxy3;lr>,<sip:proxy4>\n
    \  The request will be formed with the following Request-URI and Route\n   header
    field:\n   METHOD sip:proxy1\n   Route: <sip:proxy2>,<sip:proxy3;lr>,<sip:proxy4>,<sip:user@remoteua>\n
    \     If the first URI of the route set does not contain the lr\n      parameter,
    the proxy indicated does not understand the routing\n      mechanisms described
    in this document and will act as specified in\n      RFC 2543, replacing the Request-URI
    with the first Route header\n      field value it receives while forwarding the
    message.  Placing the\n      Request-URI at the end of the Route header field
    preserves the\n      information in that Request-URI across the strict router
    (it will\n      be returned to the Request-URI when the request reaches a loose-\n
    \     router).\n   A UAC SHOULD include a Contact header field in any target refresh\n
    \  requests within a dialog, and unless there is a need to change it,\n   the
    URI SHOULD be the same as used in previous requests within the\n   dialog.  If
    the \"secure\" flag is true, that URI MUST be a SIPS URI.\n   As discussed in
    Section 12.2.2, a Contact header field in a target\n   refresh request updates
    the remote target URI.  This allows a UA to\n   provide a new contact address,
    should its address change during the\n   duration of the dialog.\n   However,
    requests that are not target refresh requests do not affect\n   the remote target
    URI for the dialog.\n   The rest of the request is formed as described in Section
    8.1.1.\n   Once the request has been constructed, the address of the server is\n
    \  computed and the request is sent, using the same procedures for\n   requests
    outside of a dialog (Section 8.1.2).\n      The procedures in Section 8.1.2 will
    normally result in the\n      request being sent to the address indicated by the
    topmost Route\n      header field value or the Request-URI if no Route header
    field is\n      present.  Subject to certain restrictions, they allow the request\n
    \     to be sent to an alternate address (such as a default outbound\n      proxy
    not represented in the route set).\n"
  title: 12.2.1.1 Generating the Request
- contents:
  - "12.2.1.2 Processing the Responses\n   The UAC will receive responses to the request
    from the transaction\n   layer.  If the client transaction returns a timeout,
    this is treated\n   as a 408 (Request Timeout) response.\n   The behavior of a
    UAC that receives a 3xx response for a request sent\n   within a dialog is the
    same as if the request had been sent outside a\n   dialog.  This behavior is described
    in Section 8.1.3.4.\n      Note, however, that when the UAC tries alternative
    locations, it\n      still uses the route set for the dialog to build the Route
    header\n      of the request.\n   When a UAC receives a 2xx response to a target
    refresh request, it\n   MUST replace the dialog's remote target URI with the URI
    from the\n   Contact header field in that response, if present.\n   If the response
    for a request within a dialog is a 481\n   (Call/Transaction Does Not Exist) or
    a 408 (Request Timeout), the UAC\n   SHOULD terminate the dialog.  A UAC SHOULD
    also terminate a dialog if\n   no response at all is received for the request
    (the client\n   transaction would inform the TU about the timeout.)\n      For
    INVITE initiated dialogs, terminating the dialog consists of\n      sending a
    BYE.\n"
  title: 12.2.1.2 Processing the Responses
- contents:
  - "12.2.2 UAS Behavior\n   Requests sent within a dialog, as any other requests,
    are atomic.  If\n   a particular request is accepted by the UAS, all the state
    changes\n   associated with it are performed.  If the request is rejected, none\n
    \  of the state changes are performed.\n      Note that some requests, such as
    INVITEs, affect several pieces of\n      state.\n   The UAS will receive the request
    from the transaction layer.  If the\n   request has a tag in the To header field,
    the UAS core computes the\n   dialog identifier corresponding to the request and
    compares it with\n   existing dialogs.  If there is a match, this is a mid-dialog
    request.\n   In that case, the UAS first applies the same processing rules for\n
    \  requests outside of a dialog, discussed in Section 8.2.\n   If the request
    has a tag in the To header field, but the dialog\n   identifier does not match
    any existing dialogs, the UAS may have\n   crashed and restarted, or it may have
    received a request for a\n   different (possibly failed) UAS (the UASs can construct
    the To tags\n   so that a UAS can identify that the tag was for a UAS for which
    it is\n   providing recovery).  Another possibility is that the incoming\n   request
    has been simply misrouted.  Based on the To tag, the UAS MAY\n   either accept
    or reject the request.  Accepting the request for\n   acceptable To tags provides
    robustness, so that dialogs can persist\n   even through crashes.  UAs wishing
    to support this capability must\n   take into consideration some issues such as
    choosing monotonically\n   increasing CSeq sequence numbers even across reboots,
    reconstructing\n   the route set, and accepting out-of-range RTP timestamps and
    sequence\n   numbers.\n   If the UAS wishes to reject the request because it does
    not wish to\n   recreate the dialog, it MUST respond to the request with a 481\n
    \  (Call/Transaction Does Not Exist) status code and pass that to the\n   server
    transaction.\n   Requests that do not change in any way the state of a dialog
    may be\n   received within a dialog (for example, an OPTIONS request).  They are\n
    \  processed as if they had been received outside the dialog.\n   If the remote
    sequence number is empty, it MUST be set to the value\n   of the sequence number
    in the CSeq header field value in the request.\n   If the remote sequence number
    was not empty, but the sequence number\n   of the request is lower than the remote
    sequence number, the request\n   is out of order and MUST be rejected with a 500
    (Server Internal\n   Error) response.  If the remote sequence number was not empty,
    and\n   the sequence number of the request is greater than the remote\n   sequence
    number, the request is in order.  It is possible for the\n   CSeq sequence number
    to be higher than the remote sequence number by\n   more than one.  This is not
    an error condition, and a UAS SHOULD be\n   prepared to receive and process requests
    with CSeq values more than\n   one higher than the previous received request.
    \ The UAS MUST then set\n   the remote sequence number to the value of the sequence
    number in the\n   CSeq header field value in the request.\n      If a proxy challenges
    a request generated by the UAC, the UAC has\n      to resubmit the request with
    credentials.  The resubmitted request\n      will have a new CSeq number.  The
    UAS will never see the first\n      request, and thus, it will notice a gap in
    the CSeq number space.\n      Such a gap does not represent any error condition.\n
    \  When a UAS receives a target refresh request, it MUST replace the\n   dialog's
    remote target URI with the URI from the Contact header field\n   in that request,
    if present.\n"
  title: 12.2.2 UAS Behavior
- contents:
  - "12.3 Termination of a Dialog\n   Independent of the method, if a request outside
    of a dialog generates\n   a non-2xx final response, any early dialogs created
    through\n   provisional responses to that request are terminated.  The mechanism\n
    \  for terminating confirmed dialogs is method specific.  In this\n   specification,
    the BYE method terminates a session and the dialog\n   associated with it.  See
    Section 15 for details.\n"
  title: 12.3 Termination of a Dialog
- contents:
  - '13 Initiating a Session

    '
  title: 13 Initiating a Session
- contents:
  - "13.1 Overview\n   When a user agent client desires to initiate a session (for
    example,\n   audio, video, or a game), it formulates an INVITE request.  The\n
    \  INVITE request asks a server to establish a session.  This request\n   may
    be forwarded by proxies, eventually arriving at one or more UAS\n   that can potentially
    accept the invitation.  These UASs will\n   frequently need to query the user
    about whether to accept the\n   invitation.  After some time, those UASs can accept
    the invitation\n   (meaning the session is to be established) by sending a 2xx
    response.\n   If the invitation is not accepted, a 3xx, 4xx, 5xx or 6xx response
    is\n   sent, depending on the reason for the rejection.  Before sending a\n   final
    response, the UAS can also send provisional responses (1xx) to\n   advise the
    UAC of progress in contacting the called user.\n   After possibly receiving one
    or more provisional responses, the UAC\n   will get one or more 2xx responses
    or one non-2xx final response.\n   Because of the protracted amount of time it
    can take to receive final\n   responses to INVITE, the reliability mechanisms
    for INVITE\n   transactions differ from those of other requests (like OPTIONS).\n
    \  Once it receives a final response, the UAC needs to send an ACK for\n   every
    final response it receives.  The procedure for sending this ACK\n   depends on
    the type of response.  For final responses between 300 and\n   699, the ACK processing
    is done in the transaction layer and follows\n   one set of rules (See Section
    17).  For 2xx responses, the ACK is\n   generated by the UAC core.\n   A 2xx response
    to an INVITE establishes a session, and it also\n   creates a dialog between the
    UA that issued the INVITE and the UA\n   that generated the 2xx response.  Therefore,
    when multiple 2xx\n   responses are received from different remote UAs (because
    the INVITE\n   forked), each 2xx establishes a different dialog.  All these dialogs\n
    \  are part of the same call.\n   This section provides details on the establishment
    of a session using\n   INVITE.  A UA that supports INVITE MUST also support ACK,
    CANCEL and\n   BYE.\n"
  title: 13.1 Overview
- contents:
  - '13.2 UAC Processing

    '
  title: 13.2 UAC Processing
- contents:
  - "13.2.1 Creating the Initial INVITE\n   Since the initial INVITE represents a
    request outside of a dialog,\n   its construction follows the procedures of Section
    8.1.1.  Additional\n   processing is required for the specific case of INVITE.\n
    \  An Allow header field (Section 20.5) SHOULD be present in the INVITE.\n   It
    indicates what methods can be invoked within a dialog, on the UA\n   sending the
    INVITE, for the duration of the dialog.  For example, a\n   UA capable of receiving
    INFO requests within a dialog [34] SHOULD\n   include an Allow header field listing
    the INFO method.\n   A Supported header field (Section 20.37) SHOULD be present
    in the\n   INVITE.  It enumerates all the extensions understood by the UAC.\n
    \  An Accept (Section 20.1) header field MAY be present in the INVITE.\n   It
    indicates which Content-Types are acceptable to the UA, in both\n   the response
    received by it, and in any subsequent requests sent to\n   it within dialogs established
    by the INVITE.  The Accept header field\n   is especially useful for indicating
    support of various session\n   description formats.\n   The UAC MAY add an Expires
    header field (Section 20.19) to limit the\n   validity of the invitation.  If
    the time indicated in the Expires\n   header field is reached and no final answer
    for the INVITE has been\n   received, the UAC core SHOULD generate a CANCEL request
    for the\n   INVITE, as per Section 9.\n   A UAC MAY also find it useful to add,
    among others, Subject (Section\n   20.36), Organization (Section 20.25) and User-Agent
    (Section 20.41)\n   header fields.  They all contain information related to the
    INVITE.\n   The UAC MAY choose to add a message body to the INVITE.  Section\n
    \  8.1.1.10 deals with how to construct the header fields -- Content-\n   Type
    among others -- needed to describe the message body.\n   There are special rules
    for message bodies that contain a session\n   description - their corresponding
    Content-Disposition is \"session\".\n   SIP uses an offer/answer model where one
    UA sends a session\n   description, called the offer, which contains a proposed
    description\n   of the session.  The offer indicates the desired communications
    means\n   (audio, video, games), parameters of those means (such as codec\n   types)
    and addresses for receiving media from the answerer.  The\n   other UA responds
    with another session description, called the\n   answer, which indicates which
    communications means are accepted, the\n   parameters that apply to those means,
    and addresses for receiving\n   media from the offerer. An offer/answer exchange
    is within the\n   context of a dialog, so that if a SIP INVITE results in multiple\n
    \  dialogs, each is a separate offer/answer exchange.  The offer/answer\n   model
    defines restrictions on when offers and answers can be made\n   (for example,
    you cannot make a new offer while one is in progress).\n   This results in restrictions
    on where the offers and answers can\n   appear in SIP messages.  In this specification,
    offers and answers\n   can only appear in INVITE requests and responses, and ACK.
    \ The usage\n   of offers and answers is further restricted.  For the initial
    INVITE\n   transaction, the rules are:\n      o  The initial offer MUST be in
    either an INVITE or, if not there,\n         in the first reliable non-failure
    message from the UAS back to\n         the UAC.  In this specification, that is
    the final 2xx\n         response.\n      o  If the initial offer is in an INVITE,
    the answer MUST be in a\n         reliable non-failure message from UAS back to
    UAC which is\n         correlated to that INVITE.  For this specification, that
    is\n         only the final 2xx response to that INVITE.  That same exact\n         answer
    MAY also be placed in any provisional responses sent\n         prior to the answer.
    \ The UAC MUST treat the first session\n         description it receives as the
    answer, and MUST ignore any\n         session descriptions in subsequent responses
    to the initial\n         INVITE.\n      o  If the initial offer is in the first
    reliable non-failure\n         message from the UAS back to UAC, the answer MUST
    be in the\n         acknowledgement for that message (in this specification, ACK\n
    \        for a 2xx response).\n      o  After having sent or received an answer
    to the first offer, the\n         UAC MAY generate subsequent offers in requests
    based on rules\n         specified for that method, but only if it has received
    answers\n         to any previous offers, and has not sent any offers to which
    it\n         hasn't gotten an answer.\n      o  Once the UAS has sent or received
    an answer to the initial\n         offer, it MUST NOT generate subsequent offers
    in any responses\n         to the initial INVITE.  This means that a UAS based
    on this\n         specification alone can never generate subsequent offers until\n
    \        completion of the initial transaction.\n   Concretely, the above rules
    specify two exchanges for UAs compliant\n   to this specification alone - the
    offer is in the INVITE, and the\n   answer in the 2xx (and possibly in a 1xx as
    well, with the same\n   value), or the offer is in the 2xx, and the answer is
    in the ACK.\n   All user agents that support INVITE MUST support these two exchanges.\n
    \  The Session Description Protocol (SDP) (RFC 2327 [1]) MUST be\n   supported
    by all user agents as a means to describe sessions, and its\n   usage for constructing
    offers and answers MUST follow the procedures\n   defined in [13].\n   The restrictions
    of the offer-answer model just described only apply\n   to bodies whose Content-Disposition
    header field value is \"session\".\n   Therefore, it is possible that both the
    INVITE and the ACK contain a\n   body message (for example, the INVITE carries
    a photo (Content-\n   Disposition: render) and the ACK a session description (Content-\n
    \  Disposition: session)).\n   If the Content-Disposition header field is missing,
    bodies of\n   Content-Type application/sdp imply the disposition \"session\",
    while\n   other content types imply \"render\".\n   Once the INVITE has been created,
    the UAC follows the procedures\n   defined for sending requests outside of a dialog
    (Section 8).  This\n   results in the construction of a client transaction that
    will\n   ultimately send the request and deliver responses to the UAC.\n"
  title: 13.2.1 Creating the Initial INVITE
- contents:
  - "13.2.2 Processing INVITE Responses\n   Once the INVITE has been passed to the
    INVITE client transaction, the\n   UAC waits for responses for the INVITE.  If
    the INVITE client\n   transaction returns a timeout rather than a response the
    TU acts as\n   if a 408 (Request Timeout) response had been received, as described\n
    \  in Section 8.1.3.\n"
  title: 13.2.2 Processing INVITE Responses
- contents:
  - "13.2.2.1 1xx Responses\n   Zero, one or multiple provisional responses may arrive
    before one or\n   more final responses are received.  Provisional responses for
    an\n   INVITE request can create \"early dialogs\".  If a provisional response\n
    \  has a tag in the To field, and if the dialog ID of the response does\n   not
    match an existing dialog, one is constructed using the procedures\n   defined
    in Section 12.1.2.\n   The early dialog will only be needed if the UAC needs to
    send a\n   request to its peer within the dialog before the initial INVITE\n   transaction
    completes.  Header fields present in a provisional\n   response are applicable
    as long as the dialog is in the early state\n   (for example, an Allow header
    field in a provisional response\n   contains the methods that can be used in the
    dialog while this is in\n   the early state).\n"
  title: 13.2.2.1 1xx Responses
- contents:
  - "13.2.2.2 3xx Responses\n   A 3xx response may contain one or more Contact header
    field values\n   providing new addresses where the callee might be reachable.\n
    \  Depending on the status code of the 3xx response (see Section 21.3),\n   the
    UAC MAY choose to try those new addresses.\n"
  title: 13.2.2.2 3xx Responses
- contents:
  - "13.2.2.3 4xx, 5xx and 6xx Responses\n   A single non-2xx final response may be
    received for the INVITE.  4xx,\n   5xx and 6xx responses may contain a Contact
    header field value\n   indicating the location where additional information about
    the error\n   can be found.  Subsequent final responses (which would only arrive\n
    \  under error conditions) MUST be ignored.\n   All early dialogs are considered
    terminated upon reception of the\n   non-2xx final response.\n   After having
    received the non-2xx final response the UAC core\n   considers the INVITE transaction
    completed.  The INVITE client\n   transaction handles the generation of ACKs for
    the response (see\n   Section 17).\n"
  title: 13.2.2.3 4xx, 5xx and 6xx Responses
- contents:
  - "13.2.2.4 2xx Responses\n   Multiple 2xx responses may arrive at the UAC for a
    single INVITE\n   request due to a forking proxy.  Each response is distinguished
    by\n   the tag parameter in the To header field, and each represents a\n   distinct
    dialog, with a distinct dialog identifier.\n   If the dialog identifier in the
    2xx response matches the dialog\n   identifier of an existing dialog, the dialog
    MUST be transitioned to\n   the \"confirmed\" state, and the route set for the
    dialog MUST be\n   recomputed based on the 2xx response using the procedures of
    Section\n   12.2.1.2.  Otherwise, a new dialog in the \"confirmed\" state MUST
    be\n   constructed using the procedures of Section 12.1.2.\n      Note that the
    only piece of state that is recomputed is the route\n      set.  Other pieces
    of state such as the highest sequence numbers\n      (remote and local) sent within
    the dialog are not recomputed.  The\n      route set only is recomputed for backwards
    compatibility.  RFC\n      2543 did not mandate mirroring of the Record-Route
    header field in\n      a 1xx, only 2xx.  However, we cannot update the entire
    state of\n      the dialog, since mid-dialog requests may have been sent within\n
    \     the early dialog, modifying the sequence numbers, for example.\n   The UAC
    core MUST generate an ACK request for each 2xx received from\n   the transaction
    layer.  The header fields of the ACK are constructed\n   in the same way as for
    any request sent within a dialog (see Section\n   12) with the exception of the
    CSeq and the header fields related to\n   authentication.  The sequence number
    of the CSeq header field MUST be\n   the same as the INVITE being acknowledged,
    but the CSeq method MUST\n   be ACK.  The ACK MUST contain the same credentials
    as the INVITE.  If\n   the 2xx contains an offer (based on the rules above), the
    ACK MUST\n   carry an answer in its body.  If the offer in the 2xx response is
    not\n   acceptable, the UAC core MUST generate a valid answer in the ACK and\n
    \  then send a BYE immediately.\n   Once the ACK has been constructed, the procedures
    of [4] are used to\n   determine the destination address, port and transport.
    \ However, the\n   request is passed to the transport layer directly for transmission,\n
    \  rather than a client transaction.  This is because the UAC core\n   handles
    retransmissions of the ACK, not the transaction layer.  The\n   ACK MUST be passed
    to the client transport every time a\n   retransmission of the 2xx final response
    that triggered the ACK\n   arrives.\n   The UAC core considers the INVITE transaction
    completed 64*T1 seconds\n   after the reception of the first 2xx response.  At
    this point all the\n   early dialogs that have not transitioned to established
    dialogs are\n   terminated.  Once the INVITE transaction is considered completed
    by\n   the UAC core, no more new 2xx responses are expected to arrive.\n   If,
    after acknowledging any 2xx response to an INVITE, the UAC does\n   not want to
    continue with that dialog, then the UAC MUST terminate\n   the dialog by sending
    a BYE request as described in Section 15.\n"
  title: 13.2.2.4 2xx Responses
- contents:
  - '13.3 UAS Processing

    '
  title: 13.3 UAS Processing
- contents:
  - "13.3.1 Processing of the INVITE\n   The UAS core will receive INVITE requests
    from the transaction layer.\n   It first performs the request processing procedures
    of Section 8.2,\n   which are applied for both requests inside and outside of
    a dialog.\n   Assuming these processing states are completed without generating
    a\n   response, the UAS core performs the additional processing steps:\n      1.
    If the request is an INVITE that contains an Expires header\n         field, the
    UAS core sets a timer for the number of seconds\n         indicated in the header
    field value.  When the timer fires, the\n         invitation is considered to
    be expired.  If the invitation\n         expires before the UAS has generated
    a final response, a 487\n         (Request Terminated) response SHOULD be generated.\n
    \     2. If the request is a mid-dialog request, the method-independent\n         processing
    described in Section 12.2.2 is first applied.  It\n         might also modify
    the session; Section 14 provides details.\n      3. If the request has a tag in
    the To header field but the dialog\n         identifier does not match any of
    the existing dialogs, the UAS\n         may have crashed and restarted, or may
    have received a request\n         for a different (possibly failed) UAS.  Section
    12.2.2 provides\n         guidelines to achieve a robust behavior under such a
    situation.\n   Processing from here forward assumes that the INVITE is outside
    of a\n   dialog, and is thus for the purposes of establishing a new session.\n
    \  The INVITE may contain a session description, in which case the UAS\n   is
    being presented with an offer for that session.  It is possible\n   that the user
    is already a participant in that session, even though\n   the INVITE is outside
    of a dialog.  This can happen when a user is\n   invited to the same multicast
    conference by multiple other\n   participants.  If desired, the UAS MAY use identifiers
    within the\n   session description to detect this duplication.  For example, SDP\n
    \  contains a session id and version number in the origin (o) field.  If\n   the
    user is already a member of the session, and the session\n   parameters contained
    in the session description have not changed, the\n   UAS MAY silently accept the
    INVITE (that is, send a 2xx response\n   without prompting the user).\n   If the
    INVITE does not contain a session description, the UAS is\n   being asked to participate
    in a session, and the UAC has asked that\n   the UAS provide the offer of the
    session.  It MUST provide the offer\n   in its first non-failure reliable message
    back to the UAC.  In this\n   specification, that is a 2xx response to the INVITE.\n
    \  The UAS can indicate progress, accept, redirect, or reject the\n   invitation.
    \ In all of these cases, it formulates a response using\n   the procedures described
    in Section 8.2.6.\n"
  title: 13.3.1 Processing of the INVITE
- contents:
  - "13.3.1.1 Progress\n   If the UAS is not able to answer the invitation immediately,
    it can\n   choose to indicate some kind of progress to the UAC (for example, an\n
    \  indication that a phone is ringing).  This is accomplished with a\n   provisional
    response between 101 and 199.  These provisional\n   responses establish early
    dialogs and therefore follow the procedures\n   of Section 12.1.1 in addition
    to those of Section 8.2.6.  A UAS MAY\n   send as many provisional responses as
    it likes.  Each of these MUST\n   indicate the same dialog ID.  However, these
    will not be delivered\n   reliably.\n   If the UAS desires an extended period
    of time to answer the INVITE,\n   it will need to ask for an \"extension\" in
    order to prevent proxies\n   from canceling the transaction.  A proxy has the
    option of canceling\n   a transaction when there is a gap of 3 minutes between
    responses in a\n   transaction.  To prevent cancellation, the UAS MUST send a
    non-100\n   provisional response at every minute, to handle the possibility of\n
    \  lost provisional responses.\n      An INVITE transaction can go on for extended
    durations when the\n      user is placed on hold, or when interworking with PSTN
    systems\n      which allow communications to take place without answering the\n
    \     call.  The latter is common in Interactive Voice Response (IVR)\n      systems.\n"
  title: 13.3.1.1 Progress
- contents:
  - "13.3.1.2 The INVITE is Redirected\n   If the UAS decides to redirect the call,
    a 3xx response is sent.  A\n   300 (Multiple Choices), 301 (Moved Permanently)
    or 302 (Moved\n   Temporarily) response SHOULD contain a Contact header field\n
    \  containing one or more URIs of new addresses to be tried.  The\n   response
    is passed to the INVITE server transaction, which will deal\n   with its retransmissions.\n"
  title: 13.3.1.2 The INVITE is Redirected
- contents:
  - "13.3.1.3 The INVITE is Rejected\n   A common scenario occurs when the callee
    is currently not willing or\n   able to take additional calls at this end system.
    \ A 486 (Busy Here)\n   SHOULD be returned in such a scenario.  If the UAS knows
    that no\n   other end system will be able to accept this call, a 600 (Busy\n   Everywhere)
    response SHOULD be sent instead.  However, it is unlikely\n   that a UAS will
    be able to know this in general, and thus this\n   response will not usually be
    used.  The response is passed to the\n   INVITE server transaction, which will
    deal with its retransmissions.\n   A UAS rejecting an offer contained in an INVITE
    SHOULD return a 488\n   (Not Acceptable Here) response.  Such a response SHOULD
    include a\n   Warning header field value explaining why the offer was rejected.\n"
  title: 13.3.1.3 The INVITE is Rejected
- contents:
  - "13.3.1.4 The INVITE is Accepted\n   The UAS core generates a 2xx response.  This
    response establishes a\n   dialog, and therefore follows the procedures of Section
    12.1.1 in\n   addition to those of Section 8.2.6.\n   A 2xx response to an INVITE
    SHOULD contain the Allow header field and\n   the Supported header field, and
    MAY contain the Accept header field.\n   Including these header fields allows
    the UAC to determine the\n   features and extensions supported by the UAS for
    the duration of the\n   call, without probing.\n   If the INVITE request contained
    an offer, and the UAS had not yet\n   sent an answer, the 2xx MUST contain an
    answer.  If the INVITE did\n   not contain an offer, the 2xx MUST contain an offer
    if the UAS had\n   not yet sent an offer.\n   Once the response has been constructed,
    it is passed to the INVITE\n   server transaction.  Note, however, that the INVITE
    server\n   transaction will be destroyed as soon as it receives this final\n   response
    and passes it to the transport.  Therefore, it is necessary\n   to periodically
    pass the response directly to the transport until the\n   ACK arrives.  The 2xx
    response is passed to the transport with an\n   interval that starts at T1 seconds
    and doubles for each\n   retransmission until it reaches T2 seconds (T1 and T2
    are defined in\n   Section 17).  Response retransmissions cease when an ACK request
    for\n   the response is received.  This is independent of whatever transport\n
    \  protocols are used to send the response.\n      Since 2xx is retransmitted
    end-to-end, there may be hops between\n      UAS and UAC that are UDP.  To ensure
    reliable delivery across\n      these hops, the response is retransmitted periodically
    even if the\n      transport at the UAS is reliable.\n   If the server retransmits
    the 2xx response for 64*T1 seconds without\n   receiving an ACK, the dialog is
    confirmed, but the session SHOULD be\n   terminated.  This is accomplished with
    a BYE, as described in Section\n   15.\n"
  title: 13.3.1.4 The INVITE is Accepted
- contents:
  - "14 Modifying an Existing Session\n   A successful INVITE request (see Section
    13) establishes both a\n   dialog between two user agents and a session using
    the offer-answer\n   model.  Section 12 explains how to modify an existing dialog
    using a\n   target refresh request (for example, changing the remote target URI\n
    \  of the dialog).  This section describes how to modify the actual\n   session.
    \ This modification can involve changing addresses or ports,\n   adding a media
    stream, deleting a media stream, and so on.  This is\n   accomplished by sending
    a new INVITE request within the same dialog\n   that established the session.
    \ An INVITE request sent within an\n   existing dialog is known as a re-INVITE.\n
    \     Note that a single re-INVITE can modify the dialog and the\n      parameters
    of the session at the same time.\n   Either the caller or callee can modify an
    existing session.\n   The behavior of a UA on detection of media failure is a
    matter of\n   local policy.  However, automated generation of re-INVITE or BYE
    is\n   NOT RECOMMENDED to avoid flooding the network with traffic when there\n
    \  is congestion.  In any case, if these messages are sent\n   automatically,
    they SHOULD be sent after some randomized interval.\n      Note that the paragraph
    above refers to automatically generated\n      BYEs and re-INVITEs.  If the user
    hangs up upon media failure, the\n      UA would send a BYE request as usual.\n"
  title: 14 Modifying an Existing Session
- contents:
  - "14.1 UAC Behavior\n   The same offer-answer model that applies to session descriptions
    in\n   INVITEs (Section 13.2.1) applies to re-INVITEs.  As a result, a UAC\n   that
    wants to add a media stream, for example, will create a new\n   offer that contains
    this media stream, and send that in an INVITE\n   request to its peer.  It is
    important to note that the full\n   description of the session, not just the change,
    is sent.  This\n   supports stateless session processing in various elements,
    and\n   supports failover and recovery capabilities.  Of course, a UAC MAY\n   send
    a re-INVITE with no session description, in which case the first\n   reliable
    non-failure response to the re-INVITE will contain the offer\n   (in this specification,
    that is a 2xx response).\n   If the session description format has the capability
    for version\n   numbers, the offerer SHOULD indicate that the version of the session\n
    \  description has changed.\n   The To, From, Call-ID, CSeq, and Request-URI of
    a re-INVITE are set\n   following the same rules as for regular requests within
    an existing\n   dialog, described in Section 12.\n   A UAC MAY choose not to add
    an Alert-Info header field or a body with\n   Content-Disposition \"alert\" to
    re-INVITEs because UASs do not\n   typically alert the user upon reception of
    a re-INVITE.\n   Unlike an INVITE, which can fork, a re-INVITE will never fork,
    and\n   therefore, only ever generate a single final response.  The reason a\n
    \  re-INVITE will never fork is that the Request-URI identifies the\n   target
    as the UA instance it established the dialog with, rather than\n   identifying
    an address-of-record for the user.\n   Note that a UAC MUST NOT initiate a new
    INVITE transaction within a\n   dialog while another INVITE transaction is in
    progress in either\n   direction.\n      1. If there is an ongoing INVITE client
    transaction, the TU MUST\n         wait until the transaction reaches the completed
    or terminated\n         state before initiating the new INVITE.\n      2. If there
    is an ongoing INVITE server transaction, the TU MUST\n         wait until the
    transaction reaches the confirmed or terminated\n         state before initiating
    the new INVITE.\n   However, a UA MAY initiate a regular transaction while an
    INVITE\n   transaction is in progress.  A UA MAY also initiate an INVITE\n   transaction
    while a regular transaction is in progress.\n   If a UA receives a non-2xx final
    response to a re-INVITE, the session\n   parameters MUST remain unchanged, as
    if no re-INVITE had been issued.\n   Note that, as stated in Section 12.2.1.2,
    if the non-2xx final\n   response is a 481 (Call/Transaction Does Not Exist),
    or a 408\n   (Request Timeout), or no response at all is received for the re-\n
    \  INVITE (that is, a timeout is returned by the INVITE client\n   transaction),
    the UAC will terminate the dialog.\n   If a UAC receives a 491 response to a re-INVITE,
    it SHOULD start a\n   timer with a value T chosen as follows:\n      1. If the
    UAC is the owner of the Call-ID of the dialog ID\n         (meaning it generated
    the value), T has a randomly chosen value\n         between 2.1 and 4 seconds
    in units of 10 ms.\n      2. If the UAC is not the owner of the Call-ID of the
    dialog ID, T\n         has a randomly chosen value of between 0 and 2 seconds
    in units\n         of 10 ms.\n   When the timer fires, the UAC SHOULD attempt
    the re-INVITE once more,\n   if it still desires for that session modification
    to take place.  For\n   example, if the call was already hung up with a BYE, the
    re-INVITE\n   would not take place.\n   The rules for transmitting a re-INVITE
    and for generating an ACK for\n   a 2xx response to re-INVITE are the same as
    for the initial INVITE\n   (Section 13.2.1).\n"
  title: 14.1 UAC Behavior
- contents:
  - "14.2 UAS Behavior\n   Section 13.3.1 describes the procedure for distinguishing
    incoming\n   re-INVITEs from incoming initial INVITEs and handling a re-INVITE
    for\n   an existing dialog.\n   A UAS that receives a second INVITE before it
    sends the final\n   response to a first INVITE with a lower CSeq sequence number
    on the\n   same dialog MUST return a 500 (Server Internal Error) response to the\n
    \  second INVITE and MUST include a Retry-After header field with a\n   randomly
    chosen value of between 0 and 10 seconds.\n   A UAS that receives an INVITE on
    a dialog while an INVITE it had sent\n   on that dialog is in progress MUST return
    a 491 (Request Pending)\n   response to the received INVITE.\n   If a UA receives
    a re-INVITE for an existing dialog, it MUST check\n   any version identifiers
    in the session description or, if there are\n   no version identifiers, the content
    of the session description to see\n   if it has changed.  If the session description
    has changed, the UAS\n   MUST adjust the session parameters accordingly, possibly
    after asking\n   the user for confirmation.\n      Versioning of the session description
    can be used to accommodate\n      the capabilities of new arrivals to a conference,
    add or delete\n      media, or change from a unicast to a multicast conference.\n
    \  If the new session description is not acceptable, the UAS can reject\n   it
    by returning a 488 (Not Acceptable Here) response for the re-\n   INVITE.  This
    response SHOULD include a Warning header field.\n   If a UAS generates a 2xx response
    and never receives an ACK, it\n   SHOULD generate a BYE to terminate the dialog.\n
    \  A UAS MAY choose not to generate 180 (Ringing) responses for a re-\n   INVITE
    because UACs do not typically render this information to the\n   user.  For the
    same reason, UASs MAY choose not to use an Alert-Info\n   header field or a body
    with Content-Disposition \"alert\" in responses\n   to a re-INVITE.\n   A UAS
    providing an offer in a 2xx (because the INVITE did not contain\n   an offer)
    SHOULD construct the offer as if the UAS were making a\n   brand new call, subject
    to the constraints of sending an offer that\n   updates an existing session, as
    described in [13] in the case of SDP.\n   Specifically, this means that it SHOULD
    include as many media formats\n   and media types that the UA is willing to support.
    \ The UAS MUST\n   ensure that the session description overlaps with its previous\n
    \  session description in media formats, transports, or other parameters\n   that
    require support from the peer.  This is to avoid the need for\n   the peer to
    reject the session description.  If, however, it is\n   unacceptable to the UAC,
    the UAC SHOULD generate an answer with a\n   valid session description, and then
    send a BYE to terminate the\n   session.\n"
  title: 14.2 UAS Behavior
- contents:
  - "15 Terminating a Session\n   This section describes the procedures for terminating
    a session\n   established by SIP.  The state of the session and the state of the\n
    \  dialog are very closely related.  When a session is initiated with an\n   INVITE,
    each 1xx or 2xx response from a distinct UAS creates a\n   dialog, and if that
    response completes the offer/answer exchange, it\n   also creates a session.  As
    a result, each session is \"associated\"\n   with a single dialog - the one which
    resulted in its creation.  If an\n   initial INVITE generates a non-2xx final
    response, that terminates\n   all sessions (if any) and all dialogs (if any) that
    were created\n   through responses to the request.  By virtue of completing the\n
    \  transaction, a non-2xx final response also prevents further sessions\n   from
    being created as a result of the INVITE.  The BYE request is\n   used to terminate
    a specific session or attempted session.  In this\n   case, the specific session
    is the one with the peer UA on the other\n   side of the dialog.  When a BYE is
    received on a dialog, any session\n   associated with that dialog SHOULD terminate.
    \ A UA MUST NOT send a\n   BYE outside of a dialog.  The caller's UA MAY send
    a BYE for either\n   confirmed or early dialogs, and the callee's UA MAY send
    a BYE on\n   confirmed dialogs, but MUST NOT send a BYE on early dialogs.\n   However,
    the callee's UA MUST NOT send a BYE on a confirmed dialog\n   until it has received
    an ACK for its 2xx response or until the server\n   transaction times out.  If
    no SIP extensions have defined other\n   application layer states associated with
    the dialog, the BYE also\n   terminates the dialog.\n   The impact of a non-2xx
    final response to INVITE on dialogs and\n   sessions makes the use of CANCEL attractive.
    \ The CANCEL attempts to\n   force a non-2xx response to the INVITE (in particular,
    a 487).\n   Therefore, if a UAC wishes to give up on its call attempt entirely,\n
    \  it can send a CANCEL.  If the INVITE results in 2xx final response(s)\n   to
    the INVITE, this means that a UAS accepted the invitation while\n   the CANCEL
    was in progress.  The UAC MAY continue with the sessions\n   established by any
    2xx responses, or MAY terminate them with BYE.\n      The notion of \"hanging
    up\" is not well defined within SIP.  It is\n      specific to a particular, albeit
    common, user interface.\n      Typically, when the user hangs up, it indicates
    a desire to\n      terminate the attempt to establish a session, and to terminate
    any\n      sessions already created.  For the caller's UA, this would imply a\n
    \     CANCEL request if the initial INVITE has not generated a final\n      response,
    and a BYE to all confirmed dialogs after a final\n      response.  For the callee's
    UA, it would typically imply a BYE;\n      presumably, when the user picked up
    the phone, a 2xx was\n      generated, and so hanging up would result in a BYE
    after the ACK\n      is received.  This does not mean a user cannot hang up before\n
    \     receipt of the ACK, it just means that the software in his phone\n      needs
    to maintain state for a short while in order to clean up\n      properly.  If
    the particular UI allows for the user to reject a\n      call before its answered,
    a 403 (Forbidden) is a good way to\n      express that.  As per the rules above,
    a BYE can't be sent.\n"
  title: 15 Terminating a Session
- contents:
  - '15.1 Terminating a Session with a BYE Request

    '
  title: 15.1 Terminating a Session with a BYE Request
- contents:
  - "15.1.1 UAC Behavior\n   A BYE request is constructed as would any other request
    within a\n   dialog, as described in Section 12.\n   Once the BYE is constructed,
    the UAC core creates a new non-INVITE\n   client transaction, and passes it the
    BYE request.  The UAC MUST\n   consider the session terminated (and therefore
    stop sending or\n   listening for media) as soon as the BYE request is passed
    to the\n   client transaction.  If the response for the BYE is a 481\n   (Call/Transaction
    Does Not Exist) or a 408 (Request Timeout) or no\n   response at all is received
    for the BYE (that is, a timeout is\n   returned by the client transaction), the
    UAC MUST consider the\n   session and the dialog terminated.\n"
  title: 15.1.1 UAC Behavior
- contents:
  - "15.1.2 UAS Behavior\n   A UAS first processes the BYE request according to the
    general UAS\n   processing described in Section 8.2.  A UAS core receiving a BYE\n
    \  request checks if it matches an existing dialog.  If the BYE does not\n   match
    an existing dialog, the UAS core SHOULD generate a 481\n   (Call/Transaction Does
    Not Exist) response and pass that to the\n   server transaction.\n      This rule
    means that a BYE sent without tags by a UAC will be\n      rejected.  This is
    a change from RFC 2543, which allowed BYE\n      without tags.\n   A UAS core
    receiving a BYE request for an existing dialog MUST follow\n   the procedures
    of Section 12.2.2 to process the request.  Once done,\n   the UAS SHOULD terminate
    the session (and therefore stop sending and\n   listening for media).  The only
    case where it can elect not to are\n   multicast sessions, where participation
    is possible even if the other\n   participant in the dialog has terminated its
    involvement in the\n   session.  Whether or not it ends its participation on the
    session,\n   the UAS core MUST generate a 2xx response to the BYE, and MUST pass\n
    \  that to the server transaction for transmission.\n   The UAS MUST still respond
    to any pending requests received for that\n   dialog.  It is RECOMMENDED that
    a 487 (Request Terminated) response\n   be generated to those pending requests.\n"
  title: 15.1.2 UAS Behavior
- contents:
  - '16 Proxy Behavior

    '
  title: 16 Proxy Behavior
- contents:
  - "16.1 Overview\n   SIP proxies are elements that route SIP requests to user agent\n
    \  servers and SIP responses to user agent clients.  A request may\n   traverse
    several proxies on its way to a UAS.  Each will make routing\n   decisions, modifying
    the request before forwarding it to the next\n   element.  Responses will route
    through the same set of proxies\n   traversed by the request in the reverse order.\n
    \  Being a proxy is a logical role for a SIP element.  When a request\n   arrives,
    an element that can play the role of a proxy first decides\n   if it needs to
    respond to the request on its own.  For instance, the\n   request may be malformed
    or the element may need credentials from the\n   client before acting as a proxy.
    \ The element MAY respond with any\n   appropriate error code.  When responding
    directly to a request, the\n   element is playing the role of a UAS and MUST behave
    as described in\n   Section 8.2.\n   A proxy can operate in either a stateful
    or stateless mode for each\n   new request.  When stateless, a proxy acts as a
    simple forwarding\n   element.  It forwards each request downstream to a single
    element\n   determined by making a targeting and routing decision based on the\n
    \  request.  It simply forwards every response it receives upstream.  A\n   stateless
    proxy discards information about a message once the message\n   has been forwarded.
    \ A stateful proxy remembers information\n   (specifically, transaction state)
    about each incoming request and any\n   requests it sends as a result of processing
    the incoming request.  It\n   uses this information to affect the processing of
    future messages\n   associated with that request.  A stateful proxy MAY choose
    to \"fork\"\n   a request, routing it to multiple destinations.  Any request that
    is\n   forwarded to more than one location MUST be handled statefully.\n   In
    some circumstances, a proxy MAY forward requests using stateful\n   transports
    (such as TCP) without being transaction-stateful.  For\n   instance, a proxy MAY
    forward a request from one TCP connection to\n   another transaction statelessly
    as long as it places enough\n   information in the message to be able to forward
    the response down\n   the same connection the request arrived on.  Requests forwarded\n
    \  between different types of transports where the proxy's TU must take\n   an
    active role in ensuring reliable delivery on one of the transports\n   MUST be
    forwarded transaction statefully.\n   A stateful proxy MAY transition to stateless
    operation at any time\n   during the processing of a request, so long as it did
    not do anything\n   that would otherwise prevent it from being stateless initially\n
    \  (forking, for example, or generation of a 100 response).  When\n   performing
    such a transition, all state is simply discarded.  The\n   proxy SHOULD NOT initiate
    a CANCEL request.\n   Much of the processing involved when acting statelessly
    or statefully\n   for a request is identical.  The next several subsections are
    written\n   from the point of view of a stateful proxy.  The last section calls\n
    \  out those places where a stateless proxy behaves differently.\n"
  title: 16.1 Overview
- contents:
  - "16.2 Stateful Proxy\n   When stateful, a proxy is purely a SIP transaction processing
    engine.\n   Its behavior is modeled here in terms of the server and client\n   transactions
    defined in Section 17.  A stateful proxy has a server\n   transaction associated
    with one or more client transactions by a\n   higher layer proxy processing component
    (see figure 3), known as a\n   proxy core.  An incoming request is processed by
    a server\n   transaction.  Requests from the server transaction are passed to
    a\n   proxy core.  The proxy core determines where to route the request,\n   choosing
    one or more next-hop locations.  An outgoing request for\n   each next-hop location
    is processed by its own associated client\n   transaction.  The proxy core collects
    the responses from the client\n   transactions and uses them to send responses
    to the server\n   transaction.\n   A stateful proxy creates a new server transaction
    for each new\n   request received.  Any retransmissions of the request will then
    be\n   handled by that server transaction per Section 17.  The proxy core\n   MUST
    behave as a UAS with respect to sending an immediate provisional\n   on that server
    transaction (such as 100 Trying) as described in\n   Section 8.2.6.  Thus, a stateful
    proxy SHOULD NOT generate 100\n   (Trying) responses to non-INVITE requests.\n
    \  This is a model of proxy behavior, not of software.  An\n   implementation
    is free to take any approach that replicates the\n   external behavior this model
    defines.\n   For all new requests, including any with unknown methods, an element\n
    \  intending to proxy the request MUST:\n      1. Validate the request (Section
    16.3)\n      2. Preprocess routing information (Section 16.4)\n      3. Determine
    target(s) for the request (Section 16.5)\n            +--------------------+\n
    \           |                    | +---+\n            |                    | |
    C |\n            |                    | | T |\n            |                    |
    +---+\n      +---+ |       Proxy        | +---+   CT = Client Transaction\n      |
    S | |  \"Higher\" Layer    | | C |\n      | T | |                    | | T |   ST
    = Server Transaction\n      +---+ |                    | +---+\n            |
    \                   | +---+\n            |                    | | C |\n            |
    \                   | | T |\n            |                    | +---+\n            +--------------------+\n
    \              Figure 3: Stateful Proxy Model\n      4. Forward the request to
    each target (Section 16.6)\n      5. Process all responses (Section 16.7)\n"
  title: 16.2 Stateful Proxy
- contents:
  - "16.3 Request Validation\n   Before an element can proxy a request, it MUST verify
    the message's\n   validity.  A valid message must pass the following checks:\n
    \     1. Reasonable Syntax\n      2. URI scheme\n      3. Max-Forwards\n      4.
    (Optional) Loop Detection\n      5. Proxy-Require\n      6. Proxy-Authorization\n
    \  If any of these checks fail, the element MUST behave as a user agent\n   server
    (see Section 8.2) and respond with an error code.\n   Notice that a proxy is not
    required to detect merged requests and\n   MUST NOT treat merged requests as an
    error condition.  The endpoints\n   receiving the requests will resolve the merge
    as described in Section\n   8.2.2.2.\n   1. Reasonable syntax check\n      The
    request MUST be well-formed enough to be handled with a server\n      transaction.
    \ Any components involved in the remainder of these\n      Request Validation
    steps or the Request Forwarding section MUST be\n      well-formed.  Any other
    components, well-formed or not, SHOULD be\n      ignored and remain unchanged
    when the message is forwarded.  For\n      instance, an element would not reject
    a request because of a\n      malformed Date header field.  Likewise, a proxy
    would not remove a\n      malformed Date header field before forwarding a request.\n
    \     This protocol is designed to be extended.  Future extensions may\n      define
    new methods and header fields at any time.  An element MUST\n      NOT refuse
    to proxy a request because it contains a method or\n      header field it does
    not know about.\n   2. URI scheme check\n      If the Request-URI has a URI whose
    scheme is not understood by the\n      proxy, the proxy SHOULD reject the request
    with a 416 (Unsupported\n      URI Scheme) response.\n   3. Max-Forwards check\n
    \     The Max-Forwards header field (Section 20.22) is used to limit the\n      number
    of elements a SIP request can traverse.\n      If the request does not contain
    a Max-Forwards header field, this\n      check is passed.\n      If the request
    contains a Max-Forwards header field with a field\n      value greater than zero,
    the check is passed.\n      If the request contains a Max-Forwards header field
    with a field\n      value of zero (0), the element MUST NOT forward the request.
    \ If\n      the request was for OPTIONS, the element MAY act as the final\n      recipient
    and respond per Section 11.  Otherwise, the element MUST\n      return a 483 (Too
    many hops) response.\n   4. Optional Loop Detection check\n      An element MAY
    check for forwarding loops before forwarding a\n      request.  If the request
    contains a Via header field with a sent-\n      by value that equals a value placed
    into previous requests by the\n      proxy, the request has been forwarded by
    this element before.  The\n      request has either looped or is legitimately
    spiraling through the\n      element.  To determine if the request has looped,
    the element MAY\n      perform the branch parameter calculation described in Step
    8 of\n      Section 16.6 on this message and compare it to the parameter\n      received
    in that Via header field.  If the parameters match, the\n      request has looped.
    \ If they differ, the request is spiraling, and\n      processing continues.  If
    a loop is detected, the element MAY\n      return a 482 (Loop Detected) response.\n
    \  5. Proxy-Require check\n      Future extensions to this protocol may introduce
    features that\n      require special handling by proxies.  Endpoints will include
    a\n      Proxy-Require header field in requests that use these features,\n      telling
    the proxy not to process the request unless the feature is\n      understood.\n
    \     If the request contains a Proxy-Require header field (Section\n      20.29)
    with one or more option-tags this element does not\n      understand, the element
    MUST return a 420 (Bad Extension)\n      response.  The response MUST include
    an Unsupported (Section\n      20.40) header field listing those option-tags the
    element did not\n      understand.\n   6. Proxy-Authorization check\n      If
    an element requires credentials before forwarding a request,\n      the request
    MUST be inspected as described in Section 22.3.  That\n      section also defines
    what the element must do if the inspection\n      fails.\n"
  title: 16.3 Request Validation
- contents:
  - "16.4 Route Information Preprocessing\n   The proxy MUST inspect the Request-URI
    of the request.  If the\n   Request-URI of the request contains a value this proxy
    previously\n   placed into a Record-Route header field (see Section 16.6 item
    4),\n   the proxy MUST replace the Request-URI in the request with the last\n
    \  value from the Route header field, and remove that value from the\n   Route
    header field.  The proxy MUST then proceed as if it received\n   this modified
    request.\n      This will only happen when the element sending the request to
    the\n      proxy (which may have been an endpoint) is a strict router.  This\n
    \     rewrite on receive is necessary to enable backwards compatibility\n      with
    those elements.  It also allows elements following this\n      specification to
    preserve the Request-URI through strict-routing\n      proxies (see Section 12.2.1.1).\n
    \     This requirement does not obligate a proxy to keep state in order\n      to
    detect URIs it previously placed in Record-Route header fields.\n      Instead,
    a proxy need only place enough information in those URIs\n      to recognize them
    as values it provided when they later appear.\n   If the Request-URI contains
    a maddr parameter, the proxy MUST check\n   to see if its value is in the set
    of addresses or domains the proxy\n   is configured to be responsible for.  If
    the Request-URI has a maddr\n   parameter with a value the proxy is responsible
    for, and the request\n   was received using the port and transport indicated (explicitly
    or by\n   default) in the Request-URI, the proxy MUST strip the maddr and any\n
    \  non-default port or transport parameter and continue processing as if\n   those
    values had not been present in the request.\n      A request may arrive with a
    maddr matching the proxy, but on a\n      port or transport different from that
    indicated in the URI.  Such\n      a request needs to be forwarded to the proxy
    using the indicated\n      port and transport.\n   If the first value in the Route
    header field indicates this proxy,\n   the proxy MUST remove that value from the
    request.\n"
  title: 16.4 Route Information Preprocessing
- contents:
  - "16.5 Determining Request Targets\n   Next, the proxy calculates the target(s)
    of the request.  The set of\n   targets will either be predetermined by the contents
    of the request\n   or will be obtained from an abstract location service.  Each
    target\n   in the set is represented as a URI.\n   If the Request-URI of the request
    contains an maddr parameter, the\n   Request-URI MUST be placed into the target
    set as the only target\n   URI, and the proxy MUST proceed to Section 16.6.\n
    \  If the domain of the Request-URI indicates a domain this element is\n   not
    responsible for, the Request-URI MUST be placed into the target\n   set as the
    only target, and the element MUST proceed to the task of\n   Request Forwarding
    (Section 16.6).\n      There are many circumstances in which a proxy might receive
    a\n      request for a domain it is not responsible for.  A firewall proxy\n      handling
    outgoing calls (the way HTTP proxies handle outgoing\n      requests) is an example
    of where this is likely to occur.\n   If the target set for the request has not
    been predetermined as\n   described above, this implies that the element is responsible
    for the\n   domain in the Request-URI, and the element MAY use whatever mechanism\n
    \  it desires to determine where to send the request.  Any of these\n   mechanisms
    can be modeled as accessing an abstract Location Service.\n   This may consist
    of obtaining information from a location service\n   created by a SIP Registrar,
    reading a database, consulting a presence\n   server, utilizing other protocols,
    or simply performing an\n   algorithmic substitution on the Request-URI.  When
    accessing the\n   location service constructed by a registrar, the Request-URI
    MUST\n   first be canonicalized as described in Section 10.3 before being used\n
    \  as an index.  The output of these mechanisms is used to construct the\n   target
    set.\n   If the Request-URI does not provide sufficient information for the\n
    \  proxy to determine the target set, it SHOULD return a 485 (Ambiguous)\n   response.
    \ This response SHOULD contain a Contact header field\n   containing URIs of new
    addresses to be tried.  For example, an INVITE\n   to sip:John.Smith@company.com
    may be ambiguous at a proxy whose\n   location service has multiple John Smiths
    listed.  See Section\n   21.4.23 for details.\n   Any information in or about
    the request or the current environment of\n   the element MAY be used in the construction
    of the target set.  For\n   instance, different sets may be constructed depending
    on contents or\n   the presence of header fields and bodies, the time of day of
    the\n   request's arrival, the interface on which the request arrived,\n   failure
    of previous requests, or even the element's current level of\n   utilization.\n
    \  As potential targets are located through these services, their URIs\n   are
    added to the target set.  Targets can only be placed in the\n   target set once.
    \ If a target URI is already present in the set\n   (based on the definition of
    equality for the URI type), it MUST NOT\n   be added again.\n   A proxy MUST NOT
    add additional targets to the target set if the\n   Request-URI of the original
    request does not indicate a resource this\n   proxy is responsible for.\n      A
    proxy can only change the Request-URI of a request during\n      forwarding if
    it is responsible for that URI.  If the proxy is not\n      responsible for that
    URI, it will not recurse on 3xx or 416\n      responses as described below.\n
    \  If the Request-URI of the original request indicates a resource this\n   proxy
    is responsible for, the proxy MAY continue to add targets to\n   the set after
    beginning Request Forwarding.  It MAY use any\n   information obtained during
    that processing to determine new targets.\n   For instance, a proxy may choose
    to incorporate contacts obtained in\n   a redirect response (3xx) into the target
    set.  If a proxy uses a\n   dynamic source of information while building the target
    set (for\n   instance, if it consults a SIP Registrar), it SHOULD monitor that\n
    \  source for the duration of processing the request.  New locations\n   SHOULD
    be added to the target set as they become available.  As\n   above, any given
    URI MUST NOT be added to the set more than once.\n      Allowing a URI to be added
    to the set only once reduces\n      unnecessary network traffic, and in the case
    of incorporating\n      contacts from redirect requests prevents infinite recursion.\n
    \  For example, a trivial location service is a \"no-op\", where the\n   target
    URI is equal to the incoming request URI.  The request is sent\n   to a specific
    next hop proxy for further processing.  During request\n   forwarding of Section
    16.6, Item 6, the identity of that next hop,\n   expressed as a SIP or SIPS URI,
    is inserted as the top-most Route\n   header field value into the request.\n   If
    the Request-URI indicates a resource at this proxy that does not\n   exist, the
    proxy MUST return a 404 (Not Found) response.\n   If the target set remains empty
    after applying all of the above, the\n   proxy MUST return an error response,
    which SHOULD be the 480\n   (Temporarily Unavailable) response.\n"
  title: 16.5 Determining Request Targets
- contents:
  - "16.6 Request Forwarding\n   As soon as the target set is non-empty, a proxy MAY
    begin forwarding\n   the request.  A stateful proxy MAY process the set in any
    order.  It\n   MAY process multiple targets serially, allowing each client\n   transaction
    to complete before starting the next.  It MAY start\n   client transactions with
    every target in parallel.  It also MAY\n   arbitrarily divide the set into groups,
    processing the groups\n   serially and processing the targets in each group in
    parallel.\n   A common ordering mechanism is to use the qvalue parameter of targets\n
    \  obtained from Contact header fields (see Section 20.10).  Targets are\n   processed
    from highest qvalue to lowest.  Targets with equal qvalues\n   may be processed
    in parallel.\n   A stateful proxy must have a mechanism to maintain the target
    set as\n   responses are received and associate the responses to each forwarded\n
    \  request with the original request.  For the purposes of this model,\n   this
    mechanism is a \"response context\" created by the proxy layer\n   before forwarding
    the first request.\n   For each target, the proxy forwards the request following
    these\n   steps:\n      1.  Make a copy of the received request\n      2.  Update
    the Request-URI\n      3.  Update the Max-Forwards header field\n      4.  Optionally
    add a Record-route header field value\n      5.  Optionally add additional header
    fields\n      6.  Postprocess routing information\n      7.  Determine the next-hop
    address, port, and transport\n      8.  Add a Via header field value\n      9.
    \ Add a Content-Length header field if necessary\n      10. Forward the new request\n
    \     11. Set timer C\n   Each of these steps is detailed below:\n      1. Copy
    request\n         The proxy starts with a copy of the received request.  The copy\n
    \        MUST initially contain all of the header fields from the\n         received
    request.  Fields not detailed in the processing\n         described below MUST
    NOT be removed.  The copy SHOULD maintain\n         the ordering of the header
    fields as in the received request.\n         The proxy MUST NOT reorder field
    values with a common field\n         name (See Section 7.3.1).  The proxy MUST
    NOT add to, modify,\n         or remove the message body.\n         An actual
    implementation need not perform a copy; the primary\n         requirement is that
    the processing for each next hop begin with\n         the same request.\n      2.
    Request-URI\n         The Request-URI in the copy's start line MUST be replaced
    with\n         the URI for this target.  If the URI contains any parameters\n
    \        not allowed in a Request-URI, they MUST be removed.\n         This is
    the essence of a proxy's role.  This is the mechanism\n         through which
    a proxy routes a request toward its destination.\n         In some circumstances,
    the received Request-URI is placed into\n         the target set without being
    modified.  For that target, the\n         replacement above is effectively a no-op.\n
    \     3. Max-Forwards\n         If the copy contains a Max-Forwards header field,
    the proxy\n         MUST decrement its value by one (1).\n         If the copy
    does not contain a Max-Forwards header field, the\n         proxy MUST add one
    with a field value, which SHOULD be 70.\n         Some existing UAs will not provide
    a Max-Forwards header field\n         in a request.\n      4. Record-Route\n         If
    this proxy wishes to remain on the path of future requests\n         in a dialog
    created by this request (assuming the request\n         creates a dialog), it
    MUST insert a Record-Route header field\n         value into the copy before any
    existing Record-Route header\n         field values, even if a Route header field
    is already present.\n         Requests establishing a dialog may contain a preloaded
    Route\n         header field.\n         If this request is already part of a dialog,
    the proxy SHOULD\n         insert a Record-Route header field value if it wishes
    to remain\n         on the path of future requests in the dialog.  In normal\n
    \        endpoint operation as described in Section 12, these Record-\n         Route
    header field values will not have any effect on the route\n         sets used
    by the endpoints.\n         The proxy will remain on the path if it chooses to
    not insert a\n         Record-Route header field value into requests that are
    already\n         part of a dialog.  However, it would be removed from the path\n
    \        when an endpoint that has failed reconstitutes the dialog.\n         A
    proxy MAY insert a Record-Route header field value into any\n         request.
    \ If the request does not initiate a dialog, the\n         endpoints will ignore
    the value.  See Section 12 for details on\n         how endpoints use the Record-Route
    header field values to\n         construct Route header fields.\n         Each
    proxy in the path of a request chooses whether to add a\n         Record-Route
    header field value independently - the presence of\n         a Record-Route header
    field in a request does not obligate this\n         proxy to add a value.\n         The
    URI placed in the Record-Route header field value MUST be a\n         SIP or SIPS
    URI.  This URI MUST contain an lr parameter (see\n         Section 19.1.1).  This
    URI MAY be different for each\n         destination the request is forwarded to.
    \ The URI SHOULD NOT\n         contain the transport parameter unless the proxy
    has knowledge\n         (such as in a private network) that the next downstream
    element\n         that will be in the path of subsequent requests supports that\n
    \        transport.\n         The URI this proxy provides will be used by some
    other element\n         to make a routing decision.  This proxy, in general, has
    no way\n         of knowing the capabilities of that element, so it must\n         restrict
    itself to the mandatory elements of a SIP\n         implementation: SIP URIs and
    either the TCP or UDP transports.\n         The URI placed in the Record-Route
    header field MUST resolve to\n         the element inserting it (or a suitable
    stand-in) when the\n         server location procedures of [4] are applied to
    it, so that\n         subsequent requests reach the same SIP element.  If the\n
    \        Request-URI contains a SIPS URI, or the topmost Route header\n         field
    value (after the post processing of bullet 6) contains a\n         SIPS URI, the
    URI placed into the Record-Route header field\n         MUST be a SIPS URI.  Furthermore,
    if the request was not\n         received over TLS, the proxy MUST insert a Record-Route
    header\n         field.  In a similar fashion, a proxy that receives a request\n
    \        over TLS, but generates a request without a SIPS URI in the\n         Request-URI
    or topmost Route header field value (after the post\n         processing of bullet
    6), MUST insert a Record-Route header\n         field that is not a SIPS URI.\n
    \        A proxy at a security perimeter must remain on the perimeter\n         throughout
    the dialog.\n         If the URI placed in the Record-Route header field needs
    to be\n         rewritten when it passes back through in a response, the URI\n
    \        MUST be distinct enough to locate at that time.  (The request\n         may
    spiral through this proxy, resulting in more than one\n         Record-Route header
    field value being added).  Item 8 of\n         Section 16.7 recommends a mechanism
    to make the URI\n         sufficiently distinct.\n         The proxy MAY include
    parameters in the Record-Route header\n         field value.  These will be echoed
    in some responses to the\n         request such as the 200 (OK) responses to INVITE.
    \ Such\n         parameters may be useful for keeping state in the message\n         rather
    than the proxy.\n         If a proxy needs to be in the path of any type of dialog
    (such\n         as one straddling a firewall), it SHOULD add a Record-Route\n
    \        header field value to every request with a method it does not\n         understand
    since that method may have dialog semantics.\n         The URI a proxy places
    into a Record-Route header field is only\n         valid for the lifetime of any
    dialog created by the transaction\n         in which it occurs.  A dialog-stateful
    proxy, for example, MAY\n         refuse to accept future requests with that value
    in the\n         Request-URI after the dialog has terminated.  Non-dialog-\n         stateful
    proxies, of course, have no concept of when the dialog\n         has terminated,
    but they MAY encode enough information in the\n         value to compare it against
    the dialog identifier of future\n         requests and MAY reject requests not
    matching that information.\n         Endpoints MUST NOT use a URI obtained from
    a Record-Route\n         header field outside the dialog in which it was provided.
    \ See\n         Section 12 for more information on an endpoint's use of\n         Record-Route
    header fields.\n         Record-routing may be required by certain services where
    the\n         proxy needs to observe all messages in a dialog.  However, it\n
    \        slows down processing and impairs scalability and thus proxies\n         should
    only record-route if required for a particular service.\n         The Record-Route
    process is designed to work for any SIP\n         request that initiates a dialog.
    \ INVITE is the only such\n         request in this specification, but extensions
    to the protocol\n         MAY define others.\n      5. Add Additional Header Fields\n
    \        The proxy MAY add any other appropriate header fields to the\n         copy
    at this point.\n      6. Postprocess routing information\n         A proxy MAY
    have a local policy that mandates that a request\n         visit a specific set
    of proxies before being delivered to the\n         destination.  A proxy MUST
    ensure that all such proxies are\n         loose routers.  Generally, this can
    only be known with\n         certainty if the proxies are within the same administrative\n
    \        domain.  This set of proxies is represented by a set of URIs\n         (each
    of which contains the lr parameter).  This set MUST be\n         pushed into the
    Route header field of the copy ahead of any\n         existing values, if present.
    \ If the Route header field is\n         absent, it MUST be added, containing
    that list of URIs.\n         If the proxy has a local policy that mandates that
    the request\n         visit one specific proxy, an alternative to pushing a Route\n
    \        value into the Route header field is to bypass the forwarding\n         logic
    of item 10 below, and instead just send the request to\n         the address,
    port, and transport for that specific proxy.  If\n         the request has a Route
    header field, this alternative MUST NOT\n         be used unless it is known that
    next hop proxy is a loose\n         router.  Otherwise, this approach MAY be used,
    but the Route\n         insertion mechanism above is preferred for its robustness,\n
    \        flexibility, generality and consistency of operation.\n         Furthermore,
    if the Request-URI contains a SIPS URI, TLS MUST\n         be used to communicate
    with that proxy.\n         If the copy contains a Route header field, the proxy
    MUST\n         inspect the URI in its first value.  If that URI does not\n         contain
    an lr parameter, the proxy MUST modify the copy as\n         follows:\n         -
    \ The proxy MUST place the Request-URI into the Route header\n            field
    as the last value.\n         -  The proxy MUST then place the first Route header
    field value\n            into the Request-URI and remove that value from the Route\n
    \           header field.\n         Appending the Request-URI to the Route header
    field is part of\n         a mechanism used to pass the information in that Request-URI\n
    \        through strict-routing elements.  \"Popping\" the first Route\n         header
    field value into the Request-URI formats the message the\n         way a strict-routing
    element expects to receive it (with its\n         own URI in the Request-URI and
    the next location to visit in\n         the first Route header field value).\n
    \     7. Determine Next-Hop Address, Port, and Transport\n         The proxy MAY
    have a local policy to send the request to a\n         specific IP address, port,
    and transport, independent of the\n         values of the Route and Request-URI.
    \ Such a policy MUST NOT be\n         used if the proxy is not certain that the
    IP address, port, and\n         transport correspond to a server that is a loose
    router.\n         However, this mechanism for sending the request through a\n
    \        specific next hop is NOT RECOMMENDED; instead a Route header\n         field
    should be used for that purpose as described above.\n         In the absence of
    such an overriding mechanism, the proxy\n         applies the procedures listed
    in [4] as follows to determine\n         where to send the request.  If the proxy
    has reformatted the\n         request to send to a strict-routing element as described
    in\n         step 6 above, the proxy MUST apply those procedures to the\n         Request-URI
    of the request.  Otherwise, the proxy MUST apply\n         the procedures to the
    first value in the Route header field, if\n         present, else the Request-URI.
    \ The procedures will produce an\n         ordered set of (address, port, transport)
    tuples.\n         Independently of which URI is being used as input to the\n         procedures
    of [4], if the Request-URI specifies a SIPS\n         resource, the proxy MUST
    follow the procedures of [4] as if the\n         input URI were a SIPS URI.\n
    \        As described in [4], the proxy MUST attempt to deliver the\n         message
    to the first tuple in that set, and proceed through the\n         set in order
    until the delivery attempt succeeds.\n         For each tuple attempted, the proxy
    MUST format the message as\n         appropriate for the tuple and send the request
    using a new\n         client transaction as detailed in steps 8 through 10.\n
    \        Since each attempt uses a new client transaction, it represents\n         a
    new branch.  Thus, the branch parameter provided with the Via\n         header
    field inserted in step 8 MUST be different for each\n         attempt.\n         If
    the client transaction reports failure to send the request\n         or a timeout
    from its state machine, the proxy continues to the\n         next address in that
    ordered set.  If the ordered set is\n         exhausted, the request cannot be
    forwarded to this element in\n         the target set.  The proxy does not need
    to place anything in\n         the response context, but otherwise acts as if
    this element of\n         the target set returned a 408 (Request Timeout) final
    response.\n      8. Add a Via header field value\n         The proxy MUST insert
    a Via header field value into the copy\n         before the existing Via header
    field values.  The construction\n         of this value follows the same guidelines
    of Section 8.1.1.7.\n         This implies that the proxy will compute its own
    branch\n         parameter, which will be globally unique for that branch, and\n
    \        contain the requisite magic cookie. Note that this implies that\n         the
    branch parameter will be different for different instances\n         of a spiraled
    or looped request through a proxy.\n         Proxies choosing to detect loops
    have an additional constraint\n         in the value they use for construction
    of the branch parameter.\n         A proxy choosing to detect loops SHOULD create
    a branch\n         parameter separable into two parts by the implementation.  The\n
    \        first part MUST satisfy the constraints of Section 8.1.1.7 as\n         described
    above.  The second is used to perform loop detection\n         and distinguish
    loops from spirals.\n         Loop detection is performed by verifying that, when
    a request\n         returns to a proxy, those fields having an impact on the\n
    \        processing of the request have not changed.  The value placed\n         in
    this part of the branch parameter SHOULD reflect all of\n         those fields
    (including any Route, Proxy-Require and Proxy-\n         Authorization header
    fields).  This is to ensure that if the\n         request is routed back to the
    proxy and one of those fields\n         changes, it is treated as a spiral and
    not a loop (see Section\n         16.3).  A common way to create this value is
    to compute a\n         cryptographic hash of the To tag, From tag, Call-ID header\n
    \        field, the Request-URI of the request received (before\n         translation),
    the topmost Via header, and the sequence number\n         from the CSeq header
    field, in addition to any Proxy-Require\n         and Proxy-Authorization header
    fields that may be present.  The\n         algorithm used to compute the hash
    is implementation-dependent,\n         but MD5 (RFC 1321 [35]), expressed in hexadecimal,
    is a\n         reasonable choice.  (Base64 is not permissible for a token.)\n
    \        If a proxy wishes to detect loops, the \"branch\" parameter it\n         supplies
    MUST depend on all information affecting processing of\n         a request, including
    the incoming Request-URI and any header\n         fields affecting the request's
    admission or routing.  This is\n         necessary to distinguish looped requests
    from requests whose\n         routing parameters have changed before returning
    to this\n         server.\n         The request method MUST NOT be included in
    the calculation of\n         the branch parameter.  In particular, CANCEL and
    ACK requests\n         (for non-2xx responses) MUST have the same branch value
    as the\n         corresponding request they cancel or acknowledge.  The branch\n
    \        parameter is used in correlating those requests at the server\n         handling
    them (see Sections 17.2.3 and 9.2).\n      9. Add a Content-Length header field
    if necessary\n         If the request will be sent to the next hop using a stream-\n
    \        based transport and the copy contains no Content-Length header\n         field,
    the proxy MUST insert one with the correct value for the\n         body of the
    request (see Section 20.14).\n      10. Forward Request\n         A stateful proxy
    MUST create a new client transaction for this\n         request as described in
    Section 17.1 and instructs the\n         transaction to send the request using
    the address, port and\n         transport determined in step 7.\n      11. Set
    timer C\n         In order to handle the case where an INVITE request never\n
    \        generates a final response, the TU uses a timer which is called\n         timer
    C.  Timer C MUST be set for each client transaction when\n         an INVITE request
    is proxied.  The timer MUST be larger than 3\n         minutes.  Section 16.7
    bullet 2 discusses how this timer is\n         updated with provisional responses,
    and Section 16.8 discusses\n         processing when it fires.\n"
  title: 16.6 Request Forwarding
- contents:
  - "16.7 Response Processing\n   When a response is received by an element, it first
    tries to locate a\n   client transaction (Section 17.1.3) matching the response.
    \ If none\n   is found, the element MUST process the response (even if it is an\n
    \  informational response) as a stateless proxy (described below).  If a\n   match
    is found, the response is handed to the client transaction.\n      Forwarding
    responses for which a client transaction (or more\n      generally any knowledge
    of having sent an associated request) is\n      not found improves robustness.
    \ In particular, it ensures that\n      \"late\" 2xx responses to INVITE requests
    are forwarded properly.\n   As client transactions pass responses to the proxy
    layer, the\n   following processing MUST take place:\n      1.  Find the appropriate
    response context\n      2.  Update timer C for provisional responses\n      3.
    \ Remove the topmost Via\n      4.  Add the response to the response context\n
    \     5.  Check to see if this response should be forwarded immediately\n      6.
    \ When necessary, choose the best final response from the\n          response
    context\n   If no final response has been forwarded after every client\n   transaction
    associated with the response context has been terminated,\n   the proxy must choose
    and forward the \"best\" response from those it\n   has seen so far.\n   The following
    processing MUST be performed on each response that is\n   forwarded.  It is likely
    that more than one response to each request\n   will be forwarded: at least each
    provisional and one final response.\n      7.  Aggregate authorization header
    field values if necessary\n      8.  Optionally rewrite Record-Route header field
    values\n      9.  Forward the response\n      10. Generate any necessary CANCEL
    requests\n   Each of the above steps are detailed below:\n      1.  Find Context\n
    \        The proxy locates the \"response context\" it created before\n         forwarding
    the original request using the key described in\n         Section 16.6.  The remaining
    processing steps take place in\n         this context.\n      2.  Update timer
    C for provisional responses\n         For an INVITE transaction, if the response
    is a provisional\n         response with status codes 101 to 199 inclusive (i.e.,
    anything\n         but 100), the proxy MUST reset timer C for that client\n         transaction.
    \ The timer MAY be reset to a different value, but\n         this value MUST be
    greater than 3 minutes.\n      3.  Via\n         The proxy removes the topmost
    Via header field value from the\n         response.\n         If no Via header
    field values remain in the response, the\n         response was meant for this
    element and MUST NOT be forwarded.\n         The remainder of the processing described
    in this section is\n         not performed on this message, the UAC processing
    rules\n         described in Section 8.1.3 are followed instead (transport\n         layer
    processing has already occurred).\n         This will happen, for instance, when
    the element generates\n         CANCEL requests as described in Section 10.\n
    \     4.  Add response to context\n         Final responses received are stored
    in the response context\n         until a final response is generated on the server
    transaction\n         associated with this context.  The response may be a candidate\n
    \        for the best final response to be returned on that server\n         transaction.
    \ Information from this response may be needed in\n         forming the best response,
    even if this response is not chosen.\n         If the proxy chooses to recurse
    on any contacts in a 3xx\n         response by adding them to the target set,
    it MUST remove them\n         from the response before adding the response to
    the response\n         context.  However, a proxy SHOULD NOT recurse to a non-SIPS
    URI\n         if the Request-URI of the original request was a SIPS URI.  If\n
    \        the proxy recurses on all of the contacts in a 3xx response,\n         the
    proxy SHOULD NOT add the resulting contactless response to\n         the response
    context.\n         Removing the contact before adding the response to the response\n
    \        context prevents the next element upstream from retrying a\n         location
    this proxy has already attempted.\n         3xx responses may contain a mixture
    of SIP, SIPS, and non-SIP\n         URIs.  A proxy may choose to recurse on the
    SIP and SIPS URIs\n         and place the remainder into the response context
    to be\n         returned, potentially in the final response.\n         If a proxy
    receives a 416 (Unsupported URI Scheme) response to\n         a request whose
    Request-URI scheme was not SIP, but the scheme\n         in the original received
    request was SIP or SIPS (that is, the\n         proxy changed the scheme from
    SIP or SIPS to something else\n         when it proxied a request), the proxy
    SHOULD add a new URI to\n         the target set.  This URI SHOULD be a SIP URI
    version of the\n         non-SIP URI that was just tried.  In the case of the
    tel URL,\n         this is accomplished by placing the telephone-subscriber part\n
    \        of the tel URL into the user part of the SIP URI, and setting\n         the
    hostpart to the domain where the prior request was sent.\n         See Section
    19.1.6 for more detail on forming SIP URIs from tel\n         URLs.\n         As
    with a 3xx response, if a proxy \"recurses\" on the 416 by\n         trying a
    SIP or SIPS URI instead, the 416 response SHOULD NOT\n         be added to the
    response context.\n      5.  Check response for forwarding\n         Until a final
    response has been sent on the server transaction,\n         the following responses
    MUST be forwarded immediately:\n         -  Any provisional response other than
    100 (Trying)\n         -  Any 2xx response\n         If a 6xx response is received,
    it is not immediately forwarded,\n         but the stateful proxy SHOULD cancel
    all client pending\n         transactions as described in Section 10, and it MUST
    NOT create\n         any new branches in this context.\n         This is a change
    from RFC 2543, which mandated that the proxy\n         was to forward the 6xx
    response immediately.  For an INVITE\n         transaction, this approach had
    the problem that a 2xx response\n         could arrive on another branch, in which
    case the proxy would\n         have to forward the 2xx.  The result was that the
    UAC could\n         receive a 6xx response followed by a 2xx response, which should\n
    \        never be allowed to happen.  Under the new rules, upon\n         receiving
    a 6xx, a proxy will issue a CANCEL request, which\n         will generally result
    in 487 responses from all outstanding\n         client transactions, and then
    at that point the 6xx is\n         forwarded upstream.\n         After a final
    response has been sent on the server transaction,\n         the following responses
    MUST be forwarded immediately:\n         -  Any 2xx response to an INVITE request\n
    \        A stateful proxy MUST NOT immediately forward any other\n         responses.
    \ In particular, a stateful proxy MUST NOT forward\n         any 100 (Trying)
    response.  Those responses that are candidates\n         for forwarding later
    as the \"best\" response have been gathered\n         as described in step \"Add
    Response to Context\".\n         Any response chosen for immediate forwarding
    MUST be processed\n         as described in steps \"Aggregate Authorization Header
    Field\n         Values\" through \"Record-Route\".\n         This step, combined
    with the next, ensures that a stateful\n         proxy will forward exactly one
    final response to a non-INVITE\n         request, and either exactly one non-2xx
    response or one or more\n         2xx responses to an INVITE request.\n      6.
    \ Choosing the best response\n         A stateful proxy MUST send a final response
    to a response\n         context's server transaction if no final responses have
    been\n         immediately forwarded by the above rules and all client\n         transactions
    in this response context have been terminated.\n         The stateful proxy MUST
    choose the \"best\" final response among\n         those received and stored in
    the response context.\n         If there are no final responses in the context,
    the proxy MUST\n         send a 408 (Request Timeout) response to the server\n
    \        transaction.\n         Otherwise, the proxy MUST forward a response from
    the responses\n         stored in the response context.  It MUST choose from the
    6xx\n         class responses if any exist in the context.  If no 6xx class\n
    \        responses are present, the proxy SHOULD choose from the lowest\n         response
    class stored in the response context.  The proxy MAY\n         select any response
    within that chosen class.  The proxy SHOULD\n         give preference to responses
    that provide information affecting\n         resubmission of this request, such
    as 401, 407, 415, 420, and\n         484 if the 4xx class is chosen.\n         A
    proxy which receives a 503 (Service Unavailable) response\n         SHOULD NOT
    forward it upstream unless it can determine that any\n         subsequent requests
    it might proxy will also generate a 503.\n         In other words, forwarding
    a 503 means that the proxy knows it\n         cannot service any requests, not
    just the one for the Request-\n         URI in the request which generated the
    503.  If the only\n         response that was received is a 503, the proxy SHOULD
    generate\n         a 500 response and forward that upstream.\n         The forwarded
    response MUST be processed as described in steps\n         \"Aggregate Authorization
    Header Field Values\" through \"Record-\n         Route\".\n         For example,
    if a proxy forwarded a request to 4 locations, and\n         received 503, 407,
    501, and 404 responses, it may choose to\n         forward the 407 (Proxy Authentication
    Required) response.\n         1xx and 2xx responses may be involved in the establishment
    of\n         dialogs.  When a request does not contain a To tag, the To tag\n
    \        in the response is used by the UAC to distinguish multiple\n         responses
    to a dialog creating request.  A proxy MUST NOT\n         insert a tag into the
    To header field of a 1xx or 2xx response\n         if the request did not contain
    one.  A proxy MUST NOT modify\n         the tag in the To header field of a 1xx
    or 2xx response.\n         Since a proxy may not insert a tag into the To header
    field of\n         a 1xx response to a request that did not contain one, it cannot\n
    \        issue non-100 provisional responses on its own.  However, it\n         can
    branch the request to a UAS sharing the same element as the\n         proxy.  This
    UAS can return its own provisional responses,\n         entering into an early
    dialog with the initiator of the\n         request.  The UAS does not have to
    be a discreet process from\n         the proxy.  It could be a virtual UAS implemented
    in the same\n         code space as the proxy.\n         3-6xx responses are delivered
    hop-by-hop.  When issuing a 3-6xx\n         response, the element is effectively
    acting as a UAS, issuing\n         its own response, usually based on the responses
    received from\n         downstream elements.  An element SHOULD preserve the To
    tag\n         when simply forwarding a 3-6xx response to a request that did\n
    \        not contain a To tag.\n         A proxy MUST NOT modify the To tag in
    any forwarded response to\n         a request that contains a To tag.\n         While
    it makes no difference to the upstream elements if the\n         proxy replaced
    the To tag in a forwarded 3-6xx response,\n         preserving the original tag
    may assist with debugging.\n         When the proxy is aggregating information
    from several\n         responses, choosing a To tag from among them is arbitrary,
    and\n         generating a new To tag may make debugging easier.  This\n         happens,
    for instance, when combining 401 (Unauthorized) and\n         407 (Proxy Authentication
    Required) challenges, or combining\n         Contact values from unencrypted and
    unauthenticated 3xx\n         responses.\n      7.  Aggregate Authorization Header
    Field Values\n         If the selected response is a 401 (Unauthorized) or 407
    (Proxy\n         Authentication Required), the proxy MUST collect any WWW-\n         Authenticate
    and Proxy-Authenticate header field values from\n         all other 401 (Unauthorized)
    and 407 (Proxy Authentication\n         Required) responses received so far in
    this response context\n         and add them to this response without modification
    before\n         forwarding.  The resulting 401 (Unauthorized) or 407 (Proxy\n
    \        Authentication Required) response could have several WWW-\n         Authenticate
    AND Proxy-Authenticate header field values.\n         This is necessary because
    any or all of the destinations the\n         request was forwarded to may have
    requested credentials.  The\n         client needs to receive all of those challenges
    and supply\n         credentials for each of them when it retries the request.\n
    \        Motivation for this behavior is provided in Section 26.\n      8.  Record-Route\n
    \        If the selected response contains a Record-Route header field\n         value
    originally provided by this proxy, the proxy MAY choose\n         to rewrite the
    value before forwarding the response.  This\n         allows the proxy to provide
    different URIs for itself to the\n         next upstream and downstream elements.
    \ A proxy may choose to\n         use this mechanism for any reason.  For instance,
    it is useful\n         for multi-homed hosts.\n         If the proxy received
    the request over TLS, and sent it out\n         over a non-TLS connection, the
    proxy MUST rewrite the URI in\n         the Record-Route header field to be a
    SIPS URI.  If the proxy\n         received the request over a non-TLS connection,
    and sent it out\n         over TLS, the proxy MUST rewrite the URI in the Record-Route\n
    \        header field to be a SIP URI.\n         The new URI provided by the proxy
    MUST satisfy the same\n         constraints on URIs placed in Record-Route header
    fields in\n         requests (see Step 4 of Section 16.6) with the following\n
    \        modifications:\n         The URI SHOULD NOT contain the transport parameter
    unless the\n         proxy has knowledge that the next upstream (as opposed to\n
    \        downstream) element that will be in the path of subsequent\n         requests
    supports that transport.\n         When a proxy does decide to modify the Record-Route
    header\n         field in the response, one of the operations it performs is\n
    \        locating the Record-Route value that it had inserted.  If the\n         request
    spiraled, and the proxy inserted a Record-Route value\n         in each iteration
    of the spiral, locating the correct value in\n         the response (which must
    be the proper iteration in the reverse\n         direction) is tricky.  The rules
    above recommend that a proxy\n         wishing to rewrite Record-Route header
    field values insert\n         sufficiently distinct URIs into the Record-Route
    header field\n         so that the right one may be selected for rewriting.  A\n
    \        RECOMMENDED mechanism to achieve this is for the proxy to\n         append
    a unique identifier for the proxy instance to the user\n         portion of the
    URI.\n         When the response arrives, the proxy modifies the first\n         Record-Route
    whose identifier matches the proxy instance.  The\n         modification results
    in a URI without this piece of data\n         appended to the user portion of
    the URI.  Upon the next\n         iteration, the same algorithm (find the topmost
    Record-Route\n         header field value with the parameter) will correctly extract\n
    \        the next Record-Route header field value inserted by that\n         proxy.\n
    \        Not every response to a request to which a proxy adds a\n         Record-Route
    header field value will contain a Record-Route\n         header field.  If the
    response does contain a Record-Route\n         header field, it will contain the
    value the proxy added.\n      9.  Forward response\n         After performing
    the processing described in steps \"Aggregate\n         Authorization Header Field
    Values\" through \"Record-Route\", the\n         proxy MAY perform any feature
    specific manipulations on the\n         selected response.  The proxy MUST NOT
    add to, modify, or\n         remove the message body.  Unless otherwise specified,
    the proxy\n         MUST NOT remove any header field values other than the Via\n
    \        header field value discussed in Section 16.7 Item 3.  In\n         particular,
    the proxy MUST NOT remove any \"received\" parameter\n         it may have added
    to the next Via header field value while\n         processing the request associated
    with this response.  The\n         proxy MUST pass the response to the server
    transaction\n         associated with the response context.  This will result
    in the\n         response being sent to the location now indicated in the\n         topmost
    Via header field value.  If the server transaction is\n         no longer available
    to handle the transmission, the element\n         MUST forward the response statelessly
    by sending it to the\n         server transport.  The server transaction might
    indicate\n         failure to send the response or signal a timeout in its state\n
    \        machine.  These errors would be logged for diagnostic purposes\n         as
    appropriate, but the protocol requires no remedial action\n         from the proxy.\n
    \        The proxy MUST maintain the response context until all of its\n         associated
    transactions have been terminated, even after\n         forwarding a final response.\n
    \     10. Generate CANCELs\n         If the forwarded response was a final response,
    the proxy MUST\n         generate a CANCEL request for all pending client transactions\n
    \        associated with this response context.  A proxy SHOULD also\n         generate
    a CANCEL request for all pending client transactions\n         associated with
    this response context when it receives a 6xx\n         response.  A pending client
    transaction is one that has\n         received a provisional response, but no
    final response (it is\n         in the proceeding state) and has not had an associated
    CANCEL\n         generated for it.  Generating CANCEL requests is described in\n
    \        Section 9.1.\n         The requirement to CANCEL pending client transactions
    upon\n         forwarding a final response does not guarantee that an endpoint\n
    \        will not receive multiple 200 (OK) responses to an INVITE.  200\n         (OK)
    responses on more than one branch may be generated before\n         the CANCEL
    requests can be sent and processed.  Further, it is\n         reasonable to expect
    that a future extension may override this\n         requirement to issue CANCEL
    requests.\n"
  title: 16.7 Response Processing
- contents:
  - "16.8 Processing Timer C\n   If timer C should fire, the proxy MUST either reset
    the timer with\n   any value it chooses, or terminate the client transaction.
    \ If the\n   client transaction has received a provisional response, the proxy\n
    \  MUST generate a CANCEL request matching that transaction.  If the\n   client
    transaction has not received a provisional response, the proxy\n   MUST behave
    as if the transaction received a 408 (Request Timeout)\n   response.\n   Allowing
    the proxy to reset the timer allows the proxy to dynamically\n   extend the transaction's
    lifetime based on current conditions (such\n   as utilization) when the timer
    fires.\n"
  title: 16.8 Processing Timer C
- contents:
  - "16.9 Handling Transport Errors\n   If the transport layer notifies a proxy of
    an error when it tries to\n   forward a request (see Section 18.4), the proxy
    MUST behave as if the\n   forwarded request received a 503 (Service Unavailable)
    response.\n   If the proxy is notified of an error when forwarding a response,
    it\n   drops the response.  The proxy SHOULD NOT cancel any outstanding\n   client
    transactions associated with this response context due to this\n   notification.\n
    \     If a proxy cancels its outstanding client transactions, a single\n      malicious
    or misbehaving client can cause all transactions to fail\n      through its Via
    header field.\n"
  title: 16.9 Handling Transport Errors
- contents:
  - "16.10 CANCEL Processing\n   A stateful proxy MAY generate a CANCEL to any other
    request it has\n   generated at any time (subject to receiving a provisional response
    to\n   that request as described in section 9.1).  A proxy MUST cancel any\n   pending
    client transactions associated with a response context when\n   it receives a
    matching CANCEL request.\n   A stateful proxy MAY generate CANCEL requests for
    pending INVITE\n   client transactions based on the period specified in the INVITE's\n
    \  Expires header field elapsing.  However, this is generally\n   unnecessary
    since the endpoints involved will take care of signaling\n   the end of the transaction.\n
    \  While a CANCEL request is handled in a stateful proxy by its own\n   server
    transaction, a new response context is not created for it.\n   Instead, the proxy
    layer searches its existing response contexts for\n   the server transaction handling
    the request associated with this\n   CANCEL.  If a matching response context is
    found, the element MUST\n   immediately return a 200 (OK) response to the CANCEL
    request.  In\n   this case, the element is acting as a user agent server as defined
    in\n   Section 8.2.  Furthermore, the element MUST generate CANCEL requests\n
    \  for all pending client transactions in the context as described in\n   Section
    16.7 step 10.\n   If a response context is not found, the element does not have
    any\n   knowledge of the request to apply the CANCEL to.  It MUST statelessly\n
    \  forward the CANCEL request (it may have statelessly forwarded the\n   associated
    request previously).\n"
  title: 16.10 CANCEL Processing
- contents:
  - "16.11 Stateless Proxy\n   When acting statelessly, a proxy is a simple message
    forwarder.  Much\n   of the processing performed when acting statelessly is the
    same as\n   when behaving statefully.  The differences are detailed here.\n   A
    stateless proxy does not have any notion of a transaction, or of\n   the response
    context used to describe stateful proxy behavior.\n   Instead, the stateless proxy
    takes messages, both requests and\n   responses, directly from the transport layer
    (See section 18).  As a\n   result, stateless proxies do not retransmit messages
    on their own.\n   They do, however, forward all retransmissions they receive (they
    do\n   not have the ability to distinguish a retransmission from the\n   original
    message).  Furthermore, when handling a request statelessly,\n   an element MUST
    NOT generate its own 100 (Trying) or any other\n   provisional response.\n   A
    stateless proxy MUST validate a request as described in Section\n   16.3\n   A
    stateless proxy MUST follow the request processing steps described\n   in Sections
    16.4 through 16.5 with the following exception:\n      o  A stateless proxy MUST
    choose one and only one target from the\n         target set.  This choice MUST
    only rely on fields in the\n         message and time-invariant properties of
    the server.  In\n         particular, a retransmitted request MUST be forwarded
    to the\n         same destination each time it is processed.  Furthermore,\n         CANCEL
    and non-Routed ACK requests MUST generate the same\n         choice as their associated
    INVITE.\n   A stateless proxy MUST follow the request processing steps described\n
    \  in Section 16.6 with the following exceptions:\n      o  The requirement for
    unique branch IDs across space and time\n         applies to stateless proxies
    as well.  However, a stateless\n         proxy cannot simply use a random number
    generator to compute\n         the first component of the branch ID, as described
    in Section\n         16.6 bullet 8.  This is because retransmissions of a request\n
    \        need to have the same value, and a stateless proxy cannot tell\n         a
    retransmission from the original request.  Therefore, the\n         component
    of the branch parameter that makes it unique MUST be\n         the same each time
    a retransmitted request is forwarded.  Thus\n         for a stateless proxy, the
    branch parameter MUST be computed as\n         a combinatoric function of message
    parameters which are\n         invariant on retransmission.\n         The stateless
    proxy MAY use any technique it likes to guarantee\n         uniqueness of its
    branch IDs across transactions.  However, the\n         following procedure is
    RECOMMENDED.  The proxy examines the\n         branch ID in the topmost Via header
    field of the received\n         request.  If it begins with the magic cookie,
    the first\n         component of the branch ID of the outgoing request is computed\n
    \        as a hash of the received branch ID.  Otherwise, the first\n         component
    of the branch ID is computed as a hash of the topmost\n         Via, the tag in
    the To header field, the tag in the From header\n         field, the Call-ID header
    field, the CSeq number (but not\n         method), and the Request-URI from the
    received request.  One of\n         these fields will always vary across two different\n
    \        transactions.\n      o  All other message transformations specified in
    Section 16.6\n         MUST result in the same transformation of a retransmitted\n
    \        request.  In particular, if the proxy inserts a Record-Route\n         value
    or pushes URIs into the Route header field, it MUST place\n         the same values
    in retransmissions of the request.  As for the\n         Via branch parameter,
    this implies that the transformations\n         MUST be based on time-invariant
    configuration or\n         retransmission-invariant properties of the request.\n
    \     o  A stateless proxy determines where to forward the request as\n         described
    for stateful proxies in Section 16.6 Item 10.  The\n         request is sent directly
    to the transport layer instead of\n         through a client transaction.\n         Since
    a stateless proxy must forward retransmitted requests to\n         the same destination
    and add identical branch parameters to\n         each of them, it can only use
    information from the message\n         itself and time-invariant configuration
    data for those\n         calculations.  If the configuration state is not time-invariant\n
    \        (for example, if a routing table is updated) any requests that\n         could
    be affected by the change may not be forwarded\n         statelessly during an
    interval equal to the transaction timeout\n         window before or after the
    change.  The method of processing\n         the affected requests in that interval
    is an implementation\n         decision.  A common solution is to forward them
    transaction\n         statefully.\n   Stateless proxies MUST NOT perform special
    processing for CANCEL\n   requests.  They are processed by the above rules as
    any other\n   requests.  In particular, a stateless proxy applies the same Route\n
    \  header field processing to CANCEL requests that it applies to any\n   other
    request.\n   Response processing as described in Section 16.7 does not apply to
    a\n   proxy behaving statelessly.  When a response arrives at a stateless\n   proxy,
    the proxy MUST inspect the sent-by value in the first\n   (topmost) Via header
    field value.  If that address matches the proxy,\n   (it equals a value this proxy
    has inserted into previous requests)\n   the proxy MUST remove that header field
    value from the response and\n   forward the result to the location indicated in
    the next Via header\n   field value.  The proxy MUST NOT add to, modify, or remove
    the\n   message body.  Unless specified otherwise, the proxy MUST NOT remove\n
    \  any other header field values.  If the address does not match the\n   proxy,
    the message MUST be silently discarded.\n"
  title: 16.11 Stateless Proxy
- contents:
  - "16.12 Summary of Proxy Route Processing\n   In the absence of local policy to
    the contrary, the processing a\n   proxy performs on a request containing a Route
    header field can be\n   summarized in the following steps.\n      1.  The proxy
    will inspect the Request-URI.  If it indicates a\n          resource owned by
    this proxy, the proxy will replace it with\n          the results of running a
    location service.  Otherwise, the\n          proxy will not change the Request-URI.\n
    \     2.  The proxy will inspect the URI in the topmost Route header\n          field
    value.  If it indicates this proxy, the proxy removes it\n          from the Route
    header field (this route node has been\n          reached).\n      3.  The proxy
    will forward the request to the resource indicated\n          by the URI in the
    topmost Route header field value or in the\n          Request-URI if no Route
    header field is present.  The proxy\n          determines the address, port and
    transport to use when\n          forwarding the request by applying the procedures
    in [4] to\n          that URI.\n   If no strict-routing elements are encountered
    on the path of the\n   request, the Request-URI will always indicate the target
    of the\n   request.\n"
  title: 16.12 Summary of Proxy Route Processing
- contents:
  - '16.12.1 Examples

    '
  title: 16.12.1 Examples
- contents:
  - "16.12.1.1 Basic SIP Trapezoid\n   This scenario is the basic SIP trapezoid, U1
    -> P1 -> P2 -> U2, with\n   both proxies record-routing.  Here is the flow.\n
    \  U1 sends:\n      INVITE sip:callee@domain.com SIP/2.0\n      Contact: sip:caller@u1.example.com\n
    \  to P1.  P1 is an outbound proxy.  P1 is not responsible for\n   domain.com,
    so it looks it up in DNS and sends it there.  It also\n   adds a Record-Route
    header field value:\n      INVITE sip:callee@domain.com SIP/2.0\n      Contact:
    sip:caller@u1.example.com\n      Record-Route: <sip:p1.example.com;lr>\n   P2
    gets this.  It is responsible for domain.com so it runs a location\n   service
    and rewrites the Request-URI.  It also adds a Record-Route\n   header field value.
    \ There is no Route header field, so it resolves\n   the new Request-URI to determine
    where to send the request:\n      INVITE sip:callee@u2.domain.com SIP/2.0\n      Contact:
    sip:caller@u1.example.com\n      Record-Route: <sip:p2.domain.com;lr>\n      Record-Route:
    <sip:p1.example.com;lr>\n   The callee at u2.domain.com gets this and responds
    with a 200 OK:\n      SIP/2.0 200 OK\n      Contact: sip:callee@u2.domain.com\n
    \     Record-Route: <sip:p2.domain.com;lr>\n      Record-Route: <sip:p1.example.com;lr>\n
    \  The callee at u2 also sets its dialog state's remote target URI to\n   sip:caller@u1.example.com
    and its route set to:\n      (<sip:p2.domain.com;lr>,<sip:p1.example.com;lr>)\n
    \  This is forwarded by P2 to P1 to U1 as normal.  Now, U1 sets its\n   dialog
    state's remote target URI to sip:callee@u2.domain.com and its\n   route set to:\n
    \     (<sip:p1.example.com;lr>,<sip:p2.domain.com;lr>)\n   Since all the route
    set elements contain the lr parameter, U1\n   constructs the following BYE request:\n
    \     BYE sip:callee@u2.domain.com SIP/2.0\n      Route: <sip:p1.example.com;lr>,<sip:p2.domain.com;lr>\n
    \  As any other element (including proxies) would do, it resolves the\n   URI
    in the topmost Route header field value using DNS to determine\n   where to send
    the request.  This goes to P1.  P1 notices that it is\n   not responsible for
    the resource indicated in the Request-URI so it\n   doesn't change it.  It does
    see that it is the first value in the\n   Route header field, so it removes that
    value, and forwards the\n   request to P2:\n      BYE sip:callee@u2.domain.com
    SIP/2.0\n      Route: <sip:p2.domain.com;lr>\n   P2 also notices it is not responsible
    for the resource indicated by\n   the Request-URI (it is responsible for domain.com,
    not\n   u2.domain.com), so it doesn't change it.  It does see itself in the\n
    \  first Route header field value, so it removes it and forwards the\n   following
    to u2.domain.com based on a DNS lookup against the\n   Request-URI:\n      BYE
    sip:callee@u2.domain.com SIP/2.0\n"
  title: 16.12.1.1 Basic SIP Trapezoid
- contents:
  - "16.12.1.2 Traversing a Strict-Routing Proxy\n   In this scenario, a dialog is
    established across four proxies, each\n   of which adds Record-Route header field
    values.  The third proxy\n   implements the strict-routing procedures specified
    in RFC 2543 and\n   many works in progress.\n      U1->P1->P2->P3->P4->U2\n   The
    INVITE arriving at U2 contains:\n      INVITE sip:callee@u2.domain.com SIP/2.0\n
    \     Contact: sip:caller@u1.example.com\n      Record-Route: <sip:p4.domain.com;lr>\n
    \     Record-Route: <sip:p3.middle.com>\n      Record-Route: <sip:p2.example.com;lr>\n
    \     Record-Route: <sip:p1.example.com;lr>\n   Which U2 responds to with a 200
    OK.  Later, U2 sends the following\n   BYE request to P4 based on the first Route
    header field value.\n      BYE sip:caller@u1.example.com SIP/2.0\n      Route:
    <sip:p4.domain.com;lr>\n      Route: <sip:p3.middle.com>\n      Route: <sip:p2.example.com;lr>\n
    \     Route: <sip:p1.example.com;lr>\n   P4 is not responsible for the resource
    indicated in the Request-URI\n   so it will leave it alone.  It notices that it
    is the element in the\n   first Route header field value so it removes it.  It
    then prepares to\n   send the request based on the now first Route header field
    value of\n   sip:p3.middle.com, but it notices that this URI does not contain
    the\n   lr parameter, so before sending, it reformats the request to be:\n      BYE
    sip:p3.middle.com SIP/2.0\n      Route: <sip:p2.example.com;lr>\n      Route:
    <sip:p1.example.com;lr>\n      Route: <sip:caller@u1.example.com>\n   P3 is a
    strict router, so it forwards the following to P2:\n      BYE sip:p2.example.com;lr
    SIP/2.0\n      Route: <sip:p1.example.com;lr>\n      Route: <sip:caller@u1.example.com>\n
    \  P2 sees the request-URI is a value it placed into a Record-Route\n   header
    field, so before further processing, it rewrites the request\n   to be:\n      BYE
    sip:caller@u1.example.com SIP/2.0\n      Route: <sip:p1.example.com;lr>\n   P2
    is not responsible for u1.example.com, so it sends the request to\n   P1 based
    on the resolution of the Route header field value.\n   P1 notices itself in the
    topmost Route header field value, so it\n   removes it, resulting in:\n      BYE
    sip:caller@u1.example.com SIP/2.0\n   Since P1 is not responsible for u1.example.com
    and there is no Route\n   header field, P1 will forward the request to u1.example.com
    based on\n   the Request-URI.\n"
  title: 16.12.1.2 Traversing a Strict-Routing Proxy
- contents:
  - "16.12.1.3 Rewriting Record-Route Header Field Values\n   In this scenario, U1
    and U2 are in different private namespaces and\n   they enter a dialog through
    a proxy P1, which acts as a gateway\n   between the namespaces.\n      U1->P1->U2\n
    \  U1 sends:\n      INVITE sip:callee@gateway.leftprivatespace.com SIP/2.0\n      Contact:
    <sip:caller@u1.leftprivatespace.com>\n   P1 uses its location service and sends
    the following to U2:\n      INVITE sip:callee@rightprivatespace.com SIP/2.0\n
    \     Contact: <sip:caller@u1.leftprivatespace.com>\n      Record-Route: <sip:gateway.rightprivatespace.com;lr>\n
    \  U2 sends this 200 (OK) back to P1:\n      SIP/2.0 200 OK\n      Contact: <sip:callee@u2.rightprivatespace.com>\n
    \     Record-Route: <sip:gateway.rightprivatespace.com;lr>\n   P1 rewrites its
    Record-Route header parameter to provide a value that\n   U1 will find useful,
    and sends the following to U1:\n      SIP/2.0 200 OK\n      Contact: <sip:callee@u2.rightprivatespace.com>\n
    \     Record-Route: <sip:gateway.leftprivatespace.com;lr>\n   Later, U1 sends
    the following BYE request to P1:\n      BYE sip:callee@u2.rightprivatespace.com
    SIP/2.0\n      Route: <sip:gateway.leftprivatespace.com;lr>\n   which P1 forwards
    to U2 as:\n      BYE sip:callee@u2.rightprivatespace.com SIP/2.0\n"
  title: 16.12.1.3 Rewriting Record-Route Header Field Values
- contents:
  - "17 Transactions\n   SIP is a transactional protocol: interactions between components
    take\n   place in a series of independent message exchanges.  Specifically, a\n
    \  SIP transaction consists of a single request and any responses to\n   that
    request, which include zero or more provisional responses and\n   one or more
    final responses.  In the case of a transaction where the\n   request was an INVITE
    (known as an INVITE transaction), the\n   transaction also includes the ACK only
    if the final response was not\n   a 2xx response.  If the response was a 2xx,
    the ACK is not considered\n   part of the transaction.\n      The reason for this
    separation is rooted in the importance of\n      delivering all 200 (OK) responses
    to an INVITE to the UAC.  To\n      deliver them all to the UAC, the UAS alone
    takes responsibility\n      for retransmitting them (see Section 13.3.1.4), and
    the UAC alone\n      takes responsibility for acknowledging them with ACK (see
    Section\n      13.2.2.4).  Since this ACK is retransmitted only by the UAC, it
    is\n      effectively considered its own transaction.\n   Transactions have a
    client side and a server side.  The client side\n   is known as a client transaction
    and the server side as a server\n   transaction.  The client transaction sends
    the request, and the\n   server transaction sends the response.  The client and
    server\n   transactions are logical functions that are embedded in any number
    of\n   elements.  Specifically, they exist within user agents and stateful\n   proxy
    servers.  Consider the example in Section 4.  In this example,\n   the UAC executes
    the client transaction, and its outbound proxy\n   executes the server transaction.
    \ The outbound proxy also executes a\n   client transaction, which sends the request
    to a server transaction\n   in the inbound proxy.  That proxy also executes a
    client transaction,\n   which in turn sends the request to a server transaction
    in the UAS.\n   This is shown in Figure 4.\n   +---------+        +---------+
    \       +---------+        +---------+\n   |      +-+|Request |+-+   +-+|Request
    |+-+   +-+|Request |+-+      |\n   |      |C||------->||S|   |C||------->||S|
    \  |C||------->||S|      |\n   |      |l||        ||e|   |l||        ||e|   |l||
    \       ||e|      |\n   |      |i||        ||r|   |i||        ||r|   |i||        ||r|
    \     |\n   |      |e||        ||v|   |e||        ||v|   |e||        ||v|      |\n
    \  |      |n||        ||e|   |n||        ||e|   |n||        ||e|      |\n   |
    \     |t||        ||r|   |t||        ||r|   |t||        ||r|      |\n   |      |
    ||        || |   | ||        || |   | ||        || |      |\n   |      |T||        ||T|
    \  |T||        ||T|   |T||        ||T|      |\n   |      |r||        ||r|   |r||
    \       ||r|   |r||        ||r|      |\n   |      |a||        ||a|   |a||        ||a|
    \  |a||        ||a|      |\n   |      |n||        ||n|   |n||        ||n|   |n||
    \       ||n|      |\n   |      |s||Response||s|   |s||Response||s|   |s||Response||s|
    \     |\n   |      +-+|<-------|+-+   +-+|<-------|+-+   +-+|<-------|+-+      |\n
    \  +---------+        +---------+        +---------+        +---------+\n      UAC
    \              Outbound           Inbound              UAS\n                        Proxy
    \              Proxy\n                  Figure 4: Transaction relationships\n
    \  A stateless proxy does not contain a client or server transaction.\n   The
    transaction exists between the UA or stateful proxy on one side,\n   and the UA
    or stateful proxy on the other side.  As far as SIP\n   transactions are concerned,
    stateless proxies are effectively\n   transparent.  The purpose of the client
    transaction is to receive a\n   request from the element in which the client is
    embedded (call this\n   element the \"Transaction User\" or TU; it can be a UA
    or a stateful\n   proxy), and reliably deliver the request to a server transaction.\n
    \  The client transaction is also responsible for receiving responses\n   and
    delivering them to the TU, filtering out any response\n   retransmissions or disallowed
    responses (such as a response to ACK).\n   Additionally, in the case of an INVITE
    request, the client\n   transaction is responsible for generating the ACK request
    for any\n   final response accepting a 2xx response.\n   Similarly, the purpose
    of the server transaction is to receive\n   requests from the transport layer
    and deliver them to the TU.  The\n   server transaction filters any request retransmissions
    from the\n   network.  The server transaction accepts responses from the TU and\n
    \  delivers them to the transport layer for transmission over the\n   network.
    \ In the case of an INVITE transaction, it absorbs the ACK\n   request for any
    final response excepting a 2xx response.\n   The 2xx response and its ACK receive
    special treatment.  This\n   response is retransmitted only by a UAS, and its
    ACK generated only\n   by the UAC.  This end-to-end treatment is needed so that
    a caller\n   knows the entire set of users that have accepted the call.  Because\n
    \  of this special handling, retransmissions of the 2xx response are\n   handled
    by the UA core, not the transaction layer.  Similarly,\n   generation of the ACK
    for the 2xx is handled by the UA core.  Each\n   proxy along the path merely forwards
    each 2xx response to INVITE and\n   its corresponding ACK.\n"
  title: 17 Transactions
- contents:
  - "17.1 Client Transaction\n   The client transaction provides its functionality
    through the\n   maintenance of a state machine.\n   The TU communicates with the
    client transaction through a simple\n   interface.  When the TU wishes to initiate
    a new transaction, it\n   creates a client transaction and passes it the SIP request
    to send\n   and an IP address, port, and transport to which to send it.  The\n
    \  client transaction begins execution of its state machine.  Valid\n   responses
    are passed up to the TU from the client transaction.\n   There are two types of
    client transaction state machines, depending\n   on the method of the request
    passed by the TU.  One handles client\n   transactions for INVITE requests.  This
    type of machine is referred\n   to as an INVITE client transaction.  Another type
    handles client\n   transactions for all requests except INVITE and ACK.  This
    is\n   referred to as a non-INVITE client transaction.  There is no client\n   transaction
    for ACK.  If the TU wishes to send an ACK, it passes one\n   directly to the transport
    layer for transmission.\n   The INVITE transaction is different from those of
    other methods\n   because of its extended duration.  Normally, human input is
    required\n   in order to respond to an INVITE.  The long delays expected for\n
    \  sending a response argue for a three-way handshake.  On the other\n   hand,
    requests of other methods are expected to complete rapidly.\n   Because of the
    non-INVITE transaction's reliance on a two-way\n   handshake, TUs SHOULD respond
    immediately to non-INVITE requests.\n"
  title: 17.1 Client Transaction
- contents:
  - '17.1.1 INVITE Client Transaction

    '
  title: 17.1.1 INVITE Client Transaction
- contents:
  - "17.1.1.1 Overview of INVITE Transaction\n   The INVITE transaction consists of
    a three-way handshake.  The client\n   transaction sends an INVITE, the server
    transaction sends responses,\n   and the client transaction sends an ACK.  For
    unreliable transports\n   (such as UDP), the client transaction retransmits requests
    at an\n   interval that starts at T1 seconds and doubles after every\n   retransmission.
    \ T1 is an estimate of the round-trip time (RTT), and\n   it defaults to 500 ms.
    \ Nearly all of the transaction timers\n   described here scale with T1, and changing
    T1 adjusts their values.\n   The request is not retransmitted over reliable transports.
    \ After\n   receiving a 1xx response, any retransmissions cease altogether, and\n
    \  the client waits for further responses.  The server transaction can\n   send
    additional 1xx responses, which are not transmitted reliably by\n   the server
    transaction.  Eventually, the server transaction decides\n   to send a final response.
    \ For unreliable transports, that response\n   is retransmitted periodically,
    and for reliable transports, it is\n   sent once.  For each final response that
    is received at the client\n   transaction, the client transaction sends an ACK,
    the purpose of\n   which is to quench retransmissions of the response.\n"
  title: 17.1.1.1 Overview of INVITE Transaction
- contents:
  - "17.1.1.2 Formal Description\n   The state machine for the INVITE client transaction
    is shown in\n   Figure 5.  The initial state, \"calling\", MUST be entered when
    the TU\n   initiates a new client transaction with an INVITE request.  The\n   client
    transaction MUST pass the request to the transport layer for\n   transmission
    (see Section 18).  If an unreliable transport is being\n   used, the client transaction
    MUST start timer A with a value of T1.\n   If a reliable transport is being used,
    the client transaction SHOULD\n   NOT start timer A (Timer A controls request
    retransmissions).  For\n   any transport, the client transaction MUST start timer
    B with a value\n   of 64*T1 seconds (Timer B controls transaction timeouts).\n
    \  When timer A fires, the client transaction MUST retransmit the\n   request
    by passing it to the transport layer, and MUST reset the\n   timer with a value
    of 2*T1.  The formal definition of retransmit\n   within the context of the transaction
    layer is to take the message\n   previously sent to the transport layer and pass
    it to the transport\n   layer once more.\n   When timer A fires 2*T1 seconds later,
    the request MUST be\n   retransmitted again (assuming the client transaction is
    still in this\n   state).  This process MUST continue so that the request is\n
    \  retransmitted with intervals that double after each transmission.\n   These
    retransmissions SHOULD only be done while the client\n   transaction is in the
    \"calling\" state.\n   The default value for T1 is 500 ms.  T1 is an estimate
    of the RTT\n   between the client and server transactions.  Elements MAY (though
    it\n   is NOT RECOMMENDED) use smaller values of T1 within closed, private\n   networks
    that do not permit general Internet connection.  T1 MAY be\n   chosen larger,
    and this is RECOMMENDED if it is known in advance\n   (such as on high latency
    access links) that the RTT is larger.\n   Whatever the value of T1, the exponential
    backoffs on retransmissions\n   described in this section MUST be used.\n   If
    the client transaction is still in the \"Calling\" state when timer\n   B fires,
    the client transaction SHOULD inform the TU that a timeout\n   has occurred.  The
    client transaction MUST NOT generate an ACK.  The\n   value of 64*T1 is equal
    to the amount of time required to send seven\n   requests in the case of an unreliable
    transport.\n   If the client transaction receives a provisional response while
    in\n   the \"Calling\" state, it transitions to the \"Proceeding\" state. In the\n
    \  \"Proceeding\" state, the client transaction SHOULD NOT retransmit the\n   request
    any longer. Furthermore, the provisional response MUST be\n   passed to the TU.
    \ Any further provisional responses MUST be passed\n   up to the TU while in the
    \"Proceeding\" state.\n   When in either the \"Calling\" or \"Proceeding\" states,
    reception of a\n   response with status code from 300-699 MUST cause the client\n
    \  transaction to transition to \"Completed\".  The client transaction\n   MUST
    pass the received response up to the TU, and the client\n   transaction MUST generate
    an ACK request, even if the transport is\n   reliable (guidelines for constructing
    the ACK from the response are\n   given in Section 17.1.1.3) and then pass the
    ACK to the transport\n   layer for transmission.  The ACK MUST be sent to the
    same address,\n   port, and transport to which the original request was sent.
    \ The\n   client transaction SHOULD start timer D when it enters the\n   \"Completed\"
    state, with a value of at least 32 seconds for unreliable\n   transports, and
    a value of zero seconds for reliable transports.\n   Timer D reflects the amount
    of time that the server transaction can\n   remain in the \"Completed\" state
    when unreliable transports are used.\n   This is equal to Timer H in the INVITE
    server transaction, whose\n   default is 64*T1.  However, the client transaction
    does not know the\n   value of T1 in use by the server transaction, so an absolute
    minimum\n   of 32s is used instead of basing Timer D on T1.\n   Any retransmissions
    of the final response that are received while in\n   the \"Completed\" state MUST
    cause the ACK to be re-passed to the\n   transport layer for retransmission, but
    the newly received response\n   MUST NOT be passed up to the TU.  A retransmission
    of the response is\n   defined as any response which would match the same client
    transaction\n   based on the rules of Section 17.1.3.\n                               |INVITE
    from TU\n             Timer A fires     |INVITE sent\n             Reset A,          V
    \                     Timer B fires\n             INVITE sent +-----------+                or
    Transport Err.\n               +---------|           |---------------+inform TU\n
    \              |         |  Calling  |               |\n               +-------->|
    \          |-------------->|\n                         +-----------+ 2xx           |\n
    \                           |  |       2xx to TU     |\n                            |
    \ |1xx                  |\n    300-699 +---------------+  |1xx to TU            |\n
    \  ACK sent |                  |                     |\n"
  title: 17.1.1.2 Formal Description
- contents:
  - "resp. to TU |  1xx             V                     |\n            |  1xx to
    TU  -----------+               |\n            |  +---------|           |               |\n
    \           |  |         |Proceeding |-------------->|\n            |  +-------->|
    \          | 2xx           |\n            |            +-----------+ 2xx to TU
    \    |\n            |       300-699    |                     |\n            |
    \      ACK sent,  |                     |\n            |       resp. to TU|                     |\n
    \           |                  |                     |      NOTE:\n            |
    \ 300-699         V                     |\n            |  ACK sent  +-----------+Transport
    Err. |  transitions\n            |  +---------|           |Inform TU      |  labeled
    with\n            |  |         | Completed |-------------->|  the event\n            |
    \ +-------->|           |               |  over the action\n            |            +-----------+
    \              |  to take\n            |              ^   |                     |\n
    \           |              |   | Timer D fires       |\n            +--------------+
    \  | -                   |\n                               |                     |\n
    \                              V                     |\n                         +-----------+
    \              |\n                         |           |               |\n                         |
    Terminated|<--------------+\n                         |           |\n                         +-----------+\n
    \                Figure 5: INVITE client transaction\n   If timer D fires while
    the client transaction is in the \"Completed\"\n   state, the client transaction
    MUST move to the terminated state.\n   When in either the \"Calling\" or \"Proceeding\"
    states, reception of a\n   2xx response MUST cause the client transaction to enter
    the\n   \"Terminated\" state, and the response MUST be passed up to the TU.\n
    \  The handling of this response depends on whether the TU is a proxy\n   core
    or a UAC core.  A UAC core will handle generation of the ACK for\n   this response,
    while a proxy core will always forward the 200 (OK)\n   upstream.  The differing
    treatment of 200 (OK) between proxy and UAC\n   is the reason that handling of
    it does not take place in the\n   transaction layer.\n   The client transaction
    MUST be destroyed the instant it enters the\n   \"Terminated\" state.  This is
    actually necessary to guarantee correct\n   operation.  The reason is that 2xx
    responses to an INVITE are treated\n   differently; each one is forwarded by proxies,
    and the ACK handling\n   in a UAC is different.  Thus, each 2xx needs to be passed
    to a proxy\n   core (so that it can be forwarded) and to a UAC core (so it can
    be\n   acknowledged).  No transaction layer processing takes place.\n   Whenever
    a response is received by the transport, if the transport\n   layer finds no matching
    client transaction (using the rules of\n   Section 17.1.3), the response is passed
    directly to the core.  Since\n   the matching client transaction is destroyed
    by the first 2xx,\n   subsequent 2xx will find no match and therefore be passed
    to the\n   core.\n"
  title: resp. to TU |  1xx             V                     |
- contents:
  - "17.1.1.3 Construction of the ACK Request\n   This section specifies the construction
    of ACK requests sent within\n   the client transaction.  A UAC core that generates
    an ACK for 2xx\n   MUST instead follow the rules described in Section 13.\n   The
    ACK request constructed by the client transaction MUST contain\n   values for
    the Call-ID, From, and Request-URI that are equal to the\n   values of those header
    fields in the request passed to the transport\n   by the client transaction (call
    this the \"original request\").  The To\n   header field in the ACK MUST equal
    the To header field in the\n   response being acknowledged, and therefore will
    usually differ from\n   the To header field in the original request by the addition
    of the\n   tag parameter.  The ACK MUST contain a single Via header field, and\n
    \  this MUST be equal to the top Via header field of the original\n   request.
    \ The CSeq header field in the ACK MUST contain the same\n   value for the sequence
    number as was present in the original request,\n   but the method parameter MUST
    be equal to \"ACK\".\n   If the INVITE request whose response is being acknowledged
    had Route\n   header fields, those header fields MUST appear in the ACK.  This
    is\n   to ensure that the ACK can be routed properly through any downstream\n
    \  stateless proxies.\n   Although any request MAY contain a body, a body in an
    ACK is special\n   since the request cannot be rejected if the body is not understood.\n
    \  Therefore, placement of bodies in ACK for non-2xx is NOT RECOMMENDED,\n   but
    if done, the body types are restricted to any that appeared in\n   the INVITE,
    assuming that the response to the INVITE was not 415.  If\n   it was, the body
    in the ACK MAY be any type listed in the Accept\n   header field in the 415.\n
    \  For example, consider the following request:\n   INVITE sip:bob@biloxi.com
    SIP/2.0\n   Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKkjshdyff\n   To: Bob
    <sip:bob@biloxi.com>\n   From: Alice <sip:alice@atlanta.com>;tag=88sja8x\n   Max-Forwards:
    70\n   Call-ID: 987asjd97y7atg\n   CSeq: 986759 INVITE\n   The ACK request for
    a non-2xx final response to this request would\n   look like this:\n   ACK sip:bob@biloxi.com
    SIP/2.0\n   Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKkjshdyff\n   To: Bob
    <sip:bob@biloxi.com>;tag=99sa0xk\n   From: Alice <sip:alice@atlanta.com>;tag=88sja8x\n
    \  Max-Forwards: 70\n   Call-ID: 987asjd97y7atg\n   CSeq: 986759 ACK\n"
  title: 17.1.1.3 Construction of the ACK Request
- contents:
  - '17.1.2 Non-INVITE Client Transaction

    '
  title: 17.1.2 Non-INVITE Client Transaction
- contents:
  - "17.1.2.1 Overview of the non-INVITE Transaction\n   Non-INVITE transactions do
    not make use of ACK.  They are simple\n   request-response interactions.  For
    unreliable transports, requests\n   are retransmitted at an interval which starts
    at T1 and doubles until\n   it hits T2.  If a provisional response is received,
    retransmissions\n   continue for unreliable transports, but at an interval of
    T2.  The\n   server transaction retransmits the last response it sent, which can\n
    \  be a provisional or final response, only when a retransmission of the\n   request
    is received.  This is why request retransmissions need to\n   continue even after
    a provisional response; they are to ensure\n   reliable delivery of the final
    response.\n   Unlike an INVITE transaction, a non-INVITE transaction has no special\n
    \  handling for the 2xx response.  The result is that only a single 2xx\n   response
    to a non-INVITE is ever delivered to a UAC.\n"
  title: 17.1.2.1 Overview of the non-INVITE Transaction
- contents:
  - "17.1.2.2 Formal Description\n   The state machine for the non-INVITE client transaction
    is shown in\n   Figure 6.  It is very similar to the state machine for INVITE.\n
    \  The \"Trying\" state is entered when the TU initiates a new client\n   transaction
    with a request.  When entering this state, the client\n   transaction SHOULD set
    timer F to fire in 64*T1 seconds.  The request\n   MUST be passed to the transport
    layer for transmission.  If an\n   unreliable transport is in use, the client
    transaction MUST set timer\n   E to fire in T1 seconds.  If timer E fires while
    still in this state,\n   the timer is reset, but this time with a value of MIN(2*T1,
    T2).\n   When the timer fires again, it is reset to a MIN(4*T1, T2).  This\n   process
    continues so that retransmissions occur with an exponentially\n   increasing interval
    that caps at T2.  The default value of T2 is 4s,\n   and it represents the amount
    of time a non-INVITE server transaction\n   will take to respond to a request,
    if it does not respond\n   immediately.  For the default values of T1 and T2,
    this results in\n   intervals of 500 ms, 1 s, 2 s, 4 s, 4 s, 4 s, etc.\n   If
    Timer F fires while the client transaction is still in the\n   \"Trying\" state,
    the client transaction SHOULD inform the TU about the\n   timeout, and then it
    SHOULD enter the \"Terminated\" state.  If a\n   provisional response is received
    while in the \"Trying\" state, the\n   response MUST be passed to the TU, and
    then the client transaction\n   SHOULD move to the \"Proceeding\" state.  If a
    final response (status\n   codes 200-699) is received while in the \"Trying\"
    state, the response\n   MUST be passed to the TU, and the client transaction MUST
    transition\n   to the \"Completed\" state.\n   If Timer E fires while in the \"Proceeding\"
    state, the request MUST be\n   passed to the transport layer for retransmission,
    and Timer E MUST be\n   reset with a value of T2 seconds.  If timer F fires while
    in the\n   \"Proceeding\" state, the TU MUST be informed of a timeout, and the\n
    \  client transaction MUST transition to the terminated state.  If a\n   final
    response (status codes 200-699) is received while in the\n   \"Proceeding\" state,
    the response MUST be passed to the TU, and the\n   client transaction MUST transition
    to the \"Completed\" state.\n   Once the client transaction enters the \"Completed\"
    state, it MUST set\n   Timer K to fire in T4 seconds for unreliable transports,
    and zero\n   seconds for reliable transports.  The \"Completed\" state exists
    to\n   buffer any additional response retransmissions that may be received\n   (which
    is why the client transaction remains there only for\n   unreliable transports).
    \ T4 represents the amount of time the network\n   will take to clear messages
    between client and server transactions.\n   The default value of T4 is 5s.  A
    response is a retransmission when\n   it matches the same transaction, using the
    rules specified in Section\n   17.1.3.  If Timer K fires while in this state,
    the client transaction\n   MUST transition to the \"Terminated\" state.\n   Once
    the transaction is in the terminated state, it MUST be destroyed\n   immediately.\n"
  title: 17.1.2.2 Formal Description
- contents:
  - "17.1.3 Matching Responses to Client Transactions\n   When the transport layer
    in the client receives a response, it has to\n   determine which client transaction
    will handle the response, so that\n   the processing of Sections 17.1.1 and 17.1.2
    can take place.  The\n   branch parameter in the top Via header field is used
    for this\n   purpose.  A response matches a client transaction under two\n   conditions:\n
    \     1.  If the response has the same value of the branch parameter in\n          the
    top Via header field as the branch parameter in the top\n          Via header
    field of the request that created the transaction.\n      2.  If the method parameter
    in the CSeq header field matches the\n          method of the request that created
    the transaction.  The\n          method is needed since a CANCEL request constitutes
    a\n          different transaction, but shares the same value of the branch\n
    \         parameter.\n   If a request is sent via multicast, it is possible that
    it will\n   generate multiple responses from different servers.  These responses\n
    \  will all have the same branch parameter in the topmost Via, but vary\n   in
    the To tag.  The first response received, based on the rules\n   above, will be
    used, and others will be viewed as retransmissions.\n   That is not an error;
    multicast SIP provides only a rudimentary\n   \"single-hop-discovery-like\" service
    that is limited to processing a\n   single response.  See Section 18.1.1 for details.\n"
  title: 17.1.3 Matching Responses to Client Transactions
- contents:
  - "17.1.4 Handling Transport Errors\n                                   |Request
    from TU\n                                   |send request\n               Timer
    E             V\n               send request  +-----------+\n                   +---------|
    \          |-------------------+\n                   |         |  Trying   |  Timer
    F          |\n                   +-------->|           |  or Transport Err.|\n
    \                            +-----------+  inform TU        |\n                200-699
    \        |  |                         |\n                resp. to TU     |  |1xx
    \                     |\n                +---------------+  |resp. to TU              |\n
    \               |                  |                         |\n                |
    \  Timer E        V       Timer F           |\n                |   send req +-----------+
    or Transport Err. |\n                |  +---------|           | inform TU         |\n
    \               |  |         |Proceeding |------------------>|\n                |
    \ +-------->|           |-----+             |\n                |            +-----------+
    \    |1xx          |\n                |              |      ^        |resp to
    TU   |\n                | 200-699      |      +--------+             |\n                |
    resp. to TU  |                             |\n                |              |
    \                            |\n                |              V                             |\n
    \               |            +-----------+                   |\n                |
    \           |           |                   |\n                |            |
    Completed |                   |\n                |            |           |                   |\n
    \               |            +-----------+                   |\n                |
    \             ^   |                         |\n                |              |
    \  | Timer K                 |\n                +--------------+   | -                       |\n
    \                                  |                         |\n                                   V
    \                        |\n             NOTE:           +-----------+                   |\n
    \                            |           |                   |\n         transitions
    \        | Terminated|<------------------+\n         labeled with        |           |\n
    \        the event           +-----------+\n         over the action\n         to
    take\n                 Figure 6: non-INVITE client transaction\n   When the client
    transaction sends a request to the transport layer to\n   be sent, the following
    procedures are followed if the transport layer\n   indicates a failure.\n   The
    client transaction SHOULD inform the TU that a transport failure\n   has occurred,
    and the client transaction SHOULD transition directly\n   to the \"Terminated\"
    state.  The TU will handle the failover\n   mechanisms described in [4].\n"
  title: 17.1.4 Handling Transport Errors
- contents:
  - "17.2 Server Transaction\n   The server transaction is responsible for the delivery
    of requests to\n   the TU and the reliable transmission of responses.  It accomplishes\n
    \  this through a state machine.  Server transactions are created by the\n   core
    when a request is received, and transaction handling is desired\n   for that request
    (this is not always the case).\n   As with the client transactions, the state
    machine depends on whether\n   the received request is an INVITE request.\n"
  title: 17.2 Server Transaction
- contents:
  - "17.2.1 INVITE Server Transaction\n   The state diagram for the INVITE server
    transaction is shown in\n   Figure 7.\n   When a server transaction is constructed
    for a request, it enters the\n   \"Proceeding\" state.  The server transaction
    MUST generate a 100\n   (Trying) response unless it knows that the TU will generate
    a\n   provisional or final response within 200 ms, in which case it MAY\n   generate
    a 100 (Trying) response.  This provisional response is\n   needed to quench request
    retransmissions rapidly in order to avoid\n   network congestion.  The 100 (Trying)
    response is constructed\n   according to the procedures in Section 8.2.6, except
    that the\n   insertion of tags in the To header field of the response (when none\n
    \  was present in the request) is downgraded from MAY to SHOULD NOT.\n   The request
    MUST be passed to the TU.\n   The TU passes any number of provisional responses
    to the server\n   transaction.  So long as the server transaction is in the\n
    \  \"Proceeding\" state, each of these MUST be passed to the transport\n   layer
    for transmission.  They are not sent reliably by the\n   transaction layer (they
    are not retransmitted by it) and do not cause\n   a change in the state of the
    server transaction.  If a request\n   retransmission is received while in the
    \"Proceeding\" state, the most\n   recent provisional response that was received
    from the TU MUST be\n   passed to the transport layer for retransmission.  A request
    is a\n   retransmission if it matches the same server transaction based on the\n
    \  rules of Section 17.2.3.\n   If, while in the \"Proceeding\" state, the TU
    passes a 2xx response to\n   the server transaction, the server transaction MUST
    pass this\n   response to the transport layer for transmission.  It is not\n   retransmitted
    by the server transaction; retransmissions of 2xx\n   responses are handled by
    the TU.  The server transaction MUST then\n   transition to the \"Terminated\"
    state.\n   While in the \"Proceeding\" state, if the TU passes a response with\n
    \  status code from 300 to 699 to the server transaction, the response\n   MUST
    be passed to the transport layer for transmission, and the state\n   machine MUST
    enter the \"Completed\" state.  For unreliable transports,\n   timer G is set
    to fire in T1 seconds, and is not set to fire for\n   reliable transports.\n      This
    is a change from RFC 2543, where responses were always\n      retransmitted, even
    over reliable transports.\n   When the \"Completed\" state is entered, timer H
    MUST be set to fire in\n   64*T1 seconds for all transports.  Timer H determines
    when the server\n   transaction abandons retransmitting the response.  Its value
    is\n   chosen to equal Timer B, the amount of time a client transaction will\n
    \  continue to retry sending a request.  If timer G fires, the response\n   is
    passed to the transport layer once more for retransmission, and\n   timer G is
    set to fire in MIN(2*T1, T2) seconds.  From then on, when\n   timer G fires, the
    response is passed to the transport again for\n   transmission, and timer G is
    reset with a value that doubles, unless\n   that value exceeds T2, in which case
    it is reset with the value of\n   T2.  This is identical to the retransmit behavior
    for requests in the\n   \"Trying\" state of the non-INVITE client transaction.
    \ Furthermore,\n   while in the \"Completed\" state, if a request retransmission
    is\n   received, the server SHOULD pass the response to the transport for\n   retransmission.\n
    \  If an ACK is received while the server transaction is in the\n   \"Completed\"
    state, the server transaction MUST transition to the\n   \"Confirmed\" state.
    \ As Timer G is ignored in this state, any\n   retransmissions of the response
    will cease.\n   If timer H fires while in the \"Completed\" state, it implies
    that the\n   ACK was never received.  In this case, the server transaction MUST\n
    \  transition to the \"Terminated\" state, and MUST indicate to the TU\n   that
    a transaction failure has occurred.\n                               |INVITE\n
    \                              |pass INV to TU\n            INVITE             V
    send 100 if TU won't in 200ms\n            send response+-----------+\n                +--------|
    \          |--------+101-199 from TU\n                |        | Proceeding|        |send
    response\n                +------->|           |<-------+\n                         |
    \          |          Transport Err.\n                         |           |          Inform
    TU\n                         |           |--------------->+\n                         +-----------+
    \               |\n            300-699 from TU |     |2xx from TU        |\n            send
    response   |     |send response      |\n                            |     +------------------>+\n
    \                           |                         |\n            INVITE          V
    \         Timer G fires  |\n            send response+-----------+ send response
    \ |\n                +--------|           |--------+       |\n                |
    \       | Completed |        |       |\n                +------->|           |<-------+
    \      |\n                         +-----------+                |\n                            |
    \    |                   |\n                        ACK |     |                   |\n
    \                       -   |     +------------------>+\n                            |
    \       Timer H fires    |\n                            V        or Transport
    Err.|\n                         +-----------+  Inform TU     |\n                         |
    \          |                |\n                         | Confirmed |                |\n
    \                        |           |                |\n                         +-----------+
    \               |\n                               |                      |\n                               |Timer
    I fires         |\n                               |-                     |\n                               |
    \                     |\n                               V                      |\n
    \                        +-----------+                |\n                         |
    \          |                |\n                         | Terminated|<---------------+\n
    \                        |           |\n                         +-----------+\n
    \             Figure 7: INVITE server transaction\n   The purpose of the \"Confirmed\"
    state is to absorb any additional ACK\n   messages that arrive, triggered from
    retransmissions of the final\n   response.  When this state is entered, timer
    I is set to fire in T4\n   seconds for unreliable transports, and zero seconds
    for reliable\n   transports.  Once timer I fires, the server MUST transition to
    the\n   \"Terminated\" state.\n   Once the transaction is in the \"Terminated\"
    state, it MUST be\n   destroyed immediately.  As with client transactions, this
    is needed\n   to ensure reliability of the 2xx responses to INVITE.\n"
  title: 17.2.1 INVITE Server Transaction
- contents:
  - "17.2.2 Non-INVITE Server Transaction\n   The state machine for the non-INVITE
    server transaction is shown in\n   Figure 8.\n   The state machine is initialized
    in the \"Trying\" state and is passed\n   a request other than INVITE or ACK when
    initialized.  This request is\n   passed up to the TU.  Once in the \"Trying\"
    state, any further request\n   retransmissions are discarded.  A request is a
    retransmission if it\n   matches the same server transaction, using the rules
    specified in\n   Section 17.2.3.\n   While in the \"Trying\" state, if the TU
    passes a provisional response\n   to the server transaction, the server transaction
    MUST enter the\n   \"Proceeding\" state.  The response MUST be passed to the transport\n
    \  layer for transmission.  Any further provisional responses that are\n   received
    from the TU while in the \"Proceeding\" state MUST be passed\n   to the transport
    layer for transmission.  If a retransmission of the\n   request is received while
    in the \"Proceeding\" state, the most\n   recently sent provisional response MUST
    be passed to the transport\n   layer for retransmission.  If the TU passes a final
    response (status\n   codes 200-699) to the server while in the \"Proceeding\"
    state, the\n   transaction MUST enter the \"Completed\" state, and the response
    MUST\n   be passed to the transport layer for transmission.\n   When the server
    transaction enters the \"Completed\" state, it MUST set\n   Timer J to fire in
    64*T1 seconds for unreliable transports, and zero\n   seconds for reliable transports.
    \ While in the \"Completed\" state, the\n   server transaction MUST pass the final
    response to the transport\n   layer for retransmission whenever a retransmission
    of the request is\n   received.  Any other final responses passed by the TU to
    the server\n   transaction MUST be discarded while in the \"Completed\" state.
    \ The\n   server transaction remains in this state until Timer J fires, at\n   which
    point it MUST transition to the \"Terminated\" state.\n   The server transaction
    MUST be destroyed the instant it enters the\n   \"Terminated\" state.\n"
  title: 17.2.2 Non-INVITE Server Transaction
- contents:
  - "17.2.3 Matching Requests to Server Transactions\n   When a request is received
    from the network by the server, it has to\n   be matched to an existing transaction.
    \ This is accomplished in the\n   following manner.\n   The branch parameter in
    the topmost Via header field of the request\n   is examined.  If it is present
    and begins with the magic cookie\n   \"z9hG4bK\", the request was generated by
    a client transaction\n   compliant to this specification.  Therefore, the branch
    parameter\n   will be unique across all transactions sent by that client.  The\n
    \  request matches a transaction if:\n      1. the branch parameter in the request
    is equal to the one in the\n         top Via header field of the request that
    created the\n         transaction, and\n      2. the sent-by value in the top
    Via of the request is equal to the\n         one in the request that created the
    transaction, and\n      3. the method of the request matches the one that created
    the\n         transaction, except for ACK, where the method of the request\n         that
    created the transaction is INVITE.\n   This matching rule applies to both INVITE
    and non-INVITE transactions\n   alike.\n      The sent-by value is used as part
    of the matching process because\n      there could be accidental or malicious
    duplication of branch\n      parameters from different clients.\n   If the branch
    parameter in the top Via header field is not present,\n   or does not contain
    the magic cookie, the following procedures are\n   used.  These exist to handle
    backwards compatibility with RFC 2543\n   compliant implementations.\n   The INVITE
    request matches a transaction if the Request-URI, To tag,\n   From tag, Call-ID,
    CSeq, and top Via header field match those of the\n   INVITE request which created
    the transaction.  In this case, the\n   INVITE is a retransmission of the original
    one that created the\n   transaction.  The ACK request matches a transaction if
    the Request-\n   URI, From tag, Call-ID, CSeq number (not the method), and top
    Via\n   header field match those of the INVITE request which created the\n   transaction,
    and the To tag of the ACK matches the To tag of the\n   response sent by the server
    transaction.  Matching is done based on\n   the matching rules defined for each
    of those header fields.\n   Inclusion of the tag in the To header field in the
    ACK matching\n   process helps disambiguate ACK for 2xx from ACK for other responses\n
    \  at a proxy, which may have forwarded both responses (This can occur\n   in
    unusual conditions.  Specifically, when a proxy forked a request,\n   and then
    crashes, the responses may be delivered to another proxy,\n   which might end
    up forwarding multiple responses upstream).  An ACK\n   request that matches an
    INVITE transaction matched by a previous ACK\n   is considered a retransmission
    of that previous ACK.\n                                  |Request received\n                                  |pass
    to TU\n                                  V\n                            +-----------+\n
    \                           |           |\n                            | Trying
    \   |-------------+\n                            |           |             |\n
    \                           +-----------+             |200-699 from TU\n                                  |
    \                  |send response\n                                  |1xx from
    TU        |\n                                  |send response      |\n                                  |
    \                  |\n               Request            V      1xx from TU  |\n
    \              send response+-----------+send response|\n                   +--------|
    \          |--------+    |\n                   |        | Proceeding|        |
    \   |\n                   +------->|           |<-------+    |\n            +<--------------|
    \          |             |\n            |Trnsprt Err    +-----------+             |\n
    \           |Inform TU            |                   |\n            |                     |
    \                  |\n            |                     |200-699 from TU    |\n
    \           |                     |send response      |\n            |  Request
    \           V                   |\n            |  send response+-----------+             |\n
    \           |      +--------|           |             |\n            |      |
    \       | Completed |<------------+\n            |      +------->|           |\n
    \           +<--------------|           |\n            |Trnsprt Err    +-----------+\n
    \           |Inform TU            |\n            |                     |Timer
    J fires\n            |                     |-\n            |                     |\n
    \           |                     V\n            |               +-----------+\n
    \           |               |           |\n            +-------------->| Terminated|\n
    \                           |           |\n                            +-----------+\n
    \               Figure 8: non-INVITE server transaction\n   For all other request
    methods, a request is matched to a transaction\n   if the Request-URI, To tag,
    From tag, Call-ID, CSeq (including the\n   method), and top Via header field match
    those of the request that\n   created the transaction.  Matching is done based
    on the matching\n   rules defined for each of those header fields.  When a non-INVITE\n
    \  request matches an existing transaction, it is a retransmission of\n   the
    request that created that transaction.\n   Because the matching rules include
    the Request-URI, the server cannot\n   match a response to a transaction.  When
    the TU passes a response to\n   the server transaction, it must pass it to the
    specific server\n   transaction for which the response is targeted.\n"
  title: 17.2.3 Matching Requests to Server Transactions
- contents:
  - "17.2.4 Handling Transport Errors\n   When the server transaction sends a response
    to the transport layer\n   to be sent, the following procedures are followed if
    the transport\n   layer indicates a failure.\n   First, the procedures in [4]
    are followed, which attempt to deliver\n   the response to a backup.  If those
    should all fail, based on the\n   definition of failure in [4], the server transaction
    SHOULD inform\n   the TU that a failure has occurred, and SHOULD transition to
    the\n   terminated state.\n"
  title: 17.2.4 Handling Transport Errors
- contents:
  - "18 Transport\n   The transport layer is responsible for the actual transmission
    of\n   requests and responses over network transports.  This includes\n   determination
    of the connection to use for a request or response in\n   the case of connection-oriented
    transports.\n   The transport layer is responsible for managing persistent\n   connections
    for transport protocols like TCP and SCTP, or TLS over\n   those, including ones
    opened to the transport layer.  This includes\n   connections opened by the client
    or server transports, so that\n   connections are shared between client and server
    transport functions.\n   These connections are indexed by the tuple formed from
    the address,\n   port, and transport protocol at the far end of the connection.
    \ When\n   a connection is opened by the transport layer, this index is set to\n
    \  the destination IP, port and transport.  When the connection is\n   accepted
    by the transport layer, this index is set to the source IP\n   address, port number,
    and transport.  Note that, because the source\n   port is often ephemeral, but
    it cannot be known whether it is\n   ephemeral or selected through procedures
    in [4], connections accepted\n   by the transport layer will frequently not be
    reused.  The result is\n   that two proxies in a \"peering\" relationship using
    a connection-\n   oriented transport frequently will have two connections in use,
    one\n   for transactions initiated in each direction.\n   It is RECOMMENDED that
    connections be kept open for some\n   implementation-defined duration after the
    last message was sent or\n   received over that connection.  This duration SHOULD
    at least equal\n   the longest amount of time the element would need in order
    to bring a\n   transaction from instantiation to the terminated state.  This is
    to\n   make it likely that transactions are completed over the same\n   connection
    on which they are initiated (for example, request,\n   response, and in the case
    of INVITE, ACK for non-2xx responses).\n   This usually means at least 64*T1 (see
    Section 17.1.1.1 for a\n   definition of T1).  However, it could be larger in
    an element that\n   has a TU using a large value for timer C (bullet 11 of Section
    16.6),\n   for example.\n   All SIP elements MUST implement UDP and TCP.  SIP
    elements MAY\n   implement other protocols.\n      Making TCP mandatory for the
    UA is a substantial change from RFC\n      2543.  It has arisen out of the need
    to handle larger messages,\n      which MUST use TCP, as discussed below.  Thus,
    even if an element\n      never sends large messages, it may receive one and needs
    to be\n      able to handle them.\n"
  title: 18 Transport
- contents:
  - '18.1 Clients

    '
  title: 18.1 Clients
- contents:
  - "18.1.1 Sending Requests\n   The client side of the transport layer is responsible
    for sending the\n   request and receiving responses.  The user of the transport
    layer\n   passes the client transport the request, an IP address, port,\n   transport,
    and possibly TTL for multicast destinations.\n   If a request is within 200 bytes
    of the path MTU, or if it is larger\n   than 1300 bytes and the path MTU is unknown,
    the request MUST be sent\n   using an RFC 2914 [43] congestion controlled transport
    protocol, such\n   as TCP. If this causes a change in the transport protocol from
    the\n   one indicated in the top Via, the value in the top Via MUST be\n   changed.
    \ This prevents fragmentation of messages over UDP and\n   provides congestion
    control for larger messages.  However,\n   implementations MUST be able to handle
    messages up to the maximum\n   datagram packet size.  For UDP, this size is 65,535
    bytes, including\n   IP and UDP headers.\n      The 200 byte \"buffer\" between
    the message size and the MTU\n      accommodates the fact that the response in
    SIP can be larger than\n      the request.  This happens due to the addition of
    Record-Route\n      header field values to the responses to INVITE, for example.
    \ With\n      the extra buffer, the response can be about 170 bytes larger than\n
    \     the request, and still not be fragmented on IPv4 (about 30 bytes\n      is
    consumed by IP/UDP, assuming no IPSec).  1300 is chosen when\n      path MTU is
    not known, based on the assumption of a 1500 byte\n      Ethernet MTU.\n   If
    an element sends a request over TCP because of these message size\n   constraints,
    and that request would have otherwise been sent over\n   UDP, if the attempt to
    establish the connection generates either an\n   ICMP Protocol Not Supported,
    or results in a TCP reset, the element\n   SHOULD retry the request, using UDP.
    \ This is only to provide\n   backwards compatibility with RFC 2543 compliant
    implementations that\n   do not support TCP.  It is anticipated that this behavior
    will be\n   deprecated in a future revision of this specification.\n   A client
    that sends a request to a multicast address MUST add the\n   \"maddr\" parameter
    to its Via header field value containing the\n   destination multicast address,
    and for IPv4, SHOULD add the \"ttl\"\n   parameter with a value of 1.  Usage of
    IPv6 multicast is not defined\n   in this specification, and will be a subject
    of future\n   standardization when the need arises.\n   These rules result in
    a purposeful limitation of multicast in SIP.\n   Its primary function is to provide
    a \"single-hop-discovery-like\"\n   service, delivering a request to a group of
    homogeneous servers,\n   where it is only required to process the response from
    any one of\n   them.  This functionality is most useful for registrations.  In
    fact,\n   based on the transaction processing rules in Section 17.1.3, the\n   client
    transaction will accept the first response, and view any\n   others as retransmissions
    because they all contain the same Via\n   branch identifier.\n   Before a request
    is sent, the client transport MUST insert a value of\n   the \"sent-by\" field
    into the Via header field.  This field contains\n   an IP address or host name,
    and port.  The usage of an FQDN is\n   RECOMMENDED.  This field is used for sending
    responses under certain\n   conditions, described below.  If the port is absent,
    the default\n   value depends on the transport.  It is 5060 for UDP, TCP and SCTP,\n
    \  5061 for TLS.\n   For reliable transports, the response is normally sent on
    the\n   connection on which the request was received.  Therefore, the client\n
    \  transport MUST be prepared to receive the response on the same\n   connection
    used to send the request.  Under error conditions, the\n   server may attempt
    to open a new connection to send the response.  To\n   handle this case, the transport
    layer MUST also be prepared to\n   receive an incoming connection on the source
    IP address from which\n   the request was sent and port number in the \"sent-by\"
    field.  It also\n   MUST be prepared to receive incoming connections on any address
    and\n   port that would be selected by a server based on the procedures\n   described
    in Section 5 of [4].\n   For unreliable unicast transports, the client transport
    MUST be\n   prepared to receive responses on the source IP address from which
    the\n   request is sent (as responses are sent back to the source address)\n   and
    the port number in the \"sent-by\" field.  Furthermore, as with\n   reliable transports,
    in certain cases the response will be sent\n   elsewhere.  The client MUST be
    prepared to receive responses on any\n   address and port that would be selected
    by a server based on the\n   procedures described in Section 5 of [4].\n   For
    multicast, the client transport MUST be prepared to receive\n   responses on the
    same multicast group and port to which the request\n   is sent (that is, it needs
    to be a member of the multicast group it\n   sent the request to.)\n   If a request
    is destined to an IP address, port, and transport to\n   which an existing connection
    is open, it is RECOMMENDED that this\n   connection be used to send the request,
    but another connection MAY be\n   opened and used.\n   If a request is sent using
    multicast, it is sent to the group\n   address, port, and TTL provided by the
    transport user.  If a request\n   is sent using unicast unreliable transports,
    it is sent to the IP\n   address and port provided by the transport user.\n"
  title: 18.1.1 Sending Requests
- contents:
  - "18.1.2 Receiving Responses\n   When a response is received, the client transport
    examines the top\n   Via header field value.  If the value of the \"sent-by\"
    parameter in\n   that header field value does not correspond to a value that the\n
    \  client transport is configured to insert into requests, the response\n   MUST
    be silently discarded.\n   If there are any client transactions in existence,
    the client\n   transport uses the matching procedures of Section 17.1.3 to attempt\n
    \  to match the response to an existing transaction.  If there is a\n   match,
    the response MUST be passed to that transaction.  Otherwise,\n   the response
    MUST be passed to the core (whether it be stateless\n   proxy, stateful proxy,
    or UA) for further processing.  Handling of\n   these \"stray\" responses is dependent
    on the core (a proxy will\n   forward them, while a UA will discard, for example).\n"
  title: 18.1.2 Receiving Responses
- contents:
  - '18.2 Servers

    '
  title: 18.2 Servers
- contents:
  - "18.2.1 Receiving Requests\n   A server SHOULD be prepared to receive requests
    on any IP address,\n   port and transport combination that can be the result of
    a DNS lookup\n   on a SIP or SIPS URI [4] that is handed out for the purposes
    of\n   communicating with that server.  In this context, \"handing out\"\n   includes
    placing a URI in a Contact header field in a REGISTER\n   request or a redirect
    response, or in a Record-Route header field in\n   a request or response.  A URI
    can also be \"handed out\" by placing it\n   on a web page or business card.  It
    is also RECOMMENDED that a server\n   listen for requests on the default SIP ports
    (5060 for TCP and UDP,\n   5061 for TLS over TCP) on all public interfaces.  The
    typical\n   exception would be private networks, or when multiple server\n   instances
    are running on the same host.  For any port and interface\n   that a server listens
    on for UDP, it MUST listen on that same port\n   and interface for TCP.  This
    is because a message may need to be sent\n   using TCP, rather than UDP, if it
    is too large.  As a result, the\n   converse is not true.  A server need not listen
    for UDP on a\n   particular address and port just because it is listening on that
    same\n   address and port for TCP.  There may, of course, be other reasons why\n
    \  a server needs to listen for UDP on a particular address and port.\n   When
    the server transport receives a request over any transport, it\n   MUST examine
    the value of the \"sent-by\" parameter in the top Via\n   header field value.
    \ If the host portion of the \"sent-by\" parameter\n   contains a domain name,
    or if it contains an IP address that differs\n   from the packet source address,
    the server MUST add a \"received\"\n   parameter to that Via header field value.
    \ This parameter MUST\n   contain the source address from which the packet was
    received.  This\n   is to assist the server transport layer in sending the response,\n
    \  since it must be sent to the source IP address from which the request\n   came.\n
    \  Consider a request received by the server transport which looks like,\n   in
    part:\n      INVITE sip:bob@Biloxi.com SIP/2.0\n      Via: SIP/2.0/UDP bobspc.biloxi.com:5060\n
    \  The request is received with a source IP address of 192.0.2.4.\n   Before passing
    the request up, the transport adds a \"received\"\n   parameter, so that the request
    would look like, in part:\n      INVITE sip:bob@Biloxi.com SIP/2.0\n      Via:
    SIP/2.0/UDP bobspc.biloxi.com:5060;received=192.0.2.4\n   Next, the server transport
    attempts to match the request to a server\n   transaction.  It does so using the
    matching rules described in\n   Section 17.2.3.  If a matching server transaction
    is found, the\n   request is passed to that transaction for processing.  If no
    match is\n   found, the request is passed to the core, which may decide to\n   construct
    a new server transaction for that request.  Note that when\n   a UAS core sends
    a 2xx response to INVITE, the server transaction is\n   destroyed.  This means
    that when the ACK arrives, there will be no\n   matching server transaction, and
    based on this rule, the ACK is\n   passed to the UAS core, where it is processed.\n"
  title: 18.2.1 Receiving Requests
- contents:
  - "18.2.2 Sending Responses\n   The server transport uses the value of the top Via
    header field in\n   order to determine where to send a response.  It MUST follow
    the\n   following process:\n      o  If the \"sent-protocol\" is a reliable transport
    protocol such as\n         TCP or SCTP, or TLS over those, the response MUST be
    sent using\n         the existing connection to the source of the original request\n
    \        that created the transaction, if that connection is still open.\n         This
    requires the server transport to maintain an association\n         between server
    transactions and transport connections.  If that\n         connection is no longer
    open, the server SHOULD open a\n         connection to the IP address in the \"received\"
    parameter, if\n         present, using the port in the \"sent-by\" value, or the
    default\n         port for that transport, if no port is specified.  If that\n
    \        connection attempt fails, the server SHOULD use the procedures\n         in
    [4] for servers in order to determine the IP address and\n         port to open
    the connection and send the response to.\n      o  Otherwise, if the Via header
    field value contains a \"maddr\"\n         parameter, the response MUST be forwarded
    to the address listed\n         there, using the port indicated in \"sent-by\",
    or port 5060 if\n         none is present.  If the address is a multicast address,
    the\n         response SHOULD be sent using the TTL indicated in the \"ttl\"\n
    \        parameter, or with a TTL of 1 if that parameter is not present.\n      o
    \ Otherwise (for unreliable unicast transports), if the top Via\n         has
    a \"received\" parameter, the response MUST be sent to the\n         address in
    the \"received\" parameter, using the port indicated\n         in the \"sent-by\"
    value, or using port 5060 if none is specified\n         explicitly.  If this
    fails, for example, elicits an ICMP \"port\n         unreachable\" response, the
    procedures of Section 5 of [4]\n         SHOULD be used to determine where to
    send the response.\n      o  Otherwise, if it is not receiver-tagged, the response
    MUST be\n         sent to the address indicated by the \"sent-by\" value, using
    the\n         procedures in Section 5 of [4].\n"
  title: 18.2.2 Sending Responses
- contents:
  - "18.3 Framing\n   In the case of message-oriented transports (such as UDP), if
    the\n   message has a Content-Length header field, the message body is\n   assumed
    to contain that many bytes.  If there are additional bytes in\n   the transport
    packet beyond the end of the body, they MUST be\n   discarded.  If the transport
    packet ends before the end of the\n   message body, this is considered an error.
    \ If the message is a\n   response, it MUST be discarded.  If the message is a
    request, the\n   element SHOULD generate a 400 (Bad Request) response.  If the
    message\n   has no Content-Length header field, the message body is assumed to\n
    \  end at the end of the transport packet.\n   In the case of stream-oriented
    transports such as TCP, the Content-\n   Length header field indicates the size
    of the body.  The Content-\n   Length header field MUST be used with stream oriented
    transports.\n"
  title: 18.3 Framing
- contents:
  - "18.4 Error Handling\n   Error handling is independent of whether the message
    was a request or\n   response.\n   If the transport user asks for a message to
    be sent over an\n   unreliable transport, and the result is an ICMP error, the
    behavior\n   depends on the type of ICMP error.  Host, network, port or protocol\n
    \  unreachable errors, or parameter problem errors SHOULD cause the\n   transport
    layer to inform the transport user of a failure in sending.\n   Source quench
    and TTL exceeded ICMP errors SHOULD be ignored.\n   If the transport user asks
    for a request to be sent over a reliable\n   transport, and the result is a connection
    failure, the transport\n   layer SHOULD inform the transport user of a failure
    in sending.\n"
  title: 18.4 Error Handling
- contents:
  - "19 Common Message Components\n   There are certain components of SIP messages
    that appear in various\n   places within SIP messages (and sometimes, outside
    of them) that\n   merit separate discussion.\n"
  title: 19 Common Message Components
- contents:
  - "19.1 SIP and SIPS Uniform Resource Indicators\n   A SIP or SIPS URI identifies
    a communications resource.  Like all\n   URIs, SIP and SIPS URIs may be placed
    in web pages, email messages,\n   or printed literature.  They contain sufficient
    information to\n   initiate and maintain a communication session with the resource.\n
    \  Examples of communications resources include the following:\n      o  a user
    of an online service\n      o  an appearance on a multi-line phone\n      o  a
    mailbox on a messaging system\n      o  a PSTN number at a gateway service\n      o
    \ a group (such as \"sales\" or \"helpdesk\") in an organization\n   A SIPS URI
    specifies that the resource be contacted securely.  This\n   means, in particular,
    that TLS is to be used between the UAC and the\n   domain that owns the URI.  From
    there, secure communications are used\n   to reach the user, where the specific
    security mechanism depends on\n   the policy of the domain.  Any resource described
    by a SIP URI can be\n   \"upgraded\" to a SIPS URI by just changing the scheme,
    if it is\n   desired to communicate with that resource securely.\n"
  title: 19.1 SIP and SIPS Uniform Resource Indicators
- contents:
  - "19.1.1 SIP and SIPS URI Components\n   The \"sip:\" and \"sips:\" schemes follow
    the guidelines in RFC 2396 [5].\n   They use a form similar to the mailto URL,
    allowing the specification\n   of SIP request-header fields and the SIP message-body.
    \ This makes it\n   possible to specify the subject, media type, or urgency of
    sessions\n   initiated by using a URI on a web page or in an email message.  The\n
    \  formal syntax for a SIP or SIPS URI is presented in Section 25.  Its\n   general
    form, in the case of a SIP URI, is:\n      sip:user:password@host:port;uri-parameters?headers\n
    \  The format for a SIPS URI is the same, except that the scheme is\n   \"sips\"
    instead of sip.  These tokens, and some of the tokens in their\n   expansions,
    have the following meanings:\n      user: The identifier of a particular resource
    at the host being\n         addressed.  The term \"host\" in this context frequently
    refers\n         to a domain.  The \"userinfo\" of a URI consists of this user\n
    \        field, the password field, and the @ sign following them.  The\n         userinfo
    part of a URI is optional and MAY be absent when the\n         destination host
    does not have a notion of users or when the\n         host itself is the resource
    being identified.  If the @ sign is\n         present in a SIP or SIPS URI, the
    user field MUST NOT be empty.\n         If the host being addressed can process
    telephone numbers, for\n         instance, an Internet telephony gateway, a telephone-\n
    \        subscriber field defined in RFC 2806 [9] MAY be used to\n         populate
    the user field.  There are special escaping rules for\n         encoding telephone-subscriber
    fields in SIP and SIPS URIs\n         described in Section 19.1.2.\n      password:
    A password associated with the user.  While the SIP and\n         SIPS URI syntax
    allows this field to be present, its use is NOT\n         RECOMMENDED, because
    the passing of authentication information\n         in clear text (such as URIs)
    has proven to be a security risk\n         in almost every case where it has been
    used.  For instance,\n         transporting a PIN number in this field exposes
    the PIN.\n         Note that the password field is just an extension of the user\n
    \        portion.  Implementations not wishing to give special\n         significance
    to the password portion of the field MAY simply\n         treat \"user:password\"
    as a single string.\n      host: The host providing the SIP resource.  The host
    part contains\n         either a fully-qualified domain name or numeric IPv4 or
    IPv6\n         address.  Using the fully-qualified domain name form is\n         RECOMMENDED
    whenever possible.\n      port: The port number where the request is to be sent.\n
    \     URI parameters: Parameters affecting a request constructed from\n         the
    URI.\n         URI parameters are added after the hostport component and are\n
    \        separated by semi-colons.\n         URI parameters take the form:\n            parameter-name
    \"=\" parameter-value\n         Even though an arbitrary number of URI parameters
    may be\n         included in a URI, any given parameter-name MUST NOT appear\n
    \        more than once.\n         This extensible mechanism includes the transport,
    maddr, ttl,\n         user, method and lr parameters.\n         The transport
    parameter determines the transport mechanism to\n         be used for sending
    SIP messages, as specified in [4].  SIP can\n         use any network transport
    protocol.  Parameter names are\n         defined for UDP (RFC 768 [14]), TCP (RFC
    761 [15]), and SCTP\n         (RFC 2960 [16]).  For a SIPS URI, the transport
    parameter MUST\n         indicate a reliable transport.\n         The maddr parameter
    indicates the server address to be\n         contacted for this user, overriding
    any address derived from\n         the host field.  When an maddr parameter is
    present, the port\n         and transport components of the URI apply to the address\n
    \        indicated in the maddr parameter value.  [4] describes the\n         proper
    interpretation of the transport, maddr, and hostport in\n         order to obtain
    the destination address, port, and transport\n         for sending a request.\n
    \        The maddr field has been used as a simple form of loose source\n         routing.
    \ It allows a URI to specify a proxy that must be\n         traversed en-route
    to the destination.  Continuing to use the\n         maddr parameter this way
    is strongly discouraged (the\n         mechanisms that enable it are deprecated).
    \ Implementations\n         should instead use the Route mechanism described in
    this\n         document, establishing a pre-existing route set if necessary\n
    \        (see Section 8.1.1.1).  This provides a full URI to describe\n         the
    node to be traversed.\n         The ttl parameter determines the time-to-live
    value of the UDP\n         multicast packet and MUST only be used if maddr is
    a multicast\n         address and the transport protocol is UDP.  For example,
    to\n         specify a call to alice@atlanta.com using multicast to\n         239.255.255.1
    with a ttl of 15, the following URI would be\n         used:\n            sip:alice@atlanta.com;maddr=239.255.255.1;ttl=15\n
    \        The set of valid telephone-subscriber strings is a subset of\n         valid
    user strings.  The user URI parameter exists to\n         distinguish telephone
    numbers from user names that happen to\n         look like telephone numbers.
    \ If the user string contains a\n         telephone number formatted as a telephone-subscriber,
    the user\n         parameter value \"phone\" SHOULD be present.  Even without
    this\n         parameter, recipients of SIP and SIPS URIs MAY interpret the\n
    \        pre-@ part as a telephone number if local restrictions on the\n         name
    space for user name allow it.\n         The method of the SIP request constructed
    from the URI can be\n         specified with the method parameter.\n         The
    lr parameter, when present, indicates that the element\n         responsible for
    this resource implements the routing mechanisms\n         specified in this document.
    \ This parameter will be used in the\n         URIs proxies place into Record-Route
    header field values, and\n         may appear in the URIs in a pre-existing route
    set.\n         This parameter is used to achieve backwards compatibility with\n
    \        systems implementing the strict-routing mechanisms of RFC 2543\n         and
    the rfc2543bis drafts up to bis-05.  An element preparing\n         to send a
    request based on a URI not containing this parameter\n         can assume the
    receiving element implements strict-routing and\n         reformat the message
    to preserve the information in the\n         Request-URI.\n         Since the
    uri-parameter mechanism is extensible, SIP elements\n         MUST silently ignore
    any uri-parameters that they do not\n         understand.\n      Headers: Header
    fields to be included in a request constructed\n         from the URI.\n         Headers
    fields in the SIP request can be specified with the \"?\"\n         mechanism
    within a URI.  The header names and values are\n         encoded in ampersand
    separated hname = hvalue pairs.  The\n         special hname \"body\" indicates
    that the associated hvalue is\n         the message-body of the SIP request.\n
    \  Table 1 summarizes the use of SIP and SIPS URI components based on\n   the
    context in which the URI appears.  The external column describes\n   URIs appearing
    anywhere outside of a SIP message, for instance on a\n   web page or business
    card.  Entries marked \"m\" are mandatory, those\n   marked \"o\" are optional,
    and those marked \"-\" are not allowed.\n   Elements processing URIs SHOULD ignore
    any disallowed components if\n   they are present.  The second column indicates
    the default value of\n   an optional element if it is not present.  \"--\" indicates
    that the\n   element is either not optional, or has no default value.\n   URIs
    in Contact header fields have different restrictions depending\n   on the context
    in which the header field appears.  One set applies to\n   messages that establish
    and maintain dialogs (INVITE and its 200 (OK)\n   response).  The other applies
    to registration and redirection\n   messages (REGISTER, its 200 (OK) response,
    and 3xx class responses to\n   any method).\n"
  title: 19.1.1 SIP and SIPS URI Components
- contents:
  - "19.1.2 Character Escaping Requirements\n                                                       dialog\n
    \                                         reg./redir. Contact/\n              default
    \ Req.-URI  To  From  Contact   R-R/Route  external\n"
  title: 19.1.2 Character Escaping Requirements
- contents:
  - 'user          --          o      o    o       o          o         o

    '
  title: user          --          o      o    o       o          o         o
- contents:
  - 'password      --          o      o    o       o          o         o

    '
  title: password      --          o      o    o       o          o         o
- contents:
  - 'host          --          m      m    m       m          m         m

    '
  title: host          --          m      m    m       m          m         m
- contents:
  - 'port          (1)         o      -    -       o          o         o

    '
  title: port          (1)         o      -    -       o          o         o
- contents:
  - 'user-param    ip          o      o    o       o          o         o

    '
  title: user-param    ip          o      o    o       o          o         o
- contents:
  - 'method        INVITE      -      -    -       -          -         o

    '
  title: method        INVITE      -      -    -       -          -         o
- contents:
  - 'maddr-param   --          o      -    -       o          o         o

    '
  title: maddr-param   --          o      -    -       o          o         o
- contents:
  - 'ttl-param     1           o      -    -       o          -         o

    '
  title: ttl-param     1           o      -    -       o          -         o
- contents:
  - 'transp.-param (2)         o      -    -       o          o         o

    '
  title: transp.-param (2)         o      -    -       o          o         o
- contents:
  - 'lr-param      --          o      -    -       -          o         o

    '
  title: lr-param      --          o      -    -       -          o         o
- contents:
  - 'other-param   --          o      o    o       o          o         o

    '
  title: other-param   --          o      o    o       o          o         o
- contents:
  - "headers       --          -      -    -       o          -         o\n   (1):
    The default port value is transport and scheme dependent.  The\n   default  is
    \ 5060  for  sip: using UDP, TCP, or SCTP.  The default is\n   5061 for sip: using
    TLS over TCP and sips: over TCP.\n   (2): The default transport is scheme dependent.
    \ For sip:, it is UDP.\n   For sips:, it is TCP.\n   Table 1: Use and default
    values of URI components for SIP header\n   field values, Request-URI and references\n
    \  SIP follows the requirements and guidelines of RFC 2396 [5] when\n   defining
    the set of characters that must be escaped in a SIP URI, and\n   uses its \"\"%\"
    HEX HEX\" mechanism for escaping.  From RFC 2396 [5]:\n      The set of characters
    actually reserved within any given URI\n      component is defined by that component.
    \ In general, a character\n      is reserved if the semantics of the URI changes
    if the character\n      is replaced with its escaped US-ASCII encoding [5].  Excluded
    US-\n      ASCII characters (RFC 2396 [5]), such as space and control\n      characters
    and characters used as URI delimiters, also MUST be\n      escaped.  URIs MUST
    NOT contain unescaped space and control\n      characters.\n   For each component,
    the set of valid BNF expansions defines exactly\n   which characters may appear
    unescaped.  All other characters MUST be\n   escaped.\n   For example, \"@\" is
    not in the set of characters in the user\n   component, so the user \"j@s0n\"
    must have at least the @ sign encoded,\n   as in \"j%40s0n\".\n   Expanding the
    hname and hvalue tokens in Section 25 show that all URI\n   reserved characters
    in header field names and values MUST be escaped.\n   The telephone-subscriber
    subset of the user component has special\n   escaping considerations.  The set
    of characters not reserved in the\n   RFC 2806 [9] description of telephone-subscriber
    contains a number of\n   characters in various syntax elements that need to be
    escaped when\n   used in SIP URIs.  Any characters occurring in a telephone-subscriber\n
    \  that do not appear in an expansion of the BNF for the user rule MUST\n   be
    escaped.\n   Note that character escaping is not allowed in the host component
    of\n   a SIP or SIPS URI (the % character is not valid in its expansion).\n   This
    is likely to change in the future as requirements for\n   Internationalized Domain
    Names are finalized.  Current\n   implementations MUST NOT attempt to improve
    robustness by treating\n   received escaped characters in the host component as
    literally\n   equivalent to their unescaped counterpart.  The behavior required
    to\n   meet the requirements of IDN may be significantly different.\n"
  title: headers       --          -      -    -       o          -         o
- contents:
  - "19.1.3 Example SIP and SIPS URIs\n   sip:alice@atlanta.com\n   sip:alice:secretword@atlanta.com;transport=tcp\n
    \  sips:alice@atlanta.com?subject=project%20x&priority=urgent\n   sip:+1-212-555-1212:1234@gateway.com;user=phone\n
    \  sips:1212@gateway.com\n   sip:alice@192.0.2.4\n   sip:atlanta.com;method=REGISTER?to=alice%40atlanta.com\n
    \  sip:alice;day=tuesday@atlanta.com\n   The last sample URI above has a user
    field value of\n   \"alice;day=tuesday\".  The escaping rules defined above allow
    a\n   semicolon to appear unescaped in this field.  For the purposes of\n   this
    protocol, the field is opaque.  The structure of that value is\n   only useful
    to the SIP element responsible for the resource.\n"
  title: 19.1.3 Example SIP and SIPS URIs
- contents:
  - "19.1.4 URI Comparison\n   Some operations in this specification require determining
    whether two\n   SIP or SIPS URIs are equivalent.  In this specification, registrars\n
    \  need to compare bindings in Contact URIs in REGISTER requests (see\n   Section
    10.3.).  SIP and SIPS URIs are compared for equality\n   according to the following
    rules:\n      o  A SIP and SIPS URI are never equivalent.\n      o  Comparison
    of the userinfo of SIP and SIPS URIs is case-\n         sensitive.  This includes
    userinfo containing passwords or\n         formatted as telephone-subscribers.
    \ Comparison of all other\n         components of the URI is case-insensitive
    unless explicitly\n         defined otherwise.\n      o  The ordering of parameters
    and header fields is not significant\n         in comparing SIP and SIPS URIs.\n
    \     o  Characters other than those in the \"reserved\" set (see RFC 2396\n         [5])
    are equivalent to their \"\"%\" HEX HEX\" encoding.\n      o  An IP address that
    is the result of a DNS lookup of a host name\n         does not match that host
    name.\n      o  For two URIs to be equal, the user, password, host, and port\n
    \        components must match.\n         A URI omitting the user component will
    not match a URI that\n         includes one.  A URI omitting the password component
    will not\n         match a URI that includes one.\n         A URI omitting any
    component with a default value will not\n         match a URI explicitly containing
    that component with its\n         default value.  For instance, a URI omitting
    the optional port\n         component will not match a URI explicitly declaring
    port 5060.\n         The same is true for the transport-parameter, ttl-parameter,\n
    \        user-parameter, and method components.\n            Defining sip:user@host
    to not be equivalent to\n            sip:user@host:5060 is a change from RFC 2543.
    \ When deriving\n            addresses from URIs, equivalent addresses are expected
    from\n            equivalent URIs.  The URI sip:user@host:5060 will always\n            resolve
    to port 5060.  The URI sip:user@host may resolve to\n            other ports through
    the DNS SRV mechanisms detailed in [4].\n      o  URI uri-parameter components
    are compared as follows:\n         -  Any uri-parameter appearing in both URIs
    must match.\n         -  A user, ttl, or method uri-parameter appearing in only
    one\n            URI never matches, even if it contains the default value.\n         -
    \ A URI that includes an maddr parameter will not match a URI\n            that
    contains no maddr parameter.\n         -  All other uri-parameters appearing in
    only one URI are\n            ignored when comparing the URIs.\n      o  URI header
    components are never ignored.  Any present header\n         component MUST be
    present in both URIs and match for the URIs\n         to match.  The matching
    rules are defined for each header field\n         in Section 20.\n   The URIs
    within each of the following sets are equivalent:\n   sip:%61lice@atlanta.com;transport=TCP\n
    \  sip:alice@AtLanTa.CoM;Transport=tcp\n   sip:carol@chicago.com\n   sip:carol@chicago.com;newparam=5\n
    \  sip:carol@chicago.com;security=on\n   sip:biloxi.com;transport=tcp;method=REGISTER?to=sip:bob%40biloxi.com\n
    \  sip:biloxi.com;method=REGISTER;transport=tcp?to=sip:bob%40biloxi.com\n   sip:alice@atlanta.com?subject=project%20x&priority=urgent\n
    \  sip:alice@atlanta.com?priority=urgent&subject=project%20x\n   The URIs within
    each of the following sets are not equivalent:\n   SIP:ALICE@AtLanTa.CoM;Transport=udp
    \            (different usernames)\n   sip:alice@AtLanTa.CoM;Transport=UDP\n   sip:bob@biloxi.com
    \                  (can resolve to different ports)\n   sip:bob@biloxi.com:5060\n
    \  sip:bob@biloxi.com              (can resolve to different transports)\n   sip:bob@biloxi.com;transport=udp\n
    \  sip:bob@biloxi.com     (can resolve to different port and transports)\n   sip:bob@biloxi.com:6000;transport=tcp\n
    \  sip:carol@chicago.com                    (different header component)\n   sip:carol@chicago.com?Subject=next%20meeting\n
    \  sip:bob@phone21.boxesbybob.com   (even though that's what\n   sip:bob@192.0.2.4
    \                phone21.boxesbybob.com resolves to)\n   Note that equality is
    not transitive:\n      o  sip:carol@chicago.com and sip:carol@chicago.com;security=on
    are\n         equivalent\n      o  sip:carol@chicago.com and sip:carol@chicago.com;security=off\n
    \        are equivalent\n      o  sip:carol@chicago.com;security=on and\n         sip:carol@chicago.com;security=off
    are not equivalent\n"
  title: 19.1.4 URI Comparison
- contents:
  - "19.1.5 Forming Requests from a URI\n   An implementation needs to take care when
    forming requests directly\n   from a URI.  URIs from business cards, web pages,
    and even from\n   sources inside the protocol such as registered contacts may
    contain\n   inappropriate header fields or body parts.\n   An implementation MUST
    include any provided transport, maddr, ttl, or\n   user parameter in the Request-URI
    of the formed request.  If the URI\n   contains a method parameter, its value
    MUST be used as the method of\n   the request.  The method parameter MUST NOT
    be placed in the\n   Request-URI.  Unknown URI parameters MUST be placed in the
    message's\n   Request-URI.\n   An implementation SHOULD treat the presence of
    any headers or body\n   parts in the URI as a desire to include them in the message,
    and\n   choose to honor the request on a per-component basis.\n   An implementation
    SHOULD NOT honor these obviously dangerous header\n   fields: From, Call-ID, CSeq,
    Via, and Record-Route.\n   An implementation SHOULD NOT honor any requested Route
    header field\n   values in order to not be used as an unwitting agent in malicious\n
    \  attacks.\n   An implementation SHOULD NOT honor requests to include header
    fields\n   that may cause it to falsely advertise its location or capabilities.\n
    \  These include: Accept, Accept-Encoding, Accept-Language, Allow,\n   Contact
    (in its dialog usage), Organization, Supported, and User-\n   Agent.\n   An implementation
    SHOULD verify the accuracy of any requested\n   descriptive header fields, including:
    Content-Disposition, Content-\n   Encoding, Content-Language, Content-Length,
    Content-Type, Date,\n   Mime-Version, and Timestamp.\n   If the request formed
    from constructing a message from a given URI is\n   not a valid SIP request, the
    URI is invalid.  An implementation MUST\n   NOT proceed with transmitting the
    request.  It should instead pursue\n   the course of action due an invalid URI
    in the context it occurs.\n      The constructed request can be invalid in many
    ways.  These\n      include, but are not limited to, syntax error in header fields,\n
    \     invalid combinations of URI parameters, or an incorrect\n      description
    of the message body.\n   Sending a request formed from a given URI may require
    capabilities\n   unavailable to the implementation.  The URI might indicate use
    of an\n   unimplemented transport or extension, for example.  An implementation\n
    \  SHOULD refuse to send these requests rather than modifying them to\n   match
    their capabilities.  An implementation MUST NOT send a request\n   requiring an
    extension that it does not support.\n      For example, such a request can be
    formed through the presence of\n      a Require header parameter or a method URI
    parameter with an\n      unknown or explicitly unsupported value.\n"
  title: 19.1.5 Forming Requests from a URI
- contents:
  - "19.1.6 Relating SIP URIs and tel URLs\n   When a tel URL (RFC 2806 [9]) is converted
    to a SIP or SIPS URI, the\n   entire telephone-subscriber portion of the tel URL,
    including any\n   parameters, is placed into the userinfo part of the SIP or SIPS
    URI.\n   Thus, tel:+358-555-1234567;postd=pp22 becomes\n      sip:+358-555-1234567;postd=pp22@foo.com;user=phone\n
    \  or\n      sips:+358-555-1234567;postd=pp22@foo.com;user=phone\n   not\n      sip:+358-555-1234567@foo.com;postd=pp22;user=phone\n
    \  or\n      sips:+358-555-1234567@foo.com;postd=pp22;user=phone\n   In general,
    equivalent \"tel\" URLs converted to SIP or SIPS URIs in\n   this fashion may
    not produce equivalent SIP or SIPS URIs.  The\n   userinfo of SIP and SIPS URIs
    are compared as a case-sensitive\n   string.  Variance in case-insensitive portions
    of tel URLs and\n   reordering of tel URL parameters does not affect tel URL equivalence,\n
    \  but does affect the equivalence of SIP URIs formed from them.\n   For example,\n
    \     tel:+358-555-1234567;postd=pp22\n      tel:+358-555-1234567;POSTD=PP22\n
    \  are equivalent, while\n      sip:+358-555-1234567;postd=pp22@foo.com;user=phone\n
    \     sip:+358-555-1234567;POSTD=PP22@foo.com;user=phone\n   are not.\n   Likewise,\n
    \     tel:+358-555-1234567;postd=pp22;isub=1411\n      tel:+358-555-1234567;isub=1411;postd=pp22\n
    \  are equivalent, while\n      sip:+358-555-1234567;postd=pp22;isub=1411@foo.com;user=phone\n
    \     sip:+358-555-1234567;isub=1411;postd=pp22@foo.com;user=phone\n   are not.\n
    \  To mitigate this problem, elements constructing telephone-subscriber\n   fields
    to place in the userinfo part of a SIP or SIPS URI SHOULD fold\n   any case-insensitive
    portion of telephone-subscriber to lower case,\n   and order the telephone-subscriber
    parameters lexically by parameter\n   name, excepting isdn-subaddress and post-dial,
    which occur first and\n   in that order.  (All components of a tel URL except
    for future-\n   extension parameters are defined to be compared case-insensitive.)\n
    \  Following this suggestion, both\n      tel:+358-555-1234567;postd=pp22\n      tel:+358-555-1234567;POSTD=PP22\n
    \     become\n        sip:+358-555-1234567;postd=pp22@foo.com;user=phone\n   and
    both\n        tel:+358-555-1234567;tsp=a.b;phone-context=5\n        tel:+358-555-1234567;phone-context=5;tsp=a.b\n
    \     become\n        sip:+358-555-1234567;phone-context=5;tsp=a.b@foo.com;user=phone\n"
  title: 19.1.6 Relating SIP URIs and tel URLs
- contents:
  - "19.2 Option Tags\n   Option tags are unique identifiers used to designate new
    options\n   (extensions) in SIP.  These tags are used in Require (Section 20.32),\n
    \  Proxy-Require (Section 20.29), Supported (Section 20.37) and\n   Unsupported
    (Section 20.40) header fields.  Note that these options\n   appear as parameters
    in those header fields in an option-tag = token\n   form (see Section 25 for the
    definition of token).\n   Option tags are defined in standards track RFCs.  This
    is a change\n   from past practice, and is instituted to ensure continuing multi-\n
    \  vendor interoperability (see discussion in Section 20.32 and Section\n   20.37).
    \ An IANA registry of option tags is used to ensure easy\n   reference.\n"
  title: 19.2 Option Tags
- contents:
  - "19.3 Tags\n   The \"tag\" parameter is used in the To and From header fields
    of SIP\n   messages.  It serves as a general mechanism to identify a dialog,\n
    \  which is the combination of the Call-ID along with two tags, one from\n   each
    participant in the dialog.  When a UA sends a request outside of\n   a dialog,
    it contains a From tag only, providing \"half\" of the dialog\n   ID.  The dialog
    is completed from the response(s), each of which\n   contributes the second half
    in the To header field.  The forking of\n   SIP requests means that multiple dialogs
    can be established from a\n   single request.  This also explains the need for
    the two-sided dialog\n   identifier; without a contribution from the recipients,
    the\n   originator could not disambiguate the multiple dialogs established\n   from
    a single request.\n   When a tag is generated by a UA for insertion into a request
    or\n   response, it MUST be globally unique and cryptographically random\n   with
    at least 32 bits of randomness.  A property of this selection\n   requirement
    is that a UA will place a different tag into the From\n   header of an INVITE
    than it would place into the To header of the\n   response to the same INVITE.
    \ This is needed in order for a UA to\n   invite itself to a session, a common
    case for \"hairpinning\" of calls\n   in PSTN gateways.  Similarly, two INVITEs
    for different calls will\n   have different From tags, and two responses for different
    calls will\n   have different To tags.\n   Besides the requirement for global
    uniqueness, the algorithm for\n   generating a tag is implementation-specific.
    \ Tags are helpful in\n   fault tolerant systems, where a dialog is to be recovered
    on an\n   alternate server after a failure.  A UAS can select the tag in such
    a\n   way that a backup can recognize a request as part of a dialog on the\n   failed
    server, and therefore determine that it should attempt to\n   recover the dialog
    and any other state associated with it.\n"
  title: 19.3 Tags
- contents:
  - "20 Header Fields\n   The general syntax for header fields is covered in Section
    7.3.  This\n   section lists the full set of header fields along with notes on\n
    \  syntax, meaning, and usage.  Throughout this section, we use [HX.Y]\n   to
    refer to Section X.Y of the current HTTP/1.1 specification RFC\n   2616 [8].  Examples
    of each header field are given.\n   Information about header fields in relation
    to methods and proxy\n   processing is summarized in Tables 2 and 3.\n   The \"where\"
    column describes the request and response types in which\n   the header field
    can be used.  Values in this column are:\n      R: header field may only appear
    in requests;\n      r: header field may only appear in responses;\n      2xx,
    4xx, etc.: A numerical value or range indicates response\n           codes with
    which the header field can be used;\n      c: header field is copied from the
    request to the response.\n      An empty entry in the \"where\" column indicates
    that the header\n           field may be present in all requests and responses.\n
    \  The \"proxy\" column describes the operations a proxy may perform on a\n   header
    field:\n      a: A proxy can add or concatenate the header field if not present.\n
    \     m: A proxy can modify an existing header field value.\n      d: A proxy
    can delete a header field value.\n      r: A proxy must be able to read the header
    field, and thus this\n           header field cannot be encrypted.\n   The next
    six columns relate to the presence of a header field in a\n   method:\n      c:
    Conditional; requirements on the header field depend on the\n           context
    of the message.\n      m: The header field is mandatory.\n      m*: The header
    field SHOULD be sent, but clients/servers need to\n           be prepared to receive
    messages without that header field.\n      o: The header field is optional.\n
    \     t: The header field SHOULD be sent, but clients/servers need to be\n           prepared
    to receive messages without that header field.\n           If a stream-based protocol
    (such as TCP) is used as a\n           transport, then the header field MUST be
    sent.\n      *: The header field is required if the message body is not empty.\n
    \          See Sections 20.14, 20.15 and 7.4 for details.\n      -: The header
    field is not applicable.\n   \"Optional\" means that an element MAY include the
    header field in a\n   request or response, and a UA MAY ignore the header field
    if present\n   in the request or response (The exception to this rule is the Require\n
    \  header field discussed in 20.32).  A \"mandatory\" header field MUST be\n   present
    in a request, and MUST be understood by the UAS receiving the\n   request.  A
    mandatory response header field MUST be present in the\n   response, and the header
    field MUST be understood by the UAC\n   processing the response.  \"Not applicable\"
    means that the header\n   field MUST NOT be present in a request.  If one is placed
    in a\n   request by mistake, it MUST be ignored by the UAS receiving the\n   request.
    \ Similarly, a header field labeled \"not applicable\" for a\n   response means
    that the UAS MUST NOT place the header field in the\n   response, and the UAC
    MUST ignore the header field in the response.\n   A UA SHOULD ignore extension
    header parameters that are not\n   understood.\n   A compact form of some common
    header field names is also defined for\n   use when overall message size is an
    issue.\n   The Contact, From, and To header fields contain a URI.  If the URI\n
    \  contains a comma, question mark or semicolon, the URI MUST be\n   enclosed
    in angle brackets (< and >).  Any URI parameters are\n   contained within these
    brackets.  If the URI is not enclosed in angle\n   brackets, any semicolon-delimited
    parameters are header-parameters,\n   not URI parameters.\n"
  title: 20 Header Fields
- contents:
  - "20.1 Accept\n   The Accept header field follows the syntax defined in [H14.1].
    \ The\n   semantics are also identical, with the exception that if no Accept\n
    \  header field is present, the server SHOULD assume a default value of\n   application/sdp.\n
    \  An empty Accept header field means that no formats are acceptable.\n   Example:\n
    \     Header field          where   proxy ACK BYE CAN INV OPT REG\n      ___________________________________________________________\n
    \     Accept                  R            -   o   -   o   m*  o\n      Accept
    \                2xx           -   -   -   o   m*  o\n      Accept                 415
    \          -   c   -   c   c   c\n      Accept-Encoding         R            -
    \  o   -   o   o   o\n      Accept-Encoding        2xx           -   -   -   o
    \  m*  o\n      Accept-Encoding        415           -   c   -   c   c   c\n      Accept-Language
    \        R            -   o   -   o   o   o\n      Accept-Language        2xx
    \          -   -   -   o   m*  o\n      Accept-Language        415           -
    \  c   -   c   c   c\n      Alert-Info              R      ar    -   -   -   o
    \  -   -\n      Alert-Info             180     ar    -   -   -   o   -   -\n      Allow
    \                  R            -   o   -   o   o   o\n      Allow                  2xx
    \          -   o   -   m*  m*  o\n      Allow                   r            -
    \  o   -   o   o   o\n      Allow                  405           -   m   -   m
    \  m   m\n      Authentication-Info    2xx           -   o   -   o   o   o\n      Authorization
    \          R            o   o   o   o   o   o\n      Call-ID                 c
    \      r    m   m   m   m   m   m\n      Call-Info                      ar    -
    \  -   -   o   o   o\n      Contact                 R            o   -   -   m
    \  o   o\n      Contact                1xx           -   -   -   o   -   -\n      Contact
    \               2xx           -   -   -   m   o   o\n      Contact                3xx
    \     d    -   o   -   o   o   o\n      Contact                485           -
    \  o   -   o   o   o\n      Content-Disposition                  o   o   -   o
    \  o   o\n      Content-Encoding                     o   o   -   o   o   o\n      Content-Language
    \                    o   o   -   o   o   o\n      Content-Length                 ar
    \   t   t   t   t   t   t\n      Content-Type                         *   *   -
    \  *   *   *\n      CSeq                    c       r    m   m   m   m   m   m\n
    \     Date                            a    o   o   o   o   o   o\n      Error-Info
    \          300-699    a    -   o   o   o   o   o\n      Expires                              -
    \  -   -   o   -   o\n      From                    c       r    m   m   m   m
    \  m   m\n      In-Reply-To             R            -   -   -   o   -   -\n      Max-Forwards
    \           R      amr   m   m   m   m   m   m\n      Min-Expires            423
    \          -   -   -   -   -   m\n      MIME-Version                         o
    \  o   -   o   o   o\n      Organization                   ar    -   -   -   o
    \  o   o\n             Table 2: Summary of header fields, A--O\n   Header field
    \             where       proxy ACK BYE CAN INV OPT REG\n   ___________________________________________________________________\n
    \  Priority                    R          ar    -   -   -   o   -   -\n   Proxy-Authenticate
    \        407         ar    -   m   -   m   m   m\n   Proxy-Authenticate         401
    \        ar    -   o   o   o   o   o\n   Proxy-Authorization         R          dr
    \   o   o   -   o   o   o\n   Proxy-Require               R          ar    -   o
    \  -   o   o   o\n   Record-Route                R          ar    o   o   o   o
    \  o   -\n   Record-Route             2xx,18x       mr    -   o   o   o   o   -\n
    \  Reply-To                                     -   -   -   o   -   -\n   Require
    \                               ar    -   c   -   c   c   c\n   Retry-After          404,413,480,486
    \        -   o   o   o   o   o\n                            500,503             -
    \  o   o   o   o   o\n                            600,603             -   o   o
    \  o   o   o\n   Route                       R          adr   c   c   c   c   c
    \  c\n   Server                      r                -   o   o   o   o   o\n
    \  Subject                     R                -   -   -   o   -   -\n   Supported
    \                  R                -   o   o   m*  o   o\n   Supported                  2xx
    \              -   o   o   m*  m*  o\n   Timestamp                                    o
    \  o   o   o   o   o\n   To                        c(1)          r    m   m   m
    \  m   m   m\n   Unsupported                420               -   m   -   m   m
    \  m\n   User-Agent                                   o   o   o   o   o   o\n
    \  Via                         R          amr   m   m   m   m   m   m\n   Via
    \                       rc          dr    m   m   m   m   m   m\n   Warning                     r
    \               -   o   o   o   o   o\n   WWW-Authenticate           401         ar
    \   -   m   -   m   m   m\n   WWW-Authenticate           407         ar    -   o
    \  -   o   o   o\n   Table 3: Summary of header fields, P--Z; (1): copied with
    possible\n   addition of tag\n      Accept: application/sdp;level=1, application/x-private,
    text/html\n"
  title: 20.1 Accept
- contents:
  - "20.2 Accept-Encoding\n   The Accept-Encoding header field is similar to Accept,
    but restricts\n   the content-codings [H3.5] that are acceptable in the response.
    \ See\n   [H14.3].  The semantics in SIP are identical to those defined in\n   [H14.3].\n
    \  An empty Accept-Encoding header field is permissible.  It is\n   equivalent
    to Accept-Encoding: identity, that is, only the identity\n   encoding, meaning
    no encoding, is permissible.\n   If no Accept-Encoding header field is present,
    the server SHOULD\n   assume a default value of identity.\n   This differs slightly
    from the HTTP definition, which indicates that\n   when not present, any encoding
    can be used, but the identity encoding\n   is preferred.\n   Example:\n      Accept-Encoding:
    gzip\n"
  title: 20.2 Accept-Encoding
- contents:
  - "20.3 Accept-Language\n   The Accept-Language header field is used in requests
    to indicate the\n   preferred languages for reason phrases, session descriptions,
    or\n   status responses carried as message bodies in the response.  If no\n   Accept-Language
    header field is present, the server SHOULD assume all\n   languages are acceptable
    to the client.\n   The Accept-Language header field follows the syntax defined
    in\n   [H14.4].  The rules for ordering the languages based on the \"q\"\n   parameter
    apply to SIP as well.\n   Example:\n      Accept-Language: da, en-gb;q=0.8, en;q=0.7\n"
  title: 20.3 Accept-Language
- contents:
  - "20.4 Alert-Info\n   When present in an INVITE request, the Alert-Info header
    field\n   specifies an alternative ring tone to the UAS.  When present in a 180\n
    \  (Ringing) response, the Alert-Info header field specifies an\n   alternative
    ringback tone to the UAC.  A typical usage is for a proxy\n   to insert this header
    field to provide a distinctive ring feature.\n   The Alert-Info header field can
    introduce security risks.  These\n   risks and the ways to handle them are discussed
    in Section 20.9,\n   which discusses the Call-Info header field since the risks
    are\n   identical.\n   In addition, a user SHOULD be able to disable this feature\n
    \  selectively.\n      This helps prevent disruptions that could result from the
    use of\n      this header field by untrusted elements.\n   Example:\n      Alert-Info:
    <http://www.example.com/sounds/moo.wav>\n"
  title: 20.4 Alert-Info
- contents:
  - "20.5 Allow\n   The Allow header field lists the set of methods supported by the
    UA\n   generating the message.\n   All methods, including ACK and CANCEL, understood
    by the UA MUST be\n   included in the list of methods in the Allow header field,
    when\n   present.  The absence of an Allow header field MUST NOT be\n   interpreted
    to mean that the UA sending the message supports no\n   methods.   Rather, it
    implies that the UA is not providing any\n   information on what methods it supports.\n
    \  Supplying an Allow header field in responses to methods other than\n   OPTIONS
    reduces the number of messages needed.\n   Example:\n      Allow: INVITE, ACK,
    OPTIONS, CANCEL, BYE\n"
  title: 20.5 Allow
- contents:
  - "20.6 Authentication-Info\n   The Authentication-Info header field provides for
    mutual\n   authentication with HTTP Digest.  A UAS MAY include this header field\n
    \  in a 2xx response to a request that was successfully authenticated\n   using
    digest based on the Authorization header field.\n   Syntax and semantics follow
    those specified in RFC 2617 [17].\n   Example:\n      Authentication-Info: nextnonce=\"47364c23432d2e131a5fb210812c\"\n"
  title: 20.6 Authentication-Info
- contents:
  - "20.7 Authorization\n   The Authorization header field contains authentication
    credentials of\n   a UA.  Section 22.2 overviews the use of the Authorization
    header\n   field, and Section 22.4 describes the syntax and semantics when used\n
    \  with HTTP authentication.\n   This header field, along with Proxy-Authorization,
    breaks the general\n   rules about multiple header field values.  Although not
    a comma-\n   separated list, this header field name may be present multiple times,\n
    \  and MUST NOT be combined into a single header line using the usual\n   rules
    described in Section 7.3.\n   In the example below, there are no quotes around
    the Digest\n   parameter:\n      Authorization: Digest username=\"Alice\", realm=\"atlanta.com\",\n
    \      nonce=\"84a4cc6f3082121f32b42a2187831a9e\",\n       response=\"7587245234b3434cc3412213e5f113a5432\"\n"
  title: 20.7 Authorization
- contents:
  - "20.8 Call-ID\n   The Call-ID header field uniquely identifies a particular invitation\n
    \  or all registrations of a particular client.  A single multimedia\n   conference
    can give rise to several calls with different Call-IDs,\n   for example, if a
    user invites a single individual several times to\n   the same (long-running)
    conference.  Call-IDs are case-sensitive and\n   are simply compared byte-by-byte.\n
    \  The compact form of the Call-ID header field is i.\n   Examples:\n      Call-ID:
    f81d4fae-7dec-11d0-a765-00a0c91e6bf6@biloxi.com\n      i:f81d4fae-7dec-11d0-a765-00a0c91e6bf6@192.0.2.4\n"
  title: 20.8 Call-ID
- contents:
  - "20.9 Call-Info\n   The Call-Info header field provides additional information
    about the\n   caller or callee, depending on whether it is found in a request
    or\n   response.  The purpose of the URI is described by the \"purpose\"\n   parameter.
    \ The \"icon\" parameter designates an image suitable as an\n   iconic representation
    of the caller or callee.  The \"info\" parameter\n   describes the caller or callee
    in general, for example, through a web\n   page.  The \"card\" parameter provides
    a business card, for example, in\n   vCard [36] or LDIF [37] formats.  Additional
    tokens can be registered\n   using IANA and the procedures in Section 27.\n   Use
    of the Call-Info header field can pose a security risk.  If a\n   callee fetches
    the URIs provided by a malicious caller, the callee\n   may be at risk for displaying
    inappropriate or offensive content,\n   dangerous or illegal content, and so on.
    \ Therefore, it is\n   RECOMMENDED that a UA only render the information in the
    Call-Info\n   header field if it can verify the authenticity of the element that\n
    \  originated the header field and trusts that element.  This need not\n   be
    the peer UA; a proxy can insert this header field into requests.\n   Example:\n
    \  Call-Info: <http://wwww.example.com/alice/photo.jpg> ;purpose=icon,\n     <http://www.example.com/alice/>
    ;purpose=info\n"
  title: 20.9 Call-Info
- contents:
  - "20.10 Contact\n   A Contact header field value provides a URI whose meaning depends
    on\n   the type of request or response it is in.\n   A Contact header field value
    can contain a display name, a URI with\n   URI parameters, and header parameters.\n
    \  This document defines the Contact parameters \"q\" and \"expires\".\n   These
    parameters are only used when the Contact is present in a\n   REGISTER request
    or response, or in a 3xx response.  Additional\n   parameters may be defined in
    other specifications.\n   When the header field value contains a display name,
    the URI\n   including all URI parameters is enclosed in \"<\" and \">\".  If no
    \"<\"\n   and \">\" are present, all parameters after the URI are header\n   parameters,
    not URI parameters.  The display name can be tokens, or a\n   quoted string, if
    a larger character set is desired.\n   Even if the \"display-name\" is empty,
    the \"name-addr\" form MUST be\n   used if the \"addr-spec\" contains a comma,
    semicolon, or question\n   mark.  There may or may not be LWS between the display-name
    and the\n   \"<\".\n   These rules for parsing a display name, URI and URI parameters,
    and\n   header parameters also apply for the header fields To and From.\n      The
    Contact header field has a role similar to the Location header\n      field in
    HTTP.  However, the HTTP header field only allows one\n      address, unquoted.
    \ Since URIs can contain commas and semicolons\n      as reserved characters,
    they can be mistaken for header or\n      parameter delimiters, respectively.\n
    \  The compact form of the Contact header field is m (for \"moved\").\n   Examples:\n
    \     Contact: \"Mr. Watson\" <sip:watson@worcester.bell-telephone.com>\n         ;q=0.7;
    expires=3600,\n         \"Mr. Watson\" <mailto:watson@bell-telephone.com> ;q=0.1\n
    \     m: <sips:bob@192.0.2.4>;expires=60\n"
  title: 20.10 Contact
- contents:
  - "20.11 Content-Disposition\n   The Content-Disposition header field describes
    how the message body\n   or, for multipart messages, a message body part is to
    be interpreted\n   by the UAC or UAS.  This SIP header field extends the MIME
    Content-\n   Type (RFC 2183 [18]).\n   Several new \"disposition-types\" of the
    Content-Disposition header are\n   defined by SIP.  The value \"session\" indicates
    that the body part\n   describes a session, for either calls or early (pre-call)
    media.  The\n   value \"render\" indicates that the body part should be displayed
    or\n   otherwise rendered to the user.  Note that the value \"render\" is used\n
    \  rather than \"inline\" to avoid the connotation that the MIME body is\n   displayed
    as a part of the rendering of the entire message (since the\n   MIME bodies of
    SIP messages oftentimes are not displayed to users).\n   For backward-compatibility,
    if the Content-Disposition header field\n   is missing, the server SHOULD assume
    bodies of Content-Type\n   application/sdp are the disposition \"session\", while
    other content\n   types are \"render\".\n   The disposition type \"icon\" indicates
    that the body part contains an\n   image suitable as an iconic representation
    of the caller or callee\n   that could be rendered informationally by a user agent
    when a message\n   has been received, or persistently while a dialog takes place.
    \ The\n   value \"alert\" indicates that the body part contains information, such\n
    \  as an audio clip, that should be rendered by the user agent in an\n   attempt
    to alert the user to the receipt of a request, generally a\n   request that initiates
    a dialog; this alerting body could for example\n   be rendered as a ring tone
    for a phone call after a 180 Ringing\n   provisional response has been sent.\n
    \  Any MIME body with a \"disposition-type\" that renders content to the\n   user
    should only be processed when a message has been properly\n   authenticated.\n
    \  The handling parameter, handling-param, describes how the UAS should\n   react
    if it receives a message body whose content type or disposition\n   type it does
    not understand.  The parameter has defined values of\n   \"optional\" and \"required\".
    \ If the handling parameter is missing, the\n   value \"required\" SHOULD be assumed.
    \ The handling parameter is\n   described in RFC 3204 [19].\n   If this header
    field is missing, the MIME type determines the default\n   content disposition.
    \ If there is none, \"render\" is assumed.\n   Example:\n      Content-Disposition:
    session\n"
  title: 20.11 Content-Disposition
- contents:
  - "20.12 Content-Encoding\n   The Content-Encoding header field is used as a modifier
    to the\n   \"media-type\".  When present, its value indicates what additional\n
    \  content codings have been applied to the entity-body, and thus what\n   decoding
    mechanisms MUST be applied in order to obtain the media-type\n   referenced by
    the Content-Type header field.  Content-Encoding is\n   primarily used to allow
    a body to be compressed without losing the\n   identity of its underlying media
    type.\n   If multiple encodings have been applied to an entity-body, the\n   content
    codings MUST be listed in the order in which they were\n   applied.\n   All content-coding
    values are case-insensitive.  IANA acts as a\n   registry for content-coding value
    tokens.  See [H3.5] for a\n   definition of the syntax for content-coding.\n   Clients
    MAY apply content encodings to the body in requests.  A\n   server MAY apply content
    encodings to the bodies in responses.  The\n   server MUST only use encodings
    listed in the Accept-Encoding header\n   field in the request.\n   The compact
    form of the Content-Encoding header field is e.\n   Examples:\n      Content-Encoding:
    gzip\n      e: tar\n"
  title: 20.12 Content-Encoding
- contents:
  - "20.13 Content-Language\n   See [H14.12]. Example:\n      Content-Language: fr\n"
  title: 20.13 Content-Language
- contents:
  - "20.14 Content-Length\n   The Content-Length header field indicates the size of
    the message-\n   body, in decimal number of octets, sent to the recipient.\n   Applications
    SHOULD use this field to indicate the size of the\n   message-body to be transferred,
    regardless of the media type of the\n   entity.  If a stream-based protocol (such
    as TCP) is used as\n   transport, the header field MUST be used.\n   The size
    of the message-body does not include the CRLF separating\n   header fields and
    body.  Any Content-Length greater than or equal to\n   zero is a valid value.
    \ If no body is present in a message, then the\n   Content-Length header field
    value MUST be set to zero.\n      The ability to omit Content-Length simplifies
    the creation of\n      cgi-like scripts that dynamically generate responses.\n
    \  The compact form of the header field is l.\n   Examples:\n      Content-Length:
    349\n      l: 173\n"
  title: 20.14 Content-Length
- contents:
  - "20.15 Content-Type\n   The Content-Type header field indicates the media type
    of the\n   message-body sent to the recipient.  The \"media-type\" element is\n
    \  defined in [H3.7].  The Content-Type header field MUST be present if\n   the
    body is not empty.  If the body is empty, and a Content-Type\n   header field
    is present, it indicates that the body of the specific\n   type has zero length
    (for example, an empty audio file).\n   The compact form of the header field is
    c.\n   Examples:\n      Content-Type: application/sdp\n      c: text/html; charset=ISO-8859-4\n"
  title: 20.15 Content-Type
- contents:
  - "20.16 CSeq\n   A CSeq header field in a request contains a single decimal sequence\n
    \  number and the request method.  The sequence number MUST be\n   expressible
    as a 32-bit unsigned integer.  The method part of CSeq is\n   case-sensitive.
    \ The CSeq header field serves to order transactions\n   within a dialog, to provide
    a means to uniquely identify\n   transactions, and to differentiate between new
    requests and request\n   retransmissions.  Two CSeq header fields are considered
    equal if the\n   sequence number and the request method are identical.  Example:\n
    \     CSeq: 4711 INVITE\n"
  title: 20.16 CSeq
- contents:
  - "20.17 Date\n   The Date header field contains the date and time.  Unlike HTTP/1.1,\n
    \  SIP only supports the most recent RFC 1123 [20] format for dates.  As\n   in
    [H3.3], SIP restricts the time zone in SIP-date to \"GMT\", while\n   RFC 1123
    allows any time zone.  An RFC 1123 date is case-sensitive.\n   The Date header
    field reflects the time when the request or response\n   is first sent.\n      The
    Date header field can be used by simple end systems without a\n      battery-backed
    clock to acquire a notion of current time.\n      However, in its GMT form, it
    requires clients to know their offset\n      from GMT.\n   Example:\n      Date:
    Sat, 13 Nov 2010 23:29:00 GMT\n"
  title: 20.17 Date
- contents:
  - "20.18 Error-Info\n   The Error-Info header field provides a pointer to additional\n
    \  information about the error status response.\n      SIP UACs have user interface
    capabilities ranging from pop-up\n      windows and audio on PC softclients to
    audio-only on \"black\"\n      phones or endpoints connected via gateways.  Rather
    than forcing a\n      server generating an error to choose between sending an
    error\n      status code with a detailed reason phrase and playing an audio\n
    \     recording, the Error-Info header field allows both to be sent.\n      The
    UAC then has the choice of which error indicator to render to\n      the caller.\n
    \  A UAC MAY treat a SIP or SIPS URI in an Error-Info header field as if\n   it
    were a Contact in a redirect and generate a new INVITE, resulting\n   in a recorded
    announcement session being established.  A non-SIP URI\n   MAY be rendered to
    the user.\n   Examples:\n      SIP/2.0 404 The number you have dialed is not in
    service\n      Error-Info: <sip:not-in-service-recording@atlanta.com>\n"
  title: 20.18 Error-Info
- contents:
  - "20.19 Expires\n   The Expires header field gives the relative time after which
    the\n   message (or content) expires.\n   The precise meaning of this is method
    dependent.\n   The expiration time in an INVITE does not affect the duration of
    the\n   actual session that may result from the invitation.  Session\n   description
    protocols may offer the ability to express time limits on\n   the session duration,
    however.\n   The value of this field is an integral number of seconds (in decimal)\n
    \  between 0 and (2**32)-1, measured from the receipt of the request.\n   Example:\n
    \     Expires: 5\n"
  title: 20.19 Expires
- contents:
  - "20.20 From\n   The From header field indicates the initiator of the request.
    \ This\n   may be different from the initiator of the dialog.  Requests sent by\n
    \  the callee to the caller use the callee's address in the From header\n   field.\n
    \  The optional \"display-name\" is meant to be rendered by a human user\n   interface.
    \ A system SHOULD use the display name \"Anonymous\" if the\n   identity of the
    client is to remain hidden.  Even if the \"display-\n   name\" is empty, the \"name-addr\"
    form MUST be used if the \"addr-spec\"\n   contains a comma, question mark, or
    semicolon.  Syntax issues are\n   discussed in Section 7.3.1.\n   Two From header
    fields are equivalent if their URIs match, and their\n   parameters match. Extension
    parameters in one header field, not\n   present in the other are ignored for the
    purposes of comparison. This\n   means that the display name and presence or absence
    of angle brackets\n   do not affect matching.\n   See Section 20.10 for the rules
    for parsing a display name, URI and\n   URI parameters, and header field parameters.\n
    \  The compact form of the From header field is f.\n   Examples:\n      From:
    \"A. G. Bell\" <sip:agb@bell-telephone.com> ;tag=a48s\n      From: sip:+12125551212@server.phone2net.com;tag=887s\n
    \     f: Anonymous <sip:c8oqz84zk7z@privacy.org>;tag=hyh8\n"
  title: 20.20 From
- contents:
  - "20.21 In-Reply-To\n   The In-Reply-To header field enumerates the Call-IDs that
    this call\n   references or returns.  These Call-IDs may have been cached by the\n
    \  client then included in this header field in a return call.\n      This allows
    automatic call distribution systems to route return\n      calls to the originator
    of the first call.  This also allows\n      callees to filter calls, so that only
    return calls for calls they\n      originated will be accepted.  This field is
    not a substitute for\n      request authentication.\n   Example:\n      In-Reply-To:
    70710@saturn.bell-tel.com, 17320@saturn.bell-tel.com\n"
  title: 20.21 In-Reply-To
- contents:
  - "20.22 Max-Forwards\n   The Max-Forwards header field must be used with any SIP
    method to\n   limit the number of proxies or gateways that can forward the request\n
    \  to the next downstream server.  This can also be useful when the\n   client
    is attempting to trace a request chain that appears to be\n   failing or looping
    in mid-chain.\n   The Max-Forwards value is an integer in the range 0-255 indicating\n
    \  the remaining number of times this request message is allowed to be\n   forwarded.
    \ This count is decremented by each server that forwards\n   the request.  The
    recommended initial value is 70.\n   This header field should be inserted by elements
    that can not\n   otherwise guarantee loop detection.  For example, a B2BUA should\n
    \  insert a Max-Forwards header field.\n   Example:\n      Max-Forwards: 6\n"
  title: 20.22 Max-Forwards
- contents:
  - "20.23 Min-Expires\n   The Min-Expires header field conveys the minimum refresh
    interval\n   supported for soft-state elements managed by that server.  This\n
    \  includes Contact header fields that are stored by a registrar.  The\n   header
    field contains a decimal integer number of seconds from 0 to\n   (2**32)-1.  The
    use of the header field in a 423 (Interval Too Brief)\n   response is described
    in Sections 10.2.8, 10.3, and 21.4.17.\n   Example:\n      Min-Expires: 60\n"
  title: 20.23 Min-Expires
- contents:
  - "20.24 MIME-Version\n   See [H19.4.1].\n   Example:\n      MIME-Version: 1.0\n"
  title: 20.24 MIME-Version
- contents:
  - "20.25 Organization\n   The Organization header field conveys the name of the
    organization to\n   which the SIP element issuing the request or response belongs.\n
    \     The field MAY be used by client software to filter calls.\n   Example:\n
    \     Organization: Boxes by Bob\n"
  title: 20.25 Organization
- contents:
  - "20.26 Priority\n   The Priority header field indicates the urgency of the request
    as\n   perceived by the client.  The Priority header field describes the\n   priority
    that the SIP request should have to the receiving human or\n   its agent.  For
    example, it may be factored into decisions about call\n   routing and acceptance.
    \ For these decisions, a message containing no\n   Priority header field SHOULD
    be treated as if it specified a Priority\n   of \"normal\".  The Priority header
    field does not influence the use of\n   communications resources such as packet
    forwarding priority in\n   routers or access to circuits in PSTN gateways.  The
    header field can\n   have the values \"non-urgent\", \"normal\", \"urgent\", and
    \"emergency\",\n   but additional values can be defined elsewhere.  It is RECOMMENDED\n
    \  that the value of \"emergency\" only be used when life, limb, or\n   property
    are in imminent danger.  Otherwise, there are no semantics\n   defined for this
    header field.\n      These are the values of RFC 2076 [38], with the addition
    of\n      \"emergency\".\n   Examples:\n      Subject: A tornado is heading our
    way!\n      Priority: emergency\n   or\n      Subject: Weekend plans\n      Priority:
    non-urgent\n"
  title: 20.26 Priority
- contents:
  - "20.27 Proxy-Authenticate\n   A Proxy-Authenticate header field value contains
    an authentication\n   challenge.\n   The use of this header field is defined in
    [H14.33].  See Section\n   22.3 for further details on its usage.\n   Example:\n
    \     Proxy-Authenticate: Digest realm=\"atlanta.com\",\n       domain=\"sip:ss1.carrier.com\",
    qop=\"auth\",\n       nonce=\"f84f1cec41e6cbe5aea9c8e88d359\",\n       opaque=\"\",
    stale=FALSE, algorithm=MD5\n"
  title: 20.27 Proxy-Authenticate
- contents:
  - "20.28 Proxy-Authorization\n   The Proxy-Authorization header field allows the
    client to identify\n   itself (or its user) to a proxy that requires authentication.
    \ A\n   Proxy-Authorization field value consists of credentials containing\n   the
    authentication information of the user agent for the proxy and/or\n   realm of
    the resource being requested.\n   See Section 22.3 for a definition of the usage
    of this header field.\n   This header field, along with Authorization, breaks
    the general rules\n   about multiple header field names.  Although not a comma-separated\n
    \  list, this header field name may be present multiple times, and MUST\n   NOT
    be combined into a single header line using the usual rules\n   described in Section
    7.3.1.\n   Example:\n   Proxy-Authorization: Digest username=\"Alice\", realm=\"atlanta.com\",\n
    \     nonce=\"c60f3082ee1212b402a21831ae\",\n      response=\"245f23415f11432b3434341c022\"\n"
  title: 20.28 Proxy-Authorization
- contents:
  - "20.29 Proxy-Require\n   The Proxy-Require header field is used to indicate proxy-sensitive\n
    \  features that must be supported by the proxy.  See Section 20.32 for\n   more
    details on the mechanics of this message and a usage example.\n   Example:\n      Proxy-Require:
    foo\n"
  title: 20.29 Proxy-Require
- contents:
  - "20.30 Record-Route\n   The Record-Route header field is inserted by proxies in
    a request to\n   force future requests in the dialog to be routed through the
    proxy.\n   Examples of its use with the Route header field are described in\n
    \  Sections 16.12.1.\n   Example:\n      Record-Route: <sip:server10.biloxi.com;lr>,\n
    \                   <sip:bigbox3.site3.atlanta.com;lr>\n"
  title: 20.30 Record-Route
- contents:
  - "20.31 Reply-To\n   The Reply-To header field contains a logical return URI that
    may be\n   different from the From header field.  For example, the URI MAY be\n
    \  used to return missed calls or unestablished sessions.  If the user\n   wished
    to remain anonymous, the header field SHOULD either be omitted\n   from the request
    or populated in such a way that does not reveal any\n   private information.\n
    \  Even if the \"display-name\" is empty, the \"name-addr\" form MUST be\n   used
    if the \"addr-spec\" contains a comma, question mark, or\n   semicolon.  Syntax
    issues are discussed in Section 7.3.1.\n   Example:\n      Reply-To: Bob <sip:bob@biloxi.com>\n"
  title: 20.31 Reply-To
- contents:
  - "20.32 Require\n   The Require header field is used by UACs to tell UASs about
    options\n   that the UAC expects the UAS to support in order to process the\n
    \  request.  Although an optional header field, the Require MUST NOT be\n   ignored
    if it is present.\n   The Require header field contains a list of option tags,
    described in\n   Section 19.2.  Each option tag defines a SIP extension that MUST
    be\n   understood to process the request.  Frequently, this is used to\n   indicate
    that a specific set of extension header fields need to be\n   understood.  A UAC
    compliant to this specification MUST only include\n   option tags corresponding
    to standards-track RFCs.\n   Example:\n      Require: 100rel\n"
  title: 20.32 Require
- contents:
  - "20.33 Retry-After\n   The Retry-After header field can be used with a 500 (Server
    Internal\n   Error) or 503 (Service Unavailable) response to indicate how long
    the\n   service is expected to be unavailable to the requesting client and\n   with
    a 404 (Not Found), 413 (Request Entity Too Large), 480\n   (Temporarily Unavailable),
    486 (Busy Here), 600 (Busy), or 603\n   (Decline) response to indicate when the
    called party anticipates\n   being available again.  The value of this field is
    a positive integer\n   number of seconds (in decimal) after the time of the response.\n
    \  An optional comment can be used to indicate additional information\n   about
    the time of callback.  An optional \"duration\" parameter\n   indicates how long
    the called party will be reachable starting at the\n   initial time of availability.
    \ If no duration parameter is given, the\n   service is assumed to be available
    indefinitely.\n   Examples:\n      Retry-After: 18000;duration=3600\n      Retry-After:
    120 (I'm in a meeting)\n"
  title: 20.33 Retry-After
- contents:
  - "20.34 Route\n   The Route header field is used to force routing for a request
    through\n   the listed set of proxies.  Examples of the use of the Route header\n
    \  field are in Section 16.12.1.\n   Example:\n      Route: <sip:bigbox3.site3.atlanta.com;lr>,\n
    \            <sip:server10.biloxi.com;lr>\n"
  title: 20.34 Route
- contents:
  - "20.35 Server\n   The Server header field contains information about the software
    used\n   by the UAS to handle the request.\n   Revealing the specific software
    version of the server might allow the\n   server to become more vulnerable to
    attacks against software that is\n   known to contain security holes.  Implementers
    SHOULD make the Server\n   header field a configurable option.\n   Example:\n
    \     Server: HomeServer v2\n"
  title: 20.35 Server
- contents:
  - "20.36 Subject\n   The Subject header field provides a summary or indicates the
    nature\n   of the call, allowing call filtering without having to parse the\n
    \  session description.  The session description does not have to use\n   the
    same subject indication as the invitation.\n   The compact form of the Subject
    header field is s.\n   Example:\n      Subject: Need more boxes\n      s: Tech
    Support\n"
  title: 20.36 Subject
- contents:
  - "20.37 Supported\n   The Supported header field enumerates all the extensions
    supported by\n   the UAC or UAS.\n   The Supported header field contains a list
    of option tags, described\n   in Section 19.2, that are understood by the UAC
    or UAS.  A UA\n   compliant to this specification MUST only include option tags\n
    \  corresponding to standards-track RFCs.  If empty, it means that no\n   extensions
    are supported.\n   The compact form of the Supported header field is k.\n   Example:\n
    \     Supported: 100rel\n"
  title: 20.37 Supported
- contents:
  - "20.38 Timestamp\n   The Timestamp header field describes when the UAC sent the
    request to\n   the UAS.\n   See Section 8.2.6 for details on how to generate a
    response to a\n   request that contains the header field.  Although there is no\n
    \  normative behavior defined here that makes use of the header, it\n   allows
    for extensions or SIP applications to obtain RTT estimates.\n   Example:\n      Timestamp:
    54\n"
  title: 20.38 Timestamp
- contents:
  - "20.39 To\n   The To header field specifies the logical recipient of the request.\n
    \  The optional \"display-name\" is meant to be rendered by a human-user\n   interface.
    \ The \"tag\" parameter serves as a general mechanism for\n   dialog identification.\n
    \  See Section 19.3 for details of the \"tag\" parameter.\n   Comparison of To
    header fields for equality is identical to\n   comparison of From header fields.
    \ See Section 20.10 for the rules\n   for parsing a display name, URI and URI
    parameters, and header field\n   parameters.\n   The compact form of the To header
    field is t.\n   The following are examples of valid To header fields:\n      To:
    The Operator <sip:operator@cs.columbia.edu>;tag=287447\n      t: sip:+12125551212@server.phone2net.com\n"
  title: 20.39 To
- contents:
  - "20.40 Unsupported\n   The Unsupported header field lists the features not supported
    by the\n   UAS.  See Section 20.32 for motivation.\n   Example:\n      Unsupported:
    foo\n"
  title: 20.40 Unsupported
- contents:
  - "20.41 User-Agent\n   The User-Agent header field contains information about the
    UAC\n   originating the request.  The semantics of this header field are\n   defined
    in [H14.43].\n   Revealing the specific software version of the user agent might
    allow\n   the user agent to become more vulnerable to attacks against software\n
    \  that is known to contain security holes.  Implementers SHOULD make\n   the
    User-Agent header field a configurable option.\n   Example:\n      User-Agent:
    Softphone Beta1.5\n"
  title: 20.41 User-Agent
- contents:
  - "20.42 Via\n   The Via header field indicates the path taken by the request so
    far\n   and indicates the path that should be followed in routing responses.\n
    \  The branch ID parameter in the Via header field values serves as a\n   transaction
    identifier, and is used by proxies to detect loops.\n   A Via header field value
    contains the transport protocol used to send\n   the message, the client's host
    name or network address, and possibly\n   the port number at which it wishes to
    receive responses.  A Via\n   header field value can also contain parameters such
    as \"maddr\",\n   \"ttl\", \"received\", and \"branch\", whose meaning and use
    are described\n   in other sections.  For implementations compliant to this\n
    \  specification, the value of the branch parameter MUST start with the\n   magic
    cookie \"z9hG4bK\", as discussed in Section 8.1.1.7.\n   Transport protocols defined
    here are \"UDP\", \"TCP\", \"TLS\", and \"SCTP\".\n   \"TLS\" means TLS over TCP.
    \ When a request is sent to a SIPS URI, the\n   protocol still indicates \"SIP\",
    and the transport protocol is TLS.\n"
  title: 20.42 Via
- contents:
  - 'Via: SIP/2.0/UDP erlang.bell-telephone.com:5060;branch=z9hG4bK87asdks7

    '
  title: 'Via: SIP/2.0/UDP erlang.bell-telephone.com:5060;branch=z9hG4bK87asdks7'
- contents:
  - "Via: SIP/2.0/UDP 192.0.2.1:5060 ;received=192.0.2.207\n     ;branch=z9hG4bK77asjd\n
    \  The compact form of the Via header field is v.\n   In this example, the message
    originated from a multi-homed host with\n   two addresses, 192.0.2.1 and 192.0.2.207.
    \ The sender guessed wrong\n   as to which network interface would be used.  Erlang.bell-\n
    \  telephone.com noticed the mismatch and added a parameter to the\n   previous
    hop's Via header field value, containing the address that\n   the packet actually
    came from.\n   The host or network address and port number are not required to\n
    \  follow the SIP URI syntax.  Specifically, LWS on either side of the\n   \":\"
    or \"/\" is allowed, as shown here:\n      Via: SIP / 2.0 / UDP first.example.com:
    4000;ttl=16\n        ;maddr=224.2.0.1 ;branch=z9hG4bKa7c6a8dlze.1\n   Even though
    this specification mandates that the branch parameter be\n   present in all requests,
    the BNF for the header field indicates that\n   it is optional.  This allows interoperation
    with RFC 2543 elements,\n   which did not have to insert the branch parameter.\n
    \  Two Via header fields are equal if their sent-protocol and sent-by\n   fields
    are equal, both have the same set of parameters, and the\n   values of all parameters
    are equal.\n"
  title: 'Via: SIP/2.0/UDP 192.0.2.1:5060 ;received=192.0.2.207'
- contents:
  - "20.43 Warning\n   The Warning header field is used to carry additional information\n
    \  about the status of a response.  Warning header field values are sent\n   with
    responses and contain a three-digit warning code, host name, and\n   warning text.\n
    \  The \"warn-text\" should be in a natural language that is most likely\n   to
    be intelligible to the human user receiving the response.  This\n   decision can
    be based on any available knowledge, such as the\n   location of the user, the
    Accept-Language field in a request, or the\n   Content-Language field in a response.
    \ The default language is i-\n   default [21].\n   The currently-defined \"warn-code\"s
    are listed below, with a\n   recommended warn-text in English and a description
    of their meaning.\n   These warnings describe failures induced by the session
    description.\n   The first digit of warning codes beginning with \"3\" indicates\n
    \  warnings specific to SIP.  Warnings 300 through 329 are reserved for\n   indicating
    problems with keywords in the session description, 330\n   through 339 are warnings
    related to basic network services requested\n   in the session description, 370
    through 379 are warnings related to\n   quantitative QoS parameters requested
    in the session description, and\n   390 through 399 are miscellaneous warnings
    that do not fall into one\n   of the above categories.\n      300 Incompatible
    network protocol: One or more network protocols\n          contained in the session
    description are not available.\n      301 Incompatible network address formats:
    One or more network\n          address formats contained in the session description
    are not\n          available.\n      302 Incompatible transport protocol: One
    or more transport\n          protocols described in the session description are
    not\n          available.\n      303 Incompatible bandwidth units: One or more
    bandwidth\n          measurement units contained in the session description were\n
    \         not understood.\n      304 Media type not available: One or more media
    types contained in\n          the session description are not available.\n      305
    Incompatible media format: One or more media formats contained\n          in the
    session description are not available.\n      306 Attribute not understood: One
    or more of the media attributes\n          in the session description are not
    supported.\n      307 Session description parameter not understood: A parameter\n
    \         other than those listed above was not understood.\n      330 Multicast
    not available: The site where the user is located\n          does not support
    multicast.\n      331 Unicast not available: The site where the user is located
    does\n          not support unicast communication (usually due to the presence\n
    \         of a firewall).\n      370 Insufficient bandwidth: The bandwidth specified
    in the session\n          description or defined by the media exceeds that known
    to be\n          available.\n      399 Miscellaneous warning: The warning text
    can include arbitrary\n          information to be presented to a human user or
    logged.  A\n          system receiving this warning MUST NOT take any automated\n
    \         action.\n             1xx and 2xx have been taken by HTTP/1.1.\n   Additional
    \"warn-code\"s can be defined through IANA, as defined in\n   Section 27.2.\n
    \  Examples:\n      Warning: 307 isi.edu \"Session parameter 'foo' not understood\"\n
    \     Warning: 301 isi.edu \"Incompatible network address type 'E.164'\"\n"
  title: 20.43 Warning
- contents:
  - "20.44 WWW-Authenticate\n   A WWW-Authenticate header field value contains an
    authentication\n   challenge.  See Section 22.2 for further details on its usage.\n
    \  Example:\n      WWW-Authenticate: Digest realm=\"atlanta.com\",\n        domain=\"sip:boxesbybob.com\",
    qop=\"auth\",\n        nonce=\"f84f1cec41e6cbe5aea9c8e88d359\",\n        opaque=\"\",
    stale=FALSE, algorithm=MD5\n"
  title: 20.44 WWW-Authenticate
- contents:
  - "21 Response Codes\n   The response codes are consistent with, and extend, HTTP/1.1
    response\n   codes.  Not all HTTP/1.1 response codes are appropriate, and only\n
    \  those that are appropriate are given here.  Other HTTP/1.1 response\n   codes
    SHOULD NOT be used.  Also, SIP defines a new class, 6xx.\n"
  title: 21 Response Codes
- contents:
  - "21.1 Provisional 1xx\n   Provisional responses, also known as informational responses,\n
    \  indicate that the server contacted is performing some further action\n   and
    does not yet have a definitive response.  A server sends a 1xx\n   response if
    it expects to take more than 200 ms to obtain a final\n   response.  Note that
    1xx responses are not transmitted reliably.\n   They never cause the client to
    send an ACK.  Provisional (1xx)\n   responses MAY contain message bodies, including
    session descriptions.\n"
  title: 21.1 Provisional 1xx
- contents:
  - "21.1.1 100 Trying\n   This response indicates that the request has been received
    by the\n   next-hop server and that some unspecified action is being taken on\n
    \  behalf of this call (for example, a database is being consulted).\n   This
    response, like all other provisional responses, stops\n   retransmissions of an
    INVITE by a UAC.  The 100 (Trying) response is\n   different from other provisional
    responses, in that it is never\n   forwarded upstream by a stateful proxy.\n"
  title: 21.1.1 100 Trying
- contents:
  - "21.1.2 180 Ringing\n   The UA receiving the INVITE is trying to alert the user.
    \ This\n   response MAY be used to initiate local ringback.\n"
  title: 21.1.2 180 Ringing
- contents:
  - "21.1.3 181 Call Is Being Forwarded\n   A server MAY use this status code to indicate
    that the call is being\n   forwarded to a different set of destinations.\n"
  title: 21.1.3 181 Call Is Being Forwarded
- contents:
  - "21.1.4 182 Queued\n   The called party is temporarily unavailable, but the server
    has\n   decided to queue the call rather than reject it.  When the callee\n   becomes
    available, it will return the appropriate final status\n   response.  The reason
    phrase MAY give further details about the\n   status of the call, for example,
    \"5 calls queued; expected waiting\n   time is 15 minutes\".  The server MAY issue
    several 182 (Queued)\n   responses to update the caller about the status of the
    queued call.\n"
  title: 21.1.4 182 Queued
- contents:
  - "21.1.5 183 Session Progress\n   The 183 (Session Progress) response is used to
    convey information\n   about the progress of the call that is not otherwise classified.
    \ The\n   Reason-Phrase, header fields, or message body MAY be used to convey\n
    \  more details about the call progress.\n"
  title: 21.1.5 183 Session Progress
- contents:
  - "21.2 Successful 2xx\n   The request was successful.\n"
  title: 21.2 Successful 2xx
- contents:
  - "21.2.1 200 OK\n   The request has succeeded.  The information returned with the\n
    \  response depends on the method used in the request.\n"
  title: 21.2.1 200 OK
- contents:
  - "21.3 Redirection 3xx\n   3xx responses give information about the user's new
    location, or\n   about alternative services that might be able to satisfy the
    call.\n"
  title: 21.3 Redirection 3xx
- contents:
  - "21.3.1 300 Multiple Choices\n   The address in the request resolved to several
    choices, each with its\n   own specific location, and the user (or UA) can select
    a preferred\n   communication end point and redirect its request to that location.\n
    \  The response MAY include a message body containing a list of resource\n   characteristics
    and location(s) from which the user or UA can choose\n   the one most appropriate,
    if allowed by the Accept request header\n   field.  However, no MIME types have
    been defined for this message\n   body.\n   The choices SHOULD also be listed
    as Contact fields (Section 20.10).\n   Unlike HTTP, the SIP response MAY contain
    several Contact fields or a\n   list of addresses in a Contact field.  UAs MAY
    use the Contact header\n   field value for automatic redirection or MAY ask the
    user to confirm\n   a choice.  However, this specification does not define any
    standard\n   for such automatic selection.\n      This status response is appropriate
    if the callee can be reached\n      at several different locations and the server
    cannot or prefers\n      not to proxy the request.\n"
  title: 21.3.1 300 Multiple Choices
- contents:
  - "21.3.2 301 Moved Permanently\n   The user can no longer be found at the address
    in the Request-URI,\n   and the requesting client SHOULD retry at the new address
    given by\n   the Contact header field (Section 20.10).  The requestor SHOULD\n
    \  update any local directories, address books, and user location caches\n   with
    this new value and redirect future requests to the address(es)\n   listed.\n"
  title: 21.3.2 301 Moved Permanently
- contents:
  - "21.3.3 302 Moved Temporarily\n   The requesting client SHOULD retry the request
    at the new address(es)\n   given by the Contact header field (Section 20.10).
    \ The Request-URI\n   of the new request uses the value of the Contact header
    field in the\n   response.\n   The duration of the validity of the Contact URI
    can be indicated\n   through an Expires (Section 20.19) header field or an expires\n
    \  parameter in the Contact header field.  Both proxies and UAs MAY\n   cache
    this URI for the duration of the expiration time.  If there is\n   no explicit
    expiration time, the address is only valid once for\n   recursing, and MUST NOT
    be cached for future transactions.\n   If the URI cached from the Contact header
    field fails, the Request-\n   URI from the redirected request MAY be tried again
    a single time.\n      The temporary URI may have become out-of-date sooner than
    the\n      expiration time, and a new temporary URI may be available.\n"
  title: 21.3.3 302 Moved Temporarily
- contents:
  - "21.3.4 305 Use Proxy\n   The requested resource MUST be accessed through the
    proxy given by\n   the Contact field.  The Contact field gives the URI of the
    proxy.\n   The recipient is expected to repeat this single request via the\n   proxy.
    \ 305 (Use Proxy) responses MUST only be generated by UASs.\n"
  title: 21.3.4 305 Use Proxy
- contents:
  - "21.3.5 380 Alternative Service\n   The call was not successful, but alternative
    services are possible.\n   The alternative services are described in the message
    body of the\n   response.  Formats for such bodies are not defined here, and may
    be\n   the subject of future standardization.\n"
  title: 21.3.5 380 Alternative Service
- contents:
  - "21.4 Request Failure 4xx\n   4xx responses are definite failure responses from
    a particular\n   server.  The client SHOULD NOT retry the same request without\n
    \  modification (for example, adding appropriate authorization).\n   However,
    the same request to a different server might be successful.\n"
  title: 21.4 Request Failure 4xx
- contents:
  - "21.4.1 400 Bad Request\n   The request could not be understood due to malformed
    syntax.  The\n   Reason-Phrase SHOULD identify the syntax problem in more detail,
    for\n   example, \"Missing Call-ID header field\".\n"
  title: 21.4.1 400 Bad Request
- contents:
  - "21.4.2 401 Unauthorized\n   The request requires user authentication.  This response
    is issued by\n   UASs and registrars, while 407 (Proxy Authentication Required)
    is\n   used by proxy servers.\n"
  title: 21.4.2 401 Unauthorized
- contents:
  - "21.4.3 402 Payment Required\n   Reserved for future use.\n"
  title: 21.4.3 402 Payment Required
- contents:
  - "21.4.4 403 Forbidden\n   The server understood the request, but is refusing to
    fulfill it.\n   Authorization will not help, and the request SHOULD NOT be repeated.\n"
  title: 21.4.4 403 Forbidden
- contents:
  - "21.4.5 404 Not Found\n   The server has definitive information that the user
    does not exist at\n   the domain specified in the Request-URI.  This status is
    also\n   returned if the domain in the Request-URI does not match any of the\n
    \  domains handled by the recipient of the request.\n"
  title: 21.4.5 404 Not Found
- contents:
  - "21.4.6 405 Method Not Allowed\n   The method specified in the Request-Line is
    understood, but not\n   allowed for the address identified by the Request-URI.\n
    \  The response MUST include an Allow header field containing a list of\n   valid
    methods for the indicated address.\n"
  title: 21.4.6 405 Method Not Allowed
- contents:
  - "21.4.7 406 Not Acceptable\n   The resource identified by the request is only
    capable of generating\n   response entities that have content characteristics
    not acceptable\n   according to the Accept header field sent in the request.\n"
  title: 21.4.7 406 Not Acceptable
- contents:
  - "21.4.8 407 Proxy Authentication Required\n   This code is similar to 401 (Unauthorized),
    but indicates that the\n   client MUST first authenticate itself with the proxy.
    \ SIP access\n   authentication is explained in Sections 26 and 22.3.\n   This
    status code can be used for applications where access to the\n   communication
    channel (for example, a telephony gateway) rather than\n   the callee requires
    authentication.\n"
  title: 21.4.8 407 Proxy Authentication Required
- contents:
  - "21.4.9 408 Request Timeout\n   The server could not produce a response within
    a suitable amount of\n   time, for example, if it could not determine the location
    of the user\n   in time.  The client MAY repeat the request without modifications
    at\n   any later time.\n"
  title: 21.4.9 408 Request Timeout
- contents:
  - "21.4.10 410 Gone\n   The requested resource is no longer available at the server
    and no\n   forwarding address is known.  This condition is expected to be\n   considered
    permanent.  If the server does not know, or has no\n   facility to determine,
    whether or not the condition is permanent, the\n   status code 404 (Not Found)
    SHOULD be used instead.\n"
  title: 21.4.10 410 Gone
- contents:
  - "21.4.11 413 Request Entity Too Large\n   The server is refusing to process a
    request because the request\n   entity-body is larger than the server is willing
    or able to process.\n   The server MAY close the connection to prevent the client
    from\n   continuing the request.\n   If the condition is temporary, the server
    SHOULD include a Retry-\n   After header field to indicate that it is temporary
    and after what\n   time the client MAY try again.\n"
  title: 21.4.11 413 Request Entity Too Large
- contents:
  - "21.4.12 414 Request-URI Too Long\n   The server is refusing to service the request
    because the Request-URI\n   is longer than the server is willing to interpret.\n"
  title: 21.4.12 414 Request-URI Too Long
- contents:
  - "21.4.13 415 Unsupported Media Type\n   The server is refusing to service the
    request because the message\n   body of the request is in a format not supported
    by the server for\n   the requested method.  The server MUST return a list of
    acceptable\n   formats using the Accept, Accept-Encoding, or Accept-Language header\n
    \  field, depending on the specific problem with the content.  UAC\n   processing
    of this response is described in Section 8.1.3.5.\n"
  title: 21.4.13 415 Unsupported Media Type
- contents:
  - "21.4.14 416 Unsupported URI Scheme\n   The server cannot process the request
    because the scheme of the URI\n   in the Request-URI is unknown to the server.
    \ Client processing of\n   this response is described in Section 8.1.3.5.\n"
  title: 21.4.14 416 Unsupported URI Scheme
- contents:
  - "21.4.15 420 Bad Extension\n   The server did not understand the protocol extension
    specified in a\n   Proxy-Require (Section 20.29) or Require (Section 20.32) header\n
    \  field.  The server MUST include a list of the unsupported extensions\n   in
    an Unsupported header field in the response.  UAC processing of\n   this response
    is described in Section 8.1.3.5.\n"
  title: 21.4.15 420 Bad Extension
- contents:
  - "21.4.16 421 Extension Required\n   The UAS needs a particular extension to process
    the request, but this\n   extension is not listed in a Supported header field
    in the request.\n   Responses with this status code MUST contain a Require header
    field\n   listing the required extensions.\n   A UAS SHOULD NOT use this response
    unless it truly cannot provide any\n   useful service to the client.  Instead,
    if a desirable extension is\n   not listed in the Supported header field, servers
    SHOULD process the\n   request using baseline SIP capabilities and any extensions
    supported\n   by the client.\n"
  title: 21.4.16 421 Extension Required
- contents:
  - "21.4.17 423 Interval Too Brief\n   The server is rejecting the request because
    the expiration time of\n   the resource refreshed by the request is too short.
    \ This response\n   can be used by a registrar to reject a registration whose
    Contact\n   header field expiration time was too small.  The use of this response\n
    \  and the related Min-Expires header field are described in Sections\n   10.2.8,
    10.3, and 20.23.\n"
  title: 21.4.17 423 Interval Too Brief
- contents:
  - "21.4.18 480 Temporarily Unavailable\n   The callee's end system was contacted
    successfully but the callee is\n   currently unavailable (for example, is not
    logged in, logged in but\n   in a state that precludes communication with the
    callee, or has\n   activated the \"do not disturb\" feature).  The response MAY
    indicate a\n   better time to call in the Retry-After header field.  The user
    could\n   also be available elsewhere (unbeknownst to this server).  The reason\n
    \  phrase SHOULD indicate a more precise cause as to why the callee is\n   unavailable.
    \ This value SHOULD be settable by the UA.  Status 486\n   (Busy Here) MAY be
    used to more precisely indicate a particular\n   reason for the call failure.\n
    \  This status is also returned by a redirect or proxy server that\n   recognizes
    the user identified by the Request-URI, but does not\n   currently have a valid
    forwarding location for that user.\n"
  title: 21.4.18 480 Temporarily Unavailable
- contents:
  - "21.4.19 481 Call/Transaction Does Not Exist\n   This status indicates that the
    UAS received a request that does not\n   match any existing dialog or transaction.\n"
  title: 21.4.19 481 Call/Transaction Does Not Exist
- contents:
  - "21.4.20 482 Loop Detected\n   The server has detected a loop (Section 16.3 Item
    4).\n"
  title: 21.4.20 482 Loop Detected
- contents:
  - "21.4.21 483 Too Many Hops\n   The server received a request that contains a Max-Forwards
    (Section\n   20.22) header field with the value zero.\n"
  title: 21.4.21 483 Too Many Hops
- contents:
  - "21.4.22 484 Address Incomplete\n   The server received a request with a Request-URI
    that was incomplete.\n   Additional information SHOULD be provided in the reason
    phrase.\n      This status code allows overlapped dialing.  With overlapped\n
    \     dialing, the client does not know the length of the dialing\n      string.
    \ It sends strings of increasing lengths, prompting the\n      user for more input,
    until it no longer receives a 484 (Address\n      Incomplete) status response.\n"
  title: 21.4.22 484 Address Incomplete
- contents:
  - "21.4.23 485 Ambiguous\n   The Request-URI was ambiguous.  The response MAY contain
    a listing of\n   possible unambiguous addresses in Contact header fields.  Revealing\n
    \  alternatives can infringe on privacy of the user or the organization.\n   It
    MUST be possible to configure a server to respond with status 404\n   (Not Found)
    or to suppress the listing of possible choices for\n   ambiguous Request-URIs.\n
    \  Example response to a request with the Request-URI\n   sip:lee@example.com:\n
    \     SIP/2.0 485 Ambiguous\n      Contact: Carol Lee <sip:carol.lee@example.com>\n
    \     Contact: Ping Lee <sip:p.lee@example.com>\n      Contact: Lee M. Foote <sips:lee.foote@example.com>\n
    \     Some email and voice mail systems provide this functionality.  A\n      status
    code separate from 3xx is used since the semantics are\n      different: for 300,
    it is assumed that the same person or service\n      will be reached by the choices
    provided.  While an automated\n      choice or sequential search makes sense for
    a 3xx response, user\n      intervention is required for a 485 (Ambiguous) response.\n"
  title: 21.4.23 485 Ambiguous
- contents:
  - "21.4.24 486 Busy Here\n   The callee's end system was contacted successfully,
    but the callee is\n   currently not willing or able to take additional calls at
    this end\n   system.  The response MAY indicate a better time to call in the\n
    \  Retry-After header field.  The user could also be available\n   elsewhere,
    such as through a voice mail service.  Status 600 (Busy\n   Everywhere) SHOULD
    be used if the client knows that no other end\n   system will be able to accept
    this call.\n"
  title: 21.4.24 486 Busy Here
- contents:
  - "21.4.25 487 Request Terminated\n   The request was terminated by a BYE or CANCEL
    request.  This response\n   is never returned for a CANCEL request itself.\n"
  title: 21.4.25 487 Request Terminated
- contents:
  - "21.4.26 488 Not Acceptable Here\n   The response has the same meaning as 606
    (Not Acceptable), but only\n   applies to the specific resource addressed by the
    Request-URI and the\n   request may succeed elsewhere.\n   A message body containing
    a description of media capabilities MAY be\n   present in the response, which
    is formatted according to the Accept\n   header field in the INVITE (or application/sdp
    if not present), the\n   same as a message body in a 200 (OK) response to an OPTIONS
    request.\n"
  title: 21.4.26 488 Not Acceptable Here
- contents:
  - "21.4.27 491 Request Pending\n   The request was received by a UAS that had a
    pending request within\n   the same dialog.  Section 14.2 describes how such \"glare\"
    situations\n   are resolved.\n"
  title: 21.4.27 491 Request Pending
- contents:
  - "21.4.28 493 Undecipherable\n   The request was received by a UAS that contained
    an encrypted MIME\n   body for which the recipient does not possess or will not
    provide an\n   appropriate decryption key.  This response MAY have a single body\n
    \  containing an appropriate public key that should be used to encrypt\n   MIME
    bodies sent to this UA.  Details of the usage of this response\n   code can be
    found in Section 23.2.\n"
  title: 21.4.28 493 Undecipherable
- contents:
  - "21.5 Server Failure 5xx\n   5xx responses are failure responses given when a
    server itself has\n   erred.\n"
  title: 21.5 Server Failure 5xx
- contents:
  - "21.5.1 500 Server Internal Error\n   The server encountered an unexpected condition
    that prevented it from\n   fulfilling the request.  The client MAY display the
    specific error\n   condition and MAY retry the request after several seconds.\n
    \  If the condition is temporary, the server MAY indicate when the\n   client
    may retry the request using the Retry-After header field.\n"
  title: 21.5.1 500 Server Internal Error
- contents:
  - "21.5.2 501 Not Implemented\n   The server does not support the functionality
    required to fulfill the\n   request.  This is the appropriate response when a
    UAS does not\n   recognize the request method and is not capable of supporting
    it for\n   any user.  (Proxies forward all requests regardless of method.)\n   Note
    that a 405 (Method Not Allowed) is sent when the server\n   recognizes the request
    method, but that method is not allowed or\n   supported.\n"
  title: 21.5.2 501 Not Implemented
- contents:
  - "21.5.3 502 Bad Gateway\n   The server, while acting as a gateway or proxy, received
    an invalid\n   response from the downstream server it accessed in attempting to\n
    \  fulfill the request.\n"
  title: 21.5.3 502 Bad Gateway
- contents:
  - "21.5.4 503 Service Unavailable\n   The server is temporarily unable to process
    the request due to a\n   temporary overloading or maintenance of the server.  The
    server MAY\n   indicate when the client should retry the request in a Retry-After\n
    \  header field.  If no Retry-After is given, the client MUST act as if\n   it
    had received a 500 (Server Internal Error) response.\n   A client (proxy or UAC)
    receiving a 503 (Service Unavailable) SHOULD\n   attempt to forward the request
    to an alternate server.  It SHOULD NOT\n   forward any other requests to that
    server for the duration specified\n   in the Retry-After header field, if present.\n
    \  Servers MAY refuse the connection or drop the request instead of\n   responding
    with 503 (Service Unavailable).\n"
  title: 21.5.4 503 Service Unavailable
- contents:
  - "21.5.5 504 Server Time-out\n   The server did not receive a timely response from
    an external server\n   it accessed in attempting to process the request.  408
    (Request\n   Timeout) should be used instead if there was no response within the\n
    \  period specified in the Expires header field from the upstream\n   server.\n"
  title: 21.5.5 504 Server Time-out
- contents:
  - "21.5.6 505 Version Not Supported\n   The server does not support, or refuses
    to support, the SIP protocol\n   version that was used in the request.  The server
    is indicating that\n   it is unable or unwilling to complete the request using
    the same\n   major version as the client, other than with this error message.\n"
  title: 21.5.6 505 Version Not Supported
- contents:
  - "21.5.7 513 Message Too Large\n   The server was unable to process the request
    since the message length\n   exceeded its capabilities.\n"
  title: 21.5.7 513 Message Too Large
- contents:
  - "21.6 Global Failures 6xx\n   6xx responses indicate that a server has definitive
    information about\n   a particular user, not just the particular instance indicated
    in the\n   Request-URI.\n"
  title: 21.6 Global Failures 6xx
- contents:
  - "21.6.1 600 Busy Everywhere\n   The callee's end system was contacted successfully
    but the callee is\n   busy and does not wish to take the call at this time.  The
    response\n   MAY indicate a better time to call in the Retry-After header field.\n
    \  If the callee does not wish to reveal the reason for declining the\n   call,
    the callee uses status code 603 (Decline) instead.  This status\n   response is
    returned only if the client knows that no other end point\n   (such as a voice
    mail system) will answer the request.  Otherwise,\n   486 (Busy Here) should be
    returned.\n"
  title: 21.6.1 600 Busy Everywhere
- contents:
  - "21.6.2 603 Decline\n   The callee's machine was successfully contacted but the
    user\n   explicitly does not wish to or cannot participate.  The response MAY\n
    \  indicate a better time to call in the Retry-After header field.  This\n   status
    response is returned only if the client knows that no other\n   end point will
    answer the request.\n"
  title: 21.6.2 603 Decline
- contents:
  - "21.6.3 604 Does Not Exist Anywhere\n   The server has authoritative information
    that the user indicated in\n   the Request-URI does not exist anywhere.\n"
  title: 21.6.3 604 Does Not Exist Anywhere
- contents:
  - "21.6.4 606 Not Acceptable\n   The user's agent was contacted successfully but
    some aspects of the\n   session description such as the requested media, bandwidth,
    or\n   addressing style were not acceptable.\n   A 606 (Not Acceptable) response
    means that the user wishes to\n   communicate, but cannot adequately support the
    session described.\n   The 606 (Not Acceptable) response MAY contain a list of
    reasons in a\n   Warning header field describing why the session described cannot
    be\n   supported.  Warning reason codes are listed in Section 20.43.\n   A message
    body containing a description of media capabilities MAY be\n   present in the
    response, which is formatted according to the Accept\n   header field in the INVITE
    (or application/sdp if not present), the\n   same as a message body in a 200 (OK)
    response to an OPTIONS request.\n   It is hoped that negotiation will not frequently
    be needed, and when\n   a new user is being invited to join an already existing
    conference,\n   negotiation may not be possible.  It is up to the invitation\n
    \  initiator to decide whether or not to act on a 606 (Not Acceptable)\n   response.\n
    \  This status response is returned only if the client knows that no\n   other
    end point will answer the request.\n"
  title: 21.6.4 606 Not Acceptable
- contents:
  - "22 Usage of HTTP Authentication\n   SIP provides a stateless, challenge-based
    mechanism for\n   authentication that is based on authentication in HTTP.  Any
    time\n   that a proxy server or UA receives a request (with the exceptions\n   given
    in Section 22.1), it MAY challenge the initiator of the request\n   to provide
    assurance of its identity.  Once the originator has been\n   identified, the recipient
    of the request SHOULD ascertain whether or\n   not this user is authorized to
    make the request in question.  No\n   authorization systems are recommended or
    discussed in this document.\n   The \"Digest\" authentication mechanism described
    in this section\n   provides message authentication and replay protection only,
    without\n   message integrity or confidentiality.  Protective measures above and\n
    \  beyond those provided by Digest need to be taken to prevent active\n   attackers
    from modifying SIP requests and responses.\n   Note that due to its weak security,
    the usage of \"Basic\"\n   authentication has been deprecated.  Servers MUST NOT
    accept\n   credentials using the \"Basic\" authorization scheme, and servers also\n
    \  MUST NOT challenge with \"Basic\".  This is a change from RFC 2543.\n"
  title: 22 Usage of HTTP Authentication
- contents:
  - "22.1 Framework\n   The framework for SIP authentication closely parallels that
    of HTTP\n   (RFC 2617 [17]).  In particular, the BNF for auth-scheme, auth-param,\n
    \  challenge, realm, realm-value, and credentials is identical (although\n   the
    usage of \"Basic\" as a scheme is not permitted).  In SIP, a UAS\n   uses the
    401 (Unauthorized) response to challenge the identity of a\n   UAC.  Additionally,
    registrars and redirect servers MAY make use of\n   401 (Unauthorized) responses
    for authentication, but proxies MUST\n   NOT, and instead MAY use the 407 (Proxy
    Authentication Required)\n   response.  The requirements for inclusion of the
    Proxy-Authenticate,\n   Proxy-Authorization, WWW-Authenticate, and Authorization
    in the\n   various messages are identical to those described in RFC 2617 [17].\n
    \  Since SIP does not have the concept of a canonical root URL, the\n   notion
    of protection spaces is interpreted differently in SIP.  The\n   realm string
    alone defines the protection domain.  This is a change\n   from RFC 2543, in which
    the Request-URI and the realm together\n   defined the protection domain.\n      This
    previous definition of protection domain caused some amount\n      of confusion
    since the Request-URI sent by the UAC and the\n      Request-URI received by the
    challenging server might be different,\n      and indeed the final form of the
    Request-URI might not be known to\n      the UAC.  Also, the previous definition
    depended on the presence\n      of a SIP URI in the Request-URI and seemed to
    rule out alternative\n      URI schemes (for example, the tel URL).\n   Operators
    of user agents or proxy servers that will authenticate\n   received requests MUST
    adhere to the following guidelines for\n   creation of a realm string for their
    server:\n      o  Realm strings MUST be globally unique.  It is RECOMMENDED that\n
    \        a realm string contain a hostname or domain name, following the\n         recommendation
    in Section 3.2.1 of RFC 2617 [17].\n      o  Realm strings SHOULD present a human-readable
    identifier that\n         can be rendered to a user.\n   For example:\n      INVITE
    sip:bob@biloxi.com SIP/2.0\n      Authorization: Digest realm=\"biloxi.com\",
    <...>\n   Generally, SIP authentication is meaningful for a specific realm, a\n
    \  protection domain.  Thus, for Digest authentication, each such\n   protection
    domain has its own set of usernames and passwords.  If a\n   server does not require
    authentication for a particular request, it\n   MAY accept a default username,
    \"anonymous\", which has no password\n   (password of \"\").  Similarly, UACs
    representing many users, such as\n   PSTN gateways, MAY have their own device-specific
    username and\n   password, rather than accounts for particular users, for their
    realm.\n   While a server can legitimately challenge most SIP requests, there\n
    \  are two requests defined by this document that require special\n   handling
    for authentication: ACK and CANCEL.\n   Under an authentication scheme that uses
    responses to carry values\n   used to compute nonces (such as Digest), some problems
    come up for\n   any requests that take no response, including ACK.  For this reason,\n
    \  any credentials in the INVITE that were accepted by a server MUST be\n   accepted
    by that server for the ACK.  UACs creating an ACK message\n   will duplicate all
    of the Authorization and Proxy-Authorization\n   header field values that appeared
    in the INVITE to which the ACK\n   corresponds.  Servers MUST NOT attempt to challenge
    an ACK.\n   Although the CANCEL method does take a response (a 2xx), servers MUST\n
    \  NOT attempt to challenge CANCEL requests since these requests cannot\n   be
    resubmitted.  Generally, a CANCEL request SHOULD be accepted by a\n   server if
    it comes from the same hop that sent the request being\n   canceled (provided
    that some sort of transport or network layer\n   security association, as described
    in Section 26.2.1, is in place).\n   When a UAC receives a challenge, it SHOULD
    render to the user the\n   contents of the \"realm\" parameter in the challenge
    (which appears in\n   either a WWW-Authenticate header field or Proxy-Authenticate
    header\n   field) if the UAC device does not already know of a credential for\n
    \  the realm in question.  A service provider that pre-configures UAs\n   with
    credentials for its realm should be aware that users will not\n   have the opportunity
    to present their own credentials for this realm\n   when challenged at a pre-configured
    device.\n   Finally, note that even if a UAC can locate credentials that are\n
    \  associated with the proper realm, the potential exists that these\n   credentials
    may no longer be valid or that the challenging server\n   will not accept these
    credentials for whatever reason (especially\n   when \"anonymous\" with no password
    is submitted).  In this instance a\n   server may repeat its challenge, or it
    may respond with a 403\n   Forbidden.  A UAC MUST NOT re-attempt requests with
    the credentials\n   that have just been rejected (though the request may be retried
    if\n   the nonce was stale).\n"
  title: 22.1 Framework
- contents:
  - "22.2 User-to-User Authentication\n   When a UAS receives a request from a UAC,
    the UAS MAY authenticate\n   the originator before the request is processed.  If
    no credentials\n   (in the Authorization header field) are provided in the request,
    the\n   UAS can challenge the originator to provide credentials by rejecting\n
    \  the request with a 401 (Unauthorized) status code.\n   The WWW-Authenticate
    response-header field MUST be included in 401\n   (Unauthorized) response messages.
    \ The field value consists of at\n   least one challenge that indicates the authentication
    scheme(s) and\n   parameters applicable to the realm.\n   An example of the WWW-Authenticate
    header field in a 401 challenge\n   is:\n      WWW-Authenticate: Digest\n              realm=\"biloxi.com\",\n
    \             qop=\"auth,auth-int\",\n              nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\",\n
    \             opaque=\"5ccc069c403ebaf9f0171e9517f40e41\"\n   When the originating
    UAC receives the 401 (Unauthorized), it SHOULD,\n   if it is able, re-originate
    the request with the proper credentials.\n   The UAC may require input from the
    originating user before\n   proceeding.  Once authentication credentials have
    been supplied\n   (either directly by the user, or discovered in an internal keyring),\n
    \  UAs SHOULD cache the credentials for a given value of the To header\n   field
    and \"realm\" and attempt to re-use these values on the next\n   request for that
    destination.  UAs MAY cache credentials in any way\n   they would like.\n   If
    no credentials for a realm can be located, UACs MAY attempt to\n   retry the request
    with a username of \"anonymous\" and no password (a\n   password of \"\").\n   Once
    credentials have been located, any UA that wishes to\n   authenticate itself with
    a UAS or registrar -- usually, but not\n   necessarily, after receiving a 401
    (Unauthorized) response -- MAY do\n   so by including an Authorization header
    field with the request.  The\n   Authorization field value consists of credentials
    containing the\n   authentication information of the UA for the realm of the resource\n
    \  being requested as well as parameters required in support of\n   authentication
    and replay protection.\n   An example of the Authorization header field is:\n
    \     Authorization: Digest username=\"bob\",\n              realm=\"biloxi.com\",\n
    \             nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\",\n              uri=\"sip:bob@biloxi.com\",\n
    \             qop=auth,\n              nc=00000001,\n              cnonce=\"0a4f113b\",\n
    \             response=\"6629fae49393a05397450978507c4ef1\",\n              opaque=\"5ccc069c403ebaf9f0171e9517f40e41\"\n
    \  When a UAC resubmits a request with its credentials after receiving a\n   401
    (Unauthorized) or 407 (Proxy Authentication Required) response,\n   it MUST increment
    the CSeq header field value as it would normally\n   when sending an updated request.\n"
  title: 22.2 User-to-User Authentication
- contents:
  - "22.3 Proxy-to-User Authentication\n   Similarly, when a UAC sends a request to
    a proxy server, the proxy\n   server MAY authenticate the originator before the
    request is\n   processed.  If no credentials (in the Proxy-Authorization header\n
    \  field) are provided in the request, the proxy can challenge the\n   originator
    to provide credentials by rejecting the request with a 407\n   (Proxy Authentication
    Required) status code.  The proxy MUST populate\n   the 407 (Proxy Authentication
    Required) message with a Proxy-\n   Authenticate header field value applicable
    to the proxy for the\n   requested resource.\n   The use of Proxy-Authenticate
    and Proxy-Authorization parallel that\n   described in [17], with one difference.
    \ Proxies MUST NOT add values\n   to the Proxy-Authorization header field.  All
    407 (Proxy\n   Authentication Required) responses MUST be forwarded upstream toward\n
    \  the UAC following the procedures for any other response.  It is the\n   UAC's
    responsibility to add the Proxy-Authorization header field\n   value containing
    credentials for the realm of the proxy that has\n   asked for authentication.\n
    \     If a proxy were to resubmit a request adding a Proxy-Authorization\n      header
    field value, it would need to increment the CSeq in the new\n      request.  However,
    this would cause the UAC that submitted the\n      original request to discard
    a response from the UAS, as the CSeq\n      value would be different.\n   When
    the originating UAC receives the 407 (Proxy Authentication\n   Required) it SHOULD,
    if it is able, re-originate the request with the\n   proper credentials.  It should
    follow the same procedures for the\n   display of the \"realm\" parameter that
    are given above for responding\n   to 401.\n   If no credentials for a realm can
    be located, UACs MAY attempt to\n   retry the request with a username of \"anonymous\"
    and no password (a\n   password of \"\").\n   The UAC SHOULD also cache the credentials
    used in the re-originated\n   request.\n   The following rule is RECOMMENDED for
    proxy credential caching:\n   If a UA receives a Proxy-Authenticate header field
    value in a 401/407\n   response to a request with a particular Call-ID, it should\n
    \  incorporate credentials for that realm in all subsequent requests\n   that
    contain the same Call-ID.  These credentials MUST NOT be cached\n   across dialogs;
    however, if a UA is configured with the realm of its\n   local outbound proxy,
    when one exists, then the UA MAY cache\n   credentials for that realm across dialogs.
    \ Note that this does mean\n   a future request in a dialog could contain credentials
    that are not\n   needed by any proxy along the Route header path.\n   Any UA that
    wishes to authenticate itself to a proxy server --\n   usually, but not necessarily,
    after receiving a 407 (Proxy\n   Authentication Required) response -- MAY do so
    by including a Proxy-\n   Authorization header field value with the request.  The
    Proxy-\n   Authorization request-header field allows the client to identify\n
    \  itself (or its user) to a proxy that requires authentication.  The\n   Proxy-Authorization
    header field value consists of credentials\n   containing the authentication information
    of the UA for the proxy\n   and/or realm of the resource being requested.\n   A
    Proxy-Authorization header field value applies only to the proxy\n   whose realm
    is identified in the \"realm\" parameter (this proxy may\n   previously have demanded
    authentication using the Proxy-Authenticate\n   field).  When multiple proxies
    are used in a chain, a Proxy-\n   Authorization header field value MUST NOT be
    consumed by any proxy\n   whose realm does not match the \"realm\" parameter specified
    in that\n   value.\n   Note that if an authentication scheme that does not support
    realms is\n   used in the Proxy-Authorization header field, a proxy server MUST\n
    \  attempt to parse all Proxy-Authorization header field values to\n   determine
    whether one of them has what the proxy server considers to\n   be valid credentials.
    \ Because this is potentially very time-\n   consuming in large networks, proxy
    servers SHOULD use an\n   authentication scheme that supports realms in the Proxy-Authorization\n
    \  header field.\n   If a request is forked (as described in Section 16.7), various
    proxy\n   servers and/or UAs may wish to challenge the UAC.  In this case, the\n
    \  forking proxy server is responsible for aggregating these challenges\n   into
    a single response.  Each WWW-Authenticate and Proxy-Authenticate\n   value received
    in responses to the forked request MUST be placed into\n   the single response
    that is sent by the forking proxy to the UA; the\n   ordering of these header
    field values is not significant.\n      When a proxy server issues a challenge
    in response to a request,\n      it will not proxy the request until the UAC has
    retried the\n      request with valid credentials.  A forking proxy may forward
    a\n      request simultaneously to multiple proxy servers that require\n      authentication,
    each of which in turn will not forward the request\n      until the originating
    UAC has authenticated itself in their\n      respective realm.  If the UAC does
    not provide credentials for\n      each challenge, the proxy servers that issued
    the challenges will\n      not forward requests to the UA where the destination
    user might be\n      located, and therefore, the virtues of forking are largely
    lost.\n   When resubmitting its request in response to a 401 (Unauthorized) or\n
    \  407 (Proxy Authentication Required) that contains multiple\n   challenges,
    a UAC MAY include an Authorization value for each WWW-\n   Authenticate value
    and a Proxy-Authorization value for each Proxy-\n   Authenticate value for which
    the UAC wishes to supply a credential.\n   As noted above, multiple credentials
    in a request SHOULD be\n   differentiated by the \"realm\" parameter.\n   It is
    possible for multiple challenges associated with the same realm\n   to appear
    in the same 401 (Unauthorized) or 407 (Proxy Authentication\n   Required).  This
    can occur, for example, when multiple proxies within\n   the same administrative
    domain, which use a common realm, are reached\n   by a forking request.  When
    it retries a request, a UAC MAY therefore\n   supply multiple credentials in Authorization
    or Proxy-Authorization\n   header fields with the same \"realm\" parameter value.
    \ The same\n   credentials SHOULD be used for the same realm.\n"
  title: 22.3 Proxy-to-User Authentication
- contents:
  - "22.4 The Digest Authentication Scheme\n   This section describes the modifications
    and clarifications required\n   to apply the HTTP Digest authentication scheme
    to SIP.  The SIP\n   scheme usage is almost completely identical to that for HTTP
    [17].\n   Since RFC 2543 is based on HTTP Digest as defined in RFC 2069 [39],\n
    \  SIP servers supporting RFC 2617 MUST ensure they are backwards\n   compatible
    with RFC 2069.  Procedures for this backwards\n   compatibility are specified
    in RFC 2617.  Note, however, that SIP\n   servers MUST NOT accept or request Basic
    authentication.\n   The rules for Digest authentication follow those defined in
    [17],\n   with \"HTTP/1.1\" replaced by \"SIP/2.0\" in addition to the following\n
    \  differences:\n      1.  The URI included in the challenge has the following
    BNF:\n          URI  =  SIP-URI / SIPS-URI\n      2.  The BNF in RFC 2617 has
    an error in that the 'uri' parameter\n          of the Authorization header field
    for HTTP Digest\n          authentication is not enclosed in quotation marks.
    \ (The\n          example in Section 3.5 of RFC 2617 is correct.)  For SIP, the\n
    \         'uri' MUST be enclosed in quotation marks.\n      3.  The BNF for digest-uri-value
    is:\n          digest-uri-value  =  Request-URI ; as defined in Section 25\n      4.
    \ The example procedure for choosing a nonce based on Etag does\n          not
    work for SIP.\n      5.  The text in RFC 2617 [17] regarding cache operation does
    not\n          apply to SIP.\n      6.  RFC 2617 [17] requires that a server check
    that the URI in the\n          request line and the URI included in the Authorization
    header\n          field point to the same resource.  In a SIP context, these two\n
    \         URIs may refer to different users, due to forwarding at some\n          proxy.
    \ Therefore, in SIP, a server MAY check that the\n          Request-URI in the
    Authorization header field value\n          corresponds to a user for whom the
    server is willing to accept\n          forwarded or direct requests, but it is
    not necessarily a\n          failure if the two fields are not equivalent.\n      7.
    \ As a clarification to the calculation of the A2 value for\n          message
    integrity assurance in the Digest authentication\n          scheme, implementers
    should assume, when the entity-body is\n          empty (that is, when SIP messages
    have no body) that the hash\n          of the entity-body resolves to the MD5
    hash of an empty\n          string, or:\n             H(entity-body) = MD5(\"\")
    =\n          \"d41d8cd98f00b204e9800998ecf8427e\"\n      8.  RFC 2617 notes that
    a cnonce value MUST NOT be sent in an\n          Authorization (and by extension
    Proxy-Authorization) header\n          field if no qop directive has been sent.
    \ Therefore, any\n          algorithms that have a dependency on the cnonce (including\n
    \         \"MD5-Sess\") require that the qop directive be sent.  Use of\n          the
    \"qop\" parameter is optional in RFC 2617 for the purposes\n          of backwards
    compatibility with RFC 2069; since RFC 2543 was\n          based on RFC 2069,
    the \"qop\" parameter must unfortunately\n          remain optional for clients
    and servers to receive.  However,\n          servers MUST always send a \"qop\"
    parameter in WWW-Authenticate\n          and Proxy-Authenticate header field values.
    \ If a client\n          receives a \"qop\" parameter in a challenge header field,
    it\n          MUST send the \"qop\" parameter in any resulting authorization\n
    \         header field.\n   RFC 2543 did not allow usage of the Authentication-Info
    header field\n   (it effectively used RFC 2069).  However, we now allow usage
    of this\n   header field, since it provides integrity checks over the bodies and\n
    \  provides mutual authentication.  RFC 2617 [17] defines mechanisms for\n   backwards
    compatibility using the qop attribute in the request.\n   These mechanisms MUST
    be used by a server to determine if the client\n   supports the new mechanisms
    in RFC 2617 that were not specified in\n   RFC 2069.\n"
  title: 22.4 The Digest Authentication Scheme
- contents:
  - "23 S/MIME\n   SIP messages carry MIME bodies and the MIME standard includes\n
    \  mechanisms for securing MIME contents to ensure both integrity and\n   confidentiality
    (including the 'multipart/signed' and\n   'application/pkcs7-mime' MIME types,
    see RFC 1847 [22], RFC 2630 [23]\n   and RFC 2633 [24]).  Implementers should
    note, however, that there\n   may be rare network intermediaries (not typical
    proxy servers) that\n   rely on viewing or modifying the bodies of SIP messages
    (especially\n   SDP), and that secure MIME may prevent these sorts of intermediaries\n
    \  from functioning.\n      This applies particularly to certain types of firewalls.\n
    \     The PGP mechanism for encrypting the header fields and bodies of\n      SIP
    messages described in RFC 2543 has been deprecated.\n"
  title: 23 S/MIME
- contents:
  - "23.1 S/MIME Certificates\n   The certificates that are used to identify an end-user
    for the\n   purposes of S/MIME differ from those used by servers in one important\n
    \  respect - rather than asserting that the identity of the holder\n   corresponds
    to a particular hostname, these certificates assert that\n   the holder is identified
    by an end-user address.  This address is\n   composed of the concatenation of
    the \"userinfo\" \"@\" and \"domainname\"\n   portions of a SIP or SIPS URI (in
    other words, an email address of\n   the form \"bob@biloxi.com\"), most commonly
    corresponding to a user's\n   address-of-record.\n   These certificates are also
    associated with keys that are used to\n   sign or encrypt bodies of SIP messages.
    \ Bodies are signed with the\n   private key of the sender (who may include their
    public key with the\n   message as appropriate), but bodies are encrypted with
    the public key\n   of the intended recipient.  Obviously, senders must have\n
    \  foreknowledge of the public key of recipients in order to encrypt\n   message
    bodies.  Public keys can be stored within a UA on a virtual\n   keyring.\n   Each
    user agent that supports S/MIME MUST contain a keyring\n   specifically for end-users'
    certificates.  This keyring should map\n   between addresses of record and corresponding
    certificates.  Over\n   time, users SHOULD use the same certificate when they
    populate the\n   originating URI of signaling (the From header field) with the
    same\n   address-of-record.\n   Any mechanisms depending on the existence of end-user
    certificates\n   are seriously limited in that there is virtually no consolidated\n
    \  authority today that provides certificates for end-user applications.\n   However,
    users SHOULD acquire certificates from known public\n   certificate authorities.
    \ As an alternative, users MAY create self-\n   signed certificates.  The implications
    of self-signed certificates\n   are explored further in Section 26.4.2.  Implementations
    may also use\n   pre-configured certificates in deployments in which a previous
    trust\n   relationship exists between all SIP entities.\n   Above and beyond the
    problem of acquiring an end-user certificate,\n   there are few well-known centralized
    directories that distribute\n   end-user certificates.  However, the holder of
    a certificate SHOULD\n   publish their certificate in any public directories as
    appropriate.\n   Similarly, UACs SHOULD support a mechanism for importing (manually
    or\n   automatically) certificates discovered in public directories\n   corresponding
    to the target URIs of SIP requests.\n"
  title: 23.1 S/MIME Certificates
- contents:
  - "23.2 S/MIME Key Exchange\n   SIP itself can also be used as a means to distribute
    public keys in\n   the following manner.\n   Whenever the CMS SignedData message
    is used in S/MIME for SIP, it\n   MUST contain the certificate bearing the public
    key necessary to\n   verify the signature.\n   When a UAC sends a request containing
    an S/MIME body that initiates a\n   dialog, or sends a non-INVITE request outside
    the context of a\n   dialog, the UAC SHOULD structure the body as an S/MIME\n
    \  'multipart/signed' CMS SignedData body.  If the desired CMS service\n   is
    EnvelopedData (and the public key of the target user is known),\n   the UAC SHOULD
    send the EnvelopedData message encapsulated within a\n   SignedData message.\n
    \  When a UAS receives a request containing an S/MIME CMS body that\n   includes
    a certificate, the UAS SHOULD first validate the\n   certificate, if possible,
    with any available root certificates for\n   certificate authorities.  The UAS
    SHOULD also determine the subject\n   of the certificate (for S/MIME, the SubjectAltName
    will contain the\n   appropriate identity) and compare this value to the From
    header field\n   of the request.  If the certificate cannot be verified, because
    it is\n   self-signed, or signed by no known authority, or if it is verifiable\n
    \  but its subject does not correspond to the From header field of\n   request,
    the UAS MUST notify its user of the status of the\n   certificate (including the
    subject of the certificate, its signer,\n   and any key fingerprint information)
    and request explicit permission\n   before proceeding.  If the certificate was
    successfully verified and\n   the subject of the certificate corresponds to the
    From header field\n   of the SIP request, or if the user (after notification)
    explicitly\n   authorizes the use of the certificate, the UAS SHOULD add this\n
    \  certificate to a local keyring, indexed by the address-of-record of\n   the
    holder of the certificate.\n   When a UAS sends a response containing an S/MIME
    body that answers\n   the first request in a dialog, or a response to a non-INVITE
    request\n   outside the context of a dialog, the UAS SHOULD structure the body
    as\n   an S/MIME 'multipart/signed' CMS SignedData body.  If the desired CMS\n
    \  service is EnvelopedData, the UAS SHOULD send the EnvelopedData\n   message
    encapsulated within a SignedData message.\n   When a UAC receives a response containing
    an S/MIME CMS body that\n   includes a certificate, the UAC SHOULD first validate
    the\n   certificate, if possible, with any appropriate root certificate.  The\n
    \  UAC SHOULD also determine the subject of the certificate and compare\n   this
    value to the To field of the response; although the two may very\n   well be different,
    and this is not necessarily indicative of a\n   security breach.  If the certificate
    cannot be verified because it is\n   self-signed, or signed by no known authority,
    the UAC MUST notify its\n   user of the status of the certificate (including the
    subject of the\n   certificate, its signator, and any key fingerprint information)
    and\n   request explicit permission before proceeding.  If the certificate\n   was
    successfully verified, and the subject of the certificate\n   corresponds to the
    To header field in the response, or if the user\n   (after notification) explicitly
    authorizes the use of the\n   certificate, the UAC SHOULD add this certificate
    to a local keyring,\n   indexed by the address-of-record of the holder of the
    certificate.\n   If the UAC had not transmitted its own certificate to the UAS
    in any\n   previous transaction, it SHOULD use a CMS SignedData body for its\n
    \  next request or response.\n   On future occasions, when the UA receives requests
    or responses that\n   contain a From header field corresponding to a value in
    its keyring,\n   the UA SHOULD compare the certificate offered in these messages
    with\n   the existing certificate in its keyring.  If there is a discrepancy,\n
    \  the UA MUST notify its user of a change of the certificate\n   (preferably
    in terms that indicate that this is a potential security\n   breach) and acquire
    the user's permission before continuing to\n   process the signaling.  If the
    user authorizes this certificate, it\n   SHOULD be added to the keyring alongside
    any previous value(s) for\n   this address-of-record.\n   Note well however, that
    this key exchange mechanism does not\n   guarantee the secure exchange of keys
    when self-signed certificates,\n   or certificates signed by an obscure authority,
    are used - it is\n   vulnerable to well-known attacks.  In the opinion of the
    authors,\n   however, the security it provides is proverbially better than\n   nothing;
    it is in fact comparable to the widely used SSH application.\n   These limitations
    are explored in greater detail in Section 26.4.2.\n   If a UA receives an S/MIME
    body that has been encrypted with a public\n   key unknown to the recipient, it
    MUST reject the request with a 493\n   (Undecipherable) response.  This response
    SHOULD contain a valid\n   certificate for the respondent (corresponding, if possible,
    to any\n   address of record given in the To header field of the rejected\n   request)
    within a MIME body with a 'certs-only' \"smime-type\"\n   parameter.\n   A 493
    (Undecipherable) sent without any certificate indicates that\n   the respondent
    cannot or will not utilize S/MIME encrypted messages,\n   though they may still
    support S/MIME signatures.\n   Note that a user agent that receives a request
    containing an S/MIME\n   body that is not optional (with a Content-Disposition
    header\n   \"handling\" parameter of \"required\") MUST reject the request with
    a\n   415 Unsupported Media Type response if the MIME type is not\n   understood.
    \ A user agent that receives such a response when S/MIME\n   is sent SHOULD notify
    its user that the remote device does not\n   support S/MIME, and it MAY subsequently
    resend the request without\n   S/MIME, if appropriate; however, this 415 response
    may constitute a\n   downgrade attack.\n   If a user agent sends an S/MIME body
    in a request, but receives a\n   response that contains a MIME body that is not
    secured, the UAC\n   SHOULD notify its user that the session could not be secured.\n
    \  However, if a user agent that supports S/MIME receives a request with\n   an
    unsecured body, it SHOULD NOT respond with a secured body, but if\n   it expects
    S/MIME from the sender (for example, because the sender's\n   From header field
    value corresponds to an identity on its keychain),\n   the UAS SHOULD notify its
    user that the session could not be secured.\n   A number of conditions that arise
    in the previous text call for the\n   notification of the user when an anomalous
    certificate-management\n   event occurs.  Users might well ask what they should
    do under these\n   circumstances.  First and foremost, an unexpected change in
    a\n   certificate, or an absence of security when security is expected, are\n
    \  causes for caution but not necessarily indications that an attack is\n   in
    progress.  Users might abort any connection attempt or refuse a\n   connection
    request they have received; in telephony parlance, they\n   could hang up and
    call back.  Users may wish to find an alternate\n   means to contact the other
    party and confirm that their key has\n   legitimately changed.  Note that users
    are sometimes compelled to\n   change their certificates, for example when they
    suspect that the\n   secrecy of their private key has been compromised.  When
    their\n   private key is no longer private, users must legitimately generate a\n
    \  new key and re-establish trust with any users that held their old\n   key.\n
    \  Finally, if during the course of a dialog a UA receives a certificate\n   in
    a CMS SignedData message that does not correspond with the\n   certificates previously
    exchanged during a dialog, the UA MUST notify\n   its user of the change, preferably
    in terms that indicate that this\n   is a potential security breach.\n"
  title: 23.2 S/MIME Key Exchange
- contents:
  - "23.3 Securing MIME bodies\n   There are two types of secure MIME bodies that
    are of interest to\n   SIP: use of these bodies should follow the S/MIME specification
    [24]\n   with a few variations.\n      o  \"multipart/signed\" MUST be used only
    with CMS detached\n         signatures.\n            This allows backwards compatibility
    with non-S/MIME-\n            compliant recipients.\n      o  S/MIME bodies SHOULD
    have a Content-Disposition header field,\n         and the value of the \"handling\"
    parameter SHOULD be \"required.\"\n      o  If a UAC has no certificate on its
    keyring associated with the\n         address-of-record to which it wants to send
    a request, it\n         cannot send an encrypted \"application/pkcs7-mime\" MIME
    message.\n         UACs MAY send an initial request such as an OPTIONS message\n
    \        with a CMS detached signature in order to solicit the\n         certificate
    of the remote side (the signature SHOULD be over a\n         \"message/sip\" body
    of the type described in Section 23.4).\n            Note that future standardization
    work on S/MIME may define\n            non-certificate based keys.\n      o  Senders
    of S/MIME bodies SHOULD use the \"SMIMECapabilities\"\n         (see Section 2.5.2
    of [24]) attribute to express their\n         capabilities and preferences for
    further communications.  Note\n         especially that senders MAY use the \"preferSignedData\"\n
    \        capability to encourage receivers to respond with CMS\n         SignedData
    messages (for example, when sending an OPTIONS\n         request as described
    above).\n      o  S/MIME implementations MUST at a minimum support SHA1 as a\n
    \        digital signature algorithm, and 3DES as an encryption\n         algorithm.
    \ All other signature and encryption algorithms MAY\n         be supported.  Implementations
    can negotiate support for these\n         algorithms with the \"SMIMECapabilities\"
    attribute.\n      o  Each S/MIME body in a SIP message SHOULD be signed with only\n
    \        one certificate.  If a UA receives a message with multiple\n         signatures,
    the outermost signature should be treated as the\n         single certificate
    for this body.  Parallel signatures SHOULD\n         NOT be used.\n         The
    following is an example of an encrypted S/MIME SDP body\n         within a SIP
    message:\n        INVITE sip:bob@biloxi.com SIP/2.0\n        Via: SIP/2.0/UDP
    pc33.atlanta.com;branch=z9hG4bKnashds8\n        To: Bob <sip:bob@biloxi.com>\n
    \       From: Alice <sip:alice@atlanta.com>;tag=1928301774\n        Call-ID: a84b4c76e66710\n
    \       CSeq: 314159 INVITE\n        Max-Forwards: 70\n        Contact: <sip:alice@pc33.atlanta.com>\n
    \       Content-Type: application/pkcs7-mime; smime-type=enveloped-data;\n             name=smime.p7m\n
    \       Content-Disposition: attachment; filename=smime.p7m\n           handling=required\n
    \     *******************************************************\n      * Content-Type:
    application/sdp                       *\n      *                                                     *\n
    \     * v=0                                                 *\n      * o=alice
    53655765 2353687637 IN IP4 pc33.atlanta.com *\n      * s=-                                                 *\n
    \     * t=0 0                                               *\n      * c=IN IP4
    pc33.atlanta.com                           *\n      * m=audio 3456 RTP/AVP 0 1
    3 99                       *\n      * a=rtpmap:0 PCMU/8000                                *\n
    \     *******************************************************\n"
  title: 23.3 Securing MIME bodies
- contents:
  - "23.4 SIP Header Privacy and Integrity using S/MIME: Tunneling SIP\n   As a means
    of providing some degree of end-to-end authentication,\n   integrity or confidentiality
    for SIP header fields, S/MIME can\n   encapsulate entire SIP messages within MIME
    bodies of type\n   \"message/sip\" and then apply MIME security to these bodies
    in the\n   same manner as typical SIP bodies.  These encapsulated SIP requests\n
    \  and responses do not constitute a separate dialog or transaction,\n   they
    are a copy of the \"outer\" message that is used to verify\n   integrity or to
    supply additional information.\n   If a UAS receives a request that contains a
    tunneled \"message/sip\"\n   S/MIME body, it SHOULD include a tunneled \"message/sip\"
    body in the\n   response with the same smime-type.\n   Any traditional MIME bodies
    (such as SDP) SHOULD be attached to the\n   \"inner\" message so that they can
    also benefit from S/MIME security.\n   Note that \"message/sip\" bodies can be
    sent as a part of a MIME\n   \"multipart/mixed\" body if any unsecured MIME types
    should also be\n   transmitted in a request.\n"
  title: '23.4 SIP Header Privacy and Integrity using S/MIME: Tunneling SIP'
- contents:
  - "23.4.1 Integrity and Confidentiality Properties of SIP Headers\n   When the S/MIME
    integrity or confidentiality mechanisms are used,\n   there may be discrepancies
    between the values in the \"inner\" message\n   and values in the \"outer\" message.
    \ The rules for handling any such\n   differences for all of the header fields
    described in this document\n   are given in this section.\n   Note that for the
    purposes of loose timestamping, all SIP messages\n   that tunnel \"message/sip\"
    SHOULD contain a Date header in both the\n   \"inner\" and \"outer\" headers.\n"
  title: 23.4.1 Integrity and Confidentiality Properties of SIP Headers
- contents:
  - "23.4.1.1 Integrity\n   Whenever integrity checks are performed, the integrity
    of a header\n   field should be determined by matching the value of the header
    field\n   in the signed body with that in the \"outer\" messages using the\n   comparison
    rules of SIP as described in 20.\n   Header fields that can be legitimately modified
    by proxy servers are:\n   Request-URI, Via, Record-Route, Route, Max-Forwards,
    and Proxy-\n   Authorization.  If these header fields are not intact end-to-end,\n
    \  implementations SHOULD NOT consider this a breach of security.\n   Changes
    to any other header fields defined in this document\n   constitute an integrity
    violation; users MUST be notified of a\n   discrepancy.\n"
  title: 23.4.1.1 Integrity
- contents:
  - "23.4.1.2 Confidentiality\n   When messages are encrypted, header fields may be
    included in the\n   encrypted body that are not present in the \"outer\" message.\n
    \  Some header fields must always have a plaintext version because they\n   are
    required header fields in requests and responses - these include:\n   To, From,
    Call-ID, CSeq, Contact.  While it is probably not useful to\n   provide an encrypted
    alternative for the Call-ID, CSeq, or Contact,\n   providing an alternative to
    the information in the \"outer\" To or From\n   is permitted.  Note that the values
    in an encrypted body are not used\n   for the purposes of identifying transactions
    or dialogs - they are\n   merely informational.  If the From header field in an
    encrypted body\n   differs from the value in the \"outer\" message, the value
    within the\n   encrypted body SHOULD be displayed to the user, but MUST NOT be
    used\n   in the \"outer\" header fields of any future messages.\n   Primarily,
    a user agent will want to encrypt header fields that have\n   an end-to-end semantic,
    including: Subject, Reply-To, Organization,\n   Accept, Accept-Encoding, Accept-Language,
    Alert-Info, Error-Info,\n   Authentication-Info, Expires, In-Reply-To, Require,
    Supported,\n   Unsupported, Retry-After, User-Agent, Server, and Warning.  If
    any of\n   these header fields are present in an encrypted body, they should be\n
    \  used instead of any \"outer\" header fields, whether this entails\n   displaying
    the header field values to users or setting internal\n   states in the UA.  They
    SHOULD NOT however be used in the \"outer\"\n   headers of any future messages.\n
    \  If present, the Date header field MUST always be the same in the\n   \"inner\"
    and \"outer\" headers.\n   Since MIME bodies are attached to the \"inner\" message,\n
    \  implementations will usually encrypt MIME-specific header fields,\n   including:
    MIME-Version, Content-Type, Content-Length, Content-\n   Language, Content-Encoding
    and Content-Disposition.  The \"outer\"\n   message will have the proper MIME
    header fields for S/MIME bodies.\n   These header fields (and any MIME bodies
    they preface) should be\n   treated as normal MIME header fields and bodies received
    in a SIP\n   message.\n   It is not particularly useful to encrypt the following
    header fields:\n   Min-Expires, Timestamp, Authorization, Priority, and WWW-\n
    \  Authenticate.  This category also includes those header fields that\n   can
    be changed by proxy servers (described in the preceding section).\n   UAs SHOULD
    never include these in an \"inner\" message if they are not\n   included in the
    \"outer\" message.  UAs that receive any of these\n   header fields in an encrypted
    body SHOULD ignore the encrypted\n   values.\n   Note that extensions to SIP may
    define additional header fields; the\n   authors of these extensions should describe
    the integrity and\n   confidentiality properties of such header fields.  If a
    SIP UA\n   encounters an unknown header field with an integrity violation, it\n
    \  MUST ignore the header field.\n"
  title: 23.4.1.2 Confidentiality
- contents:
  - "23.4.2 Tunneling Integrity and Authentication\n   Tunneling SIP messages within
    S/MIME bodies can provide integrity for\n   SIP header fields if the header fields
    that the sender wishes to\n   secure are replicated in a \"message/sip\" MIME
    body signed with a CMS\n   detached signature.\n   Provided that the \"message/sip\"
    body contains at least the\n   fundamental dialog identifiers (To, From, Call-ID,
    CSeq), then a\n   signed MIME body can provide limited authentication.  At the
    very\n   least, if the certificate used to sign the body is unknown to the\n   recipient
    and cannot be verified, the signature can be used to\n   ascertain that a later
    request in a dialog was transmitted by the\n   same certificate-holder that initiated
    the dialog.  If the recipient\n   of the signed MIME body has some stronger incentive
    to trust the\n   certificate (they were able to validate it, they acquired it
    from a\n   trusted repository, or they have used it frequently) then the\n   signature
    can be taken as a stronger assertion of the identity of the\n   subject of the
    certificate.\n   In order to eliminate possible confusions about the addition
    or\n   subtraction of entire header fields, senders SHOULD replicate all\n   header
    fields from the request within the signed body.  Any message\n   bodies that require
    integrity protection MUST be attached to the\n   \"inner\" message.\n   If a Date
    header is present in a message with a signed body, the\n   recipient SHOULD compare
    the header field value with its own internal\n   clock, if applicable.  If a significant
    time discrepancy is detected\n   (on the order of an hour or more), the user agent
    SHOULD alert the\n   user to the anomaly, and note that it is a potential security
    breach.\n   If an integrity violation in a message is detected by its recipient,\n
    \  the message MAY be rejected with a 403 (Forbidden) response if it is\n   a
    request, or any existing dialog MAY be terminated.  UAs SHOULD\n   notify users
    of this circumstance and request explicit guidance on\n   how to proceed.\n   The
    following is an example of the use of a tunneled \"message/sip\"\n   body:\n      INVITE
    sip:bob@biloxi.com SIP/2.0\n      Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n
    \     To: Bob <sip:bob@biloxi.com>\n      From: Alice <sip:alice@atlanta.com>;tag=1928301774\n
    \     Call-ID: a84b4c76e66710\n      CSeq: 314159 INVITE\n      Max-Forwards:
    70\n      Date: Thu, 21 Feb 2002 13:02:03 GMT\n      Contact: <sip:alice@pc33.atlanta.com>\n
    \     Content-Type: multipart/signed;\n        protocol=\"application/pkcs7-signature\";\n
    \       micalg=sha1; boundary=boundary42\n      Content-Length: 568\n      --boundary42\n
    \     Content-Type: message/sip\n      INVITE sip:bob@biloxi.com SIP/2.0\n      Via:
    SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n      To: Bob <bob@biloxi.com>\n
    \     From: Alice <alice@atlanta.com>;tag=1928301774\n      Call-ID: a84b4c76e66710\n
    \     CSeq: 314159 INVITE\n      Max-Forwards: 70\n      Date: Thu, 21 Feb 2002
    13:02:03 GMT\n      Contact: <sip:alice@pc33.atlanta.com>\n      Content-Type:
    application/sdp\n      Content-Length: 147\n      v=0\n      o=UserA 2890844526
    2890844526 IN IP4 here.com\n      s=Session SDP\n      c=IN IP4 pc33.atlanta.com\n
    \     t=0 0\n      m=audio 49172 RTP/AVP 0\n      a=rtpmap:0 PCMU/8000\n      --boundary42\n
    \     Content-Type: application/pkcs7-signature; name=smime.p7s\n      Content-Transfer-Encoding:
    base64\n      Content-Disposition: attachment; filename=smime.p7s;\n         handling=required\n
    \     ghyHhHUujhJhjH77n8HHGTrfvbnj756tbB9HG4VQpfyF467GhIGfHfYT6\n      4VQpfyF467GhIGfHfYT6jH77n8HHGghyHhHUujhJh756tbB9HGTrfvbnj\n
    \     n8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n      7GhIGfHfYT64VQbnj756\n
    \     --boundary42-\n"
  title: 23.4.2 Tunneling Integrity and Authentication
- contents:
  - "23.4.3 Tunneling Encryption\n   It may also be desirable to use this mechanism
    to encrypt a\n   \"message/sip\" MIME body within a CMS EnvelopedData message
    S/MIME\n   body, but in practice, most header fields are of at least some use
    to\n   the network; the general use of encryption with S/MIME is to secure\n   message
    bodies like SDP rather than message headers.  Some\n   informational header fields,
    such as the Subject or Organization\n   could perhaps warrant end-to-end security.
    \ Headers defined by future\n   SIP applications might also require obfuscation.\n
    \  Another possible application of encrypting header fields is selective\n   anonymity.
    \ A request could be constructed with a From header field\n   that contains no
    personal information (for example,\n   sip:anonymous@anonymizer.invalid).  However,
    a second From header\n   field containing the genuine address-of-record of the
    originator\n   could be encrypted within a \"message/sip\" MIME body where it
    will\n   only be visible to the endpoints of a dialog.\n      Note that if this
    mechanism is used for anonymity, the From header\n      field will no longer be
    usable by the recipient of a message as an\n      index to their certificate keychain
    for retrieving the proper\n      S/MIME key to associated with the sender.  The
    message must first\n      be decrypted, and the \"inner\" From header field MUST
    be used as an\n      index.\n   In order to provide end-to-end integrity, encrypted
    \"message/sip\"\n   MIME bodies SHOULD be signed by the sender.  This creates
    a\n   \"multipart/signed\" MIME body that contains an encrypted body and a\n   signature,
    both of type \"application/pkcs7-mime\".\n   In the following example, of an encrypted
    and signed message, the\n   text boxed in asterisks (\"*\") is encrypted:\n        INVITE
    sip:bob@biloxi.com SIP/2.0\n        Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n
    \       To: Bob <sip:bob@biloxi.com>\n        From: Anonymous <sip:anonymous@atlanta.com>;tag=1928301774\n
    \       Call-ID: a84b4c76e66710\n        CSeq: 314159 INVITE\n        Max-Forwards:
    70\n        Date: Thu, 21 Feb 2002 13:02:03 GMT\n        Contact: <sip:pc33.atlanta.com>\n
    \       Content-Type: multipart/signed;\n          protocol=\"application/pkcs7-signature\";\n
    \         micalg=sha1; boundary=boundary42\n        Content-Length: 568\n        --boundary42\n
    \       Content-Type: application/pkcs7-mime; smime-type=enveloped-data;\n             name=smime.p7m\n
    \       Content-Transfer-Encoding: base64\n        Content-Disposition: attachment;
    filename=smime.p7m\n           handling=required\n        Content-Length: 231\n
    \     ***********************************************************\n      * Content-Type:
    message/sip                               *\n      *                                                         *\n
    \     * INVITE sip:bob@biloxi.com SIP/2.0                       *\n      * Via:
    SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8 *\n      * To: Bob <bob@biloxi.com>
    \                               *\n      * From: Alice <alice@atlanta.com>;tag=1928301774
    \         *\n      * Call-ID: a84b4c76e66710                                 *\n
    \     * CSeq: 314159 INVITE                                     *\n      * Max-Forwards:
    70                                        *\n      * Date: Thu, 21 Feb 2002 13:02:03
    GMT                     *\n      * Contact: <sip:alice@pc33.atlanta.com>                   *\n
    \     *                                                         *\n      * Content-Type:
    application/sdp                           *\n      *                                                         *\n
    \     * v=0                                                     *\n      * o=alice
    53655765 2353687637 IN IP4 pc33.atlanta.com     *\n      * s=Session SDP                                           *\n
    \     * t=0 0                                                   *\n      * c=IN
    IP4 pc33.atlanta.com                               *\n      * m=audio 3456 RTP/AVP
    0 1 3 99                           *\n      * a=rtpmap:0 PCMU/8000                                    *\n
    \     ***********************************************************\n        --boundary42\n
    \       Content-Type: application/pkcs7-signature; name=smime.p7s\n        Content-Transfer-Encoding:
    base64\n        Content-Disposition: attachment; filename=smime.p7s;\n           handling=required\n
    \       ghyHhHUujhJhjH77n8HHGTrfvbnj756tbB9HG4VQpfyF467GhIGfHfYT6\n        4VQpfyF467GhIGfHfYT6jH77n8HHGghyHhHUujhJh756tbB9HGTrfvbnj\n
    \       n8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n        7GhIGfHfYT64VQbnj756\n
    \       --boundary42-\n"
  title: 23.4.3 Tunneling Encryption
- contents:
  - "24 Examples\n   In the following examples, we often omit the message body and
    the\n   corresponding Content-Length and Content-Type header fields for\n   brevity.\n"
  title: 24 Examples
- contents:
  - "24.1 Registration\n   Bob registers on start-up.  The message flow is shown in
    Figure 9.\n   Note that the authentication usually required for registration is
    not\n   shown for simplicity.\n                  biloxi.com         Bob's\n                   registrar
    \      softphone\n                      |                |\n                      |
    \  REGISTER F1  |\n                      |<---------------|\n                      |
    \   200 OK F2   |\n                      |--------------->|\n                  Figure
    9: SIP Registration Example\n   F1 REGISTER Bob -> Registrar\n       REGISTER
    sip:registrar.biloxi.com SIP/2.0\n       Via: SIP/2.0/UDP bobspc.biloxi.com:5060;branch=z9hG4bKnashds7\n
    \      Max-Forwards: 70\n       To: Bob <sip:bob@biloxi.com>\n       From: Bob
    <sip:bob@biloxi.com>;tag=456248\n       Call-ID: 843817637684230@998sdasdh09\n
    \      CSeq: 1826 REGISTER\n       Contact: <sip:bob@192.0.2.4>\n       Expires:
    7200\n       Content-Length: 0\n   The registration expires after two hours.  The
    registrar responds\n   with a 200 OK:\n   F2 200 OK Registrar -> Bob\n        SIP/2.0
    200 OK\n        Via: SIP/2.0/UDP bobspc.biloxi.com:5060;branch=z9hG4bKnashds7\n
    \        ;received=192.0.2.4\n        To: Bob <sip:bob@biloxi.com>;tag=2493k59kd\n
    \       From: Bob <sip:bob@biloxi.com>;tag=456248\n        Call-ID: 843817637684230@998sdasdh09\n
    \       CSeq: 1826 REGISTER\n        Contact: <sip:bob@192.0.2.4>\n        Expires:
    7200\n        Content-Length: 0\n"
  title: 24.1 Registration
- contents:
  - "24.2 Session Setup\n   This example contains the full details of the example
    session setup\n   in Section 4.  The message flow is shown in Figure 1.  Note
    that\n   these flows show the minimum required set of header fields - some\n   other
    header fields such as Allow and Supported would normally be\n   present.\n"
  title: 24.2 Session Setup
- contents:
  - 'F1 INVITE Alice -> atlanta.com proxy

    '
  title: F1 INVITE Alice -> atlanta.com proxy
- contents:
  - 'INVITE sip:bob@biloxi.com SIP/2.0

    '
  title: INVITE sip:bob@biloxi.com SIP/2.0
- contents:
  - 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8

    '
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8'
- contents:
  - 'Max-Forwards: 70

    '
  title: 'Max-Forwards: 70'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>

    '
  title: 'To: Bob <sip:bob@biloxi.com>'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'CSeq: 314159 INVITE

    '
  title: 'CSeq: 314159 INVITE'
- contents:
  - 'Contact: <sip:alice@pc33.atlanta.com>

    '
  title: 'Contact: <sip:alice@pc33.atlanta.com>'
- contents:
  - 'Content-Type: application/sdp

    '
  title: 'Content-Type: application/sdp'
- contents:
  - 'Content-Length: 142

    '
  title: 'Content-Length: 142'
- contents:
  - '(Alice''s SDP not shown)

    '
  title: (Alice's SDP not shown)
- contents:
  - 'F2 100 Trying atlanta.com proxy -> Alice

    '
  title: F2 100 Trying atlanta.com proxy -> Alice
- contents:
  - 'SIP/2.0 100 Trying

    '
  title: SIP/2.0 100 Trying
- contents:
  - "Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n ;received=192.0.2.1\n"
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>

    '
  title: 'To: Bob <sip:bob@biloxi.com>'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'CSeq: 314159 INVITE

    '
  title: 'CSeq: 314159 INVITE'
- contents:
  - 'Content-Length: 0

    '
  title: 'Content-Length: 0'
- contents:
  - 'F3 INVITE atlanta.com proxy -> biloxi.com proxy

    '
  title: F3 INVITE atlanta.com proxy -> biloxi.com proxy
- contents:
  - 'INVITE sip:bob@biloxi.com SIP/2.0

    '
  title: INVITE sip:bob@biloxi.com SIP/2.0
- contents:
  - 'Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1

    '
  title: 'Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1'
- contents:
  - "Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n ;received=192.0.2.1\n"
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8'
- contents:
  - 'Max-Forwards: 69

    '
  title: 'Max-Forwards: 69'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>

    '
  title: 'To: Bob <sip:bob@biloxi.com>'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'CSeq: 314159 INVITE

    '
  title: 'CSeq: 314159 INVITE'
- contents:
  - 'Contact: <sip:alice@pc33.atlanta.com>

    '
  title: 'Contact: <sip:alice@pc33.atlanta.com>'
- contents:
  - 'Content-Type: application/sdp

    '
  title: 'Content-Type: application/sdp'
- contents:
  - 'Content-Length: 142

    '
  title: 'Content-Length: 142'
- contents:
  - '(Alice''s SDP not shown)

    '
  title: (Alice's SDP not shown)
- contents:
  - 'F4 100 Trying biloxi.com proxy -> atlanta.com proxy

    '
  title: F4 100 Trying biloxi.com proxy -> atlanta.com proxy
- contents:
  - 'SIP/2.0 100 Trying

    '
  title: SIP/2.0 100 Trying
- contents:
  - "Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1\n ;received=192.0.2.2\n"
  title: 'Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1'
- contents:
  - "Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n ;received=192.0.2.1\n"
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>

    '
  title: 'To: Bob <sip:bob@biloxi.com>'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'CSeq: 314159 INVITE

    '
  title: 'CSeq: 314159 INVITE'
- contents:
  - 'Content-Length: 0

    '
  title: 'Content-Length: 0'
- contents:
  - 'F5 INVITE biloxi.com proxy -> Bob

    '
  title: F5 INVITE biloxi.com proxy -> Bob
- contents:
  - 'INVITE sip:bob@192.0.2.4 SIP/2.0

    '
  title: INVITE sip:bob@192.0.2.4 SIP/2.0
- contents:
  - 'Via: SIP/2.0/UDP server10.biloxi.com;branch=z9hG4bK4b43c2ff8.1

    '
  title: 'Via: SIP/2.0/UDP server10.biloxi.com;branch=z9hG4bK4b43c2ff8.1'
- contents:
  - "Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1\n ;received=192.0.2.2\n"
  title: 'Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1'
- contents:
  - "Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n ;received=192.0.2.1\n"
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8'
- contents:
  - 'Max-Forwards: 68

    '
  title: 'Max-Forwards: 68'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>

    '
  title: 'To: Bob <sip:bob@biloxi.com>'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'CSeq: 314159 INVITE

    '
  title: 'CSeq: 314159 INVITE'
- contents:
  - 'Contact: <sip:alice@pc33.atlanta.com>

    '
  title: 'Contact: <sip:alice@pc33.atlanta.com>'
- contents:
  - 'Content-Type: application/sdp

    '
  title: 'Content-Type: application/sdp'
- contents:
  - 'Content-Length: 142

    '
  title: 'Content-Length: 142'
- contents:
  - '(Alice''s SDP not shown)

    '
  title: (Alice's SDP not shown)
- contents:
  - 'F6 180 Ringing Bob -> biloxi.com proxy

    '
  title: F6 180 Ringing Bob -> biloxi.com proxy
- contents:
  - 'SIP/2.0 180 Ringing

    '
  title: SIP/2.0 180 Ringing
- contents:
  - "Via: SIP/2.0/UDP server10.biloxi.com;branch=z9hG4bK4b43c2ff8.1\n ;received=192.0.2.3\n"
  title: 'Via: SIP/2.0/UDP server10.biloxi.com;branch=z9hG4bK4b43c2ff8.1'
- contents:
  - "Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1\n ;received=192.0.2.2\n"
  title: 'Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1'
- contents:
  - "Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n ;received=192.0.2.1\n"
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf

    '
  title: 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'Contact: <sip:bob@192.0.2.4>

    '
  title: 'Contact: <sip:bob@192.0.2.4>'
- contents:
  - 'CSeq: 314159 INVITE

    '
  title: 'CSeq: 314159 INVITE'
- contents:
  - 'Content-Length: 0

    '
  title: 'Content-Length: 0'
- contents:
  - 'F7 180 Ringing biloxi.com proxy -> atlanta.com proxy

    '
  title: F7 180 Ringing biloxi.com proxy -> atlanta.com proxy
- contents:
  - 'SIP/2.0 180 Ringing

    '
  title: SIP/2.0 180 Ringing
- contents:
  - "Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1\n ;received=192.0.2.2\n"
  title: 'Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1'
- contents:
  - "Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n ;received=192.0.2.1\n"
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf

    '
  title: 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'Contact: <sip:bob@192.0.2.4>

    '
  title: 'Contact: <sip:bob@192.0.2.4>'
- contents:
  - 'CSeq: 314159 INVITE

    '
  title: 'CSeq: 314159 INVITE'
- contents:
  - 'Content-Length: 0

    '
  title: 'Content-Length: 0'
- contents:
  - 'F8 180 Ringing atlanta.com proxy -> Alice

    '
  title: F8 180 Ringing atlanta.com proxy -> Alice
- contents:
  - 'SIP/2.0 180 Ringing

    '
  title: SIP/2.0 180 Ringing
- contents:
  - "Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n ;received=192.0.2.1\n"
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf

    '
  title: 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'Contact: <sip:bob@192.0.2.4>

    '
  title: 'Contact: <sip:bob@192.0.2.4>'
- contents:
  - 'CSeq: 314159 INVITE

    '
  title: 'CSeq: 314159 INVITE'
- contents:
  - 'Content-Length: 0

    '
  title: 'Content-Length: 0'
- contents:
  - 'F9 200 OK Bob -> biloxi.com proxy

    '
  title: F9 200 OK Bob -> biloxi.com proxy
- contents:
  - 'SIP/2.0 200 OK

    '
  title: SIP/2.0 200 OK
- contents:
  - "Via: SIP/2.0/UDP server10.biloxi.com;branch=z9hG4bK4b43c2ff8.1\n ;received=192.0.2.3\n"
  title: 'Via: SIP/2.0/UDP server10.biloxi.com;branch=z9hG4bK4b43c2ff8.1'
- contents:
  - "Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1\n ;received=192.0.2.2\n"
  title: 'Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1'
- contents:
  - "Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n ;received=192.0.2.1\n"
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf

    '
  title: 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'CSeq: 314159 INVITE

    '
  title: 'CSeq: 314159 INVITE'
- contents:
  - 'Contact: <sip:bob@192.0.2.4>

    '
  title: 'Contact: <sip:bob@192.0.2.4>'
- contents:
  - 'Content-Type: application/sdp

    '
  title: 'Content-Type: application/sdp'
- contents:
  - 'Content-Length: 131

    '
  title: 'Content-Length: 131'
- contents:
  - '(Bob''s SDP not shown)

    '
  title: (Bob's SDP not shown)
- contents:
  - 'F10 200 OK biloxi.com proxy -> atlanta.com proxy

    '
  title: F10 200 OK biloxi.com proxy -> atlanta.com proxy
- contents:
  - 'SIP/2.0 200 OK

    '
  title: SIP/2.0 200 OK
- contents:
  - "Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1\n ;received=192.0.2.2\n"
  title: 'Via: SIP/2.0/UDP bigbox3.site3.atlanta.com;branch=z9hG4bK77ef4c2312983.1'
- contents:
  - "Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n ;received=192.0.2.1\n"
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf

    '
  title: 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'CSeq: 314159 INVITE

    '
  title: 'CSeq: 314159 INVITE'
- contents:
  - 'Contact: <sip:bob@192.0.2.4>

    '
  title: 'Contact: <sip:bob@192.0.2.4>'
- contents:
  - 'Content-Type: application/sdp

    '
  title: 'Content-Type: application/sdp'
- contents:
  - 'Content-Length: 131

    '
  title: 'Content-Length: 131'
- contents:
  - '(Bob''s SDP not shown)

    '
  title: (Bob's SDP not shown)
- contents:
  - 'F11 200 OK atlanta.com proxy -> Alice

    '
  title: F11 200 OK atlanta.com proxy -> Alice
- contents:
  - 'SIP/2.0 200 OK

    '
  title: SIP/2.0 200 OK
- contents:
  - "Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8\n ;received=192.0.2.1\n"
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds8'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf

    '
  title: 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'CSeq: 314159 INVITE

    '
  title: 'CSeq: 314159 INVITE'
- contents:
  - 'Contact: <sip:bob@192.0.2.4>

    '
  title: 'Contact: <sip:bob@192.0.2.4>'
- contents:
  - 'Content-Type: application/sdp

    '
  title: 'Content-Type: application/sdp'
- contents:
  - 'Content-Length: 131

    '
  title: 'Content-Length: 131'
- contents:
  - '(Bob''s SDP not shown)

    '
  title: (Bob's SDP not shown)
- contents:
  - 'F12 ACK Alice -> Bob

    '
  title: F12 ACK Alice -> Bob
- contents:
  - 'ACK sip:bob@192.0.2.4 SIP/2.0

    '
  title: ACK sip:bob@192.0.2.4 SIP/2.0
- contents:
  - 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds9

    '
  title: 'Via: SIP/2.0/UDP pc33.atlanta.com;branch=z9hG4bKnashds9'
- contents:
  - 'Max-Forwards: 70

    '
  title: 'Max-Forwards: 70'
- contents:
  - 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf

    '
  title: 'To: Bob <sip:bob@biloxi.com>;tag=a6c85cf'
- contents:
  - 'From: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'From: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'CSeq: 314159 ACK

    '
  title: 'CSeq: 314159 ACK'
- contents:
  - "Content-Length: 0\n   The media session between Alice and Bob is now established.\n
    \  Bob hangs up first.  Note that Bob's SIP phone maintains its own CSeq\n   numbering
    space, which, in this example, begins with 231.  Since Bob\n   is making the request,
    the To and From URIs and tags have been\n   swapped.\n"
  title: 'Content-Length: 0'
- contents:
  - 'F13 BYE Bob -> Alice

    '
  title: F13 BYE Bob -> Alice
- contents:
  - 'BYE sip:alice@pc33.atlanta.com SIP/2.0

    '
  title: BYE sip:alice@pc33.atlanta.com SIP/2.0
- contents:
  - 'Via: SIP/2.0/UDP 192.0.2.4;branch=z9hG4bKnashds10

    '
  title: 'Via: SIP/2.0/UDP 192.0.2.4;branch=z9hG4bKnashds10'
- contents:
  - 'Max-Forwards: 70

    '
  title: 'Max-Forwards: 70'
- contents:
  - 'From: Bob <sip:bob@biloxi.com>;tag=a6c85cf

    '
  title: 'From: Bob <sip:bob@biloxi.com>;tag=a6c85cf'
- contents:
  - 'To: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'To: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'CSeq: 231 BYE

    '
  title: 'CSeq: 231 BYE'
- contents:
  - 'Content-Length: 0

    '
  title: 'Content-Length: 0'
- contents:
  - 'F14 200 OK Alice -> Bob

    '
  title: F14 200 OK Alice -> Bob
- contents:
  - 'SIP/2.0 200 OK

    '
  title: SIP/2.0 200 OK
- contents:
  - 'Via: SIP/2.0/UDP 192.0.2.4;branch=z9hG4bKnashds10

    '
  title: 'Via: SIP/2.0/UDP 192.0.2.4;branch=z9hG4bKnashds10'
- contents:
  - 'From: Bob <sip:bob@biloxi.com>;tag=a6c85cf

    '
  title: 'From: Bob <sip:bob@biloxi.com>;tag=a6c85cf'
- contents:
  - 'To: Alice <sip:alice@atlanta.com>;tag=1928301774

    '
  title: 'To: Alice <sip:alice@atlanta.com>;tag=1928301774'
- contents:
  - 'Call-ID: a84b4c76e66710

    '
  title: 'Call-ID: a84b4c76e66710'
- contents:
  - 'CSeq: 231 BYE

    '
  title: 'CSeq: 231 BYE'
- contents:
  - "Content-Length: 0\n   The SIP Call Flows document [40] contains further examples
    of SIP\n   messages.\n"
  title: 'Content-Length: 0'
- contents:
  - "25  Augmented BNF for the SIP Protocol\n   All of the mechanisms specified in
    this document are described in\n   both prose and an augmented Backus-Naur Form
    (BNF) defined in RFC\n   2234 [10].  Section 6.1 of RFC 2234 defines a set of
    core rules that\n   are used by this specification, and not repeated here.  Implementers\n
    \  need to be familiar with the notation and content of RFC 2234 in\n   order
    to understand this specification.  Certain basic rules are in\n   uppercase, such
    as SP, LWS, HTAB, CRLF, DIGIT, ALPHA, etc.  Angle\n   brackets are used within
    definitions to clarify the use of rule\n   names.\n   The use of square brackets
    is redundant syntactically.  It is used as\n   a semantic hint that the specific
    parameter is optional to use.\n"
  title: 25  Augmented BNF for the SIP Protocol
- contents:
  - "25.1 Basic Rules\n   The following rules are used throughout this specification
    to\n   describe basic parsing constructs.  The US-ASCII coded character set\n
    \  is defined by ANSI X3.4-1986.\n      alphanum  =  ALPHA / DIGIT\n   Several
    rules are incorporated from RFC 2396 [5] but are updated to\n   make them compliant
    with RFC 2234 [10].  These include:\n      reserved    =  \";\" / \"/\" / \"?\"
    / \":\" / \"@\" / \"&\" / \"=\" / \"+\"\n                     / \"$\" / \",\"\n
    \     unreserved  =  alphanum / mark\n      mark        =  \"-\" / \"_\" / \".\"
    / \"!\" / \"~\" / \"*\" / \"'\"\n                     / \"(\" / \")\"\n      escaped
    \    =  \"%\" HEXDIG HEXDIG\n   SIP header field values can be folded onto multiple
    lines if the\n   continuation line begins with a space or horizontal tab.  All
    linear\n   white space, including folding, has the same semantics as SP.  A\n
    \  recipient MAY replace any linear white space with a single SP before\n   interpreting
    the field value or forwarding the message downstream.\n   This is intended to
    behave exactly as HTTP/1.1 as described in RFC\n   2616 [8].  The SWS construct
    is used when linear white space is\n   optional, generally between tokens and
    separators.\n      LWS  =  [*WSP CRLF] 1*WSP ; linear whitespace\n      SWS  =
    \ [LWS] ; sep whitespace\n   To separate the header name from the rest of value,
    a colon is used,\n   which, by the above rule, allows whitespace before, but no
    line\n   break, and whitespace after, including a linebreak.  The HCOLON\n   defines
    this construct.\n      HCOLON  =  *( SP / HTAB ) \":\" SWS\n   The TEXT-UTF8 rule
    is only used for descriptive field contents and\n   values that are not intended
    to be interpreted by the message parser.\n   Words of *TEXT-UTF8 contain characters
    from the UTF-8 charset (RFC\n   2279 [7]).  The TEXT-UTF8-TRIM rule is used for
    descriptive field\n   contents that are n t quoted strings, where leading and
    trailing LWS\n   is not meaningful.  In this regard, SIP differs from HTTP, which
    uses\n   the ISO 8859-1 character set.\n      TEXT-UTF8-TRIM  =  1*TEXT-UTF8char
    *(*LWS TEXT-UTF8char)\n      TEXT-UTF8char   =  %x21-7E / UTF8-NONASCII\n      UTF8-NONASCII
    \  =  %xC0-DF 1UTF8-CONT\n                      /  %xE0-EF 2UTF8-CONT\n                      /
    \ %xF0-F7 3UTF8-CONT\n                      /  %xF8-Fb 4UTF8-CONT\n                      /
    \ %xFC-FD 5UTF8-CONT\n      UTF8-CONT       =  %x80-BF\n   A CRLF is allowed in
    the definition of TEXT-UTF8-TRIM only as part of\n   a header field continuation.
    \ It is expected that the folding LWS\n   will be replaced with a single SP before
    interpretation of the TEXT-\n   UTF8-TRIM value.\n   Hexadecimal numeric characters
    are used in several protocol elements.\n   Some elements (authentication) force
    hex alphas to be lower case.\n      LHEX  =  DIGIT / %x61-66 ;lowercase a-f\n
    \  Many SIP header field values consist of words separated by LWS or\n   special
    characters.  Unless otherwise stated, tokens are case-\n   insensitive.  These
    special characters MUST be in a quoted string to\n   be used within a parameter
    value.  The word construct is used in\n   Call-ID to allow most separators to
    be used.\n      token       =  1*(alphanum / \"-\" / \".\" / \"!\" / \"%\" / \"*\"\n
    \                    / \"_\" / \"+\" / \"`\" / \"'\" / \"~\" )\n      separators
    \ =  \"(\" / \")\" / \"<\" / \">\" / \"@\" /\n                     \",\" / \";\"
    / \":\" / \"\\\" / DQUOTE /\n                     \"/\" / \"[\" / \"]\" / \"?\"
    / \"=\" /\n                     \"{\" / \"}\" / SP / HTAB\n      word        =
    \ 1*(alphanum / \"-\" / \".\" / \"!\" / \"%\" / \"*\" /\n                     \"_\"
    / \"+\" / \"`\" / \"'\" / \"~\" /\n                     \"(\" / \")\" / \"<\"
    / \">\" /\n                     \":\" / \"\\\" / DQUOTE /\n                     \"/\"
    / \"[\" / \"]\" / \"?\" /\n                     \"{\" / \"}\" )\n   When tokens
    are used or separators are used between elements,\n   whitespace is often allowed
    before or after these characters:\n      STAR    =  SWS \"*\" SWS ; asterisk\n
    \     SLASH   =  SWS \"/\" SWS ; slash\n      EQUAL   =  SWS \"=\" SWS ; equal\n
    \     LPAREN  =  SWS \"(\" SWS ; left parenthesis\n      RPAREN  =  SWS \")\"
    SWS ; right parenthesis\n      RAQUOT  =  \">\" SWS ; right angle quote\n      LAQUOT
    \ =  SWS \"<\"; left angle quote\n      COMMA   =  SWS \",\" SWS ; comma\n      SEMI
    \   =  SWS \";\" SWS ; semicolon\n      COLON   =  SWS \":\" SWS ; colon\n      LDQUOT
    \ =  SWS DQUOTE; open double quotation mark\n      RDQUOT  =  DQUOTE SWS ; close
    double quotation mark\n   Comments can be included in some SIP header fields by
    surrounding the\n   comment text with parentheses.  Comments are only allowed
    in fields\n   containing \"comment\" as part of their field value definition.
    \ In all\n   other fields, parentheses are considered part of the field value.\n
    \     comment  =  LPAREN *(ctext / quoted-pair / comment) RPAREN\n      ctext
    \   =  %x21-27 / %x2A-5B / %x5D-7E / UTF8-NONASCII\n                  / LWS\n
    \  ctext includes all chars except left and right parens and backslash.\n   A
    string of text is parsed as a single word if it is quoted using\n   double-quote
    marks.  In quoted strings, quotation marks (\") and\n   backslashes (\\) need
    to be escaped.\n      quoted-string  =  SWS DQUOTE *(qdtext / quoted-pair ) DQUOTE\n
    \     qdtext         =  LWS / %x21 / %x23-5B / %x5D-7E\n                        /
    UTF8-NONASCII\n   The backslash character (\"\\\") MAY be used as a single-character\n
    \  quoting mechanism only within quoted-string and comment constructs.\n   Unlike
    HTTP/1.1, the characters CR and LF cannot be escaped by this\n   mechanism to
    avoid conflict with line folding and header separation.\n"
  title: 25.1 Basic Rules
- contents:
  - "quoted-pair  =  \"\\\" (%x00-09 / %x0B-0C\n                / %x0E-7F)\n"
  title: quoted-pair  =  "\" (%x00-09 / %x0B-0C
- contents:
  - "SIP-URI          =  \"sip:\" [ userinfo ] hostport\n                    uri-parameters
    [ headers ]\n"
  title: SIP-URI          =  "sip:" [ userinfo ] hostport
- contents:
  - "SIPS-URI         =  \"sips:\" [ userinfo ] hostport\n                    uri-parameters
    [ headers ]\n"
  title: SIPS-URI         =  "sips:" [ userinfo ] hostport
- contents:
  - 'userinfo         =  ( user / telephone-subscriber ) [ ":" password ] "@"

    '
  title: userinfo         =  ( user / telephone-subscriber ) [ ":" password ] "@"
- contents:
  - 'user             =  1*( unreserved / escaped / user-unreserved )

    '
  title: user             =  1*( unreserved / escaped / user-unreserved )
- contents:
  - 'user-unreserved  =  "&" / "=" / "+" / "$" / "," / ";" / "?" / "/"

    '
  title: user-unreserved  =  "&" / "=" / "+" / "$" / "," / ";" / "?" / "/"
- contents:
  - "password         =  *( unreserved / escaped /\n                    \"&\" / \"=\"
    / \"+\" / \"$\" / \",\" )\n"
  title: password         =  *( unreserved / escaped /
- contents:
  - 'hostport         =  host [ ":" port ]

    '
  title: hostport         =  host [ ":" port ]
- contents:
  - 'host             =  hostname / IPv4address / IPv6reference

    '
  title: host             =  hostname / IPv4address / IPv6reference
- contents:
  - 'hostname         =  *( domainlabel "." ) toplabel [ "." ]

    '
  title: hostname         =  *( domainlabel "." ) toplabel [ "." ]
- contents:
  - "domainlabel      =  alphanum\n                    / alphanum *( alphanum / \"-\"
    ) alphanum\n"
  title: domainlabel      =  alphanum
- contents:
  - 'toplabel         =  ALPHA / ALPHA *( alphanum / "-" ) alphanum

    '
  title: toplabel         =  ALPHA / ALPHA *( alphanum / "-" ) alphanum
- contents:
  - 'IPv4address    =  1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT

    '
  title: IPv4address    =  1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT
- contents:
  - 'IPv6reference  =  "[" IPv6address "]"

    '
  title: IPv6reference  =  "[" IPv6address "]"
- contents:
  - 'IPv6address    =  hexpart [ ":" IPv4address ]

    '
  title: IPv6address    =  hexpart [ ":" IPv4address ]
- contents:
  - 'hexpart        =  hexseq / hexseq "::" [ hexseq ] / "::" [ hexseq ]

    '
  title: hexpart        =  hexseq / hexseq "::" [ hexseq ] / "::" [ hexseq ]
- contents:
  - 'hexseq         =  hex4 *( ":" hex4)

    '
  title: hexseq         =  hex4 *( ":" hex4)
- contents:
  - 'hex4           =  1*4HEXDIG

    '
  title: hex4           =  1*4HEXDIG
- contents:
  - "port           =  1*DIGIT\n   The BNF for telephone-subscriber can be found in
    RFC 2806 [9].  Note,\n   however, that any characters allowed there that are not
    allowed in\n   the user part of the SIP URI MUST be escaped.\n"
  title: port           =  1*DIGIT
- contents:
  - 'uri-parameters    =  *( ";" uri-parameter)

    '
  title: uri-parameters    =  *( ";" uri-parameter)
- contents:
  - "uri-parameter     =  transport-param / user-param / method-param\n                     /
    ttl-param / maddr-param / lr-param / other-param\n"
  title: uri-parameter     =  transport-param / user-param / method-param
- contents:
  - "transport-param   =  \"transport=\"\n                     ( \"udp\" / \"tcp\"
    / \"sctp\" / \"tls\"\n                     / other-transport)\n"
  title: transport-param   =  "transport="
- contents:
  - 'other-transport   =  token

    '
  title: other-transport   =  token
- contents:
  - 'user-param        =  "user=" ( "phone" / "ip" / other-user)

    '
  title: user-param        =  "user=" ( "phone" / "ip" / other-user)
- contents:
  - 'other-user        =  token

    '
  title: other-user        =  token
- contents:
  - 'method-param      =  "method=" Method

    '
  title: method-param      =  "method=" Method
- contents:
  - 'ttl-param         =  "ttl=" ttl

    '
  title: ttl-param         =  "ttl=" ttl
- contents:
  - 'maddr-param       =  "maddr=" host

    '
  title: maddr-param       =  "maddr=" host
- contents:
  - 'lr-param          =  "lr"

    '
  title: lr-param          =  "lr"
- contents:
  - 'other-param       =  pname [ "=" pvalue ]

    '
  title: other-param       =  pname [ "=" pvalue ]
- contents:
  - 'pname             =  1*paramchar

    '
  title: pname             =  1*paramchar
- contents:
  - 'pvalue            =  1*paramchar

    '
  title: pvalue            =  1*paramchar
- contents:
  - 'paramchar         =  param-unreserved / unreserved / escaped

    '
  title: paramchar         =  param-unreserved / unreserved / escaped
- contents:
  - 'param-unreserved  =  "[" / "]" / "/" / ":" / "&" / "+" / "$"

    '
  title: param-unreserved  =  "[" / "]" / "/" / ":" / "&" / "+" / "$"
- contents:
  - 'headers         =  "?" header *( "&" header )

    '
  title: headers         =  "?" header *( "&" header )
- contents:
  - 'header          =  hname "=" hvalue

    '
  title: header          =  hname "=" hvalue
- contents:
  - 'hname           =  1*( hnv-unreserved / unreserved / escaped )

    '
  title: hname           =  1*( hnv-unreserved / unreserved / escaped )
- contents:
  - 'hvalue          =  *( hnv-unreserved / unreserved / escaped )

    '
  title: hvalue          =  *( hnv-unreserved / unreserved / escaped )
- contents:
  - 'hnv-unreserved  =  "[" / "]" / "/" / "?" / ":" / "+" / "$"

    '
  title: hnv-unreserved  =  "[" / "]" / "/" / "?" / ":" / "+" / "$"
- contents:
  - 'SIP-message    =  Request / Response

    '
  title: SIP-message    =  Request / Response
- contents:
  - "Request        =  Request-Line\n                  *( message-header )\n                  CRLF\n
    \                 [ message-body ]\n"
  title: Request        =  Request-Line
- contents:
  - 'Request-Line   =  Method SP Request-URI SP SIP-Version CRLF

    '
  title: Request-Line   =  Method SP Request-URI SP SIP-Version CRLF
- contents:
  - 'Request-URI    =  SIP-URI / SIPS-URI / absoluteURI

    '
  title: Request-URI    =  SIP-URI / SIPS-URI / absoluteURI
- contents:
  - 'absoluteURI    =  scheme ":" ( hier-part / opaque-part )

    '
  title: absoluteURI    =  scheme ":" ( hier-part / opaque-part )
- contents:
  - 'hier-part      =  ( net-path / abs-path ) [ "?" query ]

    '
  title: hier-part      =  ( net-path / abs-path ) [ "?" query ]
- contents:
  - 'net-path       =  "//" authority [ abs-path ]

    '
  title: net-path       =  "//" authority [ abs-path ]
- contents:
  - 'abs-path       =  "/" path-segments

    '
  title: abs-path       =  "/" path-segments
- contents:
  - 'opaque-part    =  uric-no-slash *uric

    '
  title: opaque-part    =  uric-no-slash *uric
- contents:
  - 'uric           =  reserved / unreserved / escaped

    '
  title: uric           =  reserved / unreserved / escaped
- contents:
  - "uric-no-slash  =  unreserved / escaped / \";\" / \"?\" / \":\" / \"@\"\n                  /
    \"&\" / \"=\" / \"+\" / \"$\" / \",\"\n"
  title: uric-no-slash  =  unreserved / escaped / ";" / "?" / ":" / "@"
- contents:
  - 'path-segments  =  segment *( "/" segment )

    '
  title: path-segments  =  segment *( "/" segment )
- contents:
  - 'segment        =  *pchar *( ";" param )

    '
  title: segment        =  *pchar *( ";" param )
- contents:
  - 'param          =  *pchar

    '
  title: param          =  *pchar
- contents:
  - "pchar          =  unreserved / escaped /\n                  \":\" / \"@\" / \"&\"
    / \"=\" / \"+\" / \"$\" / \",\"\n"
  title: pchar          =  unreserved / escaped /
- contents:
  - 'scheme         =  ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )

    '
  title: scheme         =  ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
- contents:
  - 'authority      =  srvr / reg-name

    '
  title: authority      =  srvr / reg-name
- contents:
  - 'srvr           =  [ [ userinfo "@" ] hostport ]

    '
  title: srvr           =  [ [ userinfo "@" ] hostport ]
- contents:
  - "reg-name       =  1*( unreserved / escaped / \"$\" / \",\"\n                  /
    \";\" / \":\" / \"@\" / \"&\" / \"=\" / \"+\" )\n"
  title: reg-name       =  1*( unreserved / escaped / "$" / ","
- contents:
  - 'query          =  *uric

    '
  title: query          =  *uric
- contents:
  - 'SIP-Version    =  "SIP" "/" 1*DIGIT "." 1*DIGIT

    '
  title: SIP-Version    =  "SIP" "/" 1*DIGIT "." 1*DIGIT
- contents:
  - "message-header  =  (Accept\n                /  Accept-Encoding\n                /
    \ Accept-Language\n                /  Alert-Info\n                /  Allow\n                /
    \ Authentication-Info\n                /  Authorization\n                /  Call-ID\n
    \               /  Call-Info\n                /  Contact\n                /  Content-Disposition\n
    \               /  Content-Encoding\n                /  Content-Language\n                /
    \ Content-Length\n                /  Content-Type\n                /  CSeq\n                /
    \ Date\n                /  Error-Info\n                /  Expires\n                /
    \ From\n                /  In-Reply-To\n                /  Max-Forwards\n                /
    \ MIME-Version\n                /  Min-Expires\n                /  Organization\n
    \               /  Priority\n                /  Proxy-Authenticate\n                /
    \ Proxy-Authorization\n                /  Proxy-Require\n                /  Record-Route\n
    \               /  Reply-To\n                /  Require\n                /  Retry-After\n
    \               /  Route\n                /  Server\n                /  Subject\n
    \               /  Supported\n                /  Timestamp\n                /
    \ To\n                /  Unsupported\n                /  User-Agent\n                /
    \ Via\n                /  Warning\n                /  WWW-Authenticate\n                /
    \ extension-header) CRLF\n"
  title: message-header  =  (Accept
- contents:
  - 'INVITEm           =  %x49.4E.56.49.54.45 ; INVITE in caps

    '
  title: INVITEm           =  %x49.4E.56.49.54.45 ; INVITE in caps
- contents:
  - 'ACKm              =  %x41.43.4B ; ACK in caps

    '
  title: ACKm              =  %x41.43.4B ; ACK in caps
- contents:
  - 'OPTIONSm          =  %x4F.50.54.49.4F.4E.53 ; OPTIONS in caps

    '
  title: OPTIONSm          =  %x4F.50.54.49.4F.4E.53 ; OPTIONS in caps
- contents:
  - 'BYEm              =  %x42.59.45 ; BYE in caps

    '
  title: BYEm              =  %x42.59.45 ; BYE in caps
- contents:
  - 'CANCELm           =  %x43.41.4E.43.45.4C ; CANCEL in caps

    '
  title: CANCELm           =  %x43.41.4E.43.45.4C ; CANCEL in caps
- contents:
  - 'REGISTERm         =  %x52.45.47.49.53.54.45.52 ; REGISTER in caps

    '
  title: REGISTERm         =  %x52.45.47.49.53.54.45.52 ; REGISTER in caps
- contents:
  - "Method            =  INVITEm / ACKm / OPTIONSm / BYEm\n                     /
    CANCELm / REGISTERm\n                     / extension-method\n"
  title: Method            =  INVITEm / ACKm / OPTIONSm / BYEm
- contents:
  - 'extension-method  =  token

    '
  title: extension-method  =  token
- contents:
  - "Response          =  Status-Line\n                     *( message-header )\n
    \                    CRLF\n                     [ message-body ]\n"
  title: Response          =  Status-Line
- contents:
  - 'Status-Line     =  SIP-Version SP Status-Code SP Reason-Phrase CRLF

    '
  title: Status-Line     =  SIP-Version SP Status-Code SP Reason-Phrase CRLF
- contents:
  - "Status-Code     =  Informational\n               /   Redirection\n               /
    \  Success\n               /   Client-Error\n               /   Server-Error\n
    \              /   Global-Failure\n               /   extension-code\n"
  title: Status-Code     =  Informational
- contents:
  - 'extension-code  =  3DIGIT

    '
  title: extension-code  =  3DIGIT
- contents:
  - "Reason-Phrase   =  *(reserved / unreserved / escaped\n                   / UTF8-NONASCII
    / UTF8-CONT / SP / HTAB)\n"
  title: Reason-Phrase   =  *(reserved / unreserved / escaped
- contents:
  - "Informational  =  \"100\"  ;  Trying\n              /   \"180\"  ;  Ringing\n
    \             /   \"181\"  ;  Call Is Being Forwarded\n              /   \"182\"
    \ ;  Queued\n              /   \"183\"  ;  Session Progress\n"
  title: Informational  =  "100"  ;  Trying
- contents:
  - 'Success  =  "200"  ;  OK

    '
  title: Success  =  "200"  ;  OK
- contents:
  - "Redirection  =  \"300\"  ;  Multiple Choices\n            /   \"301\"  ;  Moved
    Permanently\n            /   \"302\"  ;  Moved Temporarily\n            /   \"305\"
    \ ;  Use Proxy\n            /   \"380\"  ;  Alternative Service\n"
  title: Redirection  =  "300"  ;  Multiple Choices
- contents:
  - "Client-Error  =  \"400\"  ;  Bad Request\n             /   \"401\"  ;  Unauthorized\n
    \            /   \"402\"  ;  Payment Required\n             /   \"403\"  ;  Forbidden\n
    \            /   \"404\"  ;  Not Found\n             /   \"405\"  ;  Method Not
    Allowed\n             /   \"406\"  ;  Not Acceptable\n             /   \"407\"
    \ ;  Proxy Authentication Required\n             /   \"408\"  ;  Request Timeout\n
    \            /   \"410\"  ;  Gone\n             /   \"413\"  ;  Request Entity
    Too Large\n             /   \"414\"  ;  Request-URI Too Large\n             /
    \  \"415\"  ;  Unsupported Media Type\n             /   \"416\"  ;  Unsupported
    URI Scheme\n             /   \"420\"  ;  Bad Extension\n             /   \"421\"
    \ ;  Extension Required\n             /   \"423\"  ;  Interval Too Brief\n             /
    \  \"480\"  ;  Temporarily not available\n             /   \"481\"  ;  Call Leg/Transaction
    Does Not Exist\n             /   \"482\"  ;  Loop Detected\n             /   \"483\"
    \ ;  Too Many Hops\n             /   \"484\"  ;  Address Incomplete\n             /
    \  \"485\"  ;  Ambiguous\n             /   \"486\"  ;  Busy Here\n             /
    \  \"487\"  ;  Request Terminated\n             /   \"488\"  ;  Not Acceptable
    Here\n             /   \"491\"  ;  Request Pending\n             /   \"493\"  ;
    \ Undecipherable\n"
  title: Client-Error  =  "400"  ;  Bad Request
- contents:
  - "Server-Error  =  \"500\"  ;  Internal Server Error\n             /   \"501\"
    \ ;  Not Implemented\n             /   \"502\"  ;  Bad Gateway\n             /
    \  \"503\"  ;  Service Unavailable\n             /   \"504\"  ;  Server Time-out\n
    \            /   \"505\"  ;  SIP Version not supported\n             /   \"513\"
    \ ;  Message Too Large\n"
  title: Server-Error  =  "500"  ;  Internal Server Error
- contents:
  - "Global-Failure  =  \"600\"  ;  Busy Everywhere\n               /   \"603\"  ;
    \ Decline\n               /   \"604\"  ;  Does not exist anywhere\n               /
    \  \"606\"  ;  Not Acceptable\n"
  title: Global-Failure  =  "600"  ;  Busy Everywhere
- contents:
  - "Accept         =  \"Accept\" HCOLON\n                   [ accept-range *(COMMA
    accept-range) ]\n"
  title: Accept         =  "Accept" HCOLON
- contents:
  - 'accept-range   =  media-range *(SEMI accept-param)

    '
  title: accept-range   =  media-range *(SEMI accept-param)
- contents:
  - "media-range    =  ( \"*/*\"\n                  / ( m-type SLASH \"*\" )\n                  /
    ( m-type SLASH m-subtype )\n                  ) *( SEMI m-parameter )\n"
  title: media-range    =  ( "*/*"
- contents:
  - 'accept-param   =  ("q" EQUAL qvalue) / generic-param

    '
  title: accept-param   =  ("q" EQUAL qvalue) / generic-param
- contents:
  - "qvalue         =  ( \"0\" [ \".\" 0*3DIGIT ] )\n                  / ( \"1\" [
    \".\" 0*3(\"0\") ] )\n"
  title: qvalue         =  ( "0" [ "." 0*3DIGIT ] )
- contents:
  - 'generic-param  =  token [ EQUAL gen-value ]

    '
  title: generic-param  =  token [ EQUAL gen-value ]
- contents:
  - 'gen-value      =  token / host / quoted-string

    '
  title: gen-value      =  token / host / quoted-string
- contents:
  - "Accept-Encoding  =  \"Accept-Encoding\" HCOLON\n                     [ encoding
    *(COMMA encoding) ]\n"
  title: Accept-Encoding  =  "Accept-Encoding" HCOLON
- contents:
  - 'encoding         =  codings *(SEMI accept-param)

    '
  title: encoding         =  codings *(SEMI accept-param)
- contents:
  - 'codings          =  content-coding / "*"

    '
  title: codings          =  content-coding / "*"
- contents:
  - 'content-coding   =  token

    '
  title: content-coding   =  token
- contents:
  - "Accept-Language  =  \"Accept-Language\" HCOLON\n                     [ language
    *(COMMA language) ]\n"
  title: Accept-Language  =  "Accept-Language" HCOLON
- contents:
  - 'language         =  language-range *(SEMI accept-param)

    '
  title: language         =  language-range *(SEMI accept-param)
- contents:
  - 'language-range   =  ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )

    '
  title: language-range   =  ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )
- contents:
  - 'Alert-Info   =  "Alert-Info" HCOLON alert-param *(COMMA alert-param)

    '
  title: Alert-Info   =  "Alert-Info" HCOLON alert-param *(COMMA alert-param)
- contents:
  - 'alert-param  =  LAQUOT absoluteURI RAQUOT *( SEMI generic-param )

    '
  title: alert-param  =  LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
- contents:
  - 'Allow  =  "Allow" HCOLON [Method *(COMMA Method)]

    '
  title: Allow  =  "Allow" HCOLON [Method *(COMMA Method)]
- contents:
  - 'Authorization     =  "Authorization" HCOLON credentials

    '
  title: Authorization     =  "Authorization" HCOLON credentials
- contents:
  - "credentials       =  (\"Digest\" LWS digest-response)\n                     /
    other-response\n"
  title: credentials       =  ("Digest" LWS digest-response)
- contents:
  - 'digest-response   =  dig-resp *(COMMA dig-resp)

    '
  title: digest-response   =  dig-resp *(COMMA dig-resp)
- contents:
  - "dig-resp          =  username / realm / nonce / digest-uri\n                      /
    dresponse / algorithm / cnonce\n                      / opaque / message-qop\n
    \                     / nonce-count / auth-param\n"
  title: dig-resp          =  username / realm / nonce / digest-uri
- contents:
  - 'username          =  "username" EQUAL username-value

    '
  title: username          =  "username" EQUAL username-value
- contents:
  - 'username-value    =  quoted-string

    '
  title: username-value    =  quoted-string
- contents:
  - 'digest-uri        =  "uri" EQUAL LDQUOT digest-uri-value RDQUOT

    '
  title: digest-uri        =  "uri" EQUAL LDQUOT digest-uri-value RDQUOT
- contents:
  - "digest-uri-value  =  rquest-uri ; Equal to request-uri as specified\n                     by
    HTTP/1.1\n"
  title: digest-uri-value  =  rquest-uri ; Equal to request-uri as specified
- contents:
  - 'message-qop       =  "qop" EQUAL qop-value

    '
  title: message-qop       =  "qop" EQUAL qop-value
- contents:
  - 'cnonce            =  "cnonce" EQUAL cnonce-value

    '
  title: cnonce            =  "cnonce" EQUAL cnonce-value
- contents:
  - 'cnonce-value      =  nonce-value

    '
  title: cnonce-value      =  nonce-value
- contents:
  - 'nonce-count       =  "nc" EQUAL nc-value

    '
  title: nonce-count       =  "nc" EQUAL nc-value
- contents:
  - 'nc-value          =  8LHEX

    '
  title: nc-value          =  8LHEX
- contents:
  - 'dresponse         =  "response" EQUAL request-digest

    '
  title: dresponse         =  "response" EQUAL request-digest
- contents:
  - 'request-digest    =  LDQUOT 32LHEX RDQUOT

    '
  title: request-digest    =  LDQUOT 32LHEX RDQUOT
- contents:
  - "auth-param        =  auth-param-name EQUAL\n                     ( token / quoted-string
    )\n"
  title: auth-param        =  auth-param-name EQUAL
- contents:
  - 'auth-param-name   =  token

    '
  title: auth-param-name   =  token
- contents:
  - "other-response    =  auth-scheme LWS auth-param\n                     *(COMMA
    auth-param)\n"
  title: other-response    =  auth-scheme LWS auth-param
- contents:
  - 'auth-scheme       =  token

    '
  title: auth-scheme       =  token
- contents:
  - "Authentication-Info  =  \"Authentication-Info\" HCOLON ainfo\n                        *(COMMA
    ainfo)\n"
  title: Authentication-Info  =  "Authentication-Info" HCOLON ainfo
- contents:
  - "ainfo                =  nextnonce / message-qop\n                         / response-auth
    / cnonce\n                         / nonce-count\n"
  title: ainfo                =  nextnonce / message-qop
- contents:
  - 'nextnonce            =  "nextnonce" EQUAL nonce-value

    '
  title: nextnonce            =  "nextnonce" EQUAL nonce-value
- contents:
  - 'response-auth        =  "rspauth" EQUAL response-digest

    '
  title: response-auth        =  "rspauth" EQUAL response-digest
- contents:
  - 'response-digest      =  LDQUOT *LHEX RDQUOT

    '
  title: response-digest      =  LDQUOT *LHEX RDQUOT
- contents:
  - 'Call-ID  =  ( "Call-ID" / "i" ) HCOLON callid

    '
  title: Call-ID  =  ( "Call-ID" / "i" ) HCOLON callid
- contents:
  - 'callid   =  word [ "@" word ]

    '
  title: callid   =  word [ "@" word ]
- contents:
  - 'Call-Info   =  "Call-Info" HCOLON info *(COMMA info)

    '
  title: Call-Info   =  "Call-Info" HCOLON info *(COMMA info)
- contents:
  - 'info        =  LAQUOT absoluteURI RAQUOT *( SEMI info-param)

    '
  title: info        =  LAQUOT absoluteURI RAQUOT *( SEMI info-param)
- contents:
  - "info-param  =  ( \"purpose\" EQUAL ( \"icon\" / \"info\"\n               / \"card\"
    / token ) ) / generic-param\n"
  title: info-param  =  ( "purpose" EQUAL ( "icon" / "info"
- contents:
  - "Contact        =  (\"Contact\" / \"m\" ) HCOLON\n                  ( STAR / (contact-param
    *(COMMA contact-param)))\n"
  title: Contact        =  ("Contact" / "m" ) HCOLON
- contents:
  - 'contact-param  =  (name-addr / addr-spec) *(SEMI contact-params)

    '
  title: contact-param  =  (name-addr / addr-spec) *(SEMI contact-params)
- contents:
  - 'name-addr      =  [ display-name ] LAQUOT addr-spec RAQUOT

    '
  title: name-addr      =  [ display-name ] LAQUOT addr-spec RAQUOT
- contents:
  - 'addr-spec      =  SIP-URI / SIPS-URI / absoluteURI

    '
  title: addr-spec      =  SIP-URI / SIPS-URI / absoluteURI
- contents:
  - 'display-name   =  *(token LWS)/ quoted-string

    '
  title: display-name   =  *(token LWS)/ quoted-string
- contents:
  - "contact-params     =  c-p-q / c-p-expires\n                      / contact-extension\n"
  title: contact-params     =  c-p-q / c-p-expires
- contents:
  - 'c-p-q              =  "q" EQUAL qvalue

    '
  title: c-p-q              =  "q" EQUAL qvalue
- contents:
  - 'c-p-expires        =  "expires" EQUAL delta-seconds

    '
  title: c-p-expires        =  "expires" EQUAL delta-seconds
- contents:
  - 'contact-extension  =  generic-param

    '
  title: contact-extension  =  generic-param
- contents:
  - 'delta-seconds      =  1*DIGIT

    '
  title: delta-seconds      =  1*DIGIT
- contents:
  - "Content-Disposition   =  \"Content-Disposition\" HCOLON\n                         disp-type
    *( SEMI disp-param )\n"
  title: Content-Disposition   =  "Content-Disposition" HCOLON
- contents:
  - "disp-type             =  \"render\" / \"session\" / \"icon\" / \"alert\"\n                         /
    disp-extension-token\n"
  title: disp-type             =  "render" / "session" / "icon" / "alert"
- contents:
  - 'disp-param            =  handling-param / generic-param

    '
  title: disp-param            =  handling-param / generic-param
- contents:
  - "handling-param        =  \"handling\" EQUAL\n                         ( \"optional\"
    / \"required\"\n                         / other-handling )\n"
  title: handling-param        =  "handling" EQUAL
- contents:
  - 'other-handling        =  token

    '
  title: other-handling        =  token
- contents:
  - 'disp-extension-token  =  token

    '
  title: disp-extension-token  =  token
- contents:
  - "Content-Encoding  =  ( \"Content-Encoding\" / \"e\" ) HCOLON\n                     content-coding
    *(COMMA content-coding)\n"
  title: Content-Encoding  =  ( "Content-Encoding" / "e" ) HCOLON
- contents:
  - "Content-Language  =  \"Content-Language\" HCOLON\n                     language-tag
    *(COMMA language-tag)\n"
  title: Content-Language  =  "Content-Language" HCOLON
- contents:
  - 'language-tag      =  primary-tag *( "-" subtag )

    '
  title: language-tag      =  primary-tag *( "-" subtag )
- contents:
  - 'primary-tag       =  1*8ALPHA

    '
  title: primary-tag       =  1*8ALPHA
- contents:
  - 'subtag            =  1*8ALPHA

    '
  title: subtag            =  1*8ALPHA
- contents:
  - 'Content-Length  =  ( "Content-Length" / "l" ) HCOLON 1*DIGIT

    '
  title: Content-Length  =  ( "Content-Length" / "l" ) HCOLON 1*DIGIT
- contents:
  - 'Content-Type     =  ( "Content-Type" / "c" ) HCOLON media-type

    '
  title: Content-Type     =  ( "Content-Type" / "c" ) HCOLON media-type
- contents:
  - 'media-type       =  m-type SLASH m-subtype *(SEMI m-parameter)

    '
  title: media-type       =  m-type SLASH m-subtype *(SEMI m-parameter)
- contents:
  - 'm-type           =  discrete-type / composite-type

    '
  title: m-type           =  discrete-type / composite-type
- contents:
  - "discrete-type    =  \"text\" / \"image\" / \"audio\" / \"video\"\n                    /
    \"application\" / extension-token\n"
  title: discrete-type    =  "text" / "image" / "audio" / "video"
- contents:
  - 'composite-type   =  "message" / "multipart" / extension-token

    '
  title: composite-type   =  "message" / "multipart" / extension-token
- contents:
  - 'extension-token  =  ietf-token / x-token

    '
  title: extension-token  =  ietf-token / x-token
- contents:
  - 'ietf-token       =  token

    '
  title: ietf-token       =  token
- contents:
  - 'x-token          =  "x-" token

    '
  title: x-token          =  "x-" token
- contents:
  - 'm-subtype        =  extension-token / iana-token

    '
  title: m-subtype        =  extension-token / iana-token
- contents:
  - 'iana-token       =  token

    '
  title: iana-token       =  token
- contents:
  - 'm-parameter      =  m-attribute EQUAL m-value

    '
  title: m-parameter      =  m-attribute EQUAL m-value
- contents:
  - 'm-attribute      =  token

    '
  title: m-attribute      =  token
- contents:
  - 'm-value          =  token / quoted-string

    '
  title: m-value          =  token / quoted-string
- contents:
  - 'CSeq  =  "CSeq" HCOLON 1*DIGIT LWS Method

    '
  title: CSeq  =  "CSeq" HCOLON 1*DIGIT LWS Method
- contents:
  - 'Date          =  "Date" HCOLON SIP-date

    '
  title: Date          =  "Date" HCOLON SIP-date
- contents:
  - 'SIP-date      =  rfc1123-date

    '
  title: SIP-date      =  rfc1123-date
- contents:
  - 'rfc1123-date  =  wkday "," SP date1 SP time SP "GMT"

    '
  title: rfc1123-date  =  wkday "," SP date1 SP time SP "GMT"
- contents:
  - "date1         =  2DIGIT SP month SP 4DIGIT\n                 ; day month year
    (e.g., 02 Jun 1982)\n"
  title: date1         =  2DIGIT SP month SP 4DIGIT
- contents:
  - "time          =  2DIGIT \":\" 2DIGIT \":\" 2DIGIT\n                 ; 00:00:00
    - 23:59:59\n"
  title: time          =  2DIGIT ":" 2DIGIT ":" 2DIGIT
- contents:
  - "wkday         =  \"Mon\" / \"Tue\" / \"Wed\"\n                 / \"Thu\" / \"Fri\"
    / \"Sat\" / \"Sun\"\n"
  title: wkday         =  "Mon" / "Tue" / "Wed"
- contents:
  - "month         =  \"Jan\" / \"Feb\" / \"Mar\" / \"Apr\"\n                 / \"May\"
    / \"Jun\" / \"Jul\" / \"Aug\"\n                 / \"Sep\" / \"Oct\" / \"Nov\"
    / \"Dec\"\n"
  title: month         =  "Jan" / "Feb" / "Mar" / "Apr"
- contents:
  - 'Error-Info  =  "Error-Info" HCOLON error-uri *(COMMA error-uri)

    '
  title: Error-Info  =  "Error-Info" HCOLON error-uri *(COMMA error-uri)
- contents:
  - 'error-uri   =  LAQUOT absoluteURI RAQUOT *( SEMI generic-param )

    '
  title: error-uri   =  LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
- contents:
  - 'Expires     =  "Expires" HCOLON delta-seconds

    '
  title: Expires     =  "Expires" HCOLON delta-seconds
- contents:
  - 'From        =  ( "From" / "f" ) HCOLON from-spec

    '
  title: From        =  ( "From" / "f" ) HCOLON from-spec
- contents:
  - "from-spec   =  ( name-addr / addr-spec )\n               *( SEMI from-param )\n"
  title: from-spec   =  ( name-addr / addr-spec )
- contents:
  - 'from-param  =  tag-param / generic-param

    '
  title: from-param  =  tag-param / generic-param
- contents:
  - 'tag-param   =  "tag" EQUAL token

    '
  title: tag-param   =  "tag" EQUAL token
- contents:
  - 'In-Reply-To  =  "In-Reply-To" HCOLON callid *(COMMA callid)

    '
  title: In-Reply-To  =  "In-Reply-To" HCOLON callid *(COMMA callid)
- contents:
  - 'Max-Forwards  =  "Max-Forwards" HCOLON 1*DIGIT

    '
  title: Max-Forwards  =  "Max-Forwards" HCOLON 1*DIGIT
- contents:
  - 'MIME-Version  =  "MIME-Version" HCOLON 1*DIGIT "." 1*DIGIT

    '
  title: MIME-Version  =  "MIME-Version" HCOLON 1*DIGIT "." 1*DIGIT
- contents:
  - 'Min-Expires  =  "Min-Expires" HCOLON delta-seconds

    '
  title: Min-Expires  =  "Min-Expires" HCOLON delta-seconds
- contents:
  - 'Organization  =  "Organization" HCOLON [TEXT-UTF8-TRIM]

    '
  title: Organization  =  "Organization" HCOLON [TEXT-UTF8-TRIM]
- contents:
  - 'Priority        =  "Priority" HCOLON priority-value

    '
  title: Priority        =  "Priority" HCOLON priority-value
- contents:
  - "priority-value  =  \"emergency\" / \"urgent\" / \"normal\"\n                   /
    \"non-urgent\" / other-priority\n"
  title: priority-value  =  "emergency" / "urgent" / "normal"
- contents:
  - 'other-priority  =  token

    '
  title: other-priority  =  token
- contents:
  - 'Proxy-Authenticate  =  "Proxy-Authenticate" HCOLON challenge

    '
  title: Proxy-Authenticate  =  "Proxy-Authenticate" HCOLON challenge
- contents:
  - "challenge           =  (\"Digest\" LWS digest-cln *(COMMA digest-cln))\n                       /
    other-challenge\n"
  title: challenge           =  ("Digest" LWS digest-cln *(COMMA digest-cln))
- contents:
  - "other-challenge     =  auth-scheme LWS auth-param\n                       *(COMMA
    auth-param)\n"
  title: other-challenge     =  auth-scheme LWS auth-param
- contents:
  - "digest-cln          =  realm / domain / nonce\n                        / opaque
    / stale / algorithm\n                        / qop-options / auth-param\n"
  title: digest-cln          =  realm / domain / nonce
- contents:
  - 'realm               =  "realm" EQUAL realm-value

    '
  title: realm               =  "realm" EQUAL realm-value
- contents:
  - 'realm-value         =  quoted-string

    '
  title: realm-value         =  quoted-string
- contents:
  - "domain              =  \"domain\" EQUAL LDQUOT URI\n                       *(
    1*SP URI ) RDQUOT\n"
  title: domain              =  "domain" EQUAL LDQUOT URI
- contents:
  - 'URI                 =  absoluteURI / abs-path

    '
  title: URI                 =  absoluteURI / abs-path
- contents:
  - 'nonce               =  "nonce" EQUAL nonce-value

    '
  title: nonce               =  "nonce" EQUAL nonce-value
- contents:
  - 'nonce-value         =  quoted-string

    '
  title: nonce-value         =  quoted-string
- contents:
  - 'opaque              =  "opaque" EQUAL quoted-string

    '
  title: opaque              =  "opaque" EQUAL quoted-string
- contents:
  - 'stale               =  "stale" EQUAL ( "true" / "false" )

    '
  title: stale               =  "stale" EQUAL ( "true" / "false" )
- contents:
  - "algorithm           =  \"algorithm\" EQUAL ( \"MD5\" / \"MD5-sess\"\n                       /
    token )\n"
  title: algorithm           =  "algorithm" EQUAL ( "MD5" / "MD5-sess"
- contents:
  - "qop-options         =  \"qop\" EQUAL LDQUOT qop-value\n                       *(\",\"
    qop-value) RDQUOT\n"
  title: qop-options         =  "qop" EQUAL LDQUOT qop-value
- contents:
  - 'qop-value           =  "auth" / "auth-int" / token

    '
  title: qop-value           =  "auth" / "auth-int" / token
- contents:
  - 'Proxy-Authorization  =  "Proxy-Authorization" HCOLON credentials

    '
  title: Proxy-Authorization  =  "Proxy-Authorization" HCOLON credentials
- contents:
  - "Proxy-Require  =  \"Proxy-Require\" HCOLON option-tag\n                  *(COMMA
    option-tag)\n"
  title: Proxy-Require  =  "Proxy-Require" HCOLON option-tag
- contents:
  - 'option-tag     =  token

    '
  title: option-tag     =  token
- contents:
  - 'Record-Route  =  "Record-Route" HCOLON rec-route *(COMMA rec-route)

    '
  title: Record-Route  =  "Record-Route" HCOLON rec-route *(COMMA rec-route)
- contents:
  - 'rec-route     =  name-addr *( SEMI rr-param )

    '
  title: rec-route     =  name-addr *( SEMI rr-param )
- contents:
  - 'rr-param      =  generic-param

    '
  title: rr-param      =  generic-param
- contents:
  - 'Reply-To      =  "Reply-To" HCOLON rplyto-spec

    '
  title: Reply-To      =  "Reply-To" HCOLON rplyto-spec
- contents:
  - "rplyto-spec   =  ( name-addr / addr-spec )\n                 *( SEMI rplyto-param
    )\n"
  title: rplyto-spec   =  ( name-addr / addr-spec )
- contents:
  - 'rplyto-param  =  generic-param

    '
  title: rplyto-param  =  generic-param
- contents:
  - 'Require       =  "Require" HCOLON option-tag *(COMMA option-tag)

    '
  title: Require       =  "Require" HCOLON option-tag *(COMMA option-tag)
- contents:
  - "Retry-After  =  \"Retry-After\" HCOLON delta-seconds\n                [ comment
    ] *( SEMI retry-param )\n"
  title: Retry-After  =  "Retry-After" HCOLON delta-seconds
- contents:
  - "retry-param  =  (\"duration\" EQUAL delta-seconds)\n                / generic-param\n"
  title: retry-param  =  ("duration" EQUAL delta-seconds)
- contents:
  - 'Route        =  "Route" HCOLON route-param *(COMMA route-param)

    '
  title: Route        =  "Route" HCOLON route-param *(COMMA route-param)
- contents:
  - 'route-param  =  name-addr *( SEMI rr-param )

    '
  title: route-param  =  name-addr *( SEMI rr-param )
- contents:
  - 'Server           =  "Server" HCOLON server-val *(LWS server-val)

    '
  title: Server           =  "Server" HCOLON server-val *(LWS server-val)
- contents:
  - 'server-val       =  product / comment

    '
  title: server-val       =  product / comment
- contents:
  - 'product          =  token [SLASH product-version]

    '
  title: product          =  token [SLASH product-version]
- contents:
  - 'product-version  =  token

    '
  title: product-version  =  token
- contents:
  - 'Subject  =  ( "Subject" / "s" ) HCOLON [TEXT-UTF8-TRIM]

    '
  title: Subject  =  ( "Subject" / "s" ) HCOLON [TEXT-UTF8-TRIM]
- contents:
  - "Supported  =  ( \"Supported\" / \"k\" ) HCOLON\n              [option-tag *(COMMA
    option-tag)]\n"
  title: Supported  =  ( "Supported" / "k" ) HCOLON
- contents:
  - "Timestamp  =  \"Timestamp\" HCOLON 1*(DIGIT)\n               [ \".\" *(DIGIT)
    ] [ LWS delay ]\n"
  title: Timestamp  =  "Timestamp" HCOLON 1*(DIGIT)
- contents:
  - 'delay      =  *(DIGIT) [ "." *(DIGIT) ]

    '
  title: delay      =  *(DIGIT) [ "." *(DIGIT) ]
- contents:
  - "To        =  ( \"To\" / \"t\" ) HCOLON ( name-addr\n             / addr-spec
    ) *( SEMI to-param )\n"
  title: To        =  ( "To" / "t" ) HCOLON ( name-addr
- contents:
  - 'to-param  =  tag-param / generic-param

    '
  title: to-param  =  tag-param / generic-param
- contents:
  - 'Unsupported  =  "Unsupported" HCOLON option-tag *(COMMA option-tag)

    '
  title: Unsupported  =  "Unsupported" HCOLON option-tag *(COMMA option-tag)
- contents:
  - 'User-Agent  =  "User-Agent" HCOLON server-val *(LWS server-val)

    '
  title: User-Agent  =  "User-Agent" HCOLON server-val *(LWS server-val)
- contents:
  - 'Via               =  ( "Via" / "v" ) HCOLON via-parm *(COMMA via-parm)

    '
  title: Via               =  ( "Via" / "v" ) HCOLON via-parm *(COMMA via-parm)
- contents:
  - 'via-parm          =  sent-protocol LWS sent-by *( SEMI via-params )

    '
  title: via-parm          =  sent-protocol LWS sent-by *( SEMI via-params )
- contents:
  - "via-params        =  via-ttl / via-maddr\n                     / via-received
    / via-branch\n                     / via-extension\n"
  title: via-params        =  via-ttl / via-maddr
- contents:
  - 'via-ttl           =  "ttl" EQUAL ttl

    '
  title: via-ttl           =  "ttl" EQUAL ttl
- contents:
  - 'via-maddr         =  "maddr" EQUAL host

    '
  title: via-maddr         =  "maddr" EQUAL host
- contents:
  - 'via-received      =  "received" EQUAL (IPv4address / IPv6address)

    '
  title: via-received      =  "received" EQUAL (IPv4address / IPv6address)
- contents:
  - 'via-branch        =  "branch" EQUAL token

    '
  title: via-branch        =  "branch" EQUAL token
- contents:
  - 'via-extension     =  generic-param

    '
  title: via-extension     =  generic-param
- contents:
  - "sent-protocol     =  protocol-name SLASH protocol-version\n                     SLASH
    transport\n"
  title: sent-protocol     =  protocol-name SLASH protocol-version
- contents:
  - 'protocol-name     =  "SIP" / token

    '
  title: protocol-name     =  "SIP" / token
- contents:
  - 'protocol-version  =  token

    '
  title: protocol-version  =  token
- contents:
  - "transport         =  \"UDP\" / \"TCP\" / \"TLS\" / \"SCTP\"\n                     /
    other-transport\n"
  title: transport         =  "UDP" / "TCP" / "TLS" / "SCTP"
- contents:
  - 'sent-by           =  host [ COLON port ]

    '
  title: sent-by           =  host [ COLON port ]
- contents:
  - 'ttl               =  1*3DIGIT ; 0 to 255

    '
  title: ttl               =  1*3DIGIT ; 0 to 255
- contents:
  - 'Warning        =  "Warning" HCOLON warning-value *(COMMA warning-value)

    '
  title: Warning        =  "Warning" HCOLON warning-value *(COMMA warning-value)
- contents:
  - 'warning-value  =  warn-code SP warn-agent SP warn-text

    '
  title: warning-value  =  warn-code SP warn-agent SP warn-text
- contents:
  - 'warn-code      =  3DIGIT

    '
  title: warn-code      =  3DIGIT
- contents:
  - "warn-agent     =  hostport / pseudonym\n                  ;  the name or pseudonym
    of the server adding\n                  ;  the Warning header, for use in debugging\n"
  title: warn-agent     =  hostport / pseudonym
- contents:
  - 'warn-text      =  quoted-string

    '
  title: warn-text      =  quoted-string
- contents:
  - 'pseudonym      =  token

    '
  title: pseudonym      =  token
- contents:
  - 'WWW-Authenticate  =  "WWW-Authenticate" HCOLON challenge

    '
  title: WWW-Authenticate  =  "WWW-Authenticate" HCOLON challenge
- contents:
  - 'extension-header  =  header-name HCOLON header-value

    '
  title: extension-header  =  header-name HCOLON header-value
- contents:
  - 'header-name       =  token

    '
  title: header-name       =  token
- contents:
  - 'header-value      =  *(TEXT-UTF8char / UTF8-CONT / LWS)

    '
  title: header-value      =  *(TEXT-UTF8char / UTF8-CONT / LWS)
- contents:
  - 'message-body  =  *OCTET

    '
  title: message-body  =  *OCTET
- contents:
  - "26 Security Considerations: Threat Model and Security Usage\n   Recommendations\n
    \  SIP is not an easy protocol to secure.  Its use of intermediaries,\n   its
    multi-faceted trust relationships, its expected usage between\n   elements with
    no trust at all, and its user-to-user operation make\n   security far from trivial.
    \ Security solutions are needed that are\n   deployable today, without extensive
    coordination, in a wide variety\n   of environments and usages.  In order to meet
    these diverse needs,\n   several distinct mechanisms applicable to different aspects
    and\n   usages of SIP will be required.\n   Note that the security of SIP signaling
    itself has no bearing on the\n   security of protocols used in concert with SIP
    such as RTP, or with\n   the security implications of any specific bodies SIP
    might carry\n   (although MIME security plays a substantial role in securing SIP).\n
    \  Any media associated with a session can be encrypted end-to-end\n   independently
    of any associated SIP signaling.  Media encryption is\n   outside the scope of
    this document.\n   The considerations that follow first examine a set of classic
    threat\n   models that broadly identify the security needs of SIP.  The set of\n
    \  security services required to address these threats is then detailed,\n   followed
    by an explanation of several security mechanisms that can be\n   used to provide
    these services.  Next, the requirements for\n   implementers of SIP are enumerated,
    along with exemplary deployments\n   in which these security mechanisms could
    be used to improve the\n   security of SIP.  Some notes on privacy conclude this
    section.\n"
  title: '26 Security Considerations: Threat Model and Security Usage'
- contents:
  - "26.1 Attacks and Threat Models\n   This section details some threats that should
    be common to most\n   deployments of SIP.  These threats have been chosen specifically
    to\n   illustrate each of the security services that SIP requires.\n   The following
    examples by no means provide an exhaustive list of the\n   threats against SIP;
    rather, these are \"classic\" threats that\n   demonstrate the need for particular
    security services that can\n   potentially prevent whole categories of threats.\n
    \  These attacks assume an environment in which attackers can\n   potentially
    read any packet on the network - it is anticipated that\n   SIP will frequently
    be used on the public Internet.  Attackers on the\n   network may be able to modify
    packets (perhaps at some compromised\n   intermediary).  Attackers may wish to
    steal services, eavesdrop on\n   communications, or disrupt sessions.\n"
  title: 26.1 Attacks and Threat Models
- contents:
  - "26.1.1 Registration Hijacking\n   The SIP registration mechanism allows a user
    agent to identify itself\n   to a registrar as a device at which a user (designated
    by an address\n   of record) is located.  A registrar assesses the identity asserted
    in\n   the From header field of a REGISTER message to determine whether this\n
    \  request can modify the contact addresses associated with the\n   address-of-record
    in the To header field.  While these two fields are\n   frequently the same, there
    are many valid deployments in which a\n   third-party may register contacts on
    a user's behalf.\n   The From header field of a SIP request, however, can be modified\n
    \  arbitrarily by the owner of a UA, and this opens the door to\n   malicious
    registrations.  An attacker that successfully impersonates\n   a party authorized
    to change contacts associated with an address-of-\n   record could, for example,
    de-register all existing contacts for a\n   URI and then register their own device
    as the appropriate contact\n   address, thereby directing all requests for the
    affected user to the\n   attacker's device.\n   This threat belongs to a family
    of threats that rely on the absence\n   of cryptographic assurance of a request's
    originator.  Any SIP UAS\n   that represents a valuable service (a gateway that
    interworks SIP\n   requests with traditional telephone calls, for example) might
    want to\n   control access to its resources by authenticating requests that it\n
    \  receives.  Even end-user UAs, for example SIP phones, have an\n   interest
    in ascertaining the identities of originators of requests.\n   This threat demonstrates
    the need for security services that enable\n   SIP entities to authenticate the
    originators of requests.\n"
  title: 26.1.1 Registration Hijacking
- contents:
  - "26.1.2 Impersonating a Server\n   The domain to which a request is destined is
    generally specified in\n   the Request-URI.  UAs commonly contact a server in
    this domain\n   directly in order to deliver a request.  However, there is always
    a\n   possibility that an attacker could impersonate the remote server, and\n
    \  that the UA's request could be intercepted by some other party.\n   For example,
    consider a case in which a redirect server at one\n   domain, chicago.com, impersonates
    a redirect server at another\n   domain, biloxi.com.  A user agent sends a request
    to biloxi.com, but\n   the redirect server at chicago.com answers with a forged
    response\n   that has appropriate SIP header fields for a response from\n   biloxi.com.
    \ The forged contact addresses in the redirection response\n   could direct the
    originating UA to inappropriate or insecure\n   resources, or simply prevent requests
    for biloxi.com from succeeding.\n   This family of threats has a vast membership,
    many of which are\n   critical.  As a converse to the registration hijacking threat,\n
    \  consider the case in which a registration sent to biloxi.com is\n   intercepted
    by chicago.com, which replies to the intercepted\n   registration with a forged
    301 (Moved Permanently) response.  This\n   response might seem to come from biloxi.com
    yet designate chicago.com\n   as the appropriate registrar.  All future REGISTER
    requests from the\n   originating UA would then go to chicago.com.\n   Prevention
    of this threat requires a means by which UAs can\n   authenticate the servers
    to whom they send requests.\n"
  title: 26.1.2 Impersonating a Server
- contents:
  - "26.1.3 Tampering with Message Bodies\n   As a matter of course, SIP UAs route
    requests through trusted proxy\n   servers.  Regardless of how that trust is established
    (authentication\n   of proxies is discussed elsewhere in this section), a UA may
    trust a\n   proxy server to route a request, but not to inspect or possibly\n
    \  modify the bodies contained in that request.\n   Consider a UA that is using
    SIP message bodies to communicate session\n   encryption keys for a media session.
    \ Although it trusts the proxy\n   server of the domain it is contacting to deliver
    signaling properly,\n   it may not want the administrators of that domain to be
    capable of\n   decrypting any subsequent media session.  Worse yet, if the proxy\n
    \  server were actively malicious, it could modify the session key,\n   either
    acting as a man-in-the-middle, or perhaps changing the\n   security characteristics
    requested by the originating UA.\n   This family of threats applies not only to
    session keys, but to most\n   conceivable forms of content carried end-to-end
    in SIP.  These might\n   include MIME bodies that should be rendered to the user,
    SDP, or\n   encapsulated telephony signals, among others.  Attackers might\n   attempt
    to modify SDP bodies, for example, in order to point RTP\n   media streams to
    a wiretapping device in order to eavesdrop on\n   subsequent voice communications.\n
    \  Also note that some header fields in SIP are meaningful end-to-end,\n   for
    example, Subject.  UAs might be protective of these header fields\n   as well
    as bodies (a malicious intermediary changing the Subject\n   header field might
    make an important request appear to be spam, for\n   example).  However, since
    many header fields are legitimately\n   inspected or altered by proxy servers
    as a request is routed, not all\n   header fields should be secured end-to-end.\n
    \  For these reasons, the UA might want to secure SIP message bodies,\n   and
    in some limited cases header fields, end-to-end.  The security\n   services required
    for bodies include confidentiality, integrity, and\n   authentication.  These
    end-to-end services should be independent of\n   the means used to secure interactions
    with intermediaries such as\n   proxy servers.\n"
  title: 26.1.3 Tampering with Message Bodies
- contents:
  - "26.1.4 Tearing Down Sessions\n   Once a dialog has been established by initial
    messaging, subsequent\n   requests can be sent that modify the state of the dialog
    and/or\n   session.  It is critical that principals in a session can be certain\n
    \  that such requests are not forged by attackers.\n   Consider a case in which
    a third-party attacker captures some initial\n   messages in a dialog shared by
    two parties in order to learn the\n   parameters of the session (To tag, From
    tag, and so forth) and then\n   inserts a BYE request into the session.  The attacker
    could opt to\n   forge the request such that it seemed to come from either\n   participant.
    \ Once the BYE is received by its target, the session\n   will be torn down prematurely.\n
    \  Similar mid-session threats include the transmission of forged re-\n   INVITEs
    that alter the session (possibly to reduce session security\n   or redirect media
    streams as part of a wiretapping attack).\n   The most effective countermeasure
    to this threat is the\n   authentication of the sender of the BYE.  In this instance,
    the\n   recipient needs only know that the BYE came from the same party with\n
    \  whom the corresponding dialog was established (as opposed to\n   ascertaining
    the absolute identity of the sender).  Also, if the\n   attacker is unable to
    learn the parameters of the session due to\n   confidentiality, it would not be
    possible to forge the BYE.  However,\n   some intermediaries (like proxy servers)
    will need to inspect those\n   parameters as the session is established.\n"
  title: 26.1.4 Tearing Down Sessions
- contents:
  - "26.1.5 Denial of Service and Amplification\n   Denial-of-service attacks focus
    on rendering a particular network\n   element unavailable, usually by directing
    an excessive amount of\n   network traffic at its interfaces.  A distributed denial-of-service\n
    \  attack allows one network user to cause multiple network hosts to\n   flood
    a target host with a large amount of network traffic.\n   In many architectures,
    SIP proxy servers face the public Internet in\n   order to accept requests from
    worldwide IP endpoints.  SIP creates a\n   number of potential opportunities for
    distributed denial-of-service\n   attacks that must be recognized and addressed
    by the implementers and\n   operators of SIP systems.\n   Attackers can create
    bogus requests that contain a falsified source\n   IP address and a corresponding
    Via header field that identify a\n   targeted host as the originator of the request
    and then send this\n   request to a large number of SIP network elements, thereby
    using\n   hapless SIP UAs or proxies to generate denial-of-service traffic\n   aimed
    at the target.\n   Similarly, attackers might use falsified Route header field
    values in\n   a request that identify the target host and then send such messages\n
    \  to forking proxies that will amplify messaging sent to the target.\n   Record-Route
    could be used to similar effect when the attacker is\n   certain that the SIP
    dialog initiated by the request will result in\n   numerous transactions originating
    in the backwards direction.\n   A number of denial-of-service attacks open up
    if REGISTER requests\n   are not properly authenticated and authorized by registrars.\n
    \  Attackers could de-register some or all users in an administrative\n   domain,
    thereby preventing these users from being invited to new\n   sessions.  An attacker
    could also register a large number of contacts\n   designating the same host for
    a given address-of-record in order to\n   use the registrar and any associated
    proxy servers as amplifiers in a\n   denial-of-service attack.  Attackers might
    also attempt to deplete\n   available memory and disk resources of a registrar
    by registering\n   huge numbers of bindings.\n   The use of multicast to transmit
    SIP requests can greatly increase\n   the potential for denial-of-service attacks.\n
    \  These problems demonstrate a general need to define architectures\n   that
    minimize the risks of denial-of-service, and the need to be\n   mindful in recommendations
    for security mechanisms of this class of\n   attacks.\n"
  title: 26.1.5 Denial of Service and Amplification
- contents:
  - "26.2 Security Mechanisms\n   From the threats described above, we gather that
    the fundamental\n   security services required for the SIP protocol are: preserving
    the\n   confidentiality and integrity of messaging, preventing replay attacks\n
    \  or message spoofing, providing for the authentication and privacy of\n   the
    participants in a session, and preventing denial-of-service\n   attacks.  Bodies
    within SIP messages separately require the security\n   services of confidentiality,
    integrity, and authentication.\n   Rather than defining new security mechanisms
    specific to SIP, SIP\n   reuses wherever possible existing security models derived
    from the\n   HTTP and SMTP space.\n   Full encryption of messages provides the
    best means to preserve the\n   confidentiality of signaling - it can also guarantee
    that messages\n   are not modified by any malicious intermediaries.  However,
    SIP\n   requests and responses cannot be naively encrypted end-to-end in\n   their
    entirety because message fields such as the Request-URI, Route,\n   and Via need
    to be visible to proxies in most network architectures\n   so that SIP requests
    are routed correctly.  Note that proxy servers\n   need to modify some features
    of messages as well (such as adding Via\n   header field values) in order for
    SIP to function.  Proxy servers\n   must therefore be trusted, to some degree,
    by SIP UAs.  To this\n   purpose, low-layer security mechanisms for SIP are recommended,
    which\n   encrypt the entire SIP requests or responses on the wire on a hop-\n
    \  by-hop basis, and that allow endpoints to verify the identity of\n   proxy
    servers to whom they send requests.\n   SIP entities also have a need to identify
    one another in a secure\n   fashion.  When a SIP endpoint asserts the identity
    of its user to a\n   peer UA or to a proxy server, that identity should in some
    way be\n   verifiable.  A cryptographic authentication mechanism is provided in\n
    \  SIP to address this requirement.\n   An independent security mechanism for
    SIP message bodies supplies an\n   alternative means of end-to-end mutual authentication,
    as well as\n   providing a limit on the degree to which user agents must trust\n
    \  intermediaries.\n"
  title: 26.2 Security Mechanisms
- contents:
  - "26.2.1 Transport and Network Layer Security\n   Transport or network layer security
    encrypts signaling traffic,\n   guaranteeing message confidentiality and integrity.\n
    \  Oftentimes, certificates are used in the establishment of lower-layer\n   security,
    and these certificates can also be used to provide a means\n   of authentication
    in many architectures.\n   Two popular alternatives for providing security at
    the transport and\n   network layer are, respectively, TLS [25] and IPSec [26].\n
    \  IPSec is a set of network-layer protocol tools that collectively can\n   be
    used as a secure replacement for traditional IP (Internet\n   Protocol).  IPSec
    is most commonly used in architectures in which a\n   set of hosts or administrative
    domains have an existing trust\n   relationship with one another.  IPSec is usually
    implemented at the\n   operating system level in a host, or on a security gateway
    that\n   provides confidentiality and integrity for all traffic it receives\n
    \  from a particular interface (as in a VPN architecture).  IPSec can\n   also
    be used on a hop-by-hop basis.\n   In many architectures IPSec does not require
    integration with SIP\n   applications; IPSec is perhaps best suited to deployments
    in which\n   adding security directly to SIP hosts would be arduous.  UAs that\n
    \  have a pre-shared keying relationship with their first-hop proxy\n   server
    are also good candidates to use IPSec.  Any deployment of\n   IPSec for SIP would
    require an IPSec profile describing the protocol\n   tools that would be required
    to secure SIP.  No such profile is given\n   in this document.\n   TLS provides
    transport-layer security over connection-oriented\n   protocols (for the purposes
    of this document, TCP); \"tls\" (signifying\n   TLS over TCP) can be specified
    as the desired transport protocol\n   within a Via header field value or a SIP-URI.
    \ TLS is most suited to\n   architectures in which hop-by-hop security is required
    between hosts\n   with no pre-existing trust association.  For example, Alice
    trusts\n   her local proxy server, which after a certificate exchange decides
    to\n   trust Bob's local proxy server, which Bob trusts, hence Bob and Alice\n
    \  can communicate securely.\n   TLS must be tightly coupled with a SIP application.
    \ Note that\n   transport mechanisms are specified on a hop-by-hop basis in SIP,
    thus\n   a UA that sends requests over TLS to a proxy server has no assurance\n
    \  that TLS will be used end-to-end.\n   The TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite
    [6] MUST be supported at\n   a minimum by implementers when TLS is used in a SIP
    application.  For\n   purposes of backwards compatibility, proxy servers, redirect
    servers,\n   and registrars SHOULD support TLS_RSA_WITH_3DES_EDE_CBC_SHA.\n   Implementers
    MAY also support any other ciphersuite.\n"
  title: 26.2.1 Transport and Network Layer Security
- contents:
  - "26.2.2 SIPS URI Scheme\n   The SIPS URI scheme adheres to the syntax of the SIP
    URI (described\n   in 19), although the scheme string is \"sips\" rather than
    \"sip\".  The\n   semantics of SIPS are very different from the SIP URI, however.
    \ SIPS\n   allows resources to specify that they should be reached securely.\n
    \  A SIPS URI can be used as an address-of-record for a particular user\n   -
    the URI by which the user is canonically known (on their business\n   cards, in
    the From header field of their requests, in the To header\n   field of REGISTER
    requests).  When used as the Request-URI of a\n   request, the SIPS scheme signifies
    that each hop over which the\n   request is forwarded, until the request reaches
    the SIP entity\n   responsible for the domain portion of the Request-URI, must
    be\n   secured with TLS; once it reaches the domain in question it is\n   handled
    in accordance with local security and routing policy, quite\n   possibly using
    TLS for any last hop to a UAS.  When used by the\n   originator of a request (as
    would be the case if they employed a SIPS\n   URI as the address-of-record of
    the target), SIPS dictates that the\n   entire request path to the target domain
    be so secured.\n   The SIPS scheme is applicable to many of the other ways in
    which SIP\n   URIs are used in SIP today in addition to the Request-URI, including\n
    \  in addresses-of-record, contact addresses (the contents of Contact\n   headers,
    including those of REGISTER methods), and Route headers.  In\n   each instance,
    the SIPS URI scheme allows these existing fields to\n   designate secure resources.
    \ The manner in which a SIPS URI is\n   dereferenced in any of these contexts
    has its own security properties\n   which are detailed in [4].\n   The use of
    SIPS in particular entails that mutual TLS authentication\n   SHOULD be employed,
    as SHOULD the ciphersuite\n   TLS_RSA_WITH_AES_128_CBC_SHA.  Certificates received
    in the\n   authentication process SHOULD be validated with root certificates\n
    \  held by the client; failure to validate a certificate SHOULD result\n   in
    the failure of the request.\n      Note that in the SIPS URI scheme, transport
    is independent of TLS,\n      and thus \"sips:alice@atlanta.com;transport=tcp\"
    and\n      \"sips:alice@atlanta.com;transport=sctp\" are both valid (although\n
    \     note that UDP is not a valid transport for SIPS).  The use of\n      \"transport=tls\"
    has consequently been deprecated, partly because\n      it was specific to a single
    hop of the request.  This is a change\n      since RFC 2543.\n   Users that distribute
    a SIPS URI as an address-of-record may elect to\n   operate devices that refuse
    requests over insecure transports.\n"
  title: 26.2.2 SIPS URI Scheme
- contents:
  - "26.2.3 HTTP Authentication\n   SIP provides a challenge capability, based on
    HTTP authentication,\n   that relies on the 401 and 407 response codes as well
    as header\n   fields for carrying challenges and credentials.  Without significant\n
    \  modification, the reuse of the HTTP Digest authentication scheme in\n   SIP
    allows for replay protection and one-way authentication.\n   The usage of Digest
    authentication in SIP is detailed in Section 22.\n"
  title: 26.2.3 HTTP Authentication
- contents:
  - "26.2.4 S/MIME\n   As is discussed above, encrypting entire SIP messages end-to-end
    for\n   the purpose of confidentiality is not appropriate because network\n   intermediaries
    (like proxy servers) need to view certain header\n   fields in order to route
    messages correctly, and if these\n   intermediaries are excluded from security
    associations, then SIP\n   messages will essentially be non-routable.\n   However,
    S/MIME allows SIP UAs to encrypt MIME bodies within SIP,\n   securing these bodies
    end-to-end without affecting message headers.\n   S/MIME can provide end-to-end
    confidentiality and integrity for\n   message bodies, as well as mutual authentication.
    \ It is also\n   possible to use S/MIME to provide a form of integrity and\n   confidentiality
    for SIP header fields through SIP message tunneling.\n   The usage of S/MIME in
    SIP is detailed in Section 23.\n"
  title: 26.2.4 S/MIME
- contents:
  - '26.3 Implementing Security Mechanisms

    '
  title: 26.3 Implementing Security Mechanisms
- contents:
  - "26.3.1 Requirements for Implementers of SIP\n   Proxy servers, redirect servers,
    and registrars MUST implement TLS,\n   and MUST support both mutual and one-way
    authentication.  It is\n   strongly RECOMMENDED that UAs be capable initiating
    TLS; UAs MAY also\n   be capable of acting as a TLS server.  Proxy servers, redirect\n
    \  servers, and registrars SHOULD possess a site certificate whose\n   subject
    corresponds to their canonical hostname.  UAs MAY have\n   certificates of their
    own for mutual authentication with TLS, but no\n   provisions are set forth in
    this document for their use.  All SIP\n   elements that support TLS MUST have
    a mechanism for validating\n   certificates received during TLS negotiation; this
    entails possession\n   of one or more root certificates issued by certificate
    authorities\n   (preferably well-known distributors of site certificates comparable\n
    \  to those that issue root certificates for web browsers).\n   All SIP elements
    that support TLS MUST also support the SIPS URI\n   scheme.\n   Proxy servers,
    redirect servers, registrars, and UAs MAY also\n   implement IPSec or other lower-layer
    security protocols.\n   When a UA attempts to contact a proxy server, redirect
    server, or\n   registrar, the UAC SHOULD initiate a TLS connection over which
    it\n   will send SIP messages.  In some architectures, UASs MAY receive\n   requests
    over such TLS connections as well.\n   Proxy servers, redirect servers, registrars,
    and UAs MUST implement\n   Digest Authorization, encompassing all of the aspects
    required in 22.\n   Proxy servers, redirect servers, and registrars SHOULD be
    configured\n   with at least one Digest realm, and at least one \"realm\" string\n
    \  supported by a given server SHOULD correspond to the server's\n   hostname
    or domainname.\n   UAs MAY support the signing and encrypting of MIME bodies,
    and\n   transference of credentials with S/MIME as described in Section 23.\n
    \  If a UA holds one or more root certificates of certificate\n   authorities
    in order to validate certificates for TLS or IPSec, it\n   SHOULD be capable of
    reusing these to verify S/MIME certificates, as\n   appropriate.  A UA MAY hold
    root certificates specifically for\n   validating S/MIME certificates.\n      Note
    that is it anticipated that future security extensions may\n      upgrade the
    normative strength associated with S/MIME as S/MIME\n      implementations appear
    and the problem space becomes better\n      understood.\n"
  title: 26.3.1 Requirements for Implementers of SIP
- contents:
  - "26.3.2 Security Solutions\n   The operation of these security mechanisms in concert
    can follow the\n   existing web and email security models to some degree.  At
    a high\n   level, UAs authenticate themselves to servers (proxy servers,\n   redirect
    servers, and registrars) with a Digest username and\n   password; servers authenticate
    themselves to UAs one hop away, or to\n   another server one hop away (and vice
    versa), with a site certificate\n   delivered by TLS.\n   On a peer-to-peer level,
    UAs trust the network to authenticate one\n   another ordinarily; however, S/MIME
    can also be used to provide\n   direct authentication when the network does not,
    or if the network\n   itself is not trusted.\n   The following is an illustrative
    example in which these security\n   mechanisms are used by various UAs and servers
    to prevent the sorts\n   of threats described in Section 26.1.  While implementers
    and network\n   administrators MAY follow the normative guidelines given in the\n
    \  remainder of this section, these are provided only as example\n   implementations.\n"
  title: 26.3.2 Security Solutions
- contents:
  - "26.3.2.1 Registration\n   When a UA comes online and registers with its local
    administrative\n   domain, it SHOULD establish a TLS connection with its registrar\n
    \  (Section 10 describes how the UA reaches its registrar).  The\n   registrar
    SHOULD offer a certificate to the UA, and the site\n   identified by the certificate
    MUST correspond with the domain in\n   which the UA intends to register; for example,
    if the UA intends to\n   register the address-of-record 'alice@atlanta.com', the
    site\n   certificate must identify a host within the atlanta.com domain (such\n
    \  as sip.atlanta.com).  When it receives the TLS Certificate message,\n   the
    UA SHOULD verify the certificate and inspect the site identified\n   by the certificate.
    \ If the certificate is invalid, revoked, or if it\n   does not identify the appropriate
    party, the UA MUST NOT send the\n   REGISTER message and otherwise proceed with
    the registration.\n      When a valid certificate has been provided by the registrar,
    the\n      UA knows that the registrar is not an attacker who might redirect\n
    \     the UA, steal passwords, or attempt any similar attacks.\n   The UA then
    creates a REGISTER request that SHOULD be addressed to a\n   Request-URI corresponding
    to the site certificate received from the\n   registrar.  When the UA sends the
    REGISTER request over the existing\n   TLS connection, the registrar SHOULD challenge
    the request with a 401\n   (Proxy Authentication Required) response.  The \"realm\"
    parameter\n   within the Proxy-Authenticate header field of the response SHOULD\n
    \  correspond to the domain previously given by the site certificate.\n   When
    the UAC receives the challenge, it SHOULD either prompt the user\n   for credentials
    or take an appropriate credential from a keyring\n   corresponding to the \"realm\"
    parameter in the challenge.  The\n   username of this credential SHOULD correspond
    with the \"userinfo\"\n   portion of the URI in the To header field of the REGISTER
    request.\n   Once the Digest credentials have been inserted into an appropriate\n
    \  Proxy-Authorization header field, the REGISTER should be resubmitted\n   to
    the registrar.\n      Since the registrar requires the user agent to authenticate\n
    \     itself, it would be difficult for an attacker to forge REGISTER\n      requests
    for the user's address-of-record.  Also note that since\n      the REGISTER is
    sent over a confidential TLS connection, attackers\n      will not be able to
    intercept the REGISTER to record credentials\n      for any possible replay attack.\n
    \  Once the registration has been accepted by the registrar, the UA\n   SHOULD
    leave this TLS connection open provided that the registrar\n   also acts as the
    proxy server to which requests are sent for users in\n   this administrative domain.
    \ The existing TLS connection will be\n   reused to deliver incoming requests
    to the UA that has just completed\n   registration.\n      Because the UA has
    already authenticated the server on the other\n      side of the TLS connection,
    all requests that come over this\n      connection are known to have passed through
    the proxy server -\n      attackers cannot create spoofed requests that appear
    to have been\n      sent through that proxy server.\n"
  title: 26.3.2.1 Registration
- contents:
  - "26.3.2.2 Interdomain Requests\n   Now let's say that Alice's UA would like to
    initiate a session with a\n   user in a remote administrative domain, namely \"bob@biloxi.com\".
    \ We\n   will also say that the local administrative domain (atlanta.com) has\n
    \  a local outbound proxy.\n   The proxy server that handles inbound requests
    for an administrative\n   domain MAY also act as a local outbound proxy; for simplicity's
    sake\n   we'll assume this to be the case for atlanta.com (otherwise the user\n
    \  agent would initiate a new TLS connection to a separate server at\n   this
    point).  Assuming that the client has completed the registration\n   process described
    in the preceding section, it SHOULD reuse the TLS\n   connection to the local
    proxy server when it sends an INVITE request\n   to another user.  The UA SHOULD
    reuse cached credentials in the\n   INVITE to avoid prompting the user unnecessarily.\n
    \  When the local outbound proxy server has validated the credentials\n   presented
    by the UA in the INVITE, it SHOULD inspect the Request-URI\n   to determine how
    the message should be routed (see [4]).  If the\n   \"domainname\" portion of
    the Request-URI had corresponded to the local\n   domain (atlanta.com) rather
    than biloxi.com, then the proxy server\n   would have consulted its location service
    to determine how best to\n   reach the requested user.\n      Had \"alice@atlanta.com\"
    been attempting to contact, say,\n      \"alex@atlanta.com\", the local proxy
    would have proxied to the\n      request to the TLS connection Alex had established
    with the\n      registrar when he registered.  Since Alex would receive this\n
    \     request over his authenticated channel, he would be assured that\n      Alice's
    request had been authorized by the proxy server of the\n      local administrative
    domain.\n   However, in this instance the Request-URI designates a remote domain.\n
    \  The local outbound proxy server at atlanta.com SHOULD therefore\n   establish
    a TLS connection with the remote proxy server at\n   biloxi.com.  Since both of
    the participants in this TLS connection\n   are servers that possess site certificates,
    mutual TLS authentication\n   SHOULD occur.  Each side of the connection SHOULD
    verify and inspect\n   the certificate of the other, noting the domain name that
    appears in\n   the certificate for comparison with the header fields of SIP\n
    \  messages.  The atlanta.com proxy server, for example, SHOULD verify\n   at
    this stage that the certificate received from the remote side\n   corresponds
    with the biloxi.com domain.  Once it has done so, and TLS\n   negotiation has
    completed, resulting in a secure channel between the\n   two proxies, the atlanta.com
    proxy can forward the INVITE request to\n   biloxi.com.\n   The proxy server at
    biloxi.com SHOULD inspect the certificate of the\n   proxy server at atlanta.com
    in turn and compare the domain asserted\n   by the certificate with the \"domainname\"
    portion of the From header\n   field in the INVITE request.  The biloxi proxy
    MAY have a strict\n   security policy that requires it to reject requests that
    do not match\n   the administrative domain from which they have been proxied.\n
    \     Such security policies could be instituted to prevent the SIP\n      equivalent
    of SMTP 'open relays' that are frequently exploited to\n      generate spam.\n
    \  This policy, however, only guarantees that the request came from the\n   domain
    it ascribes to itself; it does not allow biloxi.com to\n   ascertain how atlanta.com
    authenticated Alice.  Only if biloxi.com\n   has some other way of knowing atlanta.com's
    authentication policies\n   could it possibly ascertain how Alice proved her identity.\n
    \  biloxi.com might then institute an even stricter policy that forbids\n   requests
    that come from domains that are not known administratively\n   to share a common
    authentication policy with biloxi.com.\n   Once the INVITE has been approved by
    the biloxi proxy, the proxy\n   server SHOULD identify the existing TLS channel,
    if any, associated\n   with the user targeted by this request (in this case\n
    \  \"bob@biloxi.com\").  The INVITE should be proxied through this channel\n   to
    Bob.  Since the request is received over a TLS connection that had\n   previously
    been authenticated as the biloxi proxy, Bob knows that the\n   From header field
    was not tampered with and that atlanta.com has\n   validated Alice, although not
    necessarily whether or not to trust\n   Alice's identity.\n   Before they forward
    the request, both proxy servers SHOULD add a\n   Record-Route header field to
    the request so that all future requests\n   in this dialog will pass through the
    proxy servers.  The proxy\n   servers can thereby continue to provide security
    services for the\n   lifetime of this dialog.  If the proxy servers do not add
    themselves\n   to the Record-Route, future messages will pass directly end-to-end\n
    \  between Alice and Bob without any security services (unless the two\n   parties
    agree on some independent end-to-end security such as\n   S/MIME).  In this respect
    the SIP trapezoid model can provide a nice\n   structure where conventions of
    agreement between the site proxies can\n   provide a reasonably secure channel
    between Alice and Bob.\n      An attacker preying on this architecture would,
    for example, be\n      unable to forge a BYE request and insert it into the signaling\n
    \     stream between Bob and Alice because the attacker has no way of\n      ascertaining
    the parameters of the session and also because the\n      integrity mechanism
    transitively protects the traffic between\n      Alice and Bob.\n"
  title: 26.3.2.2 Interdomain Requests
- contents:
  - "26.3.2.3 Peer-to-Peer Requests\n   Alternatively, consider a UA asserting the
    identity\n   \"carol@chicago.com\" that has no local outbound proxy.  When Carol\n
    \  wishes to send an INVITE to \"bob@biloxi.com\", her UA SHOULD initiate\n   a
    TLS connection with the biloxi proxy directly (using the mechanism\n   described
    in [4] to determine how to best to reach the given\n   Request-URI).  When her
    UA receives a certificate from the biloxi\n   proxy, it SHOULD be verified normally
    before she passes her INVITE\n   across the TLS connection.  However, Carol has
    no means of proving\n   her identity to the biloxi proxy, but she does have a
    CMS-detached\n   signature over a \"message/sip\" body in the INVITE.  It is unlikely
    in\n   this instance that Carol would have any credentials in the biloxi.com\n
    \  realm, since she has no formal association with biloxi.com.  The\n   biloxi
    proxy MAY also have a strict policy that precludes it from\n   even bothering
    to challenge requests that do not have biloxi.com in\n   the \"domainname\" portion
    of the From header field - it treats these\n   users as unauthenticated.\n   The
    biloxi proxy has a policy for Bob that all non-authenticated\n   requests should
    be redirected to the appropriate contact address\n   registered against 'bob@biloxi.com',
    namely <sip:bob@192.0.2.4>.\n   Carol receives the redirection response over the
    TLS connection she\n   established with the biloxi proxy, so she trusts the veracity
    of the\n   contact address.\n   Carol SHOULD then establish a TCP connection with
    the designated\n   address and send a new INVITE with a Request-URI containing
    the\n   received contact address (recomputing the signature in the body as\n   the
    request is readied).  Bob receives this INVITE on an insecure\n   interface, but
    his UA inspects and, in this instance, recognizes the\n   From header field of
    the request and subsequently matches a locally\n   cached certificate with the
    one presented in the signature of the\n   body of the INVITE.  He replies in similar
    fashion, authenticating\n   himself to Carol, and a secure dialog begins.\n      Sometimes
    firewalls or NATs in an administrative domain could\n      preclude the establishment
    of a direct TCP connection to a UA.  In\n      these cases, proxy servers could
    also potentially relay requests\n      to UAs in a way that has no trust implications
    (for example,\n      forgoing an existing TLS connection and forwarding the request\n
    \     over cleartext TCP) as local policy dictates.\n"
  title: 26.3.2.3 Peer-to-Peer Requests
- contents:
  - "26.3.2.4 DoS Protection\n   In order to minimize the risk of a denial-of-service
    attack against\n   architectures using these security solutions, implementers
    should\n   take note of the following guidelines.\n   When the host on which a
    SIP proxy server is operating is routable\n   from the public Internet, it SHOULD
    be deployed in an administrative\n   domain with defensive operational policies
    (blocking source-routed\n   traffic, preferably filtering ping traffic).  Both
    TLS and IPSec can\n   also make use of bastion hosts at the edges of administrative
    domains\n   that participate in the security associations to aggregate secure\n
    \  tunnels and sockets.  These bastion hosts can also take the brunt of\n   denial-of-service
    attacks, ensuring that SIP hosts within the\n   administrative domain are not
    encumbered with superfluous messaging.\n   No matter what security solutions are
    deployed, floods of messages\n   directed at proxy servers can lock up proxy server
    resources and\n   prevent desirable traffic from reaching its destination.  There
    is a\n   computational expense associated with processing a SIP transaction at\n
    \  a proxy server, and that expense is greater for stateful proxy\n   servers
    than it is for stateless proxy servers.  Therefore, stateful\n   proxies are more
    susceptible to flooding than stateless proxy\n   servers.\n   UAs and proxy servers
    SHOULD challenge questionable requests with\n   only a single 401 (Unauthorized)
    or 407 (Proxy Authentication\n   Required), forgoing the normal response retransmission
    algorithm, and\n   thus behaving statelessly towards unauthenticated requests.\n
    \     Retransmitting the 401 (Unauthorized) or 407 (Proxy Authentication\n      Required)
    status response amplifies the problem of an attacker\n      using a falsified
    header field value (such as Via) to direct\n      traffic to a third party.\n
    \  In summary, the mutual authentication of proxy servers through\n   mechanisms
    such as TLS significantly reduces the potential for rogue\n   intermediaries to
    introduce falsified requests or responses that can\n   deny service.  This commensurately
    makes it harder for attackers to\n   make innocent SIP nodes into agents of amplification.\n"
  title: 26.3.2.4 DoS Protection
- contents:
  - "26.4 Limitations\n   Although these security mechanisms, when applied in a judicious\n
    \  manner, can thwart many threats, there are limitations in the scope\n   of
    the mechanisms that must be understood by implementers and network\n   operators.\n"
  title: 26.4 Limitations
- contents:
  - "26.4.1 HTTP Digest\n   One of the primary limitations of using HTTP Digest in
    SIP is that\n   the integrity mechanisms in Digest do not work very well for SIP.\n
    \  Specifically, they offer protection of the Request-URI and the method\n   of
    a message, but not for any of the header fields that UAs would\n   most likely
    wish to secure.\n   The existing replay protection mechanisms described in RFC
    2617 also\n   have some limitations for SIP.  The next-nonce mechanism, for\n
    \  example, does not support pipelined requests.  The nonce-count\n   mechanism
    should be used for replay protection.\n   Another limitation of HTTP Digest is
    the scope of realms.  Digest is\n   valuable when a user wants to authenticate
    themselves to a resource\n   with which they have a pre-existing association,
    like a service\n   provider of which the user is a customer (which is quite a
    common\n   scenario and thus Digest provides an extremely useful function).  By\n
    \  way of contrast, the scope of TLS is interdomain or multirealm, since\n   certificates
    are often globally verifiable, so that the UA can\n   authenticate the server
    with no pre-existing association.\n"
  title: 26.4.1 HTTP Digest
- contents:
  - "26.4.2 S/MIME\n   The largest outstanding defect with the S/MIME mechanism is
    the lack\n   of a prevalent public key infrastructure for end users.  If self-\n
    \  signed certificates (or certificates that cannot be verified by one\n   of
    the participants in a dialog) are used, the SIP-based key exchange\n   mechanism
    described in Section 23.2 is susceptible to a man-in-the-\n   middle attack with
    which an attacker can potentially inspect and\n   modify S/MIME bodies.  The attacker
    needs to intercept the first\n   exchange of keys between the two parties in a
    dialog, remove the\n   existing CMS-detached signatures from the request and response,
    and\n   insert a different CMS-detached signature containing a certificate\n   supplied
    by the attacker (but which seems to be a certificate for the\n   proper address-of-record).
    \ Each party will think they have exchanged\n   keys with the other, when in fact
    each has the public key of the\n   attacker.\n   It is important to note that
    the attacker can only leverage this\n   vulnerability on the first exchange of
    keys between two parties - on\n   subsequent occasions, the alteration of the
    key would be noticeable\n   to the UAs.  It would also be difficult for the attacker
    to remain in\n   the path of all future dialogs between the two parties over time
    (as\n   potentially days, weeks, or years pass).\n   SSH is susceptible to the
    same man-in-the-middle attack on the first\n   exchange of keys; however, it is
    widely acknowledged that while SSH\n   is not perfect, it does improve the security
    of connections.  The use\n   of key fingerprints could provide some assistance
    to SIP, just as it\n   does for SSH.  For example, if two parties use SIP to establish
    a\n   voice communications session, each could read off the fingerprint of\n   the
    key they received from the other, which could be compared against\n   the original.
    \ It would certainly be more difficult for the man-in-\n   the-middle to emulate
    the voices of the participants than their\n   signaling (a practice that was used
    with the Clipper chip-based\n   secure telephone).\n   The S/MIME mechanism allows
    UAs to send encrypted requests without\n   preamble if they possess a certificate
    for the destination address-\n   of-record on their keyring.  However, it is possible
    that any\n   particular device registered for an address-of-record will not hold\n
    \  the certificate that has been previously employed by the device's\n   current
    user, and that it will therefore be unable to process an\n   encrypted request
    properly, which could lead to some avoidable error\n   signaling.  This is especially
    likely when an encrypted request is\n   forked.\n   The keys associated with S/MIME
    are most useful when associated with\n   a particular user (an address-of-record)
    rather than a device (a UA).\n   When users move between devices, it may be difficult
    to transport\n   private keys securely between UAs; how such keys might be acquired
    by\n   a device is outside the scope of this document.\n   Another, more prosaic
    difficulty with the S/MIME mechanism is that it\n   can result in very large messages,
    especially when the SIP tunneling\n   mechanism described in Section 23.4 is used.
    \ For that reason, it is\n   RECOMMENDED that TCP should be used as a transport
    protocol when\n   S/MIME tunneling is employed.\n"
  title: 26.4.2 S/MIME
- contents:
  - "26.4.3 TLS\n   The most commonly voiced concern about TLS is that it cannot run
    over\n   UDP; TLS requires a connection-oriented underlying transport\n   protocol,
    which for the purposes of this document means TCP.\n   It may also be arduous
    for a local outbound proxy server and/or\n   registrar to maintain many simultaneous
    long-lived TLS connections\n   with numerous UAs.  This introduces some valid
    scalability concerns,\n   especially for intensive ciphersuites.  Maintaining
    redundancy of\n   long-lived TLS connections, especially when a UA is solely\n
    \  responsible for their establishment, could also be cumbersome.\n   TLS only
    allows SIP entities to authenticate servers to which they\n   are adjacent; TLS
    offers strictly hop-by-hop security.  Neither TLS,\n   nor any other mechanism
    specified in this document, allows clients to\n   authenticate proxy servers to
    whom they cannot form a direct TCP\n   connection.\n"
  title: 26.4.3 TLS
- contents:
  - "26.4.4 SIPS URIs\n   Actually using TLS on every segment of a request path entails
    that\n   the terminating UAS must be reachable over TLS (perhaps registering\n
    \  with a SIPS URI as a contact address).  This is the preferred use of\n   SIPS.
    \ Many valid architectures, however, use TLS to secure part of\n   the request
    path, but rely on some other mechanism for the final hop\n   to a UAS, for example.
    \ Thus SIPS cannot guarantee that TLS usage\n   will be truly end-to-end.  Note
    that since many UAs will not accept\n   incoming TLS connections, even those UAs
    that do support TLS may be\n   required to maintain persistent TLS connections
    as described in the\n   TLS limitations section above in order to receive requests
    over TLS\n   as a UAS.\n   Location services are not required to provide a SIPS
    binding for a\n   SIPS Request-URI.  Although location services are commonly populated\n
    \  by user registrations (as described in Section 10.2.1), various other\n   protocols
    and interfaces could conceivably supply contact addresses\n   for an AOR, and
    these tools are free to map SIPS URIs to SIP URIs as\n   appropriate.  When queried
    for bindings, a location service returns\n   its contact addresses without regard
    for whether it received a\n   request with a SIPS Request-URI.  If a redirect
    server is accessing\n   the location service, it is up to the entity that processes
    the\n   Contact header field of a redirection to determine the propriety of\n
    \  the contact addresses.\n   Ensuring that TLS will be used for all of the request
    segments up to\n   the target domain is somewhat complex.  It is possible that\n
    \  cryptographically authenticated proxy servers along the way that are\n   non-compliant
    or compromised may choose to disregard the forwarding\n   rules associated with
    SIPS (and the general forwarding rules in\n   Section 16.6).  Such malicious intermediaries
    could, for example,\n   retarget a request from a SIPS URI to a SIP URI in an
    attempt to\n   downgrade security.\n   Alternatively, an intermediary might legitimately
    retarget a request\n   from a SIP to a SIPS URI.  Recipients of a request whose
    Request-URI\n   uses the SIPS URI scheme thus cannot assume on the basis of the\n
    \  Request-URI alone that SIPS was used for the entire request path\n   (from
    the client onwards).\n   To address these concerns, it is RECOMMENDED that recipients
    of a\n   request whose Request-URI contains a SIP or SIPS URI inspect the To\n
    \  header field value to see if it contains a SIPS URI (though note that\n   it
    does not constitute a breach of security if this URI has the same\n   scheme but
    is not equivalent to the URI in the To header field).\n   Although clients may
    choose to populate the Request-URI and To header\n   field of a request differently,
    when SIPS is used this disparity\n   could be interpreted as a possible security
    violation, and the\n   request could consequently be rejected by its recipient.
    \ Recipients\n   MAY also inspect the Via header chain in order to double-check\n
    \  whether or not TLS was used for the entire request path until the\n   local
    administrative domain was reached.  S/MIME may also be used by\n   the originating
    UAC to help ensure that the original form of the To\n   header field is carried
    end-to-end.\n   If the UAS has reason to believe that the scheme of the Request-URI\n
    \  has been improperly modified in transit, the UA SHOULD notify its\n   user
    of a potential security breach.\n   As a further measure to prevent downgrade
    attacks, entities that\n   accept only SIPS requests MAY also refuse connections
    on insecure\n   ports.\n   End users will undoubtedly discern the difference between
    SIPS and\n   SIP URIs, and they may manually edit them in response to stimuli.\n
    \  This can either benefit or degrade security.  For example, if an\n   attacker
    corrupts a DNS cache, inserting a fake record set that\n   effectively removes
    all SIPS records for a proxy server, then any\n   SIPS requests that traverse
    this proxy server may fail.  When a user,\n   however, sees that repeated calls
    to a SIPS AOR are failing, they\n   could on some devices manually convert the
    scheme from SIPS to SIP\n   and retry.  Of course, there are some safeguards against
    this (if the\n   destination UA is truly paranoid it could refuse all non-SIPS\n
    \  requests), but it is a limitation worth noting.  On the bright side,\n   users
    might also divine that 'SIPS' would be valid even when they are\n   presented
    only with a SIP URI.\n"
  title: 26.4.4 SIPS URIs
- contents:
  - "26.5 Privacy\n   SIP messages frequently contain sensitive information about
    their\n   senders - not just what they have to say, but with whom they\n   communicate,
    when they communicate and for how long, and from where\n   they participate in
    sessions.  Many applications and their users\n   require that this sort of private
    information be hidden from any\n   parties that do not need to know it.\n   Note
    that there are also less direct ways in which private\n   information can be divulged.
    \ If a user or service chooses to be\n   reachable at an address that is guessable
    from the person's name and\n   organizational affiliation (which describes most
    addresses-of-\n   record), the traditional method of ensuring privacy by having
    an\n   unlisted \"phone number\" is compromised.  A user location service can\n
    \  infringe on the privacy of the recipient of a session invitation by\n   divulging
    their specific whereabouts to the caller; an implementation\n   consequently SHOULD
    be able to restrict, on a per-user basis, what\n   kind of location and availability
    information is given out to certain\n   classes of callers.  This is a whole class
    of problem that is\n   expected to be studied further in ongoing SIP work.\n   In
    some cases, users may want to conceal personal information in\n   header fields
    that convey identity.  This can apply not only to the\n   From and related headers
    representing the originator of the request,\n   but also the To - it may not be
    appropriate to convey to the final\n   destination a speed-dialing nickname, or
    an unexpanded identifier for\n   a group of targets, either of which would be
    removed from the\n   Request-URI as the request is routed, but not changed in
    the To\n   header field if the two were initially identical.  Thus it MAY be\n
    \  desirable for privacy reasons to create a To header field that\n   differs
    from the Request-URI.\n"
  title: 26.5 Privacy
- contents:
  - "27 IANA Considerations\n   All method names, header field names, status codes,
    and option tags\n   used in SIP applications are registered with IANA through\n
    \  instructions in an IANA Considerations section in an RFC.\n   The specification
    instructs the IANA to create four new sub-\n   registries under http://www.iana.org/assignments/sip-parameters:\n
    \  Option Tags, Warning Codes (warn-codes), Methods and Response Codes,\n   added
    to the sub-registry of Header Fields that is already present\n   there.\n"
  title: 27 IANA Considerations
- contents:
  - "27.1 Option Tags\n   This specification establishes the Option Tags sub-registry
    under\n   http://www.iana.org/assignments/sip-parameters.\n   Option tags are
    used in header fields such as Require, Supported,\n   Proxy-Require, and Unsupported
    in support of SIP compatibility\n   mechanisms for extensions (Section 19.2).
    \ The option tag itself is a\n   string that is associated with a particular SIP
    option (that is, an\n   extension).  It identifies the option to SIP endpoints.\n
    \  Option tags are registered by the IANA when they are published in\n   standards
    track RFCs.  The IANA Considerations section of the RFC\n   must include the following
    information, which appears in the IANA\n   registry along with the RFC number
    of the publication.\n      o  Name of the option tag.  The name MAY be of any
    length, but\n         SHOULD be no more than twenty characters long.  The name
    MUST\n         consist of alphanum (Section 25) characters only.\n      o  Descriptive
    text that describes the extension.\n"
  title: 27.1 Option Tags
- contents:
  - "27.2 Warn-Codes\n   This specification establishes the Warn-codes sub-registry
    under\n   http://www.iana.org/assignments/sip-parameters and initiates its\n   population
    with the warn-codes listed in Section 20.43.  Additional\n   warn-codes are registered
    by RFC publication.\n   The descriptive text for the table of warn-codes is:\n
    \  Warning codes provide information supplemental to the status code in\n   SIP
    response messages when the failure of the transaction results\n   from a Session
    Description Protocol (SDP) (RFC 2327 [1]) problem.\n   The \"warn-code\" consists
    of three digits.  A first digit of \"3\"\n   indicates warnings specific to SIP.
    \ Until a future specification\n   describes uses of warn-codes other than 3xx,
    only 3xx warn-codes may\n   be registered.\n   Warnings 300 through 329 are reserved
    for indicating problems with\n   keywords in the session description, 330 through
    339 are warnings\n   related to basic network services requested in the session\n
    \  description, 370 through 379 are warnings related to quantitative QoS\n   parameters
    requested in the session description, and 390 through 399\n   are miscellaneous
    warnings that do not fall into one of the above\n   categories.\n"
  title: 27.2 Warn-Codes
- contents:
  - "27.3 Header Field Names\n   This obsoletes the IANA instructions about the header
    sub-registry\n   under http://www.iana.org/assignments/sip-parameters.\n   The
    following information needs to be provided in an RFC publication\n   in order
    to register a new header field name:\n      o  The RFC number in which the header
    is registered;\n      o  the name of the header field being registered;\n      o
    \ a compact form version for that header field, if one is\n         defined;\n
    \  Some common and widely used header fields MAY be assigned one-letter\n   compact
    forms (Section 7.3.3).  Compact forms can only be assigned\n   after SIP working
    group review, followed by RFC publication.\n"
  title: 27.3 Header Field Names
- contents:
  - "27.4 Method and Response Codes\n   This specification establishes the Method
    and Response-Code sub-\n   registries under http://www.iana.org/assignments/sip-parameters
    and\n   initiates their population as follows.  The initial Methods table is:\n
    \        INVITE                   [RFC3261]\n         ACK                      [RFC3261]\n
    \        BYE                      [RFC3261]\n         CANCEL                   [RFC3261]\n
    \        REGISTER                 [RFC3261]\n         OPTIONS                  [RFC3261]\n
    \        INFO                     [RFC2976]\n   The response code table is initially
    populated from Section 21, the\n   portions labeled Informational, Success, Redirection,
    Client-Error,\n   Server-Error, and Global-Failure.  The table has the following\n
    \  format:\n      Type (e.g., Informational)\n            Number    Default Reason
    Phrase         [RFC3261]\n   The following information needs to be provided in
    an RFC publication\n   in order to register a new response code or method:\n      o
    \ The RFC number in which the method or response code is\n         registered;\n
    \     o  the number of the response code or name of the method being\n         registered;\n
    \     o  the default reason phrase for that response code, if\n         applicable;\n"
  title: 27.4 Method and Response Codes
- contents:
  - "27.5 The \"message/sip\" MIME type.\n   This document registers the \"message/sip\"
    MIME media type in order to\n   allow SIP messages to be tunneled as bodies within
    SIP, primarily for\n   end-to-end security purposes.  This media type is defined
    by the\n   following information:\n      Media type name: message\n      Media
    subtype name: sip\n      Required parameters: none\n      Optional parameters:
    version\n         version: The SIP-Version number of the enclosed message (e.g.,\n
    \        \"2.0\").  If not present, the version defaults to \"2.0\".\n      Encoding
    scheme: SIP messages consist of an 8-bit header\n         optionally followed
    by a binary MIME data object.  As such, SIP\n         messages must be treated
    as binary.  Under normal circumstances\n         SIP messages are transported
    over binary-capable transports, no\n         special encodings are needed.\n      Security
    considerations: see below\n         Motivation and examples of this usage as a
    security mechanism\n         in concert with S/MIME are given in 23.4.\n"
  title: 27.5 The "message/sip" MIME type.
- contents:
  - "27.6 New Content-Disposition Parameter Registrations\n   This document also registers
    four new Content-Disposition header\n   \"disposition-types\": alert, icon, session
    and render.  The authors\n   request that these values be recorded in the IANA
    registry for\n   Content-Dispositions.\n   Descriptions of these \"disposition-types\",
    including motivation and\n   examples, are given in Section 20.11.\n   Short descriptions
    suitable for the IANA registry are:\n      alert     the body is a custom ring
    tone to alert the user\n      icon      the body is displayed as an icon to the
    user\n      render    the body should be displayed to the user\n      session
    \  the body describes a communications session, for\n                example,
    as RFC 2327 SDP body\n"
  title: 27.6 New Content-Disposition Parameter Registrations
- contents:
  - "28 Changes From RFC 2543\n   This RFC revises RFC 2543.  It is mostly backwards
    compatible with\n   RFC 2543.  The changes described here fix many errors discovered
    in\n   RFC 2543 and provide information on scenarios not detailed in RFC\n   2543.
    \ The protocol has been presented in a more cleanly layered\n   model here.\n
    \  We break the differences into functional behavior that is a\n   substantial
    change from RFC 2543, which has impact on\n   interoperability or correct operation
    in some cases, and functional\n   behavior that is different from RFC 2543 but
    not a potential source\n   of interoperability problems.  There have been countless\n
    \  clarifications as well, which are not documented here.\n"
  title: 28 Changes From RFC 2543
- contents:
  - "28.1 Major Functional Changes\n   o  When a UAC wishes to terminate a call before
    it has been answered,\n      it sends CANCEL.  If the original INVITE still returns
    a 2xx, the\n      UAC then sends BYE.  BYE can only be sent on an existing call
    leg\n      (now called a dialog in this RFC), whereas it could be sent at any\n
    \     time in RFC 2543.\n   o  The SIP BNF was converted to be RFC 2234 compliant.\n
    \  o  SIP URL BNF was made more general, allowing a greater set of\n      characters
    in the user part.  Furthermore, comparison rules were\n      simplified to be
    primarily case-insensitive, and detailed handling\n      of comparison in the
    presence of parameters was described.  The\n      most substantial change is that
    a URI with a parameter with the\n      default value does not match a URI without
    that parameter.\n   o  Removed Via hiding.  It had serious trust issues, since
    it relied\n      on the next hop to perform the obfuscation process.  Instead,
    Via\n      hiding can be done as a local implementation choice in stateful\n      proxies,
    and thus is no longer documented.\n   o  In RFC 2543, CANCEL and INVITE transactions
    were intermingled.\n      They are separated now.  When a user sends an INVITE
    and then a\n      CANCEL, the INVITE transaction still terminates normally.  A
    UAS\n      needs to respond to the original INVITE request with a 487\n      response.\n
    \  o  Similarly, CANCEL and BYE transactions were intermingled; RFC 2543\n      allowed
    the UAS not to send a response to INVITE when a BYE was\n      received.  That
    is disallowed here.  The original INVITE needs a\n      response.\n   o  In RFC
    2543, UAs needed to support only UDP.  In this RFC, UAs\n      need to support
    both UDP and TCP.\n   o  In RFC 2543, a forking proxy only passed up one challenge
    from\n      downstream elements in the event of multiple challenges.  In this\n
    \     RFC, proxies are supposed to collect all challenges and place them\n      into
    the forwarded response.\n   o  In Digest credentials, the URI needs to be quoted;
    this is unclear\n      from RFC 2617 and RFC 2069 which are both inconsistent
    on it.\n   o  SDP processing has been split off into a separate specification\n
    \     [13], and more fully specified as a formal offer/answer exchange\n      process
    that is effectively tunneled through SIP.  SDP is allowed\n      in INVITE/200
    or 200/ACK for baseline SIP implementations; RFC\n      2543 alluded to the ability
    to use it in INVITE, 200, and ACK in a\n      single transaction, but this was
    not well specified.  More complex\n      SDP usages are allowed in extensions.\n
    \  o  Added full support for IPv6 in URIs and in the Via header field.\n      Support
    for IPv6 in Via has required that its header field\n      parameters allow the
    square bracket and colon characters.  These\n      characters were previously
    not permitted.  In theory, this could\n      cause interop problems with older
    implementations.  However, we\n      have observed that most implementations accept
    any non-control\n      ASCII character in these parameters.\n   o  DNS SRV procedure
    is now documented in a separate specification\n      [4].  This procedure uses
    both SRV and NAPTR resource records and\n      no longer combines data from across
    SRV records as described in\n      RFC 2543.\n   o  Loop detection has been made
    optional, supplanted by a mandatory\n      usage of Max-Forwards.  The loop detection
    procedure in RFC 2543\n      had a serious bug which would report \"spirals\"
    as an error\n      condition when it was not.  The optional loop detection procedure\n
    \     is more fully and correctly specified here.\n   o  Usage of tags is now
    mandatory (they were optional in RFC 2543),\n      as they are now the fundamental
    building blocks of dialog\n      identification.\n   o  Added the Supported header
    field, allowing for clients to indicate\n      what extensions are supported to
    a server, which can apply those\n      extensions to the response, and indicate
    their usage with a\n      Require in the response.\n   o  Extension parameters
    were missing from the BNF for several header\n      fields, and they have been
    added.\n   o  Handling of Route and Record-Route construction was very\n      underspecified
    in RFC 2543, and also not the right approach.  It\n      has been substantially
    reworked in this specification (and made\n      vastly simpler), and this is arguably
    the largest change.\n      Backwards compatibility is still provided for deployments
    that do\n      not use \"pre-loaded routes\", where the initial request has a
    set\n      of Route header field values obtained in some way outside of\n      Record-Route.
    \ In those situations, the new mechanism is not\n      interoperable.\n   o  In
    RFC 2543, lines in a message could be terminated with CR, LF,\n      or CRLF.
    \ This specification only allows CRLF.\n   o  Usage of Route in CANCEL and ACK
    was not well defined in RFC 2543.\n      It is now well specified; if a request
    had a Route header field,\n      its CANCEL or ACK for a non-2xx response to the
    request need to\n      carry the same Route header field values.  ACKs for 2xx
    responses\n      use the Route values learned from the Record-Route of the 2xx\n
    \     responses.\n   o  RFC 2543 allowed multiple requests in a single UDP packet.
    \ This\n      usage has been removed.\n   o  Usage of absolute time in the Expires
    header field and parameter\n      has been removed.  It caused interoperability
    problems in elements\n      that were not time synchronized, a common occurrence.
    \ Relative\n      times are used instead.\n   o  The branch parameter of the Via
    header field value is now\n      mandatory for all elements to use.  It now plays
    the role of a\n      unique transaction identifier.  This avoids the complex and
    bug-\n      laden transaction identification rules from RFC 2543.  A magic\n      cookie
    is used in the parameter value to determine if the previous\n      hop has made
    the parameter globally unique, and comparison falls\n      back to the old rules
    when it is not present.  Thus,\n      interoperability is assured.\n   o  In RFC
    2543, closure of a TCP connection was made equivalent to a\n      CANCEL.  This
    was nearly impossible to implement (and wrong) for\n      TCP connections between
    proxies.  This has been eliminated, so\n      that there is no coupling between
    TCP connection state and SIP\n      processing.\n   o  RFC 2543 was silent on
    whether a UA could initiate a new\n      transaction to a peer while another was
    in progress.  That is now\n      specified here.  It is allowed for non-INVITE
    requests, disallowed\n      for INVITE.\n   o  PGP was removed.  It was not sufficiently
    specified, and not\n      compatible with the more complete PGP MIME.  It was
    replaced with\n      S/MIME.\n   o  Added the \"sips\" URI scheme for end-to-end
    TLS.  This scheme is\n      not backwards compatible with RFC 2543.  Existing
    elements that\n      receive a request with a SIPS URI scheme in the Request-URI
    will\n      likely reject the request.  This is actually a feature; it ensures\n
    \     that a call to a SIPS URI is only delivered if all path hops can\n      be
    secured.\n   o  Additional security features were added with TLS, and these are\n
    \     described in a much larger and complete security considerations\n      section.\n
    \  o  In RFC 2543, a proxy was not required to forward provisional\n      responses
    from 101 to 199 upstream.  This was changed to MUST.\n      This is important,
    since many subsequent features depend on\n      delivery of all provisional responses
    from 101 to 199.\n   o  Little was said about the 503 response code in RFC 2543.
    \ It has\n      since found substantial use in indicating failure or overload\n
    \     conditions in proxies.  This requires somewhat special treatment.\n      Specifically,
    receipt of a 503 should trigger an attempt to\n      contact the next element
    in the result of a DNS SRV lookup.  Also,\n      503 response is only forwarded
    upstream by a proxy under certain\n      conditions.\n   o  RFC 2543 defined,
    but did no sufficiently specify, a mechanism for\n      UA authentication of a
    server.  That has been removed.  Instead,\n      the mutual authentication procedures
    of RFC 2617 are allowed.\n   o  A UA cannot send a BYE for a call until it has
    received an ACK for\n      the initial INVITE.  This was allowed in RFC 2543 but
    leads to a\n      potential race condition.\n   o  A UA or proxy cannot send CANCEL
    for a transaction until it gets a\n      provisional response for the request.
    \ This was allowed in RFC\n      2543 but leads to potential race conditions.\n
    \  o  The action parameter in registrations has been deprecated.  It was\n      insufficient
    for any useful services, and caused conflicts when\n      application processing
    was applied in proxies.\n   o  RFC 2543 had a number of special cases for multicast.
    \ For\n      example, certain responses were suppressed, timers were adjusted,\n
    \     and so on.  Multicast now plays a more limited role, and the\n      protocol
    operation is unaffected by usage of multicast as opposed\n      to unicast.  The
    limitations as a result of that are documented.\n   o  Basic authentication has
    been removed entirely and its usage\n      forbidden.\n   o  Proxies no longer
    forward a 6xx immediately on receiving it.\n      Instead, they CANCEL pending
    branches immediately.  This avoids a\n      potential race condition that would
    result in a UAC getting a 6xx\n      followed by a 2xx.  In all cases except this
    race condition, the\n      result will be the same - the 6xx is forwarded upstream.\n
    \  o  RFC 2543 did not address the problem of request merging.  This\n      occurs
    when a request forks at a proxy and later rejoins at an\n      element.  Handling
    of merging is done only at a UA, and procedures\n      are defined for rejecting
    all but the first request.\n"
  title: 28.1 Major Functional Changes
- contents:
  - "28.2 Minor Functional Changes\n   o  Added the Alert-Info, Error-Info, and Call-Info
    header fields for\n      optional content presentation to users.\n   o  Added
    the Content-Language, Content-Disposition and MIME-Version\n      header fields.\n
    \  o  Added a \"glare handling\" mechanism to deal with the case where\n      both
    parties send each other a re-INVITE simultaneously.  It uses\n      the new 491
    (Request Pending) error code.\n   o  Added the In-Reply-To and Reply-To header
    fields for supporting\n      the return of missed calls or messages at a later
    time.\n   o  Added TLS and SCTP as valid SIP transports.\n   o  There were a variety
    of mechanisms described for handling failures\n      at any time during a call;
    those are now generally unified.  BYE\n      is sent to terminate.\n   o  RFC
    2543 mandated retransmission of INVITE responses over TCP, but\n      noted it
    was really only needed for 2xx.  That was an artifact of\n      insufficient protocol
    layering.  With a more coherent transaction\n      layer defined here, that is
    no longer needed.  Only 2xx responses\n      to INVITEs are retransmitted over
    TCP.\n   o  Client and server transaction machines are now driven based on\n      timeouts
    rather than retransmit counts.  This allows the state\n      machines to be properly
    specified for TCP and UDP.\n   o  The Date header field is used in REGISTER responses
    to provide a\n      simple means for auto-configuration of dates in user agents.\n
    \  o  Allowed a registrar to reject registrations with expirations that\n      are
    too short in duration.  Defined the 423 response code and the\n      Min-Expires
    for this purpose.\n"
  title: 28.2 Minor Functional Changes
- contents:
  - "29 Normative References\n   [1]  Handley, M. and V. Jacobson, \"SDP: Session
    Description\n        Protocol\", RFC 2327, April 1998.\n   [2]  Bradner, S., \"Key
    words for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119,
    March 1997.\n   [3]  Resnick, P., \"Internet Message Format\", RFC 2822, April
    2001.\n   [4]  Rosenberg, J. and H. Schulzrinne, \"SIP: Locating SIP Servers\",\n
    \       RFC 3263, June 2002.\n   [5]  Berners-Lee, T., Fielding, R. and L. Masinter,
    \"Uniform Resource\n        Identifiers (URI): Generic Syntax\", RFC 2396, August
    1998.\n   [6]  Chown, P., \"Advanced Encryption Standard (AES) Ciphersuites for\n
    \       Transport Layer Security (TLS)\", RFC 3268, June 2002.\n   [7]  Yergeau,
    F., \"UTF-8, a transformation format of ISO 10646\", RFC\n        2279, January
    1998.\n   [8]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L.,\n
    \       Leach, P. and T. Berners-Lee, \"Hypertext Transfer Protocol --\n        HTTP/1.1\",
    RFC 2616, June 1999.\n   [9]  Vaha-Sipila, A., \"URLs for Telephone Calls\", RFC
    2806, April\n        2000.\n   [10] Crocker, D. and P. Overell, \"Augmented BNF
    for Syntax\n        Specifications: ABNF\", RFC 2234, November 1997.\n   [11]
    Freed, F. and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions
    (MIME) Part Two: Media Types\", RFC 2046, November\n        1996.\n   [12] Eastlake,
    D., Crocker, S. and J. Schiller, \"Randomness\n        Recommendations for Security\",
    RFC 1750, December 1994.\n   [13] Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer
    Model with\n        SDP\", RFC 3264, June 2002.\n   [14] Postel, J., \"User Datagram
    Protocol\", STD 6, RFC 768, August\n        1980.\n   [15] Postel, J., \"DoD Standard
    Transmission Control Protocol\", RFC\n        761, January 1980.\n   [16] Stewart,
    R., Xie, Q., Morneault, K., Sharp, C., Schwarzbauer,\n        H., Taylor, T.,
    Rytina, I., Kalla, M., Zhang, L. and V. Paxson,\n        \"Stream Control Transmission
    Protocol\", RFC 2960, October 2000.\n   [17] Franks, J., Hallam-Baker, P., Hostetler,
    J., Lawrence, S.,\n        Leach, P., Luotonen, A. and L. Stewart, \"HTTP authentication:\n
    \       Basic and Digest Access Authentication\", RFC 2617, June 1999.\n   [18]
    Troost, R., Dorner, S. and K. Moore, \"Communicating Presentation\n        Information
    in Internet Messages: The Content-Disposition Header\n        Field\", RFC 2183,
    August 1997.\n   [19] Zimmerer, E., Peterson, J., Vemuri, A., Ong, L., Audet,
    F.,\n        Watson, M. and M. Zonoun, \"MIME media types for ISUP and QSIG\n
    \       Objects\", RFC 3204, December 2001.\n   [20] Braden, R., \"Requirements
    for Internet Hosts - Application and\n        Support\", STD 3, RFC 1123, October
    1989.\n   [21] Alvestrand, H., \"IETF Policy on Character Sets and Languages\",\n
    \       BCP 18, RFC 2277, January 1998.\n   [22] Galvin, J., Murphy, S., Crocker,
    S. and N. Freed, \"Security\n        Multiparts for MIME: Multipart/Signed and
    Multipart/Encrypted\",\n        RFC 1847, October 1995.\n   [23] Housley, R.,
    \"Cryptographic Message Syntax\", RFC 2630, June\n        1999.\n   [24] Ramsdell
    B., \"S/MIME Version 3 Message Specification\", RFC 2633,\n        June 1999.\n
    \  [25] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC\n        2246,
    January 1999.\n   [26] Kent, S. and R. Atkinson, \"Security Architecture for the\n
    \       Internet Protocol\", RFC 2401, November 1998.\n"
  title: 29 Normative References
- contents:
  - "30 Informative References\n   [27] R. Pandya, \"Emerging mobile and personal
    communication systems,\"\n        IEEE Communications Magazine, Vol. 33, pp. 44--52,
    June 1995.\n   [28] Schulzrinne, H., Casner, S., Frederick, R. and V. Jacobson,\n
    \       \"RTP:  A Transport Protocol for Real-Time Applications\", RFC\n        1889,
    January 1996.\n   [29] Schulzrinne, H., Rao, R. and R. Lanphier, \"Real Time Streaming\n
    \       Protocol (RTSP)\", RFC 2326, April 1998.\n   [30] Cuervo, F., Greene,
    N., Rayhan, A., Huitema, C., Rosen, B. and\n        J. Segers, \"Megaco Protocol
    Version 1.0\", RFC 3015, November\n        2000.\n   [31] Handley, M., Schulzrinne,
    H., Schooler, E. and J. Rosenberg,\n        \"SIP: Session Initiation Protocol\",
    RFC 2543, March 1999.\n   [32] Hoffman, P., Masinter, L. and J. Zawinski, \"The
    mailto URL\n        scheme\", RFC 2368, July 1998.\n   [33] E. M. Schooler, \"A
    multicast user directory service for\n        synchronous rendezvous,\" Master's
    Thesis CS-TR-96-18, Department\n        of Computer Science, California Institute
    of Technology,\n        Pasadena, California, Aug. 1996.\n   [34] Donovan, S.,
    \"The SIP INFO Method\", RFC 2976, October 2000.\n   [35] Rivest, R., \"The MD5
    Message-Digest Algorithm\", RFC 1321, April\n        1992.\n   [36] Dawson, F.
    and T. Howes, \"vCard MIME Directory Profile\", RFC\n        2426, September 1998.\n
    \  [37] Good, G., \"The LDAP Data Interchange Format (LDIF) - Technical\n        Specification\",
    RFC 2849, June 2000.\n   [38] Palme, J., \"Common Internet Message Headers\",
    \ RFC 2076,\n        February 1997.\n   [39] Franks, J., Hallam-Baker, P., Hostetler,
    J., Leach, P.,\n        Luotonen, A., Sink, E. and L. Stewart, \"An Extension
    to HTTP:\n        Digest Access Authentication\", RFC 2069, January 1997.\n   [40]
    Johnston, A., Donovan, S., Sparks, R., Cunningham, C., Willis,\n        D., Rosenberg,
    J., Summers, K. and H. Schulzrinne, \"SIP Call\n        Flow Examples\", Work
    in Progress.\n   [41] E. M. Schooler, \"Case study: multimedia conference control
    in a\n        packet-switched teleconferencing system,\" Journal of\n        Internetworking:
    \ Research and Experience, Vol. 4, pp. 99--120,\n        June 1993.  ISI reprint
    series ISI/RS-93-359.\n   [42] H. Schulzrinne, \"Personal mobility for multimedia
    services in\n        the Internet,\" in European Workshop on Interactive Distributed\n
    \       Multimedia Systems and Services (IDMS), (Berlin, Germany), Mar.\n        1996.\n
    \  [43] Floyd, S., \"Congestion Control Principles\", RFC 2914, September\n        2000.\n"
  title: 30 Informative References
- contents:
  - "A Table of Timer Values\n   Table 4 summarizes the meaning and defaults of the
    various timers\n   used by this specification.\n"
  - 'Timer    Value            Section               Meaning

    '
  - '----------------------------------------------------------------------

    '
  - 'T1       500ms default    Section 17.1.1.1     RTT Estimate

    '
  - "T2       4s               Section 17.1.2.2     The maximum retransmit\n                                               interval
    for non-INVITE\n                                               requests and INVITE\n
    \                                              responses\n"
  - "T4       5s               Section 17.1.2.2     Maximum duration a\n                                               message
    will\n                                               remain in the network\n"
  - "Timer A  initially T1     Section 17.1.1.2     INVITE request retransmit\n                                               interval,
    for UDP only\n"
  - "Timer B  64*T1            Section 17.1.1.2     INVITE transaction\n                                               timeout
    timer\n"
  - "Timer C  > 3min           Section 16.6         proxy INVITE transaction\n                           bullet
    11            timeout\n"
  - "Timer D  > 32s for UDP    Section 17.1.1.2     Wait time for response\n         0s
    for TCP/SCTP                       retransmits\n"
  - "Timer E  initially T1     Section 17.1.2.2     non-INVITE request\n                                               retransmit
    interval,\n                                               UDP only\n"
  - "Timer F  64*T1            Section 17.1.2.2     non-INVITE transaction\n                                               timeout
    timer\n"
  - "Timer G  initially T1     Section 17.2.1       INVITE response\n                                               retransmit
    interval\n"
  - "Timer H  64*T1            Section 17.2.1       Wait time for\n                                               ACK
    receipt\n"
  - "Timer I  T4 for UDP       Section 17.2.1       Wait time for\n         0s for
    TCP/SCTP                       ACK retransmits\n"
  - "Timer J  64*T1 for UDP    Section 17.2.2       Wait time for\n         0s for
    TCP/SCTP                       non-INVITE request\n                                               retransmits\n"
  - "Timer K  T4 for UDP       Section 17.1.2.2     Wait time for\n         0s for
    TCP/SCTP                       response retransmits\n                   Table
    4: Summary of timers\n"
  title: A Table of Timer Values
- contents:
  - "Acknowledgments\n   We wish to thank the members of the IETF MMUSIC and SIP WGs
    for their\n   comments and suggestions.  Detailed comments were provided by Ofir\n
    \  Arkin, Brian Bidulock, Jim Buller, Neil Deason, Dave Devanathan,\n   Keith
    Drage, Bill Fenner, Cedric Fluckiger, Yaron Goland, John\n   Hearty, Bernie Hoeneisen,
    Jo Hornsby, Phil Hoffer, Christian Huitema,\n   Hisham Khartabil, Jean Jervis,
    Gadi Karmi, Peter Kjellerstedt, Anders\n   Kristensen, Jonathan Lennox, Gethin
    Liddell, Allison Mankin, William\n   Marshall, Rohan Mahy, Keith Moore, Vern Paxson,
    Bob Penfield, Moshe\n   J. Sambol, Chip Sharp, Igor Slepchin, Eric Tremblay, and
    Rick\n   Workman.\n   Brian Rosen provided the compiled BNF.\n   Jean Mahoney
    provided technical writing assistance.\n   This work is based, inter alia, on
    [41,42].\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Authors addresses are listed alphabetically for the editors,
    the\n   writers, and then the original authors of RFC 2543.  All listed\n   authors
    actively contributed large amounts of text to this document.\n   Jonathan Rosenberg\n
    \  dynamicsoft\n   72 Eagle Rock Ave\n   East Hanover, NJ 07936\n   USA\n   EMail:
    \ jdrosen@dynamicsoft.com\n   Henning Schulzrinne\n   Dept. of Computer Science\n
    \  Columbia University\n   1214 Amsterdam Avenue\n   New York, NY 10027\n   USA\n
    \  EMail:  schulzrinne@cs.columbia.edu\n   Gonzalo Camarillo\n   Ericsson\n   Advanced
    Signalling Research Lab.\n   FIN-02420 Jorvas\n   Finland\n   EMail:  Gonzalo.Camarillo@ericsson.com\n
    \  Alan Johnston\n   WorldCom\n   100 South 4th Street\n   St. Louis, MO 63102\n
    \  USA\n   EMail:  alan.johnston@wcom.com\n   Jon Peterson\n   NeuStar, Inc\n
    \  1800 Sutter Street, Suite 570\n   Concord, CA 94520\n   USA\n   EMail:  jon.peterson@neustar.com\n
    \  Robert Sparks\n   dynamicsoft, Inc.\n   5100 Tennyson Parkway\n   Suite 1200\n
    \  Plano, Texas 75024\n   USA\n   EMail:  rsparks@dynamicsoft.com\n   Mark Handley\n
    \  International Computer Science Institute\n   1947 Center St, Suite 600\n   Berkeley,
    CA 94704\n   USA\n   EMail:  mjh@icir.org\n   Eve Schooler\n   AT&T Labs-Research\n
    \  75 Willow Road\n   Menlo Park, CA 94025\n   USA\n   EMail: schooler@research.att.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
