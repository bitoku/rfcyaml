Abstract The Generic String Encoding Rules (GSER) describe a human readable text encoding for an Abstract Syntax Notation One (ASN.1) value of any ASN.1 type.
Specifications making use of GSER may wish to provide an equivalent Augmented Backus Naur Form (ABNF) description of the GSER encoding for a particular ASN.1 type as a convenience for implementors.
This document supports such specifications by providing equivalent ABNF for the GSER encodings for ASN.1 types that commonly occur in Lightweight Directory Access Protocol (LDAP) syntaxes.
The Generic String Encoding Rules (GSER) [7] define a human readable text encoding, based on ASN.1 [8] value notation, for an ASN.1 value of any ASN.1 type.
Specifications making use of GSER may wish to provide a non normative equivalent ABNF [3] description of the GSER encoding for a particular ASN.1 type as a convenience for implementors unfamiliar with ASN.1.
This document supports such specifications by providing equivalent ABNF for the GSER encodings for ASN.1 types that commonly occur in LDAP [10] or X.500 [11] attribute and assertion syntaxes, as well as equivalent ABNF for the GSER encodings for the ASN.1 built in types.
The ABNF given in this document does not replace or alter GSER in any way.
If there is a discrepancy between the ABNF specified here and the encoding defined by GSER [7], then GSER is to be taken as definitive.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", and "MAY" in this document are to be interpreted as described in BCP 14, RFC 2119 [1].
The key word "OPTIONAL" is exclusively used with its ASN.1 meaning.
Certain separators are commonly used in constructing equivalent ABNF for SET and SEQUENCE types.
one or more space characters msp
1 %x20  ; one or more space characters sep
This section describes the GSER encoding of values of the ASN.1 built in types, except for the restricted character string types.
rule describes the GSER encoding of values of the BIT STRING type without a named bit list.
If the number of bits in a BIT STRING value is a multiple of four the <hstring> form of <BIT STRING> MAY be used.
Otherwise, the <bstring> form of <BIT STRING> is used.
The <bstring> rule encodes each bit as the character "0" or "1" in order from the first bit to the last bit.
The <hstring> rule encodes each group of four bits as a hexadecimal number where the first bit is the most significant.
An odd number of hexadecimal digits is permitted.
The <BOOLEAN> rule describes the GSER encoding of values of the BOOLEAN type.
rule describes the GSER encoding of values of the associated type for the unrestricted CHARACTER STRING type.
d identification msp Identification ",
" sp id data value msp OCTET STRING sp "}
transfer syntax msp OBJECT IDENTIFIER sp "}"
The <INTEGER> rule describes the GSER encoding of values of the INTEGER type without a named number list.
rule describes the GSER encoding of values of the constrained type INTEGER (0..MAX).
> rule describes the GSER encoding of values of the constrained type INTEGER (1..MAX).
" / positive number INTEGER 1
" The <EMBEDDED PDV> rule describes the GSER encoding of values of the associated type for the EMBEDDED PDV type.
d identification msp Identification ",
" sp id data value msp OCTET STRING sp "}
" The <EXTERNAL> rule describes the GSER encoding of values of the associated type for the EXTERNAL type.
id single ASN1 type   %x73.69.6E.67.6C.65.2D.41.53.4E.31.2D.74.79 %x70.65 ; "single ASN1 type" id
"arbitrary" The <Value> rule is defined by GSER [7].
It represents the GSER encoding of a single value of the ASN.1 type identified by the direct reference and/or indirect reference components.
The <NULL> rule describes the GSER encoding of values of the NULL type.
rule describes the GSER encoding of values of the OBJECT IDENTIFIER type.
OBJECT IDENTIFIER   numeric oid / descr numeric oid
The <descr> rule is described in RFC 2252 [4].
An object descriptor name is potentially ambiguous and should be used with care.
rule describes the GSER encoding of values of the OCTET STRING type.
The octets are encoded in order from the first octet to the last octet.
Each octet is encoded as a pair of hexadecimal digits where the first digit corresponds to the four most significant bits of the octet.
If the hexadecimal string does not have an even number of digits, the four least significant bits in the last octet are assumed to be zero.
The <REAL> rule describes the GSER encoding of values of the REAL type.
d mantissa msp INTEGER ","
The <RELATIVE OID> rule describes the GSER encoding of values of the RELATIVE OID type.
" oid component ) 5.
This section describes the GSER encoding of values of the ASN.1 restricted character string types.
The characters of a value of a restricted character string type are always encoded as a UTF 8 character string between double quotes.
For some of the ASN.1 string types, this requires a translation to or from the UTF 8 encoding.
Some of the ASN.1 string types permit only a subset of the characters representable in UTF 8.
Any double quote characters in the character string, where allowed by the character set, are escaped by being repeated.
The <UTF8String> rule describes the GSER encoding of values of the UTF8String type.
The characters of this string type do not require any translation before being encoded.
2 byte UTF 8 character %xE0 EF 2(%x80 BF)
, <ISO646String>, <IA5String>, <GeneralizedTime> and <UTCTime
> rules describe the GSER encoding of values of the correspondingly named ASN.1 types.
The characters of these string types are compatible with UTF 8 and do not require any translation before being encoded.
The GeneralizedTime and UTCTime types use the VisibleString character set, but have a strictly defined format.
dquote century year month day hour [ minute [ second ] ]
The <BMPString> and <UniversalString> rules describe the GSER encoding of values of the BMPString and UniversalString types respectively.
BMPString (UCS 2) and UniversalString
(UCS 4) values are translated into UTF 8 [6] character strings before being encoded according to <StringValue
<T61String>, <VideotexString>, <GraphicString>, <GeneralString> and <ObjectDescriptor> rules describe the GSER encoding of values of the correspondingly named ASN.1 types.
Values of these string types are translated into UTF 8 character strings before being encoded according to <StringValue
The ObjectDescriptor type uses the GraphicString character set.
This section describes the GSER encoding of values of selected ASN.1 types defined for LDAP and X.500.
The ABNF rule names beginning with uppercase letters describe the GSER encoding of values of the ASN.1 type with the same name.
The characters of a DirectoryString are translated into UTF 8 characters as required before being encoded between double quotes with any embedded double quotes escaped by being repeated.
The <RDNSequence> rule encodes a name as an LDAPDN character string between double quotes.
The character string is first derived according to the <distinguishedName> rule in Section 3 of RFC 2253 [5], and then it is encoded between double quotes with any embedded double quotes escaped by being repeated.
SafeUTF8Character dquote The <RelativeDistinguishedName> rule describes the GSER encoding of values of the RelativeDistinguishedName type that are not part of an RDNSequence value.
The <RelativeDistinguishedName> rule encodes an RDN as a double quoted string containing the RDN as it would appear in an LDAPDN character string.
The character string is first derived according to the <name component> rule in Section 3 of RFC 2253 [5], and then any embedded double quote characters are escaped by being repeated.
This resulting string is output between double quotes.
SafeUTF8Character dquote The <ORAddress> rule encodes an X.400 address as an IA5 character string between double quotes.
The character string is first derived according to Section 4.1 of RFC 2156 [2], and then any embedded double quotes are escaped by being repeated.
This resulting string is output between double quotes.
This document contains an alternative description of parts of the Generic String Encoding Rules, but does not replace or alter GSER in any way.
For the full security implications of using GSER, see the Security Considerations section for GSER [7].
