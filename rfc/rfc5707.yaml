- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                         A. Saleem
  contents:
  - "Independent Submission                                         A. Saleem\n  \
    \                Media Server Markup Language (MSML)\n"
- title: Abstract
  contents:
  - "Abstract\n   The Media Server Markup Language (MSML) is used to control and invoke\n\
    \   many different types of services on IP media servers.  The MSML\n   control\
    \ interface was initially driven by RadiSys with subsequent\n   significant contributions\
    \ from Intel, Dialogic, and others in the\n   industry.  Clients can use it to\
    \ define how multimedia sessions\n   interact on a media server and to apply services\
    \ to individuals or\n   groups of users.  MSML can be used, for example, to control\
    \ media\n   server conferencing features such as video layout and audio mixing,\n\
    \   create sidebar conferences or personal mixes, and set the properties\n   of\
    \ media streams.  As well, clients can use MSML to define media\n   processing\
    \ dialogs, which may be used as parts of application\n   interactions with users\
    \ or conferences.  Transformation of media\n   streams to and from users or conferences\
    \ as well as interactive voice\n   response (IVR) dialogs are examples of such\
    \ interactions, which are\n   specified using MSML.  MSML clients may also invoke\
    \ dialogs with\n   individual users or with groups of conference participants\
    \ using\n   VoiceXML.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5707.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose and in particular notes that the decision to publish is not\n   based\
    \ on IETF review for such things as security, congestion control,\n   or inappropriate\
    \ interaction with deployed protocols.  The RFC Editor\n   has chosen to publish\
    \ this document at its discretion.  Readers of\n   this document should exercise\
    \ caution in evaluating its value for\n   implementation and deployment.  See\
    \ RFC 3932 for more information.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Glossary ........................................................5\n  \
    \ 3. MSML SIP Usage ..................................................6\n    \
    \  3.1. SIP INFO ...................................................7\n      3.2.\
    \ SIP Control Framework ......................................8\n   4. Language\
    \ Structure .............................................15\n      4.1. Package\
    \ Scheme ............................................15\n      4.2. Profile Scheme\
    \ ............................................18\n   5. Execution Flow .................................................19\n\
    \   6. Media Server Object Model ......................................21\n  \
    \    6.1. Objects ...................................................21\n    \
    \  6.2. Identifiers ...............................................23\n   7. MSML\
    \ Core Package ..............................................26\n      7.1. <msml>\
    \ ....................................................26\n      7.2. <send> ....................................................26\n\
    \      7.3. <result> ..................................................27\n  \
    \    7.4. <event> ...................................................27\n   8.\
    \ MSML Conference Core Package ...................................28\n      8.1.\
    \ Conferences ...............................................28\n      8.2. Media\
    \ Streams .............................................29\n      8.3. <createconference>\
    \ ........................................31\n      8.4. <modifyconference> ........................................33\n\
    \      8.5. <destroyconference> .......................................34\n  \
    \    8.6. <audiomix> ................................................35\n    \
    \  8.7. <videolayout> .............................................36\n      8.8.\
    \ <join> ....................................................43\n      8.9. <modifystream>\
    \ ............................................45\n      8.10. <unjoin> .................................................46\n\
    \      8.11. <monitor> ................................................47\n  \
    \    8.12. <stream> .................................................47\n   9.\
    \ MSML Dialog Packages ...........................................51\n      9.1.\
    \ Overview ..................................................51\n      9.2. Primitives\
    \ ................................................53\n      9.3. Events ....................................................55\n\
    \      9.4. MSML Dialog Usage with SIP ................................56\n  \
    \    9.5. MSML Dialog Structure and Modularity ......................57\n    \
    \  9.6. MSML Dialog Core Package ..................................58\n      9.7.\
    \ MSML Dialog Base Package ..................................63\n      9.8. MSML\
    \ Dialog Group Package .................................81\n      9.9. MSML Dialog\
    \ Transform Package .............................85\n      9.10. MSML Dialog Speech\
    \ Package ...............................88\n      9.11. MSML Dialog Fax Detection\
    \ Package ........................92\n      9.12. MSML Dialog Fax Send/Receive\
    \ Package .....................93\n   10. MSML Audit Package ...........................................100\n\
    \      10.1. MSML Audit Core Package .................................100\n  \
    \    10.2. MSML Audit Conference Package ...........................102\n    \
    \  10.3. MSML Audit Connection Package ...........................106\n      10.4.\
    \ MSML Audit Dialog Package ...............................108\n      10.5. MSML\
    \ Audit Stream Package ...............................110\n   11. Response Codes\
    \ ...............................................111\n   12. MSML Conference Examples\
    \ .....................................113\n      12.1. Establishing a Dial-In\
    \ Conference .......................113\n      12.2. Example of a Sidebar Audio\
    \ Conference ...................117\n      12.3. Example of Removing a Conference\
    \ ........................118\n      12.4. Example of Modifying Video Layout .......................118\n\
    \   13. MSML Dialog Examples .........................................120\n  \
    \    13.1. Announcement ............................................120\n    \
    \  13.2. Voice Mail Retrieval ....................................120\n      13.3.\
    \ Play and Record .........................................122\n      13.4. Speech\
    \ Recognition ......................................125\n      13.5. Play and\
    \ Collect ........................................125\n      13.6. User Controlled\
    \ Gain ....................................128\n   14. MSML Audit Examples ..........................................128\n\
    \      14.1. Audit All Conferences ...................................128\n  \
    \    14.2. Audit Conference Dialogs ................................129\n    \
    \  14.3. Audit Conference Streams ................................130\n      14.4.\
    \ Audit All Connections ...................................131\n      14.5. Audit\
    \ Connection Dialogs ................................131\n      14.6. Audit Connection\
    \ Streams ................................132\n      14.7. Audit Connection with\
    \ Selective States ..................133\n   15. Future Work ..................................................134\n\
    \   16. XML Schema ...................................................134\n  \
    \    16.1. MSML Core ...............................................136\n    \
    \  16.2. MSML Conference Core Package ............................140\n      16.3.\
    \ MSML Dialog Packages ....................................148\n      16.4. MSML\
    \ Audit Packages .....................................170\n   17. Security Considerations\
    \ ......................................176\n   18. IANA Considerations ..........................................176\n\
    \      18.1. IANA Registrations for 'application' MIME Media Type ....176\n  \
    \    18.2. IANA Registrations for 'text' MIME Media Type ...........178\n    \
    \  18.3. URN Sub-Namespace Registration ..........................179\n      18.4.\
    \ XML Schema Registration .................................180\n   19. References\
    \ ...................................................181\n      19.1. Normative\
    \ References ....................................181\n      19.2. Informative\
    \ References ..................................182\n   Acknowledgments ..................................................183\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Media servers contain dynamic pools of media resources.\
    \  Control\n   agents and other users of media servers (called media server clients)\n\
    \   can define and create many different services based on how they\n   configure\
    \ and use those resources.  Often, that configuration and the\n   ways in which\
    \ those resources interact will be changed dynamically\n   over the course of\
    \ a call, to reflect changes in the way that an\n   application interacts with\
    \ a user.\n   For example, a call may undergo an initial IVR dialog before being\n\
    \   placed into a conference.  Calls may be moved from a main conference\n   to\
    \ a sidebar conference and then back again.  Individual calls may be\n   directly\
    \ bridged to create small n-way calls or simple sidebars.\n   None of these change\
    \ the SIP [n1] dialog or RTP [i3] session.  Yet\n   these do affect the media\
    \ flow and processing internal to the media\n   server.\n   The Media Server Markup\
    \ Language (MSML) is an XML [n2] language used\n   to control the flow of media\
    \ streams and services applied to media\n   streams within a media server.  It\
    \ is used to invoke many different\n   types of services on individual sessions,\
    \ groups of sessions, and\n   conferences.  MSML allows the creation of conferences,\
    \ bridging\n   different sessions together, and bridging sessions into conferences.\n\
    \   MSML may also be used to create user interaction dialogs and allows\n   the\
    \ application of media transforms to media streams.  Media\n   interaction dialogs\
    \ created using MSML allow construction of IVR\n   dialog sessions to individual\
    \ users as well as to groups of users\n   participating in a conference.  Dialogs\
    \ may also be specified using\n   other languages, VoiceXML [n5], which support\
    \ complete single-party\n   application logic to be executed on the media server.\n\
    \   MSML is a transport independent language, such that it does not rely\n   on\
    \ underlying transport mechanisms and language semantics are\n   independent of\
    \ transport.  However, SIP is a typical and commonly\n   used transport mechanism\
    \ for MSML, invoked using the SIP URI scheme.\n   This specification defines using\
    \ MSML dialogs using SIP as the\n   transport mechanism.\n   A network connection\
    \ may be established with the media server using\n   SIP.  Media received and\
    \ transmitted on that connection will flow\n   through different media resources\
    \ on the media server depending on\n   the requested service.  Basic Network Media\
    \ Services with SIP [n7]\n   defines conventions for associating a basic service\
    \ with a SIP\n   Request-URI.  MSML allows services to be dynamically applied\
    \ and\n   changed by a control agent during the lifetime of the SIP dialog.\n\
    \   MSML has been designed to address the control and manipulation of\n   media\
    \ processing operations (e.g., announcement, IVR, play and\n   record, automatic\
    \ speech recognition (ASR), text to speech (TTS),\n   fax, video), as well as\
    \ control and relationships of media streams\n   (e.g., simple and advanced conferencing).\
    \  It provides a general-\n   purpose media server control architecture.  MSML\
    \ can additionally be\n   used to invoke other more complex IVR languages such\
    \ as VoiceXML.\n   The MSML control interface has been widely deployed in the\
    \ industry,\n   with numerous client-side and server-side implementations, since\n\
    \   2003.  The in-service commercial deployments cover a wide variety of\n   applications\
    \ including, but not limited to, IP multimedia\n   conferencing, network voice\
    \ services, IVR, IVVR (interactive voice\n   and video response), and voice/video\
    \ mail.\n"
- title: 2.  Glossary
  contents:
  - "2.  Glossary\n   Media Server: a general-purpose platform for executing real-time\n\
    \   media processing tasks.  This is a logical function that maps either\n   to\
    \ a single physical device or to a portion of a physical device.\n   Media Server\
    \ Client: an application that originates MSML requests to\n   a media server and\
    \ also referred to as a control agent in this\n   specification.\n   Network Connection:\
    \ a participant that represents the termination on\n   a media server of one or\
    \ more RTP [i3] sessions (for example, audio\n   and video) associated with a\
    \ call.  Network connections are\n   established and removed using a session establishment\
    \ protocol such\n   as SIP.  An instance of a network connection is independent\
    \ of MSML\n   processing instructions applied to it.\n   Dialog: an automated\
    \ IVR participant.  Examples of dialogs may be\n   announcement players, IVR interfaces,\
    \ or voice recorders.  Dialogs\n   may be defined in MSML or using VoiceXML [n5].\n\
    \   Conference: an intermediary function that provides multimedia mixing\n   and\
    \ other advanced conferencing services.  This specification\n   currently considers\
    \ conferences with audio and/or video media types,\n   but is extensible to other\
    \ media types.\n   Identifier: a name that is used to refer to a specific instance\
    \ of an\n   object on the media server, such as a conference or a dialog.\n  \
    \ Identifiers are composed of one or more terms where each term\n   identifies\
    \ an object class and instance.\n   Object: the generic term for a media server\
    \ entity that terminates,\n   originates, or processes media.  This specification\
    \ defines four\n   classes of objects and specifies mechanisms to create them,\
    \ join them\n   together, and destroy them.\n   Participant Object: an object\
    \ in a media server that sources original\n   media in a call and/or receives\
    \ and terminates media in a call.\n   Intermediary Object: an object in a media\
    \ server that acts on media\n   within a call for the benefit of the participants.\n\
    \   Independent Object: an object that can exist on a media server\n   independent\
    \ of other objects.\n   Operator: an intermediary transformer that modifies or\
    \ transforms a\n   media stream.  Examples of operators may be audio gain controls,\n\
    \   video scaling, or voice masking.  MSML defines operators as media\n   transform\
    \ objects, which transform media using operations such as\n   gain control, when\
    \ applied to media streams.\n   Media Stream: a single media flow between two\
    \ objects.  A media\n   stream has a media type and may be unidirectional or bidirectional.\n"
- title: 3.  MSML SIP Usage
  contents:
  - "3.  MSML SIP Usage\n   SIP is used to create and modify media sessions with a\
    \ media server\n   according to the procedures defined in RFC 3261 [n1].  Often,\
    \ SIP\n   third party call control [i4] will be used to create sessions to a\n\
    \   media server on behalf of end users.  MSML is used to define and\n   change\
    \ the service that a user connected to a media server will\n   receive.  MSML\
    \ clients are application servers, soft-switches, or\n   other forms of control\
    \ agents, and SHOULD have an authorized security\n   relationship with the media\
    \ server.  MSML itself does not define\n   authorization mechanisms.\n   MSML\
    \ transactions are originated based upon events that occur in the\n   application\
    \ domain.  These events may be independent from any media\n   or user interaction.\
    \  For example, an application may wish to play an\n   announcement to a conference\
    \ warning that its scheduled completion\n   time is approaching.  Applications\
    \ themselves are structured in many\n   different ways.  Their structure and requirements\
    \ contribute to their\n   selection of protocols and languages.  To accommodate\
    \ differing\n   application needs, MSML has been designed to be neutral to other\n\
    \   languages and independent of the transport used to carry it.\n   MSML is purposely\
    \ designed to be transport independent.  In this\n   release of the specification,\
    \ SIP INFO [i5] and SIP Control Framework\n   [i11] have been chosen for transport\
    \ mechanisms for MSML, as\n   described in the following sections.\n"
- title: 3.1.  SIP INFO
  contents:
  - "3.1.  SIP INFO\n   SIP INVITE and INFO [i5] requests and responses MAY be used\
    \ to carry\n   MSML.  INFO requests allow asynchronous mid-call messages within\
    \ SIP\n   with few additional semantics.  In addition, there are existing\n  \
    \ widely deployed implementations of that method, it aids in initial\n   developments\
    \ that are closely coupled with SIP session establishment,\n   and it allows MSML\
    \ to be directly associated with user dialogs when\n   third party call control\
    \ is used.\n   Although INFO is sometimes considered not to be a suitable general-\n\
    \   purpose transport mechanism for messages within SIP, there have been\n   proposals\
    \ to make it more acceptable.  MSML may evolve to include\n   other SIP usage\
    \ and/or to work with other protocols or as a stand-\n   alone protocol established\
    \ through SIP, in future releases of this\n   document.\n   MSML supports several\
    \ models for client interaction.  When clients\n   use 3PCC to establish media\
    \ sessions on behalf of end users, clients\n   will have a SIP dialog for each\
    \ media session.  MSML MAY be sent on\n   these dialogs.  However the targets\
    \ of MSML actions are not inferred\n   from the session associated with the SIP\
    \ dialog.  The targets of MSML\n   actions are always explicitly specified using\
    \ identifiers as\n   previously defined.\n   An application, after interacting\
    \ with a user, may want to affect\n   multiple objects within a media server.\
    \  For example, tones or\n   messages are often played to a conference when connections\
    \ are added\n   or removed.  A separate message may also be played to a participant\n\
    \   as they are joined, or to moderators.  Explicit identifiers, that is,\n  \
    \ not inferred from a transport mechanism, allow these multiple actions\n   to\
    \ be easily grouped into a single transaction sent on any SIP\n   dialog.\n  \
    \ MSML also supports a model of dedicated control associations.  This\n   supports\
    \ decoupled application architectures where a client can\n   control media server\
    \ services without also establishing all of the\n   media sessions itself.  Control\
    \ associations are created using SIP,\n   but they do not have any associated\
    \ media session.  Although\n   initially INFO messages will be sent on this SIP\
    \ dialog, just as with\n   dialogs associated with media sessions, it is possible\
    \ that in the\n   future, the SIP dialog will be used to establish a separate\
    \ control\n   session (defined in SDP [n9]) that does not use SIP as the transport\n\
    \   for MSML messages.\n   A media server using MSML also sends asynchronous events\
    \ to a client\n   using MSML scripts in SIP INFO.  Events are sent based on previous\n\
    \   MSML requests and are sent within the SIP dialog on which the MSML\n   request\
    \ that caused the event to be generated was received.  If this\n   dialog no longer\
    \ exists when the event is generated, the event is\n   discarded.\n   Events may\
    \ be generated during the execution of a dialog created by a\n   <dialogstart>\
    \ element.  For example, dialogs can send events based on\n   user input.  VoiceXML\
    \ dialogs, on the other hand, generally interact\n   with other servers outside\
    \ of MSML using HTTP.\n   An event is also generated when the execution of a dialog\
    \ terminates,\n   because of either completion or failure.  The exact information\n\
    \   returned is dependent on the dialog language, the capabilities of the\n  \
    \ dialog execution environment, and what was requested by the dialog.\n   Both\
    \ MSML and VoiceXML [n5] allow information to be returned when\n   they exit.\
    \  These events may be sent in a SIP INFO or a SIP BYE.  SIP\n   BYE is used when\
    \ the dialog itself specifies that the connection\n   should be disconnected,\
    \ for example, through the use of the\n   <disconnect> element.\n   Conferences\
    \ may also generate events based upon their configuration.\n   An example of this\
    \ is the notification of the set of active speakers.\n"
- title: 3.2.  SIP Control Framework
  contents:
  - "3.2.  SIP Control Framework\n   The SIP Control Framework [i11] MAY be used as\
    \ a transport mechanism\n   for MSML.\n   The Control Framework provides a generic\
    \ approach for establishment\n   and reporting capabilities of remotely initiated\
    \ commands.  The\n   framework utilizes many functions provided by the Session\
    \ Initiation\n   Protocol (SIP) [n1] for the rendezvous and establishment of a\n\
    \   reliable channel for control interactions.  Compared to SIP INFO, the\n  \
    \ SIP Control Framework is a more general-purpose transport mechanism\n   and\
    \ one that is not constrained by limitations of the SIP INFO\n   mechanism.\n\
    \   The Control Framework also introduces the concept of a Control\n   Package,\
    \ which is an explicit usage of the Control Framework for a\n   particular interaction\
    \ set.  This specification has already specified\n   a list of packages for MSML\
    \ to control the media server in many\n   aspects, including basic dialog, advanced\
    \ conferencing, advanced\n   dialog, and audit service.  Each of these packages\
    \ has a unique\n   Control Package name assigned in order for MSML to be used\
    \ with the\n   Control Framework.\n   This section fulfills the mandatory requirement\
    \ for information that\n   MUST be specified during the definition of a Control\
    \ Framework\n   Package, as detailed in SIP Control Framework [i11].\n"
- title: 3.2.1.  Control Framework Package Names
  contents:
  - "3.2.1.  Control Framework Package Names\n   The Control Framework [i11] requires\
    \ a Control Package definition to\n   specify and register a unique name.\n  \
    \ MSML specification defines Control Package names using a hierarchical\n   scheme\
    \ to indicate the inherited relationship across packages.  For\n   example, package\
    \ \"msml-x\" is derived from package \"msml\", and package\n   \"msml-x-y\" is\
    \ derived from package \"msml-x\".\n   The following is a list of Control Package\
    \ names reserved by the MSML\n   specification.\n   \"msml\": this Control Package\
    \ supports MSML Core Package as specified\n      in section 7.\n   \"msml-conf\"\
    : this Control Package supports MSML Conference Core\n      Package as specified\
    \ in section 8.\n   \"msml-dialog\": this Control Package supports MSML Dialog\
    \ Core Package\n      as specified in section 9.6.\n   \"msml-dialog-base\": this\
    \ Control Package supports MSML Dialog Base\n      Package as specified in section\
    \ 9.7.\n   \"msml-dialog-group\": this Control Package supports MSML Dialog Group\n\
    \      Package as specified in section 9.8.\n   \"msml-dialog-transform\": this\
    \ Control Package supports MSML Dialog\n      Transform Package as specified in\
    \ section 9.9.\n   \"msml-dialog-speech\": this Control Package supports MSML\
    \ Dialog\n      Speech Package as specified in section 9.10.\n   \"msml-dialog-fax-detect\"\
    : this Control Package supports MSML Dialog\n      Fax Detection Package as specified\
    \ in section 9.11.\n   \"msml-dialog-fax-sendrecv\": this Control Package supports\
    \ MSML Dialog\n      Fax Send/Receive Package as specified in section 9.12.\n\
    \   \"msml-audit\": this Control Package supports MSML Audit Core Package\n  \
    \    as specified in section 10.1.\n   \"msml-audit-conf\": this Control Package\
    \ supports MSML Audit\n      Conference Package as specified in section 10.2.\n\
    \   \"msml-audit-conn\": this Control Package supports MSML Audit\n      Connection\
    \ Package as specified in section 10.3.\n   \"msml-audit-dialog\": this Control\
    \ Package supports MSML Audit Dialog\n      Package as specified in section 10.4.\n\
    \   \"msml-audit-stream\": this Control Package supports MSML Audit Stream\n \
    \     Package as specified in section 10.5.\n   An application server using the\
    \ Control Framework as transport for\n   MSML MUST use one or multiple package\
    \ names, depending on the service\n   required from the media server.  The package\
    \ name(s) are identified\n   in the \"Control-Packages\" SIP header that is present\
    \ in the SIP\n   INVITE dialog request that creates the control channel, as specified\n\
    \   in [i11].  The \"Control-Packages\" value MAY be re-negotiated via the\n \
    \  SIP re-INVITE mechanism.\n"
- title: 3.2.2.  Control Framework Messages
  contents:
  - "3.2.2.  Control Framework Messages\n   The usage of CONTROL, response, and REPORT\
    \ messages, as defined in\n   [i11], by each Control Package defined in MSML is\
    \ different and\n   described separately in the following sections.\n      MSML\
    \ Core Package \"msml\"\n         The application server may send a CONTROL message\
    \ with a body\n         of MSML request using the following elements to the MS:\n\
    \         <msml>: the root element that may contain a list of child\n        \
    \ elements that request a specific operation.  The child elements\n         are\
    \ defined in extended packages (e.g., \"msml-conf\" and \"msml-\n         dialog\"\
    ).  This element is also the root element that contains\n         an MSML result\
    \ and event.\n         <send>: sends an event to the specified recipient within\
    \ the\n         media server.  Specific event types are defined within the\n \
    \        extended packages.\n         The media server replies with a response\
    \ message containing a\n         MSML result using the following elements:\n \
    \        <result>: reports the results of an MSML transaction.\n         The media\
    \ server MAY send the MSML event to the application\n         server, in a REPORT\
    \ or CONTROL message, using the element\n         <event>.  The actual content\
    \ of the <event> and which Control\n         Framework message to use are defined\
    \ within the extended\n         packages.\n      MSML Conference Core Package\
    \ \"msml-conf\"\n         This package extends the MSML Core Package to define\
    \ a\n         framework for creation, manipulation, and deletion of a\n      \
    \   conference.\n         The AS can send a CONTROL message with a body of the\
    \ MSML\n         request that contains one or multiple conference-related\n  \
    \       commands to the MS.  The MS then replies with a response\n         message\
    \ with a body of the MSML result to indicate whether or\n         not the request\
    \ has been fulfilled.\n         During the lifetime of a conference, whenever\
    \ an event occurs,\n         the media server MAY send CONTROL messages containing\
    \ MSML\n         events to notify the application server.  The application\n \
    \        server SHOULD reply with a response message with no MSML body\n     \
    \    to acknowledge the event has been received.\n         This package does NOT\
    \ use the REPORT message.\n      Dialog Core Package \"msml-dialog\"\n       \
    \  This package extends the MSML Core Package to define the\n         structural\
    \ framework and abstractions for MSML dialogs.\n         The application server\
    \ MAY send CONTROL messages containing a\n         MSML request using the following\
    \ elements:\n         <dialogstart>: instantiate an MSML media dialog on a connection\n\
    \         or a conference.\n         <dialogend>: terminates an MSML dialog.\n\
    \         <send>: sends an event and an optional namelist to the dialog,\n   \
    \      dialog group, or dialog primitive.\n         <exit>: used by the dialog\
    \ description language to cause the\n         execution of the MSML dialog to\
    \ terminate.\n         For the <dialogstart> command, the response message MUST\n\
    \         contain an MSML result that indicates that the dialog has been\n   \
    \      started successfully.  The MSML result MAY contain <dialogid>\n       \
    \  to return the dialog identifier, if the identifier was assigned\n         by\
    \ the media server.  Subsequently, zero or more MSML events\n         MAY be initiated\
    \ by the media server in (update) REPORT\n         messages to report information\
    \ gathered during the dialog.\n         Finally, an MSML event \"msml.dialog.exit\"\
    \ SHOULD be generated\n         in a (terminate) REPORT message when the dialog\
    \ terminates\n         (e.g., MSML execution of <exit>).\n         For the <dialogend>\
    \ and <send> commands, the response message\n         contains the final MSML\
    \ result that indicates that the request\n         has either been fulfilled or\
    \ rejected.\n      Dialog Base Package \"msml-dialog-base\"\n         This package\
    \ extends the MSML Dialog Core Package to define a\n         set of base functionality\
    \ for MSML dialogs.  The extension\n         defines individual media primitives,\
    \ including <play>,\n         <dtmfgen>, <tonegen>, <record>, <dtmf> and <collect>,\
    \ to be\n         used as child element of <dialogstart>.  This package does not\n\
    \         change the framework message usage as defined by the MSML\n        \
    \ Dialog Core Package.\n      Dialog Transform Package \"msml-dialog-transform\"\
    \n         This package extends the MSML Dialog Core Package to define a\n   \
    \      set of transform primitives that works as filter on half-duplex\n     \
    \    media streams.  The extension defines transform primitives,\n         including\
    \ <vad>, <gain>, <agc>, <gate>, <clamp> and <relay>,\n         that MAY be used\
    \ as child elements of <dialogstart>.  This\n         package does not change\
    \ the framework message usage as defined\n         by the MSML Dialog Core Package.\n\
    \      Dialog Group Package \"msml-dialog-group\"\n         This package extends\
    \ the MSML Dialog Core, Base, and Transform\n         Packages to define a single\
    \ control flow construct that\n         specifies concurrent execution of multiple\
    \ media primitives.\n         The extension defines the <group> element that MAY\
    \ be used as a\n         child element of <dialogstart> to enclose multiple media\n\
    \         primitives, such that they can be executed concurrently.  This\n   \
    \      package does not change the framework message usage as defined\n      \
    \   by the MSML Dialog Core Package.\n      Dialog Speech Package \"msml-dialog-speech\"\
    \n         This package extends the MSML Dialog Core and MSML Base Package\n \
    \        to define functionality that MAY be used for automatic speech\n     \
    \    recognition and text to speech.  The extension extends the\n         <dialogstart>\
    \ and the <play> elements.\n         For <dialogstart>, it defines a new child\
    \ element <speech> to\n         activate grammars or user input rules associated\
    \ with speech\n         recognition.  For <play>, it defines a new child element\
    \ <tts>\n         to initiate the text-to-speech service.\n         This package\
    \ does not change the framework message usage as\n         defined by the MSML\
    \ Dialog Core Package.\n      Dialog Fax Detection Package \"msml-dialog-fax-detect\"\
    \n         This package extends the MSML Dialog Core Package to define\n     \
    \    primitives provide fax detection service.  The extension\n         defines\
    \ a primitive <faxdetect> to be used as a child element\n         of <dialogstart>.\
    \  This package does not change the framework\n         message usage as defined\
    \ by the MSML Dialog Core Package.\n      Dialog Fax Send/Receive Package \"msml-dialog-fax-sendrecv\"\
    \n         This package extends the MSML Dialog Core Package to define\n     \
    \    primitives that allow a media server to provide fax send or\n         receive\
    \ service.  The extension defines new primitives\n         <faxsend> and <faxrcv>,\
    \ to be used as a child element of\n         <dialogstart>.  This package does\
    \ not change the framework\n         message usage as defined by the MSML Dialog\
    \ Core Package.\n      Dialog Audit Core Package \"msml-audit\"\n         This\
    \ package extends the MSML Core Package to define a\n         framework for auditing\
    \ media resource(s) allocated on the media\n         server.\n         This package\
    \ follows a simple request/response transaction,\n         allowing the application\
    \ server to send CONTROL messages\n         containing MSML <audit> requests.\
    \  The media server MUST reply\n         with a response message containing the\
    \ result.  The result is\n         contained within the <auditresult> element,\
    \ returning the\n         queried state information.\n         This package does\
    \ NOT use the REPORT message.\n      Dialog Audit Conference Package \"msml-audit-conf\"\
    \n         This package extends the MSML Audit Core Package to define\n      \
    \   conference specific states that MAY be queried via the <audit>\n         command\
    \ and the corresponding response MUST be returned by the\n         <auditresult>\
    \ element.  This package does not change the\n         framework message usage\
    \ as defined by the MSML Audit Core\n         Package.\n      Dialog Audit Connection\
    \ Package \"msml-audit-conn\"\n         This package extends the MSML Audit Core\
    \ Package to define\n         connection specific states that MAY be queried via\
    \ the <audit>\n         command and the corresponding response MUST be returned\
    \ by the\n         <auditresult> element.  This package does not change the\n\
    \         framework message usage as defined by the MSML Audit Core\n        \
    \ Package.\n      Dialog Audit Dialog Package \"msml-audit-dialog\"\n        \
    \ This package extends the MSML Audit Core Package to define\n         dialog\
    \ specific states that MAY be queried via the <audit>\n         command and the\
    \ corresponding response MUST be returned by the\n         <auditresult> element.\
    \  This package does not change the\n         framework message usage as defined\
    \ by the MSML Audit Core\n         Package.\n      Dialog Audit Stream Package\
    \ \"msml-audit-stream\"\n         This package extends the MSML Audit Core Package\
    \ to define\n         stream specific states that MAY be queried via the <audit>\n\
    \         command and the corresponding response MUST returned by the\n      \
    \   <auditresult> element.  This package does not change the\n         framework\
    \ message usage as defined by the MSML Audit Core\n         Package.\n"
- title: 3.2.3.  Common XML Support
  contents:
  - "3.2.3.  Common XML Support\n   The XML schema described in [i11] MUST be supported\
    \ by all Control\n   Packages defined by MSML.  However, the \"connection-id\"\
    \ value MUST be\n   constructed as defined by MSML (i.e., the identifier MUST\
    \ contain a\n   local dialog tag only, while the SIP Control Framework [i11] requires\n\
    \   that the \"connection-id\" contain both local and remote dialog tags).\n"
- title: 3.2.4.  Control Message Body
  contents:
  - "3.2.4.  Control Message Body\n   A valid CONTROL body message MUST conform to\
    \ the MSML schema, as\n   included in this specification, for the MSML package(s)\
    \ used.\n"
- title: 3.2.5.  REPORT Message Body
  contents:
  - "3.2.5.  REPORT Message Body\n   A valid REPORT body message MUST conform to the\
    \ MSML schema, as\n   included in this specification, for the MSML package(s)\
    \ used.\n"
- title: 4.  Language Structure
  contents:
  - '4.  Language Structure

    '
- title: 4.1.  Package Scheme
  contents:
  - "4.1.  Package Scheme\n   The primary mechanism for extending MSML is the \"package\"\
    .  A package\n   is an integrated set of one or more XML schemas that define\n\
    \   additional features and functions via new or extended use of elements\n  \
    \ and attributes.  Each package, except for those defined in the\n   current document,\
    \ is defined in a separate standards document, e.g.,\n   an Internet Draft or\
    \ an RFC.  All packages that extend the base MSML\n   functionality MUST include\
    \ references to the MSML base set of schemas\n   provided in the Internet Drafts.\
    \  A schema in a package MUST only\n   extend MSML; that is, it must not alter\
    \ the existing specification.\n   A particular MSML script will include references\
    \ to all the schemas\n   defining the packages whose elements and attributes it\
    \ makes use of.\n   A particular script MUST reference MSML base and optionally\
    \ extension\n   package(s).  See the IANA Considerations section.\n   Each package\
    \ MUST define its own namespace so that elements or\n   attributes with the same\
    \ name in different packages do not conflict.\n   A script using a particular\
    \ element or attribute MUST prefix the\n   namespace name on that element or attribute's\
    \ name if it is defined\n   in a package (as opposed to being defined in the base).\n\
    \   MSML consists of a core package that provides structure without\n   support\
    \ for any specific feature set.  Additional packages, relying\n   on the core\
    \ package, provide functional features.  Any combination of\n   additional packages\
    \ may be used along with the core package.  The\n   following describes the set\
    \ of MSML packages defined in this\n   document.\n           +--------------------------------------------------------+\n\
    \           |                     MSML Core                          |\n     \
    \      +--------------------------------------------------------+\n          \
    \       /                           \\                 \\\n             +--------+\
    \                   +--------+        +-------+\n             | Dialog |     \
    \              | Conf   |        | Audit |\n             | Core   |          \
    \         | Core   |        | Core  |\n             +--------+               \
    \    +--------+        +-------+\n        ________  \\_______________________________________\
    \      |\n        ------------------------------------------------        |\n\
    \       /         \\          \\         \\          \\      \\       |\n   +------+\
    \  +---------+ +------+ +------+ +------+ +-------+   |\n   |Dialog|  |Dialog\
    \   | |Dialog| |Dialog| |Dialog| |Dialog |   |\n   |Base  |  |Transform| |Group\
    \ | |Speech| |Fax   | |Fax    |   |\n   +------+  +---------+ +------+ +------+\
    \ |Detect| |Send/  |   |\n                                           +------+\
    \ |Receive|   |\n                                                    +-------+\
    \   |\n                                        ________________________|\n   \
    \                                     -------------------------\n            \
    \                           /       \\       \\         \\\n                 \
    \                  +-----+ +-----+ +------+ +------+\n                       \
    \            |Audit| |Audit| |Audit | |Audit |\n                             \
    \      |Conf | |Conn | |Dialog| |Stream|\n                                   +-----+\
    \ +-----+ +------+ +------+\n   o MSML Core Package (Mandatory)\n      Describes\
    \ the minimum base framework that MUST be implemented to\n      support additional\
    \ core packages.\n   o MSML Conference Core Package (Conditionally Mandatory,\
    \ for\n     Conferencing)\n      Describes the audio and multimedia basic and\
    \ advanced conferencing\n      package that MAY be implemented.\n   o MSML Dialog\
    \ Core Package (Conditionally Mandatory, for Dialogs)\n      Describes the dialog\
    \ core package that MUST be implemented for any\n      dialog services.  However,\
    \ systems supporting conferencing only,\n      MAY omit support for MSML dialogs.\
    \  The MSML Dialog Core Package\n      specifies the framework within which additional\
    \ dialog packages\n      are supported.  The MSML Dialog Base Package MUST be\
    \ supported,\n      while all other dialog packages MAY be supported.\n      o\
    \ MSML Dialog Base Package (Conditionally Mandatory, for Dialogs)\n      o MSML\
    \ Dialog Group Package (Optional)\n      o MSML Dialog Transform Package (Optional)\n\
    \      o MSML Dialog Fax Detection Package (Optional)\n      o MSML Dialog Fax\
    \ Send/Receive Package (Optional)\n      o MSML Dialog Speech Package (Optional)\n\
    \   o MSML Audit Core Package (Conditionally Mandatory, for Auditing)\n      Describes\
    \ the audit core package that MUST be implemented to\n      support auditing services.\
    \  The MSML audit core package specifies\n      the framework within which additional\
    \ audit packages are\n      supported.\n      o MSML Audit Conference Package\
    \ (Conditionally Mandatory, for\n        Auditing Conference, Conference Dialog,\
    \ and Conference Stream)\n      o MSML Audit Connection Package (Conditionally\
    \ Mandatory, for\n        Auditing Connection, Connection Dialog, and Connection\
    \ Stream)\n      o MSML Audit Dialog Package (Conditionally Mandatory, for Auditing\n\
    \        Dialog, and MUST be used with either MSML Audit Conference\n        Package\
    \ or MSML Audit Connection Package)\n      o MSML Audit Stream Package (Conditionally\
    \ Mandatory, for Auditing\n        Stream, and MUST be used with either MSML Audit\
    \ Conference\n        Package or MSML Audit Connection Package)\n   The formal\
    \ process for defining extensions to MSML dialogs is to\n   define a new package.\
    \  The new package MUST provide a text\n   description of what extensions are\
    \ included and how they work.  It\n   MUST also define an XML schema file (if\
    \ applicable) that defines the\n   new package (which may be through extension,\
    \ restriction of an\n   existing package, or a specific profile of an existing\
    \ package).\n   Dependencies upon other packages MUST be stated.  For example,\
    \ a\n   package that extends or restricts has a dependency on the original\n \
    \  package specification.  Finally, the new package MUST be assigned a\n   unique\
    \ name and version.\n   The types of things that can be defined in new packages\
    \ are:\n      o  new primitives\n      o  extensions to existing primitives (events,\
    \ shadow variables,\n         attributes, content)\n      o  new recognition grammars\
    \ for existing primitives\n      o  new markup languages for speech generation\n\
    \      o  languages for specifying a topology schema\n      o  new predefined\
    \ topology schemas\n      o  new variables / segment types (sets & languages)\n\
    \      o  new control flow elements\n   MSML packages are assembled together to\
    \ form a specific MSML profile\n   that is shared between different implementations.\
    \  The base MSML\n   dialog profiles that are defined in this document consist\
    \ of the MSML\n   Core Package, MSML Dialog Core Package, MSML Dialog Base Package,\n\
    \   MSML Dialog Group Package, MSML Transform Package, MSML Fax Packages,\n  \
    \ and the MSML Speech Package.\n   MSML extension packages, which define primitives,\
    \ MUST define the\n   following for each primitive within the package:\n     \
    \ o  the function that the primitive performs\n      o  the attributes that may\
    \ be used to tailor its behavior\n      o  the events that it is capable of understanding\n\
    \      o  the shadow variables that provide access to information\n        determined\
    \ as a result of the primitive's operation\n   The mechanism used to ensure that\
    \ a media server and its client share\n   a compatible set of packages is not\
    \ defined.  Currently, it is\n   expected that provisioning will be used, possibly\
    \ coupled with a\n   future auditing capability.  Additionally, when used in SIP\
    \ networks,\n   packages could be defined using feature tags and the procedures\n\
    \   defined for Indicating User Agent Capabilities in SIP [i1] used to\n   allow\
    \ a media server to describe its capabilities to other user\n   agents.\n"
- title: 4.2.  Profile Scheme
  contents:
  - "4.2.  Profile Scheme\n   Not all devices and applications using MSML will need\
    \ to support the\n   entire MSML schema.  For example, a media processing device\
    \ might\n   support only audio announcements, only audio simple conferencing,\
    \ or\n   only multimedia IVR.  It is highly desirable to have a system for\n \
    \  describing what portion of MSML a particular media processing device\n   or\
    \ control agent supports.\n   The package scheme described earlier allows MSML\
    \ functionality to be\n   functionally grouped, relying on the MSML core package.\
    \  This scheme\n   allows a portion of the complete MSML specification to be\n\
    \   implemented, on a per-package basis, and also creates a framework for\n  \
    \ future extension packages.  However, within a given package, in some\n   cases,\
    \ only a subset of the package functionality may be required.\n   In order to\
    \ support subsets of packages, with greater degree of\n   granularity than at\
    \ the package level, a profile scheme is required.\n   MSML package profiles would\
    \ identify a subset of a given MSML package\n   with specific definitions of elements\
    \ and attributes.  Each MSML\n   package profile MUST be accompanied by one or\
    \ more corresponding\n   schemas.  To use the examples above, there could be an\
    \ audio\n   announcements profile of the MSML Dialog Base Package, an audio\n\
    \   simple conferencing profile of the MSML Conference Core Package, and\n   a\
    \ multimedia IVR profile of the MSML Dialog Base Package.\n   MSML package profiles\
    \ MUST be published separately from the MSML\n   specification, in one or more\
    \ standards documents (e.g., Internet\n   Drafts or RFCs) dedicated to MSML package\
    \ profiles.  Profiles would\n   not be registered with IANA and any organization\
    \ would additionally\n   be free to create its own profile(s) if required.\n"
- title: 5.  Execution Flow
  contents:
  - "5.  Execution Flow\n   MSML assumes a model where there is a single control context\
    \ within a\n   media server for MSML processing.  That context may have one or\
    \ many\n   SIP [n1] dialogs associated with it.  It is assumed that any SIP\n\
    \   dialogs associated with the MSML control context have been\n   authorized,\
    \ as appropriate, by mechanisms outside the scope of MSML.\n   A media server\
    \ control context maintains information about the state\n   of all media objects\
    \ and media streams within a media server.  It\n   receives and processes all\
    \ MSML requests from authorized SIP dialogs\n   and receives all events generated\
    \ internally by media objects and\n   sends them on the appropriate SIP dialog.\
    \  An MSML request is able to\n   create new media objects and streams, and to\
    \ modify or destroy any\n   existing media objects and streams.\n   An MSML request\
    \ may simply specify a single action for a media server\n   to undertake.  In\
    \ this case, the document is very similar to a simple\n   command request.  Often,\
    \ though, it may be more natural for a client\n   to request multiple actions\
    \ at one time, or the client would like\n   several actions to be closely coordinated\
    \ by the media server.\n   Multiple MSML elements received in a single request\
    \ MUST be processed\n   sequentially in document order.\n   An example of the\
    \ first scenario would be to create a conference and\n   join it with an initial\
    \ participant.  An example of the second case\n   would be to unjoin one or more\
    \ participants from a main conference\n   and join them to a sidebar conference.\
    \  In the first scenario,\n   network latencies may not be an issue, but it is\
    \ simpler for the\n   client to combine the requests.  In the second case, the\
    \ added\n   network latency between separate requests could mean perceptible\n\
    \   audio loss to the participant.\n   Each MSML request is processed as a single\
    \ transaction.  A media\n   server MUST ensure that it has the necessary resources\
    \ available to\n   carry out the complete transaction before executing any elements\
    \ of\n   the request.  If it does not have sufficient resources, it MUST\n   return\
    \ a 520 response and MUST NOT execute the transaction.\n   The MSML request MUST\
    \ be checked for well-formedness and validated\n   against the schema prior to\
    \ executing any elements.  This allows XML\n   [n2] errors to reported immediately\
    \ and minimizes failures within a\n   transaction and the corresponding execution\
    \ of only part of the\n   transaction.\n   Each element is expected to execute\
    \ immediately.  Elements such as\n   <dialogstart>, which take an unpredictable\
    \ amount of time, are\n   \"forked\" and executed in a separate thread (see MSML\
    \ Dialog\n   Packages).  Once successfully forked, execution continues with the\n\
    \   element following the </dialogstart>.  As such, MSML does not provide\n  \
    \ mechanisms to sequence or coordinate other operations with dialog\n   elements.\n\
    \   Processing within a transaction MUST stop if any errors occur.\n   Elements\
    \ that were executed prior to the error are not rolled back.\n   It is the responsibility\
    \ of the client to determine appropriate\n   actions based upon the results indicated\
    \ in the response.  Most\n   elements MAY contain an optional \"mark\" attribute.\
    \  The value of that\n   attribute from the last successfully executed element\
    \ MUST be\n   returned in an error response.  Note that errors that occur during\n\
    \   the execution of a dialog occur outside the context of an MSML\n   transaction.\
    \  These errors will be indicated in an asynchronous\n   event.\n   Transaction\
    \ results are returned as part of the SIP request response.\n   The transaction\
    \ results indicate the success or failure of the\n   transaction.  The result\
    \ MUST also include identifiers for any\n   objects created by a media server\
    \ for which the client did not\n   provide an instance name.  Additionally, if\
    \ the transaction fails,\n   the reason for the failure MUST be returned, as well\
    \ as an indication\n   of how much of the transaction was executed before the\
    \ failure\n   occurred SHOULD be returned.\n"
- title: 6.  Media Server Object Model
  contents:
  - "6.  Media Server Object Model\n   Media servers are general-purpose platforms\
    \ for executing real-time\n   media processing tasks.  These tasks range in complexity\
    \ from simple\n   ones such as serving announcements, to complex ones, such as\
    \ speech\n   interfaces, centralized multimedia conferencing, and sophisticated\n\
    \   gaming applications.\n   Calls are established to a media server using SIP.\
    \  Clients will\n   often use SIP third party call control (3PCC) [i4] to establish\
    \ calls\n   to a media server on behalf of end users.  However MSML does not\n\
    \   require that 3PCC be used, only that the client and the media server\n   share\
    \ a common identifier for the call and its associated RTP [i3]\n   sessions.\n\
    \   Objects represent entities that source, sink, or modify media\n   streams.\
    \  A media streams is a bidirectional or unidirectional media\n   flow between\
    \ objects on a media server.  The following subsections\n   define the classes\
    \ of objects that exist on a media server and the\n   way these are identified\
    \ in MSML.\n"
- title: 6.1.  Objects
  contents:
  - "6.1.  Objects\n   A media object is an endpoint of one or more media streams.\
    \  It may\n   be a connection that terminates RTP sessions from the network or\
    \ a\n   resource that transforms or manipulates media.  MSML defines four\n  \
    \ classes of media objects.  Each class defines the basic properties of\n   how\
    \ object instances are used within a media server.  However, most\n   classes\
    \ require that the function of specific instances be defined by\n   the client,\
    \ using MSML or other languages such as VoiceXML.\n   The following classes of\
    \ media processing objects are defined.  The\n   class names are given in parentheses:\n\
    \      o network connection (conn)\n      o conference (conf)\n      o dialog\
    \ (dialog)\n   Network connection is an abstraction for the media processing\n\
    \   resources involved in terminating the RTP session(s) of a call.  For\n   audio\
    \ services, a connection instance presents a full-duplex audio\n   stream interface\
    \ within a media server.  Multimedia connections have\n   multiple media streams\
    \ of different media types, each corresponding\n   to an RTP session.  Network\
    \ connections get instantiated through SIP\n   [n1].\n   A conference represents\
    \ the media resources and state information\n   required for a single logical\
    \ mix of each media type in the\n   conference (e.g., audio and video).  MSML\
    \ models multiple mixes/views\n   of the same media type as separate conferences.\
    \  Each conference has\n   multiple inputs.  Inputs may be divided into classes\
    \ that allow an\n   application to request different media treatment for different\n\
    \   participants.  For example, the video streams for some participants\n   may\
    \ be assigned to fixed regions of the screen while those for other\n   participants\
    \ may only be shown when they are speaking.\n   A conference has a single logical\
    \ output per media type.  For each\n   participant, it consists of the audio conference\
    \ mix, less any\n   contributed audio of the participant, and the video mix shared\
    \ by all\n   conference participants.  Video conferences using voice activated\n\
    \   switching have an optional ability to show the previous speaker to\n   the\
    \ current speaker.\n   Conferences are instantiated using the <createconference>\
    \ element.\n   The content of the <createconference> element specifies the\n \
    \  parameters of the audio and/or video mixes.\n   Dialogs are a class of objects\
    \ that represent automated participants.\n   They are similar to network connections\
    \ from a media flow perspective\n   and may have one or more media streams as\
    \ the abstraction for their\n   interface within a media server.  Unlike connections,\
    \ however,\n   dialogs are created and destroyed through MSML, and the media server\n\
    \   itself implements the dialog participant.  Dialogs are instantiated\n   through\
    \ the <dialogstart> element.  Contents of the <dialogstart>\n   element define\
    \ the desired or expected dialog behavior.  Dialogs may\n   also be invoked by\
    \ referencing VoiceXML as the dialog description\n   language.\n   Operators are\
    \ functions that are used to filter or transform a media\n   stream.  The function\
    \ that an instance of an operator fulfills is\n   defined as a property of the\
    \ media stream.  Operators may be\n   unidirectional or bidirectional and have\
    \ a media type.\n   Unidirectional operators reflect simple atomic functions such\
    \ as\n   automatic gain control, filtering tones from conferences, or applying\n\
    \   specific gain values to a stream.  Unidirectional operators have a\n   single\
    \ media input, which is connected to the media stream from one\n   object, and\
    \ a single media output, which is connected to the media\n   stream of a different\
    \ object.\n   Bidirectional operators have two media inputs and two media outputs.\n\
    \   One media input and output is associated with the stream to one\n   object,\
    \ and the other input and output is associated with a stream to\n   a different\
    \ object.  Bidirectional objects may treat the media\n   differently in each direction.\
    \  For example, an operator could be\n   defined that changed the media sent to\
    \ a connection based upon\n   recognized speech or dual-tone multi-frequency (DTMF)\
    \ received from\n   the connection.  Operators are implicitly instantiated when\
    \ streams\n   are created or modified using the elements <join> and <modifystream>,\n\
    \   respectively.\n   The relationships between the different object classes (conf,\
    \ conn,\n   and dialog) are shown in the figure below.\n              +--------------------------------------+\n\
    \              |           Media Server               |\n              |     \
    \                                 |\n              |------+                  \
    \    ,---.    |\n              |      |      +------+       /     \\   |\n   <==\
    \ RTP ==>| conn |<---->| oper |<---->( conf  )  |\n              |      |    \
    \  +------+       \\     /   |\n              |------+                      `---'\
    \    |\n              |   ^                           ^      |\n             \
    \ |   |                           |      |\n              |   |   +------+   \
    \ +------+    |      |\n              |   |   |      |    |      |    |      |\n\
    \              |   +-->|dialog|    |dialog|<---+      |\n              |     \
    \  |      |    |      |           |\n              |       +------+    +------+\
    \           |\n              +--------------------------------------+\n   A single,\
    \ full-duplex instance of each object class is shown together\n   with common\
    \ relationships between them.  An operator (such as gain)\n   is shown between\
    \ a connection and a conference and dialogs are shown\n   participating both with\
    \ an individual connection and with a\n   conference.  The figure is not meant\
    \ to imply only one-to-one\n   relationships.  Conferences will often have hundreds\
    \ of participants,\n   and either connections or conferences may be interacting\
    \ with more\n   than one dialog.  For example, one dialog may be recording a\n\
    \   conference while other dialogs announce participants joining or\n   leaving\
    \ the conference.\n"
- title: 6.2.  Identifiers
  contents:
  - "6.2.  Identifiers\n   Objects are referenced using identifiers that are composed\
    \ of one or\n   more terms.  Each term specifies an object class and names a specific\n\
    \   instance within that class.  The object class and instance are\n   separated\
    \ by a colon \":\" in an identifier term.\n   Identifiers are assigned to objects\
    \ when they are first created.  In\n   general, either the MSML client or a media\
    \ server may specify the\n   instance name for an object.  Objects for which a\
    \ client does not\n   assign an instance name will be assigned one by a media\
    \ server.\n   Media server assigned instance names are returned to the client\
    \ as a\n   complete object identifier in the response to the request that\n  \
    \ created the object.\n   It is meaningful for some classes of objects to exist\
    \ independently\n   on a media server.  Network connections may be created through\
    \ SIP at\n   any time.  MSML can then be used to associate their media with other\n\
    \   objects as required to create services.  Conferences may be created\n   and\
    \ have specific resources reserved waiting for participant\n   connections.\n\
    \   Objects from these two classes, connections and conferences, are\n   considered\
    \ independent objects since they can exist on a standalone\n   basis.  Identifiers\
    \ for independent objects consist of a single term\n   as defined above.  For\
    \ example, identifiers for a conference and\n   connection could be \"conf:abc\"\
    \ or \"conn:1234\" respectively.  Clients\n   that choose to assign instance names\
    \ to independent objects must use\n   globally unique instance names.  One way\
    \ to create globally unique\n   names is to include the domain name of the client\
    \ as part of the\n   name.\n   Dialogs are created to provide a service to independent\
    \ objects.\n   Dialogs may act as a participant in a conference or interact with\
    \ a\n   connection similar to a two-participant call.  Dialogs depend upon\n \
    \  the existence of independent objects, and this is reflected in the\n   composition\
    \ of their identifiers.  Operators modify the media flow\n   between other objects,\
    \ such as application of gain between a\n   connection and a conference.  As operators\
    \ are merely media transform\n   primitives defined as properties of the media\
    \ stream, they are not\n   represented by identifiers and created implicitly.\n\
    \   Identifiers for dialogs are composed of a structured list of slash\n   ('/')\
    \ separated terms.  The left-most term of the identifier must\n   specify a conference\
    \ or connection.  This serves as the root for the\n   identifier.  An example\
    \ of an identifier for a dialog acting as a\n   conference participant could be:\n\
    \      conf:abc/dialog:recorder\n   All objects except connections are created\
    \ using MSML.  Connections\n   are created when media sessions get established\
    \ through SIP.  There\n   are several options clients and media servers can use\
    \ to establish a\n   shared instance name for a connection and its media streams.\n\
    \   When media servers support multiple media types, the instance name\n   SHOULD\
    \ be a call identifier that can be used to identify the\n   collection of RTP\
    \ sessions associated with a call.  When MSML is used\n   in conjunction with\
    \ SIP and third party call control, the call\n   identifier MUST be the same as\
    \ the local tag assigned by the media\n   server to identify the SIP dialog. \
    \ This will be the tag the media\n   server adds to the \"To\" header in its response\
    \ to an initial invite\n   transaction.  RFC 3261 requires the tag values to be\
    \ globally unique.\n   An example of a connection identifier is: conn:74jgd63956ts.\n\
    \   With third party call control, the MSML client acts as a back-to-back\n  \
    \ user agent (B2BUA) to establish the media sessions.  SIP dialogs are\n   established\
    \ between the client and the media server allowing the use\n   of the media server\
    \ local tag as a connection identifier.  If third\n   party call control is not\
    \ used, a SIP event package MAY be used to\n   allow a media server to notify\
    \ new sessions to a client that has\n   subscribed to this information.\n   Identifiers\
    \ as described above allow every object in a media server\n   to be uniquely addressed.\
    \  They can also be used to refer to multiple\n   objects.  There are two ways\
    \ in which this can currently be done:\n      wildcards\n      common instance\
    \ names\n   An identifier can reference multiple objects when a wildcard is used\n\
    \   as an instance name.  MSML reserves the instance name composed of a\n   single\
    \ asterisk ('*') to mean all objects that have the same\n   identifier root and\
    \ class.  Instance names containing an asterisk\n   cannot be created.  Wildcards\
    \ MUST only be used as the right-most\n   term of an identifier and MUST NOT be\
    \ used as part of the root for\n   dialog identifiers.  Wildcards are only allowed\
    \ where explicitly\n   indicated below.\n   The following are examples of valid\
    \ wildcards:\n      conf:abc/dialog:*\n      conn:*\n   An example of illegal\
    \ wildcard usage is:\n      conf:*/dialog:73849\n   Although identifiers share\
    \ a common syntax, MSML elements restrict\n   the class of objects that are valid\
    \ in a given context.  As an\n   example, although it is valid to join two connections\
    \ together, it is\n   not valid to join two IVR dialogs.\n"
- title: 7.  MSML Core Package
  contents:
  - "7.  MSML Core Package\n   This section describes the core MSML package that MUST\
    \ be supported\n   in order to use any other MSML packages.  The core MSML package\n\
    \   defines a framework, without explicit functionality, over which\n   functional\
    \ packages are used.\n"
- title: 7.1.  <msml>
  contents:
  - "7.1.  <msml>\n   <msml> is the root element.  When received by a media server,\
    \ it\n   defines the set of operations that form a single MSML request.\n   Operations\
    \ are requested by the contents of the element.  Each\n   operation MAY appear\
    \ zero or more times as children of <msml>.\n   Specific operations are defined\
    \ within the conference package and in\n   the set of dialog packages.\n   The\
    \ results of a request or the contents of events sent by a media\n   server are\
    \ also enclosed within the <msml> element.  The results of\n   the transaction\
    \ are included as a body in the response to the SIP\n   request that contained\
    \ the transaction.  This response will contain\n   any identifiers that the media\
    \ server assigned to newly created\n   objects.  All messages that a media server\
    \ generates are correlated\n   to an object identifier.  Objects and identifiers\
    \ are discussed in\n   section 6 (Media Server Object Model).\n   Attributes:\n\
    \      version: \"1.1\" Mandatory\n"
- title: 7.2.  <send>
  contents:
  - "7.2.  <send>\n   Events are used to affect the behavior of different objects\
    \ within a\n   media server.  The <send> element is used to send an event to the\n\
    \   specified recipient within the media server.\n   Attributes:\n      event:\
    \ the name of an event.  Mandatory.\n      target: an object identifier.  When\
    \ the identifier is for a\n      dialog, it may optionally be appended with a\
    \ slash \"/\" followed by\n      the target to be included in an MSML dialog <send>.\
    \  Mandatory.\n      valuelist: a list of zero or more parameters that are included\n\
    \      with the event.\n      mark: a token that can be used to identify execution\
    \ progress in\n      the case of errors.  The value of the mark attribute from\
    \ the last\n      successfully executed MSML element is returned in an error\n\
    \      response.  Therefore, the value of all mark attributes within an\n    \
    \  MSML document should be unique.\n"
- title: 7.3.  <result>
  contents:
  - "7.3.  <result>\n   The <result> element is used to report the results of an MSML\n\
    \   transaction.  It is included as a body in the final response to the\n   SIP\
    \ request that initiated the transaction.  An optional child\n   element <description>\
    \ may include text that expands on the meaning of\n   error responses.  Response\
    \ codes are defined in section 11 (Response\n   Codes).\n   Attributes:\n    \
    \  response: a numeric code indicating the overall success or failure\n      of\
    \ the transaction, and in the case of failure, an indication of\n      the reason.\
    \  Mandatory.\n      mark: in the case of an error, the value of the mark attribute\n\
    \      from the last successfully executed element that included the mark\n  \
    \    attribute.\n   In the case of failure, a description of the reason SHOULD\
    \ be\n   provided using the child element <description>.\n   Three other child\
    \ elements allow the response to include identifiers\n   for objects created by\
    \ the request but that did not have instance\n   names specified by the client.\
    \  Those elements are <confid> and\n   <dialogid>, for objects created through\
    \ a <createconference> and\n   <dialogstart> respectively.\n"
- title: 7.4.  <event>
  contents:
  - "7.4.  <event>\n   The <event> element is used to notify an event to a media server\n\
    \   client.  Three types of events are defined by the MSML Core Package:\n   \"\
    msml.dialog.exit\", \"msml.conf.nomedia\", and \"msml.conf.asn\".  These\n   correspond\
    \ to the termination of an executing dialog, a conference\n   being automatically\
    \ deleted when the last participant has left, and\n   the notification of the\
    \ current set of active speakers for a\n   conference, respectively.  Events may\
    \ also be generated by an\n   executing dialog.  In this case, the event type\
    \ is specified by the\n   dialog (see MSML Dialog Core Package <send>).\n   Attributes:\n\
    \      name: the type of event.  If the event is generated because of the\n  \
    \    execution MSML dialog <send>, the value MUST be the value of the\n      \"\
    event\" attribute from the <send> element within the MSML Dialog\n      Core Package.\
    \  If the event is generated because of the execution\n      of an <exit>, the\
    \ value MUST be \"moml.exit\".  If the event is\n      generated because of the\
    \ execution of a <disconnect>, the value\n      MUST be \"moml.disconnect\". \
    \ If the event is generated because of\n      an error, the value must be \"moml.error\"\
    .  Mandatory.\n      id: the identifier of the conference or dialog that generated\
    \ the\n      event or caused the event to be generated.  Mandatory.\n      <event>\
    \ has two children, <name> and <value>, which contain the\n      name and value\
    \ respectively of each namelist item associated with\n      the event.\n"
- title: 8.  MSML Conference Core Package
  contents:
  - '8.  MSML Conference Core Package

    '
- title: 8.1.  Conferences
  contents:
  - "8.1.  Conferences\n   A conference has a mixer for each type of media that the\
    \ conference\n   supports.  Each mix has a corresponding description that defines\
    \ how\n   the media from participants contributes to that mix.  A mixer has\n\
    \   multiple inputs that are combined in a media specific way to create a\n  \
    \ single logical output.\n   The elements that describe the mix for each media\
    \ type are called\n   mixer description elements.  They are:\n   <audiomix> defines\
    \ the parameters for mixing audio media.\n   <videolayout> defines the composition\
    \ of a video window.\n   These elements, defined in sections 8.6 (Audio Mix) and\
    \ 8.7 (Video\n   Layout) respectively, are used as content of the <createconference>\n\
    \   element to establish the initial properties of a conference.  The\n   elements\
    \ are used within the <modifyconference> element to change the\n   properties\
    \ of a conference once it has been created, or within the\n   <destroyconference>\
    \ element to remove individual mixes from the\n   conference.\n   Conferences\
    \ may be terminated by an MSML client using the\n   <destroyconference> element\
    \ to remove the entire conference or by\n   removing the last mixer(s) associated\
    \ with the conference.\n   Conferences can also be terminated automatically by\
    \ a media server\n   based on criteria specified when the conference is created.\
    \  When the\n   conference is deleted, any remaining participants will have their\n\
    \   associated SIP dialogs left unchanged or deleted based on the value\n   of\
    \ the \"term\" attribute specified when the conference was created.\n"
- title: 8.2.  Media Streams
  contents:
  - "8.2.  Media Streams\n   Objects have at least one media input and output for\
    \ each type of\n   media that they support.  Each object class defines the number\
    \ of\n   input and output objects of that class support.  Media streams are\n\
    \   created when objects are joined, either explicitly using <join> or\n   implicitly\
    \ when dialogs are created using <dialogstart>.  Dialog\n   creation has two stages,\
    \ allocating and configuring the resources\n   required for the dialog instance,\
    \ and implicitly joining those\n   resources to the dialog target during the dialog\
    \ execution.  Refer to\n   the MSML Dialog Base Package.\n   A join operation\
    \ by default creates a bidirectional audio stream\n   between two objects.  Video\
    \ and unidirectional streams may also be\n   created.  A media stream is created\
    \ by connecting the output from one\n   object to the input of another object\
    \ and vice versa (assuming a\n   bidirectional or full-duplex join).\n   Many\
    \ objects may only support a single input for each type of media.\n   Within this\
    \ specification, only the conference object class supports\n   an arbitrary number\
    \ of inputs.  When a stream is requested to be\n   created to an object that already\
    \ has a stream of the same type\n   connected to its single input, the result\
    \ of the request depends upon\n   the type of the media stream.\n   Audio mixing\
    \ is done by summing audio signals.  Automatically mixing\n   audio streams has\
    \ common and straightforward applications.  For\n   example, the ability to bridge\
    \ two streams allows for the easy\n   creation of simple three-way calls or to\
    \ bridge private announcements\n   with a (whispered) conference mix for an individual\
    \ participant.  In\n   the case of general conferences, however, an MSML client\
    \ SHOULD\n   create an audio conference and then join participants to the\n  \
    \ conference.  Conference mixers SHOULD subtract the audio of each\n   participant\
    \ from the mix so that they do not hear themselves.\n   A media server receiving\
    \ a request that requires joining an audio\n   stream to the single audio input\
    \ of an object that already has an\n   audio stream connected SHOULD automatically\
    \ bridge the new stream\n   with the existing stream, creating a mix of the two\
    \ audio streams.\n   The maximum number of streams that may be bridged in this\
    \ manner is\n   implementation specific.  It is RECOMMENDED that a media server\n\
    \   support bridging at least two streams.  A media server that cannot\n   bridge\
    \ a new stream with any existing streams MUST fail the operation\n   requesting\
    \ the join.\n   Unlike audio mixing, there are many different ways that two video\n\
    \   streams may be combined and presented.  For example, they may be\n   presented\
    \ side by side in separate panes, picture in picture, or in a\n   single pane\
    \ that displays only a single stream at a time based on a\n   heuristic such as\
    \ active speaker.  Each of these options creates a\n   very different presentation\
    \ and requires significantly different\n   media resources.\n   A join operation\
    \ does not describe how a new stream can be combined\n   with an existing stream.\
    \  Therefore, automatic bridging of video is\n   not supported.  A media server\
    \ MUST fail requests to join a new video\n   stream to an object that only supports\
    \ a single video input and\n   already has a video stream connected to that input.\
    \  For an object to\n   have multiple video streams joined to it, the object itself\
    \ must be\n   capable in supporting multiple video streams.  Conference objects\
    \ can\n   support multiple video streams and provide a way to specify the\n  \
    \ mixing presentation for the video streams.\n   A media server MUST NOT establish\
    \ any streams unless the media server\n   is able to create all the streams requested\
    \ by an operation.  Streams\n   are only able to be created if both objects support\
    \ a media type and\n   at least one of the following conditions is true:\n   \
    \   1. Each object that is to receive media is not already receiving a\n     \
    \    stream of that type.\n      2. Any object that is to receive media and is\
    \ already receiving a\n         stream of that type supports receiving an additional\
    \ stream of\n         that type.  The only class of objects defined in this\n\
    \         specification that directly support receiving multiple streams\n   \
    \      of the same type are conferences.\n      3. The media server is able to\
    \ automatically bridge media streams\n         for an object that is to receive\
    \ media and that is already\n         receiving a stream of the requested type.\
    \  The only type of\n         media defined in this specification that MAY be\
    \ automatically\n         bridged is audio.\n   The directionality of media streams\
    \ associated with a connection is\n   modeled independently from what SDP [n9]\
    \ allows for the corresponding\n   RTP [i3] sessions.  Media servers MUST respect\
    \ the SDP in what they\n   actually transmit but MUST NOT allow the SDP to affect\
    \ the\n   directionality when joining streams internal to the media server.\n"
- title: 8.3.  <createconference>
  contents:
  - "8.3.  <createconference>\n   <createconference> is used to allocate and configure\
    \ the media mixing\n   resources for conferences.  A description of the properties\
    \ for each\n   type of media mix required for the conference is defined within\
    \ the\n   content of the <createconference> element.  Mixer descriptions are\n\
    \   described in Audio Mix and Video Layout sections.  When no mixer\n   descriptions\
    \ are specified, the default behavior MUST be equivalent\n   to inclusion of a\
    \ single <audiomix>.\n   Clients can request that a media server automatically\
    \ delete a\n   conference when a specified condition occurs by using the\n   \"\
    deletewhen\" attribute.  A value of \"nomedia\" indicates that the\n   conference\
    \ MUST be deleted when no participants remain in the\n   conference.  When this\
    \ occurs, an \"msml.conf.nomedia\" event MUST be\n   notified to the MSML client.\
    \  A value of \"nocontrol\" indicates that\n   the conference MUST be deleted\
    \ when the SIP [n1] dialog that carries\n   the <createconference> element is\
    \ terminated.  When this occurs, a\n   media server MUST terminate all participant\
    \ dialogs by sending a BYE\n   for their associated SIP dialog.  A value of \"\
    never\" MUST leave the\n   ability to delete a conference under the control of\
    \ the MSML client.\n   Attributes:\n      name: the instance name of the conference.\
    \  If the attribute is\n      not present, the media server MUST assign a globally\
    \ unique name\n      for the conference.  If the attribute is present but the\
    \ name is\n      already in use, an error (432) will result and MSML document\n\
    \      execution MUST stop.  Events that the conference generates use\n      this\
    \ name as the value of their \"id\" attribute (see section 7.4\n      (<event>)).\n\
    \      deletewhen: defines whether a media server should automatically\n     \
    \ delete the conference.  Possible values are \"nomedia\",\n      \"nocontrol\"\
    , and \"never\".  Default is \"nomedia\".\n      term: when true, the media server\
    \ MUST send a BYE request on all\n      SIP dialogs still associated with the\
    \ conference when the\n      conference is deleted.  Setting term equal to false\
    \ allows clients\n      to start dialogs on connections once the conference has\
    \ completed.\n      Default is \"true\".\n      mark: a token that MAY be used\
    \ to identify execution progress in\n      the case of errors.  The value of the\
    \ mark attribute from the last\n      successfully executed MSML element is returned\
    \ in an error\n      response.  Therefore, the value of all mark attributes within\
    \ an\n      MSML document should be unique.\n   An example of creating an audio\
    \ conference is shown below.  This\n   conference allows at most two participants\
    \ to contend to be heard and\n   reports the set of active speakers no more frequently\
    \ than every 10\n   seconds.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \      <msml version=\"1.1\">\n         <createconference name=\"example\">\n\
    \            <audiomix>\n               <n-loudest n=\"3\"/>\n               <asn\
    \ ri=\"10s\"/>\n            </audiomix>\n         </createconference>\n      </msml>\n"
- title: 8.3.1.  <reserve>
  contents:
  - "8.3.1.  <reserve>\n   Conference resources may be reserved by including the <reserve>\n\
    \   element as a child of <createconference>.  <reserve> allows the\n   specification\
    \ of a set of resources that a media server will reserve\n   for the conference.\
    \  Any requests for resources beyond those that\n   have been reserved should\
    \ be honored on a best-effort basis by a\n   media server.\n   Attributes:\n \
    \     required: boolean that specifies whether <createconference> should\n   \
    \   fail if the requested resources are not available.  When set to\n      false,\
    \ the conference will be created, with no reserved resources,\n      if the complete\
    \ reservation cannot be honored.  Default is \"true\".\n"
- title: 8.3.1.1.  <resource>
  contents:
  - "8.3.1.1.  <resource>\n   The resources to be reserved are defined using <resource>.\
    \  The\n   contents of these elements describe a resource that is to be\n   reserved.\
    \  Descriptions are implementation dependent.  Media servers\n   that support\
    \ MSML dialogs may use the elements from that package as\n   the basis for resource\
    \ descriptions.  Each resource element may use\n   the attribute \"n\" to define\
    \ the quantity of the resource to reserve.\n   For example, the following creates\
    \ a conference and reserves two\n   types of resources.  One resource element\
    \ may represent resources\n   that are shared by all participants of the conference,\
    \ while the\n   other may represent resources that are reserved for each of the\n\
    \   expected participants.\n   Attributes:\n      n: number of resources to be\
    \ reserved.  Default is 1.\n      type: specifies whether the resource is to be\
    \ reserved by each\n      individual participant or reserved as a shared conference\n\
    \      resource.  Valid values for this attribute are \"individual\" or\n    \
    \  \"shared\".  Default is \"individual\".\n      <createconference>\n       \
    \  <reserve>\n            <resource n=\"20\">\n              <!--description of\
    \ resources used by each participant-->\n            </resource>\n           \
    \ <resource n=\"2\" type=\"shared\">\n              <!--description of the shared\
    \ conference resources-->\n            </resource>\n         </reserve>\n    \
    \  </createconference>\n"
- title: 8.4.  <modifyconference>
  contents:
  - "8.4.  <modifyconference>\n   All of the properties of an audio mix or the presentation\
    \ of a video\n   mix may be changed during the life of a conference using the\n\
    \   <modifyconference> element.  Changes to an audio mix are requested by\n  \
    \ including an <audiomix> element as a child of <modifyconference>.\n   This may\
    \ also be used to add an audio mixer to the conference if none\n   was previously\
    \ allocated.  Changes to a video presentation are\n   requested by including a\
    \ <videolayout> element as a child of\n   <modifyconference>.  Similar to an audio\
    \ mixer, this may be used to\n   add a video mixer if none was previously allocated.\n\
    \   Mixers are removed by including a mixer description element within\n   <destroyconference/>.\n\
    \   Features and presentation aspects are enabled/added or modified by\n   including\
    \ the element(s) that define the feature or presentation\n   aspect within a mixer\
    \ description.  The complete specification of the\n   element must be included\
    \ just as it would be included when the\n   conference is created.  The new definition\
    \ completely replaces any\n   previous definition that existed.  Only things that\
    \ are defined by\n   elements included in the mixer descriptions are affected.\
    \  Any\n   existing configuration aspects of a conference, which are not\n   specified\
    \ within the <modifyconference/> element, MUST maintain their\n   current state\
    \ in the media server.\n   For example, if an MSML client wanted to change the\
    \ minimum reporting\n   interval for active speaker notification from that shown\
    \ in the\n   Conference Examples section (<createconference>) it would send the\n\
    \   following to the media server:\n      <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n      <msml version=\"1.1\">\n         <modifyconference id=\"conf:example\"\
    >\n            <audiomix>\n               <asn ri=\"4\"/>\n            </audiomix>\n\
    \         </modifyconference>\n      </msml>\n   This would also enable active\
    \ speaker notification if it had not\n   previously been enabled.  The N-loudest\
    \ mixing is unaffected.\n   Multiple elements MAY be included in the mixer descriptions\
    \ similar\n   to when conferences are created.  For example, in a video conference,\n\
    \   the video mix description (<videolayout>) could specify that the\n   layout\
    \ of the video being displayed should change such that the\n   regions currently\
    \ displaying participants get smaller and new\n   region(s) are created to support\
    \ additional participants.  A media\n   server MUST make all of the requested\
    \ changes or none of the\n   requested changes.\n   Additional examples of modifying\
    \ conferences are presented in the\n   Conference Examples section.\n   Attributes:\n\
    \      id: the identifier for a conference.  Wildcards MUST NOT be used.\n   \
    \   Mandatory.\n      mark: a token that can be used to identify execution progress\
    \ in\n      the case of errors.  The value of the mark attribute from the last\n\
    \      successfully executed MSML element is returned in an error\n      response.\
    \  Therefore, the value of all \"mark\" attributes within an\n      MSML document\
    \ SHOULD be unique.\n"
- title: 8.5.  <destroyconference>
  contents:
  - "8.5.  <destroyconference>\n   Destroy conference is used to delete mixers or\
    \ to delete the entire\n   conference and all state and shared resources.  When\
    \ a mixer is\n   removed, all of the streams joined to that mixer are unjoined.\
    \  When\n   a conference is destroyed, SIP dialogs for any remaining participants\n\
    \   MUST be maintained or removed based on the value of the \"term\"\n   attribute\
    \ when the conference was created.\n   When there is no element content, <destroyconference/>\
    \ deletes the\n   entire conference.  Individual mixers are removed by including\
    \ a\n   mixer description element identifying the mix (or mixes) to be\n   removed\
    \ as content to <destroyconference/>.  <audiomix/> is used\n   remove audio mixers\
    \ and <videolayout/> is used remove video mixers.\n   When one or more mixer descriptions\
    \ are specified, then media server\n   MUST only delete the specified mixer and\
    \ MUST NOT affect any other\n   existing mixers.  When <audiomix/> or <videolayout/>\
    \ is identified\n   for individual removal, other feature aspects of the mix MUST\
    \ NOT be\n   included.  If specified, the media server MUST ignore any such\n\
    \   elements.  When the last mixer is removed from a conference, a media\n   server\
    \ MUST remove all conference state, leaving or removing any\n   remaining SIP\
    \ dialogs as described above.\n   Attributes:\n      id: the identifier for a\
    \ conference.  Mandatory.\n      mark: a token that can be used to identify execution\
    \ progress in\n      the case of errors.  The value of the mark attribute from\
    \ the last\n      successfully executed MSML element is returned in an error\n\
    \      response.  Therefore, the value of all \"mark\" attributes within an\n\
    \      MSML document SHOULD be unique.\n"
- title: 8.6.  <audiomix>
  contents:
  - "8.6.  <audiomix>\n   The properties of the overall audio mix are specified using\
    \ the\n   <audiomix> element.\n   Attributes:\n      id: an optional identifier\
    \ for the audio mix.\n      samplerate: Integer value specifies the sample rate\
    \ (in Hz) for\n      the audio mixer.  Optional, default value of 8000.\n   An\
    \ example of the description for an audio mix is:\n      <audiomix id=\"mix1\"\
    >\n        <asn ri=\"10s\"/>\n        <n-loudest n=\"3\"/>\n      </audiomix>\n"
- title: 8.6.1.  <n-loudest>
  contents:
  - "8.6.1.  <n-loudest>\n   The <n-loudest> element defines that participants contend\
    \ to be\n   included in the conference mix based upon their audio energy.  When\n\
    \   the element is not present, all participants are mixed.\n   Attributes:\n\
    \      n: the number of participants that will be included in the audio\n    \
    \  mix based upon having the greatest audio energy.  Mandatory.\n"
- title: 8.6.2.  <asn>
  contents:
  - "8.6.2.  <asn>\n   The <asn> element enables notification of active speakers.\
    \  Active\n   speakers MUST be notified using the <event> element with an event\n\
    \   name of \"msml.conf.asn\".  The namelist of the event consists of the\n  \
    \ set of active speakers.  The name of each item is the string\n   \"speaker\"\
    \ with a value of the connection identifier for the\n   connection.\n   Attributes:\n\
    \      ri: the minimum reporting interval defines the minimum duration of\n  \
    \    time that must pass before changes to active speakers will be\n      reported.\
    \  A value of zero disables active speaker notification.\n      asth: specifies\
    \ the active speaker threshold (in unit of dBm0).\n      Valid value range is\
    \ 0 to -96.  Optional, default is -96.\n   An example of an active speaker notification\
    \ is:\n      <event name=\"msml.conf.asn\" id=\"conf:example\">\n         <name>speaker</name>\n\
    \         <value>conn:hd93tg5hdf</value>\n         <name>speaker</name>\n    \
    \     <value>conn:w8cn59vei7</value>\n         <name>speaker</name>\n        \
    \ <value>conn:p78fnh6sek47fg</value> </event>\n"
- title: 8.7.  <videolayout>
  contents:
  - "8.7.  <videolayout>\n   A video layout is specified using the <videolayout> element.\
    \  It is\n   used as a container to hold elements that describe all of the\n \
    \  properties of a video mix.  The parameters of the window that\n   displays\
    \ the video mix are defined by the <root> element.  When the\n   video mix in\
    \ composed of multiple panes, the location and\n   characteristics of the panes\
    \ are defined by one or more <region>\n   elements.  A <region> element is not\
    \ required when only a single\n   video stream is displayed at one time and none\
    \ of the visual\n   attributes of regions are required.\n   Some regions may be\
    \ used to display a video stream based on a\n   selection criteria rather than\
    \ having a video stream of a single\n   participant continuously presented in\
    \ the region.  One such an\n   example is a distance learning lecture where the\
    \ instructor sees each\n   of the students periodically displayed in a region.\
    \  When a region is\n   used to display one of a number of streams, it is placed\
    \ as a child\n   of a <selector> element.\n   Attributes:\n      type: specifies\
    \ the language used to define the layout.  Layouts\n      defined using MSML MUST\
    \ use the value \"text/msml-basic-layout\".\n      This is the same convention\
    \ as defined for the layout package from\n      the W3C SMIL 2.0 specification\
    \ [i6].  The default when omitted is\n      \"text/msml-basic-layout\".\n    \
    \  id: an optional identifier for the video layout.\n"
- title: 8.7.1.  <root>
  contents:
  - "8.7.1.  <root>\n   The <root> element describes the root window or virtual screen\
    \ in\n   which the conference video mix will be displayed.  Simple conferences\n\
    \   can display participant video directly within the root window but\n   more\
    \ complex conferences will use regions for this purpose.  Areas of\n   the window\
    \ which are not used to display video will show the root\n   window background.\n\
    \   All video presentations require a root window.  It MUST be present\n   when\
    \ a video mix is created and it cannot be deleted; however, its\n   attributes\
    \ MAY be changed using the <modifyconference> element.\n   Attributes:\n     \
    \ size: the size of the root window specified as one of the five\n      standard\
    \ common intermediate formats (e.g., CIF, QCIF).\n      backgroundcolor: the color\
    \ for the root window background defined\n      using the values for the \"background-color\"\
    \ property of the CSS2\n      specification [n10].\n      backgroundimage: the\
    \ URI for an image to be displayed as the root\n      window background.  Transparent\
    \ portions of the image allow the\n      background color to show through.\n"
- title: 8.7.2.  <region>
  contents:
  - "8.7.2.  <region>\n   <region> elements define video panes that are used to display\n\
    \   participant video streams.  Regions are rendered on top of the root\n   window.\n\
    \   The size of a region is specified relative to the size of the root\n   window\
    \ using the \"relativesize\" attribute.  Relative sizes are\n   expressed as fractions\
    \ (e.g., 1/4, 1/3) that preserve the aspect\n   ratio of the original video stream\
    \ while allowing for efficient\n   scaling implementations.\n   Regions are located\
    \ on the root window based on the value of the\n   position attributes \"top\"\
    \ and \"left\".  These attributes define the\n   position of the top left corner\
    \ of the region as an offset from the\n   top left corner of the root window.\
    \  Their values may be expressed\n   either as a number of pixels or as a percent\
    \ of the vertical or\n   horizontal dimension of the root window.  Percent values\
    \ are appended\n   with a percent ('%') character.  Percent values of \"33%\"\
    \ and \"67%\"\n   should be interpreted as \"1/3\" and \"2/3\" to allow easy alignment\
    \ of\n   regions whose size is expressed relative to the size of the root\n  \
    \ window.\n   An example of a video layout with six regions is:\n      +-------+---+\n\
    \      |       | 2 |\n      |   1   +---+\n      |       | 3 |\n      +---+---+---+\n\
    \      | 6 | 5 | 4 |\n      +---+---+---+\n      <videolayout type=\"text/msml-basic-layout\"\
    >\n         <root size=\"CIF\"/>\n         <region id=\"1\" left=\"0\" top=\"\
    0\" relativesize=\"2/3\"/>\n         <region id=\"2\" left=\"67%\" top=\"0\" relativesize=\"\
    1/3\"/>\n         <region id=\"3\" left=\"67%\" top=\"33%\" relativesize=\"1/3\"\
    >\n         <region id=\"4\" left=\"67%\" top=\"67%\" relativesize=\"1/3\"/>\n\
    \         <region id=\"5\" left=\"33%\" top=\"67%\" relativesize=\"1/3\"/>\n \
    \        <region id=\"6\" left=\"0\" top=\"67%\" relativesize=\"1/3\"/>\n    \
    \  </videolayout>\n   The area of the root window covered by a region is a function\
    \ of the\n   region's position and its size.  When areas of different regions\n\
    \   overlap, they are layered in order of their \"priority\" attribute.\n   The\
    \ region with the highest value for the \"priority\" attribute is\n   below all\
    \ other regions and will be hidden by overlapping regions.\n   The region with\
    \ the lowest non-zero value for the \"priority\"\n   attribute is on top of all\
    \ other regions and will not be hidden by\n   overlapping regions.  The priority\
    \ attribute may be assigned values\n   between 0 and 1.  A value of zero disables\
    \ the region, freeing any\n   resources associated with the region, and unjoining\
    \ any video stream\n   displayed in the region.\n   Regions that do not specify\
    \ a priority will be assigned a priority by\n   a media server when a conference\
    \ is created.  The first region within\n   the <videolayout> element that does\
    \ not specify a priority will be\n   assigned a priority of one, the second a\
    \ priority of two, etc.  In\n   this way, all regions that do not explicitly specify\
    \ a priority will\n   be underneath all regions that do specify a priority.  As\
    \ well,\n   within those regions that do not specify a priority, they will be\n\
    \   layered from top to bottom, in the order they appear within the\n   <videolayout>\
    \ element.\n   For example, if a layout was specified as follows:\n      <videolayout>\n\
    \         <root size=\"CIF\"/>\n         <region id=\"a\" ... priority=\".3\"\
    \ .../>\n         <region id=\"b\" ... />\n         <region id=\"c\" ... priority=\"\
    .2\" ...>\n         <region id=\"d\" ... />\n      </videolayout>\n   Then the\
    \ regions would be layered, from top to bottom, c,a,b,d.\n   Portions of regions\
    \ that extend beyond the root window will be\n   cropped.  For example, a layout\
    \ specified as:\n      <videolayout>\n         <root size=\"CIF\"/>\n        \
    \ <region id=\"foo\" left=\"50%\" top=\"50%\" relativesize=\"2/3\"/>\n      </videolayout>\n\
    \   would appear similar to:\n      +-----------+\n      |   root    |\n     \
    \ |background |\n      |     +-----+--\n      |     |     |//\n      |     | foo\
    \ |//\n      +-----+-----+//\n            |////////\n   Visual attributes are\
    \ used to define aspects of the visual appearance\n   of individual regions. \
    \ A border may be defined together with a title\n   and/or logo.  Text and logos\
    \ are displayed as images on top of the\n   region's video, below all regions\
    \ with a lower priority.  The visual\n   attributes are \"title\", \"titletextcolor\"\
    , \"titlebackgroundcolor\",\n   \"bordercolor\", \"borderwidth\", and \"logo\"\
    .\n   Visual attributes can also be defined for individual streams (Video\n  \
    \ Stream Properties).  When visual attributes are specified as part of\n   both\
    \ a region and a stream, those associated with the stream MUST\n   take precedence.\
    \  This allows streams that are chosen for display\n   automatically (Stream Selection)\
    \ to have proper text and logos\n   displayed.  The region visual attributes are\
    \ displayed when no stream\n   is associated with the region.\n   Two other attributes\
    \ associated with a region, \"blank\" and \"freeze\",\n   define the state of\
    \ the video displayed in the region.  When the\n   blank or freeze attribute is\
    \ assigned the value \"true\", then the\n   media server MUST display the region\
    \ either as a blank region, or the\n   video image frozen at the last received\
    \ frame.\n   These attributes are specified for a region and not allowed for\n\
    \   streams because that appears to be the common use case.  Applying\n   them\
    \ to streams would allow only that stream to be affected within a\n   selector\
    \ while other streams continue to display normally.  Except\n   for personal mixing\
    \ scenarios, the same effect can be achieved by\n   having the participant mute\
    \ their own transmission to the media\n   server.\n   Attributes: associated with\
    \ each region:\n      id: a name that can be used to refer to the region.\n  \
    \    left: the position of the region from the left side of the root\n      window.\n\
    \      top: the position of the region from the top of the root window.\n    \
    \  relativesize: the size of the region expressed as a fraction of\n      the\
    \ root window size.\n      priority: a number between 0 and 1 that is used to\
    \ define the\n      precedence when rendering overlapping regions.  A value of\
    \ zero\n      disables the region.\n      title: text to be displayed as the title\
    \ for the region\n      titletextcolor: the color of the text\n      titlebackgroundcolor:\
    \ the color of the text background\n      bordercolor: the color of the region\
    \ border\n      borderwidth: the width of the region border\n      logo: the URI\
    \ of an image file to be displayed\n      freeze: a boolean value, with a default\
    \ of \"false\", that defines\n      whether the video image should be frozen at\
    \ the currently\n      displayed frame\n      blank: a boolean value, with a default\
    \ of \"false\", that defines\n      whether the region should display black instead\
    \ of the associated\n      video stream\n"
- title: 8.7.3.  <selector>
  contents:
  - "8.7.3.  <selector>\n   It is often desired that one of several video streams\
    \ be\n   automatically selected to be displayed.  The <selector> element is\n\
    \   used to define the selection criteria and its associated parameters.\n   The\
    \ selection algorithm is specified by the \"method\" attribute.\n   Currently\
    \ defined selection methods allow for voice activated\n   switching and to iterate\
    \ sequentially through the set of associated\n   video streams.\n   The regions\
    \ that will display the selected video stream are placed as\n   child elements\
    \ of the <selector> element.  Including regions within a\n   <selector> element\
    \ does not affect their layout with respect to\n   regions not subject to the\
    \ selection.  For simple video conferences\n   that display the video directly\
    \ in the root window, the <root>\n   element can be placed as a child of <selector>.\
    \  Region elements MUST\n   NOT be used in this case.\n   For example, below is\
    \ a common video layout that allows the video\n   stream from the currently active\
    \ speaker to be displayed in the large\n   region (\"1\") at the top left of the\
    \ layout while the streams from\n   five other participants are displayed in regions\
    \ located at the\n   layout periphery.\n      +-------+---+\n      |       | 2\
    \ |\n      |   1   +---+\n      |       | 3 |\n      +---+---+---+\n      | 6\
    \ | 5 | 4 |\n      +---+---+---+\n      <videolayout type=\"text/msml-basic-layout\"\
    >\n         <root size=\"CIF\"/>\n         <selector id=\"switch\" method=\"vas\"\
    >\n            <region id=\"1\" left=\"0\" top=\"0\" relativesize=\"2/3\"/>\n\
    \         </selector>\n         <region id=\"2\" left=\"67%\" top=\"0\" relativesize=\"\
    1/3\"/>\n         <region id=\"3\" left=\"67%\" top=\"33%\" relativesize=\"1/3\"\
    >\n         <region id=\"4\" left=\"67%\" top=\"67%\" relativesize=\"1/3\"/>\n\
    \         <region id=\"5\" left=\"33%\" top=\"67%\" relativesize=\"1/3\"/>\n \
    \        <region id=\"6\" left=\"0\" top=\"67%\" relativesize=\"1/3\"/>\n    \
    \  </videolayout>\n   All selector methods must be defined so that they work if\
    \ only a\n   single region is a child of the selector.  Selector methods that\n\
    \   support more than one child region MUST specify how the method works\n   across\
    \ multiple regions.  Media server implementations MAY support\n   only a single\
    \ region for methods that are defined to allow multiple\n   regions.\n   The selector\
    \ or region for a participant's video is defined using the\n   \"display\" attribute\
    \ of <stream> during a join operation.  Specifying\n   a selector allows the stream\
    \ to be displayed according to the\n   criteria defined by the selector method.\
    \  Specifying a region\n   supports continuous presence display of participants.\
    \  Some streams\n   may be joined with both a selector and a region.  In this\
    \ case, the\n   value of <blankothers> attribute defines whether the streams\n\
    \   associated with a continuous presence region should be blanked when\n   the\
    \ stream is selected for display in one of the selector regions.\n   Attributes:\
    \ common to all selector methods are:\n      id: a name that can be used to refer\
    \ to the selector.\n      method: the name of the method used to select the video\
    \ stream.  A\n      value of \"vas\" (see the following section, Voice Activated\n\
    \      Switching) MAY be specified.\n      status: specifies whether the selector\
    \ is \"active\" or \"disabled\".\n      blankothers: when \"true\", video streams\
    \ that are also displayed in\n      continuous presence regions will have the\
    \ continuous presence\n      regions blanked when the stream is displayed in a\
    \ selection\n      region.\n"
- title: 8.7.3.1.  Voice Activated Switching ("vas")
  contents:
  - "8.7.3.1.  Voice Activated Switching (\"vas\")\n   Voice activated switching (VAS)\
    \ is used to display the video stream\n   that correlates with the participant\
    \ who is currently speaking.  It\n   is specified using a selector method value\
    \ of \"vas\".\n   If the video stream associated with the active speaker is not\n\
    \   currently displayed in a selection region, then it replaces the video\n  \
    \ in the region that is displaying the video of the speaker that was\n   least\
    \ recently active.  If the video of the active speaker is\n   currently displayed\
    \ in a selection region, then there is no change to\n   any region.  When VAS\
    \ is applied to a single region, this has the\n   effect that the current speaker\
    \ is displayed in that region.\n   Attributes:\n      si: switching interval is\
    \ the minimum period of time that must\n      elapse before allowing the video\
    \ to switch to the active speaker.\n      speakersees: defines whether the active\
    \ speaker sees the \"current\"\n      speaker (themselves) or the \"previous\"\
    \ speaker.\n"
- title: 8.8.  <join>
  contents:
  - "8.8.  <join>\n   <join> is used to create one or more streams between two independent\n\
    \   objects.  Streams may be audio or video and may be bidirectional or\n   unidirectional.\
    \  A bidirectional stream is implicitly composed of two\n   unidirectional streams\
    \ that can be manipulated independently.  The\n   streams to be established are\
    \ specified by <stream> elements (section\n   <stream>) as the content of <join>.\n\
    \   Without any content, <join> by default establishes a bidirectional\n   audio\
    \ stream.  When only a stream of a single type has previously\n   been created\
    \ between two objects, or when only a unidirectional\n   stream exists, <join>\
    \ can be used to add a stream of another media\n   type or make the stream bidirectional\
    \ by including the necessary\n   <stream> elements.  Bidirectional streams are\
    \ made unidirectional by\n   using <unjoin> (section <unjoin>) to remove the unidirectional\
    \ stream\n   for the direction that is no longer required.\n   In addition to\
    \ defining the media type and direction of streams,\n   <stream> elements are\
    \ also used to establish the properties of\n   streams, such as gain, voice masking,\
    \ or tone clamping of audio\n   streams, or labels and other visual characteristics\
    \ of video streams.\n   Properties are often defined asymmetrically for a single\
    \ direction of\n   a stream.  Creating a bidirectional stream requires two <stream>\n\
    \   elements within the <join>, one for each direction, if one direction\n   is\
    \ to have different properties from the other direction.\n   If a media server\
    \ can provide services using both compressed or\n   uncompressed media, the MSML\
    \ client may need to distinguish within\n   requests which format is to be used.\
    \  When compressed streams are\n   created, both objects must use the same media\
    \ format or an error\n   response (450) is generated.\n   Attributes:\n      id1:\
    \ an identifier of either a connection or conference.\n      Wildcards MUST NOT\
    \ be used.  Mandatory.  Any other object class\n      results in a 440 error.\n\
    \      id2: an identifier of either a connection or conference.\n      Wildcards\
    \ MUST NOT be used.  Mandatory.  Any other object class\n      results in a 440\
    \ error.\n      mark: a token that can be used to identify execution progress\
    \ in\n      the case of errors.  The value of the mark attribute from the last\n\
    \      successfully executed MSML element is returned in an error\n      response.\
    \  Therefore, the value of all mark attributes within an\n      MSML document\
    \ SHOULD be unique.\n   For example, consider a call center coaching scenario\
    \ where a\n   supervisor can listen to the conversation between an agent and a\n\
    \   customer and provide hints to the agent, which are not heard by the\n   customer.\
    \  One join establishes a stream between the agent and the\n   customer and another\
    \ join establishes a stream between the agent and\n   the supervisor.  A third\
    \ join is used to establish a half-duplex\n   stream from the customer to the\
    \ supervisor.  The media server\n   automatically bridges the media streams from\
    \ the customer and the\n   supervisor for the agent, and from the customer and\
    \ the agent for the\n   supervisor.\n   Assuming the following connections, each\
    \ with a single audio stream:\n      conn:supervisor\n      conn:agent\n     \
    \ conn:customer\n   The following would create the media flows previously described:\n\
    \      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"1.1\"\
    >\n         <join id1=\"conn:supervisor\" id2=\"conn:agent\"/>\n         <join\
    \ id1=\"conn:agent\" id2=\"conn:customer\"/>\n         <join id1=\"conn:supervisor\"\
    \ id2=\"conn:customer\">\n            <stream media=\"audio\" dir=\"to-id1\"/>\n\
    \         </join>\n      </msml>\n      The following example shows joining a\
    \ participant to a multimedia\n      conference.  It assumes that the conference\
    \ has a video\n      presentation region named \"topright\".  The \"display\"\
    \ attribute is\n      explained in the section Video Stream Properties.\n    \
    \  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"1.1\">\n\
    \         <join id1=\"conn:hd83t5hf7g3\" id2=\"conf:example\">\n            <stream\
    \ media=\"audio\"/>\n            <stream media=\"video\" dir=\"from-id1\" display=\"\
    topright\"/>\n            <stream media=\"video\" dir=\"to-id1\"/>\n         </join>\n\
    \      </msml>\n"
- title: 8.9.  <modifystream>
  contents:
  - "8.9.  <modifystream>\n   Media streams can have different properties such as\
    \ the gain for an\n   audio stream or a visual label for a video stream.  These\
    \ properties\n   are specified as the content of <stream> elements (section <stream>).\n\
    \   <modifystream> is used to change the properties of a stream by\n   including\
    \ one or more <stream> elements that are to have their\n   properties changed.\n\
    \   Stream properties MUST be set as specified by the element <stream> as\n  \
    \ a child element of <modifystream> element.  Any properties not\n   included\
    \ in the <stream> element when modifying a stream MUST remain\n   unchanged. \
    \ Setting a property for only one direction of a\n   bidirectional stream MUST\
    \ NOT affect the other direction.  The\n   directionality of streams can be changed\
    \ by issuing an <unjoin>\n   followed by a <join>.  Any streams that exist between\
    \ the two objects\n   that are not included within <modifystream> MUST NOT be\
    \ affected.\n   Attributes:\n      id1: an identifier of either a conference or\
    \ a connection.  The\n      instance name MUST NOT contain a wildcard if \"id2\"\
    \ contains a\n      wildcard.  Mandatory.\n      id2: an identifier of either\
    \ a conference or a connection.  The\n      instance name MUST NOT contain a wildcard\
    \ if \"id1\" contains a\n      wildcard.  Mandatory.\n      mark: a token that\
    \ can be used to identify execution progress in\n      the case of errors.  The\
    \ value of the mark attribute from the last\n      successfully executed MSML\
    \ element is returned in an error\n      response.  Therefore, the value of all\
    \ mark attributes within an\n      MSML document is RECOMMENDED to be unique.\n"
- title: 8.10.  <unjoin>
  contents:
  - "8.10.  <unjoin>\n   Unjoin removes one or more media streams between two objects.\
    \  In the\n   absence of any content in the <stream> element, all media streams\n\
    \   between the objects MUST be removed.  Individual streams may be\n   removed\
    \ by specifying them using <stream> elements, while the\n   unspecified streams\
    \ MUST NOT be removed.  A bidirectional stream is\n   changed to a unidirectional\
    \ stream by unjoining the direction that is\n   no longer required, using the\
    \ <unjoin> element.  Operator elements\n   MUST NOT be specified within <stream>\
    \ elements when streams are being\n   unjoined using the <unjoin> element.  Any\
    \ specified stream operators\n   MUST be ignored.\n   <unjoin> and <join> may\
    \ be used together to move a media stream, such\n   as from a main conference\
    \ to a sidebar conference.\n   Attributes:\n      id1: an identifier of either\
    \ a conference or a connection.  The\n      instance name MUST NOT contain a wildcard\
    \ if \"id2\" contains a\n      wildcard.  Mandatory.\n      id2: an identifier\
    \ of either a conference or a connection.  The\n      instance name MUST NOT contain\
    \ a wildcard if \"id1\" contains a\n      wildcard.  Mandatory.\n      mark: a\
    \ token that can be used to identify execution progress in\n      the case of\
    \ errors.  The value of the mark attribute from the last\n      successfully executed\
    \ MSML element is returned in an error\n      response.  Therefore, the value\
    \ of all mark attributes within an\n      MSML document SHOULD be unique.\n  \
    \ The following removes a participant from a conference and plays a\n   leave\
    \ tone for the remaining participants in the conference.\n      <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"1.1\">\n         <unjoin id1=\"\
    conn:jd73ht89sf489f\" id2=\"conf:1\"/>\n         <dialogstart target=\"conf:1\"\
    \ type=\"application/moml+xml\">\n            <play>\n               <audio uri=\"\
    file://leave_tone.wav\"/>\n            </play>\n         </dialogstart>\n    \
    \  </msml>\n"
- title: 8.11.  <monitor>
  contents:
  - "8.11.  <monitor>\n   Monitor is a specialized unidirectional join that copies\
    \ the media\n   that is destined for a connection object.  One example of the\
    \ use for\n   <monitor> may be quality monitoring within a conference.  The media\n\
    \   stream may be removed using the <unjoin> element (see the section\n   <unjoin>).\n\
    \   Attributes:\n      id1: an identifier of the connection to be monitored. \
    \ Mandatory.\n      Any other object class results in a 440 error.  Wildcards\
    \ MUST NOT\n      be used.\n      id2: an identifier of the object that is to\
    \ receive the copy of\n      the media destined to id1.  id2 may be a connection\
    \ or a\n      conference.  Mandatory.  Any other object class results in a 440\n\
    \      error.  Wildcards MUST NOT be used.\n      compressed: \"true\" or \"false\"\
    .  Specifies whether the join should\n      occur before or after compression.\
    \  When \"true\", id2 must be a\n      connection using the same media format\
    \ as id1 or an error response\n      (450) is generated.  Default is \"false\"\
    .\n      mark: a token that can be used to identify execution progress in\n  \
    \    the case of errors.  The value of the mark attribute from the last\n    \
    \  successfully executed MSML element is returned in an error\n      response.\
    \  Therefore, the value of all mark attributes within an\n      MSML document\
    \ SHOULD be unique.\n"
- title: 8.12.  <stream>
  contents:
  - "8.12.  <stream>\n   Individual streams are specified using the <stream> element.\
    \  They\n   MAY be included as a child element in any of the stream manipulation\n\
    \   elements <join>, <modifystream>, or <unjoin>.\n   The type of the stream is\
    \ specified using a \"media\" attribute that\n   uses values corresponding to\
    \ the top-level MIME media types as\n   defined in RFC 2046 [i7].  This specification\
    \ only addresses audio\n   and video media.  Other specifications may define procedures\
    \ for\n   additional types.\n   A bidirectional stream is identified when no direction\
    \ attribute\n   \"dir\" is present.  A unidirectional stream is identified when\
    \ a\n   direction attribute is present.  The \"dir\" attribute MUST have a\n \
    \  value of \"from-id1\" or \"to-id1\" depending on the required direction.\n\
    \   These values are relative to the identifier attributes of the parent\n   element.\n\
    \   The compressed attribute is used to distinguish the compressed nature\n  \
    \ of the stream when necessary.  It is implementation specific what is\n   used\
    \ when the attribute is not present.  Joining compressed streams\n   acts much\
    \ like an RTP [i3] relay.\n   The properties of the media streams are specified\
    \ as the content of\n   <stream> elements when the element is used as a child\
    \ of <join> or\n   <modifystream>.  Stream elements MUST NOT have any content\
    \ when they\n   are used as a child of <unjoin> to identify specific streams to\n\
    \   remove.\n   Some properties are defined within MSML as additional attributes\
    \ or\n   child elements of <stream> that are media type specific.  Ones for\n\
    \   audio streams and video streams are defined in the following two sub-\n  \
    \ sections.  Operators, viewed as properties of the media stream, MAY\n   be specified\
    \ as child elements of the <stream> element.\n   Attributes:\n      media: \"\
    audio\" or video\".  Mandatory\n      dir: \"from-id1\" or \"to-id1\".\n     \
    \ compressed: \"true\" or \"false\".  Specifies whether the stream uses\n    \
    \  compressed media.  Default is implementation specific.\n"
- title: 8.12.1.  Audio Stream Properties
  contents:
  - "8.12.1.  Audio Stream Properties\n   Audio mixes can be specified to only mix\
    \ the N-loudest participants.\n   However, there may be some \"preferred\" participants\
    \ that are always\n   able to contribute.  When audio streams are joined to a\
    \ conference\n   that uses N-loudest audio mixing, preferred streams need to be\n\
    \   identified.\n   A preferred audio stream is identified using the \"preferred\"\
    \n   attribute.  The \"preferred\" attribute MAY be used for an audio stream\n\
    \   that is input to a conference and MUST NOT be used for other streams.\n  \
    \ Additional attributes of the <stream> element for audio streams are:\n   Attributes:\n\
    \      preferred: a boolean value that defines whether the stream does\n     \
    \ not contend for N-loudest mixing.  A value of \"true\" means that\n      the\
    \ stream MUST always be mixed while a value of \"false\" means\n      that the\
    \ stream MAY contend for mixing into a conference when\n      N-loudest mixing\
    \ is enabled.  Default is \"false\".\n   There are two elements that can be used\
    \ to change the characteristics\n   of an audio stream as defined below.\n"
- title: 8.12.1.1.  <gain>
  contents:
  - "8.12.1.1.  <gain>\n   The <gain> element may be used to adjust the volume of\
    \ an audio media\n   stream.  It may be set to a specific gain amount, to automatically\n\
    \   adjust the gain to a desired target level, or to mute the stream.\n   Attributes:\n\
    \      id: an optional identifier that may be referenced elsewhere for\n     \
    \ sending events to the gain primitive.\n      amt: a specific gain to apply specified\
    \ in dB or the string \"mute\"\n      indicating that the stream should be muted.\
    \  This attribute MUST\n      NOT be used if \"agc\" is present.\n      agc: boolean\
    \ indicating whether automatic gain control is to be\n      used.  This attribute\
    \ MUST NOT be used if \"amt\" is present.\n      tgtlvl: the desired target level\
    \ for AGC specified in dBm0.  This\n      attribute MUST be specified if \"agc\"\
    \ is set to \"true\".  This\n      attribute MUST NOT be specified if \"agc\"\
    \ is not present.\n      maxgain: the maximum gain that AGC may apply.  Maxgain\
    \ is\n      specified in dB.  This attribute MUST be used if \"agc\" is present\n\
    \      and MUST NOT be used when \"agc\" is not present.\n"
- title: 8.12.1.2.  <clamp>
  contents:
  - "8.12.1.2.  <clamp>\n   The <clamp> element is used to filter tones and/or audio-band\
    \ dtmf\n   from a media stream.\n   Attributes:\n      dtmf: boolean indicating\
    \ whether DTMF tones should be removed.\n      tone: boolean indicating whether\
    \ other tones should be removed.\n"
- title: 8.12.2.  Video Stream Properties
  contents:
  - "8.12.2.  Video Stream Properties\n   Video mixes define a presentation that may\
    \ have multiple regions,\n   such as a quad-split.  Each region displays the video\
    \ from one or\n   more participants.  When video streams are joined to such a\n\
    \   conference, the region that will display the video needs to be\n   specified\
    \ as part of the join operation.\n   The region that will display the video is\
    \ specified using the\n   \"display\" attribute.  The \"display\" attribute MUST\
    \ be used for a\n   video stream that is input to a conference and MUST NOT be\
    \ used for\n   other streams.  The value of the attribute MUST identify a <region>\n\
    \   (see the section <region>) or a <selector> (see the section\n   <selector>)\
    \ that is defined for the conference.  A stream MUST NOT be\n   directly joined\
    \ to a region that is defined within a selector.\n   Changing the value of the\
    \ \"display\" attribute can be used to change\n   where in a video presentation\
    \ layout a video stream is displayed.\n   Additional attributes of the <stream>\
    \ element for video streams are:\n   Attributes:\n      display: the identifier\
    \ of a video layout region or selector that\n      is to be used to display the\
    \ video stream.\n      override: specifies whether or not the given video stream\
    \ is the\n      override source in the region defined by \"display\" attribute.\n\
    \      Valid values are \"true\" or \"false\".  Optional, default value is\n \
    \     \"false\".  Only a video stream that is input to a conference can be\n \
    \     the override source.  A particular region can have at most one\n      override\
    \ source at a time.  The most recently joined video stream\n      with this attribute\
    \ set to \"true\" becomes the override source.\n      When there's an override\
    \ source in place, its video is always\n      displayed in the region, regardless\
    \ of what video selection\n      algorithm (either a selector or continuous presence\
    \ mode) is\n      configured for that region.  Once the override source is cleared,\n\
    \      the conference MUST revert back to original video selection\n      algorithm.\n"
- title: 8.12.2.1.  <visual>
  contents:
  - "8.12.2.1.  <visual>\n   Some regions of video conferences may display different\
    \ streams\n   automatically, such as when voice activated switching is used.\n\
    \   Connections MAY also be joined directly without the use of video\n   mixing.\
    \  In these cases, the <visual> element may be used to define\n   visual display\
    \ properties for a stream.\n   The <visual> element MAY use any of the visual\
    \ attributes defined for\n   regions (see the section <region>).  This allows\
    \ the visual aspects\n   of regions within a <selector> to be tailored to the\
    \ selected video\n   stream, or for streams that are directly joined to display\
    \ a name or\n   logo.\n"
- title: 9.  MSML Dialog Packages
  contents:
  - '9.  MSML Dialog Packages

    '
- title: 9.1.  Overview
  contents:
  - "9.1.  Overview\n   MSML Dialog Packages define an XML [n2] language for composing\n\
    \   complex media objects from a vocabulary of simple media resource\n   objects\
    \ called primitives.  It is primarily a descriptive or\n   declarative language\
    \ to describe media processing objects.  MSML\n   dialogs operate on a single\
    \ or multiple streams that are identified\n   by the MSML document outside the\
    \ scope of the MSML Dialog Package.\n   MSML dialogs are intended to be used in\
    \ different environments.  As\n   such, the language itself does not define how\
    \ an MSML dialog is used.\n   Each environment in which an MSML dialog is used\
    \ must define how it\n   is used, the set of services provided, and the mechanism\
    \ for passing\n   information between the environment and MSML dialog.  The specific\n\
    \   mechanisms used to realize the interface between MSML dialog and its\n   environment\
    \ are platform specific.\n   MSML Dialog Packages provide two models for access\
    \ to media resources\n   and service creation building blocks.  Both models MAY\
    \ be used in\n   conjunction with each other in a complementary manner.  The first\n\
    \   model (referred to as \"Media Primitives and Composites\", part of the\n \
    \  mandatory MSML Dialog Base Package) contains media primitives (such\n   as\
    \ digit collection and announcements) and composite functions (such\n   as play\
    \ and collect combined as a single operation).  The second\n   model (referred\
    \ to as \"Media Groups\", part of the optional MSML\n   Dialog Group Package)\
    \ allows the ability to define complex customized\n   interactions, via event\
    \ passing mechanisms, between media primitives,\n   if required.\n      MSML Dialog\
    \ Core Package\n         Defines core framework over which all MSML Dialog Packages\n\
    \         operate.\n      MSML Dialog Base Package\n         Media Primitives\n\
    \            <dtmf> or <collect>\n                        DTMF digit collection\n\
    \            <play>\n                        Playing of Announcements\n      \
    \      <dtmfgen>\n                        Generation of DTMF digits\n        \
    \    <tonegen>\n                        Tone genration\n            <record>\n\
    \                        Media recording\n         Media Composites\n        \
    \    <collect>\n                        Supports play and collect operation.\n\
    \                        Composite function with inclusion of play.\n        \
    \    <record>\n                        Supports play and record operation.\n \
    \                       Composite function with inclusion of play.\n      MSML\
    \ Dialog Group Package\n            <group>\n                        Allows grouping\
    \ of media primitives for parallel\n                        execution, with an\
    \ event exchange mechanism\n                        between the media primitives\
    \ to achieve\n                        customized media operations. All the above\
    \ media\n                        primitive elements are accepted within the\n\
    \                        group.\n   The following operations MUST be supported\
    \ using elements described\n   above using either the MSML Dialog Base Package\
    \ or MSML Dialog Group\n   Package.\n      Announcement only\n               \
    \         <play>\n            Collection only\n                        <dtmf>\
    \ or <collect>\n            Recording only\n                        <record>\n\
    \            Play and Collect\n                        <collect>\n           \
    \                <play/>\n                        </collect>\n            Play\
    \ and Record\n                        <record>\n                           <play/>\n\
    \                        </record>\n   Additional MSML Dialog Packages are:\n\
    \      o MSML Dialog Transform Package\n      o MSML Dialog Speech Package\n \
    \     o MSML Fax Detection Package\n      o MSML Fax Send/Receive Package\n  \
    \ MSML dialogs MAY be used to simply expose primitive media resource\n   objects\
    \ but will be used more often to describe dialog operations and\n   media transformation\
    \ objects that can be controlled via user\n   interaction.\n   MSML dialogs do\
    \ not contain any computation or flow control\n   constructs.  There are no results\
    \ automatically generated when media\n   operations complete.  Results MUST be\
    \ explicitly requested using a\n   <send> or <exit> element within the definition\
    \ of the MSML dialog.\n"
- title: 9.2.  Primitives
  contents:
  - "9.2.  Primitives\n   Primitives perform a single function on a media stream or\
    \ multiple\n   streams such as generating audio/video, recognizing speech or DTMF,\n\
    \   or adjusting the gain.  They may be composed so that primitives\n   execute\
    \ concurrently.  Primitives not composed for concurrent\n   execution MUST simply\
    \ execute sequentially in the order they occur in\n   an MSML document.  All concurrently\
    \ executing primitives in the same\n   MSML object (defined in one MSML document)\
    \ MAY interact with each\n   other through events (see MSML Dialog Group Package).\n\
    \   Primitives are categorized into one of the following descriptive\n   categories.\n\
    \      o  Recognizers have a media input but no output.  They allow\n        \
    \ different things within a media stream to be recognized or\n         detected\
    \ and for events to be generated based upon received\n         media.\n      o\
    \  Transformers have one media input and output and may send and\n         receive\
    \ events.\n      o  Sources and sinks generate or consume media.  They have either\n\
    \         a media input or a media output but not both.  They may receive\n  \
    \       and generate events.\n      o  Composites combine underlying primitives\
    \ to provide higher-\n         level user interaction, without the need for specific\
    \ event-\n         based exchange between the primitives.  The composite elements\n\
    \         provide a simpler mechanism for more commonly used services,\n     \
    \    such as play and collect or play and record.\n   Primitives may define different\
    \ media processing behavior (states)\n   based upon the events that they receive.\
    \  Primitives that support\n   different processing states must define their default\
    \ starting state\n   and should support the \"initial\" attribute to allow that\
    \ state to be\n   specified when the primitive is instantiated.  All primitives\
    \ must\n   support the \"terminate\" event class.\n   The following types of primitives\
    \ are defined within this\n   specification:\n      Recognizers    Transformers\
    \   Source/Sink   Composites\n      ------------------------------------------------------\n\
    \       dtmf/collect   agc            play          dtmf/collect\n       faxdetect\
    \      clamp          record        record\n       speech         gain       \
    \    dtmfgen\n       vad            gate           tonegen\n                 \
    \     relay          faxsend\n                                     faxrcv\n  \
    \ Primitives have shadow variables, similar to those within VoiceXML\n   [n5],\
    \ which are automatically assigned values when the primitives are\n   used.  Upon\
    \ initialization of an MSML dialog context, all shadow\n   variables have the\
    \ string value \"undefined\".  Each primitive has its\n   own instance of shadow\
    \ variables that are global in scope to the\n   entire MSML dialog context.\n\
    \   Names SHOULD be assigned to individual primitives when more than one\n   primitive\
    \ of the same type is used within one MSML document.  Shadow\n   variables are\
    \ overwritten if the primitive has not been named and is\n   instantiated a second\
    \ time.\n   Shadow variables cannot be modified under user control.  They may\
    \ be\n   returned from the MSML dialog context using the <send> element.\n"
- title: 9.3.  Events
  contents:
  - "9.3.  Events\n   Events provide the mechanism for primitives to interact with\
    \ each\n   other and for an MSML context to interact with its external\n   environment.\
    \  The external environment is defined by the way in which\n   an MSML context\
    \ has been invoked.  This will often be through MSML,\n   but other languages\
    \ and protocols such as SIP may also be used.\n   Every primitive and group conceptually\
    \ implements their own event\n   queue.  Events sent to them get placed into their\
    \ associated queue.\n   Events are removed from their queues and processed in\
    \ order.\n   Primitives within a group conceptually have their own thread of\n\
    \   execution.  Due to the asynchronous nature of servicing events from\n   multiple\
    \ queues, it cannot be assumed that several events sent in\n   sequence to different\
    \ queues will be processed in the order in which\n   they were sent.  For example,\
    \ if recognition of something led to\n   sending events to both a <play> and a\
    \ <record> in that order, it is\n   possible that the <record> may process its\
    \ event before the <play>.\n   Primitives each define the set of events that they\
    \ support and the\n   behavior associated with their handling of each event. \
    \ This allows\n   many types of behaviors to be defined.  For example, VCR type\n\
    \   controls can be constructed by defining primitives that support\n   events\
    \ corresponding to each control.  Media recognition/detection\n   can be used\
    \ to cause those events to be generated.\n   Alternatively, events can be originated\
    \ elsewhere, such as from a\n   control agent, and simply received by the primitive\
    \ implementing the\n   control.  Examples of the use of events include adjusting\
    \ volume\n   (gain) and pause and resume of both announcement playout and record\n\
    \   creation.\n   Primitives act on events based upon the longest match of an\
    \ event\n   name.  Event names are a period '.' delimited sequence of tokens.\n\
    \   The first token, or the root of the name, can be considered an event\n   class.\
    \  Matching allows a standard meaning to be defined and then\n   extended based\
    \ upon what triggers an event's generation.  For\n   example, a record primitive\
    \ has different behavior depending upon\n   whether it completed because a user\
    \ stopped speaking or because it\n   was cancelled.  The recording is retained\
    \ in the first case but not\n   the second.\n   Longest match allows new recognizers\
    \ to be created and used without\n   changing how existing primitives are defined.\
    \  For example, a face\n   recognition capability could be created that generates\
    \ a\n   terminate.frowning event when a user looks puzzled.  Although no\n   primitive\
    \ directly defines this event, it will still effect a generic\n   terminate action.\
    \  Primitives that require specialized behavior based\n   upon frowning may be\
    \ extended to support this.  As well, the event\n   can still be exported from\
    \ the MSML context without requiring that\n   primitives receiving the event understand\
    \ facial expressions.\n"
- title: 9.4.  MSML Dialog Usage with SIP
  contents:
  - "9.4.  MSML Dialog Usage with SIP\n   MSML dialogs MAY be used directly with SIP\
    \ for dialog interactions\n   (e.g., IVR or fax).  It can be initially invoked\
    \ as part of the\n   \"Prompt and Collect\" service described in \"Basic Network\
    \ Media\n   Services with SIP\" [n7].  That defines service indicators for a small\n\
    \   number of well-defined services using the user part of the SIP\n   Request-URI\
    \ (R-URI).\n   The prompt and collect service uses \"dialog\" as the service\n\
    \   indicator.  URI parameters further refine the specific IVR request.\n   This\
    \ document defines an additional parameter \"msml-param\" for the\n   dialog service\
    \ indicator as follows:\n   dialog-parameters = \";\" ( dialog-param [ vxml-parameters\
    \ ] )\n                           | moml-param\n   dialog-param      = \"voicexml=\"\
    \ dialog-url\n   moml-param        = \"moml=\" moml-url\n   There are no additional\
    \ URI parameters when MSML is used as the\n   dialog language.\n   MSML dialogs\
    \ define discrete IVR dialog commands.  These commands MAY\n   be included directly\
    \ in the body of the INVITE to the \"dialog\"\n   service indicator by using the\
    \ \"cid\" [n8] URL scheme.  This scheme\n   identifies a message body part that\
    \ in this case would contain the\n   MSML dialog request.  Note that a multipart\
    \ message body, containing\n   a single part, MUST be present even if the INVITE\
    \ does not contain an\n   SDP offer.  Subsequent MSML dialog requests are sent\
    \ in the body of\n   SIP INFO messages as are all messages from a media server.\n\
    \   An example of SIP URI as described above is:\n      sip:dialog@mediaserver.example.net;\\\
    \n          moml=cid:14864099865376@appserver.example.net\n   The body part that\
    \ contained the MSML dialog referenced by the URL\n   would have a Content-Id\
    \ header of:\n      Content-Id: <14864099865376@appserver.example.net>\n   The\
    \ results of executing an <exit> or <disconnect>, or of executing a\n   <send>\
    \ that has a \"target\" attribute value equal to \"source\", are\n   notified\
    \ in SIP INFO messages using the <event> element from MSML\n   Core package. \
    \ No messages are sent if execution completes normally\n   without executing one\
    \ of these elements.\n   If there is an error during validation or execution,\
    \ then a media\n   server MUST notify the error as described above and must include\
    \ the\n   namelist items \"moml.error.status\" and \"moml.error.description\"\
    .  The\n   values for these items are defined in section 11.\n   A restricted\
    \ subset of MSML dialogs can also be used with the\n   \"Announcement\" service\
    \ defined in [n7].  This service uses \"annc\" as\n   the service indicator and\
    \ defines parameters that describe an\n   announcement.  The \"play=\" parameter\
    \ identifies the URL of a prompt\n   or a provisioned announcement sequence. \
    \ The value of the \"play=\"\n   parameter can refer to an MSML dialog body part\
    \ using a \"cid\" URL as\n   described above.  That body part must only contain\
    \ the <play>\n   primitive.\n   Using MSML dialogs enhances the announcement service\
    \ by allowing the\n   client to specify a sequence of audio segments rather than\
    \ requiring\n   each sequence to be provisioned as well as support for video.\n\
    \   Moreover, MSML dialogs define a standard set of variables in contrast\n  \
    \ to [n7] which defines a parameterization mechanism but does not\n   formally\
    \ specify any semantics.\n   If a media server does not understand the \"cid\"\
    \ scheme or does not\n   understand MSML dialogs, it must respond with the SIP\
    \ response code\n   \"488 - not acceptable here\".  If the MSML dialog body contains\n\
    \   elements other than the <play> primitive, or there are errors during\n   validation,\
    \ a media server must respond with a SIP response code \"400\n   - bad request\"\
    .  Finally, if there is a discrepancy between\n   parameters specified in the\
    \ Request-URI and corresponding attributes\n   defined in the MSML dialog body,\
    \ the Request-URI parameters must be\n   silently ignored.\n   MSML dialogs MUST\
    \ NOT change the operation of the announcement\n   service from that defined in\
    \ [n7].  When the announcement completes,\n   a media server issues a SIP BYE\
    \ request.  The INFO method MUST NOT\n   used with the announcement service.\n"
- title: 9.5.  MSML Dialog Structure and Modularity
  contents:
  - "9.5.  MSML Dialog Structure and Modularity\n   MSML is structured as a set of\
    \ packages.  Only the core and base\n   packages are required.  The Dialog Core\
    \ Package defines the framework\n   for MSML requests to a media server, without\
    \ specific functionality.\n   It consists of the \"primitive\" abstraction, an\
    \ abstract element for\n   control flow, the sequential execution model, and the\
    \ <send> element.\n   That is, the MSML Dialog Core Package allows for the execution\
    \ of a\n   sequence of one or more media processing primitives with the ability\n\
    \   to notify events to the invocation environment.\n   Primitives are contained\
    \ within the MSML Dialog Base Package, which\n   defines the basic <play>, <record>,\
    \ <dtmf>, <dtmfgen>, <tonegen>, and\n   <collect> elements.  Another package,\
    \ the MSML Dialog Transform\n   Package, defines the simple half-duplex filters.\
    \  More advanced\n   primitives are defined in the speech and fax packages.  The\
    \ MSML\n   speech package depends on the MSML Dialog Base Package as it extends\n\
    \   the capability of <play> by adding synthesized speech.  Finally, the\n   group\
    \ execution model, which is currently the only element that\n   changes the flow\
    \ of control, is defined in a separate MSML Dialog\n   Group Package.  All of\
    \ these packages are optional with the exception\n   that MSML Dialog Core and\
    \ MSML Dialog Base Packages MUST be\n   implemented to provide the minimal functionality.\n"
- title: 9.6.  MSML Dialog Core Package
  contents:
  - "9.6.  MSML Dialog Core Package\n   The MSML Dialog Core Package defines the structural\
    \ framework and\n   abstractions for MSML dialogs (via its schema).  It also defines\
    \ the\n   basic elements that are not part of the core primitive or control\n\
    \   abstractions.  This package is dependent on the MSML Core Package.\n   Events\
    \ generated by MSML dialogs, such as prompt completion, digits\n   collected,\
    \ or dialog termination, are communicated by the media\n   server via the MSML\
    \ Core Package (see MSML Core Package <event>).\n   MSML dialogs are executed\
    \ independently from the MSML core context.\n   When an MSML dialog is started,\
    \ MSML allocates the dialog control\n   resources, and if successful, starts those\
    \ resources executing.  MSML\n   core execution then continues without waiting\
    \ for the MSML dialog to\n   complete.  This forking of MSML dialog invocation\
    \ from the MSML core\n   context is done via the <dialogstart> element.  Media\
    \ streams are\n   created between the MSML dialog target and other internal media\n\
    \   server resources as part of dialog execution.  Stream creation is\n   subject\
    \ to the requirements defined in the MSML Core Package and\n   media streams as\
    \ defined by the MSML Conference Core Package.\n"
- title: 9.6.1.  <dialogstart>
  contents:
  - "9.6.1.  <dialogstart>\n   The <dialogstart> element is used to instantiate an\
    \ MSML media dialog\n   on connections or conferences.  The dialog is specified\
    \ either inline\n   or by a URI [n6].  Inline dialogs MUST be composed of any\
    \ of the MSML\n   Dialog Packages.  MSML dialogs MAY be defined externally as\
    \ VoiceXML\n   [n5].  The MSML dialog description MUST NOT be inline if the src\n\
    \   attribute, containing a URI, is present.\n   The originator of the MSML dialog\
    \ is notified using a\n   \"msml.dialog.exit\" event when the dialog completes.\
    \  Any results\n   returned by the dialog when it exits are sent as a namelist\
    \ to the\n   event.\n   The \"msml.dialog.exit\" event is also used when dialogs\
    \ fail due to\n   errors encountered fetching external documents or errors that\
    \ occur\n   within the dialog execution thread.  In this case, a namelist\n  \
    \ containing the items \"dialog.exit.status\" and\n   \"dialog.exit.description\"\
    \ is returned with the event to inform the\n   client of the failure and the failure\
    \ reason.  The values of these\n   items are defined within this package and the\
    \ MSML Core Package.\n   Information from the failed dialog may be returned as\
    \ additional\n   namelist items.\n   Attributes:\n      target: an identifier\
    \ of a connection or a conference that will\n      interact with the dialog. \
    \ The identifier must not contain\n      wildcards.  Mandatory.\n      src: the\
    \ URL of the dialog description.  MUST NOT be used if the\n      MSML dialog description\
    \ is inline.  Otherwise, an error (422) will\n      result and MSML document execution\
    \ will stop.\n      type: a MIME type that identifies the type of language used\
    \ to\n      describe the dialog.  application/moml+xml and\n      application/vxml+xml\
    \ are used to identify MSML dialogs and\n      VoiceXML [n5] respectively.  Mandatory.\n\
    \      name: an instance name for the dialog.  If the attribute is not\n     \
    \ present, the media server will assign an identifier to the dialog.\n      If\
    \ the attribute is present but the name is already associated\n      with the\
    \ target, an error (431) will result and MSML document\n      execution will stop.\
    \  Any results that a dialog generates will be\n      correlated to its identifier.\n\
    \      mark: a token that can be used to identify execution progress in\n    \
    \  the case of errors.  The value of the mark attribute from the last\n      successfully\
    \ executed MSML element is returned in an error\n      response.  Therefore, the\
    \ value of all \"mark\" attributes within an\n      MSML document should be unique.\n\
    \   The following sections show examples of initiating an external MSML\n   dialog,\
    \ an inline embedded MSML dialog, and an MSML-initiated\n   VoiceXML dialog.\n\
    \   The following example starts an MSML dialog on a connection.\n      <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"1.1\">\n       \
    \  <dialogstart target=\"conn:abcd1234\"\n               type=\"application/moml+xml\"\
    \n               name=\"sample\"\n               src=\"http://server.example.com/scripts/foo.moml\"\
    />\n       </msml>\n   The following example starts an inline embedded MSML dialog\
    \ on a\n   connection.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   \
    \   <msml version=\"1.1\">\n        <dialogstart target=\"conn:abcd1234\" name=\"\
    sample\">\n           <play>\n              <audio uri=\"file://clip1.wav\"/>\n\
    \              <audio uri=\"http://host1/clip2.wav\"/>\n              <tts uri=\"\
    http://host2/text.ssml\"/>\n              <var type=\"date\" subtype=\"mdy\" value=\"\
    20030601\"/>\n           </play>\n           <send target=\"source\"\n       \
    \           event=\"done\"\n                  namelist=\"play.amt play.end\"/>\n\
    \         </dialogstart>\n      </msml>\n   The following example starts a VoiceXML\
    \ dialog on a connection.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \      <msml version=\"1.1\">\n         <dialogstart target=\"conn:abcd1234\"\n\
    \             type=\"application/vxml+xml\"\n             name=\"sample\"\n  \
    \           src=\"http://server.example.com/scripts/foo.vxml\"/>\n      </msml>\n\
    \   If this dialog fails once its execution thread had begun, for\n   example,\
    \ the fetch of the VoiceXML document failed, an example of the\n   event that\
    \ would be returned would be:\n      <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n      <event name=\"msml.dialog.exit\"\n             id=\"conn:abcd1234/dialog:sample\"\
    >\n         <name>dialog.exit.status</name>\n         <value>423</value>\n   \
    \      <name>dialog.exit.description</name>\n         <value>External document\
    \ fetch error</value>\n      </event>\n"
- title: 9.6.2.  <dialogend>
  contents:
  - "9.6.2.  <dialogend>\n   Dialog end is used to terminate an MSML dialog created\
    \ through\n   <dialogstart> before it completes of its own accord.  The operation\n\
    \   of <dialogend> depends on the dialog language being used by the\n   executing\
    \ context.  When that context is VoiceXML, a\n   \"connection.disconnected\" event\
    \ will be thrown to the VoiceXML\n   application.  When that context is MSML dialog,\
    \ a \"terminate\" event\n   will be sent to the MSML core context.\n   <dialogend>\
    \ allows the executing dialog the opportunity to gracefully\n   complete before\
    \ generating a \"msml.dialog.exit\" event.  Dialog\n   results may be returned\
    \ and will be contained as a namelist to that\n   event.\n   Attributes:\n   \
    \   id: the identifier of a dialog.  Mandatory.\n      mark: a token that can\
    \ be used to identify execution progress in\n      the case of errors.  The value\
    \ of the mark attribute from the last\n      successfully executed MSML dialog\
    \ element is returned in an error\n      response.  Therefore, the value of all\
    \ \"mark\" attributes within an\n      MSML document should be unique.\n   For\
    \ example, if the dialog from the previous example was still\n   executing, the\
    \ following would terminate the dialog and generate an\n   \"msml.dialog.exit\"\
    \ event.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"\
    1.1\">\n         <dialogend id=\"conn:abcd1234/dialog:sample\"/>\n      </msml>\n"
- title: 9.6.3.  <send>
  contents:
  - "9.6.3.  <send>\n   The <send> element sends an event and optional namelist to\
    \ the\n   recipient identified by the target attribute.  Event names are\n   defined\
    \ by the recipient.  In the case where the recipient is an MSML\n   dialog group\
    \ or primitive, the events are defined within this\n   document.  Other recipients\
    \ MAY use names that are suitable for their\n   environment.\n   The \"target\"\
    \ attribute specifies the recipient of the event.\n   Recipients MAY be other\
    \ MSML dialog primitives or groups executing\n   within the object, the object\
    \ itself, or the environment that invoked\n   the MSML dialog.  Sending events\
    \ to media primitives or groups is\n   supported by the MSML Dialog Group Package.\
    \  Any target that is\n   unknown within the object is assumed to be destined\
    \ to the external\n   environment.  By convention, the string \"source\" SHOULD\
    \ used to\n   address that environment, but any target name distinct from the\
    \ MSML\n   dialog namespace MAY be used.\n   Attributes:\n      event: the name\
    \ of an event.  Mandatory.\n      target: the recipient of the event.  The recipient\
    \ MUST be a MSML\n      dialog primitive, the currently executing group, or the\
    \ MSML\n      dialog environment.  A primitive is specified by a primitive type,\n\
    \      optionally appended by a period '.' followed by the identifier of\n   \
    \   a primitive.  Identifiers are only needed when more than one\n      primitive\
    \ of the same type exists in the object.  The executing\n      group is specified\
    \ using the token \"group\".  The environment is\n      specified using the token\
    \ \"source\", optionally appended by a\n      period '.' followed by any environment\
    \ specific target.\n      Mandatory.\n      namelist: a list of zero or more shadow\
    \ variables that are\n      included with the event.\n"
- title: 9.6.4.  <exit>
  contents:
  - "9.6.4.  <exit>\n   The <exit> element causes execution of the MSML dialog to\
    \ terminate.\n   Attributes:\n      namelist: a list of one or more shadow variables\
    \ that MAY\n      optionally be sent to the context that invoked the MSML Dialog\n\
    \      object.\n"
- title: 9.6.5.  <disconnect>
  contents:
  - "9.6.5.  <disconnect>\n   The <disconnect> element is similar to <exit> but has\
    \ the additional\n   semantics of indicating to the context that invoked the MSML\
    \ dialog\n   that it should disconnect from a media server, the media stream\n\
    \   associated with the object.  The method of disconnection depends upon\n  \
    \ how the media stream was initially established.  If SIP was used, a\n   <disconnect>\
    \ would cause a media server to issue a BYE request.  The\n   request would be\
    \ sent for the SIP dialog associated with media\n   session on which the MSML\
    \ dialog was operating.\n   Attributes:\n      namelist: a list of one or more\
    \ shadow variables that MAY\n      optionally be sent to the context that invoked\
    \ the MSML dialog\n      object.\n"
- title: 9.7.  MSML Dialog Base Package
  contents:
  - "9.7.  MSML Dialog Base Package\n   The MSML Dialog Base Package defines a required\
    \ set of base\n   functionality for the media server.  It supports individual\
    \ media\n   primitives, such as playing an announcement or collection digits,\
    \ as\n   well as composite operations such as play and collect.  When this\n \
    \  package is used in conjunction with the MSML Dialog Group Package,\n   the\
    \ event-based mechanism is used to control primitives.  This\n   package may also\
    \ be used in conjunction with the MSML Speech Package\n   to extend the functionality\
    \ of prompts to include TTS and user input\n   collection to include ASR.\n  \
    \ In the following sections, subsections of a primitive define child\n   elements\
    \ of that primitive and are not themselves considered\n   primitives.  They do\
    \ not receive events or populate shadow variables.\n"
- title: 9.7.1.  <play>
  contents:
  - "9.7.1.  <play>\n   Play is used to generate an audio or video stream.  It MUST\
    \ play in\n   sequence the media created by the child media elements <audio>,\n\
    \   <video>, <media>, <tts>, and <var>.  When the play stops, either\n   because\
    \ the terminate event is received or all media generation has\n   completed, the\
    \ <playexit> element, if present, is executed.  At least\n   one media generation\
    \ element must be present.\n   Play supports two states: generate and suspend.\
    \  Media generation\n   occurs in the generate state and is suspended in the suspend\
    \ state.\n   Once in the suspend state, media generation continues upon receiving\n\
    \   the generate event.  The default initial state is generate.\n   Audio MAY\
    \ be generated in different languages by specifying the\n   xml:lang attribute\
    \ for <play> and/or the child elements of <play>.\n   The language is inherited\
    \ by the child elements, but each child MAY\n   specify its own language.  Except\
    \ for physical audio clips, it is an\n   error if a language is specified but\
    \ the media server cannot render\n   the audio in the requested language.\n  \
    \ Attributes:\n      id: an optional identifier that may be referenced elsewhere\
    \ for\n      sending events to the play primitive.\n      interval: specifies\
    \ the delay between stopping one iteration and\n      beginning another.  The\
    \ attribute has no effect if iterate is not\n      also specified.  Default is\
    \ no interval.\n      iterate: specifies the number of times the media specified\
    \ by the\n      child media elements should be played.  Each iteration is a\n\
    \      complete play of each of the child media elements in document\n      order.\
    \  Defaults to once '1'.\n      initial: defines the initial state for the play\
    \ element.  Default\n      is \"generate\".\n      maxtime: defines the maximum\
    \ allowed time for the <play> to\n      complete.\n      barge: defines whether\
    \ or not audio announcements may be\n      interrupted by DTMF detection during\
    \ play-out.  The DTMF digit\n      barging the announcement is stored in the digit\
    \ buffer.  Valid\n      values for barge are \"true\" or \"false\", and the attribute\
    \ is\n      mandatory.  When barge is applied to a conference target, DTMF\n \
    \     digit detected from any conference participant MUST terminate the\n    \
    \  announcement.\n      cleardb: defines whether or not the digit buffer is cleared,\
    \ prior\n      to starting the announcement.  Valid values for cleardb are \"\
    true\"\n      or \"false\", and the attribute is mandatory.\n      offset: defines\
    \ an offset, measured in units of time, where the\n      <play> is to begin media\
    \ generation.  Offset is only valid when\n      all child media elements are <audio>.\n\
    \      skip: an amount, expressed in time, that will be used to skip\n      through\
    \ the media when \"forward\" and \"backward\" events are\n      received.  Default\
    \ is 3 s (three seconds).\n      xml:lang: specifies the language to use for content\
    \ that can be\n      rendered in different languages.\n      Events:\n      The\
    \ following describes input events to the media primitive\n      object.  The\
    \ MSML Dialog Group Package allows an event exchange\n      mechanism between\
    \ primitives.\n      pause: causes the play to enter the suspend state.\n    \
    \  resume: causes play to enter the generate state.\n      forward: skips forward\
    \ through the media.  Only has effect when\n      all child media elements are\
    \ <audio>.\n      backward: skips backward through the media.  Only has effect\
    \ when\n      all child media elements are <audio>.\n      restart: skips to the\
    \ beginning of the media.  Only has effect\n      when all child media elements\
    \ are <audio>.\n      toggle-state: causes the suspend / generate state to toggle.\n\
    \      terminate: terminates the play and assigns values to the shadow\n     \
    \ variables.\n   Shadow Variables:\n      play.amt: identifies the length of time\
    \ for which media was\n      generated before the play was stopped.  This does\
    \ not include time\n      that may have elapsed while the play was in the suspend\
    \ state.\n      play.end: contains the event that caused the play to stop.  When\n\
    \      the play stops because all media generation has completed, end is\n   \
    \   assigned the value \"play.complete\".\n   Note: Attributes barge and cleardb\
    \ provide a simplified mechanism for\n   controlling play operations with implicit\
    \ DTMF without the use of\n   <group> and event exchange mechanism.  When using\
    \ the <play> element\n   within the group framework and barge is specified, detection\
    \ of barge\n   condition generates an implicit terminate event to the play\n \
    \  primitive.\n   The following sections describe the child elements of <play>.\n"
- title: 9.7.1.1.  <audio>
  contents:
  - "9.7.1.1.  <audio>\n   The <audio> element identifies prerecorded audio to play.\
    \  Local URI\n   references may resolve to a single physical audio clip, a logical\n\
    \   clip, or a provisioned sequence of clips (physical or logical).  A\n   logical\
    \ clip is one that can be rendered differently based on the\n   language attribute.\
    \  Logical clips are provisioned for each of the\n   languages that a media server\
    \ supports.  Remote URI references are\n   resolved according to the capabilities\
    \ of the remote server.\n   Attributes:\n      uri: identifies the location of\
    \ the audio to be played.  The file\n      and http schemes are supported.  Mandatory.\n\
    \      format: defines the encoding and file type of the audio resource.\n   \
    \   The format attribute is defined as a string type of form\n      \"audio/<filetype>;codecs=<codec>\"\
    .  The keyword 'audio' identifies\n      an audio content.  The codecs field identifies\
    \ the audio file's\n      codec to be used for decoding the audio content.  If\
    \ format\n      attribute is not specified, the filetype MUST be determined from\n\
    \      the URI and the codec information MUST be determined from the\n      media\
    \ resource.\n      audiosamplerate: identifies audio sample rate in kHz.  If not\n\
    \      specified, the sample rate SHOULD be determined from the media\n      resource.\n\
    \      audiosamplesize: identifies audio sample size in bits.  If not\n      specified,\
    \ the sample size SHOULD be determined from the media\n      resource.\n     \
    \ iterate: specifies the number of times the audio is to be played.\n      Defaults\
    \ to once '1'.\n      xml:lang: specifies the language to use when the URI identifies\
    \ a\n      logical clip, either directly, or as part of a sequence.\n"
- title: 9.7.1.2.  <video>
  contents:
  - "9.7.1.2.  <video>\n   The <video> element identifies prerecorded multimedia to\
    \ play.\n   Contents identified by the URI attribute may contain audio only,\n\
    \   video only, or both audio and video.  The media server SHOULD attempt\n  \
    \ to play both audio and video from the identified URI, if both are\n   available\
    \ in the content.\n   Attributes:\n      uri: identifies the location of the video\
    \ or multimedia to be\n      played.  The file and http schemes are supported.\
    \  Mandatory.\n      format: defines the encoding and file type of the video or\n\
    \      multimedia resource.  The format attribute is defined as a string\n   \
    \   type of form \"video/<filetype>;codecs=<codecx>,<codecy>\".  The\n      keyword\
    \ 'video' identifies video-only media or media containing\n      audio and video.\
    \  The \"codecs\" field identifies the audio and/or\n      video codecs to be\
    \ used for decoding the file content, where the\n      order of the codec values\
    \ is not significant.  In the event of\n      audio and video content, using 'video'\
    \ keyword, the\n      codecs=<codecx>,<codecy> field MAY be used to identify the\
    \ audio\n      codec and the video codec.  If not specified, the codec\n     \
    \ information SHOULD be determined from the media file.\n      audiosamplerate:\
    \ identifies audio sample rate in kHz.  If not\n      specified, the sample rate\
    \ SHOULD be determined from the media\n      file.\n      audiosamplesize: identifies\
    \ audio sample size in bits.  If not\n      specified, the sample size SHOULD\
    \ be determined from the media\n      file.\n      codecconfig: identifies an\
    \ optional special instruction string for\n      codec configuration.  Default\
    \ is to send no special configuration\n      string to the codec.\n      profile:\
    \ identifies a video profile name specific to the codec.\n      If not specified,\
    \ default video profile of the codec SHOULD be\n      selected.\n      level:\
    \ identifies a video profile level to the codec.  Default is\n      to send no\
    \ profile information to the codec and allow the codec to\n      select an internal\
    \ default.\n      imagewidth: identifies the width of video image in pixels.\n\
    \      Default is to use image width information from media file.\n      imageheight:\
    \ identifies the height of video image in pixels.\n      Default is to use image\
    \ height information from media file.\n      maxbitrate: identifies the bitrate\
    \ of the video signal in kbps.\n      Default is to use maximum bitrate information\
    \ from the media file.\n      framerate: identifies the video frame rate in frames\
    \ per second.\n      Default is to use frame rate information from the media file.\n\
    \      iterate: specifies the number of times the media content is to be\n   \
    \   played.  Defaults to once '1'.\n"
- title: 9.7.1.3.  <media>
  contents:
  - "9.7.1.3.  <media>\n   The <media> element identifies multimedia content for play.\
    \  All\n   content of the <media> element MUST start to play concurrently.  This\n\
    \   element may be used to generate a multimedia stream from two\n   independent\
    \ media resources, one identifying audio and the other\n   identifying video.\n\
    \   The <media> element MUST contain at least one child element.  Valid\n   child\
    \ elements of <media> are <audio> and <video>, as described\n   earlier.  <media>\
    \ element MUST contain at most one <audio> element or\n   at most one <video>\
    \ element.\n"
- title: 9.7.1.4.  <var>
  contents:
  - "9.7.1.4.  <var>\n   The <var> element specifies the generation of audio from\
    \ a variable\n   using prerecorded audio segments.  A variable represents a semantic\n\
    \   concept (such as date or number) and dynamically produces the\n   appropriate\
    \ speech.\n   Prerecorded audio allows an application vendor or service provider\
    \ to\n   choose the exact voice for their audio and therefore completely\n   control\
    \ the \"sound and feel\" of the service provided to end users.\n   It provides\
    \ very high audio quality and allows the variables to blend\n   seamlessly into\
    \ the surrounding audio segments.\n   Text to speech (TTS) using Speech Synthesis\
    \ Markup Language (SSML)\n   [n11] may also be used to render variables, but may\
    \ not provide as\n   good quality, or allow as complete control of the \"sound\
    \ and feel\" or\n   user experience.  TTS is normally used for reading text such\
    \ as\n   emails and for very large vocabularies such as stock names.  TTS\n  \
    \ results in a very clear difference between the variables and the\n   surrounding\
    \ audio segments.  (See MSML Dialog Speech Package.)\n   Attributes:\n      type:\
    \ specifies the type of variable.  Mandatory.  Variable type\n      must be one\
    \ of \"date\", \"digits\", \"duration\", \"month\", \"money\",\n      \"number\"\
    , \"silence\", \"time\", or \"weekday\".\n      subtype: specifies an optional\
    \ clarification of type.  Specific\n      values depend upon the type.\n     \
    \ value: text that should be rendered appropriate to the type and\n      subtype\
    \ attributes.  Mandatory.\n      xml:lang: specifies the language to use when\
    \ rendering the\n      variable.\n"
- title: 9.7.1.5.  <playexit>
  contents:
  - "9.7.1.5.  <playexit>\n   The <playexit> element MUST be invoked when generation\
    \ of all content\n   of the <play> has come to completion.  The contents of this\
    \ element\n   MAY be used to send events.\n   Attributes:\n      none\n"
- title: 9.7.2.  <dtmfgen>
  contents:
  - "9.7.2.  <dtmfgen>\n   DTMF generator originates one or more DTMF digits in sequence.\n\
    \   Attributes:\n      id: an optional identifier that may be referenced elsewhere\
    \ for\n      sending events to the dtmfgen primitive.\n      digits: a string\
    \ of characters from the alphabet \"0-9a-d#*\" that\n      correspond to a sequence\
    \ of DTMF tones.  Mandatory.\n      level: used to define the power level for\
    \ which the tones will be\n      generated.  Expressed in dBm0 in a range of 0\
    \ to -96 dBm0.  Larger\n      negative values express lower power levels.  Note\
    \ that values\n      lower than -55 dBm0 will be rejected by most receivers (TR-\n\
    \      TSY-000181, ITU-T Q.24A).  Default is -6 dBm0.\n      dur: the duration\
    \ in milliseconds for which each tone should be\n      generated.  Implementations\
    \ may round the value if they only\n      support discrete durations.  Default\
    \ is 100 ms.\n      interval: the duration in milliseconds of a silence interval\n\
    \      following each generated tone.  Implementations may round the\n      value\
    \ if they only support discrete durations.  Default is 100 ms.\n   Events:\n \
    \     terminate: terminates DTMF generation and assigns values to the\n      shadow\
    \ variables.\n   Shadow Variables:\n      dtmfgen.end: contains the event that\
    \ caused DTMF generation to\n      stop.\n   The following sections describe the\
    \ child elements of <dtmfgen>.\n"
- title: 9.7.2.1.  <dtmfgenexit>
  contents:
  - "9.7.2.1.  <dtmfgenexit>\n   The <dtmfgenexit> element MUST be invoked when the\
    \ DTMF generation\n   operation completes or is terminated as a result of receiving\
    \ the\n   terminate event.  The <dtmfgenexit> element MAY be used to send\n  \
    \ events when the DTMF generation has completed.\n   Attributes:\n      none\n"
- title: 9.7.3.  <tonegen>
  contents:
  - "9.7.3.  <tonegen>\n   Tone generator allows customized tone generation.  A sequence\
    \ of\n   varying tones with optional silence intervals can be composed using\n\
    \   the <tonegen> element.  Child elements of <tonegen>, namely <tone>\n   and\
    \ <silence>, specify a single tone or sequence of tones.\n   Attributes:\n   \
    \   id: an optional identifier that may be referenced elsewhere for\n      sending\
    \ events to the tonegen primitive.\n      iterate: A numeric value specifying\
    \ the total number of\n      iterations.  A value of 'forever' represents infinite\
    \ repetitions.\n      Optional.  Default is 1.\n   Events:\n      terminate: terminates\
    \ tone generation and assigns values to the\n      shadow variables.\n   Shadow\
    \ Variables:\n      tonegen.end: contains the event that caused tone generation\
    \ to\n      stop.\n   The following sections describe the child elements of <tonegen>.\n"
- title: 9.7.3.1.  <tone>
  contents:
  - "9.7.3.1.  <tone>\n   The <tone> element specifies a single tone with an optional\
    \ silence\n   interval.  The tone specification consists of two tone frequencies,\n\
    \   their attenuation values, a duration of the tone, and the number of\n   times\
    \ to repeat the tone.\n   Attributes:\n      duration: time duration or length\
    \ of the individual tone,\n      specified in \"ms\" or \"s\" in increments of\
    \ 10 ms.  A value of 0\n      represents an infinite duration.  Mandatory.\n \
    \     iterate: specifies the number of times to execute the contents of\n    \
    \  <tone> element.  A value of 'forever' represents infinite\n      repetitions.\
    \  Optional.  Default is 1.\n   Events:\n      none\n   Child Elements:\n    \
    \  The child elements of <tone> element specify a single tone and an\n      optional\
    \ silence interval to be inserted at the end of tone\n      generation.  A tone\
    \ is defined by <tone1> and <tone2> elements.\n      Each <tone> element MUST\
    \ contain at least one of <tone1> or\n      <tone2>, or MAY contain <tone1> and\
    \ <tone2> exactly once.\n      <tone1>\n         Attributes:\n            freq:\
    \ specifies the frequency of the first tone in \"Hz\",\n            ranging from\
    \ 0 to 3999 Hz.  Mandatory.\n            atten: specifies the attenuation level\
    \ expressed in dBm0,\n            ranging from 0 to -96 dBm0.  Mandatory.\n  \
    \    <tone2>\n         Attributes:\n            freq: specifies the frequency\
    \ of the second tone in \"Hz\",\n            ranging from 0 to 3999 Hz.  Mandatory.\n\
    \            atten: specifies the attenuation level expressed in dBm0,\n     \
    \       ranging from 0 to -96 dBm0.  Mandatory.\n      <silence> - Refer to the\
    \ silence element definition below.\n"
- title: 9.7.3.2.  <silence>
  contents:
  - "9.7.3.2.  <silence>\n   The <silence> element inserts a silence interval as optional\
    \ content\n   of <tonegen> or <tone> elements.\n   Attributes:\n      duration:\
    \ specifies the amount of silence interval in \"ms\" or \"s\",\n      in increments\
    \ of 10ms.  Mandatory.\n   Events:\n      none\n"
- title: 9.7.3.3.  <tonegenexit>
  contents:
  - "9.7.3.3.  <tonegenexit>\n   The <tonegenexit> element MUST be invoked when the\
    \ tone generation\n   operation completes or is terminated as a result of receiving\
    \ the\n   terminate event.  The <tonegenexit> element MAY be used to send\n  \
    \ events when the tone generation has completed.\n   Attributes:\n      none\n"
- title: 9.7.4.  <record>
  contents:
  - "9.7.4.  <record>\n   Record creates a recording.  Similar to play, <record> supports\
    \ two\n   states: create and suspend.  Received media becomes part of the\n  \
    \ recording when <record> is in the create state and is discarded when\n   it\
    \ is in the suspend state.\n   Recording MUST be terminated when a terminate event\
    \ is received or\n   when a nospeech event is received and no audio has yet been\
    \ recorded.\n   <record> differentiates different types of terminate events.\n\
    \   An optional <play> element MAY be specified as a child element of\n   <record>.\
    \  This mechanism provides a complete play-record operation,\n   where the prompts\
    \ specified within the <play> element are played in\n   advance of start of recording.\n\
    \   Note: Attributes prespeech, postspeech, and termkey provide a\n   simplified\
    \ mechanism for controlling record operations using implicit\n   DTMF and VAD,\
    \ without the use of <group> and event exchange\n   mechanism.\n   Attributes:\n\
    \      id: an optional identifier that may be referenced elsewhere for\n     \
    \ sending events to the record primitive.\n      append: a boolean that defines\
    \ whether the recording is allowed to\n      be appended to an existing file if\
    \ dest already exists.  Default\n      is \"false\".  The attribute is ignored\
    \ if the scheme is http.\n      dest: the destination for the recording, which\
    \ will contain either\n      audio only, video only, or both audio and video depending\
    \ on the\n      stream(s) being recorded.  Recording MAY be either local or\n\
    \      external based upon the attribute value.  File and http schemes\n     \
    \ are supported.\n      audiodest: the destination for the audio-only recording.\n\
    \      Recording MAY be either local or external based upon the attribute\n  \
    \    value.  All combinations of dest, audiodest, and videodest are\n      valid.\
    \  File and http schemes are supported.\n      videodest: the destination for\
    \ the video-only recording.\n      Recording MAY be either local or external based\
    \ upon the attribute\n      value.  All combinations of dest, audiodest, and videodest\
    \ are\n      valid.  File and http schemes are supported.\n      format: defines\
    \ the encoding and file type of the recording.  The\n      format attribute is\
    \ defined as a string type of form\n      \"audio|video/filetype;codecs=x,y\"\
    .  The keyword 'audio' identifies\n      an audio only recording, while the keyword\
    \ 'video' identifies\n      video-only recording or an audio plus video recording.\
    \  The codecs\n      field identifies the audio and/or video codecs to be used\
    \ for the\n      recording, where the order of the codec values is not significant.\n\
    \      In the event of audio and video recording, using 'video' keyword,\n   \
    \   the codecs=x,y field MAY be used to identify the audio codec and\n      the\
    \ video codec.  Mandatory.\n      codecconfig: identifies an optional special\
    \ instruction string for\n      codec configuration.  Default is to send no special\
    \ configuration\n      string to the codec.\n      audiosamplerate: identifies\
    \ audio sample rate in kHz.  If not\n      specified, the sample rate SHOULD be\
    \ determined from the media\n      source.\n      audiosamplesize: identifies\
    \ audio sample size in bits.  If not\n      specified, the sample size SHOULD\
    \ be determined from the media\n      source.\n      profile: identifies a video\
    \ profile name specific to the codec.\n      If not specified, default video profile\
    \ of the codec SHOULD be\n      selected for the recording.\n      level: identifies\
    \ a video profile level to the codec.  Default is\n      to send no profile information\
    \ to the codec and allow the codec to\n      select an internal default.\n   \
    \   imagewidth: identifies the width of video image in pixels.\n      Default\
    \ is to use image width information from the media source.\n      imageheight:\
    \ identifies the height of video image in pixels.\n      Default is to use image\
    \ height information from the media source.\n      maxbitrate: identifies the\
    \ bitrate of the video signal in kbps.\n      Default is to use maximum bitrate\
    \ information from the media\n      source.\n      framerate: identifies the video\
    \ frame rate in frames per second.\n      Default is to use frame rate information\
    \ from the media source.\n      initial: defines the initial state for the record\
    \ element.\n      Default is \"create\", which starts the recording as soon as\
    \ the\n      <record> element is executed.  The \"initial\" attribute is\n   \
    \   applicable only when <record> is used within the <group>\n      structure.\n\
    \      maxtime: defines the maximum length of the recording in units of\n    \
    \  time.  Mandatory.\n      prespeech: defines a timer value, in seconds, for\
    \ detection of\n      absence of audio energy at the start of the record operation.\
    \  If\n      no audio energy is detection for the amount of time specified by\n\
    \      prespeech, the recording is terminated.  Default is 0 s, which\n      does\
    \ not activate the prespeech timer.\n      postspeech: defines a timer value,\
    \ in seconds, for detection of\n      absence of audio energy while the recoding\
    \ is in progress.  During\n      an in progress recording, if absence of audio\
    \ energy is detected\n      as specified by the postspeech timer, the recording\
    \ is terminated.\n      Default is 0 s, which disables the ability to terminate\
    \ a\n      recording due to postspeech silence.\n      termkey: defines a single\
    \ DTMF key that, when detected, terminates\n      the recording.  Absence of this\
    \ attribute prevents the recording\n      from being terminated due to detection\
    \ of DTMF digits.  When\n      termkey is specified, the detected DTMF digit terminates\
    \ the\n      recording and the DTMF digit is not entered in the digit buffer.\n\
    \   Events:\n      The following describes input events to the media primitive\n\
    \      object.  The MSML Dialog Group Package allows an event exchange\n     \
    \ mechanism between primitives.\n      pause: causes the record to enter the suspend\
    \ state.  Received\n      media is discarded.\n      resume: causes the record\
    \ to resume if it was suspended.  It has\n      no effect otherwise.\n      toggle-state:\
    \ causes the suspend / create state to toggle.\n      terminate: terminates the\
    \ recording and assigns values to the\n      shadow variables.\n      terminate.cancelled:\
    \ terminates the recording and assigns values\n      to the shadow variables.\
    \  If the dest attribute used the file\n      scheme, the local recording is deleted.\
    \  Applications are\n      responsible for removing external files created using\
    \ the http\n      scheme.\n      terminate.finalsilence: terminates the recording\
    \ and assigns\n      values to the shadow variables.  If the dest attribute used\
    \ the\n      file scheme, the final silence is removed from the recording.\n \
    \     nospeech: terminates the recording and assigns values to the\n      shadow\
    \ variables if it is received and no recording has yet been\n      created.  The\
    \ \"nospeech\" event is ignored if audio has already\n      been recorded.\n \
    \  Shadow Variables:\n      record.len: the actual length of the recording measured\
    \ in units\n      of time.  This does not include time that may have elapsed while\n\
    \      the record was in the suspend state.\n      record.end: contains the event\
    \ that caused the record to\n      terminate.  When the record terminates because\
    \ maxtime is\n      exceeded, end is assigned the value \"record.complete.maxlength\"\
    .\n      record.recordid: contains the value of the \"dest\" attribute, if\n \
    \     supplied, otherwise contains a media server assigned record\n      identifier.\n\
    \      Record termination due to prespeech silence results in assigned\n     \
    \ value of \"record.failed.prespeech\"\n      Record termination due to postspeech\
    \ silence results in assigned\n      value of \"record.complete.postspeech\"\n\
    \      Record termination due to DTMF detection results in assigned value\n  \
    \    of \"record.complete.termkey\"\n   The following sections describe the child\
    \ elements of <record>.\n"
- title: 9.7.4.1.  <play>
  contents:
  - "9.7.4.1.  <play>\n   The optional <play> element as a child element of <record>\
    \ allows a\n   prompt to be played prior to start of recording.  The record\n\
    \   operation starts at the end of the play sequence or if the play is\n   barged\
    \ by DTMF, assuming that barge=true is specified for <play>.\n   For a complete\
    \ description, refer to <play> element.\n"
- title: 9.7.4.2.  <tonegen>
  contents:
  - "9.7.4.2.  <tonegen>\n   The optional <tonegen> element as a child element of\
    \ <record> allows\n   a tone or sequence of tones to be played prior to start\
    \ of recording.\n   The record operation starts at the end of the tone generation.\
    \  For a\n   complete description, refer to <tonegen> element.\n"
- title: 9.7.4.3.  <recordexit>
  contents:
  - "9.7.4.3.  <recordexit>\n   The <recordexit> element MUST be invoked when the\
    \ record operation\n   completes or when the recording is terminated as a result\
    \ of\n   receiving the terminate event.  The <recordexit> element MAY be used\n\
    \   to send events when the recording has completed.\n   Attributes:\n      none\n"
- title: 9.7.5.  <dtmf> or <collect>
  contents:
  - "9.7.5.  <dtmf> or <collect>\n   DTMF input fulfills several roles within MSML\
    \ dialogs.  It is used to\n   trigger events that will affect the media processing\
    \ operation of\n   other primitives.  It is also used to collect DTMF digits from\
    \ a\n   media stream that are to be reported back to the user of MSML dialog.\n\
    \   Often DTMF detection is used for both purposes.  Barge is the most\n   common\
    \ example, where a prompt is stopped based upon DTMF input but\n   more digits\
    \ may remain to be collected.\n   DTMF detection supports multiple simultaneous\
    \ recognition patterns.\n   Different patterns can be used to trigger sending\
    \ different events in\n   order to implement DTMF controls.  Alternatively, one\
    \ pattern may be\n   used to represent a collection and another pattern, a substring\
    \ of\n   the first, used as a barge indication.\n   An optional <play> element\
    \ MAY be specified as a child element of\n   <dtmf> or <collect>.  This mechanism\
    \ provides a complete play-collect\n   operation, where the prompt(s) specified\
    \ within the <play> element\n   are played in advance of DTMF digit collection.\n\
    \   Note that all patterns share the same digit collection buffer, inter-\n  \
    \ digit timing, a single <nomatch> element, and a single <noinput>\n   element.\
    \  As such, multiple patterns may not be suitable to support\n   simultaneous\
    \ collections for different purposes.  When this is\n   required, separate <dtmf>\
    \ elements should be used instead.\n   <dtmf> terminates if any of the <pattern>,\
    \ <noinput>, or <nomatch>\n   elements are matched the maximum number of times\
    \ that they are\n   allowed.  The number of times they may match may be specified\
    \ as an\n   attribute of <dtmf> or of the individual child elements.\n   Element\
    \ identifier <dtmf> is equivalent to <collect>.  However,\n   <collect> is the\
    \ preferred name.  MSML clients SHOULD use <collect>,\n   while MSML servers SHOULD\
    \ support both.\n   Attributes:\n      id: an optional identifier that may be\
    \ referenced elsewhere for\n      sending events to this primitive.\n      cleardb:\
    \ a boolean indication of whether the buffer for digit\n      collection should\
    \ be cleared of any collected digits when the\n      element is instantiated.\
    \  If set to false, any digits currently in\n      the buffer MUST be immediately\
    \ compared against the pattern\n      elements.\n      fdt: defines the first-digit\
    \ timer value.  The first-digit timer\n      is started when DTMF detection is\
    \ initially invoked.  If no DTMF\n      digits are detected during this initial\
    \ interval, the <noinput>\n      element MUST be invoked.  Optional, default is\
    \ 0 s (wait forever\n      for the first digit).\n      idt: defines the inter-digit\
    \ timer to be used when digits are\n      being collected.  When specified, the\
    \ timer is started when the\n      first digit is detected and restarted on each\
    \ subsequent digit.\n      Timer expiration is applied to all patterns.  After\
    \ that, if any\n      patterns remain active and a nomatch element is specified,\
    \ the\n      nomatch is executed and DTMF input MUST terminate.  The idt\n   \
    \   attribute should only be used when digit collection is being\n      performed.\
    \  Optional, default is 4 s.\n      edt: defines the extra-digit timer value.\
    \  Specifies the length of\n      time the media server MUST wait after a match\
    \ to detect a\n      termination key, if one is specified by the <pattern> element.\n\
    \      Optional, default is 4 s.\n      starttimer: boolean value that defines\
    \ whether the first digit\n      timer (fdt) is started initially.  When set to\
    \ false, the\n      starttimer event must be received for it to start.  Default\
    \ is\n      \"false\".\n      iterate: specifies the number of times the <pattern>,\
    \ <noinput>,\n      and <nomatch> elements may be executed unless those elements\n\
    \      specify differently.  The value \"forever\" MAY be used to indicate\n \
    \     that these may be executed any number of times.  Default is once\n     \
    \ '1'.\n      ldd: defines the minimum duration for a digit to be held in order\n\
    \      for it to be detected as a long DTMF digit.  A long DTMF digit\n      event\
    \ MUST be treated as a single DTMF event, and MUST contain an\n      extra character\
    \ 'L' at the end to be distinguished from the other\n      regular digit events.\
    \  For example, \"#L\" and \"#\" are different\n      DTMF events.  Optional,\
    \ default of 0 s.  A value of 0 s disables\n      long DTMF digit detection and\
    \ reporting.  Attribute value is an\n      integer with a valid range from 100\
    \ ms to 100 s (units MUST be\n      supplied).\n   Events:\n      The following\
    \ describes input events to the media primitive\n      object.  The MSML Dialog\
    \ Group Package allows an event exchange\n      mechanism between primitives.\n\
    \      starttimer: starts the first digit timer (fdt) if it has not\n      already\
    \ been started.  Has no effect otherwise.\n      terminate: terminates the DTMF\
    \ input and assigns values to the\n      shadow variables.\n   Shadow Variables:\n\
    \      dtmf.digits: the string of DTMF digits that have been received\n      (the\
    \ contents of the digit buffer).\n      dtmf.len: the number of digits in the\
    \ digit buffer.\n      dtmf.last: the last digit in the digit buffer.\n      dtmf.end:\
    \ contains the event that caused the <dtmf> to terminate\n      or is assigned\
    \ one of \"dtmf.match\", \"dtmf.noinput\", or\n      \"dtmf.nomatch\" depending\
    \ upon which of the corresponding elements\n      reached its maximum.\n   The\
    \ following sections describe the child elements of <dtmf> or\n   <collect>.\n"
- title: 9.7.5.1.  <play>
  contents:
  - "9.7.5.1.  <play>\n   The optional <play> element as a child element of <dtmf>\
    \ or <collect>\n   allows a prompt to be played prior to DTMF digit collection.\
    \  DTMF\n   digit collection starts at the end of the play sequence or if the\n\
    \   play is barged by DTMF, assuming that barge=true is specified for\n   <play>.\
    \  For a complete description, refer to <play> element.\n"
- title: 9.7.5.2.  <pattern>
  contents:
  - "9.7.5.2.  <pattern>\n   The <pattern> element describes one or more DTMF digits\
    \ that are to\n   be recognized.  When the pattern is matched, the child elements\
    \ MUST\n   be executed.\n   Attributes:\n      digits: the digit pattern that\
    \ should be matched.  Mandatory.\n      format: an enumerated value that defines\
    \ the format used to\n      express the digit pattern.  The format may be \"mgcp\"\
    \ or \"megaco\"\n      for patterns expressed as a digit map from those specifications,\n\
    \      or as one of the simple built-in formats defined within this\n      specification.\
    \  Currently, a single built-in format \"moml+digits\"\n      is defined that\
    \ allows a match based on either one or more\n      specific digits, or based\
    \ upon a specific length specification\n      with an optional return key.  \"\
    moml+digits\" is the default.\n      iterate: specifies the number of times the\
    \ <pattern> may be\n      matched.  The value \"forever\" may be used to indicate\
    \ that\n      <pattern> may be matched any number of times.  This value\n    \
    \  overrides any specified in <dtmf>.  Default is once '1'.\n"
- title: 9.7.5.3.  <detect>
  contents:
  - "9.7.5.3.  <detect>\n   The contents of the <detect> element MUST be executed\
    \ whenever any\n   DTMF is first detected.  It MUST be matched at most once.\n\
    \   Attributes:\n      none\n"
- title: 9.7.5.4.  <noinput>
  contents:
  - "9.7.5.4.  <noinput>\n   The <noinput> element is used when DTMF is being collected.\
    \  Children\n   of the <noinput> element MUST be executed when DTMF has not been\n\
    \   detected and the first digit timeout occurs.\n   Attributes:\n      iterate:\
    \ specifies the number of times the <noinput> may be\n      triggered.  The value\
    \ \"forever\" may be used to indicate that\n      <noinput> may be triggered any\
    \ number of times.  This value\n      overrides any specified in <dtmf>.  Default\
    \ is once '1'.\n"
- title: 9.7.5.5.  <nomatch>
  contents:
  - "9.7.5.5.  <nomatch>\n   The <nomatch> element is used when DTMF is being collected.\
    \  Children\n   of the <nomatch> element MUST be executed when it is determined\
    \ that\n   none of the individual patterns can be matched.\n   Attributes:\n \
    \     iterate: specifies the number of times the <nomatch> may be\n      triggered.\
    \  The value \"forever\" may be used to indicate that\n      <nomatch> may be\
    \ triggered any number of times.  This value\n      overrides any specified in\
    \ <dtmf>.  Default is once '1'.\n"
- title: 9.7.5.6.  <dtmfexit>
  contents:
  - "9.7.5.6.  <dtmfexit>\n   The <dtmfexit> element MUST be invoked when the dtmf\
    \ input completes\n   because one of <pattern>, <noinput>, or <nomatch> occurred\
    \ its\n   maximum number of times.\n   Attributes:\n      None\n"
- title: 9.7.6.  <moml>
  contents:
  - "9.7.6.  <moml>\n   The root element <moml> MUST be used when the document is\
    \ a stand-\n   alone MSML dialog, where the invoking application media type\n\
    \   indicates 'application/moml+xml'.  Additionally, for backwards\n   compatibility,\
    \ the <moml> element MUST be used within <dialogstart>,\n   which contains an\
    \ inline embedded MSML dialog.\n   Valid contents of <moml> are all elements described\
    \ within this MSML\n   Dialog Base Package.\n   Attributes:\n      version: \"\
    1.0\" Mandatory.\n      id: an identifier unique to this object.  Events returned\
    \ from\n      MSML dialog (the \"target\" attribute of a <send> is equal to\n\
    \      \"source\") will be correlated with this identifier.  Mandatory.\n   Events:\n\
    \      terminate: terminates the MOML context.  A terminate event gets\n     \
    \ sent to the currently executing <group> or primitive.\n"
- title: 9.8.  MSML Dialog Group Package
  contents:
  - "9.8.  MSML Dialog Group Package\n   The group package defines a single control\
    \ flow construct that\n   specifies concurrent execution.  Primitives are composed\
    \ for\n   concurrent execution by placing them within a <group> element.\n   Groups\
    \ define how media flows between multiple concurrently executing\n   primitives.\
    \  They have one or more inputs and one or more outputs.  A\n   <group> represents\
    \ the declaration of a complex media processing\n   operation.  The event interaction\
    \ between primitives (see the\n   following subsection) is defined within the\
    \ context of one or more\n   groups.  However groups themselves do not scope events,\
    \ they simply\n   define that primitives are concurrently executing and a primitive\n\
    \   must be executing in order to receive an event.\n   Placing primitives within\
    \ a group structure is an optional feature of\n   this specification.  It allows\
    \ for complex services to created using\n   the event exchange mechanism between\
    \ the primitives.  For simpler\n   services, such as play/collect or play/record,\
    \ the use of group\n   mechanism is not necessary.  MSML Dialog Group Package\
    \ is dependent\n   on the MSML Dialog Base Package.\n   Groups may also be used\
    \ to describe media objects that transform a\n   media stream while optionally\
    \ allowing application or user control of\n   the transformation.  For example,\
    \ a gain control could be defined\n   that responds to user speech or DTMF input.\
    \  In this case, a\n   recognition primitive would send events to a gain control\
    \ primitive.\n   Groups have one attribute that defines the media flow within\
    \ them.\n   They also have a dimension that defines how many media inputs and\n\
    \   outputs they have.  Currently, dimensions of 1 and 2 are supported\n   based\
    \ upon the group topology.  These correspond to a group with one\n   input and\
    \ one output and a group with two inputs and two outputs.\n   Media flow to and\
    \ from the primitives within the group is based upon\n   a topology attribute\
    \ of the <group> element.  The topology attribute\n   defines a topology schema\
    \ and implies the group dimension.\n   There are several common ways in which\
    \ primitives are often connected\n   together.  A schema provides a convenient\
    \ template that can be\n   applied to multiple primitives without having to define\
    \ all of the\n   individual media relationships.  The following two schemas are\n\
    \   initially defined for one-dimensional groups:\n   o  parallel: specifies that\
    \ media sent to the group is sent to every\n      primitive that has an input.\
    \  The group bridges the output from\n      every primitive that has an output\
    \ into a single common group\n      output.\n   o  serial: specifies that the\
    \ first primitive listed in the group\n      receives the media sent to the group.\
    \  Its output is to be\n      connected to the input of the next primitive defined\
    \ within the\n      group and so on until the last primitive within the group\
    \ becomes\n      the group output.\n   Groups with these topologies are shown\
    \ in the two diagrams below.\n   The group on the left has a parallel topology\
    \ and that on the right\n   has a serial topology.\n           /-> P1 --\\\n \
    \         /          \\\n   G(in) +---> P2 ----> G(out)     G(in) --> P1 --> P2\
    \ --> P3 --> G(out)\n          \\          /\n           \\-> P3 --/\n   More\
    \ complex media flows MAY be created by nesting groups of serial\n   and parallel\
    \ topologies within each other.  For example, the diagram\n   below has a group\
    \ with a serial topology nested within a star\n   topology.\n               /----->\
    \ P1 ------------------------\\\n              /                             \
    \       \\\n      Gs(in) +-> Gp(in) --> P2 --> P3 --> Gp(out) -+> Gs(out)\n  \
    \ This combination could be used to create record operation where DTMF\n   was\
    \ to be clamped from the recording itself, but a DTMF key press is\n   still used\
    \ to stop the recording.  In this case, P1 would be a DTMF\n   recognizer, P2\
    \ would be a clamp primitive, and P3 a recorder as shown\n   by the following\
    \ example.  This example omits child elements and\n   attributes not concerned\
    \ with the core concept.  The following\n   section discusses sending events,\
    \ and the details of each of the\n   primitives are found in section 4.\n    \
    \  <group topology=\"parallel\">\n         <dtmf/>\n         <group topology=\"\
    serial\">\n            <clamp/>\n            <record/>\n         </group>\n  \
    \    </group>\n   A single schema, \"fullduplex\", is defined for a two-dimensional\n\
    \   group.  A full-duplex two-dimensional group has exactly two immediate\n  \
    \ children.  Those children may be primitives or other one-dimensional\n   groups.\
    \  A \"fullduplex\" group must only be used as the top-most group\n   and must\
    \ not be nested.  Each primitive (P1) and group (G2) becomes\n   half of the full-duplex\
    \ group as shown in the diagram below.\n      G-A(in1)  +-> G2 --> G-B(out1)\n\
    \      G-A(out2) <-- P1 <-+ G-B(in2)\n   Full-duplex groups are symmetrical when\
    \ both halves are the same.\n   They are asymmetrical when they differ.  Asymmetric\
    \ groups need to\n   have a name associated with each side.  The left side is\
    \ defined as\n   the input of the first child of the full-duplex group combined\
    \ with\n   the output of the second child.  The right side is reverse.  These\n\
    \   sides were labeled A and B respectively in the preceding diagram.\n   An example\
    \ of a full-duplex group is the user operated gain control\n   mentioned at the\
    \ beginning of this subsection.  The gain should\n   operate on the audio that\
    \ a user hears, but the gain is controlled by\n   recognizing things such as DTMF\
    \ or spoken commands in media that the\n   user originates.  The following shows\
    \ the XML tag grouping that would\n   accomplish this and corresponds to the media\
    \ flow shown in the\n   diagram above.  If the user's audio is not required for\
    \ anything\n   other than control of the gain, then the <relay> is not required\
    \ and\n   the internal group could be omitted.  A complete XML description for\n\
    \   this is included in the examples section.\n      <group topology=\"fullduplex\"\
    >\n         <group topology=\"parallel\">\n            <dtmf/>\n            <relay/>\n\
    \         </group>\n         <gain/>\n      </group>\n   Primitives within a group\
    \ MUST begin concurrently but MAY finish\n   asynchronously based upon events\
    \ that they receive or their task\n   completes.  A group MUST terminate when\
    \ all of the primitives within\n   it have completed.  If the group contains a\
    \ <groupexit> element, then\n   the contents of that element MUST be executed\
    \ as part of group\n   termination.\n   A group itself MAY receive a terminate\
    \ event requesting termination.\n   A terminate event sent to the group causes\
    \ a terminate event to be\n   sent to each of its currently active primitives.\
    \  The <groupexit>\n   element is not executed until all primitives have processed\
    \ their\n   respective terminate events.\n"
- title: 9.8.1.  <group>
  contents:
  - "9.8.1.  <group>\n   The <group> element allows the contained primitives to be\
    \ executed\n   concurrently.\n   Attributes:\n      topology: specifies a schema\
    \ that defines the flow of media within\n      the group.  Three schemas are initially\
    \ defined.  \"fullduplex\" is\n      specified for use with two-dimensional groups.\
    \  \"parallel\" and\n      \"serial\" are for use with one-dimensional groups.\
    \  The definitions\n      of these topologies are in section 9.8.  Mandatory.\n\
    \      id: identifies the name of the group.  Mandatory when groups are\n    \
    \  nested.\n   Events:\n      terminate: causes a terminate event to be sent to\
    \ each element\n      contained within the group.\n"
- title: 9.8.2.  <groupexit>
  contents:
  - "9.8.2.  <groupexit>\n   The <groupexit> element allows events to be sent when\
    \ group\n   processing completes.  Group processing completes when all contained\n\
    \   primitives terminate.\n   Attributes:\n      none\n   Events:\n      none\n"
- title: 9.9.  MSML Dialog Transform Package
  contents:
  - "9.9.  MSML Dialog Transform Package\n   The MSML Dialog Transform Package gathers\
    \ together the simple\n   primitives that work as filters on half-duplex media\
    \ streams.\n"
- title: 9.9.1.  <vad>
  contents:
  - "9.9.1.  <vad>\n   Voice activity detection (VAD) is used to detect voice and\
    \ silence\n   when speech recognition is not required.  Similar to both speech\
    \ and\n   DTMF, a VAD has different media conditions that it can match.  Those\n\
    \   conditions can be qualified by a minimum length of time that is\n   required\
    \ for them to be considered recognized.\n   Attributes:\n      id: an optional\
    \ identifier that may be referenced elsewhere for\n      sending events to the\
    \ vad primitive.\n      starttimer: boolean value that defines whether the timer\
    \ is\n      started to allow recognition of the initial condition (voice,\n  \
    \    silence).  When set to false, the starttimer event must be\n      received\
    \ in order for the initial condition to be recognized.  The\n      timer does\
    \ not affect recognition of the transition conditions.\n      Default is \"false\"\
    .\n   Events:\n      starttimer: starts the timer to allow recognition of the\
    \ initial\n      condition if it has not already been started.  Has no effect\n\
    \      otherwise.\n      terminate: terminates voice activity detection.\n   Shadow\
    \ Variables:\n      none\n   The following sections describe the child elements\
    \ of <vad>.\n"
- title: 9.9.1.1.  <voice>, <silence>, <tvoice>, <tsilence>
  contents:
  - "9.9.1.1.  <voice>, <silence>, <tvoice>, <tsilence>\n   Each child element corresponds\
    \ to a condition that a VAD can detect.\n   The first two detect when voice or\
    \ silence has been initially present\n   for a minimum length of time since the\
    \ VAD was started.  The second\n   two require that a transition to the voice\
    \ or silence condition first\n   occur.\n   Attributes:\n      len: the length\
    \ of time the condition must persist in order to be\n      recognized.  Mandatory.\
    \  In the case of <tvoice> and <tsilence>,\n      the length of time applies only\
    \ to the final recognized condition.\n      sen: the maximum length of time the\
    \ condition not being detected\n      may occur without causing the detector to\
    \ begin measuring that\n      condition.\n"
- title: 9.9.2.  <gain>
  contents:
  - "9.9.2.  <gain>\n   Gain MAY be used to adjust of the gain of a media stream by\
    \ a\n   specific amount.  Application of <gain> removes any previous\n   connection\
    \ AGC setting used by the <agc> element.\n   Attributes:\n      id: an optional\
    \ identifier that may be referenced elsewhere for\n      sending events to the\
    \ gain primitive.\n      incr: an increment, expressed in dB, that will be used\
    \ to adjust\n      the gain when \"louder\" and \"softer\" events are received.\
    \  Default\n      is 3 dB.\n      amt: a specific gain to apply specified in dB.\
    \  Mandatory.\n   Events:\n      mute: self-explanatory.\n      unmute: self-explanatory.\n\
    \      reset: sets the gain to zero dB.\n      louder: makes the audio on a stream\
    \ louder.\n      softer: makes the audio on a stream quieter.\n      amt: sets\
    \ the gain to the specified value between -96 dB and 96\n      dB.\n"
- title: 9.9.3.  <agc>
  contents:
  - "9.9.3.  <agc>\n   Automatic gain control MAY be used to have a media server\n\
    \   automatically adjust the gain of a media stream.  Application of\n   <agc>\
    \ removes any previous connection gain setting used by the <gain>\n   element.\n\
    \   Attributes:\n      id: an optional identifier that may be referenced elsewhere\
    \ for\n      sending events to the gain primitive.\n      tgtlvl: the desired\
    \ target level for AGC, specified in dBm0 with a\n      valid range of -40 to\
    \ 0.  Mandatory.\n      maxgain: an optional attribute used to specify the maximum\
    \ gain\n      that AGC will apply, specified in dBm0 with a valid range of 0 to\n\
    \      40, with a default of 10.\n   Events:\n      mute: self-explanatory.\n\
    \      unmute: self-explanatory.\n"
- title: 9.9.4.  <gate>
  contents:
  - "9.9.4.  <gate>\n   The <gate> element is a simple filter that will pass or halt\
    \ media,\n   regardless of the format of the media stream, based on the events\
    \ it\n   receives.  <gate> shares the same mute and unmute events for\n   compatibility\
    \ with the gain primitives <gain> and <agc>.\n   Attributes:\n      id: an optional\
    \ identifier that may be referenced elsewhere for\n      sending events to the\
    \ gate primitive.\n      initial: the values \"pass\" and \"halt\" define whether\
    \ media is\n      initially allowed to pass.  Default is to pass.\n   Events:\n\
    \      mute: halts media flow through the primitive.\n      unmute: allows media\
    \ to pass through the primitive.\n"
- title: 9.9.5.  <clamp>
  contents:
  - "9.9.5.  <clamp>\n   This element MAY be used to filter DTMF tones from a media\
    \ stream.\n   Media other than DTMF tones is passed unchanged.\n   Attributes:\n\
    \      id: an optional identifier that may be referenced elsewhere for\n     \
    \ sending events to the clamp primitive.\n   Events:\n      none.\n"
- title: 9.9.6.  <relay>
  contents:
  - "9.9.6.  <relay>\n   This element is a simple primitive that copies its input\
    \ to its\n   output.\n   Attributes:\n      id: an optional identifier that may\
    \ be referenced elsewhere for\n      sending events to the relay primitive.\n\
    \   Events:\n      none.\n"
- title: 9.10.  MSML Dialog Speech Package
  contents:
  - "9.10.  MSML Dialog Speech Package\n   The MSML speech package defines functionality\
    \ that MAY be used for\n   automatic speech recognition <speech> and extends the\
    \ <play>\n   primitive defined in the MSML Dialog Base Package to include speech\n\
    \   synthesis.  As such, this package depends on the MSML Dialog Base\n   Package.\n"
- title: 9.10.1.  <speech>
  contents:
  - "9.10.1.  <speech>\n   The <speech> element activates grammars or user input rules\n\
    \   associated with speech recognition.  If multiple grammars are\n   specified,\
    \ all are activated.  All active grammars share the same\n   timers, recognition\
    \ attributes, and <noinput> and <nomatch> elements.\n   Each grammar may have\
    \ its own <match> element.\n   <speech> terminates if any of the <grammar>, <noinput>,\
    \ or <nomatch>\n   elements are matched the maximum number of times that they\
    \ are\n   allowed.  The number of times they may match may be specified as an\n\
    \   attribute of <speech> or of the individual child elements.\n   Attributes:\n\
    \      id: an optional identifier that may be referenced elsewhere for\n     \
    \ sending events to the speech primitive.\n      noint: specifies a time period\
    \ during which speech input must be\n      started; otherwise, the associated\
    \ <noinput> element is invoked.\n      norect: specifies a maximum time period\
    \ during which speech must\n      begin to be matched; otherwise, the associated\
    \ <nomatch> element\n      is invoked.\n      spcmplt: specifies the length of\
    \ silence necessary after speech\n      before a result will be finalized in the\
    \ case where there is a\n      complete match of an active grammar.  Following\
    \ the silence, the\n      appropriate <match> element will be triggered if the\
    \ result is\n      above the confidence level.  Otherwise, a <nomatch> element\
    \ will\n      be triggered.\n      spincmplt: specifies the length of silence\
    \ necessary after speech\n      before a result will be finalized in the case\
    \ where there is a\n      incomplete match of all active grammars.  Following\
    \ the silence,\n      the <nomatch> element will be triggered.\n      confidence:\
    \ the minimum confidence level that the recognizer must\n      have to consider\
    \ a recognition result as matching a grammar.\n      Expressed as an integer between\
    \ 1-100.\n      sens: specifies the sensitivity of the recognizer to determine\n\
    \      whether speech is present.  Lower sensitivity may be required for\n   \
    \   the recognizer to work well in the presence of high background\n      noise\
    \ or line echo.\n      starttimer: boolean value that defines whether the no input\n\
    \      (noint) and no recognition (norect) are started initially.  When\n    \
    \  set to false, the starttimer event must be received in order to\n      start\
    \ them.  Default is \"false\".\n      iterate: specifies the number of times the\
    \ <grammar>, <noinput>,\n      and <nomatch> elements may be executed unless those\
    \ elements\n      specify differently.  The value \"forever\" may be used to indicate\n\
    \      that these may be executed any number of times.  Default is once\n    \
    \  '1'.\n   Events:\n      sens: sets the sensitivity of the recognizer as described\
    \ above.\n      starttimer: starts the no input (noint) and no recognition\n \
    \     (norect) timers if they have not already been started.  Has no\n      effect\
    \ otherwise.\n      terminate: terminates the speech input and assigns values\
    \ to the\n      shadow variables.\n   Shadow Variables:\n      speech.end: contains\
    \ the event that caused the <speech> to\n      terminate or is assigned one of\
    \ \"speech.match\", \"speech.noinput\",\n      or \"speech.nomatch\" depending\
    \ upon which of the corresponding\n      elements reached its maximum.\n     \
    \ speech.results: contains the results of a matched grammar.  The\n      results\
    \ are formatted using the Natural Language Semantics Markup\n      Language (NLSML)\
    \ [n4].  When this variable is referenced to return\n      results, the results\
    \ are returned as a separate MIME entity.\n   The following sections describe\
    \ the child elements of <speech>.\n"
- title: 9.10.1.1.  <grammar>
  contents:
  - "9.10.1.1.  <grammar>\n   The <grammar> element specifies and activates a speech\
    \ grammar based\n   on Speech Recognition Grammar Specification (SRGS) [n3] XML\
    \ notation.\n   Grammars may be referenced by a URI or defined inline.  Child\n\
    \   elements of <match> MUST be executed when the specified speech\n   grammar\
    \ is matched.\n   Attributes:\n      uri: specifies the location of an SRGS grammar\
    \ when the grammar is\n      not defined inline.\n      iterate: specifies the\
    \ number of times the <grammar> may be\n      matched.  The value \"forever\"\
    \ MAY be used to indicate that\n      <grammar> may be matched any number of times.\
    \  This value\n      overrides any specified in <speech>.  Default is once '1'.\n"
- title: 9.10.1.2.  <match>
  contents:
  - "9.10.1.2.  <match>\n   <match> is a child of <grammar> and specifies the actions\
    \ to take\n   when the corresponding grammar is matched.\n"
- title: 9.10.1.3.  <noinput>
  contents:
  - "9.10.1.3.  <noinput>\n   The <noinput> element is used when speech is being recognized.\n\
    \   Children of the <noinput> element MUST be executed when speech has\n   not\
    \ been detected and the no input timeout (noint) occurs.\n   Attributes:\n   \
    \   iterate: specifies the number of times the <noinput> may be\n      triggered.\
    \  The value \"forever\" may be used to indicate that\n      <noinput> may be\
    \ triggered any number of times.  This value\n      overrides any specified in\
    \ <speech>.  Default is once '1'.\n"
- title: 9.10.1.4.  <nomatch>
  contents:
  - "9.10.1.4.  <nomatch>\n      The <nomatch> element is used when speech is being\
    \ recognized.\n      Children of the <nomatch> element MUST be executed when it\
    \ is\n      determined that none of the active grammars will match.\n      Attributes:\n\
    \      iterate: specifies the maximum number of times the <nomatch> may\n    \
    \  be triggered.  The value \"forever\" MAY be used to indicate that\n      <nomatch>\
    \ may be triggered any number of times.  This value\n      overrides any specified\
    \ in <speech>.  Default is once '1'.\n"
- title: 9.10.1.5.  <speechexit>
  contents:
  - "9.10.1.5.  <speechexit>\n   The <speechexit> element MUST be invoked when the\
    \ speech input\n   completes because one of <grammar>, <noinput>, or <nomatch>\
    \ occurred\n   its maximum number of times.\n   Attributes:\n      none\n"
- title: 9.10.2.  <play>
  contents:
  - "9.10.2.  <play>\n   The <play> element, as defined in the MSML Dialog Base Package,\
    \ is\n   extended with a new child element for synthesizing speech.  From an\n\
    \   XML perspective, <tts> is a member of a media substitution group.\n   See\
    \ the schema at the end of this document for details.\n   The following sections\
    \ describe the child elements of <play>.\n"
- title: 9.10.2.1.  <tts>
  contents:
  - "9.10.2.1.  <tts>\n   Contents of the <tts> element are rendered using text-to-speech\n\
    \   services and must be compliant to the SSML specification [n11].\n   Element\
    \ content MAY be plain text, contain the SSML <speak> element,\n   or the uri\
    \ attribute should identify the location of text to be\n   rendered.\n   Attributes:\n\
    \      uri: identifies the location of the text to be rendered.  The file\n  \
    \    and http schemes are supported.\n      iterate: specifies the number of times\
    \ the text-to-speech block is\n      to be rendered.  Defaults to once '1'.\n\
    \      xml:lang: specifies the language to use when it is not explicitly\n   \
    \   specified as an attribute for <speak>.\n"
- title: 9.11.  MSML Dialog Fax Detection Package
  contents:
  - "9.11.  MSML Dialog Fax Detection Package\n   The Fax Detection Package defines\
    \ primitives that allow a media\n   server to provide facsimile detection services.\n"
- title: 9.11.1.  <faxdetect>
  contents:
  - "9.11.1.  <faxdetect>\n   Fax tone detection is used to detect the presence of\
    \ the T.30 Calling\n   Tone (CNG) or Called Station Identification (CED) tone\
    \ in a media\n   stream.  Child elements of <faxdetectexit> MUST be executed when\
    \ a\n   CNG tone is detected.\n   Attributes:\n      id: an optional identifier\
    \ that may be referenced elsewhere for\n      sending events to the faxdetect\
    \ primitive.\n   Events:\n      terminate: terminates fax tone detection and assigns\
    \ values to the\n      associated shadow variables.\n   Shadow Variables:\n  \
    \    faxdetect.tone: A string that specifies the fax tone type detected\n    \
    \  by the media server.  Values supported SHOULD include \"CED\",\n      \"CNG\"\
    , or empty string.  The empty string MUST be used if fax tone\n      detection\
    \ terminated before detection of a fax tone, resulting in\n      execution of\
    \ the <faxdetectexit> element.\n      faxdetect.end: A string value that specifies\
    \ the reason for\n      termination of <faxdetect>.  Values supported SHOULD include\n\
    \      \"faxdetect.complete\" (due to detection of CED or CNG tone),\n      \"\
    faxdetect.failed.noresource\" (failed due to lack of resources on\n      the media\
    \ server), \"faxdetect.failed\" (failed due to any other\n      reason) \"faxdetect.terminated\"\
    \ (terminated by <dialogend>), or\n      undefined.\n"
- title: 9.11.2.  <faxdetectexit>
  contents:
  - "9.11.2.  <faxdetectexit>\n   The <faxdetectexit> element MUST be invoked when\
    \ fax detection,\n   invoked via <faxdetect>, terminates.  Child elements of\n\
    \   <faxdetectexit>, <send> and <exit>, allow events to be reported by\n   the\
    \ media server.\n   Attributes:\n      none\n"
- title: 9.12.  MSML Dialog Fax Send/Receive Package
  contents:
  - '9.12.  MSML Dialog Fax Send/Receive Package

    '
- title: 9.12.1.  <faxsend>
  contents:
  - "9.12.1.  <faxsend>\n   The <faxsend> primitive provides the functionality of\
    \ a calling fax\n   terminal.  This typically means sending a set of pages.  However,\
    \ it\n   can also mean requesting the called terminal to send pages instead\n\
    \   of, or in addition to, receiving pages.  The fax images to send are\n   defined\
    \ by the <sendobj> elements, described below.\n   Requesting the called terminal\
    \ to send pages happens when the\n   <rxpoll> element is included as part of <faxsend>.\
    \  This element may\n   be included in addition to, or instead of, the <sendobj>\
    \ element.\n   One <sendobj> (at a minimum) or <rxpoll> element must be present.\n\
    \   When both are present, a media server will first send pages and will\n   then\
    \ poll the other terminal, requesting pages.\n   Because fax is a distinct media\
    \ type, the <faxsend> primitive is not\n   expected to interact with other primitives.\
    \  Rather, it will interact\n   using fax protocols with a remote fax terminal\
    \ (or gateway) and will\n   send requested status events to its invoking environment.\
    \  During fax\n   operation, shadow variables are used to record the progress\
    \ and\n   parameters of the varying stages of fax operation.\n   Status events\
    \ are requested by including one or more status request\n   elements.  These elements\
    \ correspond to different stages or events in\n   fax operation and cause predefined\
    \ events to be sent to the invoking\n   environment when they occur.  Since the\
    \ only recipient of these\n   events is expected to be a fax control agent, requests\
    \ are simplified\n   by associating a predefined namelist of shadow variables\
    \ with each\n   event.  This decision may be revisited to allowed tailored namelists\n\
    \   based on further implementation experience.  Status requests apply\n   both\
    \ to sending and polling operation.\n   Attributes:\n      lclid: the identifier\
    \ that a media server uses to identify itself.\n      minspeed: the minimum acceptable\
    \ speed to negotiate for the\n      operation.\n      maxspeed: the maximum speed\
    \ to negotiate for the operation.  This\n      attribute is primarily for testing\
    \ purposes.\n      ecm: specifies whether Error Correction Mode (ECM) is allowed\
    \ to\n      be used if supported by the remote terminal.  Defaults to \"true\"\
    .\n   Events:\n      terminate: terminates the fax send operation.\n   Shadow\
    \ Variables:\n      fax.rmtid: the identifier of the remote fax terminal.\n  \
    \    fax.rate: the negotiated speed for the operation.\n      fax.resolution:\
    \ identifies the resolution of the image.  Both\n      metric- and inch-based\
    \ resolutions are defined.  Metric-based\n      resolutions are 75x75, 150x150,\
    \ 204x98, 204x196, 204x391, and\n      408x391.  Inch-based resolutions are 200x200,\
    \ 300x300, 400x400,\n      and 600x600.\n      fax.pagesize: identifies the negotiated\
    \ page size.  Metric sizes\n      are \"A3\", \"A4\", \"A5\", \"A6\", and \"B4\"\
    .  Inch-based page sizes are\n      \"Letter\" and \"Legal\".\n      fax.encoding:\
    \ identifies the image encoding utilized.  Valid\n      values are \"MH\", \"\
    R\", \"MMR\", and \"JPEG\".\n      fax.ecm: identifies whether ECM operation was\
    \ used.\n      fax.pagebadlines: the number of bad lines in a page.\n      fax.objbadlines:\
    \ the number of bad lines in an object.\n      fax.opbadlines: the number of bad\
    \ lines in an operation.\n      fax.objuri: the objuri of the current object.\n\
    \      fax.resendcount: the number of pages resent due to errors.\n      fax.totalpages:\
    \ the number of pages processed or stored.\n      fax.totalobjects: the count\
    \ of the objects used in the operation.\n      fax.duration: the duration of the\
    \ operation expressed as a\n      duration in seconds and milliseconds (e.g.,\
    \ \"23s250ms\").\n      fax.result: contains the reason that caused the fax operation\
    \ to\n      complete.  When the operation completes successfully, the value\n\
    \      will be assigned \"fax.success\".  Other values include\n      \"fax.partial\"\
    , \"fax.nofax\", \"fax.remotedisconnect\",\n      \"fax.uri.access.error\", and\
    \ \"fax.invalid.startpage\".\n   The following sections describe the child elements\
    \ of <faxsend>.\n"
- title: 9.12.1.1.  <sendobj>
  contents:
  - "9.12.1.1.  <sendobj>\n   <sendobj> is used to define a fax transmission.  There\
    \ MAY be\n   multiple instances of the element, which will be transmitted in\n\
    \   order.\n   Attributes:\n      objuri: a URI that points to the fax image that\
    \ will be\n      transmitted.  Mandatory.\n      startpage: the first page of\
    \ a multi-page objuri to send.\n      pagecount: page count.\n"
- title: 9.12.1.2.  <hdrfooter>
  contents:
  - "9.12.1.2.  <hdrfooter>\n   <hdrfooter> describes the header/footer that a media\
    \ server MAY put\n   on pages.  The header or footer may be defined as the content\
    \ of the\n   <format> child element.  The <format> element is only allowed if\
    \ the\n   type attribute has a value of \"header\" or \"footer\".\n   Attributes:\n\
    \      type: specifies whether a header or a footer should be put on\n      pages\
    \ and identifies the source of the header or footer.  The\n      following enumerated\
    \ values may be used:\n         \"header\" indicates that the media server should\
    \ put a header on\n                  pages using the contents of the <format>\
    \ element.\n         \"nohdr\"  indicates that there should be no header or footer.\n\
    \         \"footer\" indicates that the media server should put a footer on\n\
    \                  pages using the contents of the <format> element.\n      style:\
    \ defines the style of insertion onto a fax page that a media\n      server should\
    \ use for the header or footer.  Valid styles are\n      \"append\", \"overlay\"\
    , or \"replace\".\n   <format> is a child of the <hdrfooter> element that defines\
    \ the style\n   format to be used for the header or footer.  It uses a \"C\" language\n\
    \   style format statement (as shown below) to define the contents and\n   layout\
    \ of the header or footer.\n      code    length   name              format\n\
    \       %a       3     day of week       3-character abbreviation\n       %d \
    \      2     date              01-31\n       %m       2     month            \
    \ 01-12\n       %y       2     year              00-99\n       %Y       4    \
    \ year              0000-9999\n       %I       2     12 hour           01-12\n\
    \       %H       2     24 hour           00-23\n       %M       2     minute \
    \           00-59\n       %S       2     seconds           00-59\n       %p  \
    \     2     AM/PM             AM or PM\n       %P       2     page number    \
    \   01-99\n       %T       2     total pages       01-99\n       %l       20 \
    \   local ID (sender) 0-9, + or spaces\n       %r       20    remote ID (rcvr)\
    \  0-9, + or spaces\n       %%       1     percent           display % in header/ftr\n"
- title: 9.12.1.3.  <rxpoll>
  contents:
  - "9.12.1.3.  <rxpoll>\n   <rxpoll> provides the information necessary for a receive\
    \ polling\n   operation to occur.  The object(s) to be received are defined by\
    \ one\n   or more <rcvobj> elements.  The <rcvobj> is defined further under the\n\
    \   child elements of <faxrcv>.  The <rxpoll> element MAY also include a\n   description\
    \ of the header/footer that a media server SHOULD put on\n   received pages. \
    \ The <hdrfooter> element and its usage is described\n   above.\n   Attributes:\n\
    \      rmtid: specifies the identifier of the remote fax terminal that is\n  \
    \    to be associated with a polling operation.  A media server MUST\n      NOT\
    \ execute a polling operation unless the value of rmtid matches\n      that of\
    \ the connected remote machine.  Mandatory.\n"
- title: 9.12.1.4.  <faxstart>
  contents:
  - "9.12.1.4.  <faxstart>\n   The <faxstart> element requests that an event be sent\
    \ when fax\n   operation has begun.  When triggered, the following will be executed:\n\
    \   <send target=\"source\" event=\"fax.start\"/>\n"
- title: 9.12.1.5.  <faxnegotiate>
  contents:
  - "9.12.1.5.  <faxnegotiate>\n   The <faxnegotiate> element requests that an event\
    \ be sent when a\n   negotiation has been completed.  Multiple events MAY be sent\
    \ each\n   time a Digital Command Signal (DCS) frame is sent or received.  When\n\
    \   triggered, the following will be executed:\n      <send target=\"source\"\
    \ event=\"fax.negotiate\"\n         namelist=\"fax.rmtid\n            fax.rate\n\
    \            fax.resolution\n            fax.pagesize\n            fax.encoding\n\
    \            fax.ecm\"/>\n"
- title: 9.12.1.6.  <faxpagedone>
  contents:
  - "9.12.1.6.  <faxpagedone>\n   The <faxpagedone> element requests that an event\
    \ be sent when a page\n   has been sent or received.  When triggered, the following\
    \ will be\n   executed:\n      <send target=\"source\" event=\"fax.pagedone\"\n\
    \            namelist=\"fax.resolution\n            fax.pagesize\n           \
    \ fax.encoding\n            fax.pagebadlines\n            fax.resendcount\"/>\n"
- title: 9.12.1.7.  <faxobjectdone>
  contents:
  - "9.12.1.7.  <faxobjectdone>\n   The <faxobjectdone> element requests that an event\
    \ be sent when an\n   objuri has been completed.  When triggered, the following\
    \ will be\n   executed:\n      <send target=\"source\" event=\"fax.objectdone\"\
    \n            namelist=\"fax.objuri\n            fax.objbadlines\n           \
    \ fax.resendcount\n            fax.totalpages\n            fax.result\"/>\n"
- title: 9.12.1.8.  <faxopcomplete>
  contents:
  - "9.12.1.8.  <faxopcomplete>\n   The <faxopcomplete> element requests that an event\
    \ be sent when an\n   operation has been completed.  When triggered, the following\
    \ will be\n   executed:\n      <send target=\"source\" event=\"fax.opcomplete\"\
    \n            namelist=\"fax.totalpages\n            fax.opbadlines\n        \
    \    fax.resendcount\n            fax.totalobjects\n            fax.duration\n\
    \            fax.result\"/>\n"
- title: 9.12.1.9.  <faxpollstarted>
  contents:
  - "9.12.1.9.  <faxpollstarted>\n   The <faxpollstarted> element requests that an\
    \ event be sent when a\n   polling operation has started.  When triggered, the\
    \ following will be\n   executed:\n      <send target=\"source\" event=\"fax.opcomplete\"\
    \n            namelist=\"fax.rmtid\n            fax.rate\n            fax.resolution\n\
    \            fax.pagesize\n            fax.encoding\n            fax.ecm\"/>\n"
- title: 9.12.2.  <faxrcv>
  contents:
  - "9.12.2.  <faxrcv>\n   The <faxrcv> primitive provides the functionality of a\
    \ called fax\n   terminal.  Typically this type of operation is to receive pages.\n\
    \   However, it can include sending pages instead of, or in addition to,\n   receiving\
    \ them.  The fax objects to receive are defined by the\n   <rcvobj> elements,\
    \ described below.\n   A media server SHOULD send pages as a polled terminal when\
    \ the\n   <txpoll> element is included as part of <faxrcv>.  This element may\n\
    \   be included in addition to, or instead of, the <rcvobj> element.  One\n  \
    \ <rcvobj> or <txpoll> element must be present.  When both are present,\n   a\
    \ media server SHOULD first receive pages and will then allow the\n   other terminal\
    \ to poll the media server, requesting pages.\n   Because fax is a distinct media\
    \ type, the <faxrcv> primitive is not\n   expected to interact with other primitives.\
    \  Rather, it will interact\n   using fax protocols with a remote fax terminal\
    \ and will send\n   requested status events to its invoking environment.  During\
    \ fax\n   operation, shadow variables are used to record the progress and\n  \
    \ parameters of the varying stages of fax operation.\n   Status events are requested\
    \ by including one or more status request\n   elements.  These elements correspond\
    \ to different stages or events in\n   fax operation and cause predefined events\
    \ to be sent to the invoking\n   environment when they occur.  Since the only\
    \ recipient of these\n   events is expected to be a fax control agent, requests\
    \ are simplified\n   by associating a predefined namelist of shadow variables\
    \ with each\n   event.  This decision may be revisited to allowed tailored namelists\n\
    \   based on further implementation experience.  Status requests apply\n   both\
    \ to receiving and polling operation.\n   Attributes:\n      id: an optional identifier\
    \ that may be referenced elsewhere for\n      sending events to the faxrecv primitive.\n\
    \      lclid: the identifier that a media server uses to identify itself.\n  \
    \    ecm: specifies whether ECM mode is allowed to be used if supported\n    \
    \  by the remote terminal.  Defaults to \"true\".\n   Events:\n      terminate:\
    \ terminates the fax reception operation.\n   Shadow Variables:\n      <faxrcv>\
    \ supports the same set of shadow variables as <faxsend>\n      The following\
    \ sections describe the child elements of <faxrcv>.\n      In addition to the\
    \ elements defined below, <faxrcv> MAY also have\n      the following child elements,\
    \ which were defined under <faxsend>:\n      o  <hdrfooter>\n      o  <faxstart>\n\
    \      o  <faxnegotiate>\n      o  <faxpagedone>\n      o  <faxobjectdone>\n \
    \     o  <faxopcomplete>\n      o  <faxpollstarted>\n   Their meaning and usage\
    \ are the same as previously defined.\n"
- title: 9.12.2.1.  <rcvobj>
  contents:
  - "9.12.2.1.  <rcvobj>\n   <rcvobj> is used to define fax objects that a media server\
    \ will\n   receive.  There may be multiple instances of the element, which will\n\
    \   be used in order.\n   Attributes:\n      objuri: a URI that points to the\
    \ location that a received image is\n      to be stored.  Mandatory.\n      maxpages:\
    \ the maximum number of pages that will be stored in\n      objuri.\n"
- title: 9.12.2.2.  <txpoll>
  contents:
  - "9.12.2.2.  <txpoll>\n   <txpoll> provides the information for a polling operation\
    \ to occur as\n   part of a fax receive operation.  An object or multiple objects\
    \ to be\n   sent may be supplied by one or more <sendobj> elements.  In the event\n\
    \   of multiple occurrences, a media server MUST select the <sendobj>\n   element\
    \ whose rmtid attribute matches that of the remote terminal.\n   The <sendobj>\
    \ element was defined previously as a child element of\n   <faxsend>.  The <txpoll>\
    \ element is extended with an rmtid attribute\n   that specifies the identifier\
    \ of the remote fax terminal and is used\n   to select the specific <sendobj>\
    \ to send.\n   A media server SHOULD put a header/footer on transmitted pages\
    \ based\n   on any <hdrfooter> element included as part of <txpoll>.\n   Attributes:\n\
    \      rmtid: specifies the identifier of the remote fax terminal that is\n  \
    \    to be associated with a polling operation.  A media server MUST\n      NOT\
    \ execute a polling operation unless the value of rmtid matches\n      that of\
    \ the connected remote machine.  Mandatory.\n"
- title: 10.  MSML Audit Package
  contents:
  - '10.  MSML Audit Package

    '
- title: 10.1.  MSML Audit Core Package
  contents:
  - "10.1.  MSML Audit Core Package\n   This section describes the MSML Audit Core\
    \ Package that MAY be\n   implemented to support auditing services.\n   Audit\
    \ requests and results may vary based on the information being\n   audited.  The\
    \ MSML Audit Core Package specifies the framework to send\n   audit request, defines\
    \ a state list, and builds audit results.  The\n   additional audit packages define\
    \ package specific state lists and\n   associated audit result content.  The additional\
    \ audit packages MUST\n   be defined within the framework specified by the Audit\
    \ Core Package.\n"
- title: 10.1.1.  <audit>
  contents:
  - "10.1.1.  <audit>\n   The <audit> element is an optional child element of <msml>,\
    \ which MAY\n   be used by MSML clients to perform state auditing of current media\n\
    \   resources allocated and in use by the media server.  The requested\n   state\
    \ information is returned in an MSML response.\n   Attributes:\n      queryid:\
    \ the identifier of the MSML object being queried by the\n      MSML client. \
    \ Mandatory.  Supported object types: conference or\n      connection.  Wildcards\
    \ are allowed.\n      statelist: a list of one or more state parameters that are\
    \ being\n      queried.  Optional.  If not present, the media server SHOULD\n\
    \      return the id of audited object only.  Each object type may\n      contain\
    \ a set of states.  If the \"statelist\" contains any state\n      that does not\
    \ match the audited object type, the request MUST be\n      rejected.\n      mark:\
    \ in the case of an error, the value of the mark attribute\n      from the last\
    \ successfully executed element that included the mark\n      attribute.\n   State\
    \ Parameters:\n      The state parameter MUST be named using a dot-notation format\n\
    \      \"audit.X.a.b.c...\", where X is the mandatory field that indicates\n \
    \     the class name of the object (e.g., \"conf\" or \"conn\") and the\n    \
    \  \"a.b.c...\"  is the optional field used to describe the actual name\n    \
    \  of the state parameter in a hierarchical manner.  The wildcard \"*\"\n    \
    \  MAY be used as part of a state name; however, it MUST only be used\n      in\
    \ the last field of the dot-notation (e.g., \"audit.conf.*\" is\n      valid,\
    \ but \"audit.conf.*.a\" is invalid).  When a wildcard is used,\n      it is equivalent\
    \ to querying all the states below the specified\n      level.  Each field (e.g.,\
    \ within \"a.b.c...\") will result in\n      individual element names <a>, <b>,\
    \ and <c> in the audit result to\n      contain corresponding state value.  The\
    \ parent/child relationship\n      between these elements follows the hierarchy\
    \ of the state name\n      (i.e., <c> is child element of <b>, and <b> is child\
    \ element of\n      <a>).\n"
- title: 10.1.2.  <auditresult>
  contents:
  - "10.1.2.  <auditresult>\n   The <auditresult> element is an optional child element\
    \ of <result>,\n   which MUST be used by the media server to return the audit\
    \ result.  A\n   specific instance of the <auditresult> element contains the state\n\
    \   information of a single active object.  Therefore, if multiple\n   objects\
    \ are within the scope of the audit request, then one\n   <auditresult> element\
    \ per object MUST be present.  A zero occurrence\n   of <auditresult> element\
    \ indicates that there are no active resources\n   within the scope of the audit\
    \ request.\n   Attributes:\n      targetid: the identifier of a conference or\
    \ connection.\n      Mandatory.  Wildcard is not allowed.\n   The <auditresult>\
    \ may contain child element(s) that return additional\n   state information, corresponding\
    \ to the \"statelist\" attribute in the\n   <audit> request.  The child element\
    \ names correspond to the fields of\n   the state parameter name (e.g., \"a.b.c...\"\
    ), following the same\n   hierarchical structure.\n"
- title: 10.2.  MSML Audit Conference Package
  contents:
  - "10.2.  MSML Audit Conference Package\n   This section describes the MSML Audit\
    \ Conference Package that MUST be\n   implemented to support auditing of conference\
    \ services.  The MSML\n   Audit Conference Package follows the framework specified\
    \ by the MSML\n   Audit Core Package.  This package defines the state parameter\
    \ list\n   and audit result for conference auditing.\n"
- title: 10.2.1.  State Parameters
  contents:
  - "10.2.1.  State Parameters\n   All conference state parameter names MUST be prefixed\
    \ by\n   \"audit.conf\".\n      confconfig: query the conferences general configuration.\n\
    \      confconfig.audiomix: query the audio mixer's general configuration\n  \
    \    in the conference.\n      confconfig.audiomix.asn: query the current ASN\
    \ setting in the\n      audio mixer.\n      confconfig.audiomix.n-loudest: query\
    \ the current n-loudest setting\n      in the audio mixer.\n      confconfig.videolayout:\
    \ query the video layout's general\n      configuration in the conference.\n \
    \     confconfig.videolayout.root: query the root window setting of the\n    \
    \  video layout.\n      confconfig.videolayout.selector: query the video stream\
    \ selector\n      setting of the video layout.\n      confconfig.controller: query\
    \ who is the conference controller.\n      dialog: query the active dialog information\
    \ on the conference.\n      See MSML Audit Dialog Package for details.\n     \
    \ stream: query the active stream information on the conference.\n      See MSML\
    \ Audit Stream Package for details.\n"
- title: 10.2.2.  <auditresult>
  contents:
  - "10.2.2.  <auditresult>\n   The <auditresult> attribute of \"targetid\" is required\
    \ to indicate\n   results for auditing a conference.\n   The <auditresult> element\
    \ may optionally contain the following child\n   elements, returning additional\
    \ conference state information, if\n   corresponding states are queried and available.\n"
- title: 10.2.2.1.  confconfig
  contents:
  - "10.2.2.1.  confconfig\n   The <confconfig> element is used to return the general\
    \ configuration\n   state(s) of a conference, using the following attributes.\n\
    \   Attributes:\n      deletewhen: as defined by <createconference> element in\
    \ MSML\n      Conference Core Package.\n      term: as defined by <createconference>\
    \ element in MSML Conference\n      Core Package.\n"
- title: 10.2.2.2.  confconfig.audiomix
  contents:
  - "10.2.2.2.  confconfig.audiomix\n   The <audiomix> element contains the general\
    \ audio mixer configuration\n   using the following attributes.\n   Attributes:\n\
    \      id: as defined by <audiomix> element in MSML Conference Core\n      Package.\n\
    \      samplerate: as defined by <audiomix> element in MSML Conference\n     \
    \ Core Package.\n"
- title: 10.2.2.3.  confconfig.audiomix.asn
  contents:
  - "10.2.2.3.  confconfig.audiomix.asn\n   The <asn> element contains the current\
    \ ASN setting of an audio mixer,\n   if ASN is enabled.  The state values are\
    \ included in the following\n   attributes.\n   Attributes:\n      ri: as defined\
    \ by <asn> element in MSML Conference Core Package.\n      asth: as defined by\
    \ <asn> element in MSML Conference Core Package.\n"
- title: 10.2.2.4.  confconfig.audiomix.n-loudest
  contents:
  - "10.2.2.4.  confconfig.audiomix.n-loudest\n   The <n-loudest> element contains\
    \ the current n-loudest setting of the\n   audio mixer.  The state values are\
    \ included in the following\n   attributes.\n   Attributes:\n      n: as defined\
    \ by <n-loudest> element in MSML Conference Core\n      Package.\n"
- title: 10.2.2.5.  confconfig.videolayout
  contents:
  - "10.2.2.5.  confconfig.videolayout\n   The <videolayout> element contains the\
    \ general video layout\n   configuration using the following attributes.\n   Attributes:\n\
    \      id: as defined by <videolayout> in MSML Conference Core Package.\n    \
    \  type: as defined by <videolayout> in MSML Conference Core Package.\n"
- title: 10.2.2.6.  confconfig.videolayout.root
  contents:
  - "10.2.2.6.  confconfig.videolayout.root\n   The <root> element is used to contain\
    \ root window settings.\n   Attributes:\n      size: as defined by <root> element\
    \ in MSML Conference Core\n      Package.\n      backgroundcolor: as defined by\
    \ <root> element in MSML Conference\n      Core Package.\n      Backgroundimage:\
    \ as defined by <root> element in MSML Conference\n      Core Package.\n"
- title: 10.2.2.7.  confconfig.videolayout.selector
  contents:
  - "10.2.2.7.  confconfig.videolayout.selector\n   The <selector> element is used\
    \ to contain selector settings.\n   Attributes:\n      id: as defined by <selector>\
    \ element in MSML Conference Core\n      Package.\n      method: as defined by\
    \ <selector> element in MSML Conference Core\n      Package.\n      status: as\
    \ defined by <selector> element in MSML Conference Core\n      Package.\n    \
    \  blankothers: as defined by <selector> element in MSML Conference\n      Core\
    \ Package.\n      si: as defined by <selector> element in MSML Conference Core\n\
    \      Package when selector method is \"vas\".\n      speakersees: as defined\
    \ by <selector> element in MSML Conference\n      Core Package when selector method\
    \ is \"vas\".\n"
- title: 10.2.2.8.  confconfig.controller
  contents:
  - "10.2.2.8.  confconfig.controller\n   The <controller> element is used to return\
    \ the conference controller\n   id in its content.  The conference controller\
    \ is the SIP dialog that\n   carries the <createconference> request.  The return\
    \ value is the MSML\n   connection id.\n"
- title: 10.2.2.9.  dialog
  contents:
  - "10.2.2.9.  dialog\n   If conference dialog state is queried, the audit result\
    \ is returned\n   using the <dialog> element as specified in the MSML Audit Dialog\n\
    \   Package.\n"
- title: 10.2.2.10.  stream
  contents:
  - "10.2.2.10.  stream\n   If conference stream state is queried, the audit result\
    \ is returned\n   using the <stream> element as specified in the MSML Audit Stream\n\
    \   Package.\n"
- title: 10.3.  MSML Audit Connection Package
  contents:
  - "10.3.  MSML Audit Connection Package\n   This section describes the MSML Audit\
    \ Connection Package that MAY be\n   implemented to support auditing connection\
    \ services.  The MSML Audit\n   Connection Package follows the framework specified\
    \ by the MSML Audit\n   Core Package.  This package defines the state parameter\
    \ list and\n   audit result for connection auditing.\n"
- title: 10.3.1.  State Parameters
  contents:
  - "10.3.1.  State Parameters\n   Connection state parameter names are prefixed by\
    \ \"audit.conn\".\n      sipdialog: queries the identifier of the SIP dialog with\
    \ which the\n      connection is associated.\n      sipdialog.localseq: queries\
    \ one of the SIP dialog states - local\n      sequence number.\n      sipdialog.remoteseq:\
    \ queries one of the SIP dialog states - remote\n      sequence number.\n    \
    \  sipdialog.localURI: queries one of the SIP dialog states - local\n      URI.\n\
    \      sipdialog.remoteURI: queries one of the SIP dialog states - remote\n  \
    \    URI.\n      sipdialog.remotetarget: queries one of the SIP dialog states\
    \ -\n      remote target.\n      sipdialog.routeset: queries one of the SIP dialog\
    \ states - route\n      set.\n      localsdp: queries the local SDP body of the\
    \ connection.\n      remotesdp: queries the remote SDP body of the connection.\n\
    \      dialog: queries the active dialog information on the connection.\n    \
    \  See MSML Audit Dialog Package for details.\n      stream: queries the active\
    \ stream information on the connection.\n      See MSML Audit Stream Package for\
    \ details.\n"
- title: 10.3.2.  <auditresult>
  contents:
  - "10.3.2.  <auditresult>\n   The <auditresult> attribute \"targetid\" MUST specify\
    \ a connection\n   identifier for a connection result.\n   The <auditresult> element\
    \ MAY contain the following child elements\n   optionally to return additional\
    \ connection state information if the\n   corresponding states are queried and\
    \ are available.\n"
- title: 10.3.2.1.  sipdialog
  contents:
  - "10.3.2.1.  sipdialog\n   The <sipdialog> element contains the associated SIP\
    \ dialog\n   information.  The SIP dialog ID information is returned using the\n\
    \   following attributes.\n      Attributes:\n         callid: call-ID value as\
    \ defined in [n1].  Mandatory.\n         localtag: local-tag value as defined\
    \ in [n1].  Mandatory.\n         remotetag: remote-tag value as defined in [n1].\
    \  Mandatory.\n   This element can contain the following child elements optionally\
    \ to\n   return additional SIP dialog state information to the client if the\n\
    \   corresponding states are queried and available.\n"
- title: 10.3.2.2.  sipdialog.localseq
  contents:
  - "10.3.2.2.  sipdialog.localseq\n   The <localseq> element contains the local sequence\
    \ number.  The local\n   sequence number is one of the SIP dialog states as defined\
    \ in [n1].\n"
- title: 10.3.2.3.  sipdialog.remoteseq
  contents:
  - "10.3.2.3.  sipdialog.remoteseq\n   The <remoteseq> element contains the remote\
    \ sequence number.  The\n   remote sequence number is one of the SIP dialog states\
    \ as defined in\n   [n1].\n"
- title: 10.3.2.4.  sipdialog.localuri
  contents:
  - "10.3.2.4.  sipdialog.localuri\n   The <localuri> element contains the local URI\
    \ value.  The local URI\n   is one of the SIP dialog states as defined in [n1].\n"
- title: 10.3.2.5.  sipdialog.remoteuri
  contents:
  - "10.3.2.5.  sipdialog.remoteuri\n   The <remoteuri> element contains the remote\
    \ URI value.  The remote\n   URI is one of the SIP dialog states as defined in\
    \ [n1].\n"
- title: 10.3.2.6.  sipdialog.remotetarget
  contents:
  - "10.3.2.6.  sipdialog.remotetarget\n   The <remotetarget> element contains the\
    \ remote target value.  The\n   remote target is one of the SIP dialog states\
    \ as defined in [n1].\n"
- title: 10.3.2.7.  sipdialog.routeset
  contents:
  - "10.3.2.7.  sipdialog.routeset\n   The <routeset> element contains the route-set\
    \ value (an ordered list\n   of URIs separated by comma).  The route set is one\
    \ of the SIP dialog\n   states as defined in [n1].\n"
- title: 10.3.2.8.  localsdp
  contents:
  - "10.3.2.8.  localsdp\n   The <localsdp> element contains the local SDP body.\n"
- title: 10.3.2.9.  remotesdp
  contents:
  - "10.3.2.9.  remotesdp\n   The <remotesdp> element contains the remote SDP body.\n"
- title: 10.3.2.10.  dialog
  contents:
  - "10.3.2.10.  dialog\n   If the connection dialog state is queried, the audit result\
    \ returns\n   the queried information using the <dialog> element, as specified\
    \ in\n   the MSML Audit Dialog Package.\n"
- title: 10.3.2.11.  stream
  contents:
  - "10.3.2.11.  stream\n   If the connection stream state is queried, the audit result\
    \ returns\n   the queried information using the <stream> element, as specified\
    \ in\n   the MSML Audit Stream Package.\n"
- title: 10.4.  MSML Audit Dialog Package
  contents:
  - "10.4.  MSML Audit Dialog Package\n   This section describes the MSML Audit Dialog\
    \ Package that MAY be\n   implemented to support auditing dialogs.  The MSML Audit\
    \ Dialog\n   Package follows the framework specified by the MSML Audit Core\n\
    \   Package.\n   The MSML Audit Dialog Package must be used together with either\
    \ the\n   MSML Audit Conference Package or MSML Audit Connection Package, since\n\
    \   the dialogs are applicable to conferences or connections.\n"
- title: 10.4.1.  State Parameters
  contents:
  - "10.4.1.  State Parameters\n   Dialog state parameter names are prefixed by \"\
    dialog\".  Since this\n   package must be used together with the MSML Audit Conference\
    \ Package\n   or MSML Audit Connection Package, the complete dialog state name\
    \ must\n   be prefixed by \"audit.conf.dialog\" or \"audit.conn.dialog\", depending\n\
    \   on the context within which the dialog state is queried.\n   dialog: queries\
    \ the number of active dialog(s) running on the target\n   (a conference or connection);\
    \ basic dialog information will be\n   returned.\n   dialog.duration: queries\
    \ the amount of time a dialog has been\n   running.\n   dialog.primitive: queries\
    \ the media primitive currently being\n   executed by the dialog.\n   dialog.controller:\
    \ queries the dialog controller.\n"
- title: 10.4.2.  <dialog>
  contents:
  - "10.4.2.  <dialog>\n   The <dialog> element is a child element of <auditresult>,\
    \ which\n   contains the active dialog information on the target identified by\n\
    \   the attribute \"targetid\" of the <audioresult> element.\n   Basic dialog\
    \ information is returned using the following attributes.\n   Attributes:\n  \
    \    src: as defined by the <dialogstart> element in the MSML Dialog\n      Core\
    \ Package.\n      type: as defined by the <dialogstart> element in the MSML Dialog\n\
    \      Core Package.  Mandatory.\n      name: as defined by the <dialogstart>\
    \ element in the MSML Dialog\n      Core Package.  Mandatory.\n   This element\
    \ may contain the following child elements optionally to\n   return additional\
    \ dialog information if the corresponding state\n   parameter has been queried\
    \ and the state value is available.\n"
- title: 10.4.2.1.  <duration>
  contents:
  - "10.4.2.1.  <duration>\n   The <duration> element returns the duration that a\
    \ dialog has been\n   running on the specified target.  The duration value is\
    \ included in\n   the element content.  It is a positive integer value (in unit\
    \ of\n   seconds).\n"
- title: 10.4.2.2.  <primitive>
  contents:
  - "10.4.2.2.  <primitive>\n   The <primitive> element returns the currently active\
    \ media primitive\n   in its content.  The active media primitive is the primitive\
    \ that is\n   currently being executed.  Possible return values are play, dtmf,\n\
    \   collect, dtmfgen, tonegen, record, or none.\n"
- title: 10.4.2.3.  <controller>
  contents:
  - "10.4.2.3.  <controller>\n   The <controller> element returns the dialog controller\
    \ id in its\n   content.  The dialog controller is the SIP dialog that carries\
    \ the\n   <dialogstart> request.  The returned value is the MSML connection id.\n"
- title: 10.5.  MSML Audit Stream Package
  contents:
  - "10.5.  MSML Audit Stream Package\n   This section describes the MSML Audit Stream\
    \ Package that MAY be\n   implemented to support auditing stream.  The MSML Audit\
    \ Stream\n   Package follows the framework specified by the MSML Audit Core\n\
    \   Package.\n   The MSML Audit Stream Package MUST be used together with either\
    \ the\n   MSML Audit Conference Package or the MSML Audit Connection Package,\n\
    \   since the stream is applicable between conferences, between\n   connections,\
    \ or between conferences and connections.\n"
- title: 10.5.1.  State Parameters
  contents:
  - "10.5.1.  State Parameters\n   Stream state parameter names are prefixed by \"\
    stream\".  Since this\n   package must be used together with the MSML Audit Conference\
    \ Package\n   or MSML Audit Connection Package, the complete stream state name\
    \ must\n   be prefixed by \"audit.conf.stream\" or \"audit.conn.stream\", depending\n\
    \   on the context within which the stream state is queried.\n   stream: queries\
    \ the number of active streams created on the audited\n   object; basic stream\
    \ information will be returned.\n   stream.clamp: queries the clamping status.\n\
    \   stream.gain: queries the gain control information.\n   stream.visual: queries\
    \ the visual setting.\n"
- title: 10.5.2.  <stream>
  contents:
  - "10.5.2.  <stream>\n   The <stream> element is a child element of <auditresult>\
    \ and contains\n   the active stream information on the target identified by the\n\
    \   attribute \"targetid\" of the <audioresult> element.\n   Basic stream information\
    \ is returned using the following attributes.\n   Attributes:\n      joinwith:\
    \ an identifier of either a connection or a conference\n      with which the audited\
    \ object is joined.  Mandatory.  Wildcard is\n      not allowed.\n      media:\
    \ as defined by the <stream> element in the MSML Conference\n      Core Package.\
    \  Mandatory.\n      dir: direction of stream, from audited target perspective,\
    \ \"from\"\n      or \"to\".  Mandatory.\n      compressed: as defined by the\
    \ <stream> element in the MSML\n      Conference Core Package.\n      display:\
    \ as defined by the <stream> element in the MSML Conference\n      Core Package.\n\
    \      override: as defined by the <stream> element in the MSML\n      Conference\
    \ Core Package.\n      preferred: as defined by the <stream> element in the MSML\n\
    \      Conference Core Package.\n   This element MAY contain the following child\
    \ elements that optionally\n   return additional stream information, if the corresponding\
    \ state\n   parameter is queried and the state value is available.\n"
- title: 10.5.2.1.  <clamp>
  contents:
  - "10.5.2.1.  <clamp>\n   The <clamp> element is included if stream clamping is\
    \ active.  The\n   currently active clamping state values are returned using the\n\
    \   attributes as defined by the <clamp> element in the MSML Conference\n   Core\
    \ Package.\n"
- title: 10.5.2.2.  <gain>
  contents:
  - "10.5.2.2.  <gain>\n   The <gain> element is included if stream gain is active.\
    \  The current\n   gain control state values are returned using the attributes\
    \ as\n   defined by the <gain> element in the MSML Conference Core Package.\n"
- title: 10.5.2.3.  <visual>
  contents:
  - "10.5.2.3.  <visual>\n   The <visual> element is included if stream visual display\
    \ is active.\n   The current visual display settings are returned using the attributes\n\
    \   as defined by the <visual> element in the MSML Conference Core\n   Package.\n"
- title: 11.  Response Codes
  contents:
  - "11.  Response Codes\n   Response codes are used to indicate reasons for failures\
    \ as well as\n   completion status.  The appropriate code and description must\
    \ be\n   passed to the invoking environment on failure.\n   The response codes\
    \ defined in this section are returned as the value\n   of the response attribute\
    \ to the <result> element.  Some values may\n   also be returned as part of a\
    \ namelist to an \"msml.dialog.exit\" event\n   generated when an executing MSML\
    \ dialog fails.\n   Informational (1xx)\n      Reserved for future use\n   Success\
    \ (200)\n      200  OK\n   Request Error (4xx)\n      400  Bad Request\n     \
    \ 401  Unknown Element\n      402  Unsupported Element\n      403  Missing mandatory\
    \ element content\n      404  Forbidden element content\n      405  Invalid element\
    \ content\n      406  Unknown attribute\n      407  Attribute not supported\n\
    \      408  Missing mandatory attribute\n      409  Forbidden attribute is present\n\
    \      410  Invalid attribute value\n      420  Unsupported media description\
    \ language\n      421  Unknown media description language\n      422  Ambiguous\
    \ request (both URI and inline description)\n      423  External document fetch\
    \ error\n      424  Syntax error in foreign language\n      425  Semantic error\
    \ in foreign language\n      426  Unknown error executing foreign language\n \
    \     430  Object does not exist\n      431  Object instance name already used\n\
    \      432  Conference name already in use\n      433  reserved\n      434  External\
    \ document fetch error\n      440  Cannot join objects of the specified class\n\
    \      441  Objects have incompatible media types\n      442  reserved\n     \
    \ 443  reserved\n      444  Number of media inputs exceeded\n      450  Objects\
    \ have incompatible media formats\n      451  Incompatible media stream format\n\
    \   Server Error (5xx)\n      500  Internal media server error\n      503  Service\
    \ Unavailable\n      510  Not in service\n      511  Service Unavailable\n   \
    \   520  No resource to fulfill request\n      521  Internal limit exceeded\n"
- title: 12.  MSML Conference Examples
  contents:
  - "12.  MSML Conference Examples\n   These examples focus on the MSML Conference\
    \ Core Package used by a\n   control agent (CA) to control services on a media\
    \ server (MS).  They\n   show the relationship between SIP signaling to establish\
    \ media\n   sessions and MSML service control commands.  For brevity, only the\n\
    \   content of MSML messages is shown.  The examples assumes that the CA\n   and\
    \ MS use the IPv4 address and UDP port number of the audio stream\n   (on the\
    \ MS) to identify the MSML connection.\n"
- title: 12.1.  Establishing a Dial-In Conference
  contents:
  - "12.1.  Establishing a Dial-In Conference\n      UA                   Control\
    \ Agent             Media Server\n      |                         |          \
    \                 |\n      |                         |        INVITE F1      \
    \    |\n      |                         |-------------------------->|\n      |\
    \                         |           200 F2          |\n      |             \
    \            |<--------------------------|\n      |                         |\
    \           ACK F3          |\n      |                         |-------------------------->|\n\
    \      |                         |                           |\n      |      \
    \                   |     createconference> F4  |\n      |                   \
    \      |-------------------------->|\n      |                         |      \
    \     200 F5          |\n      |                         |<--------------------------|\n\
    \      |    INVITE (SDP UA) F6   |                           |\n      |------------------------>|\
    \                           |\n      |                         |      INVITE (SDP\
    \ UA) F7   |\n      |                         |-------------------------->|\n\
    \      |                         |        200 (SDP MS) F8    |\n      |      \
    \                   |<--------------------------|\n      |                   \
    \      |           ACK F9          |\n      |                         |-------------------------->|\n\
    \      |     200 (SDP MS) F10    |                           |\n      |<------------------------|\
    \                           |\n      |        ACK F11          |             \
    \              |\n      |------------------------>|                          \
    \ |\n      |                         |     <dialogstart> F12     |\n      |  \
    \                       |-------------------------->|\n      |               \
    \          |           200 F13         |\n      |                         |<--------------------------|\n\
    \      |                         |    HTTP interactions F14  |\n      |      \
    \                   |<------------------------->|\n      |                   \
    \      |  <event>(dialog.exit) F15 |\n      |                         |<--------------------------|\n\
    \      |                         |         <join> F16        |\n      |      \
    \                   |-------------------------->|\n      |                   \
    \      |           200 F17         |\n      |                         |<--------------------------|\n\
    \      |         ...             |            ...            |\n      |      \
    \                   |                           |\n      |                   \
    \      |     <dialogstart> F18     |\n      |                         |-------------------------->|\n\
    \      |                         |           200 F19         |\n      |      \
    \                   |-------------------------->|\n      |                   \
    \      |    HTTP interactions F20  |\n      |                         |<--------------------------|\n\
    \      |                         |  <event>(dialog.exit) F21 |\n      |      \
    \                   |-------------------------->|\n      |         ...       \
    \      |            ...            |\n      |                         |      \
    \                     |\n   Steps 1-3: establish an MSML control channel for the\
    \ conference.\n   Alternatively, a control channel could already have been established\n\
    \   that was used for all CA/MS interactions.  A control channel per\n   conference\
    \ is only one possible model.  Currently, MSML uses SIP INFO\n   requests and\
    \ responses on this SIP dialog.  There is a proposal to\n   use this message exchange\
    \ to establish a TCP channel for MSML similar\n   to the approach used for the\
    \ Media Resource Control Protocol v2\n   (MRCPv2).  This approach would require\
    \ that a request identifier be\n   added to the <msml> element to correlate requests\
    \ and responses.\n   This currently relies on the SIP INFO request and response\
    \ for this\n   property.  MSML messages are shown without specifying the transport\n\
    \   in this example, but it assumes a request/response correlation based\n   on\
    \ transport messages.\n   Step 4: create a conference that will mix the loudest\
    \ two speakers\n   and report those speakers to the control agent every 10 seconds.\
    \  The\n   media server will automatically terminate remaining media sessions\n\
    \   and delete the conference and associated resources and when the\n   control\
    \ channel is terminated.\n      <msml version=\"1.1\">\n         <createconference\
    \ name=\"exampleConf\" deletewhen=\"nocontrol\">\n             <audiomix>\n  \
    \              <n-loudest n=\"3\"/>\n                <asn ri=\"10s\"/>\n     \
    \        </audiomix>\n         </createconference>\n      </msml>\n   Step 5:\
    \ conference created successfully\n      <msml version=\"1.1\">\n         <result\
    \ response=\"200\"/>\n      </msml>\n   Steps 6-11: standard 3PCC establishment\
    \ of a user-initiated media\n   session to a media server.  This is the equivalent\
    \ of a dial-in\n   conference participant.  The \"To:\" header returned by the\
    \ MS in the\n   200 response of Step F8 was:\n   To: <sip:msml@ms.example.com>;tag=jd87dfg4h\n\
    \   Step 12: request an initial dialog with the participant to prompt for\n  \
    \ their name, desired conference, etc.  The dialog completes by\n   informing\
    \ the participant that they are joining the conference.  If\n   this was not the\
    \ first participant, the dialog could also announce\n   the other participants.\n\
    \      <msml version=\"1.1\">\n         <dialogstart target=\"conn:jd87dfg4h\"\
    \ name=\"12345\"\n             type=\"application/vxml+xml\"\n             src=\"\
    http://server.example.com/scripts/initial.vxml\"/>\n      </msml>\n   Step 13:\
    \ dialog started successfully.  The dialog identifier is\n   returned.\n     \
    \ <msml version=\"1.1\">\n         <result response=\"200\"/>\n         <dialogid>conn:jd87dfg4h/dialog:12345</dialogid>\n\
    \      </msml>\n   Step 14: sequence of HTTP VoiceXML dialog interactions.\n \
    \  Step 15: the VoiceXML browser exits (but does not disconnect).  If a\n   namelist\
    \ had been specified within the VoiceXML <exit> element, it\n   would have been\
    \ included in the <event> sent to the CA.\n      <msml version=\"1.1\">\n    \
    \     <event name=\"msml.dialog.exit\"\n                id=\"conn:jd87dfg4h/dialog:12345\"\
    />\n      </msml>\n   Step 16: join the participant to the conference and have\
    \ the volume\n   of their contributing audio automatically adjusted to a target\
    \ level\n   of -20 dBm0.\n      <msml version=\"1.1\">\n         <join id1=\"\
    conn:jd87dfg4h\" id2=\"conf:exampleConf\">\n            <stream media=\"audio\"\
    \ dir=\"from-id1\">\n                <gain agc=\"true\" tgtlvl=\"-20\"/>\n   \
    \         </stream>\n            <stream media=\"audio\" dir=\"to-id1\"/>\n  \
    \    </msml>\n   Step 17: successfully joined to conference\n      <msml version=\"\
    1.1\">\n         <result response=\"200\"/>\n      </msml>\n   Steps 6 through\
    \ 17 are repeated for the second participant.\n   Step 18: play a join tone or\
    \ message announcing the new participant\n   to the conference.\n      <msml version=\"\
    1.1\">\n         <dialogstart target=\"conf:exampleConf\"\n             type=\"\
    application/vxml+xml\"\n             src=\"http://server.example.com/scripts/joinmsg.vxml\"\
    />\n      </msml>\n   Step 19: dialog started successfully.  The dialog identifier\
    \ is\n   returned.  The media server assigned a unique identifier since name\n\
    \   attribute was not specified in <dialogstart>.\n      <msml version=\"1.1\"\
    >\n         <result response=\"200\"/>\n         <dialogid>conf:ExampleConf/dialog:j6fs8745</dialogid>\n\
    \      </msml>\n   Step 20: HTTP VoiceXML dialog interaction(s).\n   Step 21:\
    \ the VoiceXML browser exits.\n      <msml version=\"1.1\">\n         <event name=\"\
    msml.dialog.exit\"\n                id=\"conf:ExampleConf/dialog:j6fs8745\"/>\n\
    \      </msml>\n   Steps 6 through 21 are repeated for the third and subsequent\n\
    \   participants.\n"
- title: 12.2.  Example of a Sidebar Audio Conference
  contents:
  - "12.2.  Example of a Sidebar Audio Conference\n   This example assumes that a\
    \ conference has already been established\n   as in the previous example.  It\
    \ creates a sidebar conference that\n   hears the main conference as a whisper.\
    \  Three participants are moved\n   to the sidebar.  After some period of time,\
    \ the sidebar participants\n   are returned to the main conference and the sidebar\
    \ is deleted.\n   Step 1: the sidebar conference is created.  It is joined half-duplex\n\
    \   to the main conference and a manual gain object is inserted in the\n   media\
    \ stream.  Three participants are then moved from the main\n   conference to the\
    \ sidebar.  Although not shown, a CA could include\n   the \"mark\" attribute\
    \ in each element to allow recovery in the event\n   of a mid- transaction error.\n\
    \      <msml version=\"1.1\">\n         <createconference name=\"sidebarConf\"\
    \n                           deletewhen=\"nomedia\">\n             <audiomix/>\n\
    \         </createconference>\n         <join id1=\"conf:sidebarConf\" id2=\"\
    conf:exampleConf\">\n             <stream media=\"audio\" dir=\"to-id1\">\n  \
    \               <gain amt=\"-20\"/>\n             </stream>\n         </join>\n\
    \         <unjoin id1=\"conn:gs5s4-1\" id2=\"conf:exampleConf\"/>\n         <join\
    \ id1=\"conn:gs5s4-1\" id2=\"conf:sidebarConf\"/>\n         <unjoin id1=\"conn:hd764gr9-2\"\
    \ id2=\"conf:exampleConf\"/>\n         <join id1=\"conn:hd764gr9-2\" id2=\"conf:sidebarConf\"\
    />\n         <unjoin id1=\"conn:h37frdvgs65-3\" id2=\"conf:exampleConf\"/>\n \
    \        <join id1=\"conn:h37frdvgs65-3\" id2=\"conf:sidebarConf\"/>\n      </msml>\n\
    \   Step 2: sidebar conference created successfully and participants\n   joined.\n\
    \      <msml version=\"1.1\">\n         <result response=\"200\"/>\n      </msml>\n\
    \   Step 3: once the sidebar conference has completed, the participants\n   are\
    \ rejoined to the main conference.  The sidebar is destroyed\n   automatically\
    \ by the MS when the last media stream is removed as\n   specified when the sidebar\
    \ conference was created.\n      <msml version=\"1.1\">\n         <unjoin id1=\"\
    conn:gs5s4-1\" id2=\"conf:sidebarConf\"/>\n         <join id1=\"conn:gs5s4-1\"\
    \ id2=\"conf:exampleConf\"/>\n         <unjoin id1=\"conn:hd764gr9-2\" id2=\"\
    conf:sidebarConf\"/>\n         <join id1=\"conn:hd764gr9-2\" id2=\"conf:exampleConf\"\
    />\n         <unjoin id1=\"conn:h37frdvgs65-3\" id2=\"conf:sidebarConf\"/>\n \
    \        <join id1=\"conn:h37frdvgs65-3\" id2=\"conf:exampleConf\"/>\n      </msml>\n\
    \   Step 4: participants successfully moved to main conference and\n   sidebar\
    \ destroyed.\n      <msml version=\"1.1\">\n         <result response=\"200\"\
    />\n      </msml>\n"
- title: 12.3.  Example of Removing a Conference
  contents:
  - "12.3.  Example of Removing a Conference\n   This example assumes a conference\
    \ created similar to the first\n   example where there is an MSML control channel\
    \ specific to the\n   conference and the conference has been configured to be\
    \ deleted when\n   that channel is removed (using SIP).\n   Steps 1-2: the CA\
    \ signals BYE for the SIP dialog used to establish\n   the conference control\
    \ channel.\n   Steps 3-6: the MS initiates terminating the media sessions for\
    \ each\n   participant remaining in the conference.\n   The MS deletes the conference\
    \ and removes all resources when the last\n   participant has been removed.\n"
- title: 12.4.  Example of Modifying Video Layout
  contents:
  - "12.4.  Example of Modifying Video Layout\n   Assume that a conference named \"\
    example\" is created using the\n   following mixer descriptions.\n      +---+---+\n\
    \      | 1 | 2 |\n      +---+---+\n      | 3 | 4 |\n      +---+---+\n      <createconference\
    \ name=\"quad-split\">\n         <audiomix>\n            <n-loudest n=\"3\"/>\n\
    \            <asn ri=\"10s\"/>\n         </audiomix>\n         <videolayout>\n\
    \            <root size=\"CIF\" background=\"white\" />\n            <selector\
    \ id=\"default\" method=\"vas\" si=\"500ms\">\n               <region id=\"1\"\
    \ left=\"0\" top=\"0\" relativesize=\"1/4\"/>\n            </selector>\n     \
    \       <region id=\"2\" left=\"50%\" top=\"0\" relativesize=\"1/4\"/>\n     \
    \       <region id=\"3\" left=\"0%\" top=\"50%\" relativesize=\"1/4\">\n     \
    \       <region id=\"4\" left=\"50%\" top=\"50%\" relativesize=\"1/4\"/>\n   \
    \      </videolayout>\n      </createconference>\n      The following would change\
    \ the size of the video window to QCIF\n      and the background color to the\
    \ default \"black\".\n      <modifyconference id=\"conf:example\">\n         <videolayout>\n\
    \            <root size=\"4CIF\"/>\n         </videolayout>\n      </modifyconference>\n\
    \   The relative location of the regions does not change.  However, the\n   sizes\
    \ of the regions do change because they are relative to the size\n   of the root\
    \ window.  The result is a layout that looks identical but\n   half the size.\n\
    \   The following would freeze the video displayed in region \"2\" without\n \
    \  affecting any other attributes of that region.\n      <modifyconference id=\"\
    conf:example\">\n         <videolayout>\n            <region id=\"2\" left=\"\
    50%\" top=\"0\" relativesize=\"1/4\"\n                           freeze=\"true\"\
    />\n         </videolayout>\n      </modifyconference>\n"
- title: 13.  MSML Dialog Examples
  contents:
  - "13.  MSML Dialog Examples\n   These examples focus on the MSML Dialog Base Package\
    \ and the MSML\n   Dialog Group Package.\n"
- title: 13.1.  Announcement
  contents:
  - "13.1.  Announcement\n   The following is a simple announcement scenario.  Two\
    \ recorded audio\n   files are played in sequence followed by generated speech\
    \ followed by\n   a variable.  The results are reported once media generation\n\
    \   completes.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml\
    \ version=\"1.1\">\n         <dialogstart target=\"conn:12345\" name=\"12345\"\
    >\n            <play>\n               <audio uri=\"file://clip1.wav\"/>\n    \
    \           <audio uri=\"http://host1/clip2.wav\"/>\n               <tts uri=\"\
    http://host2/text.ssml\"/>\n               <var type=\"date\" subtype=\"mdy\"\
    \ value=\"20030601\"/>\n            </play>\n            <send target=\"source\"\
    \ event=\"done\" namelist=\"play.amt\n                                       \
    \        play.end\"/>\n         </dialogstart>\n      </msml>\n"
- title: 13.2.  Voice Mail Retrieval
  contents:
  - "13.2.  Voice Mail Retrieval\n   Below is an example that shows a simple voice\
    \ mail retrieval\n   operation consisting of playing a message and allowing the\
    \ user to\n   pause and resume play using '5' to toggle the state.  The operation\n\
    \   would terminate when the play completed or the user entered '#'.\n   During\
    \ the play, the user can advance forward and backward through\n   the message\
    \ as well as rewinding to the beginning.\n      <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n      <msml version=\"1.1\">\n        <dialogstart target=\"conn:12345\"\
    \ name=\"12345\">\n         <group topology=\"parallel\">\n            <play>\n\
    \               <audio uri=\"file://message.wav\"/>\n               <playexit>\n\
    \                  <send target=\"group\" event=\"terminate\"/>\n            \
    \   </playexit>\n            </play>\n            <dtmf iterate=\"forever\">\n\
    \               <pattern digits=\"5\">\n                  <send target=\"play\"\
    \ event=\"toggle-state\"/>\n               </pattern>\n               <pattern\
    \ digits=\"6\">\n                  <send target=\"play\" event=\"forward\"/>\n\
    \               </pattern>\n               <pattern digits=\"7\">\n          \
    \        <send target=\"play\" event=\"backward\"/>\n               </pattern>\n\
    \               <pattern digits=\"8\">\n                  <send target=\"play\"\
    \ event=\"restart\"/>\n               </pattern>\n               <pattern digits=\"\
    #\">\n                  <send target=\"play\" event=\"terminate\"/>\n        \
    \       </pattern>\n            </dtmf>\n         </group>\n       </dialogstart>\n\
    \      </msml>\n"
- title: 13.3.  Play and Record
  contents:
  - "13.3.  Play and Record\n   A more complex example is a play and record operation.\
    \  This sources\n   and sinks media and uses voice activity DTMF detection and\n\
    \   recognition to influence behavior.  Any DTMF input or voice activity\n   will\
    \ barge the play and cause the record to begin.  However, if the\n   prompt was\
    \ barged with a DTMF digit of '#', the record terminates\n   without starting.\
    \  When the play terminates, it send a starttimer\n   event to the VAD to allow\
    \ it to recognize an initial silence\n   condition.  The recording will be terminated\
    \ (without starting) when\n   the VAD detects an initial 3 seconds of silence.\n\
    \   Once resumed (based upon voice detection), the recording may be\n   terminated\
    \ under several conditions.  It will terminate after 5\n   seconds of silence\
    \ or after 60 seconds elapses.  It will also\n   terminate if a '#' key is recognized.\
    \  Every aspect of this behavior\n   can be modified by changing what is recognized\
    \ and the events that\n   are sent.  The following example uses the MSML Dialog\
    \ Group Package.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml\
    \  version=\"1.1\">\n       <dialogstart target=\"conn:12345\" name=\"12345\"\
    >\n         <group topology=\"parallel\">\n            <play>\n              \
    \ <audio uri=\"file://prompt.wav\"/>\n               <playexit>\n            \
    \      <send target=\"vad\" event=\"starttimer\"/>\n               </playexit>\n\
    \            </play>\n            <dtmf>\n               <pattern digits=\"#\"\
    >\n                  <send target=\"record\" event=\"terminate.termkey\"/>\n \
    \              </pattern>\n               <detect>\n                  <send target=\"\
    play\" event=\"terminate\"/>\n               </detect>\n            </dtmf>\n\
    \            <vad>\n               <voice len=\"10ms\">\n                  <send\
    \ target=\"play\" event=\"terminate\"/>\n                  <send target=\"record\"\
    \ event=\"resume\"/>\n               </voice>\n               <silence len=\"\
    3s\">\n                  <send target=\"record\" event=\"nospeech\"/>\n      \
    \         </silence>\n               <tsilence len=\"5s\">\n                 \
    \ <send target=\"record\" event=\"terminate.finalsilence\"/>\n               </tsilence>\n\
    \            </vad>\n            <record initial=\"suspend\" maxtime=\"60s\"\n\
    \                    dest=\"file://record.wav\" format=\"g729\">\n           \
    \    <recordexit>\n                  <send target=\"group\" event=\"terminate\"\
    />\n               </recordexit>\n            </record>\n            <groupexit>\n\
    \               <send target=\"source\" event=\"done\"\n                     namelist=\"\
    record.len record.end\"/>\n            </groupexit>\n         </group>\n     \
    \  </dialogstart>\n      </msml>\n   The following implements the same functionality,\
    \ as described above,\n   in using the MSML Dialog Base Package, using the <record>\
    \ composite\n   mechanism for the play and record operation.\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <msml  version=\"1.1\">\n    <dialogstart target=\"\
    conn:12345\" name=\"12345\">\n      <record prespeech=\"3s\" postspeech=\"5s\"\
    \ maxtime=\"60s\" termkey=\"#\"\n                 dest=\"file://record.wav\" format=\"\
    g729\">\n         <play barge=\"true\">\n            <audio uri=\"file://prompt.wav\"\
    />\n         </play>\n         <recordexit>\n            <send target=\"source\"\
    \ event=\"done\"\n                  namelist=\"record.len record.end\"/>\n   \
    \      </recordexit>\n      </record>\n    </dialogstart>\n   </msml>\n"
- title: 13.4.  Speech Recognition
  contents:
  - "13.4.  Speech Recognition\n   The following simple example requests that a user\
    \ speak the name of a\n   city and returns the result.\n      <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"1.1\">\n       <dialogstart\
    \ target=\"conn:12345\" name=\"12345\">\n         <group topology=\"parallel\"\
    >\n            <play>\n               <audio uri=\"file://prompt.wav\"/>\n   \
    \         </play>\n            <speech>\n               <grammar version=\"1.0\"\
    >\n                  <rule id=\"city\" scope=\"public\">\n                   \
    \  <item>\n                        <one-of>\n                           <item>vancouver</item>\n\
    \                           <item>new york</item>\n                          \
    \ <item>london</item>\n                        </one-of>\n                   \
    \  </item>\n                  </rule>\n                  <match>\n           \
    \          <send target=\"group\" event=\"terminate\"/>\n                  </match>\n\
    \               </grammar>\n               <noinput>\n                  <send\
    \ target=\"group\" event=\"terminate\"/>\n               </noinput>\n        \
    \       <nomatch>\n                  <send target=\"group\" event=\"terminate\"\
    />\n               </nomatch>\n            </speech>\n            <groupexit>\n\
    \               <send target=\"source\" event=\"done\"\n                     \
    \        namelist=\"speech.end speech.results\"/>\n            </groupexit>\n\
    \         </group>\n       </dialogstart>\n      </msml>\n"
- title: 13.5.  Play and Collect
  contents:
  - "13.5.  Play and Collect\n   This example prompts a user to enter 4 DTMF digits\
    \ terminated by the\n   '#' key (represented by \"xxxx#\" below).  The prompt\
    \ will be barged\n   and the user has 10 seconds to begin entering input or no\
    \ input will\n   be indicated.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n      <msml version=\"1.1\">\n       <dialogstart target=\"conn:12345\" name=\"\
    12345\">\n         <group topology=\"parallel\">\n            <play>\n       \
    \        <audio uri=\"file://prompt.wav\"/>\n               <playexit>\n     \
    \             <send target=\"dtmf\" event=\"starttimer\"/>\n               </playexit>\n\
    \            </play>\n            <dtmf fdt=\"10s\" idt=\"16s\">\n           \
    \    <pattern digits=\"xxxx#\">\n                  <send target=\"group\" event=\"\
    terminate\"/>\n               </pattern>\n               <detect>\n          \
    \        <send target=\"play\" event=\"terminate\"/>\n               </detect>\n\
    \               <noinput>\n                  <send target=\"group\" event=\"terminate\"\
    />\n               </noinput>\n               <nomatch>\n                  <send\
    \ target=\"group\" event=\"terminate\"/>\n               </nomatch>\n        \
    \    </dtmf>\n            <groupexit>\n               <send target=\"source\"\
    \ event=\"done\"\n                     namelist=\"dtmf.digits dtmf.end\"/>\n \
    \           </groupexit>\n         </group>\n       </dialogstart>\n      </msml>\n\
    \   The following implements the same functionality, as described above,\n   using\
    \ the MSML Dialog Base Package, using the <collect> composite\n   mechanism for\
    \ the play and collect operation.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n      <msml version=\"1.1\">\n       <dialogstart target=\"conn:12345\" name=\"\
    12345\">\n         <collect fdt=\"10s\" idt=\"16s\">\n            <play barge=\"\
    true\">\n               <audio uri=\"file://prompt.wav\"/>\n            </play>\n\
    \            <pattern digits=\"xxxx#\">\n               <send target=\"source\"\
    \ event=\"done\"\n                     namelist=\"dtmf.digits dtmf.end\"/>\n \
    \           </pattern>\n            <noinput>\n               <send target=\"\
    source\" event=\"done\"\n                     namelist=\"dtmf.end\"/>\n      \
    \      </noinput>\n            <nomatch>\n               <send target=\"source\"\
    \ event=\"done\"\n                     namelist=\"dtmf.end\"/>\n            </nomatch>\n\
    \         </collect>\n       </dialogstart>\n      </msml>\n"
- title: 13.6.  User Controlled Gain
  contents:
  - "13.6.  User Controlled Gain\n   This shows an example of nesting groups to create\
    \ an arbitrary full-\n   duplex media control.  DTMF is detected on media flowing\
    \ in one\n   direction and used to adjust the gain applied to media flowing in\
    \ the\n   opposite direction.  Additionally, the stream that is used to detect\n\
    \   DTMF has DTMF removed and its gain automatically adjusted before\n   leaving\
    \ the group.  This widget could be used between a conference\n   participant and\
    \ a conference mixer.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    \
    \  <msml  version=\"1.0\">\n       <dialogstart target=\"conn:12345\" name=\"\
    12345\">\n         <group topology=\"fullduplex\">\n            <group topology=\"\
    parallel\">\n               <dtmf>\n                  <pattern digits=\"1\" iterate=\"\
    forever\">\n                     <send target=\"gain\" event=\"louder\"/>\n  \
    \                </pattern>\n                  <pattern digits=\"2\" iterate=\"\
    forever\">\n                     <send target=\"gain\" event=\"softer\"/>\n  \
    \                </pattern>\n               </dtmf>\n               <group topology=\"\
    serial\">\n                  <clamp/>\n                  <agc tgtlvl=\"0\"/>\n\
    \               </group>\n            </group>\n            <gain amt=\"0\" incr=\"\
    5\"/>\n         </group>\n       </dialogstart>\n      </msml>\n"
- title: 14.  MSML Audit Examples
  contents:
  - "14.  MSML Audit Examples\n   The following examples describe the MSML Audit Conference\
    \ Package and\n   the MSML Audit Connection Package, and their use together with\
    \ the\n   MSML Audit Dialog Package or/and the MSML Audit Stream Package.\n"
- title: 14.1.  Audit All Conferences
  contents:
  - "14.1.  Audit All Conferences\n   This example describes an audit of all active\
    \ conferences on the\n   media server, querying the conference configurations.\n\
    \      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"1.1\"\
    >\n         <audit queryid=\"conf:*\" statelist=\"audit.conf.confconfig.*\"/>\n\
    \      </msml>\n   The following result assumes two conferences currently allocated\
    \ by\n   the media server.  Conference \"conf:1\" contains both an audio mixer\n\
    \   (with ASN enabled) and a video layout (vas) created, while conference\n  \
    \ \"conf:2\" contains only an audio mixer created with ASN disabled.\n      <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"1.1\">\n       \
    \  <result response=\"200\">\n            <auditresult targetid=\"conf:1\">\n\
    \               <confconfig deletewhen=\"nocontrol\" term=\"true\">\n        \
    \          <audiomix id=\"audiomix1\">\n                     <asn ri=\"5s\"/>\n\
    \                     <n-loudest n=\"16\"/>\n                  </audiomix>\n \
    \                   <videolayout id=\"videolayout1\"\n                       \
    \          type=\"text/msml-basic-layout\">\n                       <selector\
    \ id=\"selector1\" method=\"vas\" si=\"5s\"\n                                \
    \ speakersees=\"current\">\n                          <root size=\"CIF\"/>\n \
    \                      </selector>\n                    </videolayout>\n     \
    \             <controller>conn:1234</controller>\n               </confconfig>\n\
    \            </auditresult>\n            <auditresult targetid=\"conf:2\">\n \
    \              <confconfig deletewhen=\"nomedia\" term=\"true\">\n           \
    \       <audiomix id=\"audiomix2\">\n                     <n-loudest n=\"1\"/>\n\
    \                  </audiomix>\n                  <controller>conn:1234</controller>\n\
    \               </confconfig>\n            </auditresult>\n         </result>\n\
    \      </msml>\n"
- title: 14.2.  Audit Conference Dialogs
  contents:
  - "14.2.  Audit Conference Dialogs\n   This example describes an audit of active\
    \ dialogs on a specific\n   conference.  The request queries all available dialog\
    \ states.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"\
    1.1\">\n         <audit queryid=\"conf:1\" statelist=\"audit.conf.dialog.*\"/>\n\
    \      </msml>\n   The example result assumes a single dialog running on conference\n\
    \   \"conf:1\", which has been running for 60 seconds, and the dialog is\n   currently\
    \ executing a record operation.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n      <msml version=\"1.1\">\n         <result response=\"200\">\n       \
    \     <auditresult targetid=\"conf:1\">\n               <dialog name=\"sample\"\
    >\n                  <duration>60</duration>\n                  <primitive>record</primitive>\n\
    \                  <controller>conn:1234</controller>\n               </dialog>\n\
    \            </auditresult>\n         </result>\n      </msml>\n"
- title: 14.3.  Audit Conference Streams
  contents:
  - "14.3.  Audit Conference Streams\n   This example request describes an audit of\
    \ active streams on a\n   specific conference.  The request queries all available\
    \ stream\n   states.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n     \
    \ <msml version=\"1.1\">\n         <audit queryid=\"conf:1\" statelist=\"audit.conf.stream.*\"\
    />\n      </msml>\n   The example result assumes three audio participants in the\n\
    \   conference.  Connection \"conn:1234\" is a talk-listen participant with\n\
    \   both clamp and gain control enabled.  Connection \"conn:1235\" is a\n   talk-only\
    \ participant.  Connection \"conn:1236\" is a listen-only\n   participant with\
    \ automatic gain control enabled.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n      <msml version=\"1.1\">\n         <result response=\"200\">\n       \
    \     <auditresult targetid=\"conf:1\">\n               <stream joinwith=\"conn:1234\"\
    \ media=\"audio\" dir=\"to\">\n                  <clamp dtmf=\"true\" tone=\"\
    false\"/>\n                  <gain amt=\"-10\"/>\n               </stream>\n \
    \              <stream joinwith=\"conn:1234\" media=\"audio\" dir=\"from\">\n\
    \                  <gain amt=\"10\"/>\n               </stream>\n            \
    \   <stream joinwith=\"conn:1235\" media=\"audio\" dir=\"to\">\n             \
    \  </stream>\n               <stream joinwith=\"conn:1236\" media=\"audio\" dir=\"\
    from\">\n                  <gain agc=\"true\" tgtlvl=\"0\" maxgain=\"10\"/>\n\
    \               </stream>\n            </auditresult>\n         </result>\n  \
    \    </msml>\n"
- title: 14.4.  Audit All Connections
  contents:
  - "14.4.  Audit All Connections\n   This example request describes an audit of all\
    \ active connections on\n   the media server.  No additional state is queried.\n\
    \      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"1.1\"\
    >\n         <audit queryid=\"conn:*\"/>\n      </msml>\n   The example result\
    \ assumes five connections currently allocated by\n   the media server.\n    \
    \  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"1.1\">\n\
    \         <result response=\"200\">\n            <auditresult targetid=\"conn:1230\"\
    />\n            <auditresult targetid=\"conn:1231\"/>\n            <auditresult\
    \ targetid=\"conn:1232\"/>\n            <auditresult targetid=\"conn:1233\"/>\n\
    \            <auditresult targetid=\"conn:1234\"/>\n         </result>\n     \
    \ </msml>\n"
- title: 14.5.  Audit Connection Dialogs
  contents:
  - "14.5.  Audit Connection Dialogs\n   This example request describes an audit of\
    \ active dialogs on a\n   specific connection.  No additional dialog state is\
    \ queried.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"\
    1.1\">\n         <audit queryid=\"conn:1234\" statelist=\"audit.conn.dialog\"\
    />\n      </msml>\n   The example result assumes three dialogs running on the\
    \ connection.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"\
    1.1\">\n         <result response=\"200\">\n            <auditresult targetid=\"\
    conn:1234\">\n               <dialog name=\"sample1\"/>\n               <dialog\
    \ name=\"sample2\"/>\n               <dialog name=\"sample3\"/>\n            </auditresult>\n\
    \         </result>\n      </msml>\n"
- title: 14.6.  Audit Connection Streams
  contents:
  - "14.6.  Audit Connection Streams\n   This example request describes an audit of\
    \ active streams on a\n   specific connection.  No additional stream state is\
    \ queried.\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"\
    1.1\">\n         <audit queryid=\"conn:1234\" statelist=\"audit.conn.stream\"\
    />\n      </msml>\n   The example result assumes three audio streams created between\
    \ target\n   connection and other MSML objects, one of which is a bidirectional\n\
    \   stream between target connection and a conference, and two are\n   unidirectional\
    \ streams between two other connections.\n      <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n      <msml version=\"1.1\">\n         <result response=\"200\">\n\
    \            <auditresult targetid=\"conn:1234\">\n               <stream joinwith=\"\
    conf:1\" media=\"audio\" dir=\"to\"/>\n               <stream joinwith=\"conf:1\"\
    \ media=\"audio\" dir=\"from\"/>\n               <stream joinwith=\"conn:1235\"\
    \ media=\"audio\" dir=\"to\"/>\n               <stream joinwith=\"conn:1236\"\
    \ media=\"audio\" dir=\"from\"/>\n            </auditresult>\n         </result>\n\
    \      </msml>\n"
- title: 14.7.  Audit Connection with Selective States
  contents:
  - "14.7.  Audit Connection with Selective States\n   This example describes an audit\
    \ of a specific connection, querying\n   associated SIP dialog ID and SDP info.\n\
    \      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"1.1\"\
    >\n         <audit queryid=\"conn:1234\" statelist=\"audit.conn.sipdialog\n  \
    \          audit.conn.localsdp audit.conn.remotesdp\"/>\n      </msml>\n     \
    \ <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <msml version=\"1.1\">\n \
    \        <result response=\"200\">\n            <auditresult targetid=\"conn:1234\"\
    >\n               <sipdialog callid=\"ABCD@10.0.0.10:5060\"\n                \
    \          localtag=\"sdfjsiodf\"\n                          remotetag=\"zvnmviuhd8\"\
    />\n               <localsdp>\n                  v=0\n                  o=- 31691\
    \ 31691 IN IP4 ms5mpc11.lab.radisys.com\n                  s=media server session\n\
    \                  t=0 0\n                  m=audio 33794 RTP/AVP 0\n        \
    \          c=IN IP4 10.3.5.111\n                  a=rtpmap:0 PCMU/8000\n     \
    \             a=sendrecv\n                  m=video 32770 RTP/AVP 34\n       \
    \           c=IN IP4 10.3.5.11\n                  b=AS:48\n                  a=rtpmap:34\
    \ H263/90000\n                  a=fmtp:34 CIF=1\n                  a=sendrecv\n\
    \               </localsdp>\n               <remotesdp>\n                  v=0\n\
    \                  o=- 12345 12345 IN IP4 10.0.0.88\n                  s=RadiSys\
    \ SIP Media Server session\n                  t=0 0\n                  c=IN IP4\
    \ 10.0.0.126\n                  b=AS:128\n                  m=audio 10000 RTP/AVP\
    \ 0\n                  a=rtpmap:0 PCMU/8000\n                  a=ptime:20\n  \
    \                a=sendrecv\n                  m=video 10002 RTP/AVP 34\n    \
    \              a=rtpmap:34 H263/90000\n                  a=fmtp:34 CIF=1\n   \
    \               a=sendrecv\n               </remotesdp>\n            </auditresult>\n\
    \         </result>\n      </msml>\n"
- title: 15.  Future Work
  contents:
  - "15.  Future Work\n   The following capabilities may be added in future versions\
    \ of this\n   document:\n   o Ability for MSML clients to audit or query the media\
    \ server for\n     supported set of MSML packages and profiles.\n   o Ability\
    \ to version MSML packages and profiles and naming scheme for\n     MSML extension\
    \ packages.\n"
- title: 16.  XML Schema
  contents:
  - "16.  XML Schema\n   MSML specification consists of a set of XML schemas, all\
    \ of which may\n   be used together or any sub-set of the schemas may be used\
    \ for each\n   MSML package.  The following sections define a complete set of\n\
    \   schemas covering all MSML packages.\n   Each package contains a single schema\
    \ file, <package-name>-\n   datatypes.xsd.  This schema file can be included by\
    \ its extended\n   package(s).  Every package optionally contains another schema\
    \ file,\n   <package_name>.xsd, which can be used directly to build or validate\n\
    \   MSML scripts for a given package.\n   The complete MSML schema (msml.xsd)\
    \ includes all the individual MSML\n   packages.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n     \
    \         elementFormDefault=\"qualified\"\n              attributeFormDefault=\"\
    unqualified\">\n    <xs:include schemaLocation=\"msml-core-datatypes.xsd\"/>\n\
    \    <xs:include schemaLocation=\"msml-conf-core-datatypes.xsd\"/>\n    <xs:include\
    \ schemaLocation=\"msml-dialog-core-datatypes.xsd\"/>\n    <xs:include schemaLocation=\"\
    msml-dialog-base-datatypes.xsd\"/>\n    <xs:include schemaLocation=\"msml-dialog-transform-datatypes.xsd\"\
    />\n    <xs:include schemaLocation=\"msml-dialog-group-datatypes.xsd\"/>\n   \
    \ <xs:include schemaLocation=\"msml-dialog-speech-datatypes.xsd\"/>\n    <xs:include\
    \ schemaLocation=\"msml-dialog-fax-detect-datatypes.xsd\"/>\n    <xs:include schemaLocation=\"\
    msml-dialog-fax-sendrecv-\n                datatypes.xsd\"/>\n    <xs:include\
    \ schemaLocation=\"msml-audit-core-datatypes.xsd\"/>\n    <xs:include schemaLocation=\"\
    msml-audit-conf-datatypes.xsd\"/>\n    <xs:include schemaLocation=\"msml-audit-conn-datatypes.xsd\"\
    />\n    <xs:include schemaLocation=\"msml-audit-dialog-datatypes.xsd\"/>\n   \
    \ <xs:include schemaLocation=\"msml-audit-stream-datatypes.xsd\"/>\n    <xs:element\
    \ name=\"msml\">\n     <xs:complexType>\n      <xs:choice>\n       <xs:group ref=\"\
    msmlRequestType\" maxOccurs=\"unbounded\"/>\n       <xs:element name=\"event\"\
    >\n        <xs:complexType>\n         <xs:choice maxOccurs=\"unbounded\">\n  \
    \        <xs:sequence>\n           <xs:element name=\"name\" type=\"msmlEventNameValue.datatype\"\
    />\n           <xs:element name=\"value\">\n            <xs:simpleType>\n    \
    \         <xs:restriction base=\"xs:string\">\n              <xs:pattern value=\"\
    [a-zA-Z0-9.]+\"/>\n             </xs:restriction>\n            </xs:simpleType>\n\
    \           </xs:element>\n          </xs:sequence>\n         </xs:choice>\n \
    \        <xs:attribute name=\"name\" type=\"msmlEventName.datatype\"\n       \
    \                use=\"required\"/>\n         <xs:attribute name=\"id\" type=\"\
    msmlEventSource.datatype\"\n                       use=\"required\"/>\n      \
    \  </xs:complexType>\n       </xs:element>\n       <xs:element name=\"result\"\
    >\n        <xs:complexType>\n         <xs:choice>\n          <xs:element ref=\"\
    description\" minOccurs=\"0\"/>\n          <xs:sequence>\n           <xs:element\
    \ ref=\"msmlResultSimple\" minOccurs=\"0\"\n                       maxOccurs=\"\
    unbounded\"/>\n           <xs:element ref=\"msmlResultComplex\" minOccurs=\"0\"\
    \n                       maxOccurs=\"unbounded\"/>\n          </xs:sequence>\n\
    \         </xs:choice>\n         <xs:attribute name=\"response\">\n          <xs:simpleType>\n\
    \           <xs:restriction base=\"xs:string\">\n            <xs:pattern value=\"\
    \\d{3}\"/>\n           </xs:restriction>\n          </xs:simpleType>\n       \
    \  </xs:attribute>\n         <xs:attribute name=\"mark\" type=\"mark.datatype\"\
    />\n        </xs:complexType>\n       </xs:element>\n      </xs:choice>\n    \
    \  <xs:attribute name=\"version\" type=\"xs:string\" use=\"required\"\n      \
    \              fixed=\"1.1\"/>\n     </xs:complexType>\n    </xs:element>\n  \
    \ </xs:schema>\n"
- title: 16.1.  MSML Core
  contents:
  - '16.1.  MSML Core

    '
- title: 16.1.1.  msml-core.xsd
  contents:
  - "16.1.1.  msml-core.xsd\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema\
    \ xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n   elementFormDefault=\"qualified\"\
    \ attributeFormDefault=\"unqualified\">\n    <xs:include schemaLocation=\"msml-core-datatypes.xsd\"\
    />\n    <xs:element name=\"msml\">\n     <xs:complexType>\n      <xs:choice>\n\
    \       <xs:group ref=\"msmlRequestType\" maxOccurs=\"unbounded\"/>\n       <xs:element\
    \ name=\"event\">\n        <xs:complexType>\n         <xs:choice maxOccurs=\"\
    unbounded\">\n          <xs:sequence>\n           <xs:element name=\"name\" type=\"\
    msmlEventNameValue.datatype\"/>\n           <xs:element name=\"value\">\n    \
    \        <xs:simpleType>\n             <xs:restriction base=\"xs:string\">\n \
    \             <xs:pattern value=\"[a-zA-Z0-9.]+\"/>\n             </xs:restriction>\n\
    \            </xs:simpleType>\n           </xs:element>\n          </xs:sequence>\n\
    \         </xs:choice>\n         <xs:attribute name=\"name\" type=\"msmlEventName.datatype\"\
    \n                       use=\"required\"/>\n         <xs:attribute name=\"id\"\
    \ type=\"msmlEventSource.datatype\"\n                       use=\"required\"/>\n\
    \        </xs:complexType>\n       </xs:element>\n       <xs:element name=\"result\"\
    >\n        <xs:complexType>\n         <xs:choice>\n          <xs:element ref=\"\
    description\" minOccurs=\"0\"/>\n          <xs:sequence>\n           <xs:element\
    \ ref=\"msmlResultSimple\" minOccurs=\"0\"\n                       maxOccurs=\"\
    unbounded\"/>\n           <xs:element ref=\"msmlResultComplex\" minOccurs=\"0\"\
    \n                       maxOccurs=\"unbounded\"/>\n          </xs:sequence>\n\
    \         </xs:choice>\n         <xs:attribute name=\"response\">\n          <xs:simpleType>\n\
    \           <xs:restriction base=\"xs:string\">\n            <xs:pattern value=\"\
    \\d{3}\"/>\n           </xs:restriction>\n          </xs:simpleType>\n       \
    \  </xs:attribute>\n         <xs:attribute name=\"mark\" type=\"mark.datatype\"\
    />\n        </xs:complexType>\n       </xs:element>\n      </xs:choice>\n    \
    \  <xs:attribute name=\"version\" type=\"xs:string\" use=\"required\"\n      \
    \              fixed=\"1.1\"/>\n     </xs:complexType>\n    </xs:element>\n  \
    \ </xs:schema>\n"
- title: 16.1.2.  msml-core-datatypes.xsd
  contents:
  - "16.1.2.  msml-core-datatypes.xsd\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n            \
    \  elementFormDefault=\"qualified\"\n              attributeFormDefault=\"unqualified\"\
    >\n    <xs:group name=\"msmlRequestType\">\n     <xs:choice>\n      <xs:element\
    \ ref=\"msmlRequest\"/>\n      <xs:element name=\"send\">\n       <xs:complexType>\n\
    \        <xs:complexContent>\n         <xs:extension base=\"msmlRequestType\"\
    >\n          <xs:attribute name=\"event\" type=\"msmlEvent.datatype\"\n      \
    \                  use=\"required\"/>\n          <xs:attribute name=\"target\"\
    \ type=\"msmlTarget.datatype\"\n                       use=\"required\"/>\n  \
    \        <xs:attribute name=\"valuelist\" type=\"xs:string\"/>\n         </xs:extension>\n\
    \        </xs:complexContent>\n       </xs:complexType>\n      </xs:element>\n\
    \     </xs:choice>\n    </xs:group>\n    <xs:element name=\"msmlRequest\" type=\"\
    msmlRequestType\"\n                abstract=\"true\"/>\n    <xs:complexType name=\"\
    msmlRequestType\">\n     <xs:attribute ref=\"mark\"/>\n    </xs:complexType>\n\
    \    <xs:element name=\"msmlResultSimple\" type=\"msmlResultSimpleType\"\n   \
    \             abstract=\"true\"/>\n    <xs:element name=\"msmlResultComplex\"\
    \ type=\"msmlResultComplexType\"\n                abstract=\"true\"/>\n    <xs:simpleType\
    \ name=\"msmlResultSimpleType\">\n     <xs:restriction base=\"xs:string\"/>\n\
    \    </xs:simpleType>\n    <xs:complexType name=\"msmlResultComplexType\"/>\n\
    \    <xs:element name=\"description\" type=\"xs:string\"/>\n    <xs:attribute\
    \ name=\"mark\" type=\"mark.datatype\"/>\n    <xs:simpleType name=\"msmlInstanceID.datatype\"\
    >\n     <xs:restriction base=\"xs:string\">\n      <xs:pattern value=\"[a-zA-Z0-9.:\\\
    -_]+\"/>\n     </xs:restriction>\n    </xs:simpleType>\n    <xs:simpleType name=\"\
    connID.datatype\">\n     <xs:restriction base=\"xs:string\">\n      <xs:pattern\
    \ value=\"conn:[a-zA-Z0-9.:\\-_]+\"/>\n     </xs:restriction>\n    </xs:simpleType>\n\
    \    <xs:simpleType name=\"confID.datatype\">\n     <xs:restriction base=\"xs:string\"\
    >\n      <xs:pattern value=\"conf:[a-zA-Z0-9.:\\-_]+\"/>\n     </xs:restriction>\n\
    \    </xs:simpleType>\n    <xs:simpleType name=\"dialogID.datatype\">\n     <xs:restriction\
    \ base=\"xs:string\">\n   <xs:pattern value=\"conf:[a-zA-Z0-9.:\\-_]+/dialog:[a-zA-Z0-9.:\\\
    -_]+\"/>\n   <xs:pattern value=\"conn:[a-zA-Z0-9.:\\-_]+/dialog:[a-zA-Z0-9.:\\\
    -_]+\"/>\n     </xs:restriction>\n    </xs:simpleType>\n    <xs:simpleType name=\"\
    independentID.datatype\">\n     <xs:restriction base=\"xs:string\">\n      <xs:pattern\
    \ value=\"conf:[a-zA-Z0-9.:\\-_]+\"/>\n      <xs:pattern value=\"conn:[a-zA-Z0-9.:\\\
    -_]+\"/>\n     </xs:restriction>\n    </xs:simpleType>\n    <xs:simpleType name=\"\
    dialogLanguage.datatype\">\n     <xs:restriction base=\"xs:string\">\n      <xs:enumeration\
    \ value=\"application/moml+xml\"/>\n      <xs:enumeration value=\"application/voicexml+xml\"\
    />\n     </xs:restriction>\n    </xs:simpleType>\n    <xs:simpleType name=\"msmlEvent.datatype\"\
    >\n     <xs:restriction base=\"xs:string\"/>\n    </xs:simpleType>\n    <xs:simpleType\
    \ name=\"msmlSend.datatype\">\n     <xs:restriction base=\"xs:string\"/>\n   \
    \ </xs:simpleType>\n    <xs:simpleType name=\"msmlEventName.datatype\">\n    \
    \ <xs:restriction base=\"xs:string\">\n      <xs:pattern value=\"msml.dialog.exit\"\
    />\n      <xs:pattern value=\"msml.conf.asn\"/>\n      <xs:pattern value=\"msml.conf.nomedia\"\
    />\n      <xs:pattern value=\"msml.dialog.exit\"/>\n      <xs:pattern value=\"\
    [a-zA-Z0-9.:_\\-]+\"/>\n     </xs:restriction>\n    </xs:simpleType>\n    <xs:simpleType\
    \ name=\"msmlTarget.datatype\">\n     <xs:restriction base=\"xs:string\">\n  \
    \    <xs:pattern\n   value=\"conf:[a-zA-Z0-9.:_\\-]+(/oper:[a-zA-Z0-9.:_\\-]+|\\\
    *)*\"/>\n      <xs:pattern\n   value=\"conn:[a-zA-Z0-9.:_\\-]+(/oper:[a-zA-Z0-9.:_\\\
    -]+|\\*)+\"/>\n     </xs:restriction>\n    </xs:simpleType>\n    <xs:simpleType\
    \ name=\"msmlEventSource.datatype\">\n     <xs:restriction base=\"xs:string\"\
    >\n      <xs:pattern value=\"conf:[a-zA-Z0-9.:_\\-]+\"/>\n      <xs:pattern value=\"\
    (conf:[a-zA-Z0-9.:_\\-]+|conn:[a-zA-Z0-9.:_\\-\n      ]+)/dialog:[a-zA-Z0-9.:_\\\
    -]+\"/>\n     </xs:restriction>\n    </xs:simpleType>\n    <xs:simpleType name=\"\
    msmlEventNameValue.datatype\">\n     <xs:restriction base=\"xs:string\"/>\n  \
    \  </xs:simpleType>\n    <xs:simpleType name=\"mark.datatype\">\n     <xs:restriction\
    \ base=\"xs:string\">\n      <xs:pattern value=\"[a-zA-Z0-9.:\\-_]+\"/>\n    \
    \ </xs:restriction>\n    </xs:simpleType>\n    <xs:simpleType name=\"boolean.datatype\"\
    >\n     <xs:restriction base=\"xs:string\">\n      <xs:enumeration value=\"true\"\
    />\n      <xs:enumeration value=\"false\"/>\n     </xs:restriction>\n    </xs:simpleType>\n\
    \    <xs:simpleType name=\"posDuration.datatype\">\n     <xs:restriction base=\"\
    xs:string\">\n      <xs:pattern value=\"(\\+)?([0-9]*\\.)?[0-9]+(ms|s)\"/>\n \
    \    </xs:restriction>\n    </xs:simpleType>\n   </xs:schema>\n"
- title: 16.2.  MSML Conference Core Package
  contents:
  - '16.2.  MSML Conference Core Package

    '
- title: 16.2.1.  msml-conf-core.xsd
  contents:
  - "16.2.1.  msml-conf-core.xsd\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \   <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n              elementFormDefault=\"\
    qualified\"\n              attributeFormDefault=\"unqualified\">\n      <xs:include\
    \ schemaLocation=\"msml-core.xsd\"/>\n      <xs:include schemaLocation=\"msml-conf-core-datatypes.xsd\"\
    />\n   </xs:schema>\n"
- title: 16.2.2.  msml-conf-core-datatypes.xsd
  contents:
  - '16.2.2.  msml-conf-core-datatypes.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-core-datatypes.xsd\"/>\n <xs:element name=\"createconference\" substitutionGroup=\"\
    msmlRequest\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension\
    \ base=\"msmlRequestType\">\n     <xs:all>\n      <xs:element name=\"audiomix\"\
    \ type=\"audioMixType\" minOccurs=\"0\"/>\n      <xs:element name=\"videolayout\"\
    \ type=\"videoLayoutType\"\n                  minOccurs=\"0\"/>\n      <xs:element\
    \ name=\"reserve\" minOccurs=\"0\">\n       <xs:complexType>\n        <xs:sequence>\n\
    \         <xs:element name=\"resource\" maxOccurs=\"unbounded\">\n          <xs:complexType>\n\
    \           <xs:sequence>\n            <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                    minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       \
    \    </xs:sequence>\n           <xs:attribute name=\"n\" type=\"xs:positiveInteger\"\
    \n                        default=\"1\"/>\n           <xs:anyAttribute namespace=\"\
    ##any\"/>\n          </xs:complexType>\n         </xs:element>\n        </xs:sequence>\n\
    \        <xs:attribute name=\"required\" type=\"boolean.datatype\"\n         \
    \             default=\"true\"/>\n       </xs:complexType>\n      </xs:element>\n\
    \     </xs:all>\n     <xs:attribute name=\"name\" type=\"msmlInstanceID.datatype\"\
    />\n     <xs:attribute name=\"deletewhen\" default=\"never\">\n      <xs:simpleType>\n\
    \       <xs:restriction base=\"xs:string\">\n        <xs:enumeration value=\"\
    nomedia\"/>\n        <xs:enumeration value=\"nocontrol\"/>\n        <xs:enumeration\
    \ value=\"never\"/>\n       </xs:restriction>\n      </xs:simpleType>\n     </xs:attribute>\n\
    \     <xs:attribute name=\"term\" type=\"boolean.datatype\" default=\"true\"/>\n\
    \    </xs:extension>\n   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n\
    \ <xs:element name=\"modifyconference\" substitutionGroup=\"msmlRequest\">\n \
    \ <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"msmlRequestType\"\
    >\n     <xs:all>\n      <xs:element name=\"audiomix\" type=\"audioMixType\" minOccurs=\"\
    0\"/>\n      <xs:element name=\"videolayout\" type=\"videoLayoutType\"\n     \
    \             minOccurs=\"0\"/>\n     </xs:all>\n     <xs:attribute name=\"id\"\
    \ type=\"confID.datatype\" use=\"required\"/>\n    </xs:extension>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n <xs:element name=\"destroyconference\"\
    \ substitutionGroup=\"msmlRequest\">\n  <xs:complexType>\n   <xs:complexContent>\n\
    \    <xs:extension base=\"msmlRequestType\">\n     <xs:all>\n      <xs:element\
    \ name=\"audiomix\" type=\"basicAudioMixType\"\n                  minOccurs=\"\
    0\"/>\n      <xs:element name=\"videolayout\" type=\"basicVideoLayoutType\"\n\
    \                  minOccurs=\"0\"/>\n     </xs:all>\n     <xs:attribute name=\"\
    id\" type=\"confID.datatype\" use=\"required\"/>\n    </xs:extension>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n <xs:element name=\"join\" substitutionGroup=\"\
    msmlRequest\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension\
    \ base=\"msmlRequestType\">\n     <xs:sequence>\n      <xs:element name=\"stream\"\
    \ type=\"streamType\" minOccurs=\"0\"\n                  maxOccurs=\"4\"/>\n \
    \    </xs:sequence>\n     <xs:attribute name=\"id1\" type=\"independentID.datatype\"\
    \n                   use=\"required\"/>\n     <xs:attribute name=\"id2\" type=\"\
    independentID.datatype\"\n                   use=\"required\"/>\n    </xs:extension>\n\
    \   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n <xs:element name=\"\
    modifystream\" substitutionGroup=\"msmlRequest\">\n  <xs:complexType>\n   <xs:complexContent>\n\
    \    <xs:extension base=\"msmlRequestType\">\n     <xs:sequence>\n      <xs:element\
    \ name=\"stream\" type=\"streamType\" maxOccurs=\"4\"/>\n     </xs:sequence>\n\
    \     <xs:attribute name=\"id1\" type=\"independentID.datatype\"\n           \
    \        use=\"required\"/>\n     <xs:attribute name=\"id2\" type=\"independentID.datatype\"\
    \n                   use=\"required\"/>\n    </xs:extension>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n <xs:element name=\"unjoin\" substitutionGroup=\"\
    msmlRequest\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension\
    \ base=\"msmlRequestType\">\n     <xs:sequence>\n      <xs:element name=\"stream\"\
    \ type=\"basicStreamType\" minOccurs=\"0\"\n                  maxOccurs=\"4\"\
    />\n     </xs:sequence>\n     <xs:attribute name=\"id1\" type=\"independentID.datatype\"\
    \n                   use=\"required\"/>\n     <xs:attribute name=\"id2\" type=\"\
    independentID.datatype\"\n                   use=\"required\"/>\n    </xs:extension>\n\
    \   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n <xs:element name=\"\
    monitor\" substitutionGroup=\"msmlRequest\">\n  <xs:complexType>\n   <xs:complexContent>\n\
    \    <xs:extension base=\"msmlRequestType\">\n     <xs:attribute name=\"id1\"\
    \ type=\"connID.datatype\" use=\"required\"/>\n     <xs:attribute name=\"id2\"\
    \ type=\"independentID.datatype\"\n                   use=\"required\"/>\n   \
    \  <xs:attribute name=\"compressed\" type=\"boolean.datatype\"\n             \
    \      default=\"false\"/>\n    </xs:extension>\n   </xs:complexContent>\n  </xs:complexType>\n\
    \ </xs:element>\n <xs:element name=\"confid\" type=\"msmlResultSimpleType\"\n\
    \             substitutionGroup=\"msmlResultSimple\"/>\n <xs:complexType name=\"\
    basicStreamType\">\n  <xs:attribute name=\"dir\">\n   <xs:simpleType>\n    <xs:restriction\
    \ base=\"xs:string\">\n     <xs:enumeration value=\"to-id1\"/>\n     <xs:enumeration\
    \ value=\"from-id1\"/>\n    </xs:restriction>\n   </xs:simpleType>\n  </xs:attribute>\n\
    \  <xs:attribute name=\"media\">\n   <xs:simpleType>\n    <xs:restriction base=\"\
    xs:string\">\n     <xs:enumeration value=\"audio\"/>\n     <xs:enumeration value=\"\
    video\"/>\n    </xs:restriction>\n   </xs:simpleType>\n  </xs:attribute>\n  <xs:attribute\
    \ name=\"compressed\" type=\"boolean.datatype\"/>\n </xs:complexType>\n <xs:complexType\
    \ name=\"streamType\">\n  <xs:complexContent>\n   <xs:extension base=\"basicStreamType\"\
    >\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n     <xs:element name=\"\
    gain\">\n      <xs:complexType>\n       <xs:attribute name=\"amt\" use=\"optional\"\
    >\n        <xs:simpleType>\n         <xs:restriction base=\"xs:integer\">\n  \
    \        <xs:minInclusive value=\"-96\"/>\n          <xs:maxInclusive value=\"\
    96\"/>\n         </xs:restriction>\n        </xs:simpleType>\n       </xs:attribute>\n\
    \       <xs:attribute name=\"agc\" type=\"boolean.datatype\"/>\n       <xs:attribute\
    \ name=\"tgtlvl\" use=\"optional\">\n        <xs:simpleType>\n         <xs:restriction\
    \ base=\"xs:nonPositiveInteger\">\n          <xs:minInclusive value=\"-40\"/>\n\
    \          <xs:maxInclusive value=\"0\"/>\n         </xs:restriction>\n      \
    \  </xs:simpleType>\n       </xs:attribute>\n       <xs:attribute name=\"maxgain\"\
    \ default=\"10\">\n        <xs:simpleType>\n         <xs:restriction base=\"xs:nonNegativeInteger\"\
    >\n          <xs:minInclusive value=\"0\"/>\n          <xs:maxInclusive value=\"\
    40\"/>\n         </xs:restriction>\n        </xs:simpleType>\n       </xs:attribute>\n\
    \      </xs:complexType>\n     </xs:element>\n     <xs:element name=\"clamp\"\
    >\n      <xs:complexType>\n       <xs:attribute name=\"dtmf\" type=\"boolean.datatype\"\
    />\n       <xs:attribute name=\"tones\" type=\"boolean.datatype\"/>\n      </xs:complexType>\n\
    \     </xs:element>\n     <xs:element name=\"visual\"/>\n    </xs:choice>\n  \
    \  <xs:attribute name=\"preferred\" type=\"boolean.datatype\"\n              \
    \    default=\"false\"/>\n    <xs:attribute name=\"display\" type=\"xs:string\"\
    />\n    <xs:attribute name=\"override\" type=\"boolean.datatype\"\n          \
    \        default=\"false\"/>\n   </xs:extension>\n  </xs:complexContent>\n </xs:complexType>\n\
    \ <xs:complexType name=\"basicAudioMixType\">\n  <xs:attribute name=\"id\" type=\"\
    xs:string\" use=\"optional\"/>\n  <xs:attribute name=\"samplerate\" type=\"xs:positiveInteger\"\
    \n                use=\"optional\" default=\"8000\"/>\n </xs:complexType>\n <xs:complexType\
    \ name=\"audioMixType\">\n  <xs:complexContent>\n   <xs:extension base=\"basicAudioMixType\"\
    >\n    <xs:all>\n     <xs:element name=\"asn\" minOccurs=\"0\">\n      <xs:complexType>\n\
    \       <xs:attribute name=\"ri\" type=\"posDuration.datatype\"/>\n       <xs:attribute\
    \ name=\"asth\" default=\"-96\">\n        <xs:simpleType>\n         <xs:restriction\
    \ base=\"xs:nonPositiveInteger\">\n          <xs:minInclusive value=\"-96\"/>\n\
    \          <xs:maxInclusive value=\"0\"/>\n         </xs:restriction>\n      \
    \  </xs:simpleType>\n       </xs:attribute>\n      </xs:complexType>\n     </xs:element>\n\
    \     <xs:element name=\"n-loudest\" minOccurs=\"0\">\n      <xs:complexType>\n\
    \       <xs:attribute name=\"n\" type=\"xs:positiveInteger\" use=\"required\"\
    />\n      </xs:complexType>\n     </xs:element>\n    </xs:all>\n   </xs:extension>\n\
    \  </xs:complexContent>\n </xs:complexType>\n <xs:complexType name=\"basicVideoLayoutType\"\
    >\n  <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n  <xs:attribute\
    \ name=\"type\" type=\"xs:string\" use=\"required\"\n                fixed=\"\
    text/msml-basic-layout\"/>\n </xs:complexType>\n <xs:complexType name=\"videoLayoutType\"\
    >\n  <xs:complexContent>\n   <xs:extension base=\"basicVideoLayoutType\">\n  \
    \  <xs:choice>\n     <xs:element name=\"selector\">\n      <xs:complexType>\n\
    \       <xs:complexContent>\n        <xs:extension base=\"selectorType\">\n  \
    \       <xs:choice>\n          <xs:element name=\"root\" type=\"rootType\" minOccurs=\"\
    0\"/>\n          <xs:element name=\"region\" minOccurs=\"0\">\n           <xs:complexType>\n\
    \            <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n\
    \            <xs:attribute name=\"left\" type=\"xs:positiveInteger\"/>\n     \
    \       <xs:attribute name=\"top\" type=\"xs:positiveInteger\"/>\n           \
    \ <xs:attribute name=\"relativeSize\">\n             <xs:simpleType>\n       \
    \       <xs:restriction base=\"xs:string\">\n               <xs:enumeration value=\"\
    1/4\"/>\n               <xs:enumeration value=\"1/3\"/>\n               <xs:enumeration\
    \ value=\"2/3\"/>\n               <xs:enumeration value=\"3/4\"/>\n          \
    \     <xs:enumeration value=\"1\"/>\n              </xs:restriction>\n       \
    \      </xs:simpleType>\n            </xs:attribute>\n            <xs:attribute\
    \ name=\"priority\">\n             <xs:simpleType>\n              <xs:restriction\
    \ base=\"xs:float\">\n               <xs:minInclusive value=\"0\"/>\n        \
    \       <xs:maxExclusive value=\"1\"/>\n              </xs:restriction>\n    \
    \         </xs:simpleType>\n            </xs:attribute>\n            <xs:attribute\
    \ name=\"title\" type=\"xs:string\"/>\n            <xs:attribute name=\"titleTextColor\"\
    \ type=\"xs:string\"/>\n            <xs:attribute name=\"titleBackgroundColor\"\
    \ type=\"xs:string\"/>\n            <xs:attribute name=\"borderColor\" type=\"\
    xs:string\"/>\n            <xs:attribute name=\"borderWidth\" type=\"xs:positiveInteger\"\
    />\n            <xs:attribute name=\"logo\" type=\"xs:anyURI\"/>\n           </xs:complexType>\n\
    \          </xs:element>\n         </xs:choice>\n        </xs:extension>\n   \
    \    </xs:complexContent>\n      </xs:complexType>\n     </xs:element>\n     <xs:element\
    \ name=\"root\" type=\"rootType\"/>\n     <xs:element name=\"region\" minOccurs=\"\
    0\" maxOccurs=\"unbounded\">\n      <xs:complexType>\n       <xs:complexContent>\n\
    \        <xs:extension base=\"regionType\"/>\n       </xs:complexContent>\n  \
    \    </xs:complexType>\n     </xs:element>\n    </xs:choice>\n   </xs:extension>\n\
    \  </xs:complexContent>\n </xs:complexType>\n <xs:complexType name=\"regionType\"\
    >\n  <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n  <xs:attribute\
    \ name=\"left\" type=\"xs:positiveInteger\"/>\n  <xs:attribute name=\"top\" type=\"\
    xs:positiveInteger\"/>\n  <xs:attribute name=\"relativeSize\">\n   <xs:simpleType>\n\
    \    <xs:restriction base=\"xs:string\">\n     <xs:enumeration value=\"1/4\"/>\n\
    \     <xs:enumeration value=\"1/3\"/>\n     <xs:enumeration value=\"2/3\"/>\n\
    \     <xs:enumeration value=\"3/4\"/>\n     <xs:enumeration value=\"1\"/>\n  \
    \  </xs:restriction>\n   </xs:simpleType>\n  </xs:attribute>\n  <xs:attribute\
    \ name=\"priority\">\n   <xs:simpleType>\n    <xs:restriction base=\"xs:float\"\
    >\n     <xs:minInclusive value=\"0\"/>\n     <xs:maxExclusive value=\"1\"/>\n\
    \    </xs:restriction>\n   </xs:simpleType>\n  </xs:attribute>\n  <xs:attribute\
    \ name=\"title\" type=\"xs:string\"/>\n  <xs:attribute name=\"titleTextColor\"\
    \ type=\"xs:string\"/>\n  <xs:attribute name=\"titleBackgroundColor\" type=\"\
    xs:string\"/>\n  <xs:attribute name=\"borderColor\" type=\"xs:string\"/>\n  <xs:attribute\
    \ name=\"borderWidth\" type=\"xs:positiveInteger\"/>\n  <xs:attribute name=\"\
    logo\" type=\"xs:anyURI\"/>\n </xs:complexType>\n <xs:complexType name=\"selectorType\"\
    >\n  <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n  <xs:attribute\
    \ name=\"method\" use=\"required\">\n   <xs:simpleType>\n    <xs:restriction base=\"\
    xs:string\">\n     <xs:enumeration value=\"vas\"/>\n     <xs:enumeration value=\"\
    sequence\"/>\n    </xs:restriction>\n   </xs:simpleType>\n  </xs:attribute>\n\
    \  <xs:attribute name=\"status\" default=\"active\">\n   <xs:simpleType>\n   \
    \ <xs:restriction base=\"xs:string\">\n     <xs:enumeration value=\"active\"/>\n\
    \     <xs:enumeration value=\"disabled\"/>\n    </xs:restriction>\n   </xs:simpleType>\n\
    \  </xs:attribute>\n  <xs:attribute name=\"si\" type=\"posDuration.datatype\"\
    \ default=\"1s\"/>\n  <xs:attribute name=\"blankothers\" type=\"xs:boolean\" default=\"\
    false\"/>\n  <xs:attribute name=\"speakersees\" default=\"current\">\n   <xs:simpleType>\n\
    \    <xs:restriction base=\"xs:string\">\n     <xs:enumeration value=\"current\"\
    />\n     <xs:enumeration value=\"previous\"/>\n    </xs:restriction>\n   </xs:simpleType>\n\
    \  </xs:attribute>\n </xs:complexType>\n <xs:complexType name=\"rootType\">\n\
    \  <xs:attribute name=\"size\" default=\"CIF\">\n   <xs:simpleType>\n    <xs:restriction\
    \ base=\"xs:string\">\n     <xs:enumeration value=\"16CIF\"/>\n     <xs:enumeration\
    \ value=\"4CIF\"/>\n     <xs:enumeration value=\"CIF\"/>\n     <xs:enumeration\
    \ value=\"QCIF\"/>\n    </xs:restriction>\n   </xs:simpleType>\n  </xs:attribute>\n\
    \  <xs:attribute name=\"backgroundcolor\" type=\"xs:string\"\n               \
    \ default=\"black\"/>\n  <xs:attribute name=\"backgroundimage\" type=\"xs:anyURI\"\
    />\n </xs:complexType>\n <xs:simpleType name=\"confclass.datatype\">\n  <xs:restriction\
    \ base=\"xs:string\">\n   <xs:enumeration value=\"standard\"/>\n   <xs:enumeration\
    \ value=\"preferred\"/>\n  </xs:restriction>\n </xs:simpleType>\n <xs:simpleType\
    \ name=\"conferenceType.datatype\">\n  <xs:restriction base=\"xs:string\">\n \
    \  <xs:enumeration value=\"audio.basic\"/>\n   <xs:enumeration value=\"audio.advanced\"\
    />\n  </xs:restriction>\n </xs:simpleType>\n <xs:simpleType name=\"duplex.datatype\"\
    >\n  <xs:restriction base=\"xs:string\">\n   <xs:enumeration value=\"half\"/>\n\
    \   <xs:enumeration value=\"full\"/>\n  </xs:restriction>\n </xs:simpleType>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.  MSML Dialog Packages
  contents:
  - '16.3.  MSML Dialog Packages

    '
- title: 16.3.1.  msml-dialog-core.xsd
  contents:
  - '16.3.1.  msml-dialog-core.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-core.xsd\"/>\n <xs:include schemaLocation=\"msml-dialog-core-datatypes.xsd\"\
    />\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.2.  msml-dialog-core-datatypes.xsd
  contents:
  - '16.3.2.  msml-dialog-core-datatypes.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-core-datatypes.xsd\"/>\n <xs:group name=\"momlRequest\">\n  <xs:choice>\n\
    \   <xs:group ref=\"executeType\"/>\n   <xs:group ref=\"sendType\"/>\n  </xs:choice>\n\
    \ </xs:group>\n <xs:element name=\"dialogstart\" substitutionGroup=\"msmlRequest\"\
    >\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"msmlRequestType\"\
    >\n     <xs:choice>\n      <xs:group ref=\"momlRequest\" minOccurs=\"0\"/>\n \
    \    </xs:choice>\n     <xs:attribute name=\"target\" type=\"independentID.datatype\"\
    \n                   use=\"required\"/>\n     <xs:attribute name=\"type\" type=\"\
    dialogLanguage.datatype\"\n                   use=\"required\"/>\n     <xs:attribute\
    \ name=\"name\" type=\"msmlInstanceID.datatype\"/>\n     <xs:attribute name=\"\
    src\" type=\"xs:anyURI\" use=\"optional\"/>\n    </xs:extension>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n <xs:element name=\"dialogend\" substitutionGroup=\"\
    msmlRequest\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension\
    \ base=\"msmlRequestType\">\n     <xs:attribute name=\"id\" type=\"dialogID.datatype\"\
    \ use=\"required\"/>\n    </xs:extension>\n   </xs:complexContent>\n  </xs:complexType>\n\
    \ </xs:element>\n <xs:element name=\"dialogid\" type=\"msmlResultSimpleType\"\n\
    \             substitutionGroup=\"msmlResultSimple\"/>\n <xs:group name=\"executeType\"\
    >\n  <xs:choice>\n   <xs:element ref=\"primitive\" maxOccurs=\"unbounded\"/>\n\
    \   <xs:element ref=\"control\" maxOccurs=\"unbounded\"/>\n  </xs:choice>\n </xs:group>\n\
    \ <xs:element name=\"primitive\" type=\"primitiveType\" abstract=\"true\"/>\n\
    \ <xs:complexType name=\"primitiveType\">\n  <xs:attribute name=\"id\" type=\"\
    momlID.datatype\"/>\n </xs:complexType>\n <xs:element name=\"control\" abstract=\"\
    true\"/>\n <xs:group name=\"sendType\">\n  <xs:choice>\n   <xs:choice>\n    <xs:element\
    \ name=\"exit\" type=\"exitType\"/>\n    <xs:element name=\"disconnect\" type=\"\
    exitType\"/>\n   </xs:choice>\n   <xs:sequence>\n    <xs:element ref=\"send\"\
    \ maxOccurs=\"unbounded\"/>\n    <xs:choice minOccurs=\"0\">\n     <xs:element\
    \ name=\"exit\" type=\"exitType\"/>\n     <xs:element name=\"disconnect\" type=\"\
    exitType\"/>\n    </xs:choice>\n   </xs:sequence>\n  </xs:choice>\n </xs:group>\n\
    \ <xs:element name=\"send\">\n  <xs:complexType>\n   <xs:attribute name=\"event\"\
    \ type=\"momlEvent.datatype\" use=\"required\"/>\n   <xs:attribute name=\"target\"\
    \ type=\"momlTarget.datatype\"\n                 use=\"required\"/>\n   <xs:attribute\
    \ name=\"namelist\" type=\"momlNamelist.datatype\"/>\n  </xs:complexType>\n </xs:element>\n\
    \ <xs:complexType name=\"exitType\">\n  <xs:attribute name=\"namelist\" type=\"\
    momlNamelist.datatype\"/>\n </xs:complexType>\n <xs:simpleType name=\"momlID.datatype\"\
    >\n  <xs:restriction base=\"xs:string\">\n   <xs:pattern value=\"[a-zA-Z0-9][a-zA-Z0-9._\\\
    -]*\"/>\n  </xs:restriction>\n </xs:simpleType>\n <xs:simpleType name=\"momlEvent.datatype\"\
    >\n  <xs:restriction base=\"xs:string\">\n   <xs:pattern value=\"[a-zA-Z0-9][a-zA-Z0-9._\\\
    -]*\"/>\n  </xs:restriction>\n </xs:simpleType>\n <xs:simpleType name=\"momlNamelist.datatype\"\
    >\n  <xs:restriction base=\"xs:string\"/>\n </xs:simpleType>\n <xs:simpleType\
    \ name=\"dtmfDigits.datatype\">\n  <xs:restriction base=\"xs:string\">\n   <xs:pattern\
    \ value=\"[0-9#*]+\"/>\n  </xs:restriction>\n </xs:simpleType>\n <xs:simpleType\
    \ name=\"iterate.datatype\">\n  <xs:union memberTypes=\"xs:positiveInteger\">\n\
    \   <xs:simpleType>\n    <xs:restriction base=\"xs:negativeInteger\">\n     <xs:minInclusive\
    \ value=\"-1\"/>\n    </xs:restriction>\n   </xs:simpleType>\n   <xs:simpleType>\n\
    \    <xs:restriction base=\"xs:string\">\n     <xs:enumeration value=\"forever\"\
    />\n    </xs:restriction>\n   </xs:simpleType>\n  </xs:union>\n </xs:simpleType>\n\
    \ <xs:simpleType name=\"momlTarget.datatype\">\n  <xs:restriction base=\"xs:string\"\
    >\n   <xs:pattern value=\"[a-zA-Z0-9][a-zA-Z0-9._\\-]*\"/>\n  </xs:restriction>\n\
    \ </xs:simpleType>\n <xs:simpleType name=\"duration.datatype\">\n  <xs:restriction\
    \ base=\"xs:string\">\n   <xs:pattern value=\"(\\+|\\-)?([0-9]*\\.)?[0-9]+(ms|s)\"\
    />\n  </xs:restriction>\n </xs:simpleType>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.3.  msml-dialog-base.xsd
  contents:
  - '16.3.3.  msml-dialog-base.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    unqualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include\
    \ schemaLocation=\"msml-core.xsd\"/>\n <xs:include schemaLocation=\"msml-dialog-core-datatypes.xsd\"\
    />\n <xs:include schemaLocation=\"msml-dialog-base-datatypes.xsd\"/>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.4.  msml-dialog-base-datatypes.xsd
  contents:
  - '16.3.4.  msml-dialog-base-datatypes.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    unqualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include\
    \ schemaLocation=\"msml-dialog-core-datatypes.xsd\"/>\n <xs:import namespace=\"\
    http://www.w3.org/XML/1998/namespace\"\n            schemaLocation=\"http://www.w3.org/2001/xml.xsd\"\
    />\n <xs:element name=\"play\" substitutionGroup=\"primitive\">\n  <xs:complexType>\n\
    \   <xs:complexContent>\n    <xs:extension base=\"primitiveType\">\n     <xs:sequence>\n\
    \      <xs:choice maxOccurs=\"unbounded\">\n       <xs:element name=\"audio\"\
    \ minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xs:complexType>\n       \
    \  <xs:attribute name=\"uri\" type=\"xs:anyURI\" use=\"required\"/>\n        \
    \ <xs:attribute name=\"iterate\" type=\"iterate.datatype\"\n                 \
    \      default=\"1\"/>\n         <xs:attribute name=\"format\" type=\"xs:string\"\
    \ use=\"optional\"/>\n         <xs:attribute name=\"audiosamplerate\" type=\"\
    xs:positiveInteger\"\n                       use=\"optional\"/>\n         <xs:attribute\
    \ name=\"audiosamplesize\" type=\"xs:positiveInteger\"\n                     \
    \  use=\"optional\"/>\n         <xs:attribute ref=\"xml:lang\"/>\n        </xs:complexType>\n\
    \       </xs:element>\n       <xs:element name=\"video\" minOccurs=\"0\" maxOccurs=\"\
    unbounded\">\n        <xs:complexType>\n         <xs:attribute name=\"uri\" type=\"\
    xs:anyURI\" use=\"required\"/>\n         <xs:attribute name=\"iterate\" type=\"\
    iterate.datatype\"\n                       use=\"optional\" default=\"1\"/>\n\
    \         <xs:attribute name=\"format\" type=\"xs:string\" use=\"optional\"/>\n\
    \         <xs:attribute name=\"audiosamplerate\" type=\"xs:positiveInteger\"\n\
    \                       use=\"optional\"/>\n         <xs:attribute name=\"audiosamplesize\"\
    \ type=\"xs:positiveInteger\"\n                       use=\"optional\"/>\n   \
    \      <xs:attribute name=\"codecconfig\" type=\"xs:string\"\n               \
    \        use=\"optional\"/>\n         <xs:attribute name=\"profile\" type=\"xs:string\"\
    \ use=\"optional\"/>\n         <xs:attribute name=\"level\" type=\"xs:string\"\
    \ use=\"optional\"/>\n         <xs:attribute name=\"imagewidth\" type=\"xs:positiveInteger\"\
    \n                       use=\"optional\"/>\n         <xs:attribute name=\"imageheight\"\
    \ type=\"xs:positiveInteger\"\n                       use=\"optional\"/>\n   \
    \      <xs:attribute name=\"maxbitrate\" type=\"xs:positiveInteger\"\n       \
    \                use=\"optional\"/>\n         <xs:attribute name=\"framerate\"\
    \ type=\"xs:positiveInteger\"\n                       use=\"optional\"/>\n   \
    \     </xs:complexType>\n       </xs:element>\n       <xs:element name=\"media\"\
    \ minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xs:complexType>\n       \
    \  <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n          <xs:element\
    \ name=\"audio\" minOccurs=\"0\">\n           <xs:complexType>\n            <xs:attribute\
    \ name=\"uri\" type=\"xs:anyURI\" use=\"required\"/>\n            <xs:attribute\
    \ name=\"iterate\" type=\"iterate.datatype\"\n                          default=\"\
    1\"/>\n            <xs:attribute name=\"format\" type=\"xs:string\"\n        \
    \                  use=\"optional\"/>\n            <xs:attribute name=\"audiosamplerate\"\
    \n                          type=\"xs:positiveInteger\" use=\"optional\"/>\n \
    \           <xs:attribute name=\"audiosamplesize\"\n                         \
    \ type=\"xs:positiveInteger\" use=\"optional\"/>\n            <xs:attribute ref=\"\
    xml:lang\"/>\n           </xs:complexType>\n          </xs:element>\n        \
    \  <xs:element name=\"video\" minOccurs=\"0\">\n           <xs:complexType>\n\
    \            <xs:attribute name=\"uri\" type=\"xs:anyURI\" use=\"required\"/>\n\
    \            <xs:attribute name=\"iterate\" type=\"iterate.datatype\"\n      \
    \                    use=\"optional\" default=\"1\"/>\n            <xs:attribute\
    \ name=\"format\" type=\"xs:string\"\n                          use=\"optional\"\
    />\n            <xs:attribute name=\"audiosamplerate\"\n                     \
    \     type=\"xs:positiveInteger\" use=\"optional\"/>\n            <xs:attribute\
    \ name=\"audiosamplesize\"\n                          type=\"xs:positiveInteger\"\
    \ use=\"optional\"/>\n            <xs:attribute name=\"codecconfig\" type=\"xs:string\"\
    \n                          use=\"optional\"/>\n            <xs:attribute name=\"\
    profile\" type=\"xs:string\"\n                          use=\"optional\"/>\n \
    \           <xs:attribute name=\"level\" type=\"xs:string\" use=\"optional\"/>\n\
    \            <xs:attribute name=\"imagewidth\" type=\"xs:positiveInteger\"\n \
    \                         use=\"optional\"/>\n            <xs:attribute name=\"\
    imageheight\" type=\"xs:positiveInteger\"\n                          use=\"optional\"\
    />\n            <xs:attribute name=\"maxbitrate\" type=\"xs:positiveInteger\"\n\
    \                          use=\"optional\"/>\n            <xs:attribute name=\"\
    framerate\" type=\"xs:positiveInteger\"\n                          use=\"optional\"\
    />\n           </xs:complexType>\n          </xs:element>\n         </xs:choice>\n\
    \        </xs:complexType>\n       </xs:element>\n       <xs:element ref=\"smedia\"\
    \ minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      </xs:choice>\n      <xs:choice\
    \ minOccurs=\"0\">\n       <xs:element name=\"playexit\">\n        <xs:complexType>\n\
    \         <xs:group ref=\"sendType\"/>\n        </xs:complexType>\n       </xs:element>\n\
    \      </xs:choice>\n     </xs:sequence>\n     <xs:attribute name=\"interval\"\
    \ type=\"posDuration.datatype\"\n                   use=\"optional\"/>\n     <xs:attribute\
    \ name=\"iterate\" type=\"iterate.datatype\" use=\"optional\"\n              \
    \     default=\"1\"/>\n     <xs:attribute name=\"offset\" type=\"duration.datatype\"\
    \n                   use=\"optional\"/>\n     <xs:attribute name=\"initial\" use=\"\
    optional\" default=\"generate\">\n      <xs:simpleType>\n       <xs:restriction\
    \ base=\"xs:string\">\n        <xs:enumeration value=\"generate\"/>\n        <xs:enumeration\
    \ value=\"suspend\"/>\n       </xs:restriction>\n      </xs:simpleType>\n    \
    \ </xs:attribute>\n     <xs:attribute name=\"maxtime\" type=\"posDuration.datatype\"\
    \n                   use=\"optional\"/>\n     <xs:attribute name=\"skip\" type=\"\
    duration.datatype\" use=\"optional\"\n                   default=\"3s\"/>\n  \
    \   <xs:attribute name=\"barge\" type=\"boolean.datatype\" use=\"optional\"\n\
    \                   default=\"false\"/>\n     <xs:attribute name=\"cleardb\" type=\"\
    boolean.datatype\" use=\"optional\"\n                   default=\"false\"/>\n\
    \     <xs:attribute ref=\"xml:lang\"/>\n    </xs:extension>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n <xs:element name=\"record\" substitutionGroup=\"\
    primitive\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"\
    primitiveType\">\n     <xs:choice minOccurs=\"0\">\n      <xs:element ref=\"play\"\
    \ minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      <xs:element ref=\"tonegen\"\
    \ minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      <xs:element name=\"recordexit\"\
    >\n       <xs:complexType>\n        <xs:group ref=\"sendType\"/>\n       </xs:complexType>\n\
    \      </xs:element>\n     </xs:choice>\n     <xs:attribute name=\"append\" type=\"\
    boolean.datatype\" use=\"optional\"\n                   default=\"false\"/>\n\
    \     <xs:attribute name=\"dest\" type=\"xs:anyURI\" use=\"optional\"/>\n    \
    \ <xs:attribute name=\"audiodest\" type=\"xs:anyURI\" use=\"optional\"/>\n   \
    \  <xs:attribute name=\"videodest\" type=\"xs:anyURI\" use=\"optional\"/>\n  \
    \   <xs:attribute name=\"format\" use=\"required\">\n      <xs:simpleType>\n \
    \      <xs:restriction base=\"xs:string\"/>\n      </xs:simpleType>\n     </xs:attribute>\n\
    \     <xs:attribute name=\"codecconfig\" use=\"optional\">\n      <xs:simpleType>\n\
    \       <xs:restriction base=\"xs:string\"/>\n      </xs:simpleType>\n     </xs:attribute>\n\
    \     <xs:attribute name=\"audiosamplerate\" type=\"xs:positiveInteger\"\n   \
    \                use=\"optional\"/>\n     <xs:attribute name=\"audiosamplesize\"\
    \ type=\"xs:positiveInteger\"\n                   use=\"optional\"/>\n     <xs:attribute\
    \ name=\"profile\" use=\"optional\">\n      <xs:simpleType>\n       <xs:restriction\
    \ base=\"xs:string\"/>\n      </xs:simpleType>\n     </xs:attribute>\n     <xs:attribute\
    \ name=\"level\" use=\"optional\">\n      <xs:simpleType>\n       <xs:restriction\
    \ base=\"xs:string\"/>\n      </xs:simpleType>\n     </xs:attribute>\n     <xs:attribute\
    \ name=\"imagewidth\" type=\"xs:positiveInteger\"\n                   use=\"optional\"\
    />\n     <xs:attribute name=\"imageheight\" type=\"xs:positiveInteger\"\n    \
    \               use=\"optional\"/>\n     <xs:attribute name=\"maxbitrate\" type=\"\
    xs:positiveInteger\"\n                   use=\"optional\"/>\n     <xs:attribute\
    \ name=\"framerate\" type=\"xs:positiveInteger\"\n                   use=\"optional\"\
    />\n     <xs:attribute name=\"maxtime\" type=\"posDuration.datatype\"\n      \
    \             use=\"required\"/>\n     <xs:attribute name=\"initial\" use=\"optional\"\
    \ default=\"create\">\n      <xs:simpleType>\n       <xs:restriction base=\"xs:string\"\
    >\n        <xs:enumeration value=\"create\"/>\n        <xs:enumeration value=\"\
    suspend\"/>\n       </xs:restriction>\n      </xs:simpleType>\n     </xs:attribute>\n\
    \     <xs:attribute name=\"prespeech\" type=\"posDuration.datatype\"\n       \
    \            use=\"optional\" default=\"0s\"/>\n     <xs:attribute name=\"postspeech\"\
    \ type=\"posDuration.datatype\"\n                   use=\"optional\" default=\"\
    0s\"/>\n     <xs:attribute name=\"termkey\" use=\"optional\">\n      <xs:simpleType>\n\
    \       <xs:restriction base=\"xs:string\">\n        <xs:pattern value=\"[0-9#*ABCD]\"\
    />\n       </xs:restriction>\n      </xs:simpleType>\n     </xs:attribute>\n \
    \   </xs:extension>\n   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n\
    \ <xs:element name=\"dtmf\" substitutionGroup=\"primitive\">\n  <xs:complexType>\n\
    \   <xs:complexContent>\n    <xs:extension base=\"primitiveType\">\n     <xs:sequence>\n\
    \      <xs:element name=\"pattern\" maxOccurs=\"unbounded\">\n       <xs:complexType>\n\
    \        <xs:group ref=\"sendType\"/>\n        <xs:attribute name=\"digits\" type=\"\
    xs:string\" use=\"required\"/>\n        <xs:attribute name=\"format\">\n     \
    \    <xs:simpleType>\n          <xs:restriction base=\"xs:string\">\n        \
    \   <xs:enumeration value=\"mgcp\"/>\n           <xs:enumeration value=\"megaco\"\
    />\n           <xs:enumeration value=\"moml+digits\"/>\n          </xs:restriction>\n\
    \         </xs:simpleType>\n        </xs:attribute>\n        <xs:attribute name=\"\
    iterate\" type=\"iterate.datatype\"\n                      default=\"1\"/>\n \
    \      </xs:complexType>\n      </xs:element>\n      <xs:element name=\"detect\"\
    \ minOccurs=\"0\">\n       <xs:complexType>\n        <xs:group ref=\"sendType\"\
    />\n       </xs:complexType>\n      </xs:element>\n      <xs:element name=\"noinput\"\
    \ type=\"iterateSendType\" minOccurs=\"0\"/>\n      <xs:element name=\"nomatch\"\
    \ type=\"iterateSendType\" minOccurs=\"0\"/>\n      <xs:element name=\"dtmfexit\"\
    \ minOccurs=\"0\">\n       <xs:complexType>\n        <xs:group ref=\"sendType\"\
    />\n       </xs:complexType>\n      </xs:element>\n      <xs:element ref=\"play\"\
    \ minOccurs=\"0\"/>\n     </xs:sequence>\n     <xs:attribute name=\"cleardb\"\
    \ type=\"boolean.datatype\"\n                   default=\"true\"/>\n     <xs:attribute\
    \ name=\"fdt\" type=\"posDuration.datatype\" default=\"0s\"/>\n     <xs:attribute\
    \ name=\"idt\" type=\"posDuration.datatype\" default=\"4s\"/>\n     <xs:attribute\
    \ name=\"edt\" type=\"posDuration.datatype\" default=\"4s\"/>\n     <xs:attribute\
    \ name=\"starttimer\" type=\"boolean.datatype\"\n                   default=\"\
    false\"/>\n     <xs:attribute name=\"iterate\" type=\"iterate.datatype\" default=\"\
    1\"/>\n     <xs:attribute name=\"ldd\" type=\"posDuration.datatype\" default=\"\
    0s\"/>\n    </xs:extension>\n   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n\
    \ <xs:element name=\"collect\" substitutionGroup=\"primitive\">\n  <xs:complexType>\n\
    \   <xs:complexContent>\n    <xs:extension base=\"primitiveType\">\n     <xs:sequence>\n\
    \      <xs:element name=\"pattern\" maxOccurs=\"unbounded\">\n       <xs:complexType>\n\
    \        <xs:group ref=\"sendType\"/>\n        <xs:attribute name=\"digits\" type=\"\
    xs:string\" use=\"required\"/>\n        <xs:attribute name=\"format\">\n     \
    \    <xs:simpleType>\n          <xs:restriction base=\"xs:string\">\n        \
    \   <xs:enumeration value=\"mgcp\"/>\n           <xs:enumeration value=\"megaco\"\
    />\n           <xs:enumeration value=\"moml+digits\"/>\n          </xs:restriction>\n\
    \         </xs:simpleType>\n        </xs:attribute>\n        <xs:attribute name=\"\
    iterate\" type=\"iterate.datatype\"\n                      default=\"1\"/>\n \
    \      </xs:complexType>\n      </xs:element>\n      <xs:element name=\"detect\"\
    \ minOccurs=\"0\">\n       <xs:complexType>\n        <xs:group ref=\"sendType\"\
    />\n       </xs:complexType>\n      </xs:element>\n      <xs:element name=\"noinput\"\
    \ type=\"iterateSendType\" minOccurs=\"0\"/>\n      <xs:element name=\"nomatch\"\
    \ type=\"iterateSendType\" minOccurs=\"0\"/>\n      <xs:element name=\"dtmfexit\"\
    \ minOccurs=\"0\">\n       <xs:complexType>\n        <xs:group ref=\"sendType\"\
    />\n       </xs:complexType>\n      </xs:element>\n      <xs:element ref=\"play\"\
    \ minOccurs=\"0\"/>\n     </xs:sequence>\n     <xs:attribute name=\"cleardb\"\
    \ type=\"boolean.datatype\"\n                   default=\"true\"/>\n     <xs:attribute\
    \ name=\"fdt\" type=\"posDuration.datatype\" default=\"0s\"/>\n     <xs:attribute\
    \ name=\"idt\" type=\"posDuration.datatype\" default=\"4s\"/>\n     <xs:attribute\
    \ name=\"edt\" type=\"posDuration.datatype\" default=\"4s\"/>\n     <xs:attribute\
    \ name=\"starttimer\" type=\"boolean.datatype\"\n                   default=\"\
    false\"/>\n     <xs:attribute name=\"iterate\" type=\"iterate.datatype\" default=\"\
    1\"/>\n     <xs:attribute name=\"ldd\" type=\"posDuration.datatype\"/>\n    </xs:extension>\n\
    \   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n <xs:element name=\"\
    dtmfgen\" substitutionGroup=\"primitive\">\n  <xs:complexType>\n   <xs:complexContent>\n\
    \    <xs:extension base=\"primitiveType\">\n     <xs:choice minOccurs=\"0\">\n\
    \      <xs:element name=\"dtmfgenexit\">\n       <xs:complexType>\n        <xs:group\
    \ ref=\"sendType\"/>\n       </xs:complexType>\n      </xs:element>\n     </xs:choice>\n\
    \     <xs:attribute name=\"level\" use=\"optional\" default=\"-6\">\n      <xs:simpleType>\n\
    \       <xs:restriction base=\"xs:nonPositiveInteger\">\n        <xs:maxInclusive\
    \ value=\"0\"/>\n        <xs:minInclusive value=\"-96\"/>\n       </xs:restriction>\n\
    \      </xs:simpleType>\n     </xs:attribute>\n     <xs:attribute name=\"digits\"\
    \ type=\"dtmfDigits.datatype\"\n                   use=\"required\"/>\n     <xs:attribute\
    \ name=\"dur\" type=\"posDuration.datatype\" use=\"optional\"\n              \
    \     default=\"100ms\"/>\n     <xs:attribute name=\"interval\" type=\"posDuration.datatype\"\
    \n                   use=\"optional\" default=\"100ms\"/>\n    </xs:extension>\n\
    \   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n <xs:element name=\"\
    tonegen\" substitutionGroup=\"primitive\">\n  <xs:complexType>\n   <xs:complexContent>\n\
    \    <xs:extension base=\"primitiveType\">\n     <xs:choice minOccurs=\"0\">\n\
    \      <xs:element name=\"tonegenexit\" minOccurs=\"0\">\n       <xs:complexType>\n\
    \        <xs:group ref=\"sendType\"/>\n       </xs:complexType>\n      </xs:element>\n\
    \      <xs:element name=\"tone\" maxOccurs=\"unbounded\">\n       <xs:complexType>\n\
    \        <xs:sequence>\n         <xs:element name=\"tone1\">\n          <xs:complexType>\n\
    \           <xs:attribute name=\"freq\" use=\"required\">\n            <xs:simpleType>\n\
    \             <xs:restriction base=\"xs:unsignedInt\">\n              <xs:minInclusive\
    \ value=\"0\"/>\n              <xs:maxInclusive value=\"3999\"/>\n           \
    \  </xs:restriction>\n            </xs:simpleType>\n           </xs:attribute>\n\
    \           <xs:attribute name=\"atten\" use=\"required\">\n            <xs:simpleType>\n\
    \             <xs:restriction base=\"xs:nonPositiveInteger\">\n              <xs:minInclusive\
    \ value=\"-96\"/>\n              <xs:maxInclusive value=\"0\"/>\n            \
    \ </xs:restriction>\n            </xs:simpleType>\n           </xs:attribute>\n\
    \          </xs:complexType>\n         </xs:element>\n         <xs:element name=\"\
    tone2\">\n          <xs:complexType>\n           <xs:attribute name=\"freq\" use=\"\
    required\">\n            <xs:simpleType>\n             <xs:restriction base=\"\
    xs:unsignedInt\">\n              <xs:minInclusive value=\"0\"/>\n            \
    \  <xs:maxInclusive value=\"3999\"/>\n             </xs:restriction>\n       \
    \     </xs:simpleType>\n           </xs:attribute>\n           <xs:attribute name=\"\
    atten\" use=\"required\">\n            <xs:simpleType>\n             <xs:restriction\
    \ base=\"xs:nonPositiveInteger\">\n              <xs:minInclusive value=\"-96\"\
    />\n              <xs:maxInclusive value=\"0\"/>\n             </xs:restriction>\n\
    \            </xs:simpleType>\n           </xs:attribute>\n          </xs:complexType>\n\
    \         </xs:element>\n         <xs:element name=\"silence\" minOccurs=\"0\"\
    \ maxOccurs=\"unbounded\">\n          <xs:complexType>\n           <xs:attribute\
    \ name=\"duration\" type=\"duration.datatype\"\n                         use=\"\
    required\"/>\n          </xs:complexType>\n         </xs:element>\n        </xs:sequence>\n\
    \        <xs:attribute name=\"duration\" use=\"required\">\n         <xs:simpleType>\n\
    \          <xs:restriction base=\"duration.datatype\"/>\n         </xs:simpleType>\n\
    \        </xs:attribute>\n        <xs:attribute name=\"iterate\" type=\"iterate.datatype\"\
    \n                      use=\"optional\" default=\"1\"/>\n       </xs:complexType>\n\
    \      </xs:element>\n      <xs:element name=\"silence\" minOccurs=\"0\" maxOccurs=\"\
    unbounded\">\n       <xs:complexType>\n        <xs:attribute name=\"duration\"\
    \ type=\"duration.datatype\"\n                      use=\"required\"/>\n     \
    \  </xs:complexType>\n      </xs:element>\n     </xs:choice>\n     <xs:attribute\
    \ name=\"iterate\" type=\"iterate.datatype\" use=\"optional\"\n              \
    \     default=\"1\"/>\n    </xs:extension>\n   </xs:complexContent>\n  </xs:complexType>\n\
    \ </xs:element>\n <xs:complexType name=\"iterateSendType\">\n  <xs:group ref=\"\
    sendType\"/>\n  <xs:attribute name=\"iterate\" type=\"iterate.datatype\" default=\"\
    1\"/>\n </xs:complexType>\n <xs:element name=\"smedia\" type=\"smediaType\" abstract=\"\
    true\"/>\n <xs:complexType name=\"smediaType\">\n  <xs:attribute ref=\"xml:lang\"\
    />\n  <xs:attribute name=\"iterate\" type=\"iterate.datatype\"/>\n </xs:complexType>\n\
    \ <xs:element name=\"var\" substitutionGroup=\"smedia\">\n  <xs:complexType>\n\
    \   <xs:complexContent>\n    <xs:extension base=\"smediaType\">\n     <xs:attribute\
    \ name=\"type\" use=\"required\">\n      <xs:simpleType>\n       <xs:restriction\
    \ base=\"xs:string\">\n        <xs:enumeration value=\"date\"/>\n        <xs:enumeration\
    \ value=\"digits\"/>\n        <xs:enumeration value=\"duration\"/>\n        <xs:enumeration\
    \ value=\"month\"/>\n        <xs:enumeration value=\"money\"/>\n        <xs:enumeration\
    \ value=\"number\"/>\n        <xs:enumeration value=\"silence\"/>\n        <xs:enumeration\
    \ value=\"time\"/>\n        <xs:enumeration value=\"weekday\"/>\n       </xs:restriction>\n\
    \      </xs:simpleType>\n     </xs:attribute>\n     <xs:attribute name=\"subtype\"\
    \ type=\"xs:string\" use=\"optional\"/>\n     <xs:attribute name=\"value\" type=\"\
    xs:string\" use=\"required\"/>\n    </xs:extension>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.5.  msml-dialog-transform.xsd
  contents:
  - '16.3.5.  msml-dialog-transform.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    unqualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include\
    \ schemaLocation=\"msml-core.xsd\"/>\n <xs:include schemaLocation=\"msml-dialog-core-datatypes.xsd\"\
    />\n <xs:include schemaLocation=\"msml-dialog-transform-datatypes.xsd\"/>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.6.  msml-dialog-transform-datatypes.xsd
  contents:
  - '16.3.6.  msml-dialog-transform-datatypes.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    unqualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include\
    \ schemaLocation=\"msml-dialog-core-datatypes.xsd\"/>\n <xs:import namespace=\"\
    http://www.w3.org/XML/1998/namespace\"\n            schemaLocation=\"http://www.w3.org/2001/xml.xsd\"\
    />\n <xs:element name=\"vad\" substitutionGroup=\"primitive\">\n  <xs:complexType>\n\
    \   <xs:complexContent>\n    <xs:extension base=\"primitiveType\">\n     <xs:all>\n\
    \      <xs:element name=\"voice\" type=\"vadPatternType\" minOccurs=\"0\"/>\n\
    \      <xs:element name=\"silence\" type=\"vadPatternType\" minOccurs=\"0\"/>\n\
    \      <xs:element name=\"tvoice\" type=\"vadPatternType\" minOccurs=\"0\"/>\n\
    \      <xs:element name=\"tsilence\" type=\"vadPatternType\" minOccurs=\"0\"/>\n\
    \     </xs:all>\n     <xs:attribute name=\"starttimer\" type=\"boolean.datatype\"\
    \n                   default=\"false\"/>\n    </xs:extension>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n <xs:element name=\"gain\" substitutionGroup=\"\
    primitive\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"\
    primitiveType\">\n     <xs:attribute name=\"incr\" default=\"3\">\n      <xs:simpleType>\n\
    \       <xs:restriction base=\"xs:positiveInteger\">\n        <xs:maxInclusive\
    \ value=\"96\"/>\n       </xs:restriction>\n      </xs:simpleType>\n     </xs:attribute>\n\
    \     <xs:attribute name=\"amt\" use=\"required\">\n      <xs:simpleType>\n  \
    \     <xs:restriction base=\"xs:integer\">\n        <xs:minInclusive value=\"\
    -96\"/>\n        <xs:maxInclusive value=\"96\"/>\n       </xs:restriction>\n \
    \     </xs:simpleType>\n     </xs:attribute>\n    </xs:extension>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n <xs:element name=\"agc\" substitutionGroup=\"\
    primitive\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"\
    primitiveType\">\n     <xs:attribute name=\"tgtlvl\" use=\"required\">\n     \
    \ <xs:simpleType>\n       <xs:restriction base=\"xs:nonPositiveInteger\">\n  \
    \      <xs:minInclusive value=\"-40\"/>\n        <xs:maxInclusive value=\"0\"\
    />\n       </xs:restriction>\n      </xs:simpleType>\n     </xs:attribute>\n \
    \    <xs:attribute name=\"maxgain\" default=\"10\">\n      <xs:simpleType>\n \
    \      <xs:restriction base=\"xs:nonNegativeInteger\">\n        <xs:minInclusive\
    \ value=\"0\"/>\n        <xs:maxInclusive value=\"40\"/>\n       </xs:restriction>\n\
    \      </xs:simpleType>\n     </xs:attribute>\n    </xs:extension>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n <xs:element name=\"gate\" substitutionGroup=\"\
    primitive\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"\
    primitiveType\">\n     <xs:attribute name=\"initial\" default=\"pass\">\n    \
    \  <xs:simpleType>\n       <xs:restriction base=\"xs:string\">\n        <xs:enumeration\
    \ value=\"pass\"/>\n        <xs:enumeration value=\"halt\"/>\n       </xs:restriction>\n\
    \      </xs:simpleType>\n     </xs:attribute>\n    </xs:extension>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n <xs:element name=\"clamp\" substitutionGroup=\"\
    primitive\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"\
    primitiveType\"/>\n   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n\
    \ <xs:element name=\"relay\" substitutionGroup=\"primitive\">\n  <xs:complexType>\n\
    \   <xs:complexContent>\n    <xs:extension base=\"primitiveType\"/>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n <xs:complexType name=\"vadPatternType\"\
    >\n  <xs:group ref=\"sendType\"/>\n  <xs:attribute name=\"iterate\" type=\"iterate.datatype\"\
    \ default=\"1\"/>\n  <xs:attribute name=\"len\" type=\"posDuration.datatype\"\
    \ use=\"required\"/>\n  <xs:attribute name=\"sen\" type=\"posDuration.datatype\"\
    \ use=\"optional\"/>\n </xs:complexType>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.7.  msml-dialog-group.xsd
  contents:
  - '16.3.7.  msml-dialog-group.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    unqualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include\
    \ schemaLocation=\"msml-core.xsd\"/>\n <xs:include schemaLocation=\"msml-dialog-core-datatypes.xsd\"\
    />\n <xs:include schemaLocation=\"msml-dialog-base-datatypes.xsd\"/>\n <xs:include\
    \ schemaLocation=\"msml-dialog-group-datatypes.xsd\"/>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.8.  msml-dialog-group-datatypes.xsd
  contents:
  - '16.3.8.  msml-dialog-group-datatypes.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    unqualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include\
    \ schemaLocation=\"msml-core-datatypes.xsd\"/>\n <xs:include schemaLocation=\"\
    msml-dialog-core-datatypes.xsd\"/>\n <xs:include schemaLocation=\"msml-dialog-base-datatypes.xsd\"\
    />\n <xs:include schemaLocation=\"msml-dialog-transform-datatypes.xsd\"/>\n <xs:element\
    \ name=\"group\" substitutionGroup=\"control\">\n  <xs:complexType>\n   <xs:sequence>\n\
    \    <xs:group ref=\"executeType\"/>\n    <xs:element name=\"groupexit\" minOccurs=\"\
    0\">\n     <xs:complexType>\n      <xs:group ref=\"sendType\"/>\n     </xs:complexType>\n\
    \    </xs:element>\n   </xs:sequence>\n   <xs:attribute name=\"id\" type=\"momlID.datatype\"\
    />\n   <xs:attribute name=\"topology\" use=\"required\">\n    <xs:simpleType>\n\
    \     <xs:restriction base=\"xs:string\">\n      <xs:enumeration value=\"serial\"\
    />\n      <xs:enumeration value=\"parallel\"/>\n      <xs:enumeration value=\"\
    fullduplex\"/>\n     </xs:restriction>\n    </xs:simpleType>\n   </xs:attribute>\n\
    \  </xs:complexType>\n </xs:element>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.9.  msml-dialog-speech.xsd
  contents:
  - '16.3.9.  msml-dialog-speech.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-core.xsd\"/>\n <xs:include schemaLocation=\"msml-dialog-core-datatypes.xsd\"\
    />\n <xs:include schemaLocation=\"msml-dialog-base-datatypes.xsd\"/>\n <xs:include\
    \ schemaLocation=\"msml-dialog-speech-datatypes.xsd\"/>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.10.  msml-dialog-speech-datatypes.xsd
  contents:
  - '16.3.10.  msml-dialog-speech-datatypes.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-dialog-core-datatypes.xsd\"/>\n <xs:include schemaLocation=\"msml-dialog-base-datatypes.xsd\"\
    />\n <xs:include schemaLocation=\"http://www.w3.org/TR/2002/WD-speech-\n     \
    \        synthesis-20020405/synthesis-core.xsd\"/>\n <xs:include schemaLocation=\"\
    http://www.w3.org/TR/speech-\n             grammar/grammar-core.xsd\"/>\n <xs:element\
    \ name=\"speech\" substitutionGroup=\"primitive\">\n  <xs:complexType>\n   <xs:complexContent>\n\
    \    <xs:extension base=\"primitiveType\">\n     <xs:sequence>\n      <xs:element\
    \ name=\"grammar\" maxOccurs=\"unbounded\">\n       <xs:complexType>\n       \
    \ <xs:complexContent>\n         <xs:extension base=\"grammar\">\n          <xs:choice>\n\
    \           <xs:element name=\"match\" type=\"iterateSendType\"\n            \
    \           minOccurs=\"0\"/>\n          </xs:choice>\n          <xs:attribute\
    \ name=\"uri\" type=\"xs:anyURI\"/>\n          <xs:attribute name=\"iterate\"\
    \ type=\"iterate.datatype\"\n                        default=\"1\"/>\n       \
    \  </xs:extension>\n        </xs:complexContent>\n       </xs:complexType>\n \
    \     </xs:element>\n      <xs:element name=\"noinput\" type=\"iterateSendType\"\
    \ minOccurs=\"0\"/>\n      <xs:element name=\"nomatch\" type=\"iterateSendType\"\
    \ minOccurs=\"0\"/>\n      <xs:element name=\"speechexit\" minOccurs=\"0\">\n\
    \       <xs:complexType>\n        <xs:group ref=\"sendType\"/>\n       </xs:complexType>\n\
    \      </xs:element>\n     </xs:sequence>\n     <xs:attribute name=\"noint\" type=\"\
    posDuration.datatype\"/>\n     <xs:attribute name=\"norect\" type=\"posDuration.datatype\"\
    />\n     <xs:attribute name=\"spcmplt\" type=\"posDuration.datatype\"/>\n    \
    \ <xs:attribute name=\"confidence\">\n      <xs:simpleType>\n       <xs:restriction\
    \ base=\"xs:positiveInteger\">\n        <xs:maxInclusive value=\"100\"/>\n   \
    \    </xs:restriction>\n      </xs:simpleType>\n     </xs:attribute>\n     <xs:attribute\
    \ name=\"sens\" type=\"xs:positiveInteger\"/>\n     <xs:attribute name=\"starttimer\"\
    \ type=\"boolean.datatype\"\n                   default=\"false\"/>\n     <xs:attribute\
    \ name=\"iterate\" type=\"iterate.datatype\" default=\"1\"/>\n    </xs:extension>\n\
    \   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n <xs:element name=\"\
    tts\" type=\"smediaType\" substitutionGroup=\"smedia\"/>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.11.  msml-dialog-fax-detect.xsd
  contents:
  - '16.3.11.  msml-dialog-fax-detect.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-core.xsd\"/>\n <xs:include schemaLocation=\"msml-dialog-core-datatypes.xsd\"\
    />\n <xs:include schemaLocation=\"msml-dialog-fax-detect-datatypes.xsd\"/>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.12.  msml-dialog-fax-detect-datatypes.xsd
  contents:
  - '16.3.12.  msml-dialog-fax-detect-datatypes.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-dialog-core-datatypes.xsd\"/>\n <xs:element name=\"faxdetect\" substitutionGroup=\"\
    primitive\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"\
    primitiveType\">\n     <xs:choice minOccurs=\"0\">\n      <xs:element name=\"\
    faxdetectexit\">\n       <xs:complexType>\n        <xs:group ref=\"sendType\"\
    />\n       </xs:complexType>\n      </xs:element>\n     </xs:choice>\n    </xs:extension>\n\
    \   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.13.  msml-dialog-fax-sendrecv.xsd
  contents:
  - '16.3.13.  msml-dialog-fax-sendrecv.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-core.xsd\"/>\n <xs:include schemaLocation=\"msml-dialog-core-datatypes.xsd\"\
    />\n <xs:include schemaLocation=\"msml-dialog-fax-sendrecv-datatypes.xsd\"/>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.3.14.  msml-dialog-fax-sendrecv-datatypes.xsd
  contents:
  - '16.3.14.  msml-dialog-fax-sendrecv-datatypes.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-dialog-core-datatypes.xsd\"/>\n <xs:element name=\"faxsend\" substitutionGroup=\"\
    primitive\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"\
    primitiveType\">\n     <xs:sequence>\n      <xs:element name=\"sendobj\" type=\"\
    sendobjType\" minOccurs=\"0\"\n          maxOccurs=\"unbounded\"/>\n      <xs:element\
    \ name=\"hdrfooter\" type=\"hdrfooterType\" minOccurs=\"0\"/>\n      <xs:element\
    \ name=\"rxpoll\" minOccurs=\"0\">\n       <xs:complexType>\n        <xs:sequence>\n\
    \         <xs:element name=\"rcvobj\" type=\"rcvobjType\"\n                  \
    \   maxOccurs=\"unbounded\"/>\n         <xs:element name=\"hdrfooter\" type=\"\
    hdrfooterType\"\n                     minOccurs=\"0\"/>\n        </xs:sequence>\n\
    \        <xs:attribute name=\"rmtid\" type=\"faxid.datatype\"\n              \
    \        use=\"required\"/>\n       </xs:complexType>\n      </xs:element>\n \
    \     <xs:group ref=\"faxstatusrequest\"/>\n     </xs:sequence>\n     <xs:attribute\
    \ name=\"lclid\" type=\"faxid.datatype\" use=\"optional\"/>\n     <xs:attribute\
    \ name=\"minspeed\" type=\"faxspeed.datatype\"\n                   use=\"optional\"\
    />\n     <xs:attribute name=\"maxspeed\" type=\"faxspeed.datatype\"\n        \
    \           use=\"optional\"/>\n     <xs:attribute name=\"ecm\" type=\"boolean.datatype\"\
    \ use=\"optional\"/>\n    </xs:extension>\n   </xs:complexContent>\n  </xs:complexType>\n\
    \ </xs:element>\n <xs:element name=\"faxrecv\" substitutionGroup=\"primitive\"\
    >\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"primitiveType\"\
    >\n     <xs:sequence>\n      <xs:element name=\"rcvobj\" type=\"rcvobjType\" minOccurs=\"\
    0\"\n                  maxOccurs=\"unbounded\"/>\n      <xs:element name=\"hdrfooter\"\
    \ type=\"hdrfooterType\" minOccurs=\"0\"/>\n      <xs:element name=\"txpoll\"\
    \ minOccurs=\"0\">\n       <xs:complexType>\n        <xs:sequence>\n         <xs:element\
    \ name=\"sendobj\" type=\"sendobjType\"\n                     maxOccurs=\"unbounded\"\
    />\n         <xs:element name=\"hdrfooter\" type=\"hdrfooterType\"\n         \
    \            minOccurs=\"0\"/>\n        </xs:sequence>\n        <xs:attribute\
    \ name=\"rmtid\" type=\"faxid.datatype\"/>\n       </xs:complexType>\n      </xs:element>\n\
    \      <xs:group ref=\"faxstatusrequest\"/>\n     </xs:sequence>\n     <xs:attribute\
    \ name=\"lclid\" type=\"faxid.datatype\" use=\"optional\"/>\n     <xs:attribute\
    \ name=\"ecm\" type=\"boolean.datatype\" default=\"true\"/>\n    </xs:extension>\n\
    \   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n <xs:group name=\"\
    faxstatusrequest\">\n  <xs:sequence>\n   <xs:element name=\"faxstart\" minOccurs=\"\
    0\"/>\n   <xs:element name=\"faxnegotiate\" minOccurs=\"0\"/>\n   <xs:element\
    \ name=\"faxpagedone\" minOccurs=\"0\"/>\n   <xs:element name=\"faxobjectdone\"\
    \ minOccurs=\"0\"/>\n   <xs:element name=\"faxopcomplete\" minOccurs=\"0\"/>\n\
    \   <xs:element name=\"faxpollstart\" minOccurs=\"0\"/>\n  </xs:sequence>\n </xs:group>\n\
    \ <xs:complexType name=\"hdrfooterType\">\n  <xs:choice>\n   <xs:element name=\"\
    format\" type=\"xs:string\" minOccurs=\"0\"\n               maxOccurs=\"unbounded\"\
    />\n  </xs:choice>\n  <xs:attribute name=\"type\" type=\"hdrfooter.datatype\"\
    />\n  <xs:attribute name=\"style\" type=\"hdrfooterstyle.datatype\"/>\n </xs:complexType>\n\
    \ <xs:complexType name=\"formatType\">\n  <xs:simpleContent>\n   <xs:extension\
    \ base=\"xs:string\">\n    <xs:attribute name=\"style\">\n     <xs:simpleType>\n\
    \      <xs:restriction base=\"xs:string\">\n       <xs:enumeration value=\"append\"\
    />\n       <xs:enumeration value=\"overlay\"/>\n       <xs:enumeration value=\"\
    replace\"/>\n      </xs:restriction>\n     </xs:simpleType>\n    </xs:attribute>\n\
    \   </xs:extension>\n  </xs:simpleContent>\n </xs:complexType>\n <xs:complexType\
    \ name=\"rcvobjType\">\n  <xs:attribute name=\"objuri\" type=\"xs:anyURI\" use=\"\
    required\"/>\n  <xs:attribute name=\"maxpages\" type=\"xs:positiveInteger\"/>\n\
    \ </xs:complexType>\n <xs:complexType name=\"sendobjType\">\n  <xs:attribute name=\"\
    objuri\" type=\"xs:anyURI\" use=\"required\"/>\n  <xs:attribute name=\"startpage\"\
    \ type=\"xs:positiveInteger\"/>\n  <xs:attribute name=\"pagecount\" type=\"xs:positiveInteger\"\
    />\n </xs:complexType>\n <xs:simpleType name=\"faxid.datatype\">\n  <xs:restriction\
    \ base=\"xs:string\">\n   <xs:pattern value=\"[0-9+*- ]{20}\"/>\n  </xs:restriction>\n\
    \ </xs:simpleType>\n <xs:simpleType name=\"faxspeed.datatype\">\n  <xs:restriction\
    \ base=\"xs:string\">\n   <xs:enumeration value=\"2400\"/>\n   <xs:enumeration\
    \ value=\"4800\"/>\n   <xs:enumeration value=\"7200\"/>\n   <xs:enumeration value=\"\
    9600\"/>\n   <xs:enumeration value=\"12000\"/>\n   <xs:enumeration value=\"14400\"\
    />\n  </xs:restriction>\n </xs:simpleType>\n <xs:simpleType name=\"hdrfooter.datatype\"\
    >\n  <xs:restriction base=\"xs:string\">\n   <xs:enumeration value=\"header\"\
    />\n   <xs:enumeration value=\"footer\"/>\n   <xs:enumeration value=\"autohdr\"\
    />\n   <xs:enumeration value=\"nohdr\"/>\n  </xs:restriction>\n </xs:simpleType>\n\
    \ <xs:simpleType name=\"hdrfooterstyle.datatype\">\n  <xs:restriction base=\"\
    xs:string\">\n   <xs:enumeration value=\"append\"/>\n   <xs:enumeration value=\"\
    overlay\"/>\n   <xs:enumeration value=\"replace\"/>\n  </xs:restriction>\n </xs:simpleType>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.4.  MSML Audit Packages
  contents:
  - '16.4.  MSML Audit Packages

    '
- title: 16.4.1.  msml-audit-core.xsd
  contents:
  - '16.4.1.  msml-audit-core.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-core.xsd\"/>\n <xs:include schemaLocation=\"msml-core-datatypes.xsd\"/>\n\
    \ <xs:include schemaLocation=\"msml-audit-core-datatypes.xsd\"/>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.4.2.  msml-audit-core-datatypes.xsd
  contents:
  - '16.4.2.  msml-audit-core-datatypes.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-core-datatypes.xsd\"/>\n <xs:element name=\"audit\" substitutionGroup=\"\
    msmlRequest\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension\
    \ base=\"msmlRequestType\">\n     <xs:attribute name=\"queryid\" type=\"auditQueryId.datatype\"\
    \n                   use=\"required\"/>\n     <xs:attribute name=\"statelist\"\
    \ type=\"auditStateList.datatype\"\n                   use=\"optional\"/>\n  \
    \  </xs:extension>\n   </xs:complexContent>\n  </xs:complexType>\n </xs:element>\n\
    \ <xs:element name=\"auditresult\" substitutionGroup=\"msmlResultComplex\">\n\
    \  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"msmlResultComplexType\"\
    >\n    <xs:choice maxOccurs=\"unbounded\">\n     <xs:element ref=\"stateParameter\"\
    />\n     <xs:element ref=\"stateParameterSimple\"/>\n     </xs:choice>\n     <xs:attribute\
    \ name=\"targetid\" type=\"independentID.datatype\"\n                   use=\"\
    required\"/>\n    </xs:extension>\n   </xs:complexContent>\n  </xs:complexType>\n\
    \ </xs:element>\n <xs:element name=\"stateParameter\" type=\"stateParameterType\"\
    \n             abstract=\"true\"/>\n <xs:element name=\"stateParameterSimple\"\
    \ type=\"stateParameterSimpleType\"\n             abstract=\"true\"/>\n <xs:complexType\
    \ name=\"stateParameterType\"/>\n <xs:simpleType name=\"stateParameterSimpleType\"\
    >\n  <xs:restriction base=\"xs:string\"/>\n </xs:simpleType>\n <xs:simpleType\
    \ name=\"auditQueryId.datatype\">\n  <xs:restriction base=\"xs:string\">\n   <xs:pattern\
    \ value=\"conf:[a-zA-Z0-9.:\\-_]+\"/>\n   <xs:pattern value=\"conn:[a-zA-Z0-9.:\\\
    -_]+\"/>\n   <xs:pattern value=\"conf:\\*\"/>\n   <xs:pattern value=\"conn:\\\
    *\"/>\n  </xs:restriction>\n </xs:simpleType>\n <xs:simpleType name=\"auditStateList.datatype\"\
    >\n  <xs:restriction base=\"xs:string\"/>\n </xs:simpleType>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.4.3.  msml-audit-conf.xsd
  contents:
  - '16.4.3.  msml-audit-conf.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-core.xsd\"/>\n <xs:include schemaLocation=\"msml-core-datatypes.xsd\"/>\n\
    \ <xs:include schemaLocation=\"msml-audit-core-datatypes.xsd\"/>\n <xs:include\
    \ schemaLocation=\"msml-audit-dialog-datatypes.xsd\"/>\n <xs:include schemaLocation=\"\
    msml-audit-stream-datatypes.xsd\"/>\n <xs:include schemaLocation=\"msml-audit-conf-datatypes.xsd\"\
    />\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.4.4.  msml-audit-conf-datatypes.xsd
  contents:
  - '16.4.4.  msml-audit-conf-datatypes.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-conf-core-datatypes.xsd\"/>\n <xs:include schemaLocation=\"msml-audit-core-datatypes.xsd\"\
    />\n <xs:element name=\"confconfig\" substitutionGroup=\"stateParameter\">\n \
    \ <xs:complexType>\n   <xs:complexContent>\n    <xs:extension base=\"stateParameterType\"\
    >\n     <xs:sequence>\n      <xs:element name=\"audiomix\" type=\"audioMixType\"\
    \ minOccurs=\"0\"\n                  maxOccurs=\"unbounded\"/>\n      <xs:element\
    \ name=\"videolayout\" type=\"videoLayoutType\"\n                  minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n      <xs:element name=\"controller\" type=\"connID.datatype\"\
    \n                  minOccurs=\"0\"/>\n     </xs:sequence>\n     <xs:attribute\
    \ name=\"deletewhen\" use=\"optional\" default=\"never\">\n      <xs:simpleType>\n\
    \       <xs:restriction base=\"xs:string\">\n        <xs:enumeration value=\"\
    nomedia\"/>\n        <xs:enumeration value=\"nocontrol\"/>\n        <xs:enumeration\
    \ value=\"never\"/>\n       </xs:restriction>\n      </xs:simpleType>\n     </xs:attribute>\n\
    \     <xs:attribute name=\"term\" type=\"boolean.datatype\" use=\"optional\"\n\
    \                   default=\"true\"/>\n    </xs:extension>\n   </xs:complexContent>\n\
    \  </xs:complexType>\n </xs:element>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.4.5.  msml-audit-conn.xsd
  contents:
  - '16.4.5.  msml-audit-conn.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-core.xsd\"/>\n <xs:include schemaLocation=\"msml-audit-core-datatypes.xsd\"\
    />\n <xs:include schemaLocation=\"msml-audit-dialog-datatypes.xsd\"/>\n <xs:include\
    \ schemaLocation=\"msml-audit-stream-datatypes.xsd\"/>\n <xs:include schemaLocation=\"\
    msml-audit-conn-datatypes.xsd\"/>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.4.6.  msml-audit-conn-datatypes.xsd
  contents:
  - '16.4.6.  msml-audit-conn-datatypes.xsd

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\"\n           attributeFormDefault=\"unqualified\">\n <xs:include schemaLocation=\"\
    msml-audit-core-datatypes.xsd\"/>\n <xs:element name=\"sipdialog\" substitutionGroup=\"\
    stateParameter\">\n  <xs:complexType>\n   <xs:complexContent>\n    <xs:extension\
    \ base=\"stateParameterType\">\n     <xs:sequence>\n      <xs:element name=\"\
    localseq\" type=\"xs:integer\" minOccurs=\"0\"/>\n      <xs:element name=\"remoteseq\"\
    \ type=\"xs:int\" minOccurs=\"0\"/>\n      <xs:element name=\"localuri\" type=\"\
    xs:string\" minOccurs=\"0\"/>\n      <xs:element name=\"remoteuri\" type=\"xs:string\"\
    \ minOccurs=\"0\"/>\n      <xs:element name=\"remotetarget\" type=\"xs:string\"\
    \ minOccurs=\"0\"/>\n      <xs:element name=\"routeset\" type=\"xs:string\" minOccurs=\"\
    0\"/>\n     </xs:sequence>\n     <xs:attribute name=\"callid\" type=\"xs:string\"\
    \ use=\"required\"/>\n     <xs:attribute name=\"localtag\" type=\"xs:string\"\
    \ use=\"required\"/>\n     <xs:attribute name=\"remotetag\" type=\"xs:string\"\
    \ use=\"required\"/>\n    </xs:extension>\n   </xs:complexContent>\n  </xs:complexType>\n\
    \ </xs:element>\n <xs:element name=\"localsdp\" type=\"stateParameterSimpleType\"\
    \n             substitutionGroup=\"stateParameterSimple\"/>\n <xs:element name=\"\
    remotesdp\" type=\"stateParameterSimpleType\"\n             substitutionGroup=\"\
    stateParameterSimple\"/>\n"
- title: </xs:schema>
  contents:
  - '</xs:schema>

    '
- title: 16.4.7.  msml-audit-dialog-datatypes.xsd
  contents:
  - "16.4.7.  msml-audit-dialog-datatypes.xsd\n   Audit Dialog functionality requires\
    \ use of either the Audit Conf\n   Package or the Audit Conn Package.\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    \n              elementFormDefault=\"qualified\"\n              attributeFormDefault=\"\
    unqualified\">\n    <xs:include schemaLocation=\"msml-audit-core-datatypes.xsd\"\
    />\n    <xs:element name=\"dialog\" substitutionGroup=\"stateParameter\">\n  \
    \   <xs:complexType>\n      <xs:complexContent>\n       <xs:extension base=\"\
    stateParameterType\">\n        <xs:sequence>\n         <xs:element name=\"duration\"\
    \ type=\"xs:positiveInteger\"\n                     minOccurs=\"0\"/>\n      \
    \   <xs:element name=\"primitive\" minOccurs=\"0\">\n          <xs:simpleType>\n\
    \           <xs:restriction base=\"xs:string\">\n            <xs:pattern value=\"\
    play\"/>\n            <xs:pattern value=\"dtmf\"/>\n            <xs:pattern value=\"\
    collect\"/>\n            <xs:pattern value=\"dtmfgen\"/>\n            <xs:pattern\
    \ value=\"tonegen\"/>\n            <xs:pattern value=\"record\"/>\n          \
    \  <xs:pattern value=\"none\"/>\n           </xs:restriction>\n          </xs:simpleType>\n\
    \         </xs:element>\n         <xs:element name=\"controller\" type=\"connID.datatype\"\
    \n                     minOccurs=\"0\"/>\n        </xs:sequence>\n        <xs:attribute\
    \ name=\"name\" type=\"msmlInstanceID.datatype\"\n                      use=\"\
    required\"/>\n        <xs:attribute name=\"src\" type=\"xs:anyURI\" use=\"optional\"\
    />\n        <xs:attribute name=\"type\" type=\"dialogLanguage.datatype\"\n   \
    \                   use=\"required\"/>\n       </xs:extension>\n      </xs:complexContent>\n\
    \     </xs:complexType>\n    </xs:element>\n   </xs:schema>\n"
- title: 16.4.8.  msml-audit-stream-datatypes.xsd
  contents:
  - "16.4.8.  msml-audit-stream-datatypes.xsd\n   Audit Stream functionality requires\
    \ use of either the Audit Conf\n   Package or the Audit Conn Package.\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    \n              elementFormDefault=\"qualified\"\n              attributeFormDefault=\"\
    unqualified\">\n    <xs:include schemaLocation=\"msml-audit-core-datatypes.xsd\"\
    />\n    <xs:element name=\"stream\" substitutionGroup=\"stateParameter\">\n  \
    \   <xs:complexType>\n      <xs:complexContent>\n       <xs:extension base=\"\
    stateParameterType\">\n        <xs:all>\n         <xs:element name=\"clamp\" minOccurs=\"\
    0\">\n          <xs:complexType>\n           <xs:attribute name=\"dtmf\" type=\"\
    boolean.datatype\"/>\n           <xs:attribute name=\"tones\" type=\"boolean.datatype\"\
    />\n          </xs:complexType>\n         </xs:element>\n         <xs:element\
    \ name=\"gain\" minOccurs=\"0\">\n          <xs:complexType>\n           <xs:attribute\
    \ name=\"amt\" use=\"optional\">\n            <xs:simpleType>\n             <xs:restriction\
    \ base=\"xs:integer\">\n              <xs:minInclusive value=\"-96\"/>\n     \
    \         <xs:maxInclusive value=\"96\"/>\n             </xs:restriction>\n  \
    \          </xs:simpleType>\n           </xs:attribute>\n           <xs:attribute\
    \ name=\"agc\" type=\"boolean.datatype\"/>\n           <xs:attribute name=\"tgtlvl\"\
    \ use=\"optional\">\n            <xs:simpleType>\n             <xs:restriction\
    \ base=\"xs:nonPositiveInteger\">\n              <xs:minInclusive value=\"-40\"\
    />\n              <xs:maxInclusive value=\"0\"/>\n             </xs:restriction>\n\
    \            </xs:simpleType>\n           </xs:attribute>\n           <xs:attribute\
    \ name=\"maxgain\" default=\"10\">\n            <xs:simpleType>\n            \
    \ <xs:restriction base=\"xs:nonNegativeInteger\">\n              <xs:minInclusive\
    \ value=\"0\"/>\n              <xs:maxInclusive value=\"40\"/>\n             </xs:restriction>\n\
    \            </xs:simpleType>\n           </xs:attribute>\n          </xs:complexType>\n\
    \         </xs:element>\n         <xs:element name=\"visual\" minOccurs=\"0\"\
    />\n        </xs:all>\n        <xs:attribute name=\"joinwith\" type=\"independentID.datatype\"\
    \n                      use=\"required\"/>\n        <xs:attribute name=\"media\"\
    \ use=\"required\">\n         <xs:simpleType>\n          <xs:restriction base=\"\
    xs:string\">\n           <xs:pattern value=\"audio\"/>\n           <xs:pattern\
    \ value=\"video\"/>\n          </xs:restriction>\n         </xs:simpleType>\n\
    \        </xs:attribute>\n        <xs:attribute name=\"dir\" use=\"required\"\
    >\n         <xs:simpleType>\n          <xs:restriction base=\"xs:string\">\n \
    \          <xs:pattern value=\"from\"/>\n           <xs:pattern value=\"to\"/>\n\
    \          </xs:restriction>\n         </xs:simpleType>\n        </xs:attribute>\n\
    \        <xs:attribute name=\"compressed\" type=\"boolean.datatype\"/>\n     \
    \   <xs:attribute name=\"preferred\" type=\"boolean.datatype\"\n             \
    \         default=\"false\"/>\n        <xs:attribute name=\"display\" type=\"\
    xs:string\"/>\n        <xs:attribute name=\"override\" type=\"boolean.datatype\"\
    \n                      default=\"false\"/>\n       </xs:extension>\n      </xs:complexContent>\n\
    \     </xs:complexType>\n    </xs:element>\n   </xs:schema>\n"
- title: 17.  Security Considerations
  contents:
  - "17.  Security Considerations\n   MSML being an XML-based language, security considerations\
    \ as defined\n   by RFC 3023 [i2] are applicable.\n   Media server interfaces\
    \ driven using MSML are under the explicit\n   control of a SIP application server.\
    \  SIP call legs are used to\n   deliver XML-based MSML transactions to the media\
    \ server.  The\n   security and integrity of MSML transactions, whenever required,\n\
    \   SHOULD use sips: and TLS for encryption and authentication of the SIP\n  \
    \ control channel used to carry MSML payloads.  Further information\n   related\
    \ to security, privacy, and integrity of MSML media types is\n   described in\
    \ the IANA Considerations section.\n   Media streams, such as audio/video, MAY\
    \ optionally be protected,\n   encrypted/decrypted, and authenticated, utilizing\
    \ Secure Real Time\n   Protocol (SRTP), wherever media stream security is required.\
    \  Media\n   negotiation establishes the required level of security and is\n \
    \  initiated by the clients, which is outside the scope of the control\n   interface\
    \ specified by MSML.\n"
- title: 18.  IANA Considerations
  contents:
  - '18.  IANA Considerations

    '
- title: 18.1.  IANA Registrations for 'application' MIME Media Type
  contents:
  - "18.1.  IANA Registrations for 'application' MIME Media Type\n   The following\
    \ registrations have been made:\n   Type Name: \"application\"\n   Subtype names:\n\
    \      'application/vnd.radisys.msml+xml',\n      'application/vnd.radisys.moml+xml',\n\
    \      'application/vnd.radisys.msml-conf+xml',\n      'application/vnd.radisys.msml-dialog+xml',\n\
    \      'application/vnd.radisys.msml-dialog-base+xml',\n      'application/vnd.radisys.msml-dialog-group+xml',\n\
    \      'application/vnd.radisys.msml-dialog-speech+xml',\n      'application/vnd.radisys.msml-dialog-transform+xml',\n\
    \      'application/vnd.radisys.msml-dialog-fax-detect+xml',\n      'application/vnd.radisys.msml-dialog-fax-sendrecv+xml',\n\
    \      'application/vnd.radisys.msml-audit+xml',\n      'application/vnd.radisys.msml-audit-conf+xml',\n\
    \      'application/vnd.radisys.msml-audit-conn+xml',\n      'application/vnd.radisys.msml-audit-dialog+xml',\n\
    \      'application/vnd.radisys.msml-audit-stream+xml'\n   Required parameters:\
    \ none\n   Optional parameters: charset\n      charset semantics as specified\
    \ in RFC 3023 [i2] for\n      \"application/xml\" media type.\n   Encoding considerations:\n\
    \      As specified in RFC 3023 [i2].\n   Security Considerations:\n      Media\
    \ types included in this section are XML based, and therefore\n      security\
    \ considerations as defined by RFC 3023 [i10] are\n      applicable.\n      These\
    \ media types do not contain active or executable content as\n      the content\
    \ itself merely provides control of the underlying media\n      streams.\n   \
    \   Secure exchange of content associated with these media types for\n      purposes\
    \ of authentication and privacy, whenever applicable, shall\n      require the\
    \ establishment of a secure control channel using sips:\n      and TLS.\n    \
    \  Privacy and integrity of media content associated with these media\n      types\
    \ shall be considered when applications using these media\n      types are exchanging\
    \ personal information such as personal\n      identification codes or conference\
    \ access codes.  Whenever such\n      content is deemed to require secure transport\
    \ and authentication,\n      a secure channel using sips: and TLS MUST be used,\
    \ as these media\n      types themselves provide no such inherent mechanisms for\
    \ security.\n   Interoperability considerations:\n      As specified in RFC 3023\
    \ [i2] and as specified within this\n      document.\n   Published specification:\
    \ RFC 5707\n   Intended applications for these media types:\n      Multimedia\
    \ Conferencing, Interactive Voice Response systems\n   Additional information:\n\
    \      Magic number(s): None\n      File extension(s): None\n      Macintosh file\
    \ type code(s): None\n   Person & email address to contact for further information:\n\
    \      Adnan Saleem <adnan.saleem@radisys.com>\n   Intended usage: COMMON\n"
- title: 18.2.  IANA Registrations for 'text' MIME Media Type
  contents:
  - "18.2.  IANA Registrations for 'text' MIME Media Type\n   The following registrations\
    \ are planned:\n      'text/vnd.radisys.msml-basic-layout'\n   Required parameters:\
    \ none\n   Optional parameters: charset\n      charset semantics as specified\
    \ in RFC 3023 [i2] for \"text/xml\"\n      media type.\n   Encoding considerations:\
    \ As specified in RFC 3023 [i2].\n   Security Considerations:\n      Media types\
    \ included in this section are XML based, and therefore\n      security considerations\
    \ as defined by RFC 3023 [i10] are\n      applicable.\n      The media type defined\
    \ in this section does not contain active or\n      executable content.  The media\
    \ type defines only a visual layout\n      scheme of a video conference.  Establishment\
    \ of active connections\n      associated with the video conference are outside\
    \ the scope of this\n      media type.\n      Since this media type only defines\
    \ a visual layout scheme, with no\n      reference or information about client\
    \ connections or participants\n      within the conference, privacy and integrity\
    \ concerns are not\n      applicable to this media type.\n   Interoperability\
    \ considerations:\n      As specified in RFC 3023 [i2] and as specified within\
    \ this\n      document.\n   Published specification: RFC 5707\n   Intended applications\
    \ for these media types:\n      Multimedia Conferencing, Interactive Voice Response\
    \ systems\n   Additional information:\n      Magic number(s): None\n      File\
    \ extension(s): None\n      Macintosh file type code(s): None\n   Person & email\
    \ address to contact for further information:\n      Adnan Saleem <adnan.saleem@radisys.com>\n\
    \   Intended usage: COMMON\n"
- title: 18.3.  URN Sub-Namespace Registration
  contents:
  - "18.3.  URN Sub-Namespace Registration\n   The namespace URI for elements defined\
    \ within this specification is a\n   URN [i8].  It uses the namespace identifier\
    \ 'ietf' defined by [i9]\n   and extended by RFC 3688 [i10].\n   The following\
    \ registrations of URN Sub-Namespaces are planned:\n   XML namespace: urn:ietf:params:xml:ns:msml\n\
    \   XML:\n   BEGIN\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD\
    \ XHTML Basic 1.0//EN\"\n   \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n     <head>\n         <meta\
    \ http-equiv=\"content-type\"\n               content=\"text/html;charset=iso-8859-1\"\
    />\n         <title>Media Server Markup Language Namespace</title>\n     </head>\n\
    \     <body>\n        <h1>Namespace for Media Server Markup Language</h1>\n  \
    \      <h2>urn:ietf:params:xml:ns:msml</h2>\n        <p>See MSML <a\n       href=\"\
    http://www.rfc-editor.org/rfc/rfc5707.txt\">RFC 5707</a></p>\n     </body>\n \
    \  </html>\n   END\n"
- title: 18.4.  XML Schema Registration
  contents:
  - "18.4.  XML Schema Registration\n   This section registers an XML schema per the\
    \ procedures in [i10].\n   URI: urn:ietf:params:xml:schema:msml\n   Registrant\
    \ Contact:\n      Adnan Saleem (adnan.saleem@radisys.com) and authors listed\n\
    \      within this document.\n   The XML for this schema can be found as the sole\
    \ content of Section\n   16.\n"
- title: 19.  References
  contents:
  - '19.  References

    '
- title: 19.1.  Normative References
  contents:
  - "19.1.  Normative References\n   [n1]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [n2]\
    \  Bray, T., Paoli, J., Sperberg-McQueen, C., and E. Maler,\n         \"Extensible\
    \ Markup Language (XML) 1.0 (Second Edition),\" W3C\n         First Edition REC-xml-20001006,\
    \ October 2000.\n   [n3]  World Wide Web Consortium, \"Speech Recognition Grammar\n\
    \         Specification Version 1.0\" (SRGS), W3C Candidate\n         Recommendation,\
    \ March 16, 2004\n   [n4]  World Wide Web Consortium, \"Natural Language Semantics\
    \ Markup\n         Language (NLSML) for the Speech Interface Framework\", W3C\n\
    \         Working Draft 20, November 2000.\n   [n5]  World Wide Web Consortium,\
    \ \"Voice Extensible Markup Language\n         (VoiceXML) Version 2.0, W3C Candidate\
    \ Recommendation, March 16,\n         2004.\n   [n6]  Berners-Lee, T., Fielding,\
    \ R., and L. Masinter, \"Uniform\n         Resource Identifier (URI): Generic\
    \ Syntax\", STD 66, RFC 3986,\n         January 2005.\n   [n7]  Burger, E., Ed.,\
    \ Van Dyke, J., and A. Spitzer, \"Basic Network\n         Media Services with\
    \ SIP\", RFC 4240, December 2005.\n   [n8]  Levinson, E., \"Content-ID and Message-ID\
    \ Uniform Resource\n         Locators\", RFC 2392, August 1998.\n   [n9]  Handley,\
    \ M., Jacobson, V., and C. Perkins, \"SDP: Session\n         Description Protocol\"\
    , RFC 4566, July 2006.\n   [n10] Bos, B., Lie, H., Tantek, C., and Hickson, I.,\
    \ \"Cascading Style\n         Sheets, level 2 (CSS2) Specification,\" W3C REC\
    \ CR-CSS21-, July\n         2007.\n   [n11] Burnett, D., Walker, M., and Hunt,\
    \ A., \"Speech Synthesis Markup\n         Language (SSML) Version 1.0\", W3C Recommendation,\
    \ 7 September\n         2004.\n"
- title: 19.2.  Informative References
  contents:
  - "19.2.  Informative References\n   [i1]  Rosenberg, J., Schulzrinne, H., and P.\
    \ Kyzivat, \"Indicating\n         User Agent Capabilities in the Session Initiation\
    \ Protocol\n         (SIP)\", RFC 3840, August 2004.\n   [i2]  Murata, M., St.\
    \ Laurent, S., and D. Kohn, \"XML Media Types\",\n         RFC 3023, January 2001.\n\
    \   [i3]  Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,\n     \
    \    \"RTP: A Transport Protocol for Real-Time Applications\", STD 64,\n     \
    \    RFC 3550, July 2003.\n   [i4]  Rosenberg, J., Peterson, J., Schulzrinne,\
    \ H., and G. Camarillo,\n         \"Best Current Practices for Third Party Call\
    \ Control (3pcc) in\n         the Session Initiation Protocol (SIP)\", BCP 85,\
    \ RFC 3725, April\n         2004.\n   [i5]  Donovan, S., \"The SIP INFO Method\"\
    , RFC 2976, October 2000.\n   [i6]  Ossenbruggen, J., Rutledge, L., Saccocio,\
    \ B., Schmitz, P.,\n         Kate, W., Ayars, J., Bulterman, D., Cohen, A., Day,\
    \ K., Hodge,\n         E., Hoschka, P., Hyche, E., Jourdan, M., Kubota, K., Lanphier,\n\
    \         R., Laya'da, N., Michel, T., and D. Newman, \"Synchronized\n       \
    \  Multimedia Integration Language (SMIL 2.0) Specification,\" W3C\n         REC\
    \ REC-smil2-20050107, January 2005.\n   [i7]  Freed, N. and N. Borenstein, \"\
    Multipurpose Internet Mail\n         Extensions (MIME) Part Two: Media Types\"\
    , RFC 2046, November\n         1996.\n   [i8]  Moats, R., \"URN Syntax\", RFC\
    \ 2141, May 1997.\n   [i9]  Moats, R., \"A URN Namespace for IETF Documents\"\
    , RFC 2648,\n         August 1999.\n   [i10] Mealling, M., \"The IETF XML Registry\"\
    , BCP 81, RFC 3688,\n         January 2004.\n   [i11] Boulton, C., Melanchuk,\
    \ T., McGlashan, S., and A. Shiratzky, \"A\n         Control Framework for the\
    \ Session Initiation Protocol (SIP)\",\n         Work in Progress, February 2007.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Sergiu Stambolian of RadiSys provided key insights, both\
    \ theoretic\n   and through development experience, on several versions of the\n\
    \   document.\n   Stephen Buko and George Raskulinec of Intel made numerous valuable\n\
    \   contributions towards enhancements of multimedia playback and record\n   operations.\
    \  Gene Shtirmer of Intel provided review feedback on\n   several revisions and\
    \ feature enhancement suggestions.\n   David Asher of NMS Communications provided\
    \ valuable insights towards\n   creation of standard profiles and a modularization\
    \ scheme based on\n   packages for better interoperability.\n   Gilles Compienne\
    \ of Ubiquity Software has provided feedback on\n   several earlier versions of\
    \ this document.\n   Chris Boulton and Ben Smith, both of Ubiquity, and Michael\
    \ Rice of\n   VocalData helped clarify several issues, while Bruce Walsh and Kevin\n\
    \   Fitzgerald, both of Spectel/Avaya, provided important feedback.\n   Cliff\
    \ Schornak of Commetrex significantly contributed to the\n   facsimile work. \
    \ Peter Danielsen of Lucent has contributed thoughtful\n   and detailed reviews\
    \ for several earlier versions of the document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Adnan Saleem\n   RadiSys\n   4190 Still Creek Drive, Suite\
    \ 300\n   Burnaby, BC, V5C 6C6\n   Canada\n   Phone: +1 604 918 6376\n   EMail\
    \ : adnan.saleem@radisys.com\n   Yong Xin\n   RadiSys\n   4190 Still Creek Drive,\
    \ Suite 300\n   Burnaby, BC, V5C 6C6\n   Canada\n   Phone: +1 604 918 6383\n \
    \  EMail: yong.xin@radiSys.com\n   Garland Sharratt\n   Consultant\n   Vancouver,\
    \ BC\n   Canada\n   EMail: garland.sharratt@gmail.com\n"
