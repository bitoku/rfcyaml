- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                       B. Williams
  contents:
  - "Independent Submission                                       B. Williams\n  \
    \         An Experimental TCP Option for Host Identification\n"
- title: Abstract
  contents:
  - "Abstract\n   Recent RFCs have discussed issues with host identification in IP\n\
    \   address-sharing systems, such as address/prefix-sharing devices and\n   application-layer\
    \ proxies.  Potential solutions for revealing a host\n   identifier in shared\
    \ address deployments have also been discussed.\n   This memo describes the design,\
    \ deployment, and privacy\n   considerations for one such solution in operational\
    \ use on the\n   Internet today that uses a TCP option to transmit a host identifier.\n"
- title: Independent Submissions Editor Note
  contents:
  - "Independent Submissions Editor Note\n   This Informational document specifies\
    \ an experimental TCP HOST_ID\n   option that is already fairly widely deployed.\
    \  It discusses that\n   option's privacy considerations in considerable detail\
    \ and highlights\n   the care providers need to exercise in any actual deployment.\
    \  The\n   Independent Submissions Editor has chosen to publish this document\
    \ in\n   the Independent Stream so that potential deployers and implementors\n\
    \   can understand all its details, so as to produce implementations that\n  \
    \ will interwork properly with other (existing) deployments.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This proposal was previously proposed for adoption by the TCPM\n\
    \   working group and rejected as being an undesirable technical design\n   for\
    \ both transport and privacy reasons.  This document specifies a\n   new TCP option\
    \ that uses the shared experimental options format.  The\n   use of experimental\
    \ TCP options is specified in [RFC6994] for TCP\n   options \"that are not yet\
    \ eligible for assigned codepoints\".  As this\n   proposal has been rejected\
    \ by the IETF community, it is not eligible\n   for the registration of a TCP\
    \ option codepoint.  It should be further\n   noted that for experimental TCP\
    \ options, it \"is only appropriate to\n   use these values in explicitly-configured\
    \ experiments; they MUST NOT\n   be shipped as defaults in implementations\" [RFC4727].\
    \  The IESG also\n   carried out a review as described in [RFC5742] and concluded\
    \ that\n   this proposal violates IETF principles expressed in [RFC7258] about\n\
    \   pervasive monitoring as an attack and should therefore not be\n   published\
    \ without IETF review and IESG approval.  (The process\n   described in [RFC5742]\
    \ nonetheless allows the Independent Submissions\n   Editor to publish, as has\
    \ been chosen in this case.)  Deployments of\n   this proprietary TCP option may\
    \ be widely viewed as undermining\n   privacy and are likely to encounter issues\
    \ with reliability of\n   transport.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7974.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Important Use Cases ........................................4\n  \
    \    1.2. Document Goals .............................................6\n   2.\
    \ Terminology .....................................................6\n   3. Option\
    \ Format ...................................................7\n   4. Option Use\
    \ ......................................................7\n      4.1. Option Values\
    \ ..............................................7\n      4.2. Sending Host Requirements\
    \ ..................................9\n           4.2.1. Alternative SYN Cookie\
    \ Support ......................9\n           4.2.2. Persistent TCP Connections\
    \ ..........................9\n           4.2.3. Packet Fragmentation ...............................10\n\
    \      4.3. Multiple In-Path HOST_ID Senders ..........................10\n  \
    \ 5. Option Interpretation ..........................................11\n   6.\
    \ Interaction with Other TCP Options .............................12\n      6.1.\
    \ Multipath TCP (MPTCP) .....................................12\n      6.2. Authentication\
    \ Option (TCP-AO) ............................12\n      6.3. TCP Fast Open (TFO)\
    \ .......................................13\n   7. Security Considerations ........................................13\n\
    \   8. Privacy Considerations .........................................14\n  \
    \ 9. Pervasive Monitoring (PM) Considerations .......................15\n   10.\
    \ IANA Considerations ...........................................16\n   11. References\
    \ ....................................................16\n      11.1. Normative\
    \ References .....................................16\n      11.2. Informative\
    \ References ...................................17\n   Acknowledgements ..................................................20\n\
    \   Authors' Addresses ................................................20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A broad range of issues associated with address sharing\
    \ have been\n   documented in [RFC6269] and [RFC7620].  In addition, [RFC6967]\n\
    \   provides an analysis of various solutions to the problem of revealing\n  \
    \ the sending host's identifier (HOST_ID) information to the receiver,\n   indicating\
    \ that a solution using a TCP [RFC793] option for this\n   purpose is among the\
    \ possible approaches that could be applied with\n   limited performance impact\
    \ and a high success ratio.  The purpose of\n   this memo is to describe a TCP\
    \ HOST_ID option that is currently\n   deployed on the public Internet using the\
    \ TCP experimental option\n   codepoint, including discussion of related design,\
    \ deployment, and\n   privacy considerations.\n   Multiple documents have defined\
    \ TCP options for the purpose of host\n   identification: [REVEAL], [HOSTID],\
    \ and [OVERLAYPATH].  Specification\n   of multiple option formats to serve the\
    \ purpose of host\n   identification increases the burden for potential implementers\
    \ and\n   presents interoperability challenges as well, so the authors of those\n\
    \   documents have worked together to define a common TCP option that\n   supersedes\
    \ the formats from those three documents.  This memo\n   describes a version of\
    \ that common TCP option format that is\n   currently in use on the public Internet.\n\
    \   The option defined in this memo uses the TCP experimental option\n   codepoint\
    \ sharing mechanism defined in [RFC6994].  One of the earlier\n   specifications,\
    \ [OVERLAYPATH], is associated with unauthorized use of\n   a TCP option kind\
    \ number, and moving to the TCP experimental option\n   codepoint has allowed\
    \ the authors of that document to correct their\n   error.\n"
- title: 1.1.  Important Use Cases
  contents:
  - "1.1.  Important Use Cases\n   The authors' implementations have primarily focused\
    \ on the following\n   address-sharing use cases in which currently deployed systems\
    \ insert\n   the HOST_ID option:\n   Carrier-Grade NAT (CGN):  As defined in [RFC6888],\
    \ [RFC6333], and\n      other sources, a CGN allows multiple hosts connected to\
    \ the public\n      Internet to share a single Internet routable IPv4 address.\
    \  One\n      important characteristic of the CGN use case is that it modifies\n\
    \      IP packets in-path, but does not serve as the endpoint for the\n      associated\
    \ TCP connections.\n   Application Proxy:  As defined in [RFC1919], an application\
    \ proxy\n      splits a TCP connection into two segments, serving as an endpoint\n\
    \      for each of the connections and relaying data flows between the\n     \
    \ connections.\n   Overlay Network:  An overlay network is an Internet-based system\n\
    \      providing security, optimization, or other services for data flows\n  \
    \    that transit the system.  A network-layer overlay will sometimes\n      act\
    \ much like a CGN, in that packets transit the system with NAT\n      being applied\
    \ at the edge of the overlay.  A transport-layer or\n      application-layer overlay\
    \ [RFC3135] will typically act much like\n      an application proxy, in that\
    \ the TCP connection will be segmented\n      with the overlay network serving\
    \ as an endpoint for each of the\n      TCP connections.\n   In this set of sender\
    \ use cases, the TCP option is applied to an\n   individual TCP packet either\
    \ at the connection endpoint (e.g., an\n   application proxy or a transport-layer\
    \ overlay network) or at an\n   address-sharing middlebox (e.g., a CGN or a network-layer\
    \ overlay\n   network).  See Section 4 for additional details about the types\
    \ of\n   devices that add the option to a TCP packet, as well as existing\n  \
    \ limitations on use of the option when it is inserted by an address-\n   sharing\
    \ middlebox, including issues related to packet fragmentation.\n   The existing\
    \ receiver use cases considered by this memo include the\n   following:\n   o\
    \  Differentiating between attack and non-attack traffic when the\n      source\
    \ of the attack is sharing an address with non-attack\n      traffic.\n   o  Application\
    \ of per-subscriber policies for resource utilization,\n      etc., when multiple\
    \ subscribers are sharing a common address.\n   o  Improving server-side load-balancing\
    \ decisions by allowing the\n      load for multiple clients behind a shared address\
    \ to be assigned\n      to different servers, even when session affinity is required\
    \ at\n      the application layer.\n   In all of the above cases, differentiation\
    \ between address-sharing\n   clients is performed by a network function that\
    \ does not process the\n   application-layer protocol (e.g., HTTP) or the security\
    \ protocol\n   (e.g., TLS), because the action needs to be performed prior to\n\
    \   decryption or parsing the application layer.  Due to this, a solution\n  \
    \ implemented within the application layer or security protocol was\n   considered\
    \ unable to fully meet the receiver-side requirements.  At\n   the same time,\
    \ as noted in [RFC6967], use of an IP option for this\n   purpose has a low success\
    \ rate.  For these reasons, using a TCP\n   option to deliver the host identifier\
    \ was deemed by the authors to be\n   an effective way to satisfy these specific\
    \ use cases.  See Section 5\n   for details about receiver-side interpretation\
    \ of the option.\n"
- title: 1.2.  Document Goals
  contents:
  - "1.2.  Document Goals\n   Publication of this memo is intended to serve multiple\
    \ purposes.\n   First and foremost, this document intends to inform readers about\
    \ a\n   mechanism that is in broad use on the public Internet.  The authors\n\
    \   are each affiliated with companies that have implemented, tested,\n   and/or\
    \ deployed systems that use the HOST_ID option on the public\n   Internet.  Other\
    \ systems might encounter packets that contain this\n   TCP option, and this document\
    \ is intended to help others understand\n   the nature of the TCP option when\
    \ it is encountered so they can make\n   informed decisions about how to handle\
    \ it.\n   The testing effort documented in [HOSTID] indicated that a TCP option\n\
    \   could be used for host identification purposes without significant\n   disruption\
    \ of TCP connectivity to legacy servers and networks that do\n   not support the\
    \ option.  It also showed how mechanisms available in\n   existing TCP implementations\
    \ could make use of such a TCP option for\n   diagnostics and/or packet filtering.\
    \  The authors' use of the TCP\n   option on the public Internet has confirmed\
    \ that it can be used\n   effectively for our use cases, but it has also uncovered\
    \ some\n   interoperability issues associated with the option's use on the\n \
    \  public Internet, especially regarding interactions with other TCP\n   options\
    \ that support new transport capability being specified within\n   the IETF. \
    \ Section 6 discusses those interactions and limitations and\n   explains how\
    \ our systems handle associated issues.\n   Discussions within the IETF have raised\
    \ privacy concerns about the\n   option's use, especially in regard to pervasive\
    \ monitoring risks.\n   Existing uses of the option limit the nature of the HOST_ID\
    \ values\n   that are used and the systems that insert them in order to mitigate\n\
    \   pervasive monitoring risks.  Sections 8 and 9 discuss the authors'\n   assessments\
    \ of the privacy and monitoring impact of this TCP option\n   in its current uses\
    \ and suggest behavior for some external systems\n   when the option is encountered.\
    \  Continued discussion following\n   publication of this memo is expected to\
    \ allow further refinement of\n   requirements related to the values used to populate\
    \ the option and\n   how those values can be interpreted by the receiver.  There\
    \ is a\n   trade-off between providing the expected functionality to the\n   receiver\
    \ and protecting the privacy of the sender, and continued\n   assessment will\
    \ be necessary in order to find the right balance.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  Option Format
  contents:
  - "3.  Option Format\n   When used for host identification, the TCP experimental\
    \ option uses\n   the experiment identification mechanism described in [RFC6994]\
    \ and\n   has the following format and content.\n    0          1          2 \
    \         3\n    01234567 89012345 67890123 45678901\n   +--------+--------+--------+--------+\n\
    \   |  Kind  | Length |       ExID      |\n   +--------+--------+--------+--------+\n\
    \   |  HOST_ID ...\n   +--------+---\n   Kind:  The option kind value is 253.\n\
    \   Length:  The length of the option is variable, based on the required\n   \
    \   size of the host identifier (e.g., a 2-octet HOST_ID will require\n      a\
    \ length of 6, while a 4-octet HOST_ID will require a length of\n      8).\n \
    \  ExID:  The experiment ID value is 0x0348 (840).\n   HOST_ID:  The host identifier\
    \ is a value that can be used to\n      differentiate among the various hosts\
    \ sharing a common public IP\n      address.  See below for further discussion\
    \ of this value.\n"
- title: 4.  Option Use
  contents:
  - "4.  Option Use\n   This section describes requirements associated with the use\
    \ of the\n   option, including expected option values, which hosts are allowed\
    \ to\n   include the option, and segments that include the option.\n"
- title: 4.1.  Option Values
  contents:
  - "4.1.  Option Values\n   The information conveyed in the HOST_ID option is intended\
    \ to\n   uniquely identify the sending host to the best capability of the\n  \
    \ machine that adds the option to the segment, while at the same time\n   avoiding\
    \ inclusion of information that does not assist this purpose.\n   In addition,\
    \ the option is not intended to be used to expose\n   information about the sending\
    \ host that could not be discovered by\n   observing segments in transit on some\
    \ portion of the Internet path\n   between the sender and the receiver.  Existing\
    \ use cases have\n   different requirements for receiver-side functionality, so\
    \ this\n   document attempts to provide a high degree of flexibility for the\n\
    \   machine that adds the option to TCP segments.\n   The HOST_ID option value\
    \ MUST correlate to IP addresses and/or TCP\n   port numbers that were changed\
    \ by the inserting host/device (i.e.,\n   some of the IP address and/or port number\
    \ bits are used to generate\n   the HOST_ID).  Example values that satisfy this\
    \ requirement include\n   the following:\n   Unique ID:  An inserting host/device\
    \ could maintain a pool of locally\n      unique ID values that are dynamically\
    \ mapped to the unique source\n      IP address values in use behind the host/device\
    \ as a result of\n      address sharing.  This ID value would be meaningful only\
    \ within\n      the context of a specific shared IP address due to the local\n\
    \      uniqueness characteristic.  Such an ID value could be smaller than\n  \
    \    an IP address (e.g., 16 bits) in order to conserve TCP option\n      space.\
    \  This option is preferred because it does not increase IP\n      address visibility\
    \ on the forward side of the address-sharing\n      system, and it SHOULD be used\
    \ in cases where receiver-side\n      requirements can be met without direct inclusion\
    \ of the original\n      IP address (e.g., some load-balancing uses).\n   IP Address/Subnet:\
    \  An inserting host/device could simply populate\n      the option value with\
    \ the IP address value in use behind the host/\n      device.  In the case of\
    \ IPv6 addresses, it could be difficult to\n      include the full address due\
    \ to TCP option space constraints, so\n      the value would likely need to provide\
    \ only a portion of the\n      address (e.g., the first 64 bits).\n   IP Address\
    \ and TCP Port:  Some networks share public IP addresses\n      among multiple\
    \ subscribers with a portion of the TCP port number\n      space being assigned\
    \ to each subscriber [RFC6346].  When such a\n      system is behind an address-sharing\
    \ host/device, inclusion of both\n      the IP address and the TCP port number\
    \ will more uniquely identify\n      the sending host than just the IP address\
    \ on its own.\n   When multiple host identifiers are necessary (e.g., an IP address\
    \ and\n   a port number), the HOST_ID option is included multiple times within\n\
    \   the packet, once for each identifier.  While this approach\n   significantly\
    \ increases option space utilization when multiple\n   identifiers are included,\
    \ cases where only a single identifier is\n   included are expected to be more\
    \ common; thus, it is beneficial to\n   optimize for those cases.  Note that some\
    \ middleboxes might reorder\n   TCP options, so this method could be problematic\
    \ if such a middlebox\n   is in-path between the address-sharing system and the\
    \ receiver.  This\n   has not proven to be a problem for existing use cases.\n\
    \   See Section 8 for discussion of privacy considerations related to\n   selection\
    \ of HOST_ID values.\n"
- title: 4.2.  Sending Host Requirements
  contents:
  - "4.2.  Sending Host Requirements\n   The HOST_ID option MUST only be added by\
    \ the sending host or any\n   device involved in the forwarding path that changes\
    \ IP addresses and/\n   or TCP port numbers (e.g., NAT44 [RFC3022], L2-Aware NAT,\
    \ DS-Lite\n   Address Family Transition Router (AFTR) [RFC6333], IPv6-to-IPv6\n\
    \   Network Prefix Translation (NPTv6) [RFC6296], NAT64 [RFC6146], Dual-\n   Stack\
    \ Extra Lite [RFC6619], TCP Proxy, etc.).  The HOST_ID option\n   MUST NOT be\
    \ added or modified en route by any device that does not\n   modify IP addresses\
    \ and/or TCP port numbers.\n   The sending host or intermediary device cannot\
    \ determine whether the\n   option value is used in a stateful manner by the receiver,\
    \ nor can it\n   determine whether SYN cookies are in use by the receiver.  For\
    \ this\n   reason, the option MUST be included in all segments, both SYN and\n\
    \   non-SYN segments, until return segments from the receiver positively\n   indicate\
    \ that the TCP connection is fully established on the receiver\n   (e.g., the\
    \ return segment either includes or acknowledges data).\n"
- title: 4.2.1.  Alternative SYN Cookie Support
  contents:
  - "4.2.1.  Alternative SYN Cookie Support\n   The authors have also considered an\
    \ alternative approach to SYN\n   cookie support in which the receiving host (i.e.,\
    \ the host that\n   accepts the TCP connection) echoes the option back to the\
    \ sender in\n   the SYN/ACK segment when a SYN cookie is being sent.  This would\n\
    \   allow the host sending HOST_ID to determine whether further inclusion\n  \
    \ of the option is necessary.  This approach would have the benefit of\n   not\
    \ requiring inclusion of the option in non-SYN segments if SYN\n   cookies had\
    \ not been used.  Unfortunately, this approach fails if the\n   responding host\
    \ itself does not support the option, since an\n   intermediate node would have\
    \ no way to determine that SYN cookies had\n   been used.\n"
- title: 4.2.2.  Persistent TCP Connections
  contents:
  - "4.2.2.  Persistent TCP Connections\n   Some types of middleboxes (e.g., application\
    \ proxy) open and maintain\n   persistent TCP connections to regularly visited\
    \ destinations in order\n   to minimize the burden of connection establishment.\
    \  Such middleboxes\n   might use a single persistent TCP connection for multiple\
    \ different\n   client hosts over the life of the persistent connection.\n   This\
    \ specification does not attempt to support the use of persistent\n   TCP connections\
    \ for multiple client hosts due to the perceived\n   complexity of providing such\
    \ support.  Instead, the HOST_ID option is\n   only allowed to be used at connection\
    \ initiation.  An inserting host/\n   device that supports both the HOST_ID option\
    \ and multi-client\n   persistent TCP connections MUST NOT apply the HOST_ID option\
    \ to TCP\n   connections that could be used for multiple clients over the life\
    \ of\n   the connection.  If the HOST_ID option was sent during connection\n \
    \  initiation, the inserting host/device MUST NOT reuse the connection\n   for\
    \ data flows originating from a client that would require a\n   different HOST_ID\
    \ value.\n"
- title: 4.2.3.  Packet Fragmentation
  contents:
  - "4.2.3.  Packet Fragmentation\n   In order to avoid the overhead associated with\
    \ in-path IP\n   fragmentation, it is desirable for the inserting host/device\
    \ to avoid\n   including the HOST_ID option when IP fragmentation might be required.\n\
    \   This is not a firm requirement though, because the HOST_ID option is\n   only\
    \ included in the first few packets of a TCP connection; thus,\n   associated\
    \ IP fragmentation will generally have minimal impact.  The\n   option SHOULD\
    \ NOT be included in packets if the resulting packet\n   would require local fragmentation.\n\
    \   It can be difficult to determine whether local fragmentation would be\n  \
    \ required.  For example, in cases where multiple interfaces with\n   different\
    \ MTUs are in use, a local routing decision has to be made\n   before the MTU\
    \ can be determined, and in some systems, this decision\n   could be made after\
    \ TCP option handling is complete.  Additionally,\n   it could be true that inclusion\
    \ of the option causes the packet to\n   violate the path's MTU but the path's\
    \ MTU has not been learned yet on\n   the sending host/device.\n   In existing\
    \ deployed systems, the impact of IP fragmentation that\n   results from use of\
    \ the option has been minimal.\n"
- title: 4.3.  Multiple In-Path HOST_ID Senders
  contents:
  - "4.3.  Multiple In-Path HOST_ID Senders\n   The possibility exists that there\
    \ could be multiple in-path hosts/\n   devices configured to insert the HOST_ID\
    \ option.  For example, the\n   client's TCP packets might first traverse a CGN\
    \ device on their way\n   to the edge of a public Internet overlay network.  In\
    \ order for the\n   HOST_ID value to most uniquely identify the sender, it needs\
    \ to\n   represent both the identity observed by the CGN device (the\n   subscriber's\
    \ internal IP address, e.g., Shared Address Space\n   [RFC6598]) and the identity\
    \ observed by the overlay network (the\n   shared address of the CGN device).\
    \  The mechanism for handling the\n   received HOST_ID value could vary depending\
    \ upon the nature of the\n   new HOST_ID value to be inserted, as described below.\n\
    \   The problem of multiple in-path HOST_ID senders has not been observed\n  \
    \ in existing deployed systems.  For this reason, existing\n   implementations\
    \ do not consistently support this scenario.  Some\n   systems do not propagate\
    \ forward the received HOST_ID option value in\n   any way, while other systems\
    \ follow the guidance described below.\n   An inserting host/device that uses\
    \ the received packet's source IP\n   address as the HOST_ID value (possibly along\
    \ with the port) MUST\n   propagate forward the HOST_ID value(s) from the received\
    \ packet,\n   since the source IP address and port only represent the previous\n\
    \   in-path address-sharing device and do not represent the original\n   sender.\
    \  In the CGN-plus-overlay example, this means that the overlay\n   will include\
    \ both the CGN's HOST_ID value(s) and a HOST_ID with the\n   source IP address\
    \ received by the overlay.\n   An inserting host/device that sends a unique ID\
    \ (as described in\n   Section 4.1) has two options for how to handle the HOST_ID\
    \ value(s)\n   from the received packet:\n   1.  A host/device that sends a unique\
    \ ID MAY strip the received\n       HOST_ID option and insert its own option,\
    \ provided that it uses\n       the received HOST_ID value as a differentiator\
    \ for selecting the\n       unique ID.  What this means in the CGN-plus-overlay\
    \ example above\n       is that the overlay is allowed to drop the HOST_ID value\
    \ inserted\n       by the CGN provided that the HOST_ID value selected by the\n\
    \       overlay represents both the CGN itself and the HOST_ID value\n       inserted\
    \ by the CGN.\n   2.  A host/device that sends a unique ID MAY instead select\
    \ a unique\n       ID that represents only the previous in-path address-sharing\n\
    \       host/device and propagate forward the HOST_ID value inserted by\n    \
    \   the previous host/device.  In the CGN-plus-overlay example, this\n       means\
    \ that the overlay would include both the CGN's HOST_ID value\n       and a HOST_ID\
    \ with a unique ID of its own that was selected to\n       represent the CGN's\
    \ shared address.\n   An inserting host/device that sends a unique ID MUST use\
    \ one of the\n   above two mechanisms.\n"
- title: 5.  Option Interpretation
  contents:
  - "5.  Option Interpretation\n   Due to the variable nature of the option value,\
    \ it is not possible\n   for the receiving machine to reliably determine the value\
    \ type from\n   the option itself.  For this reason, a receiving host/device SHOULD\n\
    \   interpret the option value as an opaque identifier.\n   This specification\
    \ allows the inserting host/device to provide\n   multiple HOST_ID options.  The\
    \ order of appearance of TCP options\n   could be modified by some middleboxes,\
    \ so receivers SHOULD NOT rely\n   on option order to provide additional meaning\
    \ to the individual\n   options.  Instead, when multiple HOST_ID options are present,\
    \ their\n   values SHOULD be concatenated together in the order in which they\n\
    \   appear in the packet and treated as a single large identifier.\n   For both\
    \ of the receiver requirements discussed above, this\n   specification uses SHOULD\
    \ rather than MUST because reliable\n   interpretation and ordering of options\
    \ could be possible if the\n   inserting host and the interpreting host are under\
    \ common\n   administrative control and integrity-protect communication between\n\
    \   the inserting host and the interpreting host.  Mechanisms for\n   signaling\
    \ the value type(s) and integrity protection are not provided\n   by this specification,\
    \ and in their absence, the receiving host/\n   device MUST interpret the option\
    \ value(s) as a single opaque\n   identifier.\n"
- title: 6.  Interaction with Other TCP Options
  contents:
  - "6.  Interaction with Other TCP Options\n   This section details how the HOST_ID\
    \ option functions in conjunction\n   with other TCP options.\n"
- title: 6.1.  Multipath TCP (MPTCP)
  contents:
  - "6.1.  Multipath TCP (MPTCP)\n   TCP provides for a maximum of 40 octets for TCP\
    \ options.  As\n   discussed in Appendix A of MPTCP [RFC6824], a typical SYN from\n\
    \   modern, popular operating systems contains several TCP options (MSS\n   (Maximum\
    \ Segment Size), window scale, SACK (selective acknowledgment)\n   permitted,\
    \ and timestamp), which consume 19-24 octets depending on\n   word alignment of\
    \ the options.  The initial SYN from a multipath TCP\n   client would consume\
    \ an additional 16 octets.\n   HOST_ID needs at least 6 octets to be useful, so\
    \ 9-21 octets are\n   sufficient for many scenarios that benefit from HOST_ID.\
    \  However, 4\n   octets are not enough space for the HOST_ID option.  Thus, a\
    \ TCP SYN\n   containing all the typical TCP options (MSS, window scale, SACK\n\
    \   permitted, and timestamp) and also containing multipath capable or\n   multipath\
    \ join as well as being word-aligned has insufficient space\n   to accommodate\
    \ HOST_ID.  This means something has to give.  The\n   choices are either to avoid\
    \ word alignment in that case (freeing 5\n   octets) or avoid adding the HOST_ID\
    \ option.  Each of these approaches\n   is used in existing implementations and\
    \ has been deemed acceptable\n   for the associated use case.\n"
- title: 6.2.  Authentication Option (TCP-AO)
  contents:
  - "6.2.  Authentication Option (TCP-AO)\n   The TCP Authentication Option (TCP-AO)\
    \ [RFC5925] is incompatible with\n   address sharing due to the fact that it provides\
    \ integrity protection\n   of the source IP address.  For this reason, the only\
    \ use cases where\n   it makes sense to combine TCP-AO and HOST_ID are those where\
    \ the TCP-\n   AO-NAT extension [RFC6978] is in use.  Injecting a HOST_ID TCP\
    \ option\n   does not interfere with the use of TCP-AO-NAT because the TCP options\n\
    \   are not included in the Message Authentication Code (MAC)\n   calculation.\n"
- title: 6.3.  TCP Fast Open (TFO)
  contents:
  - "6.3.  TCP Fast Open (TFO)\n   The TFO option [RFC7413] uses a zero-length cookie\
    \ (total option\n   length is 2 bytes) to request a TFO cookie for use on future\n\
    \   connections.  The server-generated TFO cookie is required to be at\n   least\
    \ 4 bytes long and allowed to be as long as 16 bytes (total\n   option length\
    \ is 6 to 18 bytes).  The cookie request form of the\n   option leaves enough\
    \ room available in a SYN packet with the most\n   commonly used options to accommodate\
    \ the HOST_ID option, but a valid\n   TFO cookie length longer than 13 bytes would\
    \ prevent even the minimal\n   6-byte HOST_ID option from being included in the\
    \ header.\n   There are multiple possibilities for allowing TFO and HOST_ID to\
    \ be\n   supported for the same connection, including:\n   o  If the TFO implementation\
    \ allows the cookie size to be\n      configurable, the configured cookie size\
    \ can be specifically\n      selected to leave enough option space available in\
    \ a typical TFO\n      SYN packet to allow inclusion of the HOST_ID option.\n\
    \   o  If the TFO implementation provides explicit support for the\n      HOST_ID\
    \ option, it can be designed to use a shorter cookie length\n      when the HOST_ID\
    \ option is present in the TFO cookie request SYN.\n   Reducing the TFO cookie\
    \ size in order to include the HOST_ID option\n   could have unacceptable security\
    \ implications, so existing deployed\n   systems that use the HOST_ID option consider\
    \ TFO and HOST_ID to be\n   mutually exclusive and do not support the use of both\
    \ options on the\n   same TCP connection.\n   It should also be noted that the\
    \ presence of data in a TFO SYN\n   increases the likelihood that there will be\
    \ no space available in the\n   SYN packet to support inclusion of the HOST_ID\
    \ option without IP\n   fragmentation, even if there is enough room in the TCP\
    \ option space.\n   This is an additional reason that the existing system considers\
    \ TFO\n   and HOST_ID to be mutually exclusive.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security (including privacy) considerations common\
    \ to all HOST_ID\n   solutions are discussed in [RFC6967].\n   The content of\
    \ the HOST_ID option SHOULD NOT be used for purposes\n   that require a trust\
    \ relationship between the sender and the receiver\n   (e.g., billing and/or subscriber\
    \ policy enforcement).  This\n   requirement uses SHOULD rather than MUST because\
    \ reliable\n   interpretation of options could be possible if the inserting host\
    \ and\n   the interpreting host are under common administrative control and\n\
    \   integrity-protect communication between the inserting host and the\n   interpreting\
    \ host.  Mechanisms for signaling the value type(s) and\n   integrity protection\
    \ are not provided by this specification, and in\n   their absence, the receiving\
    \ host/device MUST NOT use the HOST_ID\n   value for purposes that require a trust\
    \ relationship.\n   Note that the above trust requirement applies equally to HOST_ID\n\
    \   option values propagated forward from a previous in-path host as\n   described\
    \ in Section 4.3.  In other words, if the trust mechanism\n   does not apply to\
    \ all option values in the packet, then none of the\n   HOST_ID values can be\
    \ considered trusted, and the receiving host/\n   device MUST NOT use any of the\
    \ HOST_ID values for purposes that\n   require a trust relationship.  An inserting\
    \ host/device that has such\n   a trust relationship MUST NOT propagate forward\
    \ an untrusted HOST_ID\n   in such a way as to allow it to be considered trusted.\n\
    \   When the receiving network uses the values provided by the option in\n   a\
    \ way that does not require trust (e.g., maintaining session affinity\n   in a\
    \ load-balancing system), then use of a mechanism to enforce the\n   trust relationship\
    \ is OPTIONAL.\n"
- title: 8.  Privacy Considerations
  contents:
  - "8.  Privacy Considerations\n   Sending a TCP SYN across the public Internet necessarily\
    \ discloses\n   the public IP address of the sending host.  When an intermediate\n\
    \   address-sharing device is deployed on the public Internet, anonymity\n   of\
    \ the hosts using the device will be increased, with hosts\n   represented by\
    \ multiple source IP addresses on the ingress side of\n   the device using a single\
    \ source IP address on the egress side.  The\n   HOST_ID TCP option removes that\
    \ increased anonymity, taking\n   information that was already visible in TCP\
    \ packets on the public\n   Internet on the ingress side of the address-sharing\
    \ device and making\n   it available on the egress side of the device as well.\
    \  In some\n   cases, an explicit purpose of the address-sharing device is\n \
    \  anonymity, in which case use of the HOST_ID TCP option would be\n   incompatible\
    \ with the purpose of the device.\n   A NAT device used to provide interoperability\
    \ between a local area\n   network (LAN) using private [RFC1918] IP addresses\
    \ and the public\n   Internet is sometimes specifically intended to provide anonymity\
    \ for\n   the LAN clients as described in the above paragraph.  For this\n   reason,\
    \ address-sharing devices at the border between a private LAN\n   and the public\
    \ Internet MUST NOT insert the HOST_ID option.\n   The HOST_ID option MUST NOT\
    \ be used to provide client geographic or\n   network location information that\
    \ was not publicly visible in IP\n   packets for the TCP flows processed by the\
    \ inserting host.  For\n   example, the client's IP address MAY be used as the\
    \ HOST_ID option\n   value, but any geographic or network location information\
    \ derived\n   from the client's IP address MUST NOT be used as the HOST_ID value.\n\
    \   The HOST_ID option MAY provide differentiating information that is\n   locally\
    \ unique such that individual TCP flows processed by the\n   inserting host can\
    \ be reliably identified.  The HOST_ID option MUST\n   NOT provide client identification\
    \ information that was not publicly\n   visible in IP packets for the TCP flows\
    \ processed by the inserting\n   host, such as subscriber information linked to\
    \ the IP address.\n   The HOST_ID value MUST be changed whenever the subscriber\
    \ IP address\n   changes.  This requirement ensures that the HOST_ID option does\
    \ not\n   introduce a new globally unique identifier that persists across\n  \
    \ subscriber IP address changes.\n   The HOST_ID option MUST be stripped from\
    \ IP packets traversing\n   middleboxes that provide network-based anonymity services.\n"
- title: 9.  Pervasive Monitoring (PM) Considerations
  contents:
  - "9.  Pervasive Monitoring (PM) Considerations\n   [RFC7258] provides the following\
    \ guidance: \"Those developing IETF\n   specifications need to be able to describe\
    \ how they have considered\n   PM, and, if the attack is relevant to the work\
    \ to be published, be\n   able to justify related design decisions.\"  Legitimate\
    \ concerns about\n   host identification have been raised within the IETF.  The\
    \ authors of\n   this memo have attempted to address those concerns by providing\n\
    \   details about the nature of the HOST_ID values and the types of\n   middleboxes\
    \ that should and should not include the HOST_ID option in\n   TCP headers, which\
    \ describes limitations already imposed by existing\n   deployed systems.  This\
    \ section is intended to highlight some\n   particularly important aspects of\
    \ this design and the related\n   guidance/limitations that are relevant to the\
    \ pervasive monitoring\n   discussion.\n   When a generated identifier is used,\
    \ this document prohibits the\n   address-sharing device from using globally unique\
    \ or permanent\n   identifiers.  Only locally unique identifiers are allowed.\
    \  As with\n   persistent IP addresses, persistent HOST_ID values could facilitate\n\
    \   user tracking and are therefore prohibited.  The specific\n   requirements\
    \ for permissible HOST_ID values are discussed in Sections\n   8 and 4.1.\n  \
    \ This specification does not target exposing a host beyond what the\n   original\
    \ packet, issued from that host, would have already exposed on\n   the public\
    \ Internet without introduction of the option.  The option\n   is intended only\
    \ to carry forward information that was conveyed to\n   the address-sharing device\
    \ in the original packet, and HOST_ID option\n   values that do not match this\
    \ description are prohibited by\n   requirements discussed in Section 8.  This\
    \ design does not allow the\n   HOST_ID option to carry personally identifiable\
    \ information,\n   geographic location identifiers, or any other information that\
    \ is not\n   available in the wire format of the associated TCP/IP headers.\n\
    \   This document's guidance on option values is followed in the existing\n  \
    \ deployed system.  Thus, the volatility of the information conveyed in\n   a\
    \ HOST_ID option is similar to that of the public, subscriber IP\n   address.\
    \  A distinct HOST_ID is used by the address-sharing function\n   when the host\
    \ reboots or gets a new public IP address from the\n   subscriber network.\n \
    \  The described TCP option allows network identification to a similar\n   level\
    \ as the first 64 bits of an IPv6 address.  That is, the server\n   can use the\
    \ bits of the TCP option to help identify a host behind an\n   address-sharing\
    \ device, in much the same way the server would use the\n   host's IPv6 network\
    \ address if the client and server were using IPv6\n   end to end.\n   Some address-sharing\
    \ middleboxes on the public Internet have the\n   express intention of providing\
    \ originator anonymity.  Publication of\n   this document can help such middleboxes\
    \ recognize the associated risk\n   and take action to mitigate it (e.g., by stripping\
    \ or modifying the\n   option value).\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   This document specifies a new TCP option (HOST_ID)\
    \ that uses the\n   shared experimental options format [RFC6994], with ExID in\
    \ network-\n   standard byte order.  IANA has registered HOST_ID (0x0348) in the\n\
    \   \"TCP Experimental Option Experiment Identifiers (TCP ExIDs)\"\n   registry.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC793]   Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n              RFC 793, DOI 10.17487/RFC0793, September 1981,\n\
    \              <http://www.rfc-editor.org/info/rfc793>.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC4727]  Fenner, B., \"\
    Experimental Values In IPv4, IPv6, ICMPv4,\n              ICMPv6, UDP, and TCP\
    \ Headers\", RFC 4727,\n              DOI 10.17487/RFC4727, November 2006,\n \
    \             <http://www.rfc-editor.org/info/rfc4727>.\n   [RFC5742]  Alvestrand,\
    \ H. and R. Housley, \"IESG Procedures for\n              Handling of Independent\
    \ and IRTF Stream Submissions\",\n              BCP 92, RFC 5742, DOI 10.17487/RFC5742,\
    \ December 2009,\n              <http://www.rfc-editor.org/info/rfc5742>.\n  \
    \ [RFC6994]  Touch, J., \"Shared Use of Experimental TCP Options\",\n        \
    \      RFC 6994, DOI 10.17487/RFC6994, August 2013,\n              <http://www.rfc-editor.org/info/rfc6994>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [HOSTID]   Abdo, E., Boucadair, M., and J.\
    \ Queiroz, \"HOST_ID TCP\n              Options: Implementation & Preliminary\
    \ Test Results\", Work\n              in Progress, draft-abdo-hostid-tcpopt-implementation-03,\n\
    \              July 2012.\n   [OVERLAYPATH]\n              Williams, B., \"Overlay\
    \ Path Option for IP and TCP\", Work\n              in Progress, draft-williams-overlaypath-ip-tcp-rfc-04,\n\
    \              June 2013.\n   [REVEAL]   Yourtchenko, A. and D. Wing, \"Revealing\
    \ hosts sharing an\n              IP address using TCP option\", Work in Progress,\n\
    \              draft-wing-nat-reveal-option-03, December 2011.\n   [RFC1918] \
    \ Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.,\n              and\
    \ E. Lear, \"Address Allocation for Private Internets\",\n              BCP 5,\
    \ RFC 1918, DOI 10.17487/RFC1918, February 1996,\n              <http://www.rfc-editor.org/info/rfc1918>.\n\
    \   [RFC1919]  Chatel, M., \"Classical versus Transparent IP Proxies\",\n    \
    \          RFC 1919, DOI 10.17487/RFC1919, March 1996,\n              <http://www.rfc-editor.org/info/rfc1919>.\n\
    \   [RFC3022]  Srisuresh, P. and K. Egevang, \"Traditional IP Network\n      \
    \        Address Translator (Traditional NAT)\", RFC 3022,\n              DOI\
    \ 10.17487/RFC3022, January 2001,\n              <http://www.rfc-editor.org/info/rfc3022>.\n\
    \   [RFC3135]  Border, J., Kojo, M., Griner, J., Montenegro, G., and Z.\n    \
    \          Shelby, \"Performance Enhancing Proxies Intended to\n             \
    \ Mitigate Link-Related Degradations\", RFC 3135,\n              DOI 10.17487/RFC3135,\
    \ June 2001,\n              <http://www.rfc-editor.org/info/rfc3135>.\n   [RFC5925]\
    \  Touch, J., Mankin, A., and R. Bonica, \"The TCP\n              Authentication\
    \ Option\", RFC 5925, DOI 10.17487/RFC5925,\n              June 2010, <http://www.rfc-editor.org/info/rfc5925>.\n\
    \   [RFC6146]  Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful\n   \
    \           NAT64: Network Address and Protocol Translation from IPv6\n      \
    \        Clients to IPv4 Servers\", RFC 6146, DOI 10.17487/RFC6146,\n        \
    \      April 2011, <http://www.rfc-editor.org/info/rfc6146>.\n   [RFC6269]  Ford,\
    \ M., Ed., Boucadair, M., Durand, A., Levis, P., and\n              P. Roberts,\
    \ \"Issues with IP Address Sharing\", RFC 6269,\n              DOI 10.17487/RFC6269,\
    \ June 2011,\n              <http://www.rfc-editor.org/info/rfc6269>.\n   [RFC6296]\
    \  Wasserman, M. and F. Baker, \"IPv6-to-IPv6 Network Prefix\n              Translation\"\
    , RFC 6296, DOI 10.17487/RFC6296, June 2011,\n              <http://www.rfc-editor.org/info/rfc6296>.\n\
    \   [RFC6333]  Durand, A., Droms, R., Woodyatt, J., and Y. Lee, \"Dual-\n    \
    \          Stack Lite Broadband Deployments Following IPv4\n              Exhaustion\"\
    , RFC 6333, DOI 10.17487/RFC6333, August 2011,\n              <http://www.rfc-editor.org/info/rfc6333>.\n\
    \   [RFC6346]  Bush, R., Ed., \"The Address plus Port (A+P) Approach to\n    \
    \          the IPv4 Address Shortage\", RFC 6346,\n              DOI 10.17487/RFC6346,\
    \ August 2011,\n              <http://www.rfc-editor.org/info/rfc6346>.\n   [RFC6598]\
    \  Weil, J., Kuarsingh, V., Donley, C., Liljenstolpe, C., and\n              M.\
    \ Azinger, \"IANA-Reserved IPv4 Prefix for Shared Address\n              Space\"\
    , BCP 153, RFC 6598, DOI 10.17487/RFC6598, April\n              2012, <http://www.rfc-editor.org/info/rfc6598>.\n\
    \   [RFC6619]  Arkko, J., Eggert, L., and M. Townsley, \"Scalable\n          \
    \    Operation of Address Translators with Per-Interface\n              Bindings\"\
    , RFC 6619, DOI 10.17487/RFC6619, June 2012,\n              <http://www.rfc-editor.org/info/rfc6619>.\n\
    \   [RFC6824]  Ford, A., Raiciu, C., Handley, M., and O. Bonaventure,\n      \
    \        \"TCP Extensions for Multipath Operation with Multiple\n            \
    \  Addresses\", RFC 6824, DOI 10.17487/RFC6824, January 2013,\n              <http://www.rfc-editor.org/info/rfc6824>.\n\
    \   [RFC6888]  Perreault, S., Ed., Yamagata, I., Miyakawa, S., Nakagawa,\n   \
    \           A., and H. Ashida, \"Common Requirements for Carrier-Grade\n     \
    \         NATs (CGNs)\", BCP 127, RFC 6888, DOI 10.17487/RFC6888,\n          \
    \    April 2013, <http://www.rfc-editor.org/info/rfc6888>.\n   [RFC6967]  Boucadair,\
    \ M., Touch, J., Levis, P., and R. Penno,\n              \"Analysis of Potential\
    \ Solutions for Revealing a Host\n              Identifier (HOST_ID) in Shared\
    \ Address Deployments\",\n              RFC 6967, DOI 10.17487/RFC6967, June 2013,\n\
    \              <http://www.rfc-editor.org/info/rfc6967>.\n   [RFC6978]  Touch,\
    \ J., \"A TCP Authentication Option Extension for NAT\n              Traversal\"\
    , RFC 6978, DOI 10.17487/RFC6978, July 2013,\n              <http://www.rfc-editor.org/info/rfc6978>.\n\
    \   [RFC7258]  Farrell, S. and H. Tschofenig, \"Pervasive Monitoring Is an\n \
    \             Attack\", BCP 188, RFC 7258, DOI 10.17487/RFC7258, May\n       \
    \       2014, <http://www.rfc-editor.org/info/rfc7258>.\n   [RFC7413]  Cheng,\
    \ Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP\n              Fast Open\"\
    , RFC 7413, DOI 10.17487/RFC7413, December 2014,\n              <http://www.rfc-editor.org/info/rfc7413>.\n\
    \   [RFC7620]  Boucadair, M., Ed., Chatras, B., Reddy, T., Williams, B.,\n   \
    \           and B. Sarikaya, \"Scenarios with Host Identification\n          \
    \    Complications\", RFC 7620, DOI 10.17487/RFC7620, August\n              2015,\
    \ <http://www.rfc-editor.org/info/rfc7620>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Many thanks to W. Eddy, Y. Nishida, T. Reddy, M. Scharf,\
    \ J. Touch,\n   A. Zimmermann, and A. Falk for their comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Brandon Williams\n   Akamai, Inc.\n   8 Cambridge Center\n\
    \   Cambridge, MA  02142\n   United States of America\n   Email: brandon.williams@akamai.com\n\
    \   Mohamed Boucadair\n   Orange\n   Email: mohamed.boucadair@orange.com\n   Dan\
    \ Wing\n   Email: dwing-ietf@fuggles.com\n"
