- title: __initial_text__
  contents:
  - '                           MGCP CAS Packages

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document contains a collection of media gateway Channel\n \
    \  Associated Signaling (CAS) packages for R1 CAS, North American CAS,\n   CAS\
    \ PBX interconnect as well as basic FXO support.  Included are six\n   packages.\
    \  The \"MS\" package covers MF single stage dialing trunks.\n   This includes\
    \ wink start and immediate start PBX DID/DOD trunks as\n   well as basic R1 and\
    \ Feature Group D (FGD) Terminating protocol [3].\n   The \"DT \"package covers\
    \ immediate start and basic DTMF and dial-pulse\n   trunks and the \"BL\" package\
    \ covers the interface to a basic PBX\n   (digital or FXS interface).  In addition\
    \ to the Terminating protocol,\n   there are three other FGD protocols described\
    \ in [3].  These include\n   EAIN and EANA which is covered by the enclosed \"\
    MD\" package and the\n   Operator Service Signaling protocol which is handled\
    \ by the \"MO\"\n   package.  Support for basic FXO interconnect is provided by\
    \ \"DO\"\n   package.\n"
- title: Conventions used in this document
  contents:
  - "Conventions used in this document\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC-2119.\n   This document is being published for the information of the\n\
    \   community.  It describes a protocol that is currently being deployed\n   in\
    \ a number of products.  Implementers should be aware of\n   developments in the\
    \ IETF Megaco Working Group and ITU SG16 who are\n   currently working on a potential\
    \ successor to this protocol.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.0.Introduction ................................................\
    \  3\n   1.1. Functional Partitioning ....................................  3\n\
    \   1.2. CAS Trunk Types ............................................  4\n   1.2.1.\
    \ \"MS\" Package .............................................  5\n   1.2.2. \"\
    DT\" Package .............................................  5\n   1.2.3. \"BL\"\
    \ Package .............................................  6\n   1.2.4. \"DO\" Package\
    \ .............................................  6\n   1.2.5. \"MD\" Package .............................................\
    \  6\n   1.2.6. \"MO\" Package ............................................. \
    \ 7\n   2.0. Event Packages .............................................  7\n\
    \   2.1. Events and Signals for the \"MS\" package ....................  9\n \
    \  2.2. Events and Signals for the \"DT\" package .................... 10\n  \
    \ 2.3. Events and Signals for the \"BL\" package (Basic PBX) ........ 10\n   2.4.\
    \ Events and Signals for the \"DO\" package .................... 11\n   2.5. Events\
    \ and Signals for the \"MD\" package .................... 12\n   2.6. Events and\
    \ Signals for the \"MO\" package .................... 13\n   2.7. Event and Signal\
    \ Descriptions .............................. 13\n   3.0. Hook-State Signals and\
    \ Events .............................. 23\n   3.1. Overview of Approach .......................................\
    \ 23\n   3.2. Suspend/Resume Processing .................................. 23\n\
    \   3.3. Control over Disconnect for E911 ........................... 24\n   3.3.\
    \ Release and Release Complete ............................... 24\n   3.4. Blocking\
    \ CAS Trunks ........................................ 26\n   3.5. Summary of Hook-State\
    \ Events ............................... 26\n   4.0. Glare Handling .............................................\
    \ 27\n   4.1. Glare on MF Bi-directional Wink-start Trunks ............... 27\n\
    \   4.2. Glare Handling - Basic PBX Trunks .......................... 27\n   5.0.\
    \ Example Call Flows ......................................... 28\n   5.1. PBX\
    \ to PBX (\"MS\", \"DT, and \"BL\" packages)................... 28\n   5.1.1.\
    \ Call Setup Flows ......................................... 28\n   5.1.2. Call\
    \ Tear-Down ........................................... 34\n   5.1.2.1. Origination\
    \ End Initiates the Release .................. 35\n   5.1.2.2. Termination End\
    \ Initiates the Release .................. 38\n   5.2. Example Call Flows - \"\
    DO\" package .......................... 40\n   5.2.1. Call Setup Flows .........................................\
    \ 40\n   5.2.2. Call Tear-Down ........................................... 42\n\
    \   5.3. Example Call Setup - \"MD\" Package .......................... 44\n \
    \  5.4. Example Call Setup - \"MO\" Package .......................... 51\n  \
    \ Acknowledgements ................................................ 54\n   References\
    \ ...................................................... 55\n   Author's Address\
    \ ................................................ 55\n   Full Copyright Statement\
    \ ........................................ 56\n"
- title: 1.0.Introduction
  contents:
  - '1.0.Introduction

    '
- title: 1.1. Functional Partitioning
  contents:
  - "1.1. Functional Partitioning\n   There are a number of different possible approaches\
    \ for partitioning\n   the functional responsibility between the Call Agent and\
    \ the Media\n   Gateway:\n    * The Call Agent takes all of the responsibility\
    \ for the CAS state\n      machine giving the media gateway detailed commands\n\
    \    * The media gateway contains the CAS state machine and provides an\n    \
    \  abstract interface to the Call Agent\n   Timing requirements of CAS protocols\
    \ often involve reacting within\n   time intervals measured in tens of milliseconds\
    \ which makes direct\n   control of timing impossible.  The approach used here\
    \ is to allow the\n   media gateway to handle low level CAS protocol and timing\
    \ details\n   where at all possible and have the Call Agent involved only whenever\n\
    \   higher level processing is required.\n   Taking this approach, the ideal situation\
    \ would be to allow the Call\n   Agent to treat as many CAS protocols in a similar\
    \ way, leaving the\n   details to the media gateway.  Example: for an incoming\
    \ MF trunk that\n   involves a single incoming digit string, the Call Agent should\
    \ not\n   care whether this is a wink start trunk or an immediate start trunk\n\
    \   (media gateway should not have to provide the wink-start signal).\n   Some\
    \ goals in partitioning responsibility between the media gateway\n   and media\
    \ gateway:\n    * Minimize the number of interactions between the Call Agent and\
    \ the\n      media gateway.\n    * The media gateway should not have to do digit\
    \ analysis (e.g., to\n      determine that the incoming digits contain carrier\
    \ access\n      information).  This is a Call Agent's responsibility.\n    * Provide\
    \ some reasonable level of abstraction for the Call Agent so\n      that it can\
    \ reuse call flows when possible (e.g., Call Agent\n      should not have to differentiate\
    \ between wink start and immediate\n      start interfaces when only one digit\
    \ string is involved).\n    * The media gateway should take care of the CAS protocol\
    \ (and\n      timeouts) where possible with the Call Agent taking over\n     \
    \ responsibility where the media gateway leaves off.\n   Use of Embedded Notifications:\
    \ Rather than depending on the use of\n   embedded notifications, signals and\
    \ events were defined that had the\n   specific semantics required.  There are\
    \ two reasons for this:\n   a) It allows an abstract interface for the Call Agent\
    \ so that for\n   example, the same incoming call-setup event can be used in the\
    \ case\n   of MF wink start and MF immediate start trunks, presenting a common\n\
    \   interface to the Call Agent even though the semantics at the CAS\n   state-machine\
    \ level are slightly different (i.e., in the MF wink\n   start case, a wink-start\
    \ signal is provided reflexively as a result\n   of an incoming seizure, where\
    \ as in the immediate start case, this is\n   not required).\n   b) Potential\
    \ events that might trigger an embedded notification\n   (e.g., the incoming seizure\
    \ mentioned above) typically needed to be\n   visible to the Call Agent for billing\
    \ anyway.\n   This does not say that embedded notifications cannot be used.  It\n\
    \   simply does not necessitate their use.\n   Out-pulsing Approach: In order\
    \ to provide the semantics for\n   outpulsing, special higher level signals (e.g.,\
    \ \"sup\" for call set-up\n   and \"inf\" for information) are included that contain\
    \ the necessary\n   semantics.\n   Off-hook and On-hook Signals and Events: A\
    \ higher level view of off-\n   hook and on-hook events is taken in order to make\
    \ the interface\n   Q.931-like.  This provides the advantage that:\n    * Similar\
    \ call flows result when dealing with Q.931-based interfaces\n      (e.g., PRI)\n\
    \    * It's more evident (for ease in debug) when looking at message as\n    \
    \  to exactly what is going on without having to refer to previous\n      events\n"
- title: 1.2. CAS Trunk Types
  contents:
  - "1.2. CAS Trunk Types\n   The following describes the types of trunks supported\
    \ by the various\n   packages.  Configuration of the specific trunk type (e.g.,\
    \ wink start\n   versus immediate start) is done within the Media Gateway (MG)\
    \ via\n   provisioning facilities outside the scope of MGCP.  The Call Agent's\n\
    \   responsibility is to support the particular package (i.e., in general\n  \
    \ the Call Agent does not have to differentiate between wink start and\n   immediate\
    \ start, since those differences are taken care of by the\n   MG).  However, the\
    \ Call Agent needs to know which trunks are\n   incoming, outgoing or bi-directional.\n"
- title: 1.2.1. "MS" Package
  contents:
  - "1.2.1. \"MS\" Package\n   The \"MS\" package is used for PBX DID/DOD trunks as\
    \ indicated in the\n   following table.  It is also used for incoming or outgoing\
    \ MF wink\n   start trunks (R1 and FGD Terminating protocol [6]).\n          \
    \ Table 1 MF PBX Trunks\n        --------------------------------------------------\n\
    \       |  Trunk Type    |  Direction (w.r.t. the gateway) |\n        --------------------------------------------------\n\
    \       |MF, wink start  |Incoming - originate from PBX    |\n       |       \
    \         |(the same as FGD terminating     |\n       |                | protocol)\
    \                       |\n       |MF, wink start  |Outgoing - terminate on PBX\
    \      |\n       |MF, wink start  |Bi-directional                   |\n      \
    \ |MF, Immediate   |Incoming (originate from PBX)    |\n       |    start    \
    \   |                                 |\n       |MF, Immediate   |Outgoing (terminate\
    \ on PBX)      |\n       |    start       |                                 |\n\
    \        --------------------------------------------------\n"
- title: 1.2.2. "DT" Package
  contents:
  - "1.2.2. \"DT\" Package\n   DTMF and dial-pulse (DP) trunks (except basic PBX)\
    \ are covered by the\n   \"DT\" package along with the DTMF \"D\" package:\n \
    \       Table 2 DTMF and DP Wink Start and Immediate Start Trunks\n        --------------------------------------------------\n\
    \       |  Trunk Type    |  Direction (w.r.t. the gateway) |\n        --------------------------------------------------\n\
    \       |DTMF, Immediate |Incoming (originate from PBX)    |\n       | start,\
    \ wink    |                                 |\n       | start          |     \
    \                            |\n       |DTMF, Immediate |Outgoing (terminate on\
    \ PBX)      |\n       | start, wink    |                                 |\n \
    \      | start          |                                 |\n        --------------------------------------------------\n"
- title: 1.2.3. "BL" Package
  contents:
  - "1.2.3. \"BL\" Package\n   DTMF and dial-pulse (DP) basic PBX trunks are covered\
    \ by the \"BL\"\n   package - along with the DTMF \"D\" package (essentially this\
    \ is like a\n   \"basic line with no features\") - either digital or FXS trunk\n\
    \   interface:\n          Table 3 Basic FXS Interface\n         --------------------------------------\n\
    \        | Trunk Type    |  Direction           |\n        |               | (w.r.t.\
    \ the gateway) |\n         --------------------------------------\n        |Basic,\
    \ DTMF and |Bi-directional       |\n        |DP, Loop Start  |               \
    \      |\n        |Basic, DTMF and |Bi-directional       |\n        |DP, Ground\
    \ Start|                     |\n         --------------------------------------\n"
- title: 1.2.4. "DO" Package
  contents:
  - "1.2.4. \"DO\" Package\n   The \"DO\" package is used for analog FXO loop-start\
    \ and ground-start\n   analog trunks as indicated in the following table.\n  \
    \         Table 4 FXO analog PBX Trunks\n         --------------------------------------\n\
    \        | Trunk Type    |  Direction           |\n        |               | (w.r.t.\
    \ the gateway) |\n         --------------------------------------\n        |FXO,\
    \ loop-start|Bi-directional        |\n        |FXO, ground-   |Bi-directional\
    \        |\n        |     start     |                      |\n         --------------------------------------\n"
- title: 1.2.5. "MD" Package
  contents:
  - "1.2.5. \"MD\" Package\n   The MD package provides support for North American\
    \ MF Feature Group D\n   EANA and EAIN [3], allowing the Media Gateway to be at\
    \ either the end\n   office, the carrier or the tandem side of the circuit.  The\
    \ CAS\n   Signaling Type column of the following tables is intended to indicate\n\
    \   signaling differences that are of common interest to both the Call\n   Agent\
    \ and Media Gateway.  Configuration information that is only of\n   interest to\
    \ the Media Gateway is not identified.\n           Table 4 Feature Group D MF\
    \ Trunks Supported\n        --------------------------------------------------\n\
    \       |  Trunk Type    |  Direction (w.r.t. the gateway) |\n        --------------------------------------------------\n\
    \       |FGD, EANA       |Outgoing (End Office to Carrier) |\n       |FGD, EANA\
    \       |Incoming (Carrier to End Office) |\n       |FGD, EAIN       |Outgoing\
    \ (End Office to Carrier) |\n       |FGD, EAIN       |Incoming (Carrier to End\
    \ Office) |\n        --------------------------------------------------\n   Note\
    \ that EANA and EAIN signaling may be requested on the same trunk\n   on a call-by-call\
    \ basis.\n"
- title: 1.2.6. "MO" Package
  contents:
  - "1.2.6. \"MO\" Package\n   The \"MO\" package is used for FGD Operator Services\
    \ Signaling,\n   outgoing trunks only.  Feature Group C can also be supported\
    \ by the\n   same interface.\n"
- title: 2.0. Event Packages
  contents:
  - "2.0. Event Packages\n   This section defines the event packages.  The terms \"\
    signal\" and\n   \"event\" are used to differentiate a command from a Call Agent\
    \ to a\n   Media Gateway (\"signal\") from an \"event\" that  is detected by the\n\
    \   Media Gateway and then is \"Notified\" to the Call Agent.\n   Each package\
    \ definition includes a package name, plus the event name\n   codes and the definitions\
    \ for each of the events in the package.  In\n   the tables of events/signals\
    \ for each package, there are five\n   columns:\n      * Code         The package\
    \ unique event code used for the\n                     event/signal.\n      *\
    \ Description  A short description of the event/signal.\n      * Event       \
    \ An \"x\" appears in this column if the event can be\n                     Requested\
    \ by the Call Agent.  Alternatively, one or\n                     more of the\
    \ following symbols may appear:\n        - \"P\" indicating that the event is\
    \ persistent,\n        - \"S\" indicating that the event is an event-state that\
    \ may be\n              audited,\n        - \"C\" indicating that the event/signal\
    \ may be detected/applied\n              on a connection.  If \"C\" is associated\
    \ with an event, this\n              refers to an event that can occur on the\
    \ media stream.\n              However, \"C\" may also be associated with a signal\
    \ (in the\n              signal column), the signal can be requested to sent over\
    \ a\n              connection.\n   Note that the intent of being able to audit\
    \ state (\"S\") in an event\n   in the following packages is to answer one of\
    \ the two questions:\n      1. Has a call been initiated on this line/trunk? For\
    \ example in\n      the packages that follow, call setup initiation is indicated\
    \ by\n      either a \"sup\" event or an \"hd\" (FXS - \"BL\" packages) or in\
    \ the\n      case of the \"DO\" package below (FXO), by the \"rg\" event so that\n\
    \      those events have an \"S\" in the event column indicating that they\n \
    \     are auditable.\n      2. The other question of interest is to know whether\
    \ the telephony\n      leg of the call is in the idle state so that a new call\
    \ can be\n      initiated.  This is indicate by the \"rlc\" (release complete)\n\
    \      event-state for packages that have that event.\n       *  Signal     If\
    \ nothing appears in this column then this event\n                     cannot\
    \ be signaled on request by the Call Agent.\n                     Otherwise, one\
    \ of the following symbols is provided\n                     to identify the type\
    \ of signal:\n        - \"OO\" On/Off signal.  The signal is turned on until commanded\n\
    \               by the Call Agent to turn it off, and vice versa.\n        - \"\
    TO\" Timeout signal.  The signal lasts for a given duration\n               unless\
    \ it is superseded by a new signal or terminated on\n               detection\
    \ of an event.  Default time-out values are\n               supplied.  A value\
    \ of zero indicates that the time-out\n               period is infinite.  The\
    \ provisioning process may alter\n               these default values.\n     \
    \   - \"BR\" Brief signal.  The signal has a short, known duration.\n       *\
    \ Additional info Provides additional information about the\n         event/signal,\
    \ e.g., the default duration of TO signals.\n   Unless otherwise stated, all of\
    \ the events/signals are\n   detected/applied on endpoints and audio generated\
    \ by them is not\n   forwarded on any connection the endpoint may have.  Audio\
    \ generated\n   by events/signals that are detected/applied on a connection will\n\
    \   however be forwarded on the associated connection irrespective of the\n  \
    \ connection mode.\n"
- title: '2.1. Events and Signals for the "MS" package:'
  contents:
  - "2.1. Events and Signals for the \"MS\" package:\n   The following codes are used\
    \ to identify events and signals for the\n   \"MS\" package:\n      Table 5 \"\
    MS\" Package Events and Signals\n ---------------------------------------------------------------------\n"
- title: '|Code|Description       |Event|Signal |Additional Info                |'
  contents:
  - '|Code|Description       |Event|Signal |Additional Info                |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|ans |Call Answer       |  P  |  BR   |                               |'
  contents:
  - '|ans |Call Answer       |  P  |  BR   |                               |

    '
- title: '| bl |Block             |  S  |  BR   |                               |'
  contents:
  - '| bl |Block             |  S  |  BR   |                               |

    '
- title: '| bz |Busy tone         |  -  |  TO   |Time-out = 30 seconds          |'
  contents:
  - '| bz |Busy tone         |  -  |  TO   |Time-out = 30 seconds          |

    '
- title: '|inf |Information Digits|  x  |   -   |                               |'
  contents:
  - '|inf |Information Digits|  x  |   -   |                               |

    '
- title: '| oc |Operation Complete|  x  |   -   |                               |'
  contents:
  - '| oc |Operation Complete|  x  |   -   |                               |

    '
- title: '| of |Operation Fail    |  x  |   -   |                               |'
  contents:
  - '| of |Operation Fail    |  x  |   -   |                               |

    '
- title: '|rel |Release Call      |  P  |  BR   |                               |'
  contents:
  - '|rel |Release Call      |  P  |  BR   |                               |

    '
- title: '|res |Resume call       |  P  |  BR   |                               |'
  contents:
  - '|res |Resume call       |  P  |  BR   |                               |

    '
- title: '|rlc |Release complete  | P,S |  BR   |                               |'
  contents:
  - '|rlc |Release complete  | P,S |  BR   |                               |

    '
- title: '| ro |Reorder tone      |  -  |  TO   |Time-out = 30 seconds          |'
  contents:
  - '| ro |Reorder tone      |  -  |  TO   |Time-out = 30 seconds          |

    '
- title: '| rt |Ringback tone     |  -  |  TO   |Time-out = 180 seconds         |'
  contents:
  - '| rt |Ringback tone     |  -  |  TO   |Time-out = 180 seconds         |

    '
- title: '|sup |Call Setup        | P,S |  TO   |Time-out when signal completes |'
  contents:
  - '|sup |Call Setup        | P,S |  TO   |Time-out when signal completes |

    '
- title: '|    |                  |     |       |out-pulsing                    |'
  contents:
  - '|    |                  |     |       |out-pulsing                    |

    '
- title: '|sus |Suspend call      |  P  |  BR   |                               |'
  contents:
  - "|sus |Suspend call      |  P  |  BR   |                               |\n ---------------------------------------------------------------------\n"
- title: '2.2. Events and Signals for the "DT" package:'
  contents:
  - "2.2. Events and Signals for the \"DT\" package:\n   The following codes are used\
    \ to identify events and signals for the\n   \"DT\" package:\n     Table 6 \"\
    DT\" Package Events and Signals\n ---------------------------------------------------------------------\n"
- title: '|Code|Description       |Event|Signal |Additional Info                |'
  contents:
  - '|Code|Description       |Event|Signal |Additional Info                |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|ans |Call Answer       |  P  |  BR   |                               |'
  contents:
  - '|ans |Call Answer       |  P  |  BR   |                               |

    '
- title: '| bl |Block             |  S  |  BR   |                               |'
  contents:
  - '| bl |Block             |  S  |  BR   |                               |

    '
- title: '| bz |Busy tone         |  -  |  TO   |Time-out = 30 seconds          |'
  contents:
  - '| bz |Busy tone         |  -  |  TO   |Time-out = 30 seconds          |

    '
- title: '| dl |Dial tone         |  -  |  TO   |Time-out = 16 seconds          |'
  contents:
  - '| dl |Dial tone         |  -  |  TO   |Time-out = 16 seconds          |

    '
- title: '| oc |Operation Complete|  x  |  -    |                               |'
  contents:
  - '| oc |Operation Complete|  x  |  -    |                               |

    '
- title: '| of |Operation Fail    |  x  |  -    |                               |'
  contents:
  - '| of |Operation Fail    |  x  |  -    |                               |

    '
- title: '|rel |Release Call      |  P  |  BR   |                               |'
  contents:
  - '|rel |Release Call      |  P  |  BR   |                               |

    '
- title: '|res |Resume call       |  P  |  BR   |                               |'
  contents:
  - '|res |Resume call       |  P  |  BR   |                               |

    '
- title: '|rlc |Release complete  | P,S |  BR   |                               |'
  contents:
  - '|rlc |Release complete  | P,S |  BR   |                               |

    '
- title: '| ro |Reorder tone      |  -  |  TO   |Time-out = 30 seconds          |'
  contents:
  - '| ro |Reorder tone      |  -  |  TO   |Time-out = 30 seconds          |

    '
- title: '| rt |Ringback tone     |  -  |  TO   |Time-out = 180 seconds         |'
  contents:
  - '| rt |Ringback tone     |  -  |  TO   |Time-out = 180 seconds         |

    '
- title: '|sup |Call Setup        | P,S |  TO   |Time-out when signals completed|'
  contents:
  - '|sup |Call Setup        | P,S |  TO   |Time-out when signals completed|

    '
- title: '|    |                  |     |       |out-pulsing                    |'
  contents:
  - '|    |                  |     |       |out-pulsing                    |

    '
- title: '|sus |Suspend call      |  P  |  BR   |                               |'
  contents:
  - "|sus |Suspend call      |  P  |  BR   |                               |\n ---------------------------------------------------------------------\n"
- title: 2.3. Events and Signals for the "BL" package (Basic PBX)
  contents:
  - "2.3. Events and Signals for the \"BL\" package (Basic PBX)\n   The following\
    \ codes are used to identify events and signals for the\n   \"BL\" package.  This\
    \ package looks very much like a simplified line\n   package:\n          Table\
    \ 7 \"BL\" Package Events and Signals\n ---------------------------------------------------------------------\n"
- title: '|Code|Description       |Event|Signal |Additional Info                |'
  contents:
  - '|Code|Description       |Event|Signal |Additional Info                |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '| bz |Busy tone         |  -  |  TO   |Time-out = 30 seconds          |'
  contents:
  - '| bz |Busy tone         |  -  |  TO   |Time-out = 30 seconds          |

    '
- title: '| dl |Dial tone         |  -  |  TO   |Time-out = 16 seconds          |'
  contents:
  - '| dl |Dial tone         |  -  |  TO   |Time-out = 16 seconds          |

    '
- title: '| hd |Off-hook          | P,S |   -   |                               |'
  contents:
  - '| hd |Off-hook          | P,S |   -   |                               |

    '
- title: '| hf |Flash hook        |  P  |   -   |                               |'
  contents:
  - '| hf |Flash hook        |  P  |   -   |                               |

    '
- title: '| hu |On-hook           | P,S |   -   |                               |'
  contents:
  - '| hu |On-hook           | P,S |   -   |                               |

    '
- title: '| oc |Operation Complete|  x  |   -   |                               |'
  contents:
  - '| oc |Operation Complete|  x  |   -   |                               |

    '
- title: '| of |Operation Fail    |  x  |   -   |                               |'
  contents:
  - '| of |Operation Fail    |  x  |   -   |                               |

    '
- title: '| rel|Release           |  -  |  BR   |                               |'
  contents:
  - '| rel|Release           |  -  |  BR   |                               |

    '
- title: '| rg |Ringing           |  -  |  TO   |Time-out = 180 seconds         |'
  contents:
  - '| rg |Ringing           |  -  |  TO   |Time-out = 180 seconds         |

    '
- title: '| ro |Reorder tone      |  -  |  TO   |Time-out = 30 seconds          |'
  contents:
  - '| ro |Reorder tone      |  -  |  TO   |Time-out = 30 seconds          |

    '
- title: '| rt |Ringback tone     |  -  | C,TO  |Time-out = 180 seconds         |'
  contents:
  - "| rt |Ringback tone     |  -  | C,TO  |Time-out = 180 seconds         |\n ---------------------------------------------------------------------\n"
- title: '2.4. Events and Signals for the "DO" package:'
  contents:
  - "2.4. Events and Signals for the \"DO\" package:\n   The following codes are used\
    \ to identify events and signals for the\n   \"DO\" package:\n     Table 8 \"\
    DO\" Package Events and Signals\n ---------------------------------------------------------------------\n"
- title: '|Code|Description       |Event|Signal |Additional Info                |'
  contents:
  - '|Code|Description       |Event|Signal |Additional Info                |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '| ci |Caller id         |  x  |   -   |                               |'
  contents:
  - '| ci |Caller id         |  x  |   -   |                               |

    '
- title: '| hd |Offhook           |  -  |  BR   |                               |'
  contents:
  - '| hd |Offhook           |  -  |  BR   |                               |

    '
- title: '| hf |Hook flash        |  -  |  BR   |                               |'
  contents:
  - '| hf |Hook flash        |  -  |  BR   |                               |

    '
- title: '| hu |Onhook            |  -  |  BR   |                               |'
  contents:
  - '| hu |Onhook            |  -  |  BR   |                               |

    '
- title: '| oc |Operation Complete|  x  |   -   |                               |'
  contents:
  - '| oc |Operation Complete|  x  |   -   |                               |

    '
- title: '| of |Operation Fail    |  x  |   -   |                               |'
  contents:
  - '| of |Operation Fail    |  x  |   -   |                               |

    '
- title: '|rel |Release call      |  P  |   -   |                               |'
  contents:
  - '|rel |Release call      |  P  |   -   |                               |

    '
- title: '| rg |Ringing           | P,S |   -   |                               |'
  contents:
  - '| rg |Ringing           | P,S |   -   |                               |

    '
- title: '|rlc |Release complete  | P,S |   -   |                               |'
  contents:
  - '|rlc |Release complete  | P,S |   -   |                               |

    '
- title: '|sup |Call Setup        |  -  |  TO   |Time-out when signal completes |'
  contents:
  - '|sup |Call Setup        |  -  |  TO   |Time-out when signal completes |

    '
- title: '|    |                  |     |       | out-pulsing                   |'
  contents:
  - "|    |                  |     |       | out-pulsing                   |\n ---------------------------------------------------------------------\n"
- title: '2.5. Events and Signals for the "MD" package:'
  contents:
  - "2.5. Events and Signals for the \"MD\" package:\n   The following codes are used\
    \ to identify events and signals for the\n   \"MD\" package.\n    Table 9 \"MD\"\
    \ Package Events and Signals\n ---------------------------------------------------------------------\n"
- title: '|Code|Description       |Event|Signal |Additional Info                |'
  contents:
  - '|Code|Description       |Event|Signal |Additional Info                |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|ans |Call Answer       |  P  |  BR   |                               |'
  contents:
  - '|ans |Call Answer       |  P  |  BR   |                               |

    '
- title: '|awk |Acknowledge wink  |  P  |  BR   |                               |'
  contents:
  - '|awk |Acknowledge wink  |  P  |  BR   |                               |

    '
- title: '| bl |Call Block        |  S  |  BR   |                               |'
  contents:
  - '| bl |Call Block        |  S  |  BR   |                               |

    '
- title: '| bz |Busy tone         |  -  |  TO   |Time-out = 30 seconds          |'
  contents:
  - '| bz |Busy tone         |  -  |  TO   |Time-out = 30 seconds          |

    '
- title: '|cwk |Continue Wink     |  -  |  BR   |                               |'
  contents:
  - '|cwk |Continue Wink     |  -  |  BR   |                               |

    '
- title: '|inf |Information Digits|  x  |  TO   |Time-out when signals completed|'
  contents:
  - '|inf |Information Digits|  x  |  TO   |Time-out when signals completed|

    '
- title: '|    |                  |     |       | out-pulsing                   |'
  contents:
  - '|    |                  |     |       | out-pulsing                   |

    '
- title: '| oc |Operation Complete|  x  |   -   |                               |'
  contents:
  - '| oc |Operation Complete|  x  |   -   |                               |

    '
- title: '| of |Operation Fail    |  x  |   -   |                               |'
  contents:
  - '| of |Operation Fail    |  x  |   -   |                               |

    '
- title: '|rel |Release Call      |  P  |  BR   |                               |'
  contents:
  - '|rel |Release Call      |  P  |  BR   |                               |

    '
- title: '|res |Resume call       |  P  |  BR   |                               |'
  contents:
  - '|res |Resume call       |  P  |  BR   |                               |

    '
- title: '|rlc |Release complete  | P,S |  BR   |                               |'
  contents:
  - '|rlc |Release complete  | P,S |  BR   |                               |

    '
- title: '| ro |Reorder tone      |  -  |  TO   |Time-out = 30 seconds          |'
  contents:
  - '| ro |Reorder tone      |  -  |  TO   |Time-out = 30 seconds          |

    '
- title: '| rt |Ringback tone     |  -  |  TO   |Time-out = 180 seconds         |'
  contents:
  - '| rt |Ringback tone     |  -  |  TO   |Time-out = 180 seconds         |

    '
- title: '|sup |Call Setup        | P,S |  TO   |Time-out when signals completed|'
  contents:
  - '|sup |Call Setup        | P,S |  TO   |Time-out when signals completed|

    '
- title: '|    |                  |     |       | out-pulsing                   |'
  contents:
  - '|    |                  |     |       | out-pulsing                   |

    '
- title: '|sus |Suspend call      |  P  |  BR   |                               |'
  contents:
  - '|sus |Suspend call      |  P  |  BR   |                               |

    '
- title: '|swk |Start Wink        |  x  |   -   |                               |'
  contents:
  - "|swk |Start Wink        |  x  |   -   |                               |\n ---------------------------------------------------------------------\n"
- title: '2.6. Events and Signals for the "MO" package:'
  contents:
  - "2.6. Events and Signals for the \"MO\" package:\n   The following codes are used\
    \ to identify events and signals for the\n   \"MO\" package.\n    Table 10 \"\
    MO\" Package Events and Signals\n ---------------------------------------------------------------------\n"
- title: '|Code|Description       |Event|Signal |Additional Info                |'
  contents:
  - '|Code|Description       |Event|Signal |Additional Info                |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|ans |Call Answer !Note |  P  |   -   |                               |'
  contents:
  - '|ans |Call Answer !Note |  P  |   -   |                               |

    '
- title: '| oc |Operation Complete|  x  |   -   |                               |'
  contents:
  - '| oc |Operation Complete|  x  |   -   |                               |

    '
- title: '| of |Operation Fail    |  x  |   -   |                               |'
  contents:
  - '| of |Operation Fail    |  x  |   -   |                               |

    '
- title: '|orbk|Operator Ringback |  x  |   -   |                               |'
  contents:
  - '|orbk|Operator Ringback |  x  |   -   |                               |

    '
- title: '|rbz |Reverse make busy | P,S |   -   |                               |'
  contents:
  - '|rbz |Reverse make busy | P,S |   -   |                               |

    '
- title: '|rcl |Operator Recall   |  -  |  BR   |                               |'
  contents:
  - '|rcl |Operator Recall   |  -  |  BR   |                               |

    '
- title: '|rel |Release Call      |  P  |  BR   |                               |'
  contents:
  - '|rel |Release Call      |  P  |  BR   |                               |

    '
- title: '|res |Resume Call       |  -  |  BR   |                               |'
  contents:
  - '|res |Resume Call       |  -  |  BR   |                               |

    '
- title: '|rlc |Release complete  | P,S |  BR   |                               |'
  contents:
  - '|rlc |Release complete  | P,S |  BR   |                               |

    '
- title: '|sup |Call Setup        |  -  |  TO   |                               |'
  contents:
  - '|sup |Call Setup        |  -  |  TO   |                               |

    '
- title: '|sus |Suspend Call      |  -  |  BR   |                               |'
  contents:
  - '|sus |Suspend Call      |  -  |  BR   |                               |

    '
- title: '|swk |Start Wink        |  x  |   -   |                               |'
  contents:
  - "|swk |Start Wink        |  x  |   -   |                               |\n ---------------------------------------------------------------------\n"
- title: '!Note: There is no indication that the operator answered the call.'
  contents:
  - "!Note: There is no indication that the operator answered the call.\n       The\
    \ \"ans\" event is an indication that off-hook was received\n       from the far\
    \ end which simply indicates that the destination\n       address was received\
    \ properly and the calling number is in the\n       process of being outpulsed.\n"
- title: 2.7. Event and Signal Descriptions
  contents:
  - "2.7. Event and Signal Descriptions\n   The following provides a list of the event\
    \ and signal descriptions.\n   The event/signal name appears in parenthesis followed\
    \ by the\n   corresponding Event + Signal attribute code plus a list of the\n\
    \   packages in which the event/signal occurs.\n   Call answer (ans; P + BR; DT,MD,MS,MO):\
    \ Off-hook signal normally\n   indicates that the call has been answered and that\
    \ cut-through has\n   been established.  The exception is the \"MO\" package where\
    \ it simply\n   indicates that off-hook was received and the calling number is\
    \ in the\n   process of being sent (i.e., there is no event available to indicate\n\
    \   that the operator answered the call for operator services signaling).\n  \
    \ Acknowledgement Wink (awk; P + BR; MD): This event is only applicable\n   to\
    \ the \"md\" package.  It provides an indication that all digits have\n   been\
    \ received correctly.  In an outgoing trunk, the event is\n   requested and when\
    \ received indicates that the connecting switch\n   received all of the addressing\
    \ information.  On an originating trunk,\n   this signal is sent to inform the\
    \ other end that all addressing\n   information has been received.  If the Call\
    \ Agent is providing a\n   transit application for example, in which incoming\
    \ and outgoing\n   trunks are both EANA trunks, then after acknowledgement wink\
    \ is\n   received from the terminating trunk, it is passed to the originating\n\
    \   side so that the originating side knows that addressing has passed to\n  \
    \ the destination switch.\n   Call Block (bl; S + BR; DT,MS,MD): A steady off-hook\
    \ signal applied\n   to one-way incoming trunks to indicate that no further calls\
    \ will be\n   accepted.  When \"bl\" is used as a signal then the \"rel\" signal\
    \ is\n   used to release the blocking condition.\n   A Call Agent should only\
    \ request the \"bl\" event in a case where it\n   knows that this is a one-way\
    \ outgoing trunk, and it should never see\n   an incoming call-setup request (\"\
    sup\" event).  As such if \"bl\" is\n   requested as an event, then \"sup\" is\
    \ suppressed as a persistent\n   event.\n   Busy tone (bz ; - + TO; BL,DT,MD,MS):\
    \ Refer to ITU E.180.  The\n   definition of the tone is defined by the national\
    \ characteristics and\n   may be established via provisioning.  Station Busy is\
    \ defined in GR-\n   506-CORE - LSSGR, SIGNALING, Section 17.2.6. as a combination\
    \ of two\n   AC tones with frequencies of 480 and 620 Hertz and levels of -24\
    \ dBm\n   each, to give a combined level of -21 dBm.  The cadence for Station\n\
    \   Busy Tone is 0.5 seconds on followed by 0.5 seconds off, repeating.\n   Caller\
    \ Id (ci(time, number, name); x + -; DO): See TR-NWT-001188,\n   GR-30-CORE, and\
    \ TR-NWT-000031.  Each of the three fields are\n   optional, however each of the\
    \ commas will always be included.\n      The time parameter is coded as \"MM/DD/HH/MM\"\
    , where MM is a two-\n      digit value for Month between 01 and 12, DD is a two-digit\
    \ value\n      for Day between 1 and 31, and Hour and Minute are two-digit values\n\
    \      coded according to military local time, e.g., 00 is midnight, 01\n    \
    \  is 1 a.m., and 13 is 1 p.m.\n      The number parameter is coded as an ASCII\
    \ character string of\n      decimal digits that identify the calling line number.\
    \  White\n      spaces are permitted if the string is quoted, however they\n \
    \     will be ignored.\n      The name parameter is coded as a string of ASCII\
    \ characters that\n      identify the calling line name.  White spaces are permitted\
    \ if the\n      string is quoted.\n   A \"P\" in the number or name field is used\
    \ to indicate a private\n   number or name, and an \"O\" is used to indicate an\
    \ unavailable number\n   or name.  The following example illustrates the use of\
    \ the caller-id\n   event:\n      O: ci(10/14/17/26, \"555 1212\", somename)\n\
    \   Continue Wink (cwk ; - + BR; MD): This signal is only applicable to\n   the\
    \ \"md\" package.  It provides an indication that digits sent have\n   been accepted,\
    \ and further digits must be sent in order to process\n   the call.  For example,\
    \ when using FGD EAIN signaling, this would\n   correspond to sending a wink after\
    \ the country access code had been\n   received to indicate readiness to receive\
    \ identification and address\n   fields.\n   Dial-tone (dl ; - + TO; BL,DT): Refer\
    \ to ITU E.180.  The definition\n   of the tone is defined by the national characteristics\
    \ and may be\n   established via provisioning.  In GR-506-CORE - LSSGR, SIGNALING,\n\
    \   Section 17.2.1, sial Tone is defined as a combination of two\n   continuous\
    \ AC tones with frequencies of 350 and 440 Hertz and levels\n   of -13dBm each\
    \ to give a combined level of -10 dBm.  It is considered\n   an error to try and\
    \ play dial-tone on a phone that is on hook and an\n   error should consequently\
    \ be returned when such attempts are made\n   (error code 402 - phone on hook).\n\
    \   Information Digits (inf(<inf-digits>); x + TO; MS,MD): On an outgoing\n  \
    \ call (\"md\" package only) it is used as a signal to out-pulse the\n   address\
    \ information when doing overlapped sending.\n   On an incoming call it is used\
    \ as an event to indicate that an MF\n   digit string has been received.  In this\
    \ case, <inf-digits> are all\n   of the digits accumulated up to and including\
    \ the digit delimiters\n   ST, ST', ST'', ST'''.  Multiple sequences of digits\
    \ ending with one\n   of the ST digits may be passed in a single \"inf\" event.\
    \  (Note that\n   K0 is the same as KP, K1 is sometimes referred to as KP' etc.\n\
    \   Similarly S0 is the same as ST, S1 is the same as ST' and so on.\n   The value\
    \ of <inf-digits> is a comma separated list of MF digits:\n   MF1, MF2, ..., MFn\n\
    \   where each of MFi will be one of the following MF digit symbols:\n       \
    \      Table 11 MF Digit Symbols\n             -------------------------\n   \
    \         | Symbol |MF digit         |\n            |   0    |   MF 0        \
    \  |\n            |   1    |   MF 1          |\n            |   2    |   MF 2\
    \          |\n            |   3    |   MF 3          |\n            |   4    |\
    \   MF 4          |\n            |   5    |   MF 5          |\n            | \
    \  6    |   MF 6          |\n            |   7    |   MF 7          |\n      \
    \      |   8    |   MF 8          |\n            |   9    |   MF 9          |\n\
    \            |   K0   |   MF K0 or KP   |\n            |   K1   |   MF K1    \
    \     |\n            |   K2   |   MF K2         |\n            |   S0   |   MF\
    \ S0 or ST   |\n            |   S1   |   MF S1 or ST'  |\n            |   S2 \
    \  |   MF S2 or ST'' |\n            |   S3   |   MF S3 or ST'''|\n           \
    \  --------------------------\n   Thus, an example signal or event might look\
    \ like:\n      inf(k0, 5,5,5,1,2,3,4, s0)\n   An example where the inter-digit\
    \ timer expired after the 5,5,5 would\n   appear as follows:\n      inf(k0, 5,5,5)\n\
    \   Operation Complete (oc ; x + -; all): The operation complete event is\n  \
    \ generated when the gateway was asked to apply one or several signals\n   of\
    \ type TO on the endpoint, and one or more of those signals\n   completed without\
    \ being stopped by the detection of a requested or\n   persistent event such as\
    \ setup.  The completion report may carry as a\n   parameter the name of the signal\
    \ that came to the end of its live\n   time, as in:\n      O: ms/oc(ms/sup)\n\
    \   or\n      O: bl/oc(bl/rg)\n   When the operation complete event is requested,\
    \ it cannot be\n   parameterized with any event parameters.\n   Note that when\
    \ requested at the same a signal for \"sup\" (out-pulsing\n   - a TO event), the\
    \ operation complete event will indicate when out-\n   pulsing is complete.\n\
    \   Operation failure (of; x + -; all):  In general, the operation\n   failure\
    \ event may be generated when the endpoint was asked to apply\n   one or several\
    \ signals of type TO on the endpoint, and one or more of\n   those signals failed\
    \ prior to timing out.  The completion report may\n   carry as a parameter the\
    \ name of the signal that failed, as in:\n       O: ms/of(ms/sup)\n   or\n   \
    \    O: bl/of(bl/rg)\n   When the operation failure event is requested, it cannot\
    \ be\n   parameterized with any event parameters.\n   Operator ringback (orbk;\
    \ x + -; MO): The description of the signaling\n   MF CAS signaling that results\
    \ in this event is describe in the\n   appendix of TR-NPL-000258 [3].  In brief,\
    \ it is normally a wink-on\n   signal which may or may not be followed by an MF\
    \ tone.  This event\n   will be generated when the operator service requests that\
    \ the calling\n   party be alerted (\"mo\" package only).\n   Reverse make busy\
    \ (rbz; P + -; MO): This event corresponds to a\n   \"blocking\" (off-hook) generated\
    \ by the other end of the one-way\n   operator services trunk (\"mo\" package).\
    \  It has the same semantics as\n   of the \"bl\" event in other packages.\n \
    \  Operator recall (rcl; - + BR; MO): This signal may be applied to\n   invoke\
    \ operator recall, e.g., due to customer hook-flash to bring the\n   operator\
    \ back.\n   Release call (rel; P,S + BR; BL,DT,MD,MO,MS,DO): A \"rel\" signal\
    \ sent\n   by the Call Agent to the Media Gateway is a request to release all\
    \ of\n   the resources associated with the telephony leg of the call.  This\n\
    \   may also result in an off-hook signal being sent when appropriate.\n   As\
    \ a result of an \"rel\" signal, the gateway will respond with an\n   \"rcl\"\
    \ event, whenever the resources have been released.  Releasing\n   resources associated\
    \ with the telephony leg of the call does not\n   affect existing connections\
    \ (network legs).  It's up to the Call\n   Agent to send the appropriate delete\
    \ connection commands in order to\n   release any network connections to that\
    \ endpoint.\n   In the case of the FXS (\"BL\") package, the \"rel\" signal is\
    \ used to\n   provide a tip-ground release for ground-start trunks.  In the case\
    \ of\n   loop-start trunks, requesting to play this signal has no effect.\n  \
    \ The Media Gateway generates a \"release call\" event whenever a call is\n  \
    \ released as a result of an on-hook event from an originating end of a\n   call\
    \ (normal release) or due to abnormal event that resulted in\n   releasing the\
    \ call.  The event may be parameterized with one of the\n   following cause codes\
    \ indicating the reason for the release:\n              Table 12 Release Reason\
    \ Codes\n      -----------------------------------------------------------------\n\
    \     |Cause Code |Reason                                               |\n  \
    \   |-----------------------------------------------------------------\n     |\
    \    0      |Normal release                                       |\n     |  \
    \  44     |Requested channel/circuit not available              |\n     |    \
    \       |(glare or incoming seizure detected during call      |\n     |      \
    \     | setup)                                              |\n     |    111 \
    \   |Protocol/signaling error, unspecified (e.g. timeout) |\n      -----------------------------------------------------------------\n\
    \   Note that a \"rel\" event with reason code \"0\" indicating normal\n   release\
    \ (due to an incoming on-hook) will only be \"notified\" by a\n   gateway where\
    \ a call origination occurred.  This behavior follows the\n   rule that when an\
    \ originator releases the call, all resources may be\n   released.  The corresponding\
    \ event for on-hook on the terminating end\n   of a call is the \"sus\" event\
    \ which only indicates hook-status and\n   does not result in any resources being\
    \ released.  It is always up to\n   the Call Agent to release the call (by sending\
    \ the \"rel\" signal) for\n   the terminating end of a call.\n   For FXO ground-start\
    \ case (\"DO\" package), the Media Gateway generates\n   a \"release call\" event\
    \ whenever a call is released as a result of a\n   tip-ground release event from\
    \ the far end.\n   Resume call (res ; P + BR; DT,MD,MS,MO): This indicates that\
    \ the\n   called party resumed the call, i.e., the party went off-hook after a\n\
    \   previous suspend (\"sus\") but before the originating switch released\n  \
    \ (\"rel\") the trunk.  The \"sus\" and \"res\" events/signals are used to\n \
    \  propagate on-hook and off-hook events without releasing the resources\n   associated\
    \ with the call.  In all but the operator services case\n   (\"MO\" package),\
    \ these events would normally be propagated from the\n   terminating to the originating\
    \ end (i.e., requested as events from\n   the terminating end of the call and\
    \ sent to the gateway as signals to\n   a gateway on the originating side of the\
    \ call).\n   However, it is up to the Call Agent to decide whether it wants to\
    \ do\n   \"suspend\"/\"resume\" processing.  If it doesn't, when it receives a\n\
    \   \"sup\" event from the terminating end of the call it can simply go\n   ahead\
    \ and tear down the call immediately (send \"rel\" and delete\n   connections\
    \ to the endpoints on gateways at both originating and\n   terminating end of\
    \ the call).\n   In the case of operator services and 911, \"sus\" and \"res\"\
    \ are used to\n   pass off-hook and on-hook signals to the operator without releasing\n\
    \   any of the resources associated with the call.\n   Ringing (rg; P,S + TO;\
    \ BL,DO): This signal is used for outgoing basic\n   trunks (\"bl\" package).\
    \  See GR-506-CORE - LSSGR: SIGNALING, Section\n   14.  The provisioning process\
    \ may define the ringing cadence.  It is\n   considered an error to try and ring\
    \ if the trunk indicates off hook\n   and an error should consequently be returned\
    \ when such attempts are\n   made (error code 401 - phone off hook).\n   In the\
    \ case of the \"DO\" package, \"rg\" is defined as an event used to\n   indicate\
    \ detection of ringing.\n   Release complete (rlc;P,S + BR; DO,DT,MD,MO,MS): The\
    \ endpoint and\n   Call Agent use the release complete event/signal to confirm\
    \ the call\n   has been released and the trunk is available for another call.\
    \  For\n   FXO ground-start (\"DO\" package), this represents the release of the\n\
    \   tip-ground event from the PBX after the gateway goes on-hook.\n   Reorder\
    \ tone (ro; - + TO; BL,DT,MD,MS): Reorder tone is a combination\n   of two AC\
    \ tones with frequencies of  480 and 620 Hertz and levels of\n   -24 dBm each,\
    \ to give a combined level of -21 dBm.  The cadence for\n   reorder tone is 0.25\
    \ seconds on followed by 0.25 seconds off,\n   repeating continuously.  See GR-506-CORE\
    \ - LSSGR: SIGNALING, Section\n   17.2.7.\n   Ring back tone (rt; - + TO; BL,DT,MD,MS):\
    \ Audible Ring Tone is a\n   combination of two AC tones with frequencies of 440\
    \ and 480 Hertz and\n   levels of -19 dBm each, to give a combined level of -16\
    \ dBm.  In the\n   US the  cadence for Audible Ring Tone is defined to be 2 seconds\
    \ on\n   followed by 4 seconds off.  The definition of the tone is defined by\n\
    \   the national characteristics of the Ring-back Tone, and MAY be\n   established\
    \ via provisioning.  See GR-506-CORE - LSSGR: SIGNALING,\n   Section 17.2.5.\n\
    \   Call Setup (sup ; P,S + TO; DO,DT,MD,MS,MO): The event/signal is used\n  \
    \ both for outgoing and incoming call setups.  Each will be described\n   separately\
    \ in the following.\n   Outgoing call setup:\n   On an outgoing trunk, the \"\
    sup\" signal is used to seize a trunk and\n   out-pulse digits.  The \"sup\" signal\
    \ is parameterized with up to four\n   parameters sup(<ct>, <ca>, <id>, <addr>),\
    \ depending on the package.\n   The order of these parameters does not matter.\
    \  The following table\n   indicates which ones are mandatory (\"M\"), optional\
    \ (\"O\") or forbidden\n   (\"F\") for the various packages.\n               Table\
    \ 13 \"sup\" parameters.\n               ------------------------------------\n\
    \              | Parameter | MS | DT | MO | MD | DO |\n              |------------------------------------|\n\
    \              |    <ct>   |  F |  F |  F |  M |  F |\n              |    <ca>\
    \   |  F |  F |  F |  O |  F |\n              |    <id>   |  F |  F |  M |  M\
    \ |  F |\n              |   <addr>  |  M |  M |  M |  O |  M |\n             \
    \  ------------------------------------\n   The <ct> parameter is of the format\
    \ ct(<ct-value>) where <ct-value>\n   indicates the CAS signaling type and can\
    \ have one of two values \"nda\"\n   (North American Direct Access) for EANA and\
    \ \"nta\" (North American\n   Tandem Access) for EAIN.  The reason this parameter\
    \ is needed in the\n   case of trunks that handle the \"MD\" packages is because\
    \ the same\n   trunk can be used for both.  The <addr> field contains the\n  \
    \ destination number and when present will be on the form\n         addr(dig1,\
    \ dig2, ..., dign)\n   The <id> field contains the identification of the caller\
    \ and when\n   present will be of the form:\n        id(dig1, dig2, ..., dign)\n\
    \   The <ca> field  contains the country address information and when\n   present\
    \ will be of the form:\n        ca(dig1, dig2, ..., dign)\n   When present, the\
    \ <addr> field contains the destination number and\n   will be of the form\n \
    \      addr(dig1, dig2, ..., dign)\n   where digi is an MF symbol as defined in\
    \ table 11 in the case of\n   \"MS\", \"MO\", and \"MD\" packages and digi is\
    \ a DTMF symbol (0-9,\n   *,#,A,B,C,D) in the case of the \"DT\" and \"DO\" packages.\n\
    \   The following table shows some interactions between the Media Gateway\n  \
    \ (MG) and the Switched Circuit Network (SCN) for single stage\n   outpulsing\
    \ applications (\"DT\", \"MS\" and \"DO\" packages):\n    Table 14 SCN Sequencing\
    \ during Call Setup (single stage outpulsing)\n    ------------------------------------------------------------------\n\
    \   |Interface Type |Setup                     |     Interactions      |\n   |------------------------------------------------------------------|\n\
    \   |wink start     |sup(add(<addrvalue>))     |MG|  off-hook ->   |SCN|\n   |\
    \               |                          |MG|  <- wink       |SCN|\n   |   \
    \            |                          |MG| <addrvalue> -> |SCN|\n   |------------------------------------------------------------------|\n\
    \   |Immediate Start|(sup(addr(<addrvalue>))   |MG|  off-hook ->   |SCN|\n   |\
    \ or FXO)       |                          |MG| <addrvalue> -> |SCN|\n    ------------------------------------------------------------------\n\
    \   Call setup signal example for this case (MF signaling):\n         sup(addr(s0,5,5,5,1,2,3,4,k0))\n\
    \   The \"MO\" and \"MD\" packages involve multi-stage signaling and multiple\n\
    \   parameters.  In the case of the \"MD\" package the following table\n   shows\
    \ some of the interactions:\n      Table 15 SCN Sequencing during Call Setup (EANA\
    \ and EAIN)\n    ------------------------------------------------------------------\n\
    \   |Setup                                     |      Interactions     |\n   |------------------------------------------------------------------|\n\
    \   | sup(ct(nda),addr(<addrvalue>),           |MG|  off-hook ->   |SCN|\n   |\
    \ id(<idvalue>))                           |MG|  <- wink       |SCN|\n   |   \
    \                                       |MG|  <idvalue> ->  |SCN|\n   |      \
    \                                    |MG| <addrvalue> -> |SCN|\n   |------------------------------------------------------------------|\n\
    \   | sup(ct(nta), ca(<cavalue>),              |MG|  off-hook ->   |SCN|\n   |\
    \ addr(<addrvalue>), id(<idvalue>))        |MG|  <- wink       |SCN|\n   |   \
    \                                       |MG|  <cavalue> ->  |SCN|\n   |      \
    \                                    |MG|  <- wink       |SCN|\n   |         \
    \                                 |MG|  <idvalue> ->  |SCN|\n   |            \
    \                              |MG| <addrvalue> -> |SCN|\n   |------------------------------------------------------------------|\n\
    \   | sup(ct(nta), ca(<cavalue>),              |MG|  off-hook ->   |SCN|\n   |\
    \    id(<idvalue>))                        |MG|  <- wink       |SCN|\n   |   \
    \                                       |MG|  <cavalue> ->  |SCN|\n   |      \
    \                                    |MG|  <- wink       |SCN|\n   |         \
    \                                 |MG|  <idvalue> ->  |SCN|\n    ------------------------------------------------------------------\n\
    \   The last example is an overlapped sending example where the address\n   value\
    \ would be sent later using the \"inf\" signal.\n   An example setup:\n      sup(ct(nta),ca(k0,1,3,8,9,9,0,0,1,0,s0),id(k0,0,5,5,5,1,2,3,4,s0))\n\
    \   In all of the above cases, the \"ans\" event is an indication of off-\n  \
    \ hook from the far end (the other end answered).  However, in the case\n   of\
    \ the operator service signaling (OSS) protocol of Feature Group D -\n   shown\
    \ in the following table, off-hook from the operator is part of\n   the protocol\
    \ (a request for the calling number) so that \"ans\" in this\n   case does not\
    \ indicate that the operator answered (only that off-\n   hook/request for calling\
    \ number was received).\n   Table 16 SCN Sequencing during Call Setup OSS Protocol\
    \ (\"MO\" Package)\n    ------------------------------------------------------------------\n\
    \   |Setup                                     |      Interactions     |\n   |------------------------------------------------------------------|\n\
    \   | sup(ct(nda),addr(<addrvalue>),           |MG|  off-hook ->   |SCN|\n   |\
    \ id(<idvalue>))                           |MG|  <- wink       |SCN|\n   |   \
    \                                       |MG| <- off-hook    |SCN|\n   |      \
    \                                    |MG| <addrvalue> -> |SCN|\n   |         \
    \                                 |MG|  <idvalue> ->  |SCN|\n    ------------------------------------------------------------------\n\
    \   Incoming Call Setup: A \"sup\" event is used to indicate when an\n   incoming\
    \ call arrives (corresponding to the incoming off-hook event).\n   The event is\
    \ provided without parameters.\n   Suspend call (sus; P + BR; DT,MD,MS,MO): Suspend\
    \ (\"sus\") is an on-\n   hook event that is an indication that the called party\
    \ went on-hook.\n   An on-hook event will be \"notified\" to a Call Agent as a\
    \ \"sus\" event\n   for interfaces that use the \"MS\", \"DT\" and \"MD\" packages\
    \ from an\n   endpoint at a terminating end of a call (as compared to a \"rel\"\
    \ event\n   from the originating side).  The \"sus\" event from the terminating\n\
    \   endpoint gives the Call Agent the option of doing \"suspend/resume\"\n   processing\
    \ or to simply release the call.\n   The \"sus\" signal may be used to send an\
    \ on-hook to the originating\n   party without releasing the resources associated\
    \ with the telephony\n   leg of the call.  The \"rel\" signal on the other hand\
    \ would send an\n   on-hook and release the resources associated with the call.\n\
    \   Because of this \"sus\" can be followed by \"res\" (off-hook) and allow\n\
    \   the call to resume, while \"rel\" cannot be followed by \"res\" because\n\
    \   the call no longer exists.\n   For E911 (\"MO\" package), the operator is\
    \ normally in control of\n   releasing the call so that, \"sus\" (on-hook), \"\
    res\" (off-hook) and\n   \"rcl\" (flash-hook) can be used to pass user hook events\
    \ to the\n   operator without releasing the call.\n   Start Wink (swk; x + - MD,MO):.\
    \  An Call Agent can optionally request\n   the MG to notify it when the wink\
    \ start signal occurs.  Note that\n   wink start (\"swk\") cannot be applied by\
    \ the Call Agent as a signal.\n   The occurrence of wink-start on an incoming\
    \ trunk is a reflexive\n   action that does not require Call Agent involvement.\n"
- title: 3.0. Hook-State Signals and Events
  contents:
  - '3.0. Hook-State Signals and Events

    '
- title: 3.1. Overview of Approach
  contents:
  - "3.1. Overview of Approach\n   As mentioned in the introduction, a higher level\
    \ view is taken for\n   on-hook and off-hook events for many of the CAS packages\
    \ to make the\n   interface Q.931-like.  This provides the advantage that:\n \
    \   * Similar call flows result as when dealing with Q.931-based\n      interfaces\
    \ (e.g., PRI)\n    * It's more evident (for ease in debug) when looking at message\
    \ as\n      to exactly what is going on without having to refer to previous\n\
    \      flows.\n   This does require that media gateways maintain some state but\
    \ this is\n   a relatively small price to pay.\n   One example of this is the\
    \ \"sup\" signal which involves sending off-\n   hook followed by digits as a\
    \ high level signal.  The \"ans\" event is\n   also used to represent off-hook\
    \ but from the terminating end at the\n   point where the call is answered.\n"
- title: 3.2. Suspend/Resume Processing
  contents:
  - "3.2. Suspend/Resume Processing\n   Other signals and events \"sus\" for suspend,\
    \ \"res\" for resume and\n   \"rel\" for release are based on the concept that\
    \ one end (the\n   originator) is in control of the call.  If the controlling\
    \ end goes\n   on-hook a \"rel\" is notified to the Call Agent, and results in\
    \ a the\n   call being released.  However, if the non-controlling (terminating)\n\
    \   end goes on-hook, a \"sus\" event occurs (instead of the \"rel\" event).\n\
    \   This gives the Call Agent the option of doing suspend/resume\n   processing.\n\
    \   If the Call Agent decides not to do suspend/resume processing, it can\n  \
    \ simply send \"rel\" and delete connection commands to the endpoints\n   after\
    \ it receives \"sus\" from the non-controlling (terminating) end of\n   the call.\n\
    \   On the other hand, if it decides to do suspend/resume processing, it\n   can\
    \ start a timeout when it receives the \"sus\" event from the non-\n   controlling\
    \ (terminating) end of the call and continue the call if it\n   receives a \"\
    res\" (off-hook) event.  It also has the option of\n   propagating the \"sus\"\
    \ and \"res\" as signals back to the ingress\n   gateway and allow it an opportunity\
    \ to release the call (\"rel\" event)\n   or not.  In any case the use of \"sus\"\
    \ and \"res\" signals give another\n   level of control over the \"rel\" signal\
    \ which will not only send on-\n   hook but also release the resources associated\
    \ with the telephony leg\n   of the call.\n"
- title: 3.3. Control over Disconnect for E911
  contents:
  - "3.3. Control over Disconnect for E911\n   Note that for E911 (the \"MO\" package)\
    \ is a special case in that the\n   operator (terminating end) is always the controlling\
    \ end.  The \"sus\"\n   and \"res\" signals are used to pass user hook state forward\
    \ to the\n   operator.  The \"rel\" event is passed back as a notify to the Call\n\
    \   Agent when on-hook is received from the operator indicating that the\n   Call\
    \ should be released.  If the \"rel\" is not received the call\n   should continue\
    \ to stay up.\n"
- title: 3.3. Release and Release Complete
  contents:
  - "3.3. Release and Release Complete\n   The \"rel\" signal/event generally means\
    \ on-hook but more that that it\n   also indicates \"release of resources\" for\
    \ the telephony leg of the\n   call.  If a Call Agent sends a \"rel\" signal instead\
    \ of \"sus\" it is\n   requesting the call to be abandoned (i.e., \"rel\" cannot\
    \ be followed\n   by \"res\").\n   The \"rel\" signal does not also imply that\
    \ connections should be\n   deleted so that to completely release the call including\
    \ connections\n   would require a DLCX in addition to (or conjunction with) the\
    \ signal\n   \"rel\".\n   In addition to being a signal, \"rel\" can also be an\
    \ event triggered\n   by either:\n    * An on-hook from the controlling end of\
    \ the call, or\n    * Some abnormal event within the media gateway such that the\n\
    \      telephony leg of the call can no longer be maintained.\n   In any case,\
    \ \"rel\" (release) is generally followed by an \"rlc\"\n   (release complete).\
    \  The release complete signal/event indicates that\n   the trunk resources are\
    \ now completely released and available for\n   another call.  This is also an\
    \ event state that can be audited as\n   indicated by the \"S\" in the column\
    \ for that event (allowing the Call\n   Agent to check to see if that trunk is\
    \ released and available).\n   Examples of the use of \"rel\" and \"rlc\":\n \
    \   * Call Agent sends a \"rel\" to release a trunk, resulting in an\n      outgoing\
    \ off-hook being sent for that trunk.  When the media\n      gateway receives\
    \ the on-hook from the other end, it returns an\n      \"rlc\" event indicating\
    \ that the trunk is released and available.\n    * The media gateway receives\
    \ a on-hook from the trunk at the\n      controlling end of the call, resulting\
    \ in a \"rel\" event being sent\n      to the Call Agent.  The Call Agent then\
    \ sends an \"rlc\" to the\n      media gateway, resulting in on-hook being sent\
    \ in the opposite\n      direction.\n    * An \"rel\" event is sent to the Call\
    \ Agent in the event of some\n      abnormal condition in which the media gateway\
    \ is unable to sustain\n      the telephony leg of the call (e.g., glare condition).\
    \  The Call\n      Agent sends an \"rlc\" to the gateway to complete the release\
    \ of the\n      call. (note that \"rlc may not correspond to on-hook but is\n\
    \      generally sent anyway in response to a \"rel\".)\n    * The Call Agent\
    \ can send a \"rel\" (instead of \"sus\") signal to the\n      controlling (originating)\
    \ end of the call to abandon the call.\n      The gateway will return with \"\
    rlc\" when an off-hook has been\n      received from the other end and all the\
    \ resources have been\n      released.\n    * A \"rel\" can be sent on one-way\
    \ incoming trunk to release a block\n      (\"bl\") sent earlier.\n   The \"BL\"\
    \ (FXS) package is a simple line package, so does not have\n   these events (uses\
    \ \"hd\", \"hf\", and \"hu\" as the only hook state\n   events).\n   The \"DO\"\
    \ (FXO) package, however, does have \"rel\" and \"rlc\" because in\n   the ground-start\
    \ case there is the ability to \"release\" the call as\n   result of a tip-ground\
    \ release.  The signal \"rel\" is used if the PBX\n   releases the call first\
    \ (followed by S: hu from the call Agent to\n   complete the release).  Alternatively,\
    \ the Call Agent can send the S:\n   hu to initiate the release  - followed by\
    \ an \"rlc\" event from the\n   media gateway to Call Agent when the PBX does\
    \ the tip ground release.\n   Although the loop-start trunks would not normally\
    \ have this behavior\n   (only applies to ground-start), the media gateway should\
    \ emulate the\n   behavior in the case of loop-start in order to allow the Call\
    \ Agent a\n   common interface.\n"
- title: 3.4. Blocking CAS Trunks
  contents:
  - "3.4. Blocking CAS Trunks\n   In addition to the above signals and events, there\
    \ is the \"bl\"\n   signal/event which is used for blocking one-way trunks (does\
    \ not work\n   for two way trunks) by providing a continuous off-hook.\n"
- title: 3.5. Summary of Hook-State Events
  contents:
  - "3.5. Summary of Hook-State Events\n   The following summarizes the use of the\
    \ various events that involve\n   off-hook and on-hook from call establishment\
    \ to tear-down.  This\n   applies mainly to \"MS\", \"DT\", \"MD\" and to a lesser\
    \ extent the \"DO\"\n   package.\n    * The \"sup\" event represents off-hook\
    \ origination.\n    * The \"sup\" signal with parameters provides off-hook with\
    \ digit\n      outpulsing on the terminating side.\n    * Once outpulsing is completed,\
    \ an \"ans\" event indicates off-hook\n      from the termination side (the called\
    \ party has answered).\n    * The call agent can then send an \"ans\" signal (off-hook)\
    \ to the\n      originating end to indicate to the caller that the called party\n\
    \      has answered.\n    * The Call Agent can send a \"rel\" to either end at\
    \ any time to tear\n      down the call (e.g., to abort the call).\n    * The\
    \ media gateway can send \"rel\" to indicate abnormal termination\n      of the\
    \ call (with a reason as a parameter).\n    * However, under normal operation\
    \ once a call is established, the\n      Call Agent can expect a \"sus\" (suspend)\
    \ event from the termination\n      end to indicate that the caller went on-hook\
    \ and a \"res\" if the\n      called party goes off-hook again before the Call\
    \ Agent tears down\n      the call.  The Call Agent can send these same signals\
    \ to the\n      originating end to indicate off-hook and on-hook to the calling\n\
    \      party without tearing down the call.\n    * During normal operation, once\
    \ the call is established, on-hook\n      from the calling party (origination\
    \ side) would result in a \"rel\"\n      signal.  The Call Agent would then normally\
    \ send the \"rel\" signal\n      to the terminating end to terminate the call.\
    \  \"rel is normally\n      followed by \"rlc\" (e.g., media gateway indicates\
    \ calling party on-\n      hook with \"rel\" and the Call Agent responds with\
    \ \"rlc\", which\n      sends on on-hook back to the calling party to indicated\
    \ release\n      complete.\n   The \"MO\" package is a bit different in that normally\
    \ only the\n   terminating side (the operator) can release the call (\"rel\" event).\n\
    \   The \"sus\" and \"res\" are forward signals to the operator indicating\n \
    \  user hook-status.\n"
- title: 4.0. Glare Handling
  contents:
  - '4.0. Glare Handling

    '
- title: 4.1. Glare on MF Bi-directional Wink-start Trunks
  contents:
  - "4.1. Glare on MF Bi-directional Wink-start Trunks\n   Gateways may have a configurable\
    \ glare bit on a per-DS0 basis that\n   can be set to indicate whether the gateway\
    \ is the controlling or\n   non-controlling \"switch\".  However, in general,\
    \ PBXs are either pre-\n   configured or can be configured to behave as non-controlling\n\
    \   switches.  In this case if they see an off-hook that exceeds\n   allowable\
    \ wink length, they will attach a receiver, go on-hook, and\n   await digits for\
    \ a new call.  Meanwhile the PBX will retry its\n   original call on another trunk.\n\
    \   If the gateway behaves like a controlling switch, when glare is\n   detected,\
    \ the gateway will wait for up to some timeout value (default\n   value of 4 seconds)\
    \ until the incoming off-hook changes to an on-hook\n   state at which time it\
    \ will start out-pulsing in the normal manner.\n   If the timeout occurs before\
    \ the state change to on-hook occurs, the\n   gateway will send a release event\
    \ to the Call Agent (a \"rel(44)\"\n   event - cause code indicating glare).\n\
    \   When \"rel(44)\" is sent by the gateway, that is an indication to the\n  \
    \ Call Agent that the call is in the process of being released and that\n   the\
    \ Call Agent should give up on that trunk.  However, the gateway\n   may not actually\
    \ want to send the on-hook at that time in order to\n   avoid the possibility\
    \ that the other end takes the on-hook as a wink.\n   Instead, it may start a\
    \ second timer and wait some longer period of\n   time (e.g., 16 seconds or so)\
    \ before releasing the trunk.  If it\n   receives an on-hook prior the timeout,\
    \ it completes the release by\n   going on-hook.  If, on the other hand, the timer\
    \ expires before the\n   other end goes on-hook, it will simply go on-hook and\
    \ wait for the\n   other end to go on-hook.  In any case, once both ends have\
    \ returned\n   to the on-hook state, an \"rlc\" event is sent to the Call Agent.\n"
- title: 4.2. Glare Handling - Basic PBX Trunks
  contents:
  - "4.2. Glare Handling - Basic PBX Trunks\n   In order to reduce the chances of\
    \ glare, the gateway should try a\n   ringing pre-trip test prior to sending ringing\
    \ on a basic ground\n   start trunk.  If glare is detected on an outgoing seizure\
    \ of a basic\n   PBX trunk, the request for ringing should be \"Nacked\" (error\
    \ code 401\n   - phone off-hook) to the Call Agent.\n"
- title: 5.0. Example Call Flows
  contents:
  - '5.0. Example Call Flows

    '
- title: 5.1. PBX to PBX ("MS", "DT, and "BL" packages).
  contents:
  - "5.1. PBX to PBX (\"MS\", \"DT, and \"BL\" packages).\n   The following call flows\
    \ involve a single Call Agent that handles\n   both sides of the call (i.e., the\
    \ inter-Call-Agent signaling is\n   ignored).  The components involved in the\
    \ call are:\n   * The Call Agent (CA)\n   * The originating Media Gateway (GW-o)\
    \ and\n   * The terminating Media Gateway (GW-t)\n"
- title: 5.1.1. Call Setup Flows
  contents:
  - "5.1.1. Call Setup Flows\n   The following describes some PBX to PBX call.  The\
    \ table gives an\n   overview of the initial part of the call flow with details\
    \ to follow.\n    ---------------------------------------------------------------------\n\
    \   | Steps |        GW-o        |         CA         |        GW-t       |\n\
    \   |---------------------------------------------------------------------|\n\
    \   |  A1   |       NTFY[seizure] ->                                      |\n\
    \   |  A2   |                 <-  Ack                                     |\n\
    \   |  A3   |                 <-  RQNT[request digits]                    |\n\
    \   |  A4   |                 Ack ->                                      |\n\
    \   |  A5   |       NTFY[digits]  ->                                      |\n\
    \   |  A6   |                 <- Ack                                      |\n\
    \   |  B1   |                 <- CRCX [M:recvonly, LCO]                   |\n\
    \   |  B2   |          Ack[SDP1]  ->                                      |\n\
    \   |  B3   |                     CRCX [M:sendrecv, LCO, SDP1] ->         |\n\
    \   |  B4   |                                 <- Ack [SDP2]               |\n\
    \   |  B5   |                 <-  MDCX [recvonly,SDP2]                    |\n\
    \   |  B6   |                 Ack  ->                                     |\n\
    \    ---------------------------------------------------------------------\n \
    \  Step A1   PBX seizure results in a notify to the Call Agent\n   indicating\
    \ the start of a call setup:\n         NTFY 3001 ds/ds1-3/6@gw-o.whatever.net\
    \ MGCP 1.0\n         X: 0123456789AF\n         O: ms/sup (or dt/sup)\n       In\
    \ the case of the \"BL\" package (basic PBX) the interface looks\n       like\
    \ a simplified line interface with the standard \"hd\" event for\n       off-hook:\n\
    \         NTFY 3001 ds/ds1-3/6@gw-o.whatever.net MGCP 1.0\n         X: 0123456789AF\n\
    \         O: bl/hd\n   Another alternative would have been to use an embedded\
    \ request in the\n   RQNT that resulted in this notify and combine that request\
    \ with step\n   A3.  Example - \"ms\" package:\n         RQNT 2001 ds/ds1-3/6@gw-o.whatever.net\
    \ MGCP 1.0\n         X: 0123456789AF\n         R: ms/sup(E(R(ms/inf, ms/rel))\n\
    \   Step 3 could also be eliminated by the use of \"loop\" mode e.g.:\n      \
    \   RQNT 2001 ds/ds1-3/6@gw-o.whatever.net MGCP 1.0\n         X: 0123456789AF\n\
    \         Q:loop\n         R: ms/sup, ms/inf, ms/rel\n   This would result in\
    \ both notifies occurring without requiring the\n   RQNT in step A3.\n   Step\
    \ A2   The Call Agent sends an Ack:\n         200 3001 OK\n   Step A3   The Call\
    \ Agent requests that digits be collected.  The\n   approach used here depends\
    \ on the type of  PBX interface.  For an MF\n   interface the Call Agent requests\
    \ that information digits be\n   collected as follows:\n         RQNT 2001 ds/ds1-3/6@gw-o.whatever.net\
    \ MGCP 1.0\n         X: 0123456789B0\n         R: ms/inf, ms/rel\n       The Call\
    \ Agent also asks to be told if the trunk gets released\n       for some reason\
    \ (\"rel\" event) in the process of call setup\n       (release event may be due\
    \ to some signaling error for example).\n       For DTMF trunks (wink-start, immediate\
    \ start and Basic PBX), the\n       request is based on a digit map so looks a\
    \ bit different:\n         RQNT 2001 ds/ds1-3/6@gw-o.whatever.net MGCP 1.0\n \
    \        X: 0123456789B0\n         R: d/[0-9*#T](D), dt/rel (bl/hd in the case\
    \ of Basic PBX)\n         D: (xxxxxxx | x.[T#])\n         S: dt/dl\n         Note:\
    \ the request to signal dial-tone may or may not be here\n         depending on\
    \ PBX interface requirement - bl/dl  required for\n         Basic PBX;  dt/dl\
    \ for some Immediate Start interfaces.\n   Step A4   The gateway responds with\
    \ an ack:\n         200 2001 OK\n   Step A5   Once the digits are collected the\
    \ gateway notifies the call\n   agent.  In the case of an MF interface, the resulting\
    \ notify will\n   look like the following\n         NTFY 3002 ds/ds1-3/6@gw-o.whatever.net\
    \ MGCP 1.0\n         X: 0123456789B0\n         O: ms/inf(k0,5,5,5,1,2,3,4,s0)\n\
    \       In the case of a DTMF interface (including Basic PBX), it will\n     \
    \  look like the following:\n         NTFY 3002 ds/ds1-3/6@gw-o.whatever.net MGCP\
    \ 1.0\n         X: 0123456789B0\n         O: d/5,d/5,d/5,d/1,d/2,d/3,d/4\n   Step\
    \ A6   The Call Agent responds with an ack:\n         200 3002 OK\n   Step B1\
    \   The Call Agent now requests that a receive-only connection\n   be made.\n\
    \         CRCX 2002 ds/ds1-3/6@gw-o.whatever.net MGCP 1.0\n         C: A7453949499\n\
    \         L: a:PCMU,s:off,e:on\n         M: recvonly\n         X: 0123456789B1\n\
    \         R: ms/rel (or dt/rel or bl/hu).\n   Step B2   The Gateway acks with\
    \ a connection ID and provides the SDP\n   information:\n         200 2002 OK\n\
    \         I: 23474FE\n         v=0\n         o=- A7453949499 0 IN IP4 128.96.41.1\n\
    \         s=-\n         c=IN IP4 128.96.41.1\n         t=0 0\n         m= audio\
    \ 3456 RTP/AVP 0\n   Step B3   The Call Agent passes this SDP information to the\n\
    \   terminating gateway (GW-t) as part of the connection request:\n         CRCX\
    \ 4001 ds/ds1-5/3@gw-t.whatever.net MGCP 1.0\n         C: A7453949499\n      \
    \   X: 45375840\n         L: a:PCMU,s:off,e:on\n         M: sendrecv\n       \
    \  v=0\n         o=- A7453949499 0 IN IP4 128.96.41.1\n         s=-\n        \
    \ c=IN IP4 128.96.41.1\n         t=0 0\n         m=audio 3456 RTP/AVP 0\n   Note\
    \ that the call setup on the terminating trunk can be done with\n   this CRCX,\
    \ although in this call flow - it is shown later (step C1).\n   Step B4   The\
    \ terminating gateway, responds with an ack and its SDP\n   information:\n   \
    \      200 4001 OK\n         I: 34738A\n         v=0\n         o=- A7453949499\
    \ 0 IN IP4 47.123.34.33\n         s=-\n         c=IN IP4 47.123.34.33\n      \
    \   t=0 0\n         m= audio 3456 RTP/AVP 0\n   Step B5   Call Agent sends a modify\
    \ connection request with\n   connection mode receive-only to the origination\
    \ gateway and includes\n   the SDP information with the selected profile from\
    \ the termination\n   gateway.\n         MDCX 2003 ds/ds1-3/6@gw-o.whatever.net\
    \ MGCP 1.0\n         C: A7453949499\n         I: 34738A\n         M: recvonly\n\
    \         v=0\n         o=- A7453949499 0 IN IP4 47.123.34.33\n         s=-\n\
    \         c=IN IP4 47.123.34.33\n         t=0 0\n         m= audio 3456 RTP/AVP\
    \ 0\n   Step B6   The Gateway Acks the modify connection request\n         200\
    \ 2003 OK\n   The following table shows the remainder of the call flow to set\
    \ up\n   the call except for Basic PBX (Basic PBX shown in) with details to\n\
    \   follow.\n ---------------------------------------------------------------------\n"
- title: '| Steps |        GW-o        |         CA         |        GW-t       |'
  contents:
  - '| Steps |        GW-o        |         CA         |        GW-t       |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|  C1   |                RQNT [S: ms/sup, R: ms/oc, ms/rel, ms/ans] ->|'
  contents:
  - '|  C1   |                RQNT [S: ms/sup, R: ms/oc, ms/rel, ms/ans] ->|

    '
- title: '|  C2   |                                    <-  Ack                  |'
  contents:
  - '|  C2   |                                    <-  Ack                  |

    '
- title: '|  C3   |                                    <- NTFY [O:ms/oc(ms/sup)]|'
  contents:
  - '|  C3   |                                    <- NTFY [O:ms/oc(ms/sup)]|

    '
- title: '|  C4   |                                    Ack  ->                  |'
  contents:
  - '|  C4   |                                    Ack  ->                  |

    '
- title: '|  C5   |                                    <- NTFY [O: ms/ans]      |'
  contents:
  - '|  C5   |                                    <- NTFY [O: ms/ans]      |

    '
- title: '|  C6   |                                    Ack  ->                  |'
  contents:
  - '|  C6   |                                    Ack  ->                  |

    '
- title: '|  C7   |    <-  MDCX [M:sendrecv, S: ms/ans, R: ms/rel]              |'
  contents:
  - '|  C7   |    <-  MDCX [M:sendrecv, S: ms/ans, R: ms/rel]              |

    '
- title: '|  C8   |                Ack  ->                                      |'
  contents:
  - '|  C8   |                Ack  ->                                      |

    '
- title: '|  C9   |                        RQNT[R: ms/sus] ->                   |'
  contents:
  - '|  C9   |                        RQNT[R: ms/sus] ->                   |

    '
- title: '|  C10  |                                   <-  Ack                   |'
  contents:
  - "|  C10  |                                   <-  Ack                   |\n ---------------------------------------------------------------------\n\
    \   Step C1   The Call Agent does a setup request to the terminating\n   gateway\
    \ The setup request for an MF PBX interface (wink start or\n   immediate start)\
    \ will be the following:\n         RQNT 4002 ds/ds1-5/3@gw-t.whatever.net MGCP\
    \ 1.0\n         X: 45375841\n         Q: loop\n         S: ms/sup(addr(ko,5,5,5,1,2,3,4,s0))\n\
    \         R: ms/oc, ms/rel, ms/ans\n       Note that the result of the \"sup\"\
    \ signal is the following\n       sequence on the interface to the PBX:\n    \
    \   * off-hook -> PBX\n       * wink  -> PBX (for wink-start trunks; for immediate\
    \ start this\n         part of the sequence does is not included)\n       * Digits\
    \ sent to PBX\n       For DTMF PBX interface (except Basic PBX), the only difference\
    \ is\n       that the MF start and end delimiters (k0 and s0) are not\n      \
    \ included:\n         RQNT 4002 ds/ds1-5/3@gw-t.whatever.net MGCP 1.0\n      \
    \   X: 45375841\n         Q: loop\n         S: dt/sup(addr(5,5,5,1,2,3,4))\n \
    \        R: dt/oc, dt/rel, dt/ans\n       Basic PBX requires ringing and ring-back\
    \ instead i.e.:\n         RQNT 4002 ds/ds1-5/3@gw-t.whatever.net MGCP 1.0\n  \
    \       X: 45375841\n         Q: loop\n         S: bl/rg,bl/rt@34738A\n      \
    \   R: bl/oc,bl/hd\n       In this case ringback will come from the gateway and\
    \ will start\n       immediately with the signal request for rt@connectionID.\
    \  It will\n       end as soon as an event occurs (off-hook representing answer\n\
    \       event) In the case of other PBX's, the ringback tone comes from\n    \
    \   the PBX so does not have to be generated by the gateway.\n       Note that\
    \ these requests could be done as easily at the same time\n       as the connection\
    \ request (B3) saving some post-dial delay time.\n   Step C2   The gateway responds\
    \ with an ack:\n           200 4002 OK\n   Step C3   Except  for the basic PBX,\
    \ case (where digits are not\n   outpulsed) when the digits have completed being\
    \ sent out, the gateway\n   will notify the fact by indicate that the operation\
    \ is complete.\n         NTFY 1001 ds/ds1-5/3@gw-t.whatever.net MGCP 1.0\n   \
    \      X: 45375841\n         O: ms/oc(ms/sup) (or dt/oc(dt/sup))\n   Step C4 \
    \  The Call Agent acks the notify\n         200 1001 OK\n       In the case of\
    \ the BL package, steps C3 and C4 will not exist.\n   Step C5    When an answer\
    \ is obtained from the other end (off-hook\n   from the PBX), the gateway sends\
    \ a notify to indicate:\n         NTFY 1002 ds/ds1-5/3@gw-t.whatever.net MGCP\
    \ 1.0\n         X: 45375841\n         O: ms/ans (or dt/ans or bl/hd)\n   Step\
    \ C6   The Call Agent acks\n         200 1002 OK\n   Step C7   The Call Agent\
    \ now sends a request to make the connection\n   full duplex and indicates that\
    \ the other end has answered the phone.\n         MDCX 2004 ds/ds1-3/6@gw-o.whatever.net\
    \ MGCP 1.0\n         C: A7453949499\n         X: 45375842\n         I: 34738A\n\
    \         M: sendrecv\n         S: ms/ans ( or dt/ans but S: not included in the\
    \ case where the\n         originating gateway uses the BL package)\n   Step C8\
    \   The Gateway acks the request\n         200 2004 OK\n   Step C9   The Call\
    \ Agent sends a notification request to be told\n   when the trunk to be released.\n\
    \         RQNT 4003 ds/ds1-5/3@gw-t.whatever.net MGCP 1.0\n         X: 45375842\n\
    \         R: ms/rel,ms/sus (or R: dt/rel,dt/sus or R: bl/hu)\n   Step C10  The\
    \ gateway acks the request\n         200 4003 OK\n       The call is now setup.\n"
- title: 5.1.2. Call Tear-Down
  contents:
  - "5.1.2. Call Tear-Down\n   Two cases are included here, one where the origination\
    \ end initiates\n   the release (section 5.1.2.1) and one where the termination\
    \ end\n   initiates the release (section 5.1.2.2).\n"
- title: 5.1.2.1. Origination End Initiates the Release
  contents:
  - "5.1.2.1. Origination End Initiates the Release\n   The following call flow shows\
    \ an example where the origination end\n   initiates the release for the \"MS\"\
    \ package (similar for \"DT\"\n   Package).\n    --------------------------------------------------------------------\n\
    \   | Steps |        GW-o        |         CA         |        GW-t       |\n\
    \   |-------------------------------------------------------------------- |\n\
    \   |  A1   |    NTFY[O: ms/rel]  ->                                      |\n\
    \   |  A2   |                 <-  Ack                                     |\n\
    \   |  A3   |                       RQNT [S: ms/rel, R: ms/rlc]  ->       |\n\
    \   |  A4   |                                       <-  Ack               |\n\
    \   |  A5   |                                    <- NTFY [O: ms/rlc]      |\n\
    \   |  A6   |                                    Ack  ->                  |\n\
    \   |  A7   |              <-  DLCX [S: ms/rlc, R: ms/sup]                |\n\
    \   |  A8   |              Ack [perf info] ->                             |\n\
    \   |  A9   |                            DLCX [R: ms/sup]->               |\n\
    \   |  A10  |                                   <-  Ack [perf info]       |\n\
    \    ---------------------------------------------------------------------\n \
    \  The same call flow for the \"BL\" package is shown below\n    ---------------------------------------------------------------------\n\
    \   | Steps |        GW-o        |         CA         |        GW-t       |\n\
    \   |---------------------------------------------------------------------|\n\
    \   |  A1   |    NTFY[O: bl/hu]  ->                                       |\n\
    \   |  A2   |                 <-  Ack                                     |\n\
    \   |  A3   |                       RQNT [S: bl/dl, R: bl/hu]  ->         |\n\
    \   |  A4   |                                       <-  Ack               |\n\
    \   |  A5   |                                    <- NTFY [O: bl/hu]       |\n\
    \   |  A6   |                                    Ack  ->                  |\n\
    \   |  A7   |              <- DLCX [R: bl/hd]                             |\n\
    \   |  A8   |              Ack [perf info] ->                             |\n\
    \   |  A9   |                            DLCX [R: bl/hd]->                |\n\
    \   |  A10  |                                   <-  Ack [perf info]       |\n\
    \    ---------------------------------------------------------------------\n \
    \  Step A1   The originating user goes on-hook resulting in a Notify\n   from\
    \ the gateway to indicate that the trunk is being released (reason\n   indicating\
    \ normal release)\n         NTFY 3005 ds/ds1-3/6@gw-o.whatever.net MGCP 1.0\n\
    \         X: 45375842\n         O: ms/rel(0) (or dt/rel(0) or bl/hu)\n   Step\
    \ A2   The Call Agent Acks the Notify\n         200 3005 OK\n   Step A3   The\
    \ Call Agent sends a request to release the trunk.  (For\n   all but Basic PBX.)\n\
    \         RQNT 4004 ds/ds1-5/3@gw-t.whatever.net MGCP 1.0\n         X: 45375843\n\
    \         S: ms/rel (or dt/rel)\n         R: ms/rlc (or dt/rlc)\n       For the\
    \ Basic PBX (\"BL\" package), dial-tone is played\n         RQNT 4004 ds/ds1-5/3@gw-t.whatever.net\
    \ MGCP 1.0\n         X: 45375843\n         S: bl/dl\n         R: bl/hu\n   Step\
    \ A4   The Gateways acks the request\n         200 4004 OK\n   Step A5   The other\
    \ end releases the call by going on-hook and a\n   Notify is sent to the Call\
    \ Agent to indicate that release is\n   complete.\n         NTFY 1004 ds/ds1-5/3@gw-t.whatever.net\
    \ MGCP 1.0\n         X: 45375843\n         O: ms/rlc (or dt/rlc)\n       In the\
    \ case of Basic PBX, this is:\n         NTFY 1004 ds/ds1-5/3@gw-o.whatever.net\
    \ MGCP 1.0\n         X: 45375843\n         O: bl/hu\n   Step A6   The Call Agent\
    \ returns an Ack\n         200 1004 OK\n   Step A7   The Call Agent sends a delete\
    \ connection to the originating\n   gateway with a request to do a release complete\
    \ (which results in\n   sending on-hook to the PBX).\n         DLCX 4005 ds/ds1-5/3@gw-o.whatever.net\
    \ MGCP 1.0\n         X: 45375844\n         I: 34738A\n         S: ms/rlc (or dt/rlc)\n\
    \         R: ms/sup (or dt/sup)\n       Or in the case of Basic PBX (\"BL\" package):\n\
    \         DLCX 4005 ds/ds1-5/3@gw-o.whatever.net MGCP 1.0\n         X: 45375844\n\
    \         I: 34738A\n         R: bl/hd\n   Step A8   The Gateway  Acks and provides\
    \ performance information.\n         250 4005 OK\n         P: PS=1245, OS=62345,\
    \ PR=0, OR=0, PL=0, JI=0, LA=48\n   Step A9   The Call Agent sends a DLCX to the\
    \ terminating gateway.\n         DLCX 2004 ds/ds1-5/3@gw-t.whatever.net MGCP 1.0\n\
    \         X: 0123456789B3\n         I: 23474FE\n         R: ms/sup (or dt/sup\
    \ or bl/hd)\n   Step A10  The gateway acks with performance information\n    \
    \     250 2004 OK\n         P: PS=1245, OS=62345, PR=0, OR=0, PL=0, JI=0, LA=48\n"
- title: 5.1.2.2. Termination End Initiates the Release
  contents:
  - "5.1.2.2. Termination End Initiates the Release\n   The following call flow gives\
    \ an example of the terminating end\n   releasing a call for all but Basic PBX\
    \ (\"MS\" package - \"DT\" package\n   is similar).\n ---------------------------------------------------------------------\n"
- title: '| Steps |        GW-o        |         CA         |        GW-t       |'
  contents:
  - '| Steps |        GW-o        |         CA         |        GW-t       |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|  A1   |                                      <-  NTFY[O: ms/sus]    |'
  contents:
  - '|  A1   |                                      <-  NTFY[O: ms/sus]    |

    '
- title: '|  A2   |                                      Ack  ->                |'
  contents:
  - '|  A2   |                                      Ack  ->                |

    '
- title: '|  A3   |        <-  RQNT [S: ms/sus, R: ms/rel ]                     |'
  contents:
  - '|  A3   |        <-  RQNT [S: ms/sus, R: ms/rel ]                     |

    '
- title: '|  A4   |            Ack  ->                                          |'
  contents:
  - '|  A4   |            Ack  ->                                          |

    '
- title: '|  A5   |                        RQNT [R:  ms/res]  ->                |'
  contents:
  - '|  A5   |                        RQNT [R:  ms/res]  ->                |

    '
- title: '|  A6   |                                       <-  Ack               |'
  contents:
  - '|  A6   |                                       <-  Ack               |

    '
- title: '|  A7   |    NTFY [O:  ms/rel]  ->                                    |'
  contents:
  - '|  A7   |    NTFY [O:  ms/rel]  ->                                    |

    '
- title: '|  A8   |                   <-  Ack                                   |'
  contents:
  - '|  A8   |                   <-  Ack                                   |

    '
- title: '|  A9   |                   DLCX [S:  ms/rel, R:  ms/rlc] ->          |'
  contents:
  - '|  A9   |                   DLCX [S:  ms/rel, R:  ms/rlc] ->          |

    '
- title: '|  A10  |                                   <-  Ack [perf info]       |'
  contents:
  - '|  A10  |                                   <-  Ack [perf info]       |

    '
- title: '|  A11  |                                   <-  Notify [O:  ms/rlc]   |'
  contents:
  - '|  A11  |                                   <-  Notify [O:  ms/rlc]   |

    '
- title: '|  A12  |                                 Ack   ->                    |'
  contents:
  - '|  A12  |                                 Ack   ->                    |

    '
- title: '|  A13  |   <- DLCX [S:  ms/rlc, R: ms/sup ]                          |'
  contents:
  - '|  A13  |   <- DLCX [S:  ms/rlc, R: ms/sup ]                          |

    '
- title: '|  A14  |     Ack [perf info]  ->                                     |'
  contents:
  - "|  A14  |     Ack [perf info]  ->                                     |\n ---------------------------------------------------------------------\n\
    \   The following shows the same call flow but for Basic PBX.  There is\n   no\
    \ equivalent to steps A3-A6 and A11-A12 - so these are not included.\n ---------------------------------------------------------------------\n"
- title: '| Steps |        GW-o        |         CA         |        GW-t       |'
  contents:
  - '| Steps |        GW-o        |         CA         |        GW-t       |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|  A1   |                                      <-  NTFY[O: bl/hu]     |'
  contents:
  - '|  A1   |                                      <-  NTFY[O: bl/hu]     |

    '
- title: '|  A2   |                                      Ack  ->                |'
  contents:
  - '|  A2   |                                      Ack  ->                |

    '
- title: '|  A7   |    NTFY [O: bl/hu]  ->                                      |'
  contents:
  - '|  A7   |    NTFY [O: bl/hu]  ->                                      |

    '
- title: '|  A8   |                   <-  Ack                                   |'
  contents:
  - '|  A8   |                   <-  Ack                                   |

    '
- title: '|  A9   |                                 DLCX [R: bl/hd] ->          |'
  contents:
  - '|  A9   |                                 DLCX [R: bl/hd] ->          |

    '
- title: '|  A10  |                                   <-  Ack [perf info]       |'
  contents:
  - '|  A10  |                                   <-  Ack [perf info]       |

    '
- title: '|  A13  |         <- DLCX [bl/hd]                                     |'
  contents:
  - '|  A13  |         <- DLCX [bl/hd]                                     |

    '
- title: '|  A14  |     Ack [perf info]  ->                                     |'
  contents:
  - "|  A14  |     Ack [perf info]  ->                                     |\n ---------------------------------------------------------------------\n\
    \   Step A1   An on-hook is received from the PBX.  In the case of all\n   but\
    \ the \"BL\" package, this results in a notify with event \"sus\" for\n   suspend.\n\
    \   Step A2   The Call Agent returns an acknowledge\n       The Call Agent starts\
    \ a timer at this point (typically 10\n       seconds).  If an off-hook is received\
    \ from the PBX connected to\n       GW-t before the origination side releases,\
    \ the call is continued\n       (this would appear as a \"res\" event  or \"hd\"\
    \ in the case of Basic\n       PBX interface).  If the origination side goes on-hook\
    \ or the\n       timer expires, then the call is torn down.\n       Note that\
    \ for Basic PBX (the \"BL\" package), steps A3 - A6 are\n       missing (these\
    \ steps do not exist for basic PBX).\n   Step A3   A \"sus\" signal is sent to\
    \ the originating side resulting in\n   a on-hook being sent to the originating\
    \ PBX.\n   Step A4   GW-o acks the request.\n   Step A5   The Call Agent sends\
    \ a request to see off-hook  or resume\n   (\"res\") events.\n   Note: this depends\
    \ on whether the Call Agent wants to do\n   suspend/resume processing.  If not,\
    \ the Call Agent may simply send\n   \"rel\" along with DLCX to both ends.\n \
    \  Step A6   GW-t acks the request.\n   Step A7   An on-hook is received from\
    \ the originating PBX resulting\n   in a notify from GW-o with event \"rel\" (\"\
    hu\" for Basic PBX\n   interface).\n   Step A8   The Call Agent \"acks\"\n   Step\
    \ A9   A delete connection is sent to the terminating gateway with\n   signal\
    \ \"rel\" which results in on-hook being sent to the terminating\n   PBX (except\
    \ for basic PBX - where there is no such signal)\n   Step A10  GW-t acks the DLCX\
    \ and provides performance information\n       Steps A11 and A12  do not exist\
    \ for the basic PBX case.\n   Step A11  GW-t returns an \"rlc\" event\n   Step\
    \ A12  The Call Agent \"acks\" the notify\n   Step A13  A delete connection is\
    \ sent to the originating side (with\n   signal \"rlc\" except in the case of\
    \ the \"BL\" package).\n   Step A14  GW-o returns an \"ack\" with performance\
    \ information.\n"
- title: 5.2. Example Call Flows - "DO" package
  contents:
  - '5.2. Example Call Flows - "DO" package

    '
- title: 5.2.1. Call Setup Flows
  contents:
  - "5.2.1. Call Setup Flows\n   The following describes some PBX to PBX call.  The\
    \ table gives an\n   overview of the initial part of the call flow with details\
    \ to follow.\n ---------------------------------------------------------------------\n"
- title: '| Steps |        GW-o        |         CA         |        GW-t       |'
  contents:
  - '| Steps |        GW-o        |         CA         |        GW-t       |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|  A1   |       NTFY[O: do/rg] ->                                     |'
  contents:
  - '|  A1   |       NTFY[O: do/rg] ->                                     |

    '
- title: '|  A2   |                <-  Ack                                      |'
  contents:
  - '|  A2   |                <-  Ack                                      |

    '
- title: '|  B1   |              <- CRCX [S: do/hd, R: do/rel, M:recvonly, LCO] |'
  contents:
  - '|  B1   |              <- CRCX [S: do/hd, R: do/rel, M:recvonly, LCO] |

    '
- title: '|  B2   |          Ack[SDP1]  ->                                      |'
  contents:
  - '|  B2   |          Ack[SDP1]  ->                                      |

    '
- title: '|  B3   |                     CRCX [M:sendrecv, LCO, SDP1] ->         |'
  contents:
  - '|  B3   |                     CRCX [M:sendrecv, LCO, SDP1] ->         |

    '
- title: '|  B4   |                                 <- Ack [SDP2]               |'
  contents:
  - '|  B4   |                                 <- Ack [SDP2]               |

    '
- title: '|  B5   |                 <-  MDCX [recvonly,SDP2]                    |'
  contents:
  - '|  B5   |                 <-  MDCX [recvonly,SDP2]                    |

    '
- title: '|  B6   |                 Ack  ->                                     |'
  contents:
  - '|  B6   |                 Ack  ->                                     |

    '
- title: '|  C1   |                RQNT [S: do/sup, R: do/oc] ->                |'
  contents:
  - '|  C1   |                RQNT [S: do/sup, R: do/oc] ->                |

    '
- title: '|  C2   |                                    <-  Ack                  |'
  contents:
  - '|  C2   |                                    <-  Ack                  |

    '
- title: '|  C3   |                                    <- NTFY [O:do/oc(do/sup)]|'
  contents:
  - '|  C3   |                                    <- NTFY [O:do/oc(do/sup)]|

    '
- title: '|  C4   |                                    Ack  ->                  |'
  contents:
  - '|  C4   |                                    Ack  ->                  |

    '
- title: '|  C5   |    <-  MDCX [M:sendrecv, R: do/rel]                         |'
  contents:
  - '|  C5   |    <-  MDCX [M:sendrecv, R: do/rel]                         |

    '
- title: '|  C6   |                Ack  ->                                      |'
  contents:
  - '|  C6   |                Ack  ->                                      |

    '
- title: '|  C7   |                        RQNT[R: do/rel] ->                   |'
  contents:
  - '|  C7   |                        RQNT[R: do/rel] ->                   |

    '
- title: '|  C8   |                                   <-  Ack                   |'
  contents:
  - "|  C8   |                                   <-  Ack                   |\n ---------------------------------------------------------------------\n\
    \   Step A1   PBX rings results in a notify to the Call Agent indicating\n   the\
    \ start of a call setup:\n         NTFY 3001 aaln/0@gw-o.whatever.net MGCP 1.0\n\
    \         X: 0123456789AF\n         O: do/rg\n   Step A2   The Call Agent sends\
    \ an Ack:\n   Step B1   The Call Agent now requests that a receive-only connection\n\
    \   be made.\n       If the endpoint is running FXO ground-start, the call would\
    \ also\n       request detection of disconnect supervision from the PBX (R:\n\
    \       do/rel) and should send an off-hook (S: do/hd) in response to\n      \
    \ ringing.\n   Step B2   The Gateway acks with a connection ID and provides the\
    \ SDP\n   information.\n   Step B3   The Call Agent passes this SDP information\
    \ to the\n   terminating gateway (GW-t) as part of the connection request.\n \
    \  Step B4   The terminating gateway, responds with an ack and its SDP\n   information.\n\
    \   Step B5   Call Agent sends a modify connection request with\n   connection\
    \ mode receive-only to the origination gateway and includes\n   the SDP information\
    \ with the selected profile from the termination\n   gateway.\n   Step B6   The\
    \ Gateway Acks the modify connection request\n   Step C1   The Call Agent does\
    \ a setup request to the terminating\n   gateway The setup request will be the\
    \ following:\n         RQNT 4002 aaln/0@gw-t.whatever.net MGCP 1.0\n         X:\
    \ 45375841\n         S: do/sup(addr(5,5,5,1,2,3,4))\n         R: do/oc\n     \
    \  Note that the result of the \"sup\" signal is the following\n       sequence\
    \ on the interface to the PBX:\n       * off-hook -> PBX\n       * tip-ground\
    \ <- PBX (for loop-start this step does not apply)\n       * digits sent to PBX\n\
    \   Step C2   The gateway responds with an ack:\n         200 4002 OK\n   Step\
    \ C3   When the digits have been completely sent out, the gateway\n   will notify\
    \ the fact by indicate that the operation is complete.\n         NTFY 1001 aaln/0@gw-t.whatever.net\
    \ MGCP 1.0\n         X: 45375841\n         O: do/oc(do/sup)\n   Step C4   The\
    \ Call Agent acks the notify\n         200 1001 OK\n   Step C5   The Call Agent\
    \ now sends a request to make the connection\n   full duplex and indicates that\
    \ the other end has answered the phone.\n       If the endpoint is running FXO\
    \ ground-start, the call would also\n       requests detection of disconnect supervision\
    \ from the PBX\n       (R:do/rel)\n   Step C6   The Gateway acks the request\n\
    \   Step C7   If the endpoint is running FXO ground-start, the Call Agent\n  \
    \ sends a notification request to be told  when the trunk to be\n   released (R:\
    \ do/rel).  This step and step C8 are not needed if the\n   endpoint is running\
    \ FXO loop-start.\n   Step C8   The gateway acks the request and the call is now\
    \ setup.\n"
- title: 5.2.2. Call Tear-Down
  contents:
  - "5.2.2. Call Tear-Down\n   If the endpoint is running FXO loop-start, the PBX\
    \ cannot\n   initiate call release.  In this case, call release is always\n  \
    \ initiated by the Media Gateway by going onhook.  Disconnect\n   supervision\
    \ from the PBX is provided only for FXO ground-start.\n   However, it does not\
    \ matter whether the origination end or the\n   termination end initiates the\
    \ release.  The call flows for either\n   case are the same.  Therefore, only\
    \ the case where the origination\n   end initiates the release is illustrated\
    \ in this section.\n ---------------------------------------------------------------------\n"
- title: '| Steps |        GW-o        |         CA         |        GW-t       |'
  contents:
  - '| Steps |        GW-o        |         CA         |        GW-t       |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|  A1   |    NTFY[O: do/rel]  ->                                      |'
  contents:
  - '|  A1   |    NTFY[O: do/rel]  ->                                      |

    '
- title: '|  A2   |                 <-  Ack                                     |'
  contents:
  - '|  A2   |                 <-  Ack                                     |

    '
- title: '|  A3   |                       RQNT [S: do/hu, R: do/rlc]  ->        |'
  contents:
  - '|  A3   |                       RQNT [S: do/hu, R: do/rlc]  ->        |

    '
- title: '|  A4   |                                       <-  Ack               |'
  contents:
  - '|  A4   |                                       <-  Ack               |

    '
- title: '|  A5   |                                    <- NTFY [O: do/rlc]      |'
  contents:
  - '|  A5   |                                    <- NTFY [O: do/rlc]      |

    '
- title: '|  A6   |                                    Ack  ->                  |'
  contents:
  - '|  A6   |                                    Ack  ->                  |

    '
- title: '|  A7   |              <-  DLCX [S: hu, R: rg]                        |'
  contents:
  - '|  A7   |              <-  DLCX [S: hu, R: rg]                        |

    '
- title: '|  A8   |              Ack [perf info] ->                             |'
  contents:
  - '|  A8   |              Ack [perf info] ->                             |

    '
- title: '|  A9   |                            DLCX [R: do/rg]->                |'
  contents:
  - '|  A9   |                            DLCX [R: do/rg]->                |

    '
- title: '|  A10  |                                   <-  Ack [perf info]       |'
  contents:
  - "|  A10  |                                   <-  Ack [perf info]       |\n ---------------------------------------------------------------------\n\
    \   Step A1   The originating PBX goes on-hook resulting in a Notify from\n  \
    \ the gateway to indicate that the trunk is being released (reason\n   indicating\
    \ normal release).\n         NTFY 3005 aaln/0@gw-o.whatever.net MGCP 1.0\n   \
    \      X: 45375842\n         O: do/rel(0)\n   Step A2   The Call Agent Acks the\
    \ Notify\n         200 3005 OK\n   Step A3   The Call Agent sends a request to\
    \ release the trunk.\n   Step A4   The Gateways acks the request\n   Step A5 \
    \  PBX at the terminating end releases the call by releasing\n   tip-ground and\
    \ a Notify is then sent to the Call Agent to indicate\n   that release is complete.\n\
    \       Note that there is no ground signal in case of loop-start.\n       However,\
    \ this NTFY message is still generated as soon as hu\n       signal is applied.\n\
    \   Step A6   The Call Agent returns an Ack\n   Step A7   The Call Agent sends\
    \ a delete connection to the originating\n   gateway with a request to go onhook.\n\
    \   Step A8   The Gateway  Acks and provides performance information.\n   Step\
    \ A9   The Call Agent sends a DLCX to the terminating gateway.\n   Step A10  The\
    \ gateway acks with performance information\n"
- title: 5.3. Example Call Setup - "MD" Package
  contents:
  - "5.3. Example Call Setup - \"MD\" Package\n   The following describes Feature\
    \ Group D call setup  using the \"MD\"\n   package.  The table gives an overview\
    \ of the initial part of the call\n   flow with details to follow.\n ---------------------------------------------------------------------\n"
- title: '| Steps |        GW-o        |         CA         |        GW-t       |'
  contents:
  - '| Steps |        GW-o        |         CA         |        GW-t       |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|  A1   |       NTFY[O:md/sup] ->                                     |'
  contents:
  - '|  A1   |       NTFY[O:md/sup] ->                                     |

    '
- title: '|  A2   |                 <-  Ack                                     |'
  contents:
  - '|  A2   |                 <-  Ack                                     |

    '
- title: '|  A3   | NTFY[O:md/inf(<id>)] ->                                     |'
  contents:
  - '|  A3   | NTFY[O:md/inf(<id>)] ->                                     |

    '
- title: '|  A4   |                 <- Ack                                      |'
  contents:
  - '|  A4   |                 <- Ack                                      |

    '
- title: '|  A5   | NTFY[O:md/inf(<addr>)] ->                                   |'
  contents:
  - '|  A5   | NTFY[O:md/inf(<addr>)] ->                                   |

    '
- title: '|  A6   |                <-  Ack                                      |'
  contents:
  - '|  A6   |                <-  Ack                                      |

    '
- title: '|  B1   |                <- CRCX [M:recvonly, LCO, R: md/rel]         |'
  contents:
  - '|  B1   |                <- CRCX [M:recvonly, LCO, R: md/rel]         |

    '
- title: '|  B2   |          Ack[SDP1]  ->                                      |'
  contents:
  - '|  B2   |          Ack[SDP1]  ->                                      |

    '
- title: '|  B3   |                     CRCX [M:sendrecv, LCO, SDP1] ->         |'
  contents:
  - '|  B3   |                     CRCX [M:sendrecv, LCO, SDP1] ->         |

    '
- title: '|  B4   |                                 <- Ack [SDP2]               |'
  contents:
  - '|  B4   |                                 <- Ack [SDP2]               |

    '
- title: '|  B5   |                 <-  MDCX [recvonly,SDP2]                    |'
  contents:
  - '|  B5   |                 <-  MDCX [recvonly,SDP2]                    |

    '
- title: '|  B6   |                 Ack  ->                                     |'
  contents:
  - "|  B6   |                 Ack  ->                                     |\n ---------------------------------------------------------------------\n\
    \   The assumption is that prior to the initial \"notify\", the Call Agent\n \
    \  has sent a request to be informed of \"sup\" and \"inf\" events using\n   quarantine\
    \ handling \"Q: loop\".\n   Step A1   Trunk seizure results in a notify to the\
    \ Call Agent\n   indicating the start of a call setup:\n         NTFY 3001 ds/ds1-3/6@mgw45.whatever.net\
    \ MGCP 1.0\n         X: 0123456789B0\n         O: md/sup\n   Step A2   The Call\
    \ Agent sends an Ack.\n   Step A3   Once the digits for the identification field\
    \ are collected\n   the gateway notifies the call agent:\n         NTFY 3002 ds/ds1-3/6@mgw45.whatever.net\
    \ MGCP 1.0\n         X: 0123456789B0\n         O: md/inf(k0,0,0,4,0,8,5,5,5,1,2,3,4,s0)\n\
    \   Step A4   The Call Agent responds with an ack.\n   Step A5   When the digits\
    \ are collected for the address field,\n   another notify is sent:\n         NTFY\
    \ 3003 ds/ds1-3/6@mgw45.whatever.net MGCP 1.0\n         X: 0123456789B0\n    \
    \     O: md/inf(k0,5,1,2,5,5,5,4,5,6,7,s0)\n   Step A6   The Call Agent \"acks\"\
    \n   Step B1   Create connection - receive only:\n         CRCX 2002 ds/ds1-3/6@mgw45.whatever.net\
    \ MGCP 1.0\n         C: A3C47F21456789F1\n         L: p:10, a:PCMU\n         M:\
    \ sendrecv\n         X: 0123456789B1\n         R: md/rel\n   Step B2   The Gateway\
    \ \"acks\" the request and provides connection ID\n   and SDP information.\n \
    \  Step B3   The Call Agent passes this SDP information to the\n   terminating\
    \ gateway (GW-t) as part of the connection request.\n   Step B4   The terminating\
    \ gateway, responds with an ack and its SDP\n   information.\n   Step B5   Call\
    \ Agent sends a modify connection request with\n   connection mode receive-only\
    \ to the origination gateway and includes\n   the SDP information with the selected\
    \ profile from the termination\n   gateway.\n   Step B6   The Gateway Acks the\
    \ modify connection request.\n   In the case of EAIN signaling there is some additional\
    \ information\n   provided so that this initial part of the call setup looks slightly\n\
    \   different:\n ---------------------------------------------------------------------\n"
- title: '| Steps |        GW-o        |         CA         |        GW-t       |'
  contents:
  - '| Steps |        GW-o        |         CA         |        GW-t       |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|  A1   |       NTFY[O:md/sup] ->                                     |'
  contents:
  - '|  A1   |       NTFY[O:md/sup] ->                                     |

    '
- title: '|  A2   |                 <-  Ack                                     |'
  contents:
  - '|  A2   |                 <-  Ack                                     |

    '
- title: '|  A3   | NTFY[O:md/inf(<ca>)] ->                                     |'
  contents:
  - '|  A3   | NTFY[O:md/inf(<ca>)] ->                                     |

    '
- title: '|  A4   |                 <- Ack                                      |'
  contents:
  - '|  A4   |                 <- Ack                                      |

    '
- title: '|  A5   |      <- RQNT[S:md/cwk, R:md/inf,md/rel]                     |'
  contents:
  - '|  A5   |      <- RQNT[S:md/cwk, R:md/inf,md/rel]                     |

    '
- title: '|  A6   |                <-  Ack                                      |'
  contents:
  - '|  A6   |                <-  Ack                                      |

    '
- title: '|  A7   | NTFY[O:md/inf(<id>)] ->                                     |'
  contents:
  - '|  A7   | NTFY[O:md/inf(<id>)] ->                                     |

    '
- title: '|  A8   |                 <- Ack                                      |'
  contents:
  - '|  A8   |                 <- Ack                                      |

    '
- title: '|  A9   | NTFY[O:md/inf(<addr>)] ->                                   |'
  contents:
  - '|  A9   | NTFY[O:md/inf(<addr>)] ->                                   |

    '
- title: '|  A10  |                <-  Ack                                      |'
  contents:
  - '|  A10  |                <-  Ack                                      |

    '
- title: '|  B1   |                <- CRCX [M:recvonly, LCO, R: md/rel]         |'
  contents:
  - '|  B1   |                <- CRCX [M:recvonly, LCO, R: md/rel]         |

    '
- title: '|  B2   |          Ack[SDP1]  ->                                      |'
  contents:
  - '|  B2   |          Ack[SDP1]  ->                                      |

    '
- title: '|  B3   |                     CRCX [M:sendrecv, LCO, SDP1] ->         |'
  contents:
  - '|  B3   |                     CRCX [M:sendrecv, LCO, SDP1] ->         |

    '
- title: '|  B4   |                                 <- Ack [SDP2]               |'
  contents:
  - '|  B4   |                                 <- Ack [SDP2]               |

    '
- title: '|  B5   |                 <-  MDCX [recvonly,SDP2]                    |'
  contents:
  - '|  B5   |                 <-  MDCX [recvonly,SDP2]                    |

    '
- title: '|  B6   |                 Ack  ->                                     |'
  contents:
  - "|  B6   |                 Ack  ->                                     |\n ---------------------------------------------------------------------\n\
    \   The assumption is that prior to the initial \"notify\", the Call Agent\n \
    \  has sent a request to be informed of \"sup\" and \"inf\" events using\n   quarantine\
    \ handling \"Q: loop\".\n   Step A1   Trunk  seizure results in a notify to the\
    \ Call Agent\n   indicating the start of a call setup:\n         NTFY 3001 ds/ds1-3/6@mgw45.whatever.net\
    \ MGCP 1.0\n         X: 0123456789B0\n         O: md/sup\n   Step A2   The Call\
    \ Agent sends an Ack\n   Step A3   The initial digit string contains the country\
    \ address\n   field:\n         NTFY 3002 ds/ds1-3/6@mgw45.whatever.net MGCP 1.0\n\
    \         X: 0123456789B0\n         O: md/inf(k0,1,3,8,9,9,0,0,1,9,s0)\n   Step\
    \ A4   The Call Agent responds with an ack\n   Step A5   The Call Agent does processing\
    \ on the country address field\n   and sends a request to initiate further input\
    \ (sends a continue\n   wink):\n         RQNT 2002 ds/*@mgw45.whatever.net MGCP\
    \ 1.0\n         X: 0123456789B1\n         Q: loop\n         R: md/inf,md/rel\n\
    \         S: md/cwk\n   Step A6   The Gateway \"acks\" the request.\n   Step A7\
    \   Once the digits for the identification field are collected\n   the gateway\
    \ notifies the call agent:\n         NTFY 3003 ds/ds1-3/6@mgw45.whatever.net MGCP\
    \ 1.0\n         X: 0123456789B0\n         O: md/inf(k0,0,0,4,0,8,5,5,5,1,2,3,4,s0)\n\
    \   Step A8   The Call Agent responds with an ack\n   Step A9   When the digits\
    \ are collected for the address field,\n   another notify is sent:\n         NTFY\
    \ 3004 ds/ds1-3/6@mgw45.whatever.net MGCP 1.0\n         X: 0123456789B0\n    \
    \     O: md/inf(k0,5,1,2,5,5,5,4,5,6,7,s0)\n   Step A10  The Call Agent \"acks\"\
    \n   Step B1   Create connection - receive only:\n         CRCX 2002 ds/ds1-3/6@mgw45.whatever.net\
    \ MGCP 1.0\n         C: A3C47F21456789F1\n         L: p:10, a:PCMU\n         M:\
    \ sendrecv\n         X: 0123456789B1\n         R: md/rel\n   Step B2   The Gateway\
    \ \"acks\" the request and provides connection ID\n   and SDP information\n  \
    \ Step B3   The Call Agent passes this SDP information to the\n   terminating\
    \ gateway (GW-t) as part of the connection request.\n   Step B4   The terminating\
    \ gateway, responds with an ack and its SDP\n   information\n   Step B5   Call\
    \ Agent sends a modify connection request with\n   connection mode receive-only\
    \ to the origination gateway and includes\n   the SDP information with the selected\
    \ profile from the termination\n   gateway.\n   Step B6   The Gateway Acks the\
    \ modify connection request\n   The following table shows the remainder of the\
    \ call flow to set up\n   the call for FGD EANA.\n ---------------------------------------------------------------------\n"
- title: '| Steps |        GW-o        |         CA         |        GW-t       |'
  contents:
  - '| Steps |        GW-o        |         CA         |        GW-t       |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|  C1   |       RQNT [S:sup, R:md/swk,md/oc, md/rel,md/awk, md/ans] ->|'
  contents:
  - '|  C1   |       RQNT [S:sup, R:md/swk,md/oc, md/rel,md/awk, md/ans] ->|

    '
- title: '|  C2   |                                    <-  Ack                  |'
  contents:
  - '|  C2   |                                    <-  Ack                  |

    '
- title: '|  C3   |                                    <- NTFY [O:md/swk)]      |'
  contents:
  - '|  C3   |                                    <- NTFY [O:md/swk)]      |

    '
- title: '|  C4   |                                    Ack  ->                  |'
  contents:
  - '|  C4   |                                    Ack  ->                  |

    '
- title: '|  C5   |                                    <- NTFY [O:md/oc(md/sup)]|'
  contents:
  - '|  C5   |                                    <- NTFY [O:md/oc(md/sup)]|

    '
- title: '|  C6   |                                    Ack  ->                  |'
  contents:
  - '|  C6   |                                    Ack  ->                  |

    '
- title: '|  C7   |                                    <- NTFY [O:md/awk)]      |'
  contents:
  - '|  C7   |                                    <- NTFY [O:md/awk)]      |

    '
- title: '|  C8   |                                    Ack  ->                  |'
  contents:
  - '|  C8   |                                    Ack  ->                  |

    '
- title: '|  C9   |                  <- RQNT[S:md/awk]                          |'
  contents:
  - '|  C9   |                  <- RQNT[S:md/awk]                          |

    '
- title: '|  C10  |               Ack  ->                                       |'
  contents:
  - '|  C10  |               Ack  ->                                       |

    '
- title: '|  C11  |                                    <- NTFY [O: md/ans]      |'
  contents:
  - '|  C11  |                                    <- NTFY [O: md/ans]      |

    '
- title: '|  C12  |                                    Ack  ->                  |'
  contents:
  - '|  C12  |                                    Ack  ->                  |

    '
- title: '|  C13  |    <-  MDCX [M:sendrecv, S: md/ans, R: md/rel]              |'
  contents:
  - '|  C13  |    <-  MDCX [M:sendrecv, S: md/ans, R: md/rel]              |

    '
- title: '|  C14  |                Ack  ->                                      |'
  contents:
  - '|  C14  |                Ack  ->                                      |

    '
- title: '|  C15  |                   RQNT [R: md/sus, md/rel] ->               |'
  contents:
  - '|  C15  |                   RQNT [R: md/sus, md/rel] ->               |

    '
- title: '|  C16  |                                    <-  Ack                  |'
  contents:
  - "|  C16  |                                    <-  Ack                  |\n ---------------------------------------------------------------------\n\
    \   Step C1   The Call Agent does a setup request to the terminating\n   gateway\
    \ The setup request for an MF EANA FGD interface will be the\n   following:\n\
    \         RQNT 2001 ds/ds1-5/3@gw-t.whatever.net MGCP 1.0\n         X: 45375841\n\
    \         Q: loop\n         S:\n         md/sup(ct(nda),addr(k0,5,5,5,5,2,2,1,2,3,4,s0),id(k0,0,5,5,5,1,\n\
    \         2,3,4,s2))\n         R: md/swk,md/oc,md/rel,md/awk,md/ans\n       Note\
    \ that the result of the \"sup\" signal is the following\n       sequence on the\
    \ interface to the PBX:\n       * off-hook -> SCN\n       * wink <- SCN\n    \
    \   * caller ID digits sent to SCN\n       * address digits sent to SCN\n   Step\
    \ C2   The gateway responds with an ack\n   Step C3   \"Notify\" the CA that the\
    \ start of signaling has occurred\n   (incoming wink start has occurred) i.e.:\n\
    \         NTFY 3000 ds/ds1-3/6@mgw45.whatever.net MGCP 1.0\n         X: 0123456789B0\n\
    \         O: md/swk\n   Step C4   The Call Agent \"acks\".\n   Step C5   \"Notify\"\
    \ that out-pulsing is complete:\n         NTFY 3001 ds/ds1-3/6@mgw45.whatever.net\
    \ MGCP 1.0\n         X: 0123456789B0\n         O: md/oc(md/sup)\n   Step C6  \
    \ The Call Agent \"acks\".\n   Step C7   \"Notify\" that the acknowledgement wink\
    \ has been received:\n         NTFY 3002 ds/ds1-3/6@mgw45.whatever.net MGCP 1.0\n\
    \         X: 0123456789B0\n         O: md/awk\n   Step C8   The Call Agent \"\
    acks\".\n   Step C9   The acknowledge wink is passed to the originating gateway:\n\
    \         RQNT 2001 ds/ds1-5/3@gw-t.whatever.net MGCP 1.0\n         X: 45375842\n\
    \         S: md/awk\n         R: md/rel\n   Step C10  GW-o \"acks\".\n   Step\
    \ C11  \"Notify\" off-hook event (the person at the other end has\n   answered):\n\
    \         NTFY 3003 ds/ds1-3/6@mgw45.whatever.net MGCP 1.0\n         X: 0123456789B0\n\
    \         O: md/ans\n   Step C12  The Call Agent \"acks\".\n   Step C13  The Call\
    \ Agent now sends a request to make the connection\n   full duplex and indicates\
    \ that the other end has answered the phone\n   (S: ans sent)\n   Step C14  The\
    \ Gateway acks the request\n       In the case of FGD EAIN, there is an additional\
    \ digits string\n       (country address and/or carrier access code that has to\
    \ be\n       included so that step C1 looks like the following in a case where\n\
    \       there is no overlapped sending:\n         RQNT 2001 ds/ds1-5/3@gw-t.whatever.net\
    \ MGCP 1.0\n         X: 45375841\n         Q: loop\n         S:md/sup(ct(nta),ca(k0,1,3,8,9,9,0,0,1,0,s0),id(k0,\n\
    \         0,5,5,5,1,2,3,4,s0),addr(ko,0,1,1,3,8,1,2,3,4,7,6,5,s0))\n         R:\
    \ md/swk,md/oc,md/rel,md/awk,md/ans\n       If overlapped sending is done, only\
    \ the country address and\n       caller ID digit strings are sent out in step\
    \ C1:\n         RQNT 2001 ds/ds1-5/3@gw-t.whatever.net MGCP 1.0\n         X: 45375841\n\
    \         Q: loop\n         S:md/sup(ct(nta),ca(k0,1,3,8,9,9,0,0,1,0,s0),id(k0,0,\n\
    \         5,5,5,1,2,3,4,s0))\n         R: md/swk,md/oc,md/rel,md/ans\n       Then\
    \ after these digits go out indicated by event \"oc(sup)\" in\n       step C5,\
    \ and as soon as the Call Agent has the address\n       information, it sends\
    \ it out using the \"inf\" signal:\n         RQNT 2002 ds/ds1-3/6@mgw45.whatever.net\
    \ MGCP 1.0\n         X: 0123456789B1\n         Q: loop\n         R: md/oc,md/rel,md/awk,md/ans\n\
    \         S: md/inf(ko,0,1,1,3,8,1,2,3,4,7,6,5,s0)\n       The Call Agent will\
    \ then get a further \"md/oc(md/sup)\" event when\n       these digits have gone\
    \ out.\n   Step C15  The Call Agent requests to be told of on-hook (\"sus\")\n\
    \   events\n           or abnormal release (\"rel\") events.\n   Step C16  The\
    \ gateway \"acks\" the request.\n"
- title: 5.4. Example Call Setup - "MO" Package
  contents:
  - "5.4. Example Call Setup - \"MO\" Package\n   The following describes Feature\
    \ Group D operator services signaling\n   call setup (911 call) using the \"MO\"\
    \ package.  The table gives an\n   overview of the initial part of the call flow\
    \ with details to follow.\n   In this case GW-o is a residential gateway using\
    \ the line package and\n   GW-t connects to the E911 tandem.\n ---------------------------------------------------------------------\n"
- title: '| Steps |        GW-o        |         CA         |        GW-t       |'
  contents:
  - '| Steps |        GW-o        |         CA         |        GW-t       |

    '
- title: '|---------------------------------------------------------------------|'
  contents:
  - '|---------------------------------------------------------------------|

    '
- title: '|  A1   |       NTFY[O:hd] ->                                         |'
  contents:
  - '|  A1   |       NTFY[O:hd] ->                                         |

    '
- title: '|  A2   |                 <-  Ack                                     |'
  contents:
  - '|  A2   |                 <-  Ack                                     |

    '
- title: '|  A3   | <- RQNT S: dl, R: [0-9*#T](D)                               |'
  contents:
  - '|  A3   | <- RQNT S: dl, R: [0-9*#T](D)                               |

    '
- title: '|  A4   |                 Ack ->                                      |'
  contents:
  - '|  A4   |                 Ack ->                                      |

    '
- title: '|  A5   |      NTFY[O: 9,1,1] ->                                      |'
  contents:
  - '|  A5   |      NTFY[O: 9,1,1] ->                                      |

    '
- title: '|  A6   |                <-  Ack                                      |'
  contents:
  - '|  A6   |                <-  Ack                                      |

    '
- title: '|  B1   |                <- CRCX [M:recvonly, R: hu]                  |'
  contents:
  - '|  B1   |                <- CRCX [M:recvonly, R: hu]                  |

    '
- title: '|  B2   |          Ack[SDP1]  ->                                      |'
  contents:
  - '|  B2   |          Ack[SDP1]  ->                                      |

    '
- title: '|  B3   |                  CRCX [M:sendrecv, LCO, SDP1, S: mo/sup] -> |'
  contents:
  - '|  B3   |                  CRCX [M:sendrecv, LCO, SDP1, S: mo/sup] -> |

    '
- title: '|  B4   |                                 <- Ack [SDP2]               |'
  contents:
  - '|  B4   |                                 <- Ack [SDP2]               |

    '
- title: '|  B5   |                                 <- NTFY [O: oc(sup)]        |'
  contents:
  - '|  B5   |                                 <- NTFY [O: oc(sup)]        |

    '
- title: '|  B6   |                                 Ack  ->                     |'
  contents:
  - '|  B6   |                                 Ack  ->                     |

    '
- title: '|  B5   |                 <-  MDCX [sendrecv,SDP2]                    |'
  contents:
  - '|  B5   |                 <-  MDCX [sendrecv,SDP2]                    |

    '
- title: '|  B6   |                 Ack  ->                                     |'
  contents:
  - "|  B6   |                 Ack  ->                                     |\n ---------------------------------------------------------------------\n\
    \  Note: the originating side in this case is a line-side gateway.\n   Step A1\
    \   The user goes off-hook:\n         NTFY 3001 aaln/1@gw-o.whatever.net MGCP\
    \ 1.0\n         X: 0123456789AF\n         O: l/hd\n   Step A2   The Call Agent\
    \ sends an Ack:\n         200 3001 OK\n   Step A3   The Call Agent sends dial-tone\
    \ and requests that digits be\n   collected:\n         RQNT 2001 aaln/1@gw-o.whatever.net\
    \ MGCP 1.0\n         X: 0123456789B0\n         S: l/dl\n         R: d/[0-9#*T](D),\
    \ hu\n   Step A4   The gateway responds with an ack:\n         200 2001 OK\n \
    \  Step A5   Once the digits are collected the gateway notifies the Call\n   Agent.\
    \  In this case, it is a 911 call\n         NTFY 3002 aaln/1@gw-o.whatever.net\
    \ MGCP 1.0\n         X: 0123456789B0\n         O: d/9,d/1,d/1\n   Step A6   The\
    \ Call Agent responds with an ack:\n         200 3002 OK\n   Step B1   The Call\
    \ Agent now requests that a receive-only connection\n   be made.\n         CRCX\
    \ 2002 ds/ds1-3/6@gw-o.whatever.net MGCP 1.0\n         C: A7453949499\n      \
    \   L: a:PCMU,s:off,e:on\n         M: recvonly\n         X: 0123456789B1\n   \
    \      R: l/hu.\n   Step B2   The Gateway acks with a connection ID and provides\
    \ the SDP\n   information:\n         200 2002 OK\n         I: 23474FE\n      \
    \   v=0\n         o=- A7453949499 0 IN IP4 128.96.41.1\n         s=-\n       \
    \  c=IN IP4 128.96.41.1\n         t=0 0\n         m= audio 3456 RTP/AVP 0\n  \
    \ Step B3   The Call Agent passes this SDP information to the\n   terminating\
    \ gateway (GW-t) as part of the connection request and does\n   a call setup request\
    \ at the same time:\n         CRCX 4001 ds/ds1-5/3@gw-t.whatever.net MGCP 1.0\n\
    \         C: A7453949499\n         X: 45375840\n         L: a:PCMU,s:off,e:on\n\
    \         M: sendrecv\n         Q: loop\n         R: oc, rel, orbk\n         S:\
    \ sup(addr(k0,9,1,1,s2),id(k0,0,8,3,4,5,6,7,8,s0))\n         v=0\n         o=-\
    \ A7453949499 0 IN IP4 128.96.41.1\n         s=-\n         c=IN IP4 128.96.41.1\n\
    \         t=0 0\n         m=audio 3456 RTP/AVP 0\n   As a result of this request,\
    \ the following signaling interactions\n   will occur between GW-t and the Switched\
    \ Circuit Network (SCN - in\n   this case, the E911 tandem):\n       * Off-hook\
    \ -> SCN\n       * Wink     <- SCN\n       * k0,9,1,1,s2 -> SCN\n       * Off-hook\
    \    <- SCN\n       * k0,0,8,3,4,5,6,7,8,s0\n       Note that off-hook from the\
    \ SCN is part of the protocol (a\n       request for the caller ID) and does not\
    \ provide an indication of\n       whether the operator answered or not.\n   Step\
    \ B4   The terminating gateway, responds with an ack and its SDP\n   information:\n\
    \         200 4001 OK\n         I: 34738A\n         v=0\n         o=- A7453949499\
    \ 0 IN IP4 47.123.34.33\n         s=-\n         c=IN IP4 47.123.34.33\n      \
    \   t=0 0\n         m= audio 3456 RTP/AVP 0\n   Step B5   The Call Agent will\
    \ get a further notify when outpulsing of\n   all of the digits is complete.\n\
    \         NTFY 3003 aaln/1@gw-o.whatever.net MGCP 1.0\n         X: 45375840\n\
    \         O: oc(sup)\n   Step B6   The Call Agent returns an \"ack\"\n       \
    \  200 3003 OK\n   Step B7   Call Agent sends a modify connection request with\n\
    \   connection mode receive-only to the origination gateway and includes\n   the\
    \ SDP information with the selected profile from the termination\n   gateway.\n\
    \         MDCX 2003 ds/ds1-3/6@gw-o.whatever.net MGCP 1.0\n         C: A7453949499\n\
    \         I: 34738A\n         M: sendrecv\n         v=0\n         o=- A7453949499\
    \ 0 IN IP4 47.123.34.33\n         s=-\n         c=IN IP4 47.123.34.33\n      \
    \   t=0 0\n         m= audio 3456 RTP/AVP 0\n   Step B8   The Gateway Acks the\
    \ modify connection request\n         200 2003 OK\n   The call is now established\
    \ between the user and the operator.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The source for some these packages are Flemming Andreasen,\
    \ Wai-Tak\n   Siu - Cisco Systems, and Don Stanwyck - IP Unity.  Special thanks\
    \ to\n   Joe Clark, Telcordia Technologies for his CAS interface expertise.\n\
    \   Also thanks to all the reviewers for all their comments, including\n   but\
    \ not limited to the following people: Charles Eckel, Cisco\n   Systems; Jerry\
    \ Kamitses, Sonus Networks.\n"
- title: References
  contents:
  - "References\n   [1] Arango, M., Dugan, A., Elliott, I., Huitema, C. and S. Pickett,\n\
    \       \"Media Gateway Control Protocol (MGCP) Version 1.0\", RFC 2705,\n   \
    \    October 1999.\n   [2] Handley, M. and V. Jacobson, \"SDP: Session Description\
    \ Protocol\",\n       RFC 2327, April 1998.\n   [3] Bellcore, Compatibility Information\
    \ for Feature Group D Switched\n       Access Service, TR-NPL-000258, Issue 1,\
    \ October 1985.\n   [4] Bellcore, Interoffice LATA Switching Systems Generic Requirements\n\
    \       (LSSGR): Verification Connections (25-05-0903), TR-TSY-000531,\n     \
    \  Issue 2, July 1987.\n   [5] Bellcore, LSSGR: Signaling for Analog Interfaces,\
    \ GR-506-CORE,\n       Issue 1, June 1996.\n   [6] PacketCableTM PSTN Gateway\
    \ Call Signaling Protocol Specification,\n       Pkt-SP-TGCP-I01-991201\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Bill Foster\n   170 West Tasman Dr\n   San Jose, CA, 95134\n\
    \   Phone: 408-527-8791\n   EMail: bfoster@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
