- title: __initial_text__
  contents:
  - '                     IP Header Compression over PPP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an option for negotiating the use of header\n\
    \   compression on IP datagrams transmitted over the Point-to-Point\n   Protocol\
    \ (RFC 1661).  It defines extensions to the PPP Control\n   Protocols for IPv4\
    \ and IPv6 (RFC 1332, RFC 2472).  Header compression\n   may be applied to IPv4\
    \ and IPv6 datagrams in combination with TCP,\n   UDP and RTP transport protocols\
    \ as specified in RFC 2507, RFC 2508\n   and RFC 3545.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IP Header Compression (IPHC) defined in [RFC2507] may\
    \ be used for\n   compression of both IPv4 and IPv6 datagrams or packets encapsulated\n\
    \   with multiple IP headers.  IPHC is also capable of compressing both\n   TCP\
    \ and UDP transport protocol headers.  The IP/UDP/RTP header\n   compression defined\
    \ in [RFC2508] and [RFC3545] fits within the\n   framework defined by IPHC so\
    \ that it may also be applied to both IPv4\n   and IPv6 packets.\n   In order\
    \ to establish compression of IP datagrams sent over a PPP\n   link each end of\
    \ the link must agree on a set of configuration\n   parameters for the compression.\
    \  The process of negotiating link\n   parameters for network layer protocols\
    \ is handled in PPP by a family\n   of network control protocols (NCPs).  Since\
    \ there are separate NCPs\n   for IPv4 and IPv6, this document defines configuration\
    \ options to be\n   used in both NCPs to negotiate parameters for the compression\
    \ scheme.\n   This document obsoletes RFC 2509, adding two new suboptions to the\
    \ IP\n   header compression configuration option.  One suboption negotiates\n\
    \   usage of Enhanced RTP-Compression (specified in [RFC3545]), and the\n   other\
    \ suboption negotiates header compression for only TCP or only\n   non-TCP packets.\n\
    \   IPHC relies on the link layer's ability to indicate the types of\n   datagrams\
    \ carried in the link layer frames.  In this document nine\n   new types for the\
    \ PPP Data Link Layer Protocol Field are defined\n   along with their meaning.\n\
    \   In general, header compression schemes that use delta encoding of\n   compressed\
    \ packets require that the lower layer does not reorder\n   packets between compressor\
    \ and decompressor.  IPHC uses delta\n   encoding of compressed packets for TCP\
    \ and RTP.  The IPHC\n   specification [RFC2507] includes methods that allow link\
    \ layers that\n   may reorder packets to be used with IPHC.  Since PPP does not\
    \ reorder\n   packets these mechanisms are disabled by default.  When using\n\
    \   reordering mechanisms such as multiclass multilink PPP [RFC2686],\n   care\
    \ must be taken so that packets that share the same compression\n   context are\
    \ not reordered.\n"
- title: 2.  Configuration Option
  contents:
  - "2.  Configuration Option\n   This document specifies a new compression protocol\
    \ value for the IPCP\n   IP-Compression-Protocol option as specified in [RFC1332].\
    \  The new\n   value and the associated option format are described in section\
    \ 2.1.\n   The option format is structured to allow future extensions to the\n\
    \   IPHC scheme.\n   NOTE: The specification of link and network layer parameter\n\
    \      negotiation for PPP [RFC1661], [RFC1331], [RFC1332] does not\n      prohibit\
    \ multiple instances of one configuration option but states\n      that the specification\
    \ of a configuration option must explicitly\n      allow multiple instances. \
    \ [RFC3241] updates RFC 1332 by\n      explicitly allowing the sending of multiple\
    \ instances of the IP-\n      Compression-Protocol configuration option, each\
    \ with a different\n      value for IP-Compression-Protocol.  Each type of compression\n\
    \      protocol may independently establish its own parameters.\n   NOTE: [RFC1332]\
    \ is not explicit about whether the option\n      negotiates the capabilities\
    \ of the receiver or of the sender.  In\n      keeping with current practice,\
    \ we assume that the option describes\n      the capabilities of the decompressor\
    \ (receiving side) of the peer\n      that sends the Config-Req.\n"
- title: 2.1.  Configuration Option Format
  contents:
  - "2.1.  Configuration Option Format\n   Both the network control protocol for IPv4,\
    \ IPCP [RFC1332] and the\n   IPv6 NCP, IPV6CP [RFC2472] may be used to negotiate\
    \ IP Header\n   Compression parameters for their respective protocols.  The format\
    \ of\n   the configuration option is the same for both IPCP and IPV6CP.\n   Description\n\
    \      This NCP configuration option is used to negotiate parameters for\n   \
    \   IP Header Compression.  Successful negotiation of parameters\n      enables\
    \ the use of Protocol Identifiers FULL_HEADER,\n      COMPRESSED_TCP, COMPRESSED_TCP_NODELTA,\
    \ COMPRESSED_NON_TCP and\n      CONTEXT_STATE as specified in [RFC2507].  The\
    \ option format is\n      summarized below.  The fields are transmitted from left\
    \ to right.\n       0                   1                   2                \
    \   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |     Type      |    Length     |    IP-Compression-Protocol    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           TCP_SPACE           |         NON_TCP_SPACE         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \         F_MAX_PERIOD          |          F_MAX_TIME           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           MAX_HEADER          |          suboptions...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      2\n   Length\n      >= 14\n   The length may be increased if the\
    \ presence of additional\n   parameters is indicated by additional suboptions.\n\
    \   IP-Compression-Protocol\n      0061 (hex)\n   TCP_SPACE\n      The TCP_SPACE\
    \ field is two octets and indicates the maximum value\n      of a context identifier\
    \ in the space of context identifiers\n      allocated for TCP.\n         Suggested\
    \ value: 15\n      TCP_SPACE must be at least 0 and at most 255 (the value 0 implies\n\
    \      having one context).\n   NON_TCP_SPACE\n      The NON_TCP_SPACE field is\
    \ two octets and indicates the maximum\n      value of a context identifier in\
    \ the space of context identifiers\n      allocated for non-TCP.  These context\
    \ identifiers are carried in\n      COMPRESSED_NON_TCP, COMPRESSED_UDP and COMPRESSED_RTP\
    \ packet\n      headers.\n         Suggested value: 15\n      NON_TCP_SPACE must\
    \ be at least 0 and at most 65535 (the value 0\n      implies having one context).\n\
    \   F_MAX_PERIOD\n      Maximum interval between full headers.  No more than F_MAX_PERIOD\n\
    \      COMPRESSED_NON_TCP headers may be sent between FULL_HEADER\n      headers.\n\
    \         Suggested value: 256\n      A value of zero implies infinity, i.e. there\
    \ is no limit to the\n      number of consecutive COMPRESSED_NON_TCP headers.\n\
    \   F_MAX_TIME\n      Maximum time interval between full headers.  COMPRESSED_NON_TCP\n\
    \      headers may not be sent more than F_MAX_TIME seconds after sending\n  \
    \    the last FULL_HEADER header.\n         Suggested value: 5 seconds\n     \
    \ A value of zero implies infinity.\n   MAX_HEADER\n      The largest header size\
    \ in octets that may be compressed.\n         Suggested value: 168 octets\n  \
    \    The value of MAX_HEADER should be large enough so that at least\n      the\
    \ outer network layer header can be compressed.  To increase\n      compression\
    \ efficiency MAX_HEADER should be set to a value large\n      enough to cover\
    \ common combinations of network and transport layer\n      headers.\n   suboptions\n\
    \      The suboptions field consists of zero or more suboptions.  Each\n     \
    \ suboption consists of a type field, a length field and zero or\n      more parameter\
    \ octets, as defined by the suboption type.  The\n      value of the length field\
    \ indicates the length of the suboption in\n      its entirety, including the\
    \ lengths of the type and length fields.\n       0                   1       \
    \            2\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n     \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |     Type      | \
    \   Length     |  Parameters...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 2.2.  RTP-Compression Suboption
  contents:
  - "2.2.  RTP-Compression Suboption\n   The RTP-Compression suboption is included\
    \ in the NCP IP-Compression-\n   Protocol option for IPHC if IP/UDP/RTP compression\
    \ is to be enabled.\n   Inclusion of the RTP-Compression suboption enables use\
    \ of additional\n   Protocol Identifiers COMPRESSED_RTP and COMPRESSED_UDP along\
    \ with\n   additional forms of CONTEXT_STATE as specified in [RFC2508].\n   Description\n\
    \      Enable use of Protocol Identifiers COMPRESSED_RTP, COMPRESSED_UDP\n   \
    \   and CONTEXT_STATE as specified in [RFC2508].\n          0                \
    \   1\n          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         |     Type      |    Length     |\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type\n         1\n      Length\n         2\n"
- title: 2.3.  Enhanced RTP-Compression Suboption
  contents:
  - "2.3.  Enhanced RTP-Compression Suboption\n   To use the enhanced RTP header compression\
    \ defined in [RFC3545], a\n   new sub-option 2 is added.  Sub-option 2 is negotiated\
    \ instead of,\n   not in addition to, sub-option 1.\n   Description\n      Enable\
    \ use of Protocol Identifiers COMPRESSED_RTP and\n      CONTEXT_STATE as specified\
    \ in [RFC2508].  In addition, enable use\n      of [RFC3545] compliant compression\
    \ including the use of Protocol\n      Identifier COMPRESSED_UDP with additional\
    \ flags and use of the C\n      flag with the FULL_HEADER Protocol Identifier\
    \ to indicate use of\n      HDRCKSUM with COMPRESSED_RTP and COMPRESSED_UDP packets.\n\
    \          0                   1\n          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n\
    \         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n         |     Type      |    Length\
    \     |\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Type\n         2\n\
    \      Length\n         2\n"
- title: 2.4.  Negotiating header compression for only TCP or only non-TCP
  contents:
  - "2.4.  Negotiating header compression for only TCP or only non-TCP\n   packets\n\
    \   In RFC 2509 it was not possible to negotiate only TCP header\n   compression\
    \ or only non-TCP header compression because a value of 0\n   in the TCP_SPACE\
    \ or the NON_TCP_SPACE fields actually means that 1\n   context is negotiated.\n\
    \   A new suboption 3 is added to allow specifying that the number of\n   contexts\
    \ for TCP_SPACE or NON_TCP_SPACE is zero, disabling use of the\n   corresponding\
    \ compression.\n   Description\n   Enable header compression for only TCP or only\
    \ non-TCP packets.\n       0                   1                   2\n       0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |    Length     |   Parameter   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type\n         3\n      Length\n         3\n      Parameter\n      The\
    \ parameter is 1 byte with one of the following values:\n      1 = the number\
    \ of contexts for TCP_SPACE is 0\n      2 = the number of contexts for NON_TCP_SPACE\
    \ is 0\n   This suboption overrides the values that were previously assigned to\n\
    \   TCP_SPACE and NON_TCP_SPACE in the IP Header Compression option.\n   If suboption\
    \ 3 is included multiple times with parameter 1 and 2,\n   compression is disabled\
    \ for all packets.\n"
- title: 3.  Multiple Network Control Protocols
  contents:
  - "3.  Multiple Network Control Protocols\n   The IPHC protocol is able to compress\
    \ both IPv6 and IPv4 datagrams.\n   Both IPCP and IPV6CP are able to negotiate\
    \ option parameter values\n   for IPHC.  These values apply to the compression\
    \ of packets where the\n   outer header is an IPv4 header and an IPv6 header,\
    \ respectively.\n"
- title: 3.1.  Sharing Context Identifier Space
  contents:
  - "3.1.  Sharing Context Identifier Space\n   For the compression and decompression\
    \ of IPv4 and IPv6 datagram\n   headers the context identifier space is shared.\
    \  While the parameter\n   values are independently negotiated, sharing the context\
    \ identifier\n   spaces becomes more complex when the parameter values differ.\
    \  Since\n   the compressed packets share context identifier space, the\n   compression\
    \ engine must allocate context identifiers out of a common\n   pool; for compressed\
    \ packets, the decompressor has to examine the\n   context state to determine\
    \ what parameters to use for decompression.\n   Context identifier spaces are\
    \ not shared between TCP and non-\n   TCP/UDP/RTP.  Doing so would require additional\
    \ mechanisms to ensure\n   that no error can occur when switching from using a\
    \ context\n   identifier for TCP to non-TCP.\n"
- title: 4.  Demultiplexing of Datagrams
  contents:
  - "4.  Demultiplexing of Datagrams\n   The IPHC specification [RFC2507] defines\
    \ four header formats for\n   different types of compressed headers.  They are\
    \ compressed TCP,\n   compressed TCP with no delta encoding, compressed non-TCP\
    \ with 8 bit\n   CID and compressed non-TCP with 16 bit CID.  The two non-TCP\
    \ formats\n   may be distinguished by their contents so both may use the same\n\
    \   link-level identifier.  A fifth header format, the full header is\n   distinct\
    \ from a regular header in that it carries additional\n   information to establish\
    \ shared context between the compressor and\n   decompressor.\n   The specification\
    \ of IP/UDP/RTP Header Compression [RFC2508] defines\n   four additional formats\
    \ of compressed headers.  They are for\n   compressed UDP and compressed RTP (on\
    \ top of UDP), both with either\n   8- or 16-bit CIDs.  In addition, there is\
    \ an explicit error message\n   from the decompressor to the compressor.\n   The\
    \ link layer must be able to indicate these header formats with\n   distinct values.\
    \  Nine PPP Data Link Layer Protocol Field values are\n   specified below.\n \
    \  FULL_HEADER\n      The frame contains a full header as specified in [RFC2508]\
    \ Section\n      3.3.1.  This is the same as the FULL_HEADER specified in [RFC2507]\n\
    \      Section 5.3.\n         Value: 0061 (hex)\n   COMPRESSED_TCP\n      The\
    \ frame contains a datagram with a compressed header with the\n      format as\
    \ specified in [RFC2507] Section 6a.\n         Value: 0063 (hex)\n   COMPRESSED_TCP_NODELTA\n\
    \      The frame contains a datagram with a compressed header with the\n     \
    \ format as specified in [RFC2507] Section 6b.\n         Value: 2063 (hex)\n \
    \  COMPRESSED_NON_TCP\n      The frame contains a datagram with a compressed header\
    \ with the\n      format as specified in either Section 6c or Section 6d of\n\
    \      [RFC2507].\n         Value: 0065 (hex)\n   COMPRESSED_RTP_8\n      The\
    \ frame contains a datagram with a compressed header with the\n      format as\
    \ specified in [RFC2508] Section 3.3.2, using 8-bit CIDs.\n         Value: 0069\
    \ (hex)\n   COMPRESSED_RTP_16\n      The frame contains a datagram with a compressed\
    \ header with the\n      format as specified in [RFC2508] Section 3.3.2, using\
    \ 16-bit CIDs.\n         Value: 2069 (hex)\n   COMPRESSED_UDP_8\n      The frame\
    \ contains a datagram with a compressed header with the\n      format as specified\
    \ in [RFC2508] Section 3.3.3 or as specified in\n      [RFC3545] Section 2.1,\
    \ using 8-bit CIDs.\n         Value: 0067 (hex)\n   COMPRESSED_UDP_16\n      The\
    \ frame contains a datagram with a compressed header with the\n      format as\
    \ specified in [RFC2508] Section 3.3.3 or as specified in\n      [RFC3545] Section\
    \ 2.1, using 16-bit CIDs.\n         Value: 2067 (hex)\n   CONTEXT_STATE\n    \
    \  The frame is a link-level message sent from the decompressor to\n      the\
    \ compressor as specified in [RFC2508] Section 3.3.5.\n         Value: 2065 (hex)\n"
- title: 5.  Changes from RFC 2509
  contents:
  - "5.  Changes from RFC 2509\n   Two new suboptions are specified.  See Sections\
    \ 2.3 and 2.4.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC1144]  Jacobson, V., \"Compressing TCP/IP\
    \ Headers for low-speed\n              serial links\", RFC 1144, February 1990.\n\
    \   [RFC1332]  McGregor, G., \"The PPP Internet Protocol Control Protocol\n  \
    \            (IPCP)\", RFC 1332, May 1992.\n   [RFC2472]  Haskin, D. and E. Allen,\
    \ \"IP Version 6 over PPP\", RFC\n              2472, December 1998.\n   [RFC2507]\
    \  Degermark, M., Nordgren, B. and S. Pink, \"Header\n              Compression\
    \ for IP\", RFC 2507, February 1999.\n   [RFC2508]  Casner, S. and V. Jacobson,\
    \ \"Compressing IP/UDP/RTP\n              Headers for Low-Speed Serial Links\"\
    , RFC 2508, February\n              1999.\n   [RFC3241]  Bormann, C., \"Robust\
    \ Header Compression (ROHC) over PPP\",\n              RFC 3241, April 2002.\n\
    \   [RFC3545]  Koren, T., Casner, S., Geevarghese, J., Thompson, B. and\n    \
    \          P. Ruddy, \"Enhanced Compressed RTP (CRTP) for Links with\n       \
    \       High Delay, Packet Loss and Reordering\", RFC 3545, July\n           \
    \   2003.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC1661]  Simpson, W., Ed., \"The Point-To-Point\
    \ Protocol (PPP)\", STD\n              51, RFC 1661, July 1994.\n   [RFC2434]\
    \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 2434,\n              October 1998.\n\
    \   [RFC2686]  Bormann, C., \"The Multi-Class Extension to Multi-Link\n      \
    \        PPP\", RFC 2686, September 1999.\n   [RFC3550]  Schulzrinne, H., Casner,\
    \ S., Frederick, R. and V.\n              Jacobson, \"RTP: A Transport Protocol\
    \ for Real-Time\n              Applications\", RFC 3550, July 2003.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document does not require any additional allocations\
    \ from\n   existing namespaces in the IANA Point-to-Point Protocol Field\n   Assignments\
    \ registry.  However, there are three namespaces that were\n   defined by RFC\
    \ 1332, RFC 2472, and RFC 2509 but not created in the\n   registry.  Those three\
    \ namespaces, described below, have been added\n   to the PPP registry.  This\
    \ document specifies two additional\n   allocations in the third one.\n   Section\
    \ 3.2 of RFC 1332 specifies an IP-Compression-Protocol\n   Configuration Option\
    \ for the PPP IP Control Protocol and defines one\n   value for the IP-Compression-Protocol\
    \ type field in that option.  An\n   IANA registry has been created to allocate\
    \ additional values for that\n   type field.  As stated in RFC 1332, the values\
    \ for the IP-\n   Compression-Protocol type field are always the same as the (primary)\n\
    \   PPP DLL Protocol Number assigned to packets of the particular\n   compression\
    \ protocol.  Assignment of additional IP-Compression-\n   Protocol type values\
    \ is through the IETF consensus procedure as\n   specified in [RFC2434].\n   Section\
    \ 4.2 of RFC 2472 specifies an IPv6-Compression-Protocol\n   Configuration Option\
    \ for the PPP IPv6 Control Protocol and defines\n   one value for the IPv6-Compression-Protocol\
    \ type field in that\n   option.  An IANA registry has been created to allocate\
    \ additional\n   values for that type field.  The IPv6-Compression-Protocol\n\
    \   Configuration Option has the same structure as the IP-Compression-\n   Protocol\
    \ Configuration Option defined in RFC 1332, but the set of\n   values defined\
    \ for the type field may be different.  As stated in RFC\n   2472, the values\
    \ for the IPv6-Compression-Protocol type field are\n   always the same as the\
    \ (primary) PPP DLL Protocol Number assigned to\n   packets of the particular\
    \ compression protocol.  Assignment of\n   additional IPv6-Compression-Protocol\
    \ type values is through the IETF\n   consensus procedure as specified in [RFC2434].\n\
    \   Section 2.1 of RFC 2509 specifies an additional type value to be\n   registered\
    \ for both the IP-Compression-Protocol Configuration Option\n   and the IPv6-Compression-Protocol\
    \ Configuration Option to indicate\n   use of the \"IP Header Compression\" protocol.\
    \  The specification of\n   that type value is repeated in Section 2.1 of this\
    \ document which\n   obsoletes RFC 2509.  In conjunction with the additional type\
    \ value,\n   the format for the variable-length option is specified.  The format\n\
    \   includes a suboption field that may contain one or more suboptions.\n   Each\
    \ suboption begins with a suboption type value.  An IANA registry\n   has been\
    \ created for the suboption type values; and is titled, \"IP\n   Header Compression\
    \ Configuration Option Suboption Types\".\n   Section 2.2 of RFC 2509 (and this\
    \ document) defines one suboption\n   type.  Sections 2.3 and 2.4 of this document\
    \ define two additional\n   suboption types.  It is expected that the number of\
    \ additional\n   suboptions that will need to be defined is small.  Therefore,\
    \ anyone\n   wishing to define new suboptions is required to produce a revision\
    \ of\n   this document to be vetted through the normal Internet Standards\n  \
    \ process, as specified in [RFC2434].\n   RFC 2509 also defines nine PPP Data\
    \ Link Layer Protocol Field values\n   which are already listed in the IANA registry\
    \ of Point-to-Point\n   Protocol Field Assignments.  Section 4 of this document\
    \ repeats the\n   specification of those values without change.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Negotiation of the option defined here imposes\
    \ no additional security\n   considerations beyond those that otherwise apply\
    \ to PPP [RFC1661].\n   The use of header compression can, in rare cases, cause\
    \ the\n   misdelivery of packets.  If necessary, confidentiality of packet\n \
    \  contents should be assured by encryption.\n   Encryption applied at the IP\
    \ layer (e.g., using IPSEC mechanisms)\n   precludes header compression of the\
    \ encrypted headers, though\n   compression of the outer IP header and authentication/security\n\
    \   headers is still possible as described in [RFC2507].  For RTP\n   packets,\
    \ full header compression is possible if the RTP payload is\n   encrypted by itself\
    \ without encrypting the UDP or RTP headers, as\n   described in [RFC3550].  This\
    \ method is appropriate when the UDP and\n   RTP header information need not be\
    \ kept confidential.\n"
- title: 9.  Intellectual Property Rights Notice
  contents:
  - "9.  Intellectual Property Rights Notice\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   Mathias Engan was the primary author of RFC 2509, of\
    \ which this\n   document is a revision.\n"
- title: 11.  Authors' Addresses
  contents:
  - "11.  Authors' Addresses\n   Tmima Koren\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA 95134-1706\n   United States\n   EMail: tmima@cisco.com\n\
    \   Stephen L. Casner\n   Packet Design\n   3400 Hillview Avenue, Building 3\n\
    \   Palo Alto, CA 94304\n   United States\n   EMail: casner@packetdesign.com\n\
    \   Carsten Bormann\n   Universitaet Bremen FB3 TZI\n   Postfach 330440\n   D-28334\
    \ Bremen, GERMANY\n   Phone: +49.421.218-7024\n   Fax: +49.421.218-7000\n   EMail:\
    \ cabo@tzi.org\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
