- title: __initial_text__
  contents:
  - '               Policy-Enabled Path Computation Framework

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2008 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ (http://trustee.ietf.org/\n   license-info) in effect on the date of publication\
    \ of this document.\n   Please review these documents carefully, as they describe\
    \ your rights\n   and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Path Computation Element (PCE) architecture introduces the\n\
    \   concept of policy in the context of path computation.  This document\n   provides\
    \ additional details on policy within the PCE architecture and\n   also provides\
    \ context for the support of PCE Policy.  This document\n   introduces the use\
    \ of the Policy Core Information Model (PCIM) as a\n   framework for supporting\
    \ path computation policy.  This document also\n   provides representative scenarios\
    \ for the support of PCE Policy.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Terminology ................................................3\n  \
    \ 2. Background ......................................................4\n    \
    \  2.1. Motivation .................................................4\n      2.2.\
    \ Policy Attributes ..........................................6\n      2.3. Representative\
    \ Policy Scenarios ............................7\n           2.3.1. Scenario:\
    \ Policy Configured Paths ...................7\n           2.3.2. Scenario: Provider\
    \ Selection Policy ................10\n           2.3.3. Scenario: Policy Based\
    \ Constraints .................12\n           2.3.4. Scenario: Advanced Load Balancing\
    \ (ALB) Example ....14\n   3. Requirements ...................................................16\n\
    \   4. Path Computation Policy Information Model (PCPIM) ..............18\n  \
    \ 5. Policy-Enabled Path Computation Framework Components ...........20\n   6.\
    \ Policy Component Configurations ................................21\n      6.1.\
    \ PCC-PCE Configurations ....................................21\n      6.2. Policy\
    \ Repositories .......................................24\n      6.3. Cooperating\
    \ PCE Configurations ............................25\n      6.4. Policy Configuration\
    \ Management ...........................27\n   7. Inter-Component Communication\
    \ ..................................27\n      7.1. Policy Communication ......................................27\n\
    \      7.2. PCE Discovery Policy Considerations .......................29\n  \
    \ 8. Path Computation Sequence of Events ............................29\n    \
    \  8.1. Policy-Enabled PCC, Policy-Enabled PCE ....................29\n      8.2.\
    \ Policy-Ignorant PCC, Policy-Enabled PCE ...................31\n   9. Introduction\
    \ of New Constraints ................................32\n   10. Security Considerations\
    \ .......................................33\n   11. Acknowledgments ...............................................33\n\
    \   12. References ....................................................34\n  \
    \    12.1. Normative References .....................................34\n    \
    \  12.2. Informative References ...................................34\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Path Computation Element (PCE) Architecture is introduced\
    \ in\n   [RFC4655].  This document describes the impact of policy-based\n   decision\
    \ making when incorporated into the PCE architecture and\n   provides additional\
    \ details on, and context for, applying policy\n   within the PCE architecture.\n\
    \   Policy-based Management (PBM), see [RFC3198], is a network management\n  \
    \ approach that enables a network to automatically perform actions in\n   response\
    \ to network events or conditions based on pre-established\n   rules, also denoted\
    \ as policies, from a network administrator.  PBM\n   enables network administrators\
    \ to operate in a high-level manner\n   through rule-based strategy (policies\
    \ can be defined as a set of\n   rules and actions); the latter are translated\
    \ automatically (i.e.,\n   dynamically, without human interference) into individual\
    \ device\n   configuration directives, aimed at controlling a network as a whole.\n\
    \   Two IETF Working Groups have considered policy networking in the\n   past:\
    \ The Resource Allocation Protocol (RAP) working group and the\n   Policy Framework\
    \ working group.\n   A framework for policy-based admission control [RFC2753]\
    \ was defined\n   and a protocol for use between Policy Enforcement Points (PEP)\
    \ and\n   Policy Decision Points (PDP) was specified: Common Open Policy\n   Service\
    \ (COPS) [RFC2748].  This document uses the terms PEP and PDP\n   to refer to\
    \ the functions defined in the COPS context.  This document\n   makes no assumptions\
    \ nor does it require that the actual COPS\n   protocol be used.  Any suitable\
    \ policy exchange protocol (for\n   example, Simple Object Access Protocol (SOAP)\
    \ [W3CSOAP]) may be\n   substituted.\n   The IETF has also produced a general\
    \ framework for representing,\n   managing, sharing, and reusing policies in a\
    \ vendor-independent,\n   interoperable, and scalable manner.  It has also defined\
    \ an\n   extensible information model for representing policies, called the\n\
    \   Policy Core Information Model (PCIM) [RFC3060], and an extension to\n   this\
    \ model to address the need for QoS management, called the Quality\n   of Service\
    \ (QoS) Policy Information Model (QPIM) [RFC3644].  However,\n   additional mechanisms\
    \ are needed in order to specify policies related\n   to the path computation\
    \ logic as well as its control.\n   In Section 2, this document presents policy-related\
    \ background and\n   scenarios to provide a context for this work.  Section 3\
    \ provides\n   requirements that must be addressed by mechanisms and protocols\
    \ that\n   enable policy-based control over path computation requests and\n  \
    \ decisions.  Section 4 introduces PCIM as a core component in a\n   framework\
    \ for providing policy-enabled path computation.  Section 5\n   introduces a set\
    \ of components that may be used to support policy-\n   enabled path computation.\
    \  Sections 6, 7, and 8 provide details on\n   possible component configurations,\
    \ communication, and events.\n   Section 10 discusses the ability to introduce\
    \ new constraints with\n   minimal impact.  It should be noted that this document,\
    \ in Section 4,\n   only introduces PCIM; specific PCIM definitions to support\
    \ path\n   computation will be discussed in a separate document.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The reader is assumed to be familiar with the following\
    \ terms:\n   BEEP:    Blocks Extensible Exchange Protocol, see [RFC3080].\n  \
    \ CIM:     Common Information Model, see [DMTF].\n   COPS:    Common Open Policy\
    \ Service, see [RFC2748].\n   CSPF:    Constraint-based Shortest Path First, see\
    \ [RFC3630].\n   LSP:     Label Switched Path, see [RFC3031].\n   LSR:     Label\
    \ Switching Router, see [RFC3031].\n   PBM:     Policy-Based Management, see [RFC3198].\n\
    \   PC:      Path Computation.\n   PCC:     Path Computation Client, see [RFC4655].\n\
    \   PCCIM:   Path Computation Core Information Model.\n   PCE:     Path Computation\
    \ Element, see [RFC4655].\n   PCEP:    Path Computation Element Communication\
    \ Protocol,\n            see [PCEP].\n   PCIM:    Policy Core Information Model,\
    \ see [RFC3060].\n   PDP:     Policy Decision Point, see [RFC2753].\n   PEP: \
    \    Policy Enforcement Point, see [RFC2753].\n   QPIM:    QoS Policy Information\
    \ Model, see [RFC3644].\n   SLA:     Service Level Agreement.\n   SOAP:    Simple\
    \ Object Access Protocol, see [W3CSOAP].\n   TE:      Traffic Engineering, see\
    \ [RFC3209] and [RFC3473].\n   TED:     Traffic Engineering Database, see [RFC3209]\
    \ and [RFC3473].\n   TE LSP:  Traffic Engineering MPLS Label Switched Path, see\n\
    \            [RFC3209] and [RFC3473].\n   WDM:     Wavelength Division Multiplexing\n"
- title: 2.  Background
  contents:
  - "2.  Background\n   This section provides some general background on the use of\
    \ policies\n   within the PCE architecture.  It presents the rationale behind\
    \ the\n   use of policies in the TE path computation process, as well as\n   representative\
    \ policies usage scenarios.  This information is\n   intended to provide context\
    \ for the presented PCE policy framework.\n   This section does not attempt to\
    \ present an exhaustive list of\n   rationales or scenarios.\n"
- title: 2.1.  Motivation
  contents:
  - "2.1.  Motivation\n   The PCE architecture as introduced in [RFC4655] includes\
    \ policy as an\n   integral part of the PCE architecture.  This section presents\
    \ some of\n   the rationale for this inclusion.\n   Network operators require\
    \ a certain level of flexibility to shape the\n   TE path computation process,\
    \ so that the process can be aligned with\n   their business and operational needs.\
    \  Many aspects of the path\n   computation may be governed by policies.  For\
    \ example, a PCC may use\n   policies configured by the operator to decide which\
    \ optimization\n   criteria, constraints, diversities and their relaxation strategies\
    \ to\n   request while computing path(s) for a particular service.  Depending\n\
    \   on SLAs, TE and cost/performance ratio goals, path computation\n   requests\
    \ may be issued differently for different services.  A given\n   Service A, for\
    \ instance, may require two Shared Risk Link Group\n   (SRLG)-disjoint paths for\
    \ building end-to-end recovery scheme, while\n   for a Service B link-disjoint\
    \ paths may be sufficient.  Service A may\n   need paths with minimal end-to-end\
    \ delay, while Service B may be\n   looking for shortest (minimal-cost) paths.\
    \  Different constraint\n   relaxation strategies may be applied while computing\
    \ paths for\n   Service A and for Service B, and so forth.  So, based on distinct\n\
    \   service requirements, distinct or similar policies may be adopted\n   when\
    \ issuing/handling path computation requests.\n   Likewise, a PCE may apply policies\
    \ to decide which algorithm(s) to\n   use while performing path computations requested\
    \ from a particular\n   PCC or for a particular domain, see [RFC4927]; whether\
    \ to seek the\n   cooperation of other PCEs to satisfy a particular request or\
    \ to\n   handle a request on its own (possibly responding with non-explicit\n\
    \   paths), or how the request should be modified before being sent to\n   other\
    \ member(s) of a group of cooperating PCEs, etc.\n   Additional motivation for\
    \ supporting policies within the PCE\n   architecture can be described as follows.\
    \  Historically, a path\n   computation entity was an intrinsic part of an LSR's\
    \ control plane\n   and always co-located with the LSR's signaling and routing\n\
    \   subsystems.  This approach allowed for unlimited flexibility in\n   providing\
    \ various path computation enhancements, such as: adding new\n   types of constraints,\
    \ diversities and their relaxation strategies,\n   adopting new objective functions\
    \ and optimization criteria, etc.  All\n   that had to be done to support an enhancement\
    \ was to upgrade the\n   control plane software of a particular LSR (and no other\
    \ LSRs or any\n   other network elements).\n   With the introduction of the PCE\
    \ architecture, the introduction of\n   new PCE capabilities becomes more complicated:\
    \ it isn't enough for a\n   PCE to upgrade its own software.  In order to take\
    \ advantage of a\n   PCE's new capabilities, new advertising and signaling objects\
    \ may\n   need to be standardized, all PCCs may need to be upgraded with new\n\
    \   software, and new interoperability problems may need to be resolved,\n   etc.\n\
    \   Within the context of the PCE architecture, it is therefore highly\n   desirable\
    \ to find a way to introduce new path computation\n   capabilities without requiring\
    \ modifying either the\n   discovery/communication protocols or the PCC software.\
    \  One way to\n   achieve this objective is to consider path selection constraints,\n\
    \   their relaxations, and objective functions, as path computation\n   request-specific\
    \ policies.  Furthermore, such policies may be\n   configured and managed by a\
    \ network operator as any other policies\n   and may be interpreted in real time\
    \ by PCCs and PCEs.\n   There are a number of advantages and useful by-products\
    \ of such an\n   approach:\n   - New path computation capabilities may be introduced\
    \ without\n     changing PCE-PCC communication and discovery protocols or PCC\n\
    \     software.  Only the PCE module providing the path computation\n     capabilities\
    \ (referred to in this document as a path computation\n     engine) needs to be\
    \ updated.\n   - Existing constraints, objective functions and their relaxations\
    \ may\n     be aggregated and otherwise associated, thus producing new, more\n\
    \     complex objective functions that do not require a change of code\n     even\
    \ on the PCEs supporting the functions.\n   - Different elements such as conditions,\
    \ actions, variables, etc.,\n     may be reused by multiple constraints, diversities,\
    \ and\n     optimizations.\n   - PCCs and PCEs need to handle other (that is,\
    \ not request-specific)\n     policies.  Path computation-related policies of\
    \ all types can be\n     placed within the same policy repositories, managed by\
    \ the same\n     policy management tools, and interpreted using the same mechanisms.\n\
    \     Also, policies need to be supported by PCCs and PCEs independent of\n  \
    \   the peculiarities of a specific PCC-PCE communication protocol, see\n    \
    \ [PCEP].  Thus, introducing a new (request-specific) type of policy\n     describing\
    \ constraints and other elements of a path computation\n     request will be a\
    \ natural and relatively inexpensive addition to\n     the policy-enabled path\
    \ computation architecture.\n"
- title: 2.2.  Policy Attributes
  contents:
  - "2.2.  Policy Attributes\n   This section provides a summary listing of the policy\
    \ attributes that\n   may be included in the policy exchanges described in the\
    \ scenarios\n   that follow.  This list is provided for guidance and is not intended\n\
    \   to be exclusive.  Implementation of this framework might include\n   additional\
    \ policy attributes not listed here.\n      Identities\n      - LSP head-end\n\
    \      - LSP destination\n      - PCC\n      - PCE\n      LSP identifiers\n  \
    \    - LSP head-end\n      - LSP destination\n      - Tunnel identifier\n    \
    \  - Extended tunnel identifier\n      - LSP ID\n      - Tunnel name\n      Requested\
    \ LSP qualities\n      - bandwidth\n      - traffic parameters\n      - LSP attributes\n\
    \      - explicit path inclusions\n      - explicit path exclusions\n      - link\
    \ protection level\n      - setup priority\n      - holding priority\n      -\
    \ preexisting LSP route\n      Requested path computation behavior\n      - objective\
    \ function\n      - other LSPs to be considered\n      Additional policy information\n\
    \      - Transparent policy information as received in Resource\n        Reservation\
    \ Protocol (RSVP)-TE\n"
- title: 2.3.  Representative Policy Scenarios
  contents:
  - "2.3.  Representative Policy Scenarios\n   This section provides example scenarios\
    \ of how policies may be\n   applied using the PCE policy framework within the\
    \ PCE architecture\n   context.  Actual networks may deploy one of the scenarios\
    \ discussed,\n   some combination of the presented scenarios, or other scenarios\
    \ (not\n   discussed).  This section should not be viewed as limiting other\n\
    \   applications of policies within the PCE architecture.\n"
- title: '2.3.1.  Scenario: Policy Configured Paths'
  contents:
  - "2.3.1.  Scenario: Policy Configured Paths\n   A very simple usage scenario for\
    \ PCE policy would be to use PCE to\n   centrally administer configured paths.\
    \  Configured paths are composed\n   of strict and loose hops in the form of Explicit\
    \ Route Objects\n   (EROs), see [RFC3209], and are used by one or more LSPs. \
    \ Typically,\n   such paths are configured at the LSP ingress.  In the context\
    \ of\n   policy-enabled path computation, an alternate approach is possible.\n\
    \   In particular, service-specific policies can be installed that will\n   provide\
    \ configured path(s) for a specific service request.  The\n   request may be identified\
    \ based on service parameters such as\n   endpoints, requested QoS, or even a\
    \ token that identifies the\n   initiator of a service request.  The configured\
    \ path(s) would then be\n   used as input to the path computation process, which\
    \ would return\n   explicit routes by expanding of all specified loose hops.\n\
    \   Example of policy:\n    if(service_destination matches 10.132.12.0/24)\n \
    \      Use path: 10.125.13.1 => 10.125.15.1 => 10.132.12.1.\n    else\n      \
    \ Compute path dynamically.\n          ----------------------\n         |    \
    \          -----   |\n         |             | TED |<-+------------>\n       \
    \  |              -----   |  TED synchronization\n         |                |\
    \     |  mechanism (e.g., routing protocol)\n         |                |     |\n\
    \         |                v     |\n         |  ------      -----   |  Inter-PCE\
    \ Request/Response\n         | |Policy|<-->| PCE |<.+...........>  (when present)\n\
    \         |  ------      -----   |\n          ----------------------\n       \
    \                   ^\n                          | Request/\n                \
    \          | Response\n                          v\n           Service  -------------\
    \  Signaling\n           Request |[PCC][Policy]| Protocol\n           <------>|\
    \    Node     |<------->\n      or Signaling  -------------\n         Protocol\n\
    \                     Figure 1: Policy Enabled PCC and PCE\n   Path computation\
    \ policies may be applied at either a PCC or a PCE,\n   see Figure 1.  In the\
    \ PCC case, the configured path would be\n   processed at the PCC and then passed\
    \ to the PCE along with the PCE\n   request, probably in the form of (inclusion)\
    \ constraints.  When\n   applied at the PCE, the configured path would be used\
    \ locally.  Both\n   cases require some method to configure and manage policies.\
    \  In the\n   PCC case, the real benefit would come when there is an automated\n\
    \   policy distribution mechanism.\n       ------------------       -------------------\n\
    \      |                  |     |                   |\n      |        PCE    \
    \   |     |        PCE        |\n      |                  |     |            \
    \       |\n      |  ------   -----  |     |   -----   ------  |\n      | |Policy|\
    \ | TED | |     |  | TED | |Policy| |\n      |  ------   -----  |     |   -----\
    \   ------  |\n       ------------------       -------------------\n         \
    \      ^                       ^\n               | Request/              | Request/\n\
    \               | Response              | Response\n               v         \
    \              v\n   Service --------  Signaling  ------------  Signaling  ------------\n\
    \   Request|Head-End| Protocol  |Intermediate| Protocol  |Intermediate|\n    \
    \ ---->|  Node  |<--------->|    Node    |<--------->|    Node    |\n        \
    \   --------             ------------             ------------\n             \
    \     Figure 2: Multiple PCE Path Computation\n    ------------------        \
    \                      ------------------\n   |                  | Inter-PCE Request/Response\
    \ |                  |\n   |       PCE        |<-------------------------->| \
    \      PCE        |\n   |                  |                            |    \
    \              |\n   |  ------   -----  |                            |  ------\
    \   -----  |\n   | |Policy| | TED | |                            | |Policy| |\
    \ TED | |\n   |  ------   -----  |                            |  ------   -----\
    \  |\n    ------------------                              ------------------\n\
    \               ^\n               | Request/\n               | Response\n    \
    \           v\n   Service ----------  Signaling   ----------  Signaling   ----------\n\
    \   Request| Head-End | Protocol   | Adjacent | Protocol   | Adjacent |\n    \
    \ ---->|  Node    |<---------->|   Node   |<---------->|   Node   |\n        \
    \   ----------              ----------              ----------\n   Figure 3: Multiple\
    \ PCE Path Computation with Inter-PCE Communication\n   Policy-configured paths\
    \ may also be used in environments with\n   multiple (more than one) cooperating\
    \ PCEs (see Figures 2 and 3).  For\n   example, consider the case when there is\
    \ limited TE visibility and\n   independent PCEs are used to determine path(s)\
    \ within each area of\n   the TE visibility.  In such a case, it may not be possible\
    \ (or\n   desirable) to configure entire explicit path(s) on a single PCE.\n \
    \  However, it is possible to configure explicit path(s) for each area\n   of\
    \ the TE visibility and each responsible PCE.  One by one, the PCEs\n   would\
    \ then map an incoming signaling request to appropriate\n   configured path(s).\
    \  Note that to make such a scenario work, it would\n   likely be necessary to\
    \ start and finish the configured paths on TE\n   domain boundary nodes.  Clearly,\
    \ consistent PCE Policy Repositories\n   are also critical in this example.\n"
- title: '2.3.2.  Scenario: Provider Selection Policy'
  contents:
  - "2.3.2.  Scenario: Provider Selection Policy\n   A potentially more interesting\
    \ scenario is applying PC policies in\n   multi-provider topologies.  There are\
    \ numerous interesting policy\n   applications in such topologies.  A rudimentary\
    \ example is simple\n   access control, that is, deciding which PCCs are permitted\
    \ to request\n   inter-domain path computation.\n   A more complicated example\
    \ is applying policy to determine which\n   domain or network provider will be\
    \ used to support a particular PCE\n   request.  Consider the topology presented\
    \ in Figure 4.  In this\n   example, there are multiple transit domains available\
    \ to provide a\n   path from a source domain to a destination domain.  Furthermore,\
    \ each\n   transit domain may have one or more options for reaching a particular\n\
    \   domain.  Each domain will need to select which of the multiple\n   available\
    \ paths will be used to satisfy a particular PCE request.\n   In today's typical\
    \ path computation process, TE reachability,\n   availability, and metric are\
    \ the basic criteria for path selection.\n   However, policies can provide an\
    \ important added consideration in the\n   decision process.  For example, transit\
    \ domain A may be more\n   expensive and provide lower delay or loss than transit\
    \ domain B.\n   Likewise, a transit domain may wish to treat PCE requests from\
    \ its\n   own customers differently than requests from other providers.  In\n\
    \   both cases, computation based on traffic engineering databases will\n   result\
    \ in multiple transit domains that provide reachability, and\n   policies can\
    \ be used to govern which PCE requests get better service.\n                 \
    \             +-------+\n                   +----------+Transit+----------+\n\
    \               +---+---+      | Domain|      +---+---+\n               |Transit|\
    \      |   C   |      |Transit|\n      +--------+ Domain|      +---+---+     \
    \ | Domain+--------+\n      |        |   A   +--+       |       +--+   F   | \
    \       |\n   +--+---+    +---+---+  |       |       |  +---+---+     +--+---+\n\
    \   |Source|        |      |   +---+---+   |      |         |Target|\n   |Domain|\
    \        |      +---+Transit+---+      |         |Domain|\n   +--+---+       \
    \ |      +---+ Domain|---+      |         +--+---+\n      |        +---+---+ \
    \ |   |   D   |   |  +---+---+        |\n      |        |Transit|  |   +---+---+\
    \   |  |Transit|        |\n      +--------+ Domain+--+       |       +--+ Domain+--------+\n\
    \               |   B   |          |          |   G   |\n               +---+---+\
    \      +---+---+      +---+---+\n                   |          |Transit|     \
    \     |\n                   +----------+ Domain+----------+\n                \
    \              |   E   |\n                              +-------+\n       Figure\
    \ 4: Multi-Domain Network with Multiple Transit Options\n   There are multiple\
    \ options for differentiating which PCE requests use\n   a particular transit\
    \ domain and get a particular (better or worse)\n   level of service.  For example,\
    \ a PCE in the source domain may use\n   user- and request-specific policies to\
    \ determine the level of service\n   to provide.  A PCE in the source domain may\
    \ also use domain-specific\n   policies to choose which transit domains are acceptable.\
    \  A PCE in a\n   transit domain may use request-specific policies to determine\
    \ if a\n   request is from a direct customer or another provider, and then use\n\
    \   domain-specific policies to identify how the request should be\n   processed.\n\
    \   Example of policy:\n    if(path computation request issued by a PCC within\
    \ Source Domain)\n       Route the path through Transit Domain A.\n    else\n\
    \       Route the path through Transit Domain B.\n"
- title: '2.3.3.  Scenario: Policy Based Constraints'
  contents:
  - "2.3.3.  Scenario: Policy Based Constraints\n   Another usage scenario is the\
    \ use of policy to provide constraints in\n   a PCE request.  Consider an LSR\
    \ with a policy enabled PCC, as shown\n   in Figure 1, which receives a service\
    \ request via signaling,\n   including over a Network-Network Interface (NNI)\
    \ or User Network\n   Interface (UNI) reference point, or receives a configuration\
    \ request\n   over a management interface to establish a service.  In either case,\n\
    \   the path(s) needed to support the service are not explicitly\n   specified\
    \ in the message/request, and hence path computation is\n   needed.\n   In this\
    \ case, the PCC may apply user- or service-specific policies to\n   decide how\
    \ the path selection process should be constrained, that is,\n   which constraints,\
    \ diversities, optimization criterion, and\n   constraint relaxation strategies\
    \ should be applied in order for the\n   service LSP(s) to have a likelihood to\
    \ be successfully established\n   and provide necessary QoS and resilience against\
    \ network failures.\n   When deciding on the set of constraints, the PCC uses\
    \ as an input all\n   information it knows about the user and service, such as\
    \ the contents\n   of the received message, port ID over which message was received,\n\
    \   associated VPN ID, signaling/reference point type, request time, etc.\n  \
    \ Once the constraints and other parameters of the required path\n   computation\
    \ are determined, the PCC generates a path computation\n   request that includes\
    \ the request-specific policies that describe the\n   determined set of constraints,\
    \ optimizations, and other parameters\n   that indicate how the request is to\
    \ be considered in the path\n   computation process.\n   Example of policy:\n\
    \    if(LSP belongs to a WDM layer network)\n       Compute the path with wavelength\
    \ continuity constraint with the\n       maximum Optical Signal Noise Ratio (OSNR)\
    \ at the path end\n       optimization.\n    else if(LSP belongs to a connection\
    \ oriented Ethernet layer network)\n       Compute the path with minimum end-to-end\
    \ delay.\n    else\n       Compute the shortest path.\n   The PCC may also apply\
    \ server-specific policies in order to select\n   which PCE to use from the set\
    \ of known (i.e., discovered or\n   configured) PCEs.  The PCC may also use server-specific\
    \ policies to\n   form the request to match the PCE's capabilities so that the\
    \ request\n   will not be rejected and has a higher likelihood of being satisfied\n\
    \   in an efficient way.  An example of a request modification as the\n   result\
    \ of a server-specific policy is removing a constraint not\n   supported by the\
    \ PCE.  Once the policy processing is completed at the\n   PCC, and the path computation\
    \ request resulting from the original\n   service request is updated by the policy\
    \ processing, the request is\n   sent to the PCE.\n   Example of policy:\n   \
    \ if(LSP belongs to a WDM layer network)\n       Identify a PCE supporting wavelength\
    \ continuity and optical\n       impairment constraints;\n       Send a request\
    \ to such PCE, requesting path computation with the\n       following constraints:\n\
    \          a) wavelength continuity;\n          b) maximum Polarization Mode Dispersion\
    \ (PMD) at the path end.\n       if(the path computation fails) remove the maximum\
    \ PMD constraint\n          and try the computation again.\n   The PCE that receives\
    \ the request validates and otherwise processes\n   the request, applying the\
    \ policies found in the request as well as\n   any policies that are available\
    \ at the PCE, e.g., client- and domain-\n   specific policies.  As a result of\
    \ the policy processing, the PCE may\n   decide to reject the request.\n   Example\
    \ of policy:\n    Authenticate the PCC requesting the path computation using the\n\
    \    PCC ID found in the path computation request;\n    Reject the request if\
    \ the authentication fails.\n   The PCE also may decide to respond with one or\
    \ several pre-computed\n   paths if user- or client-specific policies instruct\
    \ the PCE to do so.\n   If the PCE decides to satisfy the request by performing\
    \ a path\n   computation, it determines if it needs the cooperation of other PCEs\n\
    \   and defines parameters for path computations to be performed locally\n   and\
    \ remotely.  After that, the PCE instructs a co-located path\n   computation engine\
    \ to perform the local path computation(s) and, if\n   necessary, sends path computation\
    \ requests to one or more other PCEs.\n   It then waits for the responses from\
    \ the local path computation\n   engine and, when used, the remote PCE.  It then\
    \ combines the\n   resulting paths and sends the result back to the requesting\
    \ PCC.  The\n   response may indicate policies describing the resulting paths,\
    \ their\n   characteristics (summary cost, expected end-to-end delay, etc.), as\n\
    \   well as additional information related to the request, e.g., which\n   constraints\
    \ were honored, which were dismissed, and which were\n   relaxed and in what way.\n\
    \   Example of policy:\n    if(the path destination belongs to domain A)\n   \
    \    Instruct local path computation engine to perform the path\n       computation;\n\
    \    else\n       Identify the PCE supporting the destination domain;\n      \
    \ Send path computation request to such PCE;\n       Wait for and process the\
    \ response.\n    Send the path computation response to the requesting PCC.\n \
    \  The PCC processes the response and instructs the LSR to encode the\n   received\
    \ path(s) into the outgoing signaling message(s).\n"
- title: '2.3.4.  Scenario: Advanced Load Balancing (ALB) Example'
  contents:
  - "2.3.4.  Scenario: Advanced Load Balancing (ALB) Example\n   Figure 5 illustrates\
    \ a problem that stems from the coupling between\n   BGP and IGP in the BGP decision\
    \ process.  If a significant portion of\n   the traffic destined for the data\
    \ center (or customer network) enters\n   a PCE-enabled network from AS 1 and\
    \ all IGP links' weights are the\n   same, then both PE3 and PE4 will prefer to\
    \ reach the data center\n   using the routes advertised by PE2.  PE5 will use\
    \ the router-IDs of\n   PE1 and PE2 to break the tie and might therefore also\
    \ select to use\n   the path through PE2 (if the router ID of PE2 is smaller than\
    \ that of\n   PE1).  Either way, the net result is that the link between PE2 and\
    \ CE\n   will carry most of the traffic while the link between PE1 and the\n \
    \  Customer Edge (CE) will be mostly idle.\n                           ..............................\n\
    \                           .          AS 1              .\n                 \
    \          .                            .\n                           .   +---+\
    \   +---+   +----+   .\n                           ....|PE8|...|PE9|...|PE10|....\n\
    \                               +---+   +---+   +----+\n                     \
    \            |       |       |\n                               +---+   +---+ \
    \  +---+\n                         ......|PE3|...|PE4|...|PE5|......\n       \
    \                  .     +---+   +---+   +---+     .\n    ..............     +---+\
    \     \\      /    ___/      +---+\n    .            .    _|PE2|_____+--+__/ \
    \   /         _|PE6|\n    .           +--+ / +---+     |P1|_____+--+_______/ +---+\n\
    \    . Customer  |CE|=    .       +--+     |P2|           .\n    . Network   +--+\
    \ \\_+---+        \\     +--+           .\n    .            .     |PE1|________+--+___/|\
    \     x===x  .  PCE used\n    ..............     +---+        |P3|    |     |PCE|\
    \  .  by all\n                         .          +--+    |     x===x  .  AS0\
    \ nodes\n                         .    AS 0         +---+         .\n        \
    \                 ..................|PE7|..........\n                        \
    \                   +---+\n                     Figure 5: Advanced Load Balancing\n\
    \   This is a common problem for providers and customers alike.  Analysis\n  \
    \ of Netflow records, see [IRSCP], for a large ISP network on a typical\n   day\
    \ has shown that for 71.8% of multi-homed customers, there is a\n   complete imbalance,\
    \ where the most loaded link carries all the\n   traffic and the least loaded\
    \ link carries none.\n   PCE policies can address this problem by basing the routing\
    \ decision\n   at the ingress routers on the offered load towards the multi-homed\n\
    \   customer.  For example, in Figure 5, PCE policies could be configured\n  \
    \ such that traffic load is monitored (e.g., based on Netflow data) at\n   ingress\
    \ routers PE3 to PE7 towards the data center prefixes served by\n   egress routers\
    \ PE1 and PE2.  Using this offered load information, the\n   path computations\
    \ returned by PCE, based on the enabled PCE policies,\n   can direct traffic to\
    \ the appropriate egress router, on a per-ingress\n   router basis.  For example,\
    \ the PCE path computation might direct\n   traffic from both PE4 and PE5 to egress\
    \ PE1, thus overriding the\n   default IGP based selection.  Alternatively, traffic\
    \ from each\n   ingress router to each egress link could be split 50-50.\n   This\
    \ scenario is a good example of how a policy-governed PCE can\n   account for\
    \ some information that was not or cannot be advertised as\n   TE link/node attributes,\
    \ and, therefore, cannot be subject for\n   explicit path computation constraints.\
    \  More generally, such\n   information can be pretty much anything.  For example,\
    \ traffic demand\n   forecasts, flow monitoring feedback, any administrative policies,\n\
    \   etc.  Further examples are described in [IRSCP] of how PCE policies\n   might\
    \ address certain network routing problems, such as selective\n   distributed\
    \ denial-of-service (DDoS) blackholing, planned\n   maintenance, and VPN gateway\
    \ selection.\n   Example of policy:\n    for(all traffic flows destined to Customer\
    \ Network)\n       if(flow ingresses on PE3, PE4, or PE5)\n          Route the\
    \ flow over PE1.\n       else\n          Route the flow over PE2.\n"
- title: 3.  Requirements
  contents:
  - "3.  Requirements\n   The following requirements must be addressed by mechanisms\
    \ and\n   protocols that enable policy-based control over path computation\n \
    \  requests and decisions:\n   - (G)MPLS path computation-specific\n     The mechanisms\
    \ must meet the policy-based control requirements\n     specific to the problem\
    \ of path computation using RSVP-TE as the\n     signaling protocol on MPLS and\
    \ GMPLS LSRs.\n   - Support for non-(G)MPLS PCCs\n     The mechanisms must be\
    \ sufficiently generic to support non-(G)MPLS\n     (LSR) clients such as a Network\
    \ Management System (NMS), or network\n     planner, etc.\n   - Support for many\
    \ policies\n     The mechanisms must include support for many policies and policy\n\
    \     configurations.  In general, the determination and configuration of\n  \
    \   viable policies are the responsibility of the service provider.\n   - Provision\
    \ for monitoring and accounting information\n     The mechanisms must include\
    \ support for monitoring policy state and\n     provide access information.  In\
    \ particular, mechanisms must provide\n     usage and access information that\
    \ may be used for accounting\n     purposes.\n   - Fault tolerance and recovery\n\
    \     The mechanisms must include provisions for fault tolerance and\n     recovery\
    \ from failure cases such as failure of PCC/PCE PDPs,\n     disruption in communication\
    \ that separate a PCC/PCE PDP from its\n     associated PCC/PCE PEPs.\n   - Support\
    \ for policy-ignorant nodes\n     The mechanisms should not be mandatory for every\
    \ node in a network.\n     Policy-based path computation control may be enforced\
    \ at a subset\n     of nodes, for example, on boundary nodes within an administrative\n\
    \     domain.  These policy-capable nodes will function as trusted nodes\n   \
    \  from the point of view of the policy-ignorant nodes in that\n     administrative\
    \ domain.  Alternatively, policy may be applied solely\n     on PCEs with all\
    \ PCCs being policy-ignorant nodes.\n   - Scalability\n     One of the important\
    \ requirements for the mechanisms is\n     scalability.  The mechanisms must scale\
    \ at least to the same extent\n     that RSVP-TE signaling scales in terms of\
    \ accommodating multiple\n     LSPs and network nodes in the path of an LSP. \
    \ There are several\n     sensitive areas in terms of scalability of policy-based\
    \ path\n     computation control.  First, not every policy-aware node in an\n\
    \     infrastructure should be expected to contact a remote PDP.  This\n     would\
    \ cause potentially long delays in verifying requests.\n     Additionally, the\
    \ policy control architecture must scale at least\n     as well as RSVP-TE protocol\
    \ based on factors such as the size of\n     RSVP-TE messages, the time required\
    \ for the network to service an\n     RSVP-TE request, local processing time required\
    \ per node, and local\n     memory consumed per node.  These scaling considerations\
    \ are of\n     particular importance during re-routing of a set of LSPs.\n   -\
    \ Security and denial-of-service considerations\n     The policy control architecture,\
    \ protocols, and mechanisms must be\n     secure as far as the following aspects\
    \ are concerned:\n      o First, the mechanisms proposed must minimize theft and\
    \ denial-\n        of-service threats.\n      o Second, it must be ensured that\
    \ the entities (such as PEPs and\n        PDPs) involved in policy control can\
    \ verify each other's\n        identity and establish necessary trust before communicating.\n\
    \   - Inter-AS and inter-area requirements\n     There are several inter-AS policy-related\
    \ requirements discussed in\n     [RFC4216] and [RFC5376], and inter-area policy-related\
    \ requirements\n     discussed in [RFC4927].  These requirements must be addressed\
    \ by\n     policy-enabled PCE mechanisms and protocols.\n   It should be noted\
    \ that this document only outlines the communication\n   elements and mechanisms\
    \ needed to allow a wide variety of possible\n   policies to be applied for path\
    \ computation control.  It does not\n   include any discussion of any specific\
    \ policy behavior, nor does it\n   define or require use of specific policies.\n"
- title: 4.  Path Computation Policy Information Model (PCPIM)
  contents:
  - "4.  Path Computation Policy Information Model (PCPIM)\n   The Policy Core Information\
    \ Model (PCIM) introduced in [RFC3060] and\n   expanded in [RFC3460] presents\
    \ the object-oriented information model\n   for representing general policy information.\n\
    \   This model defines two hierarchies of object classes:\n   - Structural classes\
    \ representing policy information and control of\n     policies.\n   - Association\
    \ classes that indicate how instances of the structural\n     classes are related\
    \ to each other.\n   These classes can be mapped to various concrete implementations,\
    \ for\n   example, to a directory that uses Lightweight Directory Access\n   Protocol\
    \ version 3 (LDAPv3) as its access protocol.\n   Figure 6 shows an abstract from\
    \ the class inheritance hierarchy for\n   PCIM.\n   ManagedElement (abstract)\n\
    \      |\n      +--Policy (abstract)\n      |  |\n      |  +---PolicySet (abstract)\n\
    \      |  |   |\n      |  |   +---PolicyGroup\n      |  |   |\n      |  |   +---PolicyRule\n\
    \      |  |\n      |  +---PolicyCondition (abstract)\n      |  |   |\n      |\
    \  |   +---PolicyTimePeriodCondition\n      |  |   |\n      |  |   +---VendorPolicyCondition\n\
    \      |  |   |\n      |  |   +---SimplePolicyCondition\n      |  |   |\n    \
    \  |  |   +---CompoundPolicyCondition\n      |  |       |\n      |  |       +---CompoundFilterCondition\n\
    \      |  |\n      |  +---PolicyAction (abstract)\n      |  |   |\n      |  |\
    \   +---VendorPolicyAction\n      |  |   |\n      |  |   +---SimplePolicyAction\n\
    \      |  |   |\n      |  |   +---CompoundPolicyAction\n      |  |\n      |  +---PolicyVariable\
    \ (abstract)\n      |  |   |\n      |  |   +---PolicyExplicitVariable\n      |\
    \  |   |\n      |  |   +---PolicyImplicitVariable\n      |  |       |\n      |\
    \  |       +---(subtree of more specific classes)\n      |  |\n      |  +---PolicyValue\
    \ (abstract)\n      |      |\n      |      +---(subtree of more specific classes)\n\
    \                     Figure 6: PCIM Class Inheritance\n   The policy classes\
    \ and associations defined in PCIM are sufficiently\n   generic to allow them\
    \ to represent policies related to anything.\n   Policy models for application-specific\
    \ areas such as the Path\n   Computation Service may extend the PCIM in several\
    \ ways.  The\n   preferred way is to use the PolicyGroup, PolicyRule, and\n  \
    \ PolicyTimePeriodCondition classes directly as a foundation for\n   representing\
    \ and communicating policy information.  Then, specific\n   subclasses derived\
    \ from PolicyCondition and PolicyAction can capture\n   application-specific definitions\
    \ of conditions and actions of\n   policies.\n   The Policy Quality of Service\
    \ Information Model [RFC3644] further\n   extends the PCIM to represent QoS policy\
    \ information for large-scale\n   policy domains.  New classes introduced in this\
    \ document describing\n   QoS- and RSVP-related variables, conditions, and actions\
    \ can be used\n   as a foundation for the PCPIM.\n   Detailed description of the\
    \ PCPIM will be provided in a separate\n   document.\n"
- title: 5.  Policy-Enabled Path Computation Framework Components
  contents:
  - "5.  Policy-Enabled Path Computation Framework Components\n   The following components\
    \ are defined as part of the framework to\n   support policy-enabled path computation:\n\
    \   - PCE Policy Repository\n     A database from which PCE policies are available\
    \ in the form of\n     instances of PCPIM classes.  PCE Policies are configured\
    \ and\n     managed by PCE Policy Management Tools;\n   - PCE Policy Decision\
    \ Point (PCE-PDP)\n     A logical entity capable of retrieving relevant path computation\n\
    \     policies from one or more Policy Repositories and delivering the\n     information\
    \ to associated PCE-PEP(s);\n   - PCE Policy Enforcement Point (PCE-PEP)\n   \
    \  A logical entity capable of issuing device-specific Path\n     Computation\
    \ Engine configuration requests for the purpose of\n     enforcing the policies;\n\
    \   - PCC Policy Decision Point (PCC-PDP)\n     A logical entity capable of retrieving\
    \ relevant path computation\n     policies from one or more Policy Repositories\
    \ and delivering the\n     information to associated PCC-PEP(s);\n   - PCC Policy\
    \ Enforcement Point (PCC-PEP)\n     A logical entity capable of issuing device-specific\
    \ Path\n     Computation Service User configuration requests for the purpose of\n\
    \     enforcing the policies.\n   From the policy perspective a PCC is logically\
    \ decomposed into two\n   parts: PCC-PDP and PCC-PEP.  When present, a PCC-PEP\
    \ is co-located\n   with a Path Computation Service User entity that requires\
    \ remote path\n   computation (for example, the GMPLS control plane of an LSR).\
    \  The\n   PCC-PEP and PCC-PDP may be physically co-located (as per [RFC2748])\n\
    \   or separated.  In the latter case, they talk to each other via such\n   protocols\
    \ as SOAP [W3CSOAP] or BEEP [RFC3080].\n   Likewise, a PCE is logically decomposed\
    \ into two parts: PCE-PEP and\n   PCE-PDP.  When present, PCE-PEP is co-located\
    \ with a Path Computation\n   Engine entity that actually provides the Path Computation\
    \ Service\n   (that is, runs path computation algorithms).  PCE-PEP and PCE-PDP\
    \ may\n   be physically co-located or separated.  In the later case, they\n  \
    \ communicate using such protocols as SOAP and/or BEEP.\n   PCC-PDP/PCE-PDP may\
    \ be co-located with, or separated from, an\n   associated PCE Policy Repository.\
    \  In the latter case, the PDPs use\n   some access protocol (for example, LDAPv3\
    \ or SNMP).  The task of PDPs\n   is to retrieve policies from the repository\
    \ (or repositories) and\n   convey them to respective PEPs either in an unsolicited\
    \ way or upon\n   the PEP's requests.\n   A PCC-PEP may receive policy information\
    \ not only from PCC-PDP(s) but\n   also from PCE-PEP(s) via PCC-PCE communication\
    \ and/or PCE discovery\n   protocols.  Likewise, a PCE-PEP may receive policy\
    \ information not\n   only from PCE-PDP(s) but also from PCC-PEP(s), via the PCC-PCE\n\
    \   communication protocol [PCEP].\n   Any given policy can be interpreted (that\
    \ is, translated into a\n   sequence of concrete device specific configuration\
    \ requests) either\n   on a PDP or on the associated PEP or partly on the PDP\
    \ and partly on\n   the PEP.\n   Generally speaking, the task of the PCC-PEP is\
    \ to select the PCE and\n   build path computation requests applying service-specific\
    \ policies\n   provided by the PCC-PDP.  The task of the PCE-PEP is to control\
    \ path\n   computations by applying request-specific policies found in the\n \
    \  requests as well as client-specific and domain-specific policies\n   supplied\
    \ by the PCE-PDP.\n"
- title: 6.  Policy Component Configurations
  contents:
  - '6.  Policy Component Configurations

    '
- title: 6.1.  PCC-PCE Configurations
  contents:
  - "6.1.  PCC-PCE Configurations\n   The PCE policy architecture supports policy\
    \ being applied at a PCC\n   and at a PCE.  While the architecture supports policy\
    \ being applied\n   at both, there is no requirement for policy to always be applied\
    \ at\n   both, or even at either.  The use of policy in a network, on PCCs,\n\
    \   and on PCEs, is a specific network design choice.  Some networks may\n   choose\
    \ to apply policy only at PCCs (Figure 7), some at PCEs (Figure\n   8), and others\
    \ at both PCCs and PCEs (Figure 9).  Regardless of where\n   policy is applied,\
    \ it must be applied in a consistent fashion in\n   order to achieve the intended\
    \ results.\n                         .........................\n             \
    \            .                       .\n                         . PCE Policy\
    \ Management .\n                         .                       .\n         \
    \                .........................\n                                 \
    \    .\n                                     .\n    ---------  Policy     -----------------------\n\
    \   | PCC-PDP |<--------- | PCE Policy Repository |\n    ---------           \
    \  -----------------------\n        ^\n        | e.g., SOAP\n        v\n    ---------\
    \                     PCEP                      ---------\n   | PCC-PEP |<------------------------------------------->|\
    \   PCE   |\n    ---------         PCC-PCE Communication Protocol        ---------\n\
    \                  Figure 7: Policies Applied on PCC Only\n   Along with supporting\
    \ flexibility in where policy may be applied, the\n   PCE architecture is also\
    \ flexible in terms of where specific types of\n   policies may be applied.  Also,\
    \ the PCE architecture allows for the\n   application of only a subset of policy\
    \ types.  [RFC4655] defines\n   several PC policy types.  Each of these may be\
    \ applied at either a\n   PCC or a PCE or both.  Clearly, when policy is only\
    \ applied at PCCs\n   or at PCEs, all PCE policy types used in the network must\
    \ be applied\n   at those locations.\n                         .........................\n\
    \                         .                       .\n                        \
    \ . PCE Policy Management .\n                         .                      \
    \ .\n                         .........................\n                    \
    \                 .\n                                     .\n                \
    \          -----------------------  Policy    ---------\n                    \
    \     | PCE Policy Repository | -------->| PCE-PDP |\n                       \
    \   -----------------------            ---------\n                           \
    \                                     ^\n                                    \
    \                 e.g., SOAP |\n                                             \
    \                   v\n    ---------                     PCEP                \
    \      ---------\n   |   PCC   |<------------------------------------------->|\
    \ PCE-PEP |\n    ---------         PCC-PCE Communication Protocol        ---------\n\
    \                    Figure 8: Policies Applied on Only\n   In the case where\
    \ policy is only applied at a PCE, it is expected\n   that the PCC will pass to\
    \ the PCE all information about the service\n   that it can gather in the path\
    \ computation request (most likely in\n   the form of PCPIM policy variables).\
    \  The PCE is expected to\n   understand this information and apply appropriate\
    \ policies while\n   defining the actual parameters of the path computation to\
    \ be\n   performed.  Note that in this scenario, the PCC cannot apply server-\n\
    \   specific or any other policies, and PCE selection is static.\n   When applying\
    \ policy at both the PCC and PCE, it is necessary to\n   select which types of\
    \ policies are applied at each.  In such\n   configurations, it is likely that\
    \ the application of policy types\n   will be distributed across the PCC and PCE\
    \ rather than applying all\n   of them at both.  For example, user-specific and\
    \ server-specific\n   policies may be applied at a PCC, request- and client-specific\n\
    \   policies may be applied at a PCE, while domain-specific policies may\n   be\
    \ applied at both the PCC and PCE.\n   In the case when policy is only applied\
    \ at a PCC, the PCC must apply\n   all the types of required policies, for example\
    \ user-, service-,\n   server-, and domain-specific policies.  The PCC uses the\
    \ policies to\n   construct a path computation request that appropriately represents\n\
    \   the applied policies.  The request will necessarily be limited to the\n  \
    \ set of \"basic\" (that is, non-policy capable) constraints explicitly\n   defined\
    \ by the PCC-PCE communication protocol.\n"
- title: 6.2.  Policy Repositories
  contents:
  - "6.2.  Policy Repositories\n   Within the policy-enabled path computation framework\
    \ policy\n   repositories may be used in a single or multiple PCE policy\n   repository\
    \ configuration:\n   o) Single PCE Policy Repository\n   In this configuration,\
    \ there is a single PCE Policy Repository shared\n   between PCCs and PCEs.\n\
    \                         .........................\n                        \
    \ .                       .\n                         . PCE Policy Management\
    \ .\n                         .                       .\n                    \
    \     .........................\n                                     .\n    \
    \                                 .\n    ---------  Policy a   -----------------------\
    \  Policy b  ---------\n   | PCC-PDP |<--------- | PCE Policy Repository | -------->|\
    \ PCE-PDP |\n    ---------             -----------------------            ---------\n\
    \        ^                                                       ^\n        |\
    \ e.g., SOAP                                 e.g., SOAP |\n        v         \
    \                                              v\n    ---------              \
    \       PCEP                      ---------\n   | PCC-PEP |<------------------------------------------->|\
    \ PCE-PEP |\n    ---------         PCC-PCE Communication Protocol        ---------\n\
    \                Figure 9: Single PCC/PCE Policy Repository\n   o) Multiple PCE\
    \ Policy Repositories\n   The repositories in this case may be fully or partially\
    \ synchronized\n   by some discovery/synchronization management protocol or may\
    \ be\n   completely independent.  Note that the situation when PCE Policy\n  \
    \ Repository A exactly matches PC Policy Repository B, results in the\n   single\
    \ PCE Policy Repository configuration case.\n             --------------     \
    \              --------------\n            |  PCE Policy  |                 |\
    \  PCE Policy  |\n         ---| Repository A |                 | Repository B\
    \ |---\n        |    --------------                   --------------    |\n  \
    \      |                                                       |\n        | Policy\
    \ a                                     Policy b |\n        |                \
    \                                       |\n        v                         \
    \                              v\n    ---------                              \
    \                 ---------\n   | PCC-PDP |                                  \
    \           | PCE-PDP |\n    ---------                                       \
    \        ---------\n        ^                                                \
    \       ^\n        | e.g., SOAP                                 e.g., SOAP |\n\
    \        v                                                       v\n    ---------\
    \                     PCEP                      ---------\n   | PCC-PEP |<------------------------------------------->|\
    \ PCE-PEP |\n    ---------         PCC-PCE Communication Protocol        ---------\n\
    \              Figure 10: Multiple PCE/PCC Policy Repositories\n"
- title: 6.3.  Cooperating PCE Configurations
  contents:
  - "6.3.  Cooperating PCE Configurations\n   The previous section shows the relationship\
    \ between PCCs and PCEs.  A\n   parallel relationship exists between cooperating\
    \ PCEs, and, in fact,\n   this relationship can be viewed as the same as the relationship\n\
    \   between PCCs and PCEs.  The one notable difference is that there will\n  \
    \ be cases where having a shared PCE Policy Repository will not be\n   desirable,\
    \ for example, when the PCEs are managed by different\n   entities.  Note that\
    \ in this case, it still remains necessary for the\n   policies to be consistent\
    \ across the domains in order to identify\n   usable paths.  The other notable\
    \ difference is that a PCE, while\n   processing a path computation request, may\
    \ need to apply requester-\n   specific (that is, client-specific) policies in\
    \ order to modify the\n   request before sending it to other cooperating PCE(s).\
    \  This\n   relationship is particularly important as the PCE architecture allows\n\
    \   for configuration where all PCCs are not policy-enabled.\n   The following\
    \ are example configurations.  These examples do not\n   represent an exhaustive\
    \ list and other configurations are expected.\n   o) Single Policy Repository\n\
    \   In this configuration, there is a single PCE Policy Repository shared\n  \
    \ between PCEs.  This configuration is likely to be useful within a\n   single\
    \ administrative domain where multiple PCEs are provided for\n   redundancy or\
    \ load distribution purposes.\n                         .........................\n\
    \                         .                       .\n                        \
    \ . PCE Policy Management .\n                         .                      \
    \ .\n                         .........................\n                    \
    \                 .\n                                     .\n    ---------  Policy\
    \ a   -----------------------  Policy b  ---------\n   | PCE-PDP |<--------- |\
    \ PCE Policy Repository | -------->| PCE-PDP |\n    ---------             -----------------------\
    \            ---------\n        ^                                            \
    \           ^\n        | e.g., SOAP                                 e.g., SOAP\
    \ |\n        v                                                       v\n    ---------\
    \                                               ---------\n   | PCE-PEP |<------------------------------------------->|\
    \ PCE-PEP |\n    ---------         PCE-PCE Communication Protocol        ---------\n\
    \                  Figure 11: Single PCC Policy Repository\n   o) Multiple Policy\
    \ Repositories\n   The repositories in this case may be fully or partially synchronized\n\
    \   by some discovery/synchronization management protocol(s) or may be\n   completely\
    \ independent.  In the multi-domain case, it is expected\n   that the repositories\
    \ will be distinct, providing, however,\n   consistent policies.\n           \
    \  --------------                   --------------\n            |  PCE Policy\
    \  |                 |  PCE Policy  |\n         ---| Repository A |          \
    \       | Repository B |---\n        |    --------------                   --------------\
    \    |\n        |                                                       |\n  \
    \      | Policy a                                     Policy b |\n        |  \
    \                                                     |\n        v           \
    \                                            v\n    ---------                \
    \                               ---------\n   | PCE-PDP |                    \
    \                         | PCE-PDP |\n    ---------                         \
    \                      ---------\n        ^                                  \
    \                     ^\n        | e.g., SOAP                                \
    \ e.g., SOAP |\n        v                                                    \
    \   v\n    ---------                     PCEP                      ---------\n\
    \   | PCE-PEP |<------------------------------------------->| PCE-PEP |\n    ---------\
    \         PCC-PCE Communication Protocol        ---------\n                Figure\
    \ 12: Multiple PCC Policy Repositories\n"
- title: 6.4.  Policy Configuration Management
  contents:
  - "6.4.  Policy Configuration Management\n   The management of path computation\
    \ policy information used by PCCs\n   and PCEs is largely out of scope of the\
    \ described framework.  The\n   framework assumes that such information is installed,\
    \ removed, and\n   otherwise managed using typical policy management techniques.\
    \  Policy\n   Repositories may be populated and managed via static configuration,\n\
    \   standard and proprietary policy management tools, or even dynamically\n  \
    \ via policy management/discovery protocols and applications.\n"
- title: 7.  Inter-Component Communication
  contents:
  - '7.  Inter-Component Communication

    '
- title: 7.1.  Policy Communication
  contents:
  - "7.1.  Policy Communication\n   Flexibility in the application of policy types\
    \ is imperative from the\n   architecture perspective.  However, this commodity\
    \ implies added\n   complexity on the part of the PCE-related communication protocols.\n\
    \   One added complexity is that PCE communication protocols must carry\n   certain\
    \ information to support various policy types that may be\n   applied.  For example,\
    \ in the case where policy is only applied at a\n   PCE, a PCC-PCE request must\
    \ carry sufficient information for the PCE\n   to apply service- or user-specific\
    \ policies.  This does imply that a\n   PCC must have sufficient understanding\
    \ of what policies can be\n   applied at the PCE.  Such information may be obtained\
    \ via local\n   configuration, static coding, or even via a PCE discovery mechanism.\n\
    \   The PCC must also have sufficient understanding to properly encode\n   the\
    \ required information for each policy type.\n   Another added complexity is that\
    \ PCE communication protocols must\n   also be able to carry information that\
    \ may result from a policy\n   decision.  For example, user- or service-specific\
    \ policy applied at a\n   PCC may result in policy-related information that must\
    \ be carried\n   along with the request for use by a PCE.  This complexity is\n\
    \   particularly important as it may be used to introduce new path\n   computation\
    \ parameters (e.g., constraints, objection functions, etc.)\n   without modification\
    \ of the core PCC and PCE.  This communication\n   will likely simply require\
    \ the PCE communication protocols to support\n   opaque policy-related information\
    \ elements.\n   A final added complexity is that PCE communication protocols must\n\
    \   also be able to support updated or unsolicited responses from a PCE.\n   For\
    \ example, changes in PCE policy may force a change to a previously\n   provided\
    \ path.  Such updated or unsolicited responses may contain\n   information that\
    \ the PCC must act on, and may contain policy\n   information that must be provided\
    \ to a PCC.\n   PCC-PEP and PCE-PEP or a pair of PCE-PEPs communicate via a request-\n\
    \   response type PCC-PCE Communication Protocol, i.e., [PCEP].  This\n   document\
    \ makes no assumptions as to what exact protocol is used to\n   support this communication.\
    \  This document does assume that the\n   semantics of a path computation request\
    \ are sufficiently abstract and\n   general, and support both PCE-PCC and PCE-PCE\
    \ communication.\n   From a policy perspective, a path computation request should\
    \ include\n   at a minimum:\n   o One or more source addresses;\n   o One or more\
    \ destination addresses;\n   o Computation type (P2P (point to point), P2MP (point\
    \ to multipoint),\n     MP2P (multipoint to point), etc.);\n   o Number of required\
    \ paths;\n   o Zero or more policy descriptors in the following format:\n    \
    \ <policy name>,\n     <policy variable1 name>, <param11>, <param12>,...,<param1N>\n\
    \     <policy variable2 name>, <param21>, <param12>,...,<param2N>\n     ...\n\
    \     <policy variableM name>, <paramM1>, <paramM2>,...,<paramMN>\n   A successful\
    \ path computation response, at minimum, should include\n   the list of computed\
    \ paths and may include policies (in the form of\n   policy descriptors as in\
    \ path computation request, see above) for use\n   in evaluating and otherwise\
    \ applying the computed paths.\n   PCC-PCE Communication Protocol provides transport\
    \ for policy\n   information and should not understand nor make any assumptions\
    \ about\n   the semantics of policies specified in path computation requests and\n\
    \   responses.\n   Note: This document explicitly allows for (but does not require)\
    \ the\n   PCC to decide that all necessary constraints, objective functions,\n\
    \   etc.  pertinent to the computation of paths for the service in\n   question\
    \ are to be determined by the PCE performing the computation.\n   In this case,\
    \ the PCC will use a set of policies (more precisely,\n   PCPIM policy variables)\
    \ describing the service-specific information.\n   These policies may be placed\
    \ within the path computation request and\n   delivered to the PCE via a PCC-PCE\
    \ communication protocol such as\n   [PCEP].  The PCE (more precisely, PCE-PEP)\
    \ is expected to understand\n   this information and use it to determine the constraints\
    \ and\n   optimization functions applying local policies (that is, policies\n\
    \   locally configured or provided by the associated PCE-PDP(s)).\n"
- title: 7.2.  PCE Discovery Policy Considerations
  contents:
  - "7.2.  PCE Discovery Policy Considerations\n   Dynamic PCE discovery allows for\
    \ PCCs and PCEs to automatically\n   discover a set of PCEs (including information\
    \ required for the PCE\n   selection).  It also allows for PCCs and PCEs to dynamically\
    \ detect\n   new PCEs or any modification of PCEs status.  Policy can be applied\n\
    \   in two ways in this context:\n   1. Restricting the scope of information distribution\
    \ for the\n      mandatory set of information (in particular the PCE presence\
    \ and\n      location).\n   2. Restricting the type and nature of the optional\
    \ information\n      distributed by the discovery protocol.  The latter is also\
    \ subject\n      to policy since the PCE architecture allows for distributing\
    \ this\n      information using either PCE discovery protocol(s) or PCC-PCE\n\
    \      communication protocol(s).  One important policy decision in this\n   \
    \   context is the nature of the information to be distributed,\n      especially,\
    \ when this information is not strictly speaking\n      \"discovery\" information,\
    \ rather, the PCE state changes.  Client-\n      specific and domain-specific\
    \ policies may be applied when deciding\n      whether this information should\
    \ be distributed and to which\n      clients of the path computation service (that\
    \ is, which PCCs\n      and/or PCEs).\n   Another place where policy applies is\
    \ at the administrative\n   boundaries.  In multi-domain networks, multiple PCEs\
    \ will communicate\n   with each other and across administrative boundaries. \
    \ In such cases,\n   domain-specific policies would be applied to 1) filter the\n\
    \   information exchanged between peering PCEs during the discovery\n   process\
    \ (to the bare minimum in most cases if at all allowed by the\n   security policy)\
    \ and 2) limit the content of information being passed\n   in path computation\
    \ request and responses.\n"
- title: 8.  Path Computation Sequence of Events
  contents:
  - "8.  Path Computation Sequence of Events\n   This section presents a non-exhaustive\
    \ list of representative\n   scenarios.\n"
- title: 8.1.  Policy-Enabled PCC, Policy-Enabled PCE
  contents:
  - "8.1.  Policy-Enabled PCC, Policy-Enabled PCE\n   When a GMPLS LSR receives a\
    \ Setup (RSVP Path) message from an\n   upstream LSR, the LSR may decide to use\
    \ a remote Path Computation\n   Entity.  The following sequence of events occurs\
    \ in this case:\n   - A PCC-PEP co-located with the LSR applies the service-specific\n\
    \     policies to select a PCE for the service path computation as well\n    \
    \ as to build the path computation request (that is, to select a list\n     of\
    \ policies, their variables, conditions and actions expressing\n     constraints,\
    \ diversities, objective functions and relaxation\n     strategies appropriate\
    \ for the service path computation).  The\n     policies may be:\n     a) Statically\
    \ configured on the PCC-PEP;\n     b) Communicated to the PCC-PEP by a remote\
    \ or local PCC-PDP via\n        protocol such as SOAP either proactively (most\
    \ of the cases) or\n        upon an explicit request by the PCC-PEP in cases when\
    \ some\n        specifics of the new service have not been covered yet by the\n\
    \        policies so far known to the PCC-PEP).\n     The input for the decision\
    \ process on the PCC-PEP is the\n     information found in the signaling message\
    \ as well as any other\n     service-specific information such as port ID over\
    \ which the message\n     was received, associated VPN ID, the reference point\
    \ type (UNI,\n     E-NNI, etc.) and so forth.  After the path computation request\
    \ is\n     built, it is sent directly to the PCE-PEP using the PCC-PCE\n     Communication\
    \ Protocol, e.g., [PCEP].\n   - PCE-PEP validates and otherwise processes the\
    \ request applying the\n     policies found in the request- as well as client-\
    \ and domain-\n     specific policies.  The latter, again, may be either statically\n\
    \     configured on the PCE-PEP or provided by the associated local or\n     remote\
    \ PCE-PDP via a protocol such as SOAP.  The outcome of the\n     decision process\
    \ is the following information:\n     a) Whether the request should be satisfied,\
    \ rejected, or dismissed.\n     b) The sets of sources and destinations for which\
    \ paths should be\n        locally computed.\n     c) The set of constraints,\
    \ diversities, optimization functions, and\n        relaxations to be considered\
    \ in each of locally performed path\n        computation.\n     d) The address\
    \ of the next-in-chain PCE.\n     e) The path computation request to be sent to\
    \ the next-in-chain\n        PCE.\n     The PCE-PEP instructs a co-located path\
    \ computation engine to\n     perform the local path computation(s) and, if necessary,\
    \ sends the\n     path computation request to the next-in-chain PCE using a PCC-PCE\n\
    \     Communication Protocol.  Then, it waits for the responses from the\n   \
    \  local path computation engine and the remote PCE, combines the\n     resulting\
    \ paths, and sends them back to the PCC-PEP using the PCC-\n     PCE Communication\
    \ Protocol.  The response contains the resulting\n     paths as well as policies\
    \ describing some additional information\n     (for example, which of constraints\
    \ were honored, which were\n     dismissed, and which were relaxed and in what\
    \ way).\n   - PCC-PEP instructs the signaling subsystem of the GMPLS LSR to\n\
    \     encode the received path(s) into the outgoing Setup message(s).\n"
- title: 8.2.  Policy-Ignorant PCC, Policy-Enabled PCE
  contents:
  - "8.2.  Policy-Ignorant PCC, Policy-Enabled PCE\n   This case parallels the previous\
    \ example, but the user- and service-\n   specific policies should be applied\
    \ at the PCE as the PCC is policy\n   ignorant.  Again, when a GMPLS LSR has received\
    \ a Setup (RSVP Path)\n   message from an upstream LSR, the LSR may decide to\
    \ use a non-co-\n   located Path Computation Entity.  The following sequence of\
    \ events\n   occurs in this case:\n   - The PCC constructs a PCE request using\
    \ information found in the\n     signaling/provisioning message as well as any\
    \ other service-\n     specific information such as port ID over which the message\
    \ was\n     received, associated VPN ID, the reference point type (UNI, E-NNI,\n\
    \     etc.) and so forth.  This information is encoded in the request in\n   \
    \  the form of policy variables.  After the request is built, it is\n     sent\
    \ directly to the PCE-PEP using a PCC-PCE Communication\n     Protocol.\n   -\
    \ PCE-PEP validates and otherwise processes the request interpreting\n     the\
    \ policy variables found in the request and applying user-,\n     service-, client-,\
    \ and domain-specific policies to build the actual\n     path computation request.\
    \  The policies, again, may be either\n     statically configured on the PCE-PEP\
    \ or provided by the associated\n     local or remote PCE-PDP via a protocol such\
    \ as SOAP.  The outcome\n     of the decision process is the following information:\n\
    \     a) Whether the request should be satisfied, rejected, or dismissed.\n  \
    \   b) The sets of sources and destinations for which paths should be\n      \
    \  locally computed.\n     c) The set of constraints, diversities, optimization\
    \ functions, and\n        relaxations to be considered in each of locally performed\
    \ path\n        computation.\n     d) The address of the next-in-chain PCE.\n\
    \     e) The path computation request to be sent to the next-in-chain\n      \
    \  PCE.\n     The PCE-PEP instructs a co-located path computation engine to\n\
    \     perform the local path computation(s) and, if necessary, sends the\n   \
    \  path computation request to the next-in-chain PCE using the PCC-PCE\n     Communication\
    \ Protocol.  Then, it waits for the responses from the\n     local path computation\
    \ engine and the remote PCE, combines the\n     resulting paths, and sends them\
    \ back to the PCC-PEP using the PCC-\n     PCE Communication Protocol.  The response\
    \ contains the resulting\n     paths as well as policies describing some additional\
    \ information\n     (for example, which of constraints were honored, which were\n\
    \     dismissed, and which were relaxed and in what way)\n   - PCC-PEP instructs\
    \ the signaling sub-system of the GMPLS LSR to\n     encode the received path(s)\
    \ into the outgoing Setup message(s).\n"
- title: 9.  Introduction of New Constraints
  contents:
  - "9.  Introduction of New Constraints\n   An important aspect of the policy-enabled\
    \ path computation framework\n   discussed above is the ability to introduce new\
    \ constraints with\n   minimal impact.  In particular, only those components and\
    \ mechanisms\n   that will use a new constraint need to be updated in order to\
    \ support\n   the new constraint.  Importantly, those components and mechanisms\n\
    \   that will not use the new constraint must not require any change in\n   order\
    \ for the new constraint to be utilized.  For example, the PCE\n   communication\
    \ protocols must not require any changes to support new\n   constraints.  Likewise,\
    \ PCC and PCEs that will not process new\n   constraints must not require any\
    \ modification.\n   Consider the case where a PCE has been upgraded with software\n\
    \   supporting optical physical impairment constraint, such as\n   Polarization\
    \ Mode Dispersion (PMD), that previously was not supported\n   in the domain.\
    \  In this case, one or more new policies will be\n   installed in the PCE Policy\
    \ Repository (associated with the PCE)\n   defining the constraint (rules that\
    \ determine application criteria,\n   set of policy variables, conditions, actions,\
    \ etc.) and its\n   relaxation strategy (or strategies).  The new policies will\
    \ be also\n   propagated into other PCE Policy Repositories within the domain\
    \ via\n   discovery and synchronization protocols or via local configuration.\n\
    \   PCE-PDPs and PCC-PDPs will then retrieve the corresponding policies\n   from\
    \ the repository (or repositories).  From then on, PCC-PDPs will\n   instruct\
    \ associated PCC-PEPs to add the new policy information into\n   path computation\
    \ requests for services with certain parameters (for\n   example, for services\
    \ provisioned in the optical channel (OCh)\n   layer).\n   It is important to\
    \ note that policy-enabled path computation model\n   naturally solves the PCE\
    \ capability discovery issues.  Suppose a PCE\n   working in a single PCE Policy\
    \ Repository configuration starts to\n   support a new constraint.  Once a corresponding\
    \ policy installed in\n   the repository, it automatically becomes available for\
    \ all repository\n   users, that is, PCCs.  In the multi-repository case some\
    \ policy\n   synchronization must be provided; however, this problem is one of\
    \ the\n   management plane which is solved already.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This document adds to the policy security considerations\
    \ mentioned in\n   [RFC4655].  In particular, it is now necessary to consider\
    \ the\n   security issues related to policy information maintained in PCE\n  \
    \ Policy Repositories and policy-related transactions.  The most\n   notable issues,\
    \ some of which are also listed in [RFC4655], are:\n   - Unauthorized access to\
    \ the PCE Policy Repositories;\n   - Interception of policy information when it\
    \ is retrieved from the\n     repositories and/or transported from PDPs to PEPs;\n\
    \   - Interception of policy-related information in path computation\n     requests\
    \ and responses;\n     o  Impersonation of user and client identities;\n     o\
    \  Falsification of policy information and/or PCE capabilities;\n     o  Denial-of-service\
    \ attacks on policy-related communication\n        mechanisms.\n   As with [RFC4655],\
    \ it is expected that PCE solutions will address the\n   PCE aspects of these\
    \ issues in detail.\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   Adrian Farrel contributed significantly to this document.\
    \  We would\n   like to thank Bela Berde for fruitful discussions on PBM and policy-\n\
    \   driven path computation.  We would also like to thank Kobus Van der\n   Merwe\
    \ for providing insights and examples regarding PCE policy\n   applications.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2753]  Yavatkar, R., Pendarakis, D., and\
    \ R. Guerin, \"A Framework\n              for Policy-based Admission Control\"\
    , RFC 2753, January\n              2000.\n   [RFC3060]  Moore, B., Ellesson, E.,\
    \ Strassner, J., and A. Westerinen,\n              \"Policy Core Information Model\
    \ -- Version 1\n              Specification\", RFC 3060, February 2001.\n   [RFC3209]\
    \  Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan, V.,\n              and\
    \ G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n              Tunnels\",\
    \ RFC 3209, December 2001.\n   [RFC3460]  Moore, B., Ed., \"Policy Core Information\
    \ Model (PCIM)\n              Extensions\", RFC 3460, January 2003.\n   [RFC3473]\
    \  Berger, L., Ed., \"Generalized Multi-Protocol Label\n              Switching\
    \ (GMPLS) Signaling Resource ReserVation\n              Protocol-Traffic Engineering\
    \ (RSVP-TE) Extensions\", RFC\n              3473, January 2003.\n   [RFC3644]\
    \  Snir, Y., Ramberg, Y., Strassner, J., Cohen, R., and B.\n              Moore,\
    \ \"Policy Quality of Service (QoS) Information\n              Model\", RFC 3644,\
    \ November 2003.\n   [RFC4216]  Zhang, R., Ed., and J.-P. Vasseur, Ed., \"MPLS\
    \ Inter-\n              Autonomous System (AS) Traffic Engineering (TE)\n    \
    \          Requirements\", RFC 4216, November 2005.\n   [RFC4655]  Farrel, A.,\
    \ Vasseur, J.-P., and J. Ash, \"A Path\n              Computation Element (PCE)-Based\
    \ Architecture\", RFC 4655,\n              August 2006.\n   [RFC4927]  Le Roux,\
    \ J.-L., Ed., \"Path Computation Element\n              Communication Protocol\
    \ (PCECP) Specific Requirements for\n              Inter-Area MPLS and GMPLS Traffic\
    \ Engineering\", RFC 4927,\n              June 2007.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [DMTF]     Common Information Model (CIM) Schema,\
    \ version 2.x.\n              Distributed Management Task Force, Inc. The components\
    \ of\n              the CIM v2.x schema are available via links on the\n     \
    \         following DMTF web page:\n              http://www.dmtf.org/standards/standard_cim.php.\n\
    \   [IRSCP]    Van der Merwe, J., et al., \"Dynamic Connectivity\n           \
    \   Management with an Intelligent Route Service Control\n              Point,\"\
    \ ACM SIGCOMM Workshop on Internet Network\n              Management (INM), Pisa,\
    \ Italy, September 11, 2006.\n   [PCEP]     Vasseur, JP., Ed. and JL. Le Roux,\
    \ Ed., \"Path Computation\n              Element (PCE) Communication Protocol\
    \ (PCEP)\", Work in\n              Progress, November 2008.\n   [RFC2748]  Durham,\
    \ D., Ed., Boyle, J., Cohen, R., Herzog, S., Rajan,\n              R., and A.\
    \ Sastry, \"The COPS (Common Open Policy Service)\n              Protocol\", RFC\
    \ 2748, January 2000.\n   [RFC3031]  Rosen, E., Viswanathan, A., and R. Callon,\
    \ \"Multiprotocol\n              Label Switching Architecture\", RFC 3031, January\
    \ 2001.\n   [RFC3080]  Rose, M., \"The Blocks Extensible Exchange Protocol Core\"\
    ,\n              RFC 3080, March 2001.\n   [RFC3198]  Westerinen, A., Schnizlein,\
    \ J., Strassner, J., Scherling,\n              M., Quinn, B., Herzog, S., Huynh,\
    \ A., Carlson, M., Perry,\n              J., and S. Waldbusser, \"Terminology\
    \ for Policy-Based\n              Management\", RFC 3198, November 2001.\n   [RFC3630]\
    \  Katz, D., Kompella, K., and D. Yeung, \"Traffic Engineering\n             \
    \ (TE) Extensions to OSPF Version 2\", RFC 3630, September\n              2003.\n\
    \   [RFC5376]  Bitar, N., Zhang, R., and K. Kumaki, \"Inter-AS\n             \
    \ Requirements for the Path Computation Element\n              Communication Protocol\
    \ (PCECP)\", RFC 5376, November 2008.\n   [W3CSOAP]  Hadley, M., Mendelsohn, N.,\
    \ Moreau, J., Nielsen, H., and\n              Gudgin, M., \"SOAP Version 1.2 Part\
    \ 1: Messaging\n              Framework\", W3C REC REC-soap12-part1-20030624,\
    \ June 2003.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Igor Bryskin\n   ADVA Optical\n   7926 Jones Branch Drive\n\
    \   Suite 615\n   McLean, VA 22102\n   EMail: ibryskin@advaoptical.com\n   Dimitri\
    \ Papadimitriou\n   Alcatel\n   Fr. Wellesplein 1,\n   B-2018 Antwerpen, Belgium\n\
    \   Phone: +32 3 240-8491\n   EMail: dimitri.papadimitriou@alcatel.be\n   Lou\
    \ Berger\n   LabN Consulting, LLC\n   Phone: +1 301 468 9228\n   EMail: lberger@labn.net\n\
    \   Jerry Ash\n   AT&T\n   EMail: gash5107@yahoo.com\n"
