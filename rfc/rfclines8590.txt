Abstract This document describes an Extensible Provisioning Protocol (EPP) extension for notifying clients of operations on client sponsored objects that were not initiated by the client through EPP.
These operations may include contractual or policy requirements including, but not limited to, regular batch processes, customer support actions, Uniform Domain Name Dispute Resolution Policy (UDRP) or Uniform Rapid Suspension (URS) actions, court directed actions, and bulk updates based on customer requests.
Since the client is not directly involved or knowledgable of these operations, the extension is used along with an EPP object mapping to provide the resulting state of the postoperation object, and optionally a preoperation object, with the operation metadata of what, when, who, and why. 1.
This document describes an extension mapping for version 1.0 of the Extensible Provisioning Protocol (EPP)
This mapping, an extension to EPP object mappings like the EPP domain name mapping [RFC5731], is used to notify clients of operations they are not directly involved in, on objects that the client sponsors.
It is up to server policy to determine what transform operations and clients to notify.
Using this extension, clients can more easily keep their systems in sync with the objects stored in the server.
When a change occurs that a client needs to be notified of, a poll message can be inserted by the server for consumption by the client using the EPP <poll> command and response defined in [RFC5730].
The extension supports including a "before" operation poll message and an "after" operation poll message.
The extension only extends the EPP <poll> response in [RFC5730] and does not extend the EPP <poll> command.
Please refer to [RFC5730] for information and examples of the EPP <poll> command.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
Unless stated otherwise, XML specifications and examples provided in this document MUST be interpreted in the character case presented in order to develop a conforming implementation.
In examples, "C:" represents lines sent by a protocol client, and "S:" represents lines returned by a protocol server.
Indentation and white space in examples are provided only to illustrate element relationships and are not a REQUIRED feature of this protocol.
The XML namespace prefix "changePoll" is used for the namespace "urn:ietf:params:xml:ns:changePoll 1.0", but implementations MUST NOT depend on it; instead, they should employ a proper namespace aware XML parser and serializer to interpret and output the XML documents.
This extension adds additional elements to EPP object mappings like the EPP domain name mapping [RFC5731].
Only those new elements are described here.
An operation consists of any transform operation that impacts objects that the client sponsors and should be notified of.
The <changePoll:operation> element defines the operation.
The OPTIONAL "op" attribute is an identifier, represented in the 7 bit US ASCII character set defined in [RFC20], that is used to define a sub  operation or the name of a "custom" operation.
The enumerated list of <changePoll:operation> values is: "create":  Create operation as defined in [RFC5730]. "delete":  Delete operation as defined in [RFC5730].
If the delete operation results in an immediate purge of the object, then the "op" attribute MUST be set to "purge".
"renew":  Renew operation as defined in [RFC5730].
"transfer":  Transfer operation as defined in [RFC5730] that MUST set the "op" attribute with one of the possible transfer type values; these include "request", "approve", "cancel", or "reject".
"update":  Update operation as defined in [RFC5730].
"restore":  Restore operation as defined in [RFC3915] that MUST set the "op" attribute with one of the possible restore type values; these include "request" or "report". "autoRenew":  Auto renew operation executed by the server.
Auto delete operation executed by the server.
If the "autoDelete" operation results in an immediate purge of the object, then the "op" attribute MUST be set to "purge".
"autoPurge":  Auto purge operation executed by the server when removing the object after it has had the status "pendingDelete". "custom":  Custom operation that MUST set the "op" attribute with the custom operation name.
The custom operations supported are up to server policy.
The state attribute reflects the state of the object "before" or "after" the operation.
The state is defined using the OPTIONAL "state" attribute of the <changePoll:changeData
> element, with the possible values "before" or "after" and a default value of "after".
The server MAY support both the "before" state and the "after" state of the operation by using one poll message for the "before" state and one poll message for the "after" state.
The "before" state poll message MUST be inserted into the message queue prior to the "after" state poll message.
For operations in Section 2.1 that don't have an "after" state, the server MUST use the "before" state poll message.
For example, for the "delete" operation with the "op" attribute set to "purge", or the "autoPurge" operation, the server includes the state of the object prior to being purged in the "before" state poll message.
For operations in Section 2.1 that don't have a "before" state, the server MUST use the "after" state poll message.
For example, for the "create" operation, the server includes the state of the object after creation in the "after" state poll message.
Who The <changePoll:who> element defines who executed the operation, for audit purposes.
It is a free form value that is meant strictly for audit purposes and not to drive client side logic.
The scheme used for the possible set of <changePoll:who> element values is up to server policy.
The server MAY identify the <changePoll:who> element value based on: "Identifier":  Unique user identifier of the user that executed the operation.
"Name":  Name of the user that executed the operation.
An example is "John Doe".
"Role":  Role of the user that executed operation.
An example is "CSR" for a Customer Support Representative or "Batch" for a server batch.
Dates and Times Date and time attribute values MUST be represented in Universal Coordinated Time (UTC) using the Gregorian calendar.
The extended date time form using uppercase "T" and "Z" characters defined in [W3C.REC xmlschema 2 20041028]
MUST be used to represent date time values, as XML Schema does not support truncated date time forms or lowercase "T" and "Z" characters.
A detailed description of the EPP syntax and semantics can be found in the EPP core protocol specification [RFC5730].
EPP Query Commands EPP provides three commands to retrieve object information:
<check> to determine if an object is known to the server, <info> to retrieve detailed information associated with an object, and <transfer> to retrieve object transfer status information.
This extension does not add any elements to the EPP <check> command or <check
> response described in [RFC5730].
This extension does not add any elements to the EPP <info> command described in [RFC5730].
This extension adds operational detail of EPP object mapping operations (Section 2.1) to an EPP poll response, as described in [RFC5730].
It is an extension of the EPP object mapping info response.
Any transform operation to an object defined in an EPP object mapping by a client other than the sponsoring client
MAY result in extending the <info> response of the object for inserting an EPP poll message with the operation detail.
The sponsoring client will then receive the state of the object with operation detail like what, who, when, and
why the object was changed.
> element contains the operation detail along with an indication of whether the object reflects the state before or after the operation as defined in Section 2.2.
> element includes the operation detail with the following child elements: <changePoll
:operation>:  Transform operation executed on the object, as defined in Section 2.1.
>:  Date and time when the operation was executed.
Server transaction identifier of the operation.
Who executed the operation, as defined in Section 2.3.
OPTIONAL case identifier associated with the operation.
The required "type" attribute defines the type of case.
The OPTIONAL "name" attribute is an identifier, represented in the 7 bit US ASCII character set defined in [RFC20], that is used to define the name of the "custom" case type.
The enumerated list of case types is: udrp:  A Uniform Domain Name Dispute Resolution Policy (UDRP) case.
A Uniform Rapid Suspension (URS) case.
A custom case that is defined using the "name" attribute.
<changePoll:reason>:  OPTIONAL reason for executing the operation.
If present, this element contains the server specific text to help explain the reason the operation was executed.
This text MUST be represented in the response language previously negotiated with the client; an OPTIONAL "lang" attribute MAY be present to identify the language if the negotiated value is something other than the default value of "en" (English).
The following is an example poll <info> response with the <changePoll:changeData
> extension for a URS lock transaction on the domain.example domain name, with the "before" state.
The "before" state is reflected in the <
resData> block: S:<?xml version "1.0" encoding "UTF 8"?
Command completed successfully; ack to dequeue</msg
<msgQ id "201" count "1"
The following is an example poll <info> response with the <changePoll:changeData
> extension for a URS lock transaction on the domain.example domain name, with the "after" state.
The "after" state is reflected in the <
resData> block: S:<?xml version "1.0" encoding "UTF 8"?
Command completed successfully; ack to dequeue</msg
<msgQ id "202" count "1"
The following is an example poll <info> response with the <changePoll:changeData
> extension for a custom "sync" operation on the domain.example domain name, with the default "after" state.
The "after" state is reflected in the <
resData> block: S:<?xml version "1.0" encoding "UTF 8"?
Command completed successfully; ack to dequeue</msg
<msgQ id "201" count "1"
Registry initiated Sync of Domain Expiration
The following is an example poll <info> response with the <changePoll:changeData
> extension for a "delete" operation on the domain.example domain name that is immediately purged, with the "before" state.
The "before" state is reflected in the <
resData> block: S:<?xml version "1.0" encoding "UTF 8"?
Command completed successfully; ack to dequeue</msg
<msgQ id "200" count "1"
The following is an example poll <info> response with the <changePoll:changeData
> extension for an "autoPurge" operation on the domain.example domain name that previously had the "pendingDelete" status, with the "before" state.
The "before" state is reflected in the <
resData> block: S:<?xml version "1.0" encoding "UTF 8"?
<msgQ id "200" count "1"
Registry purged domain with pendingDelete status.
Past pendingDelete 5 day period
The following is an example poll <info> response with the <changePoll:changeData
> extension for an "update" operation on the ns1.domain.example host, with the default "after" state.
The "after" state is reflected in the <
resData> block: S:<?xml version "1.0" encoding "UTF 8"?
Command completed successfully; ack to dequeue</msg
<msgQ id "201" count "1"
This extension does not add any elements to the EPP <transfer> query command or <transfer> response described in the [RFC5730].
EPP Transform Commands EPP provides five commands to transform objects: <create> to create an instance of an object, <delete> to delete an instance of an object, <renew> to extend the validity period of an object, <transfer> to manage object sponsorship changes, and <update> to change information associated with an object.
This extension does not add any elements to the EPP <create> command or <create> response described in [RFC5730].
This extension does not add any elements to the EPP <delete> command or <delete> response described in [RFC5730].
This extension does not add any elements to the EPP <renew> command or <renew> response described in [RFC5730].
This extension does not add any elements to the EPP <transfer> command or <transfer> response described in [RFC5730].
This extension does not add any elements to the EPP <update> command or <update> response described in [RFC5730].
One schema is presented here: the EPP Change Poll Extension schema.
The formal syntax presented here is a complete schema representation of the object mapping suitable for automated validation of EPP XML instances.
The BEGIN and END tags are not part of the schema; they are used to note the beginning and ending of the schema for URI registration purposes.
Change Poll Extension Schema BEGIN <?
xml version "1.0" encoding "UTF 8"?
Attributes associated with the change.
<element name "operation" type "changePoll:
caseId" type "changePoll:caseIdType" minOccurs "
> <element name "reason" type "eppcom:
> </sequence> <attribute name "state" type "changePoll:stateType" default "after"/
Enumerated list of operations, with extensibility via "custom".
<simpleType name "operationEnum"> <restriction base "token"> <enumeration value "create"/>
Enumerated state of the object in the poll message.
"> <attribute name "op" type "token"/
Who type   <simpleType name "
whoType"> <restriction base "normalizedString"> <minLength value "1"/>
This document uses URNs to describe XML namespaces and XML schemas conforming to a registry mechanism described in [RFC3688].
The following URI assignment has been made by IANA:
Registration for the changePoll namespace:
1.0 Registrant Contact: IESG XML: None.
Namespace URIs do not represent an XML specification.
Registration for the changePoll XML schema: URI:
: See the "Formal Syntax" section of this document.
The EPP extension described in this document has been registered by the IANA in the Extensions for the "Extensible Provisioning Protocol (EPP)" registry described in [RFC7451].
The details of the registration are as follows: Name of Extension: Change Poll Extension for the Extensible Provisioning Protocol
RFC 8590 Registrant Name and Email Address: IESG <iesg@ietf.org
Any IPR Disclosure: None Status:
The mapping extensions described in this document do not provide any security services beyond those described by EPP [RFC5730] and protocol layers used by EPP.
The security considerations described in these other specifications apply to this specification as well.
