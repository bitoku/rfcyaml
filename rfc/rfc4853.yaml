- title: __initial_text__
  contents:
  - "                   Cryptographic Message Syntax (CMS)\n                     Multiple\
    \ Signer Clarification\nStatus of This Memo\n   This document specifies an Internet\
    \ standards track protocol for the\n   Internet community, and requests discussion\
    \ and suggestions for\n   improvements.  Please refer to the current edition of\
    \ the \"Internet\n   Official Protocol Standards\" (STD 1) for the standardization\
    \ state\n   and status of this protocol.  Distribution of this memo is unlimited.\n\
    Copyright Notice\n   Copyright (C) The IETF Trust (2007).\nAbstract\n   This document\
    \ updates the Cryptographic Message Syntax (CMS), which\n   is published in RFC\
    \ 3852.  This document clarifies the proper\n   handling of the SignedData protected\
    \ content type when more than one\n   digital signature is present.\n1.  Introduction\n\
    \   This document updates the Cryptographic Message Syntax [CMS].  The\n   CMS\
    \ SignedData protected content type allows multiple digital\n   signatures, but\
    \ the specification is unclear about the appropriate\n   processing by a recipient\
    \ of such a signed content.  This document\n   provides replacement text for a\
    \ few paragraphs, making it clear that\n   the protected content is validly signed\
    \ by a given signer, if any of\n   the digital signatures from that signer are\
    \ valid.\n   This property is especially important in two cases.  First, when\
    \ the\n   recipients do not all implement the same digital signature algorithm,\n\
    \   a signer can sign the content with several different digital\n   signature\
    \ algorithms so that each of the recipients can find an\n   acceptable signature.\
    \  For example, if some recipients support RSA\n   and some recipients support\
    \ ECDSA, then the signer can generate two\n   signatures, one with RSA and one\
    \ with ECDSA, so that each recipient\n   will be able to validate one of the signatures.\
    \  Second, when a\n   community is transitioning one-way hash functions or digital\n\
    \   signature algorithms, a signer can sign the content with the older\n   and\
    \ the newer signature algorithms so that each recipient can find an\n   acceptable\
    \ signature, regardless of their state in the transition.\n   For example, consider\
    \ a transition from RSA with SHA-1 to RSA with\n   SHA-256.  The signer can generate\
    \ two signatures, one with SHA-1 and\n   one with SHA-256, so that each recipient\
    \ will be able to validate at\n   least one of the RSA signatures.\n2.  Terminology\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in RFC 2119 [STDWORDS].\n\
    3.  Update to RFC 3852, Section 5: Signed-data Content Type\n   RFC 3852, section\
    \ 5, the next to the last paragraph says:\n|  A recipient independently computes\
    \ the message digest.  This message\n|  digest and the signer's public key are\
    \ used to verify the signature\n|  value.  The signer's public key is referenced\
    \ either by an issuer\n|  distinguished name along with an issuer-specific serial\
    \ number or by\n|  a subject key identifier that uniquely identifies the certificate\n\
    |  containing the public key.  The signer's certificate can be included\n|  in\
    \ the SignedData certificates field.\n   This block of text is replaced with:\n\
    |  A recipient independently computes the message digest.  This message\n|  digest\
    \ and the signer's public key are used to verify the signature\n|  value.  The\
    \ signer's public key is referenced either by an issuer\n|  distinguished name\
    \ along with an issuer-specific serial number or by\n|  a subject key identifier\
    \ that uniquely identifies the certificate\n|  containing the public key.  The\
    \ signer's certificate can be included\n|  in the SignedData certificates field.\n\
    |\n|  When more than one signature is present, the successful validation\n|  of\
    \ one signature associated with a given signer is usually treated\n|  as a successful\
    \ signature by that signer.  However, there are some\n|  application environments\
    \ where other rules are needed.  An\n|  application that employs a rule other\
    \ than one valid signature for\n|  each signer must specify those rules.  Also,\
    \ where simple matching of\n|  the signer identifier is not sufficient to determine\
    \ whether the\n|  signatures were generated by the same signer, the application\n\
    |  specification must describe how to determine which signatures were\n|  generated\
    \ by the same signer.  Support of different communities of\n|  recipients is the\
    \ primary reason that signers choose to include more\n|  than one signature. \
    \ For example, the signed-data content type might\n|  include signatures generated\
    \ with the RSA signature algorithm and\n|  with the ECDSA signature algorithm.\
    \  This allows recipients to\n|  verify the signature associated with one algorithm\
    \ or the other.\n4.  Update to RFC 3852, Section 5.1: SignedData Type\n   RFC\
    \ 3852, section 5.1, the next to the last paragraph says:\n|     signerInfos is\
    \ a collection of per-signer information.  There MAY\n|     be any number of elements\
    \ in the collection, including zero.  The\n|     details of the SignerInfo type\
    \ are discussed in section 5.3.\n|     Since each signer can employ a digital\
    \ signature technique and\n|     future specifications could update the syntax,\
    \ all implementations\n|     MUST gracefully handle unimplemented versions of\
    \ SignerInfo.\n|     Further, since all implementations will not support every\
    \ possible\n|     signature algorithm, all implementations MUST gracefully handle\n\
    |     unimplemented signature algorithms when they are encountered.\n   This block\
    \ of text is replaced with:\n|     signerInfos is a collection of per-signer information.\
    \  There MAY\n|     be any number of elements in the collection, including zero.\
    \  When\n|     the collection represents more than one signature, the successful\n\
    |     validation of one of signature from a given signer ought to be\n|     treated\
    \ as a successful signature by that signer.  However,\n|     there are some application\
    \ environments where other rules are\n|     needed.  The details of the SignerInfo\
    \ type are discussed in\n|     section 5.3.  Since each signer can employ a different\
    \ digital\n|     signature technique, and future specifications could update the\n\
    |     syntax, all implementations MUST gracefully handle unimplemented\n|    \
    \ versions of SignerInfo.  Further, since all implementations will\n|     not\
    \ support every possible signature algorithm, all\n|     implementations MUST\
    \ gracefully handle unimplemented signature\n|     algorithms when they are encountered.\n\
    6.  Security Considerations\n   The replacement text will reduce the likelihood\
    \ of interoperability\n   errors during the transition from MD5 and SHA-1 to stronger\
    \ one-way\n   hash functions, or to better signature algorithms.\n7.  Normative\
    \ References\n   [CMS]       Housley, R., \"Cryptographic Message Syntax (CMS)\"\
    , RFC\n               3852, July 2004.\n   [STDWORDS]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\nAuthor's Address\n   Russell Housley\n   Vigil Security,\
    \ LLC\n   918 Spring Knoll Drive\n   Herndon, VA 20170\n   USA\n   EMail: housley@vigilsec.com\n\
    Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\nIntellectual Property\n   The IETF takes\
    \ no position regarding the validity or scope of any\n   Intellectual Property\
    \ Rights or other rights that might be claimed to\n   pertain to the implementation\
    \ or use of the technology described in\n   this document or the extent to which\
    \ any license under such rights\n   might or might not be available; nor does\
    \ it represent that it has\n   made any independent effort to identify any such\
    \ rights.  Information\n   on the procedures with respect to rights in RFC documents\
    \ can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to\
    \ the IETF Secretariat and any\n   assurances of licenses to be made available,\
    \ or the result of an\n   attempt made to obtain a general license or permission\
    \ for the use of\n   such proprietary rights by implementers or users of this\n\
    \   specification can be obtained from the IETF on-line IPR repository at\n  \
    \ http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring\
    \ to its attention any\n   copyrights, patents or patent applications, or other\
    \ proprietary\n   rights that may cover technology that may be required to implement\n\
    \   this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n\
    Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
