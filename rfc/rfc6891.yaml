- contents:
  - '                 Extension Mechanisms for DNS (EDNS(0))

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Domain Name System's wire protocol includes a number of fixed\n
    \  fields whose range has been or soon will be exhausted and does not\n   allow
    requestors to advertise their capabilities to responders.  This\n   document describes
    backward-compatible mechanisms for allowing the\n   protocol to grow.\n   This
    document updates the Extension Mechanisms for DNS (EDNS(0))\n   specification
    (and obsoletes RFC 2671) based on feedback from\n   deployment experience in several
    implementations.  It also obsoletes\n   RFC 2673 (\"Binary Labels in the Domain
    Name System\") and adds\n   considerations on the use of extended labels in the
    DNS.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6891.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  4\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  4\n   3.  EDNS Support Requirement . . . . . . . . . . . . . . . . .
    . .  5\n   4.  DNS Message Changes  . . . . . . . . . . . . . . . . . . . . .
    \ 5\n     4.1.  Message Header . . . . . . . . . . . . . . . . . . . . . .  5\n
    \    4.2.  Label Types  . . . . . . . . . . . . . . . . . . . . . . .  5\n     4.3.
    \ UDP Message Size . . . . . . . . . . . . . . . . . . . . .  6\n   5.  Extended
    Label Types . . . . . . . . . . . . . . . . . . . . .  6\n   6.  The OPT Pseudo-RR
    \ . . . . . . . . . . . . . . . . . . . . . .  6\n     6.1.  OPT Record Definition
    \ . . . . . . . . . . . . . . . . . .  6\n       6.1.1.  Basic Elements . . .
    . . . . . . . . . . . . . . . . .  6\n       6.1.2.  Wire Format  . . . . . .
    . . . . . . . . . . . . . . .  7\n       6.1.3.  OPT Record TTL Field Use . .
    . . . . . . . . . . . . .  9\n       6.1.4.  Flags  . . . . . . . . . . . . .
    . . . . . . . . . . .  9\n     6.2.  Behaviour  . . . . . . . . . . . . . . .
    . . . . . . . . . 10\n       6.2.1.  Cache Behaviour  . . . . . . . . . . . .
    . . . . . . . 10\n       6.2.2.  Fallback . . . . . . . . . . . . . . . . . .
    . . . . . 10\n       6.2.3.  Requestor's Payload Size . . . . . . . . . . . .
    . . . 10\n       6.2.4.  Responder's Payload Size . . . . . . . . . . . . . .
    . 11\n       6.2.5.  Payload Size Selection . . . . . . . . . . . . . . . . 11\n
    \      6.2.6.  Support in Middleboxes . . . . . . . . . . . . . . . . 11\n   7.
    \ Transport Considerations . . . . . . . . . . . . . . . . . . . 12\n   8.  Security
    Considerations  . . . . . . . . . . . . . . . . . . . 13\n   9.  IANA Considerations
    \ . . . . . . . . . . . . . . . . . . . . . 13\n     9.1.  OPT Option Code Allocation
    Procedure . . . . . . . . . . . 15\n   10. References . . . . . . . . . . . .
    . . . . . . . . . . . . . . 15\n     10.1. Normative References . . . . . . .
    . . . . . . . . . . . . 15\n     10.2. Informative References . . . . . . . .
    . . . . . . . . . . 15\n   Appendix A.  Changes since RFCs 2671 and 2673  . .
    . . . . . . . . 16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   DNS [RFC1035] specifies a message format, and within such
    messages\n   there are standard formats for encoding options, errors, and name\n
    \  compression.  The maximum allowable size of a DNS message over UDP\n   not
    using the extensions described in this document is 512 bytes.\n   Many of DNS's
    protocol limits, such as the maximum message size over\n   UDP, are too small
    to efficiently support the additional information\n   that can be conveyed in
    the DNS (e.g., several IPv6 addresses or DNS\n   Security (DNSSEC) signatures).
    \ Finally, RFC 1035 does not define any\n   way for implementations to advertise
    their capabilities to any of the\n   other actors they interact with.\n   [RFC2671]
    added extension mechanisms to DNS.  These mechanisms are\n   widely supported,
    and a number of new DNS uses and protocol\n   extensions depend on the presence
    of these extensions.  This memo\n   refines and obsoletes [RFC2671].\n   Unextended
    agents will not know how to interpret the protocol\n   extensions defined in [RFC2671]
    and restated here.  Extended agents\n   need to be prepared for handling the interactions
    with unextended\n   clients in the face of new protocol elements and fall back
    gracefully\n   to unextended DNS.\n   EDNS is a hop-by-hop extension to DNS.  This
    means the use of EDNS is\n   negotiated between each pair of hosts in a DNS resolution
    process,\n   for instance, the stub resolver communicating with the recursive\n
    \  resolver or the recursive resolver communicating with an\n   authoritative
    server.\n   [RFC2671] specified extended label types.  The only such label\n   proposed
    was in [RFC2673] for a label type called \"Bit-String Label\"\n   or \"Binary
    Labels\", with this latest term being the one in common\n   use.  For various
    reasons, introducing a new label type was found to\n   be extremely difficult,
    and [RFC2673] was moved to Experimental.\n   This document obsoletes [RFC2673],
    deprecating Binary Labels.\n   Extended labels remain defined, but their use is
    discouraged due to\n   practical difficulties with deployment; their use in the
    future\n   SHOULD only be considered after careful evaluation of the deployment\n
    \  hindrances.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   \"Requestor\" refers to the side that sends a request.  \"Responder\"\n
    \  refers to an authoritative, recursive resolver or other DNS component\n   that
    responds to questions.  Other terminology is used here as\n   defined in the RFCs
    cited by this document.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  EDNS Support Requirement\n   EDNS provides a mechanism to improve the scalability
    of DNS as its\n   uses get more diverse on the Internet.  It does this by enabling
    the\n   use of UDP transport for DNS messages with sizes beyond the limits\n   specified
    in RFC 1035 as well as providing extra data space for\n   additional flags and
    return codes (RCODEs).  However, implementation\n   experience indicates that
    adding new RCODEs should be avoided due to\n   the difficulty in upgrading the
    installed base.  Flags SHOULD be used\n   only when necessary for DNS resolution
    to function.\n   For many uses, an EDNS Option Code may be preferred.\n   Over
    time, some applications of DNS have made EDNS a requirement for\n   their deployment.
    \ For instance, DNSSEC uses the additional flag\n   space introduced in EDNS to
    signal the request to include DNSSEC data\n   in a DNS response.\n   Given the
    increase in DNS response sizes when including larger data\n   items such as AAAA
    records, DNSSEC information (e.g., RRSIG or\n   DNSKEY), or large TXT records,
    the additional UDP payload\n   capabilities provided by EDNS can help improve
    the scalability of the\n   DNS by avoiding widespread use of TCP for DNS transport.\n"
  title: 3.  EDNS Support Requirement
- contents:
  - '4.  DNS Message Changes

    '
  - contents:
    - "4.1.  Message Header\n   The DNS message header's second full 16-bit word is
      divided into a\n   4-bit OPCODE, a 4-bit RCODE, and a number of 1-bit flags
      (see Section\n   4.1.1 of [RFC1035]).  Some of these flag values were marked
      for\n   future use, and most of these have since been allocated.  Also, most\n
      \  of the RCODE values are now in use.  The OPT pseudo-RR specified\n   below
      contains extensions to the RCODE bit field as well as\n   additional flag bits.\n"
    title: 4.1.  Message Header
  - contents:
    - "4.2.  Label Types\n   The first 2 bits of a wire format domain label are used
      to denote the\n   type of the label.  [RFC1035] allocates 2 of the 4 possible
      types and\n   reserves the other 2.  More label types were defined in [RFC2671].\n
      \  The use of the 2-bit combination defined by [RFC2671] to identify\n   extended
      label types remains valid.  However, it has been found that\n   deployment of
      new label types is noticeably difficult and so is only\n   recommended after
      careful evaluation of alternatives and the need for\n   deployment.\n"
    title: 4.2.  Label Types
  - contents:
    - "4.3.  UDP Message Size\n   Traditional DNS messages are limited to 512 octets
      in size when sent\n   over UDP [RFC1035].  Fitting the increasing amounts of
      data that can\n   be transported in DNS in this 512-byte limit is becoming more\n
      \  difficult.  For instance, inclusion of DNSSEC records frequently\n   requires
      a much larger response than a 512-byte message can hold.\n   EDNS(0) specifies
      a way to advertise additional features such as\n   larger response size capability,
      which is intended to help avoid\n   truncated UDP responses, which in turn cause
      retry over TCP.  It\n   therefore provides support for transporting these larger
      packet sizes\n   without needing to resort to TCP for transport.\n"
    title: 4.3.  UDP Message Size
  title: 4.  DNS Message Changes
- contents:
  - "5.  Extended Label Types\n   The first octet in the on-the-wire representation
    of a DNS label\n   specifies the label type; the basic DNS specification [RFC1035]\n
    \  dedicates the 2 most significant bits of that octet for this purpose.\n   [RFC2671]
    defined DNS label type 0b01 for use as an indication for\n   extended label types.
    \ A specific extended label type was selected by\n   the 6 least significant bits
    of the first octet.  Thus, extended\n   label types were indicated by the values
    64-127 (0b01xxxxxx) in the\n   first octet of the label.\n   Extended label types
    are extremely difficult to deploy due to lack of\n   support in clients and intermediate
    gateways, as described in\n   [RFC3363], which moved [RFC2673] to Experimental
    status; and\n   [RFC3364], which describes the pros and cons.  As such, proposals\n
    \  that contemplate extended labels SHOULD weigh this deployment cost\n   against
    the possibility of implementing functionality in other ways.\n   Finally, implementations
    MUST NOT generate or pass Binary Labels in\n   their communications, as they are
    now deprecated.\n"
  title: 5.  Extended Label Types
- contents:
  - '6.  The OPT Pseudo-RR

    '
  - contents:
    - '6.1.  OPT Record Definition

      '
    - contents:
      - "6.1.1.  Basic Elements\n   An OPT pseudo-RR (sometimes called a meta-RR)
        MAY be added to the\n   additional data section of a request.\n   The OPT
        RR has RR type 41.\n   If an OPT record is present in a received request,
        compliant\n   responders MUST include an OPT record in their respective responses.\n
        \  An OPT record does not carry any DNS data.  It is used only to\n   contain
        control information pertaining to the question-and-answer\n   sequence of
        a specific transaction.  OPT RRs MUST NOT be cached,\n   forwarded, or stored
        in or loaded from master files.\n   The OPT RR MAY be placed anywhere within
        the additional data section.\n   When an OPT RR is included within any DNS
        message, it MUST be the\n   only OPT RR in that message.  If a query message
        with more than one\n   OPT RR is received, a FORMERR (RCODE=1) MUST be returned.
        \ The\n   placement flexibility for the OPT RR does not override the need
        for\n   the TSIG or SIG(0) RRs to be the last in the additional section\n
        \  whenever they are present.\n"
      title: 6.1.1.  Basic Elements
    - contents:
      - "6.1.2.  Wire Format\n   An OPT RR has a fixed part and a variable set of
        options expressed as\n   {attribute, value} pairs.  The fixed part holds some
        DNS metadata,\n   and also a small collection of basic extension elements
        that we\n   expect to be so popular that it would be a waste of wire space
        to\n   encode them as {attribute, value} pairs.\n   The fixed part of an OPT
        RR is structured as follows:\n       +------------+--------------+------------------------------+\n
        \      | Field Name | Field Type   | Description                  |\n       +------------+--------------+------------------------------+\n
        \      | NAME       | domain name  | MUST be 0 (root domain)      |\n       |
        TYPE       | u_int16_t    | OPT (41)                     |\n       | CLASS
        \     | u_int16_t    | requestor's UDP payload size |\n       | TTL        |
        u_int32_t    | extended RCODE and flags     |\n       | RDLEN      | u_int16_t
        \   | length of all RDATA          |\n       | RDATA      | octet stream |
        {attribute,value} pairs      |\n       +------------+--------------+------------------------------+\n
        \                              OPT RR Format\n   The variable part of an OPT
        RR may contain zero or more options in\n   the RDATA.  Each option MUST be
        treated as a bit field.  Each option\n   is encoded as:\n                  +0
        (MSB)                            +1 (LSB)\n       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
        \   0: |                          OPTION-CODE                          |\n
        \      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
        \   2: |                         OPTION-LENGTH                         |\n
        \      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
        \   4: |                                                               |\n
        \      /                          OPTION-DATA                          /\n
        \      /                                                               /\n
        \      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
        \  OPTION-CODE\n      Assigned by the Expert Review process as defined by
        the DNSEXT\n      working group and the IESG.\n   OPTION-LENGTH\n      Size
        (in octets) of OPTION-DATA.\n   OPTION-DATA\n      Varies per OPTION-CODE.
        \ MUST be treated as a bit field.\n   The order of appearance of option tuples
        is not defined.  If one\n   option modifies the behaviour of another or multiple
        options are\n   related to one another in some way, they have the same effect\n
        \  regardless of ordering in the RDATA wire encoding.\n   Any OPTION-CODE
        values not understood by a responder or requestor\n   MUST be ignored.  Specifications
        of such options might wish to\n   include some kind of signaled acknowledgement.
        \ For example, an\n   option specification might say that if a responder sees
        and supports\n   option XYZ, it MUST include option XYZ in its response.\n"
      title: 6.1.2.  Wire Format
    - contents:
      - "6.1.3.  OPT Record TTL Field Use\n   The extended RCODE and flags, which
        OPT stores in the RR Time to Live\n   (TTL) field, are structured as follows:\n
        \                 +0 (MSB)                            +1 (LSB)\n       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
        \   0: |         EXTENDED-RCODE        |            VERSION            |\n
        \      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
        \   2: | DO|                           Z                               |\n
        \      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
        \  EXTENDED-RCODE\n      Forms the upper 8 bits of extended 12-bit RCODE (together
        with the\n      4 bits defined in [RFC1035].  Note that EXTENDED-RCODE value
        0\n      indicates that an unextended RCODE is in use (values 0 through\n
        \     15).\n   VERSION\n      Indicates the implementation level of the setter.
        \ Full\n      conformance with this specification is indicated by version
        '0'.\n      Requestors are encouraged to set this to the lowest implemented\n
        \     level capable of expressing a transaction, to minimise the\n      responder
        and network load of discovering the greatest common\n      implementation
        level between requestor and responder.  A\n      requestor's version numbering
        strategy MAY ideally be a run-time\n      configuration option.\n      If
        a responder does not implement the VERSION level of the\n      request, then
        it MUST respond with RCODE=BADVERS.  All responses\n      MUST be limited
        in format to the VERSION level of the request, but\n      the VERSION of each
        response SHOULD be the highest implementation\n      level of the responder.
        \ In this way, a requestor will learn the\n      implementation level of a
        responder as a side effect of every\n      response, including error responses
        and including RCODE=BADVERS.\n"
      title: 6.1.3.  OPT Record TTL Field Use
    - contents:
      - "6.1.4.  Flags\n   DO\n      DNSSEC OK bit as defined by [RFC3225].\n   Z\n
        \     Set to zero by senders and ignored by receivers, unless modified\n      in
        a subsequent specification.\n"
      title: 6.1.4.  Flags
    title: 6.1.  OPT Record Definition
  - contents:
    - '6.2.  Behaviour

      '
    - contents:
      - "6.2.1.  Cache Behaviour\n   The OPT record MUST NOT be cached.\n"
      title: 6.2.1.  Cache Behaviour
    - contents:
      - "6.2.2.  Fallback\n   If a requestor detects that the remote end does not
        support EDNS(0),\n   it MAY issue queries without an OPT record.  It MAY cache
        this\n   knowledge for a brief time in order to avoid fallback delays in the\n
        \  future.  However, if DNSSEC or any future option using EDNS is\n   required,
        no fallback should be performed, as these options are only\n   signaled through
        EDNS.  If an implementation detects that some\n   servers for the zone support
        EDNS(0) while others would force the use\n   of TCP to fetch all data, preference
        MAY be given to servers that\n   support EDNS(0).  Implementers SHOULD analyse
        this choice and the\n   impact on both endpoints.\n"
      title: 6.2.2.  Fallback
    - contents:
      - "6.2.3.  Requestor's Payload Size\n   The requestor's UDP payload size (encoded
        in the RR CLASS field) is\n   the number of octets of the largest UDP payload
        that can be\n   reassembled and delivered in the requestor's network stack.
        \ Note\n   that path MTU, with or without fragmentation, could be smaller
        than\n   this.\n   Values lower than 512 MUST be treated as equal to 512.\n
        \  The requestor SHOULD place a value in this field that it can actually\n
        \  receive.  For example, if a requestor sits behind a firewall that\n   will
        block fragmented IP packets, a requestor SHOULD NOT choose a\n   value that
        will cause fragmentation.  Doing so will prevent large\n   responses from
        being received and can cause fallback to occur.  This\n   knowledge may be
        auto-detected by the implementation or provided by a\n   human administrator.\n
        \  Note that a 512-octet UDP payload requires a 576-octet IP reassembly\n
        \  buffer.  Choosing between 1280 and 1410 bytes for IP (v4 or v6) over\n
        \  Ethernet would be reasonable.\n   Where fragmentation is not a concern,
        use of bigger values SHOULD be\n   considered by implementers.  Implementations
        SHOULD use their largest\n   configured or implemented values as a starting
        point in an EDNS\n   transaction in the absence of previous knowledge about
        the\n   destination server.\n   Choosing a very large value will guarantee
        fragmentation at the IP\n   layer, and may prevent answers from being received
        due to loss of a\n   single fragment or to misconfigured firewalls.\n   The
        requestor's maximum payload size can change over time.  It MUST\n   NOT be
        cached for use beyond the transaction in which it is\n   advertised.\n"
      title: 6.2.3.  Requestor's Payload Size
    - contents:
      - "6.2.4.  Responder's Payload Size\n   The responder's maximum payload size
        can change over time but can\n   reasonably be expected to remain constant
        between two closely spaced\n   sequential transactions, for example, an arbitrary
        QUERY used as a\n   probe to discover a responder's maximum UDP payload size,
        followed\n   immediately by an UPDATE that takes advantage of this size.  This
        is\n   considered preferable to the outright use of TCP for oversized\n   requests,
        if there is any reason to suspect that the responder\n   implements EDNS,
        and if a request will not fit in the default\n   512-byte payload size limit.\n"
      title: 6.2.4.  Responder's Payload Size
    - contents:
      - "6.2.5.  Payload Size Selection\n   Due to transaction overhead, it is not
        recommended to advertise an\n   architectural limit as a maximum UDP payload
        size.  Even on system\n   stacks capable of reassembling 64 KB datagrams,
        memory usage at low\n   levels in the system will be a concern.  A good compromise
        may be the\n   use of an EDNS maximum payload size of 4096 octets as a starting\n
        \  point.\n   A requestor MAY choose to implement a fallback to smaller advertised\n
        \  sizes to work around firewall or other network limitations.  A\n   requestor
        SHOULD choose to use a fallback mechanism that begins with\n   a large size,
        such as 4096.  If that fails, a fallback around the\n   range of 1280-1410
        bytes SHOULD be tried, as it has a reasonable\n   chance to fit within a single
        Ethernet frame.  Failing that, a\n   requestor MAY choose a 512-byte packet,
        which with large answers may\n   cause a TCP retry.\n   Values of less than
        512 bytes MUST be treated as equal to 512 bytes.\n"
      title: 6.2.5.  Payload Size Selection
    - contents:
      - "6.2.6.  Support in Middleboxes\n   In a network that carries DNS traffic,
        there could be active\n   equipment other than that participating directly
        in the DNS\n   resolution process (stub and caching resolvers, authoritative\n
        \  servers) that affects the transmission of DNS messages (e.g.,\n   firewalls,
        load balancers, proxies, etc.), referred to here as\n   \"middleboxes\".\n
        \  Conformant middleboxes MUST NOT limit DNS messages over UDP to 512\n   bytes.\n
        \  Middleboxes that simply forward requests to a recursive resolver MUST\n
        \  NOT modify and MUST NOT delete the OPT record contents in either\n   direction.\n
        \  Middleboxes that have additional functionality, such as answering\n   queries
        or acting as intelligent forwarders, SHOULD be able to\n   process the OPT
        record and act based on its contents.  These\n   middleboxes MUST consider
        the incoming request and any outgoing\n   requests as separate transactions
        if the characteristics of the\n   messages are different.\n   A more in-depth
        discussion of this type of equipment and other\n   considerations regarding
        their interaction with DNS traffic is found\n   in [RFC5625].\n"
      title: 6.2.6.  Support in Middleboxes
    title: 6.2.  Behaviour
  title: 6.  The OPT Pseudo-RR
- contents:
  - "7.  Transport Considerations\n   The presence of an OPT pseudo-RR in a request
    should be taken as an\n   indication that the requestor fully implements the given
    version of\n   EDNS and can correctly understand any response that conforms to
    that\n   feature's specification.\n   Lack of presence of an OPT record in a request
    MUST be taken as an\n   indication that the requestor does not implement any part
    of this\n   specification and that the responder MUST NOT include an OPT record\n
    \  in its response.\n   Extended agents MUST be prepared for handling interactions
    with\n   unextended clients in the face of new protocol elements and fall back\n
    \  gracefully to unextended DNS when needed.\n   Responders that choose not to
    implement the protocol extensions\n   defined in this document MUST respond with
    a return code (RCODE) of\n   FORMERR to messages containing an OPT record in the
    additional\n   section and MUST NOT include an OPT record in the response.\n   If
    there is a problem with processing the OPT record itself, such as\n   an option
    value that is badly formatted or that includes out-of-range\n   values, a FORMERR
    MUST be returned.  If this occurs, the response\n   MUST include an OPT record.
    \ This is intended to allow the requestor\n   to distinguish between servers that
    do not implement EDNS and format\n   errors within EDNS.\n   The minimal response
    MUST be the DNS header, question section, and an\n   OPT record.  This MUST also
    occur when a truncated response (using\n   the DNS header's TC bit) is returned.\n"
  title: 7.  Transport Considerations
- contents:
  - "8.  Security Considerations\n   Requestor-side specification of the maximum buffer
    size may open a\n   DNS denial-of-service attack if responders can be made to
    send\n   messages that are too large for intermediate gateways to forward,\n   thus
    leading to potential ICMP storms between gateways and\n   responders.\n   Announcing
    very large UDP buffer sizes may result in dropping of DNS\n   messages by middleboxes
    (see Section 6.2.6).  This could cause\n   retransmissions with no hope of success.
    \ Some devices have been\n   found to reject fragmented UDP packets.\n   Announcing
    UDP buffer sizes that are too small may result in fallback\n   to TCP with a corresponding
    load impact on DNS servers.  This is\n   especially important with DNSSEC, where
    answers are much larger.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  IANA Considerations\n   The IANA has assigned RR type code 41 for OPT.\n
    \  [RFC2671] specified a number of IANA subregistries within \"DOMAIN\n   NAME
    SYSTEM PARAMETERS\":\n   o  DNS EDNS(0) Options\n   o  EDNS Version Number\n   o
    \ EDNS Header Flags\n   Additionally, two entries were generated in existing registries:\n
    \  o  EDNS Extended Label Type in the DNS Label Types registry\n   o  Bad OPT
    Version in the DNS RCODES registry\n   IANA has updated references to [RFC2671]
    in these entries and\n   subregistries to this document.\n   [RFC2671] created
    the DNS Label Types registry.  This registry is to\n   remain open.\n   The registration
    procedure for the DNS Label Types registry is\n   Standards Action.\n   This document
    assigns option code 65535 in the DNS EDNS0 Options\n   registry to \"Reserved
    for future expansion\".\n   The current status of the IANA registry for EDNS Option
    Codes at the\n   time of publication of this document is\n   o  0-4 assigned,
    per references in the registry\n   o  5-65000 Available for assignment, unassigned\n
    \  o  65001-65534 Local/Experimental use\n   o  65535 Reserved for future expansion\n
    \  [RFC2671] expands the RCODE space from 4 bits to 12 bits.  This\n   allows
    more than the 16 distinct RCODE values allowed in [RFC1035].\n   IETF Review is
    required to add a new RCODE.\n   This document assigns EDNS Extended RCODE 16
    to \"BADVERS\" in the DNS\n   RCODES registry.\n   [RFC2671] called for the recording
    of assignment of extended label\n   types 0bxx111111 as \"Reserved for future
    extended label types\"; the\n   IANA registry currently contains \"Reserved for
    future expansion\".\n   This request implied, at that time, a request to open
    a new registry\n   for extended label types, but due to the possibility of ambiguity,\n
    \  new text registrations were instead made within the general DNS Label\n   Types
    registry, which also registers entries originally defined by\n   [RFC1035].  There
    is therefore no Extended Label Types registry, with\n   all label types registered
    in the DNS Label Types registry.\n   This document deprecates Binary Labels.  Therefore,
    the status for\n   the DNS Label Types registration \"Binary Labels\" is now \"Historic\".\n
    \  IETF Standards Action is required for assignments of new EDNS(0)\n   flags.
    \ Flags SHOULD be used only when necessary for DNS resolution\n   to function.
    \ For many uses, an EDNS Option Code may be preferred.\n   IETF Standards Action
    is required to create new entries in the EDNS\n   Version Number registry.  Within
    the EDNS Option Code space, Expert\n   Review is required for allocation of an
    EDNS Option Code.  Per this\n   document, IANA maintains a registry for the EDNS
    Option Code space.\n"
  - contents:
    - "9.1.  OPT Option Code Allocation Procedure\n   OPT Option Codes are assigned
      by Expert Review.\n   Assignment of Option Codes should be liberal, but duplicate\n
      \  functionality is to be avoided.\n"
    title: 9.1.  OPT Option Code Allocation Procedure
  title: 9.  IANA Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names
      - implementation and\n              specification\", STD 13, RFC 1035, November
      1987.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n
      \             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2671]
      \ Vixie, P., \"Extension Mechanisms for DNS (EDNS0)\",\n              RFC 2671,
      August 1999.\n   [RFC3225]  Conrad, D., \"Indicating Resolver Support of DNSSEC\",\n
      \             RFC 3225, December 2001.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC2673]  Crawford, M., \"Binary Labels
      in the Domain Name System\",\n              RFC 2673, August 1999.\n   [RFC3363]
      \ Bush, R., Durand, A., Fink, B., Gudmundsson, O., and T.\n              Hain,
      \"Representing Internet Protocol version 6 (IPv6)\n              Addresses in
      the Domain Name System (DNS)\", RFC 3363,\n              August 2002.\n   [RFC3364]
      \ Austein, R., \"Tradeoffs in Domain Name System (DNS)\n              Support
      for Internet Protocol version 6 (IPv6)\", RFC 3364,\n              August 2002.\n
      \  [RFC5625]  Bellis, R., \"DNS Proxy Implementation Guidelines\",\n              BCP
      152, RFC 5625, August 2009.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Changes since RFCs 2671 and 2673\n   Following is a list of high-level
    changes to RFCs 2671 and 2673.\n   o  Support for the OPT record is now mandatory.\n
    \  o  Extended label types remain available, but their use is\n      discouraged
    as a general solution due to observed difficulties in\n      their deployment
    on the Internet, as illustrated by the work with\n      the \"Binary Labels\"
    type.\n   o  RFC 2673, which defined the \"Binary Labels\" type and is currently\n
    \     Experimental, is requested to be moved to Historic.\n   o  Made changes
    in how EDNS buffer sizes are selected, and provided\n      recommendations on
    how to select them.\n"
  title: Appendix A.  Changes since RFCs 2671 and 2673
- contents:
  - "Authors' Addresses\n   Joao Damas\n   Bond Internet Systems\n   Av Albufera 14\n
    \  S.S. Reyes, Madrid  28701\n   ES\n   Phone: +1 650.423.1312\n   EMail: joao@bondis.org\n
    \  Michael Graff\n   EMail: explorer@flame.org\n   Paul Vixie\n   Internet Systems
    Consortium\n   950 Charter Street\n   Redwood City, California  94063\n   US\n
    \  Phone: +1 650.423.1301\n   EMail: vixie@isc.org\n"
  title: Authors' Addresses
