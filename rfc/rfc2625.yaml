- title: __initial_text__
  contents:
  - '                     IP and ARP over Fibre Channel

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Fibre Channel (FC) is a high speed serial interface technology that\n\
    \   supports several higher layer protocols including Small Computer\n   System\
    \ Interface (SCSI) and Internet Protocol(IP). Until now, SCSI\n   has been the\
    \ only widely used protocol over FC. Existing FC standards\n   [3] do not adequately\
    \ specify how IP packets may be transported over\n   FC and how IP addresses are\
    \ resolved to FC addresses. The purpose of\n   this document is to specify a way\
    \ of encapsulating IP and Address\n   Resolution Protocol(ARP) over Fibre Channel\
    \ and also to describe a\n   mechanism(s) for IP address resolution.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      4.1 Address Resolution  ....................................\
    \ 12\n      4.2 ARP Packet Format ...................................... 13\n\
    \      4.3 ARP Layer Mapping and Operation ........................ 15\n     \
    \ 4.4 ARP Broadcast in a Point-to-Point Topology ............. 16\n      4.5 ARP\
    \ Broadcast in a Private Loop Topology ............... 16\n      4.6 ARP Broadcast\
    \ in a Public Loop Topology ................ 16\n      4.7 ARP Operation in a\
    \ Fabric Topology ..................... 17\n   5. FARP .......................................................\
    \ 18\n      5.1 Scope .................................................. 18\n\
    \      5.2 FARP Overview .......................................... 18\n     \
    \ 5.3 FARP Command Format .................................... 20\n      5.4 Match\
    \ Address Code Points .............................. 22\n      5.5 Responder Flags\
    \ ........................................ 23\n      5.6 FARP Support Requirements\
    \ .............................. 24\n   6. Exchange Management ........................................\
    \ 25\n      6.1 Exchange Origination ................................... 25\n\
    \      6.2 Exchange Termination ................................... 25\n   7.\
    \ Summary of Supported Features .............................. 25\n      7.1 FC-4\
    \ Header ............................................ 25\n      7.2 R_CTL ..................................................\
    \ 26\n      7.3 F_CTL .................................................. 27\n\
    \      7.4 Sequences .............................................. 28\n     \
    \ 7.5 Exchanges .............................................. 29\n      7.6 ARP\
    \  and InARP ......................................... 30\n      7.7 Extended\
    \ Link Services (ELS) ........................... 31\n      7.8 Login Parameters\
    \ ....................................... 31\n          7.8.1 Common Service Parameters\
    \  - FLOGI ............... 32\n          7.8.2 Common Services Parameters - PLOGI\
    \ ............... 32\n          7.8.3 Class Service Parameters - PLOGI .................\
    \ 32\n   8. Security Considerations .................................... 32\n\
    \      8.1 IP and ARP Related ..................................... 32\n     \
    \ 8.2 FC Related ............................................. 32\n   9. Acknowledgements\
    \ ........................................... 33\n   10. References ................................................\
    \ 33\n   11. Authors' Addresses ........................................ 35\n\
    \   Appendix A: Additional Matching Mechanisms in FARP ............ 36\n   Appendix\
    \ B: InARP ............................................. 40\n      B.1 General\
    \ Discussion ..................................... 40\n      B.2 InARP Protocol\
    \ Operation ............................... 40\n      B.3 InARP Packet Format\
    \ .................................... 40\n      B.4 InARP Support Requirements\
    \ ............................. 41\n   Appendix C: Some Informal Mechanisms for\
    \ FC Layer Mappings .... 42\n      C.1 Login on cached Mapping Information ....................\
    \ 42\n      C.2 Login on ARP parsing ................................... 42\n\
    \      C.3 Login to Everyone ...................................... 43\n     \
    \ C.4 Static Table ........................................... 43\n   Appendix\
    \ D: FC Layer Address Validation........................ 44\n      D.1 General\
    \ Discussion ..................................... 44\n      D.2 FC Layer Address\
    \ Validation in a Point-to-Point Topology 45\n      D.3 FC Layer Address Validation\
    \ in a Private Loop Topology . 45\n      D.4 FC Layer Address Validation in a\
    \ Public Loop Topology .. 45\n      D.5 FC layer Address Validation in a Fabric\
    \ Topology ....... 46\n   Appendix E: Fibre channel Overview ............................\
    \ 47\n      E.1 Brief Tutorial ......................................... 47\n\
    \      E.2 Exchange, Information Unit, Sequence, and Frame ........ 48\n     \
    \ E.3 Fibre Channel Header Fields ............................ 49\n      E.4 Code\
    \ Points for FC Frame ............................... 52\n           E.4.1 Code\
    \ Points with IP and ARP Packet .............. 52\n           E.4.2 Code Points\
    \ with FARP Command ................... 54\n   Appendix F: Fibre Channel Protocol\
    \ Considerations.............. 58\n      F.1 Reliability in Class 3 .................................\
    \ 58\n      F.2 Continuously Increasing SEQ_CNT ........................ 58\n\
    \   Appendix G: Acronyms and Glossary of FC Terms ................. 60\n   Full\
    \ Copyright Statement ...................................... 63\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Fibre Channel (FC) is a gigabit speed networking technology\
    \ primarily\n   used for Storage Area Networking (SAN). FC is standardized under\n\
    \   American National Standard for Information Systems of the National\n   Committee\
    \ for Information Technology Standards (NCITS) and has\n   specified a number\
    \ of documents describing its protocols, operations,\n   and services.\n   Need:\n\
    \   Currently, Fibre Channel is predominantly used for communication\n   between\
    \ storage devices and servers using the SCSI protocol, with\n   most  of the servers\
    \ still communicating with each other over LANs.\n   Although, there exists a\
    \ Fibre Channel Standard [3] that has\n   architecturally defined support for\
    \ IP encapsulation and address\n   resolution, it is inadequately specified. ([3]\
    \ prohibits broadcasts,\n   thus loops are not covered; [10] has no support for\
    \ Class 3).\n   This has lead to a nonstandard way of using IP over FC in the\
    \ past.\n   Once such a standard method is completely specified, servers can\n\
    \   directly communicate with each other using IP over FC, possibly\n   boosting\
    \ performance in Server host-to-host communications.  This\n   technique will\
    \ be especially useful in a Clustering Application.\n   Objective and Scope:\n\
    \   The major objective of this specification is to promote interoperable\n  \
    \ implementations of IPv4 over FC. This specification describes a\n   method for\
    \ encapsulating IPv4 and Address Resolution Protocol (ARP)\n   packets over FC.\
    \ This specification accommodates any FC topology\n   (loop, fabric, or point-to-point)\
    \ and any FC class of service (1, 2\n   or 3).  This specification also describes\
    \ a FC Address Resolution\n   Protocol(FARP) for associating World Wide Port Names\
    \ (MAC addresses)\n   and FC Port identifiers.\n   A secondary objective of this\
    \ specification is to describe other\n   optional address resolution mechanisms:\n\
    \      - Other FARP mechanisms that directly build IPv4 address and FC\n     \
    \   Port Identifier (Port_ID) associations.\n      - Inverse ARP (InARP) that\
    \ allows learning the IP address of a\n        remote node given its World Wide\
    \ Port Name (WW_PN) and Port_ID.\n   \"Multicasting\" in Fibre Channel is defined\
    \ as an optional service\n   [11] for FC Classes 3 and 6 only, with no definition\
    \ for Classes 1\n   and 2. Currently, there are no vendor implementations of this\
    \ service\n   for either Class of service. Broadcast service available within\
    \ Fibre\n   Channel can be used to do multicasting, although less efficiently.\n\
    \   Presently, there appears to be no IP applications over Fibre Channel\n   that\
    \ require support for IP multicasting. This specification\n   therefore does not\
    \ support IP Multicasting.\n   Organization:\n   Section 2 states the problem\
    \ that is solved in this  specification.\n   Section 3 describes the techniques\
    \ used for encapsulating  IP and ARP\n   packets in a FC sequence. Section 4 discusses\
    \ the ARP protocol(IP\n   address to WW_PN). Section 5 discusses the FARP protocol\
    \ used in FC\n   Layer mappings (WW_PN to Port_ID).  Section 6 describes the\n\
    \   \"Exchange\" Management in FC. Section 7 is a summary section and\n   provides\
    \ a quick reference to FC header settings, FC Link Service\n   Commands, supported\
    \ features in ARP, FARP, InARP, FC Sequences, FC\n   Exchanges, and FC Login Parameters.\
    \  Section 8 discusses security.\n   Section 9 acknowledges the technical contributors\
    \ of this document.\n   Section 10 provides a list of references, and Section\
    \ 11 provides the\n   authors' addresses.\n   Appendix A discusses other optional\
    \ FARP mechanisms. Appendix B\n   discusses the Inverse ARP protocol(WW_PN to\
    \ IP address) as an\n   alternate and optional way of building MAC and IP address\n\
    \   associations. Appendix C lists some informal mechanisms for FC Layer\n   Mappings.\
    \  Appendix D provides a discussion on validation of the FC-\n   layer mappings\
    \ for the different FC topologies.  Appendix E provides\n   a brief overview of\
    \ the FC Protocols and Networks.  Appendix F\n   addresses reliability in Class\
    \ 3 and Sequence Count FC Protocol\n   issues.  Appendix G provides a list of\
    \ acronyms and a glossary of FC\n   Terms used in this specification.\n   The\
    \ key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n\
    \   \"SHOULD\", SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n\
    \   document are to be interpreted as described in RFC 2119 [19].\n"
- title: 2. Problem Statement
  contents:
  - "2. Problem Statement\n   This specification addresses two problems:\n       \
    \ - A format definition and encapsulation mechanism for IPv4\n          and ARP\
    \ packets over FC\n        - Mechanisms for Address Resolution\n   As noted earlier,\
    \ the existing FC Standard [3] ([10]) is inadequate\n   to solve the above problems.\
    \ A solution to both problems was first\n   proposed by the Fibre Channel Association\
    \ (FCA)[1]. FCA is an\n   industry consortium of FC vendor companies and not a\
    \ Standards Body.\n   This specification is based on the proposed solution in\
    \ [1] and\n   builds on it.\n   Address Resolution is concerned with resolving\
    \ IP addresses to WW_PN\n   (MAC address) and WW_PN to FC Port Identifiers (Port_ID).\
    \ ARP\n   provides a solution to the first resolution problem and FARP the\n \
    \  second.\n   An optional FARP mechanism resolves IP address directly to FC\n\
    \   Port_IDs. This is useful in some upper layer applications.\n   InARP is another\
    \ optional mechanism that resolves WW_PN and Port_ID\n   to an IP address.  InARP\
    \ is useful when a node after performing a\n   PLOGI with another node, knows\
    \ its WW_PN and Port_ID, but not its IP\n   address.\n"
- title: 3. IP and ARP Encapsulation
  contents:
  - '3. IP and ARP Encapsulation

    '
- title: 3.1 FC Frame Format
  contents:
  - "3.1 FC Frame Format\n   All FC frames have a standard format much like LAN 802.x\
    \ protocols.\n   (See Appendix E and F).  However, the exact size of each frame\
    \ varies\n   depending on the size of the variable fields.  The size of the\n\
    \   variable field ranges from 0 to 2112-bytes as shown in the FC Frame\n   Format\
    \ in Fig. 1.\n         +------+--------+-----------+----//-------+------+------+\n\
    \         | SOF  |Frame   |Optional   |  Frame      | CRC  |  EOF |\n        \
    \ | (4B) |Header  |Header     | Payload     | (4B) | (4B) |\n         |      |(24B)\
    \   |<----------------------->|      |      |\n         |      |        | Data\
    \ Field = (0-2112B)  |      |      |\n         +------+--------+-----------+----//-------+------+------+\n\
    \                          Fig. 1 FC Frame Format\n   The Start of Frame (SOF)\
    \ and End of Frame (EOF) are both 4-bytes long\n   and act as frame delimiters.\n\
    \   The CRC is 4-bytes long and uses the same 32-bit polynomial used in\n   FDDI\
    \ and is specified in ANSI X3.139 Fiber Distributed Data\n   Interface.\n   The\
    \ Frame Header is 24-bytes long and has several fields that are\n   associated\
    \ with the identification and control of the payload. Some\n   of the values and\
    \ options for this field that are relevant to the IP\n   and ARP payloads are\
    \ discussed in Section 7.\n   Current FC Standards allow up to 3 Optional Header\
    \ fields [11]:\n     - Network_Header (16-bytes)\n     - Association_Header (32-bytes)\n\
    \     - Device_Header (up to 64-bytes).\n   The IP and ARP FC Sequences SHALL\
    \ carry only the Network_Header field\n   which is 16-bytes long. Other types\
    \ of optional headers SHALL NOT be\n   used.  The Network_Header is REQUIRED in\
    \ all ARP packets and in the\n   first frame of a logical sequence carrying an\
    \ IP payload as described\n   below.\n   An application level payload such as\
    \ IP is called an Information Unit\n   at the FC-4 Level. Lower FC levels map\
    \ this to a FC Sequence.  (See\n   Appendix E.2 for a description of Sequences\
    \ and Information Units.)\n   Typically, a Sequence consists of more than one\
    \ frame. Larger user\n   data is segmented and reassembled using two methods:\
    \ Sequence Count\n   and Relative Offset [18]. With the use of Sequence Count,\
    \ data blocks\n   are sent using frames with increasing sequence counts (modulo\
    \ 65536)\n   and it is quite straightforward to detect the first frame that\n\
    \   contains the Network_Header.  When Relative Offset is used, as frames\n  \
    \ arrive, some computation is required to detect the first frame that\n   contains\
    \ the Network_Header. Sequence Count and Relative Offset field\n   control information,\
    \ is carried in the FC Header.\n   In FC, the physical temporal ordering of the\
    \ frames as it arrives at\n   a destination can be different from that of the\
    \ order sent because of\n   traversing through a FC Network.\n   When IP forms\
    \ the FC Payload then only the first frame of the logical\n   Sequence SHALL include\
    \ the FC Network_Header. Fig. 2 shows the\n   logical First Frame and logical\
    \ subsequent frames. Since frames may\n   arrive out of order, detection of the\
    \ first frame of the logical FC\n   Sequence is necessary.\n   ARP packets map\
    \ to a single frame FC Sequence and SHALL always carry\n   the FC Network_Header.\n\
    \   Note the definition of FC Data Field and FC Frame Payload in Fig. 1.\n   FC\
    \ Data Field includes the FC Frame Payload and the FC Optional\n   Header, that\
    \ is, Frame Payload definition does not include the FC\n   Optional Header. One\
    \ or more Frame Payloads together make the FC\n   Sequence Payload as shown in\
    \ Fig 2 and discussed further in Sections\n   3.2 and 3.4. FC Sequence Payload\
    \ includes the mapped IP or ARP packet\n   along with the LLC/SNAP headers.\n\
    \                 First Frame of a Logical FC Sequence\n ---+------------+---------------------------+----------//----------+---\n\
    \    |  FC Header |     FC Network_Header     | FC Sequence Payload  |\n ---+------------+---------------------------+---------//-----------+---\n\
    \              Subsequent Frames of a Logical FC Sequence\n          --+-----------+--------------//----------------+--\n\
    \            | FC Header | Additional FC Sequence Payload |\n          --+-----------+-------------//-----------------+--\n\
    \             Fig. 2 FC Network_Header in a Frame Sequence\n   The SOF, CRC, EOF\
    \ control fields of the FC frame and other optional\n   headers have been omitted\
    \ in the figure for clarity.\n"
- title: 3.2 MTU
  contents:
  - '3.2 MTU

    '
- title: 3.2.1 IP MTU
  contents:
  - "3.2.1 IP MTU\n   An FC Information Unit specific to each protocol such as IP\
    \ is\n   defined in FC-4. This defines the upper bound on the size of the\n  \
    \ information that can be transported.\n   Each IP or ARP Packet is mapped to\
    \ a single FC Information Unit,\n   which in turn is mapped to a single FC Sequence.\
    \ There is a one-to-\n   one mapping between an IP or ARP packet and a FC Sequence.\n\
    \   Fibre Channel limits the size of a single Information Unit to 2^32-1,\n  \
    \ which is very large [2].  However, since the Maximum Transmission\n   Unit (MTU)\
    \ size of an IPv4 packet does not exceed 65,536-bytes, the\n   mapped IPv4 size\
    \ is far below the 2^32-1 limit.\n   IPv4 Packet definition includes the IP Payload\
    \ and IP Headers - both\n   fixed and optional.  The corresponding FC Sequence\
    \ Payload includes\n   the LLC/SNAP Header and the IPv4 packet.\n   As noted above,\
    \ the greatest length allowed for an IPv4 Packet\n   including any optional headers\
    \ and independent of this standard is\n   65,536-bytes. However, limiting the\
    \ IP MTU size to 65,280-bytes helps\n   in buffer resource allocation at N_Ports\
    \ and also allows for up to\n   256-bytes of overhead. Since the FC Network_Header\
    \ requires 16-bytes\n   and the IEEE 802.2 LLC/SNAP header requires 8 bytes, it\
    \ leaves 232\n   bytes for future use.\n   All implementations SHALL restrict\
    \ the IP MTU size to 65,280 bytes\n   and the corresponding FC Sequence Payload\
    \ size to 65536-bytes.\n"
- title: 3.2.2 Maximally Minimum IPv4 Packet
  contents:
  - "3.2.2 Maximally Minimum IPv4 Packet\n   In order for IP fragmentation and reassembly\
    \ to work properly it is\n   necessary that every implementation of IP be capable\
    \ of transporting\n   a maximally minimum size IP packet without fragmentation.\
    \ A maximally\n   minimum size IP Packet is defined as an IP Packet with an 8-byte\n\
    \   payload (the smallest possible non-zero payload size for a fragment)\n   and\
    \ a 60-byte header (the largest possible header consisting of a\n   20-byte fixed\
    \ part and a maximum size option field of 40-bytes) [17].\n   All implementations\
    \ SHALL support a FC Data Field of 92-bytes, which\n   is required to support\
    \ 68-bytes of the maximally minimum sized IP\n   Packet, 16-bytes of the FC Network_Header,\
    \ and 8-bytes of the\n   LLC/SNAP Header.\n"
- title: 3.2.3 ARP MTU
  contents:
  - "3.2.3 ARP MTU\n   The ARP packet has a fixed size of 28-bytes. All implementations\n\
    \   SHALL support a FC Data Field size of 52-bytes, which is required to\n   support\
    \ 28-bytes of an ARP Packet, 16-bytes of the FC Network_Header,\n   and 8-bytes\
    \ of the LLC/SNAP Header. Note that the minimum MTU\n   requirement for ARP is\
    \ already covered by the minimum MTU requirement\n   for IP but it is mentioned\
    \ here for completeness.\n   The InARP packet is identical in size to the ARP\
    \ and the same MTU\n   requirements apply.\n"
- title: 3.2.4 FC Data Field containing FARP Packet
  contents:
  - "3.2.4 FC Data Field containing FARP Packet\n   The FARP Command is a FC Extended\
    \ Link Service (ELS) command and maps\n   directly to the FC Data Field without\
    \ the LLC/SNAP or the FC\n   Network_Header. The FARP Command has a fixed size\
    \ of 76-bytes.\n   Because FARP operates purely in the FC space, it places no\
    \ special\n   MTU requirements in this specification.\n"
- title: 3.3 FC Port and Node Network Addresses
  contents:
  - "3.3 FC Port and Node Network Addresses\n   FC devices are identified by Nodes\
    \ and their Ports. A Node is a\n   collection of one or more Ports identified\
    \ by a unique nonvolatile\n   64-bit World Wide Node name (WW_NN). Each Port in\
    \ a node, is\n   identified with a unique nonvolatile 64-bit World Wide Port name\n\
    \   (WW_PN), and a volatile Port Identifier (Port_ID).\n   Port_IDs are 24-bits\
    \ long. A FC frame header carries a Source Port_ID\n   (S_ID) and a Destination\
    \ Port_ID (D_ID). The Port_ID of a given port\n   is volatile. (The mechanism(s)\
    \ by which a Port_ID may change in a FC\n   topology is outside the scope of this\
    \ document. See Appendix D).\n   The FC Network_Header is normally optional in\
    \ FC Standards, but\n   REQUIRED in this specification.  A FC Network_Header carries\
    \ source\n   and destination WW_PNs. A WW_PN consists of a 60-bit Network Address\n\
    \   and a upper 4-bit Network Address Authority (NAA) field as shown in\n   Fig.\
    \ 3.  The 4-bit NAA field is used to distinguish between the\n   various name\
    \ registration authorities used to define the Network\n   Address [2].\n   In\
    \ this specification, both the Source and Destination 4-bit NAA\n   identifiers\
    \ SHALL be set to binary '0001' indicating that an IEEE\n   48-bit MAC address\
    \ is contained in the lower 48 bits of the network\n   address fields. The high\
    \ order 12 bits in the network address fields\n   SHALL be set to 0x0000. The\
    \ NAA field value equal to binary '0001'\n   allows FC networks to be bridged\
    \ with other FC networks or\n   traditional LANs.\n         +--------+---------------------------------------+\n\
    \         | D_NAA  |Network_Dest_Address (High-order bits) |\n         |(4 bits)|\
    \              (28 bits)                |\n         +--------+---------------------------------------+\n\
    \         |      Network_Dest_Address (Low-order bits)     |\n         |     \
    \                  (32 bits)                |\n         +--------+---------------------------------------+\n\
    \         | S_NAA  |Network_Source_Address(High-order bits)|\n         |(4 bits)|\
    \              (28 bits)                |\n         +--------+---------------------------------------+\n\
    \         |      Network_Source_Address (Low-order bit)    |\n         |     \
    \                  (32 bits)                |\n         +--------+---------------------------------------+\n\
    \              Fig. 3 Format of the Network_Header Field\n"
- title: 3.4 FC Sequence Payload Format
  contents:
  - "3.4 FC Sequence Payload Format\n   FC Payload with IP:\n   An FC Sequence Payload\
    \ carrying an IP and ARP packet SHALL use the\n   formats shown in Figs. 4 and\
    \ 5 respectively. Both formats use the\n   8-byte LLC/SNAP header.\n +-----------------+-----------+------------+-------------//----------+\n\
    \ | LLC/SNAP Header | IP Header | Opt.IP Hdr.|         IP Data         |\n | \
    \  (8 bytes)     | (20 bytes)| (40 bytes  | (65280 -IP Header       |\n |    \
    \             |           |   Max)     |   - Opt. IP Hdr.) bytes |\n +-----------------+-----------+------------+-------------//----------+\n\
    \           Fig. 4 Format of FC Sequence Payload carrying IP\n   FC Sequence Payload\
    \ with ARP:\n   As noted earlier, FC frames belonging to the same Sequence may\
    \ be\n   delivered out of order over a Fabric. If the Relative Offset method\n\
    \   is used to identify FC Sequence Payload fragments, then the IP Header\n  \
    \ MUST appear in the frame that has a relative offset of 0.\n               +-----------------+-------------------+\n\
    \               | LLC/SNAP Header |   ARP Packet      |\n               |   (8\
    \ bytes)     |   (28 bytes)      |\n               +-----------------+-------------------+\n\
    \          Fig. 5 Format of FC Sequence Payload carrying ARP\n   FC Sequence Payload\
    \ with FARP:\n   FARP Protocol commands are directly mapped to the Frame Sequence\n\
    \   Payload and are 76-bytes long. No LLC/SNAP Header or FC\n   Network_Header\
    \ is used and therefore the FC Data Field size simply\n   consists of the FC Sequence\
    \ Payload.\n   LLC:\n   A Logical Link Control (LLC) field along with a Sub Network\
    \ Access\n   Protocol (SNAP) field is a method used to identify routed and bridged\n\
    \   non-OSI protocol PDUs and is defined by IEEE 802.2 and applied to IP\n   in\
    \ [8]. In LLC Type 1 operation (i.e., unacknowledged connectionless\n   mode),\
    \ the LLC header is 3-bytes long and consists of a 1-byte\n   Destination Service\
    \ Access Point (DSAP)field, a 1-byte Source Service\n   Access Point (SSAP)field,\
    \ and a 1-byte Control field as shown in Fig.\n   6.\n                  +----------+----------+----------+\n\
    \                  |   DSAP   |   SSAP   |   CTRL   |\n                  | (1\
    \ byte) | (1 byte) | (1 byte) |\n                  +----------+----------+----------+\n\
    \                             Fig. 6 LLC Format\n   The LLC's DSAP and SSAP values\
    \ of 0xAA indicate that an IEEE 802.2\n   SNAP header follows. The LLC's CTRL\
    \ value equal to 0x03 specifies an\n   Unnumbered Information Command PDU. In\
    \ this specification the LLC\n   Header value SHALL be set to 0xAA-AA-03. Other\
    \ values of DSAP/SSAP\n   indicate support for other protocols and SHALL NOT be\
    \ used in this\n   specification.\n   SNAP:\n   The SNAP Header is 5-bytes long\
    \ and consists of a 3-byte\n   Organizationally Unique Identifier (OUI) field\
    \ and a 2-byte Protocol\n   Identifier (PID) as shown in Fig. 7\n            \
    \       +------+------+-------+------+------+\n                   |         OUI\
    \         |     PID     |\n                   |      ( 3 bytes)     |  (2 bytes)\
    \  |\n                   +------+------+-------+------+------+\n             \
    \            Fig. 7 SNAP Format\n   SNAP was invented to \"encapsulate\" LAN frames\
    \ within the payload.\n   The SNAP OUI value equal to 0x00-00-00 specifies that\
    \ the PID is an\n   EtherType (i.e., routed non-OSI protocol).\n   The SNAP OUI\
    \ value equal to 0x00-80-C2 indicates Bridged Protocols.\n   With the OUI value\
    \ set to 0x00-00-00, the SNAP PID value equal to\n   0x08-00 indicates IP and\
    \ a PID value equal to 0x08-06 indicates ARP\n   (or InARP).\n   The complete\
    \ LLC/SNAP Header is shown in Fig. 8.\n"
- title: +-----------+----------+----------+-------+-------+-------+-------+------+
  contents:
  - '+-----------+----------+----------+-------+-------+-------+-------+------+

    '
- title: '|    DSAP   |   SSAP   |   CTRL   |          OUI          |      PID     |'
  contents:
  - '|    DSAP   |   SSAP   |   CTRL   |          OUI          |      PID     |

    '
- title: '|  (1 byte) | (1 byte) | (1 byte) |      ( 3 bytes)       |  (2 bytes    |'
  contents:
  - '|  (1 byte) | (1 byte) | (1 byte) |      ( 3 bytes)       |  (2 bytes    |

    '
- title: +-----------+----------+----------+-------+-------+-------+-------+------+
  contents:
  - "+-----------+----------+----------+-------+-------+-------+-------+------+\n\
    \                          Fig. 8 LLC/SNAP Header\n"
- title: 3.5 Bit and Byte Ordering
  contents:
  - "3.5 Bit and Byte Ordering\n   IP or ARP Packets are mapped to FC-4 Level using\
    \ the big endian byte\n   ordering, which corresponds to the standard network\
    \ byte order or\n   canonical form [20]. FC-4 Payload maps with no change in order\
    \ to the\n   FC-2 Level.\n   FC-1 Level defines the method used to encode data\
    \ prior to\n   transmission and subsequently decode the data upon reception. The\n\
    \   method encodes 8-bit bytes into 10-bit transmission characters to\n   improve\
    \ the transmission characteristics of the serial data stream.\n   In Fibre Channel,\
    \ data fields are aligned on word boundaries. See\n   Appendix E.  A word in FC\
    \ is defined as 4 bytes or 32 bits. The\n   resulting transmission word after\
    \ the 8-bit to 10-bit encoding\n   consists of 40 bits.\n   Data words or Ordered\
    \ Sets (special FC-2 Level control words) from\n   the FC-2 Level map to the FC-1\
    \ Level with no change in order and the\n   bytes in the word are transmitted\
    \ in the Most Significant Byte first\n   to Least Significant Byte order. The\
    \ transmission order of bits\n   within each byte is the Least Significant Bit\
    \ to the Most Significant\n   Bit.\n"
- title: 4. ARP
  contents:
  - '4. ARP

    '
- title: 4.1 Address Resolution
  contents:
  - "4.1 Address Resolution\n   Address Resolution in this specification is primarily\
    \ concerned with\n   associating IP addresses with FC Port addresses. As described\n\
    \   earlier, FC device ports have two types of addresses:\n      - a non-volatile\
    \ unique 64-bit address called World Wide Port_Name\n        (WW_PN)\n      -\
    \ a volatile 24-bit address called a Port_ID\n   The Address Resolution mechanism\
    \ therefore will need two levels of\n   mapping:\n      1. A mapping from the\
    \ IP address to the WW_PN (i.e., IEEE\n         48-bit MAC address)\n      2.\
    \ A mapping from the WW_PN to the Port_ID (see Appendix G for a\n         definition\
    \ of Port_ID)\n   The address resolution problem is compounded by the fact that\
    \ the\n   Port_ID is volatile and the second mapping MUST be valid before use.\n\
    \   Moreover, this validation process can be different depending on the\n   network\
    \ topology used. Appendix D provides a discussion on validation\n   for the different\
    \ FC topologies.\n   Architecturally, the first level of mapping and control operation\
    \ is\n   handled by the Address Resolution Protocol (ARP), and the second\n  \
    \ level by the FC Address Resolution Protocol (FARP). FARP is described\n   in\
    \ Section 5.\n   Other optional mechanisms in FARP that directly map an IP address\
    \ to\n   a Port_ID, or WW_NN to a Port_ID are described in Appendix A.\n   The\
    \ Inverse Address Resolution Protocol (InARP) is yet another\n   optional mechanism\
    \ that resolves WW_PN and Port_IDs to IP addresses.\n   InARP is described in\
    \ Appendix B.\n"
- title: 4.2 ARP Packet Format
  contents:
  - "4.2 ARP Packet Format\n   The Address Resolution Protocol (ARP) given in [9]\
    \ was designed to be\n   a general purpose protocol, and to work with many network\n\
    \   technologies, and with many upper layer protocols. Fig 9 shows the\n   ARP\
    \ packet format based on [9], where the upper layer protocol uses a\n   4 octet\
    \ protocol (IP) address and the network technology uses six-\n   octet hardware\
    \ (MAC) address.\n   The ARP uses two packet types - Request and Reply - and each\
    \ type of\n   packet is 28 -bytes long in this specification. The ARP Packet fields\n\
    \   are common to both ARP Requests and ARP Replys.\n   The LLC/SNAP encapsulated\
    \ ARP Request Packet is mapped to a FC\n   Broadcast Sequence and the exact mechanism\
    \ used to broadcast a FC\n   Sequence depends on the FC topology. This is discussed\
    \ later in this\n   section. Compliant ARP Request Broadcasts SHALL include\n\
    \   Network_Headers.\n   The LLC/SNAP encapsulated ARP Reply Packet is mapped\
    \ to a FC\n   Sequence. Compliant ARP Replys SHALL include Network_Headers.\n\
    \   Note that in all discussions to follow, the WW_PN and the 48-bit MAC\n   address\
    \ conceptually mean the same thing.\n   The 'HW Type' field SHALL be set to 0x00-01.\n\
    \   Technically, the correct HW Type value should be set to 0x00-06\n   according\
    \ to RFC 1700 indicating IEEE 802 networks. However, as a\n   practical matter\
    \ a HW Type value of 0x00-06 is known to cause\n   rejections from some Ethernet\
    \ end stations when FC is bridged to\n   Ethernet. Translational bridges are normally\
    \ expected to change this\n   field from Type 6 to 1 and vice versa under these\
    \ configurations, but\n   many do not. It is because of this reason that the Type\
    \ Code is set\n   to 1 rather than 6. However, both HW Type values of 0x00-01\
    \ and\n   0x00-06 SHALL be accepted.\n   The 'Protocol' field SHALL be set to\
    \ 0x08-00 indicating IP protocol.\n   The 'HW Addr Length' field SHALL be set\
    \ to 0x06 indicating 6-bytes of\n   HW address.\n   The 'Protocol Addr Length'\
    \ field SHALL be set to 0x04 indicating 4-\n   bytes of IPv4 address.\n   The\
    \ 'Operation' Code field SHALL be set as follows:\n            0x00-01 for ARP\
    \ Request\n            0x00-02 for ARP Reply\n   The 'HW Addr of Sender' field\
    \ SHALL be the 6-byte IEEE MAC address of\n   the sender. It is either the Requester\
    \ (ARP Request) or the Responder\n   (ARP Reply) address.\n   The 'Protocol Addr\
    \ of Sender' field SHALL be the 4-byte IP address of\n   the Requester (ARP Request)\
    \ or that of the Responder (ARP Reply).\n   The 'HW Addr of Target' field SHALL\
    \ be set to zero during an ARP\n   Request and to the 6-byte MAC address of the\
    \ Requester (ARP Request)\n   in an ARP Reply.\n   The 'Protocol Addr of Target'\
    \ field SHALL be set to the 4-byte IP\n   address of the Responder (ARP Reply)\
    \ in a ARP Request, and to the\n   4-byte IP address of the Requester (ARP Request)\
    \ in an ARP Reply.\n                     +-------------------------+\n       \
    \              | HW Type                 | 2 bytes\n                     +-------------------------+\n\
    \                     | Protocol                | 2 bytes\n                  \
    \   +-------------------------+\n                     | HW Addr Length       \
    \   | 1 byte\n                     +-------------------------+\n             \
    \        | Protocol Addr Length    | 1 byte\n                     +-------------------------+\n\
    \                     | Op Code                 | 2 bytes\n                  \
    \   +-------------------------+\n                     | HW Addr of Sender    \
    \   | 6 bytes\n                     +-------------------------+\n            \
    \         | Protocol Addr of Sender | 4 bytes\n                     +-------------------------+\n\
    \                     | HW Addr of Target       | 6 bytes\n                  \
    \   +-------------------------+\n                     | Protocol Addr of Target\
    \ | 4 bytes\n                     +-------------------------+\n              \
    \                            Total 28 bytes\n                      Fig. 9 ARP\
    \ Packet Format\n"
- title: 4.3 ARP Layer Mapping and Operation
  contents:
  - "4.3 ARP Layer Mapping and Operation\n   Whenever a FC port wishes to send IP\
    \ data to another FC port, then\n   the following steps are taken:\n      1. The\
    \ source port should first consult its local mapping tables to\n         determine\
    \ the <destination IP address, destination WW_PN>.\n      2. If such a mapping\
    \ is found, then the source sends the IP\n         data to the port whose WW_PN\
    \ address was found in the table.\n      3. If such a mapping is not found, then\
    \ the source sends an\n         ARP Request broadcast to its connected FC network\
    \ in\n         anticipation of getting a reply from the correct destination\n\
    \         along with its WW_PN.\n      4. When an ARP Request Broadcast frame\
    \ is received by a node with\n         the matching IP address, it generates an\
    \ ARP Reply.  Since the\n         ARP Reply must be addressed to a specific destination\
    \ Port_ID,\n         the FC layer mapping between the WW_PN and Port_ID (of the\
    \ ARP\n         Request orginator) MUST be valid before the reply is sent.\n \
    \     5. If no node has the matching IP address, the result is a silent\n    \
    \     behavior.\n"
- title: 4.4 ARP Broadcast in a Point-to-Point Topology
  contents:
  - "4.4 ARP Broadcast in a Point-to-Point Topology\n   The ARP Request (Broadcast)\
    \ and Reply mechanism described above still\n   apply, although there is only\
    \ one node that receives the ARP Request.\n"
- title: 4.5 ARP Broadcast in a Private Loop Topology
  contents:
  - "4.5 ARP Broadcast in a Private Loop Topology\n   In a private loop, the ARP Request\
    \ Broadcast frame is sent using the\n   broadcast method specified in the FC-AL\
    \ [7]standard.\n      1. The source port first sends an Open Broadcast Replicate\n\
    \         primitive (OPN(fr))Signal forcing all the ports in the loop\n      \
    \   (except itself), to replicate the frames that they receive\n         while\
    \ examining the frame header's Destination_ID field.\n      2. The source port\
    \ then removes this OPN(fr) signal when it\n         returns to it.\n      3.\
    \ The loop is now ready to receive the ARP broadcast.  The source\n         now\
    \ sends the ARP Request as a single-frame Broadcast Sequence\n         in a Class\
    \ 3 frame with the following FC Header D_ID field and\n         F_CTL bits setting:\n\
    \    Destination ID <Word 0, bit 0:23>: D_ID = 0xFF-FF-FF\n    Sequence Initiative\
    \ <Word 2, bit23>: SI=0\n    Last Sequence <Word 2, bit 20>: LS=1\n    End Sequence\
    \ <Word 2, bit 19>: ES=1.\n      4. A compliant ARP Broadcast Sequence frame SHALL\
    \ include the\n         Network_Header with destination MAC address set to 0xFF-FF-FF-\n\
    \         FF-FF-FF and with NAA = b'0001'\n      5. The destination port recognizing\
    \ its IP address in the ARP\n         Request packet SHALL respond with an ARP\
    \ Reply.\n"
- title: 4.6 ARP Broadcast in a Public Loop Topology
  contents:
  - "4.6 ARP Broadcast in a Public Loop Topology\n   The following steps will be followed\
    \ when a port is configured in a\n   public loop:\n      1. A public loop device\
    \ attached to a fabric through a FL_Port\n         MUST NOT use the OPN(fr) signal\
    \ primitive. Rather, it sends the\n         broadcast sequence to the FL_Port\
    \ at AL_PA = 0x00.\n      2. A FC Fabric propagates the broadcast to all other\
    \ ports\n         including the FL_Port which the broadcast arrived on. This\n\
    \         includes all F_Ports, and other FL_Ports.\n      3. On each FL_Port,\
    \ the fabric propagates the broadcast by first\n         using the primitive signal\
    \ OPNfr, in order to prepare the loop\n         to receive the broadcast sequence.\n\
    \      4. A Broadcast Sequence is now sent on all ports (all FL_ports,\n     \
    \    F_Ports) in Class 3 frame with:\n    Destination ID <Word 0, bit 23:0>: D_ID\
    \ = 0xFF-FF-FF\n    Sequence Initiative <Word 2, bit23>: SI=0\n    Last Sequence\
    \ <Word 2, bit 20>: LS=1\n    End Sequence <Word 2, bit 19>: ES=1.\n      5. A\
    \ compliant ARP Broadcast Sequence frame SHALL include the\n         Network_Header\
    \ with destination MAC address set to 0xFF-FF-FF-\n         FF-FF-FF and with\
    \ NAA = b'0001'\n      6. The destination port recognizing its IP address in the\
    \ ARP\n         Request packet SHALL respond with an ARP Reply.\n"
- title: 4.7 ARP Operation in a Fabric Topology
  contents:
  - "4.7 ARP Operation in a Fabric Topology\n      1. Nodes directly attached to fabric\
    \ do not require the OPN(fr)\n         primitive signal.\n      2. A Broadcast\
    \ Sequence is now sent on all ports (all FL_ports,\n         F_Ports) in Class\
    \ 3 frame with:\n             Destination ID <Word 0, bit 23:0>: D_ID = 0xFF-FF-FF\n\
    \             Sequence Initiative <Word 2, bit23>: SI=0\n             Last Sequence\
    \ <Word 2, bit 20>: LS=1\n             End Sequence <Word 2, bit 19>: ES=1.\n\
    \      3. A compliant ARP Broadcast Sequence frame SHALL include the\n       \
    \  Network_Header with destination MAC address set to\n         0xFF-FF-FF-FF-FF-FF\
    \ and with NAA = b'0001'\n      4. The destination port recognizing its IP address\
    \ in\n         the ARP packet SHALL respond with an ARP Reply.\n"
- title: 5.  FARP
  contents:
  - '5.  FARP

    '
- title: 5.1 Scope
  contents:
  - "5.1 Scope\n   FC Layer Mapping between the WW_PN and the Port_ID is independent\
    \ of\n   the ARP mechanism and is more closely associated with the details of\n\
    \   the FC protocols. Name Server and FC Address Resolution Protocol\n   (FARP)\
    \ are two formal mechanisms that can be used to create and\n   maintain WW_PN\
    \ to Port_ID tables.\n   FARP is a method using Extended Link Service (ELS) commands\
    \ that\n   resolves <WW_PN, Port_ID> mappings. The WW_PN to Port_ID address\n\
    \   resolution using FARP is especially useful in instances where the\n   Login\
    \ table entries at a node expire and a Name Server is not\n   available.  It is\
    \ outside the scope of this document to describe Name\n   Server. (See [14].)\n\
    \   Additional address matching mechanisms that resolve <WW_NN, Port_ID>\n   and\
    \ <IP addr., Port_ID> mapping have been added to FARP. These\n   additional mechanisms\
    \ are optional and described in Appendix A.\n   Direct IP address to Port_ID mapping\
    \ is useful in applications where\n   there is no visibility of the MAC address.\n\
    \   Other less formal FC Layer Mapping mechanisms are described in\n   Appendix\
    \ C.\n   Since Port_IDs are volatile, all mapped Port_IDs  at all times MUST\n\
    \   be valid before use. There are many events that can invalidate this\n   mapping.\
    \ Appendix D discusses conditions when such a validation is\n   required.\n"
- title: 5.2 FARP Overview
  contents:
  - "5.2 FARP Overview\n   The FARP protocol uses two ELS commands - FARP-REQ and\
    \ FARP-REPLY.\n   Note: In the following discussion 'Requester' means the node\n\
    \      issuing the FARP-REQ ELS message; 'Responder' means the\n      node replying\
    \ to the request by sending the FARP-REPLY\n      command.\n   The FARP-REQ ELS\
    \ Broadcast Request command is used to retrieve a\n   specific node's current\
    \ Port_ID given its unique WW_PN. This Port_ID\n   is sent in a FARP-REPLY unicast\
    \ command.\n   The FARP-REQ may indicate that the Responder:\n          - Perform\
    \ only a Login with it (Requester) or,\n          - Send only a FARP-REPLY or,\n\
    \          - Perform a Login and send a FARP-REPLY.\n   No sequence initiative\
    \ is transferred with the FARP-REQ and therefore\n   no Reply (ACCEPT or REJECT)\
    \ follows this command.\n   Since a Sequence Initiative is transferred with the\
    \ FARP-REPLY,\n   either a ACCEPT or REJECT follows this command as a response.\n\
    \   Reception of a FARP-REQ requires a higher level entity at the\n   responding\
    \ node to send a FARP-REPLY or perform a Port Login.\n   You do not have to be\
    \ logged in to issue a FARP Request. Also, you do\n   not have to be logged in\
    \ to the FARP Requester to issue a FARP-REPLY.\n   The FARP Protocol Steps:\n\
    \        FARP-REQ (ELS broadcast) Request Sequence\n             (No Reply Sequence)\n\
    \        FARP-REPLY (ELS command) Sequence\n             Accept/Reject Reply Sequence\n\
    \   The FARP Protocol Format [2] and Size:\n          FT_1, 76-bytes fixed size\n\
    \   The FARP Protocol Addressing:\n      - In a FARP-REQ, the S_ID in the FC Header\
    \ designates the\n      Requester's Port ID. The D_ID in the FC Header is the\
    \ broadcast\n      identifier 0xFF-FF-FF.\n      - In a FARP-REPLY, the S_ID in\
    \ the FC Header designates the\n      Responder's Port_ID. The D_ID in the FC\
    \ Header is the Requester's\n      Port_ID.\n"
- title: 5.3 FARP Command Format
  contents:
  - "5.3 FARP Command Format\n   FARP-REQ and FARP-REPLY commands have identical formats\
    \ (76-bytes\n   fixed size) and fields but use different command codes. See tables\n\
    \   below.\n +---------------------------------------------------------------------+\n\
    \ |                         FARP-REQ Command                            |\n +-------------------------------------+---------+---------------------+\n\
    \ |               Field                 | Size    |   Remarks           |\n |\
    \                                     | (Bytes) |                     |\n +-------------------------------------+---------+---------------------+\n\
    \ | 0x54-00-00-00                       |   4     | Request Command Code|\n +-------------------------------------+---------+---------------------+\n\
    \ | Match Address Code Points           |   1     | Indicates Address   |\n |\
    \                                     |         | Matching  Mechanism |\n +-------------------------------------+---------+---------------------+\n\
    \ | Port_ID of Requester                |   3     | Supplied by         |\n |\
    \                                     |         | Requester =         |\n |  \
    \                                   |         | S_ID in FC Header   |\n +-------------------------------------+---------+---------------------+\n\
    \ | Responder Flags                     |   1     | Response Action to  |\n |\
    \                                     |         | be taken            |\n +-------------------------------------+---------+---------------------+\n\
    \ | Port_ID of Responder                |   3     | Set to 0x00-00-00   |\n +-------------------------------------+---------+---------------------+\n\
    \ | WW_PN of Requester                  |   8     |Supplied by Requester|\n +-------------------------------------+---------+---------------------+\n\
    \ + WW_NN of Requester                  |   8     |OPTIONAL;            |\n |\
    \                                     |         |See Appendix A       |\n +-------------------------------------+---------+---------------------+\n\
    \ | WW_PN of Responder                  |   8     |Supplied by Requester|\n +-------------------------------------+---------+---------------------+\n\
    \ | WW_NN of Responder                  |   8     |OPTIONAL; see App. A |\n +-------------------------------------+---------+---------------------+\n\
    \ | IP Address of Requester             |   16    |OPTIONAL; see App. A |\n +-------------------------------------+---------+---------------------+\n\
    \ | IP Address of Responder             |   16    |OPTIONAL; see App. A |\n +-------------------------------------+---------+---------------------+\n\
    \ +---------------------------------------------------------------------+\n |\
    \                         FARP-REPLY Command                          |\n +-------------------------------------+---------+---------------------+\n\
    \ |               Field                 | Size    |   Remarks           |\n |\
    \                                     | (Bytes) |                     |\n +-------------------------------------+---------+---------------------+\n\
    \ | 0x55-00-00-00                       |   4     | Reply Command Code  |\n +-------------------------------------+---------+---------------------+\n\
    \ | Match Address Code Points           |   1     | Not Used and        |\n |\
    \                                     |         | Unchanged from the  |\n |  \
    \                                   |         | FARP-REQ            |\n +-------------------------------------+---------+---------------------+\n\
    \ | Port_ID of Requester                |   3     | Extracted from      |\n |\
    \                                     |         | FARP-REQ            |\n +-------------------------------------+---------+---------------------+\n\
    \ | Responder Flags                     |   1     | Not Used  and       |\n |\
    \                                     |         | Unchanged from the  |\n |  \
    \                                   |         | FARP-REQ            |\n +-------------------------------------+---------+---------------------+\n\
    \ | Port_ID of Responder                |   3     | Supplied by         |\n |\
    \                                     |         | Responder =         |\n |  \
    \                                   |         | S_ID in FC Header   |\n +-------------------------------------+---------+---------------------+\n\
    \ |WW_PN of Requester                   |   8     |Supplied by Requester|\n +-------------------------------------+---------+---------------------+\n\
    \ |WW_NN of Requester                   |   8     |OPTIONAL; see App. A |\n +-------------------------------------+---------+---------------------+\n\
    \ |WW_PN of Responder                   |   8     |Supplied by Requester|\n +-------------------------------------+---------+---------------------+\n\
    \ |WW_NN of Responder                   |   8     |OPTIONAL; see App. A |\n +-------------------------------------+---------+---------------------+\n\
    \ |IP Add. of Requester                 |   16    |OPTIONAL; see App. A |\n +-------------------------------------+---------+---------------------+\n\
    \ |IP Address of Responder              |   16    |OPTIONAL; see App. A |\n +-------------------------------------+---------+---------------------+\n\
    \   Following is a description of the address fields in the FARP\n   Commands.\n\
    \   Port_ID of Requester:\n   It is the 24-bit Port_ID used in the S_ID field\
    \ of the FC Header of a\n   FARP-REQ.  It is supplied by the Requester in a FARP-REQ\
    \ and retained\n   in a FARP-REPLY.\n   Port_ID of Responder:\n   It is the 24-bit\
    \ Port_ID used in the S_ID field of the FC Header of a\n   FARP-REPLY.  It SHALL\
    \ be set to 0x00-00-00 in a FARP-REQ. It is\n   supplied by the Responder in a\
    \ FARP-REPLY.\n   WW_PN:\n   This address field is used with the b'001', b'011',\
    \ b'101, b'111',\n   Match Address Code Points. See Match Address Code Point Table\
    \ below.\n   The Requester supplies the unique 8-byte WW_PN of the Requester and\n\
    \   the Responder. It is retained in a FARP-REPLY.\n   WW_NN:\n   The WW_NN address\
    \ field is used with Match Address Code Points\n   b'010', b'011', b'110', and\
    \ b'111', which are all optional. Its usage\n   is fully described in Appendix\
    \ A. When the WW_NN field is not used it\n   SHALL be either set to '0' or a valid\
    \ non-zero address.\n   IPv4:\n   The IPv4 address field is used with the Match\
    \ Address Code Points\n   b'100', b'101', b'110', and b'111', which are all optional.\
    \ Its usage\n   is fully described in Appendix A. When the IP Address field is\
    \ not\n   used it SHALL be either set to '0' or a valid IP address. A valid IP\n\
    \   address consists of the 32-bit IPv4 Address with the upper 96 bits\n   set\
    \ to '0'.\n"
- title: 5.4 Match Address Code Points
  contents:
  - "5.4 Match Address Code Points\n   For each receipt of the FARP-REQ Broadcast\
    \ ELS, the recipients match\n   one or more addresses based on the encoded bits\
    \ of the \"FARP Match\n   Address Code Points\" field shown in the table below.\
    \ FARP operation\n   with the Match Address Code Point equal to b'001' is described\
    \ in\n   this section. Other code points are OPTIONAL and are discussed in\n \
    \  Appendix A. The upper 5 bits of the Match Address Code Point byte are\n   unused\
    \ and their use is not currently defined.\n +------------------------------------------------------------------+\n\
    \ |                     Match Address Code Points                    |\n +------------------------------------------------------------------+\n\
    \ |   LSBits  |     Bit name       |           Action                |\n +-----------+--------------------+---------------------------------+\n\
    \ |    000    | Reserved           |                                 |\n +-----------+--------------------+---------------------------------+\n\
    \ |    001    | MATCH_WW_PN        | If 'WW_PN of Responder' =       |\n |   \
    \        |                    | Node's WW_PN then respond       |\n +-----------+--------------------+---------------------------------+\n\
    \ |    010    | MATCH_WW_NN        | OPTIONAL; see Appendix A        |\n +-----------+--------------------+---------------------------------+\n\
    \ |    011    | MATCH_WW_PN_NN     | OPTIONAL; see Appendix A        |\n +-----------+--------------------+---------------------------------+\n\
    \ |    100    | MATCH_IPv4         | OPTIONAL; see Appendix A        |\n +-----------+--------------------+---------------------------------+\n\
    \ |    101    | MATCH_WW_PN_IPv4   | OPTIONAL; see Appendix A        |\n +-----------+--------------------+---------------------------------+\n\
    \ |    110    | MATCH_WW_NN_IPv4   | OPTIONAL; see Appendix A        |\n +-----------+--------------------+---------------------------------+\n\
    \ |    111    | MATCH_WW_PN_NN_IPv4| OPTIONAL; see Appendix A        |\n +-----------+--------------------+---------------------------------+\n\
    \   When a node receives a FARP-REQ with Code Point b'001', it checks its\n  \
    \ WW_PN against the one set in 'WW_PN of Responder' field of the FARP-\n   REQ\
    \ command.  If there is a match, then the node issues a response\n   according\
    \ to the action indicated by the FARP Responder Flag.  See\n   table below.\n\
    \   WW_NN and IPv4 address fields are not used with the b'001' Code Point\n  \
    \ operation.  They SHALL be set to '0' or a valid address either by the\n   Requester\
    \ or the Requester and the Responder.\n   Note that there can be utmost one FARP-REPLY\
    \ per FARP-REQ.\n"
- title: 5.5 Responder Flags
  contents:
  - "5.5 Responder Flags\n   The Responder Flags define what Responder action to take\
    \ if the\n   result of the Match Address Code Points is successful. 'Responder\n\
    \   Flags' is an 8-bit field (bits 0-7) and is defined in the table\n   below.\
    \ This field is used only in a FARP-REQ.  This field is retained\n   unchanged\
    \ in a FARP-REPLY. If no bits are set, the Responder will\n   take no action.\n\
    \ +----------+-------------------------------------------------------+\n |   \
    \       |                 FARP Responder Flag                   |\n +----------+----------------+--------------------------------------+\n\
    \ | Bit      | Bit Name       |            Action                    |\n | Position\
    \ |                |                                      |\n +----------+----------------+--------------------------------------+\n\
    \ |    0     | INIT_P_LOGI    | Initiate a P_LOGI to the Requester   |\n +----------+----------------+--------------------------------------+\n\
    \ |    1     | INIT_REPLY     | Send FARP_REPLY to Requester         |\n +----------+----------------+--------------------------------------+\n\
    \ | 2 to 7   | Reserved       |                                      |\n +----------+----------------+--------------------------------------+\n\
    \   If INIT_P_LOGI bit is set then, a Login is performed with the port\n   identified\
    \ by \"Port_ID of Requester\" field.\n   If INIT_REPLY is set then, a FARP-REPLY\
    \ is sent to the Port\n   Identified by \"Port_ID of Requester\" field.\n   If\
    \ both bits are set at the same time, then both Actions are\n   performed.\n \
    \  All other bit patterns are undefined at this time and are reserved\n   for\
    \ possible future use.\n"
- title: 5.6 FARP Support Requirements
  contents:
  - "5.6 FARP Support Requirements\n   Responder action - FARP-REPLY and/or Port Login\
    \ - for a successful\n   MATCH_WW_PN is always REQUIRED. If there is no address\
    \ match then a\n   silent behavior is specified.\n   Support for all other Match\
    \ Address Code Points is OPTIONAL and a\n   silent behavior from the Responder\
    \ is valid when it is not supported.\n   Recipients of the FARP-REQ ELS SHALL\
    \ NOT issue a Service Reject\n   (LS_RJT) if FARP OPTIONAL mechanisms are not\
    \ supported.\n   In all cases, if there are no matches, then a silent behavior\
    \ is\n   specified.\n   If an implementation issues a FARP-REQ with a Match Address\
    \ Code\n   Point that is OPTIONAL, and fails to receive a response, and the\n\
    \   implementation has not obtained the Port_ID of the Responder's port\n   by\
    \ other means (e.g., prior FARP-REQ with other Code Points), then\n   the implementation\
    \ SHALL reattempt the FARP-REQ with the MATCH_WW_PN\n   Code Point.\n   Getting\
    \ multiple FARP Replies corresponding to a single FARP-REQ\n   should normally\
    \ never occur.  It is beyond the scope of this document\n   to specify conditions\
    \ under which this error may occur or what the\n   corrective action ought to\
    \ be.\n"
- title: 6. Exchange Management
  contents:
  - '6. Exchange Management

    '
- title: 6.1 Exchange Origination
  contents:
  - "6.1 Exchange Origination\n   FC Exchanges shall be established to transfer data\
    \ between ports.\n   Frames on IP exchanges shall not transfer Sequence Initiative.\
    \ See\n   Appendix E for a discussion on FC Exchanges.\n"
- title: 6.2 Exchange Termination
  contents:
  - "6.2 Exchange Termination\n   With the exception of the recommendations in Appendix\
    \ F, Section F.1,\n   \"Reliability in Class 3\", the mechanism for aging or expiring\n\
    \   exchanges based on activity, timeout, or other method is outside the\n   scope\
    \ of this document.\n   Exchanges may be terminated by either port. The Exchange\
    \ Originator\n   may terminate Exchanges by setting the LS bit, following normal\
    \ FC\n   standard FC-PH [2] rules. This specification prohibits the use of the\n\
    \   NOP ELS with LS set for Exchange termination.\n   Exchanges may be torn down\
    \ by the Exchange Originator or Exchange\n   Responder by using the ABTS_LS protocol.\
    \ The use of ABTS_LS for\n   terminating aged Exchanges or error recovery is outside\
    \ the scope of\n   this document.\n   The termination of IP Exchanges by Logout\
    \ is discouraged, since this\n   may terminate active Exchanges on other FC-4s.\n"
- title: 7. Summary of Supported Features
  contents:
  - "7. Summary of Supported Features\n   Note: 'Settable' means support is as specified\
    \ in the relevant\n   standard; all other key words are as defined earlier in\
    \ this\n   document.\n"
- title: 7.1  FC-4 Header
  contents:
  - "7.1  FC-4 Header\n +--------------------------------------------------------------------+\n\
    \ |                   Feature                     |   Support  | Notes |\n +--------------------------------------------------------------------+\n\
    \ | Type Code ( = 5) ISO8802-2 LLC/SNAP           | REQUIRED   |   2   |\n | Network_Headers\
    \                               | REQUIRED   |   3   |\n | Other Optional Headers\
    \                        | MUST NOT   |       |\n +--------------------------------------------------------------------+\n\
    \   Notes:\n      1. This table applies only to FC-4 related data, such as IP\
    \ and\n         ARP packets. This table does not apply to link services and\n\
    \         other non-FC-4 sequences (PLOGI, for example) that must occur\n    \
    \     for normal operation.\n      2. The TYPE field in the FC Header (Word 2\
    \ bits 31-24) MUST\n         indicate ISO 8802-2 LLC/SNAP Encapsulation (Type\
    \ 5). This\n         revision of the document focuses solely on the issues related\n\
    \         to running IP and ARP over FC. All other issues are outside\n      \
    \   the scope of this document, including full support for IEEE\n         802.2\
    \ LLC.\n      3. DF_CTL field (Word 3, bits 23-16 of FC-Header) MUST indicate\n\
    \         the presence of a Network_Header (0010 0000) on the First\n        \
    \ logical Frame of FC-4 Sequences.  It should not indicate the\n         presence\
    \ of a Network_Header on any subsequent frames of the\n         Sequence.\n"
- title: 7.2 R_CTL
  contents:
  - "7.2 R_CTL\n   R_CTL in FC-Header: Word 0, bits 31-24\n +--------------------------------------------------------------------+\n\
    \ |                      Feature                  |   Support  | Notes |\n +--------------------------------------------------------------------+\n\
    \ | Information Category (R_CTL Routing):         |            |       |\n | \
    \                                              |            |       |\n |    \
    \  FC-4 Device Data                         | REQUIRED   |   1   |\n |      Extended\
    \ Link Data                       | REQUIRED   |       |\n |      FC-4 Link Data\
    \                           | MUST NOT   |       |\n |      Video Data       \
    \                        | MUST NOT   |       |\n |      Basic Link Data     \
    \                     | REQUIRED   |       |\n |      Link Control           \
    \                  | REQUIRED   |       |\n |                                \
    \               |            |       |\n | R_CTL information :               \
    \            |            |       |\n |                                      \
    \         |            |       |\n |      Uncategorized                      \
    \      | MUST NOT   |       |\n |      Solicited Data                        \
    \   | MUST NOT   |       |\n |      Unsolicited Control                      |\
    \ REQUIRED   |       |\n |      Solicited Control                        | REQUIRED\
    \   |       |\n |      Unsolicited Data                         | REQUIRED   |\
    \   1   |\n |      Data Descriptor                          | MUST NOT   |   \
    \    |\n |      Unsolicited Command                      | MUST NOT   |      \
    \ |\n |      Command Status                           | MUST NOT   |       |\n\
    \ +--------------------------------------------------------------------+\n   Notes:\n\
    \      1. This is REQUIRED for FC-4 (IP and ARP) packets\n         - Routing bits\
    \ of R_CTL field MUST indicate Device Data\n           frames (0000)\n       \
    \  - Information Category of R_CTL field MUST indicate\n           Unsolicited\
    \ Data (0100)\n"
- title: 7.3 F_CTL
  contents:
  - "7.3 F_CTL\n   F_CTL in FC-Header: Word 2, bits 23-0\n +--------------------------------------------------------------------+\n\
    \ |                      Feature                  |   Support  | Notes |\n +--------------------------------------------------------------------+\n\
    \ | Exchange Context                              | Settable   |       |\n | Sequence\
    \ Context                              | Settable   |       |\n | First / Last\
    \ / End Sequence (FS/LS/ES)        | Settable   |       |\n | Chained Sequence\
    \                              | MUST NOT   |       |\n | Sequence Initiative\
    \ (SI)                      | Settable   |   1   |\n | X_ID Reassigned / Invalidate\
    \                  | MUST NOT   |       |\n | Unidirectional Transmit        \
    \               | Settable   |       |\n | Continue Sequence Condition       \
    \            | REQUIRED   |   2   |\n | Abort Seq. Condition -continue and single\
    \ Seq.| REQUIRED   |   3   |\n | Relative Offset - Unsolicited Data          \
    \  | Settable   |   4   |\n | Fill Bytes                                    |\
    \ Settable   |       |\n +--------------------------------------------------------------------+\n\
    \   Notes\n      1. For FC-4 frames, each N_Port shall have a dedicated OX_ID\
    \ for\n         sending data to each N_Port in the network and a dedicated\n \
    \        RX_ID for receiving data from each N_Port as well. Exchanges\n      \
    \   are used in a unidirectional mode, thus setting Sequence\n         Initiative\
    \ is not valid for FC-4 frames. Sequence Initiative is\n         valid when using\
    \ Extended Link Services.\n      2. This field is required to be 00, no information.\n\
    \      3. Sequence error policy is requested by an exchange originator in\n  \
    \       the F_CTL Abort Sequence Condition bits in the first data frame\n    \
    \     of the exchange. For Classes 1 and 2, ACK frame is required to\n       \
    \  be \"continuous sequence\".\n      4. Relative offset prohibited on all other\
    \ types (Information\n         Category) of frames.\n"
- title: 7.4 Sequences
  contents:
  - "7.4 Sequences\n +---------------------------------------------------------------------+\n\
    \ |                      Feature                    |   Support  |Notes |\n +---------------------------------------------------------------------+\n\
    \ | Class 2 open Sequences / Exchange               |     1      |   1  |\n |\
    \ Length of Seq. not limited by end-to-end credit | REQUIRED   |   2  |\n | IP\
    \ and ARP Packet and FC Data Field sizes       | REQUIRED   |   3  |\n | Capability\
    \ to receive Sequence of maximum size  | OPTIONAL   |   4  |\n | Sequence Streaming\
    \                              | MUST NOT   |   5  |\n | Stop Sequence Protocol\
    \                          | MUST NOT   |      |\n | ACK_0 support           \
    \                        | OPTIONAL   |   6  |\n | ACK_1 support             \
    \                      | REQUIRED   |   6  |\n | ACK_N support               \
    \                    | MUST NOT   |      |\n | Class of Service for transmitted\
    \ Sequences      |  Class     |   7  |\n |                                   \
    \              | 1, 2, or 3 |      |\n | Continuously Increasing Sequence Count\
    \          | OPTIONAL   | 8, 9 |\n +---------------------------------------------------------------------+\n\
    \   Notes:\n      1. Only one active sequence per exchange is optional.\n    \
    \  2. A Sequence Initiator shall be capable of transmitting Sequences\n      \
    \   containing more frames than the available credit indicated by a\n        \
    \ Sequence recipient at Login. FC-PH [2] end-to-end flow control\n         rules\
    \ will be followed when transmitting such Sequences.\n      3.  a) IP MTU size\
    \ is 65280-bytes and resulting FC Sequence\n             Payload size is 65536-bytes.\n\
    \          b) Maximally Minimum IP Packet size is 68-bytes and resulting\n   \
    \          FC Data Field size is 92-bytes.\n          c) ARP (and InARP) Packet\
    \ size is 28-bytes and resulting FC\n             Data Field size is 52-bytes.\n\
    \      4. Some OS environments may not handle the max Sequence Payload\n     \
    \    size of 65536. It is up to the administrator to configure the\n         Max\
    \ size for all systems.\n      5. All class 3 sequences are assumed to be non-streamed.\n\
    \      6. Only applies for Class 1 and 2. Use of ACK_1 is default, ACK_0\n   \
    \      used if indicated by Sequence recipient at Login.\n      7. The administrator\
    \ configured class of service is used, except\n         where otherwise specified\
    \ (e.g. Broadcasts are always sent in\n         Class 3).\n      8. Review Appendix\
    \ F, \"Reliability in Class 3\".\n      9. The first frame of the first sequence\
    \ of a new Exchange must\n         have SEQ_CNT = 0 [2].\n"
- title: 7.5 Exchanges
  contents:
  - "7.5 Exchanges\n +--------------------------------------------------------------------+\n\
    \ |                      Feature                  |   Support  | Notes |\n +--------------------------------------------------------------------+\n\
    \ | X_ID interlock support                        | OPTIONAL   |   1   |\n | OX_ID=FFFF\
    \                                    | MUST NOT   |       |\n | RX_ID=FFFF   \
    \                                 | OPTIONAL   |   2   |\n | Action if no exchange\
    \ resources available     | P_RJT      |   3   |\n | Long Lived Exchanges    \
    \                      | OPTIONAL   |   4   |\n | Reallocation of Idle Exchanges\
    \                | OPTIONAL   |       |\n +--------------------------------------------------------------------+\n\
    \   Notes:\n      1. Only applies to Classes 1 and 2, supported by the Exchange\n\
    \         Originator. A Port SHALL be capable of interoperating with\n       \
    \  another Port that requires X_ID interlock. The Exchange\n         Originator\
    \ facility within the Port shall use the X_ID\n         Interlock protocol in\
    \ such cases.\n      2. An Exchange Responder is not required to assign RX_IDs.\
    \ If a\n         RX_ID of FFFF is assigned, it is identifying Exchanges based\
    \ on\n         S_ID / D_ID / OX_ID only.\n      3. In Classes 1 and 2, a Port\
    \ shall reject a frame that would\n         create a new Exchange with a P_RJT\
    \ containing reason code\n         \"Unable to establish Exchange\". In Class\
    \ 3, the frame would be\n         dropped.\n      4. When an Exchange is created\
    \ between 2 Ports for IP/ARP data, it\n         remains active while the ports\
    \ are logged in with each other.\n         An Exchange SHALL NOT transfer Sequence\
    \ Initiative (SI).\n         Broadcasts and ELS commands may use short lived Exchanges.\n"
- title: 7.6 ARP and InARP
  contents:
  - "7.6 ARP and InARP\n +--------------------------------------------------------------------+\n\
    \ |                      Feature                  |   Support  | Notes |\n +--------------------------------------------------------------------+\n\
    \ | ARP Server Support                            | MUST  NOT  |   1   |\n | Response\
    \ to ARP requests                      | REQUIRED   |   2   |\n | Class of Service\
    \ for ARP requests             | Class 3    |   3   |\n | Class of Service for\
    \ ARP replies              |  Class     |   4   |\n |                        \
    \                       | 1, 2, or 3 |       |\n | Response to InARP requests\
    \                    | OPTIONAL   |       |\n | Class of Service for InARP requests/replies\
    \   | Class      |       |\n |                                               |\
    \ 1, 2 or 3  |   5   |\n +--------------------------------------------------------------------+\n\
    \ Notes:\n      1. Well-known Address FFFFFC is not used for ARP requests. Frames\n\
    \         from Well-known address FFFFFC are not considered to be ARP\n      \
    \   frames. Broadcast support is REQUIRED for ARP.\n      2. The IP Address is\
    \ mapped to a specific MAC address with ARP.\n      3. An ARP request is a Broadcast\
    \ Sequence, therefore Class 3\n         is always used.\n      4. An ARP reply\
    \ is a normal Sequence, thus the administrator\n         configured class of service\
    \ is used.\n      5. An InARP Request or Reply is a normal Sequence, thus an\n\
    \         administrator configured class of service is used.\n"
- title: 7.7 Extended Link Services (ELS)
  contents:
  - "7.7 Extended Link Services (ELS)\n +--------------------------------------------------------------------+\n\
    \ |                      Feature                  |   Support  | Notes |\n +--------------------------------------------------------------------+\n\
    \ | Class of service for ELS commands / responses | Class      |       |\n | \
    \                                              | 1,2 or 3   |   1   |\n | Explicit\
    \ N-Port Login                         | REQUIRED   |       |\n | Explicit F-Port\
    \ Login                         | REQUIRED   |       |\n | FLOGI ELS command \
    \                            | REQUIRED   |       |\n | PLOGI ELS command    \
    \                         | REQUIRED   |       |\n | ADISC ELS command       \
    \                      | REQUIRED   |       |\n | PDISC ELS command          \
    \                   | OPTIONAL   |   2   |\n | FAN ELS command               \
    \                | REQUIRED   |   5   |\n | LOGO ELS command                 \
    \             | REQUIRED   |       |\n | FARP-REQ/FARP-REPLY ELS commands    \
    \          | REQUIRED   |   3   |\n | Other ELS command support              \
    \       | OPTIONAL   |   4   |\n +-----------------------------------------------+------------+-------+\n\
    \   Notes:\n      1. The administrator configured class of service is used.\n\
    \      2. PDISC shall not be used as a Requester; ADISC shall be used\n      \
    \   instead. As a Responder, an implementation may need to respond\n         to\
    \ both ADISC and PDISC for compatibility with other\n         specifications.\n\
    \      3. Responder Action - FARP-REPLY and/or Port Login - for a\n         successful\
    \ MATCH_WW_PN is always REQUIRED.\n         Support for all other match Address\
    \ Codes Points is a silent\n         behavior from the Responder is valid when\
    \ it is not supported.\n         Recipients of the FARP-REQ ELS shall not issue\
    \ a Service Reject\n         (LS_RJT) if FARP is not supported.\n      4. If other\
    \ ELS commands are received an LS_RJT may be sent. NOP\n         is not required\
    \ by this specification, and shall not be used as\n         a mechanism to terminate\
    \ exchanges.\n      5. Required for FL_Ports\n"
- title: 7.8 Login Parameters
  contents:
  - "7.8 Login Parameters\n   Unless explicitly noted here, a compliant implementation\
    \ shall use\n   the login parameters as described in [4].\n"
- title: 7.8.1 Common Service Parameters - FLOGI
  contents:
  - "7.8.1 Common Service Parameters - FLOGI\n   - FC-PH Version, lowest version may\
    \ be 0x09 to indicate\n     'minimum 4.3'.\n   - Can't use BB_Credit=0 for N_Port\
    \ on a switched Fabric\n     (F_Port).\n"
- title: 7.8.2 Common Service Parameters - PLOGI
  contents:
  - "7.8.2 Common Service Parameters - PLOGI\n   - FC-PH Version, lowest version may\
    \ be 0x09 to indicate\n     'minimum 4.3'.\n   - Can't use BB_Credit=0 for N_Port\
    \ in a Point-to-Point\n     configuration\n   - Random Relative Offset is optional.\n\
    \   - Note that the 'Receive Data Field Size' fields specified in\n     the PLOGI\
    \ represent both optional headers and payload.\n   - The MAC Address can therefore\
    \ be extracted from the 6 lower\n     bytes of the WW_PN field (when the IEEE\
    \ 48-bit Identifier\n     format is chosen as the NAA) during PLOGI or ACC payload\n\
    \     exchanged during Fibre Channel Login [2].\n   - The MAC Address can also\
    \ be extracted from the WW_PN field in\n     the Network_Header during ADISC (and\
    \ ADISC ACC), or PDISC\n     (and PDISC ACC).\n"
- title: 7.8.3 Class Service Parameters - PLOGI
  contents:
  - "7.8.3 Class Service Parameters - PLOGI\n   - Discard error policy only.\n"
- title: 8. Security Considerations
  contents:
  - '8. Security Considerations

    '
- title: 8.1 IP and ARP Related
  contents:
  - "8.1 IP and ARP Related\n   IP and ARP do not introduce any new security concerns\
    \ beyond what\n   already exists within the Fibre Channel Protocols and Technology.\n\
    \   Therefore IP and ARP related Security does not require special\n   consideration\
    \ in this document.\n"
- title: 8.2 FC Related
  contents:
  - "8.2 FC Related\n   FC Standards [11] specify a Security Key Server (independent\
    \ of IP\n   and ARP) as an optional service. However, there are no known\n   implementations\
    \ of this server yet. Also, the previously defined [2]\n   use of a Security Header\
    \ has been discontinued [11].\n"
- title: 9. Acknowledgement
  contents:
  - "9. Acknowledgement\n   This specification is based on FCA IP Profile, Version\
    \ 3.3.  The FCA\n   IP Profile was a joint work of the Fibre Channel Association\
    \ (FCA)\n   vendor community.  The following organizations or individuals have\n\
    \   contributed to the creation of the FCA IP Profile: Adaptec, Ancor,\n   Brocade,\
    \ Clariion, Crossroads, emf Associates, Emulex, Finisar,\n   Gadzoox, Hewlett\
    \ Packard, Interphase, Jaycor, McData, Migration\n   Associates, Orca Systems,\
    \ Prisa, Q-Logic, Symbios, Systran,\n   Tektronix, Univ. of Minnesota, Univ. of\
    \ New Hamshire. Jon Infante\n   from Emulex deserves special mention for his contributions\
    \ to the\n   FARP Protocol. The authors extend their thanks to all who provided\n\
    \   comments and especially to Lansing Sloan from LLNL for his detailed\n   comments.\n"
- title: 10. References
  contents:
  - "10. References\n   [1] FCA IP Profile, Revision 3.3, May 15, 1997\n   [2] Fibre\
    \ Channel Physical and Signaling Interface (FC-PH) , ANSI\n       X3.230-1994\n\
    \   [3] Fibre Channel Link Encapsulation (FC-LE), Revision 1.1, June 26,\n   \
    \    1996\n   [4] Fibre Channel Fabric Loop Attachment (FC-FLA), Rev. 2.7, August\n\
    \       12, 1997\n   [5] Fibre Channel Private Loop SCSI Direct Attach (FC-PLDA),\n\
    \       Rev. 2.1, September 22, 1997\n   [6] Fibre Channel Physical and Signaling\
    \ Interface-2 (FC-PH-2),\n       Rev. 7.4, ANSI X3.297-1996\n   [7] Fibre Channel\
    \ Arbitrated Loop (FC-AL), ANSI X3.272-1996\n   [8] Postel, J. and J. Reynolds,\
    \ \"A standard for the Transmission of\n       IP Datagrams over IEEE 802 Networks\"\
    , STD 43, RFC 1042, February\n       1988.\n   [9] Plummer, D. \"An Ethernet Address\
    \ Resolution Protocol -or-\n       Converting Network Addresses to 48-bit Ethernet\
    \ Address for\n       Transmission on Ethernet Hardware\", STD 37, RFC 826, November\n\
    \       1982.\n   [10] FCSI IP Profile, FCSI-202, Revision 2.1, September 8, 1995\n\
    \   [11] Fibre Channel Physical and Signaling Interface -3 (FC-PH-3),\n      \
    \  Rev. 9.3, ANSI X3.303-199x\n   [12] Fibre Channel-The Basics, \"Gary R. Stephens\
    \ and Jan V. Dedek\",\n        Ancot Corporation\n   [13] Fibre Channel -Gigabit\
    \ Communications and I/O for Computers\n        Networks \"Alan Benner\", McGraw-Hill,\
    \ 1996, ISBN 0-07-005669-2\n   [14] Fibre Channel Generic Services -2 (FC-GS-2),\
    \ Rev. 5.2\n        X3.288-199x\n   [15] Bradley, T. and C. Brown, \"Inverse Address\
    \ Resolution Protocol\",\n        RFC 1293, January 1992.\n   [16] Bradley, T.,\
    \ Brown, C. and A. Malis, \"Inverse Address Resolution\n        Protocol\", RFC\
    \ 2390, August 1992.\n   [17] Postel, J., \"Internet Protocol\", STD 5, RFC 791,\
    \ September 1981.\n   [18] The Fibre Channel Consultant: A Comprehensive Introduction,\n\
    \        \"Robert W. Kembel\", Northwest Learning Associates, 1998\n   [19] Bradner,\
    \ S., \"Key Words for use in RFCs to Indicate Requirement\n        Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [20] Narten, T. and C. Burton, \"A Caution on\
    \ The Canonical Ordering\n        of Link-Layer Addresses\",  RFC 2469, December\
    \ 1998.\n"
- title: 11. Authors' Addresses
  contents:
  - "11. Authors' Addresses\n   Murali Rajagopal\n   Gadzoox Networks, Inc.\n   711\
    \ Kimberly Avenue, Suite 100\n   Placentia, CA 92870\n   Phone: +1 714 577 6805\n\
    \   Fax: +1 714 524 8508\n   EMail: murali@gadzoox.com\n   Raj Bhagwat\n   Gadzoox\
    \ Networks, Inc.\n   711 Kimberly Avenue, Suite 100\n   Placentia, CA 92870\n\
    \   Phone: +1 714 577 6806\n   Fax: +1 714 524 8508\n   EMail: raj@gadzoox.com\n\
    \   Wayne Rickard\n   Gadzoox Networks, Inc.\n   711 Kimberly Avenue, Suite 100\n\
    \   Placentia, CA 92870\n   Phone: +1 714 577 6803\n   Fax: +1 714 524 8508\n\
    \   EMail: wayne@gadzoox.com\n"
- title: 'Appendix A: Additional Matching Mechanisms in FARP'
  contents:
  - "Appendix A: Additional Matching Mechanisms in FARP\n   Section 5 described the\
    \ FC Layer mapping between the WW_PN and the\n   Port_ID using the FARP Protocol.\
    \ This appendix describes other\n   optional criteria for address matching and\
    \ includes:\n      - WW_NN\n      - WW_PN & WW_NN at the same time\n      - IPv4\n\
    \      - IPv4 & WW_PN at the same time\n      - IPv4 & WW_NN at the same time\n\
    \      - IPv4 & WW_PN & WW_NN at the same time\n   Depending on the Match Address\
    \ Code Points, the FARP protocol\n   fundamentally resolves three main types of\
    \ addresses to Port_IDs and\n   is described in table below.\n      - For Match\
    \ Address Code Point b'001':  WW_PN Names fields are\n        used to resolve\
    \ the WW_PN names to Port_IDs.  WW_NN and IP\n        address fields are not used\
    \ with these Code Points and SHALL be\n        set to either '0' or valid addresses\
    \ by Requester or Requester\n        and Responder.\n      - For Match Address\
    \ Code Point b'010':  WW_NN Names fields are\n        used to resolve the WW_NN\
    \ names to Port_IDs.  WW_PN and IP\n        address fields are not used with these\
    \ Code Points and SHALL be\n        set to either '0' or valid addresses by Requester\
    \ or Requester\n        and Responder.\n      - For Match Address Code Point b'100':\
    \  IPv4 fields are used to\n        resolve the IPv4 addresses to Port_IDs.  WW_PN\
    \ and WW_NN fields\n        are not used with these Code Points and SHALL be set\
    \ to either '\n        0' or valid addresses by Requester or Requester and Responder.\n\
    \      - For all other Match Address Code Points b'011', b'101',b'110',\n    \
    \    b'111', depending on set bits one or more addresses are jointly\n       \
    \ resolved to a Port_ID. See table below. If fields are not used,\n        then\
    \ they are set either to '0' or valid addresses.\n   The Responder Flags remain\
    \ the same as before. Note that there can be\n   utmost one FARP-REPLY per FARP-REQ.\n\
    \   Tables showing FARP-REQ and FARP-REPLY and address fields setting are\n  \
    \ given below:\n +--------------------------------------------------------------------+\n\
    \ |                       Match Address Code Points                    |\n +--------------------------------------------------------------------+\n\
    \ | LSBits|      Bit name      |             Action                    |\n +-------+--------------------+---------------------------------------+\n\
    \ | 000   |   Reserved         |                                       |\n +-------+--------------------+---------------------------------------+\n\
    \ | 001   | MATCH_WW_PN        | If 'WW_PN of Responder' =             |\n | \
    \      |                    | Node's WW_PN then respond             |\n +-------+--------------------+---------------------------------------+\n\
    \ | 010   | MATCH_WW_NN        | If 'WW_NN of Responder' =             |\n | \
    \      |                    | Node's WW_NN then respond             |\n +-------+--------------------+---------------------------------------+\n\
    \ | 011   | MATCH_WW_PN_NN     | If both 'WW_PN of Responder' &        |\n | \
    \      |                    | 'WW_NN of Responder' =                |\n |    \
    \   |                    | Node's WW_PN & WW_NN then respond     |\n +-------+--------------------+---------------------------------------+\n\
    \ | 100   | MATCH_IPv4         | If 'IPv4 Address of Responder' =      |\n | \
    \      |                    | Node's IPv4 Address then respond      |\n +-------+--------------------+---------------------------------------+\n\
    \ | 101   | MATCH_WW_PN_IPv4   | If 'WW_PN & IPv4 of Responder' =      |\n | \
    \      |                    | Node's WW_PN and IPv4 then respond    |\n +-------+--------------------+---------------------------------------+\n\
    \ | 110   | MATCH_WW_NN_IPv4   | If both 'WW_NN of Responder' &        |\n | \
    \      |                    | 'IPv4 Address of Responder' =         |\n |    \
    \   |                    | Node's WW_NN & IPv4 then respond      |\n +-------+--------------------+---------------------------------------+\n\
    \ | 111   |MATCH_WW_PN_NN_IPv4 | If 'WW_PN of Responder' &             |\n | \
    \      |                    | 'WW_NN of Responder' &                |\n |    \
    \   |                    | 'IPv4 Address of Responder' =         |\n |       |\
    \                    | Nodes' WW_PN & WW_NN & IPv4           |\n |       |   \
    \                 | then respond                          |\n +-------+--------------------+---------------------------------------+\n\
    \ +---------------------------------------------------------------------+\n |\
    \                         FARP-REQ Command                            |\n +-------------------------------+---------+---------------------------+\n\
    \ |               Field           | Size    |         Remarks           |\n |\
    \                               | (Bytes) |                           |\n +-------------------------------+---------+---------------------------+\n\
    \ | 0x54-00-00-00                 |   4     | Request Command Code      |\n +-------------------------------+---------+---------------------------+\n\
    \ | Match Address Code Points     |   1     | Indicates Address         |\n |\
    \                               |         | Matching Mechanism        |\n +-------------------------------+---------+---------------------------+\n\
    \ | Port_ID of Requester          |   3     |Supplied by Requester      |\n +-------------------------------+---------+---------------------------+\n\
    \ | Responder Flags               |   1     |Response Action to be taken|\n +-------------------------------+---------+---------------------------+\n\
    \ | Port_ID of Responder          |   3     | Set to 0x00-00-00         |\n +-------------------------------+---------+---------------------------+\n\
    \ |WW_PN of Requester             |   8     | Supplied by Requester     |\n +-------------------------------+---------+---------------------------+\n\
    \ |WW_NN of Requester             |   8     |OPTIONAL;                  |\n |\
    \                               |         |Supplied by Requester      |\n +-------------------------------+---------+---------------------------+\n\
    \ |WW_PN of Responder             |   8     |Supplied by Requester      |\n +-------------------------------+---------+---------------------------+\n\
    \ |WW_NN of Responder             |   8     |OPTIONAL ;Supplied by      |\n |\
    \                               |         |Requester or Responder     |\n +-------------------------------+---------+---------------------------+\n\
    \ |IP Add. of Requester           |   16    |OPTIONAL; Supplied by      |\n |\
    \                               |         |Requester                  |\n |  \
    \                             |         |IPv4 Add.=low 32 bits      |\n +-------------------------------+---------+---------------------------+\n\
    \ |IP Address of Responder        |   16    |OPTIONAL; Supplied by      |\n |\
    \                               |         |Requester or Responder     |\n |  \
    \                             |         |IPv4 Add.=low 32 bits      |\n +-------------------------------+---------+---------------------------+\n\
    \ +---------------------------------------------------------------------+\n |\
    \                         FARP-REPLY Command                          |\n +-------------------------------+---------+---------------------------+\n\
    \ |               Field           | Size    |        Remarks            |\n |\
    \                               | (Bytes) |                           |\n +-------------------------------+---------+---------------------------+\n\
    \ | 0x55-00-00-00                 |   4     |Reply Command Code         |\n +-------------------------------+---------+---------------------------+\n\
    \ | Match Address Code Points     |   1     | Not Used and unchanged    |\n |\
    \                               |         |from the FARP-REQ          |\n +-------------------------------+---------+---------------------------+\n\
    \ | Port_ID of Requester          |   3     |Supplied by Requester      |\n +-------------------------------+---------+---------------------------+\n\
    \ | Responder Flags               |   1     | Not Used and unchanged    |\n |\
    \                               |         |from the FARP-REQ          |\n +-------------------------------+---------+---------------------------+\n\
    \ | Port_ID of Responder          |   3     |Supplied by Responder      |\n +-------------------------------+---------+---------------------------+\n\
    \ |WW_PN of Requester             |   8     |Supplied by Requester      |\n +-------------------------------+---------+---------------------------+\n\
    \ |WW_NN of Requester             |   8     |OPTIONAL; Supplied by      |\n |\
    \                               |         |Requester                  |\n +-------------------------------+---------+---------------------------+\n\
    \ |WW_PN of Responder             |   8     |Supplied by Requester      |\n +-------------------------------+---------+---------------------------+\n\
    \ |WW_NN of Responder             |   8     |OPTIONAL; Supplied by      |\n |\
    \                               |         |Requester or Responder     |\n +-------------------------------+---------+---------------------------+\n\
    \ |IP Add. of Requester           |   16    |OPTIONAL; Supplied by      |\n |\
    \                               |         |Requester                  |\n |  \
    \                             |         |IPv4 Add.=low 32 bits      |\n +-------------------------------+---------+---------------------------+\n\
    \ |IP Address of Responder        |   16    |OPTIONAL; Supplied by      |\n |\
    \                               |         |Requester or Responder     |\n |  \
    \                             |         |IPv4 Add.=low 32 bits      |\n +-------------------------------+---------+---------------------------+\n"
- title: 'Appendix B: InARP'
  contents:
  - 'Appendix B: InARP

    '
- title: B.1 General Discussion
  contents:
  - "B.1 General Discussion\n   Inverse ARP (InARP) is a mechanism described in RFC\
    \ 1293/2390 [15,\n   16], which is useful when a node desires to know the protocol\
    \ address\n   of a target node whose hardware address is known. Situations where\n\
    \   this could occur are described in [15, 16]. The motivation for using\n   InARP\
    \ in FC is to allow a node to learn the IP address of another\n   node with which\
    \ it has performed a Port Login (PLOGI).  PLOGI is a\n   normal FC process that\
    \ happens between nodes, independent of this\n   standard. PLOGI makes it possible\
    \ for a node to discover the WW_PN\n   and the Port_ID of the other node but not\
    \ its IP address. A node in\n   this way may potentially obtain the IP address\
    \ of all nodes with\n   which it can PLOGI.\n   Note that the use of the InARP\
    \ mechanism can result in resolving all\n   WW_PN to IP addresses and ARP may\
    \ no longer be required. This can be\n   beneficially applied in cases where a\
    \ particular FC topology makes it\n   inefficient to send out an ARP broadcast.\n"
- title: B.2 InARP Protocol Operation
  contents:
  - "B.2 InARP Protocol Operation\n   InARP uses the same ARP Packet format but with\
    \ different 'Op Codes',\n   one for InARP Request and another for InARP Reply.\n\
    \   The InARP protocol operation is very simple. The requesting node\n   fills\
    \ the hardware address (WW_PN) of the target device and sets the\n   protocol\
    \ address to 0x00-00-00-00. Because, the request is sent to a\n   node whose WW_PN\
    \ and Port_ID are known, there is no need for a\n   broadcast. The target node\
    \ fills in its Protocol address (IP address\n   in this case) and sends an InARP\
    \ Reply back to the sender.  A node\n   may collect, all such WW_PN and IP addresses\
    \ pairs in a similar way.\n"
- title: B.3 InARP Packet Format
  contents:
  - "B.3 InARP Packet Format\n   Since the InARP protocol uses the same packet format\
    \ as the ARP\n   protocol, much of the discussion on ARP formats given in Section\
    \ 4\n   applies here.\n   The InARP is 28-bytes long in this application and uses\
    \ two packet\n   types:  Request and Reply. Like ARP, the InARP Packet fields\
    \ are\n   common to both InARP Requests and InARP Replies.\n   InARP Request and\
    \ Reply Packets are encapsulated in a single frame FC\n   Sequence much like ARP.\
    \ Compliant InARP Request and Reply FC\n   Sequences SHALL include Network_Headers.\n\
    \   The 'HW Type' field SHALL be set to 0x00-01.\n   The 'Protocol' field SHALL\
    \ be set to 0x08-00 indicating IP protocol.\n   The 'HW Addr Length' field SHALL\
    \ be set to 0x06 indicating 6-bytes of\n   HW address.\n   The 'Protocol Addr\
    \ Length' field SHALL be set to 0x04 indicating\n   4-bytes of IP address.\n \
    \  The 'Operation' Code field SHALL be set as follows:\n           0x00-08 for\
    \ InARP Request\n           0x00-09 for InARP Reply\n   The 'HW Addr of Sender'\
    \ field SHALL be the 6-byte IEEE MAC address of\n   the Requester (InARP Request)\
    \ or Responder (InARP Reply).\n   The 'Protocol Addr of Sender' field SHALL be\
    \ the 4-byte IP address of\n   the Requester (InARP Request) or Responder (InARP\
    \ Reply).\n   The 'HW Addr of Target' field SHALL be set to the 6-byte MAC address\n\
    \   of the Responder in an InARP Request and to the 6-byte MAC address of\n  \
    \ the Requester in an InARP Reply.\n   The 'Protocol Addr of Target' field SHALL\
    \ be set to 0x00-00-00-00 in\n   an InARP Request and to the 4-byte IP address\
    \ of the Requester in an\n   InARP Reply.\n"
- title: B.4 InARP Support Requirements
  contents:
  - "B.4 InARP Support Requirements\n   Support for InARP is OPTIONAL. If a node does\
    \ not support InARP and\n   it receives an InARP Request message then a silent\
    \ behavior is\n   specified.\n"
- title: 'APPENDIX C: Some Informal Mechanisms for FC Layer Mappings'
  contents:
  - "APPENDIX C: Some Informal Mechanisms for FC Layer Mappings\n   Each method SHALL\
    \ have some check to ensure PLOGI has completed\n   successfully before data is\
    \ sent. A related concern in large networks\n   is limiting concurrent logins\
    \ to only those ports with active IP\n   traffic.\n"
- title: C.1 Login on Cached Mapping Information
  contents:
  - "C.1 Login on Cached Mapping Information\n   This method insulates the level performing\
    \ Login from the level\n   interpreting ARP. It is more accommodating of non-ARP\
    \ mechanisms for\n   building the FC-layer mapping table.\n      1. Broadcast\
    \ messages that carry a Network_Header contain the S_ID\n         on the FC-header\
    \ and WW_PN in the Network-Header.  Caching this\n         information provides\
    \ a correlation of Port_ID to WW_PN. If the\n         received Broadcast message\
    \ is compliant with this\n         specification, the WW_PN will contain the MAC\
    \ Address.\n      2. The WW_PN is \"available\" if Login has been performed to\
    \ the\n         Port_ID and flagged. If Login has not been performed, the WW_PN\n\
    \         is \"unavailable\".\n      3. If an outbound packet is destined for\
    \ a port that is\n         \"unavailable\", the cached information (from broadcast)\
    \ is used\n         to look up the Port_ID.\n      4. After sending an ELS PLOGI\
    \ command (Port Login) to the Port\n         (from a higher level entity at the\
    \ host), waiting for an\n         outbound packet before sending this Port Login\
    \ conserves\n         resources for only those ports which wish to establish\n\
    \         communication.\n      5. After Port Login completes (ACC received),\
    \ the outbound packet\n         can be forwarded. At this point in time, both\
    \ ends have the\n         necessary information to complete their <IP address,\
    \ MAC\n         Address, Port_ID> association.\n"
- title: C.2 Login on ARP Parsing
  contents:
  - "C.2 Login on ARP Parsing\n   This method performs Login sooner by parsing ARP\
    \ before passing it up\n   to higher levels for IP/MAC Address correlation. It\
    \ requires a low-\n   level awareness of the IP address, and is therefore protocol-\n\
    \   specific.\n      1. When an ARP Broadcast Message is received, the S_ID is\n\
    \         extracted from the FC-header and the corresponding\n         Network_Source_Address\
    \ from the Network_Header.\n      2. The ARP payload is parsed to determine if\n\
    \         (a) this host is the target of the ARP request (Target IP\n        \
    \     Address match), and\n         (b) if this host is currently logged in with\
    \ the port\n             (Port_ID = S_ID) originating the ARP broadcast.\n   \
    \   3. The ARP is passed to a higher level for ARP Response\n         generation.\n\
    \      4. If a Port Login is required, an ELS PLOGI command (Port Login)\n   \
    \      is sent immediately to the Port originating the ARP Broadcast.\n      5.\
    \ After Port Login completes, an ARP response can be forwarded.\n         Note\
    \ that there are two possible scenarios:\n         - The ACC to PLOGI returns\
    \ before the ARP reply is processed\n           and the ARP Reply is immediately\
    \ forwarded.\n         - The ARP reply is delayed, waiting for ACC (successful\n\
    \           Login).\n      6. At this point in time, both ends have the necessary\n\
    \         information to complete their\n         <IP address, MAC Address, Port_ID>\
    \ association.\n"
- title: C.3 Login to Everyone
  contents:
  - "C.3 Login to Everyone\n   In Fibre Channel topologies with a limited number of\
    \ ports, it may be\n   efficient to unconditionally Login to each port. This method\
    \ is\n   discouraged in fabric and public loop environments.\n   After Port Login\
    \ completes, the MAC Address to Port_ID Address tables\n   can be constructed.\n"
- title: C.4 Static Table
  contents:
  - "C.4 Static Table\n   In some loop environments with a limited number of ports,\
    \ a static\n   mapping from a MAC Address to Port_ID (D_ID or AL_PA) may be\n\
    \   maintained.  The FC layer will always know the destination Port_ID\n   based\
    \ on the table. The table is typically downloaded into the driver\n   at configuration\
    \ time. This method scales poorly, and is therefore\n   not recommended.\n"
- title: 'Appendix D:  FC Layer Address Validation'
  contents:
  - 'Appendix D:  FC Layer Address Validation

    '
- title: D.1 General Discussion
  contents:
  - "D.1 General Discussion\n   At all times, the <WW_PN, Port_ID> mapping MUST be\
    \ valid before use.\n   There are many events that can invalidate this mapping.\
    \  The\n   following discussion addresses conditions when such a validation is\n\
    \   required.\n   After a FC link interruption occurs, the Port_ID of a port may\n\
    \   change.  After the interruption, the Port_IDs of all other ports that\n  \
    \ have previously performed PLOGI (N_Port Login) with this port may\n   have changed,\
    \ and its own Port_ID may have changed.\n   Because of this, address validation\
    \ is required after a LIP in a loop\n   topology [7] or after NOS/OLS in a point-to-point\
    \ topology [6].\n   Port_IDs will not change as a result of Link Reset (LR),thus\
    \ address\n   validation is not required.\n   In addition to actively validating\
    \ devices after a link interruption,\n   if a port receives any FC-4 data frames\
    \ (other than broadcast\n   frames), from a port that is not currently logged\
    \ in, then it shall\n   send an explicit Extended Link Service (ELS) Request logout\
    \ (LOGO)\n   command to that port.\n   ELS commands (Requests and Replies) are\
    \ used by an N_Port to solicit\n   a destination port (F_Port or N_Port) to perform\
    \ some link-level\n   function or service.) The LOGO Request is used to request\n\
    \   invalidation of the service parameters and Port_ID of the recipient\n   N_Port.\n\
    \   The level of initialization and subsequent validation and recovery\n   reported\
    \ to the upper (FC-4) layers is implementation-specific.\n   In general, an explicit\
    \ Logout (LOGO) SHALL be sent whenever the FC-\n   Layer mapping between the Port_ID\
    \ and WW_PN of a remote port is\n   removed.\n   The effect of power-up or re-boot\
    \ on the mapping tables is outside\n   the scope of this specification.\n"
- title: D.2 FC Layer Address Validation in a Point-to-Point Topology
  contents:
  - "D.2 FC Layer Address Validation in a Point-to-Point Topology\n   No validation\
    \ is required after LR. In a point-to-point topology,\n   NOS/OLS causes implicit\
    \ Logout of each port and after a NOS/OLS, each\n   port must perform a PLOGI\
    \ [2].\n"
- title: D.3 FC Layer Address Validation in a Private Loop Topology
  contents:
  - "D.3 FC Layer Address Validation in a Private Loop Topology\n   After a LIP, a\
    \ port SHALL not transmit any link data to another port\n   until the address\
    \ of the other port has been validated. The\n   validation consists of completing\
    \ either ADISC or PDISC. (See\n   Appendix G.)\n   ADISC (Address Discovery) is\
    \ an ELS command for discovering the hard\n   addresses - the 24-bit identifier-\
    \ of NL_Ports [5], [6].\n   PDISC (Discover Port) is an ELS command for exchanging\
    \ service\n   parameters without affecting Login state [5], [6].\n   As a requester,\
    \ this specification prohibits PDISC and requires\n   ADISC.\n   As a responder,\
    \ an implementation may need to respond to both ADISC\n   and PDISC for compatibility\
    \ with other FC specifications.\n   If the three addresses, Port_ID, WW_PN, WW_NN,\
    \ exactly match the\n   values prior to the LIP, then any active exchanges may\
    \ continue.\n   If any of the three addresses have changed, then the node must\
    \ be\n   explicitly Logged out [4], [5].\n   If a port's N_Port ID changes after\
    \ a LIP, then all active Port-ID to\n   WW_PN mappings at this port must be explicitly\
    \ Logged out.\n"
- title: D.4 FC Layer Address Validation in a Public Loop Topology
  contents:
  - "D.4 FC Layer Address Validation in a Public Loop Topology\n   A FAN (Fabric Address\
    \ Notification) ELS command is sent by the fabric\n   to all known previously\
    \ logged in  ports following an initialization\n   event. Therefore, after a LIP,\
    \ hosts may wait for this notification\n   to arrive or they may perform a FLOGI.\n\
    \   If the WW_PN and WW_NN of the fabric FL_Port contained in the FAN ELS\n  \
    \ or FLOGI response exactly match the values before the LIP, and if the\n   AL_PA\
    \ obtained by the port is the same as the one before the LIP,\n   then the port\
    \ may resume all exchanges. If not, then FLOGI (Fabric\n   Login) must be performed\
    \ with the fabric and all nodes must be\n   explicitly Logged out.\n   A public\
    \ loop device will have to perform the private loop\n   authentication to any\
    \ nodes on the local loop which have an Area +\n   Domain Address == 0x00-00-XX\n"
- title: D.5 FC Layer Address Validation in a Fabric Topology
  contents:
  - "D.5 FC Layer Address Validation in a Fabric Topology\n   No validation is required\
    \ after LR (link reset).\n   After NOS/OLS, a port must perform FLOGI. If, after\
    \ FLOGI, the S_ID\n   of the port, the WW_PN of the fabric, and the WW_NN of the\
    \ fabric are\n   the same as before the NOS/OLS, then the port may resume all\n\
    \   exchanges. If not, all nodes must be explicitly, Logged out [2].\n"
- title: 'APPENDIX E: Fibre Channel Overview'
  contents:
  - 'APPENDIX E: Fibre Channel Overview

    '
- title: E.1 Brief Tutorial
  contents:
  - "E.1 Brief Tutorial\n   The FC Standard [2] defines 5 \"levels\" (not layers)\
    \ for its protocol\n   description: FC-0, FC-1, FC-2, FC-3, and FC-4. The first\
    \ three levels\n   (FC-0, FC-1, FC-2) are largely concerned with the physical\
    \ formatting\n   and control aspects of the protocol. FC-3 has been architected\
    \ to\n   provide a place holder for functions that might need to be performed\n\
    \   after the upper layer protocol has requested the transmission of an\n   information\
    \ unit, but before FC-2 is asked to deliver that piece of\n   information by using\
    \ a sequence of frames [18]. At this time, no FC-3\n   functions have been defined.\
    \  FC-4 is meant for supporting profiles\n   of Upper Layer Protocols (ULP) such\
    \ as IP and Small Computer System\n   Interface (SCSI), and supports a relatively\
    \ small set compared to LAN\n   protocols such as IEEE 802.3.\n   FC devices are\
    \ called \"Nodes\", each of which has at least one \"Port\"\n   to connect to\
    \ other ports. A Node may be a workstation, a disk drive\n   or disk array, a\
    \ camera, a display unit, etc.  A \"Link\" is two\n   unidirectional paths flowing\
    \ in opposite directions and connecting\n   two Ports within adjacent Nodes.\n\
    \   FC Nodes communicate using higher layer protocols such as SCSI and IP\n  \
    \ and are configured to operate using Point-to-Point, Private Loop,\n   Public\
    \ Loop (attachment to a Fabric), or Fabric network topologies.\n   The point-to-point\
    \ is the simplest of the four topologies, where only\n   two nodes communicate\
    \ with each other. The private loop may connect a\n   number of devices (max 126)\
    \ in a logical ring much like Token Ring,\n   and is distinguished from a public\
    \ loop by the absence of a Fabric\n   Node participating in the loop. The Fabric\
    \ topology is a switched\n   network where any attached node can communicate with\
    \ any other. For a\n   detail description of FC topologies refer to [18].\n  \
    \ Table below summarizes the usage of port types depending on its\n   location\
    \ [12]. Note that E-Port is not relevant to any discussion in\n   this specification\
    \ but is included below for completeness.\n  +-----------+-------------+-----------------------------------------+\n\
    \  | Port Type |  Location   |      Topology Associated with           |\n  +-----------+-------------+-----------------------------------------+\n\
    \  | N_Port    |   Node      |      Point-to-Point or Fabric           |\n  +-----------+-------------+-----------------------------------------+\n\
    \  | NL_Port   |   Node      |In N_Port mode -Point-to-Point or Fabric |\n  |\
    \           |             |In NL_Port mode - Arbitrated Loop        |\n  +-----------+-------------+-----------------------------------------+\n\
    \  | F_Port    |   Fabric    |                   Fabric                |\n  +-----------+-------------+-----------------------------------------+\n\
    \  | FL_Port   |   Fabric    | In F_Port mode - Fabric                 |\n  |\
    \           |             | In FL_Port mode - Arbitrated Loop       |\n  +-----------+-------------+-----------------------------------------+\n\
    \  | E_Port    |   Fabric    |     Internal Fabric Expansion           |\n  +-----------+-------------+-----------------------------------------+\n"
- title: E.2 Exchange, Information Unit, Sequence, and Frame
  contents:
  - "E.2 Exchange, Information Unit, Sequence, and Frame\n   The FC 'Exchange' is\
    \ a mechanism used by two FC ports to identify and\n   manage an operation between\
    \ them [18]. An Exchange is opened whenever\n   an operation is started between\
    \ two ports. The Exchange is closed\n   when this operation ends.\n   The FC-4\
    \ Level specifies data units for each type of application\n   level payload called\
    \ 'Information Unit' (IU). Each protocol carried\n   by FC has a defined size\
    \ for the IU. Every operation must have at\n   least one IU.  Lower FC levels\
    \ map this to a FC Sequence.\n   Typically, a Sequence consists of more than one\
    \ frame. Larger user\n   data is segmented and reassembled using two methods:\
    \ Sequence Count\n   and Relative Offset [18]. With the use of Sequence Count,\
    \ data blocks\n   are sent using frames with increasing sequence counts (modulo\
    \ 65536)\n   and it is quite straightforward to detect the first frame that\n\
    \   contains the Network_Header.  When Relative Offset is used, as frames\n  \
    \ arrive, some computation is required to detect the first frame that\n   contains\
    \ the Network_Header. Sequence Count and Relative Offset field\n   control information,\
    \ is carried in the FC Header.\n   The FC-4 Level makes a request to FC-3 Level\
    \ when it wishes it to be\n   delivered.  Currently, there are no FC-3 level defined\
    \ functions, and\n   this level simply converts the Information Unit delivery\
    \ request into\n   a 'Sequence' delivery request and passes it on to the FC-2\
    \ Level.\n   Therefore, each FC-4 Information Unit corresponds to a FC-2 Level\n\
    \   Sequence.\n   The maximum data carried by a FC frame cannot exceed 2112-bytes\
    \ [2].\n   Whenever, the Information Unit exceeds this value, the FC-2 breaks\
    \ it\n   into multiple frames and sends it in a sequence.\n   There can be multiple\
    \ Sequences within an Exchange. Sequences within\n   an Exchange are processed\
    \ sequentially. Only one Sequence is active\n   at a time. Within an Exchange\
    \ information may flow in one direction\n   only or both. If bi-directional then\
    \ one of the ports has the\n   initiative to send the next Sequence for that Exchange.\
    \ Sequence\n   Initiative can be passed between the ports on the last frame of\n\
    \   Sequence when control is transferred. This amounts to half-duplex\n   behavior.\n\
    \   Ports may have more than one Exchange open at a time. Ports can\n   multiplex\
    \ between Exchanges. Exchanges are uniquely identified by\n   Exchange IDs (X_ID).\
    \ An Originator OX_ID and a Responder RX_ID\n   uniquely identify an Exchange.\n"
- title: E.3 Fibre Channel Header Fields
  contents:
  - "E.3 Fibre Channel Header Fields\n   The FC header as shown in the diagrams below\
    \ contains routing and\n   other control information to manage Frames, Sequences,\
    \ and Exchanges.\n   The Frame-header is sent as 6 transmission words immediately\n\
    \   following an SOF delimiter and before the Data Field.\n   D_ID and S_ID:\n\
    \      FC uses destination address routing [12], [13]. Frame routing in a\n  \
    \    point-to-point topology is trivial.\n      For the Arbitrated Loop topology,\
    \ with the destination NL_Port on\n      the same AL, the source port must pick\
    \ the destination port,\n      determine its AL Physical Address, and \"Open\"\
    \ the destination\n      port. The frames must pass through other NL_Ports or\
    \ the FL_Port\n      on the loop between the source and destination, but these\
    \ ports do\n      not capture the frames. They simply repeat and transmit the\
    \ frame.\n      Either communicating port may \"Close\" the circuit.\n      When\
    \ the destination port is not on the same AL, the source\n      NL_Port must open\
    \ the FL_Port attached to a Fabric. Once in the\n      Fabric, the Fabric routes\
    \ the frames again to the destination.\n      In a Fabric topology, the Fabric\
    \ looks into the Frame-header,\n      extracts the destination address (D_ID),\
    \ searches its own routing\n      tables, and sends the frame to the destination\
    \ port along the path\n      chosen. The process of choosing a path may be performed\
    \ at each\n      fabric element or switch until the F_Port attached to the\n \
    \     destination N_Port is reached.\n"
- title: Fibre Channel Frame Header, Network_Header, and Payload carrying IP
  contents:
  - 'Fibre Channel Frame Header, Network_Header, and Payload carrying IP

    '
- title: Packet
  contents:
  - "Packet\n +---+----------------+----------------+----------------+--------------+\n\
    \ |Wrd|    <31:24>     |    <23:16>     |    <15:08>     |    <07:00>   |\n +---+----------------+----------------+----------------+--------------+\n\
    \ |0  |    R_CTL       |                     D_ID                       |\n +---+----------------+----------------+----------------+--------------+\n\
    \ |1  |    CS_CTL      |                     S_ID                       |\n +---+----------------+----------------+----------------+--------------+\n\
    \ |2  |    TYPE        |                     F_CTL                      |\n +---+----------------+----------------+----------------+--------------+\n\
    \ |3  |   SEQ_ID       |  DF_CTL        |          SEQ_CNT              |\n +---+----------------+----------------+----------------+--------------+\n\
    \ |4  |             OX_ID               |              RX_ID            |\n +---+--------+-------+----------------+----------------+--------------+\n\
    \ |5  |        Parameter (Control or Relative Offset for Data )         |\n +---+-----------------------------------------------------------------+\n\
    \ |6  |  NAA   |        Network_Dest_Address (Hi order bits)            |\n +---+--------+-------+----------------+----------------+--------------+\n\
    \ |7 |                  Network_Dest_Address (Lo order bits)            |\n +---+--------+-------+----------------+----------------+--------------+\n\
    \ |8  |  NAA   |        Network_Src_Address (Hi order bits)             |\n +---+--------+-------+----------------+----------------+--------------+\n\
    \ |9  |                 Network_Src_Address (Lo order bits)             |\n +---+----------------+----------------+----------------+--------------+\n\
    \ |10 |     DSAP       |     SSAP       |      CTRL      |     OUI      |\n +---+----------------+----------------+----------------+--------------+\n\
    \ |11 |               OUI               |               PID             |\n +---+----------------+----------------+----------------+--------------+\n\
    \ |12 |                   IP Packet Data ...                            |\n +---+----------------+----------------+----------------+--------------+\n\
    \   R_CTL (Routing Control) and TYPE(data structure):\n      Frames for each FC-4\
    \ can be easily distinguished from the others\n      at the receiving port using\
    \ the R_CTL (Routing Control) and TYPE\n      (data structure) fields in the Frame-header.\n\
    \      The R_CTL has two sub-fields: Routing bits and Information\n      category.\
    \ The Routing bits sub-field has specific values that mean\n      FC-4 data follows\
    \ and the Information Category tells the receiver\n      the \"Type\" of data\
    \ contained in the frame. The R_CTL and TYPE code\n      points are shown in the\
    \ diagrams.\n   Other Header fields:\n      F_CTL (Frame Control) and SEQ_ID (Sequence\
    \ Identification),\n      SEQ_CNT (Sequence Count), OX_ID (Originator exchange\
    \ Identifier),\n      RX_ID (Responder exchange Identifier), and Parameter fields\
    \ are\n      used to manage the contents of a frame, and mark information\n  \
    \    exchange boundaries for the destination port.\n   F_CTL(Frame Control):\n\
    \      The FC_CTL field is a 3-byte field that contains information\n      relating\
    \ to the frame content. Most of the other Frame-header\n      fields are used\
    \ for frame identification. Among other things, bits\n      in this field indicate\
    \ the First Sequence, Last Sequence, or End\n      Sequence. Sequence Initiative\
    \ bit is used to pass control of the\n      next Sequence in the Exchange to the\
    \ recipient.\n   SEQ_ID (Sequence Identifier) and SEQ_CNT (Sequence Count):\n\
    \      This is used to uniquely identify sequences within an Exchange.\n     \
    \ The <S_ID, D_ID, SEQ_ID> uniquely identifies any active Sequence.\n      SEQ_CNT\
    \ is used to uniquely identify frames within a Sequence to\n      assure sequentiality\
    \ of frame reception, and to allow unique\n      correlation of link control frames\
    \ with their related data frames.\n   Originator Exchange Identifier (OX_ID) and\
    \ Responder Exchange\n   Identifier (RX_ID):\n      The OX_ID value provides association\
    \ of frames with specific\n      Exchanges originating at a particular N_Port.\
    \ The RX_ID field\n      provides the same function that the OX_ID provides for\
    \ the\n      Exchange Originator. The OX_ID is meaningful on the Exchange\n  \
    \    Originator, and the RX_ID is meaningful on the Responder.\n   DF_CTL (Data\
    \ Field Control):\n      The DF_CTL field specifies the presence or absence of\
    \ optional\n      headers between the Frame-header and Frame Payload\n   PARAMETER:\n\
    \      The Parameter field has two meanings, depending on Frame type.\n      For\
    \ Link Control Frames, the Parameter field indicates the\n      specific type\
    \ of Link Control frame. For Data frames, this field\n      contains the Relative\
    \ Offset value. This specifies an offset from\n      an Upper Layer Protocol buffer\
    \ from a base address.\n"
- title: E.4 Code Points for FC Frame
  contents:
  - 'E.4 Code Points for FC Frame

    '
- title: E.4.1 Code Points with IP and ARP Packets
  contents:
  - "E.4.1 Code Points with IP and ARP Packets\n   The Code Points for FC Frames with\
    \ IP and ARP Packets are very\n   similar with the exception of PID value in Word\
    \ 11 which is set to\n   0x08-00 for IP and 0x08-06 for ARP. Also, the Network_Header\
    \ appears\n   only in the first logical frame of a FC Sequence carrying IP. In\
    \ the\n   case, where FC frames carry ARP packets it is always present because\n\
    \   these are single frame Sequences.\n               Code Points for FC Frame\
    \ with IP packet Data\n +---+----------------+----------------+----------------+------------+\n\
    \ |Wrd|    <31:24>     |    <23:16>     |    <15:08>     |    <07:00> |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 0 |    0x04        |                     D_ID                     |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 1 |    0x00        |                     S_ID                     |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 2 |    0x05        |                     F_CTL                    |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 3 |   SEQ_ID       |     0x20       |          SEQ_CNT            |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 4 |             OX_ID               |              RX_ID          |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 5 |           0xXX-XX-XX-XX Parameter Relative Offset             |\n +---+------+--------------------------------------------------------+\n\
    \ | 6 | 0001 |        0x000             | Dest. MAC (Hi order bits)   |\n +---+------+---------+----------------+----------------+------------+\n\
    \ | 7 |                      Dest. MAC (Lo order bits)                |\n +---+------+----------+----------------+----------------------------+\n\
    \ | 8 | 0001 |        0x000             | Src. MAC  (Hi order bits)   |\n +---+------+---------+----------------+----------------+------------+\n\
    \ | 9 |                 Src. MAC (Lo order bits)                      |\n +---+----------------+----------------+----------------+------------+\n\
    \ |10 |     0xAA       |     0xAA       |      0x03      |     0x00   |\n +---+----------------+----------------+----------------+------------+\n\
    \ |11 |           0x00-00               |             0x08-00         |\n +---+----------------+----------------+----------------+------------+\n\
    \ |12 |                   IP Packet Data                              |\n +---+----------------+----------------+----------------+------------+\n\
    \ |13 |                        ...                                    |\n +---+----------------+----------------+----------------+------------+\n\
    \              Code Points for FC Frame with ARP packet Data\n +---+----------------+----------------+----------------+------------+\n\
    \ |Wrd|    <31:24>     |    <23:16>     |    <15:08>     |    <07:00> |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 0 |    0x04        |                     D_ID                     |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 1 |    0x00        |                     S_ID                     |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 2 |    0x05        |                     F_CTL                    |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 3 |   SEQ_ID       |     0x20       |          SEQ_CNT            |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 4 |             OX_ID               |              RX_ID          |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 5 |           0xXX-XX-XX-XX Parameter Relative Offset             |\n +---+------+--------------------------------------------------------+\n\
    \ | 6 | 0001 |        0x000             | Dest. MAC (Hi order bits)   |\n +---+------+---------+----------------+----------------+------------+\n\
    \ | 7 |                      Dest. MAC (Lo order bits)                |\n +---+------+----------+----------------+----------------------------+\n\
    \ | 8 | 0001 |        0x000             | Src. MAC  (Hi order bits)   |\n +---+------+---------+----------------+----------------+------------+\n\
    \ | 9 |                 Src. MAC (Lo order bits)                      |\n +---+----------------+----------------+----------------+------------+\n\
    \ |10 |     0xAA       |     0xAA       |      0x03      |     0x00   |\n +---+----------------+----------------+----------------+------------+\n\
    \ |11 |           0x00-00               |             0x08-06         |\n +---+----------------+----------------+----------------+------------+\n\
    \ |12 |                   ARP Packet Data                             |\n +---+----------------+----------------+----------------+------------+\n\
    \ |13|                        ...                                     |\n +---+----------------+----------------+----------------+------------+\n\
    \   The Code Points for a FARP-REQ for a specific Match Address Code\n   Point\
    \ MATCH_WW_PN_NN ( b'011') is shown below. In particular, note\n   the IP addresses\
    \ field of the Requester set to a valid address and\n   that of the responder\
    \ set to '0'. Note also the setting of the D_ID\n   address and the Port_ID of\
    \ the Responder.\n   The corresponding code point for a FARP-REPLY is also shown\
    \ below.\n   In particular, note the setting of the Port_ID of Responder and the\n\
    \   IP address setting of the Responder.\n"
- title: E.4.2 Code Points with FARP Command
  contents:
  - "E.4.2 Code Points with FARP Command\n     Code Points for FC Frame with FARP-REQ\
    \ Command for MATCH_WW_PN_NN\n +---+----------------+----------------+----------------+------------+\n\
    \ |Wrd|    <31:24>     |    <23:16>     |    <15:08>     |    <07:00> |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 0 |    0x04        |                     D_ID =                   |\n |  \
    \ |                |    0xFF             0xFF              0xFF   |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 1 |    0x00        |                     S_ID                     |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 2 |    0x05        |                     F_CTL                    |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 3 |   SEQ_ID       |     0x20       |          SEQ_CNT            |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 4 |             OX_ID               |              RX_ID          |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 5 |           0xXX-XX-XX-XX Parameter Relative Offset             |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 6 |     0x54       |     0x00       |     0x00       |    0x00    |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 7 |           Port_ID  of Requester = S_ID           |Match Addr. |\n |  \
    \ |                                                  |Code Points |\n |   |  \
    \                                                | xxxxx011   |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 8 |           Port_ID  of Responder   =              |Responder   |\n |  \
    \ |     0x00              0x00            0x00       |Flags       |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 9 | 0001 |        0x000             |WW_PN Src. MAC(Hi order bits)|\n +---+------+---------+----------------+----------------+------------+\n\
    \ |10 |         WW_PN Src. MAC (Lo order bits)                        |\n +---+------+----------+---------------+-----------------------------+\n\
    \ |11 | 0001 |        0x000             |WW_NN Src. MAC(Hi order bits)|\n +---+------+---------+----------------+----------------+------------+\n\
    \ |12 |         WW_NN Src. MAC (Lo order bits)                        |\n +---+----------------+----------------+----------------+------------+\n\
    \ |13 | 0001 |        0x000             |WW_PN Src. MAC(Hi order bits)|\n +---+------+---------+----------------+----------------+------------+\n\
    \ |14 |         WW_PN Dest. MAC (Lo order bits)                       |\n +---+------+----------+---------------+-----------------------------+\n\
    \ |15 | 0001 |        0x000             |WW_NN Dest.MAC(Hi order bits)|\n +---+------+---------+----------------+----------------+------------+\n\
    \ |16 |         WW_NN Dest. MAC (Lo order bits)                       |\n +---+----------------+----------------+----------------+------------+\n\
    \ |17 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |18 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |19 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |20 |     set to a valid IPv4 Address by Requester if Available     |\n +--------------------+----------------+---------+-------------------+\n\
    \ |21 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |22 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |23 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |   |                           0x00-00-00-00                       |\n |24\
    \ |       set to a valid IPv4 Address of Responder if available   |\n +--------------------+----------------+---------+-------------------+\n\
    \            Code Points for FC Frame with FARP-REPLY Command\n +---+----------------+----------------+----------------+------------+\n\
    \ |Wrd|    <31:24>     |    <23:16>     |    <15:08>     |    <07:00> |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 0 |    0x04        |                     D_ID                     |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 1 |    0x00        |                     S_ID                     |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 2 |    0x05        |                     F_CTL                    |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 3 |   SEQ_ID       |     0x20       |          SEQ_CNT            |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 4 |             OX_ID               |              RX_ID          |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 5 |           0xXX-XX-XX-XX Parameter Relative Offset             |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 6 |     0x55       |     0x00       |     0x00       |    0x00    |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 7 |           Port_ID  of Requester = D_ID           | xxxxx011   |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 8 |           Port_ID  of Responder = S_ID           |Resp. Flag  |\n +---+----------------+----------------+----------------+------------+\n\
    \ | 9 | 0001 |        0x000             |WW_PN Src. MAC(Hi order bits)|\n +---+------+---------+----------------+----------------+------------+\n\
    \ |10 |         WW_PN Src. MAC (Lo order bits)                        |\n +---+------+----------+---------------+-----------------------------+\n\
    \ |11 | 0001 |        0x000             |WW_NN Src. MAC(Hi order bits)|\n +---+------+---------+----------------+----------------+------------+\n\
    \ |12 |         WW_NN Src. MAC (Lo order bits)                        |\n +---+----------------+----------------+----------------+------------+\n\
    \ |13 | 0001 |        0x000             |WW_PN Src. MAC(Hi order bits)|\n +---+------+---------+----------------+----------------+------------+\n\
    \ |14 |         WW_PN Dest. MAC (Lo order bits)                       |\n +---+------+----------+---------------+-----------------------------+\n\
    \ |15 | 0001 |        0x000             |WW_NN Dest.MAC(Hi order bits)|\n +---+------+---------+----------------+----------------+------------+\n\
    \ |16 |         WW_NN Dest. MAC (Lo order bits)                       |\n +---+----------------+----------------+----------------+------------+\n\
    \ |17 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |18 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |19 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |20 |       set to a valid IPv4 Address by Requester                |\n +--------------------+----------------+---------+-------------------+\n\
    \ |21 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |22 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |23 |                           0x00-00-00-00                       |\n +--------------------+----------------+---------+-------------------+\n\
    \ |24 |        set to a valid IPv4 Address by Responder               |\n +--------------------+----------------+---------+-------------------+\n"
- title: 'APPENDIX F: Fibre Channel Protocol Considerations'
  contents:
  - 'APPENDIX F: Fibre Channel Protocol Considerations

    '
- title: F.1 Reliability In Class 3
  contents:
  - "F.1 Reliability In Class 3\n   Problem: Sequence ID reuse in Class 3 can conceivably\
    \ result in\n   missing frame aliasing, which could result in delivery of corrupted\n\
    \   (incorrectly-assembled) data, with no corresponding detection at the\n   FC\
    \ level.\n   Prevention: This specification requires one of the following methods\n\
    \   if Class 3 is used.\n        - Continuously increasing Sequence Count (new\
    \ Login Bit) - both\n          sides must set When an N_Port sets the PLOGI login\
    \ bit for\n          continuously increasing SEQ_CNT, it is guaranteeing that\
    \ it\n          will transmit all frames within an Exchange using a\n        \
    \  continuously increasing SEQ_CNT (see description in Section\n          B.1\
    \ below).\n        - After using all SEQ_IDs (0-255) once, must start a new\n\
    \          Exchange. It is recommended that a minimum of 4 Exchanges be\n    \
    \      used before an OX_ID can be reused.\n        - Note: If an implementation\
    \ is not checking the OX_ID when\n          reassembling Sequences, the problem\
    \ can still occur. Cycling\n          through some number of SEQ_IDs, then jumping\
    \ to a new Exchange\n          does not solve the problem. SEQ_IDs must still\
    \ be unique\n          between two N_Ports, even across Exchanges.\n        -\
    \ Use only single-frame Sequences.\n"
- title: F.2 Continuously Increasing SEQ_CNT
  contents:
  - "F.2 Continuously Increasing SEQ_CNT\n   This method allows the recipient to check\
    \ incoming frames, knowing\n   exactly what SEQ_CNT value to expect next. Since\
    \ the SEQ_CNT will not\n   repeat for 65,536 frames, the aliasing problem is significantly\n\
    \   reduced.\n   A Login bit (PLOGI) is used to indicate that a device always\
    \ uses a\n   continuously increasing SEQ_CNT, even across transfers of Sequence\n\
    \   Initiative. This bit is necessary for interoperability with some\n   devices,\
    \ and it provides other benefits as well.\n   In the FC-PH-3 [11], the following\
    \ is supported:\n         Word 1, bit 17 - SEQ_CNT (S)\n         0 = Normal FC-PH\
    \ rules apply\n         1 = Continuously increasing SEQ_CNT\n   Any N_Port that\
    \ sets Word 1, Bit 17 = 1, is guaranteeing that it will\n   transmit all frames\
    \ within an Exchange using a continuously\n   increasing SEQ_CNT. Each Exchange\
    \ SHALL start with SEQ_CNT = 0 in the\n   first frame, and every frame transmitted\
    \ after that SHALL increment\n   the previous SEQ_CNT by one, even across transfers\
    \ of Sequence\n   Initiative. Any frames received from the other N_Port in the\
    \ Exchange\n   shall have no effect on the transmitted SEQ_CNT.\n"
- title: 'Appendix G: Acronyms and Glossary of FC Terms'
  contents:
  - "Appendix G: Acronyms and Glossary of FC Terms\n   It is assumed that the reader\
    \ is familiar with the terms and acronyms\n   used in the FC protocol specification\
    \ [2]. The following is provided\n   for easy reference.\n   First Frame: The\
    \ frame that contains the SOFi field. This means a\n   logical first and may not\
    \ necessarily be the first frame temporally\n   received in a sequence.\n   Code\
    \ Point: The coded bit pattern associated with control fields in\n   frames or\
    \ packets.\n   PDU: Protocol Data Unit\n   ABTS_LS: Abort Sequence Protocol -\
    \ Last Sequence. A protocol for\n   aborting an exchange based on the ABTS recipient\
    \ setting the\n   Last_Sequence bit in the BA_ACC ELS to the ABTS\n   ADISC: Discover\
    \ Address. An ELS for discovering the Hard Addresses\n   (the 24 bit NL_Port Identifier)\
    \ of N_Ports\n   D_ID: Destination ID\n   ES: End sequence. This FCTL bit in the\
    \ FC header indicates this frame\n   is the last frame of the sequence.\n   FAN:\
    \ Fabric Address Notification. An ELS sent by the fabric to all\n   known previously\
    \ Logged in ports following an initialization event.\n   FLOGI: Fabric Login.\n\
    \   LIP: Loop Initialization. A primitive Sequence used by a port to\n   detect\
    \ if it is part of a loop or to recover from certain loop\n   errors.\n   Link:\
    \ Two unidirectional paths flowing in opposite directions and\n   connecting two\
    \ Ports within adjacent Nodes.\n   LOGO: Logout.\n   LR: Link reset. A primitive\
    \ sequence transmitted by a port to\n   initiate the link reset protocol or to\
    \ recover from a link timeout.\n   LS: Last Sequence of Exchange. This FCTL bit\
    \ in the FC header\n   indicates the Sequence is the Last Sequence of the Exchange.\n\
    \   Network Address Authority: A 4-bit field specified in Network_Headers\n  \
    \ that distinguishes between various name registration authorities that\n   may\
    \ be used to identify the WW_PN and the WW_NN. NAA=b'0001'\n   indicates IEEE-48-bit\
    \ MAC addresses\n   Node: A collection of one or more Ports identified by a unique\
    \ World\n   Wide Node Name (WW_NN).\n   NOS: Not Operational. A primitive Sequence\
    \ transmitted to indicate\n   that the port transmitting this Sequence has detected\
    \ a link failure\n   or is offline, waiting for OLS to be received.\n   OLS: Off\
    \ line. A primitive Sequence transmitted to indicate that the\n   port transmitting\
    \ this Sequence is either initiating the link\n   initialization protocol, receiving\
    \ and recognizing NOS, or entering\n   the offline state.\n   PDISC: Discover\
    \ Port. An ELS for exchanging Service Parameters\n   without affecting Login state.\n\
    \   Primitive Sequence: A primitive Sequence is an Ordered Set that is\n   transmitted\
    \ repeatedly and continuously.\n   Private Loop Device: A device that does not\
    \ attempt Fabric Login\n   (FLOGI) and usually adheres to PLDA.  The Area and\
    \ Domain components\n   of the NL_Port ID must be 0x0000. These devices cannot\
    \ communicate\n   with any port not in the local loop.\n   Public Loop Device:\
    \ A device whose Area and Domain components of the\n   NL_Port ID cannot be 0x0000.\
    \ Additionally, to be FLA compliant, the\n   device must attempt to open AL_PA\
    \ 0x00 and attempt FLOGI. These\n   devices communicate with devices on the local\
    \ loop as well as devices\n   on the other side of a Fabric.\n   Port: The transmitter,\
    \ receiver and associated logic at either end of\n   a link within a Node. There\
    \ may be multiple Ports per Node. Each Port\n   is identified by a unique Port_ID,\
    \ which is volatile, and a unique\n   World Wide Port Name (WW_PN), which is unchangeable.\
    \ In this\n   document, the term \"port\" may be used interchangeably with NL_Port\
    \ or\n   N_Port.\n   Port_ID: Fibre Channel ports are addressed by unique 24-bit\
    \ Port_IDs.\n   In a Fibre Channel frame header, the Port_ID is referred to as\
    \ S_ID\n   (Source ID) to identify the port originating a frame, and D_ID to\n\
    \   identify the destination port. The Port_ID of a given port is\n   volatile\
    \ (changeable).\n   PLOGI: Port Login.\n   SI: Sequence Initiative\n   World Wide\
    \ Port_Name (WW_PN): Fibre Channel requires each Port to\n   have an unchangeable\
    \ WW_PN. Fibre Channel specifies a Network Address\n   Authority (NAA) to distinguish\
    \ between the various name registration\n   authorities that may be used to identify\
    \ the WW_PN. A 4-bit NAA\n   identifier, 12-bit field set to 0x0 and an IEEE 48-bit\
    \ MAC address\n   together make this a 64-bit field.\n   World Wide Node_Name\
    \ (WW_NN): Fibre Channel identifies each Node with\n   a unchangeable WW_NN. In\
    \ a single port Node, the WW_NN and the WW_PN\n   may be identical.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
