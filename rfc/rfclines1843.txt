Abstract The content of this memo is identical to an article of the same title written by the author on September 4, 1989.
In this memo, GB stands for GB2312 80.
Note that the title is kept only for historical reasons.
HZ has been widely used for purposes other than "file exchange".
Introduction Most existing computer systems which can handle a text file of arbitrarily mixed Chinese and ASCII characters use 8 bit codes.
To exchange such text files through electronic mail on ASCII computer systems, it is necessary to encode them in a 7 bit format.
A generic binary to ASCII encoder is not sufficient, because there is currently no universal standard for such 8 bit codes.
For example, CCDOS and Macintosh's Chinese OS use different internal codes.
Fortunately, there is a PRC national standard, GuoBiao (GB), for the encoding of Chinese characters, and Chinese characters encoded in the above systems
can be easily converted to GB by a simple formula.
(  The ROC standard BIG 5 is outside the scope of this article.)
HZ is a 7 bit data format proposed for arbitrarily mixed GB and ASCII text file exchange.
HZ is also intended for the design of terminal emulators that display and edit mixed Chinese and ASCII text files in real time.
The format of HZ is described in the following.
Without loss of generality, we assume that all Chinese characters (HanZi) have already been encoded in GB.
A GB (GB1 and GB2) code is a two byte code, where the first byte is in the range $21 $77 (hexadecimal), and the second byte is in the range $21 $7E.
A graphical ASCII character is a byte in the range $21 $7E.
A non  graphical ASCII character is a byte in the range $0 $20 or of the value $7F. Since the range of a graphical ASCII character overlaps that of a GB byte, a byte in the range $21
$7E is interpreted according to the mode it is in.
There are two modes, namely ASCII mode and GB mode.
By convention, a non graphical ASCII character should only appear in ASCII mode.
The default mode is ASCII mode.
The escape sequence '~\n' is a line continuation marker to be consumed with no output produced.
This code switches the mode from GB back to ASCII.
The decoding process is clear from the above description.
The encoding process is straightforward.
The computer systems we use is ASCII based.
In general, the English (ASCII) portion of a HZ file is directly readable.
Hence, they can be used for future extension of HZ with total upward compatibility.
The line continuation marker '~\n' is useful if one wants to encode long lines in the original text into short lines in this data format without introducing extra newline characters in the decoding process.
There is no limit on the length of a line.
In fact, the whole file could be one long line or even contain no newline characters.
Any DECODER of this HZ data format should not and has no need to operate on the concept of a line.
It is easy to write encoders and decoders for HZ.
An encoder or decoder needs to lookahead at most one character in the input data stream.
Given the current mode, it is also possible and easy to decode a HZ data stream by scanning backward.
One of the implication is that "backspaces" can be handled correctly by a terminal emulator.
To facilitate the effective use of programs supporting line/page skips such as "more" on UNIX with a terminal emulator understanding the HZ format, it is RECOMMENDED that the ENCODER (which outputs in HZ) sets a maximum line size of less than 80 characters.
Since '\n' is an ASCII character,
The price to paid is that the encoded file size is slightly larger.
It is important to understand the following distinction.
Note that the above recommendation does NOT change the HZ format.
It is simply an encoding "style" which follows the syntax of HZ.
Note that this "style" is not built into HZ.
It is an additional convention built "on top of" HZ.
Other applications may require different "styles", but the same basic HZ DECODER will always work.
The essence of HZ is to provide such a flexible basic data format for files of arbitrarily mixed Chinese and ASCII characters.
Examples To illustrate the "stylistic" issue of HZ encoding, we give the following four examples of encoded text, which should produce the same decoded output.
(The recommendation in the last section refers to Example 2.)
(Suppose there is no line size limit.)
This sentence is in ASCII.
(Suppose the maximum line size is 42.)
This sentence is in ASCII.
(Suppose a new line is started whenever there is a mode switch.)
This sentence is in ASCII.
Security Considerations Security issues are not addressed in this memo.
