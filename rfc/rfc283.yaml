- title: __initial_text__
  contents:
  - "             NETRJT -- Remote Job Service Protocol for TIPS\nA.  INTRODUCTION\n\
    \    ------------\n TIP's have very limited processing capability; their function\
    \ is\nmainly limited to interfacing printer-keyboard devices to the Network\n\
    using TELNET protocol. It will also be possible to have a tape drive\non a TIP,\
    \ using a subset of the count form of DTP (see RFC #264).\nHowever, TIP's cannot\
    \ and will not support either DTP or FTP (see RFC\n#265) in general. Therefore,\
    \ TIP users are excluded from using any\nexisting remote job entry protocol (e.g.\
    \ CCN's NETRJS - see RFC #189).\n It appears, however, that it may be feasible\
    \ in the future to use\nTIP's for remote job entry in one or more of the following\
    \ three ways:\n (a)  Attach local card readers, line printers, and card punches\n\
    \      directly to TIP ports. These devices would use a TELNET-like*\n      format\
    \ and frame their characters with Start/Stop bits.  BBN\n      can now supply\
    \ a suitable 200 LPM printer, and is searching for\n      suitable readers and\
    \ punches.\n (b)  Connect a remote batch terminal to a full-duplex TIP port via\n\
    \      a communication line. BBN is looking into this.\n (c)  Use the tape drive,\
    \ and do card-to-tape and/or tape-to-print\n      on another computer.\n BBN hopes\
    \ to make case (b) look exactly like (a) to the server host.\nThat is, the remote\
    \ batch terminal will send to and receive from the\nserver in a TELNET-like format*;\
    \ the printer, card reader, punch, and\noperator console connections will all\
    \ use different sockets but one\nhardware port at the TIP, which will map multiple\
    \ sockets into the one\nport.\nNOTE:  By \"TELNET-like format\", we mean: (a)\
    \ _CR_LF_ used to delimit\n       logical records (lines or cards), and (b) the\
    \ ASCII or EBCDIC\n       format effector control characters used for carriage\
    \ control\n       in the printer stream. It does _not_ necessarily imply ASCII\n\
    \       character codes.\n       [ direction of Alex McKenzie.               \
    \    12/96   ]\n This document describes NETRJT, a modification of CCN's NETRJS\n\
    protocol specifically to provide remote job entry service to TIP's\nusing one\
    \ of the methods (a), (b), or (c). NETRJT follows the general\nmodel of NETRJS:\
    \ use TELNET protocol over a primary or \"operator\"\nconnection pair, and open\
    \ simplex secondary connections for data\ntransfer of job stream input and output.\
    \ (We also considered the\npossibility of using the Divert Output mechanism of\
    \ the TIP for\nsending remote job output over the operator connection, and an\n\
    analogous mechanism for input.  However, in discussion with Alex\nMcKenzie, it\
    \ was agreed that sharing the operator connections has\nlittle merit and causes\
    \ lots of problems).\n  NETRJT differs in two principal ways from NETRJS:\n  \
    \ 1.  The NETRJT server process initiates the data transfer\n       connections,\
    \ under control of commands from the remote\n       operator console. On the other\
    \ hand, under NETRJS the\n       remote user process has responsibility for initiating\n\
    \       the opening of secondary data transfer connections; the\n       NETRJS\
    \ server simply listens on these sockets.\n   2.  NETRJT provides the TELNET-like\
    \ format defined above for\n       data transfer, as well as the TIP-tape DTP\
    \ format. NETRJS,\n       on the other hand, is restricted to counts to delimit\
    \ logical\n       records within DTP-like transactions, and ASA carriage control.\n\
    \ There are some other minor differences. For example, (1) the NETRJT\nserver\
    \ takes responsibility for folding output records when they\nexceed a size specified\
    \ by a user command; under NETRJS, this was the\nuser process' responsibility.\
    \ (2) There are NETRJT operator commands\nto set the record format, record size,\
    \ and code for each data transfer\nconnection. NETRJS made the first two fixed\
    \ properties of a particular\nterminal id, and deter- mined the last by the choice\
    \ of ICP socket.\nThese differences imply remote operator commands in NETRJT in\
    \ addition\nto those of NETRJS. The operator must be able to (1) cause NETRJT\
    \ to\nopen a secondary connection to a TIP socket, and (2) specify the data\n\
    transfer protocol, maximum logical record length, and/or transmission\ncode. These\
    \ NETRJT commands are discussed in the following section.\n CCN plans to proceed\
    \ with implementation of a NETRJT server with the\ngoal of completing an initial\
    \ version by March 15, 1972. This initial\nversion may support only DTP=BS or\
    \ TT, and RECFM=TELNET or RECORDS;\nother options will be added as the need arises.\
    \ We welcome comments\nand suggestions.\nremote job entry via TIP's. In its present\
    \ form, NETRJT owes much to\nthe ideas and comments of Alex McKenzie (BBN), Jon\
    \ Postel (NMC), Jim\nWhite (UCSB), and Steve Wolfe (CCN).\nB.  NETRJT COMMANDS\n\
    \    ---------------\n NETRJT provides the following commands over the remote\
    \ operator\nconnection, in addition to the NETRJS operator commands (see Appendix\n\
    D of RFC #189). The symbol \"#\" denotes one or more spaces.  We will\nuse the\
    \ IBM meta-language to describe the command syntax. The literal\ntext shown here\
    \ in upper case may, in fact, be entered in either upper\nor lower case.\n   1.\
    \ Opening a Stream\n      ----------------\n               /            \\   \
    \        \n               | PR [INTER] |  _         _\n               |      \
    \      | |           |\n    O [PEN] # <  PU [NCH]    >| (jobname) | [ =socket-number[\
    \ /host-name ]]\n               |            | |           |\n               |\
    \ R  [EADER] | |   (*)     |\n               \\            / |_         _|\n If\
    \ the specified device does not already have an open connection, the\nNETRJT server\
    \ will request connection to the specified socket. The\noptional \"(jobname)\"\
    \ para- meter is used to specify a particular job\nby name; for more information\
    \ on the semantics of this parameter, see\nthe discussion of input and output\
    \ operations below. The \"/host-name\"\nparameter, to be implemented later, is\
    \ intended to allow the file to\nbe at a host different from both user and server\
    \ hosts. We include it\nhere only to suggest a syntax.\n The socket number may\
    \ have a one-letter suffix D, H, or O to mean\ndecimal, hex, or octal. Octal is\
    \ the default, so the O suffix may be\nomitted.  If BBN establishes standardized\
    \ TIP sockets for specific\nunit record devices, the socket number parameter could\
    \ be omitted when\nthe standard socket number is intended.\n                _\
    \            _\n               | # PR [INTER] |\n               |            \
    \  |\n      CL [OSE] | # PU [NCH]   | [,A [CCEPT]]\n               |         \
    \     |\n               | # R  [EADER] |\n               |_            _|\n This\
    \ command closes the specified data transfer connection.  The\nACCEPT option is\
    \ used to signal the server that it may discard output\nit has transmitted, or\
    \ that it has received a complete stack of job\ninput. See discussion in next\
    \ section.  The device specification (PR,\nPU, or R) may be omitted if only one\
    \ device stream is currently open.\n   3. Setting Format and Device Characteristics\n\
    \      -----------------------------------------\n In each of the following variants\
    \ of the RJT commands, the parameter\n\"device\" is one of \"PR [INTER]\", \"\
    PU [NCH]\", or \"R [EADER]\".\n                               /        \\\n  \
    \    RJT # D [TP] (device) = <  B [S]   >\n                               | T\
    \ [T]  |\n                               | D [TP] |\n                        \
    \       \\        /\n   BS:  an unstructured byte stream.\n   TT:  the TIP-tape\
    \ transfer protocol (essentially\n        the count form of Network DTP).\n  DTP:\
    \  the Network standard DTP, complete with a modes-\n        available handshake.\
    \ This form is not useful\n        for TIP's but is included here in anticipation\n\
    \        of the general Network standard RJE protocol.\n                     \
    \            /               \\\n      RJT # R [ECFM] (device) = <  T [ELNET]\
    \      >\n                                 | A [SA]        |\n               \
    \                  | R [ECORDS]    |\n                                 | C [OMPRESSED]\
    \ |\n                                 \\               /\nremote batch terminals\
    \ connected to TIP's.\n      TELNET:   the \"TELNET-like format\": _CR_LF_ used\
    \ to delimit\n                logical records in all streams, and format effector\n\
    \                control characters (_CR_, _LF_, _FF_) for printer\n         \
    \       carriage control.\n         ASA:   CRLF used to delimit logical records,\
    \ but an ASA\n                carriage control character is sent as the first\n\
    \                character of each printer record. (This option\n            \
    \    may be useful for remote batch terminals which\n                expect ASA\
    \ carriage control).\n     RECORDS:   the \"truncated\" format of NETRJS: an id\
    \ byte, a\n                count byte, and then the string, with ASA carriage\n\
    \                control in each printer record.\n  COMPRESSED:   the \"compressed\"\
    \ format of NETRJS (see RFC #189 for\n                details). (Compression will\
    \ be useful for batch\n                terminals connected remotely to Tip's)\
    \ .\n      RJT # SIZE (device) = integer\n This command sets the maximum logical\
    \ record length for the specified\ndevice. NETRJT will automatically fold any\
    \ records exceeding this\nsize. Default sizes are:\n              PR:    120\n\
    \              PU:     80\n              R :     80\n                        \
    \     /           \\\n      RJT # CODE (device) = <  A [SCII]   >\n          \
    \                   | E [BCDIC] |\n                             \\           /\n\
    This command sets the code to be used.\n  1.   Getting Started\n       ---------------\n\
    \       a.  Perform ICP to server TELNET (socket 1).\n       b.  Execute command\
    \ \"RJT\", yielding ready message from NETRJT.\n       c.  Issue RJS SIGNON command.\n\
    \       d.  These steps result in a standard full-duplex TELNET connection\n \
    \          for an RJS remote operator console. The user can issue commands\n \
    \          to learn the status of his jobs, send messages, reroute and abort\n\
    \           jobs, etc.\n  2.   Retrieving Output\n       -----------------\n \
    \      a.  The TIP user captures a local output device and then executes\n   \
    \        the NETRJT OPEN command for the PRINTER or PUNCH. For example,\n    \
    \       if the connection is not yet open, then either of:\n                O\
    \  PR=socket\n                O  PR(*)=socket\n           opens a printer connection\
    \ and selects the first job in the\n           printer queue for this terminal\
    \ id.\n                O  PR(jobname)=socket\n           similarly opens a connection\
    \ but selects a specified job's\n           output. In either case, if output\
    \ is not yet available the\n           connection remains open but idle, and the\
    \ output is sent when\n           it does appear. If the socket number is omitted\
    \ and the\n           connection is not yet open, the server will prompt for a\n\
    \           socket number.\n       b.  If the specified output device already\
    \ has an open connection,\n           either of the open commands:\n         \
    \       O  PR\n                O  PR(jobname)\n           is already open, the\
    \ open command may still specify \"=socket\",\n           but if the specified\
    \ socket does not match that currently open\n           there will be an error\
    \ message.\n       c.  While the output stream is idle, the user can issue RJT\n\
    \           commands with DTP, RECFM, CODE and/or SIZE parameters.\n       d.\
    \  When the specified output is available, the server will\n           send a\
    \ stream of print line (or punched card) images. The\n           user may issue\
    \ the following RJS stream control commands\n           (see NIC 7182 and 7183\
    \ for more information on RJS commands).\n           1.  BACKSPACE:  repeats roughly\
    \ the last page of printed output.\n           2.    RESTART:  restarts output\
    \ at the beginning of the current\n                           SYSOUT data set\
    \ or (\"JOB\" option) at the beginning\n                           of the job.\n\
    \           3.     CANCEL:  deletes rest of current SYSOUT data set, or\n    \
    \                       (\",JOB\" option) the entire job except account-\n   \
    \                        ing information.\n           4.      DEFER:  stops transmission\
    \ of the current job and returns\n                           it to the queue,\
    \ marked \"deferred\". Can be\n                           restarted later, with\
    \ a \"backspace\" (\"RESET\n                           jobname\" command) or from\
    \ the beginning\n                           (\"RESTART jobname\" command).\n \
    \      e.  The server does not discard job output until it is fully\n        \
    \   transmitted to the TIP and the user has _accepted_ it. If the\n          \
    \ user issues a \"CLOSE device\" or the connection breaks\n           accidentially\
    \ (e.g. due to software or hardware failure in\n           either host) before\
    \ the output is accepted, the server saves\n           the output with an implied\
    \ BACKSPACE. When the user later reopens\n           the connection and again\
    \ selects this job (either explicitly by\n           name or by calling for the\
    \ next job), it will be retransmitted,\n           repeating the last page. The\
    \ user can also defer or restart the\n           job output before reopening the\
    \ connection. Note that CLOSE\n           without the ACCEPT option is generally\
    \ a \"panic\" control to stop\n           the output stream if the printer paper\
    \ jams, etc.\n       f.  Transmitted output will be considered accepted by the\
    \ user if:\n           1.  The user issues a new OPEN command for that device.\n\
    \               until job output in progress has completed. After the last\n \
    \              RFNM is received, the connection will be closed and the job\n \
    \              output discarded at the server end.\n           3.  The original\
    \ OPEN command specified \"(*)\", i.e. an asterisk\n               for jobname.\
    \ This implies that the device stream is going\n               to be running continuously\
    \ and that the user does not want\n               to explicitly request each output\
    \ job or to accept each\n               one. Thus, if the stream is opened \"\
    (*)\", then the server\n               assumes each job is accepted when the RFNM\
    \ returns from the\n               last block.\n3.  Sending Input\n    -------------\n\
    \    (a)  The user sends the following remote operator command to the server:\n\
    \             OPEN  READER=socket\n         (This may be shortened to \"O  R=socket\"\
    ). The server will send\n         an RFC to the user's card reader socket on which\
    \ his TIP should\n         be listening. The server will issue an operator message\
    \ when\n         the connection is open. The connection will be considered _idle_\n\
    \         until the first card image is received by the server. The OPEN\n   \
    \      command will be ignored if the connection is already open, or\n       \
    \  if an earlier open request is pending.\n    (b)  Before or after the open,\
    \ but while the connection is idle, the\n         user may issue RJT commands\
    \ to set the record format, data trans-\n         fer protocol, code, and/or maximum\
    \ record size to different values.\n    (c)  The user sends in a stream of card\
    \ images which constitute one\n         or more jobs. The server will discard\
    \ the spooled images for a\n         job without processing them if the user issues\
    \ a CANCEL READER\n         command or if the connection breaks (e.g. due to software\
    \ or\n         hardware failures in either host) before the job is accepted\n\
    \         for processing. The stream then becomes idle again.\n         1.   A\
    \ server-dependent end-of-job card (e.g. \"//null\" at CCN)\n              is\
    \ received by the server.  The last job is accepted, and\n              the stream\
    \ becomes idle until another card is received.\n         2.   A server-dependent\
    \ beginning-of-job card (e.g. a \"JOB\" card\n              at CCN) is received\
    \ by the server. The previous job is\n              accepted but the stream does\
    \ not become idle at this time.\n         3.   The user issues a CLOSE READER,ACCEPT\
    \ (or \"CL#R,A\") com-\n              mand to the server. The stream is closed.\n\
    \    (e)  The user can issue a CLOSE READER (\"CL#R\") command to close the\n\
    \         stream. However, this command will be held pending by the server\n \
    \        until the stream is idle, unless the form \"CLOSE READER,ACCEPT\"\n \
    \        is issued. A CLOSE will cancel a pending OPEN command, and vice\n   \
    \      versa. The server will send the remote operator a message when\n      \
    \   a connection opens or closes.\n    (f)  Some servers (e.g. CCN) will extract\
    \ the jobname for each input\n         job from the reader stream. However, the\
    \ OPEN command may\n         specify a particular jobname, overriding that in\
    \ the reader\n         stream. That is, the jobname from the OPEN command will\
    \ replace\n         that appearing in the first job of the newly-opened stream.\
    \ This\n         feature is merely a convenience, and was included mainly for\n\
    \         syntactic consistency between input and output. However, the use\n \
    \        of asterisk as a jobname has no meaning for the reader stream,\n    \
    \     and will be ignored.\n"
