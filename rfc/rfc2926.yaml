- title: __initial_text__
  contents:
  - '          Conversion of LDAP Schemas to and from SLP Templates

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a procedure for mapping between Service\n\
    \   Location Protocol (SLP) service advertisements and lightweight\n   directory\
    \ access protocol (LDAP) descriptions of services.  The\n   document covers two\
    \ aspects of the mapping.  One aspect is mapping\n   between SLP service type\
    \ templates and LDAP directory schema.\n   Because the SLP service type template\
    \ grammar is relatively simple,\n   mapping from service type templates to LDAP\
    \ types is straightforward.\n   Mapping in the other direction is straightforward\
    \ if the attributes\n   are restricted to use just a few of the syntaxes defined\
    \ in RFC 2252.\n   If arbitrary ASN.1 types occur in the schema, then the mapping\
    \ is\n   more complex and may even be impossible.  The second aspect is\n   representation\
    \ of service information in an LDAP directory.  The\n   recommended representation\
    \ simplifies interoperability with SLP by\n   allowing SLP directory agents to\
    \ backend into LDAP directory servers.\n   The resulting system allows service\
    \ advertisements to propagate\n   easily between SLP and LDAP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.0 Introduction ................................................\
    \  2\n   2.0 Mapping SLP Templates to LDAP Schema ........................  3\n\
    \     2.1 Mapping from SLP Attribute Types to LDAP Attribute Types ..  8\n   \
    \    2.1.1 Integer ...............................................  8\n      \
    \ 2.1.2 String ................................................  8\n       2.1.3\
    \ Boolean ...............................................  9\n       2.1.4 Opaque\
    \ ................................................  9\n     2.2 Keyword Attributes\
    \ ........................................  9\n     2.3 Template Flags ............................................\
    \  9\n       2.3.1 Multi-valued ..........................................  9\n\
    \       2.3.2 Optional .............................................. 10\n   \
    \    2.3.3 Literal ............................................... 10\n      \
    \ 2.3.4 Explicit Matching ..................................... 10\n     2.4 Default\
    \ and Allowed Value Lists ........................... 10\n     2.5 Descriptive\
    \ Text .......................................... 11\n     2.6 Generating LDAP\
    \ Attribute OIDs ............................ 11\n     2.7 Example ...................................................\
    \ 11\n   3.0 Attribute Name Conflicts .................................... 15\n\
    \   4.0 Mapping from Schema to Templates ............................ 15\n   \
    \  4.1 Mapping LDAP Attribute Types to SLP Attribute Types ....... 16\n     4.2\
    \ Mapping ASN.1 Types to SLP Types .......................... 17\n       4.2.1\
    \ Integer ............................................... 18\n       4.2.2 Boolean\
    \ ............................................... 18\n       4.2.3 Enumerated\
    \ ............................................ 18\n       4.2.4 Object Identifier\
    \ ..................................... 19\n       4.2.5 Octet String ..........................................\
    \ 19\n       4.2.6 Real .................................................. 19\n\
    \     4.3 Example ASN.1 Schema ...................................... 19\n   5.0\
    \ Representing SLP Service Advertisements in an LDAP DIT ...... 22\n   6.0 Internationalization\
    \ Considerations ......................... 24\n   7.0 Security Considerations\
    \ ..................................... 24\n   8.0 References ..................................................\
    \ 25\n   9.0 Authors' Addresses .......................................... 26\n\
    \   10.0 Full Copyright Statement ................................... 27\n"
- title: 1.0 Introduction
  contents:
  - "1.0 Introduction\n   SLP templates [1] are intended to create a simple encoding\
    \ of the\n   syntactic and semantic conventions for individual service types,\n\
    \   their attributes, and conventions.  They can easily be generated,\n   transmitted,\
    \ read by humans and parsed by programs, as it is a string\n   based syntax with\
    \ required comments.  Directory schemas serve to\n   formalize directory entry\
    \ structures for use with LDAP [2] These\n   directories serve to store information\
    \ about many types of entities.\n   Network services are an example of one such\
    \ entity.\n   Interoperability between SLP and LDAP is important so clients using\n\
    \   one protocol derive benefit from services registered through the\n   other.\
    \ In addition, LDAP directory servers can serve as the backend\n   for SLP directory\
    \ agents (DAs) if interoperability is possible In\n   order to facilitate interoperability,\
    \ this document creates mappings\n   between the SLP template grammar and LDAP\
    \ directory schema, and\n   establishes some conventions for representing service\
    \ advertisements\n   in LDAP directories. The goal of the translation is to allow\
    \ SLPv2\n   queries (which are syntactically and semantically equivalent to\n\
    \   LDAPv3 string queries [7]) to be submitted to an LDAP directory\n   server\
    \ by an SLP DA backended into LDAP without extensive processing\n   by the DA.\n\
    \   The simple notation and syntactic/semantic attribute capabilities of\n   SLP\
    \ templates map easily into directory schemas, and are easily\n   converted into\
    \ directory schemas, even by automated means.  The\n   reverse may not be true.\
    \ If the LDAP schema contains attributes with\n   unrecognized or complex syntaxes,\
    \ the translation may be difficult or\n   impossible.  If, however, the LDAP schema\
    \ only uses a few of the\n   common syntaxes defined in RFC 2252 [8], then the\
    \ translation is more\n   straightforward. In addition, to foster complete bidirectionality,\n\
    \   the mapping must follow a very specific representation in its DESC\n   attributes.\n\
    \   This document outlines the correct mappings for SLP templates into\n   the\
    \ syntactic representation specified for LDAP directory schema by\n   RFC 2252\
    \ [8]. This syntax is a subset of the ASN.1/BER described in\n   the X.209 specification\
    \ [9], and is used by the LDAPv3 [2] directory\n   schema.  Likewise, rules and\
    \ guidelines are proposed to facilitate\n   consistent mapping of ASN.1 based\
    \ schemas to be translated in the SLP\n   template grammar. Finally, a proposal\
    \ for a representation of service\n   advertisements in LDAP directory services\
    \ is made that facilitates\n   SLP interoperability.\n   Except when used as elements\
    \ in the definition of LDAP schemas, the\n   key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [16].\n"
- title: 2.0 Mapping SLP Templates to LDAP Schema
  contents:
  - "2.0 Mapping SLP Templates to LDAP Schema\n   We define the following abstract\
    \ object class as the parent class for\n   all services.  Any specific service\
    \ type is a subclass of this, with\n   its own attributes:\n      ( 1.3.6.1.4.1.6252.2.27.6.2.1\n\
    \        NAME 'slpService'\n        DESC 'parent superclass for SLP services'\n\
    \        ABSTRACT\n        SUP top\n        MUST  ( template-major-version-number\
    \ $\n                template-minor-version-number $\n                description\
    \ $\n                template-url-syntax $\n                service-advert-service-type\
    \ $\n                service-advert-scopes )\n        MAY   ( service-advert-url-authenticator\
    \ $\n                service-advert-attribute-authenticator ) )\n   The attributes\
    \ correspond to various parts of the SLP service\n   template and SLP service\
    \ advertisement.\n   SLP service type templates begin with four definitions that\
    \ set the\n   context of the template:\n      template-type - This defines the\
    \ service type of the template. The\n      service type can be a simple service\
    \ type, like \"service:ftp\", an\n      abstract service type, like \"service:printer\"\
    \ or a concrete\n      service type, like \"service:printer:lpr\". The type name\
    \ can\n      additionally include a naming authority, for example\n      \"service:printer.sun:local\"\
    .  The name that appears in this field\n      omits the \"service:\" prefix.\n\
    \      template-version - A string containing a major and minor version\n    \
    \  number, separated by a period.\n      template-description - A block of human\
    \ readable text describing\n      what the service type does.\n      template-url-syntax\
    \ - An ABNF [6] grammar describing the service\n      type specific part of the\
    \ service URL.\n   The SLP template-type definition is used as the name of the\
    \ LDAP\n   object class for the template, a subclass of the \"slpService\" class,\n\
    \   together with the \"service\" prefix to indicate that the name is for a\n\
    \   service. In the translating service type name, colons and the period\n   separating\
    \ the naming authority are converted into hyphens. If the\n   template defines\
    \ an SLP concrete type, the concrete type name is\n   used; the abstract type\
    \ name is never used.  For example, the\n   template for \"service:printer:lpr\"\
    \ is translated into an LDAP object\n   class called \"service-printer-lpr\".\
    \ Furthermore, if the type name\n   contains a naming authority, the naming authority\
    \ name must be\n   included. For example, the service type name\n   \"service:printer.sun:local\"\
    \ becomes \"service-printer-sun-local\".  The\n   LDAP object class is always\
    \ \"STRUCTURAL\".\n   The template-version definition is partitioned into two\
    \ attributes,\n   template-major-version-number and template-minor-version-number.\
    \ The\n   LDAP definition for these attributes is:\n      ( 1.3.6.1.4.1.6252.2.27.6.1.1\n\
    \        NAME 'template-major-version-number'\n        DESC 'The major version\
    \ number of the service type template'\n        EQUALITY integerMatch\n      \
    \  SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n        SINGLE-VALUE\n      )\n     \
    \ ( 1.3.6.1.4.1.6252.2.27.6.1.2\n        NAME 'template-minor-version-number'\n\
    \        DESC 'The minor version number of the service type template'\n      \
    \  EQUALITY integerMatch\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n     \
    \   SINGLE-VALUE\n      )\n   The template-url-syntax definition in the SLP template\
    \ is described\n   by the following attribute:\n      ( 1.3.6.1.4.1.6252.2.27.6.1.3\n\
    \        NAME 'template-url-syntax'\n        DESC 'An ABNF grammar describing\
    \ the service type\n              specific part of the service URL'\n        EQUALITY\
    \ caseExactIA5Match\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.26\n        SINGLE-VALUE\n\
    \      )\n   The template-description attribute is translated into the X.520\n\
    \   standard attribute \"description\" [3].\n   We further establish the convention\
    \ that SLP template characteristics\n   that can't be translated into LDAP are\
    \ inserted into the DESC field\n   of the object class definition. The items are\
    \ separated by empty\n   lines (consisting of two \"LINE FEED\" characters), are\
    \ preceded by a\n   LINE FEED character, and are tagged at the  beginning of the\
    \ line to\n   indicate what they represent.   This allows the template to be\n\
    \   reconstructed from the schema by properly parsing the comments.\n   The bulk\
    \ of an SLP template consists of attribute definitions.  There\n   are four items\
    \ in an SLP template attribute definition that need to\n   be mapped into LDAP:\n\
    \      Attribute Name - Since SLPv2 attribute names are defined to be\n      compatible\
    \ with LDAPv3, SLP attributes map directly into LDAP\n      attributes with no\
    \ change. Similarly, LDAP attributes map directly\n      to SLP attributes.\n\
    \      Attribute Type - The SLP attribute type is mapped into the LDAP\n     \
    \ attribute type.\n      Attribute Flags - The SLP attribute flags are mapped\
    \ into\n      characteristics of the LDAP attribute definition, or into the DESC\n\
    \      field if no equivalent LDAP attribute definition characteristic\n     \
    \ occurs.\n      Default and Allowed Values - These must be handled by the client\n\
    \      or a DA enabled to handle templates, as in SLP. For reference,\n      however,\
    \ they should be included in the DESC field of the LDAP\n      attribute definition.\n\
    \      Descriptive Text - The SLP template descriptive text should be\n      mapped\
    \ into the DESC field.\n   We discuss mapping of types, flags, default and allowed\
    \ values, and\n   descriptive text in the subsections below.\n   OIDs for SLP\
    \ template conversion schema elements are standardized\n   under the enterprise\
    \ number of SrvLoc.Org (6252) [18].\n   For purposes of representing an SLP entry,\
    \ we also define two\n   standardized LDAP syntaxes and attributes with standardized\
    \ OIDs.\n      ( 1.3.6.1.4.1.6252.2.27.6.2.2\n        DESC 'SLP Service Type'\n\
    \      )\n   Defines the syntax for the service type name. The syntax is defined\n\
    \   in the BNF for the service URL in RFC 2609 Section 2.1 [1].\n      ( 1.3.6.1.4.1.6252.2.27.6.2.3\n\
    \        DESC 'SLP Scope'\n      )\n   Defines the syntax for the scope name.\
    \ The syntax is defined in the\n   BNF for scope names in RFC 2608 Section 6.4.1\
    \ [5].\n      ( 1.3.6.1.4.1.6252.2.27.6.1.4\n        NAME 'service-advert-service-type'\n\
    \        DESC 'The service type of the service advertisement, including\n    \
    \          the \"service:\" prefix.'\n        EQUALITY caseExactIA5Match\n   \
    \     SYNTAX 1.3.6.1.4.1.6252.2.27.6.2.2\n        SINGLE-VALUE\n      )\n   Defines\
    \ an attribute for the service type name.\n      ( 1.3.6.1.4.1.6252.2.27.6.1.5\n\
    \        NAME 'service-advert-scopes'\n        DESC 'A list of scopes for a service\
    \ advertisement.'\n        EQUALITY caseExactIA5Match\n        SYNTAX 1.3.6.1.4.1.6252.2.27.6.2.3\n\
    \      )\n   Defines a multivalued attribute for the scopes.\n   Searches for\
    \ abstract types can be made with an LDAP query that\n   wildcards the concrete\
    \ type. For example, a search for all service\n   advertisements of the printer\
    \ abstract type can be made with the\n   following query:\n         (service-advert-service-type=service:printer:*)\n\
    \   SLP specifies that service URLs and attribute lists can be\n   accompanied\
    \ by a structured authenticator consisting of a digital\n   signature and information\
    \ necessary to verify the signature.  A\n   syntax and two standardized SLP attributes\
    \ are defined for this\n   purpose:\n      ( 1.3.6.1.4.1.6252.2.27.6.2.3 DESC\
    \ 'SLP Authenticator')\n      The syntax of an SLP authenticator is the bytes\
    \ of the\n      authenticator in network byte order, see RFC 2608, Section 9.2\n\
    \      [5].\n      ( 1.3.6.1.4.1.6252.2.27.6.1.6\n        NAME 'service-advert-url-authenticator'\n\
    \        DESC 'The authenticator for the URL, null if none.'\n        SYNTAX 1.3.6.1.4.1.6252.2.27.6.2.3\n\
    \        SINGLE-VALUE\n      )\n      This attribute contains the SLP URL authenticator,\
    \ as defined in\n      RFC 2608, Section 9.2 [5].\n      ( 1.3.6.1.4.1.6252.2.27.6.1.7\n\
    \        NAME 'service-advert-attribute-authenticator'\n        DESC 'The authenticator\
    \ for the attribute list, null if none.'\n        SYNTAX 1.3.6.1.4.1.6252.2.27.6.2.3\n\
    \        SINGLE_VALUE\n      )\n      This attribute contains the SLP attribute\
    \ authenticator, as\n      defined in RFC 2608, Section 9.2 [5].\n"
- title: 2.1 Mapping from SLP Attribute Types to LDAP Attribute Types
  contents:
  - "2.1 Mapping from SLP Attribute Types to LDAP Attribute Types\n   We define the\
    \ mapping from SLP attribute types to LDAP as follows:\n      SLP Type    ASN.1\
    \ Type               LDAP Type\n      ---------------------------------------------------\n\
    \       Integer     INTEGER              INTEGER\n       String      DirectoryString\
    \      Directory String\n       Boolean     BOOLEAN              Boolean\n   \
    \    Opaque      OCTET STRING         Octet String\n       Keyword     (N/A) \
    \               IA5 String\n   The following subsections discuss further details\
    \ of the mapping.\n"
- title: 2.1.1 Integer
  contents:
  - "2.1.1 Integer\n   SLP integers compare as integers when performing a query. \
    \ LDAP\n   integers behave similarly.  Consequently, the mapping from the SLP\n\
    \   integer type to LDAP is INTEGER, with the integerMatch matching rule.\n"
- title: 2.1.2 String
  contents:
  - "2.1.2 String\n   SLP strings are encoded as described in the SLP protocol\n \
    \  specification [5].  All value strings are considered case insensitive\n   for\
    \ matching operations.  SLP strings are not null terminated and are\n   encoded\
    \ in UTF-8.\n   SLP strings are mapped to the LDAP Directory String type. The\n\
    \   Directory String type exactly matches the SLP string type, i.e. it is\n  \
    \ a non-null terminated UTF-8 string. The caseIgnoreMatch equality\n   rule, caseIgnoreOrderingMatch\
    \ ordering rule, and\n   caseIgnoreSubstringsMatch substring rule are used for\
    \ comparing\n   string attribute values.\n"
- title: 2.1.3 Boolean
  contents:
  - "2.1.3 Boolean\n   Boolean attributes may have one of two possible values.  In\
    \ SLP,\n   these values are represented as strings, TRUE and FALSE.  In SLP's\n\
    \   string encoding of a boolean value, case does not matter.\n   The SLP Boolean\
    \ type maps directly into an LDAP BOOLEAN. The\n   caseIgnoreMatch rule is used\
    \ for equality matching.\n"
- title: 2.1.4 Opaque
  contents:
  - "2.1.4 Opaque\n   SLP attribute values of type Opaque are represented as OCTET\
    \ STRING\n   in LDAP, and the octetStringMatch matching rule is used to compare\n\
    \   them.\n"
- title: 2.2 Keyword Attributes
  contents:
  - "2.2 Keyword Attributes\n   SLP service type templates allow the definition of\
    \ keyword\n   attributes.  Keyword attributes are attributes whose only\n   characteristic\
    \ is their presence. Keyword attributes have no flag\n   information, nor any\
    \ default or allowed values (since, by definition,\n   they have no values).\n\
    \   ASN.1 has no concept of keyword attributes. Keyword attributes are\n   translated\
    \ into a \"May\" clause in the ASN.1 class definition for the\n   service type.\
    \ If the keyword attribute is present, then its value is\n   of no consequence,\
    \ but for consistency we make it simply the NUL\n   character, \"\\00\".\n"
- title: 2.3 Template Flags
  contents:
  - "2.3 Template Flags\n   SLP template flags can be handled as described in the\
    \ following\n   subsections.\n"
- title: 2.3.1 Multi-valued
  contents:
  - "2.3.1 Multi-valued\n   Multi-valued attributes are defined in an SLP template\
    \ using the one\n   value.  All values for a given attribute must be of the same\
    \ type.\n   LDAP attribute definitions require that a single valued attribute\n\
    \   include the SINGLE-VALUE tag if the attribute is single valued.\n   Otherwise,\
    \ the attribute is assumed to be multivalued by default.\n"
- title: 2.3.2 Optional
  contents:
  - "2.3.2 Optional\n   SLP uses the 'O' flag to indicate an attribute may or may\
    \ not be\n   present.  These optional attributes are defined using the \"May\"\
    \n   clause in the ASN.1 definition class definition for the service type.\n \
    \  All other attributes must be defined as a \"Must\".\n"
- title: 2.3.3 Literal
  contents:
  - "2.3.3 Literal\n   ASN.1 does not have a mechanism to indicate that the values\
    \ of an\n   attribute may not be translated from one language to another, since\n\
    \   ASN.1 schema are not typically translated. This flag is dropped when\n   translating\
    \ a template, but presence of the flag should be noted in\n   the DESC field.\
    \ It should be placed on a separate line and tagged\n   with \"Literal:\" so the\
    \ template can be reconstructed from the schema.\n"
- title: 2.3.4 Explicit Matching
  contents:
  - "2.3.4 Explicit Matching\n   The SLP template syntax uses a flag of 'X' to indicate\
    \ that an\n   attribute must be present in order for the query to be properly\n\
    \   satisfied.  There is no provision for requiring that particular\n   attributes\
    \ be in a query. Consequently, this flag is dropped when\n   translating a template,\
    \ but presence of the flag should be noted in\n   the DESC field. It should be\
    \ placed on a separate line and tagged\n   with \"Explicit:\" so the template\
    \ can be reconstructed from the\n   schema.\n"
- title: 2.4 Default and Allowed Value Lists
  contents:
  - "2.4 Default and Allowed Value Lists\n   The SLP template grammar provides the\
    \ capability to define default\n   and allowed values for an attribute. The SLP\
    \ protocol does not\n   enforce these restrictions on registered attributes, however.\
    \  The\n   default and allowed values may be used by client side applications,\n\
    \   or alternatively it may also be used by DAs to initialize\n   registrations\
    \ having no attributes and to limit attribute values to\n   the template allowed\
    \ values.\n   LDAP servers also do not support default and allowed values on\n\
    \   attributes. Therefore, enforcement of default and allowed values in\n   SLP\
    \ templates is left up to the clients or a DA, if the DA is\n   backending into\
    \ LDAP. The default and allowed values should be\n   included in the DESC field.\
    \ The comments should be placed on separate\n   lines and labeled with the \"\
    Default:\" and \"Allowed:\" tags to allow\n   reconstruction of the template.\n"
- title: 2.5 Descriptive Text
  contents:
  - "2.5 Descriptive Text\n   The descriptive text associated with an attribute definition\
    \ should\n   be included in the DESC field. It should start on a separate line\
    \ and\n   begin with the \"Description:\" tag.\n"
- title: 2.6 Generating LDAP Attribute OIDs
  contents:
  - "2.6 Generating LDAP Attribute OIDs\n   LDAP attributes require an OID. In general,\
    \ there is no a priori way\n   that an algorithm can be defined for generating\
    \ OIDs, because it will\n   depend on the conventions used by the organization\
    \ developing the\n   template. In some cases, an organization's procedure for\
    \ generating\n   OIDs may be regular enough that a template developer can\n  \
    \ algorithmically generate OIDs off of an assigned root. Whatever means\n   is\
    \ used, the template developer should assure that unique OIDs are\n   assigned\
    \ to each SLP attribute that is translated into an LDAP\n   attribute.\n"
- title: 2.7 Example
  contents:
  - "2.7 Example\n   The template included below is a hypothetical abstract printer\n\
    \   service template, similar to that described in [10].\n      template-type\
    \ = printer\n      template-version = 0.0\n      template-description =\n    \
    \  The printer service template describes the attributes supported by\n      network\
    \ printing devices.  Devices may be either directly\n      connected to a network,\
    \ or connected to a printer spooler that\n      understands the a network queuing\
    \ protocol such as IPP, lpr or the\n      Salutation  Architecture.\n      template-url-syntax\
    \ =\n      ;The URL syntax is specific to the printing protocol being\n      ;employed\n\
    \      description = STRING\n      # This attribute is a free form string that\
    \ can contain any\n      # site-specific descriptive information about this printer.\n\
    \      printer-security-mechanisms-supported = STRING L M\n      none\n      #\
    \ This attribute indicates the security mechanisms supported\n      tls, ssl,\
    \ http-basic, http-digest, none\n      printer-operator = STRING O L M\n     \
    \ # A person, or persons responsible for maintaining a\n      # printer on a day-to-day\
    \ basis, including such tasks\n      # as filling empty media trays, emptying\
    \ full output\n      # trays, replacing toner cartridges, clearing simple\n  \
    \    # paper jams, etc.\n      printer-location-address = STRING O\n      # Physical/Postal\
    \ address for this device.  Useful for\n      # nailing down a group of printers\
    \ in a very large corporate\n      # network.  For example: 960 Main Street, San\
    \ Jose, CA 95130\n      printer-priority-queue = BOOLEAN O\n      FALSE\n    \
    \  # TRUE indicates this printer or print queue is a priority\n      # queuing\
    \ device.\n      printer-number-up = INTEGER O\n      1\n      # This job attribute\
    \ specifies the number of source\n      # page-images to impose upon a single\
    \ side of an instance\n      # of a selected medium.\n      1, 2, 4\n      printer-paper-output\
    \ = STRING M L O\n      standard\n      # This attribute describes the mode in\
    \ which pages output\n      # are arranged.\n      standard, noncollated sort,\
    \ collated sort, stack, unknown\n   We assume that the concrete type \"service:printer:lpr\"\
    \ for printers\n   that speak the LPR protocol [4] has the following template\n\
    \   definition:\n      template-type = printer:lpr\n      template-version = 0.0\n\
    \      template-description =\n      The printer:lpr service template describes\
    \ the attributes\n      supported by network printing devices that speak the\n\
    \      LPR protocol. No new attributes are included.\n      template-url-syntax\
    \ = queue\n      queue = ;The queue name, see RFC 1179.\n   The LDAP class definition\
    \ for the \"service:printer:lpr\" concrete\n   service type is translated as follows:\n\
    \   ( ---place the assigned OID here---\n     NAME  'service-printer-lpr'\n  \
    \   DESC  'Description: The printer:lpr service template\n                 describes\
    \ the attributes supported by network printing\n                 devices that\
    \ speak the LPR protocol. No new attributes\n                 are included.\n\
    \            URL Syntax: queue\n                 queue = ;The queue name, see\
    \ RFC 1179.'\n     SUP   slpService\n     MUST  ( description $ security-mechanisms-supported\
    \ $\n     labeledURI)\n     MAY   ( operator $ location-address $ priority-queue\
    \ $\n             number-up $ paper-output)\n   )\n   The attribute definitions\
    \ are translated as follows:\n   ( ---place the assigned OID here---\n     NAME\
    \ 'printer-security-mechanisms-supported'\n     DESC 'Description: This attribute\
    \ indicates the security mechanisms\n           supported.\n           Default:\
    \ value\n           Allowed: tls, ssl, http-basic, http-digest, none\n       \
    \    Literal:'\n     EQUALITY caseIgnoreMatch\n     ORDERING caseIgnoreOrderingMatch\n\
    \     SUBSTR caseIgnoreSubstringsMatch\n     SYNTAX 1.3.6.1.4.1.1466.115.121.1.15\n\
    \   )\n   ( ---place the assigned OID here---\n     NAME 'printer-operator'\n\
    \     DESC 'Description: A person, or persons responsible for\n           maintaining\
    \ a printer on a day-to-day basis, including\n           such tasks as filling\
    \ empty media trays, emptying full\n           output trays, replacing toner cartridges,\
    \ clearing simple\n           paper jams, etc.\n           Literal:'\n     EQUALITY\
    \ caseIgnoreMatch\n     ORDERING caseIgnoreOrderingMatch\n     SUBSTR caseIgnoreSubstringsMatch\n\
    \     SYNTAX 1.3.6.1.4.1.1466.115.121.1.15\n   )\n   ( --place the assigned OID\
    \ here---\n     NAME 'printer-location-address'\n     DESC 'Description Physical/Postal\
    \ address for this device.\n           Useful for nailing down a group of printers\
    \ in a very\n           large corporate network.  For example: 960 Main Street,\n\
    \           San Jose, CA 95130.'\n     EQUALITY caseIgnoreMatch\n     ORDERING\
    \ caseIgnoreOrderingMatch\n     SUBSTR caseIgnoreSubstringsMatch\n     SYNTAX\
    \ 1.3.6.1.4.1.1466.115.121.1.15\n     SINGLE-VALUE\n   )\n   ( ---place the assigned\
    \ OID here---\n     NAME 'printer-priority-queue'\n     DESC 'Description: TRUE\
    \ indicates this printer or print\n          queue is a priority queuing device.'\n\
    \     EQUALITY booleanMatch\n     SYNTAX 1.3.6.1.4.1.1466.115.121.1.7\n     SINGLE-VALUE\n\
    \   )\n   ( ---place the assigned OID here---\n     NAME 'printer-number-up'\n\
    \     DESC 'Description: This job attribute specifies the number\n           of\
    \ source page-images to impose upon a single side of\n           an instance of\
    \ a selected medium. This attribute is\n           INTEGER.\n           Default:\
    \ 1\n           Allowed: 1, 2, 3, 4'\n     EQUALITY integerMatch\n     SYNTAX\
    \ 1.3.6.1.4.1.1466.115.121.1.27\n     SINGLE-VALUE\n   )\n   ( ---place the assigned\
    \ OID here---\n     NAME 'printer-paper-output'\n     DESC 'Description: This\
    \ attribute describes the mode in\n           which pages output are arranged.\
    \ Default value is\n           standard.\n           Default: standard\n     \
    \      Allowed: standard, noncollated sort, collated sort,\n             stack,\
    \ unknown.\n           Literal:'\n     EQUALITY caseIgnoreMatch\n     ORDERING\
    \ caseIgnoreOrderingMatch\n     SUBSTR caseIgnoreSubstringsMatch\n     SYNTAX\
    \ 1.3.6.1.4.1.1466.115.121.1.15\n   )\n"
- title: 3.0 Attribute Name Conflicts
  contents:
  - "3.0 Attribute Name Conflicts\n   LDAP has a flat name space, and attribute names\
    \ and OIDs must be\n   unique in a directory server. In order to avoid name conflicts\
    \ in the\n   translation of SLP templates to LDAP schemas, template developers\
    \ may\n   want to consider prepending the name of the service type to the\n  \
    \ attribute. Postprocessing attribute names to make them unique when\n   translated\
    \ is not possible, because it would require the DA to\n   rewrite queries before\
    \ submitting them to the directory server. In\n   addition, developers should\
    \ use standard LDAP attributes when such\n   attributes are available.\n   In\
    \ the above example template, the abstract type name \"printer\" is\n   prepended\
    \ to attributes to avoid conflicts. The standard\n   \"description\" attribute\
    \ defined by X.520 [3] is used to translate the\n   template description attribute.\n"
- title: 4.0 Mapping from Schema to Templates
  contents:
  - "4.0 Mapping from Schema to Templates\n   The reverse mapping from LDAP schema\
    \ to SLP service type templates\n   requires dealing with both LDAP and ASN.1\
    \ data types.  RFC 2252\n   defines 33 attribute syntaxes that should be supported\
    \ by LDAP\n   directory servers.  These syntaxes are defined using BNF for strings\n\
    \   or using ASN.1 for binary  valued attributes defined by X.520.\n   Mapping\
    \ of the LDAP data types into SLP template types is fairly\n   straightforward,\
    \ but mapping arbitrary ASN.1 data types is somewhat\n   more complicated and\
    \ requires encoding the ASN.1 data type into a\n   string. To a certain extent,\
    \ this masks the ASN.1 data type because\n   it becomes impossible to distinguish\
    \ between a native string having\n   content equivalent to an encoded ASN.1 string.\
    \ However, inclusion of\n   the ASN.1 data type in the comment provides additional\
    \ information\n   should a reverse transformation from SLP to ASN.1 be required.\n\
    \   The following subsections deal with both LDAP and ASN.1 attribute\n   data\
    \ type mappings.\n"
- title: 4.1 Mapping LDAP Attribute Syntaxes to SLP Attribute Types
  contents:
  - "4.1 Mapping LDAP Attribute Syntaxes to SLP Attribute Types\n   The following\
    \ table contains the mappings for LDAP syntaxes to SLP\n   data types:\n     \
    \    LDAP Type                              SLP Type\n      --------------------------------------------------------\n\
    \         ACI Item                                 NA\n         Access Point \
    \                            NA\n         Attribute Type Description         \
    \      NA\n         Audio                                    Opaque\n        \
    \ Binary                                   ASN.1 escape\n         Bit String \
    \                              String\n         Boolean                      \
    \            Boolean\n         Certificate                              Opaque\n\
    \         Certificate List                         Opaque\n         Certificate\
    \ Pair                         Opaque\n         Country String               \
    \            String\n         DN                                       String\n\
    \         Data Quality Syntax                      NA\n         Delivery Method\
    \                          NA\n         Directory String                     \
    \    String\n         DIT Content Rule Description             NA\n         DIT\
    \ Structure Rule Description           NA\n         DL Submit Permission     \
    \                NA\n         DSA Quality Syntax                       NA\n  \
    \       Enhanced Guide                           NA\n         Facsimile Telephone\
    \ Number               String\n         Fax                                  \
    \    Opaque\n         Generalized Time                         String\n      \
    \   Guide                                    NA\n         IA5 String         \
    \                      String\n         INTEGER                              \
    \    Integer\n         JPEG                                     Opaque\n     \
    \    LDAP Syntax Description                  NA\n         LDAP Schema Definition\
    \                   NA\n         LDAP Schema Description                  NA\n\
    \         Master and Shadow Access Points          NA\n         Matching Rule\
    \ Description                NA\n         Matching Rule Use Description      \
    \      NA\n         Mail Preference                          NA\n         MHS\
    \ OR Address                           String\n         Modify Rights        \
    \                    NA\n         Name and Optional UID                    NA\n\
    \         Name Form Description                    NA\n         Numeric String\
    \                           String\n         Object Class Description        \
    \         NA\n         Octet String                             Opaque\n     \
    \    OID                                      String\n         Other Mailbox \
    \                           String\n         Postal Address                  \
    \         String\n         Protocol Information                     NA\n     \
    \    Presentation Address                     String\n         Printable String\
    \                         String\n         Substring Assertion               \
    \       NA\n         Subtree Specification                    NA\n         Supplier\
    \ Information                     NA\n         Supplier or Consumer          \
    \           NA\n         Supplier And Consumer                    NA\n       \
    \  Supported Algorithm                      NA\n         DSE Type            \
    \                     NA\n         Telephone Number                         String\n\
    \         Teletex Terminal Identifier              String\n         Telex Number\
    \                             String\n         UTC Time                      \
    \           String\n"
- title: 4.2 Mapping ASN.1 Types to SLP Types
  contents:
  - "4.2 Mapping ASN.1 Types to SLP Types\n   ASN.1 employs a much richer set of data\
    \ types than provided by SLP.\n   The table below show the mapping of selected\
    \ ASN.1 data type to their\n   nearest SLP equivalent.  Because of the complexity\
    \ and flexibility of\n   ASN.1, a complete list cannot be provided.\n   As sample\
    \ of some ASN.1 encodings and their mappings to SLP:\n      ASN.1 type       \
    \        SLP type\n      -----------------------------------------\n      INTEGER\
    \                  Integer\n      BOOLEAN                  Boolean\n      ENUMERATED\
    \               String\n      OBJECT IDENTIFIER        String\n      OCTET STRING\
    \             Opaque\n      REAL                     String\n   Data types that\
    \ do not map directly to SLP data types should be\n   defined as either a String,\
    \ or as Opaque.  ASN.1 types that may only\n   contain valid characters for Strings,\
    \ as defined in X.680 [9] should\n   be encoded as strings.  ASN.1 types such\
    \ as GraphicString that change\n   their character set encoding in part way through\
    \ a value should not\n   be encoded as strings, however, If such types are required,\
    \ the SLP\n   Opaque type should be used. In either case, the first line of the\n\
    \   help text is used to indicate the original ASN.1 data type.\n   The following\
    \ subsections describe how to convert from the ASN.1 BER\n   [9] to the SLP template\
    \ for the different types in the table above.\n"
- title: 4.2.1 Integer
  contents:
  - "4.2.1 Integer\n   Both SLP templates and ASN.1 support Integers, so there is\
    \ a one to\n   one mapping between an SLP Integer attribute and an ASN.1 Integer\n\
    \   attribute.  Details on the encoding of integers is summarized in the\n   SLP\
    \ template to ASN.1 section above.\n"
- title: 4.2.2 Boolean
  contents:
  - "4.2.2 Boolean\n   Boolean values are supported by both SLP and ASN.1, though\
    \ on wire\n   encodings differ.  X.680 [9] specifies zero and non-zero encoding\
    \ for\n   booleans, where SLP encodes booleans using the strings TRUE and\n  \
    \ FALSE.  In general, most LDAP servers will use the LDAP Boolean type\n   (which\
    \ is a string), so again the ASN.1 type should be recorded in\n   the comment\
    \ or it will be lost.\n"
- title: 4.2.3 Enumerated
  contents:
  - "4.2.3 Enumerated\n   SLP templates support the concept of enumerations through\
    \ the listing\n   of allowed values in the attribute definition.  These enumerations\n\
    \   are not strictly binding on clients or DAs, but they are similar to\n   the\
    \ ASN.1 definition of enumerations. BER encodes the ASN.1\n   enumeration by passing\
    \ the number of the element's position in the\n   enumeration.  This requires\
    \ both sides to have knowledge of the\n   specific enumeration prior to decoding\
    \ an enumeration's value. SLP\n   provides no specific support for transmitting\
    \ enumerations. They are\n   simply String types. Information on the ASN.1 type\
    \ and ASN.1 encoding\n   of the enumeration values is recorded in the comment.\n\
    \   Example:\n   color-supported = STRING   M\n   none\n   # ASN.1: Enumeration.\n\
    \   # ASN.1 Mapping: none = 0, highlight = 1, three color = 2,\n   #   four color\
    \ = 4, monochromatic = 5\n   #This attribute specifies whether the Printer supports\n\
    \   # color and, if so, what type.\n   none,highlight,three color,four color,monochromatic\n"
- title: 4.2.4 Object Identifier
  contents:
  - "4.2.4 Object Identifier\n   Object identifiers(OIDs) are commonly used in the\
    \ ASN.1 world to\n   identify object and attributes.  OIDs are a numerical representation\n\
    \   of an element's place in the naming hierarchy. Each element at a\n   particular\
    \ level of a hierarchy has a unique number assigned within\n   that level of the\
    \ hierarchy. A sample OID would be the naming tree\n   for SNMP MIBs:  iso(1)\
    \ org(3) dod(6) internet(1) mgmt(2) mib(1) would\n   be written as the string\
    \ \"1.3.6.1.2.1\".\n   Because this representation reduces down to a string of\
    \ dot separated\n   numbers, this maps easily to the SLP String type.  The help\
    \ text for\n   this element should indicate it is an ASN.1 OID\n      identifier\
    \ = STRING\n      # ASN.1: OID\n      # The object identifier for this SNMP agent.\n"
- title: 4.2.5 Octet String
  contents:
  - "4.2.5 Octet String\n   An ASN.1 octet string should be mapped to an Opaque in\
    \ an SLP\n   template.  An octet string is a sequence of bytes, whereas an Opaque\n\
    \   is a a string that encodes a sequence of bytes. Again, the ASN.1 type\n  \
    \ is lost unless recorded in the comment.\n"
- title: 4.2.6 Real
  contents:
  - "4.2.6 Real\n   There is no direct mapping between floating point numbers and\
    \ any SLP\n   data types.  Attributes having the ASN.1 type of Real are mapped\
    \ to\n   SLP type String.  Comments are added to the attribute help text\n   indicating\
    \ the value was originally an ASN.1 real.  For example:\n      weight = STRING\n\
    \      # ASN.1: Real\n      # The objects weight in pounds.\n"
- title: 4.3 Example ASN.1 Schema
  contents:
  - "4.3 Example ASN.1 Schema\n   The following is an example schema for an exported\
    \ filesystem.  The\n   section presents it as in ASN.1 and the following section\
    \ shows the\n   SLP template translation. The template translation does not capture\n\
    \   the actual attribute format for the Set type, that would be done in\n   the\
    \ LDAP client software making the translation. Note that even\n   though the class\
    \ definition does not conform with the previously\n   defined conventions for\
    \ SLP classes, the schema can still be\n   translated into an SLP template.  The\
    \ syntax used in this example\n   follows\n         -- Abstraction of a fstab\
    \ entry (a \"mount\").\n         -- These lookups would likely be performed by\
    \ an\n         -- an automounter type application.\n         mount   OBJECT-CLASS\
    \ ::= {\n                 SUBCLASS OF { top }\n                 MUST CONTAIN {\
    \ mountHost |\n                                mountDirectory |\n            \
    \                    mountType\n                              }\n            \
    \     MAY CONTAIN { mountOption |\n                               mountDumpFrequency\
    \ |\n                               mountPassNo\n                            \
    \ }\n                 ID { <oid1> }\n         }\n         - The mount host.\n\
    \         mountHost       ATTRIBUTE ::= {\n                         WITH SYNTAX\
    \ caseIgnoreString\n                         EQUALITY MATCHING RULE caseIgnoreMatch\n\
    \                         SINGLE VALUE\n                         ID { <oid2> }\n\
    \         }\n         - The file system to mount.\n         mountDirectory  ATTRIBUTE\
    \ ::= {\n                         WITH SYNTAX caseIgnoreString\n             \
    \            EQUALITY MATCHING RULE caseIgnoreMatch\n                        \
    \ SINGLE VALUE\n                         ID { <oid3> }\n         }\n         -\
    \ The type of file system being mounted.\n         mountType       ATTRIBUTE ::=\
    \ {\n                         WITH SYNTAX INTEGER { ufs(1),\n                \
    \                               hsfs(2),\n                                   \
    \            nfs(3),\n                                               rfs(4)\n\
    \                                             }\n                         EQUALITY\
    \ MATCHING RULE integerMatch\n                         SINGLE VALUE\n        \
    \                 ID { <oid4> }\n         }\n         - Options for the mount\
    \ operation.\n         mountOption     ATTRIBUTE ::= {\n                     \
    \    WITH SYNTAX caseIgnoreString\n                         EQUALITY MATCHING\
    \ RULE caseIgnoreString\n                         ID { <oid5> }\n         }\n\
    \         - How often to dump the file system.\n         mountDumpFrequency  \
    \    ATTRIBUTE :: = {\n                                 WITH SYNTAX  INTEGER (0..9)\n\
    \                                 EQUALITY MATCHING RULE integerMatch\n      \
    \                           SINGLE VALUE\n                                 ID\
    \ { <oid6> }\n         }\n         - Boot time mount pass number.\n         mountPassNo\
    \     ATTRIBUTE ::= {\n                         WITH SYNTAX INTEGER\n        \
    \                 EQUALITY MATCHING RULE integerMatch\n                      \
    \   SINGLE VALUE\n                         ID { <oid7> }\n         }\n   The translated\
    \ SLP template is:\n      template-type = mount\n      template-version = 1.0\n\
    \      template-description = \"Describes a remote filesystem access\n      protocol\"\
    \n      template-url-syntax =\n                   filesystem   = 1*[ DIGIT / ALPHA\
    \ ]\n                   urlpath = \"/\" filesystem\n      mountHost = STRING L\n\
    \      # ASN.1: Case Ignore String, Single Value\n      # The mount host\n   \
    \   mountDirectory = STRING L\n      # ASN.1: Case Ignore String, Single Value\n\
    \      # The filesystem to mount\n      mountType = STRING L\n      ufs\n    \
    \  # ASN.1: Enumeration, Single Value\n      # ASN.1 Mapping: ufs = 1, hsfs =\
    \ 2, nfs = 3, rfs = 4\n      # The type of the filesystem being mounted\n    \
    \  ufs, hsfs, nfs, rfs\n      mountOption = STRING M O L\n      # ASN.1: Case\
    \ Ignore String\n      # mount options for this filesystem\n      mountDumpFrequency\
    \ = INTEGER O\n      0\n      # ASN.1: Integer Range, Single Value\n      # How\
    \ often to dump this filesystem\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n      mountPassNo\
    \ = INTEGER O\n      # ASN.1: Integer, Single Value\n      # Boot time mount pass\
    \ number\n"
- title: 5.0 Representing SLP Service Advertisements in an LDAP DIT
  contents:
  - "5.0 Representing SLP Service Advertisements in an LDAP DIT\n   In addition to\
    \ translating between SLP templates and LDAP schema,\n   another area requiring\
    \ compatibility is the representation of SLP\n   service advertisements in an\
    \ LDAP DIT. A standardized representation\n   for service information allows SLP\
    \ DAs to store service\n   advertisements in LDAP, and for LDAP clients to query\
    \ the DIT for\n   those services.  Similarly, if LDAP clients represent service\n\
    \   information in the same form, SLP clients can benefit from\n   interoperability.\n\
    \   A service advertisement contains the service URL in a 'labeledURI'\n   attribute\
    \ [11]. The labeledURI attribute in a service advertisement\n   should only contain\
    \ the service URL for the service, with no\n   additional label. It is recommended\
    \ that the labeledURI be used as\n   the RDN for the service object in the DIT.\n\
    \   Although service advertisements can appear anywhere within the DIT,\n   it\
    \ is recommended that all services be stored under a single common\n   point,\
    \ or root node, to facilitate searching in a domain. This allows\n   a  client\
    \ to search for all of advertisements of a particular service\n   type, say, for\
    \ all printers.  The recommended parent entry is one\n   named \"ou=service\"\
    \ below the entry which is the representation of the\n   domain, as described\
    \ in RFC 2247.\n   For example, a printer service with labeledURI of\n   \"service:lpr://printsrv/queue1\"\
    \ in the domain foobar.com advertised\n   in the LDAP server that holds the entry\
    \ \"dc=foobar,dc=com\" tree has\n   the following DN:\n   \"labeledURI=service:lpr://printsrv/queue1,\
    \ ou=service, dc=foobar,\n   dc=com\"\n   While this leads to a flat space of\
    \ service storage, since SLP uses\n   search filters from LDAP for searches, these\
    \ filters can be used for\n   one-level searches from the root node.\n   The following\
    \ example illustrates how an advertisement having a\n   simple service type is\
    \ represented. The advertisement (in conceptual\n   form) for a printer is:\n\
    \      Service Type: service:lpr://printsrv/queue1\n      Scopes: eng,corp\n \
    \     Attributes:\n        description = A general printer for all to use.\n \
    \       security-mechanisms-supported = none\n      Authentication: none\n   The\
    \ RDN of the object is labeledURI=service:lpr://printsrv/queue1,\n   and the following\
    \ LDAP search filter will return this object, along\n   with any others of the\
    \ service type \"service:lpr\" that match the\n   other attributes:\n      (&(service-advert-service-type=service:lpr)\n\
    \        (service-advert-scopes=eng)\n        (service-advert-scopes=corp)\n \
    \       (description=A general printer for all to use.)\n        (security-mechanisms-supported=none))\n\
    \   Service advertisements in SLP also have a lease time associated with\n   them.\
    \ In LDAP servers that support the extensions for dynamic\n   directory services\
    \ [12], the service advertisement entry objectClass\n   should be extended with\
    \ the dynamicObject class. This allows the\n   service advertisement to time out\
    \ within the LDAP directory server.\n   If the LDAP directory server does not\
    \ support the dynamic directory\n   services extension, then advertisement lease\
    \ timeouts must be handled\n   by the SLP agent.\n   While the service advertisement\
    \ schema outlined in this section is\n   primarily for SLP DAs that use LDAP as\
    \ a backing store, if LDAP\n   agents register services using the same format,\
    \ complete\n   interoperability with SLP is achieved.\n"
- title: 6.0 Internationalization Considerations
  contents:
  - "6.0 Internationalization Considerations\n   SLP specifies that an RFC 1766 [13]\
    \ language code accompanies every\n   service advertisement. Language codes for\
    \ service advertisements in\n   LDAP must be represented according to RFC 2596\
    \ [14].\n   RFC 2596 prohibits language codes in DNs, and specifies that a\n \
    \  directory server which does not support language codes must treat an\n   attribute\
    \ with a language code as an unrecognized attributes.\n   According to RFC 2596,\
    \ language codes are appended to attribute names\n   with a semicolon (\";\").\
    \ For example, the following attribute/value\n   pair is in the German locale:\n\
    \      (address;lang-de=44 Bahnhofstrasse, 2365 Weibstadt, Deutschland)\n   An\
    \ attribute with a language tag in a specific locale is considered a\n   separate\
    \ attribute from attributes in other locales.\n   If the service advertisement\
    \ is in the default SLP locale (\"en\", no\n   dialect), then the language code\
    \ need not be appended to the\n   attribute name.\n   SLP queries in locales other\
    \ than the default need not be rewritten\n   to include language tags before being\
    \ submitted to the directory\n   server.  RFC 2596 specifies that all entries\
    \ that match are returned,\n   including those with language tags, without requiring\
    \ the language\n   tags to be explicitly present in the query. The SLP DA can\
    \ then\n   postprocess the result to select the entries from the required\n  \
    \ locale.\n"
- title: 7.0 Security Considerations
  contents:
  - "7.0 Security Considerations\n   SLP authenticators are stored with the service\
    \ advertisement in the\n   DIT, as discussed in Section~7ef{slpdit}. LDAP clients\
    \ need to use\n   LDAP authentication [15] to assure that they are connecting\
    \ with a\n   secure server. In particular, SLP DAs that use LDAP as a back end\n\
    \   store and that implement SLP authentication MUST use LDAP\n   authentication\
    \ to assure that the LDAP entries for their service\n   registrations are secure.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Many thanks are due to Mark Wahl whose detailed and insightful\n\
    \   comments were instrumental in helping improve the technical accuracy\n   of\
    \ this document with respect to LDAP.\n"
- title: 8.0 References
  contents:
  - "8.0 References\n   [1]  Guttman, E., Perkins, C. and J. Kempf, \"Service Templates\
    \ and\n        service: Schemes\", RFC 2609, April 1999.\n   [2]  Wahl, W., Howes,\
    \ T. and S. Kille, \"Lightweight Directory Access\n        Protocol (v3)\", RFC\
    \ 2251, December 1997.\n   [3]  International Telecommunications Union. The Directory:Selected\n\
    \        Attribute Types.  ITU Recommendation X.520. August, 1997.\n   [4]  McLaughlin,\
    \ L., \"Line Printer Daemon Protocol, RFC 1179, August\n        1990.\n   [5]\
    \  Guttman, E., Perkins, C., Veizades, J. and M. Day, \"Service\n        Location\
    \ Protocol Version 2\", RFC 2608, April 1999.\n   [6]  Crocker, D. and P. Overell,\
    \ \"Augmented BNF for Syntax\n        Specifications: ABNF\", RFC 2234, November\
    \ 1997.\n   [7]  Howes, T., \"The String Representation of LDAP Search Filters\"\
    ,\n        RFC 2254, December 1997.\n   [8]  Wahl, W., Coulbeck, A., Howe, T.\
    \ and S. Kille, \"Lightweight\n        Directory Access Protocol (v3): Attribute\
    \ Syntax Definition\",\n        RFC 2252, December 1997.\n   [9]  ITU-T Rec. X.680.\
    \ Abstract Syntax Notation One (ASN.1) -\n        Specification of Basic Notation.\
    \ 1994.\n   [10] Fleming, P., Jones, K., Lewis, H., and McDonald, I., \"Internet\n\
    \        Printing Protocol (IPP): LDAP Schema for Printer Services\", Work\n \
    \       in Progress.\n   [11] Smith, M., \"Definition of an X.500 Attribute Type\
    \ and an Object\n        Class to Hold Uniform Resource Identifiers (URIs)\",\
    \ RFC 2079,\n        January 1997.\n   [12] Yaacovi, Y., Wahl, M. and T. Genovese,\
    \ \"Lightweight Directory\n        Access Protocol (v3): Extensions for Dynamic\
    \ Directory\n        Services\", RFC 2589, May 1999.\n   [13] Alvestrand, H.,\
    \ \"Tags for the Identification of Languages\", RFC\n        1766, December 1997.\n\
    \   [14] Wahl, M. and T. Howes, \"Use of Language Codes in LDAP\", RFC\n     \
    \   2596, May 1999.\n   [15] Wahl, M., Alvestrand, H., Hodges, J. and R. Morgan,\n\
    \        \"Authentication Methods for LDAP\", RFC 2829, May 2000.\n   [16] Bradner,\
    \ S., \"Key Words for Use in RFCs to Indicate Requirement\n        Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [17] Dubuisson, O. ASN.1: Communication between\
    \ Heterogeneous\n        Systems. OSS Nokalva, 2000.\n   [18] http://www.srvloc.org\n"
- title: 9.0 Authors' Addresses
  contents:
  - "9.0 Authors' Addresses\n   James Kempf\n   Sun Microsystems\n   901 San Antonio\
    \ Avenue\n   Palo Alto, CA 94303\n   USA\n   Phone: +1 650 786-5890\n   EMail:\
    \ james.kempf@sun.com\n   Ryan Moats\n   Coreon, Inc.\n   15621 Drexel Circle\n\
    \   Omaha, NE, 68135\n   USA\n   EMail: rmoats@coreon.net\n   Pete St. Pierre\n\
    \   Sun Microsystems\n   901 San Antonio Avenue\n   Palo Alto, CA 94303\n   USA\n\
    \   Phone: +1 415 786-5790\n   EMail: Pete.StPierre@Eng.Sun.COM\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
