- title: __initial_text__
  contents:
  - "                 Definitions of Managed Objects for the\n                   \
    \ Delegation of Management Scripts\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols in the Internet community.\n   In\
    \ particular, it describes a set of managed objects that allow the\n   delegation\
    \ of management scripts to distributed managers.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction .................................................\
    \   2\n   2. The SNMP Management Framework ................................  \
    \ 2\n   3. Overview .....................................................   3\n\
    \   3.1 Terms ......................................................    4\n  \
    \ 4. Requirements and Design Issues ..............................    5\n   4.1\
    \ Script Languages ...........................................    5\n   4.2 Script\
    \ Transfer ............................................    6\n   4.3 Script Execution\
    \ ...........................................    7\n   5. The Structure of the\
    \ MIB .....................................   8\n   5.1 The smLanguageGroup ........................................\
    \    9\n   5.2 The smScriptGroup ..........................................  \
    \  9\n   5.3 The smCodeGroup ............................................   10\n\
    \   5.4 The smLaunchGroup ..........................................   10\n  \
    \ 5.5 The smRunGroup .............................................   11\n   6\
    \ Definitions ..................................................   11\n   7. Usage\
    \ Examples ...............................................  41\n   7.1 Pushing\
    \ a script via SNMP ..................................   41\n   7.2 Pulling a\
    \ script from a URL ................................   42\n   7.3 Modifying an\
    \ existing script ...............................   42\n   7.4 Removing an existing\
    \ script ................................   43\n   7.5 Creating a launch button\
    \ ...................................   43\n   7.6 Launching a script .........................................\
    \   44\n   7.7 Terminating a script .......................................  \
    \ 44\n   7.8 Removing a launch button ...................................   45\n\
    \   8. VACM Configuration Examples ..................................  45\n  \
    \ 8.1 Sandbox for guests .........................................   45\n   8.2\
    \ Sharing scripts ............................................   46\n   8.3 Emergency\
    \ scripts ..........................................   47\n   9. IANA Considerations\
    \ ..........................................  48\n   10. Security Considerations\
    \ .....................................  48\n   11. Intellectual Property .......................................\
    \  49\n   12.  Acknowledgments ............................................. 49\n\
    \   13. References ..................................................  50\n  \
    \ 14. Editors' Addresses ..........................................  52\n   16.\
    \ Full Copyright Statement ....................................  53\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo defines a portion of the Management Information\
    \ Base (MIB)\n   for use with network management protocols in the Internet community.\n\
    \   In particular, it describes a set of managed objects that allow the\n   delegation\
    \ of management scripts to distributed managers.\n   The key words \"MUST\", \"\
    MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in RFC 2119 [21].\n"
- title: 2.  The SNMP Management Framework
  contents:
  - "2.  The SNMP Management Framework\n   The SNMP Management Framework presently\
    \ consists of five major\n   components:\n      o   An overall architecture, described\
    \ in RFC 2271 [1].\n      o   Mechanisms for describing and naming objects and\
    \ events for\n          the purpose of management. The first version of this Structure\n\
    \          of Management Information (SMI) is called SMIv1 and described\n   \
    \       in STD 16, RFC 1155 [2], STD 16, RFC 1212 [3] and RFC 1215\n         \
    \ [4]. The second version, called SMIv2, is described in STD 58,\n          RFC\
    \ 2578 [5], RFC 2579 [6] and RFC 2580 [7].\n      o   Message protocols for transferring\
    \ management information. The\n          first version of the SNMP message protocol\
    \ is called SNMPv1\n          and described in STD 15, RFC 1157 [8]. A second\
    \ version of the\n          SNMP message protocol, which is not an Internet standards\n\
    \          track protocol, is called SNMPv2c and described in RFC 1901\n     \
    \     [9] and RFC 1906 [10]. The third version of the message\n          protocol\
    \ is called SNMPv3 and described in RFC 1906 [10], RFC\n          2272 [11] and\
    \ RFC 2274 [12].\n      o   Protocol operations for accessing management information.\
    \ The\n          first set of protocol operations and associated PDU formats is\n\
    \          described in STD 15, RFC 1157 [8]. A second set of protocol\n     \
    \     operations and associated PDU formats is described in RFC 1905\n       \
    \   [13].\n      o   A set of fundamental applications described in RFC 2273 [14]\n\
    \          and the view-based access control mechanism described in RFC\n    \
    \      2275 [15].\n   Managed objects are accessed via a virtual information store,\
    \ termed\n   the Management Information Base or MIB.  Objects in the MIB are\n\
    \   defined using the mechanisms defined in the SMI.\n   MIB conforming to the\
    \ SMIv1 can be produced through the appropriate\n   translations. The resulting\
    \ translated MIB must be semantically\n   equivalent, except where objects or\
    \ events are omitted because no\n   translation is possible (use of Counter64).\
    \ Some machine readable\n   information in SMIv2 will be converted into textual\
    \ descriptions in\n   SMIv1 during the translation process. However, this loss\
    \ of machine\n   readable information is not considered to change the semantics\
    \ of the\n   MIB.\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   The Script MIB module defined in this memo can be used to delegate\n\
    \   management functions to distributed managers. Management functions\n   are\
    \ defined as management scripts written in a management scripting\n   language.\
    \ This MIB makes no assumptions about the language itself and\n   even allows\
    \ distribution of compiled native code, if an\n   implementation is able to execute\
    \ native code under the control of\n   this MIB.\n   The Script MIB defines a\
    \ standard interface for the delegation of\n   management functions based on the\
    \ Internet management framework. In\n   particular, it provides the following\
    \ capabilities:\n   1.   Capabilities to transfer management scripts to a distributed\n\
    \        manager.\n   2.   Capabilities for initiating, suspending, resuming and\n\
    \        terminating management scripts.\n   3.   Capabilities to transfer arguments\
    \ for management scripts.\n   4.   Capabilities to monitor and control running\
    \ management scripts.\n   5.   Capabilities to transfer the results produced by\
    \ running\n        management scripts.\n   This memo does not address any additional\
    \ topics like the generation\n   of notifications or how to address remote agents\
    \ from a Script MIB\n   implementation.\n"
- title: 3.1.  Terms
  contents:
  - "3.1.  Terms\n   This section defines the terms used throughout this memo.\n \
    \  o    A `distributed manager' is a processing entity which is capable\n    \
    \    of performing network management functions. For the scope of\n        this\
    \ memo, a distributed manager is assumed to implement the\n        Script MIB.\n\
    \   o    A `higher-level manager', or just `manager', is a processing\n      \
    \  entity or human who initiates and controls the operations\n        performed\
    \ by one or more distributed managers.\n   o    A `management script' is a set\
    \ of instructions written in an\n        executable language which implements\
    \ a management function.\n   o    A `management scripting language' is a language\
    \ used to write\n        management scripts. Note, the term scripting language\
    \ does not\n        imply that the language must have the characteristics of\n\
    \        scripting languages (e.g. string orientation, interpretation,\n     \
    \   weak typing). The MIB defined in this memo also allows to\n        control\
    \ management scripts written in arbitrary compiled system\n        programming\
    \ languages.\n   o    A `distributed manager' can be decomposed into an `SNMP\
    \ entity'\n        which implements the Script MIB defined in this memo and the\n\
    \        `runtime system' that executes scripts. The Script MIB sees the\n   \
    \     runtime system as the managed resource which is controlled by\n        the\
    \ MIB.\n        The runtime system can act as an SNMP application, according to\n\
    \        the SNMP architecture defined in RFC 2271 [1]. For example, a\n     \
    \   runtime system which sends SNMP requests to other SNMP entities\n        will\
    \ act as a command generator application. The SNMP\n        applications in the\
    \ runtime system may use the same SNMP engine\n        which also serves the command\
    \ responder application used to\n        implement the Script MIB, but they are\
    \ not required to do so.\n   o    A `launch button' is the conceptual button used\
    \ to start the\n        execution of a management script. It assignes control\
    \ parameters\n        to a management script. In particular, it defines the ownership\n\
    \        of the scripts started from a launch button. The ownership can\n    \
    \    be used by the language runtime system to enforce security\n        profiles\
    \ on a running management script.\n"
- title: 4.  Requirements and Design Issues
  contents:
  - "4.  Requirements and Design Issues\n   This section discusses some general requirements\
    \ that have influenced\n   the design of the Script MIB.\n   o    The Script MIB\
    \ must not make any assumptions about specific\n        languages or runtime systems.\n\
    \   o    The Script MIB must provide mechanisms that help to avoid new\n     \
    \   management problems (e.g. script version problems).\n   o    The Script MIB\
    \ must provide SNMP interfaces to all functions\n        required to delegate\
    \ management scripts. However, other\n        protocols might be used in addition\
    \ if they provide a\n        significant improvement in terms of convenience for\n\
    \        implementation or performance.\n   o    The Script MIB must be organized\
    \ so that access can be\n        controlled effectively by using view-based access\
    \ control [15].\n   The following sections discuss some design issues in more\
    \ detail.\n"
- title: 4.1.  Script Languages
  contents:
  - "4.1.  Script Languages\n   The Script MIB defined in this memo makes no assumption\
    \ about the\n   script language. This MIB can therefore be used in combination\
    \ with\n   different languages (such as Tcl or Java) and/or different versions\n\
    \   of the same language. No assumptions are made about the format in\n   which\
    \ management scripts are transferred.\n   The Script MIB provides access to information\
    \ about the language\n   versions supported by a Script MIB implementation so\
    \ that a manager\n   can learn about the capabilities provided by an implementation.\n\
    \   Languages and language versions are identified as follows:\n   1.   The language\
    \ is identified by an object identifier. Object\n        identifier for well-known\
    \ languages will be registered by the\n        Internet Assigned Numbers Authority\
    \ (IANA). Enterprise specific\n        languages can also be registered in the\
    \ enterprise specific OID\n        subtree.\n   2.   A particular version of a\
    \ language is identified by a language\n        version number. The combination\
    \ of a language object identifier\n        and a language version is in most cases\
    \ sufficient to decide\n        whether a script can be executed or not.\n   3.\
    \   Different implementations of the same language version might\n        have\
    \ differences due to ambiguities in the language definition\n        or additional\
    \ language features provided by an implementor. An\n        additional object\
    \ identifier value is provided which identifies\n        the organization which\
    \ provides the implementation of a\n        language. This might be used by scripts\
    \ that require a\n        particular implementation of a language.\n   4.   Finally,\
    \ there might be different versions of a language\n        implementation. A version\
    \ number for the language implementation\n        is provided so that the manager\
    \ can also distinguish between\n        different implementations from the same\
    \ organization of a\n        particular language version.\n   The version numbers\
    \ can either be used by a manager to select the\n   language version required\
    \ to execute a particular script or to select\n   a script that fits the language\
    \ versions supported by a particular\n   Script MIB implementation.\n   An additional\
    \ table lists language extensions that provide features\n   not provided by the\
    \ core language. Language extensions are usually\n   required to turn a general\
    \ purpose language into a management\n   language. In many cases, language extensions\
    \ will come in the form of\n   libraries that provide capabilities like sending\
    \ SNMP requests to\n   remote SNMP agents or accessing the local MIB instrumentation.\
    \ Every\n   extension is associated with a language and carries its own version\n\
    \   numbers.\n"
- title: 4.2.  Script Transfer
  contents:
  - "4.2.  Script Transfer\n   There are two different ways to transfer management\
    \ scripts to a\n   distributed manager. The first approach requires that the manager\n\
    \   pushes the script to the distributed manager. This is therefore\n   called\
    \ the `push model'. The second approach is the `pull model'\n   where the manager\
    \ tells the distributed manager the location of the\n   script and the distributed\
    \ manager retrieves the script itself.\n   The MIB defined in this memo supports\
    \ both models. The `push model'\n   is realized by a table which allows a manager\
    \ to write scripts by\n   sending a sequence of SNMP set requests. The script\
    \ can be split into\n   several fragments in order to deal with SNMP message size\n\
    \   limitations.\n   The `pull model' is realized by the use of Uniform Resource\
    \ Locators\n   (URLs) [17] that point to the script source. The manager writes\
    \ the\n   URL which points to the script source to the distributed manager by\n\
    \   sending an SNMP set request. The distributed manager is then\n   responsible\
    \ for retrieving the document using the protocol specified\n   in the URL. This\
    \ allows the use of protocols like FTP [18] or HTTP\n   [19] to transfer large\
    \ management scripts efficiently.\n   The Script MIB also allows management scripts\
    \ that are hard-wired\n   into the Script MIB implementation. Built-in scripts\
    \ can either be\n   implemented in a language runtime system, or they can be built\n\
    \   natively into the Script MIB implementation. The implementation of\n   the\
    \ `push model' or the `pull model' is not required.\n   Scripts can be stored\
    \ in non-volatile storage. This allows a\n   distributed manager to restart scripts\
    \ if it is restarted (off-line\n   restart). A manager is not required to push\
    \ scripts back into the\n   distributed manager after a restart if the script\
    \ is backed up in\n   non-volatile storage.\n   Every script is identified by\
    \ an administratively assigned name. This\n   name may be used to derive the name\
    \ which is used to access the\n   script in non-volatile storage. This mapping\
    \ is implementation\n   specific. However, the mapping must ensure that the Script\
    \ MIB\n   implementation can handle scripts with the same administrative name\n\
    \   owned by different managers. One way to achieve this is to use the\n   script\
    \ owner in addition to the script name in order to derive the\n   internal name\
    \ used to refer to a particular script in non-volatile\n   storage.\n"
- title: 4.3.  Script Execution
  contents:
  - "4.3.  Script Execution\n   The Script MIB permits execution of several instances\
    \ of the same or\n   different management scripts. Script arguments are passed\
    \ as OCTET\n   STRING values. Scripts return a single result value which is also\
    \ an\n   OCTET STRING value. The semantic interpretation of result values is\n\
    \   left to the invoking manager or other management scripts. A script\n   invoker\
    \ must understand the format and semantics of both the\n   arguments and the results\
    \ of the scripts that it invokes.\n   Scripts can also export complex results\
    \ through a MIB interface. This\n   allows a management application to access\
    \ and use script results in\n   the same manner as it processes any other MIB\
    \ data. However, the\n   Script MIB does not provide any special support for the\n\
    \   implementation of MIBs through scripts.\n   Runtime errors terminate active\
    \ scripts. An exit code and a human\n   readable error message is left in the\
    \ MIB. A notification containing\n   the exit code, the error message and a timestamp\
    \ is generated when a\n   script terminates with an error exit code.\n   Script\
    \ arguments and results do not have any size limitations other\n   than the limits\
    \ imposed by the SMI and the SNMP protocol. However,\n   implementations of this\
    \ MIB might have further restrictions. A script\n   designer might therefore choose\
    \ to return the results via other\n   mechanisms if the script results can be\
    \ very large. One possibility\n   is to return a URL as a script result which\
    \ points to the file\n   containing the script output.\n   Executing scripts have\
    \ a status object attached which allows script\n   execution to be suspended,\
    \ resumed, or aborted.  The precise\n   semantics of the suspend and resume operations\
    \ are language and\n   runtime system dependent. Some runtime systems may choose\
    \ to not\n   implement the suspend/resume operations.\n   A history of finished\
    \ scripts is kept in the MIB. A script invoker\n   can collect results at a later\
    \ point in time (offline operation).\n   Control objects can be used to control\
    \ how entries in the history are\n   aged out if the table fills up.\n"
- title: 5.  The Structure of the MIB
  contents:
  - "5.  The Structure of the MIB\n   This section presents the structure of the MIB.\
    \ The objects are\n   arranged into the following groups:\n   o    language group\
    \ (smLanguageGroup)\n   o    script group (smScriptGroup)\n   o    script code\
    \ group (smCodeGroup)\n   o    script launch group (smLaunchGroup)\n   o    running\
    \ script group (smRunGroup)\n"
- title: 5.1.  The smLanguageGroup
  contents:
  - "5.1.  The smLanguageGroup\n   The smLanguageGroup is used to provide information\
    \ about the\n   languages and the language extensions supported by a Script MIB\n\
    \   implementation.  This group includes two tables.  The smLangTable\n   lists\
    \ all languages supported by a Script MIB implementation and the\n   smExtsnTable\
    \ lists the extensions that are available for a given\n   language.\n"
- title: 5.2.  The smScriptGroup
  contents:
  - "5.2.  The smScriptGroup\n   The smScriptGroup consists of a single table, called\
    \ the\n   smScriptTable. The smScriptTable lists all scripts known to a Script\n\
    \   MIB implementation. The smScriptTable contains objects that allow the\n  \
    \ following operations:\n   o    download scripts from a URL (pull model)\n  \
    \ o    read scripts from local non-volatile storage\n   o    store scripts in\
    \ local non-volatile storage\n   o    delete scripts from local non-volatile storage\n\
    \   o    list permanent scripts (that can not be changed or removed)\n   o   \
    \ read and modify the script status (enabled, disabled, editing)\n   A status\
    \ object called smScriptOperStatus allows a manager to obtain\n   the current\
    \ status of a script. It is also used to provide an error\n   indication if an\
    \ attempt to invoke one of the operations listed above\n   fails. The status change\
    \ of a script can be requested by modifying\n   the associated smScriptAdminStatus\
    \ object.\n   The source of a script is defined by the smScriptSource object.\
    \ This\n   object may contain a URL pointing to a remote location which provides\n\
    \   access to the management script. The script source is read from the\n   smCodeTable\
    \ (described below) or from non-volatile storage if the\n   smScriptSource object\
    \ contains an empty URL. The smScriptStorageType\n   object is used to distinguish\
    \ between scripts read from non-volatile\n   storage and scripts read from the\
    \ smCodeTable.\n   Scripts are automatically loaded once the smScriptAdminStatus\
    \ object\n   is set to `enabled'.  Loading a script includes retrieving the script\n\
    \   (probably from a remote location), compiling the script for languages\n  \
    \ that require a compilation step, and making the code available to the\n   runtime\
    \ system.  The smScriptOperStatus object is used to indicate\n   the status of\
    \ the loading process. This object will start in the\n   state `retrieving', switch\
    \ to the state `compiling' and finally reach\n   the state `enabled'. Errors during\
    \ the retrieval or compilation phase\n   will result in an error state such as\
    \ `compilationFailed'.\n"
- title: 5.3.  The smCodeGroup
  contents:
  - "5.3.  The smCodeGroup\n   The smCodeGroup consists of a single table, called\
    \ the smCodeTable,\n   which provides the ability to transfer and modify scripts\
    \ via SNMP\n   set requests.  In particular, the smCodeTable allows the following\n\
    \   operations:\n   o    download scripts via SNMP (push model)\n   o    modify\
    \ scripts via SNMP (editing)\n   The smCodeTable lists the code of a script. A\
    \ script can be\n   fragmented over multiple rows of the smCodeTable in order\
    \ to handle\n   SNMP message size limitations. Modifications of the smCodeTable\
    \ are\n   only possible if the associated smScriptOperStatus object has the\n\
    \   value `editing'.  The Script MIB implementation reloads the modified\n   script\
    \ code once the smScriptOperStatus changes to `enabled' again.\n   The implementation\
    \ of the smCodeGroup is optional.\n"
- title: 5.4.  The smLaunchGroup
  contents:
  - "5.4.  The smLaunchGroup\n   The smLaunchGroup contains a single table, the smLaunchTable.\
    \ An\n   entry in the smLaunchTable represents a launch button which can be\n\
    \   used to start a script. The smLaunchTable allows the following\n   operations:\n\
    \   o    associate a script with an owner used during script execution\n   o \
    \   provide arguments and parameters for script invocation\n   o    invoke scripts\
    \ with a single set operation\n   The smLaunchTable describes scripts and their\
    \ parameters that are\n   ready to be launched. An entry in the smLaunchTable\
    \ attaches an\n   argument to a script and control values which, for example,\
    \ define\n   the maximum number of times that a script invoked from a particular\n\
    \   row in the smLaunchTable may be running concurrently.\n   An entry in the\
    \ smLaunchTable also defines the owner which will be\n   used to associate permissions\
    \ with the script execution.\n"
- title: 5.5.  The smRunGroup
  contents:
  - "5.5.  The smRunGroup\n   The smRunGroup contains a single table, called the smRunTable,\
    \ which\n   lists all scripts that are currently running or have terminated\n\
    \   recently. The smRunTable contains objects that allow the following\n   operations:\n\
    \   o    retrieve status information from running scripts\n   o    control running\
    \ scripts (suspend, resume, abort)\n   o    retrieve results from recently terminated\
    \ scripts\n   o    control the remaining maximum lifetime of a running script\n\
    \   o    control how long script results are accessible\n   Every row in the smRunTable\
    \ contains the argument passed during\n   script invocation, the result produced\
    \ by the script and the script\n   exit code.  The smRunTable also provides information\
    \ about the\n   current run state as well as start and end time-stamps. There\
    \ are\n   three writable objects in the smRunTable. The smRunLifeTime object\n\
    \   defines the maximum time a running script may run before it is\n   terminated\
    \ by the Script MIB implementation. The smRunExpireTime\n   object defines the\
    \ time that a completed script can stay in the\n   smRunTable before it is aged\
    \ out. The smRunControl object allows\n   running scripts to be suspended, resumed,\
    \ or aborted.\n"
- title: 6.  Definitions
  contents:
  - "6.  Definitions\n   DISMAN-SCRIPT-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n   \
    \    MODULE-IDENTITY, OBJECT-TYPE, NOTIFICATION-TYPE,\n       Integer32, Unsigned32,\
    \ mib-2\n           FROM SNMPv2-SMI\n       RowStatus, TimeInterval, DateAndTime,\
    \ StorageType, DisplayString\n           FROM SNMPv2-TC\n       MODULE-COMPLIANCE,\
    \ OBJECT-GROUP, NOTIFICATION-GROUP\n           FROM SNMPv2-CONF\n       SnmpAdminString\n\
    \           FROM SNMP-FRAMEWORK-MIB;\n   scriptMIB MODULE-IDENTITY\n       LAST-UPDATED\
    \ \"9902221800Z\"\n       ORGANIZATION \"IETF Distributed Management Working Group\"\
    \n       CONTACT-INFO\n           \"David B. Levi\n            Nortel Networks\n\
    \            4401 Great America Parkway\n            Santa Clara, CA 95052-8185\n\
    \            U.S.A.\n            Tel: +1 423 686 0432\n            E-mail: dlevi@nortelnetworks.com\n\
    \            Juergen Schoenwaelder\n            TU Braunschweig\n            Bueltenweg\
    \ 74/75\n            38106 Braunschweig\n            Germany\n            Tel:\
    \ +49 531 391-3283\n            E-mail: schoenw@ibr.cs.tu-bs.de\"\n       DESCRIPTION\n\
    \           \"This MIB module defines a set of objects that allow to\n       \
    \     delegate management scripts to distributed managers.\"\n       ::= { mib-2\
    \ 64 }\n   --\n   -- The groups defined within this MIB module:\n   --\n   smObjects\
    \       OBJECT IDENTIFIER ::= { scriptMIB 1 }\n   smNotifications OBJECT IDENTIFIER\
    \ ::= { scriptMIB 2 }\n   smConformance   OBJECT IDENTIFIER ::= { scriptMIB 3\
    \ }\n   --\n   -- Script language and language extensions.\n   --\n   -- This\
    \ group defines tables which list the languages and the\n   -- language extensions\
    \ supported by a script MIB implementation.\n   -- Languages are uniquely identified\
    \ by object identifier values.\n   --\n   smLangTable OBJECT-TYPE\n       SYNTAX\
    \      SEQUENCE OF SmLangEntry\n       MAX-ACCESS  not-accessible\n       STATUS\
    \      current\n       DESCRIPTION\n           \"This table lists supported script\
    \ languages.\"\n       ::= { smObjects 1 }\n   smLangEntry OBJECT-TYPE\n     \
    \  SYNTAX      SmLangEntry\n       MAX-ACCESS  not-accessible\n       STATUS \
    \     current\n       DESCRIPTION\n           \"An entry describing a particular\
    \ language.\"\n       INDEX { smLangIndex }\n       ::= { smLangTable 1 }\n  \
    \ SmLangEntry ::= SEQUENCE {\n       smLangIndex         Integer32,\n       smLangLanguage\
    \      OBJECT IDENTIFIER,\n       smLangVersion       SnmpAdminString,\n     \
    \  smLangVendor        OBJECT IDENTIFIER,\n       smLangRevision      SnmpAdminString,\n\
    \       smLangDescr         SnmpAdminString\n   }\n   smLangIndex OBJECT-TYPE\n\
    \       SYNTAX      Integer32 (1..2147483647)\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The locally arbitrary,\
    \ but unique identifier associated\n            with this language entry.\n  \
    \          The value is expected to remain constant at least from one\n      \
    \      re-initialization of the entity's network management system\n         \
    \   to the next re-initialization.\n            Note, the data type and the range\
    \ of this object must be\n            consistent with the definition of smScriptLanguage.\"\
    \n       ::= { smLangEntry 1 }\n   smLangLanguage OBJECT-TYPE\n       SYNTAX \
    \     OBJECT IDENTIFIER\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The globally unique identification of the language.\"\
    \n       ::= { smLangEntry 2 }\n   smLangVersion OBJECT-TYPE\n       SYNTAX  \
    \    SnmpAdminString (SIZE (0..32))\n       MAX-ACCESS  read-only\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The version number of the language.\
    \ The zero-length string\n            shall be used if the language does not have\
    \ a version\n            number.\n            It is suggested that the version\
    \ number consist of one or\n            more decimal numbers separated by dots,\
    \ where the first\n            number is called the major version number.\"\n\
    \       ::= { smLangEntry 3 }\n   smLangVendor OBJECT-TYPE\n       SYNTAX    \
    \  OBJECT IDENTIFIER\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n           \"An object identifer which identifies the vendor\
    \ who\n            provides the implementation of the language. This object\n\
    \            identifer SHALL point to the object identifier directly\n       \
    \     below the enterprise object identifier {1 3 6 1 4 1}\n            allocated\
    \ for the vendor. The value must be the object\n            identifier {0 0} if\
    \ the vendor is not known.\"\n       ::= { smLangEntry 4 }\n   smLangRevision\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString (SIZE (0..32))\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n           \"The\
    \ version number of the language implementation.\n            The value of this\
    \ object must be an empty string if\n            version number of the implementation\
    \ is unknown.\n            It is suggested that the value consist of one or more\n\
    \            decimal numbers separated by dots, where the first\n            number\
    \ is called the major version number.\"\n       ::= { smLangEntry 5 }\n   smLangDescr\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"A textual description\
    \ of the language.\"\n       ::= { smLangEntry 6 }\n   smExtsnTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF SmExtsnEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This table lists\
    \ supported language extensions.\"\n       ::= { smObjects 2 }\n   smExtsnEntry\
    \ OBJECT-TYPE\n       SYNTAX      SmExtsnEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"An entry describing\
    \ a particular language extension.\"\n       INDEX { smLangIndex, smExtsnIndex\
    \ }\n       ::= { smExtsnTable 1 }\n   SmExtsnEntry ::= SEQUENCE {\n       smExtsnIndex\
    \        Integer32,\n       smExtsnExtension    OBJECT IDENTIFIER,\n       smExtsnVersion\
    \      SnmpAdminString,\n       smExtsnVendor       OBJECT IDENTIFIER,\n     \
    \  smExtsnRevision     SnmpAdminString,\n       smExtsnDescr        SnmpAdminString\n\
    \   }\n   smExtsnIndex OBJECT-TYPE\n       SYNTAX      Integer32 (1..2147483647)\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The locally arbitrary, but unique identifier associated\n      \
    \      with this language extension entry.\n            The value is expected\
    \ to remain constant at least from one\n            re-initialization of the entity's\
    \ network management system\n            to the next re-initialization.\"\n  \
    \     ::= { smExtsnEntry 1}\n   smExtsnExtension OBJECT-TYPE\n       SYNTAX  \
    \    OBJECT IDENTIFIER\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The globally unique identification of the language\n\
    \            extension.\"\n       ::= { smExtsnEntry 2 }\n   smExtsnVersion OBJECT-TYPE\n\
    \       SYNTAX      SnmpAdminString (SIZE (0..32))\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The version number\
    \ of the language extension.\n            It is suggested that the version number\
    \ consist of one or\n            more decimal numbers separated by dots, where\
    \ the first\n            number is called the major version number.\"\n      \
    \ ::= { smExtsnEntry 3 }\n   smExtsnVendor OBJECT-TYPE\n       SYNTAX      OBJECT\
    \ IDENTIFIER\n       MAX-ACCESS  read-only\n       STATUS      current\n     \
    \  DESCRIPTION\n           \"An object identifer which identifies the vendor who\n\
    \            provides the implementation of the extension. The\n            object\
    \ identifer value should point to the OID node\n            directly below the\
    \ enterprise OID {1 3 6 1 4 1}\n            allocated for the vendor. The value\
    \ must by the object\n            identifier {0 0} if the vendor is not known.\"\
    \n       ::= { smExtsnEntry 4 }\n   smExtsnRevision OBJECT-TYPE\n       SYNTAX\
    \      SnmpAdminString (SIZE (0..32))\n       MAX-ACCESS  read-only\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The version number of the extension\
    \ implementation.\n            The value of this object must be an empty string\
    \ if\n            version number of the implementation is unknown.\n         \
    \   It is suggested that the value consist of one or more\n            decimal\
    \ numbers separated by dots, where the first\n            number is called the\
    \ major version number.\"\n       ::= { smExtsnEntry 5 }\n   smExtsnDescr OBJECT-TYPE\n\
    \       SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-only\n       STATUS\
    \      current\n       DESCRIPTION\n           \"A textual description of the\
    \ language extension.\"\n       ::= { smExtsnEntry 6 }\n   --\n   -- Scripts known\
    \ by the Script MIB implementation.\n   --\n   -- This group defines a table which\
    \ lists all known scripts.\n   -- Scripts can be added and removed through manipulation\
    \ of the\n   -- smScriptTable.\n   --\n   smScriptObjects OBJECT IDENTIFIER ::=\
    \ { smObjects 3 }\n   smScriptTable OBJECT-TYPE\n       SYNTAX      SEQUENCE OF\
    \ SmScriptEntry\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"This table lists and describes locally known\
    \ scripts.\"\n       ::= { smScriptObjects 1 }\n   smScriptEntry OBJECT-TYPE\n\
    \       SYNTAX      SmScriptEntry\n       MAX-ACCESS  not-accessible\n       STATUS\
    \      current\n       DESCRIPTION\n           \"An entry describing a particular\
    \ script. Every script that\n            is stored in non-volatile memory is required\
    \ to appear in\n            this script table.\"\n       INDEX { smScriptOwner,\
    \ smScriptName }\n       ::= { smScriptTable 1 }\n   SmScriptEntry ::= SEQUENCE\
    \ {\n       smScriptOwner       SnmpAdminString,\n       smScriptName        SnmpAdminString,\n\
    \       smScriptDescr       SnmpAdminString,\n       smScriptLanguage    Integer32,\n\
    \       smScriptSource      DisplayString,\n       smScriptAdminStatus INTEGER,\n\
    \       smScriptOperStatus  INTEGER,\n       smScriptStorageType StorageType,\n\
    \       smScriptRowStatus   RowStatus\n   }\n   smScriptOwner OBJECT-TYPE\n  \
    \     SYNTAX      SnmpAdminString (SIZE (0..32))\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The manager who\
    \ owns this row in the smScriptTable.\"\n       ::= { smScriptEntry 1 }\n   smScriptName\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The locally-unique,\
    \ administratively assigned name for this\n            script. This object allows\
    \ an smScriptOwner to have multiple\n            entries in the smScriptTable.\n\
    \            This value of this object may be used to derive the name\n      \
    \      (e.g. a file name) which is used by the Script MIB\n            implementation\
    \ to access the script in non-volatile\n            storage. The details of this\
    \ mapping are implementation\n            specific. However, the mapping needs\
    \ to ensure that scripts\n            created by different owners with the same\
    \ script name do not\n            map to the same name in non-volatile storage.\"\
    \n       ::= { smScriptEntry 2 }\n   smScriptDescr OBJECT-TYPE\n       SYNTAX\
    \      SnmpAdminString\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"A description of the purpose of the script.\"\
    \n       ::= { smScriptEntry 3 }\n   smScriptLanguage OBJECT-TYPE\n       SYNTAX\
    \      Integer32 (0..2147483647)\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The value of this object type\
    \ identifies an entry in the\n            smLangTable which is used to execute\
    \ this script.\n            The special value 0 may be used by hard-wired scripts\n\
    \            that can not be modified and that are executed by\n            internal\
    \ functions.\n            Note, the data type and the range of this object must\
    \ be\n            consistent with the definition of smLangIndex.\"\n       ::=\
    \ { smScriptEntry 4 }\n   smScriptSource OBJECT-TYPE\n       SYNTAX      DisplayString\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object either contains a reference to the script\n        \
    \    source or an empty string. A reference must be given\n            in the\
    \ form of a Uniform Resource Locator (URL) as\n            defined in RFC 2396.\
    \ The allowed character sets and the\n            encoding rules defined in RFC\
    \ 2396 section 2 apply.\n            When the smScriptAdminStatus object is set\
    \ to `enabled',\n            the Script MIB implementation will `pull' the script\n\
    \            source from the URL contained in this object if the URL\n       \
    \     is not empty.\n            An empty URL indicates that the script source\
    \ is loaded\n            from local storage. The script is read from the smCodeTable\n\
    \            if the value of smScriptStorageType is volatile. Otherwise,\n   \
    \         the script is read from non-volatile storage.\n            Note: This\
    \ document does not mandate implementation of any\n            specific URL scheme.\
    \ A attempt to load a script from a\n            nonsupported URL scheme will\
    \ cause the smScriptOperStatus\n            to report an `unknownProtocol' error.\n\
    \            Set requests to change this object are invalid if the\n         \
    \   value of smScriptOperStatus is `enabled', `editing',\n            `retrieving'\
    \ or `compiling' and will result in an\n            inconsistentValue error.\"\
    \n       DEFVAL { ''H }\n       ::= { smScriptEntry 5 }\n   smScriptAdminStatus\
    \ OBJECT-TYPE\n       SYNTAX      INTEGER {\n                       enabled(1),\n\
    \                       disabled(2),\n                       editing(3)\n    \
    \               }\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The value of this object indicates the desired\
    \ status of\n            the script. See the definition of smScriptOperStatus\
    \ for\n            a description of the values.\n            When the smScriptAdminStatus\
    \ object is set to `enabled' and\n            the smScriptOperStatus is `disabled'\
    \ or one of the error\n            states, the Script MIB implementation will\
    \ `pull' the script\n            source from the URL contained in the smScriptSource\
    \ object\n            if the URL is not empty.\"\n       DEFVAL { disabled }\n\
    \       ::= { smScriptEntry 6 }\n   smScriptOperStatus OBJECT-TYPE\n       SYNTAX\
    \      INTEGER {\n                       enabled(1),\n                       disabled(2),\n\
    \                       editing(3),\n                       retrieving(4),\n \
    \                      compiling(5),\n                       noSuchScript(6),\n\
    \                       accessDenied(7),\n                       wrongLanguage(8),\n\
    \                       wrongVersion(9),\n                       compilationFailed(10),\n\
    \                       noResourcesLeft(11),\n                       unknownProtocol(12),\n\
    \                       protocolFailure(13),\n                       genericError(14)\n\
    \                   }\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The actual status of the script in the runtime\
    \ system. The\n            value of this object is only meaningful when the value\
    \ of the\n            smScriptRowStatus object is `active'.\n            The smScriptOperStatus\
    \ object may have the following values:\n            - `enabled' indicates that\
    \ the script is available and can\n               be started by a launch table\
    \ entry.\n            - `disabled' indicates that the script can not be used.\n\
    \            - `editing' indicates that the script can be modified in the\n  \
    \            smCodeTable.\n            - `retrieving' indicates that the script\
    \ is currently being\n              loaded from non-volatile storage or a remote\
    \ system.\n            - `compiling' indicates that the script is currently being\n\
    \              compiled by the runtime system.\n            - `noSuchScript' indicates\
    \ that the script does not exist\n              at the smScriptSource.\n     \
    \       - `accessDenied' indicates that the script can not be loaded\n       \
    \       from the smScriptSource due to a lack of permissions.\n            - `wrongLanguage'\
    \ indicates that the script can not be loaded\n              from the smScriptSource\
    \ because of a language mismatch.\n            - `wrongVersion' indicates that\
    \ the script can not be loaded\n              from the smScriptSource because\
    \ of a language version\n              mismatch.\n            - `compilationFailed'\
    \ indicates that the compilation failed.\n            - `noResourcesLeft' indicates\
    \ that the runtime system does\n              not have enough resources to load\
    \ the script.\n            - `unknownProtocol' indicates that the script could\
    \ not be\n              loaded from the smScriptSource because the requested\n\
    \              protocol is not supported.\n            - `protocolFailure' indicates\
    \ that the script could not be\n              loaded from the smScriptSource because\
    \ of a protocol\n              failure.\n            - `genericError' indicates\
    \ that the script could not be\n              loaded due to an error condition\
    \ not listed above.\n            The `retrieving' and `compiling' states are transient\
    \ states\n            which will either lead to one of the error states or the\n\
    \            `enabled' state. The `disabled' and `editing' states are\n      \
    \      administrative states which are only reached by explicit\n            management\
    \ operations.\n            All launch table entries that refer to this script\
    \ table\n            entry shall have an smLaunchOperStatus value of `disabled'\n\
    \            when the value of this object is not `enabled'.\"\n       DEFVAL\
    \ { disabled }\n       ::= { smScriptEntry 7 }\n   smScriptStorageType OBJECT-TYPE\n\
    \       SYNTAX      StorageType\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"This object defines whether this\
    \ row and the script\n            controlled by this row are kept in volatile\
    \ storage and\n            lost upon reboot or if this row is backed up by\n \
    \           non-volatile or permanent storage.\n            The script controlled\
    \ by this row is written into local\n            non-volatile storage if the following\
    \ condition becomes\n            true:\n            (a) the URL contained in the\
    \ smScriptSource object is empty\n                and\n            (b) the smScriptStorageType\
    \ is `nonVolatile'\n                and\n            (c) the smScriptOperStatus\
    \ is `enabled'\n            Setting this object to `volatile' removes a script\
    \ from\n            non-volatile storage if the script controlled by this row\n\
    \            has been in non-volatile storage before. Attempts to set\n      \
    \      this object to permanent will always fail with an\n            inconsistentValue\
    \ error.\n            The value of smScriptStorageType is only meaningful if the\n\
    \            value of the corresponding RowStatus object is `active'.\n      \
    \      If smScriptStorageType has the value permanent(4), then all\n         \
    \   objects whose MAX-ACCESS value is read-create must be\n            writable,\
    \ with the exception of the smScriptStorageType and\n            smScriptRowStatus\
    \ objects, which shall be read-only.\"\n       DEFVAL { volatile }\n       ::=\
    \ { smScriptEntry 8 }\n   smScriptRowStatus OBJECT-TYPE\n       SYNTAX      RowStatus\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"A control that allows entries to be added and removed from\n   \
    \         this table.\n            Changing the smScriptRowStatus from `active'\
    \ to `notInService'\n            will remove the associated script from the runtime\
    \ system.\n            The value of smScriptOperStatus will be reset to `disabled'.\n\
    \            Deleting conceptual rows from this table includes the\n         \
    \   deletion of all resources associated with this row. This\n            implies\
    \ that a script stored in non-volatile storage is\n            removed from non-volatile\
    \ storage.\n            An entry may not exist in the `active' state unless all\n\
    \            required objects in the entry have appropriate values. Rows\n   \
    \         that are not complete or not in service are not known by the\n     \
    \       script runtime system.\n            Attempts to `destroy' a row or to\
    \ set a row `notInService'\n            while the script is executing will result\
    \ in an\n            inconsistentValue error.\n            Attempts to `destroy'\
    \ a row or to set a row `notInService'\n            where the value of the smScriptStorageType\
    \ object is\n            `permanent' or `readOnly' will result in an\n       \
    \     inconsistentValue error.\"\n       ::= { smScriptEntry 9 }\n   --\n   --\
    \ Access to script code via SNMP\n   --\n   -- The smCodeTable allows script code\
    \ to be read and modified\n   -- via SNMP.\n   --\n   smCodeTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF SmCodeEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This table contains\
    \ the script code for scripts that are\n            written via SNMP write operations.\"\
    \n       ::= { smScriptObjects 2 }\n   smCodeEntry OBJECT-TYPE\n       SYNTAX\
    \      SmCodeEntry\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"An entry describing a particular fragment of\
    \ a script.\"\n       INDEX { smScriptOwner, smScriptName, smCodeIndex }\n   \
    \    ::= { smCodeTable 1 }\n   SmCodeEntry ::= SEQUENCE {\n       smCodeIndex\
    \         Unsigned32,\n       smCodeText          OCTET STRING,\n       smCodeRowStatus\
    \     RowStatus\n   }\n   smCodeIndex OBJECT-TYPE\n       SYNTAX      Unsigned32\
    \ (1..4294967295)\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The index value identifying this code fragment.\"\
    \n       ::= { smCodeEntry 1 }\n   smCodeText OBJECT-TYPE\n       SYNTAX     \
    \ OCTET STRING (SIZE (1..1024))\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The code that makes up a fragment\
    \ of a script. The format\n            of this code fragment depends on the script\
    \ language which\n            is identified by the associated smScriptLanguage\
    \ object.\"\n       ::= { smCodeEntry 2 }\n   smCodeRowStatus OBJECT-TYPE\n  \
    \     SYNTAX      RowStatus\n       MAX-ACCESS  read-create\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"A control that allows entries to\
    \ be added and removed from\n            this table.\"\n       ::= { smCodeEntry\
    \ 3 }\n   --\n   -- Script execution.\n   --\n   -- This group defines tables\
    \ which allow script execution to be\n   -- initiated, suspended, resumed, and\
    \ terminated.  It also provides\n   -- a mechanism for keeping a history of recent\
    \ script executions\n   -- and their results.\n   --\n   smRunObjects OBJECT IDENTIFIER\
    \ ::= { smObjects 4 }\n   smLaunchTable OBJECT-TYPE\n       SYNTAX      SEQUENCE\
    \ OF SmLaunchEntry\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"This table lists and describes scripts that\
    \ are ready\n            to be executed together with their parameters.\"\n  \
    \     ::= { smRunObjects 1 }\n   smLaunchEntry OBJECT-TYPE\n       SYNTAX    \
    \  SmLaunchEntry\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"An entry describing a particular executable\
    \ script.\"\n       INDEX { smLaunchOwner, smLaunchName }\n       ::= { smLaunchTable\
    \ 1 }\n   SmLaunchEntry ::= SEQUENCE {\n       smLaunchOwner               SnmpAdminString,\n\
    \       smLaunchName                SnmpAdminString,\n       smLaunchScriptOwner\
    \         SnmpAdminString,\n       smLaunchScriptName          SnmpAdminString,\n\
    \       smLaunchArgument            OCTET STRING,\n       smLaunchMaxRunning \
    \         Unsigned32,\n       smLaunchMaxCompleted        Unsigned32,\n      \
    \ smLaunchLifeTime            TimeInterval,\n       smLaunchExpireTime       \
    \   TimeInterval,\n       smLaunchStart               Integer32,\n       smLaunchControl\
    \             INTEGER,\n       smLaunchAdminStatus         INTEGER,\n       smLaunchOperStatus\
    \          INTEGER,\n       smLaunchRunIndexNext        Integer32,\n       smLaunchStorageType\
    \         StorageType,\n       smLaunchRowStatus           RowStatus\n   }\n \
    \  smLaunchOwner OBJECT-TYPE\n       SYNTAX      SnmpAdminString (SIZE (0..32))\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The manager who owns this row in the smLaunchTable. Every\n    \
    \        instance of a running script started from a particular entry\n      \
    \      in the smLaunchTable (i.e. entries in the smRunTable) will be\n       \
    \     owned by the same smLaunchOwner used to index the entry in\n           \
    \ the smLaunchTable. This owner is not necessarily the same as\n            the\
    \ owner of the script itself (smLaunchScriptOwner).\"\n       ::= { smLaunchEntry\
    \ 1 }\n   smLaunchName OBJECT-TYPE\n       SYNTAX      SnmpAdminString (SIZE (1..32))\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The locally-unique, administratively assigned name for this\n  \
    \          launch table entry. This object allows an smLaunchOwner to\n      \
    \      have multiple entries in the smLaunchTable. The smLaunchName\n        \
    \    is an arbitrary name that must be different from any other\n            smLaunchTable\
    \ entries with the same smLaunchOwner but can be\n            the same as other\
    \ entries in the smLaunchTable with different\n            smLaunchOwner values.\
    \ Note that the value of smLaunchName\n            is not related in any way to\
    \ the name of the script being\n            launched.\"\n       ::= { smLaunchEntry\
    \ 2 }\n   smLaunchScriptOwner OBJECT-TYPE\n       SYNTAX      SnmpAdminString\
    \ (SIZE (0..32))\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The value of this object in combination with\
    \ the value of\n            smLaunchScriptName identifies the script that can\
    \ be\n            launched from this smLaunchTable entry. Attempts to write\n\
    \            this object will fail with an inconsistentValue error if\n      \
    \      the value of smLaunchOperStatus is `enabled'.\"\n       ::= { smLaunchEntry\
    \ 3 }\n   smLaunchScriptName OBJECT-TYPE\n       SYNTAX      SnmpAdminString (SIZE\
    \ (0..32))\n       MAX-ACCESS  read-create\n       STATUS      current\n     \
    \  DESCRIPTION\n           \"The value of this object in combination with the\
    \ value of\n            the smLaunchScriptOwner identifies the script that can\
    \ be\n            launched from this smLaunchTable entry. Attempts to write\n\
    \            this objects will fail with an inconsistentValue error if\n     \
    \       the value of smLaunchOperStatus is `enabled'.\"\n       ::= { smLaunchEntry\
    \ 4 }\n   smLaunchArgument OBJECT-TYPE\n       SYNTAX      OCTET STRING\n    \
    \   MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The argument supplied to the script. When a script is\n        \
    \    invoked, the value of this object is used to initialize\n            the\
    \ smRunArgument object.\"\n       DEFVAL { ''H }\n       ::= { smLaunchEntry 5\
    \ }\n   smLaunchMaxRunning OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..4294967295)\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The maximum number of concurrently running scripts that may\n  \
    \          be invoked from this entry in the smLaunchTable. Lowering the\n   \
    \         current value of this object does not affect any scripts that\n    \
    \        are already executing.\"\n       DEFVAL { 1 }\n       ::= { smLaunchEntry\
    \ 6 }\n   smLaunchMaxCompleted OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..4294967295)\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The maximum number of finished scripts invoked from this\n     \
    \       entry in the smLaunchTable allowed to be retained in the\n           \
    \ smRunTable. Whenever the value of this object is changed\n            and whenever\
    \ a script terminates, entries in the smRunTable\n            are deleted if necessary\
    \ until the number of completed\n            scripts is smaller than the value\
    \ of this object. Scripts\n            whose smRunEndTime value indicates the\
    \ oldest completion\n            time are deleted first.\"\n       DEFVAL { 1\
    \ }\n       ::= { smLaunchEntry 7 }\n   smLaunchLifeTime OBJECT-TYPE\n       SYNTAX\
    \      TimeInterval\n       UNITS       \"centi-seconds\"\n       MAX-ACCESS \
    \ read-create\n       STATUS      current\n       DESCRIPTION\n           \"The\
    \ default maximum amount of time a script launched\n            from this entry\
    \ may run. The value of this object is used\n            to initialize the smRunLifeTime\
    \ object when a script is\n            launched. Changing the value of an smLaunchLifeTime\n\
    \            instance does not affect scripts previously launched from\n     \
    \       this entry.\"\n       DEFVAL { 360000 }\n       ::= { smLaunchEntry 8\
    \ }\n   smLaunchExpireTime OBJECT-TYPE\n       SYNTAX      TimeInterval\n    \
    \   UNITS       \"centi-seconds\"\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The default maximum amount of\
    \ time information about a\n            script launched from this entry is kept\
    \ in the smRunTable\n            after the script has completed execution.  The\
    \ value of\n            this object is used to initialize the smRunExpireTime\n\
    \            object when a script is launched. Changing the value of an\n    \
    \        smLaunchExpireTime instance does not affect scripts\n            previously\
    \ launched from this entry.\"\n       DEFVAL { 360000 }\n       ::= { smLaunchEntry\
    \ 9 }\n   smLaunchStart OBJECT-TYPE\n       SYNTAX      Integer32 (0..2147483647)\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object is used to start the execution of scripts.\n       \
    \     When retrieved, the value will be the value of smRunIndex\n            for\
    \ the last script that started execution by manipulating\n            this object.\
    \ The value will be zero if no script started\n            execution yet.\n  \
    \          A script is started by setting this object to an unused\n         \
    \   smRunIndex value. A new row in the smRunTable will be\n            created\
    \ which is indexed by the value supplied by the\n            set-request in addition\
    \ to the value of smLaunchOwner and\n            smLaunchName. An unused value\
    \ can be obtained by reading\n            the smLaunchRunIndexNext object.\n \
    \           Setting this object to the special value 0 will start\n          \
    \  the script with a self-generated smRunIndex value. The\n            consequence\
    \ is that the script invoker has no reliable\n            way to determine the\
    \ smRunIndex value for this script\n            invocation and that the invoker\
    \ has therefore no way\n            to obtain the results from this script invocation.\
    \ The\n            special value 0 is however useful for scheduled script\n  \
    \          invocations.\n            If this object is set, the following checks\
    \ must be\n            performed:\n            1) The value of the smLaunchOperStatus\
    \ object in this\n               entry of the smLaunchTable must be `enabled'.\n\
    \            2) The values of smLaunchScriptOwner and\n               smLaunchScriptName\
    \ of this row must identify an\n               existing entry in the smScriptTable.\n\
    \            3) The value of smScriptOperStatus of this entry must\n         \
    \      be `enabled'.\n            4) The principal performing the set operation\
    \ must have\n               read access to the script. This must be checked by\n\
    \               calling the isAccessAllowed abstract service interface\n     \
    \          defined in RFC 2271 on the row in the smScriptTable\n             \
    \  identified by smLaunchScriptOwner and smLaunchScriptName.\n               The\
    \ isAccessAllowed abstract service interface must be\n               called on\
    \ all columnar objects in the smScriptTable with\n               a MAX-ACCESS\
    \ value different than `not-accessible'. The\n               test fails as soon\
    \ as a call indicates that access is\n               not allowed.\n          \
    \  5) If the value provided by the set operation is not 0,\n               a check\
    \ must be made that the value is currently not\n               in use. Otherwise,\
    \ if the value provided by the set\n               operation is 0, a suitable\
    \ unused value must be\n               generated.\n            6) The number of\
    \ currently executing scripts invoked\n               from this smLaunchTable\
    \ entry must be less than\n               smLaunchMaxRunning.\n            Attempts\
    \ to start a script will fail with an\n            inconsistentValue error if\
    \ one of the checks described\n            above fails.\n            Otherwise,\
    \ if all checks have been passed, a new entry\n            in the smRunTable will\
    \ be created indexed by smLaunchOwner,\n            smLaunchName and the new value\
    \ for smRunIndex. The value\n            of smLaunchArgument will be copied into\
    \ smRunArgument,\n            the value of smLaunchLifeTime will be copied to\n\
    \            smRunLifeTime, and the value of smLaunchExpireTime\n            will\
    \ be copied to smRunExpireTime.\n            The smRunStartTime will be set to\
    \ the current time and\n            the smRunState will be set to `initializing'\
    \ before the\n            script execution is initiated in the appropriate runtime\n\
    \            system.\n            Note, the data type and the range of this object\
    \ must\n            be consistent with the smRunIndex object. Since this\n   \
    \         object might be written from the scheduling MIB, the\n            data\
    \ type Integer32 rather than Unsigned32 is used.\"\n       DEFVAL { 0 }\n    \
    \   ::= { smLaunchEntry 10 }\n   smLaunchControl OBJECT-TYPE\n       SYNTAX  \
    \    INTEGER {\n                       abort(1),\n                       suspend(2),\n\
    \                       resume(3),\n                       nop(4)\n          \
    \         }\n       MAX-ACCESS  read-create\n       STATUS      current\n    \
    \   DESCRIPTION\n           \"This object is used to request a state change for\
    \ all\n            running scripts in the smRunTable that were started from\n\
    \            this row in the smLaunchTable.\n            Setting this object to\
    \ abort(1), suspend(2) or resume(3)\n            will set the smRunControl object\
    \ of all applicable rows\n            in the smRunTable to abort(1), suspend(2)\
    \ or resume(3)\n            respectively. The phrase `applicable rows' means the\
    \ set of\n            rows which were created from this entry in the smLaunchTable\n\
    \            and whose value of smRunState allows the corresponding\n        \
    \    state change as described in the definition of the\n            smRunControl\
    \ object. Setting this object to nop(4) has no\n            effect.\"\n      \
    \ DEFVAL { nop }\n       ::= { smLaunchEntry 11 }\n   smLaunchAdminStatus OBJECT-TYPE\n\
    \       SYNTAX      INTEGER {\n                       enabled(1),\n          \
    \             disabled(2)\n                   }\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The value of this\
    \ object indicates the desired status of\n            this launch table entry.\"\
    \n       DEFVAL { disabled }\n       ::= { smLaunchEntry 12 }\n   smLaunchOperStatus\
    \ OBJECT-TYPE\n       SYNTAX      INTEGER {\n                       enabled(1),\n\
    \                       disabled(2)\n                   }\n       MAX-ACCESS \
    \ read-only\n       STATUS      current\n       DESCRIPTION\n           \"The\
    \ value of this object indicates the actual status of\n            this launch\
    \ table entry. An `enabled' launch table\n            entry can be used to start\
    \ scripts while a `disabled'\n            launch table entry will refuse any attempts\
    \ to start\n            scripts. The value `enabled' requires that the\n     \
    \       smLaunchRowStatus object is active. The value\n            `disabled'\
    \ requires that there are no entries in the\n            smRunTable associated\
    \ with this smLaunchTable entry.\"\n       DEFVAL { disabled }\n       ::= { smLaunchEntry\
    \ 13 }\n   smLaunchRunIndexNext OBJECT-TYPE\n       SYNTAX      Integer32 (1..2147483647)\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This variable is used for creating rows in the smRunTable.\n   \
    \         The value of this variable is a currently unused value\n           \
    \ for smRunIndex, which can be written into the smLaunchStart\n            object\
    \ associated with this row to launch a script.\n            The value returned\
    \ when reading this variable must be unique\n            for the smLaunchOwner\
    \ and smLauchName associated with this\n            row. Subsequent attempts to\
    \ read this variable must return\n            different values.\n            This\
    \ variable will return the special value 0 if no new rows\n            can be\
    \ created.\n            Note, the data type and the range of this object must\
    \ be\n            consistent with the definition of smRunIndex.\"\n       ::=\
    \ { smLaunchEntry 14 }\n   smLaunchStorageType OBJECT-TYPE\n       SYNTAX    \
    \  StorageType\n       MAX-ACCESS  read-create\n       STATUS      current\n \
    \      DESCRIPTION\n           \"This object defines if this row is kept in volatile\
    \ storage\n            and lost upon reboot or if this row is backed up by stable\n\
    \            storage.\n            The value of smLaunchStorageType is only meaningful\
    \ if the\n            value of the corresponding RowStatus object is active.\n\
    \            If smLaunchStorageType has the value permanent(4), then all\n   \
    \         objects whose MAX-ACCESS value is read-create must be\n            writable,\
    \ with the exception of the smLaunchStorageType and\n            smLaunchRowStatus\
    \ objects, which shall be read-only.\"\n       DEFVAL { volatile }\n       ::=\
    \ { smLaunchEntry 15 }\n   smLaunchRowStatus OBJECT-TYPE\n       SYNTAX      RowStatus\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"A control that allows entries to be added and removed from\n   \
    \         this table.\n            Attempts to `destroy' a row or to set a row\
    \ `notInService'\n            while scripts started from this launch table entry\
    \ are\n            running will result in an inconsistentValue error.\n      \
    \      Attempts to `destroy' a row or to set a row `notInService'\n          \
    \  where the value of the smLaunchStorageType object is\n            `permanent'\
    \ or `readOnly' will result in an\n            inconsistentValue error.\"\n  \
    \     ::= { smLaunchEntry 16 }\n   smRunTable OBJECT-TYPE\n       SYNTAX     \
    \ SEQUENCE OF SmRunEntry\n       MAX-ACCESS  not-accessible\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"This table lists and describes scripts\
    \ that are currently\n            running or have been running in the past.\"\n\
    \       ::= { smRunObjects 2 }\n   smRunEntry OBJECT-TYPE\n       SYNTAX     \
    \ SmRunEntry\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"An entry describing a particular running or\
    \ finished\n            script.\"\n       INDEX { smLaunchOwner, smLaunchName,\
    \ smRunIndex }\n       ::= { smRunTable 1 }\n   SmRunEntry ::= SEQUENCE {\n  \
    \     smRunIndex          Integer32,\n       smRunArgument       OCTET STRING,\n\
    \       smRunStartTime      DateAndTime,\n       smRunEndTime        DateAndTime,\n\
    \       smRunLifeTime       TimeInterval,\n       smRunExpireTime     TimeInterval,\n\
    \       smRunExitCode       INTEGER,\n       smRunResult         OCTET STRING,\n\
    \       smRunControl        INTEGER,\n       smRunState          INTEGER,\n  \
    \     smRunError          SnmpAdminString\n   }\n   smRunIndex OBJECT-TYPE\n \
    \      SYNTAX      Integer32 (1..2147483647)\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The locally arbitrary,\
    \ but unique identifier associated\n            with this running or finished\
    \ script. This value must be\n            unique for all rows in the smRunTable\
    \ with the same\n            smLaunchOwner and smLaunchName.\n            Note,\
    \ the data type and the range of this object must be\n            consistent with\
    \ the definition of smLaunchRunIndexNext\n            and smLaunchStart.\"\n \
    \      ::= { smRunEntry 1 }\n   smRunArgument OBJECT-TYPE\n       SYNTAX     \
    \ OCTET STRING\n       MAX-ACCESS  read-only\n       STATUS      current\n   \
    \    DESCRIPTION\n           \"The argument supplied to the script when it started.\"\
    \n       DEFVAL { ''H }\n       ::= { smRunEntry 2 }\n   smRunStartTime OBJECT-TYPE\n\
    \       SYNTAX      DateAndTime\n       MAX-ACCESS  read-only\n       STATUS \
    \     current\n       DESCRIPTION\n           \"The date and time when the execution\
    \ started. The value\n            '0000000000000000'H is returned if the script\
    \ has not\n            started yet.\"\n       DEFVAL { '0000000000000000'H }\n\
    \       ::= { smRunEntry 3 }\n   smRunEndTime OBJECT-TYPE\n       SYNTAX     \
    \ DateAndTime\n       MAX-ACCESS  read-only\n       STATUS      current\n    \
    \   DESCRIPTION\n           \"The date and time when the execution terminated.\
    \ The value\n            '0000000000000000'H is returned if the script has not\n\
    \            terminated yet.\"\n       DEFVAL { '0000000000000000'H }\n      \
    \ ::= { smRunEntry 4 }\n   smRunLifeTime OBJECT-TYPE\n       SYNTAX      TimeInterval\n\
    \       UNITS       \"centi-seconds\"\n       MAX-ACCESS  read-write\n       STATUS\
    \      current\n       DESCRIPTION\n           \"This object specifies how long\
    \ the script can execute.\n            This object returns the remaining time\
    \ that the script\n            may run. The object is initialized with the value\
    \ of the\n            associated smLaunchLifeTime object and ticks backwards.\n\
    \            The script is aborted immediately when the value reaches 0.\n   \
    \         The value of this object may be set in order to increase or\n      \
    \      reduce the remaining time that the script may run. Setting\n          \
    \  this value to 0 will abort script execution immediately,\n            and,\
    \ if the value of smRunExpireTime is also 0, will remove\n            this entry\
    \ from the smRunTable once it has terminated.\n            The value of smRunLifeTime\
    \ reflects the real-time execution\n            time as seen by the outside world.\
    \ The value of this object\n            will always be 0 for a script that finished\
    \ execution, that\n            is smRunState has the value `terminated'.\n   \
    \         The value of smRunLifeTime does not change while a script\n        \
    \    is suspended, that is smRunState has the value `suspended'.\n           \
    \ Note, this does not affect set operations. It is legal to\n            modify\
    \ smRunLifeTime via set operations while a script is\n            suspended.\"\
    \n       ::= { smRunEntry 5 }\n   smRunExpireTime OBJECT-TYPE\n       SYNTAX \
    \     TimeInterval\n       UNITS       \"centi-seconds\"\n       MAX-ACCESS  read-write\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This value specifies\
    \ how long this row can exist in the\n            smRunTable after the script\
    \ has terminated.  This object\n            returns the remaining time that the\
    \ row may exist before it\n            is aged out. The object is initialized\
    \ with the value of the\n            associated smLaunchExpireTime object and\
    \ ticks backwards. The\n            entry in the smRunTable is destroyed when\
    \ the value reaches 0\n            and the smRunState has the value `terminated'.\n\
    \            The value of this object may be set in order to increase or\n   \
    \         reduce the remaining time that the row may exist.  Setting\n       \
    \     the value to 0 will destroy this entry as soon as the\n            smRunState\
    \ has the value `terminated'.\"\n       ::= { smRunEntry 6 }\n   smRunExitCode\
    \ OBJECT-TYPE\n       SYNTAX      INTEGER {\n                       noError(1),\n\
    \                       halted(2),\n                       lifeTimeExceeded(3),\n\
    \                       noResourcesLeft(4),\n                       languageError(5),\n\
    \                       runtimeError(6),\n                       invalidArgument(7),\n\
    \                       securityViolation(8),\n                       genericError(9)\n\
    \                   }\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The value of this object indicates the reason\
    \ why a\n            script finished execution. The smRunExitCode code may have\n\
    \            one of the following values:\n            - `noError', which indicates\
    \ that the script completed\n               successfully without errors;\n   \
    \         - `halted', which indicates that the script was halted\n           \
    \    by a request from an authorized manager;\n            - `lifeTimeExceeded',\
    \ which indicates that the script\n               exited because a time limit\
    \ was exceeded;\n            - `noResourcesLeft', which indicates that the script\n\
    \               exited because it ran out of resources (e.g. memory);\n      \
    \      - `languageError', which indicates that the script exited\n           \
    \    because of a language error (e.g. a syntax error in an\n               interpreted\
    \ language);\n            - `runtimeError', which indicates that the script exited\n\
    \               due to a runtime error (e.g. a division by zero);\n          \
    \  - `invalidArgument', which indicates that the script could\n              \
    \ not be run because of invalid script arguments;\n            - `securityViolation',\
    \ which indicates that the script\n               exited due to a security violation;\n\
    \            - `genericError', which indicates that the script exited\n      \
    \         for an unspecified reason.\n            If the script has not yet begun\
    \ running, or is currently\n            running, the value will be `noError'.\"\
    \n       DEFVAL { noError }\n       ::= { smRunEntry 7 }\n   smRunResult OBJECT-TYPE\n\
    \       SYNTAX      OCTET STRING\n       MAX-ACCESS  read-only\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The result value produced by\
    \ the running script. Note that\n            the result may change while the script\
    \ is executing.\"\n       DEFVAL { ''H }\n       ::= { smRunEntry 8 }\n   smRunControl\
    \ OBJECT-TYPE\n       SYNTAX      INTEGER {\n                       abort(1),\n\
    \                       suspend(2),\n                       resume(3),\n     \
    \                  nop(4)\n                   }\n       MAX-ACCESS  read-write\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The value of this\
    \ object indicates the desired status of the\n            script execution defined\
    \ by this row.\n            Setting this object to `abort' will abort execution\
    \ if the\n            value of smRunState is `initializing', `executing',\n  \
    \          `suspending', `suspended' or `resuming'. Setting this object\n    \
    \        to `abort' when the value of smRunState is `aborting' or\n          \
    \  `terminated' will result in an inconsistentValue error.\n            Setting\
    \ this object to `suspend' will suspend execution\n            if the value of\
    \ smRunState is `executing'. Setting this\n            object to `suspend' will\
    \ cause an inconsistentValue error\n            if the value of smRunState is\
    \ not `executing'.\n            Setting this object to `resume' will resume execution\n\
    \            if the value of smRunState is `suspending' or\n            `suspended'.\
    \ Setting this object to `resume' will cause an\n            inconsistentValue\
    \ error if the value of smRunState is\n            not `suspending' or `suspended'.\n\
    \            Setting this object to nop(4) has no effect.\"\n       DEFVAL { nop\
    \ }\n       ::= { smRunEntry 9 }\n   smRunState OBJECT-TYPE\n       SYNTAX   \
    \   INTEGER {\n                       initializing(1),\n                     \
    \  executing(2),\n                       suspending(3),\n                    \
    \   suspended(4),\n                       resuming(5),\n                     \
    \  aborting(6),\n                       terminated(7)\n                   }\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The value of this object indicates the script's execution\n    \
    \        status.  If the script has been invoked but has not yet\n           \
    \ begun execution, the value will be `initializing'. If the\n            script\
    \ is running, the value will be `executing'. A script\n            which received\
    \ a request to suspend execution but which\n            did not actually suspend\
    \ execution will be `suspending'.\n            A script which has suspended execution\
    \ will be `suspended'.\n            A script which received a request to resume\
    \ execution but\n            which is not yet running is `resuming'. The resuming\
    \ state\n            will finally lead to the `executing' state. A script which\n\
    \            received a request to abort execution but which is still\n      \
    \      running is `aborting'. A script which stopped execution\n            is\
    \ `terminated'.\"\n       ::= { smRunEntry 10 }\n   smRunError OBJECT-TYPE\n \
    \      SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-only\n       STATUS\
    \      current\n       DESCRIPTION\n           \"This  contains a descriptive\
    \ error message if the script\n            terminates in an abnormally. An implementation\
    \ must store a\n            descriptive error message in this object if the script\
    \ exits\n            with the smRunExitCode `genericError'.\n            The value\
    \ of this object is the zero-length string as long\n            as the smRunExitCode\
    \ has the value `noError'\"\n       DEFVAL { ''H }\n       ::= { smRunEntry 11\
    \ }\n   --\n   -- Notifications. The definition of smTraps makes notification\n\
    \   -- registrations reversible (see STD 58, RFC 2578).\n   --\n   smTraps OBJECT\
    \ IDENTIFIER ::= { smNotifications 0 }\n   smScriptAbort NOTIFICATION-TYPE\n \
    \      OBJECTS     { smRunExitCode, smRunEndTime, smRunError }\n       STATUS\
    \      current\n       DESCRIPTION\n           \"This notification is generated\
    \ whenever a running script\n            terminates with an smRunExitCode unequal\
    \ to `noError'.\"\n       ::= { smTraps 1 }\n   smScriptResult NOTIFICATION-TYPE\n\
    \       OBJECTS     { smRunResult }\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This notification can be used by scripts to notify other\n     \
    \       management applications about script results. It can be\n            used\
    \ to notify managers about a script result.\n            This notification is\
    \ not automatically generated by the\n            script MIB implementation. It\
    \ is the responsibility of\n            the executing script to emit this notification\
    \ where it\n            is appropriate to do so.\"\n       ::= { smTraps 2 }\n\
    \   -- conformance information\n   smCompliances OBJECT IDENTIFIER ::= { smConformance\
    \ 1 }\n   smGroups      OBJECT IDENTIFIER ::= { smConformance 2 }\n   -- compliance\
    \ statements\n   smCompliance MODULE-COMPLIANCE\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The compliance statement for SNMP entities which\
    \ implement\n            the script MIB.\"\n       MODULE      -- this module\n\
    \       MANDATORY-GROUPS {\n               smLanguageGroup, smScriptGroup, smLaunchGroup,\
    \ smRunGroup\n       }\n       GROUP   smCodeGroup\n       DESCRIPTION\n     \
    \      \"The smCodeGroup is mandatory only for those implementations\n       \
    \     that support the downloading of scripts via SNMP.\"\n       OBJECT  smScriptSource\n\
    \       MIN-ACCESS  read-only\n       DESCRIPTION\n           \"The smScriptSource\
    \ object is read-only for implementations\n            that are not able to download\
    \ script code from a URL.\"\n       OBJECT smLaunchArgument\n       DESCRIPTION\n\
    \           \"A compliant implementation has to support a minimum size\n     \
    \       for smLaunchArgument of 255 octets.\"\n       OBJECT smRunArgument\n \
    \      DESCRIPTION\n           \"A compliant implementation has to support a minimum\
    \ size\n            for smRunArgument of 255 octets.\"\n       OBJECT smRunResult\n\
    \       DESCRIPTION\n           \"A compliant implementation has to support a\
    \ minimum size\n            for smRunResult of 255 octets.\"\n       OBJECT smRunState\n\
    \       DESCRIPTION\n           \"A compliant implementation does not have to\
    \ support script\n            suspension and the smRunState `suspended'. Such\
    \ an\n            implementation will change into the `suspending' state\n   \
    \         when the smRunControl is set to `suspend' and remain in this\n     \
    \       state until smRunControl is set to `resume' or the script\n          \
    \  terminates.\"\n       ::= { smCompliances 1 }\n   smLanguageGroup OBJECT-GROUP\n\
    \       OBJECTS {\n           smLangLanguage,\n           smLangVersion,\n   \
    \        smLangVendor,\n           smLangRevision,\n           smLangDescr,\n\
    \           smExtsnExtension,\n           smExtsnVersion,\n           smExtsnVendor,\n\
    \           smExtsnRevision,\n           smExtsnDescr\n       }\n       STATUS\
    \      current\n       DESCRIPTION\n           \"A collection of objects providing\
    \ information about the\n            capabilities of the scripting engine.\"\n\
    \       ::= { smGroups 1 }\n   smScriptGroup OBJECT-GROUP\n       OBJECTS {\n\
    \           smScriptDescr,\n           smScriptLanguage,\n           smScriptSource,\n\
    \           smScriptAdminStatus,\n           smScriptOperStatus,\n           smScriptStorageType,\n\
    \           smScriptRowStatus\n       }\n       STATUS      current\n       DESCRIPTION\n\
    \           \"A collection of objects providing information about\n          \
    \  installed scripts.\"\n       ::= { smGroups 2 }\n   smCodeGroup OBJECT-GROUP\n\
    \       OBJECTS {\n           smCodeText,\n           smCodeRowStatus\n      \
    \ }\n       STATUS      current\n       DESCRIPTION\n           \"A collection\
    \ of objects used to download or modify scripts\n            by using SNMP set\
    \ requests.\"\n       ::= { smGroups 3 }\n   smLaunchGroup OBJECT-GROUP\n    \
    \   OBJECTS {\n           smLaunchScriptOwner,\n           smLaunchScriptName,\n\
    \           smLaunchArgument,\n           smLaunchMaxRunning,\n           smLaunchMaxCompleted,\n\
    \           smLaunchLifeTime,\n           smLaunchExpireTime,\n           smLaunchStart,\n\
    \           smLaunchControl,\n           smLaunchAdminStatus,\n           smLaunchOperStatus,\n\
    \           smLaunchRunIndexNext,\n           smLaunchStorageType,\n         \
    \  smLaunchRowStatus\n       }\n       STATUS      current\n       DESCRIPTION\n\
    \           \"A collection of objects providing information about scripts\n  \
    \          that can be launched.\"\n       ::= { smGroups 4 }\n   smRunGroup OBJECT-GROUP\n\
    \       OBJECTS {\n           smRunArgument,\n           smRunStartTime,\n   \
    \        smRunEndTime,\n           smRunLifeTime,\n           smRunExpireTime,\n\
    \           smRunExitCode,\n           smRunResult,\n           smRunState,\n\
    \           smRunControl,\n           smRunError\n       }\n       STATUS    \
    \  current\n       DESCRIPTION\n           \"A collection of objects providing\
    \ information about running\n            scripts.\"\n       ::= { smGroups 5 }\n\
    \   smNotificationsGroup NOTIFICATION-GROUP\n       NOTIFICATIONS {\n        \
    \   smScriptAbort,\n           smScriptResult\n       }\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The notifications emitted by the script MIB.\"\
    \n       ::= { smGroups 6 }\n   END\n"
- title: 7.  Usage Examples
  contents:
  - "7.  Usage Examples\n   This section presents some examples that explain how a\
    \ manager can\n   use the Script MIB defined in this memo. The purpose of these\n\
    \   examples is to explain the steps that are normally used to delegate\n   management\
    \ scripts.\n"
- title: 7.1.  Pushing a script via SNMP
  contents:
  - "7.1.  Pushing a script via SNMP\n   This example explains the steps performed\
    \ by a manager to push a\n   script into a distributed manager.\n   1.   The manager\
    \ first checks the smLanguageTable and the\n        smExtensionTable in order\
    \ to select the appropriate script or\n        language.\n   2.   The manager\
    \ creates a row in the smScriptTable by issuing an\n        SNMP set-request.\
    \ The smScriptRowStatus object is set to\n        `createAndWait' and the smScriptSource\
    \ object is set to an empty\n        string. The smScriptLanguage object is set\
    \ to the language in\n        which the script was written. The smScriptStorageType\
    \ object is\n        set to `volatile' to indicate that the script will be loaded\
    \ via\n        the smCodeTable.  The smScriptOwner is set to a string which\n\
    \        identifies the principal who owns the new row. The smScriptName\n   \
    \     defines the administratively assigned unique name for the\n        script.\n\
    \   3.   The manager sets the smScriptRowStatus object to `active' and\n     \
    \   the smScriptAdminStatus object to `editing'.\n   4.   The manager pushes the\
    \ script to the distributed manager by\n        issuing a couple of SNMP set-requests\
    \ to fill the smCodeTable.\n   5.   Once the whole script has been transferred,\
    \ the manager sends a\n        set-request to set the smScriptAdminStatus object\
    \ to `enabled'.\n        The Script MIB implementation now makes the script accessible\
    \ to\n        the runtime system. This might include the compilation of the\n\
    \        script if the language requires a compilation step.\n   6.   The manager\
    \ polls the smScriptOperStatus object until the value\n        is either `enabled'\
    \ or one of the error status codes.  The\n        script can only be used if the\
    \ value of smScriptOperStatus is\n        `enabled'.\n   7.   If the manager wants\
    \ to store the script in local non-volatile\n        storage, it should send a\
    \ set-request which changes the\n        smScriptStorageType object to `nonVolatile'.\n"
- title: 7.2.  Pulling a script from a URL
  contents:
  - "7.2.  Pulling a script from a URL\n   This example explains the steps performed\
    \ by a manager to cause a\n   distributed manager to pull a script from a URL.\n\
    \   1.   The manager first checks the smLanguageTable and the\n        smExtensionTable\
    \ in order to select the appropriate script or\n        language.\n   2.   The\
    \ manager creates a row in the smScriptTable by issuing an\n        SNMP set-request.\
    \ The smScriptRowStatus object is set to\n        `createAndWait' and the smScriptSource\
    \ object is set to the URL\n        which points to the script source. The smScriptLanguage\
    \ object\n        is set to the language in which the script was written. The\n\
    \        smScriptOwner is set to a string which identifies the principal\n   \
    \     who owns the new row. The smScriptName defines the\n        administratively\
    \ assigned unique name for the script.\n   3.   The manager sets the smScriptRowStatus\
    \ object to `active'.\n   4.   The manager sends a set-request to set the smScriptAdminStatus\n\
    \        object to `enabled'. The Script MIB implementation now makes the\n  \
    \      script accessible to the runtime system. This causes a retrieval\n    \
    \    operation to pull the script from the URL stored in\n        smScriptSource.\
    \ This retrieval operation might be followed by a\n        compile operation if\
    \ the language requires a compilation step.\n   5.   The manager polls the smScriptOperStatus\
    \ object until the value\n        is either `enabled' or one of the error status\
    \ codes.  The\n        script can only be used if the value of smScriptOperStatus\
    \ is\n        `enabled'.\n   6.   If the manager wants to store the script in\
    \ local non-volatile\n        storage, it should send a set-request which changes\
    \ the\n        smScriptStorageType object to `nonVolatile'.\n"
- title: 7.3.  Modifying an existing script
  contents:
  - "7.3.  Modifying an existing script\n   This section explains how a manager can\
    \ modify a script by sending\n   SNMP set-requests.\n   1.   First, the script\
    \ is de-activated by setting the\n        smScriptAdminStatus to `disabled'.\n\
    \   2.   The manager polls the smScriptOperStatus object until the value\n   \
    \     is `disabled'.\n   3.   The manager sets smScriptSource to an empty string\
    \ and\n        smScriptAdminStatus to `editing'. This makes the script source\n\
    \        available in the smCodeTable.\n   4.   The manager polls the smScriptOperStatus\
    \ object until the value\n        is `editing'.\n   5.   The manager sends SNMP\
    \ set-requests to modify the script in the\n        smCodeTable.\n   6.   The\
    \ manager sends a set-request to set the smScriptAdminStatus\n        object to\
    \ `enabled'. The Script MIB implementation now makes the\n        script accessible\
    \ to the runtime system. This might include the\n        compilation of the script\
    \ if the language requires a compilation\n        step.\n   7.   The manager polls\
    \ the smScriptOperStatus object until the value\n        is either `enabled' or\
    \ one of the error status codes.  The\n        script can only be used if the\
    \ value of smScriptOperStatus is\n        `enabled'.\n"
- title: 7.4.  Removing an existing script
  contents:
  - "7.4.  Removing an existing script\n   This section explains how a manager can\
    \ remove a script from a\n   distributed manager.\n   1.   First, the manager\
    \ sets the smScriptAdminStatus to `disabled'.\n        This will ensure that no\
    \ new scripts can be started while\n        running scripts finish their execution.\n\
    \   2.   The manager polls the smScriptOperStatus object until the value\n   \
    \     is `disabled'.\n   3.   The manager sends an SNMP set-request to change\
    \ the\n        smScriptRowStatus object to `destroy'. This will remove the row\n\
    \        and all associated resources from the Script MIB implementation.\n"
- title: 7.5.  Creating a launch button
  contents:
  - "7.5.  Creating a launch button\n   This section explains how a manager can create\
    \ a launch button for\n   starting a script.\n   1.   The manager, who is identified\
    \ by an smLaunchOwner value, first\n        chooses a name for the new row in\
    \ the smLaunchTable. The manager\n        sends an SNMP set-request to set the\
    \ smLaunchRowStatus object\n        for this smLaunchOwner and smLaunchName to\
    \ `createAndWait'.\n   2.   The manager fills the new smLaunchTable row with all\
    \ required\n        parameters. The smLaunchScriptOwner and smLaunchScriptName\n\
    \        values point to the script that should be started from this\n       \
    \ launch button.\n   3.   The manager sends a set-request to change smLaunchAdminStatus\
    \ to\n        `enabled' once the new smLaunchTable row is complete.\n   4.   The\
    \ manager polls the smLaunchOperStatus object until the value\n        is `enabled'.\n"
- title: 7.6.  Launching a script
  contents:
  - "7.6.  Launching a script\n   This section explains the suggested way to launch\
    \ a script from a\n   given launch button.\n   1.   The manager first retrieves\
    \ the value of smLaunchRunIndexNext\n        from the launch button selected to\
    \ start the script.\n   2.   The manager sends an SNMP set-request to set the\
    \ smLaunchStart\n        object to the value obtained in step 1. This will launch\
    \ the\n        script if all necessary pre-conditions are satisfied (see the\n\
    \        definition of smLaunchStart for more details). The manager can\n    \
    \    also provide the smLaunchArgument in the same set-request that\n        is\
    \ used to start the script. Upon successful start, a new row\n        will be\
    \ created in the smRunTable indexed by smLaunchOwner,\n        smLaunchName and\
    \ the value written to smLaunchStart.\n   Note, the first step is not required.\
    \ A manager can also try to guess\n   an unused value for smRunIndex if he wants\
    \ to start script in a\n   single transaction. A manager can also use the special\
    \ value 0 if he\n   does not care about the results produced by the script.\n"
- title: 7.7.  Terminating a script
  contents:
  - "7.7.  Terminating a script\n   This section explains two ways to terminate a\
    \ running script. The\n   first approach is as follows:\n   1.   The manager sets\
    \ the smRunControl object of the running script\n        or the smLaunchControl\
    \ object of the launch button used to start\n        the running script to `abort'.\
    \ Setting smLaunchControl will\n        abort all running scripts started from\
    \ the launch button while\n        smRunControl will only abort the running script\
    \ associated with\n        the smRunControl instance.\n   The second way to terminate\
    \ a script is to set the smRunLifeTime to\n   zero which causes the runtime system\
    \ to terminate the script with a\n   `lifeTimeExceeded' exit code:\n   1.   The\
    \ manager changes the value of smRunLifeTime to 0. This causes\n        the Script\
    \ MIB implementation to abort the script because the\n        remaining life time\
    \ has expired.\n   Note, changing the smRunLifeTime value can also be used to\
    \ increase\n   the permitted lifetime of a running script. For example, a manager\n\
    \   can choose to set smRunLifeTime to a small fixed time interval and\n   increase\
    \ the value periodically. This strategy has the nice effect\n   that scripts terminate\
    \ automatically if the manager loses contact\n   with the Script MIB engine.\n"
- title: 7.8.  Removing a launch button
  contents:
  - "7.8.  Removing a launch button\n   This section explains how a manager can remove\
    \ a launch button from a\n   distributed manager.\n   1.   First, the manager\
    \ sets the smLaunchAdminStatus to\n        `disabled'. This will ensure that no\
    \ new scripts can be started\n        from this launch button while running script\
    \ will finish their\n        execution.\n   2.   The manager polls the smLaunchOperStatus\
    \ object until the value\n        is `disabled'.\n   3.   The manager sends an\
    \ SNMP set-request to change the\n        smLaunchRowStatus object to `destroy'.\
    \ This will remove the row\n        and all associated resources from the Script\
    \ MIB implementation.\n"
- title: 8.  VACM Configuration Examples
  contents:
  - "8.  VACM Configuration Examples\n   This section shows how the view-based access\
    \ control model defined in\n   RFC 2275 [15] can be configured to control access\
    \ to the script MIB.\n"
- title: 8.1.  Sandbox for guests
  contents:
  - "8.1.  Sandbox for guests\n   The first example demonstrates how to configure\
    \ VACM to give the\n   members of the VACM group \"guest\" limited access to the\
    \ script MIB.\n   The MIB views defined below give the members of the \"guest\"\
    \ group a\n   sandbox where they can install and start their own scripts, but\
    \ not\n   access any other scripts maintained by the Script MIB implementation.\n\
    \      vacmAccessReadView.\"guest\".\"\".usm.authNoPriv = \"guestReadView\"\n\
    \      vacmAccessWriteView.\"guest\".\"\".usm.authNoPriv = \"guestWriteView\"\n\
    \   The guestReadView grants read access to the smLangTable, the\n   smExtsnTable\
    \ and to all the table entries owned by \"guest\":\n      guestReadView:\n   \
    \       smLangTable                       (included)\n          smExtsnTable \
    \                     (included)\n          smScriptObjects.*.*.*.\"guest\"  \
    \   (included)\n          smRunObjects.*.*.*.\"guest\"        (included)\n   The\
    \ guestWriteView grants write access to all the table entries owned\n   by \"\
    guest\":\n      guestWriteView:\n          smScriptObjects.*.*.*.\"guest\"   \
    \  (included)\n          smRunObjects.*.*.*.\"guest\"        (included)\n"
- title: 8.2.  Sharing scripts
  contents:
  - "8.2.  Sharing scripts\n   This example demonstrates how VACM can be used to share\
    \ a repository\n   of scripts between the members of the \"senior\" and the members\
    \ of the\n   \"junior\" VACM group:\n      vacmAccessReadView.\"junior\".\"\"\
    .usm.authNoPriv = \"juniorReadView\"\n      vacmAccessWriteView.\"junior\".\"\"\
    .usm.authNoPriv = \"juniorWriteView\"\n      juniorReadView:\n          smLangTable\
    \                       (included)\n          smExtsnTable                   \
    \   (included)\n          smScriptObjects.*.*.*.\"junior\"    (included)\n   \
    \       smRunObjects.*.*.*.\"junior\"       (included)\n          smScriptObjects.*.*.*.\"\
    utils\"     (included)\n      juniorWriteView:\n          smScriptObjects.*.*.*.\"\
    junior\"    (included)\n          smRunObjects.*.*.*.\"junior\"       (included)\n\
    \   The definitions above allow the members of the \"junior\" VACM group to\n\
    \   start the scripts owned by \"utils\" in addition to the script the\n   members\
    \ of the \"junior\" VACM group installed themself.  This is\n   accomplished by\
    \ giving the members of \"junior\" read access to scripts\n   in \"utils\".  This\
    \ allows members of \"junior\" to create entries in the\n   smLauchTable which\
    \ refer to scripts in \"utils\", and to launch those\n   scripts using these entries\
    \ in the smLaunchTable.\n      vacmAccessReadView.\"senior\".\"\".usm.authNoPriv\
    \ = \"seniorReadView\"\n      vacmAccessWriteView.\"senior\".\"\".usm.authNoPriv\
    \ = \"seniorWriteView\"\n      seniorReadView:\n          smLangTable        \
    \               (included)\n          smExtsnTable                      (included)\n\
    \          smScriptObjects.*.*.*.\"senior\"    (included)\n          smRunObjects.*.*.*.\"\
    senior\"       (included)\n          smScriptObjects.*.*.*.\"utils\"     (included)\n\
    \      seniorWriteView:\n          smScriptObjects.*.*.*.\"senior\"    (included)\n\
    \          smRunObjects.*.*.*.\"senior\"       (included)\n          smScriptObjects.*.*.*.\"\
    utils\"     (included)\n   The definitions for the members of the \"senior\" VACM\
    \ group allow to\n   start the scripts owned by \"utils\" in addition to the script\
    \ the\n   members of the \"senior\" VACM group installed themself. The third\n\
    \   write access rule in the seniorWriteView also grants the permission\n   to\
    \ install scripts owned by \"utils\". The members of the \"senior\" VACM\n   group\
    \ therefore have the permissions to install and modify scripts\n   that can be\
    \ called by the members of the \"junior\" VACM group.\n"
- title: 8.3.  Emergency scripts
  contents:
  - "8.3.  Emergency scripts\n   This example demonstrates how VACM can be used to\
    \ allow the members\n   of the \"junior\" VACM group to launch scripts that are\
    \ executed with\n   the permissions associated with the \"emergency\" owner. This\
    \ works by\n   adding the following rules to the juniorReadView and the\n   juniorWriteView:\n\
    \      juniorReadView:\n          smScriptObjects.*.*.*.\"emergency\" (included)\n\
    \          smRunObjects.*.*.*.\"emergency\"    (included)\n      juniorWriteView\n\
    \          smLaunchStart.\"emergency\"         (included)\n          smLaunchArgument.\"\
    emergency\"      (included)\n   The rules added to the juniorReadView grant read\
    \ access to the\n   scripts, the launch buttons and the results owned by \"emergency\"\
    . The\n   rules added to the juniorWriteView grant write permissions to the\n\
    \   smLaunchStart and smLaunchArgument variables ownded by \"emergency\".\n  \
    \ Members of the \"junior\" VACM group can therefore start scripts that\n   will\
    \ execute under the owner \"emergency\".\n      seniorReadView:\n          smScriptObjects.*.*.*.\"\
    emergency\" (included)\n          smRunObjects.*.*.*.\"emergency\"    (included)\n\
    \      seniorWriteView:\n          smScriptObjects.*.*.*.\"emergency\" (included)\n\
    \          smRunObjects.*.*.*.\"emergency\"    (included)\n   The rules added\
    \ to the seniorReadView and the seniorWriteView will\n   give the members of the\
    \ \"senior\" VACM group the rights to install\n   emergency scripts and to configure\
    \ appropriate launch buttons.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   The Internet Assigned Numbers Authority (IANA) is\
    \ responsible for\n   maintaining a MIB module which provides OID registrations\
    \ for well-\n   known languages. The IANA language registry is intented to reduce\n\
    \   interoperability problems by providing a single list of well-known\n   languages.\
    \ However, it is of course still possible to register\n   languages in private\
    \ OID spaces. Registering languages in private\n   spaces is especially attractive\
    \ if a language is used for\n   experimentation or if a language is only used\
    \ in environments where\n   the distribution of MIB modules with the language\
    \ registration does\n   not cause any maintenance problems.\n   Any additions\
    \ or changes to the list of languages registered via IANA\n   require Designated\
    \ Expert Review as defined in the IANA guidelines\n   [20]. The Designated Expert\
    \ will be selected by the IESG Area\n   Director for the IETF Operations and Management\
    \ Area.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This MIB provides the ability to distribute\
    \ applications written in\n   an arbitrary language to remote systems in a network.\
    \  The security\n   features of the languages available in a particular implementation\n\
    \   should be taken into consideration when deploying an implementation\n   of\
    \ this MIB.\n   To facilitate the provisioning of access control by a security\n\
    \   administrator using the View-Based Access Control Model (VACM)\n   defined\
    \ in RFC 2275 [15] for tables in which multiple users may need\n   to independently\
    \ create or modify entries, the initial index is used\n   as an \"owner index\"\
    . Such an initial index has a syntax of\n   SnmpAdminString, and can thus be trivially\
    \ mapped to a securityName\n   or groupName as defined in VACM, in accordance\
    \ with a security\n   policy.\n   All entries in related tables belonging to a\
    \ particular user will\n   have the same value for this initial index.  For a\
    \ given user's\n   entries in a particular table, the object identifiers for the\n\
    \   information in these entries will have the same subidentifiers\n   (except\
    \ for the \"column\" subidentifier) up to the end of the encoded\n   owner index.\
    \ To configure VACM to permit access to this portion of\n   the table, one would\
    \ create vacmViewTreeFamilyTable entries with the\n   value of vacmViewTreeFamilySubtree\
    \ including the owner index portion,\n   and vacmViewTreeFamilyMask \"wildcarding\"\
    \ the column subidentifier.\n   More elaborate configurations are possible.\n\
    \   The VACM access control mechanism described above provides control\n   over\
    \ SNMP access to Script MIB objects. There are a number of other\n   access control\
    \ issues that are outside of the scope of this MIB. For\n   example, access control\
    \ on URLs, especially those that use the file\n   scheme, must be realized by\
    \ the underlying operating system. A\n   mapping of the owner index value to a\
    \ local operating system security\n   user identity should be used by an implementation\
    \ of this MIB to\n   control access to operating system resources when resolving\
    \ URLs or\n   executing scripts.\n"
- title: 11.  Intellectual Property
  contents:
  - "11.  Intellectual Property\n   The IETF takes no position regarding the validity\
    \ or scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards-related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementors or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   This document was produced by the IETF Distributed Management\n\
    \   (DISMAN) working group.\n"
- title: 13.  References
  contents:
  - "13.  References\n   [1]  Harrington, D., Presuhn, R. and B. Wijnen, \"An Architecture\
    \ for\n        Describing SNMP Management Frameworks\", RFC 2271, January 1998.\n\
    \   [2]  Rose, M. and K. McCloghrie, \"Structure and Identification of\n     \
    \   Management Information for TCP/IP-based Internets\", STD 16, RFC\n       \
    \ 1155, May 1990.\n   [3]  Rose, M. and K. McCloghrie, \"Concise MIB Definitions\"\
    , STD 16,\n        RFC 1212, March 1991.\n   [4]  Rose, M., \"A Convention for\
    \ Defining Traps for use with the\n        SNMP\", RFC 1215, March 1991.\n   [5]\
    \  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose,\n        M.\
    \ and S. Waldbusser, \"Structure of Management Information\n        Version 2\
    \ (SMIv2)\", STD 58, RFC 2578, April 1999.\n   [6]  McCloghrie, K., Perkins, D.,\
    \ Schoenwaelder, J., Case, J., Rose,\n        M. and S. Waldbusser, \"Textual\
    \ Conventions for SMIv2\", STD 58,\n        RFC 2579, April 1999.\n   [7]  McCloghrie,\
    \ K., Perkins, D., Schoenwaelder, J., Case, J., Rose,\n        M. and S. Waldbusser,\
    \ \"Conformance Statements for SMIv2\", STD\n        58, RFC 2580, April 1999.\n\
    \   [8]  Case, J., Fedor, M., Schoffstall, M. and J. Davin, \"Simple\n       \
    \ Network Management Protocol\", STD 15, RFC 1157, May 1990.\n   [9]  Case, J.,\
    \ McCloghrie, K., Rose, M. and S. Waldbusser,\n        \"Introduction to Community-based\
    \ SNMPv2\", RFC 1901, January\n        1996.\n   [10] Case, J., McCloghrie, K.,\
    \ Rose, M. and S. Waldbusser, \"Transport\n        Mappings for Version 2 of the\
    \ Simple Network Management Protocol\n        (SNMPv2)\", RFC 1906, January 1996.\n\
    \   [11] Case, J., Harrington D., Presuhn R. and B. Wijnen, \"Message\n      \
    \  Processing and Dispatching for the Simple Network Management\n        Protocol\
    \ (SNMP)\", RFC 2272, January 1998.\n   [12] Blumenthal, U. and B. Wijnen, \"\
    User-based Security Model (USM)\n        for version 3 of the Simple Network Management\
    \ Protocol\n        (SNMPv3)\", RFC 2274, January 1998.\n   [13] Case, J., McCloghrie,\
    \ K., Rose, M. and S. Waldbusser, \"Protocol\n        Operations for Version 2\
    \ of the Simple Network Management\n        Protocol (SNMPv2)\", RFC 1905, January\
    \ 1996.\n   [14] Levi, D., Meyer, P. and B. Stewart, \"SNMPv3 Applications\",\
    \ RFC\n        2273, January 1998.\n   [15] Wijnen, B., Presuhn, R. and K. McCloghrie,\
    \ \"View-based Access\n        Control Model (VACM) for the Simple Network Management\
    \ Protocol\n        (SNMP)\", RFC 2275, January 1998.\n   [16] Hovey, R. and S.\
    \ Bradner, \"The Organizations Involved in the\n        IETF Standards Process\"\
    , BCP 11, RFC 2028, October 1996.\n   [17] Berners-Lee, T., Fielding, R. and L.\
    \ Masinter, \" Uniform\n        Resource Identifiers (URI): Generic Syntax\",\
    \ RFC 2396, August\n        1998.\n   [18] Postel, J. and J. Reynolds, \"File\
    \ Transfer Protocol\", STD 9, RFC\n        959, October 1985.\n   [19] Fielding,\
    \ R., Gettys, J., Mogul, J., Frystyk, H. and T.\n        Berners-Lee, \"Hypertext\
    \ Transfer Protocol -- HTTP/1.1\", RFC\n        2068, January 1997.\n   [20] Narten,\
    \ T. and H. Alvestrand, \"Guidelines for Writing an IANA\n        Considerations\
    \ Section in RFCs\", BCP 26, RFC 2434, October 1998.\n   [21] Bradner, S., \"\
    Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n"
- title: 14.  Editors' Addresses
  contents:
  - "14.  Editors' Addresses\n   David B. Levi\n   Nortel Networks\n   4401 Great\
    \ America Parkway\n   Santa Clara, CA 95052-8185\n   U.S.A.\n   Phone: +1 423\
    \ 686 0432\n   EMail: dlevi@nortelnetworks.com\n   Juergen Schoenwaelder\n   TU\
    \ Braunschweig\n   Bueltenweg 74/75\n   38106 Braunschweig\n   Germany\n   Phone:\
    \ +49 531 391-3683\n   EMail: schoenw@ibr.cs.tu-bs.de\n"
- title: 16.  Full Copyright Statement
  contents:
  - "16.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
