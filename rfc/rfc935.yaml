- title: __initial_text__
  contents:
  - '                     RELIABLE LINK LAYER PROTOCOLS

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This RFC discusses protocols proposed recently in RFCs\
    \ 914 and 916,\n   and suggests a proposed protocol that could meet the same needs\n\
    \   addressed in those memos.  The stated need is reliable communication\n   between\
    \ two programs over a full-duplex, point-to-point communication\n   link, and\
    \ in particular the RFCs address the need for such\n   communication over an asynchronous\
    \ link at relatively low speeds.\n   The suggested protocol uses the methods of\
    \ existing national and\n   international data link layer standards.  This RFC\
    \ suggests a\n   proposed protocol for the ARPA-Internet community, and requests\n\
    \   discussion and suggestions for improvements.  Distribution of this\n   memo\
    \ is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   This RFC is motivated by recent RFCs 914 and 916, which propose\
    \ new\n   standards for protocols that transfer serial data reliably over\n  \
    \ asynchronous communication lines.  In this note, I summarize\n   widely-used\
    \ standards that have been in existence for some time that\n   might be appropriate\
    \ for this environment.  I hope that the existing\n   standards will be found\
    \ to meet the needs the new proposals seek to\n   address.\n   In both the US\
    \ and international standards areas, there are two major\n   categories of serial\
    \ data communication standards for the link layer.\n   These categories are character-oriented\
    \ and bit-oriented.  The first\n   is the older class; it is standardized in the\
    \ US standard ANSI\n   X3.28-1976 (which superseded the original version of 1971),\
    \ and in\n   the ISO standards IS 1745, IS 2111, IS 2628 and IS 2629.  Although\n\
    \   frequently used in synchronous environments, wherein the name binary\n   synchronous\
    \ (or bisynch) is used, these standards use the term \"basic\n   mode\" to describe\
    \ their procedures.  The latter class is standardized\n   in the US standard ADCCP\
    \ (Advanced Data Communication Control\n   Procedures), ANSI X3.66- 1979, and\
    \ in the ISO standard HDLC\n   (High-level Data Link Control procedures), in IS\
    \ 3309, IS 4335 and IS\n   7809.\n   Other international standards, draft standards\
    \ and vendor standards\n   follow the ADCCP/HDLC procedures.  Among these are\
    \ SDLC (IBM), X.25\n   LAPB (CCITT), IEEE 802.2/ISO 8802.2 LLC (LAN Logical Link\
    \ Control)\n   and ISDN LAPD (CCITT).  Many vendors have built equipment which\
    \ meets\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - "Reliable Link Layer Protocols\n   the character-oriented standards, in both synchronous\
    \ and\n   asynchronous environments, including all the major US mainframe\n  \
    \ manufacturers.\n   The only other serial link layer protocol known to the author\
    \ in as\n   wide use as these is DEC's DDCMP (Digital Data Communications Message\n\
    \   Protocol).  This protocol uses a character count instead of framing\n   characters,\
    \ but is in other respects a character-oriented protocol.\n   The next sections\
    \ of this note will compare the three protocols above\n   on several bases, paying\
    \ particular attention to the characteristics\n   that make particular aspects\
    \ of the protocol appropriate to the\n   low-speed, asynchronous, serial environment.\n"
- title: Frame Structure
  contents:
  - "Frame Structure\n   All serial protocols divide the data to be transmitted into\
    \ units\n   known as frames.  A frame is typically one to several hundred\n  \
    \ characters in length.  The frame structure is the major difference\n   used\
    \ above to divide the protocols into three classes.\n"
- title: Character-Oriented Framing
  contents:
  - "Character-Oriented Framing\n   Character-oriented protocols use two techniques\
    \ for defining a frame.\n   First, it is necessary to determine where characters\
    \ start and stop.\n   The technique used for this purpose is to transmit a number\
    \ of unique\n   characters prior to the start of a frame.  The character generally\n\
    \   used for this is the SYN character.\n   Note that this is not required when\
    \ using asynchronous transmission.\n   Since each character is itself framed by\
    \ start and stop bits, there\n   is never a question of where characters begin\
    \ and end.\n   The main technique for structuring a frame is the use of special\n\
    \   framing characters to delineate the start and end of a frame, and to\n   delineate\
    \ portions of the frame (such as header and text).  Some uses\n   of character-oriented\
    \ protocols require that these characters never\n   appear in the header or text\
    \ of the frame, while others allow\n   \"transparent\" transmission.  Transparency\
    \ is obtained by preceding\n   each framing character by a unique control character,\
    \ typically DLE.\n   In this way, all characters may be sent as header or text,\
    \ except for\n   DLE.  In order to allow DLE to be sent in the header or text,\
    \ the DLE\n   is doubled.\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - 'Reliable Link Layer Protocols

    '
- title: Bit-Oriented Framing
  contents:
  - "Bit-Oriented Framing\n   Bit-oriented protocols also use a unique character (technically,\
    \ it\n   is just an arbitrary bit-string) for frame delineation, which is the\n\
    \   FLAG.  This character provides frame synchronization.  All bits\n   between\
    \ two occurrences of FLAGs constitute a frame.  The FLAG is a 0\n   bit, followed\
    \ by six 1 bits, followed by another 0 bit.  In order\n   that the FLAG character\
    \ not appear mistakenly in the data of the\n   message, the sender inserts (and\
    \ the receiver removes) an extra 0 bit\n   after any five successive 1 bits in\
    \ the data stream.\n   Because this insertion of bits (\"stuffing\") results in\
    \ arbitrary\n   frame bit-lengths, bit-oriented protocols are generally useful\
    \ only\n   in synchronous transmission environments.  Although it has never been\n\
    \   attempted, however, one could imagine an asynchronous environment\n   where\
    \ each FLAG character that appears in the data is translated into\n   a two- character\
    \ sequence that avoids FLAGs, and at least one other\n   character is similarly\
    \ translated.  For example, one could frame data\n   with FLAGS, and send DLE-F\
    \ to mean FLAG and DLE-DLE to mean DLE when\n   these characters occur within\
    \ the frame.\n   Note that bit-oriented procedures do not require that the number\
    \ of\n   bits between FLAGs be an exact number of 8-bit characters, in\n   distinction\
    \ to character-oriented protocols and DDCMP.  The necessity\n   for character-alignment\
    \ may be imposed at higher layers, as it is,\n   for example, in X.25 Network\
    \ Layer.\n"
- title: Frame Structure in DDCMP
  contents:
  - "Frame Structure in DDCMP\n   DDCMP uses a third approach to frame structure.\
    \  Like\n   character-oriented protocols, it uses a SYN character to achieve\n\
    \   character synchronization prior to starting a frame, but one cannot\n   dispense\
    \ with this over asynchronous lines (see below).  Contained\n   within the fixed-length\
    \ header portion of the frame is a count field,\n   which reports how many characters\
    \ are contained in the\n   variable-length text portion.  Since no framing characters\
    \ are\n   required at all, transparency is not a problem.  However, because the\n\
    \   count must be received properly for the sender and receiver to stay\n   in\
    \ frame synchronization, the header is protected with a separate\n   error control\
    \ checksum, which is typically two characters long (see\n   below). Also, once\
    \ a header error has been detected, the count field\n   must be assumed to be\
    \ invalid, and so there must be a unique\n   character sequence that introduces\
    \ the next header in order that the\n   receiver can regain synchronization with\
    \ the sender.\n   Therefore, the SYN characters preceding a frame are required\
    \ even on\n   asynch lines.\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - 'Reliable Link Layer Protocols

    '
- title: Error Detection
  contents:
  - "Error Detection\n   Several types of error control may be used, and the various\
    \ protocols\n   above are similar.  Most synchronous uses require a cyclic redundancy\n\
    \   check sequence be attached to each frame.  This is a 16-bit sequence\n   which\
    \ can be easily generated and checked in hardware using a shift\n   register,\
    \ and can be somewhat more tediously done in software with\n   about 5-6 instructions\
    \ per character sent or received, and a 256 by\n   16-bit lookup table.  DDCMP\
    \ and Bit-oriented protocols all require\n   use of such a sequence.  As noted\
    \ above, DDCMP uses a check sequence\n   twice, once for the header and once for\
    \ the data.\n   In some environments, weaker checks are used on character-oriented\n\
    \   links.  These take two forms.  If the the number of significant bits\n   per\
    \ character is only 7, then the parity bit can be set to achieve\n   either odd\
    \ or even parity.  ANSI standard X3.16-1976 specifies that\n   odd parity should\
    \ be used on synchronous links and even parity on\n   asynchronous links.  The\
    \ second type of check is \"longitudinal\n   parity\", wherein one character is\
    \ added to the frame so that the\n   number of 1 bits in each bit position summed\
    \ over all the characters\n   of the message and the check character is even.\
    \  In other words, the\n   exclusive-or of all the characters is 0.  Character\
    \ parity and\n   longitudinal parity may be used together.\n   Note also that\
    \ most character-oriented control messages, such as\n   those that poll, select,\
    \ and acknowledge, are sent with only parity\n   for error control.\n"
- title: Sequence Control
  contents:
  - "Sequence Control\n   All these protocol provide reliable transmission by sequencing\
    \ the\n   frames and providing positive and (in some cases) negative\n   acknowledgments.\
    \  Senders can ask the receiver for status if a reply\n   is late.\n   In character-oriented\
    \ protocols, frames are implicitly numbered\n   (typically) and only one may be\
    \ outstanding at a time.\n   Acknowledgments are explicitly numbered.  One variant\
    \ allows each\n   block (frame) to be explicitly numbered as well; in this case\
    \ up to 7\n   may be outstanding.\n   In bit-oriented protocols, frames are explicitly\
    \ numbered and up to 7\n   may be outstanding at a time.  Optional control field\
    \ extension\n   allows for up to 127 outstanding.  An alternate procedure that\
    \ has\n   been defined for use both in the ISDN LAPD environment and in IEEE\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - "Reliable Link Layer Protocols\n   802 LAN environments uses, in effect, a one-bit\
    \ sequence number and\n   one outstanding frame.  Also, unsequenced, unacknowledged\
    \ information\n   frames can be used when frames need not be sent reliably.\n\
    \   In DDCMP, the frames are explicitly numbered and up to 255 may be\n   outstanding.\n"
- title: Addressing
  contents:
  - "Addressing\n   All of these protocols allow for addressing stations on a multipoint\n\
    \   link separately.  In LAN environments, both a sending and receiving\n   address\
    \ are required, whereas multipoint environments use a single\n   address and assume\
    \ one master station communicating with multiple\n   addressed slave stations.\
    \  In bit-oriented protocols, the address\n   provides extra information in that\
    \ frames can be categorized as\n   commands or responses; in this sense, the address\
    \ provides another\n   control bit per frame.  However, it is possible to operate\
    \ without\n   needing this distinction.\n   Addresses are typically one character\
    \ long; bit-oriented protocols\n   allow for extension of this field to arbitrary\
    \ length.\n   Character-oriented protocols use two-character (controller and\n\
    \   terminal) addresses.\n   For point-point operation, the address is clearly\
    \ superfluous (except\n   to distinguish commands and replies in bit-oriented\
    \ protocols); one\n   might imagine dispensing with it.\n"
- title: The Asynchronous Environment
  contents:
  - "The Asynchronous Environment\n   Which of these protocols is best for the asynchronous\
    \ environment?\n   This depends on the definition of \"best\", of course.  One\
    \ means of\n   judging is to compare the amount of overhead that each protocol\
    \ would\n   add to each frame sent.\n   We will examine the overhead costs in\
    \ two groups:\n      framing/transparency/error checking,\n      and addressing/control.\n\
    \   The two groups of functions are independent of each other, even\n   though\
    \ the protocols mentioned above use specific combinations of\n   techniques from\
    \ these two groups.  Also, hardware available on\n   minicomputer-class and larger\
    \ machines today supports the first group\n   of functions completely for these\
    \ standard protocols; this fact\n   should allow for far greater performance from\
    \ the gateway machine.\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - "Reliable Link Layer Protocols\n   To the extent that such hardware becomes available\
    \ for personal\n   computers, it can also be used there to reduce the protocol\n\
    \   processing overhead.  Here's a breakdown of framing costs in\n   characters.\
    \  RATP is also included for comparison.\n      Protocol   Frame   Check  Transp.\
    \  Total    F+C\n      char-or.     4       2       2       8       6\n      bit-or.\
    \      1       2       2       5       3\n      DDCMP        4       4       0\
    \       8       8\n      RATP         2       3       0       5       5\n   The\
    \ transparency column indicates the anticipated cost in inserted\n   characters\
    \ to achieve transparency across a 256-byte frame.  The\n   figure for bit-oriented\
    \ protocols is a pessimistic guess, because I\n   don't know the exact answer;\
    \ it is between 0 and 8 characters, with\n   the worst case occurring when the\
    \ data is all one bits.  For\n   character-oriented protocols, we would expect\
    \ on average one DLE\n   character in a 256-byte frame; the worst case overhead\
    \ (256 DLEs) is\n   256 bytes.\n   Because transparency is so much a function\
    \ of the user data, and\n   because we have ignored the cost of loss of frame\
    \ synchronization in\n   the counting protocols (DDCMP and RATP), I argue that\
    \ we should base\n   the comparison on the frame and checksum costs only.  For\
    \ these two\n   columns, character-oriented framing costs one more character per\n\
    \   frame than RATP. This, plus its wide use and hardware chip support,\n   create\
    \ a strong case for its use in preference to RATP for framing.\n   Bit-oriented\
    \ framing, as noted previously, is appropriate only on\n   synchronous links.\
    \  The character oriented variant I postulated above\n   would have the same costs,\
    \ but as it is not a standard, it is not\n   proposed here.  So we now have constructed\
    \ the following frame\n   format:\n      DLE STX <control and data ...> DLE ETX\
    \ CRC CRC\n   One objection to using character-oriented protocols as opposed to\n\
    \   character-count protocols is that it is necessary to examine every\n   character\
    \ as it arrives.  I respond to this objection as follows:\n      1.  Under some\
    \ circumstances, such as when a header has been hit\n      with an error, it will\
    \ be necessary for the receiver to look at\n      every character anyway.\n  \
    \    2.  The environment for this protocol is a 1200 baud link; thus\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - "Reliable Link Layer Protocols\n      120 characters per second need to be examined\
    \ at a maximum.  Even\n      on a relatively slow personal computer, this should\
    \ not present a\n      problem.\n   We now turn our attention to the content and\
    \ format of the control\n   information preceding each link frame.  There are\
    \ three components to\n   this cost, control, address, and acknowledgment.  The\
    \ address field\n   allows multipoint configurations and is superfluous for the\n\
    \   point-to-point environment proposed, but it is present in the public\n   standards\
    \ and we restrict ourselves to those.\n   Acknowledgments are shown if they are\
    \ required explicitly by the\n   protocol.  A \"0\" indicates that the acknowledgments\
    \ may be included\n   in the control information for traffic in the opposite direction,\
    \ and\n   only need be sent explicitly when no reverse traffic is present (and\n\
    \   thus are assumed to take no required overhead).  Only\n   character-oriented\
    \ protocols have required acknowledgments.\n                 Cont.   Addr.   \
    \ Ack    Total\n      char-or.     0       3       2       5\n      bit-or.  \
    \    1       1       0       2\n      DDCMP        3       1       0       4\n\
    \      RATP         1       0       0       1\n   Again, the bit-oriented procedures\
    \ provide the lowest overhead among\n   the public standards, but in this case\
    \ there is no conflict in using\n   them in the asynchronous environment.  In\
    \ fact, even if all the other\n   aspects of RATP were to be adopted, I believe\
    \ the control field\n   codings of the bit- oriented procedures represent a more\
    \ efficient\n   use of the channel, are widely implemented, and allow for addition\
    \ of\n   more functions later if desired.  As stated above, there are several\n\
    \   protocols in the bit-oriented family.  I would recommend use of LAPB,\n  \
    \ since this is the most widely known of the family.\n   For those not familiar\
    \ with bit-oriented control procedures, I have\n   included a quick summary of\
    \ these procedures in Appendix A.  Refer to\n   the standards listed at the end\
    \ of this note for more detail.\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - 'Reliable Link Layer Protocols

    '
- title: RATP Compared to Public Protocols
  contents:
  - "RATP Compared to Public Protocols\n   As can be seen from the above tables, RATP\
    \ does not represent a\n   significant savings compared to other widely-used protocols.\n\
    \   Given frame lengths of 13 bytes, which appears to be the minimum for\n   Thinwire\
    \ II (RFC 914), 8 characters' overhead using the public\n   standards represents\
    \ 61% versus 46% for RATP's 6 characters.  On a\n   1200 baud line, the bandwidth\
    \ available assuming only such short\n   frames is thus 74 versus 82 characters\
    \ per second, respectively.\n   Since 1/13 of these are actually user data, the\
    \ typing rates\n   supported by these protocols using TCP/IP are pretty low, like\
    \ 5.6\n   versus 6.3 characters per second.  Clearly a bigger cost is still\n\
    \   found in the 12 characters overhead in Thinwire II (or 40 for TCP/IP\n   with\
    \ no compression).\n   The costs improve dramatically when the number of user\
    \ characters per\n   frame increases.  Thus, file transfer, or even line-blocked\
    \ typing,\n   should perform adequately.  As frame size grows, the cost of the\n\
    \   extra 2 characters per frame to use standard protocols rapidly drops\n   to\
    \ a few percent or less.\n   RATP does allow one optimization which cannot be\
    \ achieved in the\n   standard protocols - the use of a one-character format that\
    \ reduces\n   the per-frame overhead to 3 characters (or 4 if a 16-bit CRC is\n\
    \   used).  However, in the scenario wherein single-character messages\n   make\
    \ sense, a user typing characters (with no higher layer\n   protocols), the extra\
    \ overhead is probably not a problem since the\n   link is still lightly enough\
    \ loaded that the extra overhead is still\n   a small percentage of the available\
    \ bandwidth.  Also, allowing\n   multiple frames in flight helps reduce the bottleneck\
    \ caused by\n   having one frame at a time outstanding.\n"
- title: On Check Sequences
  contents:
  - "On Check Sequences\n   Both RFCs 914 and 916 propose to use relatively simple\
    \ check\n   sequences, which can be easily computed in a general-purpose\n   processor.\
    \  In one case, this is an additive check and in the other\n   it is an exclusive-or\
    \ (or parity) check.  Although the additive check\n   is slightly more powerful\
    \ than the exclusive-or, both are relatively\n   weak compared to CRC techniques.\n\
    \   Since the intended network-layer protocol (IP) provides for similar\n   checks\
    \ on its header, and the transport layer (TCP) checksums its\n   header and data,\
    \ one might question whether the protection should\n   also be provided at the\
    \ link layer at all, or if it should, then are\n   these checks good enough? \
    \ Providing for recovery at the TCP layer\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - "Reliable Link Layer Protocols\n   leads to slow recovery times, so this approach\
    \ will probably yield\n   too poor a level of service for noisy links.  More importantly,\
    \ the\n   link layer control field needs a certain degree of protection to\n \
    \  prevent needless loss or duplication of frames in the face of line\n   errors.\n\
    \   A CRC check, in combination with the additive checks provided by IP\n   and\
    \ TCP, yield an error-protection that is greater than that afforded\n   by either\
    \ check by itself.  This is because the two techniques\n   address fundamentally\
    \ different characteristics of the possible\n   errors.  The degree of increase\
    \ is substantial compared to that of\n   two additive checks.  That is, if two\
    \ additive checks are cascaded,\n   there are many types of two-bit failures that\
    \ will pass both the link\n   layer and TCP/IP checking.\n   Although I don't\
    \ wish to include a detailed error analysis in this\n   note, I would support\
    \ the use of a CRC type of error check because of\n   the far greater level of\
    \ protection it affords.  As I pointed out,\n   the cost per character is roughly\
    \ 5-6 instructions, assuming the use\n   of a 256 by 16-bit lookup table.  Again,\
    \ at 120 characters per\n   second, the increased cost is not deemed to be too\
    \ great.\n   Moreover, use of a standard CRC allows for the possibility that the\n\
    \   serial line chip's own CRC generation and checking hardware may be\n   used.\
    \  Although such chips may not be present in the PCs in the\n   environment envisioned,\
    \ they are likely to be available in the\n   gateway machine to which the PCs\
    \ talk.\n"
- title: 'Data Compression: An Aside'
  contents:
  - "Data Compression: An Aside\n   I find the proposed methods of data compression\
    \ of RFC 914\n   particularly interesting.  I see these as independent of the\
    \ choice\n   of the underlying link layer protocol, as it is in RFC 914.  I am\n\
    \   aware of no such character-oriented compression that is in common use\n  \
    \ in the communication world.  The only techniques that come close are\n   in\
    \ statistical multiplexing devices, which sometimes also include an\n   adaptive\
    \ Huffman-coding to reduce link bandwidth.  Since the Thinwire\n   II approach\
    \ can recognize much longer repeated sequences than a\n   Huffman code, I expect\
    \ that the potential savings are correspondingly\n   greater.\n   I would like\
    \ to see a version of the Thinwire protocols which allows\n   for the template\
    \ idea, but which keeps it independent of the higher\n   layer protocols in use.\
    \  One way to achieve this is to allow\n   templates to be encoded and exchanged\
    \ between the communicating\n   parties when they start up, and perhaps adaptively\
    \ as conditions\n   warrant.  I would anticipate that this sort of approach might\
    \ well\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - "Reliable Link Layer Protocols\n   have widespread applicability beyond the TCP/IP\
    \ environment addressed\n   in RFC 914.  The most important gain for this environment\
    \ is removal\n   of the apparent exorbitant overhead that IP and TCP seem to present\n\
    \   for use over slow links.\n"
- title: Summary
  contents:
  - "Summary\n   The link layer protocol I would advocate for asynchronous, dialup\n\
    \   communication between PCs would use transparent, character-oriented\n   framing,\
    \ a 16-bit CRC error check, and the control procedures of\n   LAPB.  The CRC should\
    \ be either CRC-16 or the CCITT CRC used in X.25,\n   with the latter probably\
    \ being preferred; modern link chips tend to\n   support both of these if they\
    \ support either.\n   Evolution of integrated circuits that directly implement\
    \ all of the\n   public standards will dramatically drop the cost and raise the\n\
    \   reliability of new implementations of standard protocols.  Chip\n   manufacturers\
    \ have little motivation to address standards that are\n   not widely used.\n\
    \   Overhead for the suggested protocol is 8 characters per frame.  Up to\n  \
    \ 7 frames may be outstanding at a time in either direction of\n   transfer. \
    \ Choice of an appropriate maximum frame size is\n   application-dependent, and\
    \ would certainly be influenced by the\n   quality of the physical connection;\
    \ however, I believe that IP\n   datagrams are acceptable frames for dialup 1200\
    \ baud service.\n   Non-standard modifications that would save a little link overhead\n\
    \   would be to dispense with the one-character address field, and to use\n  \
    \ the RATP count-oriented frame structure.  These are not recommended,\n   because\
    \ they depart from common practice and yield modest\n   improvements at best.\n"
- title: Postscript
  contents:
  - "Postscript\n   Those familiar with the early history of the Telenet Public Data\n\
    \   Network should recognize that this proposal is essentially the same\n   as\
    \ the original link layer protocol specification for that network,\n   circa 1976,\
    \ except that the control procedures used at that time,\n   known as LAP, have\
    \ now been superseded by the more powerful and\n   efficient LAPB, and their access\
    \ links, as all X.25 access links, are\n   synchronous rather than asynchronous.\
    \  I did not set out to achieve\n   this result, but just note it in passing.\n\
    \   My personal view of where the world of personal computer access to\n   data\
    \ networks is heading is that X.25 will rapidly become the\n   protocol of choice.\
    \  One already sees third-party (for IBM PC) and\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - "Reliable Link Layer Protocols\n   vendor (for Wang PC) implementations of X.25.\
    \ CCITT is circulating a\n   proposal for accessing an X.25 data network using\
    \ a dial-up X.25\n   connection, as recommendation X.32.  Thus, I feel that the\
    \ type of\n   communication proposed in this RFC and RFCs 914 and 916 will be\
    \ used\n   for a relatively short period of time.  The future holds, I believe,\n\
    \   LAN or X.25/X.32 data link layer and access, X.25 and/or ISO IP\n   network\
    \ layer, and TCP and/or ISO TP4 transport layer.\n"
- title: References
  contents:
  - "References\n   RFC 914, \"Thinwire Protocol\", Farber, Delp and Conte, 1984.\n\
    \   RFC 916, \"Reliable Asynchronous Transfer Protocol\", Finn, 1984.\n   \"Technical\
    \ Aspects of Data Communication\", McNamara, Digital Press,\n   1977.\n   ANSI\
    \ X3.4-1968, \"American National Standard Code for Information\n   Interchange\
    \ (ASCII)\", American National Standards Institute, Inc.,\n   1968.\n   ANSI X3.16-1976,\
    \ \"American National Standard Character Structure and\n   Character Parity Sense\
    \ for Serial-by-Bit Data Communication in the\n   American National Standard Code\
    \ for Information Interchange\",\n   American National Standards Institute, Inc.,\
    \ 1976.\n   ANSI X3.28-1976, \"American National Standard Procedures for the Use\n\
    \   of the Communication Control Characters of American National Standard\n  \
    \ Code for Information Interchange in Specified Data Communication\n   Links\"\
    , American National Standards Institute, Inc., 1976.\n   ANSI X3.66-1979, \"American\
    \ National Standard for Advanced Data\n   Communication Procedures (ADCCP)\",\
    \ American National Standards\n   Institute, Inc., 1979.\n   International Standard\
    \ 1745, \"Information Processing - Basic mode\n   control procedures for data\
    \ communication systems\", International\n   Organization for Standardization\
    \ (ISO), 1975.\n   International Standard 2111, \"Data Communication - Basic mode\
    \ control\n   procedures - Code independent information transfer\", ISO, 1973.\n\
    \   International Standard 2628, \"Basic mode control procedures -\n   Complements\"\
    , ISO, 1973.\n   International Standard 2629, \"Basic mode control procedures\
    \ -\n   Conversational information message transfer\", ISO, 1973.\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - "Reliable Link Layer Protocols\n   International Standard 3309, \"Data Communication\
    \ - High-level data\n   link control procedures - Frame structure\", ISO, 1982.\n\
    \   International Standard 4335, \"Data Communication - High-level data\n   link\
    \ control procedures - Consolidation of elements of procedures\",\n   ISO, 1982.\n\
    \   International Standard 7809, \"Data Communication - High-level data\n   link\
    \ control procedures - Consolidation of classes of procedures\",\n   ISO, 1984.\n\
    \   Recommendation X.25, \"Interface between Data Terminal Equipment (DTE)\n \
    \  and Data Circuit Terminating Equipment (DCE) for Terminals Operating\n   in\
    \ the Packet Mode and Connected to Public Data Networks by Dedicated\n   Circuit\"\
    , The International Telegraph and Telephone Consultative\n   Committee (CCITT),\
    \ 1980 (to be revised, 1984).\n   Recommendation Q.920, \"ISDN User-network Interface\
    \ Data Link Layer -\n   General Aspects\", CCITT, 1984 (draft E).\n   Recommendation\
    \ Q.921, \"ISDN User-network Interface Data Link Layer\n   Specification\", CCITT,\
    \ 1984 (draft E).\n   Draft International Standard 8802.2, \"Local Area Network\
    \ Standards,\n   Logical Link Control\", ISO, 1984 (draft).\n   Draft Proposed\
    \ Addendum to DIS 8802.2, \"Single Frame Service\", IEEE,\n   1984 (Eighth Draft).\n"
- title: RFC 935                                                     January 1985
  contents:
  - 'RFC 935                                                     January 1985

    '
- title: Reliable Link Layer Protocols
  contents:
  - 'Reliable Link Layer Protocols

    '
- title: Appendix A - Bit-Oriented Control Field Contents
  contents:
  - "Appendix A - Bit-Oriented Control Field Contents\n   There are three control\
    \ field formats.  The primary one is used for\n   data frames (called \"information\
    \ frames\" in the standards), and is\n   coded as follows:\n      8  7  6  5 \
    \ 4  3  2  1  <- bit number,  1 sent first\n                           0     (signifies\
    \ data frame)\n                  S  S  S        send seq , bit 2 low-order\n \
    \             P/F                poll/final bit, for recovery\n      R  R  R \
    \                   receive seq  (ACK)\n   Acknowledgments are cumulative.  Recovery\
    \ is typically to back up and\n   continue from the lost frame.  Use of the poll/final\
    \ bit is beyond\n   the scope of this note.\n   Acknowledgments may also be sent\
    \ in supervisory frames, coded as\n   follows:\n      8  7  6  5  4  3  2  1 \
    \ <- bit number,  1 sent first\n                        0  1     (signifies supervisory\
    \ frame)\n                  T  T           frame type (see below)\n          \
    \    P/F                poll/final bit, for recovery\n      R  R  R          \
    \          receive seq  (ACK)\n   Up to four frame types are possible; only two\
    \ are required.  The\n   first is called RR, for \"receive ready\", and indicates\
    \ acknowledgment\n   and that the receiver is prepared to process more frames.\
    \  The other,\n   RNR for \"receive not ready\", is used for flow control of the\
    \ sender.\n   If flow control is not necessary, I suppose even this frame could\
    \ be\n   dispensed with.\n   The other supervisory frames, \"reject\" and \"selective\
    \ reject\", are\n   varieties of negative acknowledgement that ask for retransmission\
    \ of\n   all and one (respectively) of previously transmitted frames.\n   Positive\
    \ acknowledgment and retransmission are the only really\n   necessary procedures,\
    \ however.\n   The third frame format is called Unnumbered.  Many possible functions\n\
    \   are specified in the various standards for these frames, including\n   initializing\
    \ the link, reset sequence numbers, etc.  The basic format\n   is:\n      8  7\
    \  6  5  4  3  2  1  <- bit number,  1 sent first\n                        1 \
    \ 1     (signifies unnumbered frame)\n            T  T  T     T  T           frame\
    \ type\n                    P/F                poll/final bit, for recovery\n"
- title: Robinson                                                       [Page 13]
  contents:
  - 'Robinson                                                       [Page 13]

    '
