- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                     M. Nottingham
  contents:
  - "Independent Submission                                     M. Nottingham\n  \
    \          HTTP Cache-Control Extensions for Stale Content\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines two independent HTTP Cache-Control extensions\n\
    \   that allow control over the use of stale responses by caches.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5861.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 2\n   2.  Notational Conventions  . . . . . . . . . . . . . . .\
    \ . . . . . 2\n   3.  The stale-while-revalidate Cache-Control Extension  . .\
    \ . . . . 2\n     3.1.  Example . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 3\n   4.  The stale-if-error Cache-Control Extension  . . . . . . . .\
    \ . . 3\n     4.1.  Example . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 4\n   5.  Security Considerations . . . . . . . . . . . . . . . . . . . .\
    \ 5\n   6.  Normative References  . . . . . . . . . . . . . . . . . . . . . 5\n\
    \   Appendix A.  Acknowledgements . . . . . . . . . . . . . . . . . . . 6\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   HTTP [RFC2616] requires that caches \"respond to a request\
    \ with the\n   most up-to-date response held... that is appropriate to the request,\"\
    \n   although \"in carefully considered circumstances\" a stale response is\n\
    \   allowed to be returned.  This document defines two independent Cache-\n  \
    \ Control extensions that allow for such control, stale-if-error and\n   stale-while-revalidate.\n\
    \   The stale-if-error HTTP Cache-Control extension allows a cache to\n   return\
    \ a stale response when an error -- e.g., a 500 Internal Server\n   Error, a network\
    \ segment, or DNS failure -- is encountered, rather\n   than returning a \"hard\"\
    \ error.  This improves availability.\n   The stale-while-revalidate HTTP Cache-Control\
    \ extension allows a\n   cache to immediately return a stale response while it\
    \ revalidates it\n   in the background, thereby hiding latency (both in the network\
    \ and on\n   the server) from clients.\n"
- title: 2.  Notational Conventions
  contents:
  - "2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n   This specification uses the augmented Backus-Naur\
    \ Form of RFC 2616\n   [RFC2616], and it includes the delta-seconds rule from\
    \ that\n   specification.\n"
- title: 3.  The stale-while-revalidate Cache-Control Extension
  contents:
  - "3.  The stale-while-revalidate Cache-Control Extension\n   When present in an\
    \ HTTP response, the stale-while-revalidate Cache-\n   Control extension indicates\
    \ that caches MAY serve the response in\n   which it appears after it becomes\
    \ stale, up to the indicated number\n   of seconds.\n     stale-while-revalidate\
    \ = \"stale-while-revalidate\" \"=\" delta-seconds\n   If a cached response is\
    \ served stale due to the presence of this\n   extension, the cache SHOULD attempt\
    \ to revalidate it while still\n   serving stale responses (i.e., without blocking).\n\
    \   Note that \"stale\" implies that the response will have a non-zero Age\n \
    \  header and a warning header, as per HTTP's requirements.\n   If delta-seconds\
    \ passes without the cached entity being revalidated,\n   it SHOULD NOT continue\
    \ to be served stale, absent other information.\n"
- title: 3.1.  Example
  contents:
  - "3.1.  Example\n   A response containing:\n     Cache-Control: max-age=600, stale-while-revalidate=30\n\
    \   indicates that it is fresh for 600 seconds, and it may continue to be\n  \
    \ served stale for up to an additional 30 seconds while an asynchronous\n   validation\
    \ is attempted.  If validation is inconclusive, or if there\n   is not traffic\
    \ that triggers it, after 30 seconds the stale-while-\n   revalidate function\
    \ will cease to operate, and the cached response\n   will be \"truly\" stale (i.e.,\
    \ the next request will block and be\n   handled normally).\n   Generally, servers\
    \ will want to set the combination of max-age and\n   stale-while-revalidate to\
    \ the longest total potential freshness\n   lifetime that they can tolerate. \
    \ For example, with both set to 600,\n   the server must be able to tolerate the\
    \ response being served from\n   cache for up to 20 minutes.\n   Since asynchronous\
    \ validation will only happen if a request occurs\n   after the response has become\
    \ stale, but before the end of the stale-\n   while-revalidate window, the size\
    \ of that window and the likelihood\n   of a request during it determines how\
    \ likely it is that all requests\n   will be served without delay.  If the window\
    \ is too small, or traffic\n   is too sparse, some requests will fall outside\
    \ of it, and block until\n   the server can validate the cached response.\n"
- title: 4.  The stale-if-error Cache-Control Extension
  contents:
  - "4.  The stale-if-error Cache-Control Extension\n   The stale-if-error Cache-Control\
    \ extension indicates that when an\n   error is encountered, a cached stale response\
    \ MAY be used to satisfy\n   the request, regardless of other freshness information.\n\
    \     stale-if-error = \"stale-if-error\" \"=\" delta-seconds\n   When used as\
    \ a request Cache-Control extension, its scope of\n   application is the request\
    \ it appears in; when used as a response\n   Cache-Control extension, its scope\
    \ is any request applicable to the\n   cached response in which it occurs.\n \
    \  Its value indicates the upper limit to staleness; when the cached\n   response\
    \ is more stale than the indicated amount, the cached response\n   SHOULD NOT\
    \ be used to satisfy the request, absent other information.\n   In this context,\
    \ an error is any situation that would result in a\n   500, 502, 503, or 504 HTTP\
    \ response status code being returned.\n   Note that this directive does not affect\
    \ freshness; stale cached\n   responses that are used SHOULD still be visibly\
    \ stale when sent\n   (i.e., have a non-zero Age header and a warning header,\
    \ as per HTTP's\n   requirements).\n"
- title: 4.1.  Example
  contents:
  - "4.1.  Example\n   A response containing:\n     HTTP/1.1 200 OK\n     Cache-Control:\
    \ max-age=600, stale-if-error=1200\n     Content-Type: text/plain\n     success\n\
    \   indicates that it is fresh for 600 seconds, and that it may be used\n   if\
    \ an error is encountered after becoming stale for an additional\n   1200 seconds.\n\
    \   Thus, if the cache attempts to validate 900 seconds afterwards and\n   encounters:\n\
    \     HTTP/1.1 500 Internal Server Error\n     Content-Type: text/plain\n    \
    \ failure\n   the successful response can be returned instead:\n     HTTP/1.1\
    \ 200 OK\n     Cache-Control: max-age=600, stale-if-error=1200\n     Age: 900\n\
    \     Content-Type: text/plain\n     success\n   After the age is greater than\
    \ 1800 seconds (i.e., it has been stale\n   for 1200 seconds), the cache must\
    \ write the error message through.\n     HTTP/1.1 500 Internal Server Error\n\
    \     Content-Type: text/plain\n     failure\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The stale-while-revalidate extension provides\
    \ origin servers with a\n   mechanism for dictating that stale content should\
    \ be served from\n   caches under certain circumstances, with the expectation\
    \ that the\n   cached response will be revalidated in the background.  It is\n\
    \   suggested that such validation be predicated upon an incoming\n   request,\
    \ to avoid the possibility of an amplification attack (as can\n   be seen in some\
    \ other pre-fetching and automatic refresh mechanisms).\n   Cache implementers\
    \ should keep this in mind when deciding the\n   circumstances under which they\
    \ will generate a request that is not\n   directly initiated by a user or client.\n\
    \   The stale-if-error provides origin servers and clients a mechanism\n   for\
    \ dictating that stale content should be served from caches under\n   certain\
    \ circumstances, and does not pose additional security\n   considerations over\
    \ those of RFC 2616, which also allows stale\n   content to be served.\n"
- title: 6.  Normative References
  contents:
  - "6.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n           \
    \   Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer\
    \ Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   Thanks to Ben Drees, John Nienart, Henrik Nordstrom,\
    \ Evan Torrie, and\n   Chris Westin for their suggestions.  The author takes all\n\
    \   responsibility for errors and omissions.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mark Nottingham\n   Yahoo! Inc.\n   EMail: mnot@yahoo-inc.com\n\
    \   URI:   http://www.mnot.net/\n"
