- title: __initial_text__
  contents:
  - "            A Conservative Loss Recovery Algorithm Based on\n               \
    \ Selective Acknowledgment (SACK) for TCP\n"
- title: Abstract
  contents:
  - "Abstract\n   This document presents a conservative loss recovery algorithm for\
    \ TCP\n   that is based on the use of the selective acknowledgment (SACK) TCP\n\
    \   option.  The algorithm presented in this document conforms to the\n   spirit\
    \ of the current congestion control specification (RFC 5681),\n   but allows TCP\
    \ senders to recover more effectively when multiple\n   segments are lost from\
    \ a single flight of data.  This document\n   obsoletes RFC 3517 and describes\
    \ changes from it.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by\n   the Internet Engineering\
    \ Steering Group (IESG).  Further\n   information on Internet Standards is available\
    \ in Section 2 of\n   RFC 5741.\n   Information about the current status of this\
    \ document, any\n   errata, and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6675.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document presents a conservative loss recovery algorithm\
    \ for TCP\n   that is based on the use of the selective acknowledgment (SACK)\
    \ TCP\n   option.  While the TCP SACK option [RFC2018] is being steadily\n   deployed\
    \ in the Internet [All00], there is evidence that hosts are\n   not using the\
    \ SACK information when making retransmission and\n   congestion control decisions\
    \ [PF01].  The goal of this document is to\n   outline one straightforward method\
    \ for TCP implementations to use\n   SACK information to increase performance.\n\
    \   [RFC5681] allows advanced loss recovery algorithms to be used by TCP\n   [RFC793]\
    \ provided that they follow the spirit of TCP's congestion\n   control algorithms\
    \ [RFC5681] [RFC2914].  [RFC6582] outlines one such\n   advanced recovery algorithm\
    \ called NewReno.  This document outlines a\n   loss recovery algorithm that uses\
    \ the SACK TCP option [RFC2018] to\n   enhance TCP's loss recovery.  The algorithm\
    \ outlined in this\n   document, heavily based on the algorithm detailed in [FF96],\
    \ is a\n   conservative replacement of the fast recovery algorithm [Jac90]\n \
    \  [RFC5681].  The algorithm specified in this document is a\n   straightforward\
    \ SACK-based loss recovery strategy that follows the\n   guidelines set in [RFC5681]\
    \ and can safely be used in TCP\n   implementations.  Alternate SACK-based loss\
    \ recovery methods can be\n   used in TCP as implementers see fit (as long as\
    \ the alternate\n   algorithms follow the guidelines provided in [RFC5681]). \
    \ Please\n   note, however, that the SACK-based decisions in this document (such\n\
    \   as what segments are to be sent at what time) are largely decoupled\n   from\
    \ the congestion control algorithms, and as such can be treated as\n   separate\
    \ issues if so desired.\n   This document represents a revision of [RFC3517] to\
    \ address several\n   situations that are not handled explicitly in that document.\
    \  A\n   summary of the changes between this document and [RFC3517] can be\n \
    \  found in Section 9.\n"
- title: 2.   Definitions
  contents:
  - "2.   Definitions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119\n   [RFC2119].\n   The reader is expected to be familiar with the\
    \ definitions given in\n   [RFC5681].\n   The reader is assumed to be familiar\
    \ with selective acknowledgments\n   as specified in [RFC2018].\n   For the purposes\
    \ of explaining the SACK-based loss recovery\n   algorithm, we define six variables\
    \ that a TCP sender stores:\n      \"HighACK\" is the sequence number of the highest\
    \ byte of data that\n      has been cumulatively ACKed at a given point.\n   \
    \   \"HighData\" is the highest sequence number transmitted at a given\n     \
    \ point.\n      \"HighRxt\" is the highest sequence number which has been\n  \
    \    retransmitted during the current loss recovery phase.\n      \"RescueRxt\"\
    \ is the highest sequence number which has been\n      optimistically retransmitted\
    \ to prevent stalling of the ACK clock\n      when there is loss at the end of\
    \ the window and no new data is\n      available for transmission.\n      \"Pipe\"\
    \ is a sender's estimate of the number of bytes outstanding\n      in the network.\
    \  This is used during recovery for limiting the\n      sender's sending rate.\
    \  The pipe variable allows TCP to use\n      fundamentally different congestion\
    \ control than the algorithm\n      specified in [RFC5681].  The congestion control\
    \ algorithm using\n      the pipe estimate is often referred to as the \"pipe\
    \ algorithm\".\n      \"DupAcks\" is the number of duplicate acknowledgments received\n\
    \      since the last cumulative acknowledgment.\n   For the purposes of this\
    \ specification, we define a \"duplicate\n   acknowledgment\" as a segment that\
    \ arrives carrying a SACK block that\n   identifies previously unacknowledged\
    \ and un-SACKed octets between\n   HighACK and HighData.  Note that an ACK which\
    \ carries new SACK data\n   is counted as a duplicate acknowledgment under this\
    \ definition even\n   if it carries new data, changes the advertised window, or\
    \ moves the\n   cumulative acknowledgment point, which is different from the\n\
    \   definition of duplicate acknowledgment in [RFC5681].\n   We define a variable\
    \ \"DupThresh\" that holds the number of duplicate\n   acknowledgments required\
    \ to trigger a retransmission.  Per [RFC5681],\n   this threshold is defined to\
    \ be 3 duplicate acknowledgments.\n   However, implementers should consult any\
    \ updates to [RFC5681] to\n   determine the current value for DupThresh (or method\
    \ for determining\n   its value).\n   Finally, a range of sequence numbers [A,B]\
    \ is said to \"cover\"\n   sequence number S if A <= S <= B.\n"
- title: 3.   Keeping Track of SACK Information
  contents:
  - "3.   Keeping Track of SACK Information\n   For a TCP sender to implement the\
    \ algorithm defined in the next\n   section, it must keep a data structure to\
    \ store incoming selective\n   acknowledgment information on a per connection\
    \ basis.  Such a data\n   structure is commonly called the \"scoreboard\".  The\
    \ specifics of the\n   scoreboard data structure are out of scope for this document\
    \ (as long\n   as the implementation can perform all functions required by this\n\
    \   specification).\n   Note that this document refers to keeping account of (marking)\n\
    \   individual octets of data transferred across a TCP connection.  A\n   real-world\
    \ implementation of the scoreboard would likely prefer to\n   manage this data\
    \ as sequence number ranges.  The algorithms presented\n   here allow this, but\
    \ require the ability to mark arbitrary sequence\n   number ranges as having been\
    \ selectively acknowledged.\n   Finally, note that the algorithm in this document\
    \ assumes a sender\n   that is not keeping track of segment boundaries after transmitting\
    \ a\n   segment.  It is possible that there is a more refined and precise\n  \
    \ algorithm available to a sender that keeps this extra state than the\n   algorithm\
    \ presented herein; however, we leave this as future work.\n"
- title: 4.   Processing and Acting Upon SACK Information
  contents:
  - "4.   Processing and Acting Upon SACK Information\n   This section describes a\
    \ specific structure and control flow for\n   implementing the TCP behavior described\
    \ by this standard.  The\n   behavior is what is standardized, and this particular\
    \ collection of\n   functions is the strongly recommended means of implementing\
    \ that\n   behavior, though other approaches to achieving that behavior are\n\
    \   feasible.\n   The definition of Sender Maximum Segment Size (SMSS) used in\
    \ this\n   section is provided in [RFC5681].\n   For the purposes of the algorithm\
    \ defined in this document, the\n   scoreboard SHOULD implement the following\
    \ functions:\n   Update ():\n      Given the information provided in an ACK, each\
    \ octet that is\n      cumulatively ACKed or SACKed should be marked accordingly\
    \ in the\n      scoreboard data structure, and the total number of octets SACKed\n\
    \      should be recorded.\n      Note: SACK information is advisory and therefore\
    \ SACKed data MUST\n      NOT be removed from the TCP's retransmission buffer\
    \ until the data\n      is cumulatively acknowledged [RFC2018].\n   IsLost (SeqNum):\n\
    \      This routine returns whether the given sequence number is\n      considered\
    \ to be lost.  The routine returns true when either\n      DupThresh discontiguous\
    \ SACKed sequences have arrived above\n      'SeqNum' or more than (DupThresh\
    \ - 1) * SMSS bytes with sequence\n      numbers greater than 'SeqNum' have been\
    \ SACKed.  Otherwise, the\n      routine returns false.\n   SetPipe ():\n    \
    \  This routine traverses the sequence space from HighACK to HighData\n      and\
    \ MUST set the \"pipe\" variable to an estimate of the number of\n      octets\
    \ that are currently in transit between the TCP sender and\n      the TCP receiver.\
    \  After initializing pipe to zero, the following\n      steps are taken for each\
    \ octet 'S1' in the sequence space between\n      HighACK and HighData that has\
    \ not been SACKed:\n      (a) If IsLost (S1) returns false:\n         Pipe is\
    \ incremented by 1 octet.\n         The effect of this condition is that pipe\
    \ is incremented for\n         packets that have not been SACKed and have not\
    \ been determined\n         to have been lost (i.e., those segments that are still\
    \ assumed\n         to be in the network).\n      (b) If S1 <= HighRxt:\n    \
    \     Pipe is incremented by 1 octet.\n         The effect of this condition is\
    \ that pipe is incremented for\n         the retransmission of the octet.\n  \
    \    Note that octets retransmitted without being considered lost are\n      counted\
    \ twice by the above mechanism.\n   NextSeg ():\n      This routine uses the scoreboard\
    \ data structure maintained by the\n      Update() function to determine what\
    \ to transmit based on the SACK\n      information that has arrived from the data\
    \ receiver (and hence\n      been marked in the scoreboard).  NextSeg () MUST\
    \ return the\n      sequence number range of the next segment that is to be\n\
    \      transmitted, per the following rules:\n      (1) If there exists a smallest\
    \ unSACKed sequence number 'S2' that\n          meets the following three criteria\
    \ for determining loss, the\n          sequence range of one segment of up to\
    \ SMSS octets starting\n          with S2 MUST be returned.\n          (1.a) S2\
    \ is greater than HighRxt.\n          (1.b) S2 is less than the highest octet\
    \ covered by any\n                received SACK.\n          (1.c) IsLost (S2)\
    \ returns true.\n      (2) If no sequence number 'S2' per rule (1) exists but\
    \ there\n          exists available unsent data and the receiver's advertised\n\
    \          window allows, the sequence range of one segment of up to SMSS\n  \
    \        octets of previously unsent data starting with sequence number\n    \
    \      HighData+1 MUST be returned.\n      (3) If the conditions for rules (1)\
    \ and (2) fail, but there exists\n          an unSACKed sequence number 'S3' that\
    \ meets the criteria for\n          detecting loss given in steps (1.a) and (1.b)\
    \ above\n          (specifically excluding step (1.c)), then one segment of up\
    \ to\n          SMSS octets starting with S3 SHOULD be returned.\n      (4) If\
    \ the conditions for (1), (2), and (3) fail, but there exists\n          outstanding\
    \ unSACKed data, we provide the opportunity for a\n          single \"rescue\"\
    \ retransmission per entry into loss recovery.\n          If HighACK is greater\
    \ than RescueRxt (or RescueRxt is\n          undefined), then one segment of up\
    \ to SMSS octets that MUST\n          include the highest outstanding unSACKed\
    \ sequence number\n          SHOULD be returned, and RescueRxt set to RecoveryPoint.\n\
    \          HighRxt MUST NOT be updated.\n          Note that rules (3) and (4)\
    \ are a sort of retransmission \"last\n          resort\".  They allow for retransmission\
    \ of sequence numbers\n          even when the sender has less certainty a segment\
    \ has been\n          lost than as with rule (1).  Retransmitting segments via\
    \ rule\n          (3) and (4) will help sustain the TCP's ACK clock and\n    \
    \      therefore can potentially help avoid retransmission timeouts.\n       \
    \   However, in sending these segments, the sender has two copies\n          of\
    \ the same data considered to be in the network (and also in\n          the pipe\
    \ estimate, in the case of (3)).  When an ACK or SACK\n          arrives covering\
    \ this retransmitted segment, the sender cannot\n          be sure exactly how\
    \ much data left the network (one of the two\n          transmissions of the packet\
    \ or both transmissions of the\n          packet).  Therefore, the sender may\
    \ underestimate pipe by\n          considering both segments to have left the\
    \ network when it is\n          possible that only one of the two has.\n     \
    \ (5) If the conditions for each of (1), (2), (3), and (4) are not\n         \
    \ met, then NextSeg () MUST indicate failure, and no segment is\n          returned.\n\
    \   Note: The SACK-based loss recovery algorithm outlined in this\n   document\
    \ requires more computational resources than previous TCP loss\n   recovery strategies.\
    \  However, we believe the scoreboard data\n   structure can be implemented in\
    \ a reasonably efficient manner (both\n   in terms of computation complexity and\
    \ memory usage) in most TCP\n   implementations.\n"
- title: 5.   Algorithm Details
  contents:
  - "5.   Algorithm Details\n   Upon the receipt of any ACK containing SACK information,\
    \ the\n   scoreboard MUST be updated via the Update () routine.\n   If the incoming\
    \ ACK is a cumulative acknowledgment, the TCP MUST\n   reset DupAcks to zero.\n\
    \   If the incoming ACK is a duplicate acknowledgment per the definition\n   in\
    \ Section 2 (regardless of its status as a cumulative\n   acknowledgment), and\
    \ the TCP is not currently in loss recovery, the\n   TCP MUST increase DupAcks\
    \ by one and take the following steps:\n   (1) If DupAcks >= DupThresh, go to\
    \ step (4).\n       Note: This check covers the case when a TCP receives SACK\n\
    \       information for multiple segments smaller than SMSS, which can\n     \
    \  potentially prevent IsLost() (next step) from declaring a segment\n       as\
    \ lost.\n   (2) If DupAcks < DupThresh but IsLost (HighACK + 1) returns true --\n\
    \       indicating at least three segments have arrived above the current\n  \
    \     cumulative acknowledgment point, which is taken to indicate loss\n     \
    \  -- go to step (4).\n   (3) The TCP MAY transmit previously unsent data segments\
    \ as per\n       Limited Transmit [RFC5681], except that the number of octets\n\
    \       which may be sent is governed by pipe and cwnd as follows:\n       (3.1)\
    \ Set HighRxt to HighACK.\n       (3.2) Run SetPipe ().\n       (3.3) If (cwnd\
    \ - pipe) >= 1 SMSS, there exists previously unsent\n             data, and the\
    \ receiver's advertised window allows, transmit\n             up to 1 SMSS of\
    \ data starting with the octet HighData+1 and\n             update HighData to\
    \ reflect this transmission, then return\n             to (3.2).\n       (3.4)\
    \ Terminate processing of this ACK.\n   (4) Invoke fast retransmit and enter loss\
    \ recovery as follows:\n       (4.1) RecoveryPoint = HighData\n             When\
    \ the TCP sender receives a cumulative ACK for this data\n             octet,\
    \ the loss recovery phase is terminated.\n       (4.2) ssthresh = cwnd = (FlightSize\
    \ / 2)\n             The congestion window (cwnd) and slow start threshold\n \
    \            (ssthresh) are reduced to half of FlightSize per [RFC5681].\n   \
    \          Additionally, note that [RFC5681] requires that any\n             segments\
    \ sent as part of the Limited Transmit mechanism not\n             be counted\
    \ in FlightSize for the purpose of the above\n             equation.\n       (4.3)\
    \ Retransmit the first data segment presumed dropped -- the\n             segment\
    \ starting with sequence number HighACK + 1.  To\n             prevent repeated\
    \ retransmission of the same data or a\n             premature rescue retransmission,\
    \ set both HighRxt and\n             RescueRxt to the highest sequence number\
    \ in the\n             retransmitted segment.\n       (4.4) Run SetPipe ()\n \
    \            Set a \"pipe\" variable to the number of outstanding octets\n   \
    \          currently \"in the pipe\"; this is the data which has been\n      \
    \       sent by the TCP sender but for which no cumulative or\n             selective\
    \ acknowledgment has been received and the data has\n             not been determined\
    \ to have been dropped in the network.\n             It is assumed that the data\
    \ is still traversing the network\n             path.\n       (4.5) In order to\
    \ take advantage of potential additional\n             available cwnd, proceed\
    \ to step (C) below.\n   Once a TCP is in the loss recovery phase, the following\
    \ procedure\n   MUST be used for each arriving ACK:\n   (A) An incoming cumulative\
    \ ACK for a sequence number greater than\n       RecoveryPoint signals the end\
    \ of loss recovery, and the loss\n       recovery phase MUST be terminated.  Any\
    \ information contained in\n       the scoreboard for sequence numbers greater\
    \ than the new value of\n       HighACK SHOULD NOT be cleared when leaving the\
    \ loss recovery\n       phase.\n   (B) Upon receipt of an ACK that does not cover\
    \ RecoveryPoint, the\n       following actions MUST be taken:\n       (B.1) Use\
    \ Update () to record the new SACK information conveyed\n             by the incoming\
    \ ACK.\n       (B.2) Use SetPipe () to re-calculate the number of octets still\n\
    \             in the network.\n   (C) If cwnd - pipe >= 1 SMSS, the sender SHOULD\
    \ transmit one or more\n       segments as follows:\n       (C.1) The scoreboard\
    \ MUST be queried via NextSeg () for the\n             sequence number range of\
    \ the next segment to transmit (if\n             any), and the given segment sent.\
    \  If NextSeg () returns\n             failure (no data to send), return without\
    \ sending anything\n             (i.e., terminate steps C.1 -- C.5).\n       (C.2)\
    \ If any of the data octets sent in (C.1) are below HighData,\n             HighRxt\
    \ MUST be set to the highest sequence number of the\n             retransmitted\
    \ segment unless NextSeg () rule (4) was\n             invoked for this retransmission.\n\
    \       (C.3) If any of the data octets sent in (C.1) are above HighData,\n  \
    \           HighData must be updated to reflect the transmission of\n        \
    \     previously unsent data.\n       (C.4) The estimate of the amount of data\
    \ outstanding in the\n             network must be updated by incrementing pipe\
    \ by the number\n             of octets transmitted in (C.1).\n       (C.5) If\
    \ cwnd - pipe >= 1 SMSS, return to (C.1)\n   Note that steps (A) and (C) can potentially\
    \ send a burst of\n   back-to-back segments into the network if the incoming cumulative\n\
    \   acknowledgment is for more than SMSS octets of data, or if incoming\n   SACK\
    \ blocks indicate that more than SMSS octets of data have been\n   lost in the\
    \ second half of the window.\n"
- title: 5.1.  Retransmission Timeouts
  contents:
  - "5.1.  Retransmission Timeouts\n   In order to avoid memory deadlocks, the TCP\
    \ receiver is allowed to\n   discard data that has already been selectively acknowledged.\
    \  As a\n   result, [RFC2018] suggests that a TCP sender SHOULD expunge the SACK\n\
    \   information gathered from a receiver upon a retransmission timeout\n   (RTO)\
    \ \"since the timeout might indicate that the data receiver has\n   reneged.\"\
    \  Additionally, a TCP sender MUST \"ignore prior SACK\n   information in determining\
    \ which data to retransmit.\"  However, since\n   the publication of [RFC2018],\
    \ this has come to be viewed by some as\n   too strong.  It has been suggested\
    \ that, as long as robust tests for\n   reneging are present, an implementation\
    \ can retain and use SACK\n   information across a timeout event [Errata1610].\
    \  While this document\n   does not change the specification in [RFC2018], we\
    \ note that\n   implementers should consult any updates to [RFC2018] on this subject.\n\
    \   Further, a SACK TCP sender SHOULD utilize all SACK information made\n   available\
    \ during the loss recovery following an RTO.\n   If an RTO occurs during loss\
    \ recovery as specified in this document,\n   RecoveryPoint MUST be set to HighData.\
    \  Further, the new value of\n   RecoveryPoint MUST be preserved and the loss\
    \ recovery algorithm\n   outlined in this document MUST be terminated.  In addition,\
    \ a new\n   recovery phase (as described in Section 5) MUST NOT be initiated\n\
    \   until HighACK is greater than or equal to the new value of\n   RecoveryPoint.\n\
    \   As described in Sections 4 and 5, Update () SHOULD continue to be\n   used\
    \ appropriately upon receipt of ACKs.  This will allow the\n   recovery period\
    \ after an RTO to benefit from all available\n   information provided by the receiver,\
    \ even if SACK information was\n   expunged due to the RTO.\n   If there are segments\
    \ missing from the receiver's buffer following\n   processing of the retransmitted\
    \ segment, the corresponding ACK will\n   contain SACK information.  In this case,\
    \ a TCP sender SHOULD use this\n   SACK information when determining what data\
    \ should be sent in each\n   segment following an RTO.  The exact algorithm for\
    \ this selection is\n   not specified in this document (specifically NextSeg ()\
    \ is\n   inappropriate during loss recovery after an RTO).  A relatively\n   straightforward\
    \ approach to \"filling in\" the sequence space reported\n   as missing should\
    \ be a reasonable approach.\n"
- title: 6.  Managing the RTO Timer
  contents:
  - "6.  Managing the RTO Timer\n   The standard TCP RTO estimator is defined in [RFC6298].\
    \  Due to the\n   fact that the SACK algorithm in this document can have an impact\
    \ on\n   the behavior of the estimator, implementers may wish to consider how\n\
    \   the timer is managed.  [RFC6298] calls for the RTO timer to be\n   re-armed\
    \ each time an ACK arrives that advances the cumulative ACK\n   point.  Because\
    \ the algorithm presented in this document can keep the\n   ACK clock going through\
    \ a fairly significant loss event\n   (comparatively longer than the algorithm\
    \ described in [RFC5681]), on\n   some networks the loss event could last longer\
    \ than the RTO.  In this\n   case the RTO timer would expire prematurely and a\
    \ segment that need\n   not be retransmitted would be resent.\n   Therefore, we\
    \ give implementers the latitude to use the standard\n   [RFC6298]-style RTO management\
    \ or, optionally, a more careful variant\n   that re-arms the RTO timer on each\
    \ retransmission that is sent during\n   recovery MAY be used.  This provides\
    \ a more conservative timer than\n   specified in [RFC6298], and so may not always\
    \ be an attractive\n   alternative.  However, in some cases it may prevent needless\n\
    \   retransmissions, go-back-N transmission, and further reduction of the\n  \
    \ congestion window.\n"
- title: 7.  Research
  contents:
  - "7.  Research\n   The algorithm specified in this document is analyzed in [FF96],\
    \ which\n   shows that the above algorithm is effective in reducing transfer time\n\
    \   over standard TCP Reno [RFC5681] when multiple segments are dropped\n   from\
    \ a window of data (especially as the number of drops increases).\n   [AHKO97]\
    \ shows that the algorithm defined in this document can\n   greatly improve throughput\
    \ in connections traversing satellite\n   channels.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The algorithm presented in this paper shares\
    \ security considerations\n   with [RFC5681].  A key difference is that an algorithm\
    \ based on SACKs\n   is more robust against attackers forging duplicate ACKs to\
    \ force the\n   TCP sender to reduce cwnd.  With SACKs, TCP senders have an\n\
    \   additional check on whether or not a particular ACK is legitimate.\n   While\
    \ not fool-proof, SACK does provide some amount of protection in\n   this area.\n\
    \   Similarly, [CPNI309] sketches a variant of a blind attack [RFC5961]\n   whereby\
    \ an attacker can spoof out-of-window data to a TCP endpoint,\n   causing it to\
    \ respond to the legitimate peer with a duplicate\n   cumulative ACK, per [RFC793].\
    \  Adding a SACK-based requirement to\n   trigger loss recovery effectively mitigates\
    \ this attack, as the\n   duplicate ACKs caused by out-of-window segments will\
    \ not contain SACK\n   information indicating reception of previously un-SACKED\
    \ in-window\n   data.\n"
- title: 9.  Changes Relative to RFC 3517
  contents:
  - "9.  Changes Relative to RFC 3517\n   The state variable \"DupAcks\" has been\
    \ added to the list of variables\n   maintained by this algorithm, and its usage\
    \ specified.\n   The function IsLost () has been modified to require that more\
    \ than\n   (DupThresh - 1) * SMSS octets have been SACKed above a given sequence\n\
    \   number as indication that it is lost, which is changed from the\n   minimum\
    \ requirement of (DupThresh * SMSS) described in [RFC3517].\n   This retains the\
    \ requirement that at least three segments following\n   the sequence number in\
    \ question have been SACKed, while improving\n   detection in the event that the\
    \ sender has outstanding segments which\n   are smaller than SMSS.\n   The definition\
    \ of a \"duplicate acknowledgment\" has been modified to\n   utilize the SACK\
    \ information in detecting loss.  Duplicate cumulative\n   acknowledgments can\
    \ be caused by either loss or reordering in the\n   network.  To disambiguate\
    \ loss and reordering, TCP's fast retransmit\n   algorithm [RFC5681] waits until\
    \ three duplicate ACKs arrive to\n   trigger loss recovery.  This notion was then\
    \ the basis for the\n   algorithm specified in [RFC3517].  However, with SACK\
    \ information\n   there is no need to rely blindly on the cumulative acknowledgment\n\
    \   field.  We can leverage the additional information present in the\n   SACK\
    \ blocks to understand that three segments lying above a gap in\n   the sequence\
    \ space have arrived at the receiver, and can use this\n   understanding to trigger\
    \ loss recovery.  This notion was used in\n   [RFC3517] during loss recovery,\
    \ and the change in this document is\n   that the notion is also used to enter\
    \ a loss recovery phase.\n   The state variable \"RescueRxt\" has been added to\
    \ the list of\n   variables maintained by the algorithm, and its usage specified.\
    \  This\n   variable is used to allow for one extra retransmission per entry into\n\
    \   loss recovery, in order to keep the ACK clock going under certain\n   circumstances\
    \ involving loss at the end of the window.  This\n   mechanism allows for no more\
    \ than one segment of no larger than 1\n   SMSS to be optimistically retransmitted\
    \ per loss recovery.\n   Rule (3) of NextSeg() has been changed from MAY to SHOULD,\
    \ to\n   appropriately reflect the opinion of the authors and working group\n\
    \   that it should be left in, rather than out, if an implementor does\n   not\
    \ have a compelling reason to do otherwise.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   The authors wish to thank Sally Floyd for encouraging\
    \ [RFC3517] and\n   commenting on early drafts.  The algorithm described in this\
    \ document\n   is loosely based on an algorithm outlined by Kevin Fall and Sally\n\
    \   Floyd in [FF96], although the authors of this document assume\n   responsibility\
    \ for any mistakes in the above text.\n   [RFC3517] was co-authored by Kevin Fall,\
    \ who provided crucial input\n   to that document and hence this follow-on work.\n\
    \   Murali Bashyam, Ken Calvert, Tom Henderson, Reiner Ludwig, Jamshid\n   Mahdavi,\
    \ Matt Mathis, Shawn Ostermann, Vern Paxson, and Venkat\n   Venkatsubra provided\
    \ valuable feedback on earlier versions of this\n   document.\n   We thank Matt\
    \ Mathis and Jamshid Mahdavi for implementing the\n   scoreboard in ns and hence\
    \ guiding our thinking in keeping track of\n   SACK state.\n   The first author\
    \ would like to thank Ohio University and the Ohio\n   University Internetworking\
    \ Research Group for supporting the bulk of\n   his work on RFC 3517, from which\
    \ this document is derived.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC793]   Postel, J., \"Transmission Control\
    \ Protocol\", STD 7, RFC\n              793, September 1981.\n   [RFC2018]  Mathis,\
    \ M., Mahdavi, J., Floyd, S., and A. Romanow, \"TCP\n              Selective Acknowledgment\
    \ Options\", RFC 2018, October 1996.\n   [RFC2119]  Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC5681]  Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion\n\
    \              Control\", RFC 5681, September 2009.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [AHKO97]   Mark Allman, Chris Hayes, Hans Kruse,\
    \ Shawn Ostermann,\n              \"TCP Performance Over Satellite Links\", Proceedings\
    \ of the\n              Fifth International Conference on Telecommunications\n\
    \              Systems, Nashville, TN, March, 1997.\n   [All00]    Mark Allman,\
    \ \"A Web Server's View of the Transport Layer\",\n              ACM Computer\
    \ Communication Review, 30(5), October 2000.\n   [CPNI309]  Fernando Gont, \"\
    Security Assessment of the Transmission\n              Control Protocol (TCP)\"\
    , CPNI Technical Note 3/2009,\n              <http://www.gont.com.ar/papers/\n\
    \              tn-03-09-security-assessment-TCP.pdf>, February 2009.\n   [Errata1610]\n\
    \              RFC Errata, Errata ID 1610, RFC 2018,\n              <http://www.rfc-editor.org>.\n\
    \   [FF96]     Kevin Fall and Sally Floyd, \"Simulation-based Comparisons\n  \
    \            of Tahoe, Reno and SACK TCP\", Computer Communication\n         \
    \     Review, July 1996.\n   [Jac90]    Van Jacobson, \"Modified TCP Congestion\
    \ Avoidance\n              Algorithm\", Technical Report, LBL, April 1990.\n \
    \  [PF01]     Jitendra Padhye, Sally Floyd \"Identifying the TCP Behavior\n  \
    \            of Web Servers\", ACM SIGCOMM, August 2001.\n   [RFC6582]  Henderson,\
    \ T., Floyd, S., Gurtov, A., and Y. Nishida, \"The\n              NewReno Modification\
    \ to TCP's Fast Recovery Algorithm\",\n              RFC 6582, April 2012.\n \
    \  [RFC2914]  Floyd, S., \"Congestion Control Principles\", BCP 41, RFC\n    \
    \          2914, September 2000.\n   [RFC6298]  Paxson, V., Allman, M., Chu, J.,\
    \ and M. Sargent,\n              \"Computing TCP's Retransmission Timer\", RFC\
    \ 6298, June\n              2011.\n   [RFC3517]  Blanton, E., Allman, M., Fall,\
    \ K., and L. Wang, \"A\n              Conservative Selective Acknowledgment (SACK)-based\
    \ Loss\n              Recovery Algorithm for TCP\", RFC 3517, April 2003.\n  \
    \ [RFC5961]  Ramaiah, A., Stewart, R., and M. Dalal, \"Improving TCP's\n     \
    \         Robustness to Blind In-Window Attacks\", RFC 5961, August\n        \
    \      2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ethan Blanton\n   Purdue University Computer Sciences\n\
    \   305 N. University St.\n   West Lafayette, IN 47907\n   United States\n   EMail:\
    \ elb@psg.com\n   Mark Allman\n   International Computer Science Institute\n \
    \  1947 Center St. Suite 600\n   Berkeley, CA 94704\n   United States\n   EMail:\
    \ mallman@icir.org\n   http://www.icir.org/mallman\n   Lili Wang\n   Juniper Networks\n\
    \   10 Technology Park Drive\n   Westford, MA 01886\n   United States\n   EMail:\
    \ liliw@juniper.net\n   Ilpo Jarvinen\n   University of Helsinki\n   P.O. Box\
    \ 68\n   FI-00014 UNIVERSITY OF HELSINKI\n   Finland\n   EMail: ilpo.jarvinen@helsinki.fi\n\
    \   Markku Kojo\n   University of Helsinki\n   P.O. Box 68\n   FI-00014 UNIVERSITY\
    \ OF HELSINKI\n   Finland\n   EMail: kojo@cs.helsinki.fi\n   Yoshifumi Nishida\n\
    \   WIDE Project\n   Endo 5322\n   Fujisawa, Kanagawa 252-8520\n   Japan\n   EMail:\
    \ nishida@wide.ad.jp\n"
