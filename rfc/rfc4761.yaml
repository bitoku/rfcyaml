- title: __initial_text__
  contents:
  - "                  Virtual Private LAN Service (VPLS)\n               Using BGP\
    \ for Auto-Discovery and Signaling\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The L2VPN Working Group produced two separate documents, RFC 4762\
    \ and\n   this document, that ultimately perform similar functions in different\n\
    \   manners.  Be aware that each method is commonly referred to as \"VPLS\"\n\
    \   even though they are distinct and incompatible with one another.\n"
- title: Abstract
  contents:
  - "Abstract\n   Virtual Private LAN Service (VPLS), also known as Transparent LAN\n\
    \   Service and Virtual Private Switched Network service, is a useful\n   Service\
    \ Provider offering.  The service offers a Layer 2 Virtual\n   Private Network\
    \ (VPN); however, in the case of VPLS, the customers in\n   the VPN are connected\
    \ by a multipoint Ethernet LAN, in contrast to\n   the usual Layer 2 VPNs, which\
    \ are point-to-point in nature.\n   This document describes the functions required\
    \ to offer VPLS, a\n   mechanism for signaling a VPLS, and rules for forwarding\
    \ VPLS frames\n   across a packet switched network.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Scope of This Document .....................................3\n  \
    \    1.2. Conventions Used in This Document ..........................4\n   2.\
    \ Functional Model ................................................4\n      2.1.\
    \ Terminology ................................................5\n      2.2. Assumptions\
    \ ................................................5\n      2.3. Interactions ...............................................6\n\
    \   3. Control Plane ...................................................6\n  \
    \    3.1. Auto-Discovery .............................................7\n    \
    \       3.1.1. Functions ...........................................7\n      \
    \     3.1.2. Protocol Specification ..............................7\n      3.2.\
    \ Signaling ..................................................8\n           3.2.1.\
    \ Label Blocks ........................................8\n           3.2.2. VPLS\
    \ BGP NLRI .......................................9\n           3.2.3. PW Setup\
    \ and Teardown ..............................10\n           3.2.4. Signaling PE\
    \ Capabilities ..........................10\n      3.3. BGP VPLS Operation ........................................11\n\
    \      3.4. Multi-AS VPLS .............................................13\n  \
    \         3.4.1. Method (a): VPLS-to-VPLS Connections at the ASBRs ..13\n    \
    \       3.4.2. Method (b): EBGP Redistribution of VPLS\n                  Information\
    \ between ASBRs ..........................14\n           3.4.3. Method (c): Multi-Hop\
    \ EBGP Redistribution\n                  of VPLS Information ................................15\n\
    \           3.4.4. Allocation of VE IDs across Multiple ASes ..........16\n  \
    \    3.5. Multi-homing and Path Selection ...........................16\n    \
    \  3.6. Hierarchical BGP VPLS .....................................17\n   4. Data\
    \ Plane .....................................................18\n      4.1. Encapsulation\
    \ .............................................18\n      4.2. Forwarding ................................................18\n\
    \           4.2.1. MAC Address Learning ...............................18\n  \
    \         4.2.2. Aging ..............................................19\n    \
    \       4.2.3. Flooding ...........................................19\n      \
    \     4.2.4. Broadcast and Multicast ............................20\n        \
    \   4.2.5. \"Split Horizon\" Forwarding .........................20\n        \
    \   4.2.6. Qualified and Unqualified Learning .................21\n          \
    \ 4.2.7. Class of Service ...................................21\n   5. Deployment\
    \ Options .............................................21\n   6. Security Considerations\
    \ ........................................22\n   7. IANA Considerations ............................................23\n\
    \   8. References .....................................................24\n  \
    \    8.1. Normative References ......................................24\n    \
    \  8.2. Informative References ....................................24\n   Appendix\
    \ A.  Contributors .........................................26\n   Appendix B.\
    \  Acknowledgements .....................................26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Virtual Private LAN Service (VPLS), also known as Transparent\
    \ LAN\n   Service and Virtual Private Switched Network service, is a useful\n\
    \   service offering.  A Virtual Private LAN appears in (almost) all\n   respects\
    \ as an Ethernet LAN to customers of a Service Provider.\n   However, in a VPLS,\
    \ the customers are not all connected to a single\n   LAN; the customers may be\
    \ spread across a metro or wide area.  In\n   essence, a VPLS glues together several\
    \ individual LANs across a\n   packet switched network to appear and function\
    \ as a single LAN [9].\n   This is accomplished by incorporating MAC address learning,\
    \ flooding,\n   and forwarding functions in the context of pseudowires that connect\n\
    \   these individual LANs across the packet switched network.\n   This document\
    \ details the functions needed to offer VPLS, and then\n   goes on to describe\
    \ a mechanism for the auto-discovery of the\n   endpoints of a VPLS as well as\
    \ for signaling a VPLS.  It also\n   describes how VPLS frames are transported\
    \ over tunnels across a\n   packet switched network.  The auto-discovery and signaling\
    \ mechanism\n   uses BGP as the control plane protocol.  This document also briefly\n\
    \   discusses deployment options, in particular, the notion of decoupling\n  \
    \ functions across devices.\n   Alternative approaches include: [14], which allows\
    \ one to build a\n   Layer 2 VPN with Ethernet as the interconnect; and [13],\
    \ which allows\n   one to set up an Ethernet connection across a packet switched\n\
    \   network.  Both of these, however, offer point-to-point Ethernet\n   services.\
    \  What distinguishes VPLS from the above two is that a VPLS\n   offers a multipoint\
    \ service.  A mechanism for setting up pseudowires\n   for VPLS using the Label\
    \ Distribution Protocol (LDP) is defined in\n   [10].\n"
- title: 1.1.  Scope of This Document
  contents:
  - "1.1.  Scope of This Document\n   This document has four major parts: defining\
    \ a VPLS functional model;\n   defining a control plane for setting up VPLS; defining\
    \ the data plane\n   for VPLS (encapsulation and forwarding of data); and defining\
    \ various\n   deployment options.\n   The functional model underlying VPLS is\
    \ laid out in Section 2.  This\n   describes the service being offered, the network\
    \ components that\n   interact to provide the service, and at a high level their\n\
    \   interactions.\n   The control plane described in this document uses Multiprotocol\
    \ BGP\n   [4] to establish VPLS service, i.e., for the auto-discovery of VPLS\n\
    \   members and for the setup and teardown of the pseudowires that\n   constitute\
    \ a given VPLS instance.  Section 3 focuses on this, and\n   also describes how\
    \ a VPLS that spans Autonomous System boundaries is\n   set up, as well as how\
    \ multi-homing is handled.  Using BGP as the\n   control plane for VPNs is not\
    \ new (see [14], [6], and [11]): what is\n   described here is based on the mechanisms\
    \ proposed in [6].\n   The forwarding plane and the actions that a participating\
    \ Provider\n   Edge (PE) router offering the VPLS service must take is described\
    \ in\n   Section 4.\n   In Section 5, the notion of 'decoupled' operation is defined,\
    \ and the\n   interaction of decoupled and non-decoupled PEs is described.\n \
    \  Decoupling allows for more flexible deployment of VPLS.\n"
- title: 1.2.  Conventions Used in This Document
  contents:
  - "1.2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [1].\n"
- title: 2.  Functional Model
  contents:
  - "2.  Functional Model\n   This will be described with reference to the following\
    \ figure.\n                                                       -----\n    \
    \                                                  /  A1 \\\n        ----    \
    \                                 ____CE1     |\n       /    \\          --------\
    \       --------  /    |       |\n      |  A2 CE2-      /        \\     /    \
    \    PE1     \\     /\n       \\    /   \\    /          \\___/          | \\\
    \     -----\n        ----     ---PE2                        |  \\\n          \
    \          |                          |   \\   -----\n                    | Service\
    \ Provider Network |    \\ /     \\\n                    |                   \
    \       |     CE5  A5 |\n                    |            ___           |   /\
    \  \\     /\n             |----|  \\          /   \\         PE4_/    -----\n\
    \             |u-PE|--PE3       /     \\       /\n             |----|    --------\
    \       -------\n      ----  /   |    ----\n     /    \\/    \\   /    \\    \
    \           CE = Customer Edge Device\n    |  A3 CE3    --CE4 A4 |           \
    \   PE = Provider Edge Router\n     \\    /         \\    /               u-PE\
    \ = Layer 2 Aggregation\n      ----           ----                A<n> = Customer\
    \ site n\n                        Figure 1: Example of a VPLS\n"
- title: 2.1.  Terminology
  contents:
  - "2.1.  Terminology\n   Terminology similar to that in [6] is used: a Service Provider\
    \ (SP)\n   network with P (Provider-only) and PE (Provider Edge) routers, and\n\
    \   customers with CE (Customer Edge) devices.  Here, however, there is\n   an\
    \ additional concept, that of a \"u-PE\", a Layer 2 PE device used for\n   Layer\
    \ 2 aggregation.  The notion of u-PE is described further in\n   Section 5.  PE\
    \ and u-PE devices are \"VPLS-aware\", which means that\n   they know that a VPLS\
    \ service is being offered.  The term \"VE\" refers\n   to a VPLS edge device,\
    \ which could be either a PE or a u-PE.\n   In contrast, the CE device (which\
    \ may be owned and operated by either\n   the SP or the customer) is VPLS-unaware;\
    \ as far as the CE is\n   concerned, it is connected to the other CEs in the VPLS\
    \ via a Layer 2\n   switched network.  This means that there should be no changes\
    \ to a CE\n   device, either to the hardware or the software, in order to offer\n\
    \   VPLS.\n   A CE device may be connected to a PE or a u-PE via Layer 2 switches\n\
    \   that are VPLS-unaware.  From a VPLS point of view, such Layer 2\n   switches\
    \ are invisible, and hence will not be discussed further.\n   Furthermore, a u-PE\
    \ may be connected to a PE via Layer 2 and Layer 3\n   devices; this will be discussed\
    \ further in a later section.\n   The term \"demultiplexor\" refers to an identifier\
    \ in a data packet\n   that identifies the VPLS to which the packet belongs as\
    \ well as the\n   ingress PE.  In this document, the demultiplexor is an MPLS\
    \ label.\n   The term \"VPLS\" will refer to the service as well as a particular\n\
    \   instantiation of the service (i.e., an emulated LAN); it should be\n   clear\
    \ from the context which usage is intended.\n"
- title: 2.2.  Assumptions
  contents:
  - "2.2.  Assumptions\n   The Service Provider Network is a packet switched network.\
    \  The PEs\n   are assumed to be (logically) fully meshed with tunnels over which\n\
    \   packets that belong to a service (such as VPLS) are encapsulated and\n   forwarded.\
    \  These tunnels can be IP tunnels, such as Generic Routing\n   Encapsulation\
    \ (GRE), or MPLS tunnels, established by Resource\n   Reservation Protocol - Traffic\
    \ Engineering (RSVP-TE) or LDP.  These\n   tunnels are established independently\
    \ of the services offered over\n   them; the signaling and establishment of these\
    \ tunnels are not\n   discussed in this document.\n   \"Flooding\" and MAC address\
    \ \"learning\" (see Section 4) are an integral\n   part of VPLS.  However, these\
    \ activities are private to an SP device,\n   i.e., in the VPLS described below,\
    \ no SP device requests another SP\n   device to flood packets or learn MAC addresses\
    \ on its behalf.\n   All the PEs participating in a VPLS are assumed to be fully\
    \ meshed in\n   the data plane, i.e., there is a bidirectional pseudowire between\n\
    \   every pair of PEs participating in that VPLS, and thus every\n   (ingress)\
    \ PE can send a VPLS packet to the egress PE(s) directly,\n   without the need\
    \ for an intermediate PE (see Section 4.2.5.)  This\n   requires that VPLS PEs\
    \ are logically fully meshed in the control\n   plane so that a PE can send a\
    \ message to another PE to set up the\n   necessary pseudowires.  See Section\
    \ 3.6 for a discussion on\n   alternatives to achieve a logical full mesh in the\
    \ control plane.\n"
- title: 2.3.  Interactions
  contents:
  - "2.3.  Interactions\n   VPLS is a \"LAN Service\" in that CE devices that belong\
    \ to a given\n   VPLS instance V can interact through the SP network as if they\
    \ were\n   connected by a LAN.  VPLS is \"private\" in that CE devices that belong\n\
    \   to different VPLSs cannot interact.  VPLS is \"virtual\" in that\n   multiple\
    \ VPLSs can be offered over a common packet switched network.\n   PE devices interact\
    \ to \"discover\" all the other PEs participating in\n   the same VPLS, and to\
    \ exchange demultiplexors.  These interactions\n   are control-driven, not data-driven.\n\
    \   u-PEs interact with PEs to establish connections with remote PEs or\n   u-PEs\
    \ in the same VPLS.  This interaction is control-driven.\n   PE devices can participate\
    \ simultaneously in both VPLS and IP VPNs\n   [6].  These are independent services,\
    \ and the information exchanged\n   for each type of service is kept separate\
    \ as the Network Layer\n   Reachability Information (NLRI) used for this exchange\
    \ has different\n   Address Family Identifiers (AFIs) and Subsequent Address Family\n\
    \   Identifiers (SAFIs).  Consequently, an implementation MUST maintain a\n  \
    \ separate routing storage for each service.  However, multiple\n   services can\
    \ use the same underlying tunnels; the VPLS or VPN label\n   is used to demultiplex\
    \ the packets belonging to different services.\n"
- title: 3.  Control Plane
  contents:
  - "3.  Control Plane\n   There are two primary functions of the VPLS control plane:\
    \ auto-\n   discovery, and setup and teardown of the pseudowires that constitute\n\
    \   the VPLS, often called signaling.  Section 3.1 and Section 3.2\n   describe\
    \ these functions.  Both of these functions are accomplished\n   with a single\
    \ BGP Update advertisement; Section 3.3 describes how\n   this is done by detailing\
    \ BGP protocol operation for VPLS.\n   Section 3.4 describes the setting up of\
    \ pseudowires that span\n   Autonomous Systems.  Section 3.5 describes how multi-homing\
    \ is\n   handled.\n"
- title: 3.1.  Auto-Discovery
  contents:
  - "3.1.  Auto-Discovery\n   Discovery refers to the process of finding all the PEs\
    \ that\n   participate in a given VPLS instance.  A PE either can be configured\n\
    \   with the identities of all the other PEs in a given VPLS or can use\n   some\
    \ protocol to discover the other PEs.  The latter is called auto-\n   discovery.\n\
    \   The former approach is fairly configuration-intensive, especially\n   since\
    \ it is required that the PEs participating in a given VPLS are\n   fully meshed\
    \ (i.e., that every PE in a given VPLS establish\n   pseudowires to every other\
    \ PE in that VPLS).  Furthermore, when the\n   topology of a VPLS changes (i.e.,\
    \ a PE is added to, or removed from,\n   the VPLS), the VPLS configuration on\
    \ all PEs in that VPLS must be\n   changed.\n   In the auto-discovery approach,\
    \ each PE \"discovers\" which other PEs\n   are part of a given VPLS by means\
    \ of some protocol, in this case BGP.\n   This allows each PE's configuration\
    \ to consist only of the identity\n   of the VPLS instance established on this\
    \ PE, not the identity of\n   every other PE in that VPLS instance -- that is\
    \ auto-discovered.\n   Moreover, when the topology of a VPLS changes, only the\
    \ affected PE's\n   configuration changes; other PEs automatically find out about\
    \ the\n   change and adapt.\n"
- title: 3.1.1.  Functions
  contents:
  - "3.1.1.  Functions\n   A PE that participates in a given VPLS instance V must\
    \ be able to\n   tell all other PEs in VPLS V that it is also a member of V. \
    \ A PE\n   must also have a means of declaring that it no longer participates\
    \ in\n   a VPLS.  To do both of these, the PE must have a means of identifying\n\
    \   a VPLS and a means by which to communicate to all other PEs.\n   U-PE devices\
    \ also need to know what constitutes a given VPLS;\n   however, they don't need\
    \ the same level of detail.  The PE (or PEs)\n   to which a u-PE is connected\
    \ gives the u-PE an abstraction of the\n   VPLS; this is described in Section\
    \ 5.\n"
- title: 3.1.2.  Protocol Specification
  contents:
  - "3.1.2.  Protocol Specification\n   The specific mechanism for auto-discovery\
    \ described here is based on\n   [14] and [6]; it uses BGP extended communities\
    \ [5] to identify\n   members of a VPLS, in particular, the Route Target community,\
    \ whose\n   format is described in [5].  The semantics of the use of Route\n \
    \  Targets is described in [6]; their use in VPLS is identical.\n   As it has\
    \ been assumed that VPLSs are fully meshed, a single Route\n   Target RT suffices\
    \ for a given VPLS V, and in effect that RT is the\n   identifier for VPLS V.\n\
    \   A PE announces (typically via I-BGP) that it belongs to VPLS V by\n   annotating\
    \ its NLRIs for V (see next subsection) with Route Target\n   RT, and acts on\
    \ this by accepting NLRIs from other PEs that have\n   Route Target RT.  A PE\
    \ announces that it no longer participates in V\n   by withdrawing all NLRIs that\
    \ it had advertised with Route Target RT.\n"
- title: 3.2.  Signaling
  contents:
  - "3.2.  Signaling\n   Once discovery is done, each pair of PEs in a VPLS must be\
    \ able to\n   establish (and tear down) pseudowires to each other, i.e., exchange\n\
    \   (and withdraw) demultiplexors.  This process is known as signaling.\n   Signaling\
    \ is also used to transmit certain characteristics of the\n   pseudowires that\
    \ a PE sets up for a given VPLS.\n   Recall that a demultiplexor is used to distinguish\
    \ among several\n   different streams of traffic carried over a tunnel, each stream\n\
    \   possibly representing a different service.  In the case of VPLS, the\n   demultiplexor\
    \ not only says to which specific VPLS a packet belongs,\n   but also identifies\
    \ the ingress PE.  The former information is used\n   for forwarding the packet;\
    \ the latter information is used for\n   learning MAC addresses.  The demultiplexor\
    \ described here is an MPLS\n   label.  However, note that the PE-to-PE tunnels\
    \ need not be MPLS\n   tunnels.\n   Using a distinct BGP Update message to send\
    \ a demultiplexor to each\n   remote PE would require the originating PE to send\
    \ N such messages\n   for N remote PEs.  The solution described in this document\
    \ allows a\n   PE to send a single (common) Update message that contains\n   demultiplexors\
    \ for all the remote PEs, instead of N individual\n   messages.  Doing this reduces\
    \ the control plane load both on the\n   originating PE as well as on the BGP\
    \ Route Reflectors that may be\n   involved in distributing this Update to other\
    \ PEs.\n"
- title: 3.2.1.  Label Blocks
  contents:
  - "3.2.1.  Label Blocks\n   To accomplish this, we introduce the notion of \"label\
    \ blocks\".  A\n   label block, defined by a label base LB and a VE block size\
    \ VBS, is a\n   contiguous set of labels {LB, LB+1, ..., LB+VBS-1}.  Here's how\
    \ label\n   blocks work.  All PEs within a given VPLS are assigned unique VE IDs\n\
    \   as part of their configuration.  A PE X wishing to send a VPLS update\n  \
    \ sends the same label block information to all other PEs.  Each\n   receiving\
    \ PE infers the label intended for PE X by adding its\n   (unique) VE ID to the\
    \ label base.  In this manner, each receiving PE\n   gets a unique demultiplexor\
    \ for PE X for that VPLS.\n   This simple notion is enhanced with the concept\
    \ of a VE block offset\n   VBO.  A label block defined by <LB, VBO, VBS> is the\
    \ set {LB+VBO,\n   LB+VBO+1, ..., LB+VBO+VBS-1}.  Thus, instead of a single large\
    \ label\n   block to cover all VE IDs in a VPLS, one can have several label\n\
    \   blocks, each with a different label base.  This makes label block\n   management\
    \ easier, and also allows PE X to cater gracefully to a PE\n   joining a VPLS\
    \ with a VE ID that is not covered by the set of label\n   blocks that PE X has\
    \ already advertised.\n   When a PE starts up, or is configured with a new VPLS\
    \ instance, the\n   BGP process may wish to wait to receive several advertisements\
    \ for\n   that VPLS instance from other PEs to improve the efficiency of label\n\
    \   block allocation.\n"
- title: 3.2.2.  VPLS BGP NLRI
  contents:
  - "3.2.2.  VPLS BGP NLRI\n   The VPLS BGP NLRI described below, with a new AFI and\
    \ SAFI (see [4])\n   is used to exchange VPLS membership and demultiplexors.\n\
    \   A VPLS BGP NLRI has the following information elements: a VE ID, a VE\n  \
    \ Block Offset, a VE Block Size, and a label base.  The format of the\n   VPLS\
    \ NLRI is given below.  The AFI is the L2VPN AFI (25), and the\n   SAFI is the\
    \ VPLS SAFI (65).  The Length field is in octets.\n      +------------------------------------+\n\
    \      |  Length (2 octets)                 |\n      +------------------------------------+\n\
    \      |  Route Distinguisher  (8 octets)   |\n      +------------------------------------+\n\
    \      |  VE ID (2 octets)                  |\n      +------------------------------------+\n\
    \      |  VE Block Offset (2 octets)        |\n      +------------------------------------+\n\
    \      |  VE Block Size (2 octets)          |\n      +------------------------------------+\n\
    \      |  Label Base (3 octets)             |\n      +------------------------------------+\n\
    \                  Figure 2: BGP NLRI for VPLS Information\n   A PE participating\
    \ in a VPLS must have at least one VE ID.  If the PE\n   is the VE, it typically\
    \ has one VE ID.  If the PE is connected to\n   several u-PEs, it has a distinct\
    \ VE ID for each u-PE.  It may\n   additionally have a VE ID for itself, if it\
    \ itself acts as a VE for\n   that VPLS.  In what follows, we will call the PE\
    \ announcing the VPLS\n   NLRI PE-a, and we will assume that PE-a owns VE ID V\
    \ (either\n   belonging to PE-a itself or to a u-PE connected to PE-a).\n   VE\
    \ IDs are typically assigned by the network administrator.  Their\n   scope is\
    \ local to a VPLS.  A given VE ID should belong to only one\n   PE, unless a CE\
    \ is multi-homed (see Section 3.5).\n   A label block is a set of demultiplexor\
    \ labels used to reach a given\n   VE ID.  A VPLS BGP NLRI with VE ID V, VE Block\
    \ Offset VBO, VE Block\n   Size VBS, and label base LB communicates to its peers\
    \ the following:\n       label block for V:  labels from LB to (LB + VBS - 1),\
    \ and\n       remote VE set for V:  from VBO to (VBO + VBS - 1).\n   There is\
    \ a one-to-one correspondence between the remote VE set and\n   the label block:\
    \ VE ID (VBO + n) corresponds to label (LB + n).\n"
- title: 3.2.3.  PW Setup and Teardown
  contents:
  - "3.2.3.  PW Setup and Teardown\n   Suppose PE-a is part of VPLS foo and makes\
    \ an announcement with VE ID\n   V, VE Block Offset VBO, VE Block Size VBS, and\
    \ label base LB.  If\n   PE-b is also part of VPLS foo and has VE ID W, PE-b does\
    \ the\n   following:\n   1.  checks if W is part of PE-a's 'remote VE set': if\
    \ VBO <= W < VBO\n       + VBS, then W is part of PE-a's remote VE set.  If not,\
    \ PE-b\n       ignores this message, and skips the rest of this procedure.\n \
    \  2.  sets up a PW to PE-a: the demultiplexor label to send traffic\n       from\
    \ PE-b to PE-a is computed as (LB + W - VBO).\n   3.  checks if V is part of any\
    \ 'remote VE set' that PE-b announced,\n       i.e., PE-b checks if V belongs\
    \ to some remote VE set that PE-b\n       announced, say with VE Block Offset\
    \ VBO', VE Block Size VBS', and\n       label base LB'.  If not, PE-b MUST make\
    \ a new announcement as\n       described in Section 3.3.\n   4.  sets up a PW\
    \ from PE-a: the demultiplexor label over which PE-b\n       should expect traffic\
    \ from PE-a is computed as: (LB' + V - VBO').\n   If Y withdraws an NLRI for V\
    \ that X was using, then X MUST tear down\n   its ends of the pseudowire between\
    \ X and Y.\n"
- title: 3.2.4.  Signaling PE Capabilities
  contents:
  - "3.2.4.  Signaling PE Capabilities\n   The following extended attribute, the \"\
    Layer2 Info Extended\n   Community\", is used to signal control information about\
    \ the\n   pseudowires to be setup for a given VPLS.  The extended community\n\
    \   value is to be allocated by IANA (currently used value is 0x800A).\n   This\
    \ information includes the Encaps Type (type of encapsulation on\n   the pseudowires),\
    \ Control Flags (control information regarding the\n   pseudowires), and the Maximum\
    \ Transmission Unit (MTU) to be used on\n   the pseudowires.\n   The Encaps Type\
    \ for VPLS is 19.\n      +------------------------------------+\n      | Extended\
    \ community type (2 octets) |\n      +------------------------------------+\n\
    \      |  Encaps Type (1 octet)             |\n      +------------------------------------+\n\
    \      |  Control Flags (1 octet)           |\n      +------------------------------------+\n\
    \      |  Layer-2 MTU (2 octet)             |\n      +------------------------------------+\n\
    \      |  Reserved (2 octets)               |\n      +------------------------------------+\n\
    \                 Figure 3: Layer2 Info Extended Community\n       0 1 2 3 4 5\
    \ 6 7\n      +-+-+-+-+-+-+-+-+\n      |   MBZ     |C|S|      (MBZ = MUST Be Zero)\n\
    \      +-+-+-+-+-+-+-+-+\n                    Figure 4: Control Flags Bit Vector\n\
    \   With reference to Figure 4, the following bits in the Control Flags\n   are\
    \ defined; the remaining bits, designated MBZ, MUST be set to zero\n   when sending\
    \ and MUST be ignored when receiving this community.\n        Name   Meaning\n\
    \           C   A Control word [7] MUST or MUST NOT be present when\n        \
    \       sending VPLS packets to this PE, depending on whether C\n            \
    \   is 1 or 0, respectively\n           S   Sequenced delivery of frames MUST\
    \ or MUST NOT be used\n               when sending VPLS packets to this PE, depending\
    \ on\n               whether S is 1 or 0, respectively\n"
- title: 3.3.  BGP VPLS Operation
  contents:
  - "3.3.  BGP VPLS Operation\n   To create a new VPLS, say VPLS foo, a network administrator\
    \ must pick\n   an RT for VPLS foo, say RT-foo.  This will be used by all PEs\
    \ that\n   serve VPLS foo.  To configure a given PE, say PE-a, to be part of\n\
    \   VPLS foo, the network administrator only has to choose a VE ID V for\n   PE-a.\
    \  (If PE-a is connected to u-PEs, PE-a may be configured with\n   more than one\
    \ VE ID; in that case, the following is done for each VE\n   ID).  The PE may\
    \ also be configured with a Route Distinguisher (RD);\n   if not, it generates\
    \ a unique RD for VPLS foo.  Say the RD is\n   RD-foo-a.  PE-a then generates\
    \ an initial label block and a remote VE\n   set for V, defined by VE Block Offset\
    \ VBO, VE Block Size VBS, and\n   label base LB.  These may be empty.\n   PE-a\
    \ then creates a VPLS BGP NLRI with RD RD-foo-a, VE ID V, VE Block\n   Offset\
    \ VBO, VE Block Size VBS and label base LB.  To this, it\n   attaches a Layer2\
    \ Info Extended Community and an RT, RT-foo.  It sets\n   the BGP Next Hop for\
    \ this NLRI as itself, and announces this NLRI to\n   its peers.  The Network\
    \ Layer protocol associated with the Network\n   Address of the Next Hop for the\
    \ combination <AFI=L2VPN AFI, SAFI=VPLS\n   SAFI> is IP; this association is required\
    \ by [4], Section 5.  If the\n   value of the Length of the Next Hop field is\
    \ 4, then the Next Hop\n   contains an IPv4 address.  If this value is 16, then\
    \ the Next Hop\n   contains an IPv6 address.\n   If PE-a hears from another PE,\
    \ say PE-b, a VPLS BGP announcement with\n   RT-foo and VE ID W, then PE-a knows\
    \ that PE-b is a member of the same\n   VPLS (auto-discovery).  PE-a then has\
    \ to set up its part of a VPLS\n   pseudowire between PE-a and PE-b, using the\
    \ mechanisms in\n   Section 3.2.  Similarly, PE-b will have discovered that PE-a\
    \ is in\n   the same VPLS, and PE-b must set up its part of the VPLS pseudowire.\n\
    \   Thus, signaling and pseudowire setup is also achieved with the same\n   Update\
    \ message.\n   If W is not in any remote VE set that PE-a announced for VE ID\
    \ V in\n   VPLS foo, PE-b will not be able to set up its part of the pseudowire\n\
    \   to PE-a.  To address this, PE-a can choose to withdraw the old\n   announcement(s)\
    \ it made for VPLS foo, and announce a new Update with\n   a larger remote VE\
    \ set and corresponding label block that covers all\n   VE IDs that are in VPLS\
    \ foo.  This, however, may cause some service\n   disruption.  An alternative\
    \ for PE-a is to create a new remote VE set\n   and corresponding label block,\
    \ and announce them in a new Update,\n   without withdrawing previous announcements.\n\
    \   If PE-a's configuration is changed to remove VE ID V from VPLS foo,\n   then\
    \ PE-a MUST withdraw all its announcements for VPLS foo that\n   contain VE ID\
    \ V.  If all of PE-a's links to its CEs in VPLS foo go\n   down, then PE-a SHOULD\
    \ either withdraw all its NLRIs for VPLS foo or\n   let other PEs in the VPLS\
    \ foo know in some way that PE-a is no longer\n   connected to its CEs.\n"
- title: 3.4.  Multi-AS VPLS
  contents:
  - "3.4.  Multi-AS VPLS\n   As in [14] and [6], the above auto-discovery and signaling\
    \ functions\n   are typically announced via I-BGP.  This assumes that all the\
    \ sites\n   in a VPLS are connected to PEs in a single Autonomous System (AS).\n\
    \   However, sites in a VPLS may connect to PEs in different ASes.  This\n   leads\
    \ to two issues: 1) there would not be an I-BGP connection\n   between those PEs,\
    \ so some means of signaling across ASes is needed;\n   and 2) there may not be\
    \ PE-to-PE tunnels between the ASes.\n   A similar problem is solved in [6], Section\
    \ 10.  Three methods are\n   suggested to address issue (1); all these methods\
    \ have analogs in\n   multi-AS VPLS.\n   Here is a diagram for reference:\n  \
    \   __________       ____________       ____________       __________\n    / \
    \         \\     /            \\     /            \\     /          \\\n     \
    \           \\___/        AS 1  \\   /  AS 2        \\___/\n                 \
    \                   \\ /\n      +-----+           +-------+    |    +-------+\
    \           +-----+\n      | PE1 | ---...--- | ASBR1 | ======= | ASBR2 | ---...---\
    \ | PE2 |\n      +-----+           +-------+    |    +-------+           +-----+\n\
    \                 ___                / \\                ___\n               \
    \ /   \\              /   \\              /   \\\n    \\__________/     \\____________/\
    \     \\____________/     \\__________/\n                          Figure 5: Inter-AS\
    \ VPLS\n   As in the above reference, three methods for signaling inter-provider\n\
    \   VPLS are given; these are presented in order of increasing\n   scalability.\
    \  Method (a) is the easiest to understand conceptually,\n   and the easiest to\
    \ deploy; however, it requires an Ethernet\n   interconnect between the ASes,\
    \ and both VPLS control and data plane\n   state on the AS border routers (ASBRs).\
    \  Method (b) requires VPLS\n   control plane state on the ASBRs and MPLS on the\
    \ AS-AS interconnect\n   (which need not be Ethernet).  Method (c) requires MPLS\
    \ on the AS-AS\n   interconnect, but no VPLS state of any kind on the ASBRs.\n"
- title: '3.4.1.  Method (a): VPLS-to-VPLS Connections at the ASBRs'
  contents:
  - "3.4.1.  Method (a): VPLS-to-VPLS Connections at the ASBRs\n   In this method,\
    \ an AS Border Router (ASBR1) acts as a PE for all\n   VPLSs that span AS1 and\
    \ an AS to which ASBR1 is connected, such as\n   AS2 here.  The ASBR on the neighboring\
    \ AS (ASBR2) is viewed by ASBR1\n   as a CE for the VPLSs that span AS1 and AS2;\
    \ similarly, ASBR2 acts as\n   a PE for this VPLS from AS2's point of view, and\
    \ views ASBR1 as a CE.\n   This method does not require MPLS on the ASBR1-ASBR2\
    \ link, but does\n   require that this link carry Ethernet traffic and that there\
    \ be a\n   separate VLAN sub-interface for each VPLS traversing this link.  It\n\
    \   further requires that ASBR1 does the PE operations (discovery,\n   signaling,\
    \ MAC address learning, flooding, encapsulation, etc.) for\n   all VPLSs that\
    \ traverse ASBR1.  This imposes a significant burden on\n   ASBR1, both on the\
    \ control plane and the data plane, which limits the\n   number of multi-AS VPLSs.\n\
    \   Note that in general, there will be multiple connections between a\n   pair\
    \ of ASes, for redundancy.  In this case, the Spanning Tree\n   Protocol (STP)\
    \ [15], or some other means of loop detection and\n   prevention, must be run\
    \ on each VPLS that spans these ASes, so that a\n   loop-free topology can be\
    \ constructed in each VPLS.  This imposes a\n   further burden on the ASBRs and\
    \ PEs participating in those VPLSs, as\n   these devices would need to run a loop\
    \ detection algorithm for each\n   such VPLS.  How this may be achieved is outside\
    \ the scope of this\n   document.\n"
- title: '3.4.2.  Method (b): EBGP Redistribution of VPLS Information between'
  contents:
  - "3.4.2.  Method (b): EBGP Redistribution of VPLS Information between\n       \
    \ ASBRs\n   This method requires I-BGP peerings between the PEs in AS1 and ASBR1\n\
    \   in AS1 (perhaps via route reflectors), an E-BGP peering between ASBR1\n  \
    \ and ASBR2 in AS2, and I-BGP peerings between ASBR2 and the PEs in\n   AS2. \
    \ In the above example, PE1 sends a VPLS NLRI to ASBR1 with a\n   label block\
    \ and itself as the BGP nexthop; ASBR1 sends the NLRI to\n   ASBR2 with new labels\
    \ and itself as the BGP nexthop; and ASBR2 sends\n   the NLRI to PE2 with new\
    \ labels and itself as the nexthop.\n   Correspondingly, there are three tunnels:\
    \ T1 from PE1 to ASBR1, T2\n   from ASBR1 to ASBR2, and T3 from ASBR2 to PE2.\
    \  Within each tunnel,\n   the VPLS label to be used is determined by the receiving\
    \ device;\n   e.g., the VPLS label within T1 is a label from the label block that\n\
    \   ASBR1 sent to PE1.  The ASBRs are responsible for receiving VPLS\n   packets\
    \ encapsulated in a tunnel and performing the appropriate label\n   swap operations\
    \ described next so that the next receiving device can\n   correctly identify\
    \ and forward the packet.\n   The VPLS NLRI that ASBR1 sends to ASBR2 (and the\
    \ NLRI that ASBR2\n   sends to PE2) is identical to the VPLS NLRI that PE1 sends\
    \ to ASBR1,\n   except for the label block.  To be precise, the Length, the Route\n\
    \   Distinguisher, the VE ID, the VE Block Offset, and the VE Block Size\n   MUST\
    \ be the same; the Label Base may be different.  Furthermore,\n   ASBR1 must also\
    \ update its forwarding path as follows: if the Label\n   Base sent by PE1 is\
    \ L1, the Label-block Size is N, the Label Base\n   sent by ASBR1 is L2, and the\
    \ tunnel label from ASBR1 to PE1 is T,\n   then ASBR1 must install the following\
    \ in the forwarding path:\n      swap L2 with L1 and push T,\n      swap L2+1\
    \ with L1+1 and push T, ...\n      swap L2+N-1 with L1+N-1 and push T.\n   ASBR2\
    \ must act similarly, except that it may not need a tunnel label\n   if it is\
    \ directly connected with ASBR1.\n   When PE2 wants to send a VPLS packet to PE1,\
    \ PE2 uses its VE ID to\n   get the right VPLS label from ASBR2's label block\
    \ for PE1, and uses a\n   tunnel label to reach ASBR2.  ASBR2 swaps the VPLS label\
    \ with the\n   label from ASBR1; ASBR1 then swaps the VPLS label with the label\
    \ from\n   PE1, and pushes a tunnel label to reach PE1.\n   In this method, one\
    \ needs MPLS on the ASBR1-ASBR2 interface, but\n   there is no requirement that\
    \ the link layer be Ethernet.\n   Furthermore, the ASBRs take part in distributing\
    \ VPLS information.\n   However, the data plane requirements of the ASBRs are\
    \ much simpler\n   than in method (a), being limited to label operations.  Finally,\
    \ the\n   construction of loop-free VPLS topologies is done by routing\n   decisions,\
    \ viz. BGP path and nexthop selection, so there is no need\n   to run the Spanning\
    \ Tree Protocol on a per-VPLS basis.  Thus, this\n   method is considerably more\
    \ scalable than method (a).\n"
- title: '3.4.3.  Method (c): Multi-Hop EBGP Redistribution of VPLS Information'
  contents:
  - "3.4.3.  Method (c): Multi-Hop EBGP Redistribution of VPLS Information\n     \
    \   between ASes\n   In this method, there is a multi-hop E-BGP peering between\
    \ the PEs\n   (or preferably, a Route Reflector) in AS1 and the PEs (or Route\n\
    \   Reflector) in AS2.  PE1 sends a VPLS NLRI with labels and nexthop\n   self\
    \ to PE2; if this is via route reflectors, the BGP nexthop is not\n   changed.\
    \  This requires that there be a tunnel LSP from PE1 to PE2.\n   This tunnel LSP\
    \ can be created exactly as in [6], Section 10 (c), for\n   example using E-BGP\
    \ to exchange labeled IPv4 routes for the PE\n   loopbacks.\n   When PE1 wants\
    \ to send a VPLS packet to PE2, it pushes the VPLS label\n   corresponding to\
    \ its own VE ID onto the packet.  It then pushes the\n   tunnel label(s) to reach\
    \ PE2.\n   This method requires no VPLS information (in either the control or\n\
    \   the data plane) on the ASBRs.  The ASBRs only need to set up PE-to-PE\n  \
    \ tunnel LSPs in the control plane, and do label operations in the data\n   plane.\
    \  Again, as in the case of method (b), the construction of\n   loop-free VPLS\
    \ topologies is done by routing decisions, i.e., BGP\n   path and nexthop selection,\
    \ so there is no need to run the Spanning\n   Tree Protocol on a per-VPLS basis.\
    \  This option is likely to be the\n   most scalable of the three methods presented\
    \ here.\n"
- title: 3.4.4.  Allocation of VE IDs across Multiple ASes
  contents:
  - "3.4.4.  Allocation of VE IDs across Multiple ASes\n   In order to ease the allocation\
    \ of VE IDs for a VPLS that spans\n   multiple ASes, one can allocate ranges for\
    \ each AS.  For example, AS1\n   uses VE IDs in the range 1 to 100, AS2 from 101\
    \ to 200, etc.  If\n   there are 10 sites attached to AS1 and 20 to AS2, the allocated\
    \ VE\n   IDs could be 1-10 and 101 to 120.  This minimizes the number of VPLS\n\
    \   NLRIs that are exchanged while ensuring that VE IDs are kept unique.\n   In\
    \ the above example, if AS1 needed more than 100 sites, then another\n   range\
    \ can be allocated to AS1.  The only caveat is that there be no\n   overlap between\
    \ VE ID ranges among ASes.  The exception to this rule\n   is multi-homing, which\
    \ is dealt with below.\n"
- title: 3.5.  Multi-homing and Path Selection
  contents:
  - "3.5.  Multi-homing and Path Selection\n   It is often desired to multi-home a\
    \ VPLS site, i.e., to connect it to\n   multiple PEs, perhaps even in different\
    \ ASes.  In such a case, the\n   PEs connected to the same site can be configured\
    \ either with the same\n   VE ID or with different VE IDs.  In the latter case,\
    \ it is mandatory\n   to run STP on the CE device, and possibly on the PEs, to\
    \ construct a\n   loop-free VPLS topology.  How this can be accomplished is outside\
    \ the\n   scope of this document; however, the rest of this section will\n   describe\
    \ in some detail the former case.  Note that multi-homing by\n   the SP and STP\
    \ on the CEs can co-exist; thus, it is recommended that\n   the VPLS customer\
    \ run STP if the CEs are able to.\n   In the case where the PEs connected to the\
    \ same site are assigned the\n   same VE ID, a loop-free topology is constructed\
    \ by routing\n   mechanisms, in particular, by BGP path selection.  When a BGP\
    \ speaker\n   receives two equivalent NLRIs (see below for the definition), it\n\
    \   applies standard path selection criteria such as Local Preference and\n  \
    \ AS Path Length to determine which NLRI to choose; it MUST pick only\n   one.\
    \  If the chosen NLRI is subsequently withdrawn, the BGP speaker\n   applies path\
    \ selection to the remaining equivalent VPLS NLRIs to pick\n   another; if none\
    \ remain, the forwarding information associated with\n   that NLRI is removed.\n\
    \   Two VPLS NLRIs are considered equivalent from a path selection point\n   of\
    \ view if the Route Distinguisher, the VE ID, and the VE Block\n   Offset are\
    \ the same.  If two PEs are assigned the same VE ID in a\n   given VPLS, they\
    \ MUST use the same Route Distinguisher, and they\n   SHOULD announce the same\
    \ VE Block Size for a given VE Offset.\n"
- title: 3.6.  Hierarchical BGP VPLS
  contents:
  - "3.6.  Hierarchical BGP VPLS\n   This section discusses how one can scale the\
    \ VPLS control plane when\n   using BGP.  There are at least three aspects of\
    \ scaling the control\n   plane:\n   1.  alleviating the full mesh connectivity\
    \ requirement among VPLS BGP\n       speakers;\n   2.  limiting BGP VPLS message\
    \ passing to just the interested speakers\n       rather than all BGP speakers;\
    \ and\n   3.  simplifying the addition and deletion of BGP speakers, whether\n\
    \       for VPLS or other applications.\n   Fortunately, the use of BGP for Internet\
    \ routing as well as for IP\n   VPNs has yielded several good solutions for all\
    \ these problems.  The\n   basic technique is hierarchy, using BGP Route Reflectors\
    \ (RRs) [8].\n   The idea is to designate a small set of Route Reflectors that\
    \ are\n   themselves fully meshed, and then establish a BGP session between\n\
    \   each BGP speaker and one or more RRs.  In this way, there is no need\n   for\
    \ direct full mesh connectivity among all the BGP speakers.  If the\n   particular\
    \ scaling needs of a provider require a large number of RRs,\n   then this technique\
    \ can be applied recursively: the full mesh\n   connectivity among the RRs can\
    \ be brokered by yet another level of\n   RRs.  The use of RRs solves problems\
    \ 1 and 3 above.\n   It is important to note that RRs, as used for VPLS and VPNs,\
    \ are\n   purely a control plane technique.  The use of RRs introduces no data\n\
    \   plane state and no data plane forwarding requirements on the RRs, and\n  \
    \ does not in any way change the forwarding path of VPLS traffic.  This\n   is\
    \ in contrast to the technique of Hierarchical VPLS defined in [10].\n   Another\
    \ consequence of this approach is that it is not required that\n   one set of\
    \ RRs handles all BGP messages, or that a particular RR\n   handle all messages\
    \ from a given PE.  One can define several sets of\n   RRs, for example, a set\
    \ to handle VPLS, another to handle IP VPNs,\n   and another for Internet routing.\
    \  Another partitioning could be to\n   have some subset of VPLSs and IP VPNs\
    \ handled by one set of RRs, and\n   another subset of VPLSs and IP VPNs handled\
    \ by another set of RRs;\n   the use of Route Target Filtering (RTF), described\
    \ in [12], can make\n   this simpler and more effective.\n   Finally, problem\
    \ 2 (that of limiting BGP VPLS message passing to just\n   the interested BGP\
    \ speakers) is addressed by the use of RTF.  This\n   technique is orthogonal\
    \ to the use of RRs, but works well in\n   conjunction with RRs.  RTF is also\
    \ very effective in inter-AS VPLS;\n   more details on how RTF works and its benefits\
    \ are provided in [12].\n   It is worth mentioning an aspect of the control plane\
    \ that is often a\n   source of confusion.  No MAC addresses are exchanged via\
    \ BGP.  All\n   MAC address learning and aging is done in the data plane individually\n\
    \   by each PE.  The only task of BGP VPLS message exchange is auto-\n   discovery\
    \ and label exchange.\n   Thus, BGP processing for VPLS occurs when\n   1.  a\
    \ PE joins or leaves a VPLS; or\n   2.  a failure occurs in the network, bringing\
    \ down a PE-PE tunnel or\n       a PE-CE link.\n   These events are relatively\
    \ rare, and typically, each such event\n   causes one BGP update to be generated.\
    \  Coupled with BGP's messaging\n   efficiency when used for signaling VPLS, these\
    \ observations lead to\n   the conclusion that BGP as a control plane for VPLS\
    \ will scale quite\n   well in terms of both processing and memory requirements.\n"
- title: 4.  Data Plane
  contents:
  - "4.  Data Plane\n   This section discusses two aspects of the data plane for PEs\
    \ and\n   u-PEs implementing VPLS: encapsulation and forwarding.\n"
- title: 4.1.  Encapsulation
  contents:
  - "4.1.  Encapsulation\n   Ethernet frames received from CE devices are encapsulated\
    \ for\n   transmission over the packet switched network connecting the PEs.\n\
    \   The encapsulation is as in [7].\n"
- title: 4.2.  Forwarding
  contents:
  - "4.2.  Forwarding\n   VPLS packets are classified as belonging to a given service\
    \ instance\n   and associated forwarding table based on the interface over which\
    \ the\n   packet is received.  Packets are forwarded in the context of the\n \
    \  service instance based on the destination MAC address.  The former\n   mapping\
    \ is determined by configuration.  The latter is the focus of\n   this section.\n"
- title: 4.2.1.  MAC Address Learning
  contents:
  - "4.2.1.  MAC Address Learning\n   As was mentioned earlier, the key distinguishing\
    \ feature of VPLS is\n   that it is a multipoint service.  This means that the\
    \ entire Service\n   Provider network should appear as a single logical learning\
    \ bridge\n   for each VPLS that the SP network supports.  The logical ports for\n\
    \   the SP \"bridge\" are the customer ports as well as the pseudowires on\n \
    \  a VE.  Just as a learning bridge learns MAC addresses on its ports,\n   the\
    \ SP bridge must learn MAC addresses at its VEs.\n   Learning consists of associating\
    \ source MAC addresses of packets with\n   the (logical) ports on which they arrive;\
    \ this association is the\n   Forwarding Information Base (FIB).  The FIB is used\
    \ for forwarding\n   packets.  For example, suppose the bridge receives a packet\
    \ with\n   source MAC address S on (logical) port P.  If subsequently, the\n \
    \  bridge receives a packet with destination MAC address S, it knows\n   that\
    \ it should send the packet out on port P.\n   If a VE learns a source MAC address\
    \ S on logical port P, then later\n   sees S on a different port P', then the\
    \ VE MUST update its FIB to\n   reflect the new port P'.  A VE MAY implement a\
    \ mechanism to damp\n   flapping of source ports for a given MAC address.\n"
- title: 4.2.2.  Aging
  contents:
  - "4.2.2.  Aging\n   VPLS PEs SHOULD have an aging mechanism to remove a MAC address\n\
    \   associated with a logical port, much the same as learning bridges do.\n  \
    \ This is required so that a MAC address can be relearned if it \"moves\"\n  \
    \ from a logical port to another logical port, either because the\n   station\
    \ to which that MAC address belongs really has moved or because\n   of a topology\
    \ change in the LAN that causes this MAC address to\n   arrive on a new port.\
    \  In addition, aging reduces the size of a VPLS\n   MAC table to just the active\
    \ MAC addresses, rather than all MAC\n   addresses in that VPLS.\n   The \"age\"\
    \ of a source MAC address S on a logical port P is the time\n   since it was last\
    \ seen as a source MAC on port P.  If the age exceeds\n   the aging time T, S\
    \ MUST be flushed from the FIB.  This of course\n   means that every time S is\
    \ seen as a source MAC address on port P,\n   S's age is reset.\n   An implementation\
    \ SHOULD provide a configurable knob to set the aging\n   time T on a per-VPLS\
    \ basis.  In addition, an implementation MAY\n   accelerate aging of all MAC addresses\
    \ in a VPLS if it detects certain\n   situations, such as a Spanning Tree topology\
    \ change in that VPLS.\n"
- title: 4.2.3.  Flooding
  contents:
  - "4.2.3.  Flooding\n   When a bridge receives a packet to a destination that is\
    \ not in its\n   FIB, it floods the packet on all the other ports.  Similarly,\
    \ a VE\n   will flood packets to an unknown destination to all other VEs in the\n\
    \   VPLS.\n   In Figure 1 above, if CE2 sent an Ethernet frame to PE2, and the\n\
    \   destination MAC address on the frame was not in PE2's FIB (for that\n   VPLS),\
    \ then PE2 would be responsible for flooding that frame to every\n   other PE\
    \ in the same VPLS.  On receiving that frame, PE1 would be\n   responsible for\
    \ further flooding the frame to CE1 and CE5 (unless PE1\n   knew which CE \"owned\"\
    \ that MAC address).\n   On the other hand, if PE3 received the frame, it could\
    \ delegate\n   further flooding of the frame to its u-PE.  If PE3 was connected\
    \ to\n   two u-PEs, it would announce that it has two u-PEs.  PE3 could either\n\
    \   announce that it is incapable of flooding, in which case it would\n   receive\
    \ two frames, one for each u-PE, or it could announce that it\n   is capable of\
    \ flooding, in which case it would receive one copy of\n   the frame, which it\
    \ would then send to both u-PEs.\n"
- title: 4.2.4.  Broadcast and Multicast
  contents:
  - "4.2.4.  Broadcast and Multicast\n   There is a well-known broadcast MAC address.\
    \  An Ethernet frame whose\n   destination MAC address is the broadcast MAC address\
    \ must be sent to\n   all stations in that VPLS.  This can be accomplished by\
    \ the same\n   means that is used for flooding.\n   There is also an easily recognized\
    \ set of \"multicast\" MAC addresses.\n   Ethernet frames with a destination multicast\
    \ MAC address MAY be\n   broadcast to all stations; a VE MAY also use certain\
    \ techniques to\n   restrict transmission of multicast frames to a smaller set\
    \ of\n   receivers, those that have indicated interest in the corresponding\n\
    \   multicast group.  Discussion of this is outside the scope of this\n   document.\n"
- title: 4.2.5.  "Split Horizon" Forwarding
  contents:
  - "4.2.5.  \"Split Horizon\" Forwarding\n   When a PE capable of flooding (say PEx)\
    \ receives a broadcast Ethernet\n   frame, or one with an unknown destination\
    \ MAC address, it must flood\n   the frame.  If the frame arrived from an attached\
    \ CE, PEx must send a\n   copy of the frame to every other attached CE, as well\
    \ as to all other\n   PEs participating in the VPLS.  If, on the other hand, the\
    \ frame\n   arrived from another PE (say PEy), PEx must send a copy of the packet\n\
    \   only to attached CEs.  PEx MUST NOT send the frame to other PEs,\n   since\
    \ PEy would have already done so.  This notion has been termed\n   \"split horizon\"\
    \ forwarding and is a consequence of the PEs being\n   logically fully meshed\
    \ for VPLS.\n   Split horizon forwarding rules apply to broadcast and multicast\n\
    \   packets, as well as packets to an unknown MAC address.\n"
- title: 4.2.6.  Qualified and Unqualified Learning
  contents:
  - "4.2.6.  Qualified and Unqualified Learning\n   The key for normal Ethernet MAC\
    \ learning is usually just the\n   (6-octet) MAC address.  This is called \"unqualified\
    \ learning\".\n   However, it is also possible that the key for learning includes\
    \ the\n   VLAN tag when present; this is called \"qualified learning\".\n   In\
    \ the case of VPLS, learning is done in the context of a VPLS\n   instance, which\
    \ typically corresponds to a customer.  If the customer\n   uses VLAN tags, one\
    \ can make the same distinctions of qualified and\n   unqualified learning.  If\
    \ the key for learning within a VPLS is just\n   the MAC address, then this VPLS\
    \ is operating under unqualified\n   learning.  If the key for learning is (customer\
    \ VLAN tag + MAC\n   address), then this VPLS is operating under qualified learning.\n\
    \   Choosing between qualified and unqualified learning involves several\n   factors,\
    \ the most important of which is whether one wants a single\n   global broadcast\
    \ domain (unqualified) or a broadcast domain per VLAN\n   (qualified).  The latter\
    \ makes flooding and broadcasting more\n   efficient, but requires larger MAC\
    \ tables.  These considerations\n   apply equally to normal Ethernet forwarding\
    \ and to VPLS.\n"
- title: 4.2.7.  Class of Service
  contents:
  - "4.2.7.  Class of Service\n   In order to offer different Classes of Service within\
    \ a VPLS, an\n   implementation MAY choose to map 802.1p bits in a customer Ethernet\n\
    \   frame with a VLAN tag to an appropriate setting of EXP bits in the\n   pseudowire\
    \ and/or tunnel label, allowing for differential treatment\n   of VPLS frames\
    \ in the packet switched network.\n   To be useful, an implementation SHOULD allow\
    \ this mapping function to\n   be different for each VPLS, as each VPLS customer\
    \ may have its own\n   view of the required behavior for a given setting of 802.1p\
    \ bits.\n"
- title: 5.  Deployment Options
  contents:
  - "5.  Deployment Options\n   In deploying a network that supports VPLS, the SP\
    \ must decide what\n   functions the VPLS-aware device closest to the customer\
    \ (the VE)\n   supports.  The default case described in this document is that\
    \ the VE\n   is a PE.  However, there are a number of reasons that the VE might\
    \ be\n   a device that does all the Layer 2 functions (such as MAC address\n \
    \  learning and flooding), and a limited set of Layer 3 functions (such\n   as\
    \ communicating to its PE), but, for example, doesn't do full-\n   fledged discovery\
    \ and PE-to-PE signaling.  Such a device is called a\n   \"u-PE\".\n   As both\
    \ of these cases have benefits, one would like to be able to\n   \"mix and match\"\
    \ these scenarios.  The signaling mechanism presented\n   here allows this.  For\
    \ example, in a given provider network, one PE\n   may be directly connected to\
    \ CE devices, another may be connected to\n   u-PEs that are connected to CEs,\
    \ and a third may be connected\n   directly to a customer over some interfaces\
    \ and to u-PEs over others.\n   All these PEs perform discovery and signaling\
    \ in the same manner.\n   How they do learning and forwarding depends on whether\
    \ or not there\n   is a u-PE; however, this is a local matter, and is not signaled.\n\
    \   However, the details of the operation of a u-PE and its interactions\n   with\
    \ PEs and other u-PEs are beyond the scope of this document.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The focus in Virtual Private LAN Service is the\
    \ privacy of data,\n   i.e., that data in a VPLS is only distributed to other\
    \ nodes in that\n   VPLS and not to any external agent or other VPLS.  Note that\
    \ VPLS\n   does not offer confidentiality, integrity, or authentication: VPLS\n\
    \   packets are sent in the clear in the packet switched network, and a\n   man-in-the-middle\
    \ can eavesdrop, and may be able to inject packets\n   into the data stream. \
    \ If security is desired, the PE-to-PE tunnels\n   can be IPsec tunnels.  For\
    \ more security, the end systems in the VPLS\n   sites can use appropriate means\
    \ of encryption to secure their data\n   even before it enters the Service Provider\
    \ network.\n   There are two aspects to achieving data privacy in a VPLS: securing\n\
    \   the control plane and protecting the forwarding path.  Compromise of\n   the\
    \ control plane could result in a PE sending data belonging to some\n   VPLS to\
    \ another VPLS, or blackholing VPLS data, or even sending it to\n   an eavesdropper;\
    \ none of which are acceptable from a data privacy\n   point of view.  Since all\
    \ control plane exchanges are via BGP,\n   techniques such as in [2] help authenticate\
    \ BGP messages, making it\n   harder to spoof updates (which can be used to divert\
    \ VPLS traffic to\n   the wrong VPLS) or withdraws (denial-of-service attacks).\
    \  In the\n   multi-AS methods (b) and (c) described in Section 3, this also means\n\
    \   protecting the inter-AS BGP sessions, between the ASBRs, the PEs, or\n   the\
    \ Route Reflectors.  One can also use the techniques described in\n   Section\
    \ 10 (b) and (c) of [6], both for the control plane and the\n   data plane.  Note\
    \ that [2] will not help in keeping VPLS labels\n   private -- knowing the labels,\
    \ one can eavesdrop on VPLS traffic.\n   However, this requires access to the\
    \ data path within a Service\n   Provider network.\n   There can also be misconfiguration\
    \ leading to unintentional\n   connection of CEs in different VPLSs.  This can\
    \ be caused, for\n   example, by associating the wrong Route Target with a VPLS\
    \ instance.\n   This problem, shared by [6], is for further study.\n   Protecting\
    \ the data plane requires ensuring that PE-to-PE tunnels are\n   well-behaved\
    \ (this is outside the scope of this document), and that\n   VPLS labels are accepted\
    \ only from valid interfaces.  For a PE, valid\n   interfaces comprise links from\
    \ P routers.  For an ASBR, a valid\n   interface is a link from an ASBR in an\
    \ AS that is part of a given\n   VPLS.  It is especially important in the case\
    \ of multi-AS VPLSs that\n   one accept VPLS packets only from valid interfaces.\n\
    \   MPLS-in-IP and MPLS-in-GRE tunneling are specified in [3].  If it is\n   desired\
    \ to use such tunnels to carry VPLS packets, then the security\n   considerations\
    \ described in Section 8 of that document must be fully\n   understood.  Any implementation\
    \ of VPLS that allows VPLS packets to\n   be tunneled as described in that document\
    \ MUST contain an\n   implementation of IPsec that can be used as therein described.\
    \  If\n   the tunnel is not secured by IPsec, then the technique of IP address\n\
    \   filtering at the border routers, described in Section 8.2 of that\n   document,\
    \ is the only means of ensuring that a packet that exits the\n   tunnel at a particular\
    \ egress PE was actually placed in the tunnel by\n   the proper tunnel head node\
    \ (i.e., that the packet does not have a\n   spoofed source address).  Since border\
    \ routers frequently filter only\n   source addresses, packet filtering may not\
    \ be effective unless the\n   egress PE can check the IP source address of any\
    \ tunneled packet it\n   receives, and compare it to a list of IP addresses that\
    \ are valid\n   tunnel head addresses.  Any implementation that allows MPLS-in-IP\n\
    \   and/or MPLS-in-GRE tunneling to be used without IPsec MUST allow the\n   egress\
    \ PE to validate in this manner the IP source address of any\n   tunneled packet\
    \ that it receives.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA allocated value (25) for AFI for L2VPN information.\
    \  This should\n   be the same as the AFI requested by [11].\n   IANA allocated\
    \ an extended community value (0x800a) for the Layer2\n   Info Extended Community.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n \
    \  [2]  Heffernan, A., \"Protection of BGP Sessions via the TCP MD5\n        Signature\
    \ Option\", RFC 2385, August 1998.\n   [3]  Worster, T., Rekhter, Y., and E. Rosen,\
    \ \"Encapsulating MPLS in\n        IP or Generic Routing Encapsulation (GRE)\"\
    , RFC 4023,\n        March 2005.\n   [4]  Bates, T., Katz, D., and Y. Rekhter,\
    \ \"Multiprotocol Extensions\n        for BGP-4\", RFC 4760, January 2007.\n \
    \  [5]  Sangli, S., Tappan, D., and Y. Rekhter, \"BGP Extended\n        Communities\
    \ Attribute\", RFC 4360, February 2006.\n   [6]  Rosen, E. and Y. Rekhter, \"\
    BGP/MPLS IP Virtual Private Networks\n        (VPNs)\", RFC 4364, February 2006.\n\
    \   [7]  Martini, L., Rosen, E., El-Aawar, N., and G. Heron,\n        \"Encapsulation\
    \ Methods for Transport of Ethernet over MPLS\n        Networks\", RFC 4448, April\
    \ 2006.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [8]   Bates, T., Chen, E., and R. Chandra, \"\
    BGP Route Reflection: An\n         Alternative to Full Mesh Internal BGP (IBGP)\"\
    , RFC 4456,\n         April 2006.\n   [9]   Andersson, L. and E. Rosen, \"Framework\
    \ for Layer 2 Virtual\n         Private Networks (L2VPNs)\", RFC 4664, September\
    \ 2006.\n   [10]  Lasserre, M., Ed. and V. Kompella, Ed., \"Virtual Private LAN\n\
    \         Service (VPLS) Using Label Distribution Protocol (LDP)\n         Signaling\"\
    , RFC 4762, January 2007.\n   [11]  Ould-Brahim, H., \"Using BGP as an Auto-Discovery\
    \ Mechanism for\n         VR-based Layer-3 VPNs\", Work in Progress, April 2006.\n\
    \   [12]  Marques, P., \"Constrained VPN Route Distribution\", Work in\n     \
    \    Progress, June 2005.\n   [13]  Martini, L., Rosen, E., El-Aawar, N., Smith,\
    \ T., and G. Heron,\n         \"Pseudowire Setup and Maintenance Using the Label\
    \ Distribution\n         Protocol (LDP)\", RFC 4447, April 2006.\n   [14]  Kompella,\
    \ K., \"Layer 2 VPNs Over Tunnels\", Work in Progress,\n         January 2006.\n\
    \   [15]  Institute of Electrical and Electronics Engineers, \"Information\n \
    \        technology - Telecommunications and information exchange\n         between\
    \ systems - Local and metropolitan area networks - Common\n         specifications\
    \ - Part 3: Media Access Control (MAC) Bridges:\n         Revision. This is a\
    \ revision of ISO/IEC 10038: 1993, 802.1j-\n         1992 and 802.6k-1992.  It\
    \ incorporates P802.11c, P802.1p and\n         P802.12e.  ISO/IEC 15802-3: 1998.\"\
    , IEEE Standard 802.1D,\n         July 1998.\n"
- title: Appendix A.  Contributors
  contents:
  - "Appendix A.  Contributors\n   The following contributed to this document:\n \
    \          Javier Achirica, Telefonica\n           Loa Andersson, Acreo\n    \
    \       Giles Heron, Tellabs\n           Sunil Khandekar, Alcatel-Lucent\n   \
    \        Chaitanya Kodeboyina, Nuova Systems\n           Vach Kompella, Alcatel-Lucent\n\
    \           Marc Lasserre, Alcatel-Lucent\n           Pierre Lin\n           Pascal\
    \ Menezes\n           Ashwin Moranganti, Appian\n           Hamid Ould-Brahim,\
    \ Nortel\n           Seo Yeong-il, Korea Tel\n"
- title: Appendix B.  Acknowledgements
  contents:
  - "Appendix B.  Acknowledgements\n   Thanks to Joe Regan and Alfred Nothaft for\
    \ their contributions.  Many\n   thanks too to Eric Ji, Chaitanya Kodeboyina,\
    \ Mike Loomis, and Elwyn\n   Davies for their detailed reviews.\n"
- title: Editors' Addresses
  contents:
  - "Editors' Addresses\n   Kireeti Kompella\n   Juniper Networks\n   1194 N. Mathilda\
    \ Ave.\n   Sunnyvale, CA  94089\n   US\n   EMail: kireeti@juniper.net\n   Yakov\
    \ Rekhter\n   Juniper Networks\n   1194 N. Mathilda Ave.\n   Sunnyvale, CA  94089\n\
    \   US\n   EMail: yakov@juniper.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
