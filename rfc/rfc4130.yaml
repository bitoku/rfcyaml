- title: __initial_text__
  contents:
  - "                     MIME-Based Secure Peer-to-Peer\n                 Business\
    \ Data Interchange Using HTTP,\n                    Applicability Statement 2\
    \ (AS2)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides an applicability statement (RFC 2026, Section\n\
    \   3.2) that describes how to exchange structured business data securely\n  \
    \ using the HTTP transfer protocol, instead of SMTP; the applicability\n   statement\
    \ for SMTP is found in RFC 3335.  Structured business data\n   may be XML; Electronic\
    \ Data Interchange (EDI) in either the American\n   National Standards Committee\
    \ (ANSI) X12 format or the UN Electronic\n   Data Interchange for Administration,\
    \ Commerce, and Transport\n   (UN/EDIFACT) format; or other structured data formats.\
    \  The data is\n   packaged using standard MIME structures.  Authentication and\
    \ data\n   confidentiality are obtained by using Cryptographic Message Syntax\n\
    \   with S/MIME security body parts.  Authenticated acknowledgements make\n  \
    \ use of multipart/signed Message Disposition Notification (MDN)\n   responses\
    \ to the original HTTP message.  This applicability statement\n   is informally\
    \ referred to as \"AS2\" because it is the second\n   applicability statement,\
    \ produced after \"AS1\", RFC 3335.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Applicable RFCs ............................................3\n  \
    \    1.2. Terms ......................................................3\n   2.\
    \ Overview ........................................................5\n      2.1.\
    \ Overall Operation ..........................................5\n      2.2. Purpose\
    \ of a Security Guideline for MIME EDI ...............5\n      2.3. Definitions\
    \ ................................................5\n      2.4. Assumptions ................................................7\n\
    \   3. Referenced RFCs and Their Contributions .........................9\n  \
    \    3.1. RFC 2616 HTTP v1.1 [3] .....................................9\n    \
    \  3.2. RFC 1847 MIME Security Multiparts [6] ......................9\n      3.3.\
    \ RFC 3462 Multipart/Report [8] .............................10\n      3.4. RFC\
    \ 1767 EDI Content [2] ..................................10\n      3.5. RFC 2045,\
    \ 2046, and 2049 MIME [1] .........................10\n      3.6. RFC 3798 Message\
    \ Disposition Notification [5] .............10\n      3.7. RFC 3851 and 3852 S/MIME\
    \ Version 3.1 Message\n           Specifications and Cryptographic Message Syntax\
    \ (CMS) [7]..10\n      3.8. RFC 3023 XML Media Types [10] .............................10\n\
    \   4. Structure of an AS2 Message ....................................10\n  \
    \    4.1. Introduction ..............................................10\n    \
    \  4.2. Structure of an Internet EDI MIME Message .................11\n   5. HTTP\
    \ Considerations ............................................12\n      5.1. Sending\
    \ EDI in HTTP POST Requests .........................12\n      5.2. Unused MIME\
    \ Headers and Operations ........................12\n      5.3. Modification of\
    \ MIME or Other Headers or Parameters Used ..13\n      5.4. HTTP Response Status\
    \ Codes ................................14\n      5.5. HTTP Error Recovery .......................................14\n\
    \   6. Additional AS2-Specific HTTP Headers ...........................14\n  \
    \    6.1. AS2 Version Header ........................................15\n    \
    \  6.2. AS2 System Identifiers ....................................15\n   7. Structure\
    \ and Processing of an MDN Message .....................17\n      7.1. Introduction\
    \ ..............................................17\n      7.2. Synchronous and\
    \ Asynchronous MDNs .........................19\n      7.3. Requesting a Signed\
    \ Receipt ...............................21\n      7.4. MDN Format and Values\
    \ .....................................25\n      7.5. Disposition Mode, Type,\
    \ and Modifier ......................30\n      7.6. Receipt Reply Considerations\
    \ in an HTTP POST ..............35\n   8. Public Key Certificate Handling ................................35\n\
    \   9. Security Considerations ........................................36\n  \
    \    9.1. NRR Cautions ..............................................37\n    \
    \  9.2. HTTPS Remark ..............................................38\n      9.3.\
    \ Replay Remark .............................................39\n   10. IANA Considerations\
    \ ...........................................39\n       10.1. Registration ............................................39\n\
    \   11. Acknowledgements ..............................................40\n  \
    \ 12. References ....................................................40\n    \
    \   12.1. Normative References ....................................40\n      \
    \ 12.2. Informative References ..................................41\n   Appendix\
    \ A: Message Examples ......................................42\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Applicable RFCs
  contents:
  - "1.1.  Applicable RFCs\n   Previous work on Internet EDI focused on specifying\
    \ MIME content\n   types for EDI data [2] and extending this work to support secure\n\
    \   EC/EDI transport over SMTP [4].  This document expands on RFC 1767 to\n  \
    \ specify a comprehensive set of data security features, specifically\n   data\
    \ confidentiality, data integrity/authenticity, non-repudiation of\n   origin,\
    \ and non-repudiation of receipt over HTTP.  This document also\n   recognizes\
    \ contemporary RFCs and is attempting to \"re-invent\" as\n   little as possible.\
    \  Although this document focuses on EDI data, any\n   other data types describable\
    \ in a MIME format are also supported.\n   Internet MIME-based EDI can be accomplished\
    \ by using and complying\n   with the following RFCs:\n     o  RFC 2616 Hyper\
    \ Text Transfer Protocol\n     o  RFC 1767 EDI Content Type\n     o  RFC 3023\
    \ XML Media Types\n     o  RFC 1847 Security Multiparts for MIME\n     o  RFC\
    \ 3462 Multipart/Report\n     o  RFC 2045 to 2049 MIME RFCs\n     o  RFC 3798\
    \ Message Disposition Notification\n     o  RFC 3851, 3852 S/MIME v3.1 Specification\n\
    \   Our intent here is to define clearly and precisely how these are used\n  \
    \ together, and what is required by user agents to be compliant with\n   this\
    \ document.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [13].\n"
- title: 1.2.  Terms
  contents:
  - "1.2.  Terms\n   AS2:     Applicability Statement 2 (this document); see RFC 2026\n\
    \            [11], Section 3.2\n   EDI:     Electronic Data Interchange\n   EC:\
    \      Business-to-Business Electronic Commerce\n   B2B:     Business to Business\n\
    \   Receipt: The functional message that is sent from a receiver to a\n      \
    \      sender to acknowledge receipt of an EDI/EC interchange.\n            This\
    \ message may be either synchronous or asynchronous in\n            nature.\n\
    \   Signed Receipt: A receipt with a digital signature.\n   Synchronous Receipt:\
    \ A receipt returned to the sender during the same\n            HTTP session as\
    \ the sender's original message.\n   Asynchronous Receipt: A receipt returned\
    \ to the sender on a different\n            communication session than the sender's\
    \ original message\n            session.\n   Message Disposition Notification\
    \ (MDN): The Internet messaging format\n            used to convey a receipt.\
    \  This term is used interchangeably\n            with receipt.  A MDN is a receipt.\n\
    \   Non-repudiation of receipt (NRR): A \"legal event\" that occurs when\n   \
    \         the original sender of an signed EDI/EC interchange has\n          \
    \  verified the signed receipt coming back from the receiver.\n            The\
    \ receipt contains data identifying the original message\n            for which\
    \ it is a receipt, including the message-ID and a\n            cryptographic hash\
    \ (MIC).  The original sender must retain\n            suitable records providing\
    \ evidence concerning the message\n            content, its message-ID, and its\
    \ hash value.  The original\n            sender verifies that the retained hash\
    \ value is the same as\n            the digest of the original message, as reported\
    \ in the\n            signed receipt.  NRR is not considered a technical message,\n\
    \            but instead is thought of as an outcome of possessing\n         \
    \   relevant evidence.\n   S/MIME:  A format and protocol for adding cryptographic\
    \ signature\n            and/or encryption services to Internet MIME messages.\n\
    \   Cryptographic Message Syntax (CMS): An encapsulation syntax used to\n    \
    \        digitally sign, digest, authenticate, or encrypt arbitrary\n        \
    \    messages.\n   SHA-1:   A secure, one-way hash algorithm used in conjunction\
    \ with\n            digital signature.  This is the recommended algorithm for\n\
    \            AS2.\n   MD5:     A secure, one-way hash algorithm used in conjunction\
    \ with\n            digital signature.  This algorithm is allowed in AS2.\n  \
    \ MIC:     The message integrity check (MIC), also called the message\n      \
    \      digest, is the digest output of the hash algorithm used by\n          \
    \  the digital signature.  The digital signature is computed\n            over\
    \ the MIC.\n   User Agent (UA): The application that handles and processes the\
    \ AS2\n            request.\n"
- title: 2.  Overview
  contents:
  - '2.  Overview

    '
- title: 2.1.  Overall Operation
  contents:
  - "2.1.  Overall Operation\n   A HTTP POST operation [3] is used to send appropriately\
    \ packaged EDI,\n   XML, or other business data.  The Request-URI ([3], Section\
    \ 9.5)\n   identifies a process for unpacking and handling the message data and\n\
    \   for generating a reply for the client that contains a message\n   disposition\
    \ acknowledgement (MDN), either signed or unsigned.  The\n   MDN is either returned\
    \ in the HTTP response message body or by a new\n   HTTP POST operation to a URL\
    \ for the original sender.\n   This request/reply transactional interchange can\
    \ provide secure,\n   reliable, and authenticated transport for EDI or other business\
    \ data\n   using HTTP as a transfer protocol.\n   The security protocols and structures\
    \ used also support auditable\n   records of these document data transmissions,\
    \ acknowledgements, and\n   authentication.\n"
- title: 2.2.  Purpose of a Security Guideline for MIME EDI
  contents:
  - "2.2.  Purpose of a Security Guideline for MIME EDI\n   The purpose of these specifications\
    \ is to ensure interoperability\n   between B2B EC user agents, invoking some\
    \ or all of the commonly\n   expected security features.  This document is also\
    \ NOT limited to\n   strict EDI use; it applies to any electronic commerce application\
    \ for\n   which business data needs to be exchanged over the Internet in a\n \
    \  secure manner.\n"
- title: 2.3.  Definitions
  contents:
  - '2.3.  Definitions

    '
- title: 2.3.1.  The Secure Transmission Loop
  contents:
  - "2.3.1.  The Secure Transmission Loop\n   This document's focus is on the formats\
    \ and protocols for exchanging\n   EDI/EC content securely in the Internet's HTTP\
    \ environment.\n   In the \"secure transmission loop\" for EDI/EC, one organization\
    \ sends\n   a signed and encrypted EDI/EC interchange to another organization\
    \ and\n   requests a signed receipt, and later the receiving organization sends\n\
    \   this signed receipt back to the sending organization.  In other\n   words,\
    \ the following transpires:\n      o  The organization sending EDI/EC data signs\
    \ and encrypts the\n         data using S/MIME.  In addition, the message will\
    \ request that\n         a signed receipt be returned to the sender.  To support\
    \ NRR,\n         the original sender retains records of the message, message-ID,\n\
    \         and digest (MIC) value.\n      o  The receiving organization decrypts\
    \ the message and verifies\n         the signature, resulting in verified integrity\
    \ of the data and\n         authenticity of the sender.\n      o  The receiving\
    \ organization then returns a signed receipt using\n         the HTTP reply body\
    \ or a separate HTTP POST operation to the\n         sending organization in the\
    \ form of a signed message\n         disposition notification.  This signed receipt\
    \ will contain the\n         hash of the received message, allowing the original\
    \ sender to\n         have evidence that the received message was authenticated\n\
    \         and/or decrypted properly by the receiver.\n   The above describes functionality\
    \ that, if implemented, will satisfy\n   all security requirements and implement\
    \ non-repudiation of receipt\n   for the exchange.  This specification, however,\
    \ leaves full\n   flexibility for users to decide the degree to which they want\
    \ to\n   deploy those security features with their trading partners.\n"
- title: 2.3.2.  Definition of Receipts
  contents:
  - "2.3.2.  Definition of Receipts\n   The term used for both the functional activity\
    \ and the message for\n   acknowledging delivery of an EDI/EC interchange is \"\
    receipt\" or\n   \"signed receipt\".  The first term is used if the acknowledgment\
    \ is\n   for an interchange resulting in a receipt that is NOT signed.  The\n\
    \   second term is used if the acknowledgement is for an interchange\n   resulting\
    \ in a receipt that IS signed.\n   The term non-repudiation of receipt (NRR) is\
    \ often used in\n   combination with receipts.  NRR refers to a legal event that\
    \ occurs\n   only when the original sender of an interchange has verified the\n\
    \   signed receipt coming back from recipient of the message, and has\n   verified\
    \ that the returned MIC value inside the MDN matches the\n   previously recorded\
    \ value for the original message.\n   NRR is best established when both the original\
    \ message and the\n   receipt make use of digital signatures.  See the Security\n\
    \   Considerations section for some cautions regarding NRR.\n   For information\
    \ on how to format and process receipts in AS2, refer\n   to Section 7.\n"
- title: 2.4.  Assumptions
  contents:
  - '2.4.  Assumptions

    '
- title: 2.4.1.  EDI/EC Process Assumptions
  contents:
  - "2.4.1.  EDI/EC Process Assumptions\n   o  Encrypted object is an EDI/EC Interchange.\n\
    \   This specification assumes that a typical EDI/EC interchange is the\n   lowest-level\
    \ object that will be subject to security services.\n   Specifically, in EDI ANSI\
    \ X12, this means that anything between and\n   including, segments ISA and IEA\
    \ is secured.  In EDIFACT, this means\n   that anything between, and including,\
    \ segments UNA/UNB and UNZ is\n   secured.  In other words, the EDI/EC interchanges\
    \ including envelope\n   segments remain intact and unreadable during fully secured\
    \ transport.\n   o  EDI envelope headers are encrypted.\n   Congruent with the\
    \ above statement, EDI envelope headers are NOT\n   visible in the MIME package.\n\
    \   In order to optimize routing from existing commercial EDI networks\n   (called\
    \ Value Added Networks or VANs) to the Internet, it would be\n   useful to make\
    \ some envelope information visible.  This\n   specification, however, provides\
    \ no support for this optimization.\n   o  X12.58 and UN/EDIFACT Security Considerations\n\
    \   The most common EDI standards bodies, ANSI X12 and EDIFACT, have\n   defined\
    \ internal provisions for security.  X12.58 is the security\n   mechanism for\
    \ ANSI X12, and AUTACK provides security for EDIFACT.\n   This specification does\
    \ NOT dictate use or non-use of these security\n   standards.  They are both fully\
    \ compatible, though possibly\n   redundant, with this specification.\n"
- title: 2.4.2.  Flexibility Assumptions
  contents:
  - "2.4.2.  Flexibility Assumptions\n   o  Encrypted or Unencrypted Data\n   This\
    \ specification allows for EDI/EC message exchange in which the\n   EDI/EC data\
    \ can be either unprotected or protected by means of\n   encryption.\n   o  Signed\
    \ or Unsigned Data\n   This specification allows for EDI/EC message exchange with\
    \ or without\n   digital signature of the original EDI transmission.\n   o  Optional\
    \ Use of Receipt\n   This specification allows for EDI/EC message transmission\
    \ with or\n   without a request for receipt notification.  A signed receipt\n\
    \   notification is requested; however, a MIC value is REQUIRED as part\n   of\
    \ the returned receipt, except when a severe error condition\n   prevents computation\
    \ of the digest value.  In the exceptional case, a\n   signed receipt should be\
    \ returned with an error message that\n   effectively explains why the MIC is\
    \ absent.\n   o  Use of Synchronous or Asynchronous Receipts\n   In addition to\
    \ a receipt request, this specification allows the\n   specification of the type\
    \ of receipt that should be returned.  It\n   supports synchronous or asynchronous\
    \ receipts in the MDN format\n   specified in Section 7 of this document.\n  \
    \ o  Security Formatting\n   This specification relies on the guidelines set forth\
    \ in RFC\n   3851/3852  [7] \"S/MIME Version 3.1 Message Specification;\n   Cryptographic\
    \ Message Syntax\".\n   o  Hash Function, Message Digest Choices\n   When a signature\
    \ is used, it is RECOMMENDED that the SHA-1 hash\n   algorithm be used for all\
    \ outgoing messages, and that both MD5 and\n   SHA-1 be supported for incoming\
    \ messages.\n   o  Permutation Summary\n   In summary, the following twelve security\
    \ permutations are possible\n   in any given trading relationship:\n   1.  Sender\
    \ sends un-encrypted data and does NOT request a receipt.\n   2.  Sender sends\
    \ un-encrypted data and requests an unsigned receipt.\n       Receiver sends back\
    \ the unsigned receipt.\n   3.  Sender sends un-encrypted data and requests a\
    \ signed receipt.\n       Receiver sends back the signed receipt.\n   4.  Sender\
    \ sends encrypted data and does NOT request a receipt.\n   5.  Sender sends encrypted\
    \ data and requests an unsigned receipt.\n       Receiver sends back the unsigned\
    \ receipt.\n   6.  Sender sends encrypted data and requests a signed receipt.\n\
    \       Receiver sends back the signed receipt.\n   7.  Sender sends signed data\
    \ and does NOT request a signed or\n       unsigned receipt.\n   8.  Sender sends\
    \ signed data and requests an unsigned receipt.\n       Receiver sends back the\
    \ unsigned receipt.\n   9.  Sender sends signed data and requests a signed receipt.\n\
    \       Receiver sends back the signed receipt.\n   10. Sender sends encrypted\
    \ and signed data and does NOT request a\n       signed or unsigned receipt.\n\
    \   11. Sender sends encrypted and signed data and requests an unsigned\n    \
    \   receipt.  Receiver sends back the unsigned receipt.\n   12. Sender sends encrypted\
    \ and signed data and requests a signed\n       receipt.  Receiver sends back\
    \ the signed receipt.\n   Users can choose any of the twelve possibilities, but\
    \ only the last\n   example (12), when a signed receipt is requested, offers the\
    \ whole\n   suite of security features described in Section 2.3.1, \"The Secure\n\
    \   Transmission Loop\".\n   Additionally, the receipts discussed above may be\
    \ either synchronous\n   or asynchronous depending on the type requested.  The\
    \ use of either\n   the synchronous or asynchronous receipts does not change the\
    \ nature\n   of the secure transmission loop in support of NRR.\n"
- title: 3.  Referenced RFCs and Their Contributions
  contents:
  - '3.  Referenced RFCs and Their Contributions

    '
- title: 3.1.  RFC 2616 HTTP v1.1 [3]
  contents:
  - "3.1.  RFC 2616 HTTP v1.1 [3]\n   This document specifies how data is transferred\
    \ using HTTP.\n"
- title: 3.2.  RFC 1847 MIME Security Multiparts [6]
  contents:
  - "3.2.  RFC 1847 MIME Security Multiparts [6]\n   This document defines security\
    \ multipart for MIME:\n   multipart/encrypted and multipart/signed.\n"
- title: 3.3.  RFC 3462 Multipart/Report [8]
  contents:
  - "3.3.  RFC 3462 Multipart/Report [8]\n   This RFC defines the use of the multipart/report\
    \ content type,\n   something that the MDN RFC 3798 builds upon.\n"
- title: 3.4.  RFC 1767 EDI Content [2]
  contents:
  - "3.4.  RFC 1767 EDI Content [2]\n   This RFC defines the use of content type \"\
    application\" for ANSI X12\n   (application/EDI-X12), EDIFACT (application/EDIFACT),\
    \ and mutually\n   defined EDI (application/EDI-Consent).\n"
- title: 3.5.  RFC 2045, 2046, and 2049 MIME [1]
  contents:
  - "3.5.  RFC 2045, 2046, and 2049 MIME [1]\n   These are the basic MIME standards,\
    \ upon which all MIME related RFCs\n   build, including this one.  Key contributions\
    \ include definitions of\n   \"content type\", \"sub-type\", and \"multipart\"\
    , as well as encoding\n   guidelines, which establish 7-bit US-ASCII as the canonical\
    \ character\n   set to be used in Internet messaging.\n"
- title: 3.6.  RFC 3798 Message Disposition Notification [5]
  contents:
  - "3.6.  RFC 3798 Message Disposition Notification [5]\n   This Internet RFC defines\
    \ how an MDN is requested, and the format and\n   syntax of the MDN.  The MDN\
    \ is the basis upon which receipts and\n   signed receipts are defined in this\
    \ specification.\n"
- title: 3.7.  RFC 3851 and 3852 S/MIME Version 3.1 Message Specifications and
  contents:
  - "3.7.  RFC 3851 and 3852 S/MIME Version 3.1 Message Specifications and\n     \
    \ Cryptographic Message Syntax (CMS) [7]\n   This specification describes how\
    \ S/MIME will carry CMS Objects.\n"
- title: 3.8.  RFC 3023 XML Media Types [10]
  contents:
  - "3.8.  RFC 3023 XML Media Types [10]\n   This RFC defines the use of content type\
    \ \"application\" for XML\n   (application/xml).\n"
- title: 4.  Structure of an AS2 Message
  contents:
  - '4.  Structure of an AS2 Message

    '
- title: 4.1.  Introduction
  contents:
  - "4.1.  Introduction\n   The basic structure of an AS2 message consists of MIME\
    \ format inside\n   an HTTP message with a few additional specific AS2 headers.\
    \  The\n   structures below are described hierarchically in terms of which RFCs\n\
    \   are applied to form the specific structure.  For details of how to\n   code\
    \ in compliance with all RFCs involved, turn directly to the RFCs\n   referenced.\
    \  Any difference between AS2 implantations and RFCs are\n   mentioned specifically\
    \ in the sections below.\n"
- title: 4.2.  Structure of an Internet EDI MIME Message
  contents:
  - "4.2.  Structure of an Internet EDI MIME Message\n   No encryption, no signature\n\
    \      -RFC2616/2045\n         -RFC1767/RFC3023 (application/EDIxxxx or /xml)\n\
    \   No encryption, signature\n      -RFC2616/2045\n        -RFC1847 (multipart/signed)\n\
    \          -RFC1767/RFC3023 (application/EDIxxxx or /xml)\n          -RFC3851\
    \ (application/pkcs7-signature)\n   Encryption, no signature\n      -RFC2616/2045\n\
    \        -RFC3851 (application/pkcs7-mime)\n          -RFC1767/RFC3023  (application/EDIxxxx\
    \ or /xml)(encrypted)\n   Encryption, signature\n      -RFC2616/2045\n       \
    \ -RFC3851 (application/pkcs7-mime)\n          -RFC1847 (multipart/signed)(encrypted)\n\
    \            -RFC1767/RFC3023  (application/EDIxxxx or /xml)(encrypted)\n    \
    \        -RFC3851 (application/pkcs7-signature)(encrypted)\n   MDN over HTTP,\
    \ no signature\n      -RFC2616/2045\n        -RFC3798 (message/disposition-notification)\n\
    \   MDN over HTTP, signature\n      -RFC2616/2045\n        -RFC1847 (multipart/signed)\n\
    \         -RFC3798 (message/disposition-notification)\n         -RFC3851 (application/pkcs7-signature)\n\
    \   MDN over SMTP, no signature\n   MDN over SMTP, signature\n     Refer to the\
    \ EDI over SMTP standard [4].\n   Although all MIME content types SHOULD be supported,\
    \ the following\n   MIME content types MUST be supported:\n             Content-type:\
    \ multipart/signed\n             Content-Type: multipart/report\n            \
    \ Content-type: message/disposition-notification\n             Content-Type: application/PKCS7-signature\n\
    \             Content-Type: application/PKCS7-mime\n             Content-Type:\
    \ application/EDI-X12\n             Content-Type: application/EDIFACT\n      \
    \       Content-Type: application/edi-consent\n             Content-Type: application/XML\n"
- title: 5.  HTTP Considerations
  contents:
  - '5.  HTTP Considerations

    '
- title: 5.1.  Sending EDI in HTTP POST Requests
  contents:
  - "5.1.  Sending EDI in HTTP POST Requests\n   The request line will have the form:\
    \ \"POST Request-URI HTTP/1.1\",\n   with spaces and followed by a CRLF.  The\
    \ Request URI is typically\n   exchanged out of band, as part of setting up a\
    \ bilateral trading\n   partner agreement.  Applications SHOULD be prepared to\
    \ deal with an\n   initial reply containing a status indicating a need for\n \
    \  authentication of the usual types used for authorizing access to the\n   Request-URI\
    \ ([3], Section 10.4.2 and elsewhere).\n   The request line is followed by entity\
    \ headers specifying content\n   length ([3], Section 14.14) and content type\
    \ ([3], Section 14.18).\n   The Host request header ([3], Sections 9 and 14.23)\
    \ is also included.\n   When using Transport Layer Security [15] or SSLv3, the\
    \ request-URI\n   SHOULD indicate the appropriate scheme value, HTTPS.  Usually\
    \ only a\n   multipart/signed message body would be sent using TLS, as encrypted\n\
    \   message bodies would be redundant.  However, encrypted message bodies\n  \
    \ are not prohibited.\n   The receiving AS2 system MAY disconnect from the sending\
    \ AS2 system\n   before completing the reception of the entire entity if it determines\n\
    \   that the entity being sent is too large to process.\n   For HTTP version 1.1,\
    \ TCP persistent connections are the default,\n   ([3] Sections 8.1.2, 8.2, and\
    \ 19.7.1).  A number of other differences\n   exist because HTTP does not conform\
    \ to MIME [1] as used in SMTP\n   transport.  Relevant differences are summarized\
    \ below.\n"
- title: 5.2.  Unused MIME Headers and Operations
  contents:
  - '5.2.  Unused MIME Headers and Operations

    '
- title: 5.2.1.  Content-Transfer-Encoding Not Used in HTTP Transport
  contents:
  - "5.2.1.  Content-Transfer-Encoding Not Used in HTTP Transport\n   HTTP can handle\
    \ binary data and so there is no need to use the\n   content transfer encodings\
    \ of MIME [1].  This difference is discussed\n   in [3], Section 19.4.5.  However,\
    \ a content transfer encoding value\n   of binary or 8-bit is permissible but\
    \ not required.  The absence of\n   this header MUST NOT result in transaction\
    \ failure.  Content transfer\n   encoding of MIME bodyparts within the AS2 message\
    \ body is also\n   allowed.\n"
- title: 5.2.2.  Message Bodies
  contents:
  - "5.2.2.  Message Bodies\n   In [3], Section 3.7.2, it is explicitly noted that\
    \ multiparts MUST\n   have null epilogues.\n   In [4], Section 5.4.1, options\
    \ for large file processing are\n   discussed for SMTP transport.  For HTTP, large\
    \ files SHOULD be\n   handled correctly by the TCP layer.  However, in [3], Sections\
    \ 3.5\n   and 3.6 discuss some options for compressing or chunking entities to\n\
    \   be transferred.  In [3], Section 8.1.2.2 discusses a pipelining\n   option\
    \ that is useful for segmenting large amounts of data.\n"
- title: 5.3.  Modification of MIME or Other Headers or Parameters Used
  contents:
  - '5.3.  Modification of MIME or Other Headers or Parameters Used

    '
- title: 5.3.1.  Content-Length
  contents:
  - "5.3.1.  Content-Length\n   The use of the content-length header MUST follow the\
    \ guidelines of\n   [3], specifically Sections 4.4 and 14.13.\n"
- title: 5.3.2.  Final Recipient and Original Recipient
  contents:
  - "5.3.2.  Final Recipient and Original Recipient\n   The final and original recipient\
    \ values SHOULD be the same value.\n   These values MUST NOT be aliases or mailing\
    \ lists.\n"
- title: 5.3.3.  Message-Id and Original-Message-Id
  contents:
  - "5.3.3.  Message-Id and Original-Message-Id\n   Message-Id and Original-Message-Id\
    \ is formatted as defined in RFC\n   2822 [9]:\n          \"<\" id-left \"@\"\
    \ id-right \">\"        (RFC 2822, 3.6.4)\n   Message-Id length is a maximum of\
    \ 998 characters.  For maximum\n   backward compatibility, Message-Id length SHOULD\
    \ be 255 characters or\n   less.  Message-Id SHOULD be globally unique, and id-right\
    \ SHOULD be\n   something unique to the sending host environment (e.g., a host\
    \ name).\n   When sending a message, always include the angle brackets.  Angle\n\
    \   brackets are not part of the Message-Id value.  For maximum backward\n   compatibility,\
    \ when receiving a message, do not check for angle\n   brackets.  When creating\
    \ the Original-Message-Id header in an MDN,\n   always use the exact syntax as\
    \ received on the original message;\n   don't strip or add angle brackets.\n"
- title: 5.3.4.  Host Header
  contents:
  - "5.3.4.  Host Header\n   The host request header field MUST be included in the\
    \ POST request\n   made when sending business data.  This field is intended to\
    \ allow one\n   server IP address to service multiple hostnames, and potentially\
    \ to\n   conserve IP addresses.  See [3], Sections 14.23 and 19.5.1.\n"
- title: 5.4.  HTTP Response Status Codes
  contents:
  - "5.4.  HTTP Response Status Codes\n   The status codes return status concerning\
    \ HTTP operations.  For\n   example, the status code 401, together with the WWW-Authenticate\n\
    \   header, is used to challenge the client to repeat the request with an\n  \
    \ Authorization header.  Other explicit status codes are documented in\n   [3],\
    \ Section 6.1.1 and throughout Section 10.\n   For errors in the request-URI,\
    \ 400 (\"Bad Request\"), 404 (\"Not\n   Found\"), and similar codes are appropriate\
    \ status codes.  These codes\n   and their semantics are specified by [3].  A\
    \ careful examination of\n   these codes and their semantics should be made before\
    \ implementing\n   any retry functionality.  Retries SHOULD NOT be made if the\
    \ error is\n   not transient or if retries are explicitly discouraged.\n"
- title: 5.5.  HTTP Error Recovery
  contents:
  - "5.5.  HTTP Error Recovery\n   If the HTTP client fails to read the HTTP server\
    \ response data, the\n   POST operation with identical content, including same\
    \ Message-ID,\n   SHOULD be repeated, if the condition is transient.\n   The Message-ID\
    \ on a POST operation can be reused if and only if all\n   of the content (including\
    \ the original Date) is identical.\n   Details of the retry process (including\
    \ time intervals to pause,\n   number of retries to attempt, and timeouts for\
    \ retrying) are\n   implementation dependent.  These settings are selected as\
    \ part of the\n   trading partner agreement.\n   Servers SHOULD be prepared to\
    \ receive a POST with a repeated\n   Message-ID.  The MIME reply body previously\
    \ sent SHOULD be resent,\n   including the MDN and other MIME parts.\n"
- title: 6.  Additional AS2-Specific HTTP Headers
  contents:
  - "6.  Additional AS2-Specific HTTP Headers\n   The following headers are to be\
    \ included in all AS2 messages and all\n   AS2 MDNs, except for asynchronous MDNs\
    \ that are sent using SMTP and\n   that follow the AS1 semantics[4].\n"
- title: 6.1.  AS2 Version Header
  contents:
  - "6.1.  AS2 Version Header\n   To promote backward compatibility, AS2 includes\
    \ a version header:\n   AS2-Version: 1.0  - Used in all implementations of this\n\
    \                       specification.  1.x will be interpreted as 1.0 by\n  \
    \                     all implementations with the \"AS2 Version: 1.0\"\n    \
    \                   header.  That is, only the most significant digit\n      \
    \                 is used as the version identifier for those not\n          \
    \             implementing additional non-AS2-specified\n                    \
    \   functionality. \"AS2-Version: 1.0 through 1.9\" MAY\n                    \
    \   be used.  All implementations MUST interpret \"1.0\n                     \
    \  through 1.9\" as implementing this specification.\n                       However,\
    \ an implementation MAY extend this\n                       specification with\
    \ additional functionality by\n                       specifying versions 1.1\
    \ through 1.9.  If this\n                       mechanism is used, the additional\
    \ functionality\n                       MUST be completely transparent to implementations\n\
    \                       with the \"AS2-Version:  1.0\" designation.\n   AS2-Version:\
    \ 1.1  - Designates those implementations that support\n                     \
    \  compression as defined by RFC 3274.\n   Receiving systems MUST NOT fail due\
    \ to the absence of the AS2-Version\n   header.  Its absence would indicate that\
    \ the message is from an\n   implementation based on a previous version of this\
    \ specification.\n"
- title: 6.2.  AS2 System Identifiers
  contents:
  - "6.2.  AS2 System Identifiers\n   To aid the receiving system in identifying the\
    \ sending system,\n   AS2-From and AS2-To headers are used.\n          AS2-From:\
    \ < AS2-name >\n          AS2-To: < AS2-name >\n   These AS2 headers contain textual\
    \ values, as described below,\n   identifying the sender/receiver of a data exchange.\
    \  Their values may\n   be company specific, such as Data Universal Numbering\
    \ System (DUNS)\n   numbers, or they may be simply identification strings agreed\
    \ upon\n   between the trading partners.\n      AS2-text = \"!\" /           ;\
    \ printable ASCII characters\n                 %d35-91 /       ; except double-quote\
    \ (%d34)\n                 %d93-126        ; or backslash (%d92)\n      AS2-qtext\
    \ = AS2-text / SP  ; allow space only in quoted text\n      AS2-quoted-pair =\
    \ \"\\\" DQUOTE /  ; \\\" or\n                        \"\\\" \"\\\"       ; \\\
    \\\n      AS2-quoted-name = DQUOTE 1*128( AS2-qtext /\n                      \
    \                AS2-quoted-pair) DQUOTE\n      AS2-atomic-name = 1*128AS2-text\n\
    \      AS2-name = AS2-atomic-name / AS2-quoted-name\n   The AS2-From header value\
    \ and the AS2-To header value MUST each be an\n   AS2-name, MUST each be comprised\
    \ of from 1 to 128 printable ASCII\n   characters, and MUST NOT be folded.  The\
    \ value in each of these\n   headers is case-sensitive.  The string definitions\
    \ given above are in\n   ABNF format [14].\n   The AS2-quoted-name SHOULD be used\
    \ only if the AS2-name does not\n   conform to AS2-atomic-name.\n   The AS2-To\
    \ and AS2-From header fields MUST be present in all AS2\n   messages and AS2 MDNs\
    \ whether asynchronous or synchronous in nature,\n   except for asynchronous MDNs,\
    \ which are sent using SMTP.\n   The AS2-name for the AS2-To header in a response\
    \ or MDN MUST match\n   the AS2-name of the AS2-From header in the corresponding\
    \ request\n   message.  Likewise, the AS2-name for the AS2-From header in a\n\
    \   response or MDN MUST match the AS2-name of the AS2-To header in the\n   corresponding\
    \ AS2 request message.\n   The sending system may choose to limit the possible\
    \ AS2-To/AS2-From\n   textual values but MUST not exceed them.  The receiving\
    \ system MUST\n   make no restrictions on the textual values and SHOULD handle\
    \ all\n   possible implementations.  However, implementers must be aware that\n\
    \   older AS2 products may not adhere to this convention.  Trading\n   partner\
    \ agreements should be made to ensure that older products can\n   support the\
    \ system identifiers that are used.\n   There is no required response to a client\
    \ request containing invalid\n   or unknown AS2-From or AS2-To header values.\
    \  The receiving AS2\n   system MAY return an unsigned MDN with an explanation\
    \ of the error,\n   if the sending system requested an MDN.\n"
- title: 7.  Structure and Processing of an MDN Message
  contents:
  - '7.  Structure and Processing of an MDN Message

    '
- title: 7.1.  Introduction
  contents:
  - "7.1.  Introduction\n   In order to support non-repudiation of receipt, a signed\
    \ receipt,\n   based on digitally signing a message disposition notification,\
    \ is to\n   be implemented by a receiving trading partner's UA.  The message\n\
    \   disposition notification, specified by RFC 3798, is digitally signed\n   by\
    \ a receiving trading partner as part of a multipart/signed MIME\n   message.\n\
    \   The following support for signed receipts is REQUIRED:\n      1. The ability\
    \ to create a multipart/report; where the\n         report-type = disposition-notification.\n\
    \      2. The ability to calculate a message integrity check (MIC) on the\n  \
    \       received message.  The calculated MIC value will be returned to\n    \
    \     the sender of the message inside the signed receipt.\n      3. The ability\
    \ to create a multipart/signed content with the\n         message disposition\
    \ notification as the first body part, and\n         the signature as the second\
    \ body part.\n      4. The ability to return the signed receipt to the sending\
    \ trading\n         partner.\n      5. The ability to return either a synchronous\
    \ or an asynchronous\n         receipt as the sending party requests.\n   The\
    \ signed receipt is used to notify a sending trading partner that\n   requested\
    \ the signed receipt that:\n      1. The receiving trading partner acknowledges\
    \ receipt of the sent\n         EC Interchange.\n      2. If the sent message\
    \ was signed, then the receiving trading\n         partner has authenticated the\
    \ sender of the EC Interchange.\n      3. If the sent message was signed, then\
    \ the receiving trading\n         partner has verified the integrity of the sent\
    \ EC Interchange.\n   Regardless of whether the EDI/EC Interchange was sent in\
    \ S/MIME\n   format, the receiving trading partner's UA MUST provide the following\n\
    \   basic processing:\n      1. If the sent EDI/EC Interchange is encrypted, then\
    \ the encrypted\n         symmetric key and initialization vector (if applicable)\
    \ is\n         decrypted using the receiver's private key.\n      2. The decrypted\
    \ symmetric encryption key is then used to decrypt\n         the EDI/EC Interchange.\n\
    \      3. The receiving trading partner authenticates signatures in a\n      \
    \   message using the sender's public key.  The authentication\n         algorithm\
    \ performs the following:\n         a. The message integrity check (MIC or Message\
    \ Digest), is\n            decrypted using the sender's public key.\n        \
    \ b. A MIC on the signed contents (the MIME header and encoded\n            EDI\
    \ object, as per RFC 1767) in the message received is\n            calculated\
    \ using the same one-way hash function that the\n            sending trading partner\
    \ used.\n         c. The MIC extracted from the message that was sent and the\
    \ MIC\n            calculated using the same one-way hash function that the\n\
    \            sending trading partner used are compared for equality.\n      4.\
    \ The receiving trading partner formats the MDN and sets the\n         calculated\
    \ MIC into the \"Received-content-MIC\" extension field.\n      5. The receiving\
    \ trading partner creates a multipart/signed MIME\n         message according\
    \ to RFC 1847.\n      6. The MDN is the first part of the multipart/signed message,\
    \ and\n         the digital signature is created over this MDN, including its\n\
    \         MIME headers.\n      7. The second part of the multipart/signed message\
    \ contains the\n         digital signature.  The \"protocol\" option specified\
    \ in the\n         second part of the multipart/signed is as follows:\n      \
    \         S/MIME: protocol = \"application/pkcs-7-signature\"\n      8. The signature\
    \ information is formatted according to S/MIME\n         specifications.\n   The\
    \ EC Interchange and the RFC 1767 MIME EDI content header can\n   actually be\
    \ part of a multi-part MIME content-type.  When the EDI\n   Interchange is part\
    \ of a multi-part MIME content-type, the MIC MUST\n   be calculated across the\
    \ entire multi-part content, including the\n   MIME headers.\n   The signed MDN,\
    \ when received by the sender of the EDI Interchange,\n   can be used by the sender\
    \ as follows:\n        o  As an acknowledgement that the EDI Interchange sent\
    \ was\n           delivered and acknowledged by the receiving trading partner.\n\
    \           The receiver does this by returning the original-message-id\n    \
    \       of the sent message in the MDN portion of the signed receipt.\n      \
    \  o  As an acknowledgement that the integrity of the EDI\n           Interchange\
    \ was verified by the receiving trading partner.\n           The receiver does\
    \ this by returning the calculated MIC of the\n           received EC Interchange\
    \ (and 1767 MIME headers) in the\n           \"Received-content-MIC\" field of\
    \ the signed MDN.\n        o  As an acknowledgement that the receiving trading\
    \ partner has\n           authenticated the sender of the EDI Interchange.\n \
    \       o  As a non-repudiation of receipt when the signed MDN is\n          \
    \ successfully verified by the sender with the receiving\n           trading partner's\
    \ public key and the returned MIC value\n           inside the MDN is the same\
    \ as the digest of the original\n           message.\n"
- title: 7.2.  Synchronous and Asynchronous MDNs
  contents:
  - "7.2.  Synchronous and Asynchronous MDNs\n   The AS2-MDN exists in two varieties:\
    \ synchronous and asynchronous.\n   The synchronous AS2-MDN is sent as an HTTP\
    \ response to an HTTP POST\n   or as an HTTPS response to an HTTPS POST.  This\
    \ form of AS2-MDN is\n   called synchronous because the AS2-MDN is returned to\
    \ the originator\n   of the POST on the same TCP/IP connection.\n   The asynchronous\
    \ AS2-MDN is sent on a separate HTTP, HTTPS, or SMTP\n   TCP/IP connection.  Logically,\
    \ the asynchronous AS2-MDN is a response\n   to an AS2 message.  However, at the\
    \ transfer-protocol layer, assuming\n   that no HTTP pipelining is utilized, the\
    \ asynchronous AS2-MDN is\n   delivered on a unique TCP/IP connection, distinct\
    \ from that used to\n   deliver the original AS2 message.  When handling an asynchronous\n\
    \   request, the HTTP response MUST be sent back before the MDN is\n   processed\
    \ and sent on the separate connection.\n   When an asynchronous AS2-MDN is requested\
    \ by the sender of an AS2\n   message, the synchronous HTTP or HTTPS response\
    \ returned to the\n   sender prior to terminating the connection MUST be a transfer-layer\n\
    \   response indicating the success or failure of the data transfer.  The\n  \
    \ format of such a synchronous response MAY be the same as that\n   response returned\
    \ when no AS2-MDN is requested.\n   The following diagram illustrates the synchronous\
    \ versus asynchronous\n   varieties of AS2-MDN delivery using HTTP:\n   Synchronous\
    \ AS2-MDN\n   [Peer1] ----( connect )----> [Peer2]\n   [Peer1] -----( send )------>\
    \ [Peer2]   [HTTP Request [AS2-Message]]\n   [Peer1] <---( receive )----- [Peer2]\
    \   [HTTP Response [AS2-MDN]]\n   Asynchronous AS2-MDN\n   [Peer1] ----( connect\
    \ )----> [Peer2]\n   [Peer1] -----( send )------> [Peer2]   [HTTP Request [AS2-Message]]\n\
    \   [Peer1] <---( receive )----- [Peer2]   [HTTP Response]\n   [Peer1]*<---( connect\
    \ )----- [Peer2]\n   [Peer1] <--- ( send )------- [Peer2]   [HTTP Request [AS2-MDN]]\n\
    \   [Peer1] ----( receive )----> [Peer2]   [HTTP Response]\n   * Note: An AS2-MDN\
    \ may be directed to a host different from that of\n   the sender of the AS2 message.\
    \  It may utilize a transfer protocol\n   different from that used to send the\
    \ original AS2 message.\n   The advantage of the synchronous MDN is that it can\
    \ provide the\n   sender of the AS2 Message with a verifiable confirmation of\
    \ message\n   delivery within a synchronous logic flow.  However, if the message\
    \ is\n   relatively large, the time required to process this message and to\n\
    \   return an AS2-MDN to the sender on the same TCP/IP connection may\n   exceed\
    \ the maximum configured time permitted for an IP connection.\n   The advantage\
    \ of the asynchronous MDN is that it provides for the\n   rapid return of a transfer-layer\
    \ response from the receiver,\n   confirming the receipt of data, therefore not\
    \ requiring that a TCP/IP\n   connection necessarily remain open for very long.\
    \  However, this\n   design requires that the asynchronous AS2-MDN contain enough\n\
    \   information to identify the original message uniquely so that, when\n   received\
    \ by the AS2 Message originator, the status of the original\n   AS2 Message can\
    \ be properly updated based on the contents of the\n   AS2-MDN.\n   Synchronous\
    \ or asynchronous HTTP or HTTPS MDNs are handled according\n   to the requirements\
    \ of this specification.\n   However, SMTP MDNs are formatted according to the\
    \ requirements of RFC\n   3335 [4].\n"
- title: 7.3.  Requesting a Signed Receipt
  contents:
  - "7.3.  Requesting a Signed Receipt\n   Message disposition notifications are requested\
    \ as per RFC 3798.  A\n   request that the receiving user agent issue a message\
    \ disposition\n   notification is made by placing the following header into the\
    \ message\n   to be sent:\n        MDN-request-header = \"Disposition-notification-to\"\
    \n                            \":\"  mail-address\n   The following example is\
    \ for requesting an MDN:\n        Disposition-notification-to: xxx@example.com\n\
    \   This syntax is a residue of the use of MDNs using SMTP transfer.\n   Because\
    \ this specification is adjusting the functionality from SMTP\n   to HTTP while\
    \ retaining as much as possible from the [4]\n   functionality, the mail-address\
    \ MUST be present.  The mail-address\n   field is specified as an RFC 2822 localpart@domain\
    \ [addr-spec]\n   address.  However, the address is not used to identify where\
    \ to\n   return the MDN.  Receiving applications MUST ignore the value and\n \
    \  MUST not complain about RFC 2822 address syntax violations.\n   When requesting\
    \ MDN-based receipts, the originator supplies\n   additional extension headers\
    \ that precede the message body.  These\n   header \"tags\" are as follows:\n\
    \   A Message-ID header is added to support message reconciliation, so\n   that\
    \ an Original-Message-Id value can be returned in the body part of\n   MDN.  Other\
    \ headers, especially \"Subject\" and \"Date\", SHOULD be\n   supplied; the values\
    \ of these headers are often mentioned in the\n   human-readable section of a\
    \ MDN to aid in identifying the original\n   message.\n   MDNs will be returned\
    \ in the HTTP response when requested, unless an\n   asynchronous return is requested.\n\
    \   To request an asynchronous message disposition notification, the\n   following\
    \ header is placed into the message that is sent:\n        Receipt-Delivery-Option:\
    \ return-URL\n   Here is an example requesting that the MDN be asynchronous:\n\
    \        Receipt-Delivery-Option: http://www.example.com/Path\n   Receipt-delivery-option\
    \ syntax allows return-url to use some schemes\n   other than HTTP using the POST\
    \ method.\n   The \"receipt-delivery-option: return-url\" string indicates the\
    \ URL to\n   use for an asynchronous MDN.  This header is NOT present if the\n\
    \   receipt is to be synchronous.  The email value in Disposition-\n   notification-to\
    \ is not used in this specification because it was\n   limited to RFC 2822 addresses;\
    \ the extension header \"Receipt-\n   delivery-option\" has been introduced to\
    \ provide a URL for the MDN\n   return by several transfer options.\n   The receipt-delivery-option's\
    \ value MUST be a URL indicating the\n   delivery transport destination for the\
    \ receipt.\n   An example request for an asynchronous MDN via an HTTP transport:\n\
    \        Receipt-delivery-option: http://www.example.com\n   An example request\
    \ for an asynchronous MDN via an HTTP/S transport:\n        Receipt-delivery-option:\
    \ https://www.example.com\n   An example request for an asynchronous MDN via an\
    \ SMTP transport:\n        Receipt-delivery-option: mailto:as2@example.com\n \
    \  For more information on requesting SMTP MDNs, refer to RFC 3335 [4].\n   Finally,\
    \ the header, Disposition-notification-options, identifies\n   characteristics\
    \ of message disposition notification as in [5].  The\n   most important of these\
    \ options is for indicating the signing options\n   for the MDN, as in the following\
    \ example:\n        Disposition-notification-options:\n             signed-receipt-protocol=optional,pkcs7-signature;\n\
    \             signed-receipt-micalg=optional,sha1,md5\n   For signing options,\
    \ consider the disposition-notification-options\n   syntax:\n        Disposition-notification-options\
    \ =\n                 \"Disposition-Notification-Options\" \":\"\n           \
    \       disposition-notification-parameters\n    where\n             disposition-notification-parameters\
    \ =\n                               parameter *(\";\" parameter)\n    where\n\
    \             parameter = attribute \"=\" importance \", \" 1#value\"\n    where\n\
    \             importance = \"required\" | \"optional\"\n   So the Disposition-notification-options\
    \ string could be:\n        signed-receipt-protocol=optional,<protocol symbol>;\n\
    \        signed-receipt-micalg=optional,<micalg1>,<micalg2>,...;\n   The currently\
    \ used value for <protocol symbol> is \"pkcs7-signature\"\n   for the S/MIME detached\
    \ signature format.\n   The currently supported values for MIC algorithm <micalg>\
    \ values are:\n        Algorithm   Value Used\n        ---------    -------\n\
    \         SHA-1        sha1\n         MD5          md5\n   The semantics of the\
    \ \"signed-receipt-protocol\" and the \"signed-\n   receipt-micalg\" parameters\
    \ are as follows:\n   1. The \"signed-receipt-protocol\" parameter is used to\
    \ request a\n      signed receipt from the recipient trading partner.  The \"\
    signed-\n      receipt-protocol\" parameter also specifies the format in which\
    \ the\n      signed receipt SHOULD be returned to the requester.\n      The \"\
    signed-receipt-micalg\" parameter is a list of MIC algorithms\n      preferred\
    \ by the requester for use in signing the returned\n      receipt.  The list of\
    \ MIC algorithms SHOULD be honored by the\n      recipient from left to right.\n\
    \      Both the \"signed-receipt-protocol\" and the \"signed- receipt-\n     \
    \ micalg\" option parameters are REQUIRED when requesting a signed\n      receipt.\n\
    \      The lack of the presence of the \"Receipt-Delivery-Option\"\n      indicates\
    \ that a receipt is synchronous in nature.  The presence\n      of the \"Receipt-Delivery-Option:\
    \ return-url\" indicates that an\n      asynchronous receipt is requested and\
    \ SHOULD be sent to the\n      \"return-url\".\n   2. The \"importance\" attribute\
    \ of \"Optional\" is defined in RFC 3798,\n      Section 2.2, and has the following\
    \ meaning:\n      Parameters with an importance of \"Optional\" permit a UA that\
    \ does\n      not understand the particular options parameter to still generate\n\
    \      an MDN in response to a request for a MDN.\n      A UA that does not understand\
    \ the \"signed-receipt-protocol\"\n      parameter or the \"signed-receipt-micalg\"\
    \ will obviously not return\n      a signed receipt.\n      The importance of\
    \ \"Optional\" is used for the signed receipt\n      parameters because it is\
    \ RECOMMENDED that an MDN be returned to\n      the requesting trading partner\
    \ even if the recipient could not\n      sign it.\n      The returned MDN will\
    \ contain information on the disposition of\n      the message and on why the\
    \ MDN could not be signed.  See the\n      Disposition field in Section 7.5 for\
    \ more information.\n      Within an EDI trading relationship, if a signed receipt\
    \ is\n      expected and is not returned, then the validity of the transaction\n\
    \      is up to the trading partners to resolve.\n      In general, if a signed\
    \ receipt is required in the trading\n      relationship and is not received,\
    \ the transaction will likely not\n      be considered valid.\n"
- title: 7.3.1.  Signed Receipt Considerations
  contents:
  - "7.3.1.  Signed Receipt Considerations\n   The method used to request a receipt\
    \ or a signed receipt is defined\n   in RFC 3798, \"An Extensible Message Format\
    \ for Message Disposition\n   Notifications\".\n   The \"rules\" are as follows:\n\
    \   1. When a receipt is requested, explicitly specifying that the\n      receipt\
    \ be signed, then the receipt MUST be returned with a\n      signature.\n   2.\
    \ When a receipt is requested, explicitly specifying that the\n      receipt be\
    \ signed, but the recipient cannot support either the\n      requested protocol\
    \ format or the requested MIC algorithms, then\n      either a signed or unsigned\
    \ receipt SHOULD be returned.\n   3. When a signature is not explicitly requested,\
    \ or if the signed\n      receipt request parameter is not recognized by the UA,\
    \ then no\n      receipt, an unsigned receipt, or a signed receipt MAY be returned\n\
    \      by the recipient.\n   NOTE: For Internet EDI, it is RECOMMENDED that when\
    \ a signature is\n   not explicitly requested, or if parameters are not recognized,\
    \ the UA\n   send back, at a minimum, an unsigned receipt.  If, however, a signed\n\
    \   receipt was always returned as a policy, whether requested or not,\n   then\
    \ any false unsigned receipts can be repudiated.\n   When a request for a signed\
    \ receipt is made, but there is an error in\n   processing the contents of the\
    \ message, a signed receipt MUST still\n   be returned.  The request for a signed\
    \ receipt SHALL still be\n   honored, though the transaction itself may not be\
    \ valid.  The reason\n   why the contents could not be processed MUST be set in\
    \ the\n   \"disposition-field\".\n   When a signed receipt request is made, the\
    \ \"Received-content-MIC\"\n   MUST always be returned to the requester (except\
    \ when corruption\n   prevents computation of the digest in accordance with the\
    \ following\n   specification).  The \"Received-content-MIC\" MUST be calculated\
    \ as\n   follows:\n      o  For any signed messages, the MIC to be returned is\
    \ calculated\n         on the RFC1767/RFC3023 MIME header and content.\n     \
    \    Canonicalization on the MIME headers MUST be performed before\n         the\
    \ MIC is calculated, since the sender requesting the signed\n         receipt\
    \ was also REQUIRED to canonicalize.\n      o  For encrypted, unsigned messages,\
    \ the MIC to be returned is\n         calculated on the decrypted RFC 1767/RFC3023\
    \ MIME header and\n         content.  The content after decryption MUST be canonicalized\n\
    \         before the MIC is calculated.\n      o  For unsigned, unencrypted messages,\
    \ the MIC MUST be calculated\n         over the message contents without the MIME\
    \ or any other RFC\n         2822 headers, since these are sometimes altered or\
    \ reordered by\n         Mail Transport Agents (MTAs).\n"
- title: 7.4.  MDN Format and Values
  contents:
  - "7.4.  MDN Format and Values\n   This section defines the format of the AS2 Message\
    \ Disposition\n   Notification (AS2-MDN).\n"
- title: 7.4.1.  AS2-MDN General Formats
  contents:
  - "7.4.1.  AS2-MDN General Formats\n   The AS2-MDN follows the MDN specification\
    \ [5] except where noted in\n   this section.  The modified ABNF definitions in\
    \ this document use the\n   vertical-bar character, '|', to denote a logical \"\
    OR\" construction.\n   This usage follows RFC 2616 [3].  HTTP entities referred\
    \ to below are\n   not further defined in this document.  Refer to RFC 2616 [3]\
    \ for\n   complete definitions of HTTP entities.  The format of the AS2-MDN is:\n\
    \   AS2-MDN = AS2-sync-MDN | AS2-async-http-MDN |\n       AS2-async-smtp-MDN\n\
    \   AS2-sync-MDN =\n       Status-Line\n       *(( general-header | response-header\
    \ | entity-header )\n       CRLF )\n       CRLF\n       AS2-MDN-body\n   Status-Line\
    \ =\n       HTTP-Version SP Status-Code SP Reason-Phrase CRLF\n   AS2-async-http-MDN\
    \ =\n       Request-Line\n       *(( general-header | request-header | entity-header\
    \ )\n       CRLF )\n       CRLF\n       AS2-MDN-body\n   Request-Line =\n    \
    \   Method SP Request-URI SP HTTP-Version CRLF\n   AS2-async-smtp-MDN =\n    \
    \   *(( general-header | request-header | entity-header )\n       CRLF )\n   \
    \    CRLF\n       AS2-MDN-body\n   AS2-MDN-body =\n       AS2-signed-MDN-body\
    \ | AS2-unsigned-MDN-body\n"
- title: 7.4.2.  AS2-MDN Construction
  contents:
  - "7.4.2.  AS2-MDN Construction\n   The AS2-MDN-body is formatted as a MIME multipart/report\
    \ with a\n   report-type of \"disposition-notification\".  When the message is\n\
    \   unsigned, the transfer-layer (\"outermost\") entity-headers of the\n   AS2-MDN\
    \ contain the content-type header that specifies a content-type\n   of \"multipart/report\"\
    \ and parameters indicating the report-type, and\n   the value of the outermost\
    \ multipart boundary.\n   When the AS2-MDN is signed, the transfer-layer (\"outermost\"\
    ) entity-\n   headers of the AS2-MDN contain a content-type header that specifies\
    \ a\n   content-type of \"multipart/signed\" and parameters indicating the\n \
    \  algorithm used to compute the message digest, the signature-\n   formatting\
    \ protocol (e.g., pkcs7-signature), and the value of the\n   outermost multipart\
    \ boundary.  The first part of the MIME\n   multipart/signed message is an embedded\
    \ MIME multipart/report of type\n   \"disposition-notification\".  The second\
    \ part of the multipart/signed\n   message contains a MIME application/pkcs7-signature\
    \ message.\n   The first part of the MIME multipart/report is a \"human-readable\"\
    \n   portion that contains a general description of the message\n   disposition.\
    \  The second part of the MIME multipart/report is a\n   \"machine-readable\"\
    \ portion that is defined as:\n   AS2-disposition-notification-content =\n   \
    \    [ reporting-ua-field CRLF ]\n       [ mdn-gateway-field CRLF ]\n       final-recipient-field\
    \ CRLF\n       [ original-message-id-field CRLF ]\n       AS2-disposition-field\
    \ CRLF\n       *( failure-field CRLF )\n       *( error-field CRLF )\n       *(\
    \ warning-field CRLF )\n       *( extension-field CRLF )\n       [ AS2-received-content-MIC-field\
    \ CRLF ]\n"
- title: 7.4.3.  AS2-MDN Fields
  contents:
  - "7.4.3.  AS2-MDN Fields\n   The rules for constructing the AS2-disposition-notification\
    \ content\n   are identical to the disposition-notification-content rules provided\n\
    \   in Section 7 of RFC 3798 [5], except that the RFC 3798 disposition-\n   field\
    \ has been replaced with the AS2-disposition-field and that the\n   AS2-received-content-MIC\
    \ field has been added.  The differences\n   between the RFC 3798 disposition-field\
    \ and the AS2-disposition-field\n   are described below.  Where there are differences\
    \ between this\n   document and RFC 3798, those entity names have been changed\
    \ by pre-\n   pending \"AS2-\".  Entities that do not differ from RFC 3798 are\
    \ not\n   necessarily further defined in this document; refer to RFC 3798,\n \
    \  Section 7, \"Collected Grammar\", for the original grammar.\n   AS2-disposition-field\
    \ =\n       \"Disposition\" \":\" disposition-mode \";\"\n       AS2-disposition-type\
    \ [ '/' AS2-disposition-modifier ]\n   disposition-mode =\n       action-mode\
    \ \"/\" sending-mode\n   action-mode =\n       \"manual-action\" | \"automatic-action\"\
    \n   sending-mode =\n       \"MDN-sent-manually\" | \"MDN-sent-automatically\"\
    \n   AS2-disposition-type =\n       \"processed\" | \"failed\"\n   AS2-disposition-modifier\
    \ =\n       ( \"error\" | \"warning\" ) | AS2-disposition-modifier-extension\n\
    \   AS2-disposition-modifier-extension =\n       \"error: authentication-failed\"\
    \ |\n       \"error: decompression-failed\" |\n       \"error: decryption-failed\"\
    \ |\n       \"error: insufficient-message-security\" |\n       \"error: integrity-check-failed\"\
    \ |\n       \"error: unexpected-processing-error\" |\n       \"warning: \" AS2-MDN-warning-description\
    \ |\n       \"failure: \" AS2-MDN-failure-description\n   AS2-MDN-warning-description\
    \ = *( TEXT )\n   AS2-MDN-failure-description = *( TEXT )\n   AS2-received-content-MIC-field\
    \ =\n       \"Received-content-MIC\" \":\" encoded-message-digest \",\"\n    \
    \   digest-alg-id CRLF\n   encoded-message-digest =\n       1*( 'A'-Z' | 'a'-'z'\
    \ | '0'-'9' | '/' | '+' | '=' )  (\n       i.e. base64( message-digest ) )\n \
    \  digest-alg-id = \"sha1\" | \"md5\"\n   \"Insufficient-message-security\" and\
    \ \"decompression-failed\" are new\n   error codes that are not mentioned in the\
    \ AS1 RFC 3335, and may not\n   be compatible with earlier implementations of\
    \ AS2.\n   The \"Received-content-MIC\" extension field is set when the integrity\n\
    \   of the received message is verified.  The MIC is the base64-encoded\n   message-digest\
    \ computed over the received message with a hash\n   function.  This field is\
    \ required for signed receipts but optional\n   for unsigned receipts.  For details\
    \ defining the specific content\n   over which the message digest is to be computed,\
    \ see Section 7.3.1 of\n   this document.\n   For signed messages, the algorithm\
    \ used to calculate the MIC MUST be\n   the same as that used on the message that\
    \ was signed.  If the message\n   is not signed, then the SHA-1 algorithm SHOULD\
    \ be used.  This field\n   is set only when the contents of the message are processed\n\
    \   successfully.  This field is used in conjunction with the recipient's\n  \
    \ signature on the MDN so that the sender can verify non-repudiation of\n   receipt.\n\
    \   AS2-MDN field names (e.g., \"Disposition:\", \"Final-Recipient:\") are\n \
    \  case insensitive (cf. RFC 3798, Section 3.1.1).  AS2-MDN action-\n   modes,\
    \ sending-modes, AS2-disposition-types, and AS2-disposition-\n   modifier values,\
    \ which are defined above, and user-supplied *( TEXT )\n   values are also case\
    \ insensitive.  AS2 implementations MUST NOT make\n   assumptions regarding the\
    \ values supplied for AS2-MDN-warning-\n   description or AS2-MDN-failure-description,\
    \ or for the values of any\n   (optional) error, warning, or failure fields.\n"
- title: 7.4.4.  Additional AS2-MDN Programming Notes
  contents:
  - "7.4.4.  Additional AS2-MDN Programming Notes\n   o  Unlike SMTP, for HTTP transactions,\
    \ Original-Recipient and Final-\n      Recipient SHOULD not be different.  The\
    \ value in Original-\n      Message-ID SHOULD match the original Message-ID header\
    \ value.\n   o  Refer to RFC 3798 for the formatting of the MDN, except for the\n\
    \      specific deviations mentioned above.\n   o  Refer to RFC 3462 and RFC 3798\
    \ for the formatting of the content-\n      type entity-headers for the MDN.\n\
    \   o  Use an action-mode of \"automatic-action\" when the disposition\n     \
    \ described by the disposition type was a result of an automatic\n      action\
    \ rather than that of an explicit instruction by the user for\n      this message.\n\
    \   o  Use an action-mode of \"manual-action\" when the disposition\n      described\
    \ by the disposition type was a result of an explicit\n      instruction by the\
    \ user rather than some sort of automatically\n      performed action.\n   o \
    \ Use a sending-mode of \"MDN-sent-automatically\" when the MDN is\n      sent\
    \ because the UA had previously been configured to do so.\n   o  Use a sending-mode\
    \ of \"MDN-sent-manually\" when the user explicitly\n      gave permission for\
    \ this particular MDN to be sent.\n   o  The sending-mode \"MDN-sent-manually\"\
    \ is meaningful ONLY with\n      \"manual-action\", not with \"automatic-action\"\
    .\n   o  The \"failed\" disposition type MUST NOT be used for the situation\n\
    \      in which there is some problem in processing the message other\n      than\
    \ interpreting the request for an MDN.  The \"processed\" or\n      other disposition\
    \ type with appropriate disposition modifiers is\n      to be used in such situations.\n"
- title: 7.5.  Disposition Mode, Type, and Modifier
  contents:
  - '7.5.  Disposition Mode, Type, and Modifier

    '
- title: 7.5.1.  Disposition Mode Overview
  contents:
  - "7.5.1.  Disposition Mode Overview\n   This section provides a brief overview\
    \ of how \"processed\", \"error\",\n   \"failure\", and \"warning\" are used.\n"
- title: 7.5.2.  Successful Processing Status Indication
  contents:
  - "7.5.2.  Successful Processing Status Indication\n   When the request for a receipt\
    \ or signed receipt, and the received\n   message contents are successfully processed\
    \ by the receiving EDI UA,\n   a receipt or MDN SHOULD be returned with the disposition-type\
    \ set to\n   \"processed\".  When the MDN is sent automatically by the EDI UA,\
    \ and\n   there is no explicit way for a user to control the sending of the\n\
    \   MDN, then the first part of the \"disposition-mode\" SHOULD be set to\n  \
    \ \"automatic-action\".  When the MDN is being sent under user-\n   configurable\
    \ control, then the first part of the \"disposition-mode\"\n   SHOULD be set to\
    \ \"manual-action\".  Since a request for a signed\n   receipt should always be\
    \ honored, the user MUST not be allowed to\n   configure the UA not to send a\
    \ signed receipt when the sender\n   requests one.\n   The second part of the\
    \ disposition-mode is set to \"MDN-sent-manually\"\n   if the user gave explicit\
    \ permission for the MDN to be sent.  Again,\n   the user MUST not be allowed\
    \ to explicitly refuse to send a signed\n   receipt when the sender requests one.\
    \  The second part of the\n   \"disposition-mode\" is set to \"MDN-sent-automatically\"\
    \ whenever the\n   EDI UA sends the MDN automatically, regardless of whether the\
    \ sending\n   was under the control of a user, administrator, or software.\n \
    \  Because EDI content is generally handled automatically by the EDI UA,\n   a\
    \ request for a receipt or signed receipt will generally return the\n   following\
    \ in the \"disposition-field\":\n       Disposition: automatic-action/MDN-sent-automatically;\
    \ processed\n   Note that this specification does not restrict the use of the\n\
    \   \"disposition-mode\" just to automatic actions.  Manual actions are\n   valid\
    \ as long as it is kept in mind that a request for a signed\n   receipt MUST be\
    \ honored.\n"
- title: 7.5.3.  Unsuccessful Processed Content
  contents:
  - "7.5.3.  Unsuccessful Processed Content\n   The request for a signed receipt requires\
    \ the use of two\n   \"disposition-notification-options\", which specify the protocol\
    \ format\n   of the returned signed receipt, and the MIC algorithm used to\n \
    \  calculate the MIC over the message contents.  The \"disposition-field\"\n \
    \  values that should be used if the message content is being rejected\n   or\
    \ ignored (for instance, if the EDI UA determines that a signed\n   receipt cannot\
    \ be returned because it does not support the requested\n   protocol format, the\
    \ EDI UA chooses not to process the message\n   contents itself) MUST be specified\
    \ in the MDN \"disposition-field\" as\n   follows:\n       Disposition: \"disposition-mode\"\
    ;  failed/Failure:\n        unsupported format\n   The \"failed\" AS2-disposition-type\
    \ MUST be used when a failure occurs\n   that prevents the proper generation of\
    \ an MDN.  For example, this\n   disposition-type would apply if the sender of\
    \ the message requested\n   the application of an unsupported message-integrity-check\
    \ (MIC)\n   algorithm.\n   The \"failure:\" AS2-disposition-modifier-extension\
    \ SHOULD be used with\n   an implementation-defined description of the failure.\
    \  Further\n   information about the failure may be contained in a failure-field.\n\
    \   The syntax of the \"failed\" disposition-type is general, allowing the\n \
    \  sending of any textual information along with the \"failed\"\n   disposition-type.\
    \  Implementations MUST support any printable textual\n   characters after the\
    \ Failure disposition-type.  For use in Internet\n   EDI, the following \"failed\"\
    \ values are pre-defined and MUST be\n   supported:\n       \"Failure: unsupported\
    \ format\"\n       \"Failure: unsupported MIC-algorithms\"\n"
- title: 7.5.4.  Unsuccessful Non-Content Processing
  contents:
  - "7.5.4.  Unsuccessful Non-Content Processing\n   When errors occur in processing\
    \ the received message (other than\n   content), the \"disposition-field\" MUST\
    \ be set to the \"processed\"\n   value for disposition-type and the \"error\"\
    \ value for disposition-\n   modifier.\n   The \"error\" AS2-disposition-modifier\
    \ with the \"processed\"\n   disposition-type MUST be used to indicate that an\
    \ error of some sort\n   occurred that prevented successful processing of the\
    \ message.\n   Further information may be contained in an error-field.\n   An\
    \ \"error:\" AS2-disposition-modifier-extension SHOULD be used to\n   combine\
    \ the indication of an error with a predefined description of a\n   specific,\
    \ well-known error.  Further information about the error may\n   be contained\
    \ in an error field.\n   For internet EDI use, the following \"error\" AS2-disposition-modifier\n\
    \   values are defined:\n   o \"Error: decryption-failed\"           - the receiver\
    \ could not\n                                            decrypt the message\n\
    \                                            contents.\n   o \"Error: authentication-failed\"\
    \       - the receiver could not\n                                           \
    \ authenticate the sender.\n   o \"Error: integrity-check-failed\"      - the\
    \ receiver could not\n                                            verify content\
    \ integrity.\n   o \"Error: unexpected-processing-error\" - a catch-all for any\n\
    \                                            additional processing\n         \
    \                                   errors.\n   An example of how the \"disposition-field\"\
    \ would look when errors\n   other than those in content processing are detected\
    \ is as follows:\n       Disposition: \"disposition-mode\"; processed/Error:\n\
    \         decryption-failed\n"
- title: 7.5.5.  Processing Warnings
  contents:
  - "7.5.5.  Processing Warnings\n   Situations arise in EDI when, even if a trading\
    \ partner cannot be\n   authenticated correctly, the trading partners still agree\
    \ to continue\n   processing the EDI transactions.  Transaction reconciliation\
    \ is done\n   between the trading partners at a later time.  In the content\n\
    \   processing warning situations as described above, the \"disposition-\n   field\"\
    \ MUST be set to the \"processed\" disposition-type value, and the\n   \"warning\"\
    \ to the \"disposition-modifier\" value.\n   The \"warning\" AS2-disposition-modifier\
    \ MUST be used with the\n   \"processed\" disposition-type to indicate that the\
    \ message was\n   successfully processed but that an exceptional condition occurred.\n\
    \   Further information may be contained in a warning-field.\n   A \"warning:\"\
    \ AS2-disposition-modifier-extension SHOULD be used to\n   combine the indication\
    \ of a warning with an implementation-defined\n   description of the warning.\
    \  Further information about the warning\n   may be contained in a warning-field.\n\
    \   For use in Internet EDI, the following \"warning\"\n   disposition-modifier-extension\
    \ value is defined:\n       \"Warning: authentication-failed, processing continued\"\
    \n   An example of how the \"disposition-field\" would look when warning\n   other\
    \ than those for content processing are detected is as follows:\n   Example:\n\
    \       Disposition: \"disposition-mode\"; processed/Warning:\n         authentication-failed,\
    \ processing continued\n"
- title: 7.5.6.  Backward Compatibility with Disposition Type, Modifier, and
  contents:
  - "7.5.6.  Backward Compatibility with Disposition Type, Modifier, and\n       \
    \ Extension\n   The following set of examples represents typical constructions\
    \ of the\n   Disposition field that have been in use by AS2 implementations. \
    \ This\n   is NOT an exhaustive list of possible constructions.  However, AS2\n\
    \   implementations MUST accept constructions of this type to be backward\n  \
    \ compatible with earlier AS2 versions.\n      Disposition: automatic-action/MDN-sent-automatically;\
    \ processed\n      Disposition: automatic-action/MDN-sent-automatically;\n   \
    \   processed/error: authentication-failed\n      Disposition: automatic-action/MDN-sent-automatically;\n\
    \      processed/warning: duplicate-document\n      Disposition: automatic-action/MDN-sent-automatically;\n\
    \      failed/failure: sender-equals-receiver\n   The following set of examples\
    \ represents allowable constructions of\n   the Disposition field that combine\
    \ the historic constructions above\n   with optional RFC 3798 error, warning,\
    \ and failure fields.  AS2\n   implementations MAY produce these constructions.\
    \  However, AS2\n   servers are not required to recognize or process optional\
    \ error,\n   warning, or failure fields at this time.  Note that the use of the\n\
    \   multiple error fields in the second example below provides for the\n   indication\
    \ of multiple error conditions.\n      Disposition: automatic-action/MDN-sent-automatically;\
    \ processed\n      Disposition: automatic-action/MDN-sent-automatically;\n   \
    \     processed/error: decryption-failed\n      Error: The signature did not decrypt\
    \ into a valid PKCS#1\n        Type-2 block.\n      Error: The length of the decrypted\
    \ key does not equal the\n        octet length of the modulus.\n      Disposition:\
    \ automatic-action/MDN-sent-automatically;\n        processed/warning: duplicate-document\n\
    \      Warning: An identical message already exists at the\n        destination\
    \ server.\n      Disposition: automatic-action/MDN-sent-automatically;\n     \
    \   failed/failure: sender-equals-receiver\n      Failure: The AS2-To name is\
    \ identical to the AS2-From name.\n   The following set of examples represents\
    \ allowable constructions of\n   the Disposition field that employ pure RFC 3798\
    \ Disposition-modifiers\n   with optional error, warning, and failure fields.\
    \  These examples are\n   provided as informational only.  These constructions\
    \ are not\n   guaranteed to be backward compatible with AS2 implementations prior\n\
    \   to version 1.1.\n      Disposition: automatic-action/MDN-sent-automatically;\
    \ processed\n      Disposition: automatic-action/MDN-sent-automatically;\n   \
    \     processed/error\n      Error: authentication-failed\n      Error: The signature\
    \ did not decrypt into a valid PKCS#1 Type-2\n        block.\n      Error: The\
    \ length of the decrypted key does not equal the\n        octet length of the\
    \ modulus.\n      Disposition: automatic-action/MDN-sent-automatically;\n    \
    \    processed/warning\n      Warning: duplicate-document\n      Disposition:\
    \ automatic-action/MDN-sent-automatically; failed\n      Failure: sender-equals-receiver\n"
- title: 7.6.  Receipt Reply Considerations in an HTTP POST
  contents:
  - "7.6.  Receipt Reply Considerations in an HTTP POST\n   The details of the response\
    \ to the POST command vary depending upon\n   whether a receipt has been requested.\n\
    \   With no extended header requesting a receipt, and with no errors\n   accessing\
    \ the request-URI specified processing, the status line in\n   the Response to\
    \ the POST request SHOULD be in the 200 range.  Status\n   codes in the 200 range\
    \ SHOULD also be used when an entity is returned\n   (a signed receipt in a multipart/signed\
    \ content type or an unsigned\n   receipt in a multipart/report).  Even when the\
    \ disposition of the\n   data was an error condition at the authentication, decryption\
    \ or\n   other higher level, the HTTP status code SHOULD indicate success at\n\
    \   the HTTP level.\n   The HTTP server-side application may respond with an unsolicited\n\
    \   multipart/report as a message body that the HTTP client might not\n   have\
    \ solicited, but the client may discard this.  Applications SHOULD\n   avoid emitting\
    \ unsolicited receipt replies because bandwidth or\n   processing limitations\
    \ might have led administrators to suspend\n   asking for acknowledgements.\n\
    \   Message Disposition Notifications, when used in the HTTP reply\n   context,\
    \ will closely parallel a SMTP MDN.  For example, the\n   disposition field is\
    \ a required element in the machine-readable\n   second part of a multipart/report\
    \ for a MDN.  The final-recipient-\n   field ([5], Section 3.1) value SHOULD be\
    \ derived from the entity\n   headers of the request.\n   In an MDN, the first\
    \ part of the multipart/report (the human-readable\n   part) SHOULD include items\
    \ such as the subject, the date, and other\n   information when those fields are\
    \ present in entity header fields\n   following the POST request.  An application\
    \ MUST report the Message-\n   ID of the request in the second part of the multipart/report\
    \ (the\n   machine-readable part).  Also, an MDN SHOULD have its own unique\n\
    \   Message-ID HTTP header.  The HTTP reply SHOULD normally omit the\n   third\
    \ optional part of the multipart/report (used to return the\n   original message\
    \ or its headers in the SMTP context).\n"
- title: 8.  Public Key Certificate Handling
  contents:
  - "8.  Public Key Certificate Handling\n   In the near term, the exchange of public\
    \ keys and certification of\n   these keys MUST be handled as part of the process\
    \ of establishing a\n   trading partnership.  The UA and/or EDI application interface\
    \ must\n   maintain a database of public keys used for encryption or signatures,\n\
    \   in addition to the mapping between the EDI trading partner ID and the\n  \
    \ RFC 2822 [9] email address and HTTP URL/URI.  The procedures for\n   establishing\
    \ a trading partnership and configuring the secure EDI\n   messaging system might\
    \ vary among trading partners and software\n   packages.\n   X.509 certificates\
    \ are REQUIRED.  It is RECOMMENDED that trading\n   partners self-certify each\
    \ other if an agreed-upon certification\n   authority is not used.  This applicability\
    \ statement does NOT require\n   the use of a certification authority.  The use\
    \ of a certification\n   authority is therefore OPTIONAL.  Certificates may be\
    \ self-signed.\n   It is RECOMMENDED that when trading partners are using S/MIME\
    \ they\n   also exchange public key certificates, considering advice provided\
    \ in\n   [12].\n   The message formats useful for certificate exchange are found\
    \ in [7]\n   and [13].\n   In the long term, additional standards may be developed\
    \ to simplify\n   the process of establishing a trading partnership, including\
    \ the\n   third-party authentication of trading partners, as well as the\n   attributes\
    \ of the trading relationship.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This entire document is concerned with secure\
    \ transport of business\n   to business data, and it considers both data confidentiality\
    \ and\n   authentication issues.\n   Extracted from RFC 3851 [7]:\n   40-bit encryption\
    \ is considered weak by most cryptographers.  Using\n   weak cryptography in S/MIME\
    \ offers little actual security over\n   sending plaintext.  However, other features\
    \ of S/MIME, such as the\n   specification of Triple DES and the ability to announce\
    \ stronger\n   cryptographic capabilities to parties with whom you communicate,\n\
    \   allow senders to create messages that use strong encryption.  Using\n   weak\
    \ cryptography is never recommended unless the only alternative is\n   no cryptography.\
    \  When feasible, sending and receiving agents SHOULD\n   inform senders and recipients\
    \ of the relative cryptographic strength\n   of messages.\n   Extracted from RFC\
    \ 3850 [12]:\n   When processing certificates, there are many situations where\
    \ the\n   processing might fail.  Because the processing may be done by a user\n\
    \   agent, a security gateway, or other program, there is no single way\n   to\
    \ handle such failures.  Just because the methods to handle the\n   failures have\
    \ not been listed, however, the reader should not assume\n   that they are not\
    \ important.  The opposite is true: if a certificate\n   is not provably valid\
    \ and associated with the message, the processing\n   software should take immediate\
    \ and noticeable steps to inform the end\n   user about it.\n   Some of the many\
    \ situations in which signature and certificate\n   checking might fail include\
    \ the following:\n      o  No certificate chain leads to a trusted CA.\n     \
    \ o  No ability to check the Certificate Revocation List (CRL) for a\n       \
    \  certificate.\n      o  An invalid CRL was received.\n      o  The CRL being\
    \ checked is expired.\n      o  The certificate is expired.\n      o  The certificate\
    \ has been revoked.\n   There are certainly other instances where a certificate\
    \ may be\n   invalid, and it is the responsibility of the processing software\
    \ to\n   check them all thoroughly, and to decide what to do if the check\n  \
    \ fails.  See RFC 3280 for additional information on certificate path\n   validation.\n\
    \   The following are additional security considerations to those listed\n   in\
    \ [7] and [12].\n"
- title: 9.1.  NRR Cautions
  contents:
  - "9.1.  NRR Cautions\n   This specification seeks to provide multiple mechanisms\
    \ that can be\n   combined in accordance with local policies to achieve a wide\
    \ range of\n   security needs as determined by threat and risk analyses of the\n\
    \   business peers.  It is required that all these mechanisms be\n   implemented\
    \ by AS2 software so that the software has capabilities\n   that promote strong\
    \ interoperability, no matter what policies are\n   adopted.\n   One strong cluster\
    \ of mechanisms (the secure transmission loop) can\n   provide good support for\
    \ meeting the evidentiary needs of non-\n   repudiation of receipt by the original\
    \ sender and by a third party\n   supplied with all stated evidence.  However,\
    \ this specification does\n   not itself define non-repudiation of receipt nor\
    \ enumerate its\n   essential properties because NRR is a business analysis and/or\
    \ legal\n   requirement, and not relevantly defined by a technical applicability\n\
    \   statement.\n   Some analyses observe that non-repudiation of receipt presupposes\n\
    \   that non-repudiation of the sender of the original message is\n   obtained,\
    \ and further that non-repudiation should be implemented by\n   means of digital\
    \ signature on the original message.  To satisfy\n   strict NRR evidence, authentication\
    \ and integrity MUST be provided by\n   some mechanism, and the RECOMMENDED mechanism\
    \ is digital signatures\n   on both the original message and the receipt message.\n\
    \   Given that this specification has selected several mechanisms that\n   can\
    \ be combined in several ways, it is important to realize that if a\n   digital\
    \ signature is omitted from the original message, in order to\n   satisfy the\
    \ preceding analysis of NRR requirements, some\n   authentication mechanism MUST\
    \ accompany the request for a signed\n   receipt and its included Received-content-MIC\
    \ value.  This\n   authentication might come from using client-side SSL, authentication\n\
    \   via IPsec, or HTTP authentication (while using SSL).  In any case,\n   records\
    \ of the message content, its security basis, and the digest\n   value need to\
    \ be retained for the NRR process.\n   Therefore, if NRR is one of the goals of\
    \ the policy that is adopted,\n   by using the mechanisms of the secure transmission\
    \ loop mentioned\n   above and by retaining appropriate records of authentication\
    \ at the\n   original message sender site, strong evidentiary requirements\n \
    \  proposed for NRR can be fulfilled.\n   Other ways of proceeding may fall short\
    \ of fulfilling the most\n   stringent sets of evidence required for NRR to obtain,\
    \ but may\n   nevertheless be part of a commercial trading agreement and, as such,\n\
    \   are good enough for the parties involved.  However, if MDNs are\n   returned\
    \ unsigned, evidentiary requirements for NRR are weak; some\n   authentication\
    \ of the identity of the receiver is needed.\n"
- title: 9.2.  HTTPS Remark
  contents:
  - "9.2.  HTTPS Remark\n   The following certificate types MUST be supported for\
    \ SSL server-side\n   certificates:\n      o  with URL in the Distinguished Name\
    \ Common Name attribute\n      o  without URL in the Distinguished Name Common\
    \ Name attribute\n      o  self-signed (self-issued)\n      o  certification authority\
    \ certified\n   The URL, which matches the source server identity, SHOULD be carried\n\
    \   in the certificate.  However, it is not required that DNS checks or\n   reverse\
    \ lookups to vouch for the accuracy of the URL or server value.\n   Because server-side\
    \ certificates are exchanged, and also trust is\n   established during the configuration\
    \ of the trading partner\n   relationship, runtime checks are not required by\
    \ implementations of\n   this specification.\n   The complete certification chain\
    \ MUST be included in all\n   certificates.  All certificate verifications MUST\
    \ \"chain to root\" or\n   to an accepted trust anchor.  Additionally, the certificate\
    \ hash\n   SHOULD match the hash recomputed by the receiver.\n"
- title: 9.3.  Replay Remark
  contents:
  - "9.3.  Replay Remark\n   Because business data documents normally contain transaction\
    \ ids,\n   replays (such as resends of not-yet-acknowledged messages) are\n  \
    \ discarded as part of the normal process of duplicate detection.\n   Detection\
    \ of duplicates by Message-Id or by business transaction\n   identifiers is recommended.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   RFC 3335 registered two Disposition-Notification-Options\
    \ parameters\n      Parameter-name: signed-receipt-protocol\n      Parameter-name:\
    \ signed-receipt-micalg\n   that are also used by this specification (see Section\
    \ 7.3).\n   RFC 3335 also registered on MDN Extension field name\n      Extension\
    \ field name: Received-content-MIC\n   that is also used by this specification\
    \ (see Section 7.4.3).\n   Registration of the above is therefore NOT needed.\n"
- title: 10.1.  Registration
  contents:
  - "10.1.  Registration\n   This specification defines an extension to the Message\
    \ Disposition\n   Notification (MDN) protocol for a disposition-modifier in the\n\
    \   Disposition field of a body of content-type \"message/disposition-\n   notification\"\
    .\n"
- title: 10.1.1.  Disposition Modifier 'warning'
  contents:
  - "10.1.1.  Disposition Modifier 'warning'\n   Parameter-name:  warning\n   Semantics:\
    \ See Sections 7.4.3 and 7.5.5 of this document.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   Carl Hage, Karen Rosenfeld, Chuck Fenton, and many\
    \ others have\n   provided valuable suggestions that improved this applicability\n\
    \   statement.  The authors would also like to thank the vendors who\n   participated\
    \ in the Drummond Group Inc. AS2 interoperability testing.\n   Their contributions\
    \ led to great improvement in the clarity of this\n   document.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [1]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n        Extensions (MIME) Part One: Format of Internet Message\
    \ Bodies\",\n        RFC 2045, November 1996.\n        Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n        Extensions (MIME) Part Two: Media Types\"\
    , RFC 2046, November\n        1996.\n        Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n        Extensions (MIME) Part Five: Conformance Criteria and\
    \ Examples\",\n        RFC 2049, November 1996.\n   [2]  Crocker, D., \"MIME Encapsulation\
    \ of EDI Objects\", RFC 1767,\n        March 1995.\n   [3]  Fielding,  R., Gettys,\
    \ J., Mogul, J., Frystyk, H., Masinter, L.,\n        Leach, P., and T. Berners-Lee,\
    \ \"Hypertext Transfer Protocol --\n        HTTP/1.1\", RFC 2616, June 1999.\n\
    \   [4]  Harding, T., Drummond, R., and C. Shih, \"MIME-based Secure\n       \
    \ Peer-to-Peer Business Data Interchange over the Internet\", RFC\n        3335,\
    \ September 2002.\n   [5]  Hansen, T. and G. Vaudreuil, \"Message Disposition\
    \ Notification\",\n        RFC 3798, May 2004.\n   [6]  Galvin, J., Murphy, S.,\
    \ Crocker, S., and N. Freed, \"Security\n        Multiparts for MIME: Multipart/Signed\
    \ and Multipart/Encrypted\",\n        RFC 1847, October 1995.\n   [7]  Ramsdell,\
    \ B., \"Secure/Multipurpose Internet Mail Extensions\n        (S/MIME) Version\
    \ 3.1 Message Specification\", RFC 3851, July\n        2004.\n   [8]  Vaudreuil,\
    \ G., \"The Multipart/Report Content Type for the\n        Reporting of Mail System\
    \ Administrative Messages\", RFC 3462,\n        January 2003.\n   [9]  Resnick,\
    \ P., \"Internet Message Format\", RFC 2822, April 2001.\n   [10] Murata, M.,\
    \ Laurent, S. St., and D. Kohn, \"XML Media Types\", RFC\n        3023, January\
    \ 2001.\n   [11] Bradner, S., \"The Internet Standards Process -- Revision 3\"\
    , BCP\n        9, RFC 2026, October 1996.\n   [12] Ramsdell, B., \"Secure/Multipurpose\
    \ Internet Mail Extensions\n        (S/MIME) Version 3.1 Certificate Handling\"\
    , RFC 3850, July 2004.\n   [13] Housley, R., \"Cryptographic Message Syntax (CMS)\"\
    , RFC 3852,\n        July 2004.\n   [14] Crocker, D. and P. Overell, \"Augmented\
    \ BNF for Syntax\n        Specifications: ABNF\", RFC 2234, November 1997.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [15] Dierks, T. and C. Allen, \"The TLS Protocol\
    \ Version 1.0\", RFC\n        2246, January 1999.\n"
- title: 'Appendix A:  Message Examples'
  contents:
  - "Appendix A:  Message Examples\n   NOTE: All examples are provided for illustration\
    \ only, and are not\n   considered part of the protocol specification.  If an\
    \ example\n   conflicts with the protocol definitions specified above or in the\n\
    \   other referenced RFCs, the example is wrong.\n"
- title: A.1.  Signed Message Requesting a Signed, Synchronous Receipt
  contents:
  - "A.1.  Signed Message Requesting a Signed, Synchronous Receipt\n   POST /receive\
    \ HTTP/1.0\n   Host: 10.234.160.12:80\n   User-Agent: AS2 Company Server\n   Date:\
    \ Wed, 31 Jul 2002 13:34:50 GMT\n   From: mrAS2@example.com\n   AS2-Version: 1.1\n\
    \   AS2-From: \"\\\"  as2Name  \\\"\"\n   AS2-To: 0123456780000\n   Subject: Test\
    \ Case\n   Message-Id: <200207310834482A70BF63@\\\"~~foo~~\\\">\n   Disposition-Notification-To:\
    \ mrAS2@example.com\n   Disposition-Notification-Options: signed-receipt-protocol=optional,\n\
    \     pkcs7-signature; signed-receipt-micalg=optional,sha1\n   Content-Type: multipart/signed;\
    \ boundary=\"as2BouNdary1as2\";\n     protocol=\"application/pkcs7-signature\"\
    ; micalg=sha1\n   Content-Length: 2464\n   --as2BouNdary1as2\n   Content-Type:\
    \ application/edi-x12\n   Content-Disposition: Attachment; filename=rfc1767.dat\n\
    \     [ISA ...EDI transaction data...IEA...]\n   --as2BouNdary1as2\n   Content-Type:\
    \ application/pkcs7-signature\n     [omitted binary pkcs7 signature data]\n  \
    \ --as2BouNdary1as2--\n"
- title: A.2.  MDN for Message A.1, Above
  contents:
  - "A.2.  MDN for Message A.1, Above\n   HTTP/1.0 200 OK\n   AS2-From: 0123456780000\n\
    \   AS2-To: \"\\\"  as2Name  \\\"\"\n   AS2-Version: 1.1\n   Message-ID: <709700825.1028122454671.JavaMail@ediXchange>\n\
    \   Content-Type: multipart/signed; micalg=sha1;\n        protocol=\"application/pkcs7-signature\"\
    ;\n        boundary=\"----=_Part_57_648441049.1028122454671\"\n   Connection:\
    \ Close\n   Content-Length: 1980\n   ------=_Part_57_648441049.1028122454671\n\
    \   & Content-Type: multipart/report;\n   & Report-Type=disposition-notification;\n\
    \   &    boundary=\"----=_Part_56_1672293592.1028122454656\"\n   &\n   &------=_Part_56_1672293592.1028122454656\n\
    \   &Content-Type: text/plain\n   &Content-Transfer-Encoding: 7bit\n   &\n   &MDN\
    \ for -\n   & Message ID: <200207310834482A70BF63@\\\"~~foo~~\\\">\n   &  From:\
    \ \"\\\"  as2Name  \\\"\"\n   &  To: \"0123456780000\"\n   &  Received on: 2002-07-31\
    \ at 09:34:14 (EDT)\n   & Status: processed\n   & Comment: This is not a guarantee\
    \ that the message has\n   &  been completely processed or &understood by the\
    \ receiving\n   &  translator\n   &\n   &------=_Part_56_1672293592.1028122454656\n\
    \   &Content-Type: message/disposition-notification\n   &Content-Transfer-Encoding:\
    \ 7bit\n   &\n   &Reporting-UA: AS2 Server\n   &Original-Recipient: rfc822; 0123456780000\n\
    \   &Final-Recipient: rfc822; 0123456780000\n   &Original-Message-ID: <200207310834482A70BF63@\\\
    \"~~foo~~\\\">\n   &Received-content-MIC: 7v7F++fQaNB1sVLFtMRp+dF+eG4=, sha1\n\
    \   &Disposition: automatic-action/MDN-sent-automatically;\n   &  processed\n\
    \   &\n   &------=_Part_56_1672293592.1028122454656--\n   ------=_Part_57_648441049.1028122454671\n\
    \   Content-Type: application/pkcs7-signature; name=smime.p7s\n   Content-Transfer-Encoding:\
    \ base64\n   Content-Disposition: attachment; filename=smime.p7s\n   MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQ\n\
    \   cp24hMJNbxDKHnlB9jTiQzLwSwo+/90Pc87x+Sc6EpFSUYWGAAAAAAAA\n   ------=_Part_57_648441049.1028122454671--\n\
    \   Notes:\n   1. The lines proceeded with \"&\" are what the signature is calculated\n\
    \      over.\n   2. For details on how to prepare the multipart/signed with protocol\
    \ =\n      \"application/pkcs7-signature\", see the \"S/MIME Message\n      Specification,\
    \ PKCS Security Services for MIME\".)\n   3. Note that the textual first body\
    \ part of the multipart/report can\n      be used to include a more detailed explanation\
    \ of the error\n      conditions reported by the disposition headers.  The first\
    \ body\n      part of the multipart/report, when used in this way, allows a\n\
    \      person to better diagnose a problem in detail.\n   4. As specified by RFC\
    \ 3462 [8], returning the original or portions\n      of the original message\
    \ in the third body part of the\n      multipart/report is not required.  This\
    \ is an optional body part.\n      However, it is RECOMMENDED that this body part\
    \ be omitted or left\n      blank.\n"
- title: A.3.  Signed, Encrypted Message Requesting a Signed, Asynchronous
  contents:
  - "A.3.  Signed, Encrypted Message Requesting a Signed, Asynchronous\n      Receipt\n\
    \   Message-ID: <#as2_company#01#a4260as2_companyout#>\n   Date: Thu, 19 Dec 2002\
    \ 15:04:18 GMT\n   From: me@example.com\n   Subject: Async MDN request\n   Mime-Version:\
    \ 1.0\n   Content-Type: application/pkcs7-mime;\n     smime-type=enveloped-data;\
    \ name=smime.p7m\n   Content-Transfer-Encoding: binary\n   Content-Disposition:\
    \ attachment; filename=smime.p7m\n   Recipient-Address: 10.240.1.2//\n   Disposition-Notification-To:\n\
    \     http://10.240.1.2:8201/exchange/as2_company\n   Disposition-Notification-Options:\
    \ signed-receipt-protocol=optional,\n    pkcs7-signature; signed-receipt-micalg=optional,sha1\n\
    \   Receipt-Delivery-Option:\n     http://10.240.1.2:8201/exchange/as2_company\n\
    \   AS2-From: as2_company\n   AS2-To: \"AS2 Test\"\n   AS2-Version: 1.1\n   Host:\
    \ 10.240.1.2:8101\n   Connection: close\n   Content-Length: 3428\n     [omitted\
    \ binary encrypted data]\n"
- title: A.4.  Asynchronous MDN for Message A.3, Above
  contents:
  - "A.4.  Asynchronous MDN for Message A.3, Above\n   POST / HTTP/1.1\n   Host: 10.240.1.2:8201\n\
    \   Connection: close, TE\n   TE: trailers, deflate, gzip, compress\n   User-Agent:\
    \ RPT-HTTPClient/0.3-3I (Windows 2000)\n   Date: Thu, 19 Dec 2002 15:03:38 GMT\n\
    \   Message-ID: <AS2-20021219_030338@as2_company.dgi_th>\n   AS2-Version: 1.1\n\
    \   Mime-Version: 1.0\n   Recipient-Address:\n   http://10.240.1.2:8201/exchange/as2_company\n\
    \   AS2-To: as2_company\n   AS2-From: \"AS2 Test\"\n   Subject: Your Requested\
    \ MDN Response\n   From: as2debug@example.com\n   Accept-Encoding: deflate, gzip,\
    \ x-gzip, compress, x-compress\n   Content-Type: multipart/signed; micalg=sha1;\n\
    \     protocol=\"application/pkcs7-signature\";\n     boundary=\"----=_Part_337_6452266.1040310218750\"\
    \n   Content-Length: 3103\n   ------=_Part_337_6452266.1040310218750\n   Content-Type:\
    \ multipart/report;\n     report-type=disposition-notification;\n     boundary=\"\
    ----=_Part_336_6069110.1040310218718\"\n   ------=_Part_336_6069110.1040310218718\n\
    \   Content-Type: text/plain; charset=us-ascii\n   Content-Transfer-Encoding:\
    \ 7bit\n   The message <x12.edi> sent to Recipient <AS2 Test> on Thu, 19 Dec\n\
    \   2002 15:04:18 GMT with Subject <async MDN request> has been received.\n  \
    \ The EDI Interchange was successfully decrypted, and its integrity was\n   verified.\
    \  In addition, the sender of the message, Sender\n   <as2_company> at Location\
    \ http://10.240.1.2:8201/exchange/as2_company\n   was authenticated as the originator\
    \ of the message.  There is no\n   guarantee, however, that the EDI interchange\
    \ was syntactically\n   correct, or that it was received by the EDI application/translator.\n\
    \   ------=_Part_336_6069110.1040310218718\n   Content-Type: message/disposition-notification\n\
    \   Content-Transfer-Encoding: 7bit\n   Reporting-UA: AS2@test:8101\n   Original-Recipient:\
    \ rfc822; \"AS2 Test\"\n   Final-Recipient: rfc822; \"AS2 Test\"\n   Original-Message-ID:\
    \ <#as2_company#01#a4260as2_companyout#>\n   Disposition: automatic-action/MDN-sent-automatically;\n\
    \     processed\n   Received-Content-MIC: Hes6my+vIxIYxmvsA+MNpEOTPAc=, sha1\n\
    \   ------=_Part_336_6069110.1040310218718--\n   ------=_Part_337_6452266.1040310218750\n\
    \   Content-Type: application/pkcs7-signature; name=smime.p7s\n   Content-Transfer-Encoding:\
    \ base64\n   Content-Disposition: attachment; filename=smime.p7s\n   BhbWjEfbyXoTAS/H0zpnEqLqbaBh29y2v82b8bdeGw8pipBQWmf53hIcqHGM\n\
    \   4ZBF3CHw5Wrf1JIE+8TwOzdbal30zeChw88WfRfD7c/j1fIA8sxsujvf2d9j\n   UxCUga8BVdVB9kH0Geexytyt0KvWQXfaEEcgZGUAAAAAAAA=\n\
    \   ------=_Part_337_6452266.1040310218750-\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dale Moberg\n   Cyclone Commerce\n   8388 E. Hartford\
    \ Drive, Suite 100\n   Scottsdale, AZ  85255 USA\n   EMail: dmoberg@cyclonecommerce.com\n\
    \   Rik Drummond\n   Drummond Group Inc.\n   4700 Bryant Irvin Court, Suite 303\n\
    \   Fort Worth, TX  76107 USA\n   EMail: rvd2@drummondgroup.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
