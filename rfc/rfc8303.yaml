- title: __initial_text__
  contents:
  - "                   On the Usage of Transport Features\n                  Provided\
    \ by IETF Transport Protocols\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how the transport protocols Transmission\n\
    \   Control Protocol (TCP), MultiPath TCP (MPTCP), Stream Control\n   Transmission\
    \ Protocol (SCTP), User Datagram Protocol (UDP), and\n   Lightweight User Datagram\
    \ Protocol (UDP-Lite) expose services to\n   applications and how an application\
    \ can configure and use the\n   features that make up these services.  It also\
    \ discusses the service\n   provided by the Low Extra Delay Background Transport\
    \ (LEDBAT)\n   congestion control mechanism.  The description results in a set\
    \ of\n   transport abstractions that can be exported in a transport services\n\
    \   (TAPS) API.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8303.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................5\n  \
    \ 3. Pass 1 ..........................................................6\n    \
    \  3.1. Primitives Provided by TCP .................................6\n      \
    \     3.1.1. Excluded Primitives or Parameters ...................9\n      3.2.\
    \ Primitives Provided by MPTCP ..............................10\n      3.3. Primitives\
    \ Provided by SCTP ...............................11\n           3.3.1. Excluded\
    \ Primitives or Parameters ..................18\n      3.4. Primitives Provided\
    \ by UDP and UDP-Lite ...................18\n      3.5. The Service of LEDBAT\
    \ .....................................19\n   4. Pass 2 .........................................................20\n\
    \      4.1. CONNECTION-Related Primitives .............................21\n  \
    \    4.2. DATA-Transfer-Related Primitives ..........................38\n   5.\
    \ Pass 3 .........................................................41\n      5.1.\
    \ CONNECTION-Related Transport Features .....................41\n      5.2. DATA-Transfer-Related\
    \ Transport Features ..................47\n           5.2.1. Sending Data .......................................47\n\
    \           5.2.2. Receiving Data .....................................48\n  \
    \         5.2.3. Errors .............................................49\n   6.\
    \ IANA Considerations ............................................49\n   7. Security\
    \ Considerations ........................................49\n   8. References\
    \ .....................................................50\n      8.1. Normative\
    \ References ......................................50\n      8.2. Informative\
    \ References ....................................52\n   Appendix A. Overview of\
    \ RFCs Used as Input for Pass 1 .............54\n   Appendix B. How This Document\
    \ Was Developed .......................54\n   Acknowledgements ..................................................56\n\
    \   Authors' Addresses ................................................56\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification describes how transport protocols offer\
    \ transport\n   services, such that applications using them are no longer directly\n\
    \   tied to a specific protocol.  Breaking this strict connection can\n   reduce\
    \ the effort for an application programmer, yet attain greater\n   transport flexibility\
    \ by pushing complexity into an underlying\n   transport services (TAPS) system.\n\
    \   This design process has started with a survey of the services\n   provided\
    \ by IETF transport protocols and congestion control\n   mechanisms [RFC8095].\
    \  The present document and [RFC8304] complement\n   this survey with an in-depth\
    \ look at the defined interactions between\n   applications and the following\
    \ unicast transport protocols:\n   Transmission Control Protocol (TCP), MultiPath\
    \ TCP (MPTCP), Stream\n   Control Transmission Protocol (SCTP), User Datagram\
    \ Protocol (UDP),\n   and Lightweight User Datagram Protocol (UDP-Lite).  We also\
    \ define a\n   primitive to enable/disable and configure the Low Extra Delay\n\
    \   Background Transport (LEDBAT) unicast congestion control mechanism.\n   For\
    \ UDP and UDP-Lite, the first step of the protocol analysis -- a\n   discussion\
    \ of relevant RFC text -- is documented in [RFC8304].\n   This snapshot in time\
    \ of the IETF transport protocols is published as\n   an RFC to document the analysis\
    \ by the authors and the TAPS Working\n   Group; this generates a set of transport\
    \ abstractions that can be\n   exported in a TAPS API.  It provides the basis\
    \ for the minimal set of\n   transport services that end systems supporting TAPS\
    \ should implement\n   [TAPS-MINSET].\n   The list of primitives, events, and\
    \ transport features in this\n   document is strictly based on the parts of protocol\
    \ specifications\n   that describe what the protocol provides to an application\
    \ using it\n   and how the application interacts with it.  Transport protocols\n\
    \   provide communication between processes that operate on network\n   endpoints,\
    \ which means that they allow for multiplexing of\n   communication between the\
    \ same IP addresses, and this multiplexing is\n   achieved using port numbers.\
    \  Port multiplexing is therefore assumed\n   to be always provided and not discussed\
    \ in this document.\n   Parts of a protocol that are explicitly stated as optional\
    \ to\n   implement are not covered.  Interactions between the application and\n\
    \   a transport protocol that are not directly related to the operation\n   of\
    \ the protocol are also not covered.  For example, there are various\n   ways\
    \ for an application to use socket options to indicate its\n   interest in receiving\
    \ certain notifications [RFC6458].  However, for\n   the purpose of identifying\
    \ primitives, events, and transport\n   features, the ability to enable or disable\
    \ the reception of\n   notifications is irrelevant.  Similarly, \"one-to-many\
    \ style sockets\"\n   [RFC6458] just affect the application programming style,\
    \ not how the\n   underlying protocol operates, and they are therefore not discussed\n\
    \   here.  The same is true for the ability to obtain the unchanged value\n  \
    \ of a parameter that an application has previously set (e.g., via\n   \"get\"\
    \ in get/set operations [RFC6458]).\n   The document presents a three-pass process\
    \ to arrive at a list of\n   transport features.  In the first pass (pass 1),\
    \ the relevant RFC\n   text is discussed per protocol.  In the second pass (pass\
    \ 2), this\n   discussion is used to derive a list of primitives and events that\
    \ are\n   uniformly categorized across protocols.  Here, an attempt is made to\n\
    \   present or -- where text describing primitives or events does not yet\n  \
    \ exist -- construct primitives or events in a slightly generalized\n   form to\
    \ highlight similarities.  This is, for example, achieved by\n   renaming primitives\
    \ or events of protocols or by avoiding a strict\n   1:1 mapping between the primitives\
    \ or events in the protocol\n   specification and primitives or events in the\
    \ list.  Finally, the\n   third pass (pass 3) presents transport features based\
    \ on pass 2,\n   identifying which protocols implement them.\n   In the list resulting\
    \ from the second pass, some transport features\n   are missing because they are\
    \ implicit in some protocols, and they\n   only become explicit when we consider\
    \ the superset of all transport\n   features offered by all protocols.  For example,\
    \ TCP always carries\n   out congestion control; we have to consider it together\
    \ with a\n   protocol like UDP (which does not have congestion control) before\
    \ we\n   can consider congestion control as a transport feature.  The complete\n\
    \   list of transport features across all protocols is therefore only\n   available\
    \ after pass 3.\n   Some protocols are connection oriented.  Connection-oriented\n\
    \   protocols often use an initial call to a specific primitive to open a\n  \
    \ connection before communication can progress and require\n   communication to\
    \ be explicitly terminated by issuing another call to\n   a primitive (usually\
    \ called 'Close').  A \"connection\" is the common\n   state that some transport\
    \ primitives refer to, e.g., to adjust\n   general configuration settings.  Connection\
    \ establishment,\n   maintenance, and termination are therefore used to categorize\n\
    \   transport primitives of connection-oriented transport protocols in\n   pass\
    \ 2 and pass 3.  For this purpose, UDP is assumed to be used with\n   \"connected\"\
    \ sockets, i.e., sockets that are bound to a specific pair\n   of addresses and\
    \ ports [RFC8304].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   Transport Feature:  a specific end-to-end feature that the\
    \ transport\n      layer provides to an application.  Examples include\n     \
    \ confidentiality, reliable delivery, ordered delivery, message-\n      versus-stream\
    \ orientation, etc.\n   Transport Service:  a set of transport features, without\
    \ an\n      association to any given framing protocol, which provides a\n    \
    \  complete service to an application.\n   Transport Protocol:  an implementation\
    \ that provides one or more\n      transport services using a specific framing\
    \ and header format on\n      the wire.\n   Transport Protocol Component:  an\
    \ implementation of a transport\n      feature within a protocol.\n   Transport\
    \ Service Instance:  an arrangement of transport protocols\n      with a selected\
    \ set of features and configuration parameters that\n      implement a single\
    \ transport service, e.g., a protocol stack (RTP\n      over UDP).\n   Application:\
    \  an entity that uses the transport layer for end-to-end\n      delivery of data\
    \ across the network (this may also be an upper-\n      layer protocol or tunnel\
    \ encapsulation).\n   Endpoint:  an entity that communicates with one or more\
    \ other\n      endpoints using a transport protocol.\n   Connection:  shared state\
    \ of two or more endpoints that persists\n      across messages that are transmitted\
    \ between these endpoints.\n   Primitive:  a function call that is used to locally\
    \ communicate\n      between an application and a transport endpoint.  A primitive\
    \ is\n      related to one or more transport features.\n   Event:  a primitive\
    \ that is invoked by a transport endpoint.\n   Parameter:  a value passed between\
    \ an application and a transport\n      protocol by a primitive.\n   Socket: \
    \ the combination of a destination IP address and a\n      destination port number.\n\
    \   Transport Address:  the combination of an IP address, transport\n      protocol,\
    \ and the port number used by the transport protocol.\n"
- title: 3.  Pass 1
  contents:
  - "3.  Pass 1\n   This first iteration summarizes the relevant text parts of the\
    \ RFCs\n   describing the protocols, focusing on what each transport protocol\n\
    \   provides to the application and how it is used (abstract API\n   descriptions,\
    \ where they are available).  When presenting primitives,\n   events, and parameters,\
    \ the use of lower- and upper-case characters\n   is made uniform for the sake\
    \ of readability.\n"
- title: 3.1.  Primitives Provided by TCP
  contents:
  - "3.1.  Primitives Provided by TCP\n   The initial TCP specification [RFC0793]\
    \ states:\n      The Transmission Control Protocol (TCP) is intended for use as\
    \ a\n      highly reliable host-to-host protocol between hosts in packet-\n  \
    \    switched computer communication networks, and in interconnected\n      systems\
    \ of such networks.\n   Section 3.8 of [RFC0793] further specifies the interaction\
    \ with the\n   application by listing several transport primitives.  It is also\n\
    \   assumed that an Operating System provides a means for TCP to\n   asynchronously\
    \ signal the application; the primitives representing\n   such signals are called\
    \ 'events' in this section.  This section\n   describes the relevant primitives.\n\
    \   Open:  This is either active or passive, to initiate a connection or\n   \
    \   listen for incoming connections.  All other primitives are\n      associated\
    \ with a specific connection, which is assumed to first\n      have been opened.\
    \  An active open call contains a socket.  A\n      passive open call with a socket\
    \ waits for a particular connection;\n      alternatively, a passive open call\
    \ can leave the socket\n      unspecified to accept any incoming connection. \
    \ A fully specified\n      passive call can later be made active by calling 'Send'.\n\
    \      Optionally, a timeout can be specified, after which TCP will abort\n  \
    \    the connection if data has not been successfully delivered to the\n     \
    \ destination (else a default timeout value is used).  A procedure\n      for\
    \ aborting the connection is used to avoid excessive\n      retransmissions, and\
    \ an application is able to control the\n      threshold used to determine the\
    \ condition for aborting; this\n      threshold may be measured in time units\
    \ or as a count of\n      retransmission [RFC1122].  This indicates that the timeout\
    \ could\n      also be specified as a count of retransmission.\n      Also optional,\
    \ for multihomed hosts, the local IP address can be\n      provided [RFC1122].\
    \  If it is not provided, a default choice will\n      be made in case of active\
    \ open calls.  A passive open call will\n      await incoming connection requests\
    \ to all local addresses and then\n      maintain usage of the local IP address\
    \ where the incoming\n      connection request has arrived.  Finally, the 'options'\
    \ parameter\n      allows the application to specify IP options such as Source\
    \ Route,\n      Record Route, or Timestamp [RFC1122].  It is not stated on which\n\
    \      segments of a connection these options should be applied, but\n      probably\
    \ on all segments, as this is also stated in a\n      specification given for\
    \ the usage of the Source Route IP option\n      (Section 4.2.3.8 of [RFC1122]).\
    \  Source Route is the only non-\n      optional IP option in this parameter,\
    \ allowing an application to\n      specify a source route when it actively opens\
    \ a TCP connection.\n      Master Key Tuples (MKTs) for authentication can optionally\
    \ be\n      configured when calling 'Open' (Section 7.1 of [RFC5925]).  When\n\
    \      authentication is in use, complete TCP segments are authenticated,\n  \
    \    including the TCP IPv4 pseudoheader, TCP header, and TCP data.\n      TCP\
    \ Fast Open (TFO) [RFC7413] allows applications to immediately\n      hand over\
    \ a message from the active open to the passive open side\n      of a TCP connection\
    \ together with the first message establishment\n      packet (the SYN).  This\
    \ can be useful for applications that are\n      sensitive to TCP's connection\
    \ setup delay.  [RFC7413] states that\n      \"TCP implementations MUST NOT use\
    \ TFO by default, but only use TFO\n      if requested explicitly by the application\
    \ on a per-service-port\n      basis.\"  The size of the message sent with TFO\
    \ cannot be more than\n      TCP's maximum segment size (minus options used in\
    \ the SYN).  For\n      the active open side, it is recommended to change or replace\
    \ the\n      connect() call in order to support a user data buffer argument\n\
    \      [RFC7413].  For the passive open side, the application needs to\n     \
    \ enable the reception of Fast Open requests, e.g., via a new\n      TCP_FASTOPEN\
    \ setsockopt() socket option before listen().  The\n      receiving application\
    \ must be prepared to accept duplicates of the\n      TFO message, as the first\
    \ data written to a socket can be\n      delivered more than once to the application\
    \ on the remote host.\n   Send:  This is the primitive that an application uses\
    \ to give the\n      local TCP transport endpoint a number of bytes that TCP should\n\
    \      reliably send to the other side of the connection.  The 'urgent'\n    \
    \  flag, if set, states that the data handed over by this send call\n      is\
    \ urgent and this urgency should be indicated to the receiving\n      process\
    \ in case the receiving application has not yet consumed all\n      non-urgent\
    \ data preceding it.  An optional timeout parameter can\n      be provided that\
    \ updates the connection's timeout (see 'Open').\n      Additionally, optional\
    \ parameters allow the ability to indicate\n      the preferred outgoing MKT (current_key)\
    \ and/or the preferred\n      incoming MKT (rnext_key) of a connection (Section\
    \ 7.1 of\n      [RFC5925]).\n   Receive:  This primitive allocates a receiving\
    \ buffer for a provided\n      number of bytes.  It returns the number of received\
    \ bytes provided\n      in the buffer when these bytes have been received and\
    \ written into\n      the buffer by TCP.  The application is informed of urgent\
    \ data via\n      an 'urgent' flag: if it is on, there is urgent data; if it is\
    \ off,\n      there is no urgent data or this call to 'Receive' has returned all\n\
    \      the urgent data.  The application is also informed about the\n      current_key\
    \ and rnext_key information carried in a recently\n      received segment via\
    \ an optional parameter (Section 7.1 of\n      [RFC5925]).\n   Close:  This primitive\
    \ closes one side of a connection.  It is\n      semantically equivalent to \"\
    I have no more data to send\" but does\n      not mean \"I will not receive any\
    \ more\", as the other side may\n      still have data to send.  This call reliably\
    \ delivers any data\n      that has already been given to TCP (and if that fails,\
    \ 'Close'\n      becomes 'abort').\n   Abort:  This primitive causes all pending\
    \ 'Send' and 'Receive' calls\n      to be aborted.  A TCP \"RESET\" message is\
    \ sent to the TCP endpoint\n      on the other side of the connection [RFC0793].\n\
    \   Close Event:  TCP uses this primitive to inform an application that\n    \
    \  the application on the other side has called the 'Close'\n      primitive,\
    \ so the local application can also issue a 'Close' and\n      terminate the connection\
    \ gracefully.  See [RFC0793], Section 3.5.\n   Abort Event:  When TCP aborts a\
    \ connection upon receiving a \"RESET\"\n      from the peer, it \"advises the\
    \ user and goes to the CLOSED state.\"\n      See [RFC0793], Section 3.4.\n  \
    \ User Timeout Event:  This event is executed when the user timeout\n      (Section\
    \ 3.9 of [RFC0793]) expires (see the definition of 'Open'\n      in this section).\
    \  All queues are flushed, and the application is\n      informed that the connection\
    \ had to be aborted due to user\n      timeout.\n   Error_Report event:  This\
    \ event informs the application of \"soft\n      errors\" that can be safely ignored\
    \ [RFC5461], including the\n      arrival of an ICMP error message or excessive\
    \ retransmissions\n      (reaching a threshold below the threshold where the connection\
    \ is\n      aborted).  See Section 4.2.4.1 of [RFC1122].\n   Type-of-Service:\
    \  Section 4.2.4.2 of the requirements for Internet\n      hosts [RFC1122] states\
    \ that \"The application layer MUST be able to\n      specify the Type-of-Service\
    \ (TOS) for segments that are sent on a\n      connection.\"  The application\
    \ should be able to change the TOS\n      during the connection lifetime, and\
    \ the TOS value should be passed\n      to the IP layer unchanged.  Since then,\
    \ the TOS field has been\n      redefined.  The Differentiated Services (Diffserv)\
    \ model [RFC2475]\n      [RFC3260] replaces this field in the IP header, assigning\
    \ the six\n      most significant bits to carry the Differentiated Services Code\n\
    \      Point (DSCP) field [RFC2474].\n   Nagle:  The Nagle algorithm delays sending\
    \ data for some time to\n      increase the likelihood of sending a full-sized\
    \ segment\n      (Section 4.2.3.4 of [RFC1122]).  An application can disable the\n\
    \      Nagle algorithm for an individual connection.\n   User Timeout Option:\
    \  The User Timeout Option (UTO) [RFC5482] allows\n      one end of a TCP connection\
    \ to advertise its current user timeout\n      value so that the other end of\
    \ the TCP connection can adapt its\n      own user timeout accordingly.  In addition\
    \ to the configurable\n      value of the user timeout (see 'Send'), there are\
    \ three per-\n      connection state variables that an application can adjust\
    \ to\n      control the operation of the UTO: 'adv_uto' is the value of the\n\
    \      UTO advertised to the remote TCP peer (default: system-wide\n      default\
    \ user timeout); 'enabled' (default false) is a boolean-type\n      flag that\
    \ controls whether the UTO option is enabled for a\n      connection.  This applies\
    \ to both sending and receiving.\n      'changeable' is a boolean-type flag (default\
    \ true) that controls\n      whether the user timeout may be changed based on\
    \ a UTO option\n      received from the other end of the connection. 'changeable'\n\
    \      becomes false when an application explicitly sets the user timeout\n  \
    \    (see 'Send').\n   Set/Get Authentication Parameters:  The preferred outgoing\
    \ MKT\n      (current_key) and/or the preferred incoming MKT (rnext_key) of a\n\
    \      connection can be configured.  Information about current_key and\n    \
    \  rnext_key carried in a recently received segment can be retrieved\n      (Section\
    \ 7.1 of [RFC5925]).\n"
- title: 3.1.1.  Excluded Primitives or Parameters
  contents:
  - "3.1.1.  Excluded Primitives or Parameters\n   The 'Open' primitive can be handed\
    \ optional precedence or security/\n   compartment information [RFC0793], but\
    \ this was not included here\n   because it is mostly irrelevant today [RFC7414].\n\
    \   The 'Status' primitive was not included because the initial TCP\n   specification\
    \ describes this primitive as \"implementation dependent\"\n   and states that\
    \ it \"could be excluded without adverse effect\"\n   [RFC0793].  Moreover, while\
    \ a data block containing specific\n   information is described, it is also stated\
    \ that not all of this\n   information may always be available.  While [RFC5925]\
    \ states that\n   'Status' \"SHOULD be augmented to allow the MKTs of a current\
    \ or\n   pending connection to be read (for confirmation)\", the same\n   information\
    \ is also available via 'Receive', which, following\n   [RFC5925], \"MUST be augmented\"\
    \ with that functionality.  The 'Send'\n   primitive includes an optional 'push'\
    \ flag which, if set, requires\n   data to be promptly transmitted to the receiver\
    \ without delay\n   [RFC0793]; the 'Receive' primitive described in can (under\
    \ some\n   conditions) yield the status of the 'push' flag.  Because \"push\"\n\
    \   functionality is optional to implement for both the 'Send' and\n   'Receive'\
    \ primitives [RFC1122], this functionality is not included\n   here.  The requirements\
    \ for Internet hosts [RFC1122] also introduce\n   keep-alives to TCP, but these\
    \ are optional to implement and hence not\n   considered here.  The same document\
    \ also describes that \"some TCP\n   implementations have included a FLUSH call\"\
    , indicating that this\n   call is also optional to implement; therefore, it is\
    \ not considered\n   here.\n"
- title: 3.2.  Primitives Provided by MPTCP
  contents:
  - "3.2.  Primitives Provided by MPTCP\n   MPTCP is an extension to TCP that allows\
    \ the use of multiple paths\n   for a single data stream.  It achieves this by\
    \ creating different so-\n   called TCP subflows for each of the interfaces and\
    \ scheduling the\n   traffic across these TCP subflows.  The service provided\
    \ by MPTCP is\n   described as follows in [RFC6182]:\n      Multipath TCP MUST\
    \ follow the same service model as TCP [RFC0793]:\n      in-order, reliable, and\
    \ byte-oriented delivery.  Furthermore, a\n      Multipath TCP connection SHOULD\
    \ provide the application with no\n      worse throughput or resilience than it\
    \ would expect from running a\n      single TCP connection over any one of its\
    \ available paths.\n   Further, there are some constraints on the API exposed\
    \ by MPTCP, as\n   stated in [RFC6182]:\n      A multipath-capable equivalent\
    \ of TCP MUST retain some level of\n      backward compatibility with existing\
    \ TCP APIs, so that existing\n      applications can use the newer transport merely\
    \ by upgrading the\n      operating systems of the end hosts.\n   As such, the\
    \ primitives provided by MPTCP are equivalent to the ones\n   provided by TCP.\
    \  Nevertheless, the MPTCP RFCs [RFC6824] and\n   [RFC6897] clarify some parts\
    \ of TCP's primitives with respect to\n   MPTCP and add some extensions for better\
    \ control on MPTCP's subflows.\n   Hereafter is a list of the clarifications and\
    \ extensions the above-\n   cited RFCs provide to TCP's primitives.\n   Open:\
    \  \"An application should be able to request to turn on or turn\n      off the\
    \ usage of MPTCP\" [RFC6897].  This functionality can be\n      provided through\
    \ a socket option called 'tcp_multipath_enable'.\n      Further, MPTCP must be\
    \ disabled in case the application is binding\n      to a specific address [RFC6897].\n\
    \   Send/Receive:  The sending and receiving of data does not require any\n  \
    \    changes to the application when MPTCP is being used [RFC6824].\n      The\
    \ MPTCP-layer will take one input data stream from an\n      application, and\
    \ split it into one or more subflows, with\n      sufficient control information\
    \ to allow it to be reassembled and\n      delivered reliably and in order to\
    \ the recipient application.\n      The use of the Urgent Pointer is special in\
    \ MPTCP [RFC6824], which\n      states: \"a TCP subflow MUST NOT use the Urgent\
    \ Pointer to\n      interrupt an existing mapping.\"\n   Address and Subflow Management:\
    \  MPTCP uses different addresses and\n      allows a host to announce these addresses\
    \ as part of the protocol.\n      The MPTCP API Considerations RFC [RFC6897] says\
    \ \"An application\n      should be able to restrict MPTCP to binding to a given\
    \ set of\n      addresses\" and thus allows applications to limit the set of\n\
    \      addresses that are being used by MPTCP.  Further, \"An application\n  \
    \    should be able to obtain information on the pairs of addresses\n      used\
    \ by the MPTCP subflows.\"\n"
- title: 3.3.  Primitives Provided by SCTP
  contents:
  - "3.3.  Primitives Provided by SCTP\n   TCP has a number of limitations that SCTP\
    \ removes (Section 1.1 of\n   [RFC4960]).  The following three removed limitations\
    \ directly\n   translate into transport features that are visible to an application\n\
    \   using SCTP: 1) it allows for preservation of message delimiters; 2)\n   it\
    \ does not provide in-order or reliable delivery unless the\n   application wants\
    \ that; 3) multihoming is supported.  In SCTP,\n   connections are called \"associations\"\
    \ and they can be between not\n   only two (as in TCP) but multiple addresses\
    \ at each endpoint.\n   Section 10 of the SCTP base protocol specification [RFC4960]\n\
    \   specifies the interaction with the application (which SCTP calls the\n   \"\
    Upper-Layer Protocol (ULP)\").  It is assumed that the Operating\n   System provides\
    \ a means for SCTP to asynchronously signal the\n   application; the primitives\
    \ representing such signals are called\n   'events' in this section.  Here, we\
    \ describe the relevant primitives.\n   In addition to the abstract API described\
    \ in Section 10 of [RFC4960],\n   an extension to the sockets API is described\
    \ in [RFC6458].  This\n   covers the functionality of the base protocol [RFC4960]\
    \ and some of\n   its extensions [RFC3758] [RFC4895] [RFC5061].  For other protocol\n\
    \   extensions [RFC6525] [RFC6951] [RFC7053] [RFC7496] [RFC7829]\n   [RFC8260],\
    \ the corresponding extensions of the sockets API are\n   specified in these protocol\
    \ specifications.  The functionality\n   exposed to the ULP through all these\
    \ APIs is considered here.\n   The abstract API contains a 'SetProtocolParameters'\
    \ primitive that\n   allows elements of a parameter list [RFC4960] to be adjusted;\
    \ it is\n   stated that SCTP implementations \"may allow ULP to customize some\
    \ of\n   these protocol parameters\", indicating that none of the elements of\n\
    \   this parameter list are mandatory to make ULP configurable.  Thus, we\n  \
    \ only consider the parameters in the abstract API that are also\n   covered in\
    \ one of the other RFCs listed above, which leads us to\n   exclude the parameters\
    \ 'RTO.Alpha', 'RTO.Beta', and 'HB.Max.Burst'.\n   For clarity, we also replace\
    \ 'SetProtocolParameters' itself with\n   primitives that adjust parameters or\
    \ groups of parameters that fit\n   together.\n   Initialize:  Initialize creates\
    \ a local SCTP instance that it binds\n      to a set of local addresses (and,\
    \ if provided, a local port\n      number) [RFC4960].  Initialize needs to be\
    \ called only once per\n      set of local addresses.  A number of per-association\n\
    \      initialization parameters can be used when an association is\n      created,\
    \ but before it is connected (via the primitive 'Associate'\n      below): the\
    \ maximum number of inbound streams the application is\n      prepared to support,\
    \ the maximum number of attempts to be made\n      when sending the INIT (the\
    \ first message of association\n      establishment), and the maximum retransmission\
    \ timeout (RTO) value\n      to use when attempting an INIT [RFC6458].  At this\
    \ point, before\n      connecting, an application can also enable UDP encapsulation\
    \ by\n      configuring the remote UDP encapsulation port number [RFC6951].\n\
    \   Associate:  This creates an association (the SCTP equivalent of a\n      connection)\
    \ that connects the local SCTP instance and a remote\n      SCTP instance.  To\
    \ identify the remote endpoint, it can be given\n      one or multiple (using\
    \ \"connectx\") sockets (Section 9.9 of\n      [RFC6458]).  Most primitives are\
    \ associated with a specific\n      association, which is assumed to first have\
    \ been created.\n      Associate can return a list of destination transport addresses\
    \ so\n      that multiple paths can later be used.  One of the returned\n    \
    \  sockets will be selected by the local endpoint as the default\n      primary\
    \ path for sending SCTP packets to this peer, but this\n      choice can be changed\
    \ by the application using the list of\n      destination addresses.  Associate\
    \ is also given the number of\n      outgoing streams to request and optionally\
    \ returns the number of\n      negotiated outgoing streams.  An optional parameter\
    \ of 32 bits,\n      the adaptation layer indication, can be provided [RFC5061].\
    \  If\n      authenticated chunks are used, the chunk types required to be sent\n\
    \      authenticated by the peer can be provided [RFC4895].  An\n      'SCTP_Cant_Str_Assoc'\
    \ notification is used to inform the\n      application of a failure to create\
    \ an association [RFC6458].  An\n      application could use sendto() or sendmsg()\
    \ to implicitly set up\n      an association, thereby handing over a message that\
    \ SCTP might\n      send during the association setup phase [RFC6458].  Note that\
    \ this\n      mechanism is different from TCP's TFO mechanism: the message would\n\
    \      arrive only once, after at least one RTT, as it is sent together\n    \
    \  with the third message exchanged during association setup, the\n      COOKIE-ECHO\
    \ chunk).\n   Send:  This sends a message of a certain length in bytes over an\n\
    \      association.  A number can be provided to later refer to the\n      correct\
    \ message when reporting an error, and a stream id is\n      provided to specify\
    \ the stream to be used inside an association\n      (we consider this as a mandatory\
    \ parameter here for simplicity: if\n      not provided, the stream id defaults\
    \ to 0).  A condition to\n      abandon the message can be specified (for example\
    \ limiting the\n      number of retransmissions or the lifetime of the user message).\n\
    \      This allows control of the partial reliability extension [RFC3758]\n  \
    \    [RFC7496].  An optional maximum lifetime can specify the time\n      after\
    \ which the message should be discarded rather than sent.  A\n      choice (advisory,\
    \ i.e., not guaranteed) of the preferred path can\n      be made by providing\
    \ a socket, and the message can be delivered\n      out-of-order if the 'unordered'\
    \ flag is set.  An advisory flag\n      indicates that the peer should not delay\
    \ the acknowledgement of\n      the user message provided [RFC7053].  Another\
    \ advisory flag\n      indicates whether the application prefers to avoid bundling\
    \ user\n      data with other outbound DATA chunks (i.e., in the same packet).\n\
    \      A payload protocol-id can be provided to pass a value that\n      indicates\
    \ the type of payload protocol data to the peer.  If\n      authenticated chunks\
    \ are used, the key identifier for\n      authenticating DATA chunks can be provided\
    \ [RFC4895].\n   Receive:  Messages are received from an association, and optionally\
    \ a\n      stream within the association, with their size returned.  The\n   \
    \   application is notified of the availability of data via a 'Data\n      Arrive'\
    \ notification.  If the sender has included a payload\n      protocol-id, this\
    \ value is also returned.  If the received message\n      is only a partial delivery\
    \ of a whole message, a 'partial' flag\n      will indicate so, in which case\
    \ the stream id and a stream\n      sequence number are provided to the application.\n\
    \   Shutdown:  This primitive gracefully closes an association, reliably\n   \
    \   delivering any data that has already been handed over to SCTP.  A\n      parameter\
    \ lets the application control whether further receive or\n      send operations\
    \ or both are disabled when the call is issued.  A\n      return code informs\
    \ about success or failure of this procedure.\n   Abort:  This ungracefully closes\
    \ an association, by discarding any\n      locally queued data and informing the\
    \ peer that the association\n      was aborted.  Optionally, an abort reason to\
    \ be passed to the peer\n      may be provided by the application.  A return code\
    \ informs about\n      success or failure of this procedure.\n   Change Heartbeat\
    \ / Request Heartbeat:  This allows the application to\n      enable/disable heartbeats\
    \ and optionally specify a heartbeat\n      frequency as well as requesting a\
    \ single heartbeat to be carried\n      out upon a function call, with a notification\
    \ about success or\n      failure of transmitting the HEARTBEAT chunk to the destination.\n\
    \   Configure Max. Retransmissions of an Association:  The parameter\n      'Association.Max.Retrans'\
    \ [RFC4960] (called \"sasoc_maxrxt\" in the\n      SCTP sockets API extensions\
    \ [RFC6458]) allows the configuration of\n      the number of unsuccessful retransmissions\
    \ after which an entire\n      association is considered as failed; this should\
    \ invoke a\n      'Communication Lost' notification.\n   Set Primary:  This allows\
    \ the ability to set a new primary default\n      path for an association by providing\
    \ a socket.  Optionally, a\n      default source address to be used in IP datagrams\
    \ can be provided.\n   Change Local Address / Set Peer Primary:  This allows an\
    \ endpoint to\n      add/remove local addresses to/from an association.  In addition,\n\
    \      the peer can be given a hint for which address to use as the\n      primary\
    \ address [RFC5061].\n   Configure Path Switchover:  The abstract API contains\
    \ a primitive\n      called 'Set Failure Threshold' [RFC4960].  This configures\
    \ the\n      parameter 'Path.Max.Retrans', which determines after how many\n \
    \     retransmissions a particular transport address is considered as\n      unreachable.\
    \  If there are more transport addresses available in\n      an association, reaching\
    \ this limit will invoke a path switchover.\n      An extension called \"SCTP-PF\"\
    \ adds a concept of \"Potentially\n      Failed (PF)\" paths to this method [RFC7829].\
    \  When a path is in PF\n      state, SCTP will not entirely give up sending on\
    \ that path, but it\n      will preferably send data on other active paths if\
    \ such paths are\n      available.  Entering the PF state is done upon exceeding\
    \ a\n      configured maximum number of retransmissions.  Thus, for all paths\n\
    \      where this mechanism is used, there are two configurable error\n      thresholds:\
    \ one to decide that a path is in PF state, and one to\n      decide that the\
    \ transport address is unreachable.\n   Set/Get Authentication Parameters:  This\
    \ allows an endpoint to add/\n      remove key material to/from an association.\
    \  In addition, the\n      chunk types being authenticated can be queried [RFC4895].\n\
    \   Add/Reset Streams, Reset Association:  This allows an endpoint to add\n  \
    \    streams to an existing association or to reset them individually.\n     \
    \ Additionally, the association can be reset [RFC6525].\n   Status:  The 'Status'\
    \ primitive returns a data block with information\n      about a specified association,\
    \ containing: an association\n      connection state; a destination transport\
    \ address list;\n      destination transport address reachability states; current\
    \ local\n      and peer receiver window sizes; current local congestion window\n\
    \      sizes; number of unacknowledged DATA chunks; number of DATA chunks\n  \
    \    pending receipt; a primary path; the most recent Smoothed Round-\n      Trip\
    \ Time (SRTT) on a primary path; RTO on a primary path; SRTT\n      and RTO on\
    \ other destination addresses [RFC4960]; and an MTU per\n      path [RFC6458].\n\
    \   Enable/Disable Interleaving:  This allows the negotiation of user\n      message\
    \ interleaving support for future associations to be enabled\n      or disabled.\
    \  For existing associations, it is possible to query\n      whether user message\
    \ interleaving support was negotiated or not on\n      a particular association\
    \ [RFC8260].\n   Set Stream Scheduler:  This allows the ability to select a stream\n\
    \      scheduler per association, with a choice of: First-Come, First-\n     \
    \ Served; Round-Robin; Round-Robin per Packet; Priority-Based; Fair\n      Bandwidth;\
    \ and Weighted Fair Queuing [RFC8260].\n   Configure Stream Scheduler:  This allows\
    \ the ability to change a\n      parameter per stream for the schedulers: a priority\
    \ value for the\n      Priority-Based scheduler and a weight for the Weighted\
    \ Fair\n      Queuing scheduler.\n   Enable/Disable NoDelay:  This turns on/off\
    \ any Nagle-like algorithm\n      for an association [RFC6458].\n   Configure\
    \ Send Buffer Size:  This controls the amount of data SCTP\n      may have waiting\
    \ in internal buffers to be sent or retransmitted\n      [RFC6458].\n   Configure\
    \ Receive Buffer Size:  This sets the receive buffer size in\n      octets, thereby\
    \ controlling the receiver window for an association\n      [RFC6458].\n   Configure\
    \ Message Fragmentation:  If a user message causes an SCTP\n      packet to exceed\
    \ the maximum fragmentation size (which can be\n      provided by the application\
    \ and is otherwise the Path MTU (PMTU)\n      size), then the message will be\
    \ fragmented by SCTP.  Disabling\n      message fragmentation will produce an\
    \ error instead of fragmenting\n      the message [RFC6458].\n   Configure Path\
    \ MTU Discovery:  Path MTU Discovery (PMTUD) can be\n      enabled or disabled\
    \ per peer address of an association\n      (Section 8.1.12 of [RFC6458]).  When\
    \ it is enabled, the current\n      Path MTU value can be obtained.  When it is\
    \ disabled, the Path MTU\n      to be used can be controlled by the application.\n\
    \   Configure Delayed SACK Timer:  The time before sending a SACK can be\n   \
    \   adjusted; delaying SACKs can be disabled; and the number of\n      packets\
    \ that must be received before a SACK is sent without\n      waiting for the delay\
    \ timer to expire can be configured [RFC6458].\n   Set Cookie Life Value:  The\
    \ cookie life value can be adjusted\n      (Section 8.1.2 of [RFC6458]).  'Valid.Cookie.Life'\
    \ is also one of\n      the parameters that is potentially adjustable with\n \
    \     'SetProtocolParameters' [RFC4960].\n   Set Maximum Burst:  The maximum burst\
    \ of packets that can be emitted\n      by a particular association (default 4,\
    \ and values above 4 are\n      optional to implement) can be adjusted (Section\
    \ 8.1.2 of\n      [RFC6458]).  'Max.Burst' is also one of the parameters that\
    \ is\n      potentially adjustable with 'SetProtocolParameters' [RFC4960].\n \
    \  Configure RTO Calculation:  The abstract API contains the following\n     \
    \ adjustable parameters: 'RTO.Initial'; 'RTO.Min'; 'RTO.Max';\n      'RTO.Alpha';\
    \ and 'RTO.Beta'.  Only the initial, minimum and\n      maximum RTOs are also\
    \ described as configurable in the SCTP\n      sockets API extensions [RFC6458].\n\
    \   Set DSCP Value:  The DSCP value can be set per peer address of an\n      association\
    \ (Section 8.1.12 of [RFC6458]).\n   Set IPv6 Flow Label:  The flow label field\
    \ can be set per peer\n      address of an association (Section 8.1.12 of [RFC6458]).\n\
    \   Set Partial Delivery Point:  This allows the ability to specify the\n    \
    \  size of a message where partial delivery will be invoked.  Setting\n      this\
    \ to a lower value will cause partial deliveries to happen more\n      often [RFC6458].\n\
    \   Communication Up Notification:  When a lost communication to an\n      endpoint\
    \ is restored or when SCTP becomes ready to send or receive\n      user messages,\
    \ this notification informs the application process\n      about the affected\
    \ association, the type of event that has\n      occurred, the complete set of\
    \ sockets of the peer, the maximum\n      number of allowed streams, and the inbound\
    \ stream count (the\n      number of streams the peer endpoint has requested).\
    \  If\n      interleaving is supported by both endpoints, this information is\n\
    \      also included in this notification.\n   Restart Notification:  When SCTP\
    \ has detected that the peer has\n      restarted, this notification is passed\
    \ to the upper layer\n      [RFC6458].\n   Data Arrive Notification:  When a message\
    \ is ready to be retrieved\n      via the 'Receive' primitive, the application\
    \ is informed by this\n      notification.\n   Send Failure Notification / Receive\
    \ Unsent Message / Receive\n      Unacknowledged Message: When a message cannot\
    \ be delivered via an\n      association, the sender can be informed about it\
    \ and learn whether\n      the message has just not been acknowledged or (e.g.,\
    \ in case of\n      lifetime expiry) if it has not even been sent.  This can also\n\
    \      inform the sender that a part of the message has been successfully\n  \
    \    delivered.\n   Network Status Change Notification:  This informs the application\n\
    \      about a socket becoming active/inactive [RFC4960] or \"Potentially\n  \
    \    Failed\" [RFC7829].\n   Communication Lost Notification:  When SCTP loses\
    \ communication to an\n      endpoint (e.g., via heartbeats or excessive retransmission)\
    \ or\n      detects an abort, this notification informs the application\n    \
    \  process of the affected association and the type of event (failure\n      OR\
    \ termination in response to a shutdown or abort request).\n   Shutdown Complete\
    \ Notification:  When SCTP completes the shutdown\n      procedures, this notification\
    \ is passed to the upper layer,\n      informing it about the affected association.\n\
    \   Authentication Notification:  When SCTP wants to notify the upper\n      layer\
    \ regarding the key management related to authenticated chunks\n      [RFC4895],\
    \ this notification is passed to the upper layer.\n   Adaptation Layer Indication\
    \ Notification:  When SCTP completes the\n      association setup and the peer\
    \ provided an adaptation layer\n      indication, this is passed to the upper\
    \ layer [RFC5061] [RFC6458].\n   Stream Reset Notification:  When SCTP completes\
    \ the procedure for\n      resetting streams [RFC6525], this notification is passed\
    \ to the\n      upper layer, informing it about the result.\n   Association Reset\
    \ Notification:  When SCTP completes the association\n      reset procedure [RFC6525],\
    \ this notification is passed to the\n      upper layer, informing it about the\
    \ result.\n   Stream Change Notification:  When SCTP completes the procedure used\n\
    \      to increase the number of streams [RFC6525], this notification is\n   \
    \   passed to the upper layer, informing it about the result.\n   Sender Dry Notification:\
    \  When SCTP has no more user data to send or\n      retransmit on a particular\
    \ association, this notification is\n      passed to the upper layer [RFC6458].\n\
    \   Partial Delivery Aborted Notification:  When a receiver has begun to\n   \
    \   receive parts of a user message but the delivery of this message\n      is\
    \ then aborted, this notification is passed to the upper layer\n      (Section\
    \ 6.1.7 of [RFC6458]).\n"
- title: 3.3.1.  Excluded Primitives or Parameters
  contents:
  - "3.3.1.  Excluded Primitives or Parameters\n   The 'Receive' primitive can return\
    \ certain additional information,\n   but this is optional to implement and therefore\
    \ not considered.  With\n   a 'Communication Lost' notification, some more information\
    \ may\n   optionally be passed to the application (e.g., identification to\n \
    \  retrieve unsent and unacknowledged data).  SCTP \"can invoke\" a\n   'Communication\
    \ Error' notification and \"may send\" a 'Restart'\n   notification, making these\
    \ two notifications optional to implement.\n   The list provided under 'Status'\
    \ includes \"etc.\", indicating that\n   more information could be provided. \
    \ The primitive 'Get SRTT Report'\n   returns information that is included in\
    \ the information that 'Status'\n   provides and is therefore not discussed. \
    \ The 'Destroy SCTP Instance'\n   API function was excluded: it erases the SCTP\
    \ instance that was\n   created by 'Initialize' but is not a primitive as defined\
    \ in this\n   document because it does not relate to a transport feature.  The\n\
    \   'Shutdown' event informs an application that the peer has sent a\n   SHUTDOWN,\
    \ and hence no further data should be sent on this socket\n   (Section 6.1 of\
    \ [RFC6458]).  However, if an application would try to\n   send data on the socket,\
    \ it would get an error message anyway; thus,\n   this event is classified as\
    \ \"just affecting the application\n   programming style, not how the underlying\
    \ protocol operates\" and is\n   not included here.\n"
- title: 3.4.  Primitives Provided by UDP and UDP-Lite
  contents:
  - "3.4.  Primitives Provided by UDP and UDP-Lite\n   The set of pass 1 primitives\
    \ for UDP and UDP-Lite is documented in\n   [RFC8304].\n"
- title: 3.5.  The Service of LEDBAT
  contents:
  - "3.5.  The Service of LEDBAT\n   The service of the LEDBAT congestion control\
    \ mechanism is described\n   as follows:\n      LEDBAT is designed for use by\
    \ background bulk-transfer\n      applications to be no more aggressive than standard\
    \ TCP congestion\n      control (as specified in RFC 5681) and to yield in the\
    \ presence of\n      competing flows, thus limiting interference with the network\n\
    \      performance of competing flows [RFC6817].\n   LEDBAT does not have any\
    \ primitives, as LEDBAT is not a transport\n   protocol.  According to its specification\
    \ [RFC6817]:\n      LEDBAT can be used as part of a transport protocol or as part\
    \ of\n      an application, as long as the data transmission mechanisms are\n\
    \      capable of carrying timestamps and acknowledging data frequently.\n   \
    \   LEDBAT can be used with TCP, Stream Control Transmission Protocol\n      (SCTP),\
    \ and Datagram Congestion Control Protocol (DCCP), with\n      appropriate extensions\
    \ where necessary; and it can be used with\n      proprietary application protocols,\
    \ such as those built on top of\n      UDP for peer-to-peer (P2P) applications.\n\
    \   At the time of writing, the appropriate extensions for TCP, SCTP, or\n   DCCP\
    \ do not exist.\n   A number of configurable parameters exist in the LEDBAT\n\
    \   specification: TARGET, which is the queuing delay target at which\n   LEDBAT\
    \ tries to operate, must be set to 100 ms or less.\n   'allowed_increase' (should\
    \ be 1, must be greater than 0) limits the\n   speed at which LEDBAT increases\
    \ its rate. 'gain', which according to\n   [RFC6817] \"MUST be set to 1 or less\"\
    \ to avoid a faster ramp-up than\n   TCP Reno, determines how quickly the sender\
    \ responds to changes in\n   queueing delay.  Implementations may divide 'gain'\
    \ into two\n   parameters: one for increase and a possibly larger one for decrease.\n\
    \   We call these parameters 'Gain_Inc' and 'Gain_Dec' here.\n   'Base_History'\
    \ is the size of the list of measured base delays, and,\n   according to [RFC6817],\
    \ \"SHOULD be 10\".  This list can be filtered\n   using a 'Filter' function,\
    \ which is not prescribed [RFC6817], that\n   yields a list of size 'Current_Filter'.\
    \  The initial and minimum\n   congestion windows, 'Init_CWND' and 'Min_CWND',\
    \ should both be 2.\n   Regarding which of these parameters should be under control\
    \ of an\n   application, the possible range goes from exposing nothing on the\
    \ one\n   hand to considering everything that is not prescribed with a \"MUST\"\
    \n   in the specification as a parameter on the other hand.  Function\n   implementations\
    \ are not provided as a parameter to any of the\n   transport protocols discussed\
    \ here; hence, we do not regard the\n   'Filter' function as a parameter.  However,\
    \ to avoid unnecessarily\n   limiting future implementations, we consider all\
    \ other parameters\n   above as tunable parameters that should be exposed.\n"
- title: 4.  Pass 2
  contents:
  - "4.  Pass 2\n   This pass categorizes the primitives from pass 1 based on whether\n\
    \   they relate to a connection or to data transmission.  Primitives are\n   presented\
    \ following the nomenclature\n   \"CATEGORY.[SUBCATEGORY].PRIMITIVENAME.PROTOCOL\"\
    .  The CATEGORY can be\n   CONNECTION or DATA.  Within the CONNECTION category,\
    \ ESTABLISHMENT,\n   AVAILABILITY, MAINTENANCE, and TERMINATION subcategories\
    \ can be\n   considered.  The DATA category does not have any SUBCATEGORY.  The\n\
    \   PROTOCOL name \"UDP(-Lite)\" is used when primitives are equivalent for\n\
    \   UDP and UDP-Lite; the PROTOCOL name \"TCP\" refers to both TCP and\n   MPTCP.\
    \  We present \"connection\" as a general protocol-independent\n   concept and\
    \ use it to refer to, e.g., TCP connections (identifiable\n   by a unique pair\
    \ of IP addresses and TCP port numbers), SCTP\n   associations (identifiable by\
    \ multiple IP address and port number\n   pairs), as well UDP and UDP-Lite connections\
    \ (identifiable by a\n   unique socket pair).\n   Some minor details are omitted\
    \ for the sake of generalization --\n   e.g., SCTP's 'Close' [RFC4960] returns\
    \ success or failure and lets\n   the application control whether further receive\
    \ or send operations,\n   or both, are disabled [RFC6458].  This is not described\
    \ in the same\n   way for TCP [RFC0793], but these details play no significant\
    \ role for\n   the primitives provided by either TCP or SCTP (for the sake of\
    \ being\n   generic, it could be assumed that both receive and send operations\n\
    \   are disabled in both cases).\n   The TCP 'Send' and 'Receive' primitives include\
    \ usage of an 'urgent'\n   parameter.  This parameter controls a mechanism that\
    \ is required to\n   implement the \"synch signal\" used by telnet [RFC0854],\
    \ but [RFC6093]\n   states that \"new applications SHOULD NOT employ the TCP urgent\n\
    \   mechanism.\"  Because pass 2 is meant as a basis for the creation of\n   future\
    \ systems, the \"urgent\" mechanism is excluded.  This also\n   concerns the notification\
    \ 'Urgent Pointer Advance' in the\n   'Error_Report' (Section 4.2.4.1 of [RFC1122]).\n\
    \   Since LEDBAT is a congestion control mechanism and not a protocol, it\n  \
    \ is not currently defined when to enable/disable or configure the\n   mechanism.\
    \  For instance, it could be a one-time choice upon\n   connection establishment\
    \ or when listening for incoming connections,\n   in which case it should be categorized\
    \ under CONNECTION.ESTABLISHMENT\n   or CONNECTION.AVAILABILITY, respectively.\
    \  To avoid unnecessarily\n   limiting future implementations, it was decided\
    \ to place it under\n   CONNECTION.MAINTENANCE, with all parameters that are described\
    \ in the\n   specification [RFC6817] made configurable.\n"
- title: 4.1.  CONNECTION-Related Primitives
  contents:
  - "4.1.  CONNECTION-Related Primitives\n   ESTABLISHMENT:\n   Active creation of\
    \ a connection from one transport endpoint to one or\n   more transport endpoints.\
    \  Interfaces to UDP and UDP-Lite allow both\n   connection-oriented and connection-less\
    \ usage of the API [RFC8085].\n   o  CONNECT.TCP:\n      Pass 1 primitive/event:\
    \ 'Open' (active) or 'Open' (passive) with\n      socket, followed by 'Send'\n\
    \      Parameters: 1 local IP address (optional); 1 destination transport\n  \
    \    address (for active open; else the socket and the local IP address\n    \
    \  of the succeeding incoming connection request will be maintained);\n      timeout\
    \ (optional); options (optional); MKT configuration\n      (optional); and user\
    \ message (optional)\n      Comments: if the local IP address is not provided,\
    \ a default\n      choice will automatically be made.  The timeout can also be\
    \ a\n      retransmission count.  The options are IP options to be used on\n \
    \     all segments of the connection.  At least the Source Route option\n    \
    \  is mandatory for TCP to provide.  'MKT configuration' refers to\n      the\
    \ ability to configure MKTs for authentication.  The user\n      message may be\
    \ transmitted to the peer application immediately\n      upon reception of the\
    \ TCP SYN packet.  To benefit from the lower\n      latency this provides as part\
    \ of the experimental TFO mechanism,\n      its length must be at most the TCP's\
    \ maximum segment size (minus\n      TCP options used in the SYN).  The message\
    \ may also be delivered\n      more than once to the application on the remote\
    \ host.\n   o  CONNECT.SCTP:\n      Pass 1 primitive/event: 'Initialize', followed\
    \ by 'Enable/Disable\n      Interleaving' (optional), followed by 'Associate'\n\
    \      Parameters: list of local SCTP port number / IP address pairs\n      ('Initialize');\
    \ one or several sockets (identifying the peer);\n      outbound stream count;\
    \ maximum allowed inbound stream count;\n      adaptation layer indication (optional);\
    \ chunk types required to be\n      authenticated (optional); request interleaving\
    \ on/off; maximum\n      number of INIT attempts (optional); maximum init.  RTO\
    \ for INIT\n      (optional); user message (optional); and remote UDP port number\n\
    \      (optional)\n      Returns: socket list or failure\n      Comments: 'Initialize'\
    \ needs to be called only once per list of\n      local SCTP port number / IP\
    \ address pairs.  One socket will\n      automatically be chosen; it can later\
    \ be changed in MAINTENANCE.\n      The user message may be transmitted to the\
    \ peer application\n      immediately upon reception of the packet containing\
    \ the\n      COOKIE-ECHO chunk.  To benefit from the lower latency this\n    \
    \  provides, its length must be limited such that it fits into the\n      packet\
    \ containing the COOKIE-ECHO chunk.  If a remote UDP port\n      number is provided,\
    \ SCTP packets will be encapsulated in UDP.\n   o  CONNECT.MPTCP:\n      This\
    \ is similar to CONNECT.TCP except for one additional boolean\n      parameter\
    \ that allows the ability to enable or disable MPTCP for a\n      particular connection\
    \ or socket (default: enabled).\n   o  CONNECT.UDP(-Lite):\n      Pass 1 primitive/event:\
    \ 'Connect' followed by 'Send'\n      Parameters: 1 local IP address (default\
    \ (ANY) or specified); 1\n      destination transport address; 1 local port (default\
    \ (OS chooses)\n      or specified); and 1 destination port (default (OS chooses)\
    \ or\n      specified).\n      Comments: associates a transport address creating\
    \ a UDP(-Lite)\n      socket connection.  This can be called again with a new\
    \ transport\n      address to create a new connection.  The CONNECT function allows\n\
    \      an application to receive errors from messages sent to a transport\n  \
    \    address.\n   AVAILABILITY:\n   Preparing to receive incoming connection requests.\n\
    \   o  LISTEN.TCP:\n      Pass 1 primitive/event: 'Open' (passive)\n      Parameters:\
    \ 1 local IP address (optional); 1 socket (optional);\n      timeout (optional);\
    \ buffer to receive a user message (optional);\n      and MKT configuration (optional)\n\
    \      Comments: if the socket and/or local IP address is provided, this\n   \
    \   waits for incoming connections from only and/or to only the\n      provided\
    \ address.  Else this waits for incoming connections\n      without this/these\
    \ constraint(s).  ESTABLISHMENT can later be\n      performed with 'Send'.  If\
    \ a buffer is provided to receive a user\n      message, a user message can be\
    \ received from a TFO-enabled sender\n      before the TCP's connection handshake\
    \ is completed.  This message\n      may arrive multiple times.  'MKT configuration'\
    \ refers to the\n      ability to configure MKTs for authentication.\n   o  LISTEN.SCTP:\n\
    \      Pass 1 primitive/event: 'Initialize', followed by the\n      'Communication\
    \ Up' or 'Restart' notification and possibly the\n      'Adaptation Layer' notification\n\
    \      Parameters: list of local SCTP port number / IP address pairs\n      (initialize)\n\
    \      Returns: socket list; outbound stream count; inbound stream count;\n  \
    \    adaptation layer indication; chunks required to be authenticated;\n     \
    \ and interleaving supported on both sides yes/no\n      Comments: 'Initialize'\
    \ needs to be called only once per list of\n      local SCTP port number / IP\
    \ address pairs.  'Communication Up' can\n      also follow a 'Communication Lost'\
    \ notification, indicating that\n      the lost communication is restored.  If\
    \ the peer has provided an\n      adaptation layer indication, an 'Adaptation\
    \ Layer' notification is\n      issued.\n   o  LISTEN.MPTCP:\n      This is similar\
    \ to LISTEN.TCP except for one additional boolean\n      parameter that allows\
    \ the ability to enable or disable MPTCP for a\n      particular connection or\
    \ socket (default: enabled).\n   o  LISTEN.UDP(-Lite):\n      Pass 1 primitive/event:\
    \ 'Receive'\n      Parameters: 1 local IP address (default (ANY) or specified);\
    \ 1\n      destination transport address; local port (default (OS chooses) or\n\
    \      specified); and destination port (default (OS chooses) or\n      specified)\n\
    \      Comments: the 'Receive' function registers the application to\n      listen\
    \ for incoming UDP(-Lite) datagrams at an endpoint.\n   MAINTENANCE:\n   Adjustments\
    \ made to an open connection, or notifications about it.\n   These are out-of-band\
    \ messages to the protocol that can be issued at\n   any time, at least after\
    \ a connection has been established and before\n   it has been terminated (with\
    \ one exception: CHANGE_TIMEOUT.TCP can\n   only be issued for an open connection\
    \ when DATA.SEND.TCP is called).\n   In some cases, these primitives can also\
    \ be immediately issued during\n   ESTABLISHMENT or AVAILABILITY, without waiting\
    \ for the connection to\n   be opened (e.g., CHANGE_TIMEOUT.TCP can be done using\
    \ TCP's 'Open'\n   primitive).  For UDP and UDP-Lite, these functions may establish\
    \ a\n   setting per connection but may also be changed per datagram message.\n\
    \   o  CHANGE_TIMEOUT.TCP:\n      Pass 1 primitive/event: 'Open' or 'Send' combined\
    \ with unspecified\n      control of per-connection state variables\n      Parameters:\
    \ timeout value (optional); adv_uto (optional); boolean\n      uto_enabled (optional,\
    \ default false); and boolean changeable\n      (optional, default true)\n   \
    \   Comments: when sending data, an application can adjust the\n      connection's\
    \ timeout value (the time after which the connection\n      will be aborted if\
    \ data could not be delivered).  If 'uto_enabled'\n      is true, the 'timeout\
    \ value' (or, if provided, the value\n      'adv_uto') will be advertised for\
    \ the TCP on the other side of the\n      connection to adapt its own user timeout\
    \ accordingly.\n      'uto_enabled' controls whether the UTO option is enabled\
    \ for a\n      connection.  This applies to both sending and receiving.\n    \
    \  'changeable' controls whether the user timeout may be changed\n      based\
    \ on a UTO option received from the other end of the\n      connection; it becomes\
    \ false when the 'timeout value' is used.\n   o  CHANGE_TIMEOUT.SCTP:\n      Pass\
    \ 1 primitive/event: 'Change Heartbeat' combined with\n      'Configure Max. Retransmissions\
    \ of an Association'\n      Parameters: 'Change Heartbeat': heartbeat frequency\
    \ and 'Configure\n      Max. Retransmissions of an Association': Association.Max.Retrans\n\
    \      Comments: 'Change Heartbeat' can enable/disable heartbeats in SCTP\n  \
    \    as well as change their frequency.  The parameter\n      'Association.Max.Retrans'\
    \ defines after how many unsuccessful\n      transmissions of any packets (including\
    \ heartbeats) the\n      association will be terminated; thus, these two primitives/\n\
    \      parameters together can yield a similar behavior for SCTP\n      associations\
    \ as CHANGE_TIMEOUT.TCP does for TCP connections.\n   o  DISABLE_NAGLE.TCP:\n\
    \      Pass 1 primitive/event: not specified\n      Parameters: one boolean value\n\
    \      Comments: the Nagle algorithm delays data transmission to increase\n  \
    \    the chance of sending a full-sized segment.  An application must\n      be\
    \ able to disable this algorithm for a connection.\n   o  DISABLE_NAGLE.SCTP:\n\
    \      Pass 1 primitive/event: 'Enable/Disable NoDelay'\n      Parameters: one\
    \ boolean value\n      Comments: Nagle-like algorithms delay data transmission\
    \ to\n      increase the chance of sending a full-sized packet.\n   o  REQUEST_HEARTBEAT.SCTP:\n\
    \      Pass 1 primitive/event: 'Request Heartbeat'\n      Parameters: socket\n\
    \      Returns: success or failure\n      Comments: requests an immediate heartbeat\
    \ on a path, returning\n      success or failure.\n   o  ADD_PATH.MPTCP:\n   \
    \   Pass 1 primitive/event: not specified\n      Parameters: local IP address\
    \ and optionally the local port number\n      Comments: the application specifies\
    \ the local IP address and port\n      number that must be used for a new subflow.\n\
    \   o  ADD_PATH.SCTP:\n      Pass 1 primitive/event: 'Change Local Address / Set\
    \ Peer Primary'\n      Parameters: local IP address\n   o  REM_PATH.MPTCP:\n \
    \     Pass 1 primitive/event: not specified\n      Parameters: local IP address;\
    \ local port number; remote IP\n      address; and remote port number\n      Comments:\
    \ the application removes the subflow specified by the IP/\n      port-pair. \
    \ The MPTCP implementation must trigger a removal of the\n      subflow that belongs\
    \ to this IP/port-pair.\n   o  REM_PATH.SCTP:\n      Pass 1 primitive/event: 'Change\
    \ Local Address / Set Peer Primary'\n      Parameters: local IP address\n   o\
    \  SET_PRIMARY.SCTP:\n      Pass 1 primitive/event: 'Set Primary'\n      Parameters:\
    \ socket\n      Returns: result of attempting this operation\n      Comments:\
    \ update the current primary address to be used, based on\n      the set of available\
    \ sockets of the association.\n   o  SET_PEER_PRIMARY.SCTP:\n      Pass 1 primitive/event:\
    \ 'Change Local Address / Set Peer Primary'\n      Parameters: local IP address\n\
    \      Comments: this is only advisory for the peer.\n   o  CONFIG_SWITCHOVER.SCTP:\n\
    \      Pass 1 primitive/event: 'Configure Path Switchover'\n      Parameters:\
    \ primary max retrans (number of retransmissions after\n      which a path is\
    \ considered inactive) and PF max retrans (number of\n      retransmissions after\
    \ which a path is considered to be\n      \"Potentially Failed\", and others will\
    \ be preferably used)\n      (optional)\n   o  STATUS.SCTP:\n      Pass 1 primitive/event:\
    \ 'Status', 'Enable/Disable Interleaving',\n      and 'Network Status Change'\
    \ notification\n      Returns: data block with information about a specified\n\
    \      association, containing: association connection state; destination\n  \
    \    transport address list; destination transport address reachability\n    \
    \  states; current local and peer receiver window sizes; current\n      local\
    \ congestion window sizes; number of unacknowledged DATA\n      chunks; number\
    \ of DATA chunks pending receipt; primary path; most\n      recent SRTT on primary\
    \ path; RTO on primary path; SRTT and RTO on\n      other destination addresses;\
    \ MTU per path; and interleaving\n      supported yes/no\n      Comments: the\
    \ 'Network Status Change' notification informs the\n      application about a\
    \ socket becoming active/inactive; this only\n      affects the programming style,\
    \ as the same information is also\n      available via 'Status'.\n   o  STATUS.MPTCP:\n\
    \      Pass 1 primitive/event: not specified\n      Returns: list of pairs of\
    \ tuples of IP address and TCP port number\n      of each subflow.  The first\
    \ of the pair is the local IP and port\n      number, while the second is the\
    \ remote IP and port number.\n   o  SET_DSCP.TCP:\n      Pass 1 primitive/event:\
    \ not specified\n      Parameters: DSCP value\n      Comments: this allows an\
    \ application to change the DSCP value for\n      outgoing segments.\n   o  SET_DSCP.SCTP:\n\
    \      Pass 1 primitive/event: 'Set DSCP value'\n      Parameters: DSCP value\n\
    \      Comments: this allows an application to change the DSCP value for\n   \
    \   outgoing packets on a path.\n   o  SET_DSCP.UDP(-Lite):\n      Pass 1 primitive/event:\
    \ 'Set_DSCP'\n      Parameter: DSCP value\n      Comments: this allows an application\
    \ to change the DSCP value for\n      outgoing UDP(-Lite) datagrams.  [RFC7657]\
    \ and [RFC8085] provide\n      current guidance on using this value with UDP.\n\
    \   o  ERROR.TCP:\n      Pass 1 primitive/event: 'Error_Report'\n      Returns:\
    \ reason (encoding not specified) and subreason (encoding\n      not specified)\n\
    \      Comments: soft errors that can be ignored without harm by many\n      applications;\
    \ an application should be able to disable these\n      notifications.  The reported\
    \ conditions include at least: ICMP\n      error message arrived and excessive\
    \ retransmissions.\n   o  ERROR.UDP(-Lite):\n      Pass 1 primitive/event: 'Error_Report'\n\
    \      Returns: Error report\n      Comments: this returns soft errors that may\
    \ be ignored without\n      harm by many applications; an application must connect\
    \ to be able\n      receive these notifications.\n   o  SET_AUTH.TCP:\n      Pass\
    \ 1 primitive/event: not specified\n      Parameters: current_key and rnext_key\n\
    \      Comments: current_key and rnext_key are the preferred outgoing MKT\n  \
    \    and the preferred incoming MKT, respectively, for a segment that\n      is\
    \ sent on the connection.\n   o  SET_AUTH.SCTP:\n      Pass 1 primitive/event:\
    \ 'Set/Get Authentication Parameters'\n      Parameters: key_id; key; and hmac_id\n\
    \   o  GET_AUTH.TCP:\n      Pass 1 primitive/event: not specified\n      Parameters:\
    \ current_key and rnext_key\n      Comments: current_key and rnext_key are the\
    \ preferred outgoing MKT\n      and the preferred incoming MKT, respectively,\
    \ that were carried on\n      a recently received segment.\n   o  GET_AUTH.SCTP:\n\
    \      Pass 1 primitive/event: 'Set/Get Authentication Parameters'\n      Parameters:\
    \ key_id and chunk_list\n   o  RESET_STREAM.SCTP:\n      Pass 1 primitive/event:\
    \ 'Add/Reset Streams, Reset Association'\n      Parameters: sid and direction\n\
    \   o  RESET_STREAM-EVENT.SCTP:\n      Pass 1 primitive/event: 'Stream Reset'\
    \ notification\n      Parameters: information about the result of RESET_STREAM.SCTP\n\
    \      Comments: this is issued when the procedure for resetting streams\n   \
    \   has completed.\n   o  RESET_ASSOC.SCTP:\n      Pass 1 primitive/event: 'Add/Reset\
    \ Streams, Reset Association'\n      Parameters: information related to the extension,\
    \ as defined in\n      [RFC3260]\n   o  RESET_ASSOC-EVENT.SCTP:\n      Pass 1\
    \ primitive/event: 'Association Reset' notification\n      Parameters: information\
    \ about the result of RESET_ASSOC.SCTP\n      Comments: this is issued when the\
    \ procedure for resetting an\n      association has completed.\n   o  ADD_STREAM.SCTP:\n\
    \      Pass 1 primitive/event: 'Add/Reset Streams, Reset Association'\n      Parameters:\
    \ number of outgoing and incoming streams to be added\n   o  ADD_STREAM-EVENT.SCTP:\n\
    \      Pass 1 primitive/event: 'Stream Change' notification\n      Parameters:\
    \ information about the result of ADD_STREAM.SCTP\n      Comments: this is issued\
    \ when the procedure for adding a stream\n      has completed.\n   o  SET_STREAM_SCHEDULER.SCTP:\n\
    \      Pass 1 primitive/event: 'Set Stream Scheduler'\n      Parameters: scheduler\
    \ identifier\n      Comments: choice of First-Come, First-Served; Round-Robin;\
    \ Round-\n      Robin per Packet; Priority-Based; Fair Bandwidth; and Weighted\n\
    \      Fair Queuing.\n   o  CONFIGURE_STREAM_SCHEDULER.SCTP:\n      Pass 1 primitive/event:\
    \ 'Configure Stream Scheduler'\n      Parameters: priority\n      Comments: the\
    \ priority value only applies when Priority-Based or\n      Weighted Fair Queuing\
    \ scheduling is chosen with\n      SET_STREAM_SCHEDULER.SCTP.  The meaning of\
    \ the parameter differs\n      between these two schedulers, but in both cases,\
    \ it realizes some\n      form of prioritization regarding how bandwidth is divided\
    \ among\n      streams.\n   o  SET_FLOWLABEL.SCTP:\n      Pass 1 primitive/event:\
    \ 'Set IPv6 Flow Label'\n      Parameters: flow label\n      Comments: this allows\
    \ an application to change the IPv6 header's\n      flow label field for outgoing\
    \ packets on a path.\n   o  AUTHENTICATION_NOTIFICATION-EVENT.SCTP:\n      Pass\
    \ 1 primitive/event: 'Authentication' notification\n      Returns: information\
    \ regarding key management\n   o  CONFIG_SEND_BUFFER.SCTP:\n      Pass 1 primitive/event:\
    \ 'Configure Send Buffer Size'\n      Parameters: size value in octets\n   o \
    \ CONFIG_RECEIVE_BUFFER.SCTP:\n      Pass 1 primitive/event: 'Configure Receive\
    \ Buffer Size'\n      Parameters: size value in octets\n      Comments: this controls\
    \ the receiver window.\n   o  CONFIG_FRAGMENTATION.SCTP:\n      Pass 1 primitive/event:\
    \ 'Configure Message Fragmentation'\n      Parameters: one boolean value (enable/disable)\
    \ and maximum\n      fragmentation size (optional; default: PMTU)\n      Comments:\
    \ if fragmentation is enabled, messages exceeding the\n      maximum fragmentation\
    \ size will be fragmented.  If fragmentation\n      is disabled, trying to send\
    \ a message that exceeds the maximum\n      fragmentation size will produce an\
    \ error.\n   o  CONFIG_PMTUD.SCTP:\n      Pass 1 primitive/event: 'Configure Path\
    \ MTU Discovery'\n      Parameters: one boolean value (PMTUD on/off) and PMTU\
    \ value\n      (optional)\n      Returns: PMTU value\n      Comments: this returns\
    \ a meaningful PMTU value when PMTUD is\n      enabled (the boolean is true),\
    \ and the PMTU value can be set if\n      PMTUD is disabled (the boolean is false).\n\
    \   o  CONFIG_DELAYED_SACK.SCTP:\n      Pass 1 primitive/event: 'Configure Delayed\
    \ SACK Timer'\n      Parameters: one boolean value (delayed SACK on/off); timer\
    \ value\n      (optional); and number of packets to wait for (default 2)\n   \
    \   Comments: if delayed SACK is enabled, SCTP will send a SACK either\n     \
    \ upon receiving the provided number of packets or when the timer\n      expires,\
    \ whatever occurs first.\n   o  CONFIG_RTO.SCTP:\n      Pass 1 primitive/event:\
    \ 'Configure RTO Calculation'\n      Parameters: init (optional); min (optional);\
    \ and max (optional)\n      Comments: this adjusts the initial, minimum, and maximum\
    \ RTO\n      values.\n   o  SET_COOKIE_LIFE.SCTP:\n      Pass 1 primitive/event:\
    \ 'Set Cookie Life Value'\n      Parameters: cookie life value\n   o  SET_MAX_BURST.SCTP:\n\
    \      Pass 1 primitive/event: 'Set Maximum Burst'\n      Parameters: max burst\
    \ value\n      Comments: not all implementations allow values above the default\n\
    \      of 4.\n   o  SET_PARTIAL_DELIVERY_POINT.SCTP:\n      Pass 1 primitive/event:\
    \ 'Set Partial Delivery Point'\n      Parameters: partial delivery point (integer)\n\
    \      Comments: this parameter must be smaller or equal to the socket\n     \
    \ receive buffer size.\n   o  SET_CHECKSUM_ENABLED.UDP:\n      Pass 1 primitive/event:\
    \ 'Checksum_Enabled'\n      Parameters: 0 when zero checksum is used at sender,\
    \ 1 for checksum\n      at sender (default)\n   o  SET_CHECKSUM_REQUIRED.UDP:\n\
    \      Pass 1 primitive/event: 'Require_Checksum'\n      Parameter: 0 to allow\
    \ zero checksum, 1 when a non-zero checksum is\n      required (default) at the\
    \ receiver\n   o  SET_CHECKSUM_COVERAGE.UDP-Lite:\n      Pass 1 primitive/event:\
    \ 'Set_Checksum_Coverage'\n      Parameters: coverage length at sender (default\
    \ maximum coverage)\n   o  SET_MIN_CHECKSUM_COVERAGE.UDP-Lite:\n      Pass 1 primitive/event:\
    \ 'Set_Min_Coverage'\n      Parameter: coverage length at receiver (default minimum\
    \ coverage)\n   o  SET_DF.UDP(-Lite):\n      Pass 1 primitive event: 'Set_DF'\n\
    \      Parameter: 0 when DF is not set (default) in the IPv4 header, 1\n     \
    \ when DF is set\n   o  GET_MMS_S.UDP(-Lite):\n      Pass 1 primitive event: 'Get_MM_S'\n\
    \      Comments: this retrieves the maximum transport-message size that\n    \
    \  may be sent using a non-fragmented IP packet from the configured\n      interface.\n\
    \   o  GET_MMS_R.UDP(-Lite):\n      Pass 1 primitive event: 'Get_MMS_R'\n    \
    \  Comments: this retrieves the maximum transport-message size that\n      may\
    \ be received from the configured interface.\n   o  SET_TTL.UDP(-Lite) (IPV6_UNICAST_HOPS):\n\
    \      Pass 1 primitive/event: 'Set_TTL' and 'Set_IPV6_Unicast_Hops'\n      Parameters:\
    \ IPv4 TTL value or IPv6 Hop Count value\n      Comments: this allows an application\
    \ to change the IPv4 TTL of\n      IPv6 Hop Count value for outgoing UDP(-Lite)\
    \ datagrams.\n   o  GET_TTL.UDP(-Lite) (IPV6_UNICAST_HOPS):\n      Pass 1 primitive/event:\
    \ 'Get_TTL' and 'Get_IPV6_Unicast_Hops'\n      Returns: IPv4 TTL value or IPv6\
    \ Hop Count value\n      Comments: this allows an application to read the IPv4\
    \ TTL of the\n      IPv6 Hop Count value from a received UDP(-Lite) datagram.\n\
    \   o  SET_ECN.UDP(-Lite):\n      Pass 1 primitive/event: 'Set_ECN'\n      Parameters:\
    \ ECN value\n      Comments: this allows a UDP(-Lite) application to set the Explicit\n\
    \      Congestion Notification (ECN) code point field for outgoing\n      UDP(-Lite)\
    \ datagrams.  It defaults to sending '00'.\n   o  GET_ECN.UDP(-Lite):\n      Pass\
    \ 1 primitive/event: 'Get_ECN'\n      Parameters: ECN value\n      Comments: this\
    \ allows a UDP(-Lite) application to read the ECN\n      code point field from\
    \ a received UDP(-Lite) datagram.\n   o  SET_IP_OPTIONS.UDP(-Lite):\n      Pass\
    \ 1 primitive/event: 'Set_IP_Options'\n      Parameters: options\n      Comments:\
    \ this allows a UDP(-Lite) application to set IP options\n      for outgoing UDP(-Lite)\
    \ datagrams.  These options can at least be\n      the Source Route, Record Route,\
    \ and Timestamp option.\n   o  GET_IP_OPTIONS.UDP(-Lite):\n      Pass 1 primitive/event:\
    \ 'Get_IP_Options'\n      Returns: options\n      Comments: this allows a UDP(-Lite)\
    \ application to receive any IP\n      options that are contained in a received\
    \ UDP(-Lite) datagram.\n   o  CONFIGURE.LEDBAT:\n      Pass 1 primitive/event:\
    \ N/A\n      Parameters: enable (boolean); target; allowed_increase; gain_inc;\n\
    \      gain_dec; base_history; current_filter; init_cwnd; and min_cwnd\n     \
    \ Comments: 'enable' is a newly invented parameter that enables or\n      disables\
    \ the whole LEDBAT service.\n   TERMINATION:\n   Gracefully or forcefully closing\
    \ a connection or being informed about\n   this event happening.\n   o  CLOSE.TCP:\n\
    \      Pass 1 primitive/event: 'Close'\n      Comments: this terminates the sending\
    \ side of a connection after\n      reliably delivering all remaining data.\n\
    \   o  CLOSE.SCTP:\n      Pass 1 primitive/event: 'Shutdown'\n      Comments:\
    \ this terminates a connection after reliably delivering\n      all remaining\
    \ data.\n   o  ABORT.TCP:\n      Pass 1 primitive/event: 'Abort'\n      Comments:\
    \ this terminates a connection without delivering\n      remaining data and sends\
    \ an error message to the other side.\n   o  ABORT.SCTP:\n      Pass 1 primitive/event:\
    \ 'Abort'\n      Parameters: abort reason to be given to the peer (optional)\n\
    \      Comments: this terminates a connection without delivering\n      remaining\
    \ data and sends an error message to the other side.\n   o  ABORT.UDP(-Lite):\n\
    \      Pass 1 primitive event: 'Close'\n      Comments: this terminates a connection\
    \ without delivering\n      remaining data.  No further UDP(-Lite) datagrams are\
    \ sent/received\n      for this transport service instance.\n   o  TIMEOUT.TCP:\n\
    \      Pass 1 primitive/event: 'User Timeout' event\n      Comments: the application\
    \ is informed that the connection is\n      aborted.  This event is executed on\
    \ expiration of the timeout set\n      in CONNECTION.ESTABLISHMENT.CONNECT.TCP\
    \ (possibly adjusted in\n      CONNECTION.MAINTENANCE.CHANGE_TIMEOUT.TCP).\n \
    \  o  TIMEOUT.SCTP:\n      Pass 1 primitive/event: 'Communication Lost' event\n\
    \      Comments: the application is informed that the connection is\n      aborted.\
    \  This event is executed on expiration of the timeout that\n      should be enabled\
    \ by default (see the beginning of Section 8.3 in\n      [RFC4960]) and was possibly\
    \ adjusted in\n      CONNECTION.MAINTENANCE.CHANGE_TIMEOOUT.SCTP.\n   o  ABORT-EVENT.TCP:\n\
    \      Pass 1 primitive/event: not specified\n   o  ABORT-EVENT.SCTP:\n      Pass\
    \ 1 primitive/event: 'Communication Lost' event\n      Returns: abort reason from\
    \ the peer (if available)\n      Comments: the application is informed that the\
    \ other side has\n      aborted the connection using CONNECTION.TERMINATION.ABORT.SCTP.\n\
    \   o  CLOSE-EVENT.TCP:\n      Pass 1 primitive/event: not specified\n   o  CLOSE-EVENT.SCTP:\n\
    \      Pass 1 primitive/event: 'Shutdown Complete' event\n      Comments: the\
    \ application is informed that\n      CONNECTION.TERMINATION.CLOSE.SCTP was successfully\
    \ completed.\n"
- title: 4.2.  DATA-Transfer-Related Primitives
  contents:
  - "4.2.  DATA-Transfer-Related Primitives\n   All primitives in this section refer\
    \ to an existing connection, i.e.,\n   a connection that was either established\
    \ or made available for\n   receiving data (although this is optional for the\
    \ primitives of\n   UDP(-Lite)).  In addition to the listed parameters, all sending\n\
    \   primitives contain a reference to a data block, and all receiving\n   primitives\
    \ contain a reference to available buffer space for the\n   data.  Note that CONNECT.TCP\
    \ and LISTEN.TCP in the ESTABLISHMENT and\n   AVAILABILITY categories also allow\
    \ to transfer data (an optional user\n   message) before the connection is fully\
    \ established.\n   o  SEND.TCP:\n      Pass 1 primitive/event: 'Send'\n      Parameters:\
    \ timeout (optional); current_key (optional); and\n      rnext_key (optional)\n\
    \      Comments: this gives TCP a data block for reliable transmission to\n  \
    \    the TCP on the other side of the connection.  The timeout can be\n      configured\
    \ with this call (see also\n      CONNECTION.MAINTENANCE.CHANGE_TIMEOUT.TCP).\
    \ 'current_key' and\n      'rnext_key' are authentication parameters that can\
    \ be configured\n      with this call (see also CONNECTION.MAINTENANCE.SET_AUTH.TCP).\n\
    \   o  SEND.SCTP:\n      Pass 1 primitive/event: 'Send'\n      Parameters: stream\
    \ number; context (optional); socket (optional);\n      unordered flag (optional);\
    \ no-bundle flag (optional); payload\n      protocol-id (optional); pr-policy\
    \ (optional) pr-value (optional);\n      sack-immediately flag (optional); and\
    \ key-id (optional)\n      Comments: this gives SCTP a data block for transmission\
    \ to the\n      SCTP on the other side of the connection (SCTP association). \
    \ The\n      'stream number' denotes the stream to be used.  The 'context'\n \
    \     number can later be used to refer to the correct message when an\n     \
    \ error is reported.  The 'socket' can be used to state which path\n      should\
    \ be preferred, if there are multiple paths available (see\n      also CONNECTION.MAINTENANCE.SETPRIMARY.SCTP).\
    \  The data block can\n      be delivered out of order if the 'unordered' flag\
    \ is set.  The\n      'no-bundle flag' can be set to indicate a preference to\
    \ avoid\n      bundling.  The 'payload protocol-id' is a number that will, if\n\
    \      provided, be handed over to the receiving application.  Using\n      pr-policy\
    \ and pr-value, the level of reliability can be\n      controlled.  The 'sack-immediately'\
    \ flag can be used to indicate\n      that the peer should not delay the sending\
    \ of a SACK corresponding\n      to the provided user message.  If specified,\
    \ the provided key-id\n      is used for authenticating the user message.\n  \
    \ o  SEND.UDP(-Lite):\n      Pass 1 primitive/event: 'Send'\n      Parameters:\
    \ IP address and port number of the destination endpoint\n      (optional if connected)\n\
    \      Comments: this provides a message for unreliable transmission\n      using\
    \ UDP(-Lite) to the specified transport address.  The IP\n      address and port\
    \ number may be omitted for connected UDP(-Lite)\n      sockets.  All CONNECTION.MAINTENANCE.SET_*.UDP(-Lite)\
    \ primitives\n      apply per message sent.\n   o  RECEIVE.TCP:\n      Pass 1\
    \ primitive/event: 'Receive'\n      Parameters: current_key (optional) and rnext_key\
    \ (optional)\n      Comments: 'current_key' and 'rnext_key' are authentication\n\
    \      parameters that can be read with this call (see also\n      CONNECTION.MAINTENANCE.GET_AUTH.TCP).\n\
    \   o  RECEIVE.SCTP:\n      Pass 1 primitive/event: 'Data Arrive' notification,\
    \ followed by\n      'Receive'\n      Parameters: stream number (optional)\n \
    \     Returns: stream sequence number (optional) and partial flag\n      (optional)\n\
    \      Comments: if the 'stream number' is provided, the call to receive\n   \
    \   only receives data on one particular stream.  If a partial message\n     \
    \ arrives, this is indicated by the 'partial flag', and then the\n      'stream\
    \ sequence number' must be provided such that an application\n      can restore\
    \ the correct order of data blocks that comprise an\n      entire message.\n \
    \  o  RECEIVE.UDP(-Lite):\n      Pass 1 primitive/event: 'Receive'\n      Parameters:\
    \ buffer for received datagram\n      Comments: all CONNECTION.MAINTENANCE.GET_*.UDP(-Lite)\
    \ primitives\n      apply per message received.\n   o  SENDFAILURE-EVENT.SCTP:\n\
    \      Pass 1 primitive/event: 'Send Failure' notification, optionally\n     \
    \ followed by 'Receive Unsent Message' or 'Receive Unacknowledged\n      Message'\n\
    \      Returns: cause code; context; and unsent or unacknowledged message\n  \
    \    (optional)\n      Comments: 'cause code' indicates the reason of the failure,\
    \ and\n      'context' is the context number if such a number has been provided\n\
    \      in DATA.SEND.SCTP, for later use with 'Receive Unsent Message' or\n   \
    \   'Receive Unacknowledged Message', respectively.  These primitives\n      can\
    \ be used to retrieve the unsent or unacknowledged message (or\n      part of\
    \ the message, in case a part was delivered) if desired.\n   o  SEND_FAILURE.UDP(-Lite):\n\
    \      Pass 1 primitive/event: 'Send'\n      Comments: this may be used to probe\
    \ for the effective PMTU when\n      using in combination with the 'MAINTENANCE.SET_DF'\
    \ primitive.\n   o  SENDER_DRY-EVENT.SCTP:\n      Pass 1 primitive/event: 'Sender\
    \ Dry' notification\n      Comments: this informs the application that the stack\
    \ has no more\n      user data to send.\n   o  PARTIAL_DELIVERY_ABORTED-EVENT.SCTP:\n\
    \      Pass 1 primitive/event: 'Partial Delivery Aborted' notification\n     \
    \ Comments: this informs the receiver of a partial message that the\n      further\
    \ delivery of the message has been aborted.\n"
- title: 5.  Pass 3
  contents:
  - "5.  Pass 3\n   This section presents the superset of all transport features in\
    \ all\n   protocols that were discussed in the preceding sections, based on the\n\
    \   list of primitives in pass 2 but also on text in pass 1 to include\n   transport\
    \ features that can be configured in one protocol and are\n   static properties\
    \ in another (congestion control, for example).\n   Again, some minor details\
    \ are omitted for the sake of generalization\n   -- e.g., TCP may provide various\
    \ different IP options, but only\n   source route is mandatory to implement, and\
    \ this detail is not\n   visible in the pass 3 transport feature \"Specify IP\
    \ options\".  As\n   before, \"UDP(-Lite)\" represents both UDP and UDP-Lite,\
    \ and \"TCP\"\n   refers to both TCP and MPTCP.\n"
- title: 5.1.  CONNECTION-Related Transport Features
  contents:
  - "5.1.  CONNECTION-Related Transport Features\n   ESTABLISHMENT:\n   Active creation\
    \ of a connection from one transport endpoint to one or\n   more transport endpoints.\n\
    \   o  Connect\n      Protocols: TCP, SCTP, and UDP(-Lite)\n   o  Specify which\
    \ IP options must always be used\n      Protocols: TCP and UDP(-Lite)\n   o  Request\
    \ multiple streams\n      Protocols: SCTP\n   o  Limit the number of inbound streams\n\
    \      Protocols: SCTP\n   o  Specify number of attempts and/or timeout for the\
    \ first\n      establishment message\n      Protocols: TCP and SCTP\n   o  Obtain\
    \ multiple sockets\n      Protocols: SCTP\n   o  Disable MPTCP\n      Protocols:\
    \ MPTCP\n   o  Configure authentication\n      Protocols: TCP and SCTP\n     \
    \ Comments: with TCP, this allows the configuration of MKTs.  In\n      SCTP,\
    \ this allows the specification of which chunk types must\n      always be authenticated.\
    \  DATA, ACK, etc., are different 'chunks'\n      in SCTP; one or more chunks\
    \ may be included in a single packet.\n   o  Indicate an Adaptation Layer (via\
    \ an adaptation code point)\n      Protocols: SCTP\n   o  Request to negotiate\
    \ interleaving of user messages\n      Protocols: SCTP\n   o  Hand over a message\
    \ to reliably transfer (possibly multiple times)\n      before connection establishment\n\
    \      Protocols: TCP\n   o  Hand over a message to reliably transfer during connection\n\
    \      establishment\n      Protocols: SCTP\n   o  Enable UDP encapsulation with\
    \ a specified remote UDP port number\n      Protocols: SCTP\n   AVAILABILITY:\n\
    \   Preparing to receive incoming connection requests.\n   o  Listen, 1 specified\
    \ local interface\n      Protocols: TCP, SCTP, and UDP(-Lite)\n   o  Listen, N\
    \ specified local interfaces\n      Protocols: SCTP\n   o  Listen, all local interfaces\n\
    \      Protocols: TCP, SCTP, and UDP(-Lite)\n   o  Obtain requested number of\
    \ streams\n      Protocols: SCTP\n   o  Limit the number of inbound streams\n\
    \      Protocols: SCTP\n   o  Specify which IP options must always be used\n \
    \     Protocols: TCP and UDP(-Lite)\n   o  Disable MPTCP\n      Protocols: MPTCP\n\
    \   o  Configure authentication\n      Protocols: TCP and SCTP\n      Comments:\
    \ with TCP, this allows the configuration of MKTs.  In\n      SCTP, this allows\
    \ the specification of which chunk types must\n      always be authenticated.\
    \  DATA, ACK, etc., are different 'chunks'\n      in SCTP; one or more chunks\
    \ may be included in a single packet.\n   o  Indicate an Adaptation Layer (via\
    \ an adaptation code point)\n      Protocols: SCTP\n   MAINTENANCE:\n   Adjustments\
    \ made to an open connection, or notifications about it.\n   o  Change timeout\
    \ for aborting connection (using retransmit limit or\n      time value)\n    \
    \  Protocols: TCP and SCTP\n   o  Suggest timeout to the peer\n      Protocols:\
    \ TCP\n   o  Disable Nagle algorithm\n      Protocols: TCP and SCTP\n   o  Request\
    \ an immediate heartbeat, returning success/failure\n      Protocols: SCTP\n \
    \  o  Notification of excessive retransmissions (early warning below\n      abortion\
    \ threshold)\n      Protocols: TCP\n   o  Add path\n      Protocols: MPTCP and\
    \ SCTP\n      MPTCP Parameters: source-IP; source-Port; destination-IP; and\n\
    \      destination-Port\n      SCTP Parameters: local IP address\n   o  Remove\
    \ path\n      Protocols: MPTCP and SCTP\n      MPTCP Parameters: source-IP; source-Port;\
    \ destination-IP; and\n      destination-Port\n      SCTP Parameters: local IP\
    \ address\n   o  Set primary path\n      Protocols: SCTP\n   o  Suggest primary\
    \ path to the peer\n      Protocols: SCTP\n   o  Configure Path Switchover\n \
    \     Protocols: SCTP\n   o  Obtain status (query or notification)\n      Protocols:\
    \ SCTP and MPTCP\n      SCTP parameters: association connection state; destination\n\
    \      transport address list; destination transport address reachability\n  \
    \    states; current local and peer receiver window sizes; current\n      local\
    \ congestion window sizes; number of unacknowledged DATA\n      chunks; number\
    \ of DATA chunks pending receipt; primary path; most\n      recent SRTT on primary\
    \ path; RTO on primary path; SRTT and RTO on\n      other destination addresses;\
    \ MTU per path; and interleaving\n      supported yes/no\n      MPTCP parameters:\
    \ subflow-list (identified by source-IP;\n      source-Port; destination-IP; and\
    \ destination-Port)\n   o  Specify DSCP field\n      Protocols: TCP, SCTP, and\
    \ UDP(-Lite)\n   o  Notification of ICMP error message arrival\n      Protocols:\
    \ TCP and UDP(-Lite)\n   o  Change authentication parameters\n      Protocols:\
    \ TCP and SCTP\n   o  Obtain authentication information\n      Protocols: TCP\
    \ and SCTP\n   o  Reset Stream\n      Protocols: SCTP\n   o  Notification of Stream\
    \ Reset\n      Protocols: STCP\n   o  Reset Association\n      Protocols: SCTP\n\
    \   o  Notification of Association Reset\n      Protocols: STCP\n   o  Add Streams\n\
    \      Protocols: SCTP\n   o  Notification of Added Stream\n      Protocols: STCP\n\
    \   o  Choose a scheduler to operate between streams of an association\n     \
    \ Protocols: SCTP\n   o  Configure priority or weight for a scheduler\n      Protocols:\
    \ SCTP\n   o  Specify IPv6 flow label field\n      Protocols: SCTP\n   o  Configure\
    \ send buffer size\n      Protocols: SCTP\n   o  Configure receive buffer (and\
    \ rwnd) size\n      Protocols: SCTP\n   o  Configure message fragmentation\n \
    \     Protocols: SCTP\n   o  Configure PMTUD\n      Protocols: SCTP\n   o  Configure\
    \ delayed SACK timer\n      Protocols: SCTP\n   o  Set Cookie life value\n   \
    \   Protocols: SCTP\n   o  Set maximum burst\n      Protocols: SCTP\n   o  Configure\
    \ size where messages are broken up for partial delivery\n      Protocols: SCTP\n\
    \   o  Disable checksum when sending\n      Protocols: UDP\n   o  Disable checksum\
    \ requirement when receiving\n      Protocols: UDP\n   o  Specify checksum coverage\
    \ used by the sender\n      Protocols: UDP-Lite\n   o  Specify minimum checksum\
    \ coverage required by receiver\n      Protocols: UDP-Lite\n   o  Specify DF field\n\
    \      Protocols: UDP(-Lite)\n   o  Get max. transport-message size that may be\
    \ sent using a non-\n      fragmented IP packet from the configured interface\n\
    \      Protocols: UDP(-Lite)\n   o  Get max. transport-message size that may be\
    \ received from the\n      configured interface\n      Protocols: UDP(-Lite)\n\
    \   o  Specify TTL/Hop Count field\n      Protocols: UDP(-Lite)\n   o  Obtain\
    \ TTL/Hop Count field\n      Protocols: UDP(-Lite)\n   o  Specify ECN field\n\
    \      Protocols: UDP(-Lite)\n   o  Obtain ECN field\n      Protocols: UDP(-Lite)\n\
    \   o  Specify IP options\n      Protocols: UDP(-Lite)\n   o  Obtain IP options\n\
    \      Protocols: UDP(-Lite)\n   o  Enable and configure \"Low Extra Delay Background\
    \ Transfer\"\n      Protocols: A protocol implementing the LEDBAT congestion control\n\
    \      mechanism\n   TERMINATION:\n   Gracefully or forcefully closing a connection,\
    \ or being informed\n   about this event happening.\n   o  Close after reliably\
    \ delivering all remaining data, causing an\n      event informing the application\
    \ on the other side\n      Protocols: TCP and SCTP\n      Comments: a TCP endpoint\
    \ locally only closes the connection for\n      sending; it may still receive\
    \ data afterwards.\n   o  Abort without delivering remaining data, causing an\
    \ event that\n      informs the application on the other side\n      Protocols:\
    \ TCP and SCTP\n      Comments: in SCTP, a reason can optionally be given by the\n\
    \      application on the aborting side, which can then be received by\n     \
    \ the application on the other side.\n   o  Abort without delivering remaining\
    \ data, not causing an event that\n      informs the application on the other\
    \ side\n      Protocols: UDP(-Lite)\n   o  Timeout event when data could not be\
    \ delivered for too long\n      Protocols: TCP and SCTP\n      Comments: the timeout\
    \ is configured with CONNECTION.MAINTENANCE\n      \"Change timeout for aborting\
    \ connection (using retransmit limit or\n      time value)\".\n"
- title: 5.2.  DATA-Transfer-Related Transport Features
  contents:
  - "5.2.  DATA-Transfer-Related Transport Features\n   All transport features in\
    \ this section refer to an existing\n   connection, i.e., a connection that was\
    \ either established or made\n   available for receiving data.  Note that TCP\
    \ allows the transfer of\n   data (a single optional user message, possibly arriving\
    \ multiple\n   times) before the connection is fully established.  Reliable data\n\
    \   transfer entails delay -- e.g., for the sender to wait until it can\n   transmit\
    \ data or due to retransmission in case of packet loss.\n"
- title: 5.2.1.  Sending Data
  contents:
  - "5.2.1.  Sending Data\n   All transport features in this section are provided\
    \ by DATA.SEND from\n   pass 2.  DATA.SEND is given a data block from the application,\
    \ which\n   here we call a \"message\" if the beginning and end of the data block\n\
    \   can be identified at the receiver, and \"data\" otherwise.\n   o  Reliably\
    \ transfer data, with congestion control\n      Protocols: TCP\n   o  Reliably\
    \ transfer a message, with congestion control\n      Protocols: SCTP\n   o  Unreliably\
    \ transfer a message, with congestion control\n      Protocols: SCTP\n   o  Unreliably\
    \ transfer a message, without congestion control\n      Protocols: UDP(-Lite)\n\
    \   o  Configurable Message Reliability\n      Protocols: SCTP\n   o  Choice of\
    \ stream\n      Protocols: SCTP\n   o  Choice of path (destination address)\n\
    \      Protocols: SCTP\n   o  Ordered message delivery (potentially slower than\
    \ unordered)\n      Protocols: SCTP\n   o  Unordered message delivery (potentially\
    \ faster than ordered)\n      Protocols: SCTP and UDP(-Lite)\n   o  Request not\
    \ to bundle messages\n      Protocols: SCTP\n   o  Specifying a 'payload protocol-id'\
    \ (handed over as such by the\n      receiver)\n      Protocols: SCTP\n   o  Specifying\
    \ a key identifier to be used to authenticate a message\n      Protocols: SCTP\n\
    \   o  Request not to delay the acknowledgement (SACK) of a message\n      Protocols:\
    \ SCTP\n"
- title: 5.2.2.  Receiving Data
  contents:
  - "5.2.2.  Receiving Data\n   All transport features in this section are provided\
    \ by DATA.RECEIVE\n   from pass 2.  DATA.RECEIVE fills a buffer provided by the\n\
    \   application, with what here we call a \"message\" if the beginning and\n \
    \  end of the data block can be identified at the receiver, and \"data\"\n   otherwise.\n\
    \   o  Receive data (with no message delimiting)\n      Protocols: TCP\n   o \
    \ Receive a message\n      Protocols: SCTP and UDP(-Lite)\n   o  Choice of stream\
    \ to receive from\n      Protocols: SCTP\n   o  Information about partial message\
    \ arrival\n      Protocols: SCTP\n      Comments: in SCTP, partial messages are\
    \ combined with a stream\n      sequence number so that the application can restore\
    \ the correct\n      order of data blocks an entire message consists of.\n"
- title: 5.2.3.  Errors
  contents:
  - "5.2.3.  Errors\n   This section describes sending failures that are associated\
    \ with a\n   specific call to DATA.SEND from pass 2.\n   o  Notification of an\
    \ unsent (part of a) message\n      Protocols: SCTP and UDP(-Lite)\n   o  Notification\
    \ of an unacknowledged (part of a) message\n      Protocols: SCTP\n   o  Notification\
    \ that the stack has no more user data to send\n      Protocols: SCTP\n   o  Notification\
    \ to a receiver that a partial message delivery has\n      been aborted\n    \
    \  Protocols: SCTP\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Authentication, confidentiality protection, and\
    \ integrity protection\n   are identified as transport features [RFC8095].  These\
    \ transport\n   features are generally provided by a protocol or layer on top\
    \ of the\n   transport protocol; none of the transport protocols considered in\n\
    \   this document provides these transport features on its own.\n   Therefore,\
    \ these transport features are not considered in this\n   document, with the exception\
    \ of native authentication capabilities of\n   TCP and SCTP for which the security\
    \ considerations in [RFC5925] and\n   [RFC4895] apply.\n   Security considerations\
    \ for the use of UDP and UDP-Lite are provided\n   in the referenced RFCs.  Security\
    \ guidance for application usage is\n   provided in the UDP Guidelines [RFC8085].\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC0793]  Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n              RFC 793, DOI 10.17487/RFC0793, September 1981,\n\
    \              <https://www.rfc-editor.org/info/rfc793>.\n   [RFC1122]  Braden,\
    \ R., Ed., \"Requirements for Internet Hosts -\n              Communication Layers\"\
    , STD 3, RFC 1122,\n              DOI 10.17487/RFC1122, October 1989,\n      \
    \        <https://www.rfc-editor.org/info/rfc1122>.\n   [RFC3758]  Stewart, R.,\
    \ Ramalho, M., Xie, Q., Tuexen, M., and P.\n              Conrad, \"Stream Control\
    \ Transmission Protocol (SCTP)\n              Partial Reliability Extension\"\
    , RFC 3758,\n              DOI 10.17487/RFC3758, May 2004,\n              <https://www.rfc-editor.org/info/rfc3758>.\n\
    \   [RFC4895]  Tuexen, M., Stewart, R., Lei, P., and E. Rescorla,\n          \
    \    \"Authenticated Chunks for the Stream Control Transmission\n            \
    \  Protocol (SCTP)\", RFC 4895, DOI 10.17487/RFC4895, August\n              2007,\
    \ <https://www.rfc-editor.org/info/rfc4895>.\n   [RFC4960]  Stewart, R., Ed.,\
    \ \"Stream Control Transmission Protocol\",\n              RFC 4960, DOI 10.17487/RFC4960,\
    \ September 2007,\n              <https://www.rfc-editor.org/info/rfc4960>.\n\
    \   [RFC5061]  Stewart, R., Xie, Q., Tuexen, M., Maruyama, S., and M.\n      \
    \        Kozuka, \"Stream Control Transmission Protocol (SCTP)\n             \
    \ Dynamic Address Reconfiguration\", RFC 5061,\n              DOI 10.17487/RFC5061,\
    \ September 2007,\n              <https://www.rfc-editor.org/info/rfc5061>.\n\
    \   [RFC5482]  Eggert, L. and F. Gont, \"TCP User Timeout Option\",\n        \
    \      RFC 5482, DOI 10.17487/RFC5482, March 2009,\n              <https://www.rfc-editor.org/info/rfc5482>.\n\
    \   [RFC5925]  Touch, J., Mankin, A., and R. Bonica, \"The TCP\n             \
    \ Authentication Option\", RFC 5925, DOI 10.17487/RFC5925,\n              June\
    \ 2010, <https://www.rfc-editor.org/info/rfc5925>.\n   [RFC6182]  Ford, A., Raiciu,\
    \ C., Handley, M., Barre, S., and J.\n              Iyengar, \"Architectural Guidelines\
    \ for Multipath TCP\n              Development\", RFC 6182, DOI 10.17487/RFC6182,\
    \ March 2011,\n              <https://www.rfc-editor.org/info/rfc6182>.\n   [RFC6458]\
    \  Stewart, R., Tuexen, M., Poon, K., Lei, P., and V.\n              Yasevich,\
    \ \"Sockets API Extensions for the Stream Control\n              Transmission\
    \ Protocol (SCTP)\", RFC 6458,\n              DOI 10.17487/RFC6458, December 2011,\n\
    \              <https://www.rfc-editor.org/info/rfc6458>.\n   [RFC6525]  Stewart,\
    \ R., Tuexen, M., and P. Lei, \"Stream Control\n              Transmission Protocol\
    \ (SCTP) Stream Reconfiguration\",\n              RFC 6525, DOI 10.17487/RFC6525,\
    \ February 2012,\n              <https://www.rfc-editor.org/info/rfc6525>.\n \
    \  [RFC6817]  Shalunov, S., Hazel, G., Iyengar, J., and M. Kuehlewind,\n     \
    \         \"Low Extra Delay Background Transport (LEDBAT)\", RFC 6817,\n     \
    \         DOI 10.17487/RFC6817, December 2012,\n              <https://www.rfc-editor.org/info/rfc6817>.\n\
    \   [RFC6824]  Ford, A., Raiciu, C., Handley, M., and O. Bonaventure,\n      \
    \        \"TCP Extensions for Multipath Operation with Multiple\n            \
    \  Addresses\", RFC 6824, DOI 10.17487/RFC6824, January 2013,\n              <https://www.rfc-editor.org/info/rfc6824>.\n\
    \   [RFC6897]  Scharf, M. and A. Ford, \"Multipath TCP (MPTCP) Application\n \
    \             Interface Considerations\", RFC 6897, DOI 10.17487/RFC6897,\n  \
    \            March 2013, <https://www.rfc-editor.org/info/rfc6897>.\n   [RFC6951]\
    \  Tuexen, M. and R. Stewart, \"UDP Encapsulation of Stream\n              Control\
    \ Transmission Protocol (SCTP) Packets for End-Host\n              to End-Host\
    \ Communication\", RFC 6951,\n              DOI 10.17487/RFC6951, May 2013,\n\
    \              <https://www.rfc-editor.org/info/rfc6951>.\n   [RFC7053]  Tuexen,\
    \ M., Ruengeler, I., and R. Stewart, \"SACK-\n              IMMEDIATELY Extension\
    \ for the Stream Control Transmission\n              Protocol\", RFC 7053, DOI\
    \ 10.17487/RFC7053, November 2013,\n              <https://www.rfc-editor.org/info/rfc7053>.\n\
    \   [RFC7413]  Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP\n   \
    \           Fast Open\", RFC 7413, DOI 10.17487/RFC7413, December 2014,\n    \
    \          <https://www.rfc-editor.org/info/rfc7413>.\n   [RFC7496]  Tuexen, M.,\
    \ Seggelmann, R., Stewart, R., and S. Loreto,\n              \"Additional Policies\
    \ for the Partially Reliable Stream\n              Control Transmission Protocol\
    \ Extension\", RFC 7496,\n              DOI 10.17487/RFC7496, April 2015,\n  \
    \            <https://www.rfc-editor.org/info/rfc7496>.\n   [RFC7829]  Nishida,\
    \ Y., Natarajan, P., Caro, A., Amer, P., and K.\n              Nielsen, \"SCTP-PF:\
    \ A Quick Failover Algorithm for the\n              Stream Control Transmission\
    \ Protocol\", RFC 7829,\n              DOI 10.17487/RFC7829, April 2016,\n   \
    \           <https://www.rfc-editor.org/info/rfc7829>.\n   [RFC8085]  Eggert,\
    \ L., Fairhurst, G., and G. Shepherd, \"UDP Usage\n              Guidelines\"\
    , BCP 145, RFC 8085, DOI 10.17487/RFC8085,\n              March 2017, <https://www.rfc-editor.org/info/rfc8085>.\n\
    \   [RFC8260]  Stewart, R., Tuexen, M., Loreto, S., and R. Seggelmann,\n     \
    \         \"Stream Schedulers and User Message Interleaving for the\n        \
    \      Stream Control Transmission Protocol\", RFC 8260,\n              DOI 10.17487/RFC8260,\
    \ November 2017,\n              <https://www.rfc-editor.org/info/rfc8260>.\n \
    \  [RFC8304]  Fairhurst, G. and T. Jones, \"Transport Features of the\n      \
    \        User Datagram Protocol (UDP) and Lightweight UDP (UDP-\n            \
    \  Lite)\", RFC 8304, DOI 10.17487/RFC8304, February 2018,\n              <https://www.rfc-editor.org/info/rfc8304>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC0854]  Postel, J. and J. Reynolds, \"Telnet\
    \ Protocol\n              Specification\", STD 8, RFC 854, DOI 10.17487/RFC0854,\
    \ May\n              1983, <https://www.rfc-editor.org/info/rfc854>.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2474]  Nichols,\
    \ K., Blake, S., Baker, F., and D. Black,\n              \"Definition of the Differentiated\
    \ Services Field (DS\n              Field) in the IPv4 and IPv6 Headers\", RFC\
    \ 2474,\n              DOI 10.17487/RFC2474, December 1998,\n              <https://www.rfc-editor.org/info/rfc2474>.\n\
    \   [RFC2475]  Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z.,\n    \
    \          and W. Weiss, \"An Architecture for Differentiated\n              Services\"\
    , RFC 2475, DOI 10.17487/RFC2475, December 1998,\n              <https://www.rfc-editor.org/info/rfc2475>.\n\
    \   [RFC3260]  Grossman, D., \"New Terminology and Clarifications for\n      \
    \        Diffserv\", RFC 3260, DOI 10.17487/RFC3260, April 2002,\n           \
    \   <https://www.rfc-editor.org/info/rfc3260>.\n   [RFC5461]  Gont, F., \"TCP's\
    \ Reaction to Soft Errors\", RFC 5461,\n              DOI 10.17487/RFC5461, February\
    \ 2009,\n              <https://www.rfc-editor.org/info/rfc5461>.\n   [RFC6093]\
    \  Gont, F. and A. Yourtchenko, \"On the Implementation of the\n             \
    \ TCP Urgent Mechanism\", RFC 6093, DOI 10.17487/RFC6093,\n              January\
    \ 2011, <https://www.rfc-editor.org/info/rfc6093>.\n   [RFC7414]  Duke, M., Braden,\
    \ R., Eddy, W., Blanton, E., and A.\n              Zimmermann, \"A Roadmap for\
    \ Transmission Control Protocol\n              (TCP) Specification Documents\"\
    , RFC 7414,\n              DOI 10.17487/RFC7414, February 2015,\n            \
    \  <https://www.rfc-editor.org/info/rfc7414>.\n   [RFC7657]  Black, D., Ed. and\
    \ P. Jones, \"Differentiated Services\n              (Diffserv) and Real-Time\
    \ Communication\", RFC 7657,\n              DOI 10.17487/RFC7657, November 2015,\n\
    \              <https://www.rfc-editor.org/info/rfc7657>.\n   [RFC8095]  Fairhurst,\
    \ G., Ed., Trammell, B., Ed., and M. Kuehlewind,\n              Ed., \"Services\
    \ Provided by IETF Transport Protocols and\n              Congestion Control Mechanisms\"\
    , RFC 8095,\n              DOI 10.17487/RFC8095, March 2017,\n              <https://www.rfc-editor.org/info/rfc8095>.\n\
    \   [TAPS-MINSET]\n              Welzl, M. and S. Gjessing, \"A Minimal Set of\
    \ Transport\n              Services for TAPS Systems\", Work in Progress, draft-ietf-\n\
    \              taps-minset-01, February 2018.\n"
- title: Appendix A.  Overview of RFCs Used as Input for Pass 1
  contents:
  - "Appendix A.  Overview of RFCs Used as Input for Pass 1\n   TCP:        [RFC0793],\
    \ [RFC1122], [RFC5482], [RFC5925], and\n               [RFC7413].\n   MPTCP: \
    \     [RFC6182], [RFC6824], and [RFC6897].\n   SCTP:       RFCs without a sockets\
    \ API specification:\n               [RFC3758], [RFC4895], [RFC4960], and [RFC5061].\n\
    \               RFCs that include a sockets API specification:\n             \
    \  [RFC6458], [RFC6525], [RFC6951], [RFC7053], [RFC7496],\n               and\
    \ [RFC7829].\n   UDP(-Lite): See [RFC8304].\n   LEDBAT:     [RFC6817].\n"
- title: Appendix B.  How This Document Was Developed
  contents:
  - "Appendix B.  How This Document Was Developed\n   This section gives an overview\
    \ of the method that was used to develop\n   this document.  It was given to contributors\
    \ for guidance, and it can\n   be helpful for future updates or extensions.\n\
    \   This document is only concerned with transport features that are\n   explicitly\
    \ exposed to applications via primitives.  It also strictly\n   follows RFC text:\
    \ if a transport feature is truly relevant for an\n   application, the RFCs should\
    \ say so, and they should describe how to\n   use and configure it.  Thus, the\
    \ approach followed for developing\n   this document was to identify the right\
    \ RFCs, then analyze and\n   process their text.\n   Primitives that \"MAY\" be\
    \ implemented by a transport protocol were\n   excluded.  To be included, the\
    \ minimum requirement level for a\n   primitive to be implemented by a protocol\
    \ was \"SHOULD\".  Where style\n   requirement levels as described in [RFC2119]\
    \ are not used, primitives\n   were excluded when they are described in conjunction\
    \ with statements\n   like, e.g., \"some implementations also provide\" or \"\
    an implementation\n   may also\".  Excluded primitives or parameters were briefly\
    \ described\n   in a dedicated subsection.\n   Pass 1: This began by identifying\
    \ text that talks about primitives.\n   An API specification, abstract or not,\
    \ obviously describes primitives\n   -- but we are not *only* interested in API\
    \ specifications.  The text\n   describing the 'Send' primitive in the API specified\
    \ in [RFC0793],\n   for instance, does not say that data transfer is reliable.\
    \  TCP's\n   reliability is clear, however, from this text in Section 1 of\n \
    \  [RFC0793]:\n      The Transmission Control Protocol (TCP) is intended for use\
    \ as a\n      highly reliable host-to-host protocol between hosts in packet-\n\
    \      switched computer communication networks, and in interconnected\n     \
    \ systems of such networks.\n   Some text for the pass 1 subsections was developed\
    \ by copying and\n   pasting all the relevant text parts from the relevant RFCs\
    \ then\n   adjusting the terminology to match that in Section 2 and shortening\n\
    \   phrasing to match the general style of the document.  An effort was\n   made\
    \ to formulate everything as a primitive description such that the\n   primitive\
    \ descriptions became as complete as possible (e.g., the\n   'SEND.TCP' primitive\
    \ in pass 2 is explicitly described as reliably\n   transferring data); text that\
    \ is relevant for the primitives\n   presented in this pass but still does not\
    \ fit directly under any\n   primitive was used in a subsection's introduction.\n\
    \   Pass 2: The main goal of this pass is unification of primitives.  As\n   input,\
    \ only text from pass 1 was used (no exterior sources).  The\n   list in pass\
    \ 2 is not arranged by protocol (i.e., \"first protocol X,\n   here are all the\
    \ primitives; then protocol Y, here are all the\n   primitives, ...\") but by\
    \ primitive (i.e., \"primitive A, implemented\n   this way in protocol X, this\
    \ way in protocol Y, ...\").  It was a goal\n   to obtain as many similar pass\
    \ 2 primitives as possible.  For\n   instance, this was sometimes achieved by\
    \ not always maintaining a 1:1\n   mapping between pass 1 and pass 2 primitives,\
    \ renaming primitives,\n   etc.  For every new primitive, the already-existing\
    \ primitives were\n   considered to try to make them as coherent as possible.\n\
    \   For each primitive, the following style was used:\n   o  PRIMITIVENAME.PROTOCOL:\n\
    \      Pass 1 primitive/event:\n      Parameters:\n      Returns:\n      Comments:\n\
    \   The entries \"Parameters\", \"Returns\", and \"Comments\" were skipped when\n\
    \   a primitive had no parameters, no described return value, or no\n   comments\
    \ seemed necessary, respectively.  Optional parameters are\n   followed by \"\
    (optional)\".  When known, default values were provided.\n   Pass 3: The main\
    \ point of this pass is to identify transport features\n   that are the result\
    \ of static properties of protocols, for which all\n   protocols have to be listed\
    \ together; this is then the final list of\n   all available transport features.\
    \  This list was primarily based on\n   text from pass 2, with additional input\
    \ from pass 1 (but no external\n   sources).\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank (in alphabetical order)\
    \ Bob Briscoe,\n   Spencer Dawkins, Aaron Falk, David Hayes, Karen Nielsen, Tommy\
    \ Pauly,\n   Joe Touch, and Brian Trammell for providing valuable feedback on\
    \ this\n   document.  We especially thank Christoph Paasch for providing input\n\
    \   related to Multipath TCP and Gorry Fairhurst and Tom Jones for\n   providing\
    \ input related to UDP(-Lite).  This work has received\n   funding from the European\
    \ Union's Horizon 2020 research and\n   innovation programme under grant agreement\
    \ No. 644334 (NEAT).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael Welzl\n   University of Oslo\n   PO Box 1080 Blindern\n\
    \   Oslo  N-0316\n   Norway\n   Email: michawe@ifi.uio.no\n   Michael Tuexen\n\
    \   Muenster University of Applied Sciences\n   Stegerwaldstrasse 39\n   Steinfurt\
    \  48565\n   Germany\n   Email: tuexen@fh-muenster.de\n   Naeem Khademi\n   University\
    \ of Oslo\n   PO Box 1080 Blindern\n   Oslo  N-0316\n   Norway\n   Email: naeemk@ifi.uio.no\n"
