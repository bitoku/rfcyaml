- title: __initial_text__
  contents:
  - '      Common Presence and Instant Messaging (CPIM): Message Format

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines the MIME content type 'Message/CPIM', a message\n\
    \   format for protocols that conform to the Common Profile for Instant\n   Messaging\
    \ (CPIM) specification.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n       1.1.  Motivation . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n       1.2.  Background . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n       1.3.  Goals  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n       1.4.  Terminology and Conventions  . . . . . . . . . . . .\
    \ . .  5\n   2.  Overall Message Structure  . . . . . . . . . . . . . . . . .\
    \ .  5\n       2.1.  Message/CPIM MIME Headers  . . . . . . . . . . . . . . .\
    \  6\n       2.2.  Message Headers  . . . . . . . . . . . . . . . . . . . .  6\n\
    \       2.3.  Character Escape Mechanism . . . . . . . . . . . . . . .  8\n  \
    \           2.3.1.  Escape Mechanism Usage . . . . . . . . . . . . .  8\n    \
    \   2.4.  Message Content  . . . . . . . . . . . . . . . . . . . .  9\n   3. \
    \ Message Header Syntax  . . . . . . . . . . . . . . . . . . . . 10\n       3.1.\
    \  Header Names . . . . . . . . . . . . . . . . . . . . . . 10\n       3.2.  Header\
    \ Value . . . . . . . . . . . . . . . . . . . . . . 10\n       3.3.  Language\
    \ tagging . . . . . . . . . . . . . . . . . . . . 10\n       3.4.  Namespaces\
    \ for Header Name Extensibility . . . . . . . . 11\n       3.5.  Mandatory-to-Recognize\
    \ Features  . . . . . . . . . . . . 13\n       3.6.  Collected Message Header\
    \ Syntax  . . . . . . . . . . . . 14\n   4.  Header Definitions . . . . . . .\
    \ . . . . . . . . . . . . . . . 16\n       4.1.  The 'From' Header  . . . . .\
    \ . . . . . . . . . . . . . . 16\n       4.2.  The 'To' Header  . . . . . . .\
    \ . . . . . . . . . . . . . 17\n       4.3.  The 'cc' Header  . . . . . . . .\
    \ . . . . . . . . . . . . 18\n       4.4.  The 'DateTime' Header  . . . . . .\
    \ . . . . . . . . . . . 18\n       4.5.  The 'Subject' Header . . . . . . . .\
    \ . . . . . . . . . . 19\n       4.6.  The 'NS' Header  . . . . . . . . . . .\
    \ . . . . . . . . . 20\n       4.7.  The 'Require' Header . . . . . . . . . .\
    \ . . . . . . . . 20\n   5.  Examples . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 21\n       5.1.  An Example Message/CPIM Message  . . . . . .\
    \ . . . . . . 21\n       5.2.  An Example Esing MIME multipart/signed . . . .\
    \ . . . . . 22\n   6.  Application Design Considerations  . . . . . . . . . .\
    \ . . . . 22\n   7.  IANA Considerations  . . . . . . . . . . . . . . . . . .\
    \ . . . 23\n       7.1.  Registration for Message/CPIM Content Type . . . . .\
    \ . . 24\n       7.2.  Registration for urn:ietf:params:cpim-headers  . . . .\
    \ . 25\n   8.  Internationalization Considerations  . . . . . . . . . . . . .\
    \ 26\n   9.  Security Considerations  . . . . . . . . . . . . . . . . . . . 26\n\
    \   10. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 26\n  \
    \ 11. References . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n    \
    \   11.1.  Normative References. . . . . . . . . . . . . . . . . . 26\n      \
    \ 11.2.  Informative References. . . . . . . . . . . . . . . . . 27\n   12. Authors'\
    \ Addresses . . . . . . . . . . . . . . . . . . . . . . 29\n   13. Full Copyright\
    \ Statement . . . . . . . . . . . . . . . . . . . 30\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo defines the MIME content type 'Message/CPIM',\
    \ a message\n   format for protocols that conform to the Common Profile for Instant\n\
    \   Messaging (CPIM) specification.  This is a common message format for\n   CPIM-compliant\
    \ messaging protocols [26].\n   While being prepared for CPIM, this format is\
    \ quite general and may\n   be reused by other applications with similar requirements.\n\
    \   Application specifications that adopt this as a base format should\n   address\
    \ the questions raised in section 6 of this document.\n"
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   The Common Profile for Instant Messaging (CPIM) [26] specification\n\
    \   defines a number of operations to be supported and criteria to be\n   satisfied\
    \ for interworking between diverse instant messaging\n   protocols.  The intent\
    \ is to allow a variety of different protocols\n   interworking through gateways\
    \ to support cross-protocol messaging\n   that meets the requirements of RFC 2779\
    \ [20].\n   To adequately meet the security requirements of RFC 2779, a common\n\
    \   message format is needed so that end-to-end signatures and encryption\n  \
    \ may be applied.  This document describes a common canonical message\n   format\
    \ that must be used by any CPIM-compliant message transfer\n   protocol, whereby\
    \ signatures are calculated for end-to-end security.\n   The design of this message\
    \ format is intended to enable security to\n   be applied, while itself remaining\
    \ agnostic about the specific\n   security mechanisms that may be appropriate\
    \ for a given application.\n   For CPIM instant messaging and presence, specific\
    \ security protocols\n   are specified by the CPIM instant messaging [26] and\
    \ CPIM presence\n   [27] specifications.\n   Also note that the message format\
    \ described here is not itself a MIME\n   data format, although it may be contained\
    \ within a MIME object, and\n   may contain MIME objects.  See section 2 for more\
    \ details.\n"
- title: 1.2.  Background
  contents:
  - "1.2.  Background\n   RFC 2779 requires that an instant message can carry a MIME\
    \ payload\n   [1][2]; thus some level of support for MIME will be a common element\n\
    \   of any CPIM compliant protocol.  Therefore it seems reasonable that a\n  \
    \ common message format should use a RFC2822/MIME-like syntax [9], as\n   protocol\
    \ implementations must already contain code to parse this.\n   Unfortunately,\
    \ using pure RFC2822/MIME can be problematic:\n   o  Irregular lexical structure\
    \ -- RFC2822/MIME allows a number of\n      optional encodings and multiple ways\
    \ to encode a particular value.\n      For example, RFC2822/MIME comments may\
    \ be encoded in multiple\n      ways.  For security purposes, a single encoding\
    \ method must be\n      defined as a basis for computing message digest values.\
    \  Protocols\n      that transmit data in a different format would otherwise lose\n\
    \      information needed to verify a signature.\n   o  Weak internationalization\
    \ -- RFC2822/MIME requires header values\n      to use 7-bit ASCII, which is problematic\
    \ for encoding\n      international character sets.  Mechanisms for language tagging\
    \ in\n      RFC2822/MIME headers [16] are awkward to use and have limited\n  \
    \    applicability.\n   o  Mutability -- addition, modification or removal of\
    \ header\n      information.  Because it is not explicitly forbidden, many\n \
    \     applications that process MIME content (e.g., MIME gateways)\n      rebuild\
    \ or restructure messages in transit.  This obliterates most\n      attempts at\
    \ achieving security (e.g., signatures), leaving\n      receiving applications\
    \ unable to verify the data received.\n   o  Message and payload separation --\
    \ there is not a clear syntactic\n      distinction between message metadata and\
    \ message content.\n   o  Limited extensibility.  (X-headers are problematic because\
    \ they\n      may not be standardized; this leads to situations where a header\n\
    \      starts out as experimental but then finds widespread application,\n   \
    \   resulting in a common usage that cannot be standardized.)\n   o  No support\
    \ for structured information (text string values only).\n   o  Some processors\
    \ impose line length limitations.\n   The message format defined by this memo\
    \ overcomes some of these\n   difficulties by having a simplified syntax that\
    \ is generally\n   compatible with the format accepted by RFC2822/MIME parsers\
    \ and\n   having a stricter syntax.  It also defines mechanisms to support some\n\
    \   desired features not covered by the RFC2822/MIME format\n   specifications.\n"
- title: 1.3.  Goals
  contents:
  - "1.3.  Goals\n   This specification aims to satisfy the following goals:\n   o\
    \  a securable end-to-end format for a message (a canonical message\n      format\
    \ to serve as a basis for signature calculation, rather than\n      specified\
    \ security mechanisms).\n   o  independence of any specific application\n   o\
    \  capability of conveying a range of different address types\n   o  assumption\
    \ of an 8-bit clean message-transfer protocol\n   o  evolvable:  extensible by\
    \ multiple parties\n   o  a clear separation of message metadata from message\
    \ content\n   o  a simple, regular, easily parsed syntax\n   o  a compact, low-overhead\
    \ format for simple messages\n"
- title: 1.4.  Terminology and Conventions
  contents:
  - "1.4.  Terminology and Conventions\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, RFC 2119 [4].\n   NOTE: Comments like this provide additional nonessential\
    \ information\n   about the rationale behind this document.  Such information\
    \ is not\n   needed for building a conformant implementation, but may help those\n\
    \   who wish to understand the design in greater depth.\n"
- title: 2.  Overall Message Structure
  contents:
  - "2.  Overall Message Structure\n   The CPIM message format encapsulates arbitrary\
    \ MIME message content,\n   together with message- and content-related metadata.\
    \  This can\n   optionally be signed or encrypted using MIME security multiparts\
    \ in\n   conjunction with an appropriate security scheme.\n   A Message/CPIM object\
    \ is a two-part entity, where the first part\n   contains the message metadata\
    \ and the second part is the message\n   content.  The two parts are separated\
    \ from the enclosing MIME header\n   fields and also from each other by blank\
    \ lines.  The message metadata\n   header information obeys more stringent syntax\
    \ rules than the MIME\n   message content headers that may be carried within the\
    \ message.\n   A complete message looks something like this:\n      m: Content-type:\
    \ Message/CPIM\n      s:\n      h: (message-metadata-headers)\n      s:\n    \
    \  e: (encapsulated MIME message-body)\n   The end of the message body is defined\
    \ by the framing mechanism of\n   the protocol used.  The tags 'm:', 's:', 'h:',\
    \ 'e:', and 'x:' are not\n   part of the message format and are used here to indicate\
    \ the\n   different parts of the message, thus:\n      m:  MIME headers for the\
    \ overall message\n      s:  a blank separator line\n      h:  message headers\n\
    \      e:  encapsulated MIME object containing the message content\n      x: \
    \ MIME security multipart message wrapper\n"
- title: 2.1.  Message/CPIM MIME Headers
  contents:
  - "2.1.  Message/CPIM MIME Headers\n   The message MIME headers identify the message\
    \ as a CPIM-formatted\n   message.\n   The only required MIME header is:\n   \
    \   Content-type: Message/CPIM\n   Other MIME headers may be used as appropriate\
    \ for the message\n   transfer environment.\n"
- title: 2.2.  Message Headers
  contents:
  - "2.2.  Message Headers\n   Message headers carry information relevant to the end-to-end\
    \ transfer\n   of the message from sender to receiver.  Message headers MUST NOT\
    \ be\n   modified, reformatted or reordered in transit, but in some\n   circumstances\
    \ they MAY be examined by a CPIM message transfer\n   protocol.\n   The message\
    \ headers serve a similar purpose to RFC 2822 message\n   headers in email [9],\
    \ and have a similar but restricted allowable\n   syntax.\n   The basic header\
    \ syntax is:\n      Key: Value\n   where \"Key\" is a header name and \"Value\"\
    \ is the corresponding header\n   value.\n   The following considerations apply:\n\
    \   o  The entire header MUST be contained on a single line.  The line\n     \
    \ terminator is not considered part of the header value.\n   o  Only one header\
    \ per line.  Multiple headers MUST NOT be included\n      on a single line.\n\
    \   o  Processors SHOULD NOT impose any line-length limitations.\n   o  There\
    \ MUST NOT be any whitespace at the beginning or end of a\n      line.\n   o \
    \ UTF-8 character encoding [13] MUST be used throughout.\n   o  The character\
    \ sequence CR,LF (13,10) MUST be used to terminate\n      each line.\n   o  The\
    \ header name contains only US-ASCII characters (see section 3.1\n      and section\
    \ 3.6 for the specific syntax).\n   o  The header MUST NOT contain any control\
    \ characters (0-31).  If a\n      header value needs to represent control characters\
    \ then the escape\n      mechanism described below MUST be used.\n   o  There\
    \ MUST be a single space character (32) following the header\n      name and colon.\n\
    \   o  Multiple headers using the same key (header name) are allowed.\n      (Specific\
    \ header semantics may dictate only one occurrence of any\n      particular header.)\n\
    \   o  Header names MUST match exactly (i.e., \"From:\" and \"from:\" are\n  \
    \    different headers).\n   o  If a header name is not recognized or not understood,\
    \ the header\n      should be ignored.  But see also the \"Require:\" header (section\n\
    \      4.7).\n   o  Interpretation (e.g., equivalence) of header values is dependent\n\
    \      on the particular header definition.  Message processors MUST\n      preserve\
    \ all octets of all headers (both name and value) exactly.\n   o  Message processors\
    \ MUST NOT change the order of message headers.\n   Examples:\n      To: Pooh\
    \ Bear <im:pooh@100akerwood.com>\n      From: <im:piglet@100akerwood.com>\n  \
    \    DateTime: 2001-02-02T10:48:54-05:00\n"
- title: 2.3.  Character Escape Mechanism
  contents:
  - "2.3.  Character Escape Mechanism\n   This mechanism MUST be used to code control\
    \ characters in a header,\n   having Unicode code points in the range U+0000 to\
    \ U+001f or U+007f.\n   (Rather than invent something completely new, the escape\
    \ mechanism\n   has been adopted from that used by the Java programming language.)\n\
    \   Note that the escape mechanism is applied to a UCS-2 character, NOT\n   to\
    \ the octets of its UTF-8 coding.  Mapping from/to UTF-8 coding is\n   performed\
    \ without regard for escape sequences or character coding.\n   (The header syntax\
    \ is defined so that octets corresponding to control\n   characters other than\
    \ CR and LF do not appear in the output.)\n   An arbitrary UCS-2 character is\
    \ escaped using the form:\n      \\uxxxx\n   where:\n      \\     is U+005c (backslash)\n\
    \      u     is U+0075 (lower case letter U)\n      xxxx  is a sequence of exactly\
    \ four hexadecimal digits\n            (0-9, a-f or A-F) or\n            (U+0030-U+0039,\
    \ U+0041-U+0046, or U+0061-0066)\n   The hexadecimal number 'xxxx' is the UCS\
    \ code-point value of the\n   escaped character.\n   Further, the following special\
    \ sequences introduced by \"\\\" are used:\n      \\\\    for \\ (backslash, U+005c)\n\
    \      \\\"    for \" (double quote, U+0022)\n      \\'    for ' (single quote,\
    \ U+0027)\n      \\b    for backspace (U+0008)\n      \\t    for tab (U+0009)\n\
    \      \\n    for linefeed (U+000a)\n      \\r    for carriage return (U+000d)\n"
- title: 2.3.1.  Escape Mechanism Usage
  contents:
  - "2.3.1.  Escape Mechanism Usage\n   When generating messages conformant with this\
    \ specification:\n   o  The special sequences listed above MUST be used to encode\
    \ any\n      occurrence of the following characters that appear anywhere in a\n\
    \      header: backslash (U+005c), backspace (U+0008), tab (U+0009),\n      linefeed\
    \ (U+000a) or carriage return (U+000d).\n   o  The special sequence \\\" MUST\
    \ be used for any occurrence of a\n      double quote (U+0022) that appears within\
    \ a string delimited by\n      double quotes.\n   o  The special sequence \\'\
    \ MUST be used for any occurrence of a\n      single quote (U+0027) that appears\
    \ within a string delimited by\n      single quotes.\n   o  Single- or double-quote\
    \ characters that delimit a string value\n      MUST NOT be escaped.\n   o  The\
    \ general escape sequence \\uxxxx MUST be used for any other\n      control character\
    \ (U+0000 to U+0007, U+000b to U+000c, U+000e to\n      U+001f or u+007f) that\
    \ appears anywhere in a header.\n   o  All other characters MUST NOT be represented\
    \ using an escape\n      sequence.\n   When processing a message based on this\
    \ specification, the escape\n   sequence usage described above MUST be recognized.\n\
    \   Further, any other occurrence of an escape sequence described above\n   SHOULD\
    \ be recognized and treated as an occurrence of the\n   corresponding Unicode\
    \ character.\n   Any backslash ('\\') character SHOULD be interpreted as introducing\
    \ an\n   escape sequence.  Any unrecognized escape sequence SHOULD be treated\n\
    \   as an instance of the character following the backslash character.\n   An\
    \ isolated backslash that is the last character of a header SHOULD\n   be ignored.\n"
- title: 2.4.  Message Content
  contents:
  - "2.4.  Message Content\n   The final section of a Message/CPIM is the MIME-encapsulated\
    \ message\n   content, which follows standard MIME formatting rules [1][2].\n\
    \   The MIME content headers MUST include at least a Content-Type header.\n  \
    \ The content may be any MIME type.\n   Example:\n      e: Content-Type: text/plain;\
    \ charset=utf-8\n      e: Content-ID: <1234567890@foo.com>\n      e:\n      e:\
    \ This is my encapsulated text message content\n"
- title: 3.  Message Header Syntax
  contents:
  - "3.  Message Header Syntax\n   A header contains two parts, a name and a value,\
    \ separated by a colon\n   character (':') and single space (32).  It is terminated\
    \ by the\n   sequence CR,LF (13,10).\n   Headers use UTF-8 character encoding\
    \ throughout, per RFC 3629 [13].\n   NOTE: in the descriptions that follow, header\
    \ field names and other\n   specified text values MUST be used exactly as given,\
    \ using exactly\n   the indicated upper- and lower- case letters.  In this respect,\
    \ the\n   ABNF usage differs from RFC 2234 [6].\n"
- title: 3.1.  Header Names
  contents:
  - "3.1.  Header Names\n   The header name is a sequence of US-ASCII characters,\
    \ excluding\n   control, SPACE or separator characters.  Use of the character\
    \ \".\" in\n   a header name is reserved for a namespace prefix separator.\n \
    \  Separator characters are:\n      SEPARATORS   = \"(\" / \")\" / \"<\" / \"\
    >\" / \"@\"\n                   / \",\" / \";\" / \":\" / \"\\\" / DQUOTE\n  \
    \                 / \"/\" / \"[\" / \"]\" / \"?\" / \"=\"\n                  \
    \ / \"{\" / \"}\" / SP\n   NOTE: The range of allowed characters was determined\
    \ by examination\n   of HTTP and RFC 2822 header name formats and choosing the\
    \ more\n   restricted.  The intent is to allow CPIM headers to follow a syntax\n\
    \   that is compatible with the allowed syntax for both RFC 2822 [9] and\n   HTTP\
    \ [18] (including HTTP-derived protocols such as SIP [21]).\n"
- title: 3.2.  Header Value
  contents:
  - "3.2.  Header Value\n   A header value has a structure defined by the corresponding\
    \ header\n   specification.  Implementations that use a particular header must\n\
    \   adhere to the format and usage rules thus defined when creating or\n   processing\
    \ a message containing that header.\n   The other general constraints on header\
    \ formats MUST also be followed\n   (one line, UTF-8 character encoding, no control\
    \ characters, etc.)\n"
- title: 3.3.  Language tagging
  contents:
  - "3.3.  Language tagging\n   Full internationalization of a protocol requires that\
    \ a language can\n   be indicated for any human-readable text [15][7].\n   A message\
    \ header may indicate a language for its value by including\n   ';lang=tag' after\
    \ the header name and colon, where 'tag' is a\n   language identifying token per\
    \ RFC 3066 [10].\n   Example:\n      Subject:;lang=fr Objet de message\n   If\
    \ the language parameter is not applied a header, any human-readable\n   text\
    \ is assumed to use the language identified as 'i-default' [7].\n"
- title: 3.4.  Namespaces for Header Name Extensibility
  contents:
  - "3.4.  Namespaces for Header Name Extensibility\n   NOTE: This section defines\
    \ a framework for header extensibility whose\n   use is optional.  If no header\
    \ extensions are allowed by an\n   application then these structures may never\
    \ be used.\n   An application that uses this message format is expected to define\n\
    \   the set of headers that are required and allowed for that\n   application.\
    \  This section defines a header extensibility framework\n   that can be used\
    \ with any application.\n   The extensibility framework is based on that provided\
    \ for XML [22] by\n   XML namespaces [23].  All headers are associated with a\
    \ \"namespace\",\n   which is in turn associated with a globally unique URI.\n\
    \   Within a particular message instance, header names are associated\n   with\
    \ a particular namespace through the presence or absence of a\n   namespace prefix,\
    \ which is a leading part of the header name followed\n   by a period (\".\");\
    \ e.g.,\n      prefix.header-name: header-value\n   Here, 'prefix' is the header\
    \ name prefix, 'header-name' is the header\n   name within the namespace associated\
    \ with 'prefix', and 'header-\n   value' is the value for this header.\n     \
    \ header-name: header-value\n   In this case, the header name prefix is absent,\
    \ and the given\n   'header-name' is associated with a default namespace.\n  \
    \ The Message/CPIM media type registration designates a default\n   namespace\
    \ for any headers that are not more explicitly associated\n   with any namespace.\
    \  In most cases, this default namespace is all\n   that is needed.\n   A namespace\
    \ is identified by a URI.  In this usage, the URI is used\n   simply as a globally\
    \ unique identifier, and there is no requirement\n   that it can be used for any\
    \ other purpose.  Any legal globally unique\n   URI MAY be used to identify a\
    \ namespace.  (By \"globally unique\", we\n   mean constructed according to some\
    \ set of rules so that it is\n   reasonable to expect that nobody else will use\
    \ the same URI for a\n   different purpose.)  A URI used as an identifier MUST\
    \ be a full\n   absolute-URI, per RFC 2396 [8].  (Relative URIs and URI-references\n\
    \   containing fragment identifiers MUST NOT be used for this purpose.)\n   Within\
    \ a specific message, an 'NS' header is used to declare a\n   namespace prefix\
    \ and associate it with a URI that identifies a\n   namespace.  Following that\
    \ declaration, within the scope of that\n   message, the combination of namespace\
    \ prefix and header name\n   indicates a globally unique identifier for the header\
    \ (consisting of\n   the namespace URI and header name).\n   For example:\n  \
    \    NS: MyFeatures <mid:MessageFeatures@id.foo.com>\n      MyFeatures.WackyMessageOption:\
    \ Use-silly-font\n   This defines a namespace prefix 'MyFeatures' associated with\
    \ the\n   namespace identifier 'mid:MessageFeatures@id.foo.com'.  Subsequently,\n\
    \   the prefix indicates that the WackyMessageOption header name\n   referenced\
    \ is associated with the identified namespace.\n   A namespace prefix declaration\
    \ MUST precede any use of that prefix.\n   With the exception of any application-specific\
    \ predefined namespace\n   prefixes (see section 6), a namespace prefix is strictly\
    \ local to the\n   message in which it occurs.  The actual prefix used has no\
    \ global\n   significance.  This means that the headers:\n      xxx.name: value\n\
    \      yyy.name: value\n   in two different messages may have exactly the same\
    \ effect if\n   namespace prefixes 'xxx' and 'yyy' are associated with the same\n\
    \   namespace URI.  Thus the following have exactly the same meaning:\n      NS:\
    \ acme <http://id.acme.widgets/wily-headers/>\n      acme.runner-trap: set\n \
    \  and\n      NS: widget <http://id.acme.widgets/wily-headers/>\n      widget.runner-trap:\
    \ set\n   A 'NS' header without a header prefix name specifies a default\n   namespace\
    \ for subsequent headers; that is a namespace that is\n   associated with header\
    \ names not having a prefix.  For example:\n      NS: <http://id.acme.widgets/wily-headers/>\n\
    \      runner-trap: set\n   has the same meaning as the previous examples.\n \
    \  This framework allows different implementers to create extension\n   headers\
    \ without the worry of header name duplication; each defines\n   headers within\
    \ their own namespace.\n"
- title: 3.5.  Mandatory-to-Recognize Features
  contents:
  - "3.5.  Mandatory-to-Recognize Features\n   Sometimes it is necessary for the sender\
    \ of a message to insist that\n   some functionality is understood by the recipient.\
    \  By using the\n   mandatory-to-recognize indicator, a sender is notifying the\
    \ recipient\n   that it MUST understand the named header or feature in order to\n\
    \   properly understand the message.\n   A header or feature is indicated as being\
    \ mandatory-to-recognize by a\n   'Require:' header.  For example:\n      Require:\
    \ MyFeatures.VitalMessageOption\n      MyFeatures.VitalMessageOption: Confirmation-requested\n\
    \   Multiple required header names may be listed in a single 'Require'\n   header,\
    \ separated by commas.\n   NOTE: Indiscriminate use of 'Require:' headers could\
    \ harm\n   interoperability.  It is suggested that any implementer who defines\n\
    \   required headers also publish the header specifications so other\n   implementations\
    \ can successfully interoperate.\n   The 'Require:' header MAY also be used to\
    \ indicate that some non-\n   header semantics must be implemented by the recipient,\
    \ even when it\n   does not appear as a header.  For example:\n      Require:\
    \ Locale.MustRenderKanji\n   might be used to indicate that message content includes\
    \ characters\n   from the Kanji repertoire, which must be rendered for proper\n\
    \   understanding of the message.  In this case, the header name is just\n   a\
    \ token (using header name syntax and namespace association) that\n   indicates\
    \ some desired behaviour.\n"
- title: 3.6.  Collected Message Header Syntax
  contents:
  - "3.6.  Collected Message Header Syntax\n   The following description of message\
    \ header syntax uses ABNF, per RFC\n   2234 [6].  Most of this syntax can be interpreted\
    \ as defining UCS\n   character sequences or UTF-8 octet sequences.  Alternate\
    \ productions\n   at the end allow for either interpretation.\n   NOTE: Specified\
    \ text values MUST be used as given, using exactly the\n   indicated upper- and\
    \ lower-case letters.  In this respect, the ABNF\n   usage here differs from RFC\
    \ 2234 [6].\n   Collected syntax:\n   Header       = Header-name \":\" *( \";\"\
    \ Parameter ) SP\n                  Header-value\n                  CRLF\n   Header-name\
    \  = [ Name-prefix \".\" ] Name\n   Name-prefix  = Name\n   Parameter    = Lang-param\
    \ / Ext-param\n   Lang-param   = \"lang=\" Language-tag\n   Ext-param    = Param-name\
    \ \"=\" Param-value\n   Param-name   = Name\n   Param-value  = Token / Number\
    \ / String\n   Header-value = *HEADERCHAR\n   Name         = 1*NAMECHAR\n   Token\
    \        = 1*TOKENCHAR\n   Number       = 1*DIGIT\n   String       = DQUOTE *(\
    \ Str-char / Escape ) DQUOTE\n   Str-char     = %x20-21 / %x23-5B / %x5D-7E /\
    \ UCS-high\n   Escape       = \"\\\" ( \"u\" 4(HEXDIG)    ; UCS codepoint\n  \
    \                    / \"b\"              ; Backspace\n                      /\
    \ \"t\"              ; Tab\n                      / \"n\"              ; Linefeed\n\
    \                      / \"r\"              ; Return\n                      /\
    \ DQUOTE           ; Double quote\n                      / \"'\"             \
    \ ; Single quote\n                      / \"\\\" )            ; Backslash\n  \
    \ Formal-name  = 1*( Token SP ) / String\n   URI          = <defined as absolute-URI\
    \ by RFC 2396>\n   Language-tag = <defined by RFC 3066>\n                ; Any\
    \ UCS character except CTLs, or escape\n   HEADERCHAR   = UCS-no-CTL / Escape\n\
    \                ; Any US-ASCII char except \".\", CTLs or SEPARATORS:\n   NAMECHAR\
    \     = %x21 / %x23-27 / %x2a-2b / %x2d\n                / %x5e-60 / %x7c / %x7e\n\
    \                / ALPHA / DIGIT\n                ; Any UCS char except CTLs or\
    \ SEPARATORS:\n   TOKENCHAR    = NAMECHAR / \".\" / UCS-high\n   SEPARATORS  \
    \ = \"(\" / \")\" / \"<\" / \">\" / \"@\"    ; 28/29/3c/3e/40\n              \
    \  / \",\" / \";\" / \":\" / \"\\\" / DQUOTE ; 2c/3b/3a/5c/22\n              \
    \  / \"/\" / \"[\" / \"]\" / \"?\" / \"=\"    ; 2f/5b/5d/3f/3d\n             \
    \   / \"{\" / \"}\" / SP                 ; 7b/7d/20\n   CTL          = <Defined\
    \ by RFC 2234 -- %x0-%x1f, %x7f>\n   CRLF         = <Defined by RFC 2234 -- CR,\
    \ LF>\n   SP           = <defined by RFC 2234 -- %x20>\n   DIGIT        = <defined\
    \ by RFC 2234 -- '0'-'9'>\n   HEXDIG       = <defined by RFC 2234 -- '0'-'9',\
    \ 'A'-'F', 'a'-'f'>\n   ALPHA        = <defined by RFC 2234 -- 'A'-'Z', 'a'-'z'>\n\
    \   DQUOTE       = <defined by RFC 2234 -- %x22>\n   To interpret the syntax in\
    \ a general UCS character environment, use\n   the following productions:\n  \
    \ UCS-no-CTL   = %x20-7e / UCS-high\n   UCS-high     = %x80-7fffffff\n   To interpret\
    \ the syntax as defining UTF-8 coded octet sequences, use\n   the following productions:\n\
    \   UCS-no-CTL   = UTF8-no-CTL\n   UCS-high     = UTF8-multi\n   UTF8-no-CTL \
    \ = %x20-7e / UTF8-multi\n   UTF8-multi   = %xC0-DF %x80-BF\n                /\
    \ %xE0-EF %x80-BF %x80-BF\n                / %xF0-F7 %x80-BF %x80-BF %x80-BF\n\
    \                / %xF8-FB %x80-BF %x80-BF %x80-BF %x80-BF\n                /\
    \ %xFC-FD %x80-BF %x80-BF %x80-BF %x80-BF %x80-BF\n   NOTE: the above syntax comes\
    \ from an older version of UTF-8, and is\n   included for compatibility with UTF-8\
    \ software based on the earlier\n   specifications.  Applications generating this\
    \ message format SHOULD\n   generate UTF-8 that matches the more restricted specification\
    \ in RFC\n   3629 [13].\n"
- title: 4.  Header Definitions
  contents:
  - "4.  Header Definitions\n   This specification defines a core set of headers that\
    \ are available\n   for use by applications:  an application specification must\
    \ indicate\n   the headers that may be used, those that must be recognized and\
    \ those\n   that must appear in any message (see section 6).\n   The header definitions\
    \ that follow fall into two categories:\n   a) those that are part of the CPIM\
    \ format extensibility framework,\n      and\n   b) those that have been based\
    \ on similar headers in RFC 2822 [9],\n      specified here with corresponding\
    \ semantics.\n   Header names and syntax are described without a namespace\n \
    \  qualification, and the associated namespace URI is listed as part of\n   the\
    \ header specification.  Any of the namespace associations already\n   mentioned\
    \ (implied default namespace, explicit default namespace or\n   implied namespace\
    \ prefix or explicit namespace prefix declaration)\n   may be used to identify\
    \ the namespace.\n   all headers defined here are associated with the namespace\
    \ uri\n   <urn:ietf:params:cpim-headers:>, which is defined according to [12].\n\
    \   NOTE: Header names and other text MUST be used as given, using\n   exactly\
    \ the indicated upper- and lower-case letters.  In this\n   respect, the ABNF\
    \ usage here differs from RFC 2234 [6].\n"
- title: 4.1.  The 'From' Header
  contents:
  - "4.1.  The 'From' Header\n   Indicates the sender of a message.\n   Header name:\
    \ From\n   Namespace URI:\n      <urn:ietf:params:cpim-headers:>\n   Syntax:\n\
    \      (see also section 3.6)\n      From-header = \"From\" \": \" [ Formal-name\
    \ ] \"<\" URI \">\"\n                        ; \"From\" is case-sensitive\n  \
    \ Description:\n      Indicates the sender or originator of a message.\n     \
    \ If present, the 'Formal-name' identifies the person or \"real\n      world\"\
    \ name for the originator.\n      The URI indicates an address for the originator.\n\
    \   Examples:\n      From: Winnie the Pooh <im:pooh@100akerwood.com>\n      From:\
    \ <im:tigger@100akerwood.com>\n"
- title: 4.2.  The 'To' Header
  contents:
  - "4.2.  The 'To' Header\n   Specifies an intended recipient of a message.\n   Header\
    \ name: To\n   Namespace URI:\n      <urn:ietf:params:cpim-headers:>\n   Syntax:\n\
    \      (see also section 3.6)\n      To-header = \"To\" \": \" [ Formal-name ]\
    \ \"<\" URI \">\"\n                        ; \"To\" is case-sensitive\n   Description:\n\
    \      Indicates the recipient of a message.\n      If present, the 'Formal-name'\
    \ identifies the person or \"real\n      world\" name for the recipient.\n   \
    \   The URI indicates an address for the recipient.\n      Multiple recipients\
    \ may be indicated by including multiple 'To'\n      headers.\n   Examples:\n\
    \      To: Winnie the Pooh <im:pooh@100akerwood.com>\n      To: <im:tigger@100akerwood.com>\n"
- title: 4.3.  The 'cc' Header
  contents:
  - "4.3.  The 'cc' Header\n   Specifies a non-primary recipient (\"courtesy copy\"\
    ) for a message.\n   Header name: cc\n   Namespace URI:\n      <urn:ietf:params:cpim-headers:>\n\
    \   Syntax:\n      (see also section 3.6)\n      Cc-header   = \"cc\" \": \" [\
    \ Formal-name ] \"<\" URI \">\"\n                        ; \"cc\" is case-sensitive\n\
    \   Description:\n      Indicates a courtesy copy recipient of a message.\n  \
    \    If present, the 'Formal-name' identifies the person or \"real\n      world\"\
    \ name for the recipient.\n      The URI indicates an address for the recipient.\n\
    \      Multiple courtesy copy recipients may be indicated by including\n     \
    \ multiple 'cc' headers.\n   Examples:\n      cc: Winnie the Pooh <im:pooh@100akerwood.com>\n\
    \      cc: <im:tigger@100akerwood.com>\n"
- title: 4.4.  The 'DateTime' Header
  contents:
  - "4.4.  The 'DateTime' Header\n   Specifies the date and time a message was sent.\n\
    \   Header name: DateTime\n   Namespace URI:\n      <urn:ietf:params:cpim-headers:>\n\
    \   Syntax:\n      (see also section 3.6)\n      DateTime-header = \"DateTime\"\
    \ \": \" date-time\n                        ; \"DateTime\" is case-sensitive\n\
    \      (where the syntax of 'date-time' is a profile of ISO8601 [24]\n      defined\
    \ in \"Date and Time on the Internet\" [11])\n   Description:\n      The 'DateTime'\
    \ header supplies the date and time at which the\n      sender sent the message.\n\
    \      One purpose of the this header is to provide for protection\n      against\
    \ a replay attack, by allowing the recipient to know when\n      the message was\
    \ intended to be sent.  The value of the date header\n      is the senders's current\
    \ time when the message was transmitted,\n      using ISO 8601 [24] date and time\
    \ format as profiled in \"Date and\n      Time on the Internet: Timestamps\" [11].\n\
    \   Example:\n      DateTime: 2001-02-01T12:16:49-05:00\n"
- title: 4.5.  The 'Subject' Header
  contents:
  - "4.5.  The 'Subject' Header\n   Contains a description of the topic of the message.\n\
    \   Header name: Subject\n   Namespace URI:\n      <urn:ietf:params:cpim-headers:>\n\
    \   Syntax:\n      (see also section 3.6)\n      Subject-header = \"Subject\"\
    \ \":\" [ \";\" Lang-param ] SP *HEADERCHAR\n                        ; \"Subject\"\
    \ is case-sensitive\n   Description:\n      The 'Subject' header supplies the\
    \ sender's description of the\n      topic or content of the message.\n      The\
    \ sending agent should specify the language parameter if it has\n      any reasonable\
    \ knowledge of the language used by the sender to\n      indicate the message\
    \ subject.\n   Example:\n      Subject:;lang=en Eeyore's feeling very depressed\
    \ today\n"
- title: 4.6.  The 'NS' Header
  contents:
  - "4.6.  The 'NS' Header\n   Declare a local namespace prefix.\n   Header name:\
    \ NS\n   Namespace URI:\n      <urn:ietf:params:cpim-headers:>\n   Syntax:\n \
    \     (see also section 3.6)\n      NS-header = \"NS\" \": \" [ Name-prefix ]\
    \ \"<\" URI \">\"\n                        ; \"NS\" is case-sensitive\n   Description:\n\
    \      Declares a namespace prefix that may be used in subsequent header\n   \
    \   names.  See section 3.4 for more details.\n   Example:\n      NS: MyAlias\
    \ <mid:MessageFeatures@id.foo.com>\n      MyAlias.MyHeader: private-extension-data\n"
- title: 4.7.  The 'Require' Header
  contents:
  - "4.7.  The 'Require' Header\n   Specify a header or feature that must be implemented\
    \ by the receiver\n   for correct message processing.\n   Header name: Require\n\
    \   Namespace URI:\n      <urn:ietf:params:cpim-headers:>\n   Syntax:\n      (see\
    \ also section 3.6)\n      Require-header = \"Require\" \": \" Header-name *(\
    \ \",\" Header-name )\n                        ; \"Require\" is case-sensitive\n\
    \   Description:\n      Indicates a header or feature that must be implemented\
    \ or\n      understood by the receiver for correct message processing.  See\n\
    \      section 3.5 for more details.\n      Note that the required header or feature\
    \ does not have to be used\n      in the message, but for brevity it is recommended\
    \ that an\n      implementation does not issue the 'Required' header for unused\n\
    \      features.\n   Example:\n      Require: MyAlias.VitalHeader\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   The examples in the following sections use the per-line tags\
    \ below to\n   indicate different parts of the overall message format:\n     \
    \ m:  MIME headers for the overall message\n      s:  a blank separator line\n\
    \      h:  message headers\n      e:  encapsulated MIME object containing the\
    \ message content\n      x:  MIME security multipart message wrapper\n   The following\
    \ examples also assume <urn:ietf:params:cpim-headers:> is\n   the implied default\
    \ namespace for the application.\n"
- title: 5.1.  An Example Message/CPIM Message
  contents:
  - "5.1.  An Example Message/CPIM Message\n   The following example shows a Message/CPIM\
    \ message:\n      m: Content-type: Message/CPIM\n      s:\n      h: From: MR SANDERS\
    \ <im:piglet@100akerwood.com>\n      h: To: Depressed Donkey <im:eeyore@100akerwood.com>\n\
    \      h: DateTime: 2000-12-13T13:40:00-08:00\n      h: Subject: the weather will\
    \ be fine today\n      h: Subject:;lang=fr beau temps prevu pour aujourd'hui\n\
    \      h: NS: MyFeatures <mid:MessageFeatures@id.foo.com>\n      h: Require: MyFeatures.VitalMessageOption\n\
    \      h: MyFeatures.VitalMessageOption: Confirmation-requested\n      h: MyFeatures.WackyMessageOption:\
    \ Use-silly-font\n      s:\n      e: Content-type: text/xml; charset=utf-8\n \
    \     e: Content-ID: <1234567890@foo.com>\n      e:\n      e: <body>\n      e:\
    \ Here is the text of my message.\n      e: </body>\n"
- title: 5.2.  An Example Esing MIME multipart/signed
  contents:
  - "5.2.  An Example Esing MIME multipart/signed\n   In order to secure a Message/CPIM,\
    \ an application or implementation\n   may use RFC 1847 [14], and some appropriate\
    \ security protocols (e.g.,\n   S/MIME [19] or openPGP [17]), and cryptographic\
    \ scheme.\n   Using S/MIME [19] and pkcs7, the above message would look like this:\n\
    \      x: Content-Type: multipart/signed; boundary=next;\n                   \
    \    micalg=sha1;\n                       protocol=application/pkcs7-signature\n\
    \      x:\n      x: --next\n      m: Content-Type: Message/CPIM\n      s:\n  \
    \    h: From: MR SANDERS <im:piglet@100akerwood.com>\n      h: To: Dopey Donkey\
    \ <im:eeyore@100akerwood.com>\n      h: DateTime: 2000-12-13T13:40:00-08:00\n\
    \      h: Subject: the weather will be fine today\n      h: Subject:;lang=fr beau\
    \ temps prevu pour aujourd'hui\n      h: NS: MyFeatures <mid:MessageFeatures@id.foo.com>\n\
    \      h: Require: MyFeatures.VitalMessageOption\n      h: MyFeatures.VitalMessageOption:\
    \ Confirmation-requested\n      h: MyFeatures.WackyMessageOption: Use-silly-font\n\
    \      s:\n      e: Content-type: text/xml; charset=utf-8\n      e: Content-ID:\
    \ <1234567890@foo.com>\n      e:\n      e: <body>\n      e: Here is the text of\
    \ my message.\n      e: </body>\n      x: --next\n      x: Content-Type: application/pkcs7-signature\n\
    \      x:\n      x: (signature stuff)\n          :\n      x: --next--\n"
- title: 6.  Application Design Considerations
  contents:
  - "6.  Application Design Considerations\n   As defined, the 'Message/CPIM' content\
    \ type uses a default namespace\n   URI 'urn:ietf:params-cpim-headers:', and does\
    \ not define any other\n   implicit namespace prefixes.  Applications that have\
    \ different\n   requirements should define and register a different MIME media\
    \ type,\n   specify the required default namespace URI and define any implied\n\
    \   namespace prefixes as part of the media type specification.\n   Applications\
    \ using this specification must also specify:\n   o  all headers that must be\
    \ recognized by implementations of the\n      application\n   o  any headers that\
    \ must be present in all messages created by that\n      application.\n   o  any\
    \ headers that may appear more than once in a message, and how\n      they are\
    \ to be interpreted (e.g., how to interpret multiple\n      'Subject:' headers\
    \ with different language parameter values).\n   o  Security mechanisms and crytography\
    \ schemes to be used with the\n      application, including any mandatory-to-implement\
    \ security\n      provisions.\n   The goal of providing a definitive message format\
    \ to which security\n   mechanisms can be applied places some constraints on the\
    \ design of\n   applications that use this message format:\n   o  Within a network\
    \ of message transfer agents, an intermediate\n      gateway MUST NOT change the\
    \ Message/CPIM content in any way.  This\n      implies that headers cannot be\
    \ changed or reordered, transfer\n      encoding cannot be changed, languages\
    \ cannot be changed, etc.\n   o  Because Message/CPIM messages are immutable,\
    \ any transfer agent\n      that wants to modify the message should create a new\
    \ Message/CPIM\n      message with the modified header and with the original message\
    \ as\n      its content.  (This approach is similar to real-world bill-of-\n \
    \     lading handling, where each person in the chain attaches a new\n      sheet\
    \ to the message.  Then anyone can validate the original\n      message and see\
    \ what has changed and who changed it by following\n      the trail of amendments.\
    \  Another metaphor is including the old\n      message in a new envelope.)\n\
    \   In chosing security mechanisms for an applications, the following IAB\n  \
    \ survey documents may be helpful:\n   o  Security Mechanisms for the Internet\
    \ [28]\n   o  A Survey of Authentication Mechanisms [29].\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This memo calls for two new IANA registrations:\n\
    \   o  A new MIME content-type value, Message/CPIM, per RFC 2048 [3].\n      The\
    \ registration template can be found in section 7.1 below.\n   o  A new IANA URN\
    \ sub-namespace, urn:ietf:params:cpim-headers:, per\n      RFC 3553 [12].  The\
    \ registration template can be found in section\n      7.2 below.\n"
- title: 7.1.  Registration for Message/CPIM Content Type
  contents:
  - "7.1.  Registration for Message/CPIM Content Type\n      To: ietf-types@iana.org\n\
    \      Subject: Registration of MIME media type Message/CPIM\n      MIME media\
    \ type name: message\n      MIME subtype name: CPIM\n      Required parameters:\
    \ (None)\n      Optional parameters: (None)\n   Encoding considerations:\n   \
    \   Intended to be used in 8-bit clean environments, with non-\n      transformative\
    \ encoding (8-bit or binary, according to the content\n      contained within\
    \ the message;  the CPIM message headers can be\n      handled in an 8-bit text\
    \ environment).\n      This content type could be used with a 7-bit transfer environment\n\
    \      if appropriate transfer encoding is used.  NOTE that for this\n      purpose,\
    \ enclosed MIME content MUST BE treated as opaque data and\n      encoded accordingly.\
    \  Any encoding must be reversed before any\n      enclosed MIME content can be\
    \ accessed.\n   Security considerations:\n      The content may contain signed\
    \ data, so any transfer encoding MUST\n      BE exactly reversed before the content\
    \ is processed.\n      See also the security considerations for email messages\
    \ (RFC 2822\n      [9]).\n   Interoperability considerations:\n      This content\
    \ format is intended to be used to exchange possibly-\n      secured messages\
    \ between different instant messaging protocols.\n      Very strict adherence\
    \ to the message format (including whitespace\n      usage) may be needed to achieve\
    \ interoperability.\n   Published specification: RFC 3862\n   Applications which\
    \ use this media type: Instant messaging\n   Additional information:\n      The\
    \ default namespace URI associated with this content-type is\n      'urn:ietf:params:cpim-headers:'.\
    \  (See RFC 3862 for further\n      details.)\n      See also the Common Profile\
    \ for Instant Messaging (CPIM) [26].\n   Person & email address to contact for\
    \ further information:\n      G. Klyne, <GK-IETF@ninebynine.org>\n   Intended\
    \ usage: LIMITED USE\n   Author/Change controller: IETF\n"
- title: 7.2.  Registration for urn:ietf:params:cpim-headers
  contents:
  - "7.2.  Registration for urn:ietf:params:cpim-headers\n   Registry name: cpim-headers\n\
    \   Specification:\n      RFC 3862.  Additional values may be defined by standards\
    \ track\n      RFCs that update or obsolete RFC 3862.\n   Repository:\n      http://www.iana.org/assignments/cpim-headers\n\
    \   Index value:\n      The index value is a CPIM message header name, which may\
    \ consist\n      of a sequence from a restricted set of US-ASCII characters, as\n\
    \      defined above.\n   URN Formation:\n      The URI for a header is formed\
    \ from its name by:\n      a) replacing any non-URN characters (as defined by\
    \ RFC 2141 [5])\n         with the corresponding '%hh' escape sequence (per RFC\
    \ 2396\n         [8]); and\n      b) prepending the resulting string with 'urn:ietf:params:cpim-\n\
    \         headers:'.\n      Thus, the URI corresponding to the CPIM message header\
    \ 'From:'\n      would be 'urn:ietf:params:cpim-headers:From'.  The URI\n    \
    \  corresponding to the (putative) CPIM message header 'Top&Tail'\n      would\
    \ be 'urn:ietf:params:cpim-headers:Top%26Tail'.\n"
- title: 8.  Internationalization Considerations
  contents:
  - "8.  Internationalization Considerations\n   Message headers use UTF-8 character\
    \ encoding throughout; hence, they\n   can convey the full UCS-4 (Unicode [30],\
    \ ISO/IEC 10646 [25])\n   character repertoire.\n   Language tagging is provided\
    \ for message headers using the \"Lang\"\n   parameter (section 3.3).\n   Message\
    \ content is any MIME-encapsulated content, and normal MIME\n   content internationalization\
    \ considerations apply.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   The Message/CPIM format is designed with security\
    \ in mind.  In\n   particular it is designed to be used with MIME security multiparts\n\
    \   for signatures and encryption.  To this end, Message/CPIM messages\n   must\
    \ be considered immutable once created.\n   Because Message/CPIM messages are\
    \ binary messages (due to UTF-8\n   encoding), if they are transmitted across\
    \ non-8-bit-clean transports\n   then the transfer agent must tunnel the entire\
    \ message.  Changing the\n   message data encoding is not an option.  This implies\
    \ that the\n   Message/CPIM must be encapsulated by the message transfer system\
    \ and\n   unencapsulated at the receiving end of the tunnel.\n   The resulting\
    \ message must not have data loss due to the encoding and\n   unencoding of the\
    \ message.  For example, an application may choose to\n   apply the MIME base64\
    \ content-transfer-encoding to the Message/CPIM\n   object to meet this requirement.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The authors thank the following for their helpful comments:\
    \ Harald\n   Alvestrand, Walter Houser, Leslie Daigle, Mark Day, Brian Raymor.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [1]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n        Extensions (MIME) Part One: Format of Internet Message\
    \ Bodies\",\n        RFC 2045, November 1996.\n   [2]  Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n        Extensions (MIME) Part Two: Media Types\"\
    , RFC 2046, November\n        1996.\n   [3]  Freed, N., Klensin, J., and J. Postel,\
    \ \"Multipurpose Internet\n        Mail Extensions (MIME) Part Four: Registration\
    \ Procedures\", BCP\n        13, RFC 2048, November 1996.\n   [4]  Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [5]  Moats, R., \"URN Syntax\", RFC 2141, May 1997.\n\
    \   [6]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n        Specifications:\
    \ ABNF\", RFC 2234, November 1997.\n   [7]  Alvestrand, H., \"IETF Policy on Character\
    \ Sets and Languages\",\n        BCP 18, RFC 2277, January 1998.\n   [8]  Berners-Lee,\
    \ T., Fielding, R., and L. Masinter, \"Uniform\n        Resource Identifiers (URI):\
    \ Generic Syntax\", RFC 2396, August\n        1998.\n   [9]  Resnick, P., \"Internet\
    \ Message Format\", RFC 2822, April 2001.\n   [10] Alvestrand, H., \"Tags for\
    \ the Identification of Languages\", BCP\n        47, RFC 3066, January 2001.\n\
    \   [11] Klyne, G. and C. Newman, \"Date and Time on the Internet:\n        Timestamps\"\
    , RFC 3339, July 2002.\n   [12] Mealling, M., Masinter, L., Hardie, T., and G.\
    \ Klyne, \"An IETF\n        URN Sub-namespace for Registered Protocol Parameters\"\
    , BCP 73,\n        RFC 3553, June 2003.\n   [13] Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO 10646\", STD\n        63, RFC 3629, November 2003.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [14] Galvin, J., Murphy, S., Crocker, S., and\
    \ N. Freed, \"Security\n        Multiparts for MIME: Multipart/Signed and Multipart/Encrypted\"\
    ,\n        RFC 1847, October 1995.\n   [15] Weider, C., Preston, C., Simonsen,\
    \ K., Alvestrand, H., Atkinson,\n        R., Crispin, M., and P. Svanberg, \"\
    The Report of the IAB\n        Character Set Workshop held 29 February - 1 March,\
    \ 1996\", RFC\n        2130, April 1997.\n   [16] Freed, N. and K. Moore, \"MIME\
    \ Parameter Value and Encoded Word\n        Extensions: Character Sets, Languages,\
    \ and Continuations\", RFC\n        2231, November 1997.\n   [17] Callas, J.,\
    \ Donnerhacke, L., Finney, H., and R. Thayer, \"OpenPGP\n        Message Format\"\
    , RFC 2440, November 1998.\n   [18] Fielding, R., Gettys, J., Mogul, J., Frystyk,\
    \ H., Masinter, L.,\n        Leach, P., and T. Berners-Lee, \"Hypertext Transfer\
    \ Protocol --\n        HTTP/1.1\", RFC 2616, June 1999.\n   [19] Ramsdell, B.,\
    \ Ed., \"S/MIME Version 3 Message Specification\", RFC\n        2633, June 1999.\n\
    \   [20] Day, M., Aggarwal, S., Mohr, G., and J. Vincent, \"Instant\n        Messaging\
    \ / Presence Protocol Requirements\", RFC 2779, February\n        2000.\n   [21]\
    \ Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n        Peterson,\
    \ J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n        Session Initiation\
    \ Protocol\", RFC 3261, June 2002.\n   [22] Bray, T., Paoli, J., Sperberg-McQueen,\
    \ C., and E. Maler,\n        \"Extensible Markup Language (XML) 1.0 (2nd ed)\"\
    , W3C\n        Recommendation xml, October 2000,\n        <http://www.w3.org/TR/2000/REC-xml-20001006>.\n\
    \   [23] Bray, T., Hollander, D., and A. Layman, \"Namespaces in XML\", W3C\n\
    \        Recommendation xml-names, January 1999,\n        <http://www.w3.org/TR/REC-xml-names>.\n\
    \   [24] International Organization for Standardization, \"Data elements\n   \
    \     and interchange formats - Information interchange -\n        Representation\
    \ of dates and times\", ISO Standard 8601, June\n        1988.\n   [25] International\
    \ Organization for Standardization, \"Information\n        Technology - Universal\
    \ Multiple-octet coded Character Set (UCS)\n        - Part 1: Architecture and\
    \ Basic Multilingual Plane\", ISO\n        Standard 10646-1, May 1993.\n   [26]\
    \ Peterson, J., \"Common Profile for Instant Messaging (CPIM)\", RFC\n       \
    \ 3860, August 2004.\n   [27] Peterson, J., \"Common Profile for Presence (CPP)\"\
    , RFC 3859,\n        August 2004.\n   [28] Bellovin, S., Kaufman, C., and J. Schiller,\
    \ \"Security Mechanisms\n        for the Internet\", RFC 3631, December 2003.\n\
    \   [29] Rescorla, E., \"A Survey of Authentication Mechanisms\", Work in\n  \
    \      Progress, March 2004.\n   [30] The Unicode Consortium, \"The Unicode Standard,\
    \ Version 4.0\",\n        Addison-Wesley, Boston, MA. ISBN 0-321-18578-1, April\
    \ 2003,\n        <http://www.unicode.org/unicode/standard/versions/\n        enumeratedversions.html#Unicode_4_0_0>.\n"
- title: 12.  Authors' Addresses
  contents:
  - "12.  Authors' Addresses\n   Graham Klyne\n   Nine by Nine\n   EMail: GK-IETF@ninebynine.org\n\
    \   URI:   http://www.ninebynine.net/\n   Derek Atkins\n   IHTFP Consulting\n\
    \   6 Farragut Ave\n   Somerville, MA  02144\n   USA\n   Phone: +1 617 623 3745\n\
    \   EMail: derek@ihtfp.com, warlord@alum.mit.edu\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
