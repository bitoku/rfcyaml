- title: __initial_text__
  contents:
  - "      Stream Control Transmission Protocol (SCTP) Checksum Change\nStatus of\
    \ this Memo\n   This document specifies an Internet standards track protocol for\
    \ the\n   Internet community, and requests discussion and suggestions for\n  \
    \ improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\nCopyright Notice\n\
    \   Copyright (C) The Internet Society (2002).  All Rights Reserved.\nAbstract\n\
    \   Stream Control Transmission Protocol (SCTP) currently uses an Adler-\n   32\
    \ checksum.  For small packets Adler-32 provides weak detection of\n   errors.\
    \  This document changes that checksum and updates SCTP to use\n   a 32 bit CRC\
    \ checksum.\nTable of Contents\n   1 Introduction ...................................................\
    \  2\n   2 Checksum Procedures ............................................  3\n\
    \   3 Security Considerations.........................................  6\n  \
    \ 4 IANA Considerations.............................................  6\n   5\
    \ Acknowledgments ................................................  6\n   6 References\
    \ .....................................................  7\n   Appendix .........................................................\
    \  9\n   Authors' Addresses ............................................... 16\n\
    \   Full Copyright Statement ......................................... 17\n1 Introduction\n\
    \   A fundamental weakness has been detected in SCTP's current Adler-32\n   checksum\
    \ algorithm [STONE].  This document updates and replaces the\n   Adler-32 checksum\
    \ definition in [RFC 2960].  Note that there is no\n   graceful transition mechanism\
    \ for migrating to the new checksum.\n   Implementations are expected to immediately\
    \ switch to the new\n   algorithm; use of the old algorithm is deprecated.\n \
    \  One requirement of an effective checksum is that it evenly and\n   smoothly\
    \ spreads its input packets over the available check bits.\n   From an email from\
    \ Jonathan Stone, who analyzed the Adler-32 as part\n   of his doctoral thesis:\n\
    \   \"Briefly, the problem is that, for very short packets, Adler32 is\n   guaranteed\
    \ to give poor coverage of the available bits.  Don't take\n   my word for it,\
    \ ask Mark Adler.  :-)\n   Adler-32 uses two 16-bit counters, s1 and s2.  s1 is\
    \ the sum of the\n   input, taken as 8-bit bytes.  s2 is a running sum of each\
    \ value of\n   s1.  Both s1 and s2 are computed mod-65521 (the largest prime less\n\
    \   than 2^16).  Consider a packet of 128 bytes.  The *most* that each\n   byte\
    \ can be is 255.  There are only 128 bytes of input, so the\n   greatest value\
    \ which the s1 accumulator can have is 255 * 128 =\n   32640.  So, for 128-byte\
    \ packets, s1 never wraps.  That is critical.\n   Why?\n   The key is to consider\
    \ the distribution of the s1 values, over some\n   distribution of the values\
    \ of the individual input bytes in each\n   packet.  Because s1 never wraps, s1\
    \ is simply the sum of the\n   individual input bytes.  (Even Doug's trick of\
    \ adding 0x5555 doesn't\n   help here, and an even larger value doesn't really\
    \ help: we can get\n   at most one mod-65521 reduction.)\n   Given the further\
    \ assumption that the input bytes are drawn\n   independently from some distribution\
    \ (they probably aren't: for file\n   system data, it's even worse than that!),\
    \ the Central Limit Theorem\n   tells us that that s1 will tend to have a normal\
    \ distribution.\n   That's bad: it tells us that the value of s1 will have hot-spots\
    \ at\n   around 128 times the mean of the input distribution: around 16k,\n  \
    \ assuming a uniform distribution.  That's bad.  We want the\n   accumulator to\
    \ wrap as many times as possible, so that the resulting\n   sum has as close to\
    \ a uniform distribution as possible.  (I call this\n   \"fairness\".)\n   So,\
    \ for short packets, the Adler-32 s1 sum is guaranteed to be\n   unfair.  Why\
    \ is that bad?  It's bad because the space of valid\n   packets -- input data,\
    \ plus checksum values -- is also small.  If all\n   packets have checksum values\
    \ very close to 32640, then the likelihood\n   of even a 'small' error leaving\
    \ a damaged packet with a valid\n   checksum is higher than if all checksum values\
    \ are equally likely.\"\n   Due to this inherent weakness, exacerbated by the\
    \ fact that SCTP will\n   first be used as a signaling transport protocol where\
    \ signaling\n   messages are usually less than 128 bytes, a new checksum algorithm\
    \ is\n   specified by this document, replacing the current Adler-32 algorithm\n\
    \   with CRC-32c.\n1.1 Conventions\n   The keywords MUST, MUST NOT, REQUIRED,\
    \ SHALL, SHALL NOT,\n   SHOULD,SHOULD NOT, RECOMMENDED, NOT RECOMMENDED, MAY,\
    \ and OPTIONAL,\n   when they appear in this document, are to be interpreted as\
    \ described\n   in [RFC2119].\n   Bit number order is defined in [RFC1700].\n\
    2 Checksum Procedures\n   The procedures described in section 2.1 of this document\
    \ MUST be\n   followed, replacing the current checksum defined in [RFC2960].\n\
    \   Furthermore any references within [RFC2960] to Adler-32 MUST be\n   treated\
    \ as a reference to CRC-32c.  Section 2.1 of this document\n   describes the new\
    \ calculation and verification procedures that MUST\n   be followed.\n2.1 Checksum\
    \ Calculation\n   When sending an SCTP packet, the endpoint MUST strengthen the\
    \ data\n   integrity of the transmission by including the CRC-32c checksum value\n\
    \   calculated on the packet, as described below.\n   After the packet is constructed\
    \ (containing the SCTP common header\n   and one or more control or DATA chunks),\
    \ the transmitter shall:\n   1) Fill in the proper Verification Tag in the SCTP\
    \ common header and\n      initialize the Checksum field to 0's.\n   2) Calculate\
    \ the CRC-32c of the whole packet, including the SCTP\n      common header and\
    \ all the chunks.\n   3) Put the resulting value into the Checksum field in the\
    \ common\n      header, and leave the rest of the bits unchanged.\n   When an\
    \ SCTP packet is received, the receiver MUST first check the\n   CRC-32c checksum:\n\
    \   1) Store the received CRC-32c value,\n   2) Replace the 32 bits of the Checksum\
    \ field in the received SCTP\n      packet with all '0's and calculate a CRC-32c\
    \ value of the whole\n      received packet.  And,\n   3) Verify that the calculated\
    \ CRC-32c value is the same as the\n      received CRC-32c value.  If not, the\
    \ receiver MUST treat the\n      packet as an invalid SCTP packet.\n   The default\
    \ procedure for handling invalid SCTP packets is to\n   silently discard them.\n\
    \   Any hardware implementation SHOULD be done in a way that is\n   verifiable\
    \ by the software.\n   We define a 'reflected value' as one that is the opposite\
    \ of the\n   normal bit order of the machine.  The 32 bit CRC is calculated as\n\
    \   described for CRC-32c and uses the polynomial code 0x11EDC6F41\n   (Castagnoli93)\
    \ or x^32+x^28+x^27+x^26+x^25\n   +x^23+x^22+x^20+x^19+x^18+x^14+x^13+x^11+x^10+x^9+x^8+x^6+x^0.\
    \  The\n   CRC is computed using a procedure similar to ETHERNET CRC [ITU32],\n\
    \   modified to reflect transport level usage.\n   CRC computation uses polynomial\
    \ division.  A message bit-string M is\n   transformed to a polynomial, M(X),\
    \ and the CRC is calculated from\n   M(X) using polynomial arithmetic [Peterson\
    \ 72].\n   When CRCs are used at the link layer, the polynomial is derived from\n\
    \   on-the-wire bit ordering: the first bit 'on the wire' is the high-\n   order\
    \ coefficient.  Since SCTP is a transport-level protocol, it\n   cannot know the\
    \ actual serial-media bit ordering.  Moreover,\n   different links in the path\
    \ between SCTP endpoints may use different\n   link-level bit orders.\n   A convention\
    \ must therefore be established for mapping SCTP transport\n   messages to polynomials\
    \ for purposes of CRC computation.  The bit-\n   ordering for mapping SCTP messages\
    \ to polynomials is that bytes are\n   taken most-significant first; but within\
    \ each byte, bits are taken\n   least-significant first.  The first byte of the\
    \ message provides the\n   eight highest coefficients.  Within each byte, the\
    \ least-significant\n   SCTP bit gives the most significant polynomial coefficient\
    \ within\n   that byte, and the most-significant SCTP bit is the least significant\n\
    \   polynomial coefficient in that byte.  (This bit ordering is sometimes\n  \
    \ called 'mirrored' or 'reflected' [Williams93].)  CRC polynomials are\n   to\
    \ be transformed back into SCTP transport-level byte values, using a\n   consistent\
    \ mapping.\n   The SCTP transport-level CRC value should be calculated as follows:\n\
    \      -  CRC input data are assigned to a byte stream, numbered from 0\n    \
    \     to N-1.\n      -  the transport-level byte-stream is mapped to a polynomial\n\
    \         value.  An N-byte PDU with j bytes numbered 0 to N-1, is\n         considered\
    \ as coefficients of a polynomial M(x) of order 8N-1,\n         with bit 0 of\
    \ byte j being coefficient x^(8(N-j)-8), bit 7 of\n         byte j being coefficient\
    \ x^(8(N-j)-1).\n      -  the CRC remainder register is initialized with all 1s\
    \ and the\n         CRC is computed with an algorithm that simultaneously\n  \
    \       multiplies by x^32 and divides by the CRC polynomial.\n      -  the polynomial\
    \ is multiplied by x^32 and divided by G(x), the\n         generator polynomial,\
    \ producing a remainder R(x) of degree less\n         than or equal to 31.\n \
    \     -  the coefficients of R(x) are considered a 32 bit sequence.\n      - \
    \ the bit sequence is complemented.  The result is the CRC\n         polynomial.\n\
    \      -  The CRC polynomial is mapped back into SCTP transport-level\n      \
    \   bytes.  Coefficient of x^31 gives the value of bit 7 of SCTP\n         byte\
    \ 0, the coefficient of x^24 gives the value of bit 0 of\n         byte 0.  The\
    \ coefficient of x^7 gives bit 7 of byte 3 and the\n         coefficient of x^0\
    \ gives bit 0 of byte 3.  The resulting four-\n         byte transport-level sequence\
    \ is the 32-bit SCTP checksum\n         value.\n   IMPLEMENTATION NOTE: Standards\
    \ documents, textbooks, and vendor\n   literature on CRCs often follow an alternative\
    \ formulation, in which\n   the register used to hold the remainder of the long-division\n\
    \   algorithm is initialized to zero rather than all-1s, and instead the\n   first\
    \ 32 bits of the message are complemented.  The long-division\n   algorithm used\
    \ in our formulation is specified, such that the the\n   initial multiplication\
    \ by 2^32 and the long-division are combined\n   into one simultaneous operation.\
    \  For such algorithms, and for\n   messages longer than 64 bits, the two specifications\
    \ are precisely\n   equivalent.  That equivalence is the intent of this document.\n\
    \   Implementors of SCTP are warned that both specifications are to be\n   found\
    \ in the literature, sometimes with no restriction on the long-\n   division algorithm.\
    \  The choice of formulation in this document is to\n   permit non-SCTP usage,\
    \ where the same CRC algorithm may be used to\n   protect messages shorter than\
    \ 64 bits.\n   If SCTP could follow link level CRC use, the CRC would be computed\n\
    \   over the link-level bit-stream.  The first bit on the link mapping to\n  \
    \ the highest-order coefficient, and so on, down to the last link-level\n   bit\
    \ as the lowest-order coefficient.  The CRC value would be\n   transmitted immediately\
    \ after the input message as a link-level\n   'trailer'.  The resulting link-level\
    \ bit-stream would be (M(X)x) *\n   x^32) + (M(X)*x^32))/ G(x), which is divisible\
    \ by G(X).  There would\n   thus be a constant CRC remainder for 'good' packets.\
    \  However, given\n   that implementations of RFC 2960 have already proliferated,\
    \ the IETF\n   discussions considered that the benefit of a 'trailer' CRC did\
    \ not\n   outweigh the cost of making a very large change in the protocol\n  \
    \ processing.  Further, packets accepted by the SCTP 'header' CRC are\n   in one-to-one\
    \ correspondence with packets accepted by a modified\n   procedure using a 'trailer'\
    \ CRC value, and where the SCTP common\n   checksum header is set to zero on transmission\
    \ and is received as\n   zero.\n   There may be a computational advantage in validating\
    \ the Association\n   against the Verification Tag, prior to performing a checksum,\
    \ as\n   invalid tags will result in the same action as a bad checksum in most\n\
    \   cases.  The exceptions for this technique would be INIT and some\n   SHUTDOWN-COMPLETE\
    \ exchanges, as well as a stale COOKIE-ECHO.  These\n   special case exchanges\
    \ must represent small packets and will minimize\n   the effect of the checksum\
    \ calculation.\n3 Security Considerations\n   In general, the security considerations\
    \ of RFC 2960 apply to the\n   protocol with the new checksum as well.\n4 IANA\
    \ Considerations\n   There are no IANA considerations required in this document.\n\
    5 Acknowledgments\n   The authors would like to thank the following people that\
    \ have\n   provided comments and input on the checksum issue:\n   Mark Adler,\
    \ Ran Atkinson, Stephen Bailey, David Black, Scott Bradner,\n   Mikael Degermark,\
    \ Laurent Glaude, Klaus Gradischnig, Alf Heidermark,\n   Jacob Heitz, Gareth Kiely,\
    \ David Lehmann, Allision Mankin, Lyndon\n   Ong, Craig Partridge, Vern Paxson,\
    \ Kacheong Poon, Michael Ramalho,\n   David Reed, Ian Rytina, Hanns Juergen Schwarzbauer,\
    \ Chip Sharp, Bill\n   Sommerfeld, Michael Tuexen, Jim Williams, Jim Wendt, Michael\
    \ Welzl,\n   Jonathan Wood, Lloyd Wood, Qiaobing Xie, La Monte Yarroll.\n   Special\
    \ thanks to Dafna Scheinwald, Julian Satran, Pat Thaler, Matt\n   Wakeley, and\
    \ Vince Cavanna, for selection criteria of polynomials and\n   examination of\
    \ CRC polynomials, particularly CRC-32c [Castagnoli93].\n   Special thanks to\
    \ Mr. Ross Williams and his document [Williams93].\n   This non-formal perspective\
    \ on software aspects of CRCs furthered\n   understanding of authors previously\
    \ unfamiliar with CRC computation.\n   More formal treatments of [Blahut 94] or\
    \ [Peterson 72], was also\n   essential.\n6 References\n   [Castagnoli93]  G.\
    \ Castagnoli, S. Braeuer and M. Herrman,\n                   \"Optimization of\
    \ Cyclic Redundancy-Check Codes with\n                   24 and 32 Parity Bits\"\
    , IEEE Transactions on\n                   Communications, Vol. 41, No. 6, June\
    \ 1993\n   [McKee75]       H. McKee, \"Improved {CRC} techniques detects\n   \
    \                erroneous leading and trailing 0's in transmitted\n         \
    \          data blocks\", Computer Design Volume 14 Number 10\n              \
    \     Pages 102-4,106, October 1975\n   [RFC1700]       Reynolds, J. and J. Postel,\
    \ \"ASSIGNED NUMBERS\", RFC\n                   1700, October 1994.\n   [RFC2026]\
    \       Bradner, S., \"The Internet Standards Process --\n                   Revision\
    \ 3\", BCP 9, RFC 2026, October 1996.\n   [RFC2119]       Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n                   Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [RFC2960]       Stewart, R., Xie, Q., Morneault, K.,\
    \ Sharp, C.,\n                   Schwarzbauer, H., Taylor, T., Rytina, I., Kalla,\
    \ M.,\n                   Zhang, L. and V. Paxson, \"Stream Control Transmission\n\
    \                   Protocol,\" RFC 2960, October 2000.\n   [ITU32]         ITU-T\
    \ Recommendation V.42, \"Error-correcting\n                   procedures for DCEs\
    \ using asynchronous-to-synchronous\n                   conversion\", section\
    \ 8.1.1.6.2, October 1996.\n7.1 Informative References\n   [STONE]         Stone,\
    \ J.,  \"Checksums in the Internet\", Doctoral\n                   dissertation\
    \ - August 2001.\n   [Williams93]    Williams, R., \"A PAINLESS GUIDE TO CRC ERROR\n\
    \                   DETECTION ALGORITHMS\" - Internet publication, August\n  \
    \                 1993,\n                   http://www.geocities.com/SiliconValley/Pines/\n\
    \                   8659/crc.htm.\n   [Blahut 1994]   R.E. Blahut, Theory and\
    \ Practice of Error Control\n                   Codes, Addison-Wesley, 1994.\n\
    \   [Easics 2001]   http://www.easics.be/webtools/crctool.  Online tools\n   \
    \                for synthesis of CRC Verilog and VHDL.\n   [Feldmeier 95]  David\
    \ C. Feldmeier, Fast software implementation of\n                   error detection\
    \ codes, IEEE Transactions on\n                   Networking, vol 3 no 6, pp 640-651,\
    \ December, 1995.\n   [Glaise 1997]   R.  J. Glaise, A two-step computation of\
    \ cyclic\n                   redundancy code CRC-32 for ATM networks, IBM Journal\n\
    \                   of Research and Development} vol 41 no 6, 1997.\n        \
    \           http://www.research.ibm.com/journal/rd/416/\n                   glaise.html.\n\
    \   [Prange 1957]   E. Prange, Cyclic Error-Correcting codes in two\n        \
    \           symbols, Technical report AFCRC-TN-57-103, Air Force\n           \
    \        Cambridge Research Center, Cambridge, Mass. 1957.\n   [Peterson 1972]\
    \ W. W. Peterson and E.J Weldon, Error Correcting\n                   Codes, 2nd.\
    \ edition, MIT Press, Cambridge,\n                   Massachusetts.\n   [Shie2001]\
    \      Ming-Der Shieh et. al, A Systematic Approach for\n                   Parallel\
    \ CRC Computations. Journal of Information\n                   Science and Engineering,\
    \ Vol.17 No.3, pp.445-461\n   [Sprachman2001] Michael Sprachman, Automatic Generation\
    \ of Parallel\n                   CRC Circuits, IEEE Design & Test May-June 2001\n\
    Appendix\n   This appendix is for information only and is NOT part of the\n  \
    \ standard.\n   The anticipated deployment of SCTP ranges over several orders\
    \ of\n   magnitude of link speed: from cellular-power telephony devices at\n \
    \  tens of kilobits, to local links at tens of gigabits.  Implementors\n   of\
    \ SCTP should consider their link speed and choose, from the wide\n   range of\
    \ CRC implementations, one which matches their own design\n   point for size,\
    \ cost, and throughput.  Many techniques for computing\n   CRCs are known.  This\
    \ Appendix surveys just a few, to give a feel for\n   the range of techniques\
    \ available.\n   CRCs are derived from early work by Prange in the 1950s [Prange\
    \ 57].\n   The theory underlying CRCs and choice of generator polynomial can be\n\
    \   introduced by either the theory of Galois fields [Blahut 94] or as\n   ideals\
    \ of an algebra over cyclic codes [cite Peterson 72].\n   One of the simplest\
    \ techniques is direct bit-serial hardware\n   implementations, using the generator\
    \ polynomial as the taps of a\n   linear feedback shift register (LSFR).  LSFR\
    \ computation follows\n   directly from the mathematics, and is generally attributed\
    \ to Prange.\n   Tools exist which, a CRC generator polynomial, will produce\n\
    \   synthesizable Verilog code for CRC hardware [Easics 2001].\n   Since LSFRs\
    \ do not scale well in speed, a variety of other techniques\n   have been explored.\
    \  One technique exploits the fact that the divisor\n   of the polynomial long-division,\
    \ G, is known in advance.  It is thus\n   possible to pre-compute lookup tables\
    \ giving the polynomial remainder\n   of multiple input bits --- typically 2,\
    \ 4, or 8 bits of input at a\n   time.  This technique can be used either in software\
    \ or in hardware.\n   Software to compute lookup tables yielding 2, 4, or 8 bits\
    \ of result\n   is freely available. [Williams93]\n   For multi-gigabit links,\
    \ the above techniques may still not be fast\n   enough.  One technique for computing\
    \ CRCS at OC-48 rates is 'two-\n   stage' CRC computation [Glaise 1997].  Here,\
    \ some multiple of G(x),\n   G(x)H(x), is chosen so as to minimize the number\
    \ of nonzero\n   coefficients, or weight, of the product G(x)H(x).  The low weight\
    \ of\n   the product polynomial makes it susceptible to efficient hardware\n \
    \  divide-by-constant implementations.  This first stage gives M(x)/\n   (G(x)H(x)),\
    \ as its result.  The second stage then divides the result\n   of the first stage\
    \ by H(x), yielding (M(x)/(G(x)H(x)))/H(x).  If H(x)\n   is also relatively prime\
    \ to G(x), this gives M(x)/G(x).  Further\n   developments on this approach can\
    \ be found in [Shie2001] and\n   [Sprachman2001].\n   The literature also includes\
    \ a variety of software CRC\n   implementations.  One approach is to use a carefully-tuned\
    \ assembly\n   code for direct polynomial division.  [Feldmeier 95] reports that\
    \ for\n   low-weight polynomials, tuned polynomial arithmetic gives higher\n \
    \  throughput than table-lookup algorithms.  Even within table-lookup\n   algorithms,\
    \ the size of the table can be tuned, either for total\n   cache footprint, or\
    \ (for space-restricted environments) to minimize\n   total size.\n   Implementors\
    \ should keep in mind, the bit ordering described in\n   Section 2: the ordering\
    \ of bits within bytes for computing CRCs in\n   SCTP is the least significant\
    \ bit of each byte is the most-\n   significant polynomial coefficient(and vice-versa).\
    \  This 'reflected'\n   SCTP CRC bit ordering matches on-the-wire bit order for\
    \ Ethernet and\n   other serial media, but is the reverse of traditional Internet\
    \ bit\n   ordering.\n   One technique to accommodate this bit-reversal can be\
    \ explained as\n   follows: sketch out a hardware implementation, assuming the\
    \ bits are\n   in CRC bit order; then perform a left-to-right inversion (mirror\n\
    \   image) on the entire algorithm.  (We defer, for a moment, the issue\n   of\
    \ byte order within words.)  Then compute that \"mirror image\" in\n   software.\
    \  The CRC from the \"mirror image\" algorithm will be the\n   bit-reversal of\
    \ a correct hardware implementation.  When the link-\n   level media sends each\
    \ byte, the byte is sent in the reverse of the\n   host CPU bit-order.  Serialization\
    \ of each byte of the \"reflected\"\n   CRC value re-reverses the bit order, so\
    \ in the end, each byte will be\n   transmitted on-the-wire in the specified bit\
    \ order.\n   The following non-normative sample code is taken from an open-source\n\
    \   CRC generator [Williams93], using the \"mirroring\" technique and\n   yielding\
    \ a lookup table for SCTP CRC32-c with 256 entries, each 32\n   bits wide.  While\
    \ neither especially slow nor especially fast, as\n   software table-lookup CRCs\
    \ go, it has the advantage of working on\n   both big-endian and little-endian\
    \ CPUs, using the same (host-order)\n   lookup tables, and using only the pre-defined\
    \ ntohl() and htonl()\n   operations.  The code is somewhat modified from [Williams93],\
    \ to\n   ensure portability between big-endian and little-endian\n   architectures.\
    \  (Note that if the byte endian-ness of the target\n   architecture is known\
    \ to be little-endian the final bit-reversal and\n   byte-reversal steps can be\
    \ folded into a single operation.)\n/*************************************************************/\n\
    /* Note Definition for Ross Williams table generator would   */\n/* be: TB_WIDTH=4,\
    \ TB_POLLY=0x1EDC6F41, TB_REVER=TRUE        */\n/* For Mr. Williams direct calculation\
    \ code use the settings */\n/* cm_width=32, cm_poly=0x1EDC6F41, cm_init=0xFFFFFFFF,\
    \      */\n/* cm_refin=TRUE, cm_refot=TRUE, cm_xorort=0x00000000        */\n/*************************************************************/\n\
    /* Example of the crc table file */\n#ifndef __crc32cr_table_h__\n#define __crc32cr_table_h__\n\
    #define CRC32C_POLY 0x1EDC6F41\n#define CRC32C(c,d) (c=(c>>8)^crc_c[(c^(d))&0xFF])\n\
    unsigned long  crc_c[256] =\n{\n0x00000000L, 0xF26B8303L, 0xE13B70F7L, 0x1350F3F4L,\n\
    0xC79A971FL, 0x35F1141CL, 0x26A1E7E8L, 0xD4CA64EBL,\n0x8AD958CFL, 0x78B2DBCCL,\
    \ 0x6BE22838L, 0x9989AB3BL,\n0x4D43CFD0L, 0xBF284CD3L, 0xAC78BF27L, 0x5E133C24L,\n\
    0x105EC76FL, 0xE235446CL, 0xF165B798L, 0x030E349BL,\n0xD7C45070L, 0x25AFD373L,\
    \ 0x36FF2087L, 0xC494A384L,\n0x9A879FA0L, 0x68EC1CA3L, 0x7BBCEF57L, 0x89D76C54L,\n\
    0x5D1D08BFL, 0xAF768BBCL, 0xBC267848L, 0x4E4DFB4BL,\n0x20BD8EDEL, 0xD2D60DDDL,\
    \ 0xC186FE29L, 0x33ED7D2AL,\n0xE72719C1L, 0x154C9AC2L, 0x061C6936L, 0xF477EA35L,\n\
    0xAA64D611L, 0x580F5512L, 0x4B5FA6E6L, 0xB93425E5L,\n0x6DFE410EL, 0x9F95C20DL,\
    \ 0x8CC531F9L, 0x7EAEB2FAL,\n0x30E349B1L, 0xC288CAB2L, 0xD1D83946L, 0x23B3BA45L,\n\
    0xF779DEAEL, 0x05125DADL, 0x1642AE59L, 0xE4292D5AL,\n0xBA3A117EL, 0x4851927DL,\
    \ 0x5B016189L, 0xA96AE28AL,\n0x7DA08661L, 0x8FCB0562L, 0x9C9BF696L, 0x6EF07595L,\n\
    0x417B1DBCL, 0xB3109EBFL, 0xA0406D4BL, 0x522BEE48L,\n0x86E18AA3L, 0x748A09A0L,\
    \ 0x67DAFA54L, 0x95B17957L,\n0xCBA24573L, 0x39C9C670L, 0x2A993584L, 0xD8F2B687L,\n\
    0x0C38D26CL, 0xFE53516FL, 0xED03A29BL, 0x1F682198L,\n0x5125DAD3L, 0xA34E59D0L,\
    \ 0xB01EAA24L, 0x42752927L,\n0x96BF4DCCL, 0x64D4CECFL, 0x77843D3BL, 0x85EFBE38L,\n\
    0xDBFC821CL, 0x2997011FL, 0x3AC7F2EBL, 0xC8AC71E8L,\n0x1C661503L, 0xEE0D9600L,\
    \ 0xFD5D65F4L, 0x0F36E6F7L,\n0x61C69362L, 0x93AD1061L, 0x80FDE395L, 0x72966096L,\n\
    0xA65C047DL, 0x5437877EL, 0x4767748AL, 0xB50CF789L,\n0xEB1FCBADL, 0x197448AEL,\
    \ 0x0A24BB5AL, 0xF84F3859L,\n0x2C855CB2L, 0xDEEEDFB1L, 0xCDBE2C45L, 0x3FD5AF46L,\n\
    0x7198540DL, 0x83F3D70EL, 0x90A324FAL, 0x62C8A7F9L,\n0xB602C312L, 0x44694011L,\
    \ 0x5739B3E5L, 0xA55230E6L,\n0xFB410CC2L, 0x092A8FC1L, 0x1A7A7C35L, 0xE811FF36L,\n\
    0x3CDB9BDDL, 0xCEB018DEL, 0xDDE0EB2AL, 0x2F8B6829L,\n0x82F63B78L, 0x709DB87BL,\
    \ 0x63CD4B8FL, 0x91A6C88CL,\n0x456CAC67L, 0xB7072F64L, 0xA457DC90L, 0x563C5F93L,\n\
    0x082F63B7L, 0xFA44E0B4L, 0xE9141340L, 0x1B7F9043L,\n0xCFB5F4A8L, 0x3DDE77ABL,\
    \ 0x2E8E845FL, 0xDCE5075CL,\n0x92A8FC17L, 0x60C37F14L, 0x73938CE0L, 0x81F80FE3L,\n\
    0x55326B08L, 0xA759E80BL, 0xB4091BFFL, 0x466298FCL,\n0x1871A4D8L, 0xEA1A27DBL,\
    \ 0xF94AD42FL, 0x0B21572CL,\n0xDFEB33C7L, 0x2D80B0C4L, 0x3ED04330L, 0xCCBBC033L,\n\
    0xA24BB5A6L, 0x502036A5L, 0x4370C551L, 0xB11B4652L,\n0x65D122B9L, 0x97BAA1BAL,\
    \ 0x84EA524EL, 0x7681D14DL,\n0x2892ED69L, 0xDAF96E6AL, 0xC9A99D9EL, 0x3BC21E9DL,\n\
    0xEF087A76L, 0x1D63F975L, 0x0E330A81L, 0xFC588982L,\n0xB21572C9L, 0x407EF1CAL,\
    \ 0x532E023EL, 0xA145813DL,\n0x758FE5D6L, 0x87E466D5L, 0x94B49521L, 0x66DF1622L,\n\
    0x38CC2A06L, 0xCAA7A905L, 0xD9F75AF1L, 0x2B9CD9F2L,\n0xFF56BD19L, 0x0D3D3E1AL,\
    \ 0x1E6DCDEEL, 0xEC064EEDL,\n0xC38D26C4L, 0x31E6A5C7L, 0x22B65633L, 0xD0DDD530L,\n\
    0x0417B1DBL, 0xF67C32D8L, 0xE52CC12CL, 0x1747422FL,\n0x49547E0BL, 0xBB3FFD08L,\
    \ 0xA86F0EFCL, 0x5A048DFFL,\n0x8ECEE914L, 0x7CA56A17L, 0x6FF599E3L, 0x9D9E1AE0L,\n\
    0xD3D3E1ABL, 0x21B862A8L, 0x32E8915CL, 0xC083125FL,\n0x144976B4L, 0xE622F5B7L,\
    \ 0xF5720643L, 0x07198540L,\n0x590AB964L, 0xAB613A67L, 0xB831C993L, 0x4A5A4A90L,\n\
    0x9E902E7BL, 0x6CFBAD78L, 0x7FAB5E8CL, 0x8DC0DD8FL,\n0xE330A81AL, 0x115B2B19L,\
    \ 0x020BD8EDL, 0xF0605BEEL,\n0x24AA3F05L, 0xD6C1BC06L, 0xC5914FF2L, 0x37FACCF1L,\n\
    0x69E9F0D5L, 0x9B8273D6L, 0x88D28022L, 0x7AB90321L,\n0xAE7367CAL, 0x5C18E4C9L,\
    \ 0x4F48173DL, 0xBD23943EL,\n0xF36E6F75L, 0x0105EC76L, 0x12551F82L, 0xE03E9C81L,\n\
    0x34F4F86AL, 0xC69F7B69L, 0xD5CF889DL, 0x27A40B9EL,\n0x79B737BAL, 0x8BDCB4B9L,\
    \ 0x988C474DL, 0x6AE7C44EL,\n0xBE2DA0A5L, 0x4C4623A6L, 0x5F16D052L, 0xAD7D5351L,\n\
    };\n#endif\n /* Example of table build routine */\n#include <stdio.h>\n#include\
    \ <stdlib.h>\n#define OUTPUT_FILE   \"crc32cr.h\"\n#define CRC32C_POLY    0x1EDC6F41L\n\
    FILE *tf;\nunsigned long\nreflect_32 (unsigned long b)\n{\n  int i;\n  unsigned\
    \ long rw = 0L;\n  for (i = 0; i < 32; i++){\n      if (b & 1)\n        rw |=\
    \ 1 << (31 - i);\n      b >>= 1;\n  }\n  return (rw);\n}\nunsigned long\nbuild_crc_table\
    \ (int index)\n{\n  int i;\n  unsigned long rb;\n  rb = reflect_32 (index);\n\
    \  for (i = 0; i < 8; i++){\n      if (rb & 0x80000000L)\n       rb = (rb << 1)\
    \ ^ CRC32C_POLY;\n      else\n       rb <<= 1;\n  }\n  return (reflect_32 (rb));\n\
    }\nmain ()\n{\n  int i;\n  printf (\"\\nGenerating CRC-32c table file <%s>\\n\"\
    , OUTPUT_FILE);\n  if ((tf = fopen (OUTPUT_FILE, \"w\")) == NULL){\n      printf\
    \ (\"Unable to open %s\\n\", OUTPUT_FILE);\n      exit (1);\n  }\n  fprintf (tf,\
    \ \"#ifndef __crc32cr_table_h__\\n\");\n  fprintf (tf, \"#define __crc32cr_table_h__\\\
    n\\n\");\n  fprintf (tf, \"#define CRC32C_POLY 0x%08lX\\n\", CRC32C_POLY);\n \
    \ fprintf (tf, \"#define CRC32C(c,d) (c=(c>>8)^crc_c[(c^(d))&0xFF])\\n\");\n \
    \ fprintf (tf, \"\\nunsigned long  crc_c[256] =\\n{\\n\");\n  for (i = 0; i <\
    \ 256; i++){\n      fprintf (tf, \"0x%08lXL, \", build_crc_table (i));\n     \
    \ if ((i & 3) == 3)\n        fprintf (tf, \"\\n\");\n  }\n   fprintf (tf, \"};\\\
    n\\n#endif\\n\");\n  if (fclose (tf) != 0)\n    printf (\"Unable to close <%s>.\"\
    \ OUTPUT_FILE);\n  else\n    printf (\"\\nThe CRC-32c table has been written to\
    \ <%s>.\\n\",\n      OUTPUT_FILE);\n}\n/* Example of crc insertion */\n#include\
    \ \"crc32cr.h\"\nunsigned long\ngenerate_crc32c(unsigned char *buffer, unsigned\
    \ int length)\n{\n  unsigned int i;\n  unsigned long crc32 = ~0L;\n  unsigned\
    \ long result;\n  unsigned char byte0,byte1,byte2,byte3;\n  for (i = 0; i < length;\
    \ i++){\n      CRC32C(crc32, buffer[i]);\n  }\n  result = ~crc32;\n  /*  result\
    \  now holds the negated polynomial remainder;\n   *  since the table and algorithm\
    \ is \"reflected\" [williams95].\n   *  That is,  result has the same value as\
    \ if we mapped the message\n   *  to a polynomial, computed the host-bit-order\
    \ polynomial\n   *  remainder, performed final negation, then did an end-for-end\n\
    \   *  bit-reversal.\n   *  Note that a 32-bit bit-reversal is identical to four\
    \ inplace\n   *  8-bit reversals followed by an end-for-end byteswap.\n   *  In\
    \ other words, the bytes of each bit are in the right order,\n   *  but the bytes\
    \ have been byteswapped.  So we now do an explicit\n   *  byteswap.  On a little-endian\
    \ machine, this byteswap and\n   *  the final ntohl cancel out and could be elided.\n\
    \   */\n  byte0 = result & 0xff;\n  byte1 = (result>>8) & 0xff;\n  byte2 = (result>>16)\
    \ & 0xff;\n  byte3 = (result>>24) & 0xff;\n  crc32 = ((byte0 << 24) |\n      \
    \     (byte1 << 16) |\n           (byte2 << 8)  |\n           byte3);\n  return\
    \ ( crc32 );\n}\nint\ninsert_crc32(unsigned char *buffer, unsigned int length)\n\
    {\n  SCTP_message *message;\n  unsigned long crc32;\n  message = (SCTP_message\
    \ *) buffer;\n  message->common_header.checksum = 0L;\n  crc32 = generate_crc32c(buffer,length);\n\
    \  /* and insert it into the message */\n  message->common_header.checksum = htonl(crc32);\n\
    \  return 1;\n}\nint\nvalidate_crc32(unsigned char *buffer, unsigned int length)\n\
    {\n  SCTP_message *message;\n  unsigned int i;\n  unsigned long original_crc32;\n\
    \  unsigned long crc32 = ~0L;\n  /* save and zero checksum */\n  message = (SCTP_message\
    \ *) buffer;\n  original_crc32 = ntohl(message->common_header.checksum);\n  message->common_header.checksum\
    \ = 0L;\n  crc32 = generate_crc32c(buffer,length);\n  return ((original_crc32\
    \ == crc32)? 1 : -1);\n}\nAuthors' Addresses\n   Jonathan Stone\n   Room 446,\
    \ Mail code 9040\n   Gates building 4A\n   Stanford, Ca 94305\n   EMail: jonathan@dsg.stanford.edu\n\
    \   Randall R. Stewart\n   24 Burning Bush Trail.\n   Crystal Lake, IL 60012\n\
    \   USA\n   EMail: rrs@cisco.com\n   Douglas Otis\n   800 E. Middlefield\n   Mountain\
    \ View, CA 94043\n   USA\n   EMail: dotis@sanlight.net\nFull Copyright Statement\n\
    \   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n   This\
    \ document and translations of it may be copied and furnished to\n   others, and\
    \ derivative works that comment on or otherwise explain it\n   or assist in its\
    \ implementation may be prepared, copied, published\n   and distributed, in whole\
    \ or in part, without restriction of any\n   kind, provided that the above copyright\
    \ notice and this paragraph are\n   included on all such copies and derivative\
    \ works.  However, this\n   document itself may not be modified in any way, such\
    \ as by removing\n   the copyright notice or references to the Internet Society\
    \ or other\n   Internet organizations, except as needed for the purpose of\n \
    \  developing Internet standards in which case the procedures for\n   copyrights\
    \ defined in the Internet Standards process must be\n   followed, or as required\
    \ to translate it into languages other than\n   English.\n   The limited permissions\
    \ granted above are perpetual and will not be\n   revoked by the Internet Society\
    \ or its successors or assigns.\n   This document and the information contained\
    \ herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY AND THE\
    \ INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,\
    \ INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n\
    \   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\nAcknowledgement\n   Funding for the RFC\
    \ Editor function is currently provided by the\n   Internet Society.\n"
