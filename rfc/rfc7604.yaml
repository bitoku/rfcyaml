- title: __initial_text__
  contents:
  - "            Comparison of Different NAT Traversal Techniques\n    for Media Controlled\
    \ by the Real-Time Streaming Protocol (RTSP)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes several Network Address Translator (NAT)\n\
    \   traversal techniques that were considered to be used for establishing\n  \
    \ the RTP media flows controlled by the Real-Time Streaming Protocol\n   (RTSP).\
    \  Each technique includes a description of how it would be\n   used, the security\
    \ implications of using it, and any other deployment\n   considerations it has.\
    \  There are also discussions on how NAT\n   traversal techniques relate to firewalls\
    \ and how each technique can\n   be applied in different use cases.  These findings\
    \ were used when\n   selecting the NAT traversal for RTSP 2.0, which is specified\
    \ in a\n   separate document.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7604.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Network Address Translators . . . . . . . . . . .\
    \ . . . .   5\n     1.2.  Firewalls . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   6\n     1.3.  Glossary  . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   7\n   2.  Detecting the Loss of NAT Mappings  . . . . . . . . . . . .\
    \ .   8\n   3.  Requirements on Solutions . . . . . . . . . . . . . . . . . .\
    \   9\n   4.  NAT-Traversal Techniques  . . . . . . . . . . . . . . . . . .  10\n\
    \     4.1.  Stand-Alone STUN  . . . . . . . . . . . . . . . . . . . .  11\n  \
    \     4.1.1.  Introduction  . . . . . . . . . . . . . . . . . . . .  11\n    \
    \   4.1.2.  Using STUN to Traverse NAT without Server\n               Modifications\
    \ . . . . . . . . . . . . . . . . . . . .  11\n       4.1.3.  ALG Considerations\
    \  . . . . . . . . . . . . . . . . .  14\n       4.1.4.  Deployment Considerations\
    \ . . . . . . . . . . . . . .  14\n       4.1.5.  Security Considerations . .\
    \ . . . . . . . . . . . . .  15\n     4.2.  Server Embedded STUN  . . . . . .\
    \ . . . . . . . . . . . .  16\n       4.2.1.  Introduction  . . . . . . . . .\
    \ . . . . . . . . . . .  16\n       4.2.2.  Embedding STUN in RTSP  . . . . .\
    \ . . . . . . . . . .  16\n       4.2.3.  Discussion on Co-located STUN Server\
    \  . . . . . . . .  17\n       4.2.4.  ALG Considerations  . . . . . . . . . .\
    \ . . . . . . .  17\n       4.2.5.  Deployment Considerations . . . . . . . .\
    \ . . . . . .  18\n       4.2.6.  Security Considerations . . . . . . . . . .\
    \ . . . . .  19\n     4.3.  ICE . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  19\n       4.3.1.  Introduction  . . . . . . . . . . . . . . . . .\
    \ . . .  19\n       4.3.2.  Using ICE in RTSP . . . . . . . . . . . . . . . .\
    \ . .  20\n       4.3.3.  Implementation Burden of ICE  . . . . . . . . . . .\
    \ .  21\n       4.3.4.  ALG Considerations  . . . . . . . . . . . . . . . . .\
    \  22\n       4.3.5.  Deployment Considerations . . . . . . . . . . . . . .  22\n\
    \       4.3.6.  Security Considerations . . . . . . . . . . . . . . .  23\n  \
    \   4.4.  Latching  . . . . . . . . . . . . . . . . . . . . . . . .  23\n    \
    \   4.4.1.  Introduction  . . . . . . . . . . . . . . . . . . . .  23\n      \
    \ 4.4.2.  Necessary RTSP Extensions . . . . . . . . . . . . . .  24\n       4.4.3.\
    \  ALG Considerations  . . . . . . . . . . . . . . . . .  25\n       4.4.4.  Deployment\
    \ Considerations . . . . . . . . . . . . . .  25\n       4.4.5.  Security Considerations\
    \ . . . . . . . . . . . . . . .  26\n     4.5.  A Variation to Latching . . .\
    \ . . . . . . . . . . . . . .  27\n       4.5.1.  Introduction  . . . . . . .\
    \ . . . . . . . . . . . . .  27\n       4.5.2.  Necessary RTSP Extensions . .\
    \ . . . . . . . . . . . .  28\n       4.5.3.  ALG Considerations  . . . . . .\
    \ . . . . . . . . . . .  28\n       4.5.4.  Deployment Considerations . . . .\
    \ . . . . . . . . . .  28\n       4.5.5.  Security Considerations . . . . . .\
    \ . . . . . . . . .  29\n     4.6.  Three-Way Latching  . . . . . . . . . . .\
    \ . . . . . . . .  29\n       4.6.1.  Introduction  . . . . . . . . . . . . .\
    \ . . . . . . .  29\n       4.6.2.  Necessary RTSP Extensions . . . . . . . .\
    \ . . . . . .  29\n       4.6.3.  ALG Considerations  . . . . . . . . . . . .\
    \ . . . . .  30\n       4.6.4.  Deployment Considerations . . . . . . . . . .\
    \ . . . .  30\n       4.6.5.  Security Considerations . . . . . . . . . . . .\
    \ . . .  30\n     4.7.  Application Level Gateways  . . . . . . . . . . . . .\
    \ . .  31\n       4.7.1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ .  31\n       4.7.2.  Outline on How ALGs for RTSP Work . . . . . . . . . .\
    \  31\n       4.7.3.  Deployment Considerations . . . . . . . . . . . . . .  32\n\
    \       4.7.4.  Security Considerations . . . . . . . . . . . . . . .  33\n  \
    \   4.8.  TCP Tunneling . . . . . . . . . . . . . . . . . . . . . .  33\n    \
    \   4.8.1.  Introduction  . . . . . . . . . . . . . . . . . . . .  33\n      \
    \ 4.8.2.  Usage of TCP Tunneling in RTSP  . . . . . . . . . . .  34\n       4.8.3.\
    \  ALG Considerations  . . . . . . . . . . . . . . . . .  34\n       4.8.4.  Deployment\
    \ Considerations . . . . . . . . . . . . . .  34\n       4.8.5.  Security Considerations\
    \ . . . . . . . . . . . . . . .  35\n     4.9.  Traversal Using Relays around\
    \ NAT (TURN)  . . . . . . . .  35\n       4.9.1.  Introduction  . . . . . . .\
    \ . . . . . . . . . . . . .  35\n       4.9.2.  Usage of TURN with RTSP . . .\
    \ . . . . . . . . . . . .  36\n       4.9.3.  ALG Considerations  . . . . . .\
    \ . . . . . . . . . . .  37\n       4.9.4.  Deployment Considerations . . . .\
    \ . . . . . . . . . .  37\n       4.9.5.  Security Considerations . . . . . .\
    \ . . . . . . . . .  37\n   5.  Firewalls . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  38\n   6.  Comparison of NAT Traversal Techniques  . . . .\
    \ . . . . . . .  39\n   7.  Security Considerations . . . . . . . . . . . . .\
    \ . . . . . .  41\n   8.  Informative References  . . . . . . . . . . . . . .\
    \ . . . . .  42\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  45\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . .\
    \ . . .  46\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Today there is a proliferating deployment of different types\
    \ of\n   Network Address Translator (NAT) boxes that in many cases only\n   loosely\
    \ follow standards [RFC3022] [RFC2663] [RFC3424] [RFC4787]\n   [RFC5382].  NATs\
    \ cause discontinuity in address realms [RFC3424];\n   therefore, an application\
    \ protocol, such as the Real-Time Streaming\n   Protocol (RTSP) [RFC2326] [RTSP],\
    \ needs to deal with such\n   discontinuities caused by NATs.  The problem is\
    \ that, being a media\n   control protocol managing one or more media streams,\
    \ RTSP carries\n   network address and port information within its protocol messages.\n\
    \   Because of this, even if RTSP itself, when carried over the\n   Transmission\
    \ Control Protocol (TCP) [RFC793], for example, is not\n   blocked by NATs, its\
    \ media streams may be blocked by NATs.  This will\n   occur unless special protocol\
    \ provisions are added to support NAT\n   traversal.\n   Like NATs, firewalls\
    \ are also middleboxes that need to be considered.\n   Firewalls help prevent\
    \ unwanted traffic from getting in or out of the\n   protected network.  RTSP\
    \ is designed such that a firewall can be\n   configured to let RTSP-controlled\
    \ media streams go through with\n   limited implementation effort.  The effort\
    \ needed is to implement an\n   Application Level Gateway (ALG) to interpret RTSP\
    \ parameters.  There\n   is also a large class of firewalls, commonly home firewalls,\
    \ that use\n   a filtering behavior that appears to be the same as what NATs have.\n\
    \   This type of firewall will be successfully traversed using the same\n   solution\
    \ as employed for NAT traversal, instead of relying on an RTSP\n   ALG.  Therefore,\
    \ firewalls will also be discussed and some important\n   differences highlighted.\n\
    \   This document describes several NAT traversal mechanisms for RTSP-\n   controlled\
    \ media streaming.  Many of these NAT solutions fall into\n   the category of\
    \ \"UNilateral Self-Address Fixing (UNSAF)\" as defined\n   in [RFC3424] and quoted\
    \ below:\n      [UNSAF] is a process whereby some originating process attempts\
    \ to\n      determine or fix the address (and port) by which it is known -\n \
    \     e.g.  to be able to use address data in the protocol exchange, or\n    \
    \  to advertise a public address from which it will receive\n      connections.\n\
    \   Following the guidelines spelled out in RFC 3424, we describe the\n   required\
    \ RTSP extensions for each method, transition strategies, and\n   security concerns.\
    \  The transition strategies are a discussion of how\n   and if the method encourages\
    \ a move towards not having any NATs on\n   the path.\n   This document is capturing\
    \ the evaluation done in the process to\n   recommend firewall/NAT traversal methods\
    \ for RTSP streaming servers\n   based on [RFC2326] as well as the RTSP 2.0 core\
    \ specification [RTSP].\n   The evaluation is focused on NAT traversal for the\
    \ media streams\n   carried over the User Datagram Protocol (UDP) [RFC768] with\
    \ RTP\n   [RFC3550] over UDP being the main case for such usage.  The findings\n\
    \   should be applicable to other protocols as long as they have similar\n   properties.\n\
    \   At the time when the bulk of work on this document was done, a single\n  \
    \ level of NAT was the dominant deployment for NATs, and multiple\n   levels of\
    \ NATs, including Carrier-Grade NATs (CGNs), were not\n   considered.  Thus, any\
    \ characterizations or findings may not be\n   applicable in such scenarios, unless\
    \ CGN or multiple levels of NATs\n   are explicitly noted.\n   An RTSP NAT traversal\
    \ mechanism based on Interactive Connectivity\n   Establishment (ICE) is specified\
    \ in \"A Network Address Translator\n   (NAT) Traversal Mechanism for Media Controlled\
    \ by Real-Time Streaming\n   Protocol (RTSP)\" [RTSP-NAT].\n"
- title: 1.1.  Network Address Translators
  contents:
  - "1.1.  Network Address Translators\n   We begin by reviewing two quotes from Section\
    \ 3 in \"Network Address\n   Translation (NAT) Behavioral Requirements for Unicast\
    \ UDP\" [RFC4787]\n   concerning NATs and their terminology:\n      Readers are\
    \ urged to refer to [RFC2663] for information on NAT\n      taxonomy and terminology.\
    \  Traditional NAT is the most common type\n      of NAT device deployed.  Readers\
    \ may refer to [RFC3022] for\n      detailed information on traditional NAT. \
    \ Traditional NAT has two\n      main varieties -- Basic NAT and Network Address/Port\
    \ Translator\n      (NAPT).\n      NAPT is by far the most commonly deployed NAT\
    \ device.  NAPT allows\n      multiple internal hosts to share a single public\
    \ IP address\n      simultaneously.  When an internal host opens an outgoing TCP\
    \ or\n      UDP session through a NAPT, the NAPT assigns the session a public\n\
    \      IP address and port number, so that subsequent response packets\n     \
    \ from the external endpoint can be received by the NAPT,\n      translated, and\
    \ forwarded to the internal host.  The effect is\n      that the NAPT establishes\
    \ a NAT session to translate the (private\n      IP address, private port number)\
    \ tuple to a (public IP address,\n      public port number) tuple, and vice versa,\
    \ for the duration of the\n      session.  An issue of relevance to peer-to-peer\
    \ applications is\n      how the NAT behaves when an internal host initiates multiple\n\
    \      simultaneous sessions from a single (private IP, private port)\n      endpoint\
    \ to multiple distinct endpoints on the external network.\n      In this specification,\
    \ the term \"NAT\" refers to both \"Basic NAT\"\n      and \"Network Address/Port\
    \ Translator (NAPT)\".\n      This document uses the term \"Address and Port Mapping\"\
    \ as the\n      translation between an external address and port and an internal\n\
    \      address and port.  Note that this is not the same as an \"address\n   \
    \   binding\" as defined in RFC 2663.\n      Note: In the above text, it would\
    \ be more correct to use an\n      external IP address instead of a public IP\
    \ address.  The external\n      IP address is commonly a public one, but it might\
    \ be of another\n      type if the NAT's external side is in a private address\
    \ domain.\n   In addition to the above quote, there exists a number of address\
    \ and\n   port mapping behaviors described in more detail in Section 4.1 of\n\
    \   [RFC4787] that are highly relevant to the discussion in this\n   document.\n\
    \   NATs also have a filtering behavior on traffic arriving on the\n   external\
    \ side.  Such behavior affects how well different methods for\n   NAT traversal\
    \ works through these NATs.  See Section 5 of [RFC4787]\n   for more information\
    \ on the different types of filtering that have\n   been identified.\n"
- title: 1.2.  Firewalls
  contents:
  - "1.2.  Firewalls\n   A firewall is a security gateway that enforces certain access\
    \ control\n   policies between two network administrative domains: a private domain\n\
    \   (intranet) and an external domain, e.g., the Internet.  Many\n   organizations\
    \ use firewalls to prevent intrusions and malicious\n   attacks on computing resources\
    \ in the private intranet [RFC2588].\n   A comparison between NAT and a firewall\
    \ is given below:\n   1.  A firewall sits at security enforcement/protection points,\
    \ while\n       NAT sits at borders between two address domains.\n   2.  NAT does\
    \ not in itself provide security, although some access\n       control policies\
    \ can be implemented using address translation\n       schemes.  The inherent\
    \ filtering behaviors are commonly mistaken\n       for real security policies.\n\
    \   It should be noted that many NAT devices intended for Residential or\n   Small\
    \ Office, Home Office (SOHO) use include both NATs and firewall\n   functionality.\n"
- title: 1.3.  Glossary
  contents:
  - "1.3.  Glossary\n   Address-Dependent Mapping:  The NAT reuses the port mapping\
    \ for\n         subsequent packets sent from the same internal IP address and\n\
    \         port to the same external IP address, regardless of the\n         external\
    \ port; see [RFC4787].\n   Address and Port-Dependent Mapping:  The NAT reuses\
    \ the port mapping\n         for subsequent packets sent from the same internal\
    \ IP address\n         and port to the same external IP address and port while\
    \ the\n         mapping is still active; see [RFC4787].\n   ALG:  Application\
    \ Level Gateway is an entity that can be embedded in\n         a NAT or other\
    \ middlebox to perform the application layer\n         functions required for\
    \ a particular protocol to traverse the\n         NAT/middlebox.\n   Endpoint-Independent\
    \ Mapping:  The NAT reuses the port mapping for\n         subsequent packets sent\
    \ from the same internal IP address and\n         port to any external IP address\
    \ and port; see [RFC4787].\n   ICE:  Interactive Connectivity Establishment; see\
    \ [RFC5245].\n   DNS:  Domain Name Service\n   DoS:  Denial of Service\n   DDoS:\
    \ Distributed Denial of Service\n   NAT:  Network Address Translator; see [RFC3022].\n\
    \   NAPT: Network Address/Port Translator; see [RFC3022].\n   RTP:  Real-Time\
    \ Transport Protocol; see [RFC3550].\n   RTSP: Real-Time Streaming Protocol; see\
    \ [RFC2326] and [RTSP].\n   RTT:  Round Trip Times\n   SDP:  Session Description\
    \ Protocol; see [RFC4566].\n   SSRC: Synchronization source in RTP; see [RFC3550].\n"
- title: 2.  Detecting the Loss of NAT Mappings
  contents:
  - "2.  Detecting the Loss of NAT Mappings\n   Several NAT traversal techniques in\
    \ the next chapter make use of the\n   fact that the NAT UDP mapping's external\
    \ address and port can be\n   discovered.  This information is then utilized to\
    \ traverse the NAT\n   box.  However, any such information is only good while\
    \ the mapping is\n   still valid.  As the IAB's UNSAF document [RFC3424] points\
    \ out, the\n   mapping can either timeout or change its properties.  It is therefore\n\
    \   important for the NAT traversal solutions to handle the loss or\n   change\
    \ of NAT mappings, according to RFC 3424.\n   First, since NATs may also dynamically\
    \ reclaim or readjust address/\n   port translations, \"keep-alive\" and periodic\
    \ repolling may be\n   required according to RFC 3424.  Second, it is possible\
    \ to detect and\n   recover from the situation where the mapping has been changed\
    \ or\n   removed.  The loss of a mapping can be detected when no traffic\n   arrives\
    \ for a while.  Below we will give some recommendations on how\n   to detect the\
    \ loss of NAT mappings when using RTP/RTCP under RTSP\n   control.\n   An RTP\
    \ session normally has both RTP and RTCP streams.  The loss of\n   an RTP mapping\
    \ can only be detected when expected traffic does not\n   arrive.  If a client\
    \ does not receive media data within a few seconds\n   after having received the\
    \ \"200 OK\" response to an RTSP PLAY request\n   that starts the media delivery,\
    \ it may be the result of a middlebox\n   blocking the traffic.  However, for\
    \ a receiver to be more certain to\n   detect the case where no RTP traffic was\
    \ delivered due to NAT\n   trouble, one should monitor the RTCP Sender reports\
    \ if they are\n   received and not also blocked.  The sender report carries a\
    \ field\n   telling how many packets the server has sent.  If that has increased\n\
    \   and no RTP packets have arrived for a few seconds, it is likely the\n   mapping\
    \ for the RTP stream has been removed.\n   The loss of mapping for RTCP is simpler\
    \ to detect.  RTCP is normally\n   sent periodically in each direction, even during\
    \ the RTSP ready\n   state.  If RTCP packets are missing for several RTCP intervals,\
    \ the\n   mapping is likely lost.  Note that if neither RTCP packets nor RTSP\n\
    \   messages are received by the RTSP server for a while (default 60\n   seconds),\
    \ the RTSP server has the option to delete the corresponding\n   RTP session,\
    \ SSRC and RTSP session ID, because either the client can\n   not get through\
    \ a middlebox NAT/firewall, or the client is\n   malfunctioning.\n"
- title: 3.  Requirements on Solutions
  contents:
  - "3.  Requirements on Solutions\n   This section considers the set of requirements\
    \ for the evaluation of\n   RTSP NAT traversal solutions.\n   RTSP is a client-server\
    \ protocol.  Typically, service providers\n   deploy RTSP servers on the Internet\
    \ or otherwise reachable address\n   realm.  However, there are use cases where\
    \ the reverse is true: RTSP\n   clients are connecting from any address realm\
    \ to RTSP servers behind\n   NATs, e.g., in a home.  This is the case, for instance,\
    \ when home\n   surveillance cameras running as RTSP servers intend to stream\
    \ video\n   to cell phone users in the public address realm through a home NAT.\n\
    \   In terms of requirements, the primary issue to solve is the RTSP NAT\n   traversal\
    \ problem for RTSP servers deployed in a network where the\n   server is on the\
    \ external side of any NAT, i.e., the server is not\n   behind a NAT.  The server\
    \ behind a NAT is desirable but of much lower\n   priority.\n   Important considerations\
    \ for any NAT traversal technique are whether\n   any protocol modifications are\
    \ needed and where the implementation\n   burden resides (e.g., server, client,\
    \ or middlebox).  If the\n   incentive to get RTSP to work over a NAT is sufficient,\
    \ it will\n   motivate the owner of the server, client, or middlebox to update,\n\
    \   configure, or otherwise perform changes to the device and its\n   software\
    \ in order to support NAT traversal.  Thus, the questions of\n   who this burden\
    \ falls on and how big it is are highly relevant.\n   The list of feature requirements\
    \ for RTSP NAT solutions are given\n   below:\n   1.  Must work for all flavors\
    \ of NATs, including NATs with Address\n       and Port-Dependent Filtering.\n\
    \   2.  Must work for firewalls (subject to pertinent firewall\n       administrative\
    \ policies), including those with ALGs.\n   3.  Should have minimal impact on\
    \ clients not behind NATs and that\n       are not dual hosted.  RTSP dual hosting\
    \ means that the RTSP\n       signaling protocol and the media protocol (e.g.,\
    \ RTP) are\n       implemented on different computers with different IP addresses.\n\
    \       *  For instance, no extra protocol RTT before arrival of media.\n   4.\
    \  Should be simple to use/implement/administer so people actually\n       turn\
    \ them on.\n       *  Discovery of the address(es) assigned by NAT should happen\n\
    \          automatically, if possible.\n   5.  Should authenticate dual-hosted\
    \ client's media transport receiver\n       to prevent usage of RTSP servers for\
    \ DDoS attacks.\n   The last requirement addresses the Distributed Denial-of-Service\n\
    \   (DDoS) threat, which relates to NAT traversal as explained below.\n   During\
    \ NAT traversal, when the RTSP server determines the media\n   destination (address\
    \ and port) for the client, the result may be that\n   the IP address of the RTP\
    \ receiver host is different than the IP\n   address of the RTSP client host.\
    \  This poses a DDoS threat that has\n   significant amplification potentials\
    \ because the RTP media streams in\n   general consist of a large number of IP\
    \ packets.  DDoS attacks can\n   occur if the attacker can fake the messages in\
    \ the NAT traversal\n   mechanism to trick the RTSP server into believing that\
    \ the client's\n   RTP receiver is located on a host to be attacked.  For example,\
    \ user\n   A may use his RTSP client to direct the RTSP server to send video RTP\n\
    \   streams to target.example.com in order to degrade the services\n   provided\
    \ by target.example.com.\n   Note that a simple mitigation is for the RTSP server\
    \ to disallow the\n   cases where the client's RTP receiver has a different IP\
    \ address than\n   that of the RTSP client.  This is recommended behavior in RTSP\
    \ 2.0\n   unless other solutions to prevent this attack are present; see\n   Section\
    \ 21.2.1 in [RTSP].  With the increased deployment of NAT\n   middleboxes by operators,\
    \ i.e., CGN, the reuse of an IP address on\n   the NAT's external side by many\
    \ customers reduces the protection\n   provided.  Also in some applications (e.g.,\
    \ centralized\n   conferencing), dual-hosted RTSP/RTP clients have valid use cases.\n\
    \   The key is how to authenticate the messages exchanged during the NAT\n   traversal\
    \ process.\n"
- title: 4.  NAT-Traversal Techniques
  contents:
  - "4.  NAT-Traversal Techniques\n   There exists a number of potential NAT traversal\
    \ techniques that can\n   be used to allow RTSP to traverse NATs.  They have different\
    \ features\n   and are applicable to different topologies; their costs are also\n\
    \   different.  They also vary in security levels.  In the following\n   sections,\
    \ each technique is outlined with discussions on the\n   corresponding advantages\
    \ and disadvantages.\n   The survey of traversal techniques was done prior to\
    \ 2007 and is\n   based on what was available then.  This section includes NAT\n\
    \   traversal techniques that have not been formally specified anywhere\n   else.\
    \  This document may be the only publicly available specification\n   of some\
    \ of the NAT traversal techniques.  However, that is not a real\n   barrier against\
    \ doing an evaluation of the NAT traversal techniques.\n   Some techniques used\
    \ as part of some of the traversal solutions have\n   been recommended against\
    \ or are no longer possible due to the outcome\n   of standardization work or\
    \ their failure to progress within IETF\n   after the initial evaluation in this\
    \ document.  For example, RTP\n   No-Op [RTP-NO-OP] was a proposed RTP payload\
    \ format that failed to be\n   specified; thus, it is not available for use today.\
    \  In each such\n   case, the missing parts will be noted and some basic reasons\
    \ will be\n   given.\n"
- title: 4.1.  Stand-Alone STUN
  contents:
  - '4.1.  Stand-Alone STUN

    '
- title: 4.1.1.  Introduction
  contents:
  - "4.1.1.  Introduction\n   Session Traversal Utilities for NAT (STUN) [RFC5389]\
    \ is a\n   standardized protocol that allows a client to use secure means to\n\
    \   discover the presence of a NAT between itself and the STUN server.\n   The\
    \ client uses the STUN server to discover the address and port\n   mappings assigned\
    \ by the NAT.  Then using the knowledge of these NAT\n   mappings, it uses the\
    \ external addresses to directly connect to the\n   independent RTSP server. \
    \ However, this is only possible if the NAT\n   address and port mapping behavior\
    \ is such that the STUN server and\n   RTSP server will see the same external\
    \ address and port for the same\n   internal address and port.\n   STUN is a client-server\
    \ protocol.  The STUN client sends a request to\n   a STUN server and the server\
    \ returns a response.  There are two types\n   of STUN messages -- Binding Requests\
    \ and Indications.  Binding\n   Requests are used when determining a client's\
    \ external address and\n   soliciting a response from the STUN server with the\
    \ seen address.\n   Indications are used by the client for keep-alive messages\
    \ towards\n   the server and requires no response from the server.\n   The first\
    \ version of STUN [RFC3489] included categorization and\n   parameterization of\
    \ NATs.  This was abandoned in the updated version\n   [RFC5389] due to it being\
    \ unreliable and brittle.  This particular\n   traversal method uses the removed\
    \ functionality described in RFC 3489\n   to detect the NAT type to give an early\
    \ failure indication when the\n   NAT is showing the behavior that this method\
    \ can't support.  This\n   method also suggests using the RTP No-Op payload format\
    \ [RTP-NO-OP]\n   for keep-alives of the RTP traffic in the client-to-server direction.\n\
    \   This can be replaced with another form of UDP packet as will be\n   further\
    \ discussed below.\n"
- title: 4.1.2.  Using STUN to Traverse NAT without Server Modifications
  contents:
  - "4.1.2.  Using STUN to Traverse NAT without Server Modifications\n   This section\
    \ describes how a client can use STUN to traverse NATs to\n   RTSP servers without\
    \ requiring server modifications.  Note that this\n   method has limited applicability\
    \ and requires the server to be\n   available in the external/public address realm\
    \ in regards to the\n   client located behind a NAT(s).\n   Limitations:\n   o\
    \  The server must be located in either a public address realm or the\n      next-hop\
    \ external address realm in regards to the client.\n   o  The client may only\
    \ be located behind NATs that perform Endpoint-\n      Independent or Address-Dependent\
    \ Mappings (the STUN server and\n      RTSP server on the same IP address).  Clients\
    \ behind NATs that do\n      Address and Port-Dependent Mappings cannot use this\
    \ method.  See\n      [RFC4787] for the full definition of these terms.\n   o\
    \  Based on the discontinued middlebox classification of the replaced\n      STUN\
    \ specification [RFC3489]; thus, it is brittle and unreliable.\n   Method:\n \
    \  An RTSP client using RTP transport over UDP can use STUN to traverse\n   a\
    \ NAT(s) in the following way:\n   1.  Use STUN to try to discover the type of\
    \ NAT and the timeout\n       period for any UDP mapping on the NAT.  This is\
    \ recommended to be\n       performed in the background as soon as IP connectivity\
    \ is\n       established.  If this is performed prior to establishing a\n    \
    \   streaming session, the delays in the session establishment will\n       be\
    \ reduced.  If no NAT is detected, normal SETUP should be used.\n   2.  The RTSP\
    \ client determines the number of UDP ports needed by\n       counting the number\
    \ of needed media transport protocols sessions\n       in the multimedia presentation.\
    \  This information is available in\n       the media description protocol, e.g.,\
    \ SDP [RFC4566].  For\n       example, each RTP session will in general require\
    \ two UDP ports:\n       one for RTP, and one for RTCP.\n   3.  For each UDP port\
    \ required, establish a mapping and discover the\n       public/external IP address\
    \ and port number with the help of the\n       STUN server.  A successful mapping\
    \ looks like: client's local\n       address/port <-> public address/port.\n \
    \  4.  Perform the RTSP SETUP for each media.  In the Transport header,\n    \
    \   the following parameter should be included with the given values:\n      \
    \ \"dest_addr\" [RTSP] or \"destination\" + \"client_port\" [RFC2326]\n      \
    \ with the public/external IP address and port pair for both RTP\n       and RTCP.\
    \  To be certain that this works, servers must allow a\n       client to set up\
    \ the RTP stream on any port, not only even ports\n       and with non-contiguous\
    \ port numbers for RTP and RTCP.  This\n       requires the new feature provided\
    \ in RTSP 2.0 [RTSP].  The server\n       should respond with a Transport header\
    \ containing an \"src_addr\"\n       or \"source\" + \"server_port\" parameters\
    \ with the RTP and RTCP\n       source IP address and port of the media stream.\n\
    \   5.  To keep the mappings alive, the client should periodically send\n    \
    \   UDP traffic over all mappings needed for the session.  For the\n       mapping\
    \ carrying RTCP traffic, the periodic RTCP traffic is\n       likely enough. \
    \ For mappings carrying RTP traffic and for\n       mappings carrying RTCP packets\
    \ at too low of a frequency, keep-\n       alive messages should be sent.\n  \
    \ If a UDP mapping is lost, the above discovery process must be\n   repeated.\
    \  The media stream also needs to be SETUP again to change\n   the transport parameters\
    \ to the new ones.  This will cause a glitch\n   in media playback.\n   To allow\
    \ UDP packets to arrive from the server to a client behind an\n   Address-Dependent\
    \ or Address and Port-Dependent Filtering NAT, the\n   client must first send\
    \ a UDP packet to establish the filtering state\n   in the NAT.  The client, before\
    \ sending an RTSP PLAY request, must\n   send a so-called hole-punching packet\
    \ on each mapping to the IP\n   address and port given as the server's source\
    \ address and port.  For\n   a NAT that only is Address-Dependent Filtering, the\
    \ hole-punching\n   packet could be sent to the server's discard port (port number\
    \ 9).\n   For Address and Port-Dependent Filtering NATs, the hole-punching\n \
    \  packet must go to the port used for sending UDP packets to the\n   client.\
    \  To be able to do that, the server needs to include the\n   \"src_addr\" in\
    \ the Transport header (which is the \"source\" transport\n   parameter in RFC2326).\
    \  Since UDP packets are inherently unreliable,\n   to ensure that at least one\
    \ UDP message passes the NAT, hole-punching\n   packets should be retransmitted\
    \ a reasonable number of times.\n   One could have used RTP No-Op packets [RTP-NO-OP]\
    \ as hole-punching\n   and keep-alive messages had they been defined.  That would\
    \ have\n   ensured that the traffic would look like RTP and thus would likely\n\
    \   have the least risk of being dropped by any firewall.  The drawback\n   of\
    \ using RTP No-Op is that the payload type number must be\n   dynamically assigned\
    \ through RTSP first.  Other options are STUN, an\n   RTP packet without any payload,\
    \ or a UDP packet without any payload.\n   For RTCP it is most suitable to use\
    \ correctly generated RTCP packets.\n   In general, sending unsolicited traffic\
    \ to the RTSP server may\n   trigger security functions resulting in the blocking\
    \ of the keep-\n   alive messages or termination of the RTSP session itself.\n\
    \   This method is further brittle as it doesn't support Address and\n   Port-Dependent\
    \ Mappings.  Thus, it proposes to use the old STUN\n   methods to classify the\
    \ NAT behavior, thus enabling early error\n   indication.  This is strictly not\
    \ required but will lead to failures\n   during setup when the NAT has the wrong\
    \ behavior.  This failure can\n   also occur if the NAT changes the properties\
    \ of the existing mapping\n   and filtering state or between the classification\
    \ message exchange\n   and the actual RTSP session setup, for example, due to\
    \ load.\n"
- title: 4.1.3.  ALG Considerations
  contents:
  - "4.1.3.  ALG Considerations\n   If a NAT supports RTSP ALG (Application Level\
    \ Gateway) and is not\n   aware of the STUN traversal option, service failure\
    \ may happen,\n   because a client discovers its NAT external IP address and port\n\
    \   numbers and inserts them in its SETUP requests.  When the RTSP ALG\n   processes\
    \ the SETUP request, it may change the destination and port\n   number, resulting\
    \ in unpredictable behavior.  An ALG should not\n   update address fields that\
    \ contain addresses other than the NAT's\n   internal address domain.  In cases\
    \ where the ALG modifies fields\n   unnecessarily, two alternatives exist:\n \
    \  1.  Use Transport Layer Security (TLS) to encrypt the data over the\n     \
    \  RTSP TCP connection to prevent the ALG from reading and modifying\n       the\
    \ RTSP messages.\n   2.  Turn off the STUN-based NAT traversal mechanism.\n  \
    \ As it may be difficult to determine why the failure occurs, the usage\n   of\
    \ TLS-protected RTSP message exchange at all times would avoid this\n   issue.\n"
- title: 4.1.4.  Deployment Considerations
  contents:
  - "4.1.4.  Deployment Considerations\n   For the stand-alone usage of STUN, the\
    \ following applies:\n   Advantages:\n   o  STUN is a solution first used by applications\
    \ based on SIP\n      [RFC3261] (see Sections 1 and 2 of [RFC5389]).  As shown\
    \ above,\n      with little or no changes, the RTSP application can reuse STUN\
    \ as\n      a NAT traversal solution, avoiding the pitfall of solving a\n    \
    \  problem twice.\n   o  Using STUN does not require RTSP server modifications,\
    \ assuming it\n      is a server that is compliant with RTSP 2.0; it only affects\
    \ the\n      client implementation.\n   Disadvantages:\n   o  Requires a STUN\
    \ server deployed in the same address domain as the\n      server.\n   o  Only\
    \ works with NATs that perform Endpoint-Independent and\n      Address-Dependent\
    \ Mappings.  Address and Port-Dependent Filtering\n      NATs create some issues.\n\
    \   o  Brittle to NATs changing the properties of the NAT mapping and\n      filtering.\n\
    \   o  Does not work with Address and Port-Dependent Mapping NATs without\n  \
    \    server modifications.\n   o  Will not work if a NAT uses multiple IP addresses,\
    \ since RTSP\n      servers generally require all media streams to use the same\
    \ IP as\n      used in the RTSP connection to prevent becoming a DDoS tool.\n\
    \   o  Interaction problems exist when an RTSP-aware ALG interferes with\n   \
    \   the use of STUN for NAT traversal unless TLS-secured RTSP message\n      exchange\
    \ is used.\n   o  Using STUN requires that RTSP servers and clients support the\n\
    \      updated RTSP specification [RTSP], because it is no longer\n      possible\
    \ to guarantee that RTP and RTCP ports are adjacent to each\n      other, as required\
    \ by the \"client_port\" and \"server_port\"\n      parameters in RFC 2326.\n\
    \   Transition:\n   The usage of STUN can be phased out gradually as the first\
    \ step of a\n   STUN-capable server or client should be to check the presence\
    \ of\n   NATs.  The removal of STUN capability in the client implementations\n\
    \   will have to wait until there is absolutely no need to use STUN.\n"
- title: 4.1.5.  Security Considerations
  contents:
  - "4.1.5.  Security Considerations\n   To prevent the RTSP server from being used\
    \ as Denial-of-Service (DoS)\n   attack tools, the RTSP Transport header parameters\
    \ \"destination\" and\n   \"dest_addr\" are generally not allowed to point to\
    \ any IP address\n   other than the one the RTSP message originates from.  The\
    \ RTSP server\n   is only prepared to make an exception to this rule when the\
    \ client is\n   trusted (e.g., through the use of a secure authentication process\
    \ or\n   through some secure method of challenging the destination to verify\n\
    \   its willingness to accept the RTP traffic).  Such a restriction means\n  \
    \ that STUN in general does not work for use cases where RTSP and media\n   transport\
    \ go to different addresses.\n   STUN combined with RTSP that is restricted by\
    \ destination address has\n   the same security properties as the core RTSP. \
    \ It is protected from\n   being used as a DoS attack tool unless the attacker\
    \ has the ability\n   to spoof the TCP connection carrying RTSP messages.\n  \
    \ Using STUN's support for message authentication and the secure\n   transport\
    \ of RTSP messages, attackers cannot modify STUN responses or\n   RTSP messages\
    \ (TLS) to change the media destination.  This protects\n   against hijacking;\
    \ however, as a client can be the initiator of an\n   attack, these mechanisms\
    \ cannot securely prevent RTSP servers from\n   being used as DoS attack tools.\n"
- title: 4.2.  Server Embedded STUN
  contents:
  - '4.2.  Server Embedded STUN

    '
- title: 4.2.1.  Introduction
  contents:
  - "4.2.1.  Introduction\n   This section describes an alternative to the stand-alone\
    \ STUN usage\n   in the previous section that has quite significantly different\n\
    \   behavior.\n"
- title: 4.2.2.  Embedding STUN in RTSP
  contents:
  - "4.2.2.  Embedding STUN in RTSP\n   This section outlines the adaptation and embedding\
    \ of STUN within\n   RTSP.  This enables STUN to be used to traverse any type\
    \ of NAT,\n   including Address and Port-Dependent Mapping NATs.  This would\n\
    \   require RTSP-level protocol changes.\n   This NAT traversal solution has limitations:\n\
    \   1.  It does not work if both the RTSP client and RTSP server are\n       behind\
    \ separate NATs.\n   2.  The RTSP server may, for security reasons, refuse to\
    \ send media\n       streams to an IP that is different from the IP in the client\
    \ RTSP\n       requests.\n   Deviations from STUN as defined in RFC 5389:\n  \
    \ 1.  The RTSP application must provision the client with an identity\n      \
    \ and shared secret to use in the STUN authentication;\n   2.  We require the\
    \ STUN server to be co-located on the RTSP server's\n       media source ports.\n\
    \   If the STUN server is co-located with the RTSP server's media source\n   port,\
    \ an RTSP client using RTP transport over UDP can use STUN to\n   traverse ALL\
    \ types of NATs.  In the case of Address and Port-\n   Dependent Mapping NATs,\
    \ the party on the inside of the NAT must\n   initiate UDP traffic.  The STUN\
    \ Binding Request, being a UDP packet\n   itself, can serve as the traffic initiating\
    \ packet.  Subsequently,\n   both the STUN Binding Response packets and the RTP/RTCP\
    \ packets can\n   traverse the NAT, regardless of whether the RTSP server or the\
    \ RTSP\n   client is behind NAT (however, only one of them can be behind a NAT).\n\
    \   Likewise, if an RTSP server is behind a NAT, then an embedded STUN\n   server\
    \ must be co-located on the RTSP client's RTCP port.  Also, it\n   will become\
    \ the client that needs to disclose his destination address\n   rather than the\
    \ server, so the server can correctly determine its NAT\n   external source address\
    \ for the media streams.  In this case, we\n   assume that the client has some\
    \ means of establishing a TCP\n   connection to the RTSP server behind NAT so\
    \ as to exchange RTSP\n   messages with the RTSP server, potentially using a proxy\
    \ or static\n   rules.\n   To minimize delay, we require that the RTSP server\
    \ supporting this\n   option must inform the client about the RTP and RTCP ports\
    \ from where\n   the server will send out RTP and RTCP packets, respectively.\
    \  This\n   can be done by using the \"server_port\" parameter in RFC 2326 and\
    \ the\n   \"src_addr\" parameter in [RTSP].  Both are in the RTSP Transport\n\
    \   header.  But in general, this strategy will require that one first\n   does\
    \ one SETUP request per media to learn the server ports, then\n   perform the\
    \ STUN checks, followed by a subsequent SETUP to change the\n   client port and\
    \ destination address to what was learned during the\n   STUN checks.\n   To be\
    \ certain that RTCP works correctly, the RTSP endpoint (server or\n   client)\
    \ will be required to send and receive RTCP packets from the\n   same port.\n"
- title: 4.2.3.  Discussion on Co-located STUN Server
  contents:
  - "4.2.3.  Discussion on Co-located STUN Server\n   In order to use STUN to traverse\
    \ Address and Port-Dependent Filtering\n   or Mapping NATs, the STUN server needs\
    \ to be co-located with the\n   streaming server media output ports.  This creates\
    \ a demultiplexing\n   problem: we must be able to differentiate a STUN packet\
    \ from a media\n   packet.  This will be done based on heuristics.  The existing\
    \ STUN\n   heuristics is the first byte in the packet and the Magic Cookie field\n\
    \   (added in RFC 5389), which works fine between STUN and RTP or RTCP\n   where\
    \ the first byte happens to be different.  Thanks to the Magic\n   Cookie field,\
    \ it is unlikely that other protocols would be mistaken\n   for a STUN packet,\
    \ but this is not assured.  For more discussion of\n   this, please see Section\
    \ 5.1.2 of [RFC5764].\n"
- title: 4.2.4.  ALG Considerations
  contents:
  - "4.2.4.  ALG Considerations\n   The same ALG traversal considerations as for stand-alone\
    \ STUN applies\n   (Section 4.1.3).\n"
- title: 4.2.5.  Deployment Considerations
  contents:
  - "4.2.5.  Deployment Considerations\n   For the \"Embedded STUN\" method the following\
    \ applies:\n   Advantages:\n   o  STUN is a solution first used by SIP applications.\
    \  As shown\n      above, with little or no changes, the RTSP application can\
    \ reuse\n      STUN as a NAT traversal solution, avoiding the pitfall of solving\n\
    \      a problem twice.\n   o  STUN has built-in message authentication features,\
    \ which makes it\n      more secure against hijacking attacks.  See the next section\
    \ for\n      an in-depth security discussion.\n   o  This solution works as long\
    \ as there is only one RTSP endpoint in\n      the private address realm, regardless\
    \ of the NAT's type.  There\n      may even be multiple NATs (see Figure 1 in\
    \ [RFC5389]).\n   o  Compared to other UDP-based NAT traversal methods in this\n\
    \      document, STUN requires little new protocol development (since\n      STUN\
    \ is already an IETF standard), and most likely less\n      implementation effort,\
    \ since open source STUN server and client\n      implementations are available\
    \ [STUN-IMPL] [PJNATH].\n   Disadvantages:\n   o  Some extensions to the RTSP\
    \ core protocol, likely signaled by RTSP\n      feature tags, must be introduced.\n\
    \   o  Requires an embedded STUN server to be co-located on each of the\n    \
    \  RTSP server's media protocol's ports (e.g., RTP and RTCP ports),\n      which\
    \ means more processing is required to demultiplex STUN\n      packets from media\
    \ packets.  For example, the demultiplexer must\n      be able to differentiate\
    \ an RTCP RR packet from a STUN packet and\n      forward the former to the streaming\
    \ server and the latter to the\n      STUN server.\n   o  Does not support use\
    \ cases that require the RTSP connection and\n      the media reception to happen\
    \ at different addresses, unless the\n      server's security policy is relaxed.\n\
    \   o  Interaction problems exist when an RTSP ALG is not aware of STUN\n    \
    \  unless TLS is used to protect the RTSP messages.\n   o  Using STUN requires\
    \ that RTSP servers and clients support the\n      updated RTSP specification\
    \ [RTSP], and they both agree to support\n      the NAT traversal feature.\n \
    \  o  Increases the setup delay with at least the amount of time it\n      takes\
    \ to perform STUN message exchanges.  Most likely an extra\n      SETUP sequence\
    \ will be required.\n   Transition:\n   The usage of STUN can be phased out gradually\
    \ as the first step of a\n   STUN-capable machine can be used to check the presence\
    \ of NATs for\n   the presently used network connection.  The removal of STUN\n\
    \   capability in the client implementations will have to wait until\n   there\
    \ is absolutely no need to use STUN, i.e., no NATs or firewalls.\n"
- title: 4.2.6.  Security Considerations
  contents:
  - "4.2.6.  Security Considerations\n   See Stand-Alone STUN (Section 4.1.5).\n"
- title: 4.3.  ICE
  contents:
  - '4.3.  ICE

    '
- title: 4.3.1.  Introduction
  contents:
  - "4.3.1.  Introduction\n   Interactive Connectivity Establishment (ICE) [RFC5245]\
    \ is a\n   methodology for NAT traversal that has been developed for SIP using\n\
    \   SDP offer/answer.  The basic idea is to try, in a staggered parallel\n   fashion,\
    \ all possible connection addresses in which an endpoint may\n   be reached. \
    \ This allows the endpoint to use the best available UDP\n   \"connection\" (meaning\
    \ two UDP endpoints capable of reaching each\n   other).  The methodology has\
    \ very nice properties in that basically\n   all NAT topologies are possible to\
    \ traverse.\n   Here is how ICE works at a high level.  Endpoint A collects all\n\
    \   possible addresses that can be used, including local IP addresses,\n   STUN-derived\
    \ addresses, Traversal Using Relay NAT (TURN) addresses,\n   etc.  On each local\
    \ port that any of these address and port pairs\n   lead to, a STUN server is\
    \ installed.  This STUN server only accepts\n   STUN requests using the correct\
    \ authentication through the use of a\n   username and password.\n   Endpoint\
    \ A then sends a request to establish connectivity with\n   endpoint B, which\
    \ includes all possible \"destinations\" [RFC5245] to\n   get the media through\
    \ to A.  Note that each of A's local address/port\n   pairs (host candidates and\
    \ server reflexive base) has a co-located\n   STUN server.  B in turn provides\
    \ A with all its possible destinations\n   for the different media streams.  A\
    \ and B then uses a STUN client to\n   try to reach all the address and port pairs\
    \ specified by A from its\n   corresponding destination ports.  The destinations\
    \ for which the STUN\n   requests successfully complete are then indicated and\
    \ one is\n   selected.\n   If B fails to get any STUN response from A, all hope\
    \ is not lost.\n   Certain NAT topologies require multiple tries from both ends\
    \ before\n   successful connectivity is accomplished; therefore, requests are\n\
    \   retransmitted multiple times.  The STUN requests may also result in\n   more\
    \ connectivity alternatives (destinations) being discovered and\n   conveyed in\
    \ the STUN responses.\n"
- title: 4.3.2.  Using ICE in RTSP
  contents:
  - "4.3.2.  Using ICE in RTSP\n   The usage of ICE for RTSP requires that both client\
    \ and server be\n   updated to include the ICE functionality.  If both parties\
    \ implement\n   the necessary functionality, the following steps could provide\
    \ ICE\n   support for RTSP.\n   This assumes that it is possible to establish\
    \ a TCP connection for\n   the RTSP messages between the client and the server.\
    \  This is not\n   trivial in scenarios where the server is located behind a NAT,\
    \ and\n   may require some TCP ports be opened, or proxies are deployed, etc.\n\
    \   The negotiation of ICE in RTSP of necessity will work different than\n   in\
    \ SIP with SDP offer/answer.  The protocol interactions are\n   different, and\
    \ thus the possibilities for transfer of states are also\n   somewhat different.\
    \  The goal is also to avoid introducing extra\n   delay in the setup process\
    \ at least for when the server is not behind\n   a NAT in regards to the client,\
    \ and the client is either having an\n   address in the same address domain or\
    \ is behind the NAT(s), which can\n   address the address domain of the server.\
    \  This process is only\n   intended to support PLAY mode, i.e., media traffic\
    \ flows from server\n   to client.\n   1.  ICE usage begins in the SDP.  The SDP\
    \ for the service indicates\n       that ICE is supported at the server.  No candidates\
    \ can be given\n       here as that would not work with on demand, DNS load balancing,\n\
    \       etc., which have the SDP indicate a resource on a server park\n      \
    \ rather than a specific machine.\n   2.  The client gathers addresses and puts\
    \ together its candidates for\n       each media stream indicated in the session\
    \ description.\n   3.  In each SETUP request, the client includes its candidates\
    \ in an\n       ICE-specific transport specification.  For the server, this\n\
    \       indicates the ICE support by the client.  One candidate is the\n     \
    \  most prioritized candidate and here the prioritization for this\n       address\
    \ should be somewhat different compared to SIP.  High-\n       performance candidates\
    \ are recommended rather than candidates\n       with the highest likelihood of\
    \ success, as it is more likely that\n       a server is not behind a NAT compared\
    \ to a SIP user agent.\n   4.  The server responds to the SETUP (200 OK) for each\
    \ media stream\n       with its candidates.  A server not behind a NAT usually\
    \ only\n       provides a single ICE candidate.  Also, here one candidate is the\n\
    \       server primary address.\n   5.  The connectivity checks are performed.\
    \  For the server, the\n       connectivity checks from the server to the clients\
    \ have an\n       additional usage.  They verify that there is someone willing\
    \ to\n       receive the media, thus preventing the server from unknowingly\n\
    \       performing a DoS attack.\n   6.  Connectivity checks from the client promoting\
    \ a candidate pair\n       were successful.  Thus, no further SETUP requests are\
    \ necessary\n       and processing can proceed with step 7.  If an address other\
    \ than\n       the primary has been verified by the client to work, that address\n\
    \       may then be promoted for usage in a SETUP request (go to step 7).\n  \
    \     If the checks for the available candidates failed and if further\n     \
    \  candidates have been derived during the connectivity checks, then\n       those\
    \ can be signaled in new candidate lines in a SETUP request\n       updating the\
    \ list (go to step 5).\n   7.  Client issues the PLAY request.  If the server\
    \ also has completed\n       its connectivity checks for the promoted candidate\
    \ pair (based on\n       the username as it may be derived addresses if the client\
    \ was\n       behind NAT), then it can directly answer 200 OK (go to step 8).\n\
    \       If the connectivity check has not yet completed, it responds with\n  \
    \     a 1xx code to indicate that it is verifying the connectivity.  If\n    \
    \   that fails within the set timeout, an error is reported back.\n       The\
    \ client needs to go back to step 6.\n   8.  Process completed and media can be\
    \ delivered.  ICE candidates not\n       used may be released.\n   To keep media\
    \ paths alive, the client needs to periodically send data\n   to the server. \
    \ This will be realized with STUN.  RTCP sent by the\n   client should be able\
    \ to keep RTCP open, but STUN will also be used\n   for SIP based on the same\
    \ motivations as for ICE.\n"
- title: 4.3.3.  Implementation Burden of ICE
  contents:
  - "4.3.3.  Implementation Burden of ICE\n   The usage of ICE will require that a\
    \ number of new protocols and new\n   RTSP/SDP features be implemented.  This\
    \ makes ICE the solution that\n   has the largest impact on client and server\
    \ implementations among all\n   the NAT/firewall traversal methods in this document.\n\
    \   RTSP server implementation requirements are:\n   o  STUN server features\n\
    \   o  Limited STUN client features\n   o  SDP generation with more parameters\n\
    \   o  RTSP error code for ICE extension\n   RTSP client implementation requirements\
    \ are:\n   o  Limited STUN server features\n   o  Limited STUN client features\n\
    \   o  RTSP error code and ICE extension\n"
- title: 4.3.4.  ALG Considerations
  contents:
  - "4.3.4.  ALG Considerations\n   If there is an RTSP ALG that doesn't support the\
    \ NAT traversal\n   method, it may interfere with the NAT traversal.  As the usage\
    \ of ICE\n   for the traversal manifests itself in the RTSP message primarily\
    \ as a\n   new transport specification, an ALG that passes through unknown will\n\
    \   not prevent the traversal.  An ALG that discards unknown\n   specifications\
    \ will, however, prevent the NAT traversal.  These\n   issues can be avoided by\
    \ preventing the ALG to interfere with the\n   signaling by using TLS for the\
    \ RTSP message transport.\n   An ALG that supports this traversal method can,\
    \ on the most basic\n   level, just pass the transport specifications through.\
    \  ALGs in NATs\n   and firewalls could use the ICE candidates to establish a\
    \ filtering\n   state that would allow incoming STUN messages prior to any outgoing\n\
    \   hole-punching packets, and in that way it could speed up the\n   connectivity\
    \ checks and reduce the risk of failures.\n"
- title: 4.3.5.  Deployment Considerations
  contents:
  - "4.3.5.  Deployment Considerations\n   Advantages:\n   o  Solves NAT connectivity\
    \ discovery for basically all cases as long\n      as a TCP connection between\
    \ the client and server can be\n      established.  This includes servers behind\
    \ NATs.  (Note that a\n      proxy between address domains may be required to\
    \ get TCP through.)\n   o  Improves defenses against DDoS attacks, since a media-receiving\n\
    \      client requires authentications via STUN on its media reception\n     \
    \ ports.\n   Disadvantages:\n   o  Increases the setup delay with at least the\
    \ amount of time it\n      takes for the server to perform its STUN requests.\n\
    \   o  Assumes that it is possible to demultiplex between the packets of\n   \
    \   the media protocol and STUN packets.  This is possible for RTP as\n      discussed,\
    \ for example, in Section 5.1.2 of [RFC5764].\n   o  Has a fairly high implementation\
    \ burden put on both the RTSP\n      server and client.  However, several open\
    \ source ICE\n      implementations do exist, such as [NICE] and [PJNATH].\n"
- title: 4.3.6.  Security Considerations
  contents:
  - "4.3.6.  Security Considerations\n   One should review the Security Considerations\
    \ section of ICE and STUN\n   to understand that ICE contains some potential issues.\
    \  However,\n   these can be avoided by correctly using ICE in RTSP.  An important\n\
    \   factor is to secure the signaling, i.e., use TLS between the RTSP\n   client\
    \ and server.  In fact ICE does help avoid the DDoS attack issue\n   with RTSP\
    \ substantially as it reduces the possibility for a DDoS\n   using RTSP servers\
    \ on attackers that are on path between the RTSP\n   server and the target and\
    \ capable of intercepting the STUN\n   connectivity check packets and correctly\
    \ sending a response to the\n   server.  The ICE connectivity checks with their\
    \ random transaction\n   IDs from the server to the client serves as a return-routability\n\
    \   check and prevents off-path attackers to succeed with address\n   spoofing.\
    \  This is similar to Mobile IPv6's return routability\n   procedure (Section\
    \ 5.2.5 of [RFC6275]).\n"
- title: 4.4.  Latching
  contents:
  - '4.4.  Latching

    '
- title: 4.4.1.  Introduction
  contents:
  - "4.4.1.  Introduction\n   Latching is a NAT traversal solution that is based on\
    \ requiring RTSP\n   clients to send UDP packets to the server's media output\
    \ ports.\n   Conventionally, RTSP servers send RTP packets in one direction: from\n\
    \   server to client.  Latching is similar to connection-oriented\n   traffic,\
    \ where one side (e.g., the RTSP client) first \"connects\" by\n   sending an\
    \ RTP packet to the other side's RTP port; the recipient\n   then replies to the\
    \ originating IP and Port.  This method is also\n   referred to as \"late binding\"\
    .  It requires that all RTP/RTCP\n   transport be done symmetrically.  This in\
    \ effect requires Symmetric\n   RTP [RFC4961].  Refer to [RFC7362] for a description\
    \ of the Latching\n   of SIP-negotiated media streams in Session Border Controllers.\n\
    \   Specifically, when the RTSP server receives the Latching packet\n   (a.k.a.\
    \ hole-punching packet, since it is used to punch a hole in the\n   firewall/NAT)\
    \ from its client, it copies the source IP and Port\n   number and uses them as\
    \ the delivery address for media packets.  By\n   having the server send media\
    \ traffic back the same way as the\n   client's packets are sent to the server,\
    \ address and port mappings\n   will be honored.  Therefore, this technique works\
    \ for all types of\n   NATs, given that the server is not behind a NAT.  However,\
    \ it does\n   require server modifications.  The format of the Latching packet\
    \ will\n   have to be defined.\n   Latching is very vulnerable to both hijacking\
    \ and becoming a tool in\n   DDoS attacks (see Security Considerations in [RFC7362])\
    \ because\n   attackers can simply forge the source IP and Port of the Latching\n\
    \   packet.  The rule for restricting IP addresses to one of the\n   signaling\
    \ connections will need to be applied here also.  However,\n   that does not protect\
    \ against hijacking from another client behind\n   the same NAT.  This can become\
    \ a serious issue in deployments with\n   CGNs.\n"
- title: 4.4.2.  Necessary RTSP Extensions
  contents:
  - "4.4.2.  Necessary RTSP Extensions\n   To support Latching, RTSP signaling must\
    \ be extended to allow the\n   RTSP client to indicate that it will use Latching.\
    \  The client also\n   needs to be able to signal its RTP SSRC to the server in\
    \ its SETUP\n   request.  The RTP SSRC is used to establish some basic level of\n\
    \   security against hijacking attacks or simply to avoid mis-association\n  \
    \ when multiple clients are behind the same NAT.  Care must be taken in\n   choosing\
    \ clients' RTP SSRC.  First, it must be unique within all the\n   RTP sessions\
    \ belonging to the same RTSP session.  Second, if the RTSP\n   server is sending\
    \ out media packets to multiple clients from the same\n   send port, the RTP SSRC\
    \ needs to be unique among those clients' RTP\n   sessions.  Recognizing that\
    \ there is a potential that RTP SSRC\n   collisions may occur, the RTSP server\
    \ must be able to signal to a\n   client that a collision has occurred and that\
    \ it wants the client to\n   use a different RTP SSRC carried in the SETUP response\
    \ or use unique\n   ports per RTSP session.  Using unique ports limits an RTSP\
    \ server in\n   the number of sessions it can simultaneously handle per interface\
    \ IP\n   addresses.\n   The Latching packet as discussed above should have a field\
    \ that can\n   contain a client and RTP session identifier to correctly associate\n\
    \   the Latching packet with the correct context.  If an RTP packet is to\n  \
    \ be used, there would be a benefit to using a well-defined RTP payload\n   format\
    \ for this purpose as the No-Op payload format proposed\n   [RTP-NO-OP].  However,\
    \ in the absence of such a specification, an RTP\n   packet without a payload\
    \ could be used.  Using SSRC is beneficial\n   because RTP and RTCP both would\
    \ work as is.  However, other packet\n   formats could be used that carry the\
    \ necessary identification of the\n   context, and such a solution is discussed\
    \ in Section 4.5.\n"
- title: 4.4.3.  ALG Considerations
  contents:
  - "4.4.3.  ALG Considerations\n   An RTSP ALG not supporting this method could interfere\
    \ with the\n   methods used to indicate that Latching is to be done, as well as\
    \ the\n   SSRC signaling, thus preventing the method from working.  However, if\n\
    \   the RTSP ALG instead opens the corresponding pinholes and creates the\n  \
    \ necessary mapping in the NAT, traversal will still work.  Securing\n   the RTSP\
    \ message transport using TLS will avoid this issue.\n   An RTSP ALG that supports\
    \ this traversal method can for basic\n   functionality simply pass the related\
    \ signaling parameters\n   transparently.  Due to the security considerations\
    \ for Latching,\n   there might exist a benefit for an RTSP ALG that will enable\
    \ NAT\n   traversal to negotiate with the path and turn off the Latching\n   procedures\
    \ when the ALG handles this.  However, this opens up to\n   failure modes when\
    \ there are multiple levels of NAT and only one\n   supports an RTSP ALG.\n"
- title: 4.4.4.  Deployment Considerations
  contents:
  - "4.4.4.  Deployment Considerations\n   Advantages:\n   o  Works for all types\
    \ of client-facing NATs (requirement 1 in\n      Section 3).\n   o  Has little\
    \ interaction problems with any RTSP ALG changing the\n      client's information\
    \ in the Transport header.\n   Disadvantages:\n   o  Requires modifications to\
    \ both the RTSP server and client.\n   o  Limited to working with servers that\
    \ are not behind a NAT.\n   o  The format of the packet for \"connection setup\"\
    \ (a.k.a Latching\n      packet) is not defined.\n   o  SSRC management if RTP\
    \ is used for Latching due to risk for mis-\n      association of clients to RTSP\
    \ sessions at the server if SSRC\n      collision occurs.\n   o  Has significant\
    \ security considerations (See Section 4.4.5), due\n      to the lack of a strong\
    \ authentication mechanism and will need to\n      use address restrictions.\n"
- title: 4.4.5.  Security Considerations
  contents:
  - "4.4.5.  Security Considerations\n   Latching's major security issue is that RTP\
    \ streams can be hijacked\n   and directed towards any target that the attacker\
    \ desires unless\n   address restrictions are used.  In the case of NATs with\
    \ multiple\n   clients on the inside of them, hijacking can still occur.  This\n\
    \   becomes a significant threat in the context of CGNs.\n   The most serious\
    \ security problem is the deliberate attack with the\n   use of an RTSP client\
    \ and Latching.  The attacker uses RTSP to set up\n   a media session.  Then it\
    \ uses Latching with a spoofed source address\n   of the intended target of the\
    \ attack.  There is no defense against\n   this attack other than restricting\
    \ the possible address a Latching\n   packet can come from to the same address\
    \ as the RTSP TCP connection\n   is from.  This prevents Latching to be used in\
    \ use cases that require\n   different addresses for media destination and signaling.\
    \  Even\n   allowing only a limited address range containing the signaling\n \
    \  address from where Latching is allowed opens up a significant\n   vulnerability\
    \ as it is difficult to determine the address usage for\n   the network the client\
    \ connects from.\n   A hijack attack can also be performed in various ways.  The\
    \ basic\n   attack is based on the ability to read the RTSP signaling packets\
    \ in\n   order to learn the address and port the server will send from and\n \
    \  also the SSRC the client will use.  Having this information, the\n   attacker\
    \ can send its own Latching packets containing the correct RTP\n   SSRC to the\
    \ correct address and port on the server.  The RTSP server\n   will then use the\
    \ source IP and Port from the Latching packet as the\n   destination for the media\
    \ packets it sends.\n   Another variation of this attack is for a man in the middle\
    \ to modify\n   the RTP Latching packet being sent by a client to the server by\n\
    \   simply changing the source IP and Port to the target one desires to\n   attack.\n\
    \   One can fend off the snooping-based attack by applying encryption to\n   the\
    \ RTSP signaling transport.  However, if the attacker is a man in\n   the middle\
    \ modifying Latching packets, the attack is impossible to\n   defend against other\
    \ than through address restrictions.  As a NAT\n   rewrites the source IP and\
    \ (possibly) port, this cannot be\n   authenticated, but authentication is required\
    \ in order to protect\n   against this type of DoS attack.\n   Yet another issue\
    \ is that these attacks also can be used to deny the\n   client the service it\
    \ desires from the RTSP server completely.  The\n   attacker modifies or originates\
    \ its own Latching packets with a port\n   other than what the legit Latching\
    \ packets use, which results in the\n   media server sending the RTP/RTCP traffic\
    \ to ports the client isn't\n   listening for RTP/RTCP on.\n   The amount of random\
    \ non-guessable material in the Latching packet\n   determines how well Latching\
    \ can fend off stream hijacking performed\n   by parties that are off the client-to-server\
    \ network path, i.e., it\n   lacks the capability to see the client's Latching\
    \ packets.  The\n   proposal above uses the 32-bit RTP SSRC field to this effect.\n\
    \   Therefore, it is important that this field is derived with a non-\n   predictable\
    \ random number generator.  It should not be possible by\n   knowing the algorithm\
    \ used and a couple of basic facts to derive what\n   random number a certain\
    \ client will use.\n   An attacker not knowing the SSRC but aware of which port\
    \ numbers that\n   a server sends from can deploy a brute-force attack on the\
    \ server by\n   testing a lot of different SSRCs until it finds a matching one.\n\
    \   Therefore, a server could implement functionality that blocks packets\n  \
    \ to ports or from sources that receive or send multiple Latching\n   packets\
    \ with different invalid SSRCs, especially when they are coming\n   from the same\
    \ IP and Port.  Note that this mitigation in itself opens\n   up a new venue for\
    \ DoS attacks against legit users trying to latch.\n   To improve the security\
    \ against attackers, the amount of random\n   material could be increased.  To\
    \ achieve a longer random tag while\n   still using RTP and RTCP, it will be necessary\
    \ to develop RTP and\n   RTCP payload formats for carrying the random material.\n"
- title: 4.5.  A Variation to Latching
  contents:
  - '4.5.  A Variation to Latching

    '
- title: 4.5.1.  Introduction
  contents:
  - "4.5.1.  Introduction\n   Latching as described above requires the usage of a\
    \ valid RTP format\n   as the Latching packet, i.e., the first packet that the\
    \ client sends\n   to the server to establish a bidirectional transport flow for\
    \ RTP\n   streams.  There is currently no appropriate RTP packet format for\n\
    \   this purpose, although the RTP No-Op format was a proposal to fix the\n  \
    \ problem [RTP-NO-OP]; however, that work was abandoned.  [RFC6263]\n   discusses\
    \ the implication of different types of packets as keep-\n   alives for RTP, and\
    \ its findings are very relevant to the format of\n   the Latching packet.\n \
    \  Meanwhile, there have been NAT/firewall traversal techniques deployed\n   in\
    \ the wireless streaming market place that use non-RTP messages as\n   Latching\
    \ packets.  This section describes a variant based on a subset\n   of those solutions\
    \ that alters the previously described Latching\n   solution.\n"
- title: 4.5.2.  Necessary RTSP Extensions
  contents:
  - "4.5.2.  Necessary RTSP Extensions\n   In this variation of Latching, the Latching\
    \ packet is a small UDP\n   packet that does not contain an RTP header.  In response\
    \ to the\n   client's Latching packet, the RTSP server sends back a similar\n\
    \   Latching packet as a confirmation so the client can stop the so-\n   called\
    \ \"connection phase\" of this NAT traversal technique.\n   Afterwards, the client\
    \ only has to periodically send Latching packets\n   as keep-alive messages for\
    \ the NAT mappings.\n   The server listens on its RTP-media output port and tries\
    \ to decode\n   any received UDP packet as the Latching packet.  This is valid\
    \ since\n   an RTSP server is not expecting RTP traffic from the RTSP client.\n\
    \   Then, it can correlate the Latching packet with the RTSP client's\n   session\
    \ ID or the client's SSRC and record the NAT bindings\n   accordingly.  The server\
    \ then sends a Latching packet as the response\n   to the client.\n   The Latching\
    \ packet can contain the SSRC to identify the RTP stream,\n   and care must be\
    \ taken if the packet is bigger than 12 bytes,\n   ensuring that it is distinctively\
    \ different from RTP packets, whose\n   header size is 12 bytes.\n   RTSP signaling\
    \ can be added to do the following:\n   1.  Enable or disable such Latching message\
    \ exchanges.  When the\n       firewall/NAT has an RTSP-aware ALG, it is possible\
    \ to disable\n       Latching message exchange and let the ALG work out the address\n\
    \       and port mappings.\n   2.  Configure the number of retries and the retry\
    \ interval of the\n       Latching message exchanges.\n"
- title: 4.5.3.  ALG Considerations
  contents:
  - "4.5.3.  ALG Considerations\n   See Latching ALG considerations in Section 4.4.3.\n"
- title: 4.5.4.  Deployment Considerations
  contents:
  - "4.5.4.  Deployment Considerations\n   This approach has the following advantages\
    \ when compared with the\n   Latching approach (Section 4.4):\n   1.  There is\
    \ no need to define an RTP payload format for firewall\n       traversal; therefore,\
    \ it is more simple to use, implement, and\n       administer (requirement 4 in\
    \ Section 3) than a Latching protocol,\n       which must be defined.\n   2. \
    \ When properly defined, this kind of Latching packet exchange can\n       also\
    \ authenticate RTP receivers, to prevent hijacking attacks.\n   This approach\
    \ has the following disadvantage when compared with the\n   Latching approach:\n\
    \   1.  The server's sender SSRC for the RTP stream or other session\n       Identity\
    \ information must be signaled in the RTSP's SETUP\n       response, in the Transport\
    \ header of the RTSP SETUP response.\n"
- title: 4.5.5.  Security Considerations
  contents:
  - "4.5.5.  Security Considerations\n   Compared to the security properties of Latching,\
    \ this variant is\n   slightly improved.  First of all it allows for a larger\
    \ random field\n   in the Latching packets, which makes it more unlikely for an\
    \ off-path\n   attacker to succeed in a hijack attack.  Second, the confirmation\n\
    \   allows the client to know when Latching works and when it doesn't and\n  \
    \ thus when to restart the Latching process by updating the SSRC.\n   Still, the\
    \ main security issue remaining is that the RTSP server\n   can't know that the\
    \ source address in the Latching packet was coming\n   from an RTSP client wanting\
    \ to receive media and not from one that\n   likes to direct the media traffic\
    \ to a DoS target.\n"
- title: 4.6.  Three-Way Latching
  contents:
  - '4.6.  Three-Way Latching

    '
- title: 4.6.1.  Introduction
  contents:
  - "4.6.1.  Introduction\n   Three-Way Latching is an attempt to try to resolve the\
    \ most\n   significant security issues for both previously discussed variants\
    \ of\n   Latching.  By adding a server request response exchange directly\n  \
    \ after the initial Latching, the server can verify that the target\n   address\
    \ present in the Latching packet is an active listener and\n   confirm its desire\
    \ to establish a media flow.\n"
- title: 4.6.2.  Necessary RTSP Extensions
  contents:
  - "4.6.2.  Necessary RTSP Extensions\n   Uses the same RTSP extensions as the Alternative\
    \ Latching method\n   (Section 4.5) uses.  The extensions for this variant are\
    \ only in the\n   format and transmission of the Latching packets.\n   The client-to-server\
    \ Latching packet is similar to the Alternative\n   Latching (Section 4.5), i.e.,\
    \ a UDP packet with some session\n   identifiers and a random value.  When the\
    \ server responds to the\n   Latching packet with a Latching confirmation, it\
    \ includes a random\n   value (nonce) of its own in addition to echoing back the\
    \ one the\n   client sent.  Then a third message is added to the exchange.  The\n\
    \   client acknowledges the reception of the Latching confirmation\n   message\
    \ and echoes back the server's nonce, thus confirming that the\n   Latched address\
    \ goes to an RTSP client that initiated the Latching\n   and is actually present\
    \ at that address.  The RTSP server will refuse\n   to send any media until the\
    \ Latching Acknowledgement has been\n   received with a valid nonce.\n"
- title: 4.6.3.  ALG Considerations
  contents:
  - "4.6.3.  ALG Considerations\n   See Latching ALG considerations in Section 4.4.3.\n"
- title: 4.6.4.  Deployment Considerations
  contents:
  - "4.6.4.  Deployment Considerations\n   A solution with a three-way handshake and\
    \ its own Latching packets\n   can be compared with the ICE-based solution (Section\
    \ 4.3) and have\n   the following differences:\n   o  Only works for servers that\
    \ are not behind a NAT.\n   o  May be simpler to implement due to the avoidance\
    \ of the ICE\n      prioritization and check-board mechanisms.\n   However, a\
    \ Three-Way Latching protocol is very similar to using STUN\n   in both directions\
    \ as a Latching and verification protocol.  Using\n   STUN would remove the need\
    \ for implementing a new protocol.\n"
- title: 4.6.5.  Security Considerations
  contents:
  - "4.6.5.  Security Considerations\n   Three-Way Latching is significantly more\
    \ secure than its simpler\n   versions discussed above.  The client-to-server\
    \ nonce, which is\n   included in signaling and also can be bigger than the 32\
    \ bits of\n   random data that the SSRC field supports, makes it very difficult\
    \ for\n   an off-path attacker to perform a DoS attack by diverting the media.\n\
    \   The client-to-server nonce and its echoing back does not protect\n   against\
    \ on-path attackers, including malicious clients.  However, the\n   server-to-client\
    \ nonce and its echoing back prevents malicious\n   clients to divert the media\
    \ stream by spoofing the source address and\n   port, as it can't echo back the\
    \ nonce in these cases.  This is\n   similar to the Mobile IPv6 return routability\
    \ procedure\n   (Section 5.2.5 of [RFC6275]).\n   Three-Way Latching is really\
    \ only vulnerable to an on-path attacker\n   that is quite capable.  First, the\
    \ attacker can learn the client-\n   to-server nonce either by intercepting the\
    \ signaling or by modifying\n   the source information (target destination) of\
    \ a client's Latching\n   packet.  Second, it is also on-path between the server\
    \ and target\n   destination and can generate a response using the server's nonce.\
    \  An\n   adversary that has these capabilities is commonly capable of causing\n\
    \   significantly worse damage than this using other methods.\n   Three-Way Latching\
    \ results in the server-to-client packet being\n   bigger than the client-to-server\
    \ packet, due to the inclusion of the\n   server-to-client nonce in addition to\
    \ the client-to-server nonce.\n   Thus, an amplification effect does exist; however,\
    \ to achieve this\n   amplification effect, the attacker has to create a session\
    \ state on\n   the RTSP server.  The RTSP server can also limit the number of\n\
    \   responses it will generate before considering the Latching to be\n   failed.\n"
- title: 4.7.  Application Level Gateways
  contents:
  - '4.7.  Application Level Gateways

    '
- title: 4.7.1.  Introduction
  contents:
  - "4.7.1.  Introduction\n   An ALG reads the application level messages and performs\
    \ necessary\n   changes to allow the protocol to work through the middlebox.\n\
    \   However, this behavior has some problems in regards to RTSP:\n   1.  It does\
    \ not work when RTSP is used with end-to-end security.  As\n       the ALG can't\
    \ inspect and change the application level messages,\n       the protocol will\
    \ fail due to the middlebox.\n   2.  ALGs need to be updated if extensions to\
    \ the protocol are added.\n       Due to deployment issues with changing ALGs,\
    \ this may also break\n       the end-to-end functionality of RTSP.\n   Due to\
    \ the above reasons, it is not recommended to use an RTSP ALG in\n   NATs.  This\
    \ is especially important for NATs targeted to home users\n   and small office\
    \ environments, since it is very hard to upgrade NATs\n   deployed in SOHO environments.\n"
- title: 4.7.2.  Outline on How ALGs for RTSP Work
  contents:
  - "4.7.2.  Outline on How ALGs for RTSP Work\n   In this section, we provide a step-by-step\
    \ outline on how one could\n   go about writing an ALG to enable RTSP to traverse\
    \ a NAT.\n   1.  Detect any SETUP request.\n   2.  Try to detect the usage of\
    \ any of the NAT traversal methods that\n       replace the address and port of\
    \ the Transport header parameters\n       \"destination\" or \"dest_addr\".  If\
    \ any of these methods are used,\n       then the ALG should not change the address.\
    \  Ways to detect that\n       these methods are used are:\n       *  For embedded\
    \ STUN, it would be to watch for a feature tag,\n          like \"nat.stun\",\
    \ and to see if any of those exist in the\n          \"supported\", \"proxy-require\"\
    , or \"require\" headers of the RTSP\n          exchange.\n       *  For stand-alone\
    \ STUN and TURN-based solutions: This can be\n          detected by inspecting\
    \ the \"destination\" or \"dest_addr\"\n          parameter.  If it contains either\
    \ one of the NAT's external IP\n          addresses or a public IP address, then\
    \ such a solution is in\n          use.  However, if multiple NATs are used, this\
    \ detection may\n          fail.  Remapping should only be done for addresses\
    \ belonging\n          to the NAT's own private address space.\n       Otherwise,\
    \ continue to the next step.\n   3.  Create UDP mappings (client given IP and\
    \ Port <-> external IP and\n       Port) where needed for all possible transport\
    \ specifications in\n       the Transport header of the request found in (step\
    \ 1).  Enter the\n       external address and port(s) of these mappings in the\
    \ Transport\n       header.  Mappings shall be created with consecutive external\
    \ port\n       numbers starting on an even number for RTP for each media stream.\n\
    \       Mappings should also be given a long timeout period, at least 5\n    \
    \   minutes.\n   4.  When the SETUP response is received from the server, the\
    \ ALG may\n       remove the unused UDP mappings, i.e., the ones not present in\
    \ the\n       Transport header.  The session ID should also be bound to the UDP\n\
    \       mappings part of that session.\n   5.  If the SETUP response settles on\
    \ RTP over TCP or RTP over RTSP as\n       lower transport, do nothing: let TCP\
    \ tunneling take care of NAT\n       traversal.  Otherwise, go to the next step.\n\
    \   6.  The ALG should keep the UDP mappings belonging to the RTSP\n       session\
    \ as long as: an RTSP message with the session's ID has\n       been sent in the\
    \ last timeout interval, or a UDP message has been\n       sent on any of the\
    \ UDP mappings during the last timeout interval.\n   7.  The ALG may remove a\
    \ mapping as soon as a TEARDOWN response has\n       been received for that media\
    \ stream.\n"
- title: 4.7.3.  Deployment Considerations
  contents:
  - "4.7.3.  Deployment Considerations\n   Advantages:\n   o  No impact on either\
    \ client or server.\n   o  Can work for any type of NATs.\n   Disadvantages:\n\
    \   o  When deployed, they are hard to update to reflect protocol\n      modifications\
    \ and extensions.  If not updated, they will break the\n      functionality.\n\
    \   o  When end-to-end security is used, the ALG functionality will fail.\n  \
    \ o  Can interfere with other types of traversal mechanisms, such as\n      STUN.\n\
    \   Transition:\n   An RTSP ALG will not be phased out in any automatic way. \
    \ It must be\n   removed, probably through the removal or update of the NAT it\
    \ is\n   associated with.\n"
- title: 4.7.4.  Security Considerations
  contents:
  - "4.7.4.  Security Considerations\n   An ALG will not work with deployment of end-to-end\
    \ RTSP signaling\n   security; however, it will work with the hop-by-hop security\
    \ method\n   defined in Section 19.3 of RTSP 2.0 [RTSP].  Therefore, deployment\
    \ of\n   ALG may result in clients located behind NATs not using end-to-end\n\
    \   security, or more likely the selection of a NAT traversal solution\n   that\
    \ allows for security.\n   The creation of a UDP mapping based on the signaling\
    \ message has some\n   potential security implications.  First of all, if the\
    \ RTSP client\n   releases its ports and another application is assigned these\
    \ instead,\n   it could receive RTP media as long as the mappings exist and the\
    \ RTSP\n   server has failed to be signaled or notice the lack of client\n   response.\n\
    \   A NAT with RTSP ALG that assigns mappings based on SETUP requests\n   could\
    \ potentially become the victim of a resource exhaustion attack.\n   If an attacker\
    \ creates a lot of RTSP sessions, even without starting\n   media transmission,\
    \ this could exhaust the pool of available UDP\n   ports on the NAT.  Thus, only\
    \ a limited number of UDP mappings should\n   be allowed to be created by the\
    \ RTSP ALG.\n"
- title: 4.8.  TCP Tunneling
  contents:
  - '4.8.  TCP Tunneling

    '
- title: 4.8.1.  Introduction
  contents:
  - "4.8.1.  Introduction\n   Using a TCP connection that is established from the\
    \ client to the\n   server ensures that the server can send data to the client.\
    \  The\n   connection opened from the private domain ensures that the server can\n\
    \   send data back to the client.  To send data originally intended to be\n  \
    \ transported over UDP requires the TCP connection to support some type\n   of\
    \ framing of the media data packets.  Using TCP also results in the\n   client\
    \ having to accept that real-time performance can be impacted.\n   TCP's problem\
    \ of ensuring timely delivery was one of the reasons why\n   RTP was developed.\
    \  Problems that arise with TCP are: head-of-line\n   blocking, delay introduced\
    \ by retransmissions, and a highly varying\n   rate due to the congestion control\
    \ algorithm.  If a sufficient amount\n   of buffering (several seconds) in the\
    \ receiving client can be\n   tolerated, then TCP will clearly work.\n"
- title: 4.8.2.  Usage of TCP Tunneling in RTSP
  contents:
  - "4.8.2.  Usage of TCP Tunneling in RTSP\n   The RTSP core specification [RTSP]\
    \ supports interleaving of media\n   data on the TCP connection that carries RTSP\
    \ signaling.  See\n   Section 14 in [RTSP] for how to perform this type of TCP\
    \ tunneling.\n   There also exists another way of transporting RTP over TCP, which\
    \ is\n   defined in Appendix C.2 in [RTSP].  For signaling and rules on how to\n\
    \   establish the TCP connection in lieu of UDP, see Appendix C.2 in\n   [RTSP].\
    \  This is based on the framing of RTP over the TCP connection\n   as described\
    \ in [RFC4571].\n"
- title: 4.8.3.  ALG Considerations
  contents:
  - "4.8.3.  ALG Considerations\n   An RTSP ALG will face a different issue with TCP\
    \ tunneling, at least\n   the interleaved version.  Now the full data stream can\
    \ end up flowing\n   through the ALG implementation.  Thus, it is important that\
    \ the ALG\n   is efficient in dealing with the interleaved media data frames to\n\
    \   avoid consuming to many resources and thus creating performance\n   issues.\n\
    \   The RTSP ALG can also affect the transport specifications that\n   indicate\
    \ that TCP tunneling can be done and its prioritization,\n   including removing\
    \ the transport specification, thus preventing TCP\n   tunneling.\n"
- title: 4.8.4.  Deployment Considerations
  contents:
  - "4.8.4.  Deployment Considerations\n   Advantage:\n   o  Works through all types\
    \ of NATs where the RTSP server is not NATed\n      or is at least reachable like\
    \ it was not.\n   Disadvantages:\n   o  Functionality needs to be implemented\
    \ on both server and client.\n   o  Will not always meet multimedia stream's real-time\
    \ requirements.\n   Transition:\n   The tunneling over RTSP's TCP connection is\
    \ not planned to be phased\n   out.  It is intended to be a fallback mechanism\
    \ and for usage when\n   total media reliability is desired, even at the potential\
    \ price of\n   loss of real-time properties.\n"
- title: 4.8.5.  Security Considerations
  contents:
  - "4.8.5.  Security Considerations\n   The TCP tunneling of RTP has no known significant\
    \ security problems\n   besides those already presented in the RTSP specification.\
    \  It is\n   difficult to get any amplification effect for DoS attacks due to\n\
    \   TCP's flow control.  The RTSP server's TCP socket, if independently\n   used\
    \ for media tunneling or only RTSP messages, can be used for a\n   redirected\
    \ syn attack.  By spoofing the source address of any TCP\n   init packets, the\
    \ TCP SYNs from the server can be directed towards a\n   target.\n   A possible\
    \ security consideration, when session media data is\n   interleaved with RTSP,\
    \ would be the performance bottleneck when RTSP\n   encryption is applied, since\
    \ all session media data also needs to be\n   encrypted.\n"
- title: 4.9.  Traversal Using Relays around NAT (TURN)
  contents:
  - '4.9.  Traversal Using Relays around NAT (TURN)

    '
- title: 4.9.1.  Introduction
  contents:
  - "4.9.1.  Introduction\n   TURN [RFC5766] is a protocol for setting up traffic\
    \ relays that allow\n   clients behind NATs and firewalls to receive incoming\
    \ traffic for\n   both UDP and TCP.  These relays are controlled and have limited\n\
    \   resources.  They need to be allocated before usage.  TURN allows a\n   client\
    \ to temporarily bind an address/port pair on the relay (TURN\n   server) to its\
    \ local source address/port pair, which is used to\n   contact the TURN server.\
    \  The TURN server will then forward packets\n   between the two sides of the\
    \ relay.\n   To prevent DoS attacks on either recipient, the packets forwarded\
    \ are\n   restricted to the specific source address.  On the client side, it is\n\
    \   restricted to the source setting up the allocation.  On the external\n   side,\
    \ it is limited to the source address/port pair that have been\n   given permission\
    \ by the TURN client creating the allocation.  Packets\n   from any other source\
    \ on this address will be discarded.\n   Using a TURN server makes it possible\
    \ for an RTSP client to receive\n   media streams from even an unmodified RTSP\
    \ server.  However, the\n   problem is those RTSP servers most likely restrict\
    \ media destinations\n   to no other IP address than the one the RTSP message\
    \ arrives from.\n   This means that TURN could only be used if the server knows\
    \ and\n   accepts that the IP belongs to a TURN server, and the TURN server\n\
    \   can't be targeted at an unknown address.  Alternatively, both the\n   RTSP\
    \ TCP connection as well as the RTP media is relayed through the\n   same TURN\
    \ server.\n"
- title: 4.9.2.  Usage of TURN with RTSP
  contents:
  - "4.9.2.  Usage of TURN with RTSP\n   To use a TURN server for NAT traversal, the\
    \ following steps should be\n   performed.\n   1.  The RTSP client connects with\
    \ the RTSP server.  The client\n       retrieves the session description to determine\
    \ the number of\n       media streams.  To avoid the issue of having the RTSP\
    \ connection\n       and media traffic from different addresses, the TCP connection\n\
    \       must also be done through the same TURN server as the one in the\n   \
    \    next step.  This will require the usage of TURN for TCP\n       [RFC6062].\n\
    \   2.  The client establishes the necessary bindings on the TURN server.\n  \
    \     It must choose the local RTP and RTCP ports that it desires to\n       receive\
    \ media packets.  TURN supports requesting bindings of even\n       port numbers\
    \ and contiguous ranges.\n   3.  The RTSP client uses the acquired address and\
    \ port allocations in\n       the RTSP SETUP request using the destination header.\n\
    \   4.  The RTSP server sends the SETUP reply, which must include the\n      \
    \ Transport header's \"src_addr\" parameter (source and port in RTSP\n       1.0).\
    \  Note that the server is required to have a mechanism to\n       verify that\
    \ it is allowed to send media traffic to the given\n       address unless TCP\
    \ relaying of the RTSP messages also is\n       performed.\n   5.  The RTSP client\
    \ uses the RTSP server's response to create TURN\n       permissions for the server's\
    \ media traffic.\n   6.  The client requests that the server starts playing. \
    \ The server\n       starts sending media packets to the given destination address\
    \ and\n       ports.\n   7.  Media packets arrive at the TURN server on the external\
    \ port; if\n       the packets match an established permission, the TURN server\n\
    \       forwards the media packets to the RTSP client.\n   8.  If the client pauses\
    \ and media is not sent for about 75% of the\n       mapping timeout, the client\
    \ should use TURN to refresh the\n       bindings.\n"
- title: 4.9.3.  ALG Considerations
  contents:
  - "4.9.3.  ALG Considerations\n   As the RTSP client inserts the address information\
    \ of the TURN\n   relay's external allocations in the SETUP messages, the ALG\
    \ that\n   replaces the address, without considering that the address does not\n\
    \   belong to the internal address realm of the NAT, will prevent this\n   mechanism\
    \ from working.  This can be prevented by securing the RTSP\n   signaling.\n"
- title: 4.9.4.  Deployment Considerations
  contents:
  - "4.9.4.  Deployment Considerations\n   Advantages:\n   o  Does not require any\
    \ server modifications given that the server\n      includes the \"src_addr\"\
    \ header in the SETUP response.\n   o  Works for any type of NAT as long as the\
    \ RTSP server has a\n      reachable IP address that is not behind a NAT.\n  \
    \ Disadvantages:\n   o  Requires another network element, namely the TURN server.\n\
    \   o  A TURN server for RTSP may not scale since the number of sessions\n   \
    \   it must forward is proportional to the number of client media\n      sessions.\n\
    \   o  The TURN server becomes a single point of failure.\n   o  Since TURN forwards\
    \ media packets, as a necessity it introduces\n      delay.\n   o  An RTSP ALG\
    \ may change the necessary destinations parameter.  This\n      will cause the\
    \ media traffic to be sent to the wrong address.\n   Transition:\n   TURN is not\
    \ intended to be phased out completely; see Section 19 of\n   [RFC5766].  However,\
    \ the usage of TURN could be reduced when the\n   demand for having NAT traversal\
    \ is reduced.\n"
- title: 4.9.5.  Security Considerations
  contents:
  - "4.9.5.  Security Considerations\n   The TURN server can become part of a DoS\
    \ attack towards any victim.\n   To perform this attack, the attacker must be\
    \ able to eavesdrop on the\n   packets from the TURN server towards a target for\
    \ the DoS attack.\n   The attacker uses the TURN server to set up an RTSP session\
    \ with\n   media flows going through the TURN server.  The attacker is in fact\n\
    \   creating TURN mappings towards a target by spoofing the source\n   address\
    \ of TURN requests.  As the attacker will need the address of\n   these mappings,\
    \ he must be able to eavesdrop or intercept the TURN\n   responses going from\
    \ the TURN server to the target.  Having these\n   addresses, he can set up an\
    \ RTSP session and start delivery of the\n   media.  The attacker must be able\
    \ to create these mappings.  The\n   attacker in this case may be traced by the\
    \ TURN username in the\n   mapping requests.\n   This attack requires that the\
    \ attacker has access to a user account\n   on the TURN server to be able to set\
    \ up the TURN mappings.  To\n   prevent this attack, the RTSP server needs to\
    \ verify that the\n   ultimate target destination accepts this media stream, which\
    \ would\n   require something like ICE's connectivity checks being run between\n\
    \   the RTSP server and the RTSP client.\n"
- title: 5.  Firewalls
  contents:
  - "5.  Firewalls\n   Firewalls exist for the purpose of protecting a network from\
    \ traffic\n   not desired by the firewall owner.  Therefore, it is a policy\n\
    \   decision if a firewall will let RTSP and its media streams through or\n  \
    \ not.  RTSP is designed to be firewall friendly in that it should be\n   easy\
    \ to design firewall policies to permit passage of RTSP traffic\n   and its media\
    \ streams.\n   The firewall will need to allow the media streams associated with\
    \ an\n   RTSP session to pass through it.  Therefore, the firewall will need\n\
    \   an ALG that reads RTSP SETUP and TEARDOWN messages.  By reading the\n   SETUP\
    \ message, the firewall can determine what type of transport and\n   from where\
    \ the media stream packets will be sent.  Commonly, there\n   will be the need\
    \ to open UDP ports for RTP/RTCP.  By looking at the\n   source and destination\
    \ addresses and ports, the opening in the\n   firewall can be minimized to the\
    \ least necessary.  The opening in the\n   firewall can be closed after a TEARDOWN\
    \ message for that session or\n   the session itself times out.\n   The above\
    \ possibilities for firewalls to inspect and respond to the\n   signaling are\
    \ prevented if end-to-end confidentiality protection is\n   used for the RTSP\
    \ signaling, e.g., using the specified RTSP over TLS.\n   As a result, firewalls\
    \ can't be actively opening pinholes for the\n   media streams based on the signaling.\
    \  To enable an RTSP ALG in the\n   firewall to correctly function, the hop-by-hop\
    \ signaling security in\n   RTSP 2.0 can be used (see Section 19.3 of [RTSP]).\
    \  If not, other\n   methods have to be used to enable the transport flows for\
    \ the media.\n   Simpler firewalls do allow a client to receive media as long\
    \ as it\n   has sent packets to the target.  Depending on the security level,\n\
    \   this can have the same behavior as a NAT.  The only difference is\n   that\
    \ no address translation is done.  To use such a firewall, a\n   client would\
    \ need to implement one of the above described NAT\n   traversal methods that\
    \ include sending packets to the server to\n   create the necessary filtering\
    \ state.\n"
- title: 6.  Comparison of NAT Traversal Techniques
  contents:
  - "6.  Comparison of NAT Traversal Techniques\n   This section evaluates the techniques\
    \ described above against the\n   requirements listed in Section 3.\n   In the\
    \ following table, the columns correspond to the numbered\n   requirements.  For\
    \ instance, the column under R1 corresponds to the\n   first requirement in Section\
    \ 3: must work for all flavors of NATs.\n   The rows represent the different NAT/firewall\
    \ traversal techniques.\n   Latch is short for Latching, \"V. Latch\" is short\
    \ for \"variation of\n   Latching\" as described in Section 4.5, and \"3-W Latch\"\
    \ is short for\n   the Three-Way Latching described in Section 4.6.\n   A summary\
    \ of the requirements are:\n   R1: Work for all flavors of NATs\n   R2: Must work\
    \ with firewalls, including those with ALGs\n   R3: Should have minimal impact\
    \ on clients not behind NATs, counted in\n       minimal number of additional\
    \ RTTs\n   R4: Should be simple to use, implement, and administer\n   R5: Should\
    \ provide mitigation against DDoS attacks\n   The following considerations are\
    \ also added to the requirements:\n   C1: Will the solution support both clients\
    \ and servers behind NAT?\n   C2: Is the solution robust as NAT behaviors change?\n\
    \   ------------+------+------+------+------+------+------+------+\n         \
    \      |  R1  |  R2  |  R3  |  R4  |  R5  |  C1  |  C2  |\n   ------------+------+------+------+------+------+------+------+\n\
    \    STUN       | No   | Yes  |  1   | Maybe| No   | No   | No   |\n   ------------+------+------+------+------+------+------+------+\n\
    \    Emb. STUN  | Yes  | Yes  |  2   | Maybe| No   | No   | Yes  |\n   ------------+------+------+------+------+------+------+------+\n\
    \    ICE        | Yes  | Yes  | 2.5  | No   | Yes  | Yes  | Yes  |\n   ------------+------+------+------+------+------+------+------+\n\
    \    Latch      | Yes  | Yes  |  1   | Maybe| No   | No   | Yes  |\n   ------------+------+------+------+------+------+------+------+\n\
    \    V. Latch   | Yes  | Yes  |  1   | Yes  | No   | No   | Yes  |\n   ------------+------+------+------+------+------+------+------+\n\
    \    3-W Latch  | Yes  | Yes  | 1.5  | Maybe| Yes  | No   | Yes  |\n   ------------+------+------+------+------+------+------+------+\n\
    \    ALG        |(Yes) | Yes  |  0   | No   | Yes  | No   | Yes  |\n   ------------+------+------+------+------+------+------+------+\n\
    \    TCP Tunnel | Yes  | Yes  | 1.5  | Yes  | Yes  | No   | Yes  |\n   ------------+------+------+------+------+------+------+------+\n\
    \    TURN       | Yes  | Yes  |  1   | No   | Yes  |(Yes) | Yes  |\n   ------------+------+------+------+------+------+------+------+\n\
    \            Figure 1: Comparison of Fulfillment of Requirements\n   Looking at\
    \ Figure 1, one would draw the conclusion that using TCP\n   Tunneling or Three-Way\
    \ Latching are the solutions that best fulfill\n   the requirements.  The different\
    \ techniques were discussed in the\n   MMUSIC WG.  It was established that the\
    \ WG would pursue an ICE-based\n   solution due to its generality and capability\
    \ of also handling\n   servers delivering media from behind NATs.  TCP Tunneling\
    \ is likely\n   to be available as an alternative, due to its specification in\
    \ the\n   main RTSP specification.  Thus, it can be used if desired, and the\n\
    \   potential downsides of using TCP is acceptable in particular\n   deployments.\
    \  When it comes to Three-Way Latching, it is a very\n   competitive technique\
    \ given that you don't need support for RTSP\n   servers behind NATs.  There was\
    \ some discussion in the WG about if\n   the increased implementation burden of\
    \ ICE is sufficiently motivated\n   compared to a the Three-Way Latching solution\
    \ for this generality.\n   In the end, the authors believed that the reuse of\
    \ ICE, greater\n   flexibility, and any way needed to deploy a new solution were\
    \ the\n   decisive factors.\n   The ICE-based RTSP NAT traversal solution is specified\
    \ in \"A Network\n   Address Translator (NAT) Traversal mechanism for media controlled\
    \ by\n   Real-Time Streaming Protocol (RTSP)\" [RTSP-NAT].\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   In the preceding sections, we have discussed\
    \ security merits of the\n   different NAT/firewall traversal methods for RTSP.\
    \  In summary, the\n   presence of NAT(s) is a security risk, as a client cannot\
    \ perform\n   source authentication of its IP address.  This prevents the\n  \
    \ deployment of any future RTSP extensions providing security against\n   the\
    \ hijacking of sessions by a man in the middle.\n   Each of the proposed solutions\
    \ has security implications.  Using STUN\n   will provide the same level of security\
    \ as RTSP without transport-\n   level security and source authentications, as\
    \ long as the server does\n   not allow media to be sent to a different IP address\
    \ than the RTSP\n   client request was sent from.\n   Using Latching will have\
    \ a higher risk of session hijacking or DoS\n   than normal RTSP.  The reason\
    \ is that there exists a probability that\n   an attacker is able to guess the\
    \ random bits that the client uses to\n   prove its identity when creating the\
    \ address bindings.  This can be\n   solved in the variation of Latching (Section\
    \ 4.5) with authentication\n   features.  Still, both those variants of Latching\
    \ are vulnerable\n   against a deliberate attack from the RTSP client to redirect\
    \ the\n   media stream requested to any target assuming it can spoof the source\n\
    \   address.  This security vulnerability is solved by performing a\n   Three-way\
    \ Latching procedure as discussed in Section 4.6.\n   ICE resolves the binding\
    \ vulnerability of Latching by using signed\n   STUN messages, as well as requiring\
    \ that both sides perform\n   connectivity checks to verify that the target IP\
    \ address in the\n   candidate pair is both reachable and willing to respond.\
    \  ICE can,\n   however, create a significant amount of traffic if the number\
    \ of\n   candidate pairs are large.  Thus, pacing is required and\n   implementations\
    \ should attempt to limit their number of candidates to\n   reduce the number\
    \ of packets.\n   If the signaling between the ICE peers (RTSP client and server)\
    \ is\n   not confidentiality and integrity protected, ICE is vulnerable to\n \
    \  attacks where the candidate list is manipulated.  The lack of\n   signaling\
    \ security will also simplify spoofing of STUN binding\n   messages by revealing\
    \ the secret used in signing.\n   The usage of an RTSP ALG does not in itself\
    \ increase the risk for\n   session hijacking.  However, the deployment of ALGs\
    \ as the sole\n   mechanism for RTSP NAT traversal will prevent deployment of\
    \ end-\n   to-end encrypted RTSP signaling.\n   The usage of TCP tunneling has\
    \ no known security problems.  However,\n   it might provide a bottleneck when\
    \ it comes to end-to-end RTSP\n   signaling security if TCP tunneling is used\
    \ on an interleaved RTSP\n   signaling connection.\n   The usage of TURN has severe\
    \ risk of DoS attacks against a client.\n   The TURN server can also be used as\
    \ a redirect point in a DDoS attack\n   unless the server has strict enough rules\
    \ for who may create\n   bindings.\n   Since Latching and the variants of Latching\
    \ have such big security\n   issues, they should not be used at all.  Three-Way\
    \ Latching as well\n   as ICE mitigates these security issues and performs the\
    \ important\n   return-routability checks that prevent spoofed source addresses,\
    \ and\n   they should be recommended for that reason.  RTP ALGs are a security\n\
    \   risk as they can create an incitement against using secure RTSP\n   signaling.\
    \  That can be avoided as ALGs require trust in the\n   middlebox, and that trust\
    \ becomes explicit if one uses the hop-by-hop\n   security solution as specified\
    \ in Section 19.3 of RTSP 2.0.  [RTSP].\n   The remaining methods can be considered\
    \ safe enough, assuming that\n   the appropriate security mechanisms are used\
    \ and not ignored.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [NICE]      Libnice, \"The GLib ICE implementation\"\
    , June 2015,\n               <http://nice.freedesktop.org/wiki/>.\n   [PJNATH]\
    \    \"PJNATH - Open Source ICE, STUN, and TURN Library\", May\n             \
    \  2013, <http://www.pjsip.org/pjnath/docs/html/>.\n   [RFC768]    Postel, J.,\
    \ \"User Datagram Protocol\", STD 6, RFC 768,\n               DOI 10.17487/RFC0768,\
    \ August 1980,\n               <http://www.rfc-editor.org/info/rfc768>.\n   [RFC793]\
    \    Postel, J., \"Transmission Control Protocol\", STD 7,\n               RFC\
    \ 793, DOI 10.17487/RFC0793, September 1981,\n               <http://www.rfc-editor.org/info/rfc793>.\n\
    \   [RFC2326]   Schulzrinne, H., Rao, A., and R. Lanphier, \"Real Time\n     \
    \          Streaming Protocol (RTSP)\", RFC 2326,\n               DOI 10.17487/RFC2326,\
    \ April 1998,\n               <http://www.rfc-editor.org/info/rfc2326>.\n   [RFC2588]\
    \   Finlayson, R., \"IP Multicast and Firewalls\", RFC 2588,\n               DOI\
    \ 10.17487/RFC2588, May 1999,\n               <http://www.rfc-editor.org/info/rfc2588>.\n\
    \   [RFC2663]   Srisuresh, P. and M. Holdrege, \"IP Network Address\n        \
    \       Translator (NAT) Terminology and Considerations\",\n               RFC\
    \ 2663, DOI 10.17487/RFC2663, August 1999,\n               <http://www.rfc-editor.org/info/rfc2663>.\n\
    \   [RFC3022]   Srisuresh, P. and K. Egevang, \"Traditional IP Network\n     \
    \          Address Translator (Traditional NAT)\", RFC 3022,\n               DOI\
    \ 10.17487/RFC3022, January 2001,\n               <http://www.rfc-editor.org/info/rfc3022>.\n\
    \   [RFC3261]   Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n   \
    \            A., Peterson, J., Sparks, R., Handley, M., and\n               E.\
    \ Schooler, \"SIP: Session Initiation Protocol\",\n               RFC 3261, DOI\
    \ 10.17487/RFC3261, June 2002,\n               <http://www.rfc-editor.org/info/rfc3261>.\n\
    \   [RFC3424]   Daigle, L., Ed. and IAB, \"IAB Considerations for\n          \
    \     UNilateral Self-Address Fixing (UNSAF) Across Network\n               Address\
    \ Translation\", RFC 3424, DOI 10.17487/RFC3424,\n               November 2002,\
    \ <http://www.rfc-editor.org/info/rfc3424>.\n   [RFC3489]   Rosenberg, J., Weinberger,\
    \ J., Huitema, C., and R. Mahy,\n               \"STUN - Simple Traversal of User\
    \ Datagram Protocol (UDP)\n               Through Network Address Translators\
    \ (NATs)\", RFC 3489,\n               DOI 10.17487/RFC3489, March 2003,\n    \
    \           <http://www.rfc-editor.org/info/rfc3489>.\n   [RFC3550]   Schulzrinne,\
    \ H., Casner, S., Frederick, R., and V.\n               Jacobson, \"RTP: A Transport\
    \ Protocol for Real-Time\n               Applications\", STD 64, RFC 3550, DOI\
    \ 10.17487/RFC3550,\n               July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC4566]   Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n  \
    \             Description Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n      \
    \         July 2006, <http://www.rfc-editor.org/info/rfc4566>.\n   [RFC4571] \
    \  Lazzaro, J., \"Framing Real-time Transport Protocol (RTP)\n               and\
    \ RTP Control Protocol (RTCP) Packets over Connection-\n               Oriented\
    \ Transport\", RFC 4571, DOI 10.17487/RFC4571, July\n               2006, <http://www.rfc-editor.org/info/rfc4571>.\n\
    \   [RFC4787]   Audet, F., Ed. and C. Jennings, \"Network Address\n          \
    \     Translation (NAT) Behavioral Requirements for Unicast\n               UDP\"\
    , BCP 127, RFC 4787, DOI 10.17487/RFC4787, January\n               2007, <http://www.rfc-editor.org/info/rfc4787>.\n\
    \   [RFC4961]   Wing, D., \"Symmetric RTP / RTP Control Protocol (RTCP)\",\n \
    \              BCP 131, RFC 4961, DOI 10.17487/RFC4961, July 2007,\n         \
    \      <http://www.rfc-editor.org/info/rfc4961>.\n   [RFC5245]   Rosenberg, J.,\
    \ \"Interactive Connectivity Establishment\n               (ICE): A Protocol for\
    \ Network Address Translator (NAT)\n               Traversal for Offer/Answer\
    \ Protocols\", RFC 5245,\n               DOI 10.17487/RFC5245, April 2010,\n \
    \              <http://www.rfc-editor.org/info/rfc5245>.\n   [RFC5382]   Guha,\
    \ S., Ed., Biswas, K., Ford, B., Sivakumar, S., and\n               P.  Srisuresh,\
    \ \"NAT Behavioral Requirements for TCP\",\n               BCP 142, RFC 5382,\
    \ DOI 10.17487/RFC5382, October 2008,\n               <http://www.rfc-editor.org/info/rfc5382>.\n\
    \   [RFC5389]   Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n        \
    \       \"Session Traversal Utilities for NAT (STUN)\", RFC 5389,\n          \
    \     DOI 10.17487/RFC5389, October 2008,\n               <http://www.rfc-editor.org/info/rfc5389>.\n\
    \   [RFC5764]   McGrew, D. and E. Rescorla, \"Datagram Transport Layer\n     \
    \          Security (DTLS) Extension to Establish Keys for the\n             \
    \  Secure Real-time Transport Protocol (SRTP)\", RFC 5764,\n               DOI\
    \ 10.17487/RFC5764, May 2010,\n               <http://www.rfc-editor.org/info/rfc5764>.\n\
    \   [RFC5766]   Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal\n      \
    \         Using Relays around NAT (TURN): Relay Extensions to\n              \
    \ Session Traversal Utilities for NAT (STUN)\", RFC 5766,\n               DOI\
    \ 10.17487/RFC5766, April 2010,\n               <http://www.rfc-editor.org/info/rfc5766>.\n\
    \   [RFC6062]   Perreault, S., Ed. and J. Rosenberg, \"Traversal Using\n     \
    \          Relays around NAT (TURN) Extensions for TCP Allocations\",\n      \
    \         RFC 6062, DOI 10.17487/RFC6062, November 2010,\n               <http://www.rfc-editor.org/info/rfc6062>.\n\
    \   [RFC6263]   Marjou, X. and A. Sollaud, \"Application Mechanism for\n     \
    \          Keeping Alive the NAT Mappings Associated with RTP / RTP\n        \
    \       Control Protocol (RTCP) Flows\", RFC 6263,\n               DOI 10.17487/RFC6263,\
    \ June 2011,\n               <http://www.rfc-editor.org/info/rfc6263>.\n   [RFC6275]\
    \   Perkins, C., Ed., Johnson, D., and J. Arkko, \"Mobility\n               Support\
    \ in IPv6\", RFC 6275, DOI 10.17487/RFC6275, July\n               2011, <http://www.rfc-editor.org/info/rfc6275>.\n\
    \   [RFC7362]   Ivov, E., Kaplan, H., and D. Wing, \"Latching: Hosted NAT\n  \
    \             Traversal (HNT) for Media in Real-Time Communication\",\n      \
    \         RFC 7362, DOI 10.17487/RFC7362, September 2014,\n               <http://www.rfc-editor.org/info/rfc7362>.\n\
    \   [RTP-NO-OP] Andreasen, F., \"A No-Op Payload Format for RTP\", Work in\n \
    \              Progress, draft-ietf-avt-rtp-no-op-04, May 2007.\n   [RTSP]   \
    \   Schulzrinne, H., Rao, A., Lanphier, R., Westerlund, M.,\n               and\
    \ M. Stiemerling, \"Real Time Streaming Protocol 2.0\n               (RTSP)\"\
    , Work in Progress,\n               draft-ietf-mmusic-rfc2326bis-40, February\
    \ 2014.\n   [RTSP-NAT]  Goldberg, J., Westerlund, M., and T. Zeng, \"A Network\n\
    \               Address Translator (NAT) Traversal Mechanism for Media\n     \
    \          Controlled by Real-Time Streaming Protocol (RTSP)\", Work\n       \
    \        in Progress, draft-ietf-mmusic-rtsp-nat-22, July 2014.\n   [STUN-IMPL]\
    \ \"Open Source STUN Client and Server\", May 2013,\n               <http://sourceforge.net/projects/stun/>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would also like to thank all persons on the\
    \ MMUSIC\n   working group's mailing list that have commented on this document.\n\
    \   Persons having contributed to this protocol, in no special order,\n   are:\
    \ Jonathan Rosenberg, Philippe Gentric, Tom Marshall, David Yon,\n   Amir Wolf,\
    \ Anders Klemets, Flemming Andreasen, Ari Keranen, Bill\n   Atwood, Alissa Cooper,\
    \ Colin Perkins, Sarah Banks, David Black, and\n   Alvaro Retana.  Thomas Zeng\
    \ would also like to give special thanks to\n   Greg Sherwood of PacketVideo for\
    \ his input into this memo.\n   Section 1.1 contains text originally written for\
    \ RFC 4787 by Francois\n   Audet and Cullen Jennings.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Magnus Westerlund\n   Ericsson\n   Farogatan 6\n   Stockholm\
    \  SE-164 80\n   Sweden\n   Phone: +46 8 719 0000\n   Email: magnus.westerlund@ericsson.com\n\
    \   Thomas Zeng\n   PacketVideo Corp\n   Email: thomas.zeng@gmail.com\n"
