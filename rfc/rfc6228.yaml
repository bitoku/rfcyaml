- contents:
  - "          Session Initiation Protocol (SIP) Response Code for\n                    Indication
    of Terminated Dialog\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This specification defines a new Session Initiation Protocol (SIP)\n
    \  response code, 199 Early Dialog Terminated, that a SIP forking proxy\n   and
    a User Agent Server (UAS) can use to indicate to upstream SIP\n   entities (including
    the User Agent Client (UAC)) that an early dialog\n   has been terminated, before
    a final response is sent towards the SIP\n   entities.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6228.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Terminology .....................................................4\n   3.
    Applicability and Limitation ....................................4\n   4. User
    Agent Client Behavior ......................................4\n   5. User Agent
    Server Behavior ......................................6\n   6. Proxy Behavior
    ..................................................7\n   7. Backward Compatibility
    ..........................................9\n   8. Usage with SDP Offer/Answer
    .....................................9\n   9. Message Flow Examples ...........................................9\n
    \     9.1. Example with a Forking Proxy that Generates 199 ............9\n      9.2.
    Example with a Forking Proxy that Receives 200 OK .........10\n      9.3. Example
    with Two Forking Proxies, of which One\n           Generates 199 .............................................11\n
    \  10. Security Considerations .......................................12\n   11.
    IANA Considerations ...........................................13\n      11.1.
    IANA Registration of the 199 Response Code ...............13\n      11.2. IANA
    Registration of the 199 Option-Tag ..................13\n   12. Acknowledgements
    ..............................................13\n   13. References ....................................................14\n
    \     13.1. Normative References .....................................14\n      13.2.
    Informative References ...................................14\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   As defined in RFC 3261 [RFC3261], a Session Initiation Protocol
    (SIP)\n   early dialog is created when a non-100 provisional response is sent\n
    \  to the initial dialog initiation request (e.g., INVITE, outside an\n   existing
    dialog).  The dialog is considered to be in early state\n   until a final response
    is sent.\n   When a proxy receives an initial dialog initiation request, it can\n
    \  forward the request towards multiple remote destinations.  When the\n   proxy
    does that, it performs forking [RFC3261].\n   When a forking proxy receives a
    non-100 provisional response, or a\n   2xx final response, it forwards the response
    upstream towards the\n   sender of the associated request.  After a forking proxy
    has\n   forwarded a 2xx final response, it normally generates and sends\n   CANCEL
    requests downstream towards all remote destinations where it\n   previously forked
    the request associated with the 2xx final response\n   and from which it has still
    not received a final response.  The\n   CANCEL requests are sent in order to terminate
    any outstanding early\n   dialogs associated with the request.\n   Upstream SIP
    entities might receive multiple 2xx final responses.\n   When a SIP entity receives
    the first 2xx final response, and it does\n   not intend to accept any subsequent
    2xx final responses, it will\n   automatically terminate any other outstanding
    early dialog associated\n   with the request.  If the SIP entity receives a subsequent
    2xx final\n   response, it will normally generate and send an ACK request, followed\n
    \  with a BYE request, using the dialog identifier retrieved from the\n   2xx
    final response.\n      NOTE: A User Agent Client (UAC) can use the Request-Disposition\n
    \     header field [RFC3841] to request that proxies do not generate and\n      send
    CANCEL requests downstream once they have received the first\n      2xx final
    response.\n   When a forking proxy receives a non-2xx final response, it does
    not\n   always immediately forward the response upstream towards the sender\n
    \  of the associated request.  Instead, the proxy \"stores\" the response\n   and
    waits for subsequent final responses from other remote\n   destinations where
    the associated request was forked.  At some point,\n   the proxy uses a specified
    mechanism to determine the \"best\" final\n   response code, and forwards a final
    response using that response code\n   upstream towards the sender of the associated
    request.  When an\n   upstream SIP entity receives the non-2xx final response,
    it will\n   release resources associated with the session.  The UAC will\n   terminate,
    or retry, the session setup.\n   Since the forking proxy does not always immediately
    forward non-2xx\n   final responses, upstream SIP entities (including the UAC
    that\n   initiated the request) are not immediately informed that an early\n   dialog
    has been terminated, and will therefore maintain resources\n   associated with
    the early dialog reserved until a final response is\n   sent by the proxy, even
    if the early dialog has already been\n   terminated.  A SIP entity could use the
    resources for other things,\n   e.g., to accept subsequent early dialogs that
    it otherwise would\n   reject.\n   This specification defines a new SIP response
    code, 199 Early Dialog\n   Terminated.  A forking proxy can send a 199 provisional
    response to\n   inform upstream SIP entities that an early dialog has been\n   terminated.
    \ A UAS can send a 199 response code, prior to sending a\n   non-2xx final response,
    for the same purpose.  SIP entities that\n   receive the 199 response can use
    it to trigger the release of\n   resources associated with the terminated early
    dialog.  In addition,\n   SIP entities might also use the 199 response to make
    policy decisions\n   related to early dialogs.  For example, a media gate controlling
    a\n   SIP entity might use the 199 response when deciding for which early\n   dialogs
    media will be passed.\n   Section 9 contains signalling examples that show when
    and how a\n   forking proxy generates 199 responses in different situations.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Applicability and Limitation\n   The 199 response code is an optimization,
    and it only optimizes how\n   quickly recipients might be informed about terminated
    early dialogs.\n   The achieved optimization is limited.  Since the response is
    normally\n   not sent reliably by a UAS, and cannot be sent reliably when\n   generated
    and sent by a proxy, it is possible that some or all of the\n   199 responses
    will get lost before they reach the recipients.  In\n   such cases, recipients
    will behave the same as if the 199 response\n   code were not used at all.\n   One
    example for which a UAC could use the 199 response is that when\n   it receives
    a 199 response, it releases resources associated with the\n   terminated early
    dialog.  The UAC could also use the 199 response to\n   make policy decisions
    related to early dialogs.  For example, if a\n   UAC is playing media associated
    with an early dialog, and it then\n   receives a 199 response indicating the early
    dialog has been\n   terminated, it could start playing media associated with a
    different\n   early dialog.\n   Application designers utilizing the 199 response
    code MUST ensure\n   that the application's user experience is acceptable if all
    199\n   responses are lost and not delivered to the recipients.\n"
  title: 3.  Applicability and Limitation
- contents:
  - "4.  User Agent Client Behavior\n   When a UAC sends an initial dialog initiation
    request, and if it is\n   willing to receive 199 responses, it MUST insert a \"199\"
    option-tag\n   in the Supported header field [RFC3261] of the request.  The option-\n
    \  tag indicates that the UAC supports, and is willing to receive, 199\n   responses.
    \ A UAC SHOULD NOT insert a \"199\" option-tag in the Require\n   or the Proxy-Require
    header field [RFC3261] of the request, since in\n   many cases it would result
    in unnecessary session establishment\n   failures.\n      NOTE: The UAC always
    needs to insert a \"199\" option-tag in the\n      Supported header field, in
    order to indicate that it supports, and\n      is willing to receive, 199 responses,
    even if it also inserts the\n      option-tag in the Require or Proxy-Require
    header field.\n   It is RECOMMENDED that a UAC not insert a \"100rel\" option-tag\n
    \  [RFC3262] in the Require header field when it also indicates support\n   for
    199 responses, unless the UAC also uses some other SIP extension\n   or procedure
    that mandates it to do so.  The reason is that proxies\n   are not allowed to
    generate and send 199 responses when the UAC has\n   required provisional responses
    to be sent reliably.\n   When a UAC receives a 199 response, it might release
    resources\n   associated with the terminated early dialog.  A UAC might also use\n
    \  the 199 response to make policy decisions related to early dialogs.\n      NOTE:
    The 199 response indicates that the early dialog has been\n      terminated, so
    there is no need for the UAC to send a BYE request\n      in order to terminate
    the early dialog when it receives the 199\n      response.\n      NOTE: The 199
    response does not affect other early dialogs\n      associated with the session
    establishment.  For those dialogs, the\n      normal SIP rules regarding transaction
    timeout, etc., still apply.\n   Once a UAC has received and accepted a 199 response,
    it MUST NOT send\n   any media associated with the early dialog.  In addition,
    if the UAC\n   is able to associate received media with early dialogs, it MUST
    NOT\n   process any received media associated with the early dialog that was\n
    \  terminated.\n   If multiple usages [RFC5057] are used within an early dialog,
    and it\n   is not clear which dialog usage the 199 response terminates, SIP\n
    \  entities that keep dialog state SHALL NOT release resources\n   associated
    with the early dialog when they receive the 199 response.\n   If a UAC receives
    an unreliably sent 199 response on a dialog that\n   has not previously been established
    (this can happen if a 199\n   response reaches the client before the 18x response
    that would\n   establish the early dialog) it SHALL discard the 199 response.
    \ If a\n   UAC receives a reliably sent 199 response on a dialog that has not\n
    \  previously been created, it MUST acknowledge the 199 response, as\n   described
    in RFC 3262 [RFC3262].\n   If a UAC has received a 199 response for all early
    dialogs, and no\n   early dialogs associated with the session establishment remain,
    it\n   maintains the \"Proceeding\" state [RFC3261] and waits for possible\n   subsequent
    early dialogs to be established, and eventually for a\n   final response to be
    received.\n"
  title: 4.  User Agent Client Behavior
- contents:
  - "5.  User Agent Server Behavior\n   If a UAS receives an initial dialog initiation
    request with a\n   Supported header field that contains a \"199\" option-tag,
    it SHOULD\n   NOT send a 199 response on an early dialog associated with the\n
    \  request before it sends a non-2xx final response.  Cases where a UAS\n   might
    send a 199 response are if it has been configured to do so due\n   to lack of
    support for the 199 response code by forking proxies or\n   other intermediate
    SIP entities, or if it is used in an environment\n   that specifies that it shall
    send a 199 response before sending a\n   non-2xx response.\n      NOTE: If a UAS
    has created multiple early dialogs associated with\n      an initial dialog initiation
    request (the UAS is acting similarly\n      to a forking proxy), it does not always
    intend to send a final\n      response on all of those early dialogs.\n      NOTE:
    If the Require header field of an initial dialog initiation\n      request contains
    a \"100rel\" option-tag, proxies will not be able\n      to generate and send
    199 responses.  In such cases, the UAS might\n      choose to send a 199 response
    on an early dialog before it sends a\n      non-2xx final response, even if it
    would not do so in other cases.\n   If the Supported header field of an initial
    dialog initiation request\n   does not contain a \"199\" option-tag, the UAC MUST
    NOT send a 199\n   response on any early dialog associated with the request.\n
    \  When a UAS generates a 199 response, the response MUST contain a To\n   header
    field tag parameter [RFC3261], in order for other entities to\n   identify the
    early dialog that has been terminated.  The UAS MUST\n   also insert a Reason
    header field [RFC3326] that contains a response\n   code describing the reason
    why the early dialog was terminated.  The\n   UAS MUST NOT insert a \"199\" option-tag
    in the Supported, Require, or\n   Proxy-Require header field of the 199 response.\n
    \  If a UAS intends to send 199 responses, and if it supports the\n   procedures
    defined in RFC 3840 [RFC3840], it MAY during the\n   registration procedure use
    the sip.extensions feature tag [RFC3840]\n   to indicate support for the 199 response
    code.\n   A 199 response SHOULD NOT contain a Session Description Protocol\n   (SDP)
    offer/answer message body, unless required by the rules in\n   RFC 3264 [RFC3264].\n
    \  According to RFC 3264, if an INVITE request does not contain an SDP\n   offer,
    and the 199 response is the a first reliably sent response\n   associated with
    the request, the 199 response is required to contain\n   an SDP offer.  In this
    case, the UAS SHOULD send the 199 response\n   unreliably, or send the 199 response
    reliably and include an SDP\n   offer with no \"m=\" lines in the response.\n
    \  Since a 199 response is only used for information purposes, the UAS\n   SHOULD
    send it unreliably, unless the \"100rel\" option-tag is present\n   in the Require
    header field of the associated request.\n"
  title: 5.  User Agent Server Behavior
- contents:
  - "6.  Proxy Behavior\n   When a proxy receives a 199 response to an initial dialog
    initiation\n   request, it MUST process the response as any other non-100\n   provisional
    response.  The proxy will forward the response upstream\n   towards the sender
    of the associated request.  The proxy MAY release\n   resources it has reserved
    associated with the early dialog that is\n   terminated.  If a proxy receives
    a 199 response out of dialog, it\n   MUST process it as other non-100 provisional
    responses received out\n   of dialog.\n   When a forking proxy receives a non-2xx
    final response to an initial\n   dialog initiation request that it recognizes
    as terminating one or\n   more early dialogs associated with the request, it MUST
    generate and\n   send a 199 response upstream for each of the terminated early
    dialogs\n   that satisfy each of the following conditions:\n   -  The forking
    proxy does not intend to forward the final response\n      immediately (in accordance
    with rules for a forking proxy).\n   -  The UAC has indicated support (by inserting
    the \"199\" option-tag\n      in a Supported header field) for the 199 response
    code in the\n      associated request.\n   -  The UAC has not required provisional
    responses to be sent reliably\n      (i.e., has not inserted the \"100rel\" option-tag
    in a Require or\n      Proxy-Require header field) in the associated request.\n
    \  -  The forking proxy has not already received and forwarded a 199\n      response
    for the early dialog.\n   -  The forking proxy has not already sent a final response
    for any of\n      the early dialogs.\n   As a consequence, once a final response
    to an initial dialog\n   initiation request has been issued by the proxy, no further
    199\n   responses associated with the request will be generated or forwarded\n
    \  by the proxy.\n   When a forking proxy forks an initial dialog initiation request,
    it\n   generates a unique Via header branch parameter value for each forked\n
    \  leg.  A proxy can determine whether additional forking has occurred\n   downstream
    of the proxy by storing the top Via branch value from each\n   response that creates
    an early dialog.  If the same top Via branch\n   value is received for multiple
    early dialogs, the proxy knows that\n   additional forking has occurred downstream
    of the proxy.  A non-2xx\n   final response received for a specific early dialog
    also terminates\n   all other early dialogs for which the same top Via branch
    value was\n   received in the responses that created those early dialogs.\n   Based
    on implementation policy, a forking proxy MAY wait before\n   sending the 199
    response, e.g., if it expects to receive a 2xx final\n   response on another dialog
    shortly after it received the non-2xx\n   final response that triggered the 199
    response.\n   When a forking proxy generates a 199 response, the response MUST\n
    \  contain a To header field tag parameter that identifies the\n   terminated
    early dialog.  A proxy MUST also insert a Reason header\n   field that contains
    the SIP response code of the response that\n   triggered the 199 response.  The
    SIP response code in the Reason\n   header field informs the receiver of the 199
    response about the SIP\n   response code that was used by the UAS to terminate
    the early dialog,\n   and the receiver might use that information for triggering
    different\n   types of actions and procedures.  The proxy MUST NOT insert a \"199\"\n
    \  option-tag in the Supported, Require, or Proxy-Require header field\n   of
    the 199 response.\n   A forking proxy that supports the generation of 199 responses
    MUST\n   keep track of early dialogs, in order to determine whether to\n   generate
    a 199 response when the proxy receives a non-2xx final\n   response.  In addition,
    a proxy MUST keep track on which early\n   dialogs it has received and forwarded
    199 responses, in order to not\n   generate additional 199 responses for those
    early dialogs.\n   If a forking proxy receives a reliably sent 199 response for
    a dialog\n   for which it has previously generated and sent a 199 response, it\n
    \  MUST forward the 199 response.  If a proxy receives an unreliably\n   sent
    199 response for which it has previously generated and sent a\n   199 response,
    it MAY forward the response, or it MAY discard it.\n   When a forking proxy generates
    and sends a 199 response, the response\n   SHOULD NOT contain a Contact header
    field or a Record-Route header\n   field [RFC3261].\n   If the Require header
    field of an initial dialog initiation request\n   contains a \"100rel\" option-tag,
    a proxy MUST NOT generate and send\n   199 responses associated with that request.
    \ The reason is that a\n   proxy is not allowed to generate and send 199 responses
    reliably.\n"
  title: 6.  Proxy Behavior
- contents:
  - "7.  Backward Compatibility\n   Since all SIP entities involved in a session setup
    do not necessarily\n   support the specific meaning of the 199 Early Dialog Terminated\n
    \  provisional response, the sender of the response MUST be prepared to\n   receive
    SIP requests and responses associated with the dialog for\n   which the 199 response
    was sent (a proxy can receive SIP messages\n   from either direction).  If such
    a request is received by a UA, it\n   MUST act in the same way as if it had received
    the request after\n   sending the final non-2xx response to the INVITE request,
    as\n   specified in RFC 3261.  A UAC that receives a 199 response for an\n   early
    dialog MUST NOT send any further requests on that dialog,\n   except for requests
    that acknowledge reliable responses.  A proxy\n   MUST forward requests according
    to RFC 3261, even if the proxy has\n   knowledge that the early dialog has been
    terminated.\n   A 199 response does not \"replace\" a final response.  RFC 3261\n
    \  specifies when a final response is sent.\n"
  title: 7.  Backward Compatibility
- contents:
  - "8.  Usage with SDP Offer/Answer\n   A 199 response SHOULD NOT contain an SDP
    offer/answer [RFC3264]\n   message body, unless required by the rules in RFC 3264.\n
    \  If an INVITE request does not contain an SDP offer, and the 199\n   response
    is the first reliably sent response, the 199 response is\n   required to contain
    an SDP offer.  In this case, the UAS SHOULD send\n   the 199 response unreliably,
    or include an SDP offer with no \"m=\"\n   lines in a reliable 199 response.\n"
  title: 8.  Usage with SDP Offer/Answer
- contents:
  - '9.  Message Flow Examples

    '
  - contents:
    - "9.1.  Example with a Forking Proxy that Generates 199\n   Figure 1 shows an
      example where a proxy (P1) forks an INVITE received\n   from a UAC.  The forked
      INVITE reaches UAS_2, UAS_3, and UAS_4, which\n   send 18x provisional responses
      in order to establish early dialogs\n   between themselves and the UAC.  UAS_2
      and UAS_3 each reject the\n   INVITE by sending a 4xx error response.  When
      P1 receives the 4xx\n   responses, it immediately sends 199 responses towards
      the UAC, to\n   indicate that the early dialogs for which it received the 4xx\n
      \  responses have been terminated.  The early dialog leg is shown in\n   parentheses.\n
      \         UAC           P1               UAS_2   UAS_3   UAS_4\n           |
      \            |                 |       |       |\n           |-- INVITE -->|
      \                |       |       |\n           |             |--- INVITE (2)
      ->|       |       |\n           |             |--- INVITE (3) --------->|       |\n
      \          |             |--- INVITE (4) ----------------->|\n           |             |<--
      18x (2) -----|       |       |\n           |<- 18x (2) --|                 |
      \      |       |\n           |             |<-- 18x (3) -------------|       |\n
      \          |<- 18x (3) --|                 |       |       |\n           |             |<--
      18x (4) ---------------------|\n           |<- 18x (4) --|                 |
      \      |       |\n           |             |<-- 4xx (2) -----|       |       |\n
      \          |             |--- ACK (2) ---->|       |       |\n           |<-
      199 (2) --|                 |       |       |\n           |             |<--
      4xx (3) -------------|       |\n           |             |--- ACK (3) ------------>|
      \      |\n           |<- 199 (3) --|                 |       |       |\n           |
      \            |<-- 200 (4) ---------------------|\n           |<- 200 (4) --|
      \                |       |       |\n           |-- ACK (4) ->|                 |
      \      |       |\n           |             |--- ACK (4) -------------------->|\n
      \          |             |                 |       |       |\n                        Figure
      1: Example Call Flow\n"
    title: 9.1.  Example with a Forking Proxy that Generates 199
  - contents:
    - "9.2.  Example with a Forking Proxy that Receives 200 OK\n   Figure 2 shows
      an example where a proxy (P1) forks an INVITE request\n   received from a UAC.
      \ The forked request reaches UAS_2, UAS_3, and\n   UAS_4, all of which send
      18x provisional responses in order to\n   establish early dialogs between themselves
      and the UAC.  Later, UAS_4\n   accepts the session and sends a 200 OK final
      response.  When P1\n   receives the 200 OK response, it immediately forwards
      it towards the\n   UAC.  P1 does not send 199 responses for the early dialogs
      from UAS_2\n   and UAS_3, since P1 has still not received any final responses
      on\n   those early dialogs (even if P1 sends CANCEL requests to UAS_2 and\n
      \  UAS_3, P1 may still receive a 200 OK final response from UAS_2 or\n   UAS_3,
      which P1 would have to forward towards the UAC.  The early\n   dialog leg is
      shown in parentheses.\n          UAC           P1               UAS_2   UAS_3
      \  UAS_4\n           |             |                 |       |       |\n           |--
      INVITE -->|                 |       |       |\n           |             |---
      INVITE (2) ->|       |       |\n           |             |--- INVITE (3) --------->|
      \      |\n           |             |--- INVITE (4) ----------------->|\n           |
      \            |<-- 18x (2) -----|       |       |\n           |<- 18x (2) --|
      \                |       |       |\n           |             |<-- 18x (3) -------------|
      \      |\n           |<- 18x (3) --|                 |       |       |\n           |
      \            |<-- 18x (4) ---------------------|\n           |<- 18x (4) --|
      \                |       |       |\n           |             |<-- 200 (4) ---------------------|\n
      \          |<- 200 (4) --|                 |       |       |\n           |--
      ACK (4) ->|                 |       |       |\n           |             |---
      ACK (4) -------------------->|\n           |             |                 |
      \      |       |\n                        Figure 2: Example Call Flow\n"
    title: 9.2.  Example with a Forking Proxy that Receives 200 OK
  - contents:
    - "9.3.  Example with Two Forking Proxies, of which One Generates 199\n   Figure
      3 shows an example where a proxy (P1) forks an INVITE request\n   received from
      a UAC.  One of the forked requests reaches UAS_2.  The\n   other requests reach
      another proxy (P2), which forks the request to\n   UAS_3 and UAS_4.  UAS_3 and
      UAS_4 send 18x provisional responses in\n   order to establish early dialogs
      between themselves and the UAC.\n   Later, UAS_3 and UAS_4 each reject the INVITE
      request by sending a\n   4xx error response.  P2 does not support the 199 response
      code and\n   forwards a single 4xx response.  P1 supports the 199 response code,\n
      \  and when it receives the 4xx response from P2, it also manages to\n   associate
      the early dialogs from both UAS_3 and UAS_4 with the\n   response.  Therefore,
      P1 generates and sends two 199 responses to\n   indicate that the early dialogs
      from UAS_3 and UAS_4 have been\n   terminated.  The early dialog leg is shown
      in parentheses.\n    UAC           P1              P2               UAS_2   UAS_3
      \  UAS_4\n     |             |               |                 |       |       |\n
      \    |-- INVITE -->|               |                 |       |       |\n     |
      \            |-- INVITE (2) ------------------>|       |       |\n     |             |--
      INVITE ---->|                 |       |       |\n     |             |               |---
      INVITE (3) --------->|       |\n     |             |               |--- INVITE
      (4) ----------------->|\n     |             |               |<-- 18x (3) -------------|
      \      |\n     |             |<- 18x (3) ----|                 |       |       |\n
      \    |<- 18x (3) --|               |                 |       |       |\n     |
      \            |               |<-- 18x (4) ---------------------|\n     |             |<-
      18x (4) ----|                 |       |       |\n     |<- 18x (4) --|               |
      \                |       |       |\n     |             |               |<--
      4xx (3) -------------|       |\n     |             |               |--- ACK
      (3) ------------>|       |\n     |             |               |<-- 4xx (4)
      ---------------------|\n     |             |               |--- ACK (4) -------------------->|\n
      \    |             |<- 4xx (3) ----|                 |       |       |\n     |
      \            |-- ACK (3) --->|                 |       |       |\n     |<- 199
      (3) --|               |                 |       |       |\n     |<- 199 (4)
      --|               |                 |       |       |\n     |             |<-
      200 (2) ----------------------|       |       |\n     |<- 200 (2) --|               |
      \                |       |       |\n     |-- ACK (2) ->|               |                 |
      \      |       |\n     |             |-- ACK (2) --------------------->|       |
      \      |\n     |             |               |                 |       |       |\n
      \                       Figure 3: Example Call Flow\n"
    title: 9.3.  Example with Two Forking Proxies, of which One Generates 199
  title: 9.  Message Flow Examples
- contents:
  - "10.  Security Considerations\n   General security issues related to SIP responses
    are described in\n   RFC 3261.  Due to the nature of the 199 response, it may
    be\n   attractive to use it for launching attacks in order to terminate\n   specific
    early dialogs (other early dialogs will not be affected).\n   In addition, if
    a man-in-the-middle generates and sends towards the\n   UAC a 199 response that
    terminates a specific dialog, it can take a\n   while until the UAS finds out
    that the UAC, and possible stateful\n   intermediates, have terminated the dialog.
    \ SIP security mechanisms\n   (e.g., hop-to-hop Transport Layer Security (TLS))
    can be used to\n   minimize, or eliminate, the risk of such attacks.\n"
  title: 10.  Security Considerations
- contents:
  - "11.  IANA Considerations\n   This section registers a new SIP response code and
    a new option-tag,\n   according to the procedures of RFC 3261.\n"
  - contents:
    - "11.1.  IANA Registration of the 199 Response Code\n   This section registers
      a new SIP response code, 199.  The required\n   information for this registration,
      as specified in RFC 3261, is:\n      RFC Number: RFC 6228\n      Response Code
      Number: 199\n      Default Reason Phrase: Early Dialog Terminated\n"
    title: 11.1.  IANA Registration of the 199 Response Code
  - contents:
    - "11.2.  IANA Registration of the 199 Option-Tag\n   This section registers a
      new SIP option-tag, 199.  The required\n   information for this registration,
      as specified in RFC 3261, is:\n      Name: 199\n      Description: This option-tag
      is for indicating support of the 199\n         Early Dialog Terminated provisional
      response code.  When\n         present in a Supported header of a request, it
      indicates that\n         the UAC supports the 199 response code.  When present
      in a\n         Require or Proxy-Require header field of a request, it\n         indicates
      that the UAS, or proxies, MUST support the 199\n         response code.  It
      does not require the UAS, or proxies, to\n         actually send 199 responses.\n"
    title: 11.2.  IANA Registration of the 199 Option-Tag
  title: 11.  IANA Considerations
- contents:
  - "12.  Acknowledgements\n   Thanks to Paul Kyzivat, Dale Worley, Gilad Shaham,
    Francois Audet,\n   Attila Sipos, Robert Sparks, Brett Tate, Ian Elz, Hadriel
    Kaplan,\n   Timothy Dwight, Dean Willis, Serhad Doken, John Elwell, Gonzalo\n
    \  Camarillo, Adam Roach, Bob Penfield, Tom Taylor, Ya Ching Tan, Keith\n   Drage,
    Hans Erik van Elburg, and Cullen Jennings for their feedback\n   and suggestions.\n"
  title: 12.  Acknowledgements
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n
      \             A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,
      \"SIP: Session Initiation Protocol\", RFC 3261,\n              June 2002.\n
      \  [RFC3262]  Rosenberg, J. and H. Schulzrinne, \"Reliability of\n              Provisional
      Responses in Session Initiation Protocol\n              (SIP)\", RFC 3262, June
      2002.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n
      \             with Session Description Protocol (SDP)\", RFC 3264,\n              June
      2002.\n   [RFC3326]  Schulzrinne, H., Oran, D., and G. Camarillo, \"The Reason\n
      \             Header Field for the Session Initiation Protocol (SIP)\",\n              RFC
      3326, December 2002.\n   [RFC3840]  Rosenberg, J., Schulzrinne, H., and P. Kyzivat,\n
      \             \"Indicating User Agent Capabilities in the Session\n              Initiation
      Protocol (SIP)\", RFC 3840, August 2004.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [RFC3841]  Rosenberg, J., Schulzrinne, H.,
      and P. Kyzivat, \"Caller\n              Preferences for the Session Initiation
      Protocol (SIP)\",\n              RFC 3841, August 2004.\n   [RFC5057]  Sparks,
      R., \"Multiple Dialog Usages in the Session\n              Initiation Protocol\",
      RFC 5057, November 2007.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Author's Address\n   Christer Holmberg\n   Ericsson\n   Hirsalantie 11\n   Jorvas
    \ 02420\n   Finland\n   EMail: christer.holmberg@ericsson.com\n"
  title: Author's Address
