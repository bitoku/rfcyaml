- title: __initial_text__
  contents:
  - '                Network Reconnaissance in IPv6 Networks

    '
- title: Abstract
  contents:
  - "Abstract\n   IPv6 offers a much larger address space than that of its IPv4\n\
    \   counterpart.  An IPv6 subnet of size /64 can (in theory) accommodate\n   approximately\
    \ 1.844 * 10^19 hosts, thus resulting in a much lower\n   host density (#hosts/#addresses)\
    \ than is typical in IPv4 networks,\n   where a site typically has 65,000 or fewer\
    \ unique addresses.  As a\n   result, it is widely assumed that it would take\
    \ a tremendous effort\n   to perform address-scanning attacks against IPv6 networks;\
    \ therefore,\n   IPv6 address-scanning attacks have been considered unfeasible.\
    \  This\n   document formally obsoletes RFC 5157, which first discussed this\n\
    \   assumption, by providing further analysis on how traditional address-\n  \
    \ scanning techniques apply to IPv6 networks and exploring some\n   additional\
    \ techniques that can be employed for IPv6 network\n   reconnaissance.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7707.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Conventions . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Requirements for the Applicability of Network Reconnaissance\n\
    \       Techniques  . . . . . . . . . . . . . . . . . . . . . . . . .   4\n  \
    \ 4.  IPv6 Address Scanning . . . . . . . . . . . . . . . . . . . .   6\n    \
    \ 4.1.  Address Configuration in IPv6 . . . . . . . . . . . . . .   6\n      \
    \ 4.1.1.  Stateless Address Autoconfiguration (SLAAC) . . . . .   6\n       4.1.2.\
    \  Dynamic Host Configuration Protocol for IPv6 (DHCPv6)  11\n       4.1.3.  Manually\
    \ Configured Addresses . . . . . . . . . . . .  12\n       4.1.4.  IPv6 Addresses\
    \ Corresponding to\n               Transition/Coexistence Technologies . . . .\
    \ . . . . .  14\n       4.1.5.  IPv6 Address Assignment in Real-World Network\n\
    \               Scenarios . . . . . . . . . . . . . . . . . . . . . .  14\n  \
    \   4.2.  IPv6 Address Scanning of Remote Networks  . . . . . . . .  17\n    \
    \   4.2.1.  Reducing the Subnet ID Search Space . . . . . . . . .  18\n     4.3.\
    \  IPv6 Address Scanning of Local Networks . . . . . . . . .  19\n     4.4.  Existing\
    \ IPv6 Address-Scanning Tools  . . . . . . . . . .  20\n       4.4.1.  Remote\
    \ IPv6 Network Address Scanners  . . . . . . . .  20\n       4.4.2.  Local IPv6\
    \ Network Address Scanners . . . . . . . . .  21\n     4.5.  Mitigations . . .\
    \ . . . . . . . . . . . . . . . . . . . .  21\n     4.6.  Conclusions . . . .\
    \ . . . . . . . . . . . . . . . . . . .  22\n   5.  Alternative Methods to Glean\
    \ IPv6 Addresses . . . . . . . . .  23\n     5.1.  Leveraging the Domain Name\
    \ System (DNS) for Network\n           Reconnaissance  . . . . . . . . . . . .\
    \ . . . . . . . . .  23\n       5.1.1.  DNS Advertised Hosts  . . . . . . . .\
    \ . . . . . . . .  23\n       5.1.2.  DNS Zone Transfers  . . . . . . . . . .\
    \ . . . . . . .  23\n       5.1.3.  DNS Brute Forcing . . . . . . . . . . . .\
    \ . . . . . .  23\n       5.1.4.  DNS Reverse Mappings  . . . . . . . . . . .\
    \ . . . . .  24\n     5.2.  Leveraging Local Name Resolution and Service Discovery\n\
    \           Services  . . . . . . . . . . . . . . . . . . . . . . . .  24\n  \
    \   5.3.  Public Archives . . . . . . . . . . . . . . . . . . . . .  25\n    \
    \ 5.4.  Application Participation . . . . . . . . . . . . . . . .  25\n     5.5.\
    \  Inspection of the IPv6 Neighbor Cache and Routing Table .  25\n     5.6.  Inspection\
    \ of System Configuration and Log Files  . . . .  26\n     5.7.  Gleaning Information\
    \ from Routing Protocols . . . . . . .  26\n     5.8.  Gleaning Information from\
    \ IP Flow Information Export\n           (IPFIX) . . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  26\n     5.9.  Obtaining Network Information with traceroute6\
    \  . . . . .  26\n     5.10. Gleaning Information from Network Devices Using SNMP\
    \  . .  27\n     5.11. Obtaining Network Information via Traffic Snooping  . .\
    \ .  27\n   6.  Conclusions . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  27\n   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  27\n\
    \   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  28\n  \
    \   8.1.  Normative References  . . . . . . . . . . . . . . . . . .  28\n    \
    \ 8.2.  Informative References  . . . . . . . . . . . . . . . . .  29\n   Appendix\
    \ A.  Implementation of a Full-Fledged IPv6 Address-\n                Scanning\
    \ Tool  . . . . . . . . . . . . . . . . . . .  34\n     A.1.  Host-Probing Considerations\
    \ . . . . . . . . . . . . . . .  34\n     A.2.  Implementation of an IPv6 Local\
    \ Address-Scanning Tool . .  35\n     A.3.  Implementation of an IPv6 Remote Address-Scanning\
    \ Tool  .  36\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  37\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  38\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The main driver for IPv6 [RFC2460] deployment is its larger\
    \ address\n   space [CPNI-IPv6].  This larger address space not only allows for\
    \ an\n   increased number of connected devices but also introduces a number of\n\
    \   subtle changes in several aspects of the resulting networks.  One of\n   these\
    \ changes is the reduced host density (the number of hosts\n   divided by the\
    \ number of addresses) of typical IPv6 subnetworks, when\n   compared to their\
    \ IPv4 counterparts.  [RFC5157] describes how this\n   significantly lower IPv6\
    \ host density is likely to make classic\n   network address-scanning attacks\
    \ less feasible, since even by\n   applying various heuristics, the address space\
    \ to be scanned remains\n   very large.  RFC 5157 goes on to describe some alternative\
    \ methods\n   for attackers to glean active IPv6 addresses and provides some\n\
    \   guidance for administrators and implementors, e.g., not using\n   sequential\
    \ addresses with DHCPv6.\n   With the benefit of more than five years of additional\
    \ IPv6\n   deployment experience, this document formally obsoletes RFC 5157. \
    \ It\n   emphasizes that while address-scanning attacks are less feasible,\n \
    \  they may, with appropriate heuristics, remain possible.  At the time\n   that\
    \ RFC 5157 was written, observed address-scanning attacks were\n   typically across\
    \ ports on the addresses of discovered servers; since\n   then, evidence that\
    \ some classic address scanning is occurring is\n   being witnessed.  This text\
    \ thus updates the analysis on the\n   feasibility of address-scanning attacks\
    \ in IPv6 networks, and it\n   explores a number of additional techniques that\
    \ can be employed for\n   IPv6 network reconnaissance.  Practical examples and\
    \ guidance are\n   also included in the appendices.\n   On one hand, raising awareness\
    \ about IPv6 network reconnaissance\n   techniques may allow (in some cases) network\
    \ and security\n   administrators to prevent or detect such attempts.  On the\
    \ other\n   hand, network reconnaissance is essential for the so-called\n   \"\
    penetration tests\" typically performed to assess the security of\n   production\
    \ networks.  As a result, we believe the benefits of a\n   thorough discussion\
    \ of IPv6 network reconnaissance are twofold.\n   Section 4 analyzes the feasibility\
    \ of address-scanning attacks (e.g.,\n   ping sweeps) in IPv6 networks and explores\
    \ a number of possible\n   improvements to such techniques.  Appendix A describes\
    \ how the\n   aforementioned analysis can be leveraged to produce address-scanning\n\
    \   tools (e.g., for penetration testing purposes).  Finally, the rest of\n  \
    \ this document discusses a number of miscellaneous techniques that\n   could\
    \ be leveraged for IPv6 network reconnaissance.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   Throughout this document, we consider that bits are numbered\
    \ from\n   left to right, starting at 0, and that bytes are numbered from left\n\
    \   to right, starting at 0.\n"
- title: 3.  Requirements for the Applicability of Network Reconnaissance
  contents:
  - "3.  Requirements for the Applicability of Network Reconnaissance\n    Techniques\n\
    \   Throughout this document, a number of network reconnaissance\n   techniques\
    \ are discussed.  Each of these techniques has different\n   requirements on the\
    \ side of the practitioner, with respect to whether\n   they require local access\
    \ to the target network and whether they\n   require login access (or similar\
    \ access credentials) to the system on\n   which the technique is applied.\n \
    \  The following table tries to summarize the aforementioned\n   requirements\
    \ and serves as a cross index to the corresponding\n   sections.\n   +---------------------------------------------+----------+----------+\n\
    \   |                  Technique                  |  Local   |  Login   |\n  \
    \ |                                             |  access  |  access  |\n   +---------------------------------------------+----------+----------+\n\
    \   |    Remote Address Scanning (Section 4.2)    |    No    |    No    |\n  \
    \ +---------------------------------------------+----------+----------+\n   |\
    \     Local Address Scanning (Section 4.3)    |   Yes    |    No    |\n   +---------------------------------------------+----------+----------+\n\
    \   |     DNS Advertised Hosts (Section 5.1.1)    |    No    |    No    |\n  \
    \ +---------------------------------------------+----------+----------+\n   |\
    \      DNS Zone Transfers (Section 5.1.2)     |    No    |    No    |\n   +---------------------------------------------+----------+----------+\n\
    \   |      DNS Brute Forcing (Section 5.1.3)      |    No    |    No    |\n  \
    \ +---------------------------------------------+----------+----------+\n   |\
    \     DNS Reverse Mappings (Section 5.1.4)    |    No    |    No    |\n   +---------------------------------------------+----------+----------+\n\
    \   |     Leveraging Local Name Resolution and    |   Yes    |    No    |\n  \
    \ |   Service Discovery Services (Section 5.2)  |          |          |\n   +---------------------------------------------+----------+----------+\n\
    \   |        Public Archives (Section 5.3)        |    No    |    No    |\n  \
    \ +---------------------------------------------+----------+----------+\n   |\
    \   Application Participation (Section 5.4)   |    No    |    No    |\n   +---------------------------------------------+----------+----------+\n\
    \   |  Inspection of the IPv6 Neighbor Cache and  |    No    |   Yes    |\n  \
    \ |         Routing Table (Section 5.5)         |          |          |\n   +---------------------------------------------+----------+----------+\n\
    \   |   Inspecting System Configuration and Log   |    No    |   Yes    |\n  \
    \ |             Files (Section 5.6)             |          |          |\n   +---------------------------------------------+----------+----------+\n\
    \   | Gleaning Information from Routing Protocols |   Yes    |    No    |\n  \
    \ |                (Section 5.7)                |          |          |\n   +---------------------------------------------+----------+----------+\n\
    \   |      Gleaning Information from IP Flow      |    No    |   Yes    |\n  \
    \ |   Information Export (IPFIX) (Section 5.8)  |          |          |\n   +---------------------------------------------+----------+----------+\n\
    \   |      Obtaining Network Information with     |    No    |    No    |\n  \
    \ |          traceroute6 (Section 5.9)          |          |          |\n   +---------------------------------------------+----------+----------+\n\
    \   |  Gleaning Information from Network Devices  |    No    |   Yes    |\n  \
    \ |          Using SNMP (Section 5.10)          |          |          |\n   +---------------------------------------------+----------+----------+\n\
    \   |  Obtaining Network Information via Traffic  |   Yes    |    No    |\n  \
    \ |           Snooping (Section 5.11)           |          |          |\n   +---------------------------------------------+----------+----------+\n\
    \              Table 1: Requirements for the Applicability of\n              \
    \       Network Reconnaissance Techniques\n"
- title: 4.  IPv6 Address Scanning
  contents:
  - "4.  IPv6 Address Scanning\n   This section discusses how traditional address-scanning\
    \ techniques\n   (e.g., \"ping sweeps\") apply to IPv6 networks.  Section 4.1\
    \ provides\n   an essential analysis of how address configuration is performed\
    \ in\n   IPv6, identifying patterns in IPv6 addresses that can be leveraged to\n\
    \   reduce the IPv6 address search space when performing IPv6 address-\n   scanning\
    \ attacks.  Section 4.2 discusses IPv6 address scanning of\n   remote networks.\
    \  Section 4.3 discusses IPv6 address scanning of\n   local networks.  Section\
    \ 4.4 discusses existing IPv6 address-scanning\n   tools.  Section 4.5 provides\
    \ advice on how to mitigate IPv6 address-\n   scanning attacks.  Finally, Appendix\
    \ A discusses how the insights\n   obtained in the following subsections can be\
    \ incorporated into a\n   fully fledged IPv6 address-scanning tool.\n"
- title: 4.1.  Address Configuration in IPv6
  contents:
  - "4.1.  Address Configuration in IPv6\n   IPv6 incorporates two automatic address-configuration\
    \ mechanisms:\n   Stateless Address Autoconfiguration (SLAAC) [RFC4862] and Dynamic\n\
    \   Host Configuration Protocol for IPv6 (DHCPv6) [RFC3315].  Support for\n  \
    \ SLAAC for automatic address configuration is mandatory, while support\n   for\
    \ DHCPv6 is optional -- however, most current versions of general-\n   purpose\
    \ operating systems support both.  In addition to automatic\n   address configuration,\
    \ hosts, typically servers, may employ manual\n   configuration, in which all\
    \ the necessary information is manually\n   entered by the host or network administrator\
    \ into configuration files\n   at the host.\n   The following subsections describe\
    \ each of the possible configuration\n   mechanisms/approaches in more detail.\n"
- title: 4.1.1.  Stateless Address Autoconfiguration (SLAAC)
  contents:
  - "4.1.1.  Stateless Address Autoconfiguration (SLAAC)\n   The basic idea behind\
    \ SLAAC is that every host joining a network will\n   send a multicasted solicitation\
    \ requesting network configuration\n   information, and local routers will respond\
    \ to the request providing\n   the necessary information.  SLAAC employs two different\
    \ ICMPv6\n   message types: ICMPv6 Router Solicitation and ICMPv6 Router\n   Advertisement\
    \ messages.  Router Solicitation messages are employed by\n   hosts to query local\
    \ routers for configuration information, while\n   Router Advertisement messages\
    \ are employed by local routers to convey\n   the requested information.\n   Router\
    \ Advertisement messages convey a plethora of network\n   configuration information,\
    \ including the IPv6 prefix that should be\n   used for configuring IPv6 addresses\
    \ on the local network.  For each\n   local prefix learned from a Router Advertisement\
    \ message, an IPv6\n   address is configured by appending a locally generated\
    \ Interface\n   Identifier (IID) to the corresponding IPv6 prefix.\n   The following\
    \ subsections describe currently deployed policies for\n   generating the IIDs\
    \ used with SLAAC.\n"
- title: 4.1.1.1.  Interface Identifiers Embedding IEEE Identifiers
  contents:
  - "4.1.1.1.  Interface Identifiers Embedding IEEE Identifiers\n   The traditional\
    \ SLAAC IIDs are based on the link-layer address of the\n   corresponding network\
    \ interface card.  For example, in the case of\n   Ethernet addresses, the IIDs\
    \ are constructed as follows:\n   1.  The \"Universal\" bit (bit 6, from left\
    \ to right) of the address is\n       set to 1.\n   2.  The word 0xfffe is inserted\
    \ between the Organizationally Unique\n       Identifier (OUI) and the rest of\
    \ the Ethernet address.\n   For example, the Media Access Control (MAC) address\
    \ 00:1b:38:83:88:3c\n   would lead to the IID 021b:38ff:fe83:883c.\n   A number\
    \ of considerations should be made about these identifiers.\n   Firstly, one 16-bit\
    \ word (bytes 3-4) of the resulting address always\n   has a fixed value (0xfffe),\
    \ thus reducing the search space for the\n   IID.  Secondly, the high-order three\
    \ bytes of the IID correspond to\n   the OUI of the network interface card vendor.\
    \  Since not all possible\n   OUIs have been assigned, this further reduces the\
    \ IID search space.\n   Furthermore, of the assigned OUIs, many could be regarded\
    \ as\n   corresponding to legacy devices and thus are unlikely to be used for\n\
    \   Internet-connected IPv6-enabled systems, yet further reducing the IID\n  \
    \ search space.  Finally, in some scenarios, it could be possible to\n   infer\
    \ the OUI in use by the target network devices, yet narrowing\n   down the possible\
    \ IIDs even more.\n   NOTE:\n      For example, an organization known for being\
    \ provisioned by vendor\n      X is likely to have most of the nodes in its organizational\n\
    \      network with OUIs corresponding to vendor X.\n   These considerations mean\
    \ that in some scenarios, the original IID\n   search space of 64 bits may be\
    \ effectively reduced to 2^24 or n *\n   2^24 (where \"n\" is the number of different\
    \ OUIs assigned to the\n   target vendor).\n   Furthermore, if just one host address\
    \ is detected or known within a\n   subnet, it is not unlikely that, if systems\
    \ were ordered in a batch,\n   they may have sequential MAC addresses.  Additionally,\
    \ given a MAC\n   address observed in one subnet, sequential or nearby MAC addresses\n\
    \   may be seen in other subnets in the same site.\n   NOTE:\n      [RFC7136]\
    \ notes that all bits of an IID should be treated as\n      \"opaque\" bits. \
    \ Furthermore, [DEFAULT-IIDS] is currently in the\n      process of changing the\
    \ default IID generation scheme to align\n      with [RFC7217] (as described below\
    \ in Section 4.1.1.5), such that\n      IIDs are semantically opaque and do not\
    \ follow any patterns.\n      Therefore, the traditional IIDs based on link-layer\
    \ addresses are\n      expected to become less common over time.\n"
- title: 4.1.1.2.  Interface Identifiers of Virtualization Technologies
  contents:
  - "4.1.1.2.  Interface Identifiers of Virtualization Technologies\n   IIDs resulting\
    \ from virtualization technologies can be considered a\n   specific subcase of\
    \ IIDs embedding IEEE identifiers (please see\n   Section 4.1.1.1): they employ\
    \ IEEE identifiers, but part of the IID\n   has specific patterns.  The following\
    \ subsections describe IIDs of\n   some popular virtualization technologies.\n"
- title: 4.1.1.2.1.  VirtualBox
  contents:
  - "4.1.1.2.1.  VirtualBox\n   All automatically generated MAC addresses in VirtualBox\
    \ virtual\n   machines employ the OUI 08:00:27 [VBox2011].  This means that all\n\
    \   addresses resulting from traditional SLAAC will have an IID of the\n   form\
    \ a00:27ff:feXX:XXXX, thus effectively reducing the IID search\n   space from\
    \ 64 bits to 24 bits.\n"
- title: 4.1.1.2.2.  VMware ESX Server
  contents:
  - "4.1.1.2.2.  VMware ESX Server\n   The VMware ESX server (versions 1.0 to 2.5)\
    \ provides yet a more\n   interesting example.  Automatically generated MAC addresses\
    \ have the\n   following pattern [vmesx2011]:\n   1.  The OUI is set to 00:05:69.\n\
    \   2.  The next 16 bits of the MAC address are set to the same value as\n   \
    \    the last 16 bits of the console operating system's primary IPv4\n       address.\n\
    \   3.  The final 8 bits of the MAC address are set to a hash value based\n  \
    \     on the name of the virtual machine's configuration file.\n   This means\
    \ that, assuming the console operating system's primary IPv4\n   address is known,\
    \ the IID search space is reduced from 64 bits to 8\n   bits.\n   On the other\
    \ hand, manually configured MAC addresses in the VMware\n   ESX server employ\
    \ the OUI 00:50:56, with the low-order three bytes of\n   the MAC address being\
    \ in the range 00:00:00-3F:FF:FF (to avoid\n   conflicts with other VMware products).\
    \  Therefore, even in the case\n   of manually configured MAC addresses, the IID\
    \ search space is reduced\n   from 64 bits to 22 bits.\n"
- title: 4.1.1.2.3.  VMware vSphere
  contents:
  - "4.1.1.2.3.  VMware vSphere\n   VMware vSphere [vSphere] supports these default\
    \ MAC address\n   generation algorithms:\n   o  Generated addresses\n      * \
    \ Assigned by the vCenter server\n      *  Assigned by the ESXi host\n   o  Manually\
    \ configured addresses\n   By default, MAC addresses assigned by the vCenter server\
    \ use the OUI\n   00:50:56 and have the format 00:50:56:XX:YY:ZZ, where XX is\n\
    \   calculated as (0x80 + vCenter Server ID (in the range 0x00-0x3F)),\n   and\
    \ XX and YY are random two-digit hexadecimal numbers.  Thus, the\n   possible\
    \ IID range is 00:50:56:80:00:00-00:50:56:BF:FF:FF; therefore,\n   the search\
    \ space for the resulting SLAAC addresses will be 22 bits.\n   MAC addresses generated\
    \ by the ESXi host use the OUI 00:0C:29 and\n   have the format 00:0C:29:XX:YY:ZZ,\
    \ where XX, YY, and ZZ are the last\n   three octets in hexadecimal format of\
    \ the virtual machine Universally\n   Unique Identifier (UUID) (based on a hash\
    \ calculated with the UUID of\n   the ESXi physical machine and the path to a\
    \ configuration file).\n   Thus, the MAC addresses will be in the range\n   00:0C:29:00:00:00-00:0C:29:FF:FF:FF;\
    \ therefore, the search space for\n   the resulting SLAAC addresses will be 24\
    \ bits.\n   Finally, manually configured MAC addresses employ the OUI 00:50:56,\n\
    \   with the low-order three bytes being in the range 00:00:00-3F:FF:FF\n   (to\
    \ avoid conflicts with other VMware products).  Therefore, the\n   resulting MAC\
    \ addresses will be in the range\n   00:50:56:00:00:00-00:50:56:3F:FF:FF, and\
    \ the search space for the\n   corresponding SLAAC addresses will be 22 bits.\n"
- title: 4.1.1.3.  Temporary Addresses
  contents:
  - "4.1.1.3.  Temporary Addresses\n   Privacy concerns [Gont-DEEPSEC2011] [RFC7721]\
    \ regarding IIDs\n   embedding IEEE identifiers led to the introduction of \"\
    Privacy\n   Extensions for Stateless Address Autoconfiguration in IPv6\"\n   [RFC4941],\
    \ also known as \"temporary addresses\" or \"privacy\n   addresses\".  Essentially,\
    \ \"temporary addresses\" produce random\n   addresses by concatenating a random\
    \ identifier to the\n   autoconfiguration IPv6 prefix advertised in a Router Advertisement\n\
    \   message.\n   NOTE:\n      In addition to their unpredictability, these addresses\
    \ are\n      typically short-lived, such that even if an attacker were to learn\n\
    \      of one of these addresses, they would be of use for a limited\n      period\
    \ of time.  A typical implementation may keep a temporary\n      address preferred\
    \ for 24 hours, and configured but deprecated for\n      seven days.\n   It is\
    \ important to note that \"temporary addresses\" are generated in\n   addition\
    \ to the stable addresses [RFC7721] (such as the traditional\n   SLAAC addresses\
    \ based on IEEE identifiers): stable SLAAC addresses\n   are meant to be employed\
    \ for \"server-like\" inbound communications,\n   while \"temporary addresses\"\
    \ are meant to be employed for \"client-\n   like\" outbound communications. \
    \ This means that implementation/use of\n   \"temporary addresses\" does not prevent\
    \ an attacker from leveraging\n   the predictability of stable SLAAC addresses,\
    \ since \"temporary\n   addresses\" are generated in addition to (rather than\
    \ as a replacement\n   of) the stable SLAAC addresses (such as those derived from\
    \ IEEE\n   identifiers).\n   The benefit that temporary addresses offer in this\
    \ context is that\n   they reduce the exposure of the host addresses to any third\
    \ parties\n   that may observe traffic sent from a host where temporary addresses\n\
    \   are enabled and used by default.  But, in the absence of firewall\n   protection\
    \ for the host, its stable SLAAC address remains liable to\n   be scanned from\
    \ off-site.\n"
- title: 4.1.1.4.  Constant, Semantically Opaque IIDs
  contents:
  - "4.1.1.4.  Constant, Semantically Opaque IIDs\n   In order to mitigate the security\
    \ implications arising from the\n   predictable IPv6 addresses derived from IEEE\
    \ identifiers, Microsoft\n   Windows produced an alternative scheme for generating\
    \ \"stable\n   addresses\" (in replacement of the ones embedding IEEE identifiers).\n\
    \   The aforementioned scheme is believed to be an implementation of RFC\n   4941\
    \ [RFC4941], but without regenerating the addresses over time.\n   The resulting\
    \ IIDs are constant across system bootstraps, and also\n   constant across networks.\n\
    \   Assuming no flaws in the aforementioned algorithm, this scheme would\n   remove\
    \ any patterns from the SLAAC addresses.\n   NOTE:\n      However, since the resulting\
    \ IIDs are constant across networks,\n      these addresses may still be leveraged\
    \ for host-tracking purposes\n      [RFC7217] [RFC7721].\n   The benefit of this\
    \ scheme is thus that the host may be less readily\n   detected by applying heuristics\
    \ to an address-scanning attack, but,\n   in the absence of concurrent use of\
    \ temporary addresses, the host is\n   liable to be tracked across visited networks.\n"
- title: 4.1.1.5.  Stable, Semantically Opaque IIDs
  contents:
  - "4.1.1.5.  Stable, Semantically Opaque IIDs\n   In response to the predictability\
    \ issues discussed in Section 4.1.1.1\n   and the privacy issues discussed in\
    \ [RFC7721], the IETF has\n   standardized (in [RFC7217]) a method for generating\
    \ IPv6 IIDs to be\n   used with IPv6 SLAAC, such that addresses configured using\
    \ this\n   method are stable within each subnet, but the IIDs change when hosts\n\
    \   move from one subnet to another.  The aforementioned method is meant\n   to\
    \ be an alternative to generating IIDs based on IEEE identifiers,\n   such that\
    \ the benefits of stable addresses can be achieved without\n   sacrificing the\
    \ privacy of users.\n   Implementation of this method (in replacement of IIDs\
    \ based on IEEE\n   identifiers) eliminates any patterns from the IID, thus benefiting\n\
    \   user privacy and reducing the ease with which addresses can be\n   scanned.\n"
- title: 4.1.2.  Dynamic Host Configuration Protocol for IPv6 (DHCPv6)
  contents:
  - "4.1.2.  Dynamic Host Configuration Protocol for IPv6 (DHCPv6)\n   DHCPv6 can\
    \ be employed as a stateful address configuration mechanism,\n   in which a server\
    \ (the DHCPv6 server) leases IPv6 addresses to IPv6\n   hosts.  As with the IPv4\
    \ counterpart, addresses are assigned\n   according to a configuration-defined\
    \ address range and policy, with\n   some DHCPv6 servers assigning addresses sequentially,\
    \ from a specific\n   range.  In such cases, addresses tend to be predictable.\n\
    \   NOTE:\n      For example, if the prefix 2001:db8::/64 is used for assigning\n\
    \      addresses on the local network, the DHCPv6 server might\n      (sequentially)\
    \ assign addresses from the range 2001:db8::1 -\n      2001:db8::100.\n   In most\
    \ common scenarios, this means that the IID search space will\n   be reduced from\
    \ the original 64 bits to 8 or 16 bits.  [RFC5157]\n   recommended that DHCPv6\
    \ instead issue addresses randomly from a large\n   pool; that advice is repeated\
    \ here.  [IIDS-DHCPv6] specifies an\n   algorithm that can be employed by DHCPv6\
    \ servers to produce stable\n   addresses that do not follow any specific pattern,\
    \ thus resulting in\n   an IID search space of 64 bits.\n"
- title: 4.1.3.  Manually Configured Addresses
  contents:
  - "4.1.3.  Manually Configured Addresses\n   In some scenarios, node addresses may\
    \ be manually configured.  This\n   is typically the case for IPv6 addresses assigned\
    \ to routers (since\n   routers do not employ automatic address configuration)\
    \ but also for\n   servers (since having a stable address that does not depend\
    \ on the\n   underlying link-layer address is generally desirable).\n   While\
    \ network administrators are mostly free to select the IID from\n   any value\
    \ in the range 1 - 2^64, for the sake of simplicity (i.e.,\n   ease of remembering),\
    \ they tend to select addresses with one of the\n   following patterns:\n   o\
    \  low-byte addresses: in which most of the bytes of the IID are set\n      to\
    \ 0 (except for the least significant byte)\n   o  IPv4-based addresses: in which\
    \ the IID embeds the IPv4 address of\n      the network interface (as in 2001:db8::192.0.2.1)\n\
    \   o  service port addresses: in which the IID embeds the TCP/UDP\n      service\
    \ port of the main service running on that node (as in\n      2001:db8::80 or\
    \ 2001:db8::25)\n   o  wordy addresses: which encode words (as in 2001:db8::bad:cafe)\n\
    \   Each of these patterns is discussed in detail in the following\n   subsections.\n"
- title: 4.1.3.1.  Low-Byte Addresses
  contents:
  - "4.1.3.1.  Low-Byte Addresses\n   The most common form of low-byte addresses is\
    \ that in which all the\n   bytes of the IID (except the least significant bytes)\
    \ are set to zero\n   (as in 2001:db8::1, 2001:db8::2, etc.).  However, it is\
    \ also common\n   to find similar addresses in which the two lowest-order 16-bit\
    \ words\n   (from the right to left) are set to small numbers (as in\n   2001::db8::1:10,\
    \ 2001:db8::2:10, etc.).  Yet it is not uncommon to\n   find IPv6 addresses in\
    \ which the second lowest-order 16-bit word\n   (from right to left) is set to\
    \ a small value in the range\n   0x0000:0x00ff, while the lowest-order 16-bit\
    \ word (from right to\n   left) varies in the range 0x0000:0xffff.  It should\
    \ be noted that all\n   of these address patterns are generally referred to as\
    \ \"low-byte\n   addresses\", even when, strictly speaking, it is not only the\
    \ lowest-\n   order byte of the IPv6 address that varies from one address to\n\
    \   another.\n   In the worst-case scenario, the search space for this pattern\
    \ is 2^24\n   (although most systems can be found by searching 2^16 or even 2^8\n\
    \   addresses).\n"
- title: 4.1.3.2.  IPv4-Based Addresses
  contents:
  - "4.1.3.2.  IPv4-Based Addresses\n   The most common form of these addresses is\
    \ that in which an IPv4\n   address is encoded in the lowest-order 32 bits of\
    \ the IPv6 address\n   (usually as a result of the address notation of the form\n\
    \   2001:db8::192.0.2.1).  However, it is also common for administrators\n   to\
    \ encode each of the bytes of the IPv4 address in each of the 16-bit\n   words\
    \ of the IID (as in, e.g., 2001:db8::192:0:2:1).\n   Therefore, the search space\
    \ for addresses following this pattern is\n   that of the corresponding IPv4 prefix\
    \ (or twice the size of that\n   search space if both forms of \"IPv4-based addresses\"\
    \ are to be\n   searched).\n"
- title: 4.1.3.3.  Service-Port Addresses
  contents:
  - "4.1.3.3.  Service-Port Addresses\n   Addresses following this pattern include\
    \ the service port (e.g., 80\n   for HTTP) in the lowest-order byte of the IID\
    \ and have the rest of\n   the bytes of the IID set to zero.  There are a number\
    \ of variants for\n   this address pattern:\n   o  The lowest-order 16-bit word\
    \ (from right to left) may contain the\n      service port, and the second lowest-order\
    \ 16-bit word (from right\n      to left) may be set to a number in the range\
    \ 0x0000-0x00ff (as in,\n      e.g., 2001:db8::1:80).\n   o  The lowest-order\
    \ 16-bit word (from right to left) may be set to a\n      value in the range 0x0000-0x00ff,\
    \ while the second lowest-order\n      16-bit word (from right to left) may contain\
    \ the service port (as\n      in, e.g., 2001:db8::80:1).\n   o  The service port\
    \ itself might be encoded in decimal or in\n      hexadecimal notation (e.g.,\
    \ an address embedding the HTTP port\n      might be 2001:db8::80 or 2001:db8::50)\
    \ -- with addresses encoding\n      the service port as a decimal number being\
    \ more common.\n   Considering a maximum of 20 popular service ports, the search\
    \ space\n   for addresses following this pattern is, in the worst-case scenario,\n\
    \   10 * 2^11.\n"
- title: 4.1.3.4.  Wordy Addresses
  contents:
  - "4.1.3.4.  Wordy Addresses\n   Since the IPv6 address notation allows for a number\
    \ of hexadecimal\n   digits, it is not difficult to encode words into IPv6 addresses\
    \ (as\n   in, e.g., 2001:db8::bad:cafe).\n   Addresses following this pattern\
    \ are likely to be explored by means\n   of \"dictionary attacks\"; therefore,\
    \ computing the corresponding\n   search space is not straightforward.\n"
- title: 4.1.4.  IPv6 Addresses Corresponding to Transition/Coexistence
  contents:
  - "4.1.4.  IPv6 Addresses Corresponding to Transition/Coexistence\n        Technologies\n\
    \   Some transition/coexistence technologies might be leveraged to reduce\n  \
    \ the target search space of remote address-scanning attacks, since\n   they specify\
    \ how the corresponding IPv6 address must be generated.\n   For example, in the\
    \ case of Teredo [RFC4380], the 64-bit IID is\n   generated from the IPv4 address\
    \ observed at a Teredo server along\n   with a UDP port number.\n   For obvious\
    \ reasons, the search space for these addresses will depend\n   on the specific\
    \ transition/coexistence technology being employed.\n"
- title: 4.1.5.  IPv6 Address Assignment in Real-World Network Scenarios
  contents:
  - "4.1.5.  IPv6 Address Assignment in Real-World Network Scenarios\n   Figures 1,\
    \ 2, and 3 provide a summary of the results obtained by\n   [Gont-LACSEC2013]\
    \ when measuring the address patterns employed by web\n   servers, name servers,\
    \ and mail servers, respectively.  Figure 4\n   provides a rough summary of the\
    \ results obtained by [Malone2008] for\n   IPv6 routers.  Figure 5 provides a\
    \ summary of the results obtained by\n   [Ford2013] for clients.\n           \
    \           +---------------+------------+\n                      |  Address type\
    \ | Percentage |\n                      +---------------+------------+\n     \
    \                 |   IEEE-based  |    1.44%   |\n                      +---------------+------------+\n\
    \                      | Embedded-IPv4 |   25.41%   |\n                      +---------------+------------+\n\
    \                      | Embedded-Port |    3.06%   |\n                      +---------------+------------+\n\
    \                      |     ISATAP    |    0.00%   |\n                      +---------------+------------+\n\
    \                      |    Low-byte   |   56.88%   |\n                      +---------------+------------+\n\
    \                      |  Byte-pattern |    6.97%   |\n                      +---------------+------------+\n\
    \                      |   Randomized  |    6.24%   |\n                      +---------------+------------+\n\
    \                  Figure 1: Measured Web Server Addresses\n                 \
    \     +---------------+------------+\n                      |  Address type |\
    \ Percentage |\n                      +---------------+------------+\n       \
    \               |   IEEE-based  |    0.67%   |\n                      +---------------+------------+\n\
    \                      | Embedded-IPv4 |   22.11%   |\n                      +---------------+------------+\n\
    \                      | Embedded-Port |    6.48%   |\n                      +---------------+------------+\n\
    \                      |     ISATAP    |    0.00%   |\n                      +---------------+------------+\n\
    \                      |    Low-byte   |   56.58%   |\n                      +---------------+------------+\n\
    \                      |  Byte-pattern |   11.07%   |\n                      +---------------+------------+\n\
    \                      |   Randomized  |    3.09%   |\n                      +---------------+------------+\n\
    \                 Figure 2: Measured Name Server Addresses\n                 \
    \     +---------------+------------+\n                      |  Address type |\
    \ Percentage |\n                      +---------------+------------+\n       \
    \               |   IEEE-based  |    0.48%   |\n                      +---------------+------------+\n\
    \                      | Embedded-IPv4 |    4.02%   |\n                      +---------------+------------+\n\
    \                      | Embedded-Port |    1.07%   |\n                      +---------------+------------+\n\
    \                      |     ISATAP    |    0.00%   |\n                      +---------------+------------+\n\
    \                      |    Low-byte   |   92.65%   |\n                      +---------------+------------+\n\
    \                      |  Byte-pattern |    1.20%   |\n                      +---------------+------------+\n\
    \                      |   Randomized  |    0.59%   |\n                      +---------------+------------+\n\
    \                 Figure 3: Measured Mail Server Addresses\n                 \
    \      +--------------+------------+\n                       | Address type |\
    \ Percentage |\n                       +--------------+------------+\n       \
    \                |   Low-byte   |   70.00%   |\n                       +--------------+------------+\n\
    \                       |  IPv4-based  |    5.00%   |\n                      \
    \ +--------------+------------+\n                       |    SLAAC     |    1.00%\
    \   |\n                       +--------------+------------+\n                \
    \       |    Wordy     |   <1.00%   |\n                       +--------------+------------+\n\
    \                       |  Randomized  |   <1.00%   |\n                      \
    \ +--------------+------------+\n                       |    Teredo    |   <1.00%\
    \   |\n                       +--------------+------------+\n                \
    \       |    Other     |   <1.00%   |\n                       +--------------+------------+\n\
    \                    Figure 4: Measured Router Addresses\n                   \
    \      +---------------+------------+\n                         |  Address type\
    \ | Percentage |\n                         +---------------+------------+\n  \
    \                       |   IEEE-based  |    7.72%   |\n                     \
    \    +---------------+------------+\n                         | Embedded-IPv4\
    \ |   14.31%   |\n                         +---------------+------------+\n  \
    \                       | Embedded-Port |    0.21%   |\n                     \
    \    +---------------+------------+\n                         |     ISATAP   \
    \ |    1.06%   |\n                         +---------------+------------+\n  \
    \                       |   Randomized  |   69.73%   |\n                     \
    \    +---------------+------------+\n                         |    Low-byte  \
    \ |    6.23%   |\n                         +---------------+------------+\n  \
    \                       |  Byte-pattern |    0.74%   |\n                     \
    \    +---------------+------------+\n                    Figure 5: Measured Client\
    \ Addresses\n   NOTE:\n      \"ISATAP\" stands for \"Intra-Site Automatic Tunnel\
    \ Addressing\n      Protocol\" [RFC5214].\n   It should be clear from these measurements\
    \ that a very high\n   percentage of host and router addresses follow very specific\n\
    \   patterns.\n   Figure 5 shows that while around 70% of clients observed in\
    \ this\n   measurement appear to be using temporary addresses, a significant\n\
    \   number of clients still expose IEEE-based addresses and addresses\n   using\
    \ embedded IPv4 (thus also revealing IPv4 addresses).  Besides,\n   as noted in\
    \ Section 4.1.1.3, temporary addresses are employed along\n   with stable IPv6\
    \ addresses; thus, hosts employing a temporary address\n   may still be the subject\
    \ of address-scanning attacks that target\n   their stable address(es).\n   [ADDR-ANALYSIS]\
    \ contains a spatial and temporal analysis of IPv6\n   addresses corresponding\
    \ to clients and routers.\n"
- title: 4.2.  IPv6 Address Scanning of Remote Networks
  contents:
  - "4.2.  IPv6 Address Scanning of Remote Networks\n   Although attackers have been\
    \ able to get away with \"brute-force\"\n   address-scanning attacks in IPv4 networks\
    \ (thanks to the lesser\n   search space), successfully performing a brute-force\
    \ address-scanning\n   attack of an entire /64 network would be infeasible.  As\
    \ a result, it\n   is expected that attackers will leverage the IPv6 address patterns\n\
    \   discussed in Section 4.1 to reduce the IPv6 address search space.\n   IPv6\
    \ address scanning of remote networks should consider an\n   additional factor\
    \ not present for the IPv4 case: since the typical\n   IPv6 subnet is a /64, scanning\
    \ an entire /64 could, in theory, lead\n   to the creation of 2^64 entries in\
    \ the Neighbor Cache of the last-hop\n   router.  Unfortunately, a number of IPv6\
    \ implementations have been\n   found to be unable to properly handle a large\
    \ number of entries in\n   the Neighbor Cache; hence, these address-scanning attacks\
    \ may have\n   the side effect of resulting in a Denial-of-Service (DoS) attack\n\
    \   [CPNI-IPv6] [RFC6583].\n   [RFC7421] discusses the \"default\" /64 boundary\
    \ for host subnets and\n   the assumptions surrounding it.  While there are reports\
    \ of sites\n   implementing IPv6 subnets of size /112 or smaller to reduce concerns\n\
    \   about the above attack, such smaller subnets are likely to make\n   address-scanning\
    \ attacks more feasible, in addition to encountering\n   the issues with non-/64\
    \ host subnets discussed in [RFC7421].\n"
- title: 4.2.1.  Reducing the Subnet ID Search Space
  contents:
  - "4.2.1.  Reducing the Subnet ID Search Space\n   When address scanning a remote\
    \ network, consideration is required to\n   select which subnet IDs to choose.\
    \  A typical site might have a /48\n   allocation, which would mean up to 65,000\
    \ or so IPv6 /64 subnets to\n   be scanned.\n   However, in the same way the search\
    \ space for the IID can be reduced,\n   we may also be able to reduce the subnet\
    \ ID search space in a number\n   of ways, by guessing likely address plan schemes\
    \ or using any\n   complementary clues that might exist from other sources or\n\
    \   observations.  For example, there are a number of documents available\n  \
    \ online (e.g., [RFC5375]) that provide recommendations for the\n   allocation\
    \ of address space, which address various operational\n   considerations, including\
    \ Regional Internet Registry (RIR) assignment\n   policy, ability to delegate\
    \ reverse DNS zones to different servers,\n   ability to aggregate routes efficiently,\
    \ address space preservation,\n   ability to delegate address assignment within\
    \ the organization,\n   ability to add/allocate new sites/prefixes to existing\
    \ entities\n   without updating Access Control Lists (ACLs), and ability to\n\
    \   de-aggregate and advertise subspaces via various Autonomous System\n   (AS)\
    \ interfaces.\n   Address plans might include use of subnets that:\n   o  Run\
    \ from low ID upwards, e.g., 2001:db8:0::/64, 2001:db8:1::/64,\n      etc.\n \
    \  o  Use building numbers, in hexadecimal or decimal form.\n   o  Use Virtual\
    \ Local Area Network (VLAN) numbers.\n   o  Use an IPv4 subnet number in a dual-stack\
    \ target, e.g., a site\n      with a /16 for IPv4 might use /24 subnets, and the\
    \ IPv6 address\n      plan may reuse the third byte of the IPv4 address as the\
    \ IPv6\n      subnet ID.\n   o  Use the service \"color\", as defined for service-based\
    \ prefix\n      coloring, or semantic prefixes.  For example, a site using a\n\
    \      specific coloring for a specific service such as Voice over IP\n      (VoIP)\
    \ may reduce the subnet ID search space for those devices.\n   The net effect\
    \ is that the address space of an organization may be\n   highly structured, and\
    \ allocations of individual elements within this\n   structure may be predictable\
    \ once other elements are known.\n   In general, any subnet ID address plan may\
    \ convey information, or be\n   based on known information, which may in turn\
    \ be of advantage to an\n   attacker.\n"
- title: 4.3.  IPv6 Address Scanning of Local Networks
  contents:
  - "4.3.  IPv6 Address Scanning of Local Networks\n   IPv6 address scanning in Local\
    \ Area Networks (LANs) could be\n   considered, to some extent, a completely different\
    \ problem than that\n   of scanning a remote IPv6 network.  The main difference\
    \ is that use\n   of link-local multicast addresses can relieve the attacker of\n\
    \   searching for unicast addresses in a large IPv6 address space.\n   NOTE:\n\
    \      While a number of other network reconnaissance vectors (such as\n     \
    \ network snooping, leveraging Neighbor Discovery traffic, etc.) are\n      available\
    \ when scanning a local network, this section focuses only\n      on address-scanning\
    \ attacks (a la \"ping sweep\").\n   An attacker can simply send probe packets\
    \ to the all-nodes link-local\n   multicast address (ff02::1), such that responses\
    \ are elicited from\n   all local nodes.\n   Since Windows systems (Vista, 7,\
    \ etc.) do not respond to ICMPv6 Echo\n   Request messages sent to multicast addresses,\
    \ IPv6 address-scanning\n   tools typically employ a number of additional probe\
    \ packets to elicit\n   responses from all the local nodes.  For example, unrecognized\
    \ IPv6\n   options of type 10xxxxxx elicit Internet Control Message Protocol\n\
    \   version 6 (ICMPv6) Parameter Problem, code 2, error messages.\n   Many address-scanning\
    \ tools discover only IPv6 link-local addresses\n   (rather than, e.g., the global\
    \ addresses of the target systems):\n   since the probe packets are typically\
    \ sent with the attacker's IPv6\n   link-local address, the \"victim\" nodes send\
    \ the response packets\n   using the IPv6 link-local address of the corresponding\
    \ network\n   interface (as specified by the IPv6 address-selection rules\n  \
    \ [RFC6724]).  However, sending multiple probe packets, with each\n   packet employing\
    \ source addresses from different prefixes, typically\n   helps to overcome this\
    \ limitation.\n"
- title: 4.4.  Existing IPv6 Address-Scanning Tools
  contents:
  - '4.4.  Existing IPv6 Address-Scanning Tools

    '
- title: 4.4.1.  Remote IPv6 Network Address Scanners
  contents:
  - "4.4.1.  Remote IPv6 Network Address Scanners\n   IPv4 address-scanning tools\
    \ have traditionally carried out their task\n   by probing an entire address range\
    \ (usually the entire address range\n   comprised by the target subnetwork). \
    \ One might argue that the reason\n   for which they have been able to get away\
    \ with such somewhat\n   \"rudimentary\" techniques is that the scale or challenge\
    \ of the task\n   is so small in the IPv4 world that a \"brute-force\" attack\
    \ is \"good\n   enough\".  However, the scale of the \"address-scanning\" task\
    \ is so\n   large in IPv6 that attackers must be very creative to be \"good\n\
    \   enough\".  Simply sweeping an entire /64 IPv6 subnet would just not be\n \
    \  feasible.\n   Many address-scanning tools do not even support sweeping an IPv6\n\
    \   address range.  On the other hand, the alive6 tool from [THC-IPV6]\n   supports\
    \ sweeping address ranges, thus being able to leverage some\n   patterns found\
    \ in IPv6 addresses, such as the incremental addresses\n   resulting from some\
    \ DHCPv6 setups.  Finally, the scan6 tool from\n   [IPv6-Toolkit] supports sweeping\
    \ address ranges and can also leverage\n   all the address patterns described\
    \ in Section 4.1 of this document.\n   Clearly, a limitation of many of the currently\
    \ available tools for\n   IPv6 address scanning is that they lack an appropriately\
    \ tuned\n   \"heuristics engine\" that can help reduce the search space, such\
    \ that\n   the problem of IPv6 address scanning becomes tractable.\n   It should\
    \ be noted that IPv6 network monitoring and management tools\n   also need to\
    \ build and maintain information about the hosts in their\n   network.  Such systems\
    \ can no longer scan internal systems in a\n   reasonable time to build a database\
    \ of connected systems.  Rather,\n   such systems will need more efficient approaches,\
    \ e.g., by polling\n   network devices for data held about observed IP addresses,\
    \ MAC\n   addresses, physical ports used, etc.  Such an approach can also\n  \
    \ enhance address accountability, by mapping IPv4 and IPv6 addresses to\n   observed\
    \ MAC addresses.  This of course implies that any access\n   control mechanisms\
    \ for querying such network devices, e.g., community\n   strings for SNMP, should\
    \ be set appropriately to avoid an attacker\n   being able to gather address information\
    \ remotely.\n"
- title: 4.4.2.  Local IPv6 Network Address Scanners
  contents:
  - "4.4.2.  Local IPv6 Network Address Scanners\n   There are a variety of publicly\
    \ available local IPv6 network address-\n   scanners:\n   o  Current versions\
    \ of nmap [nmap2015] implement this functionality.\n   o  The Hacker's Choice\
    \ (THC) IPv6 Attack Toolkit [THC-IPV6] includes\n      a tool (alive6) that implements\
    \ this functionality.\n   o  SI6 Network's IPv6 Toolkit [IPv6-Toolkit] includes\
    \ a tool (scan6)\n      that implements this functionality.\n"
- title: 4.5.  Mitigations
  contents:
  - "4.5.  Mitigations\n   IPv6 address-scanning attacks can be mitigated in a number\
    \ of ways.\n   A non-exhaustive list of the possible mitigations includes:\n \
    \  o  Employing [RFC7217] (stable, semantically opaque IIDs) in\n      replacement\
    \ of addresses based on IEEE identifiers, such that any\n      address patterns\
    \ are eliminated.\n   o  Employing Intrusion Prevention Systems (IPSs) at the\
    \ perimeter.\n   o  Enforcing IPv6 packet filtering where applicable (see, e.g.,\n\
    \      [RFC4890]).\n   o  Employing manually configured MAC addresses if virtual\
    \ machines\n      are employed and \"resistance\" to address-scanning attacks\
    \ is\n      deemed desirable, such that even if the virtual machines employ\n\
    \      IEEE-derived IIDs, they are generated from non-predictable MAC\n      addresses.\n\
    \   o  Avoiding use of sequential addresses when using DHCPv6.  Ideally,\n   \
    \   the DHCPv6 server would allocate random addresses from a large\n      pool\
    \ (see, e.g., [IIDS-DHCPv6]).\n   o  Using the \"default\" /64 size IPv6 subnet\
    \ prefixes.\n   o  In general, avoiding being predictable in the way addresses\
    \ are\n      assigned.\n   It should be noted that some of the aforementioned\
    \ mitigations are\n   operational, while others depend on the availability of\
    \ specific\n   protocol features (such as [RFC7217]) on the corresponding nodes.\n\
    \   Additionally, while some resistance to address-scanning attacks is\n   generally\
    \ desirable (particularly when lightweight mitigations are\n   available), there\
    \ are scenarios in which mitigation of some address-\n   scanning vectors is unlikely\
    \ to be a high priority (if at all\n   possible).  And one should always remember\
    \ that security by obscurity\n   is not a reasonable defense in itself; it may\
    \ only be one (relatively\n   small) layer in a broader security environment.\n\
    \   Two of the techniques discussed in this document for local address-\n   scanning\
    \ attacks are those that employ multicasted ICMPv6 Echo\n   Requests and multicasted\
    \ IPv6 packets containing unsupported options\n   of type 10xxxxxx.  These two\
    \ vectors could be easily mitigated by\n   configuring nodes to not respond to\
    \ multicasted ICMPv6 Echo Requests\n   (default on Windows systems) and by updating\
    \ the IPv6 specifications\n   (and/or possibly configuring local nodes) such that\
    \ multicasted\n   packets never elicit ICMPv6 error messages (even if they contain\n\
    \   unsupported options of type 10xxxxxx).\n   NOTE:\n      [SMURF-AMPLIFIER]\
    \ proposed such an update to the IPv6\n      specifications.\n   In any case,\
    \ when it comes to local networks, there are a variety of\n   network reconnaissance\
    \ vectors.  Therefore, even if address-scanning\n   vectors were mitigated, an\
    \ attacker could still rely on, e.g.,\n   protocols employed for the so-called\
    \ \"service discovery protocols\"\n   (see Section 5.2) or eventually rely on\
    \ network snooping as a last\n   resort for network reconnaissance.  There is\
    \ ongoing work in the IETF\n   on extending mDNS, or at least DNS-based service\
    \ discovery, to work\n   across a whole site, rather than in just a single subnet,\
    \ which will\n   have associated security implications.\n"
- title: 4.6.  Conclusions
  contents:
  - "4.6.  Conclusions\n   In the previous subsections, we have shown why a /64 host\
    \ subnet may\n   be more vulnerable to address-based scanning than might intuitively\n\
    \   be thought and how an attacker might reduce the target search space\n   when\
    \ performing an address-scanning attack.\n   We have described a number of mitigations\
    \ against address-scanning\n   attacks, including the replacement of traditional\
    \ SLAAC with stable\n   semantically opaque IIDs (which requires support from\
    \ system\n   vendors).  We have also offered some practical guidance in regard\
    \ to\n   the principle of avoiding predictability in host addressing schemes.\n\
    \   Finally, examples of address-scanning approaches and tools are\n   discussed\
    \ in the appendices.\n   While most early IPv6-enabled networks remain dual stack,\
    \ they are\n   more likely to be scanned and attacked over IPv4 transport, and\
    \ one\n   may argue that the IPv6-specific considerations discussed here are\n\
    \   not of an immediate concern.  However, an early IPv6 deployment\n   within\
    \ a dual-stack network may be seen by an attacker as a\n   potentially \"easier\"\
    \ target if the implementation of security\n   policies is not as strict for IPv6\
    \ (for whatever reason).  As\n   IPv6-only networks become more common, the above\
    \ considerations will\n   be of much greater importance.\n"
- title: 5.  Alternative Methods to Glean IPv6 Addresses
  contents:
  - "5.  Alternative Methods to Glean IPv6 Addresses\n   The following subsections\
    \ describe alternative methods by which an\n   attacker might attempt to glean\
    \ IPv6 addresses for subsequent\n   probing.\n"
- title: 5.1.  Leveraging the Domain Name System (DNS) for Network Reconnaissance
  contents:
  - '5.1.  Leveraging the Domain Name System (DNS) for Network Reconnaissance

    '
- title: 5.1.1.  DNS Advertised Hosts
  contents:
  - "5.1.1.  DNS Advertised Hosts\n   Any systems that are \"published\" in the DNS,\
    \ e.g., Mail Exchange (MX)\n   relays or web servers, will remain open to probing\
    \ from the very fact\n   that their IPv6 addresses are publicly available.  It\
    \ is worth noting\n   that where the addresses used at a site follow specific\
    \ patterns,\n   publishing just one address may lead to an attack upon the other\n\
    \   nodes.\n   Additionally, we note that publication of IPv6 addresses in the\
    \ DNS\n   should not discourage the elimination of IPv6 address patterns: if\n\
    \   any address patterns are eliminated from addresses published in the\n   DNS,\
    \ an attacker may have to rely on performing dictionary-based DNS\n   lookups\
    \ in order to find all systems in a target network (which is\n   generally less\
    \ reliable and more time/traffic consuming than mapping\n   nodes with predictable\
    \ IPv6 addresses).\n"
- title: 5.1.2.  DNS Zone Transfers
  contents:
  - "5.1.2.  DNS Zone Transfers\n   A DNS zone transfer (DNS query type \"AXFR\")\
    \ [RFC1034] [RFC1035] can\n   readily provide information about potential attack\
    \ targets.\n   Restricting zone transfers is thus probably more important for\
    \ IPv6,\n   even if it is already good practice to restrict them in the IPv4\n\
    \   world.\n"
- title: 5.1.3.  DNS Brute Forcing
  contents:
  - "5.1.3.  DNS Brute Forcing\n   Attackers may employ DNS brute-forcing techniques\
    \ by testing for the\n   presence of DNS AAAA records against commonly used host\
    \ names.\n"
- title: 5.1.4.  DNS Reverse Mappings
  contents:
  - "5.1.4.  DNS Reverse Mappings\n   [van-Dijk] describes an interesting technique\
    \ that employs DNS\n   reverse mappings for network reconnaissance.  Essentially,\
    \ the\n   attacker walks through the \"ip6.arpa\" zone looking up PTR records,\
    \ in\n   the hopes of learning the IPv6 addresses of hosts in a given target\n\
    \   network (assuming that the reverse mappings have been configured, of\n   course).\
    \  What is most interesting about this technique is that it\n   can greatly reduce\
    \ the IPv6 address search space.\n   Basically, an attacker would walk the ip6.arpa\
    \ zone corresponding to\n   a target network (e.g., \"0.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa.\"\
    \ for\n   \"2001:db8:80::/48\"), issuing queries for PTR records corresponding\
    \ to\n   the domain names \"0.0.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa.\",\n   \"1.0.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa.\"\
    , etc.  If, say, there were PTR\n   records for any hosts \"starting\" with the\
    \ domain name\n   \"0.0.8.0.0.8.b.d.0.1.0.0.2.ip6.arpa.\" (e.g., the ip6.arpa\
    \ domain name\n   corresponding to the IPv6 address 2001:db8:80::1), the response\
    \ would\n   contain an RCODE of 0 (no error).  Otherwise, the response would\n\
    \   contain an RCODE of 4 (NXDOMAIN).  As noted in [van-Dijk], this\n   technique\
    \ allows for a tremendous reduction in the \"IPv6 address\"\n   search space.\n\
    \   NOTE:\n      Some name servers, incorrectly implementing the DNS protocol,\n\
    \      reply NXDOMAIN instead of NODATA (NOERROR=0 and ANSWER=0) when\n      encountering\
    \ a domain without any resource records but that has\n      child domains, something\
    \ that is very common in ip6.arpa (these\n      domains are called ENT for Empty\
    \ Non-Terminals; see [RFC7719]).\n      When scanning ip6.arpa, this behavior\
    \ may slow down or completely\n      prevent the exploration of ip6.arpa.  Nevertheless,\
    \ since such\n      behavior is wrong (see [NXDOMAIN-DEF]), one cannot rely on\
    \ it to\n      \"secure\" ip6.arpa against tree walking.\n      [IPv6-RDNS] analyzes\
    \ different approaches and considerations for\n      ISPs in managing the ip6.arpa\
    \ zone for IPv6 address space assigned\n      to many customers, which may affect\
    \ the technique described in\n      this section.\n"
- title: 5.2.  Leveraging Local Name Resolution and Service Discovery Services
  contents:
  - "5.2.  Leveraging Local Name Resolution and Service Discovery Services\n   A number\
    \ of protocols allow for unmanaged local name resolution and\n   service.  For\
    \ example, mDNS [RFC6762] and DNS Service Discovery (DNS-\n   SD) [RFC6763], or\
    \ Link-Local Multicast Name Resolution (LLMNR)\n   [RFC4795], are examples of\
    \ such protocols.\n   NOTE:\n      Besides the Graphical User Interfaces (GUIs)\
    \ included in products\n      supporting such protocols, command-line tools such\
    \ as mdns-scan\n      [mdns-scan] and mzclient [mzclient] can help discover IPv6\
    \ hosts\n      employing mDNS/DNS-SD.\n"
- title: 5.3.  Public Archives
  contents:
  - "5.3.  Public Archives\n   Public mailing-list archives or Usenet news messages\
    \ archives may\n   prove to be a useful channel for an attacker, since hostnames\
    \ and/or\n   IPv6 addresses could be easily obtained by inspection of the (many)\n\
    \   \"Received from:\" or other header lines in the archived email or\n   Usenet\
    \ news messages.\n"
- title: 5.4.  Application Participation
  contents:
  - "5.4.  Application Participation\n   Peer-to-peer applications often include some\
    \ centralized server that\n   coordinates the transfer of data between peers.\
    \  For example,\n   BitTorrent [BitTorrent] builds swarms of nodes that exchange\
    \ chunks\n   of files, with a tracker passing information about peers with\n \
    \  available chunks of data between the peers.  Such applications may\n   offer\
    \ an attacker a source of peer addresses to probe.\n"
- title: 5.5.  Inspection of the IPv6 Neighbor Cache and Routing Table
  contents:
  - "5.5.  Inspection of the IPv6 Neighbor Cache and Routing Table\n   Information\
    \ about other systems connected to the local network might\n   be readily available\
    \ from the Neighbor Cache [RFC4861] and/or the\n   routing table of any system\
    \ connected to such network.  Source\n   Address Validation Improvement (SAVI)\
    \ [RFC6620] also builds a cache\n   of IPv6 and link-layer addresses (without\
    \ actively participating in\n   the Neighbor Discovery packet exchange) and hence\
    \ is another source\n   of similar information.\n   These data structures could\
    \ be inspected via either \"login\" access or\n   SNMP.  While this requirement\
    \ may limit the applicability of this\n   technique, there are a number of scenarios\
    \ in which this technique\n   might be of use.  For example, security audit tools\
    \ might be provided\n   with the necessary credentials such that the Neighbor\
    \ Cache and the\n   routing table of all systems for which the tool has \"login\"\
    \ or SNMP\n   access can be automatically gleaned.  On the other hand, IPv6 worms\n\
    \   [V6-WORMS] could leverage this technique for the purpose of spreading\n  \
    \ on the local network, since they will typically have access to the\n   Neighbor\
    \ Cache and routing table of an infected system.\n   Section 2.5.1.4 of [OPSEC-IPv6]\
    \ discusses additional considerations\n   for the inspection of the IPv6 Neighbor\
    \ Cache.\n"
- title: 5.6.  Inspection of System Configuration and Log Files
  contents:
  - "5.6.  Inspection of System Configuration and Log Files\n   Nodes are generally\
    \ configured with the addresses of other important\n   local computers, such as\
    \ email servers, local file servers, web proxy\n   servers, recursive DNS servers,\
    \ etc.  The /etc/hosts file in UNIX-\n   like systems, Secure Shell (SSH) known_hosts\
    \ files, or the Microsoft\n   Windows registry are just some examples of places\
    \ where interesting\n   information about such systems might be found.\n   Additionally,\
    \ system log files (including web server logs, etc.) may\n   also prove to be\
    \ a useful source for an attacker.\n   While the required credentials to access\
    \ the aforementioned\n   configuration and log files may limit the applicability\
    \ of this\n   technique, there are a number of scenarios in which this technique\n\
    \   might be of use.  For example, security audit tools might be provided\n  \
    \ with the necessary credentials such that these files can be\n   automatically\
    \ accessed.  On the other hand, IPv6 worms could leverage\n   this technique for\
    \ the purpose of spreading on the local network,\n   since they will typically\
    \ have access to these files on an infected\n   system [V6-WORMS].\n"
- title: 5.7.  Gleaning Information from Routing Protocols
  contents:
  - "5.7.  Gleaning Information from Routing Protocols\n   Some organizational IPv6\
    \ networks employ routing protocols to\n   dynamically maintain routing information.\
    \  In such an environment, a\n   local attacker could become a passive listener\
    \ of the routing\n   protocol, to determine other valid subnets/prefixes and some\
    \ router\n   addresses within that organization [V6-WORMS].\n"
- title: 5.8.  Gleaning Information from IP Flow Information Export (IPFIX)
  contents:
  - "5.8.  Gleaning Information from IP Flow Information Export (IPFIX)\n   IPFIX\
    \ [RFC7012] can aggregate the flows by source addresses and hence\n   may be leveraged\
    \ for obtaining a list of \"active\" IPv6 addresses.\n   Additional discussion\
    \ of IPFIX can be found in Section 2.5.1.2 of\n   [OPSEC-IPv6].\n"
- title: 5.9.  Obtaining Network Information with traceroute6
  contents:
  - "5.9.  Obtaining Network Information with traceroute6\n   IPv6 traceroute [traceroute6]\
    \ and similar tools (such as path6 from\n   [IPv6-Toolkit]) can be employed to\
    \ find router addresses and valid\n   network prefixes.\n"
- title: 5.10.  Gleaning Information from Network Devices Using SNMP
  contents:
  - "5.10.  Gleaning Information from Network Devices Using SNMP\n   SNMP can be leveraged\
    \ to obtain information from a number of data\n   structures such as the Neighbor\
    \ Cache [RFC4861], the routing table,\n   and the SAVI [RFC6620] cache of IPv6\
    \ and link-layer addresses.  SNMP\n   access should be secured, such that unauthorized\
    \ access to the\n   aforementioned information is prevented.\n"
- title: 5.11.  Obtaining Network Information via Traffic Snooping
  contents:
  - "5.11.  Obtaining Network Information via Traffic Snooping\n   Snooping network\
    \ traffic can help in discovering active nodes in a\n   number of ways.  Firstly,\
    \ each captured packet will reveal the source\n   and destination of the packet.\
    \  Secondly, the captured traffic may\n   correspond to network protocols that\
    \ transfer information such as\n   host or router addresses, network topology\
    \ information, etc.\n"
- title: 6.  Conclusions
  contents:
  - "6.  Conclusions\n   This document explores the topic of network reconnaissance\
    \ in IPv6\n   networks.  It analyzes the feasibility of address-scanning attacks\
    \ in\n   IPv6 networks and shows that the search space for such attacks is\n \
    \  typically much smaller than the one traditionally assumed (64 bits).\n   Additionally,\
    \ this document explores a plethora of other network\n   reconnaissance techniques,\
    \ ranging from inspecting the IPv6 Network\n   Cache of an attacker-controlled\
    \ system to gleaning information about\n   IPv6 addresses from public mailing-list\
    \ archives or Peer-to-Peer\n   (P2P) protocols.\n   We expect traditional address-scanning\
    \ attacks to become more and\n   more elaborated (i.e., less \"brute force\"),\
    \ and other network\n   reconnaissance techniques to be actively explored, as\
    \ global\n   deployment of IPv6 increases and, more specifically, as more\n  \
    \ IPv6-only devices are deployed.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document reviews methods by which addresses\
    \ of hosts within IPv6\n   subnets can be determined.  As such, it raises no new\
    \ security\n   concerns.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names - concepts\
    \ and facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034, November\
    \ 1987,\n              <http://www.rfc-editor.org/info/rfc1034>.\n   [RFC1035]\
    \  Mockapetris, P., \"Domain names - implementation and\n              specification\"\
    , STD 13, RFC 1035, DOI 10.17487/RFC1035,\n              November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n\
    \   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n   \
    \           (IPv6) Specification\", RFC 2460, DOI 10.17487/RFC2460,\n        \
    \      December 1998, <http://www.rfc-editor.org/info/rfc2460>.\n   [RFC3315]\
    \  Droms, R., Ed., Bound, J., Volz, B., Lemon, T., Perkins,\n              C.,\
    \ and M. Carney, \"Dynamic Host Configuration Protocol\n              for IPv6\
    \ (DHCPv6)\", RFC 3315, DOI 10.17487/RFC3315, July\n              2003, <http://www.rfc-editor.org/info/rfc3315>.\n\
    \   [RFC4380]  Huitema, C., \"Teredo: Tunneling IPv6 over UDP through\n      \
    \        Network Address Translations (NATs)\", RFC 4380,\n              DOI 10.17487/RFC4380,\
    \ February 2006,\n              <http://www.rfc-editor.org/info/rfc4380>.\n  \
    \ [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n        \
    \      \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861,\n           \
    \   DOI 10.17487/RFC4861, September 2007,\n              <http://www.rfc-editor.org/info/rfc4861>.\n\
    \   [RFC4862]  Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n    \
    \          Address Autoconfiguration\", RFC 4862,\n              DOI 10.17487/RFC4862,\
    \ September 2007,\n              <http://www.rfc-editor.org/info/rfc4862>.\n \
    \  [RFC4941]  Narten, T., Draves, R., and S. Krishnan, \"Privacy\n           \
    \   Extensions for Stateless Address Autoconfiguration in\n              IPv6\"\
    , RFC 4941, DOI 10.17487/RFC4941, September 2007,\n              <http://www.rfc-editor.org/info/rfc4941>.\n\
    \   [RFC5214]  Templin, F., Gleeson, T., and D. Thaler, \"Intra-Site\n       \
    \       Automatic Tunnel Addressing Protocol (ISATAP)\", RFC 5214,\n         \
    \     DOI 10.17487/RFC5214, March 2008,\n              <http://www.rfc-editor.org/info/rfc5214>.\n\
    \   [RFC6620]  Nordmark, E., Bagnulo, M., and E. Levy-Abegnoli, \"FCFS\n     \
    \         SAVI: First-Come, First-Served Source Address Validation\n         \
    \     Improvement for Locally Assigned IPv6 Addresses\",\n              RFC 6620,\
    \ DOI 10.17487/RFC6620, May 2012,\n              <http://www.rfc-editor.org/info/rfc6620>.\n\
    \   [RFC6724]  Thaler, D., Ed., Draves, R., Matsumoto, A., and T. Chown,\n   \
    \           \"Default Address Selection for Internet Protocol Version 6\n    \
    \          (IPv6)\", RFC 6724, DOI 10.17487/RFC6724, September 2012,\n       \
    \       <http://www.rfc-editor.org/info/rfc6724>.\n   [RFC7012]  Claise, B., Ed.\
    \ and B. Trammell, Ed., \"Information Model\n              for IP Flow Information\
    \ Export (IPFIX)\", RFC 7012,\n              DOI 10.17487/RFC7012, September 2013,\n\
    \              <http://www.rfc-editor.org/info/rfc7012>.\n   [RFC7136]  Carpenter,\
    \ B. and S. Jiang, \"Significance of IPv6\n              Interface Identifiers\"\
    , RFC 7136, DOI 10.17487/RFC7136,\n              February 2014, <http://www.rfc-editor.org/info/rfc7136>.\n\
    \   [RFC7217]  Gont, F., \"A Method for Generating Semantically Opaque\n     \
    \         Interface Identifiers with IPv6 Stateless Address\n              Autoconfiguration\
    \ (SLAAC)\", RFC 7217,\n              DOI 10.17487/RFC7217, April 2014,\n    \
    \          <http://www.rfc-editor.org/info/rfc7217>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [ADDR-ANALYSIS]\n              Plonka, D. and\
    \ A. Berger, \"Temporal and Spatial\n              Classification of Active IPv6\
    \ Addresses\", ACM Internet\n              Measurement Conference (IMC), Tokyo,\
    \ Japan, Pages 509-522,\n              DOI 10.1145/2815675.2815678, October 2015,\n\
    \              <http://conferences2.sigcomm.org/imc/2015/papers/\n           \
    \   p509.pdf>.\n   [BitTorrent]\n              Wikipedia, \"BitTorrent\", November\
    \ 2015,\n              <https://en.wikipedia.org/w/\n              index.php?title=BitTorrent&oldid=690381343>.\n\
    \   [CPNI-IPv6]\n              Gont, F., \"Security Assessment of the Internet\
    \ Protocol\n              version 6 (IPv6)\", UK Centre for the Protection of\n\
    \              National Infrastructure, (available on request).\n   [DEFAULT-IIDS]\n\
    \              Gont, F., Cooper, A., Thaler, D., and W. Liu,\n              \"\
    Recommendation on Stable IPv6 Interface Identifiers\",\n              Work in\
    \ Progress, draft-ietf-6man-default-iids-10,\n              February 2016.\n \
    \  [Ford2013] Ford, M., \"IPv6 Address Analysis - Privacy In, Transition\n   \
    \           Out\", May 2013,\n              <http://www.internetsociety.org/blog/2013/05/\n\
    \              ipv6-address-analysis-privacy-transition-out>.\n   [Gont-DEEPSEC2011]\n\
    \              Gont, F., \"Results of a Security Assessment of the\n         \
    \     Internet Protocol version 6 (IPv6)\", DEEPSEC\n              Conference,\
    \ Vienna, Austria, November 2011,\n              <http://www.si6networks.com/presentations/deepsec2011/\n\
    \              fgont-deepsec2011-ipv6-security.pdf>.\n   [Gont-LACSEC2013]\n \
    \             Gont, F., \"IPv6 Network Reconnaissance: Theory &\n            \
    \  Practice\", LACSEC Conference, Medellin, Colombia, May\n              2013,\
    \ <http://www.si6networks.com/presentations/lacnic19/\n              lacsec2013-fgont-ipv6-network-reconnaissance.pdf>.\n\
    \   [IIDS-DHCPv6]\n              Gont, F. and W. Liu, \"A Method for Generating\
    \ Semantically\n              Opaque Interface Identifiers with Dynamic Host\n\
    \              Configuration Protocol for IPv6 (DHCPv6)\", Work in\n         \
    \     Progress, draft-ietf-dhc-stable-privacy-addresses-02,\n              April\
    \ 2015.\n   [IPV6-EXT-HEADERS]\n              Gont, F., Linkova, J., Chown, T.,\
    \ and W. Liu,\n              \"Observations on the Dropping of Packets with IPv6\n\
    \              Extension Headers in the Real World\", Work in Progress,\n    \
    \          draft-ietf-v6ops-ipv6-ehs-in-real-world-02, December 2015.\n   [IPv6-RDNS]\n\
    \              Howard, L., \"Reverse DNS in IPv6 for Internet Service\n      \
    \        Providers\", Work in Progress, draft-ietf-dnsop-isp-\n              ip6rdns-00,\
    \ October 2015.\n   [IPv6-Toolkit]\n              SI6 Networks, \"SI6 Networks'\
    \ IPv6 Toolkit\",\n              <http://www.si6networks.com/tools/ipv6toolkit>.\n\
    \   [Malone2008]\n              Malone, D., \"Observations of IPv6 Addresses\"\
    , Passive and\n              Active Network Measurement (PAM 2008, LNCS 4979),\n\
    \              DOI 10.1007/978-3-540-79232-1_3, April 2008,\n              <http://www.maths.tcd.ie/~dwmalone/p/addr-pam08.pdf>.\n\
    \   [mdns-scan]\n              Poettering, L., \"mdns-scan(1) Manual Page\",\n\
    \              <http://manpages.ubuntu.com/manpages/precise/man1/\n          \
    \    mdns-scan.1.html>.\n   [mzclient] Bockover, A., \"Mono Zeroconf Project --\
    \ mzclient command-\n              line tool\",\n              <http://www.mono-project.com/archived/monozeroconf/>.\n\
    \   [nmap2015] Lyon, Gordon \"Fyodor\", \"Nmap 7.00\", November 2015,\n      \
    \        <http://insecure.org>.\n   [NXDOMAIN-DEF]\n              Bortzmeyer,\
    \ S. and S. Huque, \"NXDOMAIN really means there\n              is nothing underneath\"\
    , Work in Progress, draft-ietf-\n              dnsop-nxdomain-cut-00, December\
    \ 2015.\n   [OPSEC-IPv6]\n              Chittimaneni, K., Kaeo, M., and E. Vyncke,\
    \ \"Operational\n              Security Considerations for IPv6 Networks\", Work\
    \ in\n              Progress, draft-ietf-opsec-v6-07, September 2015.\n   [RFC4795]\
    \  Aboba, B., Thaler, D., and L. Esibov, \"Link-local\n              Multicast\
    \ Name Resolution (LLMNR)\", RFC 4795,\n              DOI 10.17487/RFC4795, January\
    \ 2007,\n              <http://www.rfc-editor.org/info/rfc4795>.\n   [RFC4890]\
    \  Davies, E. and J. Mohacsi, \"Recommendations for Filtering\n              ICMPv6\
    \ Messages in Firewalls\", RFC 4890,\n              DOI 10.17487/RFC4890, May\
    \ 2007,\n              <http://www.rfc-editor.org/info/rfc4890>.\n   [RFC5157]\
    \  Chown, T., \"IPv6 Implications for Network Scanning\",\n              RFC 5157,\
    \ DOI 10.17487/RFC5157, March 2008,\n              <http://www.rfc-editor.org/info/rfc5157>.\n\
    \   [RFC5375]  Van de Velde, G., Popoviciu, C., Chown, T., Bonness, O.,\n    \
    \          and C. Hahn, \"IPv6 Unicast Address Assignment\n              Considerations\"\
    , RFC 5375, DOI 10.17487/RFC5375, December\n              2008, <http://www.rfc-editor.org/info/rfc5375>.\n\
    \   [RFC6583]  Gashinsky, I., Jaeggli, J., and W. Kumari, \"Operational\n    \
    \          Neighbor Discovery Problems\", RFC 6583,\n              DOI 10.17487/RFC6583,\
    \ March 2012,\n              <http://www.rfc-editor.org/info/rfc6583>.\n   [RFC6762]\
    \  Cheshire, S. and M. Krochmal, \"Multicast DNS\", RFC 6762,\n              DOI\
    \ 10.17487/RFC6762, February 2013,\n              <http://www.rfc-editor.org/info/rfc6762>.\n\
    \   [RFC6763]  Cheshire, S. and M. Krochmal, \"DNS-Based Service\n           \
    \   Discovery\", RFC 6763, DOI 10.17487/RFC6763, February 2013,\n            \
    \  <http://www.rfc-editor.org/info/rfc6763>.\n   [RFC7421]  Carpenter, B., Ed.,\
    \ Chown, T., Gont, F., Jiang, S.,\n              Petrescu, A., and A. Yourtchenko,\
    \ \"Analysis of the 64-bit\n              Boundary in IPv6 Addressing\", RFC 7421,\n\
    \              DOI 10.17487/RFC7421, January 2015,\n              <http://www.rfc-editor.org/info/rfc7421>.\n\
    \   [RFC7719]  Hoffman, P., Sullivan, A., and K. Fujiwara, \"DNS\n           \
    \   Terminology\", RFC 7719, DOI 10.17487/RFC7719, December\n              2015,\
    \ <http://www.rfc-editor.org/info/rfc7719>.\n   [RFC7721]  Cooper, A., Gont, F.,\
    \ and D. Thaler, \"Security and Privacy\n              Considerations for IPv6\
    \ Address Generation Mechanisms\",\n              RFC 7721, DOI 10.17487/RFC7721,\
    \ March 2016,\n              <http://www.rfc-editor.org/info/rfc7721>.\n   [SMURF-AMPLIFIER]\n\
    \              Gont, F. and W. Liu, \"Security Implications of IPv6\n        \
    \      Options of Type 10xxxxxx\", Work in Progress, draft-gont-\n           \
    \   6man-ipv6-smurf-amplifier-03, March 2013.\n   [THC-IPV6] \"THC-IPV6\", <http://www.thc.org/thc-ipv6/>.\n\
    \   [traceroute6]\n              FreeBSD, \"FreeBSD System Manager's Manual: traceroute6(8)\n\
    \              manual page\", August 2009, <https://www.freebsd.org/cgi/\n   \
    \           man.cgi?query=traceroute6>.\n   [V6-WORMS] Bellovin, S., Cheswick,\
    \ B., and A. Keromytis, \"Worm\n              propagation strategies in an IPv6\
    \ Internet\", Vol. 31, No.\n              1, pp. 70-76, February 2006,\n     \
    \         <https://www.cs.columbia.edu/~smb/papers/v6worms.pdf>.\n   [van-Dijk]\
    \ van Dijk, P., \"Finding v6 hosts by efficiently mapping\n              ip6.arpa\"\
    , March 2012, <http://7bits.nl/blog/2012/03/26/\n              finding-v6-hosts-by-efficiently-mapping-ip6-arpa>.\n\
    \   [VBox2011] VirtualBox, \"Oracle VM VirtualBox User Manual\",\n           \
    \   Version 4.1.2, August 2011, <http://www.virtualbox.org>.\n   [vmesx2011]\n\
    \              VMware, \"Setting a static MAC address for a virtual NIC\n    \
    \          (219)\", VMware Knowledge Base, August 2011,\n              <http://kb.vmware.com/selfservice/microsites/\n\
    \              search.do?language=en_US&cmd=displayKC&externalId=219>.\n   [vSphere]\
    \  VMware, \"vSphere Networking\", vSphere 5.5, Update 2,\n              September\
    \ 2014, <http://pubs.vmware.com/\n              vsphere-55/topic/com.vmware.ICbase/PDF/\n\
    \              vsphere-esxi-vcenter-server-552-networking-guide.pdf>.\n"
- title: Appendix A.  Implementation of a Full-Fledged IPv6 Address-Scanning Tool
  contents:
  - "Appendix A.  Implementation of a Full-Fledged IPv6 Address-Scanning Tool\n  \
    \ This section describes the implementation of a full-fledged IPv6\n   address-scanning\
    \ tool.  Appendix A.1 discusses the selection of host\n   probes.  Appendix A.2\
    \ describes the implementation of an IPv6 address\n   scanner for local area networks.\
    \  Appendix A.3 outlines the\n   implementation of a general (i.e., non-local)\
    \ IPv6 address scanner.\n"
- title: A.1.  Host-Probing Considerations
  contents:
  - "A.1.  Host-Probing Considerations\n   A number of factors should be considered\
    \ when selecting the probe\n   packet types and the probing rate for an IPv6 address-scanning\
    \ tool.\n   Firstly, some hosts (or border firewalls) might be configured to\n\
    \   block or rate limit some specific packet types.  For example, it is\n   usual\
    \ for host and router implementations to rate-limit ICMPv6 error\n   traffic.\
    \  Additionally, some firewalls might be configured to block\n   or rate limit\
    \ incoming ICMPv6 echo request packets (see, e.g.,\n   [RFC4890]).\n   NOTE:\n\
    \      As noted earlier in this document, Windows systems simply do not\n    \
    \  respond to ICMPv6 echo requests sent to multicast IPv6 addresses.\n   Among\
    \ the possible probe types are:\n   o  ICMPv6 Echo Request packets (meant to elicit\
    \ ICMPv6 Echo Replies),\n   o  TCP SYN segments (meant to elicit SYN/ACK or RST\
    \ segments),\n   o  TCP segments that do not contain the ACK bit set (meant to\
    \ elicit\n      RST segments),\n   o  UDP datagrams (meant to elicit a UDP application\
    \ response or an\n      ICMPv6 Port Unreachable),\n   o  IPv6 packets containing\
    \ any suitable payload and an unrecognized\n      extension header (meant to elicit\
    \ ICMPv6 Parameter Problem error\n      messages), or\n   o  IPv6 packets containing\
    \ any suitable payload and an unrecognized\n      option of type 10xxxxxx (meant\
    \ to elicit an ICMPv6 Parameter\n      Problem error message).\n   Selecting an\
    \ appropriate probe packet might help conceal the ongoing\n   attack, but it may\
    \ also be actually necessary if host or network\n   configuration causes certain\
    \ probe packets to be dropped.\n   Some address-scanning tools (such as scan6\
    \ of [IPv6-Toolkit])\n   incorporate support for IPv6 extension headers.  In some\
    \ cases,\n   inserting some IPv6 extension headers in the probe packet may allow\n\
    \   some filtering policies or monitoring devices to be circumvented.\n   However,\
    \ it may also result in the probe packets being dropped, as a\n   result of the\
    \ widespread dropping of IPv6 packets that employ IPv6\n   extension headers (see\
    \ [IPV6-EXT-HEADERS]).\n   Another factor to consider is the address-probing rate.\
    \  Clearly, the\n   higher the rate, the smaller the amount of time required to\
    \ perform\n   the attack.  However, the probing rate should not be too high, or\n\
    \   else:\n   1.  the attack might cause network congestion, thus resulting in\n\
    \       packet loss.\n   2.  the attack might hit rate limiting, thus resulting\
    \ in packet\n       loss.\n   3.  the attack might reveal underlying problems\
    \ in Neighbor Discovery\n       implementations, thus leading to packet loss and\
    \ possibly even\n       Denial of Service.\n   Packet loss is undesirable, since\
    \ it would mean that an \"alive\" node\n   might remain undetected as a result\
    \ of a lost probe or response.\n   Such losses could be the result of congestion\
    \ (in case the attacker\n   is scanning a target network at a rate higher than\
    \ the target network\n   can handle) or may be the result of rate limiting (as\
    \ it would be\n   typically the case if ICMPv6 is employed for the probe packets).\n\
    \   Finally, as discussed in [CPNI-IPv6] and [RFC6583], some IPv6 router\n   implementations\
    \ have been found to be unable to perform decent\n   resource management when\
    \ faced with Neighbor Discovery traffic\n   involving a large number of local\
    \ nodes.  This essentially means that\n   regardless of the type of probe packets,\
    \ an address-scanning attack\n   might result in a DoS of the target network,\
    \ with the same (or worse)\n   effects as that of network congestion or rate limiting.\n\
    \   The specific rates at which each of these issues may come into play\n   vary\
    \ from one scenario to another and depend on the type of deployed\n   routers/firewalls,\
    \ configuration parameters, etc.\n"
- title: A.2.  Implementation of an IPv6 Local Address-Scanning Tool
  contents:
  - "A.2.  Implementation of an IPv6 Local Address-Scanning Tool\n   scan6 [IPv6-Toolkit]\
    \ is a full-fledged IPv6 local address-scanning\n   tool, which has proven to\
    \ be effective and efficient for the\n   discovery of IPv6 hosts on a local network.\n\
    \   The scan6 tool operates (roughly) as follows:\n   1.  The tool learns the\
    \ local prefixes used for autoconfiguration and\n       generates/configures one\
    \ address for each local prefix (in\n       addition to a link-local address).\n\
    \   2.  An ICMPv6 Echo Request message destined to the all-nodes on-link\n   \
    \    multicast address (ff02::1) is sent from each of the addresses\n       \"\
    configured\" in the previous step.  Because of the different\n       source addresses,\
    \ each probe packet causes the victim nodes to\n       use different source addresses\
    \ for the response packets (this\n       allows the tool to learn virtually all\
    \ the addresses in use in\n       the local network segment).\n   3.  The same\
    \ procedure of the previous bullet is performed, but this\n       time with ICMPv6\
    \ packets that contain an unrecognized option of\n       type 10xxxxxx, such that\
    \ ICMPv6 Parameter Problem error messages\n       are elicited.  This allows the\
    \ tool to discover, e.g., Windows\n       nodes, which otherwise do not respond\
    \ to multicasted ICMPv6 Echo\n       Request messages.\n   4.  Each time a new\
    \ \"alive\" address is discovered, the corresponding\n       IID is combined with\
    \ all the local prefixes, and the resulting\n       addresses are probed (with\
    \ unicasted packets).  This can help to\n       discover other addresses in use\
    \ on the local network segment,\n       since the same IID is typically used with\
    \ all the available\n       prefixes for the local network.\n   NOTE:\n      The\
    \ aforementioned scheme can fail to discover some addresses for\n      some implementations.\
    \  For example, Mac OS X employs IPv6\n      addresses embedding IEEE identifiers\
    \ (rather than \"temporary\n      addresses\") when responding to packets destined\
    \ to a link-local\n      multicast address, sourced from an on-link prefix.\n"
- title: A.3.  Implementation of an IPv6 Remote Address-Scanning Tool
  contents:
  - "A.3.  Implementation of an IPv6 Remote Address-Scanning Tool\n   An IPv6 remote\
    \ address-scanning tool could be implemented with the\n   following features:\n\
    \   o  The tool can be instructed to target specific address ranges\n      (e.g.,\
    \ 2001:db8::0-10:0-1000).\n   o  The tool can be instructed to scan for SLAAC\
    \ addresses of a\n      specific vendor, such that only addresses embedding the\n\
    \      corresponding IEEE OUIs are probed.\n   o  The tool can be instructed to\
    \ scan for SLAAC addresses that employ\n      a specific IEEE OUI or set of OUIs\
    \ corresponding to a specific\n      vector.\n   o  The tool can be instructed\
    \ to discover virtual machines, such that\n      a given IPv6 prefix is only scanned\
    \ for the address patterns\n      resulting from virtual machines.\n   o  The\
    \ tool can be instructed to scan for low-byte addresses.\n   o  The tool can be\
    \ instructed to scan for wordy addresses, in which\n      case the tool selects\
    \ addresses based on a local dictionary.\n   o  The tool can be instructed to\
    \ scan for IPv6 addresses embedding\n      TCP/UDP service ports, in which case\
    \ the tool selects addresses\n      based on a list of well-known service ports.\n\
    \   o  The tool can be specified to scan an IPv4 address range in use at\n   \
    \   the target network, such that only IPv4-based IPv6 addresses are\n      scanned.\n\
    \   The scan6 tool of [IPv6-Toolkit] implements all these techniques/\n   features.\
    \  Furthermore, when given a target domain name or sample\n   IPv6 address for\
    \ a given prefix, the tool will try to infer the\n   address pattern in use at\
    \ the target network, and reduce the address\n   search space accordingly.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Ray Hunter, who provided\
    \ valuable\n   text that was readily incorporated into Section 4.2.1 of this\n\
    \   document.\n   The authors would like to thank (in alphabetical order) Ivan\
    \ Arce,\n   Alissa Cooper, Spencer Dawkins, Stephen Farrell, Wesley George, Marc\n\
    \   Heuse, Ray Hunter, Barry Leiba, Libor Polcak, Alvaro Retana, Tomoyuki\n  \
    \ Sahara, Jan Schaumann, Arturo Servin, and Eric Vyncke for providing\n   valuable\
    \ comments on earlier draft versions of this document.\n   Fernando Gont would\
    \ like to thank Jan Zorz of Go6 Lab\n   <http://go6lab.si/> and Jared Mauch of\
    \ NTT America for providing\n   access to systems and networks that were employed\
    \ to perform\n   experiments and measurements that helped to improve this document.\n\
    \   Additionally, he would like to thank SixXS <https://www.sixxs.net>\n   for\
    \ providing IPv6 connectivity.\n   Part of the contents of this document are based\
    \ on the results of the\n   project \"Security Assessment of the Internet Protocol\
    \ version 6\n   (IPv6)\" [CPNI-IPv6], carried out by Fernando Gont on behalf of\
    \ the UK\n   Centre for the Protection of National Infrastructure (CPNI).\n  \
    \ Fernando Gont would like to thank Daniel Bellomo (UNRC) for his\n   continued\
    \ support.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Fernando Gont\n   Huawei Technologies\n   Evaristo Carriego\
    \ 2644\n   Haedo, Provincia de Buenos Aires  1706\n   Argentina\n   Phone: +54\
    \ 11 4650 8472\n   Email: fgont@si6networks.com\n   URI:   http://www.si6networks.com\n\
    \   Tim Chown\n   Jisc\n   Lumen House, Library Avenue\n   Harwell Oxford, Didcot.\
    \ OX11 0SG\n   United Kingdom\n   Email: tim.chown@jisc.ac.uk\n"
