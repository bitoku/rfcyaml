Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in TCP/IP based internets.
In particular, it defines objects for managing MAC bridges based on the IEEE 802.1D 1998 standard between Local Area Network (LAN) segments.
Provisions are made for the support of transparent bridging.
Provisions are also made so that these objects apply to bridges connected by subnetworks other than LAN segments.
The MIB module presented in this memo is a translation of the BRIDGE MIB defined in RFC 1493 to the SMIv2 syntax.
This memo obsoletes RFC 1493.
The Internet Standard Management Framework
For a detailed overview of the documents that describe the current Internet Standard Management Framework, please refer to section 7 of RFC 3410 [RFC3410].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
MIB objects are generally accessed through the Simple Network Management Protocol (SNMP).
Objects in the MIB are defined using the mechanisms defined in the Structure of Management Information (SMI).
This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58, RFC 2578 [RFC2578], STD 58
, RFC 2579 [RFC2579] and STD 58, RFC 2580
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL", when they appear in this document, are to be interpreted as described in BCP 14, RFC 2119 [RFC2119].
Overview A common device present in many networks is the Bridge.
This device is used to connect Local Area Network segments below the network layer.
There are two major modes defined for this bridging: transparent and source route.
The transparent method of bridging is defined in the IEEE 802.1D specification [IEEE8021D].
This memo defines those objects needed for the management of a bridging entity that operates in the transparent mode, as well as some objects that apply to all types of bridges.
To be consistent with IAB directives and good engineering practices, an explicit attempt was made to keep this MIB module as simple as possible.
This was accomplished by applying the following criteria to objects proposed for inclusion:
Start with a small set of essential objects and add only as further objects are needed.
Require that objects be essential for either fault or configuration management.
Consider evidence of current use and/or utility.
Limit the total number of objects.
Exclude objects that are simply derivable from others in this or other MIB modules.
Avoid causing critical sections to be heavily instrumented.
The guideline that was followed is one counter per critical section per layer.
3.1  Structure of the MIB Module Objects in this MIB module are arranged into subtrees.
Each subtree is organized as a set of related objects.
The overall structure and assignment of objects to their subtrees is shown below.
Where appropriate, the corresponding IEEE 802.1D [IEEE8021D] management object name is also included.
The following IEEE 802.1D management objects have not been included in the BRIDGE MIB module for the indicated reasons.
Same as ifPhysAddress (IF MIB) BridgePort.
Same as ifDescr (IF MIB) BridgePort.
Combination of dot1dStpPriority and dot1dBaseBridgeAddress .TopologyChange
Since this is transitory, it is not considered useful.
Since this is transitory, it is not considered useful.
These objects are not required as per the Pics Proforma and are not considered useful. .TransmissionPriorityName
This subtree contains the objects that are applicable to all types of bridges.
This subtree contains the objects that denote the bridge's state with respect to the Spanning Tree Protocol.
If a node does not implement the Spanning Tree Protocol, this subtree will not be implemented.
This subtree contains the objects that describe the entity's state with respect to source route bridging.
This subtree described in RFC 1525
[RFC1525] is applicable only to source route bridging.
This subtree contains objects that describe the entity's state with respect to transparent bridging.
If transparent bridging is not supported, this subtree will not be implemented.
This subtree is applicable to transparent only and SRT bridges.
This subtree contains objects that describe the entity's state with respect to destination address filtering.
If destination address filtering is not supported, this subtree will not be implemented.
This subtree is applicable to any type of bridge that performs destination address filtering.
3.2  Relationship to Other MIB Modules
As described above, some IEEE 802.1D management objects have not been included in this MIB module because they overlap with objects in other MIB modules that are applicable to a bridge implementing this MIB module.
3.2.1  Relationship to the SNMPv2 MIB
MIB [RFC3418] defines objects that are generally applicable to managed devices.
These objects apply to the device as a whole, irrespective of whether the device's sole functionality is bridging, or whether bridging is only a subset of the device's functionality.
As explained in Section 3.1, full support for the 802.1D management objects requires that the SNMPv2 MIB objects sysDescr and sysUpTime be implemented.
Note that compliance with the current SNMPv2 MIB module requires additional objects and notifications to be implemented, as specified in RFC 3418 [RFC3418].
3.2.2  Relationship to the IF
The IF MIB [RFC2863] defines managed objects for managing network interfaces.
A network interface is thought of as being attached to a `subnetwork'.
Note that this term is not to be confused with `subnet', which refers to an addressing partitioning scheme used in the Internet suite of protocols.
The term 'segment' is used in this memo to refer to such a subnetwork, whether it be an Ethernet segment, a 'ring', a WAN link, or even an X.25 virtual circuit.
As explained in Section 3.1, full support for the 802.1D management objects requires that the IF MIB objects ifIndex, ifType, ifDescr, ifPhysAddress, and ifLastChange are implemented.
Note that compliance to the current IF MIB module requires additional objects and notifications to be implemented as specified in RFC 2863 [RFC2863].
Implicit in this BRIDGE MIB is the notion of ports on a bridge.
Each of these ports is associated with one interface of the 'interfaces' subtree, and in most situations, each port is associated with a different interface.
However, there are situations in which multiple ports are associated with the same interface.
An example of such a situation would be several ports, each corresponding, one to one, with several X.25 virtual circuits that are all on the same interface.
Each port is uniquely identified by a port number.
A port number has no mandatory relationship to an interface number, but in the simple case, a port number will have the same value as the corresponding interface's interface number.
Port numbers are in the range (1..dot1dBaseNumPorts).
Some entities perform other functionalities as well as bridging through the sending and receiving of data on their interfaces.
In such situations, only a subset of the data sent/received on an interface is within the domain of the entity's bridging functionality.
This subset is considered to be delineated according to a set of protocols, with some protocols being bridged, and other protocols not being bridged.
For example, in an entity that exclusively performs bridging, all protocols would be considered as bridged, whereas in an entity that performs IP routing on IP datagrams and only bridges other protocols, only the non IP data would be considered as having been bridged.
Thus, this BRIDGE MIB (and in particular, its counters) are applicable only to that subset of the data on an entity's interfaces that is sent/received for a protocol being bridged.
All such data is sent/received via the ports of the bridge.
Definitions BRIDGE MIB DEFINITIONS ::
IMPORTS MODULE IDENTITY, OBJECT TYPE, NOTIFICATION TYPE, Counter32, Integer32, TimeTicks, mib 2 FROM SNMPv2
SMI TEXTUAL CONVENTION, MacAddress FROM SNMPv2
TC MODULE COMPLIANCE, OBJECT GROUP, NOTIFICATION GROUP FROM SNMPv2
CONF InterfaceIndex FROM IF MIB ; dot1dBridge MODULE IDENTITY LAST UPDATED
"200509190000Z" ORGANIZATION "IETF Bridge MIB Working Group"
594 2809 Email: kenyon.c.norseth@L 3com.com
Salt Lake City, Utah 84116 0850
3Com Centre, Boundary Way Hemel Hempstead Herts.
HP2 7YU UK Send comments to <bridge mib@ietf.org>
" DESCRIPTION "The Bridge MIB module for managing devices that support IEEE 802.1D.
This version of this MIB module is part of RFC 4188; see the RFC itself for full legal notices."
Third revision, published as part of RFC 4188.
The MIB module has been converted to SMIv2 format.
Conformance statements have been added and some description and reference clauses have been updated.
The object dot1dStpPortPathCost32 was added to support IEEE 802.1t and the permissible values of dot1dStpPriority and dot1dStpPortPriority have been clarified for bridges supporting IEEE
The interpretation of dot1dStpTimeSinceTopologyChange has been clarified for bridges supporting the Rapid Spanning Tree Protocol (RSTP)."
The Bridge Identifier, as used in the Spanning Tree Protocol, to uniquely identify a bridge.
Its first two octets (in network byte order) contain a priority value, and its last 6 octets contain the MAC address used to refer to a bridge in a unique fashion (typically, the numerically smallest MAC address of all ports on the bridge).
Several objects in this MIB module represent values of timers used by the Spanning Tree Protocol.
In this MIB, these timers have values in units of hundredths of a second (i.e., 1/100 secs).
These timers, when stored in a Spanning Tree Protocol's BPDU, are in units of 1/256 seconds.
Note, however, that 802.1D 1998 specifies a settable granularity of no more than one second for these timers.
To avoid ambiguity, a conversion algorithm is defined below for converting between the different units, which ensures a timer's value is not distorted by multiple conversions.
n   ceiling( (b   100) / 256) where: ceiling   quotient [if remainder is 0], or quotient   1
[if remainder is nonzero] n is the value in 1/100 second units b
is the value in 1/256 second units
Note: it is important that the arithmetic operations are done in the order specified (i.e., multiply first, divide second).
subtrees in the Bridge MIB
Note that the practice of registering related MIB modules   below dot1dBridge has been discouraged since there is no   robust mechanism to track such registrations.
Implementation of the dot1dBase subtree is mandatory for all   bridges.
The MAC address used by this bridge when it must be referred to in a unique fashion.
It is recommended that this be the numerically smallest MAC address of all ports that belong to this bridge.
However, it is only required to be unique.
When concatenated with dot1dStpPriority, a unique BridgeIdentifier is formed, which is used in the Spanning Tree Protocol.
"The number of ports controlled by this bridging entity.
"Indicates what type of bridging this bridge can perform.
If a bridge is actually performing a certain type of bridging, this will be indicated by entries in the port table for the given type."
SEQUENCE OF Dot1dBasePortEntry MAX ACCESS
A table that contains generic information about every port that is associated with this bridge.
Transparent, source route, and srt ports are included."
A list of information for each port of the bridge."
REFERENCE "IEEE 802.1D 1998: clause 14.4.2, 14.6.1
OBJECT IDENTIFIER, dot1dBasePortDelayExceededDiscards Counter32, dot1dBasePortMtuExceededDiscards
Counter32 } dot1dBasePort OBJECT TYPE
"The value of the instance of the ifIndex object, defined in IF MIB, for the interface corresponding to this port."
For a port that (potentially) has the same value of dot1dBasePortIfIndex as another port on the same bridge.
This object contains the name of an object instance unique to this port.
For example, in the case where multiple ports correspond one to one with multiple X.25 virtual circuits, this value might identify an (e.g., the first) object instance associated with the X.25 virtual circuit corresponding to this port.
For a port which has a unique value of dot1dBasePortIfIndex, this object can have the value { 0 0 }."
"The number of frames discarded by this port due to excessive transit delay through the bridge.
It is incremented by both transparent and source route bridges.
"The number of frames discarded by this port due to an excessive size.
It is incremented by both transparent and source route bridges.
It is   implemented by those bridges that support the Spanning Tree   Protocol.
"An indication of what version of the Spanning Tree Protocol is being run.
The value 'decLb100(2)' indicates the DEC LANbridge 100 Spanning Tree protocol.
IEEE 802.1D implementations will return 'ieee8021d(3)'.
If future versions of the IEEE Spanning Tree Protocol that are incompatible with the current version are released a new value will be defined."
MAX ACCESS  read write STATUS
"The value of the write able portion of the Bridge ID (i.e., the first two octets of the (8 octet long) Bridge ID).
The other (last) 6 octets of the Bridge ID are given by the value of dot1dBaseBridgeAddress.
On bridges supporting IEEE 802.1t or IEEE 802.1w, permissible values are 0 61440, in steps of 4096.
" REFERENCE "IEEE 802.1D 1998 clause 8.10.2, Table 8 4, IEEE
802.1t clause 8.10.2, Table 8 4, clause 14.3."
"The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity.
For RSTP, this reports the time since the tcWhile timer for any port on this Bridge was nonzero.
, IEEE 802.1w clause 14.8.1.1."
"The total number of topology changes detected by this bridge since the management entity was last reset or initialized.
REFERENCE "IEEE 802.1D 1998 clause 14.8.1.1."
"The bridge identifier of the root of the spanning tree, as determined by the Spanning Tree Protocol, as executed by this node.
This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node."
"The cost of the path to the root as seen from this bridge.
"The port number of the port that offers the lowest cost path from this bridge to the root bridge.
The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second.
This is the actual value that this bridge is currently using.
"The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree, or trying to become so, in units of hundredths of a second.
This is the actual value that this bridge is currently using.
"This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second."
"This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state.
The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state.
This value is also used when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database.
[Note that this value is the one that this bridge is currently using, in contrast to dot1dStpBridgeForwardDelay, which is the value that this bridge and all others would start using if/when this bridge were to become the root.]
"The value that all bridges use for MaxAge when this bridge is acting as the root.
Note that 802.1D 1998 specifies that the range for this parameter is related to the value of dot1dStpBridgeHelloTime.
The granularity of this timer is specified by 802.1D 1998 to be 1 second.
An agent may return a badValue error if a set is attempted to a value that is not a whole number of seconds."
"The value that all bridges use for HelloTime when this bridge is acting as the root.
The granularity of this timer is specified by 802.1D 1998 to be 1 second.
An agent may return a badValue error if a set is attempted to a value that is not a whole number of seconds."
"The value that all bridges use for ForwardDelay when this bridge is acting as the root.
Note that 802.1D 1998 specifies that the range for this parameter is related to the value of dot1dStpBridgeMaxAge.
The granularity of this timer is specified by 802.1D 1998 to be 1 second.
An agent may return a badValue error if a set is attempted to a value that is not a whole number of seconds."
A table that contains port specific information for the Spanning Tree Protocol."
"A list of information maintained by every port about the Spanning Tree Protocol state for that port.
SEQUENCE { dot1dStpPort Integer32, dot1dStpPortPriority Integer32, dot1dStpPortState INTEGER, dot1dStpPortEnable INTEGER, dot1dStpPortPathCost Integer32, dot1dStpPortDesignatedRoot BridgeId, dot1dStpPortDesignatedCost Integer32, dot1dStpPortDesignatedBridge BridgeId, dot1dStpPortDesignatedPort OCTET STRING, dot1dStpPortForwardTransitions Counter32,
"The port number of the port for which this entry contains Spanning Tree Protocol management information.
"The value of the priority field that is contained in the first (in network byte order) octet of the (2 octet long) Port ID.
The other octet of the Port ID is given by the value of dot1dStpPort.
802.1w, permissible values are 0 240, in steps of 16.
" REFERENCE "IEEE 802.1D 1998 clause 8.10.2, Table 8 4, IEEE
802.1t clause 8.10.2, Table 8 4, clause 14.3."
, listening(3), learning(4), forwarding(5), broken(6) }
This state controls what action a port takes on reception of a frame.
If the bridge has detected a port that is malfunctioning, it will place that port into the broken(6) state.
For ports that are disabled (see dot1dStpPortEnable), this object will have a value of disabled(1).
INTEGER { enabled(1), disabled(2) } MAX ACCESS
current DESCRIPTION "The enabled/disabled status of the port."
MAX ACCESS  read write STATUS
"The contribution of this port to the path cost of paths towards the spanning tree root which include this port.
802.1D 1998 recommends that the default value of this parameter be in inverse proportion to the speed of the attached LAN.
New implementations should support dot1dStpPortPathCost32.
If the port path costs exceeds the maximum value of this object then this object should report the maximum value, namely 65535.
Applications should try to read the dot1dStpPortPathCost32 object if this object reports the maximum value."
"The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached."
"The path cost of the Designated Port of the segment connected to this port.
This value is compared to the Root Path Cost field in received bridge PDUs.
The Bridge Identifier of the bridge that this port considers to be the Designated Bridge for this port's segment."
dot1dStpPortEntry 8 } dot1dStpPortDesignatedPort OBJECT
The Port Identifier of the port on the Designated Bridge for this port's segment."
"The number of times this port has transitioned from the Learning state to the Forwarding state."
{ dot1dStpPortEntry 10 } dot1dStpPortPathCost32 OBJECT
MAX ACCESS  read write STATUS
"The contribution of this port to the path cost of paths towards the spanning tree root which include this port.
802.1D 1998 recommends that the default value of this parameter be in inverse proportion to the speed of the attached LAN.
This object replaces dot1dStpPortPathCost to support IEEE 802.1t.
802.1t clause 8.10.2, Table 8 5."
Implementation of the dot1dTp subtree is optional.
It is   implemented by those bridges that support the transparent   bridging mode.
A transparent or SRT bridge will implement   this subtree.
"The total number of Forwarding Database entries that have been or would have been learned, but have been discarded due to a lack of storage space in the Forwarding Database.
If this counter is increasing, it indicates that the Forwarding Database is regularly becoming full (a condition that has unpleasant performance effects on the subnetwork).
If this counter has a significant value but is not presently increasing, it indicates that the problem has been occurring but is not persistent."
"The timeout period in seconds for aging out dynamically learned forwarding information.
802.1D 1998 recommends a default of 300 seconds.
SEQUENCE OF Dot1dTpFdbEntry MAX ACCESS
A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information.
This information is used by the transparent bridging function in determining how to propagate a received frame."
current DESCRIPTION "Information about a specific unicast MAC address for which the bridge has some forwarding and/or filtering information."
} dot1dTpFdbAddress OBJECT TYPE SYNTAX
"A unicast MAC address for which the bridge has forwarding and/or filtering information."
Either the value '0', or the port number of the port on which a frame having a source address equal to the value of the corresponding instance of dot1dTpFdbAddress has been seen.
A value of '0' indicates that the port number has not been learned, but that the bridge does have some forwarding/filtering information about this address (e.g., in the dot1dStaticTable).
Implementors are encouraged to assign the port value to this object whenever it is learned, even for addresses for which the corresponding value of dot1dTpFdbStatus is not learned(3)."
{ dot1dTpFdbEntry 2 } dot1dTpFdbStatus OBJECT TYPE
The status of this entry.
The meanings of the values are: other(1) none of the following.
This would include the case where some other MIB object (not the corresponding instance of dot1dTpFdbPort, nor an entry in the dot1dStaticTable) is being used to determine if and how frames addressed to the value of the corresponding instance of dot1dTpFdbAddress are being forwarded.
this entry is no longer valid (e.g., it was learned but has since aged out), but has not yet been flushed from the table.
the value of the corresponding instance of dot1dTpFdbPort was learned, and is being used.
the value of the corresponding instance of dot1dTpFdbAddress represents one of the bridge's addresses.
The corresponding instance of dot1dTpFdbPort indicates which of the bridge's ports has this address.
the value of the corresponding instance of dot1dTpFdbAddress is also the value of an existing instance of dot1dStaticAddress."
A table that contains information about every port that is associated with this transparent bridge."
A list of information for each port of a transparent bridge."
The maximum size of the INFO (non MAC) field that this port will receive or transmit."
"The number of frames that have been received by this port from its segment.
Note that a frame received on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.
"The number of frames that have been transmitted by this port to its segment.
Note that a frame transmitted on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.
Count of received valid frames that were discarded (i.e., filtered) by the Forwarding Process."
The Static (Destination Address Filtering)
A table containing filtering information configured into the bridge by (local or network) management specifying the set of ports to which frames received from specific ports and containing specific destination addresses are allowed to be forwarded.
The value of zero in this table, as the port number from which frames with a specific destination address are received, is used to specify all ports for which there is no specific entry in this table for that particular destination address.
Entries are valid for unicast and for group/broadcast addresses.
"Filtering information configured into the bridge by (local or network) management specifying the set of ports to which frames received from a specific port and containing a specific destination address are allowed to be forwarded."
"The destination MAC address in a frame to which this entry's filtering information applies.
This object can take the value of a unicast address, a group address, or the broadcast address."
Either the value '0', or the port number of the port from which a frame must be received in order for this entry's filtering information to apply.
A value of zero indicates that this entry applies on all ports of the bridge for which there is no other applicable entry."
"The set of ports to which frames received from a specific port and destined for a specific MAC address, are allowed to be forwarded.
Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc.
Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port.
Thus, each port of the bridge is represented by a single bit within the value of this object.
If that bit has a value of '1', then that port is included in the set of ports; the port is not included if its bit has a value of '0'.
(Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.)
The default value of this object is a string of ones of appropriate length.
The value of this object may exceed the required minimum maximum message size of some SNMP transport (484 bytes, in the case of SNMP over UDP, see RFC 3417, section 3.2).
SNMP engines on bridges supporting a large number of ports must support appropriate maximum message sizes."
"This object indicates the status of this entry.
The default value is permanent(3).
other(1) this entry is currently in use but the conditions under which it will remain so are different from each of the following values.
invalid(2) writing this value to the object removes the corresponding entry.
this entry is currently in use and will remain so after the next reset of the bridge.
this entry is currently in use and will remain so until the next reset of the bridge.
this entry is currently in use and will remain so until it is aged out."
The newRoot trap indicates that the sending agent has become the new root of the Spanning Tree; the trap is sent by a bridge soon after its election as the new root, e.g., upon expiration of the Topology Change Timer, immediately subsequent to its election.
Implementation of this trap is optional."
The trap is not sent if a newRoot trap is sent for the same transition.
Implementation of this trap is optional."
dot1dStpPriority, dot1dStpTimeSinceTopologyChange, dot1dStpTopChanges, dot1dStpDesignatedRoot, dot1dStpRootCost, dot1dStpRootPort, dot1dStpMaxAge, dot1dStpHelloTime, dot1dStpHoldTime, dot1dStpForwardDelay, dot1dStpBridgeMaxAge, dot1dStpBridgeHelloTime
current DESCRIPTION "Bridge level Spanning Tree data for this device."
OBJECT GROUP OBJECTS { dot1dTpLearnedEntryDiscards, dot1dTpAgingTime } STATUS
current DESCRIPTION "Bridge level Transparent Bridging data."
"The compliance statement for device support of bridging services, as per RFC1493."
MODULE MANDATORY GROUPS { dot1dBaseBridgeGroup, dot1dBasePortGroup } GROUP   dot1dStpBridgeGroup DESCRIPTION "Implementation of this group is mandatory for bridges that support the Spanning Tree Protocol."
GROUP   dot1dStpPortGroup DESCRIPTION "Implementation of this group is mandatory for bridges that support the Spanning Tree Protocol."
DESCRIPTION "Implementation of this group is mandatory for bridges that support the transparent bridging mode.
A transparent or SRT bridge will implement this group."
GROUP   dot1dTpFdbGroup DESCRIPTION "Implementation of this group is mandatory for bridges that support the transparent bridging mode.
A transparent or SRT bridge will implement this group."
GROUP   dot1dTpGroup DESCRIPTION "Implementation of this group is mandatory for bridges that support the transparent bridging mode.
A transparent or SRT bridge will implement this group."
GROUP   dot1dStaticGroup DESCRIPTION "Implementation of this group is optional."
GROUP dot1dNotificationGroup DESCRIPTION "Implementation of this group is optional."
The compliance statement for device support of bridging services.
This supports 32 bit Path Cost values and the more restricted bridge and port priorities, as per IEEE 802.1t.
Full support for the 802.1D management objects requires that the SNMPv2 MIB [RFC3418] objects sysDescr, and sysUpTime, as well as the IF
ifIndex, ifType, ifDescr, ifPhysAddress, and ifLastChange are implemented."
MODULE MANDATORY GROUPS { dot1dBaseBridgeGroup, dot1dBasePortGroup } GROUP   dot1dStpBridgeGroup DESCRIPTION "Implementation of this group is mandatory for bridges that support the Spanning Tree Protocol."
(0 4096 8192 12288 16384 20480 24576
The possible values defined by IEEE 802.1t."
DESCRIPTION "Implementation of this group is mandatory for bridges that support the Spanning Tree Protocol."
GROUP   dot1dStpPortGroup3 DESCRIPTION "Implementation of this group is mandatory for bridges that support the Spanning Tree Protocol and 32 bit path costs.
In particular, this includes devices supporting IEEE 802.1t and IEEE 802.1w."
16 32 48 64 80 96 112 128
176 192 208 224 240) DESCRIPTION "
The possible values defined by IEEE 802.1t."
DESCRIPTION "Implementation of this group is mandatory for bridges that support the transparent bridging mode.
A transparent or SRT bridge will implement this group."
GROUP   dot1dTpFdbGroup DESCRIPTION "Implementation of this group is mandatory for bridges that support the transparent bridging mode.
A transparent or SRT bridge will implement this group."
GROUP   dot1dTpGroup DESCRIPTION "Implementation of this group is mandatory for bridges that support the transparent bridging mode.
A transparent or SRT bridge will implement this group."
GROUP   dot1dStaticGroup DESCRIPTION "Implementation of this group is optional."
GROUP dot1dNotificationGroup DESCRIPTION "Implementation of this group is optional."
The MIB module in this document uses the following IANA assigned OBJECT IDENTIFIER values that are recorded in the SMI Numbers registry:
{ mib 2 17 } 6.
There are a number of management objects defined in this MIB module that have a MAX ACCESS clause of read write and/or read create.
Such objects may be considered sensitive or vulnerable in some network environments.
The support for SET operations in a non secure environment without proper protection can have a negative effect on network operations.
Some of the readable objects in this MIB module (i.e., objects with a MAX ACCESS other than not accessible) may be considered sensitive or vulnerable in some network environments.
It is thus important to control
even GET and/or NOTIFY access to these objects and possibly to even encrypt the values of these objects when sending them over the network via SNMP.
These are the tables and objects and their sensitivity/vulnerability:
The writable objects dot1dStpPriority, dot1dStpBridgeMaxAge, dot1dStpBridgeHelloTime,
dot1dStpBridgeForwardDelay, dot1dStpPortPriority, dot1dStpPortEnable, dot1dStpPortPathCost, and dot1dStpPortPathCost32 influence the spanning tree protocol.
Unauthorized write access to these objects can cause the spanning tree protocol to compute other default topologies or it can change the speed in which the spanning tree protocol reacts to failures.
The writable object dot1dTpAgingTime controls how fast dynamically learned forwarding information is aged out.
Setting this object to a large value may simplify forwarding table overflow attacks.
The writable dot1dStaticTable provides a filtering mechanism controlling to which ports frames originating from a specific source may be forwarded.
Write access to this table can be used to turn provisioned filtering off or to add filters to prevent rightful use of the network.
The readable objects defined in the BRIDGE MIB module provide information about the topology of a bridged network and the attached active stations.
The addresses listed in the dot1dTpFdbTable usually reveal information about the manufacturer of the MAC hardware, which can be useful information for mounting other specific attacks.
The two notifications newRoot and topologyChange are emitted during spanning tree computation and may trigger management systems to inspect the status of bridges and to recompute internal topology information.
Hence, forged notifications may cause management systems to perform unnecessary computations and to generate additional SNMP traffic directed to the bridges in a network.
Therefore, forged notifications may be part of a denial of service attack.
SNMP versions prior to SNMPv3 did not include adequate security.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and
the objects in this MIB module.
It is RECOMMENDED that implementers consider the security features as provided by the SNMPv3 framework (see [RFC3410], section 8), including full support for the SNMPv3 cryptographic mechanisms (for authentication and privacy).
Further, deployment of SNMP versions prior to SNMPv3 is NOT RECOMMENDED.
Instead, it is RECOMMENDED to deploy SNMPv3 and to enable cryptographic security.
It is then a customer/operator responsibility to ensure that the SNMP entity giving access to an instance of this MIB module is properly configured to give access to the objects only to those principals (users) that have legitimate rights to indeed GET or SET
The original version of this document was the result of significant work by four major contributors: E. Decker P. Langille A. Rijsinghan Accton Technology Corporation 5
Mount Royal Ave Marlboro, MA 01752
USA K. McCloghrie Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134
The conversion to the SMIv2 format is based on work done by the following two contributors: Kenyon C. Norseth L 3 Communications 640 N. 2200
West Salt Lake City, Utah 84116
Europe Limited 3Com Centre, Boundary Way
The following changes have been made from RFC 1493.
Translated the MIB definitions to use SMIv2.
This includes the introduction of conformance statements.
ASN.1 type definitions have been converted into textual conventions and several UNITS clauses were added.
The object dot1dStpPortPathCost32 was added to support IEEE 802.1t.
Permissible values for dot1dStpPriority and dot1dStpPortPriority have been clarified for bridges supporting IEEE
Interpretation of dot1dStpTimeSinceTopologyChange has been clarified for bridges supporting the rapid spanning tree protocol (RSTP).
Updated the introductory boilerplate text, the security considerations section, and the references to comply with the current IETF standards and guidelines.
Updated references to point to newer IEEE 802.1d documents.
Additions and clarifications in various description clauses.
