- title: __initial_text__
  contents:
  - '              UTF-8, a transformation format of ISO 10646

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   ISO/IEC 10646-1 defines a multi-octet character set called the\n\
    \   Universal Character Set (UCS) which encompasses most of the world's\n   writing\
    \ systems. Multi-octet characters, however, are not compatible\n   with many current\
    \ applications and protocols, and this has led to the\n   development of a few\
    \ so-called UCS transformation formats (UTF), each\n   with different characteristics.\
    \  UTF-8, the object of this memo, has\n   the characteristic of preserving the\
    \ full US-ASCII range, providing\n   compatibility with file systems, parsers\
    \ and other software that rely\n   on US-ASCII values but are transparent to other\
    \ values. This memo\n   updates and replaces RFC 2044, in particular addressing\
    \ the question\n   of versions of the relevant standards.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   ISO/IEC 10646-1 [ISO-10646] defines a multi-octet character\
    \ set\n   called the Universal Character Set (UCS), which encompasses most of\n\
    \   the world's writing systems.  Two multi-octet encodings are defined,\n   a\
    \ four-octet per character encoding called UCS-4 and a two-octet per\n   character\
    \ encoding called UCS-2, able to address only the first 64K\n   characters of\
    \ the UCS (the Basic Multilingual Plane, BMP), outside of\n   which there are\
    \ currently no assignments.\n   It is noteworthy that the same set of characters\
    \ is defined by the\n   Unicode standard [UNICODE], which further defines additional\n\
    \   character properties and other application details of great interest\n   to\
    \ implementors, but does not have the UCS-4 encoding.  Up to the\n   present time,\
    \ changes in Unicode and amendments to ISO/IEC 10646 have\n   tracked each other,\
    \ so that the character repertoires and code point\n   assignments have remained\
    \ in sync.  The relevant standardization\n   committees have committed to maintain\
    \ this very useful synchronism.\n   The UCS-2 and UCS-4 encodings, however, are\
    \ hard to use in many\n   current applications and protocols that assume 8 or\
    \ even 7 bit\n   characters.  Even newer systems able to deal with 16 bit characters\n\
    \   cannot process UCS-4 data. This situation has led to the development\n   of\
    \ so-called UCS transformation formats (UTF), each with different\n   characteristics.\n\
    \   UTF-1 has only historical interest, having been removed from ISO/IEC\n   10646.\
    \  UTF-7 has the quality of encoding the full BMP repertoire\n   using only octets\
    \ with the high-order bit clear (7 bit US-ASCII\n   values, [US-ASCII]), and is\
    \ thus deemed a mail-safe encoding\n   ([RFC2152]).  UTF-8, the object of this\
    \ memo, uses all bits of an\n   octet, but has the quality of preserving the full\
    \ US-ASCII range:\n   US-ASCII characters are encoded in one octet having the\
    \ normal US-\n   ASCII value, and any octet with such a value can only stand for\
    \ an\n   US-ASCII character, and nothing else.\n   UTF-16 is a scheme for transforming\
    \ a subset of the UCS-4 repertoire\n   into pairs of UCS-2 values from a reserved\
    \ range.  UTF-16 impacts\n   UTF-8 in that UCS-2 values from the reserved range\
    \ must be treated\n   specially in the UTF-8 transformation.\n   UTF-8 encodes\
    \ UCS-2 or UCS-4 characters as a varying number of\n   octets, where the number\
    \ of octets, and the value of each, depend on\n   the integer value assigned to\
    \ the character in ISO/IEC 10646.  This\n   transformation format has the following\
    \ characteristics (all values\n   are in hexadecimal):\n   -  Character values\
    \ from 0000 0000 to 0000 007F (US-ASCII repertoire)\n      correspond to octets\
    \ 00 to 7F (7 bit US-ASCII values). A direct\n      consequence is that a plain\
    \ ASCII string is also a valid UTF-8\n      string.\n   -  US-ASCII values do\
    \ not appear otherwise in a UTF-8 encoded\n      character stream.  This provides\
    \ compatibility with file systems\n      or other software (e.g. the printf()\
    \ function in C libraries) that\n      parse based on US-ASCII values but are\
    \ transparent to other\n      values.\n   -  Round-trip conversion is easy between\
    \ UTF-8 and either of UCS-4,\n      UCS-2.\n   -  The first octet of a multi-octet\
    \ sequence indicates the number of\n      octets in the sequence.\n   -  The octet\
    \ values FE and FF never appear.\n   -  Character boundaries are easily found\
    \ from anywhere in an octet\n      stream.\n   -  The lexicographic sorting order\
    \ of UCS-4 strings is preserved.  Of\n      course this is of limited interest\
    \ since the sort order is not\n      culturally valid in either case.\n   -  The\
    \ Boyer-Moore fast search algorithm can be used with UTF-8 data.\n   -  UTF-8\
    \ strings can be fairly reliably recognized as such by a\n      simple algorithm,\
    \ i.e. the probability that a string of characters\n      in any other encoding\
    \ appears as valid UTF-8 is low, diminishing\n      with increasing string length.\n\
    \   UTF-8 was originally a project of the X/Open Joint\n   Internationalization\
    \ Group XOJIG with the objective to specify a File\n   System Safe UCS Transformation\
    \ Format [FSS-UTF] that is compatible\n   with UNIX systems, supporting multilingual\
    \ text in a single encoding.\n   The original authors were Gary Miller, Greger\
    \ Leijonhufvud and John\n   Entenmann.  Later, Ken Thompson and Rob Pike did significant\
    \ work for\n   the formal UTF-8.\n   A description can also be found in Unicode\
    \ Technical Report #4 and in\n   the Unicode Standard, version 2.0 [UNICODE].\
    \  The definitive\n   reference, including provisions for UTF-16 data within UTF-8,\
    \ is\n   Annex R of ISO/IEC 10646-1 [ISO-10646].\n"
- title: 2.  UTF-8 definition
  contents:
  - "2.  UTF-8 definition\n   In UTF-8, characters are encoded using sequences of\
    \ 1 to 6 octets.\n   The only octet of a \"sequence\" of one has the higher-order\
    \ bit set to\n   0, the remaining 7 bits being used to encode the character value.\
    \ In\n   a sequence of n octets, n>1, the initial octet has the n higher-order\n\
    \   bits set to 1, followed by a bit set to 0.  The remaining bit(s) of\n   that\
    \ octet contain bits from the value of the character to be\n   encoded.  The following\
    \ octet(s) all have the higher-order bit set to\n   1 and the following bit set\
    \ to 0, leaving 6 bits in each to contain\n   bits from the character to be encoded.\n\
    \   The table below summarizes the format of these different octet types.\n  \
    \ The letter x indicates bits available for encoding bits of the UCS-4\n   character\
    \ value.\n   UCS-4 range (hex.)           UTF-8 octet sequence (binary)\n   0000\
    \ 0000-0000 007F   0xxxxxxx\n   0000 0080-0000 07FF   110xxxxx 10xxxxxx\n   0000\
    \ 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-001F FFFF   11110xxx\
    \ 10xxxxxx 10xxxxxx 10xxxxxx\n   0020 0000-03FF FFFF   111110xx 10xxxxxx 10xxxxxx\
    \ 10xxxxxx 10xxxxxx\n   0400 0000-7FFF FFFF   1111110x 10xxxxxx ... 10xxxxxx\n\
    \   Encoding from UCS-4 to UTF-8 proceeds as follows:\n   1) Determine the number\
    \ of octets required from the character value\n      and the first column of the\
    \ table above.  It is important to note\n      that the rows of the table are\
    \ mutually exclusive, i.e. there is\n      only one valid way to encode a given\
    \ UCS-4 character.\n   2) Prepare the high-order bits of the octets as per the\
    \ second column\n      of the table.\n   3) Fill in the bits marked x from the\
    \ bits of the character value,\n      starting from the lower-order bits of the\
    \ character value and\n      putting them first in the last octet of the sequence,\
    \ then the\n      next to last, etc. until all x bits are filled in.\n      The\
    \ algorithm for encoding UCS-2 (or Unicode) to UTF-8 can be\n      obtained from\
    \ the above, in principle, by simply extending each\n      UCS-2 character with\
    \ two zero-valued octets.  However, pairs of\n      UCS-2 values between D800\
    \ and DFFF (surrogate pairs in Unicode\n      parlance), being actually UCS-4\
    \ characters transformed through\n      UTF-16, need special treatment: the UTF-16\
    \ transformation must be\n      undone, yielding a UCS-4 character that is then\
    \ transformed as\n      above.\n      Decoding from UTF-8 to UCS-4 proceeds as\
    \ follows:\n   1) Initialize the 4 octets of the UCS-4 character with all bits\
    \ set\n      to 0.\n   2) Determine which bits encode the character value from\
    \ the number of\n      octets in the sequence and the second column of the table\
    \ above\n      (the bits marked x).\n   3) Distribute the bits from the sequence\
    \ to the UCS-4 character,\n      first the lower-order bits from the last octet\
    \ of the sequence and\n      proceeding to the left until no x bits are left.\n\
    \      If the UTF-8 sequence is no more than three octets long, decoding\n   \
    \   can proceed directly to UCS-2.\n        NOTE -- actual implementations of\
    \ the decoding algorithm above\n        should protect against decoding invalid\
    \ sequences.  For\n        instance, a naive implementation may (wrongly) decode\
    \ the\n        invalid UTF-8 sequence C0 80 into the character U+0000, which\n\
    \        may have security consequences and/or cause other problems.  See\n  \
    \      the Security Considerations section below.\n   A more detailed algorithm\
    \ and formulae can be found in [FSS_UTF],\n   [UNICODE] or Annex R to [ISO-10646].\n"
- title: 3.  Versions of the standards
  contents:
  - "3.  Versions of the standards\n   ISO/IEC 10646 is updated from time to time\
    \ by published amendments;\n   similarly, different versions of the Unicode standard\
    \ exist: 1.0, 1.1\n   and 2.0 as of this writing.  Each new version obsoletes\
    \ and replaces\n   the previous one, but implementations, and more significantly\
    \ data,\n   are not updated instantly.\n   In general, the changes amount to adding\
    \ new characters, which does\n   not pose particular problems with old data. \
    \ Amendment 5 to ISO/IEC\n   10646, however, has moved and expanded the Korean\
    \ Hangul block,\n   thereby making any previous data containing Hangul characters\
    \ invalid\n   under the new version.  Unicode 2.0 has the same difference from\n\
    \   Unicode 1.1. The official justification for allowing such an\n   incompatible\
    \ change was that no implementations and no data\n   containing Hangul existed,\
    \ a statement that is likely to be true but\n   remains unprovable.  The incident\
    \ has been dubbed the \"Korean mess\",\n   and the relevant committees have pledged\
    \ to never, ever again make\n   such an incompatible change.\n   New versions,\
    \ and in particular any incompatible changes, have q\n   conseuences regarding\
    \ MIME character encoding labels, to be discussed\n   in section 5.\n"
- title: 4.  Examples
  contents:
  - "4.  Examples\n   The UCS-2 sequence \"A<NOT IDENTICAL TO><ALPHA>.\" (0041, 2262,\
    \ 0391,\n   002E) may be encoded in UTF-8 as follows:\n   41 E2 89 A2 CE 91 2E\n\
    \   The UCS-2 sequence representing the Hangul characters for the Korean\n   word\
    \ \"hangugo\" (D55C, AD6D, C5B4) may be encoded as follows:\n   ED 95 9C EA B5\
    \ AD EC 96 B4\n   The UCS-2 sequence representing the Han characters for the Japanese\n\
    \   word \"nihongo\" (65E5, 672C, 8A9E) may be encoded as follows:\n   E6 97 A5\
    \ E6 9C AC E8 AA 9E\n"
- title: 5.  MIME registration
  contents:
  - "5.  MIME registration\n   This memo is meant to serve as the basis for registration\
    \ of a MIME\n   character set parameter (charset) [CHARSET-REG].  The proposed\n\
    \   charset parameter value is \"UTF-8\".  This string labels media types\n  \
    \ containing text consisting of characters from the repertoire of\n   ISO/IEC\
    \ 10646 including all amendments at least up to amendment 5\n   (Korean block),\
    \ encoded to a sequence of octets using the encoding\n   scheme outlined above.\
    \  UTF-8 is suitable for use in MIME content\n   types under the \"text\" top-level\
    \ type.\n   It is noteworthy that the label \"UTF-8\" does not contain a version\n\
    \   identification, referring generically to ISO/IEC 10646.  This is\n   intentional,\
    \ the rationale being as follows:\n   A MIME charset label is designed to give\
    \ just the information needed\n   to interpret a sequence of bytes received on\
    \ the wire into a sequence\n   of characters, nothing more (see RFC 2045, section\
    \ 2.2, in [MIME]).\n   As long as a character set standard does not change incompatibly,\n\
    \   version numbers serve no purpose, because one gains nothing by\n   learning\
    \ from the tag that newly assigned characters may be received\n   that one doesn't\
    \ know about.  The tag itself doesn't teach anything\n   about the new characters,\
    \ which are going to be received anyway.\n   Hence, as long as the standards evolve\
    \ compatibly, the apparent\n   advantage of having labels that identify the versions\
    \ is only that,\n   apparent.  But there is a disadvantage to such version-dependent\n\
    \   labels: when an older application receives data accompanied by a\n   newer,\
    \ unknown label, it may fail to recognize the label and be\n   completely unable\
    \ to deal with the data, whereas a generic, known\n   label would have triggered\
    \ mostly correct processing of the data,\n   which may well not contain any new\
    \ characters.\n   Now the \"Korean mess\" (ISO/IEC 10646 amendment 5) is an incompatible\n\
    \   change, in principle contradicting the appropriateness of a version\n   independent\
    \ MIME charset label as described above.  But the\n   compatibility problem can\
    \ only appear with data containing Korean\n   Hangul characters encoded according\
    \ to Unicode 1.1 (or equivalently\n   ISO/IEC 10646 before amendment 5), and there\
    \ is arguably no such data\n   to worry about, this being the very reason the\
    \ incompatible change\n   was deemed acceptable.\n   In practice, then, a version-independent\
    \ label is warranted, provided\n   the label is understood to refer to all versions\
    \ after Amendment 5,\n   and provided no incompatible change actually occurs.\
    \  Should\n   incompatible changes occur in a later version of ISO/IEC 10646,\
    \ the\n   MIME charset label defined here will stay aligned with the previous\n\
    \   version until and unless the IETF specifically decides otherwise.\n   It is\
    \ also proposed to register the charset parameter value\n   \"UNICODE-1-1-UTF-8\"\
    , for the exclusive purpose of labelling text data\n   containing Hangul syllables\
    \ encoded to UTF-8 without taking into\n   account Amendment 5 of ISO/IEC 10646\
    \ (i.e. using the pre-amendment 5\n   code point assignments).  Any other UTF-8\
    \ data SHOULD NOT use this\n   label, in particular data not containing any Hangul\
    \ syllables, and it\n   is felt important to strongly recommend against creating\
    \ any new\n   Hangul-containing data without taking Amendment 5 of ISO/IEC 10646\n\
    \   into account.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Implementors of UTF-8 need to consider the security\
    \ aspects of how\n   they handle illegal UTF-8 sequences.  It is conceivable that\
    \ in some\n   circumstances an attacker would be able to exploit an incautious\n\
    \   UTF-8 parser by sending it an octet sequence that is not permitted by\n  \
    \ the UTF-8 syntax.\n   A particularly subtle form of this attack could be carried\
    \ out\n   against a parser which performs security-critical validity checks\n\
    \   against the UTF-8 encoded form of its input, but interprets certain\n   illegal\
    \ octet sequences as characters.  For example, a parser might\n   prohibit the\
    \ NUL character when encoded as the single-octet sequence\n   00, but allow the\
    \ illegal two-octet sequence C0 80 and interpret it\n   as a NUL character.  Another\
    \ example might be a parser which\n   prohibits the octet sequence 2F 2E 2E 2F\
    \ (\"/../\"), yet permits the\n   illegal octet sequence 2F C0 AE 2E 2F.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The following have participated in the drafting and discussion\
    \ of\n   this memo:\n   James E. Agenbroad    Andries Brouwer\n   Martin J. D|rst\
    \       Ned Freed\n   David Goldsmith       Edwin F. Hart\n   Kent Karlsson  \
    \       Markus Kuhn\n   Michael Kung          Alain LaBonte\n   John Gardiner\
    \ Myers   Murray Sargent\n   Keld Simonsen         Arnold Winkler\n"
- title: Bibliography
  contents:
  - "Bibliography\n   [CHARSET-REG]  Freed, N., and J. Postel, \"IANA Charset Registration\n\
    \                  Procedures\", BCP 19, RFC 2278, January 1998.\n   [FSS_UTF]\
    \      X/Open CAE Specification C501 ISBN 1-85912-082-2 28cm.\n              \
    \    22p. pbk. 172g.  4/95, X/Open Company Ltd., \"File\n                  System\
    \ Safe UCS Transformation Format (FSS_UTF)\",\n                  X/Open Preleminary\
    \ Specification, Document Number\n                  P316.  Also published in Unicode\
    \ Technical Report #4.\n   [ISO-10646]    ISO/IEC 10646-1:1993. International\
    \ Standard --\n                  Information technology -- Universal Multiple-Octet\n\
    \                  Coded Character Set (UCS) -- Part 1: Architecture and\n   \
    \               Basic Multilingual Plane.  Five amendments and a\n           \
    \       technical corrigendum have been published up to now.\n               \
    \   UTF-8 is described in Annex R, published as Amendment\n                  2.\
    \  UTF-16 is described in Annex Q, published as\n                  Amendment 1.\
    \ 17 other amendments are currently at\n                  various stages of standardization.\n\
    \   [MIME]         Freed, N., and N. Borenstein, \"Multipurpose Internet\n   \
    \               Mail Extensions (MIME) Part One:  Format of Internet\n       \
    \           Message Bodies\", RFC 2045.  N. Freed, N. Borenstein,\n          \
    \        \"Multipurpose Internet Mail Extensions (MIME) Part\n               \
    \   Two:  Media Types\", RFC 2046.  K. Moore, \"MIME\n                  (Multipurpose\
    \ Internet Mail Extensions) Part Three:\n                  Message Header Extensions\
    \ for Non-ASCII Text\", RFC\n                  2047.  N.  Freed, J. Klensin, J.\
    \ Postel, \"Multipurpose\n                  Internet Mail Extensions (MIME) Part\
    \ Four:\n                  Registration Procedures\", RFC 2048.  N. Freed, N.\n\
    \                  Borenstein, \" Multipurpose Internet Mail Extensions\n    \
    \              (MIME) Part Five: Conformance Criteria and Examples\",\n      \
    \            RFC 2049.  All November 1996.\n   [RFC2152]      Goldsmith, D., and\
    \ M. Davis, \"UTF-7: A Mail-safe\n                  Transformation Format of Unicode\"\
    , RFC 1642, Taligent\n                  inc., May 1997. (Obsoletes RFC1642)\n\
    \   [UNICODE]      The Unicode Consortium, \"The Unicode Standard --\n       \
    \           Version 2.0\", Addison-Wesley, 1996.\n   [US-ASCII]     Coded Character\
    \ Set--7-bit American Standard Code for\n                  Information Interchange,\
    \ ANSI X3.4-1986.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Francois Yergeau\n   Alis Technologies\n   100, boul. Alexis-Nihon\n\
    \   Suite 600\n   Montreal  QC  H4M 2P2\n   Canada\n   Phone: +1 (514) 747-2547\n\
    \   Fax:   +1 (514) 747-2561\n   EMail: fyergeau@alis.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
