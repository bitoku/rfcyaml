- title: __initial_text__
  contents:
  - "                        MAIL TRANSFER PROTOCOL:\n                       ISI TOPS20\
    \ IMPLEMENTATION\nWe are creating an implementation of MTP for TOPS20.  The programs\
    \ are\nwritten in BLISS-10.  This implementation supports the MTP user and\nserver\
    \ functions using both TCP and NCP transport services, and provides\ninterfaces\
    \ to other mail delivery mechanisms.\nThe transport services (NCP, TCP, etc.),\
    \ are used to establish\ncommunication between MTP sender and MTP receiver programs.\
    \  These\ncommunication paths will be called channels in the rest of this memo.\n\
    Our model of operation is that mail sources will create mail files in\nuser directories.\
    \  The mail sources are both user mail composition\nprograms (like Hermes, MM,\
    \ SNDMSG), and system network mail receiving\nprograms which accept mail from\
    \ various input channels.  The mail files\nare processed by a background program\
    \ which dispatches mail to various\noutput channels.  There is also a user version\
    \ of the dispatcher to send\nmail at once (provided the necessary channel is available).\n\
    To take advantage of MTP's multi-recipient feature, the mail consists of\ntwo\
    \ files.  The first is a control file which contains the delivery\ninformation\
    \ and a pointer to the second file.  The second file contains\nthe mail data (including\
    \ the RFC 733 header) to be delivered.\nThe reason for using two files is that\
    \ the control information must be\nmodified as the mail is processed while the\
    \ mail data only needs to be\nread (although the file is eventually deleted or\
    \ renamed).  For example,\na message may be sent to different recipients via different\
    \ channels.\nIf one of the channels is not available, the control file must be\n\
    modified to mark or delete the recipients to whom the mail has been sent\nand\
    \ keep the recipient information available for those recipients not\nyet sent.\
    \  In a a future implementation of the dispatcher, the control\ninformation may\
    \ be moved to a master table in its data area to optimally\nschedule output channel\
    \ use.\nThe dispatcher makes its decision about how to send mail to each\nrecipient\
    \ by consulting a table that indicates for each host its ability\nto accept mail\
    \ via (1) MTP on TCP, (2) MTP on NCP, or (3) FTP on NCP\n(i.e., the old way).\
    \  There is also a table for other cases (e.g.,\ndelivery to hosts in England\
    \ via another mail transmission system\ncreated by UCL).\nJuly 1981          \
    \                                              RFC 784\nISI TOPS20 Implementation\
    \                                               \nThe individual pieces of this\
    \ system are:\n   1.  MTP receiver for TCP.\n   2.  MTP receiver for NCP.\n  \
    \ 3.  Dispatcher.\n   4.  MTP sender for TCP.\n   5.  MTP sender for NCP.\n  \
    \ 6.  Mail composition programs (MM, HERMES, MSG, SNDMSG, ...).\n   7.  User mailbox\
    \ files.\n   8.  Pending Mail files.\n   9.  Other Mail sources.\n   10. Other\
    \ Mail sinks.\n   11. Host Mail Capability table.\n   12. Host special processing\
    \ tables.\nWe are building 1 through 5, hope that others will adapt 6 to this\n\
    system (a version of MM has been adapted at ISI), using the existing 7,\ndefining\
    \ and using 8, providing interfaces for 9 and 10 as requested,\nand creating and\
    \ using 11 and 12.\nRFC 784                                                  \
    \      July 1981\n                                                  Mail Transfer\
    \ Protocol\n           +-----+   +-----+   +------+   +------+\n           | MTP\
    \ |   | MTP |   | USER |   |OTHER |\n           | TCP |   | NCP |   | MAIL | \
    \  |MAIL  |\n           | RCV |   | RCV |   | PGM  |   |SOURCE|\n           +-----+\
    \   +-----+   +------+   +------+\n              |         |          |      \
    \   |\n              |         |          |         |\n              |       \
    \  |          |         |\n              v         v          v         v\n  \
    \          +----+    +----+     +----+     +----+\n            |    |    |   \
    \ |     |    |     |    |\nPending   +----+ |  +----+ |   +----+ |   +----+ |\n\
    Files     |    |-+  |    |-+   |    |-+   |    |-+\n          |    |    |    |\
    \     |    |     |    |\n          +----+    +----+     +----+     +----+\n  \
    \              \\      |         |       /\n                 \\     |        \
    \ |      /\n                  \\    |         |     /\n                   v  \
    \ v         v    v\n                    +------------------+       TABLES\n  \
    \                  |                  |       +----+\n                    |  \
    \  DISPATCHER    |<----->|    |---+\n                    |                  |\
    \       |    |   |\n                    +------------------+       +----+   |\n\
    \                    /      /     \\      \\          +----+\n               \
    \    /      /       \\      \\\n                  /      /         \\      \\\n\
    \                 v      v           v      v\n           +-----+   +-----+  \
    \ +-------+   +-----+\n           | MTP |   | MTP |   | LOCAL |   |OTHER|\n  \
    \         | TCP |   | NCP |   |MAILBOX|   |MAIL |\n           | SND |   | SND\
    \ |   | FILES |   |SINK |\n           +-----+   +-----+   +-------+   +-----+\n\
    Note that current implementation the dispatcher and the senders for\nMTP-on-TCP\
    \ and MTP-on-TCP are combined in one program.\n"
