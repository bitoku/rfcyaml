- title: __initial_text__
  contents:
  - "                   Peer-to-Peer (P2P) Architecture:\n          Definition, Taxonomies,\
    \ Examples, and Applicability\n"
- title: Abstract
  contents:
  - "Abstract\n   In this document, we provide a survey of P2P (Peer-to-Peer) systems.\n\
    \   The survey includes a definition and several taxonomies of P2P\n   systems.\
    \  This survey also includes a description of which types of\n   applications\
    \ can be built with P2P technologies and examples of P2P\n   applications that\
    \ are currently in use on the Internet.  Finally, we\n   discuss architectural\
    \ trade-offs and provide guidelines for deciding\n   whether or not a P2P architecture\
    \ would be suitable to meet the\n   requirements of a given application.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Definition of a P2P System ......................................3\n  \
    \    2.1. Applying the P2P Definition to the DNS .....................5\n    \
    \  2.2. Applying the P2P Definition to SIP .........................5\n      2.3.\
    \ Applying the P2P Definition to P2PSIP ......................6\n      2.4. Applying\
    \ the P2P Definition to BitTorrent ..................7\n   3. Functions in a P2P\
    \ System .......................................7\n   4. Taxonomies for P2P Systems\
    \ ......................................8\n   5. P2P Applications ...............................................10\n\
    \      5.1. Content Distribution ......................................10\n  \
    \    5.2. Distributed Computing .....................................12\n    \
    \  5.3. Collaboration .............................................13\n      5.4.\
    \ Platforms .................................................14\n   6. Architectural\
    \ Trade-Offs and Guidance ..........................14\n   7. Security Considerations\
    \ ........................................16\n   8. Acknowledgements ...............................................19\n\
    \   9. IAB Members at the Time of This Writing ........................19\n  \
    \ 10. Informative References ........................................19\n   Appendix\
    \ A.  Historical Background on Distributed Architectures ...25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   P2P (Peer-to-peer) systems have received a great deal of\
    \ attention in\n   the last few years.  A large number of scientific publications\n\
    \   investigate different aspects of P2P systems, several scientific\n   conferences\
    \ explicitly focus on P2P networking, and there is an\n   Internet Research Task\
    \ Force (IRTF) Research Group (RG) on P2P\n   systems (the Peer-to-Peer RG). \
    \ There are also several commercial and\n   non-commercial applications that use\
    \ P2P principles running on the\n   Internet.  Some of these P2P applications\
    \ are among the most widely\n   used applications on the Internet at present.\n\
    \   However, despite all the above, engineers designing systems or\n   developing\
    \ protocol specifications do not have a common understanding\n   of P2P systems.\
    \  More alarming is the fact that many people in the\n   telecom and datacom industries\
    \ believe that P2P is synonymous with\n   illegal activity, such as the illegal\
    \ exchange of content over the\n   Internet or P2P botnets.\n   The goal of this\
    \ document is to discuss the trade-offs involved in\n   deciding whether a particular\
    \ application can be best designed and\n   implemented using a P2P paradigm or\
    \ a different model (e.g., a\n   client-server paradigm).  The document also aims\
    \ to provide\n   architectural guidelines to assist in making such decisions.\
    \  This\n   document provides engineers with a high-level understanding of what\n\
    \   defines a P2P system, what types of P2P systems exist, the\n   characteristics\
    \ that can be expected from such systems, and what\n   types of applications can\
    \ be implemented using P2P technologies.\n   Such understanding is essential in\
    \ order to appreciate the trade-offs\n   referred to above.  In addition, we stress\
    \ the importance of the fact\n   that P2P systems can be used to implement perfectly\
    \ legitimate\n   applications and business models by providing several examples\n\
    \   throughout the document.\n"
- title: 2.  Definition of a P2P System
  contents:
  - "2.  Definition of a P2P System\n   In order to discuss P2P systems, we first\
    \ need a working definition\n   of a P2P system.  In this section, we provide\
    \ such a definition.  All\n   discussions in this document apply to systems that\
    \ comply with that\n   definition.  In addition to providing examples of P2P systems,\
    \ we\n   provide a few examples of systems that comply only partially with the\n\
    \   definition and, thus, cannot be strictly considered P2P systems.\n   Since\
    \ these systems are not fully P2P compliant, some of the\n   discussions in this\
    \ document may apply to them while others may not.\n   We have chosen to include\
    \ those examples anyway to stress the fact\n   that P2P and centralized architectures\
    \ are not completely disjoint\n   alternatives.  There are many examples of systems\
    \ that fall, for\n   instance, somewhere in between a pure P2P system and a centralized\n\
    \   one.\n   P2P is a term used in many contexts, sometimes with slightly\n  \
    \ different meanings.  It is possible to find several alternative\n   definitions,\
    \ which are not all fully equivalent, in the existing\n   scientific literature.\
    \  If we include other material (e.g., marketing\n   material) in our search for\
    \ a definition on P2P, the diversity of\n   definitions is even higher.\n   The\
    \ issue is that there is no clear border between a P2P paradigm and\n   other\
    \ supposedly opposite paradigms such as client-server\n   [Milojicic2002].  In\
    \ the extremes, some architectures are clearly P2P\n   while others are clearly\
    \ client-server.  However, there are\n   architectures that can be considered\
    \ to be either or both, depending\n   on the definition for P2P being considered.\
    \  Consequently, it is\n   important to understand what is common to all definitions\
    \ of P2P and\n   what are the non-common traits some authors include in their\
    \ own\n   definitions.\n   We consider a system to be P2P if the elements that\
    \ form the system\n   share their resources in order to provide the service the\
    \ system has\n   been designed to provide.  The elements in the system both provide\n\
    \   services to other elements and request services from other elements.\n   In\
    \ principle, all the elements in the system should meet the previous\n   criteria\
    \ for the system to be considered P2P.  However, in practice,\n   a system can\
    \ have a few exceptions (i.e., a few nodes that do not\n   meet the criteria)\
    \ and still be considered P2P.  For example, a P2P\n   system can still be considered\
    \ P2P even if it has a centralized\n   enrollment server.  On the other hand,\
    \ some systems divide endpoints\n   between peers and clients.  Peers both request\
    \ and provide services\n   while clients generally only request services.  A system\
    \ where most\n   endpoints behaved as clients could not strictly be considered\
    \ P2P.\n   Although most definitions do not state it explicitly, many implicitly\n\
    \   assume that for a system to be P2P, its nodes need to be involved in\n   transactions\
    \ that are related to services that do not directly\n   benefit the nodes.\n \
    \  Some authors add that the elements that form the P2P system, which\n   unsurprisingly\
    \ are called peers, should be able to communicate\n   directly between themselves\
    \ without passing intermediaries\n   [Schollmeier2001].  Other authors add that\
    \ the system should be self\n   organizing and have decentralized control [Roussopoulus2004].\n\
    \   Note that the previous definitions are given within the context of a\n   single\
    \ individual service.  A complex service can be made up of\n   several individual\
    \ services.  Some of these individual services can\n   consist of P2P services\
    \ and some of them can consist of client-server\n   services.  For example, a\
    \ file sharing client may include a P2P\n   client to perform the actual file\
    \ sharing and a web browser to access\n   additional information on a centralized\
    \ web server.  Additionally,\n   there are architectures where a client-server\
    \ system can serve as a\n   fallback for a service normally provided by a P2P\
    \ system, or vice\n   versa.\n   Providing a service typically involves processing\
    \ or storing data.\n   According to our definition, in a P2P system, peers share\
    \ their\n   processing and storage capacity (i.e., their hardware and software\n\
    \   resources) so that the system can provide a service.  For example, if\n  \
    \ the service to be provided is a file distribution service, different\n   peers\
    \ within the system will store different files.  When a given\n   peer wants to\
    \ get a particular file, the peer will first discover\n   which peer or peers\
    \ have that file and then obtain the file from\n   those peers.\n   The definition\
    \ for P2P provides us with a criterion to decide whether\n   or not a system is\
    \ P2P.  As examples, in the following sections we\n   apply the definition to\
    \ the DNS, SIP, P2PSIP, and BitTorrent and\n   discuss which of these systems\
    \ are P2P.\n"
- title: 2.1.  Applying the P2P Definition to the DNS
  contents:
  - "2.1.  Applying the P2P Definition to the DNS\n   The DNS is a hierarchical distributed\
    \ system that has sometimes been\n   classified as a hierarchical client-server\
    \ system and sometimes as a\n   P2P system [Milojicic2002].  According to our\
    \ definition, the DNS is\n   not a P2P system because DNS resolvers are service\
    \ requesters but not\n   service providers.  The elements in a system need to\
    \ be both service\n   requesters and service providers for the system to be considered\
    \ P2P.\n"
- title: 2.2.  Applying the P2P Definition to SIP
  contents:
  - "2.2.  Applying the P2P Definition to SIP\n   SIP [RFC3261] is a rendezvous protocol\
    \ that allows a user to locate a\n   remote user and establish a communication\
    \ session with that remote\n   user.  Once the remote user is located, sessions\
    \ are established in a\n   similar way in all SIP systems: directly between the\
    \ nodes involved\n   in the session.  However, the rendezvous function can be\
    \ implemented\n   in different ways: the traditional SIP way and the P2P way.\
    \  This\n   section discusses the former.  Section 2.3 discusses the latter.\n\
    \   In traditional SIP, a central server is typically responsible for a\n   DNS\
    \ domain.  User agents in the domain register with the server.\n   This way, when\
    \ a user agent wants to communicate with a remote user\n   agent in the same domain,\
    \ the user agent consults the server, which\n   returns the contact information\
    \ of the remote user agent.  Session\n   establishment occurs directly between\
    \ the user agents, without the\n   involvement of the server.\n   Inter-domain\
    \ communications in SIP are implemented using server\n   federations.  The servers\
    \ responsible for each domain form a\n   federation in which they can communicate\
    \ with each other.  This way,\n   when a user agent wants to communicate with\
    \ a remote user agent in a\n   different domain, the user agent consults its local\
    \ server, which in\n   turn consults the server responsible for the remote user\
    \ agent's\n   domain.\n   SIP user agents act as both clients and servers.  A\
    \ given user agent\n   can act as a client in a particular transaction and as\
    \ a server in a\n   subsequent transaction.  However, traditional SIP cannot be\n\
    \   considered a P2P system because user agents only share their\n   resources\
    \ for their own benefit.  That is, a given user agent is only\n   involved in\
    \ transactions related to a service that benefits (somehow)\n   the user agent\
    \ itself.  For example, any given user agent is only\n   involved in SIP INVITE\
    \ transactions intended to establish sessions\n   that involve the user agent.\
    \  For a system to be P2P, its nodes need\n   to be involved in transactions that\
    \ benefit others, that is,\n   transactions that are related to services that\
    \ do not benefit the\n   nodes directly.\n"
- title: 2.3.  Applying the P2P Definition to P2PSIP
  contents:
  - "2.3.  Applying the P2P Definition to P2PSIP\n   In addition to the traditional\
    \ way of using SIP, SIP can also be used\n   in a way that is generally referred\
    \ to as P2PSIP (P2PSIP is the name\n   of the IETF working group developing the\
    \ technology).  In P2PSIP,\n   user agents do not register their contact information\
    \ with a central\n   server.  Instead, they register it with an overlay formed\
    \ by the user\n   agents in the system.  This way, when a user agent wants to\n\
    \   communicate with a remote user agent, the user agent consults the\n   overlay,\
    \ which returns the contact information of the remote user\n   agent.  Session\
    \ establishment occurs, as usual, directly between the\n   user agents.  P2PSIP\
    \ is a P2P system because nodes share their\n   resources by storing data that\
    \ is not related to them (i.e., contact\n   information of different user agents)\
    \ and are involved in\n   transactions that are related to services that do not\
    \ revert directly\n   to the nodes themselves (e.g., the rendezvous of two remote\
    \ user\n   agents).\n"
- title: 2.4.  Applying the P2P Definition to BitTorrent
  contents:
  - "2.4.  Applying the P2P Definition to BitTorrent\n   BitTorrent [BitTorrent] is\
    \ a protocol used to distribute files.  The\n   group of endpoints involved in\
    \ the distribution of a particular file\n   is called a swarm.  The file is divided\
    \ into several pieces.  An\n   endpoint interested in the file needs to download\
    \ all the pieces of\n   the file from other endpoints in the swarm.  Endpoints\
    \ downloading\n   pieces of the file also upload pieces they already have to other\n\
    \   endpoints in the swarm.  An endpoint that both downloads (because it\n   does\
    \ not have the complete file yet) and uploads pieces is called a\n   leecher (note\
    \ that this definition is counterintuitive because, in\n   other contexts, a leecher\
    \ normally means someone that takes but does\n   not give).  When an endpoint\
    \ has the whole file (i.e., it has all the\n   pieces of the file), it does not\
    \ need to download any pieces any\n   longer.  Therefore, it only uploads pieces\
    \ to other endpoints.  Such\n   an endpoint is called a seeder.\n   BitTorrent\
    \ systems are P2P systems because endpoints request services\n   from other endpoints\
    \ (i.e., download pieces from other endpoints) and\n   provide services to other\
    \ endpoints (i.e., upload pieces to other\n   endpoints).  Note, however, that\
    \ a particular swarm where most\n   endpoints were infrastructure nodes that had\
    \ the complete file from\n   the beginning and, thus, acted all the time as seeders\
    \ could not be\n   strictly considered a P2P system because most endpoints would\
    \ only be\n   providing services, not requesting them.\n"
- title: 3.  Functions in a P2P System
  contents:
  - "3.  Functions in a P2P System\n   P2P systems include several functions.  The\
    \ following functions are\n   independent of the service provided by the P2P system.\
    \  They handle\n   how peers connect to the system.\n   o  Enrollment function:\
    \ nodes joining a P2P system need to obtain\n      valid credentials to join the\
    \ system.  The enrollment function\n      handles node authentication and authorization.\n\
    \   o  Peer discovery function: in order to join a P2P system (i.e., to\n    \
    \  become a peer), a node needs to establish a connection with one or\n      more\
    \ peers that are already part of the system.  The peer\n      discovery function\
    \ allows nodes to discover peers in the system in\n      order to connect to them.\n\
    \   The functions above are provided in a centralized way in some P2P\n   systems\
    \ (e.g., through a central enrollment server and a central peer\n   discovery\
    \ server, which is sometimes called a bootstrap server).\n   Taxonomies for P2P\
    \ systems, which will be discussed in Section 4, do\n   not consider these functions\
    \ when classifying P2P systems.  Instead,\n   they classify P2P systems based\
    \ on how the following set of functions\n   are implemented.\n   The following\
    \ functions depend on the service provided by the P2P\n   system.  That is, not\
    \ all P2P systems implement all functions.  For\n   example, a P2P system used\
    \ only for storing data may not implement\n   the computing function.  In another\
    \ example, a P2P system used only\n   for computing may not implement the data\
    \ storage function.  Also,\n   some of these functions are implemented in a centralized\
    \ way in some\n   P2P systems.\n   o  Data indexing function: it deals with indexing\
    \ the data stored in\n      the system.\n   o  Data storage function: it deals\
    \ with storing and retrieving data\n      from the system.\n   o  Computation\
    \ function: it deals with the computing performed by the\n      system.  Such\
    \ computing can be related to, among other things,\n      data processing or real-time\
    \ media processing.\n   o  Message transport function: it deals with message exchanges\n\
    \      between peers.  Depending on how this function is implemented,\n      peers\
    \ can exchange protocol messages through a central server,\n      directly between\
    \ themselves, or through peers that provide overlay\n      routing.\n   Depending\
    \ on the service being provided, some of the functions above\n   may not be needed.\
    \  Section 5 discusses different types of P2P\n   applications, which implement\
    \ different services.\n"
- title: 4.  Taxonomies for P2P Systems
  contents:
  - "4.  Taxonomies for P2P Systems\n   Taxonomies classify elements into groups so\
    \ that they can be studied\n   more easily.  People studying similar elements\
    \ can focus on common\n   problem sets.  Taxonomies also provide common terminology\
    \ that is\n   useful when discussing issues related to individual elements and\n\
    \   groups of elements within a given taxonomy.  In this section, we\n   provide\
    \ a few taxonomies for P2P systems in order to facilitate their\n   study and\
    \ to present such a common terminology.\n   Given that different authors cannot\
    \ seem to agree on a single common\n   definition for P2P, the fact that there\
    \ are also many different\n   taxonomies of P2P systems should not come as a surprise.\
    \  While\n   classifying P2P systems according to different traits is something\n\
    \   normal, the fact that different authors use the same term to indicate\n  \
    \ different things (e.g., first and second generation P2P systems mean\n   different\
    \ things for different authors) sometimes confuses readers.\n   Arguably, the\
    \ most useful classification of P2P systems has to do\n   with the way data is\
    \ indexed.  That is, how the data indexing\n   function is implemented.  A P2P\
    \ index can be centralized, local, or\n   distributed [RFC4981].  With a centralized\
    \ index, a central server\n   keeps references to the data in all peers.  With\
    \ a local index, each\n   peer only keeps references to its own data.  With a\
    \ distributed\n   index, references to data reside at several nodes.  Napster,\
    \ early\n   versions of Gnutella (up to version 0.4), and Distributed Hash Table\n\
    \   (DHT)-based systems are examples of centralized, local, and\n   distributed\
    \ indexes, respectively.\n   Indexes can also be classified into semantic and\
    \ semantic-free.  A\n   semantic index can capture relationships between documents\
    \ and their\n   metadata whereas a semantic-free index cannot [RFC4981].  While\n\
    \   semantic indexes allow for richer searches, they sometimes (depending\n  \
    \ on their implementation) fail to find the data even if it is actually\n   in\
    \ the system.\n   Some authors classify P2P systems by their level of decentralization.\n\
    \   Hybrid P2P systems need a central entity to provide their services\n   while\
    \ pure P2P systems can continue to provide their services even if\n   any single\
    \ peer is removed from the system [Schollmeier2001].\n   According to this definition,\
    \ P2P systems with a centralized index\n   are hybrid P2P systems while systems\
    \ with local and distributed\n   indexes are pure P2P systems.\n   Still, some\
    \ authors classify pure P2P systems by the level of\n   structure they show [Alima2005].\
    \  In unstructured systems, peers join\n   the system by connecting themselves\
    \ to any other existing peers.  In\n   structured systems, peers join the system\
    \ by connecting themselves to\n   well-defined peers based on their logical identifiers.\
    \  The\n   distinction between early unstructured systems (e.g., early versions\n\
    \   of Gnutella), which used local indexes and had no structure at all,\n   and\
    \ structured systems (e.g., the DHT-based systems), which used\n   distributed\
    \ indexes and had a well-defined structure, was fairly\n   clear.  However, unstructured\
    \ systems have evolved and now show a\n   certain level of structure (e.g., some\
    \ systems have special nodes\n   with more functionality) and use distributed\
    \ indexes.  Therefore, the\n   border between unstructured and structured is somewhat\
    \ blurry.\n   Some authors refer to different generations of P2P systems.  For\n\
    \   some, the first, second, and third generations consist of P2P systems\n  \
    \ using centralized indexes, flooding-based searches (i.e., using local\n   indexes),\
    \ and DHTs (i.e., DHT-based distributed indexes),\n   respectively [Foster2003].\
    \  Other authors consider that second\n   generation systems can also have non-DHT-based\
    \ distributed indexes\n   [Zhang2006].  Yet for other authors, the first and second\
    \ generations\n   consist of P2P systems using unstructured (typically using flooding-\n\
    \   based searched) and structured (e.g., DHT-based) routing,\n   respectively\
    \ [RFC4981].  Talking about generations of P2P systems in\n   a technical context\
    \ is not useful (as stated previously, it is more\n   useful to classify systems\
    \ based on how they index data) because\n   different generations are defined\
    \ in different ways depending on the\n   author and because talking about generations\
    \ gives the impression\n   that later generations are better than earlier ones.\
    \  Depending on\n   the application to be implemented, a P2P system of an earlier\n\
    \   generation may meet the application's requirements in a better way\n   than\
    \ a system of a later generation.\n   As discussed in Section 3, the previous\
    \ taxonomies do not consider\n   the enrollment and the peer discovery functions.\
    \  For example, a pure\n   P2P system would still be considered pure even if it\
    \ had centralized\n   enrollment and peer discovery servers.\n"
- title: 5.  P2P Applications
  contents:
  - "5.  P2P Applications\n   P2P applications developed so far can be classified\
    \ into the\n   following domains [Pourebrahimi2005] [Milojicic2002]: content\n\
    \   distribution, distributed computing, collaboration, and platforms.\n"
- title: 5.1.  Content Distribution
  contents:
  - "5.1.  Content Distribution\n   When most people think of P2P, they think of file\
    \ sharing.  Moreover,\n   they think of illegal file sharing where users exchange\
    \ material\n   (e.g., songs, movies, and software in digital format) they are\
    \ not\n   legally authorized to distribute.  However, despite people's\n   perception,\
    \ P2P file sharing systems are not intrinsically illegal.\n   P2P file sharing\
    \ applications provide one out of many means to store\n   and distribute content\
    \ on the Internet.  HTTP [RFC2616] and FTP\n   [RFC0959] servers are examples\
    \ of other content distribution\n   mechanisms.  People would not claim that HTTP\
    \ is an illegal mechanism\n   just because a number of users upload material that\
    \ cannot be legally\n   distributed to an HTTP server where other users can download\
    \ it.  The\n   same way, it is misleading to claim that P2P is illegal just because\n\
    \   some users use it for illegal purposes.\n   P2P content distribution systems\
    \ are used to implement legitimate\n   applications and business models that take\
    \ advantage of the\n   characteristics of these P2P systems.  Examples of legitimate\
    \ uses of\n   these systems include the distribution of pre-recorded TV programs\n\
    \   [Rodriguez2005], Linux distributions [Rodriguez2005], game updates\n   [WoW],\
    \ and live TV [Peltotalo2008] [Octoshape] by parties legally\n   authorized to\
    \ distribute that content (e.g., the content owner).\n   The main advantage of\
    \ P2P content distribution systems is their\n   scalability.  In general, the\
    \ more popular the content handled, the\n   more scalable the P2P system is. \
    \ The peer that has the original\n   content (i.e., the owner of a file or the\
    \ source of an audio or video\n   stream) distributes it to a fraction of the\
    \ peers interested in the\n   content, and these peers in turn distribute it to\
    \ other peers also\n   interested in the content.  Note that, in general, there\
    \ is no\n   requirement for peers distributing content to be able to access it\n\
    \   (e.g., the content may be encrypted so that peers without the\n   decryption\
    \ key are content distributors but not content consumers).\n   Peers can distribute\
    \ content to other peers in different ways.  For\n   example, they can distribute\
    \ the whole content, pieces of the content\n   (i.e., swarming), or linear combinations\
    \ of pieces of content\n   [Gkantsidis2005].  In any case, the end result is that\
    \ the peer with\n   the original content does not need to distribute the whole\
    \ content to\n   all the peers interested in it, as it would be the case when\
    \ using a\n   centralized server.  Therefore, the capacity of the system is not\n\
    \   limited by the processing capacity and the bandwidth of the peer with\n  \
    \ the original content and, thus, the quality of the whole service\n   increases.\n\
    \   An important area that determines the characteristics of a P2P\n   distribution\
    \ system is its peer selection process.  Interestingly,\n   the different parties\
    \ involved in the distribution have different\n   views on how peers should be\
    \ selected.  Users are interested in\n   connecting to peers that have the content\
    \ they want and also have\n   high bandwidth and processing capacity, and low\
    \ latency so that\n   transfers are faster.  The Content Delivery Network (CDN)\
    \ operator\n   wants peers to connect first to the peers who have the rarest pieces\n\
    \   of the content being distributed in order to improve the reliability\n   of\
    \ the system (in case those peers with the rare pieces of content\n   leave the\
    \ system).  Network operators prefer peers to perform local\n   transfers within\
    \ their network so that their peering and transit\n   agreements are not negatively\
    \ affected (i.e., by downloading content\n   from a remote network despite of\
    \ the content being available\n   locally).  Sometimes, all these requirements\
    \ can be met at the same\n   time (e.g., a peer with a rare piece of content has\
    \ high bandwidth\n   and processing capacity and is in the local network).  However,\
    \ other\n   times the system can just try and reach acceptable trade-offs when\n\
    \   selecting peers.  These issues were the subject of the IETF P2P\n   Infrastructure\
    \ (P2PI) workshop held in 2008.\n   Network operators also find that, depending\
    \ on the dimensioning of\n   their networks (e.g., where the bottlenecks are),\
    \ the different\n   traffic patterns generated by P2P or centralized CDNs can\
    \ be more or\n   less easily accommodated by the network [Huang2007].\n   An example\
    \ of a sensor network based on P2P content distribution and\n   Delay-tolerant\
    \ Networking (DTL) is ZebraNet [Juang2002].  ZebraNet is\n   a network used to\
    \ track zebras in the wild.  Each zebra carries a\n   tracking collar that gathers\
    \ data about the zebra (e.g., its\n   position) at different times.  Mobile stations\
    \ communicate wirelessly\n   with the collars in order to gather and consolidate\
    \ data from\n   different zebras.  Since not all the zebras get close enough to\
    \ a\n   mobile station for their collars to be able to communicate with the\n\
    \   station, the collars communicate among them exchanging the data they\n   have\
    \ gathered.  In this way, a given collar provides the mobile\n   station with\
    \ data from different zebras, some of which may never get\n   close enough to\
    \ the mobile station.  P2P networks are especially\n   useful in situations where\
    \ it is impossible to deploy a communication\n   infrastructure (e.g., due to\
    \ national park regulations or potential\n   vandalism) such as in the previous\
    \ example or when tracking reindeers\n   in Lapland [SNC] (this project has focused\
    \ on DTNs more than on P2P\n   so far, but some of its main constraints are similar\
    \ to the ones in\n   ZebraNet).  Note however that sensor networks such as ZebraNet\
    \ cannot\n   be strictly considered P2P because the only node issuing service\n\
    \   requests (i.e., the only node interested in receiving data) is a\n   central\
    \ node (i.e., the mobile station).\n"
- title: 5.2.  Distributed Computing
  contents:
  - "5.2.  Distributed Computing\n   In P2P distributed computing, each task is divided\
    \ into independent\n   subtasks that can be completed in parallel (i.e., no inter-task\n\
    \   communication) and delivered to a peer.  The peer completes the\n   subtask\
    \ using its resources and returns the result.  When all the\n   subtasks are completed,\
    \ their results are combined to obtain the\n   result of the original task.\n\
    \   Peers in P2P distributed computing systems are typically distributed\n   geographically\
    \ and are connected among them through wide-area\n   networks.  Conversely, in\
    \ cluster computing, nodes in a cluster are\n   typically physically close to\
    \ each other (often in the same room) and\n   have excellent communication capabilities\
    \ among themselves.\n   Consequently, computer clusters can divide tasks into\
    \ subtasks that\n   are not completely independent from one another and that cannot\
    \ be\n   completed in parallel.  The excellent communication capabilities\n  \
    \ among the nodes in the cluster make it possible to synchronize the\n   completion\
    \ of such tasks.  Since computers in a cluster are so\n   tightly integrated,\
    \ cluster computing techniques are not typically\n   considered P2P networking.\n\
    \   The main advantage of P2P distributed computing systems is that a\n   number\
    \ of regular computers can deliver the performance of a much\n   more powerful\
    \ (and typically expensive) computer.  Nevertheless, at\n   present, P2P distributed\
    \ computing can only be applied to tasks that\n   can be divided into independent\
    \ subtasks that can be completed in\n   parallel.  Tasks that do not show this\
    \ characteristic are better\n   performed by a single powerful computer.\n   Note\
    \ that even though distributed computing, in general, can be\n   considered P2P\
    \ (which is why we have included it in this section as\n   an example of a P2P\
    \ application), most current systems whose main\n   focus is distributed computing\
    \ do not fully comply with the\n   definition for P2P provided in Section 2. \
    \ The reason is that, in\n   those systems, service requests are typically generated\
    \ only by a\n   central node.  That is, most nodes do not generate service requests\n\
    \   (i.e., create tasks).  This is why Grid computing [Foster1999] cannot\n  \
    \ be strictly considered P2P [Lua2005].  Another well-known example\n   that cannot\
    \ strictly be considered P2P either is SETI@home (Search\n   for Extra-Terrestrial\
    \ Intelligence) [Seti], where the resources of\n   many computers are used to\
    \ analyze radio telescope data.  MapReduce\n   [Dean2004], a programming model\
    \ for processing large data sets,\n   cannot strictly be considered P2P either,\
    \ for the same reason.  On\n   the other hand, a number of collaboration applications\
    \ implement\n   distributed computing functions in a P2P way (see Section 5.3).\n\
    \   Another form of distributed computing that cannot be strictly\n   considered\
    \ P2P (despite its name) are P2P botnets [Grizzard2007].  In\n   P2P botnets,\
    \ service requests, which usually consist of generating\n   spam or launching\
    \ Distributed Denial-of-Service (DDoS) attacks, are\n   typically generated by\
    \ a central node (or a few central nodes); that\n   is why they cannot be strictly\
    \ considered P2P.  An example of this\n   type of P2P botnet that propagates using\
    \ a DHT-based overlay is the\n   Storm botnet [Kanich2008].  In addition to their\
    \ distributed\n   propagation techniques, some P2P botnets also use a distributed\n\
    \   command and control channel, which makes it more difficult to combat\n   them\
    \ than traditional botnets using centralized channels [Cooke2005].\n   DHT-based\
    \ overlays can also be used to support the configuration of\n   different types\
    \ of radio access networks [Oechsner2006].\n"
- title: 5.3.  Collaboration
  contents:
  - "5.3.  Collaboration\n   P2P collaboration applications include communication\
    \ applications\n   such as Voice over IP (VoIP) and Instant Messaging (IM) applications.\n\
    \   Section 2.3 included discussions on P2PSIP systems, which are an\n   example\
    \ of a standard-based P2P collaboration application.  There are\n   also proprietary\
    \ P2P collaboration applications on the Internet\n   [Skype].  Collaboration applications\
    \ typically provide rendezvous,\n   Network Address Translators (NAT) traversal,\
    \ and a set of media-\n   related functions (e.g., media mixing or media transcoding).\
    \  Note\n   that some of these functions (e.g., media transcoding) are,\n   effectively,\
    \ a form of distributed computing.\n   P2P rendezvous systems are especially useful\
    \ in situations where\n   there is no infrastructure.  A few people with no Internet\n\
    \   connectivity setting up an ad hoc system to exchange documents or the\n  \
    \ members of a recovery team communicating among themselves in a\n   disaster\
    \ area are examples of such situations.  P2PSIP is sometimes\n   referred to as\
    \ infrastructureless SIP to distinguish it from\n   traditional SIP, which relies\
    \ on a rendezvous server infrastructure.\n"
- title: 5.4.  Platforms
  contents:
  - "5.4.  Platforms\n   P2P platforms can be used to build applications on top of\
    \ them.  They\n   provide functionality the applications on top of them can use.\
    \  An\n   example of such a platform is JXTA [Gong2001].  JXTA provides peer\n\
    \   discovery, grouping of peers, and communication between peers.  The\n   goal\
    \ with these types of P2P platforms is that they become the\n   preferred environment\
    \ for application developers.  They take\n   advantage of the good scalability\
    \ properties of P2P systems.\n"
- title: 6.  Architectural Trade-Offs and Guidance
  contents:
  - "6.  Architectural Trade-Offs and Guidance\n   In this document, we have provided\
    \ a brief overview of P2P\n   technologies.  In order to dispel the notion that\
    \ P2P technologies\n   can only be used for illegal purposes, we have discussed\
    \ a number of\n   perfectly legitimate applications that have been implemented\
    \ using\n   P2P.  Examples of these applications include video conferencing\n\
    \   applications [Skype], the distribution of pre-recorded TV programs\n   [Rodriguez2005],\
    \ Linux distributions [Rodriguez2005], game updates\n   [WoW], and live TV [Peltotalo2008]\
    \ [Octoshape] by parties legally\n   authorized to distribute that content.\n\
    \   When deciding whether or not to use a P2P architecture to implement a\n  \
    \ given application, it is important to consider the general\n   characteristics\
    \ of P2P systems and evaluate them against the\n   application's requirements.\
    \  It is not possible to provide any\n   definitive rule to decide whether or\
    \ not a particular application\n   would be implemented best using P2P.  Instead,\
    \ we discuss a set of\n   trade-offs to be considered when making architectural\
    \ decisions and\n   provide guidance on which types of requirements are better\
    \ met by a\n   P2P architecture (security-related aspects are discussed in\n \
    \  Section 7).  Ultimately, applications' operational requirements need\n   to\
    \ be analyzed on a case-by-case basis in order to decide the most\n   suitable\
    \ architecture.\n   P2P systems are a good option when there is no existing\n\
    \   infrastructure and deploying it is difficult for some reason.  Ad hoc\n  \
    \ systems are usually good candidates to use P2P architectures.\n   Disaster areas\
    \ where existing infrastructures have been destroyed or\n   rendered unusable\
    \ can also benefit from P2P systems.\n   One of the main features of P2P systems\
    \ is their scalability.  Since\n   the system can leverage the processing and\
    \ storage capacity of all\n   the peers in the system, increases in the system's\
    \ load are tackled\n   by having the peers use more of their processing or storage\
    \ capacity.\n   Adding new peers generally increases the system's load but also\n\
    \   increases the system's processing and storage capacity.  That is,\n   there\
    \ is no typical need to update any central servers to be able to\n   deal with\
    \ more users or more load [Leibniz2007].  Adaptive P2P\n   systems tune themselves\
    \ in order to operate in the best possible mode\n   when conditions such as number\
    \ of peers or churn rate change\n   [Mahajan2003].  In any case, at present, maintaining\
    \ a running DHT\n   requires nontrivial operational efforts [Rhea2005].\n   Robustness\
    \ and reliability are important features in many systems.\n   For many applications\
    \ to be useful, it is essential that they are\n   dependable [RFC4981].  While\
    \ there are many techniques to make\n   centralized servers highly available,\
    \ peers in a P2P system are not\n   generally expected to be highly available\
    \ (of course, it is also\n   possible to build a more expensive P2P system with\
    \ only highly\n   available peers).  P2P systems are designed to cope with peers\n\
    \   leaving the system ungracefully (e.g., by crashing).  P2P systems use\n  \
    \ techniques such as data replication and redundant routing table\n   entries\
    \ to improve the system's reliability.  This way, if a peer\n   crashes, the data\
    \ it stored is not lost and can still be found in the\n   system.\n   The performance\
    \ of a P2P system when compared to a server-based\n   system depends on many factors\
    \ (e.g., the dimensioning of the server-\n   based system).  One of the most important\
    \ factors is the type of task\n   to be performed.  As we discussed in Section\
    \ 5.2, if the task that\n   needs to be computed can be divided into independent\
    \ subtasks that\n   can be completed in parallel, a P2P distributed computing\
    \ system made\n   up of regular computers may be able to perform better than even\
    \ a\n   super computer.  If the task at hand consists of completing database\n\
    \   queries, a well-dimensioned centralized database may be faster than a\n  \
    \ DHT.\n   The performance of a P2P system can be negatively affected by a lack\n\
    \   of cooperation between the peers in the system.  It is important to\n   have\
    \ incentives in place in order to minimize the number of free\n   riders in the\
    \ system.  Incentive systems generally aim to take the\n   P2P system to optimal\
    \ levels of cooperation [Feldman2004].\n   There are trade-offs between the scalability,\
    \ robustness, and\n   performance of a particular P2P system that can be influenced\
    \ through\n   the configuration of the system.  For example, a P2P database system\n\
    \   where each peer stored all the information in the system would be\n   robust\
    \ and have a high performance (i.e., queries would be completed\n   quickly) but\
    \ would not be efficient or scalable.  If the system\n   needed to grow, it could\
    \ be configured so that each node stored only\n   a part of the information of\
    \ the whole system in order to increase\n   its efficiency and scalability at\
    \ the expense of its robustness and\n   performance.\n   Energy consumption is\
    \ another important property of a system.  Even\n   though the overall consumption\
    \ of a client-server system is generally\n   lower than that of a P2P system providing\
    \ the same service, P2P\n   systems avoid central servers (e.g., server farms)\
    \ that can\n   potentially concentrate the consumption of high amounts of energy\
    \ in\n   a single geographical location.  When the nodes in a system need to\n\
    \   be up and running all the time anyway, it is possible to use those\n   nodes\
    \ to perform tasks in a P2P way.  However, using battery-powered\n   devices as\
    \ peers in a P2P system presents some challenges because a\n   peer typically\
    \ consumes more energy than a client in a client-server\n   architecture where\
    \ they can go into sleep mode more often\n   [Kelenyi2008].  Energy-aware P2P\
    \ protocols may be the solution to\n   these challenges [Gurun2006].\n   This\
    \ section has discussed a set of important system properties and\n   compared\
    \ P2P and centralized systems with respect to those\n   properties.  However,\
    \ the most important factor to take into\n   consideration is often cost.  Both\
    \ capital and operating costs need\n   to be taken into account when evaluating\
    \ the scalability,\n   reliability, and performance of a system.  If updating\
    \ a server so\n   that it can tackle more load is inexpensive, a server-based\n\
    \   architecture may be the best option.  If a highly available server is\n  \
    \ expensive, a P2P system may be the best choice.  With respect to\n   operating\
    \ costs, as previously stated, at present, maintaining a\n   running DHT requires\
    \ nontrivial operational efforts [Rhea2005].\n   In short, even though understanding\
    \ the general properties of P2P and\n   server-based systems is important, deciding\
    \ which architecture best\n   fits a particular application involves obtaining\
    \ detailed information\n   about the application and its context.  In most scenarios,\
    \ there are\n   no easy rules that tell us when to use which architecture.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security is an important issue that needs to\
    \ be considered when\n   choosing an architecture to design a system.  The first\
    \ issue that\n   needs to be considered is to which extent the nodes in the system\
    \ can\n   be trusted.  If all the nodes in the system are fully trusted (e.g.,\n\
    \   all the nodes are under the full control of the operator of the\n   system\
    \ and will never act in a malicious or otherwise incorrect way),\n   a P2P architecture\
    \ can achieve a high level of security.  However, if\n   nodes are not fully trusted\
    \ and can be expected to behave in\n   malicious ways (e.g., launching active\
    \ attacks), providing an\n   acceptable level of security in a P2P environment\
    \ becomes\n   significantly more challenging than in a non-P2P environment because\n\
    \   of its distributed ownership and lack of centralized control and\n   global\
    \ knowledge [Mondal2006].  Ultimately, the level of security\n   provided by a\
    \ P2P system largely depends on the proportion of its\n   nodes that behave maliciously.\
    \  Providing an acceptable level of\n   security in a P2P system with a large\
    \ number of malicious nodes can\n   easily become impossible.\n   P2P systems\
    \ can be used by attackers to harvest IP addresses in use.\n   Attackers can passively\
    \ obtain valid IP addresses of potential\n   victims without performing active\
    \ scans because a given peer is\n   typically connected to multiple peers.  In\
    \ addition to being passive,\n   this attack is much more efficient than performing\
    \ scans when the\n   address space to be scanned is large and sparsely populated\
    \ (e.g.,\n   the current IPv6 address space).  Additionally, in many cases there\n\
    \   is a high correlation between a particular application and a\n   particular\
    \ operating system.  In this way, an attacker can harvest IP\n   addresses suitable\
    \ to launch attacks that exploit vulnerabilities\n   that are specific to a given\
    \ operating system.\n   Central elements in centralized architectures become an\
    \ obvious\n   target for attacks.  P2P systems minimize the amount of central\n\
    \   elements and, thus, are more resilient against attacks targeted only\n   at\
    \ a few elements.\n   When designing a P2P system, it is important to consider\
    \ a number of\n   threats that are specific to P2P systems.  Additionally, more\
    \ general\n   threats that apply to other architectures as well are sometimes\n\
    \   bigger in a P2P environment.  P2P-specific threats mainly focus on\n   the\
    \ data storage functions and the routing of P2P systems.\n   In a P2P system,\
    \ messages (e.g., service requests) between two given\n   peers generally traverse\
    \ a set of intermediate peers that help route\n   messages between the two peers.\
    \  Those intermediate peers can attempt\n   to launch on-path attacks they would\
    \ not be able to launch if they\n   were not on the path between the two given\
    \ peers.  An attacker can\n   attempt to choose a logical location in the P2P\
    \ overlay that allows\n   it to launch on-path attacks against a particular victim\
    \ or a set of\n   victims.  The Sybil [Douceur2002] attack is an example of such\
    \ an\n   attack.  The attacker chooses its overlay identifier so that it\n   allows\
    \ the attacker to launch future attacks.  This type of attack\n   can be mitigated\
    \ by controlling how peers obtain their identifiers\n   (e.g., by having a central\
    \ authority).\n   A trivial passive attack by peers routing messages consists\
    \ of trying\n   to access the contents of those messages.  Encrypting message\
    \ parts\n   that are not required for routing is an obvious defense against this\n\
    \   type of attack.\n   An attacker can create a message and claim that it was\
    \ actually\n   created by another peer.  The attacker can even take a legitimate\n\
    \   message as a base and modify it to launch the attack.  Peer and\n   message\
    \ authentication techniques can be used to avoid this type of\n   attack.\n  \
    \ Attackers can attempt to launch a set of attacks against the storage\n   function\
    \ of the P2P system.  The following are generic (i.e., non-\n   P2P-specific)\
    \ attacks.  Even if they are generic attacks, the way to\n   avoid or mitigate\
    \ them in a P2P system can be more challenging than\n   in other architectures.\n\
    \   An attacker can attempt to store too much data in the system.  A\n   quota\
    \ system that can be enforced can be used to mitigate this\n   attack.\n   Unauthorized\
    \ peers can attempt to perform operations on data objects.\n   Peer authorization\
    \ in conjunction with peer authentication avoids\n   unauthorized operations.\n\
    \   A peer can return forged data objects claiming they are legitimate.\n   Data\
    \ object authentication prevents this attack.  However, a peer can\n   return\
    \ a previous version of a data object and claim it is the\n   current version.\
    \  The use of lifetimes can mitigate this type of\n   attack.\n   The following\
    \ are P2P-specific attacks against the data storage\n   function of a P2P system.\
    \  An attacker can refuse to store a\n   particular data object.  An attacker\
    \ can also claim a particular data\n   object does not exist even if another peer\
    \ created it and stored it\n   on the attacker.  These DoS (Denial-of-Service)\
    \ attacks can be\n   mitigated by using data replication techniques and performing\n\
    \   multiple, typically parallel, searches.\n   Attackers can attempt to launch\
    \ a set of attacks against the routing\n   of the P2P system.  An attacker can\
    \ attempt to modify the routing of\n   the system in order to be able to launch\
    \ on-path attacks.  Attackers\n   can use forged routing maintenance messages\
    \ for this purpose.  The\n   Eclipse attack [Singh2006] is an example of such\
    \ an attack.\n   Enforcing structural constraints or enforcing node degree bounds\
    \ can\n   mitigate this type of attack.\n   It is possible to launch DoS attacks\
    \ by modifying or dropping routing\n   maintenance messages or by creating forged\
    \ ones.  Having nodes get\n   routing tables from multiple peers can help mitigate\
    \ this type of\n   attack.\n   Attackers can launch a DoS attack by creating churn.\
    \  By leaving and\n   joining a P2P overlay rapidly many times, a set of attackers\
    \ can\n   create large amounts of maintenance traffic and make the routing\n \
    \  structure of the overlay unstable.  Limiting the amount of churn per\n   node\
    \ is a possible defense against this attack.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Jouni Maenpaa and Jani Hautakorpi helped with the literature\
    \ review.\n   Henning Schulzrinne provided useful ideas on how to define P2P\n\
    \   systems.  Bruce Lowekamp, Dan Wing, Dan York, Enrico Marocco, Cullen\n   Jennings,\
    \ and Frank Uwe Andersen provided useful comments on this\n   document.  Loa Andersson,\
    \ Aaron Falk, Barry Leiba, Kurtis Lindqvist,\n   Dow Street, and Lixia Zhang participated\
    \ in the IAB discussions on\n   this document.\n"
- title: 9.  IAB Members at the Time of This Writing
  contents:
  - "9.  IAB Members at the Time of This Writing\n   Marcelo Bagnulo\n   Gonzalo Camarillo\n\
    \   Stuart Cheshire\n   Vijay Gill\n   Russ Housley\n   John Klensin\n   Olaf\
    \ Kolkman\n   Gregory Lebovitz\n   Andrew Malis\n   Danny McPherson\n   David\
    \ Oran\n   Jon Peterson\n   Dave Thaler\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [Alima2005]         Alima, L., Ghodsi, A., and\
    \ S. Haridi, \"A\n                       Framework for Structured Peer-to-peer\
    \ Overlay\n                       Networks\", Global Computing, vol. 3267, Lecture\n\
    \                       Notes in Computer Science: Springer Berlin /\n       \
    \                Heidelberg, pp. 223-249, 2005.\n   [BitTorrent]        Cohen,\
    \ B., \"The BitTorrent Protocol Specification\n                       Version\
    \ 11031\", February 2008.\n   [Cooke2005]         Cooke, E., Jahanian, F., and\
    \ D. McPherson, \"The\n                       Zombie roundup: understanding, detecting,\
    \ and\n                       disrupting botnets\", Proceedings of the Steps to\n\
    \                       Reducing Unwanted Traffic on the Internet\n          \
    \             Workshop, 2005.\n   [Dean2004]          Dean, J. and S. Ghemawat,\
    \ \"MapReduce: Simplified\n                       Data Processing on Large Clusters\"\
    , Sixth\n                       Symposium on Operating System Design and\n   \
    \                    Implementation (OSDI '04), December 2004.\n   [Douceur2002]\
    \       Douceur, J., \"The Sybil Attack\", IPTPS 02,\n                       March\
    \ 2002.\n   [Farber1972]        Farber, D. and K. Larson, \"The Structure of a\n\
    \                       Distributed Computer System - The Communications\n   \
    \                    System\", Proceedings Symposium on Computer-\n          \
    \             Communications Networks and Teletraffic,\n                     \
    \  Microwave Research Institute of Polytechnic\n                       Institute\
    \ of Brooklyn pp. 21-27, 1972.\n   [Feldman2004]       Feldman, M., Lai, K., Stoica,\
    \ I., and J. Chuang,\n                       \"Robust Incentive Techniques for\
    \ Peer-to-peer\n                       Networks\", Proceedings of the 5th ACM\
    \ Conference\n                       on Electronic Commerce, 2004.\n   [Foster1999]\
    \        Foster, I., \"Computational Grids\", Chapter 2 of\n                 \
    \      The Grid: Blueprint for a New\n                       Computing Infrastructure,\
    \ 1999.\n   [Foster2003]        Foster, I. and A. Iamnitchi, \"On Death, Taxes,\n\
    \                       and the Convergence of Peer-to-Peer and Grid\n       \
    \                Computing\", 2nd International Workshop in Peer-\n          \
    \             to-Peer Systems IPTPS '02, 2003.\n   [Gkantsidis2005]    Gkantsidis,\
    \ C. and P. Rodriguez, \"Network Coding\n                       for Large Scale\
    \ Content Distribution\", IEEE\n                       INFOCOM 2005, vol. 4, March\
    \ 2005.\n   [Gong2001]          Gong, L., \"JXTA: A Network Programming\n    \
    \                   Environment\", IEEE Internet Computing, vol. 5,\n        \
    \               no. 3, pp. 88-95, 2001.\n   [Gray1983]          Gray, J. and S.\
    \ Metz, \"Solving the Problems of\n                       Distributed Databases\"\
    , Data Communications, pp.\n                       183-192, 1983.\n   [Gray1986A]\
    \         Gray, J., \"An Approach to Decentralized Computer\n                \
    \       Systems\", IEEE Transactions on Software\n                       Engineering,\
    \ V 12.6, pp. 684-689, 1986.\n   [Gray1986B]         Gray, J. and M. Anderton,\
    \ \"Distributed Systems:\n                       Four Case Studies\", IEEE Transactions\
    \ on\n                       Computers and Tandem Technical Report 85.5, 1986.\n\
    \   [Grizzard2007]      Grizzard, J., Sharma, V., Nunnery, C., Kang, B.,\n   \
    \                    and D. Dragon, \"Peer-to-peer botnets: overview\n       \
    \                and case study\", Proceedings of Hot Topics in\n            \
    \           Understanding Botnets (HotBots '07), 2007.\n   [Gurun2006]       \
    \  Gurun, S., Nagpurkar, P., and B. Zhao, \"Energy\n                       Consumption\
    \ and Conservation in Mobile Peer-to-\n                       Peer Systems\",\
    \ First International Workshop on\n                       Decentralized Resource\
    \ Sharing in Mobile\n                       Computing and Networking (MobiShare\
    \ 2006), 2006.\n   [Huang2007]         Huang, Y., Rabinovich, M., and Z. Xiao,\n\
    \                       \"Challenges of P2P Streaming Technologies for\n     \
    \                  IPTV Services\", IPTC Workshop International World\n      \
    \                 Wide Web Conference, Edinburgh, Scotland, United\n         \
    \              Kingdom, May 2006.\n   [Juang2002]         Juang, P., Oki, H.,\
    \ Wang, Y., Martonosi, M., Peh,\n                       L., and D. Rubenstein,\
    \ \"Energy-efficient\n                       computing for wildlife tracking:\
    \ design tradeoffs\n                       and early experiences with ZebraNet\"\
    , Proceedings\n                       of Conference on Computer and Communications\n\
    \                       Security (CCS), ACM, 2002.\n   [Kanich2008]        Kanich,\
    \ C., Levchenko, K., Enright, B., Voelker,\n                       G., Paxson,\
    \ V., and S. Savage, \"Spamalytics: An\n                       Empirical Analysis\
    \ of Spam Marketing Conversion\",\n                       Proceedings of Conference\
    \ on Computer and\n                       Communications Security (CCS) (ACM),\n\
    \                       October 2008.\n   [Kelenyi2008]       Kelenyi, I. and\
    \ J. Nurminen, \"Energy Aspects of\n                       Peer Cooperation -\
    \ Measurements with a Mobile DHT\n                       System\", in Proc. of\
    \ Cognitive and Cooperative\n                       Wireless Networks Workshop\
    \ in the IEEE\n                       International Conference on Communications\
    \ 2008,\n                       Beijing, China, pp. 164-168, 2008.\n   [Leibniz2007]\
    \       Leibniz, K., Hobfeld, T., Wakamiya, N., and M.\n                     \
    \  Murata, \"Peer-to-Peer vs. Client/Server:\n                       Reliability\
    \ and Efficiency of a Content\n                       Distribution Service\",\
    \ Lecture Notes in Computer\n                       Science, LNCS 4516, pp. 1161-1172,\
    \ 2007.\n   [Lua2005]           Keong Lua, E., Crowcroft, J., Pias, M., Sharma,\n\
    \                       R., and S. Lim, \"A Survey and Comparison of Peer-\n \
    \                      to-peer Overlay Network Schemes\", IEEE\n             \
    \          Communications Surveys & Tutorials, vol. 7, no.\n                 \
    \      2, Second Quarter 2005, pp. 72-93, 2005.\n   [MMUSIC-ICE]        Rosenberg,\
    \ J., \"Interactive Connectivity\n                       Establishment (ICE):\
    \ A Protocol for Network\n                       Address Translator (NAT) Traversal\
    \ for Offer/\n                       Answer Protocols\", Work in Progress,\n \
    \                      October 2007.\n   [Mahajan2003]       Mahajan, R., Castro,\
    \ M., and A. Rowstron,\n                       \"Controlling the Cost of Reliability\
    \ in Peer-to-\n                       Peer Overlays\", Proceedings of the 2nd\n\
    \                       International Workshop on Peer-to-Peer\n             \
    \          Systems (IPTPS '03), 2003.\n   [Milojicic2002]     Milojicic, D., Kalogeraki,\
    \ V., Lukose, R.,\n                       Nagaraja, K., Pruyne, J., Richard, B.,\
    \ Rollins,\n                       S., and Z. Xu, \"Peer-to-Peer Computing\",\n\
    \                       Technical Report HP, March 2002.\n   [Mondal2006]    \
    \    Mondal, A. and M. Kitsuregawa, \"Privacy, Security\n                    \
    \   and Trust in P2P environments: A Perspective\",\n                       17th\
    \ International Conference on Database and\n                       Expert Systems\
    \ Applications 2006 (DEXA '06),\n                       September 2006.\n   [Octoshape]\
    \         \"Octoshape - Large Scale Live Streaming\n                       Solutions\"\
    , <http://www.octoshape.com>.\n   [Oechsner2006]      Oechsner, S., Hobfeld, T.,\
    \ Tutschku, K.,\n                       Andersen, F., and L. Caviglione, \"Using\
    \ Kademlia\n                       for the Configuration of B3G Radio Access Nodes\"\
    ,\n                       Proceedings of the Fourth Annual IEEE\n            \
    \           International Conference on Pervasive Computing\n                \
    \       and Communications Workshops (PERCOMW '06), 2006.\n   [Peltotalo2008]\
    \     Peltotalo, J., Harju, J., Jantunen, A., Saukko,\n                      \
    \ M., and L. Vaatamoinen, \"Peer-to-Peer Streaming\n                       Technology\
    \ Survey\", Seventh International\n                       Conference on Networking,\
    \ Cancun, Mexico, pp.\n                       342-350, April 2008.\n   [Pourebrahimi2005]\
    \  Pourebrahimi, B., Bertels, K., and S.\n                       Vassiliadis,\
    \ \"A Survey of Peer-to-Peer Networks\",\n                       Proceedings of\
    \ the 16th Annual Workshop on\n                       Circuits, Systems, and Signal\
    \ Processing, ProRisc\n                       2005, November 2005.\n   [RFC0959]\
    \           Postel, J. and J. Reynolds, \"File Transfer\n                    \
    \   Protocol\", STD 9, RFC 959, October 1985.\n   [RFC2616]           Fielding,\
    \ R., Gettys, J., Mogul, J., Frystyk, H.,\n                       Masinter, L.,\
    \ Leach, P., and T. Berners-Lee,\n                       \"Hypertext Transfer\
    \ Protocol -- HTTP/1.1\",\n                       RFC 2616, June 1999.\n   [RFC3261]\
    \           Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n                 \
    \      Johnston, A., Peterson, J., Sparks, R., Handley,\n                    \
    \   M., and E. Schooler, \"SIP: Session Initiation\n                       Protocol\"\
    , RFC 3261, June 2002.\n   [RFC4981]           Risson, J. and T. Moors, \"Survey\
    \ of Research\n                       towards Robust Peer-to-Peer Networks: Search\n\
    \                       Methods\", RFC 4981, September 2007.\n   [RFC5128]   \
    \        Srisuresh, P., Ford, B., and D. Kegel, \"State of\n                 \
    \      Peer-to-Peer (P2P) Communication across Network\n                     \
    \  Address Translators (NATs)\", RFC 5128,\n                       March 2008.\n\
    \   [Rhea2005]          Rhea, S., Godfrey, B., Karp, B., Kubiatowicz, J.,\n  \
    \                     Ratnasamy, S., Shenker, S., Stoica, I., and H.\n       \
    \                Yu, \"Open DHT: A Public DHT Service and Its\n              \
    \         Uses\", ACM/SIGCOMM CCR'05, vol. 35, Issue 4,\n                    \
    \   October 2005.\n   [Rodriguez2005]     Rodriguez, P., Tan, S., and C. Gkantsidis,\
    \ \"On\n                       the Feasibility of Commercial Legal P2P Content\n\
    \                       Distribution\", ACM/SIGCOMM CCR'06, January 2006.\n  \
    \ [Roussopoulus2004]  Roussopoulus, M., Baker, M., Rosenthal, D.,\n          \
    \             Guili, T., Maniatis, P., and J. Mogul, \"2 P2P or\n            \
    \           Not 2 P2P\", Workshop on Peer-to-Peer Systems,\n                 \
    \      February 2004.\n   [SNC]               \"http://www.snc.sapmi.net\".\n\
    \   [Schollmeier2001]   Schollmeier, R., \"A Definition of Peer-to-Peer\n    \
    \                   Networking for the Classification of Peer-to-Peer\n      \
    \                 Architectures and Applications\", In Proceedings\n         \
    \              of the First International Conference on Peer-to-\n           \
    \            Peer Computing P2P '01, 2001.\n   [Seti]              \"SETI@home\"\
    , <http://setiathome.berkeley.edu>.\n   [Singh2006]         Singh, A., Ngan, T.,\
    \ Druschel, T., and D.\n                       Wallach, \"Eclipse Attacks on Overlay\
    \ Networks:\n                       Threats and Defences\", INFOCOM 2006, April\
    \ 2006.\n   [Skype]             \"Skype\", <http://www.skype.com>.\n   [Tanenbaum1981]\
    \     Tanenbaum, A. and S. Mullender, \"An Overview of\n                     \
    \  the Amoeba Distributed Operating System\", ACM\n                       SIGOPS\
    \ Operating Systems Review, 1981.\n   [WoW]               \"World of Warcraft\
    \ Community Site\",\n                       <http://www.worldofwarcraft.com>.\n\
    \   [Zhang2006]         Zhang, Y., Chen, C., and X. Wang, \"Recent\n         \
    \              Advances in Research on P2P Networks\", In\n                  \
    \     Proceedings of the Seventh International\n                       Conference\
    \ on Parallel and Distributed Computing,\n                       Applications,\
    \ and Technologies PDCAT '06, 2006.\n"
- title: Appendix A.  Historical Background on Distributed Architectures
  contents:
  - "Appendix A.  Historical Background on Distributed Architectures\n   In this appendix,\
    \ we briefly provide historical background on\n   distributed architectures. \
    \ Distributed architectures are relevant to\n   P2P because P2P architectures\
    \ are a type of distributed architecture.\n   That is, a distributed architecture\
    \ is considered P2P if it meets a\n   set of requirements, which are discussed\
    \ in Section 2.\n   In centralized architectures (e.g., client-server architectures),\
    \ a\n   central server (or very few central servers) undertakes most of the\n\
    \   system's processing and storage.  Conversely, decentralized\n   architectures\
    \ contain no (or very few) centralized elements.\n   The increasing spread of\
    \ packet-switched network technologies in the\n   1970s made it possible to develop\
    \ operational distributed computer\n   systems [Farber1972].  Distributed computer\
    \ systems received a lot of\n   attention within the research community.  Research\
    \ focused on\n   distributing the different parts of a computer system, such as\
    \ its\n   operating system [Tanenbaum1981] or its databases [Gray1983].  The\n\
    \   idea was to hide from the user the fact that the system was\n   distributed.\
    \  That is, the user did not have to worry or even be\n   aware of the fact that\
    \ his or her files were stored in different\n   computers or the fact that his\
    \ or her tasks were processed also in a\n   distributed way.  Actions such as\
    \ file transfers and task allocations\n   were taken care of by the system in\
    \ an automated fashion and were\n   transparent to the user.\n   In the middle\
    \ of the 1980s, building distributed computer systems\n   using general-purpose\
    \ off-the-shelf hardware and software was\n   believed to be not much harder than\
    \ building large centralized\n   applications [Gray1986A].  It was understood\
    \ that distributed systems\n   had both advantages and disadvantages when compared\
    \ to centralized\n   systems.  Choosing which type of system to use for a particular\n\
    \   application was a trade-off that depended on the characteristics and\n   requirements\
    \ of the application [Gray1986B].\n   The client-server paradigm, where a client\
    \ makes a request to a\n   server that processes the request and returns the result\
    \ to the\n   client, was and is used by many Internet applications.  In fact,\n\
    \   client-server architectures were so ubiquitous on the Internet that,\n   unfortunately,\
    \ the Internet itself evolved as if the majority of the\n   endpoints on the Internet\
    \ were only interested in applications\n   following the client-server model.\
    \  With the appearance of Network\n   Address Translators (NATs) and stateful\
    \ firewalls, most Internet\n   endpoints lost the ability to receive connections\
    \ from remote\n   endpoints unless they first initiated a connection towards those\n\
    \   nodes.  While NATs were designed not to disrupt client-server\n   applications,\
    \ distributed applications that relied on nodes receiving\n   connections were\
    \ disrupted.  In a network full of NATs, these types\n   of distributed applications\
    \ could only be run among nodes with public\n   IP addresses.  Of course, most\
    \ users did not like applications that\n   only worked some of the time (i.e.,\
    \ when their endpoint happened to\n   have a public IP address).  Therefore, the\
    \ loss of global\n   connectivity caused by NATs was one of the reasons why applications\n\
    \   that did not follow the client-server paradigm (e.g., P2P\n   applications)\
    \ took a relatively long time to be widely deployed on\n   the public Internet.\n\
    \   The design of NAT traversal mechanisms has made it possible to deploy\n  \
    \ all types of distributed applications over a network without global\n   connectivity.\
    \  While the first NAT traversal mechanisms used by P2P\n   applications were\
    \ proprietary [RFC5128], nowadays there are standard\n   NAT traversal mechanisms\
    \ such as Interactive Connectivity\n   Establishment (ICE) [MMUSIC-ICE].  ICE\
    \ makes it possible for\n   endpoints to establish connections among themselves\
    \ in the presence\n   of NATs.  The recovery of global connectivity among Internet\n\
    \   endpoints has made it possible to deploy many P2P applications on the\n  \
    \ public Internet (unfortunately, the fact that global connectivity is\n   not\
    \ supported natively at the network layer makes it necessary for\n   applications\
    \ to deal with NATs, which can result in highly complex\n   systems).  Some of\
    \ these P2P applications have been very successful\n   and are currently used\
    \ by a large number of users.\n   Another factor that made it possible to deploy\
    \ distributed\n   applications was the continuous significant advances in terms\
    \ of\n   processing power and storage capacity of personal computers and\n   networked\
    \ devices.  Eventually, most endpoints on the Internet had\n   capabilities that\
    \ previously were exclusively within the reach of\n   high-end servers.  The natural\
    \ next step was to design distributed\n   applications that took advantage of\
    \ all that distributed available\n   capacity.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Gonzalo Camarillo (editor)\n   Ericsson\n   Hirsalantie\
    \ 11\n   Jorvas  02420\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n\
    \   Internet Architecture Board\n   EMail: iab@iab.org\n"
