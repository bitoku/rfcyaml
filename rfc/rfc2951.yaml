- title: __initial_text__
  contents:
  - '              TELNET Authentication Using KEA and SKIPJACK

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a method to authenticate TELNET using the\
    \ Key\n   Exchange Algorithm (KEA), and encryption of the TELNET stream using\n\
    \   SKIPJACK.  Two encryption modes are specified; one provides data\n   integrity\
    \ and the other does not.  The method relies on the TELNET\n   Authentication\
    \ Option.\n"
- title: 1. Command Names and Codes
  contents:
  - "1. Command Names and Codes\n   AUTHENTICATION           37\n     Authentication\
    \ Commands:\n       IS                       0\n       SEND                  \
    \   1\n       REPLY                    2\n       NAME                     3\n\
    \     Authentication Types:\n       KEA_SJ                  12\n       KEA_SJ_INTEG\
    \            13\n     Modifiers:\n       AUTH_WHO_MASK            1\n       AUTH_CLIENT_TO_SERVER\
    \    0\n       AUTH_SERVER_TO CLIENT    1\n       AUTH_HOW_MASK            2\n\
    \       AUTH_HOW_ONE_WAY         0\n       AUTH_HOW_MUTUAL          2\n      \
    \ ENCRYPT_MASK            20\n       ENCRYPT_OFF              0\n       ENCRYPT_USING_TELOPT\
    \     4\n       ENCRYPT_AFTER_EXCHANGE  16\n       ENCRYPT_RESERVED        20\n\
    \       INI_CRED_FWD_MASK        8\n       INI_CRED_FWD_OFF         0\n      \
    \ INI_CRED_FWD_ON          8\n     Sub-option Commands:\n       KEA_CERTA_RA \
    \            1\n       KEA_CERTB_RB_IVB_NONCEB  2\n       KEA_IVA_RESPONSEB_NONCEA\
    \ 3\n       KEA_RESPONSEA            4\n"
- title: 2. TELNET Security Extensions
  contents:
  - "2. TELNET Security Extensions\n   TELNET, as a protocol, has no concept of security.\
    \  Without\n   negotiated options, it merely passes characters back and forth\n\
    \   between the NVTs represented by the two TELNET processes.  In its\n   most\
    \ common usage as a protocol for remote terminal access (TCP port\n   23), TELNET\
    \ normally connects to a server that requires user-level\n   authentication through\
    \ a user name and password in the clear.  The\n   server does not authenticate\
    \ itself to the user.\n   The TELNET Authentication Option provides for:\n   \
    \  *  User authentication -- replacing or augmenting the normal host\n       \
    \ password mechanism;\n     *  Server authentication -- normally done in conjunction\
    \ with user\n        authentication;\n     *  Session parameter negotiation --\
    \ in particular, encryption key\n        and attributes;\n     *  Session protection\
    \ -- primarily encryption of the data and\n        embedded command stream, but\
    \ the encryption algorithm may also\n        provide data integrity.\n   In order\
    \ to support these security services, the two TELNET entities\n   must first negotiate\
    \ their willingness to support the TELNET\n   Authentication Option.  Upon agreeing\
    \ to support this option, the\n   parties are then able to perform sub-option\
    \ negotiations to determine\n   the authentication protocol to be used, and possibly\
    \ the remote user\n   name to be used for authorization checking.  Encryption\
    \ is negotiated\n   along with the type of the authentication.\n   Authentication\
    \ and parameter negotiation occur within an unbounded\n   series of exchanges.\
    \  The server proposes a preference-ordered list\n   of authentication types (mechanisms)\
    \ that it supports.  In addition\n   to listing the mechanisms it supports, the\
    \ server qualifies each\n   mechanism with a modifier that specifies whether encryption\
    \ of data\n   is desired.  The client selects one mechanism from the list and\n\
    \   responds to the server indicating its choice and the first set of\n   authentication\
    \ data needed for the selected authentication type.  The\n   client may ignore\
    \ a request to encrypt data and so indicate, but the\n   server may also terminate\
    \ the connection if the client refuses\n   encryption.  The server and the client\
    \ then proceed through whatever\n   number of iterations is required to arrive\
    \ at the requested\n   authentication.\n   Encryption is started immediately after\
    \ the Authentication Option is\n   completed.\n"
- title: 3. Use of Key Exchange Algorithm (KEA)
  contents:
  - "3. Use of Key Exchange Algorithm (KEA)\n   This paper specifies the method in\
    \ which KEA is used to achieve\n   TELNET Authentication.  KEA (in conjunction\
    \ with SKIPJACK) [4]\n   provides authentication and confidentiality.  Integrity\
    \ may also be\n   provided.\n   TELNET entities may use KEA to provide mutual\
    \ authentication and\n   support for the setup of data encryption keys.  A simple\
    \ token format\n   and set of exchanges delivers these services.\n   NonceA and\
    \ NonceB used in this exchange are 64-bit bit strings.  The\n   client generates\
    \ NonceA, and the server generates NonceB.  The nonce\n   value is selected randomly.\
    \  The nonce is sent in a big endian form.\n   The encryption of the nonce will\
    \ be done with the same mechanism that\n   the session will use, detailed in the\
    \ next section.\n   Ra and Rb used in this exchange are 1024 bit strings and are\
    \ defined\n   by the KEA Algorithm [4].\n   The IVa and IVb are 24 byte Initialization\
    \ Vectors.  They are\n   composed of \"THIS IS NOT LEAF\" followed by 8 random\
    \ bytes.\n   CertA is the client's certificate.  CertB is the server's\n   certificate.\
    \  Both certificates are X.509 certificates [6] that\n   contain KEA public keys\
    \ [7].  The client must validate the server's\n   certificate before using the\
    \ KEA public key it contains.  Likewise,\n   the server must validate the client's\
    \ certificate before using the\n   KEA public key it contains.\n   On completing\
    \ these exchanges, the parties have a common SKIPJACK\n   key.  Mutual authentication\
    \ is provided by verification of the\n   certificates used to establish the SKIPJACK\
    \ encryption key and\n   successful use of the derived SKIPJACK session key. \
    \ To protect\n   against active attacks, encryption will take place after successful\n\
    \   authentication.  There will be no way to turn off encryption and\n   safely\
    \ turn it back on; repeating the entire authentication is the\n   only safe way\
    \ to restart it.  If the user does not want to use\n   encryption, he may disable\
    \ encryption after the session is\n   established.\n"
- title: 3.1.  SKIPJACK Modes
  contents:
  - "3.1.  SKIPJACK Modes\n   There are two distinct modes for encrypting TELNET streams;\
    \ one\n   provides integrity and the other does not.  Because TELNET is\n   normally\
    \ operated in a character-by-character mode, the SKIPJACK with\n   stream integrity\
    \ mechanism requires the transmission of 4 bytes for\n   every TELNET data byte.\
    \  However, a simplified mode SKIPJACK without\n   integrity mechanism will only\
    \ require the transmission of one byte\n   for every TELNET data byte.\n   The\
    \ cryptographic mode for SKIPJACK with stream integrity is Cipher\n   Feedback\
    \ on 32 bits of data (CFB-32) and the mode of SKIPJACK is\n   Cipher Feedback\
    \ on 8 bits of data (CFB-8).\n"
- title: 3.1.1.  SKIPJACK without stream integrity
  contents:
  - "3.1.1.  SKIPJACK without stream integrity\n   The first and least complicated\
    \ mode uses SKIPJACK CFB-8.  This mode\n   provides no stream integrity.\n   For\
    \ SKIPJACK without stream integrity, the two-octet authentication\n   type pair\
    \ is KEA_SJ AUTH_CLIENT_TO_SERVER | AUTH_HOW_MUTUAL |\n   ENCRYPT_AFTER_EXCHANGE\
    \ | INI_CRED_FWD_OFF.  This indicates that the\n   SKIPJACK without integrity\
    \ mechanism will be used for mutual\n   authentication and TELNET stream encryption.\
    \  Figure 1 illustrates\n   the authentication mechanism of KEA followed by SKIPJACK\
    \ without\n   stream integrity.\n"
- title: '---------------------------------------------------------------------'
  contents:
  - "---------------------------------------------------------------------\n Client\
    \ (Party A)                   Server (Party B)\n                             \
    \       <-- IAC DO AUTHENTICATION\n IAC WILL AUTHENTICATION        -->\n     \
    \                               <-- IAC SB AUTHENTICATION SEND\n             \
    \                           <list of authentication options>\n               \
    \                         IAC SE\n IAC SB AUTHENTICATION\n NAME <user name>  \
    \             -->\n IAC SB AUTHENTICATION IS\n KEA_SJ\n AUTH_CLIENT_TO_SERVER\
    \ |\n     AUTH_HOW_MUTUAL |\n     ENCRYPT_AFTER_EXCHANGE |\n     INI_CRED_FWD_OFF\n\
    \ KEA_CERTA_RA\n CertA||Ra IAC SE               -->\n                        \
    \            <-- IAC SB AUTHENTICATION REPLY\n                               \
    \         KEA_SJ\n                                        AUTH_CLIENT_TO_SERVER\
    \ |\n                                            AUTH_HOW_MUTUAL |\n         \
    \                                   ENCRYPT_AFTER_EXCHANGE |\n               \
    \                             INI_CRED_FWD_OFF\n                             \
    \           IVA_RESPONSEB_NONCEA\n                                        KEA_CERTB_RB_IVB_NONCEB\n\
    \                                        CertB||Rb||IVb||\n                  \
    \                          Encrypt( NonceB )\n                               \
    \         IAC SE\n IAC SB AUTHENTICATION IS\n KEA_SJ\n AUTH_CLIENT_TO_SERVER |\n\
    \     AUTH_HOW_MUTUAL |\n     ENCRYPT_AFTER_EXCHANGE |\n     INI_CRED_FWD_OFF\n\
    \ KEA_IVA_RESPONSEB_NONCEA\n IVa||Encrypt( (NonceB XOR 0x0C12)||NonceA )\n IAC\
    \ SE                         -->\n Client (Party A)                   Server (Party\
    \ B)\n <client begins encryption>\n                                    <-- IAC\
    \ SB AUTHENTICATION REPLY\n                                        KEA_SJ\n  \
    \                                      AUTH_CLIENT_TO_SERVER |\n             \
    \                               AUTH_HOW_MUTUAL |\n                          \
    \                  ENCRYPT_AFTER_EXCHANGE |\n                                \
    \            INI_CRED_FWD_OFF\n                                        KEA_RESPONSEA\n\
    \                                        Encrypt( NonceA XOR 0x0C12 )\n      \
    \                                  IAC SE\n                                  \
    \      <server begins encryption>\n"
- title: '---------------------------------------------------------------------'
  contents:
  - "---------------------------------------------------------------------\n     \
    \                         Figure 1.\n"
- title: 3.1.2.  SKIPJACK with stream integrity
  contents:
  - "3.1.2.  SKIPJACK with stream integrity\n   SKIPJACK with stream integrity is\
    \ more complicated.  It uses the\n   SHA-1 [3] one-way hash function to provide\
    \ integrity of the\n   encryption stream as follows:\n       Set H0 to be the\
    \ SHA-1 hash of a zero-length string.\n       Cn is the nth character in the TELNET\
    \ stream.\n       Hn = SHA-1( Hn-1||Cn ), where Hn is the hash value\n       \
    \     associated with the nth character in the stream.\n       ICVn is set to\
    \ the three most significant bytes of Hn.\n       Transmit Encrypt( Cn||ICVn ).\n\
    \   The ciphertext that is transmitted is the SKIPJACK CFB-32 encryption\n   of\
    \ ( Cn||ICVn ).  The receiving end of the TELNET link reverses the\n   process,\
    \ first decrypting the ciphertext, separating Cn and ICVn,\n   recalculating Hn,\
    \ recalculating ICVn, and then comparing the received\n   ICVn with the recalculated\
    \ ICVn.  Integrity is indicated if the\n   comparison succeeds, and Cn can then\
    \ be processed normally as part of\n   the TELNET stream.  Failure of the comparison\
    \ indicates some loss of\n   integrity, whether due to active manipulation or\
    \ loss of\n   cryptographic synchronization.  In either case, the only recourse\
    \ is\n   to drop the TELNET connection and start over.\n   For SKIPJACK with stream\
    \ integrity, the two-octet authentication type\n   pair is KEA_SJ_INTEG AUTH_CLIENT_TO_SERVER\
    \ | AUTH_HOW_MUTUAL |\n   ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF.  This indicates\
    \ that the\n   KEA SKIPJACK with integrity mechanism will be used for mutual\n\
    \   authentication and TELNET stream encryption.  Figure 2 illustrates\n   the\
    \ authentication mechanism of KEA SKIPJACK with stream integrity.\n"
- title: '---------------------------------------------------------------------'
  contents:
  - "---------------------------------------------------------------------\n Client\
    \ (Party A)                   Server (Party B)\n                             \
    \       <-- IAC DO AUTHENTICATION\n IAC WILL AUTHENTICATION        -->\n     \
    \                               <-- IAC SB AUTHENTICATION SEND\n             \
    \                           <list of authentication options>\n               \
    \                         IAC SE\n IAC SB AUTHENTICATION\n NAME <user name>  \
    \             -->\n IAC SB AUTHENTICATION IS\n KEA_SJ_INTEG\n AUTH_CLIENT_TO_SERVER\
    \ |\n     AUTH_HOW_MUTUAL |\n     ENCRYPT_AFTER_EXCHANGE |\n     INI_CRED_FWD_OFF\n\
    \ KEA_CERTA_RA\n CertA||Ra IAC SE               -->\n                        \
    \            <-- IAC SB AUTHENTICATION REPLY\n                               \
    \         KEA_SJ_INTEG\n                                        AUTH_CLIENT_TO_SERVER\
    \ |\n                                            AUTH_HOW_MUTUAL |\n         \
    \                                   ENCRYPT_AFTER_EXCHANGE |\n               \
    \                             INI_CRED_FWD_OFF\n                             \
    \           IVA_RESPONSEB_NONCEA\n                                        KEA_CERTB_RB_IVB_NONCEB\n\
    \                                        CertB||Rb||IVb||\n                  \
    \                          Encrypt( NonceB )\n                               \
    \         IAC SE\n IAC SB AUTHENTICATION IS\n KEA_SJ_INTEG\n AUTH_CLIENT_TO_SERVER\
    \ |\n     AUTH_HOW_MUTUAL |\n     ENCRYPT_AFTER_EXCHANGE |\n     INI_CRED_FWD_OFF\n\
    \ KEA_IVA_RESPONSEB_NONCEA\n IVa||Encrypt( (NonceB XOR 0x0D12)||NonceA )\n IAC\
    \ SE                         -->\n Client (Party A)                   Server (Party\
    \ B)\n <client begins encryption>\n                                    <-- IAC\
    \ SB AUTHENTICATION REPLY\n                                        KEA_SJ_INTEG\n\
    \                                        AUTH_CLIENT_TO_SERVER |\n           \
    \                                 AUTH_HOW_MUTUAL |\n                        \
    \                    ENCRYPT_AFTER_EXCHANGE |\n                              \
    \              INI_CRED_FWD_OFF\n                                        KEA_RESPONSEA\n\
    \                                        Encrypt( NonceA XOR 0x0D12 )\n      \
    \                                  IAC SE\n                                  \
    \      <server begins encryption>\n"
- title: '---------------------------------------------------------------------'
  contents:
  - "---------------------------------------------------------------------\n     \
    \                         Figure 2\n"
- title: 4.0.  Security Considerations
  contents:
  - "4.0.  Security Considerations\n   This entire memo is about security mechanisms.\
    \  For KEA to provide\n   the authentication discussed, the implementation must\
    \ protect the\n   private key from disclosure.  Likewise, the SKIPJACK keys must\
    \ be\n   protected from disclosure.\n   Implementations must randomly generate\
    \ KEA private keys,\n   initialization vectors (IVs), and nonces.  The use of\
    \ inadequate\n   pseudo-random number generators (PRNGs) to generate cryptographic\n\
    \   keys can result in little or no security.  An attacker may find it\n   much\
    \ easier to reproduce the PRNG environment that produced the keys,\n   searching\
    \ the resulting small set of possibilities, rather than brute\n   force searching\
    \ the whole key space.  The generation of quality\n   random numbers is difficult.\
    \  RFC 1750 [8] offers important guidance\n   in this area, and Appendix 3 of\
    \ FIPS Pub 186 [9] provides one quality\n   PRNG technique.\n   By linking the\
    \ enabling of encryption as a side effect of successful\n   authentication, protection\
    \ is provided against an active attacker.\n   If encryption were enabled as a\
    \ separate negotiation, it would\n   provide a window of vulnerability from when\
    \ the authentication\n   completes, up to and including the negotiation to turn\
    \ on encryption.\n   The only safe way to restart encryption, if it is turned\
    \ off, is to\n   repeat the entire authentication process.\n"
- title: 5. IANA Considerations
  contents:
  - "5. IANA Considerations\n   The authentication types KEA_SJ and KEA_SJ_INTEG and\
    \ their associated\n   suboption values are registered with IANA.  Any suboption\
    \ values used\n   to extend the protocol as described in this document must be\n\
    \   registered with IANA before use.  IANA is instructed not to issue new\n  \
    \ suboption values without submission of documentation of their use.\n"
- title: 6.0.  Acknowledgements
  contents:
  - "6.0.  Acknowledgements\n   We would like to thank William Nace for support during\
    \ implementation\n   of this specification.\n"
- title: 7.0.  References
  contents:
  - "7.0.  References\n   [1] Postel, J. and J. Reynolds, \"TELNET Protocol Specification\"\
    , ASTD\n       8, RFC 854, May 1983.\n   [2] Ts'o, T. and J. Altman, \"Telnet\
    \ Authentication Option\", RFC 2941,\n       September 2000.\n   [3] Secure Hash\
    \ Standard. FIPS Pub 180-1. April 17, 1995.\n   [4] \"SKIPJACK and KEA Algorithm\
    \ Specification\", Version 2.0, May 29,\n       1998. Available from http://csrc.nist.gov/encryption/skipjack-\n\
    \       kea.htm\n   [5] Postel, J. and J. Reynolds, \"TELNET Option Specifications\"\
    , STD\n       8, RFC 855, May 1983.\n   [6] Housley, R., Ford, W., Polk, W. and\
    \ D. Solo, \"Internet X.509\n       Public Key Infrastructure: X.509 Certificate\
    \ and CRL Profile\",\n       RFC 2459, January 1999.\n   [7] Housley, R. and W.\
    \ Polk, \"Internet X.509 Public Key\n       Infrastructure - Representation of\
    \ Key Exchange Algorithm (KEA)\n       Keys in Internet X.509 Public Key Infrastructure\
    \ Certificates\",\n       RFC 2528, March 1999.\n   [8] Eastlake, D., Crocker,\
    \ S. and J. Schiller, \"Randomness\n       Recommendations for Security\", RFC\
    \ 1750, December 1994.\n   [9) National Institute of Standards and Technology.\
    \  FIPS Pub 186:\n       Digital Signature Standard.  19 May 1994.\n"
- title: 8.0.  Authors' Addresses
  contents:
  - "8.0.  Authors' Addresses\n   Russell Housley\n   SPYRUS\n   381 Elden Street,\
    \ Suite 1120\n   Herndon, VA 20170\n   USA\n   EMail: housley@spyrus.com\n   Todd\
    \ Horting\n   SPYRUS\n   381 Elden Street, Suite 1120\n   Herndon, VA 20170\n\
    \   USA\n   EMail: thorting@spyrus.com\n   Peter Yee\n   SPYRUS\n   5303 Betsy\
    \ Ross Drive\n   Santa Clara, CA 95054\n   USA\n   EMail: yee@spyrus.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
