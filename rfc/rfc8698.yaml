- title: __initial_text__
  contents:
  - ''
- title: 'Network-Assisted Dynamic Adaptation (NADA): A Unified Congestion Control'
  contents:
  - "Network-Assisted Dynamic Adaptation (NADA): A Unified Congestion Control\n  \
    \                     Scheme for Real-Time Media\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes Network-Assisted Dynamic Adaptation (NADA),\
    \ a\n   novel congestion control scheme for interactive real-time media\n   applications\
    \ such as video conferencing.  In the proposed scheme, the\n   sender regulates\
    \ its sending rate, based on either implicit or\n   explicit congestion signaling,\
    \ in a unified approach.  The scheme can\n   benefit from Explicit Congestion\
    \ Notification (ECN) markings from\n   network nodes.  It also maintains consistent\
    \ sender behavior in the\n   absence of such markings by reacting to queuing delays\
    \ and packet\n   losses instead.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are candidates\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8698.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  System Overview\n\
    \   4.  Core Congestion Control Algorithm\n     4.1.  Mathematical Notations\n\
    \     4.2.  Receiver-Side Algorithm\n     4.3.  Sender-Side Algorithm\n   5. \
    \ Practical Implementation of NADA\n     5.1.  Receiver-Side Operation\n     \
    \  5.1.1.  Estimation of One-Way Delay and Queuing Delay\n       5.1.2.  Estimation\
    \ of Packet Loss/Marking Ratio\n       5.1.3.  Estimation of Receiving Rate\n\
    \     5.2.  Sender-Side Operation\n       5.2.1.  Rate-Shaping Buffer\n      \
    \ 5.2.2.  Adjusting Video Target Rate and Sending Rate\n     5.3.  Feedback Message\
    \ Requirements\n   6.  Discussions and Further Investigations\n     6.1.  Choice\
    \ of Delay Metrics\n     6.2.  Method for Delay, Loss, and Marking Ratio Estimation\n\
    \     6.3.  Impact of Parameter Values\n     6.4.  Sender-Based vs. Receiver-Based\
    \ Calculation\n     6.5.  Incremental Deployment\n   7.  Reference Implementations\n\
    \   8.  Suggested Experiments\n   9.  IANA Considerations\n   10. Security Considerations\n\
    \   11. References\n     11.1.  Normative References\n     11.2.  Informative\
    \ References\n   Appendix A.  Network Node Operations\n     A.1.  Default Behavior\
    \ of Drop-Tail Queues\n     A.2.  RED-Based ECN Marking\n     A.3.  Random Early\
    \ Marking with Virtual Queues\n   Acknowledgments\n   Contributors\n   Authors'\
    \ Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Interactive real-time media applications introduce a unique\
    \ set of\n   challenges for congestion control.  Unlike TCP, the mechanism used\n\
    \   for real-time media needs to adapt quickly to instantaneous bandwidth\n  \
    \ changes, accommodate fluctuations in the output of video encoder rate\n   control,\
    \ and cause low queuing delay over the network.  An ideal\n   scheme should also\
    \ make effective use of all types of congestion\n   signals, including packet\
    \ loss, queuing delay, and explicit\n   congestion notification (ECN) [RFC3168]\
    \ markings.  The requirements\n   for the congestion control algorithm are outlined\
    \ in [RMCAT-CC].  The\n   requirements highlight that the desired congestion control\
    \ scheme\n   should 1) avoid flow starvation and attain a reasonable fair share\
    \ of\n   bandwidth when competing against other flows, 2) adapt quickly, and\n\
    \   3) operate in a stable manner.\n   This document describes an experimental\
    \ congestion control scheme\n   called Network-Assisted Dynamic Adaptation (NADA).\
    \  The design of\n   NADA benefits from explicit congestion control signals (e.g.,\
    \ ECN\n   markings) from the network, yet also operates when only implicit\n \
    \  congestion indicators (delay and/or loss) are available.  Such a\n   unified\
    \ sender behavior distinguishes NADA from other congestion\n   control schemes\
    \ for real-time media.  In addition, its core\n   congestion control algorithm\
    \ is designed to guarantee stability for\n   path round-trip times (RTTs) below\
    \ a prescribed bound (e.g., 250 ms\n   with default parameter choices).  It further\
    \ supports weighted\n   bandwidth sharing among competing video flows with different\n\
    \   priorities.  The signaling mechanism consists of standard Real-time\n   Transport\
    \ Protocol (RTP) timestamp [RFC3550] and Real-time Transport\n   Control Protocol\
    \ (RTCP) feedback reports.  The definition of the\n   desired RTCP feedback message\
    \ is described in detail in\n   [RTCP-FEEDBACK] so as to support the successful\
    \ operation of several\n   congestion control schemes for real-time interactive\
    \ media.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n"
- title: 3.  System Overview
  contents:
  - "3.  System Overview\n   Figure 1 shows the end-to-end system for real-time media\
    \ transport\n   that NADA operates in.  Note that there also exist network nodes\n\
    \   along the reverse (potentially uncongested) path that the RTCP\n   feedback\
    \ reports traverse.  Those network nodes are not shown in the\n   figure for the\
    \ sake of brevity.\n     +---------+  r_vin  +--------+        +--------+    \
    \ +----------+\n     |  Media  |<--------|  RTP   |        |Network |     |  \
    \ RTP    |\n     | Encoder |========>| Sender |=======>|  Node  |====>| Receiver\
    \ |\n     +---------+  r_vout +--------+ r_send +--------+     +----------+\n\
    \                         Figure 1: System Overview\n   Media encoder with rate\
    \ control capabilities:  Encodes raw media\n      (audio and video) frames into\
    \ a compressed bitstream that is later\n      packetized into RTP packets.  As\
    \ discussed in [RFC8593], the\n      actual output rate from the encoder r_vout\
    \ may fluctuate around\n      the target r_vin.  Furthermore, it is possible that\
    \ the encoder\n      can only react to bit rate changes at rather coarse time\n\
    \      intervals, e.g., once every 0.5 seconds.\n   RTP sender:  Responsible for\
    \ calculating the NADA reference rate\n      based on network congestion indicators\
    \ (delay, loss, or ECN\n      marking reports from the receiver), for updating\
    \ the video encoder\n      with a new target rate r_vin and for regulating the\
    \ actual sending\n      rate r_send accordingly.  The RTP sender also generates\
    \ a sending\n      timestamp for each outgoing packet.\n   RTP receiver:  Responsible\
    \ for measuring and estimating end-to-end\n      delay (based on sender timestamp),\
    \ packet loss (based on RTP\n      sequence number), ECN marking ratios (based\
    \ on [RFC6679]), and\n      receiving rate (r_recv) of the flow.  It calculates\
    \ the aggregated\n      congestion signal (x_curr) that accounts for queuing delay,\
    \ ECN\n      markings, and packet losses.  The receiver also determines the\n\
    \      mode for sender rate adaptation (rmode) based on whether the flow\n   \
    \   has encountered any standing non-zero congestion.  The receiver\n      sends\
    \ periodic RTCP reports back to the sender, containing values\n      of x_curr,\
    \ rmode, and r_recv.\n   Network node with several modes of operation:  The system\
    \ can work\n      with the default behavior of a simple drop-tail queue.  It can\n\
    \      also benefit from advanced Active Queue Management (AQM) features\n   \
    \   such as Proportional Integral Controller Enhanced (PIE) [RFC8033],\n     \
    \ Flow Queue Controlling Queue Delay (FQ-CoDel) [RFC8290], ECN\n      marking\
    \ based on Random Early Detection (RED) [RFC7567], and Pre-\n      Congestion\
    \ Notification (PCN) marking using a token bucket\n      algorithm [RFC6660].\
    \  Note that network node operation is out of\n      scope for the design of NADA.\n"
- title: 4.  Core Congestion Control Algorithm
  contents:
  - "4.  Core Congestion Control Algorithm\n   Like TCP-Friendly Rate Control (TFRC)\
    \ [FLOYD-CCR00] [RFC5348], NADA\n   is a rate-based congestion control algorithm.\
    \  In its simplest form,\n   the sender reacts to the collection of network congestion\
    \ indicators\n   in the form of an aggregated congestion signal and operates in\
    \ one of\n   two modes:\n   Accelerated ramp up:  When the bottleneck is deemed\
    \ to be\n      underutilized, the rate increases multiplicatively with respect\
    \ to\n      the rate of previously successful transmissions.  The rate\n     \
    \ increase multiplier (gamma) is calculated based on the observed\n      round-trip\
    \ time and target feedback interval, so as to limit self-\n      inflicted queuing\
    \ delay.\n   Gradual rate update:  In the presence of a non-zero aggregate\n \
    \     congestion signal, the sending rate is adjusted in reaction to\n      both\
    \ its value (x_curr) and its change in value (x_diff).\n   This section introduces\
    \ the list of mathematical notations and\n   describes the core congestion control\
    \ algorithm at the sender and\n   receiver, respectively.  Additional details\
    \ on recommended practical\n   implementations are described in Sections 5.1 and\
    \ 5.2.\n"
- title: 4.1.  Mathematical Notations
  contents:
  - "4.1.  Mathematical Notations\n   This section summarizes the list of variables\
    \ and parameters used in\n   the NADA algorithm.  Table 2 also includes the default\
    \ values for\n   choosing the algorithm parameters to represent either a typical\n\
    \   setting in practical applications or a setting based on theoretical\n   and\
    \ simulation studies.  See Section 6.3 for some of the discussions\n   on the\
    \ impact of parameter values.  Additional studies in real-world\n   settings suggested\
    \ in Section 8 could gather further insight on how\n   to choose and adapt these\
    \ parameter values in practical deployment.\n   | Notation   | Variable Name \
    \                                 |\n   | t_curr     | Current timestamp     \
    \                         |\n   | t_last     | Last time sending/receiving a feedback\
    \ message |\n   | delta      | Observed interval between current and previous\
    \ |\n   |            | feedback reports: delta = t_curr-t_last        |\n   |\
    \ r_ref      | Reference rate based on network congestion     |\n   | r_send \
    \    | Sending rate                                   |\n   | r_recv     | Receiving\
    \ rate                                 |\n   | r_vin      | Target rate for video\
    \ encoder                  |\n   | r_vout     | Output rate from video encoder\
    \                 |\n   | d_base     | Estimated baseline delay              \
    \         |\n   | d_fwd      | Measured and filtered one-way delay           \
    \ |\n   | d_queue    | Estimated queuing delay                        |\n   |\
    \ d_tilde    | Equivalent delay after non-linear warping      |\n   | p_mark \
    \    | Estimated packet ECN marking ratio             |\n   | p_loss     | Estimated\
    \ packet loss ratio                    |\n   | x_curr     | Aggregate congestion\
    \ signal                    |\n   | x_prev     | Previous value of aggregate congestion\
    \ signal  |\n   | x_diff     | Change in aggregate congestion signal w.r.t.  \
    \ |\n   |            | its previous value: x_diff = x_curr - x_prev   |\n   |\
    \ rmode      | Rate update mode: (0 = accelerated ramp up; 1  |\n   |        \
    \    | = gradual update)                              |\n   | gamma      | Rate\
    \ increase multiplier in accelerated ramp-  |\n   |            | up mode     \
    \                                   |\n   | loss_int   | Measured average loss\
    \ interval in packet count |\n   | loss_exp   | Threshold value for setting the\
    \ last observed  |\n   |            | packet loss to expiration              \
    \        |\n   | rtt        | Estimated round-trip time at sender            |\n\
    \   | buffer_len | Rate-shaping buffer occupancy measured in      |\n   |    \
    \        | bytes                                          |\n                \
    \      Table 1: List of Variables\n   | Notation  | Parameter Name           \
    \                 | Default |\n   | PRIO      | Weight of priority of the flow\
    \            | 1.0     |\n   | RMIN      | Minimum rate of application supported\
    \ by  | 150     |\n   |           | media encoder                            \
    \ | Kbps    |\n   | RMAX      | Maximum rate of application supported by  | 1.5\
    \     |\n   |           | media encoder                             | Mbps   \
    \ |\n   | XREF      | Reference congestion level                | 10 ms   |\n\
    \   | KAPPA     | Scaling parameter for gradual rate update | 0.5     |\n   |\
    \           | calculation                               |         |\n   | ETA\
    \       | Scaling parameter for gradual rate update | 2.0     |\n   |        \
    \   | calculation                               |         |\n   | TAU       |\
    \ Upper bound of RTT in gradual rate update | 500 ms  |\n   |           | calculation\
    \                               |         |\n   | DELTA     | Target feedback\
    \ interval                  | 100 ms  |\n   | LOGWIN    | Observation window in\
    \ time for            | 500 ms  |\n   |           | calculating packet summary\
    \ statistics at  |         |\n   |           | receiver                      \
    \            |         |\n   | QEPS      | Threshold for determining queuing delay\
    \   | 10 ms   |\n   |           | buildup at receiver                       |\
    \         |\n   | DFILT     | Bound on filtering delay                  | 120\
    \ ms  |\n   | GAMMA_MAX | Upper bound on rate increase ratio for    | 0.5    \
    \ |\n   |           | accelerated ramp up                       |         |\n\
    \   | QBOUND    | Upper bound on self-inflicted queuing     | 50 ms   |\n   |\
    \           | delay during ramp up                      |         |\n   | MULTILOSS\
    \ | Multiplier for self-scaling the           | 7.0     |\n   |           | expiration\
    \ threshold of the last observed |         |\n   |           | loss (loss_exp)\
    \ based on measured average |         |\n   |           | loss interval (loss_int)\
    \                  |         |\n   | QTH       | Delay threshold for invoking\
    \ non-linear   | 50 ms   |\n   |           | warping                         \
    \          |         |\n   | LAMBDA    | Scaling parameter in the exponent of\
    \ non- | 0.5     |\n   |           | linear warping                          \
    \  |         |\n   | PLRREF    | Reference packet loss ratio               | 0.01\
    \    |\n   | PMRREF    | Reference packet marking ratio            | 0.01    |\n\
    \   | DLOSS     | Reference delay penalty for loss when     | 10 ms   |\n   |\
    \           | packet loss ratio is at PLRREF            |         |\n   | DMARK\
    \     | Reference delay penalty for ECN marking   | 2 ms    |\n   |          \
    \ | when packet marking is at PMRREF          |         |\n   | FPS       | Frame\
    \ rate of incoming video              | 30      |\n   | BETA_S    | Scaling parameter\
    \ for modulating outgoing | 0.1     |\n   |           | sending rate         \
    \                     |         |\n   | BETA_V    | Scaling parameter for modulating\
    \ video    | 0.1     |\n   |           | encoder target rate                 \
    \      |         |\n   | ALPHA     | Smoothing factor in exponential smoothing\
    \ | 0.1     |\n   |           | of packet loss and marking ratios         |  \
    \       |\n      Table 2: List of Algorithm Parameters and Their Default Values\n"
- title: 4.2.  Receiver-Side Algorithm
  contents:
  - "4.2.  Receiver-Side Algorithm\n   The receiver-side algorithm can be outlined\
    \ as below:\n      On initialization:\n         set d_base = +INFINITY\n     \
    \    set p_loss = 0\n         set p_mark = 0\n         set r_recv = 0\n      \
    \   set both t_last and t_curr as current time in milliseconds\n      On receiving\
    \ a media packet:\n         obtain current timestamp t_curr from system clock\n\
    \         obtain from packet header sending time stamp t_sent\n         obtain\
    \ one-way delay measurement: d_fwd = t_curr - t_sent\n         update baseline\
    \ delay: d_base = min(d_base, d_fwd)\n         update queuing delay: d_queue =\
    \ d_fwd - d_base\n         update packet loss ratio estimate p_loss\n        \
    \ update packet marking ratio estimate p_mark\n         update measurement of\
    \ receiving rate r_recv\n      On time to send a new feedback report (t_curr -\
    \ t_last > DELTA):\n         calculate non-linear warping of delay d_tilde if\
    \ packet loss\n         exists\n         calculate current aggregate congestion\
    \ signal x_curr\n         determine mode of rate adaptation for sender: rmode\n\
    \         send feedback containing values of: rmode, x_curr, and r_recv\n    \
    \     update t_last = t_curr\n   In order for a delay-based flow to hold its ground\
    \ when competing\n   against loss-based flows (e.g., loss-based TCP), it is important\
    \ to\n   distinguish between different levels of observed queuing delay.  For\n\
    \   instance, over wired connections, a moderate queuing delay value on\n   the\
    \ order of tens of milliseconds is likely self-inflicted or induced\n   by other\
    \ delay-based flows, whereas a high queuing delay value of\n   several hundreds\
    \ of milliseconds may indicate the presence of a loss-\n   based flow that does\
    \ not refrain from increased delay.\n   If the last observed packet loss is within\
    \ the expiration window of\n   loss_exp (measured in terms of packet counts),\
    \ the estimated queuing\n   delay follows a non-linear warping:\n            \
    \  / d_queue,                   if d_queue < QTH\n              |\n   d_tilde\
    \ = <                                           (1)\n              \\ QTH exp(-LAMBDA\
    \ ---------------) , otherwise\n   In Equation (1), the queuing delay value is\
    \ unchanged when it is\n   below the first threshold QTH; otherwise, it is scaled\
    \ down following\n   a non-linear curve.  This non-linear warping is inspired\
    \ by the\n   delay-adaptive congestion window backoff policy in [BUDZISZ-AIMD-CC]\n\
    \   so as to \"gradually nudge\" the controller to operate based on loss-\n  \
    \ induced congestion signals when competing against loss-based flows.\n   The\
    \ exact form of the non-linear function has been simplified with\n   respect to\
    \ [BUDZISZ-AIMD-CC].  The value of the threshold QTH should\n   be carefully tuned\
    \ for different operational environments so as to\n   avoid potential risks of\
    \ prematurely discounting the congestion\n   signal level.  Typically, a higher\
    \ value of QTH is required in a\n   noisier environment (e.g., over wireless connections\
    \ or where the\n   video stream encounters many time-varying background competing\n\
    \   traffic) so as to stay robust against occasional non-congestion-\n   induced\
    \ delay spikes.  Additional insights on how this value can be\n   tuned or auto-tuned\
    \ should be gathered from carrying out experimental\n   studies in different real-world\
    \ deployment scenarios.\n   The value of loss_exp is configured to self-scale\
    \ with the average\n   packet loss interval loss_int with a multiplier MULTILOSS:\n\
    \    loss_exp = MULTILOSS *\n   loss_int.\n   Estimation of the average loss interval\
    \ loss_int, in turn, follows\n   Section 5.4 of \"TCP Friendly Rate Control (TFRC):\
    \ Protocol\n   Specification\" [RFC5348].\n   In practice, it is recommended to\
    \ linearly interpolate between the\n   warped (d_tilde) and non-warped (d_queue)\
    \ values of the queuing delay\n   during the transitional period lasting for the\
    \ duration of loss_int.\n   The aggregate congestion signal is:\n            \
    \                / p_mark \\^2        / p_loss \\^2\n   x_curr = d_tilde + DMARK*|--------|\
    \  + DLOSS*|--------|   (2)\n                            \\ PMRREF /         \
    \ \\ PLRREF /\n   Here, DMARK is prescribed a reference delay penalty associated\
    \ with\n   ECN markings at the reference marking ratio of PMRREF; DLOSS is\n \
    \  prescribed a reference delay penalty associated with packet losses at\n   the\
    \ reference packet loss ratio of PLRREF.  The value of DLOSS and\n   DMARK does\
    \ not depend on configurations at the network node.  Since\n   ECN-enabled active\
    \ queue management schemes typically mark a packet\n   before dropping it, the\
    \ value of DLOSS SHOULD be higher than that of\n   DMARK.  Furthermore, the values\
    \ of DLOSS and DMARK need to be set\n   consistently across all NADA flows sharing\
    \ the same bottleneck link\n   so that they can compete fairly.\n   In the absence\
    \ of packet marking and losses, the value of x_curr\n   reduces to the observed\
    \ queuing delay d_queue.  In that case, the\n   NADA algorithm operates in the\
    \ regime of delay-based adaptation.\n   Given observed per-packet delay and loss\
    \ information, the receiver is\n   also in a good position to determine whether\
    \ or not the network is\n   underutilized and then recommend the corresponding\
    \ rate adaptation\n   mode for the sender.  The criteria for operating in accelerated\
    \ ramp-\n   up mode are:\n   *  No recent packet losses within the observation\
    \ window LOGWIN; and\n   *  No buildup of queuing delay: d_fwd-d_base < QEPS for\
    \ all previous\n      delay samples within the observation window LOGWIN.\n  \
    \ Otherwise, the algorithm operates in graduate update mode.\n"
- title: 4.3.  Sender-Side Algorithm
  contents:
  - "4.3.  Sender-Side Algorithm\n   The sender-side algorithm is outlined as follows:\n\
    \      On initialization:\n         set r_ref = RMIN\n         set rtt = 0\n \
    \        set x_prev = 0\n         set t_last and t_curr as current system clock\
    \ time\n      On receiving feedback report:\n         obtain current timestamp\
    \ from system clock: t_curr\n         obtain values of rmode, x_curr, and r_recv\
    \ from feedback report\n         update estimation of rtt\n         measure feedback\
    \ interval: delta = t_curr - t_last\n         if rmode == 0:\n            update\
    \ r_ref following accelerated ramp-up rules\n         else:\n            update\
    \ r_ref following gradual update rules\n         clip rate r_ref within the range\
    \ of minimum rate (RMIN) and\n         maximum rate (RMAX).\n         set x_prev\
    \ = x_curr\n         set t_last = t_curr\n   In accelerated ramp-up mode, the\
    \ rate r_ref is updated as follows:\n       gamma = min(GAMMA_MAX, ------------------)\
    \       (3)\n                               rtt+DELTA+DFILT\n                \
    \               r_ref = max(r_ref, (1+gamma) r_recv)\n   The rate increase multiplier\
    \ gamma is calculated as a function of the\n   upper bound of self-inflicted queuing\
    \ delay (QBOUND), round-trip time\n   (rtt), and target feedback interval (DELTA);\
    \ it is bound on the\n   filtering delay for calculating d_queue (DFILT).  It\
    \ has a maximum\n   value of GAMMA_MAX.  The rationale behind Equations (3)-(4)\
    \ is that\n   the longer it takes for the sender to observe self-inflicted queuing\n\
    \   delay buildup, the more conservative the sender should be in\n   increasing\
    \ its rate and, hence, the smaller the rate increase\n   multiplier.\n   In gradual\
    \ update mode, the rate r_ref is updated as:\n       x_offset = x_curr - PRIO*XREF*RMAX/r_ref\
    \          (5)\n       x_diff   = x_curr - x_prev                        (6)\n\
    \                              delta    x_offset\n       r_ref = r_ref - KAPPA*-------*------------*r_ref\n\
    \                               TAU       TAU\n                     - KAPPA*ETA*---------*r_ref\
    \         (7)\n   The rate changes in proportion to the previous rate decision.\
    \  It is\n   affected by two terms: the offset of the aggregate congestion signal\n\
    \   from its value at equilibrium (x_offset) and its change (x_diff).\n   The\
    \ calculation of x_offset depends on the maximum rate of the flow\n   (RMAX),\
    \ its weight of priority (PRIO), as well as a reference\n   congestion signal\
    \ (XREF).  The value of XREF is chosen so that the\n   maximum rate of RMAX can\
    \ be achieved when the observed congestion\n   signal level is below PRIO*XREF.\n\
    \   At equilibrium, the aggregated congestion signal stabilizes at x_curr\n  \
    \ = PRIO*XREF*RMAX/r_ref.  This ensures that when multiple flows share\n   the\
    \ same bottleneck and observe a common value of x_curr, their rates\n   at equilibrium\
    \ will be proportional to their respective priority\n   levels (PRIO) and the\
    \ range between minimum and maximum rate.  Values\n   of the minimum rate (RMIN)\
    \ and maximum rate (RMAX) will be provided\n   by the media codec, for instance,\
    \ as outlined by [RMCAT-CC-RTP].  In\n   the absence of such information, the\
    \ NADA sender will choose a\n   default value of 0 for RMIN and 3 Mbps for RMAX.\n\
    \   As mentioned in the sender-side algorithm, the final rate is always\n   clipped\
    \ within the dynamic range specified by the application:\n       r_ref = min(r_ref,\
    \ RMAX)                         (8)\n       r_ref = max(r_ref, RMIN)         \
    \                (9)\n   The above operations ignore many practical issues such\
    \ as clock\n   synchronization between sender and receiver, the filtering of noise\n\
    \   in delay measurements, and base delay expiration.  These will be\n   addressed\
    \ in Section 5.\n"
- title: 5.  Practical Implementation of NADA
  contents:
  - '5.  Practical Implementation of NADA

    '
- title: 5.1.  Receiver-Side Operation
  contents:
  - "5.1.  Receiver-Side Operation\n   The receiver continuously monitors end-to-end\
    \ per-packet statistics\n   in terms of delay, loss, and/or ECN marking ratios.\
    \  It then\n   aggregates all forms of congestion indicators into the form of\
    \ an\n   equivalent delay and periodically reports this back to the sender.\n\
    \   In addition, the receiver tracks the receiving rate of the flow and\n   includes\
    \ that in the feedback message.\n"
- title: 5.1.1.  Estimation of One-Way Delay and Queuing Delay
  contents:
  - "5.1.1.  Estimation of One-Way Delay and Queuing Delay\n   The delay estimation\
    \ process in NADA follows an approach similar to\n   that of earlier delay-based\
    \ congestion control schemes, such as Low\n   Extra Delay Background Transport\
    \ (LEDBAT) [RFC6817].  For\n   experimental implementations, instead of relying\
    \ on RTP timestamps\n   and the transmission time offset RTP header extension\
    \ [RFC5450], the\n   NADA sender can generate its own timestamp based on the local\
    \ system\n   clock and embed that information in the transport packet header.\
    \  The\n   NADA receiver estimates the forward delay as having a constant base\n\
    \   delay component plus a time-varying queuing delay component.  The\n   base\
    \ delay is estimated as the minimum value of one-way delay\n   observed over a\
    \ relatively long period (e.g., tens of minutes),\n   whereas the individual queuing\
    \ delay value is taken to be the\n   difference between one-way delay and base\
    \ delay.  By re-estimating\n   the base delay periodically, one can avoid the\
    \ potential issue of\n   base delay expiration, whereby an earlier measured base\
    \ delay value\n   is no longer valid due to underlying route changes or a cumulative\n\
    \   timing difference introduced by the clock-rate skew between sender\n   and\
    \ receiver.  All delay estimations are based on sender timestamps\n   with a recommended\
    \ granularity of 100 microseconds or finer.\n   The individual sample values of\
    \ queuing delay should be further\n   filtered against various non-congestion-induced\
    \ noise, such as spikes\n   due to a processing \"hiccup\" at the network nodes.\
    \  Therefore, in\n   addition to calculating the value of queuing delay using\
    \ d_queue =\n   d_fwd - d_base, as expressed in Section 5.1, the current\n   implementation\
    \ further employs a minimum filter with a window size of\n   15 samples over per-packet\
    \ queuing delay values.\n"
- title: 5.1.2.  Estimation of Packet Loss/Marking Ratio
  contents:
  - "5.1.2.  Estimation of Packet Loss/Marking Ratio\n   The receiver detects packet\
    \ losses via gaps in the RTP sequence\n   numbers of received packets.  For interactive\
    \ real-time media\n   applications with stringent latency constraints (e.g., video\n\
    \   conferencing), the receiver avoids the packet reordering delay by\n   treating\
    \ out-of-order packets as losses.  The instantaneous packet\n   loss ratio p_inst\
    \ is estimated as the ratio between the number of\n   missing packets over the\
    \ number of total transmitted packets within\n   the recent observation window\
    \ LOGWIN.  The packet loss ratio p_loss\n   is obtained after exponential smoothing:\n\
    \               p_loss = ALPHA*p_inst + (1-ALPHA)*p_loss        (10)\n   The filtered\
    \ result is reported back to the sender as the observed\n   packet loss ratio\
    \ p_loss.\n   The estimation of the packet marking ratio p_mark follows the same\n\
    \   procedure as above.  It is assumed that ECN marking information at\n   the\
    \ IP header can be passed to the receiving endpoint, e.g., by\n   following the\
    \ mechanism described in [RFC6679].\n"
- title: 5.1.3.  Estimation of Receiving Rate
  contents:
  - "5.1.3.  Estimation of Receiving Rate\n   It is fairly straightforward to estimate\
    \ the receiving rate r_recv.\n   NADA maintains a recent observation window with\
    \ a time span of LOGWIN\n   and simply divides the total size of packets arriving\
    \ during that\n   window over the time span.  The receiving rate (r_recv) can\
    \ be either\n   calculated at the sender side based on the per-packet feedback\
    \ from\n   the receiver or included as part of the feedback report.\n"
- title: 5.2.  Sender-Side Operation
  contents:
  - "5.2.  Sender-Side Operation\n   Figure 2 provides a detailed view of the NADA\
    \ sender.  Upon receipt\n   of an RTCP feedback report from the receiver, the\
    \ NADA sender\n   calculates the reference rate r_ref as specified in Section\
    \ 4.3.  It\n   further adjusts both the target rate for the live video encoder\
    \ r_vin\n   and the sending rate r_send over the network based on the updated\n\
    \   value of r_ref and rate-shaping buffer occupancy buffer_len.\n   The NADA\
    \ sender behavior stays the same in the presence of all types\n   of congestion\
    \ indicators: delay, loss, and ECN marking.  This unified\n   approach allows\
    \ a graceful transition of the scheme as the network\n   shifts dynamically between\
    \ light and heavy congestion levels.\n                      |  Calculate     |\
    \ <---- RTCP report\n                      | Reference Rate |\n         | Calculate\
    \ Video |           |   Calculate   |\n         |  Target Rate    |          \
    \ | Sending Rate  |\n       r_vin |         |                   |       |\n  \
    \       |  Video   | r_vout  -----------+        \\|/\n         |  Encoder |-------->\
    \   |||||||||=================>\n         Rate-Shaping Buffer\n              \
    \        Figure 2: NADA Sender Structure\n"
- title: 5.2.1.  Rate-Shaping Buffer
  contents:
  - "5.2.1.  Rate-Shaping Buffer\n   The operation of the live video encoder is out\
    \ of the scope of the\n   design for the congestion control scheme in NADA.  Instead,\
    \ its\n   behavior is treated as a black box.\n   A rate-shaping buffer is employed\
    \ to absorb any instantaneous\n   mismatch between the encoder rate output r_vout\
    \ and the regulated\n   sending rate r_send.  Its current level of occupancy is\
    \ measured in\n   bytes and is denoted as buffer_len.\n   A large rate-shaping\
    \ buffer contributes to higher end-to-end delay,\n   which may harm the performance\
    \ of real-time media communications.\n   Therefore, the sender has a strong incentive\
    \ to prevent the rate-\n   shaping buffer from building up.  The mechanisms adopted\
    \ are:\n   *  To deplete the rate-shaping buffer faster by increasing the\n  \
    \    sending rate r_send; and\n   *  To limit incoming packets of the rate-shaping\
    \ buffer by reducing\n      the video encoder target rate r_vin.\n"
- title: 5.2.2.  Adjusting Video Target Rate and Sending Rate
  contents:
  - "5.2.2.  Adjusting Video Target Rate and Sending Rate\n   If the level of occupancy\
    \ in the rate-shaping buffer is accessible at\n   the sender, such information\
    \ can be leveraged to further adjust the\n   target rate of the live video encoder\
    \ r_vin as well as the actual\n   sending rate r_send.  The purpose of such adjustments\
    \ is to mitigate\n   the additional latencies introduced by the rate-shaping buffer.\
    \  The\n   amount of rate adjustment can be calculated as follows:\n       r_diff_v\
    \ = min(0.05*r_ref, BETA_V*8*buffer_len*FPS)     (11)\n       r_diff_s = min(0.05*r_ref,\
    \ BETA_S*8*buffer_len*FPS)     (12)\n       r_vin  = max(RMIN, r_ref - r_diff_v)\
    \                    (13)\n       r_send = min(RMAX, r_ref + r_diff_s)       \
    \             (14)\n   In Equations (11) and (12), the amount of adjustment is\
    \ calculated as\n   proportional to the size of the rate-shaping buffer but is\
    \ bounded by\n   5% of the reference rate r_ref calculated from network congestion\n\
    \   feedback alone.  This ensures that the adjustment introduced by the\n   rate-shaping\
    \ buffer will not counteract with the core congestion\n   control process.  Equations\
    \ (13) and (14) indicate the influence of\n   the rate-shaping buffer.  A large\
    \ rate-shaping buffer nudges the\n   encoder target rate slightly below (and the\
    \ sending rate slightly\n   above) the reference rate r_ref.  The final video\
    \ target rate (r_vin)\n   and sending rate (r_send) are further bounded within\
    \ the original\n   range of [RMIN, RMAX].\n   Intuitively, the amount of extra\
    \ rate offset needed to completely\n   drain the rate-shaping buffer within the\
    \ duration of a single video\n   frame is given by 8*buffer_len*FPS, where FPS\
    \ stands for the\n   reference frame rate of the video.  The scaling parameters\
    \ BETA_V and\n   BETA_S can be tuned to balance between the competing goals of\n\
    \   maintaining a small rate-shaping buffer and deviating from the\n   reference\
    \ rate point.  Empirical observations show that the rate-\n   shaping buffer for\
    \ a responsive live video encoder typically stays\n   empty and only occasionally\
    \ holds a large frame (e.g., when an intra-\n   frame is produced) in transit.\
    \  Therefore, the rate adjustment\n   introduced by this mechanism is expected\
    \ to be minor.  For instance,\n   a rate-shaping buffer of 2000 bytes will lead\
    \ to a rate adjustment of\n   48 Kbps given the recommended scaling parameters\
    \ of BETA_V = 0.1 and\n   BETA_S = 0.1, and the reference frame rate of FPS =\
    \ 30.\n"
- title: 5.3.  Feedback Message Requirements
  contents:
  - "5.3.  Feedback Message Requirements\n   The following list of information is\
    \ required for NADA congestion\n   control to function properly:\n   Recommended\
    \ rate adaptation mode (rmode):  A 1-bit flag indicating\n      whether the sender\
    \ should operate in accelerated ramp-up mode\n      (rmode=0) or gradual update\
    \ mode (rmode=1).\n   Aggregated congestion signal (x_curr):  The most recently\
    \ updated\n      value, calculated by the receiver according to Section 4.2. \
    \ This\n      information can be expressed with a unit of 100 microseconds\n \
    \     (i.e., 1/10 of a millisecond) in 15 bits.  This allows a maximum\n     \
    \ value of x_curr at approximately 3.27 seconds.\n   Receiving rate (r_recv):\
    \  The most recently measured receiving rate\n      according to Section 5.1.3.\
    \  This information is expressed with a\n      unit of bits per second (bps) in\
    \ 32 bits (unsigned int).  This\n      allows a maximum rate of approximately\
    \ 4.3 Gbps, approximately\n      1000 times the streaming rate of a typical high-definition\
    \ (HD)\n      video conferencing session today.  This field can be expanded\n\
    \      further by a few more bytes if an even higher rate needs to be\n      specified.\n\
    \   The above list of information can be accommodated by 48 bits, or 6\n   bytes,\
    \ in total.  They can be either included in the feedback report\n   from the receiver\
    \ or, in the case where all receiver-side\n   calculations are moved to the sender,\
    \ derived from per-packet\n   information from the feedback message as defined\
    \ in [RTCP-FEEDBACK].\n   Choosing the feedback message interval DELTA is discussed\
    \ in\n   Section 6.3.  A target feedback interval of DELTA = 100 ms is\n   recommended.\n"
- title: 6.  Discussions and Further Investigations
  contents:
  - "6.  Discussions and Further Investigations\n   This section discusses the various\
    \ design choices made by NADA,\n   potential alternative variants of its implementation,\
    \ and guidelines\n   on how the key algorithm parameters can be chosen.  Section\
    \ 8\n   recommends additional experimental setups to further explore these\n \
    \  topics.\n"
- title: 6.1.  Choice of Delay Metrics
  contents:
  - "6.1.  Choice of Delay Metrics\n   The current design works with relative one-way\
    \ delay (OWD) as the\n   main indication of congestion.  The value of the relative\
    \ OWD is\n   obtained by maintaining the minimum value of observed OWD over a\n\
    \   relatively long time horizon and subtracting that out from the\n   observed\
    \ absolute OWD value.  Such an approach cancels out the fixed\n   difference between\
    \ the sender and receiver clocks.  It has been\n   widely adopted by other delay-based\
    \ congestion control approaches\n   such as [RFC6817].  As discussed in [RFC6817],\
    \ the time horizon for\n   tracking the minimum OWD needs to be chosen with care;\
    \ it must be\n   long enough for an opportunity to observe the minimum OWD with\
    \ zero\n   standing queue along the path, and it must be sufficiently short\n\
    \   enough to timely reflect \"true\" changes in minimum OWD introduced by\n \
    \  route changes and other rare events and to mitigate the cumulative\n   impact\
    \ of clock rate skew over time.\n   The potential drawback in relying on relative\
    \ OWD as the congestion\n   signal is that when multiple flows share the same\
    \ bottleneck, the\n   flow arriving late at the network experiencing a non-empty\
    \ queue may\n   mistakenly consider the standing queuing delay as part of the\
    \ fixed\n   path propagation delay.  This will lead to slightly unfair bandwidth\n\
    \   sharing among the flows.\n   Alternatively, one could move the per-packet\
    \ statistical handling to\n   the sender instead and use relative round-trip time\
    \ (RTT) in lieu of\n   relative OWD, assuming that per-packet acknowledgments\
    \ are available.\n   The main drawback of an RTT-based approach is the noise in\
    \ the\n   measured delay in the reverse direction.\n   Note that the choice of\
    \ either delay metric (relative OWD vs. RTT)\n   involves no change in the proposed\
    \ rate adaptation algorithm.\n   Therefore, comparing the pros and cons regarding\
    \ which delay metric\n   to adopt can be kept as an orthogonal direction of investigation.\n"
- title: 6.2.  Method for Delay, Loss, and Marking Ratio Estimation
  contents:
  - "6.2.  Method for Delay, Loss, and Marking Ratio Estimation\n   Like other delay-based\
    \ congestion control schemes, performance of\n   NADA depends on the accuracy\
    \ of its delay measurement and estimation\n   module.  Appendix A of [RFC6817]\
    \ provides an extensive discussion on\n   this aspect.\n   The current recommended\
    \ practice of applying minimum filter with a\n   window size of 15 samples suffices\
    \ in guarding against processing\n   delay outliers observed in wired connections.\
    \  For wireless\n   connections with a higher packet delay variation (PDV), more\n\
    \   sophisticated techniques on denoising, outlier rejection, and trend\n   analysis\
    \ may be needed.\n   More sophisticated methods in packet loss ratio calculation,\
    \ such as\n   that adopted by [FLOYD-CCR00], will likely be beneficial.  These\n\
    \   alternatives are part of the experiments this document proposes.\n"
- title: 6.3.  Impact of Parameter Values
  contents:
  - "6.3.  Impact of Parameter Values\n   In the gradual rate update mode, the parameter\
    \ TAU indicates the\n   upper bound of round-trip time (RTT) in the feedback control\
    \ loop.\n   Typically, the observed feedback interval delta is close to the\n\
    \   target feedback interval DELTA, and the relative ratio of delta/TAU\n   versus\
    \ ETA dictates the relative strength of influence from the\n   aggregate congestion\
    \ signal offset term (x_offset) versus its recent\n   change (x_diff), respectively.\
    \  These two terms are analogous to the\n   integral and proportional terms in\
    \ a proportional-integral (PI)\n   controller.  The recommended choice of TAU\
    \ = 500 ms, DELTA = 100 ms,\n   and ETA = 2.0 corresponds to a relative ratio\
    \ of 1:10 between the\n   gains of the integral and proportional terms.  Consequently,\
    \ the rate\n   adaptation is mostly driven by the change in the congestion signal\n\
    \   with a long-term shift towards its equilibrium value driven by the\n   offset\
    \ term.  Finally, the scaling parameter KAPPA determines the\n   overall speed\
    \ of the adaptation and needs to strike a balance between\n   responsiveness and\
    \ stability.\n   The choice of the target feedback interval DELTA needs to strike\
    \ the\n   right balance between timely feedback and low RTCP feedback message\n\
    \   counts.  A target feedback interval of DELTA = 100 ms is recommended,\n  \
    \ corresponding to a feedback bandwidth of 16 Kbps with 200 bytes per\n   feedback\
    \ message -- approximately 1.6% overhead for a 1 Mbps flow.\n   Furthermore, both\
    \ simulation studies and frequency-domain analysis in\n   [IETF-95] have established\
    \ that a feedback interval below 250 ms\n   (i.e., more frequently than 4 feedback\
    \ messages per second) will not\n   break up the feedback control loop of NADA\
    \ congestion control.\n   In calculating the non-linear warping of delay in Equation\
    \ (1), the\n   current design uses fixed values of QTH for determining whether\
    \ to\n   perform the non-linear warping.  Its value should be carefully tuned\n\
    \   for different operational environments (e.g., over wired vs. wireless\n  \
    \ connections) so as to avoid the potential risk of prematurely\n   discounting\
    \ the congestion signal level.  It is possible to adapt its\n   value based on\
    \ past observed patterns of queuing delay in the\n   presence of packet losses.\
    \  It needs to be noted that the non-linear\n   warping mechanism may lead to\
    \ multiple NADA streams stuck in loss-\n   based mode when competing against each\
    \ other.\n   In calculating the aggregate congestion signal x_curr, the choice\
    \ of\n   DMARK and DLOSS influence the steady-state packet loss/marking ratio\n\
    \   experienced by the flow at a given available bandwidth.  Higher\n   values\
    \ of DMARK and DLOSS result in lower steady-state loss/marking\n   ratios but\
    \ are more susceptible to the impact of individual packet\n   loss/marking events.\
    \  While the value of DMARK and DLOSS are fixed\n   and predetermined in the current\
    \ design, this document also\n   encourages further explorations of a scheme for\
    \ automatically tuning\n   these values based on desired bandwidth sharing behavior\
    \ in the\n   presence of other competing loss-based flows (e.g., loss-based TCP).\n"
- title: 6.4.  Sender-Based vs. Receiver-Based Calculation
  contents:
  - "6.4.  Sender-Based vs. Receiver-Based Calculation\n   In the current design,\
    \ the aggregated congestion signal x_curr is\n   calculated at the receiver, keeping\
    \ the sender operation completely\n   independent of the form of actual network\
    \ congestion indications\n   (delay, loss, or marking) in use.\n   Alternatively,\
    \ one can shift receiver-side calculations to the\n   sender, whereby the receiver\
    \ simply reports on per-packet information\n   via periodic feedback messages\
    \ as defined in [RTCP-FEEDBACK].  Such\n   an approach enables interoperability\
    \ amongst senders operating on\n   different congestion control schemes but requires\
    \ slightly higher\n   overhead in the feedback messages.  See additional discussions\
    \ in\n   [RTCP-FEEDBACK] regarding the desired format of the feedback messages\n\
    \   and the recommended feedback intervals.\n"
- title: 6.5.  Incremental Deployment
  contents:
  - "6.5.  Incremental Deployment\n   One nice property of NADA is the consistent\
    \ video endpoint behavior\n   irrespective of network node variations.  This facilitates\
    \ gradual,\n   incremental adoption of the scheme.\n   Initially, the proposed\
    \ congestion control mechanism can be\n   implemented without any explicit support\
    \ from the network and relies\n   solely on observed relative one-way delay measurements\
    \ and packet\n   loss ratios as implicit congestion signals.\n   When ECN is enabled\
    \ at the network nodes with RED-based marking, the\n   receiver can fold its observations\
    \ of ECN markings into the\n   calculation of the equivalent delay.  The sender\
    \ can react to these\n   explicit congestion signals without any modification.\n\
    \   Ultimately, networks equipped with proactive marking based on the\n   level\
    \ of token bucket metering can reap the additional benefits of\n   zero standing\
    \ queues and lower end-to-end delay and work seamlessly\n   with existing senders\
    \ and receivers.\n"
- title: 7.  Reference Implementations
  contents:
  - "7.  Reference Implementations\n   The NADA scheme has been implemented in both\
    \ ns-2 [NS-2] and ns-3\n   [NS-3] simulation platforms.  The implementation in\
    \ ns-2 hosts the\n   calculations as described in Section 4.2 at the receiver\
    \ side,\n   whereas the implementation in ns-3 hosts these receiver-side\n   calculations\
    \ at the sender for the sake of interoperability.\n   Extensive ns-2 simulation\
    \ evaluations of an earlier draft version of\n   this document are recorded in\
    \ [ZHU-PV13].  An open-source\n   implementation of NADA as part of an ns-3 module\
    \ is available at\n   [NS3-RMCAT].  Evaluation results of this document based\
    \ on ns-3 are\n   presented in [IETF-90] and [IETF-91] for wired test cases as\n\
    \   documented in [RMCAT-EVAL-TEST].  Evaluation results of NADA over Wi-\n  \
    \ Fi-based test cases as defined in [WIRELESS-TESTS] are presented in\n   [IETF-93].\
    \  These simulation-based evaluations have shown that NADA\n   flows can obtain\
    \ their fair share of bandwidth when competing against\n   each other.  They typically\
    \ adapt fast in reaction to the arrival and\n   departure of other flows and can\
    \ sustain a reasonable throughput when\n   competing against loss-based TCP flows.\n\
    \   [IETF-90] describes the implementation and evaluation of NADA in a\n   lab\
    \ setting.  Preliminary evaluation results of NADA in single-flow\n   and multi-flow\
    \ test scenarios are presented in [IETF-91].\n   A reference implementation of\
    \ NADA has been carried out by modifying\n   the WebRTC module embedded in the\
    \ Mozilla open-source browser.\n   Presentations from [IETF-103] and [IETF-105]\
    \ document real-world\n   evaluations of the modified browser driven by NADA.\
    \  The experimental\n   setting involves remote connections with endpoints over\
    \ either home\n   or enterprise wireless networks.  These evaluations validate\
    \ the\n   effectiveness of NADA flows in recovering quickly from throughput\n\
    \   drops caused by intermittent delay spikes over the last-hop wireless\n   connections.\n"
- title: 8.  Suggested Experiments
  contents:
  - "8.  Suggested Experiments\n   NADA has been extensively evaluated under various\
    \ test scenarios,\n   including the collection of test cases specified by [RMCAT-EVAL-TEST]\n\
    \   and the subset of Wi-Fi-based test cases in [WIRELESS-TESTS].\n   Additional\
    \ evaluations have been carried out to characterize how NADA\n   interacts with\
    \ various AQM schemes such as RED, Controlling Queue\n   Delay (CoDel), and Proportional\
    \ Integral Controller Enhanced (PIE).\n   Most of these evaluations have been\
    \ carried out in simulators.  A few\n   key test cases have been evaluated in\
    \ lab environments with\n   implementations embedded in video conferencing clients.\
    \  It is\n   strongly recommended to carry out implementation and experimentation\n\
    \   of NADA in real-world settings.  Such exercises will provide insights\n  \
    \ on how to choose or automatically adapt the values of the key\n   algorithm\
    \ parameters (see list in Table 2) as discussed in Section 6.\n   Additional experiments\
    \ are suggested for the following scenarios,\n   preferably over real-world networks:\n\
    \   *  Experiments reflecting the setup of a typical WAN connection.\n   *  Experiments\
    \ with ECN marking capability turned on at the network\n      for existing test\
    \ cases.\n   *  Experiments with multiple NADA streams bearing different user-\n\
    \      specified priorities.\n   *  Experiments with additional access technologies,\
    \ especially over\n      cellular networks such as 3G/LTE.\n   *  Experiments\
    \ with various media source contents, including audio\n      only, audio and video,\
    \ and application content sharing (e.g.,\n      slideshows).\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The rate adaptation mechanism in NADA relies\
    \ on feedback from the\n   receiver.  As such, it is vulnerable to attacks where\
    \ feedback\n   messages are hijacked, replaced, or intentionally injected with\n\
    \   misleading information resulting in denial of service, similar to\n   those\
    \ that can affect TCP.  Therefore, it is RECOMMENDED that the\n   RTCP feedback\
    \ message is at least integrity checked.  In addition,\n   [RTCP-FEEDBACK] discusses\
    \ the potential risk of a receiver providing\n   misleading congestion feedback\
    \ information and the mechanisms for\n   mitigating such risks.\n   The modification\
    \ of the sending rate based on the sender-side rate-\n   shaping buffer may lead\
    \ to temporary excessive congestion over the\n   network in the presence of an\
    \ unresponsive video encoder.  However,\n   this effect can be mitigated by limiting\
    \ the amount of rate\n   modification introduced by the rate-shaping buffer, bounding\
    \ the size\n   of the rate-shaping buffer at the sender, and maintaining a maximum\n\
    \   allowed sending rate by NADA.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n   \
    \           of Explicit Congestion Notification (ECN) to IP\",\n             \
    \ RFC 3168, DOI 10.17487/RFC3168, September 2001,\n              <https://www.rfc-editor.org/info/rfc3168>.\n\
    \   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n          \
    \    Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <https://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC5348]  Floyd, S., Handley, M., Padhye, J., and J. Widmer, \"TCP\n    \
    \          Friendly Rate Control (TFRC): Protocol Specification\",\n         \
    \     RFC 5348, DOI 10.17487/RFC5348, September 2008,\n              <https://www.rfc-editor.org/info/rfc5348>.\n\
    \   [RFC6679]  Westerlund, M., Johansson, I., Perkins, C., O'Hanlon, P.,\n   \
    \           and K. Carlberg, \"Explicit Congestion Notification (ECN)\n      \
    \        for RTP over UDP\", RFC 6679, DOI 10.17487/RFC6679, August\n        \
    \      2012, <https://www.rfc-editor.org/info/rfc6679>.\n   [RFC8174]  Leiba,\
    \ B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119 Key Words\"\
    , BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [BUDZISZ-AIMD-CC]\n              Budzisz, L.,\
    \ Stanojevic, R., Schlote, A., Baker, F., and\n              R. Shorten, \"On\
    \ the Fair Coexistence of Loss- and Delay-\n              Based TCP\", IEEE/ACM\
    \ Transactions on Networking, vol. 19,\n              no. 6, pp. 1811-1824, DOI\
    \ 10.1109/TNET.2011.2159736,\n              December 2011,\n              <https://doi.org/10.1109/TNET.2011.2159736>.\n\
    \   [FLOYD-CCR00]\n              Floyd, S., Handley, M., Padhye, J., and J. Widmer,\n\
    \              \"Equation-based congestion control for unicast\n             \
    \ applications\", ACM SIGCOMM Computer Communications Review,\n              vol.\
    \ 30, no. 4, pp. 43-56, DOI 10.1145/347057.347397,\n              October 2000,\
    \ <https://doi.org/10.1145/347057.347397>.\n   [IETF-103] Zhu, X., Pan, R., Ramalho,\
    \ M., Mena, S., Jones, P., Fu,\n              J., and S. D'Aronco, \"NADA Implementation\
    \ in Mozilla\n              Browser\", IETF 103, November 2018,\n            \
    \  <https://datatracker.ietf.org/meeting/103/materials/\n              slides-103-rmcat-nada-implementation-in-mozilla-browser-\n\
    \              00>.\n   [IETF-105] Zhu, X., Pan, R., Ramalho, M., Mena, S., Jones,\
    \ P., Fu,\n              J., and S. D'Aronco, \"NADA Implementation in Mozilla\n\
    \              Browser and Draft Update\", IETF 105, July 2019,\n            \
    \  <https://datatracker.ietf.org/meeting/105/materials/\n              slides-105-rmcat-nada-update-02.pdf>.\n\
    \   [IETF-90]  Zhu, X., Ramalho, M., Ganzhorn, C., Jones, P., and R. Pan,\n  \
    \            \"NADA Update: Algorithm, Implementation, and Test Case\n       \
    \       Evaluation Results\", IETF 90, July 2014,\n              <https://tools.ietf.org/agenda/90/slides/slides-90-rmcat-\n\
    \              6.pdf>.\n   [IETF-91]  Zhu, X., Pan, R., Ramalho, M., Mena, S.,\
    \ Ganzhorn, C.,\n              Jones, P., and S. D'Aronco, \"NADA Algorithm Update\
    \ and\n              Test Case Evaluations\", IETF 91, November 2014,\n      \
    \        <https://www.ietf.org/proceedings/interim/2014/11/09/\n             \
    \ rmcat/slides/slides-interim-2014-rmcat-1-2.pdf>.\n   [IETF-93]  Zhu, X., Pan,\
    \ R., Ramalho, M., Mena, S., Ganzhorn, C.,\n              Jones, P., D'Aronco,\
    \ S., and J. Fu, \"Updates on NADA\",\n              IETF 93, July 2015,\n   \
    \           <https://www.ietf.org/proceedings/93/slides/slides-93-\n         \
    \     rmcat-0.pdf>.\n   [IETF-95]  Zhu, X., Pan, R., Ramalho, M., Mena, S., Jones,\
    \ P., Fu,\n              J., D'Aronco, S., and C. Ganzhorn, \"Updates on NADA:\n\
    \              Stability Analysis and Impact of Feedback Intervals\", IETF\n \
    \             95, April 2016,\n              <https://www.ietf.org/proceedings/95/slides/slides-95-\n\
    \              rmcat-5.pdf>.\n   [NS-2]     \"ns-2\", December 2014,\n       \
    \       <http://nsnam.sourceforge.net/wiki/index.php/Main_Page>.\n   [NS-3]  \
    \   \"ns-3 Network Simulator\", <https://www.nsnam.org/>.\n   [NS3-RMCAT]\n  \
    \            Fu, J., Mena, S., and X. Zhu, \"Simulator of IETF RMCAT\n       \
    \       congestion control protocols\", November 2017,\n              <https://github.com/cisco/ns3-rmcat>.\n\
    \   [RFC5450]  Singer, D. and H. Desineni, \"Transmission Time Offsets in\n  \
    \            RTP Streams\", RFC 5450, DOI 10.17487/RFC5450, March 2009,\n    \
    \          <https://www.rfc-editor.org/info/rfc5450>.\n   [RFC6660]  Briscoe,\
    \ B., Moncaster, T., and M. Menth, \"Encoding Three\n              Pre-Congestion\
    \ Notification (PCN) States in the IP Header\n              Using a Single Diffserv\
    \ Codepoint (DSCP)\", RFC 6660,\n              DOI 10.17487/RFC6660, July 2012,\n\
    \              <https://www.rfc-editor.org/info/rfc6660>.\n   [RFC6817]  Shalunov,\
    \ S., Hazel, G., Iyengar, J., and M. Kuehlewind,\n              \"Low Extra Delay\
    \ Background Transport (LEDBAT)\", RFC 6817,\n              DOI 10.17487/RFC6817,\
    \ December 2012,\n              <https://www.rfc-editor.org/info/rfc6817>.\n \
    \  [RFC7567]  Baker, F., Ed. and G. Fairhurst, Ed., \"IETF\n              Recommendations\
    \ Regarding Active Queue Management\",\n              BCP 197, RFC 7567, DOI 10.17487/RFC7567,\
    \ July 2015,\n              <https://www.rfc-editor.org/info/rfc7567>.\n   [RFC8033]\
    \  Pan, R., Natarajan, P., Baker, F., and G. White,\n              \"Proportional\
    \ Integral Controller Enhanced (PIE): A\n              Lightweight Control Scheme\
    \ to Address the Bufferbloat\n              Problem\", RFC 8033, DOI 10.17487/RFC8033,\
    \ February 2017,\n              <https://www.rfc-editor.org/info/rfc8033>.\n \
    \  [RFC8290]  Hoeiland-Joergensen, T., McKenney, P., Taht, D., Gettys,\n     \
    \         J., and E. Dumazet, \"The Flow Queue CoDel Packet Scheduler\n      \
    \        and Active Queue Management Algorithm\", RFC 8290,\n              DOI\
    \ 10.17487/RFC8290, January 2018,\n              <https://www.rfc-editor.org/info/rfc8290>.\n\
    \   [RFC8593]  Zhu, X., Mena, S., and Z. Sarker, \"Video Traffic Models\n    \
    \          for RTP Congestion Control Evaluations\", RFC 8593,\n             \
    \ DOI 10.17487/RFC8593, May 2019,\n              <https://www.rfc-editor.org/info/rfc8593>.\n\
    \   [RMCAT-CC] Jesup, R. and Z. Sarker, \"Congestion Control Requirements\n  \
    \            for Interactive Real-Time Media\", Work in Progress,\n          \
    \    Internet-Draft, draft-ietf-rmcat-cc-requirements-09, 12\n              December\
    \ 2014, <https://tools.ietf.org/html/draft-ietf-\n              rmcat-cc-requirements-09>.\n\
    \   [RMCAT-CC-RTP]\n              Zanaty, M., Singh, V., Nandakumar, S., and Z.\
    \ Sarker,\n              \"Congestion Control and Codec interactions in RTP\n\
    \              Applications\", Work in Progress, Internet-Draft, draft-\n    \
    \          ietf-rmcat-cc-codec-interactions-02, 18 March 2016,\n             \
    \ <https://tools.ietf.org/html/draft-ietf-rmcat-cc-codec-\n              interactions-02>.\n\
    \   [RMCAT-EVAL-TEST]\n              Sarker, Z., Singh, V., Zhu, X., and M. Ramalho,\
    \ \"Test\n              Cases for Evaluating RMCAT Proposals\", Work in Progress,\n\
    \              Internet-Draft, draft-ietf-rmcat-eval-test-10, 23 May\n       \
    \       2019, <https://tools.ietf.org/html/draft-ietf-rmcat-eval-\n          \
    \    test-10>.\n   [RTCP-FEEDBACK]\n              Sarker, Z., Perkins, C., Singh,\
    \ V., and M. Ramalho, \"RTP\n              Control Protocol (RTCP) Feedback for\
    \ Congestion Control\",\n              Work in Progress, Internet-Draft, draft-ietf-avtcore-cc-\n\
    \              feedback-message-05, 4 November 2019,\n              <https://tools.ietf.org/html/draft-ietf-avtcore-cc-\n\
    \              feedback-message-05>.\n   [WIRELESS-TESTS]\n              Sarker,\
    \ Z., Johansson, I., Zhu, X., Fu, J., Tan, W., and\n              M. Ramalho,\
    \ \"Evaluation Test Cases for Interactive Real-\n              Time Media over\
    \ Wireless Networks\", Work in Progress,\n              Internet-Draft, draft-ietf-rmcat-wireless-tests-08,\
    \ 5 July\n              2019, <https://tools.ietf.org/html/draft-ietf-rmcat-\n\
    \              wireless-tests-08>.\n   [ZHU-PV13] Zhu, X. and R. Pan, \"NADA:\
    \ A Unified Congestion Control\n              Scheme for Low-Latency Interactive\
    \ Video\", Proc. IEEE\n              International Packet Video Workshop, San\
    \ Jose, CA, USA,\n              DOI 10.1109/PV.2013.6691448, December 2013,\n\
    \              <https://doi.org/10.1109/PV.2013.6691448>.\n"
- title: Appendix A.  Network Node Operations
  contents:
  - "Appendix A.  Network Node Operations\n   NADA can work with different network\
    \ queue management schemes and\n   does not assume any specific network node operation.\
    \  As an example,\n   this appendix describes three variants of queue management\
    \ behavior\n   at the network node, leading to either implicit or explicit\n \
    \  congestion signals.  It needs to be acknowledged that NADA has not\n   yet\
    \ been tested with non-probabilistic ECN marking behaviors.\n   In all three flavors\
    \ described below, the network queue operates with\n   the simple First In, First\
    \ Out (FIFO) principle.  There is no need to\n   maintain per-flow state.  The\
    \ system can scale easily with a large\n   number of video flows and at high link\
    \ capacity.\n"
- title: A.1.  Default Behavior of Drop-Tail Queues
  contents:
  - "A.1.  Default Behavior of Drop-Tail Queues\n   In a conventional network with\
    \ drop-tail or RED queues, congestion is\n   inferred from the estimation of end-to-end\
    \ delay and/or packet loss.\n   Packet drops at the queue are detected at the\
    \ receiver and contribute\n   to the calculation of the aggregated congestion\
    \ signal x_curr.  No\n   special action is required at the network node.\n"
- title: A.2.  RED-Based ECN Marking
  contents:
  - "A.2.  RED-Based ECN Marking\n   In this mode, the network node randomly marks\
    \ the ECN field in the IP\n   packet header following the Random Early Detection\
    \ (RED) algorithm\n   [RFC7567].  Calculation of the marking probability involves\
    \ the\n   following steps on packet arrival:\n   1.  update smoothed queue size\
    \ q_avg as:\n         q_avg = w*q + (1-w)*q_avg\n   2.  calculate marking probability\
    \ p as:\n              / 0,                    if q < q_lo\n              |\n\
    \              |        q_avg - q_lo\n          p= <  p_max*--------------, if\
    \ q_lo <= q < q_hi\n              |         q_hi - q_lo\n              |\n   \
    \           \\ p = 1,                if q >= q_hi\n   Here, q_lo and q_hi correspond\
    \ to the low and high thresholds of\n   queue occupancy.  The maximum marking\
    \ probability is p_max.\n   The ECN marking events will contribute to the calculation\
    \ of an\n   equivalent delay x_curr at the receiver.  No changes are required\
    \ at\n   the sender.\n"
- title: A.3.  Random Early Marking with Virtual Queues
  contents:
  - "A.3.  Random Early Marking with Virtual Queues\n   Advanced network nodes may\
    \ support random early marking based on a\n   token bucket algorithm originally\
    \ designed for Pre-Congestion\n   Notification (PCN) [RFC6660].  The early congestion\
    \ notification\n   (ECN) bit in the IP header of packets is marked randomly. \
    \ The\n   marking probability is calculated based on a token bucket algorithm\n\
    \   originally designed for PCN [RFC6660].  The target link utilization\n   is\
    \ set as 90%; the marking probability is designed to grow linearly\n   with the\
    \ token bucket size when it varies between 1/3 and 2/3 of the\n   full token bucket\
    \ limit.\n   Calculation of the marking probability involves the following steps\n\
    \   upon packet arrival:\n   1.  meter packet against token bucket (r,b)\n   2.\
    \  update token level b_tk\n   3.  calculate the marking probability as:\n   \
    \            / 0,                     if b-b_tk < b_lo\n               |\n   \
    \            |          b-b_tk-b_lo\n          p = <  p_max* --------------, if\
    \ b_lo <= b-b_tk < b_hi\n               |           b_hi-b_lo\n              \
    \ |\n               \\ 1,                     if b-b_tk >= b_hi\n   Here, the\
    \ token bucket lower and upper limits are denoted by b_lo and\n   b_hi, respectively.\
    \  The parameter b indicates the size of the token\n   bucket.  The parameter\
    \ r is chosen to be below capacity, resulting in\n   slight underutilization of\
    \ the link.  The maximum marking probability\n   is p_max.\n   The ECN marking\
    \ events will contribute to the calculation of an\n   equivalent delay x_curr\
    \ at the receiver.  No changes are required at\n   the sender.  The virtual queuing\
    \ mechanism from the PCN-based marking\n   algorithm will lead to additional benefits\
    \ such as zero standing\n   queues.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank Randell Jesup, Luca De Cicco,\
    \ Piers\n   O'Hanlon, Ingemar Johansson, Stefan Holmer, Cesar Ilharco Magalhaes,\n\
    \   Safiqul Islam, Michael Welzl, Mirja K\xFChlewind, Karen Elisabeth Egede\n\
    \   Nielsen, Julius Flohr, Roland Bless, Andreas Smas, and Martin\n   Stiemerling\
    \ for their valuable review comments and helpful input to\n   this specification.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following individuals contributed to the implementation\
    \ and\n   evaluation of the proposed scheme and, therefore, helped to validate\n\
    \   and substantially improve this specification.\n   Paul E. Jones <paulej@packetizer.com>\
    \ of Cisco Systems implemented an\n   early version of the NADA congestion control\
    \ scheme and helped with\n   its lab-based testbed evaluations.\n   Jiantao Fu\
    \ <jianfu@cisco.com> of Cisco Systems helped with the\n   implementation and extensive\
    \ evaluation of NADA both in Mozilla web\n   browsers and in earlier simulation-based\
    \ evaluation efforts.\n   Stefano D'Aronco <stefano.daronco@geod.baug.ethz.ch>\
    \ of ETH Zurich\n   (previously at Ecole Polytechnique Federale de Lausanne when\n\
    \   contributing to this work) helped with the implementation and\n   evaluation\
    \ of an early version of NADA in [NS-3].\n   Charles Ganzhorn <charles.ganzhorn@gmail.com>\
    \ contributed to the\n   testbed-based evaluation of NADA during an early stage\
    \ of its\n   development.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Xiaoqing Zhu\n   Cisco Systems\n   12515 Research Blvd.,\
    \ Building 4\n   Austin, TX 78759\n   United States of America\n   Email: xiaoqzhu@cisco.com\n\
    \   Rong Pan\n   Intel Corporation\n   2200 Mission College Blvd\n   Santa Clara,\
    \ CA 95054\n   United States of America\n   Email: rong.pan@intel.com\n   Michael\
    \ A. Ramalho\n   AcousticComms Consulting\n   6310 Watercrest Way Unit 203\n \
    \  Lakewood Ranch, FL 34202-5211\n   United States of America\n   Phone: +1 732\
    \ 832 9723\n   Email: mar42@cornell.edu\n   URI:   http://ramalho.webhop.info/\n\
    \   Sergio Mena\n   Cisco Systems\n   EPFL, Quartier de l'Innovation, Batiment\
    \ E\n   CH-1015 Ecublens\n"
