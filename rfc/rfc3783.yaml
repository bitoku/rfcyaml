- title: __initial_text__
  contents:
  - "                Small Computer Systems Interface (SCSI)\n               Command\
    \ Ordering Considerations with iSCSI\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Internet Small Computer Systems Interface (iSCSI) is a Small Computer\n\
    \   Systems Interface (SCSI) transport protocol designed to run on top of\n  \
    \ TCP.  The iSCSI session abstraction is equivalent to the classic SCSI\n   \"\
    I_T nexus\", which represents the logical relationship between an\n   Initiator\
    \ and a Target (I and T) required in order to communicate via\n   the SCSI family\
    \ of protocols.  The iSCSI session provides an ordered\n   command delivery from\
    \ the SCSI initiator to the SCSI target.  This\n   document goes into the design\
    \ considerations that led to the iSCSI\n   session model as it is defined today,\
    \ relates the SCSI command\n   ordering features defined in T10 specifications\
    \ to the iSCSI\n   concepts, and finally provides guidance to system designers\
    \ on how\n   true command ordering solutions can be built based on iSCSI.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Definitions and Acronyms . . . . . . . . . . . . . .\
    \ . . . . .  3\n       2.1.  Definitions. . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n       2.2.  Acronyms . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   3.  Overview of the iSCSI Protocol . . . . . . . . . . . . . .\
    \ . .  4\n       3.1.  Protocol Mapping Description . . . . . . . . . . . . .\
    \ .  4\n       3.2.  The I_T Nexus Model. . . . . . . . . . . . . . . . . . .\
    \  5\n       3.3.  Ordered Command Delivery . . . . . . . . . . . . . . . .  6\n\
    \             3.3.1.  Questions. . . . . . . . . . . . . . . . . . . .  6\n  \
    \           3.3.2.  The Session Guarantee. . . . . . . . . . . . . .  6\n    \
    \         3.3.3.  Ordering Onus. . . . . . . . . . . . . . . . . .  7\n      \
    \       3.3.4.  Design Intent. . . . . . . . . . . . . . . . . .  7\n   4.  The\
    \ Command Ordering Scenario. . . . . . . . . . . . . . . . .  8\n       4.1. \
    \ SCSI Layer . . . . . . . . . . . . . . . . . . . . . . .  8\n             4.1.1.\
    \  Command Reference Number (CRN) . . . . . . . . .  8\n             4.1.2.  Task\
    \ Attributes. . . . . . . . . . . . . . . . .  8\n             4.1.3.  Auto Contingent\
    \ Allegiance (ACA) . . . . . . . .  8\n             4.1.4.  UA Interlock . . .\
    \ . . . . . . . . . . . . . . .  9\n       4.2.  iSCSI Layer. . . . . . . . .\
    \ . . . . . . . . . . . . . .  9\n   5.  Connection Failure Considerations. .\
    \ . . . . . . . . . . . . .  9\n   6.  Command Ordering System Considerations\
    \ . . . . . . . . . . . . 10\n   7.  Reservation Considerations . . . . . . .\
    \ . . . . . . . . . . . 11\n   8.  Security Considerations. . . . . . . . . .\
    \ . . . . . . . . . . 12\n   9.  References and Bibliography. . . . . . . . .\
    \ . . . . . . . . . 12\n       9.1.  Normative References.. . . . . . . . . .\
    \ . . . . . . . . 12\n       9.2.  Informative References . . . . . . . . . .\
    \ . . . . . . . 12\n   10. Acknowledgements . . . . . . . . . . . . . . . . .\
    \ . . . . . . 12\n   11. Authors' Addresses . . . . . . . . . . . . . . . . .\
    \ . . . . . 13\n   12. Full Copyright Statement . . . . . . . . . . . . . . .\
    \ . . . . 14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   iSCSI is a SCSI transport protocol ([iSCSI]) designed to\
    \ enable\n   running SCSI application protocols on TCP/IP networks, including\n\
    \   potentially the Internet.  Given the size and scope of the Internet,\n   iSCSI\
    \ thus enables some exciting new SCSI applications.  Potential\n   new application\
    \ areas for exploiting iSCSI's value include the\n   following:\n      a) Larger\
    \ (diameter) Storage Area Networks (SANs) than had been\n         possible until\
    \ now\n      b) Asynchronous remote mirroring\n      c) Remote tape vaulting\n\
    \   Each of these applications takes advantage of the practically\n   unlimited\
    \ geographical distance that iSCSI enables between a SCSI\n   initiator and a\
    \ SCSI target.  In each of these cases, because of the\n   long delays involved,\
    \ there is a very high incentive for the\n   initiator to stream SCSI commands\
    \ back-to-back without waiting for\n   the SCSI status of previous commands. \
    \ Command streaming may be\n   employed primarily by two classes of applications\
    \ - while one class\n   may not particularly care about ordered command execution,\
    \ the other\n   class does rely on ordered command execution (i.e. there is an\n\
    \   application-level dependency on the ordering among SCSI commands).\n   As\
    \ an example, cases b) and c) listed earlier clearly require ordered\n   command\
    \ execution.  A mirroring application does not want the writes\n   to be committed\
    \ out of order on the remote SCSI target, so as to\n   preserve the transactional\
    \ integrity of the data on that target.  To\n   summarize, SCSI command streaming,\
    \ when coupled with the guarantee of\n   ordered command execution on the SCSI\
    \ target, is extremely valuable\n   for a critical class of applications in long-latency\
    \ networks.\n   This document reviews the various protocol considerations in\n\
    \   designing storage solutions that employ SCSI command ordering.  This\n   document\
    \ also analyzes and explains the design intent of [iSCSI] with\n   respect to\
    \ command ordering.\n"
- title: 2.  Definitions and Acronyms
  contents:
  - '2.  Definitions and Acronyms

    '
- title: 2.1.  Definitions
  contents:
  - "2.1.  Definitions\n   -  I_T nexus: [SAM2] defines the I_T nexus as a relationship\
    \ between\n      a SCSI initiator port and a SCSI target port.  [iSCSI] defines\
    \ an\n      iSCSI session as the iSCSI representation of an I_T nexus.  In the\n\
    \      iSCSI context, the I_T nexus (i.e. the iSCSI session) is a\n      relationship\
    \ between an iSCSI initiator's end of the session (SCSI\n      Initiator Port)\
    \ and the iSCSI target's Portal Group (SCSI Target\n      Port).\n   -  PDU (Protocol\
    \ Data Unit): An iSCSI initiator and iSCSI target\n      communicate using iSCSI\
    \ protocol messages.  These messages are\n      called \"iSCSI protocol data units\"\
    \ (iSCSI PDUs).\n   -  SCSI device: A SCSI device is an entity that contains one\
    \ or more\n      SCSI ports that are connected to a service delivery subsystem\
    \ and\n      supports SCSI application protocols.  In the iSCSI context, the\n\
    \      SCSI Device is the component within an iSCSI Node that provides\n     \
    \ the SCSI functionality.  The SCSI Device Name is defined to be the\n      iSCSI\
    \ Name of the node.\n   -  Session: A group of logically related iSCSI connections\
    \ that link\n      an initiator with a target form a session (equivalent to a\
    \ SCSI\n      I-T nexus).  The number of participating iSCSI connections within\n\
    \      an iSCSI session may vary over time.  The multiplicity of\n      connections\
    \ at the iSCSI level is completely hidden for the SCSI\n      layer - each SCSI\
    \ port in an I_T nexus sees only one peer SCSI\n      port across all the connections\
    \ of a session.\n"
- title: 2.2.  Acronyms
  contents:
  - "2.2.  Acronyms\n   Acronym                      Definition\n   --------------------------------------------------------------\n\
    \   ACA                          Auto Contingent Allegiance\n   ASC          \
    \                Additional Sense Code\n   ASCQ                         Additional\
    \ Sense Code Qualifier\n   CRN                          Command Reference Number\n\
    \   IETF                         Internet Engineering Task Force\n   ISID    \
    \                     Initiator Session Identifier\n   ITT                   \
    \       Initiator Task Tag\n   LU                           Logical Unit\n   LUN\
    \                          Logical Unit Number\n   NIC                       \
    \   Network Interface Card\n   PDU                          Protocol Data Unit\n\
    \   TMF                          Task Management Function\n   TSIH           \
    \              Target Session Identifying Handle\n   SAN                     \
    \     Storage Area Network\n   SCSI                         Small Computer Systems\
    \ Interface\n   TCP                          Transmission Control Protocol\n \
    \  UA                           Unit Attention\n   WG                        \
    \   Working Group\n"
- title: 3.  Overview of the iSCSI Protocol
  contents:
  - '3.  Overview of the iSCSI Protocol

    '
- title: 3.1.  Protocol Mapping Description
  contents:
  - "3.1.  Protocol Mapping Description\n   The iSCSI protocol is a mapping of the\
    \ SCSI remote procedure\n   invocation model (see [SAM2]) over the TCP protocol.\n\
    \   SCSI's notion of a task maps to an iSCSI task.  Each iSCSI task is\n   uniquely\
    \ identified within that I_T nexus by a 32-bit unique\n   identifier called Initiator\
    \ Task Tag (ITT).  The ITT is both an iSCSI\n   identifier of the task and a classic\
    \ SCSI task tag.\n   SCSI commands from the initiator to the target are carried\
    \ in iSCSI\n   requests called SCSI Command PDUs.  SCSI status back to the initiator\n\
    \   is carried in iSCSI responses called SCSI Response PDUs.  SCSI Data-\n   out\
    \ from the initiator to the target is carried in SCSI Data-Out\n   PDUs, and the\
    \ SCSI Data-in back to the initiator is carried in SCSI\n   Data-in PDUs.\n"
- title: 3.2.  The I_T Nexus Model
  contents:
  - "3.2.  The I_T Nexus Model\n   In the iSCSI model, the SCSI I_T nexus maps directly\
    \ to the iSCSI\n   session, which is an iSCSI protocol abstraction spanning one\
    \ or more\n   TCP connections.  The iSCSI protocol defines the semantics in order\n\
    \   to realize one logical flow of bidirectional communication on the I_T\n  \
    \ nexus, potentially spanning multiple TCP connections (as many as\n   2^16).\
    \  The multiplicity of iSCSI connections is thus completely\n   contained at the\
    \ iSCSI layer, while the SCSI layer is presented with\n   a single I_T nexus,\
    \ even in a multi-connection session.  A session\n   between a pair of given iSCSI\
    \ nodes is identified by the session\n   identifier (SSID) and each connection\
    \ within a given session is\n   uniquely identified by a connection identifier\
    \ (CID) in iSCSI.  The\n   SSID itself has two components - Initiator Session\
    \ Identifier (ISID)\n   and a Target Session Identifying Handler (TSIH) - each\
    \ identifying\n   one end of the same session.\n   There are four crucial functional\
    \ facets of iSCSI that together\n   present this single logical flow abstraction\
    \ to the SCSI layer, even\n   with an iSCSI session spanning across multiple iSCSI\
    \ connections.\n      a) Ordered command delivery: A sequence of SCSI commands\
    \ that is\n         striped across all the connections in the session is\n   \
    \      \"reordered\" by the target iSCSI layer into an identical\n         sequence\
    \ based on a Command Sequence Number (CmdSN) that is\n         unique across the\
    \ session.  The goal is to achieve bandwidth\n         aggregation from multiple\
    \ TCP connections, but to still make it\n         appear to the target SCSI layer\
    \ as if all the commands had\n         travelled in one flow.\n      b) Connection\
    \ allegiance: All the PDU exchanges for a SCSI\n         Command, up to and including\
    \ the SCSI Response PDU for the\n         Command, are required to flow on the\
    \ same iSCSI connection at\n         any given time.  This again is intended to\
    \ hide the multi-\n         connection nature of a session because the SCSI layer\
    \ on either\n         side will never see the PDU contents out of order (e.g.,\
    \ status\n         cannot bypass read data for an initiator).\n      c) Task set\
    \ management function handling: [iSCSI] specifies an\n         ordered sequence\
    \ of steps for the iSCSI layer on the SCSI\n         target in handling the two\
    \ SCSI task management functions\n         (TMFs) that manage SCSI task sets.\
    \  The two TMFs are ABORT TASK\n         SET that aborts all active tasks in a\
    \ session, and CLEAR TASK\n         SET that clears the tasks in the task set.\
    \  The goal of the\n         sequence of steps is to guarantee that the initiator\
    \ receives\n         the SCSI Response PDUs of all unaffected tasks before the\
    \ TMF\n         Response itself arrives, regardless of the number of\n       \
    \  connections in the iSCSI session.  This operational model is\n         again\
    \ intended to preserve the single flow abstraction to the\n         SCSI layer.\n\
    \      d) Immediate task management function handling: Even when a TMF\n     \
    \    request is marked as \"immediate\" (i.e. only has a position in\n       \
    \  the command stream, but does not consume a CmdSN), [iSCSI]\n         defines\
    \ semantics that require the target iSCSI layer to ensure\n         that the TMF\
    \ request is executed as if the commands and the TMF\n         request were all\
    \ flowing on a single logical channel.  This\n         ensures that the TMF request\
    \ will act on tasks that it was\n         meant to manage.\n   The following sections\
    \ will analyze the \"Ordered command delivery\"\n   aspect in more detail, since\
    \ command ordering is the focus of this\n   document.\n"
- title: 3.3.  Ordered Command Delivery
  contents:
  - '3.3.  Ordered Command Delivery

    '
- title: 3.3.1.  Questions
  contents:
  - "3.3.1.  Questions\n   A couple of important questions related to iSCSI command\
    \ ordering\n   were considered early on in the design of the iSCSI protocol. \
    \ The\n   questions were:\n      a) What should be the command ordering behavior\
    \ required of iSCSI\n         implementations in the presence of transport errors,\
    \ such as\n         errors that corrupt the data in a fashion that is not detected\n\
    \         by the TCP checksum (e.g., two offsetting bit flips in the same\n  \
    \       bit position), but is detected by the iSCSI CRC digest?\n      b) Should\
    \ [iSCSI] require both initiators and targets to use\n         ordered command\
    \ delivery?\n   Since the answers to these questions are critical to the\n   understanding\
    \ of the ordering behavior required by the iSCSI\n   protocol, the following sub-sections\
    \ consider them in more detail.\n"
- title: 3.3.2.  The Session Guarantee
  contents:
  - "3.3.2.  The Session Guarantee\n   The final disposition of question a) in section\
    \ 3.3.1 was reflected\n   in [RFC3347], \"iSCSI MUST specify strictly ordered\
    \ delivery of SCSI\n   commands over an iSCSI session between an initiator/target\
    \ pair, even\n   in the presence of transport errors.\"  Stated differently, an\
    \ iSCSI\n   digest failure, or an iSCSI connection termination, must not cause\n\
    \   the iSCSI layer on a target to allow executing the commands in an\n   order\
    \ different from that intended (as indicated by the CmdSN order)\n   by the initiator.\
    \  This design choice is enormously helpful in\n   building storage systems and\
    \ solutions that can now always assume\n   command ordering to be a service characteristic\
    \ of an iSCSI\n   substrate.\n   Note that by taking the position that an iSCSI\
    \ session always\n   guarantees command ordering, [iSCSI] was indirectly implying\
    \ that the\n   principal reason for the multi-connection iSCSI session abstraction\n\
    \   was to allow ordered bandwidth aggregation for an I_T nexus.  In\n   deployment\
    \ models where this cross-connection ordering mandated by\n   [iSCSI] is deemed\
    \ expensive, a serious consideration should be given\n   to deploying multiple\
    \ single-connection sessions instead.\n"
- title: 3.3.3.  Ordering Onus
  contents:
  - "3.3.3.  Ordering Onus\n   The final resolution of b) in section 3.3.1 by the\
    \ iSCSI protocol\n   designers was in favor of not always requiring the initiators\
    \ to use\n   command ordering.  This resolution is reflected in dropping the\n\
    \   mandatory ACA usage requirement on the initiators, and allowing an\n   ABORT\
    \ TASK TMF to plug a command hole etc., since these are conscious\n   choices\
    \ an initiator makes in favor of not using ordered command\n   delivery.  The\
    \ net result can be discerned by a careful reader of\n   [iSCSI] - the onus of\
    \ ensuring ordered command delivery is always on\n   the iSCSI targets, while\
    \ the initiators may or may not utilize\n   command ordering.  iSCSI targets,\
    \ being the servers in the client-\n   server model, do not really attempt to\
    \ establish whether or not a\n   client (initiator) intends to take advantage\
    \ of command ordering\n   service, but instead simply always provide the guaranteed\
    \ delivery\n   service.  The rationale here is that there are inherent SCSI and\n\
    \   application-level dependencies, as we shall see in building a command\n  \
    \ ordered solution, that are beyond the scope of [iSCSI], to mandate or\n   even\
    \ discern the intent with respect to the usage of command\n   ordering.\n"
- title: 3.3.4.  Design Intent
  contents:
  - "3.3.4.  Design Intent\n   To summarize the design intent of [iSCSI]:\n   The\
    \ service delivery subsystem (see [SAM2]) abstraction provided by\n   an iSCSI\
    \ session is guaranteed to have the intrinsic property of\n   ordered delivery\
    \ of commands to the target SCSI layer under all\n   conditions.  Consequently,\
    \ the guarantee of the ordered command\n   delivery is across the entire I_T nexus\
    \ spanning all the LUs that the\n   nexus is authorized to access.  It is the\
    \ initiator's discretion as\n   to whether or not this property will be used.\n"
- title: 4.  The Command Ordering Scenario
  contents:
  - "4.  The Command Ordering Scenario\n   A storage systems designer working with\
    \ SCSI and iSCSI has to\n   consider the following protocol features in SCSI and\
    \ iSCSI layers,\n   each of which has a role to play in realizing the command\
    \ ordering\n   goal.\n"
- title: 4.1.  SCSI Layer
  contents:
  - "4.1.  SCSI Layer\n   The SCSI application layer has several tools to enforce\
    \ ordering.\n"
- title: 4.1.1.  Command Reference Number (CRN)
  contents:
  - "4.1.1.  Command Reference Number (CRN)\n   CRN is an ordered sequence number\
    \ which, when enabled for a device\n   server, increments by one for each I_T_L\
    \ nexus (see [SAM2]).  The one\n   notable drawback with CRN is that there is\
    \ no SCSI-generic way (such\n   as through mode pages) to enable or disable the\
    \ CRN feature.  [SAM2]\n   also leaves the usage semantics of CRN for the SCSI\
    \ transport\n   protocol, such as iSCSI, to specify.  [iSCSI] chose not to support\n\
    \   the CRN feature for various reasons.\n"
- title: 4.1.2.  Task Attributes
  contents:
  - "4.1.2.  Task Attributes\n   [SAM2] defines the following four task attributes\
    \ - SIMPLE, ORDERED,\n   HEAD OF QUEUE, and ACA.  Each task to an LU may be assigned\
    \ an\n   attribute.  [SAM2] defines the ordering constraints that each of\n  \
    \ these attributes conveys to the device server that is servicing the\n   task.\
    \  In particular, judicious use of ORDERED and SIMPLE attributes\n   applied to\
    \ a stream of pipelined commands could convey the precise\n   execution schema\
    \ for the commands that the initiator issues, provided\n   the commands are received\
    \ in the same order on the target.\n"
- title: 4.1.3.  Auto Contingent Allegiance (ACA)
  contents:
  - "4.1.3.  Auto Contingent Allegiance (ACA)\n   ACA is an LU-level condition that\
    \ is triggered when a command (with\n   the NACA bit set to 1) completes with\
    \ CHECK CONDITION.  When ACA is\n   triggered, it prevents all commands other\
    \ than those with the ACA\n   attribute from executing until the CLEAR ACA task\
    \ management function\n   is executed, while blocking all the other tasks already\
    \ in the task\n   set.  See [SAM2] for the detailed semantics of ACA.  Since ACA\
    \ is\n   closely tied to the notion of a task set, one would ideally have to\n\
    \   select the scope of the task set (by setting the TST bit to 1 in the\n   control\
    \ mode page of the LU) to be per-initiator in order to prevent\n   command failures\
    \ in one I_T_L nexus from impacting other I_T_L\n   nexuses through ACA.\n"
- title: 4.1.4.  UA Interlock
  contents:
  - "4.1.4.  UA Interlock\n   When UA interlock is enabled, the logical unit does\
    \ not clear any\n   standard Unit Attention condition reported with autosense,\
    \ and in\n   addition, establishes a Unit Attention condition when a task is\n\
    \   terminated with one of BUSY, TASK SET FULL, or RESERVATION CONFLICT\n   statuses.\
    \  This so-called \"interlocked UA\" is cleared only when the\n   device server\
    \ executes an explicit REQUEST SENSE ([SPC3]) command\n   from the same initiator.\
    \  From a functionality perspective, the scope\n   of UA interlock today is slightly\
    \ different from ACA's because it\n   enforces ordering behavior for completion\
    \ statuses other than CHECK\n   CONDITION, but otherwise conceptually has the\
    \ same design intent as\n   ACA.  On the other hand, ACA is somewhat more sophisticated\
    \ because\n   it allows special \"cleanup\" tasks (ones with ACA attribute) to\n\
    \   execute when ACA is active.  One of the principal reasons UA\n   interlock\
    \ came into being was that SCSI designers wanted a command\n   ordering feature\
    \ without the side effects of using the aforementioned\n   TST bit in the control\
    \ mode page.\n"
- title: 4.2.  iSCSI Layer
  contents:
  - "4.2.  iSCSI Layer\n   As noted in section 3.2 and section 3.3, the iSCSI protocol\
    \ enforces\n   and guarantees ordered command delivery per iSCSI session using\
    \ the\n   CmdSN, and this is an attribute of the SCSI transport layer.  Note\n\
    \   further that any command ordering solution that seeks to realize\n   ordering\
    \ from the initiator SCSI layer to the target SCSI layer would\n   be of practical\
    \ value only when the command ordering is guaranteed by\n   the SCSI transport\
    \ layer.  In other words, the related SCSI\n   application layer protocol features\
    \ such as ACA etc. are based on the\n   premise of an ordered SCSI transport.\
    \  Thus, iSCSI's command ordering\n   is the last piece in completing the puzzle\
    \ of building solutions that\n   rely on ordered command execution, by providing\
    \ the crucial guarantee\n   that all the commands handed to the initiator iSCSI\
    \ layer will be\n   transported and handed to the target SCSI layer in the same\
    \ order.\n"
- title: 5.  Connection Failure Considerations
  contents:
  - "5.  Connection Failure Considerations\n   [iSCSI] mandates that when an iSCSI\
    \ connection fails, the active\n   tasks on that connection must be terminated\
    \ if not recovered within a\n   certain negotiated time limit.  When an iSCSI\
    \ target does terminate\n   some subset of tasks due to iSCSI connection dynamics,\
    \ there is a\n   danger that the SCSI layer would simply move on to the next tasks\n\
    \   waiting to be processed and execute them out-of-order unbeknownst to\n   the\
    \ initiator SCSI layer.  To preclude this danger, [iSCSI] further\n   mandates\
    \ the following:\n      a) The tasks terminated due to the connection failure\
    \ must be\n         internally terminated by the iSCSI target \"as if\" due to\
    \ a\n         CHECK CONDITION.  While this particular completion status is\n \
    \        never communicated back to the initiator, the \"as if\" is still\n  \
    \       meaningful and required because if the initiator were using ACA\n    \
    \     as the command ordering mechanism of choice, a SCSI-level ACA\n        \
    \ will be triggered due to this mandatory CHECK CONDITION.  This\n         addresses\
    \ the aforementioned danger.\n      b) After the tasks are terminated due to the\
    \ connection failure,\n         the iSCSI target must report a Unit Attention\
    \ condition on the\n         next command processed on any connection for each\
    \ affected\n         I_T_L nexus of that session.  This is required because if\
    \ the\n         initiator were using UA interlock as the command ordering\n  \
    \       mechanism of choice, a SCSI-level UA will trigger a UA-\n         interlock.\
    \  This again addresses the aforementioned danger.\n         iSCSI targets must\
    \ report this UA with the status of CHECK\n         CONDITION, and the ASC/ASCQ\
    \ value of 47h/7Fh (\"SOME COMMANDS\n         CLEARED BY ISCSI PROTOCOL EVENT\"\
    ).\n"
- title: 6.  Command Ordering System Considerations
  contents:
  - "6.  Command Ordering System Considerations\n   In general, command ordering is\
    \ automatically enforced if targets and\n   initiators comply with the iSCSI specification.\
    \  However, listed\n   below are certain additional related implementation considerations\n\
    \   for the iSCSI initiators and targets to take note of.\n      a) Even when\
    \ all iSCSI and SCSI command ordering considerations\n         earlier noted in\
    \ this document were applied, it is beneficial\n         for iSCSI initiators\
    \ to proactively avoid scenarios that would\n         otherwise lead to out-of-order\
    \ command execution.  This is\n         simply because the SCSI command ordering\
    \ features such as UA\n         interlock are likely to be costlier in performance\
    \ when they\n         are allowed to be triggered.  [iSCSI] provides enough guidance\n\
    \         on how to implement this proactive detection of PDU ordering\n     \
    \    errors.\n      b) The whole notion of command streaming does of course assume\n\
    \         that the target in question supports command queueing.  An\n       \
    \  iSCSI target desirous of supporting command ordering solutions\n         should\
    \ ensure that the SCSI layer on the target supports\n         command queuing.\
    \  The remote backup (tape vaulting)\n         applications that iSCSI enables\
    \ make an especially compelling\n         case that tape devices should give a\
    \ very serious consideration\n         to supporting command queuing, at least\
    \ when used in\n         conjunction with iSCSI.\n      c) An iSCSI target desirous\
    \ of supporting high-performance command\n         ordering solutions that involve\
    \ specifying a description of\n         execution schema should ensure that the\
    \ SCSI layer on the\n         target in fact does support the ORDERED and SIMPLE\
    \ task\n         attributes.\n      d) There is some consideration of expanding\
    \ the scope of UA\n         interlock to encompass CHECK CONDITION status, and\
    \ thus make it\n         the only required command ordering functionality of\n\
    \         implementations to build command ordering solutions.  Until\n      \
    \   this is resolved in T10, the currently defined semantics of UA\n         interlock\
    \ and ACA warrant implementing both features by iSCSI\n         targets desirous\
    \ of supporting command ordering solutions.\n"
- title: 7.  Reservation Considerations
  contents:
  - "7.  Reservation Considerations\n   [iSCSI] describes a \"principle of conservative\
    \ reuse\" that encourages\n   iSCSI initiators to reuse the same ISIDs (see section\
    \ 3.2) to various\n   SCSI target ports, in order to present the same SCSI initiator\
    \ port\n   name to those target ports.  This is in fact a very crucial\n   implementation\
    \ consideration that must be complied with.  [SPC3]\n   mandates the SCSI targets\
    \ to associate persistent reservations and\n   the related registrations with\
    \ the SCSI initiator port names whenever\n   they are required by the SCSI transport\
    \ protocol.  Since [iSCSI]\n   requires the mandatory SCSI initiator port names\
    \ based on ISIDs,\n   iSCSI targets are required to work off the SCSI initiator\
    \ port names,\n   and thus indirectly the ISIDs, in enforcing the persistent\n\
    \   reservations.\n   This fact has the following implications for the implementations:\n\
    \      a) If a persistent reservation/registration is intended to be used\n  \
    \       across multiple SCSI ports of a SCSI device, the initiator\n         iSCSI\
    \ implementation must use the same ISID across associated\n         iSCSI sessions\
    \ connecting to different iSCSI target portal\n         groups of the SCSI device.\n\
    \      b) If a persistent reservation/registration is intended to be used\n  \
    \       across the power loss of a SCSI target, the initiator iSCSI\n        \
    \ implementation must use the same ISIDs as before in\n         re-establishing\
    \ the associated iSCSI sessions upon subsequent\n         reboot in order to rely\
    \ on the persist through power loss\n         capability.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   For security considerations in using the iSCSI\
    \ protocol, refer to the\n   Security Considerations section in [iSCSI].  This\
    \ document does not\n   introduce any additional security considerations other\
    \ than those\n   already discussed in [iSCSI].\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [iSCSI]   Satran, J., Meth, K., Sapuntzakis, C.,\
    \ Chadalapaka, M. and\n             E. Zeidner, \"Internet Small Computer Systems\
    \ Inferface\n             (iSCSI)\", RFC 3720, May 2004.\n   [SAM2]    ANSI INCITS.366:2003\
    \ SCSI Architecture Model - 2 (SAM-2).\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC793]  Postel, J., \"Transmission Control\
    \ Protocol\", STD 7, RFC\n             793, September 1981.\n   [RFC2119] Bradner,\
    \ S., \"Key Words for use in RFCs to Indicate\n             Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC3347] Krueger, M. and R. Haagens, \"iSCSI\
    \ Requirements and Design\n             Considerations\", RFC 3347, July 2002.\n\
    \   [SPC3]    INCITS T10/1416-D, SCSI Primary Commands-3 (SPC-3).\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   We are grateful to the IPS working group whose work\
    \ defined the iSCSI\n   protocol.  Thanks also to David Black (EMC) who encouraged\
    \ the\n   publication of this document.  Special thanks to Randy Haagens (HP)\n\
    \   for his insights on the topic of command ordering.  Thanks are also\n   due\
    \ to Elizabeth Rodriguez for carefully reviewing this document.\n"
- title: 11.  Authors' Addresses
  contents:
  - "11.  Authors' Addresses\n   Mallikarjun Chadalapaka\n   Hewlett-Packard Company\n\
    \   8000 Foothills Blvd.\n   Roseville, CA 95747-5668, USA\n   Phone: +1.916.785.5621\n\
    \   EMail: cbm@rose.hp.com\n   Rob Elliott\n   Hewlett-Packard Company\n   MC140801\n\
    \   PO Box 692000\n   Houston, TX 77269-2000  USA\n   Phone: +1.281.518.5037\n\
    \   EMail: elliott@hp.com\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78, and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
