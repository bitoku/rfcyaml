- title: __initial_text__
  contents:
  - "                        Internet Message Format\nStatus of this Memo\n   This\
    \ document specifies an Internet standards track protocol for the\n   Internet\
    \ community, and requests discussion and suggestions for\n   improvements.  Please\
    \ refer to the current edition of the \"Internet\n   Official Protocol Standards\"\
    \ (STD 1) for the standardization state\n   and status of this protocol.  Distribution\
    \ of this memo is unlimited.\nCopyright Notice\n   Copyright (C) The Internet\
    \ Society (2001).  All Rights Reserved.\nAbstract\n   This standard specifies\
    \ a syntax for text messages that are sent\n   between computer users, within\
    \ the framework of \"electronic mail\"\n   messages.  This standard supersedes\
    \ the one specified in Request For\n   Comments (RFC) 822, \"Standard for the\
    \ Format of ARPA Internet Text\n   Messages\", updating it to reflect current\
    \ practice and incorporating\n   incremental changes that were specified in other\
    \ RFCs.\nTable of Contents\n   1. Introduction ...............................................\
    \ 3\n   1.1. Scope .................................................... 3\n  \
    \ 1.2. Notational conventions ................................... 4\n   1.2.1.\
    \ Requirements notation .................................. 4\n   1.2.2. Syntactic\
    \ notation ..................................... 4\n   1.3. Structure of this\
    \ document ............................... 4\n   2. Lexical Analysis of Messages\
    \ ............................... 5\n   2.1. General Description ......................................\
    \ 5\n   2.1.1. Line Length Limits ..................................... 6\n  \
    \ 2.2. Header Fields ............................................ 7\n   2.2.1.\
    \ Unstructured Header Field Bodies ....................... 7\n   2.2.2. Structured\
    \ Header Field Bodies ......................... 7\n   2.2.3. Long Header Fields\
    \ ..................................... 7\n   2.3. Body .....................................................\
    \ 8\n   3. Syntax ..................................................... 9\n  \
    \ 3.1. Introduction ............................................. 9\n   3.2. Lexical\
    \ Tokens ........................................... 9\n   3.2.1. Primitive Tokens\
    \ ....................................... 9\n   3.2.2. Quoted characters ......................................10\n\
    \   3.2.3. Folding white space and comments .......................11\n   3.2.4.\
    \ Atom ...................................................12\n   3.2.5. Quoted\
    \ strings .........................................13\n   3.2.6. Miscellaneous\
    \ tokens ...................................13\n   3.3. Date and Time Specification\
    \ ..............................14\n   3.4. Address Specification ....................................15\n\
    \   3.4.1. Addr-spec specification ................................16\n   3.5\
    \ Overall message syntax ....................................17\n   3.6. Field\
    \ definitions ........................................18\n   3.6.1. The origination\
    \ date field .............................20\n   3.6.2. Originator fields ......................................21\n\
    \   3.6.3. Destination address fields .............................22\n   3.6.4.\
    \ Identification fields ..................................23\n   3.6.5. Informational\
    \ fields ...................................26\n   3.6.6. Resent fields ..........................................26\n\
    \   3.6.7. Trace fields ...........................................28\n   3.6.8.\
    \ Optional fields ........................................29\n   4. Obsolete Syntax\
    \ ............................................29\n   4.1. Miscellaneous obsolete\
    \ tokens ............................30\n   4.2. Obsolete folding white space\
    \ .............................31\n   4.3. Obsolete Date and Time ...................................31\n\
    \   4.4. Obsolete Addressing ......................................33\n   4.5.\
    \ Obsolete header fields ...................................33\n   4.5.1. Obsolete\
    \ origination date field ........................34\n   4.5.2. Obsolete originator\
    \ fields .............................34\n   4.5.3. Obsolete destination address\
    \ fields ....................34\n   4.5.4. Obsolete identification fields .........................35\n\
    \   4.5.5. Obsolete informational fields ..........................35\n   4.5.6.\
    \ Obsolete resent fields .................................35\n   4.5.7. Obsolete\
    \ trace fields ..................................36\n   4.5.8. Obsolete optional\
    \ fields ...............................36\n   5. Security Considerations ....................................36\n\
    \   6. Bibliography ...............................................37\n   7. Editor's\
    \ Address ...........................................38\n   8. Acknowledgements\
    \ ...........................................39\n   Appendix A. Example messages\
    \ ..................................41\n   A.1. Addressing examples ......................................41\n\
    \   A.1.1. A message from one person to another with simple\n          addressing\
    \ .............................................41\n   A.1.2. Different types of\
    \ mailboxes ...........................42\n   A.1.3. Group addresses ........................................43\n\
    \   A.2. Reply messages ...........................................43\n   A.3.\
    \ Resent messages ..........................................44\n   A.4. Messages\
    \ with trace fields ...............................46\n   A.5. White space, comments,\
    \ and other oddities ................47\n   A.6. Obsoleted forms ..........................................47\n\
    \   A.6.1. Obsolete addressing ....................................48\n   A.6.2.\
    \ Obsolete dates .........................................48\n   A.6.3. Obsolete\
    \ white space and comments ......................48\n   Appendix B. Differences\
    \ from earlier standards ................49\n   Appendix C. Notices ...........................................50\n\
    \   Full Copyright Statement ......................................51\n1. Introduction\n\
    1.1. Scope\n   This standard specifies a syntax for text messages that are sent\n\
    \   between computer users, within the framework of \"electronic mail\"\n   messages.\
    \  This standard supersedes the one specified in Request For\n   Comments (RFC)\
    \ 822, \"Standard for the Format of ARPA Internet Text\n   Messages\" [RFC822],\
    \ updating it to reflect current practice and\n   incorporating incremental changes\
    \ that were specified in other RFCs\n   [STD3].\n   This standard specifies a\
    \ syntax only for text messages.  In\n   particular, it makes no provision for\
    \ the transmission of images,\n   audio, or other sorts of structured data in\
    \ electronic mail messages.\n   There are several extensions published, such as\
    \ the MIME document\n   series [RFC2045, RFC2046, RFC2049], which describe mechanisms\
    \ for the\n   transmission of such data through electronic mail, either by\n \
    \  extending the syntax provided here or by structuring such messages to\n   conform\
    \ to this syntax.  Those mechanisms are outside of the scope of\n   this standard.\n\
    \   In the context of electronic mail, messages are viewed as having an\n   envelope\
    \ and contents.  The envelope contains whatever information is\n   needed to accomplish\
    \ transmission and delivery.  (See [RFC2821] for a\n   discussion of the envelope.)\
    \  The contents comprise the object to be\n   delivered to the recipient.  This\
    \ standard applies only to the format\n   and some of the semantics of message\
    \ contents.  It contains no\n   specification of the information in the envelope.\n\
    \   However, some message systems may use information from the contents\n   to\
    \ create the envelope.  It is intended that this standard facilitate\n   the acquisition\
    \ of such information by programs.\n   This specification is intended as a definition\
    \ of what message\n   content format is to be passed between systems.  Though\
    \ some message\n   systems locally store messages in this format (which eliminates\
    \ the\n   need for translation between formats) and others use formats that\n\
    \   differ from the one specified in this standard, local storage is\n   outside\
    \ of the scope of this standard.\n   Note: This standard is not intended to dictate\
    \ the internal formats\n   used by sites, the specific message system features\
    \ that they are\n   expected to support, or any of the characteristics of user\
    \ interface\n   programs that create or read messages.  In addition, this standard\n\
    \   does not specify an encoding of the characters for either transport\n   or\
    \ storage; that is, it does not specify the number of bits used or\n   how those\
    \ bits are specifically transferred over the wire or stored\n   on disk.\n1.2.\
    \ Notational conventions\n1.2.1. Requirements notation\n   This document occasionally\
    \ uses terms that appear in capital letters.\n   When the terms \"MUST\", \"SHOULD\"\
    , \"RECOMMENDED\", \"MUST NOT\", \"SHOULD\n   NOT\", and \"MAY\" appear capitalized,\
    \ they are being used to indicate\n   particular requirements of this specification.\
    \  A discussion of the\n   meanings of these terms appears in [RFC2119].\n1.2.2.\
    \ Syntactic notation\n   This standard uses the Augmented Backus-Naur Form (ABNF)\
    \ notation\n   specified in [RFC2234] for the formal definitions of the syntax\
    \ of\n   messages.  Characters will be specified either by a decimal value\n \
    \  (e.g., the value %d65 for uppercase A and %d97 for lowercase A) or by\n   a\
    \ case-insensitive literal value enclosed in quotation marks (e.g.,\n   \"A\"\
    \ for either uppercase or lowercase A).  See [RFC2234] for the full\n   description\
    \ of the notation.\n1.3. Structure of this document\n   This document is divided\
    \ into several sections.\n   This section, section 1, is a short introduction\
    \ to the document.\n   Section 2 lays out the general description of a message\
    \ and its\n   constituent parts.  This is an overview to help the reader understand\n\
    \   some of the general principles used in the later portions of this\n   document.\
    \  Any examples in this section MUST NOT be taken as\n   specification of the\
    \ formal syntax of any part of a message.\n   Section 3 specifies formal ABNF\
    \ rules for the structure of each part\n   of a message (the syntax) and describes\
    \ the relationship between\n   those parts and their meaning in the context of\
    \ a message (the\n   semantics).  That is, it describes the actual rules for the\
    \ structure\n   of each part of a message (the syntax) as well as a description\
    \ of\n   the parts and instructions on how they ought to be interpreted (the\n\
    \   semantics).  This includes analysis of the syntax and semantics of\n   subparts\
    \ of messages that have specific structure.  The syntax\n   included in section\
    \ 3 represents messages as they MUST be created.\n   There are also notes in section\
    \ 3 to indicate if any of the options\n   specified in the syntax SHOULD be used\
    \ over any of the others.\n   Both sections 2 and 3 describe messages that are\
    \ legal to generate\n   for purposes of this standard.\n   Section 4 of this document\
    \ specifies an \"obsolete\" syntax.  There are\n   references in section 3 to\
    \ these obsolete syntactic elements.  The\n   rules of the obsolete syntax are\
    \ elements that have appeared in\n   earlier revisions of this standard or have\
    \ previously been widely\n   used in Internet messages.  As such, these elements\
    \ MUST be\n   interpreted by parsers of messages in order to be conformant to\
    \ this\n   standard.  However, since items in this syntax have been determined\n\
    \   to be non-interoperable or to cause significant problems for\n   recipients\
    \ of messages, they MUST NOT be generated by creators of\n   conformant messages.\n\
    \   Section 5 details security considerations to take into account when\n   implementing\
    \ this standard.\n   Section 6 is a bibliography of references in this document.\n\
    \   Section 7 contains the editor's address.\n   Section 8 contains acknowledgements.\n\
    \   Appendix A lists examples of different sorts of messages.  These\n   examples\
    \ are not exhaustive of the types of messages that appear on\n   the Internet,\
    \ but give a broad overview of certain syntactic forms.\n   Appendix B lists the\
    \ differences between this standard and earlier\n   standards for Internet messages.\n\
    \   Appendix C has copyright and intellectual property notices.\n2. Lexical Analysis\
    \ of Messages\n2.1. General Description\n   At the most basic level, a message\
    \ is a series of characters.  A\n   message that is conformant with this standard\
    \ is comprised of\n   characters with values in the range 1 through 127 and interpreted\
    \ as\n   US-ASCII characters [ASCII].  For brevity, this document sometimes\n\
    \   refers to this range of characters as simply \"US-ASCII characters\".\n  \
    \ Note: This standard specifies that messages are made up of characters\n   in\
    \ the US-ASCII range of 1 through 127.  There are other documents,\n   specifically\
    \ the MIME document series [RFC2045, RFC2046, RFC2047,\n   RFC2048, RFC2049],\
    \ that extend this standard to allow for values\n   outside of that range.  Discussion\
    \ of those mechanisms is not within\n   the scope of this standard.\n   Messages\
    \ are divided into lines of characters.  A line is a series of\n   characters\
    \ that is delimited with the two characters carriage-return\n   and line-feed;\
    \ that is, the carriage return (CR) character (ASCII\n   value 13) followed immediately\
    \ by the line feed (LF) character (ASCII\n   value 10).  (The carriage-return/line-feed\
    \ pair is usually written in\n   this document as \"CRLF\".)\n   A message consists\
    \ of header fields (collectively called \"the header\n   of the message\") followed,\
    \ optionally, by a body.  The header is a\n   sequence of lines of characters\
    \ with special syntax as defined in\n   this standard. The body is simply a sequence\
    \ of characters that\n   follows the header and is separated from the header by\
    \ an empty line\n   (i.e., a line with nothing preceding the CRLF).\n2.1.1. Line\
    \ Length Limits\n   There are two limits that this standard places on the number\
    \ of\n   characters in a line. Each line of characters MUST be no more than\n\
    \   998 characters, and SHOULD be no more than 78 characters, excluding\n   the\
    \ CRLF.\n   The 998 character limit is due to limitations in many implementations\n\
    \   which send, receive, or store Internet Message Format messages that\n   simply\
    \ cannot handle more than 998 characters on a line. Receiving\n   implementations\
    \ would do well to handle an arbitrarily large number\n   of characters in a line\
    \ for robustness sake. However, there are so\n   many implementations which (in\
    \ compliance with the transport\n   requirements of [RFC2821]) do not accept messages\
    \ containing more\n   than 1000 character including the CR and LF per line, it\
    \ is important\n   for implementations not to create such messages.\n   The more\
    \ conservative 78 character recommendation is to accommodate\n   the many implementations\
    \ of user interfaces that display these\n   messages which may truncate, or disastrously\
    \ wrap, the display of\n   more than 78 characters per line, in spite of the fact\
    \ that such\n   implementations are non-conformant to the intent of this\n   specification\
    \ (and that of [RFC2821] if they actually cause\n   information to be lost). Again,\
    \ even though this limitation is put on\n   messages, it is encumbant upon implementations\
    \ which display messages\n   to handle an arbitrarily large number of characters\
    \ in a line\n   (certainly at least up to the 998 character limit) for the sake\
    \ of\n   robustness.\n2.2. Header Fields\n   Header fields are lines composed\
    \ of a field name, followed by a colon\n   (\":\"), followed by a field body,\
    \ and terminated by CRLF.  A field\n   name MUST be composed of printable US-ASCII\
    \ characters (i.e.,\n   characters that have values between 33 and 126, inclusive),\
    \ except\n   colon.  A field body may be composed of any US-ASCII characters,\n\
    \   except for CR and LF.  However, a field body may contain CRLF when\n   used\
    \ in header \"folding\" and  \"unfolding\" as described in section\n   2.2.3.\
    \  All field bodies MUST conform to the syntax described in\n   sections 3 and\
    \ 4 of this standard.\n2.2.1. Unstructured Header Field Bodies\n   Some field\
    \ bodies in this standard are defined simply as\n   \"unstructured\" (which is\
    \ specified below as any US-ASCII characters,\n   except for CR and LF) with no\
    \ further restrictions.  These are\n   referred to as unstructured field bodies.\
    \  Semantically, unstructured\n   field bodies are simply to be treated as a single\
    \ line of characters\n   with no further processing (except for header \"folding\"\
    \ and\n   \"unfolding\" as described in section 2.2.3).\n2.2.2. Structured Header\
    \ Field Bodies\n   Some field bodies in this standard have specific syntactical\n\
    \   structure more restrictive than the unstructured field bodies\n   described\
    \ above. These are referred to as \"structured\" field bodies.\n   Structured\
    \ field bodies are sequences of specific lexical tokens as\n   described in sections\
    \ 3 and 4 of this standard.  Many of these tokens\n   are allowed (according to\
    \ their syntax) to be introduced or end with\n   comments (as described in section\
    \ 3.2.3) as well as the space (SP,\n   ASCII value 32) and horizontal tab (HTAB,\
    \ ASCII value 9) characters\n   (together known as the white space characters,\
    \ WSP), and those WSP\n   characters are subject to header \"folding\" and \"\
    unfolding\" as\n   described in section 2.2.3.  Semantic analysis of structured\
    \ field\n   bodies is given along with their syntax.\n2.2.3. Long Header Fields\n\
    \   Each header field is logically a single line of characters comprising\n  \
    \ the field name, the colon, and the field body.  For convenience\n   however,\
    \ and to deal with the 998/78 character limitations per line,\n   the field body\
    \ portion of a header field can be split into a multiple\n   line representation;\
    \ this is called \"folding\".  The general rule is\n   that wherever this standard\
    \ allows for folding white space (not\n   simply WSP characters), a CRLF may be\
    \ inserted before any WSP.  For\n   example, the header field:\n           Subject:\
    \ This is a test\n   can be represented as:\n           Subject: This\n      \
    \      is a test\n   Note: Though structured field bodies are defined in such\
    \ a way that\n   folding can take place between many of the lexical tokens (and\
    \ even\n   within some of the lexical tokens), folding SHOULD be limited to\n\
    \   placing the CRLF at higher-level syntactic breaks.  For instance, if\n   a\
    \ field body is defined as comma-separated values, it is recommended\n   that\
    \ folding occur after the comma separating the structured items in\n   preference\
    \ to other places where the field could be folded, even if\n   it is allowed elsewhere.\n\
    \   The process of moving from this folded multiple-line representation\n   of\
    \ a header field to its single line representation is called\n   \"unfolding\"\
    . Unfolding is accomplished by simply removing any CRLF\n   that is immediately\
    \ followed by WSP.  Each header field should be\n   treated in its unfolded form\
    \ for further syntactic and semantic\n   evaluation.\n2.3. Body\n   The body of\
    \ a message is simply lines of US-ASCII characters.  The\n   only two limitations\
    \ on the body are as follows:\n   - CR and LF MUST only occur together as CRLF;\
    \ they MUST NOT appear\n     independently in the body.\n   - Lines of characters\
    \ in the body MUST be limited to 998 characters,\n     and SHOULD be limited to\
    \ 78 characters, excluding the CRLF.\n   Note: As was stated earlier, there are\
    \ other standards documents,\n   specifically the MIME documents [RFC2045, RFC2046,\
    \ RFC2048, RFC2049]\n   that extend this standard to allow for different sorts\
    \ of message\n   bodies.  Again, these mechanisms are beyond the scope of this\n\
    \   document.\n3. Syntax\n3.1. Introduction\n   The syntax as given in this section\
    \ defines the legal syntax of\n   Internet messages.  Messages that are conformant\
    \ to this standard\n   MUST conform to the syntax in this section.  If there are\
    \ options in\n   this section where one option SHOULD be generated, that is indicated\n\
    \   either in the prose or in a comment next to the syntax.\n   For the defined\
    \ expressions, a short description of the syntax and\n   use is given, followed\
    \ by the syntax in ABNF, followed by a semantic\n   analysis.  Primitive tokens\
    \ that are used but otherwise unspecified\n   come from [RFC2234].\n   In some\
    \ of the definitions, there will be nonterminals whose names\n   start with \"\
    obs-\".  These \"obs-\" elements refer to tokens defined in\n   the obsolete syntax\
    \ in section 4.  In all cases, these productions\n   are to be ignored for the\
    \ purposes of generating legal Internet\n   messages and MUST NOT be used as part\
    \ of such a message.  However,\n   when interpreting messages, these tokens MUST\
    \ be honored as part of\n   the legal syntax.  In this sense, section 3 defines\
    \ a grammar for\n   generation of messages, with \"obs-\" elements that are to\
    \ be ignored,\n   while section 4 adds grammar for interpretation of messages.\n\
    3.2. Lexical Tokens\n   The following rules are used to define an underlying lexical\n\
    \   analyzer, which feeds tokens to the higher-level parsers.  This\n   section\
    \ defines the tokens used in structured header field bodies.\n   Note: Readers\
    \ of this standard need to pay special attention to how\n   these lexical tokens\
    \ are used in both the lower-level and\n   higher-level syntax later in the document.\
    \  Particularly, the white\n   space tokens and the comment tokens defined in\
    \ section 3.2.3 get used\n   in the lower-level tokens defined here, and those\
    \ lower-level tokens\n   are in turn used as parts of the higher-level tokens\
    \ defined later.\n   Therefore, the white space and comments may be allowed in\
    \ the\n   higher-level tokens even though they may not explicitly appear in a\n\
    \   particular definition.\n3.2.1. Primitive Tokens\n   The following are primitive\
    \ tokens referred to elsewhere in this\n   standard, but not otherwise defined\
    \ in [RFC2234].  Some of them will\n   not appear anywhere else in the syntax,\
    \ but they are convenient to\n   refer to in other parts of this document.\n \
    \  Note: The \"specials\" below are just such an example.  Though the\n   specials\
    \ token does not appear anywhere else in this standard, it is\n   useful for implementers\
    \ who use tools that lexically analyze\n   messages.  Each of the characters in\
    \ specials can be used to indicate\n   a tokenization point in lexical analysis.\n\
    NO-WS-CTL       =       %d1-8 /         ; US-ASCII control characters\n      \
    \                  %d11 /          ;  that do not include the\n              \
    \          %d12 /          ;  carriage return, line feed,\n                  \
    \      %d14-31 /       ;  and white space characters\n                       \
    \ %d127\ntext            =       %d1-9 /         ; Characters excluding CR and\
    \ LF\n                        %d11 /\n                        %d12 /\n       \
    \                 %d14-127 /\n                        obs-text\nspecials     \
    \   =       \"(\" / \")\" /     ; Special characters used in\n               \
    \         \"<\" / \">\" /     ;  other parts of the syntax\n                 \
    \       \"[\" / \"]\" /\n                        \":\" / \";\" /\n           \
    \             \"@\" / \"\\\" /\n                        \",\" / \".\" /\n    \
    \                    DQUOTE\n   No special semantics are attached to these tokens.\
    \  They are simply\n   single characters.\n3.2.2. Quoted characters\n   Some characters\
    \ are reserved for special interpretation, such as\n   delimiting lexical tokens.\
    \  To permit use of these characters as\n   uninterpreted data, a quoting mechanism\
    \ is provided.\nquoted-pair     =       (\"\\\" text) / obs-qp\n   Where any quoted-pair\
    \ appears, it is to be interpreted as the text\n   character alone.  That is to\
    \ say, the \"\\\" character that appears as\n   part of a quoted-pair is semantically\
    \ \"invisible\".\n   Note: The \"\\\" character may appear in a message where\
    \ it is not part\n   of a quoted-pair.  A \"\\\" character that does not appear\
    \ in a\n   quoted-pair is not semantically invisible.  The only places in this\n\
    \   standard where quoted-pair currently appears are ccontent, qcontent,\n   dcontent,\
    \ no-fold-quote, and no-fold-literal.\n3.2.3. Folding white space and comments\n\
    \   White space characters, including white space used in folding\n   (described\
    \ in section 2.2.3), may appear between many elements in\n   header field bodies.\
    \  Also, strings of characters that are treated as\n   comments may be included\
    \ in structured field bodies as characters\n   enclosed in parentheses.  The following\
    \ defines the folding white\n   space (FWS) and comment constructs.\n   Strings\
    \ of characters enclosed in parentheses are considered comments\n   so long as\
    \ they do not appear within a \"quoted-string\", as defined in\n   section 3.2.5.\
    \  Comments may nest.\n   There are several places in this standard where comments\
    \ and FWS may\n   be freely inserted.  To accommodate that syntax, an additional\
    \ token\n   for \"CFWS\" is defined for places where comments and/or FWS can occur.\n\
    \   However, where CFWS occurs in this standard, it MUST NOT be inserted\n   in\
    \ such a way that any line of a folded header field is made up\n   entirely of\
    \ WSP characters and nothing else.\nFWS             =       ([*WSP CRLF] 1*WSP)\
    \ /   ; Folding white space\n                        obs-FWS\nctext          \
    \ =       NO-WS-CTL /     ; Non white space controls\n                       \
    \ %d33-39 /       ; The rest of the US-ASCII\n                        %d42-91\
    \ /       ;  characters not including \"(\",\n                        %d93-126\
    \        ;  \")\", or \"\\\"\nccontent        =       ctext / quoted-pair / comment\n\
    comment         =       \"(\" *([FWS] ccontent) [FWS] \")\"\nCFWS            =\
    \       *([FWS] comment) (([FWS] comment) / FWS)\n   Throughout this standard,\
    \ where FWS (the folding white space token)\n   appears, it indicates a place\
    \ where header folding, as discussed in\n   section 2.2.3, may take place.  Wherever\
    \ header folding appears in a\n   message (that is, a header field body containing\
    \ a CRLF followed by\n   any WSP), header unfolding (removal of the CRLF) is performed\
    \ before\n   any further lexical analysis is performed on that header field\n\
    \   according to this standard.  That is to say, any CRLF that appears in\n  \
    \ FWS is semantically \"invisible.\"\n   A comment is normally used in a structured\
    \ field body to provide some\n   human readable informational text.  Since a comment\
    \ is allowed to\n   contain FWS, folding is permitted within the comment.  Also\
    \ note that\n   since quoted-pair is allowed in a comment, the parentheses and\n\
    \   backslash characters may appear in a comment so long as they appear\n   as\
    \ a quoted-pair.  Semantically, the enclosing parentheses are not\n   part of\
    \ the comment; the comment is what is contained between the two\n   parentheses.\
    \  As stated earlier, the \"\\\" in any quoted-pair and the\n   CRLF in any FWS\
    \ that appears within the comment are semantically\n   \"invisible\" and therefore\
    \ not part of the comment either.\n   Runs of FWS, comment or CFWS that occur\
    \ between lexical tokens in a\n   structured field header are semantically interpreted\
    \ as a single\n   space character.\n3.2.4. Atom\n   Several productions in structured\
    \ header field bodies are simply\n   strings of certain basic characters.  Such\
    \ productions are called\n   atoms.\n   Some of the structured header field bodies\
    \ also allow the period\n   character (\".\", ASCII value 46) within runs of atext.\
    \  An additional\n   \"dot-atom\" token is defined for those purposes.\natext\
    \           =       ALPHA / DIGIT / ; Any character except controls,\n       \
    \                 \"!\" / \"#\" /     ;  SP, and specials.\n                 \
    \       \"$\" / \"%\" /     ;  Used for atoms\n                        \"&\" /\
    \ \"'\" /\n                        \"*\" / \"+\" /\n                        \"\
    -\" / \"/\" /\n                        \"=\" / \"?\" /\n                     \
    \   \"^\" / \"_\" /\n                        \"`\" / \"{\" /\n               \
    \         \"|\" / \"}\" /\n                        \"~\"\natom            =  \
    \     [CFWS] 1*atext [CFWS]\ndot-atom        =       [CFWS] dot-atom-text [CFWS]\n\
    dot-atom-text   =       1*atext *(\".\" 1*atext)\n   Both atom and dot-atom are\
    \ interpreted as a single unit, comprised of\n   the string of characters that\
    \ make it up.  Semantically, the optional\n   comments and FWS surrounding the\
    \ rest of the characters are not part\n   of the atom; the atom is only the run\
    \ of atext characters in an atom,\n   or the atext and \".\" characters in a dot-atom.\n\
    3.2.5. Quoted strings\n   Strings of characters that include characters other\
    \ than those\n   allowed in atoms may be represented in a quoted string format,\
    \ where\n   the characters are surrounded by quote (DQUOTE, ASCII value 34)\n\
    \   characters.\nqtext           =       NO-WS-CTL /     ; Non white space controls\n\
    \                        %d33 /          ; The rest of the US-ASCII\n        \
    \                %d35-91 /       ;  characters not including \"\\\"\n        \
    \                %d93-126        ;  or the quote character\nqcontent        =\
    \       qtext / quoted-pair\nquoted-string   =       [CFWS]\n                \
    \        DQUOTE *([FWS] qcontent) [FWS] DQUOTE\n                        [CFWS]\n\
    \   A quoted-string is treated as a unit.  That is, quoted-string is\n   identical\
    \ to atom, semantically.  Since a quoted-string is allowed to\n   contain FWS,\
    \ folding is permitted.  Also note that since quoted-pair\n   is allowed in a\
    \ quoted-string, the quote and backslash characters may\n   appear in a quoted-string\
    \ so long as they appear as a quoted-pair.\n   Semantically, neither the optional\
    \ CFWS outside of the quote\n   characters nor the quote characters themselves\
    \ are part of the\n   quoted-string; the quoted-string is what is contained between\
    \ the two\n   quote characters.  As stated earlier, the \"\\\" in any quoted-pair\
    \ and\n   the CRLF in any FWS/CFWS that appears within the quoted-string are\n\
    \   semantically \"invisible\" and therefore not part of the quoted-string\n \
    \  either.\n3.2.6. Miscellaneous tokens\n   Three additional tokens are defined,\
    \ word and phrase for combinations\n   of atoms and/or quoted-strings, and unstructured\
    \ for use in\n   unstructured header fields and in some places within structured\n\
    \   header fields.\nword            =       atom / quoted-string\nphrase     \
    \     =       1*word / obs-phrase\nutext           =       NO-WS-CTL /     ; Non\
    \ white space controls\n                        %d33-126 /      ; The rest of\
    \ US-ASCII\n                        obs-utext\nunstructured    =       *([FWS]\
    \ utext) [FWS]\n3.3. Date and Time Specification\n   Date and time occur in several\
    \ header fields.  This section specifies\n   the syntax for a full date and time\
    \ specification.  Though folding\n   white space is permitted throughout the date-time\
    \ specification, it\n   is RECOMMENDED that a single space be used in each place\
    \ that FWS\n   appears (whether it is required or optional); some older\n   implementations\
    \ may not interpret other occurrences of folding white\n   space correctly.\n\
    date-time       =       [ day-of-week \",\" ] date FWS time [CFWS]\nday-of-week\
    \     =       ([FWS] day-name) / obs-day-of-week\nday-name        =       \"Mon\"\
    \ / \"Tue\" / \"Wed\" / \"Thu\" /\n                        \"Fri\" / \"Sat\" /\
    \ \"Sun\"\ndate            =       day month year\nyear            =       4*DIGIT\
    \ / obs-year\nmonth           =       (FWS month-name FWS) / obs-month\nmonth-name\
    \      =       \"Jan\" / \"Feb\" / \"Mar\" / \"Apr\" /\n                     \
    \   \"May\" / \"Jun\" / \"Jul\" / \"Aug\" /\n                        \"Sep\" /\
    \ \"Oct\" / \"Nov\" / \"Dec\"\nday             =       ([FWS] 1*2DIGIT) / obs-day\n\
    time            =       time-of-day FWS zone\ntime-of-day     =       hour \"\
    :\" minute [ \":\" second ]\nhour            =       2DIGIT / obs-hour\nminute\
    \          =       2DIGIT / obs-minute\nsecond          =       2DIGIT / obs-second\n\
    zone            =       (( \"+\" / \"-\" ) 4DIGIT) / obs-zone\n   The day is the\
    \ numeric day of the month.  The year is any numeric\n   year 1900 or later.\n\
    \   The time-of-day specifies the number of hours, minutes, and\n   optionally\
    \ seconds since midnight of the date indicated.\n   The date and time-of-day SHOULD\
    \ express local time.\n   The zone specifies the offset from Coordinated Universal\
    \ Time (UTC,\n   formerly referred to as \"Greenwich Mean Time\") that the date\
    \ and\n   time-of-day represent.  The \"+\" or \"-\" indicates whether the\n \
    \  time-of-day is ahead of (i.e., east of) or behind (i.e., west of)\n   Universal\
    \ Time.  The first two digits indicate the number of hours\n   difference from\
    \ Universal Time, and the last two digits indicate the\n   number of minutes difference\
    \ from Universal Time.  (Hence, +hhmm\n   means +(hh * 60 + mm) minutes, and -hhmm\
    \ means -(hh * 60 + mm)\n   minutes).  The form \"+0000\" SHOULD be used to indicate\
    \ a time zone at\n   Universal Time.  Though \"-0000\" also indicates Universal\
    \ Time, it is\n   used to indicate that the time was generated on a system that\
    \ may be\n   in a local time zone other than Universal Time and therefore\n  \
    \ indicates that the date-time contains no information about the local\n   time\
    \ zone.\n   A date-time specification MUST be semantically valid.  That is, the\n\
    \   day-of-the-week (if included) MUST be the day implied by the date,\n   the\
    \ numeric day-of-month MUST be between 1 and the number of days\n   allowed for\
    \ the specified month (in the specified year), the\n   time-of-day MUST be in\
    \ the range 00:00:00 through 23:59:60 (the\n   number of seconds allowing for\
    \ a leap second; see [STD12]), and the\n   zone MUST be within the range -9959\
    \ through +9959.\n3.4. Address Specification\n   Addresses occur in several message\
    \ header fields to indicate senders\n   and recipients of messages.  An address\
    \ may either be an individual\n   mailbox, or a group of mailboxes.\naddress \
    \        =       mailbox / group\nmailbox         =       name-addr / addr-spec\n\
    name-addr       =       [display-name] angle-addr\nangle-addr      =       [CFWS]\
    \ \"<\" addr-spec \">\" [CFWS] / obs-angle-addr\ngroup           =       display-name\
    \ \":\" [mailbox-list / CFWS] \";\"\n                        [CFWS]\ndisplay-name\
    \    =       phrase\nmailbox-list    =       (mailbox *(\",\" mailbox)) / obs-mbox-list\n\
    address-list    =       (address *(\",\" address)) / obs-addr-list\n   A mailbox\
    \ receives mail.  It is a conceptual entity which does not\n   necessarily pertain\
    \ to file storage.  For example, some sites may\n   choose to print mail on a\
    \ printer and deliver the output to the\n   addressee's desk.  Normally, a mailbox\
    \ is comprised of two parts: (1)\n   an optional display name that indicates the\
    \ name of the recipient\n   (which could be a person or a system) that could be\
    \ displayed to the\n   user of a mail application, and (2) an addr-spec address\
    \ enclosed in\n   angle brackets (\"<\" and \">\").  There is also an alternate\
    \ simple form\n   of a mailbox where the addr-spec address appears alone, without\
    \ the\n   recipient's name or the angle brackets.  The Internet addr-spec\n  \
    \ address is described in section 3.4.1.\n   Note: Some legacy implementations\
    \ used the simple form where the\n   addr-spec appears without the angle brackets,\
    \ but included the name\n   of the recipient in parentheses as a comment following\
    \ the addr-spec.\n   Since the meaning of the information in a comment is unspecified,\n\
    \   implementations SHOULD use the full name-addr form of the mailbox,\n   instead\
    \ of the legacy form, to specify the display name associated\n   with a mailbox.\
    \  Also, because some legacy implementations interpret\n   the comment, comments\
    \ generally SHOULD NOT be used in address fields\n   to avoid confusing such implementations.\n\
    \   When it is desirable to treat several mailboxes as a single unit\n   (i.e.,\
    \ in a distribution list), the group construct can be used.  The\n   group construct\
    \ allows the sender to indicate a named group of\n   recipients. This is done\
    \ by giving a display name for the group,\n   followed by a colon, followed by\
    \ a comma separated list of any number\n   of mailboxes (including zero and one),\
    \ and ending with a semicolon.\n   Because the list of mailboxes can be empty,\
    \ using the group construct\n   is also a simple way to communicate to recipients\
    \ that the message\n   was sent to one or more named sets of recipients, without\
    \ actually\n   providing the individual mailbox address for each of those\n  \
    \ recipients.\n3.4.1. Addr-spec specification\n   An addr-spec is a specific Internet\
    \ identifier that contains a\n   locally interpreted string followed by the at-sign\
    \ character (\"@\",\n   ASCII value 64) followed by an Internet domain.  The locally\n\
    \   interpreted string is either a quoted-string or a dot-atom.  If the\n   string\
    \ can be represented as a dot-atom (that is, it contains no\n   characters other\
    \ than atext characters or \".\" surrounded by atext\n   characters), then the\
    \ dot-atom form SHOULD be used and the\n   quoted-string form SHOULD NOT be used.\
    \ Comments and folding white\n   space SHOULD NOT be used around the \"@\" in\
    \ the addr-spec.\naddr-spec       =       local-part \"@\" domain\nlocal-part\
    \      =       dot-atom / quoted-string / obs-local-part\ndomain          =  \
    \     dot-atom / domain-literal / obs-domain\ndomain-literal  =       [CFWS] \"\
    [\" *([FWS] dcontent) [FWS] \"]\" [CFWS]\ndcontent        =       dtext / quoted-pair\n\
    dtext           =       NO-WS-CTL /     ; Non white space controls\n         \
    \               %d33-90 /       ; The rest of the US-ASCII\n                 \
    \       %d94-126        ;  characters not including \"[\",\n                 \
    \                       ;  \"]\", or \"\\\"\n   The domain portion identifies\
    \ the point to which the mail is\n   delivered. In the dot-atom form, this is\
    \ interpreted as an Internet\n   domain name (either a host name or a mail exchanger\
    \ name) as\n   described in [STD3, STD13, STD14].  In the domain-literal form,\
    \ the\n   domain is interpreted as the literal Internet address of the\n   particular\
    \ host.  In both cases, how addressing is used and how\n   messages are transported\
    \ to a particular host is covered in the mail\n   transport document [RFC2821].\
    \  These mechanisms are outside of the\n   scope of this document.\n   The local-part\
    \ portion is a domain dependent string.  In addresses,\n   it is simply interpreted\
    \ on the particular host as a name of a\n   particular mailbox.\n3.5 Overall message\
    \ syntax\n   A message consists of header fields, optionally followed by a message\n\
    \   body.  Lines in a message MUST be a maximum of 998 characters\n   excluding\
    \ the CRLF, but it is RECOMMENDED that lines be limited to 78\n   characters excluding\
    \ the CRLF.  (See section 2.1.1 for explanation.)\n   In a message body, though\
    \ all of the characters listed in the text\n   rule MAY be used, the use of US-ASCII\
    \ control characters (values 1\n   through 8, 11, 12, and 14 through 31) is discouraged\
    \ since their\n   interpretation by receivers for display is not guaranteed.\n\
    message         =       (fields / obs-fields)\n                        [CRLF body]\n\
    body            =       *(*998text CRLF) *998text\n   The header fields carry\
    \ most of the semantic information and are\n   defined in section 3.6.  The body\
    \ is simply a series of lines of text\n   which are uninterpreted for the purposes\
    \ of this standard.\n3.6. Field definitions\n   The header fields of a message\
    \ are defined here.  All header fields\n   have the same general syntactic structure:\
    \ A field name, followed by\n   a colon, followed by the field body.  The specific\
    \ syntax for each\n   header field is defined in the subsequent sections.\n  \
    \ Note: In the ABNF syntax for each field in subsequent sections, each\n   field\
    \ name is followed by the required colon.  However, for brevity\n   sometimes\
    \ the colon is not referred to in the textual description of\n   the syntax. \
    \ It is, nonetheless, required.\n   It is important to note that the header fields\
    \ are not guaranteed to\n   be in a particular order.  They may appear in any\
    \ order, and they\n   have been known to be reordered occasionally when transported\
    \ over\n   the Internet.  However, for the purposes of this standard, header\n\
    \   fields SHOULD NOT be reordered when a message is transported or\n   transformed.\
    \  More importantly, the trace header fields and resent\n   header fields MUST\
    \ NOT be reordered, and SHOULD be kept in blocks\n   prepended to the message.\
    \  See sections 3.6.6 and 3.6.7 for more\n   information.\n   The only required\
    \ header fields are the origination date field and\n   the originator address\
    \ field(s).  All other header fields are\n   syntactically optional.  More information\
    \ is contained in the table\n   following this definition.\nfields          =\
    \       *(trace\n                          *(resent-date /\n                 \
    \          resent-from /\n                           resent-sender /\n       \
    \                    resent-to /\n                           resent-cc /\n   \
    \                        resent-bcc /\n                           resent-msg-id))\n\
    \                        *(orig-date /\n                        from /\n     \
    \                   sender /\n                        reply-to /\n           \
    \             to /\n                        cc /\n                        bcc\
    \ /\n                        message-id /\n                        in-reply-to\
    \ /\n                        references /\n                        subject /\n\
    \                        comments /\n                        keywords /\n    \
    \                    optional-field)\n   The following table indicates limits\
    \ on the number of times each\n   field may occur in a message header as well\
    \ as any special\n   limitations on the use of those fields.  An asterisk next\
    \ to a value\n   in the minimum or maximum column indicates that a special restriction\n\
    \   appears in the Notes column.\nField           Min number      Max number \
    \     Notes\ntrace           0               unlimited       Block prepended -\
    \ see\n                                                3.6.7\nresent-date    \
    \ 0*              unlimited*      One per block, required\n                  \
    \                              if other resent fields\n                      \
    \                          present - see 3.6.6\nresent-from     0            \
    \   unlimited*      One per block - see\n                                    \
    \            3.6.6\nresent-sender   0*              unlimited*      One per block,\
    \ MUST\n                                                occur with multi-address\n\
    \                                                resent-from - see 3.6.6\nresent-to\
    \       0               unlimited*      One per block - see\n                \
    \                                3.6.6\nresent-cc       0               unlimited*\
    \      One per block - see\n                                                3.6.6\n\
    resent-bcc      0               unlimited*      One per block - see\n        \
    \                                        3.6.6\nresent-msg-id   0            \
    \   unlimited*      One per block - see\n                                    \
    \            3.6.6\norig-date       1               1\nfrom            1     \
    \          1               See sender and 3.6.2\nsender          0*          \
    \    1               MUST occur with multi-\n                                \
    \                address from - see 3.6.2\nreply-to        0               1\n\
    to              0               1\ncc              0               1\nbcc    \
    \         0               1\nmessage-id      0*              1               SHOULD\
    \ be present - see\n                                                3.6.4\nin-reply-to\
    \     0*              1               SHOULD occur in some\n                 \
    \                               replies - see 3.6.4\nreferences      0*      \
    \        1               SHOULD occur in some\n                              \
    \                  replies - see 3.6.4\nsubject         0               1\ncomments\
    \        0               unlimited\nkeywords        0               unlimited\n\
    optional-field  0               unlimited\n   The exact interpretation of each\
    \ field is described in subsequent\n   sections.\n3.6.1. The origination date\
    \ field\n   The origination date field consists of the field name \"Date\" followed\n\
    \   by a date-time specification.\norig-date       =       \"Date:\" date-time\
    \ CRLF\n   The origination date specifies the date and time at which the creator\n\
    \   of the message indicated that the message was complete and ready to\n   enter\
    \ the mail delivery system.  For instance, this might be the time\n   that a user\
    \ pushes the \"send\" or \"submit\" button in an application\n   program.  In\
    \ any case, it is specifically not intended to convey the\n   time that the message\
    \ is actually transported, but rather the time at\n   which the human or other\
    \ creator of the message has put the message\n   into its final form, ready for\
    \ transport.  (For example, a portable\n   computer user who is not connected\
    \ to a network might queue a message\n   for delivery.  The origination date is\
    \ intended to contain the date\n   and time that the user queued the message,\
    \ not the time when the user\n   connected to the network to send the message.)\n\
    3.6.2. Originator fields\n   The originator fields of a message consist of the\
    \ from field, the\n   sender field (when applicable), and optionally the reply-to\
    \ field.\n   The from field consists of the field name \"From\" and a\n   comma-separated\
    \ list of one or more mailbox specifications.  If the\n   from field contains\
    \ more than one mailbox specification in the\n   mailbox-list, then the sender\
    \ field, containing the field name\n   \"Sender\" and a single mailbox specification,\
    \ MUST appear in the\n   message.  In either case, an optional reply-to field\
    \ MAY also be\n   included, which contains the field name \"Reply-To\" and a\n\
    \   comma-separated list of one or more addresses.\nfrom            =       \"\
    From:\" mailbox-list CRLF\nsender          =       \"Sender:\" mailbox CRLF\n\
    reply-to        =       \"Reply-To:\" address-list CRLF\n   The originator fields\
    \ indicate the mailbox(es) of the source of the\n   message.  The \"From:\" field\
    \ specifies the author(s) of the message,\n   that is, the mailbox(es) of the\
    \ person(s) or system(s) responsible\n   for the writing of the message.  The\
    \ \"Sender:\" field specifies the\n   mailbox of the agent responsible for the\
    \ actual transmission of the\n   message.  For example, if a secretary were to\
    \ send a message for\n   another person, the mailbox of the secretary would appear\
    \ in the\n   \"Sender:\" field and the mailbox of the actual author would appear\
    \ in\n   the \"From:\" field.  If the originator of the message can be indicated\n\
    \   by a single mailbox and the author and transmitter are identical, the\n  \
    \ \"Sender:\" field SHOULD NOT be used.  Otherwise, both fields SHOULD\n   appear.\n\
    \   The originator fields also provide the information required when\n   replying\
    \ to a message.  When the \"Reply-To:\" field is present, it\n   indicates the\
    \ mailbox(es) to which the author of the message suggests\n   that replies be\
    \ sent.  In the absence of the \"Reply-To:\" field,\n   replies SHOULD by default\
    \ be sent to the mailbox(es) specified in the\n   \"From:\" field unless otherwise\
    \ specified by the person composing the\n   reply.\n   In all cases, the \"From:\"\
    \ field SHOULD NOT contain any mailbox that\n   does not belong to the author(s)\
    \ of the message.  See also section\n   3.6.3 for more information on forming\
    \ the destination addresses for a\n   reply.\n3.6.3. Destination address fields\n\
    \   The destination fields of a message consist of three possible fields,\n  \
    \ each of the same form: The field name, which is either \"To\", \"Cc\", or\n\
    \   \"Bcc\", followed by a comma-separated list of one or more addresses\n   (either\
    \ mailbox or group syntax).\nto              =       \"To:\" address-list CRLF\n\
    cc              =       \"Cc:\" address-list CRLF\nbcc             =       \"\
    Bcc:\" (address-list / [CFWS]) CRLF\n   The destination fields specify the recipients\
    \ of the message.  Each\n   destination field may have one or more addresses,\
    \ and each of the\n   addresses indicate the intended recipients of the message.\
    \  The only\n   difference between the three fields is how each is used.\n   The\
    \ \"To:\" field contains the address(es) of the primary recipient(s)\n   of the\
    \ message.\n   The \"Cc:\" field (where the \"Cc\" means \"Carbon Copy\" in the\
    \ sense of\n   making a copy on a typewriter using carbon paper) contains the\n\
    \   addresses of others who are to receive the message, though the\n   content\
    \ of the message may not be directed at them.\n   The \"Bcc:\" field (where the\
    \ \"Bcc\" means \"Blind Carbon Copy\") contains\n   addresses of recipients of\
    \ the message whose addresses are not to be\n   revealed to other recipients of\
    \ the message.  There are three ways in\n   which the \"Bcc:\" field is used.\
    \  In the first case, when a message\n   containing a \"Bcc:\" field is prepared\
    \ to be sent, the \"Bcc:\" line is\n   removed even though all of the recipients\
    \ (including those specified\n   in the \"Bcc:\" field) are sent a copy of the\
    \ message.  In the second\n   case, recipients specified in the \"To:\" and \"\
    Cc:\" lines each are sent\n   a copy of the message with the \"Bcc:\" line removed\
    \ as above, but the\n   recipients on the \"Bcc:\" line get a separate copy of\
    \ the message\n   containing a \"Bcc:\" line.  (When there are multiple recipient\n\
    \   addresses in the \"Bcc:\" field, some implementations actually send a\n  \
    \ separate copy of the message to each recipient with a \"Bcc:\"\n   containing\
    \ only the address of that particular recipient.) Finally,\n   since a \"Bcc:\"\
    \ field may contain no addresses, a \"Bcc:\" field can be\n   sent without any\
    \ addresses indicating to the recipients that blind\n   copies were sent to someone.\
    \  Which method to use with \"Bcc:\" fields\n   is implementation dependent, but\
    \ refer to the \"Security\n   Considerations\" section of this document for a\
    \ discussion of each.\n   When a message is a reply to another message, the mailboxes\
    \ of the\n   authors of the original message (the mailboxes in the \"From:\" field)\n\
    \   or mailboxes specified in the \"Reply-To:\" field (if it exists) MAY\n   appear\
    \ in the \"To:\" field of the reply since these would normally be\n   the primary\
    \ recipients of the reply.  If a reply is sent to a message\n   that has destination\
    \ fields, it is often desirable to send a copy of\n   the reply to all of the\
    \ recipients of the message, in addition to the\n   author.  When such a reply\
    \ is formed, addresses in the \"To:\" and\n   \"Cc:\" fields of the original message\
    \ MAY appear in the \"Cc:\" field of\n   the reply, since these are normally secondary\
    \ recipients of the\n   reply.  If a \"Bcc:\" field is present in the original\
    \ message,\n   addresses in that field MAY appear in the \"Bcc:\" field of the\
    \ reply,\n   but SHOULD NOT appear in the \"To:\" or \"Cc:\" fields.\n   Note:\
    \ Some mail applications have automatic reply commands that\n   include the destination\
    \ addresses of the original message in the\n   destination addresses of the reply.\
    \  How those reply commands behave\n   is implementation dependent and is beyond\
    \ the scope of this document.\n   In particular, whether or not to include the\
    \ original destination\n   addresses when the original message had a \"Reply-To:\"\
    \ field is not\n   addressed here.\n3.6.4. Identification fields\n   Though optional,\
    \ every message SHOULD have a \"Message-ID:\" field.\n   Furthermore, reply messages\
    \ SHOULD have \"In-Reply-To:\" and\n   \"References:\" fields as appropriate,\
    \ as described below.\n   The \"Message-ID:\" field contains a single unique message\
    \ identifier.\n   The \"References:\" and \"In-Reply-To:\" field each contain\
    \ one or more\n   unique message identifiers, optionally separated by CFWS.\n\
    \   The message identifier (msg-id) is similar in syntax to an angle-addr\n  \
    \ construct without the internal CFWS.\nmessage-id      =       \"Message-ID:\"\
    \ msg-id CRLF\nin-reply-to     =       \"In-Reply-To:\" 1*msg-id CRLF\nreferences\
    \      =       \"References:\" 1*msg-id CRLF\nmsg-id          =       [CFWS] \"\
    <\" id-left \"@\" id-right \">\" [CFWS]\nid-left         =       dot-atom-text\
    \ / no-fold-quote / obs-id-left\nid-right        =       dot-atom-text / no-fold-literal\
    \ / obs-id-right\nno-fold-quote   =       DQUOTE *(qtext / quoted-pair) DQUOTE\n\
    no-fold-literal =       \"[\" *(dtext / quoted-pair) \"]\"\n   The \"Message-ID:\"\
    \ field provides a unique message identifier that\n   refers to a particular version\
    \ of a particular message.  The\n   uniqueness of the message identifier is guaranteed\
    \ by the host that\n   generates it (see below).  This message identifier is intended\
    \ to be\n   machine readable and not necessarily meaningful to humans.  A message\n\
    \   identifier pertains to exactly one instantiation of a particular\n   message;\
    \ subsequent revisions to the message each receive new message\n   identifiers.\n\
    \   Note: There are many instances when messages are \"changed\", but those\n\
    \   changes do not constitute a new instantiation of that message, and\n   therefore\
    \ the message would not get a new message identifier.  For\n   example, when messages\
    \ are introduced into the transport system, they\n   are often prepended with\
    \ additional header fields such as trace\n   fields (described in section 3.6.7)\
    \ and resent fields (described in\n   section 3.6.6).  The addition of such header\
    \ fields does not change\n   the identity of the message and therefore the original\
    \ \"Message-ID:\"\n   field is retained.  In all cases, it is the meaning that\
    \ the sender\n   of the message wishes to convey (i.e., whether this is the same\n\
    \   message or a different message) that determines whether or not the\n   \"\
    Message-ID:\" field changes, not any particular syntactic difference\n   that\
    \ appears (or does not appear) in the message.\n   The \"In-Reply-To:\" and \"\
    References:\" fields are used when creating a\n   reply to a message.  They hold\
    \ the message identifier of the original\n   message and the message identifiers\
    \ of other messages (for example,\n   in the case of a reply to a message which\
    \ was itself a reply).  The\n   \"In-Reply-To:\" field may be used to identify\
    \ the message (or\n   messages) to which the new message is a reply, while the\n\
    \   \"References:\" field may be used to identify a \"thread\" of\n   conversation.\n\
    \   When creating a reply to a message, the \"In-Reply-To:\" and\n   \"References:\"\
    \ fields of the resultant message are constructed as\n   follows:\n   The \"In-Reply-To:\"\
    \ field will contain the contents of the \"Message-\n   ID:\" field of the message\
    \ to which this one is a reply (the \"parent\n   message\").  If there is more\
    \ than one parent message, then the \"In-\n   Reply-To:\" field will contain the\
    \ contents of all of the parents'\n   \"Message-ID:\" fields.  If there is no\
    \ \"Message-ID:\" field in any of\n   the parent messages, then the new message\
    \ will have no \"In-Reply-To:\"\n   field.\n   The \"References:\" field will\
    \ contain the contents of the parent's\n   \"References:\" field (if any) followed\
    \ by the contents of the parent's\n   \"Message-ID:\" field (if any).  If the\
    \ parent message does not contain\n   a \"References:\" field but does have an\
    \ \"In-Reply-To:\" field\n   containing a single message identifier, then the\
    \ \"References:\" field\n   will contain the contents of the parent's \"In-Reply-To:\"\
    \ field\n   followed by the contents of the parent's \"Message-ID:\" field (if\n\
    \   any).  If the parent has none of the \"References:\", \"In-Reply-To:\",\n\
    \   or \"Message-ID:\" fields, then the new message will have no\n   \"References:\"\
    \ field.\n   Note: Some implementations parse the \"References:\" field to display\n\
    \   the \"thread of the discussion\".  These implementations assume that\n   each\
    \ new message is a reply to a single parent and hence that they\n   can walk backwards\
    \ through the \"References:\" field to find the parent\n   of each message listed\
    \ there.  Therefore, trying to form a\n   \"References:\" field for a reply that\
    \ has multiple parents is\n   discouraged and how to do so is not defined in this\
    \ document.\n   The message identifier (msg-id) itself MUST be a globally unique\n\
    \   identifier for a message.  The generator of the message identifier\n   MUST\
    \ guarantee that the msg-id is unique.  There are several\n   algorithms that\
    \ can be used to accomplish this.  Since the msg-id has\n   a similar syntax to\
    \ angle-addr (identical except that comments and\n   folding white space are not\
    \ allowed), a good method is to put the\n   domain name (or a domain literal IP\
    \ address) of the host on which the\n   message identifier was created on the\
    \ right hand side of the \"@\", and\n   put a combination of the current absolute\
    \ date and time along with\n   some other currently unique (perhaps sequential)\
    \ identifier available\n   on the system (for example, a process id number) on\
    \ the left hand\n   side.  Using a date on the left hand side and a domain name\
    \ or domain\n   literal on the right hand side makes it possible to guarantee\n\
    \   uniqueness since no two hosts use the same domain name or IP address\n   at\
    \ the same time.  Though other algorithms will work, it is\n   RECOMMENDED that\
    \ the right hand side contain some domain identifier\n   (either of the host itself\
    \ or otherwise) such that the generator of\n   the message identifier can guarantee\
    \ the uniqueness of the left hand\n   side within the scope of that domain.\n\
    \   Semantically, the angle bracket characters are not part of the\n   msg-id;\
    \ the msg-id is what is contained between the two angle bracket\n   characters.\n\
    3.6.5. Informational fields\n   The informational fields are all optional.  The\
    \ \"Keywords:\" field\n   contains a comma-separated list of one or more words\
    \ or\n   quoted-strings. The \"Subject:\" and \"Comments:\" fields are\n   unstructured\
    \ fields as defined in section 2.2.1, and therefore may\n   contain text or folding\
    \ white space.\nsubject         =       \"Subject:\" unstructured CRLF\ncomments\
    \        =       \"Comments:\" unstructured CRLF\nkeywords        =       \"Keywords:\"\
    \ phrase *(\",\" phrase) CRLF\n   These three fields are intended to have only\
    \ human-readable content\n   with information about the message.  The \"Subject:\"\
    \ field is the most\n   common and contains a short string identifying the topic\
    \ of the\n   message.  When used in a reply, the field body MAY start with the\n\
    \   string \"Re: \" (from the Latin \"res\", in the matter of) followed by\n \
    \  the contents of the \"Subject:\" field body of the original message.\n   If\
    \ this is done, only one instance of the literal string \"Re: \" ought\n   to\
    \ be used since use of other strings or more than one instance can\n   lead to\
    \ undesirable consequences.  The \"Comments:\" field contains any\n   additional\
    \ comments on the text of the body of the message.  The\n   \"Keywords:\" field\
    \ contains a comma-separated list of important words\n   and phrases that might\
    \ be useful for the recipient.\n3.6.6. Resent fields\n   Resent fields SHOULD\
    \ be added to any message that is reintroduced by\n   a user into the transport\
    \ system.  A separate set of resent fields\n   SHOULD be added each time this\
    \ is done.  All of the resent fields\n   corresponding to a particular resending\
    \ of the message SHOULD be\n   together.  Each new set of resent fields is prepended\
    \ to the message;\n   that is, the most recent set of resent fields appear earlier\
    \ in the\n   message.  No other fields in the message are changed when resent\n\
    \   fields are added.\n   Each of the resent fields corresponds to a particular\
    \ field elsewhere\n   in the syntax.  For instance, the \"Resent-Date:\" field\
    \ corresponds to\n   the \"Date:\" field and the \"Resent-To:\" field corresponds\
    \ to the \"To:\"\n   field.  In each case, the syntax for the field body is identical\
    \ to\n   the syntax given previously for the corresponding field.\n   When resent\
    \ fields are used, the \"Resent-From:\" and \"Resent-Date:\"\n   fields MUST be\
    \ sent.  The \"Resent-Message-ID:\" field SHOULD be sent.\n   \"Resent-Sender:\"\
    \ SHOULD NOT be used if \"Resent-Sender:\" would be\n   identical to \"Resent-From:\"\
    .\nresent-date     =       \"Resent-Date:\" date-time CRLF\nresent-from     =\
    \       \"Resent-From:\" mailbox-list CRLF\nresent-sender   =       \"Resent-Sender:\"\
    \ mailbox CRLF\nresent-to       =       \"Resent-To:\" address-list CRLF\nresent-cc\
    \       =       \"Resent-Cc:\" address-list CRLF\nresent-bcc      =       \"Resent-Bcc:\"\
    \ (address-list / [CFWS]) CRLF\nresent-msg-id   =       \"Resent-Message-ID:\"\
    \ msg-id CRLF\n   Resent fields are used to identify a message as having been\n\
    \   reintroduced into the transport system by a user.  The purpose of\n   using\
    \ resent fields is to have the message appear to the final\n   recipient as if\
    \ it were sent directly by the original sender, with\n   all of the original fields\
    \ remaining the same.  Each set of resent\n   fields correspond to a particular\
    \ resending event.  That is, if a\n   message is resent multiple times, each set\
    \ of resent fields gives\n   identifying information for each individual time.\
    \  Resent fields are\n   strictly informational.  They MUST NOT be used in the\
    \ normal\n   processing of replies or other such automatic actions on messages.\n\
    \   Note: Reintroducing a message into the transport system and using\n   resent\
    \ fields is a different operation from \"forwarding\".\n   \"Forwarding\" has\
    \ two meanings: One sense of forwarding is that a mail\n   reading program can\
    \ be told by a user to forward a copy of a message\n   to another person, making\
    \ the forwarded message the body of the new\n   message.  A forwarded message\
    \ in this sense does not appear to have\n   come from the original sender, but\
    \ is an entirely new message from\n   the forwarder of the message.  On the other\
    \ hand, forwarding is also\n   used to mean when a mail transport program gets\
    \ a message and\n   forwards it on to a different destination for final delivery.\
    \  Resent\n   header fields are not intended for use with either type of\n   forwarding.\n\
    \   The resent originator fields indicate the mailbox of the person(s) or\n  \
    \ system(s) that resent the message.  As with the regular originator\n   fields,\
    \ there are two forms: a simple \"Resent-From:\" form which\n   contains the mailbox\
    \ of the individual doing the resending, and the\n   more complex form, when one\
    \ individual (identified in the\n   \"Resent-Sender:\" field) resends a message\
    \ on behalf of one or more\n   others (identified in the \"Resent-From:\" field).\n\
    \   Note: When replying to a resent message, replies behave just as they\n   would\
    \ with any other message, using the original \"From:\",\n   \"Reply-To:\", \"\
    Message-ID:\", and other fields.  The resent fields are\n   only informational\
    \ and MUST NOT be used in the normal processing of\n   replies.\n   The \"Resent-Date:\"\
    \ indicates the date and time at which the resent\n   message is dispatched by\
    \ the resender of the message.  Like the\n   \"Date:\" field, it is not the date\
    \ and time that the message was\n   actually transported.\n   The \"Resent-To:\"\
    , \"Resent-Cc:\", and \"Resent-Bcc:\" fields function\n   identically to the \"\
    To:\", \"Cc:\", and \"Bcc:\" fields respectively,\n   except that they indicate\
    \ the recipients of the resent message, not\n   the recipients of the original\
    \ message.\n   The \"Resent-Message-ID:\" field provides a unique identifier for\
    \ the\n   resent message.\n3.6.7. Trace fields\n   The trace fields are a group\
    \ of header fields consisting of an\n   optional \"Return-Path:\" field, and one\
    \ or more \"Received:\" fields.\n   The \"Return-Path:\" header field contains\
    \ a pair of angle brackets\n   that enclose an optional addr-spec.  The \"Received:\"\
    \ field contains a\n   (possibly empty) list of name/value pairs followed by a\
    \ semicolon and\n   a date-time specification.  The first item of the name/value\
    \ pair is\n   defined by item-name, and the second item is either an addr-spec,\
    \ an\n   atom, a domain, or a msg-id.  Further restrictions may be applied to\n\
    \   the syntax of the trace fields by standards that provide for their\n   use,\
    \ such as [RFC2821].\ntrace           =       [return]\n                     \
    \   1*received\nreturn          =       \"Return-Path:\" path CRLF\npath     \
    \       =       ([CFWS] \"<\" ([CFWS] / addr-spec) \">\" [CFWS]) /\n         \
    \               obs-path\nreceived        =       \"Received:\" name-val-list\
    \ \";\" date-time CRLF\nname-val-list   =       [CFWS] [name-val-pair *(CFWS name-val-pair)]\n\
    name-val-pair   =       item-name CFWS item-value\nitem-name       =       ALPHA\
    \ *([\"-\"] (ALPHA / DIGIT))\nitem-value      =       1*angle-addr / addr-spec\
    \ /\n                         atom / domain / msg-id\n   A full discussion of\
    \ the Internet mail use of trace fields is\n   contained in [RFC2821].  For the\
    \ purposes of this standard, the trace\n   fields are strictly informational,\
    \ and any formal interpretation of\n   them is outside of the scope of this document.\n\
    3.6.8. Optional fields\n   Fields may appear in messages that are otherwise unspecified\
    \ in this\n   standard.  They MUST conform to the syntax of an optional-field.\n\
    \   This is a field name, made up of the printable US-ASCII characters\n   except\
    \ SP and colon, followed by a colon, followed by any text which\n   conforms to\
    \ unstructured.\n   The field names of any optional-field MUST NOT be identical\
    \ to any\n   field name specified elsewhere in this standard.\noptional-field\
    \  =       field-name \":\" unstructured CRLF\nfield-name      =       1*ftext\n\
    ftext           =       %d33-57 /               ; Any character except\n     \
    \                   %d59-126                ;  controls, SP, and\n           \
    \                                     ;  \":\".\n   For the purposes of this standard,\
    \ any optional field is\n   uninterpreted.\n4. Obsolete Syntax\n   Earlier versions\
    \ of this standard allowed for different (usually more\n   liberal) syntax than\
    \ is allowed in this version.  Also, there have\n   been syntactic elements used\
    \ in messages on the Internet whose\n   interpretation have never been documented.\
    \  Though some of these\n   syntactic forms MUST NOT be generated according to\
    \ the grammar in\n   section 3, they MUST be accepted and parsed by a conformant\
    \ receiver.\n   This section documents many of these syntactic elements.  Taking\
    \ the\n   grammar in section 3 and adding the definitions presented in this\n\
    \   section will result in the grammar to use for interpretation of\n   messages.\n\
    \   Note: This section identifies syntactic forms that any implementation\n  \
    \ MUST reasonably interpret.  However, there are certainly Internet\n   messages\
    \ which do not conform to even the additional syntax given in\n   this section.\
    \  The fact that a particular form does not appear in any\n   section of this\
    \ document is not justification for computer programs\n   to crash or for malformed\
    \ data to be irretrievably lost by any\n   implementation.  To repeat an example,\
    \ though this document requires\n   lines in messages to be no longer than 998\
    \ characters, silently\n   discarding the 999th and subsequent characters in a\
    \ line without\n   warning would still be bad behavior for an implementation.\
    \  It is up\n   to the implementation to deal with messages robustly.\n   One\
    \ important difference between the obsolete (interpreting) and the\n   current\
    \ (generating) syntax is that in structured header field bodies\n   (i.e., between\
    \ the colon and the CRLF of any structured header\n   field), white space characters,\
    \ including folding white space, and\n   comments can be freely inserted between\
    \ any syntactic tokens.  This\n   allows many complex forms that have proven difficult\
    \ for some\n   implementations to parse.\n   Another key difference between the\
    \ obsolete and the current syntax is\n   that the rule in section 3.2.3 regarding\
    \ lines composed entirely of\n   white space in comments and folding white space\
    \ does not apply.  See\n   the discussion of folding white space in section 4.2\
    \ below.\n   Finally, certain characters that were formerly allowed in messages\n\
    \   appear in this section.  The NUL character (ASCII value 0) was once\n   allowed,\
    \ but is no longer for compatibility reasons.  CR and LF were\n   allowed to appear\
    \ in messages other than as CRLF; this use is also\n   shown here.\n   Other differences\
    \ in syntax and semantics are noted in the following\n   sections.\n4.1. Miscellaneous\
    \ obsolete tokens\n   These syntactic elements are used elsewhere in the obsolete\
    \ syntax or\n   in the main syntax.  The obs-char and obs-qp elements each add\
    \ ASCII\n   value 0. Bare CR and bare LF are added to obs-text and obs-utext.\n\
    \   The period character is added to obs-phrase. The obs-phrase-list\n   provides\
    \ for \"empty\" elements in a comma-separated list of phrases.\n   Note: The \"\
    period\" (or \"full stop\") character (\".\") in obs-phrase is\n   not a form\
    \ that was allowed in earlier versions of this or any other\n   standard.  Period\
    \ (nor any other character from specials) was not\n   allowed in phrase because\
    \ it introduced a parsing difficulty\n   distinguishing between phrases and portions\
    \ of an addr-spec (see\n   section 4.4).  It appears here because the period character\
    \ is\n   currently used in many messages in the display-name portion of\n   addresses,\
    \ especially for initials in names, and therefore must be\n   interpreted properly.\
    \  In the future, period may appear in the\n   regular syntax of phrase.\nobs-qp\
    \          =       \"\\\" (%d0-127)\nobs-text        =       *LF *CR *(obs-char\
    \ *LF *CR)\nobs-char        =       %d0-9 / %d11 /          ; %d0-127 except CR\
    \ and\n                        %d12 / %d14-127         ;  LF\nobs-utext      \
    \ =       obs-text\nobs-phrase      =       word *(word / \".\" / CFWS)\nobs-phrase-list\
    \ =       phrase / 1*([phrase] [CFWS] \",\" [CFWS]) [phrase]\n   Bare CR and bare\
    \ LF appear in messages with two different meanings.\n   In many cases, bare CR\
    \ or bare LF are used improperly instead of CRLF\n   to indicate line separators.\
    \  In other cases, bare CR and bare LF are\n   used simply as ASCII control characters\
    \ with their traditional ASCII\n   meanings.\n4.2. Obsolete folding white space\n\
    \   In the obsolete syntax, any amount of folding white space MAY be\n   inserted\
    \ where the obs-FWS rule is allowed.  This creates the\n   possibility of having\
    \ two consecutive \"folds\" in a line, and\n   therefore the possibility that\
    \ a line which makes up a folded header\n   field could be composed entirely of\
    \ white space.\n   obs-FWS         =       1*WSP *(CRLF 1*WSP)\n4.3. Obsolete\
    \ Date and Time\n   The syntax for the obsolete date format allows a 2 digit year\
    \ in the\n   date field and allows for a list of alphabetic time zone\n   specifications\
    \ that were used in earlier versions of this standard.\n   It also permits comments\
    \ and folding white space between many of the\n   tokens.\nobs-day-of-week = \
    \      [CFWS] day-name [CFWS]\nobs-year        =       [CFWS] 2*DIGIT [CFWS]\n\
    obs-month       =       CFWS month-name CFWS\nobs-day         =       [CFWS] 1*2DIGIT\
    \ [CFWS]\nobs-hour        =       [CFWS] 2DIGIT [CFWS]\nobs-minute      =    \
    \   [CFWS] 2DIGIT [CFWS]\nobs-second      =       [CFWS] 2DIGIT [CFWS]\nobs-zone\
    \        =       \"UT\" / \"GMT\" /          ; Universal Time\n              \
    \                                  ; North American UT\n                     \
    \                           ; offsets\n                        \"EST\" / \"EDT\"\
    \ /         ; Eastern:  - 5/ - 4\n                        \"CST\" / \"CDT\" /\
    \         ; Central:  - 6/ - 5\n                        \"MST\" / \"MDT\" /  \
    \       ; Mountain: - 7/ - 6\n                        \"PST\" / \"PDT\" /    \
    \     ; Pacific:  - 8/ - 7\n                        %d65-73 /               ;\
    \ Military zones - \"A\"\n                        %d75-90 /               ; through\
    \ \"I\" and \"K\"\n                        %d97-105 /              ; through \"\
    Z\", both\n                        %d107-122               ; upper and lower case\n\
    \   Where a two or three digit year occurs in a date, the year is to be\n   interpreted\
    \ as follows: If a two digit year is encountered whose\n   value is between 00\
    \ and 49, the year is interpreted by adding 2000,\n   ending up with a value between\
    \ 2000 and 2049.  If a two digit year is\n   encountered with a value between\
    \ 50 and 99, or any three digit year\n   is encountered, the year is interpreted\
    \ by adding 1900.\n   In the obsolete time zone, \"UT\" and \"GMT\" are indications\
    \ of\n   \"Universal Time\" and \"Greenwich Mean Time\" respectively and are both\n\
    \   semantically identical to \"+0000\".\n   The remaining three character zones\
    \ are the US time zones.  The first\n   letter, \"E\", \"C\", \"M\", or \"P\"\
    \ stands for \"Eastern\", \"Central\",\n   \"Mountain\" and \"Pacific\".  The\
    \ second letter is either \"S\" for\n   \"Standard\" time, or \"D\" for \"Daylight\"\
    \ (or summer) time.  Their\n   interpretations are as follows:\n   EDT is semantically\
    \ equivalent to -0400\n   EST is semantically equivalent to -0500\n   CDT is semantically\
    \ equivalent to -0500\n   CST is semantically equivalent to -0600\n   MDT is semantically\
    \ equivalent to -0600\n   MST is semantically equivalent to -0700\n   PDT is semantically\
    \ equivalent to -0700\n   PST is semantically equivalent to -0800\n   The 1 character\
    \ military time zones were defined in a non-standard\n   way in [RFC822] and are\
    \ therefore unpredictable in their meaning.\n   The original definitions of the\
    \ military zones \"A\" through \"I\" are\n   equivalent to \"+0100\" through \"\
    +0900\" respectively; \"K\", \"L\", and \"M\"\n   are equivalent to  \"+1000\"\
    , \"+1100\", and \"+1200\" respectively; \"N\"\n   through \"Y\" are equivalent\
    \ to \"-0100\" through \"-1200\" respectively;\n   and \"Z\" is equivalent to\
    \ \"+0000\".  However, because of the error in\n   [RFC822], they SHOULD all be\
    \ considered equivalent to \"-0000\" unless\n   there is out-of-band information\
    \ confirming their meaning.\n   Other multi-character (usually between 3 and 5)\
    \ alphabetic time zones\n   have been used in Internet messages.  Any such time\
    \ zone whose\n   meaning is not known SHOULD be considered equivalent to \"-0000\"\
    \n   unless there is out-of-band information confirming their meaning.\n4.4. Obsolete\
    \ Addressing\n   There are three primary differences in addressing.  First, mailbox\n\
    \   addresses were allowed to have a route portion before the addr-spec\n   when\
    \ enclosed in \"<\" and \">\".  The route is simply a comma-separated\n   list\
    \ of domain names, each preceded by \"@\", and the list terminated\n   by a colon.\
    \  Second, CFWS were allowed between the period-separated\n   elements of local-part\
    \ and domain (i.e., dot-atom was not used).  In\n   addition, local-part is allowed\
    \ to contain quoted-string in addition\n   to just atom.  Finally, mailbox-list\
    \ and address-list were allowed to\n   have \"null\" members.  That is, there\
    \ could be two or more commas in\n   such a list with nothing in between them.\n\
    obs-angle-addr  =       [CFWS] \"<\" [obs-route] addr-spec \">\" [CFWS]\nobs-route\
    \       =       [CFWS] obs-domain-list \":\" [CFWS]\nobs-domain-list =       \"\
    @\" domain *(*(CFWS / \",\" ) [CFWS] \"@\" domain)\nobs-local-part  =       word\
    \ *(\".\" word)\nobs-domain      =       atom *(\".\" atom)\nobs-mbox-list   =\
    \       1*([mailbox] [CFWS] \",\" [CFWS]) [mailbox]\nobs-addr-list   =       1*([address]\
    \ [CFWS] \",\" [CFWS]) [address]\n   When interpreting addresses, the route portion\
    \ SHOULD be ignored.\n4.5. Obsolete header fields\n   Syntactically, the primary\
    \ difference in the obsolete field syntax is\n   that it allows multiple occurrences\
    \ of any of the fields and they may\n   occur in any order.  Also, any amount\
    \ of white space is allowed\n   before the \":\" at the end of the field name.\n\
    obs-fields      =       *(obs-return /\n                        obs-received /\n\
    \                        obs-orig-date /\n                        obs-from /\n\
    \                        obs-sender /\n                        obs-reply-to /\n\
    \                        obs-to /\n                        obs-cc /\n        \
    \                obs-bcc /\n                        obs-message-id /\n       \
    \                 obs-in-reply-to /\n                        obs-references /\n\
    \                        obs-subject /\n                        obs-comments /\n\
    \                        obs-keywords /\n                        obs-resent-date\
    \ /\n                        obs-resent-from /\n                        obs-resent-send\
    \ /\n                        obs-resent-rply /\n                        obs-resent-to\
    \ /\n                        obs-resent-cc /\n                        obs-resent-bcc\
    \ /\n                        obs-resent-mid /\n                        obs-optional)\n\
    \   Except for destination address fields (described in section 4.5.3),\n   the\
    \ interpretation of multiple occurrences of fields is unspecified.\n   Also, the\
    \ interpretation of trace fields and resent fields which do\n   not occur in blocks\
    \ prepended to the message is unspecified as well.\n   Unless otherwise noted\
    \ in the following sections, interpretation of\n   other fields is identical to\
    \ the interpretation of their non-obsolete\n   counterparts in section 3.\n4.5.1.\
    \ Obsolete origination date field\nobs-orig-date   =       \"Date\" *WSP \":\"\
    \ date-time CRLF\n4.5.2. Obsolete originator fields\nobs-from        =       \"\
    From\" *WSP \":\" mailbox-list CRLF\nobs-sender      =       \"Sender\" *WSP \"\
    :\" mailbox CRLF\nobs-reply-to    =       \"Reply-To\" *WSP \":\" mailbox-list\
    \ CRLF\n4.5.3. Obsolete destination address fields\nobs-to          =       \"\
    To\" *WSP \":\" address-list CRLF\nobs-cc          =       \"Cc\" *WSP \":\" address-list\
    \ CRLF\nobs-bcc         =       \"Bcc\" *WSP \":\" (address-list / [CFWS]) CRLF\n\
    \   When multiple occurrences of destination address fields occur in a\n   message,\
    \ they SHOULD be treated as if the address-list in the first\n   occurrence of\
    \ the field is combined with the address lists of the\n   subsequent occurrences\
    \ by adding a comma and concatenating.\n4.5.4. Obsolete identification fields\n\
    \   The obsolete \"In-Reply-To:\" and \"References:\" fields differ from the\n\
    \   current syntax in that they allow phrase (words or quoted strings) to\n  \
    \ appear.  The obsolete forms of the left and right sides of msg-id\n   allow\
    \ interspersed CFWS, making them syntactically identical to\n   local-part and\
    \ domain respectively.\nobs-message-id  =       \"Message-ID\" *WSP \":\" msg-id\
    \ CRLF\nobs-in-reply-to =       \"In-Reply-To\" *WSP \":\" *(phrase / msg-id)\
    \ CRLF\nobs-references  =       \"References\" *WSP \":\" *(phrase / msg-id) CRLF\n\
    obs-id-left     =       local-part\nobs-id-right    =       domain\n   For purposes\
    \ of interpretation, the phrases in the \"In-Reply-To:\" and\n   \"References:\"\
    \ fields are ignored.\n   Semantically, none of the optional CFWS surrounding\
    \ the local-part\n   and the domain are part of the obs-id-left and obs-id-right\n\
    \   respectively.\n4.5.5. Obsolete informational fields\nobs-subject     =   \
    \    \"Subject\" *WSP \":\" unstructured CRLF\nobs-comments    =       \"Comments\"\
    \ *WSP \":\" unstructured CRLF\nobs-keywords    =       \"Keywords\" *WSP \":\"\
    \ obs-phrase-list CRLF\n4.5.6. Obsolete resent fields\n   The obsolete syntax\
    \ adds a \"Resent-Reply-To:\" field, which consists\n   of the field name, the\
    \ optional comments and folding white space, the\n   colon, and a comma separated\
    \ list of addresses.\nobs-resent-from =       \"Resent-From\" *WSP \":\" mailbox-list\
    \ CRLF\nobs-resent-send =       \"Resent-Sender\" *WSP \":\" mailbox CRLF\nobs-resent-date\
    \ =       \"Resent-Date\" *WSP \":\" date-time CRLF\nobs-resent-to   =       \"\
    Resent-To\" *WSP \":\" address-list CRLF\nobs-resent-cc   =       \"Resent-Cc\"\
    \ *WSP \":\" address-list CRLF\nobs-resent-bcc  =       \"Resent-Bcc\" *WSP \"\
    :\"\n                         (address-list / [CFWS]) CRLF\nobs-resent-mid  =\
    \       \"Resent-Message-ID\" *WSP \":\" msg-id CRLF\nobs-resent-rply =      \
    \ \"Resent-Reply-To\" *WSP \":\" address-list CRLF\n   As with other resent fields,\
    \ the \"Resent-Reply-To:\" field is to be\n   treated as trace information only.\n\
    4.5.7. Obsolete trace fields\n   The obs-return and obs-received are again given\
    \ here as template\n   definitions, just as return and received are in section\
    \ 3.  Their\n   full syntax is given in [RFC2821].\nobs-return      =       \"\
    Return-Path\" *WSP \":\" path CRLF\nobs-received    =       \"Received\" *WSP\
    \ \":\" name-val-list CRLF\nobs-path        =       obs-angle-addr\n4.5.8. Obsolete\
    \ optional fields\nobs-optional    =       field-name *WSP \":\" unstructured\
    \ CRLF\n5. Security Considerations\n   Care needs to be taken when displaying\
    \ messages on a terminal or\n   terminal emulator.  Powerful terminals may act\
    \ on escape sequences\n   and other combinations of ASCII control characters with\
    \ a variety of\n   consequences.  They can remap the keyboard or permit other\n\
    \   modifications to the terminal which could lead to denial of service\n   or\
    \ even damaged data.  They can trigger (sometimes programmable)\n   answerback\
    \ messages which can allow a message to cause commands to be\n   issued on the\
    \ recipient's behalf.  They can also effect the operation\n   of terminal attached\
    \ devices such as printers.  Message viewers may\n   wish to strip potentially\
    \ dangerous terminal escape sequences from\n   the message prior to display. \
    \ However, other escape sequences appear\n   in messages for useful purposes (cf.\
    \ [RFC2045, RFC2046, RFC2047,\n   RFC2048, RFC2049, ISO2022]) and therefore should\
    \ not be stripped\n   indiscriminately.\n   Transmission of non-text objects in\
    \ messages raises additional\n   security issues.  These issues are discussed\
    \ in [RFC2045, RFC2046,\n   RFC2047, RFC2048, RFC2049].\n   Many implementations\
    \ use the \"Bcc:\" (blind carbon copy) field\n   described in section 3.6.3 to\
    \ facilitate sending messages to\n   recipients without revealing the addresses\
    \ of one or more of the\n   addressees to the other recipients.  Mishandling this\
    \ use of \"Bcc:\"\n   has implications for confidential information that might\
    \ be revealed,\n   which could eventually lead to security problems through knowledge\
    \ of\n   even the existence of a particular mail address.  For example, if\n \
    \  using the first method described in section 3.6.3, where the \"Bcc:\"\n   line\
    \ is removed from the message, blind recipients have no explicit\n   indication\
    \ that they have been sent a blind copy, except insofar as\n   their address does\
    \ not appear in the message header.  Because of\n   this, one of the blind addressees\
    \ could potentially send a reply to\n   all of the shown recipients and accidentally\
    \ reveal that the message\n   went to the blind recipient.  When the second method\
    \ from section\n   3.6.3 is used, the blind recipient's address appears in the\
    \ \"Bcc:\"\n   field of a separate copy of the message. If the \"Bcc:\" field\
    \ sent\n   contains all of the blind addressees, all of the \"Bcc:\" recipients\n\
    \   will be seen by each \"Bcc:\" recipient.  Even if a separate message is\n\
    \   sent to each \"Bcc:\" recipient with only the individual's address,\n   implementations\
    \ still need to be careful to process replies to the\n   message as per section\
    \ 3.6.3 so as not to accidentally reveal the\n   blind recipient to other recipients.\n\
    6. Bibliography\n   [ASCII]    American National Standards Institute (ANSI), Coded\n\
    \              Character Set - 7-Bit American National Standard Code for\n   \
    \           Information Interchange, ANSI X3.4, 1986.\n   [ISO2022] International\
    \ Organization for Standardization (ISO),\n              Information processing\
    \ - ISO 7-bit and 8-bit coded\n              character sets - Code extension techniques,\
    \ Third edition\n              - 1986-05-01, ISO 2022, 1986.\n   [RFC822]   Crocker,\
    \ D., \"Standard for the Format of ARPA Internet\n              Text Messages\"\
    , RFC 822, August 1982.\n   [RFC2045]  Freed, N. and  N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part One: Format of Internet\
    \ Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC2046]  Freed,\
    \ N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions\
    \ (MIME) Part Two: Media Types\", RFC 2046,\n              November 1996.\n  \
    \ [RFC2047]  Moore, K., \"Multipurpose Internet Mail Extensions (MIME)\n     \
    \         Part Three: Message Header Extensions for Non-ASCII Text\",\n      \
    \        RFC 2047, November 1996.\n   [RFC2048]  Freed, N., Klensin, J. and J.\
    \ Postel, \"Multipurpose\n              Internet Mail Extensions (MIME) Part Four:\
    \ Format of\n              Internet Message Bodies\", RFC 2048, November 1996.\n\
    \   [RFC2049]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n   \
    \           Extensions (MIME) Part Five: Conformance Criteria and\n          \
    \    Examples\", RFC 2049, November 1996.\n   [RFC2119]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC2234]  Crocker, D., Editor, and P. Overell, \"Augmented\
    \ BNF for\n              Syntax Specifications: ABNF\", RFC 2234, November 1997.\n\
    \   [RFC2821]  Klensin, J., Editor, \"Simple Mail Transfer Protocol\", RFC\n \
    \             2821, March 2001.\n   [STD3]     Braden, R., \"Host Requirements\"\
    , STD 3, RFC 1122 and RFC\n              1123, October 1989.\n   [STD12]    Mills,\
    \ D., \"Network Time Protocol\", STD 12, RFC 1119,\n              September 1989.\n\
    \   [STD13]    Mockapetris, P., \"Domain Name System\", STD 13, RFC 1034\n   \
    \           and RFC 1035,  November 1987.\n   [STD14]    Partridge, C., \"Mail\
    \ Routing and the Domain System\", STD\n              14, RFC 974, January 1986.\n\
    7. Editor's Address\n   Peter W. Resnick\n   QUALCOMM Incorporated\n   5775 Morehouse\
    \ Drive\n   San Diego, CA 92121-1714\n   USA\n   Phone: +1 858 651 4478\n   Fax:\
    \   +1 858 651 1102\n   EMail: presnick@qualcomm.com\n8. Acknowledgements\n  \
    \ Many people contributed to this document.  They included folks who\n   participated\
    \ in the Detailed Revision and Update of Messaging\n   Standards (DRUMS) Working\
    \ Group of the Internet Engineering Task\n   Force (IETF), the chair of DRUMS,\
    \ the Area Directors of the IETF, and\n   people who simply sent their comments\
    \ in via e-mail.  The editor is\n   deeply indebted to them all and thanks them\
    \ sincerely.  The below\n   list includes everyone who sent e-mail concerning\
    \ this document.\n   Hopefully, everyone who contributed is named here:\n   Matti\
    \ Aarnio              Barry Finkel           Larry Masinter\n   Tanaka Akira \
    \             Erik Forsberg          Denis McKeon\n   Russ Allbery           \
    \   Chuck Foster           William P McQuillan\n   Eric Allman               Paul\
    \ Fox               Alexey Melnikov\n   Harald Tveit Alvestrand   Klaus M. Frank\
    \         Perry E. Metzger\n   Ran Atkinson              Ned Freed           \
    \   Steven Miller\n   Jos Backus                Jochen Friedrich       Keith Moore\n\
    \   Bruce Balden              Randall C. Gellens     John Gardiner Myers\n   Dave\
    \ Barr                 Sukvinder Singh Gill   Chris Newman\n   Alan Barrett  \
    \            Tim Goodwin            John W. Noerenberg\n   John Beck         \
    \        Philip Guenther        Eric Norman\n   J. Robert von Behren      Tony\
    \ Hansen            Mike O'Dell\n   Jos den Bekker            John Hawkinson \
    \        Larry Osterman\n   D. J. Bernstein           Philip Hazel           Paul\
    \ Overell\n   James Berriman            Kai Henningsen         Jacob Palme\n \
    \  Norbert Bollow            Robert Herriot         Michael A. Patton\n   Raj\
    \ Bose                  Paul Hethmon           Uzi Paz\n   Antony Bowesman   \
    \        Jim Hill               Michael A. Quinlan\n   Scott Bradner         \
    \    Paul E. Hoffman        Eric S. Raymond\n   Randy Bush                Steve\
    \ Hole             Sam Roberts\n   Tom Byrer                 Kari Hurtta     \
    \       Hugh Sasse\n   Bruce Campbell            Marco S. Hyman         Bart Schaefer\n\
    \   Larry Campbell            Ofer Inbar             Tom Scola\n   W. J. Carpenter\
    \           Olle Jarnefors         Wolfgang Segmuller\n   Michael Chapman    \
    \       Kevin Johnson          Nick Shelness\n   Richard Clayton           Sudish\
    \ Joseph          John Stanley\n   Maurizio Codogno          Maynard Kang    \
    \       Einar Stefferud\n   Jim Conklin               Prabhat Keni           Jeff\
    \ Stephenson\n   R. Kelley Cook            John C. Klensin        Bernard Stern\n\
    \   Steve Coya                Graham Klyne           Peter Sylvester\n   Mark\
    \ Crispin              Brad Knowles           Mark Symons\n   Dave Crocker   \
    \           Shuhei Kobayashi       Eric Thomas\n   Matt Curtin               Peter\
    \ Koch             Lee Thompson\n   Michael D'Errico          Dan Kohn       \
    \        Karel De Vriendt\n   Cyrus Daboo               Christian Kuhtz      \
    \  Matthew Wall\n   Jutta Degener             Anand Kumria           Rolf Weber\n\
    \   Mark Delany               Steen Larsen           Brent B. Welch\n   Steve\
    \ Dorner              Eliot Lear             Dan Wing\n   Harold A. Driscoll \
    \       Barry Leiba            Jack De Winter\n   Michael Elkins            Jay\
    \ Levitt             Gregory J. Woodhouse\n   Robert Elz                Lars-Johan\
    \ Liman       Greg A. Woods\n   Johnny Eriksson           Charles Lindsey    \
    \    Kazu Yamamoto\n   Erik E. Fair              Pete Loshin            Alain\
    \ Zahm\n   Roger Fajman              Simon Lyall            Jamie Zawinski\n \
    \  Patrik Faltstrom          Bill Manning           Timothy S. Zurcher\n   Claus\
    \ Andre Farber        John Martin\nAppendix A. Example messages\n   This section\
    \ presents a selection of messages.  These are intended to\n   assist in the implementation\
    \ of this standard, but should not be\n   taken as normative; that is to say,\
    \ although the examples in this\n   section were carefully reviewed, if there\
    \ happens to be a conflict\n   between these examples and the syntax described\
    \ in sections 3 and 4\n   of this document, the syntax in those sections is to\
    \ be taken as\n   correct.\n   Messages are delimited in this section between\
    \ lines of \"----\".  The\n   \"----\" lines are not part of the message itself.\n\
    A.1. Addressing examples\n   The following are examples of messages that might\
    \ be sent between two\n   individuals.\nA.1.1. A message from one person to another\
    \ with simple addressing\n   This could be called a canonical message.  It has\
    \ a single author,\n   John Doe, a single recipient, Mary Smith, a subject, the\
    \ date, a\n   message identifier, and a textual message in the body.\n----\nFrom:\
    \ John Doe <jdoe@machine.example>\nTo: Mary Smith <mary@example.net>\nSubject:\
    \ Saying Hello\nDate: Fri, 21 Nov 1997 09:55:06 -0600\nMessage-ID: <1234@local.machine.example>\n\
    This is a message just to say hello.\nSo, \"Hello\".\n----\n   If John's secretary\
    \ Michael actually sent the message, though John\n   was the author and replies\
    \ to this message should go back to him, the\n   sender field would be used:\n\
    ----\nFrom: John Doe <jdoe@machine.example>\nSender: Michael Jones <mjones@machine.example>\n\
    To: Mary Smith <mary@example.net>\nSubject: Saying Hello\nDate: Fri, 21 Nov 1997\
    \ 09:55:06 -0600\nMessage-ID: <1234@local.machine.example>\nThis is a message\
    \ just to say hello.\nSo, \"Hello\".\n----\nA.1.2. Different types of mailboxes\n\
    \   This message includes multiple addresses in the destination fields\n   and\
    \ also uses several different forms of addresses.\n----\nFrom: \"Joe Q. Public\"\
    \ <john.q.public@example.com>\nTo: Mary Smith <mary@x.test>, jdoe@example.org,\
    \ Who? <one@y.test>\nCc: <boss@nil.test>, \"Giant; \\\"Big\\\" Box\" <sysservices@example.net>\n\
    Date: Tue, 1 Jul 2003 10:52:37 +0200\nMessage-ID: <5678.21-Nov-1997@example.com>\n\
    Hi everyone.\n----\n   Note that the display names for Joe Q. Public and Giant;\
    \ \"Big\" Box\n   needed to be enclosed in double-quotes because the former contains\n\
    \   the period and the latter contains both semicolon and double-quote\n   characters\
    \ (the double-quote characters appearing as quoted-pair\n   construct).  Conversely,\
    \ the display name for Who? could appear\n   without them because the question\
    \ mark is legal in an atom.  Notice\n   also that jdoe@example.org and boss@nil.test\
    \ have no display names\n   associated with them at all, and jdoe@example.org\
    \ uses the simpler\n   address form without the angle brackets.\nA.1.3. Group\
    \ addresses\n----\nFrom: Pete <pete@silly.example>\nTo: A Group:Chris Jones <c@a.test>,joe@where.test,John\
    \ <jdoe@one.test>;\nCc: Undisclosed recipients:;\nDate: Thu, 13 Feb 1969 23:32:54\
    \ -0330\nMessage-ID: <testabcd.1234@silly.example>\nTesting.\n----\n   In this\
    \ message, the \"To:\" field has a single group recipient named A\n   Group which\
    \ contains 3 addresses, and a \"Cc:\" field with an empty\n   group recipient\
    \ named Undisclosed recipients.\nA.2. Reply messages\n   The following is a series\
    \ of three messages that make up a\n   conversation thread between John and Mary.\
    \  John firsts sends a\n   message to Mary, Mary then replies to John's message,\
    \ and then John\n   replies to Mary's reply message.\n   Note especially the \"\
    Message-ID:\", \"References:\", and \"In-Reply-To:\"\n   fields in each message.\n\
    ----\nFrom: John Doe <jdoe@machine.example>\nTo: Mary Smith <mary@example.net>\n\
    Subject: Saying Hello\nDate: Fri, 21 Nov 1997 09:55:06 -0600\nMessage-ID: <1234@local.machine.example>\n\
    This is a message just to say hello.\nSo, \"Hello\".\n----\n   When sending replies,\
    \ the Subject field is often retained, though\n   prepended with \"Re: \" as described\
    \ in section 3.6.5.\n----\nFrom: Mary Smith <mary@example.net>\nTo: John Doe <jdoe@machine.example>\n\
    Reply-To: \"Mary Smith: Personal Account\" <smith@home.example>\nSubject: Re:\
    \ Saying Hello\nDate: Fri, 21 Nov 1997 10:01:10 -0600\nMessage-ID: <3456@example.net>\n\
    In-Reply-To: <1234@local.machine.example>\nReferences: <1234@local.machine.example>\n\
    This is a reply to your hello.\n----\n   Note the \"Reply-To:\" field in the above\
    \ message.  When John replies\n   to Mary's message above, the reply should go\
    \ to the address in the\n   \"Reply-To:\" field instead of the address in the\
    \ \"From:\" field.\n----\nTo: \"Mary Smith: Personal Account\" <smith@home.example>\n\
    From: John Doe <jdoe@machine.example>\nSubject: Re: Saying Hello\nDate: Fri, 21\
    \ Nov 1997 11:00:00 -0600\nMessage-ID: <abcd.1234@local.machine.tld>\nIn-Reply-To:\
    \ <3456@example.net>\nReferences: <1234@local.machine.example> <3456@example.net>\n\
    This is a reply to your reply.\n----\nA.3. Resent messages\n   Start with the\
    \ message that has been used as an example several\n   times:\n----\nFrom: John\
    \ Doe <jdoe@machine.example>\nTo: Mary Smith <mary@example.net>\nSubject: Saying\
    \ Hello\nDate: Fri, 21 Nov 1997 09:55:06 -0600\nMessage-ID: <1234@local.machine.example>\n\
    This is a message just to say hello.\nSo, \"Hello\".\n----\n   Say that Mary,\
    \ upon receiving this message, wishes to send a copy of\n   the message to Jane\
    \ such that (a) the message would appear to have\n   come straight from John;\
    \ (b) if Jane replies to the message, the\n   reply should go back to John; and\
    \ (c) all of the original\n   information, like the date the message was originally\
    \ sent to Mary,\n   the message identifier, and the original addressee, is preserved.\
    \  In\n   this case, resent fields are prepended to the message:\n----\nResent-From:\
    \ Mary Smith <mary@example.net>\nResent-To: Jane Brown <j-brown@other.example>\n\
    Resent-Date: Mon, 24 Nov 1997 14:22:01 -0800\nResent-Message-ID: <78910@example.net>\n\
    From: John Doe <jdoe@machine.example>\nTo: Mary Smith <mary@example.net>\nSubject:\
    \ Saying Hello\nDate: Fri, 21 Nov 1997 09:55:06 -0600\nMessage-ID: <1234@local.machine.example>\n\
    This is a message just to say hello.\nSo, \"Hello\".\n----\n   If Jane, in turn,\
    \ wished to resend this message to another person,\n   she would prepend her own\
    \ set of resent header fields to the above\n   and send that.\nA.4. Messages with\
    \ trace fields\n   As messages are sent through the transport system as described\
    \ in\n   [RFC2821], trace fields are prepended to the message.  The following\n\
    \   is an example of what those trace fields might look like.  Note that\n   there\
    \ is some folding white space in the first one since these lines\n   can be long.\n\
    ----\nReceived: from x.y.test\n   by example.net\n   via TCP\n   with ESMTP\n\
    \   id ABC12345\n   for <mary@example.net>;  21 Nov 1997 10:05:43 -0600\nReceived:\
    \ from machine.example by x.y.test; 21 Nov 1997 10:01:22 -0600\nFrom: John Doe\
    \ <jdoe@machine.example>\nTo: Mary Smith <mary@example.net>\nSubject: Saying Hello\n\
    Date: Fri, 21 Nov 1997 09:55:06 -0600\nMessage-ID: <1234@local.machine.example>\n\
    This is a message just to say hello.\nSo, \"Hello\".\n----\nA.5. White space,\
    \ comments, and other oddities\n   White space, including folding white space,\
    \ and comments can be\n   inserted between many of the tokens of fields.  Taking\
    \ the example\n   from A.1.3, white space and comments can be inserted into all\
    \ of the\n   fields.\n----\nFrom: Pete(A wonderful \\) chap) <pete(his account)@silly.test(his\
    \ host)>\nTo:A Group(Some people)\n     :Chris Jones <c@(Chris's host.)public.example>,\n\
    \         joe@example.org,\n  John <jdoe@one.test> (my dear friend); (the end\
    \ of the group)\nCc:(Empty list)(start)Undisclosed recipients  :(nobody(that I\
    \ know))  ;\nDate: Thu,\n      13\n        Feb\n          1969\n      23:32\n\
    \               -0330 (Newfoundland Time)\nMessage-ID:              <testabcd.1234@silly.test>\n\
    Testing.\n----\n   The above example is aesthetically displeasing, but perfectly\
    \ legal.\n   Note particularly (1) the comments in the \"From:\" field (including\n\
    \   one that has a \")\" character appearing as part of a quoted-pair); (2)\n\
    \   the white space absent after the \":\" in the \"To:\" field as well as\n \
    \  the comment and folding white space after the group name, the special\n   character\
    \ (\".\") in the comment in Chris Jones's address, and the\n   folding white space\
    \ before and after \"joe@example.org,\"; (3) the\n   multiple and nested comments\
    \ in the \"Cc:\" field as well as the\n   comment immediately following the \"\
    :\" after \"Cc\"; (4) the folding\n   white space (but no comments except at the\
    \ end) and the missing\n   seconds in the time of the date field; and (5) the\
    \ white space before\n   (but not within) the identifier in the \"Message-ID:\"\
    \ field.\nA.6. Obsoleted forms\n   The following are examples of obsolete (that\
    \ is, the \"MUST NOT\n   generate\") syntactic elements described in section 4\
    \ of this\n   document.\nA.6.1. Obsolete addressing\n   Note in the below example\
    \ the lack of quotes around Joe Q. Public,\n   the route that appears in the address\
    \ for Mary Smith, the two commas\n   that appear in the \"To:\" field, and the\
    \ spaces that appear around the\n   \".\" in the jdoe address.\n----\nFrom: Joe\
    \ Q. Public <john.q.public@example.com>\nTo: Mary Smith <@machine.tld:mary@example.net>,\
    \ , jdoe@test   . example\nDate: Tue, 1 Jul 2003 10:52:37 +0200\nMessage-ID: <5678.21-Nov-1997@example.com>\n\
    Hi everyone.\n----\nA.6.2. Obsolete dates\n   The following message uses an obsolete\
    \ date format, including a non-\n   numeric time zone and a two digit year.  Note\
    \ that although the\n   day-of-week is missing, that is not specific to the obsolete\
    \ syntax;\n   it is optional in the current syntax as well.\n----\nFrom: John\
    \ Doe <jdoe@machine.example>\nTo: Mary Smith <mary@example.net>\nSubject: Saying\
    \ Hello\nDate: 21 Nov 97 09:55:06 GMT\nMessage-ID: <1234@local.machine.example>\n\
    This is a message just to say hello.\nSo, \"Hello\".\n----\nA.6.3. Obsolete white\
    \ space and comments\n   White space and comments can appear between many more\
    \ elements than\n   in the current syntax.  Also, folding lines that are made\
    \ up entirely\n   of white space are legal.\n----\nFrom  : John Doe <jdoe@machine(comment).\
    \  example>\nTo    : Mary Smith\n__\n          <mary@example.net>\nSubject   \
    \  : Saying Hello\nDate  : Fri, 21 Nov 1997 09(comment):   55  :  06 -0600\nMessage-ID\
    \  : <1234   @   local(blah)  .machine .example>\nThis is a message just to say\
    \ hello.\nSo, \"Hello\".\n----\n   Note especially the second line of the \"To:\"\
    \ field.  It starts with\n   two space characters.  (Note that \"__\" represent\
    \ blank spaces.)\n   Therefore, it is considered part of the folding as described\
    \ in\n   section 4.2.  Also, the comments and white space throughout\n   addresses,\
    \ dates, and message identifiers are all part of the\n   obsolete syntax.\nAppendix\
    \ B. Differences from earlier standards\n   This appendix contains a list of changes\
    \ that have been made in the\n   Internet Message Format from earlier standards,\
    \ specifically [RFC822]\n   and [STD3].  Items marked with an asterisk (*) below\
    \ are items which\n   appear in section 4 of this document and therefore can no\
    \ longer be\n   generated.\n   1. Period allowed in obsolete form of phrase.\n\
    \   2. ABNF moved out of document to [RFC2234].\n   3. Four or more digits allowed\
    \ for year.\n   4. Header field ordering (and lack thereof) made explicit.\n \
    \  5. Encrypted header field removed.\n   6. Received syntax loosened to allow\
    \ any token/value pair.\n   7. Specifically allow and give meaning to \"-0000\"\
    \ time zone.\n   8. Folding white space is not allowed between every token.\n\
    \   9. Requirement for destinations removed.\n   10. Forwarding and resending\
    \ redefined.\n   11. Extension header fields no longer specifically called out.\n\
    \   12. ASCII 0 (null) removed.*\n   13. Folding continuation lines cannot contain\
    \ only white space.*\n   14. Free insertion of comments not allowed in date.*\n\
    \   15. Non-numeric time zones not allowed.*\n   16. Two digit years not allowed.*\n\
    \   17. Three digit years interpreted, but not allowed for generation.\n   18.\
    \ Routes in addresses not allowed.*\n   19. CFWS within local-parts and domains\
    \ not allowed.*\n   20. Empty members of address lists not allowed.*\n   21. Folding\
    \ white space between field name and colon not allowed.*\n   22. Comments between\
    \ field name and colon not allowed.\n   23. Tightened syntax of in-reply-to and\
    \ references.*\n   24. CFWS within msg-id not allowed.*\n   25. Tightened semantics\
    \ of resent fields as informational only.\n   26. Resent-Reply-To not allowed.*\n\
    \   27. No multiple occurrences of fields (except resent and received).*\n   28.\
    \ Free CR and LF not allowed.*\n   29. Routes in return path not allowed.*\n \
    \  30. Line length limits specified.\n   31. Bcc more clearly specified.\nAppendix\
    \ C. Notices\n   Intellectual Property\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\nFull Copyright\
    \ Statement\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n\
    \   This document and translations of it may be copied and furnished to\n   others,\
    \ and derivative works that comment on or otherwise explain it\n   or assist in\
    \ its implementation may be prepared, copied, published\n   and distributed, in\
    \ whole or in part, without restriction of any\n   kind, provided that the above\
    \ copyright notice and this paragraph are\n   included on all such copies and\
    \ derivative works.  However, this\n   document itself may not be modified in\
    \ any way, such as by removing\n   the copyright notice or references to the Internet\
    \ Society or other\n   Internet organizations, except as needed for the purpose\
    \ of\n   developing Internet standards in which case the procedures for\n   copyrights\
    \ defined in the Internet Standards process must be\n   followed, or as required\
    \ to translate it into languages other than\n   English.\n   The limited permissions\
    \ granted above are perpetual and will not be\n   revoked by the Internet Society\
    \ or its successors or assigns.\n   This document and the information contained\
    \ herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY AND THE\
    \ INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,\
    \ INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n\
    \   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\nAcknowledgement\n   Funding for the RFC\
    \ Editor function is currently provided by the\n   Internet Society.\n"
