- title: __initial_text__
  contents:
  - "                      Public Key Cryptography for\n              Initial Authentication\
    \ in Kerberos (PKINIT)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes protocol extensions (hereafter called PKINIT)\n\
    \   to the Kerberos protocol specification.  These extensions provide a\n   method\
    \ for integrating public key cryptography into the initial\n   authentication\
    \ exchange, by using asymmetric-key signature and/or\n   encryption algorithms\
    \ in pre-authentication data fields.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n           3.1.4. Kerberos Encryption Types Defined for CMS\n\
    \           3.2.4. Receipt of KDC Reply ...............................25\n  \
    \    3.3. Interoperability Requirements .............................26\n    \
    \  3.4. KDC Indication of PKINIT Support ..........................27\n   4. Security\
    \ Considerations ........................................27\n   5. Acknowledgements\
    \ ...............................................30\n   6. References .....................................................30\n\
    \      6.1. Normative References ......................................30\n  \
    \    6.2. Informative References ....................................32\n   Appendix\
    \ A.  PKINIT ASN.1 Module ..................................33\n   Appendix B.\
    \  Test Vectors .........................................38\n   Appendix C.  Miscellaneous\
    \ Information about Microsoft Windows\n                PKINIT Implementations\
    \ ...............................40\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Kerberos V5 protocol [RFC4120] involves use of a trusted\
    \ third\n   party known as the Key Distribution Center (KDC) to negotiate shared\n\
    \   session keys between clients and services and provide mutual\n   authentication\
    \ between them.\n   The corner-stones of Kerberos V5 are the Ticket and the\n\
    \   Authenticator.  A Ticket encapsulates a symmetric key (the ticket\n   session\
    \ key) in an envelope (a public message) intended for a\n   specific service.\
    \  The contents of the Ticket are encrypted with a\n   symmetric key shared between\
    \ the service principal and the issuing\n   KDC.  The encrypted part of the Ticket\
    \ contains the client principal\n   name, among other items.  An Authenticator\
    \ is a record that can be\n   shown to have been recently generated using the\
    \ ticket session key in\n   the associated Ticket.  The ticket session key is\
    \ known by the client\n   who requested the ticket.  The contents of the Authenticator\
    \ are\n   encrypted with the associated ticket session key.  The encrypted part\n\
    \   of an Authenticator contains a timestamp and the client principal\n   name,\
    \ among other items.\n   As shown in Figure 1, below, the Kerberos V5 protocol\
    \ consists of the\n   following message exchanges between the client and the KDC,\
    \ and the\n   client and the application service:\n    - The Authentication Service\
    \ (AS) Exchange\n      The client obtains an \"initial\" ticket from the Kerberos\n\
    \      authentication server (AS), typically a Ticket Granting Ticket\n      (TGT).\
    \  The AS-REQ message and the AS-REP message are the request\n      and the reply\
    \ message, respectively, between the client and the\n      AS.\n    - The Ticket\
    \ Granting Service (TGS) Exchange\n      The client subsequently uses the TGT\
    \ to authenticate and request a\n      service ticket for a particular service,\
    \ from the Kerberos\n      ticket-granting server (TGS).  The TGS-REQ message\
    \ and the TGS-REP\n      message are the request and the reply message respectively\
    \ between\n      the client and the TGS.\n    - The Client/Server Authentication\
    \ Protocol (AP) Exchange\n      The client then makes a request with an AP-REQ\
    \ message, consisting\n      of a service ticket and an authenticator that certifies\
    \ the\n      client's possession of the ticket session key.  The server may\n\
    \      optionally reply with an AP-REP message.  AP exchanges typically\n    \
    \  negotiate session-specific symmetric keys.\n   Usually, the AS and TGS are\
    \ integrated in a single device also known\n   as the KDC.\n                 \
    \         +--------------+\n               +--------->|  KDC         |\n     \
    \  AS-REQ /   +-------|              |\n             /   /        +--------------+\n\
    \            /   /          ^           |\n           /    |AS-REP   /       \
    \     |\n          |     |        / TGS-REQ     + TGS-REP\n          |     | \
    \      /             /\n          |     |      /             /\n          |  \
    \   |     /   +---------+\n          |     |    /   /\n          |     |   / \
    \  /\n          |     |  /   /\n          |     v /   v\n         ++-------+------+\
    \             +-----------------+\n         |  Client       +------------>|  Application\
    \    |\n         |               |    AP-REQ   |  Server         |\n         |\
    \               |<------------|                 |\n         +---------------+\
    \    AP-REP   +-----------------+\n       Figure 1:  The Message Exchanges in\
    \ the Kerberos V5 Protocol\n   In the AS exchange, the KDC reply contains the\
    \ ticket session key,\n   among other items, that is encrypted using a key (the\
    \ AS reply key)\n   shared between the client and the KDC.  The AS reply key is\
    \ typically\n   derived from the client's password for human users.  Therefore,\
    \ for\n   human users, the attack resistance strength of the Kerberos protocol\n\
    \   is no stronger than the strength of their passwords.\n   The use of asymmetric\
    \ cryptography in the form of X.509 certificates\n   [RFC3280] is popular for\
    \ facilitating data origin authentication and\n   perfect secrecy.  An established\
    \ Public Key Infrastructure (PKI)\n   provides key management and key distribution\
    \ mechanisms that can be\n   used to establish authentication and secure communication.\
    \  Adding\n   public-key cryptography to Kerberos provides a nice congruence to\n\
    \   public-key protocols, obviates the human users' burden to manage\n   strong\
    \ passwords, and allows Kerberized applications to take\n   advantage of existing\
    \ key services and identity management.\n   The advantage afforded by the Kerberos\
    \ TGT is that the client exposes\n   his long-term secrets only once.  The TGT\
    \ and its associated session\n   key can then be used for any subsequent service\
    \ ticket requests.  One\n   result of this is that all further authentication\
    \ is independent of\n   the method by which the initial authentication was performed.\n\
    \   Consequently, initial authentication provides a convenient place to\n   integrate\
    \ public-key cryptography into Kerberos authentication.  In\n   addition, the\
    \ use of symmetric cryptography after the initial\n   exchange is preferred for\
    \ performance.\n   This document describes the methods and data formats using\
    \ which the\n   client and the KDC can use public and private key pairs to mutually\n\
    \   authenticate in the AS exchange and negotiate the AS reply key, known\n  \
    \ only by the client and the KDC, to encrypt the AS-REP sent by the\n   KDC.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   In this protocol, both the client and the KDC have a public-private\n\
    \   key pair in order to prove their identities to each other over the\n   open\
    \ network.  The term \"signature key\" is used to refer to the\n   private key\
    \ of the key pair being used.\n   The encryption key used to encrypt the enc-part\
    \ field of the KDC-REP\n   in the AS-REP [RFC4120] is referred to as the AS reply\
    \ key.\n   An empty sequence in an optional field can be either included or\n\
    \   omitted: both encodings are permitted and considered equivalent.\n   The term\
    \ \"Modular Exponential Diffie-Hellman\" is used to refer to the\n   Diffie-Hellman\
    \ key exchange, as described in [RFC2631], in order to\n   differentiate it from\
    \ other equivalent representations of the same\n   key agreement algorithm.\n"
- title: 3.  Extensions
  contents:
  - "3.  Extensions\n   This section describes extensions to [RFC4120] for supporting\
    \ the use\n   of public-key cryptography in the initial request for a ticket.\n\
    \   Briefly, this document defines the following extensions to [RFC4120]:\n  \
    \ 1. The client indicates the use of public-key authentication by\n      including\
    \ a special preauthenticator in the initial request.  This\n      preauthenticator\
    \ contains the client's public-key data and a\n      signature.\n   2. The KDC\
    \ tests the client's request against its authentication\n      policy and trusted\
    \ Certification Authorities (CAs).\n   3. If the request passes the verification\
    \ tests, the KDC replies as\n      usual, but the reply is encrypted using either:\n\
    \      a. a key generated through a Diffie-Hellman (DH) key exchange\n       \
    \  [RFC2631] [IEEE1363] with the client, signed using the KDC's\n         signature\
    \ key; or\n      b. a symmetric encryption key, signed using the KDC's signature\n\
    \         key and encrypted using the client's public key.\n      Any keying material\
    \ required by the client to obtain the\n      encryption key for decrypting the\
    \ KDC reply is returned in a pre-\n      authentication field accompanying the\
    \ usual reply.\n   4. The client validates the KDC's signature, obtains the encryption\n\
    \      key, decrypts the reply, and then proceeds as usual.\n   Section 3.1 of\
    \ this document enumerates the required algorithms and\n   necessary extension\
    \ message types.  Section 3.2 describes the\n   extension messages in greater\
    \ detail.\n"
- title: 3.1.  Definitions, Requirements, and Constants
  contents:
  - '3.1.  Definitions, Requirements, and Constants

    '
- title: 3.1.1.  Required Algorithms
  contents:
  - "3.1.1.  Required Algorithms\n   All PKINIT implementations MUST support the following\
    \ algorithms:\n   o  AS reply key enctypes: aes128-cts-hmac-sha1-96 and aes256-cts-\n\
    \      hmac-sha1-96 [RFC3962].\n   o  Signature algorithm: sha-1WithRSAEncryption\
    \ [RFC3370].\n   o  AS reply key delivery method: the Diffie-Hellman key delivery\n\
    \      method, as described in Section 3.2.3.1.\n   In addition, implementations\
    \ of this specification MUST be capable of\n   processing the Extended Key Usage\
    \ (EKU) extension and the id-pkinit-\n   san (as defined in Section 3.2.2) otherName\
    \ of the Subject\n   Alternative Name (SAN) extension in X.509 certificates [RFC3280].\n"
- title: 3.1.2.  Recommended Algorithms
  contents:
  - "3.1.2.  Recommended Algorithms\n   All PKINIT implementations SHOULD support\
    \ the following algorithm:\n   o  AS reply key delivery method: the public key\
    \ encryption key\n      delivery method, as described in Section 3.2.3.2.\n  \
    \ For implementations that support the public key encryption key\n   delivery\
    \ method, the following algorithms MUST be supported:\n   a) Key transport algorithms\
    \ identified in the keyEncryptionAlgorithm\n      field of the type KeyTransRecipientInfo\
    \ [RFC3852] for encrypting\n      the temporary key in the encryptedKey field\
    \ [RFC3852] with a\n      public key, as described in Section 3.2.3.2: rsaEncryption\
    \ (this\n      is the RSAES-PKCS1-v1_5 encryption scheme) [RFC3370] [RFC3447].\n\
    \   b) Content encryption algorithms identified in the\n      contentEncryptionAlgorithm\
    \ field of the type EncryptedContentInfo\n      [RFC3852] for encrypting the AS\
    \ reply key with the temporary key\n      contained in the encryptedKey field\
    \ of the type\n      KeyTransRecipientInfo [RFC3852], as described in Section\
    \ 3.2.3.2:\n      des-ede3-cbc (three-key 3DES, CBC mode) [RFC3370].\n"
- title: 3.1.3.  Defined Message and Encryption Types
  contents:
  - "3.1.3.  Defined Message and Encryption Types\n   PKINIT makes use of the following\
    \ new pre-authentication types:\n       PA_PK_AS_REQ                         \
    \        16\n       PA_PK_AS_REP                                 17\n   PKINIT\
    \ also makes use of the following new authorization data type:\n       AD_INITIAL_VERIFIED_CAS\
    \                       9\n   PKINIT introduces the following new error codes:\n\
    \       KDC_ERR_CLIENT_NOT_TRUSTED                   62\n       KDC_ERR_INVALID_SIG\
    \                          64\n       KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED \
    \      65\n       KDC_ERR_CANT_VERIFY_CERTIFICATE              70\n       KDC_ERR_INVALID_CERTIFICATE\
    \                  71\n       KDC_ERR_REVOKED_CERTIFICATE                  72\n\
    \       KDC_ERR_REVOCATION_STATUS_UNKNOWN            73\n       KDC_ERR_CLIENT_NAME_MISMATCH\
    \                 75\n       KDC_ERR_INCONSISTENT_KEY_PURPOSE             77\n\
    \       KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED          78\n       KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED\
    \         79\n       KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED   80\n       KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED\
    \  81\n   PKINIT uses the following typed data types for errors:\n       TD_TRUSTED_CERTIFIERS\
    \                       104\n       TD_INVALID_CERTIFICATES                  \
    \   105\n       TD_DH_PARAMETERS                            109\n   The ASN.1\
    \ module for all structures defined in this document (plus\n   IMPORT statements\
    \ for all imported structures) is given in Appendix\n   A.\n   All structures\
    \ defined in or imported into this document MUST be\n   encoded using Distinguished\
    \ Encoding Rules (DER) [X680] [X690]\n   (unless otherwise noted).  All data structures\
    \ carried in OCTET\n   STRINGs MUST be encoded according to the rules specified\
    \ in the\n   specifications defining each data structure; a reference to the\n\
    \   appropriate specification is provided for each data structure.\n   Interoperability\
    \ note: Some implementations may not be able to decode\n   wrapped Cryptographic\
    \ Message Syntax (CMS) [RFC3852] objects encoded\n   with BER; specifically, they\
    \ may not be able to decode indefinite-\n   length encodings.  To maximize interoperability,\
    \ implementers SHOULD\n   encode CMS objects used in PKINIT with DER.\n"
- title: 3.1.4.  Kerberos Encryption Types Defined for CMS Algorithm Identifiers
  contents:
  - "3.1.4.  Kerberos Encryption Types Defined for CMS Algorithm Identifiers\n   PKINIT\
    \ defines the following Kerberos encryption type numbers\n   [RFC3961], which\
    \ can be used in the etype field of the AS-REQ\n   [RFC4120] message to indicate\
    \ to the KDC the client's acceptance of\n   the corresponding algorithms (including\
    \ key transport algorithms\n   [RFC3370], content encryption algorithms [RFC3370],\
    \ and signature\n   algorithms) for use with Cryptographic Message Syntax (CMS)\
    \ [RFC3852]\n   [RFC3370].\n   Per [RFC4120], the encryption types in the etype\
    \ field are in the\n   decreasing preference order of the client.  Note that there\
    \ is no\n   significance in the relative order between any two of different types\n\
    \   of algorithms: key transport algorithms, content encryption\n   algorithms,\
    \ and signature algorithms.\n   The presence of each of these encryption types\
    \ in the etype field is\n   equivalent to the presence of the corresponding algorithm\
    \ Object\n   Identifier (OID) in the supportedCMSTypes field as described in\n\
    \   Section 3.2.1.  And the preference order expressed in the\n   supportedCMSTypes\
    \ field would override the preference order listed in\n   the etype field.\n \
    \   Kerberos Encryption Type Name  Num  Corresponding Algorithm OID\n    ==============================\
    \ === ===============================\n    id-dsa-with-sha1-CmsOID         9 \
    \ id-dsa-with-sha1 [RFC3370]\n    md5WithRSAEncryption-CmsOID    10  md5WithRSAEncryption\
    \ [RFC3370]\n    sha-1WithRSAEncryption-CmsOID  11  sha-1WithRSAEncryption [RFC3370]\n\
    \    rc2-cbc-EnvOID                 12  rc2-cbc [RFC3370]\n    rsaEncryption-EnvOID\
    \           13  rsaEncryption [RFC3447][RFC3370]\n    id-RSAES-OAEP-EnvOID   \
    \        14  id-RSAES-OAEP [RFC3447][RFC3560]\n    des-ede3-cbc-EnvOID       \
    \     15  des-ede3-cbc [RFC3370]\n   The above encryption type numbers are used\
    \ only to indicate support\n   for the use of the corresponding algorithms in\
    \ PKINIT; they do not\n   correspond to actual Kerberos encryption types [RFC3961]\
    \ and MUST NOT\n   be used in the etype field of the Kerberos EncryptedData type\n\
    \   [RFC4120].  The practice of assigning Kerberos encryption type\n   numbers\
    \ to indicate support for CMS algorithms is considered\n   deprecated, and new\
    \ numbers should not be assigned for this purpose.\n   Instead, the supportedCMSTypes\
    \ field should be used to identify the\n   algorithms supported by the client\
    \ and the preference order of the\n   client.\n   For maximum interoperability,\
    \ however, PKINIT clients wishing to\n   indicate to the KDC the support for one\
    \ or more of the algorithms\n   listed above SHOULD include the corresponding\
    \ encryption type\n   number(s) in the etype field of the AS-REQ.\n"
- title: 3.2.  PKINIT Pre-authentication Syntax and Use
  contents:
  - "3.2.  PKINIT Pre-authentication Syntax and Use\n   This section defines the syntax\
    \ and use of the various pre-\n   authentication fields employed by PKINIT.\n"
- title: 3.2.1.  Generation of Client Request
  contents:
  - "3.2.1.  Generation of Client Request\n   The initial authentication request (AS-REQ)\
    \ is sent as per [RFC4120];\n   in addition, a pre-authentication data element,\
    \ whose padata-type is\n   PA_PK_AS_REQ and whose padata-value contains the DER\
    \ encoding of the\n   type PA-PK-AS-REQ, is included.\n       PA-PK-AS-REQ ::=\
    \ SEQUENCE {\n          signedAuthPack          [0] IMPLICIT OCTET STRING,\n \
    \                  -- Contains a CMS type ContentInfo encoded\n              \
    \     -- according to [RFC3852].\n                   -- The contentType field\
    \ of the type ContentInfo\n                   -- is id-signedData (1.2.840.113549.1.7.2),\n\
    \                   -- and the content field is a SignedData.\n              \
    \     -- The eContentType field for the type SignedData is\n                 \
    \  -- id-pkinit-authData (1.3.6.1.5.2.3.1), and the\n                   -- eContent\
    \ field contains the DER encoding of the\n                   -- type AuthPack.\n\
    \                   -- AuthPack is defined below.\n          trustedCertifiers\
    \       [1] SEQUENCE OF\n                      ExternalPrincipalIdentifier OPTIONAL,\n\
    \                   -- Contains a list of CAs, trusted by the client,\n      \
    \             -- that can be used to certify the KDC.\n                   -- Each\
    \ ExternalPrincipalIdentifier identifies a CA\n                   -- or a CA certificate\
    \ (thereby its public key).\n                   -- The information contained in\
    \ the\n                   -- trustedCertifiers SHOULD be used by the KDC as\n\
    \                   -- hints to guide its selection of an appropriate\n      \
    \             -- certificate chain to return to the client.\n          kdcPkId\
    \                 [2] IMPLICIT OCTET STRING\n                                \
    \      OPTIONAL,\n                   -- Contains a CMS type SignerIdentifier encoded\n\
    \                   -- according to [RFC3852].\n                   -- Identifies,\
    \ if present, a particular KDC\n                   -- public key that the client\
    \ already has.\n          ...\n       }\n       DHNonce ::= OCTET STRING\n   \
    \    ExternalPrincipalIdentifier ::= SEQUENCE {\n          subjectName       \
    \     [0] IMPLICIT OCTET STRING OPTIONAL,\n                   -- Contains a PKIX\
    \ type Name encoded according to\n                   -- [RFC3280].\n         \
    \          -- Identifies the certificate subject by the\n                   --\
    \ distinguished subject name.\n                   -- REQUIRED when there is a\
    \ distinguished subject\n                   -- name present in the certificate.\n\
    \         issuerAndSerialNumber   [1] IMPLICIT OCTET STRING OPTIONAL,\n      \
    \             -- Contains a CMS type IssuerAndSerialNumber encoded\n         \
    \          -- according to [RFC3852].\n                   -- Identifies a certificate\
    \ of the subject.\n                   -- REQUIRED for TD-INVALID-CERTIFICATES\
    \ and\n                   -- TD-TRUSTED-CERTIFIERS.\n         subjectKeyIdentifier\
    \    [2] IMPLICIT OCTET STRING OPTIONAL,\n                   -- Identifies the\
    \ subject's public key by a key\n                   -- identifier.  When an X.509\
    \ certificate is\n                   -- referenced, this key identifier matches\
    \ the X.509\n                   -- subjectKeyIdentifier extension value.  When\
    \ other\n                   -- certificate formats are referenced, the documents\n\
    \                   -- that specify the certificate format and their use\n   \
    \                -- with the CMS must include details on matching the\n      \
    \             -- key identifier to the appropriate certificate\n             \
    \      -- field.\n                   -- RECOMMENDED for TD-TRUSTED-CERTIFIERS.\n\
    \          ...\n       }\n       AuthPack ::= SEQUENCE {\n          pkAuthenticator\
    \         [0] PKAuthenticator,\n          clientPublicValue       [1] SubjectPublicKeyInfo\
    \ OPTIONAL,\n                   -- Type SubjectPublicKeyInfo is defined in\n \
    \                  -- [RFC3280].\n                   -- Specifies Diffie-Hellman\
    \ domain parameters\n                   -- and the client's public key value [IEEE1363].\n\
    \                   -- The DH public key value is encoded as a BIT\n         \
    \          -- STRING according to [RFC3279].\n                   -- This field\
    \ is present only if the client wishes\n                   -- to use the Diffie-Hellman\
    \ key agreement method.\n          supportedCMSTypes       [2] SEQUENCE OF AlgorithmIdentifier\n\
    \                                      OPTIONAL,\n                   -- Type AlgorithmIdentifier\
    \ is defined in\n                   -- [RFC3280].\n                   -- List\
    \ of CMS algorithm [RFC3370] identifiers\n                   -- that identify\
    \ key transport algorithms, or\n                   -- content encryption algorithms,\
    \ or signature\n                   -- algorithms supported by the client in order\
    \ of\n                   -- (decreasing) preference.\n          clientDHNonce\
    \           [3] DHNonce OPTIONAL,\n                   -- Present only if the client\
    \ indicates that it\n                   -- wishes to reuse DH keys or to allow\
    \ the KDC to\n                   -- do so (see Section 3.2.3.1).\n          ...\n\
    \       }\n       PKAuthenticator ::= SEQUENCE {\n          cusec            \
    \       [0] INTEGER (0..999999),\n          ctime                   [1] KerberosTime,\n\
    \                   -- cusec and ctime are used as in [RFC4120], for\n       \
    \            -- replay prevention.\n          nonce                   [2] INTEGER\
    \ (0..4294967295),\n                   -- Chosen randomly;  this nonce does not\
    \ need to\n                   -- match with the nonce in the KDC-REQ-BODY.\n \
    \         paChecksum              [3] OCTET STRING OPTIONAL,\n               \
    \    -- MUST be present.\n                   -- Contains the SHA1 checksum, performed\
    \ over\n                   -- KDC-REQ-BODY.\n          ...\n       }\n   The ContentInfo\
    \ [RFC3852] structure contained in the signedAuthPack\n   field of the type PA-PK-AS-REQ\
    \ is encoded according to [RFC3852] and\n   is filled out as follows:\n   1. \
    \ The contentType field of the type ContentInfo is id-signedData\n       (as defined\
    \ in [RFC3852]), and the content field is a SignedData\n       (as defined in\
    \ [RFC3852]).\n   2.  The eContentType field for the type SignedData is id-pkinit-\n\
    \       authData: { iso(1) org(3) dod(6) internet(1) security(5)\n       kerberosv5(2)\
    \ pkinit(3) authData(1) }.  Notes to CMS\n       implementers: the signed attribute\
    \ content-type MUST be present\n       in this SignedData instance, and its value\
    \ is id-pkinit-authData\n       according to [RFC3852].\n   3.  The eContent field\
    \ for the type SignedData contains the DER\n       encoding of the type AuthPack.\n\
    \   4.  The signerInfos field of the type SignedData contains a single\n     \
    \  signerInfo, which contains the signature over the type AuthPack.\n   5.  The\
    \ AuthPack structure contains a PKAuthenticator, the client\n       public key\
    \ information, the CMS encryption types supported by the\n       client, and a\
    \ DHNonce.  The pkAuthenticator field certifies to\n       the KDC that the client\
    \ has recent knowledge of the signing key\n       that authenticates the client.\
    \  The clientPublicValue field\n       specifies Diffie-Hellman domain parameters\
    \ and the client's\n       public key value.  The DH public key value is encoded\
    \ as a BIT\n       STRING according to [RFC3279].  The clientPublicValue field\
    \ is\n       present only if the client wishes to use the Diffie-Hellman key\n\
    \       agreement method.  The supportedCMSTypes field specifies the list\n  \
    \     of CMS algorithm identifiers that are supported by the client in\n     \
    \  order of (decreasing) preference, and can be used to identify a\n       signature\
    \ algorithm or a key transport algorithm [RFC3370] in the\n       keyEncryptionAlgorithm\
    \ field of the type KeyTransRecipientInfo,\n       or a content encryption algorithm\
    \ [RFC3370] in the\n       contentEncryptionAlgorithm field of the type EncryptedContentInfo\n\
    \       [RFC3852] when encrypting the AS reply key as described in\n       Section\
    \ 3.2.3.2.  However, there is no significance in the\n       relative order between\
    \ any two of different types of algorithms:\n       key transport algorithms,\
    \ content encryption algorithms, and\n       signature algorithms.  The clientDHNonce\
    \ field is described later\n       in this section.\n   6.  The ctime field in\
    \ the PKAuthenticator structure contains the\n       current time on the client's\
    \ host, and the cusec field contains\n       the microsecond part of the client's\
    \ timestamp.  The ctime and\n       cusec fields are used together to specify\
    \ a reasonably accurate\n       timestamp [RFC4120].  The nonce field is chosen\
    \ randomly.  The\n       paChecksum field MUST be present and it contains a SHA1\
    \ checksum\n       that is performed over the KDC-REQ-BODY [RFC4120].  In order\
    \ to\n       ease future migration from the use of SHA1, the paChecksum field\n\
    \       is made optional syntactically: when the request is extended to\n    \
    \   negotiate hash algorithms, the new client wishing not to use SHA1\n      \
    \ will send the request in the extended message syntax without the\n       paChecksum\
    \ field.  The KDC conforming to this specification MUST\n       return a KRB-ERROR\
    \ [RFC4120] message with the code\n       KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED\
    \ (see Section 3.2.3).  That\n       will allow a new client to retry with SHA1\
    \ if allowed by the\n       local policy.\n   7.  The certificates field of the\
    \ type SignedData contains\n       certificates intended to facilitate certification\
    \ path\n       construction, so that the KDC can verify the signature over the\n\
    \       type AuthPack.  For path validation, these certificates SHOULD be\n  \
    \     sufficient to construct at least one certification path from the\n     \
    \  client certificate to one trust anchor acceptable by the KDC\n       [RFC4158].\
    \  The client MUST be capable of including such a set of\n       certificates\
    \ if configured to do so.  The certificates field MUST\n       NOT contain \"\
    root\" CA certificates.\n   8.  The client's Diffie-Hellman public value (clientPublicValue)\
    \ is\n       included if and only if the client wishes to use the Diffie-\n  \
    \     Hellman key agreement method.  The Diffie-Hellman domain\n       parameters\
    \ [IEEE1363] for the client's public key are specified\n       in the algorithm\
    \ field of the type SubjectPublicKeyInfo\n       [RFC3279], and the client's Diffie-Hellman\
    \ public key value is\n       mapped to a subjectPublicKey (a BIT STRING) according\
    \ to\n       [RFC3279].  When using the Diffie-Hellman key agreement method,\n\
    \       implementations MUST support Oakley 1024-bit Modular Exponential\n   \
    \    (MODP) well-known group 2 [RFC2412] and Oakley 2048-bit MODP\n       well-known\
    \ group 14 [RFC3526] and SHOULD support Oakley 4096-bit\n       MODP well-known\
    \ group 16 [RFC3526].\n       The Diffie-Hellman field size should be chosen so\
    \ as to provide\n       sufficient cryptographic security [RFC3766].\n       When\
    \ MODP Diffie-Hellman is used, the exponents should have at\n       least twice\
    \ as many bits as the symmetric keys that will be\n       derived from them [ODL99].\n\
    \   9.  The client may wish to reuse DH keys or to allow the KDC to do so\n  \
    \     (see Section 3.2.3.1).  If so, then the client includes the\n       clientDHNonce\
    \ field.  This nonce string MUST be as long as the\n       longest key length\
    \ of the symmetric key types that the client\n       supports.  This nonce MUST\
    \ be chosen randomly.\n   The ExternalPrincipalIdentifier structure is used in\
    \ this document to\n   identify the subject's public key thereby the subject principal.\n\
    \   This structure is filled out as follows:\n   1.  The subjectName field contains\
    \ a PKIX type Name encoded according\n       to [RFC3280].  This field identifies\
    \ the certificate subject by\n       the distinguished subject name.  This field\
    \ is REQUIRED when\n       there is a distinguished subject name present in the\
    \ certificate\n       being used.\n   2.  The issuerAndSerialNumber field contains\
    \ a CMS type\n       IssuerAndSerialNumber encoded according to [RFC3852].  This\
    \ field\n       identifies a certificate of the subject.  This field is REQUIRED\n\
    \       for TD-INVALID-CERTIFICATES and TD-TRUSTED-CERTIFIERS (both\n       structures\
    \ are defined in Section 3.2.2).\n   3.  The subjectKeyIdentifier [RFC3852] field\
    \ identifies the subject's\n       public key by a key identifier.  When an X.509\
    \ certificate is\n       referenced, this key identifier matches the X.509\n \
    \      subjectKeyIdentifier extension value.  When other certificate\n       formats\
    \ are referenced, the documents that specify the\n       certificate format and\
    \ their use with the CMS must include\n       details on matching the key identifier\
    \ to the appropriate\n       certificate field.  This field is RECOMMENDED for\
    \ TD-TRUSTED-\n       CERTIFIERS (as defined in Section 3.2.2).\n   The trustedCertifiers\
    \ field of the type PA-PK-AS-REQ contains a list\n   of CAs, trusted by the client,\
    \ that can be used to certify the KDC.\n   Each ExternalPrincipalIdentifier identifies\
    \ a CA or a CA certificate\n   (thereby its public key).\n   The kdcPkId field\
    \ of the type PA-PK-AS-REQ contains a CMS type\n   SignerIdentifier encoded according\
    \ to [RFC3852].  This field\n   identifies, if present, a particular KDC public\
    \ key that the client\n   already has.\n"
- title: 3.2.2.  Receipt of Client Request
  contents:
  - "3.2.2.  Receipt of Client Request\n   Upon receiving the client's request, the\
    \ KDC validates it.  This\n   section describes the steps that the KDC MUST (unless\
    \ otherwise\n   noted) take in validating the request.\n   The KDC verifies the\
    \ client's signature in the signedAuthPack field\n   according to [RFC3852].\n\
    \   If, while validating the client's X.509 certificate [RFC3280], the\n   KDC\
    \ cannot build a certification path to validate the client's\n   certificate,\
    \ it sends back a KRB-ERROR [RFC4120] message with the\n   code KDC_ERR_CANT_VERIFY_CERTIFICATE.\
    \  The accompanying e-data for\n   this error message is a TYPED-DATA (as defined\
    \ in [RFC4120]) that\n   contains an element whose data-type is TD_TRUSTED_CERTIFIERS,\
    \ and\n   whose data-value contains the DER encoding of the type TD-TRUSTED-\n\
    \   CERTIFIERS:\n       TD-TRUSTED-CERTIFIERS ::= SEQUENCE OF\n              \
    \        ExternalPrincipalIdentifier\n                   -- Identifies a list\
    \ of CAs trusted by the KDC.\n                   -- Each ExternalPrincipalIdentifier\
    \ identifies a CA\n                   -- or a CA certificate (thereby its public\
    \ key).\n   Each ExternalPrincipalIdentifier (as defined in Section 3.2.1) in\
    \ the\n   TD-TRUSTED-CERTIFIERS structure identifies a CA or a CA certificate\n\
    \   (thereby its public key) trusted by the KDC.\n   Upon receiving this error\
    \ message, the client SHOULD retry only if it\n   has a different set of certificates\
    \ (from those of the previous\n   requests) that form a certification path (or\
    \ a partial path) from one\n   of the trust anchors acceptable by the KDC to its\
    \ own certificate.\n   If, while processing the certification path, the KDC determines\
    \ that\n   the signature on one of the certificates in the signedAuthPack field\n\
    \   is invalid, it returns a KRB-ERROR [RFC4120] message with the code\n   KDC_ERR_INVALID_CERTIFICATE.\
    \  The accompanying e-data for this error\n   message is a TYPED-DATA that contains\
    \ an element whose data-type is\n   TD_INVALID_CERTIFICATES, and whose data-value\
    \ contains the DER\n   encoding of the type TD-INVALID-CERTIFICATES:\n       TD-INVALID-CERTIFICATES\
    \ ::= SEQUENCE OF\n                      ExternalPrincipalIdentifier\n       \
    \            -- Each ExternalPrincipalIdentifier identifies a\n              \
    \     -- certificate (sent by the client) with an invalid\n                  \
    \ -- signature.\n   Each ExternalPrincipalIdentifier (as defined in Section 3.2.1)\
    \ in the\n   TD-INVALID-CERTIFICATES structure identifies a certificate (that\
    \ was\n   sent by the client) with an invalid signature.\n   If more than one\
    \ X.509 certificate signature is invalid, the KDC MAY\n   include one IssuerAndSerialNumber\
    \ per invalid signature within the\n   TD-INVALID-CERTIFICATES.\n   The client's\
    \ X.509 certificate is validated according to [RFC3280].\n   Depending on local\
    \ policy, the KDC may also check whether any X.509\n   certificates in the certification\
    \ path validating the client's\n   certificate have been revoked.  If any of them\
    \ have been revoked, the\n   KDC MUST return an error message with the code\n\
    \   KDC_ERR_REVOKED_CERTIFICATE; if the KDC attempts to determine the\n   revocation\
    \ status but is unable to do so, it SHOULD return an error\n   message with the\
    \ code KDC_ERR_REVOCATION_STATUS_UNKNOWN.  The\n   certificate or certificates\
    \ affected are identified exactly as for\n   the error code KDC_ERR_INVALID_CERTIFICATE\
    \ (see above).\n   Note that the TD_INVALID_CERTIFICATES error data is only used\
    \ to\n   identify invalid certificates sent by the client in the request.\n  \
    \ The client's public key is then used to verify the signature.  If the\n   signature\
    \ fails to verify, the KDC MUST return an error message with\n   the code KDC_ERR_INVALID_SIG.\
    \  There is no accompanying e-data for\n   this error message.\n   In addition\
    \ to validating the client's signature, the KDC MUST also\n   check that the client's\
    \ public key used to verify the client's\n   signature is bound to the client\
    \ principal name specified in the AS-\n   REQ as follows:\n   1. If the KDC has\
    \ its own binding between either the client's\n      signature-verification public\
    \ key or the client's certificate and\n      the client's Kerberos principal name,\
    \ it uses that binding.\n   2. Otherwise, if the client's X.509 certificate contains\
    \ a Subject\n      Alternative Name (SAN) extension carrying a KRB5PrincipalName\n\
    \      (defined below) in the otherName field of the type GeneralName\n      [RFC3280],\
    \ it binds the client's X.509 certificate to that name.\n      The type of the\
    \ otherName field is AnotherName.  The type-id field\n      of the type AnotherName\
    \ is id-pkinit-san:\n       id-pkinit-san OBJECT IDENTIFIER ::=\n         { iso(1)\
    \ org(3) dod(6) internet(1) security(5) kerberosv5(2)\n           x509SanAN (2)\
    \ }\n      And the value field of the type AnotherName is a\n      KRB5PrincipalName.\n\
    \       KRB5PrincipalName ::= SEQUENCE {\n           realm                   [0]\
    \ Realm,\n           principalName           [1] PrincipalName\n       }\n   If\
    \ the Kerberos client name in the AS-REQ does not match a name bound\n   by the\
    \ KDC (the binding can be in the certificate, for example, as\n   described above),\
    \ or if there is no binding found by the KDC, the KDC\n   MUST return an error\
    \ message with the code\n   KDC_ERR_CLIENT_NAME_MISMATCH.  There is no accompanying\
    \ e-data for\n   this error message.\n   Even if the certification path is validated\
    \ and the certificate is\n   mapped to the client's principal name, the KDC may\
    \ decide not to\n   accept the client's certificate, depending on local policy.\n\
    \   The KDC MAY require the presence of an Extended Key Usage (EKU)\n   KeyPurposeId\
    \ [RFC3280] id-pkinit-KPClientAuth in the extensions field\n   of the client's\
    \ X.509 certificate:\n       id-pkinit-KPClientAuth OBJECT IDENTIFIER ::=\n  \
    \       { iso(1) org(3) dod(6) internet(1) security(5) kerberosv5(2)\n       \
    \    pkinit(3) keyPurposeClientAuth(4) }\n              -- PKINIT client authentication.\n\
    \              -- Key usage bits that MUST be consistent:\n              -- digitalSignature.\n\
    \   The digitalSignature key usage bit [RFC3280] MUST be asserted when\n   the\
    \ intended purpose of the client's X.509 certificate is restricted\n   with the\
    \ id-pkinit-KPClientAuth EKU.\n   If this EKU KeyPurposeId is required but it\
    \ is not present, or if the\n   client certificate is restricted not to be used\
    \ for PKINIT client\n   authentication per Section 4.2.1.13 of [RFC3280], the\
    \ KDC MUST return\n   an error message of the code KDC_ERR_INCONSISTENT_KEY_PURPOSE.\
    \  There\n   is no accompanying e-data for this error message.  KDCs implementing\n\
    \   this requirement SHOULD also accept the EKU KeyPurposeId\n   id-ms-kp-sc-logon\
    \ (1.3.6.1.4.1.311.20.2.2) as meeting the\n   requirement, as there are a large\
    \ number of X.509 client certificates\n   deployed for use with PKINIT that have\
    \ this EKU.\n   As a matter of local policy, the KDC MAY decide to reject requests\
    \ on\n   the basis of the absence or presence of other specific EKU OIDs.\n  \
    \ If the digest algorithm used in generating the CA signature for the\n   public\
    \ key in any certificate of the request is not acceptable by the\n   KDC, the\
    \ KDC MUST return a KRB-ERROR [RFC4120] message with the code\n   KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED.\
    \  The accompanying e-data MUST be\n   encoded in TYPED-DATA, although none is\
    \ defined at this point.\n   If the client's public key is not accepted with reasons\
    \ other than\n   those specified above, the KDC returns a KRB-ERROR [RFC4120]\
    \ message\n   with the code KDC_ERR_CLIENT_NOT_TRUSTED.  There is no accompanying\n\
    \   e-data currently defined for this error message.\n   The KDC MUST check the\
    \ timestamp to ensure that the request is not a\n   replay, and that the time\
    \ skew falls within acceptable limits.  The\n   recommendations for clock skew\
    \ times in [RFC4120] apply here.  If the\n   check fails, the KDC MUST return\
    \ error code KRB_AP_ERR_REPEAT or\n   KRB_AP_ERR_SKEW, respectively.\n   If the\
    \ clientPublicValue is filled in, indicating that the client\n   wishes to use\
    \ the Diffie-Hellman key agreement method, the KDC SHOULD\n   check to see if\
    \ the key parameters satisfy its policy.  If they do\n   not, it MUST return an\
    \ error message with the code\n   KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED.  The\
    \ accompanying e-data is a\n   TYPED-DATA that contains an element whose data-type\
    \ is\n   TD_DH_PARAMETERS, and whose data-value contains the DER encoding of\n\
    \   the type TD-DH-PARAMETERS:\n       TD-DH-PARAMETERS ::= SEQUENCE OF AlgorithmIdentifier\n\
    \                   -- Each AlgorithmIdentifier specifies a set of\n         \
    \          -- Diffie-Hellman domain parameters [IEEE1363].\n                 \
    \  -- This list is in decreasing preference order.\n   TD-DH-PARAMETERS contains\
    \ a list of Diffie-Hellman domain parameters\n   that the KDC supports in decreasing\
    \ preference order, from which the\n   client SHOULD pick one to retry the request.\n\
    \   The AlgorithmIdentifier structure is defined in [RFC3280] and is\n   filled\
    \ in according to [RFC3279].  More specifically, Section 2.3.3\n   of [RFC3279]\
    \ describes how to fill in the AlgorithmIdentifier\n   structure in the case where\
    \ MODP Diffie-Hellman key exchange is used.\n   If the client included a kdcPkId\
    \ field in the PA-PK-AS-REQ and the\n   KDC does not possess the corresponding\
    \ key, the KDC MUST ignore the\n   kdcPkId field as if the client did not include\
    \ one.\n   If the digest algorithm used by the id-pkinit-authData is not\n   acceptable\
    \ by the KDC, the KDC MUST return a KRB-ERROR [RFC4120]\n   message with the code\
    \ KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED.\n   The accompanying e-data MUST\
    \ be encoded in TYPED-DATA, although none\n   is defined at this point.\n"
- title: 3.2.3.  Generation of KDC Reply
  contents:
  - "3.2.3.  Generation of KDC Reply\n   If the paChecksum filed in the request is\
    \ not present, the KDC\n   conforming to this specification MUST return a KRB-ERROR\
    \ [RFC4120]\n   message with the code KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED.  The\n\
    \   accompanying e-data MUST be encoded in TYPED-DATA (no error data is\n   defined\
    \ by this specification).\n   Assuming that the client's request has been properly\
    \ validated, the\n   KDC proceeds as per [RFC4120], except as follows.\n   The\
    \ KDC MUST set the initial flag and include an authorization data\n   element\
    \ of ad-type [RFC4120] AD_INITIAL_VERIFIED_CAS in the issued\n   ticket.  The\
    \ ad-data [RFC4120] field contains the DER encoding of the\n   type AD-INITIAL-VERIFIED-CAS:\n\
    \       AD-INITIAL-VERIFIED-CAS ::= SEQUENCE OF\n                      ExternalPrincipalIdentifier\n\
    \                   -- Identifies the certification path with which\n        \
    \           -- the client certificate was validated.\n                   -- Each\
    \ ExternalPrincipalIdentifier identifies a CA\n                   -- or a CA certificate\
    \ (thereby its public key).\n   The AD-INITIAL-VERIFIED-CAS structure identifies\
    \ the certification\n   path with which the client certificate was validated.\
    \  Each\n   ExternalPrincipalIdentifier (as defined in Section 3.2.1) in the AD-\n\
    \   INITIAL-VERIFIED-CAS structure identifies a CA or a CA certificate\n   (thereby\
    \ its public key).\n   Note that the syntax for the AD-INITIAL-VERIFIED-CAS authorization\n\
    \   data does permit empty SEQUENCEs to be encoded.  Such empty sequences\n  \
    \ may only be used if the KDC itself vouches for the user's\n   certificate.\n\
    \   The AS wraps any AD-INITIAL-VERIFIED-CAS data in AD-IF-RELEVANT\n   containers\
    \ if the list of CAs satisfies the AS' realm's local policy\n   (this corresponds\
    \ to the TRANSITED-POLICY-CHECKED ticket flag\n   [RFC4120]).  Furthermore, any\
    \ TGS MUST copy such authorization data\n   from tickets used within a PA-TGS-REQ\
    \ of the TGS-REQ into the\n   resulting ticket.  If the list of CAs satisfies\
    \ the local KDC's\n   realm's policy, the TGS MAY wrap the data into the AD-IF-RELEVANT\n\
    \   container; otherwise, it MAY unwrap the authorization data out of the\n  \
    \ AD-IF-RELEVANT container.\n   Application servers that understand this authorization\
    \ data type\n   SHOULD apply local policy to determine whether a given ticket\
    \ bearing\n   such a type *not* contained within an AD-IF-RELEVANT container is\n\
    \   acceptable.  (This corresponds to the AP server's checking the\n   transited\
    \ field when the TRANSITED-POLICY-CHECKED flag has not been\n   set [RFC4120].)\
    \  If such a data type is contained within an AD-IF-\n   RELEVANT container, AP\
    \ servers MAY apply local policy to determine\n   whether the authorization data\
    \ is acceptable.\n   A pre-authentication data element, whose padata-type is PA_PK_AS_REP\n\
    \   and whose padata-value contains the DER encoding of the type PA-PK-\n   AS-REP\
    \ (defined below), is included in the AS-REP [RFC4120].\n       PA-PK-AS-REP ::=\
    \ CHOICE {\n          dhInfo                  [0] DHRepInfo,\n               \
    \    -- Selected when Diffie-Hellman key exchange is\n                   -- used.\n\
    \          encKeyPack              [1] IMPLICIT OCTET STRING,\n              \
    \     -- Selected when public key encryption is used.\n                   -- Contains\
    \ a CMS type ContentInfo encoded\n                   -- according to [RFC3852].\n\
    \                   -- The contentType field of the type ContentInfo is\n    \
    \               -- id-envelopedData (1.2.840.113549.1.7.3).\n                \
    \   -- The content field is an EnvelopedData.\n                   -- The contentType\
    \ field for the type EnvelopedData\n                   -- is id-signedData (1.2.840.113549.1.7.2).\n\
    \                   -- The eContentType field for the inner type\n           \
    \        -- SignedData (when unencrypted) is\n                   -- id-pkinit-rkeyData\
    \ (1.3.6.1.5.2.3.3) and the\n                   -- eContent field contains the\
    \ DER encoding of the\n                   -- type ReplyKeyPack.\n            \
    \       -- ReplyKeyPack is defined in Section 3.2.3.2.\n          ...\n      \
    \ }\n       DHRepInfo ::= SEQUENCE {\n          dhSignedData            [0] IMPLICIT\
    \ OCTET STRING,\n                   -- Contains a CMS type ContentInfo encoded\
    \ according\n                   -- to [RFC3852].\n                   -- The contentType\
    \ field of the type ContentInfo is\n                   -- id-signedData (1.2.840.113549.1.7.2),\
    \ and the\n                   -- content field is a SignedData.\n            \
    \       -- The eContentType field for the type SignedData is\n               \
    \    -- id-pkinit-DHKeyData (1.3.6.1.5.2.3.2), and the\n                   --\
    \ eContent field contains the DER encoding of the\n                   -- type\
    \ KDCDHKeyInfo.\n                   -- KDCDHKeyInfo is defined below.\n      \
    \    serverDHNonce           [1] DHNonce OPTIONAL,\n                   -- Present\
    \ if and only if dhKeyExpiration is\n                   -- present in the KDCDHKeyInfo.\n\
    \          ...\n       }\n       KDCDHKeyInfo ::= SEQUENCE {\n          subjectPublicKey\
    \        [0] BIT STRING,\n                   -- The KDC's DH public key.\n   \
    \                -- The DH public key value is encoded as a BIT\n            \
    \       -- STRING according to [RFC3279].\n          nonce                   [1]\
    \ INTEGER (0..4294967295),\n                   -- Contains the nonce in the pkAuthenticator\
    \ field\n                   -- in the request if the DH keys are NOT reused,\n\
    \                   -- 0 otherwise.\n          dhKeyExpiration         [2] KerberosTime\
    \ OPTIONAL,\n                   -- Expiration time for KDC's key pair,\n     \
    \              -- present if and only if the DH keys are reused.\n           \
    \        -- If present, the KDC's DH public key MUST not be\n                \
    \   -- used past the point of this expiration time.\n                   -- If\
    \ this field is omitted then the serverDHNonce\n                   -- field MUST\
    \ also be omitted.\n          ...\n       }\n   The content of the AS-REP is otherwise\
    \ unchanged from [RFC4120].  The\n   KDC encrypts the reply as usual, but not\
    \ with the client's long-term\n   key.  Instead, it encrypts it with either a\
    \ shared key derived from a\n   Diffie-Hellman exchange or a generated encryption\
    \ key.  The contents\n   of the PA-PK-AS-REP indicate which key delivery method\
    \ is used.\n   If the client does not wish to use the Diffie-Hellman key delivery\n\
    \   method (the clientPublicValue field is not present in the request)\n   and\
    \ the KDC does not support the public key encryption key delivery\n   method,\
    \ the KDC MUST return an error message with the code\n   KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED.\
    \  There is no\n   accompanying e-data for this error message.\n   In addition,\
    \ the lifetime of the ticket returned by the KDC MUST NOT\n   exceed that of the\
    \ client's public-private key pair.  The ticket\n   lifetime, however, can be\
    \ shorter than that of the client's public-\n   private key pair.  For the implementations\
    \ of this specification, the\n   lifetime of the client's public-private key pair\
    \ is the validity\n   period in X.509 certificates [RFC3280], unless configured\
    \ otherwise.\n"
- title: 3.2.3.1.  Using Diffie-Hellman Key Exchange
  contents:
  - "3.2.3.1.  Using Diffie-Hellman Key Exchange\n   In this case, the PA-PK-AS-REP\
    \ contains a DHRepInfo structure.\n   The ContentInfo [RFC3852] structure for\
    \ the dhSignedData field is\n   filled in as follows:\n   1.  The contentType\
    \ field of the type ContentInfo is id-signedData\n       (as defined in [RFC3852]),\
    \ and the content field is a SignedData\n       (as defined in [RFC3852]).\n \
    \  2.  The eContentType field for the type SignedData is the OID value\n     \
    \  for id-pkinit-DHKeyData: { iso(1) org(3) dod(6) internet(1)\n       security(5)\
    \ kerberosv5(2) pkinit(3) DHKeyData(2) }.  Notes to CMS\n       implementers:\
    \ the signed attribute content-type MUST be present\n       in this SignedData\
    \ instance, and its value is id-pkinit-DHKeyData\n       according to [RFC3852].\n\
    \   3.  The eContent field for the type SignedData contains the DER\n       encoding\
    \ of the type KDCDHKeyInfo.\n   4.  The KDCDHKeyInfo structure contains the KDC's\
    \ public key, a\n       nonce, and, optionally, the expiration time of the KDC's\
    \ DH key\n       being reused.  The subjectPublicKey field of the type\n     \
    \  KDCDHKeyInfo field identifies KDC's DH public key.  This DH\n       public\
    \ key value is encoded as a BIT STRING according to\n       [RFC3279].  The nonce\
    \ field contains the nonce in the\n       pkAuthenticator field in the request\
    \ if the DH keys are NOT\n       reused.  The value of this nonce field is 0 if\
    \ the DH keys are\n       reused.  The dhKeyExpiration field is present if and\
    \ only if the\n       DH keys are reused.  If the dhKeyExpiration field is present,\
    \ the\n       KDC's public key in this KDCDHKeyInfo structure MUST NOT be used\n\
    \       past the point of this expiration time.  If this field is\n       omitted,\
    \ then the serverDHNonce field MUST also be omitted.\n   5.  The signerInfos field\
    \ of the type SignedData contains a single\n       signerInfo, which contains\
    \ the signature over the type\n       KDCDHKeyInfo.\n   6.  The certificates field\
    \ of the type SignedData contains\n       certificates intended to facilitate\
    \ certification path\n       construction, so that the client can verify the KDC's\
    \ signature\n       over the type KDCDHKeyInfo.  The information contained in\
    \ the\n       trustedCertifiers in the request SHOULD be used by the KDC as\n\
    \       hints to guide its selection of an appropriate certificate chain\n   \
    \    to return to the client.  This field may be left empty if the KDC\n     \
    \  public key specified by the kdcPkId field in the PA-PK-AS-REQ was\n       used\
    \ for signing.  Otherwise, for path validation, these\n       certificates SHOULD\
    \ be sufficient to construct at least one\n       certification path from the\
    \ KDC certificate to one trust anchor\n       acceptable by the client [RFC4158].\
    \  The KDC MUST be capable of\n       including such a set of certificates if\
    \ configured to do so.  The\n       certificates field MUST NOT contain \"root\"\
    \ CA certificates.\n   7.  If the client included the clientDHNonce field, then\
    \ the KDC may\n       choose to reuse its DH keys.  If the server reuses DH keys,\
    \ then\n       it MUST include an expiration time in the dhKeyExpiration field.\n\
    \       Past the point of the expiration time, the signature over the\n      \
    \ type DHRepInfo is considered expired/invalid.  When the server\n       reuses\
    \ DH keys then, it MUST include a serverDHNonce at least as\n       long as the\
    \ length of keys for the symmetric encryption system\n       used to encrypt the\
    \ AS reply.  Note that including the\n       serverDHNonce changes how the client\
    \ and server calculate the key\n       to use to encrypt the reply; see below\
    \ for details.  The KDC\n       SHOULD NOT reuse DH keys unless the clientDHNonce\
    \ field is\n       present in the request.\n   The AS reply key is derived as\
    \ follows:\n   1. Both the KDC and the client calculate the shared secret value\
    \ as\n      follows:\n          a) When MODP Diffie-Hellman is used, let DHSharedSecret\
    \ be the\n          shared secret value.  DHSharedSecret is the value ZZ, as\n\
    \          described in Section 2.1.1 of [RFC2631].\n      DHSharedSecret is first\
    \ padded with leading zeros such that the\n      size of DHSharedSecret in octets\
    \ is the same as that of the\n      modulus, then represented as a string of octets\
    \ in big-endian\n      order.\n      Implementation note: Both the client and\
    \ the KDC can cache the\n      triple (ya, yb, DHSharedSecret), where ya is the\
    \ client's public\n      key and yb is the KDC's public key.  If both ya and yb\
    \ are the\n      same in a later exchange, the cached DHSharedSecret can be used.\n\
    \   2. Let K be the key-generation seed length [RFC3961] of the AS reply\n   \
    \   key whose enctype is selected according to [RFC4120].\n   3. Define the function\
    \ octetstring2key() as follows:\n           octetstring2key(x) == random-to-key(K-truncate(\n\
    \                                    SHA1(0x00 | x) |\n                      \
    \              SHA1(0x01 | x) |\n                                    SHA1(0x02\
    \ | x) |\n                                    ...\n                          \
    \          ))\n      where x is an octet string; | is the concatenation operator;\
    \ 0x00,\n      0x01, 0x02, etc. are each represented as a single octet; random-\n\
    \      to-key() is an operation that generates a protocol key from a\n      bitstring\
    \ of length K; and K-truncate truncates its input to the\n      first K bits.\
    \  Both K and random-to-key() are as defined in the\n      kcrypto profile [RFC3961]\
    \ for the enctype of the AS reply key.\n   4. When DH keys are reused, let n_c\
    \ be the clientDHNonce and n_k be\n      the serverDHNonce; otherwise, let both\
    \ n_c and n_k be empty octet\n      strings.\n   5. The AS reply key k is:\n \
    \             k = octetstring2key(DHSharedSecret | n_c | n_k)\n"
- title: 3.2.3.2.  Using Public Key Encryption
  contents:
  - "3.2.3.2.  Using Public Key Encryption\n   In this case, the PA-PK-AS-REP contains\
    \ the encKeyPack field where\n   the AS reply key is encrypted.\n   The ContentInfo\
    \ [RFC3852] structure for the encKeyPack field is\n   filled in as follows:\n\
    \   1.  The contentType field of the type ContentInfo is id-envelopedData\n  \
    \     (as defined in [RFC3852]), and the content field is an\n       EnvelopedData\
    \ (as defined in [RFC3852]).\n   2.  The contentType field for the type EnvelopedData\
    \ is id-\n       signedData: { iso (1) member-body (2) us (840) rsadsi (113549)\n\
    \       pkcs (1) pkcs7 (7) signedData (2) }.\n   3.  The eContentType field for\
    \ the inner type SignedData (when\n       decrypted from the encryptedContent\
    \ field for the type\n       EnvelopedData) is id-pkinit-rkeyData: { iso(1) org(3)\
    \ dod(6)\n       internet(1) security(5) kerberosv5(2) pkinit(3) rkeyData(3) }.\n\
    \       Notes to CMS implementers: the signed attribute content-type MUST\n  \
    \     be present in this SignedData instance, and its value is id-\n       pkinit-rkeyData\
    \ according to [RFC3852].\n   4.  The eContent field for the inner type SignedData\
    \ contains the DER\n       encoding of the type ReplyKeyPack (as described below).\n\
    \   5.  The signerInfos field of the inner type SignedData contains a\n      \
    \ single signerInfo, which contains the signature for the type\n       ReplyKeyPack.\n\
    \   6.  The certificates field of the inner type SignedData contains\n       certificates\
    \ intended to facilitate certification path\n       construction, so that the\
    \ client can verify the KDC's signature\n       for the type ReplyKeyPack.  The\
    \ information contained in the\n       trustedCertifiers in the request SHOULD\
    \ be used by the KDC as\n       hints to guide its selection of an appropriate\
    \ certificate chain\n       to return to the client.  This field may be left empty\
    \ if the KDC\n       public key specified by the kdcPkId field in the PA-PK-AS-REQ\
    \ was\n       used for signing.  Otherwise, for path validation, these\n     \
    \  certificates SHOULD be sufficient to construct at least one\n       certification\
    \ path from the KDC certificate to one trust anchor\n       acceptable by the\
    \ client [RFC4158].  The KDC MUST be capable of\n       including such a set of\
    \ certificates if configured to do so.  The\n       certificates field MUST NOT\
    \ contain \"root\" CA certificates.\n   7.  The recipientInfos field of the type\
    \ EnvelopedData is a SET that\n       MUST contain exactly one member of type\
    \ KeyTransRecipientInfo.\n       The encryptedKey of this member contains the\
    \ temporary key that\n       is encrypted using the client's public key.\n   8.\
    \  The unprotectedAttrs or originatorInfo fields of the type\n       EnvelopedData\
    \ MAY be present.\n   If there is a supportedCMSTypes field in the AuthPack, the\
    \ KDC must\n   check to see if it supports any of the listed types.  If it supports\n\
    \   more than one of the types, the KDC SHOULD use the one listed first.\n   If\
    \ it does not support any of them, it MUST return an error message\n   with the\
    \ code KDC_ERR_ETYPE_NOSUPP [RFC4120].\n   Furthermore, the KDC computes the checksum\
    \ of the AS-REQ in the\n   client request.  This checksum is performed over the\
    \ type AS-REQ, and\n   the protocol key [RFC3961] of the checksum operation is\
    \ the replyKey,\n   and the key usage number is 6.  If the replyKey's enctype\
    \ is \"newer\"\n   [RFC4120] [RFC4121], the checksum operation is the required\
    \ checksum\n   operation [RFC3961] of that enctype.\n       ReplyKeyPack ::= SEQUENCE\
    \ {\n          replyKey                [0] EncryptionKey,\n                  \
    \ -- Contains the session key used to encrypt the\n                   -- enc-part\
    \ field in the AS-REP, i.e., the\n                   -- AS reply key.\n      \
    \    asChecksum              [1] Checksum,\n                  -- Contains the\
    \ checksum of the AS-REQ\n                  -- corresponding to the containing\
    \ AS-REP.\n                  -- The checksum is performed over the type AS-REQ.\n\
    \                  -- The protocol key [RFC3961] of the checksum is the\n    \
    \              -- replyKey and the key usage number is 6.\n                  --\
    \ If the replyKey's enctype is \"newer\" [RFC4120]\n                  -- [RFC4121],\
    \ the checksum is the required\n                  -- checksum operation [RFC3961]\
    \ for that enctype.\n                  -- The client MUST verify this checksum\
    \ upon receipt\n                  -- of the AS-REP.\n          ...\n       }\n\
    \   Implementations of this RSA encryption key delivery method are\n   RECOMMENDED\
    \ to support RSA keys at least 2048 bits in size.\n"
- title: 3.2.4.  Receipt of KDC Reply
  contents:
  - "3.2.4.  Receipt of KDC Reply\n   Upon receipt of the KDC's reply, the client\
    \ proceeds as follows.  If\n   the PA-PK-AS-REP contains the dhSignedData field,\
    \ the client derives\n   the AS reply key using the same procedure used by the\
    \ KDC, as defined\n   in Section 3.2.3.1.  Otherwise, the message contains the\
    \ encKeyPack\n   field, and the client decrypts and extracts the temporary key\
    \ in the\n   encryptedKey field of the member KeyTransRecipientInfo and then uses\n\
    \   that as the AS reply key.\n   If the public key encryption method is used,\
    \ the client MUST verify\n   the asChecksum contained in the ReplyKeyPack.\n \
    \  In either case, the client MUST verify the signature in the\n   SignedData\
    \ according to [RFC3852].  The KDC's X.509 certificate MUST\n   be validated according\
    \ to [RFC3280].  In addition, unless the client\n   can otherwise verify that\
    \ the public key used to verify the KDC's\n   signature is bound to the KDC of\
    \ the target realm, the KDC's X.509\n   certificate MUST contain a Subject Alternative\
    \ Name extension\n   [RFC3280] carrying an AnotherName whose type-id is id-pkinit-san\
    \ (as\n   defined in Section 3.2.2) and whose value is a KRB5PrincipalName that\n\
    \   matches the name of the TGS of the target realm (as defined in\n   Section\
    \ 7.3 of [RFC4120]).\n   Unless the client knows by some other means that the\
    \ KDC certificate\n   is intended for a Kerberos KDC, the client MUST require\
    \ that the KDC\n   certificate contains the EKU KeyPurposeId [RFC3280] id-pkinit-KPKdc:\n\
    \       id-pkinit-KPKdc OBJECT IDENTIFIER ::=\n         { iso(1) org(3) dod(6)\
    \ internet(1) security(5) kerberosv5(2)\n           pkinit(3) keyPurposeKdc(5)\
    \ }\n              -- Signing KDC responses.\n              -- Key usage bits\
    \ that MUST be consistent:\n              -- digitalSignature.\n   The digitalSignature\
    \ key usage bit [RFC3280] MUST be asserted when\n   the intended purpose of the\
    \ KDC's X.509 certificate is restricted\n   with the id-pkinit-KPKdc EKU.\n  \
    \ If the KDC certificate contains the Kerberos TGS name encoded as an\n   id-pkinit-san\
    \ SAN, this certificate is certified by the issuing CA as\n   a KDC certificate,\
    \ therefore the id-pkinit-KPKdc EKU is not required.\n   If all applicable checks\
    \ are satisfied, the client then decrypts the\n   enc-part field of the KDC-REP\
    \ in the AS-REP, using the AS reply key,\n   and then proceeds as described in\
    \ [RFC4120].\n"
- title: 3.3.  Interoperability Requirements
  contents:
  - "3.3.  Interoperability Requirements\n   The client MUST be capable of sending\
    \ a set of certificates\n   sufficient to allow the KDC to construct a certification\
    \ path for the\n   client's certificate, if the correct set of certificates is\
    \ provided\n   through configuration or policy.\n   If the client sends all the\
    \ X.509 certificates on a certification\n   path to a trust anchor acceptable\
    \ by the KDC, and if the KDC cannot\n   verify the client's public key otherwise,\
    \ the KDC MUST be able to\n   process path validation for the client's certificate\
    \ based on the\n   certificates in the request.\n   The KDC MUST be capable of\
    \ sending a set of certificates sufficient\n   to allow the client to construct\
    \ a certification path for the KDC's\n   certificate, if the correct set of certificates\
    \ is provided through\n   configuration or policy.\n   If the KDC sends all the\
    \ X.509 certificates on a certification path\n   to a trust anchor acceptable\
    \ by the client, and the client can not\n   verify the KDC's public key otherwise,\
    \ the client MUST be able to\n   process path validation for the KDC's certificate\
    \ based on the\n   certificates in the reply.\n"
- title: 3.4.  KDC Indication of PKINIT Support
  contents:
  - "3.4.  KDC Indication of PKINIT Support\n   If pre-authentication is required\
    \ but was not present in the request,\n   per [RFC4120] an error message with\
    \ the code KDC_ERR_PREAUTH_FAILED\n   is returned, and a METHOD-DATA object will\
    \ be stored in the e-data\n   field of the KRB-ERROR message to specify which\
    \ pre-authentication\n   mechanisms are acceptable.  The KDC can then indicate\
    \ the support of\n   PKINIT by including an empty element whose padata-type is\n\
    \   PA_PK_AS_REQ in that METHOD-DATA object.\n   Otherwise if it is required by\
    \ the KDC's local policy that the client\n   must be pre-authenticated using the\
    \ pre-authentication mechanism\n   specified in this document, but no PKINIT pre-authentication\
    \ was\n   present in the request, an error message with the code\n   KDC_ERR_PREAUTH_FAILED\
    \ SHOULD be returned.\n   KDCs MUST leave the padata-value field of the PA_PK_AS_REQ\
    \ element in\n   the KRB-ERROR's METHOD-DATA empty (i.e., send a zero-length OCTET\n\
    \   STRING), and clients MUST ignore this and any other value.  Future\n   extensions\
    \ to this protocol may specify other data to send instead of\n   an empty OCTET\
    \ STRING.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The security of cryptographic algorithms is dependent\
    \ on generating\n   secret quantities [RFC4086].  The number of truly random bits\
    \ is\n   extremely important in determining the attack resistance strength of\n\
    \   the cryptosystem; for example, the secret Diffie-Hellman exponents\n   must\
    \ be chosen based on n truly random bits (where n is the system\n   security requirement).\
    \  The security of the overall system is\n   significantly weakened by using insufficient\
    \ random inputs: a\n   sophisticated attacker may find it easier to reproduce\
    \ the\n   environment that produced the secret quantities and to search the\n\
    \   resulting small set of possibilities than to locate the quantities in\n  \
    \ the whole of the potential number space.\n   Kerberos error messages are not\
    \ integrity protected; as a result, the\n   domain parameters sent by the KDC\
    \ as TD-DH-PARAMETERS can be tampered\n   with by an attacker so that the set\
    \ of domain parameters selected\n   could be either weaker or not mutually preferred.\
    \  Local policy can\n   configure sets of domain parameters acceptable locally,\
    \ or disallow\n   the negotiation of DH domain parameters.\n   The symmetric reply\
    \ key size and Diffie-Hellman field size or RSA\n   modulus size should be chosen\
    \ so as to provide sufficient\n   cryptographic security [RFC3766].\n   When MODP\
    \ Diffie-Hellman is used, the exponents should have at least\n   twice as many\
    \ bits as the symmetric keys that will be derived from\n   them [ODL99].\n   PKINIT\
    \ raises certain security considerations beyond those that can\n   be regulated\
    \ strictly in protocol definitions.  We will address them\n   in this section.\n\
    \   PKINIT extends the cross-realm model to the public-key\n   infrastructure.\
    \  Users of PKINIT must understand security policies\n   and procedures appropriate\
    \ to the use of Public Key Infrastructures\n   [RFC3280].\n   In order to trust\
    \ a KDC certificate that is certified by a CA as a\n   KDC certificate for a target\
    \ realm (for example, by asserting the TGS\n   name of that Kerberos realm as\
    \ an id-pkinit-san SAN and/or\n   restricting the certificate usage by using the\
    \ id-pkinit-KPKdc EKU,\n   as described in Section 3.2.4), the client MUST verify\
    \ that the KDC\n   certificate's issuing CA is authorized to issue KDC certificates\
    \ for\n   that target realm.  Otherwise, the binding between the KDC\n   certificate\
    \ and the KDC of the target realm is not established.\n   How to validate this\
    \ authorization is a matter of local policy.  A\n   way to achieve this is the\
    \ configuration of specific sets of\n   intermediary CAs and trust anchors, one\
    \ of which must be on the KDC\n   certificate's certification path [RFC3280],\
    \ and, for each CA or trust\n   anchor, the realms for which it is allowed to\
    \ issue certificates.\n   In addition, if any CA that is trusted to issue KDC\
    \ certificates can\n   also issue other kinds of certificates, then local policy\
    \ must be\n   able to distinguish between them; for example, it could require\
    \ that\n   KDC certificates contain the id-pkinit-KPKdc EKU or that the realm\
    \ be\n   specified with the id-pkinit-san SAN.\n   It is the responsibility of\
    \ the PKI administrators for an\n   organization to ensure that KDC certificates\
    \ are only issued to KDCs,\n   and that clients can ascertain this using their\
    \ local policy.\n   Standard Kerberos allows the possibility of interactions between\n\
    \   cryptosystems of varying strengths; this document adds interactions\n   with\
    \ public-key cryptosystems to Kerberos.  Some administrative\n   policies may\
    \ allow the use of relatively weak public keys.  When\n   using such weak asymmetric\
    \ keys to protect/exchange stronger\n   symmetric Keys, the attack resistant strength\
    \ of the overall system\n   is no better than that of these weak keys [RFC3766].\n\
    \   PKINIT requires that keys for symmetric cryptosystems be generated.\n   Some\
    \ such systems contain \"weak\" keys.  For recommendations regarding\n   these\
    \ weak keys, see [RFC4120].\n   PKINIT allows the use of the same RSA key pair\
    \ for encryption and\n   signing when doing RSA encryption-based key delivery.\
    \  This is not\n   recommended usage of RSA keys [RFC3447]; by using DH-based\
    \ key\n   delivery, this is avoided.\n   Care should be taken in how certificates\
    \ are chosen for the purposes\n   of authentication using PKINIT.  Some local\
    \ policies may require that\n   key escrow be used for certain certificate types.\
    \  Deployers of\n   PKINIT should be aware of the implications of using certificates\
    \ that\n   have escrowed keys for the purposes of authentication.  Because\n \
    \  signing-only certificates are normally not escrowed, by using DH-\n   based\
    \ key delivery this is avoided.\n   PKINIT does not provide for a \"return routability\"\
    \ test to prevent\n   attackers from mounting a denial-of-service attack on the\
    \ KDC by\n   causing it to perform unnecessary and expensive public-key\n   operations.\
    \  Strictly speaking, this is also true of standard\n   Kerberos, although the\
    \ potential cost is not as great, because\n   standard Kerberos does not make\
    \ use of public-key cryptography.  By\n   using DH-based key delivery and reusing\
    \ DH keys, the necessary crypto\n   processing cost per request can be minimized.\n\
    \   When the Diffie-Hellman key exchange method is used, additional pre-\n   authentication\
    \ data [RFC4120] (in addition to the PA_PK_AS_REQ, as\n   defined in this specification)\
    \ is not bound to the AS_REQ by the\n   mechanisms discussed in this specification\
    \ (meaning it may be dropped\n   or added by attackers without being detected\
    \ by either the client or\n   the KDC).  Designers of additional pre-authentication\
    \ data should\n   take that into consideration if such additional pre-authentication\n\
    \   data can be used in conjunction with the PA_PK_AS_REQ.  The future\n   work\
    \ of the Kerberos working group is expected to update the hash\n   algorithms\
    \ specified in this document and provide a generic mechanism\n   to bind additional\
    \ pre-authentication data with the accompanying\n   AS_REQ.\n   The key usage\
    \ number 6 used by the asChecksum field is also used for\n   the authenticator\
    \ checksum (cksum field of AP-REQ) contained in the\n   PA-TGS-REQ preauthentication\
    \ data contained in a TGS-REQ [RFC4120].\n   This conflict is present for historical\
    \ reasons; the reuse of key\n   usage numbers is strongly discouraged.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   The following people have made significant contributions\
    \ to this\n   document: Paul Leach, Stefan Santesson, Sam Hartman, Love Hornquist\n\
    \   Astrand, Ken Raeburn, Nicolas Williams, John Wray, Tom Yu, Jeffrey\n   Hutzelman,\
    \ David Cross, Dan Simon, Karthik Jaganathan, Chaskiel M\n   Grundman, and Jeffrey\
    \ Altman.\n   Andre Scedrov, Aaron D. Jaggard, Iliano Cervesato, Joe-Kai Tsay,\
    \ and\n   Chris Walstad discovered a binding issue between the AS-REQ and AS-\n\
    \   REP in draft -26; the asChecksum field was added as the result.\n   Special\
    \ thanks to Clifford Neuman, Matthew Hur, Ari Medvinsky, Sasha\n   Medvinsky,\
    \ and Jonathan Trostle who wrote earlier versions of this\n   document.\n   The\
    \ authors are indebted to the Kerberos working group chair, Jeffrey\n   Hutzelman,\
    \ who kept track of various issues and was enormously\n   helpful during the creation\
    \ of this document.\n   Some of the ideas on which this document is based arose\
    \ during\n   discussions over several years between members of the SAAG, the IETF\n\
    \   CAT working group, and the PSRG, regarding integration of Kerberos\n   and\
    \ SPX.  Some ideas have also been drawn from the DASS system.\n   These changes\
    \ are by no means endorsed by these groups.  This is an\n   attempt to revive\
    \ some of the goals of those groups, and this\n   document approaches those goals\
    \ primarily from the Kerberos\n   perspective.\n   Lastly, comments from groups\
    \ working on similar ideas in DCE have\n   been invaluable.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [IEEE1363] IEEE, \"Standard Specifications for\
    \ Public Key\n              Cryptography\", IEEE 1363, 2000.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2412]  Orman, H., \"The OAKLEY Key Determination\
    \ Protocol\", RFC\n              2412, November 1998.\n   [RFC2631]  Rescorla,\
    \ E., \"Diffie-Hellman Key Agreement Method\", RFC\n              2631, June 1999.\n\
    \   [RFC3279]  Bassham, L., Polk, W., and R. Housley, \"Algorithms and\n     \
    \         Identifiers for the Internet X.509 Public Key\n              Infrastructure\
    \ Certificate and Certificate Revocation List\n              (CRL) Profile\",\
    \ RFC 3279, April 2002.\n   [RFC3280]  Housley, R., Polk, W., Ford, W., and D.\
    \ Solo, \"Internet\n              X.509 Public Key Infrastructure Certificate\
    \ and\n              Certificate Revocation List (CRL) Profile\", RFC 3280,\n\
    \              April 2002.\n   [RFC3370]  Housley, R., \"Cryptographic Message\
    \ Syntax (CMS)\n              Algorithms\", RFC 3370, August 2002.\n   [RFC3447]\
    \  Jonsson, J. and B. Kaliski, \"Public-Key Cryptography\n              Standards\
    \ (PKCS) #1: RSA Cryptography Specifications\n              Version 2.1\", RFC\
    \ 3447, February 2003.\n   [RFC3526]  Kivinen, T. and M. Kojo, \"More Modular\
    \ Exponential (MODP)\n              Diffie-Hellman groups for Internet Key Exchange\
    \ (IKE)\",\n              RFC 3526, May 2003.\n   [RFC3560]  Housley, R., \"Use\
    \ of the RSAES-OAEP Key Transport\n              Algorithm in Cryptographic Message\
    \ Syntax (CMS)\", RFC\n              3560, July 2003.\n   [RFC3766]  Orman, H.\
    \ and P. Hoffman, \"Determining Strengths For\n              Public Keys Used\
    \ For Exchanging Symmetric Keys\", BCP 86,\n              RFC 3766, April 2004.\n\
    \   [RFC3852]  Housley, R., \"Cryptographic Message Syntax (CMS)\", RFC\n    \
    \          3852, July 2004.\n   [RFC3961]  Raeburn, K., \"Encryption and Checksum\
    \ Specifications for\n              Kerberos 5\", RFC 3961, February 2005.\n \
    \  [RFC3962]  Raeburn, K., \"Advanced Encryption Standard (AES)\n            \
    \  Encryption for Kerberos 5\", RFC 3962, February 2005.\n   [RFC4086]  Eastlake,\
    \ D., 3rd, Schiller, J., and S. Crocker,\n              \"Randomness Requirements\
    \ for Security\", BCP 106, RFC 4086,\n              June 2005.\n   [RFC4120] \
    \ Neuman, C., Yu, T., Hartman, S., and K. Raeburn, \"The\n              Kerberos\
    \ Network Authentication Service (V5)\", RFC 4120,\n              July 2005.\n\
    \   [X680]     ITU-T Recommendation X.680 (2002) | ISO/IEC 8824-1:2002,\n    \
    \          Information technology - Abstract Syntax Notation One\n           \
    \   (ASN.1): Specification of basic notation.\n   [X690]     ITU-T Recommendation\
    \ X.690 (2002) | ISO/IEC 8825-1:2002,\n              Information technology -\
    \ ASN.1 encoding Rules:\n              Specification of Basic Encoding Rules (BER),\
    \ Canonical\n              Encoding Rules (CER) and Distinguished Encoding Rules\n\
    \              (DER).\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [ODL99]    Odlyzko, A., \"Discrete logarithms:\
    \ The past and the\n              future, Designs, Codes, and Cryptography (1999)\"\
    .  April\n              1999.\n   [RFC4121]  Zhu, L., Jaganathan, K., and S. Hartman,\
    \ \"The Kerberos\n              Version 5 Generic Security Service Application\
    \ Program\n              Interface (GSS-API) Mechanism: Version 2\", RFC 4121,\
    \ July\n              2005.\n   [RFC4158]  Cooper, M., Dzambasow, Y., Hesse, P.,\
    \ Joseph, S., and R.\n              Nicholas, \"Internet X.509 Public Key Infrastructure:\n\
    \              Certification Path Building\", RFC 4158, September 2005.\n"
- title: Appendix A.  PKINIT ASN.1 Module
  contents:
  - "Appendix A.  PKINIT ASN.1 Module\n       KerberosV5-PK-INIT-SPEC {\n        \
    \       iso(1) identified-organization(3) dod(6) internet(1)\n               security(5)\
    \ kerberosV5(2) modules(4) pkinit(5)\n       } DEFINITIONS EXPLICIT TAGS ::= BEGIN\n\
    \       IMPORTS\n           SubjectPublicKeyInfo, AlgorithmIdentifier\n      \
    \         FROM PKIX1Explicit88 { iso (1)\n                 identified-organization\
    \ (3) dod (6) internet (1)\n                 security (5) mechanisms (5) pkix\
    \ (7) id-mod (0)\n                 id-pkix1-explicit (18) }\n                \
    \ -- As defined in RFC 3280.\n           KerberosTime, PrincipalName, Realm, EncryptionKey,\
    \ Checksum\n               FROM KerberosV5Spec2 { iso(1) identified-organization(3)\n\
    \                 dod(6) internet(1) security(5) kerberosV5(2)\n             \
    \    modules(4) krb5spec2(2) };\n                 -- as defined in RFC 4120.\n\
    \       id-pkinit OBJECT IDENTIFIER ::=\n         { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n           security(5) kerberosv5(2) pkinit (3) }\n    \
    \   id-pkinit-authData      OBJECT IDENTIFIER  ::= { id-pkinit 1 }\n       id-pkinit-DHKeyData\
    \     OBJECT IDENTIFIER  ::= { id-pkinit 2 }\n       id-pkinit-rkeyData      OBJECT\
    \ IDENTIFIER  ::= { id-pkinit 3 }\n       id-pkinit-KPClientAuth  OBJECT IDENTIFIER\
    \  ::= { id-pkinit 4 }\n       id-pkinit-KPKdc         OBJECT IDENTIFIER  ::=\
    \ { id-pkinit 5 }\n       id-pkinit-san OBJECT IDENTIFIER ::=\n         { iso(1)\
    \ org(3) dod(6) internet(1) security(5) kerberosv5(2)\n           x509SanAN (2)\
    \ }\n       pa-pk-as-req INTEGER ::=                  16\n       pa-pk-as-rep\
    \ INTEGER ::=                  17\n       ad-initial-verified-cas INTEGER ::=\
    \        9\n       td-trusted-certifiers INTEGER ::=        104\n       td-invalid-certificates\
    \ INTEGER ::=      105\n       td-dh-parameters INTEGER ::=             109\n\
    \       PA-PK-AS-REQ ::= SEQUENCE {\n          signedAuthPack          [0] IMPLICIT\
    \ OCTET STRING,\n                   -- Contains a CMS type ContentInfo encoded\n\
    \                   -- according to [RFC3852].\n                   -- The contentType\
    \ field of the type ContentInfo\n                   -- is id-signedData (1.2.840.113549.1.7.2),\n\
    \                   -- and the content field is a SignedData.\n              \
    \     -- The eContentType field for the type SignedData is\n                 \
    \  -- id-pkinit-authData (1.3.6.1.5.2.3.1), and the\n                   -- eContent\
    \ field contains the DER encoding of the\n                   -- type AuthPack.\n\
    \                   -- AuthPack is defined below.\n          trustedCertifiers\
    \       [1] SEQUENCE OF\n                      ExternalPrincipalIdentifier OPTIONAL,\n\
    \                   -- Contains a list of CAs, trusted by the client,\n      \
    \             -- that can be used to certify the KDC.\n                   -- Each\
    \ ExternalPrincipalIdentifier identifies a CA\n                   -- or a CA certificate\
    \ (thereby its public key).\n                   -- The information contained in\
    \ the\n                   -- trustedCertifiers SHOULD be used by the KDC as\n\
    \                   -- hints to guide its selection of an appropriate\n      \
    \             -- certificate chain to return to the client.\n          kdcPkId\
    \                 [2] IMPLICIT OCTET STRING\n                                \
    \      OPTIONAL,\n                   -- Contains a CMS type SignerIdentifier encoded\n\
    \                   -- according to [RFC3852].\n                   -- Identifies,\
    \ if present, a particular KDC\n                   -- public key that the client\
    \ already has.\n          ...\n       }\n       DHNonce ::= OCTET STRING\n   \
    \    ExternalPrincipalIdentifier ::= SEQUENCE {\n          subjectName       \
    \     [0] IMPLICIT OCTET STRING OPTIONAL,\n                   -- Contains a PKIX\
    \ type Name encoded according to\n                   -- [RFC3280].\n         \
    \          -- Identifies the certificate subject by the\n                   --\
    \ distinguished subject name.\n                   -- REQUIRED when there is a\
    \ distinguished subject\n                   -- name present in the certificate.\n\
    \         issuerAndSerialNumber   [1] IMPLICIT OCTET STRING OPTIONAL,\n      \
    \             -- Contains a CMS type IssuerAndSerialNumber encoded\n         \
    \          -- according to [RFC3852].\n                   -- Identifies a certificate\
    \ of the subject.\n                   -- REQUIRED for TD-INVALID-CERTIFICATES\
    \ and\n                   -- TD-TRUSTED-CERTIFIERS.\n         subjectKeyIdentifier\
    \    [2] IMPLICIT OCTET STRING OPTIONAL,\n                   -- Identifies the\
    \ subject's public key by a key\n                   -- identifier.  When an X.509\
    \ certificate is\n                   -- referenced, this key identifier matches\
    \ the X.509\n                   -- subjectKeyIdentifier extension value.  When\
    \ other\n                   -- certificate formats are referenced, the documents\n\
    \                   -- that specify the certificate format and their use\n   \
    \                -- with the CMS must include details on matching the\n      \
    \             -- key identifier to the appropriate certificate\n             \
    \      -- field.\n                   -- RECOMMENDED for TD-TRUSTED-CERTIFIERS.\n\
    \          ...\n       }\n       AuthPack ::= SEQUENCE {\n          pkAuthenticator\
    \         [0] PKAuthenticator,\n          clientPublicValue       [1] SubjectPublicKeyInfo\
    \ OPTIONAL,\n                   -- Type SubjectPublicKeyInfo is defined in\n \
    \                  -- [RFC3280].\n                   -- Specifies Diffie-Hellman\
    \ domain parameters\n                   -- and the client's public key value [IEEE1363].\n\
    \                   -- The DH public key value is encoded as a BIT\n         \
    \          -- STRING according to [RFC3279].\n                   -- This field\
    \ is present only if the client wishes\n                   -- to use the Diffie-Hellman\
    \ key agreement method.\n          supportedCMSTypes       [2] SEQUENCE OF AlgorithmIdentifier\n\
    \                                      OPTIONAL,\n                   -- Type AlgorithmIdentifier\
    \ is defined in\n                   -- [RFC3280].\n                   -- List\
    \ of CMS algorithm [RFC3370] identifiers\n                   -- that identify\
    \ key transport algorithms, or\n                   -- content encryption algorithms,\
    \ or signature\n                   -- algorithms supported by the client in order\
    \ of\n                   -- (decreasing) preference.\n          clientDHNonce\
    \           [3] DHNonce OPTIONAL,\n                   -- Present only if the client\
    \ indicates that it\n                   -- wishes to reuse DH keys or to allow\
    \ the KDC to\n                   -- do so.\n          ...\n       }\n       PKAuthenticator\
    \ ::= SEQUENCE {\n          cusec                   [0] INTEGER (0..999999),\n\
    \          ctime                   [1] KerberosTime,\n                   -- cusec\
    \ and ctime are used as in [RFC4120], for\n                   -- replay prevention.\n\
    \          nonce                   [2] INTEGER (0..4294967295),\n            \
    \       -- Chosen randomly; this nonce does not need to\n                   --\
    \ match with the nonce in the KDC-REQ-BODY.\n          paChecksum            \
    \  [3] OCTET STRING OPTIONAL,\n                   -- MUST be present.\n      \
    \             -- Contains the SHA1 checksum, performed over\n                \
    \   -- KDC-REQ-BODY.\n          ...\n       }\n       TD-TRUSTED-CERTIFIERS ::=\
    \ SEQUENCE OF\n                      ExternalPrincipalIdentifier\n           \
    \        -- Identifies a list of CAs trusted by the KDC.\n                   --\
    \ Each ExternalPrincipalIdentifier identifies a CA\n                   -- or a\
    \ CA certificate (thereby its public key).\n       TD-INVALID-CERTIFICATES ::=\
    \ SEQUENCE OF\n                      ExternalPrincipalIdentifier\n           \
    \        -- Each ExternalPrincipalIdentifier identifies a\n                  \
    \ -- certificate (sent by the client) with an invalid\n                   -- signature.\n\
    \       KRB5PrincipalName ::= SEQUENCE {\n           realm                   [0]\
    \ Realm,\n           principalName           [1] PrincipalName\n       }\n   \
    \    AD-INITIAL-VERIFIED-CAS ::= SEQUENCE OF\n                      ExternalPrincipalIdentifier\n\
    \                   -- Identifies the certification path based on which\n    \
    \               -- the client certificate was validated.\n                   --\
    \ Each ExternalPrincipalIdentifier identifies a CA\n                   -- or a\
    \ CA certificate (thereby its public key).\n       PA-PK-AS-REP ::= CHOICE {\n\
    \          dhInfo                  [0] DHRepInfo,\n                   -- Selected\
    \ when Diffie-Hellman key exchange is\n                   -- used.\n         \
    \ encKeyPack              [1] IMPLICIT OCTET STRING,\n                   -- Selected\
    \ when public key encryption is used.\n                   -- Contains a CMS type\
    \ ContentInfo encoded\n                   -- according to [RFC3852].\n       \
    \            -- The contentType field of the type ContentInfo is\n           \
    \        -- id-envelopedData (1.2.840.113549.1.7.3).\n                   -- The\
    \ content field is an EnvelopedData.\n                   -- The contentType field\
    \ for the type EnvelopedData\n                   -- is id-signedData (1.2.840.113549.1.7.2).\n\
    \                   -- The eContentType field for the inner type\n           \
    \        -- SignedData (when unencrypted) is\n                   -- id-pkinit-rkeyData\
    \ (1.3.6.1.5.2.3.3) and the\n                   -- eContent field contains the\
    \ DER encoding of the\n                   -- type ReplyKeyPack.\n            \
    \       -- ReplyKeyPack is defined below.\n          ...\n       }\n       DHRepInfo\
    \ ::= SEQUENCE {\n          dhSignedData            [0] IMPLICIT OCTET STRING,\n\
    \                   -- Contains a CMS type ContentInfo encoded according\n   \
    \                -- to [RFC3852].\n                   -- The contentType field\
    \ of the type ContentInfo is\n                   -- id-signedData (1.2.840.113549.1.7.2),\
    \ and the\n                   -- content field is a SignedData.\n            \
    \       -- The eContentType field for the type SignedData is\n               \
    \    -- id-pkinit-DHKeyData (1.3.6.1.5.2.3.2), and the\n                   --\
    \ eContent field contains the DER encoding of the\n                   -- type\
    \ KDCDHKeyInfo.\n                   -- KDCDHKeyInfo is defined below.\n      \
    \    serverDHNonce           [1] DHNonce OPTIONAL,\n                   -- Present\
    \ if and only if dhKeyExpiration is\n                   -- present.\n        \
    \  ...\n       }\n       KDCDHKeyInfo ::= SEQUENCE {\n          subjectPublicKey\
    \        [0] BIT STRING,\n                   -- The KDC's DH public key.\n   \
    \                -- The DH public key value is encoded as a BIT\n            \
    \       -- STRING according to [RFC3279].\n          nonce                   [1]\
    \ INTEGER (0..4294967295),\n                   -- Contains the nonce in the pkAuthenticator\
    \ field\n                   -- in the request if the DH keys are NOT reused,\n\
    \                   -- 0 otherwise.\n          dhKeyExpiration         [2] KerberosTime\
    \ OPTIONAL,\n                   -- Expiration time for KDC's key pair,\n     \
    \              -- present if and only if the DH keys are reused.\n           \
    \        -- If present, the KDC's DH public key MUST not be\n                \
    \   -- used past the point of this expiration time.\n                   -- If\
    \ this field is omitted then the serverDHNonce\n                   -- field MUST\
    \ also be omitted.\n          ...\n       }\n       ReplyKeyPack ::= SEQUENCE\
    \ {\n          replyKey                [0] EncryptionKey,\n                  \
    \ -- Contains the session key used to encrypt the\n                   -- enc-part\
    \ field in the AS-REP, i.e., the\n                   -- AS reply key.\n      \
    \    asChecksum              [1] Checksum,\n                  -- Contains the\
    \ checksum of the AS-REQ\n                  -- corresponding to the containing\
    \ AS-REP.\n                  -- The checksum is performed over the type AS-REQ.\n\
    \                  -- The protocol key [RFC3961] of the checksum is the\n    \
    \              -- replyKey and the key usage number is 6.\n                  --\
    \ If the replyKey's enctype is \"newer\" [RFC4120]\n                  -- [RFC4121],\
    \ the checksum is the required\n                  -- checksum operation [RFC3961]\
    \ for that enctype.\n                  -- The client MUST verify this checksum\
    \ upon receipt\n                  -- of the AS-REP.\n          ...\n       }\n\
    \       TD-DH-PARAMETERS ::= SEQUENCE OF AlgorithmIdentifier\n               \
    \    -- Each AlgorithmIdentifier specifies a set of\n                   -- Diffie-Hellman\
    \ domain parameters [IEEE1363].\n                   -- This list is in decreasing\
    \ preference order.\n       END\n"
- title: Appendix B.  Test Vectors
  contents:
  - "Appendix B.  Test Vectors\n   Function octetstring2key() is defined in Section\
    \ 3.2.3.1.  This\n   section describes a few sets of test vectors that would be\
    \ useful for\n   implementers of octetstring2key().\n   Set 1:\n   =====\n   Input\
    \ octet string x is:\n     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n \
    \    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00 00 00 00 00 00\
    \ 00 00 00 00 00 00 00 00 00\n     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00\n     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00 00 00 00\
    \ 00 00 00 00 00 00 00 00 00 00 00\n     00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00 00\n     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00 00\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00 00 00 00\n     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00 00 00 00 00 00 00 00\
    \ 00 00 00 00 00 00 00\n     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\
    \     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00 00 00 00 00\
    \ 00 00 00 00 00 00 00 00 00 00\n   Output of K-truncate() when the key size is\
    \ 32 octets:\n     5e e5 0d 67 5c 80 9f e5 9e 4a 77 62 c5 4b 65 83\n     75 47\
    \ ea fb 15 9b d8 cd c7 5f fc a5 91 1e 4c 41\n   Set 2:\n   =====\n   Input octet\
    \ string x is:\n     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00 00 00 00 00 00 00 00\
    \ 00 00 00 00 00 00 00\n     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\
    \     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00 00 00 00 00\
    \ 00 00 00 00 00 00 00 00 00 00\n     00 00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00\n     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   Output of K-truncate()\
    \ when the key size is 32 octets:\n     ac f7 70 7c 08 97 3d df db 27 cd 36 14\
    \ 42 cc fb\n     a3 55 c8 88 4c b4 72 f3 7d a6 36 d0 7d 56 78 7e\n   Set 3:\n\
    \   ======\n   Input octet string x is:\n     00 01 02 03 04 05 06 07 08 09 0a\
    \ 0b 0c 0d 0e 0f\n     10 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e\n     0f\
    \ 10 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d\n     0e 0f 10 00 01 02 03 04 05\
    \ 06 07 08 09 0a 0b 0c\n     0d 0e 0f 10 00 01 02 03 04 05 06 07 08 09 0a 0b\n\
    \     0c 0d 0e 0f 10 00 01 02 03 04 05 06 07 08 09 0a\n     0b 0c 0d 0e 0f 10\
    \ 00 01 02 03 04 05 06 07 08 09\n     0a 0b 0c 0d 0e 0f 10 00 01 02 03 04 05 06\
    \ 07 08\n   Output of K-truncate() when the key size is 32 octets:\n     c4 42\
    \ da 58 5f cb 80 e4 3b 47 94 6f 25 40 93 e3\n     73 29 d9 90 01 38 0d b7 83 71\
    \ db 3a cf 5c 79 7e\n   Set 4:\n   =====\n   Input octet string x is:\n     00\
    \ 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n     10 00 01 02 03 04 05 06 07\
    \ 08 09 0a 0b 0c 0d 0e\n     0f 10 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d\n\
    \     0e 0f 10 00 01 02 03 04 05 06 07 08 09 0a 0b 0c\n     0d 0e 0f 10 00 01\
    \ 02 03 04 05 06 07 08\n   Output of K-truncate() when the key size is 32 octets:\n\
    \     00 53 95 3b 84 c8 96 f4 eb 38 5c 3f 2e 75 1c 4a\n     59 0e d6 ff ad ca\
    \ 6f f6 4f 47 eb eb 8d 78 0f fc\n"
- title: Appendix C.  Miscellaneous Information about Microsoft Windows PKINIT
  contents:
  - "Appendix C.  Miscellaneous Information about Microsoft Windows PKINIT\n     \
    \        Implementations\n   Earlier revisions of the PKINIT I-D were implemented\
    \ in various\n   releases of Microsoft Windows and deployed in fairly large numbers.\n\
    \   To enable the community to interoperate better with systems running\n   those\
    \ releases, the following information may be useful.\n   KDC certificates issued\
    \ by Windows 2000 Enterprise CAs contain a\n   dNSName SAN with the DNS name of\
    \ the host running the KDC, and the\n   id-kp-serverAuth EKU [RFC3280].\n   KDC\
    \ certificates issued by Windows 2003 Enterprise CAs contain a\n   dNSName SAN\
    \ with the DNS name of the host running the KDC, the id-\n   kp-serverAuth EKU,\
    \ and the id-ms-kp-sc-logon EKU.\n   It is anticipated that the next release of\
    \ Windows is already too far\n   along to allow it to support the issuing KDC\
    \ certificates with id-\n   pkinit-san SAN as specified in this RFC.  Instead,\
    \ they will have a\n   dNSName SAN containing the domain name of the KDC, and\
    \ the intended\n   purpose of these KDC certificates will be restricted by the\
    \ presence\n   of the id-pkinit-KPKdc EKU and id-kp-serverAuth EKU.\n   In addition\
    \ to checking that the above are present in a KDC\n   certificate, Windows clients\
    \ verify that the issuer of the KDC\n   certificate is one of a set of allowed\
    \ issuers of such certificates,\n   so those wishing to issue KDC certificates\
    \ need to configure their\n   Windows clients appropriately.\n   Client certificates\
    \ accepted by Windows 2000 and Windows 2003 Server\n   KDCs must contain an id-ms-san-sc-logon-upn\
    \ (1.3.6.1.4.1.311.20.2.3)\n   SAN and the id-ms-kp-sc-logon EKU.  The id-ms-san-sc-logon-upn\
    \ SAN\n   contains a UTF8-encoded string whose value is that of the Directory\n\
    \   Service attribute UserPrincipalName of the client account object, and\n  \
    \ the purpose of including the id-ms-san-sc-logon-upn SAN in the client\n   certificate\
    \ is to validate the client mapping (in other words, the\n   client's public key\
    \ is bound to the account that has this\n   UserPrincipalName value).\n   It should\
    \ be noted that all Microsoft Kerberos realm names are\n   domain-style realm\
    \ names and strictly in uppercase.  In addition, the\n   UserPrincipalName attribute\
    \ is globally unique in Windows 2000 and\n   Windows 2003.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Larry Zhu\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA  98052\n   US\n   EMail: lzhu@microsoft.com\n   Brian Tung\n\
    \   Aerospace Corporation\n   2350 E. El Segundo Blvd.\n   El Segundo, CA  90245\n\
    \   US\n   EMail: brian@aero.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
