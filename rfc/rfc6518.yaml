- title: __initial_text__
  contents:
  - "         Keying and Authentication for Routing Protocols (KARP)\n           \
    \                Design Guidelines\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is one of a series concerned with defining a roadmap\
    \ of\n   protocol specification work for the use of modern cryptographic\n   mechanisms\
    \ and algorithms for message authentication in routing\n   protocols.  In particular,\
    \ it defines the framework for a key\n   management protocol that may be used\
    \ to create and manage session\n   keys for message authentication and integrity.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6518.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Conventions Used in This Document ..........................4\n  \
    \ 2. Categorizing Routing Protocols ..................................5\n    \
    \  2.1. Category: Message Transaction Type .........................5\n      2.2.\
    \ Category: Peer versus Group Keying .........................6\n   3. Consider\
    \ the Future Existence of a Key Management Protocol ......6\n      3.1. Consider\
    \ Asymmetric Keys ...................................7\n      3.2. Cryptographic\
    \ Keys Life Cycle ..............................8\n   4. Roadmap .........................................................9\n\
    \      4.1. Work Phases on Any Particular Protocol .....................9\n  \
    \    4.2. Work Items per Routing Protocol ...........................11\n   5.\
    \ Routing Protocols in Categories ................................13\n   6. Supporting\
    \ Incremental Deployment ..............................16\n   7. Denial-of-Service\
    \ Attacks ......................................17\n   8. Gap Analysis ...................................................18\n\
    \   9. Security Considerations ........................................20\n  \
    \    9.1. Use Strong Keys ...........................................21\n    \
    \  9.2. Internal versus External Operation ........................22\n      9.3.\
    \ Unique versus Shared Keys .................................22\n      9.4. Key\
    \ Exchange Mechanism ....................................24\n   10. Acknowledgments\
    \ ...............................................26\n   11. References ....................................................26\n\
    \       11.1. Normative References ....................................26\n  \
    \     11.2. Informative References ..................................26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In March 2006, the Internet Architecture Board (IAB) held\
    \ a workshop\n   on the topic of \"Unwanted Internet Traffic\".  The report from\
    \ that\n   workshop is documented in RFC 4948 [RFC4948].  Section 8.1 of that\n\
    \   document states that \"A simple risk analysis would suggest that an\n   ideal\
    \ attack target of minimal cost but maximal disruption is the\n   core routing\
    \ infrastructure\".  Section 8.2 calls for \"[t]ightening\n   the security of\
    \ the core routing infrastructure\".  Four main steps\n   were identified for\
    \ that tightening:\n   o  Increase the security mechanisms and practices for operating\n\
    \      routers.\n   o  Clean up the Internet Routing Registry [IRR] repository,\
    \ and\n      securing both the database and the access, so that it can be used\n\
    \      for routing verifications.\n   o  Create specifications for cryptographic\
    \ validation of routing\n      message content.\n   o  Secure the routing protocols'\
    \ packets on the wire.\n   The first bullet is being addressed in the OPSEC working\
    \ group.  The\n   second bullet should be addressed through liaisons with those\
    \ running\n   the IRR's globally.  The third bullet is being addressed in the\
    \ SIDR\n   working group.\n   This document addresses the last bullet, securing\
    \ the packets on the\n   wire of the routing protocol exchanges.  Thus, it is\
    \ concerned with\n   guidelines for describing issues and techniques for protecting\
    \ the\n   messages between directly communicating peers.  This may overlap\n \
    \  with, but is strongly distinct from, protection designed to ensure\n   that\
    \ routing information is properly authorized relative to sources\n   of this information.\
    \  Such authorizations are provided by other\n   mechanisms and are outside the\
    \ scope of this document and the work\n   that relies on it.\n   This document\
    \ uses the terminology \"on the wire\" to talk about the\n   information used\
    \ by routing systems.  This term is widely used in\n   RFCs, but is used in several\
    \ different ways.  In this document, it is\n   used to refer both to information\
    \ exchanged between routing protocol\n   instances and to underlying protocols\
    \ that may also need to be\n   protected in specific circumstances.  Other documents\
    \ that will\n   analyze individual protocols will need to indicate how they use\
    \ the\n   term \"on the wire\".\n   The term \"routing transport\" is used to\
    \ refer to the layer that\n   exchanges the routing protocols.  This can be TCP,\
    \ UDP, or even\n   direct link-level messaging in the case of some routing protocols.\n\
    \   The term is used here to allow a referent for discussing both common\n   and\
    \ disparate issues that affect or interact with this dimension of\n   the routing\
    \ systems.  The term is used here to refer generally to the\n   set of mechanisms\
    \ and exchanges underneath the routing protocol,\n   whatever that is in specific\
    \ cases.\n   Keying and Authentication for Routing Protocols (KARP) will focus\
    \ on\n   an abstraction for keying information that describes the interface\n\
    \   between routing protocols, operators, and automated key management.\n   Conceptually,\
    \ when routing protocols send or receive messages, they\n   will look up the key\
    \ to use in this abstract key table.\n   Conceptually, there will be an interface\
    \ for a routing protocol to\n   make requests of automated key management when\
    \ it is being used; when\n   keys become available, they will be made available\
    \ in the key table.\n   There is no requirement that this abstraction be used\
    \ for\n   implementation; the abstraction serves the needs of standardization\n\
    \   and management.  Specifically, as part of the KARP work plan:\n   1) KARP\
    \ will design the key table abstraction, the interface between\n      key management\
    \ protocols and routing protocols, and possibly\n      security protocols at other\
    \ layers.\n   2) For each routing protocol, KARP will define the mapping between\n\
    \      how the protocol represents key material and the protocol-\n      independent\
    \ key table abstraction.  When routing protocols share a\n      common mechanism\
    \ for authentication, such as the TCP\n      Authentication Option, the same mapping\
    \ is likely to be reused\n      between protocols.  An implementation may be able\
    \ to move much of\n      the keying logic into code related to this shared authentication\n\
    \      primitive rather than code specific to routing protocols.\n   3) When designing\
    \ automated key management for both symmetric keys\n      and group keys, we will\
    \ only use the abstractions designed in\n      point 1 above to communicate between\
    \ automated key management and\n      routing protocols.\n   Readers must refer\
    \ to [THTS-REQS] for a clear definition of the\n   scope, goals, non-goals, and\
    \ the audience for the design work being\n   undertaken in the KARP WG.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Categorizing Routing Protocols
  contents:
  - "2.  Categorizing Routing Protocols\n   This document places the routing protocols\
    \ into two categories\n   according to their requirements for authentication.\
    \  We hope these\n   categories will allow design teams to focus on security mechanisms\n\
    \   for a given category.  Further, we hope that each protocol in the\n   group\
    \ will be able to reuse the authentication mechanism.  It is also\n   hoped that,\
    \ down the road, we can create one Key Management Protocol\n   (KMP) per category\
    \ (if not for several categories), so that the work\n   can be easily leveraged\
    \ for use in the various routing protocol\n   groupings.  KMPs are useful for\
    \ allowing simple, automated updates of\n   the traffic keys used in a base protocol.\
    \  KMPs replace the need for\n   humans, or operational support systems (OSS)\
    \ routines, to\n   periodically replace keys on running systems.  It also removes\
    \ the\n   need for a chain of manual keys to be chosen or configured on such\n\
    \   systems.  When configured properly, a KMP will enforce the key\n   freshness\
    \ policy among peers by keeping track of the key's lifetime\n   and negotiating\
    \ a new key at the defined interval.\n"
- title: '2.1.  Category: Message Transaction Type'
  contents:
  - "2.1.  Category: Message Transaction Type\n   The first category defines three\
    \ types of messaging transactions used\n   on the wire by the base routing protocol.\
    \  They are as follows:\n      One-to-One\n         One peer router directly and\
    \ intentionally delivers a route\n         update specifically to one other peer\
    \ router.  Examples are BGP\n         [RFC4271]; LDP [RFC5036]; BFD [RFC5880];\
    \ and RSVP-TE [RFC3209],\n         [RFC3473], [RFC4726], and [RFC5151].  Point-to-point\
    \ modes of\n         both IS-IS [RFC1195] and OSPF [RFC2328], when sent over both\n\
    \         traditional point-to-point links and when using multi-access\n     \
    \    layers, may both also fall into this category.\n      One-to-Many\n     \
    \    A router peers with multiple other routers on a single network\n        \
    \ segment -- i.e., on link local -- such that it creates and\n         sends one\
    \ route update message that is intended for multiple\n         peers.  Examples\
    \ would be OSPF and IS-IS in their broadcast,\n         non-point-to-point mode\
    \ and Routing Information Protocol (RIP)\n         [RFC2453].\n      Multicast\n\
    \         Multicast protocols have unique security properties because\n      \
    \   they are inherently group-based protocols; thus, they have\n         group\
    \ keying requirements at the routing level where link-local\n         routing\
    \ messages are multicasted.  Also, at least in the case\n         of Protocol\
    \ Independent Multicast - Sparse Mode (PIM-SM)\n         [RFC4601], some messages\
    \ are sent unicast to a given peer(s),\n         as is the case with router-close-to-sender\
    \ and the \"Rendezvous\n         Point\".  Some work for application-layer message\
    \ security has\n         been done in the Multicast Security (MSEC) working group\
    \ and\n         may be helpful to review, but it is not directly applicable.\n\
    \   These categories affect both the routing protocol view of the\n   communication\
    \ and the actual message transfer.  As a result, some\n   message transaction\
    \ types for a few routing protocols may be\n   mixtures, for example, using broadcast\
    \ where multicast might be\n   expected or using unicast to deliver what looks\
    \ to the routing\n   protocol like broadcast or multicast.\n   Protocol security\
    \ analysis documents produced in the KARP working\n   group need to pay attention\
    \ both to the semantics of the\n   communication and the techniques that are used\
    \ for the message\n   exchanges.\n"
- title: '2.2.  Category: Peer versus Group Keying'
  contents:
  - "2.2.  Category: Peer versus Group Keying\n   The second category is the keying\
    \ mechanism that will be used to\n   distribute the session keys to the routing\
    \ transports.  They are as\n   follows:\n   Peer Keying\n      One router sends\
    \ the keying messages only to one other router,\n      such that a one-to-one,\
    \ uniquely keyed security association (SA)\n      is established between the two\
    \ routers (e.g., BGP, BFD and LDP).\n   Group Keying\n      One router creates\
    \ and distributes a single keying message to\n      multiple peers.  In this case,\
    \ a group SA will be established and\n      used among multiple peers simultaneously.\
    \  Group keying exists for\n      protocols like OSPF [RFC2328] and for multicast\
    \ protocols like\n      PIM-SM [RFC4601].\n"
- title: 3.  Consider the Future Existence of a Key Management Protocol
  contents:
  - "3.  Consider the Future Existence of a Key Management Protocol\n   When it comes\
    \ time for the KARP WG to design a reusable model for a\n   Key Management Protocol\
    \ (KMP), [RFC4107] should be consulted.\n   When conducting the design work on\
    \ a manually keyed version of a\n   routing protocol's authentication mechanism,\
    \ consideration must be\n   made for the eventual use of a KMP.  In particular,\
    \ design teams must\n   consider what parameters would need to be handed to the\
    \ routing\n   protocols by a KMP.\n   Examples of parameters that might need to\
    \ be passed are as follows: a\n   security association identifier (e.g., IPsec\
    \ Security Parameter Index\n   (SPI) or the TCP Authentication Option's (TCP-AO's)\
    \ KeyID), a key\n   lifetime (which may be represented in either bytes or seconds),\
    \ the\n   cryptographic algorithms being used, the keys themselves, and the\n\
    \   directionality of the keys (i.e., receiving versus the sending keys).\n"
- title: 3.1.  Consider Asymmetric Keys
  contents:
  - "3.1.  Consider Asymmetric Keys\n   The use of asymmetric keys can be a very powerful\
    \ way to authenticate\n   machine peers as used in routing protocol peer exchanges.\
    \  If\n   generated on the machine, and never moved off the machine, these keys\n\
    \   will not need to be changed if an administrator leaves the\n   organization.\
    \  Since the keys are random, they are far less\n   susceptible to off-line dictionary\
    \ and guessing attacks.\n   An easy and simple way to use asymmetric keys is to\
    \ start by having\n   the router generate a public/private key pair.  At the time\
    \ of this\n   writing, the recommended key size for algorithms based on integer\n\
    \   factorization cryptography like RSA is 1024 bits and 2048 bits for\n   extremely\
    \ valuable keys like the root key pair used by a\n   certification authority.\
    \  It is believed that a 1024-bit RSA key is\n   equivalent in strength to 80-bit\
    \ symmetric keys and 2048-bit RSA keys\n   to 112-bit symmetric keys [RFC3766].\
    \  Elliptic Curve Cryptography\n   (ECC) [RFC4492] appears to be secure with shorter\
    \ keys than those\n   needed by other asymmetric key algorithms.  National Institute\
    \ of\n   Standards and Technology (NIST) guidelines [NIST-800-57] state that\n\
    \   ECC keys should be twice the length of equivalent strength symmetric\n   key\
    \ algorithms.  Thus, a 224-bit ECC key would roughly have the same\n   strength\
    \ as a 112-bit symmetric key.\n   Many routers have the ability to be remotely\
    \ managed using Secure\n   Shell (SSH) Protocol [RFC4252] and [RFC4253].  As such,\
    \ routers will\n   also have the ability to generate and store an asymmetric key\
    \ pair,\n   because this is the common authentication method employed by SSH when\n\
    \   an administrator connects to a router for management sessions.\n   Once an\
    \ asymmetric key pair is generated, the KMP generating security\n   association\
    \ parameters and keys for routing protocol may use the\n   machine's asymmetric\
    \ keys for the authentication mechanism.  The form\n   of the identity proof could\
    \ be raw keys, the more easily\n   administrable self-signed certificate format,\
    \ or a PKI-issued\n   [RFC5280] certificate credential.\n   Regardless of which\
    \ credential is standardized, the authentication\n   mechanism can be as simple\
    \ as a strong hash over a string of human-\n   readable and transferable form\
    \ of ASCII characters.  More complex,\n   but also more secure, the identity proof\
    \ could be verified through\n   the use of a PKI system's revocation checking\
    \ mechanism, (e.g.,\n   Certificate Revocation List (CRL) or Online Certificate\
    \ Status\n   Protocol (OCSP) responder).  If the SHA-1 fingerprint is used, the\n\
    \   solution could be as simple as loading a set of neighbor routers'\n   peer\
    \ ID strings into a table and listing the associated fingerprint\n   string for\
    \ each ID string.  In most organizations or peering points,\n   this list will\
    \ not be longer than a thousand or so routers, and often\n   the list will be\
    \ much shorter.  In other words, the entire list for a\n   given organization's\
    \ router ID and hash could be held in a router's\n   configuration file, uploaded,\
    \ downloaded, and moved about at will.\n   Additionally, it doesn't matter who\
    \ sees or gains access to these\n   fingerprints, because they can be distributed\
    \ publicly as it needn't\n   be kept secret.\n"
- title: 3.2.  Cryptographic Keys Life Cycle
  contents:
  - "3.2.  Cryptographic Keys Life Cycle\n   Cryptographic keys should have a limited\
    \ lifetime and may need to be\n   changed when an operator who had access to them\
    \ leaves.  Using a key\n   chain, a set of keys derived from the same keying material\
    \ and used\n   one after the other, also does not help as one still has to change\n\
    \   all the keys in the key chain when an operator having access to all\n   those\
    \ keys leaves the company.  Additionally, key chains will not\n   help if the\
    \ routing transport subsystem does not support rolling over\n   to the new keys\
    \ without bouncing the routing sessions and\n   adjacencies.  So the first step\
    \ is to fix the routing stack so that\n   routing protocols can change keys without\
    \ breaking or bouncing the\n   adjacencies.\n   An often cited reason for limiting\
    \ the lifetime of a key is to\n   minimize the damage from a compromised key.\
    \  It could be argued that\n   it is likely a user will not discover an attacker\
    \ has compromised the\n   key if the attacker remains \"passive\"; thus, relatively\
    \ frequent key\n   changes will limit any potential damage from compromised keys.\n\
    \   Another threat against the long-lived key is that one of the systems\n   storing\
    \ the key, or one of the users entrusted with the key, will be\n   subverted.\
    \  So, while there may not be cryptographic motivations of\n   changing the keys,\
    \ there could be system security motivations for\n   rolling the key.\n   Although\
    \ manual key distribution methods are subject to human error\n   and frailty,\
    \ more frequent manual key changes might actually increase\n   the risk of exposure,\
    \ as it is during the time that the keys are\n   being changed that they are likely\
    \ to be disclosed.  In these cases,\n   especially when very strong cryptography\
    \ is employed, it may be more\n   prudent to have fewer, well-controlled manual\
    \ key distributions\n   rather than more frequent, poorly controlled manual key\n\
    \   distributions.  In general, where strong cryptography is employed,\n   physical,\
    \ procedural, and logical access protection considerations\n   often have more\
    \ impact on the key life than do algorithm and key size\n   factors.\n   For incremental\
    \ deployments, we could start by associating life times\n   with the send and\
    \ the receive keys in the key chain for the long-\n   lived keys.  This is an\
    \ incremental approach that we could use until\n   the cryptographic keying material\
    \ for individual sessions is derived\n   from the keying material stored in a\
    \ database of long-lived\n   cryptographic keys as described in [CRPT-TAB].  A\
    \ key derivation\n   function (KDF) and its inputs are also specified in the database\
    \ of\n   long-lived cryptographic keys; session-specific values based on the\n\
    \   routing protocol are input to the KDF.  Protocol-specific key\n   identifiers\
    \ may be assigned to the cryptographic keying material for\n   individual sessions\
    \ if needed.\n   The long-lived cryptographic keys used by the routing protocols\
    \ can\n   either be inserted manually in a database or make use of an automated\n\
    \   key management protocol to do this.\n"
- title: 4.  Roadmap
  contents:
  - '4.  Roadmap

    '
- title: 4.1.  Work Phases on Any Particular Protocol
  contents:
  - "4.1.  Work Phases on Any Particular Protocol\n   It is believed that improving\
    \ security for any routing protocol will\n   be a two-phase process.  The first\
    \ phase would be to modify routing\n   protocols to support modern cryptography\
    \ algorithms and key agility.\n   The second phase would be to design and move\
    \ to an automated key\n   management mechanism.  This is like a crawl, walk, and\
    \ run process.\n   In order for operators to accept these phases, we believe that\
    \ the\n   key management protocol should be clearly separated from the routing\n\
    \   transport.  This would mean that the routing transport subsystem is\n   oblivious\
    \ to how the keys are derived, exchanged, and downloaded as\n   long as there\
    \ is something that it can use.  It is like having a\n   routing-protocol-configuration\
    \ switch that requests the security\n   module for the \"KARP security parameters\"\
    \ so that it can refer to\n   some module written, maintained, and operated by\
    \ security experts and\n   insert those parameters in the routing exchange.\n\
    \   The desired end state for the KARP work contains several items.\n   First,\
    \ the people desiring to deploy securely authenticated and\n   integrity validated\
    \ packets between routing peers have the tools\n   specified, implemented, and\
    \ shipped in order to deploy.  These tools\n   should be fairly simple to implement\
    \ and not more complex than the\n   security mechanisms to which the operators\
    \ are already accustomed.\n   (Examples of security mechanisms to which router\
    \ operators are\n   accustomed include: the use of asymmetric keys for authentication\
    \ in\n   SSH for router configuration, the use of pre-shared keys (PSKs) in\n\
    \   TCP MD5 for BGP protection, the use of self-signed certificates for\n   HTTP\
    \ Secure (HTTPS) access to device Web-based user interfaces, the\n   use of strongly\
    \ constructed passwords and/or identity tokens for user\n   identification when\
    \ logging into routers and management systems.)\n   While the tools that we intend\
    \ to specify may not be able to stop a\n   deployment from using \"foobar\" as\
    \ an input key for every device\n   across their entire routing domain, we intend\
    \ to make a solid, modern\n   security system that is not too much more difficult\
    \ than that.  In\n   other words, simplicity and deployability are keys to success.\
    \  The\n   routing protocols will specify modern cryptographic algorithms and\n\
    \   security mechanisms.  Routing peers will be able to employ unique,\n   pair-wise\
    \ keys per peering instance, with reasonable key lifetimes,\n   and updating those\
    \ keys on a regular basis will be operationally\n   easy, causing no service interruption.\n\
    \   Achieving the above described end state using manual keys may be\n   pragmatic\
    \ only in very small deployments.  However, manual keying in\n   larger deployments\
    \ will be too burdensome for operators.  Thus, the\n   second goal is to support\
    \ key life cycle management with a KMP.  We\n   expect that both manual and automated\
    \ key management will coexist in\n   the real world.\n   In accordance with the\
    \ desired end state just described, we define\n   two main work phases for each\
    \ routing protocol:\n   1.  Enhance the routing protocol's current authentication\n\
    \       mechanism(s).  This work involves enhancing a routing protocol's\n   \
    \    current security mechanisms in order to achieve a consistent,\n       modern\
    \ level of security functionality within its existing key\n       management framework.\
    \  It is understood and accepted that the\n       existing key management frameworks\
    \ are largely based on manual\n       keys.  Since many operators have already\
    \ built operational\n       support systems (OSS) around these manual key implementations,\n\
    \       there is some automation available for an operator to leverage in\n  \
    \     that way, if the underlying mechanisms are themselves secure.  In\n    \
    \   this phase, we explicitly exclude embedding or creating a KMP.\n       Refer\
    \ to [THTS-REQS] for the list of the requirements for Phase 1\n       work.\n\
    \   2.  Develop an automated key management framework.  The second phase\n   \
    \    will focus on the development of an automated keying framework to\n     \
    \  facilitate unique pair-wise (group-wise, where applicable) keys\n       per\
    \ peering instance.  This involves the use of a KMP.  The use\n       of automatic\
    \ key management mechanisms offers a number of\n       benefits over manual keying.\
    \  Most important, it provides fresh\n       traffic keying material for each\
    \ session, thus helping to prevent\n       inter-connection replay attacks.  In\
    \ an inter-connection replay\n       attack, protocol packets from the earlier\
    \ protocol session are\n       replayed affecting the current execution of the\
    \ protocol.  A KMP\n       is also helpful because it negotiates unique, pair-wise,\
    \ random\n       keys, without administrator involvement.  It negotiates several\n\
    \       SA parameters like algorithms, modes, and parameters required for\n  \
    \     the secure connection, thus providing interoperability between\n       endpoints\
    \ with disparate capabilities and configurations.  In\n       addition it could\
    \ also include negotiating the key lifetimes.\n       The KMP can thus keep track\
    \ of those lifetimes using counters and\n       can negotiate new keys and parameters\
    \ before they expire, again,\n       without administrator interaction.  Additionally,\
    \ in the event of\n       a breach, changing the KMP key will immediately cause\
    \ a rekey to\n       occur for the traffic key, and those new traffic keys will\
    \ be\n       installed and used in the current connection.  In summary, a KMP\n\
    \       provides a protected channel between the peers through which they\n  \
    \     can negotiate and pass important data required to exchange proof\n     \
    \  of identities, derive traffic keys, determine rekeying,\n       synchronize\
    \ their keying state, signal various keying events,\n       notify with error\
    \ messages, etc.\n"
- title: 4.2.  Work Items per Routing Protocol
  contents:
  - "4.2.  Work Items per Routing Protocol\n   Each routing protocol will have a team\
    \ (the Routing_Protocol-KARP\n   team, e.g., the OSPF-KARP team) working on incrementally\
    \ improving\n   the security of a routing protocol.  These teams will have the\n\
    \   following main work items:\n   PHASE 1:\n      Characterize the Routing Protocol\n\
    \         Assess the routing protocol to see what authentication and\n       \
    \  integrity mechanisms it has today.  Does it need significant\n         improvement\
    \ to its existing mechanisms or not?  This will\n         include determining\
    \ if modern, strong security algorithms and\n         parameters are present and\
    \ if the protocol supports key agility\n         without bouncing adjacencies.\n\
    \      Define Optimal State\n         List the requirements for the routing protocol's\
    \ session key\n         usage and format to contain modern, strong security algorithms\n\
    \         and mechanisms, per the Requirements document [THTS-REQS].  The\n  \
    \       goal here is to determine what is needed for the routing\n         protocol\
    \ to be used securely with at least manual key\n         management.\n      Gap\
    \ Analysis\n         Enumerate the requirements for this protocol to move from\
    \ its\n         current security state, the first bullet, to its optimal state,\n\
    \         as listed just above.\n      Transition and Deployment Considerations\n\
    \         Document the operational transition plan for moving from the\n     \
    \    old to the new security mechanism.  Will adjacencies need to\n         bounce?\
    \  What new elements/servers/services in the\n         infrastructure will be\
    \ required?  What is an example work flow\n         that an operator will take?\
    \  The best possible case is if the\n         adjacency does not break, but this\
    \ may not always be possible.\n      Define, Assign, Design\n         Create a\
    \ deliverables list of the design and specification\n         work, with milestones.\
    \  Define owners.  Release one or more\n         documents.\n   PHASE 2:\n   \
    \   KMP Analysis\n         Review requirements for KMPs.  Identify any nuances\
    \ for this\n         particular routing protocol's needs and its use cases for\
    \ a\n         KMP.  List the requirements that this routing protocol has for\n\
    \         being able to be used in conjunction with a KMP.  Define the\n     \
    \    optimal state and check how easily it can be decoupled from the\n       \
    \  KMP.\n      Gap Analysis\n         Enumerate the requirements for this protocol\
    \ to move from its\n         current security state to its optimal state, with\
    \ respect to\n         the key management.\n      Define, Assign, Design\n   \
    \      Create a deliverables list of the design and specification\n         work,\
    \ with milestones.  Define owners.  Generate the design and\n         document\
    \ work for a KMP to be able to generate the routing\n         protocol's session\
    \ keys for the packets on the wire.  These\n         will be the arguments passed\
    \ in the API to the KMP in order to\n         bootstrap the session keys for the\
    \ routing protocol.\n         There will also be a team formed to work on the\
    \ base framework\n         mechanisms for each of the main categories.\n"
- title: 5.  Routing Protocols in Categories
  contents:
  - "5.  Routing Protocols in Categories\n   This section groups the routing protocols\
    \ into categories according\n   to attributes set forth in the Categories' Section\
    \ (Section 2).  Each\n   group will have a design team tasked with improving the\
    \ security of\n   the routing protocol mechanisms and defining the KMP requirements\
    \ for\n   their group, then rolling both into a roadmap document upon which\n\
    \   they will execute.\n   BGP, LDP, PCEP, and MSDP\n      These routing protocols\
    \ fall into the category of the one-to-one\n      peering messages and will use\
    \ peer keying protocols.  Border\n      Gateway Protocol (BGP) [RFC4271], Path\
    \ Computation Element\n      Communication Protocol (PCEP) [RFC5440], and Multicast\
    \ Source\n      Discovery Protocol (MSDP) [RFC3618] messages are transmitted over\n\
    \      TCP, while Label Distribution Protocol (LDP) [RFC5036] uses both\n    \
    \  UDP and TCP.  A team will work on one mechanism to cover these TCP\n      unicast\
    \ protocols.  Much of the work on the routing protocol\n      update for its existing\
    \ authentication mechanism has already\n      occurred in the TCPM working group,\
    \ on the TCP-AO [RFC5925]\n      document, as well as its cryptography-helper\
    \ document, TCP-AO-\n      CRYPTO [RFC5926].  However, TCP-AO cannot be used for\
    \ discovery\n      exchanges carried in LDP as those are carried over UDP.  A\n\
    \      separate team might want to look at LDP.  Another exception is the\n  \
    \    mode where LDP is used directly on the LAN.  The work for this may\n    \
    \  go into the group keying category (along with OSPF) as mentioned\n      below.\n\
    \   OSPF, IS-IS, and RIP\n      The routing protocols that fall into the category\
    \ group keying\n      (with one-to-many peering) includes OSPF [RFC2328], IS-IS\n\
    \      [RFC1195] and RIP [RFC2453].  Not surprisingly, all these routing\n   \
    \   protocols have two other things in common.  First, they are run on\n     \
    \ a combination of the OSI datalink Layer 2, and the OSI network\n      Layer\
    \ 3.  By this we mean that they have a component of how the\n      routing protocol\
    \ works, which is specified in Layer 2 as well as\n      in Layer 3.  Second,\
    \ they are all internal gateway protocols\n      (IGPs).  The keying mechanisms\
    \ will be much more complicated to\n      define for these than for a one-to-one\
    \ messaging protocol.\n   BFD\n      Because it is less of a routing protocol,\
    \ per se, and more of a\n      peer liveness detection mechanism, Bidirectional\
    \ Forwarding\n      Detection (BFD) [RFC5880] will have its own team.  BFD is\
    \ also\n      different from the other protocols covered here as it works on\n\
    \      millisecond timers and would need separate considerations to\n      mitigate\
    \ the potential for Denial-of-Service (DoS) attacks.  It\n      also raises interesting\
    \ issues [RFC6039] with respect to the\n      sequence number scheme that is generally\
    \ deployed to protect\n      against replay attacks as this space can roll over\
    \ quite\n      frequently because of the rate at which BFD packets are generated.\n\
    \   RSVP and RSVP-TE\n      The Resource reSerVation Protocol (RSVP) [RFC2205]\
    \ allows hop-by-\n      hop authentication of RSVP neighbors, as specified in\
    \ [RFC2747].\n      In this mode, an integrity object is attached to each RSVP\
    \ message\n      to transmit a keyed message digest.  This message digest allows\n\
    \      the recipient to verify the identity of the RSVP node that sent\n     \
    \ the message and to validate the integrity of the message.  Through\n      the\
    \ inclusion of a sequence number in the scope of the digest, the\n      digest\
    \ also offers replay protection.\n      [RFC2747] does not dictate how the key\
    \ for the integrity operation\n      is derived.  Currently, most implementations\
    \ of RSVP use a\n      statically configured key, on a per-interface or per-neighbor\n\
    \      basis.\n      RSVP relies on a per-peer authentication mechanism where\
    \ each hop\n      authenticates its neighbor using a shared key or a certificate.\n\
    \      Trust in this model is transitive.  Each RSVP node trusts,\n      explicitly,\
    \ only its RSVP next-hop peers through the message\n      digest contained in\
    \ the INTEGRITY object [RFC2747].  The next-hop\n      RSVP speaker, in turn,\
    \ trusts its own peers, and so on.  See also\n      the document \"RSVP Security\
    \ Properties\" [RFC4230] for more\n      background.\n      The keys used for\
    \ protecting the RSVP messages can be group keys\n      (for example, distributed\
    \ via the Group Domain of Interpretation\n      (GDOI) [RFC6407], as discussed\
    \ in [GDOI-MAC]).\n      The trust an RSVP node has with another RSVP node has\
    \ an explicit\n      and implicit component.  Explicitly, the node trusts the\
    \ other\n      node to maintain the integrity (and, optionally, the\n      confidentiality)\
    \ of RSVP messages depending on whether\n      authentication or encryption (or\
    \ both) are used.  This means that\n      the message has not been altered or\
    \ its contents seen by another,\n      non-trusted node.  Implicitly, each node\
    \ trusts the other node to\n      maintain the level of protection specified within\
    \ that security\n      domain.  Note that in any group key management scheme,\
    \ like GDOI,\n      each node trusts all the other members of the group with regard\
    \ to\n      data origin authentication.\n      RSVP-TE [RFC3209], [RFC3473], [RFC4726],\
    \ and [RFC5151] is an\n      extension of the RSVP protocol for traffic engineering.\
    \  It\n      supports the reservation of resources across an IP network and is\n\
    \      used for establishing MPLS label switch paths (LSPs), taking into\n   \
    \   consideration network constraint parameters such as available\n      bandwidth\
    \ and explicit hops.  RSVP-TE signaling is used to\n      establish both intra-\
    \ and inter-domain TE LSPs.\n      When signaling an inter-domain RSVP-TE LSP,\
    \ operators may make use\n      of the security features already defined for RSVP-TE\
    \ [RFC3209].\n      This may require some coordination between domains to share\
    \ keys\n      ([RFC2747][RFC3097]), and care is required to ensure that the keys\n\
    \      are changed sufficiently frequently.  Note that this may involve\n    \
    \  additional synchronization, should the domain border nodes be\n      protected\
    \ with Fast Reroute, since the merge point (MP) and point\n      of local repair\
    \ (PLR) should also share the key.\n      For inter-domain signaling for MPLS-TE,\
    \ the administrators of\n      neighboring domains must satisfy themselves as\
    \ to the existence of\n      a suitable trust relationship between the domains.\
    \  In the absence\n      of such a relationship, the administrators should decide\
    \ not to\n      deploy inter-domain signaling and should disable RSVP-TE on any\n\
    \      inter-domain interfaces.\n      KARP will currently be working only on\
    \ RSVP-TE, as the native RSVP\n      lies outside the scope of the WG charter.\n\
    \   PIM-SM and PIM-DM\n      Finally, the multicast protocols Protocol Independent\
    \ Multicast -\n      Sparse Mode (PIM-SM) [RFC4601] and Protocol Independent Multicast\n\
    \      - Dense Mode (PIM-DM) [RFC3973] will be grouped together.  PIM-SM\n   \
    \   multicasts routing information (Hello, Join/Prune, Assert) on a\n      link-local\
    \ basis, using a defined multicast address.  In addition,\n      it specifies\
    \ unicast communication for exchange of information\n      (Register, Register-Stop)\
    \ between the router closest to a group\n      sender and the \"Rendezvous Point\"\
    .  The Rendezvous Point is\n      typically not \"on-link\" for a particular router.\
    \  While much work\n      has been done on multicast security for application-layer\
    \ groups,\n      little has been done to address the problem of managing hundreds\n\
    \      or thousands of small one-to-many groups with link-local scope.\n     \
    \ Such an authentication mechanism should be considered along with\n      the\
    \ router-to-Rendezvous Point authentication mechanism.  The most\n      important\
    \ issue is ensuring that only the \"authorized neighbors\"\n      get the keys\
    \ for source/group (S,G), so that rogue routers cannot\n      participate in the\
    \ exchanges.  Another issue is that some of the\n      communication may occur\
    \ intra-domain, e.g., the link-local\n      messages in an enterprise, while others\
    \ for the same (*,G) may\n      occur inter-domain, e.g., the router-to-Rendezvous\
    \ Point messages\n      may be from one enterprise's router to another.\n    \
    \  One possible solution proposes a region-wide \"master\" key server\n      (possibly\
    \ replicated), and one \"local\" key server per speaking\n      router.  There\
    \ is no issue with propagating the messages outside\n      the link, because link-local\
    \ messages, by definition, are not\n      forwarded.  This solution is offered\
    \ only as an example of how\n      work may progress; further discussion should\
    \ occur in this work\n      team.  Specification of a link-local protection mechanism\
    \ for PIM-\n      SM is defined in [RFC4601], and this mechanism has been updated\
    \ in\n      PIM-SM-LINKLOCAL [RFC5796].  However, the KMP part is completely\n\
    \      unspecified and will require work outside the expertise of the PIM\n  \
    \    working group to accomplish, another example of why this roadmap\n      is\
    \ being created.\n"
- title: 6.  Supporting Incremental Deployment
  contents:
  - "6.  Supporting Incremental Deployment\n   It is imperative that the new authentication\
    \ and security mechanisms\n   defined support incremental deployment, as it is\
    \ not feasible to\n   deploy a new routing protocol authentication mechanism throughout\
    \ the\n   network instantaneously.  One of the goals of the KARP WG is to add\n\
    \   incremental security to existing mechanisms rather than replacing\n   them.\
    \  Delivering better deployable solutions to which vendors and\n   operators can\
    \ migrate is more important than getting a perfect\n   security solution.  It\
    \ may also not be possible to deploy such a\n   mechanism to all routers in a\
    \ large Autonomous System (AS) at one\n   time.  This means that the designers\
    \ must work on this aspect of the\n   authentication mechanism for the routing\
    \ protocol on which they are\n   working.  The mechanisms must provide backward\
    \ compatibility in the\n   message formatting, transmission, and processing of\
    \ routing\n   information carried through a mixed security environment.\n"
- title: 7.  Denial-of-Service Attacks
  contents:
  - "7.  Denial-of-Service Attacks\n   DoS attacks must be kept in mind when designing\
    \ KARP solutions.\n   [THTS-REQS] describes DoS attacks that are in scope for\
    \ the KARP\n   work.  Protocol designers should ensure that the new cryptographic\n\
    \   validation mechanisms must not provide an attacker with an\n   opportunity\
    \ for DoS attacks.  Cryptographic validation, while\n   typically cheaper than\
    \ signing, is still an incremental cost.  If an\n   attacker can force a system\
    \ to validate many packets multiple times,\n   then this could be a potential\
    \ DoS attack vector.  On the other hand,\n   if the authentication procedure is\
    \ itself quite CPU intensive, then\n   overwhelming the CPU with multiple bogus\
    \ packets can bring down the\n   system.  In this case, the authentication procedure\
    \ itself aids the\n   DoS attack.\n   There are some known techniques to reduce\
    \ the cryptographic\n   computation load.  Packets can include non-cryptographic\
    \ consistency\n   checks.  For example, [RFC5082] provides a mechanism that uses\
    \ the IP\n   header to limit the attackers that can inject packets that will be\n\
    \   subject to cryptographic validation.  In the design, Phase 2, once an\n  \
    \ automated key management protocol is developed, it may be possible to\n   determine\
    \ the peer IP addresses that are valid participants.  Only\n   the packets from\
    \ the verified sources could be subject to\n   cryptographic validation.\n   Protocol\
    \ designers must ensure that a device never needs to check\n   incoming protocol\
    \ packets using multiple keys, as this can overwhelm\n   the CPU, leading to a\
    \ DoS attack.  KARP solutions should indicate the\n   checks that are appropriate\
    \ prior to performing cryptographic\n   validation.  KARP solutions should indicate\
    \ where information about\n   valid neighbors can be used to limit the scope of\
    \ the attacks.\n   Particular care needs to be paid to the design of automated\
    \ key\n   management schemes.  It is often desirable to force a party\n   attempting\
    \ to authenticate to do work and to maintain state until\n   that work is done.\
    \  That is, the initiator of the authentication\n   should maintain the cost of\
    \ any state required by the authentication\n   for as long as possible.  This\
    \ also helps when an attacker sends an\n   overwhelming load of keying protocol\
    \ initiations from bogus sources.\n   Another important class of attack is denial\
    \ of service against the\n   routing protocol where an attacker can manipulate\
    \ either the routing\n   protocol or the cryptographic authentication mechanism\
    \ to disrupt\n   routing adjacencies.\n   Without KARP solutions, many routing\
    \ protocols are subject to\n   disruption simply by injecting an invalid packet\
    \ or a packet for the\n   wrong state.  Even with cryptographic validation, replay\
    \ attacks are\n   often a vector where a previously valid packet can be injected\
    \ to\n   create a denial of service.   KARP solutions should prevent all cases\n\
    \   where packet replays or other packet injections by an outsider can\n   disrupt\
    \ routing sessions.\n   Some residual denial-of-service risk is always likely.\
    \  If an\n   attacker can generate a large enough number of packets, the routing\n\
    \   protocol can get disrupted.  Even if the routing protocol is not\n   disrupted,\
    \ the loss rate on a link may rise to a point where claiming\n   that traffic\
    \ can successfully be routed across the link will be\n   inaccurate.\n"
- title: 8.  Gap Analysis
  contents:
  - "8.  Gap Analysis\n   The [THTS-REQS] document lists the generic requirements\
    \ for the\n   security mechanisms that must exist for the various routing protocols\n\
    \   that come under the purview of KARP.  There will be different design\n   teams\
    \ working for each of the categories of routing protocols\n   defined.\n   To\
    \ start, design teams must review the \"Threats and Requirements for\n   Authentication\
    \ of routing protocols\" document [THTS-REQS].  This\n   document contains detailed\
    \ descriptions of the threat analysis for\n   routing protocol authentication\
    \ and integrity in general.  Note that\n   it does not contain all the authentication-related\
    \ threats for any\n   one routing protocol, or category of routing protocols.\
    \  The design\n   team must conduct a protocol-specific threat analysis to determine\
    \ if\n   threats beyond those in the [THTS-REQS] document arise in the context\n\
    \   of the protocol (group) and to describe those threats.\n   The [THTS-REQS]\
    \ document also contains many security requirements.\n   Each routing protocol\
    \ design team must walk through each section of\n   the requirements and determine\
    \ one by one how its protocol either\n   does or does not relate to each requirement.\n\
    \   Examples include modern, strong, cryptographic algorithms, with at\n   least\
    \ one such algorithm listed as a MUST, algorithm agility, secure\n   use of simple\
    \ PSKs, intra-connection replay protection, inter-\n   connection replay protection,\
    \ etc.\n   When doing the gap analysis, we must first identify the elements of\n\
    \   each routing protocol that we wish to protect.  In case of protocols\n   riding\
    \ on top of IP, we might want to protect the IP header and the\n   protocol headers,\
    \ while for those that work on top of TCP, it will be\n   the TCP header and the\
    \ protocol payload.  There is patently value in\n   protecting the IP header and\
    \ the TCP header if the routing protocols\n   rely on these headers for some information\
    \ (for example, identifying\n   the neighbor that originated the packet).\n  \
    \ Then, there will be a set of cryptography requirements that we might\n   want\
    \ to look at.  For example, there must be at least one set of\n   cryptographic\
    \ algorithms (MD5, SHA, etc.) or constructions (Hashed\n   MAC (HMAC), etc.) whose\
    \ use is supported by all implementations and\n   can be safely assumed to be\
    \ supported by any implementation of the\n   authentication option.  The design\
    \ teams should look for the protocol\n   on which they are working.  If such algorithms\
    \ or constructions are\n   not available, then some should be defined to support\n\
    \   interoperability by having a single default.\n   Design teams must ensure\
    \ that the default cryptographic algorithms\n   and constructions supported by\
    \ the routing protocols are accepted by\n   the community.  This means that the\
    \ protocols must not rely on non-\n   standard or ad hoc hash functions, keyed-hash\
    \ constructions,\n   signature schemes, or other functions, and they must use\
    \ published\n   and standard schemes.\n   Care should also be taken to ensure\
    \ that the routing protocol\n   authentication scheme has algorithm agility (i.e.,\
    \ it is capable of\n   supporting algorithms other than its defaults).  Ideally,\
    \ the\n   authentication mechanism should not be affected by packet loss and\n\
    \   reordering.\n   Design teams should ensure that their protocol's authentication\n\
    \   mechanism is able to accommodate rekeying.  This is essential since\n   it\
    \ is well known that keys must periodically be changed.  Also, what\n   the designers\
    \ must ensure is that this rekeying event should not\n   affect the functioning\
    \ of the routing protocol.  For example, OSPF\n   rekeying requires coordination\
    \ among the adjacent routers, while IS-\n   IS requires coordination among routers\
    \ in the entire domain.\n   If new authentication and security mechanisms are\
    \ needed, then the\n   design teams must design in such a manner that the routing\
    \ protocol\n   authentication mechanism remains oblivious to how the keying material\n\
    \   is derived.  This decouples the authentication mechanism from the key\n  \
    \ management system that is employed.\n   Design teams should also note that many\
    \ routing protocols require\n   prioritized treatment of certain protocol packets\
    \ and authentication\n   mechanisms should honor this.\n   Not all routing protocol\
    \ authentication mechanisms provide support\n   for replay attacks, and the design\
    \ teams should identify such\n   authentication mechanisms and work on them so\
    \ that this can get\n   fixed.  The design teams must look at the protocols that\
    \ they are\n   working on and see if packets captured from the previous/stale\n\
    \   sessions can be replayed.\n   What might also influence the design is the\
    \ rate at which the\n   protocol packets are originated.  In case of protocols\
    \ like BFD,\n   where packets are originated at millisecond intervals, there are\
    \ some\n   special considerations that must be kept in mind when defining the\n\
    \   new authentication and security mechanisms.\n   The designers should also\
    \ consider whether the current authentication\n   mechanisms impose considerable\
    \ processing overhead on a router that's\n   doing authentication.  Most currently\
    \ deployed routers do not have\n   hardware accelerators for cryptographic processing\
    \ and these\n   operations can impose a significant processing burden under some\n\
    \   circumstances.  The proposed solutions should be evaluated carefully\n   with\
    \ regard to the processing burden that they will impose, since\n   deployment\
    \ may be impeded if network operators perceive that a\n   solution will impose\
    \ a processing burden which either entails\n   substantial capital expenses or\
    \ threatens to destabilize the routers.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   As mentioned in the Introduction, RFC 4948 [RFC4948]\
    \ identifies\n   additional steps needed to achieve the overall goal of improving\
    \ the\n   security of the core routing infrastructure.  Those include\n   validation\
    \ of route origin announcements, path validation, cleaning\n   up the IRR databases\
    \ for accuracy, and operational security practices\n   that prevent routers from\
    \ becoming compromised devices.  The KARP\n   work is but one step needed to improve\
    \ core routing infrastructure.\n   The security of cryptographic-based systems\
    \ depends on both the\n   strength of the cryptographic algorithms chosen and\
    \ the strength of\n   the keys used with those algorithms.  The security also\
    \ depends on\n   the engineering of the protocol used by the system to ensure\
    \ that\n   there are no non-cryptographic ways to bypass the security of the\n\
    \   overall system.\n"
- title: 9.1.  Use Strong Keys
  contents:
  - "9.1.  Use Strong Keys\n   Care should be taken to ensure that the selected key\
    \ is\n   unpredictable, avoiding any keys known to be weak for the algorithm\n\
    \   in use.  [RFC4086] contains helpful information on both key\n   generation\
    \ techniques and cryptographic randomness.\n   Care should also be taken when\
    \ choosing the length of the key.\n   [RFC3766] provides some additional information\
    \ on asymmetric and\n   symmetric key sizes and how they relate to system requirements\
    \ for\n   attack resistance.\n   In addition to using a key of appropriate length\
    \ and randomness,\n   deployers of KARP should use different keys between different\
    \ routing\n   peers whenever operationally possible.  This is especially true\
    \ when\n   the routing protocol takes a static traffic key as opposed to a\n \
    \  traffic key derived on a per-connection basis using a KDF.  The\n   burden\
    \ for doing so is understandably much higher than using the same\n   static traffic\
    \ key across all peering routers.  Depending upon the\n   specific KMP, it can\
    \ be argued that generally using a KMP network-\n   wide increases peer-wise security.\
    \  Consider an attacker that learns\n   or guesses the traffic key used by two\
    \ peer routers: if the traffic\n   key is only used between those two routers,\
    \ then the attacker has\n   only compromised that one connection not the entire\
    \ network.\n   However whenever using manual keys, it is best to design a system\n\
    \   where a given pre-shared key (PSK) will be used in a KDF mixed with\n   connection-specific\
    \ material, in order to generate session unique --\n   and therefore peer-wise\
    \ -- traffic keys.  Doing so has the following\n   advantages: the traffic keys\
    \ used in the per-message authentication\n   mechanism are peer-wise unique, it\
    \ provides inter-connection replay\n   protection, and if the per-message authentication\
    \ mechanism covers\n   some connection counter, intra-connection replay protection.\n\
    \   Note that certain key derivation functions (e.g., KDF_AES_128_CMAC)\n   as\
    \ used in TCP-AO [RFC5926], the pseudorandom function (PRF) used in\n   the KDF\
    \ may require a key of a certain fixed size as an input.\n   For example, AES_128_CMAC\
    \ requires a 128-bit (16-byte) key as the\n   seed.  However, for the convenience\
    \ of the administrators, a\n   specification may not want to require the entry\
    \ of a PSK be of\n   exactly 16 bytes.  Instead, a specification may call for\
    \ a key prep\n   routine that could handle a variable-length PSK, one that might\
    \ be\n   less or more than 16 bytes (see [RFC4615], Section 3, as an example).\n\
    \   That key prep routine would derive a key of exactly the required\n   length,\
    \ thus, be suitable as a seed to the PRF.  This does NOT mean\n   that administrators\
    \ are safe to use weak keys.  Administrators are\n   encouraged to follow [RFC4086]\
    \ [NIST-800-118].  We simply attempted\n   to \"put a fence around stupidity\"\
    , as much as possible as it's hard\n   to imagine administrators putting in a\
    \ password that is, say 16 bytes\n   in length.\n   A better option, from a security\
    \ perspective, is to use some\n   representation of a device-specific asymmetric\
    \ key pair as the\n   identity proof, as described in section \"Unique versus\
    \ Shared Keys\"\n   section.\n"
- title: 9.2.  Internal versus External Operation
  contents:
  - "9.2.  Internal versus External Operation\n   Design teams must consider whether\
    \ the protocol is an internal\n   routing protocol or an external one, i.e., does\
    \ it primarily run\n   between peers within a single domain of control or between\
    \ two\n   different domains of control?  Some protocols may be used in both\n\
    \   cases, internally and externally, and as such, various modes of\n   authentication\
    \ operation may be required for the same protocol.\n   While it is preferred that\
    \ all routing exchanges run with the best\n   security mechanisms enabled in all\
    \ deployment contexts, this\n   exhortation is greater for those protocols running\
    \ on inter-domain\n   point-to-point links.  It is greatest for those on shared\
    \ access link\n   layers with several different domains interchanging together,\
    \ because\n   the volume of attackers are greater from the outside.  Note however,\n\
    \   that the consequences of internal attacks maybe no less severe -- in\n   fact,\
    \ they may be quite a bit more severe -- than an external attack.\n   An example\
    \ of this internal versus external consideration is BGP,\n   which has both EBGP\
    \ and IBGP modes.  Another example is a multicast\n   protocol where the neighbors\
    \ are sometimes within a domain of control\n   and sometimes at an inter-domain\
    \ exchange point.  In the case of PIM-\n   SM running on an internal multi-access\
    \ link, it would be acceptable\n   to give up some security to get some convenience\
    \ by using a group key\n   among the peers on the link.  On the other hand, in\
    \ the case of PIM-\n   SM running over a multi-access link at a public exchange\
    \ point,\n   operators may favor security over convenience by using unique pair-\n\
    \   wise keys for every peer.  Designers must consider both modes of\n   operation\
    \ and ensure the authentication mechanisms fit both.\n   Operators are encouraged\
    \ to run cryptographic authentication on all\n   their adjacencies, but to work\
    \ from the outside in, i.e., External\n   BGP (EBGP) links are a higher priority\
    \ than the Internal BGP (IBGP)\n   links because they are externally facing, and,\
    \ as a result, more\n   likely to be targeted in an attack.\n"
- title: 9.3.  Unique versus Shared Keys
  contents:
  - "9.3.  Unique versus Shared Keys\n   This section discusses security considerations\
    \ regarding when it is\n   appropriate to use the same authentication key inputs\
    \ for multiple\n   peers and when it is not.  This is largely a debate of convenience\n\
    \   versus security.  It is often the case that the best secured\n   mechanism\
    \ is also the least convenient mechanism.  For example, an\n   air gap between\
    \ a host and the network absolutely prevents remote\n   attacks on the host, but\
    \ having to copy and carry files using the\n   \"sneaker net\" is quite inconvenient\
    \ and does not scale.\n   Operators have erred on the side of convenience when\
    \ it comes to\n   securing routing protocols with cryptographic authentication.\
    \  Many\n   do not use it at all.  Some use it only on external links, but not\
    \ on\n   internal links.  Those that do use it often use the same key for all\n\
    \   peers in a network.  It is common to see the same key in use for\n   years,\
    \ e.g., the key was entered when authentication mechanisms were\n   originally\
    \ configured or when the routing gear was deployed.\n   One goal for designers\
    \ is to create authentication and integrity\n   mechanisms that are easy for operators\
    \ to deploy and manage, and\n   still use unique keys between peers (or small\
    \ groups on multi-access\n   links) and for different sessions among the same\
    \ peers.  Operators\n   have the impression that they NEED one key shared across\
    \ the network,\n   when, in fact, they do not.  What they need is the relative\n\
    \   convenience they experience from deploying cryptographic\n   authentication\
    \ with one key (or a few keys) compared to the\n   inconvenience they would experience\
    \ if they deployed the same\n   authentication mechanism using unique pair-wise\
    \ keys.  An example is\n   BGP route reflectors.  Here, operators often use the\
    \ same\n   authentication key between each client and the route reflector.  The\n\
    \   roadmaps defined from this guidance document should allow for unique\n   keys\
    \ to be used between each client and the peer, without sacrificing\n   much convenience.\
    \  Designers should strive to deliver peer-wise\n   unique keying mechanisms with\
    \ similar ease-of-deployment properties\n   as today's one-key method.\n   Operators\
    \ must understand the consequences of using the same key\n   across many peers.\
    \  One argument against using the same key is that\n   if the same key that is\
    \ used in multiple devices, then a compromise\n   of any one of the devices will\
    \ expose the key.  Also, since the same\n   key is supported on many devices,\
    \ this is known by many people, which\n   affects its distribution to all of the\
    \ devices.\n   Consider also the attack consequence size, the amount of routing\n\
    \   adjacencies that can be negatively affected once a breach has\n   occurred,\
    \ i.e., once the keys have been acquired by the attacker.\n   Again, if a shared\
    \ key is used across the internal domain, then the\n   consequence size is the\
    \ whole network.  Ideally, unique key pairs\n   would be used for each adjacency.\n\
    \   In some cases, use of shared keys is needed because of the problem\n   space.\
    \  For example, a multicast packet is sent once but then\n   consumed by several\
    \ routing neighbors.  If unique keys were used per\n   neighbor, the benefit of\
    \ multicast would be erased because the sender\n   would have to create a different\
    \ announcement packet for each\n   receiver.  Though this may be desired and acceptable\
    \ in some small\n   number of use cases, it is not the norm.  Shared (i.e., group)\
    \ keys\n   are an acceptable solution here, and much work has been done already\n\
    \   in this area (by the MSEC working group).\n"
- title: 9.4.  Key Exchange Mechanism
  contents:
  - "9.4.  Key Exchange Mechanism\n   This section discusses the security and use\
    \ case considerations for\n   key exchange for routing protocols.  Two options\
    \ exist: an out-of-\n   band mechanism or a KMP.  An out-of-band mechanism involves\
    \ operators\n   configuring keys in the device through a configuration tool or\n\
    \   management method (e.g., Simple Network Management Protocol (SNMP),\n   Network\
    \ Configuration Protocol (NETCONF)).  A KMP is an automated\n   protocol that\
    \ exchanges keys without operator intervention.  KMPs can\n   occur either in-band\
    \ to the routing protocol or out-of-band to the\n   routing protocol (i.e., a\
    \ different protocol).\n   An example of an out-of-band configuration mechanism\
    \ could be an\n   administrator who makes a remote management connection (e.g.,\
    \ using\n   SSH) to a router and manually enters the keying information, e.g.,\n\
    \   the algorithm, the key(s), the key lifetimes, etc.  Another example\n   could\
    \ be an OSS system that inputs the same information by using a\n   script over\
    \ an SSH connection or by pushing configuration through\n   some other management\
    \ connection, standard (NETCONF-based) or\n   proprietary.\n   The drawbacks of\
    \ an out-of-band configuration mechanism include lack\n   of scalability, complexity,\
    \ and speed of changing if a security\n   breach is suspected.  For example, if\
    \ an employee who had access to\n   keys was terminated, or if a machine holding\
    \ those keys was believed\n   to be compromised, then the system would be considered\
    \ insecure and\n   vulnerable until new keys were generated and distributed. \
    \ Those keys\n   then need to be placed into the OSS system, and the OSS system\
    \ then\n   needs to push the new keys -- often during a very limited change\n\
    \   window -- into the relevant devices.  If there are multiple\n   organizations\
    \ involved in these connections, because the protected\n   connections are inter-domain,\
    \ this process is very complicated.\n   The principle benefit of out-of-band configuration\
    \ mechanism is that\n   once the new keys/parameters are set in OSS system, they\
    \ can be\n   pushed automatically to all devices within the OSS's domain.\n  \
    \ Operators have mechanisms in place for this already for managing\n   other router\
    \ configuration data.  In small environments with few\n   routers, a manual system\
    \ is not difficult to employ.\n   We further define a peer-to-peer KMP as using\
    \ cryptographically\n   protected identity verification, session key negotiation,\
    \ and\n   security association parameter negotiation between the two routing\n\
    \   peers.  The KMP among peers may also include the negotiation of\n   parameters,\
    \ like cryptographic algorithms, cryptographic inputs\n   (e.g., initialization\
    \ vectors), key lifetimes, etc.\n   There are several benefits of a peer-to-peer\
    \ KMP versus centrally\n   managed and distributing keys.  It results in key(s)\
    \ that are\n   privately generated, and it need not be recorded permanently\n\
    \   anywhere.  Since the traffic keys used in a particular connection are\n  \
    \ not a fixed part of a device configuration, no security sensitive\n   data exists\
    \ anywhere else in the operator's systems that can be\n   stolen, e.g., in the\
    \ case of a terminated or turned employee.  If a\n   server or other data store\
    \ is stolen or compromised, the thieves gain\n   limited or no access to current\
    \ traffic keys.  They may gain access\n   to key derivation material, like a PSK,\
    \ but may not be able to access\n   the current traffic keys in use.  In this\
    \ example, these PSKs can be\n   updated in the device configurations (either\
    \ manually or through an\n   OSS) without bouncing or impacting the existing session\
    \ at all.  In\n   the case of using raw asymmetric keys or certificates, instead\
    \ of\n   PSKs, the data theft (from the data store) would likely not result in\n\
    \   any compromise, as the key pairs would have been generated on the\n   routers\
    \ and never leave those routers.  In such a case, no changes\n   are needed on\
    \ the routers; the connections will continue to be\n   secure, uncompromised.\
    \  Additionally, with a KMP, regular rekey\n   operations occur without any operator\
    \ involvement or oversight.  This\n   keeps keys fresh.\n   There are a few drawbacks\
    \ to using a KMP.  First, a KMP requires more\n   cryptographic processing for\
    \ the router at the beginning of a\n   connection.  This will add some minor start-up\
    \ time to connection\n   establishment versus a purely manual key management approach.\
    \  Once a\n   connection with traffic keys has been established via a KMP, the\n\
    \   performance is the same in the KMP and the out-of-band configuration\n   case.\
    \  KMPs also add another layer of protocol and configuration\n   complexity, which\
    \ can fail or be misconfigured.  This was more of an\n   issue when these KMPs\
    \ were first deployed, but less so as these\n   implementations and operational\
    \ experience with them have matured.\n   One of the goals for KARP is to develop\
    \ a KMP; an out-of-band\n   configuration protocol for key exchange is out of\
    \ scope.\n   Within this constraint, there are two approaches for a KMP:\n   The\
    \ first is to use a KMP that runs independent of the routing and\n   the signaling\
    \ protocols.  It would run on its own port and use its\n   own transport (to avoid\
    \ interfering with the routing protocol that it\n   is serving).  When a routing\
    \ protocol needs a key, it would contact\n   the local instance of this key management\
    \ protocol and request a key.\n   The KMP generates a key that is delivered to\
    \ the routing protocol for\n   it to use for authenticating and integrity verification\
    \ of the\n   routing protocol packets.  This KMP could either be an existing key\n\
    \   management protocol such as ISAKMP/IKE, GKMP, etc., extended for the\n   routing\
    \ protocols, or it could be a new KMP, designed for the routing\n   protocol context.\n\
    \   The second approach is to define an in-band KMP extension for\n   existing\
    \ routing protocols putting the key management mechanisms\n   inside the protocol\
    \ itself.  In this case, the key management\n   messages would be carried within\
    \ the routing protocol packets,\n   resulting in very tight coupling between the\
    \ routing protocols and\n   the key management protocol.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   Much of the text for this document came originally from\
    \ \"Roadmap for\n   Cryptographic Authentication of Routing Protocol Packets on\
    \ the\n   Wire\", authored by Gregory M. Lebovitz.\n   We would like to thank\
    \ Sam Hartman, Eric Rescorla, Russ White, Sean\n   Turner, Stephen Kent, Stephen\
    \ Farrell, Adrian Farrel, Russ Housley,\n   Michael Barnes, and Vishwas Manral\
    \ for their comments on the\n   document.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC4948]      Andersson, L., Davies, E., and L. Zhang, \"Report\
    \ from\n                  the IAB workshop on Unwanted Traffic March 9-10,\n \
    \                 2006\", RFC 4948, August 2007.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC1195]      Callon, R., \"Use of OSI IS-IS\
    \ for routing in TCP/IP\n                  and dual environments\", RFC 1195,\
    \ December 1990.\n   [RFC2205]      Braden, R., Ed., Zhang, L., Berson, S., Herzog,\
    \ S.,\n                  and S. Jamin, \"Resource ReSerVation Protocol (RSVP)\
    \ --\n                  Version 1 Functional Specification\", RFC 2205,\n    \
    \              September 1997.\n   [RFC2328]      Moy, J., \"OSPF Version 2\"\
    , STD 54, RFC 2328, April\n                  1998.\n   [RFC2453]      Malkin,\
    \ G., \"RIP Version 2\", STD 56, RFC 2453,\n                  November 1998.\n\
    \   [RFC2747]      Baker, F., Lindell, B., and M. Talwar, \"RSVP\n           \
    \       Cryptographic Authentication\", RFC 2747, January 2000.\n   [RFC3097]\
    \      Braden, R. and L. Zhang, \"RSVP Cryptographic\n                  Authentication\
    \ -- Updated Message Type Value\", RFC\n                  3097, April 2001.\n\
    \   [RFC3209]      Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan,\n   \
    \               V., and G. Swallow, \"RSVP-TE: Extensions to RSVP for\n      \
    \            LSP Tunnels\", RFC 3209, December 2001.\n   [RFC3473]      Berger,\
    \ L., Ed., \"Generalized Multi-Protocol Label\n                  Switching (GMPLS)\
    \ Signaling Resource ReserVation\n                  Protocol-Traffic Engineering\
    \ (RSVP-TE) Extensions\",\n                  RFC 3473, January 2003.\n   [RFC3618]\
    \      Fenner, B., Ed., and D. Meyer, Ed., \"Multicast Source\n              \
    \    Discovery Protocol (MSDP)\", RFC 3618, October 2003.\n   [RFC3766]      Orman,\
    \ H. and P. Hoffman, \"Determining Strengths For\n                  Public Keys\
    \ Used For Exchanging Symmetric Keys\", BCP\n                  86, RFC 3766, April\
    \ 2004.\n   [RFC3973]      Adams, A., Nicholas, J., and W. Siadak, \"Protocol\n\
    \                  Independent Multicast - Dense Mode (PIM-DM): Protocol\n   \
    \               Specification (Revised)\", RFC 3973, January 2005.\n   [RFC4086]\
    \      Eastlake 3rd, D., Schiller, J., and S. Crocker,\n                  \"Randomness\
    \ Requirements for Security\", BCP 106, RFC\n                  4086, June 2005.\n\
    \   [RFC4107]      Bellovin, S. and R. Housley, \"Guidelines for\n           \
    \       Cryptographic Key Management\", BCP 107, RFC 4107, June\n            \
    \      2005.\n   [RFC4230]      Tschofenig, H. and R. Graveman, \"RSVP Security\n\
    \                  Properties\", RFC 4230, December 2005.\n   [RFC4252]      Ylonen,\
    \ T. and C. Lonvick, Ed., \"The Secure Shell\n                  (SSH) Authentication\
    \ Protocol\", RFC 4252, January\n                  2006.\n   [RFC4253]      Ylonen,\
    \ T. and C. Lonvick, Ed., \"The Secure Shell\n                  (SSH) Transport\
    \ Layer Protocol\", RFC 4253, January\n                  2006.\n   [RFC4271] \
    \     Rekhter, Y., Ed., Li, T., Ed., and S. Hares, Ed., \"A\n                \
    \  Border Gateway Protocol 4 (BGP-4)\", RFC 4271, January\n                  2006.\n\
    \   [RFC4492]      Blake-Wilson, S., Bolyard, N., Gupta, V., Hawk, C.,\n     \
    \             and B. Moeller, \"Elliptic Curve Cryptography (ECC)\n          \
    \        Cipher Suites for Transport Layer Security (TLS)\", RFC\n           \
    \       4492, May 2006.\n   [RFC4601]      Fenner, B., Handley, M., Holbrook,\
    \ H., and I.\n                  Kouvelas, \"Protocol Independent Multicast - Sparse\n\
    \                  Mode (PIM-SM): Protocol Specification (Revised)\", RFC\n  \
    \                4601, August 2006.\n   [RFC4615]      Song, J., Poovendran, R.,\
    \ Lee, J., and T. Iwata, \"The\n                  Advanced Encryption Standard-Cipher-based\
    \ Message\n                  Authentication Code-Pseudo-Random Function-128 (-\n\
    \                  AES-CMAC-PRF-128) Algorithm for the Internet Key\n        \
    \          Exchange Protocol (IKE)\", RFC 4615, August 2006.\n   [RFC4726]   \
    \   Farrel, A., Vasseur, J.-P., and A. Ayyangar, \"A\n                  Framework\
    \ for  Inter-Domain Multiprotocol Label\n                  Switching Traffic Engineering\"\
    , RFC 4726, November\n                  2006.\n   [RFC5036]      Andersson, L.,\
    \ Ed., Minei, I., Ed., and B. Thomas,\n                  Ed., \"LDP Specification\"\
    , RFC 5036, October 2007.\n   [RFC5082]      Gill, V., Heasley, J., Meyer, D.,\
    \ Savola, P., Ed., and\n                  C. Pignataro, \"The Generalized TTL\
    \ Security Mechanism\n                  (GTSM)\", RFC 5082, October 2007.\n  \
    \ [RFC5151]      Farrel, A., Ed., Ayyangar, A., and JP. Vasseur,\n           \
    \       \"Inter-Domain MPLS and GMPLS Traffic Engineering --\n               \
    \   Resource Reservation Protocol-Traffic Engineering\n                  (RSVP-TE)\
    \ Extensions\", RFC 5151, February 2008.\n   [RFC5280]      Cooper, D., Santesson,\
    \ S., Farrell, S., Boeyen, S.,\n                  Housley, R., and W. Polk, \"\
    Internet X.509 Public Key\n                  Infrastructure Certificate and Certificate\
    \ Revocation\n                  List (CRL) Profile\", RFC 5280, May 2008.\n  \
    \ [RFC5440]      Vasseur, JP., Ed., and JL. Le Roux, Ed., \"Path\n           \
    \       Computation Element (PCE) Communication Protocol\n                  (PCEP)\"\
    , RFC 5440, March 2009.\n   [RFC5796]      Atwood, W., Islam, S., and M. Siami,\
    \ \"Authentication\n                  and Confidentiality in Protocol Independent\
    \ Multicast\n                  Sparse Mode (PIM-SM) Link-Local Messages\", RFC\
    \ 5796,\n                  March 2010.\n   [RFC5880]      Katz, D. and D. Ward,\
    \ \"Bidirectional Forwarding\n                  Detection (BFD)\", RFC 5880, June\
    \ 2010.\n   [RFC5925]      Touch, J., Mankin, A., and R. Bonica, \"The TCP\n \
    \                 Authentication Option\", RFC 5925, June 2010.\n   [RFC5926]\
    \      Lebovitz, G. and E. Rescorla, \"Cryptographic\n                  Algorithms\
    \ for the TCP Authentication Option (TCP-\n                  AO)\", RFC 5926,\
    \ June 2010.\n   [RFC6039]      Manral, V., Bhatia, M., Jaeggli, J., and R. White,\n\
    \                  \"Issues with Existing Cryptographic Protection Methods\n \
    \                 for Routing Protocols\", RFC 6039, October 2010.\n   [RFC6407]\
    \      Weis, B., Rowles, S., and T. Hardjono, \"The Group\n                  Domain\
    \ of Interpretation\", RFC 6407, October 2011.\n   [THTS-REQS]    Lebovitz, G.,\
    \ \"The Threat Analysis and Requirements\n                  for Cryptographic\
    \ Authentication of Routing Protocols'\n                  Transports\", Work in\
    \ Progress, June 2011.\n   [CRPT-TAB]     Housley, R. and Polk, T., \"Database\
    \ of Long-Lived\n                  Symmetric Cryptographic Keys\", Work in Progress,\n\
    \                  October 2011\n   [GDOI-MAC]     Weis, B. and S. Rowles, \"\
    GDOI Generic Message\n                  Authentication Code Policy\", Work in\
    \ Progress,\n                  September 2011.\n   [IRR]          Merit Network\
    \ Inc , \"Internet Routing Registry Routing\n                  Assets Database\"\
    , 2006, http://www.irr.net/.\n   [NIST-800-57]  US National Institute of Standards\
    \ & Technology,\n                  \"Recommendation for Key Management Part 1:\
    \ General\n                  (Revised)\", March 2007\n   [NIST-800-118] US National\
    \ Institute of Standards & Technology,\n                  \"Guide to Enterprise\
    \ Password Management (Draft)\",\n                  April 2009\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Gregory M. Lebovitz\n   Aptos, California\n   USA 95003\n\
    \   EMail: gregory.ietf@gmail.com\n   Manav Bhatia\n   Alcatel-Lucent\n   Bangalore\n\
    \   India\n   EMail: manav.bhatia@alcatel-lucent.com\n"
