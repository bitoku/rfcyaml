- title: __initial_text__
  contents:
  - '                  Computing TCP''s Retransmission Timer

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines the standard algorithm that Transmission\n\
    \   Control Protocol (TCP) senders are required to use to compute and\n   manage\
    \ their retransmission timer.  It expands on the discussion in\n   Section 4.2.3.1\
    \ of RFC 1122 and upgrades the requirement of\n   supporting the algorithm from\
    \ a SHOULD to a MUST.  This document\n   obsoletes RFC 2988.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6298.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Transmission Control Protocol (TCP) [Pos81] uses a retransmission\n\
    \   timer to ensure data delivery in the absence of any feedback from the\n  \
    \ remote data receiver.  The duration of this timer is referred to as\n   RTO\
    \ (retransmission timeout).  RFC 1122 [Bra89] specifies that the\n   RTO should\
    \ be calculated as outlined in [Jac88].\n   This document codifies the algorithm\
    \ for setting the RTO.  In\n   addition, this document expands on the discussion\
    \ in Section 4.2.3.1\n   of RFC 1122 and upgrades the requirement of supporting\
    \ the algorithm\n   from a SHOULD to a MUST.  RFC 5681 [APB09] outlines the algorithm\
    \ TCP\n   uses to begin sending after the RTO expires and a retransmission is\n\
    \   sent.  This document does not alter the behavior outlined in RFC 5681\n  \
    \ [APB09].\n   In some situations, it may be beneficial for a TCP sender to be\
    \ more\n   conservative than the algorithms detailed in this document allow.\n\
    \   However, a TCP MUST NOT be more aggressive than the following\n   algorithms\
    \ allow.  This document obsoletes RFC 2988 [PA00].\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in [Bra97].\n"
- title: 2.  The Basic Algorithm
  contents:
  - "2.  The Basic Algorithm\n   To compute the current RTO, a TCP sender maintains\
    \ two state\n   variables, SRTT (smoothed round-trip time) and RTTVAR (round-trip\n\
    \   time variation).  In addition, we assume a clock granularity of G\n   seconds.\n\
    \   The rules governing the computation of SRTT, RTTVAR, and RTO are as\n   follows:\n\
    \   (2.1) Until a round-trip time (RTT) measurement has been made for a\n    \
    \     segment sent between the sender and receiver, the sender SHOULD\n      \
    \   set RTO <- 1 second, though the \"backing off\" on repeated\n         retransmission\
    \ discussed in (5.5) still applies.\n         Note that the previous version of\
    \ this document used an initial\n         RTO of 3 seconds [PA00].  A TCP implementation\
    \ MAY still use\n         this value (or any other value > 1 second).  This change\
    \ in the\n         lower bound on the initial RTO is discussed in further detail\n\
    \         in Appendix A.\n   (2.2) When the first RTT measurement R is made, the\
    \ host MUST set\n            SRTT <- R\n            RTTVAR <- R/2\n          \
    \  RTO <- SRTT + max (G, K*RTTVAR)\n         where K = 4.\n   (2.3) When a subsequent\
    \ RTT measurement R' is made, a host MUST set\n            RTTVAR <- (1 - beta)\
    \ * RTTVAR + beta * |SRTT - R'|\n            SRTT <- (1 - alpha) * SRTT + alpha\
    \ * R'\n         The value of SRTT used in the update to RTTVAR is its value\n\
    \         before updating SRTT itself using the second assignment.  That\n   \
    \      is, updating RTTVAR and SRTT MUST be computed in the above\n         order.\n\
    \         The above SHOULD be computed using alpha=1/8 and beta=1/4 (as\n    \
    \     suggested in [JK88]).\n         After the computation, a host MUST update\n\
    \         RTO <- SRTT + max (G, K*RTTVAR)\n   (2.4) Whenever RTO is computed,\
    \ if it is less than 1 second, then the\n         RTO SHOULD be rounded up to\
    \ 1 second.\n         Traditionally, TCP implementations use coarse grain clocks\
    \ to\n         measure the RTT and trigger the RTO, which imposes a large\n  \
    \       minimum value on the RTO.  Research suggests that a large\n         minimum\
    \ RTO is needed to keep TCP conservative and avoid\n         spurious retransmissions\
    \ [AP99].  Therefore, this specification\n         requires a large minimum RTO\
    \ as a conservative approach, while\n         at the same time acknowledging that\
    \ at some future point,\n         research may show that a smaller minimum RTO\
    \ is acceptable or\n         superior.\n   (2.5) A maximum value MAY be placed\
    \ on RTO provided it is at least 60\n         seconds.\n"
- title: 3.  Taking RTT Samples
  contents:
  - "3.  Taking RTT Samples\n   TCP MUST use Karn's algorithm [KP87] for taking RTT\
    \ samples.  That\n   is, RTT samples MUST NOT be made using segments that were\n\
    \   retransmitted (and thus for which it is ambiguous whether the reply\n   was\
    \ for the first instance of the packet or a later instance).  The\n   only case\
    \ when TCP can safely take RTT samples from retransmitted\n   segments is when\
    \ the TCP timestamp option [JBB92] is employed, since\n   the timestamp option\
    \ removes the ambiguity regarding which instance\n   of the data segment triggered\
    \ the acknowledgment.\n   Traditionally, TCP implementations have taken one RTT\
    \ measurement at\n   a time (typically, once per RTT).  However, when using the\
    \ timestamp\n   option, each ACK can be used as an RTT sample.  RFC 1323 [JBB92]\n\
    \   suggests that TCP connections utilizing large congestion windows\n   should\
    \ take many RTT samples per window of data to avoid aliasing\n   effects in the\
    \ estimated RTT.  A TCP implementation MUST take at\n   least one RTT measurement\
    \ per RTT (unless that is not possible per\n   Karn's algorithm).\n   For fairly\
    \ modest congestion window sizes, research suggests that\n   timing each segment\
    \ does not lead to a better RTT estimator [AP99].\n   Additionally, when multiple\
    \ samples are taken per RTT, the alpha and\n   beta defined in Section 2 may keep\
    \ an inadequate RTT history.  A\n   method for changing these constants is currently\
    \ an open research\n   question.\n"
- title: 4.  Clock Granularity
  contents:
  - "4.  Clock Granularity\n   There is no requirement for the clock granularity G\
    \ used for\n   computing RTT measurements and the different state variables.\n\
    \   However, if the K*RTTVAR term in the RTO calculation equals zero, the\n  \
    \ variance term MUST be rounded to G seconds (i.e., use the equation\n   given\
    \ in step 2.3).\n       RTO <- SRTT + max (G, K*RTTVAR)\n   Experience has shown\
    \ that finer clock granularities (<= 100 msec)\n   perform somewhat better than\
    \ coarser granularities.\n   Note that [Jac88] outlines several clever tricks\
    \ that can be used to\n   obtain better precision from coarse granularity timers.\
    \  These\n   changes are widely implemented in current TCP implementations.\n"
- title: 5.  Managing the RTO Timer
  contents:
  - "5.  Managing the RTO Timer\n   An implementation MUST manage the retransmission\
    \ timer(s) in such a\n   way that a segment is never retransmitted too early,\
    \ i.e., less than\n   one RTO after the previous transmission of that segment.\n\
    \   The following is the RECOMMENDED algorithm for managing the\n   retransmission\
    \ timer:\n   (5.1) Every time a packet containing data is sent (including a\n\
    \         retransmission), if the timer is not running, start it running\n   \
    \      so that it will expire after RTO seconds (for the current value\n     \
    \    of RTO).\n   (5.2) When all outstanding data has been acknowledged, turn\
    \ off the\n         retransmission timer.\n   (5.3) When an ACK is received that\
    \ acknowledges new data, restart the\n         retransmission timer so that it\
    \ will expire after RTO seconds\n         (for the current value of RTO).\n  \
    \ When the retransmission timer expires, do the following:\n   (5.4) Retransmit\
    \ the earliest segment that has not been acknowledged\n         by the TCP receiver.\n\
    \   (5.5) The host MUST set RTO <- RTO * 2 (\"back off the timer\").  The\n  \
    \       maximum value discussed in (2.5) above may be used to provide\n      \
    \   an upper bound to this doubling operation.\n   (5.6) Start the retransmission\
    \ timer, such that it expires after RTO\n         seconds (for the value of RTO\
    \ after the doubling operation\n         outlined in 5.5).\n   (5.7) If the timer\
    \ expires awaiting the ACK of a SYN segment and the\n         TCP implementation\
    \ is using an RTO less than 3 seconds, the RTO\n         MUST be re-initialized\
    \ to 3 seconds when data transmission\n         begins (i.e., after the three-way\
    \ handshake completes).\n         This represents a change from the previous version\
    \ of this\n         document [PA00] and is discussed in Appendix A.\n   Note that\
    \ after retransmitting, once a new RTT measurement is\n   obtained (which can\
    \ only happen when new data has been sent and\n   acknowledged), the computations\
    \ outlined in Section 2 are performed,\n   including the computation of RTO, which\
    \ may result in \"collapsing\"\n   RTO back down after it has been subject to\
    \ exponential back off (rule\n   5.5).\n   Note that a TCP implementation MAY\
    \ clear SRTT and RTTVAR after\n   backing off the timer multiple times as it is\
    \ likely that the current\n   SRTT and RTTVAR are bogus in this situation.  Once\
    \ SRTT and RTTVAR\n   are cleared, they should be initialized with the next RTT\
    \ sample\n   taken per (2.2) rather than using (2.3).\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document requires a TCP to wait for a given\
    \ interval before\n   retransmitting an unacknowledged segment.  An attacker could\
    \ cause a\n   TCP sender to compute a large value of RTO by adding delay to a\
    \ timed\n   packet's latency, or that of its acknowledgment.  However, the\n \
    \  ability to add delay to a packet's latency often coincides with the\n   ability\
    \ to cause the packet to be lost, so it is difficult to see\n   what an attacker\
    \ might gain from such an attack that could cause more\n   damage than simply\
    \ discarding some of the TCP connection's packets.\n   The Internet, to a considerable\
    \ degree, relies on the correct\n   implementation of the RTO algorithm (as well\
    \ as those described in\n   RFC 5681) in order to preserve network stability and\
    \ avoid congestion\n   collapse.  An attacker could cause TCP endpoints to respond\
    \ more\n   aggressively in the face of congestion by forging acknowledgments for\n\
    \   segments before the receiver has actually received the data, thus\n   lowering\
    \ RTO to an unsafe value.  But to do so requires spoofing the\n   acknowledgments\
    \ correctly, which is difficult unless the attacker can\n   monitor traffic along\
    \ the path between the sender and the receiver.\n   In addition, even if the attacker\
    \ can cause the sender's RTO to reach\n   too small a value, it appears the attacker\
    \ cannot leverage this into\n   much of an attack (compared to the other damage\
    \ they can do if they\n   can spoof packets belonging to the connection), since\
    \ the sending TCP\n   will still back off its timer in the face of an incorrectly\n\
    \   transmitted packet's loss due to actual congestion.\n   The security considerations\
    \ in RFC 5681 [APB09] are also applicable\n   to this document.\n"
- title: 7.  Changes from RFC 2988
  contents:
  - "7.  Changes from RFC 2988\n   This document reduces the initial RTO from the\
    \ previous 3 seconds\n   [PA00] to 1 second, unless the SYN or the ACK of the\
    \ SYN is lost, in\n   which case the default RTO is reverted to 3 seconds before\
    \ data\n   transmission begins.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The RTO algorithm described in this memo was originated\
    \ by Van\n   Jacobson in [Jac88].\n   Much of the data that motivated changing\
    \ the initial RTO from 3\n   seconds to 1 second came from Robert Love, Andre\
    \ Broido, and Mike\n   Belshe.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [APB09] Allman, M., Paxson, V., and E. Blanton,\
    \ \"TCP Congestion\n           Control\", RFC 5681, September 2009.\n   [Bra89]\
    \ Braden, R., Ed., \"Requirements for Internet Hosts -\n           Communication\
    \ Layers\", STD 3, RFC 1122, October 1989.\n   [Bra97] Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n           Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [JBB92] Jacobson, V., Braden, R., and D. Borman, \"TCP Extensions\
    \ for\n           High Performance\", RFC 1323, May 1992.\n   [Pos81] Postel,\
    \ J., \"Transmission Control Protocol\", STD 7, RFC 793,\n           September\
    \ 1981.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [AP99]  Allman, M. and V. Paxson, \"On Estimating\
    \ End-to-End Network\n           Path Properties\", SIGCOMM 99.\n   [Chu09] Chu,\
    \ J., \"Tuning TCP Parameters for the 21st Century\",\n           http://www.ietf.org/proceedings/75/slides/tcpm-1.pdf,\
    \ July\n           2009.\n   [SLS09] Schulman, A., Levin, D., and Spring, N.,\
    \ \"CRAWDAD data set\n           umd/sigcomm2008 (v. 2009-03-02)\",\n        \
    \   http://crawdad.cs.dartmouth.edu/umd/sigcomm2008, March, 2009.\n   [HKA04]\
    \ Henderson, T., Kotz, D., and Abyzov, I., \"CRAWDAD trace\n           dartmouth/campus/tcpdump/fall03\
    \ (v. 2004-11-09)\",\n           http://crawdad.cs.dartmouth.edu/dartmouth/campus/\n\
    \           tcpdump/fall03, November 2004.\n   [Jac88] Jacobson, V., \"Congestion\
    \ Avoidance and Control\", Computer\n           Communication Review, vol. 18,\
    \ no. 4, pp. 314-329, Aug.\n           1988.\n   [JK88]  Jacobson, V. and M. Karels,\
    \ \"Congestion Avoidance and\n           Control\", ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z.\n\
    \   [KP87]  Karn, P. and C. Partridge, \"Improving Round-Trip Time\n         \
    \  Estimates in Reliable Transport Protocols\", SIGCOMM 87.\n   [PA00]  Paxson,\
    \ V. and M. Allman, \"Computing TCP's Retransmission\n           Timer\", RFC\
    \ 2988, November 2000.\n"
- title: Appendix A.  Rationale for Lowering the Initial RTO
  contents:
  - "Appendix A.  Rationale for Lowering the Initial RTO\n   Choosing a reasonable\
    \ initial RTO requires balancing two competing\n   considerations:\n   1. The\
    \ initial RTO should be sufficiently large to cover most of the\n      end-to-end\
    \ paths to avoid spurious retransmissions and their\n      associated negative\
    \ performance impact.\n   2. The initial RTO should be small enough to ensure\
    \ a timely recovery\n      from packet loss occurring before an RTT sample is\
    \ taken.\n   Traditionally, TCP has used 3 seconds as the initial RTO [Bra89]\n\
    \   [PA00].  This document calls for lowering this value to 1 second\n   using\
    \ the following rationale:\n   - Modern networks are simply faster than the state-of-the-art\
    \ was at\n     the time the initial RTO of 3 seconds was defined.\n   - Studies\
    \ have found that the round-trip times of more than 97.5% of\n     the connections\
    \ observed in a large scale analysis were less than 1\n     second [Chu09], suggesting\
    \ that 1 second meets criterion 1 above.\n   - In addition, the studies observed\
    \ retransmission rates within the\n     three-way handshake of roughly 2%.  This\
    \ shows that reducing the\n     initial RTO has benefit to a non-negligible set\
    \ of connections.\n   - However, roughly 2.5% of the connections studied in [Chu09]\
    \ have an\n     RTT longer than 1 second.  For those connections, a 1 second\n\
    \     initial RTO guarantees a retransmission during connection\n     establishment\
    \ (needed or not).\n     When this happens, this document calls for reverting\
    \ to an initial\n     RTO of 3 seconds for the data transmission phase.  Therefore,\
    \ the\n     implications of the spurious retransmission are modest: (1) an\n \
    \    extra SYN is transmitted into the network, and (2) according to RFC\n   \
    \  5681 [APB09] the initial congestion window will be limited to 1\n     segment.\
    \  While (2) clearly puts such connections at a\n     disadvantage, this document\
    \ at least resets the RTO such that the\n     connection will not continually\
    \ run into problems with a short\n     timeout.  (Of course, if the RTT is more\
    \ than 3 seconds, the\n     connection will still encounter difficulties.  But\
    \ that is not a\n     new issue for TCP.)\n     In addition, we note that when\
    \ using timestamps, TCP will be able\n     to take an RTT sample even in the presence\
    \ of a spurious\n     retransmission, facilitating convergence to a correct RTT\
    \ estimate\n     when the RTT exceeds 1 second.\n   As an additional check on\
    \ the results presented in [Chu09], we\n   analyzed packet traces of client behavior\
    \ collected at four different\n   vantage points at different times, as follows:\n\
    \   Name       Dates            Pkts.   Cnns.  Clnts. Servs.\n   --------------------------------------------------------\n\
    \   LBL-1      Oct/05--Mar/06   292M    242K   228    74K\n   LBL-2      Nov/09--Feb/10\
    \   1.1B    1.2M   1047   38K\n   ICSI-1     Sep/11--18/07    137M    2.1M   193\
    \    486K\n   ICSI-2     Sep/11--18/08    163M    1.9M   177    277K\n   ICSI-3\
    \     Sep/14--21/09    334M    3.1M   170    253K\n   ICSI-4     Sep/11--18/10\
    \    298M    5M     183    189K\n   Dartmouth  Jan/4--21/04     1B      4M   \
    \  3782   132K\n   SIGCOMM    Aug/17--21/08    11.6M   133K   152    29K\n   The\
    \ \"LBL\" data was taken at the Lawrence Berkeley National\n   Laboratory, the\
    \ \"ICSI\" data from the International Computer Science\n   Institute, the \"\
    SIGCOMM\" data from the wireless network that served\n   the attendees of SIGCOMM\
    \ 2008, and the \"Dartmouth\" data was collected\n   from Dartmouth College's\
    \ wireless network.  The latter two datasets\n   are available from the CRAWDAD\
    \ data repository [HKA04] [SLS09].  The\n   table lists the dates of the data\
    \ collections, the number of packets\n   collected, the number of TCP connections\
    \ observed, the number of\n   local clients monitored, and the number of remote\
    \ servers contacted.\n   We consider only connections initiated near the tracing\
    \ vantage\n   point.\n   Analysis of these datasets finds the prevalence of retransmitted\
    \ SYNs\n   to be between 0.03% (ICSI-4) to roughly 2% (LBL-1 and Dartmouth).\n\
    \   We then analyzed the data to determine the number of additional and\n   spurious\
    \ retransmissions that would have been incurred if the initial\n   RTO was assumed\
    \ to be 1 second.  In most of the datasets, the\n   proportion of connections\
    \ with spurious retransmits was less than\n   0.1%.  However, in the Dartmouth\
    \ dataset, approximately 1.1% of the\n   connections would have sent a spurious\
    \ retransmit with a lower\n   initial RTO.  We attribute this to the fact that\
    \ the monitored\n   network is wireless and therefore susceptible to additional\
    \ delays\n   from RF effects.\n   Finally, there are obviously performance benefits\
    \ from retransmitting\n   lost SYNs with a reduced initial RTO.  Across our datasets,\
    \ the\n   percentage of connections that retransmitted a SYN and would realize\n\
    \   at least a 10% performance improvement by using the smaller initial\n   RTO\
    \ specified in this document ranges from 43% (LBL-1) to 87%\n   (ICSI-4).  The\
    \ percentage of connections that would realize at least\n   a 50% performance\
    \ improvement ranges from 17% (ICSI-1 and SIGCOMM) to\n   73% (ICSI-4).\n   From\
    \ the data to which we have access, we conclude that the lower\n   initial RTO\
    \ is likely to be beneficial to many connections, and\n   harmful to relatively\
    \ few.\n   Authors' Addresses\n   Vern Paxson\n   ICSI/UC Berkeley\n   1947 Center\
    \ Street\n   Suite 600\n   Berkeley, CA 94704-1198\n   Phone: 510-666-2882\n \
    \  EMail: vern@icir.org\n   http://www.icir.org/vern/\n   Mark Allman\n   ICSI\n\
    \   1947 Center Street\n   Suite 600\n   Berkeley, CA 94704-1198\n   Phone: 440-235-1792\n\
    \   EMail: mallman@icir.org\n   http://www.icir.org/mallman/\n   H.K. Jerry Chu\n\
    \   Google, Inc.\n   1600 Amphitheatre Parkway\n   Mountain View, CA 94043\n \
    \  Phone: 650-253-3010\n   EMail: hkchu@google.com\n   Matt Sargent\n   Case Western\
    \ Reserve University\n   Olin Building\n   10900 Euclid Avenue\n   Room 505\n\
    \   Cleveland, OH 44106\n   Phone: 440-223-5932\n   EMail: mts71@case.edu\n"
