- title: __initial_text__
  contents:
  - '                     YANG Data Structure Extensions

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes YANG mechanisms for defining abstract data\n\
    \   structures with YANG.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8791.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Terminology\n       1.1.1.\
    \  NMDA\n       1.1.2.  YANG\n   2.  Definitions\n   3.  YANG Data Structures\
    \ in YANG Tree Diagrams\n   4.  YANG Data Structure Extensions Module\n   5. \
    \ IANA Considerations\n     5.1.  YANG Module Registry\n   6.  Security Considerations\n\
    \   7.  References\n     7.1.  Normative References\n     7.2.  Informative References\n\
    \   Appendix A.  Examples\n     A.1.  \"structure\" Example\n     A.2.  \"augment-structure\"\
    \ Example\n     A.3.  XML Encoding Example\n     A.4.  JSON Encoding Example\n\
    \     A.5.  \"structure\" Example That Defines a Non-top-level Structure\n   Authors'\
    \ Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   There is a need for standard mechanisms to allow the definition\
    \ of\n   abstract data that is not intended to be implemented as configuration\n\
    \   or operational state.  The \"yang-data\" extension statement from RFC\n  \
    \ 8040 [RFC8040] was defined for this purpose, but it is limited in its\n   functionality.\n\
    \   The intended use of the \"yang-data\" extension was to model all or\n   part\
    \ of a protocol message, such as the \"errors\" definition in the\n   YANG module\
    \ \"ietf-restconf\" [RFC8040], or the contents of a file.\n   However, protocols\
    \ are often layered such that the header or payload\n   portions of the message\
    \ can be extended by external documents.  The\n   YANG statements that model a\
    \ protocol need to support this\n   extensibility that is already found in that\
    \ protocol.\n   This document defines a new YANG extension statement called\n\
    \   \"structure\", which is similar to but more flexible than the \"yang-\n  \
    \ data\" extension from [RFC8040].  There is no assumption that a YANG\n   data\
    \ structure can only be used as a top-level abstraction, and it\n   may also be\
    \ nested within some other data structure.\n   This document also defines a new\
    \ YANG extension statement called\n   \"augment-structure\", which allows abstract\
    \ data structures to be\n   augmented from external modules and is similar to\
    \ the existing YANG\n   \"augment\" statement.  Note that \"augment\" cannot be\
    \ used to augment a\n   YANG data structure since a YANG compiler or other tool\
    \ is not\n   required to understand the \"structure\" extension.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in BCP\n   14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   The following term is used within this\
    \ document:\n   YANG data structure:  A data structure defined with the \"structure\"\
    \n      statement.\n"
- title: 1.1.1.  NMDA
  contents:
  - "1.1.1.  NMDA\n   The following terms are defined in the Network Management Datastore\n\
    \   Architecture (NMDA) [RFC8342] and are not redefined here:\n   *  configuration\n\
    \   *  operational state\n"
- title: 1.1.2.  YANG
  contents:
  - "1.1.2.  YANG\n   The following terms are defined in [RFC7950] and are not redefined\n\
    \   here:\n   *  absolute-schema-nodeid\n   *  container\n   *  data definition\
    \ statement\n   *  data node\n   *  leaf\n   *  leaf-list\n   *  list\n"
- title: 2.  Definitions
  contents:
  - "2.  Definitions\n   A YANG data structure is defined with the \"structure\" extension\n\
    \   statement, which is defined in the YANG module \"ietf-yang-structure-\n  \
    \ ext\".  The argument to the \"structure\" extension statement is the\n   name\
    \ of the data structure.  The data structures are considered to be\n   in the\
    \ same identifier namespace as defined in Section 6.2.1 of\n   [RFC7950].  In\
    \ particular, the seventh bullet states:\n   |  All leafs, leaf-lists, lists,\
    \ containers, choices, rpcs, actions,\n   |  notifications, anydatas, and anyxmls\
    \ defined (directly or through\n   |  a \"uses\" statement) within a parent node\
    \ or at the top level of\n   |  the module or its submodules share the same identifier\
    \ namespace.\n   This means that data structures defined with the \"structure\"\
    \n   statement cannot have the same name as sibling nodes from regular\n   YANG\
    \ data definition statements or other \"structure\" statements in\n   the same\
    \ YANG module.\n   This does not mean a YANG data structure, once defined, has\
    \ to be\n   used as a top-level protocol message or other top-level data\n   structure.\n\
    \   A YANG data structure is encoded in the same way as an \"anydata\"\n   node.\
    \  This means that the name of the structure is encoded as a\n   \"container\"\
    , with the instantiated children encoded as child nodes to\n   this node.  For\
    \ example, this structure:\n     module example-errors {\n       ...\n       sx:structure\
    \ my-error {\n         leaf error-number {\n           type int;\n         }\n\
    \       }\n     }\n   can be encoded in JSON as:\n     \"example-errors:my-error\"\
    : {\n       \"error-number\": 131\n     }\n"
- title: 3.  YANG Data Structures in YANG Tree Diagrams
  contents:
  - "3.  YANG Data Structures in YANG Tree Diagrams\n   A YANG data structure can\
    \ be printed in a YANG tree diagram\n   [RFC8340].  This document updates RFC\
    \ 8340 [RFC8340] by defining two\n   new sections in the tree diagram for a module:\n\
    \   1.  YANG data structures, which are offset by two spaces and\n       identified\
    \ by the keyword \"structure\" followed by the name of the\n       YANG data structure\
    \ and a colon (\":\") character.\n   2.  YANG data structure augmentations, which\
    \ are offset by 2 spaces\n       and identified by the keyword \"augment-structure\"\
    \ followed by the\n       augment target structure name and a colon (\":\") character.\n\
    \   The new sections, including spaces conventions, appear as follows:\n     structure\
    \ <structure-name>:\n       +--<node>\n          +--<node>\n          |  +--<node>\n\
    \          +--<node>\n     structure <structure-name>:\n       +--<node>\n   \
    \  augment-structure <structure-name>:\n       +--<node>\n          +--<node>\n\
    \          |  +--<node>\n          +--<node>\n     augment-structure <structure-name>:\n\
    \       +--<node>\n   Nodes in YANG data structures are printed according to the\
    \ rules\n   defined in Section 2.6 of [RFC8340].  The nodes in YANG data\n   structures\
    \ do not have any <flags>.\n"
- title: 4.  YANG Data Structure Extensions Module
  contents:
  - "4.  YANG Data Structure Extensions Module\n   <CODE BEGINS> file \"ietf-yang-structure-ext@2020-06-17.yang\"\
    \n   module ietf-yang-structure-ext {\n     yang-version 1.1;\n     namespace\
    \ \"urn:ietf:params:xml:ns:yang:ietf-yang-structure-ext\";\n     prefix sx;\n\
    \     organization\n       \"IETF NETMOD (NETCONF Data Modeling Language) Working\
    \ Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\
    \        WG List:  <mailto:netmod@ietf.org>\n        Author:   Andy Bierman\n\
    \                  <mailto:andy@yumaworks.com>\n        Author:   Martin Bjorklund\n\
    \                  <mailto:mbj+ietf@4668.se>\n        Author:   Kent Watsen\n\
    \                  <mailto:kent+ietf@watsen.net>\";\n     description\n      \
    \ \"This module contains conceptual YANG specifications for defining\n       \
    \ abstract data structures.\n        The key words 'MUST', 'MUST NOT', 'REQUIRED',\
    \ 'SHALL', 'SHALL\n        NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n\
    \        'MAY', and 'OPTIONAL' in this document are to be interpreted as\n   \
    \     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n       \
    \ they appear in all capitals, as shown here.\n        Copyright (c) 2020 IETF\
    \ Trust and the persons identified as\n        authors of the code.  All rights\
    \ reserved.\n        Redistribution and use in source and binary forms, with or\n\
    \        without modification, is permitted pursuant to, and subject to\n    \
    \    the license terms contained in, the Simplified BSD License set\n        forth\
    \ in Section 4.c of the IETF Trust's Legal Provisions\n        Relating to IETF\
    \ Documents\n        (http://trustee.ietf.org/license-info).\n        This version\
    \ of this YANG module is part of RFC 8791\n        (https://www.rfc-editor.org/info/rfc8791);\
    \ see the RFC itself\n        for full legal notices.\";\n     revision 2020-06-17\
    \ {\n       description\n         \"Initial revision.\";\n       reference\n \
    \        \"RFC 8791: YANG Data Structure Extensions.\";\n     }\n     extension\
    \ structure {\n       argument name {\n         yin-element true;\n       }\n\
    \       description\n         \"This extension is used to specify a YANG data\
    \ structure that\n          represents conceptual data defined in YANG.  It is\
    \ intended to\n          describe hierarchical data independent of protocol context\
    \ or\n          specific message encoding format.  Data definition statements\n\
    \          within a 'structure' extension statement specify the generic\n    \
    \      syntax for the specific YANG data structure, whose name is the\n      \
    \    argument of the 'structure' extension statement.\n          Note that this\
    \ extension does not define a media type.  A\n          specification using this\
    \ extension MUST specify the message\n          encoding rules, including the\
    \ content media type, if\n          applicable.\n          The mandatory 'name'\
    \ parameter value identifies the YANG data\n          structure that is being\
    \ defined.\n          This extension is only valid as a top-level statement, i.e.,\n\
    \          given as a substatement to 'module' or 'submodule'.\n          The\
    \ substatements of this extension MUST follow the ABNF\n          rules below,\
    \ where the rules are defined in RFC 7950:\n            *must-stmt\n         \
    \   [status-stmt]\n            [description-stmt]\n            [reference-stmt]\n\
    \            *(typedef-stmt / grouping-stmt)\n            *data-def-stmt\n   \
    \       A YANG data structure defined with this extension statement is\n     \
    \     encoded in the same way as an 'anydata' node.  This means\n          that\
    \ the name of the structure is encoded as a 'container',\n          with the instantiated\
    \ child statements encoded as child nodes\n          to this node.\n         \
    \ The module name and namespace value for the YANG module using\n          the\
    \ extension statement are assigned to each of the data\n          definition statements\
    \ resulting from the YANG data structure.\n          The XPath document element\
    \ is the extension statement itself,\n          such that the child nodes of the\
    \ document element are\n          represented by the data-def-stmt substatements\
    \ within this\n          extension.  This conceptual document is the context for\
    \ the\n          following YANG statements:\n            - must-stmt\n       \
    \     - when-stmt\n            - path-stmt\n            - min-elements-stmt\n\
    \            - max-elements-stmt\n            - mandatory-stmt\n            -\
    \ unique-stmt\n            - ordered-by\n            - instance-identifier data\
    \ type\n          The following data-def-stmt substatements are constrained\n\
    \          when used within a 'structure' extension statement.\n            -\
    \ The list-stmt is not required to have a key-stmt defined.\n            - The\
    \ config-stmt is ignored if present.\n         \";\n     }\n     extension augment-structure\
    \ {\n       argument path {\n         yin-element true;\n       }\n       description\n\
    \         \"This extension is used to specify an augmentation to a YANG\n    \
    \      data structure defined with the 'structure' statement.  It is\n       \
    \   intended to describe hierarchical data independent of protocol\n         \
    \ context or specific message encoding format.\n          This statement has almost\
    \ the same structure as the\n          'augment-stmt'.  Data definition statements\
    \ within this\n          statement specify the semantics and generic syntax for\
    \ the\n          additional data to be added to the specific YANG data\n     \
    \     structure, identified by the 'path' argument.\n          The mandatory 'path'\
    \ parameter value identifies the YANG\n          conceptual data node that is\
    \ being augmented and is\n          represented as an absolute-schema-nodeid string,\
    \ where the\n          first node in the absolute-schema-nodeid string identifies\
    \ the\n          YANG data structure to augment, and the rest of the nodes in\n\
    \          the string identifies the node within the YANG structure to\n     \
    \     augment.\n          This extension is only valid as a top-level statement,\
    \ i.e.,\n          given as a substatement to 'module' or 'submodule'.\n     \
    \     The substatements of this extension MUST follow the ABNF\n          rules\
    \ below, where the rules are defined in RFC 7950:\n            [status-stmt]\n\
    \            [description-stmt]\n            [reference-stmt]\n            1*(data-def-stmt\
    \ / case-stmt)\n          The module name and namespace value for the YANG module\
    \ using\n          the extension statement are assigned to instance document data\n\
    \          conforming to the data definition statements within this\n        \
    \  extension.\n          The XPath document element is the augmented extension\n\
    \          statement itself, such that the child nodes of the document\n     \
    \     element are represented by the data-def-stmt substatements\n          within\
    \ the augmented 'structure' statement.\n          The context node of the 'augment-structure'\
    \ statement is\n          derived in the same way as the 'augment' statement,\
    \ as defined\n          in Section 6.4.1 of [RFC7950]. This conceptual node is\n\
    \          considered the context node for the following YANG statements:\n  \
    \          - must-stmt\n            - when-stmt\n            - path-stmt\n   \
    \         - min-elements-stmt\n            - max-elements-stmt\n            -\
    \ mandatory-stmt\n            - unique-stmt\n            - ordered-by\n      \
    \      - instance-identifier data type\n          The following data-def-stmt\
    \ substatements are constrained\n          when used within an 'augment-structure'\
    \ extension statement.\n            - The list-stmt is not required to have a\
    \ key-stmt defined.\n            - The config-stmt is ignored if present.\n  \
    \        Example:\n             module foo {\n                import ietf-yang-structure-ext\
    \ { prefix sx; }\n                sx:structure foo-data {\n                  container\
    \ foo-con { }\n                }\n             }\n             module bar {\n\
    \                import ietf-yang-structure-ext { prefix sx; }\n             \
    \   import foo { prefix foo; }\n                sx:augment-structure /foo:foo-data/foo:foo-con\
    \ {\n                  leaf add-leaf1 { type int32; }\n                  leaf\
    \ add-leaf2 { type string; }\n                }\n             }\n         \";\n\
    \     }\n   }\n   <CODE ENDS>\n"
- title: 5.  IANA Considerations
  contents:
  - '5.  IANA Considerations

    '
- title: 5.1.  YANG Module Registry
  contents:
  - "5.1.  YANG Module Registry\n   IANA has registered the following URI in the \"\
    ns\" subregistry within\n   the \"IETF XML Registry\" [RFC3688]:\n   URI:  urn:ietf:params:xml:ns:yang:ietf-yang-structure-ext\n\
    \   Registrant Contact:  The IESG.\n   XML:  N/A; the requested URI is an XML\
    \ namespace.\n   IANA has registered the following YANG module in the \"YANG Module\n\
    \   Names\" subregistry [RFC6020] within the \"YANG Parameters\" registry:\n \
    \  Name:  ietf-yang-structure-ext\n   Namespace:  urn:ietf:params:xml:ns:yang:ietf-yang-structure-ext\n\
    \   Prefix:  sx\n   Reference:  RFC 8791\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document defines YANG extensions that are\
    \ used to define\n   conceptual YANG data structures.  It does not introduce any\
    \ new\n   vulnerabilities beyond those specified in YANG 1.1 [RFC7950].\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n\
    \              RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n       \
    \       Protocol\", RFC 8040, DOI 10.17487/RFC8040, January 2017,\n          \
    \    <https://www.rfc-editor.org/info/rfc8040>.\n   [RFC8174]  Leiba, B., \"Ambiguity\
    \ of Uppercase vs Lowercase in RFC\n              2119 Key Words\", BCP 14, RFC\
    \ 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n\
    \   [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n   \
    \           BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n           \
    \   <https://www.rfc-editor.org/info/rfc8340>.\n   [RFC8342]  Bjorklund, M., Schoenwaelder,\
    \ J., Shafer, P., Watsen, K.,\n              and R. Wilton, \"Network Management\
    \ Datastore Architecture\n              (NMDA)\", RFC 8342, DOI 10.17487/RFC8342,\
    \ March 2018,\n              <https://www.rfc-editor.org/info/rfc8342>.\n   [W3C.REC-xml-20081126]\n\
    \              Bray, T., Paoli, J., Sperberg-McQueen, M., Maler, E., and\n   \
    \           F. Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth\n      \
    \        Edition)\", World Wide Web Consortium Recommendation REC-\n         \
    \     xml-20081126, November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\"\
    , BCP 81, RFC 3688,\n              DOI 10.17487/RFC3688, January 2004,\n     \
    \         <https://www.rfc-editor.org/info/rfc3688>.\n   [RFC6020]  Bjorklund,\
    \ M., Ed., \"YANG - A Data Modeling Language for\n              the Network Configuration\
    \ Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020, October\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n"
- title: Appendix A.  Examples
  contents:
  - 'Appendix A.  Examples

    '
- title: A.1.  "structure" Example
  contents:
  - "A.1.  \"structure\" Example\n   This example shows a simple address book that\
    \ could be stored as an\n   artifact:\n   module example-module {\n     yang-version\
    \ 1.1;\n     namespace \"urn:example:example-module\";\n     prefix exm;\n   \
    \  import ietf-yang-structure-ext {\n       prefix sx;\n     }\n     sx:structure\
    \ address-book {\n       list address {\n         key \"last first\";\n      \
    \   leaf last {\n           type string;\n           description \"Last name\"\
    ;\n         }\n         leaf first {\n           type string;\n           description\
    \ \"First name\";\n         }\n         leaf street {\n           type string;\n\
    \           description \"Street name\";\n         }\n         leaf city {\n \
    \          type string;\n           description \"City name\";\n         }\n \
    \        leaf state {\n           type string;\n           description \"State\
    \ name\";\n         }\n       }\n     }\n   }\n   Below is the tree diagram of\
    \ this module:\n   module: example-module\n     structure address-book:\n    \
    \   +-- address* [last first]\n          +-- last      string\n          +-- first\
    \     string\n          +-- street?   string\n          +-- city?     string\n\
    \          +-- state?    string\n"
- title: A.2.  "augment-structure" Example
  contents:
  - "A.2.  \"augment-structure\" Example\n   This example adds \"county\" and \"zipcode\"\
    \ leafs to the address book:\n   module example-module-aug {\n     yang-version\
    \ 1.1;\n     namespace \"urn:example:example-module-aug\";\n     prefix exma;\n\
    \     import ietf-yang-structure-ext {\n       prefix sx;\n     }\n     import\
    \ example-module {\n       prefix exm;\n     }\n     sx:augment-structure \"/exm:address-book/exm:address\"\
    \ {\n       leaf county {\n         type string;\n         description \"County\
    \ name\";\n       }\n       leaf zipcode {\n         type string;\n         description\
    \ \"Postal zipcode\";\n       }\n     }\n   }\n   Below is the tree diagram of\
    \ this module:\n   module: example-module-aug\n     augment-structure /exm:address-book/exm:address:\n\
    \       +-- county?    string\n       +-- zipcode?   string\n"
- title: A.3.  XML Encoding Example
  contents:
  - "A.3.  XML Encoding Example\n   This example shows how an address book can be\
    \ encoded in XML\n   [W3C.REC-xml-20081126]:\n   <address-book xmlns=\"urn:example:example-module\"\
    >\n     <address>\n       <last>Flintstone</last>\n       <first>Fred</first>\n\
    \       <street>301 Cobblestone Way</street>\n       <city>Bedrock</city>\n  \
    \     <zipcode xmlns=\"urn:example:example-module-aug\">70777</zipcode>\n    \
    \ </address>\n     <address>\n       <last>Root</last>\n       <first>Charlie</first>\n\
    \       <street>4711 Cobblestone Way</street>\n       <city>Bedrock</city>\n \
    \      <zipcode xmlns=\"urn:example:example-module-aug\">70777</zipcode>\n   \
    \  </address>\n   </address-book>\n"
- title: A.4.  JSON Encoding Example
  contents:
  - "A.4.  JSON Encoding Example\n   This example shows how an address book can be\
    \ encoded in JSON:\n   \"example-module:address-book\": {\n     \"address\": [\n\
    \       {\n         \"city\": \"Bedrock\",\n         \"example-module-aug:zipcode\"\
    : \"70777\",\n         \"first\": \"Fred\",\n         \"last\": \"Flintstone\"\
    ,\n         \"street\": \"301 Cobblestone Way\"\n       },\n       {\n       \
    \  \"city\": \"Bedrock\",\n         \"example-module-aug:zipcode\": \"70777\"\
    ,\n         \"first\": \"Charlie\",\n         \"last\": \"Root\",\n         \"\
    street\": \"4711 Cobblestone Way\"\n       }\n     ]\n   }\n"
- title: A.5.  "structure" Example That Defines a Non-top-level Structure
  contents:
  - "A.5.  \"structure\" Example That Defines a Non-top-level Structure\n   The following\
    \ example defines a data structure with error information\n   that can be included\
    \ in an <error-info> element in an <rpc-error>:\n   module example-error-info\
    \ {\n     yang-version 1.1;\n     namespace \"urn:example:example-error-info\"\
    ;\n     prefix exei;\n     import ietf-yang-structure-ext {\n       prefix sx;\n\
    \     }\n     sx:structure my-example-error-info {\n       leaf error-code {\n\
    \         type uint32;\n       }\n     }\n   }\n   The example below shows how\
    \ this structure can be used in an\n   <rpc-error>:\n   <rpc-reply message-id=\"\
    101\"\n        xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <rpc-error>\n\
    \       <error-type>protocol</error-type>\n       <error-tag>operation-failed</error-tag>\n\
    \       <error-severity>error</error-severity>\n       <error-info>\n        \
    \ <my-example-error-info\n             xmlns=\"urn:example:example-error-info\"\
    >\n           <error-code>42</error-code>\n         </my-example-error-info>\n\
    \       </error-info>\n     </rpc-error>\n   </rpc-reply>\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andy Bierman\n   YumaWorks\n   Email: andy@yumaworks.com\n\
    \   Martin Bjorklund\n   Cisco\n   Email: mbj+ietf@4668.se\n   Kent Watsen\n"
