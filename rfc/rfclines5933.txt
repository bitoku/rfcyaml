Abstract This document describes how to produce digital signatures and hash functions using the GOST R 34.10 2001 and GOST R 34.11 94 algorithms for DNSKEY, RRSIG, and DS resource records, for use in the Domain Name System Security Extensions (DNSSEC).
The Domain Name System (DNS) is the global hierarchical distributed database for Internet Naming.
The DNS has been extended to use cryptographic keys and digital signatures for the verification of the authenticity and integrity of its data.
[RFC4033], RFC 4034 [RFC4034], and RFC 4035
[RFC4035] describe these DNS Security Extensions, called DNSSEC.
RFC 4034 describes how to store DNSKEY and RRSIG resource records, and specifies a list of cryptographic algorithms to use.
This document extends that list with the signature and hash algorithms GOST R 34.10 2001 ([GOST3410], [RFC5832]) and GOST R 34.11 94 ([GOST3411], [RFC5831]), and specifies how to store DNSKEY data and how to produce RRSIG resource records with these algorithms.
Familiarity with DNSSEC and with GOST signature and hash algorithms is assumed in this document.
The term "GOST" is not officially defined, but is usually used to refer to the collection of the Russian cryptographic algorithms GOST R 34.10 2001
[RFC5832], GOST R 34.11 94 [RFC5831], and GOST 28147
Since GOST 28147 89 is not used in DNSSEC, "GOST" will only refer to GOST R 34.10 2001 and GOST R 34.11 94 in this document.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The format of the DNSKEY RR can be found in RFC 4034 [RFC4034].
GOST R 34.10 2001 public keys are stored with the algorithm number 12.
The wire format of the public key is compatible with RFC 4491
According to [GOST3410] and [RFC5832], a public key is a point on the elliptic curve Q   (x,y).
The wire representation of a public key MUST contain 64 octets, where the first 32 octets contain the little endian representation of x and the second 32 octets contain the little endian representation of y. Corresponding public key parameters
are those identified by id GostR3410 2001
the digest parameters are those identified by id GostR3411 94 CryptoProParamSet (1.2.643.2.2.30.1)
Using a Public Key with Existing Cryptographic Libraries
At the time of this writing, existing GOST aware cryptographic libraries are capable of reading GOST public keys via a generic X509 API if the key is encoded according to RFC 4491 [RFC4491], Section 2.3.2.
To make this encoding from the wire format of a GOST public key with the parameters used in this document, prepend the 64 octets of key data with the following 37 byte sequence:
0x1c 0x06 0x06 0x2a 0x85 0x03
Given a private key with the following value (the value of the GostAsn1 field is split here into two lines to simplify reading; in the private key file, it must be in one line):
v1.2 Algorithm: 12 (ECC GOST
The following DNSKEY RR stores
a DNS zone key for example.net: example.net.
IN DNSKEY 256 3 12
The value of the signature field in the RRSIG RR follows RFC 4490
[RFC4490] and is calculated as follows.
The values for the RDATA fields that precede the signature data are specified in RFC 4034 [RFC4034].
hash   GOSTR3411(data) where "data" is the wire format data of the resource record set that is signed, as specified in RFC 4034
The hash MUST be calculated with GOST R 34.11 94 parameters identified by id GostR3411 94 CryptoProParamSet [RFC4357].
The signature is calculated from the hash according to the GOST R 34.10 2001 standard, and its wire format is compatible with RFC 4490
Quoting RFC 4490: "The signature algorithm GOST R 34.10 2001 generates a digital signature in the form of two 256 bit numbers, r and s.
Its octet string representation consists of 64 octets, where the first 32 octets contain the big endian representation of s and the second 32 octets contain the big endian representation of r".
RRSIG RR Example With the private key from Section 2.2, sign the following RRSet, consisting of one A record:
Setting the inception date to 2000 01 01
00:00:00 UTC and the expiration date to 2030 01
01 00:00:00 UTC, the following signature RR will be valid:
12 3 3600 20300101000000 ( 20000101000000 59732
Note: The ECC GOST signature algorithm uses random data, so the actual computed signature value will differ between signature calculations.
The GOST R 34.11 94 digest algorithm is denoted in DS RRs by the digest type 3.
The wire format of a digest value is compatible with RFC 4490
[RFC4490], that is, the digest is in little endian representation.
The digest MUST always be calculated with GOST R 34.11 94 parameters identified by id GostR3411 94 CryptoProParamSet [RFC4357].
DS RR Example For Key Signing Key (KSK)
The DS RR will be example.net.
IN DS 40692 12 3
According to RFC 4357 [RFC4357], the key size of GOST public keys MUST be 512 bits.
According to the GOST R 34.10 2001 digital signature algorithm specification ([GOST3410], [RFC5832]), the size of a GOST signature is 512 bits.
According to GOST R 34.11 94 ([GOST3411], [RFC5831]), the size of a GOST digest is 256 bits.
Support for GOST Signatures DNSSEC aware implementations
MAY be able to support RRSIG and DNSKEY resource records created with the GOST algorithms as defined in this document.
Support for NSEC3 Denial of Existence
Any DNSSEC GOST implementation MUST support both NSEC [RFC4035] and NSEC3
Currently, the cryptographic resistance of the GOST R 34.10 2001 digital signature algorithm is estimated as 2  128 operations of multiple elliptic curve point computations on prime modulus of order 2  256.
Currently, the cryptographic resistance of the GOST R 34.11 94 hash algorithm is estimated as 2  128 operations of computations of a step hash function.
(There is a known method to reduce this estimate to 2  105 operations, but it demands padding the colliding message with 1024 random bit blocks each of 256 bit length; thus, it cannot be used in any practical implementation).
This document updates the IANA registry "DNS Security Algorithm Numbers" [RFC4034].
The following entries have been added to the registry: Zone    Trans.
This document updates the RFC 4034 Digest Types assignment ([RFC4034], Section A.2) by adding the value and status for the GOST R 34.11 94 algorithm:
