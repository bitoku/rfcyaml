- title: __initial_text__
  contents:
  - '   Locator/ID Separation Protocol Delegated Database Tree (LISP-DDT)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Locator/ID Separation Protocol Delegated\n\
    \   Database Tree (LISP-DDT), a hierarchical distributed database that\n   embodies\
    \ the delegation of authority to provide mappings from LISP\n   Endpoint Identifiers\
    \ (EIDs) to Routing Locators (RLOCs).  It is a\n   statically defined distribution\
    \ of the EID namespace among a set of\n   LISP-speaking servers called \"DDT nodes\"\
    .  Each DDT node is\n   configured as \"authoritative\" for one or more EID-prefixes,\
    \ along\n   with the set of RLOCs for Map-Servers or \"child\" DDT nodes to which\n\
    \   more-specific EID-prefixes are delegated.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8111.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Requirements Language ...........................................5\n  \
    \ 3. Definitions of Terms ............................................6\n   4.\
    \ Database Organization ...........................................8\n      4.1.\
    \ XEID-Prefixes ..............................................8\n      4.2. Structure\
    \ of the DDT Database ..............................8\n      4.3. Configuring\
    \ Prefix Delegation ..............................9\n           4.3.1. The Root\
    \ DDT Node ..................................10\n   5. DDT Map-Request ................................................10\n\
    \   6. The Map-Referral Message .......................................11\n  \
    \    6.1. Action Codes ..............................................11\n    \
    \  6.2. Referral Set ..............................................12\n      6.3.\
    \ \"Incomplete\" Flag .........................................12\n      6.4.\
    \ Map-Referral Message Format ...............................13\n           6.4.1.\
    \ Signature Section ..................................15\n   7. DDT Network Elements\
    \ and Their Operation .......................17\n      7.1. DDT Node ..................................................17\n\
    \           7.1.1. Matching of a Delegated Prefix (or Sub-prefix) .....17\n  \
    \         7.1.2. Missing Delegation from an Authoritative Prefix ....18\n    \
    \  7.2. DDT Map-Server ............................................18\n      7.3.\
    \ DDT Client ................................................18\n           7.3.1.\
    \ Queuing and Sending DDT Map-Requests ...............19\n           7.3.2. Receiving\
    \ and Following Referrals ..................20\n           7.3.3. Handling Referral\
    \ Errors ...........................22\n           7.3.4. Referral Loop Detection\
    \ ............................22\n   8. Pseudocode and Decision Tree Diagrams\
    \ ..........................23\n      8.1. Map-Resolver Processing of ITR Map-Request\
    \ ................23\n           8.1.1. Pseudocode Summary .................................23\n\
    \           8.1.2. Decision Tree Diagram ..............................24\n  \
    \    8.2. Map-Resolver Processing of Map-Referral Message ...........25\n    \
    \       8.2.1. Pseudocode Summary .................................25\n      \
    \     8.2.2. Decision Tree Diagram ..............................27\n      8.3.\
    \ DDT Node Processing of DDT Map-Request Message ............28\n           8.3.1.\
    \ Pseudocode Summary .................................28\n           8.3.2. Decision\
    \ Tree Diagram ..............................30\n   9. Example Topology and Request/Referral\
    \ Following ................31\n      9.1. Lookup of 2001:db8:0103:1::1/128 ..........................33\n\
    \      9.2. Lookup of 2001:db8:0501:8:4::1/128 ........................34\n  \
    \    9.3. Lookup of 2001:db8:0104:2::2/128 ..........................35\n    \
    \  9.4. Lookup of 2001:db8:0500:2:4::1/128 ........................36\n      9.5.\
    \ Lookup of 2001:db8:0500::1/128 (Nonexistent EID) ..........37\n   10. Securing\
    \ the Database and Message Exchanges ...................37\n      10.1. XEID-Prefix\
    \ Delegation ...................................38\n      10.2. DDT Node Operation\
    \ .......................................38\n           10.2.1. DDT Public Key\
    \ Revocation .........................38\n      10.3. Map-Server Operation .....................................39\n\
    \      10.4. Map-Resolver Operation ...................................39\n  \
    \ 11. Open Issues and Considerations ................................40\n   12.\
    \ IANA Considerations ...........................................41\n   13. Security\
    \ Considerations .......................................41\n   14. References\
    \ ....................................................42\n      14.1. Normative\
    \ References .....................................42\n      14.2. Informative\
    \ References ...................................43\n   Acknowledgments ...................................................44\n\
    \   Authors' Addresses ................................................44\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Locator/ID Separation Protocol (LISP) [RFC6830] specifies\
    \ an\n   architecture and mechanism for replacing the addresses currently used\n\
    \   by IP with two separate namespaces:\n   o  Endpoint Identifiers (EIDs), used\
    \ end to end for terminating\n      transport-layer associations, and\n   o  Routing\
    \ Locators (RLOCs), which are bound to topological locations\n      and are used\
    \ for routing and forwarding through the Internet\n      infrastructure.\n   [RFC6833]\
    \ specifies an interface between a database storing\n   EID-to-RLOC mappings and\
    \ LISP devices that need this information for\n   packet forwarding.  The internal\
    \ organization of such a database is\n   beyond the scope of [RFC6833].  Multiple\
    \ architectures of the\n   database have been proposed, each having its advantages\
    \ and\n   disadvantages (see, for example, [RFC6836] and [RFC6837]).\n   This\
    \ document specifies an architecture for a database of LISP\n   EID-to-RLOC mappings,\
    \ with an emphasis on high scalability.  The\n   LISP Delegated Database Tree\
    \ (LISP-DDT) is a hierarchical distributed\n   database that embodies the delegation\
    \ of authority to provide\n   mappings, i.e., its internal structure mirrors the\
    \ hierarchical\n   delegation of address space.  It also provides delegation information\n\
    \   to Map-Resolvers, which use the information to locate EID-to-RLOC\n   mappings.\
    \  A Map-Resolver that needs to locate a given mapping will\n   follow a path\
    \ through the tree-structured database and will contact,\n   one after another,\
    \ the DDT nodes along that path until it reaches the\n   leaf DDT node(s) authoritative\
    \ for the mapping it is seeking.\n   LISP offers a general-purpose mechanism for\
    \ mapping between EIDs and\n   RLOCs.  In organizing a database of EID-to-RLOC\
    \ mappings, this\n   specification extends the definition of the EID numbering\
    \ space by\n   logically prepending and appending several fields for purposes\
    \ of\n   defining the database index key:\n   o  Database-ID (DBID) (16 bits),\n\
    \   o  Instance Identifier (IID) (32 bits),\n   o  Address Family Identifier (AFI)\
    \ (16 bits), and\n   o  EID-prefix (variable, according to the AFI value).\n \
    \  The resulting concatenation of these fields is termed an \"Extended\n   EID-prefix\"\
    , or XEID-prefix.\n   LISP-DDT defines a new device type, the DDT node, that is\
    \ configured\n   as authoritative for one or more XEID-prefixes.  It is also\n\
    \   configured with the set of more-specific sub-prefixes that are\n   further\
    \ delegated to other DDT nodes.  To delegate a sub-prefix, the\n   \"parent\"\
    \ DDT node is configured with the RLOCs of each child DDT node\n   that is authoritative\
    \ for the sub-prefix.  Each RLOC either points to\n   a DDT Map-Server (MS) to\
    \ which an Egress Tunnel Router (ETR) has\n   registered that sub-prefix or points\
    \ to another DDT node in the\n   database tree that further delegates the sub-prefix.\
    \  See [RFC6833]\n   for a description of the functionality of the Map-Server\
    \ and\n   Map-Resolver.  Note that the target of a delegation must always be an\n\
    \   RLOC (not an EID) to avoid any circular dependency.\n   To provide a mechanism\
    \ for traversing the database tree, LISP-DDT\n   defines a new LISP message type,\
    \ the Map-Referral, which is returned\n   to the sender of a Map-Request when\
    \ the receiving DDT node can refer\n   the sender to another DDT node that has\
    \ more detailed information.\n   See Section 6 for the definition of the Map-Referral\
    \ message.\n   To find an EID-to-RLOC mapping, a LISP-DDT client, usually a DDT\n\
    \   Map-Resolver, starts by sending an Encapsulated Map-Request to a\n   preconfigured\
    \ DDT node RLOC.  The DDT node responds with a\n   Map-Referral message indicating\
    \ that either (1) it will find the\n   requested mapping to complete processing\
    \ of the request or (2) the\n   DDT client should contact another DDT node that\
    \ has more-specific\n   information; in the latter case, the DDT node then sends\
    \ a new\n   Encapsulated Map-Request to the next DDT node and the process repeats\n\
    \   in an iterative manner.\n   Conceptually, this is similar to the way that\
    \ a client of the Domain\n   Name System (DNS) follows referrals (DNS responses\
    \ that contain only\n   NS records) from a series of DNS servers until it finds\
    \ an answer.\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  Definitions of Terms
  contents:
  - "3.  Definitions of Terms\n   Extended EID (XEID):  a LISP EID extended with data\
    \ uniquely\n      identifying the address space to which it belongs (LISP IID,\n\
    \      address family, etc.).  See Section 4.1 for a detailed description\n  \
    \    of XEID data.\n   Extended EID-prefix (XEID-prefix):  a LISP EID-prefix prepended\
    \ with\n      XEID data.  An XEID-prefix is used as a key index into the DDT\n\
    \      database.  XEID-prefixes are used to describe database\n      organization\
    \ and are not seen as a single entity in protocol\n      messages, though messages\
    \ contain individual fields constituting\n      XEID-prefixes.\n   DDT node: \
    \ a network infrastructure component responsible for\n      specific XEID-prefix(es)\
    \ and for the delegation of more-specific\n      sub-prefixes to other DDT nodes.\n\
    \   DDT client:  a network infrastructure component that sends DDT\n      Map-Request\
    \ messages and implements the iterative following of\n      Map-Referral results.\
    \  Typically, a DDT client will be a\n      Map-Resolver (as defined by [RFC6833]),\
    \ but it is also possible\n      for an Ingress Tunnel Router (ITR) to implement\
    \ DDT client\n      functionality.\n   DDT Map-Server:  a DDT node that also implements\
    \ Map-Server\n      functionality (forwarding Map-Requests and/or returning\n\
    \      Map-Replies if offering a proxy Map-Reply service) for a subset of\n  \
    \    its delegated prefixes.  Map-Server functions, including proxying\n     \
    \ Map-Replies, are described in [RFC6833].\n   DDT Map-Server peers:  a list of\
    \ all DDT Map-Servers performing\n      Map-Server functionality for the same\
    \ prefix.  If peers are\n      configured on a DDT Map-Server, then the latter\
    \ will provide\n      complete information about the prefix in its Map-Replies;\n\
    \      otherwise, the Map-Server will mark the returned reply as\n      potentially\
    \ incomplete.\n   DDT Map-Resolver:  a network infrastructure element that implements\n\
    \      both DDT client functionality and Map-Resolver functionality as\n     \
    \ defined by [RFC6833].  A DDT Map-Resolver accepts Map-Requests\n      from ITRs,\
    \ sends DDT Map-Requests to DDT nodes, and implements the\n      iterative following\
    \ of Map-Referrals.  Note that Map-Resolvers\n      do not respond to clients\
    \ that sent Map-Requests; they only ensure\n      that the Map-Request has been\
    \ forwarded to a LISP device (ETR or\n      proxy Map-Server) that will provide\
    \ an authoritative response to\n      the original requester.  A DDT Map-Resolver\
    \ will typically\n      maintain a cache (termed the \"referral cache\") of previously\n\
    \      received Map-Referral message results containing RLOCs for DDT\n      nodes\
    \ responsible for XEID-prefixes of interest.\n   Encapsulated Map-Request:  a\
    \ LISP Map-Request that is carried within\n      an Encapsulated Control Message\
    \ and that has an additional LISP\n      header prepended to it.  Sent to UDP\
    \ destination port 4342.  The\n      \"outer\" addresses are globally routable\
    \ IP addresses, also known\n      as RLOCs.  Used by an ITR when sending a Map-Request\
    \ to a\n      Map-Resolver and by a Map-Server when forwarding a Map-Request to\n\
    \      an ETR as documented in [RFC6833].\n   DDT Map-Request:  an Encapsulated\
    \ Map-Request sent by a DDT client to\n      a DDT node.  The \"DDT-originated\"\
    \ flag is set in the encapsulation\n      header, indicating that the DDT node\
    \ should return Map-Referral\n      messages if the Map-Request EID matches a\
    \ delegated XEID-prefix\n      known to the DDT node.  Section 7.3.1 describes\
    \ how DDT\n      Map-Requests are sent.  Section 5 defines the position of the\n\
    \      \"DDT-originated\" flag in the Encapsulated Control Message header.\n \
    \  Authoritative XEID-prefix:  an XEID-prefix delegated to a DDT node\n      and\
    \ for which the DDT node may provide further delegations of\n      more-specific\
    \ sub-prefixes.\n   Map-Referral:  a LISP message sent by a DDT node in response\
    \ to a DDT\n      Map-Request for an XEID that matches a configured XEID-prefix\n\
    \      delegation.  A non-Negative Map-Referral includes a \"referral\" --\n \
    \     a set of RLOCs for DDT nodes that have information about the\n      more-specific\
    \ XEID-prefix covering the requested XEID; a DDT\n      client \"follows the referral\"\
    \ by sending another DDT Map-Request\n      to one of those RLOCs to obtain either\
    \ an answer or another\n      referral to DDT nodes responsible for an XEID-prefix\
    \ that is even\n      more specific.  See Sections 7.1 and 7.3.2 for details on\
    \ the\n      sending and processing of Map-Referral messages.\n   Negative Map-Referral:\
    \  an answer from an authoritative DDT node that\n      there is no mapping for\
    \ the requested XEID.  A Negative\n      Map-Referral is a Map-Referral sent in\
    \ response to a DDT\n      Map-Request that matches an authoritative XEID-prefix\
    \ but for\n      which there is no delegation configured (or no ETR registration,\n\
    \      if sent by a DDT Map-Server).\n   Pending Request List:  the set of outstanding\
    \ requests for which a\n      DDT Map-Resolver has received Encapsulated Map-Requests\
    \ from its\n      clients seeking EID-to-RLOC mapping for an XEID.  Each entry\
    \ in\n      the list contains additional state needed by the\n      referral-following\
    \ process, including the XEID, requester(s) of\n      the XEID (typically one\
    \ or more ITRs), saved information about the\n      last referral received and\
    \ followed (matching XEID-prefix, action\n      code, RLOC set, index of the last\
    \ RLOC queried in the RLOC set),\n      and any LISP-Security (LISP-SEC) information\
    \ [LISP-SEC] that was\n      included in the DDT client Map-Request.  An entry\
    \ in the list may\n      be interchangeably termed a \"pending request list entry\"\
    \ or simply\n      a \"pending request\".\n   For definitions of other terms --\
    \ notably Map-Request, Map-Reply,\n   ITR, ETR, Map-Server, and Map-Resolver --\
    \ please consult the LISP\n   specification [RFC6830] and the LISP Mapping Service\
    \ specification\n   [RFC6833].\n"
- title: 4.  Database Organization
  contents:
  - '4.  Database Organization

    '
- title: 4.1.  XEID-Prefixes
  contents:
  - "4.1.  XEID-Prefixes\n   A DDT database is indexed by Extended EID-prefixes (XEID-prefixes).\n\
    \   An XEID-prefix is a LISP EID-prefix, together with data extending it\n   to\
    \ uniquely identify the address space of the prefix.  An XEID-prefix\n   is composed\
    \ of four binary-encoded fields, ordered by significance:\n   DBID (16 bits),\
    \ IID (32 bits), AFI (16 bits), and EID-prefix\n   (variable, according to the\
    \ AFI value).  The fields are concatenated,\n   with the most significant fields\
    \ as listed above.\n   The DBID is the LISP-DDT Database-ID, a 16-bit field provided\
    \ to\n   allow the definition of multiple databases.  Implementations that are\n\
    \   compliant with this document must always set this field to 0.  Other\n   values\
    \ of the DBID are reserved for future use.\n   The Instance ID (IID) is a 32-bit\
    \ value describing the context of the\n   EID-prefix, if the latter is intended\
    \ for use in an environment where\n   addresses may not be unique, such as in\
    \ a Virtual Private Network\n   where the [RFC1918] address space is used.  See\
    \ Section 5.5 of\n   [RFC6830] for more discussion of IIDs.  Encoding of the IID\
    \ is\n   specified by [RFC8060].\n   The AFI is a 16-bit value defining the syntax\
    \ of the EID-prefix.  AFI\n   values are assigned by IANA [AFI].\n"
- title: 4.2.  Structure of the DDT Database
  contents:
  - "4.2.  Structure of the DDT Database\n   The LISP-DDT database for each DDT node\
    \ is organized as a tree\n   structure that is indexed by XEID-prefixes.  Leaves\
    \ of the database\n   tree describe the delegation of authority between DDT nodes\
    \ (see\n   Section 4.3 for details regarding delegation and information kept in\n\
    \   the database entries).\n   DDT Map-Requests sent by the DDT client to DDT\
    \ nodes always contain\n   specific values for the DBID, IID, and AFI; unspecified\
    \ values or\n   ranges of values are never used for any of these fields.  Thus,\
    \ an\n   XEID-prefix used as a key for searches in the database tree will have\n\
    \   a length of at least 64 bits.\n   A DDT node may, for example, be authoritative\
    \ for a consecutive range\n   of 3-tuples (DBID, IID, AFI) and all associated\
    \ EID-prefixes, or only\n   for a specific EID-prefix of a single 3-tuple.  Thus,\n\
    \   XEID-prefixes/keys of the database tree leaves may have lengths less\n   than,\
    \ equal to, or more than 64 bits.\n   It is important to note that LISP-DDT does\
    \ not store actual\n   EID-to-RLOC mappings; it is, rather, a distributed index\
    \ that can be\n   used to find the devices (ETRs that registered their EIDs with\
    \ DDT\n   Map-Servers) that can be queried with LISP to obtain those mappings.\n\
    \   Changes to EID-to-RLOC mappings are made on the ETRs that define\n   them,\
    \ not to any DDT node configuration.  DDT node configuration\n   changes are only\
    \ required when branches of the database hierarchy are\n   added, removed, or\
    \ modified.\n"
- title: 4.3.  Configuring Prefix Delegation
  contents:
  - "4.3.  Configuring Prefix Delegation\n   Every DDT node is configured with one\
    \ or more XEID-prefixes for which\n   it is authoritative, along with a list of\
    \ delegations of\n   XEID-prefixes to other DDT nodes.  A DDT node is required\
    \ to maintain\n   a list of delegations for all sub-prefixes of its authoritative\n\
    \   XEID-prefixes; it also may list \"hints\", which are prefixes that it\n  \
    \ knows about that belong to its parents, to the root, or to any other\n   point\
    \ in the XEID-prefix hierarchy.  A delegation (or hint) consists\n   of an XEID-prefix,\
    \ a set of RLOCs for DDT nodes that have more\n   detailed knowledge of the XEID-prefix,\
    \ and accompanying security\n   information (for details regarding security information\
    \ exchange and\n   its use, see Section 10).  Those RLOCs are returned in Map-Referral\n\
    \   messages when the DDT node receives a DDT Map-Request with an XEID\n   that\
    \ matches a delegation.  A DDT Map-Server will also have a set of\n   sub-prefixes\
    \ for which it accepts ETR mapping registrations and for\n   which it will forward\
    \ (or answer, if it provides a proxy Map-Reply\n   service) Map-Requests.\n  \
    \ One or more XEID-prefixes for which a DDT node is authoritative, and\n   the\
    \ delegation of authority for sub-prefixes, are provided as part of\n   the configuration\
    \ of the DDT node.  Implementations will likely\n   develop a language to express\
    \ this prefix authority and delegation.\n   Since DDT configuration is static\
    \ (i.e., not exchanged between DDT\n   nodes as part of the protocol itself),\
    \ such language is\n   implementation dependent and is outside the scope of this\n\
    \   specification.\n"
- title: 4.3.1.  The Root DDT Node
  contents:
  - "4.3.1.  The Root DDT Node\n   The root DDT node is the logical \"top\" of the\
    \ distributed database\n   hierarchy.  It is authoritative for all XEID-prefixes\
    \ -- that is, for\n   all valid 3-tuples (DBID, IID, AFI) and their EID-prefixes.\
    \  A DDT\n   Map-Request that matches no configured XEID-prefix will be referred\n\
    \   to the root node (see Section 8 for a formal description of\n   conditions\
    \ where a DDT Map-Request is forwarded to the root node).\n   The root node in\
    \ a particular instantiation of LISP-DDT therefore\n   MUST be configured, at\
    \ a minimum, with delegations for all defined\n   IIDs and AFIs.\n"
- title: 5.  DDT Map-Request
  contents:
  - "5.  DDT Map-Request\n   A DDT client (usually a Map-Resolver) uses LISP Encapsulated\
    \ Control\n   Messages (ECMs) to send Map-Request messages to a DDT node.  The\n\
    \   format of the ECM is defined by [RFC6830].  This specification adds\n   to\
    \ the Encapsulated Control Message (ECM) header a new flag,\n   \"DDT-originated\"\
    , as shown in the diagram and described below.\n        0                   1\
    \                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     / |                       IPv4 or IPv6 Header                     |\n  \
    \ OH  |                      (uses RLOC addresses)                    |\n    \
    \ \\ |                                                               |\n     \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     / |\
    \       Source Port = xxxx      |       Dest Port = 4342        |\n   UDP +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     \\ |           UDP Length          |        UDP Checksum           |\n \
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   LH\
    \  |Type=8 |S|D|                Reserved                           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     / |                       IPv4 or IPv6 Header                     |\n  \
    \ IH  |                  (uses RLOC or EID addresses)                 |\n    \
    \ \\ |                                                               |\n     \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     / |\
    \       Source Port = xxxx      |       Dest Port = yyyy        |\n   UDP +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     \\ |           UDP Length          |        UDP Checksum           |\n \
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   LCM\
    \ |                      LISP Control Message                     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   D: The \"DDT-originated\" flag.  This flag is set by a DDT client to\n   \
    \   indicate that the receiver SHOULD return Map-Referral messages as\n      appropriate.\
    \  The use of this flag is further described in\n      Section 7.3.1.  This bit\
    \ is allocated from LISP message header\n      bits marked as \"Reserved\" in\
    \ [RFC6830].\n"
- title: 6.  The Map-Referral Message
  contents:
  - "6.  The Map-Referral Message\n   This specification defines a new LISP message\
    \ called the Map-Referral\n   message.  A Map-Referral message is sent by a DDT\
    \ node to a\n   DDT client in response to a DDT Map-Request message.  See Section\
    \ 6.4\n   for a detailed layout of the Map-Referral message fields.\n   The message\
    \ consists of an action code along with delegation\n   information about the XEID-prefix\
    \ that matches the requested XEID.\n"
- title: 6.1.  Action Codes
  contents:
  - "6.1.  Action Codes\n   The action codes are as follows:\n   NODE-REFERRAL (0):\
    \  indicates that the replying DDT node has\n      delegated an XEID-prefix that\
    \ matches the requested XEID to one or\n      more other DDT nodes.  The Map-Referral\
    \ message contains a\n      \"map-record\" with additional information -- most\
    \ significantly,\n      the set of RLOCs to which the prefix has been delegated\
    \ -- that is\n      used by a DDT client to \"follow\" the referral.\n   MS-REFERRAL\
    \ (1):  indicates that the replying DDT node has delegated\n      an XEID-prefix\
    \ that matches the requested XEID to one or more DDT\n      Map-Servers.  It contains\
    \ the same additional information as a\n      NODE-REFERRAL but is handled slightly\
    \ differently by the receiving\n      DDT client (see Section 7.3.2).\n   MS-ACK\
    \ (2):  indicates that the replying DDT Map-Server received a\n      DDT Map-Request\
    \ that matches an authoritative XEID-prefix for\n      which it has one or more\
    \ registered ETRs.  This means that the\n      request has been forwarded to one\
    \ of those ETRs to provide an\n      answer to the querying ITR.\n   MS-NOT-REGISTERED\
    \ (3):  indicates that the replying DDT Map-Server\n      received a Map-Request\
    \ for one of its configured XEID-prefixes\n      that has no ETRs registered.\n\
    \   DELEGATION-HOLE (4):  indicates that the requested XEID matches a\n      non-delegated\
    \ sub-prefix of the XEID space.  This is a non-LISP\n      \"hole\", which has\
    \ not been delegated to any DDT Map-Server or ETR.\n      See Section 7.1.2 for\
    \ details.  Also sent by a DDT Map-Server with\n      authoritative configuration\
    \ covering the requested EID but for\n      which no specific site ETR is configured.\n\
    \   NOT-AUTHORITATIVE (5):  indicates that the replying DDT node received\n  \
    \    a Map-Request for an XEID for which it is not authoritative and\n      has\
    \ no configured matching hint referrals.  This can occur if a\n      cached referral\
    \ has become invalid due to a change in the database\n      hierarchy.  However,\
    \ if such a DDT node has a \"hint\" delegation\n      covering the requested EID,\
    \ it MAY choose to return NODE-REFERRAL\n      or MS-REFERRAL as appropriate.\
    \  When returning action code\n      NOT-AUTHORITATIVE, the DDT node MUST provide\
    \ the EID-prefix\n      received in the request and the TTL MUST be set to 0.\n"
- title: 6.2.  Referral Set
  contents:
  - "6.2.  Referral Set\n   For \"positive\" action codes (NODE-REFERRAL, MS-REFERRAL,\
    \ MS-ACK), a\n   DDT node MUST include in the Map-Referral message a list of RLOCs\
    \ for\n   DDT nodes that are authoritative for the XEID-prefix being returned;\n\
    \   a DDT client uses this information to contact one of those DDT nodes\n   as\
    \ it \"follows\" a referral.\n"
- title: 6.3.  "Incomplete" Flag
  contents:
  - "6.3.  \"Incomplete\" Flag\n   A DDT node sets the \"Incomplete\" flag in a Map-Referral\
    \ message if\n   the Referral Set is incomplete; this is intended to prevent a\
    \ DDT\n   client from caching a referral with incomplete information.  A DDT\n\
    \   node MUST set the \"Incomplete\" flag in the following cases:\n   o  If it\
    \ is setting action code MS-ACK or MS-NOT-REGISTERED but the\n      matching XEID-prefix\
    \ is not flagged as \"complete\" in the\n      configuration.  The XEID-prefix\
    \ configuration on the DDT\n      Map-Server SHOULD be marked as \"complete\"\
    \ when the configuration\n      of the XEID-prefix lists all \"peer\" DDT nodes\
    \ that are also\n      authoritative for the same XEID-prefix or when it is known\
    \ that a\n      local DDT node is the only authoritative node for the XEID-prefix.\n\
    \   o  If it is setting action code NOT-AUTHORITATIVE.\n"
- title: 6.4.  Map-Referral Message Format
  contents:
  - "6.4.  Map-Referral Message Format\n        0                   1            \
    \       2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |Type=6 |                Reserved               | Record Count  |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                         Nonce . . .                           |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                         . . . Nonce                           |\n   +-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   |                         Record TTL                            |\n  \
    \ |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   R\
    \   | Referral Count| EID mask-len  | ACT |A|I|     Reserved        |\n   e  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   c   |SigCnt\
    \ |   Map Version Number  |            EID-AFI            |\n   o   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   r   |                          EID-prefix ...                       |\n  \
    \ d   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |\
    \  /|    Priority   |    Weight     |  M Priority   |   M Weight    |\n   | R\
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | e |\
    \       Unused Flags      |L|p|R|            Loc-AFI            |\n   | f +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  \\|                             Locator ...                       |\n \
    \  |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |\
    \   ~                          Sig section                          ~\n   +->\
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type:\
    \  Type value 6 was reserved for future use in [RFC6830].  This\n      document\
    \ allocates this value to identify Map-Referral messages.\n   ACT:  The ACT (Action)\
    \ field of the mapping Record in a Map-Referral\n      message encodes one of\
    \ the following six action types:\n      NODE-REFERRAL, MS-REFERRAL, MS-ACK, MS-NOT-REGISTERED,\n\
    \      DELEGATION-HOLE, or NOT-AUTHORITATIVE.  See Section 6.1 for\n      descriptions\
    \ of these action types.\n   Incomplete:  The \"I\" bit indicates that a DDT node's\
    \ Referral Set of\n      locators is incomplete and the receiver of this message\
    \ SHOULD NOT\n      cache the referral.  A DDT sets the \"Incomplete\" flag, the\
    \ TTL,\n      and the Action field as follows:\n   -------------------------------------------------------------------\n\
    \    Type (Action field)          Incomplete Referral Set   TTL values\n   -------------------------------------------------------------------\n\
    \     0    NODE-REFERRAL              No         Yes           1440\n     1  \
    \  MS-REFERRAL                No         Yes           1440\n     2    MS-ACK\
    \                     *          *             1440\n     3    MS-NOT-REGISTERED\
    \          *          *             1\n     4    DELEGATION-HOLE            No\
    \         No            15\n     5    NOT-AUTHORITATIVE          Yes        No\
    \            0\n   -------------------------------------------------------------------\n\
    \   *: The \"Incomplete\" flag setting for the Map-Server-originated\n      referral\
    \ of MS-ACK and MS-NOT-REGISTERED types depends on whether\n      the Map-Server\
    \ has the full peer Map-Server configuration for the\n      same prefix and has\
    \ encoded the information in the mapping Record.\n      The \"Incomplete\" bit\
    \ is not set when the Map-Server has encoded\n      the information; this means\
    \ that the Referral Set includes all the\n      RLOCs of all Map-Servers that\
    \ serve the prefix.  It MUST be set\n      when the configuration of the Map-Server\
    \ does not flag the\n      matching prefix as configured with the complete information\
    \ about\n      \"peer\" Map-Servers or when the Map-Server does not return all\n\
    \      configured locators.\n   Referral Count:  Number of RLOCs in the current\
    \ Referral Set.  This\n      number is equal to the number of \"Ref\" sections\
    \ in the message (as\n      shown in the diagram above).\n   SigCnt:  Indicates\
    \ the number of signatures (Signature section)\n      present in the Record. \
    \ If SigCnt is larger than 0, the signature\n      information captured in a Signature\
    \ section as described in\n      Section 6.4.1 will be appended to the end of\
    \ the Record.  The\n      number of Signature sections at the end of the Record\
    \ MUST match\n      the SigCnt.  Note that bits occupied by SigCnt were marked\
    \ as\n      \"Reserved\" in Records embedded into messages defined by [RFC6830]\n\
    \      and were required to be set to zero.\n   Loc-AFI:  AFI of the Locator field.\
    \  If the AFI value is different\n      from the LISP Canonical Address Format\
    \ (LCAF) AFI, security keys\n      are not included in the Record.  If the AFI\
    \ value is equal to the\n      LCAF AFI, the contents of the LCAF depend on the\
    \ Type field of the\n      LCAF.  LCAF Type 11 is used to store security material\
    \ along with\n      the AFI of the locator.  DDT nodes and DDT Map-Servers can\
    \ use\n      this LCAF Type to include public keys associated with their child\n\
    \      DDT nodes for an XEID-prefix Map-Referral Record.  LCAF Types and\n   \
    \   formats are defined in [RFC8060].\n   Locator:  RLOC of a DDT node to which\
    \ the DDT client is being\n      referred.  This is a variable-length field; its\
    \ length is\n      determined by the Loc-AFI setting.\n   All other fields and\
    \ their descriptions are equivalent to those in\n   the Map-Reply message, as\
    \ defined in LISP [RFC6830].  Note, though,\n   that the set of RLOCs correspond\
    \ to the DDT node to be queried as a\n   result of the referral and not to the\
    \ RLOCs for an actual EID-to-RLOC\n   mapping.\n"
- title: 6.4.1.  Signature Section
  contents:
  - "6.4.1.  Signature Section\n   SigCnt counts the number of signature sections\
    \ that appear at the end\n   of the Record.  The format of the signature section\
    \ is described\n   below.\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      /|                      Original Record TTL                      |\n  \
    \   / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    /\
    \  |                      Signature Expiration                     |\n   |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   s   |                      Signature Inception                      |\n  \
    \ i   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   g\
    \   |            Key Tag            |           Sig Length          |\n   |  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \\   |\
    \ Sig-Algorithm |    Reserved   |            Reserved           |\n    \\  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     \\ ~                             Signature                         ~\n \
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Original\
    \ Record TTL:  The original Record TTL for this Record that\n      is covered\
    \ by the signature.  The Record TTL value is specified\n      in minutes.\n  \
    \ Signature Expiration and Signature Inception:  Specify the validity\n      period\
    \ for the signature.  The signature MUST NOT be used for\n      authentication\
    \ prior to the inception date and MUST NOT be used\n      for authentication after\
    \ the expiration date.  Each field\n      specifies a date and time in the form\
    \ of a 32-bit unsigned number\n      of seconds elapsed since 1 January 1970 00:00:00\
    \ UTC, ignoring\n      leap seconds, in network byte order.\n   Key Tag:  An identifier\
    \ to specify which key is used for this\n      signature if more than one valid\
    \ key exists for the signing\n      DDT node.\n   Sig Length:  The length of the\
    \ Signature field in bytes.\n   Sig-Algorithm:  The identifier of the cryptographic\
    \ algorithm used\n      for the signature.  Sig-Algorithm values defined in this\n\
    \      specification are listed in Table 1.  Implementations conforming\n    \
    \  to this specification MUST implement at least RSA-SHA256 for DDT\n      signing.\
    \  Sig-Algorithm type 1 (RSA-SHA1) is deprecated and\n      SHOULD NOT be used.\n\
    \          +---------------+------------+-----------+------------+\n         \
    \ | Sig-Algorithm |    Name    | Reference |   Notes    |\n          +---------------+------------+-----------+------------+\n\
    \          |       1       |  RSA-SHA1  | [RFC8017] | DEPRECATED |\n         \
    \ |               |            |           |            |\n          |       2\
    \       | RSA-SHA256 | [RFC8017] | MANDATORY  |\n          +---------------+------------+-----------+------------+\n\
    \                       Table 1: Sig-Algorithm Values\n   Reserved:  MUST be set\
    \ to 0 on transmit and MUST be ignored on\n      receipt.\n   Signature:  Contains\
    \ the cryptographic signature that covers the\n      entire Map-Referral Record\
    \ to which this signature belongs.  For\n      the purpose of computing the signature,\
    \ the Record TTL\n      (Section 6.4) value is set to the value of Original Record\
    \ TTL and\n      the Signature field is filled with zeros.\n"
- title: 7.  DDT Network Elements and Their Operation
  contents:
  - "7.  DDT Network Elements and Their Operation\n   As described above, LISP-DDT\
    \ introduces a new network element -- the\n   DDT node -- and extends the functionality\
    \ of Map-Servers and\n   Map-Resolvers to send and receive Map-Referral messages.\
    \  The\n   operation of each of these devices is described below.\n"
- title: 7.1.  DDT Node
  contents:
  - "7.1.  DDT Node\n   When a DDT node receives a DDT Map-Request, it compares the\
    \ requested\n   XEID against its list of XEID-prefix delegations and its list\
    \ of\n   authoritative XEID-prefixes, and proceeds as follows:\n"
- title: 7.1.1.  Matching of a Delegated Prefix (or Sub-prefix)
  contents:
  - "7.1.1.  Matching of a Delegated Prefix (or Sub-prefix)\n   If the requested XEID\
    \ matches one of the DDT node's delegated\n   prefixes, then a Map-Referral message\
    \ is returned with the matching\n   more-specific XEID-prefix and the set of RLOCs\
    \ for the referral\n   target DDT nodes, including associated security information\
    \ (see\n   Section 10 for details on security).  If at least one DDT node of the\n\
    \   delegation is known to be a DDT Map-Server, then the Map-Referral\n   message\
    \ SHOULD be sent with action code MS-REFERRAL to indicate to\n   the receiver\
    \ that LISP-SEC information (if saved in the pending\n   request) SHOULD be included\
    \ in the next DDT Map-Request; otherwise,\n   the action code NODE-REFERRAL SHOULD\
    \ be used.\n   Note that a matched delegation does not have to be for a sub-prefix\n\
    \   of an authoritative prefix; in addition to being configured to\n   delegate\
    \ sub-prefixes of an authoritative prefix, a DDT node may also\n   be configured\
    \ with other XEID-prefixes for which it can provide\n   referrals to DDT nodes\
    \ anywhere in the database hierarchy.  This\n   capability to define \"shortcut\
    \ hints\" is never required to be\n   configured, but it may be a useful heuristic\
    \ for reducing the number\n   of iterations needed to find an EID, particularly\
    \ for private network\n   deployments.\n   Referral hints, if used properly, may\
    \ reduce the number of referrals\n   a DDT client needs to follow to locate a\
    \ DDT Map-Server authoritative\n   for the XEID-prefix being resolved.  On the\
    \ other hand, the incorrect\n   use of hints may create circular dependencies\
    \ (or \"referral loops\")\n   between DDT nodes.  A DDT client MUST be prepared\
    \ to handle such\n   circular referrals.  See Section 7.3.4 for a discussion of\
    \ referral\n   loops and measures that the DDT client must implement in order\
    \ to\n   detect circular referrals and prevent infinite looping.\n   Another danger\
    \ related to the use of hints is when a DDT deployment\n   spans multiple administrative\
    \ domains (i.e., different authorities\n   manage DDT nodes in the same DDT database).\
    \  In this case, an\n   operator managing a DDT node may not be aware of the fact\
    \ that the\n   node is being referred to by hints.  Locator addresses in hints\
    \ may\n   become stale when referred DDT nodes are taken out of service or\n \
    \  change their locator addresses.\n"
- title: 7.1.2.  Missing Delegation from an Authoritative Prefix
  contents:
  - "7.1.2.  Missing Delegation from an Authoritative Prefix\n   If the requested\
    \ XEID did not match a configured delegation but does\n   match an authoritative\
    \ XEID-prefix, then the DDT node MUST return a\n   Negative Map-Referral that\
    \ uses the least-specific XEID-prefix that\n   does not match any XEID-prefix\
    \ delegated by the DDT node.  The action\n   code is set to DELEGATION-HOLE; this\
    \ indicates that the XEID is not a\n   LISP destination.\n   If the requested\
    \ XEID did not match either a configured delegation,\n   an authoritative XEID-prefix,\
    \ or a hint, then a Negative Map-Referral\n   with action code NOT-AUTHORITATIVE\
    \ MUST be returned.\n"
- title: 7.2.  DDT Map-Server
  contents:
  - "7.2.  DDT Map-Server\n   When a DDT Map-Server receives a DDT Map-Request, its\
    \ operation is\n   similar to that of a DDT node, with additional processing as\
    \ follows:\n   o  If the requested XEID matches a registered XEID-prefix, then\
    \ the\n      Map-Request is forwarded to one of the destination ETR RLOCs (or\n\
    \      the Map-Server sends a Map-Reply, if it is providing a proxy\n      Map-Reply\
    \ service), and a Map-Referral with action code MS-ACK\n      MUST be returned\
    \ to the sender of the DDT Map-Request.\n   o  If the requested XEID matches a\
    \ configured XEID-prefix for which\n      no ETR registration has been received,\
    \ then a Negative\n      Map-Referral with action code MS-NOT-REGISTERED MUST\
    \ be returned\n      to the sender of the DDT Map-Request.\n"
- title: 7.3.  DDT Client
  contents:
  - "7.3.  DDT Client\n   A DDT client queries one or more DDT nodes and uses an iterative\n\
    \   process of following returned referrals until it receives one with\n   action\
    \ code MS-ACK (or an error indication).  MS-ACK indicates that\n   the Map-Request\
    \ has been sent to a Map-Server that will forward it to\n   an ETR that, in turn,\
    \ will provide a Map-Reply to the locator address\n   in the Map-Request.\n  \
    \ DDT client functionality will typically be implemented by DDT\n   Map-Resolvers.\
    \  Just as would any other Map-Resolver, a DDT\n   Map-Resolver accepts Map-Requests\
    \ from its clients (typically ITRs)\n   and ensures that those Map-Requests are\
    \ forwarded to the correct ETR,\n   which generates Map-Replies.  However, unlike\
    \ a Map-Resolver that\n   uses the LISP Alternative Logical Topology (LISP+ALT)\
    \ mapping system\n   [RFC6836], a DDT Map-Resolver implements DDT client functionality\
    \ to\n   find the correct ETR to answer a Map-Request; this requires a DDT\n \
    \  Map-Resolver to maintain additional state: a Map-Referral cache and a\n   pending\
    \ request list of XEIDs that are going through the iterative\n   referral process.\n\
    \   DDT client functionality may be implemented on ITRs.  In this case,\n   the\
    \ DDT client will not receive a Map-Request from another network\n   element;\
    \ instead, equivalent information will be provided to the DDT\n   client via a\
    \ programming interface.\n"
- title: 7.3.1.  Queuing and Sending DDT Map-Requests
  contents:
  - "7.3.1.  Queuing and Sending DDT Map-Requests\n   When a DDT client receives a\
    \ request to resolve an XEID (in the case\n   of a DDT Map-Resolver, this will\
    \ be in the form of a received\n   Encapsulated Map-Request), it first performs\
    \ a longest-match search\n   for the XEID in its referral cache.  If no match\
    \ is found or if a\n   negative cache entry is found, then the destination is\
    \ not in the\n   database; a Negative Map-Reply MUST be returned, and no further\n\
    \   processing is performed by the DDT client.\n   If a match is found, the DDT\
    \ client creates a pending request list\n   entry for the XEID and saves the original\
    \ request (in the case of a\n   DDT Map-Resolver, this will be the original Map-Request\
    \ minus the\n   encapsulation header) along with other information needed to track\n\
    \   progress through the iterative referral process; the \"referral\n   XEID-prefix\"\
    \ is also initialized to indicate that no referral has yet\n   been received.\
    \  The DDT client then creates a DDT Map-Request (which\n   is an Encapsulated\
    \ Map-Request with the \"DDT-originated\" flag set in\n   the message header)\
    \ for the XEID but without any authentication data\n   that may have been included\
    \ in the original request.  It sends the\n   DDT Map-Request to one of the RLOCs\
    \ in the chosen referral cache\n   entry.  The referral cache is initially populated\
    \ with one or more\n   statically configured entries; additional entries are added\
    \ when\n   referrals are followed, as described below.  A DDT client is not\n\
    \   absolutely required to cache referrals, but doing so will decrease\n   latency\
    \ and reduce lookup delays.\n   Note that in normal use on the public Internet,\
    \ the statically\n   configured initial referral cache for a DDT client should\
    \ include a\n   \"default\" entry with RLOCs for either the root DDT node or one\
    \ or\n   more DDT nodes that contain hints for the root DDT node.  If a DDT\n\
    \   client does not have such a configuration, it will return a Negative\n   Map-Reply\
    \ if it receives a query for an EID outside the subset of the\n   mapping database\
    \ known to it.  While this may be desirable on private\n   network deployments\
    \ or during early transition to LISP when few sites\n   are using it, this behavior\
    \ is not appropriate when LISP is in\n   general use on the Internet.  If DDT\
    \ message exchanges are\n   authenticated as described in Section 10, then the\
    \ DDT client MUST\n   also be configured with public keys of DDT nodes pointed\
    \ to by the\n   \"default\" cache entry.  In this case, the \"default\" entry\
    \ will\n   typically be for the root DDT node.\n"
- title: 7.3.2.  Receiving and Following Referrals
  contents:
  - "7.3.2.  Receiving and Following Referrals\n   After sending a DDT Map-Request,\
    \ a DDT client expects to receive a\n   Map-Referral response.  If none occurs\
    \ within the timeout period, the\n   DDT client retransmits the request, sending\
    \ it to the next RLOC in\n   the referral cache entry if one is available.  If\
    \ all RLOCs have been\n   tried and the maximum number of retransmissions has\
    \ occurred for\n   each, then the pending request list entry is dequeued and discarded.\n\
    \   In this case, the DDT client returns no response to the sender of the\n  \
    \ original request.\n   A DDT client processes a received Map-Referral message\
    \ according to\n   each action code:\n   NODE-REFERRAL:  The DDT client checks\
    \ for a possible referral loop as\n      described in Section 7.3.4.  If no loop\
    \ is found, the DDT client\n      saves the prefix returned in the Map-Referral\
    \ message in the\n      referral cache, updates the saved prefix and saved RLOCs\
    \ in the\n      pending request list entry, and follows the referral by sending\
    \ a\n      new DDT Map-Request to one of the DDT node RLOCs listed in the\n  \
    \    Referral Set; security information saved with the original\n      Map-Request\
    \ SHOULD NOT be included.\n   MS-REFERRAL:  The DDT client processes an MS-REFERRAL\
    \ in the same\n      manner as a NODE-REFERRAL, except that security information\
    \ saved\n      with the original Map-Request MUST be included in the new\n   \
    \   Map-Request sent to a Map-Server (see Section 10 for details on\n      security).\n\
    \   MS-ACK:  An MS-ACK is returned by a DDT Map-Server to indicate that\n    \
    \  it has one or more registered ETRs that can answer a Map-Request\n      for\
    \ the XEID and the request has been forwarded to one of them\n      (or, if the\
    \ Map-Server is providing a proxy service for the\n      prefix, then a reply\
    \ has been sent to the querying ITR).  If the\n      pending request did not include\
    \ saved LISP-SEC information or if\n      that information was already included\
    \ in the previous DDT\n      Map-Request (sent by the DDT client in response to\
    \ either an\n      MS-REFERRAL or a previous MS-ACK referral), then the pending\n\
    \      request for the XEID is complete; processing of the request stops,\n  \
    \    and all request state can be discarded.  Otherwise, LISP-SEC\n      information\
    \ is required and has not yet been sent to the\n      authoritative DDT Map-Server;\
    \ the DDT client MUST resend the DDT\n      Map-Request with LISP-SEC information\
    \ included, and the pending\n      request queue entry remains until another Map-Referral\
    \ with action\n      code MS-ACK is received.  If the \"Incomplete\" flag is not\
    \ set, the\n      prefix is saved in the referral cache.\n   MS-NOT-REGISTERED:\
    \  The DDT Map-Server queried could not process the\n      request because it\
    \ did not have any ETRs registered for a\n      matching, authoritative XEID-prefix.\
    \  If the DDT client has not\n      yet tried all of the RLOCs saved with the\
    \ pending request, then it\n      sends a Map-Request to the next RLOC in that\
    \ list.  If all RLOCs\n      have been tried, then the destination XEID is not\
    \ registered and\n      is unreachable.  The DDT client MUST return a Negative\
    \ Map-Reply\n      to the requester (or, in the case of a DDT Map-Resolver, to\
    \ the\n      sender of the original Map-Request).  This Map-Reply contains the\n\
    \      least-specific XEID-prefix in the range for which this DDT\n      Map-Server\
    \ is authoritative and in which no registrations exist.\n      The TTL value of\
    \ the Negative Map-Reply SHOULD be set to 1 minute.\n      A negative referral\
    \ cache entry is created for the prefix (whose\n      TTL also SHOULD be set to\
    \ 1 minute), and processing of the request\n      stops.\n   DELEGATION-HOLE:\
    \  The DDT Map-Server queried did not have an\n      XEID-prefix defined that\
    \ matched the requested XEID, so the XEID\n      does not exist in the mapping\
    \ database.  The DDT client MUST\n      return a Negative Map-Reply to the requester\
    \ (or, in the case of a\n      DDT Map-Resolver, to the sender of the original\
    \ Map-Request); this\n      Map-Reply SHOULD indicate the least-specific XEID-prefix\
    \ matching\n      the requested XEID for which no delegations exist and SHOULD\
    \ have\n      a TTL value of 15 minutes.  A negative referral cache entry is\n\
    \      created for the prefix (which also SHOULD have a TTL of\n      15 minutes),\
    \ and processing of the pending request stops.\n   NOT-AUTHORITATIVE:  The DDT\
    \ Map-Server queried is not authoritative\n      for the requested XEID.  This\
    \ can occur if a cached referral has\n      become invalid due to a change in\
    \ the database hierarchy.  If the\n      DDT client receiving this message can\
    \ determine that it is using\n      old cached information, it MAY choose to delete\
    \ that cached\n      information and retry the original Map-Request, starting\
    \ from its\n      \"root\" cache entry.  If this action code is received in response\n\
    \      to a query that did not use cached referral information, then it\n    \
    \  indicates a database synchronization problem or configuration\n      error.\
    \  The pending request is silently discarded; i.e., all state\n      for the request\
    \ that caused this answer is removed, and no answer\n      is returned to the\
    \ original requester.\n"
- title: 7.3.3.  Handling Referral Errors
  contents:
  - "7.3.3.  Handling Referral Errors\n   Other states are possible, such as a misconfigured\
    \ DDT node (acting\n   as a proxy Map-Server, for example) returning a Map-Reply\
    \ to the DDT\n   client; they should be considered errors and logged as such.\
    \  It is\n   not clear exactly what else the DDT client should do in such cases;\n\
    \   one possibility is to remove the pending request list entry and send\n   a\
    \ Negative Map-Reply to the requester (or, in the case of a DDT\n   Map-Resolver,\
    \ to the sender of the original Map-Request).\n   Alternatively, if a DDT client\
    \ detects unexpected behavior by a DDT\n   node, it could mark that node as unusable\
    \ in its referral cache and\n   update the pending request to try a different\
    \ DDT node if more than\n   one is listed in the referral cache.  In any case,\
    \ any prefix\n   contained in a Map-Referral message that causes a referral error\n\
    \   (including a referral loop) is not saved in the DDT client referral\n   cache.\n"
- title: 7.3.4.  Referral Loop Detection
  contents:
  - "7.3.4.  Referral Loop Detection\n   In response to a Map-Referral message with\
    \ action code NODE-REFERRAL\n   or MS-REFERRAL, a DDT client is directed to query\
    \ a new set of DDT\n   node RLOCs that are expected to have more-specific XEID-prefix\n\
    \   information for the requested XEID.  To prevent a possible \"iteration\n \
    \  loop\" (following referrals back and forth among a set of DDT nodes\n   without\
    \ ever finding an answer), a DDT client saves the last received\n   referral XEID-prefix\
    \ for each pending request and checks to see if a\n   newly received NODE-REFERRAL\
    \ or MS-REFERRAL message contains a\n   more-specific referral XEID-prefix; an\
    \ exact or less-specific match\n   of the saved XEID-prefix indicates a referral\
    \ loop.  If a loop is\n   detected, the DDT Map-Resolver handles the request as\
    \ described in\n   Section 7.3.3.  Otherwise, the DDT client saves the most recently\n\
    \   received referral XEID-prefix with the pending request when it\n   follows\
    \ the referral.\n   As an extra measure to prevent referral loops, it is probably\
    \ also\n   wise to limit the total number of referrals for any request to some\n\
    \   reasonable number; the exact value of that number will be determined\n   during\
    \ experimental deployment of LISP-DDT but is bounded by the\n   maximum length\
    \ of the XEID.\n   Note that when a DDT client adds an entry to its lookup queue\
    \ and\n   sends an initial Map-Request for an XEID, the queue entry has no\n \
    \  previous referral XEID-prefix; this means that the first DDT node\n   contacted\
    \ by a DDT Map-Resolver may provide a referral to anywhere in\n   the DDT hierarchy.\
    \  This, in turn, allows a DDT client to use\n   essentially any DDT node RLOCs\
    \ for its initial cache entries and\n   depend on the initial referral to provide\
    \ a good starting point for\n   Map-Requests; there is no need to configure the\
    \ same set of root DDT\n   nodes on all DDT clients.\n"
- title: 8.  Pseudocode and Decision Tree Diagrams
  contents:
  - "8.  Pseudocode and Decision Tree Diagrams\n   To illustrate the DDT algorithms\
    \ described above and to aid in\n   implementation, each of the major DDT Map-Server\
    \ and DDT Map-Resolver\n   functions are described below, first using simple \"\
    pseudocode\" and\n   then in the form of a decision tree.\n"
- title: 8.1.  Map-Resolver Processing of ITR Map-Request
  contents:
  - '8.1.  Map-Resolver Processing of ITR Map-Request

    '
- title: 8.1.1.  Pseudocode Summary
  contents:
  - "8.1.1.  Pseudocode Summary\n    if ( request pending, i.e., (ITR,EID) of request\
    \ same ) {\n        replace old request with new, & use new request nonce\n  \
    \       for future requests\n    } else if ( no match in refcache ) {\n      \
    \  return Negative Map-Reply to ITR\n    } else if ( match type DELEGATION-HOLE\
    \ ) {\n        return Negative Map-Reply to ITR\n    } else if ( match type MS-ACK\
    \ ) {\n        fwd DDT Map-Request to Map-Server\n    } else {\n        store\
    \ & fwd DDT Map-Request w/o security material\n         to node delegation\n \
    \   }\n"
- title: 8.1.2.  Decision Tree Diagram
  contents:
  - "8.1.2.  Decision Tree Diagram\n   +------------+\n   | Is request | Yes\n   |\
    \  pending?  |----> Replace old request with\n   |            |      new nonce\
    \ for future requests\n   +------------+\n         |\n         |No\n         |\n\
    \         V\n   +------------+\n   | Match in   | No\n   | referral   |----> Send\
    \ Negative Map-Reply\n   | cache?     |      (not a likely event, as root or\n\
    \   +------------+       hint configured on every Map-Resolver)\n         |\n\
    \         |Yes\n         |\n         V\n   +-------------+\n   | Match type  |\
    \ Yes\n   | DELEGATION- |----> Send Negative Map-Reply\n   | HOLE?       |\n \
    \  +-------------+\n         |\n         |No\n         |\n         V\n   +------------+\n\
    \   | Match type | Yes\n   | MS-ACK?    |----> Forward DDT Map-Request to Map-Server\n\
    \   |            |\n   +------------+\n         |\n         |No\n         |\n\
    \         V\n   Store original request & send DDT Map-Request w/o security material\n\
    \    to DDT node delegation\n"
- title: 8.2.  Map-Resolver Processing of Map-Referral Message
  contents:
  - '8.2.  Map-Resolver Processing of Map-Referral Message

    '
- title: 8.2.1.  Pseudocode Summary
  contents:
  - "8.2.1.  Pseudocode Summary\n      if ( authentication signature validation failed\
    \ ) {\n          silently drop\n      }\n      if ( no request pending matched\
    \ by referral nonce ) {\n          silently drop\n      }\n      if ( pfx in referral\
    \ less specific than last referral used ) {\n          if ( gone through root\
    \ ) {\n              silently drop\n          } else {\n              send request\
    \ to root\n          }\n      }\n      switch (map_referral_type) {\n        \
    \  case NOT_AUTHORITATIVE:\n              if ( gone through root ) {\n       \
    \           return Negative Map-Reply to ITR\n              } else {\n       \
    \           send request to root\n              }\n          case DELEGATION_HOLE:\n\
    \              cache & send Negative Map-Reply to ITR\n          case MS_REFERRAL:\n\
    \              if ( referral equal to last used ) {\n                  if ( gone\
    \ through root ) {\n                      return Negative Map-Reply to ITR\n \
    \                 } else {\n                      send request to root\n     \
    \             }\n              } else {\n                  cache\n           \
    \       follow the referral; include security material\n              }\n    \
    \      case NODE_REFERRAL:\n              if ( referral equal to last used ) {\n\
    \                  if ( gone through root ) {\n                      return Negative\
    \ Map-Reply to ITR\n                  } else {\n                      send request\
    \ to root\n                  }\n              } else {\n                  cache\n\
    \                  follow the referral; strip security material\n            \
    \  }\n          case MS_ACK:\n              if ( security material stripped )\
    \ {\n                  resend request with security material\n               \
    \   if { !incomplete } {\n                      cache\n                  }\n \
    \             }\n          case MS_NOT_REGISTERED:\n              if { all Map-Server\
    \ delegations not tried } {\n                  follow delegations not tried\n\
    \                  if ( !incomplete ) {\n                      cache\n       \
    \           }\n              } else {\n                  send Negative Map-Reply\
    \ to ITR\n                  if { !incomplete } {\n                      cache\n\
    \                  }\n              }\n          case DEFAULT:\n             \
    \ drop\n          }\n      }\n"
- title: 8.2.2.  Decision Tree Diagram
  contents:
  - "8.2.2.  Decision Tree Diagram\n                          +----------------+\n\
    \                          | Auth signature | No\n                          |\
    \     valid?     |----> Silently drop\n                          +----------------+\n\
    \                                  | Yes\n                                  V\n\
    \                            +------------+\n                            | Is\
    \ request | No\n                            |  pending?  |----> Silently drop\n\
    \                            +------------+\n                                \
    \  | Yes\n                                  V\n                    +------------------------------+\
    \ Yes\n                    | Pfx less specific than last? |----> Silently drop\n\
    \                    +------------------------------+\n                      \
    \            |No\n                                  V\n       +---------------------------------------------------+\n\
    \       |             What is Map-Referral type?            |--Unknown-+\n   \
    \    +---------------------------------------------------+          |\n      \
    \   |        |         |       |         |          |            V\n         |\
    \        |         |       |         |       DEL_HOLE      Drop\n         |  \
    \      |         |       |      MS_ACK        |\n         |        |         |\
    \       |         |          V\n         |        |     MS_REF   NODE_REF    \
    \ |      Cache & return\n         |        |         |       |         V     \
    \ Negative Map-Reply\n         |        |         |       |    +---------+\n \
    \        |   NOT_AUTH       |       |    | Was sec | Yes\n         |        |\
    \         |       |    | material|\n         |        |         |       |    |stripped?|---->\
    \ Done\n         |        |         V       V    +---------+\n         |     \
    \   |       +------------+      | No\n         |        |   Yes | Pfx equal  |\
    \      V\n"
- title: MS_NOT_REGISTERED |   +---| to last    |  +------------+
  contents:
  - "MS_NOT_REGISTERED |   +---| to last    |  +------------+\n         |        |\
    \   |   | used?      |  |\"Incomplete\"| Yes\n         |        |   |   +------------+\
    \  | bit set?   |---> Resend DDT\n         |        V   V          |No      +------------+\
    \     request w/\n         |  +------------+       |               |No       \
    \  security\n         |  |  Gone      |       V               |           material\n\
    \         |  |  through   |   Cache & follow      V\n         |  |  root?    \
    \ |   the referral     Cache & resend DDT\n         |  +------------+        \
    \            request with\n         |    |No      |Yes                   security\
    \ material\n         |    |        |\n         |    V        V\n         |  Send\
    \ req   Send Negative Map-Reply\n         |  to root\n         V\n +-----------+\
    \ Yes                       +------------+ Yes\n | Other MS  |---Follow other\
    \ MS-------->|\"Incomplete\"|----> Don't cache\n | not tried?|               \
    \            | bit set?   |\n |           |--Send Negative Map-Reply->|      \
    \      |----> Cache\n +-----------+ No                        +------------+ No\n"
- title: 8.3.  DDT Node Processing of DDT Map-Request Message
  contents:
  - '8.3.  DDT Node Processing of DDT Map-Request Message

    '
- title: 8.3.1.  Pseudocode Summary
  contents:
  - "8.3.1.  Pseudocode Summary\n  if ( I am not authoritative ) {\n      send Map-Referral\
    \ NOT_AUTHORITATIVE with\n       \"Incomplete\" bit set and TTL 0\n  } else if\
    \ ( delegation exists ) {\n      if ( delegated Map-Servers ) {\n          send\
    \ Map-Referral MS_REFERRAL with\n            TTL 'Default_DdtNode_Ttl'\n     \
    \ } else {\n          send Map-Referral NODE_REFERRAL with\n            TTL 'Default_DdtNode_Ttl'\n\
    \      }\n  } else {\n      if ( EID in site) {\n          if ( site registered\
    \ ) {\n              forward Map-Request to ETR\n              if ( Map-Server\
    \ peers configured ) {\n                  send Map-Referral MS_ACK with\n    \
    \               TTL 'Default_Registered_Ttl'\n              } else {\n       \
    \           send Map-Referral MS_ACK with\n                   TTL 'Default_Registered_Ttl'\
    \ and \"Incomplete\" bit set\n              }\n          } else {\n          \
    \    if ( Map-Server peers configured ) {\n                  send Map-Referral\
    \ MS_NOT_REGISTERED with\n                   TTL 'Default_Configured_Not_Registered_Ttl'\n\
    \              } else {\n                  send Map-Referral MS_NOT_REGISTERED\
    \ with\n                   TTL 'Default_Configured_Not_Registered_Ttl'\n     \
    \              and \"Incomplete\" bit set\n              }\n          }\n    \
    \  } else {\n          send Map-Referral DELEGATION_HOLE with\n           TTL\
    \ 'Default_Negative_Referral_Ttl'\n      }\n  }\n   where architectural constants\
    \ for TTL are set as follows:\n   Default_DdtNode_Ttl                      1440\
    \ minutes\n   Default_Registered_Ttl                   1440 minutes\n   Default_Negative_Referral_Ttl\
    \            15 minutes\n   Default_Configured_Not_Registered_Ttl    1 minute\n"
- title: 8.3.2.  Decision Tree Diagram
  contents:
  - "8.3.2.  Decision Tree Diagram\n +------------+\n |    Am I    | No\n |  authori-\
    \  |----> Return NOT_AUTHORITATIVE\n |   tative?  |       Incomplete = 1\n +------------+\
    \       TTL = Default_DdtNode_Ttl\n       |\n       |Yes\n       |\n       V\n\
    \ +------------+     +-------------+\n | Delegation | Yes | Delegations | Yes\n\
    \ |   exists?  |---->| are         |----> Return MS_REFERRAL\n |            |\
    \     | Map-Servers?|       TTL = Default_DdtNode_Ttl\n +------------+     +-------------+\n\
    \       |                  \\ No\n       |No                 +--> Return NODE_REFERRAL\n\
    \       |                        TTL = Default_DdtNode_Ttl\n       V\n +------------+\
    \     +------------+                  +------------+\n | EID in     | Yes | Site\
    \       | Yes              | Map-Server |\n |  site      |---->| registered?|---->\
    \ Forward---->| peers      |\n | config?    |     |            |      Map-Request\
    \ | configured?|\n +------------+     +------------+      to ETR      +------------+\n\
    \       |                |                           |        |\n       |    \
    \            |No                       No|        |Yes\n       |             \
    \   |                           |        |\n       |                |        \
    \                   V        V\n       |                |                Return\
    \ MS_ACK    Return MS_ACK\n       |                V                with INC=1\n\
    \       |         +------------+          TTL = Default_Registered_Ttl\n     \
    \  |         | Map-Server | Yes\n       |         | peers      |----> Return MS_NOT_REGISTERED\n\
    \       |         | configured?|      TTL = Default_Negative_Referral_Ttl\n  \
    \     |         +------------+\n       |                \\ No\n       |No    \
    \           +--> Return MS_NOT_REGISTERED\n       |                      Incomplete\
    \ = 1\n       V                      TTL = Default_Negative_Referral_Ttl\n Return\
    \ DELEGATION_HOLE\n  TTL = Default_Negative_Referral_Ttl\n"
- title: 9.  Example Topology and Request/Referral Following
  contents:
  - "9.  Example Topology and Request/Referral Following\n   This section shows an\
    \ example DDT tree and several possible scenarios\n   of Map-Requests coming to\
    \ a Map-Resolver and subsequent iterative DDT\n   referrals.  In this example,\
    \ RLOCs of DDT nodes are shown in the IPv4\n   address space while the EIDs are\
    \ in the IPv6 AF.  The same principle\n   of hierarchical delegation and pinpointing\
    \ referrals is equally\n   applicable to any AF whose address hierarchy can be\
    \ expressed as a\n   bit string with associated length.  The DDT \"tree\" of IPv4\
    \ prefixes\n   is another AF with immediate practical value.  This section could\n\
    \   benefit from additional examples, perhaps including one using IPv4\n   EIDs\
    \ and another using IPv6 RLOCs.  If this document is moved to the\n   Standards\
    \ Track, consideration should be given to adding such\n   examples.\n   To show\
    \ how referrals are followed to find the RLOCs for a number of\n   EIDs, consider\
    \ the following example EID topology for DBID=0, IID=0,\n   AFI=2, and EID=0/0:\n\
    \      +---------------------+  +---------------------+\n      |  root1: 192.0.2.1\
    \   |  |  root2: 192.0.2.2   |\n      | authoritative: ::/0 |  | authoritative:\
    \ ::/0 |\n      +---------------------+  +---------------------+\n           \
    \      |         \\   /        |\n                 |          \\ /         |\n\
    \                 |           X          |\n                 |          / \\ \
    \        |\n                 |         /   \\        |\n                 |   \
    \     |     |       |\n                 V        V     V       V\n  +-------------------------+\
    \  +--------------------------+\n  |  DDT node1: 192.0.2.11  |  |  DDT node2:\
    \ 192.0.2.12   |\n  |      authoritative:     |  |      authoritative:      |\n\
    \  |       2001:db8::/32     |  |       2001:db8::/32      |\n  +-------------------------+\
    \  +--------------------------+\n                 |         \\   /        |\n\
    \                 |          \\ /         |\n                 |           X  \
    \        |\n                 |          / \\         |\n                 |   \
    \      /   \\        |\n                 |        |     |       |\n          \
    \       V        V     V       V\n +--------------------------+  +---------------------------+\n\
    \ | Map-Server1: 192.0.2.101 |  |  DDT node3: 192.0.2.201   |\n |      authoritative:\
    \      |  |      authoritative:       |\n |    2001:db8:0100::/40    |  |    2001:db8:0500::/40\
    \     |\n | site1: 2001:db8:0103::/48|  +---------------------------+\n | site2:\
    \ 2001:db8:0104::/48|     |                    |\n +--------------------------+\
    \     |                    |\n                                  |            \
    \        |\n                                  |                    |\n       \
    \                           V                    V\n           +---------------------------+\
    \   +---------------------------+\n           | Map-Server2: 192.0.2.211  |  \
    \ | Map-Server3: 192.0.2.221  |\n           |      authoritative:       |   |\
    \      authoritative:       |\n           |    2001:db8:0500::/48     |   |  \
    \  2001:db8:0501::/48     |\n           |site3: 2001:db8:0500:1::/64|   |site5:\
    \ 2001:db8:0501:8::/64|\n           |site4: 2001:db8:0500:2::/64|   |site6: 2001:db8:0501:9::/64|\n\
    \           +---------------------------+   +---------------------------+\n  \
    \ DDT nodes are configured for this \"root\" at IP addresses 192.0.2.1\n   and\
    \ 192.0.2.2.  DDT Map-Resolvers are configured with default\n   referral cache\
    \ entries for these addresses.\n   The root DDT nodes delegate 2001:db8::/32 to\
    \ two DDT nodes with IP\n   addresses 192.0.2.11 and 192.0.2.12.\n   The DDT nodes\
    \ for 2001:db8::/32 delegate 2001:db8:0100::/40 to a DDT\n   Map-Server with RLOC\
    \ 192.0.2.101.\n   The DDT Map-Server for 2001:db8:0100::/40 is configured to\
    \ allow ETRs\n   to register the sub-prefixes 2001:db8:0103::/48 and\n   2001:db8:0104::/48.\n\
    \   The DDT nodes for 2001:db8::/32 also delegate 2001:db8:0500::/40 to a\n  \
    \ DDT node with RLOC 192.0.2.201.\n   The DDT node for 2001:db8:0500::/40 is further\
    \ configured to delegate\n   2001:db8:0500::/48 to a DDT Map-Server with RLOC\
    \ 192.0.2.211 and\n   2001:db8:0501::/48 to a DDT Map-Server with RLOC 192.0.2.221.\n\
    \   The DDT Map-Server for 2001:db8:0500::/48 is configured to allow ETRs\n  \
    \ to register the sub-prefixes 2001:db8:0500:1::/64 and\n   2001:db8:0500:2::/64.\n\
    \   The DDT Map-Server for 2001:db8:0501::/48 is configured to allow ETRs\n  \
    \ to register the sub-prefixes 2001:db8:0501:8::/64 and\n   2001:db8:0501:9::/64.\n"
- title: 9.1.  Lookup of 2001:db8:0103:1::1/128
  contents:
  - "9.1.  Lookup of 2001:db8:0103:1::1/128\n   The first example shows a DDT Map-Resolver\
    \ following a delegation\n   from the root to a DDT node followed by another delegation\
    \ to a DDT\n   Map-Server.\n   ITR1 sends an Encapsulated Map-Request for 2001:db8:0103:1::1\
    \ to one\n   of its configured (DDT) Map-Resolvers.  The DDT Map-Resolver proceeds\n\
    \   as follows:\n   1.  Send a DDT Map-Request (for 2001:db8:0103:1::1) to one\
    \ of the\n       root DDT nodes (192.0.2.1 or 192.0.2.2).\n   2.  Receive (and\
    \ save in the referral cache) the Map-Referral for\n       EID-prefix 2001:db8::/32,\
    \ action code NODE-REFERRAL, RLOC set\n       (192.0.2.11, 192.0.2.12).\n   3.\
    \  Send a DDT Map-Request to 192.0.2.11 or 192.0.2.12.\n   4.  Receive (and save\
    \ in the referral cache) the Map-Referral for\n       EID-prefix 2001:db8:0100::/40,\
    \ action code MS-REFERRAL, RLOC set\n       (192.0.2.101).\n   5.  Send a DDT\
    \ Map-Request to 192.0.2.101; if the ITR-originated\n       Encapsulated Map-Request\
    \ had a LISP-SEC signature, it is\n       included.\n   6.  The DDT Map-Server\
    \ at 192.0.2.101 decapsulates the DDT\n       Map-Request and forwards the Map-Request\
    \ to a registered site1\n       ETR for 2001:db8:0103::/48.\n   7.  The DDT Map-Server\
    \ at 192.0.2.101 sends a Map-Referral message\n       for EID-prefix 2001:db8:0103::/48,\
    \ action code MS-ACK, to the DDT\n       Map-Resolver.\n   8.  The DDT Map-Resolver\
    \ receives the Map-Referral message and\n       dequeues the pending request for\
    \ 2001:db8:0103:1::1.\n   9.  The site1 ETR for 2001:db8:0103::/48 receives the\
    \ Map-Request\n       forwarded by the DDT Map-Server and sends a Map-Reply to\
    \ ITR1.\n"
- title: 9.2.  Lookup of 2001:db8:0501:8:4::1/128
  contents:
  - "9.2.  Lookup of 2001:db8:0501:8:4::1/128\n   The next example shows a three-level\
    \ delegation: root to first DDT\n   node, first DDT node to second DDT node, and\
    \ second DDT node to DDT\n   Map-Server.\n   ITR2 sends an Encapsulated Map-Request\
    \ for 2001:db8:0501:8:4::1 to\n   one of its configured (DDT) Map-Resolvers, which\
    \ are different from\n   those for ITR1.  The DDT Map-Resolver proceeds as follows:\n\
    \   1.   Send a DDT Map-Request (for 2001:db8:0501:8:4::1) to one of the\n   \
    \     root DDT nodes (192.0.2.1 or 192.0.2.2).\n   2.   Receive (and save in the\
    \ referral cache) the Map-Referral for\n        EID-prefix 2001:db8::/32, action\
    \ code NODE-REFERRAL, RLOC set\n        (192.0.2.11, 192.0.2.12).\n   3.   Send\
    \ a DDT Map-Request to 192.0.2.11 or 192.0.2.12.\n   4.   Receive (and save in\
    \ the referral cache) the Map-Referral for\n        EID-prefix 2001:db8:0500::/40,\
    \ action code NODE-REFERRAL, RLOC\n        set (192.0.2.201).\n   5.   Send a\
    \ DDT Map-Request to 192.0.2.201.\n   6.   Receive (and save in the referral cache)\
    \ the Map-Referral for\n        EID-prefix 2001:db8:0501::/48, action code MS-REFERRAL,\
    \ RLOC set\n        (192.0.2.221).\n   7.   Send a DDT Map-Request to 192.0.2.221;\
    \ if the ITR-originated\n        Encapsulated Map-Request had a LISP-SEC signature,\
    \ it is\n        included.\n   8.   The DDT Map-Server at 192.0.2.221 decapsulates\
    \ the DDT\n        Map-Request and forwards the Map-Request to a registered site5\n\
    \        ETR for 2001:db8:0501:8::/64.\n   9.   The DDT Map-Server at 192.0.2.221\
    \ sends a Map-Referral message\n        for EID-prefix 2001:db8:0501:8::/64, action\
    \ code MS-ACK, to the\n        DDT Map-Resolver.\n   10.  The DDT Map-Resolver\
    \ receives a Map-Referral(MS-ACK) message and\n        dequeues the pending request\
    \ for 2001:db8:0501:8:4::1.\n   11.  The site5 ETR for 2001:db8:0501:8::/64 receives\
    \ a Map-Request\n        forwarded by the DDT Map-Server and sends a Map-Reply\
    \ to ITR2.\n"
- title: 9.3.  Lookup of 2001:db8:0104:2::2/128
  contents:
  - "9.3.  Lookup of 2001:db8:0104:2::2/128\n   This example shows how a DDT Map-Resolver\
    \ uses a saved referral cache\n   entry to skip the referral process and go directly\
    \ to a DDT\n   Map-Server for a prefix that is similar to one previously requested.\n\
    \   In this case, ITR1 uses the same Map-Resolver used in the example in\n   Section\
    \ 9.1.  It sends an Encapsulated Map-Request for\n   2001:db8:0104:2::2 to that\
    \ (DDT) Map-Resolver.  The DDT Map-Resolver\n   finds an MS-REFERRAL cache entry\
    \ for 2001:db8:0100::/40 with RLOC set\n   (192.0.2.101) and proceeds as follows:\n\
    \   1.  Send a DDT Map-Request (for 2001:db8:0104:2::2) to 192.0.2.101;\n    \
    \   if the ITR-originated Encapsulated Map-Request had a LISP-SEC\n       signature,\
    \ it is included.\n   2.  The DDT Map-Server at 192.0.2.101 decapsulates the DDT\n\
    \       Map-Request and forwards the Map-Request to a registered site2\n     \
    \  ETR for 2001:db8:0104::/48.\n   3.  The DDT Map-Server at 192.0.2.101 sends\
    \ a Map-Referral message\n       for EID-prefix 2001:db8:0104::/48, action code\
    \ MS-ACK, to the DDT\n       Map-Resolver.\n   4.  The DDT Map-Resolver receives\
    \ the Map-Referral (MS-ACK) and\n       dequeues the pending request for 2001:db8:0104:2::2.\n\
    \   5.  The site2 ETR for 2001:db8:0104::/48 receives a Map-Request and\n    \
    \   sends a Map-Reply to ITR1.\n"
- title: 9.4.  Lookup of 2001:db8:0500:2:4::1/128
  contents:
  - "9.4.  Lookup of 2001:db8:0500:2:4::1/128\n   This example shows how a DDT Map-Resolver\
    \ uses a saved referral cache\n   entry to start the referral process at a non-root,\
    \ intermediate DDT\n   node for a prefix that is similar to one previously requested.\n\
    \   In this case, ITR2 uses the same Map-Resolver used in the example in\n   Section\
    \ 9.2.  It sends an Encapsulated Map-Request for\n   2001:db8:0500:2:4::1 to that\
    \ (DDT) Map-Resolver, which finds a\n   NODE-REFERRAL cache entry for 2001:db8:0500::/40\
    \ with RLOC set\n   (192.0.2.201).  It proceeds as follows:\n   1.  Send a DDT\
    \ Map-Request (for 2001:db8:0500:2:4::1) to 192.0.2.201.\n   2.  Receive (and\
    \ save in the referral cache) the Map-Referral for\n       EID-prefix 2001:db8:0500::/48,\
    \ action code MS-REFERRAL, RLOC set\n       (192.0.2.211).\n   3.  Send a DDT\
    \ Map-Request to 192.0.2.211; if the ITR-originated\n       Encapsulated Map-Request\
    \ had a LISP-SEC signature, it is\n       included.\n   4.  The DDT Map-Server\
    \ at 192.0.2.211 decapsulates the DDT\n       Map-Request and forwards the Map-Request\
    \ to a registered site4\n       ETR for 2001:db8:0500:2::/64.\n   5.  The DDT\
    \ Map-Server at 192.0.2.211 sends a Map-Referral message\n       for EID-prefix\
    \ 2001:db8:0500:2::/64, action code MS-ACK, to the\n       DDT Map-Resolver.\n\
    \   6.  The DDT Map-Resolver receives the Map-Referral (MS-ACK) and\n       dequeues\
    \ the pending request for 2001:db8:0500:2:4::1.\n   7.  The site4 ETR for 2001:db8:0500:2::/64\
    \ receives a Map-Request and\n       sends a Map-Reply to ITR2.\n"
- title: 9.5.  Lookup of 2001:db8:0500::1/128 (Nonexistent EID)
  contents:
  - "9.5.  Lookup of 2001:db8:0500::1/128 (Nonexistent EID)\n   This example uses\
    \ the cached MS-REFERRAL for 2001:db8:0500::/48\n   learned above to start the\
    \ lookup process at the DDT Map-Server at\n   192.0.2.211.  The DDT Map-Resolver\
    \ proceeds as follows:\n   1.  Send a DDT Map-Request (for 2001:db8:0500::1) to\
    \ 192.0.2.211; if\n       the ITR-originated Encapsulated Map-Request had a LISP-SEC\n\
    \       signature, it is included.\n   2.  The DDT Map-Server at 192.0.2.211,\
    \ which is authoritative for\n       2001:db8:0500::/48, does not have a matching\
    \ delegation for\n       2001:db8:0500::1.  It responds with a Map-Referral message\
    \ for\n       2001:db8:0500::/64, action code DELEGATION-HOLE, to the DDT\n  \
    \     Map-Resolver.  The prefix 2001:db8:0500::/64 is used because it\n      \
    \ is the least-specific prefix that does match the requested EID\n       but does\
    \ not match one of the configured delegations\n       (2001:db8:0500:1::/64 and\
    \ 2001:db8:0500:2::/64).\n   3.  The DDT Map-Resolver receives the delegation,\
    \ adds a negative\n       referral cache entry for 2001:db8:0500::/64, dequeues\
    \ the pending\n       request for 2001:db8:0500::1, and returns a Negative Map-Reply\n\
    \       to ITR2.\n"
- title: 10.  Securing the Database and Message Exchanges
  contents:
  - "10.  Securing the Database and Message Exchanges\n   This section specifies the\
    \ DDT security architecture that provides\n   data origin authentication, data\
    \ integrity protection, and\n   XEID-prefix delegation.  Global XEID-prefix authorization\
    \ is out of\n   scope for this document.\n   Each DDT node is configured with\
    \ one or more public/private key pairs\n   that are used to digitally sign Map-Referral\
    \ Records for\n   XEID-prefix(es) for which the DDT node is authoritative.  In\
    \ other\n   words, each public/private key pair is associated with the\n   combination\
    \ of a DDT node and an XEID-prefix for which it is\n   authoritative.  Every DDT\
    \ node is also configured with the public\n   keys of its child DDT nodes.  By\
    \ including the public keys of target\n   child DDT nodes in the Map-Referral\
    \ Records and signing each Record\n   with the DDT node's private key, a DDT node\
    \ can securely delegate\n   sub-prefixes of its authoritative XEID-prefixes to\
    \ its child DDT\n   nodes.  A DDT node configured to provide hints must also have\
    \ the\n   public keys of the DDT nodes to which its hints point.  DDT node keys\n\
    \   can be encoded using LCAF Type 11 to associate the key to the RLOC of\n  \
    \ the referred DDT node.  If a node has more than one public key, it\n   should\
    \ sign its Records with at least one of these keys.  When a node\n   has N keys,\
    \ it can sustain up to N-1 key compromises.  The revocation\n   mechanism is described\
    \ in Section 10.2.1.\n   Map-Resolvers are configured with one or more trusted\
    \ public keys,\n   referred to as \"trust anchors\".  Trust anchors are used to\n\
    \   authenticate the DDT security infrastructure.  Map-Resolvers can\n   discover\
    \ a DDT node's public key by either (1) having it configured\n   as a trust anchor\
    \ or (2) obtaining it from the node's parent as part\n   of a signed Map-Referral.\
    \  When a public key is obtained from a\n   node's parent, it is considered trusted\
    \ if it is signed by a trust\n   anchor or if it is signed by a key that was previously\
    \ trusted.\n   Typically, in a Map-Resolver, the root DDT node's public keys should\n\
    \   be configured as trust anchors.  Once a Map-Resolver authenticates a\n   public\
    \ key, it locally caches the key along with the associated DDT\n   node RLOC and\
    \ XEID-prefix for future use.\n"
- title: 10.1.  XEID-Prefix Delegation
  contents:
  - "10.1.  XEID-Prefix Delegation\n   In order to delegate XEID sub-prefixes to its\
    \ child DDT nodes, a\n   parent DDT node signs its Map-Referrals.  Every signed\
    \ Map-Referral\n   MUST also include the public keys associated with each child\
    \ DDT\n   node.  Such a signature indicates that the parent DDT node is\n   delegating\
    \ the specified XEID-prefix to a given child DDT node.  The\n   signature is also\
    \ authenticating the public keys associated with the\n   child DDT nodes, and\
    \ authorizing them to be used by the child DDT\n   nodes, to provide origin authentication\
    \ and integrity protection for\n   further delegations and mapping information\
    \ of the XEID-prefix\n   allocated to the DDT node.\n   As a result, for a given\
    \ XEID-prefix, a Map-Resolver can form an\n   authentication chain from a configured\
    \ trust anchor (typically the\n   root DDT node) to the leaf nodes (Map-Servers).\
    \  Map-Resolvers\n   leverage this authentication chain to verify the Map-Referral\n\
    \   signatures while walking the DDT tree until they reach a Map-Server\n   authoritative\
    \ for the given XEID-prefix.\n"
- title: 10.2.  DDT Node Operation
  contents:
  - "10.2.  DDT Node Operation\n   Upon receiving a Map-Request, the DDT node responds\
    \ with a\n   Map-Referral as specified in Section 7.  For every Record present\
    \ in\n   the Map-Referral, the DDT node also includes the public keys\n   associated\
    \ with the Record's XEID-prefix and the RLOCs of the child\n   DDT nodes.  Each\
    \ Record contained in the Map-Referral is signed using\n   the DDT node's private\
    \ key.\n"
- title: 10.2.1.  DDT Public Key Revocation
  contents:
  - "10.2.1.  DDT Public Key Revocation\n   The node that owns a public key can also\
    \ revoke that public key.  For\n   instance, if a parent DDT node advertises a\
    \ public key for one of its\n   child DDT nodes, the child DDT node can at a later\
    \ time revoke that\n   key.  Since DDT nodes do not keep track of the Map-Resolvers\
    \ that\n   query them, revocation is done in a pull model, where the\n   Map-Resolver\
    \ is informed of the revocation of a key only when it\n   queries the node that\
    \ owns that key.  If the parent DDT node is\n   configured to advertise that key,\
    \ the parent DDT node must also be\n   signaled to remove the key from the Records\
    \ it advertises for the\n   child DDT node; this is necessary to avoid further\
    \ distribution of\n   the revoked key.\n   To securely revoke a key, the DDT node\
    \ creates a new Record for the\n   associated XEID-prefix and locator, including\
    \ the revoked key with\n   the R bit set.  (See Section 4.7 of [RFC8060] for details\
    \ regarding\n   the R bit.)  The DDT node must also include a signature in the\
    \ Record\n   that covers this Record; this is computed using the private key\n\
    \   corresponding to the key being revoked.  Such a Record is termed a\n   \"\
    revocation record\".  By including this Record in its Map-Referrals,\n   the DDT\
    \ node informs querying Map-Resolvers about the revoked key.  A\n   digital signature\
    \ computed with a revoked key can only be used to\n   authenticate the revocation\
    \ and SHOULD NOT be used to validate any\n   data.  To prevent a compromised key\
    \ from revoking other valid keys, a\n   given key can only be used to sign a revocation\
    \ for that specific\n   key; it cannot be used to revoke other keys.  This prevents\
    \ the use\n   of a compromised key to revoke other valid keys as described in\n\
    \   [RFC5011].  A revocation record MUST be advertised for a period of\n   time\
    \ equal to or greater than the TTL value of the Record that\n   initially advertised\
    \ the key, starting from the time that the\n   advertisement of the key was stopped\
    \ by removal from the parent\n   DDT node.\n"
- title: 10.3.  Map-Server Operation
  contents:
  - "10.3.  Map-Server Operation\n   Similar to a DDT node, a Map-Server is configured\
    \ with one or more\n   public/private key pairs that it must use to sign Map-Referrals.\n\
    \   However, unlike DDT nodes, Map-Servers do not delegate prefixes and\n   as\
    \ a result do not need to include keys in the Map-Referrals they\n   generate.\n"
- title: 10.4.  Map-Resolver Operation
  contents:
  - "10.4.  Map-Resolver Operation\n   Upon receiving a Map-Referral, the Map-Resolver\
    \ MUST first verify the\n   signature(s) by using either a trust anchor or a previously\n\
    \   authenticated public key associated with the DDT node sending the\n   Map-Referral.\
    \  If multiple authenticated keys are associated with the\n   DDT node sending\
    \ this Map-Referral, the Key Tag field (Section 6.4.1)\n   of the signature can\
    \ be used to select the correct public key for\n   verifying the signature.  If\
    \ the key tag matches more than one key\n   associated with that DDT node, the\
    \ Map-Resolver MUST try to verify\n   the signature with all matching keys.  For\
    \ every matching key that is\n   found, the Map-Resolver MUST also verify that\
    \ the key is\n   authoritative for the XEID-prefix in the Map-Referral Record.\
    \  If\n   such a key is found, the Map-Resolver MUST use it to verify the\n  \
    \ associated signature in the Record.  If (1) no matching key is found,\n   (2)\
    \ none of the matching keys is authoritative for the XEID-prefix in\n   the Map-Referral\
    \ Record, or (3) such a key is found but the signature\n   is not valid, the Map-Referral\
    \ Record is considered corrupted and\n   MUST be discarded.  This may be due to\
    \ expired keys.  The\n   Map-Resolver MAY try other siblings of this node if there\
    \ is an\n   alternate node that is authoritative for the same prefix.  If not,\n\
    \   the Map-Resolver CAN query the DDT node's parent to retrieve a valid\n   key.\
    \  It is good practice to use a counter or timer to avoid\n   repeating this process\
    \ if the Map-Resolver cannot verify the\n   signature after several attempts.\n\
    \   Once the signature is verified, the Map-Resolver has verified the\n   XEID-prefix\
    \ delegation in the Map-Referral.  This also means that\n   public keys of the\
    \ child DDT nodes were authenticated; the\n   Map-Resolver must add these keys\
    \ to the authenticated keys associated\n   with each child DDT node and XEID-prefix.\
    \  These keys are considered\n   valid for the duration specified in the Record's\
    \ TTL field.\n"
- title: 11.  Open Issues and Considerations
  contents:
  - "11.  Open Issues and Considerations\n   There are a number of issues with the\
    \ organization of the mapping\n   database that need further investigation.  Among\
    \ these are:\n   o  Defining an interface to implement interconnection and/or\n\
    \      interoperability with other mapping databases, such as LISP+ALT.\n   o\
    \  Additional key structures for use with LISP-DDT, such as key\n      structures\
    \ to support additional EID formats as defined in\n      [RFC8060].\n   o  Management\
    \ of the DDT Map-Resolver referral cache -- in\n      particular, detecting and\
    \ removing outdated entries.\n   o  Best practices for either configuring hint\
    \ referrals or avoiding\n      their use.\n   Operational experience will help\
    \ answer open questions surrounding\n   these and other issues.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   IANA has made the following early assignment per\
    \ this document:\n   o  Message type 6, \"LISP DDT Map-Referral\", was added to\
    \ the\n      \"LISP Packet Types\" registry.  See Section 6.4 (\"Map-Referral\n\
    \      Message Format\").\n   As this document is an Experimental RFC, this is\
    \ an early allocation\n   as per [RFC7120].\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   Section 10 describes a DDT security architecture\
    \ that provides data\n   origin authentication, data integrity protection, and\
    \ XEID-prefix\n   delegation within the DDT infrastructure.\n   Global XEID-prefix\
    \ authorization is beyond the scope of this\n   document, but the Secure Inter-Domain\
    \ Routing (SIDR) working group\n   [RFC6480] is developing an infrastructure to\
    \ support improved\n   security of Internet routing.  Further work is required\
    \ to determine\n   if SIDR's Public Key Infrastructure (PKI) and the distributed\n\
    \   repository system it uses for storing and disseminating PKI data\n   objects\
    \ may also be used by DDT devices to verifiably assert that\n   they are the legitimate\
    \ holders of a set of XEID-prefixes.\n   This document specifies how DDT security\
    \ and LISP-SEC [LISP-SEC]\n   complement one another to secure the DDT infrastructure,\
    \ Map-Referral\n   messages, and the Map-Request/Map-Reply protocols.  In the\
    \ future,\n   other LISP security mechanisms may be developed to replace LISP-SEC.\n\
    \   Such future security mechanisms should describe how they can be used\n   together\
    \ with LISP-DDT to provide similar levels of protection.\n   LISP-SEC can use\
    \ the DDT public-key infrastructure to secure the\n   transport of LISP-SEC key\
    \ material (the One-Time Key) from a\n   Map-Resolver to the corresponding Map-Server.\
    \  For this reason, when\n   LISP-SEC is deployed in conjunction with a LISP-DDT\
    \ mapping database\n   and the path between the Map-Resolver and Map-Server needs\
    \ to be\n   protected, DDT security as described in Section 10 should be enabled\n\
    \   as well.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC6830]  Farinacci, D., Fuller, V., Meyer, D., and D. Lewis, \"The\n   \
    \           Locator/ID Separation Protocol (LISP)\", RFC 6830,\n             \
    \ DOI 10.17487/RFC6830, January 2013,\n              <http://www.rfc-editor.org/info/rfc6830>.\n\
    \   [RFC6833]  Fuller, V. and D. Farinacci, \"Locator/ID Separation\n        \
    \      Protocol (LISP) Map-Server Interface\", RFC 6833,\n              DOI 10.17487/RFC6833,\
    \ January 2013,\n              <http://www.rfc-editor.org/info/rfc6833>.\n   [RFC7120]\
    \  Cotton, M., \"Early IANA Allocation of Standards Track Code\n             \
    \ Points\", BCP 100, RFC 7120, DOI 10.17487/RFC7120,\n              January 2014,\
    \ <http://www.rfc-editor.org/info/rfc7120>.\n   [RFC8017]  Moriarty, K., Ed.,\
    \ Kaliski, B., Jonsson, J., and A. Rusch,\n              \"PKCS #1: RSA Cryptography\
    \ Specifications Version 2.2\",\n              RFC 8017, DOI 10.17487/RFC8017,\
    \ November 2016,\n              <http://www.rfc-editor.org/info/rfc8017>.\n  \
    \ [RFC8060]  Farinacci, D., Meyer, D., and J. Snijders, \"LISP Canonical\n   \
    \           Address Format (LCAF)\", RFC 8060, DOI 10.17487/RFC8060,\n       \
    \       February 2017, <http://www.rfc-editor.org/info/rfc8060>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n              RFC 2119\
    \ Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174, May 2017,\n\
    \              <http://www.rfc-editor.org/info/rfc8174>.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [AFI]      IANA, \"Address Family Numbers\"\
    ,\n              <http://www.iana.org/assignments/address-family-numbers/>.\n\
    \   [LISP-SEC] Maino, F., Ermagan, V., Cabellos, A., and D. Saucez,\n        \
    \      \"LISP-Security (LISP-SEC)\", Work in Progress,\n              draft-ietf-lisp-sec-12,\
    \ November 2016.\n   [LISP-TREE]\n              Jakab, L., Cabellos-Aparicio,\
    \ A., Coras, F., Saucez, D.,\n              and O. Bonaventure, \"LISP-TREE: a\
    \ DNS Hierarchy to Support\n              the LISP Mapping System\", IEEE Journal\
    \ on Selected Areas\n              in Communications, Volume 28, Issue 8,\n  \
    \            DOI 10.1109/JSAC.2010.101011, September 2010,\n              <http://ieeexplore.ieee.org/xpls/\n\
    \              abs_all.jsp?arnumber=5586446>.\n   [RFC1918]  Rekhter, Y., Moskowitz,\
    \ B., Karrenberg, D., de Groot, G.,\n              and E. Lear, \"Address Allocation\
    \ for Private Internets\",\n              BCP 5, RFC 1918, DOI 10.17487/RFC1918,\
    \ February 1996,\n              <http://www.rfc-editor.org/info/rfc1918>.\n  \
    \ [RFC5011]  StJohns, M., \"Automated Updates of DNS Security (DNSSEC)\n     \
    \         Trust Anchors\", STD 74, RFC 5011, DOI 10.17487/RFC5011,\n         \
    \     September 2007, <http://www.rfc-editor.org/info/rfc5011>.\n   [RFC6480]\
    \  Lepinski, M. and S. Kent, \"An Infrastructure to Support\n              Secure\
    \ Internet Routing\", RFC 6480, DOI 10.17487/RFC6480,\n              February\
    \ 2012, <http://www.rfc-editor.org/info/rfc6480>.\n   [RFC6836]  Fuller, V., Farinacci,\
    \ D., Meyer, D., and D. Lewis,\n              \"Locator/ID Separation Protocol\
    \ Alternative Logical\n              Topology (LISP+ALT)\", RFC 6836, DOI 10.17487/RFC6836,\n\
    \              January 2013, <http://www.rfc-editor.org/info/rfc6836>.\n   [RFC6837]\
    \  Lear, E., \"NERD: A Not-so-novel Endpoint ID (EID) to\n              Routing\
    \ Locator (RLOC) Database\", RFC 6837,\n              DOI 10.17487/RFC6837, January\
    \ 2013,\n              <http://www.rfc-editor.org/info/rfc6837>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to express their thanks to Lorand\
    \ Jakab,\n   Albert Cabellos, Florin Coras, Damien Saucez, and Olivier Bonaventure\n\
    \   for their work on LISP-TREE [LISP-TREE] and LISP iterable mappings\n   that\
    \ inspired the hierarchical database structure and lookup\n   iteration approach\
    \ described in this document.  Thanks also go to\n   Dino Farinacci and Isidor\
    \ Kouvelas for their implementation work; to\n   Selina Heimlich and Srin Subramanian\
    \ for testing; to Fabio Maino for\n   work on security processing; and to Job\
    \ Snijders, Glen Wiley, Neel\n   Goyal, and Mike Gibbs for work on operational\
    \ considerations and\n   initial deployment of a prototype database infrastructure.\
    \  Special\n   thanks go to Jesper Skriver, Andrew Partan, and Noel Chiappa, all\
    \ of\n   whom have participated in (and put up with) seemingly endless hours\n\
    \   of discussion of mapping database ideas, concepts, and issues.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Vince Fuller\n   VAF.NET Internet Consulting\n   Email:\
    \ vince.fuller@gmail.com\n   Darrel Lewis\n   Cisco Systems\n   Email: darlewis@cisco.com\n\
    \   Vina Ermagan\n   Cisco Systems\n   Email: vermagan@cisco.com\n   Amit Jain\n\
    \   Juniper Networks\n   Email: atjain@juniper.net\n   Anton Smirnov\n   Cisco\
    \ Systems\n   Email: as@cisco.com\n"
