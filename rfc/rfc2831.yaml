- title: __initial_text__
  contents:
  - '            Using Digest Authentication as a SASL Mechanism

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification defines how HTTP Digest Authentication [Digest]\n\
    \   can be used as a SASL [RFC 2222] mechanism for any protocol that has\n   a\
    \ SASL profile. It is intended both as an improvement over CRAM-MD5\n   [RFC 2195]\
    \ and as a convenient way to support a single authentication\n   mechanism for\
    \ web, mail, LDAP, and other protocols.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n    3.4 ONLINE DICTIONARY ATTACKS....................................16\n\
    \    3.5 OFFLINE DICTIONARY ATTACKS...................................16\n   \
    \ 3.6 MAN IN THE MIDDLE............................................17\n    3.7\
    \ CHOSEN PLAINTEXT ATTACKS.....................................17\n    3.8 SPOOFING\
    \ BY COUNTERFEIT SERVERS..............................17\n    3.9 STORING PASSWORDS............................................17\n\
    \    3.10 MULTIPLE REALMS.............................................18\n   \
    \ 3.11 SUMMARY.....................................................18\n   4 EXAMPLE.........................................................18\n\
    \   5 REFERENCES......................................................20\n   6\
    \ AUTHORS' ADDRESSES..............................................21\n   7 ABNF............................................................21\n\
    \    7.1 AUGMENTED BNF................................................21\n   \
    \ 7.2 BASIC RULES..................................................23\n   8 SAMPLE\
    \ CODE.....................................................25\n   9 FULL COPYRIGHT\
    \ STATEMENT........................................27\n"
- title: 1  Introduction
  contents:
  - "1  Introduction\n   This specification describes the use of HTTP Digest Access\n\
    \   Authentication as a SASL mechanism. The authentication type\n   associated\
    \ with the Digest SASL mechanism is \"DIGEST-MD5\".\n   This specification is\
    \ intended to be upward compatible with the\n   \"md5-sess\" algorithm of HTTP/1.1\
    \ Digest Access Authentication\n   specified in [Digest]. The only difference\
    \ in the \"md5-sess\"\n   algorithm is that some directives not needed in a SASL\
    \ mechanism have\n   had their values defaulted.\n   There is one new feature\
    \ for use as a SASL mechanism: integrity\n   protection on application protocol\
    \ messages after an authentication\n   exchange.\n   Also, compared to CRAM-MD5,\
    \ DIGEST-MD5 prevents chosen plaintext\n   attacks, and permits the use of third\
    \ party authentication servers,\n   mutual authentication, and optimized reauthentication\
    \ if a client has\n   recently authenticated to a server.\n"
- title: 1.1  Conventions and Notation
  contents:
  - "1.1  Conventions and Notation\n   This specification uses the same ABNF notation\
    \ and lexical\n   conventions as HTTP/1.1 specification; see appendix A.\n   Let\
    \ { a, b, ... } be the concatenation of the octet strings a, b, ...\n   Let H(s)\
    \ be the 16 octet MD5 hash [RFC 1321] of the octet string s.\n   Let KD(k, s)\
    \ be H({k, \":\", s}), i.e., the 16 octet hash of the string\n   k, a colon and\
    \ the string s.\n   Let HEX(n) be the representation of the 16 octet MD5 hash\
    \ n as a\n   string of 32 hex digits (with alphabetic characters always in lower\n\
    \   case, since MD5 is case sensitive).\n   Let HMAC(k, s) be the 16 octet HMAC-MD5\
    \ [RFC 2104] of the octet\n   string s using the octet string k as a key.\n  \
    \ The value of a quoted string constant as an octet string does not\n   include\
    \ any terminating null character.\n"
- title: 1.2  Requirements
  contents:
  - "1.2  Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC 2119].\n   An implementation is not compliant if it fails to satisfy\
    \ one or more\n   of the MUST level requirements for the protocols it implements.\
    \ An\n   implementation that satisfies all the MUST level and all the SHOULD\n\
    \   level requirements for its protocols is said to be \"unconditionally\n   compliant\"\
    ; one that satisfies all the MUST level requirements but\n   not all the SHOULD\
    \ level requirements for its protocols is said to be\n   \"conditionally compliant.\"\
    \n"
- title: 2  Authentication
  contents:
  - "2  Authentication\n   The following sections describe how to use Digest as a\
    \ SASL\n   authentication mechanism.\n"
- title: 2.1  Initial Authentication
  contents:
  - "2.1  Initial Authentication\n   If the client has not recently authenticated\
    \ to the server, then it\n   must perform \"initial authentication\", as defined\
    \ in this section. If\n   it has recently authenticated, then a more efficient\
    \ form is\n   available, defined in the next section.\n"
- title: 2.1.1  Step One
  contents:
  - "2.1.1  Step One\n   The server starts by sending a challenge. The data encoded\
    \ in the\n   challenge contains a string formatted according to the rules for\
    \ a\n   \"digest-challenge\" defined as follows:\n   digest-challenge  =\n   \
    \      1#( realm | nonce | qop-options | stale | maxbuf | charset\n          \
    \     algorithm | cipher-opts | auth-param )\n        realm             = \"realm\"\
    \ \"=\" <\"> realm-value <\">\n        realm-value       = qdstr-val\n       \
    \ nonce             = \"nonce\" \"=\" <\"> nonce-value <\">\n        nonce-value\
    \       = qdstr-val\n        qop-options       = \"qop\" \"=\" <\"> qop-list <\"\
    >\n        qop-list          = 1#qop-value\n        qop-value         = \"auth\"\
    \ | \"auth-int\" | \"auth-conf\" |\n                             token\n     \
    \   stale             = \"stale\" \"=\" \"true\"\n        maxbuf            =\
    \ \"maxbuf\" \"=\" maxbuf-value\n        maxbuf-value      = 1*DIGIT\n       \
    \ charset           = \"charset\" \"=\" \"utf-8\"\n        algorithm         =\
    \ \"algorithm\" \"=\" \"md5-sess\"\n        cipher-opts       = \"cipher\" \"\
    =\" <\"> 1#cipher-value <\">\n        cipher-value      = \"3des\" | \"des\" |\
    \ \"rc4-40\" | \"rc4\" |\n                            \"rc4-56\" | token\n   \
    \     auth-param        = token \"=\" ( token | quoted-string )\n   The meanings\
    \ of the values of the directives used above are as\n   follows:\n   realm\n \
    \     Mechanistically, a string which can enable users to know which\n      username\
    \ and password to use, in case they might have different\n      ones for different\
    \ servers. Conceptually, it is the name of a\n      collection of accounts that\
    \ might include the user's account. This\n      string should contain at least\
    \ the name of the host performing the\n      authentication and might additionally\
    \ indicate the collection of\n      users who might have access. An example might\
    \ be\n      \"registered_users@gotham.news.example.com\".  This directive is\n\
    \      optional; if not present, the client SHOULD solicit it from the\n     \
    \ user or be able to compute a default; a plausible default might be\n      the\
    \ realm supplied by the user when they logged in to the client\n      system.\
    \ Multiple realm directives are allowed, in which case the\n      user or client\
    \ must choose one as the realm for which to supply to\n      username and password.\n\
    \   nonce\n      A server-specified data string which MUST be different each time\
    \ a\n      digest-challenge is sent as part of initial authentication.  It is\n\
    \      recommended that this string be base64 or hexadecimal data. Note\n    \
    \  that since the string is passed as a quoted string, the\n      double-quote\
    \ character is not allowed unless escaped (see section\n      7.2). The contents\
    \ of the nonce are implementation dependent. The\n      security of the implementation\
    \ depends on a good choice. It is\n      RECOMMENDED that it contain at least\
    \ 64 bits of entropy. The nonce\n      is opaque to the client. This directive\
    \ is required and MUST\n      appear exactly once; if not present, or if multiple\
    \ instances are\n      present, the client should abort the authentication exchange.\n\
    \   qop-options\n      A quoted string of one or more tokens indicating the \"\
    quality of\n      protection\" values supported by the server.  The value \"auth\"\
    \n      indicates authentication; the value \"auth-int\" indicates\n      authentication\
    \ with integrity protection; the value \"auth-conf\"\n      indicates authentication\
    \ with integrity protection and encryption.\n      This directive is optional;\
    \ if not present it defaults to \"auth\".\n      The client MUST ignore unrecognized\
    \ options; if the client\n      recognizes no option, it should abort the authentication\
    \ exchange.\n   stale\n      The \"stale\" directive is not used in initial authentication.\
    \ See\n      the next section for its use in subsequent authentications. This\n\
    \      directive may appear at most once; if multiple instances are\n      present,\
    \ the client should abort the authentication exchange.\n   maxbuf\n      A number\
    \ indicating the size of the largest buffer the server is\n      able to receive\
    \ when using \"auth-int\" or \"auth-conf\". If this\n      directive is missing,\
    \ the default value is 65536. This directive\n      may appear at most once; if\
    \ multiple instances are present, the\n      client should abort the authentication\
    \ exchange.\n   charset\n      This directive, if present, specifies that the\
    \ server supports\n      UTF-8 encoding for the username and password. If not\
    \ present, the\n      username and password must be encoded in ISO 8859-1 (of\
    \ which\n      US-ASCII is a subset). The directive is needed for backwards\n\
    \      compatibility with HTTP Digest, which only supports ISO 8859-1.\n     \
    \ This directive may appear at most once; if multiple instances are\n      present,\
    \ the client should abort the authentication exchange.\n   algorithm\n      This\
    \ directive is required for backwards compatibility with HTTP\n      Digest.,\
    \ which supports other algorithms. . This directive is\n      required and MUST\
    \ appear exactly once; if not present, or if\n      multiple instances are present,\
    \ the client should abort the\n      authentication exchange.\n   cipher-opts\n\
    \      A list of ciphers that the server supports. This directive must be\n  \
    \    present exactly once if \"auth-conf\" is offered in the\n      \"qop-options\"\
    \ directive, in which case the \"3des\" and \"des\" modes\n      are mandatory-to-implement.\
    \ The client MUST ignore unrecognized\n      options; if the client recognizes\
    \ no option, it should abort the\n      authentication exchange.\n      des\n\
    \         the Data Encryption Standard (DES) cipher [FIPS] in cipher\n       \
    \  block chaining (CBC) mode with a 56 bit key.\n      3des\n         the \"triple\
    \ DES\" cipher in CBC mode with EDE with the same key\n         for each E stage\
    \ (aka \"two keys mode\") for a total key length\n         of 112 bits.\n    \
    \  rc4, rc4-40, rc4-56\n         the RC4 cipher with a 128 bit, 40 bit, and 56\
    \ bit key,\n         respectively.\n   auth-param This construct allows for future\
    \ extensions; it may appear\n      more than once. The client MUST ignore any\
    \ unrecognized\n      directives.\n   For use as a SASL mechanism, note that the\
    \ following changes are made\n   to \"digest-challenge\" from HTTP: the following\
    \ Digest options (called\n   \"directives\" in HTTP terminology) are unused (i.e.,\
    \ MUST NOT be sent,\n   and MUST be ignored if received):\n    opaque\n    domain\n\
    \   The size of a digest-challenge MUST be less than 2048 bytes.\n"
- title: 2.1.2  Step Two
  contents:
  - "2.1.2  Step Two\n   The client makes note of the \"digest-challenge\" and then\
    \ responds\n   with a string formatted and computed according to the rules for\
    \ a\n   \"digest-response\" defined as follows:\n   digest-response  = 1#( username\
    \ | realm | nonce | cnonce |\n                          nonce-count | qop | digest-uri\
    \ | response |\n                          maxbuf | charset | cipher | authzid\
    \ |\n                          auth-param )\n       username         = \"username\"\
    \ \"=\" <\"> username-value <\">\n       username-value   = qdstr-val\n      \
    \ cnonce           = \"cnonce\" \"=\" <\"> cnonce-value <\">\n       cnonce-value\
    \     = qdstr-val\n       nonce-count      = \"nc\" \"=\" nc-value\n       nc-value\
    \         = 8LHEX\n       qop              = \"qop\" \"=\" qop-value\n       digest-uri\
    \       = \"digest-uri\" \"=\" <\"> digest-uri-value <\">\n       digest-uri-value\
    \  = serv-type \"/\" host [ \"/\" serv-name ]\n       serv-type        = 1*ALPHA\n\
    \       host             = 1*( ALPHA | DIGIT | \"-\" | \".\" )\n       serv-name\
    \        = host\n       response         = \"response\" \"=\" response-value\n\
    \       response-value   = 32LHEX\n       LHEX             = \"0\" | \"1\" | \"\
    2\" | \"3\" |\n                          \"4\" | \"5\" | \"6\" | \"7\" |\n   \
    \                       \"8\" | \"9\" | \"a\" | \"b\" |\n                    \
    \      \"c\" | \"d\" | \"e\" | \"f\"\n       cipher           = \"cipher\" \"\
    =\" cipher-value\n       authzid          = \"authzid\" \"=\" <\"> authzid-value\
    \ <\">\n       authzid-value    = qdstr-val\n   username\n      The user's name\
    \ in the specified realm, encoded according to the\n      value of the \"charset\"\
    \ directive. This directive is required and\n      MUST be present exactly once;\
    \ otherwise, authentication fails.\n   realm\n      The realm containing the user's\
    \ account. This directive is\n      required if the server provided any realms\
    \ in the\n      \"digest-challenge\", in which case it may appear exactly once\
    \ and\n      its value SHOULD be one of those realms. If the directive is\n  \
    \    missing, \"realm-value\" will set to the empty string when computing\n  \
    \    A1 (see below for details).\n   nonce\n      The server-specified data string\
    \ received in the preceding\n      digest-challenge. This directive is required\
    \ and MUST be present\n      exactly once; otherwise, authentication fails.\n\
    \   cnonce\n      A client-specified data string which MUST be different each\
    \ time a\n      digest-response is sent as part of initial authentication. The\n\
    \      cnonce-value is an opaque quoted string value provided by the\n      client\
    \ and used by both client and server to avoid chosen\n      plaintext attacks,\
    \ and to provide mutual authentication. The\n      security of the implementation\
    \ depends on a good choice. It is\n      RECOMMENDED that it contain at least\
    \ 64 bits of entropy. This\n      directive is required and MUST be present exactly\
    \ once; otherwise,\n      authentication fails.\n   nonce-count\n      The nc-value\
    \ is the hexadecimal count of the number of requests\n      (including the current\
    \ request) that the client has sent with the\n      nonce value in this request.\
    \  For example, in the first request\n      sent in response to a given nonce\
    \ value, the client sends\n      \"nc=00000001\". The purpose of this directive\
    \ is to allow the\n      server to detect request replays by maintaining its own\
    \ copy of\n      this count - if the same nc-value is seen twice, then the request\n\
    \      is a replay.   See the description below of the construction of\n     \
    \ the response value. This directive may appear at most once; if\n      multiple\
    \ instances are present, the client should abort the\n      authentication exchange.\n\
    \   qop\n      Indicates what \"quality of protection\" the client accepted. If\n\
    \      present, it may appear exactly once and  its value MUST be one of\n   \
    \   the alternatives in qop-options. If not present, it defaults to\n      \"\
    auth\". These values affect the computation of the response. Note\n      that\
    \ this is a single token, not a quoted list of alternatives.\n   serv-type\n \
    \     Indicates the type of service, such as \"www\" for web service,\n      \"\
    ftp\" for FTP service, \"smtp\" for mail delivery service, etc. The\n      service\
    \ name as defined in the SASL profile for the protocol see\n      section 4 of\
    \ [RFC 2222], registered in the IANA registry of\n      \"service\" elements for\
    \ the GSSAPI host-based service name form\n      [RFC 2078].\n   host\n      The\
    \ DNS host name or IP address for the service requested.  The\n      DNS host\
    \ name must be the fully-qualified canonical name of the\n      host. The DNS\
    \ host name is the preferred form; see notes on server\n      processing of the\
    \ digest-uri.\n   serv-name\n      Indicates the name of the service if it is\
    \ replicated. The service\n      is considered to be replicated if the client's\
    \ service-location\n      process involves resolution using standard DNS lookup\
    \ operations,\n      and if these operations involve DNS records (such as SRV,\
    \ or MX)\n      which resolve one DNS name into a set of other DNS names. In this\n\
    \      case, the initial name used by the client is the \"serv-name\", and\n \
    \     the final name is the \"host\" component. For example, the incoming\n  \
    \    mail service for \"example.com\" may be replicated through the use\n    \
    \  of MX records stored in the DNS, one of which points at an SMTP\n      server\
    \ called \"mail3.example.com\"; it's \"serv-name\" would be\n      \"example.com\"\
    , it's \"host\" would be \"mail3.example.com\". If the\n      service is not replicated,\
    \ or the serv-name is identical to the\n      host, then the serv-name component\
    \ MUST be omitted.\n   digest-uri\n      Indicates the principal name of the service\
    \ with which the client\n      wishes to connect, formed from the serv-type, host,\
    \ and serv-name.\n      For example, the FTP service on \"ftp.example.com\" would\
    \ have a\n      \"digest-uri\" value of \"ftp/ftp.example.com\"; the SMTP server\
    \ from\n      the example above would have a \"digest-uri\" value of\n      \"\
    smtp/mail3.example.com/example.com\".\n   Servers SHOULD check that the supplied\
    \ value is correct. This will\n   detect accidental connection to the incorrect\
    \ server. It is also so\n   that clients will be trained to provide values that\
    \ will work with\n   implementations that use a shared back-end authentication\
    \ service\n   that can provide server authentication.\n   The serv-type component\
    \ should match the service being offered. The\n   host component should match\
    \ one of the host names of the host on\n   which the service is running, or it's\
    \ IP address. Servers SHOULD NOT\n   normally support the IP address form, because\
    \ server authentication\n   by IP address is not very useful; they should only\
    \ do so if the DNS\n   is unavailable or unreliable. The serv-name component should\
    \ match\n   one of the service's configured service names.\n   This directive\
    \ may appear at most once; if multiple instances are\n   present, the client should\
    \ abort the authentication exchange.\n   Note: In the HTTP use of Digest authentication,\
    \ the digest-uri is the\n   URI (usually a URL) of the resource requested -- hence\
    \ the name of\n   the directive.\n   response\n      A string of 32 hex digits\
    \ computed as defined below, which proves\n      that the user knows a password.\
    \ This directive is required and\n      MUST be present exactly once; otherwise,\
    \ authentication fails.\n   maxbuf\n      A number indicating the size of the\
    \ largest buffer the client is\n      able to receive. If this directive is missing,\
    \ the default value\n      is 65536. This directive may appear at most once; if\
    \ multiple\n      instances are present, the server should abort the authentication\n\
    \      exchange.\n   charset\n      This directive, if present, specifies that\
    \ the client has used\n      UTF-8 encoding for the username and password. If\
    \ not present, the\n      username and password must be encoded in ISO 8859-1\
    \ (of which\n      US-ASCII is a subset). The client should send this directive\
    \ only\n      if the server has indicated it supports UTF-8. The directive is\n\
    \      needed for backwards compatibility with HTTP Digest, which only\n     \
    \ supports ISO 8859-1.\n   LHEX\n      32 hex digits, where the alphabetic characters\
    \ MUST be lower case,\n      because MD5 is not case insensitive.\n   cipher\n\
    \      The cipher chosen by the client. This directive MUST appear\n      exactly\
    \ once if \"auth-conf\" is negotiated; if required and not\n      present, authentication\
    \ fails.\n   authzid\n      The \"authorization ID\" as per RFC 2222, encoded\
    \ in UTF-8. This\n      directive is optional. If present, and the authenticating\
    \ user has\n      sufficient privilege, and the server supports it, then after\n\
    \      authentication the server will use this identity for making all\n     \
    \ accesses and access checks. If the client specifies it, and the\n      server\
    \ does not support it, then the response-value will be\n      incorrect, and authentication\
    \ will fail.\n   The size of a digest-response MUST be less than 4096 bytes.\n"
- title: 2.1.2.1   Response-value
  contents:
  - "2.1.2.1   Response-value\n   The definition of \"response-value\" above indicates\
    \ the encoding for\n   its value -- 32 lower case hex characters. The following\
    \ definitions\n   show how the value is computed.\n   Although qop-value and components\
    \ of digest-uri-value may be\n   case-insensitive, the case which the client supplies\
    \ in step two is\n   preserved for the purpose of computing and verifying the\n\
    \   response-value.\n      response-value  =\n         HEX( KD ( HEX(H(A1)),\n\
    \                 { nonce-value, \":\" nc-value, \":\",\n                   cnonce-value,\
    \ \":\", qop-value, \":\", HEX(H(A2)) }))\n   If authzid is specified, then A1\
    \ is\n      A1 = { H( { username-value, \":\", realm-value, \":\", passwd } ),\n\
    \           \":\", nonce-value, \":\", cnonce-value, \":\", authzid-value }\n\
    \   If authzid is not specified, then A1 is\n      A1 = { H( { username-value,\
    \ \":\", realm-value, \":\", passwd } ),\n           \":\", nonce-value, \":\"\
    , cnonce-value }\n   where\n         passwd   = *OCTET\n   The \"username-value\"\
    , \"realm-value\" and \"passwd\" are encoded\n   according to the value of the\
    \ \"charset\" directive. If \"charset=UTF-8\"\n   is present, and all the characters\
    \ of either \"username-value\" or\n   \"passwd\" are in the ISO 8859-1 character\
    \ set, then it must be\n   converted to ISO 8859-1 before being hashed. This is\
    \ so that\n   authentication databases that store the hashed username, realm and\n\
    \   password (which is common) can be shared compatibly with HTTP, which\n   specifies\
    \ ISO 8859-1. A sample implementation of this conversion is\n   in section 8.\n\
    \   If the \"qop\" directive's value is \"auth\", then A2 is:\n      A2      \
    \ = { \"AUTHENTICATE:\", digest-uri-value }\n   If the \"qop\" value is \"auth-int\"\
    \ or \"auth-conf\" then A2 is:\n      A2       = { \"AUTHENTICATE:\", digest-uri-value,\n\
    \               \":00000000000000000000000000000000\" }\n   Note that \"AUTHENTICATE:\"\
    \ must be in upper case, and the second\n   string constant is a string with a\
    \ colon followed by 32 zeros.\n   These apparently strange values of A2 are for\
    \ compatibility with\n   HTTP; they were arrived at by setting \"Method\" to \"\
    AUTHENTICATE\" and\n   the hash of the entity body to zero in the HTTP digest\
    \ calculation of\n   A2.\n   Also, in the HTTP usage of Digest, several directives\
    \ in the\n   \"digest-challenge\" sent by the server have to be returned by the\n\
    \   client in the \"digest-response\". These are:\n    opaque\n    algorithm\n\
    \   These directives are not needed when Digest is used as a SASL\n   mechanism\
    \ (i.e., MUST NOT be sent, and MUST be ignored if received).\n"
- title: 2.1.3  Step Three
  contents:
  - "2.1.3  Step Three\n   The server receives and validates the \"digest-response\"\
    . The server\n   checks that the nonce-count is \"00000001\". If it supports subsequent\n\
    \   authentication (see section 2.2), it saves the value of the nonce and\n  \
    \ the nonce-count. It sends a message formatted as follows:\n    response-auth\
    \ = \"rspauth\" \"=\" response-value\n   where response-value is calculated as\
    \ above, using the values sent in\n   step two, except that if qop is \"auth\"\
    , then A2 is\n       A2 = { \":\", digest-uri-value }\n   And if qop is \"auth-int\"\
    \ or \"auth-conf\" then A2 is\n       A2 = { \":\", digest-uri-value, \":00000000000000000000000000000000\"\
    \ }\n   Compared to its use in HTTP, the following Digest directives in the\n\
    \   \"digest-response\" are unused:\n       nextnonce\n       qop\n       cnonce\n\
    \       nonce-count\n"
- title: 2.2  Subsequent Authentication
  contents:
  - "2.2  Subsequent Authentication\n   If the client has previously authenticated\
    \ to the server, and\n   remembers the values of username, realm, nonce, nonce-count,\
    \ cnonce,\n   and qop that it used in that authentication, and the SASL profile\
    \ for\n   a protocol permits an initial client response, then it MAY perform\n\
    \   \"subsequent authentication\", as defined in this section.\n"
- title: 2.2.1  Step one
  contents:
  - "2.2.1  Step one\n   The client uses the values from the previous authentication\
    \ and sends\n   an initial response with a string formatted and computed according\
    \ to\n   the rules for a \"digest-response\", as defined above, but with a\n \
    \  nonce-count one greater than used in the last \"digest-response\".\n"
- title: 2.2.2  Step Two
  contents:
  - "2.2.2  Step Two\n   The server receives the \"digest-response\". If the server\
    \ does not\n   support subsequent authentication, then it sends a\n   \"digest-challenge\"\
    , and authentication proceeds as in initial\n   authentication. If the server\
    \ has no saved nonce and nonce-count from\n   a previous authentication, then\
    \ it sends a \"digest-challenge\", and\n   authentication proceeds as in initial\
    \ authentication. Otherwise, the\n   server validates the \"digest-response\"\
    , checks that the nonce-count\n   is one greater than that used in the previous\
    \ authentication using\n   that nonce, and saves the new value of nonce-count.\n\
    \   If the response is invalid, then the server sends a\n   \"digest-challenge\"\
    , and authentication proceeds as in initial\n   authentication (and should be\
    \ configurable to log an authentication\n   failure in some sort of security audit\
    \ log, since the failure may be\n   a symptom of an attack). The nonce-count MUST\
    \ NOT be incremented in\n   this case: to do so would allow a denial of service\
    \ attack by sending\n   an out-of-order nonce-count.\n   If the response is valid,\
    \ the server MAY choose to deem that\n   authentication has succeeded. However,\
    \ if it has been too long since\n   the previous authentication, or for any other\
    \ reason, the server MAY\n   send a new \"digest-challenge\" with a new value\
    \ for nonce. The\n   challenge MAY contain a \"stale\" directive with value \"\
    true\", which\n   says that the client may respond to the challenge using the\
    \ password\n   it used in the previous response; otherwise, the client must solicit\n\
    \   the password anew from the user. This permits the server to make sure\n  \
    \ that the user has presented their password recently. (The directive\n   name\
    \ refers to the previous nonce being stale, not to the last use of\n   the password.)\
    \ Except for the handling of \"stale\", after sending the\n   \"digest-challenge\"\
    \ authentication proceeds as in the case of initial\n   authentication.\n"
- title: 2.3   Integrity Protection
  contents:
  - "2.3   Integrity Protection\n   If the server offered \"qop=auth-int\" and the\
    \ client responded\n   \"qop=auth-int\", then subsequent messages, up to but not\
    \ including the\n   next subsequent authentication, between the client and the\
    \ server\n   MUST be integrity protected. Using as a base session key the value\
    \ of\n   H(A1) as defined above the client and server calculate a pair of\n  \
    \ message integrity keys as follows.\n   The key for integrity protecting messages\
    \ from client to server is:\n   Kic = MD5({H(A1),\n   \"Digest session key to\
    \ client-to-server signing key magic constant\"})\n   The key for integrity protecting\
    \ messages from server to client is:\n   Kis = MD5({H(A1),\n   \"Digest session\
    \ key to server-to-client signing key magic constant\"})\n   where MD5 is as specified\
    \ in [RFC 1321]. If message integrity is\n   negotiated, a MAC block for each\
    \ message is appended to the message.\n   The MAC block is 16 bytes: the first\
    \ 10 bytes of the HMAC-MD5 [RFC\n   2104] of the message, a 2-byte message type\
    \ number in network byte\n   order with value 1, and the 4-byte sequence number\
    \ in network byte\n   order. The message type is to allow for future extensions\
    \ such as\n   rekeying.\n   MAC(Ki, SeqNum, msg) = (HMAC(Ki, {SeqNum, msg})[0..9],\
    \ 0x0001,\n   SeqNum)\n   where Ki is Kic for messages sent by the client and\
    \ Kis for those\n   sent by the server. The sequence number is initialized to\
    \ zero, and\n   incremented by one for each message sent.\n   Upon receipt, MAC(Ki,\
    \ SeqNum, msg) is computed and compared with the\n   received value; the message\
    \ is discarded if they differ.\n"
- title: 2.4   Confidentiality Protection
  contents:
  - "2.4   Confidentiality Protection\n   If the server sent a \"cipher-opts\" directive\
    \ and the client responded\n   with a \"cipher\" directive, then subsequent messages\
    \ between the\n   client and the server MUST be confidentiality protected. Using\
    \ as a\n   base session key the value of H(A1) as defined above the client and\n\
    \   server calculate a pair of message integrity keys as follows.\n   The key\
    \ for confidentiality protecting messages from client to server\n   is:\n   Kcc\
    \ = MD5({H(A1)[0..n],\n   \"Digest H(A1) to client-to-server sealing key magic\
    \ constant\"})\n   The key for confidentiality protecting messages from server\
    \ to client\n   is:\n   Kcs = MD5({H(A1)[0..n],\n   \"Digest H(A1) to server-to-client\
    \ sealing key magic constant\"})\n   where MD5 is as specified in [RFC 1321].\
    \ For cipher \"rc4-40\" n is 5;\n   for \"rc4-56\" n is 7; for the rest n is 16.\
    \ The key for the \"rc-*\"\n   ciphers is all 16 bytes of Kcc or Kcs; the key\
    \ for \"des\" is the first\n   7 bytes; the key for \"3des\" is the first 14 bytes.\
    \ The IV for \"des\"\n   and \"3des\" is the last 8 bytes of Kcc or Kcs.\n   If\
    \ message confidentiality is negotiated, each message is encrypted\n   with the\
    \ chosen cipher and a MAC block is appended to the message.\n   The MAC block\
    \ is a variable length padding prefix followed by 16\n   bytes formatted as follows:\
    \ the first 10 bytes of the HMAC-MD5 [RFC\n   2104] of the message, a 2-byte message\
    \ type number in network byte\n   order with value 1, and the 4-byte sequence\
    \ number in network byte\n   order. If the blocksize of the chosen cipher is not\
    \ 1 byte, the\n   padding prefix is one or more octets each containing the number\
    \ of\n   padding bytes, such that total length of the encrypted part of the\n\
    \   message is a multiple of the blocksize. The padding and first 10\n   bytes\
    \ of the MAC block are encrypted along with the message.\n   SEAL(Ki, Kc, SeqNum,\
    \ msg) =\n         {CIPHER(Kc, {msg, pad, HMAC(Ki, {SeqNum, msg})[0..9])}), 0x0001,\n\
    \          SeqNum}\n   where CIPHER is the chosen cipher, Ki and Kc are Kic and\
    \ Kcc for\n   messages sent by the client and Kis and Kcs for those sent by the\n\
    \   server. The sequence number is initialized to zero, and incremented\n   by\
    \ one for each message sent.\n   Upon receipt, the message is decrypted, HMAC(Ki,\
    \ {SeqNum, msg}) is\n   computed and compared with the received value; the message\
    \ is\n   discarded if they differ.\n"
- title: 3  Security Considerations
  contents:
  - '3  Security Considerations

    '
- title: 3.1   Authentication of Clients using Digest Authentication
  contents:
  - "3.1   Authentication of Clients using Digest Authentication\n   Digest Authentication\
    \ does not provide a strong authentication\n   mechanism, when compared to public\
    \ key based mechanisms, for example.\n   However, since it prevents chosen plaintext\
    \ attacks, it is stronger\n   than (e.g.) CRAM-MD5, which has been proposed for\
    \ use with LDAP [10],\n   POP and IMAP (see RFC 2195 [9]).   It is intended to\
    \ replace the much\n   weaker and even more dangerous use of plaintext passwords;\
    \ however,\n   since it is still a password based mechanism it avoids some of\
    \ the\n   potential deployabilty issues with public-key, OTP or similar\n   mechanisms.\n\
    \   Digest Authentication offers no confidentiality protection beyond\n   protecting\
    \ the actual password. All of the rest of the challenge and\n   response are available\
    \ to an eavesdropper, including the user's name\n   and authentication realm.\n"
- title: 3.2   Comparison of Digest with Plaintext Passwords
  contents:
  - "3.2   Comparison of Digest with Plaintext Passwords\n   The greatest threat to\
    \ the type of transactions for which these\n   protocols are used is network snooping.\
    \ This kind of transaction\n   might involve, for example, online access to a\
    \ mail service whose use\n   is restricted to paying subscribers. With plaintext\
    \ password\n   authentication an eavesdropper can obtain the password of the user.\n\
    \   This not only permits him to access anything in the database, but,\n   often\
    \ worse, will permit access to anything else the user protects\n   with the same\
    \ password.\n"
- title: 3.3   Replay Attacks
  contents:
  - "3.3   Replay Attacks\n   Replay attacks are defeated if the client or the server\
    \ chooses a\n   fresh nonce for each authentication, as this specification requires.\n"
- title: 3.4  Online dictionary attacks
  contents:
  - "3.4  Online dictionary attacks\n   If the attacker can eavesdrop, then it can\
    \ test any overheard\n   nonce/response pairs against a (potentially very large)\
    \ list of\n   common words. Such a list is usually much smaller than the total\n\
    \   number of possible passwords. The cost of computing the response for\n   each\
    \ password on the list is paid once for each challenge.\n   The server can mitigate\
    \ this attack by not allowing users to select\n   passwords that are in a dictionary.\n"
- title: 3.5  Offline dictionary attacks
  contents:
  - "3.5  Offline dictionary attacks\n   If the attacker can choose the challenge,\
    \ then it can precompute the\n   possible responses to that challenge for a list\
    \ of common words. Such\n   a list is usually much smaller than the total number\
    \ of possible\n   passwords. The cost of computing the response for each password\
    \ on\n   the list is paid just once.\n   Offline dictionary attacks are defeated\
    \ if the client chooses a fresh\n   nonce for each authentication, as this specification\
    \ requires.\n"
- title: 3.6  Man in the Middle
  contents:
  - "3.6  Man in the Middle\n   Digest authentication is vulnerable to \"man in the\
    \ middle\" (MITM)\n   attacks. Clearly, a MITM would present all the problems\
    \ of\n   eavesdropping. But it also offers some additional opportunities to\n\
    \   the attacker.\n   A possible man-in-the-middle attack would be to substitute\
    \ a weaker\n   qop scheme for the one(s) sent by the server; the server will not\
    \ be\n   able to detect this attack. For this reason, the client should always\n\
    \   use the strongest scheme that it understands from the choices\n   offered,\
    \ and should never choose a scheme that does not meet its\n   minimum requirements.\n"
- title: 3.7  Chosen plaintext attacks
  contents:
  - "3.7  Chosen plaintext attacks\n   A chosen plaintext attack is where a MITM or\
    \ a malicious server can\n   arbitrarily choose the challenge that the client\
    \ will use to compute\n   the response. The ability to choose the challenge is\
    \ known to make\n   cryptanalysis much easier [8].\n   However, Digest does not\
    \ permit the attack to choose the challenge as\n   long as the client chooses\
    \ a fresh nonce for each authentication, as\n   this specification requires.\n"
- title: 3.8  Spoofing by Counterfeit Servers
  contents:
  - "3.8  Spoofing by Counterfeit Servers\n   If a user can be led to believe that\
    \ she is connecting to a host\n   containing information protected by a password\
    \ she knows, when in\n   fact she is connecting to a hostile server, then the\
    \ hostile server\n   can obtain challenge/response pairs where it was able to\
    \ partly\n   choose the challenge. There is no known way that this can be\n  \
    \ exploited.\n"
- title: 3.9  Storing passwords
  contents:
  - "3.9  Storing passwords\n   Digest authentication requires that the authenticating\
    \ agent (usually\n   the server) store some data derived from the user's name\
    \ and password\n   in a \"password file\" associated with a given realm. Normally\
    \ this\n   might contain pairs consisting of username and H({ username-value,\n\
    \   \":\", realm-value, \":\", passwd }), which is adequate to compute H(A1)\n\
    \   as described above without directly exposing the user's password.\n   The\
    \ security implications of this are that if this password file is\n   compromised,\
    \ then an attacker gains immediate access to documents on\n   the server using\
    \ this realm. Unlike, say a standard UNIX password\n   file, this information\
    \ need not be decrypted in order to access\n   documents in the server realm associated\
    \ with this file. On the other\n   hand, decryption, or more likely a brute force\
    \ attack, would be\n   necessary to obtain the user's password. This is the reason\
    \ that the\n   realm is part of the digested data stored in the password file.\
    \ It\n   means that if one Digest authentication password file is compromised,\n\
    \   it does not automatically compromise others with the same username\n   and\
    \ password (though it does expose them to brute force attack).\n   There are two\
    \ important security consequences of this. First the\n   password file must be\
    \ protected as if it contained plaintext\n   passwords, because for the purpose\
    \ of accessing documents in its\n   realm, it effectively does.\n   A second consequence\
    \ of this is that the realm string should be\n   unique among all realms that\
    \ any single user is likely to use. In\n   particular a realm string should include\
    \ the name of the host doing\n   the authentication.\n"
- title: 3.10  Multiple realms
  contents:
  - "3.10  Multiple realms\n   Use of multiple realms may mean both that compromise\
    \ of a the\n   security database for a single realm does not compromise all\n\
    \   security, and that there are more things to protect in order to keep\n   the\
    \ whole system secure.\n"
- title: 3.11  Summary
  contents:
  - "3.11  Summary\n   By modern cryptographic standards Digest Authentication is\
    \ weak,\n   compared to (say) public key based mechanisms. But for a large range\n\
    \   of purposes it is valuable as a replacement for plaintext passwords.\n   Its\
    \ strength may vary depending on the implementation.\n"
- title: 4  Example
  contents:
  - "4  Example\n   This example shows the use of the Digest SASL mechanism with the\n\
    \   IMAP4 AUTHENTICATE command [RFC 2060].\n   In this example, \"C:\" and \"\
    S:\" represent a line sent by the client or\n   server respectively including\
    \ a CRLF at the end.  Linebreaks and\n   indentation within a \"C:\" or \"S:\"\
    \ are editorial and not part of the\n   protocol. The password in this example\
    \ was \"secret\".  Note that the\n   base64 encoding of the challenges and responses\
    \ is part of the IMAP4\n   AUTHENTICATE command, not part of the Digest specification\
    \ itself.\n    S: * OK elwood.innosoft.com PMDF IMAP4rev1 V6.0-9\n    C: c CAPABILITY\n\
    \    S: * CAPABILITY IMAP4 IMAP4rev1 ACL LITERAL+ NAMESPACE QUOTA\n          \
    \      UIDPLUS AUTH=CRAM-MD5 AUTH=DIGEST-MD5 AUTH=PLAIN\n    S: c OK Completed\n\
    \    C: a AUTHENTICATE DIGEST-MD5\n    S: + cmVhbG09ImVsd29vZC5pbm5vc29mdC5jb20iLG5vbmNlPSJPQTZNRzl0\n\
    \         RVFHbTJoaCIscW9wPSJhdXRoIixhbGdvcml0aG09bWQ1LXNlc3MsY2hh\n         cnNldD11dGYtOA==\n\
    \    C: Y2hhcnNldD11dGYtOCx1c2VybmFtZT0iY2hyaXMiLHJlYWxtPSJlbHdvb2\n       QuaW5ub3NvZnQuY29tIixub25jZT0iT0E2TUc5dEVRR20yaGgiLG5jPTAw\n\
    \       MDAwMDAxLGNub25jZT0iT0E2TUhYaDZWcVRyUmsiLGRpZ2VzdC11cmk9Im\n       ltYXAvZWx3b29kLmlubm9zb2Z0LmNvbSIscmVzcG9uc2U9ZDM4OGRhZDkw\n\
    \       ZDRiYmQ3NjBhMTUyMzIxZjIxNDNhZjcscW9wPWF1dGg=\n    S: + cnNwYXV0aD1lYTQwZjYwMzM1YzQyN2I1NTI3Yjg0ZGJhYmNkZmZmZA==\n\
    \    C:\n    S: a OK User logged in\n    ---\n    The base64-decoded version of\
    \ the SASL exchange is:\n    S: realm=\"elwood.innosoft.com\",nonce=\"OA6MG9tEQGm2hh\"\
    ,qop=\"auth\",\n       algorithm=md5-sess,charset=utf-8\n    C: charset=utf-8,username=\"\
    chris\",realm=\"elwood.innosoft.com\",\n       nonce=\"OA6MG9tEQGm2hh\",nc=00000001,cnonce=\"\
    OA6MHXh6VqTrRk\",\n       digest-uri=\"imap/elwood.innosoft.com\",\n       response=d388dad90d4bbd760a152321f2143af7,qop=auth\n\
    \    S: rspauth=ea40f60335c427b5527b84dbabcdfffd\n    The password in this example\
    \ was \"secret\".\n   This example shows the use of the Digest SASL mechanism\
    \ with the\n   ACAP, using the same notational conventions and password as in\
    \ the\n   previous example. Note that ACAP does not base64 encode and uses\n \
    \  fewer round trips that IMAP4.\n    S: * ACAP (IMPLEMENTATION \"Test ACAP server\"\
    ) (SASL \"CRAM-MD5\"\n               \"DIGEST-MD5\" \"PLAIN\")\n    C: a AUTHENTICATE\
    \ \"DIGEST-MD5\"\n    S: + {94}\n    S: realm=\"elwood.innosoft.com\",nonce=\"\
    OA9BSXrbuRhWay\",qop=\"auth\",\n       algorithm=md5-sess,charset=utf-8\n    C:\
    \ {206}\n    C: charset=utf-8,username=\"chris\",realm=\"elwood.innosoft.com\"\
    ,\n       nonce=\"OA9BSXrbuRhWay\",nc=00000001,cnonce=\"OA9BSuZWMSpW8m\",\n  \
    \     digest-uri=\"acap/elwood.innosoft.com\",\n       response=6084c6db3fede7352c551284490fd0fc,qop=auth\n\
    \    S: a OK (SASL {40}\n    S: rspauth=2f0b3d7c3c2e486600ef710726aa2eae) \"AUTHENTICATE\n\
    \    Completed\"\n    ---\n   The server uses the values of all the directives,\
    \ plus knowledge of\n   the users password (or the hash of the user's name, server's\
    \ realm\n   and the user's password) to verify the computations above. If they\n\
    \   check, then the user has authenticated.\n"
- title: 5   References
  contents:
  - "5   References\n   [Digest]   Franks, J., et al., \"HTTP Authentication: Basic\
    \ and Digest\n              Access Authentication\", RFC 2617, June 1999.\n  \
    \ [ISO-8859] ISO-8859. International Standard--Information Processing--\n    \
    \          8-bit Single-Byte Coded Graphic Character Sets --\n              Part\
    \ 1: Latin alphabet No. 1, ISO-8859-1:1987.\n              Part 2: Latin alphabet\
    \ No. 2, ISO-8859-2, 1987.\n              Part 3: Latin alphabet No. 3, ISO-8859-3,\
    \ 1988.\n              Part 4: Latin alphabet No. 4, ISO-8859-4, 1988.\n     \
    \         Part 5: Latin/Cyrillic alphabet, ISO-8859-5, 1988.\n              Part\
    \ 6: Latin/Arabic alphabet, ISO-8859-6, 1987.\n              Part 7: Latin/Greek\
    \ alphabet, ISO-8859-7, 1987.\n              Part 8: Latin/Hebrew alphabet, ISO-8859-8,\
    \ 1988.\n              Part 9: Latin alphabet No. 5, ISO-8859-9, 1990.\n   [RFC\
    \ 822]  Crocker, D., \"Standard for The Format of ARPA Internet\n            \
    \  Text Messages,\" STD 11, RFC 822, August 1982.\n   [RFC 1321] Rivest, R., \"\
    The MD5 Message-Digest Algorithm\", RFC 1321,\n              April 1992.\n   [RFC\
    \ 2047] Moore, K., \"MIME (Multipurpose Internet Mail Extensions)\n          \
    \    Part Three: Message Header Extensions for Non-ASCII Text\",\n           \
    \   RFC 2047, November 1996.\n   [RFC 2052] Gulbrandsen, A. and P. Vixie, \"A\
    \ DNS RR for specifying the\n              location of services (DNS SRV)\", RFC\
    \ 2052, October 1996.\n   [RFC 2060] Crispin, M., \"Internet Message Access Protocol\
    \ - Version\n              4rev1\", RFC 2060, December 1996.\n   [RFC 2104] Krawczyk,\
    \ H., Bellare, M. and R. Canetti, \"HMAC:  Keyed-\n              Hashing for \
    \ Message Authentication\", RFC 2104, February\n              1997.\n   [RFC 2195]\
    \ Klensin, J., Catoe, R. and P. Krumviede, \"IMAP/POP\n              AUTHorize\
    \ Extension for Simple Challenge/Response\", RFC\n              2195, September\
    \ 1997.\n   [RFC 2119] Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC 2222]\
    \ Myers, J., \"Simple Authentication and Security Layer\n              (SASL)\"\
    , RFC 2222, October 1997.\n   [USASCII]  US-ASCII. Coded Character Set - 7-Bit\
    \ American Standard\n              Code for Information Interchange. Standard\
    \ ANSI X3.4-1986,\n              ANSI, 1986.\n"
- title: 6  Authors' Addresses
  contents:
  - "6  Authors' Addresses\n   Paul Leach\n   Microsoft\n   1 Microsoft Way\n   Redmond,\
    \ WA  98052\n   EMail: paulle@microsoft.com\n   Chris Newman\n   Innosoft International,\
    \ Inc.\n   1050 Lakes Drive\n   West Covina, CA 91790 USA\n   EMail: chris.newman@innosoft.com\n"
- title: 7  ABNF
  contents:
  - "7  ABNF\n   What follows is the definition of the notation as is used in the\n\
    \   HTTP/1.1 specification (RFC 2616) and the HTTP authentication\n   specification\
    \ (RFC 2617); it is reproduced here for ease of\n   reference. Since it is intended\
    \ that a single Digest implementation\n   can support both HTTP and SASL-based\
    \ protocols, the same notation is\n   used in both to facilitate comparison and\
    \ prevention of unwanted\n   differences. Since it is cut-and-paste from the HTTP\
    \ specifications,\n   not all productions may be used in this specification. It\
    \ is also not\n   quite legal ABNF; again, the errors were copied from the HTTP\n\
    \   specifications.\n"
- title: 7.1   Augmented BNF
  contents:
  - "7.1   Augmented BNF\n   All of the mechanisms specified in this document are\
    \ described in\n   both prose and an augmented Backus-Naur Form (BNF) similar\
    \ to that\n   used by RFC 822 [RFC 822]. Implementers will need to be familiar\
    \ with\n   the notation in order to understand this specification.\n   The augmented\
    \ BNF includes the following constructs:\n   name = definition\n      The name\
    \ of a rule is simply the name itself (without any\n      enclosing \"<\" and\
    \ \">\") and is separated from its definition by the\n      equal \"=\" character.\
    \ White space is only significant in that\n      indentation of continuation lines\
    \ is used to indicate a rule\n      definition that spans more than one line.\
    \ Certain basic rules are\n      in uppercase, such as SP, LWS, HT, CRLF, DIGIT,\
    \ ALPHA, etc. Angle\n      brackets are used within definitions whenever their\
    \ presence will\n      facilitate discerning the use of rule names.\n   \"literal\"\
    \n      Quotation marks surround literal text. Unless stated otherwise,\n    \
    \  the text is case-insensitive.\n   rule1 | rule2\n      Elements separated by\
    \ a bar (\"|\") are alternatives, e.g., \"yes |\n      no\" will accept yes or\
    \ no.\n   (rule1 rule2)\n      Elements enclosed in parentheses are treated as\
    \ a single element.\n      Thus, \"(elem (foo | bar) elem)\" allows the token\
    \ sequences\n      \"elem foo elem\" and \"elem bar elem\".\n   *rule\n      The\
    \ character \"*\" preceding an element indicates repetition. The\n      full form\
    \ is \"<n>*<m>element\" indicating at least <n> and at most\n      <m> occurrences\
    \ of element. Default values are 0 and infinity so\n      that \"*(element)\"\
    \ allows any number, including zero; \"1*element\"\n      requires at least one;\
    \ and \"1*2element\" allows one or two.\n   [rule]\n      Square brackets enclose\
    \ optional elements; \"[foo bar]\" is\n      equivalent to \"*1(foo bar)\".\n\
    \   N rule\n      Specific repetition: \"<n>(element)\" is equivalent to\n   \
    \   \"<n>*<n>(element)\"; that is, exactly <n> occurrences of (element).\n   \
    \   Thus 2DIGIT is a 2-digit number, and 3ALPHA is a string of three\n      alphabetic\
    \ characters.\n   #rule\n      A construct \"#\" is defined, similar to \"*\"\
    , for defining lists of\n      elements. The full form is \"<n>#<m>element\" indicating\
    \ at least\n      <n> and at most <m> elements, each separated by one or more\
    \ commas\n      (\",\") and OPTIONAL linear white space (LWS). This makes the\
    \ usual\n      form of lists very easy; a rule such as\n        ( *LWS element\
    \ *( *LWS \",\" *LWS element ))\n      can be shown as\n        1#element\n  \
    \    Wherever this construct is used, null elements are allowed, but do\n    \
    \  not contribute to the count of elements present. That is,\n      \"(element),\
    \ , (element) \" is permitted, but counts as only two\n      elements.  Therefore,\
    \ where at least one element is required, at\n      least one non-null element\
    \ MUST be present. Default values are 0\n      and infinity so that \"#element\"\
    \ allows any number, including zero;\n      \"1#element\" requires at least one;\
    \ and \"1#2element\" allows one or\n      two.\n   ; comment\n      A semi-colon,\
    \ set off some distance to the right of rule text,\n      starts a comment that\
    \ continues to the end of line. This is a\n      simple way of including useful\
    \ notes in parallel with the\n      specifications.\n   implied *LWS\n      The\
    \ grammar described by this specification is word-based. Except\n      where noted\
    \ otherwise, linear white space (LWS) can be included\n      between any two adjacent\
    \ words (token or quoted-string), and\n      between adjacent words and separators,\
    \ without changing the\n      interpretation of a field. At least one delimiter\
    \ (LWS and/or\n      separators) MUST exist between any two tokens (for the definition\n\
    \      of \"token\" below), since they would otherwise be interpreted as a\n \
    \     single token.\n"
- title: 7.2   Basic Rules
  contents:
  - "7.2   Basic Rules\n   The following rules are used throughout this specification\
    \ to\n   describe basic parsing constructs. The US-ASCII coded character set\n\
    \   is defined by ANSI X3.4-1986 [USASCII].\n       OCTET          = <any 8-bit\
    \ sequence of data>\n       CHAR           = <any US-ASCII character (octets 0\
    \ - 127)>\n       UPALPHA        = <any US-ASCII uppercase letter \"A\"..\"Z\"\
    >\n       LOALPHA        = <any US-ASCII lowercase letter \"a\"..\"z\">\n    \
    \   ALPHA          = UPALPHA | LOALPHA\n       DIGIT          = <any US-ASCII\
    \ digit \"0\"..\"9\">\n       CTL            = <any US-ASCII control character\n\
    \                        (octets 0 - 31) and DEL (127)>\n       CR           \
    \  = <US-ASCII CR, carriage return (13)>\n       LF             = <US-ASCII LF,\
    \ linefeed (10)>\n       SP             = <US-ASCII SP, space (32)>\n       HT\
    \             = <US-ASCII HT, horizontal-tab (9)>\n       <\">            = <US-ASCII\
    \ double-quote mark (34)>\n       CRLF           = CR LF\n   All linear white\
    \ space, including folding, has the same semantics as\n   SP. A recipient MAY\
    \ replace any linear white space with a single SP\n   before interpreting the\
    \ field value or forwarding the message\n   downstream.\n       LWS          \
    \  = [CRLF] 1*( SP | HT )\n   The TEXT rule is only used for descriptive field\
    \ contents and values\n   that are not intended to be interpreted by the message\
    \ parser. Words\n   of *TEXT MAY contain characters from character sets other\
    \ than\n   ISO-8859-1 [ISO 8859] only when encoded according to the rules of RFC\n\
    \   2047 [RFC 2047].\n       TEXT           = <any OCTET except CTLs,\n      \
    \                  but including LWS>\n   A CRLF is allowed in the definition\
    \ of TEXT only as part of a header\n   field continuation. It is expected that\
    \ the folding LWS will be\n   replaced with a single SP before interpretation\
    \ of the TEXT value.\n   Hexadecimal numeric characters are used in several protocol\
    \ elements.\n       HEX            = \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"\
    F\"\n                      | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | DIGIT\n\
    \   Many HTTP/1.1 header field values consist of words separated by LWS\n   or\
    \ special characters. These special characters MUST be in a quoted\n   string\
    \ to be used within a parameter value.\n       token          = 1*<any CHAR except\
    \ CTLs or separators>\n       separators     = \"(\" | \")\" | \"<\" | \">\" |\
    \ \"@\"\n                      | \",\" | \";\" | \":\" | \"\\\" | <\">\n     \
    \                 | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                  \
    \    | \"{\" | \"}\" | SP | HT\n   A string of text is parsed as a single word\
    \ if it is quoted using\n   double-quote marks.\n      quoted-string  = ( <\"\
    > qdstr-val <\"> )\n      qdstr-val      = *( qdtext | quoted-pair )\n      qdtext\
    \         = <any TEXT except <\">>\n   Note that LWS is NOT implicit between the\
    \ double-quote marks (<\">)\n   surrounding a qdstr-val and the qdstr-val; any\
    \ LWS will be considered\n   part of the qdstr-val.  This is also the case for\
    \ quotation marks\n   surrounding any other construct.\n   The backslash character\
    \ (\"\\\") MAY be used as a single-character\n   quoting mechanism only within\
    \ qdstr-val and comment constructs.\n       quoted-pair    = \"\\\" CHAR\n   The\
    \ value of this construct is CHAR. Note that an effect of this rule\n   is that\
    \ backslash must be quoted.\n"
- title: 8  Sample Code
  contents:
  - "8  Sample Code\n   The sample implementation in [Digest] also applies to DIGEST-MD5.\n\
    \   The following code implements the conversion from UTF-8 to 8859-1 if\n   necessary.\n\
    \    /* if the string is entirely in the 8859-1 subset of UTF-8, then\n     *\
    \ translate to 8859-1 prior to MD5\n     */\n    void MD5_UTF8_8859_1(MD5_CTX\
    \ *ctx, const unsigned char *base,\n        int len)\n    {\n        const unsigned\
    \ char *scan, *end;\n        unsigned char cbuf;\n        end = base + len;\n\
    \        for (scan = base; scan < end; ++scan) {\n            if (*scan > 0xC3)\
    \ break; /* abort if outside 8859-1 */\n            if (*scan >= 0xC0 && *scan\
    \ <= 0xC3) {\n                if (++scan == end || *scan < 0x80 || *scan > 0xBF)\n\
    \                    break;\n            }\n        }\n        /* if we found\
    \ a character outside 8859-1, don't alter string\n         */\n        if (scan\
    \ < end) {\n            MD5Update(ctx, base, len);\n            return;\n    \
    \    }\n        /* convert to 8859-1 prior to applying hash\n         */\n   \
    \     do {\n            for (scan = base; scan < end && *scan < 0xC0; ++scan)\n\
    \                ;\n            if (scan != base) MD5Update(ctx, base, scan -\
    \ base);\n            if (scan + 1 >= end) break;\n            cbuf = ((scan[0]\
    \ & 0x3) << 6) | (scan[1] & 0x3f);\n            MD5Update(ctx, &cbuf, 1);\n  \
    \          base = scan + 2;\n        } while (base < end);\n    }\n"
- title: 9  Full Copyright Statement
  contents:
  - "9  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
