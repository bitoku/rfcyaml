- title: __initial_text__
  contents:
  - '                      NETCONF Event Notifications

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines mechanisms that provide an asynchronous message\n\
    \   notification delivery service for the Network Configuration protocol\n   (NETCONF).\
    \  This is an optional capability built on top of the base\n   NETCONF definition.\
    \  This document defines the capabilities and\n   operations necessary to support\
    \ this service.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Definition of Terms  . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Motivation . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     1.3.  Event Notifications in NETCONF . . . . . . . . . . .\
    \ . . .  5\n   2.  Notification-Related Operations  . . . . . . . . . . . . .\
    \ . .  5\n     2.1.  Subscribing to Receive Event Notifications . . . . . . .\
    \ .  5\n       2.1.1.  <create-subscription>  . . . . . . . . . . . . . . . .\
    \  6\n     2.2.  Sending Event Notifications  . . . . . . . . . . . . . . .  9\n\
    \       2.2.1.  <notification> . . . . . . . . . . . . . . . . . . . .  9\n  \
    \   2.3.  Terminating the Subscription . . . . . . . . . . . . . . .  9\n   3.\
    \  Supporting Concepts  . . . . . . . . . . . . . . . . . . . . . 10\n     3.1.\
    \  Capabilities Exchange  . . . . . . . . . . . . . . . . . . 10\n       3.1.1.\
    \  Capability Identifier  . . . . . . . . . . . . . . . . 10\n       3.1.2.  Capability\
    \ Example . . . . . . . . . . . . . . . . . . 10\n     3.2.  Event Streams  .\
    \ . . . . . . . . . . . . . . . . . . . . . 10\n       3.2.1.  Event Stream Definition\
    \  . . . . . . . . . . . . . . . 12\n       3.2.2.  Event Stream Content Format\
    \  . . . . . . . . . . . . . 12\n       3.2.3.  Default Event Stream . . . . .\
    \ . . . . . . . . . . . . 12\n       3.2.4.  Event Stream Sources . . . . . .\
    \ . . . . . . . . . . . 12\n       3.2.5.  Event Stream Discovery . . . . . .\
    \ . . . . . . . . . . 12\n     3.3.  Notification Replay  . . . . . . . . . .\
    \ . . . . . . . . . 15\n       3.3.1.  Overview . . . . . . . . . . . . . . .\
    \ . . . . . . . . 15\n       3.3.2.  Creating a Subscription with Replay  . .\
    \ . . . . . . . 16\n     3.4.  Notification Management Schema . . . . . . . .\
    \ . . . . . . 16\n     3.5.  Subscriptions Data . . . . . . . . . . . . . . .\
    \ . . . . . 20\n     3.6.  Filter Mechanics . . . . . . . . . . . . . . . . .\
    \ . . . . 20\n       3.6.1.  Filtering  . . . . . . . . . . . . . . . . . . .\
    \ . . . 20\n     3.7.  Message Flow . . . . . . . . . . . . . . . . . . . . .\
    \ . . 20\n   4.  XML Schema for Event Notifications . . . . . . . . . . . . .\
    \ . 22\n   5.  Filtering Examples . . . . . . . . . . . . . . . . . . . . . .\
    \ 26\n     5.1.  Subtree Filtering  . . . . . . . . . . . . . . . . . . . . 28\n\
    \     5.2.  XPATH Filters  . . . . . . . . . . . . . . . . . . . . . . 29\n  \
    \ 6.  Interleave Capability  . . . . . . . . . . . . . . . . . . . . 30\n    \
    \ 6.1.  Description  . . . . . . . . . . . . . . . . . . . . . . . 30\n     6.2.\
    \  Dependencies . . . . . . . . . . . . . . . . . . . . . . . 30\n     6.3.  Capability\
    \ Identifier  . . . . . . . . . . . . . . . . . . 30\n     6.4.  New Operations\
    \ . . . . . . . . . . . . . . . . . . . . . . 31\n     6.5.  Modifications to\
    \ Existing Operations . . . . . . . . . . . 31\n   7.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 31\n   8.  IANA Considerations  . . .\
    \ . . . . . . . . . . . . . . . . . . 32\n   9.  Acknowledgements . . . . . .\
    \ . . . . . . . . . . . . . . . . . 33\n   10. Normative References . . . . .\
    \ . . . . . . . . . . . . . . . . 33\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   [NETCONF] can be conceptually partitioned into four layers:\n\
    \        Layer                            Example\n    +-------------+      +-------------------------------------------+\n\
    \    |   Content   |      |     Configuration data                    |\n    +-------------+\
    \      +-------------------------------------------+\n              |        \
    \                   |\n    +-------------+      +-------------------------------------------+\n\
    \    | Operations  |      |<get-config>, <edit-config>, <notification>|\n    +-------------+\
    \      +-------------------------------------------+\n              |        \
    \                   |                    |\n    +-------------+      +-----------------------------+\
    \       |\n    |     RPC     |      |    <rpc>, <rpc-reply>       |       |\n\
    \    +-------------+      +-----------------------------+       |\n          \
    \    |                           |                    |\n    +-------------+ \
    \     +-------------------------------------------+\n    |  Transport  |     \
    \ |   BEEP, SSH, SSL, console                 |\n    |  Protocol   |      |  \
    \                                         |\n    +-------------+      +-------------------------------------------+\n\
    \                                 Figure 1\n   This document defines mechanisms\
    \ that provide an asynchronous message\n   notification delivery service for the\
    \ [NETCONF] protocol.  This is an\n   optional capability built on top of the\
    \ base NETCONF definition.\n   This memo defines the capabilities and operations\
    \ necessary to\n   support this service.\n"
- title: 1.1.  Definition of Terms
  contents:
  - "1.1.  Definition of Terms\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   Element:  An [XML] Element.\n   Subscription:  An agreement\
    \ and method to receive event notifications\n      over a NETCONF session.  A\
    \ concept related to the delivery of\n      notifications (if there are any to\
    \ send) involving destination and\n      selection of notifications.  It is bound\
    \ to the lifetime of a\n      session.\n   Operation:  This term is used to refer\
    \ to NETCONF protocol operations\n      [NETCONF].  Within this document, operation\
    \ refers to NETCONF\n      protocol operations defined in support of NETCONF notifications.\n\
    \   Event:  An event is something that happens that may be of interest -\n   \
    \   a configuration change, a fault, a change in status, crossing a\n      threshold,\
    \ or an external input to the system, for example.\n      Often, this results\
    \ in an asynchronous message, sometimes referred\n      to as a notification or\
    \ event notification, being sent to\n      interested parties to notify them that\
    \ this event has occurred.\n   Replay:  The ability to send/re-send previously\
    \ logged notifications\n      upon request.  These notifications are sent asynchronously.\
    \  This\n      feature is implemented by the NETCONF server and invoked by the\n\
    \      NETCONF client.\n   Stream:  An event stream is a set of event notifications\
    \ matching\n      some forwarding criteria and available to NETCONF clients for\n\
    \      subscription.\n   Filter:  A parameter that indicates which subset of all\
    \ possible\n      events are of interest.  A filter is defined as one or more\
    \ filter\n      elements [NETCONF], each of which identifies a portion of the\n\
    \      overall filter.\n"
- title: 1.2.  Motivation
  contents:
  - "1.2.  Motivation\n   The motivation for this work is to enable the sending of\
    \ asynchronous\n   messages that are consistent with the data model (content)\
    \ and\n   security model used within a NETCONF implementation.\n   The scope of\
    \ the work aims at meeting the following operational\n   needs:\n   o  Initial\
    \ release should ensure it supports notifications in support\n      of configuration\
    \ operations.\n   o  It should be possible to use the same data model for notifications\n\
    \      as for configuration operations.\n   o  The solution should support a reasonable\
    \ message size limit (i.e.,\n      not too short).\n   o  The notifications should\
    \ be carried over a connection-oriented\n      delivery mechanism.\n   o  A subscription\
    \ mechanism for notifications should be provided.\n      This takes into account\
    \ that a NETCONF server does not send\n      notifications before being asked\
    \ to do so, and that it is the\n      NETCONF client who initiates the flow of\
    \ notifications.\n   o  A filtering mechanism for sending notifications should\
    \ be put in\n      place within the NETCONF server.\n   o  The information contained\
    \ in a notification should be sufficient\n      so that it can be analyzed independent\
    \ of the transport mechanism.\n      In other words, the data content fully describes\
    \ a notification;\n      protocol information is not needed to understand a notification.\n\
    \   o  The server should have the capability to replay locally logged\n      notifications.\n"
- title: 1.3.  Event Notifications in NETCONF
  contents:
  - "1.3.  Event Notifications in NETCONF\n   This memo defines a mechanism whereby\
    \ the NETCONF client indicates\n   interest in receiving event notifications from\
    \ a NETCONF server by\n   creating a subscription to receive event notifications.\
    \  The NETCONF\n   server replies to indicate whether the subscription request\
    \ was\n   successful and, if it was successful, begins sending the event\n   notifications\
    \ to the NETCONF client as the events occur within the\n   system.  These event\
    \ notifications will continue to be sent until\n   either the NETCONF session\
    \ is terminated or the subscription\n   terminates for some other reason.  The\
    \ event notification\n   subscription allows a number of options to enable the\
    \ NETCONF client\n   to specify which events are of interest.  These are specified\
    \ when\n   the subscription is created.  Note that a subscription cannot be\n\
    \   modified once created.\n   The NETCONF server MUST accept and process the\
    \ <close-session>\n   operation, even while the notification subscription is active.\
    \  The\n   NETCONF server MAY accept and process other commands; otherwise, they\n\
    \   will be rejected and the server MUST send a 'resource-denied' error.\n   A\
    \ NETCONF server advertises support of the ability to process other\n   commands\
    \ via the :interleave capability.\n"
- title: 2.  Notification-Related Operations
  contents:
  - '2.  Notification-Related Operations

    '
- title: 2.1.  Subscribing to Receive Event Notifications
  contents:
  - "2.1.  Subscribing to Receive Event Notifications\n   The event notification subscription\
    \ is initiated by the NETCONF\n   client and responded to by the NETCONF server.\
    \  A subscription is\n   bound to a single stream for the lifetime of the subscription.\
    \  When\n   the event notification subscription is created, the events of\n  \
    \ interest are specified.\n   Content for an event notification subscription can\
    \ be selected by\n   applying user-specified filters.\n"
- title: 2.1.1.  <create-subscription>
  contents:
  - "2.1.1.  <create-subscription>\n   Description:\n      This operation initiates\
    \ an event notification subscription that\n      will send asynchronous event\
    \ notifications to the initiator of the\n      command until the subscription\
    \ terminates.\n   Parameters:\n      Stream:\n         An optional parameter,\
    \ <stream>, that indicates which stream of\n         events is of interest.  If\
    \ not present, events in the default\n         NETCONF stream will be sent.\n\
    \      Filter:\n         An optional parameter, <filter>, that indicates which\
    \ subset of\n         all possible events is of interest.  The format of this\n\
    \         parameter is the same as that of the filter parameter in the\n     \
    \    NETCONF protocol operations.  If not present, all events not\n         precluded\
    \ by other parameters will be sent.  See section 3.6\n         for more information\
    \ on filters.\n      Start Time:\n         A parameter, <startTime>, used to trigger\
    \ the replay feature\n         and indicate that the replay should start at the\
    \ time\n         specified.  If <startTime> is not present, this is not a replay\n\
    \         subscription.  It is not valid to specify start times that are\n   \
    \      later than the current time.  If the <startTime> specified is\n       \
    \  earlier than the log can support, the replay will begin with\n         the\
    \ earliest available notification.  This parameter is of type\n         dateTime\
    \ and compliant to [RFC3339].  Implementations must\n         support time zones.\n\
    \      Stop Time:\n         An optional parameter, <stopTime>, used with the optional\n\
    \         replay feature to indicate the newest notifications of\n         interest.\
    \  If <stopTime> is not present, the notifications will\n         continue until\
    \ the subscription is terminated.  Must be used\n         with and be later than\
    \ <startTime>.  Values of <stopTime> in\n         the future are valid.  This\
    \ parameter is of type dateTime and\n         compliant to [RFC3339].  Implementations\
    \ must support time\n         zones.\n   Positive Response:\n      If the NETCONF\
    \ server can satisfy the request, the server sends an\n      <ok> element.\n \
    \  Negative Response:\n      An <rpc-error> element is included within the <rpc-reply>\
    \ if the\n      request cannot be completed for any reason.  Subscription requests\n\
    \      will fail if a filter with invalid syntax is provided or if the\n     \
    \ name of a non-existent stream is provided.\n      If a <stopTime> is specified\
    \ in a request without having specified\n      a <startTime>, the following error\
    \ is returned:\n         Tag: missing-element\n         Error-type: protocol\n\
    \         Severity: error\n         Error-info: <bad-element>: startTime\n   \
    \      Description: An expected element is missing.\n      If the optional replay\
    \ feature is requested but it is not\n      supported by the NETCONF server, the\
    \ following error is returned:\n         Tag: operation-failed\n         Error-type:\
    \ protocol\n         Severity: error\n         Error-info: none\n         Description:\
    \ Request could not be completed because the\n         requested operation failed\
    \ for some reason not covered by any\n         other error condition.\n      If\
    \ a <stopTime> is requested that is earlier than the specified\n      <startTime>,\
    \ the following error is returned:\n         Tag: bad-element\n         Error-type:\
    \ protocol\n         Severity: error\n         Error-info: <bad-element>: stopTime\n\
    \         Description: An element value is not correct; e.g., wrong type,\n  \
    \       out of range, pattern mismatch.\n      If a <startTime> is requested that\
    \ is later than the current time,\n      the following error is returned:\n  \
    \       Tag: bad-element\n         Error-type: protocol\n         Severity: error\n\
    \         Error-info: <bad-element>: startTime\n         Description: An element\
    \ value is not correct; e.g., wrong type,\n         out of range, pattern mismatch.\n"
- title: 2.1.1.1.  Usage Example
  contents:
  - "2.1.1.1.  Usage Example\n   The following demonstrates creating a simple subscription.\
    \  More\n   complex examples can be found in section 5.\n   <netconf:rpc message-id=\"\
    101\"\n         xmlns:netconf=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n \
    \      <create-subscription\n           xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n       </create-subscription>\n   </netconf:rpc>\n"
- title: 2.2.  Sending Event Notifications
  contents:
  - "2.2.  Sending Event Notifications\n   Once the subscription has been set up,\
    \ the NETCONF server sends the\n   event notifications asynchronously over the\
    \ connection.\n"
- title: 2.2.1.  <notification>
  contents:
  - "2.2.1.  <notification>\n   Description:\n      An event notification is sent\
    \ to the client who initiated a\n      <create-subscription> command asynchronously\
    \ when an event of\n      interest (i.e., meeting the specified filtering criteria)\
    \ has\n      occurred.  An event notification is a complete and well-formed XML\n\
    \      document.  Note that <notification> is not a Remote Procedure Call\n  \
    \    (RPC) method but rather the top-level element identifying the one-\n    \
    \  way message as a notification.\n   Parameters:\n      eventTime\n         The\
    \ time the event was generated by the event source.  This\n         parameter\
    \ is of type dateTime and compliant to [RFC3339].\n         Implementations must\
    \ support time zones.\n      Also contains notification-specific tagged content,\
    \ if any.  With\n      the exception of <eventTime>, the content of the notification\
    \ is\n      beyond the scope of this document.\n   Response:\n      No response.\
    \  Not applicable.\n"
- title: 2.3.  Terminating the Subscription
  contents:
  - "2.3.  Terminating the Subscription\n   Closing of the event notification subscription\
    \ can be done by using\n   the <close-session> operation from the subscriptions\
    \ session or\n   terminating the NETCONF session ( <kill-session> ) or the underlying\n\
    \   transport session from another session.  If a stop time is provided\n   when\
    \ the subscription is created, the subscription will terminate\n   after the stop\
    \ time is reached.  In this case, the NETCONF session\n   will still be an active\
    \ session.\n"
- title: 3.  Supporting Concepts
  contents:
  - '3.  Supporting Concepts

    '
- title: 3.1.  Capabilities Exchange
  contents:
  - "3.1.  Capabilities Exchange\n   The ability to process and send event notifications\
    \ is advertised\n   during the capability exchange between the NETCONF client\
    \ and server.\n"
- title: 3.1.1.  Capability Identifier
  contents:
  - "3.1.1.  Capability Identifier\n   \"urn:ietf:params:netconf:capability:notification:1.0\"\
    \n"
- title: 3.1.2.  Capability Example
  contents:
  - "3.1.2.  Capability Example\n   <hello xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n     <capabilities>\n        <capability>\n            urn:ietf:params:xml:ns:netconf:base:1.0\n\
    \          </capability>\n          <capability>\n            urn:ietf:params:netconf:capability:startup:1.0\n\
    \          </capability>\n          <capability>\n            urn:ietf:params:netconf:capability:notification:1.0\n\
    \          </capability>\n       </capabilities>\n     <session-id>4</session-id>\n\
    \   </hello>\n"
- title: 3.2.  Event Streams
  contents:
  - "3.2.  Event Streams\n   An event stream is defined as a set of event notifications\
    \ matching\n   some forwarding criteria.\n   Figure 2 illustrates the notification\
    \ flow and concepts identified in\n   this document.  It does not mandate and/or\
    \ preclude an\n   implementation.  The following is observed from the diagram\
    \ below:\n   System components (c1..cn) generate event notifications that are\n\
    \   passed to a central component for classification and distribution.\n   The\
    \ central component inspects each event notification and matches\n   the event\
    \ notification against the set of stream definitions.  When a\n   match occurs,\
    \ the event notification is considered to be a member of\n   that event stream\
    \ (stream 1..stream n).  An event notification may be\n   part of multiple event\
    \ streams.\n   At some point after the NETCONF server receives the internal event\n\
    \   from a stream, it is converted to an appropriate XML encoding by the\n   server,\
    \ and a <notification> element is ready to send to all NETCONF\n   sessions subscribed\
    \ to that stream.\n   After generation of the <notification> element, access control\
    \ is\n   applied by the server.  If a session does not have permission to\n  \
    \ receive the <notification>, then it is discarded for that session,\n   and processing\
    \ of the internal event is completed for that session.\n   When a NETCONF client\
    \ subscribes to a given event stream, user-\n   defined filter elements, if applicable,\
    \ are applied to the event\n   stream and matching event notifications are forwarded\
    \ to the NETCONF\n   server for distribution to subscribed NETCONF clients.  A\
    \ filter is\n   transferred from the client to the server during the <create-\n\
    \   subscription> operation and applied against each <notification>\n   element\
    \ generated by the stream.  For more information on filtering,\n   see Section\
    \ 3.6.\n   A notification-logging service may also be available, in which case,\n\
    \   the central component logs notifications.  The NETCONF server may\n   later\
    \ retrieve logged notifications via the optional replay feature.\n   For more\
    \ information on replay, see section 3.3.\n   +----+\n   | c1 |----+         \
    \    available streams\n   +----+    |    +---------+\n   +----+    |    |central\
    \  |-> stream 1\n   | c2 |    +--->|event    |-> stream 2     filter  +-------+\n\
    \   +----+    |    |processor|-> NETCONF stream ----->|NETCONF|\n    ...     \
    \ |    |         |-> stream n             |server |\n   System    |    +---------+\
    \                        +-------+\n   Components|        |                  \
    \               /\\\n    ...      |        |                                 ||\n\
    \   +----+    |        |       (------------)            ||\n   | cn |----+  \
    \      |       (notification)            ||\n   +----+             +-----> ( \
    \ logging   )            ||\n                              (  service   )    \
    \        ||\n                              (------------)            ||\n    \
    \                                                    ||\n                    \
    \                                    ||\n                                    \
    \                    \\/\n                                                   \
    \ +-------+\n                                                    |NETCONF|\n \
    \                                                   |client |\n              \
    \                                      +-------+\n                           \
    \      Figure 2\n"
- title: 3.2.1.  Event Stream Definition
  contents:
  - "3.2.1.  Event Stream Definition\n   Event streams are predefined on the managed\
    \ device.  The\n   configuration of event streams is outside the scope of this\
    \ document.\n   However, it is envisioned that event streams are either pre-\n\
    \   established by the vendor (pre-configured), user configurable (e.g.,\n   part\
    \ of the device's configuration), or both.  Device vendors may\n   allow event\
    \ stream configuration via the NETCONF protocol (i.e.,\n   <edit-config> operation).\n"
- title: 3.2.2.  Event Stream Content Format
  contents:
  - "3.2.2.  Event Stream Content Format\n   The contents of all event streams made\
    \ available to a NETCONF client\n   (i.e., the notification sent by the NETCONF\
    \ server) MUST be encoded\n   in XML.\n"
- title: 3.2.3.  Default Event Stream
  contents:
  - "3.2.3.  Default Event Stream\n   A NETCONF server implementation supporting the\
    \ notification\n   capability MUST support the \"NETCONF\" notification event\
    \ stream.\n   This stream contains all NETCONF XML event notifications supported\
    \ by\n   the NETCONF server.  The exact string \"NETCONF\" is used during the\n\
    \   advertisement of stream support during the <get> operation on\n   <streams>\
    \ and during the <create-subscription> operation.  Definition\n   of the event\
    \ notifications and their contents, beyond the inclusion\n   of <eventTime>, for\
    \ this event stream is outside the scope of this\n   document.\n"
- title: 3.2.4.  Event Stream Sources
  contents:
  - "3.2.4.  Event Stream Sources\n   With the exception of the default event stream\
    \ (NETCONF),\n   specification of additional event stream sources (e.g., Simple\n\
    \   Network Management Protocol (SNMP), syslog) is outside the scope of\n   this\
    \ document.  NETCONF server implementations may leverage any\n   desired event\
    \ stream source in the creation of supported event\n   streams.\n"
- title: 3.2.5.  Event Stream Discovery
  contents:
  - "3.2.5.  Event Stream Discovery\n   A NETCONF client retrieves the list of supported\
    \ event streams from a\n   NETCONF server using the <get> operation.\n"
- title: 3.2.5.1.  Name Retrieval Using <get> Operation
  contents:
  - "3.2.5.1.  Name Retrieval Using <get> Operation\n   The list of available event\
    \ streams is retrieved by requesting the\n   <streams> subtree via a <get> operation.\
    \  Available event streams for\n   the requesting session are returned in the\
    \ reply containing the\n   <name> and <description> elements, where the <name>\
    \ element is\n   mandatory, and its value is unique within the scope of a NETCONF\n\
    \   server.  An empty reply is returned if there are no available event\n   streams,\
    \ due to user-specified filters on the <get> operation.\n   Additional information\
    \ available about a stream includes whether\n   notification replay is available\
    \ and, if so, the timestamp of the\n   earliest possible notification to replay.\n\
    \   The following example shows retrieving the list of available event\n   stream\
    \ list using the <get> operation.\n   <rpc message-id=\"101\"\n      xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <get>\n      <filter type=\"\
    subtree\">\n        <netconf xmlns=\"urn:ietf:params:xml:ns:netmod:notification\"\
    >\n           <streams/>\n         </netconf>\n      </filter>\n     </get>\n\
    \   </rpc>\n   The NETCONF server returns a list of event streams available for\n\
    \   subscription: NETCONF, SNMP, and syslog-critical in this example.\n   <rpc-reply\
    \ message-id=\"101\"\n                    xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n     <data>\n       <netconf  xmlns=\"urn:ietf:params:xml:ns:netmod:notification\"\
    >\n        <streams>\n           <stream>\n              <name>NETCONF</name>\n\
    \              <description>default NETCONF event stream\n              </description>\n\
    \              <replaySupport>true</replaySupport>\n              <replayLogCreationTime>\n\
    \                2007-07-08T00:00:00Z\n              </replayLogCreationTime>\n\
    \           </stream>\n           <stream>\n              <name>SNMP</name>\n\
    \              <description>SNMP notifications</description>\n              <replaySupport>false</replaySupport>\n\
    \           </stream>\n           <stream>\n             <name>syslog-critical</name>\n\
    \             <description>Critical and higher severity\n             </description>\n\
    \             <replaySupport>true</replaySupport>\n             <replayLogCreationTime>\n\
    \               2007-07-01T00:00:00Z\n             </replayLogCreationTime>\n\
    \            </stream>\n           </streams>\n         </netconf>\n     </data>\n\
    \   </rpc-reply>\n"
- title: 3.2.5.2.  Event Stream Subscription
  contents:
  - "3.2.5.2.  Event Stream Subscription\n   A NETCONF client may request from the\
    \ NETCONF server the list of\n   event streams available to this session and then\
    \ issue a <create-\n   subscription> request with the desired event stream name.\
    \  Omitting\n   the event stream name from the <create-subscription> request results\n\
    \   in subscription to the default NETCONF event stream.\n"
- title: 3.2.5.2.1.  Filtering Event Stream Contents
  contents:
  - "3.2.5.2.1.  Filtering Event Stream Contents\n   The set of event notifications\
    \ delivered in an event stream may be\n   further refined by applying a user-specified\
    \ filter supplied at\n   subscription creation time ( <create-subscription> ).\
    \  This is a\n   transient filter associated with the event notification subscription\n\
    \   and does not modify the event stream configuration.  The filter\n   element\
    \ is applied against the contents of the <notification> wrapper\n   and not the\
    \ wrapper itself.  See section 5 for examples.  Either\n   subtree or XPATH filtering\
    \ can be used.\n   XPATH support for the Notification capability is advertised\
    \ as part\n   of the normal XPATH capability advertisement.  If XPATH support\
    \ is\n   advertised via the XPATH capability, then XPATH is supported for\n  \
    \ notification filtering.  If this capability is not advertised, XPATH\n   is\
    \ not supported for notification filtering.\n"
- title: 3.3.   Notification Replay
  contents:
  - '3.3.   Notification Replay

    '
- title: 3.3.1.  Overview
  contents:
  - "3.3.1.  Overview\n   Replay is the ability to create an event subscription that\
    \ will\n   resend recently generated notifications, or in some cases send them\n\
    \   for the first time to a particular NETCONF client.  These\n   notifications\
    \ are sent the same way as normal notifications.\n   A replay of notifications\
    \ is specified by including the optional\n   <startTime> parameter to the subscription\
    \ command, which indicates\n   the start time of the replay.  The end time is\
    \ specified using the\n   optional <stopTime> parameter.  If not present, notifications\
    \ will\n   continue to be sent until the subscription is terminated.\n   A notification\
    \ stream that supports replay is not expected to have an\n   unlimited supply\
    \ of saved notifications available to accommodate any\n   replay request.  Clients\
    \ can query <replayLogCreationTime> and\n   <replayLogAgedTime> to learn about\
    \ the availability of notifications\n   for replay.\n   The actual number of stored\
    \ notifications available for retrieval at\n   any given time is a NETCONF server\
    \ implementation-specific matter.\n   Control parameters for this aspect of the\
    \ feature are outside the\n   scope of this document.\n   Replay is dependent\
    \ on a notification stream supporting some form of\n   notification logging, although\
    \ it puts no restrictions on the size or\n   form of the log, or where it resides\
    \ within the device.  Whether or\n   not a stream supports replay can be discovered\
    \ by doing a <get>\n   operation on the <streams> element of the Notification\
    \ Management\n   Schema and looking at the value of the <replaySupport> object.\
    \  This\n   schema also provides the <replayLogCreationTime> element to indicate\n\
    \   the earliest available logged notification.\n"
- title: 3.3.2.  Creating a Subscription with Replay
  contents:
  - "3.3.2.  Creating a Subscription with Replay\n   This feature uses optional parameters\
    \ to the <create-subscription>\n   command called <startTime> and <stopTime>.\
    \ <startTime> identifies the\n   earliest date and time of interest for event\
    \ notifications being\n   replayed and also indicates that a subscription will\
    \ be providing\n   replay of notifications.  Events generated before this time\
    \ are not\n   matched. <stopTime> specifies the latest date and time of interest\n\
    \   for event notifications being replayed.  If it is not present, then\n   notifications\
    \ will continue to be sent until the subscription is\n   terminated.\n   Note\
    \ that <startTime> and <stopTime> are associated with the time an\n   event was\
    \ generated by the event source.\n   A <replayComplete> notification is sent to\
    \ indicate that all of the\n   replay notifications have been sent and must not\
    \ be sent for any\n   other reason.  If this subscription has a stop time, then\
    \ this\n   session becomes a normal NETCONF session again.  The NETCONF server\n\
    \   will then accept <rpc> operations even if the server did not\n   previously\
    \ accept such operations due to lack of interleave support.\n   In the case of\
    \ a subscription without a stop time, after the\n   <replayComplete> notification\
    \ has been sent, it can be expected that\n   any notifications generated since\
    \ the start of the subscription\n   creation will be sent, followed by notifications\
    \ as they arise\n   naturally within the system.\n   The <replayComplete> and\
    \ <notificationComplete> notifications cannot\n   be filtered out.  They will\
    \ always be sent on a replay subscription\n   that specified a <startTime> and\
    \ <stopTime>, respectively.\n"
- title: 3.4.  Notification Management Schema
  contents:
  - "3.4.  Notification Management Schema\n   This Schema is used to learn about the\
    \ event streams supported on the\n   system.  It also contains the definition\
    \ of the <replayComplete> and\n   <notificationComplete> notifications, which\
    \ are sent to indicate that\n   an event replay has sent all applicable notifications\
    \ and that the\n   subscription has terminated, respectively.\n <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    \n     xmlns:netconf=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n     xmlns:ncEvent=\"\
    urn:ietf:params:xml:ns:netconf:notification:1.0\"\n     xmlns:manageEvent=\"urn:ietf:params:xml:ns:netmod:notification\"\
    \n     targetNamespace=\"urn:ietf:params:xml:ns:netmod:notification\"\n     elementFormDefault=\"\
    qualified\"\n     attributeFormDefault=\"unqualified\"\n     xml:lang=\"en\" version=\"\
    1.0\">\n     <xs:annotation>\n         <xs:documentation xml:lang=\"en\">\n  \
    \           A schema that can be used to learn about current\n             event\
    \ streams.  It also contains the replayComplete\n             and notificationComplete\
    \ notification.\n         </xs:documentation>\n     </xs:annotation>\n <xs:import\
    \ namespace=\"http://www.w3.org/XML/1998/namespace\"\n         schemaLocation=\"\
    http://www.w3.org/2001/xml.xsd\"/>\n <xs:import namespace=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n     schemaLocation=\"netconf.xsd\"/>\n <xs:import namespace=\n     \"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    \n       schemaLocation=\"notification.xsd\"/>\n <xs:element name=\"netconf\"\
    \ type=\"manageEvent:Netconf\"/>\n <xs:complexType name=\"Netconf\">\n   <xs:sequence>\n\
    \       <xs:element name=\"streams\" >\n         <xs:annotation>\n           \
    \ <xs:documentation>\n              The list of event streams supported by the\n\
    \              system.  When a query is issued, the returned\n              set\
    \ of streams is determined based on user\n              privileges.\n        \
    \    </xs:documentation>\n          </xs:annotation>\n          <xs:complexType>\n\
    \            <xs:sequence minOccurs=\"1\" maxOccurs=\"unbounded\">\n         \
    \     <xs:element name=\"stream\">\n                 <xs:annotation>\n       \
    \            <xs:documentation>\n                     Stream name, description,\
    \ and other information.\n                   </xs:documentation>\n           \
    \      </xs:annotation>\n                 <xs:complexType>\n                 \
    \  <xs:sequence>\n                     <xs:element name=\"name\"\n           \
    \                  type=\"ncEvent:streamNameType\">\n                        <xs:annotation>\n\
    \                          <xs:documentation>\n                            The\
    \ name of the event stream.  If this is\n                            the default\
    \ NETCONF stream, this must have\n                            the value \"NETCONF\"\
    .\n                          </xs:documentation>\n                        </xs:annotation>\n\
    \                     </xs:element>\n                     <xs:element name=\"\
    description\"\n                                         type=\"xs:string\">\n\
    \                        <xs:annotation>\n                          <xs:documentation>\n\
    \                            A description of the event stream, including\n  \
    \                          such information as the type of events that\n     \
    \                       are sent over this stream.\n                         \
    \ </xs:documentation>\n                        </xs:annotation>\n            \
    \         </xs:element>\n                     <xs:element name=\"replaySupport\"\
    \n                                         type=\"xs:boolean\">\n            \
    \          <xs:annotation>\n                          <xs:documentation>\n   \
    \                         An indication of whether or not event replay\n     \
    \                       is available on this stream.\n                       \
    \   </xs:documentation>\n                        </xs:annotation>\n          \
    \           </xs:element>\n                     <xs:element name=\"replayLogCreationTime\"\
    \n                                    type=\"xs:dateTime\" minOccurs=\"0\">\n\
    \                       <xs:annotation>\n                         <xs:documentation>\n\
    \                        The timestamp of the creation of the log\n          \
    \              used to support the replay function on\n                      \
    \  this stream.\n                        Note that this might be earlier then\n\
    \                        the earliest available\n                        notification\
    \ in the log.  This object\n                        is updated if the log resets\n\
    \                        for some reason.  This\n                        object\
    \ MUST be present if replay is\n                        supported.\n         \
    \                 </xs:documentation>\n                        </xs:annotation>\n\
    \                      </xs:element>\n                      <xs:element name=\"\
    replayLogAgedTime\"\n                             type=\"xs:dateTime\" minOccurs=\"\
    0\">\n                        <xs:annotation>\n                          <xs:documentation>\n\
    \                            The timestamp of the last notification\n        \
    \                    aged out of the log. This\n                            object\
    \ MUST be present if replay is\n                            supported and any\
    \ notifications\n                            have been aged out of the log.\n\
    \                          </xs:documentation>\n                        </xs:annotation>\n\
    \                      </xs:element>\n                    </xs:sequence>\n   \
    \               </xs:complexType>\n                </xs:element>\n           \
    \   </xs:sequence>\n            </xs:complexType>\n          </xs:element>\n \
    \    </xs:sequence>\n     </xs:complexType>\n     <xs:complexType name=\"ReplayCompleteNotificationType\"\
    >\n         <xs:complexContent>\n             <xs:extension base=\"ncEvent:NotificationContentType\"\
    />\n         </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"\
    replayComplete\"\n         type=\"manageEvent:ReplayCompleteNotificationType\"\
    \n         substitutionGroup=\"ncEvent:notificationContent\">\n              \
    \   <xs:annotation>\n           <xs:documentation>\n             This notification\
    \ is sent to signal the end of a replay\n             portion of a subscription.\n\
    \           </xs:documentation>\n         </xs:annotation>\n         </xs:element>\n\
    \     <xs:complexType name=\"NotificationCompleteNotificationType\">\n       \
    \  <xs:complexContent>\n             <xs:extension base=\"ncEvent:NotificationContentType\"\
    />\n         </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"\
    notificationComplete\"\n         type=\"manageEvent:NotificationCompleteNotificationType\"\
    \n         substitutionGroup=\"ncEvent:notificationContent\">\n              \
    \   <xs:annotation>\n           <xs:documentation>\n             This notification\
    \ is sent to signal the end of a\n             notification subscription.  It\
    \ is sent in the case\n             that stopTime was specified during the creation\
    \ of\n             the subscription.\n           </xs:documentation>\n       \
    \  </xs:annotation>\n         </xs:element>\n </xs:schema>\n"
- title: 3.5.  Subscriptions Data
  contents:
  - "3.5.  Subscriptions Data\n   Subscriptions are non-persistent state information,\
    \ and their\n   lifetime is defined by their session or by the <stopTime> parameter.\n"
- title: 3.6.  Filter Mechanics
  contents:
  - "3.6.  Filter Mechanics\n   If a filter element is specified to look for data\
    \ of a particular\n   value, and the data item is not present within a particular\
    \ event\n   notification for its value to be checked against, the notification\n\
    \   will be filtered out.  For example, if one were to check for\n   'severity=critical'\
    \ in a configuration event notification where this\n   field was not supported,\
    \ then the notification would be filtered out.\n   For subtree filtering, a non-empty\
    \ node set means that the filter\n   matches.  For XPath filtering, the mechanisms\
    \ defined in [XPATH]\n   should be used to convert the returned value to boolean.\n"
- title: 3.6.1.  Filtering
  contents:
  - "3.6.1.  Filtering\n   Filtering is explicitly stated when the event notification\n\
    \   subscription is created.  This is specified via the 'filter'\n   parameter.\
    \  A Filter only exists as a parameter to the subscription.\n"
- title: 3.7.  Message Flow
  contents:
  - "3.7.  Message Flow\n   The following figure depicts message flow between a NETCONF\
    \ client\n   (C) and NETCONF server (S) in order to create a subscription and\n\
    \   begin the flow of notifications.  This subscription specifies a\n   <startTime>,\
    \ so the server starts by replaying logged notifications.\n   It is possible that\
    \ many rpc/rpc-reply sequences occur before the\n   subscription is created, but\
    \ this is not depicted in the figure.\n                        C             \
    \              S\n                        |                           |\n    \
    \                    |  capability exchange      |\n                        |-------------------------->|\n\
    \                        |<------------------------->|\n                     \
    \   |                           |\n                        |  <create-subscription>\
    \    | (startTime)\n                        |-------------------------->|\n  \
    \                      |<--------------------------|\n                       \
    \ |     <rpc-reply>           |\n                        |                   \
    \        |\n                        |     <notification>        |\n          \
    \              |<--------------------------|\n                        |      \
    \                     |\n                        |     <notification>        |\n\
    \                        |<--------------------------|\n                     \
    \   |      <notification>       | (replayComplete)\n                        |<--------------------------|\n\
    \                        |                           |\n                     \
    \   |                           |\n                        |                 \
    \          |\n                        |     <notification>        |\n        \
    \                |<--------------------------|\n                        |    \
    \                       |\n                        |                         \
    \  |\n                        |     <notification>        |\n                \
    \        |<--------------------------|\n                        |            \
    \               |\n                        |                           |\n   \
    \                              Figure 3\n   The following figure depicts message\
    \ flow between a NETCONF client\n   (C) and NETCONF server (S) in order to create\
    \ a subscription and\n   begin the flow of notifications.  This subscription specified\
    \ a\n   <startTime> and <stopTime> so it starts by replaying logged\n   notifications\
    \ and then returns to be a normal command-response\n   NETCONF session after the\
    \ <replayComplete> and <notificationComplete>\n   notifications are sent and it\
    \ is available to process <rpc> requests.\n   It is possible that many rpc/rpc-reply\
    \ sequences occur before the\n   subscription is created, but this is not depicted\
    \ in the figure.\n                     C                           S\n       \
    \              |                           |\n                     |  capability\
    \ exchange      |\n                     |-------------------------->|\n      \
    \               |<------------------------->|\n                     |        \
    \                   |\n                     |  <create-subscription>    | (startTime,\n\
    \                     |-------------------------->|  stopTime)\n             \
    \        |<--------------------------|\n                     |     <rpc-reply>\
    \           |\n                     |                           |\n          \
    \           |     <notification>        |\n                     |<--------------------------|\n\
    \                     |                           |\n                     |  \
    \   <notification>        |\n                     |<--------------------------|\n\
    \                     |      <notification>       | (replayComplete)\n       \
    \              |<--------------------------|\n                     |      <notification>\
    \       |(notificationComplete)\n                     |<--------------------------|\n\
    \                     |                           |\n                     |  \
    \                         |\n                     |                          \
    \ |\n                     |          <rpc>            |\n                    \
    \ |-------------------------->|\n                     |<--------------------------|\n\
    \                     |       <rpc-reply>         |\n                     |  \
    \                         |\n                                 Figure 4\n"
- title: 4.  XML Schema for Event Notifications
  contents:
  - "4.  XML Schema for Event Notifications\n   The following [XMLSchema] defines\
    \ NETCONF Event Notifications.\n"
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    \n     xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\n     xmlns:netconf=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\"\n     targetNamespace=\n        \"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    \n     elementFormDefault=\"qualified\"\n     attributeFormDefault=\"unqualified\"\
    \n       xml:lang=\"en\">\n    <!-- import standard XML definitions -->\n    \
    \ <xs:import namespace=\"http://www.w3.org/XML/1998/namespace\"\n            \
    \    schemaLocation=\"http://www.w3.org/2001/xml.xsd\">\n       <xs:annotation>\n\
    \         <xs:documentation>\n           This import accesses the xml: attribute\
    \ groups for the\n           xml:lang as declared on the error-message element.\n\
    \         </xs:documentation>\n       </xs:annotation>\n     </xs:import>\n  \
    \   <!-- import base netconf definitions -->\n     <xs:import namespace=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n       schemaLocation=\"netconf.xsd\"/>\n"
- title: <!-- ************** Symmetrical Operations  ********************-->
  contents:
  - "<!-- ************** Symmetrical Operations  ********************-->\n     <!--\
    \ <create-subscription> operation -->\n    <xs:complexType name=\"createSubscriptionType\"\
    >\n        <xs:complexContent>\n            <xs:extension base=\"netconf:rpcOperationType\"\
    >\n                <xs:sequence>\n                    <xs:element name=\"stream\"\
    \n                        type=\"streamNameType\" minOccurs=\"0\">\n         \
    \               <xs:annotation>\n                            <xs:documentation>\n\
    \                               An optional parameter that indicates\n       \
    \                        which stream of events is of interest.\n            \
    \                   If not present, then events in the\n                     \
    \          default NETCONF stream will be sent.\n                            </xs:documentation>\n\
    \                        </xs:annotation>\n                    </xs:element>\n\
    \                        <xs:element name=\"filter\"\n                       \
    \     type=\"netconf:filterInlineType\"\n                            minOccurs=\"\
    0\">\n                            <xs:annotation>\n                          \
    \      <xs:documentation>\n                                    An optional parameter\
    \ that indicates\n                                    which subset of all possible\
    \ events\n                                    is of interest.  The format of this\n\
    \                                    parameter is the same as that of the\n  \
    \                                  filter parameter in the NETCONF\n         \
    \                           protocol operations.  If not\n                   \
    \                 present, all events not precluded\n                        \
    \            by other parameters will be sent.\n                             \
    \   </xs:documentation>\n                            </xs:annotation>\n      \
    \                  </xs:element>\n                    <xs:element name=\"startTime\"\
    \ type=\"xs:dateTime\"\n                        minOccurs=\"0\" >\n          \
    \              <xs:annotation>\n                            <xs:documentation>\n\
    \                                A parameter used to trigger the replay\n    \
    \                            feature indicating that the replay\n            \
    \                    should start at the time specified.  If\n               \
    \                 start time is not present, this is not a\n                 \
    \               replay subscription.\n                            </xs:documentation>\n\
    \                        </xs:annotation>\n                    </xs:element>\n\
    \                    <xs:element name=\"stopTime\" type=\"xs:dateTime\"\n    \
    \                    minOccurs=\"0\" >\n                        <xs:annotation>\n\
    \                            <xs:documentation>\n                            \
    \    An optional parameter used with the\n                                optional\
    \ replay feature to indicate the\n                                newest notifications\
    \ of interest.  If\n                                stop time is not present,\
    \ the\n                                notifications will continue until the\n\
    \                                subscription is terminated.  Must be\n      \
    \                          used with startTime.\n                            </xs:documentation>\n\
    \                        </xs:annotation>\n                    </xs:element>\n\
    \                </xs:sequence>\n            </xs:extension>\n        </xs:complexContent>\n\
    \    </xs:complexType>\n    <xs:simpleType name=\"streamNameType\">\n        <xs:annotation>\n\
    \            <xs:documentation>\n                The name of an event stream.\n\
    \            </xs:documentation>\n        </xs:annotation>\n        <xs:restriction\
    \ base=\"xs:string\"/>\n    </xs:simpleType>\n    <xs:element name=\"create-subscription\"\
    \n        type=\"createSubscriptionType\"\n        substitutionGroup=\"netconf:rpcOperation\"\
    >\n        <xs:annotation>\n            <xs:documentation>\n                The\
    \ command to create a notification subscription.  It\n                takes as\
    \ argument the name of the notification stream\n                and filter.  Both\
    \ of those options\n                limit the content of the subscription.  In\
    \ addition,\n                there are two time-related parameters, startTime\
    \ and\n                stopTime, which can be used to select the time interval\n\
    \                of interest to the notification replay feature.\n           \
    \ </xs:documentation>\n        </xs:annotation>\n    </xs:element>\n"
- title: <!-- ************** One-way Operations  ******************-->
  contents:
  - "<!-- ************** One-way Operations  ******************-->\n     <!-- <Notification>\
    \ operation -->\n     <xs:complexType name=\"NotificationContentType\"/>\n   \
    \ <xs:element name=\"notificationContent\"\n        type=\"NotificationContentType\"\
    \ abstract=\"true\"/>\n    <xs:complexType name=\"NotificationType\">\n      \
    \  <xs:sequence>\n            <xs:element name=\"eventTime\" type=\"xs:dateTime\"\
    >\n              <xs:annotation>\n                <xs:documentation>\n       \
    \         The time the event was generated by the event source.\n            \
    \    </xs:documentation>\n              </xs:annotation>\n            </xs:element>\n\
    \            <xs:element ref=\"notificationContent\"/>\n        </xs:sequence>\n\
    \    </xs:complexType>\n    <xs:element name=\"notification\" type=\"NotificationType\"\
    />\n  </xs:schema>\n"
- title: 5.  Filtering Examples
  contents:
  - "5.  Filtering Examples\n   The following section provides examples to illustrate\
    \ the various\n   methods of filtering content on an event notification subscription.\n\
    \   In order to illustrate the use of filter expressions, it is necessary\n  \
    \ to assume some of the event notification content.  The examples below\n   assume\
    \ that the event notification schema definition has an <event>\n   element at\
    \ the top level consisting of the event class (e.g., fault,\n   state, config),\
    \ reporting entity, and either severity or operational\n   state.\n   Examples\
    \ in this section are generated from the following fictional\n   Schema.\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema targetNamespace=\"http://example.com/event/1.0\"\
    \n       xmlns=\"http://example.com/event/1.0\"\n       elementFormDefault=\"\
    qualified\"\n       xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n       xmlns:ncEvent=\"\
    urn:ietf:params:xml:ns:netconf:notification:1.0\">\n       <xs:import namespace=\n\
    \           \"urn:ietf:params:xml:ns:netconf:notification:1.0\"\n           schemaLocation=\"\
    notification.xsd\"/>\n       <xs:complexType name=\"eventType\">\n           <xs:complexContent>\n\
    \               <xs:extension base=\"ncEvent:NotificationContentType\">\n    \
    \               <xs:sequence>\n                       <xs:element name=\"eventClass\"\
    \ />\n                       <xs:element name=\"reportingEntity\">\n         \
    \                  <xs:complexType>\n                               <xs:sequence>\n\
    \                                   <xs:any namespace=\"##any\"\n            \
    \                       processContents=\"lax\"/>\n                          \
    \     </xs:sequence>\n                           </xs:complexType>\n         \
    \              </xs:element>\n                       <xs:choice>\n           \
    \                <xs:element name=\"severity\"/>\n                           <xs:element\
    \ name=\"operState\"/>\n                       </xs:choice>\n                \
    \   </xs:sequence>\n               </xs:extension>\n           </xs:complexContent>\n\
    \       </xs:complexType>\n       <xs:element name=\"event\"\n           type=\"\
    eventType\"\n           substitutionGroup=\"ncEvent:notificationContent\"/>\n\
    \   </xs:schema>\n   The above fictional notification definition could result\
    \ in the\n   following sample notification list, which is used in the examples\
    \ in\n   this section.\n   <notification\n      xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n      <eventTime>2007-07-08T00:01:00Z</eventTime>\n      <event xmlns=\"http://example.com/event/1.0\"\
    >\n         <eventClass>fault</eventClass>\n         <reportingEntity>\n     \
    \        <card>Ethernet0</card>\n         </reportingEntity>\n         <severity>major</severity>\n\
    \       </event>\n   </notification>\n   <notification\n     xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n      <eventTime>2007-07-08T00:02:00Z</eventTime>\n      <event xmlns=\"http://example.com/event/1.0\"\
    >\n          <eventClass>fault</eventClass>\n          <reportingEntity>\n   \
    \           <card>Ethernet2</card>\n          </reportingEntity>\n          <severity>critical</severity>\n\
    \       </event>\n   </notification>\n   <notification\n     xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n      <eventTime>2007-07-08T00:04:00Z</eventTime>\n      <event xmlns=\"http://example.com/event/1.0\"\
    >\n          <eventClass>fault</eventClass>\n          <reportingEntity>\n   \
    \            <card>ATM1</card>\n           </reportingEntity>\n           <severity>minor</severity>\n\
    \      </event>\n   </notification>\n   <notification\n     xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n     <eventTime>2007-07-08T00:10:00Z</eventTime>\n     <event xmlns=\"http://example.com/event/1.0\"\
    >\n         <eventClass>state</eventClass>\n         <reportingEntity>\n     \
    \        <card>Ethernet0</card>\n         </reportingEntity>\n         <operState>enabled</operState>\n\
    \      </event>\n   </notification>\n"
- title: 5.1.  Subtree Filtering
  contents:
  - "5.1.  Subtree Filtering\n   XML subtree filtering is not well-suited for creating\
    \ elaborate\n   filter definitions given that it only supports equality comparisons\n\
    \   and application of the logical OR operators (e.g., in an event\n   subtree,\
    \ give me all event notifications that have severity=critical,\n   severity=major,\
    \ or severity=minor).  Nevertheless, it may be used for\n   defining simple event\
    \ notification forwarding filters as shown below.\n   The following example illustrates\
    \ how to select fault events which\n   have severities of critical, major, or\
    \ minor.  The filtering criteria\n   evaluation is as follows:\n   ((fault & severity=critical)\
    \ | (fault & severity=major) | (fault &\n   severity=minor))\n        <netconf:rpc\
    \ netconf:message-id=\"101\"\n                xmlns:netconf=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n          <create-subscription\n              xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n            <filter netconf:type=\"subtree\">\n              <event xmlns=\"\
    http://example.com/event/1.0\">\n                <eventClass>fault</eventClass>\n\
    \                <severity>critical</severity>\n              </event>\n     \
    \         <event xmlns=\"http://example.com/event/1.0\">\n                <eventClass>fault</eventClass>\n\
    \                <severity>major</severity>\n              </event>\n        \
    \      <event xmlns=\"http://example.com/event/1.0\">\n                <eventClass>fault</eventClass>\n\
    \                <severity>minor</severity>\n              </event>\n        \
    \    </filter>\n          </create-subscription>\n        </netconf:rpc>\n   The\
    \ following example illustrates how to select state or config\n   EventClasses\
    \ or fault events that are related to card Ethernet0.  The\n   filtering criteria\
    \ evaluation is as follows:\n   ( state | config | ( fault & ( card=Ethernet0)))\n"
- title: <netconf:rpc netconf:message-id="101"
  contents:
  - "<netconf:rpc netconf:message-id=\"101\"\n                xmlns:netconf=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n      <create-subscription\n          xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n        <filter netconf:type=\"subtree\">\n          <event xmlns=\"http://example.com/event/1.0\"\
    >\n            <eventClass>state</eventClass>\n          </event>\n          <event\
    \ xmlns=\"http://example.com/event/1.0\">\n            <eventClass>config</eventClass>\n\
    \          </event>\n          <event xmlns=\"http://example.com/event/1.0\">\n\
    \            <eventClass>fault</eventClass>\n            <reportingEntity>\n \
    \             <card>Ethernet0</card>\n            </reportingEntity>\n       \
    \   </event>\n        </filter>\n      </create-subscription>\n"
- title: </netconf:rpc>
  contents:
  - '</netconf:rpc>

    '
- title: 5.2.  XPATH Filters
  contents:
  - "5.2.  XPATH Filters\n   The following [XPATH] example illustrates how to select\
    \ fault\n   EventClass notifications that have severities of critical, major,\
    \ or\n   minor.  The filtering criteria evaluation is as follows:\n   ((fault)\
    \ & ((severity=critical) | (severity=major) | (severity =\n   minor)))\n     \
    \ <netconf:rpc netconf:message-id=\"101\"\n                xmlns:netconf=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n        <create-subscription\n              xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n          <filter netconf:type=\"xpath\"\n                  xmlns:ex=\"http://example.com/event/1.0\"\
    \n             select=\"/ex:event[ex:eventClass='fault' and\n                \
    \  (ex:severity='minor' or ex:severity='major'\n                       or ex:severity='critical')]\"\
    />\n        </create-subscription>\n      </netconf:rpc>\n   The following example\
    \ illustrates how to select state and config\n   EventClasses or fault events\
    \ of any severity that come from card\n   Ethernet0.  The filtering criteria evaluation\
    \ is as follows:\n   ( state | config | (fault & card=Ethernet0))\n     <netconf:rpc\
    \ message-id=\"101\"\n              xmlns:netconf=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n        <create-subscription\n           xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n             <filter netconf:type=\"xpath\"\n                     xmlns:ex=\"\
    http://example.com/event/1.0\"\n                select=\"/ex:event[\n        \
    \           (ex:eventClass='state' or ex:eventClass='config') or\n           \
    \        ((ex:eventClass='fault' and ex:card='Ethernet0'))]\"/>\n       </create-subscription>\n\
    \     </netconf:rpc>\n"
- title: 6.  Interleave Capability
  contents:
  - '6.  Interleave Capability

    '
- title: 6.1.  Description
  contents:
  - "6.1.  Description\n   The :interleave capability indicates that the NETCONF peer\
    \ supports\n   the ability to interleave other NETCONF operations within a\n \
    \  notification subscription.  This means the NETCONF server MUST\n   receive,\
    \ process, and respond to NETCONF requests on a session with\n   an active notification\
    \ subscription.  This capability helps\n   scalability by reducing the total number\
    \ of NETCONF sessions required\n   by a given operator or management application.\n"
- title: 6.2.  Dependencies
  contents:
  - "6.2.  Dependencies\n   This capability is dependent on the notification capability\
    \ being\n   supported.\n"
- title: 6.3.  Capability Identifier
  contents:
  - "6.3.  Capability Identifier\n   The :interleave capability is identified by the\
    \ following capability\n   string:\n   urn:ietf:params:netconf:capability:interleave:1.0\n"
- title: 6.4.  New Operations
  contents:
  - "6.4.  New Operations\n   None.\n"
- title: 6.5.  Modifications to Existing Operations
  contents:
  - "6.5.  Modifications to Existing Operations\n   When a <create-subscription> is\
    \ sent while another subscription is\n   active on that session, the following\
    \ error will be returned:\n      Tag: operation-failed\n      Error-type: protocol\n\
    \      Severity: error\n      Error-info: none\n      Description: Request could\
    \ not be completed because the requested\n      operation failed for some reason\
    \ not covered by any other error\n      condition.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The security considerations from the base [NETCONF]\
    \ document also\n   apply to the Notification capability.\n   The access control\
    \ framework and the choice of transport will have a\n   major impact on the security\
    \ of the solution.\n   The <notification> elements are never sent before the transport\
    \ layer\n   and the NETCONF layer, including capabilities exchange, have been\n\
    \   established and the manager has been identified and authenticated.\n   It\
    \ is recommended that care be taken to secure execution:\n   o  <create-subscription>\
    \ invocation\n   o  <get> on read-only data models\n   o  <notification> content\n\
    \   Secure execution means ensuring that a secure transport is used as\n   well\
    \ as ensuring that the user has sufficient authorization to\n   perform the function\
    \ they are requesting against the specific subset\n   of NETCONF content involved.\
    \  When a <get> is received that refers to\n   the content defined in this memo,\
    \ clients should only be able to view\n   the content for which they have sufficient\
    \ privileges.  A create\n   <create-subscription> operation can be considered\
    \ like a deferred\n   <get>, and the content that different users can access may\
    \ vary.\n   This different access is reflected in the <notification> that\n  \
    \ different users are able to subscribe to.\n   One potential security issue is\
    \ the transport of data from non-\n   NETCONF streams, such as syslog and SNMP.\
    \  This data may be more\n   vulnerable (or less vulnerable) when being transported\
    \ over NETCONF\n   than when being transported using the protocol normally used\
    \ for\n   transporting it, depending on the security credentials of the two\n\
    \   subsystems.  The NETCONF server is responsible for applying access\n   control\
    \ to stream content.\n   The contents of notifications, as well as the names of\
    \ event streams,\n   may contain sensitive information and care should be taken\
    \ to ensure\n   that they are viewed only by authorized users.  The NETCONF server\n\
    \   MUST NOT include any content in a notification that the user is not\n   authorized\
    \ to view.\n   If a subscription is created with a <stopTime>, the NETCONF session\n\
    \   will return to being a normal command-response NETCONF session when\n   the\
    \ replay is completed.  It is the responsibility of the NETCONF\n   client to\
    \ close this session when it is no longer of use.\n   If a malicious or buggy\
    \ NETCONF client sends a number of <create-\n   subscription> requests, then these\
    \ subscriptions accumulate and may\n   use up system resources.  In such a situation,\
    \ subscriptions can be\n   terminated by terminating the suspect underlying NETCONF\
    \ sessions\n   using the <kill-session> operation.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document registers three URIs for the NETCONF\
    \ XML namespace in\n   the IETF XML registry [RFC3688].\n   Following the format\
    \ in RFC 3688, IANA has made the following\n   registration.  Note that the capability\
    \ URNs are also compliant to\n   section 10.3 of [NETCONF].\n   +--------------------+----------------------------------------------+\n\
    \   | Index              | Capability Identifier                        |\n  \
    \ +--------------------+----------------------------------------------+\n   |\
    \ :notification      | urn:ietf:params:netconf:capability:          |\n   |  \
    \                  | notification:1.0                             |\n   |    \
    \                |                                              |\n   | :interleave\
    \        | urn:ietf:params:netconf:capability:          |\n   |              \
    \      | interleave:1.0                               |\n   +--------------------+----------------------------------------------+\n\
    \   URI: urn:ietf:params:xml:ns:netmod:notification\n   URI: urn:ietf:params:xml:ns:netconf:notification:1.0\n\
    \   Registrant Contact: The IESG.\n   XML: N/A, the requested URI is an XML namespace.\n\
    \   In addition, IANA registered the XML Schema defined in Section 4.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   Thanks to Gilbert Gagnon, Greg Wilbur, and Kim Curran\
    \ for providing\n   their input into the early work on this document.  In addition,\
    \ the\n   editors would like to acknowledge input at the Vancouver editing\n \
    \  session from the following people: Orly Nicklass, James Balestriere,\n   Yoshifumi\
    \ Atarashi, Glenn Waters, Alexander Clemm, Dave Harrington,\n   Dave Partain,\
    \ Ray Atarashi, David Perkins, and the following\n   additional people from the\
    \ Montreal editing session: Balazs Lengyel,\n   Phil Shafer, Rob Enns, Andy Bierman,\
    \ Dan Romascanu, Bert Wijnen,\n   Simon Leinen, Juergen Schoenwaelder, Hideki\
    \ Okita, Vincent Cridlig,\n   Martin Bjorklund, Olivier Festor, Radu State, Brian\
    \ Trammell, and\n   William Chow.  We would also like to thank Li Yan for his\
    \ numerous\n   reviews, as well as Suresh Krishnan for his gen-art review of the\n\
    \   document.\n"
- title: 10.  Normative References
  contents:
  - "10.  Normative References\n   [NETCONF]    Enns, R., Ed., \"NETCONF Configuration\
    \ Protocol\",\n                RFC 4741, December 2006.\n   [RFC2119]    Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n                Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC3339]    Klyne, G., Ed. and C. Newman,\
    \ \"Date and Time on the\n                Internet: Timestamps\", RFC 3339, July\
    \ 2002.\n   [RFC3688]    Mealling, M., \"The IETF XML Registry\", BCP 81, RFC\
    \ 3688,\n                January  2004.\n   [XML]        World Wide Web Consortium,\
    \ \"Extensible Markup Language\n                (XML) 1.0\", W3C XML, February\
    \ 1998,\n                <http://www.w3.org/TR/1998/REC-xml-19980210>.\n   [XMLSchema]\
    \  Thompson, H., Beech, D., Maloney, M., and N. Mendelsohn,\n                \"\
    XML Schema Part 1: Structures Second Edition\", W3C http\n                ://www.w3.org/TR/2004/REC-xmlschema-1-20041028/\n\
    \                structures.html, October 2004.\n   [XPATH]      Clark, J. and\
    \ S. DeRose, \"XML Path Language (XPath)\n                Version 1.0\",\n   \
    \             W3C http://www.w3.org/TR/1999/REC-xpath-19991116,\n            \
    \    November 1999.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sharon Chisholm\n   Nortel\n   3500 Carling Ave\n   Nepean,\
    \ Ontario  K2H 8E9\n   Canada\n   EMail: schishol@nortel.com\n   Hector Trevino\n\
    \   Cisco\n   Suite 400\n   9155 E. Nichols Ave\n   Englewood, CO  80112\n   USA\n\
    \   EMail: htrevino@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
