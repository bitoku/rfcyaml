Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes managed objects for Traffic Engineered (TE) Tunnels; for example, Multi Protocol Label Switched Paths.
This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes managed objects for Traffic Engineered (TE) Tunnels; for example, Multi Protocol Label Switched Paths ([7], [8]).
The MIB module defined by this memo allows one to configure TE Tunnels, to assign one or more paths to a Tunnel, and to monitor operational aspects of the Tunnel, such as the number of octets and packets that have passed through the Tunnel.
As it stands, this MIB module can only be used to configure or monitor a TE Tunnel at its ingress.
The ingress is then expected to use some protocol (such as RSVP TE) to signal the other routers in the path the information they need to set up the tunnel.
The extension of this module for use at other points of a Tunnel is for further study.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [1].
The Internet Standard Management Framework
For a detailed overview of the documents that describe the current Internet Standard Management Framework, please refer to Section 7 of RFC 3410 [8].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
MIB objects are generally accessed through the Simple Network Management Protocol (SNMP).
Objects in the MIB are defined using the mechanisms defined in the Structure of Management Information (SMI).
This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58, RFC 2578 [2], STD 58, RFC 2579
[3] and STD 58, RFC 2580 [4].
Overview of the MIB Module
The Traffic Engineering MIB module consists of four parts: 1) Traffic Engineering information, 2)
a table of Traffic Engineering Tunnels, 3) a table of Paths that tunnels take, and 4)
a table of Hops that make up a tunnel path.
The MIB module also has statements for minimal and full compliance.
The following subsections give an overview of each part.
For minimal compliance, all objects MAY be implemented read only; for full compliance, all objects must be implemented to their stated MAX ACCESS capabilities.
This part contains information about the Link State Protocols used to carry TE information, the signaling protocols used to set up Traffic Tunnels, the number of Traffic Tunnels that have been configured and that are operational, and a mapping of Administrative Group (called Resource Classes in [7]) numbers to names.
This part contains a table of Traffic Tunnels and information about each one.
This information includes the Tunnel name, its configuration information, its operational information, and the active path(s) that the Tunnel takes.
Configuration information includes the end points of the Traffic Tunnel, and the number of configured paths for the Traffic Tunnel.
Operational information includes the current state (up/down), the count of octets and packets sent on the Traffic Tunnel, how long it has been up, and how many state transitions the Traffic Tunnel has had.
Operational path information includes the number of operational paths, the number of path changes, and when the last path change was.
Path Information A Tunnel is a logical entity.
An instantiation of a Tunnel is one or more Paths; each Path has a route (also called Explicit Route) or sequence of hops.
A Path is indexed by a dual index: The primary index is that of the Tunnel to which the Path belongs; the secondary index is that of the Path itself.
The configured information for a Path consists of the constraints for the Path and a configured route.
The operational information consists of the Path status, the computed route (i.e., the route that was computed to satisfy the constraints), and the actual path as recorded by the signaling protocol.
A path consists of a sequence of hops.
A hop can be loose (meaning that the path eventually traverses the specified node) or strict (meaning that the specified node and possibly the link must be the next node in the path).
A hop can be specified as an IPv4 address, an IPv6 address, an Autonomous System number or an unnumbered interface index [5].
The Hop Table contains all hops for all paths on a given router.
It is organized as follows.
There is a primary index that identifies a list of hops and a secondary index that identifies individual hops.
Thus, to get the sequence of recorded hops for a path, one looks up the path's tePathRecordedRoute, which is a primary index into the Hop Table.
Relationship with Other MIB Modules A TE Tunnel can extend objects from two other MIB modules; one is the Interfaces MIB [10], and the other is the IP Tunnel MIB [11].
The mechanism for doing so is to assign the TE Tunnel index (teTunnelIndex) with a valid ifIndex value in ifTable.
If a TE Tunnel is deemed an interface, a new interface object is created and assigned an ifIndex value in ifTable.
Then a TE Tunnel object is created, setting teTunnelIndex to the same value as the interface index.
If (and only if) a TE Tunnel is considered an interface, it may also be considered an IP tunnel (if the encapsulation of the TE Tunnel is IP).
In that case, the interface associated with the TE Tunnel should have its ifType set to tunnel(131).
If a TE Tunnel is not considered an interface, then the TE Tunnel index (teTunnelIndex) SHOULD be set to a value at least 2^24, so that it is distinct from normal interfaces.
Creating, Modifying, and Deleting a TE Tunnel
To create a TE Tunnel, one first obtains a free Tunnel index by using the object teNextTunnelIndex.
One then creates the Tunnel, including all parameters, either as createAndGo or createAndWait.
Then, TE Paths for this Tunnel can be created by using the teTunnelNextPathIndex object, again as createAndGo or createAndWait.
A particular Path is computed and signaled when both the Path and the enclosing Tunnel have RowStatus 'active'.
To build a Path's configured route, one first gets a free PathHop index by using teNextPathHopIndex, and then builds the route hop by  hop using the secondary index, setting the AddrType, Address, and HopType for each Hop.
Finally, one sets the tePathConfiguredRoute in the Path to the PathHop index obtained.
Modifying certain properties of a TE Tunnel or a TE Path may require setting the RowStatus of the Tunnel (or Path) to 'notInService' before making the changes and then setting the RowStatus of the Tunnel (or Path) back to 'active' to re signal all Paths of the Tunnel (or the modified Path).
A TE Tunnel and all its Paths can be deleted by setting the Tunnel's RowStatus to 'destroy'.
A specific Path within a Tunnel can be destroyed by setting that Path's RowStatus to 'destroy'.
This MIB module IMPORTs objects from RFCs 2578 [2], 2579 [3], 2580 [3], 3411 [6], and 3811 [5]
and it also has REFERENCE clauses to RFCs 3209
Mathilda Ave Sunnyvale, CA 94089
The IETF Traffic Engineering Working Group is chaired by Jim Boyle and Ed Kern.
ftp://ops.ietf.org/pub/lists Comments on the MIB module should be sent to the mailing list.
The archives for this mailing list should be consulted for previous discussion on this MIB.
" DESCRIPTION  "The Traffic Engineering MIB module.
This version of this MIB module is part of RFC 3970; see the RFC itself for full legal notices. "
"IGP used to distribute Traffic Engineering information and topology to each device for the purpose of automatic path computation.
More than one IGP may be used to distribute TE information. "
More than one protocol may be supported.
"For a description of RSVP TE, see RFC 3209; for CR LDP, see RFC 3212. "
"If this object is true, then it enables the generation of notifications from this MIB module.
Otherwise notifications are not generated.
An integer that may be used as a new Index in the teTunnelTable.
The special value of 0 indicates that no more new entries can be created in that table.
When this MIB module is used for configuration, this object always contains a legal value (if non zero) for an index that is not currently used in that table.
The Command Generator (Network Management Application) reads this variable and uses the (non zero) value read when creating a new row with an SNMP SET.
When the SET is performed, the Command Responder (agent) must determine whether the value is indeed still unused; Two Network Management Applications may attempt to create a row (configuration entry) simultaneously and use the same value.
If it is currently unused, the SET succeeds, and the Command Responder (agent) changes the value of this object according to an implementation specific algorithm.
If the value is in use, however, the SET fails.
The Network Management Application must then re read this variable to obtain a new usable value. "
An integer that may be used as a new Index in the tePathHopTable.
The special value of 0 indicates that no more new entries can be created in that table.
When this MIB module is used for configuration, this object always contains a legal value (if non zero) for an index that is not currently used in that table.
The Command Generator (Network Management Application) reads this variable and uses the (non zero) value read when creating a new row with an SNMP SET.
When the SET is performed, the Command Responder (agent) must determine whether the value is indeed still unused; Two Network Management Applications may attempt to create a row (configuration entry) simultaneously and use the same value.
If it is currently unused, the SET succeeds, and the Command Responder (agent) changes the value of this object according to an implementation specific algorithm.
If the value is in use, however, the SET fails.
The Network Management Application must then re read this variable to obtain a new usable value. "
A mapping of configured administrative groups.
Each entry represents an Administrative Group and provides a name and index for the group.
Administrative groups are used to label links in the Traffic Engineering topology in order to place constraints (include and exclude) on Tunnel paths.
A groupName can only be linked to one group number.
The groupNumber is the number assigned to the administrative group used in constraints, such as tePathIncludeAny or tePathIncludeAll. "
A mapping between a configured group number and its human readable name.
The group number should be between 1 and 32, inclusive.
Group number n represents bit number (n 1) in the bit vector for Include/Exclude constraints.
All entries in this table MUST be kept in stable storage so that they will re appear in case of a restart/reboot.
teAdminGroupRowStatus RowStatus } teAdminGroupNumber OBJECT
The status of this conceptual row.
The value of this object has no effect on whether other objects in this conceptual row can be modified. "
A unique index that identifies a Tunnel.
If the TE Tunnel is considered an interface, then this index must match the interface index of the corresponding interface.
Otherwise, this index must be at least 2^24, so that it does not overlap with any existing interface index. "
Note that the name of a Tunnel MUST be unique.
When a SET request contains a name that is already in use for another entry, then the implementation must return an inconsistentValue error.
The value of this object cannot be changed if the if the value of the corresponding teTunnelRowStatus object is 'active'. "
An integer that may be used as a new Index for the next Path in this Tunnel.
The special value of 0 indicates that no more Paths can be created for this Tunnel, or that no more new entries can be created in tePathTable.
When this MIB module is used for configuration, this object always contains a legal value (if non zero) for an index that is not currently used in that table.
The Command Generator (Network Management Application) reads this variable and uses the (non zero) value read when creating a new row with an SNMP SET.
When the SET is performed, the Command Responder (agent) must determine whether the value is indeed still unused; Two Network Management Applications may attempt to create a row (configuration entry) simultaneously and use the same value.
If it is currently unused, the SET succeeds, and the Command Responder (agent) changes the value of this object according to an implementation specific algorithm.
If the value is in use, however, the SET fails.
The Network Management Application must then re read this variable to obtain a new usable value. "
The status of this conceptual row.
When the value of this object is 'active', then the values for the corresponding objects teTunnelName, teTunnelSourceAddressType, teTunnelSourceAddress, teTunnelDestinationAddressType, and teTunnelDestinationAddress cannot be changed. "
"The storage type for this conceptual row.
Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row. "
"The type of Traffic Engineered Tunnel hop address for the source of this Tunnel.
Typically, this address type is IPv4 or IPv6, with a prefix length of 32 or 128, respectively.
If the TE Tunnel path is being computed by a path computation server, however, it is possible to use more flexible source address types, such as AS numbers or prefix lengths less than host address lengths.
The value of this object cannot be changed if the value of the corresponding teTunnelRowStatus object is 'active'. "
The type of this address is determined by the value of the corresponding teTunnelSourceAddressType.
Note that the source and destination addresses of a Tunnel can be different address types.
The value of this object cannot be changed if the value of the corresponding teTunnelRowStatus object is 'active'. "
"The type of Traffic Engineered Tunnel hop address for the destination of this Tunnel.
The value of this object cannot be changed if the value of the corresponding teTunnelRowStatus object is 'active'. "
The type of this address is determined by the value of the corresponding teTunnelDestinationAddressType.
Note that source and destination addresses of a Tunnel can be different address types.
The value of this object cannot be changed if the value of the corresponding teTunnelRowStatus object is 'active'. "
The operational state of the Tunnel."
The value of sysUpTime on the most recent occasion at which any one or more of this tunnel's counters suffered a discontinuity.
The relevant counters are teTunnelOctets, teTunnelPackets, teTunnelLPOctets, and teTunnelLPPackets.
If no such discontinuities have occurred since the last re initialization of the local management subsystem then this object contains a zero value. "
"The number of octets that have been forwarded over the Tunnel.
Discontinuities in the value of this counter can occur at re initialization of the management system, and at other times, as indicated by the value of teTunnelDiscontinuityTimer. "
"The number of packets that have been forwarded over the Tunnel.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times, as indicated by the value of teTunnelDiscontinuityTimer. "
"The number of octets that have been forwarded over the Tunnel.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times, as indicated by the value of teTunnelDiscontinuityTimer. "
{ teTunnelEntry 14 } teTunnelLPPackets OBJECT TYPE SYNTAX
"The number of packets that have been forwarded over the Tunnel.
Discontinuities in the value of this counter can occur at re initialization of the management system and at other times, as indicated by the value of teTunnelDiscontinuityTimer. "
The age (i.e., time from creation of this conceptual row till now) of this Tunnel in hundredths of a second.
Note that because TimeTicks wrap in about 16 months, this value is best used in interval measurements. "
"The total time in hundredths of a second that this Tunnel has been operational.
Note that because TimeTicks wrap in about 16 months, this value is best used in interval measurements.
An example of usage of this object would be to compute the percentage up time over a period of time by obtaining values of teTunnelAge and teTunnelTimeUp
at two points in time and computing the following ratio: ((teTunnelTimeUp2 teTunnelTimeUp1)/ (teTunnelAge2 teTunnelAge1))
In doing so, the management station must account for wrapping of the values of teTunnelAge and teTunnelTimeUp between the two measurements. "
"The total time in hundredths of a second that this Tunnel's primary path has been operational.
Note that because TimeTicks wrap in about 16 months, this value is best used in interval measurements.
An example of usage of this field would be to compute what percentage of time that a TE Tunnel was on the primary path over a period of time by computing (
In doing so, the management station must account for wrapping of the values of teTunnelPrimaryTimeUp and teTunnelTimeUp between the two measurements. "
{ teTunnelEntry 18 } teTunnelTransitions OBJECT TYPE SYNTAX
"The number of operational state transitions (up   down and down   up) this Tunnel has undergone. "
"The time in hundredths of a second since the last operational state transition occurred on this Tunnel.
Note that if the last transition was over 16 months ago, this value will be inaccurate. "
"The number of path changes this Tunnel has had."
"The time in hundredths of a second since the last path change occurred on this Tunnel.
Note that if the last transition was over 16 months ago, this value will be inaccurate.
Path changes may be caused by network events or by reconfiguration that affects the path. "
"The number of standby paths configured for this Tunnel. "
"The number of operational paths for this Tunnel.
This includes the path currently active, as well as operational standby paths. "
Each Traffic Tunnel can have zero or more Traffic Paths.
As a Traffic Path can only exist over an existing Traffic Tunnel, all tePathEntries with a value of n for teTunnelIndex MUST be removed by the implementation when the corresponding teTunnelEntry with a value of n for teTunnelIndex is removed.
An index that uniquely identifies a path within a Tunnel.
The combination of <teTunnelIndex, tePathIndex> thus uniquely identifies a path among all paths on this router. "
"The name of this path.
A pathName must be unique within the set of paths over a single tunnel.
If a SET request is received with a duplicate name, then the implementation MUST return an inconsistentValue error.
The value of this object cannot be changed if the value of the corresponding teTunnelRowStatus object is 'active'. "
The status of this conceptual row.
When the value of this object is 'active', then the value of tePathName cannot be changed.
All other writable objects may be changed; however, these changes may affect traffic going over the TE tunnel or require the path to be computed and/or re signaled. "
"The storage type for this conceptual row.
Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row. "
"The route that this TE path is configured to follow; i.e., an ordered list of hops.
The value of this object gives the primary index into the Hop Table.
The secondary index is the hop count in the path, so to get the route, one could get the first hop with index <tePathConfiguredRoute, 1> in the Hop Table and do a getnext to get subsequent hops. "
The configured bandwidth for this Tunnel, in units of thousands of bits per second (Kbps).
"This is a configured set of administrative groups specified as a bit vector
(i.e., bit n is 1 if group n is in the set, where n   0 is the LSB).
For each link that this path goes through, the link must have at least one of the groups specified in IncludeAny to be acceptable.
If IncludeAny is zero, all links are acceptable. "
"This is a configured set of administrative groups specified as a bit vector
(i.e., bit n is 1 if group n is in the set, where n   0 is the LSB).
For each link that this path goes through, the link must have all of the groups specified in IncludeAll to be acceptable.
If IncludeAll is zero, all links are acceptable. "
"This is a configured set of administrative groups specified as a bit vector
(i.e., bit n is 1 if group n is in the set, where n   0 is the LSB).
For each link that this path goes through, the link MUST have groups associated with it, and the intersection of the link's groups and the 'exclude' set MUST be null. "
"The setup priority configured for this path, with 0 as the highest priority and 7 as the lowest. "
"The hold priority configured for this path, with 0 as the highest priority and 7 as the lowest. "
"The set of configured properties for this path, expressed as a bit map.
For example, if the path supports 'make before break', then bit 2 is set. "
The operational status of the path: unknown: down:
Administratively set aside for testing.
Signaled but not yet carrying traffic.
Signaled and carrying traffic. "
Administratively set aside for testing. "
"The route computed for this path, perhaps using some form of Constraint based Routing.
The algorithm is implementation dependent.
This object returns the computed route as an ordered list of hops.
The value of this object gives the primary index into the Hop Table.
The secondary index is the hop count in the path, so to get the route, one could get the first hop with index <tePathComputedRoute, 1> in the Hop Table and do a getnext to get subsequent hops.
A value of zero (0) means there is no computedRoute. "
"The route actually used for this path, as recorded by the signaling protocol.
This is again an ordered list of hops; each hop is expected to be strict.
The value of this object gives the primary index into the Hop Table.
The secondary index is the hop count in the path, so to get the route, one can get the first hop with index <tePathRecordedRoute, 1> in the Hop Table and do a getnext to get subsequent hops.
A value of zero (0) means there is no recordedRoute. "
An index that identifies a list of hops.
This is the primary index to access hops. "
An index that identifies a particular hop among the list of hops for a path.
An index of i identifies the ith hop.
This is the secondary index for a hop entry. "
The status of this conceptual row.
Any field in this table can be changed, even if the value of this object is 'active'.
However, such a change may cause traffic to be rerouted or even disrupted. "
"The storage type for this conceptual row.
Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row. "
"The type of Traffic Engineered Tunnel hop Address of this hop.
The value of this object cannot be changed if the value of the corresponding tePathRowStatus object is 'active'. "
The type of this address is determined by the value of the corresponding tePathHopAddressType.
The value of this object cannot be changed if the value of the corresponding teTunnelRowStatus object is 'active'. "
This hop is a LOOSE hop.
This hop is a STRICT hop. "
"A teTunnelUp notification is generated when the Tunnel indexed by teTunnelName transitions to the 'up' state.
A tunnel is up when at least one of its paths is up.
The tePathName is the name of the path whose transition to up made the tunnel go up.
This notification MUST be limited to at most one every minute, in case the tunnel flaps up and down. "
"A teTunnelDown notification is generated when the Tunnel indexed by teTunnelName transitions to the 'down' state.
A tunnel is up when at least one of its paths is up.
The tePathName is the name of the path whose transition to down made the tunnel go down.
This notification MUST be limited to at most one every minute, in case the tunnel flaps up and down. "
The value of tePathName is the new active path.
This notification MUST be limited to at most one every minute, in case the tunnel changes quickly. "
This notification MUST be limited to at most one every minute, in case the tunnel reroutes quickly. "
teTrafficEngineeringGroup OBJECT GROUP OBJECTS { teTunnelName,
teTunnelNextPathIndex, teTunnelRowStatus, teTunnelStorageType, teTunnelSourceAddressType, teTunnelSourceAddress, teTunnelDestinationAddressType, teTunnelDestinationAddress, teTunnelState, teTunnelDiscontinuityTimer, teTunnelOctets, teTunnelPackets, teTunnelLPOctets, teTunnelLPPackets, teTunnelAge, teTunnelTimeUp, teTunnelPrimaryTimeUp, teTunnelTransitions, teTunnelLastTransition, teTunnelPathChanges, teTunnelLastPathChange, teTunnelConfiguredPaths, teTunnelStandbyPaths, teTunnelOperationalPaths, tePathBandwidth, tePathIncludeAny, tePathIncludeAll, tePathExclude, tePathSetupPriority, tePathHoldPriority, tePathProperties, tePathOperStatus, tePathAdminStatus, tePathComputedRoute, tePathRecordedRoute, teDistProtocol, teSignalingProto, teNotificationEnable, teNextTunnelIndex, teNextPathHopIndex, teAdminGroupName, teAdminGroupRowStatus, teConfiguredTunnels, teActiveTunnels, tePrimaryTunnels, tePathName, tePathType, tePathRowStatus, tePathStorageType, tePathConfiguredRoute, tePathHopRowStatus, tePathHopStorageType, tePathHopAddrType, tePathHopAddress, tePathHopType
"Notifications specified in this MIB module."
"When this MIB module is implemented without support for read create (i.e., in read only mode), then such an implementation can claim read only compliance.
Such a device can be monitored but cannot be configured with this MIB module.
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required.
An implementation is only required to support IPv4 and IPv6 host addresses."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
tePathHopAddrType MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
When this MIB module is implemented with support for read create, then the implementation can claim full compliance.
Such devices can be both monitored and configured with this MIB module.
) } DESCRIPTION "Support for notInService,
createAndWait and notReady is not required. "
WRITE SYNTAX RowStatus { active(1), notInService(2), createAndGo(4), destroy(6
) } DESCRIPTION "Support for createAndWait and notReady is not required. "
An implementation is only required to support IPv4 and IPv6 host addresses. "
WRITE SYNTAX RowStatus { active(1), notInService(2), createAndGo(4), destroy(6
) } DESCRIPTION "Support for createAndWait and notReady is not required. "
WRITE SYNTAX RowStatus { active(1), notInService(2), createAndGo(4), destroy(6
) } DESCRIPTION "Support for createAndWait and notReady is not required. "
When this MIB module is implemented by a path computation server without support for read create (i.e., in read only mode), then the implementation can claim read only compliance.
Such a device can be monitored but cannot be configured with this MIB module.
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
teTunnelSourceAddressType MIN ACCESS   read only DESCRIPTION
"Write access is not required.
A path computation server SHOULD implement all types of tunnel source address types. "
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
tePathHopAddrType MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
) } DESCRIPTION "Support for notInService, createAndWait, and notReady is not required.
WRITE SYNTAX RowStatus { active(1), notInService(2), createAndGo(4), destroy(6
) } DESCRIPTION "Support for createAndWait and notReady is not required. "
An implementation of a path computation server SHOULD support all types of tunnel source address types. "
WRITE SYNTAX RowStatus { active(1), notInService(2), createAndGo(4), destroy(6
) } DESCRIPTION "Support for createAndWait and notReady is not required. "
WRITE SYNTAX RowStatus { active(1), notInService(2), createAndGo(4), destroy(6
) } DESCRIPTION "Support for createAndWait and notReady is not required. "
This MIB module relates to the configuration and management of Traffic Engineering tunnels.
The unauthorized manipulation of fields in the tables teAdminGroupTable, teTunnelTable, tePathTable, and tePathHopTable may lead to tunnel flapping, tunnel paths being changed, or traffic being disrupted.
In addition, if these tables are read by unauthorized parties, the information can be used to trace traffic patterns, traffic volumes, and tunnel paths.
This may be considered proprietary and confidential information by some providers.
There are a number of management objects defined in this MIB module with a MAX ACCESS clause of read write and/or read create.
Such objects may be considered sensitive or vulnerable in some network environments.
The support for SET operations in a non secure environment without proper protection can have a negative effect on network operations.
These are the tables and objects and their sensitivity/vulnerability:
teAdminGroupTable: Changing this will affect the semantics of include and exclude constraints, and thus traffic takes unintended routes.
Changing this affects many properties of traffic tunnels.
Changing this affects the constraints (including bandwidth) of tunnel paths, as well as the status of the path.
Changing this affects the route followed by a traffic tunnel path.
Some of the readable objects in this MIB module (i.e., objects with a MAX ACCESS other than not accessible) may be considered sensitive or vulnerable in some network environments.
It is thus important to control
even GET and/or NOTIFY access to these objects and possibly to even encrypt the values of these objects when sending them over the network via SNMP.
These are the tables and objects and their sensitivity/vulnerability:
Describes tunnel endpoints and traffic volumes.
SNMP versions prior to SNMPv3 did not include adequate security.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and
the objects in this MIB module.
It is RECOMMENDED that implementers consider the security features as provided by the SNMPv3 framework (see [9], section 8), including full support for the SNMPv3 cryptographic mechanisms (for authentication and privacy).
Further, deployment of SNMP versions prior to SNMPv3 is NOT RECOMMENDED.
Instead, it is RECOMMENDED to deploy SNMPv3 and to enable cryptographic security.
It is then a customer/operator responsibility to ensure that the SNMP entity giving access to an instance of this MIB module is properly configured to give access to the objects only to those principals (users) that have legitimate rights to indeed GET or SET
