- title: __initial_text__
  contents:
  - "INWG Experiments Note 1\n                   A Protocol Experiment\n         \
    \              Eric R. Mader\n                     William W. Plummer\n      \
    \              Raymond S. Tomlinson\nI.  Introduction\nIn early February, 1974\
    \ the main line  printer  on  BBN's  TENEX  system\nfailed and it was decided\
    \ to use the PDP-11 line printer via the ARPANET\nboth for the direct purpose\
    \ of obtaining listings and also the  indirect\npurpose of studying network protocols.\n\
    II.  The Basic Protocol\nThe design was based on the protocol described by Cerf\
    \ and Kahn in  INWG\nNote  #39.  Familiarity with that document is assumed.  The\
    \ following is\na brief sketch of the protocol.  Not  all  features  described\
    \  in  this\nsection have been implemented.  See Section VI.\nAt any instant,\
    \ the sender has two pointers into the stream of bytes  to\nbe  sent.   Bytes\
    \ to the left of the LEFT pointer have already been sent\nand acknowledged.  Bytes\
    \ in the \"window\"  between  the  LEFT  and  RIGHT\npointers  have  been  sent\
    \  (zero  or  more times), but no indication of\nsuccessful transmission has been\
    \ received.  Bytes to the right of  RIGHT\nremain to be considered at some time\
    \ in the future.\nIn operation the sender is constantly sending bytes from the\
    \ input  data\nstream   resulting   in   the   RIGHT   pointer   advancing.  \
    \  Positive\nacknowledgements produced by the receiver cause the  LEFT  edge \
    \ of  the\nwindow to move towards the RIGHT edge.\nLEFT and RIGHT are actually\
    \ numerical byte  positions  within  the  data\nstream.   The low order 16 bits\
    \ of RIGHT are sent with each message as a\nsequence number so that the receiver\
    \ can identify which part of the data\nstream  it  is  receiving  in case messages\
    \ are not received in the same\norder they were transmitted.  The receiver has\
    \ a finite amount of buffer\nspace  available  in which it can reassemble an image\
    \ of the data in the\ntransmitter's window.  The receiver discards  any  messages\
    \  which  have\nsequence  numbers  outside of its buffer area.  However, messages\
    \ to the\nleft of LEFT must  be  acknowledged  even  though  they  are  discarded.\n\
    Otherwise,  a  lost  ACK  would  cause the sender to retransmit (and the\nreceiver\
    \ ingore) the message indefinitely.  Messages received  with  bad\nchecksums are\
    \ also discarded.\nthis  action  by sending an ACK (acknowledgement) message.\
    \  This message\nspecifies the sequence number of the byte it would like to receive\
    \  next\n(the  new  value of LEFT in the sender) and the current amount of buffer\n\
    space it has available (new maximum window width in  the  sender).   The\nsender\
    \  ignores  ACK's  to  the  left of LEFT and to the right of RIGHT.\nThus, both\
    \ the sender and  receiver  are  prepared  to  handle  multiple\ncopies of messages.\n\
    Failures such as messages  with  bad  checksums,  messages  lost  during\ntransmission\
    \  (data  and ACK's), and messages discarded due to sequences\nnumbers which were\
    \ apparently out of range, all manifest  themselves  to\nthe sender as a dropped\
    \ ACK.  A dropped ACK will cause the sender's LEFT\nedge to stop advancing, leaving\
    \ the unacknowledged message at  the  left\nof the sender's window, and possibly\
    \ a corresponding hole at the left of\nthe receiver's image of the window.  Eventually,\
    \ transmission will cease\nand   a  (10  second)  timeout  will  trigger  in \
    \ the  sender,  causing\nretransmission of all data within the window.  Note that\
    \ at the  instant\nof  a  timeout,  there is no guarantee that the un-ACK'd message\
    \ will be\nexactly at the  left  edge  of  the  window  or  that  it  is  the\
    \  only\nunacknowledged  message  in  the  window.  Retransmissions are likely\
    \ to\ncause the receiver to see data that it has seen  before,  but  duplicate\n\
    messages will be discarded due to sequence number considerations.\nIII.  \"Say\
    \ Again\"\nAn extension to the INWN #39 protocol  which  was  implemented  was\
    \  the\nability to let the receiver force retransmission of the entire window\
    \ by\nturning on a flag in any message back to the sender.  This is useful  in\n\
    cases  where  the receiver believes that a data message has been dropped\nand\
    \ it wants to force retransmission rather than wait for a  timeout  in\nthe sender.\
    \  Clearly, this relies on the network to preserve ordering of\nthe messages.\
    \  Also, it is not useful if the error rate is high  because\nthe  whole  window\
    \  is retransmitted in order to get retransmission of a\nsingle message or two.\n\
    IV.  Establishing an Association\nIn the experiment two flags were used to establish\
    \ an association.  FRST\n(FiRST  flag)  was  the equivalent of SYN described in\
    \ INWG Note #39 and\nserved to identify the first message of an association. \
    \ This instructed\nthe  receiver  to  accept  the  sequence  number  in  the \
    \ message  as a\ndefinition  of  the  starting  point  of  sequence   numbers\
    \   for   the\nassociation.\nThe second flag is a receiver-to-sender  flag  called\
    \  HUH  which  is  a\nrequest  by the receiver for a definition of the sequence\
    \ numbers.  Upon\nthat it knows is not part of an association.\nV.  A Problem\n\
    A  severe  problem  uncovered  with  the  protocol  was  concerned  with\nestablishing\
    \  an  association.   If  the  PDP-11 (receiver) was reloaded\nwhile the spooler\
    \ (sender) was running, the first few pages of the  data\nstream  were  printed\
    \  about  six  times  before  normal  operation  was\nestablished.  The cause\
    \ was traced to the following sequence of actions:\n          1.   The  sender\
    \  would  be  in  a  loop,   timing   out   and\n          retransmitting because\
    \ the receiver had not responded.\n          2.  Upon being restarted,  the  receiver\
    \  would  see  a  whole\n          window's worth of messages, and respond to\
    \ each with an HUH.\n          3.  For each HUH the sender would reset the window\
    \ and include\n          a  FRST  flag  with  the  first  message  in each of\
    \ the (six)\n          retransmissions.\n          4.  The receiver would see\
    \ the  first  message  of  the  first\n          retransmission  containing a\
    \ FRST, accept the sequence number,\n          and print the data  from  that\
    \  and  the  following  messages.\n          Then,  another  message  containing\
    \ the FRST flag would appear\n          and the cycle would repeat (five more\
    \ times).  Note  that  the\n          ACK's  generated in the repetitions were\
    \ ignored by the sender\n          because they were to the left of the window.\n\
    As a \"cure\" for the above the receiver  program  was  modified  so  that\nafter\
    \  sending  an  HUH, messages are ignored until one with a FRST flag\nappears.\
    \  This solution is unacceptable in general because it leaves the\nreceiver  port\
    \  useless  if either the message containing the HUH or the\nresponse gets lost\
    \ in transmission.  Although  a  timeout  was  used  to\nguard against this, the\
    \ timeout cannot be trusted because it might cause\ntwo messages with FRST flags\
    \ to be received -- just the problem which is\nbeing avoided!\nAn alternate cure\
    \ which does not depend on the network  to  be  lossless\nwould  be  to  modify\
    \  the  sender  to  respond to a HUH by ignoring all\nmessages for at least  a\
    \  round  trip  delay  time  before  sending  its\nresponse  containing  the \
    \ FRST  flag.  This results in having to define\nVI.  Features not Investigated\n\
    None of the programs  to  date  have  supported  any  of  the  following\nfeatures:\n\
    \          1.  Window size control.  The window size was a constant (2048\n  \
    \        bytes).  In a future experiment the window size will be varied\n    \
    \      not only by indications of buffer space in the  receiver,  but\n      \
    \    also as a function of estimated transit time.  (see below).\n          2.\
    \  Reassembly.  Since reassembly is conceptually easy, it  is\n          likely\
    \ to be one of the first extensions.  A message corrupter\n          will be included\
    \ in the receiver to test  the  functioning  of\n          the reassembly mechanism.\n\
    \          3.  Expanded Internetwork Addresses\n          4.  Multiple Associations\n\
    \          5.  Reliable Making and Breaking of Associations\nVII.  Implementations\
    \ Notes\nThe sender involves approximately ten pages of  assembly  code  for \
    \ the\nnetwork  message interface.  Two processes are involved: one which fills\n\
    a buffer by reading the input data stream, and a  second  process  which\nsends\
    \  network  messages  from the buffer and processes replies from the\nreceiver.\
    \  The two processes are joined by a coroutine mechanism, but in\nthe future will\
    \ be two parallel TENEX processes.\nThe receiver program consists of approximately\
    \ four pages of  BCPL  code\nin  addition  to IO device drivers and routines which\
    \ implement queueing\nprimitives.\nEach message contained between zero and 255\
    \ bytes of data arranged (as a\ncoding  convenience) in a way which is directly\
    \ compatible with the BCPL\nstring handling routines.  Messages contained a single\
    \ byte of  checksum\nwhich was the low eight bits of the twos complement negation\
    \ of the twos\ncomplement sum of all other bytes in the  message.   We  recommend\
    \  that\nsome  more  reliable  checksum  function be employed in the future; even\n\
    using eight-bit ones complement arithmetic would be better.\nVIII.  Simple Rate\
    \ Calculations\nIf we assume that an active association has reached steady  state,\
    \  that\nprocessing delays are lumped into the transit time T, and that there\
    \ are\nno errors, then the maximum data rate may be calculated as follows.\nAssume\
    \ the sequence numbers being passed by the RIGHT pointer  are  some\nfunction\
    \  of  time, R(t).  Messages received by the receiver will be the\nsame function\
    \ of time but delayed T (a  transit  time)  seconds.   Since\nprocessing  time\
    \  is  zero,  the  acknowledgments  will  bear  this same\nfunction, R(t-T). \
    \ Acknowlegements received  by  the  sender  will  have\nsequence numbers R(t-2T).\n\
    Acknowledgements at the sender determine the LEFT pointer, L(t).   Also,\nit \
    \ is known that R(t) is ahead of L(t) by the width of the window which\nis a constant\
    \ in steady state.  Thus, we have the two relations:\n                    L(t)\
    \ = R(t-2T)\n                    L(t) = R(t) - W\nNow, let R(t) = Bt, i.e., sequence\
    \ numbers are increasing linearly  with\ntime.  (Microscopically, short bursts\
    \ will alternate with longer periods\nof inactivity, but the average bandwidth\
    \ will be B.)  The  result  under\nthe assumptions is that the bandwidth is:\n\
    \                    B = W/2T .\nThat is, the bandwidth in bytes per second  is\
    \  just  the  steady  state\nwindow width divided by the round trip delay time.\
    \  Conversely, the aboe\nrelation can be determine the buffer sized needed: in\
    \  oreder  for  thee\nreceiver  to  guarantee  to  accept information that was\
    \ transmitted, it\nmust supply buffering equal to (or greater than) the window\
    \  size.   The\nwindow size must be equal to or greater than the desired bandwidth\
    \ times\nthe round-trip delay time, i.e.  equal to the number of  messages  in\
    \  a\nround-trip \"pipeline\".\nThe bandwidth in the presence of a relatively\
    \  low  error  rate  may  be\ncalculated.   Assume  that  B  and  W  are  expressed\
    \ in terms of (full)\nmessages rather than byte numbers.  Each error has two effects:\
    \  a  time\nout  delay  of D seconds and retransmission of W messages.  So, the\
    \ time\nQ(M,N) required to transmit M messages burdened by N errors is  the  sum\n\
    of  the  time  to transmit the data once, N*D seconds of time out delay,\nand\
    \ the time to transmit the window N more times.\n                    Q(M,N) =\
    \ (2T/W)*M + N*D + N*2T\nDividing by M to get time per message and multiplying\
    \ the last  term  by\n(W/W):\n                    Q(E) = (2T/W)*(1 + EW) + ED\n\
    \                    B(E) = 1/[(2T/W)(1+EW) + ED]\nThe advantage to using the\
    \ \"say again\" mechanism (Section III.) can  now\nbe seen: it forces D to be\
    \ zero, allowing a reasonable average data rate\nin the presence of errors.  Note\
    \ the effect of a 10 second time out on a\nnetwork  with  an  E  of 0.01, assuming\
    \ W to be 20 messages and T of 0.5\nsecond.  B(D=10) is 6.7, but with forced retransmission,\
    \ B(D=0) is 20.\nIX.  A Sequence Number Consideration\nIn order to reject duplicate\
    \ messages, sequence numbers must  contain  a\nsufficient  number  of  bits such\
    \ that it is impossible to cycle through\nmore than half the sequence  number\
    \  space  in  a  message  lifetime  at\nmaximum transmission rate.  Assuming a\
    \ 1 MegaByte per second network and\na maximum lifetime of 500 seconds, the sequence\
    \  number  field  of  each\nmessage must be capable of holding the number 2*500*10**6\
    \ which is 10**9\nor about 2**30.  Thus,  a  32-bit  (4-byte)  sequence  number\
    \  field  is\nrecommended.\nX.  Additional Control Functions\nIn response to an\
    \ attempt to establish an association (SYN) it  is  felt\nthat the receiver should\
    \ be able to deny the attempt (RELease) in one of\nthe following three ways:\n\
    \          REJECT.  (I'm busy.  Try again later.)\n          ABORT.  (I don't\
    \ understand what you are sending.\n                    (Bad port, etc.))\n  \
    \        ABNORMAL (SYN arrived on a established connection.)\n               \
    \     (Receiver breaks connection and issues this REL.)\nDuring an established\
    \ association, the sender should be able to  RELease\nthe association in either\
    \ of these ways:\n          DONE.  (I'm done sending to you.)\n          GAG.\
    \  (Stop.  You are sending garbage (ACK's).)\nThese may be coded as combinations\
    \  of  bits  in  the  FLAGS  which  are\nconvenient for programming.\n"
