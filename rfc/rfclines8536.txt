Abstract This document specifies the Time Zone Information Format (TZif) for representing and exchanging time zone information, independent of any particular service or protocol.
Two media types for this format are also defined.
Introduction Time zone data typically consists of offsets from universal time (UT), daylight saving transition rules, one or more local time designations (acronyms or abbreviations), and optional leap second adjustments.
One such format for conveying this information is iCalendar [RFC5545].
It is a text based format used by calendaring and scheduling systems.
This document specifies the widely deployed Time Zone Information Format (TZif).
It is a binary format used by most UNIX systems to calculate local time.
This format was introduced in the 1980s and has evolved since then into multiple upward compatible versions.
There is a wide variety of interoperable software capable of generating and reading files in this format [tz link].
This specification does not define the source of the data assembled into a TZif file.
One such source is the IANA hosted time zone database [RFC6557].
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
The following terms are used in this document (see "Sources for Time Zone and Daylight Saving Time Data" [tz link] for more detailed information about civil timekeeping data and practice):
The basis for civil time since 1960.
It is approximately equal to mean solar time at the prime meridian (0 degrees longitude).
The time according to a location's law or practice, when adjusted as necessary from standard time.
The adjustment may be positive or negative, and the amount of adjustment may vary depending on the date and time; the TZif format even allows the adjustment to be zero, although this is not common practice.
The time standard based on atomic clocks since 1972.
It is equal to UTC but without leap second adjustments.
The value of TAI UTC 10 for timestamps after the first leap second, and zero for timestamps before that.
The expression "TAI UTC 10" comes from the fact that TAI UTC was defined to be 10 just prior to the first leap second in 1972, so clocks with leap seconds have a zero LEAPCORR before the first leap second.
Local Time:  Civil time for a particular location.
Its offset from universal time can depend on the date and time of day.
01 00:00:00 UTC, the basis for absolute timestamps in this document.
The time according to a location's law or practice, unadjusted for Daylight Saving Time.
Time Change:  A change to civil timekeeping practice.
It occurs when one or more of the following happen simultaneously: 1.
a change in UT offset 2.
a change in whether daylight saving time is in effect 3.
a change in time zone abbreviation 4.
a leap second (i.e., a change in LEAPCORR)
The Time Zone Data Distribution Service (TZDIST) [RFC7808] defines "Time zone data" as "data that defines a single time zone, including an identifier, UTC offset values, DST rules, and other information such as time zone abbreviations."
The interchange format defined in this document is one such form of time zone data.
The moment of occurrence of a time change that is not a leap second.
It is identified with a signed integer count of UNIX leap time seconds since the POSIX epoch.
The basis of civil time.
This is the principal form of the mean solar time at the prime meridian (0 degrees longitude) for timestamps before UTC was introduced in 1960 and is UTC for timestamps thereafter.
Although UT is sometimes called "UTC" or "GMT" in other sources, this specification uses the term "UT" to avoid confusion with UTC or with GMT.
The time as returned by the time
() function provided by the C programming language (see Section 3 of the "System Interfaces" volume of [POSIX]).
This is an integer number of seconds since the POSIX epoch, not counting leap seconds.
As an extension to POSIX, negative values represent times before the POSIX epoch, using UT.
UNIX Leap Time:  UNIX time plus all preceding leap second corrections.
For example, if the first leap second record in a TZif file occurs at 1972 06 30 23:59:60 UTC, the UNIX leap time for the timestamp 1972
07 01 00:00:00 UTC would be 78796801, one greater than the UNIX time for the same timestamp.
Similarly, if the second leap second record occurs at 1972 12 31 23:59:60 UTC, it accounts for the first leap second, so the UNIX leap time of 1972 12 31
23:59:60 UTC would be 94694401, and the UNIX leap time of 1973 01 01 00:00:00
If a TZif file specifies no leap second records, UNIX leap time is equal to UNIX time.
Another name for local time; short for "wall clock time".
The Time Zone Information Format (TZif)
The Time Zone Information Format begins with a fixed 44 octet version 1 header (Section 3.1) containing a field that specifies the version of the file's format.
N can read version N 1 files without too much trouble; data specific to version N 1 either appears after version N data so that earlier version readers can easily ignore later version data they are not designed for, or it appears as a minor extension to version
that version N readers are likely to tolerate well.
The version 1 header is followed by a variable length version 1 data block (Section 3.2) containing four octet (32 bit) transition times and leap second occurrences.
These 32 bit values are limited to representing time changes from 1901 12 13 20:45:52 through 2038 01
19 03:14:07 UT, and the version 1 header and data block are present only for backward compatibility with obsolescent readers, as discussed in Common Interoperability Issues (Appendix A).
Version 1 files terminate after the version 1 data block.
Files from versions 2 and 3 extend the format by appending a second 44 octet version 2  header, a variable length version 2  data block containing eight octet (64 bit) transition times and leap second occurrences, and a variable length footer (Section 3.3).
These 64 bit values can represent times approximately 292 billion years into the past or future.
All multi octet integer values MUST be stored in network octet order format (high order
octet first, otherwise known as big endian), with all bits significant.
Signed integer values MUST be represented using two's complement.
A TZif file is structured as follows:
[unused reserved for future use]
The fields of the header are defined as follows:
The four octet ASCII [RFC20] sequence "TZif"
(0x54 0x5A 0x69 0x66), which identifies the file as utilizing the Time Zone Information Format.
An octet identifying the version of the file's format.
The value MUST be one of the following: NUL (0x00)  Version 1
The file contains only the version 1 header and data block.
Version 1 files MUST NOT contain a version 2  header, data block, or footer. '
The file MUST contain the version 1 header and data block, a version 2  header and data block, and a footer.
The TZ string in the footer (Section 3.3), if nonempty, MUST strictly adhere to the requirements for the TZ environment variable as defined in Section 8.3 of the "Base Definitions" volume of [POSIX] and MUST encode the POSIX portable character set as ASCII. '
The file MUST contain the version 1 header and data block, a version 2  header and data block, and a footer.
The TZ string in the footer (Section 3.3), if nonempty, MUST conform to POSIX requirements with ASCII encoding, except that it MAY use the TZ string extensions described below (Section 3.3.1).
A four octet unsigned integer specifying the number of UT/ local indicators contained in the data block   MUST either be zero or equal to "typecnt".
A four octet unsigned integer specifying the number of standard/wall indicators contained in the data block   MUST either be zero or equal to "typecnt".
A four octet unsigned integer specifying the number of leap second records contained in the data block.
A four octet unsigned integer specifying the number of transition times contained in the data block.
typecnt:  A four octet unsigned integer specifying the number of local time type records contained in the data block   MUST NOT be zero.
(Although local time type records convey no useful information in files that have nonempty TZ strings but no transitions, at least one such record is nevertheless required because many TZif readers reject files that have zero time types.)
A four octet unsigned integer specifying the total number of octets used by the set of time zone designations contained in the data block MUST NOT be zero.
The count includes the trailing NUL (0x00) octet at the end of the last time zone designation.
Although the version 1 and 2  headers have the same format, magic number, and version fields, their count fields may differ, because the version 1 data can be a subset of the version 2  data.
Data Block A TZif data block consists of seven variable length elements, each of which is a series of items.
The number of items in each series is determined by the corresponding count field in the header.
The total length of each element is calculated by multiplying the number of items by the size of each item.
Therefore, implementations that do not wish to parse or use the version 1 data block can calculate its total length and skip directly to the header of the version 2  data block.
In the version 1 data block, time values are 32 bits (TIME SIZE   4 octets).
In the version 2  data block, present only in version 2 and 3 files, time values are 64 bits (TIME SIZE   8 octets).
The data block is structured as follows (the lengths of multi octet fields are shown in parentheses):
The elements of the data block are defined as follows:
transition times:  A series of four  or eight octet UNIX leap time values sorted in strictly ascending order.
Each value is used as a transition time at which the rules for computing local time may change.
The number of time values is specified by the "timecnt" field in the header.
Each time value SHOULD be at least  2  59.
( 2  59 is the greatest negated power of 2 that predates the Big Bang, and avoiding earlier timestamps works around known TZif reader bugs relating to outlandishly negative timestamps.)
A series of one octet unsigned integers specifying the type of local time of the corresponding transition time.
These values serve as zero based indices into the array of local time type records.
The number of type indices is specified by the "timecnt" field in the header.
Each type index MUST be in the range [0, "typecnt" 1].
local time type records:  A series of six octet records specifying a local time type.
The number of records is specified by the "typecnt" field in the header.
A four octet signed integer specifying the number of seconds to be added to UT in order to determine local time.
The value MUST NOT be  2  31 and SHOULD be in the range [ 89999, 93599]
(i.e., its value SHOULD be more than  25 hours and less than 26 hours).
2  31 allows 32 bit clients to negate the value without overflow.
Restricting it to [ 89999, 93599] allows easy support by implementations that already support the POSIX required range [ 24:59:59, 25:59:59].
(is)dst:  A one octet value indicating whether local time should be considered Daylight Saving Time (DST).
The value MUST be 0 or 1.
A value of one (1) indicates that this type of time is DST.
A value of zero (0) indicates that this time type is standard time.
(desig)idx:  A one octet unsigned integer specifying a zero based index into the series of time zone designation octets, thereby selecting a particular designation string.
Each index MUST be in the range [0, "charcnt" 1]; it designates the NUL terminated string of octets starting at position "idx" in the time zone designations.
(This string MAY be empty.)
A NUL octet MUST exist in the time zone designations at or after position "idx".
A series of octets constituting an array of NUL terminated (0x00) time zone designation strings.
The total number of octets is specified by the "charcnt" field in the header.
Note that two designations MAY overlap if one is a suffix of the other.
The character encoding of time zone designation strings is not specified; however, see Section 4 of this document.
A series of eight  or twelve octet records specifying the corrections that need to be applied to UTC in order to determine TAI.
The records are sorted by the occurrence time in strictly ascending order.
The number of records is specified by the "leapcnt" field in the header.
Each record has one of the following structures (the lengths of multi octet fields are shown in parentheses):
A four  or eight octet UNIX leap time value specifying the time at which a leap second correction occurs.
The first value, if present, MUST be nonnegative, and each later value MUST be at least 2419199 greater than the previous value.
(This is 28 days' worth of seconds, minus a potential negative leap second.)
A four octet signed integer specifying the value of LEAPCORR on or after the occurrence.
The correction value in the first leap second record, if present, MUST be either one (1) or minus one ( 1).
The correction values in adjacent leap
second records MUST differ by exactly one (1).
The value of LEAPCORR is zero for timestamps that occur before the occurrence time in the first leap second record (or for all timestamps if there are no leap second records).
A series of one octet values indicating whether the transition times associated with local time types were specified as standard time or wall clock time.
Each value MUST be 0 or 1.
A value of one (1) indicates standard time.
The value MUST be set to one (1) if the corresponding UT/local indicator is set to one (1).
A value of zero (0) indicates wall time.
The number of values is specified by the "isstdcnt" field in the header.
If "isstdcnt" is zero (0), all transition times associated with local time types are assumed to be specified as wall time.
A series of one octet values indicating whether the transition times associated with local time types were specified as UT or local time.
Each value MUST be 0 or 1.
A value of one (1) indicates UT, and the corresponding standard/wall indicator MUST also be set to one (1).
A value of zero (0) indicates local time.
The number of values is specified by the "isutcnt" field in the header.
If "isutcnt" is zero (0), all transition times associated with local time types are assumed to be specified as local time.
The type corresponding to a transition time specifies local time for timestamps starting at the given transition time and continuing up to, but not including, the next transition time.
Local time for timestamps before the first transition is specified by the first time type (time type 0).
Local time for timestamps on or after the last transition is specified by the TZ string in the footer (Section 3.3) if present and nonempty; otherwise, it is unspecified.
If there are no transitions, local time for all timestamps is specified by the TZ string in the footer if present and nonempty; otherwise, it is specified by time type 0.
A given pair of standard/wall and UT/local indicators is used to designate whether the corresponding transition time was specified as UT, standard time, or wall clock time.
Note that there are only three combinations of the two indicators, given that the standard/ wall value MUST be one (1) if the UT/local value is one (1).
This information can be useful if the transition times in a TZif file need to be transformed into transitions appropriate for another time zone (e.g. when calculating transition times for a simple POSIX TZ string such as "AKST9AKDT").
In order to eliminate unused space in a TZif file, every nonzero local time type index SHOULD appear at least once in the transition type array.
Likewise, every octet in the time zone designations array SHOULD be used by at least one time type record.
The elements of the footer are defined as follows:
NL:  An ASCII new line character (0x0A).
TZ string:  A rule for computing local time changes after the last transition time stored in the version 2  data block.
The string is either empty or uses the expanded format of the "TZ" environment variable as defined in Section 8.3 of the "Base Definitions" volume of [POSIX] with ASCII encoding, possibly utilizing extensions described below (Section 3.3.1) in version 3 files.
If the string is empty, the corresponding information is not available.
If the string is nonempty and one or more transitions appear in the version 2  data, the string MUST be consistent with the last version 2  transition.
In other words, evaluating the TZ string at the time of the last transition should yield the same time type as was specified in the last transition.
The TZif footer is present only in version 2 and 3 files, as the obsolescent version 1 format was designed before the need for a footer was apparent.
The TZ string in a version 3 TZif file MAY use the following extensions to POSIX TZ strings.
These extensions are described using the terminology of Section 8.3 of the "Base Definitions" volume of [POSIX].
The hours part of the transition times may be signed and range from  167 through 167
( 167 <  hh <  167) instead of the POSIX  required unsigned values from 0 through 24.
This represents a time zone that observes daylight saving time from 22:00 on the day before March's last Sunday until 23:00 on the day before October's last Sunday.
Standard time is 3 hours west of UT and is abbreviated " 03"; daylight saving time is 2 hours west of UT and is abbreviated " 02".
DST is considered to be in effect all year if it starts January 1 at 00:00 and ends December 31 at 24:00 plus the difference between daylight saving and standard time, leaving no room for standard time in the calendar.
This represents a time zone that observes daylight saving time all year.
It is 4 hours west of UT and is abbreviated "EDT".
The following practices help ensure the interoperability of TZif applications.
Version 1 files are considered a legacy format and SHOULD NOT be generated, as they do not support transition times after the year 2038.
Implementations that only understand version 1 MUST ignore any data that extends beyond the calculated end of the version 1 data block.
Implementations SHOULD generate a version 3 file if TZ string extensions are necessary to accurately model transition times.
Otherwise, version 2 files SHOULD be generated.
The sequence of time changes defined by the version 1 header and data block SHOULD be a contiguous sub sequence of the time changes defined by the version 2  header and data block, and by the footer.
This guideline helps obsolescent version 1 readers agree with current readers about timestamps within the contiguous sub  sequence.
It also lets writers not supporting obsolescent readers use a "timecnt" of zero in the version 1 data block to save space.
This is for compatibility with POSIX requirements for time zone abbreviations.
When reading a version 2 or 3 file, implementations SHOULD ignore the version 1 header and data block except for the purpose of skipping over them.
Implementations SHOULD calculate the total lengths of the headers and data blocks and check that they all fit within the actual file size, as part of a validity check for the file.
second records are included in the TZif data as necessary (none are necessary if the file is truncated to a range that precedes the first leap second).
"application/tzif" (Section 8.1) to indicate that leap second records are not included in the TZif data; "leapcnt" in the header(s) MUST be zero (0).
Common interoperability issues and possible workarounds are described in Appendix A. 5.
Use with the Time Zone Data Distribution Service
The Time Zone Data Distribution Service (TZDIST) [RFC7808] is a service that allows reliable, secure, and fast delivery of time zone data and leap second rules to client systems such as calendaring and scheduling applications or operating systems.
A TZDIST service MAY supply time zone data to clients in the Time Zone Information Format.
Such a service MUST indicate that it supports this format by including the media type "application/tzif" (Section 8.1) in its "capabilities" response (see Section 5.1 of [RFC7808]).
A TZDIST service MAY also include the media type "application/tzif leap" (Section 8.2) in its "capabilities" response if it is able to generate TZif files containing leap second records.
A TZDIST service MUST NOT advertise the "application/tzif leap" media type without also advertising "application/tzif".
TZDIST clients MUST use the HTTP "Accept" [RFC7231] header field to indicate their preference to receive data in the "application/tzif" and/or "application/tzif leap" formats.
As described in Section 3.9 of [RFC7808], a TZDIST service MAY truncate time zone transition data.
A truncated TZif file is valid from its first and up to, but not including, its last version 2  transition time, if present.
When truncating the start of a TZif file, the service MUST supply in the version 2  data a first transition time that is the start point of the truncation range.
As with untruncated TZif files, time type 0 indicates local time immediately before the start point, and the time type of the first transition indicates local time thereafter.
When truncating the end of a TZif file, the service MUST supply in the version 2  data a last transition time that is the end point of the truncation range and MUST supply an empty TZ string.
As with untruncated TZif files with empty TZ strings, a truncated TZif file does not indicate local time after the last transition.
All represented information that falls inside the truncation range MUST be the same as that represented by a corresponding untruncated TZif file.
TZDIST clients SHOULD NOT use a truncated TZif file (as described above) to interpret timestamps outside the truncation time range.
Example TZDIST Request for TZif Data
In this example, the client checks the server for the available formats and then requests that the time zone with a specific time zone identifier be returned in Time Zone Information Format.
Note that this example presumes that the time zone context path has been discovered (see [RFC7808], Section 4.2.1) to be "/tzdist".
<< GET /tzdist/capabilities HTTP/1.1 Host: tz.example.com >> Response << HTTP/1.1 200 OK Date: Fri, 01 Jun 2018 14:52:23 GMT Content Type: application/json; charset "utf 8
tz.example.com Accept: application/tzif >> Response << HTTP/1.1
200 OK Date: Fri, 01 Jun 2018 14:52:24
GMT Content Type: application/tzif Content Length: xxxx ETag: "123456789 000 111" TZif2...
[binary data without leap second records]...
The Time Zone Information Format contains no executable code, and it does not define any extensible areas that could be used to store such code.
TZif contains counted arrays of data elements.
All counts should be checked when processing TZif objects, to guard against references past the end of the object.
TZif provides no confidentiality or integrity protection.
Time zone information is normally public and does not call for confidentiality protection.
Since time zone information is used in many critical applications, integrity protection may be required and must be provided externally.
The Time Zone Information Format contains publicly available data, and it does not define any extensible areas that could be used to store private data.
As discussed in Section 9 of [RFC7808], transmission of time zone data over an insecure communications channel could leak the past, current, or future location of a device or user.
As such, TZif data transmitted over a public communications channel MUST be protected with a confidentiality layer such as that provided by Transport Layer Security (TLS) [RFC8446].
This document defines two media types [RFC6838] for the exchange of data utilizing the Time Zone Information Format.
application Subtype name:  tzif Required parameters:  none Optional parameters:  none Encoding considerations:  binary Security considerations:
See Section 6 of RFC 8536.
See Section 4 of RFC 8536.
Applications that use this media type:
This media type is designed for widespread use by applications that need to use or exchange time zone information, such as the Time Zone Information Compiler (zic) [ZIC] and the GNU C Library [GNU C].
The Time Zone Distribution Service [RFC7808] can directly use this media type.
A Additional information: Magic number(s):
The first 4 octets are 0x54, 0x5A, 0x69, 0x66 File extensions(s):
code(s):  N/A Person & email address to contact for further information: Time Zone Database mailing list <tz@iana.org>
Intended usage:  COMMON Restrictions on usage:  N/
A Author:  See the "Authors' Addresses" section of RFC 8536.
application/tzif leap Type name:  application Subtype name:  tzif leap
none Encoding considerations:  binary Security considerations:
See Section 6 of RFC 8536.
See Section 4 of RFC 8536.
Applications that use this media type:
This media type is designed for widespread use by applications that need to use or exchange time zone information, such as the Time Zone Information Compiler (zic) [ZIC] and the GNU C Library [GNU C].
The Time Zone Distribution Service [RFC7808] can directly use this media type.
A Additional information: Magic number(s):
The first 4 octets are 0x54, 0x5A, 0x69, 0x66 File extensions(s):
code(s):  N/A Person & email address to contact for further information: Time Zone Database mailing list <tz@iana.org>
Intended usage:  COMMON Restrictions on usage:  N/
A Author:  See the "Authors' Addresses" section of RFC 8536.
Change controller:  IETF Appendix A.  Common Interoperability Issues
This section documents common problems in implementing this specification.
Most of these are problems in generating TZif files for use by readers conforming to predecessors of this specification [EGGERT TZ].
The goals of this section are: 1.
to help TZif writers output files that avoid common pitfalls in older or buggy TZif readers, 2.
to help TZif readers avoid common pitfalls when reading files generated by future TZif writers, and 3.
to help any future specification authors see what sort of problems arise when the TZif format is changed.
When new versions of the TZif format have been defined, a design goal has been that a reader can successfully use a TZif file even if the file is of a later TZif version than what the reader was designed for.
When complete compatibility was not achieved, an attempt was made to limit glitches to rarely used timestamps and allow simple partial workarounds in writers designed to generate new version data useful even for older version readers.
This section attempts to document these compatibility issues and workarounds, as well as documenting other common bugs in readers.
Interoperability problems with TZif include the following:  Some readers examine only version 1 data.
As a partial workaround, a writer can output as much version 1 data as possible.
However, a reader should ignore version 1 data and use version 2  data, even if the reader's native timestamps have only 32 bits.
Some readers designed for version 2 might mishandle timestamps after a version 3 file's last transition, because they cannot parse extensions to POSIX in the TZ like string.
As a partial workaround, a writer can output more transitions than necessary, so that only far future timestamps are mishandled by version 2 readers.
Some readers designed for version 2 do not support permanent daylight saving time
e.g., a TZ string "EST5EDT,0/0,J365/25" denoting permanent Eastern Daylight Time ( 04).
As a partial workaround, a writer can substitute standard time for the next time zone east   e.g., "AST4" for permanent Atlantic Standard Time ( 04).
Some readers ignore the footer and instead predict future timestamps from the time type of the last transition.
As a partial workaround, a writer can output more transitions than necessary.
Some readers do not use time type 0 for timestamps before the first transition, in that they infer a time type using a heuristic that does not always select time type 0.
As a partial workaround, a writer can output a dummy (no op) first transition at an early time.
Some readers mishandle timestamps before the first transition that has a timestamp not less than  2  31.
Readers that support only 32 bit timestamps are likely to be more prone to this problem, for example, when they process 64 bit transitions, only some of which are representable in 32 bits.
As a partial workaround, a writer can output a dummy transition at timestamp  2  31.
Some readers mishandle a transition if its timestamp has the minimum possible signed 64 bit value.
Timestamps less than  2  59 are not recommended.
Many readers mishandle time zone abbreviations that contain non  ASCII characters.
These characters are not recommended.
These abbreviations are not recommended.
Some readers mishandle TZif files that specify daylight saving time UT offsets that are less than the UT offsets for the corresponding standard time.
These readers do not support locations like Ireland, which uses the equivalent of the POSIX TZ string "IST 1GMT0,M10.5.0,M3.5.0/1", observing standard time (IST,  01) in summer and daylight saving time (GMT,  00) in winter.
As a partial workaround, a writer can output data for the equivalent of the POSIX TZ string "GMT0IST,M3.5.0/1,M10.5.0", thus swapping standard and daylight saving time.
Although this workaround misidentifies which part of the year uses daylight saving time, it records UT offsets and time zone abbreviations correctly.
Some interoperability problems are reader bugs that are listed here mostly as warnings to developers of readers.
Some readers do not support negative timestamps.
Developers of distributed applications should keep this in mind if they need to deal with pre 1970 data.
Some readers mishandle timestamps before the first transition that has a nonnegative timestamp.
Readers that do not support negative timestamps are likely to be more prone to this problem.
Some readers mishandle UT offsets that are out of the traditional range of  12 through  12 hours and so do not support locations like Kiritimati that are outside this range.
Some readers mishandle UT offsets in the range [ 3599
,  1] seconds from UT, because they integer divide the offset by 3600 to get 0 and then display the hour part as " 00".
Some readers mishandle UT offsets that are not a multiple of one hour, 15 minutes, or 1 minute.
Appendix B.  Example TZif Files
The following sections contain annotated hexadecimal dumps of example TZif files.
Note that these examples should only be considered informative.
Although the example data entries are current as of the publication date of this document, the data will likely change in the future as leap seconds are added and changes are made to civil time.
Version 1 File Representing UTC (with Leap Seconds)
To determine TAI corresponding to 2000 01 01T00:00:00Z (UNIX time   946684800), the following procedure would be followed: 1.
Find the latest leap second occurrence prior to the time of interest (leapsecond[21]) and note the correction value (LEAPCORR   22).
10 to the time of interest to yield TAI of 2000 01 01T00:00:32.
bb 05 43 48    trans
d2 23 f4 70    trans
54 5a 69 66    magic
ff ff ff ff    trans
ff ff ff ff    trans
To determine the local time in this time zone corresponding to 1933 05 04T12:00:00Z (UNIX time    1156939200), the following procedure would be followed: 1.
Find the latest time transition prior to the time of interest (trans time[1]).
Reference the corresponding transition type (trans type[1]) to determine the local time type index (2).
Reference the corresponding local time type (localtimetype[2]) to determine the offset from UTC ( 09:30)
, the daylight saving indicator (1   yes), and the index into the time zone designation strings (8). 4.
Add the UTC offset to the time of interest to yield a local daylight saving time of 1933 05 04T02:30:00
To determine the local time in this time zone corresponding to 2019 01 01T00:00:00Z (UNIX time   1546300800), the following procedure would be followed: 1.
Find the latest time transition prior to the time of interest
(there is no such transition).
Look up the TZ string in the footer ("HST10"), which indicates that the time zone designation is "HST" year round, and the offset to UTC is 10:00.
Subtract the UTC offset from the time of interest to yield a standard local time of 2018
Truncated Version 3 File Representing
The following TZif file has been truncated to start on 2038 01 01T00:00:00Z.
49 53 54 2d    TZ string
