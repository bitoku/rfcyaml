- title: __initial_text__
  contents:
  - '                    UTF-16, an encoding of ISO 10646

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes the UTF-16 encoding of Unicode/ISO-10646,\n\
    \   addresses the issues of serializing UTF-16 as an octet stream for\n   transmission\
    \ over the Internet, discusses MIME charset naming as\n   described in [CHARSET-REG],\
    \ and contains the registration for three\n   MIME charset parameter values: UTF-16BE\
    \ (big-endian), UTF-16LE\n   (little-endian), and UTF-16.\n"
- title: 1.1 Background and motivation
  contents:
  - "1.1 Background and motivation\n   The Unicode Standard [UNICODE] and ISO/IEC\
    \ 10646 [ISO-10646] jointly\n   define a coded character set (CCS), hereafter\
    \ referred to as Unicode,\n   which encompasses most of the world's writing systems\
    \ [WORKSHOP].\n   UTF-16, the object of this specification, is one of the standard\
    \ ways\n   of encoding Unicode character data; it has the characteristics of\n\
    \   encoding all currently defined characters (in plane 0, the BMP) in\n   exactly\
    \ two octets and of being able to encode all other characters\n   likely to be\
    \ defined (the next 16 planes) in exactly four octets.\n   The Unicode Standard\
    \ further defines additional character properties\n   and other application details\
    \ of great interest to implementors. Up\n   to the present time, changes in Unicode\
    \ and amendments to ISO/IEC\n   10646 have tracked each other, so that the character\
    \ repertoires and\n   code point assignments have remained in sync. The relevant\n\
    \   standardization committees have committed to maintain this very\n   useful\
    \ synchronism, as well as not to assign characters outside of\n   the 17 planes\
    \ accessible to UTF-16.\n   The IETF policy on character sets and languages [CHARPOLICY]\
    \ says\n   that IETF protocols MUST be able to use the UTF-8 character encoding\n\
    \   scheme [UTF-8]. Some products and network standards already specify\n   UTF-16,\
    \ making it an important encoding for the Internet. This\n   document is not an\
    \ update to the [CHARPOLICY] document, only a\n   description of the UTF-16 encoding.\n"
- title: 1.2 Terminology
  contents:
  - "1.2 Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [MUSTSHOULD].\n   Throughout this document, character values are shown\
    \ in hexadecimal\n   notation. For example, \"0x013C\" is the character whose\
    \ value is the\n   character assigned the integer value 316 (decimal) in the CCS.\n"
- title: 2. UTF-16 definition
  contents:
  - "2. UTF-16 definition\n   UTF-16 is described in the Unicode Standard, version\
    \ 3.0 [UNICODE].\n   The definitive reference is Annex Q of ISO/IEC 10646-1 [ISO-10646].\n\
    \   The rest of this section summarizes the definition is simple terms.\n   In\
    \ ISO 10646, each character is assigned a number, which Unicode\n   calls the\
    \ Unicode scalar value. This number is the same as the UCS-4\n   value of the\
    \ character, and this document will refer to it as the\n   \"character value\"\
    \ for brevity. In the UTF-16 encoding, characters are\n   represented using either\
    \ one or two unsigned 16-bit integers,\n   depending on the character value. Serialization\
    \ of these integers for\n   transmission as a byte stream is discussed in Section\
    \ 3.\n   The rules for how characters are encoded in UTF-16 are:\n   -  Characters\
    \ with values less than 0x10000 are represented as a\n      single 16-bit integer\
    \ with a value equal to that of the character\n      number.\n   -  Characters\
    \ with values between 0x10000 and 0x10FFFF are\n      represented by a 16-bit\
    \ integer with a value between 0xD800 and\n      0xDBFF (within the so-called\
    \ high-half zone or high surrogate\n      area) followed by a 16-bit integer with\
    \ a value between 0xDC00 and\n      0xDFFF (within the so-called low-half zone\
    \ or low surrogate area).\n   -  Characters with values greater than 0x10FFFF\
    \ cannot be encoded in\n      UTF-16.\n   Note: Values between 0xD800 and 0xDFFF\
    \ are specifically reserved for\n   use with UTF-16, and don't have any characters\
    \ assigned to them.\n"
- title: 2.1 Encoding UTF-16
  contents:
  - "2.1 Encoding UTF-16\n   Encoding of a single character from an ISO 10646 character\
    \ value to\n   UTF-16 proceeds as follows. Let U be the character number, no greater\n\
    \   than 0x10FFFF.\n   1) If U < 0x10000, encode U as a 16-bit unsigned integer\
    \ and\n      terminate.\n   2) Let U' = U - 0x10000. Because U is less than or\
    \ equal to 0x10FFFF,\n      U' must be less than or equal to 0xFFFFF. That is,\
    \ U' can be\n      represented in 20 bits.\n   3) Initialize two 16-bit unsigned\
    \ integers, W1 and W2, to 0xD800 and\n      0xDC00, respectively. These integers\
    \ each have 10 bits free to\n      encode the character value, for a total of\
    \ 20 bits.\n   4) Assign the 10 high-order bits of the 20-bit U' to the 10 low-order\n\
    \      bits of W1 and the 10 low-order bits of U' to the 10 low-order\n      bits\
    \ of W2. Terminate.\n   Graphically, steps 2 through 4 look like:\n   U' = yyyyyyyyyyxxxxxxxxxx\n\
    \   W1 = 110110yyyyyyyyyy\n   W2 = 110111xxxxxxxxxx\n"
- title: 2.2 Decoding UTF-16
  contents:
  - "2.2 Decoding UTF-16\n   Decoding of a single character from UTF-16 to an ISO\
    \ 10646 character\n   value proceeds as follows. Let W1 be the next 16-bit integer\
    \ in the\n   sequence of integers representing the text. Let W2 be the (eventual)\n\
    \   next integer following W1.\n   1) If W1 < 0xD800 or W1 > 0xDFFF, the character\
    \ value U is the value\n      of W1. Terminate.\n   2) Determine if W1 is between\
    \ 0xD800 and 0xDBFF. If not, the sequence\n      is in error and no valid character\
    \ can be obtained using W1.\n      Terminate.\n   3) If there is no W2 (that is,\
    \ the sequence ends with W1), or if W2\n      is not between 0xDC00 and 0xDFFF,\
    \ the sequence is in error.\n      Terminate.\n   4) Construct a 20-bit unsigned\
    \ integer U', taking the 10 low-order\n      bits of W1 as its 10 high-order bits\
    \ and the 10 low-order bits of\n      W2 as its 10 low-order bits.\n   5) Add\
    \ 0x10000 to U' to obtain the character value U. Terminate.\n   Note that steps\
    \ 2 and 3 indicate errors. Error recovery is not\n   specified by this document.\
    \ When terminating with an error in steps 2\n   and 3, it may be wise to set U\
    \ to the value of W1 to help the caller\n   diagnose the error and not lose information.\
    \ Also note that a string\n   decoding algorithm, as opposed to the single-character\
    \ decoding\n   described above, need not terminate upon detection of an error,\
    \ if\n   proper error reporting and/or recovery is provided.\n"
- title: 3. Labelling UTF-16 text
  contents:
  - "3. Labelling UTF-16 text\n   Appendix A of this specification contains registrations\
    \ for three\n   MIME charsets: \"UTF-16BE\", \"UTF-16LE\", and \"UTF-16\". MIME\
    \ charsets\n   represent the combination of a CCS (a coded character set) and\
    \ a CES\n   (a character encoding scheme). Here the CCS is Unicode/ISO 10646 and\n\
    \   the CES is the same in all three cases, except for the serialization\n   order\
    \ of the octets in each character, and the external determination\n   of which\
    \ serialization is used.\n   This section describes which of the three labels\
    \ to apply to a stream\n   of text. Section 4 describes how to interpret the labels\
    \ on a stream\n   of text.\n"
- title: 3.1 Definition of big-endian and little-endian
  contents:
  - "3.1 Definition of big-endian and little-endian\n   Historically, computer hardware\
    \ has processed two-octet entities such\n   as 16-bit integers in one of two ways.\
    \ So-called \"big-endian\"\n   hardware handles two-octet entities with the higher-order\
    \ octet\n   first, that is at the lower address in memory; when written out to\n\
    \   disk or to a network interface (serializing), the high-order octet\n   thus\
    \ appears first in the data stream. On the other hand, \"Little-\n   endian\"\
    \ hardware handles two-octet entities with the lower-order\n   octet first. Hardware\
    \ of both kinds is common today.\n   For example, the unsigned 16-bit integer\
    \ that represents the decimal\n   number 258 is 0x0102. The big-endian serialization\
    \ of that number is\n   the octet 0x01 followed by the octet 0x02. The little-endian\n\
    \   serialization of that number is the octet 0x02 followed by the octet\n   0x01.\
    \ The following C code fragment demonstrates a way to write 16-\n   bit quantities\
    \ to a file in big-endian order, irrespective of the\n   hardware's native byte\
    \ order.\n  void write_be(unsigned short u, FILE f)  /* assume short is 16 bits\
    \ */\n  {\n    putc(u >> 8,   f);                     /* output high-order byte\
    \ */\n    putc(u & 0xFF, f);                     /* then low-order */\n  }\n \
    \  The term \"network byte order\" has been used in many RFCs to indicate\n  \
    \ big-endian serialization, although that term has yet to be formally\n   defined\
    \ in a standards-track document. Although ISO 10646 prefers\n   big-endian serialization\
    \ (section 6.3 of [ISO-10646]), little-endian\n   order is also sometimes used\
    \ on the Internet.\n"
- title: 3.2 Byte order mark (BOM)
  contents:
  - "3.2 Byte order mark (BOM)\n   The Unicode Standard and ISO 10646 define the character\
    \ \"ZERO WIDTH\n   NON-BREAKING SPACE\" (0xFEFF), which is also known informally\
    \ as \"BYTE\n   ORDER MARK\" (abbreviated \"BOM\"). The latter name hints at a\
    \ second\n   possible usage of the character, in addition to its normal use as\
    \ a\n   genuine \"ZERO WIDTH NON-BREAKING SPACE\" within text. This usage,\n \
    \  suggested by Unicode section 2.4 and ISO 10646 Annex F (informative),\n   is\
    \ to prepend a 0xFEFF character to a stream of Unicode characters as\n   a \"\
    signature\"; a receiver of such a serialized stream may then use\n   the initial\
    \ character both as a hint that the stream consists of\n   Unicode characters\
    \ and as a way to recognize the serialization order.\n   In serialized UTF-16\
    \ prepended with such a signature, the order is\n   big-endian if the first two\
    \ octets are 0xFE followed by 0xFF; if they\n   are 0xFF followed by 0xFE, the\
    \ order is little-endian. Note that\n   0xFFFE is not a Unicode character, precisely\
    \ to preserve the\n   usefulness of 0xFEFF as a byte-order mark.\n   It is important\
    \ to understand that the character 0xFEFF appearing at\n   any position other\
    \ than the beginning of a stream MUST be interpreted\n   with the semantics for\
    \ the zero-width non-breaking space, and MUST\n   NOT be interpreted as a byte-order\
    \ mark. The contrapositive of that\n   statement is not always true: the character\
    \ 0xFEFF in the first\n   position of a stream MAY be interpreted as a zero-width\
    \ non-breaking\n   space, and is not always a byte-order mark. For example, if\
    \ a process\n   splits a UTF-16 string into many parts, a part might begin with\n\
    \   0xFEFF because there was a zero-width non-breaking space at the\n   beginning\
    \ of that substring.\n   The Unicode standard further suggests than an initial\
    \ 0xFEFF\n   character may be stripped before processing the text, the rationale\n\
    \   being that such a character in initial position may be an artifact of\n  \
    \ the encoding (an encoding signature), not a genuine intended \"ZERO\n   WIDTH\
    \ NON-BREAKING SPACE\". Note that such stripping might affect an\n   external\
    \ process at a different layer (such as a digital signature or\n   a count of\
    \ the characters) that is relying on the presence of all\n   characters in the\
    \ stream.\n   In particular, in UTF-16 plain text it is likely, but not certain,\n\
    \   that an initial 0xFEFF is a signature. When concatenating two\n   strings,\
    \ it is important to strip out those signatures, because\n   otherwise the resulting\
    \ string may contain an unintended \"ZERO WIDTH\n   NON-BREAKING SPACE\" at the\
    \ connection point. Also, some\n   specifications mandate an initial 0xFEFF character\
    \ in objects\n   labelled as UTF-16 and specify that this signature is not part\
    \ of the\n   object.\n"
- title: 3.3 Choosing a label for UTF-16 text
  contents:
  - "3.3 Choosing a label for UTF-16 text\n   Any labelling application that uses\
    \ UTF-16 character encoding, and\n   explicitly labels the text, and knows the\
    \ serialization order of the\n   characters in text, SHOULD label the text as\
    \ either \"UTF-16BE\" or\n   \"UTF-16LE\", whichever is appropriate based on the\
    \ endianness of the\n   text. This allows applications processing the text, but\
    \ unable to\n   look inside the text, to know the serialization definitively.\n\
    \   Text in the \"UTF-16BE\" charset MUST be serialized with the octets\n   which\
    \ make up a single 16-bit UTF-16 value in big-endian order.\n   Systems labelling\
    \ UTF-16BE text MUST NOT prepend a BOM to the text.\n   Text in the \"UTF-16LE\"\
    \ charset MUST be serialized with the octets\n   which make up a single 16-bit\
    \ UTF-16 value in little-endian order.\n   Systems labelling UTF-16LE text MUST\
    \ NOT prepend a BOM to the text.\n   Any labelling application that uses UTF-16\
    \ character encoding, and\n   puts an explicit charset label on the text, and\
    \ does not know the\n   serialization order of the characters in text, MUST label\
    \ the text as\n   \"UTF-16\", and SHOULD make sure the text starts with 0xFEFF.\n\
    \   An exception to the \"SHOULD\" rule of using \"UTF-16BE\" or \"UTF-16LE\"\n\
    \   would occur with document formats that mandate a BOM in UTF-16 text,\n   thereby\
    \ requiring the use of the \"UTF-16\" tag only.\n"
- title: 4. Interpreting text labels
  contents:
  - "4. Interpreting text labels\n   When a program sees text labelled as \"UTF-16BE\"\
    , \"UTF-16LE\", or\n   \"UTF-16\", it can make some assumptions, based on the\
    \ labelling rules\n   given in the previous section. These assumptions allow the\
    \ program to\n   then process the text.\n"
- title: 4.1 Interpreting text labelled as UTF-16BE
  contents:
  - "4.1 Interpreting text labelled as UTF-16BE\n   Text labelled \"UTF-16BE\" can\
    \ always be interpreted as being big-\n   endian.  The detection of an initial\
    \ BOM does not affect de-\n   serialization of text labelled as UTF-16BE. Finding\
    \ 0xFF followed by\n   0xFE is an error since there is no Unicode character 0xFFFE.\n"
- title: 4.2 Interpreting text labelled as UTF-16LE
  contents:
  - "4.2 Interpreting text labelled as UTF-16LE\n   Text labelled \"UTF-16LE\" can\
    \ always be interpreted as being little-\n   endian. The detection of an initial\
    \ BOM does not affect de-\n   serialization of text labelled as UTF-16LE. Finding\
    \ 0xFE followed by\n   0xFF is an error since there is no Unicode character 0xFFFE,\
    \ which\n   would be the interpretation of those octets under little-endian\n\
    \   order.\n"
- title: 4.3 Interpreting text labelled as UTF-16
  contents:
  - "4.3 Interpreting text labelled as UTF-16\n   Text labelled with the \"UTF-16\"\
    \ charset might be serialized in either\n   big-endian or little-endian order.\
    \ If the first two octets of the\n   text is 0xFE followed by 0xFF, then the text\
    \ can be interpreted as\n   being big-endian. If the first two octets of the text\
    \ is 0xFF\n   followed by 0xFE, then the text can be interpreted as being little-\n\
    \   endian. If the first two octets of the text is not 0xFE followed by\n   0xFF,\
    \ and is not 0xFF followed by 0xFE, then the text SHOULD be\n   interpreted as\
    \ being big-endian.\n   All applications that process text with the \"UTF-16\"\
    \ charset label\n   MUST be able to read at least the first two octets of the\
    \ text and be\n   able to process those octets in order to determine the serialization\n\
    \   order of the text. Applications that process text with the \"UTF-16\"\n  \
    \ charset label MUST NOT assume the serialization without first\n   checking the\
    \ first two octets to see if they are a big-endian BOM, a\n   little-endian BOM,\
    \ or not a BOM. All applications that process text\n   with the \"UTF-16\" charset\
    \ label MUST be able to interpret both big-\n   endian and little-endian text.\n"
- title: 5. Examples
  contents:
  - "5. Examples\n   For the sake of example, let's suppose that there is a hieroglyphic\n\
    \   character representing the Egyptian god Ra with character value\n   0x12345\
    \ (this character does not exist at present in Unicode).\n   The examples here\
    \ all evaluate to the phrase:\n   *=Ra\n   where the \"*\" represents the Ra hieroglyph\
    \ (0x12345).\n   Text labelled with UTF-16BE, without a BOM:\n   D8 08 DF 45 00\
    \ 3D 00 52 00 61\n   Text labelled with UTF-16LE, without a BOM:\n   08 D8 45\
    \ DF 3D 00 52 00 61 00\n   Big-endian text labelled with UTF-16, with a BOM:\n\
    \   FE FF D8 08 DF 45 00 3D 00 52 00 61\n   Little-endian text labelled with UTF-16,\
    \ with a BOM:\n   FF FE 08 D8 45 DF 3D 00 52 00 61 00\n"
- title: 6. Versions of the standards
  contents:
  - "6. Versions of the standards\n   ISO/IEC 10646 is updated from time to time by\
    \ published amendments;\n   similarly, different versions of the Unicode standard\
    \ exist: 1.0,\n   1.1, 2.0, 2.1, and 3.0 as of this writing. Each new version\
    \ replaces\n   the previous one, but implementations, and more significantly data,\n\
    \   are not updated instantly.\n   In general, the changes amount to adding new\
    \ characters, which does\n   not pose particular problems with old data. Amendment\
    \ 5 to ISO/IEC\n   10646, however, has moved and expanded the Korean Hangul block,\n\
    \   thereby making any previous data containing Hangul characters invalid\n  \
    \ under the new version. Unicode 2.0 has the same difference from\n   Unicode\
    \ 1.1. The official justification for allowing such an\n   incompatible change\
    \ was that no significant implementations and data\n   containing Hangul existed,\
    \ a statement that is likely to be true but\n   remains unprovable. The incident\
    \ has been dubbed the \"Korean mess\",\n   and the relevant committees have pledged\
    \ to never, ever again make\n   such an incompatible change.\n   New versions,\
    \ and in particular any incompatible changes, have\n   consequences regarding\
    \ MIME character encoding labels, to be\n   discussed in Appendix A.\n"
- title: 7. IANA Considerations
  contents:
  - "7. IANA Considerations\n   IANA is to register the character sets found in Appendixes\
    \ A.1, A.2,\n   and A.3 according to RFC 2278, using registration templates found\
    \ in\n   those appendixes.\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   UTF-16 is based on the ISO 10646 character set,\
    \ which is frequently\n   being added to, as described in Section 6 and Appendix\
    \ A of this\n   document. Processors must be able to handle characters that are\
    \ not\n   defined at the time that the processor was created in such a way as\n\
    \   to not allow an attacker to harm a recipient by including unknown\n   characters.\n\
    \   Processors that handle any type of text, including text encoded as\n   UTF-16,\
    \ must be vigilant in checking for control characters that\n   might reprogram\
    \ a display terminal or keyboard. Similarly, processors\n   that interpret text\
    \ entities (such as looking for embedded\n   programming code), must be careful\
    \ not to execute the code without\n   first alerting the recipient.\n   Text in\
    \ UTF-16 may contain special characters, such as the OBJECT\n   REPLACEMENT CHARACTER\
    \ (0xFFFC), that might cause external processing,\n   depending on the interpretation\
    \ of the processing program and the\n   availability of an external data stream\
    \ that would be executed. This\n   external processing may have side-effects that\
    \ allow the sender of a\n   message to attack the receiving system.\n   Implementors\
    \ of UTF-16 need to consider the security aspects of how\n   they handle illegal\
    \ UTF-16 sequences (that is, sequences involving\n   surrogate pairs that have\
    \ illegal values or unpaired surrogates). It\n   is conceivable that in some circumstances\
    \ an attacker would be able\n   to exploit an incautious UTF-16 parser by sending\
    \ it an octet\n   sequence that is not permitted by the UTF-16 syntax, causing\
    \ it to\n   behave in some anomalous fashion.\n"
- title: 9. References
  contents:
  - "9. References\n   [CHARPOLICY]  Alvestrand, H., \"IETF Policy on Character Sets\
    \ and\n                 Languages\", BCP 18, RFC 2277, January 1998.\n   [CHARSET-REG]\
    \ Freed, N. and J. Postel, \"IANA Charset Registration\n                 Procedures\"\
    , BCP 19, RFC 2278, January 1998.\n   [HTTP-1.1]    Fielding, R., Gettys, J.,\
    \ Mogul, J., Frystyk, H.,\n                 Masinter, L., Leach, P. and T. Berners-Lee,\
    \ \"Hypertext\n                 Transfer Protocol -- HTTP/1.1\", RFC 2616, June\
    \ 1999.\n   [ISO-10646]   ISO/IEC 10646-1:1993. International Standard --\n  \
    \               Information technology -- Universal Multiple-Octet\n         \
    \        Coded Character Set (UCS) -- Part 1: Architecture and\n             \
    \    Basic Multilingual Plane. 22 amendments and two\n                 technical\
    \ corrigenda have been published up to now.\n                 UTF-16 is described\
    \ in Annex Q, published as Amendment\n                 1. Many other amendments\
    \ are currently at various\n                 stages of standardization. A second\
    \ edition is in\n                 preparation, probably to be published in 2000;\
    \ in this\n                 new edition, UTF-16 will probably be described in\
    \ Annex\n                 C.\n   [MUSTSHOULD]  Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [UNICODE]     The Unicode Consortium, \"The Unicode Standard\
    \ --\n                 Version 3.0\", ISBN 0-201-61633-5. Described at\n   <http://www.unicode.org/unicode/standard/versions/Unicode3.0.html>.\n\
    \   [UTF-8]       Yergeau, F., \"UTF-8, a transformation format of ISO\n     \
    \            10646\", RFC 2279, January 1998.\n   [WORKSHOP]    Weider, C., Preston,\
    \ C., Simonsen, K., Alvestrand, H.,\n                 Atkinson, R., Crispin.,\
    \ M. and P. Svanberg, \"Report of\n                 the IAB Character Set Workshop\"\
    , RFC 2130, April 1997.\n"
- title: 10. Acknowledgments
  contents:
  - "10. Acknowledgments\n   Deborah Goldsmith wrote a great deal of the initial wording\
    \ for this\n   specification. Martin Duerst proposed numerous significant changes.\n\
    \   Other significant contributors include:\n   Mati Allouche\n   Walt Daniels\n\
    \   Mark Davis\n   Ned Freed\n   Asmus Freytag\n   Lloyd Honomichl\n   Dan Kegel\n\
    \   Murata Makoto\n   Larry Masinter\n   Markus Scherer\n   Keld Simonsen\n  \
    \ Ken Whistler\n   Some of the text in this specification was copied from [UTF-8],\
    \ and\n   that document was worked on by many people. Please see the\n   acknowledgments\
    \ section in that document for more people who may have\n   contributed indirectly\
    \ to this document.\n"
- title: A. Charset registrations
  contents:
  - "A. Charset registrations\n   This memo is meant to serve as the basis for registration\
    \ of three\n   MIME charsets [CHARSET-REG]. The proposed charsets are \"UTF-16BE\"\
    ,\n   \"UTF-16LE\", and \"UTF-16\". These strings label objects containing text\n\
    \   consisting of characters from the repertoire of ISO/IEC 10646\n   including\
    \ all amendments at least up to amendment 5 (Korean block),\n   encoded to a sequence\
    \ of octets using the encoding and serialization\n   schemes outlined above.\n\
    \   Note that \"UTF-16BE\", \"UTF-16LE\", and \"UTF-16\" are NOT suitable for\n\
    \   use in media types under the \"text\" top-level type, because they do\n  \
    \ not encode line endings in the way required for MIME \"text\" media\n   types.\
    \ An exception to this is HTTP, which uses a MIME-like\n   mechanism, but is exempt\
    \ from the restrictions on the text top-level\n   type (see section 19.4.2 of\
    \ HTTP 1.1 [HTTP-1.1]).\n   It is noteworthy that the labels described here do\
    \ not contain a\n   version identification, referring generically to ISO/IEC 10646.\
    \ This\n   is intentional, the rationale being as follows:\n   A MIME charset\
    \ is designed to give just the information needed to\n   interpret a sequence\
    \ of bytes received on the wire into a sequence of\n   characters, nothing more\
    \ (see RFC 2045, section 2.2, in [MIME]). As\n   long as a character set standard\
    \ does not change incompatibly,\n   version numbers serve no purpose, because\
    \ one gains nothing by\n   learning from the tag that newly assigned characters\
    \ may be received\n   that one doesn't know about. The tag itself doesn't teach\
    \ anything\n   about the new characters, which are going to be received anyway.\n\
    \   Hence, as long as the standards evolve compatibly, the apparent\n   advantage\
    \ of having labels that identify the versions is only that,\n   apparent. But\
    \ there is a disadvantage to such version-dependent\n   labels: when an older\
    \ application receives data accompanied by a\n   newer, unknown label, it may\
    \ fail to recognize the label and be\n   completely unable to deal with the data,\
    \ whereas a generic, known\n   label would have triggered mostly correct processing\
    \ of the data,\n   which may well not contain any new characters.\n   The \"Korean\
    \ mess\" (ISO/IEC 10646 amendment 5) is an incompatible\n   change, in principle\
    \ contradicting the appropriateness of a version\n   independent MIME charset\
    \ as described above. But the compatibility\n   problem can only appear with data\
    \ containing Korean Hangul characters\n   encoded according to Unicode 1.1 (or\
    \ equivalently ISO/IEC 10646\n   before amendment 5), and there is arguably no\
    \ such data to worry\n   about, this being the very reason the incompatible change\
    \ was deemed\n   acceptable.\n   In practice, then, a version-independent label\
    \ is warranted, provided\n   the label is understood to refer to all versions\
    \ after Amendment 5,\n   and provided no incompatible change actually occurs.\
    \ Should\n   incompatible changes occur in a later version of ISO/IEC 10646, the\n\
    \   MIME charsets defined here will stay aligned with the previous\n   version\
    \ until and unless the IETF specifically decides otherwise.\n"
- title: A.1 Registration for UTF-16BE
  contents:
  - "A.1 Registration for UTF-16BE\n   To: ietf-charsets@iana.org\n   Subject: Registration\
    \ of new charset\n   Charset name(s): UTF-16BE\n   Published specification(s):\
    \ This specification\n   Suitable for use in MIME content types under the\n  \
    \ \"text\" top-level type: No\n   Person & email address to contact for further\
    \ information:\n   Paul Hoffman <phoffman@imc.org>\n   Francois Yergeau <fyergeau@alis.com>\n"
- title: A.2 Registration for UTF-16LE
  contents:
  - "A.2 Registration for UTF-16LE\n   To: ietf-charsets@iana.org\n   Subject: Registration\
    \ of new charset\n   Charset name(s): UTF-16LE\n   Published specification(s):\
    \ This specification\n   Suitable for use in MIME content types under the\n  \
    \ \"text\" top-level type: No\n   Person & email address to contact for further\
    \ information:\n   Paul Hoffman <phoffman@imc.org>\n   Francois Yergeau <fyergeau@alis.com>\n"
- title: A.3 Registration for UTF-16
  contents:
  - "A.3 Registration for UTF-16\n   To: ietf-charsets@iana.org\n   Subject: Registration\
    \ of new charset\n   Charset name(s): UTF-16\n   Published specification(s): This\
    \ specification\n   Suitable for use in MIME content types under the\n   \"text\"\
    \ top-level type: No\n   Person & email address to contact for further information:\n\
    \   Paul Hoffman <phoffman@imc.org>\n   Francois Yergeau <fyergeau@alis.com>\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paul Hoffman\n   Internet Mail Consortium\n   127 Segre\
    \ Place\n   Santa Cruz, CA  95060 USA\n   EMail: phoffman@imc.org\n   Francois\
    \ Yergeau\n   Alis Technologies\n   100, boul. Alexis-Nihon, Suite 600\n   Montreal\
    \  QC  H4M 2P2 Canada\n   EMail: fyergeau@alis.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
