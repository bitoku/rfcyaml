- title: __initial_text__
  contents:
  - '                         DHCPv4 Bulk Leasequery

    '
- title: Abstract
  contents:
  - "Abstract\n   The Dynamic Host Configuration Protocol for IPv4 (DHCPv4) Leasequery\n\
    \   protocol allows a requestor to request information about DHCPv4\n   bindings.\
    \  This protocol is limited to queries for individual\n   bindings.  In some situations,\
    \ individual binding queries may not be\n   efficient or even possible.  This\
    \ document extends the DHCPv4\n   Leasequery protocol to allow for bulk transfer\
    \ of DHCPv4 address\n   binding data via TCP.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6926.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................5\n  \
    \ 3. Design Goals ....................................................8\n    \
    \  3.1. Information Acquisition before Data Starts .................8\n      3.2.\
    \ Lessen Need for Caching and Negative Caching ...............8\n      3.3. Antispoofing\
    \ in 'Fast Path' ................................8\n      3.4. Minimize Data Transmission\
    \ .................................9\n   4. Protocol Overview ...............................................9\n\
    \   5. Interaction between UDP Leasequery and Bulk Leasequery .........11\n  \
    \ 6. Message and Option Definitions .................................12\n    \
    \  6.1. Message Framing for TCP ...................................12\n      6.2.\
    \ New or Changed Options ....................................13\n      6.3. Connection\
    \ and Transmission Parameters ....................20\n   7. Requestor Behavior\
    \ .............................................21\n      7.1. Connecting and General\
    \ Processing .........................21\n      7.2. Forming a Bulk Leasequery\
    \ .................................21\n      7.3. Processing Bulk Replies ...................................23\n\
    \      7.4. Processing Time Values in Leasequery Messages .............25\n  \
    \    7.5. Querying Multiple Servers .................................26\n    \
    \  7.6. Making Sense out of Multiple Responses concerning\n           a Single\
    \ IPv4 Address .....................................26\n      7.7. Multiple Queries\
    \ to a Single Server over One Connection ...27\n      7.8. Closing Connections\
    \ .......................................28\n   8. Server Behavior ................................................29\n\
    \      8.1. Accepting Connections .....................................29\n  \
    \    8.2. Replying to a Bulk Leasequery .............................29\n    \
    \  8.3. Building a Single Reply for Bulk Leasequery ...............33\n      8.4.\
    \ Multiple or Parallel Queries ..............................34\n      8.5. Closing\
    \ Connections .......................................35\n   9. Security Considerations\
    \ ........................................35\n   10. IANA Considerations ...........................................37\n\
    \   11. Acknowledgements ..............................................38\n  \
    \ 12. References ....................................................38\n    \
    \  12.1. Normative References .....................................38\n      12.2.\
    \ Informative References ...................................39\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   DHCPv4 [RFC2131] [RFC2132] specifies a protocol for the\
    \ assignment of\n   IPv4 address and configuration information to IPv4 nodes.\
    \  DHCPv4\n   servers maintain authoritative binding information.\n      +--------+\n\
    \      | DHCPv4 |     +--------------+\n      | Server |-...-|    DHCP      |\n\
    \      |        |     |  Relay Agent |\n      +--------+     +--------------+\n\
    \                          |        |\n                      +------+   +------+\n\
    \                      |Modem1|   |Modem2|\n                      +------+   +------+\n\
    \                         |        |    |\n                      +-----+  +-----+\
    \ +-----+\n                      |Node1|  |Node2| |Node3|\n                  \
    \    +-----+  +-----+ +-----+\n       Figure 1:  Example DHCPv4 Configuration\n\
    \   DHCPv4 relay agents receive DHCPv4 messages and frequently append a\n   Relay\
    \ Agent Information option [RFC3046] before relaying them to the\n   configured\
    \ DHCPv4 servers (see Figure 1).  In this process, some\n   relay agents also\
    \ glean lease information sent by the server and\n   cache it locally.  This information\
    \ is used for a variety of\n   purposes.  Two examples are prevention of spoofing\
    \ attempts from the\n   DHCPv4 clients and installation of routes.  When a relay\
    \ agent\n   reboots, this information is frequently lost.\n   The DHCPv4 Leasequery\
    \ capability [RFC4388] extends the basic DHCPv4\n   capability to allow an external\
    \ entity, such as a relay agent, to\n   query a DHCPv4 server to rapidly recover\
    \ lease state information\n   about a particular IP address or client.\n   The\
    \ existing query types in Leasequery are typically data driven; the\n   relay\
    \ agent initiates the Leasequery when it receives data traffic\n   from or to\
    \ the client.  This approach may not scale well when there\n   are thousands of\
    \ clients connected to the relay agent or when the\n   relay agent has a need\
    \ to rebuild its internal data store prior to\n   processing traffic in one direction\
    \ or another.\n   Some applications require the ability to query the server without\n\
    \   waiting for traffic from or to clients.  This query capability, in\n   turn,\
    \ requires an underlying transport more suitable to the bulk\n   transmission\
    \ of data.\n   This document extends the DHCPv4 Leasequery protocol [RFC4388]\
    \ to add\n   support for queries that address these additional requirements.\n\
    \   There may be many thousands of DHCPv4 bindings returned as the result\n  \
    \ of a single request, so TCP [RFC4614] is specified for efficiency of\n   data\
    \ transfer.  We define several additional query types, each of\n   which can return\
    \ multiple responses, in order to meet a variety of\n   requirements.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in RFC\n   2119 [RFC2119].\n   This document uses the following terms:\n   o\
    \ \"absolute time\"\n      Absolute time is a 32-bit quantity containing the number\
    \ of\n      seconds since January 1, 1970.\n   o \"access concentrator\"\n   \
    \   An access concentrator is a router or switch at the broadband\n      access\
    \ provider's edge of a public broadband access network.  This\n      document\
    \ assumes that the access concentrator includes the DHCPv4\n      relay agent\
    \ functionality, for example, a CMTS (Cable Modem\n      Termination System) in\
    \ a cable environment or a DSLAM (Digital\n      Subscriber Line Access Multiplexer)\
    \ in a DSL environment.\n   o \"active binding\"\n      An IP address with an\
    \ active binding refers to an IP address that\n      is currently associated with\
    \ a DHCPv4 client where that DHCPv4\n      client has the right to use the IP\
    \ address.\n   o \"Bulk Leasequery\"\n      Bulk Leasequery involves requesting\
    \ and receiving the existing\n      DHCPv4 address binding information in an efficient\
    \ manner.\n   o \"clock skew\"\n      The clock skew for a Bulk Leasequery connection\
    \ is the difference\n      between the absolute time on a DHCPv4 server and the\
    \ absolute time\n      on the system where a requestor of a Bulk Leasequery is\
    \ executing.\n      It is not absolutely constant but is likely to vary only slowly.\n\
    \      It is possible that, when both systems run NTP, the clock skew is\n   \
    \   negligible; this is not only acceptable but desired.\n      While it is easy\
    \ to think that this can be calculated precisely\n      after one message is received\
    \ by a requestor from a DHCPv4 server,\n      a more accurate value is derived\
    \ from continuously examining the\n      instantaneous value developed from each\
    \ message received from a\n      DHCPv4 server and using it to make small adjustments\
    \ to the\n      existing value held in the requestor.\n   o \"Default VPN\"\n\
    \      A default VPN indicates that the address being described belongs\n    \
    \  to the set of addresses not part of any VPN (in other words, the\n      normal\
    \ address space operated on by DHCP).  This includes Special\n      Use IPv4 Addresses\
    \ as defined in [RFC5735].\n   o \"DHCPv4 client\"\n      A DHCPv4 client is an\
    \ Internet node using DHCPv4 to obtain\n      configuration parameters such as\
    \ a network address.\n   o \"DHCPv4 relay agent\"\n      A DHCPv4 relay agent\
    \ is an agent that is neither a DHCPv4 client\n      nor a DHCP server that transfers\
    \ BOOTP and DHCPv4 messages between\n      clients and servers residing on different\
    \ subnets, per [RFC951]\n      and [RFC1542].\n   o \"DHCPv4 server\"\n      A\
    \ DHCPv4 server is an Internet node that returns configuration\n      parameters\
    \ to DHCPv4 clients.\n   o \"DSLAM\"\n      DSLAM stands for Digital Subscriber\
    \ Line Access Multiplexer.\n   o \"downstream\"\n      Downstream refers to a\
    \ direction away from the central part of a\n      network and toward the edge.\
    \  In a DHCPv4 context, this typically\n      refers to a network direction that\
    \ is away from the DHCPv4 server\n      and toward the DHCPv4 client.\n   o \"\
    Global VPN\"\n      Global VPN is another name for the default VPN.\n   o \"IP\
    \ address\"\n      In this document, the term \"IP address\" refers to an IPv4\
    \ IP\n      address.\n   o \"IP address binding\"\n      An IP address binding\
    \ is the information that a DHCPv4 server\n      keeps regarding the relationship\
    \ between a DHCPv4 client and an IP\n      address.  This includes the identity\
    \ of the DHCPv4 client and the\n      expiration time, if any, of any lease that\
    \ client has on a\n      particular IP address.  In some contexts, this may include\n\
    \      information on IP addresses that are currently associated with\n      DHCPv4\
    \ clients, and in others, it may also include IP addresses\n      with no current\
    \ association to a DHCPv4 client.\n   o \"MAC address\"\n      In the context\
    \ of a DHCPv4 message, a Media Access Control (MAC)\n      address consists of\
    \ the fields: hardware type \"htype\", hardware\n      length \"hlen\", and client\
    \ hardware address \"chaddr\".\n   o \"upstream\"\n      Upstream refers to a\
    \ direction toward the central part of a\n      network and away from the edge.\
    \  In a DHCPv4 context, this\n      typically refers to a network direction that\
    \ is away from the\n      DHCPv4 client and toward the DHCPv4 server.\n   o \"\
    stable storage\"\n      Stable storage is used to hold information concerning\
    \ IP address\n      bindings (among other things) so that this information is\
    \ not lost\n      in the event of a failure that requires restart of the network\n\
    \      element.  DHCPv4 servers are typically expected to have high-speed\n  \
    \    access to stable storage, while relay agents and access\n      concentrators\
    \ usually do not have access to stable storage,\n      although they may have\
    \ periodic access to such storage.\n   o \"xid\"\n      Transaction-id.  The term\
    \ \"xid\" refers to the DHCPv4 field\n      containing the transaction-id of the\
    \ message.\n"
- title: 3.  Design Goals
  contents:
  - "3.  Design Goals\n   The goal of this document is to provide a lightweight protocol\
    \ for an\n   access concentrator or other network element (such as a DHCP relay\n\
    \   agent) to retrieve IP address binding information available in the\n   DHCPv4\
    \ server.  The protocol should also allow an access concentrator\n   or DHCP relay\
    \ agent to retrieve consolidated IP address binding\n   information for either\
    \ the entire access concentrator or a single\n   connection/circuit.  Throughout\
    \ the discussion below, everything that\n   applies to an access concentrator\
    \ also applies to a DHCP relay agent.\n"
- title: 3.1.  Information Acquisition before Data Starts
  contents:
  - "3.1.  Information Acquisition before Data Starts\n   The existing data-driven\
    \ approach required by [RFC4388] means that\n   the Leasequeries can only be performed\
    \ after an access concentrator\n   receives data.  To implement antispoofing,\
    \ the concentrator must drop\n   messages for each client until it gets lease\
    \ information from the\n   DHCPv4 server for that client.  If an access concentrator\
    \ finishes\n   the Leasequeries before it starts receiving data, then there is\
    \ no\n   need to drop legitimate messages.  In this way, outage time may be\n\
    \   reduced.\n"
- title: 3.2.  Lessen Need for Caching and Negative Caching
  contents:
  - "3.2.  Lessen Need for Caching and Negative Caching\n   The result of a single\
    \ Leasequery should be cached, whether that\n   results in a positive or negative\
    \ cache, in order to remember that\n   the Leasequery was performed.  This caching\
    \ is required to limit the\n   traffic imposed upon a DHCPv4 server by Leasequeries\
    \ for information\n   already received.\n   These caches not only consume precious\
    \ resources, they also need to\n   be managed.  Hence, they should be avoided\
    \ as much as possible.  One\n   of the goals of the DHCPv4 Bulk Leasequery is\
    \ to reduce the need for\n   this sort of caching.\n"
- title: 3.3.  Antispoofing in 'Fast Path'
  contents:
  - "3.3.  Antispoofing in 'Fast Path'\n   If antispoofing is not done in the fast\
    \ path, it will become a\n   bottleneck and may lead to denial of service of the\
    \ access\n   concentrator.  The Leasequeries should make it possible to do\n \
    \  antispoofing in the fast path.\n"
- title: 3.4.  Minimize Data Transmission
  contents:
  - "3.4.  Minimize Data Transmission\n   It may be that a network element is able\
    \ to periodically save its\n   entire list of assigned IP addresses to some form\
    \ of stable storage.\n   In this case, it will wish to recover all of the updates\
    \ to this\n   information without duplicating the information it has recovered\
    \ from\n   its own stable storage.\n   Bulk Leasequery allows the specification\
    \ of a query-start-time as\n   well as a query-end-time.  Use of query times allows\
    \ a network\n   element that periodically commits information to stable storage\
    \ to\n   recover just what it lost since the last commit.\n"
- title: 4.  Protocol Overview
  contents:
  - "4.  Protocol Overview\n   The DHCPv4 Bulk Leasequery protocol is modeled on the\
    \ existing\n   individual DHCPv4 Leasequery protocol in [RFC4388] as well as related\n\
    \   work on DHCPv6 Bulk Leasequery [RFC5460].  A Bulk Leasequery\n   requestor\
    \ opens a TCP connection to a DHCPv4 server using the DHCPv4\n   port 67.  Note\
    \ that this implies that the Leasequery requestor has\n   server IP address(es)\
    \ available via configuration or some other means\n   and that it has unicast\
    \ IP reachability to the DHCPv4 server.  No\n   relaying of Bulk Leasequery messages\
    \ is specified.\n   After establishing a connection, the requestor sends a\n \
    \  DHCPBULKLEASEQUERY message over the connection.\n   The server uses the message\
    \ type and additional data in the DHCPv4\n   DHCPBULKLEASEQUERY message to identify\
    \ any relevant bindings.\n   In order to support some query types, servers may\
    \ have to maintain\n   additional data structures or otherwise be able to locate\
    \ bindings\n   that have been requested by the Leasequery requestor.\n   Relevant\
    \ bindings are returned in DHCPv4 messages with either the\n   DHCPLEASEACTIVE\
    \ message type for an IP address with a currently\n   active lease or, in some\
    \ situations, a DHCPLEASEUNASSIGNED message\n   type for an IP address that is\
    \ controlled by the DHCPv4 server but is\n   not actively leased by a DHCPv4 client\
    \ at the present time.\n   The Bulk Leasequery protocol is designed to provide\
    \ an external\n   entity with information concerning existing DHCPv4 IPv4 address\n\
    \   bindings managed by the DHCPv4 server.  When complete, the DHCPv4\n   server\
    \ will send a DHCPLEASEQUERYDONE message.  If a connection is\n   lost while processing\
    \ a Bulk Leasequery, the Bulk Leasequery must be\n   retried as there is no provision\
    \ for determining the extent of data\n   already received by the requestor for\
    \ a Bulk Leasequery.\n   Bulk Leasequery supports queries by MAC address and by\
    \ Client\n   Identifier in a way similar to [RFC4388].  The Bulk Leasequery\n\
    \   protocol also adds several new queries.\n   o  Query by Relay Identifier\n\
    \      This query asks a server for the bindings associated with a\n      specific\
    \ relay agent; the relay agent is identified by a Relay\n      Agent Identifier\
    \ carried in a Relay-ID sub-option [RFC6925].\n      Relay agents can include\
    \ this sub-option while relaying messages\n      to DHCPv4 servers.  Servers can\
    \ retain the Relay-ID and associate\n      it with bindings made on behalf of\
    \ the relay agent's clients.  The\n      bindings returned are only those for\
    \ DHCPv4 clients with a\n      currently active binding.\n   o  Query by Remote\
    \ ID\n      This query asks a server for the bindings associated with a relay\n\
    \      agent Remote ID sub-option [RFC3046] value.  The bindings returned\n  \
    \    are only those for DHCPv4 clients with a currently active binding.\n   o\
    \  Query for All Configured IP Addresses\n      This query asks a server for information\
    \ concerning all IP\n      addresses configured in that DHCPv4 server by specifying\
    \ no other\n      type of query.  In this case, the bindings returned are for\
    \ all\n      configured IP addresses, whether or not they contain a currently\n\
    \      active binding to a DHCPv4 client, since one point of this type of\n  \
    \    query is to update an existing database with changes after a\n      particular\
    \ point in time.\n   Any of the above queries can be qualified by the specification\
    \ of a\n   query-start-time or a query-end-time (or both).  When these timers\n\
    \   are used as qualifiers, they indicate that a binding should be\n   included\
    \ if it changed on or after the query-start-time and on or\n   before the query-end-time.\n\
    \   In addition, any of the above queries can be qualified by the\n   specification\
    \ of a VPN-ID option [RFC6607] to select the VPN on which\n   the query should\
    \ be processed.  The VPN-ID option is also extended to\n   allow queries across\
    \ all available VPNs.  In the absence of any VPN-\n   ID option, only the default\
    \ (global) VPN is used to satisfy the\n   query.\n"
- title: 5.  Interaction between UDP Leasequery and Bulk Leasequery
  contents:
  - "5.  Interaction between UDP Leasequery and Bulk Leasequery\n   Bulk Leasequery\
    \ can be seen as an extension of the existing UDP\n   Leasequery protocol [RFC4388].\
    \  This section clarifies the\n   relationship between the two protocols.\n  \
    \ The Bulk Leasequery TCP connection is only designed to handle the\n   DHCPBULKLEASEQUERY\
    \ request.  It is not intended as an alternative\n   DHCPv4 communication option\
    \ for clients seeking other DHCPv4\n   services.  DHCPv4 address allocation could\
    \ not be performed over a\n   TCP connection in any case, as a TCP connection\
    \ requires an IP\n   address and no IPv4 address exists prior to a successful\
    \ DHCPv4\n   address allocation exchange.  In addition, the existing DHCPv4 UDP\n\
    \   transmission regime is implemented in untold millions of devices\n   deployed\
    \ worldwide, and complicating DHCPv4 services with alternative\n   transmission\
    \ approaches (even if it were possible) would be worse\n   than any perceived\
    \ benefit to doing so.\n   Two of the query types introduced in the UDP Leasequery\
    \ protocol can\n   be used in the Bulk Leasequery protocol -- Query by MAC address\
    \ and\n   Query by Client-identifier.\n   The contents of the reply messages are\
    \ similar between the existing\n   UDP Leasequery protocol and the Bulk Leasequery\
    \ protocol, though more\n   information is returned in the Bulk Leasequery messages.\n\
    \   One change in behavior for these existing queries is required when\n   Bulk\
    \ Leasequery is used.  Sections 6.1, 6.4.1, and 6.4.2 of [RFC4388]\n   specify\
    \ the use of an associated-ip option in DHCPLEASEACTIVE\n   messages in cases\
    \ where multiple bindings were found.  When Bulk\n   Leasequery is used, this\
    \ mechanism is not necessary; a server\n   returning multiple bindings simply\
    \ does so directly as specified in\n   this document.  The associated-ip option\
    \ MUST NOT appear in Bulk\n   Leasequery replies.\n   Implementors should note\
    \ that the TCP message framing defined in\n   Section 6.1 is not compatible with\
    \ the UDP message format.  If a TCP-\n   framed request is sent as a UDP message,\
    \ it may not be valid, because\n   protocol fields will be offset by the message-size\
    \ prefix.\n"
- title: 6.  Message and Option Definitions
  contents:
  - '6.  Message and Option Definitions

    '
- title: 6.1.  Message Framing for TCP
  contents:
  - "6.1.  Message Framing for TCP\n   The use of TCP for the Bulk Leasequery protocol\
    \ permits multiple\n   messages to be sent from one end of the connection to the\
    \ other\n   without requiring a request/response paradigm as does UDP DHCPv4\n\
    \   [RFC2131].  The receiver needs to be able to determine the size of\n   each\
    \ message it receives.  Two octets containing the message size in\n   network\
    \ byte order are prepended to each DHCPv4 message sent on a\n   Bulk Leasequery\
    \ TCP connection.  The two message-size octets 'frame'\n   each DHCPv4 message.\n\
    \   The maximum message size is 65535 octets.\n      0                   1   \
    \                2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         message-size          |    op (1)     |   htype (1)   |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \ hlen (1)    |   hops (1)    |              ....             |\n     +---------------+---------------+\
    \                               +\n     |                                    \
    \                           |\n     .                  remainder of DHCPv4 message,\n\
    \     .                   from Figure 1 of [RFC2131]                  .\n    \
    \ .                                                               .\n     .  \
    \                         (variable)                          .\n     |      \
    \                                                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          message-size    the number of octets in the message that\n        \
    \                  follows, as a 16-bit unsigned integer in\n                \
    \          network byte order.\n          All other fields are as specified in\
    \ DHCPv4 [RFC2131].\n                 Figure 2:  Format of a DHCPv4 Message in\
    \ TCP\n   The intent in using this format is that code that currently knows how\n\
    \   to deal with sending or receiving a message in [RFC2131] format will\n   easily\
    \ be able to deal with the message contained in the TCP framing.\n"
- title: 6.2.  New or Changed Options
  contents:
  - "6.2.  New or Changed Options\n   The existing messages DHCPLEASEUNASSIGNED and\
    \ DHCPLEASEACTIVE are\n   used as the value of the dhcp-message-type option to\
    \ indicate an IP\n   address that is currently not leased or currently leased\
    \ to a DHCPv4\n   client, respectively [RFC4388].\n   Additional options have\
    \ also been defined to enable the Bulk\n   Leasequery protocol to communicate\
    \ useful information to the\n   requestor.\n"
- title: 6.2.1.  dhcp-message-type
  contents:
  - "6.2.1.  dhcp-message-type\n   The dhcp-message-type option (option 53) from Section\
    \ 9.6 of\n   [RFC2132] requires new values.  The values of these message types\
    \ are\n   shown below in an extension of the table from Section 9.6 of\n   [RFC2132]:\n\
    \            Value   Message Type\n            -----   ------------\n        \
    \    14      DHCPBULKLEASEQUERY\n            15      DHCPLEASEQUERYDONE\n"
- title: 6.2.2.  status-code
  contents:
  - "6.2.2.  status-code\n   The status-code option allows a machine-readable value\
    \ to be returned\n   regarding the status of a DHCPBULKLEASEQUERY request.\n \
    \  This option has two possible scopes when used with Bulk Leasequery,\n   depending\
    \ on the context in which it appears.  It refers to the\n   information in a single\
    \ Leasequery reply if the value of the dhcp-\n   message-type is DHCPLEASEACTIVE\
    \ or DHCPLEASEUNASSIGNED.  It refers to\n   the message stream related to an entire\
    \ request if the value of the\n   dhcp-message-type is DHCPLEASEQUERYDONE.\n \
    \  The code for this option is 151.  The length of this option is a\n   minimum\
    \ of 1 octet.\n                     Status           Status\n       Code    Len\
    \    Code            Message\n      +------+------+------+------+------+--   --+-----+\n\
    \      |  151 | n+1  |status|  s1  |  s2  |  ...  | sn  |\n      +------+------+------+------+------+--\
    \   --+-----+\n   The status-code is indicated in one octet as defined in the\
    \ table\n   below.  The Status Message is an optional UTF-8-encoded text string\n\
    \   suitable for display to an end user.  This text string MUST NOT\n   contain\
    \ a termination character (e.g., a null).  The Len field\n   describes the length\
    \ of the Status Message without any terminator\n   character.  Null characters\
    \ MUST NOT appear in the Status Message\n   string, and it is a protocol violation\
    \ for them to appear in any\n   position in the Status Message, including at the\
    \ end.\n     Name    Status Code Description\n     ----    ----------- -----------\n\
    \     Success         000 Success.  Also signaled by absence of\n            \
    \             a status-code option.\n     UnspecFail      001 Failure, reason\
    \ unspecified.\n     QueryTerminated 002 Indicates that the server is unable to\n\
    \                         perform a query or has prematurely terminated\n    \
    \                     the query for some reason (which should be\n           \
    \              communicated in the text message).\n     MalformedQuery  003 The\
    \ query was not understood.\n     NotAllowed      004 The query or request was\
    \ understood but was\n                         not allowed in this context.\n\
    \   A status-code option MAY appear in the options field of a DHCPv4\n   message.\
    \  If the status-code option does not appear, it is assumed\n   that the operation\
    \ was successful.  The status-code option SHOULD NOT\n   appear in a message that\
    \ is successful unless there is some text\n   string that needs to be communicated\
    \ to the requestor.\n"
- title: 6.2.3.  base-time
  contents:
  - "6.2.3.  base-time\n   The base-time option is the current time the message was\
    \ created to\n   be sent by the DHCPv4 server to the requestor of the Bulk Leasequery.\n\
    \   This MUST be an absolute time.  All of the other time-based options\n   in\
    \ the reply message are relative to this time, including the dhcp-\n   lease-time\
    \ [RFC2132] and client-last-transaction-time [RFC4388].\n   This time is in the\
    \ context of the DHCPv4 server that placed this\n   option in a message.\n   This\
    \ is an unsigned integer in network byte order.\n   The code for this option is\
    \ 152.  The length of this option is 4\n   octets.\n                       DHCPv4\
    \ Server\n       Code   Len        base-time\n      +-----+-----+-----+-----+-----+-----+\n\
    \      | 152 |  4  |  t1 |  t2 |  t3 |  t4 |\n      +-----+-----+-----+-----+-----+-----+\n"
- title: 6.2.4.  start-time-of-state
  contents:
  - "6.2.4.  start-time-of-state\n   The start-time-of-state option allows the receiver\
    \ to determine the\n   time at which the IP address made the transition into its\
    \ current\n   state.\n   This MUST NOT be an absolute time, which is equivalent\
    \ to saying that\n   this MUST NOT be an absolute number of seconds since January\
    \ 1, 1970.\n   Instead, this MUST be the unsigned integer number of seconds from\
    \ the\n   time the IP address transitioned its current state to the time\n   specified\
    \ in the base-time option in the same message.\n   This is an unsigned integer\
    \ in network byte order.\n   The code for this option is 153.  The length of this\
    \ option is 4\n   octets.\n                     Seconds in the past\n       Code\
    \   Len      from base-time\n      +-----+-----+-----+-----+-----+-----+\n   \
    \   | 153 |  4  |  t1 |  t2 |  t3 |  t4 |\n      +-----+-----+-----+-----+-----+-----+\n"
- title: 6.2.5.  query-start-time
  contents:
  - "6.2.5.  query-start-time\n   The query-start-time option specifies a start query\
    \ time to the\n   DHCPv4 server.  If specified, only bindings that have changed\
    \ on or\n   after the query-start-time should be included in the response to the\n\
    \   query.\n   The requestor MUST determine the query-start-time using lease\n\
    \   information it has received from the DHCPv4 server.  This MUST be an\n   absolute\
    \ time in the DHCPv4 server's context (see Section 7.4).\n   Typically (though\
    \ this is not a requirement), the query-start-time\n   option will contain the\
    \ value most recently received in a base-time\n   option by the requestor, as\
    \ this will indicate the last successful\n   communication with the DHCP server.\n\
    \   This MUST be an absolute time.\n   This is an unsigned integer in network\
    \ byte order.\n   The code for this option is 154.  The length of this option\
    \ is 4\n   octets.\n                         DHCPv4 Server\n       Code   Len\
    \      query-start-time\n      +-----+-----+-----+-----+-----+-----+\n      |\
    \ 154 |  4  |  t1 |  t2 |  t3 |  t4 |\n      +-----+-----+-----+-----+-----+-----+\n"
- title: 6.2.6.  query-end-time
  contents:
  - "6.2.6.  query-end-time\n   The query-end-time option specifies an end query time\
    \ to the DHCPv4\n   server.  If specified, only bindings that have changed on\
    \ or before\n   the query-end-time should be included in the response to the query.\n\
    \   The requestor MUST determine the query-end-time based on lease\n   information\
    \ it has received from the DHCPv4 server.  This MUST be an\n   absolute time in\
    \ the context of the DHCPv4 server.\n   In the absence of information to the contrary,\
    \ the requestor SHOULD\n   assume that the time context of the DHCPv4 server is\
    \ identical to the\n   time context of the requestor (see Section 7.4).\n   This\
    \ is an unsigned integer in network byte order.\n   The code for this option is\
    \ 155.  The length of this option is 4\n   octets.\n                         DHCPv4\
    \ Server\n       Code   Len       query-end-time\n      +-----+-----+-----+-----+-----+-----+\n\
    \      | 155 |  4  |  t1 |  t2 |  t3 |  t4 |\n      +-----+-----+-----+-----+-----+-----+\n"
- title: 6.2.7.  dhcp-state
  contents:
  - "6.2.7.  dhcp-state\n   The dhcp-state option allows greater detail to be returned\
    \ than\n   allowed by the DHCPLEASEACTIVE and DHCPLEASEUNASSIGNED message types.\n\
    \   The code for this option is 156.  The length of this option is 1\n   octet.\n\
    \       0                   1                   2\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     156       |    Length     |    State      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        156      The option code.\n        Length   The option length, 1 octet.\n\
    \        State    The state of the IP address.\n     Value  State\n     -----\
    \  -----\n       1    AVAILABLE     Address is available to local DHCPv4 server\n\
    \       2    ACTIVE        Address is assigned to a DHCPv4 client\n       3  \
    \  EXPIRED       Lease has expired\n       4    RELEASED      Lease has been released\
    \ by DHCPv4 client\n       5    ABANDONED     Server or client flagged address\
    \ as unusable\n       6    RESET         Lease was freed by some external agent\n\
    \       7    REMOTE        Address is available to a remote DHCPv4 server\n  \
    \     8    TRANSITIONING Address is moving between states\n   Note that some of\
    \ these states may be transient and may not appear in\n   normal use.  A DHCPv4\
    \ server MUST implement at least the AVAILABLE\n   and ACTIVE states and SHOULD\
    \ implement at least the ABANDONED and\n   RESET states.\n   Note the states AVAILABLE\
    \ and REMOTE are relative to the current\n   server.  An address that is available\
    \ to the current server should\n   show AVAILABLE on that server, and if another\
    \ server is involved with\n   that address as well, it should show as REMOTE on\
    \ that other server.\n   The dhcp-state option SHOULD contain ACTIVE when it appears\
    \ in a\n   DHCPLEASEACTIVE message.  A DHCPv4 server MAY choose to not send a\n\
    \   dhcp-state option in a DHCPLEASEACTIVE message, and a requestor\n   SHOULD\
    \ assume that the dhcp-state is ACTIVE if no dhcp-state option\n   appears in\
    \ a DHCPLEASEACTIVE message.\n   The reference to local and remote relate to possible\
    \ use in an\n   environment that includes multiple servers cooperating to provide\
    \ an\n   increased availability solution.  In this case, an IP address with\n\
    \   the state of AVAILABLE is available to the local server, while one\n   with\
    \ the state of REMOTE is available to a remote server.  Usually,\n   an IP address\
    \ that is AVAILABLE on one server would be REMOTE on any\n   remote server.  The\
    \ TRANSITIONING state is also likely to be useful\n   in multiple server deployments,\
    \ where sometimes one server must\n   interlock a state change with one or more\
    \ other servers.  Should a\n   Bulk Leasequery need to send information concerning\
    \ the state of the\n   IP address during this period, it SHOULD use the TRANSITIONING\
    \ state,\n   since the IP address is likely to be neither ACTIVE or AVAILABLE.\n\
    \   There is no requirement for the state of an IP address to transition\n   in\
    \ a well-defined way from state to state.  To put this another way,\n   you cannot\
    \ draw a simple state transition graph for the states of an\n   IP address, and\
    \ the requestor of a Leasequery MUST NOT depend on one\n   certain state always\
    \ following a particular previous state.  While a\n   state transition diagram\
    \ can be drawn, it would be fully connected\n   and therefore conveys no useful\
    \ information.  Every state can (at\n   times) follow every other state.\n"
- title: 6.2.8.  data-source
  contents:
  - "6.2.8.  data-source\n   The data-source option contains information about the\
    \ source of the\n   data in a DHCPLEASEACTIVE or a DHCPLEASEUNASSIGNED message.\
    \  It\n   SHOULD be used when there are two or more servers that might have\n\
    \   information about a particular IP address binding.  Frequently, two\n   servers\
    \ work together to provide an increased availability solution\n   for the DHCPv4\
    \ service, and in these cases, both servers will respond\n   to Bulk Leasequery\
    \ requests for the same IP address.  When one server\n   is working with another\
    \ server and both may respond with information\n   about the same IP address,\
    \ each server SHOULD return the data-source\n   option with the other information\
    \ provided about the IP address.\n   The data contained in this option will allow\
    \ an external process to\n   better discriminate between the information provided\
    \ by each of the\n   servers servicing this IPv4 address.\n   The code for this\
    \ option is 157.  The length of this option is 1\n   octet.\n         0      \
    \             1                   2\n         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        |     157       |    Length     |     Flags     |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          157      The option code.\n          Length   The option length, 1\
    \ octet.\n          Flags    The source information for this message.\n      \
    \                0 1 2 3 4 5 6 7\n                     +-+-+-+-+-+-+-+-+\n   \
    \                  |    UNA      |R|\n                     +-+-+-+-+-+-+-+-+\n\
    \                     R:  REMOTE flag\n                          remote = 1\n\
    \                          local = 0\n                     UNA:  UNASSIGNED\n\
    \   The REMOTE flag is used to indicate where the most recent change of\n   state\
    \ (or other interesting change) concerning this IPv4 address took\n   place. \
    \ If the value is local, then the change took place on the\n   server from which\
    \ this message was transmitted.  If the value is\n   remote, then the change took\
    \ place on some other server and was made\n   known to the server from which this\
    \ message was transmitted.\n   If this option was requested and it doesn't appear,\
    \ the requestor\n   MUST consider that the data-source was local.\n   Unassigned\
    \ bits MUST be ignored.\n"
- title: 6.2.9.  Virtual Subnet Selection Type and Information
  contents:
  - "6.2.9.  Virtual Subnet Selection Type and Information\n   All of the (sub-)options\
    \ defined in [RFC6607] carry identical\n   payloads, consisting of a type and\
    \ additional VSS (Virtual Subnet\n   Selection) information.  The existing table\
    \ is extended (see below)\n   with a new type 254 to allow specification of a\
    \ type code that\n   indicates that all VPNs are to be used to process the Bulk\n\
    \   Leasequery.\n              Type   VSS Information Format\n              ----------------------------------------------------------\n\
    \              0      Network Virtual Terminal (NVT) ASCII VPN identifier\n  \
    \            1      RFC 2685 VPN-ID\n   CHANGED -> 2-253  Unassigned\n      NEW\
    \  -> 254    All VPNs (wildcard)\n              255    Global, default VPN\n"
- title: 6.3.  Connection and Transmission Parameters
  contents:
  - "6.3.  Connection and Transmission Parameters\n   DHCPv4 servers that support\
    \ Bulk Leasequery SHOULD listen for\n   incoming TCP connections on the DHCPv4\
    \ server port 67.\n   Implementations MAY offer to make the incoming port configurable,\
    \ but\n   port 67 MUST be the default.  Requestors SHOULD make TCP connections\n\
    \   to port 67 and MAY offer to make the destination server port\n   configurable.\n\
    \   This section presents a table of values used to control Bulk\n   Leasequery\
    \ behavior, including recommended defaults.  Implementations\n   MAY make these\
    \ values configurable.  However, configuring too-small\n   timeout values may\
    \ lead to harmful behavior both to this application\n   as well as to other traffic\
    \ in the network.  As a result, timeout\n   values smaller than the default values\
    \ are NOT RECOMMENDED.\n   Parameter             Default   Description\n   --------------------------------------------------------------------\n\
    \   BULK_LQ_DATA_TIMEOUT  300 secs  Bulk Leasequery data timeout\n           \
    \                        for both client and server\n                        \
    \           (see Sections 7 and 8)\n   BULK_LQ_MAX_CONNS     10        Max Bulk\
    \ Leasequery TCP connections\n                                   at the server\
    \ side (see Section 8.1)\n"
- title: 7.  Requestor Behavior
  contents:
  - '7.  Requestor Behavior

    '
- title: 7.1.  Connecting and General Processing
  contents:
  - "7.1.  Connecting and General Processing\n   A requestor attempts to establish\
    \ a TCP connection to a DHCPv4 server\n   in order to initiate a Leasequery exchange.\
    \  If the attempt fails,\n   the requestor MAY retry.\n   If Bulk Leasequery is\
    \ terminated prematurely by a DHCPLEASEQUERYDONE\n   with a status-code option\
    \ with a status code of QueryTerminated or by\n   the failure of the connection\
    \ over which it was being submitted, the\n   requestor MAY retry the request after\
    \ the creation of a new\n   connection.\n   Messages from the DHCPv4 server come\
    \ as multiple responses to a\n   single DHCPBULKLEASEQUERY message.  Thus, each\
    \ DHCPBULKLEASEQUERY\n   request MUST have an xid (transaction-id) unique on the\
    \ connection on\n   which it is sent.  All of the messages that come as a response\
    \ to\n   that message will contain the same xid as the request.  The xid\n   allows\
    \ the data-streams of two different DHCPBULKLEASEQUERY requests\n   to be demultiplexed\
    \ by the requestor.\n"
- title: 7.2.  Forming a Bulk Leasequery
  contents:
  - "7.2.  Forming a Bulk Leasequery\n   Bulk Leasequery is designed to create a connection\
    \ that will transfer\n   the state of some subset (or possibly all) of the IP\
    \ address bindings\n   from the DHCPv4 server to the requestor.  The DHCPv4 server\
    \ will send\n   all of the requested IPv4 address bindings across this connection\n\
    \   with minimal delay after it receives the request.  In this context,\n   \"\
    all IP address binding information\" means information about all IPv4\n   addresses\
    \ configured within the DHCPv4 server that meet the specified\n   query criteria.\
    \  For some query criteria, this may include IP address\n   binding information\
    \ for IP addresses that may not now have or ever\n   have had an association with\
    \ a specific DHCPv4 client.\n   To form the Bulk query, a DHCPv4 request is constructed\
    \ with a dhcp-\n   message-type of DHCPBULKLEASEQUERY.  The query SHOULD have\
    \ a dhcp-\n   parameter-request-list to inform the DHCPv4 server which DHCPv4\n\
    \   options are of interest to the requestor sending the\n   DHCPBULKLEASEQUERY\
    \ message.  The dhcp-parameter-request-list in a\n   DHCPBULKLEASEQUERY message\
    \ SHOULD contain the codes for base-time,\n   dhcp-lease-time, start-time-of-state,\
    \ and client-last-transaction-\n   time.\n   A DHCPBULKLEASEQUERY request is constructed\
    \ of one primary query and\n   optionally one or more qualifiers for it.\n   The\
    \ possible primary queries are listed below.  Each\n   DHCPBULKLEASEQUERY request\
    \ MUST contain only one of these primary\n   queries.\n   o  Query by MAC address\n\
    \      In a Query by MAC address, the chaddr, htype, and hlen of the\n      DHCPv4\
    \ packet are filled in with the values requested.\n   o  Query by Client-identifier\n\
    \      In a Query by Client-identifier, a Client-identifier option\n      containing\
    \ the requested value is included in the\n      DHCPBULKLEASEQUERY request.\n\
    \   o  Query by Remote ID\n      In a Query by Remote ID, a Remote ID sub-option\
    \ containing the\n      requested value is included in the relay-agent-information\
    \ option\n      of the DHCPBULKLEASEQUERY request.\n   o  Query by Relay-ID\n\
    \      In a Query by Relay-ID, a Relay-ID sub-option [RFC6925] containing\n  \
    \    the requested value is included in the relay-agent-information\n      option\
    \ of the DHCPBULKLEASEQUERY request.\n   o  Query for All Configured IP Addresses\n\
    \      A Query for All Configured IP addresses is signaled by the absence\n  \
    \    of any other primary query.\n   There are three qualifiers that can be applied\
    \ to any of the above\n   primary queries.  These qualifiers can appear individually\
    \ or\n   together in any combination, but only one of each can appear.\n   o \
    \ Query Start Time\n      Inclusion of a query-start-time option specifies that\
    \ only IP\n      address bindings that have changed on or after the time specified\n\
    \      in the query-start-time option should be returned.\n   o  Query End Time\n\
    \      Inclusion of a query-end-time option specifies that only IP\n      address\
    \ bindings that have changed on or before the time specified\n      in the query-end-time\
    \ option should be returned.\n   o  VPN-ID\n      If no VPN-ID option appears\
    \ in the DHCPBULKLEASEQUERY, the default\n      (global) VPN is searched to satisfy\
    \ the query specified by the\n      DHCPBULKLEASEQUERY.  Using the VPN-ID option\
    \ [RFC6607] allows the\n      requestor to specify a single VPN other than the\
    \ default VPN.  In\n      addition, the VPN-ID option has been extended as part\
    \ of this\n      document to allow specification that all configured VPNs be\n\
    \      searched in order to satisfy the query specified in the\n      DHCPBULKLEASEQUERY.\n\
    \      In all cases, any message returned from a DHCPBULKLEASEQUERY\n      request\
    \ containing information about an IP address for other than\n      the default\
    \ (global) VPN MUST contain a VPN-ID option in the\n      message.\n   Use of\
    \ the query-start-time or the query-end-time options or both can\n   serve to\
    \ reduce the amount of data transferred over the TCP\n   connection by a considerable\
    \ amount.  Note that the times specified\n   in the query-start-time or query-end-time\
    \ options are absolute times,\n   not durations offset from \"now\".\n   The TCP\
    \ connection may become blocked or stop being writable while\n   the requestor\
    \ is sending its query.  Should this happen, the\n   implementation's behavior\
    \ is controlled by the current value of\n   BULK_LQ_DATA_TIMEOUT.  The default\
    \ value is given elsewhere in this\n   document, and this value may be overridden\
    \ by local configuration of\n   the operator.\n   If this situation is detected,\
    \ the requestor SHOULD start a timer\n   using the current value of BULK_LQ_DATA_TIMEOUT.\
    \  If that timer\n   expires, the requestor SHOULD terminate the connection. \
    \ This timer\n   is completely independent of any TCP timeout established by the\
    \ TCP\n   protocol connection.\n"
- title: 7.3.  Processing Bulk Replies
  contents:
  - "7.3.  Processing Bulk Replies\n   The requestor attempts to read a DHCPv4 Leasequery\
    \ reply message from\n   the TCP connection.\n   The TCP connection may stop delivering\
    \ reply data (i.e., the\n   connection stops being readable).  Should this happen,\
    \ the\n   implementation's behavior is controlled by the current value of\n  \
    \ BULK_LQ_DATA_TIMEOUT.  The default value is given elsewhere in this\n   document,\
    \ and this value may be overridden by local configuration of\n   the operator.\n\
    \   If this situation is detected, the requestor SHOULD start a timer\n   using\
    \ the current value of BULK_LQ_DATA_TIMEOUT.  If that timer\n   expires, the requestor\
    \ SHOULD terminate the connection.\n   A single Bulk Leasequery can, and usually\
    \ will, result in a large\n   number of replies.  The requestor MUST be prepared\
    \ to receive more\n   than one reply with an xid matching a single DHCPBULKLEASEQUERY\n\
    \   message from a single DHCPv4 server.  If the xid in the received\n   message\
    \ does not match an outstanding DHCPBULKLEASEQUERY message, the\n   requestor\
    \ MUST close the TCP connection.\n   If the requestor receives more data than\
    \ it can process, it can\n   simply abort the connection and try again with a\
    \ more specific\n   request.  It can also simply read the TCP connection more\
    \ slowly and\n   match the rate at which it can digest the information returned\
    \ in the\n   Bulk Leasequery packets with the rate at which it reads those packets\n\
    \   from the TCP connection.\n   The DHCPv4 server MUST send a server-identifier\
    \ option (option 54) in\n   the first response to any DHCPBULKLEASEQUERY message.\
    \  The DHCPv4\n   server SHOULD NOT send server-identifier options in subsequent\n\
    \   responses to that DHCPBULKLEASEQUERY message.  The requestor MUST\n   cache\
    \ the server-identifier option from the first response and apply\n   it to any\
    \ subsequent responses.\n   The response messages generated by a DHCPBULKLEASEQUERY\
    \ request are:\n   o  DHCPLEASEACTIVE\n      A Bulk Leasequery will generate DHCPLEASEACTIVE\
    \ messages\n      containing binding data for bound IP addresses that match the\n\
    \      specified query criteria.  The IP address that is bound to a\n      DHCPv4\
    \ client will appear in the ciaddr field of the\n      DHCPLEASEACTIVE message.\
    \  The message may contain a non-zero\n      chaddr, htype, hlen, and possibly\
    \ additional options.\n   o  DHCPLEASEUNASSIGNED\n      Some queries will also\
    \ generate DHCPLEASEUNASSIGNED messages for\n      IP addresses that match the\
    \ query criteria.  These messages\n      indicate that the IP address is managed\
    \ by the DHCPv4 server but\n      is not currently bound to any DHCPv4 client.\
    \  The IP address to\n      which this message refers will appear in the ciaddr\
    \ field of the\n      DHCPLEASEUNASSIGNED message.  A DHCPLEASEUNASSGINED message\
    \ MAY\n      also contain information about the last DHCPv4 client that was\n\
    \      bound to this IP address.  The message may contain a non-zero\n      chaddr,\
    \ htype, hlen, and possibly additional options in this case.\n   o  DHCPLEASEQUERYDONE\n\
    \      A response of DHCPLEASEQUERYDONE indicates that the server has\n      completed\
    \ its response to the query and that no more messages will\n      be sent in response\
    \ to the DHCPBULKLEASEQUERY.  More details will\n      sometimes be available\
    \ in the received status-code option in the\n      DHCPLEASEQUERYDONE message.\
    \  If there is no status-code option in\n      the DHCPLEASEQUERYDONE message,\
    \ then the query completed\n      successfully.\n      Note that a query that\
    \ returned no data, that is, a\n      DHCPBULKLEASEQUERY request followed by a\
    \ DHCPLEASEQUERYDONE\n      response, is considered a successful query in that\
    \ no errors\n      occurred during the processing.  It is not considered an error\
    \ to\n      have no information to return to a DHCPBULKLEASEQUERY request.\n \
    \  The DHCPLEASEUNKNOWN message MUST NOT appear in a response to a Bulk\n   Leasequery.\n\
    \   The requestor MUST NOT assume that there is any inherent order in the\n  \
    \ IP address binding information that is sent in response to a\n   DHCPBULKLEASEQUERY.\
    \  While the base-time will tend to increase\n   monotonically (as it is the current\
    \ time on the DHCPv4 server), the\n   actual time that any IP address binding\
    \ information changed is\n   unrelated to the base-time.\n   The DHCPLEASEQUERYDONE\
    \ message always ends a successful\n   DHCPBULKLEASEQUERY request and any unsuccessful\
    \ DHCPBULKLEASEQUERY\n   requests not terminated by a dropped connection.  After\
    \ receiving a\n   DHCPLEASEQUERYDONE from a server, the requestor MAY close the\
    \ TCP\n   connection to that server if no other DHCPBULKLEASEQUERY is\n   outstanding\
    \ on that TCP connection.\n   The DHCPv4 Leasequery protocol [RFC4388] uses the\
    \ associated-ip\n   option as an indicator that multiple bindings were present\
    \ in\n   response to a single DHCPv4 client-based query.  For Bulk Leasequery,\n\
    \   a separate message is returned for each binding, so the associated-ip\n  \
    \ option is not used.\n"
- title: 7.4.  Processing Time Values in Leasequery Messages
  contents:
  - "7.4.  Processing Time Values in Leasequery Messages\n   Bulk Leasequery requests\
    \ may be made to a DHCPv4 server whose\n   absolute time may not be synchronized\
    \ with the local time of the\n   requestor.  Thus, there are at least two time\
    \ contexts in even the\n   simplest Bulk Leasequery response, and in the situation\
    \ where\n   multiple DHCPv4 servers are queried, the situation becomes even more\n\
    \   complex.\n   If the requestor of a Bulk Leasequery is saving the data returned\
    \ in\n   some form, it has a requirement to store a variety of time values;\n\
    \   some of these will be time in the context of the requestor, and some\n   will\
    \ be time in the context of the DHCPv4 server.\n   When receiving a DHCPLEASEACTIVE\
    \ or DHCPLEASEUNASSIGNED message from\n   the DHCPv4 server, the message will\
    \ contain a base-time option.  The\n   time contained in this base-time option\
    \ is in the context of the\n   DHCPv4 server.  As such, it is an ideal time to\
    \ save and use as input\n   to a DHCPBULKLEASEQUERY in the query-start-time or\
    \ query-end-time\n   options, should the requestor ever need to issue a DHCPBULKLEASEQUERY\n\
    \   message using those options as part of a later query, since those\n   options\
    \ require a time in the context of the DHCPv4 server.\n   In addition to saving\
    \ the base-time for possible future use in a\n   query-start-time or query-end-time\
    \ option, the base-time is used as\n   part of the conversion of the other times\
    \ in the Leasequery message\n   to values that are meaningful in the context of\
    \ the requestor.  These\n   other time values are specified as a offset (duration)\
    \ from the base-\n   time value and not as an absolute time.\n   In systems whose\
    \ clocks are synchronized, perhaps using NTP, the\n   clock skew will usually\
    \ be zero.\n"
- title: 7.5.  Querying Multiple Servers
  contents:
  - "7.5.  Querying Multiple Servers\n   A Bulk Leasequery requestor MAY be configured\
    \ to attempt to connect\n   to and query from multiple DHCPv4 servers in parallel.\
    \  The DHCPv4\n   Leasequery specification [RFC4388] includes a discussion about\n\
    \   reconciling binding data received from multiple DHCPv4 servers.\n   In addition,\
    \ the algorithm in Section 7.6 should be used.\n"
- title: 7.6.  Making Sense out of Multiple Responses concerning a Single IPv4
  contents:
  - "7.6.  Making Sense out of Multiple Responses concerning a Single IPv4\n     \
    \ Address\n   Any requestor of an Bulk Leasequery MUST be prepared for multiple\n\
    \   responses to arrive for a particular IPv4 address from multiple\n   different\
    \ DHCPv4 servers.  The following algorithm SHOULD be used to\n   decide if the\
    \ information just received is more up to date (i.e.,\n   better) than the best\
    \ existing information.  In the discussion below,\n   the information that is\
    \ received from a DHCPv4 server about a\n   particular IPv4 address is termed\
    \ a \"record\".  The times used in the\n   algorithm below SHOULD have been converted\
    \ into the requestor's\n   context, and the time comparisons SHOULD be performed\
    \ in a manner\n   consistent with the information in Section 7.4.\n   o  If both\
    \ the existing and the new record contain client-last-\n      transaction-time\
    \ information, the record with the later client-\n      last-transaction-time\
    \ is considered better.\n   o  If one of the records contains client-last-transaction-time\n\
    \      information and the other one doesn't, then compare the client-\n     \
    \ last-transaction-time in the record that contains it against the\n      other\
    \ record's start-time-of-state.  The record with the later\n      time is considered\
    \ better.\n   o  If neither record contains client-last-transaction-time\n   \
    \   information, compare their start-time-of-state information.  The\n      record\
    \ with the later start-time-of-state is considered better.\n   o  If none of the\
    \ comparisons above yield a clear answer as to which\n      record is later, then\
    \ compare the value of the REMOTE flag from\n      the data-source option for\
    \ each record.  If the values of the\n      REMOTE flag are different between\
    \ the two records, the record with\n      the REMOTE flag value of local is considered\
    \ better.\n   The above algorithm does not necessarily determine which record\
    \ is\n   better.  In the event that the algorithm is inconclusive with regard\n\
    \   to a record that was just received by the requestor, the requestor\n   SHOULD\
    \ use additional information in the two records to make a\n   determination as\
    \ to which record is better.\n"
- title: 7.7.  Multiple Queries to a Single Server over One Connection
  contents:
  - "7.7.  Multiple Queries to a Single Server over One Connection\n   Bulk Leasequery\
    \ requestors may need to make multiple queries in order\n   to recover binding\
    \ information.  A requestor MAY use a single\n   connection to issue multiple\
    \ queries to a server willing to support\n   them.  Each query MUST have a unique\
    \ xid.\n   A server SHOULD allow configuration of the number of queries that can\n\
    \   be processed simultaneously over a single connection.  A server\n   SHOULD\
    \ read the number of queries it is configured to process\n   simultaneously and\
    \ only read any subsequent queries as current\n   queries are processed.\n   A\
    \ server that is processing multiple queries simultaneously MUST NOT\n   block\
    \ sending replies on new queries until all replies for the\n   existing query\
    \ are complete.  Requestors need to be aware that\n   replies for multiple queries\
    \ may be interleaved within the stream of\n   reply messages.  Requestors that\
    \ are not able to process interleaved\n   replies (based on xid) MUST NOT send\
    \ more than one query over a\n   single connection prior to the completion of\
    \ the previous query.\n   Requestors should be aware that servers are not required\
    \ to process\n   more than one query over a connection at a time (the limiting\
    \ case\n   for the configuration described above) and that servers are likely\
    \ to\n   limit the rate at which they process queries from any one requestor.\n"
- title: 7.7.1.  Example
  contents:
  - "7.7.1.  Example\n   This example illustrates what a series of queries and responses\
    \ might\n   look like.  This is only an example -- there is no requirement that\n\
    \   this sequence must be followed or that requestors or servers must\n   support\
    \ parallel queries.\n   In the example session, the client sends four queries\
    \ after\n   establishing a connection.  Query 1 returns no results; query 2\n\
    \   returns 3 messages, and the stream of replies concludes before the\n   client\
    \ issues any new query.  Query 3 and query 4 overlap, and the\n   server interleaves\
    \ its replies to those two queries.\n     Requestor                          \
    \   Server\n     ---------                             ------\n     DHCPBULKLEASEQUERY\
    \ xid 1 ----->\n                              <-----       DHCPLEASEQUERYDONE\
    \ xid 1\n     DHCPBULKLEASEQUERY xid 2 ----->\n                              <-----\
    \       DHCPLEASEACTIVE xid 2\n                              <-----       DHCPLEASEACTIVE\
    \ xid 2\n                              <-----       DHCPLEASEACTIVE xid 2\n  \
    \                            <-----       DHCPLEASEQUERYDONE xid 2\n     DHCPBULKLEASEQUERY\
    \ xid 3 ----->\n     DHCPBULKLEASEQUERY xid 4 ----->\n                       \
    \       <-----       DHCPLEASEACTIVE xid 4\n                              <-----\
    \       DHCPLEASEACTIVE xid 4\n                              <-----       DHCPLEASEACTIVE\
    \ xid 3\n                              <-----       DHCPLEASEACTIVE xid 4\n  \
    \                            <-----       DHCPLEASEUNASSIGNED xid 3\n        \
    \                      <-----       DHCPLEASEACTIVE xid 4\n                  \
    \            <-----       DHCPLEASEACTIVE xid 3\n                            \
    \  <-----       DHCPLEASEQUERYDONE xid 3\n                              <-----\
    \       DHCPLEASEACTIVE xid 4\n                              <-----       DHCPLEASEQUERYDONE\
    \ xid 4\n"
- title: 7.8.  Closing Connections
  contents:
  - "7.8.  Closing Connections\n   If a requestor has no additional queries to send,\
    \ or doesn't know if\n   it has additional queries to send or not, then it SHOULD\
    \ close the\n   connection after receiving the DHCPLEASEQUERYDONE message for\
    \ the\n   last outstanding query that it sent.\n   The requestor SHOULD close\
    \ connections in a graceful manner and not\n   an abort.  The requestor SHOULD\
    \ NOT assume that the manner in which\n   the DHCP server closed a connection\
    \ carries any special meaning.\n   Typically, the requestor is the entity that\
    \ will close the\n   connection, as servers will often wait with an open connection\
    \ in\n   case the requestor has additional queries.\n   If a server closes a connection\
    \ with an exception condition, the\n   requestor SHOULD consider as valid any\
    \ completely received\n   intermediate results, and the requestor MAY retry the\
    \ Bulk Leasequery\n   operation.\n"
- title: 8.  Server Behavior
  contents:
  - '8.  Server Behavior

    '
- title: 8.1.  Accepting Connections
  contents:
  - "8.1.  Accepting Connections\n   Servers that implement DHCPv4 Bulk Leasequery\
    \ listen for incoming TCP\n   connections.  Port numbers are discussed in Section\
    \ 6.3.  Servers\n   MUST be able to limit the number of concurrently accepted\
    \ and active\n   connections.  The value BULK_LQ_MAX_CONNS SHOULD be the default;\n\
    \   implementations MAY permit the value to be configurable.  Connections\n  \
    \ SHOULD be accepted and, if the number of connections is over\n   BULK_LQ_MAX_CONNS,\
    \ they SHOULD be closed immediately.\n   Servers MAY restrict Bulk Leasequery\
    \ connections and\n   DHCPBULKLEASEQUERY messages to certain requestors.  Connections\
    \ not\n   from permitted requestors SHOULD be closed immediately to avoid\n  \
    \ server connection resource exhaustion.  Servers MAY restrict some\n   requestors\
    \ to certain query types.  Servers MAY reply to queries that\n   are not permitted\
    \ with the DHCPLEASEQUERYDONE message with a status-\n   code option status of\
    \ NotAllowed or MAY simply close the connection.\n   If the TCP connection becomes\
    \ blocked while the server is accepting a\n   connection or reading a query, it\
    \ SHOULD be prepared to terminate the\n   connection after a BULK_LQ_DATA_TIMEOUT.\
    \  We make this recommendation\n   to allow servers to control the period of time\
    \ they are willing to\n   wait before abandoning an inactive connection, independent\
    \ of the TCP\n   implementations they may be using.\n"
- title: 8.2.  Replying to a Bulk Leasequery
  contents:
  - "8.2.  Replying to a Bulk Leasequery\n   If the connection becomes blocked while\
    \ the server is attempting to\n   send reply messages, the server SHOULD be prepared\
    \ to terminate the\n   TCP connection after a BULK_LQ_DATA_TIMEOUT.\n   Every\
    \ Bulk Leasequery request MUST be terminated by sending a final\n   DHCPLEASEQUERYDONE\
    \ message if such a message can be sent.  The\n   DHCPLEASEQUERYDONE message MUST\
    \ have a status-code option status if\n   the termination was other than successful,\
    \ and SHOULD NOT contain a\n   status-code option status if the termination was\
    \ successful.\n   If the DHCPv4 server encounters an error during processing of\
    \ the\n   DHCPBULKLEASEQUERY message, either during initial processing or later\n\
    \   during the message processing, it SHOULD send a DHCPLEASEQUERYDONE\n   containing\
    \ a status-code option.  It MAY close the connection after\n   this error is signaled,\
    \ but that is not required.\n   If the server does not find any bindings satisfying\
    \ a query, it MUST\n   send a DHCPLEASEQUERYDONE.  It SHOULD NOT include a status-code\n\
    \   option with a Success status unless there is a useful string to\n   include\
    \ in the status-code option.  Otherwise, the server sends each\n   binding's data\
    \ in a DHCPLEASEACTIVE or DHCPLEASEUNASSIGNED message.\n   The response to a DHCPBULKLEASEQUERY\
    \ may involve examination of\n   multiple DHCPv4 IP address bindings maintained\
    \ by the DHCPv4 server.\n   The Bulk Leasequery protocol does not require any\
    \ ordering of the IP\n   addresses returned in DHCPLEASEACTIVE or DHCPLEASEUNASSIGNED\n\
    \   messages.\n   When responding to a DHCPBULKLEASEQUERY message, the DHCPv4\
    \ server\n   MUST NOT send more than one message for each applicable IP address,\n\
    \   even if the state of some of those IP addresses changes during the\n   processing\
    \ of the message.  Updates to such IP address state are\n   already handled by\
    \ normal protocol processing, so no special effort\n   is needed here.\n   If\
    \ the ciaddr, yiaddr, or siaddr is non-zero in a DHCPBULKLEASEQUERY\n   request,\
    \ the request must be terminated immediately by a\n   DHCPLEASEQUERYDONE message\
    \ with a status-code option status of\n   MalformedQuery.\n   Any DHCPBULKLEASEQUERY\
    \ that has more than one of the following\n   primary query types specified MUST\
    \ be terminated immediately by a\n   DHCPLEASEQUERYDONE message with a status-code\
    \ option status code of\n   NotAllowed.\n   The allowable queries in a DHCPBULKLEASEQUERY\
    \ message are processed\n   as follows.  Note that the descriptions of the primary\
    \ queries below\n   must be constrained by the actions of any of the three qualifiers\n\
    \   described subsequently as well.\n   The following table discusses how to process\
    \ the various queries.\n   For information on how to identify the query, see the\
    \ information in\n   Section 7.2.\n   o  Query by MAC address\n      Every IP\
    \ address that has a current binding to a DHCPv4 client\n      matching the chaddr,\
    \ htype, and hlen in the DHCPBULKLEASEQUERY\n      request MUST be returned in\
    \ a DHCPLEASEACTIVE message.\n   o  Query by Client-identifier\n      Every IP\
    \ address that has a current binding to a DHCPv4 client\n      matching the Client-identifier\
    \ option in the DHCPBULKLEASEQUERY\n      request MUST be returned in a DHCPLEASEACTIVE\
    \ message.\n   o  Query by Remote ID\n      Every IP address that has a current\
    \ binding to a DHCPv4 client\n      matching the Remote ID sub-option of the relay-agent-information\n\
    \      option in the DHCPBULKLEASEQUERY request MUST be returned in a\n      DHCPLEASEACTIVE\
    \ message.\n   o  Query by Relay-ID\n      Every IP address that has a current\
    \ binding to a DHCPv4 client\n      matching the Relay-ID sub-option of the relay-agent-information\n\
    \      option in the DHCPBULKLEASEQUERY request MUST be returned in a\n      DHCPLEASEACTIVE\
    \ message.\n   o  Query for All Configured IP Addresses\n      A Query for All\
    \ Configured IP addresses is signaled by the absence\n      of any other primary\
    \ query.  That is, if there is no value in the\n      chaddr, hlen, htype, no\
    \ Client-identifier option, and no Remote ID\n      sub-option or Relay-ID sub-option\
    \ of the relay-agent-information\n      option, then the request is a query for\
    \ information concerning all\n      configured IP addresses.  In this case, every\
    \ configured IP\n      address that has a current binding to a DHCPv4 client MUST\
    \ be\n      returned in a DHCPLEASEACTIVE message.  In addition, every\n     \
    \ configured IP address that does not have a current binding to a\n      DHCPv4\
    \ client MUST be returned in a DHCPLEASEUNASSIGNED message.\n      In this form\
    \ of query, each configured IP address MUST be returned\n      at most one time.\
    \  In the absence of qualifiers restricting the\n      number of IP addresses\
    \ returned, every configured IP address MUST\n      be returned exactly once.\n\
    \   There are three qualifiers that can be applied to any of the above\n   primary\
    \ queries.  These qualifiers can appear individually or\n   together in any combination,\
    \ but only one of each can appear.\n   o  Query Start Time\n      If a query-start-time\
    \ option appears in the DHCPBULKLEASEQUERY\n      request, only IP address bindings\
    \ that have changed on or after\n      the time specified in the query-start-time\
    \ option should be\n      returned.\n   o  Query End Time\n      If a query-end-time\
    \ option appears in the DHCPBULKLEASEQUERY\n      request, only IP address bindings\
    \ that have changed on or before\n      the time specified in the query-end-time\
    \ option should be\n      returned.\n   o  VPN-ID\n      If no VPN-ID option appears\
    \ in the DHCPBULKLEASEQUERY, the default\n      (global) VPN is used to satisfy\
    \ the query.  A VPN-ID option\n      [RFC6607] value other than the wildcard value\
    \ (254) allows the\n      requestor to specify a single VPN other than the default\
    \ VPN.  In\n      addition, the VPN-ID option has been extended as part of this\n\
    \      document to allow specification of a type 254, which indicates\n      that\
    \ all configured VPNs be searched in order to satisfy the\n      primary query.\n\
    \      In all cases, if the information returned in a DHCPLEASEACTIVE or\n   \
    \   DHCPLEASEUNASSIGNED message is for a VPN other than the default\n      (global)\
    \ VPN, a VPN-ID option MUST appear in the packet.\n   The query-start-time and\
    \ query-end-time qualifiers are used to\n   constrain the amount of data returned\
    \ by a Bulk Leasequery request by\n   returning only IP addresses whose address\
    \ bindings have changed in\n   some way during the time window specified by the\
    \ query-start-time and\n   query-end-time.\n   A DHCPv4 server SHOULD consider\
    \ an address binding to have changed\n   during a specified time window if either\
    \ the client-last-\n   transaction-time or the start-time-of-state of the address\
    \ binding\n   changed during that time window.\n   The DHCPv4 server MAY return\
    \ address binding data in any order, as\n   long as binding information for any\
    \ given IP address is not repeated.\n   When all binding data for a given DHCPBULKLEASEQUERY\
    \ has been sent,\n   the DHCPv4 server MUST send a DHCPBULKLEASEQUERYDONE message.\n"
- title: 8.3.  Building a Single Reply for Bulk Leasequery
  contents:
  - "8.3.  Building a Single Reply for Bulk Leasequery\n   The DHCPv4 Leasequery specification\
    \ [RFC4388] describes the initial\n   construction of DHCPLEASEQUERY reply messages\
    \ using the\n   DHCPLEASEACTIVE and DHCPLEASEUNASSIGNED message types in Section\n\
    \   6.4.2.  All of the reply messages in Bulk Leasequery are similar to\n   the\
    \ reply messages for an IP address query.  Message transmission and\n   framing\
    \ for TCP are described in this document in Section 6.1.\n   [RFC2131] and [RFC4388]\
    \ specify that every response message MUST\n   contain the server-identifier option.\
    \  However, that option will be\n   the same for every response from a particular\
    \ DHCPBULKLEASEQUERY\n   request.  Thus, the DHCPv4 server MUST include the server-identifier\n\
    \   option in the first message sent in response to a DHCPBULKLEASEQUERY.\n  \
    \ It SHOULD NOT include the server-identifier option in later messages.\n   The\
    \ message type of DHCPLEASEACTIVE or DHCPLEASEUNASSIGNED is based\n   on the value\
    \ of the dhcp-state option.  If the dhcp-state option\n   value is ACTIVE, then\
    \ the message type is DHCPLEASEACTIVE; otherwise,\n   the message type is DHCPLEASEUNASSIGNED.\n\
    \   In addition to the basic message construction described in [RFC4388],\n  \
    \ the following guidelines exist:\n   1.  If the dhcp-state option code appears\
    \ in the dhcp-parameter-\n       request-list, the DHCPv4 server SHOULD include\
    \ a dhcp-state\n       option whose value corresponds most closely to the state\
    \ held by\n       the DHCPv4 server for the IP address associated with this reply.\n\
    \       If the state is ACTIVE and the message being returned is\n       DHCPLEASEACTIVE,\
    \ then the DHCPv4 server MAY choose to not send\n       the dhcp-state option.\
    \  The requestor SHOULD assume that any\n       DHCPLEASEACTIVE message arriving\
    \ without a requested dhcp-state\n       option has a dhcp-state of ACTIVE.\n\
    \   2.  If the base-time option code appears in the dhcp-parameter-\n       request-list,\
    \ the DHCPv4 server MUST include a base-time option,\n       which is the current\
    \ time in the DHCPv4 server's context and the\n       time from which the start-time-of-state,\
    \ dhcp-lease-time, client-\n       last-transaction-time, and other duration-style\
    \ times are based\n       upon.\n   3.  If the start-time-of-state option code\
    \ appears in the dhcp-\n       parameter-request-list, the DHCPv4 server MUST\
    \ include a start-\n       time-of-state option whose value represents the time\
    \ at which the\n       dhcp-state option's state became valid.\n   4.  If the\
    \ dhcp-lease-time option code appears in the dhcp-\n       parameter-request-list,\
    \ the DHCPv4 server MUST include a dhcp-\n       lease-time option for any state\
    \ that has a timeout value\n       associated with it.\n   5.  If the data-source\
    \ option code appears in the dhcp-parameter-\n       request-list, the DHCPv4\
    \ server MUST include the data-source\n       option in any situation where any\
    \ of the bits would be non-zero.\n       Thus, in the absence of the data-source\
    \ option, the assumption is\n       that all of the flags are zero.\n   6.  If\
    \ the client-last-transaction-time option code appears in the\n       dhcp-parameter-request-list,\
    \ the DHCPv4 server MUST include the\n       client-last-transaction-time option\
    \ in any situation where the\n       information is available.\n   7.  If there\
    \ is a dhcp-parameter-request-list in the initial\n       DHCPBULKLEASEQUERY request,\
    \ then it should be used for all of the\n       replies generated by that request.\
    \  Some options can be sent from\n       a DHCPv4 client to the server or from\
    \ the DHCPv4 server to a\n       DHCPv4 client.  Option 125 is such an option.\
    \  If the option code\n       for one of these options appears in the dhcp-parameter-request-\n\
    \       list, it SHOULD result in returning the value of the option sent\n   \
    \    by the DHCPv4 client to the server if one exists.\n   Note that there may\
    \ be other requirements for a reply to a\n   DHCPBULKLEASEQUERY request, as discussed\
    \ in Section 8.2.\n"
- title: 8.4.  Multiple or Parallel Queries
  contents:
  - "8.4.  Multiple or Parallel Queries\n   As discussed in Section 7.3, requestors\
    \ may want to use a connection\n   that has already been established when they\
    \ need to make additional\n   queries.  Servers SHOULD support reading and processing\
    \ multiple\n   queries from a single connection and SHOULD allow configuration\
    \ of\n   the number of simultaneous queries it may process.  A server MUST NOT\n\
    \   read more query messages from a connection than it is prepared to\n   process\
    \ simultaneously.\n   This SHOULD be a feature that is administratively controlled.\n\
    \   Servers SHOULD offer configuration that limits the number of\n   simultaneous\
    \ queries permitted from any one requestor, in order to\n   control resource use\
    \ if there are multiple requestors seeking\n   service.\n"
- title: 8.5.  Closing Connections
  contents:
  - "8.5.  Closing Connections\n   The DHCPv4 server SHOULD close connections in a\
    \ graceful manner and\n   not abort the connection.  The DHCPv4 server SHOULD\
    \ NOT assume that\n   the manner in which the requestor closed a connection carries\
    \ any\n   special meaning.\n   Typically, the DHCPv4 server will only close the\
    \ connection after\n   some form of an exception or a timeout on the connection.\n\
    \   Using a timer to detect when a connection is idle and then closing\n   that\
    \ connection is designed to protect the DHCPv4 server from\n   consuming unnecessary\
    \ resources.\n   The DHCPv4 server should start a timer for BULK_LQ_DATA_TIMEOUT\n\
    \   seconds for a particular connection after it sends a\n   DHCPLEASEQUERYDONE\
    \ message over that connection if there is no\n   current query outstanding for\
    \ that connection.  It should restart\n   this timer if a query arrives over that\
    \ connection.  If the timer\n   expires, the DHCPv4 server should close the connection.\n\
    \   The server MUST close its end of the TCP connection if it encounters\n   an\
    \ error sending data on the connection.  The server MUST close its\n   end of\
    \ the TCP connection if it finds that it has to abort an in-\n   process request.\
    \  A server aborting an in-process request SHOULD\n   attempt to signal that to\
    \ its requestors by using the QueryTerminated\n   status code in the status-code\
    \ option in a DHCPLEASEQUERYDONE\n   message, including a message string indicating\
    \ details of the reason\n   for the abort.  If the connection is closed for any\
    \ reason, all of\n   the data flows associated with any currently outstanding\n\
    \   DHCPBULKLEASEQUERY messages will be terminated.\n   If the server detects\
    \ that the requesting end of the connection has\n   been closed, the server MUST\
    \ close its end of the connection.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   The Security Considerations section of [RFC2131]\
    \ details the general\n   threats to DHCPv4.  The DHCPv4 Leasequery specification\
    \ [RFC4388]\n   describes recommendations for the Leasequery protocol, especially\n\
    \   with regard to authentication of LEASEQUERY messages, mitigation of\n   packet-flooding\
    \ DoS attacks, and restriction to trusted requestors.\n   The use of TCP introduces\
    \ some additional concerns.  Attacks that\n   attempt to exhaust the DHCPv4 server's\
    \ available TCP connection\n   resources, such as SYN flooding attacks, can compromise\
    \ the ability\n   of legitimate requestors to receive service.  Malicious requestors\n\
    \   who succeed in establishing connections but who then send invalid\n   queries,\
    \ partial queries, or no queries at all can also exhaust a\n   server's pool of\
    \ available connections.  We recommend that servers\n   offer configuration to\
    \ limit the sources of incoming connections,\n   that they limit the number of\
    \ accepted connections and the number of\n   in-process queries from any one connection,\
    \ and that they limit the\n   period of time during which an idle connection will\
    \ be left open.\n   There are two specific issues regarding Bulk Leasequery security\
    \ that\n   deserve explicit mention.  The first is preventing information that\n\
    \   Bulk Leasequery can provide from reaching clients who are not\n   authorized\
    \ to receive such information.  The second is ensuring that\n   authorized clients\
    \ of the Bulk Leasequery capability receive accurate\n   information from the\
    \ server (and that this information is not\n   disrupted in transit).\n   To prevent\
    \ information leakage to unauthorized clients, servers\n   SHOULD restrict Bulk\
    \ Leasequery connections and DHCPBULKLEASEQUERY\n   messages to certain requestors,\
    \ either through explicit configuration\n   of the server itself or by employing\
    \ external network elements to\n   provide such restrictions.  In particular,\
    \ the typical DHCPv4 client\n   SHOULD NOT be allowed to receive a response to\
    \ a Bulk Leasequery\n   request, and some technique MUST exist to allow prevention\
    \ of such\n   access in any environment where Bulk Leasequery is deployed.\n \
    \  Connections not from permitted requestors SHOULD be closed\n   immediately\
    \ to avoid server connection resource exhaustion or\n   alternatively, simply\
    \ not be allowed to reach the server at all.\n   Servers SHOULD have the capability\
    \ to restrict certain requestors to\n   certain query types.  Servers MAY reply\
    \ to queries that are not\n   permitted with the DHCPLEASEQUERYDONE message with\
    \ a status-code\n   option status of NotAllowed or MAY simply close the connection.\n\
    \   To prevent disruption and malicious corruption of Bulk Leasequery\n   data\
    \ flows between the server and authorized clients, these data\n   flows SHOULD\
    \ transit only secured networks.  These data flows are\n   typically infrastructure\
    \ oriented, and there is usually no reason to\n   have them flowing over networks\
    \ where such attacks are likely.  In\n   the rare cases where these data flows\
    \ might need to be sent through\n   unsecured networks, they MUST be sent over\
    \ connections secured\n   through means external to the DHCPv4/DHCPv6 server and\
    \ its client(s)\n   (e.g., through VPNs).\n   Authentication for DHCP messages\
    \ [RFC3118] MUST NOT be used to\n   attempt to secure transmission of the messages\
    \ described in this\n   document.  In particular, the message framing would not\
    \ be protected\n   by using the mechanisms described in [RFC3118] (which was designed\n\
    \   only with UDP transport in mind).\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   IANA has assigned the following new DHCPv4 option\
    \ codes from the\n   registry \"BOOTP Vendor Extensions and DHCP Options\" maintained\
    \ at\n   http://www.iana.org/assignments/bootp-dhcp-parameters.\n      1.  An\
    \ option code of 151 for status-code.\n      2.  An option code of 152 for base-time.\n\
    \      3.  An option code of 153 for start-time-of-state.\n      4.  An option\
    \ code of 154 for query-start-time.\n      5.  An option code of 155 for query-end-time.\n\
    \      6.  An option code of 156 for dhcp-state.\n      7.  An option code of\
    \ 157 for data-source.\n   IANA has assigned the following new DHCP message types\
    \ from the\n   registry \"DHCP Message Type 53 Values\" maintained at\n   http://www.iana.org/assignments/bootp-dhcp-parameters.\n\
    \      1.  A dhcp-message-type of 14 for DHCPBULKLEASEQUERY.\n      2.  A dhcp-message-type\
    \ of 15 for DHCPLEASEQUERYDONE.\n   IANA has created a new registry on the same\
    \ assignments page, titled\n   \"DHCP State 156 Values\" (where 156 corresponds\
    \ to the assigned value\n   of the dhcp-state option above).  This registry has\
    \ the following\n   initial values:\n      State\n      -----\n        1     AVAILABLE\n\
    \        2     ACTIVE\n        3     EXPIRED\n        4     RELEASED\n       \
    \ 5     ABANDONED\n        6     RESET\n        7     REMOTE\n        8     TRANSITIONING\n\
    \   New values for this namespace may only be defined by IETF Review, as\n   described\
    \ in [RFC5226].\n   IANA has created a new registry on the same assignments page,\
    \ titled\n   \"DHCP Status Code 151 Values\" (where 151 corresponds to the assigned\n\
    \   value of the status-code option above).  This registry has the\n   following\
    \ initial values:\n      Name    status-code\n      ----    -----------\n    \
    \  Success         000\n      UnspecFail      001\n      QueryTerminated 002\n\
    \      MalformedQuery  003\n      NotAllowed      004\n   New values for this\
    \ namespace may only be defined by IETF Review, as\n   described in [RFC5226].\n\
    \   IANA has revised the registry \"VSS Type Options\" created by [RFC6607]\n\
    \   in the overall area \"Dynamic Host Configuration Protocol (DHCP) and\n   Bootstrap\
    \ Protocol (BOOTP) Parameters\".  It has been revised to\n   appear as follows.\
    \  Note that the number range for \"Unassigned\" has\n   changed, and a new line\
    \ for \"All VPNs (wildcard)\" was added.\n     Type     VSS Information Format\n\
    \     ------------------------------------------------------------\n      0  \
    \     Network Virtual Terminal (NVT) ASCII VPN identifier\n      1       RFC 2685\
    \ VPN-ID\n      2-253   Unassigned\n      254     All VPNs (wildcard)\n      255\
    \     Global, default VPN\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   Significant text as well as important ideas were borrowed\
    \ in whole or\n   in part from \"DHCPv6 Bulk Leasequery\" [RFC5460], written by\
    \ Mark\n   Stapp.  Further suggestions and improvements were made by\n   participants\
    \ in the DHC Working Group, including Alfred Hoenes.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2131]  Droms, R., \"Dynamic Host Configuration Protocol\", RFC\n\
    \              2131, March 1997.\n   [RFC2132]  Alexander, S. and R. Droms, \"\
    DHCP Options and BOOTP Vendor\n              Extensions\", RFC 2132, March 1997.\n\
    \   [RFC3046]  Patrick, M., \"DHCP Relay Agent Information Option\", RFC\n   \
    \           3046, January 2001.\n   [RFC3118]  Droms, R., Ed., and W. Arbaugh,\
    \ Ed., \"Authentication for\n              DHCP Messages\", RFC 3118, June 2001.\n\
    \   [RFC4388]  Woundy, R. and K. Kinnear, \"Dynamic Host Configuration\n     \
    \         Protocol (DHCP) Leasequery\", RFC 4388, February 2006.\n   [RFC5226]\
    \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n\
    \   [RFC5735]  Cotton, M. and L. Vegoda, \"Special Use IPv4 Addresses\",\n   \
    \           BCP 153, RFC 5735, January 2010.\n   [RFC6607]  Kinnear, K., Johnson,\
    \ R., and M. Stapp, \"Virtual Subnet\n              Selection Options for DHCPv4\
    \ and DHCPv6\", RFC 6607, April\n              2012.\n   [RFC6925]  Joshi, B.,\
    \ Desetti, R., and M. Stapp, \"The DHCPv4 Relay\n              Agent Identifier\
    \ Sub-Option\", RFC 6925, April 2013.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC951]   Croft, W. and J. Gilmore, \"Bootstrap\
    \ Protocol\", RFC 951,\n              September 1985.\n   [RFC1542]  Wimer, W.,\
    \ \"Clarifications and Extensions for the\n              Bootstrap Protocol\"\
    , RFC 1542, October 1993.\n   [RFC4614]  Duke, M., Braden, R., Eddy, W., and E.\
    \ Blanton, \"A Roadmap\n              for Transmission Control Protocol (TCP)\
    \ Specification\n              Documents\", RFC 4614, September 2006.\n   [RFC5460]\
    \  Stapp, M., \"DHCPv6 Bulk Leasequery\", RFC 5460, February\n              2009.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kim Kinnear\n   Cisco Systems, Inc.\n   1414 Massachusetts\
    \ Ave.\n   Boxborough, Massachusetts 01719\n   USA\n   Phone: (978) 936-0000\n\
    \   EMail: kkinnear@cisco.com\n   Mark Stapp\n   Cisco Systems, Inc.\n   1414\
    \ Massachusetts Ave.\n   Boxborough, Massachusetts 01719\n   USA\n   Phone: (978)\
    \ 936-0000\n   EMail: mjs@cisco.com\n   D.T.V Ramakrishna Rao\n   Infosys Ltd.\n\
    \   44 Electronics City, Hosur Road\n   Bangalore  560 100\n   India\n   EMail:\
    \ ramakrishnadtv@infosys.com\n   URI:   http://www.infosys.com/\n   Bharat Joshi\n\
    \   Infosys Ltd.\n   44 Electronics City, Hosur Road\n   Bangalore  560 100\n\
    \   India\n   EMail: bharat_joshi@infosys.com\n   URI:   http://www.infosys.com/\n\
    \   Neil Russell\n   Sea Street Technologies Inc.\n   EMail: neil.e.russell@gmail.com\n\
    \   Pavan Kurapati\n   Juniper Networks\n   1194 N. Mathilda Ave.\n   Sunnyvale,\
    \ CA   94089\n   USA\n   EMail: kurapati@juniper.net\n   URI:   http://www.juniper.net/\n\
    \   Bernie Volz\n   Cisco Systems, Inc.\n   1414 Massachusetts Ave.\n   Boxborough,\
    \ Massachusetts 01719\n   USA\n   Phone: (978) 936-0000\n   EMail: volz@cisco.com\n"
