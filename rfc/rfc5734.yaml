- title: __initial_text__
  contents:
  - '       Extensible Provisioning Protocol (EPP) Transport over TCP

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes how an Extensible Provisioning Protocol\
    \ (EPP)\n   session is mapped onto a single Transmission Control Protocol (TCP)\n\
    \   connection.  This mapping requires use of the Transport Layer\n   Security\
    \ (TLS) protocol to protect information exchanged between an\n   EPP client and\
    \ an EPP server.  This document obsoletes RFC 4934.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Conventions Used in This Document ..........................2\n  \
    \ 2. Session Management ..............................................2\n   3.\
    \ Message Exchange ................................................3\n   4. Data\
    \ Unit Format ................................................6\n   5. Transport\
    \ Considerations ........................................6\n   6. Internationalization\
    \ Considerations .............................7\n   7. IANA Considerations .............................................7\n\
    \   8. Security Considerations .........................................7\n  \
    \ 9. TLS Usage Profile ...............................................8\n   10.\
    \ Acknowledgements ..............................................11\n   11. References\
    \ ....................................................11\n      11.1. Normative\
    \ References .....................................11\n      11.2. Informative\
    \ References ...................................12\n   Appendix A.  Changes from\
    \ RFC 4934 ................................13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes how the Extensible Provisioning\
    \ Protocol\n   (EPP) is mapped onto a single client-server TCP connection.  Security\n\
    \   services beyond those defined in EPP are provided by the Transport\n   Layer\
    \ Security (TLS) Protocol [RFC2246].  EPP is described in\n   [RFC5730].  TCP\
    \ is described in [RFC0793].  This document obsoletes\n   RFC 4934 [RFC4934].\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Session Management
  contents:
  - "2.  Session Management\n   Mapping EPP session management facilities onto the\
    \ TCP service is\n   straightforward.  An EPP session first requires creation\
    \ of a TCP\n   connection between two peers, one that initiates the connection\n\
    \   request and one that responds to the connection request.  The\n   initiating\
    \ peer is called the \"client\", and the responding peer is\n   called the \"\
    server\".  An EPP server MUST listen for TCP connection\n   requests on a standard\
    \ TCP port assigned by IANA.\n   The client MUST issue an active OPEN call, specifying\
    \ the TCP port\n   number on which the server is listening for EPP connection\
    \ attempts.\n   The EPP server MUST return an EPP <greeting> to the client after\
    \ the\n   TCP session has been established.\n   An EPP session is normally ended\
    \ by the client issuing an EPP\n   <logout> command.  A server receiving an EPP\
    \ <logout> command MUST\n   end the EPP session and close the TCP connection with\
    \ a CLOSE call.\n   A client MAY end an EPP session by issuing a CLOSE call.\n\
    \   A server MAY limit the life span of an established TCP connection.\n   EPP\
    \ sessions that are inactive for more than a server-defined period\n   MAY be\
    \ ended by a server issuing a CLOSE call.  A server MAY also\n   close TCP connections\
    \ that have been open and active for longer than\n   a server-defined period.\n"
- title: 3.  Message Exchange
  contents:
  - "3.  Message Exchange\n   With the exception of the EPP server greeting, EPP messages\
    \ are\n   initiated by the EPP client in the form of EPP commands.  An EPP\n \
    \  server MUST return an EPP response to an EPP command on the same TCP\n   connection\
    \ that carried the command.  If the TCP connection is closed\n   after a server\
    \ receives and successfully processes a command but\n   before the response can\
    \ be returned to the client, the server MAY\n   attempt to undo the effects of\
    \ the command to ensure a consistent\n   state between the client and the server.\
    \  EPP commands are\n   idempotent, so processing a command more than once produces\
    \ the same\n   net effect on the repository as successfully processing the command\n\
    \   once.\n   An EPP client streams EPP commands to an EPP server on an established\n\
    \   TCP connection.  A client MUST NOT distribute commands from a single\n   EPP\
    \ session over multiple TCP connections.  A client MAY establish\n   multiple\
    \ TCP connections to support multiple EPP sessions with each\n   session mapped\
    \ to a single connection.  A server SHOULD limit a\n   client to a maximum number\
    \ of TCP connections based on server\n   capabilities and operational load.\n\
    \   EPP describes client-server interaction as a command-response\n   exchange\
    \ where the client sends one command to the server and the\n   server returns\
    \ one response to the client.  A client might be able to\n   realize a slight\
    \ performance gain by pipelining (sending more than\n   one command before a response\
    \ for the first command is received)\n   commands with TCP transport, but this\
    \ feature does not change the\n   basic single command, single response operating\
    \ mode of the core\n   protocol.\n   Each EPP data unit MUST contain a single\
    \ EPP message.  Commands MUST\n   be processed independently and in the same order\
    \ as sent from the\n   client.\n   A server SHOULD impose a limit on the amount\
    \ of time required for a\n   client to issue a well-formed EPP command.  A server\
    \ SHOULD end an\n   EPP session and close an open TCP connection if a well-formed\
    \ command\n   is not received within the time limit.\n   A general state machine\
    \ for an EPP server is described in Section 2\n   of [RFC5730].  General client-server\
    \ message exchange using TCP\n   transport is illustrated in Figure 1.\n     \
    \                  Client                  Server\n                  |       \
    \                              |\n                  |                Connect \
    \             |\n                  | >>------------------------------->> |\n \
    \                 |                                     |\n                  |\
    \             Send Greeting           |\n                  | <<-------------------------------<<\
    \ |\n                  |                                     |\n             \
    \     |             Send <login>            |\n                  | >>------------------------------->>\
    \ |\n                  |                                     |\n             \
    \     |             Send Response           |\n                  | <<-------------------------------<<\
    \ |\n                  |                                     |\n             \
    \     |             Send Command            |\n                  | >>------------------------------->>\
    \ |\n                  |                                     |\n             \
    \     |             Send Response           |\n                  | <<-------------------------------<<\
    \ |\n                  |                                     |\n             \
    \     |            Send Command X           |\n                  | >>------------------------------->>\
    \ |\n                  |                                     |\n             \
    \     |    Send Command Y                   |\n                  | >>---------------+\
    \                  |\n                  |                  |                 \
    \ |\n                  |                  |                  |\n             \
    \     |            Send Response X          |\n                  | <<---------------(---------------<<\
    \ |\n                  |                  |                  |\n             \
    \     |                  |                  |\n                  |           \
    \       +--------------->> |\n                  |                            \
    \         |\n                  |            Send Response Y          |\n     \
    \             | <<-------------------------------<< |\n                  |   \
    \                                  |\n                  |             Send <logout>\
    \           |\n                  | >>------------------------------->> |\n   \
    \               |                                     |\n                  | \
    \    Send Response & Disconnect      |\n                  | <<-------------------------------<<\
    \ |\n                  |                                     |\n             \
    \  Figure 1: TCP Client-Server Message Exchange\n"
- title: 4.  Data Unit Format
  contents:
  - "4.  Data Unit Format\n   The EPP data unit contains two fields: a 32-bit header\
    \ that describes\n   the total length of the data unit, and the EPP XML instance.\
    \  The\n   length of the EPP XML instance is determined by subtracting four\n\
    \   octets from the total length of the data unit.  A receiver must\n   successfully\
    \ read that many octets to retrieve the complete EPP XML\n   instance before processing\
    \ the EPP message.\n   EPP Data Unit Format (one tick mark represents one bit\
    \ position):\n       0                   1                   2               \
    \    3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                           Total Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         EPP XML Instance                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Total\
    \ Length (32 bits): The total length of the EPP data unit\n   measured in octets\
    \ in network (big endian) byte order.  The octets\n   contained in this field\
    \ MUST be included in the total length\n   calculation.\n   EPP XML Instance (variable\
    \ length): The EPP XML instance carried in\n   the data unit.\n"
- title: 5.  Transport Considerations
  contents:
  - "5.  Transport Considerations\n   Section 2.1 of the EPP core protocol specification\
    \ [RFC5730]\n   describes considerations to be addressed by protocol transport\n\
    \   mappings.  This document addresses each of the considerations using a\n  \
    \ combination of features described in this document and features\n   provided\
    \ by TCP as follows:\n   -  TCP includes features to provide reliability, flow\
    \ control,\n      ordered delivery, and congestion control.  Section 1.5 of RFC\
    \ 793\n      [RFC0793] describes these features in detail; congestion control\n\
    \      principles are described further in RFC 2581 [RFC2581] and RFC\n      2914\
    \ [RFC2914].  TCP is a connection-oriented protocol, and\n      Section 2 of this\
    \ document describes how EPP sessions are mapped\n      to TCP connections.\n\
    \   -  Sections 2 and 3 of this document describe how the stateful nature\n  \
    \    of EPP is preserved through managed sessions and controlled\n      message\
    \ exchanges.\n   -  Section 3 of this document notes that command pipelining is\n\
    \      possible with TCP, though batch-oriented processing (combining\n      multiple\
    \ EPP commands in a single data unit) is not permitted.\n   -  Section 4 of this\
    \ document describes features to frame data units\n      by explicitly specifying\
    \ the number of octets used to represent a\n      data unit.\n"
- title: 6.  Internationalization Considerations
  contents:
  - "6.  Internationalization Considerations\n   This document does not introduce\
    \ or present any internationalization\n   or localization issues.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   System port number 700 has been assigned by the IANA\
    \ for mapping EPP\n   onto TCP.\n   User port number 3121 (which was used for\
    \ development and test\n   purposes) has been reclaimed by the IANA.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   EPP as-is provides only simple client authentication\
    \ services using\n   identifiers and plain text passwords.  A passive attack is\
    \ sufficient\n   to recover client identifiers and passwords, allowing trivial\
    \ command\n   forgery.  Protection against most other common attacks MUST be\n\
    \   provided by other layered protocols.\n   When layered over TCP, the Transport\
    \ Layer Security (TLS) Protocol\n   version 1.0 [RFC2246] or its successors (such\
    \ as TLS 1.2 [RFC5246]),\n   using the latest version supported by both parties,\
    \ MUST be used to\n   provide integrity, confidentiality, and mutual strong client-server\n\
    \   authentication.  Implementations of TLS often contain a weak\n   cryptographic\
    \ mode that SHOULD NOT be used to protect EPP.  Clients\n   and servers desiring\
    \ high security SHOULD instead use TLS with\n   cryptographic algorithms that\
    \ are less susceptible to compromise.\n   Authentication using the TLS Handshake\
    \ Protocol confirms the identity\n   of the client and server machines.  EPP uses\
    \ an additional client\n   identifier and password to identify and authenticate\
    \ the client's\n   user identity to the server, supplementing the machine authentication\n\
    \   provided by TLS.  The identity described in the client certificate\n   and\
    \ the identity described in the EPP client identifier can differ,\n   as a server\
    \ can assign multiple user identities for use from any\n   particular client machine.\
    \  Acceptable certificate identities MUST be\n   negotiated between client operators\
    \ and server operators using an\n   out-of-band mechanism.  Presented certificate\
    \ identities MUST match\n   negotiated identities before EPP service is granted.\n\
    \   There is a risk of login credential compromise if a client does not\n   properly\
    \ identify a server before attempting to establish an EPP\n   session.  Before\
    \ sending login credentials to the server, a client\n   needs to confirm that\
    \ the server certificate received in the TLS\n   handshake is an expected certificate\
    \ for the server.  A client also\n   needs to confirm that the greeting received\
    \ from the server contains\n   expected identification information.  After establishing\
    \ a TLS\n   session and receiving an EPP greeting on a protected TCP connection,\n\
    \   clients MUST compare the certificate subject and/or subjectAltName to\n  \
    \ expected server identification information and abort processing if a\n   mismatch\
    \ is detected.  If certificate validation is successful, the\n   client then needs\
    \ to ensure that the information contained in the\n   received certificate and\
    \ greeting is consistent and appropriate.  As\n   described above, both checks\
    \ typically require an out-of-band\n   exchange of information between client\
    \ and server to identify\n   expected values before in-band connections are attempted.\n\
    \   EPP TCP servers are vulnerable to common TCP denial-of-service\n   attacks\
    \ including TCP SYN flooding.  Servers SHOULD take steps to\n   minimize the impact\
    \ of a denial-of-service attack using combinations\n   of easily implemented solutions,\
    \ such as deployment of firewall\n   technology and border router filters to restrict\
    \ inbound server\n   access to known, trusted clients.\n"
- title: 9.  TLS Usage Profile
  contents:
  - "9.  TLS Usage Profile\n   The client should initiate a connection to the server\
    \ and then send\n   the TLS Client Hello to begin the TLS handshake.  When the\
    \ TLS\n   handshake has finished, the client can then send the first EPP\n   message.\n\
    \   TLS implementations are REQUIRED to support the mandatory cipher\n   suite\
    \ specified in the implemented version:\n   o  TLS 1.0 [RFC2246]: TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA\n\
    \   o  TLS 1.1 [RFC4346]: TLS_RSA_WITH_3DES_EDE_CBC_SHA\n   o  TLS 1.2 [RFC5246]:\
    \ TLS_RSA_WITH_AES_128_CBC_SHA\n   This document is assumed to apply to future\
    \ versions of TLS, in which\n   case the mandatory cipher suite for the implemented\
    \ version MUST be\n   supported.\n   Mutual client and server authentication using\
    \ the TLS Handshake\n   Protocol is REQUIRED.  Signatures on the complete certification\
    \ path\n   for both client machine and server machine MUST be validated as part\n\
    \   of the TLS handshake.  Information included in the client and server\n   certificates,\
    \ such as validity periods and machine names, MUST also\n   be validated.  A complete\
    \ description of the issues associated with\n   certification path validation\
    \ can be found in RFC 5280 [RFC5280].\n   EPP service MUST NOT be granted until\
    \ successful completion of a TLS\n   handshake and certificate validation, ensuring\
    \ that both the client\n   machine and the server machine have been authenticated\
    \ and\n   cryptographic protections are in place.\n   If the client has external\
    \ information as to the expected identity of\n   the server, the server name check\
    \ MAY be omitted.  For instance, a\n   client may be connecting to a machine whose\
    \ address and server name\n   are dynamic, but the client knows the certificate\
    \ that the server\n   will present.  In such cases, it is important to narrow\
    \ the scope of\n   acceptable certificates as much as possible in order to prevent\
    \ man-\n   in-the-middle attacks.  In special cases, it might be appropriate for\n\
    \   the client to simply ignore the server's identity, but it needs to be\n  \
    \ understood that this leaves the connection open to active attack.\n   During\
    \ the TLS negotiation, the EPP client MUST check its\n   understanding of the\
    \ server name / IP address against the server's\n   identity as presented in the\
    \ server Certificate message in order to\n   prevent man-in-the-middle attacks.\
    \  In this section, the client's\n   understanding of the server's identity is\
    \ called the \"reference\n   identity\".  Checking is performed according to the\
    \ following rules in\n   the specified order:\n   o  If the reference identity\
    \ is a server name:\n      *  If a subjectAltName extension of the dNSName [CCITT.X509.1988]\n\
    \         type is present in the server's certificate, then it SHOULD be\n   \
    \      used as the source of the server's identity.  Matching is\n         performed\
    \ as described in Section 7.2 of [RFC5280], with the\n         exception that\
    \ wildcard matching (see below) is allowed for\n         dNSName type.  If the\
    \ certificate contains multiple names\n         (e.g., more than one dNSName field),\
    \ then a match with any one\n         of the fields is considered acceptable.\n\
    \      *  The '*' (ASCII 42) wildcard character is allowed in\n         subjectAltName\
    \ values of type dNSName, and then only as the\n         left-most (least significant)\
    \ DNS label in that value.  This\n         wildcard matches any left-most DNS\
    \ label in the server name.\n         That is, the subject *.example.com matches\
    \ the server names\n         a.example.com and b.example.com, but does not match\
    \ example.com\n         or a.b.example.com.\n      *  The server's identity MAY\
    \ also be verified by comparing the\n         reference identity to the Common\
    \ Name (CN) [RFC4519] value in\n         the leaf Relative Distinguished Name\
    \ (RDN) of the subjectName\n         field of the server's certificate.  This\
    \ comparison is\n         performed using the rules for comparison of DNS names\
    \ in bullet\n         1 above (including wildcard matching).  Although the use\
    \ of the\n         Common Name value is existing practice, it is deprecated, and\n\
    \         Certification Authorities are encouraged to provide\n         subjectAltName\
    \ values instead.  Note that the TLS\n         implementation may represent DNs\
    \ in certificates according to\n         X.500 or other conventions.  For example,\
    \ some X.500\n         implementations order the RDNs in a DN using a left-to-right\n\
    \         (most significant to least significant) convention instead of\n    \
    \     LDAP's right-to-left convention.\n   o  If the reference identity is an\
    \ IP address:\n      *  The iPAddress subjectAltName SHOULD be used by the client\
    \ for\n         comparison.  In such a case, the reference identity MUST be\n\
    \         converted to the \"network byte order\" octet string\n         representation.\
    \  For IP Version 4 (as specified in RFC 791\n         [RFC0791]), the octet string\
    \ will contain exactly four octets.\n         For IP Version 6 (as specified in\
    \ RFC 2460 [RFC2460]), the\n         octet string will contain exactly sixteen\
    \ octets.  This octet\n         string is then compared against subjectAltName\
    \ values of type\n         iPAddress.  A match occurs if the reference identity\
    \ octet\n         string and value octet strings are identical.\n   If the server\
    \ identity check fails, user-oriented clients SHOULD\n   either notify the user\
    \ (clients MAY give the user the opportunity to\n   continue with the EPP session\
    \ in this case) or close the transport\n   connection and indicate that the server's\
    \ identity is suspect.\n   Automated clients SHOULD return or log an error indicating\
    \ that the\n   server's identity is suspect and/or SHOULD close the transport\n\
    \   connection.  Automated clients MAY provide a configuration setting\n   that\
    \ disables this check, but MUST provide a setting which enables\n   it.\n   During\
    \ the TLS negotiation, the EPP server MUST verify that the\n   client certificate\
    \ matches the reference identity previously\n   negotiated out of band, as specified\
    \ in Section 8.  The server should\n   match the entire subject name or the subjectAltName\
    \ as described in\n   RFC 5280.  The server MAY enforce other restrictions on\
    \ the\n   subjectAltName, for example if it knows that a particular client is\n\
    \   always connecting from a particular hostname / IP address.\n   All EPP messages\
    \ MUST be sent as TLS \"application data\".  It is\n   possible that multiple\
    \ EPP messages are contained in one TLS record,\n   or that an EPP message is\
    \ transferred in multiple TLS records.\n   When no data is received from a connection\
    \ for a long time (where the\n   application decides what \"long\" means), a server\
    \ MAY close the\n   connection.  The server MUST attempt to initiate an exchange\
    \ of\n   close_notify alerts with the client before closing the connection.\n\
    \   Servers that are unprepared to receive any more data MAY close the\n   connection\
    \ after sending the close_notify alert, thus generating an\n   incomplete close\
    \ on the client side.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   RFC 3734 is a product of the PROVREG working group,\
    \ which suggested\n   improvements and provided many invaluable comments.  The\
    \ author\n   wishes to acknowledge the efforts of WG chairs Edward Lewis and Jaap\n\
    \   Akkerhuis for their process and editorial contributions.  RFC 4934\n   and\
    \ this document are individual submissions, based on the work done\n   in RFC\
    \ 3734.\n   Specific suggestions that have been incorporated into this document\n\
    \   were provided by Chris Bason, Randy Bush, Patrik Faltstrom, Ned\n   Freed,\
    \ James Gould, Dan Manley, and John Immordino.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [CCITT.X509.1988]\n              International\
    \ Telephone and Telegraph Consultative\n              Committee, \"Information\
    \ Technology - Open Systems\n              Interconnection - The Directory: Authentication\n\
    \              Framework\", CCITT Recommendation X.509, November 1988.\n   [RFC0791]\
    \  Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n              September\
    \ 1981.\n   [RFC0793]  Postel, J., \"Transmission Control Protocol\", STD 7,\n\
    \              RFC 793, September 1981.\n   [RFC2119]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC2246]  Dierks, T. and C. Allen, \"The TLS Protocol\
    \ Version 1.0\",\n              RFC 2246, January 1999.\n   [RFC2460]  Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , RFC 2460, December 1998.\n   [RFC4519]  Sciberras, A., \"Lightweight Directory\
    \ Access Protocol\n              (LDAP): Schema for User Applications\", RFC 4519,\n\
    \              June 2006.\n   [RFC5730]  Hollenbeck, S., \"Extensible Provisioning\
    \ Protocol (EPP)\",\n              STD 69, RFC 5730, August 2009.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC2581]  Allman, M., Paxson, V., and W. Stevens,\
    \ \"TCP Congestion\n              Control\", RFC 2581, April 1999.\n   [RFC2914]\
    \  Floyd, S., \"Congestion Control Principles\", BCP 41,\n              RFC 2914,\
    \ September 2000.\n   [RFC4346]  Dierks, T. and E. Rescorla, \"The Transport Layer\
    \ Security\n              (TLS) Protocol Version 1.1\", RFC 4346, April 2006.\n\
    \   [RFC4934]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\n    \
    \          Transport Over TCP\", RFC 4934, May 2007.\n   [RFC5246]  Dierks, T.\
    \ and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol\
    \ Version 1.2\", RFC 5246, August 2008.\n   [RFC5280]  Cooper, D., Santesson,\
    \ S., Farrell, S., Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n              Infrastructure Certificate and Certificate Revocation\
    \ List\n              (CRL) Profile\", RFC 5280, May 2008.\n"
- title: Appendix A.  Changes from RFC 4934
  contents:
  - "Appendix A.  Changes from RFC 4934\n   1.  Changed \"This document obsoletes\
    \ RFC 3734\" to \"This document\n       obsoletes RFC 4934\".\n   2.  Replaced\
    \ references to RFC 3280 with references to 5280.\n   3.  Replaced references\
    \ to RFC 3734 with references to 4934.\n   4.  Updated references to RFC 4346\
    \ and TLS 1.1 with references to\n       5246 and TLS 1.2.\n   5.  Replaced references\
    \ to RFC 4930 with references to 5730.\n   6.  Added clarifying TLS Usage Profile\
    \ section and included\n       references.\n   7.  Moved the paragraph that begins\
    \ with \"Mutual client and server\n       authentication\" from the Security Considerations\
    \ section to the\n       TLS Usage Profile section.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Scott Hollenbeck\n   VeriSign, Inc.\n   21345 Ridgetop Circle\n\
    \   Dulles, VA  20166-6503\n   US\n   EMail: shollenbeck@verisign.com\n"
