- title: __initial_text__
  contents:
  - '             Use of the KEA and SKIPJACK Algorithms in CMS

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the conventions for using the Key Exchange\n\
    \   Algorithm (KEA) and SKIPJACK encryption algorithm in conjunction with\n  \
    \ the Cryptographic Message Syntax [CMS] enveloped-data and encrypted-\n   data\
    \ content types.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Throughout this document, the terms MUST, MUST NOT, SHOULD\
    \ and MAY\n   are used in capital letters. This conforms to the definitions in\n\
    \   [MUSTSHOULD]. [MUSTSHOULD] defines the use of these key words to help\n  \
    \ make the intent of standards track documents as clear as possible.\n   The same\
    \ key words are used in this document to help implementers\n   achieve interoperability.\
    \ Software that claims compliance with this\n   document MUST provide the capabilities\
    \ as indicated by the MUST, MUST\n   NOT, SHOULD and MAY terms.  The KEA and SKIPJACK\
    \ cryptographic\n   algorithms are described in [SJ-KEA].\n"
- title: 2. Content Encryption Process
  contents:
  - "2. Content Encryption Process\n   This section applies to the construction of\
    \ both the enveloped-data\n   and encrypted-data content types.  Compliant software\
    \ MUST meet the\n   requirements stated in [CMS] Section 6.3, \"Content-encryption\n\
    \   Process\". The input to the encryption process MUST be padded to a\n   multiple\
    \ of eight octets using the padding rules described in [CMS]\n   Section 6.3.\
    \  The content MUST be encrypted as a single string using\n   the SKIPJACK algorithm\
    \ in 64-bit Cipher Block Chaining (CBC) mode\n   using randomly-generated 8-byte\
    \ Initialization Vector (IV) and 80-bit\n   SKIPJACK content-encryption key (CEK)\
    \ values.\n"
- title: 3. Content Decryption Process
  contents:
  - "3. Content Decryption Process\n   This section applies to the processing of both\
    \ the enveloped-data and\n   encrypted-data content types.  The encryptedContent\
    \ MUST be decrypted\n   as a single string using the SKIPJACK algorithm in 64-bit\
    \ CBC mode.\n   The 80-bit SKIPJACK CEK and the 8-byte IV MUST be used as inputs\
    \ to\n   the SKIPJACK decryption process.  Following decryption, the padding\n\
    \   MUST be removed from the decrypted data.  The padding rules are\n   described\
    \ in [CMS] Section 6.3, \"Content-encryption Process\".\n"
- title: 4. Enveloped-data Conventions
  contents:
  - "4. Enveloped-data Conventions\n   The CMS enveloped-data content type consists\
    \ of an encrypted content\n   and wrapped CEKs for one or more recipients.  Compliant\
    \ software MUST\n   meet the requirements for constructing an enveloped-data content\
    \ type\n   stated in [CMS] Section 6, \"Enveloped-data Content Type\".  [CMS]\n\
    \   Section 6 should be studied before reading this section, because this\n  \
    \ section does not repeat the [CMS] text.\n   An 8-byte IV and 80-bit CEK MUST\
    \ be randomly generated for each\n   instance of an enveloped-data content type\
    \ as inputs to the SKIPJACK\n   algorithm for use to encrypt the content.  The\
    \ SKIPJACK CEK MUST only\n   be used for encrypting the content of a single instance\
    \ of an\n   enveloped-data content type.\n   KEA and SKIPJACK can be used with\
    \ the enveloped-data content type\n   using either of the following key management\
    \ techniques defined in\n   [CMS] Section 6:\n   1) Key Agreement:  The SKIPJACK\
    \ CEK is uniquely wrapped for each\n      recipient using a pairwise symmetric\
    \ key-encryption key (KEK)\n      generated using KEA using the originator's private\
    \ KEA key,\n      recipient's public KEA key and other values.  Section 4.2 provides\n\
    \      additional details.\n   2) \"Previously Distributed\" Symmetric KEK:  The\
    \ SKIPJACK CEK is\n      wrapped using a \"previously distributed\" symmetric\
    \ KEK (such as a\n      Mail List Key).  The methods by which the symmetric KEK\
    \ is\n      generated and distributed are beyond the scope of this document.\n\
    \      Section 4.3 provides more details.\n   [CMS] Section 6 also defines the\
    \ concept of the key transport key\n   management technique.  The key transport\
    \ technique MUST NOT be used\n   with KEA.\n"
- title: 4.1. EnvelopedData Fields
  contents:
  - "4.1. EnvelopedData Fields\n   The enveloped-data content type is Abstract Syntax\
    \ Notation.1 (ASN.1)\n   encoded using the EnvelopedData syntax.  The fields of\
    \ the\n   EnvelopedData syntax must be populated as follows:\n   The EnvelopedData\
    \ version MUST be 2.\n   If key agreement is being used, then the EnvelopedData\
    \ originatorInfo\n   field SHOULD be present and SHOULD include the originator's\
    \ KEA X.509\n   v3 certificate containing the KEA public key associated with the\
    \ KEA\n   private key used to form each pairwise symmetric KEK used to wrap\n\
    \   each copy of the SKIPJACK CEK.  The issuers' X.509 v3 certificates\n   required\
    \ to form the complete certification path for the originator's\n   KEA X.509 v3\
    \ certificate MAY be included in the EnvelopedData\n   originatorInfo field. Self-signed\
    \ certificates SHOULD NOT be included\n   in the EnvelopedData originatorInfo\
    \ field.\n   The EnvelopedData RecipientInfo CHOICE is dependent on the key\n\
    \   management technique used.  Sections 4.2 and 4.3 provide more\n   information.\n\
    \   The EnvelopedData encryptedContentInfo contentEncryptionAlgorithm\n   algorithm\
    \ field MUST be the id-fortezzaConfidentialityAlgorithm\n   object identifier\
    \ (OID).  The EnvelopedData encryptedContentInfo\n   contentEncryptionAlgorithm\
    \ parameters field MUST include the random\n   8-byte IV used as the input to\
    \ the content encryption process.\n   The EnvelopedData unprotectedAttrs MAY be\
    \ present.\n"
- title: 4.2.  Key Agreement
  contents:
  - "4.2.  Key Agreement\n   This section describes the conventions for using KEA\
    \ and SKIPJACK\n   with the CMS enveloped-data content type to support key agreement.\n\
    \   When key agreement is used, then the RecipientInfo\n   keyAgreeRecipientInfo\
    \ CHOICE MUST be used.\n   If the EnvelopedData originatorInfo field does not\
    \ include the\n   originator's KEA X.509 v3 certificate, then each recipientInfos\n\
    \   KeyAgreementRecipientInfo originator field MUST include the\n   issuerAndSerialNumber\
    \ CHOICE identifying the originator's KEA X.509\n   v3 certificate.  If the EnvelopedData\
    \ originatorInfo field includes\n   the originator's KEA X.509 v3 certificate,\
    \ then each recipientInfos\n   KeyAgreementRecipientInfo originator field MUST\
    \ include either the\n   subjectKeyIdentifier CHOICE containing the value from\
    \ the\n   subjectKeyIdentifier extension of the originator's KEA X.509 v3\n  \
    \ certificate or the issuerAndSerialNumber CHOICE identifying the\n   originator's\
    \ KEA X.509 v3 certificate.  To minimize the size of the\n   EnvelopedData, it\
    \ is recommended that the subjectKeyIdentifier CHOICE\n   be used.\n   In some\
    \ environments, the KeyAgreementRecipientInfo originator field\n   MAY include\
    \ the originatorKey CHOICE.  The originatorKey CHOICE\n   SHOULD NOT be used with\
    \ KEA for e-mail transactions.  Within a\n   controlled security architecture,\
    \ a module may produce KEA key pairs\n   for use in conjunction with internal/local\
    \ storage of encrypted data.\n   In this case, there may not be an X.509 certificate\
    \ associated with a\n   (possibly) short term or one time use public KEA key.\
    \  When\n   originatorKey is used, then the KEA public key MUST be conveyed in\n\
    \   the publicKey BIT STRING as specified in [KEA] Section 3.1.2.  The\n   originatorKey\
    \ algorithm identifier MUST be the id-\n   keyExchangeAlgorithm OID.  The originatorKey\
    \ algorithm parameters\n   field MUST contain the KEA \"domain identifier\" (ASN.1\
    \ encoded as an\n   OCTET STRING) identifying the KEA algorithm parameters (i.e.,\
    \ p/q/g\n   values) associated with the KEA public key.  [KEA] Section 3.1.1\n\
    \   describes the method for computing the KEA domain identifier value.\n"
- title: 4.2.1.  SKIPJACK CEK Wrap Process
  contents:
  - "4.2.1.  SKIPJACK CEK Wrap Process\n   The SKIPJACK CEK is uniquely wrapped for\
    \ each recipient of the\n   EnvelopedData using a pairwise KEK generated using\
    \ the KEA material\n   of the originator and the recipient along with the originator's\
    \ User\n   Keying Material (UKM) (i.e. Ra).  The CMS EnvelopedData syntax\n  \
    \ provides two options for wrapping the SKIPJACK CEK for each recipient\n   using\
    \ a KEA-generated KEK.  The \"shared Originator UKM\" option SHOULD\n   be used\
    \ when constructing EnvelopedData objects.  The \"unique\n   originator UKM\"\
    \ option MAY be used when constructing EnvelopedData\n   objects.  Compliant software\
    \ MUST be capable of processing\n   EnvelopedData objects constructed using both\
    \ options.\n   1) Shared Originator UKM Option:  CMS provides the ability for\
    \ a\n   single, shared originator's UKM to be used to generate each pairwise\n\
    \   KEK used to wrap the SKIPJACK CEK for each recipient.  When using the\n  \
    \ shared originator UKM option, a single RecipientInfo\n   KeyAgreeRecipientInfo\
    \ structure MUST be constructed to contain the\n   wrapped SKIPJACK CEKs for all\
    \ of the KEA recipients sharing the same\n   KEA parameters.  The KeyAgreeRecipientInfo\
    \ structure includes\n   multiple RecipientEncryptedKey fields that each contain\
    \ the SKIPJACK\n   CEK wrapped for a specific recipient.\n   2) Unique Originator\
    \ UKM Option:  CMS also provides the ability for a\n   unique originator UKM to\
    \ be used to generate each pairwise KEK used\n   to wrap the SKIPJACK CEK for\
    \ each recipient.  When using the unique\n   originator UKM option, a separate\
    \ RecipientInfo KeyAgreeRecipientInfo\n   structure MUST be constructed for each\
    \ recipient.  Each\n   KeyAgreeRecipientInfo structure includes a single\n   RecipientEncryptedKey\
    \ field containing the SKIPJACK CEK wrapped for\n   the recipient.  This option\
    \ requires more overhead than the shared\n   UKM option because the KeyAgreeRecipientInfo\
    \ fields (i.e. version,\n   originator, ukm, keyEncryptionAlgorithm) must be repeated\
    \ for each\n   recipient.\n   The next two paragraphs apply to both options.\n\
    \   The KeyAgreeRecipientInfo keyEncryptionAlgorithm algorithm field MUST\n  \
    \ include the id-kEAKeyEncryptionAlgorithm OID.  The\n   KeyAgreeRecipientInfo\
    \ keyEncryptionAlgorithm parameters field MUST\n   contain a KeyWrapAlgorithm\
    \ as specified in [CMS] Appendix A, \"ASN.1\n   Module\".  The algorithm field\
    \ of KeyWrapAlgorithm MUST be the id-\n   fortezzaWrap80 OID indicating that the\
    \ FORTEZZA 80-bit wrap function\n   is used to wrap the 80-bit SKIPJACK CEK. \
    \ Since the FORTEZZA 80-bit\n   wrap function includes an integrity check value,\
    \ the wrapped SKIPJACK\n   key is 96 bits long.  The parameters field of KeyWrapAlgorithm\
    \ MUST\n   be absent.\n   If the originator is not already an explicit recipient,\
    \ then a copy\n   of the SKIPJACK CEK SHOULD be wrapped for the originator and\
    \ included\n   in the EnvelopedData.  This allows the originator to decrypt the\n\
    \   contents of the EnvelopedData.\n"
- title: 4.2.1.1. SKIPJACK CEK Wrap Process Using A Shared Originator UKM Value
  contents:
  - "4.2.1.1. SKIPJACK CEK Wrap Process Using A Shared Originator UKM Value\n   This\
    \ section describes how a shared originator UKM value is used as\n   an input\
    \ to KEA to generate each pairwise KEK used to wrap the\n   SKIPJACK CEK for each\
    \ recipient.\n   When using the shared originator UKM option, a single RecipientInfo\n\
    \   KeyAgreeRecipientInfo structure MUST be constructed to contain the\n   wrapped\
    \ SKIPJACK CEKs for all of the KEA recipients using the same\n   set of KEA parameters.\
    \  If all recipients' KEA public keys were\n   generated using the same set of\
    \ KEA parameters, then there MUST only\n   be a single RecipientInfo KeyAgreeRecipientInfo\
    \ structure for all of\n   the KEA recipients.  If the recipients' KEA public\
    \ keys were\n   generated using different sets of KEA parameters, then multiple\n\
    \   RecipientInfo KeyAgreeRecipientInfo fields MUST be constructed\n   because\
    \ the originatorIdentifierOrKey will be different for each\n   distinct set of\
    \ recipients' KEA parameters.\n   A unique 128-byte originator's UKM MUST be generated\
    \ for each\n   distinct set of recipients' KEA parameters.  The originator's UKM\n\
    \   MUST be placed in each KeyAgreeRecipientInfo ukm OCTET STRING.\n   The originator's\
    \ and recipient's KEA parameters MUST be identical to\n   use KEA to successfully\
    \ generate a pairwise KEK.  [KEA] describes how\n   a KEA public key is conveyed\
    \ in an X.509 v3 certificate.  [KEA]\n   states that the KEA parameters are not\
    \ included in KEA certificates;\n   instead, a \"domain identifier\" is supplied\
    \ in the\n   subjectPublicKeyInfo algorithm parameters field of every KEA\n  \
    \ certificate. The values of the KEA domain identifiers in the\n   originator's\
    \ and recipient's KEA X.509 v3 certificates can be\n   compared to determine if\
    \ the originator's and recipient's KEA\n   parameters are identical.\n   The following\
    \ steps MUST be repeated for each recipient:\n   1) KEA MUST be used to generate\
    \ the pairwise KEK based on the\n      originator's UKM, originator's private\
    \ KEA key, recipient's 128\n      byte public KEA key (obtained from the recipient's\
    \ KEA X.509 v3\n      certificate) and the recipient's 128-byte public KEA key\
    \ used as\n      the Rb value.\n   2) The SKIPJACK CEK MUST be wrapped using the\
    \ KEA-generated pairwise\n      KEK as input to the FORTEZZA 80-bit wrap function.\
    \ The FORTEZZA\n      80-bit wrap function takes the 80-bit SKIPJACK CEK along\
    \ with a\n      16-bit integrity checkvalue and produces a 96-bit result using\
    \ the\n      KEA-generated pairwise KEK.\n   3) A new RecipientEncryptedKey SEQUENCE\
    \ MUST be constructed for the\n      recipient.\n   4) The value of the subjectKeyIdentifier\
    \ extension from the\n      recipient's KEA X.509 v3 certificate MUST be placed\
    \ in the\n      recipient's RecipientEncryptedKey rid rKeyId subjectKeyIdentifier\n\
    \      field.  The KeyAgreeRecipientIdentifier CHOICE MUST be rKeyId.\n      The\
    \ date and other fields MUST be absent from the\n      recipientEncryptedKey rid\
    \ rKeyId SEQUENCE.\n   5) The wrapped SKIPJACK CEK MUST be placed in the recipient's\n\
    \      RecipientEncryptedKey encryptedKey OCTET STRING.\n   6) The recipient's\
    \ RecipientEncryptedKey MUST be included in the\n      KeyAgreeRecipientInfo recipientEncryptedKeys\
    \ SEQUENCE OF\n      RecipientEncryptedKey.\n"
- title: 4.2.1.2. SKIPJACK CEK Wrap Process Using Unique Originator UKM Values
  contents:
  - "4.2.1.2. SKIPJACK CEK Wrap Process Using Unique Originator UKM Values\n   This\
    \ section describes how a unique originator UKM value is generated\n   for each\
    \ recipient to be used as an input to KEA to generate that\n   recipient's pairwise\
    \ KEK.\n   The following steps MUST be repeated for each recipient:\n   1) A new\
    \ RecipientInfo KeyAgreeRecipientInfo structure MUST be\n      constructed.\n\
    \   2) A unique 128-byte originator's UKM MUST be generated.  The\n      originator's\
    \ UKM MUST be placed in the KeyAgreeRecipientInfo ukm\n      OCTET STRING.\n \
    \  3) KEA MUST be used to generate the pairwise KEK based on the\n      originator's\
    \ UKM, originator's private KEA key, recipient's 128-\n      byte public KEA key\
    \ and recipient's 128-byte public KEA key used\n      as the Rb value.\n   4)\
    \ The SKIPJACK CEK MUST be wrapped using the KEA-generated pairwise\n      KEK\
    \ as input to the FORTEZZA 80-bit wrap function.  The FORTEZZA\n      80-bit wrap\
    \ function takes the 80-bit SKIPJACK CEK along with a\n      16-bit integrity\
    \ check value and produces a 96-bit result using\n      the KEA-generated pairwise\
    \ KEK.\n   5) A new RecipientEncryptedKey SEQUENCE MUST be constructed.\n   6)\
    \ The value of the subjectKeyIdentifier extension from the\n      recipient's\
    \ KEA X.509 v3 certificate MUST be placed in the\n      RecipientEncryptedKey\
    \ rid rKeyId subjectKeyIdentifier field.  The\n      KeyAgreeRecipientIdentifier\
    \ CHOICE MUST be rKeyId.  The date and\n      other fields MUST be absent from\
    \ the RecipientEncryptedKey rid\n      rKeyId SEQUENCE.\n   7) The wrapped SKIPJACK\
    \ CEK MUST be placed in the\n      RecipientEncryptedKey encryptedKey OCTET STRING.\n\
    \   8) The recipient's RecipientEncryptedKey MUST be the only\n      RecipientEncryptedKey\
    \ present in the KeyAgreeRecipientInfo\n      recipientEncryptedKeys SEQUENCE\
    \ OF RecipientEncryptedKey.\n   9) The RecipientInfo containing the recipient's\
    \ KeyAgreeRecipientInfo\n      MUST be included in the EnvelopedData RecipientInfos\
    \ SET OF\n      RecipientInfo.\n"
- title: 4.2.2.  SKIPJACK CEK Unwrap Process
  contents:
  - "4.2.2.  SKIPJACK CEK Unwrap Process\n   This section describes the recipient\
    \ processing using KEA to generate\n   the SKIPJACK KEK and the subsequent decryption\
    \ of the SKIPJACK CEK.\n   1) Compliant software MUST be capable of processing\
    \ EnvelopedData\n      objects constructed using both the shared and the unique\n\
    \      originator UKM options.  To support the shared UKM option, the\n      receiving\
    \ software MUST be capable of searching for the\n      recipient's RecipientEncryptedKey\
    \ in a KeyAgreeRecipientInfo\n      recipientEncryptedKeys SEQUENCE OF RecipientEncryptedKey.\
    \  To\n      support the unique UKM option, the receiving software MUST be\n \
    \     capable of searching for the recipient's RecipientEncryptedKey in\n    \
    \  the EnvelopedData recipientInfos SET OF RecipientInfo, with each\n      RecipientInfo\
    \ containing exactly one RecipientEncryptedKey.  For\n      each RecipientEncryptedKey,\
    \ if the rid rkeyId CHOICE is present,\n      then the receiving software MUST\
    \ attempt to match the value of the\n      subjectKeyIdentifier extension from\
    \ the recipient's KEA X.509 v3\n      certificate with the RecipientEncryptedKey\
    \ rid rKeyId\n      subjectKeyIdentifier field.  If the rid issuerAndSerialNumber\n\
    \      CHOICE is present, then the receiving software MUST attempt to\n      match\
    \ the values of the issuer name and serial number from the\n      recipient's\
    \ KEA X.509 v3 certificate with the\n      RecipientEncryptedKey rid issuerAndSerialNumber\
    \ field.\n   2) The receiving software MUST extract the originator's UKM from\
    \ the\n      ukm OCTET STRING contained in the same KeyAgreeRecipientInfo that\n\
    \      includes the recipient's RecipientEncryptedKey.\n   3) The receiving software\
    \ MUST locate the originator's KEA X.509 v3\n      certificate identified by the\
    \ originator field contained in the\n      same KeyAgreeRecipientInfo that includes\
    \ the recipient's\n      RecipientEncryptedKey.\n   4) KEA MUST be used to generate\
    \ the pairwise KEK based on the\n      originator's UKM, originator's 128-byte\
    \ public KEA key (extracted\n      from originator's KEA X.509 v3 certificate),\
    \ recipient's private\n      KEA key (associated with recipient's KEA X.509 v3\
    \ certificate\n      identified by the RecipientEncryptedKey rid field) and the\n\
    \      originator's 128-byte public KEA key used as the Rb value.\n   5) The SKIPJACK\
    \ CEK MUST be unwrapped using the KEA-generated\n      pairwise KEK as input to\
    \ the FORTEZZA 80-bit unwrap function.\n   6) The unwrapped 80-bit SKIPJACK CEK\
    \ resulting from the SKIPJACK CEK\n      unwrap process and the 8-byte IV obtained\
    \ from the EnvelopedData\n      encryptedContentInfo contentEncryptionAlgorithm\
    \ parameters field\n      are used as inputs to the SKIPJACK content decryption\
    \ process to\n      decrypt the EnvelopedData encryptedContent.\n"
- title: 4.3. "Previously Distributed" Symmetric KEK
  contents:
  - "4.3. \"Previously Distributed\" Symmetric KEK\n   This section describes the\
    \ conventions for using SKIPJACK with the\n   CMS enveloped-data content type\
    \ to support \"previously distributed\"\n   symmetric KEKs.  When a \"previously\
    \ distributed\" symmetric KEK is\n   used to wrap the SKIPJACK CEK, then the RecipientInfo\n\
    \   KEKRecipientInfo CHOICE MUST be used. The methods used to generate\n   and\
    \ distribute the symmetric KEK are beyond the scope of this\n   document.\n  \
    \ The KEKRecipientInfo fields MUST be populated as specified in [CMS]\n   Section\
    \ 6.2.3, \"KEKRecipientInfo Type\". The KEKRecipientInfo\n   keyEncryptionAlgorithm\
    \ algorithm field MUST be the id-fortezzaWrap80\n   OID indicating that the FORTEZZA\
    \ 80-bit wrap function is used to wrap\n   the 80-bit SKIPJACK CEK. The KEKRecipientInfo\
    \ keyEncryptionAlgorithm\n   parameters field MUST be absent. The KEKRecipientInfo\
    \ encryptedKey\n   field MUST include the SKIPJACK CEK wrapped using the \"previously\n\
    \   distributed\" symmetric KEK as input to the FORTEZZA 80-bit wrap\n   function.\n"
- title: 5. Encrypted-data Conventions
  contents:
  - "5. Encrypted-data Conventions\n   The CMS encrypted-data content type consists\
    \ of an encrypted content,\n   but no recipient information.  The method for conveying\
    \ the SKIPJACK\n   CEK required to decrypt the encrypted-data encrypted content\
    \ is\n   beyond the scope of this document.  Compliant software MUST meet the\n\
    \   requirements for constructing an encrypted-data content type stated\n   [CMS]\
    \ Section 8, \"Encrypted-data Content Type\".  [CMS] Section 8\n   should be studied\
    \ before reading this section, because this section\n   does not repeat the [CMS]\
    \ text.\n   The encrypted-data content type is ASN.1 encoded using the\n   EncryptedData\
    \ syntax.  The fields of the EncryptedData syntax must be\n   populated as follows:\n\
    \   The EncryptedData version MUST be set according to [CMS] Section 8.\n   The\
    \ EncryptedData encryptedContentInfo contentEncryptionAlgorithm\n   algorithm\
    \ field MUST be the id-fortezzaConfidentialityAlgorithm OID.\n   The EncryptedData\
    \ encryptedContentInfo contentEncryptionAlgorithm\n   parameters field MUST include\
    \ the random 8-byte IV used as the input\n   to the content encryption process.\n\
    \   The EncryptedData unprotectedAttrs MAY be present.\n"
- title: 6. FORTEZZA 80-bit Wrap Function
  contents:
  - "6. FORTEZZA 80-bit Wrap Function\n   The United States Government has not published\
    \ the description of the\n   FORTEZZA 80-bit wrap function.\n"
- title: 7.   SMIMECapabilities Attribute Conventions
  contents:
  - "7.   SMIMECapabilities Attribute Conventions\n   RFC 2633 [MSG], Section 2.5.2\
    \ defines the SMIMECapabilities signed\n   attribute (defined as a SEQUENCE of\
    \ SMIMECapability SEQUNCEs) to be\n   used to specify a partial list of algorithms\
    \ that the software\n   announcing the SMIMECapabilities can support.  When constructing\
    \ a\n   signedData object, compliant software MAY include the\n   SMIMECapabilities\
    \ signed attribute announcing that it supports the\n   KEA and SKIPJACK algorithms.\n\
    \   The SMIMECapability SEQUENCE representing KEA MUST include the id-\n   kEAKeyEncryptionAlgorithm\
    \ OID in the capabilityID field and MUST\n   include a KeyWrapAlgorithm SEQUENCE\
    \ in the parameters field.  The\n   algorithm field of KeyWrapAlgorithm MUST be\
    \ the id-fortezzaWrap80\n   OID.  The parameters field of KeyWrapAlgorithm MUST\
    \ be absent. The\n   SMIMECapability SEQUENCE for KEA SHOULD be included in the\
    \ key\n   management algorithms portion of the SMIMECapabilities list.  The\n\
    \   SMIMECapability SEQUENCE representing KEA MUST be DER-encoded as the\n   following\
    \ hexadecimal string:\n      3018 0609 6086 4801 6502 0101 1830 0b06 0960 8648\
    \ 0165 0201 0117\n   The SMIMECapability SEQUENCE representing SKIPJACK MUST include\
    \ the\n   id-fortezzaConfidentialityAlgorithm OID in the capabilityID field and\n\
    \   the parameters field MUST be absent.  The SMIMECapability SEQUENCE\n   for\
    \ SKIPJACK SHOULD be included in the symmetric encryption\n   algorithms portion\
    \ of the SMIMECapabilities list.  The\n   SMIMECapability SEQUENCE representing\
    \ SKIPJACK MUST be DER-encoded as\n   the following hexadecimal string:\n    \
    \  300b 0609 6086 4801 6502 0101 0400\n"
- title: 8. Object Identifier Definitions
  contents:
  - "8. Object Identifier Definitions\n   The following OIDs are specified in [INFO],\
    \ but are repeated here for\n   the reader's convenience:\n   id-keyExchangeAlgorithm\
    \ OBJECT IDENTIFIER ::= {joint-iso-ccitt(2)\n   country(16) us(840) organization(1)\
    \ gov(101) dod(2) infosec(1)\n   algorithms(1) keyExchangeAlgorithm (22)}\n  \
    \ id-fortezzaWrap80 OBJECT IDENTIFIER ::= {joint-iso-ccitt(2)\n   country(16)\
    \ us(840) organization(1) gov(101) dod(2) infosec(1)\n   algorithms(1) fortezzaWrap80Algorithm\
    \ (23)}\n   id-kEAKeyEncryptionAlgorithm OBJECT IDENTIFIER ::= {joint-iso-\n \
    \  ccitt(2) country(16) us(840) organization(1) gov(101) dod(2)\n   infosec(1)\
    \ algorithms(1) kEAKeyEncryptionAlgorithm (24)}\n   id-fortezzaConfidentialityAlgorithm\
    \ OBJECT IDENTIFIER ::= {joint-\n   iso-ccitt(2) country(16) us(840) organization(1)\
    \ gov(101) dod(2)\n   infosec(1) algorithms(1) fortezzaConfidentialityAlgorithm\
    \ (4)}\n   As specified in [USSUP1], when the id-\n   fortezzaConfidentialityAlgorithm\
    \ OID is present in the\n   AlgorithmIdentifier algorithm field, then the AlgorithmIdentifier\n\
    \   parameters field MUST be present and MUST include the SKIPJACK IV\n   ASN.1\
    \ encoded using the following syntax:\n   Skipjack-Parm ::= SEQUENCE { initialization-vector\
    \   OCTET STRING }\n   Note: [CMS] Section 2, \"General Overview\" describes the\
    \ ASN.1\n   encoding conventions for the CMS content types including the\n   enveloped-data\
    \ and encrypted-data content types in which the id-\n   fortezzaConfidentialityAlgorithm\
    \ OID and parameters will be present.\n"
- title: References
  contents:
  - "References\n   [CMS]        Housley, R., \"Cryptographic Message Syntax\", RFC\
    \ 2630,\n                June 1999.\n   [KEA]        Housley, R. and W. Polk,\
    \ \"Representation of Key Exchange\n                Algorithm (KEA) Keys in Internet\
    \ X.509 Public Key\n                Infrastructure Certificates\", RFC 2528, March\
    \ 1999.\n   [INFO]       Registry of INFOSEC Technical Objects, 22 July 1999.\n\
    \   [MSG]        Ramsdell, B., \"S/MIME Version 3 Message Specification\",\n \
    \               RFC 2633, June 1999.\n   [MUSTSHOULD] Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [SJ-KEA]     SKIPJACK and KEA Algorithm Specifications,\
    \ Version 2.0,\n                http://csrc.nist.gov/encryption/skipjack-kea.htm.\n\
    \   [USSUP1]     Allied Communication Publication 120 (ACP120) Common\n      \
    \          Security Protocol (CSP) United States (US) Supplement\n           \
    \     No. 1, June 1998;\n  http://www.armadillo.huntsville.al.us/Fortezza_docs/missi2.html#specs.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The following people have made significant contributions\
    \ to this\n   memo: David Dalkowski, Phillip Griffin, Russ Housley, Pierce\n \
    \  Leonberger, Rich Nicholas, Bob Relyea and Jim Schaad.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   John Pawling\n   Wang Government Services, Inc. (WGSI),\n\
    \   A Getronics Company\n   141 National Business Pkwy, Suite 210\n   Annapolis\
    \ Junction, MD  20701\n   Phone: (301) 939-2739\n          (410) 880-6095\n  \
    \ EMail: john.pawling@wang.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
