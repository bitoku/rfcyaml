- title: __initial_text__
  contents:
  - '                   Representing DNS Messages in JSON

    '
- title: Abstract
  contents:
  - "Abstract\n   Some applications use DNS messages, or parts of DNS messages, as\n\
    \   data.  For example, a system that captures DNS queries and responses\n   might\
    \ want to be able to easily search them without having to decode\n   the messages\
    \ each time.  Another example is a system that puts\n   together DNS queries and\
    \ responses from message parts.  This document\n   describes a general format\
    \ for DNS message data in JSON.  Specific\n   profiles of the format in this document\
    \ can be described in other\n   documents for specific applications and usage\
    \ scenarios.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8427.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Design of the Format  . . . . . . . . . . . . . .\
    \ . . . .   3\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   2.  JSON Format for DNS Messages  . . . . . . . . . . . . . .\
    \ . .   5\n     2.1.  Message Object Members  . . . . . . . . . . . . . . . .\
    \ .   5\n     2.2.  Resource Record Object Members  . . . . . . . . . . . . .\
    \   6\n     2.3.  Specific RDATA Field Members  . . . . . . . . . . . . . .  \
    \ 7\n     2.4.  The Message and Its Parts as Octets . . . . . . . . . . .   8\n\
    \     2.5.  Additional Message Object Members . . . . . . . . . . . .   8\n  \
    \   2.6.  Name Fields . . . . . . . . . . . . . . . . . . . . . . .   9\n   3.\
    \  JSON Format for a Paired DNS Query and Response . . . . . . .   9\n   4.  Streaming\
    \ DNS Objects . . . . . . . . . . . . . . . . . . . .   9\n   5.  Examples  .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  10\n     5.1.  Example of\
    \ the Format of a DNS Query  . . . . . . . . . .  10\n     5.2.  Example of the\
    \ Format of a Paired DNS Query and Response   11\n   6.  Local Format Policy .\
    \ . . . . . . . . . . . . . . . . . . . .  12\n   7.  IANA Considerations . .\
    \ . . . . . . . . . . . . . . . . . . .  12\n     7.1.  Media Type Registration\
    \ of application/dns+json . . . . .  12\n   8.  Security Considerations . . .\
    \ . . . . . . . . . . . . . . . .  13\n   9.  Privacy Considerations  . . . .\
    \ . . . . . . . . . . . . . . .  14\n   10. References  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  14\n     10.1.  Normative References . . . . .\
    \ . . . . . . . . . . . . .  14\n     10.2.  Informative References . . . . .\
    \ . . . . . . . . . . . .  15\n   Acknowledgements  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  15\n   Author's Address  . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The DNS message format is defined in [RFC1035].  DNS queries\
    \ and DNS\n   responses have exactly the same structure.  Many of the field names\n\
    \   and data type names given in [RFC1035] are commonly used in\n   discussions\
    \ of DNS.  For example, it is common to hear things like\n   \"the query had a\
    \ QNAME of 'example.com'\" or \"the RDATA has a simple\n   structure\".\n   There\
    \ are hundreds of data-interchange formats for serializing\n   structured data.\
    \  Currently, JSON [RFC8259] is quite popular for many\n   types of data, particularly\
    \ data that has named subfields and\n   optional parts.\n   This document uses\
    \ JSON to describe DNS messages.  It also defines\n   how to describe a paired\
    \ DNS query and response and how to stream DNS\n   objects.\n"
- title: 1.1.  Design of the Format
  contents:
  - "1.1.  Design of the Format\n   There are many ways to design a data format. \
    \ This document uses a\n   specific design methodology based on the DNS format.\n\
    \   o  The format is based on JSON objects in order to allow a writer to\n   \
    \   include or exclude parts of the format at will.  No object members\n     \
    \ are ever required.\n   o  This format is purposely overly general.  A protocol\
    \ or\n      application that uses this format is expected to use only a subset\n\
    \      of the items defined here; it is expected to define its own\n      profile\
    \ from this format.\n   o  The format allows transformation through JSON that\
    \ would permit\n      re-creation of the wire content of the message.\n   o  All\
    \ members whose values are always 16 bits or shorter are\n      represented by\
    \ JSON numbers with no minus sign, no fractional part\n      (except in fields\
    \ that are specifically noted below), and no\n      exponent part.  One-bit values\
    \ are represented as JSON numbers\n      whose values are either 0 or 1.  See\
    \ Section 6 of [RFC8259] for\n      more detail on JSON numbers.\n   o  The JSON\
    \ representation of the objects described in this document\n      is limited to\
    \ the UTF-8 codepoints from U+0000 to U+007F.  This is\n      done to prevent\
    \ an attempt to use a different encoding such as\n      UTF-8 for octets in names\
    \ or data.\n   o  Items that have string values can have \"HEX\" appended to their\n\
    \      names to indicate a non-ASCII encoding of the value.  Names that\n    \
    \  end in \"HEX\" have values stored in base16 encoding (hex with\n      uppercase\
    \ letters) defined in [RFC4648].  This is particularly\n      useful for RDATA\
    \ that is binary.\n   o  All field names in this format are used as in [RFC1035],\
    \ including\n      their capitalization.  Names not defined in [RFC1035] generally\n\
    \      use \"camel case\".\n   o  The same data may be represented in multiple\
    \ object members\n      multiple times.  For example, there is a member for the\
    \ octets of\n      the DNS message header, and there are members for each named\
    \ part\n      of the header.  A message object can thus inadvertently have\n \
    \     inconsistent data, such as a header member whose value does not\n      match\
    \ the value of the first bits in the entire message member.\n   o  It is acceptable\
    \ that there are multiple ways to represent the\n      same data.  This is done\
    \ so that application designers can choose\n      what fields are best for them\
    \ and even so that they are able to\n      allow multiple representations.  That\
    \ is, there is no \"better\" way\n      to represent DNS data, so this design\
    \ doesn't prefer specific\n      representations.\n   o  The design explicitly\
    \ allows for the description of malformed DNS\n      messages.  This is important\
    \ for systems that are logging messages\n      seen on the wire, particularly\
    \ messages that might be used as part\n      of an attack.  A few examples of\
    \ malformed DNS messages include:\n      *  a resource record (RR) that has an\
    \ RDLENGTH of 4 but an RDATA\n         whose length is longer than 4 (if it is\
    \ the last RR in a\n         message)\n      *  a DNS message whose QDCOUNT is\
    \ 0\n      *  a DNS message whose ANCOUNT is large but there are insufficient\n\
    \         bytes after the header\n      *  a DNS message whose length is less\
    \ than 12 octets, meaning it\n         doesn't even have a full header\n   o \
    \ An object in this format can have zero or more of the members\n      defined\
    \ here; that is, no members are required by the format\n      itself.  Instead,\
    \ profiles that use this format might have\n      requirements for mandatory members,\
    \ optional members, and\n      prohibited members from the format.  Also, this\
    \ format does not\n      prohibit members that are not defined in this format;\
    \ profiles of\n      the format are free to add new members in the profile.\n\
    \   o  This document defines DNS messages, not the zone files described\n    \
    \  in [RFC1035].  A different specification could be written to\n      extend\
    \ it to represent zone files.  Note that DNS zone files allow\n      escaping\
    \ of octet values using \"\\DDD\" notation, but this\n      specification does\
    \ not allow that; when encoding from a zone file\n      to this JSON format, you\
    \ need to do a conversion for many types of\n      values.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  JSON Format for DNS Messages
  contents:
  - "2.  JSON Format for DNS Messages\n   The following gives all of the members defined\
    \ for a DNS message.  It\n   is organized approximately by levels of the DNS message.\n"
- title: 2.1.  Message Object Members
  contents:
  - "2.1.  Message Object Members\n   o  ID - Integer whose value is 0 to 65535\n\
    \   o  QR - Boolean\n   o  Opcode - Integer whose value is 0 to 15\n   o  AA -\
    \ Boolean\n   o  TC - Boolean\n   o  RD - Boolean\n   o  RA - Boolean\n   o  AD\
    \ - Boolean\n   o  CD - Boolean\n   o  RCODE - Integer whose value is 0 to 15\n\
    \   o  QDCOUNT - Integer whose value is 0 to 65535\n   o  ANCOUNT - Integer whose\
    \ value is 0 to 65535\n   o  NSCOUNT - Integer whose value is 0 to 65535\n   o\
    \  ARCOUNT - Integer whose value is 0 to 65535\n   o  QNAME - String of the name\
    \ of the first Question section of the\n      message; see Section 2.6 for a description\
    \ of the contents\n   o  compressedQNAME - Object that describes the name with\
    \ two optional\n      values: \"isCompressed\" (with a value of 0 for no and 1\
    \ for yes)\n      and \"length\" (with an integer giving the length in the message)\n\
    \   o  QTYPE - Integer whose value is 0 to 65535, of the QTYPE of the\n      first\
    \ Question section of the message\n   o  QTYPEname - String whose value is from\
    \ the IANA \"Resource Record\n      (RR) TYPEs\" registry or has the format in\
    \ [RFC3597]; this is case\n      sensitive, so \"AAAA\", not \"aaaa\"\n   o  QCLASS\
    \ - Integer whose value is 0 to 65535, of the QCLASS of the\n      first Question\
    \ section of the message\n   o  QCLASSname - String whose value is \"IN\", \"\
    CH\", or \"HS\" or that has\n      the format in [RFC3597]\n   o  questionRRs\
    \ - Array of zero or more resource records or rrSet\n      objects in the Question\
    \ section\n   o  answerRRs - Array of zero or more resource records or rrSet\n\
    \      objects in the Answer section\n   o  authorityRRs - Array of zero or more\
    \ resource records or rrSet\n      objects in the Authority section\n   o  additionalRRs\
    \ - Array of zero or more resource records or rrSet\n      objects in the Additional\
    \ section\n"
- title: 2.2.  Resource Record Object Members
  contents:
  - "2.2.  Resource Record Object Members\n   A resource record is represented as\
    \ an object with the following\n   members.\n   o  NAME - String of the NAME field\
    \ of the resource record; see\n      Section 2.6 for a description of the contents\n\
    \   o  compressedNAME - Object that describes the name with two optional\n   \
    \   values: \"isCompressed\" (with a value of 0 for no and 1 for yes)\n      and\
    \ \"length\" (with an integer giving the length in the message)\n   o  TYPE -\
    \ Integer whose value is 0 to 65535\n   o  TYPEname - String whose value is from\
    \ the IANA \"Resource Record\n      (RR) TYPEs\" registry or has the format in\
    \ [RFC3597]; this is case\n      sensitive, so \"AAAA\", not \"aaaa\"\n   o  CLASS\
    \ - Integer whose value is 0 to 65535\n   o  CLASSname - String whose value is\
    \ \"IN\", \"CH\", or \"HS\" or has the\n      format in [RFC3597]\n   o  TTL -\
    \ Integer whose value is -2147483648 to 2147483647 (it will\n      only be 0 to\
    \ 2147483647 in normal circumstances)\n   o  RDLENGTH - Integer whose value is\
    \ 0 to 65535.  Applications using\n      this format are unlikely to use this\
    \ value directly, and instead\n      calculate the value from the RDATA.\n   o\
    \  RDATAHEX - Hex-encoded string (base16 encoding, described in\n      [RFC4648])\
    \ of the octets of the RDATA field of the resource\n      record.  The data in\
    \ some common RDATA fields are also described\n      in their own members; see\
    \ Section 2.3\n   o  rrSet - List of objects that have RDLENGTH and RDATA members\n\
    \   A Question section can be expressed as a resource record.  When doing\n  \
    \ so, the TTL, RDLENGTH, and RDATA members make no sense.\n"
- title: 2.3.  Specific RDATA Field Members
  contents:
  - "2.3.  Specific RDATA Field Members\n   The following are common RDATA types and\
    \ how to specify them as JSON\n   members.  The name of the member contains the\
    \ name of the RDATA type.\n   The data type for each of these members is a string.\
    \  Each name is\n   prefaced with \"rdata\" to prevent a name collision with fields\
    \ that\n   might later be defined that have the same name as the raw type name.\n\
    \   o  rdataA - IPv4 address, such as \"192.168.33.44\"\n   o  rdataAAAA - IPv6\
    \ address, such as \"fe80::a65e:60ff:fed6:8aaf\", as\n      defined in [RFC5952]\n\
    \   o  rdataCNAME - A domain name\n   o  rdataDNAME - A domain name\n   o  rdataNS\
    \ - A domain name\n   o  rdataPTR - A domain name\n   o  rdataTXT - A text value\n\
    \   In addition, each of the following members has a value that is a\n   space-separated\
    \ string that matches the display format definition in\n   the RFC that defines\
    \ that RDATA type.  It is not expected that every\n   receiving application will\
    \ know how to parse these values.\n   rdataCDNSKEY, rdataCDS, rdataCSYNC, rdataDNSKEY,\
    \ rdataHIP,\n   rdataIPSECKEY, rdataKEY, rdataMX, rdataNSEC, rdataNSEC3,\n   rdataNSEC3PARAM,\
    \ rdataOPENPGPKEY, rdataRRSIG, rdataSMIMEA, rdataSPF,\n   rdataSRV, rdataSSHFP,\
    \ rdataTLSA\n"
- title: 2.4.  The Message and Its Parts as Octets
  contents:
  - "2.4.  The Message and Its Parts as Octets\n   The following can be members of\
    \ a message object.  These members are\n   all encoded in base16 encoding, described\
    \ in [RFC4648].  All these\n   items are strings.\n   o  messageOctetsHEX - The\
    \ octets of the message\n   o  headerOctetsHEX - The first 12 octets of the message\
    \ (or fewer, if\n      the message is truncated)\n   o  questionOctetsHEX - The\
    \ octets of the Question section\n   o  answerOctetsHEX - The octets of the Answer\
    \ section\n   o  authorityOctetsHEX - The octets of the Authority section\n  \
    \ o  additionalOctetsHEX - The octets of the Additional section\n   The following\
    \ can be a member of a resource record object.\n   o  rrOctetsHEX - The octets\
    \ of a particular resource record\n   The items in this section are useful in\
    \ applications to canonically\n   reproduce what appeared on the wire.  For example,\
    \ an application\n   that is converting wire-format requests and responses might\
    \ do\n   decompression of names, but the system reading the converted data may\n\
    \   want to be sure the decompression was done correctly.  Such a system\n   would\
    \ need to see the part of the message where the decompressed\n   labels resided,\
    \ such as in one of the items in this section.\n"
- title: 2.5.  Additional Message Object Members
  contents:
  - "2.5.  Additional Message Object Members\n   The following are members that might\
    \ appear in a message object:\n   o  dateString - The date that the message was\
    \ sent or received, given\n      as a string in the standard format described\
    \ in [RFC3339] and\n      refined by Section 3.3 of [RFC4287].\n   o  dateSeconds\
    \ - The date that the message was sent or received,\n      given as a JSON number\
    \ that is the number of seconds since\n      1970-01-01T00:00Z in UTC time; this\
    \ number can be fractional.\n      This number must have no minus sign, can have\
    \ an optional\n      fractional part, and can have no exponent part.\n   o  comment\
    \ - An unstructured comment as a string.\n"
- title: 2.6.  Name Fields
  contents:
  - "2.6.  Name Fields\n   Names are represented by JSON strings.  The rules for how\
    \ names are\n   encoded are described in Section 1.1.  (To recap: it is limited\
    \ to\n   the UTF-8 codepoints from U+0000 to U+007F.)  The contents of these\n\
    \   fields are always uncompressed; that is, after [RFC1035], name\n   compression\
    \ has been removed.\n   There are two encodings for names:\n   o  If the member\
    \ name does not end in \"HEX\", the value is a domain\n      name encoded as DNS\
    \ labels consisting of UTF-8 codepoints from\n      U+0000 to U+007F.  Within\
    \ a label, codepoints above U+007F and the\n      codepoint U+002E (ASCII period)\
    \ MUST be expressed using JSON's\n      escaping rules within this set of codepoints.\
    \  Separation between\n      labels is indicated with a period (codepoint U+002E).\n\
    \      Internationalized Domain Name (IDN) labels are always expressed in\n  \
    \    their A-label form, as described in [RFC5890].\n   o  If the member name\
    \ ends in \"HEX\", the value is the wire format for\n      an entire domain name\
    \ stored in base16 encoding, which is\n      described in [RFC4648].\n"
- title: 3.  JSON Format for a Paired DNS Query and Response
  contents:
  - "3.  JSON Format for a Paired DNS Query and Response\n   A paired DNS query and\
    \ response is represented as an object.  Two\n   optional members of this object\
    \ are named \"queryMessage\" and\n   \"responseMessage\", and each has a value\
    \ that is a message object.\n   This design was chosen (as compared to the more\
    \ obvious array of two\n   values) so that a paired DNS query and response could\
    \ be\n   differentiated from a stream of DNS messages whose length happens to\n\
    \   be two.\n"
- title: 4.  Streaming DNS Objects
  contents:
  - "4.  Streaming DNS Objects\n   Streaming of DNS objects is performed using JSON\
    \ text sequences\n   [RFC7464].\n"
- title: 5.  Examples
  contents:
  - '5.  Examples

    '
- title: 5.1.  Example of the Format of a DNS Query
  contents:
  - "5.1.  Example of the Format of a DNS Query\n   The following is an example of\
    \ a query for the A record of\n   example.com.\n   { \"ID\": 19678, \"QR\": 0,\
    \ \"Opcode\": 0,\n     \"AA\": 0, \"TC\": 0, \"RD\": 0, \"RA\": 0, \"AD\": 0,\
    \ \"CD\": 0, \"RCODE\": 0,\n     \"QDCOUNT\": 1, \"ANCOUNT\": 0, \"NSCOUNT\":\
    \ 0, \"ARCOUNT\": 0,\n     \"QNAME\": \"example.com\", \"QTYPE\": 1, \"QCLASS\"\
    : 1\n   }\n   As stated earlier, all members of an object are optional.  This\n\
    \   example object could have one or more of the following members as\n   well:\n\
    \   \"answerRRs\": []\n   \"authorityOctetsHEX\": \"\"\n   \"comment\": \"Something\
    \ pithy goes here\"\n   \"dateSeconds\": 1408504748.657783\n   \"headerOctetsHEX\"\
    : \"4CDE00000001000000000000\"\n   \"QNAMEHEX\": \"076578616D706C6503636F6D00\"\
    ,\n   \"compressedQNAME\": { \"isCompressed\": 0 },\n   \"messageOctetsHEX\":\n\
    \        \"4CDE00000001000000000000076578616D706C6503636F6D0000010001\"\n   \"\
    questionOctetsHEX\": \"076578616D706C6503636F6D0000010001\"\n   \"questionRRs\"\
    : [ { \"NAMEHEX\": \"076578616D706C6503636F6D00\",\n                  \"TYPE\"\
    : 1, \"CLASS\": 1, \"hostNAME\" : \"example.com.\" } ]\n   \"questionRRs\": [\
    \ { \"NAME\": \"example.com.\", \"TYPE\": 1,\n                  \"CLASS\": 1,\
    \ } ]\n   (Note that this is an incomplete list of what else could be in the\n\
    \   object.)\n"
- title: 5.2.  Example of the Format of a Paired DNS Query and Response
  contents:
  - "5.2.  Example of the Format of a Paired DNS Query and Response\n   The following\
    \ is a paired DNS query and response for a query for the\n   A record of example.com.\n\
    \   {\n     \"queryMessage\": { \"ID\": 32784, \"QR\": 0, \"Opcode\": 0, \"AA\"\
    : 0,\n                      \"TC\": 0, \"RD\": 0, \"RA\": 0, \"AD\": 0, \"CD\"\
    : 0,\n                      \"RCODE\": 0, \"QDCOUNT\": 1, \"ANCOUNT\": 0,\n  \
    \                    \"NSCOUNT\": 0, \"ARCOUNT\": 0,\n                      \"\
    QNAME\": \"example.com.\",\n                      \"QTYPE\": 1, \"QCLASS\": 1\
    \ },\n     \"responseMessage\": { \"ID\": 32784, \"QR\": 1, \"AA\": 1, \"RCODE\"\
    : 0,\n                         \"QDCOUNT\": 1, \"ANCOUNT\": 1, \"NSCOUNT\": 1,\n\
    \                         \"ARCOUNT\": 0,\n                         \"answerRRs\"\
    : [ { \"NAME\": \"example.com.\",\n                                          \"\
    TYPE\": 1, \"CLASS\": 1,\n                                          \"TTL\": 3600,\n\
    \                                          \"RDATAHEX\": \"C0000201\" },\n   \
    \                                     { \"NAME\": \"example.com.\",\n        \
    \                                  \"TYPE\": 1, \"CLASS\": 1,\n              \
    \                            \"TTL\": 3600,\n                                \
    \          \"RDATAHEX\": \"C000AA01\" } ],\n                          \"authorityRRs\"\
    : [ { \"NAME\": \"ns.example.com.\",\n                                       \
    \       \"TYPE\": 1, \"CLASS\": 1,\n                                         \
    \     \"TTL\": 28800,\n                                              \"RDATAHEX\"\
    : \"CB007181\" } ]\n                       }\n   }\n   The Answer section could\
    \ instead be given with an rrSet:\n   \"answerRRs\": [ { \"NAME\": \"example.com.\"\
    ,\n                    \"TYPE\": 1, \"CLASS\": 1,\n                    \"TTL\"\
    : 3600,\n                    \"rrSet\": [ { \"RDATAHEX\": \"C0000201\" },\n  \
    \                             { \"RDATAHEX\": \"C000AA01\" } ] } ],\n   (Note\
    \ that this is an incomplete list of what else could be in the\n   Answer section.)\n"
- title: 6.  Local Format Policy
  contents:
  - "6.  Local Format Policy\n   Systems using the format in this document will likely\
    \ have policy\n   about what must be in the objects.  Those policies are outside\
    \ the\n   scope of this document.\n   For example, passive DNS systems such as\
    \ those described in\n   [PASSIVE-DNS] cover just DNS responses.  Such a system\
    \ might have a\n   policy that makes QNAME, QTYPE, and answerRRs mandatory.  That\n\
    \   document also describes two mandatory times that are not in this\n   format,\
    \ so the policy would possibly also define those members and\n   make them mandatory.\
    \  The policy could also define additional members\n   that might appear in a\
    \ record.\n   As another example, a program that uses this format for configuring\n\
    \   what a test client sends on the wire might have a policy of \"each\n   record\
    \ object can have as few members as it wants; all unstated\n   members are filled\
    \ in from previous records\".\n"
- title: 7.  IANA Considerations
  contents:
  - '7.  IANA Considerations

    '
- title: 7.1.  Media Type Registration of application/dns+json
  contents:
  - "7.1.  Media Type Registration of application/dns+json\n   Type name: application\n\
    \   Subtype name: dns+json\n   Required parameters: N/A\n   Optional parameters:\
    \ N/A\n   Encoding considerations:  Encoding considerations are identical to\n\
    \   those specified for the \"application/json\" media type.\n   Security considerations:\
    \  This document specifies the security\n   considerations for the format.\n \
    \  Interoperability considerations:  This document specifies format of\n   conforming\
    \ messages and the interpretation thereof.\n   Published specification:  This\
    \ document\n   Applications that use this media type:  Systems that want to exchange\n\
    \   DNS messages\n   Fragment identifier considerations:  None\n   Additional\
    \ information:\n     Deprecated alias names for this type: N/A\n     Magic number(s):\
    \  N/A\n     File extension(s):  This document uses the media type to refer to\n\
    \     protocol messages and thus does not require a file extension.\n     Macintosh\
    \ file type code(s):  N/A\n   Person & email address to contact for further information:\n\
    \   Paul Hoffman, paul.hoffman@icann.org\n   Intended usage:  COMMON\n   Restrictions\
    \ on usage:  N/A\n   Author:  Paul Hoffman, paul.hoffman@icann.org\n   Change\
    \ controller:  Paul Hoffman, paul.hoffman@icann.org\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   As described in Section 1.1, a message object\
    \ can have inconsistent\n   data, such as a message with an ANCOUNT of 1 but that\
    \ has either an\n   empty answerRRs array or an answerRRs array that has two or\
    \ more RRs.\n   Other examples of inconsistent data would be resource records\
    \ whose\n   RDLENGTH does not match the length of the decoded value in the\n \
    \  RDATAHEX member, a record whose various header fields do not match\n   the\
    \ value in headerOctetsHEX, and so on.  A reader of this format\n   must never\
    \ assume that all of the data in an object are all\n   consistent with each other.\n\
    \   This document describes a format, not a profile of that format.  Lack\n  \
    \ of profile can lead to security issues.  For example, if a system has\n   a\
    \ filter for JSON representations of DNS packets, that filter needs\n   to have\
    \ the same semantics for the output JSON as the consumer has.\n   Unless the profile\
    \ is quite tight, this can lead to the producer\n   being able to create fields\
    \ with different contents (using the HEX\n   and regular formats), fields with\
    \ malformed lengths, and so on.\n   Numbers in JSON do not have any bounds checking.\
    \  Thus, integer\n   values in a record might have invalid values, such as an\
    \ ID field\n   whose value is greater than or equal to 2^16, a QR field that has\
    \ a\n   value of 2, and so on.\n"
- title: 9.  Privacy Considerations
  contents:
  - "9.  Privacy Considerations\n   The values that can be contained in this format\
    \ may contain privacy-\n   sensitive information.  For example, a profile of this\
    \ format that is\n   used for logging queries sent to recursive resolvers might\
    \ have\n   source IP addresses that could identify the location of the person\n\
    \   who sent the DNS query.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names -\
    \ implementation and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n\
    \              November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3339]  Klyne,\
    \ G. and C. Newman, \"Date and Time on the Internet:\n              Timestamps\"\
    , RFC 3339, DOI 10.17487/RFC3339, July 2002,\n              <https://www.rfc-editor.org/info/rfc3339>.\n\
    \   [RFC3597]  Gustafsson, A., \"Handling of Unknown DNS Resource Record\n   \
    \           (RR) Types\", RFC 3597, DOI 10.17487/RFC3597, September\n        \
    \      2003, <https://www.rfc-editor.org/info/rfc3597>.\n   [RFC4287]  Nottingham,\
    \ M., Ed. and R. Sayre, Ed., \"The Atom\n              Syndication Format\", RFC\
    \ 4287, DOI 10.17487/RFC4287,\n              December 2005, <https://www.rfc-editor.org/info/rfc4287>.\n\
    \   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n        \
    \      Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006,\n          \
    \    <https://www.rfc-editor.org/info/rfc4648>.\n   [RFC5890]  Klensin, J., \"\
    Internationalized Domain Names for\n              Applications (IDNA): Definitions\
    \ and Document Framework\",\n              RFC 5890, DOI 10.17487/RFC5890, August\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc5890>.\n   [RFC5952]\
    \  Kawamura, S. and M. Kawashima, \"A Recommendation for IPv6\n              Address\
    \ Text Representation\", RFC 5952,\n              DOI 10.17487/RFC5952, August\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc5952>.\n   [RFC7464]\
    \  Williams, N., \"JavaScript Object Notation (JSON) Text\n              Sequences\"\
    , RFC 7464, DOI 10.17487/RFC7464, February 2015,\n              <https://www.rfc-editor.org/info/rfc7464>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]  Bray,\
    \ T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange\
    \ Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8259>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [DNS-QUERY]\n              Parthasarathy, M.\
    \ and P. Vixie, \"Representing DNS messages\n              using XML\", Work in\
    \ Progress,\n              draft-mohan-dns-query-xml-00, September 2011.\n   [DNSXML]\
    \   Daley, J., Morris, S., and J. Dickinson, \"dnsxml - A\n              standard\
    \ XML representation of DNS data\", Work in\n              Progress, draft-daley-dnsxml-00,\
    \ July 2013.\n   [PASSIVE-DNS]\n              Dulaunoy, A., Kaplan, A., Vixie,\
    \ P., and H. Stern,\n              \"Passive DNS - Common Output Format\", Work\
    \ in Progress,\n              draft-dulaunoy-dnsop-passive-dns-cof-04, June 2018.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Some of the ideas in this document were inspired by earlier,\n\
    \   abandoned work such as [DNSXML], [DNS-QUERY], and [PASSIVE-DNS].  The\n  \
    \ document was also inspired by early ideas from Stephane Bortzmeyer.\n   Many\
    \ people in the Domain Name System Operations (DNSOP) and DNS Over\n   HTTPS (DOH)\
    \ working groups contributed very useful ideas (even though\n   this was not a\
    \ WG work item).\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Paul Hoffman\n   ICANN\n   Email: paul.hoffman@icann.org\n"
