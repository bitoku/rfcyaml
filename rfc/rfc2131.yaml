- contents:
  - '                  Dynamic Host Configuration Protocol

    '
  title: __initial_text__
- contents:
  - "Status of this memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this memo
- contents:
  - "Abstract\n   The Dynamic Host Configuration Protocol (DHCP) provides a framework\n
    \  for passing configuration information to hosts on a TCPIP network.\n   DHCP
    is based on the Bootstrap Protocol (BOOTP) [7], adding the\n   capability of automatic
    allocation of reusable network addresses and\n   additional configuration options
    [19].  DHCP captures the behavior of\n   BOOTP relay agents [7, 21], and DHCP
    participants can interoperate\n   with BOOTP participants [9].\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction. . . . . . . . . . . . . . . . . . . .
    . . . . .  2\n   1.1 Changes to RFC1541. . . . . . . . . . . . . . . . . . . .
    . .  3\n   1.2 Related Work. . . . . . . . . . . . . . . . . . . . . . . . .  4\n
    \  1.3 Problem definition and issues . . . . . . . . . . . . . . . .  4\n   1.4
    Requirements. . . . . . . . . . . . . . . . . . . . . . . . .  5\n   1.5 Terminology
    . . . . . . . . . . . . . . . . . . . . . . . . .  6\n   1.6 Design goals. . .
    . . . . . . . . . . . . . . . . . . . . . .  6\n   2.  Protocol Summary. . . .
    . . . . . . . . . . . . . . . . . . .  8\n   2.1 Configuration parameters repository
    . . . . . . . . . . . . . 11\n   2.2 Dynamic allocation of network addresses .
    . . . . . . . . . . 12\n   3.  The Client-Server Protocol. . . . . . . . . . .
    . . . . . . . 13\n   3.1 Client-server interaction - allocating a network address.
    . . 13\n   3.2 Client-server interaction - reusing a  previously allocated\n       network
    address . . . . . . . . . . . . . . . . . . . . . . . 17\n   3.3 Interpretation
    and representation of time values. . . . . . . 20\n   3.4 Obtaining parameters
    with externally configured network\n       address . . . . . . . . . . . . . .
    . . . . . . . . . . . . . 20\n   3.5 Client parameters in DHCP . . . . . . . .
    . . . . . . . . . . 21\n   3.6 Use of DHCP in clients with multiple interfaces
    . . . . . . . 22\n   3.7 When clients should use DHCP. . . . . . . . . . . . .
    . . . . 22\n   4.  Specification of the DHCP client-server protocol. . . . . .
    . 22\n   4.1 Constructing and sending DHCP messages. . . . . . . . . . . . 22\n
    \  4.2 DHCP server administrative controls . . . . . . . . . . . . . 25\n   4.3
    DHCP server behavior. . . . . . . . . . . . . . . . . . . . . 26\n   4.4 DHCP
    client behavior. . . . . . . . . . . . . . . . . . . . . 34\n   5.  Acknowledgments.
    . . . . . . . . . . . . . . . . . . . . . . .42\n   6.  References . . . . . .
    . . . . . . . . . . . . . . . . . . . .42\n   7.  Security Considerations. . .
    . . . . . . . . . . . . . . . . .43\n   8.  Author's Address . . . . . . . . .
    . . . . . . . . . . . . . .44\n   A.  Host Configuration Parameters  . . . . .
    . . . . . . . . . . .45\n"
  title: Table of Contents
- contents:
  - "List of Figures\n   1. Format of a DHCP message . . . . . . . . . . . . . . .
    . . . .  9\n   2. Format of the 'flags' field. . . . . . . . . . . . . . . . .
    . 11\n   3. Timeline diagram of messages exchanged between DHCP client and\n      servers
    when allocating a new network address. . . . . . . . . 15\n   4. Timeline diagram
    of messages exchanged between DHCP client and\n      servers when reusing a previously
    allocated network address. . 18\n   5. State-transition diagram for DHCP clients.
    . . . . . . . . . . 34\n"
  title: List of Figures
- contents:
  - "List of Tables\n   1. Description of fields in a DHCP message. . . . . . . .
    . . . . 10\n   2. DHCP messages. . . . . . . . . . . . . . . . . . . . . . . .
    . 14\n   3. Fields and options used by DHCP servers. . . . . . . . . . . . 28\n
    \  4. Client messages from various states. . . . . . . . . . . . . . 33\n   5.
    Fields and options used by DHCP clients. . . . . . . . . . . . 37\n"
  title: List of Tables
- contents:
  - "1. Introduction\n   The Dynamic Host Configuration Protocol (DHCP) provides configuration\n
    \  parameters to Internet hosts.  DHCP consists of two components: a\n   protocol
    for delivering host-specific configuration parameters from a\n   DHCP server to
    a host and a mechanism for allocation of network\n   addresses to hosts.\n   DHCP
    is built on a client-server model, where designated DHCP server\n   hosts allocate
    network addresses and deliver configuration parameters\n   to dynamically configured
    hosts.  Throughout the remainder of this\n   document, the term \"server\" refers
    to a host providing initialization\n   parameters through DHCP, and the term \"client\"
    refers to a host\n   requesting initialization parameters from a DHCP server.\n
    \  A host should not act as a DHCP server unless explicitly configured\n   to
    do so by a system administrator.  The diversity of hardware and\n   protocol implementations
    in the Internet would preclude reliable\n   operation if random hosts were allowed
    to respond to DHCP requests.\n   For example, IP requires the setting of many
    parameters within the\n   protocol implementation software.  Because IP can be
    used on many\n   dissimilar kinds of network hardware, values for those parameters\n
    \  cannot be guessed or assumed to have correct defaults.  Also,\n   distributed
    address allocation schemes depend on a polling/defense\n   mechanism for discovery
    of addresses that are already in use.  IP\n   hosts may not always be able to
    defend their network addresses, so\n   that such a distributed address allocation
    scheme cannot be\n   guaranteed to avoid allocation of duplicate network addresses.\n
    \  DHCP supports three mechanisms for IP address allocation.  In\n   \"automatic
    allocation\", DHCP assigns a permanent IP address to a\n   client.  In \"dynamic
    allocation\", DHCP assigns an IP address to a\n   client for a limited period
    of time (or until the client explicitly\n   relinquishes the address).  In \"manual
    allocation\", a client's IP\n   address is assigned by the network administrator,
    and DHCP is used\n   simply to convey the assigned address to the client.  A particular\n
    \  network will use one or more of these mechanisms, depending on the\n   policies
    of the network administrator.\n   Dynamic allocation is the only one of the three
    mechanisms that\n   allows automatic reuse of an address that is no longer needed
    by the\n   client to which it was assigned.  Thus, dynamic allocation is\n   particularly
    useful for assigning an address to a client that will be\n   connected to the
    network only temporarily or for sharing a limited\n   pool of IP addresses among
    a group of clients that do not need\n   permanent IP addresses.  Dynamic allocation
    may also be a good choice\n   for assigning an IP address to a new client being
    permanently\n   connected to a network where IP addresses are sufficiently scarce\n
    \  that it is important to reclaim them when old clients are retired.\n   Manual
    allocation allows DHCP to be used to eliminate the error-prone\n   process of
    manually configuring hosts with IP addresses in\n   environments where (for whatever
    reasons) it is desirable to manage\n   IP address assignment outside of the DHCP
    mechanisms.\n   The format of DHCP messages is based on the format of BOOTP messages,\n
    \  to capture the BOOTP relay agent behavior described as part of the\n   BOOTP
    specification [7, 21] and to allow interoperability of existing\n   BOOTP clients
    with DHCP servers.  Using BOOTP relay agents eliminates\n   the necessity of having
    a DHCP server on each physical network\n   segment.\n"
  - contents:
    - "1.1 Changes to RFC 1541\n   This document updates the DHCP protocol specification
      that appears in\n   RFC1541.  A new DHCP message type, DHCPINFORM, has been
      added; see\n   section 3.4, 4.3 and 4.4 for details.  The classing mechanism
      for\n   identifying DHCP clients to DHCP servers has been extended to include\n
      \  \"vendor\" classes as defined in sections 4.2 and 4.3.  The minimum\n   lease
      time restriction has been removed.  Finally, many editorial\n   changes have
      been made to clarify the text as a result of experience\n   gained in DHCP interoperability
      tests.\n"
    title: 1.1 Changes to RFC 1541
  - contents:
    - "1.2 Related Work\n   There are several Internet protocols and related mechanisms
      that\n   address some parts of the dynamic host configuration problem.  The\n
      \  Reverse Address Resolution Protocol (RARP) [10] (through the\n   extensions
      defined in the Dynamic RARP (DRARP) [5]) explicitly\n   addresses the problem
      of network address discovery, and includes an\n   automatic IP address assignment
      mechanism.  The Trivial File Transfer\n   Protocol (TFTP) [20] provides for
      transport of a boot image from a\n   boot server.  The Internet Control Message
      Protocol (ICMP) [16]\n   provides for informing hosts of additional routers
      via \"ICMP\n   redirect\" messages.  ICMP also can provide subnet mask information\n
      \  through the \"ICMP mask request\" message and other information through\n
      \  the (obsolete) \"ICMP information request\" message.  Hosts can locate\n
      \  routers through the ICMP router discovery mechanism [8].\n   BOOTP is a transport
      mechanism for a collection of configuration\n   information.  BOOTP is also
      extensible, and official extensions [17]\n   have been defined for several configuration
      parameters.  Morgan has\n   proposed extensions to BOOTP for dynamic IP address
      assignment [15].\n   The Network Information Protocol (NIP), used by the Athena
      project at\n   MIT, is a distributed mechanism for dynamic IP address assignment\n
      \  [19].  The Resource Location Protocol RLP [1] provides for location\n   of
      higher level services.  Sun Microsystems diskless workstations use\n   a boot
      procedure that employs RARP, TFTP and an RPC mechanism called\n   \"bootparams\"
      to deliver configuration information and operating\n   system code to diskless
      hosts.  (Sun Microsystems, Sun Workstation\n   and SunOS are trademarks of Sun
      Microsystems, Inc.)  Some Sun\n   networks also use DRARP and an auto-installation
      mechanism to\n   automate the configuration of new hosts in an existing network.\n
      \  In other related work, the path minimum transmission unit (MTU)\n   discovery
      algorithm can determine the MTU of an arbitrary internet\n   path [14].  The
      Address Resolution Protocol (ARP) has been proposed\n   as a transport protocol
      for resource location and selection [6].\n   Finally, the Host Requirements
      RFCs [3, 4] mention specific\n   requirements for host reconfiguration and suggest
      a scenario for\n   initial configuration of diskless hosts.\n"
    title: 1.2 Related Work
  - contents:
    - "1.3 Problem definition and issues\n   DHCP is designed to supply DHCP clients
      with the configuration\n   parameters defined in the Host Requirements RFCs.
      \ After obtaining\n   parameters via DHCP, a DHCP client should be able to exchange
      packets\n   with any other host in the Internet.  The TCP/IP stack parameters\n
      \  supplied by DHCP are listed in Appendix A.\n   Not all of these parameters
      are required for a newly initialized\n   client.  A client and server may negotiate
      for the transmission of\n   only those parameters required by the client or
      specific to a\n   particular subnet.\n   DHCP allows but does not require the
      configuration of client\n   parameters not directly related to the IP protocol.
      \ DHCP also does\n   not address registration of newly configured clients with
      the Domain\n   Name System (DNS) [12, 13].\n   DHCP is not intended for use
      in configuring routers.\n"
    title: 1.3 Problem definition and issues
  - contents:
    - "1.4 Requirements\n   Throughout this document, the words that are used to define
      the\n   significance of particular requirements are capitalized.  These words\n
      \  are:\n      o \"MUST\"\n        This word or the adjective \"REQUIRED\" means
      that the\n        item is an absolute requirement of this specification.\n      o
      \"MUST NOT\"\n        This phrase means that the item is an absolute prohibition\n
      \       of this specification.\n      o \"SHOULD\"\n        This word or the
      adjective \"RECOMMENDED\" means that there\n        may exist valid reasons
      in particular circumstances to ignore\n        this item, but the full implications
      should be understood and\n        the case carefully weighed before choosing
      a different course.\n      o \"SHOULD NOT\"\n        This phrase means that
      there may exist valid reasons in\n        particular circumstances when the
      listed behavior is acceptable\n        or even useful, but the full implications
      should be understood\n        and the case carefully weighed before implementing
      any behavior\n        described with this label.\n      o \"MAY\"\n        This
      word or the adjective \"OPTIONAL\" means that this item is\n        truly optional.
      \ One vendor may choose to include the item\n        because a particular marketplace
      requires it or because it\n        enhances the product, for example; another
      vendor may omit the\n        same item.\n"
    title: 1.4 Requirements
  - contents:
    - "1.5 Terminology\n   This document uses the following terms:\n      o \"DHCP
      client\"\n      A DHCP client is an Internet host using DHCP to obtain\n      configuration
      parameters such as a network address.\n      o \"DHCP server\"\n      A DHCP
      server is an Internet host that returns configuration\n      parameters to DHCP
      clients.\n      o \"BOOTP relay agent\"\n      A BOOTP relay agent or relay
      agent is an Internet host or router\n      that passes DHCP messages between
      DHCP clients and DHCP servers.\n      DHCP is designed to use the same relay
      agent behavior as specified\n      in the BOOTP protocol specification.\n      o
      \"binding\"\n      A binding is a collection of configuration parameters, including\n
      \     at least an IP address, associated with or \"bound to\" a DHCP\n      client.
      \ Bindings are managed by DHCP servers.\n"
    title: 1.5 Terminology
  - contents:
    - "1.6 Design goals\n   The following list gives general design goals for DHCP.\n
      \     o DHCP should be a mechanism rather than a policy.  DHCP must\n        allow
      local system administrators control over configuration\n        parameters where
      desired; e.g., local system administrators\n        should be able to enforce
      local policies concerning allocation\n        and access to local resources
      where desired.\n      o Clients should require no manual configuration.  Each
      client\n        should be able to discover appropriate local configuration\n
      \       parameters without user intervention and incorporate those\n        parameters
      into its own configuration.\n      o Networks should require no manual configuration
      for individual\n        clients.  Under normal circumstances, the network manager\n
      \       should not have to enter any per-client configuration\n        parameters.\n
      \     o DHCP should not require a server on each subnet.  To allow for\n        scale
      and economy, DHCP must work across routers or through the\n        intervention
      of BOOTP relay agents.\n      o A DHCP client must be prepared to receive multiple
      responses\n        to a request for configuration parameters.  Some installations\n
      \       may include multiple, overlapping DHCP servers to enhance\n        reliability
      and increase performance.\n      o DHCP must coexist with statically configured,
      non-participating\n        hosts and with existing network protocol implementations.\n
      \     o DHCP must interoperate with the BOOTP relay agent behavior as\n        described
      by RFC 951 and by RFC 1542 [21].\n      o DHCP must provide service to existing
      BOOTP clients.\n   The following list gives design goals specific to the transmission
      of\n   the network layer parameters.  DHCP must:\n      o Guarantee that any
      specific network address will not be in\n        use by more than one DHCP client
      at a time,\n      o Retain DHCP client configuration across DHCP client reboot.
      \ A\n        DHCP client should, whenever possible, be assigned the same\n        configuration
      parameters (e.g., network address) in response\n        to each request,\n      o
      Retain DHCP client configuration across server reboots, and,\n        whenever
      possible, a DHCP client should be assigned the same\n        configuration parameters
      despite restarts of the DHCP mechanism,\n      o Allow automated assignment
      of configuration parameters to new\n        clients to avoid hand configuration
      for new clients,\n      o Support fixed or permanent allocation of configuration\n
      \       parameters to specific clients.\n"
    title: 1.6 Design goals
  title: 1. Introduction
- contents:
  - "2. Protocol Summary\n   From the client's point of view, DHCP is an extension
    of the BOOTP\n   mechanism.  This behavior allows existing BOOTP clients to\n
    \  interoperate with DHCP servers without requiring any change to the\n   clients'
    initialization software.  RFC 1542 [2] details the\n   interactions between BOOTP
    and DHCP clients and servers [9].  There\n   are some new, optional transactions
    that optimize the interaction\n   between DHCP clients and servers that are described
    in sections 3 and\n   4.\n   Figure 1 gives the format of a DHCP message and table
    1 describes\n   each of the fields in the DHCP message.  The numbers in parentheses\n
    \  indicate the size of each field in octets.  The names for the fields\n   given
    in the figure will be used throughout this document to refer to\n   the fields
    in DHCP messages.\n   There are two primary differences between DHCP and BOOTP.
    \ First,\n   DHCP defines mechanisms through which clients can be assigned a\n
    \  network address for a finite lease, allowing for serial reassignment\n   of
    network addresses to different clients.  Second, DHCP provides the\n   mechanism
    for a client to acquire all of the IP configuration\n   parameters that it needs
    in order to operate.\n   DHCP introduces a small change in terminology intended
    to clarify the\n   meaning of one of the fields.  What was the \"vendor extensions\"
    field\n   in BOOTP has been re-named the \"options\" field in DHCP. Similarly,\n
    \  the tagged data items that were used inside the BOOTP \"vendor\n   extensions\"
    field, which were formerly referred to as \"vendor\n   extensions,\" are now termed
    simply \"options.\"\n   0                   1                   2                   3\n
    \  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     op (1)    |   htype (1)   |   hlen (1)    |   hops (1)    |\n   +---------------+---------------+---------------+---------------+\n
    \  |                            xid (4)                            |\n   +-------------------------------+-------------------------------+\n
    \  |           secs (2)            |           flags (2)           |\n   +-------------------------------+-------------------------------+\n
    \  |                          ciaddr  (4)                          |\n   +---------------------------------------------------------------+\n
    \  |                          yiaddr  (4)                          |\n   +---------------------------------------------------------------+\n
    \  |                          siaddr  (4)                          |\n   +---------------------------------------------------------------+\n
    \  |                          giaddr  (4)                          |\n   +---------------------------------------------------------------+\n
    \  |                                                               |\n   |                          chaddr
    \ (16)                         |\n   |                                                               |\n
    \  |                                                               |\n   +---------------------------------------------------------------+\n
    \  |                                                               |\n   |                          sname
    \  (64)                         |\n   +---------------------------------------------------------------+\n
    \  |                                                               |\n   |                          file
    \   (128)                        |\n   +---------------------------------------------------------------+\n
    \  |                                                               |\n   |                          options
    (variable)                   |\n   +---------------------------------------------------------------+\n
    \                 Figure 1:  Format of a DHCP message\n   DHCP defines a new 'client
    identifier' option that is used to pass an\n   explicit client identifier to a
    DHCP server.  This change eliminates\n   the overloading of the 'chaddr' field
    in BOOTP messages, where\n   'chaddr' is used both as a hardware address for transmission
    of BOOTP\n   reply messages and as a client identifier.  The 'client identifier'\n
    \  is an opaque key, not to be interpreted by the server; for example,\n   the
    'client identifier' may contain a hardware address, identical to\n   the contents
    of the 'chaddr' field, or it may contain another type of\n   identifier, such
    as a DNS name.  The 'client identifier' chosen by a\n   DHCP client MUST be unique
    to that client within the subnet to which\n   the client is attached. If the client
    uses a 'client identifier' in\n   one message, it MUST use that same identifier
    in all subsequent\n   messages, to ensure that all servers correctly identify
    the client.\n   DHCP clarifies the interpretation of the 'siaddr' field as the\n
    \  address of the server to use in the next step of the client's\n   bootstrap
    process.  A DHCP server may return its own address in the\n   'siaddr' field,
    if the server is prepared to supply the next\n   bootstrap service (e.g., delivery
    of an operating system executable\n   image).  A DHCP server always returns its
    own address in the 'server\n   identifier' option.\n   FIELD      OCTETS       DESCRIPTION\n
    \  -----      ------       -----------\n   op            1  Message op code /
    message type.\n                    1 = BOOTREQUEST, 2 = BOOTREPLY\n   htype         1
    \ Hardware address type, see ARP section in \"Assigned\n                    Numbers\"
    RFC; e.g., '1' = 10mb ethernet.\n   hlen          1  Hardware address length (e.g.
    \ '6' for 10mb\n                    ethernet).\n   hops          1  Client sets
    to zero, optionally used by relay agents\n                    when booting via
    a relay agent.\n   xid           4  Transaction ID, a random number chosen by
    the\n                    client, used by the client and server to associate\n
    \                   messages and responses between a client and a\n                    server.\n
    \  secs          2  Filled in by client, seconds elapsed since client\n                    began
    address acquisition or renewal process.\n   flags         2  Flags (see figure
    2).\n   ciaddr        4  Client IP address; only filled in if client is in\n                    BOUND,
    RENEW or REBINDING state and can respond\n                    to ARP requests.\n
    \  yiaddr        4  'your' (client) IP address.\n   siaddr        4  IP address
    of next server to use in bootstrap;\n                    returned in DHCPOFFER,
    DHCPACK by server.\n   giaddr        4  Relay agent IP address, used in booting
    via a\n                    relay agent.\n   chaddr       16  Client hardware address.\n
    \  sname        64  Optional server host name, null terminated string.\n   file
    \       128  Boot file name, null terminated string; \"generic\"\n                    name
    or null in DHCPDISCOVER, fully qualified\n                    directory-path name
    in DHCPOFFER.\n   options     var  Optional parameters field.  See the options\n
    \                   documents for a list of defined options.\n           Table
    1:  Description of fields in a DHCP message\n   The 'options' field is now variable
    length. A DHCP client must be\n   prepared to receive DHCP messages with an 'options'
    field of at least\n   length 312 octets.  This requirement implies that a DHCP
    client must\n   be prepared to receive a message of up to 576 octets, the minimum
    IP\n   datagram size an IP host must be prepared to accept [3].  DHCP\n   clients
    may negotiate the use of larger DHCP messages through the\n   'maximum DHCP message
    size' option.  The options field may be further\n   extended into the 'file' and
    'sname' fields.\n   In the case of a client using DHCP for initial configuration
    (before\n   the client's TCP/IP software has been completely configured), DHCP\n
    \  requires creative use of the client's TCP/IP software and liberal\n   interpretation
    of RFC 1122.  The TCP/IP software SHOULD accept and\n   forward to the IP layer
    any IP packets delivered to the client's\n   hardware address before the IP address
    is configured; DHCP servers\n   and BOOTP relay agents may not be able to deliver
    DHCP messages to\n   clients that cannot accept hardware unicast datagrams before
    the\n   TCP/IP software is configured.\n   To work around some clients that cannot
    accept IP unicast datagrams\n   before the TCP/IP software is configured as discussed
    in the previous\n   paragraph, DHCP uses the 'flags' field [21].  The leftmost
    bit is\n   defined as the BROADCAST (B) flag.  The semantics of this flag are\n
    \  discussed in section 4.1 of this document.  The remaining bits of the\n   flags
    field are reserved for future use.  They MUST be set to zero by\n   clients and
    ignored by servers and relay agents.  Figure 2 gives the\n   format of the 'flags'
    field.\n                                    1 1 1 1 1 1\n                0 1 2
    3 4 5 6 7 8 9 0 1 2 3 4 5\n                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \               |B|             MBZ             |\n                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \               B:  BROADCAST flag\n                MBZ:  MUST BE ZERO (reserved
    for future use)\n                Figure 2:  Format of the 'flags' field\n"
  - contents:
    - "2.1 Configuration parameters repository\n   The first service provided by DHCP
      is to provide persistent storage\n   of network parameters for network clients.
      \ The model of DHCP\n   persistent storage is that the DHCP service stores a
      key-value entry\n   for each client, where the key is some unique identifier
      (for\n   example, an IP subnet number and a unique identifier within the\n   subnet)
      and the value contains the configuration parameters for the\n   client.\n   For
      example, the key might be the pair (IP-subnet-number, hardware-\n   address)
      (note that the \"hardware-address\" should be typed by the\n   type of hardware
      to accommodate possible duplication of hardware\n   addresses resulting from
      bit-ordering problems in a mixed-media,\n   bridged network) allowing for serial
      or concurrent reuse of a\n   hardware address on different subnets, and for
      hardware addresses\n   that may not be globally unique.  Alternately, the key
      might be the\n   pair (IP-subnet-number, hostname), allowing the server to assign\n
      \  parameters intelligently to a DHCP client that has been moved to a\n   different
      subnet or has changed hardware addresses (perhaps because\n   the network interface
      failed and was replaced). The protocol defines\n   that the key will be (IP-subnet-number,
      hardware-address) unless the\n   client explicitly supplies an identifier using
      the 'client\n   identifier' option.           A client can query the DHCP service
      to\n   retrieve its configuration parameters.  The client interface to the\n
      \  configuration parameters repository consists of protocol messages to\n   request
      configuration parameters and responses from the server\n   carrying the configuration
      parameters.\n"
    title: 2.1 Configuration parameters repository
  - contents:
    - "2.2 Dynamic allocation of network addresses\n   The second service provided
      by DHCP is the allocation of temporary or\n   permanent network (IP) addresses
      to clients.  The basic mechanism for\n   the dynamic allocation of network addresses
      is simple: a client\n   requests the use of an address for some period of time.
      \ The\n   allocation mechanism (the collection of DHCP servers) guarantees not\n
      \  to reallocate that address within the requested time and attempts to\n   return
      the same network address each time the client requests an\n   address.  In this
      document, the period over which a network address\n   is allocated to a client
      is referred to as a \"lease\" [11].  The\n   client may extend its lease with
      subsequent requests.  The client may\n   issue a message to release the address
      back to the server when the\n   client no longer needs the address.  The client
      may ask for a\n   permanent assignment by asking for an infinite lease.  Even
      when\n   assigning \"permanent\" addresses, a server may choose to give out\n
      \  lengthy but non-infinite leases to allow detection of the fact that\n   the
      client has been retired.\n   In some environments it will be necessary to reassign
      network\n   addresses due to exhaustion of available addresses.  In such\n   environments,
      the allocation mechanism will reuse addresses whose\n   lease has expired.  The
      server should use whatever information is\n   available in the configuration
      information repository to choose an\n   address to reuse.  For example, the
      server may choose the least\n   recently assigned address.  As a consistency
      check, the allocating\n   server SHOULD probe the reused address before allocating
      the address,\n   e.g., with an ICMP echo request, and the client SHOULD probe
      the\n   newly received address, e.g., with ARP.\n"
    title: 2.2 Dynamic allocation of network addresses
  title: 2. Protocol Summary
- contents:
  - "3. The Client-Server Protocol\n   DHCP uses the BOOTP message format defined
    in RFC 951 and given in\n   table 1 and figure 1.  The 'op' field of each DHCP
    message sent from\n   a client to a server contains BOOTREQUEST. BOOTREPLY is
    used in the\n   'op' field of each DHCP message sent from a server to a client.\n
    \  The first four octets of the 'options' field of the DHCP message\n   contain
    the (decimal) values 99, 130, 83 and 99, respectively (this\n   is the same magic
    cookie as is defined in RFC 1497 [17]).  The\n   remainder of the 'options' field
    consists of a list of tagged\n   parameters that are called \"options\".  All
    of the \"vendor extensions\"\n   listed in RFC 1497 are also DHCP options.  RFC
    1533 gives the\n   complete set of options defined for use with DHCP.\n   Several
    options have been defined so far.  One particular option -\n   the \"DHCP message
    type\" option - must be included in every DHCP\n   message.  This option defines
    the \"type\" of the DHCP message.\n   Additional options may be allowed, required,
    or not allowed,\n   depending on the DHCP message type.\n   Throughout this document,
    DHCP messages that include a 'DHCP message\n   type' option will be referred to
    by the type of the message; e.g., a\n   DHCP message with 'DHCP message type'
    option type 1 will be referred\n   to as a \"DHCPDISCOVER\" message.\n"
  - contents:
    - "3.1 Client-server interaction - allocating a network address\n   The following
      summary of the protocol exchanges between clients and\n   servers refers to
      the DHCP messages described in table 2.  The\n   timeline diagram in figure
      3 shows the timing relationships in a\n   typical client-server interaction.
      \ If the client already knows its\n   address, some steps may be omitted; this
      abbreviated interaction is\n   described in section 3.2.\n   1. The client broadcasts
      a DHCPDISCOVER message on its local physical\n      subnet.  The DHCPDISCOVER
      message MAY include options that suggest\n      values for the network address
      and lease duration.  BOOTP relay\n      agents may pass the message on to DHCP
      servers not on the same\n      physical subnet.\n   2. Each server may respond
      with a DHCPOFFER message that includes an\n      available network address in
      the 'yiaddr' field (and other\n      configuration parameters in DHCP options).
      \ Servers need not\n      reserve the offered network address, although the
      protocol will\n      work more efficiently if the server avoids allocating the
      offered\n      network address to another client.  When allocating a new address,\n
      \     servers SHOULD check that the offered network address is not\n      already
      in use; e.g., the server may probe the offered address\n      with an ICMP Echo
      Request.  Servers SHOULD be implemented so that\n      network administrators
      MAY choose to disable probes of newly\n      allocated addresses.  The server
      transmits the DHCPOFFER message\n      to the client, using the BOOTP relay
      agent if necessary.\n   Message         Use\n   -------         ---\n   DHCPDISCOVER
      -  Client broadcast to locate available servers.\n   DHCPOFFER    -  Server
      to client in response to DHCPDISCOVER with\n                   offer of configuration
      parameters.\n   DHCPREQUEST  -  Client message to servers either (a) requesting\n
      \                  offered parameters from one server and implicitly\n                   declining
      offers from all others, (b) confirming\n                   correctness of previously
      allocated address after,\n                   e.g., system reboot, or (c) extending
      the lease on a\n                   particular network address.\n   DHCPACK      -
      \ Server to client with configuration parameters,\n                   including
      committed network address.\n   DHCPNAK      -  Server to client indicating client's
      notion of network\n                   address is incorrect (e.g., client has
      moved to new\n                   subnet) or client's lease as expired\n   DHCPDECLINE
      \ -  Client to server indicating network address is already\n                   in
      use.\n   DHCPRELEASE  -  Client to server relinquishing network address and\n
      \                  cancelling remaining lease.\n   DHCPINFORM   -  Client to
      server, asking only for local configuration\n                   parameters;
      client already has externally configured\n                   network address.\n
      \                         Table 2:  DHCP messages\n                Server          Client
      \         Server\n            (not selected)                    (selected)\n
      \                 v               v               v\n                  |               |
      \              |\n                  |     Begins initialization     |\n                  |
      \              |               |\n                  | _____________/|\\____________
      \ |\n                  |/DHCPDISCOVER | DHCPDISCOVER  \\|\n                  |
      \              |               |\n              Determines          |          Determines\n
      \            configuration        |         configuration\n                  |
      \              |               |\n                  |\\             |  ____________/
      |\n                  | \\________    | /DHCPOFFER     |\n                  |
      DHCPOFFER\\   |/               |\n                  |           \\  |                |\n
      \                 |       Collects replies        |\n                  |             \\|
      \               |\n                  |     Selects configuration     |\n                  |
      \              |               |\n                  | _____________/|\\____________
      \ |\n                  |/ DHCPREQUEST  |  DHCPREQUEST\\ |\n                  |
      \              |               |\n                  |               |     Commits
      configuration\n                  |               |               |\n                  |
      \              | _____________/|\n                  |               |/ DHCPACK
      \     |\n                  |               |               |\n                  |
      \   Initialization complete    |\n                  |               |               |\n
      \                 .               .               .\n                  .               .
      \              .\n                  |               |               |\n                  |
      \     Graceful shutdown        |\n                  |               |               |\n
      \                 |               |\\ ____________ |\n                  |               |
      DHCPRELEASE  \\|\n                  |               |               |\n                  |
      \              |        Discards lease\n                  |               |
      \              |\n                  v               v               v\n     Figure
      3: Timeline diagram of messages exchanged between DHCP\n               client
      and servers when allocating a new network address\n  3. The client receives
      one or more DHCPOFFER messages from one or more\n     servers.  The client may
      choose to wait for multiple responses.\n     The client chooses one server from
      which to request configuration\n     parameters, based on the configuration
      parameters offered in the\n     DHCPOFFER messages.  The client broadcasts a
      DHCPREQUEST message\n     that MUST include the 'server identifier' option to
      indicate which\n     server it has selected, and that MAY include other options\n
      \    specifying desired configuration values.  The 'requested IP\n     address'
      option MUST be set to the value of 'yiaddr' in the\n     DHCPOFFER message from
      the server.  This DHCPREQUEST message is\n     broadcast and relayed through
      DHCP/BOOTP relay agents.  To help\n     ensure that any BOOTP relay agents forward
      the DHCPREQUEST message\n     to the same set of DHCP servers that received
      the original\n     DHCPDISCOVER message, the DHCPREQUEST message MUST use the
      same\n     value in the DHCP message header's 'secs' field and be sent to the\n
      \    same IP broadcast address as the original DHCPDISCOVER message.\n     The
      client times out and retransmits the DHCPDISCOVER message if\n     the client
      receives no DHCPOFFER messages.\n  4. The servers receive the DHCPREQUEST broadcast
      from the client.\n     Those servers not selected by the DHCPREQUEST message
      use the\n     message as notification that the client has declined that server's\n
      \    offer.  The server selected in the DHCPREQUEST message commits the\n     binding
      for the client to persistent storage and responds with a\n     DHCPACK message
      containing the configuration parameters for the\n     requesting client.  The
      combination of 'client identifier' or\n     'chaddr' and assigned network address
      constitute a unique\n     identifier for the client's lease and are used by
      both the client\n     and server to identify a lease referred to in any DHCP
      messages.\n     Any configuration parameters in the DHCPACK message SHOULD NOT\n
      \    conflict with those in the earlier DHCPOFFER message to which the\n     client
      is responding.  The server SHOULD NOT check the offered\n     network address
      at this point. The 'yiaddr' field in the DHCPACK\n     messages is filled in
      with the selected network address.\n     If the selected server is unable to
      satisfy the DHCPREQUEST message\n     (e.g., the requested network address has
      been allocated), the\n     server SHOULD respond with a DHCPNAK message.\n     A
      server MAY choose to mark addresses offered to clients in\n     DHCPOFFER messages
      as unavailable.  The server SHOULD mark an\n     address offered to a client
      in a DHCPOFFER message as available if\n     the server receives no DHCPREQUEST
      message from that client.\n  5. The client receives the DHCPACK message with
      configuration\n     parameters.  The client SHOULD perform a final check on
      the\n     parameters (e.g., ARP for allocated network address), and notes the\n
      \    duration of the lease specified in the DHCPACK message.  At this\n     point,
      the client is configured.  If the client detects that the\n     address is already
      in use (e.g., through the use of ARP), the\n     client MUST send a DHCPDECLINE
      message to the server and restarts\n     the configuration process.  The client
      SHOULD wait a minimum of ten\n     seconds before restarting the configuration
      process to avoid\n     excessive network traffic in case of looping.\n     If
      the client receives a DHCPNAK message, the client restarts the\n     configuration
      process.\n     The client times out and retransmits the DHCPREQUEST message
      if the\n     client receives neither a DHCPACK or a DHCPNAK message.  The client\n
      \    retransmits the DHCPREQUEST according to the retransmission\n     algorithm
      in section 4.1.  The client should choose to retransmit\n     the DHCPREQUEST
      enough times to give adequate probability of\n     contacting the server without
      causing the client (and the user of\n     that client) to wait overly long before
      giving up; e.g., a client\n     retransmitting as described in section 4.1 might
      retransmit the\n     DHCPREQUEST message four times, for a total delay of 60
      seconds,\n     before restarting the initialization procedure.  If the client\n
      \    receives neither a DHCPACK or a DHCPNAK message after employing the\n     retransmission
      algorithm, the client reverts to INIT state and\n     restarts the initialization
      process.  The client SHOULD notify the\n     user that the initialization process
      has failed and is restarting.\n  6. The client may choose to relinquish its
      lease on a network address\n     by sending a DHCPRELEASE message to the server.
      \ The client\n     identifies the lease to be released with its 'client identifier',\n
      \    or 'chaddr' and network address in the DHCPRELEASE message. If the\n     client
      used a 'client identifier' when it obtained the lease, it\n     MUST use the
      same 'client identifier' in the DHCPRELEASE message.\n"
    title: 3.1 Client-server interaction - allocating a network address
  - contents:
    - "3.2 Client-server interaction - reusing a previously allocated network\n    address\n
      \  If a client remembers and wishes to reuse a previously allocated\n   network
      address, a client may choose to omit some of the steps\n   described in the
      previous section.  The timeline diagram in figure 4\n   shows the timing relationships
      in a typical client-server interaction\n   for a client reusing a previously
      allocated network address.\n   1. The client broadcasts a DHCPREQUEST message
      on its local subnet.\n      The message includes the client's network address
      in the\n      'requested IP address' option. As the client has not received
      its\n      network address, it MUST NOT fill in the 'ciaddr' field. BOOTP\n
      \     relay agents pass the message on to DHCP servers not on the same\n      subnet.
      \ If the client used a 'client identifier' to obtain its\n      address, the
      client MUST use the same 'client identifier' in the\n      DHCPREQUEST message.\n
      \  2. Servers with knowledge of the client's configuration parameters\n      respond
      with a DHCPACK message to the client.  Servers SHOULD NOT\n      check that
      the client's network address is already in use; the\n      client may respond
      to ICMP Echo Request messages at this point.\n                Server          Client
      \         Server\n                  v               v               v\n                  |
      \               |               |\n                  |              Begins            |\n
      \                 |          initialization        |\n                  |                |
      \              |\n                  |                /|\\             |\n                  |
      \  _________ __/ | \\__________  |\n                  | /DHCPREQU EST  |  DHCPREQUEST\\
      |\n                  |/               |              \\|\n                  |
      \               |               |\n               Locates             |            Locates\n
      \           configuration          |         configuration\n                  |
      \               |               |\n                  |\\               |              /|\n
      \                 | \\              |  ___________/ |\n                  |  \\
      \            | /  DHCPACK    |\n                  |   \\ _______    |/              |\n
      \                 |     DHCPACK\\   |               |\n                  |          Initialization
      \       |\n                  |             complete           |\n                  |
      \              \\|               |\n                  |                |               |\n
      \                 |           (Subsequent          |\n                  |             DHCPACKS
      \          |\n                  |             ignored)           |\n                  |
      \               |               |\n                  |                |               |\n
      \                 v                v               v\n     Figure 4: Timeline
      diagram of messages exchanged between DHCP\n               client and servers
      when reusing a previously allocated\n               network address\n      If
      the client's request is invalid (e.g., the client has moved\n      to a new
      subnet), servers SHOULD respond with a DHCPNAK message to\n      the client.
      Servers SHOULD NOT respond if their information is not\n      guaranteed to
      be accurate.  For example, a server that identifies a\n      request for an
      expired binding that is owned by another server SHOULD\n      NOT respond with
      a DHCPNAK unless the servers are using an explicit\n      mechanism to maintain
      coherency among the servers.\n      If 'giaddr' is 0x0 in the DHCPREQUEST message,
      the client is on\n      the same subnet as the server.  The server MUST\n      broadcast
      the DHCPNAK message to the 0xffffffff broadcast address\n      because the client
      may not have a correct network address or subnet\n      mask, and the client
      may not be answering ARP requests.\n      Otherwise, the server MUST send the
      DHCPNAK message to the IP\n      address of the BOOTP relay agent, as recorded
      in 'giaddr'.  The\n      relay agent will, in turn, forward the message directly
      to the\n      client's hardware address, so that the DHCPNAK can be delivered
      even\n      if the client has moved to a new network.\n   3. The client receives
      the DHCPACK message with configuration\n      parameters.  The client performs
      a final check on the parameters\n      (as in section 3.1), and notes the duration
      of the lease specified\n      in the DHCPACK message.  The specific lease is
      implicitly identified\n      by the 'client identifier' or 'chaddr' and the
      network address.  At\n      this point, the client is configured.\n      If
      the client detects that the IP address in the DHCPACK message\n      is already
      in use, the client MUST send a DHCPDECLINE message to the\n      server and
      restarts the configuration process by requesting a\n      new network address.
      \ This action corresponds to the client\n      moving to the INIT state in the
      DHCP state diagram, which is\n      described in section 4.4.\n      If the
      client receives a DHCPNAK message, it cannot reuse its\n      remembered network
      address.  It must instead request a new\n      address by restarting the configuration
      process, this time\n      using the (non-abbreviated) procedure described in
      section\n      3.1.  This action also corresponds to the client moving to\n
      \     the INIT state in the DHCP state diagram.\n      The client times out
      and retransmits the DHCPREQUEST message if\n      the client receives neither
      a DHCPACK nor a DHCPNAK message.  The\n      client retransmits the DHCPREQUEST
      according to the retransmission\n      algorithm in section 4.1.  The client
      should choose to retransmit\n      the DHCPREQUEST enough times to give adequate
      probability of\n      contacting the server without causing the client (and
      the user of\n      that client) to wait overly long before giving up; e.g.,
      a client\n      retransmitting as described in section 4.1 might retransmit
      the\n      DHCPREQUEST message four times, for a total delay of 60 seconds,\n
      \     before restarting the initialization procedure.  If the client\n      receives
      neither a DHCPACK or a DHCPNAK message after employing\n      the retransmission
      algorithm, the client MAY choose to use the\n      previously allocated network
      address and configuration parameters\n      for the remainder of the unexpired
      lease.  This corresponds to\n      moving to BOUND state in the client state
      transition diagram shown\n      in figure 5.\n   4. The client may choose to
      relinquish its lease on a network\n      address by sending a DHCPRELEASE message
      to the server.  The\n      client identifies the lease to be released with its\n
      \     'client identifier', or 'chaddr' and network address in the\n      DHCPRELEASE
      message.\n      Note that in this case, where the client retains its network\n
      \     address locally, the client will not normally relinquish its\n      lease
      during a graceful shutdown.  Only in the case where the\n      client explicitly
      needs to relinquish its lease, e.g., the client\n      is about to be moved
      to a different subnet, will the client send\n      a DHCPRELEASE message.\n"
    title: 3.2 Client-server interaction - reusing a previously allocated network
  - contents:
    - "3.3 Interpretation and representation of time values\n   A client acquires
      a lease for a network address for a fixed period of\n   time (which may be infinite).
      \ Throughout the protocol, times are to\n   be represented in units of seconds.
      \ The time value of 0xffffffff is\n   reserved to represent \"infinity\".\n
      \  As clients and servers may not have synchronized clocks, times are\n   represented
      in DHCP messages as relative times, to be interpreted\n   with respect to the
      client's local clock.  Representing relative\n   times in units of seconds in
      an unsigned 32 bit word gives a range of\n   relative times from 0 to approximately
      100 years, which is sufficient\n   for the relative times to be measured using
      DHCP.\n   The algorithm for lease duration interpretation given in the previous\n
      \  paragraph assumes that client and server clocks are stable relative\n   to
      each other.  If there is drift between the two clocks, the server\n   may consider
      the lease expired before the client does.  To\n   compensate, the server may
      return a shorter lease duration to the\n   client than the server commits to
      its local database of client\n   information.\n"
    title: 3.3 Interpretation and representation of time values
  - contents:
    - "3.4 Obtaining parameters with externally configured network address\n   If
      a client has obtained a network address through some other means\n   (e.g.,
      manual configuration), it may use a DHCPINFORM request message\n   to obtain
      other local configuration parameters.  Servers receiving a\n   DHCPINFORM message
      construct a DHCPACK message with any local\n   configuration parameters appropriate
      for the client without:\n   allocating a new address, checking for an existing
      binding, filling\n   in 'yiaddr' or including lease time parameters.  The servers
      SHOULD\n   unicast the DHCPACK reply to the address given in the 'ciaddr' field\n
      \  of the DHCPINFORM message.\n   The server SHOULD check the network address
      in a DHCPINFORM message\n   for consistency, but MUST NOT check for an existing
      lease.  The\n   server forms a DHCPACK message containing the configuration\n
      \  parameters for the requesting client and sends the DHCPACK message\n   directly
      to the client.\n"
    title: 3.4 Obtaining parameters with externally configured network address
  - contents:
    - "3.5 Client parameters in DHCP\n   Not all clients require initialization of
      all parameters listed in\n   Appendix A.  Two techniques are used to reduce
      the number of\n   parameters transmitted from the server to the client.  First,
      most of\n   the parameters have defaults defined in the Host Requirements RFCs;\n
      \  if the client receives no parameters from the server that override\n   the
      defaults, a client uses those default values.  Second, in its\n   initial DHCPDISCOVER
      or DHCPREQUEST message, a client may provide the\n   server with a list of specific
      parameters the client is interested\n   in.  If the client includes a list of
      parameters in a DHCPDISCOVER\n   message, it MUST include that list in any subsequent
      DHCPREQUEST\n   messages.\n   The client SHOULD include the 'maximum DHCP message
      size' option to\n   let the server know how large the server may make its DHCP
      messages.\n   The parameters returned to a client may still exceed the space\n
      \  allocated to options in a DHCP message.  In this case, two additional\n   options
      flags (which must appear in the 'options' field of the\n   message) indicate
      that the 'file' and 'sname' fields are to be used\n   for options.\n   The client
      can inform the server which configuration parameters the\n   client is interested
      in by including the 'parameter request list'\n   option.  The data portion of
      this option explicitly lists the options\n   requested by tag number.\n   In
      addition, the client may suggest values for the network address\n   and lease
      time in the DHCPDISCOVER message.  The client may include\n   the 'requested
      IP address' option to suggest that a particular IP\n   address be assigned,
      and may include the 'IP address lease time'\n   option to suggest the lease
      time it would like.  Other options\n   representing \"hints\" at configuration
      parameters are allowed in a\n   DHCPDISCOVER or DHCPREQUEST message.  However,
      additional options may\n   be ignored by servers, and multiple servers may,
      therefore, not\n   return identical values for some options.  The 'requested
      IP address'\n   option is to be filled in only in a DHCPREQUEST message when
      the\n   client is verifying network parameters obtained previously. The\n   client
      fills in the 'ciaddr' field only when correctly configured\n   with an IP address
      in BOUND, RENEWING or REBINDING state.\n   If a server receives a DHCPREQUEST
      message with an invalid 'requested\n   IP address', the server SHOULD respond
      to the client with a DHCPNAK\n   message and may choose to report the problem
      to the system\n   administrator.  The server may include an error message in
      the\n   'message' option.\n"
    title: 3.5 Client parameters in DHCP
  - contents:
    - "3.6 Use of DHCP in clients with multiple interfaces\n   A client with multiple
      network interfaces must use DHCP through each\n   interface independently to
      obtain configuration information\n   parameters for those separate interfaces.\n"
    title: 3.6 Use of DHCP in clients with multiple interfaces
  - contents:
    - "3.7 When clients should use DHCP\n   A client SHOULD use DHCP to reacquire
      or verify its IP address and\n   network parameters whenever the local network
      parameters may have\n   changed; e.g., at system boot time or after a disconnection
      from the\n   local network, as the local network configuration may change without\n
      \  the client's or user's knowledge.\n   If a client has knowledge of a previous
      network address and is unable\n   to contact a local DHCP server, the client
      may continue to use the\n   previous network address until the lease for that
      address expires.\n   If the lease expires before the client can contact a DHCP
      server, the\n   client must immediately discontinue use of the previous network\n
      \  address and may inform local users of the problem.\n"
    title: 3.7 When clients should use DHCP
  title: 3. The Client-Server Protocol
- contents:
  - "4. Specification of the DHCP client-server protocol\n   In this section, we assume
    that a DHCP server has a block of network\n   addresses from which it can satisfy
    requests for new addresses.  Each\n   server also maintains a database of allocated
    addresses and leases in\n   local permanent storage.\n"
  - contents:
    - "4.1 Constructing and sending DHCP messages\n   DHCP clients and servers both
      construct DHCP messages by filling in\n   fields in the fixed format section
      of the message and appending\n   tagged data items in the variable length option
      area.  The options\n   area includes first a four-octet 'magic cookie' (which
      was described\n   in section 3), followed by the options.  The last option must
      always\n   be the 'end' option.\n   DHCP uses UDP as its transport protocol.
      \ DHCP messages from a client\n   to a server are sent to the 'DHCP server'
      port (67), and DHCP\n   messages from a server to a client are sent to the 'DHCP
      client' port\n   (68). A server with multiple network address (e.g., a multi-homed\n
      \  host) MAY use any of its network addresses in outgoing DHCP messages.\n   The
      'server identifier' field is used both to identify a DHCP server\n   in a DHCP
      message and as a destination address from clients to\n   servers.  A server
      with multiple network addresses MUST be prepared\n   to to accept any of its
      network addresses as identifying that server\n   in a DHCP message.  To accommodate
      potentially incomplete network\n   connectivity, a server MUST choose an address
      as a 'server\n   identifier' that, to the best of the server's knowledge, is
      reachable\n   from the client.  For example, if the DHCP server and the DHCP
      client\n   are connected to the same subnet (i.e., the 'giaddr' field in the\n
      \  message from the client is zero), the server SHOULD select the IP\n   address
      the server is using for communication on that subnet as the\n   'server identifier'.
      \ If the server is using multiple IP addresses on\n   that subnet, any such
      address may be used.  If the server has\n   received a message through a DHCP
      relay agent, the server SHOULD\n   choose an address from the interface on which
      the message was\n   recieved as the 'server identifier' (unless the server has
      other,\n   better information on which to make its choice).  DHCP clients MUST\n
      \  use the IP address provided in the 'server identifier' option for any\n   unicast
      requests to the DHCP server.\n   DHCP messages broadcast by a client prior to
      that client obtaining\n   its IP address must have the source address field
      in the IP header\n   set to 0.\n   If the 'giaddr' field in a DHCP message from
      a client is non-zero,\n   the server sends any return messages to the 'DHCP
      server' port on the\n   BOOTP relay agent whose address appears in 'giaddr'.
      If the 'giaddr'\n   field is zero and the 'ciaddr' field is nonzero, then the
      server\n   unicasts DHCPOFFER and DHCPACK messages to the address in 'ciaddr'.\n
      \  If 'giaddr' is zero and 'ciaddr' is zero, and the broadcast bit is\n   set,
      then the server broadcasts DHCPOFFER and DHCPACK messages to\n   0xffffffff.
      If the broadcast bit is not set and 'giaddr' is zero and\n   'ciaddr' is zero,
      then the server unicasts DHCPOFFER and DHCPACK\n   messages to the client's
      hardware address and 'yiaddr' address.  In\n   all cases, when 'giaddr' is zero,
      the server broadcasts any DHCPNAK\n   messages to 0xffffffff.\n   If the options
      in a DHCP message extend into the 'sname' and 'file'\n   fields, the 'option
      overload' option MUST appear in the 'options'\n   field, with value 1, 2 or
      3, as specified in RFC 1533.  If the\n   'option overload' option is present
      in the 'options' field, the\n   options in the 'options' field MUST be terminated
      by an 'end' option,\n   and MAY contain one or more 'pad' options to fill the
      options field.\n   The options in the 'sname' and 'file' fields (if in use as
      indicated\n   by the 'options overload' option) MUST begin with the first octet
      of\n   the field, MUST be terminated by an 'end' option, and MUST be\n   followed
      by 'pad' options to fill the remainder of the field.  Any\n   individual option
      in the 'options', 'sname' and 'file' fields MUST be\n   entirely contained in
      that field.  The options in the 'options' field\n   MUST be interpreted first,
      so that any 'option overload' options may\n   be interpreted.  The 'file' field
      MUST be interpreted next (if the\n   'option overload' option indicates that
      the 'file' field contains\n   DHCP options), followed by the 'sname' field.\n
      \  The values to be passed in an 'option' tag may be too long to fit in\n   the
      255 octets available to a single option (e.g., a list of routers\n   in a 'router'
      option [21]).  Options may appear only once, unless\n   otherwise specified
      in the options document.  The client concatenates\n   the values of multiple
      instances of the same option into a single\n   parameter list for configuration.\n
      \  DHCP clients are responsible for all message retransmission.  The\n   client
      MUST adopt a retransmission strategy that incorporates a\n   randomized exponential
      backoff algorithm to determine the delay\n   between retransmissions.  The delay
      between retransmissions SHOULD be\n   chosen to allow sufficient time for replies
      from the server to be\n   delivered based on the characteristics of the internetwork
      between\n   the client and the server.  For example, in a 10Mb/sec Ethernet\n
      \  internetwork, the delay before the first retransmission SHOULD be 4\n   seconds
      randomized by the value of a uniform random number chosen\n   from the range
      -1 to +1.  Clients with clocks that provide resolution\n   granularity of less
      than one second may choose a non-integer\n   randomization value.  The delay
      before the next retransmission SHOULD\n   be 8 seconds randomized by the value
      of a uniform number chosen from\n   the range -1 to +1.  The retransmission
      delay SHOULD be doubled with\n   subsequent retransmissions up to a maximum
      of 64 seconds.  The client\n   MAY provide an indication of retransmission attempts
      to the user as\n   an indication of the progress of the configuration process.\n
      \  The 'xid' field is used by the client to match incoming DHCP messages\n   with
      pending requests.  A DHCP client MUST choose 'xid's in such a\n   way as to
      minimize the chance of using an 'xid' identical to one used\n   by another client.
      For example, a client may choose a different,\n   random initial 'xid' each
      time the client is rebooted, and\n   subsequently use sequential 'xid's until
      the next reboot.  Selecting\n   a new 'xid' for each retransmission is an implementation
      decision.  A\n   client may choose to reuse the same 'xid' or select a new 'xid'
      for\n   each retransmitted message.\n   Normally, DHCP servers and BOOTP relay
      agents attempt to deliver\n   DHCPOFFER, DHCPACK and DHCPNAK messages directly
      to the client using\n   uicast delivery.  The IP destination address (in the
      IP header) is\n   set to the DHCP 'yiaddr' address and the link-layer destination\n
      \  address is set to the DHCP 'chaddr' address.  Unfortunately, some\n   client
      implementations are unable to receive such unicast IP\n   datagrams until the
      implementation has been configured with a valid\n   IP address (leading to a
      deadlock in which the client's IP address\n   cannot be delivered until the
      client has been configured with an IP\n   address).\n   A client that cannot
      receive unicast IP datagrams until its protocol\n   software has been configured
      with an IP address SHOULD set the\n   BROADCAST bit in the 'flags' field to
      1 in any DHCPDISCOVER or\n   DHCPREQUEST messages that client sends.  The BROADCAST
      bit will\n   provide a hint to the DHCP server and BOOTP relay agent to broadcast\n
      \  any messages to the client on the client's subnet.  A client that can\n   receive
      unicast IP datagrams before its protocol software has been\n   configured SHOULD
      clear the BROADCAST bit to 0.  The BOOTP\n   clarifications document discusses
      the ramifications of the use of the\n   BROADCAST bit [21].\n   A server or
      relay agent sending or relaying a DHCP message directly\n   to a DHCP client
      (i.e., not to a relay agent specified in the\n   'giaddr' field) SHOULD examine
      the BROADCAST bit in the 'flags'\n   field.  If this bit is set to 1, the DHCP
      message SHOULD be sent as\n   an IP broadcast using an IP broadcast address
      (preferably 0xffffffff)\n   as the IP destination address and the link-layer
      broadcast address as\n   the link-layer destination address.  If the BROADCAST
      bit is cleared\n   to 0, the message SHOULD be sent as an IP unicast to the
      IP address\n   specified in the 'yiaddr' field and the link-layer address specified\n
      \  in the 'chaddr' field.  If unicasting is not possible, the message\n   MAY
      be sent as an IP broadcast using an IP broadcast address\n   (preferably 0xffffffff)
      as the IP destination address and the link-\n   layer broadcast address as the
      link-layer destination address.\n"
    title: 4.1 Constructing and sending DHCP messages
  - contents:
    - "4.2 DHCP server administrative controls\n   DHCP servers are not required to
      respond to every DHCPDISCOVER and\n   DHCPREQUEST message they receive.  For
      example, a network\n   administrator, to retain stringent control over the clients
      attached\n   to the network, may choose to configure DHCP servers to respond
      only\n   to clients that have been previously registered through some external\n
      \  mechanism.  The DHCP specification describes only the interactions\n   between
      clients and servers when the clients and servers choose to\n   interact; it
      is beyond the scope of the DHCP specification to\n   describe all of the administrative
      controls that system\n   administrators might want to use.  Specific DHCP server\n
      \  implementations may incorporate any controls or policies desired by a\n   network
      administrator.\n   In some environments, a DHCP server will have to consider
      the values\n   of the vendor class options included in DHCPDISCOVER or DHCPREQUEST\n
      \  messages when determining the correct parameters for a particular\n   client.\n
      \  A DHCP server needs to use some unique identifier to associate a\n   client
      with its lease.  The client MAY choose to explicitly provide\n   the identifier
      through the 'client identifier' option.  If the client\n   supplies a 'client
      identifier', the client MUST use the same 'client\n   identifier' in all subsequent
      messages, and the server MUST use that\n   identifier to identify the client.
      \ If the client does not provide a\n   'client identifier' option, the server
      MUST use the contents of the\n   'chaddr' field to identify the client. It is
      crucial for a DHCP\n   client to use an identifier unique within the subnet
      to which the\n   client is attached in the 'client identifier' option.  Use
      of\n   'chaddr' as the client's unique identifier may cause unexpected\n   results,
      as that identifier may be associated with a hardware\n   interface that could
      be moved to a new client.  Some sites may choose\n   to use a manufacturer's
      serial number as the 'client identifier', to\n   avoid unexpected changes in
      a clients network address due to transfer\n   of hardware interfaces among computers.
      \ Sites may also choose to use\n   a DNS name as the 'client identifier', causing
      address leases to be\n   associated with the DNS name rather than a specific
      hardware box.\n   DHCP clients are free to use any strategy in selecting a DHCP
      server\n   among those from which the client receives a DHCPOFFER message.  The\n
      \  client implementation of DHCP SHOULD provide a mechanism for the user\n   to
      select directly the 'vendor class identifier' values.\n"
    title: 4.2 DHCP server administrative controls
  - contents:
    - "4.3 DHCP server behavior\n   A DHCP server processes incoming DHCP messages
      from a client based on\n   the current state of the binding for that client.
      \ A DHCP server can\n   receive the following messages from a client:\n      o
      DHCPDISCOVER\n      o DHCPREQUEST\n      o DHCPDECLINE\n      o DHCPRELEASE\n
      \     o DHCPINFORM\n   Table 3 gives the use of the fields and options in a
      DHCP message by\n   a server.  The remainder of this section describes the action
      of the\n   DHCP server for each possible incoming message.\n"
    - contents:
      - "4.3.1 DHCPDISCOVER message\n   When a server receives a DHCPDISCOVER message
        from a client, the\n   server chooses a network address for the requesting
        client.  If no\n   address is available, the server may choose to report the
        problem to\n   the system administrator. If an address is available, the new
        address\n   SHOULD be chosen as follows:\n      o The client's current address
        as recorded in the client's current\n        binding, ELSE\n      o The client's
        previous address as recorded in the client's (now\n        expired or released)
        binding, if that address is in the server's\n        pool of available addresses
        and not already allocated, ELSE\n      o The address requested in the 'Requested
        IP Address' option, if that\n        address is valid and not already allocated,
        ELSE\n      o A new address allocated from the server's pool of available\n
        \       addresses; the address is selected based on the subnet from which\n
        \       the message was received (if 'giaddr' is 0) or on the address of\n
        \       the relay agent that forwarded the message ('giaddr' when not 0).\n
        \  As described in section 4.2, a server MAY, for administrative\n   reasons,
        assign an address other than the one requested, or may\n   refuse to allocate
        an address to a particular client even though free\n   addresses are available.\n
        \  Note that, in some network architectures (e.g., internets with more\n   than
        one IP subnet assigned to a physical network segment), it may be\n   the case
        that the DHCP client should be assigned an address from a\n   different subnet
        than the address recorded in 'giaddr'.  Thus, DHCP\n   does not require that
        the client be assigned as address from the\n   subnet in 'giaddr'.  A server
        is free to choose some other subnet,\n   and it is beyond the scope of the
        DHCP specification to describe ways\n   in which the assigned IP address might
        be chosen.\n   While not required for correct operation of DHCP, the server
        SHOULD\n   NOT reuse the selected network address before the client responds
        to\n   the server's DHCPOFFER message.  The server may choose to record the\n
        \  address as offered to the client.\n   The server must also choose an expiration
        time for the lease, as\n   follows:\n   o IF the client has not requested
        a specific lease in the\n     DHCPDISCOVER message and the client already
        has an assigned network\n     address, the server returns the lease expiration
        time previously\n     assigned to that address (note that the client must
        explicitly\n     request a specific lease to extend the expiration time on
        a\n     previously assigned address), ELSE\n   o IF the client has not requested
        a specific lease in the\n     DHCPDISCOVER message and the client does not
        have an assigned\n     network address, the server assigns a locally configured
        default\n     lease time, ELSE\n   o IF the client has requested a specific
        lease in the DHCPDISCOVER\n     message (regardless of whether the client
        has an assigned network\n     address), the server may choose either to return
        the requested\n     lease (if the lease is acceptable to local policy) or
        select\n     another lease.\n"
      - 'Field      DHCPOFFER            DHCPACK             DHCPNAK

        '
      - '-----      ---------            -------             -------

        '
      - '''op''       BOOTREPLY            BOOTREPLY           BOOTREPLY

        '
      - '''htype''    (From "Assigned Numbers" RFC)

        '
      - '''hlen''     (Hardware address length in octets)

        '
      - '''hops''     0                    0                   0

        '
      - "'xid'      'xid' from client    'xid' from client   'xid' from client\n           DHCPDISCOVER
        \        DHCPREQUEST         DHCPREQUEST\n           message              message
        \            message\n"
      - '''secs''     0                    0                   0

        '
      - "'ciaddr'   0                    'ciaddr' from       0\n                                DHCPREQUEST
        or 0\n"
      - "'yiaddr'   IP address offered   IP address          0\n           to client
        \           assigned to client\n"
      - "'siaddr'   IP address of next   IP address of next  0\n           bootstrap
        server     bootstrap server\n"
      - "'flags'    'flags' from         'flags' from        'flags' from\n           client
        DHCPDISCOVER  client DHCPREQUEST  client DHCPREQUEST\n           message              message
        \            message\n"
      - "'giaddr'   'giaddr' from        'giaddr' from       'giaddr' from\n           client
        DHCPDISCOVER  client DHCPREQUEST  client DHCPREQUEST\n           message              message
        \            message\n"
      - "'chaddr'   'chaddr' from        'chaddr' from       'chaddr' from\n           client
        DHCPDISCOVER  client DHCPREQUEST  client DHCPREQUEST\n           message              message
        \            message\n"
      - "'sname'    Server host name     Server host name    (unused)\n           or
        options           or options\n"
      - "'file'     Client boot file     Client boot file    (unused)\n           name
        or options      name or options\n"
      - '''options''  options              options

        '
      - 'Option                    DHCPOFFER    DHCPACK            DHCPNAK

        '
      - '------                    ---------    -------            -------

        '
      - 'Requested IP address      MUST NOT     MUST NOT           MUST NOT

        '
      - "IP address lease time     MUST         MUST (DHCPREQUEST) MUST NOT\n                                       MUST
        NOT (DHCPINFORM)\n"
      - 'Use ''file''/''sname'' fields MAY          MAY                MUST NOT

        '
      - 'DHCP message type         DHCPOFFER    DHCPACK            DHCPNAK

        '
      - 'Parameter request list    MUST NOT     MUST NOT           MUST NOT

        '
      - 'Message                   SHOULD       SHOULD             SHOULD

        '
      - 'Client identifier         MUST NOT     MUST NOT           MAY

        '
      - 'Vendor class identifier   MAY          MAY                MAY

        '
      - 'Server identifier         MUST         MUST               MUST

        '
      - 'Maximum message size      MUST NOT     MUST NOT           MUST NOT

        '
      - "All others                MAY          MAY                MUST NOT\n           Table
        3:  Fields and options used by DHCP servers\n   Once the network address and
        lease have been determined, the server\n   constructs a DHCPOFFER message
        with the offered configuration\n   parameters.  It is important for all DHCP
        servers to return the same\n   parameters (with the possible exception of
        a newly allocated network\n   address) to ensure predictable client behavior
        regardless of which\n   server the client selects.  The configuration parameters
        MUST be\n   selected by applying the following rules in the order given below.\n
        \  The network administrator is responsible for configuring multiple\n   DHCP
        servers to ensure uniform responses from those servers.  The\n   server MUST
        return to the client:\n   o The client's network address, as determined by
        the rules given\n     earlier in this section,\n   o The expiration time for
        the client's lease, as determined by the\n     rules given earlier in this
        section,\n   o Parameters requested by the client, according to the following\n
        \    rules:\n        -- IF the server has been explicitly configured with
        a default\n           value for the parameter, the server MUST include that
        value\n           in an appropriate option in the 'option' field, ELSE\n        --
        IF the server recognizes the parameter as a parameter\n           defined
        in the Host Requirements Document, the server MUST\n           include the
        default value for that parameter as given in the\n           Host Requirements
        Document in an appropriate option in the\n           'option' field, ELSE\n
        \       -- The server MUST NOT return a value for that parameter,\n     The
        server MUST supply as many of the requested parameters as\n     possible and
        MUST omit any parameters it cannot provide.  The\n     server MUST include
        each requested parameter only once unless\n     explicitly allowed in the
        DHCP Options and BOOTP Vendor\n     Extensions document.\n   o Any parameters
        from the existing binding that differ from the Host\n     Requirements Document
        defaults,\n   o Any parameters specific to this client (as identified by\n
        \    the contents of 'chaddr' or 'client identifier' in the DHCPDISCOVER\n
        \    or DHCPREQUEST message), e.g., as configured by the network\n     administrator,\n
        \  o Any parameters specific to this client's class (as identified\n     by
        the contents of the 'vendor class identifier'\n     option in the DHCPDISCOVER
        or DHCPREQUEST message),\n     e.g., as configured by the network administrator;
        the parameters\n     MUST be identified by an exact match between the client's
        vendor\n     class identifiers and the client's classes identified in the\n
        \    server,\n   o Parameters with non-default values on the client's subnet.\n
        \  The server MAY choose to return the 'vendor class identifier' used to\n
        \  determine the parameters in the DHCPOFFER message to assist the\n   client
        in selecting which DHCPOFFER to accept.  The server inserts\n   the 'xid'
        field from the DHCPDISCOVER message into the 'xid' field of\n   the DHCPOFFER
        message and sends the DHCPOFFER message to the\n   requesting client.\n"
      title: 4.3.1 DHCPDISCOVER message
    - contents:
      - "4.3.2 DHCPREQUEST message\n   A DHCPREQUEST message may come from a client
        responding to a\n   DHCPOFFER message from a server, from a client verifying
        a previously\n   allocated IP address or from a client extending the lease
        on a\n   network address.  If the DHCPREQUEST message contains a 'server\n
        \  identifier' option, the message is in response to a DHCPOFFER\n   message.
        \ Otherwise, the message is a request to verify or extend an\n   existing
        lease.  If the client uses a 'client identifier' in a\n   DHCPREQUEST message,
        it MUST use that same 'client identifier' in all\n   subsequent messages.
        If the client included a list of requested\n   parameters in a DHCPDISCOVER
        message, it MUST include that list in\n   all subsequent messages.\n   Any
        configuration parameters in the DHCPACK message SHOULD NOT\n   conflict with
        those in the earlier DHCPOFFER message to which the\n   client is responding.
        \ The client SHOULD use the parameters in the\n   DHCPACK message for configuration.\n
        \  Clients send DHCPREQUEST messages as follows:\n   o DHCPREQUEST generated
        during SELECTING state:\n      Client inserts the address of the selected
        server in 'server\n      identifier', 'ciaddr' MUST be zero, 'requested IP
        address' MUST be\n      filled in with the yiaddr value from the chosen DHCPOFFER.\n
        \     Note that the client may choose to collect several DHCPOFFER\n      messages
        and select the \"best\" offer.  The client indicates its\n      selection
        by identifying the offering server in the DHCPREQUEST\n      message.  If
        the client receives no acceptable offers, the client\n      may choose to
        try another DHCPDISCOVER message.  Therefore, the\n      servers may not receive
        a specific DHCPREQUEST from which they can\n      decide whether or not the
        client has accepted the offer.  Because\n      the servers have not committed
        any network address assignments on\n      the basis of a DHCPOFFER, servers
        are free to reuse offered\n      network addresses in response to subsequent
        requests.  As an\n      implementation detail, servers SHOULD NOT reuse offered
        addresses\n      and may use an implementation-specific timeout mechanism
        to decide\n      when to reuse an offered address.\n   o DHCPREQUEST generated
        during INIT-REBOOT state:\n      'server identifier' MUST NOT be filled in,
        'requested IP address'\n      option MUST be filled in with client's notion
        of its previously\n      assigned address. 'ciaddr' MUST be zero. The client
        is seeking to\n      verify a previously allocated, cached configuration.
        Server SHOULD\n      send a DHCPNAK message to the client if the 'requested
        IP address'\n      is incorrect, or is on the wrong network.\n      Determining
        whether a client in the INIT-REBOOT state is on the\n      correct network
        is done by examining the contents of 'giaddr', the\n      'requested IP address'
        option, and a database lookup. If the DHCP\n      server detects that the
        client is on the wrong net (i.e., the\n      result of applying the local
        subnet mask or remote subnet mask (if\n      'giaddr' is not zero) to 'requested
        IP address' option value\n      doesn't match reality), then the server SHOULD
        send a DHCPNAK\n      message to the client.\n      If the network is correct,
        then the DHCP server should check if\n      the client's notion of its IP
        address is correct. If not, then the\n      server SHOULD send a DHCPNAK message
        to the client. If the DHCP\n      server has no record of this client, then
        it MUST remain silent,\n      and MAY output a warning to the network administrator.
        This\n      behavior is necessary for peaceful coexistence of non-\n      communicating
        DHCP servers on the same wire.\n      If 'giaddr' is 0x0 in the DHCPREQUEST
        message, the client is on\n      the same subnet as the server.  The server
        MUST broadcast the\n      DHCPNAK message to the 0xffffffff broadcast address
        because the\n      client may not have a correct network address or subnet
        mask, and\n      the client may not be answering ARP requests.\n      If 'giaddr'
        is set in the DHCPREQUEST message, the client is on a\n      different subnet.
        \ The server MUST set the broadcast bit in the\n      DHCPNAK, so that the
        relay agent will broadcast the DHCPNAK to the\n      client, because the client
        may not have a correct network address\n      or subnet mask, and the client
        may not be answering ARP requests.\n   o DHCPREQUEST generated during RENEWING
        state:\n      'server identifier' MUST NOT be filled in, 'requested IP address'\n
        \     option MUST NOT be filled in, 'ciaddr' MUST be filled in with\n      client's
        IP address. In this situation, the client is completely\n      configured,
        and is trying to extend its lease. This message will\n      be unicast, so
        no relay agents will be involved in its\n      transmission.  Because 'giaddr'
        is therefore not filled in, the\n      DHCP server will trust the value in
        'ciaddr', and use it when\n      replying to the client.\n      A client MAY
        choose to renew or extend its lease prior to T1.  The\n      server may choose
        not to extend the lease (as a policy decision by\n      the network administrator),
        but should return a DHCPACK message\n      regardless.\n   o DHCPREQUEST generated
        during REBINDING state:\n      'server identifier' MUST NOT be filled in,
        'requested IP address'\n      option MUST NOT be filled in, 'ciaddr' MUST
        be filled in with\n      client's IP address. In this situation, the client
        is completely\n      configured, and is trying to extend its lease. This message
        MUST\n      be broadcast to the 0xffffffff IP broadcast address.  The DHCP\n
        \     server SHOULD check 'ciaddr' for correctness before replying to\n      the
        DHCPREQUEST.\n      The DHCPREQUEST from a REBINDING client is intended to
        accommodate\n      sites that have multiple DHCP servers and a mechanism for\n
        \     maintaining consistency among leases managed by multiple servers.\n
        \     A DHCP server MAY extend a client's lease only if it has local\n      administrative
        authority to do so.\n"
      title: 4.3.2 DHCPREQUEST message
    - contents:
      - "4.3.3 DHCPDECLINE message\n   If the server receives a DHCPDECLINE message,
        the client has\n   discovered through some other means that the suggested
        network\n   address is already in use.  The server MUST mark the network address\n
        \  as not available and SHOULD notify the local system administrator of\n
        \  a possible configuration problem.\n"
      title: 4.3.3 DHCPDECLINE message
    - contents:
      - "4.3.4 DHCPRELEASE message\n   Upon receipt of a DHCPRELEASE message, the
        server marks the network\n   address as not allocated.  The server SHOULD
        retain a record of the\n   client's initialization parameters for possible
        reuse in response to\n   subsequent requests from the client.\n"
      title: 4.3.4 DHCPRELEASE message
    - contents:
      - "4.3.5 DHCPINFORM message\n   The server responds to a DHCPINFORM message
        by sending a DHCPACK\n   message directly to the address given in the 'ciaddr'
        field of the\n   DHCPINFORM message.  The server MUST NOT send a lease expiration
        time\n   to the client and SHOULD NOT fill in 'yiaddr'.  The server includes\n
        \  other parameters in the DHCPACK message as defined in section 4.3.1.\n"
      title: 4.3.5 DHCPINFORM message
    - contents:
      - "4.3.6 Client messages\n   Table 4 details the differences between messages
        from clients in\n   various states.\n   ---------------------------------------------------------------------\n
        \  |              |INIT-REBOOT  |SELECTING    |RENEWING     |REBINDING |\n
        \  ---------------------------------------------------------------------\n
        \  |broad/unicast |broadcast    |broadcast    |unicast      |broadcast |\n
        \  |server-ip     |MUST NOT     |MUST         |MUST NOT     |MUST NOT  |\n
        \  |requested-ip  |MUST         |MUST         |MUST NOT     |MUST NOT  |\n
        \  |ciaddr        |zero         |zero         |IP address   |IP address|\n
        \  ---------------------------------------------------------------------\n
        \             Table 4: Client messages from different states\n"
      title: 4.3.6 Client messages
    title: 4.3 DHCP server behavior
  - contents:
    - "4.4 DHCP client behavior\n   Figure 5 gives a state-transition diagram for
      a DHCP client.  A\n   client can receive the following messages from a server:\n
      \        o DHCPOFFER\n         o DHCPACK\n         o DHCPNAK\n   The DHCPINFORM
      message is not shown in figure 5.  A client simply\n   sends the DHCPINFORM
      and waits for DHCPACK messages.  Once the client\n   has selected its parameters,
      it has completed the configuration\n   process.\n   Table 5 gives the use of
      the fields and options in a DHCP message by\n   a client.  The remainder of
      this section describes the action of the\n   DHCP client for each possible incoming
      message.  The description in\n   the following section corresponds to the full
      configuration procedure\n   previously described in section 3.1, and the text
      in the subsequent\n   section corresponds to the abbreviated configuration procedure\n
      \  described in section 3.2.\n --------                               -------\n"
    - '|        | +-------------------------->|       |<-------------------+

      '
    - '| INIT-  | |     +-------------------->| INIT  |                    |

      '
    - '| REBOOT |DHCPNAK/         +---------->|       |<---+               |

      '
    - "|        |Restart|         |            -------     |               |\n --------
      \ |  DHCPNAK/     |               |                        |\n    |      Discard
      offer   |      -/Send DHCPDISCOVER               |\n"
    - "-/Send DHCPREQUEST         |               |                        |\n    |
      \     |     |      DHCPACK            v        |               |\n -----------
      \    |   (not accept.)/   -----------   |               |\n"
    - '|           |    |  Send DHCPDECLINE |           |                  |

      '
    - '| REBOOTING |    |         |         | SELECTING |<----+            |

      '
    - "|           |    |        /          |           |     |DHCPOFFER/  |\n -----------
      \    |       /            -----------   |  |Collect     |\n    |            |
      \     /                  |   |       |  replies   |\n"
    - 'DHCPACK/         |     /  +----------------+   +-------+            |

      '
    - 'Record lease, set|    |   v   Select offer/                         |

      '
    - "timers T1, T2   ------------  send DHCPREQUEST      |               |\n    |
      \  +----->|            |             DHCPNAK, Lease expired/   |\n    |   |
      \     | REQUESTING |                  Halt network         |\n    DHCPOFFER/
      |            |                       |               |\n    Discard     ------------
      \                       |               |\n    |   |        |        |                   -----------
      \          |\n    |   +--------+     DHCPACK/              |           |          |\n
      \   |              Record lease, set    -----| REBINDING |          |\n    |
      \               timers T1, T2     /     |           |          |\n    |                     |
      \       DHCPACK/   -----------           |\n    |                     v     Record
      lease, set   ^               |\n    +----------------> -------      /timers
      T1,T2   |               |\n               +----->|       |<---+                |
      \              |\n               |      | BOUND |<---+                |               |\n
      \ DHCPOFFER, DHCPACK, |       |    |            T2 expires/   DHCPNAK/\n   DHCPNAK/Discard
      \    -------     |             Broadcast  Halt network\n               |       |
      |         |            DHCPREQUEST         |\n               +-------+ |        DHCPACK/
      \         |               |\n                    T1 expires/   Record lease,
      set |               |\n                 Send DHCPREQUEST timers T1, T2     |
      \              |\n                 to leasing server |                |               |\n
      \                        |   ----------             |               |\n                         |
      \ |          |------------+               |\n                         +->| RENEWING
      |                            |\n                            |          |----------------------------+\n
      \                            ----------\n          Figure 5:  State-transition
      diagram for DHCP clients\n"
    - contents:
      - "4.4.1 Initialization and allocation of network address\n   The client begins
        in INIT state and forms a DHCPDISCOVER message.\n   The client SHOULD wait
        a random time between one and ten seconds to\n   desynchronize the use of
        DHCP at startup.  The client sets 'ciaddr'\n   to 0x00000000.  The client
        MAY request specific parameters by\n   including the 'parameter request list'
        option.  The client MAY\n   suggest a network address and/or lease time by
        including the\n   'requested IP address' and 'IP address lease time' options.
        \ The\n   client MUST include its hardware address in the 'chaddr' field,
        if\n   necessary for delivery of DHCP reply messages.  The client MAY\n   include
        a different unique identifier in the 'client identifier'\n   option, as discussed
        in section 4.2.  If the client included a list\n   of requested parameters
        in a DHCPDISCOVER message, it MUST include\n   that list in all subsequent
        messages.\n   The client generates and records a random transaction identifier
        and\n   inserts that identifier into the 'xid' field.  The client records
        its\n   own local time for later use in computing the lease expiration.  The\n
        \  client then broadcasts the DHCPDISCOVER on the local hardware\n   broadcast
        address to the 0xffffffff IP broadcast address and 'DHCP\n   server' UDP port.\n
        \  If the 'xid' of an arriving DHCPOFFER message does not match the\n   'xid'
        of the most recent DHCPDISCOVER message, the DHCPOFFER message\n   must be
        silently discarded.  Any arriving DHCPACK messages must be\n   silently discarded.\n
        \  The client collects DHCPOFFER messages over a period of time, selects\n
        \  one DHCPOFFER message from the (possibly many) incoming DHCPOFFER\n   messages
        (e.g., the first DHCPOFFER message or the DHCPOFFER message\n   from the previously
        used server) and extracts the server address from\n   the 'server identifier'
        option in the DHCPOFFER message.  The time\n   over which the client collects
        messages and the mechanism used to\n   select one DHCPOFFER are implementation
        dependent.\n"
      - "Field      DHCPDISCOVER          DHCPREQUEST           DHCPDECLINE,\n           DHCPINFORM
        \                                 DHCPRELEASE\n"
      - '-----      ------------          -----------           -----------

        '
      - '''op''       BOOTREQUEST           BOOTREQUEST           BOOTREQUEST

        '
      - '''htype''    (From "Assigned Numbers" RFC)

        '
      - '''hlen''     (Hardware address length in octets)

        '
      - '''hops''     0                     0                     0

        '
      - "'xid'      selected by client    'xid' from server     selected by\n                                 DHCPOFFER
        message     client\n"
      - "'secs'     0 or seconds since    0 or seconds since    0\n           DHCP
        process started  DHCP process started\n"
      - "'flags'    Set 'BROADCAST'       Set 'BROADCAST'       0\n           flag
        if client        flag if client\n           requires broadcast    requires
        broadcast\n           reply                 reply\n"
      - "'ciaddr'   0 (DHCPDISCOVER)      0 or client's         0 (DHCPDECLINE)\n
        \          client's              network address       client's network\n
        \          network address       (BOUND/RENEW/REBIND)  address\n           (DHCPINFORM)
        \                               (DHCPRELEASE)\n"
      - '''yiaddr''   0                     0                     0

        '
      - '''siaddr''   0                     0                     0

        '
      - '''giaddr''   0                     0                     0

        '
      - "'chaddr'   client's hardware     client's hardware     client's hardware\n
        \          address               address               address\n"
      - "'sname'    options, if           options, if           (unused)\n           indicated
        in          indicated in\n           'sname/file'          'sname/file'\n
        \          option; otherwise     option; otherwise\n           unused                unused\n"
      - "'file'     options, if           options, if           (unused)\n           indicated
        in          indicated in\n           'sname/file'          'sname/file'\n
        \          option; otherwise     option; otherwise\n           unused                unused\n"
      - '''options''  options               options               (unused)

        '
      - "Option                     DHCPDISCOVER  DHCPREQUEST      DHCPDECLINE,\n
        \                          DHCPINFORM                     DHCPRELEASE\n"
      - '------                     ------------  -----------      -----------

        '
      - "Requested IP address       MAY           MUST (in         MUST\n                           (DISCOVER)
        \   SELECTING or     (DHCPDECLINE),\n                           MUST NOT      INIT-REBOOT)
        \    MUST NOT\n                           (INFORM)      MUST NOT (in     (DHCPRELEASE)\n
        \                                        BOUND or\n                                         RENEWING)\n"
      - "IP address lease time      MAY           MAY              MUST NOT\n                           (DISCOVER)\n
        \                          MUST NOT\n                           (INFORM)\n"
      - 'Use ''file''/''sname'' fields  MAY           MAY              MAY

        '
      - "DHCP message type          DHCPDISCOVER/ DHCPREQUEST      DHCPDECLINE/\n
        \                          DHCPINFORM                     DHCPRELEASE\n"
      - 'Client identifier          MAY           MAY              MAY

        '
      - 'Vendor class identifier    MAY           MAY              MUST NOT

        '
      - "Server identifier          MUST NOT      MUST (after      MUST\n                                         SELECTING)\n
        \                                        MUST NOT (after\n                                         INIT-REBOOT,\n
        \                                        BOUND, RENEWING\n                                         or
        REBINDING)\n"
      - 'Parameter request list     MAY           MAY              MUST NOT

        '
      - 'Maximum message size       MAY           MAY              MUST NOT

        '
      - 'Message                    SHOULD NOT    SHOULD NOT       SHOULD

        '
      - 'Site-specific              MAY           MAY              MUST NOT

        '
      - "All others                 MAY           MAY              MUST NOT\n             Table
        5:  Fields and options used by DHCP clients\n   If the parameters are acceptable,
        the client records the address of\n   the server that supplied the parameters
        from the 'server identifier'\n   field and sends that address in the 'server
        identifier' field of a\n   DHCPREQUEST broadcast message.  Once the DHCPACK
        message from the\n   server arrives, the client is initialized and moves to
        BOUND state.\n   The DHCPREQUEST message contains the same 'xid' as the DHCPOFFER\n
        \  message.  The client records the lease expiration time as the sum of\n
        \  the time at which the original request was sent and the duration of\n   the
        lease from the DHCPACK message.    The client SHOULD perform a\n   check on
        the suggested address to ensure that the address is not\n   already in use.
        \ For example, if the client is on a network that\n   supports ARP, the client
        may issue an ARP request for the suggested\n   request.  When broadcasting
        an ARP request for the suggested address,\n   the client must fill in its
        own hardware address as the sender's\n   hardware address, and 0 as the sender's
        IP address, to avoid\n   confusing ARP caches in other hosts on the same subnet.
        \ If the\n   network address appears to be in use, the client MUST send a\n
        \  DHCPDECLINE message to the server. The client SHOULD broadcast an ARP\n
        \  reply to announce the client's new IP address and clear any outdated\n
        \  ARP cache entries in hosts on the client's subnet.\n"
      title: 4.4.1 Initialization and allocation of network address
    - contents:
      - "4.4.2 Initialization with known network address\n   The client begins in
        INIT-REBOOT state and sends a DHCPREQUEST\n   message.  The client MUST insert
        its known network address as a\n   'requested IP address' option in the DHCPREQUEST
        message.  The client\n   may request specific configuration parameters by
        including the\n   'parameter request list' option.  The client generates and
        records a\n   random transaction identifier and inserts that identifier into
        the\n   'xid' field.  The client records its own local time for later use
        in\n   computing the lease expiration.  The client MUST NOT include a\n   'server
        identifier' in the DHCPREQUEST message.  The client then\n   broadcasts the
        DHCPREQUEST on the local hardware broadcast address to\n   the 'DHCP server'
        UDP port.\n   Once a DHCPACK message with an 'xid' field matching that in
        the\n   client's DHCPREQUEST message arrives from any server, the client is\n
        \  initialized and moves to BOUND state.  The client records the lease\n   expiration
        time as the sum of the time at which the DHCPREQUEST\n   message was sent
        and the duration of the lease from the DHCPACK\n   message.\n"
      title: 4.4.2 Initialization with known network address
    - contents:
      - "4.4.3 Initialization with an externally assigned network address\n   The
        client sends a DHCPINFORM message. The client may request\n   specific configuration
        parameters by including the 'parameter request\n   list' option. The client
        generates and records a random transaction\n   identifier and inserts that
        identifier into the 'xid' field. The\n   client places its own network address
        in the 'ciaddr' field. The\n   client SHOULD NOT request lease time parameters.\n
        \  The client then unicasts the DHCPINFORM to the DHCP server if it\n   knows
        the server's address, otherwise it broadcasts the message to\n   the limited
        (all 1s) broadcast address.  DHCPINFORM messages MUST be\n   directed to the
        'DHCP server' UDP port.\n   Once a DHCPACK message with an 'xid' field matching
        that in the\n   client's DHCPINFORM message arrives from any server, the client
        is\n   initialized.\n   If the client does not receive a DHCPACK within a
        reasonable period\n   of time (60 seconds or 4 tries if using timeout suggested
        in section\n   4.1), then it SHOULD display a message informing the user of
        the\n   problem, and then SHOULD begin network processing using suitable\n
        \  defaults as per Appendix A.\n"
      title: 4.4.3 Initialization with an externally assigned network address
    - contents:
      - "4.4.4 Use of broadcast and unicast\n   The DHCP client broadcasts DHCPDISCOVER,
        DHCPREQUEST and DHCPINFORM\n   messages, unless the client knows the address
        of a DHCP server.  The\n   client unicasts DHCPRELEASE messages to the server.
        \ Because the\n   client is declining the use of the IP address supplied by
        the server,\n   the client broadcasts DHCPDECLINE messages.\n   When the DHCP
        client knows the address of a DHCP server, in either\n   INIT or REBOOTING
        state, the client may use that address in the\n   DHCPDISCOVER or DHCPREQUEST
        rather than the IP broadcast address.\n   The client may also use unicast
        to send DHCPINFORM messages to a\n   known DHCP server.  If the client receives
        no response to DHCP\n   messages sent to the IP address of a known DHCP server,
        the DHCP\n   client reverts to using the IP broadcast address.\n"
      title: 4.4.4 Use of broadcast and unicast
    - contents:
      - "4.4.5 Reacquisition and expiration\n   The client maintains two times, T1
        and T2, that specify the times at\n   which the client tries to extend its
        lease on its network address.\n   T1 is the time at which the client enters
        the RENEWING state and\n   attempts to contact the server that originally
        issued the client's\n   network address.  T2 is the time at which the client
        enters the\n   REBINDING state and attempts to contact any server. T1 MUST
        be\n   earlier than T2, which, in turn, MUST be earlier than the time at\n
        \  which the client's lease will expire.\n   To avoid the need for synchronized
        clocks, T1 and T2 are expressed in\n   options as relative times [2].\n   At
        time T1 the client moves to RENEWING state and sends (via unicast)\n   a DHCPREQUEST
        message to the server to extend its lease.  The client\n   sets the 'ciaddr'
        field in the DHCPREQUEST to its current network\n   address. The client records
        the local time at which the DHCPREQUEST\n   message is sent for computation
        of the lease expiration time.  The\n   client MUST NOT include a 'server identifier'
        in the DHCPREQUEST\n   message.\n   Any DHCPACK messages that arrive with
        an 'xid' that does not match\n   the 'xid' of the client's DHCPREQUEST message
        are silently discarded.\n   When the client receives a DHCPACK from the server,
        the client\n   computes the lease expiration time as the sum of the time at
        which\n   the client sent the DHCPREQUEST message and the duration of the
        lease\n   in the DHCPACK message.  The client has successfully reacquired
        its\n   network address, returns to BOUND state and may continue network\n
        \  processing.\n   If no DHCPACK arrives before time T2, the client moves
        to REBINDING\n   state and sends (via broadcast) a DHCPREQUEST message to
        extend its\n   lease.  The client sets the 'ciaddr' field in the DHCPREQUEST
        to its\n   current network address.  The client MUST NOT include a 'server\n
        \  identifier' in the DHCPREQUEST message.\n   Times T1 and T2 are configurable
        by the server through options.  T1\n   defaults to (0.5 * duration_of_lease).
        \ T2 defaults to (0.875 *\n   duration_of_lease).  Times T1 and T2 SHOULD
        be chosen with some\n   random \"fuzz\" around a fixed value, to avoid synchronization
        of\n   client reacquisition.\n   A client MAY choose to renew or extend its
        lease prior to T1.  The\n   server MAY choose to extend the client's lease
        according to policy\n   set by the network administrator.  The server SHOULD
        return T1 and\n   T2, and their values SHOULD be adjusted from their original
        values to\n   take account of the time remaining on the lease.\n   In both
        RENEWING and REBINDING states, if the client receives no\n   response to its
        DHCPREQUEST message, the client SHOULD wait one-half\n   of the remaining
        time until T2 (in RENEWING state) and one-half of\n   the remaining lease
        time (in REBINDING state), down to a minimum of\n   60 seconds, before retransmitting
        the DHCPREQUEST message.\n   If the lease expires before the client receives
        a DHCPACK, the client\n   moves to INIT state, MUST immediately stop any other
        network\n   processing and requests network initialization parameters as if
        the\n   client were uninitialized.  If the client then receives a DHCPACK\n
        \  allocating that client its previous network address, the client\n   SHOULD
        continue network processing.  If the client is given a new\n   network address,
        it MUST NOT continue using the previous network\n   address and SHOULD notify
        the local users of the problem.\n"
      title: 4.4.5 Reacquisition and expiration
    - contents:
      - "4.4.6 DHCPRELEASE\n   If the client no longer requires use of its assigned
        network address\n   (e.g., the client is gracefully shut down), the client
        sends a\n   DHCPRELEASE message to the server.  Note that the correct operation\n
        \  of DHCP does not depend on the transmission of DHCPRELEASE messages.\n"
      title: 4.4.6 DHCPRELEASE
    title: 4.4 DHCP client behavior
  title: 4. Specification of the DHCP client-server protocol
- contents:
  - "5. Acknowledgments\n   The author thanks the many (and too numerous to mention!)
    members of\n   the DHC WG for their tireless and ongoing efforts in the development\n
    \  of DHCP and this document.\n   The efforts of J Allard, Mike Carney, Dave Lapp,
    Fred Lien and John\n   Mendonca in organizing DHCP interoperability testing sessions
    are\n   gratefully acknowledged.\n   The development of this document was supported
    in part by grants from\n   the Corporation for National Research Initiatives (CNRI),
    Bucknell\n   University and Sun Microsystems.\n"
  title: 5. Acknowledgments
- contents:
  - "6. References\n   [1] Acetta, M., \"Resource Location Protocol\", RFC 887, CMU,
    December\n       1983.\n   [2] Alexander, S., and R. Droms, \"DHCP Options and
    BOOTP Vendor\n       Extensions\", RFC 1533, Lachman Technology, Inc., Bucknell\n
    \      University, October 1993.\n   [3] Braden, R., Editor, \"Requirements for
    Internet Hosts --\n       Communication Layers\", STD 3, RFC 1122, USC/Information
    Sciences\n       Institute, October 1989.\n   [4] Braden, R., Editor, \"Requirements
    for Internet Hosts --\n       Application and Support, STD 3, RFC 1123, USC/Information\n
    \      Sciences Institute, October 1989.\n   [5] Brownell, D, \"Dynamic Reverse
    Address Resolution Protocol\n       (DRARP)\", Work in Progress.\n   [6] Comer,
    D., and R. Droms, \"Uniform Access to Internet Directory\n       Services\", Proc.
    of ACM SIGCOMM '90 (Special issue of Computer\n       Communications Review),
    20(4):50--59, 1990.\n   [7] Croft, B., and J. Gilmore, \"Bootstrap Protocol (BOOTP)\",
    RFC 951,\n       Stanford and SUN Microsystems, September 1985.\n   [8] Deering,
    S., \"ICMP Router Discovery Messages\", RFC 1256, Xerox\n       PARC, September
    1991.\n   [9] Droms, D., \"Interoperation between DHCP and BOOTP\", RFC 1534,\n
    \      Bucknell University, October 1993.\n   [10] Finlayson, R., Mann, T., Mogul,
    J., and M. Theimer, \"A Reverse\n        Address Resolution Protocol\", RFC 903,
    Stanford, June 1984.\n   [11] Gray C., and D. Cheriton, \"Leases: An Efficient
    Fault-Tolerant\n        Mechanism for Distributed File Cache Consistency\", In
    Proc. of\n        the Twelfth ACM Symposium on Operating Systems Design, 1989.\n
    \  [12] Mockapetris, P., \"Domain Names -- Concepts and Facilities\", STD\n        13,
    RFC 1034, USC/Information Sciences Institute, November 1987.\n   [13] Mockapetris,
    P., \"Domain Names -- Implementation and\n        Specification\", STD 13, RFC
    1035, USC/Information Sciences\n        Institute, November 1987.\n   [14] Mogul
    J., and S. Deering, \"Path MTU Discovery\", RFC 1191,\n        November 1990.\n
    \  [15] Morgan, R., \"Dynamic IP Address Assignment for Ethernet Attached\n        Hosts\",
    Work in Progress.\n   [16] Postel, J., \"Internet Control Message Protocol\",
    STD 5, RFC 792,\n        USC/Information Sciences Institute, September 1981.\n
    \  [17] Reynolds, J., \"BOOTP Vendor Information Extensions\", RFC 1497,\n        USC/Information
    Sciences Institute, August 1993.\n   [18] Reynolds, J., and J. Postel, \"Assigned
    Numbers\", STD 2, RFC 1700,\n        USC/Information Sciences Institute, October
    1994.\n   [19] Jeffrey Schiller and Mark Rosenstein. A Protocol for the Dynamic\n
    \       Assignment of IP Addresses for use on an Ethernet. (Available\n        from
    the Athena Project, MIT), 1989.\n   [20] Sollins, K., \"The TFTP Protocol (Revision
    2)\",  RFC 783, NIC,\n        June 1981.\n   [21] Wimer, W., \"Clarifications
    and Extensions for the Bootstrap\n        Protocol\", RFC 1542, Carnegie Mellon
    University, October 1993.\n"
  title: 6. References
- contents:
  - "7. Security Considerations\n   DHCP is built directly on UDP and IP which are
    as yet inherently\n   insecure.  Furthermore, DHCP is generally intended to make\n
    \  maintenance of remote and/or diskless hosts easier.  While perhaps\n   not
    impossible, configuring such hosts with passwords or keys may be\n   difficult
    and inconvenient.  Therefore, DHCP in its current form is\n   quite insecure.\n
    \  Unauthorized DHCP servers may be easily set up.  Such servers can\n   then
    send false and potentially disruptive information to clients\n   such as incorrect
    or duplicate IP addresses, incorrect routing\n   information (including spoof
    routers, etc.), incorrect domain\n   nameserver addresses (such as spoof nameservers),
    and so on.\n   Clearly, once this seed information is in place, an attacker can\n
    \  further compromise affected systems.\n   Malicious DHCP clients could masquerade
    as legitimate clients and\n   retrieve information intended for those legitimate
    clients.  Where\n   dynamic allocation of resources is used, a malicious client
    could\n   claim all resources for itself, thereby denying resources to\n   legitimate
    clients.\n"
  title: 7. Security Considerations
- contents:
  - "8. Author's Address\n      Ralph Droms\n      Computer Science Department\n      323
    Dana Engineering\n      Bucknell University\n      Lewisburg, PA 17837\n      Phone:
    (717) 524-1145\n      EMail: droms@bucknell.edu\n"
  title: 8. Author's Address
- contents:
  - "A. Host Configuration Parameters\n   IP-layer_parameters,_per_host:_\n   Be a
    router                     on/off                 HRC 3.1\n   Non-local source
    routing        on/off                 HRC 3.3.5\n   Policy filters for\n   non-local
    source routing        (list)                 HRC 3.3.5\n   Maximum reassembly
    size         integer                HRC 3.3.2\n   Default TTL                     integer
    \               HRC 3.2.1.7\n   PMTU aging timeout              integer                MTU
    6.6\n   MTU plateau table               (list)                 MTU 7\n   IP-layer_parameters,_per_interface:_\n
    \  IP address                      (address)              HRC 3.3.1.6\n   Subnet
    mask                     (address mask)         HRC 3.3.1.6\n   MTU                             integer
    \               HRC 3.3.3\n   All-subnets-MTU                 on/off                 HRC
    3.3.3\n   Broadcast address flavor        0x00000000/0xffffffff  HRC 3.3.6\n   Perform
    mask discovery          on/off                 HRC 3.2.2.9\n   Be a mask supplier
    \             on/off                 HRC 3.2.2.9\n   Perform router discovery
    \       on/off                 RD 5.1\n   Router solicitation address     (address)
    \             RD 5.1\n   Default routers, list of:\n           router address
    \         (address)              HRC 3.3.1.6\n           preference level        integer
    \               HRC 3.3.1.6\n   Static routes, list of:\n           destination
    \            (host/subnet/net)      HRC 3.3.1.2\n           destination mask        (address
    mask)         HRC 3.3.1.2\n           type-of-service         integer                HRC
    3.3.1.2\n           first-hop router        (address)              HRC 3.3.1.2\n
    \          ignore redirects        on/off                 HRC 3.3.1.2\n           PMTU
    \                   integer                MTU 6.6\n           perform PMTU discovery
    \ on/off                 MTU 6.6\n   Link-layer_parameters,_per_interface:_\n
    \  Trailers                       on/off                 HRC 2.3.1\n   ARP cache
    timeout              integer                HRC 2.3.2.1\n   Ethernet encapsulation
    \        (RFC 894/RFC 1042)     HRC 2.3.3\n   TCP_parameters,_per_host:_\n   TTL
    \                           integer                HRC 4.2.2.19\n   Keep-alive
    interval            integer                HRC 4.2.3.6\n   Keep-alive data size
    \          0/1                    HRC 4.2.3.6\n"
  title: A. Host Configuration Parameters
- contents:
  - "Key:\n   MTU = Path MTU Discovery (RFC 1191, Proposed Standard)\n   RD = Router
    Discovery (RFC 1256, Proposed Standard)\n"
  title: 'Key:'
