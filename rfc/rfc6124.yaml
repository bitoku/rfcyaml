- title: __initial_text__
  contents:
  - "                 An EAP Authentication Method Based on\n               the Encrypted\
    \ Key Exchange (EKE) Protocol\n"
- title: Abstract
  contents:
  - "Abstract\n   The Extensible Authentication Protocol (EAP) describes a framework\n\
    \   that allows the use of multiple authentication mechanisms.  This\n   document\
    \ defines an authentication mechanism for EAP called EAP-EKE,\n   based on the\
    \ Encrypted Key Exchange (EKE) protocol.  This method\n   provides mutual authentication\
    \ through the use of a short, easy to\n   remember password.  Compared with other\
    \ common authentication\n   methods, EAP-EKE is not susceptible to dictionary\
    \ attacks.  Neither\n   does it require the availability of public-key certificates.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6124.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Protocol . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     3.1.  Message Flows  . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   4.  Message Formats  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  7\n     4.1.  EAP-EKE Header . . . . . . . . . . . . . . . . . . . . .\
    \ .  7\n     4.2.  EAP-EKE Payloads . . . . . . . . . . . . . . . . . . . . .\
    \  8\n       4.2.1.  The EAP-EKE-ID Payload . . . . . . . . . . . . . . . .  8\n\
    \       4.2.2.  The EAP-EKE-Commit Payload . . . . . . . . . . . . . . 10\n  \
    \     4.2.3.  The EAP-EKE-Confirm Payload  . . . . . . . . . . . . . 11\n    \
    \   4.2.4.  The EAP-EKE-Failure Payload  . . . . . . . . . . . . . 12\n     4.3.\
    \  Protected Fields . . . . . . . . . . . . . . . . . . . . . 13\n     4.4.  Encrypted\
    \ Fields . . . . . . . . . . . . . . . . . . . . . 14\n     4.5.  Channel Binding\
    \ Values . . . . . . . . . . . . . . . . . . 14\n   5.  Protocol Sequence  . .\
    \ . . . . . . . . . . . . . . . . . . . . 15\n     5.1.  EAP-EKE-Commit/Request\
    \ . . . . . . . . . . . . . . . . . . 15\n     5.2.  EAP-EKE-Commit/Response \
    \ . . . . . . . . . . . . . . . . . 17\n     5.3.  EAP-EKE-Confirm/Request  .\
    \ . . . . . . . . . . . . . . . . 18\n     5.4.  EAP-EKE-Confirm/Response . .\
    \ . . . . . . . . . . . . . . . 18\n     5.5.  MSK and EMSK . . . . . . . . .\
    \ . . . . . . . . . . . . . . 19\n   6.  Cryptographic Details  . . . . . . .\
    \ . . . . . . . . . . . . . 19\n     6.1.  Generating Keying Material . . . .\
    \ . . . . . . . . . . . . 19\n     6.2.  Diffie-Hellman Groups  . . . . . . .\
    \ . . . . . . . . . . . 20\n     6.3.  Mandatory Algorithms . . . . . . . . .\
    \ . . . . . . . . . . 20\n   7.  IANA Considerations  . . . . . . . . . . . .\
    \ . . . . . . . . . 21\n   8.  Security Considerations  . . . . . . . . . . .\
    \ . . . . . . . . 24\n     8.1.  Cryptographic Analysis . . . . . . . . . . .\
    \ . . . . . . . 27\n     8.2.  Diffie-Hellman Group Considerations  . . . . .\
    \ . . . . . . 28\n     8.3.  Resistance to Active Attacks . . . . . . . . . .\
    \ . . . . . 28\n     8.4.  Identity Protection, Anonymity, and Pseudonymity .\
    \ . . . . 28\n     8.5.  Password Processing and Long-Term Storage  . . . . .\
    \ . . . 29\n   9.  Acknowledgements . . . . . . . . . . . . . . . . . . . . .\
    \ . . 29\n   10. References . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 29\n     10.1. Normative References . . . . . . . . . . . . . . . . . . .\
    \ 29\n     10.2. Informative References . . . . . . . . . . . . . . . . . . 31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The predominant access method for the Internet today is\
    \ that of a\n   human using a username and password to authenticate to a computer\n\
    \   enforcing access control.  Proof of knowledge of the password\n   authenticates\
    \ the human to the computer.\n   Typically, these passwords are not stored on\
    \ a user's computer for\n   security reasons and must be entered each time the\
    \ human desires\n   network access.  Therefore, the passwords must be ones that\
    \ can be\n   repeatedly entered by a human with a low probability of error.  They\n\
    \   will likely not possess high entropy and it may be assumed that an\n   adversary\
    \ with access to a dictionary will have the ability to guess\n   a user's password.\
    \  It is therefore desirable to have a robust\n   authentication method that is\
    \ secure even when used with a weak\n   password in the presence of a strong adversary.\n\
    \   EAP-EKE is an EAP method [RFC3748] that addresses the problem of\n   password-based\
    \ authenticated key exchange, using a possibly weak\n   password for authentication\
    \ and to derive an authenticated and\n   cryptographically strong shared secret.\
    \  This problem was first\n   described by Bellovin and Merritt in [BM92] and\
    \ [BM93].\n   Subsequently, a number of other solution approaches have been\n\
    \   proposed, for example [JAB96], [LUC97], [BMP00], and others.\n   This proposal\
    \ is based on the original Encrypted Key Exchange (EKE)\n   proposal, as described\
    \ in [BM92].  Some of the variants of the\n   original EKE have been attacked,\
    \ see e.g., [PA97], and improvements\n   have been proposed.  None of these subsequent\
    \ improvements have been\n   incorporated into the current protocol.  However,\
    \ we have used only\n   the subset of [BM92] (namely the variant described in\
    \ Section 3.1 of\n   that paper) that has withstood the test of time and is believed\n\
    \   secure as of this writing.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document uses Encr(Ke, ...) to denote encrypted information,\
    \ and\n   Prot(Ke, Ki, ...) to denote encrypted and integrity protected\n   information.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  Protocol
  contents:
  - "3.  Protocol\n   EAP is a two-party protocol spoken between an EAP peer and an\
    \ EAP\n   server (also known as \"authenticator\").  An EAP method defines the\n\
    \   specific authentication protocol being used by EAP.  This memo\n   defines\
    \ a particular method and therefore defines the messages sent\n   between the\
    \ EAP server and the EAP peer for the purpose of\n   authentication and key derivation.\n"
- title: 3.1.  Message Flows
  contents:
  - "3.1.  Message Flows\n   A successful run of EAP-EKE consists of three message\
    \ exchanges: an\n   Identity exchange, a Commit exchange, and a Confirm exchange.\
    \  This\n   is shown in Figure 1.\n   The peer and server use the EAP-EKE Identity\
    \ exchange to learn each\n   other's identities and to agree upon a ciphersuite\
    \ to use in the\n   subsequent exchanges.  In the Commit exchange, the peer and\
    \ server\n   exchange information to generate a shared key and also to bind each\n\
    \   other to a particular guess of the password.  In the Confirm\n   exchange,\
    \ the peer and server prove liveness and knowledge of the\n   password by generating\
    \ and verifying verification data (note that the\n   second message of the Commit\
    \ exchange already plays an essential part\n   in this liveness proof).\n    \
    \     +--------+                                     +--------+\n         |  \
    \      |                  EAP-EKE-ID/Request |        |\n         |  EAP   |<------------------------------------|\
    \  EAP   |\n         |  peer  |                                     | server |\n\
    \         |  (P)   | EAP-EKE-ID/Response                 |   (S)  |\n        \
    \ |        |------------------------------------>|        |\n         |      \
    \  |                                     |        |\n         |        |     \
    \         EAP-EKE-Commit/Request |        |\n         |        |<------------------------------------|\
    \        |\n         |        |                                     |        |\n\
    \         |        | EAP-EKE-Commit/Response             |        |\n        \
    \ |        |------------------------------------>|        |\n         |      \
    \  |                                     |        |\n         |        |     \
    \        EAP-EKE-Confirm/Request |        |\n         |        |<------------------------------------|\
    \        |\n         |        |                                     |        |\n\
    \         |        | EAP-EKE-Confirm/Response            |        |\n        \
    \ |        |------------------------------------>|        |\n         |      \
    \  |                                     |        |\n         |        |     \
    \     EAP-Success                |        |\n         |        |<------------------------------------|\
    \        |\n         +--------+                                     +--------+\n\
    \                Figure 1: A Successful EAP-EKE Exchange\n   Schematically, the\
    \ original exchange as described in [BM92] (and with\n   the roles reversed) is:\n\
    \  Server                              Peer\n  ------                        \
    \      ----\n  Encr(Password, y_s) ->\n                     <- Encr(Password,\
    \ y_p), Encr(SharedSecret, Nonce_P)\n  Encr(SharedSecret, Nonce_S | Nonce_P) ->\n\
    \                                          <- Encr(SharedSecret, Nonce_S)\n  \
    \ Where:\n   o  Password is a typically short string, shared between the server\n\
    \      and the peer.  In other words, the same password is used to\n      authenticate\
    \ the server to the peer, and vice versa.\n   o  y_s and y_p are the server's\
    \ and the peer's, respectively,\n      ephemeral public key, i.e., y_s = g ^ x_s\
    \ (mod p) and\n      y_p = g ^ x_p (mod p).\n   o  Nonce_S, Nonce_P are random\
    \ strings generated by the server and\n      the peer as cryptographic challenges.\n\
    \   o  SharedSecret is the secret created by the Diffie-Hellman\n      algorithm,\
    \ namely SharedSecret = g^(x_s * x_p) (mod p).  This\n      value is calculated\
    \ by the server as: SharedSecret = y_p ^ x_s\n      (mod p), and by the peer as:\
    \ SharedSecret = y_s ^ x_p (mod p).\n   The current protocol extends the basic\
    \ cryptographic protocol, and\n   the regular successful exchange becomes:\n \
    \     Message                   Server                       Peer\n     ---------\
    \                 --------                     ------\n   ID/Request         ID_S,\
    \ CryptoProposals ->\n   ID/Response                                 <- ID_P,\
    \ CryptoSelection\n   Commit/Request     Encr(Password, y_s) ->\n   Commit/Response\
    \        <- Encr(Password, y_p), Prot(Ke, Ki, Nonce_P)\n   Confirm/Request   \
    \ Prot(Ke, Ki, Nonce_S | Nonce_P), Auth_S ->\n   Confirm/Response            \
    \        <- Prot(Ke, Ki, Nonce_S), Auth_P\n   Where, in addition to the above\
    \ terminology:\n   o  Encr means encryption only, and Prot is encryption with\
    \ integrity\n      protection.\n   o  Ke is an encryption key, and Ki is an integrity-protection\
    \ key.\n   Section 5 explains the various cryptographic values and how they are\n\
    \   derived.\n   As shown in the exchange above, the following information elements\n\
    \   have been added to the original protocol: identity values for both\n   protocol\
    \ parties (ID_S, ID_P), negotiation of cryptographic\n   protocols, and signature\
    \ fields to protect the integrity of the\n   negotiated parameters (Auth_S, Auth_P).\
    \  In addition, the shared\n   secret is not used directly.  In this initial exposition,\
    \ a few\n   details were omitted for clarity.  Section 5 should be considered\
    \ as\n   authoritative regarding message and field details.\n"
- title: 4.  Message Formats
  contents:
  - "4.  Message Formats\n   EAP-EKE defines a small number of message types, each\
    \ message\n   consisting of a header followed by a payload.  This section defines\n\
    \   the header, several payload formats, as well as the format of\n   specific\
    \ fields within the payloads.\n   As usual, all multi-octet strings MUST be laid\
    \ out in network byte\n   order.\n"
- title: 4.1.  EAP-EKE Header
  contents:
  - "4.1.  EAP-EKE Header\n   The EAP-EKE header consists of the standard EAP header\
    \ (see Section 4\n   of [RFC3748]), followed by an EAP-EKE exchange type.  The\
    \ header has\n   the following structure:\n    0                   1         \
    \          2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |   EKE-Exch    |              Data            ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                         Figure 2: EAP-EKE Header\n   The Code, Identifier, Length,\
    \ and Type fields are all part of the EAP\n   header as defined in [RFC3748].\
    \  The Type field in the EAP header is\n   53 for EAP-EKE Version 1.\n   The EKE-Exch\
    \ (EKE Exchange) field identifies the type of EAP-EKE\n   payload encapsulated\
    \ in the Data field.  This document defines the\n   following values for the EKE-Exch\
    \ field:\n   o  0x00: Reserved\n   o  0x01: EAP-EKE-ID exchange\n   o  0x02: EAP-EKE-Commit\
    \ exchange\n   o  0x03: EAP-EKE-Confirm exchange\n   o  0x04: EAP-EKE-Failure\
    \ message\n   Further values of this EKE-Exch field are available via IANA\n \
    \  registration (Section 7.7).\n"
- title: 4.2.  EAP-EKE Payloads
  contents:
  - "4.2.  EAP-EKE Payloads\n   EAP-EKE messages all contain the EAP-EKE header and\
    \ information\n   encoded in a single payload, which differs for the different\n\
    \   exchanges.\n"
- title: 4.2.1.  The EAP-EKE-ID Payload
  contents:
  - "4.2.1.  The EAP-EKE-ID Payload\n     0                   1                  \
    \ 2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | NumProposals  |   Reserved    |           Proposal           ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ...    Proposal                  |    IDType     |  Identity    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                       Figure 3: EAP-EKE-ID Payload\n   The EAP-EKE-ID payload\
    \ contains the following fields:\n   NumProposals:\n      The NumProposals field\
    \ contains the number of Proposal fields\n      subsequently contained in the\
    \ payload.  In the EAP-EKE-ID/Request\n      message, the NumProposals field MUST\
    \ NOT be set to zero (0), and\n      in the EAP-EKE-ID/Response message, the NumProposals\
    \ field MUST be\n      set to one (1).  The offered proposals in the Request are\
    \ listed\n      contiguously in priority order, most preferable first.  The\n\
    \      selected proposal in the Response MUST be fully identical with one\n  \
    \    of the offered proposals.\n   Reserved:\n      This field MUST be sent as\
    \ zero, and MUST be ignored by the\n      recipient.\n   Proposal:\n      Each\
    \ proposal consists of four one-octet fields, in this order:\n      Group Description:\n\
    \         This field's value is taken from the IANA registry for Diffie-\n   \
    \      Hellman groups defined in Section 7.1.\n      Encryption:\n         This\
    \ field's value is taken from the IANA registry for\n         encryption algorithms\
    \ defined in Section 7.2.\n      PRF:\n         This field's value is taken from\
    \ the IANA registry for pseudo-\n         random functions defined in Section\
    \ 7.3.\n      MAC:\n         This field's value is taken from the IANA registry\
    \ for keyed\n         message digest algorithms defined in Section 7.4.\n   IDType:\n\
    \      Denotes the Identity Type.  This is taken from the IANA registry\n    \
    \  defined in Section 7.5.  The server and the peer MAY use different\n      identity\
    \ types.  All implementations MUST be able to receive two\n      identity types:\
    \ ID_NAI and ID_FQDN.\n   Identity:\n      The meaning of the Identity field depends\
    \ on the values of the\n      Code and IDType fields.\n      *  EAP-EKE-ID/Request:\
    \ server ID\n      *  EAP-EKE-ID/Response: peer ID\n      The length of the Identity\
    \ field is computed from the Length field\n      in the EAP header.  Specifically,\
    \ its length is\n         eap_header_length - 9 - 4 * number_of_proposals.\n \
    \     This field, like all other fields in this specification, MUST be\n     \
    \ octet-aligned.\n"
- title: 4.2.2.  The EAP-EKE-Commit Payload
  contents:
  - "4.2.2.  The EAP-EKE-Commit Payload\n   This payload allows both parties to send\
    \ their encrypted ephemeral\n   public key, with the peer also including a Challenge.\n\
    \   In addition, a small amount of data can be included by the server\n   and/or\
    \ the peer, and used for channel binding.  This data is sent\n   here unprotected,\
    \ but is verified later, when it is signed by the\n   Auth_S/Auth_P payloads of\
    \ the EAP-EKE-Confirm exchange.\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         DHComponent_S/DHComponent_P                           ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                                                               ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          PNonce_P                                             ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                                                               ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          CBValue (zero or more occurrences)                   ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                                                               ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 4: EAP-EKE-Commit Payload\n   DHComponent_S/DHComponent_P:\n\
    \      This field contains the password-encrypted Diffie-Hellman public\n    \
    \  key, which is generated as described in Section 5.1.  Its size is\n      determined\
    \ by the group and the encryption algorithm.\n   PNonce_P:\n      This field only\
    \ appears in the response, and contains the\n      encrypted and integrity-protected\
    \ challenge value sent by the\n      peer.  The field's size is determined by\
    \ the encryption and MAC\n      algorithms being used, since this protocol mandates\
    \ a fixed nonce\n      size for a given choice of algorithms.  See Section 5.2.\n\
    \   CBValue:\n      This structure MAY be included both in the request and in\
    \ the\n      response, and MAY be repeated multiple times in a single payload.\n\
    \      See Section 4.5.  Each structure contains its own length.  The\n      field\
    \ is neither encrypted nor integrity protected, instead it is\n      protected\
    \ by the AUTH payloads in the Confirm exchange.\n"
- title: 4.2.3.  The EAP-EKE-Confirm Payload
  contents:
  - "4.2.3.  The EAP-EKE-Confirm Payload\n   Using this payload, both parties complete\
    \ the authentication by\n   generating a shared temporary key, authenticating\
    \ the entire\n   protocol, and generating key material for the EAP consumer protocol.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          PNonce_PS/PNonce_S                                   ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                                                               ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Auth_S/Auth_P                                        ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                                                               ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 5: EAP-EKE-Confirm Payload\n   PNonce_PS/PNonce_S:\n\
    \      This field (\"protected nonce\") contains the encrypted and\n      integrity-protected\
    \ response to the other party's challenge; see\n      Sections 5.3 and 5.4.  Similarly\
    \ to the PNonce_P field, this\n      field's size is determined by the encryption\
    \ and MAC algorithms.\n   Auth_S/Auth_P:\n      This field signs the preceding\
    \ messages, including the Identity\n      and the negotiated fields.  This prevents\
    \ various possible\n      attacks, such as algorithm downgrade attacks.  See Section\
    \ 5.3 and\n      Section 5.4.  The size is determined by the pseudo-random function\n\
    \      negotiated.\n"
- title: 4.2.4.  The EAP-EKE-Failure Payload
  contents:
  - "4.2.4.  The EAP-EKE-Failure Payload\n   The EAP-EKE-Failure payload format is\
    \ defined as follows:\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Failure-Code                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 6: EAP-EKE-Failure Payload\n   The payload's size\
    \ is always exactly 4 octets.\n   The following Failure-Code values are defined:\n\
    \   +------------+----------------+-------------------------------------+\n  \
    \ | Value      | Name           | Meaning                             |\n   +------------+----------------+-------------------------------------+\n\
    \   | 0x00000000 | Reserved       |                                     |\n  \
    \ | 0x00000001 | No Error       | This code is used for failure       |\n   |\
    \            |                | acknowledgement, see below.         |\n   | 0x00000002\
    \ | Protocol Error | A failure to parse or understand a  |\n   |            |\
    \                | protocol message or one of its      |\n   |            |  \
    \              | payloads.                           |\n   | 0x00000003 | Password\
    \ Not   | A password could not be located for |\n   |            | Found     \
    \     | the identity presented by the other |\n   |            |             \
    \   | protocol party, making              |\n   |            |               \
    \ | authentication impossible.          |\n   | 0x00000004 | Authentication |\
    \ Failure in the cryptographic        |\n   |            | Failure        | computation,\
    \ most likely caused by  |\n   |            |                | an incorrect password\
    \ or an         |\n   |            |                | inappropriate identity type.\
    \        |\n   | 0x00000005 | Authorization  | While the password being used is\
    \    |\n   |            | Failure        | correct, the user is not authorized\
    \ |\n   |            |                | to connect.                         |\n\
    \   | 0x00000006 | No Proposal    | The peer is unwilling to select any |\n  \
    \ |            | Chosen         | of the cryptographic proposals      |\n   |\
    \            |                | offered by the server.              |\n   +------------+----------------+-------------------------------------+\n\
    \   Additional values of this field are available via IANA registration,\n   see\
    \ Section 7.8.\n   When the peer encounters an error situation, it MUST respond\
    \ with\n   EAP-EKE-Failure.  The server MUST reply with an EAP-Failure message\n\
    \   to end the exchange.\n   When the server encounters an error situation, it\
    \ MUST respond with\n   EAP-EKE-Failure.  The peer MUST send back an EAP-EKE-Failure\
    \ message\n   containing a \"No Error\" failure code.  Then the server MUST send\
    \ an\n   EAP-Failure message to end the exchange.\n   Implementation of the \"\
    Password Not Found\" code is not mandatory.\n   For security reasons, implementations\
    \ MAY choose to return\n   \"Authentication Failure\" also in cases where the\
    \ password cannot be\n   located.\n"
- title: 4.3.  Protected Fields
  contents:
  - "4.3.  Protected Fields\n   Several fields are encrypted and integrity-protected.\
    \  They are\n   denoted Prot(...).  Their general structure is as follows:\n \
    \   0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Initialization Vector (IV) (optional)                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Encrypted Data                         ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                                                               ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~               |            Random Padding                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Integrity Check Value (ICV)                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 7: Protected Field Structure\n   The protected field\
    \ is a concatenation of three octet strings:\n   o  An optional IV, required when\
    \ the encryption algorithm/mode\n      necessitates it, e.g., for CBC encryption.\
    \  The content and size\n      of this field are determined by the selected encryption\
    \ algorithm.\n      In the case of CBC encryption, this field is a random octet\
    \ string\n      having the same size as the algorithm's block size.\n   o  The\
    \ original data, followed if necessary by random padding.  This\n      padding\
    \ has the minimal length (possibly zero) required to\n      complete the length\
    \ of the encrypted data to the encryption\n      algorithm's block size.  The\
    \ original data and the padding are\n      encrypted together.\n   o  ICV, a Message\
    \ Authentication Code (MAC) cryptographic checksum of\n      the encrypted data,\
    \ including the padding.  The checksum is\n      computed over the encrypted,\
    \ rather than the plaintext, data.  Its\n      length is determined by the MAC\
    \ algorithm negotiated.\n   We note that because of the requirement for an explicit\
    \ ICV, this\n   specification does not support authenticated encryption algorithms.\n\
    \   Such algorithms may be added by a future extension.\n"
- title: 4.4.  Encrypted Fields
  contents:
  - "4.4.  Encrypted Fields\n   Two fields are encrypted but are not integrity protected.\
    \  They are\n   denoted Encr(...).  Their format is identical to a protected field\n\
    \   (Section 4.3), except that the Integrity Check Value is omitted.\n"
- title: 4.5.  Channel Binding Values
  contents:
  - "4.5.  Channel Binding Values\n   This protocol allows higher-level protocols\
    \ to transmit limited\n   opaque information between the peer and the server.\
    \  This information\n   is integrity protected but not encrypted, and may be used\
    \ to ensure\n   that protocol participants are identical at different protocol\n\
    \   layers.  See Section 7.15 of [RFC3748] for more information on the\n   rationale\
    \ behind this facility.\n   EAP-EKE neither validates nor makes any use of the\
    \ transmitted\n   information.  The information MUST NOT be used by the consumer\n\
    \   protocol until it is verified in the EAP-EKE-Confirm exchange\n   (specifically,\
    \ until it is integrity protected by the Auth_S, Auth_P\n   payloads).  Consequently,\
    \ it MUST NOT be relied upon in case an error\n   occurs at the EAP-EKE level.\n\
    \   An unknown Channel Binding Value SHOULD be ignored by the recipient.\n   Some\
    \ implementations may require certain values to be present, and\n   will abort\
    \ the protocol if they are not.  Such policy is out of scope\n   of the current\
    \ protocol.\n   Each Channel Binding Value is encoded using a TLV structure:\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          CBType               |           Length              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          Value                                               ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      Figure 8: Channel Binding Value\n   CBType:\n      This\
    \ is the Channel Binding Value's type.  This document defines\n      the value\
    \ 0x0000 as reserved.  Other values are available for IANA\n      allocation,\
    \ see Section 7.6.\n   Length:\n      This field is the total length in octets\
    \ of the structure,\n      including the CBType and Length fields.\n   This facility\
    \ should be used with care, since EAP-EKE does not\n   provide for message fragmentation.\
    \  EAP-EKE is not a tunneled method\n   and should not be used as a generic transport;\
    \ specifically,\n   implementors should refrain from using the Channel Binding\
    \ facility\n   to transmit posture information, in the sense of [RFC5209].\n"
- title: 5.  Protocol Sequence
  contents:
  - "5.  Protocol Sequence\n   This section describes the sequence of messages for\
    \ the Commit and\n   Confirm exchanges, and lists the cryptographic operations\
    \ performed\n   by the server and the peer.\n"
- title: 5.1.  EAP-EKE-Commit/Request
  contents:
  - "5.1.  EAP-EKE-Commit/Request\n   The server computes:\n      y_s = g ^ x_s (mod\
    \ p),\n   where x_s is a randomly chosen number in the range 2 .. p-1.  The\n\
    \   randomly chosen number is the ephemeral private key, and the\n   calculated\
    \ value is the corresponding ephemeral public key.  The\n   server and the peer\
    \ MUST both use a fresh, random value for x_s and\n   the corresponding x_p on\
    \ each run of the protocol.\n   The server computes and transmits the encrypted\
    \ field (Section 4.4)\n      temp = prf(0+, password)\n      key = prf+(temp,\
    \ ID_S | ID_P)\n      DHComponent_S = Encr(key, y_s).\n   See Section 6.1 for\
    \ the prf+ notation.  The first argument to \"prf\"\n   is a string of zero octets\
    \ whose length is the output size of the\n   base hash algorithm, e.g., 20 octets\
    \ for HMAC-SHA1; the result is of\n   the same length.  The first output octets\
    \ of prf+ are used as the\n   encryption key for the negotiated encryption algorithm,\
    \ according to\n   that algorithm's key length.\n   Since the PRF function is\
    \ required to be an application of the HMAC\n   operator to a hash function, the\
    \ above construction implements HKDF\n   as defined in [RFC5869].\n   When using\
    \ block ciphers, it may be necessary to pad y_s on the\n   right, to fit the encryption\
    \ algorithm's block size.  In such cases,\n   random padding MUST be used, and\
    \ this randomness is critical to the\n   security of the protocol.  Randomness\
    \ recommendations can be found in\n   [RFC4086]; also see [NIST.800-90.2007] for\
    \ additional recommendations\n   on cryptographic-level randomness.  When decrypting\
    \ this field, the\n   real length of y_s is determined according to the negotiated\
    \ Diffie-\n   Hellman group.\n   If the password needs to be stored on the server,\
    \ it is RECOMMENDED\n   to store a randomized password value as a password-equivalent,\
    \ rather\n   than the cleartext password.  We note that implementations may choose\n\
    \   the output of either of the two steps of the password derivation.\n   Using\
    \ the output of the second step, where the password is salted by\n   the identity\
    \ values, is more secure; however, it may create an\n   operational issue if identities\
    \ are likely to change.  See also\n   Section 8.5.\n   This protocol supports\
    \ internationalized, non-ASCII passwords.  The\n   input password string SHOULD\
    \ be processed according to the rules of\n   the [RFC4013] profile of [RFC3454].\
    \  A password SHOULD be considered\n   a \"stored string\" per [RFC3454], and\
    \ unassigned code points are\n   therefore prohibited.  The output is the binary\
    \ representation of the\n   processed UTF-8 [RFC3629] character string.  Prohibited\
    \ output and\n   unassigned code points encountered in SASLprep preprocessing\
    \ SHOULD\n   cause a preprocessing failure and the output SHOULD NOT be used.\n"
- title: 5.2.  EAP-EKE-Commit/Response
  contents:
  - "5.2.  EAP-EKE-Commit/Response\n   The peer computes:\n      y_p = g ^ x_p (mod\
    \ p)\n   Then computes:\n      temp = prf(0+, password)\n      key = prf+(temp,\
    \ ID_S | ID_P)\n      DHComponent_P = Encr(key, y_p)\n   formatted as an encrypted\
    \ field (Section 4.4).\n   Both sides calculate\n      SharedSecret = prf(0+,\
    \ g ^ (x_s * x_p) (mod p))\n   The first argument to \"prf\" is a string of zero\
    \ octets whose length\n   is the output size of the base hash algorithm, e.g.,\
    \ 20 octets for\n   HMAC-SHA1; the result is of the same length.  This extra application\n\
    \   of the pseudo-random function is the \"extraction step\" of [RFC5869].\n \
    \  Note that the peer needs to compute the SharedSecret value before\n   sending\
    \ out its response.\n   The encryption and integrity protection keys are computed:\n\
    \      Ke | Ki = prf+(SharedSecret, \"EAP-EKE Keys\" | ID_S | ID_P)\n   And the\
    \ peer generates the Protected Nonce:\n      PNonce_P = Prot(Ke, Ki, Nonce_P),\n\
    \   where Nonce_P is a randomly generated binary string.  The length of\n   Nonce_P\
    \ MUST be the maximum of 16 octets, and half the key size of\n   the negotiated\
    \ prf (rounded up to the next octet if necessary).  The\n   peer constructs this\
    \ value as a protected field (Section 4.3),\n   encrypted using Ke and integrity\
    \ protected using Ki with the\n   negotiated encryption and MAC algorithm.\n \
    \  The peer now sends a message that contains the two generated fields.\n   The\
    \ server MUST verify the correct integrity protection of the\n   received nonce,\
    \ and MUST abort the protocol if it is incorrect, with\n   an \"Authentication\
    \ Failure\" code.\n"
- title: 5.3.  EAP-EKE-Confirm/Request
  contents:
  - "5.3.  EAP-EKE-Confirm/Request\n   The server constructs:\n      PNonce_PS = Prot(Ke,\
    \ Ki, Nonce_P | Nonce_S),\n   as a protected field, where Nonce_S is a randomly\
    \ generated string,\n   of the same size as Nonce_P.\n   It computes:\n      Ka\
    \ = prf+(SharedSecret, \"EAP-EKE Ka\" | ID_S | ID_P | Nonce_P |\n      Nonce_S)\n\
    \   whose length is the preferred key length of the negotiated prf (see\n   Section\
    \ 5.2).  It then constructs:\n      Auth_S = prf(Ka, \"EAP-EKE server\" | EAP-EKE-ID/Request\
    \ | EAP-EKE-\n      ID/Response | EAP-EKE-Commit/Request | EAP-EKE-Commit/Response).\n\
    \   The messages are included in full, starting with the EAP header, and\n   including\
    \ any possible future extensions.\n   This construction of the Auth_S (and Auth_P)\
    \ value implies that any\n   future extensions MUST NOT be added to the EAP-EKE-Confirm/Request\
    \ or\n   EAP-EKE-Confirm/Response messages themselves, unless these extensions\n\
    \   are integrity-protected in some other manner.\n   The server now sends a message\
    \ that contains the two fields.\n   The peer MUST verify the correct integrity\
    \ protection of the received\n   nonces and the correctness of the Auth_S value,\
    \ and MUST abort the\n   protocol if either is incorrect, with an \"Authentication\
    \ Failure\"\n   code.\n"
- title: 5.4.  EAP-EKE-Confirm/Response
  contents:
  - "5.4.  EAP-EKE-Confirm/Response\n   The peer computes Ka, and generates:\n   \
    \   PNonce_S = Prot(Ke, Ki, Nonce_S)\n   as a protected field.  It then computes:\n\
    \      Auth_P = prf(Ka, \"EAP-EKE peer\" | EAP-EKE-ID/Request | EAP-EKE-ID/\n\
    \      Response | EAP-EKE-Commit/Request | EAP-EKE-Commit/Response)\n   The peer\
    \ sends a message that contains the two fields.\n   The server MUST verify the\
    \ correct integrity protection of the\n   received nonce and the correctness of\
    \ the Auth_P value, and MUST\n   abort the protocol if either is incorrect, with\
    \ an \"Authentication\n   Failure\" code.\n"
- title: 5.5.  MSK and EMSK
  contents:
  - "5.5.  MSK and EMSK\n   Following the last message of the protocol, both sides\
    \ compute and\n   export the shared keys, each 64 bytes in length:\n      MSK\
    \ | EMSK = prf+(SharedSecret, \"EAP-EKE Exported Keys\" | ID_S |\n      ID_P |\
    \ Nonce_P | Nonce_S)\n   When the RADIUS attributes specified in [RFC2548] are\
    \ used to\n   transport keying material, then the first 32 bytes of the MSK\n\
    \   correspond to MS-MPPE-RECV-KEY and the second 32 bytes to MS-MPPE-\n   SEND-KEY.\
    \  In this case, only 64 bytes of keying material (the MSK)\n   are used.\n  \
    \ At this point, both protocol participants MUST discard all\n   intermediate\
    \ cryptographic values, including x_p, x_s, y_p, y_s, Ke,\n   Ki, Ka, and SharedSecret.\
    \  Similarly, both parties MUST immediately\n   discard these values whenever\
    \ the protocol terminates with a failure\n   code or as a result of timeout.\n"
- title: 6.  Cryptographic Details
  contents:
  - '6.  Cryptographic Details

    '
- title: 6.1.  Generating Keying Material
  contents:
  - "6.1.  Generating Keying Material\n   Keying material is derived as the output\
    \ of the negotiated pseudo-\n   random function (prf) algorithm.  Since the amount\
    \ of keying material\n   needed may be greater than the size of the output of\
    \ the prf\n   algorithm, we will use the prf iteratively.  We denote by \"prf+\"\
    \ the\n   function that outputs a pseudo-random stream based on the inputs to\
    \ a\n   prf as follows (where \"|\" indicates concatenation):\n      prf+ (K,\
    \ S) = T1 | T2 | T3 | T4 | ...\n   where:\n      T1 = prf(K, S | 0x01)\n     \
    \ T2 = prf(K, T1 | S | 0x02)\n      T3 = prf(K, T2 | S | 0x03)\n      T4 = prf(K,\
    \ T3 | S | 0x04)\n   continuing as needed to compute all required keys.  The keys\
    \ are\n   taken from the output string without regard to boundaries (e.g., if\n\
    \   the required keys are a 256-bit Advanced Encryption Standard (AES)\n   key\
    \ and a 160-bit HMAC key, and the prf function generates 160 bits,\n   the AES\
    \ key will come from T1 and the beginning of T2, while the HMAC\n   key will come\
    \ from the rest of T2 and the beginning of T3).\n   The constant concatenated\
    \ to the end of each string feeding the prf\n   is a single octet.  In this document,\
    \ prf+ is not defined beyond 255\n   times the size of the prf output.\n"
- title: 6.2.  Diffie-Hellman Groups
  contents:
  - "6.2.  Diffie-Hellman Groups\n   Many of the commonly used Diffie-Hellman groups\
    \ are inappropriate for\n   use in EKE.  Most of these groups use a generator\
    \ that is not a\n   primitive element of the group.  As a result, an attacker\
    \ running a\n   dictionary attack would be able to learn at least 1 bit of\n \
    \  information for each decrypted password guess.\n   Any MODP Diffie-Hellman\
    \ group defined for use in this protocol MUST\n   have the following properties\
    \ to ensure that it does not leak a\n   usable amount of information about the\
    \ password:\n   1.  The generator is a primitive element of the group.\n   2.\
    \  The most significant 64 bits of the prime number are 1.\n   3.  The group's\
    \ order p is a \"safe prime\", i.e., (p-1)/2 is also\n       prime.\n   The last\
    \ requirement is related to the strength of the Diffie-Hellman\n   algorithm,\
    \ rather than the password encryption.  It also makes it\n   easy to verify that\
    \ the generator is primitive.\n   Suitable groups are defined in Section 7.1.\n"
- title: 6.3.  Mandatory Algorithms
  contents:
  - "6.3.  Mandatory Algorithms\n   To facilitate interoperability, the following\
    \ algorithms are\n   mandatory to implement:\n   o  ENCR_AES128_CBC (encryption\
    \ algorithm)\n   o  PRF_HMAC_SHA1 (pseudo-random function)\n   o  MAC_HMAC_SHA1\
    \ (keyed message digest)\n   o  DHGROUP_EKE_14 (DH-group)\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has allocated the EAP method type 53 from the\
    \ range 1-191, for\n   \"EAP-EKE Version 1\".\n   Per this document, IANA created\
    \ the registries described in the\n   following sub-sections.  Values (other than\
    \ private-use ones) can be\n   added to these registries per Specification Required\
    \ [RFC5226], with\n   two exceptions: the Exchange and Failure Code registries\
    \ can only be\n   extended per RFC Required [RFC5226].\n"
- title: 7.1.  Diffie-Hellman Group Registry
  contents:
  - "7.1.  Diffie-Hellman Group Registry\n   This section defines an IANA registry\
    \ for Diffie-Hellman groups.\n   This table defines the initial contents of this\
    \ registry.  The Value\n   column is used when negotiating the group.  Additional\
    \ groups may be\n   defined through IANA allocation.  Any future specification\
    \ that\n   defines a non-MODP group MUST specify its use within EAP-EKE and MUST\n\
    \   demonstrate the group's security in this context.\n   +-----------------+---------+---------------------------------------+\n\
    \   | Name            | Value   | Description                           |\n  \
    \ +-----------------+---------+---------------------------------------+\n   |\
    \ Reserved        | 0       |                                       |\n   | DHGROUP_EKE_2\
    \   | 1       | The prime number of the 1024-bit      |\n   |                \
    \ |         | Group 2 [RFC5996], with the generator |\n   |                 |\
    \         | 5 (decimal)                           |\n   | DHGROUP_EKE_5   | 2\
    \       | The prime number of the 1536-bit      |\n   |                 |    \
    \     | Group 5 [RFC3526], g=31               |\n   | DHGROUP_EKE_14  | 3    \
    \   | The prime number of the 2048-bit      |\n   |                 |        \
    \ | Group 14 [RFC3526], g=11              |\n   | DHGROUP_EKE_15  | 4       |\
    \ The prime number of the 3072-bit      |\n   |                 |         | Group\
    \ 15 [RFC3526], g=5               |\n   | DHGROUP_EKE_16  | 5       | The prime\
    \ number of the 4096-bit      |\n   |                 |         | Group 16 [RFC3526],\
    \ g=5               |\n   | Available for   | 6-127   |                      \
    \                 |\n   | allocation via  |         |                        \
    \               |\n   | IANA            |         |                          \
    \             |\n   | Reserved for    | 128-255 |                            \
    \           |\n   | Private Use     |         |                              \
    \         |\n   +-----------------+---------+---------------------------------------+\n"
- title: 7.2.  Encryption Algorithm Registry
  contents:
  - "7.2.  Encryption Algorithm Registry\n   This section defines an IANA registry\
    \ for encryption algorithms:\n     +-----------------+---------+-----------------------------------+\n\
    \     | Name            | Value   | Definition                        |\n    \
    \ +-----------------+---------+-----------------------------------+\n     | Reserved\
    \        | 0       |                                   |\n     | ENCR_AES128_CBC\
    \ | 1       | AES with a 128-bit key, CBC mode  |\n     |                 | 2-127\
    \   | Available for allocation via IANA |\n     |                 | 128-255 |\
    \ Reserved for Private Use          |\n     +-----------------+---------+-----------------------------------+\n"
- title: 7.3.  Pseudo-Random Function Registry
  contents:
  - "7.3.  Pseudo-Random Function Registry\n   This section defines an IANA registry\
    \ for pseudo-random function\n   algorithms:\n   +-------------------+---------+-------------------------------------+\n\
    \   | Name              | Value   | Definition                          |\n  \
    \ +-------------------+---------+-------------------------------------+\n   |\
    \ Reserved          | 0       |                                     |\n   | PRF_HMAC_SHA1\
    \     | 1       | HMAC SHA-1, as defined in [RFC2104] |\n   | PRF_HMAC_SHA2_256\
    \ | 2       | HMAC SHA-2-256 [SHA]                |\n   |                   |\
    \ 3-127   | Available for allocation via IANA   |\n   |                   | 128-255\
    \ | Reserved for Private Use            |\n   +-------------------+---------+-------------------------------------+\n\
    \   A pseudo-random function takes two parameters K and S (the key and\n   input\
    \ string respectively), and, to be usable in this protocol, must\n   be defined\
    \ for all lengths of K between 0 and 65,535 bits\n   (inclusive).\n   Any future\
    \ pseudo-random function MUST be based on the HMAC\n   construct, since the security\
    \ of HKDF is only known for such\n   functions.\n"
- title: 7.4.  Keyed Message Digest (MAC) Registry
  contents:
  - "7.4.  Keyed Message Digest (MAC) Registry\n   This section defines an IANA registry\
    \ for keyed message digest\n   algorithms:\n   +-------------------+---------+--------------+----------------------+\n\
    \   | Name              | Value   | Key Length   | Definition           |\n  \
    \ |                   |         | (Octets)     |                      |\n   +-------------------+---------+--------------+----------------------+\n\
    \   | Reserved          | 0       |              |                      |\n  \
    \ | MAC_HMAC_SHA1     | 1       | 20           | HMAC SHA-1, as       |\n   |\
    \                   |         |              | defined in [RFC2104] |\n   | MAC_HMAC_SHA2_256\
    \ | 2       | 32           | HMAC SHA-2-256       |\n   | Reserved          |\
    \ 3-127   |              | Available for        |\n   |                   |  \
    \       |              | allocation via IANA  |\n   | Reserved          | 128-255\
    \ |              | Reserved for Private |\n   |                   |         |\
    \              | Use                  |\n   +-------------------+---------+--------------+----------------------+\n"
- title: 7.5.  Identity Type Registry
  contents:
  - "7.5.  Identity Type Registry\n   This section defines an IANA registry for identity\
    \ types:\n   +-----------+---------+---------------------------------------------+\n\
    \   | Name      | Value   | Definition                                  |\n  \
    \ +-----------+---------+---------------------------------------------+\n   |\
    \ Reserved  | 0       |                                             |\n   | ID_OPAQUE\
    \ | 1       | An opaque octet string                      |\n   | ID_NAI    |\
    \ 2       | A Network Access Identifier, as defined in  |\n   |           |  \
    \       | [RFC4282]                                   |\n   | ID_IPv4   | 3  \
    \     | An IPv4 address, in binary format           |\n   | ID_IPv6   | 4    \
    \   | An IPv6 address, in binary format           |\n   | ID_FQDN   | 5      \
    \ | A fully qualified domain name, see note     |\n   |           |         |\
    \ below                                       |\n   | ID_DN     | 6       | An\
    \ LDAP Distinguished Name formatted as a   |\n   |           |         | string,\
    \ as defined in [RFC4514]             |\n   |           | 7-127   | Available\
    \ for allocation via IANA           |\n   |           | 128-255 | Reserved for\
    \ Private Use                    |\n   +-----------+---------+---------------------------------------------+\n\
    \   An example of an ID_FQDN is \"example.com\".  The string MUST NOT\n   contain\
    \ any terminators (e.g., NULL, CR, etc.).  All characters in\n   the ID_FQDN are\
    \ ASCII; for an internationalized domain name, the\n   syntax is as defined in\
    \ [RFC5891], for example\n   \"xn--tmonesimerkki-bfbb.example.net\".\n"
- title: 7.6.  EAP-EKE Channel Binding Type Registry
  contents:
  - "7.6.  EAP-EKE Channel Binding Type Registry\n   This section defines an IANA\
    \ registry for the Channel Binding Type\n   registry, a 16-bit long code.  The\
    \ value 0x0000 has been defined as\n   Reserved.  All other values up to and including\
    \ 0xfeff are available\n   for allocation via IANA.  The remaining values up to\
    \ and including\n   0xffff are available for Private Use.\n"
- title: 7.7.  Exchange Registry
  contents:
  - "7.7.  Exchange Registry\n   This section defines an IANA registry for the EAP-EKE\
    \ Exchange\n   registry, an 8-bit long code.  Initial values are defined in\n\
    \   Section 4.1.  All values up to and including 0x7f are available for\n   allocation\
    \ via IANA.  The remaining values up to and including 0xff\n   are available for\
    \ private use.\n"
- title: 7.8.  Failure-Code Registry
  contents:
  - "7.8.  Failure-Code Registry\n   This section defines an IANA registry for the\
    \ Failure-Code registry,\n   a 32-bit long code.  Initial values are defined in\
    \ Section 4.2.4.\n   All values up to and including 0xfeffffff are available for\n\
    \   allocation via IANA.  The remaining values up to and including\n   0xffffffff\
    \ are available for private use.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Any protocol that claims to solve the problem\
    \ of password-\n   authenticated key exchange must be resistant to active, passive,\
    \ and\n   dictionary attack and have the quality of forward secrecy.  These\n\
    \   characteristics are discussed further in the following paragraphs.\n   Resistance\
    \ to Passive Attack:  A passive attacker is one that merely\n      relays messages\
    \ back and forth between the peer and server,\n      faithfully, and without modification.\
    \  The contents of the\n      messages are available for inspection, but that\
    \ is all.  To\n      achieve resistance to passive attack, such an attacker must\
    \ not be\n      able to obtain any information about the password or anything\n\
    \      about the resulting shared secret from watching repeated runs of\n    \
    \  the protocol.  Even if a passive attacker is able to learn the\n      password,\
    \ she will not be able to determine any information about\n      the resulting\
    \ secret shared by the peer and server.\n   Resistance to Active Attack:  An active\
    \ attacker is able to modify,\n      add, delete, and replay messages sent between\
    \ protocol\n      participants.  For this protocol to be resistant to active attack,\n\
    \      the attacker must not be able to obtain any information about the\n   \
    \   password or the shared secret by using any of its capabilities.\n      In\
    \ addition, the attacker must not be able to fool a protocol\n      participant\
    \ into thinking that the protocol completed\n      successfully.  It is always\
    \ possible for an active attacker to\n      deny delivery of a message critical\
    \ in completing the exchange.\n      This is no different than dropping all messages\
    \ and is not an\n      attack against the protocol.\n   Resistance to Dictionary\
    \ Attack:  For this protocol to be resistant\n      to dictionary attack, any\
    \ advantage an adversary can gain must be\n      directly related to the number\
    \ of interactions she makes with an\n      honest protocol participant and not\
    \ through computation.  The\n      adversary will not be able to obtain any information\
    \ about the\n      password except whether a single guess from a single protocol\
    \ run\n      is correct or incorrect.\n   Forward Secrecy:  Compromise of the\
    \ password must not provide any\n      information about the secrets generated\
    \ by earlier runs of the\n      protocol.\n   [RFC3748] requires that documents\
    \ describing new EAP methods clearly\n   articulate the security properties of\
    \ the method.  In addition, for\n   use with wireless LANs, [RFC4017] mandates\
    \ and recommends several of\n   these.  The claims are:\n   1.  Mechanism: password.\n\
    \   2.  Claims:\n       *  Mutual authentication: the peer and server both authenticate\n\
    \          each other by proving possession of a shared password.  This\n    \
    \      is REQUIRED by [RFC4017].\n       *  Forward secrecy: compromise of the\
    \ password does not reveal\n          the secret keys (MSK and EMSK) from earlier\
    \ runs of the\n          protocol.\n       *  Replay protection: an attacker is\
    \ unable to replay messages\n          from a previous exchange either to learn\
    \ the password or a key\n          derived by the exchange.  Similarly, the attacker\
    \ is unable to\n          induce either the peer or server to believe the exchange\
    \ has\n          successfully completed when it hasn't.\n       *  Key derivation:\
    \ a shared secret is derived by performing a\n          group operation in a finite\
    \ cyclic group (e.g.,\n          exponentiation) using secret data contributed\
    \ by both the peer\n          and server.  An MSK and EMSK are derived from that\
    \ shared\n          secret.  This is REQUIRED by [RFC4017].\n       *  Dictionary\
    \ attack resistance: an attacker can only make one\n          password guess per\
    \ active attack, and the protocol is designed\n          so that the attacker\
    \ does not gain any confirmation of her\n          guess by observing the decrypted\
    \ y_s or y_p value (see below).\n          The advantage she can gain is through\
    \ interaction not through\n          computation.  This is REQUIRED by [RFC4017].\n\
    \       *  Session independence: this protocol is resistant to active and\n  \
    \        passive attacks and does not enable compromise of subsequent\n      \
    \    or prior MSKs or EMSKs from either passive or active attacks.\n       * \
    \ Denial-of-service resistance: it is possible for an attacker\n          to cause\
    \ a server to allocate state and consume CPU.  Such an\n          attack is gated,\
    \ though, by the requirement that the attacker\n          first obtain connectivity\
    \ through a lower-layer protocol\n          (e.g., 802.11 authentication followed\
    \ by 802.11 association,\n          or 802.3 \"link-up\") and respond to two EAP\
    \ messages: the\n          EAP-ID/Request and the EAP-EKE-ID/Request.\n      \
    \ *  Man-in-the-Middle Attack resistance: this exchange is\n          resistant\
    \ to active attack, which is a requirement for\n          launching a man-in-the-middle\
    \ attack.  This is REQUIRED by\n          [RFC4017].\n       *  Shared state equivalence:\
    \ upon completion of EAP-EKE, the peer\n          and server both agree on the\
    \ MSK and EMSK values.  The peer\n          has authenticated the server based\
    \ on the Server_ID and the\n          server has authenticated the peer based\
    \ on the Peer_ID.  This\n          is due to the fact that Peer_ID, Server_ID,\
    \ and the generated\n          shared secret are all combined to make the authentication\n\
    \          element that must be shared between the peer and server for\n     \
    \     the exchange to complete.  This is REQUIRED by [RFC4017].\n       *  Fragmentation:\
    \ this protocol does not define a technique for\n          fragmentation and reassembly.\n\
    \       *  Resistance to \"Denning-Sacco\" attack: learning keys\n          distributed\
    \ from an earlier run of the protocol, such as the\n          MSK or EMSK, will\
    \ not help an adversary learn the password.\n   3.  Key strength: the strength\
    \ of the resulting key depends on the\n       finite cyclic group chosen.  Sufficient\
    \ key strength is REQUIRED\n       by [RFC4017].  Clearly, \"sufficient\" strength\
    \ varies over time,\n       depending on computation power assumed to be available\
    \ to\n       potential attackers.\n   4.  Key hierarchy: MSKs and EMSKs are derived\
    \ from the secret values\n       generated during the protocol run, using a negotiated\
    \ pseudo-\n       random function.\n   5.  Vulnerabilities (note that none of\
    \ these are REQUIRED by\n       [RFC4017]):\n       *  Protected ciphersuite negotiation:\
    \ the ciphersuite proposal\n          made by the server is not protected from\
    \ tampering by an\n          active attacker.  However, if a proposal was modified\
    \ by an\n          active attacker, it would result in a failure to confirm the\n\
    \          message sent by the other party, since the proposal is bound\n    \
    \      by each side into its Confirm message, and the protocol would\n       \
    \   fail as a result.  Note that this assumes that none of the\n          proposed\
    \ ciphersuites enables an attacker to perform real-time\n          cryptanalysis.\n\
    \       *  Confidentiality: none of the messages sent in this protocol\n     \
    \     are encrypted, though many of the protocol fields are.\n       *  Integrity\
    \ protection: protocol messages are not directly\n          integrity protected;\
    \ however, the ID and Commit exchanges are\n          integrity protected through\
    \ the Auth payloads exchanged in the\n          Confirm exchange.\n       *  Channel\
    \ binding: this protocol enables the exchange of\n          integrity-protected\
    \ channel information that can be compared\n          with values communicated\
    \ via out-of-band mechanisms.\n       *  Fast reconnect: this protocol does not\
    \ provide a fast\n          reconnect capability.\n       *  Cryptographic binding:\
    \ this protocol is not a tunneled EAP\n          method and therefore has no cryptographic\
    \ information to bind.\n       *  Identity protection: the EAP-EKE-ID exchange\
    \ is not protected.\n          An attacker will see the server's identity in the\
    \ EAP-EKE-ID/\n          Request and see the peer's identity in EAP-EKE-ID/Response.\n\
    \          See also Section 8.4.\n"
- title: 8.1.  Cryptographic Analysis
  contents:
  - "8.1.  Cryptographic Analysis\n   When analyzing the Commit exchange, it should\
    \ be noted that the base\n   security assumptions are different from \"normal\"\
    \ cryptology.\n   Normally, we assume that the key has strong security properties,\
    \ and\n   that the data may have few or none.  Here, we assume that the key has\n\
    \   weak security properties (the attacker may have a list of possible\n   keys),\
    \ and hence we need to ensure that the data has strong\n   properties (indistinguishable\
    \ from random).  This difference may mean\n   that conventional wisdom in cryptology\
    \ might not apply in this case.\n   This also imposes severe constraints on the\
    \ protocol, e.g., the\n   mandatory use of random padding and the need to define\
    \ specific\n   finite groups.\n"
- title: 8.2.  Diffie-Hellman Group Considerations
  contents:
  - "8.2.  Diffie-Hellman Group Considerations\n   It is fundamental to the dictionary\
    \ attack resistance that the\n   Diffie-Hellman public values y_s and y_p are\
    \ indistinguishable from a\n   random string.  If this condition is not met, then\
    \ a passive attacker\n   can do trial-decryption of the encrypted DHComponent_P\
    \ or\n   DHComponent_S values based on a password guess, and if they decrypt\n\
    \   to a value that is not a valid public value, they know that the\n   password\
    \ guess was incorrect.\n   For MODP groups, Section 6.2 gives conditions on the\
    \ group to make\n   sure that this criterion is met.  For other groups (for example,\n\
    \   Elliptic Curve groups), some other means of ensuring this must be\n   employed.\
    \  The standard way of expressing Elliptic Curve public\n   values does not meet\
    \ this criterion, as a valid Elliptic Curve X\n   coordinate can be distinguished\
    \ from a random string with probability\n   of approximately 0.5.\n   A future\
    \ document might introduce a group representation, and/or a\n   slight modification\
    \ of the password encryption scheme, so that\n   Elliptic Curve groups can be\
    \ accommodated.  [BR02] presents several\n   alternative solutions for this problem.\n"
- title: 8.3.  Resistance to Active Attacks
  contents:
  - "8.3.  Resistance to Active Attacks\n   An attacker, impersonating either the\
    \ peer or the server, can always\n   try to enumerate all possible passwords,\
    \ for example by using a\n   dictionary.  To counter this likely attack vector,\
    \ both peer and\n   server MUST implement rate-limiting mechanisms.  We note that\
    \ locking\n   out the other party after a small number of tries would create a\n\
    \   trivial denial-of-service opportunity.\n"
- title: 8.4.  Identity Protection, Anonymity, and Pseudonymity
  contents:
  - "8.4.  Identity Protection, Anonymity, and Pseudonymity\n   By default, the EAP-EKE-ID\
    \ exchange is unprotected, and an\n   eavesdropper can observe both parties' identities.\
    \  A future\n   extension of this protocol may support anonymity, e.g., by allowing\n\
    \   the server to send a temporary identity to the peer at the end of the\n  \
    \ exchange, so that the peer can use that identity in subsequent\n   exchanges.\n\
    \   EAP-EKE differs in this respect from tunneled methods, which\n   typically\
    \ provide unconditional identity protection to the peer by\n   encrypting the\
    \ identity exchange, but reveal information in the\n   server certificate.  It\
    \ is possible to use EAP-EKE as the inner\n   method in a tunneled EAP method\
    \ in order to achieve this level of\n   identity protection.\n"
- title: 8.5.  Password Processing and Long-Term Storage
  contents:
  - "8.5.  Password Processing and Long-Term Storage\n   This document recommends\
    \ that a password-equivalent (a hash of the\n   password) be stored instead of\
    \ the cleartext password.  While this\n   solution provides a measure of security,\
    \ there are also tradeoffs\n   related to algorithm agility:\n   o  Each stored\
    \ password must identify the hash function that was used\n      to compute the\
    \ stored value.\n   o  Complex deployments and migration scenarios might necessitate\n\
    \      multiple stored passwords, one per each algorithm.\n   o  Changing the\
    \ algorithm can require, in some cases, that the users\n      manually change\
    \ their passwords.\n   The reader is referred to Section 10 of [RFC3629] for security\n\
    \   considerations related to the parsing and processing of UTF-8\n   strings.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   Much of this document was unashamedly picked from [RFC5931]\
    \ and\n   [EAP-SRP], and we would like to acknowledge the authors of these\n \
    \  documents: Dan Harkins, Glen Zorn, James Carlson, Bernard Aboba, and\n   Henry\
    \ Haverinen.  We would like to thank David Jacobson, Steve\n   Bellovin, Russ\
    \ Housley, Brian Weis, Dan Harkins, and Alexey Melnikov\n   for their useful comments.\
    \  Lidar Herooty and Idan Ofrat implemented\n   this protocol and helped us improve\
    \ it by asking the right questions,\n   and we would like to thank them both.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2104]           Krawczyk, H., Bellare, M.,\
    \ and R. Canetti, \"HMAC:\n                       Keyed-Hashing for Message Authentication\"\
    ,\n                       RFC 2104, February 1997.\n   [RFC2119]           Bradner,\
    \ S., \"Key words for use in RFCs to\n                       Indicate Requirement\
    \ Levels\", BCP 14, RFC 2119,\n                       March 1997.\n   [RFC2548]\
    \           Zorn, G., \"Microsoft Vendor-specific RADIUS\n                   \
    \    Attributes\", RFC 2548, March 1999.\n   [RFC3454]           Hoffman, P. and\
    \ M. Blanchet, \"Preparation of\n                       Internationalized Strings\
    \ (\"stringprep\")\",\n                       RFC 3454, December 2002.\n   [RFC3526]\
    \           Kivinen, T. and M. Kojo, \"More Modular\n                       Exponential\
    \ (MODP) Diffie-Hellman groups for\n                       Internet Key Exchange\
    \ (IKE)\", RFC 3526, May 2003.\n   [RFC3629]           Yergeau, F., \"UTF-8, a\
    \ transformation format of\n                       ISO 10646\", STD 63, RFC 3629,\
    \ November 2003.\n   [RFC3748]           Aboba, B., Blunk, L., Vollbrecht, J.,\
    \ Carlson,\n                       J., and H. Levkowetz, \"Extensible Authentication\n\
    \                       Protocol (EAP)\", RFC 3748, June 2004.\n   [RFC4013] \
    \          Zeilenga, K., \"SASLprep: Stringprep Profile for\n                \
    \       User Names and Passwords\", RFC 4013,\n                       February\
    \ 2005.\n   [RFC4282]           Aboba, B., Beadles, M., Arkko, J., and P. Eronen,\n\
    \                       \"The Network Access Identifier\", RFC 4282,\n       \
    \                December 2005.\n   [RFC4514]           Zeilenga, K., \"Lightweight\
    \ Directory Access\n                       Protocol (LDAP): String Representation\
    \ of\n                       Distinguished Names\", RFC 4514, June 2006.\n   [RFC5891]\
    \           Klensin, J., \"Internationalized Domain Names in\n               \
    \        Applications (IDNA): Protocol\", RFC 5891,\n                       August\
    \ 2010.\n   [RFC5996]           Kaufman, C., Hoffman, P., Nir, Y., and P. Eronen,\n\
    \                       \"Internet Key Exchange Protocol Version 2\n         \
    \              (IKEv2)\", RFC 5996, September 2010.\n   [SHA]               National\
    \ Institute of Standards and Technology,\n                       U.S. Department\
    \ of Commerce, \"Secure Hash\n                       Standard\", NIST FIPS 180-3,\
    \ October 2008.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [BM92]              Bellovin, S. and M. Merritt,\
    \ \"Encrypted Key\n                       Exchange: Password-Based Protocols Secure\
    \ Against\n                       Dictionary Attacks\", Proc. IEEE Symp. on Research\n\
    \                       in Security and Privacy , May 1992.\n   [BM93]       \
    \       Bellovin, S. and M. Merritt, \"Augmented Encrypted\n                 \
    \      Key Exchange: A Password-Based Protocol Secure\n                      \
    \ against Dictionary Attacks and Password File\n                       Compromise\"\
    , Proc. 1st ACM Conference on Computer\n                       and Communication\
    \ Security , 1993.\n   [BMP00]             Boyko, V., MacKenzie, P., and S. Patel,\
    \ \"Provably\n                       Secure Password Authenticated Key Exchange\
    \ Using\n                       Diffie-Hellman\", Advances in Cryptology,\n  \
    \                     EUROCRYPT 2000 , 2000.\n   [BR02]              Black, J.\
    \ and P. Rogaway, \"Ciphers with Arbitrary\n                       Finite Domains\"\
    , Proc. of the RSA Cryptographer's\n                       Track (RSA CT '02),\
    \ LNCS 2271 , 2002.\n   [EAP-SRP]           Carlson, J., Aboba, B., and H. Haverinen,\
    \ \"EAP\n                       SRP-SHA1 Authentication Protocol\", Work\n   \
    \                    in Progress, July 2001.\n   [JAB96]             Jablon, D.,\
    \ \"Strong Password-Only Authenticated\n                       Key Exchange\"\
    , ACM Computer Communications\n                       Review Volume 1, Issue 5,\
    \ October 1996.\n   [LUC97]             Lucks, S., \"Open Key Exchange: How to\
    \ Defeat\n                       Dictionary Attacks Without Encrypting Public\n\
    \                       Keys\", Proc. of the Security Protocols\n            \
    \           Workshop LNCS 1361, 1997.\n   [NIST.800-90.2007]  National Institute\
    \ of Standards and Technology,\n                       \"Recommendation for Random\
    \ Number Generation\n                       Using Deterministic Random Bit Generators\n\
    \                       (Revised)\", NIST SP 800-90, March 2007.\n   [PA97]  \
    \            Patel, S., \"Number Theoretic Attacks On Secure\n               \
    \        Password Schemes\", Proceedings of the 1997 IEEE\n                  \
    \     Symposium on Security and Privacy , 1997.\n   [RFC4017]           Stanley,\
    \ D., Walker, J., and B. Aboba,\n                       \"Extensible Authentication\
    \ Protocol (EAP) Method\n                       Requirements for Wireless LANs\"\
    , RFC 4017,\n                       March 2005.\n   [RFC4086]           Eastlake,\
    \ D., Schiller, J., and S. Crocker,\n                       \"Randomness Requirements\
    \ for Security\", BCP 106,\n                       RFC 4086, June 2005.\n   [RFC5209]\
    \           Sangster, P., Khosravi, H., Mani, M., Narayan,\n                 \
    \      K., and J. Tardo, \"Network Endpoint Assessment\n                     \
    \  (NEA): Overview and Requirements\", RFC 5209,\n                       June\
    \ 2008.\n   [RFC5226]           Narten, T. and H. Alvestrand, \"Guidelines for\n\
    \                       Writing an IANA Considerations Section in RFCs\",\n  \
    \                     BCP 26, RFC 5226, May 2008.\n   [RFC5869]           Krawczyk,\
    \ H. and P. Eronen, \"HMAC-based Extract-\n                       and-Expand Key\
    \ Derivation Function (HKDF)\",\n                       RFC 5869, May 2010.\n\
    \   [RFC5931]           Harkins, D. and G. Zorn, \"Extensible\n              \
    \         Authentication Protocol (EAP) Authentication\n                     \
    \  Using Only a Password\", RFC 5931, August 2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Yaron Sheffer\n   Independent\n   EMail: yaronf.ietf@gmail.com\n\
    \   Glen Zorn\n   Network Zen\n   227/358 Thanon Sanphawut\n   Bang Na, Bangkok\
    \  10260\n   Thailand\n   Phone: +66 (0) 87-040-4617\n   EMail: gwz@net-zen.net\n\
    \   Hannes Tschofenig\n   Nokia Siemens Networks\n   Linnoitustie 6\n   Espoo\
    \  02600\n   Finland\n   Phone: +358 (50) 4871445\n   EMail: Hannes.Tschofenig@gmx.net\n\
    \   URI:   http://www.tschofenig.priv.at\n   Scott Fluhrer\n   Cisco Systems.\n\
    \   1414 Massachusetts Ave.\n   Boxborough, MA  01719\n   USA\n   EMail: sfluhrer@cisco.com\n"
