- title: __initial_text__
  contents:
  - '                        Handle System Overview

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   Several groups within the IETF and IRTF have discussed the Handle\n\
    \   System and its relationship to existing systems of identifiers.  The\n   IESG\
    \ wishes to point out that these discussions have not resulted in\n   IETF consensus\
    \ on the described Handle System, nor on how it might\n   fit into the IETF architecture\
    \ for identifiers.  Though there has\n   been discussion of handles as a form\
    \ of URI, specifically as a URN,\n   these documents describe an alternate view\
    \ of how namespaces and\n   identifiers might work on the Internet and include\
    \ characterizations\n   of existing systems which may not match the IETF consensus\
    \ view.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides an overview of the Handle System in terms\
    \ of\n   its namespace and service architecture, as well as its relationship\n\
    \   to other Internet services such as DNS, LDAP/X.500, and URNs.  The\n   Handle\
    \ System is a general-purpose global name service that allows\n   secured name\
    \ resolution and administration over networks such as the\n   Internet.  The Handle\
    \ System manages handles, which are unique names\n   for digital objects and other\
    \ Internet resources.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Motivations. . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  6\n   3.  Handle Namespace . . . . . . . . . . . . . . . . . . .\
    \ . . . .  7\n   4.  Handle System Architecture . . . . . . . . . . . . . . .\
    \ . . .  8\n   5.  Handle System Security . . . . . . . . . . . . . . . . . .\
    \ . . 11\n   6.  The Handle System and other Internet Services. . . . . . . .\
    \ . 12\n       6.1.  Domain Name Service (DNS). . . . . . . . . . . . . . . .\
    \ 13\n       6.2.  Directory Services (X.500/LDAP). . . . . . . . . . . . . 13\n\
    \       6.3.  Uniform Resource Identifier (URI)/Uniform Resource Name\n      \
    \       (URN). . . . . . . . . . . . . . . . . . . . . . . . . . 14\n   7.  Security\
    \ Considerations. . . . . . . . . . . . . . . . . . . . 15\n       7.1.  General\
    \ Security Practice. . . . . . . . . . . . . . . . 15\n       7.2.  Privacy Protection\
    \ . . . . . . . . . . . . . . . . . . . 16\n       7.3.  Caching and Proxy Servers.\
    \ . . . . . . . . . . . . . . . 16\n       7.4.  Mirroring. . . . . . . . . .\
    \ . . . . . . . . . . . . . . 17\n       7.5.  Denial of Service (DoS). . . .\
    \ . . . . . . . . . . . . . 17\n   8.  History of the Handle System . . . . .\
    \ . . . . . . . . . . . . 18\n   9.  Acknowledgements . . . . . . . . . . . .\
    \ . . . . . . . . . . . 18\n   10. References and Bibliography. . . . . . . .\
    \ . . . . . . . . . . 19\n   11. Authors' Addresses . . . . . . . . . . . . .\
    \ . . . . . . . . . 20\n   12. Full Copyright Statement . . . . . . . . . . .\
    \ . . . . . . . . 21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides an overview of the Handle System,\
    \ a\n   distributed information system designed to provide an efficient,\n   extensible,\
    \ and secured global name service for use on networks such\n   as the Internet.\
    \  The Handle System includes an open protocol, a\n   namespace, and a reference\
    \ implementation of the protocol.  The\n   protocol enables a distributed computer\
    \ system to store names, or\n   handles, of digital resources and resolve those\
    \ handles into the\n   information necessary to locate, access, and otherwise\
    \ make use of\n   the resources.  These associated values can be changed as needed\
    \ to\n   reflect the current state of the identified resource without changing\n\
    \   the handle.  This allows the name of the item to persist over changes\n  \
    \ of location and other current state information.  Each handle may\n   have its\
    \ own administrator(s) and administration can be done in a\n   distributed environment.\
    \  The Handle System supports secured handle\n   resolution.  Security services\
    \ such as data confidentiality, data\n   integrity, and non-repudiation are provided\
    \ upon client request.\n   The Handle System provides a confederated name service\
    \ that allows\n   any existing local namespace to join the global handle namespace\
    \ by\n   obtaining a unique Handle System naming authority.  Local names and\n\
    \   their value-binding(s) remains intact after joining the Handle\n   System.\
    \  Any handle request to the local namespace may be processed\n   by a service\
    \ interface speaking the Handle System protocol.  Combined\n   with the unique\
    \ naming authority, any local name is guaranteed unique\n   under the global handle\
    \ namespace.\n   There are several services used today to provide name service\
    \ for\n   Internet resources.  Among these, the Domain Name System (DNS) [2,3]\n\
    \   is the most widely used.  DNS is designed \"to provide a mechanism for\n \
    \  naming resources in such a way that the names are mappable into IP\n   addresses\
    \ and are usable in different hosts, networks, protocol\n   families, internets,\
    \ and administrative organizations\" [3].  The\n   growth of the Internet has\
    \ raised demands for various extensions to\n   DNS.  There are also attempts to\
    \ use DNS as a general-purpose\n   resource naming system.  However, the importance\
    \ of DNS in basic\n   network routing has led to great caution in implementing\
    \ any DNS\n   extension or overloading the DNS for general-purpose resource naming.\n\
    \   An additional factor which argues against using DNS as a general-\n   purpose\
    \ naming service is the DNS administrative model.  DNS names\n   are typically\
    \ managed by the network administrator(s) at the DNS zone\n   level.  There is\
    \ no provision for per-name administrative structure\n   and no facilities for\
    \ anyone other than the network administrator to\n   create or manage DNS names.\
    \  This is appropriate for domain name\n   administration, but less so for general-purpose\
    \ resource naming.\n   The Handle System has been designed from the start to serve\
    \ as a\n   general-purpose naming service.  It is designed to accommodate very\n\
    \   large numbers of entities and to allow distributed administration\n   over\
    \ the public Internet.  The Handle System data model allows access\n   control\
    \ to be defined at the level of each of the data values\n   associated with a\
    \ given handle.  Each handle can further define its\n   own set of administrators\
    \ that are independent from the network or\n   host administrator.\n   Traditional\
    \ URLs (Uniform Resource Locators) [4] allow certain\n   Internet resources to\
    \ be named as a combination of a DNS name and\n   local name.  The local name\
    \ may be a local file path, or a reference\n   to some local service (e.g., a\
    \ cgi-bin script).  This combination of\n   a DNS name and a local name provides\
    \ a flexible administrative model\n   for naming and managing individual Internet\
    \ resources.  However, the\n   URL practice also has some key limitations.  Most\
    \ URL schemes (e.g.,\n   http) are defined for resolution only.  Any URL administration\
    \ has to\n   be done either at the local host, or via some other network service\n\
    \   such as NFS.  Using a URL as a name typically ties the Internet\n   resource\
    \ to its current network location.  For example, a URL will be\n   tied to its\
    \ local file path when the file path is part of the URL.\n   When the resource\
    \ moves from one location to another for whatever\n   reason, the URL breaks.\
    \  It is especially difficult to work around\n   this problem when the reason\
    \ for the location change is change in\n   ownership of an asset, as ownership\
    \ is generally reflected in the\n   domain name.\n   The Handle System is designed\
    \ to overcome these limitations and to\n   add significant functionality.  Specifically,\
    \ the Handle System is\n   designed with the following objectives:\n      -  Uniqueness:\
    \ Every handle is globally unique within the Handle\n         System.\n      -\
    \  Persistence: Handles may be used as persistent identifiers for\n         Internet\
    \ resources.  A handle does not have to be derived from\n         the entity that\
    \ it names.  While an existing name, or even a\n         mnemonic, may be included\
    \ in a handle for convenience, the only\n         operational connection between\
    \ a handle and the entity it names\n         is maintained within the Handle System.\
    \  This of course does\n         not guarantee persistence, which is a function\
    \ of\n         administrative care.  But it does allow the same name to\n    \
    \     persist over changes of location, ownership, and other state\n         conditions.\
    \  For example, when a named resource moves from one\n         location to another,\
    \ the handle may be kept valid by updating\n         its value in the Handle System\
    \ to reflect the new location.\n      -  Multiple Instances: A single handle can\
    \ refer to multiple\n         instances of a resource, at different and possibly\
    \ changing\n         locations in a network.  Applications can take advantage\
    \ of\n         this to increase performance and reliability.  For example, a\n\
    \         network service may define multiple entry points for its\n         service\
    \ with a single handle so as to distribute the service\n         load.\n     \
    \ -  Multiple Attributes: A single handle can refer to multiple\n         attributes\
    \ of a resource, including associated services,\n         available through any\
    \ method at different and possibly changing\n         network locations.  Handles\
    \ can thus be used as persistent\n         entry points into an evolving world\
    \ of services associated with\n         identified resources.\n      -  Extensible\
    \ Namespace: Existing local namespaces may join the\n         handle namespace\
    \ by acquiring a unique handle naming authority.\n         This allows local namespaces\
    \ to be introduced into a global\n         context while avoiding conflict with\
    \ existing namespaces.  Use\n         of naming authorities also allows delegation\
    \ of service, both\n         resolution and administration, to a local handle\
    \ service.\n      -  International Support: The handle namespace is based on Unicode\n\
    \         3.0 [17], which includes most of the characters currently used\n   \
    \      around the world.  This allows handles to be used in any native\n     \
    \    environment.  The handle protocol mandates UTF-8 [5] as the\n         encoding\
    \ used for handles.\n      -  Distributed Service Model: The Handle System defines\
    \ a\n         hierarchical service model such that any local handle namespace\n\
    \         may be serviced by a corresponding local handle service, by the\n  \
    \       global service, or by both.  The global service, known as the\n      \
    \   Global Handle Registry, can be used to dispatch any handle\n         service\
    \ request to the responsible local handle service.  The\n         distributed\
    \ service model allows replication of any given\n         service into multiple\
    \ service sites, and each service site may\n         further distribute its service\
    \ into a cluster of individual\n         servers.  (Note that local here refers\
    \ only to namespace and\n         administrative concerns.  A local handle service\
    \ could in fact\n         have many service sites distributed across the Internet.)\n\
    \      -  Secured Name Service: The Handle System allows secured name\n      \
    \   resolution and administration over the public Internet.  The\n         Handle\
    \ System protocol defines standard mechanisms for both\n         client and server\
    \ authentication, as well as service\n         authorization.  It also provides\
    \ security options to assure\n         data integrity and confidentiality.\n \
    \     -  Distributed Administration Service: Each handle may define its\n    \
    \     own administrator(s) or administrator group(s).  Ownership of\n        \
    \ each handle is defined in terms of its administrator or\n         administrator\
    \ groups.  This, combined with the Handle System\n         authentication protocol,\
    \ allows any handle to be managed\n         securely over the public network by\
    \ its administrator at any\n         network location.\n      -  Efficient Resolution\
    \ Service: The handle protocol is designed\n         to allow highly efficient\
    \ name resolution performance.  To\n         avoid resolution being affected by\
    \ computationally costly\n         administration service, separate service interfaces\
    \ (i.e.,\n         server processes and their associated communication ports)\
    \ for\n         handle name resolution and administration may be defined by any\n\
    \         handle service.\n   This document provides an overview of the handle\
    \ namespace and\n   service architecture.  It also compares the Handle System\
    \ with other\n   existing Internet services, protocols, and specifications (e.g.,\
    \ DNS\n   [2, 3], URLs [4], X.500/LDAP [6,7,8], and URN [9,10]).  Details of\n\
    \   the handle system data and service model, as well as its\n   communication\
    \ protocol, are specified in separate documents.  They\n   can be found under\
    \ the Handle System website at\n   http://www.handle.net.\n"
- title: 2.  Motivations
  contents:
  - "2.  Motivations\n   Since there are a number of name related projects in the\
    \ Internet\n   community, it is worth defining exactly where we believe the Handle\n\
    \   System fits.  Unfortunately, that is particularly hard because the\n   other\
    \ primary naming schemes either take an abstract services\n   approach (e.g.,\
    \ URI/URN), or an approach to name resolution absent of\n   a self-contained framework\
    \ for reliable yet distributed\n   administration of the underlying databases\
    \ (e.g., DNS).  This makes\n   categorizing the Handle System difficult.\n   The\
    \ Handle System crosses boundaries.  Looked at as a name resolution\n   system,\
    \ it might be compared to DNS.  If used to implement a URI/URN\n   namespace,\
    \ it could be used with any URI/URN scheme.  If used for\n   distributed information\
    \ updates and administration, it could be\n   considered a simplified-version\
    \ of a distributed database system.\n   It is probably best to view the Handle\
    \ System as a name-attribute\n   binding service with a specific protocol for\
    \ securely creating,\n   updating, maintaining, and accessing a distributed database.\
    \  It is\n   designed to be an enabling service for secured information and\n\
    \   resource sharing over networks such as the public Internet.\n   Applications\
    \ of the Handle System could include meta-data services\n   for digital publications,\
    \ identity management services for virtual\n   identities, or any other applications\
    \ that require resolution and/or\n   administration of globally unique identifiers.\n\
    \   In the spirit of exploration, the Handle System has been designed to\n   have\
    \ high performance for name resolution and to push the boundaries\n   of distributed\
    \ access control and administration.  Unlike most\n   conventional systems (even\
    \ distributed systems) that are designed to\n   have a relatively small number\
    \ of broadly empowered administrators,\n   the Handle System allows extremely\
    \ fine granularity of administrative\n   control.  It has a unique self-contained\
    \ administrative framework\n   that de-couples the ownership of each handle from\
    \ the system\n   administrators and allows access control to be defined for each\n\
    \   handle value.\n   It should be noted, that as with all real systems, the Handle\
    \ System\n   is a compromise between a number of technical and practical concerns.\n\
    \   There are also different opinions within the IETF on where the Handle\n  \
    \ System fits in relation to other existing Internet name services.  It\n   is\
    \ with the goal of exposing a broader community to the concepts,\n   approach,\
    \ specific decisions, tradeoffs and results that we are\n   writing this RFC.\n"
- title: 3.  Handle Namespace
  contents:
  - "3.  Handle Namespace\n   Every handle consists of two parts: its naming authority,\
    \ otherwise\n   known as its prefix, and a unique local name under the naming\n\
    \   authority, otherwise known as its suffix:\n      <Handle> ::= <Handle Naming\
    \ Authority> \"/\" <Handle Local Name>\n   The naming authority and local name\
    \ are separated by the ASCII\n   character \"/\".  The collection of local names\
    \ under a naming\n   authority defines the local handle namespace for that naming\n\
    \   authority.  Any local name must be unique under its local namespace.\n   The\
    \ uniqueness of a naming authority and a local name under that\n   authority ensures\
    \ that any handle is globally unique within the\n   context of the Handle System.\n\
    \   For example, \"10.1045/january99-bearman\" is a handle for an article\n  \
    \ published in D-Lib magazine [12].  Its naming authority is \"10.1045\"\n   and\
    \ its local name is \"january99-bearman\".  The handle namespace can\n   be considered\
    \ a superset of many local namespaces, with each local\n   namespace having a\
    \ unique naming authority under the Handle System.\n   The naming authority identifies\
    \ the administrative unit of creation,\n   although not necessarily continuing\
    \ administration, of the associated\n   handles.  Each naming authority is guaranteed\
    \ to be globally unique\n   within the Handle System.  Any existing local namespace\
    \ can join the\n   global handle namespace by obtaining a unique naming authority\
    \ so\n   that any local name under the namespace can be globally referenced as\n\
    \   a combination of the naming authority and the local name as shown\n   above.\n\
    \   Naming authorities under the Handle System are defined in a\n   hierarchical\
    \ fashion resembling a tree structure.  Each node and leaf\n   of the tree is\
    \ given a label that corresponds to a naming authority\n   segment.  The parent\
    \ node notifies the parent naming authority of its\n   child nodes.  Unlike DNS,\
    \ handle naming authorities are constructed\n   left to right, concatenating the\
    \ labels from the root of the tree to\n   the node that represents the naming\
    \ authority.  Each label is\n   separated by the octet used for ASCII character\
    \ \".\" (0x2E).  For\n   example, a naming authority for the National Digital\
    \ Library Program\n   (\"ndlp\") at the Library of Congress (\"loc\") is defined\
    \ as \"loc.ndlp\".\n   Each naming authority may have many child naming authorities\n\
    \   registered underneath.  Any child naming authority can only be\n   registered\
    \ by its parent after its parent naming authority has been\n   registered.  However,\
    \ there is no intrinsic administrative\n   relationship between the namespaces\
    \ represented by the parent and\n   child naming authorities.  The parent namespace\
    \ and its child\n   namespaces may be served by different handle services, and\
    \ they may\n   or may not share any administration privileges.\n   Handles may\
    \ consist of any printable characters from the Universal\n   Character Set (UCS-2)\
    \ of ISO/IEC 10646, which is the exact character\n   set defined by Unicode v3.0\
    \ [17].  The UCS-2 character set\n   encompasses most characters used in every\
    \ major language written\n   today.  To allow compatibility with most of the existing\
    \ systems and\n   to prevent ambiguity among different encodings, the Handle System\n\
    \   protocol mandates UTF-8 to be the only encoding used for handles.\n   The\
    \ UTF-8 encoding preserves any ASCII encoded names so as to allow\n   maximum\
    \ compatibility with existing systems without causing naming\n   conflict.  Some\
    \ encoding issues over the global namespace and the\n   choice of UTF-8 encoding\
    \ are discussed in [13].\n   By default, handles are case sensitive.  However,\
    \ any individual\n   handle service may define its namespace such that ASCII characters\n\
    \   within any handle under that namespace are case insensitive.\n"
- title: 4.  Handle System Architecture
  contents:
  - "4.  Handle System Architecture\n   The Handle System defines a hierarchical service\
    \ model.  The top\n   level consists of a single handle service, known as the\
    \ Global Handle\n   Registry (GHR).  The lower level consists of all other handle\n\
    \   services, generically known as Local Handle Services (LHS).\n   The Global\
    \ Handle Registry can be used to manage any handle\n   namespace.  It is unique\
    \ among handle services only in that it\n   provides the service used to manage\
    \ naming authorities, all of which\n   are managed as handles.  The naming authority\
    \ handle provides\n   information that clients can use to access and utilize the\
    \ local\n   handle service for handles under the naming authority.\n   Local Handle\
    \ Services are intended to be hosted by organizations with\n   administrative\
    \ responsibility for handles under certain naming\n   authorities.  A Local Handle\
    \ Service may be responsible for any\n   number of local handle namespaces, each\
    \ identified by a unique naming\n   authority.  The Local Handle Service and its\
    \ responsible set of local\n   handle namespaces must be registered with the Global\
    \ Handle Registry.\n   One important aspect of the Handle System is its distributed\n\
    \   architecture.  The Handle System as a whole consists of a number of\n   individual\
    \ handle services.  Each of these services may consist of\n   one or more service\
    \ sites.  Each service site is a complete\n   replication of every other site\
    \ in the service in terms of handle\n   resolution.  Each service site may consist\
    \ of one or more handle\n   servers.  All handles, and hence all handle requests,\
    \ directed at a\n   given service site will be evenly distributed across these\
    \ handle\n   servers.  The Handle System as a whole may consist of any number\
    \ of\n   handle services.  There are no design limits on the number of handle\n\
    \   services or on the number of sites which make up each service, nor\n   are\
    \ there any limits on the number of servers that make up each site.\n   Replication\
    \ among any service site does not require that each site\n   contain the same\
    \ number of servers.  In other words, while each site\n   will have the same replicated\
    \ set of handles, each site may allocate\n   that set of handles across a different\
    \ number of servers.  This\n   distributed approach is intended to aid scalability,\
    \ accommodate any\n   large-scale of operation, and mitigate problems of single\
    \ point\n   failure.\n   Figure 3.1 illustrates a potential handle service that\
    \ consists of\n   two service sites: one located on the U.S. east coast and the\
    \ other\n   on the U.S. west coast.  The east coast service site consists of four\n\
    \   server computers.  The west coast service site, with more powerful\n   computers\
    \ deployed, decides two servers will suffice.  The number of\n   service sites\
    \ for any handle service, as well as the number of\n   servers that are used by\
    \ any service site, may be added or removed\n   dynamically depending on the service\
    \ requirement.\n       -------------------------              ------------------\n\
    \      |  ---------   ---------  |            |  -----    -----  |\n      | |\
    \         | |         | |            | |  S  |  |  S  | |\n      | | server1 |\
    \ | server2 | |            | |  E  |  |  E  | |\n      | |         | |       \
    \  | |            | |  R  |  |  R  | |\n      |  ---------   ---------  |    \
    \        | |  V  |  |  V  | |\n      |  ---------   ---------  |            |\
    \ |  E  |  |  E  | |\n      | |         | |         | |            | |  R  | \
    \ |  R  | |\n      | | Server3 | | Server4 | |            | |     |  |     | |\n\
    \      | |         | |         | |            | |  1  |  |  2  | |\n      |  ---------\
    \   ---------  |            |  -----    -----  |\n       -------------------------\
    \               ------------------\n         Handle Service Site 1           \
    \     Handle Service Site 2\n            (US East Coast)                     (US\
    \ West Coast)\n       Figure 3.1: Handle service configured with two service sites\n\
    \   Each handle service manages a distinct sub-namespace under the Handle\n  \
    \ System.  Namespaces under different handle services may not overlap.\n   The\
    \ sub-namespace typically consists of handles under a number of\n   naming authorities.\
    \  The handle service is called the \"home\" service\n   of these naming authorities\
    \ and is the only one that provides\n   resolution and administration service\
    \ for handles under these naming\n   authorities.  Before resolving a handle,\
    \ a client has to determine\n   the \"home\" service of the handle in question.\
    \  The \"home\" service of\n   each handle is the \"home\" service of its naming\
    \ authority and is\n   registered at the Global Handle Registry.  Clients can\
    \ find the\n   \"home\" service for each handle by querying the naming authority\n\
    \   handle at the Global Handle Registry.\n   The Global Handle Registry maintains\
    \ naming authority handles.  Each\n   naming authority handle maintains the service\
    \ information that\n   describes the \"home\" service of the naming authority.\
    \  The service\n   information lists the service sites of the given handle service,\
    \ as\n   well as the interface to each handle server within each site.  To\n \
    \  find the \"home\" service for any handle, a client can query the Global\n \
    \  Handle Registry for the service information associated with the\n   corresponding\
    \ naming authority handle.  The service information\n   provides the necessary\
    \ information for clients to communicate with\n   the \"home\" service.\n   Figure\
    \ 3.2 shows an example of a typical handle resolution process.\n   In this case,\
    \ the \"home\" service is a Local Handle Service.  The\n   client is trying to\
    \ resolve the handle \"10.1045/july95-arms\" and has\n   to find its \"home\"\
    \ service from the Global Handle Registry.  The\n   \"home\" service can be found\
    \ by sending a query to the Global Handle\n   Registry for the naming authority\
    \ handle for \"10.1045\".  The Global\n   Handle Registry returns the service\
    \ information of the Local Handle\n   Service that is responsible for handles\
    \ under the naming authority\n   \"10.1045\".  The service information allows\
    \ the client to communicate\n   with the Local Handle Service to resolve the handle\
    \ \"10.1045/july95-\n   arms\".\n       ------------------------\n      |    \
    \                    |    4. Result of client request\n      | Client with global\
    \     |  <-------------------------------.\n      |  service information   | \
    \                                 |\n      |                        |  ----------------------------.\
    \   |\n       ------------------------     3. Request to responsible |   |\n \
    \                |   ^                 Local Handle Service   |   |\n     1. Client\
    \   |   |                                        |   |\n     query for   |   |\
    \                                        |   |\n     naming      |   | 2. Service\
    \ information                 |   |\n     authority   |   |    for \"10.1045\"\
    \                       V   |\n     \"10.1045\"   |   |                      \
    \    ----------------------\n                 |   |                         |\
    \                      |\n                 V   |                         | Local\
    \ Handle Service |\n            ---------------                    | responsible\
    \ for the  |\n           |               |                   | naming authority\
    \     |\n           | Global Handle |                   | \"10.1045\"        \
    \    |\n           |   Registry    |                   |                     \
    \ |\n           |               |                    ----------------------\n\
    \            ---------------\n               Figure 3.2: Handle resolution starting\
    \ with global\n   To improve resolution performance, any client may choose to\
    \ cache the\n   service information returned from the Global Handle Registry and\
    \ use\n   it for subsequent queries.  A separate handle caching server, either\n\
    \   stand-alone or as a piece of a general caching mechanism, may also be\n  \
    \ used to provide shared caching within a local community.  Given a\n   cached\
    \ resolution result, subsequent queries of the same handle may\n   be answered\
    \ locally without contacting any handle service.  Given\n   cached service information,\
    \ clients can send their requests directly\n   to the correct Local Handle Service\
    \ without contacting the Global\n   Handle Registry.\n"
- title: 5.  Handle System Security
  contents:
  - "5.  Handle System Security\n   The Handle System provides handle resolution and\
    \ administration\n   service over networks such as the public Internet.  Each\
    \ handle can\n   be assigned a set of values.  Clients use the handle resolution\n\
    \   service to resolve any handle into its set of values.  Each value has\n  \
    \ a data type and a unique value index.  Clients can query for specific\n   handle\
    \ values based on data type or value index.\n   The handle administration service\
    \ answers requests from clients to\n   manage handles.  These include adding handles,\
    \ deleting handles or\n   updating their values.  It also manages naming authorities\
    \ via naming\n   authority handles.  Each handle can have its own administrator(s),\n\
    \   and each administrator can be granted a certain set of permissions.\n   The\
    \ handle system authentication protocol authenticates the handle\n   administrator\
    \ before fulfilling any administrative request.\n   The Handle System provides\
    \ security services such as client and\n   server authentication, data confidentiality\
    \ and integrity, and non-\n   repudiation.  By default, handle resolution does\
    \ not require any\n   client authentication.  However, resolution requests for\
    \ confidential\n   data assigned to any handle (by its administrator), as well\
    \ as any\n   administration requests (e.g., adding or deleting handle values)\n\
    \   require authentication of the client for proper authorization.  The\n   server\
    \ will decide, during the authorization process, whether or not\n   the client\
    \ has permission to access those confidential handle values,\n   or has permission\
    \ to add or update handles and handle values.  When\n   authentication is required,\
    \ the handle server will issue a challenge\n   to the requesting client before\
    \ carrying out the client's request.\n   To satisfy the authentication requirement,\
    \ the client must send back\n   the correct response identifying itself as a qualified\
    \ administrator.\n   The handle server will respond to the initial request only\
    \ after\n   successful authentication of the client.  Handle clients may choose\n\
    \   to use either secret key or public key cryptography for\n   authentication.\
    \  Handle System authentication can also be carried out\n   via third party authentication\
    \ services.  To ensure data integrity,\n   clients may request digitally signed\
    \ responses from any handle\n   server.  They may also set up secured communication\
    \ sessions with\n   handle servers so that any exchanged information can be encrypted\n\
    \   (for data confidentiality) using a session key.  Handle servers can\n   also\
    \ provide confidentiality by encrypting the handle data before\n   sending it\
    \ to the client.\n   The Handle System provides service options for secured information\n\
    \   exchange between the client and server.  This does not, of course,\n   guarantee\
    \ the truthfulness of handle values.  Incorrect values\n   assigned to any handle\
    \ by its administrator may very well mislead\n   clients.  On the other hand,\
    \ a handle value may contain references to\n   other handle values to provide\
    \ additional credentials.  For example,\n   a handle value R (e.g., a claim) may\
    \ contain a reference to some\n   other handle value that contains the digital\
    \ signature (from a\n   creditable source) upon the value R.  Clients who trust\
    \ the signature\n   could then trust the handle value R.\n"
- title: 6.  The Handle System and other Internet Services
  contents:
  - "6.  The Handle System and other Internet Services\n   There are a number of existing\
    \ and proposed Internet identifier\n   services or specifications that, by design\
    \ or intent, cover some of\n   the functionalities proposed for the Handle System.\
    \  This section\n   briefly reviews them in relationship to the Handle System.\n"
- title: 6.1.  Domain Name Service (DNS)
  contents:
  - "6.1.  Domain Name Service (DNS)\n   The Domain Name Service, or DNS, was originally\
    \ designed and is\n   heavily used for mapping domain names into IP Addresses\
    \ for network\n   routing purposes.  RFC 1034 [2] and RFC 1035 [3] provide detailed\n\
    \   descriptions of its design and implementation.  The growth of the\n   Internet\
    \ has increased demands for various extensions to DNS, even\n   its possible use\
    \ as a general purpose resource naming system.\n   However, any such use has the\
    \ potential to slow down the network\n   address translation and/or affect its\
    \ effectiveness in network\n   routing.  DNS implementations typically do not\
    \ scale well when a\n   large amount of data is associated with any particular\
    \ DNS name.  It\n   is therefore generally considered inappropriate to use DNS\
    \ as a\n   general-purpose naming service.\n   An additional factor that argues\
    \ against using DNS as a general-\n   purpose naming service is the DNS administrative\
    \ model.  DNS names\n   are typically managed by the network administrator(s)\
    \ at the DNS zone\n   level.  There is no provision for a per-name administrative\n\
    \   structure.  No facilities are provided for anyone other than network\n   administrators\
    \ to create or manage DNS names.  This is appropriate\n   for domain name administration\
    \ but less so for general-purpose name\n   administration.\n   The Handle System\
    \ differs from DNS in its distributed administration\n   and service model, as\
    \ well as its security features.  The handle\n   system protocol includes security\
    \ options to assure confidentiality\n   and integrity during data transmission.\
    \  Each handle can have its own\n   administrator, independent from the server\
    \ administrator.  The handle\n   system protocol allows any handle administrator\
    \ to manage his or her\n   handles securely over the public network.  Additionally,\
    \ the Handle\n   System service model allows any of its service sites to dynamically\n\
    \   configure its service distribution among a cluster of servers to\n   accommodate\
    \ increased service requests.  This also allows less\n   powerful computers to\
    \ be used together to support any arbitrarily\n   large number of handles.\n"
- title: 6.2.  Directory Services (X.500/LDAP)
  contents:
  - "6.2.  Directory Services (X.500/LDAP)\n   X.500 [6] is the OSI Directory Standard\
    \ defined by the ISO and the\n   ITU.  It is designed \"to provide a white pages\
    \ service that would\n   return either the telephone numbers or X.400 O/R addresses\
    \ of\n   people\", and is \"concerned mainly with providing the name server\n\
    \   service for Open Systems Interconnection (OSI) applications\" [7].\n   X.500\
    \ defines a hierarchical data and information model with a set of\n   protocols\
    \ to allow global name lookup and search.  The protocol,\n   however, has proved\
    \ difficult to implement and there has been\n   difficulty in getting \"client\
    \ access integrated into existing\n   products\" [14].  LDAP (Lightweight Directory\
    \ Access Protocol) [8] has\n   overcome many of these difficulties by making the\
    \ protocol simpler\n   and easier to implement.  Some concern remains, however,\
    \ that as LDAP\n   is emerging from a local directory access protocol (LDAP v2)\
    \ into a\n   distributed service protocol (LDAP v3), it faces many issues not\n\
    \   addressed in its original design, resulting in new complications.\n   The\
    \ fundamental difference between a name resolution service such as\n   the Handle\
    \ System, and a directory service such as LDAP, is search\n   capability.  The\
    \ added functionality of being able to search a\n   directory service necessarily\
    \ carries with it added complexity, thus\n   affects its efficiency.  A pure name\
    \ service, such as the Handle\n   System, can be designed solely around efficient\
    \ resolution of known\n   items without addressing functions and data structures\
    \ required for\n   discovery of unknown items based on incomplete criteria.\n\
    \   Directory services, such as LDAP or WHOIS++ [15,16], may be used in\n   tandem\
    \ with the Handle System to provide reverse lookup service.\n   Existing corporate\
    \ directory services, for example, could provide\n   interfaces to both services.\
    \  The Handle System interface would\n   provide a highly efficient name resolution\
    \ service.  The directory\n   service interface would provide extended search\
    \ capability.  Handles\n   could also be used in LDAP service referral.  For example,\
    \ an LDAP\n   service may be referenced as a handle.  Doing so will make the\n\
    \   reference persistent overtime, independent of location change.\n"
- title: 6.3.  Uniform Resource Identifier (URI)/Uniform Resource Name(URN)
  contents:
  - "6.3.  Uniform Resource Identifier (URI)/Uniform Resource Name(URN)\n   Uniform\
    \ Resource Identifier (URI) [23] defines a uniform, yet\n   extensible naming\
    \ mechanism for identifying Internet resources in web\n   applications.  Uniform\
    \ Resource Name (URN) [11], a subset of URI,\n   defines a namespace registration\
    \ mechanism for persistent namespaces\n   under URI.  URI/URN represents most\
    \ of the Internet name services\n   used in web applications.  This section discusses\
    \ the relationship of\n   the Handle System to URI/URN and how applications may\
    \ utilize the\n   Handle System within the URI/URN context.\n   The Handle System\
    \ provides a general-purpose name service for the\n   Internet.  Like DNS or X.500\
    \ directory service, the Handle System\n   defines its namespace outside of any\
    \ URI/URN namespace.  Handles can\n   be transcribed and resolved directly, without\
    \ any URI/URN scheme as a\n   prefix.  For example, a library application may\
    \ resolve the handle\n   \"10.1045/july95-arms\" directly into its set of handle\
    \ values.  No\n   URI/URN scheme will be needed in this case.\n   The Handle System\
    \ may be used for applications that require a\n   persistent name service.  The\
    \ Handle System provides the necessary\n   mechanisms to allow persistent names\
    \ to be registered as handles.\n   Specific naming authorities may be defined\
    \ to host those handles\n   designed to be persistent.  However, the persistence\
    \ of handles\n   depends more on administrative policies than the technology itself.\n\
    \   Such policies are beyond the Handle System service, as described in\n   this\
    \ set of documents.\n   On the other hand, the Handle System can also be used\
    \ for\n   applications where persistent names are not required.  Such handles\n\
    \   may have a short life-time and they may also be used to identify\n   different\
    \ objects at different times.\n   Different web applications may be developed\
    \ using the Handle System\n   as the underlying name service.  Each of these applications\
    \ may\n   define its own URI/URN namespace for its application needs.  For\n \
    \  example, application FOO may have a URI namespace \"foo:\" registered\n   to\
    \ identify any FOO services on the web.  In the mean time,\n   application BAR\
    \ may have a URN namespace \"URN:BAR\" registered to\n   identify any BAR object\
    \ that needs a persistent name.  Both FOO and\n   BAR applications may use handles\
    \ (under their respective naming\n   authority) in naming and resolving to services\
    \ and/or objects.  This\n   is similar in DNS, where there are different URI schemes\
    \ (e.g.,\n   \"telnet\", \"ftp\", \"mailto\", etc.) defined for different applications,\n\
    \   all using the DNS service.\n   The IETF and IRTF have discussed the Handle\
    \ System in the realm of\n   URI-related work.  There are different opinions on\
    \ whether the Handle\n   System will fit into a specific URI or URN namespace.\
    \  There are also\n   concerns on where the Handle System fits in relation to\
    \ other\n   existing name services on the Internet.  Such discussions are out\
    \ of\n   the scope of this document.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This section is meant to inform people of security\
    \ limitations of the\n   Handle System, as well as precautions that should be\
    \ taken by\n   application developers, service providers, and Handle System clients.\n\
    \   Specific security considerations regarding the Handle System protocol\n  \
    \ [21], as well as its data and service model [22], are addressed in\n   separate\
    \ documents.\n"
- title: 7.1.  General Security Practice
  contents:
  - "7.1.  General Security Practice\n   The security of the Handle System depends\
    \ on both client and server\n   host security at every step in the transaction.\
    \  It assumes the\n   client host has not been tampered with and that client software\
    \ will\n   reliably convey the received data to the client.  The client of any\n\
    \   handle service must also assume that any handle servers involved have\n  \
    \ not been compromised.  To trust the Global Handle Registry is to\n   believe\
    \ that the Global Handle Registry will correctly direct the\n   client request\
    \ to the responsible Local Handle Service.  To trust a\n   Local Handle Service\
    \ is to believe that the Local Handle Service will\n   correctly return the data\
    \ that was assigned to the handle by its\n   administrator.  A Local Handle Service\
    \ typically supports a set of\n   naming authorities.  Thus, trusting a Local\
    \ Handle Service would\n   imply trusting those naming authorities.\n   The integrity\
    \ of the Handle System depends heavily on the integrity\n   of the global service\
    \ information.  Invalid global service\n   information may mislead clients into\
    \ inappropriate Local Handle\n   Services.  It may also allow attackers to forge\
    \ server signatures.\n   The Global Handle Registry must take extreme caution\
    \ in protecting\n   the global service information and the public key pair used\
    \ to sign\n   the global service information.  Client applications should only\n\
    \   accept the global service information from the Global Handle\n   Registry.\
    \  They should check its integrity upon each update.\n   For efficiency reasons,\
    \ handle servers will not generate or return a\n   digital signature for every\
    \ service response, unless specifically\n   requested by clients.  To assure data\
    \ integrity, clients must\n   explicitly ask the server to return the digital\
    \ signature.  To\n   protect sensitive data from exposure, clients may establish\
    \ a\n   communication session with the server and ask the server to encrypt\n\
    \   any data using the session key.\n"
- title: 7.2.  Privacy Protection
  contents:
  - "7.2.  Privacy Protection\n   By default, most handle data stored in the Handle\
    \ System is publicly\n   accessible, unless otherwise specified by the handle\
    \ administrator.\n   Handle administrators must pay attention when adding handle\
    \ values\n   that contain private information.  They may choose to mark these\n\
    \   handle values readable only by the handle administrator(s), or to\n   store\
    \ these as encrypted handle values, so that these values can only\n   be read\
    \ within a controlled audience.\n   Log files generated by the handle server are\
    \ another vulnerable point\n   where client privacy may be under attack.  Operators\
    \ of handle\n   servers must protect such information carefully.\n"
- title: 7.3.  Caching and Proxy Servers
  contents:
  - "7.3.  Caching and Proxy Servers\n   Besides performance gains and other value-added\
    \ services, both proxy\n   and caching servers present themselves as men-in-the-middle,\
    \ and as\n   such are vulnerable to man-in-the-middle attacks.  It is important\
    \ to\n   know that proxy and caching servers are not part of any handle\n   service.\
    \  They are clients of the Handle System.  Service responses\n   from proxy and\
    \ caching servers cannot be authenticated via the Handle\n   System protocol.\
    \  The trust between the client and its immediate\n   proxy/caching server has\
    \ to be setup independently, regardless of the\n   number of proxy/caching servers\
    \ that are in the middle of the\n   communication path.\n   By using proxy and\
    \ caching servers, clients assume that the servers\n   will submit their requests\
    \ and relay any responses from the Handle\n   System without mishandling any of\
    \ the contents.  They also assume\n   that the servers will protect any sensitive\
    \ information on their\n   behalf.\n   Proxy and caching server operators should\
    \ protect the systems on\n   which such servers are running as they would protect\
    \ any system that\n   contains or transports sensitive information.  In particular,\
    \ log\n   information gathered at proxies often contain highly sensitive\n   personal\
    \ information, and/or information about organizations.  Such\n   information should\
    \ be carefully guarded, and appropriate guidelines\n   for their use developed\
    \ and followed.\n   Caching servers provide additional potential vulnerabilities\
    \ because\n   the contents of the cache represent an attractive target for\n \
    \  malicious exploitation.  Potential attacks on the cache can reveal\n   private\
    \ data for a handle user, or information still kept after a\n   user believes\
    \ that they have been removed from the network.\n   Therefore, cache contents\
    \ should be protected as sensitive\n   information.\n"
- title: 7.4.  Mirroring
  contents:
  - "7.4.  Mirroring\n   Handle System clients should be aware of possible delays\
    \ in content\n   replication among mirroring sites.  They should consider sending\n\
    \   their request to the primary service site for any time-sensitive\n   data.\
    \  Selection of mirroring sites by service administrators must be\n   done carefully.\
    \  Each mirroring site must follow the same security\n   procedures in order to\
    \ ensure data integrity.  Software tools may be\n   applied to ensure data consistency\
    \ among mirroring sites.\n"
- title: 7.5.  Denial of Service (DoS)
  contents:
  - "7.5.  Denial of Service (DoS)\n   As with any public service, the Handle System\
    \ is subject to denial of\n   service attacks.  No general solutions are available\
    \ to protect\n   against such attacks in today's technology.  Server implementations\n\
    \   may be developed to be aware of such attacks and notify\n   administrators\
    \ when they happen.  Stateless cookies [19, 20] are one\n   means of mitigating\
    \ some of the effects of DoS attacks on hosts that\n   perform authentication,\
    \ integrity, and encryption services.  Server\n   implementations, moreover, need\
    \ to be upgradeable to take advantage\n   of new security technologies, including\
    \ anti-DoS technologies as\n   these become available.\n"
- title: 8.  History of the Handle System
  contents:
  - "8.  History of the Handle System\n   The Handle System was originally conceived\
    \ and developed at CNRI as\n   part of an overall digital object architecture.\
    \  The first public\n   implementation was created at CNRI in the fall of 1994\
    \ in an effort\n   led by David Ely.  The overall digital object architecture,\
    \ including\n   the Handle System, was later described in a paper by Robert Kahn\
    \ and\n   Robert Wilensky [1] in 1995.  Development continued at CNRI as part\n\
    \   of the Computer Science Technical Reports (CSTR) project, funded by\n   the\
    \ Defense Advanced Projects Agency (DARPA) under Grant Number MDA-\n   972-92-J-1029\
    \ and MDA-972-99-1-0018.  One aspect of this early\n   digital library project,\
    \ which was also a major factor in the\n   evolution of the Networked Computer\
    \ Science Technical Reference\n   Library (NCSTRL) [18] and related activities,\
    \ was to develop a\n   framework for the underlying infrastructure of digital\
    \ libraries.\n   Early adopters of the Handle System included the Library of Congress,\n\
    \   the Defense Technical Information Center (DTIC), and the\n   International\
    \ DOI Foundation (IDF).  Feedback from these\n   organizations as well as NCSTRL,\
    \ other digital library projects, and\n   related IETF efforts as mentioned above,\
    \ have all contributed to the\n   evolution of the Handle System.  The current\
    \ status and available\n   software, for both client and server, can be found\
    \ at\n   http://www.handle.net.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   This work is derived from the earlier versions of the\
    \ Handle System\n   implementation.  Design ideas are based on those discussed\
    \ within the\n   Handle System development team, including David Ely, Charles\
    \ Orth,\n   Allison Yu, Sean Reilly, Jane Euler, Catherine Rey, Stephanie Nguyen,\n\
    \   Jason Petrone, and Helen She.  Their contributions to this work are\n   gratefully\
    \ acknowledged.\n   The authors also thank Russ Housley (housley@vigilsec.com),\
    \ Ted\n   Hardie (hardie@qualcomm.com), and Mark Baugher (mbaugher@cisco.com)\n\
    \   for their extensive review and comments, as well as recommendations\n   received\
    \ from other members of the IETF/IRTF community.\n"
- title: 10.  References and Bibliography
  contents:
  - "10.  References and Bibliography\n   [1]  Kahn, R. and R. Wilensky, \"A Framework\
    \ for Distributed Digital\n        Object Services\", D-Lib Magazine, 1995.\n\
    \   [2]  Mockapetris, P., \"Domain Names - Concepts and  Facilities\", STD\n \
    \       13, RFC 1034, November 1987.\n   [3]  Mockapetris, P., \"Domain Names\
    \ - Implementation and\n        Specification\", STD 13, RFC 1035, November 1987.\n\
    \   [4]  Berners-Lee, T., Masinter, L. and M. McCahill, \"Uniform Resource\n \
    \       Locators (URL)\", RFC 1738, December 1994.\n   [5]  Yergeau, F., \"UTF-8,\
    \ a transformation format of Unicode and ISO\n        10646\", RFC 2044, October\
    \ 1996.\n   [6]  ITU-T Rec. X.500, \"The Directory: Overview of Concepts, Models,\n\
    \        and Services\", 1993.\n   [7]  D. W. Chadwick, \"Understanding X.500\
    \ - The Directory\", Chapman &\n        Hall ISBN: 0-412-43020-7.\n   [8]  Wahl,\
    \ M., Howes, T. and S. Kille, \"Lightweight Directory Access\n        Protocol\
    \ (v3)\", RFC 2251, December 1997.\n   [9]  Sollins, K. and L. Masinter, \"Functional\
    \ Requirements for\n        Uniform Resource Names\", RFC 1737, December 1994.\n\
    \   [10] Sollins, K. \"Architectural Principles of Uniform Resource Name\n   \
    \     Resolution\", RFC 2276, January 1998.\n   [11] IETF Uniform Resource Names\
    \ (URN) Working Group, April 1998.\n   [12] D-Lib Magazine, http://www.dlib.org\n\
    \   [13] Sam X. Sun, \"Internationalization of the Handle System - A\n       \
    \ Persistent Global Name Service\", Proceeding of 12th\n        International\
    \ Unicode Conference, April 1998.\n   [14] D. Goodman, C. Robbins, \"Understanding\
    \ LDAP & X.500\", August\n        1997.\n   [15] Deutsch P., Schoultz R., Faltstrom\
    \ P. and C. Weider,\n        \"Architecture of the WHOIS++ service\", RFC 1835,\
    \ August 1995.\n   [16] Weider, C., Fullton, J. and S. Spero, \"Architecture of\
    \ the\n        Whois++ Index Service\", RFC 1913, February 1996.\n   [17] The\
    \ Unicode Consortium, \"The Unicode Standard, Version v3.0\",\n        Addison-Wesley\
    \ Pub Co; ISBN: 0201616335.\n   [18] The Networked Computer Science Technical\
    \ Reports Library\n        (NCSTRL), http://www.ncstrl.org/\n   [19] Karn, P.\
    \ and W. Simpson, \"Photuris: Session-Key Management\n        Protocol\", RFC\
    \ 2522, March 1999.\n   [20] Harkins, D. and D. Carrel, \"The Internet Key Exchange\
    \ (IKE)\",\n        RFC 2409, November 1998.\n   [21] Sun, S., Reilly, S. and\
    \ L. Lannom, \"Handle System Namespace and\n        Service Definition\", RFC\
    \ 3651, November 2003.\n   [22] Sun, S., Reilly, S., Lannom, L. and J. Petrone,\
    \ \"Handle System\n        Protocol (ver 2.1) Specification\", RFC 3652, November\
    \ 2003.\n   [23] Berners-Lee, T., Fielding, R. and L. Masinter, \"Uniform Resource\n\
    \        Identifiers (URI): Generic Syntax\", RFC 2396, August 1998.\n"
- title: 11.  Authors' Addresses
  contents:
  - "11.  Authors' Addresses\n   Sam X. Sun\n   Corporation for National Research\
    \ Initiatives (CNRI)\n   1895 Preston White Dr., Suite 100\n   Reston, VA 20191\n\
    \   Phone: 703-262-5316\n   EMail: ssun@cnri.reston.va.us\n   Larry Lannom\n \
    \  Corporation for National Research Initiatives (CNRI)\n   1895 Preston White\
    \ Dr., Suite 100\n   Reston, VA 20191\n   Phone: 703-620-8990\n   EMail: llannom@cnri.reston.va.us\n\
    \   Brian Boesch\n   Corporation for National Research Initiatives (CNRI)\n  \
    \ 1895 Preston White Dr., Suite 100\n   Reston, VA 20191\n   Phone: 703-262-5316\n\
    \   EMail: bboesch@cnri.reston.va.us\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
