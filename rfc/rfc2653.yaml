- title: __initial_text__
  contents:
  - '                        CIP Transport Protocols

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies three protocols for transporting CIP\n \
    \  requests, responses and index objects, utilizing TCP, mail, and HTTP.\n   The\
    \ objects themselves are defined in [CIP-MIME] and the overall CIP\n   architecture\
    \ is defined in [CIP-ARCH].\n"
- title: 1.   Protocol
  contents:
  - "1.   Protocol\n   In this section, the actual protocol for transmitting CIP index\n\
    \   objects and maintaining the mesh is presented. While companion\n   documents\
    \ ([CIP-ARCH] and [CIP-MIME]) describe the concepts involved\n   and the formats\
    \ of the CIP MIME objects, this document is the\n   authoritative definition of\
    \ the message formats and transfer\n   mechanisms of CIP used over TCP, HTTP and\
    \ mail.\n"
- title: 1.1  Philosophy
  contents:
  - "1.1  Philosophy\n   The philosophy of the CIP protocol design is one of building-block\n\
    \   design. Instead of relying on bulky protocol definition tools, or\n   ad-hoc\
    \ text encodings, CIP draws on existing, well understood\n   Internet technologies\
    \ like MIME, RFC-822, Whois++, FTP, and SMTP.\n   Hopefully this will serve to\
    \ ease implementation and consensus\n   building. It should also stand as an example\
    \ of a simple way to\n   leverage existing Internet technologies to easily implement\
    \ new\n   application-level services.\n"
- title: 1.2  Conventions
  contents:
  - "1.2  Conventions\n   The key words \"MUST\" and \"MAY\" in this document are\
    \ to be interpreted\n   as described in \"Key words for use in RFCs to Indicate\
    \ Requirement\n   Levels\" [KEYWORDS].\n   Formal syntax is defined using ABNF\
    \ [ABNF].\n   In examples octets sent by the sender-CIP are preceded by \">>>\
    \ \" and\n   those sent by the receiver-CIP by \"<<< \".\n"
- title: 2  MIME message exchange mechanisms
  contents:
  - "2  MIME message exchange mechanisms\n   CIP relies on interchange of standard\
    \ MIME messages for all requests\n   and replies. These messages are passed over\
    \ a bidirectional, reliable\n   transport system. This document defines transport\
    \ over reliable\n   network streams (via TCP), via HTTP, and via the Internet\
    \ mail\n   infrastructure.\n   The CIP server which initiates the connection (conventionally\n\
    \   referred to as a client) will be referred to below as the sender-CIP.\n  \
    \ The CIP server which accepts a sender-CIP's incoming connection and\n   responds\
    \ to the sender-CIP's requests is called a receiver-CIP.\n"
- title: 2.1  The Stream Transport
  contents:
  - "2.1  The Stream Transport\n   CIP messages are transmitted over bi-directional\
    \ TCP connections via\n   a simple text protocol. The transaction can take place\
    \ over any TCP\n   port, as specified by the mesh configuration. There is no \"\
    well known\n   port\" for CIP transactions. All configuration information in the\n\
    \   system must include both a hostname and a port.\n   All sender-CIP actions\
    \ (including requests, connection initiation,\n   and connection finalization)\
    \ are acknowledged by the receiver-CIP\n   with a response code. See section 2.1.1\
    \ for the format of these\n   codes, a list of the responses a CIP server may\
    \ generate, and the\n   expected sender-CIP action for each.\n   In order to maintain\
    \ backwards compatibility with existing Whois++\n   servers, CIPv3 sender-CIPs\
    \ MUST first verify that the newer protocol\n   is supported. They do this by\
    \ sending the following illegal Whois++\n   system command: \"# CIP-Version: 3<cr><lf>\"\
    . On existing Whois++\n   servers implementing version 1 and 2 of CIP, this results\
    \ in a 500-\n   series response code, and the server terminates the connection.\
    \  If\n   the server implements CIPv3, it MUST instead respond with response\n\
    \   code 300. Future versions of CIP can be correctly negotiated using\n   this\
    \ technique with a different string (i.e. \"CIP-Version: 4\"). An\n   example\
    \ of this short interchange is given below.\n   Note: If a sender-CIP can safely\
    \ assume that the server implements\n   CIPv3, it may choose to send the \"# CIP-Version:\
    \ 3\" string and\n   immediately follow it with the CIPv3 request. This optimization,\n\
    \   useful only in known homogeneous CIPv3 meshes, avoids waiting for the\n  \
    \ roundtrip inherent in the negotiation.\n   Once a sender-CIP has successfully\
    \ verified that the server supports\n   CIPv3 requests, it can send the request,\
    \ formatted as a MIME message\n   with Mime-Version and Content-Type headers (only),\
    \ using the network\n   standard line ending: \"<cr><lf>\".\n   Cip-Req      \
    \  = Req-Hdrs CRLF Req-Body\n   Req-Hdrs       = *( Version-Hdr | Req-Cntnt-Hdr\
    \ )\n   Req-Body       = Body     ; format of request body as in [CIP-MIME]\n\
    \   Body           = Data CRLF \".\" CRLF\n   Data           =          ; data\
    \ with CRLF \".\" CRLF replaced by\n                             ; CRLF \"..\"\
    \ CRLF\n   Version-Hdr    = \"Mime-Version:\" \"1.0\" CRLF\n   Req-Cntnt-Hdr \
    \ = \"Content-Type:\" Req-Content CRLF\n   Req-Content    =          ; format\
    \ is specified in [CIP-MIME]\n   Cip-Rsp        = Rsp-Code CRLF [ Rsp-Hdrs CRLF\
    \ Rsp-Body ]\n                     [ Indx-Cntnt-Hdr CRLF Index-Body ]\n   Rsp-Code\
    \       = DIGIT DIGIT DIGIT Comment\n   Comment        =          ; any chars\
    \ except CR and LF\n   Rsp-Hdrs       = *( Version-Hdr | Rsp-Cntnt-Hdr )\n   Rsp-Cntnt-Hdr\
    \  = \"Content-Type:\" Rsp-Content CRLF\n   Rsp-Content    =          ; format\
    \ is specified in [CIP-MIME]\n   Rsp-Body       = Body     ; format of response\
    \ body as in [CIP-MIME]\n   Indx-Cntnt-Hdr = \"Content-Type:\" Indx-Obj-Type CRLF\n\
    \   Indx-Obj-Type  =          ; any registered index object's MIME-type\n    \
    \                         ; the format is specified in [RFC2045]\n   Index-Body\
    \     = Body     ; format defined in each index\n                            \
    \ ; specifications\n   CRLF           =  CR LF   ; Internet standard newline\n\
    \   CR             =  %x0D    ; carriage return\n   LF             =  %x0A   \
    \ ; linefeed\n   DIGIT          =  %x30-39\n   The message is terminated using\
    \ SMTP-style message termination. The\n   data is sent octet-for-octet, except\
    \ when the pattern\n   <cr><lf>1*[\".\"]<cr><lf> is seen, in which case one more\
    \ period is\n   added.\n   When the data is finished, the octet pattern \"<cr><lf>.<cr><lf>\"\
    \ is\n   transmitted to the receiver-CIP.\n   On the receiver-CIP's side, the\
    \ reverse transformation is applied,\n   and the message read consists of all\
    \ bytes up to, but not including,\n   the terminating pattern.\n   In response\
    \ to the request, the receiver-CIP sends a response code,\n   from either the\
    \ 200, 400, or 500 series. The receiver-CIP then\n   processes the request and\
    \ replies, if necessary, with a MIME message.\n   This reply is also delimited\
    \ by an SMTP-style message terminator.\n   After responding with a response code,\
    \ the receiver-CIP MUST prepare\n   to read another request message, resetting\
    \ state to the point when\n   the sender-CIP has just verified the CIP version.\
    \ If the sender-CIP\n   is finished making requests, it may close the connection.\
    \ In response\n   the receiver-CIP MUST abort reading the message and prepare\
    \ for a new\n   sender-CIP connection (resetting its state completely).\n   An\
    \ example is given below. It is again worth reiterating that the\n   command format\
    \ is defined in [CIP-MIME] whereas the message body is\n   defined in each index\
    \ object definition. In this example the index\n   object definition in [CIP-TIO]\
    \ will be used. Line endings are\n   explicitly shown in anglebrackets; newlines\
    \ in this text are added\n   only for readability. Comments occur in curly-brackets.\n\
    \      { sender-CIP connects to receiver-CIP }\n   <<< % 220 Example CIP server\
    \ ready<cr><lf>\n   >>> # CIP-Version: 3<cr><lf>\n   <<< % 300 CIPv3 OK!<cr><lf>\n\
    \   >>> Mime-Version: 1.0<cr><lf>\n   >>> Content-type: application/index.cmd.datachanged;\
    \ type=\n   >>> x-tagged-index-1; dsi=1.2.752.17.5.10<cr><lf>\n   >>> <cr><lf>\n\
    \   >>> updatetype: incremental tagbased<cr><lf>\n   >>> thisupdate: 855938804<cr><lf>\n\
    \   >>> lastupdate: 855940000<cr><lf>\n   >>> .<cr><lf>\n   <<< % 200 Good MIME\
    \ message received\n   >>> MIME-Version: 1.0<cr><lf>\n   >>> Content-Type: application/index.obj.tagged;\n\
    \   >>> dsi=1.2.752.17.5.10;\n   >>> base-uri=\"ldap://ldap.umu.se/dc=umu,dc=se\"\
    <cr><lf>\n   >>> <cr><lf>\n   >>> version: x-tagged-index-1<cr><lf>\n   >>> updatetype:\
    \ incremental<cr><lf>\n   >>> lastupdate: 855940000<cr><lf>\n   >>> thisupdate:\
    \ 855938804<cr><lf>\n   >>> BEGIN IO-schema<cr><lf>\n   >>> cn: TOKEN<cr><lf>\n\
    \   >>> sn: FULL<cr><lf>\n   >>> title: FULL<cr><lf>\n   >>> END IO-Schema<cr><lf>\n\
    \   >>> BEGIN Update Block<cr><lf>\n   >>> BEGIN Old<cr><lf>\n   >>> title: 3/testpilot<cr><lf>\n\
    \   >>> END Old<cr><lf>\n   >>> BEGIN New<cr><lf>\n   >>> title: 3/chiefpilot<cr><lf>\n\
    \   >>> END New<cr><lf>\n   >>> END Update Block<cr><lf>\n   >>> .<cr><lf>\n \
    \  <<< % 200 Good MIME message received\n      { Sender-CIP shuts down socket\
    \ for writing }\n   <<< % 222 Connection closing in response to sender-CIP shutdown\n\
    \      { receiver-CIP closes its side, resets, and awaits a\n        new sender-CIP\
    \ }\n   An example of an unsuccessful version negotiation looks like this:\n \
    \     { sender-CIP connects to receiver-CIP }\n   <<< % 220 Whois++ server ready<cr><lf>\n\
    \   >>> # CIP-Version: 3<cr><lf>\n   <<< % 500 Syntax error<cr><lf>\n      { server\
    \ closes connection }\n   The sender-CIP may attempt to retry using version 1\
    \ or 2 protocol.\n   Sender-CIP may cache results of this unsuccessful negotiation\
    \ to\n   avoid later attempts.\n"
- title: 2.1.1     Transport specific response codes
  contents:
  - "2.1.1     Transport specific response codes\n   The following response codes\
    \ are used with the stream transport:\n   Code  Suggested description     Sender-CIP\
    \ action\n         text\n   200   MIME request received     Expect no output,\
    \ continue session\n         and processed             (or close)\n   201   MIME\
    \ request received     Read a response, delimited by SMTP-\n         and processed,\
    \ output     style message delimiter.\n         follows\n   220   Initial server\
    \ banner     Continue with Whois++ interaction,\n         message            \
    \       or attempt CIP version negotiation.\n   222   Connection closing (in \
    \   Done with transaction.\n         response to sender-CIP\n         close)\n\
    \   300   Requested CIP version     Continue with CIP transaction, in\n      \
    \   accepted                  the specified version.\n   400   Temporarily unable\
    \ to     Retry at a later time. May be used\n         process request        \
    \   to indicate that the server does not\n                                   currently\
    \ have the resources\n                                   available to accept an\
    \ index.\n   500   Bad MIME message format   Retry with correctly formatted MIME\n\
    \   501   Unknown or missing        Retry with correct CIP command\n         request\
    \ in\n         application/index.cmd\n   502   Request is missing        Retry\
    \ with correct CIP attributes.\n         required CIP attributes\n   520   Aborting\
    \ connection for   Alert local administrator.\n         some unexpected reason\n\
    \   530   Request requires valid    Sign the request, if possible, and\n     \
    \    signature                 retry. Otherwise, report problem to\n         \
    \                          the administrator.\n   531   Request has invalid  \
    \     Report problem to the administrator.\n         signature\n   532   Cannot\
    \ check signature    Alert local administrator, who should\n                 \
    \                  cooperate with remote administrator\n                     \
    \              tp diagnose and resolve the problem.\n                        \
    \           (Probably missing a public key.)\n"
- title: 2.2  Internet mail infrastructure as transport
  contents:
  - "2.2  Internet mail infrastructure as transport\n   As an alternative to TCP streams,\
    \ CIP transactions can take place\n   over the existing Internet mail infrastructure.\
    \ There are two\n   motivations for this feature of CIP. First, it lowers the\
    \ barriers to\n   entry for leaf servers. When the need for a full TCP implementation\n\
    \   is relaxed, leaf nodes (which, by definition, only send index\n   objects)\
    \ can consist of as little as a database and an indexing\n   program (possibly\
    \ written in a very high level language) to\n   participate in the mesh.\n   Second,\
    \ it keeps with the philosophy of making use of existing\n   Internet technology.\
    \ The MIME messages used for requests and\n   responses are, by definition of\
    \ the MIME specification, suitable for\n   transport via the Internet mail infrastructure.\
    \ With a few simple\n   rules, we open up an entirely different way to interact\
    \ with CIP\n   servers which choose to implement this transport. See Protocol\n\
    \   Conformance, below, for details on what options server implementers\n   have\
    \ about supporting the various transports.\n   The basic rhythm of request/response\
    \ is maintained when using the\n   mail transport. The following sections clarify\
    \ some special cases\n   which need to be considered for mail transport of CIP\
    \ objects. In\n   general, all mail protocols and mail format specifications\n\
    \   (especially MIME Security Multiparts) can be used with the CIP mail\n   transport.\n"
- title: 2.2.1     CIP-Version negotiation
  contents:
  - "2.2.1     CIP-Version negotiation\n   Since no information on which CIP-version\
    \ is in use is present in the\n   MIME message, this information has to be carried\
    \ in the mailheader.\n   Therefore CIP requests sent using the mail transport\
    \ MUST include a\n   CIP-version headerline, to be registered according to [MHREG].\n\
    \   The format of this line is:\n   DIGIT       =  %x30-39\n   number      = \
    \ 1*DIGIT\n   cipversion  =  \"CIP-Version:\" <sp> number[\".\" number]\n"
- title: 2.2.2     Return path
  contents:
  - "2.2.2     Return path\n   When CIP transactions take place over a bidirectional\
    \ stream, the\n   return path for errors and results is implicit. Using mail as\
    \ a\n   transport introduces difficulties to the recipient, because it's not\n\
    \   always clear from the headers exactly where the reply should go,\n   though\
    \ in practice there are some heuristics used by MUA's.\n   CIP solves this problem\
    \ by fiat. CIP requests sent using the mail\n   transport MUST include a Reply-To\
    \ header as specified by RFC-822.\n   Any mail received for processing by a CIP\
    \ server implementing the\n   mail transport without a Reply-To header MUST be\
    \ ignored, and a\n   message should be logged for the local administrator. The\
    \ receiver\n   MUST not attempt to reply with an error to any address derived\
    \ from\n   the incoming mail.\n   If there are no circumstances under which a\
    \ response is to be sent to\n   a CIP request, the sender should include a Reply-To\
    \ header with the\n   address \"<>\" in it.  Receivers MUST never attempt to \
    \ send replies to\n   that address, as it is defined to be invalid (both here,\
    \ and by the\n   BNF grammar in RFC-822). It should be noted that, in general,\
    \ it is a\n   bad idea to turn off error reporting in this way. However, in the\n\
    \   simplest case of an index pushing program, this MAY be a desirable\n   simplification.\n"
- title: 2.3  HTTP transport
  contents:
  - "2.3  HTTP transport\n   HTTP MAY also be used to transport CIP objects, since\
    \ they are just\n   MIME objects. A transaction is performed by using the POST\
    \ method to\n   send an application/index.cmd and returning an\n   application/index.response\
    \ or an application/index.obj in the HTTP\n   reply. The URL that is the target\
    \ of the post is a configuration\n   parameter of the CIP-sender to CIP-receiver\
    \ relationship.\n   Example:\n      { the client opens the connection and sends\
    \ a POST }\n   >>> POST / HTTP/1.1<cr><lf>\n   >>> Host: cip.some.corp<cr><lf>\n\
    \   >>> Content-type: application/index.cmd.noop<cr><lf>\n   >>> Date: Thu, 6\
    \ Jun 1997 18:16:03 GMT<cr><lf>\n   >>> Content-Length: 2<cr><lf>\n   >>> Connection:\
    \ close<cr><lf>\n   >>> <cr><lf>\n      { the server processes the request }\n\
    \   <<< HTTP/1.1 204 No Content<cr><lf>\n      { the server closes the connection\
    \ }\n   In addition to leveraging the security capabilities that come with\n \
    \  HTTP, there are other HTTP features that MAY be useful in a CIP\n   context.\
    \ A CIP client MAY use the Accept-Charset and Accept-Language\n   HTTP headers\
    \ to express a desire to retrieve an index in a particular\n   character set or\
    \ natural language. It MAY use the Accept-Encoding\n   header to (e.g.) indicate\
    \ that it can handle compressed responses,\n   which the CIP server MAY send in\
    \ conjunction with the Transfer-\n   Encoding header. It MAY use the If-Modified-Since\
    \ header to prevent\n   wasted transmission of an index that has not changed since\
    \ the last\n   poll. A CIP server can use the Retry-After header to request that\
    \ the\n   client retry later when the server is less busy.\n"
- title: 3.   Security Considerations
  contents:
  - "3.   Security Considerations\n   There are two levels at which the index information\
    \ can be protected;\n   the first is by use of the technology available for securing\
    \ MIME\n   [MIME-SEC] objects, and secondly by using the technology available\n\
    \   for securing the transport.\n   When it comes to transport the stream transport\
    \ can be protected by\n   the use of TLS [TLS] . For HTTP the Security is handled\
    \ by using HTTP\n   Basic Authentication [RFC 2616], HTTP Message Digest Authentication\n\
    \   [RFC2617] or SSL/TLS. Extra protection for the SMTP exchange can be\n   achieve\
    \ by the use of Secure SMTP over TLS [SMTPTLS].\n"
- title: 4.   References
  contents:
  - "4.   References\n   [RFC 2045] Freed, N. and N. Borenstein, \"Multipurpose Internet\
    \ Mail\n              Extensions (MIME) Part One: Format of Internet Message\n\
    \              Bodies\", RFC 2045, November 1996.\n   [RFC 2616] Fielding, R.,\
    \ Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach, P. and\
    \ T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\",\
    \ RFC 2616, June 1999.\n   [RFC 2617] Franks, J., Hallam-Baker, P., Hostetler,\
    \ J., Lawrence, S.,\n              Leach, P., Luotonen, A. and L. Stewart, \"\
    HTTP\n              Authentication: Basic and Digest Access Authentication\",\n\
    \              RFC 2617, June 1999.\n   [CIP-ARCH] Allen, J. and M. Mealling,\
    \ \"The Architecture of the Common\n              Indexing Protocol (CIP)\", RFC\
    \ 2651, August 1999.\n   [CIP-MIME] Allen, J. and M. Mealling, \"MIME Object Definitions\
    \ for\n              the Common Indexing Protocol (CIP)\", RFC 2652, August\n\
    \              1999.\n   [ABNF]     Crocker, D. and P. Overell, \"Augmented BNF\
    \ for Syntax\n              Specifications: ABNF\", RFC 2234, November 1997.\n\
    \   [CIP-TIO]  Hedberg, R., Greenblatt, B., Moats, R. and M. Wahl, \"A\n     \
    \         Tagged Index Object for use in the Common Indexing\n              Protocol\"\
    , RFC 2654, August 1999.\n   [KEYWORDS] Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [MIME-SEC] Galvin, J., Murphy, S., Crocker, S. and N. Freed,\n           \
    \   \"Security Multiparts for MIME: Multipart/Signed and\n              Multipart/Encrypted\"\
    , RFC 1847, October 1995.\n   [TLS]      Dierks, T. and C. Allen, \"The TLS Protocol\
    \ Version 1.0\",\n              RFC 2246, January 1999.\n   [SMTPTLS]  Hoffman,\
    \ P., \"SMTP Service Extension for Secure SMTP over\n              TLS\", RFC\
    \ 2487, January 1999.\n   [MHREG]    Jacob, P., \"Mail and Netnews Header Registration\n\
    \              Procedure\", Work in Progress.\n"
- title: 5.   Authors' Addresses
  contents:
  - "5.   Authors' Addresses\n   Jeff R. Allen\n   246 Hawthorne St.\n   Palo Alto,\
    \ CA  94301\n   EMail: jeff.allen@acm.org\n   Paul J. Leach\n   Microsoft\n  \
    \ 1 Microsoft Way\n   Redmond, WA 98052\n   EMail: paulle@microsoft.com\n   Roland\
    \ Hedberg\n   Catalogix\n   Dalsveien 53\n   0775 Oslo\n   Norway\n   EMail: roland@catalogix.ac.se\n"
- title: 6.  Full Copyright Statement
  contents:
  - "6.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
