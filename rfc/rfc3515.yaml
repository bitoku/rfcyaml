- title: __initial_text__
  contents:
  - "           The Session Initiation Protocol (SIP) Refer Method\nStatus of this\
    \ Memo\n   This document specifies an Internet standards track protocol for the\n\
    \   Internet community, and requests discussion and suggestions for\n   improvements.\
    \  Please refer to the current edition of the \"Internet\n   Official Protocol\
    \ Standards\" (STD 1) for the standardization state\n   and status of this protocol.\
    \  Distribution of this memo is unlimited.\nCopyright Notice\n   Copyright (C)\
    \ The Internet Society (2003).  All Rights Reserved.\nAbstract\n   This document\
    \ defines the REFER method.  This Session Initiation\n   Protocol (SIP) extension\
    \ requests that the recipient REFER to a\n   resource provided in the request.\
    \  It provides a mechanism allowing\n   the party sending the REFER to be notified\
    \ of the outcome of the\n   referenced request.  This can be used to enable many\
    \ applications,\n   including call transfer.\n   In addition to the REFER method,\
    \ this document defines the the refer\n   event package and the Refer-To request\
    \ header.\nTable of Contents\n   1.  Overview . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  2\n   2.  The REFER Method . . . . . . . . . . . . . .\
    \ . . . . . . . .  3\n       2.1  The Refer-To Header Field . . . . . . . . .\
    \ . . . . . .  3\n       2.2  Header Field Support for the REFER Method . . .\
    \ . . . .  4\n       2.3  Message Body Inclusion. . . . . . . . . . . . . . .\
    \ . .  5\n       2.4  Behavior of SIP User Agents . . . . . . . . . . . . . .\
    \  6\n            2.4.1 Forming a REFER request . . . . . . . . . . . . .  6\n\
    \            2.4.2 Processing a REFER request. . . . . . . . . . . .  6\n    \
    \        2.4.3 Accessing the Referred-to Resource. . . . . . . .  6\n        \
    \    2.4.4 Using SIP Events to Report the Results\n                  of the Reference.\
    \ . . . . . . . . . . . . . . . .  7\n            2.4.5 The Body of the NOTIFY.\
    \ . . . . . . . . . . . . .  8\n            2.4.6 Multiple REFER Requests in a\
    \ Dialog . . . . . . .  9\n            2.4.7 Using the Subscription-State Header\n\
    \                  Field with Event Refer. . . . . . . . . . . . . .  9\n    \
    \   2.5  Behavior of SIP Registrars/Redirect Servers . . . . . .  9\n       2.6\
    \  Behavior of SIP Proxies . . . . . . . . . . . . . . . . 10\n   3.  Package\
    \ Details: Event refer . . . . . . . . . . . . . . . . 10\n       3.1  Event Package\
    \ Name. . . . . . . . . . . . . . . . . . . 10\n       3.2  Event Package Parameters.\
    \ . . . . . . . . . . . . . . . 10\n       3.3  SUBSCRIBE Bodies. . . . . . .\
    \ . . . . . . . . . . . . . 10\n       3.4  Subscription Duration . . . . . .\
    \ . . . . . . . . . . . 10\n       3.5  NOTIFY Bodies . . . . . . . . . . . .\
    \ . . . . . . . . . 11\n       3.6  Notifier processing of SUBSCRIBE requests\
    \ . . . . . . . 11\n       3.7  Notifier Generation of NOTIFY Requests. . . .\
    \ . . . . . 11\n       3.8  Subscriber Processing of NOTIFY Requests. . . . .\
    \ . . . 11\n       3.9  Handling of Forked Requests . . . . . . . . . . . . .\
    \ . 11\n       3.10 Rate of Notifications . . . . . . . . . . . . . . . . . 11\n\
    \       3.11 State Agents. . . . . . . . . . . . . . . . . . . . . . 11\n   4.\
    \  Examples . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n       4.1\
    \  Prototypical REFER callflow . . . . . . . . . . . . . . 12\n       4.2  Multiple\
    \ REFERs in a dialog . . . . . . . . . . . . . . 14\n   5.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . 16\n       5.1  Constructing a Refer-To\
    \ URI . . . . . . . . . . . . . . 16\n       5.2  Authorization Considerations\
    \ for REFER. . . . . . . . . 17\n       5.3  Considerations for the use of message/sipfrag\
    \ . . . . . 18\n            5.3.1 Circumventing Privacy . . . . . . . . . . .\
    \ . . . 18\n            5.3.2 Circumventing Confidentiality . . . . . . . . .\
    \ . 19\n            5.3.3 Limiting the Breach . . . . . . . . . . . . . . . 19\n\
    \            5.3.4 Cut, Paste and Replay Considerations. . . . . . . 19\n   6.\
    \  Historic Material  . . . . . . . . . . . . . . . . . . . . . 20\n   7.  IANA\
    \ Considerations  . . . . . . . . . . . . . . . . . . . . 20\n   8.  Acknowledgments\
    \  . . . . . . . . . . . . . . . . . . . . . . 21\n   9.  References . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 21\n       9.1  Normative References.\
    \ . . . . . . . . . . . . . . . . . 21\n       9.2  Informative References. .\
    \ . . . . . . . . . . . . . . . 21\n   10. Intellectual Property Statement. .\
    \ . . . . . . . . . . . . . 21\n   11. Author's Address . . . . . . . . . . .\
    \ . . . . . . . . . . . 22\n   12. Full Copyright Statement . . . . . . . . .\
    \ . . . . . . . . . 23\n1. Overview\n   This document defines the REFER method.\
    \  This SIP [1] extension\n   requests that the recipient REFER to a resource\
    \ provided in the\n   request.\n   This can be used to enable many applications,\
    \ including Call\n   Transfer.  For instance, if Alice is in a call with Bob,\
    \ and decides\n   Bob needs to talk to Carol, Alice can instruct her SIP user\
    \ agent\n   (UA) to send a SIP REFER request to Bob's UA providing Carol's SIP\n\
    \   Contact information.  Assuming Bob has given it permission, Bob's UA\n   will\
    \ attempt to call Carol using that  contact.  Bob's UA will then\n   report whether\
    \ it succeeded in reaching the contact to Alice's UA.\n2. The REFER Method\n \
    \  REFER is a SIP method as defined by RFC 3261 [1].  The REFER method\n   indicates\
    \ that the recipient (identified by the Request-URI) should\n   contact a third\
    \ party using the contact information provided in the\n   request.\n   Unless\
    \ stated otherwise, the protocol for emitting and responding to\n   a REFER request\
    \ are identical to those for a BYE request in [1].  The\n   behavior of SIP entities\
    \ not implementing the REFER (or any other\n   unknown) method is explicitly defined\
    \ in [1].\n   A REFER request implicitly establishes a subscription to the refer\n\
    \   event.  Event subscriptions are defined in [2].\n   A REFER request MAY be\
    \ placed outside the scope of a dialog created\n   with an INVITE.  REFER creates\
    \ a dialog, and MAY be Record-Routed,\n   hence MUST contain a single Contact\
    \ header field value.  REFERs\n   occurring inside an existing dialog MUST follow\
    \ the Route/Record-\n   Route logic of that dialog.\n2.1 The Refer-To Header Field\n\
    \   Refer-To is a request header field (request-header) as defined by\n   [1].\
    \  It only appears in a REFER request.  It provides a URL to\n   reference.\n\
    \      Refer-To = (\"Refer-To\" / \"r\") HCOLON ( name-addr / addr-spec ) *\n\
    \      (SEMI generic-param)\n   The following should be interpreted as if it appeared\
    \ in Table 3 of\n   RFC 3261.\n   Header field              where       proxy\
    \ ACK BYE CAN INV OPT REG\n   ___________________________________________________________________\n\
    \   Refer-To                    R                -   -   -   -   -   -\n   The\
    \ Refer-To header field MAY be encrypted as part of end-to-end\n   encryption.\n\
    \   The Contact header field is an important part of the Route/Record-\n   Route\
    \ mechanism and is not available to be used to indicate the\n   target of the\
    \ reference.\nExamples\nRefer-To: sip:alice@atlanta.example.com\nRefer-To: <sip:bob@biloxi.example.net?Accept-Contact=sip:bobsdesk.\n\
    \       biloxi.example.net&Call-ID%3D55432%40alicepc.atlanta.example.com>\nRefer-To:\
    \ <sip:dave@denver.example.org?Replaces=12345%40192.168.118.3%3B\n          to-tag%3D12345%3Bfrom-tag%3D5FFE-3994>\n\
    Refer-To: <sip:carol@cleveland.example.org;method=SUBSCRIBE>\nRefer-To: http://www.ietf.org\n\
    \   Long headers field values are line-wrapped here for clarity only.\n2.2 Header\
    \ Field Support for the REFER Method\n   This table adds a column to tables 2\
    \ and 3 in [1], describing header\n   field presence in a REFER method.  See [1]\
    \ for a key for the symbols\n   used.  A row for the Refer-To request-header should\
    \ be inferred,\n   mandatory for REFER.  Refer-To is not applicable for any other\n\
    \   methods.  The proxy column in [1] applies to the REFER method\n   unmodified.\n\
    \      Header                    Where   REFER\n      Accept                 \
    \     R       o\n      Accept                     2xx      -\n      Accept   \
    \                  415      c\n      Accept-Encoding             R       o\n \
    \     Accept-Encoding            2xx      -\n      Accept-Encoding           \
    \ 415      c\n      Accept-Language             R       o\n      Accept-Language\
    \            2xx      -\n      Accept-Language            415      c\n      Alert-Info\
    \                          -\n      Allow                       Rr      o\n  \
    \    Allow                      405      m\n      Authentication-Info        2xx\
    \      o\n      Authorization               R       o\n      Call-ID         \
    \            c       m\n      Call-Info                           -\n      Contact\
    \                     R       m\n      Contact                    1xx      -\n\
    \      Contact                    2xx      m\n      Contact                  \
    \ 3-6xx     o\n      Content-Disposition                 o\n      Content-Encoding\
    \                    o\n      Content-Language                    o\n      Content-Length\
    \                      o\n      Content-Type                        *\n      CSeq\
    \                        c       m\n      Date                               \
    \ o\n      Error-Info                3-6xx     o\n      Expires              \
    \       R       o\n      From                        c       m\n      In-Reply-To\
    \                         -\n      Max-Forwards                R       m\n   \
    \   Min-Expires                         -\n      MIME-Version                \
    \        o\n      Organization                        o\n      Priority      \
    \              R       -\n      Proxy-Authenticate         401      o\n      Proxy-Authenticate\
    \         407      m\n      Proxy-Authorization         R       o\n      Proxy-Require\
    \               R       o\n      Record-Route                R       o\n     \
    \ Record-Route           2xx,18x      o\n      Reply-To                      \
    \      -\n      Require                             c\n      Retry-After     \
    \   404,413,480,486  o\n      Retry-After              500,503    o\n      Retry-After\
    \              600,603    o\n      Route                       R       c\n   \
    \   Server                      r       o\n      Subject                     R\
    \       -\n      Supported                 R,2xx     o\n      Timestamp      \
    \                     o\n      To                         c(1)     m\n      Unsupported\
    \                420      o\n      User-Agent                          o\n   \
    \   Via                        c(2)     m\n      Warning                     r\
    \       o\n      WWW-Authenticate           401      m\n      WWW-Authenticate\
    \           407      o\n   Table 1: Header Field Support\n2.3 Message Body Inclusion\n\
    \   A REFER method MAY contain a body.  This specification assigns no\n   meaning\
    \ to such a body.  A receiving agent may choose to process the\n   body according\
    \ to its Content-Type.\n2.4 Behavior of SIP User Agents\n2.4.1 Forming a REFER\
    \ request\n   REFER is a SIP request and is constructed as defined in [1].  A\
    \ REFER\n   request MUST contain exactly one Refer-To header field value.\n2.4.2\
    \ Processing a REFER request\n   A UA accepting a well-formed REFER request SHOULD\
    \ request approval\n   from the user to proceed (this request could be satisfied\
    \ with an\n   interactive query or through accessing configured policy).  If\n\
    \   approval is granted, the UA MUST contact the resource identified by\n   the\
    \ URI in the Refer-To header field value as discussed in Section\n   2.4.3.\n\
    \   If the approval sought above for a well-formed REFER request is\n   immediately\
    \ denied, the UA MAY decline the request.\n   An agent responding to a REFER method\
    \ MUST return a 400 (Bad Request)\n   if the request contained zero or more than\
    \ one Refer-To header field\n   values.\n   An agent (including proxies generating\
    \ local responses) MAY return a\n   100 (Trying) or any appropriate 4xx-6xx class\
    \ response as prescribed\n   by [1].\n   Care should be taken when implementing\
    \ the logic that determines\n   whether or not to accept the REFER request.  A\
    \ UA not capable of\n   accessing non-SIP URIs SHOULD NOT accept REFER requests\
    \ to them.\n   If no final response has been generated according to the rules\
    \ above,\n   the UA MUST return a 202 Accepted response before the REFER\n   transaction\
    \ expires.\n   If a REFER request is accepted (that is, a 2xx class response is\n\
    \   returned), the recipient MUST create a subscription and send\n   notifications\
    \ of the status of the refer as described in Section\n   2.4.4.\n2.4.3 Accessing\
    \ the Referred-to Resource\n   The resource identified by the Refer-To URI is\
    \ contacted using the\n   normal mechanisms for that URI type.  For example, if\
    \ the URI is a\n   SIP URI indicating INVITE (using a method=INVITE URI parameter\
    \ for\n   example), the UA would issue a new INVITE using all of the normal\n\
    \   rules for sending an INVITE defined in [1].\n2.4.4 Using SIP Events to Report\
    \ the Results of the Reference\n   The NOTIFY mechanism defined in [2] MUST be\
    \ used to inform the agent\n   sending the REFER of the status of the reference.\
    \  The dialog\n   identifiers (To, From, and Call-ID) of each NOTIFY must match\
    \ those\n   of the REFER as they would if the REFER had been a SUBSCRIBE request.\n\
    \   Each NOTIFY MUST contain an Event header field with a value of refer\n   and\
    \ possibly an id parameter (see Section 2.4.6).\n   Each NOTIFY MUST contain a\
    \ body of type \"message/sipfrag\" [3].\n   The creation of a subscription as\
    \ defined by [2] always results in an\n   immediate NOTIFY.  Analogous to the\
    \ case for SUBSCRIBE described in\n   that document, the agent that issued the\
    \ REFER MUST be prepared to\n   receive a NOTIFY before the REFER transaction\
    \ completes.\n   The implicit subscription created by a REFER is the same as a\n\
    \   subscription created with a SUBSCRIBE request.  The agent issuing the\n  \
    \ REFER can terminate this subscription prematurely by unsubscribing\n   using\
    \ the mechanisms described in [2].  Terminating a subscription,\n   either by\
    \ explicitly unsubscribing or rejecting NOTIFY, is not an\n   indication that\
    \ the referenced request should be withdrawn or\n   abandoned.  In particular,\
    \ an agent acting on a REFER request SHOULD\n   NOT issue a CANCEL to any referenced\
    \ SIP requests because the agent\n   sending the REFER terminated its subscription\
    \ to the refer event\n   before the referenced request completes.\n   The agent\
    \ issuing the REFER may extend its subscription using the\n   subscription refresh\
    \ mechanisms described in [2].\n   REFER is the only mechanism that can create\
    \ a subscription to event\n   refer.  If a SUBSCRIBE request for event refer is\
    \ received for a\n   subscription that does not already exist, it MUST be rejected\
    \ with a\n   403.\n   Notice that unlike SUBSCRIBE, the REFER transaction does\
    \ not contain\n   a duration for the subscription in either the request or the\n\
    \   response.  The lifetime of the state being subscribed to is\n   determined\
    \ by the progress of the referenced request.  The duration\n   of the subscription\
    \ is chosen by the agent accepting the REFER and is\n   communicated to the agent\
    \ sending the REFER in the subscription's\n   initial NOTIFY (using the Subscription-State\
    \ expires header\n   parameter).  Note that agents accepting REFER and not wishing\
    \ to hold\n   subscription state can terminate the subscription with this initial\n\
    \   NOTIFY.\n2.4.5 The Body of the NOTIFY\n   Each NOTIFY MUST contain a body\
    \ of type \"message/sipfrag\" [3].  The\n   body of a NOTIFY MUST begin with a\
    \ SIP Response Status-Line as\n   defined in [1].  The response class in this\
    \ status line indicates the\n   status of the referred action.  The body MAY contain\
    \ other SIP header\n   fields to provide information about the outcome of the\
    \ referenced\n   action.  This body provides a complete statement of the status\
    \ of the\n   referred action.  The refer event package does not support state\n\
    \   deltas.\n   If a NOTIFY is generated when the subscription state is pending,\
    \ its\n   body should consist only of a status line containing a response code\n\
    \   of 100.\n   A minimal, but complete, implementation can respond with a single\n\
    \   NOTIFY containing either the body:\n      SIP/2.0 100 Trying\n   if the subscription\
    \ is pending, the body:\n      SIP/2.0 200 OK\n   if the reference was successful,\
    \ the body:\n      SIP/2.0 503 Service Unavailable\n   if the reference failed,\
    \ or the body:\n      SIP/2.0 603 Declined\n   if the REFER request was accepted\
    \ before approval to follow the\n   reference could be obtained and that approval\
    \ was subsequently denied\n   (see Section 2.4.7).\n   An implementation MAY include\
    \ more of a SIP message in that body to\n   convey more information.  Warning\
    \ header field values received in\n   responses to the referred action are good\
    \ candidates.  In fact, if\n   the reference was to a SIP URI, the entire response\
    \ to the referenced\n   action could be returned (perhaps to assist with debugging).\n\
    \   However, doing so could have grave security repercussions (see\n   Section\
    \ 5).  Implementers must carefully consider what they choose to\n   include.\n\
    \   Note that if the reference was to a non-SIP URI, status in any\n   NOTIFYs\
    \ to the referrer must still be in the form of SIP Response\n   Status-Lines.\
    \  The minimal implementation discussed above is\n   sufficient to provide a basic\
    \ indication of success or failure.  For\n   example, if a client receives a REFER\
    \ to a HTTP URL, and is\n   successful in accessing the resource, its NOTIFY to\
    \ the referrer can\n   contain the message/sipfrag body of \"SIP/2.0 200 OK\"\
    .  If the\n   notifier wishes to return additional non-SIP protocol specific\n\
    \   information about the status of the request, it may place it in the\n   body\
    \ of the sipfrag message.\n2.4.6 Multiple REFER Requests in a Dialog\n   A REFER\
    \ creates an implicit subscription sharing the dialog\n   identifiers in the REFER\
    \ request.  If more than one REFER is issued\n   in the same dialog (a second\
    \ attempt at transferring a call for\n   example), the dialog identifiers do not\
    \ provide enough information to\n   associate the resulting NOTIFYs with the proper\
    \ REFER.\n   Thus, for the second and subsequent REFER requests a UA receives\
    \ in a\n   given dialog, it MUST include an id parameter[2] in the Event header\n\
    \   field of each NOTIFY containing the sequence number (the number from\n   the\
    \ CSeq header field value) of the REFER this NOTIFY is associated\n   with.  This\
    \ id parameter MAY be included in NOTIFYs to the first\n   REFER a UA receives\
    \ in a given dialog.  A SUBSCRIBE sent to refresh\n   or terminate this subscription\
    \ MUST contain this id parameter.\n2.4.7 Using the Subscription-State Header Field\
    \ with Event Refer\n   Each NOTIFY must contain a Subscription-State header field\
    \ as defined\n   in [2].  The final NOTIFY sent in response to a REFER MUST indicate\n\
    \   the subscription has been \"terminated\" with a reason of \"noresource\".\n\
    \   (The resource being subscribed to is the state of the referenced\n   request).\n\
    \   If a NOTIFY indicates a reason that indicates a re-subscribe is\n   appropriate\
    \ according to  [2], the agent sending the REFER is NOT\n   obligated to re-subscribe.\n\
    \   In the case where a REFER was accepted with a 202, but approval to\n   follow\
    \ the reference was subsequently denied, the reason and retry-\n   after elements\
    \ of the Subscription-State header field can be used to\n   indicate if and when\
    \ the REFER can be re-attempted (as described for\n   SUBSCRIBE in [2]).\n2.5\
    \ Behavior of SIP Registrars/Redirect Servers\n   A registrar that is unaware\
    \ of the definition of the REFER method\n   will return a 501 response as defined\
    \ in [1].  A registrar aware of\n   the definition of REFER SHOULD return a 405\
    \ response.\n   This specification places no requirements on redirect server behavior\n\
    \   beyond those specified in [1].  Thus, it is possible for REFER\n   requests\
    \ to be redirected.\n2.6 Behavior of SIP Proxies\n   SIP proxies do not require\
    \ modification to support the REFER method.\n   Specifically, as required by [1],\
    \ a proxy should process a REFER\n   request the same way it processes an OPTIONS\
    \ request.\n3. Package Details: Event refer\n   This document defines an event\
    \ package as defined in [2].\n3.1 Event Package Name\n   The name of this event\
    \ package is \"refer\".\n3.2 Event Package Parameters\n   This package uses the\
    \ \"id\" parameter defined in [2].  Its use in\n   package is described in Section\
    \ 2.4.6.\n3.3 SUBSCRIBE Bodies\n   SUBSCRIBE bodies have no special meaning for\
    \ this event package.\n3.4 Subscription Duration\n   The duration of an implicit\
    \ subscription created by a REFER request\n   is initially determined by the agent\
    \ accepting the REFER and\n   communicated to the subscribing agent in the Subscription-State\n\
    \   header field's expire parameter in the first NOTIFY sent in the\n   subscription.\
    \  Reasonable choices for this initial duration depend on\n   the type of request\
    \ indicated in the Refer-To URI.  The duration\n   SHOULD be chosen to be longer\
    \ than the time the referenced request\n   will be given to complete.  For example,\
    \ if the Refer-To URI is a SIP\n   INVITE URI, the subscription interval should\
    \ be longer than the\n   Expire value in the INVITE.  Additional time MAY be included\
    \ to\n   account for time needed to authorize the subscription.  The\n   subscribing\
    \ agent MAY extend the subscription by refreshing it, or\n   terminate it by unsubscribing.\
    \  As described in Section 2.4.7, the\n   agent accepting the REFER will terminate\
    \ the subscription when it\n   reports the final result of the reference, indicating\
    \ that\n   termination in the Subscription-State header field.\n3.5 NOTIFY Bodies\n\
    \   The bodies of NOTIFY requests for event refer are discussed in\n   Section\
    \ 2.4.5.\n3.6 Notifier processing of SUBSCRIBE requests\n   Notifier processing\
    \ of SUBSCRIBE requests is discussed in Section\n   2.4.4.\n3.7 Notifier Generation\
    \ of NOTIFY Requests\n   Notifier generation of NOTIFY requests is discussed in\
    \ Section 2.4.4.\n3.8 Subscriber Processing of NOTIFY Requests\n   Subscriber\
    \ processing of NOTIFY requests is discussed in Section\n   2.4.4.\n3.9 Handling\
    \ of Forked Requests\n   A REFER sent within the scope of an existing dialog will\
    \ not fork.  A\n   REFER sent outside the context of a dialog MAY fork, and if\
    \ it is\n   accepted by multiple agents, MAY create multiple subscriptions.\n\
    \   These subscriptions are created and managed as per \"Handling of\n   Forked\
    \ Requests\" in [2] as if the REFER had been a SUBSCRIBE.  The\n   agent sending\
    \ the REFER manages the state associated with each\n   subscription separately.\
    \  It does NOT merge the state from the\n   separate subscriptions.  The state\
    \ is the status of the referenced\n   request at each of the accepting agents.\n\
    3.10 Rate of Notifications\n   An event refer NOTIFY might be generated each time\
    \ new knowledge of\n   the status of a referenced requests becomes available.\
    \  For instance,\n   if the REFER was to a SIP INVITE, NOTIFYs might be generated\
    \ with\n   each provisional response and the final response to the INVITE.\n \
    \  Alternatively, the subscription might only result in two NOTIFY\n   requests,\
    \ the immediate NOTIFY and the NOTIFY carrying the final\n   result of the reference.\
    \  NOTIFYs to event refer SHOULD NOT be sent\n   more frequently than once per\
    \ second.\n3.11 State Agents\n   Separate state agents are not defined for event\
    \ refer.\n4. Examples\n4.1 Prototypical REFER callflow\n   Agent A           \
    \       Agent B\n      |                        |\n      |   F1 REFER        \
    \     |\n      |----------------------->|\n      |        F2 202 Accepted |\n\
    \      |<-----------------------|\n      |        F3 NOTIFY       |\n      |<-----------------------|\n\
    \      |  F4 200 OK             |\n      |----------------------->|\n      | \
    \                       |\n      |                        |\n      |         \
    \               |------->\n      |                        |  (whatever)\n    \
    \  |                        |<------\n      |                        |\n     \
    \ |         F5 NOTIFY      |\n      |<-----------------------|\n      |   F6 200\
    \ OK            |\n      |----------------------->|\n      |                 \
    \       |\n      |                        |\n   Here are examples of what the\
    \ four messages between Agent A and Agent\n   B might look like if the reference\
    \ to (whatever) that Agent B makes\n   is successful.  The details of this flow\
    \ indicate this particular\n   REFER occurs outside a session (there is no To\
    \ tag in the REFER\n   request).  If the REFER occurs inside a session, there\
    \ would be a\n   non-empty To tag in the request.\nMessage One (F1)\nREFER sip:b@atlanta.example.com\
    \ SIP/2.0\nVia: SIP/2.0/UDP agenta.atlanta.example.com;branch=z9hG4bK2293940223\n\
    To: <sip:b@atlanta.example.com>\nFrom: <sip:a@atlanta.example.com>;tag=193402342\n\
    Call-ID: 898234234@agenta.atlanta.example.com\nCSeq: 93809823 REFER\nMax-Forwards:\
    \ 70\nRefer-To: (whatever URI)\nContact: sip:a@atlanta.example.com\nContent-Length:\
    \ 0\nMessage Two (F2)\nSIP/2.0 202 Accepted\nVia: SIP/2.0/UDP agenta.atlanta.example.com;branch=z9hG4bK2293940223\n\
    To: <sip:b@atlanta.example.com>;tag=4992881234\nFrom: <sip:a@atlanta.example.com>;tag=193402342\n\
    Call-ID: 898234234@agenta.atlanta.example.com\nCSeq: 93809823 REFER\nContact:\
    \ sip:b@atlanta.example.com\nContent-Length: 0\nMessage Three (F3)\nNOTIFY sip:a@atlanta.example.com\
    \ SIP/2.0\nVia: SIP/2.0/UDP agentb.atlanta.example.com;branch=z9hG4bK9922ef992-25\n\
    To: <sip:a@atlanta.example.com>;tag=193402342\nFrom: <sip:b@atlanta.example.com>;tag=4992881234\n\
    Call-ID: 898234234@agenta.atlanta.example.com\nCSeq: 1993402 NOTIFY\nMax-Forwards:\
    \ 70\nEvent: refer\nSubscription-State: active;expires=(depends on Refer-To URI)\n\
    Contact: sip:b@atlanta.example.com\nContent-Type: message/sipfrag;version=2.0\n\
    Content-Length: 20\nSIP/2.0 100 Trying\nMessage Four (F4)\nSIP/2.0 200 OK\nVia:\
    \ SIP/2.0/UDP agentb.atlanta.example.com;branch=z9hG4bK9922ef992-25\nTo: <sip:a@atlanta.example.com>;tag=193402342\n\
    From: <sip:b@atlanta.example.com>;tag=4992881234\nCall-ID: 898234234@agenta.atlanta.example.com\n\
    CSeq: 1993402 NOTIFY\nContact: sip:a@atlanta.example.com\nContent-Length: 0\n\
    Message Five (F5)\nNOTIFY sip:a@atlanta.example.com SIP/2.0\nVia: SIP/2.0/UDP\
    \ agentb.atlanta.example.com;branch=z9hG4bK9323394234\nTo: <sip:a@atlanta.example.com>;tag=193402342\n\
    From: <sip:b@atlanta.example.com>;tag=4992881234\nCall-ID: 898234234@agenta.atlanta.example.com\n\
    CSeq: 1993403 NOTIFY\nMax-Forwards: 70\nEvent: refer\nSubscription-State: terminated;reason=noresource\n\
    Contact: sip:b@atlanta.example.com\nContent-Type: message/sipfrag;version=2.0\n\
    Content-Length: 16\nSIP/2.0 200 OK\nMessage Six (F6)\nSIP/2.0 200 OK\nVia: SIP/2.0/UDP\
    \ agentb.atlanta.example.com;branch=z9hG4bK9323394234\nTo: <sip:a@atlanta.example.com>;tag=193402342\n\
    From: <sip:b@atlanta.example.com>;tag=4992881234\nCall-ID: 898234234@agenta.atlanta.example.com\n\
    CSeq: 1993403 NOTIFY\nContact: sip:a@atlanta.example.com\nContent-Length: 0\n\
    4.2 Multiple REFERs in a dialog\n   Message One above brings an implicit subscription\
    \ dialog into\n   existence.  Suppose Agent A issued a second REFER inside that\
    \ dialog:\n   Agent A                  Agent B\n      |                      \
    \  |\n      |   F7 REFER             |\n      |----------------------->|\n   \
    \   |        F8 202 Accepted |\n      |<-----------------------|\n      |    \
    \    F9 NOTIFY       |\n      |<-----------------------|\n      |  F10 200 OK\
    \            |\n      |----------------------->|\n      |                    \
    \    |------->\n      |                        |  (something different)\n    \
    \  |                        |<------\n      |                        |\n     \
    \ |         F11 NOTIFY     |\n      |<-----------------------|\n      |   F12\
    \ 200 OK           |\n      |----------------------->|\n      |              \
    \          |\n      |                        |\nMessage Seven (F7)\nREFER sip:b@atlanta.example.com\
    \ SIP/2.0\nVia: SIP/2.0/UDP agenta.atlanta.example.com;branch=z9hG4bK9390399231\n\
    To: <sip:b@atlanta.example.com>;tag=4992881234\nFrom: <sip:a@atlanta.example.com>;tag=193402342\n\
    Call-ID: 898234234@agenta.atlanta.example.com\nCSeq: 93809824 REFER\nMax-Forwards:\
    \ 70\nRefer-To: (some different URI)\nContact: sip:a@atlanta.example.com\nContent-Length:\
    \ 0\nMessage Eight (F8)\nSIP/2.0 202 Accepted\nVia: SIP/2.0/UDP agenta.atlanta.example.com;branch=z9hG4bK9390399231\n\
    To: <sip:b@atlanta.example.com>;tag=4992881234\nFrom: <sip:a@atlanta.example.com>;tag=193402342\n\
    Call-ID: 898234234@agenta.atlanta.example.com\nCSeq: 93809824 REFER\nContact:\
    \ sip:b@atlanta.example.com\nContent-Length: 0\nMessage Nine (F9)\nNOTIFY sip:a@atlanta.example.com\
    \ SIP/2.0\nVia: SIP/2.0/UDP agentb.atlanta.example.com;branch=z9hG4bK9320394238995\n\
    To: <sip:a@atlanta.example.com>;tag=193402342\nFrom: <sip:b@atlanta.example.com>;tag=4992881234\n\
    Call-ID: 898234234@agenta.atlanta.example.com\nCSeq: 1993404 NOTIFY\nMax-Forwards:\
    \ 70\nEvent: refer;id=93809824\nSubscription-State: active;expires=(depends on\
    \ Refer-To URI)\nContact: sip:b@atlanta.example.com\nContent-Type: message/sipfrag;version=2.0\n\
    Content-Length: 20\nSIP/2.0 100 Trying\nMessage Ten (F10)\nSIP/2.0 200 OK\nVia:\
    \ SIP/2.0/UDP agentb.atlanta.example.com;branch=z9hG4bK9320394238995\nTo: <sip:a@atlanta.example.com>;tag=193402342\n\
    From: <sip:b@atlanta.example.com>;tag=4992881234\nCall-ID: 898234234@agenta.atlanta.example.com\n\
    CSeq: 1993404 NOTIFY\nContact: sip:a@atlanta.example.com\nContent-Length: 0\n\
    Message Eleven (F11)\nNOTIFY sip:a@atlanta.example.com SIP/2.0\nVia: SIP/2.0/UDP\
    \ agentb.atlanta.example.com;branch=z9hG4bK2994a93eb-fe\nTo: <sip:a@atlanta.example.com>;tag=193402342\n\
    From: <sip:b@atlanta.example.com>;tag=4992881234\nCall-ID: 898234234@agenta.atlanta.example.com\n\
    CSeq: 1993405 NOTIFY\nMax-Forwards: 70\nEvent: refer;id=93809824\nSubscription-State:\
    \ terminated;reason=noresource\nContact: sip:b@atlanta.example.com\nContent-Type:\
    \ message/sipfrag;version=2.0\nContent-Length: 16\nSIP/2.0 200 OK\nMessage Twelve\
    \ (F12)\nSIP/2.0 200 OK\nVia: SIP/2.0/UDP agentb.atlanta.example.com;branch=z9hG4bK2994a93eb-fe\n\
    To: <sip:a@atlanta.example.com>;tag=193402342\nFrom: <sip:b@atlanta.example.com>;tag=4992881234\n\
    Call-ID: 898234234@agenta.atlanta.example.com\nCSeq: 1993405 NOTIFY\nContact:\
    \ sip:a@atlanta.example.com\nContent-Length: 0\n5. Security Considerations\n \
    \  The security considerations described in Section 26 of [1] apply to\n   the\
    \ REFER transaction.  In particular, the implementation\n   requirements and considerations\
    \ in Section 26.3 address securing a\n   generic SIP transaction.  Special consideration\
    \ is warranted for the\n   authorization polices applied to REFER requests and\
    \ for the use of\n   message/sipfrag to convey the results of the referenced request.\n\
    5.1 Constructing a Refer-To URI\n   This mechanism relies on providing contact\
    \ information for the\n   referred-to resource to the party being referred.  Care\
    \ should be\n   taken to provide a suitably restricted URI if the referred-to\n\
    \   resource should be protected.\n5.2 Authorization Considerations for REFER\n\
    \   As described in Section 2.4.2, an implementation can receive a REFER\n   requests\
    \ with a Refer-To URI containing an arbitrary scheme.  For\n   instance, a user\
    \ could be referred to an online service such as a MUD\n   using a telnet URI.\
    \  Customer service could refer a customer to an\n   order tracking web page using\
    \ an HTTP URI.  Section 2.4.2 allows a\n   user agent to reject a REFER request\
    \ when it can not process the\n   referenced scheme.  It also requires the user\
    \ agent to obtain\n   authorization from its user before attempting to use the\
    \ URI.\n   Generally, this could be achieved by prompting the user with the full\n\
    \   URI and a question such as \"Do you wish to access this resource\n   (Y/N)\"\
    .  Of course, URIs can be arbitrarily long and are occasionally\n   constructed\
    \ with malicious intent, so care should be taken to avoid\n   surprise even in\
    \ the display of the URI itself (such as partial\n   display or crashing).  Further,\
    \ care should be taken to expose as\n   much information about the reference as\
    \ possible to the user to\n   mitigate the risk of being misled into a dangerous\
    \ decision.  For\n   instance, the Refer-To header may contain a display name\
    \ along with\n   the URI.  Nothing ensures that any property implied by that display\n\
    \   name is shared by the URI.  For instance, the display name may\n   contain\
    \ \"secure\" or \"president\" and when the URI indicates\n   sip:agent59@telemarketing.example.com.\
    \  Thus, prompting the user with\n   the display name alone is insufficient.\n\
    \   In some cases, the user can provide authorization for some REFER\n   requests\
    \ ahead of time by providing policy to the user agent.  This\n   is appropriate,\
    \ for instance, for call transfer as discussed in [4].\n   Here, a properly authenticated\
    \ REFER request within an existing SIP\n   dialog to a sip:, sips:, or tel: URI\
    \ may be accepted through policy\n   without interactively obtaining the user's\
    \ authorization.  Similarly,\n   it may be appropriate to accept a properly authenticated\
    \ REFER to an\n   HTTP URI if the referror is on an explicit list of approved\n\
    \   referrors.  In the absence of such pre-provided authorization, the\n   user\
    \ must interactively provide authorization to reference the\n   indicated resource.\n\
    \   To see the danger of a policy that blindly accepts and acts on an\n   HTTP\
    \ URI, for example, consider a web server configured to accept\n   requests only\
    \ from clients behind a small organization's firewall.\n   As it sits in this\
    \ soft-creamy-middle environment where the small\n   organization trusts all its\
    \ members and has little internal security,\n   the web server is frequently behind\
    \ on maintenance, leaving it\n   vulnerable to attack through maliciously constructed\
    \ URIs (resulting\n   perhaps in running arbitrary code provided in the URI).\
    \  If a SIP UA\n   inside this firewall blindly accepted a reference to an arbitrary\n\
    \   HTTP URI, an attacker outside the firewall could compromise the web\n   server.\
    \  On the other hand, if the UA's user has to take positive\n   action (such as\
    \ responding to a prompt) before acting on this URI,\n   the risk is reduced to\
    \ the same level as the user clicking on the URI\n   in a web-browser or email\
    \ message.\n   The conclusion in the above paragraph generalizes to URIs with\
    \ an\n   arbitrary scheme.  An agent that takes automated action to access a\n\
    \   URI with a given scheme risks being used to indirectly attack another\n  \
    \ host that is vulnerable to some security flaw related to that scheme.\n   This\
    \ risk and the potential for harm to that other host is heightened\n   when the\
    \ host and agent reside behind a common policy-enforcement\n   point such as a\
    \ firewall.  Furthermore, this agent increases its\n   exposure to denial of service\
    \ attacks through resource exhaustion,\n   especially if each automated action\
    \ involves opening a new\n   connection.\n   User agents should take care when\
    \ handing an arbitrary URI to a\n   third-party service such as that provided\
    \ by some modern operating\n   systems, particularly if the user agent is not\
    \ aware of the scheme\n   and the possible ramifications using the protocols it\
    \ indicates.  The\n   opportunity for violating the principal of least surprise\
    \ is very\n   high.\n5.3 Considerations for the use of message/sipfrag\n   Using\
    \ message/sipfrag bodies to return the progress and results of a\n   REFER request\
    \ is extremely powerful.  Careless use of that capability\n   can compromise confidentiality\
    \ and privacy.  Here are a couple of\n   simple, somewhat contrived, examples\
    \ to demonstrate the potential for\n   harm.\n5.3.1 Circumventing Privacy\n  \
    \ Suppose Alice has a user agent that accepts REFER requests to SIP\n   INVITE\
    \ URIs, and NOTIFYs the referrer of the progress of the INVITE\n   by copying\
    \ each response to the INVITE into the body of a NOTIFY.\n   Suppose further that\
    \ Carol has a reason to avoid Mallory and has\n   configured her system at her\
    \ proxy to only accept calls from a\n   certain set of people she trusts (including\
    \ Alice), so that Mallory\n   doesn't learn when she's around, or what user agent\
    \ she's actually\n   using.\n   Mallory can send a REFER to Alice, with a Refer-To\
    \ URI indicating\n   Carol.  If Alice can reach Carol, the 200 OK Carol sends\
    \ gets\n   returned to Mallory in a NOTIFY, letting him know not only that Carol\n\
    \   is around, but also the IP address of the agent she's using.\n5.3.2 Circumventing\
    \ Confidentiality\n   Suppose Alice, with the same user agent as above, is working\
    \ at a\n   company that is working on the greatest SIP device ever invented -\n\
    \   the SIP FOO.  The company has been working for months building the\n   device\
    \ and the marketing materials, carefully keeping the idea, even\n   the name of\
    \ the idea secret (since a FOO is one of those things that\n   anybody could do\
    \ if they'd just had the idea first).  FOO is up and\n   running, and anyone at\
    \ the company can use it, but it's not available\n   outside the company firewall.\n\
    \   Mallory has heard rumor that Alice's company is onto something big,\n   and\
    \ has even managed to get his hands on a URI that he suspects might\n   have something\
    \ to do with it.  He sends a REFER to ALICE with the\n   mysterious URI and as\
    \ Alice connects to the FOO, Mallory gets NOTIFYs\n   with bodies containing\n\
    \   Server: FOO/v0.9.7\n5.3.3 Limiting the Breach\n   For each of these cases,\
    \ and in general, returning a carefully\n   selected subset of the information\
    \ available about the progress of\n   the reference through the NOTIFYs mitigates\
    \ risk.  The minimal\n   implementation described in Section 2.4.5 exposes the\
    \ least\n   information about what the agent operating on the REFER request has\n\
    \   done, and is least likely to be a useful tool for malicious users.\n5.3.4\
    \ Cut, Paste and Replay Considerations\n   The mechanism defined in this specification\
    \ is not directly\n   susceptible to abuse through copying the message/sipfrag\
    \ bodies from\n   NOTIFY requests and inserting them, in whole or in part, in\
    \ future\n   NOTIFY requests associated with the same or a different REFER.  Under\n\
    \   this specification the agent replying to the REFER request is in\n   complete\
    \ control of the content of the bodies of the NOTIFY it sends.\n   There is no\
    \ mechanism defined here requiring this agent to faithfully\n   forward any information\
    \ from the referenced party.  Thus, saving a\n   body for later replay gives the\
    \ agent no more ability to affect the\n   mechanism defined in this document at\
    \ its peer than it has without\n   that body.  Similarly, capture of a message/sipfrag\
    \ body by\n   eavesdroppers will give them no more ability to affect this mechanism\n\
    \   than they would have without it.\n   Future extensions may place additional\
    \ constraints on the agent\n   responding to REFER to allow using the message/sipfrag\
    \ body part in a\n   NOTIFY to make statements like \"I contacted the party you\
    \ referred me\n   to, and here's cryptographic proof\".  These statements might\
    \ be used\n   to affect the behavior of the receiving UA.  This kind of extension\n\
    \   will need to define additional mechanism to protect itself from copy\n   based\
    \ attacks.\n6. Historic Material\n   This method was initially motivated by the\
    \ call-transfer application.\n   Starting as TRANSFER, and later generalizing\
    \ to REFER, this method\n   improved on the BYE/Also concept of the expired draft-ietf-sip-cc-01\n\
    \   by disassociating transfers from the processing of BYE.  These\n   changes\
    \ facilitate recovery of failed transfers and clarify state\n   management in\
    \ the participating entities.\n   Early versions of this work required the agent\
    \ responding to REFER to\n   wait until the referred action completed before sending\
    \ a final\n   response to the REFER.  That final response reflected the success\
    \ or\n   failure of the referred action.  This was infeasible due to the\n   transaction\
    \ timeout rules defined for non-INVITE requests in [1].  A\n   REFER must always\
    \ receive an immediate (within the lifetime of a\n   non-INVITE transaction) final\
    \ response.\n7. IANA Considerations\n   This document defines a new SIP method\
    \ name (REFER), a new SIP header\n   field name with a compact form (Refer-To\
    \ and r respectively), and an\n   event package (refer).\n   The following has\
    \ been added to the method sub-registry under\n   http://www.iana.org/assignments/sip-parameters.\n\
    \      REFER              [RFC3515]\n   The following information also has been\
    \ be added to the header sub-\n   registry under http://www.iana.org/assignments/sip-parameters.\n\
    \      Header Name: Refer-To\n      Compact Form: r\n      Reference: RFC 3515\n\
    \   This specification registers an event package, based on the\n   registration\
    \ procedures defined in [2].  The following is the\n   information required for\
    \ such a registration:\n      Package Name: refer\n      Package or Package-Template:\
    \ This is a package.\n      Published Specification: RFC 3515\n      Person to\
    \ Contact: Robert Sparks, rsparks@dynamicsoft.com\n8. Acknowledgments\n   This\
    \ document is a collaborative product of the SIP working group.\n9.   References\n\
    9.1  Normative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M. and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \  Roach, A. B., \"Session Initiation Protocol (SIP)-Specific Event\n        Notification\"\
    , RFC 3265, June 2002.\n   [3]  Sparks, R., \"Internet Media Type message/sipfrag\"\
    , RFC 3420,\n        November 2002.\n9.2  Informative References\n   [4]  Sparks,\
    \ R. and A. Johnston, \"Session Initiation Protocol Call\n        Control - Transfer\"\
    , Work in Progress.\n10.  Intellectual Property Statement\n   The IETF takes no\
    \ position regarding the validity or scope of any\n   intellectual property or\
    \ other rights that might be claimed to\n   pertain to the implementation or use\
    \ of the technology described in\n   this document or the extent to which any\
    \ license under such rights\n   might or might not be available; neither does\
    \ it represent that it\n   has made any effort to identify any such rights.  Information\
    \ on the\n   IETF's procedures with respect to rights in standards-track and\n\
    \   standards-related documentation can be found in BCP-11.  Copies of\n   claims\
    \ of rights made available for publication and any assurances of\n   licenses\
    \ to be made available, or the result of an attempt made to\n   obtain a general\
    \ license or permission for the use of such\n   proprietary rights by implementors\
    \ or users of this specification can\n   be obtained from the IETF Secretariat.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights which may cover\
    \ technology that may be required to practice\n   this standard.  Please address\
    \ the information to the IETF Executive\n   Director.\n11.  Author's Address\n\
    \   Robert J. Sparks\n   dynamicsoft\n   5100 Tennyson Parkway\n   Suite 1200\n\
    \   Plano, TX  75024\n   EMail: rsparks@dynamicsoft.com\n12.  Full Copyright Statement\n\
    \   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n   This\
    \ document and translations of it may be copied and furnished to\n   others, and\
    \ derivative works that comment on or otherwise explain it\n   or assist in its\
    \ implementation may be prepared, copied, published\n   and distributed, in whole\
    \ or in part, without restriction of any\n   kind, provided that the above copyright\
    \ notice and this paragraph are\n   included on all such copies and derivative\
    \ works.  However, this\n   document itself may not be modified in any way, such\
    \ as by removing\n   the copyright notice or references to the Internet Society\
    \ or other\n   Internet organizations, except as needed for the purpose of\n \
    \  developing Internet standards in which case the procedures for\n   copyrights\
    \ defined in the Internet Standards process must be\n   followed, or as required\
    \ to translate it into languages other than\n   English.\n   The limited permissions\
    \ granted above are perpetual and will not be\n   revoked by the Internet Society\
    \ or its successors or assigns.\n   This document and the information contained\
    \ herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY AND THE\
    \ INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,\
    \ INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n\
    \   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\nAcknowledgement\n   Funding for the RFC\
    \ Editor function is currently provided by the\n   Internet Society.\n"
