- contents:
  - "            Using ChaCha20-Poly1305 Authenticated Encryption\n               in
    the Cryptographic Message Syntax (CMS)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes the conventions for using ChaCha20-Poly1305\n
    \  Authenticated Encryption in the Cryptographic Message Syntax (CMS).\n   ChaCha20-Poly1305
    is an authenticated encryption algorithm\n   constructed of the ChaCha stream
    cipher and Poly1305 authenticator.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8103.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. The ChaCha20 and Poly1305 AEAD Construction ................3\n      1.2.
    ASN.1 ......................................................3\n      1.3. Terminology
    ................................................3\n   2. Key Management ..................................................4\n
    \  3. Using the AEAD_CHACHA20_POLY1305 Algorithm with\n      AuthEnvelopedData
    ...............................................4\n   4. S/MIME Capabilities Attribute
    ...................................5\n   5. IANA Considerations .............................................6\n
    \  6. Security Considerations .........................................6\n   7.
    References ......................................................7\n      7.1.
    Normative References .......................................7\n      7.2. Informative
    References .....................................8\n   Appendix A. ASN.1 Module
    ...........................................9\n   Acknowledgements ...................................................9\n
    \  Author's Address ...................................................9\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies the conventions for using ChaCha20-Poly1305\n
    \  Authenticated Encryption with the Cryptographic Message Syntax (CMS)\n   [CMS]
    authenticated-enveloped-data content type [AUTHENV].\n   ChaCha [CHACHA] is a
    stream cipher developed by D. J. Bernstein in\n   2008.  It is a refinement of
    Salsa20, which is one of the ciphers in\n   the eSTREAM portfolio [ESTREAM].\n
    \  ChaCha20 is the 20-round variant of ChaCha; it requires a 256-bit key\n   and
    a 96-bit nonce.  [FORIETF] provides a detailed algorithm\n   description, examples,
    and test vectors of ChaCha20.\n   Poly1305 [POLY1305] is a Wegman-Carter, one-time
    authenticator\n   designed by D. J. Bernstein.  Poly1305 produces a 16-byte\n
    \  authentication tag; it requires a 256-bit, single-use key.  [FORIETF]\n   also
    provides a detailed algorithm description, examples, and test\n   vectors of Poly1305.\n
    \  ChaCha20 and Poly1305 have been designed for high-performance\n   software
    implementations.  They can typically be implemented with few\n   resources and
    inexpensive operations, making them suitable on a wide\n   range of systems.  They
    have also been designed to minimize leakage\n   of information through side channels.\n"
  - contents:
    - "1.1.  The ChaCha20 and Poly1305 AEAD Construction\n   ChaCha20 and Poly1305
      have been combined to create an Authenticated\n   Encryption with Associated
      Data (AEAD) algorithm [AEAD].  This AEAD\n   algorithm is often referred to
      as AEAD_CHACHA20_POLY1305, and it is\n   described in [FORIETF].\n   AEAD_CHACHA20_POLY1305
      accepts four inputs: a 256-bit key, a 96-bit\n   nonce, an arbitrary-length
      plaintext, and an arbitrary-length\n   additional authenticated data (AAD).
      \ As the name implies, a nonce\n   value cannot be used securely more than once
      with the same key.\n   AEAD_CHACHA20_POLY1305 produces two outputs: ciphertext
      of the same\n   length as the plaintext and a 128-bit authentication tag.\n
      \  AEAD_CHACHA20_POLY1305 authenticated decryption processing is similar\n   to
      the encryption processing.  Of course, the roles of ciphertext and\n   plaintext
      are reversed, so the ChaCha20 encryption function is\n   applied to the ciphertext,
      producing the plaintext.  The Poly1305\n   function is run over the AAD and
      the ciphertext, not the plaintext,\n   and the resulting authentication tag
      is bitwise compared to the\n   received authentication tag.  The message is
      authenticated if and\n   only if the calculated and received authentication
      tags match.\n"
    title: 1.1.  The ChaCha20 and Poly1305 AEAD Construction
  - contents:
    - "1.2.  ASN.1\n   CMS values are generated using ASN.1 [X680], which uses the
      Basic\n   Encoding Rules (BER) and the Distinguished Encoding Rules (DER)\n
      \  [X690].\n"
    title: 1.2.  ASN.1
  - contents:
    - "1.3.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
      2119 [STDWORDS].\n"
    title: 1.3.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Key Management\n   The reuse of an AEAD_CHACHA20_POLY1305 nonce value with
    the same key\n   destroys the security guarantees.  It can be extremely difficult
    to\n   use a statically configured AEAD_CHACHA20_POLY1305 key and never\n   repeat
    a nonce value; however, the CMS authenticated-enveloped-data\n   content type
    supports four key management techniques that allow a\n   fresh AEAD_CHACHA20_POLY1305
    key to be used as the\n   content-authenticated-encryption key for a single protected
    content:\n      Key Transport: the fresh content-authenticated-encryption key
    is\n         encrypted in the recipient's public key;\n      Key Agreement: the
    recipient's public key and the sender's private\n         key are used to generate
    a pairwise symmetric key-encryption\n         key, then the fresh content-authenticated-encryption
    key is\n         encrypted in the pairwise symmetric key;\n      Symmetric Key-Encryption
    Keys: the fresh content-authenticated-\n         encryption key is encrypted in
    a previously distributed\n         symmetric key-encryption key; and\n      Passwords:
    the fresh content-authenticated-encryption key is\n         encrypted in a key-encryption
    key that is derived from a\n         password or other shared secret value.\n
    \  In addition to these four general key management techniques, CMS\n   supports
    other key management techniques.  See Section 6.2.5 of\n   [CMS].  Since the properties
    of these key management techniques are\n   unknown, no statement about their support
    of fresh\n   content-authenticated-encryption keys can be made.  Designers and\n
    \  implementers must perform their own analysis if one of these other\n   key
    management techniques is supported.\n"
  title: 2.  Key Management
- contents:
  - "3.  Using the AEAD_CHACHA20_POLY1305 Algorithm with AuthEnvelopedData\n   This
    section specifies the conventions employed by CMS\n   implementations that support
    the authenticated-enveloped-data content\n   type and the AEAD_CHACHA20_POLY1305
    algorithm.\n   The AEAD_CHACHA20_POLY1305 algorithm identifier is located in the\n
    \  AuthEnvelopedData EncryptedContentInfo contentEncryptionAlgorithm\n   field.\n
    \  The AEAD_CHACHA20_POLY1305 algorithm is used to (1) authenticate the\n   attributes
    located in the AuthEnvelopedData authAttrs field, if any\n   are present, (2)
    encipher the content located in the\n   AuthEnvelopedData EncryptedContentInfo
    encryptedContent field, and\n   (3) provide the message authentication code (MAC)
    located in the\n   AuthEnvelopedData mac field.  The authenticated attributes
    are\n   DER encoded to produce the AAD input value to the\n   AEAD_CHACHA20_POLY1305
    algorithm.  The ciphertext and the MAC are the\n   two outputs of the AEAD_CHACHA20_POLY1305
    algorithm.  Note that the\n   MAC, which is called the authentication tag in [FORIETF],
    provides\n   integrity protection for both the AuthEnvelopedData authAttrs and
    the\n   AuthEnvelopedData EncryptedContentInfo encryptedContent.\n   Neither the
    plaintext content nor the optional AAD inputs need to be\n   padded prior to invoking
    the AEAD_CHACHA20_POLY1305 algorithm.\n   There is one algorithm identifier for
    the AEAD_CHACHA20_POLY1305\n   algorithm:\n      id-alg-AEADChaCha20Poly1305 OBJECT
    IDENTIFIER ::=\n          { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n
    \           pkcs9(9) smime(16) alg(3) 18 }\n   The AlgorithmIdentifier parameters
    field MUST be present, and the\n   parameters field MUST contain an AEADChaCha20Poly1305Nonce:\n
    \     AEADChaCha20Poly1305Nonce ::= OCTET STRING (SIZE(12))\n   The AEADChaCha20Poly1305Nonce
    contains a 12-octet nonce.  With the\n   CMS, the content-authenticated-encryption
    key is normally used for a\n   single content.  Within the scope of any content-authenticated-\n
    \  encryption key, the nonce value MUST be unique.  That is, the set of\n   nonce
    values used with any given key MUST NOT contain any duplicate\n   values.\n"
  title: 3.  Using the AEAD_CHACHA20_POLY1305 Algorithm with AuthEnvelopedData
- contents:
  - "4.  S/MIME Capabilities Attribute\n   Section 2.5.2 of RFC 5751 [MSG] defines
    the SMIMECapabilities\n   attribute, which is used to specify a partial list of
    algorithms that\n   the software announcing the SMIMECapabilities can support.
    \ When\n   constructing a CMS signed-data content type, compliant software MAY\n
    \  include the SMIMECapabilities signed attribute to announce support\n   for
    the AEAD_CHACHA20_POLY1305 algorithm.\n   The SMIMECapability SEQUENCE representing
    the AEAD_CHACHA20_POLY1305\n   algorithm MUST include the id-alg-AEADChaCha20Poly1305
    object\n   identifier in the capabilityID field and MUST omit the parameters\n
    \  field.\n   The DER encoding of an SMIMECapability SEQUENCE is the same as the\n
    \  DER encoding of an AlgorithmIdentifier.  The DER encoding for the\n   AEAD_CHACHA20_POLY1305
    algorithm in the SMIMECapability SEQUENCE (in\n   hexadecimal) is:\n      30 0d
    06 0b 2a 86 48 86 f7 0d 01 09 10 03 12\n"
  title: 4.  S/MIME Capabilities Attribute
- contents:
  - "5.  IANA Considerations\n   IANA has added the following entry in the \"SMI Security
    for S/MIME\n   Algorithms (1.2.840.113549.1.9.16.3)\" registry:\n      18   id-alg-AEADChaCha20Poly1305
    \        RFC 8103\n   IANA has added the following entry in the \"SMI Security
    for S/MIME\n   Module Identifier (1.2.840.113549.1.9.16.0)\" registry:\n      66
    \  id-mod-CMS-AEADChaCha20Poly1305     RFC 8103\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The CMS AuthEnvelopedData provides all of the
    tools needed to avoid\n   reuse of the same nonce value under the same key.  See
    the discussion\n   in Section 2 of this document.  RFC 7539 [FORIETF] describes
    the\n   consequences of using a nonce value more than once:\n      Consequences
    of repeating a nonce: If a nonce is repeated, then\n      both the one-time Poly1305
    key and the keystream are identical\n      between the messages.  This reveals
    the XOR of the plaintexts,\n      because the XOR of the plaintexts is equal to
    the XOR of the\n      ciphertexts.\n   When using AEAD_CHACHA20_POLY1305, the
    resulting ciphertext is always\n   the same size as the original plaintext.  Some
    other mechanism needs\n   to be used in conjunction with AEAD_CHACHA20_POLY1305
    if disclosure\n   of the size of the plaintext is a concern.\n   The amount of
    encrypted data possible in a single invocation of\n   AEAD_CHACHA20_POLY1305 is
    2^32-1 blocks of 64 octets each, because of\n   the size of the block counter
    field in the ChaCha20 block function.\n   This gives a total of 247,877,906,880
    octets, which is likely to be\n   sufficient to handle the size of any CMS content
    type.  Note that the\n   ciphertext length field in the authentication buffer
    will accommodate\n   2^64 octets, which is much larger than necessary.\n   The
    AEAD_CHACHA20_POLY1305 construction is a novel composition of\n   ChaCha20 and
    Poly1305.  A security analysis of this composition is\n   given in [PROCTER].\n
    \  Implementations must randomly generate content-authenticated-\n   encryption
    keys.  The use of inadequate pseudorandom number\n   generators (PRNGs) to generate
    cryptographic keys can result in\n   little or no security.  An attacker may find
    it much easier to\n   reproduce the PRNG environment that produced the keys, searching
    the\n   resulting small set of possibilities rather than \"brute force\"\n   searching
    the whole key space.  The generation of quality random\n   numbers is difficult.
    \ RFC 4086 [RANDOM] offers important guidance in\n   this area.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [AUTHENV]  Housley, R., \"Cryptographic Message
      Syntax (CMS)\n              Authenticated-Enveloped-Data Content Type\", RFC
      5083,\n              DOI 10.17487/RFC5083, November 2007,\n              <http://www.rfc-editor.org/info/rfc5083>.\n
      \  [CMS]      Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n
      \             RFC 5652, DOI 10.17487/RFC5652, September 2009,\n              <http://www.rfc-editor.org/info/rfc5652>.\n
      \  [FORIETF]  Nir, Y. and A. Langley, \"ChaCha20 and Poly1305 for IETF\n              Protocols\",
      RFC 7539, DOI 10.17487/RFC7539, May 2015,\n              <http://www.rfc-editor.org/info/rfc7539>.\n
      \  [MSG]      Ramsdell, B. and S. Turner, \"Secure/Multipurpose Internet\n              Mail
      Extensions (S/MIME) Version 3.2 Message\n              Specification\", RFC
      5751, DOI 10.17487/RFC5751,\n              January 2010, <http://www.rfc-editor.org/info/rfc5751>.\n
      \  [STDWORDS] Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [X680]     ITU-T,
      \"Information technology - Abstract Syntax Notation\n              One (ASN.1):
      Specification of basic notation\", ITU-T\n              Recommendation X.680,
      ISO/IEC 8824-1, August 2015,\n              <https://www.itu.int/rec/T-REC-X.680/en>.\n
      \  [X690]     ITU-T, \"Information technology - ASN.1 encoding rules:\n              Specification
      of Basic Encoding Rules (BER), Canonical\n              Encoding Rules (CER)
      and Distinguished Encoding Rules\n              (DER)\", ITU-T Recommendation
      X.690, ISO/IEC 8825-1,\n              August 2015, <https://www.itu.int/rec/T-REC-X.690/en>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [AEAD]     McGrew, D., \"An Interface and
      Algorithms for Authenticated\n              Encryption\", RFC 5116, DOI 10.17487/RFC5116,
      January 2008,\n              <http://www.rfc-editor.org/info/rfc5116>.\n   [CHACHA]
      \  Bernstein, D., \"ChaCha, a variant of Salsa20\",\n              January 2008,\n
      \             <http://cr.yp.to/chacha/chacha-20080128.pdf>.\n   [ESTREAM]  Babbage,
      S., DeCanniere, C., Cantenaut, A., Cid, C.,\n              Gilbert, H., Johansson,
      T., Parker, M., Preneel, B.,\n              Rijmen, V., and M. Robshaw, \"The
      eSTREAM Portfolio\n              (rev. 1)\", September 2008,\n              <http://www.ecrypt.eu.org/stream/finallist.html>.\n
      \  [POLY1305] Bernstein, D., \"The Poly1305-AES message-authentication\n              code\",
      March 2005,\n              <http://cr.yp.to/mac/poly1305-20050329.pdf>.\n   [PROCTER]
      \ Procter, G., \"A Security Analysis of the Composition of\n              ChaCha20
      and Poly1305\", August 2014,\n              <http://eprint.iacr.org/2014/613.pdf>.\n
      \  [RANDOM]   Eastlake 3rd, D., Schiller, J., and S. Crocker,\n              \"Randomness
      Requirements for Security\", BCP 106, RFC 4086,\n              DOI 10.17487/RFC4086,
      June 2005,\n              <http://www.rfc-editor.org/info/rfc4086>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  ASN.1 Module\n   CMS-AEADChaCha20Poly1305\n       { iso(1) member-body(2)
    us(840) rsadsi(113549) pkcs(1)\n         pkcs-9(9) smime(16) modules(0) 66 }\n
    \  DEFINITIONS IMPLICIT TAGS ::= BEGIN\n   IMPORTS\n      CONTENT-ENCRYPTION\n
    \     FROM AlgorithmInformation-2009\n          { iso(1) identified-organization(3)
    dod(6) internet(1)\n            security(5) mechanisms(5) pkix(7) id-mod(0)\n
    \           id-mod-algorithmInformation-02(58) };\n   -- EXPORTS All\n   AEADContentEncryptionAlgs
    CONTENT-ENCRYPTION ::=\n       { cea-AEADChaCha20Poly1305, ... }\n   cea-AEADChaCha20Poly1305
    CONTENT-ENCRYPTION ::= {\n       IDENTIFIER id-alg-AEADChaCha20Poly1305\n       PARAMS
    TYPE AEADChaCha20Poly1305Nonce ARE required\n       SMIME-CAPS { IDENTIFIED BY
    id-alg-AEADChaCha20Poly1305 } }\n   id-alg-AEADChaCha20Poly1305 OBJECT IDENTIFIER
    ::=\n       { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n         pkcs9(9)
    smime(16) alg(3) 18 }\n   AEADChaCha20Poly1305Nonce ::= OCTET STRING (SIZE(12))\n
    \  END\n"
  title: Appendix A.  ASN.1 Module
- contents:
  - "Acknowledgements\n   Thanks to Jim Schaad, Daniel Migault, Stephen Farrell, Yoav
    Nir, and\n   Niclas Comstedt for their review and insightful comments.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Russell Housley\n   Vigil Security, LLC\n   918 Spring Knoll
    Drive\n   Herndon, VA  20170\n   United States of America\n   Email: housley@vigilsec.com\n"
  title: Author's Address
