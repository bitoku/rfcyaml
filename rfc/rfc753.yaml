- title: __initial_text__
  contents:
  - ''
- title: 'IEN: 85'
  contents:
  - "IEN: 85\n                       INTERNET MESSAGE PROTOCOL\n                 \
    \          Jonathan B. Postel\n                               March 1979\n   \
    \                  Information Sciences Institute\n                   University\
    \ of Southern California\n                           4676 Admiralty Way\n    \
    \                                           Internet Message Protocol\n      \
    \                     TABLE OF CONTENTS\n    PREFACE ........................................................\
    \ iii\n"
- title: 1.  INTRODUCTION ..................................................... 1
  contents:
  - "1.  INTRODUCTION ..................................................... 1\n  1.1.\
    \  Motivation ................................................... 1\n  1.2.  Scope\
    \ ........................................................ 1\n  1.3.  The Internetwork\
    \ Environment ................................. 2\n  1.4.  Operation ....................................................\
    \ 2\n  1.5.  Interfaces ................................................... 3\n"
- title: 2.  FUNCTIONAL DESCRIPTION ........................................... 5
  contents:
  - "2.  FUNCTIONAL DESCRIPTION ........................................... 5\n  2.1.\
    \  Relation to Other Protocols .................................. 5\n  2.2.  Terminology\
    \  ................................................. 5\n  2.3.  Assumptions ..................................................\
    \ 6\n  2.4.  General Specification ........................................ 7\n\
    \  2.5.  Mechanisms .................................................. 11\n"
- title: 3.  DETAILED SPECIFICATION .......................................... 13
  contents:
  - "3.  DETAILED SPECIFICATION .......................................... 13\n  3.1.\
    \  Overview of Message Structure ............................... 13\n  3.2.  Data\
    \ Elements ............................................... 13\n  3.3.  Message\
    \ Objects ............................................. 16\n  3.4.  Command .....................................................\
    \ 23\n  3.5.  Document .................................................... 31\n\
    \  3.6.  Message Structure ........................................... 33\n  3.7.\
    \  MPM Organization ............................................ 36\n  3.8.  Interfaces\
    \ .................................................. 39\n"
- title: 4.  EXAMPLES & SCENARIOS ............................................ 41
  contents:
  - "4.  EXAMPLES & SCENARIOS ............................................ 41\n  Example\
    \ 1:  Message Format ........................................ 41\n  Example 2:\
    \  Delivery and Acknowledgment ........................... 43\n"
- title: GLOSSARY ............................................................ 49
  contents:
  - 'GLOSSARY ............................................................ 49

    '
- title: REFERENCES .......................................................... 51
  contents:
  - 'REFERENCES .......................................................... 51

    '
- title: APPENDICES .......................................................... 53
  contents:
  - 'APPENDICES .......................................................... 53

    '
- title: Internet Message Protocol
  contents:
  - "Internet Message Protocol\n                                               Internet\
    \ Message Protocol\n                                PREFACE\n"
- title: This is the first edition of this specification and should be treated as
  contents:
  - 'This is the first edition of this specification and should be treated as

    '
- title: a request for comments, advice, and suggestions.  A great deal of prior
  contents:
  - 'a request for comments, advice, and suggestions.  A great deal of prior

    '
- title: work has been done on computer aided message systems and some of this is
  contents:
  - 'work has been done on computer aided message systems and some of this is

    '
- title: listed in the reference section.  This specification was shaped by many
  contents:
  - 'listed in the reference section.  This specification was shaped by many

    '
- title: discusions with members of the ARPA research community, and others
  contents:
  - 'discusions with members of the ARPA research community, and others

    '
- title: interested in the development of computer aided message systems.  This
  contents:
  - 'interested in the development of computer aided message systems.  This

    '
- title: document was prepared as part of the ARPA sponsored Internetwork
  contents:
  - 'document was prepared as part of the ARPA sponsored Internetwork

    '
- title: Concepts Research Project at ISI, with the assistance of Greg Finn, Alan
  contents:
  - 'Concepts Research Project at ISI, with the assistance of Greg Finn, Alan

    '
- title: Katz, Paul Mockapetris, and Mamie Chew.
  contents:
  - "Katz, Paul Mockapetris, and Mamie Chew.\n                                   \
    \                           Jon Postel\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: 'IEN: 85                                                        J. Postel'
  contents:
  - 'IEN: 85                                                        J. Postel

    '
- title: 'RFC: 753                                                         USC-ISI'
  contents:
  - "RFC: 753                                                         USC-ISI\n  \
    \                                                            March 1979\n    \
    \                   INTERNET MESSAGE PROTOCOL\n                            1.\
    \  INTRODUCTION\n"
- title: This document describes an internetwork message system.  The system is
  contents:
  - 'This document describes an internetwork message system.  The system is

    '
- title: designed to transmit messages between message processing modules
  contents:
  - 'designed to transmit messages between message processing modules

    '
- title: according to formats and procedures specified in this document.  The
  contents:
  - 'according to formats and procedures specified in this document.  The

    '
- title: message processing modules are processes in host computers.  Message
  contents:
  - 'message processing modules are processes in host computers.  Message

    '
- title: processing modules are located in different networks and together
  contents:
  - 'processing modules are located in different networks and together

    '
- title: constitute an internetwork message delivery system.
  contents:
  - 'constitute an internetwork message delivery system.

    '
- title: This document is intended to provide all the information necessary to
  contents:
  - 'This document is intended to provide all the information necessary to

    '
- title: implement a compatible cooperating module of this internetwork message
  contents:
  - 'implement a compatible cooperating module of this internetwork message

    '
- title: system.
  contents:
  - 'system.

    '
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n  As computer supported message processing activities grow\
    \ on individual\n  host computers and in networks of computers, there is a natural\
    \ desire\n  to provide for the interconnection and interworking of such systems.\n\
    \  This specification describes the formats and procedures of a general\n  purpose\
    \ internetwork message system, which can be used as a standard\n  for the interconnection\
    \ of individual message systems, or as a message\n  system in its own right.\n\
    \  We also provide for the communication of data items beyond the scope\n  of\
    \ contemporary message systems.  Messages can include typed segments\n  which\
    \ could represent drawings, or facsimile images, or digitized\n  speech.  One\
    \ can imagine message stations equipped with speakers and\n  microphones (or telephone\
    \ hand sets) where the body of a message or a\n  portion of it is recorded digitized\
    \ speech.  The output terminal could\n  include a graphics display, and the message\
    \ might present a drawing on\n  the display, and verbally (via the speaker) describe\
    \ certain features\n  of the drawing.  This specification provides basic data\
    \ elements for\n  the transmission of structured binary data, as well as providing\
    \ for\n  text transmission.\n"
- title: 1.2.  Scope
  contents:
  - "1.2.  Scope\n  The Internet Message Protocol is intended to be used for the\n\
    \  transmission of messages between networks.  It may also be used for\n  the\
    \ local message system of a network or host.  This specification was\n  developed\
    \ in the context of the ARPA work on the interconnection of\n  networks, but it\
    \ is anticipated that it has a more general scope.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Introduction
  contents:
  - "Introduction\n  The focus here is on the internal mechanisms to transmit messages,\n\
    \  rather than the external interface to users.  It is assumed that a\n  number\
    \ of user interface programs will exist.  These will be both new\n  programs designed\
    \ to work with system and old programs designed to\n  work with earlier systems.\n"
- title: 1.3.  The Internetwork Environment
  contents:
  - "1.3.  The Internetwork Environment\n  The internetwork message environment consists\
    \ of processes which run\n  in hosts which are connected to networks which are\
    \ interconnected by\n  gateways.  Each individual network consists of many different\
    \ hosts.\n  The networks are tied together through gateways.  The gateways are\n\
    \  essentially hosts on two (or more) networks and are not assumed to\n  have\
    \ much storage capacity or to \"know\" which hosts are on the\n  networks to which\
    \ they are attached [5].\n"
- title: 1.4.  Operation
  contents:
  - "1.4.  Operation\n  The model of operation is that this protocol is implemented\
    \ in a\n  process.  Such a process is called a Message Processing Module or MPM.\n\
    \  The MPMs exchange messages by establishing full duplex communication\n  and\
    \ sending the messages in a fixed format described in this document.\n  The MPM\
    \ may also communicate other information by means of commands\n  described here.\n\
    \  A message is formed by a user interacting with a User Interface\n  Program\
    \ or UIP.  The user may utilize several commands to create\n  various fields of\
    \ the message and may invoke an editor program to\n  correct or format some or\
    \ all of the message.  Once the user is\n  satisfied with the messages it is \"\
    sent\" by placing it in a data\n  structure shared with the MPM.\n  The MPM discovers\
    \ the unprocessed input data (either by a specific\n  request or by a general\
    \ background search), examines it, and using\n  routing tables determines which\
    \ outgoing link to use.  The destination\n  may be another user on this host,\
    \ a user on another host in this\n  network, or a user in another network.\n \
    \ In the first case, another user on this host, the MPM places the\n  message\
    \ in a data structure shared with the destination user, where\n  that user's UIP\
    \ will look for incoming messages.\n  In the second case, the user on another\
    \ host in this network, the MPM\n  transmits the message to the MPM on that host.\
    \  That MPM then repeats\n  the routing decision, and discovering the destination\
    \ is local to it,\n  places the messages in the data structure shared with the\
    \ destination\n  user.\n                                               Internet\
    \ Message Protocol\n                                                         \
    \   Introduction\n  In the third case, the user on a host in another network,\
    \ the MPM\n  transmits the messages to an MPM in that network if it knows how\
    \ to\n  establish a connection directly to it, otherwise the MPM transmits the\n\
    \  message to an MPM that is \"closer\" to the destination.  An MPM might\n  not\
    \ know of direct connections to MPMs in all other networks, but it\n  must be\
    \ able to select a next MPM to handle the message for each\n  possible destination\
    \ network.\n  A MPM might know a way to establish direct connections to each of\
    \ a\n  few MPMs in other nearby networks, and send all other messages to a\n \
    \ particular big brother MPM that has a wider knowledge of the internet\n  environment.\n\
    \  A individual network's message system may be quite different from the\n  internet\
    \ message system.  In this case, intranet messages will be\n  delivered using\
    \ the network's own message system.  If a message is\n  addressed outside the\
    \ network, it is given to a MPM which then sends\n  it through the appropriate\
    \ gateways via internet procedures and format\n  to (or toward) the MPM in the\
    \ destination network.  Eventually, the\n  message gets to a MPM on the network\
    \ of the recipient of the message.\n  The message is then sent via the local message\
    \ system to that host.\n  When local message protocols are used, special conversion\
    \ programs are\n  required to transform local messages to internet format when\
    \ they are\n  going out, and to transform internet messages to local format when\n\
    \  they come into the local environment.  Such transformations are\n  potentially\
    \ information lossy.  The internet message format attempts\n  to provide features\
    \ to capture all the information any local message\n  system might use.  However,\
    \ a particular local message system is\n  unlikely to have features equivalent\
    \ to all the possible features of\n  the internet message system.  Thus, in some\
    \ cases the transformation\n  of an internet message to a local message discard\
    \ of some of the\n  information.  For example, if an internet message carrying\
    \ mixed text\n  and speech data in the body is to be delivered in a local system\
    \ which\n  only carries text, the speech data may be replaced by the text string\n\
    \  \"There was some speech here\".  Such discarding of information is to be\n\
    \  avoided when at all possible, and to be defered as long as possible,\n  still\
    \ the possibility remains, that in some cases, it is the only\n  reasonable thing\
    \ to do.\n"
- title: 1.5.  Interfaces
  contents:
  - "1.5.  Interfaces\n  The MPM calls on a reliable communication procedure to communicate\n\
    \  with other MPMs.  This is a Transport Level protocol such as the TCP\n  [20].\
    \  The interface to such a procedure conventionally provides calls\n  to open\
    \ and close connections, send and receive data on a connection,\n  and some means\
    \ to signal and be notified of special conditions (i.e.,\n  interrupts).\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Introduction
  contents:
  - "Introduction\n  The MPM receives input and produces output through data structures\n\
    \  that are produced and consumed respectively by user interface (or\n  other)\
    \ programs.\n                                               Internet Message Protocol\n\
    \                       2.  FUNCTIONAL DESCRIPTION\n"
- title: 2.1.  Terminology
  contents:
  - "2.1.  Terminology\n  The basic unit transferred between networks is called a\
    \ message.  A\n  message is made up of a transaction identifier (a number which\n\
    \  uniquely identifies the message), a command list (which contains the\n  necessary\
    \ information for delivery), and the document list.  The\n  document list consists\
    \ of a header and a body, which contains the\n  actual data of the message.\n\
    \  For a personal letter the document body corresponds to the contents\n  the\
    \ a letter, the document header corresponds to the the address and\n  return address\
    \ on the envelope.\n  For an inter-office memo the document body corresponds to\
    \ the text,\n  the document header corresponds to the header of the memo.\n  The\
    \ commands correspond to the information used by the Post Office or\n  the mail\
    \ room to route the letter or memo.\n  The messages are routed by a process called\
    \ the message processing\n  module or MPM.  Messages are created and consumed\
    \ by User Interface\n  Programs (UIPs) in conjunction with users.\n  Please see\
    \ the Glossary section for a more complete list of\n  terminology.\n"
- title: 2.2.  Assumptions
  contents:
  - "2.2.  Assumptions\n  The following assumptions are made about the internetwork\
    \ environment:\n  It is in general not known what format intranet addresses will\
    \ assume.\n  Since no standard addressing scheme would suit all networks, it is\n\
    \  safe to assume there will be several and that they will change with\n  time.\
    \  Thus, frequent software modification throughout all internet\n  MPMs would\
    \ be required if such MPMs were to know about the formats on\n  many networks.\
    \  Therefore, each MPM which handles internet messages is\n  required to know\
    \ only the minimum necessary to deliver them.\n  We require each MPM to know completely\
    \ only the addressing format of\n  its own network.  In addition, the MPM must\
    \ be able to select an\n  output link for each message addressed to another network\
    \ or host.\n  This does not preclude more intelligent behavior on the part of\
    \ a\n  given MPM, but at least this minimum is necessary.  Each network has a\n\
    \  unique name and number.\n  Each MPM will have a unique internet address.  This\
    \ feature will\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Functional Description
  contents:
  - "Functional Description\n  enable every MPM to place a unique \"handling-stamp\"\
    \ on a message which\n  passes through it en-route to delivery.\n"
- title: 2.3.  General Specification
  contents:
  - "2.3.  General Specification\n  There are several aspects to a distributed service\
    \ to be specified.\n  First there is the service to be provided, that is, the\n\
    \  characteristics of the service as seen by its users.  Second there is\n  the\
    \ service it uses, that is, the characteristics it assumes to be\n  provided by\
    \ some lower level service.  And, third there is the\n  protocol used between\
    \ the modules of the distributed service.\n       User                       \
    \                   User       \n          \\                                \
    \          /          \n           \\                                        /\
    \           \n            \\                                      /          \
    \  \n         --+----------------------------------------+-- Service \n      \
    \     !   \\                                /   ! Interface \n           !  +--------+\
    \                +--------+  !           \n           !  ! Module ! <--Protocol-->\
    \ ! Module !  !           \n           !  +--------+                +--------+\
    \  !           \n           !        \\                       /       !      \
    \     \n           !        +-----------------------+       !           \n   \
    \        !        ! Communication Service !       !           \n           ! \
    \       +-----------------------+       !           \n           !           \
    \                             !           \n           +----------------------------------------+\
    \           \n                            Message Service\n                  \
    \             Figure 1.\n  The User/Message Service Interface\n    The service\
    \ the message delivery system provides is to accept\n    messages conforming to\
    \ a specified format and to attempt to deliver\n    those messages, and to report\
    \ on the success or failure of the\n    delivery attempt.  This service is provided\
    \ in the context of an\n    interconnected system of networks, and may involve\
    \ relaying a\n    message through several intermediate MPMs utilizing different\n\
    \    communication services.\n  The Message/Communication Service Interface\n\
    \    The message delivery system calls on a communication service to\n    transfer\
    \ information from one MPM to another.  There may be\n    different communication\
    \ services used between different pairs of\n                                 \
    \              Internet Message Protocol\n                                   \
    \               Functional Description\n    MPMs, though all communication services\
    \ must meet the following\n    service characteristics.\n    It is assumed that\
    \ the communication service provides a reliable two\n    way data stream.  Such\
    \ a data stream can usually be obtained in\n    computer networks from the transport\
    \ level protocol, for example,\n    the Transmission Control Protocol (TCP) [20].\
    \  In any case the\n    properties the communication service must provide are:\n\
    \      o  Logical connections for two way simultaneous data flow of\n        \
    \ arbitrary data (i.e., no forbidden codes).  Data is delivered\n         in the\
    \ order sent with no gaps.\n      o  Simple commands to open and close the connections,\
    \ and to send\n         and receive data on the connections.\n      o  A way to\
    \ signal and be notified \"out-of-band\" (such as TCP's\n         urgent) is available\
    \ so that some messages can be labeled \"more\n         important\" than others.\n\
    \      o  Controlled flow of data so that data is not transmitted faster\n   \
    \      that the receiver chooses to consume it (on the average).\n      o  Transmission\
    \ errors are corrected without user notification or\n         involvement.  Complete\
    \ breakdown on communication is reported\n         to the user.\n  The Message-Message\
    \ Protocol\n    The protocol used between the distributed modules of the message\n\
    \    delivery system, that is, the MPMs is a small set of commands which\n   \
    \ convey requests and replies.  These commands are encoded in a highly\n    structured\
    \ and rigidly specified format.\n"
- title: 2.4.  Mechanisms
  contents:
  - "2.4.  Mechanisms\n  MPMs are processes which use some communication service.\
    \  A pair of\n  MPMs which can communicate reside in a common interprocess\n \
    \ communication environment.  A MPM might exist in two (or more)\n  interprocess\
    \ communication environments, and such an MPM might act to\n  relay messages between\
    \ MPMs in the environments.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Functional Description
  contents:
  - "Functional Description\n     User                                           \
    \         User \n       \\                                                   \
    \   /   \n        \\                                                    /    \n\
    \         \\                                                  /     \n      +---------------------------------------------------------+\
    \ \n      !    \\                                              /     ! \n    \
    \  !  +-----+                +-----+                +-----+  ! \n      !  ! MPM\
    \ ! <--Protocol--> ! MPM ! <--Protocol--> ! MPM !  ! \n      !  +-----+      \
    \          +-----+                +-----+  ! \n      !     !                 \
    \   /   \\                    !     ! \n      !  +-----------------------+   +-----------------------+\
    \  ! \n      !  !Communication Service A!   !Communication Service B!  ! \n  \
    \    !  +-----------------------+   +-----------------------+  ! \n      !   \
    \                                                      ! \n      +---------------------------------------------------------+\
    \ \n                 Message Service with Internal Relaying\n                \
    \               Figure 2.\n  The transfer of data between UIPs and MPMs is conceived\
    \ of as the\n  exchange of data structures which encode messages.  The transfer\
    \ of\n  data between MPMs is also in terms of the transmission of structured\n\
    \  data.\n                                               Internet Message Protocol\n\
    \                                                  Functional Description\n  \
    \                  +-----+     DATA       +-----+         \n             USER-->!\
    \ UIP !-->STRUCTURES-->! MPM !-->other \n                    +-----+    +-----+\
    \     +-----+    MPMs \n                               !     !               \
    \      \n                               !  +-----+                  \n       \
    \                        +--!     !                  \n                      \
    \            !  +-----+               \n                                  +--!\
    \     !               \n                                     !     !         \
    \      \n                                     +-----+               \n       \
    \              +-----+     DATA       +-----+        \n             other-->!\
    \ MPM !-->STRUCTURES-->! UIP !-->USER \n             MPMs    +-----+    +-----+\
    \     +-----+        \n                                !     !               \
    \     \n                                !  +-----+                 \n        \
    \                        +--!     !                 \n                       \
    \            !  +-----+              \n                                   +--!\
    \     !              \n                                      !     !         \
    \     \n                                      +-----+              \n        \
    \                      Message Flow\n                               Figure 3.\n\
    \  In the following, a message will be described as a structured data\n  object\
    \ represented in a particular kind of typed data elements.  This\n  is how a message\
    \ is presented when transmitted between MPMs or\n  exchanged between an MPM and\
    \ a UIP.  Internal to a MPM (or a UIP), a\n  message may be represented in any\
    \ convenient form.  As the following\n  figure shows, when a message is ready\
    \ for transmission, it moves from\n  the processing routines to be encoded in\
    \ the typed data elements and\n  then to a data compression routine, and is finally\
    \ transmitted.  On\n  the receiving side, the message is first decompressed then\
    \ decoded\n  from the data element representation to the local representation\
    \ for\n  the processing routines.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Functional Description
  contents:
  - "Functional Description\n          +------------------------------------------------+\
    \ \n          !                                                ! \n          !\
    \  processing      DATA         DATA             ! \n          !  routines   --->\
    \ ENCODER ---> COMPRESSOR --->  ! \n          !                              \
    \                  ! \n          +------------------------------------------------+\
    \ \n                             Send MPM                        \n          +------------------------------------------------+\
    \ \n          !                                                ! \n          !\
    \      DATA              DATA         processing ! \n          ! ---> DECOMPRESSOR\
    \ ---> DECODER ---> routines   ! \n          !                               \
    \                 ! \n          +------------------------------------------------+\
    \ \n                            Receive MPM                      \n          \
    \                   Detailed View\n                               Figure 4.\n\
    \                                               Internet Message Protocol\n  \
    \                                                Functional Description\n"
- title: 2.5.  Relation to Other Protocols
  contents:
  - "2.5.  Relation to Other Protocols\n  The following diagram illustrates the place\
    \ of the message protocol in\n  the protocol hierarchy:\n   +------+ +-----+ +-------+\
    \ +-----+     +-----+                   \n   !Telnet! ! FTP ! !Message! !Voice!\
    \ ... !     ! Application Level \n   +------+ +-----+ +-------+ +-----+     +-----+\
    \                   \n           \\   !   /             !           !        \
    \              \n            +-----+           +-----+     +-----+           \
    \        \n            ! TCP !           ! RTP ! ... !     ! Host Level      \
    \  \n            +-----+           +-----+     +-----+                   \n  \
    \             !                 !           !                      \n        \
    \      +-------------------------------+                     \n              !\
    \       Internet Protocol       !   Gateway Level     \n              +-------------------------------+\
    \                     \n                              !                      \
    \               \n                 +---------------------------+             \
    \         \n                 !   Local Network Protocol  !    Network Level  \
    \   \n                 +---------------------------+                      \n \
    \                             !                                     \n       \
    \                  Protocol Relationships\n                               Figure\
    \ 5.\n  The message protocol interfaces on one side to user interface programs\n\
    \  and on the other side to a reliable transport protocol such as TCP.\n"
- title: Internet Message Protocol
  contents:
  - "Internet Message Protocol\n                                               Internet\
    \ Message Protocol\n                       3.  DETAILED SPECIFICATION\n"
- title: The presentation of the information in this section is difficult since
  contents:
  - 'The presentation of the information in this section is difficult since

    '
- title: everything depends on everything, and since this is a linear media it
  contents:
  - 'everything depends on everything, and since this is a linear media it

    '
- title: has to come in some order.  In this attempt, a very brief overview of
  contents:
  - 'has to come in some order.  In this attempt, a very brief overview of

    '
- title: the message structure is given, then a radical switch is made to
  contents:
  - 'the message structure is given, then a radical switch is made to

    '
- title: defining the basic building blocks, and finally using the building
  contents:
  - 'defining the basic building blocks, and finally using the building

    '
- title: blocks to reach the overall structure again.
  contents:
  - 'blocks to reach the overall structure again.

    '
- title: 3.1.  Overview of Message Structure
  contents:
  - "3.1.  Overview of Message Structure\n  In general a message is composed of three\
    \ parts:  the identification,\n  the command, and the document.  Each part is\
    \ in turn composed of\n  message objects.\n  The identification part is composed\
    \ of a transaction number assigned\n  by the originating MPM, and the internet\
    \ host number of that MPM.\n  The command part is composed of  an operation type,\
    \ an operation code,\n  an argument list, an error list, the destination mailbox,\
    \ and a stamp.\n  The stamp is a list of the MPMs that have handled this message.\n\
    \  The document part is composed of a header and a body.  The message\n  delivery\
    \ system does not depend on the contents of the document part,\n  but this specification\
    \ does make some recommendations for the document\n  header.\n  The following\
    \ sections define the representation of a message as a\n  structured object composed\
    \ of other objects.  Objects in turn are\n  represented using a set of basic data\
    \ elements.\n"
- title: 3.2.  Data Elements
  contents:
  - "3.2.  Data Elements\n  The data elements defined here are similar to the data\
    \ structure and\n  encoding used in NSW [18].\n  Each of the diagrams which follow\
    \ represent a sequence of octets.\n  Field boundaries are denoted by the \"!\"\
    \ character, octet boundaries by\n  the \"+\" character. The diagrams are presented\
    \ in left to right order.\n  Each element begins with a one octet code.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n  Code  Type          Representation\n  ----  ----          --------------\n\
    \                      +------+\n    0  No Operation   !  1   !\n            \
    \          +------+\n                      +------+------+------+------+------\n\
    \    1  Padding        !  0   !     octet count    ! Data ...\n              \
    \        +------+------+------+------+------\n                      +------+------+\n\
    \    2  Boolean        !  2   ! 1/0  !\n                      +------+------+\n\
    \                      +------+------+------+\n    3  Index          !  3   !\
    \     Data    !\n                      +------+------+------+\n              \
    \        +------+------+------+------+------+\n    4  Integer        !  4   !\
    \            Data           !\n                      +------+------+------+------+------+\n\
    \                      +------+------+------+------+------\n    5  Bit String\
    \     !  5   !      bit count     ! Data ...\n                      +------+------+------+------+------\n\
    \                      +------+------+------+------+------\n    6  Text String\
    \    !  6   !     octet count    !  Data ...\n                      +------+------+------+------+------\n\
    \                      +------+------+------+------+------+------+-----\n    7\
    \  List           !  7   !     octet count    !  item count ! Data\n         \
    \             +------+------+------+------+------+------+-----\n             \
    \         +------+------+------+------+------\n    8  Proplist       !  8   !\
    \     octet count    ! Data ...\n                      +------+------+------+------+------\n\
    \                                               Internet Message Protocol\n  \
    \                                                         Specification\n  Element\
    \ code 0 (NOP) is an empty data element used for padding when it\n  is necessary.\
    \ It is ignored.\n  Element code 1 (PAD) is used to transmit large amounts of\
    \ data with a\n  message for test or padding purposes.  No action is taken with\
    \ this\n  data but the count of dummy octets must be correct to indicate the\n\
    \  next element code.\n  Element code 2 (BOOLEAN) is a boolean data element which\
    \ has the value\n  1 for True and 0 for False.\n  Element code 3 (INDEX) is a\
    \ 16-bit unsigned integer datum. Element\n  code 3 occupies only 3 octets.\n \
    \ Element code 4 (INTEGER) is a signed 32-bit integer datum. This will\n  always\
    \ occupy five octets.  Representation is two's complement.\n  Element code 5 (BITSTR)\
    \ is a bit string element for binary data.  The\n  bit string is padded on the\
    \ right with zeros to fill out the last\n  octet if the bit string does not end\
    \ on an octet boundary.  This data\n  type must have the bit-count in the two\
    \ octet count field instead of\n  the number of octets.\n  Element code 6 (TEXT)\
    \ is used for the representation of text.  Seven\n  bit ASCII characters are used,\
    \ right justified in the octet.  The high\n  order bit in the octet is zero.\n\
    \  Element code 7 (LIST) can be used to create structures composed of\n  other\
    \ elements.  The item-count contains the number of elements which\n  follow. \
    \ Any element may be used including List itself.  The octet\n  count specifies\
    \ the number of octets in the whole list.  A null or\n  empty List, one with no\
    \ elements, has an item-count of zero (0).\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n  Element code 8 (PROPLIST) is the Property-List element.  It\
    \ has the\n  following form:\n    +------+------+------+------+------+\n    !\
    \   8  !     octet          ! pair !\n    !      !           count    ! count!\n\
    \    +------+------+------+------+------+\n                         +------+------+------+---------+---------+\n\
    \                         ! name !    value    ! name    ! value   !\n       \
    \      repeated    ! count!    count    !      ...!      ...!\n              \
    \           +------+------+------+---------+---------+\n  The Property-List structure\
    \ consists of a set of unordered name/value\n  pairs.  The pairs are a one octet\
    \ name count and a two octet value\n  count followed by the name and value strings.\
    \  The counts specify the\n  length in octets of the name and value strings. \
    \ Each string has a\n  length in octets which agrees with its respective count.\
    \  The count of\n  octets until the next pair in the property list is  1 + 2 +\
    \ name count\n  + value count octets.  The entire Property-List is of course equal\
    \ in\n  length to the octet count of the element itself.  Immediately\n  following\
    \ the octet count for the entire element is a one octet pair\n  count field which\
    \ contains the total number of name/value pairs in the\n  Proplist.\n"
- title: 3.3.  Message Objects
  contents:
  - "3.3.  Message Objects\n  In the composition of messages we use a set of objects\
    \ such as\n  address, or date.  These objects are encoded in the basic data\n\
    \  elements.  The message objects are built of data elements.\n  While data elements\
    \ are typed, message objects are not.  This is\n  because messages are structured\
    \ to the extent that only one kind of\n  message object may occur in any position\
    \ of a message structure.\n  The following is a list of some of the objects used\
    \ in messages.  The\n  object descriptions are grouped by the section of the message\
    \ in which\n  they normally occur.\n                                         \
    \      Internet Message Protocol\n                                           \
    \                Specification\n  Identification\n    Internet Host Number (ihn)\n\
    \      This identifies a host in the internetwork environment.  When used\n  \
    \    as a part of tid, it identifies the originating host of a message.\n    \
    \  The ihn is a 32 bit number, the higher order 8 bits identify the\n      network,\
    \ and the lower order 24 bits identify the host on that\n      network.\n    \
    \  INTEGER\n    Transaction Identifier (tid)\n      This is the transaction identifier\
    \ associated with a particular\n      command.  It is a list of the transaction\
    \ number and the internet\n      host number of the originating host.\n      LIST\
    \ ( tn , ihn )\n    Transaction Number (tn)\n      This is a number which is uniquely\
    \ associated with this\n      transaction by  the originating host.  It identifies\
    \ the\n      transaction.  (A transaction is a message and acknowledgment, this\n\
    \      is discussed in more detail in later sections.)  A tn must be\n      unique\
    \ for the time which the message (a request or reply)\n      containing it could\
    \ be active in the network.\n      INDEX\n  Command\n    Address\n      This is\
    \ very similar to Mailbox in that it also is the \"address\"\n      of a user.\
    \  However, Address is intended to contain the minimum\n      information necessary\
    \ for delivery, and no more.\n      PROPLIST ( --- )\n    Answer\n      A yes\
    \ (true) or no (false) answer to a question.\n      BOOLEAN\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n    Arguments\n      This is the argument to many of the operations.\
    \  It consists of a\n      List of different data types.  The List will have form\
    \ and data\n      relevant with the particular operation.\n      LIST ( --- )\n\
    \    Command-Type\n      Gives the type of a command (e.g., request, reply, alarm).\n\
    \      INDEX\n    Error-List\n      The error list contains information concerning\
    \ an error which has\n      occured.  It is a List comprised of the two objects\
    \ error-class\n      and error-string.\n      LIST ( error class, error string\
    \ )\n    Error-Class\n      A code for the class of the error.\n      INDEX\n\
    \    Error-String\n      A text string explaining the error.\n      TEXT\n   \
    \ How-Delivered\n      A comment on the delivery of a messages, for instance a\
    \ message\n      could be delivered, forwarded, or turned over to general delivery.\n\
    \      LIST ( TEXT )\n                                               Internet\
    \ Message Protocol\n                                                         \
    \  Specification\n    Mailbox\n      This is the \"address\" of a user of the\
    \ internetwork mail system.\n      Mailbox contains information such as net, host,\
    \ location, and\n      local user-id of the recipient of the message.  Some information\n\
    \      contained in Mailbox may not be necessary for delivery.\n      As an example,\
    \ when one sends a message to someone for the first\n      time, he may include\
    \ many items which are not necessary simply to\n      insure delivery.  However,\
    \ once he gets a reply to this message,\n      the reply could contain an Address\
    \ (as opposed to Mailbox) which\n      the user will use from then on.\n     \
    \   A mailbox is a PROPLIST.  A mailbox might contain the following\n        name-value\
    \ pairs:\n          name    element  description\n          ----    -------  -----------\n\
    \          IA      INTEGER  internet address\n          NET     TEXT     network\
    \ name\n          HOST    TEXT     host name\n          USER    TEXT     user\
    \ name\n          CITY    TEXT     city\n          COUNTRY TEXT     country\n\
    \          STATE   TEXT     state\n          ZIP     TEXT     zip code\n     \
    \     PHONE   TEXT     phone number\n      PROPLIST ( --- )\n    Operation\n \
    \     This names the operation or procedure to be performed.\n      TEXT\n   \
    \ Options\n      REGULAR for normal delivery, FORWARD for message forwarding,\n\
    \      GENDEL for general delivery, or other options which may be defined\n  \
    \    later.\n      LIST ( TEXT, ... )\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n    Reasons\n      These could be mailbox does not exist, mailbox\
    \ full, etc.\n      LIST ( TEXT )\n    Stamp\n      Each MPM that handles the\
    \ message must add a unique identifier\n      (ihn, see above) to the list.  This\
    \ will prevent messages from\n      being sent back and forth through the internet\
    \ mail system without\n      eventually either being delivered or returned to\
    \ the sender.\n      LIST ( ihn, ihn, ... )\n    Trail\n      When a message is\
    \ sent through the internetwork environment, it\n      acquires a list of MPMs\
    \ that have handled the message in \"Stamp\".\n      This list is then carried\
    \ as \"Trail\" upon reply or acknowledgment\n      of that message. More simply,\
    \ requests and replies always have a\n      \"Stamp\" and each MPM adds its ihn\
    \ to this \"Stamp.\"  Replies, in\n      addition, have a \"Trail\" which is the\
    \ complete \"Stamp\" of the\n      original message.\n      LIST ( ihn, ihn, ...\
    \ )\n    Type\n      The command type, e.g., request or reply.\n      INDEX\n\
    \  Document\n    In this section, we define some objects useful in message document\n\
    \    headers.  The ones we use are taken from the current ARPANET message\n  \
    \  syntax standard [6,8].\n    CC\n      When copies of a message are sent to\
    \ others in addition to the\n      addresses in the To object, those to whom the\
    \ copies are sent will\n      have their addresses recorded here.  CC will be\
    \ a single TEXT\n      element.\n      TEXT\n                                \
    \               Internet Message Protocol\n                                  \
    \                         Specification\n    Date\n      The date and time are\
    \ represented according to the International\n      Standards Organization (ISO)\
    \ recommendations [13,14,15].  Taken\n      together the ISO recommendations 2014,\
    \ 3307, and 4031 result in\n      the following representation of the date and\
    \ time:\n        yyyy-mm-dd-hh:mm:ss,fff+hh:mm\n      Where yyyy is the 4 digit\
    \ year, mm is the two digit month, dd is\n      the two digit day, hh is the two\
    \ digit hour in 24 hour time, mm is\n      the two digit minute, ss is the two\
    \ digit second, and fff is the\n      decimal fraction of the second.  To this\
    \ basic date and time is\n      appended the offset from Greenwich as plus or\
    \ minus hh hours and\n      mm minutes.\n      TEXT\n    Document-Body\n     \
    \ The document body will contain that portion of the message\n      commonly thought\
    \ of as the text portion.  It will be composed of a\n      list of elements. \
    \ This will allow transmission of data other than\n      pure text if such capabilities\
    \ are needed.  We can, for instance,\n      envision digital voice communication\
    \ through the transmission of\n      BITSTR element, or transmission of graphic\
    \ data, etc.  Information\n      regarding control of such features could be included\
    \ in the header\n      for cooperating sites, or in the body itself but such protocols\n\
    \      would depend upon agreement among those sites involved.  It is\n      expected\
    \ of course that the majority of messages will contain body\n      portions comprised\
    \ of TEXT elements.\n      LIST ( --- )\n    Document-Header\n      The document\
    \ header contains the memo header presented to the\n      user.  In principle\
    \ this may be of any style or structure.  In\n      this specification it is recommended\
    \ that a PROPLIST be used and\n      that the name-value pairs correspond to the\
    \ header fields of\n      RFC 733 [6].\n      PROPLIST ( --- )\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n    From\n      The From is meant to be the name of the author\
    \ of a document.  It\n      will be one TEXT element.\n      TEXT\n    Reply-To\n\
    \      Sometimes it will be desired to direct the replies of a message to\n  \
    \    some address other than the From or the Sender.  In such a case\n      the\
    \ Reply-To object can be used.\n      TEXT\n    Sender\n      The Sender will\
    \ contain the address of the individual who sent the\n      message. In some cases\
    \ this is NOT the same as the author of the\n      message. Under such a condition,\
    \ the author should be specified in\n      the From object.  The Sender is a single\
    \ TEXT element.\n      TEXT\n    Subject\n      The subject of the message.\n\
    \      TEXT\n    To\n      To identifies the addressees of the message.  The To\
    \ object is one\n      TEXT element.\n      TEXT\n                           \
    \                    Internet Message Protocol\n                             \
    \                              Specification\n"
- title: 3.4.  Command
  contents:
  - "3.4.  Command\n  This section describes the commands which processes in the internet\n\
    \  message system can use to communicate.  Several aspects of the command\n  structure\
    \ are based on the NSW Transaction Protocol [19].  The\n  commands come in pairs,\
    \ with each request having a corresponding\n  reply.\n   A command is a list:\n\
    \    LIST ( mailbox, stamp, type, operation, arguments, error-list )\n  The arguments\
    \ are described generally here and more specifically, if\n  necessary, in the\
    \ description of each command.\n    mailbox:  PROPLIST\n      This is the \"to\"\
    \ specification of the message.  Mailbox takes the\n      form of a property list\
    \ of general information, some of which is\n      the essential information for\
    \ delivery, and some of which could be\n      extra information which may be helpful\
    \ for delivery.  Mailbox is\n      different from address in that address is a\
    \ very specific list\n      without extra information.\n    stamp:  LIST ( INTEGER,\
    \ ...  )\n      This is a list of the MPMs that have handled the message.  Each\n\
    \      MPM must add its 32 bit Internet Host Number (ihn) to the LIST.\n    type:\
    \ INDEX\n      type=1 a REQUEST operation.\n      type=2 a REPLY operation.\n\
    \      type=3 an ALARM operation. (A high priority message.)\n      type=4 a RESPONSE\
    \ to an alarm operation.\n    operation: TEXT\n      Operation is the name of\
    \ the operation or procedure to be\n      performed.  This string must be interpreted\
    \ in an upper/lower case\n      independent manner.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n    arguments: LIST\n      This is a list of arguments to the\
    \ above operation.\n    error-list:  LIST\n      If message is type 1 or 3 (a\
    \ request or an alarm):\n        LIST ( )  (a zero length list)\n      If message\
    \ is a type 2 or 4 (a response or response to alarm)\n        LIST ( error-class,\
    \ error-string ) indicates what,if any, error\n        occured\n      error-class:\
    \ INDEX\n        =0: indicates success, no error\n        =1: partial results\
    \ returned.\n          This error class is used when several steps are performed\
    \ by\n          one operation and some of them fail.\n        =2: failure, resources\
    \ unavailable.\n        =3: failure, user error.\n        =4: failure, MPM error.\
    \ Recoverable.\n        =5: failure, MPM error. Fatal.\n        =6: User abort\
    \ requested\n      error-string: TEXT\n        This is a human readable character\
    \ string describing the error.\n    Possible errors:\n              error-string\
    \                  error-class\n      No errors                              \
    \    0\n      Command not implemented                    2\n      Syntax error,\
    \ command unrecognized         3\n      Syntax error, in arguments           \
    \      3\n      Server error, try again later              4\n      No service\
    \ available                       5\n      User requested abort              \
    \         6\n                                               Internet Message Protocol\n\
    \                                                           Specification\n  command:\
    \  DELIVER\n    type:  1\n    function:  Sends message to a mailbox\n    reply:\
    \  The reply is ACKNOWLEDGE\n    arguments:  LIST ( options )\n      options:\
    \  one or more of the following\n        \"REGULAR\"  regular delivery\n     \
    \   \"FORWARD\"  message forwarding\n        \"GENDEL\"   general delivery\n \
    \       other options which may be defined later\n    argument structure:\n  \
    \    LIST ( LIST ( TEXT, ... ))\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n  command:  ACKNOWLEDGE\n    type:  2\n    function:  reply to\
    \ DELIVER\n    arguments: LIST ( tid, trail, answer, reasons, how-delivered )\n\
    \      tid:  tid of the originating message\n      trail:   the stamp from the\
    \ deliver command\n      answer:  yes if delivered successfully,\n           \
    \    no if error in delivery.\n      reasons:  if the answer is yes, the reason\
    \ is \"ok\", if the answer\n      is no the reason could be one of \"no such user\"\
    , \"no such host\",\n      \"no such network\", \"address ambiguous\", or a similar\
    \ response\n      how-delivered:  one or more of the following:\n        \"FORWARD\"\
    \  message was accepted for forwarding\n        \"GENDEL\"   message was accepted\
    \ for general delivery\n        \"ACCEPT\"   message was accepted for normal delivery\n\
    \        other types of delivery may be defined later\n    argument structure:\n\
    \      LIST ( LIST ( INDEX, INTEGER ),\n             LIST ( INTEGER, ...  ),\n\
    \             BOOLEAN,\n             LIST ( TEXT ),\n             LIST ( TEXT\
    \ ))\n                                               Internet Message Protocol\n\
    \                                                           Specification\n  command:\
    \  PROBE\n    type:  1\n    function:  finds out if specified mailbox (specified\
    \ in mailbox of\n    the command) exists at a host\n    reply:  the reply is RESPONSE\n\
    \    arguments:  LIST ( --none-- )\n    argument structure:\n      LIST ( )\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n  command:  RESPONSE\n    type:  2\n    function:  reply to PROBE\n\
    \    arguments:  LIST ( tid, trail, answer, address OR reasons )\n      tid: \
    \ the tid which came from the originating PROBE\n      trail:  the stamp which\
    \ came from the originating PROBE\n      answer:  Yes if mailbox found, or no\
    \ for invalid mailbox\n      if answer is yes the fourth argument is address\n\
    \      if answer is no it is reasons\n      address:  a specific address in the\
    \ network\n      reasons:  a reason why mailbox is invalid\n        Possible reasons\
    \ include:\n          \"Mailbox doesn't exist\"\n          \"Mailbox full\"\n\
    \          \"Mailbox has moved, try this new location\", address\n           \
    \ address is a new address to try\n    argument structure:\n      if answer is\
    \ yes\n        LIST ( LIST ( INDEX, INTEGER ),\n               LIST ( INTEGER,\
    \ ... ),\n               BOOLEAN,\n               PROPLIST )\n      if answer\
    \ is no\n        LIST ( LIST ( INDEX, INTEGER ),\n               LIST ( INTEGER,\
    \ ... ),\n               BOOLEAN,\n               LIST ( TEXT ))\n           \
    \                                    Internet Message Protocol\n             \
    \                                              Specification\n    command:  CANCEL\n\
    \      type:  3\n      function:  abort request for specified transaction\n  \
    \    reply:  The reply is CANCELED\n      arguments:  LIST ( tid )\n        tid\
    \ of transaction to be cancelled\n      argument structure:\n        LIST ( LIST\
    \ ( INDEX, INTEGER ))\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n    command:  CANCELED\n      type:  4\n      function:  reply\
    \ to CANCEL\n      arguments:  LIST ( tid, trail, answer )\n        tid:  tid\
    \ of transaction to be cancelled\n        trail:  the stamp of the CANCEL command\n\
    \        answer:  yes if the command was canceled, no if not.\n      argument\
    \ structure:\n        LIST ( LIST ( INDEX, INTEGER ),\n               LIST ( INTEGER,\
    \ ... ),\n               BOOLEAN )\n                                         \
    \      Internet Message Protocol\n                                           \
    \                Specification\n  To summarize again, a command consists of a\
    \ LIST of the following\n  objects:\n    name        element\n    ----       \
    \ -------\n    mailbox     PROPLIST\n    stamp       LIST ( INTEGER, ... )\n \
    \   type        INDEX\n    operation   TEXT\n    arguments   LIST ( --- )\n  \
    \  error       LIST ( INDEX, TEXT )\n"
- title: 3.5.  Document
  contents:
  - "3.5.  Document\n  The actual document follows the command list.  It contains\
    \ a header\n  which usually contains such information as From, To, Date, CC, etc.;\n\
    \  and the actual body of the message.  The message delivery system does\n  not\
    \ depend on the document.  The following section should be taken as\n  a recommendation\
    \ for common practice, not as a requirement.\n  Document Header\n    For the same\
    \ reason that it is impossible to for see the many forms\n    that intranet addresses\
    \ will take, standardizing of document headers\n    would also be a mistake. The\
    \ approach we suggest is to lay the\n    groundwork for a set of basic document\
    \ header functions and provide\n    for enough extensibility to allow nets to\
    \ add whatever header\n    features they desire.  Features added in this fashion,\
    \ however, may\n    not be understood by other networks.  It is suggested that\
    \ subset\n    defined here be implemented by all networks.\n    This subset is\
    \ taken from the current ARPANET standard for message\n    headers in the text\
    \ oriented computer message system [6,8].\n    The document header will precede\
    \ the document body portion of the\n    message and will consist of a proplist\
    \ data element.  The document\n    header is meant to be used by individual networks\
    \ to tailor the\n    header to suit their individual needs.  As an example, consider\
    \ the\n    ARPA network.  Typically, the receiver's name is taken to be his\n\
    \    network address.  It often prints in the document header in just\n    that\
    \ form: Frank@SITEX.  Such a salutation is unacceptable in some\n    more formal\
    \ modes of communication.  Some network might choose to\n    place into header\
    \ proplist the name-value pair (\"SALUTATION:\", \"Mr.\n    Frank Hacker\"). \
    \ Upon receipt of the message, the document handling\n    program would then be\
    \ able to scan the header proplist looking for\n    such a pair and so be able\
    \ to correctly address the recipient by\n    name instead of by network address.\
    \  However, other networks or\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n    sites within the network may not understand such specific\n\
    \    information.  Under such a condition it should be ignored.\n    The minimum\
    \ header is a PROPLIST of the following name-value pairs:\n      Name     Value\n\
    \      ----     -----\n      DATE     TEXT\n      FROM     TEXT\n    A normal\
    \ header is a PROPLIST containing the following name-value\n    pairs:\n     \
    \ Name     Value\n      ----     -----\n      DATE     TEXT\n      SENDER   TEXT\n\
    \      FROM     TEXT\n      TO       TEXT\n      CC       TEXT\n      SUBJECT\
    \  TEXT\n  Document Body\n    The Body of the message is just a sequence of data\
    \ elements which\n    contains the actual document.  Much of the time this will\
    \ be a\n    single TEXT element, but for some applications other data elements\n\
    \    may be utilized.\n    LIST ( --- )\n                                    \
    \           Internet Message Protocol\n                                      \
    \                     Specification\n"
- title: 3.6.  Message Structure
  contents:
  - "3.6.  Message Structure\n  An internet message is composed of three parts.  The\
    \ first is the tid\n  which identifies the transaction; the second is the Command\
    \ List; and\n  the third part is the Document List, which is itself comprised\
    \ of a\n  Document-Header and a Document-Body.\n  When shipped between two MPMs,\
    \ a message will take the form of a LIST:\n    Message is:\n      LIST ( tid,\
    \ Command-List, Document-List )\n    It is convenient to batch several messages\
    \ together shipping them as\n    a unit from one MPM to another.  Such a group\
    \ of messages is called\n    a message-bag.\n    A message-bag will be a LIST\
    \ of Messages, each Message is of the\n    form described above.\n      Thus,\
    \ a message-bag is:\n        LIST ( Message1, Message2, ... )\n  Message Sharing\n\
    \    When messages are batched for delivery, it may often be the case\n    that\
    \ the same Document will be sent to more than one recipient.\n    Since the Document\
    \ portion can usually be expected to be the major\n    parts of the message, much\
    \ repeated data would be sent if a copy of\n    the Mail for each recipient were\
    \ to be shipped in the message-bag.\n    To avoid this redundancy, messages are\
    \ assembled in the message-bag\n    so that actual data appears first and references\
    \ to it appear later\n    in the message-bag.  Since each message has a unique\
    \ tid, the\n    references will indicate the tid of the actual data.  In this\
    \ sense,\n    all references to copied data may be thought of as pointing earlier\n\
    \    in the message-bag.  The data to be retrieved can be thought of as\n    indexed\
    \ by tid.  Note that the semantics require such references to\n    point to data\
    \ already seen.\n    When a portion is Shared, that portion is determined by its\
    \ position\n    within a message, i.e., if the Command list was to be Shared,\
    \ then\n    its position within a Message would contain the tid of the message\n\
    \    already seen whose Command list was identical to it.  The same is\n    true\
    \ of the Document Header and the Document Body.  Only a complete\n    Command,\
    \ Header, or Body may be Shared, never a partial one.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n    If an encryption scheme is used, that portion of the message\
    \ which\n    is encrypted can not be shared.  This is due to the fact that\n \
    \   encrypting keys will be specific between two individuals.\n  Internal Message\
    \ Organization\n    The tid\n      This is the transaction identifier.  It is\
    \ assigned by the\n      originating MPM.\n    The Command List\n      The command-list\
    \ is a LIST which contains two elements, content\n      and command.\n      Content\
    \ is one item of element type INDEX.  If content=0, the item\n      is not shared\
    \ and the next element of the LIST is the command.  If\n      content=1 the item\
    \ is shared.  In this case, the second element\n      will contain the tid of\
    \ the command to share from.  The tid must\n      be of a prior message in the\
    \ current message-bag.  Other values of\n      content may be defined later for\
    \ different data structures.\n      Thus, command-list is:\n        LIST ( content,\
    \ tid )       if content=1\n      Or,\n        LIST ( content, command )    if\
    \ content=0\n      content is:\n        INDEX     which is 0 if there is no sharing\n\
    \                    and is 1 if sharing occurs\n      tid is:\n        the tid\
    \ of the message to be shared from\n      command is:\n        LIST ( mailbox,\
    \ stamp, type, operation, arguments, error-list )\n    The document-list\n   \
    \   The document portion of an internet message is optional and when\n      present\
    \ is comprised of a LIST containing two elements:\n                          \
    \                     Internet Message Protocol\n                            \
    \                               Specification\n        document-list is:\n   \
    \       LIST ( header-list, body-list )\n      While either the header-list or\
    \ the body-list may be shared, both\n      elements must appear in the m.\n  \
    \  The document-header\n      The header-list will be a List which will always\
    \ contain two\n      elements.  The first element will be content to indicate\
    \ whether\n      or not the header is to be shared.  The second element will either\n\
    \      be the tid of the header to be copied (if content=1) or it will be\n  \
    \    the document-header (which is a PROPLIST) containing the actual\n      header\
    \ information (if content=0). The tid must point to a\n      document-header already\
    \ seen in the message-bag.\n      The header-list is either:\n        LIST ( content,\
    \ tid )                if content=1\n      Or,\n        LIST ( content, document-header\
    \ )     if content=0\n      document-header is:\n        PROPLIST which contains\
    \ header information\n    The document-body\n      The body-list will be a LIST\
    \ of two elements.  The first element\n      will again be content, indicating\
    \ whether or not the body is to be\n      shared.  If it is shared, the second\
    \ element will be tid\n      indicating which body to copy.  This tid must be\
    \ of a message\n      already seen in the message-bag.  If content indicates no\
    \ sharing,\n      then the second item is a document-body.\n      body-list is:\n\
    \        LIST ( content, tid )           if content=1\n      Or,\n        LIST\
    \ ( content, document-body )  if content=0\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n      document-body is:\n        LIST ( items comprising the body\
    \ ... )\n  Message Fields\n    message := ( tid, command-list, document-list )\n\
    \    tid := ( tn, ihn )\n    command-list := ( content, command )\n    command\
    \ := ( mailbox, stamp, type, operation,\n                 arguments, error-list\
    \ )\n    document-list := ( header-list, body-list )\n    header-list := ( content,\
    \ document-header )\n    body-list := ( content, document-body )\n"
- title: 3.7.  MPM Organization
  contents:
  - "3.7.  MPM Organization\n  Introduction\n    The heart of the internet message\
    \ system is the MPM which is\n    responsible for routing and delivering message\
    \ between the networks.\n    Each network must have at least one MPM.  These MPMs\
    \ are connected\n    together, and internet mail is always transferred along channels\n\
    \    between them.  The system interfaces with the already existent local\n  \
    \  message system.\n    Since the local network message system may be very different\
    \ from\n    the internet system, special programs may be necessary to convert\n\
    \    incoming internet messages to the local format.  Likewise, messages\n   \
    \ outgoing to other networks may be converted to the internet format.\n  The MPM\n\
    \    Messages in the internet mail system are shipped in \"bags,\" each bag\n\
    \    containing one or more messages.  Each bag is addressed to a\n    specific\
    \ MPM and contains messages for the hosts on that MPM's\n    network.\n    Each\
    \ MPM is expected to implement functions which will allow it to\n    deliver local\
    \ messages it receives and to forward non-local ones to\n    other MPMs presumably\
    \ closer to the message's destination.\n                                     \
    \          Internet Message Protocol\n                                       \
    \                    Specification\n    Loosely, each MPM can be separated into\
    \ five components:\n      1--Acceptor\n        Receives incoming Message-Bags,\
    \ from other MPMs, from UIPs, or\n        from conversion programs.\n      2--Message-Bag\
    \ Processor\n        Splits a Bag into these three portions:\n          a.   \
    \ Local Host Messages\n          b.    Local Net Messages\n          c.    Foreign\
    \ Net Messages\n      3--Local Net Delivery\n        Delivers local net and local\
    \ host messages, may call on\n        conversion program.\n      4--Foreign Net\
    \ Router\n        Creation of new Message-Bags for forwarding to other MPMs,\n\
    \        determines route.\n      5--Foreign Net Shipper\n        Activates foreign\
    \ shipping channels and ships Message-Bag to\n        foreign MPMs. Performs data\
    \ compression while shipping bags.\n    All of these components can be thought\
    \ of as independent.  Of the\n    five, the Acceptor, the Local-Net Delivery,\
    \ and the Message-Bag\n    Processor are fully self-contained and communicate\
    \ with each other\n    only through a queue, the Bag-Input Queue.  The function\
    \ of the\n    Acceptor is to await incoming Message-Bags and to insert them into\n\
    \    the Bag-Input Queue.\n    That queue is the input to the Message-Bag Processor\
    \ component which\n    will separate and deliver suitable portions of the Message-Bags\
    \ it\n    retrieves from the queue to one of three queues:\n      a.    Local-Host\
    \ Queue\n      b.    Local-Net Queue\n      c.    Foreign Net Queue\n    When\
    \ a MPM decides to forward a message to another MPM, it must add\n    its own\
    \ identification (i.e., its ihn) to the stamp field of the\n    command.  The\
    \ stamp then becomes a record of the route the message\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n    has taken.  An MPM should examine the stamp field to see if\
    \ the\n    message is in a routing loop.  Some commands require the return of\n\
    \    the stamp as a trail in the matching reply command.\n    All of these queues\
    \ have as elements complete Message-Bags (some of\n    which may have been portions\
    \ of the original Bag).\n    The Local-Host and Local-Net queues serve as input\
    \ to the Local-Net\n    Delivery process.  This component is responsible for delivering\n\
    \    messages to its local host and other hosts on its local net to which\n  \
    \  it is connected.  It must be capable of handling whatever error\n    conditions\
    \ the local net might return, including the ability to\n    retransmit.  It may\
    \ call on conversion program to reformat the\n    messages into a form the local\
    \ protocol will accept.  This will\n    probably involve such things as copying\
    \ shared information.\n    The other two processes are more closely coupled. \
    \ The Foreign Net\n    Router takes its input Bags from the Foreign Net Queue.\
    \  From the\n    internal information it contains, it determines which one of\
    \ the\n    MPMs to which it is connected should receive the Bag.\n    It then\
    \ places the Bag along with the routing information into the\n    Shippable Mail\
    \ Queue.  The Foreign Net Shipper retrieves it from\n    that queue and transmits\
    \ it across a channel to the intended foreign\n    MPM.\n    The Foreign Net Router\
    \ should be capable of receiving external input\n    to its routing information\
    \ table.  This may come from the Foreign\n    Net Shipper in the case of a channel\
    \ going down, requiring a\n    decision to either postpone delivery or to determine\
    \ a new route.\n    The Router is responsible for maintaining sufficient topological\n\
    \    information to determine where to forward any incoming Message-Bag.\n   \
    \ Decisions concerning the return of undeliverable Bags are made by\n    the Router.\n\
    \    It should be stressed here that message delivery should be reliable.\n  \
    \  In the event that delivery is impossible, the message should be\n    returned\
    \ to the sender along with information regarding the reason\n    for not delivering\
    \ it.\n  Implementation Recommendations\n    Transaction numbers can be assigned\
    \ sequentially with wrap around\n    when the highest value is reached.  This\
    \ should ensure that no\n    message with a particular transaction number from\
    \ this source is in\n    the network when another instance of this transaction\
    \ number is\n    chosen.\n                                               Internet\
    \ Message Protocol\n                                                         \
    \  Specification\n"
- title: 3.8.  Interfaces
  contents:
  - "3.8.  Interfaces\n  User Interface\n    It is assumed that the interface between\
    \ the MPM and the UIP\n    provides for passing data structures which represent\
    \ the document\n    portion of the message.  In addition this interface must pass\
    \ the\n    delivery address information (which becomes the information in the\n\
    \    mailbox field of the command).  It is weakly assumed that the\n    information\
    \ is passed between the UIP and the MPM via shared files,\n    but this is not\
    \ the only possible mechanism.  These two processes\n    may be more strongly\
    \ coupled (e.g., by sharing memory), or less\n    strongly coupled (e.g., by communicating\
    \ via logical channels).\n  Communication Interface\n    It is assumed here that\
    \ the MPM use an underlying communication\n    system, and TCP [20] has been taken\
    \ as the model.  Again, this is\n    not intended to limit the implementation\
    \ choices, other forms of\n    interprocess communication are allowed and other\
    \ types of physical\n    interconnection are permitted.  One might even use dial\
    \ telephone\n    calls to interconnect MPMs (using suitable protocols to provide\n\
    \    reliable communication).\n"
- title: Internet Message Protocol
  contents:
  - "Internet Message Protocol\n                                               Internet\
    \ Message Protocol\n                        4.  EXAMPLES & SCENARIOS\n"
- title: 'Example 1:  Message Format'
  contents:
  - "Example 1:  Message Format\n  Suppose we want to send the following message:\n\
    \    Date: 1979-03-29-11:46-08:00\n    From: Jon Postel <Postel@ISIB>\n    Subject:\
    \ Meeting Thursday\n    To: Dave Crocker <DCrocker@Rand-Unix>\n    CC: Mamie\n\
    \    Dave:\n    Please mark your calendar for our meeting Thursday at 3 pm.\n\
    \    --jon.\n  It will be encoded in the structured format.  The following will\n\
    \  present successive steps in the top down generation of this message.\n    1.\
    \  message\n    2.  ( tid, command-list, document-list )\n    3.  ( ( tn, ihn\
    \ ),\n        ( content, command ),\n        ( header-list, body-list ) )\n  \
    \  4.  ( ( tn, ihn ),\n          ( content,\n            ( mailbox, stamp, type,\
    \ operation,\n              arguments, error-list ) ),\n          ( ( content,\
    \ document-header ),\n            ( content, document-body ) ) )\n    5.  ( (\
    \ 37, 167772404 ),\n        ( 0, (\n               ( IA: 167772359, NET: arpa,\
    \ HOST: rand-unix,\n                 USER: DCrocker ),\n               ( 167772404\
    \ ),\n               1\n               DELIVER\n               ( ( REGULAR ) ),\n\
    \               ( ) ) ),\n        ( ( 0, (\n                 Date: 1979-03-29-11:46-08:00\n\
    \                 From: Jon Postel <Postel@ISIB>\n                 Subject: Meeting\
    \ Thursday\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Examples & Scenarios
  contents:
  - "Examples & Scenarios\n                 To: Dave Crocker <DCrocker@Rand-Unix>\n\
    \                 CC: Mamie ) ),\n          ( 0, ( Dave:\n                 Please\
    \ mark your calendar for our meeting\n                 Thursday at 3 pm.\n   \
    \              --jon. ) ) ) )\n    6.  LIST( LIST( INDEX=37, INTEGER=167772404\
    \ ),\n              LIST( INDEX=0,\n    command         LIST( PROPLIST( IA: 167772359,\n\
    \                                    NET: arpa,\n    mailbox                 \
    \        HOST: rand-unix,\n                                    USER: DCrocker\
    \ ),\n    stamp                 LIST( INTEGER=167772404 ),\n    type         \
    \         INDEX=1\n    operation             TEXT=\"DELIVER\"\n    arguments \
    \            LIST( LIST( TEXT=\"REGULAR\" )),\n    error-list            LIST(\
    \ ) ) ),\n              LIST( LIST( INDEX=0,\n    document-header       PROPLIST(\n\
    \                            DATE: 1979-03-29-11:46-08:00\n                  \
    \          FROM: Jon Postel <Postel@ISIB>\n                            SUBJECT:\
    \ Meeting Thursday\n                            TO: Dave Crocker <DCrocker@Rand-Unix>\n\
    \                            CC: Mamie ) ),\n                    LIST( INDEX=0,\n\
    \    document-body         LIST( TEXT=\n                            \"Dave:\n\
    \                            Please mark your calendar for\n                 \
    \           our meeting Thursday at 3 pm.\n                            --jon.\"\
    \ ) ) ) )\n                                               Internet Message Protocol\n\
    \                                                    Examples & Scenarios\n"
- title: 'Example 2:  Delivery and Acknowledgment'
  contents:
  - "Example 2:  Delivery and Acknowledgment\n  The following is four views of the\
    \ message of example 1 during the\n  successive transmission from the origination\
    \ MPM, through a relay MPM,\n  to the destination MPM, and the return of the acknowledgment,\
    \ through\n  a relay MPM, to the originating MPM.\n  +-----------------------------------------------------------------+\
    \ \n  !                          1         2                            ! \n \
    \ ! sending --> originating --> relay --> destination --> receiving ! \n  !  \
    \ user          MPM          MPM          MPM            user   ! \n  !      \
    \                                                           ! \n  !          \
    \                4         3                            ! \n  !             originating\
    \ <-- relay <-- destination               ! \n  !                 MPM        \
    \  MPM          MPM                   ! \n  +-----------------------------------------------------------------+\
    \ \n                           Transmission Path\n                           \
    \    Figure 6.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Examples & Scenarios
  contents:
  - "Examples & Scenarios\n  1.  Between the originating MPM and the relay MPM.\n\
    \        LIST( LIST( INDEX=37, INTEGER=167772404 ),\n              LIST( INDEX=0,\n\
    \    command         LIST( PROPLIST( IA: 167772359,\n                        \
    \            NET: arpa,\n    mailbox                         HOST: rand-unix,\n\
    \                                    USER: DCrocker ),\n    stamp            \
    \     LIST( INTEGER=167772404 ),\n    type                  INDEX=1\n    operation\
    \             TEXT=\"DELIVER\"\n    arguments             LIST( LIST( TEXT=\"\
    REGULAR\" )),\n    error-list            LIST( ) ) ),\n              LIST( LIST(\
    \ INDEX=0,\n    document-header       PROPLIST(\n                            DATE:\
    \ 1979-03-29-11:46-08:00\n                            FROM: Jon Postel <Postel@ISIB>\n\
    \                            SUBJECT: Meeting Thursday\n                     \
    \       TO: Dave Crocker <DCrocker@Rand-Unix>\n                            CC:\
    \ Mamie ) ),\n                    LIST( INDEX=0,\n    document-body         LIST(\
    \ TEXT=\n                            \"Dave:\n                            Please\
    \ mark your calendar for\n                            our meeting Thursday at\
    \ 3 pm.\n                            --jon.\" ) ) ) )\n      The originating MPM\
    \ sends the message of example 1 to a relay MPM.\n                           \
    \                    Internet Message Protocol\n                             \
    \                       Examples & Scenarios\n  2.  Between the relay MPM and\
    \ the destination MPM.\n        LIST( LIST( INDEX=37, INTEGER=167772404 ),\n \
    \             LIST( INDEX=0,\n    command         LIST( PROPLIST( IA: 167772359,\n\
    \                                    NET: arpa,\n    mailbox                 \
    \        HOST: rand-unix,\n                                    USER: DCrocker\
    \ ),\n    stamp                 LIST( INTEGER=167772404,\n                   \
    \             INTEGER=167772246 ),\n    type                  INDEX=1\n    operation\
    \             TEXT=\"DELIVER\"\n    arguments             LIST( LIST( TEXT=\"\
    REGULAR\" )),\n    error-list            LIST( ) ) ),\n              LIST( LIST(\
    \ INDEX=0,\n    document-header       PROPLIST(\n                            DATE:\
    \ 1979-03-29-11:46-08:00\n                            FROM: Jon Postel <Postel@ISIB>\n\
    \                            SUBJECT: Meeting Thursday\n                     \
    \       TO: Dave Crocker <DCrocker@Rand-Unix>\n                            CC:\
    \ Mamie ) ),\n                    LIST( INDEX=0,\n    document-body         LIST(\
    \ TEXT=\n                            \"Dave:\n                            Please\
    \ mark your calendar for\n                            our meeting Thursday at\
    \ 3 pm.\n                            --jon.\" ) ) ) )\n      The relay MPM adds\
    \ its ihn to the stamp, but otherwise the message\n      is unchanged.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Examples & Scenarios
  contents:
  - "Examples & Scenarios\n  3.  Between the destination MPM and the relay MPM.\n\
    \        LIST( LIST( INDEX=1993, INTEGER=167772359 ),\n              LIST( INDEX=0,\n\
    \    command         LIST( PROPLIST( IA: 167772404,\n    mailbox             \
    \            USER: *MPM* ),\n    stamp                 LIST( INTEGER=167772359\
    \ ),\n    type                  INDEX=2\n    operation             TEXT=\"ACKNOWLEDGE\"\
    \n    arguments             LIST( LIST( INDEX=37,\n     tid                  \
    \            INTEGER=167772404 ),\n                                LIST( INTEGER=167772404,\n\
    \     trail                            INTEGER=167772246,\n                  \
    \                    INTEGER=167772359 ),\n     answer                     BOOLEAN=TRUE,\n\
    \     reason                     LIST( TEXT=\"OK\" ),\n     how-delivered    \
    \          LIST( TEXT=\"ACCEPT\" ) ),\n    error-list            LIST( INDEX=0,\n\
    \                                TEXT=\"No Errors\") ),\n    document  LIST( )\
    \ )\n      The destination MPM delivers the message to the user's UIP, and\n \
    \     composes an acknowledgment.  The acknowledgment is addressed to\n      the\
    \ originating MPM.  Note that the trail is the stamp of the\n      incoming message\
    \ plus the ihn of the destination MPM.\n                                     \
    \          Internet Message Protocol\n                                       \
    \             Examples & Scenarios\n  4.  Between the relay MPM and the originating\
    \ MPM.\n        LIST( LIST( INDEX=1993, INTEGER=167772359 ),\n              LIST(\
    \ INDEX=0,\n    command         LIST( PROPLIST( IA: 167772404,\n    mailbox  \
    \                       USER: *MPM* ),\n    stamp                 LIST( INTEGER=167772359\n\
    \                                INTEGER=167772246),\n    type               \
    \   INDEX=2\n    operation             TEXT=\"ACKNOWLEDGE\"\n    arguments   \
    \          LIST( LIST( INDEX=37,\n     tid                              INTEGER=167772404\
    \ ),\n                                LIST( INTEGER=167772404,\n     trail   \
    \                         INTEGER=167772246,\n                               \
    \       INTEGER=167772359 ),\n     answer                     BOOLEAN=TRUE,\n\
    \     reason                     LIST( TEXT=\"OK\" ),\n     how-delivered    \
    \          LIST( TEXT=\"ACCEPT\" ) ),\n    error-list            LIST( INDEX=0,\n\
    \                                TEXT=\"No Errors\") ),\n    document  LIST( )\
    \ )\n      The relay MPM adds its ihn to the stamp and forwards the\n      acknowledgment.\n"
- title: Internet Message Protocol
  contents:
  - "Internet Message Protocol\n                                               Internet\
    \ Message Protocol\n                                GLOSSARY\n"
- title: '1822'
  contents:
  - "1822\n          BBN Report 1822, \"The Specification of the Interconnection of\n\
    \          a Host and an IMP\".  The specification of interface between a\n  \
    \        host and the ARPANET.\n"
- title: Command List
  contents:
  - "Command List\n          The part of a message used by the MPMs to determine the\n\
    \          processing action to be taken.\n"
- title: datagram
  contents:
  - "datagram\n          A logical unit of data, in particular an internet datagram\
    \ is\n          the unit of data transfered between the internet module and a\n\
    \          higher level module.\n"
- title: Destination
  contents:
  - "Destination\n          The destination address, an internet header datagram protocol\n\
    \          field.\n"
- title: Document List
  contents:
  - "Document List\n          The part of the message created by or delivered to a\
    \ user.\n"
- title: header
  contents:
  - "header\n          Control information at the beginning of a message, segment,\n\
    \          datagram, packet or block of data.\n"
- title: IMP
  contents:
  - "IMP\n          The Interface Message Processor, the packet switch of the\n  \
    \        ARPANET.\n"
- title: Internet Address
  contents:
  - "Internet Address\n          A four octet (32 bit) source or destination address\
    \ consisting\n          of a Network field and a Local Address field.\n"
- title: internet datagram
  contents:
  - "internet datagram\n          The unit of data exchanged between a pair of internet\
    \ modules\n          (includes the internet header).\n"
- title: Local Address
  contents:
  - "Local Address\n          The address of a host within a network.  The actual\
    \ mapping of\n          an internet local address on to the host addresses in\
    \ a\n          network is quite general, allowing for many to one mappings.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Glossary
  contents:
  - 'Glossary

    '
- title: message
  contents:
  - "message\n          The unit of information transmitted between users of message\n\
    \          systems.  As transmitted between MPMs a message consists of a\n   \
    \       Transaction Identifier, a Command List, and a Document List.\n"
- title: module
  contents:
  - "module\n          An implementation, usually in software, of a protocol or other\n\
    \          procedure.\n"
- title: MPM
  contents:
  - "MPM\n          A Message Processing Module, the process which implements this\n\
    \          internet message protocol.\n"
- title: octet
  contents:
  - "octet\n          An eight bit byte.\n"
- title: Rest
  contents:
  - "Rest\n          The 3 octet (24 bit) local address portion of an Internet\n \
    \         Address.\n"
- title: RTP
  contents:
  - "RTP\n          Real Time Protocol:  A host-to-host protocol for communication\n\
    \          of time critical information.\n"
- title: Source
  contents:
  - "Source\n          The source address, an internet header field.\n"
- title: TCP
  contents:
  - "TCP\n          Transmission Control Protocol:  A host-to-host protocol for\n\
    \          reliable communication in internetwork environments.\n"
- title: Transaction Identifier
  contents:
  - "Transaction Identifier\n          The unique identifier of a message.\n"
- title: Type of Service
  contents:
  - "Type of Service\n          An internet datagram protocol header field which indicates\
    \ the\n          type (or quality) of service for this internet packet.\n"
- title: UIP
  contents:
  - "UIP\n          A User Interface Program, a program which presents message\n \
    \         data to a user and accepts message data from a user.  A\n          program\
    \ which interacts with the user in the composition and\n          examination\
    \ of messages.\n"
- title: XNET
  contents:
  - "XNET\n          A cross-net debugging protocol.\n                           \
    \                    Internet Message Protocol\n                             \
    \  REFERENCES\n"
- title: '[1]   Barber, D., and J. Laws, "A Basic Mail Scheme for EIN," INWG 192,'
  contents:
  - "[1]   Barber, D., and J. Laws, \"A Basic Mail Scheme for EIN,\" INWG 192,\n \
    \     February 1979.\n"
- title: '[2]   Bhushan, A., K. Progran, R. Tomlinson, and J. White,'
  contents:
  - "[2]   Bhushan, A., K. Progran, R. Tomlinson, and J. White,\n      \"Standardizing\
    \ Network Mail Headers,\" RFC 561, NIC 18516, 5\n      September 1973.\n"
- title: '[3]   Bolt Beranek and Newman, "Specification for the Interconnection of'
  contents:
  - "[3]   Bolt Beranek and Newman, \"Specification for the Interconnection of\n \
    \     a Host and an IMP,\" BBN Technical Report 1822, May 1978 (Revised).\n"
- title: '[4]   Braaten, O., "Introduction to a Mail Protocol," Norwegian'
  contents:
  - "[4]   Braaten, O., \"Introduction to a Mail Protocol,\" Norwegian\n      Computing\
    \ Center, INWG 180, August 1978.\n"
- title: '[5]   Cerf, V., "The Catenet Model for Internetworking," Information'
  contents:
  - "[5]   Cerf, V., \"The Catenet Model for Internetworking,\" Information\n    \
    \  Processing Techniques Office, Defense Advanced Research Projects\n      Agency,\
    \ IEN 48, July 1978.\n"
- title: '[6]   Crocker, D., J. Vittal, K. Progran, and D. Henderson, "Standard'
  contents:
  - "[6]   Crocker, D., J. Vittal, K. Progran, and D. Henderson, \"Standard\n    \
    \  for the Format of ARPA Network Text Messages,\" RFC 733, NIC 41952,\n     \
    \ 21 November 1977.\n"
- title: '[7]   Crocker, D., E. Szurkowski, and D. Farber, "Components of a'
  contents:
  - "[7]   Crocker, D., E. Szurkowski, and D. Farber, \"Components of a\n      Channel-independent\
    \ Memo Transmission System,\" Department of\n      Electrical Engineering, University\
    \ of Delaware,, February 1979.\n"
- title: '[8]   Feinler, E. and J. Postel, eds., "ARPANET Protocol Handbook,"'
  contents:
  - "[8]   Feinler, E. and J. Postel, eds., \"ARPANET Protocol Handbook,\"\n     \
    \ NIC 7104, for the Defense Communications Agency by the Network\n      Information\
    \ Center of SRI International, Menlo Park, California,\n      Revised January\
    \ 1978.\n"
- title: '[9]   Harrenstien, K., "Field Addressing," ARPANET Message, SRI'
  contents:
  - "[9]   Harrenstien, K., \"Field Addressing,\" ARPANET Message, SRI\n      International,\
    \ October 1977.\n"
- title: '[10]  Haverty, J., "MSDTP -- Message Services Data Transmission'
  contents:
  - "[10]  Haverty, J., \"MSDTP -- Message Services Data Transmission\n      Protocol,\"\
    \ RFC 713, NIC 34739, April 1976.\n"
- title: '[11]  Haverty, J., "Thoughts on Interactions in Distributed Services,"'
  contents:
  - "[11]  Haverty, J., \"Thoughts on Interactions in Distributed Services,\"\n  \
    \    RFC 722, NIC 36806, 16 September 1976.\n"
- title: '[12]  Haverty, J., D. Henderson, and D. Oestreicher, "Proposed'
  contents:
  - "[12]  Haverty, J., D. Henderson, and D. Oestreicher, \"Proposed\n      Specification\
    \ of an Inter-site Message Protocol,\" 8 July 1975.\n"
- title: '[13]  ISO-2014, "Writing of calendar dates in all-numeric form,"'
  contents:
  - "[13]  ISO-2014, \"Writing of calendar dates in all-numeric form,\"\n      Recommendation\
    \ 2014, International Organization for\n      Standardization, 1975.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: References
  contents:
  - 'References

    '
- title: '[14]  ISO-3307, "Information Interchange -- Representations of time of'
  contents:
  - "[14]  ISO-3307, \"Information Interchange -- Representations of time of\n   \
    \   the day,\" Recommendation 3307, International Organization for\n      Standardization,\
    \ 1975.\n"
- title: '[15]  ISO-4031, "Information Interchange -- Representation of local time'
  contents:
  - "[15]  ISO-4031, \"Information Interchange -- Representation of local time\n \
    \     differentials,\" Recommendation 4031, International Organization\n     \
    \ for Standardization, 1978.\n"
- title: '[16]  Myer, T., and D. Henderson, "Message Transmission Protocol,"'
  contents:
  - "[16]  Myer, T., and D. Henderson, \"Message Transmission Protocol,\"\n      RFC\
    \ 680, NIC 32116, 30 April 1975.\n"
- title: '[17]  Postel, J.  "Internetwork Datagram Protocol, Version 4," USC'
  contents:
  - "[17]  Postel, J.  \"Internetwork Datagram Protocol, Version 4,\" USC\n      Information\
    \ Sciences Institute, IEN 80, February 1979.\n"
- title: '[18]  Postel, J.  "NSW Data Representation (NSWB8)," IEN 39, May 1978.'
  contents:
  - '[18]  Postel, J.  "NSW Data Representation (NSWB8)," IEN 39, May 1978.

    '
- title: '[19]  Postel, J.  "NSW Transaction Protocol (NSWTP)," IEN 38, May 1978.'
  contents:
  - '[19]  Postel, J.  "NSW Transaction Protocol (NSWTP)," IEN 38, May 1978.

    '
- title: '[20]  Postel, J.  "Transmission Control Protocol, TCP, Version 4," USC'
  contents:
  - "[20]  Postel, J.  \"Transmission Control Protocol, TCP, Version 4,\" USC\n  \
    \    Information Sciences Institute, IEN 81, February 1979.\n"
- title: '[21]  Postel, J., "Assigned Numbers," RFC 750, NIC 45500,'
  contents:
  - "[21]  Postel, J., \"Assigned Numbers,\" RFC 750, NIC 45500,\n      26 September\
    \ 1978.\n"
- title: '[22]  Postel, J., "Message System Transition Plan," JBP 64,'
  contents:
  - "[22]  Postel, J., \"Message System Transition Plan,\" JBP 64,\n      USC-Information\
    \ Sciences Institute, February 1979.\n"
- title: '[23]  Rivest, R. L.  "A Method for Obtaining Digital Signatures and'
  contents:
  - "[23]  Rivest, R. L.  \"A Method for Obtaining Digital Signatures and\n      Public-Key\
    \ Cryptosystems\"  Communications of the ACM, Vol. 21,\n      Number 2, February\
    \ 1978.\n"
- title: '[24]  Shoch, J., "A Note On Inter-Network Naming, Addressing, and'
  contents:
  - "[24]  Shoch, J., \"A Note On Inter-Network Naming, Addressing, and\n      Routing,\"\
    \ Xerox Palo Alto Research Center, IEN 19, January 1978.\n"
- title: '[25]  Thomas, R., "Providing Mail Services for NSW Users," BBN NSW'
  contents:
  - "[25]  Thomas, R., \"Providing Mail Services for NSW Users,\" BBN NSW\n      Working\
    \ Note 24, Bolt Beranek and Newman, October 1978.\n"
- title: '[26]  White, J., "A Proposed Mail Protocol," RFC 524, NIC 17140, 13 June'
  contents:
  - "[26]  White, J., \"A Proposed Mail Protocol,\" RFC 524, NIC 17140, 13 June\n\
    \      1973.\n"
- title: '[27]  White, J., "Description of a Multi-Host Journal," NIC 23144,'
  contents:
  - "[27]  White, J., \"Description of a Multi-Host Journal,\" NIC 23144,\n      30\
    \ May 1974.\n"
- title: '[28]  White, J., "Journal Subscription Service," NIC 23143, 28 May 1974.'
  contents:
  - "[28]  White, J., \"Journal Subscription Service,\" NIC 23143, 28 May 1974.\n\
    \                                               Internet Message Protocol\n  \
    \                             APPENDICES\n"
- title: A.  Encryption
  contents:
  - "A.  Encryption\n  It would be straightforward to add the capability to have the\
    \ document\n  portion of messages either wholly or partially encrypted.  The\n\
    \  approach is to define an additional basic data element to carry\n  encrypted\
    \ data.  The data within this element could be composed of\n  other elements,\
    \ but that could only be perceived after the data was\n  decrypted.\n        \
    \              +------+------+------+------+-------\n    9  Encrypt        ! \
    \ 9   !     octet count    ! Data ...\n                      +------+------+------+------+--------\n\
    \  Element code 9 (ENCRYPT) is Encrypt.  The format is the one octet type\n  code,\
    \ the three octet type count, and count octets of data.  Use of\n  this element\
    \ indicates that the data it contains is encrypted. The\n  encryption scheme is\
    \ yet to be decided but will probably be the Public\n  Key Encryption technique\
    \ [23] due to the capacity for coded\n  signatures.\n  To process this, the user\
    \ is asked for the appropriate key the first\n  time an encryption block is seen\
    \ for a particular message.  The\n  encrypted data is then decrypted.  The data\
    \ thus revealed will be in\n  the form of complete data type fields.  Encryption\
    \ cannot occur over a\n  partial field.  The revealed data is then processed normally.\n\
    \  Note that there is no reason why all fields of a document could not be\n  encrypted\
    \ including all document header information such as From,\n  Date, etc.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Appendices
  contents:
  - 'Appendices

    '
- title: B.  Data Compression
  contents:
  - "B.  Data Compression\n  When message-bags are shipped between MPMs the data should\
    \ be\n  compressed according to the following scheme:\n    shipping-unit := compression-type\
    \ message-bag\n    compression-type := A one octet compression type indicator.\n\
    \      compression-type value   description\n      ----------------------   -----------\n\
    \                 0             no compression used\n                 1      \
    \       basic compression\n    basic compression\n      This basic compression\
    \ procedure is the same as that defined for\n      use with the ARPANET FTP [8].\
    \  Three types of compression-units\n      may be formed, sequence-units, replication-units,\
    \ and\n      filler-units.  The data is formed into a series of\n      compression-units\
    \ independent of the structure or object and\n      element boundaries.\n    \
    \  sequence-unit\n        A sequence-unit is a one octet flag and count followed\
    \ by that\n        many data octets.\n          +-+-------+--------+--------+----\n\
    \          !0!   n   !     n data octets ...\n          +-+-------+--------+--------+----\n\
    \        The flag and count octet has its high order bit zero and the\n      \
    \  remaining bits indicate the count (in the range 0 to 127) of\n        following\
    \ data octets.\n      replication-unit\n        A replication-unit is a one octet\
    \ flag and count followed by one\n        data octet, which is to be replicated\
    \ count times.\n          +--+------+--------+\n          !10!   n  !   data !\n\
    \          +--+------+--------+\n        The flag and count octet has its high\
    \ order two bits equal\n        one-zero and the remaining six bits indicate the\
    \ count (in the\n        range 0 to 63) of number of time to replicate the data\
    \ octet.\n                                               Internet Message Protocol\n\
    \                                                              Appendices\n  \
    \    filler-unit\n        A filler-unit is a one octet flag and count, indicating\
    \ that a\n        filler octet is to be inserted count times.\n          +--+------+\n\
    \          !11!   n  !\n          +--+------+\n        The flag and count octet\
    \ has its high order two bits equal\n        one-one and the remaining six bits\
    \ indicate the count (in the\n        range 0 to 63) of number of time to insert\
    \ the filler octet.\n        The filler octet is zero, the octet with all bits\
    \ zero.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
