- title: __initial_text__
  contents:
  - '                         TFTP Option Extension

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Trivial File Transfer Protocol [1] is a simple, lock-step, file\n\
    \   transfer protocol which allows a client to get or put a file onto a\n   remote\
    \ host.  This document describes a simple extension to TFTP to\n   allow option\
    \ negotiation prior to the file transfer.\n"
- title: Introduction
  contents:
  - "Introduction\n   The option negotiation mechanism proposed in this document is\
    \ a\n   backward-compatible extension to the TFTP protocol.  It allows file\n\
    \   transfer options to be negotiated prior to the transfer using a\n   mechanism\
    \ which is consistent with TFTPs Request Packet format.  The\n   mechanism is\
    \ kept simple by enforcing a request-respond-acknowledge\n   sequence, similar\
    \ to the lock-step approach taken by TFTP itself.\n   While the option negotiation\
    \ mechanism is general purpose, in that\n   many types of options may be negotiated,\
    \ it was created to support\n   the Blocksize option defined in [2].  Additional\
    \ options are defined\n   in [3].\n   This document assumes reader familiarity\
    \ with the TFTP specification\n   [1] and its terminology.\n"
- title: Packet Formats
  contents:
  - "Packet Formats\n   TFTP options are appended to the Read Request and Write Request\n\
    \   packets.  A new type of TFTP packet, the Option Acknowledgment\n   (OACK),\
    \ is used to acknowledge a client's option negotiation request.\n   A new error\
    \ code, 8, is hereby defined to indicate that a transfer\n   should be terminated\
    \ due to option negotiation.\n   Options are appended to a TFTP Read Request or\
    \ Write Request packet\n   as follows:\n      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+-->\n\
    \      |  opc  |filename| 0 |  mode  | 0 |  opt1  | 0 | value1 | 0 | <\n     \
    \ +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+-->\n       >-------+---+---~~---+---+\n\
    \      <  optN  | 0 | valueN | 0 |\n       >-------+---+---~~---+---+\n      The\
    \ \"0\"s shown in these illustrations and the ones below are all\n      all zero\
    \ octets, i.e., NULL terminators for the preceeding\n      fields.\n      opc\n\
    \         The opcode field contains either a 1, for Read Requests, or 2,\n   \
    \      for Write Requests, as defined in [1].\n      filename\n         The name\
    \ of the file to be read or written, as defined in [1].\n         This is a NULL-terminated\
    \ field.\n      mode\n         The mode of the file transfer: \"netascii\", \"\
    octet\", or \"mail\",\n         as defined in [1].  This is a NULL-terminated\
    \ field.\n      opt1\n         The first option, in case-insensitive ASCII (e.g.,\
    \ \"blksize\").\n         This is a NULL-terminated ASCII field.\n      value1\n\
    \         The value associated with the first option, in case-insensitive\n  \
    \       ASCII.  This is a NULL-terminated field.\n      optN, valueN\n       \
    \  The final option/value pair.  Each NULL-terminated field is\n         specified\
    \ in case-insensitive ASCII.\n   The options and values are all NULL-terminated,\
    \ in keeping with the\n   original request format.  If multiple options are to\
    \ be negotiated,\n   they are appended to each other.  The order in which options\
    \ are\n   specified is not significant.  The maximum size of a request packet\n\
    \   is 512 octets.\n   The OACK packet has the following format:\n      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+\n\
    \      |  opc  |  opt1  | 0 | value1 | 0 |  optN  | 0 | valueN | 0 |\n      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+\n\
    \      opc\n         The opcode field contains a 6, for Option Acknowledgment.\n\
    \      opt1\n         The first option acknowledgment, copied from the original\n\
    \         request.\n      value1\n         The acknowledged value associated with\
    \ the first option.  If\n         and how this value may differ from the original\
    \ request is\n         detailed in the specification for the option.\n      optN,\
    \ valueN\n         The final option/value acknowledgment pair.\n"
- title: Negotiation Protocol
  contents:
  - "Negotiation Protocol\n   The client appends options at the end of the Read Request\
    \ or Write\n   request packet, as shown above.  Any number of options may be\n\
    \   specified; however, an option may only be specified once.  The order\n   of\
    \ the options is not significant.\n   If the server supports option negotiation,\
    \ and it recognizes one or\n   more of the options specified in the request packet,\
    \ the server may\n   respond with an Options Acknowledgment (OACK).  Each option\
    \ the\n   server recognizes, and accepts the value for, is included in the\n \
    \  OACK.  Some options may allow alternate values to be proposed, but\n   this\
    \ is an option specific feature.  The server must not include in\n   the OACK\
    \ any option which had not been specifically requested by the\n   client; that\
    \ is, only the client may initiate option negotiation.\n   Options which the server\
    \ does not support should be omitted from the\n   OACK; they must not cause an\
    \ ERROR packet to be generated.  If the\n   value of a supported option is invalid,\
    \ the specification for that\n   option will indicate whether the server should\
    \ simply omit the option\n   from the OACK, respond with an alternate value, or\
    \ send an ERROR\n   packet, with error code 8, to terminate the transfer.\n  \
    \ An option not acknowledged by the server must be ignored by the\n   client and\
    \ server as if it were never requested.  If multiple options\n   were requested,\
    \ the client must use those options which were\n   acknowledged by the server\
    \ and must not use those options which were\n   not acknowledged by the server.\n\
    \   When the client appends options to the end of a Read Request packet,\n   three\
    \ possible responses may be returned by the server:\n      OACK  - acknowledge\
    \ of Read Request and the options;\n      DATA  - acknowledge of Read Request,\
    \ but not the options;\n      ERROR - the request has been denied.\n   When the\
    \ client appends options to the end of a Write Request packet,\n   three possible\
    \ responses may be returned by the server:\n      OACK  - acknowledge of Write\
    \ Request and the options;\n      ACK   - acknowledge of Write Request, but not\
    \ the options;\n      ERROR - the request has been denied.\n   If a server implementation\
    \ does not support option negotiation, it\n   will likely ignore any options appended\
    \ to the client's request.  In\n   this case, the server will return a DATA packet\
    \ for a Read Request\n   and an ACK packet for a Write Request establishing normal\
    \ TFTP data\n   transfer.  In the event that a server returns an error for a request\n\
    \   which carries an option, the client may attempt to repeat the request\n  \
    \ without appending any options.  This implementation option would\n   handle\
    \ servers which consider extraneous data in the request packet\n   to be erroneous.\n\
    \   Depending on the original transfer request there are two ways for a\n   client\
    \ to confirm acceptance of a server's OACK.  If the transfer was\n   initiated\
    \ with a Read Request, then an ACK (with the data block\n   number set to 0) is\
    \ sent by the client to confirm the values in the\n   server's OACK packet.  If\
    \ the transfer was initiated with a Write\n   Request, then the client begins\
    \ the transfer with the first DATA\n   packet, using the negotiated values.  If\
    \ the client rejects the OACK,\n   then it sends an ERROR packet, with error code\
    \ 8, to the server and\n   the transfer is terminated.\n   Once a client acknowledges\
    \ an OACK, with an appropriate non-error\n   response, that client has agreed\
    \ to use only the options and values\n   returned by the server.  Remember that\
    \ the server cannot request an\n   option; it can only respond to them.  If the\
    \ client receives an OACK\n   containing an unrequested option, it should respond\
    \ with an ERROR\n   packet, with error code 8, and terminate the transfer.\n"
- title: Examples
  contents:
  - "Examples\n   Read Request\n      client                                     \
    \      server\n      -------------------------------------------------------\n\
    \      |1|foofile|0|octet|0|blksize|0|1432|0|  -->               RRQ\n       \
    \                             <--  |6|blksize|0|1432|0|   OACK\n      |4|0|  -->\
    \                                                ACK\n                       \
    \      <--  |3|1| 1432 octets of data |   DATA\n      |4|1|  -->             \
    \                                   ACK\n                             <--  |3|2|\
    \ 1432 octets of data |   DATA\n      |4|2|  -->                             \
    \                   ACK\n                             <--  |3|3|<1432 octets of\
    \ data |   DATA\n      |4|3|  -->                                            \
    \    ACK\n   Write Request\n      client                                     \
    \      server\n      -------------------------------------------------------\n\
    \      |2|barfile|0|octet|0|blksize|0|2048|0|  -->               RRQ\n       \
    \                             <--  |6|blksize|0|2048|0|   OACK\n      |3|1| 2048\
    \ octets of data |  -->                          DATA\n                      \
    \                             <--  |4|1|   ACK\n      |3|2| 2048 octets of data\
    \ |  -->                          DATA\n                                     \
    \              <--  |4|2|   ACK\n      |3|3|<2048 octets of data |  -->      \
    \                    DATA\n                                                  \
    \ <--  |4|3|   ACK\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1] Sollins, K., \"The TFTP Protocol (Revision 2)\", STD 33, RFC\
    \ 1350,\n       MIT, July 1992.\n   [2] Malkin, G., and A. Harkin, \"TFTP Blocksize\
    \ Option\", RFC 1783,\n       Xylogics, Inc., Hewlett Packard Co., March 1995.\n\
    \   [3] Malkin, G., and A. Harkin, A., \"TFTP Timeout Interval and\n       Transfer\
    \ Size Options\", RFC 1784, Xylogics, Inc., Hewlett Packard\n       Co., March\
    \ 1995.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n       Gary Scott Malkin\n       Xylogics, Inc.\n       53\
    \ Third Avenue\n       Burlington, MA  01803\n       Phone:  (617) 272-8140\n\
    \       EMail:  gmalkin@xylogics.com\n       Art Harkin\n       Internet Services\
    \ Project\n       Information Networks Division\n       19420 Homestead Road MS\
    \ 43LN\n       Cupertino, CA  95014\n       Phone: (408) 447-3755\n       EMail:\
    \ ash@cup.hp.com\n"
