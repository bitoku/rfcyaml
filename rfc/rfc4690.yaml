- title: __initial_text__
  contents:
  - '  Review and Recommendations for Internationalized Domain Names (IDNs)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This note describes issues raised by the deployment and use of\n\
    \   Internationalized Domain Names.  It describes problems both at the\n   time\
    \ of registration and for use of those names in the DNS.  It\n   recommends that\
    \ IETF should update the RFCs relating to IDNs and a\n   framework to be followed\
    \ in doing so, as well as summarizing and\n   identifying some work that is required\
    \ outside the IETF.  In\n   particular, it proposes that some changes be investigated\
    \ for the\n   Internationalizing Domain Names in Applications (IDNA) standard\
    \ and\n   its supporting tables, based on experience gained since those\n   standards\
    \ were completed.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. The Role of IDNs and This Document .........................3\n  \
    \    1.2. Status of This Document and Its Recommendations ............4\n    \
    \  1.3. The IDNA Standard ..........................................4\n      1.4.\
    \ Unicode Documents ..........................................5\n      1.5. Definitions\
    \ ................................................5\n           1.5.1. Language\
    \ ............................................6\n           1.5.2. Script ..............................................6\n\
    \           1.5.3. Multilingual ........................................6\n  \
    \         1.5.4. Localization ........................................7\n    \
    \       1.5.5. Internationalization ................................7\n      1.6.\
    \ Statements and Guidelines ..................................7\n           1.6.1.\
    \ IESG Statement ......................................8\n           1.6.2. ICANN\
    \ Statements ....................................8\n   2. General Problems and\
    \ Issues ....................................11\n      2.1. User Conceptions,\
    \ Local Character Sets, and Input issues ..11\n      2.2. Examples of Issues ........................................13\n\
    \           2.2.1. Language-Specific Character Matching ...............13\n  \
    \         2.2.2. Multiple Scripts ...................................13\n    \
    \       2.2.3. Normalization and Character Mappings ...............14\n      \
    \     2.2.4. URLs in Printed Form ...............................16\n        \
    \   2.2.5. Bidirectional Text .................................17\n          \
    \ 2.2.6. Confusable Character Issues ........................17\n           2.2.7.\
    \ The IESG Statement and IDNA issues .................19\n   3. Migrating to New\
    \ Versions of Unicode ...........................20\n      3.1. Versions of Unicode\
    \ .......................................20\n      3.2. Version Changes and Normalization\
    \ Issues ..................21\n           3.2.1. Unnormalized Combining Sequences\
    \ ...................21\n           3.2.2. Combining Characters and Character\
    \ Components ......22\n           3.2.3. When does normalization occur? .....................23\n\
    \   4. Framework for Next Steps in IDN Development ....................24\n  \
    \    4.1. Issues within the Scope of the IETF .......................24\n    \
    \       4.1.1. Review of IDNA .....................................24\n      \
    \     4.1.2. Non-DNS and Above-DNS Internationalization\n                  Approaches\
    \ .........................................25\n           4.1.3. Security Issues,\
    \ Certificates, etc. ................25\n           4.1.4. Protocol Changes and\
    \ Policy Implications ...........27\n           4.1.5. Non-US-ASCII in Local Part\
    \ of Email Addresses ......27\n           4.1.6. Use of the Unicode Character\
    \ Set in the IETF .......27\n      4.2. Issues That Fall within the Purview of\
    \ ICANN ..............28\n           4.2.1. Dispute Resolution .................................28\n\
    \           4.2.2. Policy at Registries ...............................28\n  \
    \         4.2.3. IDNs at the Top Level of the DNS ...................29\n   5.\
    \ Specific Recommendations for Next Steps ........................29\n      5.1.\
    \ Reduction of Permitted Character List .....................29\n           5.1.1.\
    \ Elimination of All Non-Language Characters .........30\n           5.1.2. Elimination\
    \ of Word-Separation Punctuation .........30\n      5.2. Updating to New Versions\
    \ of Unicode .......................30\n      5.3. Role and Uses of the DNS ..................................31\n\
    \      5.4. Databases of Registered Names .............................31\n  \
    \ 6. Security Considerations ........................................31\n   7.\
    \ Acknowledgements ...............................................32\n   8. References\
    \ .....................................................32\n      8.1. Normative\
    \ References ......................................32\n      8.2. Informative\
    \ References ....................................33\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  The Role of IDNs and This Document
  contents:
  - "1.1.  The Role of IDNs and This Document\n   While IDNs have been advocated as\
    \ the solution to a wide range of\n   problems, this document is written from\
    \ the perspective that they are\n   no more and no less than DNS names, reflecting\
    \ the same requirements\n   for use, stability, and accuracy as traditional \"\
    hostnames\", but\n   using a much larger collection of permitted characters. \
    \ In\n   particular, while IDNs represent a step toward an Internet that is\n\
    \   equally accessible from all languages and scripts, they, at best,\n   address\
    \ only a small part of that very broad objective.  There has\n   been controversy\
    \ since IDNs were first suggested about how important\n   they will actually turn\
    \ out to be; that controversy will probably\n   continue.  Accessibility from\
    \ all languages is an important\n   objective, hence it is important that our\
    \ standards and definitions\n   for IDNs be smoothly adaptable to additional scripts\
    \ as they are\n   added to the Unicode character set.\n   The utility of IDNs\
    \ must be evaluated in terms of their application\n   by users and in protocols:\
    \ the ability to simply put a name into the\n   DNS and retrieve it is not, in\
    \ and of itself, important.  From this\n   point of view, IDNs will be useful\
    \ and effective if they provide\n   stable and predictable references -- references\
    \ that are no less\n   stable and predictable, and no less secure, than their\
    \ ASCII\n   counterparts.\n   This combination of objectives and criteria has\
    \ proven very difficult\n   to satisfy.  Experience in developing the IDNA standard\
    \ and during\n   the initial years of its implementation and deployment suggests\
    \ that\n   it may be impossible to fully satisfy all of them and that\n   engineering\
    \ compromises are needed to yield a result that is\n   workable, even if not completely\
    \ satisfactory.  Based on that\n   experience and issues that have been raised,\
    \ it is now appropriate to\n   review some of the implications of IDNs, the decisions\
    \ made in\n   defining them, and the foundation on which they rest and determine\n\
    \   whether changes are needed and, if so, which ones.\n   The design of the DNS\
    \ itself imposes some additional constraints.  If\n   the DNS is to remain globally\
    \ interoperable, there are specific\n   characteristics that no implementation\
    \ of IDNs, or the DNS more\n   generally, can change.  For example, because the\
    \ DNS is a global\n   hierarchal administrative namespace with only a single name\
    \ at any\n   given node, there is one and only one owner of each domain name.\n\
    \   Also, when strings are looked up in the DNS, positive responses can\n   only\
    \ reflect exact matches: if there is no exact match, then one gets\n   an error\
    \ reply, not a list of near matches or other supplemental\n   information.  Searches\
    \ and approximate matchings are not possible.\n   Finally, because the DNS is\
    \ a distributed system where any server\n   might cache responses, and later use\
    \ those cached responses to\n   attempt to satisfy queries before a global lookup\
    \ is done, every\n   server must use the same matching criteria.\n"
- title: 1.2.  Status of This Document and Its Recommendations
  contents:
  - "1.2.  Status of This Document and Its Recommendations\n   This document reviews\
    \ the IDN landscape from an IETF perspective and\n   presents the recommendations\
    \ and conclusions of the IAB, based\n   partially on input from an ad hoc committee\
    \ charged with reviewing\n   IDN issues and the path forward (see Section 7).\
    \  Its recommendations\n   are advice to the IETF, or in a few cases to other\
    \ bodies, for topics\n   to be investigated and actions to be taken if those bodies,\
    \ after\n   their examinations, consider those actions appropriate.\n"
- title: 1.3.  The IDNA Standard
  contents:
  - "1.3.  The IDNA Standard\n   During 2002, the IETF completed the following RFCs\
    \ that, together,\n   define IDNs:\n   RFC 3454  Preparation of Internationalized\
    \ Strings (\"Stringprep\")\n      [RFC3454].\n      Stringprep is a generic mechanism\
    \ for taking a Unicode string and\n      converting it into a canonical format.\
    \  Stringprep itself is just\n      a collection of rules, tables, and operations.\
    \  Any protocol or\n      algorithm that uses it must define a \"Stringprep profile\"\
    , which\n      specifies which of those rules are applied, how, and with which\n\
    \      characteristics.\n   RFC 3490  Internationalizing Domain Names in Applications\
    \ (IDNA)\n      [RFC3490].\n      IDNA is the base specification in this group.\
    \  It specifies that\n      Nameprep is used as the Stringprep profile for domain\
    \ names, and\n      that Punycode is the relevant encoding mechanism for use in\n\
    \      generating an ASCII-compatible (\"ACE\") form of the name.  It also\n \
    \     applies some additional conversions and character filtering that\n     \
    \ are not part of Nameprep.\n   RFC 3491  Nameprep: A Stringprep Profile for Internationalized\
    \ Domain\n      Names (IDN) [RFC3491].\n      Nameprep is designed to meet the\
    \ specific needs of IDNs and, in\n      particular, to support case-folding for\
    \ scripts that support what\n      are traditionally known as upper- and lowercase\
    \ forms of the same\n      letters.  The result of the Nameprep algorithm is a\
    \ string\n      containing a subset of the Unicode Character set, normalized and\n\
    \      case-folded so that case-insensitive comparison can be made.\n   RFC 3492\
    \  Punycode: A Bootstring encoding of Unicode for\n      Internationalized Domain\
    \ Names in Applications (IDNA) [RFC3492].\n      Punycode is a mechanism for encoding\
    \ a Unicode string in ASCII\n      characters.  The characters used are the same\
    \ the subset of\n      characters that are allowed in the hostname definition\
    \ of DNS,\n      i.e., the \"letter, digit, and hyphen\" characters, sometimes\
    \ known\n      as \"LDH\".\n"
- title: 1.4.  Unicode Documents
  contents:
  - "1.4.  Unicode Documents\n   Unicode is used as the base, and defining, character\
    \ set for IDNs.\n   Unicode is standardized by the Unicode Consortium, and synchronized\n\
    \   with ISO to create ISO/IEC 10646 [ISO10646].  At the time the RFCs\n   mentioned\
    \ earlier were created, Unicode was at Version 3.2.  For\n   reasons explained\
    \ later, it was necessary to pick a particular,\n   then-current, version of Unicode\
    \ when IDNA was adopted.\n   Consequently, the RFCs are explicitly dependent on\
    \ Unicode Version\n   3.2 [Unicode32].  There is, at present, no established mechanism\
    \ for\n   modifying the IDNA RFCs to use newer Unicode versions (see\n   Section\
    \ 3.1).\n   Unicode is a very large and complex character set.  (The term\n  \
    \ \"character set\" or \"charset\" is used in a way that is peculiar to the\n\
    \   IETF and may not be the same as the usage in other bodies and\n   contexts.)\
    \  The Unicode Standard and related documents are created\n   and maintained by\
    \ the Unicode Technical Committee (UTC), one of the\n   committees of the Unicode\
    \ Consortium.\n   The Consortium first published The Unicode Standard [Unicode10]\
    \ in\n   1991, and continues to develop standards based on that original work.\n\
    \   Unicode is developed in conjunction with the International\n   Organization\
    \ for Standardization, and it shares its character\n   repertoire with ISO/IEC\
    \ 10646.  Unicode and ISO/IEC 10646 function\n   equivalently as character encodings,\
    \ but The Unicode Standard\n   contains much more information for implementers,\
    \ covering -- in depth\n   -- topics such as bitwise encoding, collation, and\
    \ rendering.  The\n   Unicode Standard enumerates a multitude of character properties,\n\
    \   including those needed for supporting bidirectional text.  The\n   Unicode\
    \ Consortium and ISO standards do use slightly different\n   terminology.\n"
- title: 1.5.  Definitions
  contents:
  - "1.5.  Definitions\n   The following terms and their meanings are critical to\
    \ understanding\n   the rest of this document and to discussions of IDNs more\
    \ generally.\n   These terms are derived from [RFC3536], which contains additional\n\
    \   discussion of some of them.\n"
- title: 1.5.1.  Language
  contents:
  - "1.5.1.  Language\n   A language is a way that humans interact.  The use of language\
    \ occurs\n   in many forms, including speech, writing, and signing.\n   Some languages\
    \ have a close relationship between the written and\n   spoken forms, while others\
    \ have a looser relationship.  RFC 3066\n   [RFC3066] discusses languages in more\
    \ detail and provides identifiers\n   for languages for use in Internet protocols.\
    \  Computer languages are\n   explicitly excluded from this definition.  The most\
    \ recent IETF work\n   in this area, and on script identification (see below),\
    \ is documented\n   in [RFC4645] and [RFC4646].\n"
- title: 1.5.2.  Script
  contents:
  - "1.5.2.  Script\n   A script is a set of graphic characters used for the written\
    \ form of\n   one or more languages.  This definition is the one used in\n   [ISO10646].\n\
    \   Examples of scripts are Arabic, Cyrillic, Greek, Han (the so-called\n   ideographs\
    \ used in writing Chinese, Japanese, and Korean), and\n   \"Latin\".  Arabic,\
    \ Greek, and Latin are, of course, also names of\n   languages.\n   Historically,\
    \ the script that is known as \"Latin\" in Unicode and most\n   contexts associated\
    \ with information technology standards is known in\n   the linguistic community\
    \ as \"Roman\" or \"Roman-derived\".  The latter\n   terminology distinguishes\
    \ between the Latin language and the\n   characters used to write it, especially\
    \ in Republican times, from the\n   much richer and more decorated script derived\
    \ and adapted from those\n   characters.  Since IDNA is defined using Unicode\
    \ and that standard\n   used the term \"LATIN\" in its character names and descriptions,\
    \ that\n   terminology will be used in this document as well except when\n   \"\
    Roman-derived\" is needed for clarity.  However, readers approaching\n   this\
    \ document from a cultural or linguistic standpoint should be\n   aware that the\
    \ use of, or references to, \"Latin script\" in this\n   document refers to the\
    \ entire collection of Roman-derived characters,\n   not just the characters used\
    \ to write the Latin language.  Some other\n   issues with script identification\
    \ and relationships with other\n   standards are discussed in [RFC4646].\n"
- title: 1.5.3.  Multilingual
  contents:
  - "1.5.3.  Multilingual\n   The term \"multilingual\" has many widely-varying definitions\
    \ and thus\n   is not recommended for use in standards.  Some of the definitions\n\
    \   relate to the ability to handle international characters; other\n   definitions\
    \ relate to the ability to handle multiple charsets; and\n   still others relate\
    \ to the ability to handle multiple languages.\n   While this term has been deprecated\
    \ for IETF-related uses and does\n   not otherwise appear in this document, a\
    \ discussion here seemed\n   appropriate since the term is still widely used in\
    \ some discussions\n   of IDNs.\n"
- title: 1.5.4.  Localization
  contents:
  - "1.5.4.  Localization\n   Localization is the process of adapting an internationalized\n\
    \   application platform or application to a specific cultural\n   environment.\
    \  In localization, the same semantics are preserved while\n   the syntax or presentation\
    \ forms may be changed.\n   Localization is the act of tailoring an application\
    \ for a different\n   language or script or culture.  Some internationalized applications\n\
    \   can handle a wide variety of languages.  Typical users understand\n   only\
    \ a small number of languages, so the program must be tailored to\n   interact\
    \ with users in just the languages they know.\n   Somewhat different definitions\
    \ for localization and\n   internationalization (see below) are used by groups\
    \ other than the\n   IETF.  See [W3C-Localization] for one example.\n"
- title: 1.5.5.  Internationalization
  contents:
  - "1.5.5.  Internationalization\n   In the IETF, the term \"internationalization\"\
    \ is used to describe\n   adding or improving the handling of non-ASCII text in\
    \ a protocol.\n   Other bodies use the term in other ways, often with subtle variation\n\
    \   in meaning.  The term \"internationalization\" is often abbreviated\n   \"\
    i18n\" (and localization as \"l10n\").\n   Many protocols that handle text only\
    \ handle the characters associated\n   with one script (often, a subset of the\
    \ characters used in writing\n   English text), or leave the question of what\
    \ character set is used up\n   to local guesswork (which leads to interoperability\
    \ problems).\n   Adding non-ASCII text to such a protocol allows the protocol\
    \ to\n   handle more scripts, with the intention of being able to include all\n\
    \   of the scripts that are useful in the world.  It is naive (sic) to\n   believe\
    \ that all English words can be written in ASCII, various\n   mythologies notwithstanding.\n"
- title: 1.6.  Statements and Guidelines
  contents:
  - "1.6.  Statements and Guidelines\n   When the IDNA RFCs were published, the IESG\
    \ and ICANN made statements\n   that were intended to guide deployment and future\
    \ work.  In recent\n   months, ICANN has updated its statement and others have\
    \ also made\n   contributions.  It is worth noting that the quality of understanding\n\
    \   of internationalization issues as applied to the DNS has evolved\n   considerably\
    \ over the last few years.  Organizations that took\n   specific positions a year\
    \ or more ago might not make exactly the same\n   statements today.\n"
- title: 1.6.1.  IESG Statement
  contents:
  - "1.6.1.  IESG Statement\n   The IESG made a statement on IDNA [IESG-IDN]:\n  \
    \    IDNA, through its requirement of Nameprep [RFC3491], uses\n      equivalence\
    \ tables that are based only on the characters\n      themselves; no attention\
    \ is paid to the intended language (if any)\n      for the domain name.  However,\
    \ for many domain names, the intended\n      language of one or more parts of\
    \ the domain name actually does\n      matter to the users.\n      Similarly,\
    \ many names cannot be presented and used without\n      ambiguity unless the\
    \ scripts to which their characters belong are\n      known.  In both cases, this\
    \ additional information should be of\n      concern to the registry.\n   The\
    \ statement is longer than this, but these paragraphs are the\n   important ones.\
    \  The rest of the statement consists of explanations\n   and examples.\n"
- title: 1.6.2.  ICANN Statements
  contents:
  - '1.6.2.  ICANN Statements

    '
- title: 1.6.2.1.  Initial ICANN Guidelines
  contents:
  - "1.6.2.1.  Initial ICANN Guidelines\n   Soon after the IDNA standards were adopted,\
    \ ICANN produced an initial\n   version of its \"IDN Guidelines\" [ICANNv1]. \
    \ This document was\n   intended to serve two purposes.  The first was to provide\
    \ a basis for\n   releasing the Generic Top Level Domain (gTLD) registries that\
    \ had\n   been established by ICANN from a contractual restriction on the\n  \
    \ registration of labels containing hyphens in the third and fourth\n   positions.\
    \  The second was to provide a general framework for the\n   development of registry\
    \ policies for the implementation of IDNs.\n   One of the key components of this\
    \ framework prescribed strict\n   compliance with RFCs 3490, 3491, and 3492. \
    \ With the framework, ICANN\n   specified that IDNA was to be the sole mechanism\
    \ to be used in the\n   DNS to represent IDNs.\n   Limitations on the characters\
    \ available for inclusion in IDNs were\n   mandated by two mechanisms.  The first\
    \ was by requiring an\n   \"inclusion-based approach (meaning that code points\
    \ that are not\n   explicitly permitted by the registry are prohibited) for identifying\n\
    \   permissible\n   code points from among the full Unicode repertoire.\"  The\
    \ second\n   mechanism required the association of every IDN with a specific\n\
    \   language, with additional policies also being language based:\n   \"In implementing\
    \ the IDN standards, top-level domain registries will\n   (a) associate each registered\
    \ internationalized domain name with one\n   language or set of languages,\n \
    \  (b) employ language-specific registration and administration rules\n   that\
    \ are documented and publicly available, such as the reservation\n   of all domain\
    \ names with equivalent character variants in the\n   languages associated with\
    \ the registered domain name, and,\n   (c) where the registry finds that the registration\
    \ and administration\n   rules for a given language would benefit from a character\
    \ variants\n   table, allow registrations in that language only when an appropriate\n\
    \   table is available. ...  In implementing the IDN standards, top-level\n  \
    \ domain registries should, at least initially, limit any given domain\n   label\
    \ (such as a second-level domain name) to the characters\n   associated with one\
    \ language or set of languages only.\"\n   It was left to each TLD registry to\
    \ define the character repertoire\n   it would associate with any given language.\
    \  This led to significant\n   variation from registry to registry, with further\
    \ heterogeneity in\n   the underlying language-based IDN policies.  If the guidelines\
    \ had\n   made provision for IDN policies also being based on script, a\n   substantial\
    \ amount of the resulting ambiguity could have been\n   avoided.  However, they\
    \ did not, and the sequence of events leading\n   to the present review of IDNA\
    \ was thus triggered.\n"
- title: 1.6.2.2.  ICANN Version 2 Guidelines
  contents:
  - "1.6.2.2.  ICANN Version 2 Guidelines\n   One of the responses of the TLD registries\
    \ to what was widely\n   perceived as a crisis situation was to invoke the mechanism\
    \ described\n   in the initial guidelines: \"As the deployment of IDNs proceeds,\
    \ ICANN\n   and the IDN registries will review these Guidelines at regular\n \
    \  intervals, and revise them as necessary based on experience.\"\n   The pivotal\
    \ requirement was the modification of the guidelines to\n   permit script-based\
    \ policies for IDNs.  Further concern was expressed\n   about the need for realistically\
    \ implementable mechanisms for the\n   propagation of TLD registry policies into\
    \ the lower levels of their\n   name trees.  In addition to the anticipated increase\
    \ of constraint on\n   the protocol level, one obvious additional approach would\
    \ be to\n   replace the guidelines by an instrument that itself had clear status\n\
    \   in the IETF's normative framework.  A BCP was therefore seen as the\n   appropriate\
    \ focus for longer-term effort.  The most pressing issues\n   would be dealt with\
    \ in the interim by incremental modification to the\n   guidelines, but no need\
    \ was seen for the detailed further development\n   of those guidelines once that\
    \ incremental modification was complete.\n   The outcome of this action was a\
    \ version 2.0 of the guidelines\n   [ICANNv2], which was endorsed by the ICANN\
    \ Board on November 8, 2005\n   for a period of nine months.  The Board stated\
    \ further that it \"tasks\n   the IDN working group to continue its important\
    \ work and return to\n   the board with specific IDN improvement recommendations\
    \ before the\n   ICANN Meeting in Morocco\" and \"supports the working group's\
    \ continued\n   action to reframe the guidelines completely in a manner appropriate\n\
    \   for further development as a Best Current Practices (BCP) document,\n   to\
    \ ensure that the Guideline directions will be used deeper into the\n   DNS hierarchy\
    \ and within TLD's where ICANN has a lesser policy\n   relationship.\"\n   Retaining\
    \ the inclusion-based approach established in version 1.0,\n   the crucial addition\
    \ to the policy framework is that:\n   \"All code points in a single label will\
    \ be taken from the same script\n   as determined by the Unicode Standard Annex\
    \ #24: Script Names at\n   http://www.unicode.org/reports/tr24.  Exception to\
    \ this is\n   permissible for languages with established orthographies and\n \
    \  conventions that require the commingled use of multiple scripts.  In\n   such\
    \ cases, visually confusable characters from different scripts\n   will not be\
    \ allowed to coexist in a single set of permissible\n   codepoints unless a corresponding\
    \ policy and character table is\n   clearly defined.\"\n   Additionally:\n   \"\
    Permissible code points will not include: (a) line symbol-drawing\n   characters\
    \ (as those in the Unicode Box Drawing block), (b) symbols\n   and icons that\
    \ are neither alphanumeric nor ideographic language\n   characters, such as typographic\
    \ and pictographic dingbats, (c)\n   characters with well-established functions\
    \ as protocol elements, (d)\n   punctuation marks used solely to indicate the\
    \ structure of\n   sentences.\"\n   Attention has been called to several points\
    \ that are not adequately\n   dealt with (if at all) in the version 2.0 guidelines\
    \ but that ought\n   to be included in the policy framework without waiting for\
    \ the\n   production and release of a document based on a \"best practices\"\n\
    \   model.  The term \"BCP\" above does not necessarily refer to an IETF\n   consensus\
    \ document.\n   The intention in November 2005 was for the recommended major revision\n\
    \   to be put to the ICANN Board prior to its meeting in Morocco (in late\n  \
    \ June 2006), but for the changes to be collated incrementally and\n   appear\
    \ in interim version 2.n releases of the guidelines.  The IAB's\n   understanding\
    \ is that, while there has been some progress with this,\n   other issues relating\
    \ to IDNs subsequently diverted much of the\n   energy that was intended to be\
    \ devoted to the more extensive\n   treatment of the guidelines.\n"
- title: 2.  General Problems and Issues
  contents:
  - "2.  General Problems and Issues\n   This section interweaves problems and issues\
    \ of several types.  Each\n   subsection outlines something that is perceived\
    \ to be a problem or\n   issue \"with IDNs\", therefore needing correction.  Some\
    \ of these\n   issues can be at least partially resolved by making changes to\n\
    \   elements of the IDNA protocol or tables.  Others will exist as long\n   as\
    \ people have expectations of IDNs that are inconsistent with the\n   basic DNS\
    \ architecture.  It is important to identify this entire\n   range of problems\
    \ because users, registrants, and policy makers often\n   do not understand the\
    \ protocol and other technical issues but only\n   the difference between what\
    \ they believe happens or should happen and\n   what actually happens.  As long\
    \ as those differences exist, there\n   will be demands for functionality or policy\
    \ changes for IDNs.  Of\n   course, some of these demands will be less realistic\
    \ than others, but\n   even the realistic ones should be understood in the same\
    \ context as\n   the others.\n   Most of the issues that have been raised, and\
    \ that are discussed in\n   this document, exist whether IDNA remains tied to\
    \ Unicode 3.2 or\n   whether migration to new Unicode versions is contemplated.\
    \  A\n   migration path is necessary to accommodate newly-coded scripts and to\n\
    \   permit the maximum number of languages and scripts to be represented\n   in\
    \ domain names.  However, the migration issues are largely separate\n   from those\
    \ involving a single Unicode version or Version 3.2 in\n   particular, so they\
    \ have been separated into this section and\n   Section 3.\n"
- title: 2.1.  User Conceptions, Local Character Sets, and Input issues
  contents:
  - "2.1.  User Conceptions, Local Character Sets, and Input issues\n   The labels\
    \ of the DNS are just strings of characters that are not\n   inherently tied to\
    \ a particular language.  As mentioned briefly in\n   the Introduction, DNS labels\
    \ that could not lexically be words in any\n   language are possible and indeed\
    \ common.  There appears to be no\n   reason to impose protocol restrictions on\
    \ IDNs that would restrict\n   them more than all-ASCII hostname labels have been\
    \ restricted.  For\n   that reason, even describing DNS labels or strings of them\
    \ as \"names\"\n   is something of a misnomer, one that has probably added to\
    \ user\n   confusion about what to expect.\n   Ordinarily, people use \"words\"\
    \ when they think of things and wish\n   others to think of them too, for example,\
    \ \"orange\", \"tree\",\n   \"restaurant\" or \"Acme Inc\".  Words are normally\
    \ in a specific\n   language, such as English or Swedish.  The character-string\
    \ labels\n   supported by the DNS are, as suggested above, not inherently \"words\"\
    .\n   While it is useful, especially for mnemonic value or to identify\n   objects,\
    \ for actual words to be used as DNS labels, other constraints\n   on the DNS\
    \ make it impossible to guarantee that it will be possible\n   to represent every\
    \ word in every language as a DNS label,\n   internationalized or not.\n   When\
    \ writing or typing the label (or word), a script must be selected\n   and a charset\
    \ must be picked for use with that script.  The choice of\n   charset is typically\
    \ not under the control of the user on a per-word\n   or per-document basis, but\
    \ may depend on local input devices,\n   keyboard or terminal drivers, or other\
    \ decisions made by operating\n   system or even hardware designers and implementers.\n\
    \   If that charset, or the local charset being used by the relevant\n   operating\
    \ system or application software, is not Unicode, a further\n   conversion must\
    \ be performed to produce Unicode.  How often this is\n   an issue depends on\
    \ estimates of how widely Unicode is deployed as\n   the native character set\
    \ for hardware, operating systems, and\n   applications.  Those estimates differ\
    \ widely, but it should be noted\n   that, among other difficulties:\n   o  ISO\
    \ 8859 versions [ISO.8859.2003] and even national variations of\n      ISO 646\
    \ [ISO.646.1991], are still widely used in parts of Europe;\n   o  code-table\
    \ switching methods, typically based on the techniques of\n      ISO 2022 [ISO.2022.1986]\
    \ are still in general use in many parts of\n      the world, especially in Japan\
    \ with Shift-JIS and its variations;\n      and\n   o  computing, systems, and\
    \ communications in China tend to use one or\n      more of the national \"GB\"\
    \ standards rather than native Unicode.\n   Additionally, not all charsets define\
    \ their characters in the same\n   way and not all preexisting coding systems\
    \ were incorporated into\n   Unicode without changes.  Sometimes local distinctions\
    \ were made that\n   Unicode does not make or vice versa.  Consequently, conversion\
    \ from\n   other systems to Unicode may potentially lose information.\n   The\
    \ Unicode string that results from this processing -- processing\n   that is trivial\
    \ in a Unicode-native system but that may be\n   significant in others -- is then\
    \ used as input to IDNA.\n"
- title: 2.2.  Examples of Issues
  contents:
  - "2.2.  Examples of Issues\n   While much of the discussion below is stated in\
    \ terms of Unicode\n   codings and associated rules, the IAB believes that some\
    \ of the\n   issues are actually not about the Unicode character set per se, but\n\
    \   about how distributed matching systems operate in reality, and about\n   what\
    \ implications the distributed delayed search for stored data that\n   characterizes\
    \ the DNS has on the mapping algorithms.\n"
- title: 2.2.1.  Language-Specific Character Matching
  contents:
  - "2.2.1.  Language-Specific Character Matching\n   There are similar words that\
    \ can be expressed in multiple languages.\n   Consider, for example, the name\
    \ Torbjorn in Norwegian and Swedish.\n   In Norwegian it is spelled with the character\
    \ U+00F8 (LATIN SMALL\n   LETTER O WITH STROKE) in the second syllable, while\
    \ in Swedish it is\n   spelled with U+00F6 (LATIN SMALL LETTER O WITH DIAERESIS).\
    \  Those\n   characters are not treated as equivalent according to the Unicode\n\
    \   Standard and its Annexes while most people speaking Swedish, Danish,\n   or\
    \ Norwegian probably think they are equivalent.\n   It is neither possible nor\
    \ desirable to make these characters\n   equivalent on a global basis.  To do\
    \ so would, for this example,\n   rationalize the situation in Sweden while causing\
    \ considerable\n   confusion in Germany because the U+00F8 character is never\
    \ used in\n   the German language.  But the \"variant\" model introduced in [RFC3743]\n\
    \   and [RFC4290] can be used by a registry to prevent the worst\n   consequence\
    \ of the possible confusion, by ensuring either that both\n   names are registered\
    \ to the same party in a given domain or that one\n   of them is completely prohibited.\n"
- title: 2.2.2.  Multiple Scripts
  contents:
  - "2.2.2.  Multiple Scripts\n   There are languages in the world that can be expressed\
    \ using multiple\n   scripts.  For example, some Eastern European and Central\
    \ Asian\n   languages can be expressed in either Cyrillic or Latin (see\n   Section\
    \ 1.5.2) characters, or some African and Southeast Asian\n   languages can be\
    \ expressed in either Arabic or Latin characters.  A\n   few languages can even\
    \ be written in three different scripts.  In\n   other cases, the language is\
    \ typically written in a combination of\n   scripts (e.g., Kanji, Kana, and Romaji\
    \ for Japanese; Hangul and Hanji\n   for Korean).  Because of this, the same word,\
    \ in the same language,\n   can be expressed in different ways.  For some languages,\
    \ only a\n   single script is normally used to write a single word; for others,\n\
    \   mixed scripts are required; and, for still others, special\n   circumstances\
    \ may dictate mixing scripts in labels although that is\n   not normally done\
    \ for \"words\".  For IDN purposes, these variations\n   make the definition of\
    \ \"script\" extremely sensitive, especially since\n   ICANN is now recommending\
    \ that it be used as the primary basis for\n   registry policies.  However essential\
    \ it may be to prohibit mixed-\n   script labels, additional policy nuance is\
    \ required for \"languages\n   with established orthographies and conventions\
    \ that require the\n   commingled use of multiple scripts\".\n"
- title: 2.2.3.  Normalization and Character Mappings
  contents:
  - "2.2.3.  Normalization and Character Mappings\n   Unicode contains several different\
    \ models for representing\n   characters.  The Chinese (Han)-derived characters\
    \ of the \"CJK\"\n   (Chinese, Japanese, and Korean) languages are \"unified\"\
    , i.e.,\n   characters with common derivation and similar appearances are\n  \
    \ assigned to the same code point.  European characters derived from a\n   Greek-Latin\
    \ base are separated into separate code blocks for Latin,\n   Greek, and Cyrillic\
    \ even when individual characters are identical in\n   both form and semantics.\
    \  Separate code points based on font\n   differences alone are generally prohibited,\
    \ but a large number of\n   characters for \"mathematical\" use have been assigned\
    \ separate code\n   points even though they differ from base ASCII characters\
    \ only by\n   font attributes such as \"script\", \"bold\", or \"italic\".  Some\n\
    \   characters that often appear together are treated as typographical\n   digraphs\
    \ with specific code points assigned to the combination,\n   others require that\
    \ the two-character sequences be used, and still\n   others are available in both\
    \ forms.  Some Roman-derived letters that\n   were developed as decorated variations\
    \ on the basic Latin letter\n   collection (e.g., by addition of diacritical marks)\
    \ are assigned code\n   points as individual characters, others must be built\
    \ up as two (or\n   more) character sequences using \"combining characters\".\n\
    \   Many of these differences result from the desire to maintain backward\n  \
    \ compatibility while the standard evolved historically, and are hence\n   understandable.\
    \  However, the DNS requires precise knowledge of which\n   codes and code sequences\
    \ represent the same character and which ones\n   do not.  Limiting the potential\
    \ difficulties with confusable\n   characters (see Section 2.2.6) requires even\
    \ more knowledge of which\n   characters might look alike in some fonts but not\
    \ in others.  These\n   variations make it difficult or impossible to apply a\
    \ single set of\n   rules to all of Unicode and, in doing so, satisfy everyone\
    \ and their\n   perceived needs.  Instead, more or less complex mapping tables,\n\
    \   defined on a character-by-character basis, are required to\n   \"normalize\"\
    \ different representations of the same character to a\n   single form so that\
    \ matching is possible.\n   Unless normalization rules, such as those that underlie\
    \ Nameprep, are\n   applied, characters that are essentially identical will not\
    \ match in\n   the DNS, creating many opportunities for problems.  The most common\n\
    \   of these problems is that, due to the processing applied (and\n   discussed\
    \ above) before a word is represented as a Unicode string, a\n   single word can\
    \ end up being expressed as several different Unicode\n   strings.  Even if normalization\
    \ rules are applied, some strings that\n   are considered identical by users will\
    \ not compare equal.  That\n   problem is discussed in more detail elsewhere in\
    \ this document,\n   particularly in Section 3.2.1.\n   IDNA attempts to compensate\
    \ for these problems by using a\n   normalization algorithm defined by the Unicode\
    \ Consortium.  This\n   algorithm can change a sequence of one or more Unicode\
    \ characters to\n   another set of characters.  One example is that the base character\n\
    \   U+0061 (LATIN SMALL LETTER A) followed by U+0308 (COMBINING\n   DIAERESIS)\
    \ is changed to the single Unicode character U+00E4 (LATIN\n   SMALL LETTER A\
    \ WITH DIAERESIS).\n   This Unicode normalization process accounts only for simple\
    \ character\n   equivalences, not equivalences that are language or script dependent.\n\
    \   For example, as mentioned above, the characters U+00F8 (LATIN SMALL\n   LETTER\
    \ O WITH STROKE) and U+00F6 (LATIN SMALL LETTER O WITH\n   DIAERESIS) are considered\
    \ to match in Swedish (and some other\n   languages), but not for all languages\
    \ that use either of the\n   characters.  Having these characters be treated as\
    \ equivalent in some\n   contexts and not in others requires decisions and mechanisms\
    \ that, in\n   turn, depend much more on context than either IDNA or the Unicode\n\
    \   character-based normalization tables can provide.\n   Additional complications\
    \ occur if the sequences are more complicated\n   or if an attacker is making\
    \ a deliberate effort to confuse the\n   normalization process.  For example,\
    \ if the sequence U+0069 U+0307\n   (LATIN SMALL LETTER I followed by COMBINING\
    \ DOT ABOVE) appears, the\n   Unicode Normalization Method known as NFKC maps\
    \ it into U+00EF (LATIN\n   SMALL LETTER I WITH DIAERESIS), which is what one\
    \ would predict.  But\n   consider U+0131 U+0308 (LATIN SMALL LETTER DOTLESS I\
    \ and COMBINING\n   DIAERESIS):  is that the same character?  Is U+0131 U+0307\
    \ U+0307\n   (dotless i and two combining dot-above characters) equivalent to\n\
    \   U+00EF or U+0069, or neither?  NFKC does not appear to tell us, nor\n   does\
    \ the definition of U+0307 appear to tell us what happens when it\n   is combined\
    \ with other \"symbol above\" arrangements (unlike some of\n   the \"accent above\"\
    \ combining characters, which more or less specify\n   kerning).  Similar issues\
    \ arise when U+00EF is combined with various\n   dot-above combining characters.\
    \  Each of these questions provides\n   some opportunities for spoofing if different\
    \ display implementations\n   interpret the rules in different ways.\n   If we\
    \ leave Latin scripts and examine those based on Chinese\n   characters, we see\
    \ there is also an absence of specific, lexigraphic,\n   rules for transformations\
    \ between Traditional and Simplified Chinese.\n   Even if there were such rules,\
    \ unification of Japanese and Korean\n   characters with Chinese ones would make\
    \ it impossible to normalize\n   Traditional Chinese into Simplified Chinese ones\
    \ without causing\n   problems in Japanese and Korean use of the same characters.\n\
    \   More generally, while some mappings, such as those between\n   precomposed\
    \ Latin script characters and the equivalent multiple code\n   point composed\
    \ character sequences, depend only on the characters\n   themselves, in many or\
    \ most cases, such as the case with Swedish\n   above, the mapping is language\
    \ or culturally dependent.  There have\n   been discussions as to whether different\
    \ canonicalization rules (in\n   addition to or instead of Unicode normalization)\
    \ should be, or could\n   be, applied differently to different languages or scripts.\
    \  The fact\n   that most scripts included in Unicode have been initially\n  \
    \ incorporated by copying an existing standard more or less intact has\n   impact\
    \ on the optimization of these algorithms and on forward\n   compatibility.  Even\
    \ if the language is known and language-specific\n   rules can be defined, dependencies\
    \ on the language do not disappear.\n   Canonicalization operations are not possible\
    \ unless they either\n   depend only on short sequences of text or have significant\
    \ context\n   available that is not obvious from the text itself.  DNS lookups\
    \ and\n   many other operations do not have a way to capture and utilize the\n\
    \   language or other information that would be needed to provide that\n   context.\n\
    \   These variations in languages and in user perceptions of characters\n   make\
    \ it difficult or impossible to provide uniform algorithms for\n   matching Unicode\
    \ strings in a way that no end users are ever\n   surprised by the result.  For\
    \ closely-related scripts or characters,\n   surprises may even be frequent. \
    \ However, because uniform algorithms\n   are required for mappings that are applied\
    \ when names are looked up\n   in the DNS, the rules that are chosen will always\
    \ represent an\n   approximation that will be more or less successful in minimizing\n\
    \   those user surprises.  The current Nameprep and Stringprep algorithms\n  \
    \ use mapping tables to \"normalize\" different representations of the\n   same\
    \ text to a single form so that matching is possible.\n   More details on the\
    \ creation of the normalization algorithms can be\n   found in the Unicode Specification\
    \ and the associated Technical\n   Reports [UTR] and Annexes.  Technical Report\
    \ #36 [UTR36] and [UTR39]\n   are specifically related to the IDN discussion.\n"
- title: 2.2.4.  URLs in Printed Form
  contents:
  - "2.2.4.  URLs in Printed Form\n   URLs and other identifiers appear, not only\
    \ in electronic forms from\n   which they can (at least in principle) be accurately\
    \ copied and\n   \"pasted\" but in printed forms from which the user must transcribe\n\
    \   them into the computer system.  This is often known as the \"side-of-\n  \
    \ the-bus problem\" because a particularly problematic version of it\n   requires\
    \ that the user be able to observe and accurately remember a\n   URL that is quickly\
    \ glimpsed in a transient form -- a billboard seen\n   while driving, a sign on\
    \ the side of a passing vehicle, a television\n   advertisement that is not frequently\
    \ repeated or on-screen for a long\n   time, and so on.\n   The difficulty, in\
    \ short, is that two Unicode strings that are\n   actually different might look\
    \ exactly the same, especially when there\n   is no time to study them.  This\
    \ is because, for example, some glyphs\n   in Cyrillic, Greek, and Latin do look\
    \ the same, but have been\n   assigned different code points in Unicode.  Worse,\
    \ one needs to be\n   reasonably familiar with a script and how it is used to\
    \ understand\n   how much characters can reasonably vary as the result of artistic\n\
    \   fonts and typography.  For example, there are a few fonts for Latin\n   characters\
    \ that are sufficiently highly ornamented that an observer\n   might easily confuse\
    \ some of the characters with characters in Thai\n   script.  Uppercase ITC Blackadder\
    \ (a registered trademark of\n   International Typeface Corporation) and Curlz\
    \ MT are two fairly\n   obvious examples; these fonts use loops at the end of\
    \ serifs,\n   creating a resemblance to Thai (in some fonts) for some characters.\n"
- title: 2.2.5.  Bidirectional Text
  contents:
  - "2.2.5.  Bidirectional Text\n   Some scripts (and because of that some words in\
    \ some languages) are\n   written not left to right, but right to left.  And,\
    \ to complicate\n   things, one might have something written in Arabic script\
    \ right to\n   left that includes some characters that are read from left to right,\n\
    \   such as European-style digits.  This implies that some texts might\n   have\
    \ a mixed left-to-right AND right-to-left order (even though in\n   most implementations,\
    \ and in IDNA, all texts have a major direction,\n   with the other as an exception).\n\
    \   IDNA permits the inclusion of European digits in a label that is\n   otherwise\
    \ a sequence of right-to-left characters, but prohibits most\n   other mixed-directional\
    \ (or bidirectional) strings.  This prohibition\n   can cause other problems such\
    \ as the rejection of some otherwise\n   linguistically and culturally sensible\
    \ strings.  As Unicode and\n   conventions for handling so-called bidirectional\
    \ (\"BIDI\") strings\n   evolve, the prohibition in IDNA should be reviewed and\
    \ reevaluated.\n"
- title: 2.2.6.  Confusable Character Issues
  contents:
  - "2.2.6.  Confusable Character Issues\n   Similar-looking characters in identifiers\
    \ can cause actual problems\n   on the Internet since they can result, deliberately\
    \ or accidentally,\n   in people being directed to the wrong host or mailbox by\
    \ believing\n   that they are typing, or clicking on, intended characters that\
    \ are\n   different from those that actually appear in the domain name or\n  \
    \ reference.  See Section 4.1.3 for further discussion of this issue.\n   IDNs\
    \ complicate these issues, not only by providing many additional\n   characters\
    \ that look sufficiently alike to be potentially confused,\n   but also by raising\
    \ new policy questions.  For example, if a language\n   can be written in two\
    \ different scripts, is a label constructed from\n   a word written in one script\
    \ equivalent to a label constructed from\n   the same word written in the other\
    \ script?  Is the answer the same\n   for words in two different languages that\
    \ translate into each other?\n   It is now generally understood that, in addition\
    \ to the collision\n   problems of possibly equivalent words and hence labels,\
    \ it is\n   possible to utilize characters that look alike -- \"confusable\"\n\
    \   characters -- to spoof names in order to mislead or defraud users.\n   That\
    \ issue, driven by particular attacks such as those known as\n   \"phishing\"\
    , has introduced stronger requirements for registry efforts\n   to prevent problems\
    \ than were previously generally recognized as\n   important.\n   One commonly-proposed\
    \ approach is to have a registry establish\n   restrictions on the characters,\
    \ and combinations of characters, it\n   will permit to be included in a string\
    \ to be registered as a label.\n   Taking the Swedish top-level domain, .SE, as\
    \ an example, a rule might\n   be adopted that the registry \"only accepts registrations\
    \ in Swedish,\n   using Latin script, and because of this, Unicode characters\
    \ Latin-a,\n   -b, -c,...\".  But, because there is not a 1:1 mapping between\
    \ country\n   and language, even a Country Code Top Level Domain (ccTLD) like\
    \ .SE\n   might have to accept registrations in other languages.  For example,\n\
    \   there may be a requirement for Finnish (the second most-used language\n  \
    \ in Sweden).  What rules and code points are then defined for Finnish?\n   Does\
    \ it have special mappings that collide with those that are\n   defined for Swedish?\
    \  And what does one do in countries that use more\n   than one script?  (Finnish\
    \ and Swedish use the same script.)  In all\n   cases, the dispute will ultimately\
    \ be about whether two strings are\n   the same (or confusingly similar) or not.\
    \  That, in turn, will\n   generate a discussion of how one defines \"what is\
    \ the same\" and \"what\n   is similar enough to be a problem\".\n   Another example\
    \ arose recently that further illustrates the problem.\n   If one were to use\
    \ Cyrillic characters to represent the country code\n   for Russia in a localized\
    \ equivalent to the ccTLD label, the\n   characters themselves would be indistinguishable\
    \ from the Latin\n   characters \"P\" and \"Y\" (in either lower- or uppercase)\
    \ in most fonts.\n   We presume this might cause some consternation in Paraguay.\n\
    \   These difficulties can never be completely eliminated by algorithmic\n   means.\
    \  Some of the problem can be addressed by appropriate tuning of\n   the protocols\
    \ and their tables, other parts by registry actions to\n   reduce confusion and\
    \ conflicts, and still other parts can be\n   addressed by careful design of user\
    \ interfaces in application\n   programs.  But, ultimately, some responsibility\
    \ to avoid being\n   tricked or harmfully confused will rest with the user.\n\
    \   Another registry technique that has been extensively explored\n   involves\
    \ looking at confusable characters and confusion between\n   complete labels,\
    \ restricting the labels that can be registered based\n   on relationships to\
    \ what is registered already.  Registries that\n   adopt this approach might establish\
    \ special mapping rules such as:\n   1.  If you register something with code point\
    \ A, domain names with B\n       instead of A will be blocked from registration\
    \ by others (where B\n       is a character at a separate code point that has\
    \ a confusingly\n       similar appearance to A).\n   2.  If you register something\
    \ with code point A, you also get domain\n       name with B instead of A.\n \
    \  These approaches are discussed in more detail for \"CJK\" characters in\n \
    \  RFC 3743 [RFC3743] and more generally in RFC 4290 [RFC4290].\n"
- title: 2.2.7.  The IESG Statement and IDNA issues
  contents:
  - "2.2.7.  The IESG Statement and IDNA issues\n   The issues above, at least as\
    \ they were understood at the time,\n   provided the background for the IESG statement\
    \ included in\n   Section 1.6.1 (which, in turn, was part of the basis for the\
    \ initial\n   ICANN Guidelines) that a registry should have a policy about the\n\
    \   scripts, languages, code points and text directions for which\n   registrations\
    \ will be accepted.  While \"accept all\" might be an\n   acceptable policy, it\
    \ implies there is also a dispute resolution\n   process that takes the problems\
    \ listed above into account.  This\n   process must be designed for dealing with\
    \ all types of potential\n   disputes.  For example, issues might arise between\
    \ registrant and\n   registry over a decision by the registry on collisions with\
    \ already\n   registered domain names and between registrant and trademark holder\n\
    \   (that a domain name infringes on a trademark).  In both cases, the\n   parties\
    \ disagreeing have different views on whether two strings are\n   \"equivalent\"\
    \ or not.  They may believe that a string that is not\n   allowed to be registered\
    \ is actually different from one that is\n   already registered.  Or they might\
    \ believe that two strings are the\n   same, even though the rules adopted by\
    \ the registry to prevent\n   confusion define them as two different domain names.\n"
- title: 3.  Migrating to New Versions of Unicode
  contents:
  - '3.  Migrating to New Versions of Unicode

    '
- title: 3.1.  Versions of Unicode
  contents:
  - "3.1.  Versions of Unicode\n   While opinions differ about how important the issues\
    \ are in practice,\n   the use of Unicode and its supporting tables for IDNA appears\
    \ to be\n   far more sensitive to subtle changes than it is in typical Unicode\n\
    \   applications.  This may be, at least in part, because many other\n   applications\
    \ are internally sensitive only to the appearance of\n   characters and not to\
    \ their representation.  Or those applications\n   may be able to take effective\
    \ advantage of script, language, or\n   character class identification.  The working\
    \ group that developed\n   IDNA concluded that attempting to encode any ancillary\
    \ character\n   information into the DNS label would be impractical and unwise,\
    \ and\n   the IAB, based in part on the comments in the ad hoc committee, saw\n\
    \   no reason to review that decision.\n   The Unicode Consortium has sometimes\
    \ used the likelihood of a\n   combination of characters actually appearing in\
    \ a natural language as\n   a criterion for the safety of a possible change. \
    \ However, as\n   discussed above, DNS names are often fabrications -- abbreviations,\n\
    \   strings deliberately formed to be unusual, members of a series\n   sequenced\
    \ by numbers or other characters, and so on.  Consequently, a\n   criterion that\
    \ considers a change to be safe if it would not be\n   visible in properly-constructed\
    \ running text is not helpful for DNS\n   purposes: a change that would be safe\
    \ under that criterion could\n   still be quite problematic for the DNS.\n   This\
    \ sensitivity to changes has made it quite difficult to migrate\n   IDNA from\
    \ one version of Unicode to the next if any changes are made\n   that are not\
    \ strictly additive.  A change in a code point assignment\n   or definition may\
    \ be extremely disruptive if a DNS label has been\n   defined using the earlier\
    \ form and any of its previous components has\n   been moved from one table position\
    \ or normalization rule to another.\n   Unicode normalization tables, tables of\
    \ scripts or languages and\n   characters that belong to them, and even tables\
    \ of confusable\n   characters as an adjunct to security recommendations may be\
    \ very\n   helpful in designing registry restrictions on registrations and\n \
    \  applications provisions for avoiding or identifying suspicious names.\n   Ironically,\
    \ they also extend the sensitivity of IDNA and its\n   implementations to all\
    \ forms of change between one version of Unicode\n   and the next.  Consequently,\
    \ they make Unicode version migration more\n   difficult.\n   An example of the\
    \ type of change that appears to be just a small\n   correction from one perspective\
    \ but may be problematic from another\n   was the correction to the normalization\
    \ definition in 2004\n   [Unicode-PR29].  Community input suggested that the change\
    \ would\n   cause problems for Stringprep, but the Unicode Technical Committee\n\
    \   decided, on balance, that the change was worthwhile.  Because of\n   difficulties\
    \ with consistency, some deployed implementations have\n   decided to adopt the\
    \ change and others have not, leading to subtle\n   incompatibilities.\n   This\
    \ situation leads to a dilemma.  On the one hand, it is completely\n   unacceptable\
    \ to freeze IDNA at a Unicode version level that excludes\n   more recently-defined\
    \ characters and scripts that are important to\n   those who use them.  On the\
    \ other hand, it is equally unacceptable to\n   migrate from one version of Unicode\
    \ to the next if such migration\n   might invalidate an existing registered DNS\
    \ name or some of its\n   registered properties or might make the string or representation\
    \ of\n   that name ambiguous.  If IDNA is to be modified to accommodate new\n\
    \   versions of Unicode, the IETF will need to work with the Unicode\n   Consortium\
    \ and other bodies to find an appropriate balance in this\n   area, but progress\
    \ will be possible only if all relevant parties are\n   able to fairly consider\
    \ and discuss possible decisions that may be\n   very difficult and unpalatable.\n\
    \   It would also prove useful if, during the course of that dialog, the\n   need\
    \ for Unicode Consortium concern with security issues in\n   applications of the\
    \ Unicode character set could be clarified.  It\n   would be unfortunate from\
    \ almost every perspective considered here,\n   if such matters slowed the inclusion\
    \ of as yet unencoded scripts.\n"
- title: 3.2.  Version Changes and Normalization Issues
  contents:
  - '3.2.  Version Changes and Normalization Issues

    '
- title: 3.2.1.  Unnormalized Combining Sequences
  contents:
  - "3.2.1.  Unnormalized Combining Sequences\n   One of the advantages of the Unicode\
    \ model of combining characters,\n   as with previous systems that use character\
    \ overstriking to\n   accomplish similar purposes, is that it is possible to use\
    \ sequences\n   of code points to generate characters that are not explicitly\n\
    \   provided for in the character set.  However, unless sequences that\n   are\
    \ not explicitly provided for are prohibited by some mechanism\n   (such as the\
    \ normalization tables), such combining sequences can\n   permit two related dangers.\n\
    \   o  The first is another risk of character confusion, especially if\n     \
    \ the relationship of the combining character with characters it\n      combines\
    \ with are not precisely defined or unexpected combinations\n      of combining\
    \ characters are used.  That issue is discussed in more\n      detail, with an\
    \ example, in Section 2.2.3.\n   o  These same issues also inherently impact the\
    \ stability of the\n      normalization tables.  Suppose that, somewhere in the\
    \ world, there\n      is a character that looks like a Roman-derived lowercase\
    \ \"i\", but\n      with three (not one or two) dots above it.  And suppose that\
    \ the\n      users of that character agree to represent it by combining a\n  \
    \    traditional \"i\" (U+0069) with a combining diaeresis (U+0308).  So\n   \
    \   far, no problem.  But, later, a broader need for this character is\n     \
    \ discovered and it is coded into Unicode either as a single\n      precomposed\
    \ character or, more likely under existing rules, by\n      introducing a three-dot-above\
    \ combining character.  In either\n      case, that version of Unicode should\
    \ include a rule in NFKC that\n      maps the \"i\"-plus-diaeresis sequence into\
    \ the new, approved, one.\n      If one does not do so, then there is arguably\
    \ a normalization that\n      should occur that does not.  If one does so, then\
    \ strings that\n      were valid and normalized (although unanticipated) under\
    \ the\n      previous versions of Unicode become unnormalized under the new\n\
    \      version.  That, in turn, would impact IDNA comparisons because,\n     \
    \ effectively, it would introduce a change in the matching rules.\n   It would\
    \ be useful to consider rules that would avoid or minimize\n   these problems\
    \ with the understanding that, for reasons given\n   elsewhere, simply minimizing\
    \ it may not be good enough for IDNA.  One\n   partial solution might be to ban\
    \ any combination of a base character\n   and a combining character that does\
    \ not appear in a hypothetical\n   \"anticipated combinations\" table from being\
    \ used in a domain name\n   label.  The next subsection discusses a more radical,\
    \ if impractical,\n   view of the problem and its solutions.\n"
- title: 3.2.2.  Combining Characters and Character Components
  contents:
  - "3.2.2.  Combining Characters and Character Components\n   For several reasons,\
    \ including those discussed above, one thing that\n   increases IDNA complexity\
    \ and the need for normalization is that\n   combining characters are permitted.\
    \  Without them, complexity might\n   be reduced enough to permit easier transitions\
    \ to new versions.  The\n   community should consider the impact of entirely prohibiting\n\
    \   combining characters from IDNs.  While it is almost certainly\n   unfeasible\
    \ to introduce this change into Unicode as it is now defined\n   and doing so\
    \ would be extremely disruptive even if it were feasible,\n   the thought experiment\
    \ can be helpful in understanding both the\n   issues and the implications of\
    \ the paths not taken.  For example, one\n   consequence of this, of course, is\
    \ that each new language or script,\n   and several existing ones, would require\
    \ that all of its characters\n   have Unicode assignments to specific, precomposed,\
    \ code points.\n   Note that this is not currently permitted within Unicode for\
    \ Latin\n   scripts.  For non-Latin scripts, some such code points have been\n\
    \   defined.  The decisions that govern the assignment of such code\n   points\
    \ are managed entirely within the Unicode Consortium.  Were the\n   IETF to choose\
    \ to reduce IDNA complexity by excluding combining\n   characters, no doubt there\
    \ would be additional input to the Unicode\n   Consortium from users and proponents\
    \ of scripts that precomposed\n   characters be required.  The IAB and the IETF\
    \ should examine whether\n   it is appropriate to press the Unicode Consortium\
    \ to revise these\n   policies or otherwise to recommend actions that would reduce\
    \ the need\n   for normalization and the related complexities.  However, we have\n\
    \   been told that the Technical Committee does not believe it is\n   reasonable\
    \ or feasible to add all possible precomposed characters to\n   Unicode.  If Unicode\
    \ cannot be modified to contain the precomposed\n   characters necessary to support\
    \ existing languages and scripts, much\n   less new ones, this option for IDN\
    \ restrictions will not be feasible.\n"
- title: 3.2.3.  When does normalization occur?
  contents:
  - "3.2.3.  When does normalization occur?\n   In many Unicode applications, the\
    \ preferred solution is to pick a\n   style of normalization and require that\
    \ all text that is stored or\n   transmitted be normalized to that form.  (This\
    \ is the approach taken\n   in ongoing work in the IETF on a standard Unicode\
    \ text form\n   [net-utf8]).  IDNA does not impose this requirement.  Text is\n\
    \   normalized and case-reduced at registration time, and only the\n   normalized\
    \ version is placed in the DNS.  However, there is no\n   requirement that applications\
    \ show only the native (and lower-case\n   where appropriate) characters associated\
    \ with the normalized form in\n   discussions or references such as URLs.  If\
    \ conventions used for\n   all-ASCII DNS labels are to be extended to internationalized\
    \ forms,\n   such a requirement would be unreasonable, since it would prohibit\
    \ the\n   use of mixed-case references for clarity or market identification.\n\
    \   It might even be culturally inappropriate.  However, without that\n   restriction,\
    \ the comparison that will ultimately be made in the DNS\n   will be between strings\
    \ normalized at different times and under\n   different versions of Unicode. \
    \ The assertion that a string in\n   normalized form under one version of Unicode\
    \ will still be in\n   normalized form under all future versions is not sufficient.\n\
    \   Normalization at different times also requires that a given source\n   string\
    \ always normalizes to the same target string, regardless of the\n   version under\
    \ which it is normalized.  That criterion is much more\n   difficult to fulfill.\
    \  The discussion above suggests that it may even\n   be impossible.\n   Ignoring\
    \ these issues with combining characters entirely, as IDNA\n   effectively does\
    \ today, may leave us \"stuck\" at Unicode 3.2, leading\n   either to incompatibility\
    \ differences in applications that otherwise\n   use a modern version of Unicode\
    \ (while IDN remains at Unicode 3.2) or\n   to painful transitions to new versions.\
    \  If decisions are made\n   quickly, it may still be possible to make a one-time\
    \ version upgrade\n   to Version 4.1 or Version 5 of Unicode.  However, unless\
    \ we can\n   impose sufficient global restrictions to permit smooth transitions,\n\
    \   upgrading to versions beyond that one are likely to be painful (e.g.,\n  \
    \ potentially requiring changing strings already in the DNS or even a\n   new\
    \ Punycode prefix) or impossible.\n"
- title: 4.  Framework for Next Steps in IDN Development
  contents:
  - '4.  Framework for Next Steps in IDN Development

    '
- title: 4.1.  Issues within the Scope of the IETF
  contents:
  - '4.1.  Issues within the Scope of the IETF

    '
- title: 4.1.1.  Review of IDNA
  contents:
  - "4.1.1.  Review of IDNA\n   The IETF should consider reviewing RFCs 3454, 3490,\
    \ 3491, and/or\n   3492, and update, replace, or supplement them to meet the criteria\
    \ of\n   this paragraph (one or more of them may prove impractical after\n   further\
    \ study).  Any new versions or additional specifications should\n   be adapted\
    \ to the version of Unicode that is current when they are\n   created.  Ideally,\
    \ they should specify a path for adapting to future\n   versions of Unicode (some\
    \ suggestions below may facilitate this).\n   The IETF should also consider whether\
    \ there are significant\n   advantages to mapping some groups of characters, such\
    \ as code points\n   assigned to font variations, into others or whether clarity\
    \ and\n   comprehensibility for the user would be better served by simply\n  \
    \ prohibiting those characters.  More generally, it appears that it\n   would\
    \ be worthwhile for the IETF to review whether the Unicode\n   normalization rules\
    \ now invoked by the Stringprep profile in Nameprep\n   are optimal for the DNS\
    \ or whether more restrictive rules, or an even\n   more restrictive set of permitted\
    \ character combinations, would\n   provide better support for DNS internationalization.\n\
    \   The IAB has concluded that there is a consensus within the broader\n   community\
    \ that lists of code points should be specified by the use of\n   an inclusion-based\
    \ mechanism (i.e., identifying the characters that\n   are permitted), rather\
    \ than by excluding a small number of characters\n   from the total Unicode set\
    \ as Stringprep and Nameprep do today.  That\n   conclusion should be reviewed\
    \ by the IETF community and action taken\n   as appropriate.\n   We suggest that\
    \ the individuals doing the review of the code points\n   should work as a specialized\
    \ design team.  To the extent possible,\n   that work should be done jointly by\
    \ people with experience from the\n   IETF and deep knowledge of the constraints\
    \ of the DNS and application\n   design, participants from the Unicode Consortium,\
    \ and other people\n   necessary to be able to reach a generally-accepted result.\
    \  Because\n   any work along these lines would be modifications and updates to\n\
    \   standards-track documents, final review and approval of any proposals\n  \
    \ would necessarily follow normal IETF processes.\n   It is worth noting that\
    \ sufficiently extreme changes to IDNA would\n   require a new Punycode prefix,\
    \ probably with long-term support for\n   both the old prefix and the new one\
    \ in both registration arrangements\n   and applications.  An alternative, which\
    \ is almost certainly\n   impractical, would be some sort of \"flag day\", i.e.,\
    \ a date on which\n   the old rules are simultaneously abandoned by everyone and\
    \ the new\n   ones adopted.  However, preliminary analysis indicates that few,\
    \ if\n   any, of the changes recommended for consideration elsewhere in this\n\
    \   document would require this type of version change.  For example,\n   suppose\
    \ additional restrictions, such as those implied above, are\n   imposed on what\
    \ can be registered.  Those restrictions might require\n   policy decisions about\
    \ how labels are to be disposed of if they\n   conformed to the earlier rules\
    \ but not to the new ones.  But they\n   would not inherently require changes\
    \ in the protocol or prefix.\n"
- title: 4.1.2.  Non-DNS and Above-DNS Internationalization Approaches
  contents:
  - "4.1.2.  Non-DNS and Above-DNS Internationalization Approaches\n   The IETF should\
    \ once again examine the extent to which it is\n   appropriate to try to solve\
    \ internationalization problems via the DNS\n   and what place the many varieties\
    \ of so-called \"keyword systems\" or\n   other Internet navigational techniques\
    \ might have.  Those techniques\n   can be designed to impose fewer constraints,\
    \ or at least different\n   constraints, than IDNA and the DNS.  As discussed\
    \ elsewhere in this\n   document, IDNA cannot support information about scripts,\
    \ languages,\n   or Unicode versions on lookup.  As a consequence of the nature\
    \ of DNS\n   lookups, characters and labels either match or do not match; a near-\n\
    \   match is simply not a possible concept in the DNS.  By contrast,\n   observation\
    \ of near-matching is common in human communication and in\n   matching operations\
    \ performed by people, especially when they have a\n   particular script or language\
    \ context in mind.  The DNS is further\n   constrained by a fairly rigid internal\
    \ aliasing system (via CNAME and\n   DNAME resource records), while some applications\
    \ of international\n   naming may require more flexibility.  Finally, the rigid\
    \ hierarchy of\n   the DNS --and the tendency in practice for it to become flat\
    \ at\n   levels nearest the root-- and the need for names to be unique are\n \
    \  more suitable for some purposes than others and may not be a good\n   match\
    \ for some purposes for which people wish to use IDNs.  Each of\n   these constraints\
    \ can be relaxed or changed by one or more systems\n   that would provide alternatives\
    \ to direct use of the DNS by users.\n   Some of the issues involved are discussed\
    \ further in Section 5.3 and\n   various ideas have been discussed in detail in\
    \ the IETF or IRTF.\n   Many of those ideas have even been described in Internet\
    \ Drafts or\n   other documents.  As experience with IDNs and with expectations\
    \ for\n   them accumulates, it will probably become appropriate for the IETF or\n\
    \   IRTF to revisit the underlying questions and possibilities.\n"
- title: 4.1.3.  Security Issues, Certificates, etc.
  contents:
  - "4.1.3.  Security Issues, Certificates, etc.\n   Some characters look like others,\
    \ often as the result of common\n   origins.  The problem with these \"confusable\"\
    \ characters, often\n   incorrectly called homographs, has always existed when\
    \ characters are\n   presented to humans who interpret what is displayed and then\
    \ make\n   decisions based on what is seen.  This is not a problem that exists\n\
    \   only when working with internationalized domain names, but they make\n   the\
    \ problem worse.  The result of a survey that would explain what\n   the problems\
    \ are might be interesting.  Many of these issues are\n   mentioned in Unicode\
    \ Technical Report #36 [UTR36].\n   In this and other issues associated with IDNs,\
    \ precise use of\n   terminology is important lest even more confusion result.\
    \  The\n   definition of the term 'homograph' that normally appears in\n   dictionaries\
    \ and linguistic texts states that homographs are\n   different words that are\
    \ spelled identically (for example, the\n   adjective 'brief' meaning short, the\
    \ noun 'brief' meaning a document,\n   and the verb 'brief' meaning to inform).\
    \  By definition, letters in\n   two different alphabets are not the same, regardless\
    \ of similarities\n   in appearance.  This means that sequences of letters from\
    \ two\n   different scripts that appear to be identical on a computer display\n\
    \   cannot be homographs in the accepted sense, even if they are both\n   words\
    \ in the dictionary of some language.  Assuming that there is a\n   language written\
    \ with Cyrillic script in which \"cap\" is a word,\n   regardless of what it might\
    \ mean, it is not a homograph of the\n   Latin-script English word \"cap\".\n\
    \   When the security implications of visually confusable characters were\n  \
    \ brought to the forefront in 2005, the term homograph was used to\n   designate\
    \ any instance of graphic similarity, even when comparing\n   individual characters.\
    \  This usage is not only incorrect, but risks\n   introducing even more confusion\
    \ and hence should be avoided.  The\n   current preferred terminology is to describe\
    \ these similar-looking\n   characters as \"confusable characters\" or even \"\
    confusables\".\n   Many people have suggested that confusable characters are a\
    \ problem\n   that must be addressed, at least in part, directly in the user\n\
    \   interfaces of application software.  While it should almost certainly\n  \
    \ be part of a complete solution, that approach creates it own set of\n   difficulties.\
    \  For example, a user switching between systems, or even\n   between applications\
    \ on the same system, may be surprised by\n   different types of behavior and\
    \ different levels of protection.  In\n   addition, it is unclear how a secure\
    \ setup for the end user should be\n   designed.  Today, in the web browser, a\
    \ padlock is a traditional way\n   of describing some level of security for the\
    \ end user.  Is this\n   binary signaling enough?  Should there be any connection\
    \ between a\n   risk for a displayed string including confusable characters and\
    \ the\n   padlock or similar signaling to the user?\n   Many web browsers have\
    \ adopted a convention, based on a \"whitelist\"\n   or similar technique, of\
    \ restricting the display of native characters\n   to subdomains of top-level\
    \ domains that are deemed to have safe\n   practices for the registration of potentially\
    \ confusable labels.\n   IDNs in other domains are displayed as Punycode.  These\
    \ techniques\n   may not be sufficiently sensitive to differences in policies\
    \ among\n   top-level domains and their subdomains and so, while they are clearly\n\
    \   helpful, they may not be adequate.  Are other methods of dealing with\n  \
    \ confusable characters possible?  Would other methods of identifying\n   and\
    \ listing policies about avoiding confusing registrations be\n   feasible and\
    \ helpful?\n   It would be interesting to see a more coordinated effort in\n \
    \  establishing guidelines for user interfaces.  If nothing else, the\n   current\
    \ whitelists are browser specific and both can, and do, differ\n   between implementations.\n"
- title: 4.1.4.  Protocol Changes and Policy Implications
  contents:
  - "4.1.4.  Protocol Changes and Policy Implications\n   Some potential protocol\
    \ or table changes raise important policy\n   issues about what to do with existing,\
    \ registered, names.  Should\n   such changes be needed, their impact must be\
    \ carefully evaluated in\n   the IETF, ICANN, and possibly other forums.  In particular,\
    \ protocol\n   or policy changes that would not permit existing names to be\n\
    \   registered under the newer rules should be considered carefully,\n   balancing\
    \ their importance against possible disruption and the issues\n   of invalidating\
    \ older names against the importance of consistency as\n   seen by the user.\n"
- title: 4.1.5.  Non-US-ASCII in Local Part of Email Addresses
  contents:
  - "4.1.5.  Non-US-ASCII in Local Part of Email Addresses\n   Work is going on in\
    \ the IETF related to the local part of email\n   addresses.  It should be noted\
    \ that the local part of email addresses\n   has much different syntax and constraints\
    \ than a domain name label,\n   so to directly apply IDNA on the local part is\
    \ not possible.\n"
- title: 4.1.6.  Use of the Unicode Character Set in the IETF
  contents:
  - "4.1.6.  Use of the Unicode Character Set in the IETF\n   Unicode and the closely-related\
    \ ISO 10646 are the only coded\n   character sets that aspire to include all of\
    \ the world's characters.\n   As such, they permit use of international characters\
    \ without having\n   to identify particular character coding standards or tables.\
    \  The\n   requirement for a single character set is particularly important for\n\
    \   use with the DNS since there is no place to put character set\n   identification.\
    \  The decision to use Unicode as the base for IETF\n   protocols going forward\
    \ is discussed in [RFC2277].  The IAB does not\n   see any reason to revisit the\
    \ decision to use Unicode in IETF\n   protocols.\n"
- title: 4.2.  Issues That Fall within the Purview of ICANN
  contents:
  - '4.2.  Issues That Fall within the Purview of ICANN

    '
- title: 4.2.1.  Dispute Resolution
  contents:
  - "4.2.1.  Dispute Resolution\n   IDNs create new types of collisions between trademarks\
    \ and domain\n   names as well as collisions between domain names.  These have\
    \ impact\n   on dispute resolution processes used by registries and otherwise.\
    \  It\n   is important that deployment of IDNs evolve in parallel with review\n\
    \   and updating of ICANN or registry-specific dispute resolution\n   processes.\n"
- title: 4.2.2.  Policy at Registries
  contents:
  - "4.2.2.  Policy at Registries\n   The IAB recommends that registries use an inclusion-based\
    \ model when\n   choosing what characters to allow at the time of registration.\
    \  This\n   list of characters is in turn to be a subset of what is allowed\n\
    \   according to the updated IDNA standard.  The IAB further recommends\n   that\
    \ registries develop their inclusion-based models in parallel with\n   dispute\
    \ resolution process at the registry itself.\n   Most established policies for\
    \ dealing with claimed or apparent\n   confusion or conflicts of names are based\
    \ on dispute resolution.\n   Decisions about legitimate use or registration of\
    \ one or more names\n   are resolved at or after the time of registration on a\
    \ case-by-case\n   basis and using policies that are specific to the particular\
    \ DNS zone\n   or jurisdiction involved.  These policies have generally not been\n\
    \   extended below the level of the DNS that is directly controlled by\n   the\
    \ top-level registry.\n   Because of the number of conflicts that can be generated\
    \ by the\n   larger number of available and confusable characters in Unicode,\
    \ we\n   recommend that registration-restriction and dispute resolution\n   policies\
    \ be developed to constrain registration of IDNs and zone\n   administrators at\
    \ all levels of the DNS tree.  Of course, many of\n   these policies will be less\
    \ formal than others and there is no\n   requirement for complete global consistency,\
    \ but the arguments for\n   reduction of confusable characters and other issues\
    \ in TLDs should\n   apply to all zones below that specific TLD.\n   Consistency\
    \ across all zones can obviously only be accomplished by\n   changes to the protocols.\
    \  Such changes should be considered by the\n   IETF if particular restrictions\
    \ are identified that are important and\n   consistent enough to be applied globally.\n\
    \   Some potential protocol changes or changes to character-mapping\n   tables\
    \ might, if adopted, have profound registry policy implications.\n   See Section\
    \ 4.1.4.\n"
- title: 4.2.3.  IDNs at the Top Level of the DNS
  contents:
  - "4.2.3.  IDNs at the Top Level of the DNS\n   The IAB has concluded that there\
    \ is not one issue with IDNs at the\n   top level of the DNS (IDN TLDs) but at\
    \ least three very separate\n   ones:\n   o  If IDNs are to be entered in the\
    \ root zone, decisions must first\n      be made about how these TLDs are to be\
    \ named and delegated.  These\n      decisions fall within the traditional IANA\
    \ scope and are ICANN\n      issues today.\n   o  There has been discussion of\
    \ permitting some or all existing TLDs\n      to be referenced by multiple labels,\
    \ with those labels presumably\n      representing some understanding of the \"\
    name\" of the TLD in\n      different languages.  If actual aliases of this type\
    \ are desired\n      for existing domains, the IETF may need to consider whether\
    \ the\n      use of DNAME records in the root is appropriate to meet that need,\n\
    \      what constraints, if any, are needed, whether alternate\n      approaches,\
    \ such as those of [RFC4185], are appropriate or whether\n      further alternatives\
    \ should be investigated.  But, to the extent\n      to which aliases are considered\
    \ desirable and feasible, decisions\n      presumably must be made as to which,\
    \ if any, root IDN labels\n      should be associated with DNAME records and which\
    \ ones should be\n      handled by normal delegation records or other mechanisms.\
    \  That\n      decision is one of DNS root-level namespace policy and hence falls\n\
    \      to ICANN although we would expect ICANN to pay careful attention\n    \
    \  to any technical, operational, or security recommendations that\n      may\
    \ be produced by other bodies.\n   o  Finally, if IDN labels are to be placed\
    \ in the root zone, there\n      are issues associated with how they are to be\
    \ encoded and\n      deployed.  This area may have implications for work that\
    \ has been\n      done, or should be done, in the IETF.\n"
- title: 5.  Specific Recommendations for Next Steps
  contents:
  - "5.  Specific Recommendations for Next Steps\n   Consistent with the framework\
    \ described above, the IAB offers these\n   recommendations as steps for further\
    \ consideration in the identified\n   groups.\n"
- title: 5.1.  Reduction of Permitted Character List
  contents:
  - "5.1.  Reduction of Permitted Character List\n   Generalize from the original\
    \ \"hostname\" rules to non-ASCII\n   characters, permitting as few characters\
    \ as possible to do that job.\n   This would involve a restrictive model for characters\
    \ permitted in\n   IDN labels, thus contrasting with the approach used to develop\
    \ the\n   original IDNA/Nameprep tables.  That approach was to include all\n \
    \  Unicode characters that there was not a clear reason to exclude.\n   The specific\
    \ recommendation here is to specify such internationalized\n   hostnames.  Such\
    \ an activity would fall to the IETF, although the\n   task of developing the\
    \ appropriate list of permitted characters will\n   require effort both in the\
    \ IETF and elsewhere.  The effort should be\n   as linguistically and culturally\
    \ sensitive as possible, but smooth\n   and effective operation of the DNS, including\
    \ minimizing of\n   complexity, should be primary goals.  The following should\
    \ be\n   considered as possible mechanisms for achieving an appropriate\n   minimum\
    \ number of characters.\n"
- title: 5.1.1.  Elimination of All Non-Language Characters
  contents:
  - "5.1.1.  Elimination of All Non-Language Characters\n   Unicode characters that\
    \ are not needed to write words or numbers in\n   any of the world's languages\
    \ should be eliminated from the list of\n   characters that are appropriate in\
    \ DNS labels.  In addition to such\n   characters as those used for box-drawing\
    \ and sentence punctuation,\n   this should exclude punctuation for word structure\
    \ and other\n   delimiters.  While DNS labels may conveniently be used to express\n\
    \   words in many circumstances, the goal is not to express words (or\n   sentences\
    \ or phrases), but to permit the creation of unambiguous\n   labels with good\
    \ mnemonic value.\n"
- title: 5.1.2.  Elimination of Word-Separation Punctuation
  contents:
  - "5.1.2.  Elimination of Word-Separation Punctuation\n   The inclusion of the hyphen\
    \ in the original hostname rules is a\n   historical artifact from an older, flat,\
    \ namespace.  The community\n   should consider whether it is appropriate to treat\
    \ it as a simple\n   legacy property of ASCII names and not attempt to generalize\
    \ it to\n   other scripts.  We might, for example, not permit claimed equivalents\n\
    \   to the hyphen from other scripts to be used in IDNs.  We might even\n   consider\
    \ banning use of the hyphen itself in non-ASCII strings or,\n   less restrictively,\
    \ strings that contained non-Latin characters.\n"
- title: 5.2.  Updating to New Versions of Unicode
  contents:
  - "5.2.  Updating to New Versions of Unicode\n   As new scripts, to support new\
    \ languages, continue to be added to\n   Unicode, it is important that IDNA track\
    \ updates.  If it does not do\n   so, but remains \"stuck\" at 3.2 or some single\
    \ later version, it will\n   not be possible to include labels in the DNS that\
    \ are derived from\n   words in languages that require characters that are available\
    \ only in\n   later versions.  Making those upgrades is difficult, and will\n\
    \   continue to be difficult, as long as new versions require, not just\n   addition\
    \ of characters, but changes to canonicalization conventions,\n   normalization\
    \ tables, or matching procedures (see Section 3.1).\n   Anything that can be done\
    \ to lower complexity and simplify forward\n   transitions should be seriously\
    \ considered.\n"
- title: 5.3.  Role and Uses of the DNS
  contents:
  - "5.3.  Role and Uses of the DNS\n   We wish to remind the community that there\
    \ are boundaries to the\n   appropriate uses of the DNS.  It was designed and\
    \ implemented to\n   serve some specific purposes.  There are additional things\
    \ that it\n   does well, other things that it does badly, and still other things\
    \ it\n   cannot do at all.  No amount of protocol work on IDNs will solve\n  \
    \ problems with alternate spellings, near-matches, searching for\n   appropriate\
    \ names, and so on.  Registration restrictions and\n   carefully-designed user\
    \ interfaces can be used to reduce the risk and\n   pain of attempts to do some\
    \ of these things gone wrong, as well as\n   reducing the risks of various sort\
    \ of deliberate bad behavior, but,\n   beyond a certain point, use of the DNS\
    \ simply because it is available\n   becomes a bad tradeoff.  The tradeoff may\
    \ be particularly unfortunate\n   when the use of IDNs does not actually solve\
    \ the proposed problem.\n   For example, internationalization of DNS names does\
    \ not eliminate the\n   ASCII protocol identifiers and structure of URIs [RFC3986]\
    \ and even\n   IRIs [RFC3987].  Hence, DNS internationalization itself, at any\
    \ or\n   all levels of the DNS tree, is not a sufficient response to the\n   desire\
    \ of populations to use the Internet entirely in their own\n   languages and the\
    \ characters associated with those languages.\n   These issues are discussed at\
    \ more length, and alternatives\n   presented, in [RFC2825], [RFC3467], [INDNS],\
    \ and [DNS-Choices].\n"
- title: 5.4.  Databases of Registered Names
  contents:
  - "5.4.  Databases of Registered Names\n   In addition to their presence in the\
    \ DNS, IDNs introduce issues in\n   other contexts in which domain names are used.\
    \  In particular, the\n   design and content of databases that bind registered\
    \ names to\n   information about the registrant (commonly described as \"whois\"\
    \n   databases) will require review and updating.  For example, the whois\n  \
    \ protocol itself [RFC3912] has no standard capability for handling\n   non-ASCII\
    \ text: one cannot search consistently for, or report, either\n   a DNS name or\
    \ contact information that is not in ASCII characters.\n   This may provide some\
    \ additional impetus for a switch to IRIS\n   [RFC3981] [RFC3982] but also raises\
    \ a number of other questions about\n   what information, and in what languages\
    \ and scripts, should be\n   included or permitted in such databases.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document is simply a discussion of IDNs\
    \ and IDNA issues; it\n   raises no new security concerns.  However, if some of\
    \ its\n   recommendations to reduce IDNA complexity, the number of available\n\
    \   characters, and various approaches to constraining the use of\n   confusable\
    \ characters, are followed and prove successful, the risks\n   of name spoofing\
    \ and other problems may be reduced.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The contributions to this report from members of the\
    \ IAB-IDN ad hoc\n   committee are gratefully acknowledged.  Of course, not all\
    \ of the\n   members of that group endorse every comment and suggestion of this\n\
    \   report.  In particular, this report does not claim to reflect the\n   views\
    \ of the Unicode Consortium as a whole or those of particular\n   participants\
    \ in the work of that Consortium.\n   The members of the ad hoc committee were:\
    \ Rob Austein, Leslie Daigle,\n   Tina Dam, Mark Davis, Patrik Faltstrom, Scott\
    \ Hollenbeck, Cary Karp,\n   John Klensin, Gervase Markham, David Meyer, Thomas\
    \ Narten, Michael\n   Suignard, Sam Weiler, Bert Wijnen, Kurt Zeilenga, and Lixia\
    \ Zhang.\n   Thanks are due to Tina Dam and others associated with the ICANN IDN\n\
    \   Working Group for contributions of considerable specific text, to\n   Marcos\
    \ Sanz and Paul Hoffman for careful late-stage reading and\n   extensive comments,\
    \ and to Pete Resnick for many contributions and\n   comments, both in conjunction\
    \ with his former IAB service and\n   subsequently.  Olaf M. Kolkman took over\
    \ IAB leadership for this\n   document after Patrik Faltstrom and Pete Resnick\
    \ stepped down in\n   March 2006.\n   Members of the IAB at the time of approval\
    \ of this document were:\n   Bernard Aboba, Loa Andersson, Brian Carpenter, Leslie\
    \ Daigle, Patrik\n   Faltstrom, Bob Hinden, Kurtis Lindqvist, David Meyer, Pekka\
    \ Nikander,\n   Eric Rescorla, Pete Resnick, Jonathan Rosenberg and Lixia Zhang.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [ISO10646]          International Organization\
    \ for Standardization,\n                       \"Information Technology - Universal\
    \ Multiple-\n                       Octet Coded Character Set (UCS) - Part 1:\n\
    \                       Architecture and Basic Multilingual Plane\"\",\n     \
    \                  ISO/IEC 10646-1:2000, October 2000.\n   [RFC3454]         \
    \  Hoffman, P. and M. Blanchet, \"Preparation of\n                       Internationalized\
    \ Strings (\"stringprep\")\",\n                       RFC 3454, December 2002.\n\
    \   [RFC3490]           Faltstrom, P., Hoffman, P., and A. Costello,\n       \
    \                \"Internationalizing Domain Names in Applications\n         \
    \              (IDNA)\", RFC 3490, March 2003.\n   [RFC3491]           Hoffman,\
    \ P. and M. Blanchet, \"Nameprep: A\n                       Stringprep Profile\
    \ for Internationalized Domain\n                       Names (IDN)\", RFC 3491,\
    \ March 2003.\n   [RFC3492]           Costello, A., \"Punycode: A Bootstring encoding\
    \ of\n                       Unicode for Internationalized Domain Names in\n \
    \                      Applications (IDNA)\", RFC 3492, March 2003.\n   [Unicode32]\
    \         The Unicode Consortium, \"The Unicode Standard,\n                  \
    \     Version 3.0\", 2000.\n                       (Reading, MA, Addison-Wesley,\
    \ 2000.  ISBN\n                       0-201-61633-5).  Version 3.2 consists of\
    \ the\n                       definition in that book as amended by the Unicode\n\
    \                       Standard Annex #27: Unicode 3.1\n                    \
    \   (http://www.unicode.org/reports/tr27/) and by the\n                      \
    \ Unicode Standard Annex #28: Unicode 3.2\n                       (http://www.unicode.org/reports/tr28/).\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [DNS-Choices]       Faltstrom, P., \"Design\
    \ Choices When Expanding\n                       DNS\", Work in Progress, June\
    \ 2005.\n   [ICANNv1]           ICANN, \"Guidelines for the Implementation of\n\
    \                       Internationalized Domain Names, Version 1.0\",\n     \
    \                  March 2003, <http://www.icann.org/general/\n              \
    \         idn-guidelines-20jun03.htm>.\n   [ICANNv2]           ICANN, \"Guidelines\
    \ for the Implementation of\n                       Internationalized Domain Names,\
    \ Version 2.0\",\n                       November 2005, <http://www.icann.org/general/\n\
    \                       idn-guidelines-20sep05.htm>.\n   [IESG-IDN]          Internet\
    \ Engineering Steering Group (IESG), \"IESG\n                       Statement\
    \ on IDN\", IESG Statements IDN Statement,\n                       February 2003,\
    \ <http://www.ietf.org/IESG/\n                       STATEMENTS/IDNstatement.txt>.\n\
    \   [INDNS]             National Research Council, \"Signposts in\n          \
    \             Cyberspace: The Domain Name System and Internet\n              \
    \         Navigation\", National Academy Press ISBN 0309-\n                  \
    \     09640-5 (Book) 0309-54979-5 (PDF), 2005, <http://\n                    \
    \   www7.nationalacademies.org/cstb/pub_dns.html>.\n   [ISO.2022.1986]     International\
    \ Organization for Standardization,\n                       \"Information Processing:\
    \ ISO 7-bit and 8-bit\n                       coded character sets: Code extension\
    \ techniques\",\n                       ISO Standard 2022, 1986.\n   [ISO.646.1991]\
    \      International Organization for Standardization,\n                     \
    \  \"Information technology - ISO 7-bit coded\n                       character\
    \ set for information interchange\",\n                       ISO Standard 646,\
    \ 1991.\n   [ISO.8859.2003]     International Organization for Standardization,\n\
    \                       \"Information processing - 8-bit single-byte coded\n \
    \                      graphic character sets - Part 1: Latin alphabet\n     \
    \                  No. 1 (1998) - Part 2: Latin alphabet No. 2\n             \
    \          (1999) - Part 3: Latin alphabet No. 3 (1999) -\n                  \
    \     Part 4: Latin alphabet No. 4 (1998) - Part 5:\n                       Latin/Cyrillic\
    \ alphabet (1999) - Part 6: Latin/\n                       Arabic alphabet (1999)\
    \ - Part 7: Latin/Greek\n                       alphabet (2003) - Part 8: Latin/Hebrew\
    \ alphabet\n                       (1999) - Part 9: Latin alphabet No. 5 (1999)\
    \ -\n                       Part 10: Latin alphabet No. 6 (1998) - Part 11:\n\
    \                       Latin/Thai alphabet (2001) - Part 13: Latin\n        \
    \               alphabet No. 7 (1998) - Part 14: Latin alphabet\n            \
    \           No. 8 (Celtic) (1998) - Part 15: Latin alphabet\n                \
    \       No. 9 (1999) - Part 16: Part 16: Latin alphabet\n                    \
    \   No. 10 (2001)\", ISO Standard 8859, 2003.\n   [RFC2277]           Alvestrand,\
    \ H., \"IETF Policy on Character Sets\n                       and Languages\"\
    , BCP 18, RFC 2277, January 1998.\n   [RFC2825]           IAB and L. Daigle, \"\
    A Tangled Web: Issues of\n                       I18N, Domain Names, and the Other\
    \ Internet\n                       protocols\", RFC 2825, May 2000.\n   [RFC3066]\
    \           Alvestrand, H., \"Tags for the Identification of\n               \
    \        Languages\", BCP 47, RFC 3066, January 2001.\n   [RFC3467]          \
    \ Klensin, J., \"Role of the Domain Name System\n                       (DNS)\"\
    , RFC 3467, February 2003.\n   [RFC3536]           Hoffman, P., \"Terminology\
    \ Used in\n                       Internationalization in the IETF\", RFC 3536,\n\
    \                       May 2003.\n   [RFC3743]           Konishi, K., Huang,\
    \ K., Qian, H., and Y. Ko,\n                       \"Joint Engineering Team (JET)\
    \ Guidelines for\n                       Internationalized Domain Names (IDN)\
    \ Registration\n                       and Administration for Chinese, Japanese,\
    \ and\n                       Korean\", RFC 3743, April 2004.\n   [RFC3912]  \
    \         Daigle, L., \"WHOIS Protocol Specification\",\n                    \
    \   RFC 3912, September 2004.\n   [RFC3981]           Newton, A. and M. Sanz,\
    \ \"IRIS: The Internet\n                       Registry Information Service (IRIS)\
    \ Core\n                       Protocol\", RFC 3981, January 2005.\n   [RFC3982]\
    \           Newton, A. and M. Sanz, \"IRIS: A Domain Registry\n              \
    \         (dreg) Type for the Internet Registry Information\n                \
    \       Service (IRIS)\", RFC 3982, January 2005.\n   [RFC3986]           Berners-Lee,\
    \ T., Fielding, R., and L. Masinter,\n                       \"Uniform Resource\
    \ Identifier (URI): Generic\n                       Syntax\", STD 66, RFC 3986,\
    \ January 2005.\n   [RFC3987]           Duerst, M. and M. Suignard, \"Internationalized\n\
    \                       Resource Identifiers (IRIs)\", RFC 3987,\n           \
    \            January 2005.\n   [RFC4185]           Klensin, J., \"National and\
    \ Local Characters for\n                       DNS Top Level Domain (TLD) Names\"\
    , RFC 4185,\n                       October 2005.\n   [RFC4290]           Klensin,\
    \ J., \"Suggested Practices for\n                       Registration of Internationalized\
    \ Domain Names\n                       (IDN)\", RFC 4290, December 2005.\n   [RFC4645]\
    \           Ewell, D., \"Initial Language Subtag Registry\",\n               \
    \        RFC 4645, September 2006.\n   [RFC4646]           Phillips, A. and M.\
    \ Davis, \"Tags for Identifying\n                       Languages\", BCP 47, RFC\
    \ 4646, September 2006.\n   [UTR]               Unicode Consortium, \"Unicode\
    \ Technical Reports\",\n                       <http://www.unicode.org/reports/>.\n\
    \   [UTR36]             Davis, M. and M. Suignard, \"Unicode Technical\n     \
    \                  Report #36: Unicode Security Considerations\",\n          \
    \             November 2005, <http://www.unicode.org/draft/\n                \
    \       reports/tr36/tr36.html>.\n   [UTR39]             Davis, M. and M. Suignard,\
    \ \"Unicode Technical\n                       Standard #39 (proposed): Unicode\
    \ Security\n                       Considerations\", July 2005, <http://\n   \
    \                    www.unicode.org/draft/reports/tr39/tr39.html>.\n   [Unicode-PR29]\
    \      The Unicode Consortium, \"Public Review Issue #29:\n                  \
    \     Normalization Issue\", Unicode PR 29,\n                       February 2004.\n\
    \   [Unicode10]         The Unicode Consortium, \"The Unicode Standard,\n    \
    \                   Version 1.0\", 1991.\n   [W3C-Localization]  Ishida, R. and\
    \ S. Miller, \"Localization vs.\n                       Internationalization\"\
    , W3C International/\n                       questions/qa-i18n.txt, December 2005.\n\
    \   [net-utf8]          Klensin, J. and M. Padlipsky, \"Unicode Format for\n \
    \                      Network Interchange\", Work in Progress,\n            \
    \           April 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   John C Klensin\n   1770 Massachusetts Ave, #322\n   Cambridge,\
    \ MA  02140\n   USA\n   Phone: +1 617 491 5735\n   EMail: john-ietf@jck.com\n\
    \   Patrik Faltstrom\n   Cisco Systems\n   EMail: paf@cisco.com\n   Cary Karp\n\
    \   Swedish Museum of Natural History\n   Box 50007\n   Stockholm  SE-10405\n\
    \   Sweden\n   Phone: +46 8 5195 4055\n   EMail: ck@nrm.museum\n   IAB\n   EMail:\
    \ iab@iab.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
