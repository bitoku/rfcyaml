- title: __initial_text__
  contents:
  - '    Encapsulating MPLS in IP or Generic Routing Encapsulation (GRE)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   Various applications of MPLS make use of label stacks with multiple\n\
    \   entries.  In some cases, it is possible to replace the top label of\n   the\
    \ stack with an IP-based encapsulation, thereby enabling the\n   application to\
    \ run over networks that do not have MPLS enabled in\n   their core routers. \
    \ This document specifies two IP-based\n   encapsulations: MPLS-in-IP and MPLS-in-GRE\
    \ (Generic Routing\n   Encapsulation).  Each of these is applicable in some circumstances.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Motivation  ..................................................\
    \  2\n   2.  Specification of Requirements  ...............................  3\n\
    \   3.  Encapsulation in IP  .........................................  3\n  \
    \ 4.  Encapsulation in GRE  ........................................  4\n   5.\
    \  Common Procedures  ...........................................  5\n       5.1.\
    \  Preventing Fragmentation and Reassembly  ...............  5\n       5.2.  TTL\
    \ or Hop Limit  ......................................  6\n       5.3.  Differentiated\
    \ Services  ...............................  7\n   6.  Applicability  ...............................................\
    \  7\n   7.  IANA Considerations  .........................................  8\n\
    \   8.  Security Considerations  .....................................  8\n  \
    \     8.1.  Securing the Tunnel with IPsec .........................  8\n    \
    \   8.2.  In the Absence of IPsec  ............................... 10\n   9. \
    \ Acknowledgements ............................................. 11\n   10. Normative\
    \ References  ........................................ 11\n   11. Informative\
    \ References  ...................................... 12\n   Authors' Addresses\
    \ ............................................... 13\n   Full Copyright Statement\
    \ ......................................... 14\n"
- title: 1.  Motivation
  contents:
  - "1.  Motivation\n   In many applications of MPLS, packets traversing an MPLS backbone\n\
    \   carry label stacks with more than one label.  As described in section\n  \
    \ 3.15 of [RFC3031], each label represents a Label Switched Path (LSP).\n   For\
    \ each LSP, there is a Label Switching Router (LSR) that is the\n   \"LSP Ingress\"\
    , and an LSR that is the \"LSP Egress\".  If LSRs A and B\n   are the Ingress\
    \ and Egress, respectively, of the LSP corresponding to\n   a packet's top label,\
    \ then A and B are adjacent LSRs on the LSP\n   corresponding to the packet's\
    \ second label (i.e., the label\n   immediately beneath the top label).\n   The\
    \ purpose (or one of the purposes) of the top label is to get the\n   packet delivered\
    \ from A to B, so that B can further process the\n   packet based on the second\
    \ label.  In this sense, the top label\n   serves as an encapsulation header for\
    \ the rest of the packet.  In\n   some cases, other sorts of encapsulation headers\
    \ can replace the top\n   label without loss of functionality.  For example, an\
    \ IP header or a\n   Generic Routing Encapsulation (GRE) header could replace\
    \ the top\n   label.  As the encapsulated packet would still be an MPLS packet,\
    \ the\n   result is an MPLS-in-IP or MPLS-in-GRE encapsulation.\n   With these\
    \ encapsulations, it is possible for two LSRs that are\n   adjacent on an LSP\
    \ to be separated by an IP network, even if that IP\n   network does not provide\
    \ MPLS.\n   To use either of these encapsulations, the encapsulating LSR must\n\
    \   know\n      -  the IP address of the decapsulating LSR, and\n      -  that\
    \ the decapsulating LSR actually supports the particular\n         encapsulation.\n\
    \   This knowledge may be conveyed to the encapsulating LSR by manual\n   configuration,\
    \ or by means of some discovery protocol.  In\n   particular, if the tunnel is\
    \ being used to support a particular\n   application and that application has\
    \ a setup or discovery protocol,\n   then the application's protocol may convey\
    \ this knowledge.  The means\n   of conveying this knowledge is outside the scope\
    \ of the this\n   document.\n"
- title: 2.  Specification of Requirements
  contents:
  - "2.  Specification of Requirements\n   In this document, the key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\",\n   and \"OPTIONAL\" are to be interpreted\
    \ as described in [RFC2119].\n"
- title: 3.  Encapsulation in IP
  contents:
  - "3.  Encapsulation in IP\n   MPLS-in-IP messages have the following format:\n\
    \             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n             |        \
    \                             |\n             |             IP Header        \
    \       |\n             |                                     |\n            \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n             |                    \
    \                 |\n             |          MPLS Label Stack           |\n  \
    \           |                                     |\n             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             |                                     |\n             |        \
    \    Message Body             |\n             |                              \
    \       |\n             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n         IP Header\n\
    \             This field contains an IPv4 or an IPv6 datagram header\n       \
    \      as defined in [RFC791] or [RFC2460], respectively.  The\n             source\
    \ and destination addresses are set to addresses\n             of the encapsulating\
    \ and decapsulating LSRs, respectively.\n         MPLS Label Stack\n         \
    \    This field contains an MPLS Label Stack as defined in\n             [RFC3032].\n\
    \         Message Body\n             This field contains one MPLS message body.\n\
    \   The IPv4 Protocol Number field or the IPv6 Next Header field is set\n   to\
    \ 137, indicating an MPLS unicast packet.  (The use of the MPLS-in-\n   IP encapsulation\
    \ for MPLS multicast packets is not supported by this\n   specification.)\n  \
    \ Following the IP header is an MPLS packet, as specified in [RFC3032].\n   This\
    \ encapsulation causes MPLS packets to be sent through \"IP\n   tunnels\".  When\
    \ the tunnel's receive endpoint receives a packet, it\n   decapsulates the MPLS\
    \ packet by removing the IP header.  The packet\n   is then processed as a received\
    \ MPLS packet whose \"incoming label\"\n   [RFC3031] is the topmost label of the\
    \ decapsulated packet.\n"
- title: 4.  Encapsulation in GRE
  contents:
  - "4.  Encapsulation in GRE\n   The MPLS-in-GRE encapsulation encapsulates an MPLS\
    \ packet in GRE\n   [RFC2784].  The packet then consists of an IP header (either\
    \ IPv4 or\n   IPv6), followed by a GRE header, followed by an MPLS label stack\
    \ as\n   specified in [RFC3032].  The protocol type field in the GRE header\n\
    \   MUST be set to the Ethertype value for MPLS Unicast (0x8847) or\n   Multicast\
    \ (0x8848).\n   This encapsulation causes MPLS packets to be sent through \"GRE\n\
    \   tunnels\".  When the tunnel's receive endpoint receives a packet, it\n   decapsulates\
    \ the MPLS packet by removing the IP and the GRE headers.\n   The packet is then\
    \ processed as a received MPLS packet whose\n   \"incoming label\" [RFC3031] is\
    \ the topmost label of the decapsulated\n   packet.\n   [RFC2784] specifies an\
    \ optional GRE checksum, and [RFC2890] specifies\n   optional GRE key and sequence\
    \ number fields.  These optional fields\n   are not very useful for the MPLS-in-GRE\
    \ encapsulation.  The sequence\n   number and checksum fields are not needed,\
    \ as there are no\n   corresponding fields in the native MPLS packets being tunneled.\
    \  The\n   GRE key field is not needed for demultiplexing, as the top MPLS label\n\
    \   of the encapsulated packet is used for that purpose.  The GRE key\n   field\
    \ is sometimes considered a security feature, functioning as a\n   32-bit cleartext\
    \ password, but this is an extremely weak form of\n   security.  In order (a)\
    \ to facilitate high-speed implementations of\n   the encapsulation/decapsulation\
    \ procedures and (b) to ensure\n   interoperability, we require that all implementations\
    \ be able to\n   operate correctly without these optional fields.\n   More precisely,\
    \ an implementation of an MPLS-in-GRE decapsulator MUST\n   be able to process\
    \ packets correctly without these optional fields.\n   It MAY be able to process\
    \ packets correctly with these optional\n   fields.\n   An implementation of an\
    \ MPLS-in-GRE encapsulator MUST be able to\n   generate packets without these\
    \ optional fields.  It MAY have the\n   capability to generate packets with these\
    \ fields, but the default\n   state MUST be that packets are generated without\
    \ these fields.  The\n   encapsulator MUST NOT include any of these optional fields\
    \ unless it\n   is known that the decapsulator can process them correctly.  Methods\n\
    \   for conveying this knowledge are outside the scope of this\n   specification.\n"
- title: 5.  Common Procedures
  contents:
  - "5.  Common Procedures\n   Certain procedures are common to both the MPLS-in-IP\
    \ and the MPLS-\n   in-GRE encapsulations.  In the following, the encapsulator,\
    \ whose\n   address appears in the IP source address field of the encapsulating\n\
    \   IP header, is known as the \"tunnel head\".  The decapsulator, whose\n   address\
    \ appears in the IP destination address field of the\n   decapsulating IP header,\
    \ is known as the \"tunnel tail\".\n   If IPv6 is being used (for either MPLS-in-IPv6\
    \ or MPLS-in-GRE-in-\n   IPv6), the procedures of [RFC2473] are generally applicable.\n"
- title: 5.1.  Preventing Fragmentation and Reassembly
  contents:
  - "5.1.  Preventing Fragmentation and Reassembly\n   If an MPLS-in-IP or MPLS-in-GRE\
    \ packet were fragmented (due to\n   \"ordinary\" IP fragmentation), the tunnel\
    \ tail would have to\n   reassemble it before the contained MPLS packet could\
    \ be decapsulated.\n   When the tunnel tail is a router, this is likely to be\
    \ undesirable;\n   the tunnel tail may not have the ability or the resources to\
    \ perform\n   reassembly at the necessary level of performance.\n   Whether fragmentation\
    \ of the tunneled packets is allowed MUST be\n   configurable at the tunnel head.\
    \  The default value MUST be that\n   packets are not fragmented.  The default\
    \ value would only be changed\n   if it were known that the tunnel tail could\
    \ perform the reassembly\n   function adequately.\n   THE PROCEDURES SPECIFIED\
    \ IN THE REMAINDER OF THIS SECTION ONLY APPLY\n   IF PACKETS ARE NOT TO BE FRAGMENTED.\n\
    \   Obviously, if packets are not to be fragmented, the tunnel head MUST\n   NOT\
    \ fragment a packet before encapsulating it.\n   If IPv4 is used, then the tunnel\
    \ MUST set the DF bit.  This prevents\n   intermediate nodes in the tunnel from\
    \ performing fragmentation.  (If\n   IPv6 is used, intermediate nodes do not perform\
    \ fragmentation in any\n   event.)\n   The tunnel head SHOULD perform Path MTU\
    \ Discovery ([RFC1191] for\n   IPv4, or [RFC1981] for IPv6).\n   The tunnel head\
    \ MUST maintain a \"Tunnel MTU\" for each tunnel; this is\n   the minimum of (a)\
    \ an administratively configured value, and, if\n   known, (b) the discovered\
    \ Path MTU value minus the encapsulation\n   overhead.\n   If the tunnel head\
    \ receives, for encapsulation, an MPLS packet whose\n   size exceeds the Tunnel\
    \ MTU, that packet MUST be discarded.  However,\n   silently dropping such packets\
    \ may cause significant operational\n   problems; the originator of the packets\
    \ will notice that his data is\n   not getting through, but he may not realize\
    \ that large packets are\n   causing packet loss.  He may therefore continue sending\
    \ packets that\n   are discarded.  Path MTU discovery can help (if the tunnel\
    \ head sends\n   back ICMP errors), but frequently there is insufficient information\n\
    \   available at the tunnel head to identify the originating sender\n   properly.\
    \  To minimize problems, it is advised that MTUs be\n   engineered to be large\
    \ enough in practice to avoid fragmentation.\n   In some cases, the tunnel head\
    \ receives, for encapsulation, an IP\n   packet, which it first encapsulates in\
    \ MPLS and then encapsulates in\n   MPLS-in-IP or MPLS-in-GRE.  If the source\
    \ of the IP packet is\n   reachable from the tunnel head, and if the result of\
    \ encapsulating\n   the packet in MPLS would be a packet whose size exceeds the\
    \ Tunnel\n   MTU, then the value that the tunnel head SHOULD use for fragmentation\n\
    \   and PMTU discovery outside the tunnel is the Tunnel MTU value minus\n   the\
    \ size of the MPLS encapsulation.  (That is, the Tunnel MTU value\n   minus the\
    \ size of the MPLS encapsulation is the MTU that is to be\n   reported in ICMP\
    \ messages.)  The packet will have to be discarded,\n   but the tunnel head should\
    \ send the IP source of the discarded packet\n   the proper ICMP error message\
    \ as specified in [RFC1191] or [RFC1981].\n"
- title: 5.2.  TTL or Hop Limit
  contents:
  - "5.2.  TTL or Hop Limit\n   The tunnel head MAY place the TTL from the MPLS label\
    \ stack into the\n   TTL field of the encapsulating IPv4 header or the Hop Limit\
    \ field of\n   the encapsulating IPv6 header.  The tunnel tail MAY place the TTL\n\
    \   from the encapsulating IPv4 header or the Hop Limit from the\n   encapsulating\
    \ IPv6 header into the TTL field of the MPLS header, but\n   only if this does\
    \ not increase the TTL value in the MPLS header.\n   Whether such modifications\
    \ are made, and the details of how they are\n   made, will depend on the configuration\
    \ of the tunnel tail and the\n   tunnel head.\n"
- title: 5.3.  Differentiated Services
  contents:
  - "5.3.  Differentiated Services\n   The procedures specified in this document enable\
    \ an LSP to be sent\n   through an IP or GRE tunnel.  [RFC2983] details a number\
    \ of\n   considerations and procedures that have to be applied to support the\n\
    \   Differentiated Services Architecture properly in the presence of IP-\n   in-IP\
    \ tunnels.  These considerations and procedures also apply in the\n   presence\
    \ of MPLS-in-IP or MPLS-in-GRE tunnels.\n   Accordingly, when a tunnel head is\
    \ about to send an MPLS packet into\n   an MPLS-in-IP or MPLS-in-GRE tunnel, the\
    \ setting of the DS field of\n   the encapsulating IPv4 or IPv6 header MAY be\
    \ determined (at least\n   partially) by the \"Behavior Aggregate\" of the MPLS\
    \ packet.\n   Procedures for determining the Behavior Aggregate of an MPLS packet\n\
    \   are specified in [RFC3270].\n   Similarly, at the tunnel tail, the DS field\
    \ of the encapsulating IPv4\n   or IPv6 header MAY be used to determine the Behavior\
    \ Aggregate of the\n   encapsulated MPLS packet. [RFC3270] specifies the relation\
    \ between\n   the Behavior Aggregate and the subsequent disposition of the packet.\n"
- title: 6.  Applicability
  contents:
  - "6.  Applicability\n   The MPLS-in-IP encapsulation is the more efficient, and\
    \ it would\n   generally be regarded as preferable, other things being equal.\
    \  There\n   are, however, some situations in which the MPLS-in-GRE encapsulation\n\
    \   may be used:\n      -  Two routers are \"adjacent\" over a GRE tunnel that\
    \ exists for\n         some reason that is outside the scope of this document,\
    \ and\n         those two routers have to send MPLS packets over that\n      \
    \   adjacency.  As all packets sent over this adjacency must have a\n        \
    \ GRE encapsulation, the MPLS-in-GRE encapsulation is more\n         efficient\
    \ than the alternative, that would be an MPLS-in-IP\n         encapsulation which\
    \ is then encapsulated in GRE.\n      -  Implementation considerations may dictate\
    \ the use of MPLS-in-\n         GRE.  For example, some hardware device might\
    \ only be able to\n         handle GRE encapsulations in its fastpath.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   The IANA has allocated IP Protocol Number 137 for\
    \ MPLS-in-IP\n   encapsulation, as described in section 3.  No future IANA actions\n\
    \   will be required.  The MPLS-in-GRE encapsulation does not require any\n  \
    \ IANA action.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The main security problem faced when IP or GRE\
    \ tunnels are used is\n   the possibility that the tunnel's receive endpoint will\
    \ get a packet\n   that appears to be from the tunnel, but that was not actually\
    \ put\n   into the tunnel by the tunnel's transmit endpoint.  (The specified\n\
    \   encapsulations do not by themselves enable the decapsulator to\n   authenticate\
    \ the encapsulator.)  A second problem is the possibility\n   that the packet\
    \ will be altered between the time it enters the tunnel\n   and the time it leaves.\
    \ (The specified encapsulations do not by\n   themselves assure the decapsulator\
    \ of the packet's integrity.)  A\n   third problem is the possibility that the\
    \ packet's contents will be\n   seen while the packet is in transit through the\
    \ tunnel.  (The\n   specification encapsulations do not ensure privacy.)  How\
    \ significant\n   these issues are in practice depends on the security requirements\
    \ of\n   the applications whose traffic is being sent through the tunnel.  For\n\
    \   example, lack of privacy for tunneled packets is not a significant\n   issue\
    \ if the applications generating the packets do not require\n   privacy.\n   Because\
    \ of the different potential security requirements, deployment\n   scenarios,\
    \ and performance considerations of different applications\n   using the described\
    \ encapsulation mechanism, this specification\n   defines IPsec support as OPTIONAL.\
    \  Basic implementation requirements\n   if IPsec is implemented are described\
    \ in section 8.1.  If IPsec is\n   not implemented, additional mechanisms may\
    \ have to be implemented and\n   deployed.  Those are discussed in section 8.2.\n"
- title: 8.1.  Securing the Tunnel with IPsec
  contents:
  - "8.1.  Securing the Tunnel with IPsec\n   All of these security issues can be\
    \ avoided if the MPLS-in-IP or\n   MPLS-in-GRE tunnels are secured with IPsec.\
    \  Implementation\n   requirements defined in this section apply if IPsec is implemented.\n\
    \   When IPsec is used, the tunnel head and the tunnel tail should be\n   treated\
    \ as the endpoints of a Security Association.  For this\n   purpose, a single\
    \ IP address of the tunnel head will be used as the\n   source IP address, and\
    \ a single IP address of the tunnel tail will be\n   used as the destination IP\
    \ address.  The means by which each node\n   knows the proper address of the other\
    \ is outside the scope of this\n   document.  If a control protocol is used to\
    \ set up the tunnels (e.g.,\n   to inform one tunnel endpoint of the IP address\
    \ of the other), the\n   control protocol MUST have an authentication mechanism,\
    \ and this MUST\n   be used when the tunnel is set up.  If the tunnel is set up\n\
    \   automatically as the result of, for example, information distributed\n   by\
    \ BGP, then the use of BGP's MD5-based authentication mechanism is\n   satisfactory.\n\
    \   The MPLS-in-IP or MPLS-in-GRE encapsulated packets should be viewed\n   as\
    \ originating at the tunnel head and as being destined for the\n   tunnel tail;\
    \ IPsec transport mode SHOULD thus be used.\n   The IP header of the MPLS-in-IP\
    \ packet becomes the outer IP header of\n   the resulting packet when the tunnel\
    \ head uses IPsec transport mode\n   to secure the MPLS-in-IP packet.  This is\
    \ followed by an IPsec\n   header, followed by the MPLS label stack.  The IPsec\
    \ header has to\n   set the payload type to MPLS by using the IP protocol number\n\
    \   specified in section 3.  If IPsec transport mode is applied on a\n   MPLS-in-GRE\
    \ packet, the GRE header follows the IPsec header.\n   At the tunnel tail, IPsec\
    \ outbound processing recovers the contained\n   MPLS-in-IP/GRE packet.  The tunnel\
    \ tail then strips off the\n   encapsulating IP/GRE header to recover the MPLS\
    \ packet, which is then\n   forwarded according to its label stack.\n   Note that\
    \ the tunnel tail and the tunnel head are LSP adjacencies,\n   which means that\
    \ the topmost label of any packet sent through the\n   tunnel must be one that\
    \ was distributed by the tunnel tail to the\n   tunnel head.  The tunnel tail\
    \ MUST know precisely which labels it has\n   distributed to the tunnel heads\
    \ of IPsec-secured tunnels.  Labels in\n   this set MUST NOT be distributed by\
    \ the tunnel tail to any LSP\n   adjacencies other than those that are tunnel\
    \ heads of IPsec-secured\n   tunnels.  If an MPLS packet is received without an\
    \ IPsec\n   encapsulation, and if its topmost label is in this set, then the\n\
    \   packet MUST be discarded.\n   An IPsec-secured MPLS-in-IP or MPLS-in-GRE tunnel\
    \ MUST provide\n   authentication and integrity.  (Note that the authentication\
    \ and\n   integrity will apply to the entire MPLS packet, including the MPLS\n\
    \   label stack.)  Thus, the implementation MUST support ESP will null\n   encryption.\
    \  ESP with encryption MAY be supported if a source\n   requires confidentiality.\
    \  If ESP is used, the tunnel tail MUST check\n   that the source IP address of\
    \ any packet received on a given SA is\n   the one expected.\n   Key distribution\
    \ may be done either manually or automatically by\n   means of IKE [RFC2409].\
    \  Manual keying MUST be supported.  If\n   automatic keying is implemented, IKE\
    \ in main mode with preshared keys\n   MUST be supported.  A particular application\
    \ may escalate this\n   requirement and request implementation of automatic keying.\n\
    \   Manual key distribution is much simpler, but also less scalable, than\n  \
    \ automatic key distribution.  Therefore, which method of key\n   distribution\
    \ is appropriate for a particular tunnel has to be\n   carefully considered by\
    \ the administrator (or pair of administrators)\n   responsible for the tunnel\
    \ endpoints.  If replay protection is\n   regarded as necessary for a particular\
    \ tunnel, automatic key\n   distribution should be configured.\n   If the MPLS-in-IP\
    \ encapsulation is being used, the selectors\n   associated with the SA would\
    \ be the source and destination addresses\n   mentioned above, plus the IP protocol\
    \ number specified in section 3.\n   If it is desired to secure multiple MPLS-in-IP\
    \ tunnels between a\n   given pair of nodes separately, each tunnel must have\
    \ unique pair of\n   IP addresses.\n   If the MPLS-in-GRE encapsulation is being\
    \ used, the selectors\n   associated with the SA would be the source and destination\
    \ addresses\n   mentioned above, and the IP protocol number representing GRE (47).\n\
    \   If it is desired to secure multiple MPLS-in-GRE tunnels between a\n   given\
    \ pair of nodes separately, each tunnel must have unique pair of\n   IP addresses.\n"
- title: 8.2.  In the Absence of IPsec
  contents:
  - "8.2.  In the Absence of IPsec\n   If the tunnels are not secured with IPsec,\
    \ then some other method\n   should be used to ensure that packets are decapsulated\
    \ and forwarded\n   by the tunnel tail only if those packets were encapsulated\
    \ by the\n   tunnel head.  If the tunnel lies entirely within a single\n   administrative\
    \ domain, address filtering at the boundaries can be\n   used to ensure that no\
    \ packet with the IP source address of a tunnel\n   endpoint or with the IP destination\
    \ address of a tunnel endpoint can\n   enter the domain from outside.\n   However,\
    \ when the tunnel head and the tunnel tail are not in the same\n   administrative\
    \ domain, this may become difficult, and filtering based\n   on the destination\
    \ address can even become impossible if the packets\n   must traverse the public\
    \ Internet.\n   Sometimes only source address filtering (but not destination address\n\
    \   filtering) is done at the boundaries of an administrative domain.  If\n  \
    \ this is the case, the filtering does not provide effective protection\n   at\
    \ all unless the decapsulator of an MPLS-in-IP or MPLS-in-GRE\n   validates the\
    \ IP source address of the packet.  This document does\n   not require that the\
    \ decapsulator validate the IP source address of\n   the tunneled packets, but\
    \ it should be understood that failure to do\n   so presupposes that there is\
    \ effective destination-based (or a\n   combination of source-based and destination-based)\
    \ filtering at the\n   boundaries.\n"
- title: 9. Acknowledgements
  contents:
  - "9. Acknowledgements\n   This specification combines prior work on encapsulating\
    \ MPLS in IP,\n   by Tom Worster, Paul Doolan, Yasuhiro Katsube, Tom K. Johnson,\
    \ Andrew\n   G. Malis, and Rick Wilder, with prior work on encapsulating MPLS\
    \ in\n   GRE, by Yakov Rekhter, Daniel Tappan, and Eric Rosen.  The current\n\
    \   authors wish to thank all these authors for their contribution.\n   Many people\
    \ have made valuable comments and corrections, including\n   Rahul Aggarwal, Scott\
    \ Bradner, Alex Conta, Mark Duffy, Francois Le\n   Feucheur, Allison Mankin, Thomas\
    \ Narten, Pekka Savola, and Alex\n   Zinin.\n"
- title: 10.  Normative References
  contents:
  - "10.  Normative References\n   [RFC791]  Postel, J., \"Internet Protocol\", STD\
    \ 5, RFC 791, September\n             1981.\n   [RFC792]  Postel, J., \"Internet\
    \ Control Message Protocol\", STD 5, RFC\n             792, September 1981.\n\
    \   [RFC1191] Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191,\n  \
    \           November 1990.\n   [RFC1981] McCann, J., Deering, S., and J. Mogul,\
    \ \"Path MTU Discovery\n             for IP version 6\", RFC 1981, August 1996.\n\
    \   [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate\n         \
    \    Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2460] Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6\n             (IPv6) Specification\"\
    , RFC 2460, December 1998.\n   [RFC2463] Conta, A. and S. Deering, \"Internet\
    \ Control Message\n             Protocol (ICMPv6) for the Internet Protocol Version\
    \ 6\n             (IPv6) Specification\", RFC 2463, December 1998.\n   [RFC2473]\
    \ Conta, A. and S. Deering, \"Generic Packet Tunneling in IPv6\n             Specification\"\
    , RFC 2473, December 1998.\n   [RFC2784] Farinacci, D., Li, T., Hanks, S., Meyer,\
    \ D., and P. Traina,\n             \"Generic Routing Encapsulation (GRE)\", RFC\
    \ 2784, March\n             2000.\n   [RFC3031] Rosen, E., Viswanathan, A., and\
    \ R. Callon, \"Multiprotocol\n             Label Switching Architecture\", RFC\
    \ 3031, January 2001.\n   [RFC3032] Rosen, E., Tappan, D., Fedorkow, G., Rekhter,\
    \ Y.,\n             Farinacci, D., Li, T., and A. Conta, \"MPLS Label Stack\n\
    \             Encoding\", RFC 3032, January 2001.\n"
- title: 11.  Informative References
  contents:
  - "11.  Informative References\n   [RFC2401] Kent, S. and R. Atkinson, \"Security\
    \ Architecture for the\n             Internet Protocol\", RFC 2401, November 1998.\n\
    \   [RFC2402] Kent, S. and R. Atkinson, \"IP Authentication Header\", RFC\n  \
    \           2402, November 1998.\n   [RFC2406] Kent, S. and R. Atkinson, \"IP\
    \ Encapsulating Security\n             Payload (ESP)\", RFC 2406, November 1998.\n\
    \   [RFC2409] Harkins, D. and D. Carrel, \"The Internet Key Exchange\n       \
    \      (IKE)\", RFC 2409, November 1998.\n   [RFC2475] Blake, S., Black, D., Carlson,\
    \ M., Davies, E., Wang, Z.,\n             and W. Weiss, \"An Architecture for\
    \ Differentiated Service\",\n             RFC 2475, December 1998.\n   [RFC2890]\
    \ Dommety, G., \"Key and Sequence Number Extensions to GRE\",\n             RFC\
    \ 2890, September 2000.\n   [RFC2983] Black, D., \"Differentiated Services and\
    \ Tunnels\", RFC 2983,\n             October 2000.\n   [RFC3260] Grossman, D.,\
    \ \"New Terminology and Clarifications for\n             Diffserv\", RFC 3260,\
    \ April 2002.\n   [RFC3270] Le Faucheur, F., Wu, L., Davie, B., Davari, S., Vaananen,\n\
    \             P., Krishnan, R., Cheval, P., and J. Heinanen, \"Multi-\n      \
    \       Protocol Label Switching (MPLS) Support of Differentiated\n          \
    \   Services\", RFC 3270, May 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tom Worster\n   Motorola, Inc.\n   120 Turnpike Road\n\
    \   Southborough, MA 01772\n   EMail: tom.worster@motorola.com\n   Yakov Rekhter\n\
    \   Juniper Networks, Inc.\n   1194 N. Mathilda Ave.\n   Sunnyvale, CA 94089\n\
    \   EMail: yakov@juniper.net\n   Eric Rosen\n   Cisco Systems, Inc.\n   1414 Massachusetts\
    \ Avenue\n   Boxborough, MA 01719\n   EMail: erosen@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
