- title: __initial_text__
  contents:
  - '          Host Identity Protocol (HIP) Registration Extension

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a registration mechanism for the Host\n\
    \   Identity Protocol (HIP) that allows hosts to register with services,\n   such\
    \ as HIP rendezvous servers or middleboxes.  This document\n   obsoletes RFC 5203.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8003.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  HIP Registration Extension Overview . . . . . . . . . .\
    \ . . .   3\n     3.1.  Registrar Announcing Its Ability  . . . . . . . . . .\
    \ . .   4\n     3.2.  Requester Requesting Registration . . . . . . . . . . .\
    \ .   4\n     3.3.  Registrar Granting or Refusing Service(s) Registration  .\
    \   4\n   4.  Parameter Formats and Processing  . . . . . . . . . . . . . .  \
    \ 7\n     4.1.  Encoding Registration Lifetimes with Exponents  . . . . .   7\n\
    \     4.2.  REG_INFO  . . . . . . . . . . . . . . . . . . . . . . . .   7\n  \
    \   4.3.  REG_REQUEST . . . . . . . . . . . . . . . . . . . . . . .   8\n    \
    \ 4.4.  REG_RESPONSE  . . . . . . . . . . . . . . . . . . . . . .   9\n     4.5.\
    \  REG_FAILED  . . . . . . . . . . . . . . . . . . . . . . .  10\n   5.  Establishing\
    \ and Maintaining Registrations  . . . . . . . . .  11\n   6.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  11\n   7.  IANA Considerations . . .\
    \ . . . . . . . . . . . . . . . . . .  12\n   8.  References  . . . . . . . .\
    \ . . . . . . . . . . . . . . . . .  13\n     8.1.  Normative References  . .\
    \ . . . . . . . . . . . . . . . .  13\n     8.2.  Informative References  . .\
    \ . . . . . . . . . . . . . . .  14\n   Appendix A.  Changes from RFC 5203  .\
    \ . . . . . . . . . . . . . .  15\n   Acknowledgments . . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  15\n   Contributors  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  15\n   Authors' Addresses  . . . . . . . . . . . .\
    \ . . . . . . . . . . .  16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies an extension to the Host Identity\
    \ Protocol\n   (HIP) [RFC7401].  The extension provides a generic means for a\
    \ host\n   to register with a service.  The service may, for example, be a HIP\n\
    \   rendezvous server [RFC8004] or a middlebox [RFC3234].\n   This document makes\
    \ no further assumptions about the exact type of\n   service.  Likewise, this\
    \ document does not specify any mechanisms to\n   discover the presence of specific\
    \ services or means to interact with\n   them after registration.  Future documents\
    \ may describe those\n   operations.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In addition to the terminology defined in the HIP Architecture\n\
    \   [HIP-ARCH], the HIP specification [RFC7401], and the HIP Rendezvous\n   Extension\
    \ [RFC8004], this document defines and uses the following\n   terms:\n   Requester:\n\
    \      a HIP node registering with a HIP registrar to request\n      registration\
    \ for a service.\n   Registrar:\n      a HIP node offering registration for one\
    \ or more services.\n   Service:\n      a facility that provides requesters with\
    \ new capabilities or\n      functionalities operating at the HIP layer.  Examples\
    \ include\n      firewalls that support HIP traversal or HIP rendezvous servers.\n\
    \   Registration:\n      shared state stored by a requester and a registrar, allowing\
    \ the\n      requester to benefit from one or more HIP services offered by the\n\
    \      registrar.  Each registration has an associated finite lifetime.\n    \
    \  Requesters can extend established registrations through\n      re-registration\
    \ (i.e., perform a refresh).\n   Registration Type:\n      an 8-bit identifier\
    \ for a given service in the registration\n      protocol.  For example, the rendezvous\
    \ service is identified by a\n      specific registration type.\n"
- title: 3.  HIP Registration Extension Overview
  contents:
  - "3.  HIP Registration Extension Overview\n   This document does not specify the\
    \ means by which a requester\n   discovers the availability of a service or how\
    \ a requester locates a\n   registrar.  After a requester has discovered a registrar,\
    \ it either\n   initiates HIP base exchange or uses an existing HIP association\
    \ with\n   the registrar.  In both cases, registrars use additional parameters,\n\
    \   which the remainder of this document defines, to announce their\n   quality\
    \ and grant or refuse registration.  Requesters use\n   corresponding parameters\
    \ to register with the service.  Both the\n   registrar and the requester MAY\
    \ also include in the messages\n   exchanged additional HIP parameters specific\
    \ to the registration type\n   requested.  Other documents will define parameters\
    \ and how they shall\n   be used.\n   The HIP base exchange, including the definition\
    \ of the HIP I1, R1,\n   I2, and R2 packets, is defined in [RFC7401].  The following\
    \ sections\n   describe the differences between this registration handshake and\
    \ the\n   standard HIP base exchange [RFC7401].\n"
- title: 3.1.  Registrar Announcing Its Ability
  contents:
  - "3.1.  Registrar Announcing Its Ability\n   A host that is capable and willing\
    \ to act as a registrar vis-a-vis a\n   specific requester SHOULD include a REG_INFO\
    \ parameter in the R1\n   packets it sends during all base exchanges with that\
    \ requester.  If\n   it is currently unable to provide services due to transient\n\
    \   conditions, it SHOULD include an empty REG_INFO, i.e., one with no\n   services\
    \ listed.  If services can be provided later, it SHOULD send\n   UPDATE packets\
    \ indicating the current set of services available in a\n   new REG_INFO parameter\
    \ to all hosts it is associated with.\n"
- title: 3.2.  Requester Requesting Registration
  contents:
  - "3.2.  Requester Requesting Registration\n   To request registration with a service,\
    \ a requester constructs and\n   includes a corresponding REG_REQUEST parameter\
    \ in an I2 or UPDATE\n   packet it sends to the registrar.\n   If the requester\
    \ has no HIP association established with the\n   registrar, it SHOULD send the\
    \ REG_REQUEST at the earliest\n   possibility, i.e., in the I2 packet.  This minimizes\
    \ the number of\n   packets that need to be exchanged with the registrar.  A registrar\n\
    \   MAY end a HIP association that does not carry a REG_REQUEST by\n   including\
    \ a NOTIFY with the type REG_REQUIRED in the R2.  In this\n   case, no HIP association\
    \ is created between the hosts.  The\n   REG_REQUIRED notification error type\
    \ is 51.\n"
- title: 3.3.  Registrar Granting or Refusing Service(s) Registration
  contents:
  - "3.3.  Registrar Granting or Refusing Service(s) Registration\n   Once registration\
    \ has been requested, the registrar is able to\n   authenticate the requester\
    \ based on the host identity included in I2.\n   If the registrar knows the Host\
    \ Identities (HIs) of all the hosts\n   that are allowed to register for service(s),\
    \ it SHOULD reject\n   registrations from unknown hosts.  However, since it may\
    \ be\n   infeasible to preconfigure the registrar with all the HIs, the\n   registrar\
    \ SHOULD also support HIP certificates [RFC8002] to allow for\n   certificate-based\
    \ authentication.\n   When a requester wants to register with a registrar, it\
    \ SHOULD check\n   if it has a suitable certificate for authenticating with the\n\
    \   registrar.  How the suitability is determined and how the\n   certificates\
    \ are obtained is out of scope for this document.  If the\n   requester has one\
    \ or more suitable certificates, the host SHOULD\n   include them (or just the\
    \ most suitable one) in a CERT parameter to\n   the HIP packet along with the\
    \ REG_REQUEST parameter.  If the\n   requester does not have any suitable certificates,\
    \ it SHOULD send the\n   registration request without the CERT parameter to test\
    \ whether the\n   registrar accepts the request based on the host's identity.\n\
    \   When a registrar receives a HIP packet with a REG_REQUEST parameter,\n   and\
    \ it requires authentication for at least one of the registration\n   types listed\
    \ in the REG_REQUEST parameter, it MUST first check\n   whether the HI of the\
    \ requester is in the allowed list for all the\n   registration types in the REG_REQUEST\
    \ parameter.  If the requester is\n   in the allowed list (or the registrar does\
    \ not require any\n   authentication), the registrar MUST proceed with the registration.\n\
    \   If the requester was not in the allowed list and the registrar\n   requires\
    \ the requester to authenticate, the registrar MUST check\n   whether the packet\
    \ also contains a CERT parameter.  If the packet\n   does not contain a CERT parameter,\
    \ the registrar MUST reject the\n   registrations requiring authentication with\
    \ Failure Type 0 (zero)\n   (registration requires additional credentials).  If\
    \ the certificate\n   is valid and accepted (issued for the requester and signed\
    \ by a\n   trusted issuer), the registrar MUST proceed with the registration.\n\
    \   If the certificate in the parameter is not accepted, the registrar\n   MUST\
    \ reject the corresponding registrations with the appropriate\n   Failure Type:\n\
    \   4  (Bad certificate): The certificate is corrupt, contains invalid\n     \
    \ signatures, etc.\n   5  (Unsupported certificate): The certificate is of an\
    \ unsupported\n      type.\n   6  (Certificate expired): The certificate is no\
    \ longer valid.\n   7  (Certificate other): The certificate could not be validated\
    \ for\n      some unspecified reason.\n   8  (Unknown CA): The issuing certification\
    \ authority (CA) certificate\n      could not be located or is not trusted.\n\
    \   After successful authorization, the registrar includes a REG_RESPONSE\n  \
    \ parameter in its response, which contains the service type(s) for\n   which\
    \ it has authorized registration, and zero or more REG_FAILED\n   parameters containing\
    \ the service type(s) for which it has not\n   authorized registration or registration\
    \ has failed for other reasons.\n   This response can be either an R2 or an UPDATE\
    \ message, respectively,\n   depending on whether the registration was requested\
    \ during the base\n   exchange or using an existing association.  In particular,\
    \ REG_FAILED\n   with a Failure Type of zero indicates the service type(s) that\n\
    \   requires further credentials for registration.\n   If the registrar requires\
    \ further authorization and the requester has\n   additional credentials available,\
    \ the requester SHOULD try to\n   register again with the service after the HIP\
    \ association has been\n   established.\n   Successful processing of a REG_RESPONSE\
    \ parameter creates\n   registration state at the requester.  In a similar manner,\
    \ successful\n   processing of a REG_REQUEST parameter creates registration state\
    \ at\n   the registrar and possibly at the service.  Both the requester and\n\
    \   registrar can cancel a registration before it expires, if the\n   services\
    \ afforded by a registration are no longer needed by the\n   requester or cannot\
    \ be provided any longer by the registrar (for\n   instance, because its configuration\
    \ has changed).\n                +-----+          I1          +-----+-----+\n\
    \                |     |--------------------->|     |  S1 |\n                |\
    \     |<---------------------|     |     |\n                |     | R1(REG_INFO:S1,S2,S3)|\
    \     +-----+\n                | RQ  |                      |  R  |  S2 |\n  \
    \              |     |    I2(REG_REQ:S1)    |     |     |\n                | \
    \    |--------------------->|     +-----+\n                |     |<---------------------|\
    \     |  S3 |\n                |     |    R2(REG_RESP:S1)   |     |     |\n  \
    \              +-----+                      +-----+-----+\n    A requester (RQ)\
    \ registers for service (S1) with a registrar (R) of\n      services (S1), (S2),\
    \ and (S3) with which it has no current HIP\n                                association\n\
    \                +-----+                      +-----+-----+\n                |\
    \     |  UPDATE(REG_INFO:S)  |     |     |\n                |     |<---------------------|\
    \     |     |\n                | RQ  |--------------------->|  R  |  S  |\n  \
    \              |     |  UPDATE(REG_REQ:S)   |     |     |\n                | \
    \    |  UPDATE(REG_RESP:S)  |     |     |\n                |     |<---------------------|\
    \     |     |\n                +-----+                      +-----+-----+\n  \
    \  A requester (RQ) registers for service (S) with a registrar (R) of\n      \
    \  services (S) with which it currently has a HIP association\n              \
    \                  established\n"
- title: 4.  Parameter Formats and Processing
  contents:
  - "4.  Parameter Formats and Processing\n   This section describes the format and\
    \ processing of the new\n   parameters introduced by the HIP Registration Extension.\
    \  The\n   encoding of these new parameters conforms to the HIPv2 TLV format\n\
    \   described in Section 5.2.1 of RFC7401 [RFC7401].\n"
- title: 4.1.  Encoding Registration Lifetimes with Exponents
  contents:
  - "4.1.  Encoding Registration Lifetimes with Exponents\n   The HIP registration\
    \ uses an exponential encoding of registration\n   lifetimes.\n   The special\
    \ value 0 (zero) of the lifetime field MUST be interpreted\n   as representing\
    \ a special lifetime duration of 0 (zero) seconds and\n   is used to request and\
    \ grant cancellation of a registration.\n   The non-zero values of the lifetime\
    \ field used throughout this\n   document MUST be interpreted as an exponent value\
    \ representing a\n   lifetime duration of 2^((lifetime - 64)/8) seconds.\n   This\
    \ allows a compact encoding of 255 different lifetime durations\n   (in addition\
    \ to the special lifetime duration of zero seconds)\n   ranging from 2^(63/8)\
    \ seconds (i.e., ~4 ms) to 2^(191/8) seconds\n   (i.e., ~178 days) into an 8-bit\
    \ integer field.\n"
- title: 4.2.  REG_INFO
  contents:
  - "4.2.  REG_INFO\n    0                   1                   2               \
    \    3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \           Type              |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Min Lifetime  | Max Lifetime  |  Reg Type #1  |  Reg Type #2  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      ...      |     ...       |  Reg Type #n  |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \    Padding    +\n   |                                                      \
    \         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type           930\n   Length         Length in octets, excluding Type, Length,\
    \ and Padding.\n   Min Lifetime   Minimum registration lifetime.\n   Max Lifetime\
    \   Maximum registration lifetime.\n   Reg Type       The registration types offered\
    \ by the registrar.\n   Other documents will define specific values for registration\
    \ types.\n   See Section 7 for more information.\n   Registrars include the parameter\
    \ in R1 packets in order to announce\n   their registration capabilities.  The\
    \ registrar SHOULD include the\n   parameter in UPDATE packets when its service\
    \ offering has changed.\n   HIP_SIGNATURE_2 protects the parameter within the\
    \ R1 packets.\n   The registrar indicates the minimum and maximum registration\
    \ lifetime\n   that it is willing to offer to a requester.  A requester SHOULD\
    \ NOT\n   request registration with a lifetime greater than the maximum\n   registration\
    \ lifetime or smaller than the minimum registration\n   lifetime.\n"
- title: 4.3.  REG_REQUEST
  contents:
  - "4.3.  REG_REQUEST\n    0                   1                   2            \
    \       3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \           Type              |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Lifetime    |  Reg Type #1  |  Reg Type #2  |  Reg Type #3  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      ...      |     ...       |  Reg Type #n  |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \    Padding    +\n   |                                                      \
    \         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type        932\n   Length      Length in octets, excluding Type, Length,\
    \ and Padding.\n   Lifetime    Requested registration lifetime.\n   Reg Type \
    \   The preferred registration types in order of preference.\n   Other documents\
    \ will define specific values for registration types.\n   See Section 7 for more\
    \ information.\n   A requester includes the REG_REQUEST parameter in I2 or UPDATE\n\
    \   packets to register with a registrar's service(s).  If the\n   REG_REQUEST\
    \ parameter is in an UPDATE packet, the registrar MUST NOT\n   modify the registrations\
    \ of registration types that are not listed in\n   the parameter.  Moreover, the\
    \ requester MUST NOT include the\n   parameter unless the registrar's R1 packet\
    \ or latest received UPDATE\n   packet has contained a REG_INFO parameter with\
    \ the requested\n   registration types.\n   The requester MUST NOT include more\
    \ than one REG_REQUEST parameter in\n   its I2 or UPDATE packets, while the registrar\
    \ MUST be able to process\n   one or more REG_REQUEST parameters in received I2\
    \ or UPDATE packets.\n   When the registrar receives a registration with a lifetime\
    \ that is\n   either smaller or greater than the minimum or maximum lifetime,\n\
    \   respectively, then it SHOULD grant the registration for the minimum\n   or\
    \ maximum lifetime, respectively.\n   HIP_SIGNATURE protects the parameter within\
    \ the I2 and UPDATE\n   packets.\n"
- title: 4.4.  REG_RESPONSE
  contents:
  - "4.4.  REG_RESPONSE\n    0                   1                   2           \
    \        3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |             Type              |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Lifetime    |  Reg Type #1  |  Reg Type #2  |  Reg Type #3  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      ...      |     ...       |  Reg Type #n  |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \    Padding    +\n   |                                                      \
    \         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type        934\n   Length      Length in octets, excluding Type, Length,\
    \ and Padding.\n   Lifetime    Granted registration lifetime.\n   Reg Type   \
    \ The granted registration types in order of preference.\n   Other documents will\
    \ define specific values for registration types.\n   See Section 7 for more information.\n\
    \   The registrar SHOULD include a REG_RESPONSE parameter in its R2 or\n   UPDATE\
    \ packet only if a registration has successfully completed.\n   The registrar\
    \ MUST NOT include more than one REG_RESPONSE parameter\n   in its R2 or UPDATE\
    \ packets, while the requester MUST be able to\n   process one or more REG_RESPONSE\
    \ parameters in received R2 or UPDATE\n   packets.\n   The requester MUST be prepared\
    \ to receive any registration lifetime,\n   including ones beyond the minimum\
    \ and maximum lifetime indicated in\n   the REG_INFO parameter.  It MUST NOT expect\
    \ that the returned\n   lifetime will be the requested one, even when the requested\
    \ lifetime\n   falls within the announced minimum and maximum.\n   HIP_SIGNATURE\
    \ protects the parameter within the R2 and UPDATE\n   packets.\n"
- title: 4.5.  REG_FAILED
  contents:
  - "4.5.  REG_FAILED\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \           Type              |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Failure Type  |  Reg Type #1  |  Reg Type #2  |  Reg Type #3  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      ...      |     ...       |  Reg Type #n  |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \    Padding    +\n   |                                                      \
    \         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type          936\n   Length        Length in octets, excluding Type, Length,\
    \ and Padding.\n   Failure Type  Reason for failure.\n   Reg Type      The registration\
    \ types that failed with the specified\n                 reason.\n     Value \
    \      Registration Failure Type\n   ----------    --------------------------------------------\n\
    \      0          Registration requires additional credentials\n      1      \
    \    Registration type unavailable\n      2          Insufficient resources\n\
    \      3          Invalid certificate\n      9-200      Unassigned\n    201-255\
    \      Reserved for Private Use\n   Other documents will define specific values\
    \ for registration types.\n   See Section 7 for more information.\n   Failure\
    \ Type 0 (zero) indicates that the registrar requires\n   additional credentials\
    \ to authorize a requester to register with the\n   registration types listed\
    \ in the parameter.  Failure Type 1 (one)\n   indicates that the requested service\
    \ type is unavailable at the\n   registrar.  Failure Type 2 indicates that the\
    \ registrar does not\n   currently have enough resources to register the requester\
    \ for the\n   service(s); when that is the case, the requester MUST NOT reattempt\n\
    \   immediately to register for the same service(s) and MAY attempt to\n   contact\
    \ another registrar to register for the service(s).  Failure\n   Type 3 indicates\
    \ that the registrar could not validate the\n   certificate provided by the requester\
    \ to register for the service(s);\n   when that is the case, the requester MUST\
    \ NOT reattempt to register\n   for the same set of services while providing the\
    \ same certificate and\n   MAY attempt to register for the same set of services\
    \ with a different\n   certificate, or with a different set of services with the\
    \ same\n   certificate.\n   The registrar SHOULD include a REG_FAILED parameter\
    \ in its R2 or\n   UPDATE packet, if registration with the registration types\
    \ listed has\n   not completed successfully, and a requester is asked to try again\n\
    \   with additional credentials.\n   HIP_SIGNATURE protects the parameter within\
    \ the R2 and UPDATE\n   packets.\n"
- title: 5.  Establishing and Maintaining Registrations
  contents:
  - "5.  Establishing and Maintaining Registrations\n   Establishing and/or maintaining\
    \ a registration may require additional\n   information not available in the transmitted\
    \ REG_REQUEST or\n   REG_RESPONSE parameters.  Therefore, registration type definitions\n\
    \   MAY define dependencies for HIP parameters that are not defined in\n   this\
    \ document.  Their semantics are subject to the specific\n   registration type\
    \ specifications.\n   The minimum lifetime both registrars and requesters MUST\
    \ support is\n   10 seconds, while they SHOULD support a maximum lifetime of 120\n\
    \   seconds, at least.  These values define a baseline for the\n   specification\
    \ of services based on the registration system.  They\n   were chosen to be neither\
    \ too short nor too long, and to accommodate\n   for existing timeouts of state\
    \ established in middleboxes (e.g., NATs\n   and firewalls.)\n   A zero lifetime\
    \ is reserved for canceling purposes.  Requesting a\n   zero lifetime for a registration\
    \ type is equal to canceling the\n   registration of that type.  A requester MAY\
    \ cancel a registration\n   before it expires by sending a REG_REQ to the registrar\
    \ with a zero\n   lifetime.  A registrar SHOULD respond and grant a registration\
    \ with a\n   zero lifetime.  A registrar (and an attached service) MAY cancel\
    \ a\n   registration before it expires, at its own discretion.  However, if\n\
    \   it does so, it SHOULD send a REG_RESPONSE with a zero lifetime to all\n  \
    \ registered requesters.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This section discusses the threats on the HIP\
    \ registration protocol\n   and their implications on the overall security of\
    \ HIP.  In\n   particular, it argues that the extensions described in this document\n\
    \   do not introduce additional threats to HIP.\n   The extensions described in\
    \ this document rely on the HIP base\n   exchange and do not modify its security\
    \ characteristics, e.g.,\n   digital signatures or Hashed Message Authentication\
    \ Code (HMAC).\n   Hence, the only threat introduced by these extensions is related\
    \ to\n   the creation of soft registration state at the registrar.\n   Registrars\
    \ act on a voluntary basis and are willing to accept being a\n   Responder and\
    \ then to create HIP associations with a number of\n   potentially unknown hosts.\
    \  Because they have to store HIP\n   association state anyway, adding a certain\
    \ amount of time-limited HIP\n   registration states should not introduce any\
    \ serious additional\n   threats, especially because HIP registrars may cancel\
    \ registrations\n   at any time at their own discretion, e.g., because of resource\n\
    \   constraints during an attack.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This section is to be interpreted according to \"\
    Guidelines for\n   Writing an IANA Considerations Section in RFCs\" [RFC5226].\n\
    \   [RFC5203], obsoleted by this document, made the following definitions\n  \
    \ and reservations in the \"Parameter Types\" subregistry under \"Host\n   Identity\
    \ Protocol (HIP) Parameters\":\n   Value   Parameter Type  Length\n   -----  \
    \ --------------  --------\n   930     REG_INFO        variable\n   932     REG_REQUEST\
    \     variable\n   934     REG_RESPONSE    variable\n   936     REG_FAILED   \
    \   variable\n   In the \"Parameter Types\" subregistry under \"Host Identity\
    \ Protocol\n   (HIP) Parameters\", the references to the obsoleted [RFC5203] have\n\
    \   been replaced with references to this document.\n   [RFC5203], obsoleted by\
    \ this document, requested the opening of the\n   \"Registration Types\" subregistry\
    \ under \"Host Identity Protocol (HIP)\n   Parameters\", defined no registration\
    \ types, but made the following\n   reservations in that subregistry:\n   Reg\
    \ Type        Service\n   --------        --------------------------------\n \
    \  201-255         Reserved by IANA for private use\n   Adding a new type requires\
    \ new IETF specifications.\n   In the \"Registration Types\" subregistry under\
    \ \"Host Identity Protocol\n   (HIP) Parameters\", references to the obsoleted\
    \ [RFC5203] have been\n   replaced with references to this document.\n   [RFC5203],\
    \ obsoleted by this document, requested the opening of the\n   \"Registration\
    \ Failure Types\" subregistry under \"Host Identity\n   Protocol (HIP) Parameters\"\
    \ and made the following definitions and\n   reservations in that subregistry:\n\
    \   Failure Type    Reason\n   ------------    --------------------------------------------\n\
    \   0               Registration requires additional credentials\n   1       \
    \        Registration type unavailable\n   201-255         Reserved by IANA for\
    \ private use\n   Adding a new type requires new IETF specifications.\n   In the\
    \ \"Registration Failure Types\" subregistry under \"Host Identity\n   Protocol\
    \ (HIP) Parameters\", references to the obsoleted [RFC5203]\n   have been replaced\
    \ with references to this document, and the\n   following HIP Registration Failure\
    \ Types have been added:\n      Value        Registration Failure Type\n   ------------\
    \    --------------------------------------------\n        2          Insufficient\
    \ resources\n        3          Invalid certificate\n        4          Bad certificate\n\
    \        5          Unsupported certificate\n        6          Certificate expired\n\
    \        7          Certificate other\n        8          Unknown CA\n     201-255\
    \       Reserved for Private Use\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [RFC7401]  Moskowitz, R., Ed., Heer, T., Jokela, P., and T.\n            \
    \  Henderson, \"Host Identity Protocol Version 2 (HIPv2)\",\n              RFC\
    \ 7401, DOI 10.17487/RFC7401, April 2015,\n              <http://www.rfc-editor.org/info/rfc7401>.\n\
    \   [RFC8002]  Heer, T. and S. Varjonen, \"Host Identity Protocol\n          \
    \    Certificates\", RFC 8002, DOI 10.17487/RFC8002, October\n              2016,\
    \ <http://www.rfc-editor.org/info/rfc8002>.\n   [RFC8004]  Laganier, J. and L.\
    \ Eggert, \"Host Identity Protocol (HIP)\n              Rendezvous Extension\"\
    , RFC 8004, DOI 10.17487/RFC8004,\n              October 2016, <http://www.rfc-editor.org/info/rfc8004>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [HIP-ARCH]\n              Moskowitz, R. and\
    \ M. Komu, \"Host Identity Protocol\n              Architecture\", Work in Progress,\
    \ draft-ietf-hip-rfc4423-\n              bis-14, June 2016.\n   [HIP-NAT]  Keranen,\
    \ A., Melen, J., and M. Komu, \"Native NAT Traversal\n              Mode for the\
    \ Host Identity Protocol\", Work in Progress,\n              draft-ietf-hip-native-nat-traversal-13,\
    \ July 2016.\n   [RFC3234]  Carpenter, B. and S. Brim, \"Middleboxes: Taxonomy\
    \ and\n              Issues\", RFC 3234, DOI 10.17487/RFC3234, February 2002,\n\
    \              <http://www.rfc-editor.org/info/rfc3234>.\n   [RFC5203]  Laganier,\
    \ J., Koponen, T., and L. Eggert, \"Host Identity\n              Protocol (HIP)\
    \ Registration Extension\", RFC 5203,\n              DOI 10.17487/RFC5203, April\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5203>.\n"
- title: Appendix A.  Changes from RFC 5203
  contents:
  - "Appendix A.  Changes from RFC 5203\n   o  Updated references to revised HIP specifications.\n\
    \   o  Added a new registration Failure Type for use in case of\n      insufficient\
    \ resources available at the HIP registrar.\n   o  Added requester authorization\
    \ based on certificates and new\n      registration Failure Types for invalid\
    \ certificates.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The following people (in alphabetical order) have provided\
    \ thoughtful\n   and helpful discussions and/or suggestions that have helped to\n\
    \   improve this document: Jeffrey Ahrenholz, Miriam Esteban, Ari\n   Keranen,\
    \ Mika Kousa, Pekka Nikander, and Hannes Tschofenig.\n   Lars Eggert has received\
    \ funding from the European Union's Horizon\n   2020 research and innovation program\
    \ 2014-2018 under grant agreement\n   No. 644866.  This document reflects only\
    \ the authors' views, and the\n   European Commission is not responsible for any\
    \ use that may be made\n   of the information it contains.\n   Ari Keranen suggested\
    \ inclusion of the text specifying requester\n   authorization based on certificates\
    \ as a direct adaption of text\n   found in the HIP native NAT traversal specification\
    \ [HIP-NAT].\n   Thanks to Joel M. Halpern for performing the Gen-ART review of\
    \ this\n   document as part of the publication process.\n"
- title: Contributors
  contents:
  - "Contributors\n   Teemu Koponen coauthored an earlier, experimental version of\
    \ this\n   specification [RFC5203].\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Julien Laganier\n   Luminate Wireless, Inc.\n   Cupertino,\
    \ CA\n   United States of America\n   Email: julien.ietf@gmail.com\n   Lars Eggert\n\
    \   NetApp\n   Sonnenallee 1\n   Kirchheim  85551\n   Germany\n   Phone: +49 151\
    \ 12055791\n   Email: lars@netapp.com\n   URI:   http://eggert.org\n"
