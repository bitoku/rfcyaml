- title: __initial_text__
  contents:
  - "                 PKCS #7: Cryptographic Message Syntax\n                    \
    \          Version 1.5\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Overview
  contents:
  - "Overview\n   This document describes a general syntax for data that may have\n\
    \   cryptography applied to it, such as digital signatures and digital\n   envelopes.\
    \ The syntax admits recursion, so that, for example, one\n   envelope can be nested\
    \ inside another, or one party can sign some\n   previously enveloped digital\
    \ data.  It also allows arbitrary\n   attributes, such as signing time, to be\
    \ authenticated along with the\n   content of a message, and provides for other\
    \ attributes such as\n   countersignatures to be associated with a signature.\
    \ A degenerate\n   case of the syntax provides a means for disseminating certificates\n\
    \   and certificate-revocation lists.\n"
- title: 1. Scope
  contents:
  - "1. Scope\n   This document is compatible with Privacy-Enhanced Mail (PEM) in\
    \ that\n   signed-data and signed-and-enveloped-data content, constructed in a\n\
    \   PEM-compatible mode, can be converted into PEM messages without any\n   cryptographic\
    \ operations. PEM messages can similarly be converted\n   into the signed-data\
    \ and signed-and-enveloped data content types.\n   This document can support a\
    \ variety of architectures for\n   certificate-based key management, such as the\
    \ one proposed for\n   Privacy-Enhanced Mail in RFC 1422. Architectural decisions\
    \ such as\n   what certificate issuers are considered \"top-level,\" what entities\n\
    \   certificate issuers are authorized to certify, what distinguished\n   names\
    \ are considered acceptable, and what policies certificate\n   issuers must follow\
    \ (such as signing only with secure hardware, or\n   requiring entities to present\
    \ specific forms of identification) are\n   left outside the document.\n   The\
    \ values produced according to this document are intended to be\n   BER-encoded,\
    \ which means that the values would typically be\n   represented as octet strings.\
    \ While many systems are capable of\n   transmitting arbitrary octet strings reliably,\
    \ it is well known that\n   many electronic-mail systems are not. This document\
    \ does not address\n   mechanisms for encoding octet strings as (say) strings\
    \ of ASCII\n   characters or other techniques for enabling reliable transmission\
    \ by\n   re-encoding the octet string. RFC 1421 suggests one possible solution\n\
    \   to this problem.\n"
- title: 2. References
  contents:
  - "2. References\n      FIPS PUB 46-1  National Bureau of Standards. FIPS PUB 46-1:\n\
    \                Data Encryption Standard. January 1988.\n      PKCS #1   RSA\
    \ Laboratories. PKCS #1: RSA Encryption.\n                Version 1.5, November\
    \ 1993.\n      PKCS #6   RSA Laboratories. PKCS #6: Extended-Certificate\n   \
    \             Syntax. Version 1.5, November 1993.\n      PKCS #9   RSA Laboratories.\
    \ PKCS #9: Selected Attribute\n                Types. Version 1.1, November 1993.\n\
    \      RFC 1421  Linn, J., \"Privacy Enhancement for\n                Internet\
    \ Electronic Mail: Part I: Message\n                Encryption and Authentication\
    \ Procedures,\" RFC 1421\n                February 1993.\n      RFC 1422  Kent,\
    \ S., \"Privacy Enhancement for\n                Internet Electronic Mail: Part\
    \ II: Certificate-\n                Based Key Management,\" RFC 1422, February\
    \ 1993.\n      RFC 1423  Balenson, D., \"Privacy Enhancement for\n           \
    \     Internet Electronic Mail: Part III: Algorithms,\n                Modes,\
    \ and Identifiers,\" RFC 1423, February 1993.\n      RFC 1424  Kaliski, B., \"\
    Privacy Enhancement for\n                Internet Electronic Mail: Part IV: Key\n\
    \                Certification and Related Services,\" RFC 1424,\n           \
    \     February 1993.\n      RFC 1319  Kaliski, B., \"The MD2 Message-Digest\n\
    \                Algorithm,\" RFC 1319, April 1992.\n      RFC 1321  Rivest, R.,\
    \ \"The MD5 Message-Digest\n                Algorithm,\" RFC 1321, April 1992.\n\
    \      X.208     CCITT. Recommendation X.208: Specification of\n             \
    \   Abstract Syntax Notation One (ASN.1). 1988.\n      X.209     CCITT. Recommendation\
    \ X.209: Specification of\n                Basic Encoding Rules for Abstract Syntax\
    \ Notation\n                One (ASN.1). 1988.\n      X.500     CCITT. Recommendation\
    \ X.500: The Directory--\n                Overview of Concepts, Models and\n \
    \               Services. 1988.\n      X.501     CCITT. Recommendation X.501:\
    \ The Directory--\n                Models. 1988.\n      X.509     CCITT. Recommendation\
    \ X.509: The Directory--\n                Authentication Framework. 1988.\n  \
    \    [NIST91]  NIST. Special Publication 500-202: Stable\n                Implementation\
    \ Agreements for Open Systems\n                Interconnection Protocols. Version\
    \ 5, Edition 1,\n                Part 12. December 1991.\n      [RSA78]   R.L.\
    \ Rivest, A. Shamir, and L. Adleman. A method\n                for obtaining digital\
    \ signatures and public-key\n                cryptosystems. Communications of\
    \ the ACM,\n                21(2):120-126, February 1978.\n"
- title: 3. Definitions
  contents:
  - "3. Definitions\n   For the purposes of this document, the following definitions\
    \ apply.\n   AlgorithmIdentifier: A type that identifies an algorithm (by object\n\
    \   identifier) and associated parameters. This type is defined in X.509.\n  \
    \ ASN.1: Abstract Syntax Notation One, as defined in X.208.\n   Attribute: A type\
    \ that contains an attribute type (specified by\n   object identifier) and one\
    \ or more attribute values. This type is\n   defined in X.501.\n   BER: Basic\
    \ Encoding Rules, as defined in X.209.\n   Certificate: A type that binds an entity's\
    \ distinguished name to a\n   public key with a digital signature. This type is\
    \ defined in X.509.\n   This type also contains the distinguished name of the\
    \ certificate\n   issuer (the signer), an issuer-specific serial number, the issuer's\n\
    \   signature algorithm identifier, and a validity period.\n   CertificateSerialNumber:\
    \ A type that uniquely identifies a\n   certificate (and thereby an entity and\
    \ a public key) among those\n   signed by a particular certificate issuer. This\
    \ type is defined in\n   X.509.\n   CertificateRevocationList: A type that contains\
    \ information about\n   certificates whose validity an issuer has prematurely\
    \ revoked. The\n   information consists of an issuer name, the time of issue,\
    \ the next\n   scheduled time of issue, and a list of certificate serial numbers\
    \ and\n   their associated revocation times. The CRL is signed by the issuer.\n\
    \   The type intended by this document is the one defined RFC 1422.\n   DER: Distinguished\
    \ Encoding Rules for ASN.1, as defined in X.509,\n   Section 8.7.\n   DES: Data\
    \ Encryption Standard, as defined in FIPS PUB 46-1.\n   desCBC: The object identifier\
    \ for DES in cipher-block chaining (CBC)\n   mode, as defined in [NIST91].\n \
    \  ExtendedCertificate: A type that consists of an X.509 public-key\n   certificate\
    \ and a set of attributes, collectively signed by the\n   issuer of the X.509\
    \ public-key certificate. This type is defined in\n   PKCS #6.\n   MD2: RSA Data\
    \ Security, Inc.'s MD2 message-digest algorithm, as\n   defined in RFC 1319.\n\
    \   md2: The object identifier for MD2, as defined in RFC 1319.\n   MD5: RSA Data\
    \ Security, Inc.'s MD5 message-digest algorithm, as\n   defined in RFC 1321.\n\
    \   md5: The object identifier for MD5, as defined in RFC 1321.\n   Name: A type\
    \ that uniquely identifies or \"distinguishes\" objects in\n   an X.500 directory.\
    \ This type is defined in X.501. In an X.509\n   certificate, the type identifies\
    \ the certificate issuer and the\n   entity whose public key is certified.\n \
    \  PEM: Internet Privacy-Enhanced Mail, as defined in RFCs 1421-1424.\n   RSA:\
    \ The RSA public-key cryptosystem, as defined in [RSA78].\n   rsaEncryption: The\
    \ object identifier for RSA encryption, as defined\n   in PKCS #1.\n"
- title: 4. Symbols and abbreviations
  contents:
  - "4. Symbols and abbreviations\n   No symbols or abbreviations are defined in this\
    \ document.\n"
- title: 5. General overview
  contents:
  - "5. General overview\n   The following nine sections specify useful types, general\
    \ syntax, six\n   content types, and object identifiers.\n   The syntax is general\
    \ enough to support many different content types.\n   This document defines six:\
    \ data, signed data, enveloped data,\n   signed-and-enveloped data, digested data,\
    \ and encrypted data. Other\n   content types may be added in the future. The\
    \ use of content types\n   defined outside this document is possible, but is subject\
    \ to\n   bilateral agreement between parties exchanging content.\n   This document\
    \ exports one type, ContentInfo, as well as the various\n   object identifiers.\n\
    \   There are two classes of content types: base and enhanced.  Content\n   types\
    \ in the base class contain \"just data,\" with no cryptographic\n   enhancements.\
    \ Presently, one content type is in this class, the data\n   content type. Content\
    \ types in the enhanced class contain content of\n   some type (possibly encrypted),\
    \ and other cryptographic enhancements.\n   For example, enveloped-data content\
    \ can contain (encrypted) signed-\n   data content, which can contain data content.\
    \ The four non-data\n   content types fall into the enhanced class.  The content\
    \ types in the\n   enhanced class thus employ encapsulation, giving rise to the\
    \ terms\n   \"outer\" content (the one containing the enhancements) and \"inner\"\
    \n   content (the one being enhanced).\n   The document is designed such that\
    \ the enhanced content types can be\n   prepared in a single pass using indefinite-length\
    \ BER encoding, and\n   processed in a single pass in any BER encoding. Single-pass\
    \ operation\n   is especially helpful if content is stored on tapes, or is \"\
    piped\"\n   from another process. One of the drawbacks of single-pass operation,\n\
    \   however, is that it is difficult to output a DER encoding in a single\n  \
    \ pass, since the lengths of the various components may not be known in\n   advance.\
    \ Since DER encoding is required by the signed-data, signed-\n   and-enveloped\
    \ data, and digested-data content types, an extra pass\n   may be necessary when\
    \ a content type other than data is the inner\n   content of one of those content\
    \ types.\n"
- title: 6. Useful types
  contents:
  - "6. Useful types\n   This section defines types that are useful in at least two\
    \ places in\n   the document.\n"
- title: 6.1 CertificateRevocationLists
  contents:
  - "6.1 CertificateRevocationLists\n   The CertificateRevocationLists type gives\
    \ a set of certificate-\n   revocation lists. It is intended that the set contain\
    \ information\n   sufficient to determine whether the certificates with which\
    \ the set\n   is associated are \"hot listed,\" but there may be more certificate-\n\
    \   revocation lists than necessary, or there may be fewer than\n   necessary.\n\
    \   CertificateRevocationLists ::=\n     SET OF CertificateRevocationList\n"
- title: 6.2 ContentEncryptionAlgorithmIdentifier
  contents:
  - "6.2 ContentEncryptionAlgorithmIdentifier\n   The ContentEncryptionAlgorithmIdentifier\
    \ type identifies a content-\n   encryption algorithm such as DES. A content-encryption\
    \ algorithm\n   supports encryption and decryption operations. The encryption\n\
    \   operation maps an octet string (the message) to another octet string\n   (the\
    \ ciphertext) under control of a content-encryption key. The\n   decryption operation\
    \ is the inverse of the encryption operation.\n   Context determines which operation\
    \ is intended.\n   ContentEncryptionAlgorithmIdentifier ::=\n     AlgorithmIdentifier\n"
- title: 6.3 DigestAlgorithmIdentifier
  contents:
  - "6.3 DigestAlgorithmIdentifier\n   The DigestAlgorithmIdentifier type identifies\
    \ a message-digest\n   algorithm. Examples include MD2 and MD5. A message-digest\
    \ algorithm\n   maps an octet string (the message) to another octet string (the\n\
    \   message digest).\n   DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n"
- title: 6.4 DigestEncryptionAlgorithmIdentifier
  contents:
  - "6.4 DigestEncryptionAlgorithmIdentifier\n   The DigestEncryptionAlgorithmIdentifier\
    \ type identifies a digest-\n   encryption algorithm under which a message digest\
    \ can be encrypted.\n   One example is PKCS #1's rsaEncryption. A digest-encryption\
    \ algorithm\n   supports encryption and decryption operations. The encryption\n\
    \   operation maps an octet string (the message digest) to another octet\n   .bp\
    \ string (the encrypted message digest) under control of a digest-\n   encryption\
    \ key. The decryption operation is the inverse of the\n   encryption operation.\
    \ Context determines which operation is intended.\n   DigestEncryptionAlgorithmIdentifier\
    \ ::=\n     AlgorithmIdentifier\n"
- title: 6.5 ExtendedCertificateOrCertificate
  contents:
  - "6.5 ExtendedCertificateOrCertificate\n   The ExtendedCertificateOrCertificate\
    \ type gives either a PKCS #6\n   extended certificate or an X.509 certificate.\
    \  This type follows the\n   syntax recommended in Section 6 of PKCS #6:\n   ExtendedCertificateOrCertificate\
    \ ::= CHOICE {\n     certificate Certificate, -- X.509\n     extendedCertificate\
    \ [0] IMPLICIT ExtendedCertificate }\n"
- title: 6.6 ExtendedCertificatesAndCertificates
  contents:
  - "6.6 ExtendedCertificatesAndCertificates\n   The ExtendedCertificatesAndCertificates\
    \ type gives a set of extended\n   certificates and X.509 certificates. It is\
    \ intended that the set be\n   sufficient to contain chains from a recognized\
    \ \"root\" or \"top-level\n   certification authority\" to all of the signers\
    \ with which the set is\n   associated, but there may be more certificates than\
    \ necessary, or\n   there may be fewer than necessary.\n   ExtendedCertificatesAndCertificates\
    \ ::=\n     SET OF ExtendedCertificateOrCertificate\n   Note. The precise meaning\
    \ of a \"chain\" is outside the scope of this\n   document. Some applications\
    \ of this document may impose upper limits\n   on the length of a chain; others\
    \ may enforce certain relationships\n   between the subjects and issuers of certificates\
    \ in a chain. An\n   example of such relationships has been proposed for Privacy-Enhanced\n\
    \   Mail in RFC 1422.\n"
- title: 6.7 IssuerAndSerialNumber
  contents:
  - "6.7 IssuerAndSerialNumber\n   The IssuerAndSerialNumber type identifies a certificate\
    \ (and thereby\n   an entity and a public key) by the distinguished name of the\n\
    \   certificate issuer and an issuer-specific certificate serial number.\n   IssuerAndSerialNumber\
    \ ::= SEQUENCE {\n     issuer Name,\n     serialNumber CertificateSerialNumber\
    \ }\n"
- title: 6.8 KeyEncryptionAlgorithmIdentifier
  contents:
  - "6.8 KeyEncryptionAlgorithmIdentifier\n   The KeyEncryptionAlgorithmIdentifier\
    \ type identifies a key-encryption\n   algorithm under which a content-encryption\
    \ key can be encrypted. One\n   example is PKCS #1's rsaEncryption. A key-encryption\
    \ algorithm\n   supports encryption and decryption operations. The encryption\n\
    \   operation maps an octet string (the key) to another octet string (the\n  \
    \ encrypted key) under control of a key-encryption key. The decryption\n   operation\
    \ is the inverse of the encryption operation.  Context\n   determines which operation\
    \ is intended.\n   KeyEncryptionAlgorithmIdentifier ::=\n     AlgorithmIdentifier\n"
- title: 6.9 Version
  contents:
  - "6.9 Version\n   The Version type gives a syntax version number, for compatibility\n\
    \   with future revisions of this document.\n   Version ::= INTEGER\n"
- title: 7. General syntax
  contents:
  - "7. General syntax\n   The general syntax for content exchanged between entities\
    \ according\n   to this document associates a content type with content. The syntax\n\
    \   shall have ASN.1 type ContentInfo:\n   ContentInfo ::= SEQUENCE {\n     contentType\
    \ ContentType,\n     content\n       [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL\
    \ }\n   ContentType ::= OBJECT IDENTIFIER\n   The fields of type ContentInfo have\
    \ the following meanings:\n        o    contentType indicates the type of content.\
    \ It is\n             an object identifier, which means it is a unique string\
    \ of\n             integers assigned by the authority that defines the content\n\
    \             type. This document defines six content types (see Section\n   \
    \          14): data, signedData, envelopedData,\n             signedAndEnvelopedData,\
    \ digestedData, and encryptedData.\n        o    content is the content. The field\
    \ is optional, and\n             if the field is not present, its intended value\
    \ must be\n             supplied by other means. Its type is defined along with\
    \ the\n             object identifier for contentType.\n   Notes.\n        1.\
    \   The methods below assume that the type of content\n             can be determined\
    \ uniquely by contentType, so the type\n             defined along with the object\
    \ identifier should not be a\n             CHOICE type.\n        2.   When a ContentInfo\
    \ value is the inner content of\n             signed-data, signed-and-enveloped-data,\
    \ or digested-data\n             content, a message-digest algorithm is applied\
    \ to the\n             contents octets of the DER encoding of the content field.\n\
    \             When a ContentInfo value is the inner content of\n             enveloped-data\
    \ or signed-and-enveloped-data content, a\n             content-encryption algorithm\
    \ is applied to the contents\n             octets of a definite-length BER encoding\
    \ of the content\n             field.\n        3.   The optional omission of the\
    \ content field makes\n             it possible to construct \"external signatures,\"\
    \ for\n             example, without modification to or replication of the\n \
    \            content to which the signatures apply. In the case of\n         \
    \    external signatures, the content being signed would be\n             omitted\
    \ from the \"inner\" encapsulated ContentInfo value\n             included in\
    \ the signed-data content type.\n"
- title: 8. Data content type
  contents:
  - "8. Data content type\n   The data content type is just an octet string. It shall\
    \ have ASN.1\n   type Data:\n   Data ::= OCTET STRING\n   The data content type\
    \ is intended to refer to arbitrary octet\n   strings, such as ASCII text files;\
    \ the interpretation is left to the\n   application. Such strings need not have\
    \ any internal structure\n   (although they may; they could even be DER encodings).\n"
- title: 9. Signed-data content type
  contents:
  - "9. Signed-data content type\n   The signed-data content type consists of content\
    \ of any type and\n   encrypted message digests of the content for zero or more\
    \ signers.\n   The encrypted digest for a signer is a \"digital signature\" on\
    \ the\n   content for that signer. Any type of content can be signed by any\n\
    \   number of signers in parallel. Furthermore, the syntax has a\n   degenerate\
    \ case in which there are no signers on the content. The\n   degenerate case provides\
    \ a means for disseminating certificates and\n   certificate-revocation lists.\n\
    \   It is expected that the typical application of the signed-data\n   content\
    \ type will be to represent one signer's digital signature on\n   content of the\
    \ data content type. Another typical application will be\n   to disseminate certificates\
    \ and certificate-revocation lists.\n   The process by which signed data is constructed\
    \ involves the\n   following steps:\n        1.   For each signer, a message digest\
    \ is computed on\n             the content with a signer-specific message-digest\n\
    \             algorithm. (If two signers employ the same message-digest\n    \
    \         algorithm, then the message digest need be computed for\n          \
    \   only one of them.) If the signer is authenticating any\n             information\
    \ other than the content (see Section 9.2), the\n             message digest of\
    \ the content and the other information are\n             digested with the signer's\
    \ message digest algorithm, and\n             the result becomes the \"message\
    \ digest.\"\n        2.   For each signer, the message digest and associated\n\
    \             information are encrypted with the signer's private key.\n     \
    \   3.   For each signer, the encrypted message digest and\n             other\
    \ signer-specific information are collected into a\n             SignerInfo value,\
    \ defined in Section 9.2.  Certificates and\n             certificate-revocation\
    \ lists for each signer, and those not\n             corresponding to any signer,\
    \ are collected in this step.\n        4.   The message-digest algorithms for\
    \ all the signers\n             and the SignerInfo values for all the signers\
    \ are collected\n             together with the content into a SignedData value,\
    \ defined\n             in Section 9.1.\n   A recipient verifies the signatures\
    \ by decrypting the encrypted\n   message digest for each signer with the signer's\
    \ public key, then\n   comparing the recovered message digest to an independently\
    \ computed\n   message digest. The signer's public key is either contained in\
    \ a\n   certificate included in the signer information, or is referenced by\n\
    \   an issuer distinguished name and an issuer-specific serial number\n   that\
    \ uniquely identify the certificate for the public key.\n   This section is divided\
    \ into five parts. The first part describes the\n   top-level type SignedData,\
    \ the second part describes the per-signer\n   information type SignerInfo, and\
    \ the third and fourth parts describe\n   the message-digesting and digest-encryption\
    \ processes. The fifth part\n   summarizes compatibility with Privacy-Enhanced\
    \ Mail.\n"
- title: 9.1 SignedData type
  contents:
  - "9.1 SignedData type\n   The signed-data content type shall have ASN.1 type SignedData:\n\
    \   SignedData ::= SEQUENCE {\n     version Version,\n     digestAlgorithms DigestAlgorithmIdentifiers,\n\
    \     contentInfo ContentInfo,\n     certificates\n        [0] IMPLICIT ExtendedCertificatesAndCertificates\n\
    \          OPTIONAL,\n     crls\n       [1] IMPLICIT CertificateRevocationLists\
    \ OPTIONAL,\n     signerInfos SignerInfos }\n   DigestAlgorithmIdentifiers ::=\n\
    \     SET OF DigestAlgorithmIdentifier\n   SignerInfos ::= SET OF SignerInfo\n\
    \   The fields of type SignedData have the following meanings:\n        o    version\
    \ is the syntax version number. It shall be\n             1 for this version of\
    \ the document.\n        o    digestAlgorithms is a collection of message-digest\n\
    \             algorithm identifiers. There may be any number of\n            \
    \ elements in the collection, including zero. Each\n             element identifies\
    \ the message-digest algorithm\n             (and any associated parameters) under\
    \ which the\n             content is digested for a some signer. The\n       \
    \      collection is intended to list the message-digest\n             algorithms\
    \ employed by all of the signers, in any\n             order, to facilitate one-pass\
    \ signature\n             verification. The message-digesting process is\n   \
    \          described in Section 9.3.\n        o    contentInfo is the content\
    \ that is signed. It can\n             have any of the defined content types.\n\
    \        o    certificates is a set of PKCS #6 extended\n             certificates\
    \ and X.509 certificates. It is intended that\n             the set be sufficient\
    \ to contain chains from a recognized\n             \"root\" or \"top-level certification\
    \ authority\" to all of the\n             signers in the signerInfos field. There\
    \ may be more\n             certificates than necessary, and there may be certificates\n\
    \             sufficient to contain chains from two or more independent\n    \
    \         top-level certification authorities. There may also be\n           \
    \  fewer certificates than necessary, if it is expected that\n             those\
    \ verifying the signatures have an alternate means of\n             obtaining\
    \ necessary certificates (e.g., from a previous set\n             of certificates).\n\
    \        o    crls is a set of certificate-revocation lists. It\n            \
    \ is intended that the set contain information sufficient to\n             determine\
    \ whether or not the certificates in the\n             certificates field are\
    \ \"hot listed,\" but such\n             correspondence is not necessary.  There\
    \ may be more\n             certificate-revocation lists than necessary, and there\
    \ may\n             also be fewer certificate-revocation lists than necessary.\n\
    \        o    signerInfos is a collection of per-signer\n             information.\
    \ There may be any number of elements in the\n             collection, including\
    \ zero.\n   Notes.\n        1.   The fact that the digestAlgorithms field comes\n\
    \             before the contentInfo field and the signerInfos field\n       \
    \      comes after it makes it possible to process a SignedData\n            \
    \ value in a single pass. (Single-pass processing is\n             described in\
    \ Section 5.)\n        2.   The differences between version 1 SignedData and\n\
    \             version 0 SignedData (defined in PKCS #7, Version 1.4) are\n   \
    \          the following:\n                  o    the digestAlgorithms and signerInfos\n\
    \                       fields may contain zero elements in version 1,\n     \
    \                  but not in version 0\n                  o    the crls field\
    \ is allowed in version 1,\n                       but not in version 0\n    \
    \         Except for the difference in version number, version 0\n           \
    \  SignedData values are acceptable as version 1 values. An\n             implementation\
    \ can therefore process SignedData values of\n             either version as though\
    \ they were version 1 values. It is\n             suggested that PKCS implementations\
    \ generate only version 1\n             SignedData values, but be prepared to\
    \ process SignedData\n             values of either version.\n        3.   In\
    \ the degenerate case where there are no signers\n             on the content,\
    \ the ContentInfo value being \"signed\" is\n             irrelevant. It is recommended\
    \ in that case that the content\n             type of the ContentInfo value being\
    \ \"signed\" be data, and\n             the content field of the ContentInfo value\
    \ be omitted.\n"
- title: 9.2 SignerInfo type
  contents:
  - "9.2 SignerInfo type\n   Per-signer information is represented in the type SignerInfo:\n\
    \   SignerInfo ::= SEQUENCE {\n     version Version,\n     issuerAndSerialNumber\
    \ IssuerAndSerialNumber,\n     digestAlgorithm DigestAlgorithmIdentifier,\n  \
    \   authenticatedAttributes\n       [0] IMPLICIT Attributes OPTIONAL,\n     digestEncryptionAlgorithm\n\
    \       DigestEncryptionAlgorithmIdentifier,\n     encryptedDigest EncryptedDigest,\n\
    \     unauthenticatedAttributes\n       [1] IMPLICIT Attributes OPTIONAL }\n \
    \  EncryptedDigest ::= OCTET STRING\n   The fields of type SignerInfo have the\
    \ following meanings:\n        o    version is the syntax version number. It shall\
    \ be\n             1 for this version of the document.\n        o    issuerAndSerialNumber\
    \ specifies the signer's\n             certificate (and thereby the signer's distinguished\
    \ name\n             and public key) by issuer distinguished name and issuer-\n\
    \             specific serial number.\n        o    digestAlgorithm identifies\
    \ the message-digest\n             algorithm (and any associated parameters) under\
    \ which the\n             content and authenticated attributes (if present) are\n\
    \             digested. It should be among those in the digestAlgorithms\n   \
    \          field of the superior SignerInfo value. The message-\n            \
    \ digesting process is described in Section 9.3.\n        o    authenticatedAttributes\
    \ is a set of attributes\n             that are signed (i.e., authenticated) by\
    \ the signer. The\n             field is optional, but it must be present if the\
    \ content\n             type of the ContentInfo value being signed is not data.\
    \ If\n             the field is present, it must contain, at a minimum, two\n\
    \             attributes:\n                  1.   A PKCS #9 content-type attribute\
    \ having\n                       as its value the content type of the\n      \
    \                 ContentInfo value being signed.\n                  2.   A PKCS\
    \ #9 message-digest attribute,\n                       having as its value the\
    \ message digest\n                       of the content (see below).\n       \
    \      Other attribute types that might be useful here, such as\n            \
    \ signing time, are also defined in PKCS #9.\n        o    digestEncryptionAlgorithm\
    \ identifies the digest-\n             encryption algorithm (and any associated\
    \ parameters) under\n             which the message digest and associated information\
    \ are\n             encrypted with the signer's private key. The digest-\n   \
    \          encryption process is described in Section 9.4.\n        o    encryptedDigest\
    \ is the result of encrypting the\n             message digest and associated\
    \ information with the signer's\n             private key.\n        o    unauthenticatedAttributes\
    \ is a set of attributes\n             that are not signed (i.e., authenticated)\
    \ by the signer.\n             The field is optional. Attribute types that might\
    \ be useful\n             here, such as countersignatures, are defined in PKCS\
    \ #9.\n   Notes.\n        1.   It is recommended in the interest of PEM\n    \
    \         compatibility that the authenticatedAttributes field be\n          \
    \   omitted whenever the content type of the ContentInfo value\n             being\
    \ signed is data and there are no other authenticated\n             attributes.\n\
    \        2.   The difference between version 1 SignerInfo and\n             version\
    \ 0 SignerInfo (defined in PKCS #7, Version 1.4) is\n             in the message-digest\
    \ encryption process (see Section 9.4).\n             Only the PEM-compatible\
    \ processes are different, reflecting\n             changes in Privacy-Enhanced\
    \ Mail signature methods. There\n             is no difference in the non-PEM-compatible\
    \ message-digest\n             encryption process.\n             It is suggested\
    \ that PKCS implementations generate only\n             version 1 SignedData values.\
    \ Since the PEM signature method\n             with which version 0 is compatible\
    \ is obsolescent, it is\n             suggested that PKCS implementations be prepared\
    \ to receive\n             only version 1 SignedData values.\n"
- title: 9.3 Message-digesting process
  contents:
  - "9.3 Message-digesting process\n   The message-digesting process computes a message\
    \ digest on either the\n   content being signed or the content together with the\
    \ signer's\n   authenticated attributes. In either case, the initial input to\
    \ the\n   message-digesting process is the \"value\" of the content being signed.\n\
    \   Specifically, the initial input is the contents octets of the DER\n   encoding\
    \ of the content field of the ContentInfo value to which the\n   signing process\
    \ is applied. Only the contents octets of the DER\n   encoding of that field are\
    \ digested, not the identifier octets or the\n   length octets.\n   The result\
    \ of the message-digesting process (which is called,\n   informally, the \"message\
    \ digest\") depends on whether the\n   authenticatedAttributes field is present.\
    \ When the field is absent,\n   the result is just the message digest of the content.\
    \ When the field\n   is present, however, the result is the message digest of\
    \ the complete\n   DER encoding of the Attributes value containted in the\n  \
    \ authenticatedAttributes field. (For clarity: The IMPLICIT [0] tag in\n   the\
    \ authenticatedAttributes field is not part of the Attributes\n   value. The Attributes\
    \ value's tag is SET OF, and the DER encoding of\n   the SET OF tag, rather than\
    \ of the IMPLICIT [0] tag, is to be\n   digested along with the length and contents\
    \ octets of the Attributes\n   value.) Since the Attributes value, when the field\
    \ is present, must\n   contain as attributes the content type and the message\
    \ digest of the\n   content, those values are indirectly included in the result.\n\
    \   When the content being signed has content type data and the\n   authenticatedAttributes\
    \ field is absent, then just the value of the\n   data (e.g., the contents of\
    \ a file) is digested. This has the\n   advantage that the length of the content\
    \ being signed need not be\n   known in advance of the encryption process. This\
    \ method is compatible\n   with Privacy-Enhanced Mail.\n   Although the identifier\
    \ octets and the length octets are not\n   digested, they are still protected\
    \ by other means. The length octets\n   are protected by the nature of the message-digest\
    \ algorithm since it\n   is by assumption computationally infeasible to find any\
    \ two distinct\n   messages of any length that have the same message digest.\n\
    \   Furthermore, assuming that the content type uniquely determines the\n   identifier\
    \ octets, the identifier octets are protected implicitly in\n   one of two ways:\
    \ either by the inclusion of the content type in the\n   authenticated attributes,\
    \ or by the use of the PEM-compatible\n   alternative in Section 9.4 which implies\
    \ that the content type is\n   data.\n   Note. The fact that the message digest\
    \ is computed on part of a DER\n   encoding does not mean that DER is the required\
    \ method of\n   representing that part for data transfer. Indeed, it is expected\
    \ that\n   some implementations of this document may store objects in other than\n\
    \   their DER encodings, but such practices do not affect message-digest\n   computation.\n"
- title: 9.4 Digest-encryption process
  contents:
  - "9.4 Digest-encryption process\n   The input to the digest-encryption process--the\
    \ value supplied to the\n   signer's digest-encryption algorithm--includes the\
    \ result of the\n   message-digesting process (informally, the \"message digest\"\
    ) and the\n   digest algorithm identifier (or object identifier). The result of\
    \ the\n   digest-encryption process is the encryption with the signer's private\n\
    \   key of the BER encoding of a value of type DigestInfo:\n   DigestInfo ::=\
    \ SEQUENCE {\n     digestAlgorithm DigestAlgorithmIdentifier,\n     digest Digest\
    \ }\n   Digest ::= OCTET STRING\n   The fields of type DigestInfo have the following\
    \ meanings:\n        o    digestAlgorithm identifies the message-digest\n    \
    \         algorithm (and any associated parameters) under which the\n        \
    \     content and authenticated attributes are digested. It\n             should\
    \ be the same as the digestAlgorithm field of the\n             superior SignerInfo\
    \ value.\n        o    digest is the result of the message-digesting\n       \
    \      process.\n   Notes.\n        1.   The only difference between the signature\
    \ process\n             defined here and the signature algorithms defined in PKCS\n\
    \             #1 is that signatures there are represented as bit strings,\n  \
    \           for consistency with the X.509 SIGNED macro. Here,\n             encrypted\
    \ message digests are octet strings.\n        2.   The input to the encryption\
    \ process typically will\n             have 30 or fewer octets. If digestEncryptionAlgorithm\
    \ is\n             PKCS #1's rsaEncryption, then this means that the input can\n\
    \             be encrypted in a single block as long as the length of the\n  \
    \           RSA modulus is at least 328 bits, which is reasonable and\n      \
    \       consistent with security recommendations.\n        3.   A message-digest\
    \ algorithm identifier is included\n             in the DigestInfo value to limit\
    \ the damage resulting from\n             the compromise of one message-digest\
    \ algorithm. For\n             instance, suppose an adversary were able to find\
    \ messages\n             with a given MD2 message digest.  That adversary could\
    \ then\n             forge a signature by finding a message with the same MD2\n\
    \             message digest as one that a signer previously signed, and\n   \
    \          presenting the previous signature as the signature on the\n       \
    \      new message.  This attack would succeed only if the signer\n          \
    \   previously used MD2, since the DigestInfo value contains\n             the\
    \ message-digest algorithm.  If a signer never trusted\n             the MD2 algorithm\
    \ and always used MD5, then the compromise\n             of MD2 would not affect\
    \ the signer. If the DigestInfo value\n             contained only the message\
    \ digest, however, the compromise\n             of MD2 would affect signers that\
    \ use any message-digest\n             algorithm.\n        4.   There is potential\
    \ for ambiguity due to the fact\n             that the DigestInfo value does not\
    \ indicate whether the\n             digest field contains just the message digest\
    \ of the\n             content or the message digest of the complete DER encoding\n\
    \             of the authenticatedAttributes field. In other words, it is\n  \
    \           possible for an adversary to transform a signature on\n          \
    \   authenticated attributes to one that appears to be just on\n             content\
    \ by changing the content to be the DER encoding of\n             the authenticatedAttributes\
    \ field, and then removing the\n             authenticatedAttributes field. (The\
    \ reverse transformation\n             is possible, but requires that the content\
    \ be the DER\n             encoding of an authenticated attributes value, which\
    \ is\n             unlikely.) This ambiguity is not a new problem, nor is it a\n\
    \             significant one, as context will generally prevent misuse.\n   \
    \          Indeed, it is also possible for an adversary to transform a\n     \
    \        signature on a certificate or certificate-revocation list\n         \
    \    to one that appears to be just on signed-data content.\n"
- title: 9.5 Compatibility with Privacy-Enhanced Mail
  contents:
  - "9.5 Compatibility with Privacy-Enhanced Mail\n   Compatibility with the MIC-ONLY\
    \ and MIC-CLEAR process types in PEM\n   occurs when the content type of the ContentInfo\
    \ value being signed is\n   data, there are no authenticated attributes, the message-digest\n\
    \   algorithm is md2 or md5, and the digest-encryption algorithm is PKCS\n   #1's\
    \ rsaEncryption. Under all those conditions, the encrypted message\n   digest\
    \ produced here matches the one produced in PEM because:\n        1.   The value\
    \ input to the message-digest algorithm in\n             PEM is the same as in\
    \ this document when there are no\n             authenticated attributes. MD2\
    \ and MD5 in PEM are the same\n             as md2 and md5.\n        2.   The\
    \ value encrypted with the signer's private key\n             in PEM (as specified\
    \ in RFC 1423) is the same as in this\n             document when there are no\
    \ authenticated attributes. RSA\n             private-key encryption in PEM is\
    \ the same as PKCS #1's\n             rsaEncryption.\n   The other parts of the\
    \ signed-data content type (certificates, CRLs,\n   algorithm identifiers, etc.)\
    \ are easily translated to and from their\n   corresponding PEM components.\n"
- title: 10. Enveloped-data content type
  contents:
  - "10. Enveloped-data content type\n   The enveloped-data content type consists\
    \ of encrypted content of any\n   type and encrypted content-encryption keys for\
    \ one or more\n   recipients. The combination of encrypted content and encrypted\n\
    \   content-encryption key for a recipient is a \"digital envelope\" for\n   that\
    \ recipient. Any type of content can be enveloped for any number\n   of recipients\
    \ in parallel.\n   It is expected that the typical application of the enveloped-data\n\
    \   content type will be to represent one or more recipients' digital\n   envelopes\
    \ on content of the data, digested-data, or signed-data\n   content types.\n \
    \  The process by which enveloped data is constructed involves the\n   following\
    \ steps:\n        1.   A content-encryption key for a particular content-\n  \
    \           encryption algorithm is generated at random.\n        2.   For each\
    \ recipient, the content-encryption key is\n             encrypted with the recipient's\
    \ public key.\n        3.   For each recipient, the encrypted content-\n     \
    \        encryption key and other recipient-specific information are\n       \
    \      collected into a RecipientInfo value, defined in Section\n            \
    \ 10.2.\n        4.   The content is encrypted with the content-\n           \
    \  encryption key. (Content encryption may require that the\n             content\
    \ be padded to a multiple of some block size; see\n             Section 10.3 for\
    \ discussion.)\n        5.   The RecipientInfo values for all the recipients\n\
    \             are collected together with the encrypted content into a\n     \
    \        EnvelopedData value, defined in Section 10.1.\n   A recipient opens the\
    \ envelope by decrypting the one of the encrypted\n   content-encryption keys\
    \ with the recipient's private key and\n   decrypting the encrypted content with\
    \ the recovered content-\n   encryption key. The recipient's private key is referenced\
    \ by an\n   issuer distinguished name and an issuer-specific serial number that\n\
    \   uniquely identify the certificate for the corresponding public key.\n   This\
    \ section is divided into four parts. The first part describes the\n   top-level\
    \ type EnvelopedData, the second part describes the per-\n   recipient information\
    \ type RecipientInfo, and the third and fourth\n   parts describe the content-encryption\
    \ and key-encryption processes.\n   This content type is not compatible with Privacy-Enhanced\
    \ Mail\n   (although some processes it defines are compatible with their PEM\n\
    \   counterparts), since Privacy-Enhanced Mail always involves digital\n   signatures,\
    \ never digital envelopes alone.\n"
- title: 10.1 EnvelopedData type
  contents:
  - "10.1 EnvelopedData type\n   The enveloped-data content type shall have ASN.1\
    \ type EnvelopedData:\n   EnvelopedData ::= SEQUENCE {\n     version Version,\n\
    \     recipientInfos RecipientInfos,\n     encryptedContentInfo EncryptedContentInfo\
    \ }\n   RecipientInfos ::= SET OF RecipientInfo\n   EncryptedContentInfo ::= SEQUENCE\
    \ {\n     contentType ContentType,\n     contentEncryptionAlgorithm\n       ContentEncryptionAlgorithmIdentifier,\n\
    \     encryptedContent\n       [0] IMPLICIT EncryptedContent OPTIONAL }\n   EncryptedContent\
    \ ::= OCTET STRING\n   The fields of type EnvelopedData have the following meanings:\n\
    \        o    version is the syntax version number. It shall be\n            \
    \ 0 for this version of the document.\n        o    recipientInfos is a collection\
    \ of per-recipient\n             information. There must be at least one element\
    \ in\n             the collection.\n        o    encryptedContentInfo is the encrypted\
    \ content\n             information.\n   The fields of type EncryptedContentInfo\
    \ have the following meanings:\n        o    contentType indicates the type of\
    \ content.\n        o    contentEncryptionAlgorithm identifies the content-\n\
    \             encryption algorithm (and any associated\n             parameters)\
    \ under which the content is encrypted.\n             The content-encryption process\
    \ is described in\n             Section 10.3. This algorithm is the same for all\n\
    \             recipients.\n        o    encryptedContent is the result of encrypting\
    \ the\n             content. The field is optional, and if the field\n       \
    \      is not present, its intended value must be\n             supplied by other\
    \ means.\n   Note. The fact that the recipientInfos field comes before the\n \
    \  encryptedContentInfo field makes it possible to process an\n   EnvelopedData\
    \ value in a single pass. (Single-pass processing is\n   described in Section\
    \ 5.)\n"
- title: 10.2 RecipientInfo type
  contents:
  - "10.2 RecipientInfo type\n   Per-recipient information is represented in the type\
    \ RecipientInfo:\n   RecipientInfo ::= SEQUENCE {\n     version Version,\n   \
    \  issuerAndSerialNumber IssuerAndSerialNumber,\n     keyEncryptionAlgorithm\n\
    \       KeyEncryptionAlgorithmIdentifier,\n     encryptedKey EncryptedKey }\n\
    \   EncryptedKey ::= OCTET STRING\n   The fields of type RecipientInfo have the\
    \ following meanings:\n        o    version is the syntax version number. It shall\
    \ be\n             0 for this version of the document.\n        o    issuerAndSerialNumber\
    \ specifies the recipient's\n             certificate (and thereby the recipient's\n\
    \             distinguished name and public key) by issuer\n             distinguished\
    \ name and issuer-specific serial\n             number.\n        o    keyEncryptionAlgorithm\
    \ identifies the key-\n             encryption algorithm (and any associated\n\
    \             parameters) under which the content-encryption key\n           \
    \  is encrypted with the recipient's public key. The\n             key-encryption\
    \ process is described in Section\n             10.4.\n        o    encryptedKey\
    \ is the result of encrypting the\n             content-encryption key with the\
    \ recipient's public\n             key (see below).\n"
- title: 10.3 Content-encryption process
  contents:
  - "10.3 Content-encryption process\n   The input to the content-encryption process\
    \ is the \"value\" of the\n   content being enveloped. Specifically, the input\
    \ is the contents\n   octets of a definite-length BER encoding of the content\
    \ field of the\n   ContentInfo value to which the enveloping process is applied.\
    \ Only\n   the contents octets of the BER encoding are encrypted, not the\n  \
    \ identifier octets or length octets; those other octets are not\n   represented\
    \ at all.\n   When the content being enveloped has content type data, then just\
    \ the\n   value of the data (e.g., the contents of a file) is encrypted. This\n\
    \   has the advantage that the length of the content being encrypted need\n  \
    \ not be known in advance of the encryption process. This method is\n   compatible\
    \ with Privacy-Enhanced Mail.\n   The identifier octets and the length octets\
    \ are not encrypted. The\n   length octets may be protected implicitly by the\
    \ encryption process,\n   depending on the encryption algorithm. The identifier\
    \ octets are not\n   protected at all, although they can be recovered from the\
    \ content\n   type, assuming that the content type uniquely determines the\n \
    \  identifier octets. Explicit protection of the identifier and length\n   octets\
    \ requires that the signed-and-enveloped-data content type be\n   employed, or\
    \ that the digested-data and enveloped-data content types\n   be applied in succession.\n\
    \   Notes.\n        1.   The reason that a definite-length BER encoding is\n \
    \            required is that the bit indicating whether the length is\n     \
    \        definite or indefinite is not recorded anywhere in the\n            \
    \ enveloped-data content type.  Definite-length encoding is\n             more\
    \ appropriate for simple types such as octet strings, so\n             definite-length\
    \ encoding is chosen.\n        2.   Some content-encryption algorithms assume\
    \ the\n             input length is a multiple of k octets, where k > 1, and\n\
    \             let the application define a method for handling inputs\n      \
    \       whose lengths are not a multiple of k octets. For such\n             algorithms,\
    \ the method shall be to pad the input at the\n             trailing end with\
    \ k - (l mod k) octets all having value k -\n             (l mod k), where l is\
    \ the length of the input. In other\n             words, the input is padded at\
    \ the trailing end with one of\n             the following strings:\n        \
    \              01 -- if l mod k = k-1\n                     02 02 -- if l mod\
    \ k = k-2\n                                 .\n                              \
    \   .\n                                 .\n                   k k ... k k -- if\
    \ l mod k = 0\n             The padding can be removed unambiguously since all\
    \ input is\n             padded and no padding string is a suffix of another.\
    \ This\n             padding method is well-defined if and only if k < 256;\n\
    \             methods for larger k are an open issue for further study.\n"
- title: 10.4 Key-encryption process
  contents:
  - "10.4 Key-encryption process\n   The input to the key-encryption process--the\
    \ value supplied to the\n   recipient's key-encryption algorithm--is just the\
    \ \"value\" of the\n   content-encryption key.\n"
- title: 11. Signed-and-enveloped-data content type
  contents:
  - "11. Signed-and-enveloped-data content type\n   This section defines the signed-and-enveloped-data\
    \ content type. For\n   brevity, much of this section is expressed in terms of\
    \ material in\n   Sections 9 and 10.\n   The signed-and-enveloped-data content\
    \ type consists of encrypted\n   content of any type, encrypted content-encryption\
    \ keys for one or\n   more recipients, and doubly encrypted message digests for\
    \ one or more\n   signers. The \"double encryption\" consists of an encryption\
    \ with a\n   signer's private key followed by an encryption with the content-\n\
    \   encryption key.\n   The combination of encrypted content and encrypted content-encryption\n\
    \   key for a recipient is a \"digital envelope\" for that recipient. The\n  \
    \ recovered singly encrypted message digest for a signer is a \"digital\n   signature\"\
    \ on the recovered content for that signer.  Any type of\n   content can be enveloped\
    \ for any number of recipients and signed by\n   any number of signers in parallel.\n\
    \   It is expected that the typical application of the signed-and-\n   enveloped-data\
    \ content type will be to represent one signer's digital\n   signature and one\
    \ or more recipients' digital envelopes on content of\n   the data content type.\n\
    \   The process by which signed-and-enveloped data is constructed\n   involves\
    \ the following steps:\n        1.   A content-encryption key for a particular\
    \ content-\n             encryption algorithm is generated at random.\n      \
    \  2.   For each recipient, the content-encryption key is\n             encrypted\
    \ with the recipient's public key.\n        3.   For each recipient, the encrypted\
    \ content-\n             encryption key and other recipient-specific\n       \
    \      information are collected into a RecipientInfo\n             value, defined\
    \ in Section 10.2.\n        4.   For each signer, a message digest is computed\
    \ on\n             the content with a signer-specific message-digest\n       \
    \      algorithm. (If two signers employ the same message-\n             digest\
    \ algorithm, then the message digest need be\n             computed for only one\
    \ of them.)\n        5.   For each signer, the message digest and associated\n\
    \             information are encrypted with the signer's\n             private\
    \ key, and the result is encrypted with the\n             content-encryption key.\
    \ (The second encryption may\n             require that the result of the first\
    \ encryption be\n             padded to a multiple of some block size; see\n \
    \            Section 10.3 for discussion.)\n        6.   For each signer, the\
    \ doubly encrypted message\n             digest and other signer-specific information\
    \ are\n             collected into a SignerInfo value, defined in\n          \
    \   Section 9.2.\n        7.   The content is encrypted with the content-\n  \
    \           encryption key. (See Section 10.3 for discussion.)\n        8.   The\
    \ message-digest algorithms for all the signers,\n             the SignerInfo\
    \ values for all the signers and the\n             RecipientInfo values for all\
    \ the recipients are\n             collected together with the encrypted content\
    \ into\n             a SignedAndEnvelopedData value, defined in Section\n    \
    \         11.1.\n   A recipient opens the envelope and verifies the signatures\
    \ in two\n   steps. First, the one of the encrypted content-encryption keys is\n\
    \   decrypted with the recipient's private key, and the encrypted content\n  \
    \ is decrypted with the recovered content-encryption key. Second, the\n   doubly\
    \ encrypted message digest for each signer is decrypted with the\n   recovered\
    \ content-encryption key, the result is decrypted with the\n   signer's public\
    \ key, and the recovered message digest is compared to\n   an independently computed\
    \ message digest.\n   Recipient private keys and signer public keys are contained\
    \ or\n   referenced as discussed in Sections 9 and 10.\n   This section is divided\
    \ into three parts. The first part describes\n   the top-level type SignedAndEnvelopedData\
    \ and the second part\n   describes the digest-encryption process. Other types\
    \ and processes\n   are the same as in Sections 9 and 10.  The third part summarizes\n\
    \   compatibility with Privacy-Enhanced Mail.\n   Note. The signed-and-enveloped-data\
    \ content type provides\n   cryptographic enhancements similar to those resulting\
    \ from the\n   sequential combination of signed-data and enveloped-data content\n\
    \   types. However, since the signed-and-enveloped-data content type does\n  \
    \ not have authenticated or unauthenticated attributes, nor does it\n   provide\
    \ enveloping of signer information other than the signature,\n   the sequential\
    \ combination of signed-data and enveloped-data content\n   types is generally\
    \ preferable to the SignedAndEnvelopedData content\n   type, except when compatibility\
    \ with the ENCRYPTED process type in\n   Privacy-Enhanced Mail in intended.\n"
- title: 11.1 SignedAndEnvelopedData type
  contents:
  - "11.1 SignedAndEnvelopedData type\n   The signed-and-enveloped-data content type\
    \ shall have ASN.1 type\n   SignedAndEnvelopedData:\n   SignedAndEnvelopedData\
    \ ::= SEQUENCE {\n     version Version,\n     recipientInfos RecipientInfos,\n\
    \     digestAlgorithms DigestAlgorithmIdentifiers,\n     encryptedContentInfo\
    \ EncryptedContentInfo,\n     certificates\n        [0] IMPLICIT ExtendedCertificatesAndCertificates\n\
    \          OPTIONAL,\n     crls\n       [1] IMPLICIT CertificateRevocationLists\
    \ OPTIONAL,\n     signerInfos SignerInfos }\n   The fields of type SignedAndEnvelopedData\
    \ have the following\n   meanings:\n        o    version is the syntax version\
    \ number. It shall be\n             1 for this version of the document.\n    \
    \    o    recipientInfos is a collection of per-recipient\n             information,\
    \ as in Section 10. There must be at\n             least one element in the collection.\n\
    \        o    digestAlgorithms is a collection of message-digest\n           \
    \  algorithm identifiers, as in Section 9. The\n             message-digesting\
    \ process is the same as in\n             Section 9 in the case when there are\
    \ no\n             authenticated attributes.\n        o    encryptedContentInfo\
    \ is the encrypted content, as\n             in Section 10. It can have any of\
    \ the defined\n             content types.\n        o    certificates is a set\
    \ of PKCS #6 extended\n             certificates and X.509 certificates, as in\
    \ Section\n             9.\n        o    crls is a set of certificate-revocation\
    \ lists, as\n             in Section 9.\n        o    signerInfos is a collection\
    \ of per-signer\n             information. There must be at least one element\
    \ in\n             the collection. SignerInfo values have the same\n         \
    \    meaning as in Section 9 with the exception of the\n             encryptedDigest\
    \ field (see below).\n   Notes.\n        1.   The fact that the recipientInfos\
    \ and\n             digestAlgorithms fields come before the contentInfo field\n\
    \             and the signerInfos field comes after it makes it possible\n   \
    \          to process a SignedAndEnvelopedData value in a single pass.\n     \
    \        (Single-pass processing is described in Section 5.)\n        2.   The\
    \ difference between version 1\n             SignedAndEnvelopedData and version\
    \ 0 SignedAndEnvelopedData\n             (defined in PKCS #7, Version 1.4) is\
    \ that the crls field is\n             allowed in version 1, but not in version\
    \ 0. Except for the\n             difference in version number, version 0\n  \
    \           SignedAndEnvelopedData values are acceptable as version 1\n      \
    \       values. An implementation can therefore process\n             SignedAndEnvelopedData\
    \ values of either version as though\n             they were version 1 values.\
    \ It is suggested that PKCS\n             implementations generate only version\
    \ 1\n             SignedAndEnvelopedData values, but be prepared to process\n\
    \             SignedAndEnvelopedData values of either version.\n"
- title: 11.2 Digest-encryption process
  contents:
  - "11.2 Digest-encryption process\n   The input to the digest-encryption process\
    \ is the same as in Section\n   9, but the process itself is different.  Specifically,\
    \ the process\n   involves two steps. First, the input to the process is supplied\
    \ to\n   the signer's digest-encryption algorithm, as in Section 9. Second,\n\
    \   the result of the first step is encrypted with the content-encryption\n  \
    \ key.  There is no DER encoding between the two steps; the \"value\"\n   output\
    \ by the first step is input directly to the second step. (See\n   Section 10.3\
    \ for discussion.)\n   This process is compatible with the ENCRYPTED process type\
    \ in\n   Privacy-Enhanced Mail.\n   Note. The purpose of the second step is to\
    \ prevent an adversary from\n   recovering the message digest of the content.\
    \  Otherwise, an\n   adversary would be able to determine which of a list of candidate\n\
    \   contents (e.g., \"Yes\" or \"No\") is the actual content by comparing the\n\
    \   their message digests to the actual message digest.\n"
- title: 11.3 Compatibility with Privacy-Enhanced Mail
  contents:
  - "11.3 Compatibility with Privacy-Enhanced Mail\n   Compatibility with the ENCRYPTED\
    \ process type of PEM occurs when the\n   content type of the ContentInfo value\
    \ being signed and enveloped is\n   data, the message-digest algorithm is md2\
    \ or md5, the content-\n   encryption algorithm is DES in CBC mode, the digest-encryption\n\
    \   algorithm is PKCS #1's rsaEncryption, and the key-encryption\n   algorithm\
    \ is PKCS #1's rsaEncryption.  Under all those conditions,\n   the doubly encrypted\
    \ message digest and the encrypted content\n   encryption key match the ones produced\
    \ in PEM because of reasons\n   similar to those given in Section 9.5, as well\
    \ as the following:\n        1.   The value input to the content-encryption\n\
    \             algorithm in PEM is the same as in this document.\n            \
    \ DES in CBC mode is the same as desCBC.\n        2.   The value input to the\
    \ key-encryption algorithm in\n             PEM is the same as in this document\
    \ (see Section\n             10.4). RSA public-key encryption in PEM is the\n\
    \             same as PKCS #1's rsaEncryption.\n        3.   The double-encryption\
    \ process applied to the\n             message digest in this document and in\
    \ PEM are the\n             same.\n   The other parts of the signed-and-enveloped-data\
    \ content type\n   (certificates, CRLs, algorithm identifiers, etc.) are easily\n\
    \   translated to and from their corresponding PEM components. (CRLs are\n   carried\
    \ in a separate PEM message.)\n"
- title: 12. Digested-data content type
  contents:
  - "12. Digested-data content type\n   The digested-data content type consists of\
    \ content of any type and a\n   message digest of the content.\n   It is expected\
    \ that the typical application of the digested-data\n   content type will be to\
    \ add integrity to content of the data content\n   type, and that the result would\
    \ become the content input to the\n   enveloped-data content type.\n   The process\
    \ by which digested-data is constructed involves the\n   following steps:\n  \
    \      1.   A message digest is computed on the content with a\n             message-digest\
    \ algorithm.\n        2.   The message-digest algorithm and the message\n    \
    \         digest are collected together with the content\n             into a\
    \ DigestedData value.\n   A recipient verifies the message digest by comparing\
    \ the message\n   digest to an independently computed message digest.\n   The\
    \ digested-data content type shall have ASN.1 type DigestedData:\n   DigestedData\
    \ ::= SEQUENCE {\n     version Version,\n     digestAlgorithm DigestAlgorithmIdentifier,\n\
    \     contentInfo ContentInfo,\n     digest Digest }\n   Digest ::= OCTET STRING\n\
    \   The fields of type DigestedData have the following meanings:\n        o  \
    \  version is the syntax version number. It shall be\n             0 for this\
    \ version of the document.\n        o    digestAlgorithm identifies the message-digest\n\
    \             algorithm (and any associated parameters) under which the\n    \
    \         content is digested. (The message-digesting process is the\n       \
    \      same as in Section 9 in the case when there are no\n             authenticated\
    \ attributes.)\n        o    contentInfo is the content that is digested. It\n\
    \             can have any of the defined content types.\n        o    digest\
    \ is the result of the message-digesting process.\n   Note. The fact that the\
    \ digestAlgorithm field comes before the\n   contentInfo field and the digest\
    \ field comes after it makes it\n   possible to process a DigestedData value in\
    \ a single pass.  (Single-\n   pass processing is described in Section 5.)\n"
- title: 13. Encrypted-data content type
  contents:
  - "13. Encrypted-data content type\n   The encrypted-data content type consists\
    \ of encrypted content of any\n   type. Unlike the enveloped-data content type,\
    \ the encrypted-data\n   content type has neither recipients nor encrypted content-encryption\n\
    \   keys. Keys are assumed to be managed by other means.\n   It is expected that\
    \ the typical application of the encrypted-data\n   content type will be to encrypt\
    \ content of the data content type for\n   local storage, perhaps where the encryption\
    \ key is a password.\n   The encrypted-data content type shall have ASN.1 type\
    \ EncryptedData:\n   EncryptedData ::= SEQUENCE {\n     version Version,\n   \
    \  encryptedContentInfo EncryptedContentInfo }\n   The fields of type EncryptedData\
    \ have the following meanings:\n        o    version is the syntax version number.\
    \ It shall be\n             0 for this version of the document.\n        o   \
    \ encryptedContentInfo is the encrypted content\n             information, as\
    \ in Section 10.\n"
- title: 14. Object identifiers
  contents:
  - "14. Object identifiers\n   This document defines seven object identifiers: pkcs-7,\
    \ data,\n   signedData, envelopedData, signedAndEnvelopedData, digestedData, and\n\
    \   encryptedData.\n   The object identifier pkcs-7 identifies this document.\n\
    \   pkcs-7 OBJECT IDENTIFIER ::=\n     { iso(1) member-body(2) US(840) rsadsi(113549)\n\
    \         pkcs(1) 7 }\n   The object identifiers data, signedData, envelopedData,\n\
    \   signedAndEnvelopedData, digestedData, and encryptedData, identify,\n   respectively,\
    \ the data, signed-data, enveloped-data, signed-and-\n   enveloped-data, digested-data,\
    \ and encrypted-data content types\n   defined in Sections 8-13.\n   data OBJECT\
    \ IDENTIFIER ::= { pkcs-7 1 }\n   signedData OBJECT IDENTIFIER ::= { pkcs-7 2\
    \ }\n   envelopedData OBJECT IDENTIFIER ::= { pkcs-7 3 }\n   signedAndEnvelopedData\
    \ OBJECT IDENTIFIER ::=\n      { pkcs-7 4 }\n   digestedData OBJECT IDENTIFIER\
    \ ::= { pkcs-7 5 }\n   encryptedData OBJECT IDENTIFIER ::= { pkcs-7 6 }\n   These\
    \ object identifiers are intended to be used in the contentType\n   field of a\
    \ value of type ContentInfo (see Section 5). The content\n   field of that type,\
    \ which has the content-type-specific syntax ANY\n   DEFINED BY contentType, would\
    \ have ASN.1 type Data, SignedData,\n   EnvelopedData, SignedAndEnvelopedData,\
    \ DigestedData, and\n   EncryptedData, respectively. These object identifiers\
    \ are also\n   intended to be used in a PKCS #9 content-type attribute.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are discussed throughout this memo.\n"
- title: Revision history
  contents:
  - "Revision history\n   Versions 1.0-1.3\n   Versions 1.0-1.3 were distributed to\
    \ participants in RSA Data\n   Security, Inc.'s Public-Key Cryptography Standards\
    \ meetings in\n   February and March 1991.\n   Version 1.4\n   Version 1.4 is\
    \ part of the June 3, 1991 initial public release of\n   PKCS. Version 1.4 was\
    \ published as NIST/OSI Implementors' Workshop\n   document SEC-SIG-91-22.\n \
    \  Version 1.5\n   Version 1.5 incorporates several editorial changes, including\
    \ updates\n   to the references and the addition of a revision history. The\n\
    \   following substantive changes were made:\n        o    Section 6: CertificateRevocationLists\
    \ type is\n             added.\n        o    Section 9.1: SignedData syntax is\
    \ revised. The new\n             version allows for the dissemination of\n   \
    \          certificate-revocation lists along with\n             signatures. It\
    \ also allows for the dissemination\n             of certificates and certificate-revocation\
    \ lists\n             alone, without any signatures.\n        o    Section 9.2:\
    \ SignerInfo syntax is revised. The new\n             version includes a message-digest\
    \ encryption\n             process compatible with Privacy-Enhanced Mail as\n\
    \             specified in RFC 1423.\n        o    Section 9.3: Meaning of \"\
    the DER encoding of the\n             authenticatedAttributes field\" is clarified\
    \ as\n             \"the DER encoding of the Attributes value.\"\n        o  \
    \  Section 10.3: Padding method for content-\n             encryption algorithms\
    \ is described.\n        o    Section 11.1: SignedAndEnvelopedData syntax is\n\
    \             revised. The new version allows for the\n             dissemination\
    \ of certificate-revocation lists.\n        o    Section 13: Encrypted-data content\
    \ type is added.\n             This content type consists of encrypted content\
    \ of\n             any type.\n        o    Section 14: encryptedData object identifier\
    \ is\n             added.\n   Supersedes June 3, 1991 version, which was also\
    \ published as NIST/OSI\n   Implementors' Workshop document SEC-SIG-91-22.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document is based on a contribution of RSA Laboratories,\
    \ a\n   division of RSA Data Security, Inc.  Any substantial use of the text\n\
    \   from this document must acknowledge RSA Data Security, Inc. RSA Data\n   Security,\
    \ Inc.  requests that all material mentioning or referencing\n   this document\
    \ identify this as \"RSA Data Security, Inc. PKCS #7\".\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Burt Kaliski\n   RSA Laboratories East\n   20 Crosby Drive\n\
    \   Bedford, MA  01730\n   Phone: (617) 687-7000\n   EMail: burt@rsa.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
