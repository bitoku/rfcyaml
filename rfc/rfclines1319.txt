The MD2 Message Digest Algorithm Status of this Memo
This memo provides information for the Internet community.
It does not specify an Internet standard.
Distribution of this memo is unlimited.
The description of MD2 is based on material prepared by John Linn and Ron Rivest.
Their permission to incorporate that material is greatly appreciated.
This document describes the MD2 message digest algorithm.
The algorithm takes as input a message of arbitrary length and produces as output a 128 bit "fingerprint" or "message digest" of the input.
It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest.
The MD2 algorithm is intended for digital signature applications, where a large file must be "compressed" in a secure manner before being signed with a private (secret) key under a public key cryptosystem such as RSA.
License to use MD2 is granted for non commerical Internet Privacy
This document is an update to the August 1989 RFC 1115 [3], which also gives a reference implementation of MD2.
The main differences are that a textual description of MD2 is included, and that the reference implementation of MD2 is more portable.
For OSI based applications, MD2's object identifier is md2 OBJECT IDENTIFIER ::
In the X.509 type AlgorithmIdentifier [4], the parameters for MD2 should have type NULL.
In this document, a "byte" is an eight bit quantity.
Let x i denote "
If the subscript is an expression, we surround it in braces, as in x {i 1}.
Similarly, we use ^ for superscripts (exponentiation), so that x^i denotes x to the i th power.
Let X xor Y denote the bit wise XOR of X and Y. 3.
We begin by supposing that we have a b byte message as input, and that we wish to find its message digest.
Here b is an arbitrary nonnegative integer; b may be zero, and it may be arbitrarily large.
We imagine the bytes of the message written down as follows:
The following five steps are performed to compute the message digest of the message.
The message is "padded" (extended) so that its length (in bytes) is congruent to 0, modulo 16.
That is, the message is extended so that it is a multiple of 16 bytes long.
Padding is always performed, even if the length of the message is already congruent to 0, modulo 16.
Padding is performed as follows: "i" bytes of value "i" are appended to the message so that the length in bytes of the padded message becomes congruent to 0, modulo 16.
At least one byte and at most 16 16 bytes are appended.
At this point the resulting message (after padding with bytes) has a length that is an exact multiple of 16 bytes.
N 1] denote the bytes of the resulting message, where N is a multiple of 16.
Append Checksum A 16 byte checksum of the message is appended to the result of the previous step.
This step uses a 256 byte "random" permutation constructed from the digits of pi.
denote the i th element of this table.
The table is given in the appendix.
end /  of loop on i
/ Set L to 0.
/  Process each 16 word block.
For i   0 to N/16 1 do /  Checksum block i.
For j   0 to 15 do Set c to M[i 16 j].
Set C[j] to S[c xor L].
end /  of loop on j  / end /  of loop on i  /
15] is appended to the message.
Let M[0 with checksum), where N'
Initialize MD Buffer A 48 byte buffer
X is used to compute the message digest.
The buffer is initialized to zero.
Process Message in 16 Byte Blocks
This step uses the same 256 byte permutation S as step 2 does.
For i   0 to N'/16 1 do /  Copy block i into X.  /
For j   0 to 15 do Set X[16 j] to M[i 16 j].
Set X[32 j] to (X[16 j]
end /  of loop on j  / Set t to 0.
0 to 17 do /  Round j.  /
For k   0 to 47
do Set t and X[k] to (X[k] xor S[t]).
end /  of loop on k
/ Set t to (t j) modulo 256.
end /  of loop on j  / end /  of loop on i  / 3.5 Step 5.
That is, we begin with X[0], and end with X[15].
This completes the description of MD2.
A reference implementation in C is given in the appendix.
The MD2 message digest algorithm is simple to implement, and provides a "fingerprint" or message digest of a message of arbitrary length.
It is conjectured that the difficulty of coming up with two messages having the same message digest is on the order of 2^64 operations, and that the difficulty of coming up with any message having a given message digest is on the order of 2^128 operations.
The MD2 algorithm has been carefully scrutinized for weaknesses.
It is, however, a relatively new algorithm and further security analysis is of course justified, as is the case with any new proposal of this sort.
References [1] Linn, J., "Privacy Enhancement for Internet Electronic Mail:
Part I   Message Encipherment and Authentication Procedures", RFC 1113, DEC,  IAB Privacy Task Force, August 1989.
[2] Kent, S., and J. Linn, "Privacy Enhancement for Internet Electronic Mail:
Part II   Certificate Based Key Management", RFC 1114, BBNCC, DEC, IAB Privacy Task Force, August 1989.
[3] Linn, J., "Privacy Enhancement for Internet Electronic Mail: Part III   Algorithms, Modes, and Identifiers", RFC 1115 DEC, IAB Privacy Task Force, August 1989.
[4] CCITT Recommendation X.509 (1988), "The Directory Authentication Framework".
This appendix contains the following files taken from RSAREF: A Cryptographic Toolkit for Privacy Enhanced Mail:
global header file md2.h   header file for MD2 md2c.c   source code for MD2
For more information on RSAREF, send email to <rsaref@rsa.com
The appendix also includes the following file: mddriver.c   test driver for MD2, MD4 and MD5
The driver compiles for MD5 by default but can compile for MD2 or MD4 if the symbol MD is defined on the C compiler command line as 2 or 4.
The following makes PROTOTYPES default to 0 if it has not already been defined with C compiler flags.
#ifndef PROTOTYPES #define PROTOTYPES 0
#endif /  POINTER defines a generic pointer type
/ typedef unsigned char  POINTER
/ typedef unsigned long int UINT4
If using PROTOTYPES, then PROTO LIST returns the list, otherwise it returns an empty list.
/ #if PROTOTYPES #define PROTO LIST(list) list #else #define PROTO LIST(list)
Copyright (C) 1990 2, RSA Data Security,
License to copy and use this software is granted for non commercial Internet Privacy Enhanced Mail
provided that it is identified as the "RSA Data Security, Inc. MD2 Message Digest Algorithm" in all material mentioning or referencing this software or this function.
RSA Data Security, Inc. makes no representations concerning either the merchantability of this software or the suitability of this software for any particular purpose.
It is provided "as is" without express or implied warranty of any kind.
These notices must be retained in any copies of any part of this documentation and/or software.
License to copy and use this software is granted for non commercial Internet Privacy Enhanced Mail
provided that it is identified as the "RSA Data Security, Inc. MD2 Message Digest Algorithm" in all material mentioning or referencing this software or this function.
RSA Data Security, Inc. makes no representations concerning either the merchantability of this software or the suitability of this software for any particular purpose.
It is provided "as is" without express or implied warranty of any kind.
These notices must be retained in any copies of any part of this documentation and/or software.
255 constructed from the digits of pi.
It gives a "random" nonlinear byte substitution operation.
/ static unsigned char PI SUBST[256]
{ 41, 46, 67, 201, 162, 216, 124, 1, 61, 54, 84, 161, 236, 240, 6, 19, 98, 167, 5, 243, 192, 199, 115, 140, 152, 147, 43, 217, 188, 76, 130, 202, 30, 155, 87, 60, 253, 212, 224, 22, 103, 66, 111, 24, 138, 23, 229, 18, 190, 78, 196, 214, 218, 158, 222, 73, 160, 251, 245, 142, 187, 47, 238, 122, 169, 104, 121, 145, 21, 178, 7, 63, 148, 194, 16, 137, 11, 34, 95, 33, 128, 127, 93, 154, 90, 144, 50, 39, 53, 62, 204, 231, 191, 247, 151, 3, 255, 25, 48, 179, 72, 165, 181, 209, 215, 94, 146, 42, 172, 86, 170, 198, 79, 184, 56, 210, 150, 164, 125, 182, 118, 252, 107, 226, 156, 116, 4, 241, 69, 157, 112, 89, 100, 113, 135, 32, 134, 91, 207, 101, 230, 45, 168, 2, 27, 96, 37, 173, 174, 176, 185, 246, 28, 70, 97, 105, 52, 64, 126, 15, 85, 71, 163, 35, 221, 81, 175, 58, 195, 92, 249, 206, 186, 197, 234, 38, 44, 83, 13, 110, 133, 40, 132, 9, 211, 223, 205, 244, 65, 129, 77, 82, 106, 220, 55, 200, 108, 193, 171, 250, 36, 225, 123, 8, 12, 189, 177, 74, 120, 136, 149, 139, 227, 99, 232, 109, 233, 203, 213, 254, 59, 0, 29, 57, 242, 239, 183, 14, 102, 88, 208, 228, 166, 119, 114, 248, 235, 117, 75, 10, 49, 68, 80, 180, 143, 237, 31, 26, 219, 153, 141, 51, 159, 17, 131, 20 }; static unsigned char  PADDING
Begins an MD2 operation, writing a new context.
Continues an MD2 message digest operation, processing another message block, and updating the context.
/ void MD2Update (context, input, inputLen)
mod 16  / index   context count; context count
Ends an MD2 message digest operation, writing the message digest and zeroizing the context.
/ void MD2Final (digest, context) unsigned char
/ index   context count; padLen   16 index; MD2Update (context, PADDING[padLen], padLen);
Transforms state and updates checksum based on block.
/ MD2 memcpy ((POINTER)x, (POINTER)state, 16); MD2 memcpy ((POINTER)x 16, (POINTER)block, 16); for (i   0; i < 16; i )
/ static void MD2 memcpy (output, input, len) POINTER output; POINTER input; unsigned int len; { unsigned int i; for (i   0; i < len;
/ static void MD2 memset (output, value, len) POINTER output; int value; unsigned int len; { unsigned int i; for (i   0; i < len;
Copyright (C) 1990 2, RSA Data Security,
RSA Data Security, Inc. makes no representations concerning either the merchantability of this software or the suitability of this software for any particular purpose.
It is provided "as is" without express or implied warranty of any kind.
These notices must be retained in any copies of any part of this documentation and/or software.
The following makes MD default to MD5 if it has not already been defined with C compiler flags.
ifndef MD #define MD MD5
> #include <string.h> #include "global.h" #if MD   2 #include "md2.h" #endif #if MD   4 #include "md4.h" #endif #if MD   5 #include "md5.h" #endif /  Length of test block, number of test blocks.
LEN 1000 #define TEST BLOCK COUNT 1000 static void MDString PROTO LIST
#if MD   2 #define MD CTX MD2 CTX
define MDUpdate MD2Update #define MDFinal MD2Final #endif #if MD   4 #
#define MDUpdate MD4Update #define MDFinal MD4Final #endif #if MD   5 #
#define MDUpdate MD5Update #define MDFinal MD5Final #endif /  Main driver.
if (argc > 1) for (i   1; i < argc; i )
/ static void MDString (string)
char  string; { MD CTX context; unsigned char digest[16]; unsigned int len
endTime, startTime; unsigned char block[TEST BLOCK LEN],
digest[16]; unsigned int i; printf ("MD%d time trial.
Digesting %d %d byte blocks ...
/ MDInit (&context); for (i   0; i < TEST BLOCK COUNT; i ) MDUpdate (&context, block, TEST BLOCK LEN); MDFinal (digest, &context);
/  Stop timer  / time (&endTime)
; printf ("Speed   %ld bytes/second\n", (long)TEST BLOCK
MDFile (filename) char  filename; { FILE  file; MD CTX context; int len; unsigned char buffer[1024]
/ static void MDPrint (digest) unsigned char
The level of security discussed in this memo is considered to be sufficient for implementing very high security hybrid digital signature schemes based on MD2 and a public key cryptosystem.
Author's Address Burton S. Kaliski Jr. RSA Laboratories (a division of RSA Data Security, Inc.) 10 Twin Dolphin Drive Redwood City, CA
94065 Phone: (415) 595 8782 FAX:
(415) 595 4126 EMail: burt@rsa.com
