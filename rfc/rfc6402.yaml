- title: __initial_text__
  contents:
  - '             Certificate Management over CMS (CMC) Updates

    '
- title: Abstract
  contents:
  - "Abstract\n   This document contains a set of updates to the base syntax for CMC,\
    \ a\n   Certificate Management protocol using the Cryptographic Message\n   Syntax\
    \ (CMS).  This document updates RFC 5272, RFC 5273, and RFC\n   5274.\n   The\
    \ new items in this document are: new controls for future work in\n   doing server\
    \ side key generation, definition of a Subject Information\n   Access value to\
    \ identify CMC servers, and the registration of a port\n   number for TCP/IP for\
    \ the CMC service to run on.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6402.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Requirements Terminology . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Abbreviations  . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   2.  Updates to RFC 5272 - \"Certificate Management over CMS\n\
    \       (CMC)\" . . . . . . . . . . . . . . . . . . . . . . . . . . . .  3\n \
    \    2.1.  New Section 1.3 - \"Updates Made by RFC 6402\" . . . . . . .  3\n \
    \    2.2.  Update Section 6 - \"Controls\"  . . . . . . . . . . . . . .  4\n \
    \    2.3.  Replace Section 6.3 - \"Linking Identity and POP\n           Information\"\
    \ . . . . . . . . . . . . . . . . . . . . . . .  4\n     2.4.  Replace Section\
    \ 6.3.3 - \"Renewal and Rekey Messages\" . . .  5\n     2.5.  New Section 6.20\
    \ - \"RA Identity Proof Witness Control\" . .  5\n     2.6.  New Section 6.21\
    \ - \"Response Body Control\" . . . . . . . .  7\n     2.7.  New Section 7 - \"\
    Other Attributes\" . . . . . . . . . . . .  8\n     2.8.  New Section 7.1 - \"\
    Change Subject Name Attribute\"  . . . .  8\n     2.9.  New Section 9 - \"Certificate\
    \ Requirements\" . . . . . . . . 10\n     2.10. New Section 9.1 - \"Extended Key\
    \ Usage\" . . . . . . . . . . 10\n     2.11. New Section 9.2 - \"Subject Information\
    \ Access\" . . . . . . 11\n     2.12. Update Section 8 - \"Security Considerations\"\
    \ . . . . . . . 11\n   3.  Updates to RFC 5273 - \"Certificate Management over\
    \ CMS\n       (CMC): Transport Protocols\"  . . . . . . . . . . . . . . . . .\
    \ 12\n     3.1.  Update Section 5 - \"TCP-Based Protocol\"  . . . . . . . . .\
    \ 12\n     3.2.  New Section 6 - \"IANA Considerations\"  . . . . . . . . . .\
    \ 12\n   4.  Updates to RFC 5274 - \"Certificate Management Message over\n   \
    \    CMS (CMC): Compliance Requirements\"  . . . . . . . . . . . . . 13\n    \
    \ 4.1.  Update to Section 4.2 - \"Controls\" . . . . . . . . . . . . 13\n   5.\
    \  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 13\n   6.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 13\n   7.  References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n     7.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . . . 13\n     7.2.  Informative\
    \ References . . . . . . . . . . . . . . . . . . 14\n   Appendix A.  ASN.1 Modules\
    \ . . . . . . . . . . . . . . . . . . . . 15\n     A.1.  1988 ASN.1 Module  .\
    \ . . . . . . . . . . . . . . . . . . . 15\n     A.2.  2008 ASN.1 Module  . .\
    \ . . . . . . . . . . . . . . . . . . 24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   While dealing with the Suite B profile of CMC [RFC6403],\
    \ a number of\n   deficiencies were noted in the current base CMC specification.\
    \  This\n   document has a set of updates to [RFC5272], [RFC5273], and [RFC5274]\n\
    \   to deal with those issues.\n"
- title: 1.1.  Requirements Terminology
  contents:
  - "1.1.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  Abbreviations
  contents:
  - "1.2.  Abbreviations\n   The following abbreviations are used in this document.\
    \  Terms are\n   used as defined in Section 2.1 of RFC 5272.\n      CA   - Certification\
    \ Authority\n      CRL  - Certificate Revocation List\n      CRMF - Certificate\
    \ Request Message Format\n      EE   - End-Entity\n      MAC  - Message Authentication\
    \ Code\n      PKI  - Public Key Infrastructure\n      RA   - Registration Authority\n"
- title: 2.  Updates to RFC 5272 - "Certificate Management over CMS (CMC)"
  contents:
  - '2.  Updates to RFC 5272 - "Certificate Management over CMS (CMC)"

    '
- title: 2.1.  New Section 1.3 - "Updates Made by RFC 6402"
  contents:
  - "2.1.  New Section 1.3 - \"Updates Made by RFC 6402\"\n   Insert this section\
    \ before the current Section 1.3.\n   The following updates were made by RFC 6402.\n\
    \   o  Add new controls:\n      RA Identity Witness  allows for an RA to perform\
    \ identity checking\n         using the identity and shared-secret, and then tell\
    \ any\n         following servers that the identity check was successfully\n \
    \        performed.\n      Response Body  allows for an RA to identify a nested\
    \ response for\n         an EE to process.\n   o  Create a new attribute, Change\
    \ Subject Name, that allows a client\n      to request a change in the subject\
    \ name and subject alternate name\n      fields in a certificate.\n   o  Add Extended\
    \ Key Usages for CMC to distinguish server types.\n   o  Define a new Subject\
    \ Information Access type to hold locations to\n      contact the CMC server.\n\
    \   o  Clarify that the use of a pre-existing certificate is not limited\n   \
    \   to just renewal and rekey messages and is required for support.\n      This\
    \ formalizes a requirement for the ability to do renewal and\n      rekey that\
    \ previously was implicit.\n"
- title: 2.2.  Update Section 6 - "Controls"
  contents:
  - "2.2.  Update Section 6 - \"Controls\"\n   Update Table 1 by adding the following\
    \ rows:\n   +--------------------------+-----------+-----------------+---------+\n\
    \   | Identifier Description   | OID       | ASN.1 Structure | Section |\n   +--------------------------+-----------+-----------------+---------+\n\
    \   | id-cmc-raIdentityWitness | id-cmc 35 | BodyPartPath    | 6.20    |\n   |\
    \                          |           |                 |         |\n   | id-cmc-responseBody\
    \      | id-cmc 37 | BodyPartPath    | 6.21    |\n   +--------------------------+-----------+-----------------+---------+\n\
    \                Addition to Table 1: CMC Control Attributes\n"
- title: 2.3.  Replace Section 6.3 - "Linking Identity and POP Information"
  contents:
  - "2.3.  Replace Section 6.3 - \"Linking Identity and POP Information\"\n   Replace\
    \ the text of the section with the following text.\n   In a CMC Full PKI Request,\
    \ identity proof information about the\n   client is carried in the certificate\
    \ associated with the signature of\n   the SignedData containing the certification\
    \ requests, one of the two\n   identity proof controls or the MAC computed for\
    \ the AuthenticatedData\n   containing the certification requests.  Proof-of-possession\
    \ (POP)\n   information for key pairs, however, is carried separately for each\n\
    \   PKCS #10 or CRMF certification request.  (For keys capable of\n   generating\
    \ a digital signature, the POP is provided by the signature\n   on the PKCS #10\
    \ or CRMF request.  For encryption-only keys, the\n   controls described in Section\
    \ 6.7 are used.)  In order to prevent\n   substitution-style attacks, the protocol\
    \ must guarantee that the same\n   entity supplied both the POP and proof-of-identity\
    \ information.\n   We describe three mechanisms for linking identity and POP\n\
    \   information: witness values cryptographically derived from a shared-\n   secret\
    \ (Section 6.3.1), shared-secret/subject name matching (Section\n   6.3.2), and\
    \ subject name matching to an existing certificate (Section\n   6.3.3).  Clients\
    \ and servers MUST support the witness value and the\n   certificate linking techniques.\
    \  Clients and servers MAY support\n   shared-secret/name matching or MAY support\
    \ other bilateral techniques\n   of similar strength.  The idea behind the first\
    \ two mechanisms is to\n   force the client to sign some data into each certification\
    \ request\n   that can be directly associated with the shared-secret; this will\n\
    \   defeat attempts to include certification requests from different\n   entities\
    \ in a single Full PKI Request.\n"
- title: 2.4.  Replace Section 6.3.3 - "Renewal and Rekey Messages"
  contents:
  - "2.4.  Replace Section 6.3.3 - \"Renewal and Rekey Messages\"\n   Make the new\
    \ section title \"Existing Certificate Linking\".  Replace\n   all text in this\
    \ section with this text.\n   Linking between the POP and an identity is easy\
    \ when an existing\n   certificate is used.  The client copies all of the naming\
    \ information\n   from the existing certificate (subject name and subject alternative\n\
    \   name) into the new certification request.  The POP on the new public\n   key\
    \ is then performed by using the new key to sign the identity\n   information\
    \ (linking the POP to a specific identity).  The identity\n   information is then\
    \ tied to the POP information by signing the entire\n   enrollment request with\
    \ the private key of the existing certificate.\n   Existing certificate linking\
    \ can be used in the following\n   circumstances:\n      When replacing a certificate\
    \ by doing a renewal or rekey\n      certification request.\n      Using an existing\
    \ certificate to get a new certificate.  An\n      example of this would be to\
    \ get a key establishment certificate\n      after having gotten a signature certificate.\n\
    \      Using a third-party certificate to get a new certificate from a\n     \
    \ CA.  An example of this would be using a certificate and key pair\n      distributed\
    \ with a device to prove an identity.  This requires\n      that the CA have an\
    \ out-of-band channel to map the identity in the\n      device certificate to\
    \ the new EE identity.\n"
- title: 2.5.  New Section 6.20 - "RA Identity Proof Witness Control"
  contents:
  - "2.5.  New Section 6.20 - \"RA Identity Proof Witness Control\"\n   Insert this\
    \ section.\n   The RA Identity Proof Witness control allows an RA to indicate\
    \ to\n   subsequent control processors that all of the identity proof\n   requirements\
    \ have been met.  This permits the identity proof to be\n   performed at a location\
    \ closer to the end-entity.  For example, the\n   identity proof could be done\
    \ at multiple physical locations, while\n   the CA could operate on a company-wide\
    \ basis.  The RA performs the\n   identity proof, and potentially other tasks\
    \ that require the secret\n   to be used, while the CA is prevented from knowing\
    \ the secret.  If\n   the identity proof fails, then the RA returns an error to\
    \ the client\n   denoting that fact.\n   The relevant ASN.1 for the RA Identity\
    \ Proof Witness control is as\n   follows:\n      cmc-raIdentityWitness CMC-CONTROL\
    \ ::=\n         { BodyPartPath IDENTIFIED BY id-cmc-raIdentityWitness }\n    \
    \  id-cmc-raIdentityWitness OBJECT IDENTIFIER ::= {id-cmc 35}\n   The above ASN.1\
    \ defines the following items:\n   cmc-raIdentityWitness  is a CMC-CONTROL associating\
    \ the object\n      identifier id-cmc-raIdentityWitness and the type BodyPartPath.\n\
    \      This object is omitted from the 1988 module.  The object is added\n   \
    \   to the object set Cmc-Control-Set.  The control is permitted to\n      appear\
    \ only in the control sequence of a PKIData object.  It MUST\n      NOT appear\
    \ in the control sequence of a PKIResponse.  The control\n      is permitted to\
    \ be used only by an RA.  The control may appear\n      multiple times in a control\
    \ sequence with each occurrence pointing\n      to a different object.\n   id-cmc-raIdentityWitness\
    \  is the object identifier used to identify\n      this CMC control.\n   BodyPartPath\
    \  is the type structure associated with the control.  The\n      syntax of BodyPartPath\
    \ is defined in Section 3.2.2.  The path\n      contains a sequence of body part\
    \ identifiers leading to one of the\n      following items:\n      Identity Proof\
    \ control  if the RA verified the identity proof in\n         this control.\n\
    \      Identity Proof Version 2 control  if the RA verified the identity\n   \
    \      proof in this control.\n      Full PKI Request  if the RA performed an\
    \ out-of-band identity\n         proof for this request.  The request SHOULD NOT\
    \ contain either\n         Identity Proof control.\n      Simple PKI Request \
    \ if the RA performed an out-of-band identity\n         proof for this request.\n\
    \   The RA Identity Proof Witness control will frequently be associated\n   with\
    \ a Modify Certification Request control, which changes the name\n   fields in\
    \ the associated certification requests.  This is because the\n   RA knows the\
    \ actual name to be assigned to the entity requesting the\n   certificate, and\
    \ the end-entity does not yet have the details of the\n   name.  (The association\
    \ would be set up by the operator at the time\n   the shared-secret was generated\
    \ by the RA.)\n   When this control is placed in a message, it is RECOMMENDED\
    \ that the\n   Control Processed control be placed in the body sequence as well.\n\
    \   Using the explicit new control, rather than implicitly relying on the\n  \
    \ Control Processed control is important due to the need to know\n   explicitly\
    \ which identity proofs have been performed.  The new\n   control also allows\
    \ an RA to state that out-of-band identity proofs\n   have been performed.\n \
    \  When the identity proof is performed by an RA, the RA also MUST\n   validate\
    \ the linking between the identity proof and the name\n   information wrapped\
    \ inside of the key proof-of-possession.\n"
- title: 2.6.  New Section 6.21 - "Response Body Control"
  contents:
  - "2.6.  New Section 6.21 - \"Response Body Control\"\n   Insert this section.\n\
    \   The Response Body Control is designed to enable an RA to inform an EE\n  \
    \ that there is an embedded response message that MUST be processed as\n   part\
    \ of the processing of this message.  This control is designed to\n   be used\
    \ in a couple of different cases where an RA has done some\n   additional processing\
    \ for the certification request, e.g., as key\n   generation.  When an RA performs\
    \ key generation on behalf of an EE,\n   the RA MUST respond with both the original\
    \ response message from the\n   certificate issuer (containing the certificate\
    \ issuance) as part of\n   the response generated by the RA (containing the new\
    \ key).  Another\n   case where this is useful is when the secret is shared between\
    \ the RA\n   and the EE (rather than between the CA and the EE) and the RA returns\n\
    \   the Publish Trust Anchors control (to populate the correct trust\n   points).\n\
    \   The relevant ASN.1 for the Response Body Control is as follows:\n     cmc-responseBody\
    \ CMC-CONTROL ::= {\n        BodyPartPath IDENTIFIED BY id-cmc-responseBody\n\
    \     }\n     id-cmc-responseBody OBJECT IDENTIFIER ::= {id-cmc 37}\n   The above\
    \ ASN.1 defines the following items:\n   cmc-responseBody  is a CMC-CONTROL associating\
    \ the object identifier\n      id-cmc-responseBody with the type BodyPartPath.\
    \  This object is\n      omitted from the 1988 module.  The object is added to\
    \ the object\n      set Cmc-Control-Set.  The control is permitted to appear only\
    \ in\n      the control sequence of a PKIResponse.  The control MUST NOT\n   \
    \   appear in the control sequence of a PKIData.  It is expected that\n      only\
    \ an intermediary RA will use this control; a CA generally does\n      not need\
    \ the control as it is creating the original innermost\n      message.\n   id-cmc-responseBody\
    \  is the object identifier used to identify this\n      CMC control.\n   BodyPartPath\
    \  is the type structure associated with the control.  The\n      syntax of BodyPartPath\
    \ is defined in Section 3.2.2.  The path\n      contains a sequence of body part\
    \ identifiers leading to a\n      cmsSequence item which contains a PKIResponse\
    \ within it.\n"
- title: 2.7.  New Section 7 - "Other Attributes"
  contents:
  - "2.7.  New Section 7 - \"Other Attributes\"\n   Insert this section before the\
    \ current Section 7.\n   There are a number of different locations where various\
    \ types of\n   attributes can be placed in either a CMC request or a CMC response\n\
    \   message.  These places include the attribute sequence of a PKCS #10\n   request,\
    \ controls in CRMF (Section 6 of [RFC4211]), and the various\n   CMS attribute\
    \ sequences.\n"
- title: 2.8.  New Section 7.1 - "Change Subject Name Attribute"
  contents:
  - "2.8.  New Section 7.1 - \"Change Subject Name Attribute\"\n   Insert this section.\n\
    \   The Client Name Change Request attribute is designed for a client to\n   ask\
    \ for a change in its name as part of a certification request.\n   Because of\
    \ security issues, this cannot be done in the simple way of\n   just changing\
    \ the requested subject name in the certificate template.\n   The name in the\
    \ certification request MUST match the name in the\n   certificate used to verify\
    \ the request, in order that identity and\n   possession proofs are correctly\
    \ applied.\n   The relevant ASN.1 for the Client Name Change Request attribute\
    \ is as\n   follows:\n      at-cmc-changeSubjectName ATTRIBUTE ::=\n         {\
    \ ChangeSubjectName IDENTIFIED BY id-cmc-changeSubjectName }\n      id-cmc-changeSubjectName\
    \ OBJECT IDENTIFIER ::= {id-cmc 36}\n      ChangeSubjectName ::= SEQUENCE {\n\
    \          subject             Name OPTIONAL,\n          subjectAlt          SubjectAltName\
    \ OPTIONAL\n      }\n      (WITH COMPONENTS {..., subject PRESENT} |\n       \
    \     COMPONENTS {..., subjectAlt PRESENT} )\n   The attribute is designed to\
    \ be used as an ATTRIBUTE object.  As\n   such, the attribute is placed in one\
    \ of the following two places:\n      The attributes field in a CertificationRequest.\n\
    \      The controls field of a CertRequest for a CRMF certification\n      request.\n\
    \   The control is identified by the Object Identifier\n   id-cmc-changeSubjectName.\n\
    \   The ASN.1 type associated with control is ChangeSubjectName.  The\n   fields\
    \ of the structure are configured as follows:\n   subject  contains the requested\
    \ subject name for the new certificate.\n   subjectAlt  contains the requested\
    \ subject alternative name for the\n      new certificate.\n   At least one of\
    \ the fields in the sequence MUST be present when\n   encoding the structure.\n\
    \   When the CA processes this attribute in a certification request, it\n   will\
    \ do the following:\n   1.  If present, the subject field is copied to the name\
    \ field of the\n       template.  If the subject field is absent, the name field\
    \ of the\n       template will be set to a empty sequence.\n   2.  If present,\
    \ the subjectAlt field is used as the content of a\n       SubjectAltName extension\
    \ in the certificate.  If the subjectAlt\n       field is absent, the subjectAltName\
    \ extension is removed from the\n       certificate template.\n"
- title: 2.9.  New Section 9 - "Certificate Requirements"
  contents:
  - "2.9.  New Section 9 - \"Certificate Requirements\"\n   Insert this section before\
    \ the current Section 8.\n   Certificates for servers used in the CMC protocol\
    \ SHOULD conform to\n   the profile defined in [RFC5280].  This document defines\
    \ some\n   additional items that MAY appear in CMC server certificates.  Section\n\
    \   9.1 defines some additional values for the Extended Key Usage\n   extension.\
    \  Section 9.2 defines a new Subject Information Access\n   value that allows\
    \ for a CMC certificate to publish information on how\n   to contact the services\
    \ it provides.\n"
- title: 2.10.  New Section 9.1 - "Extended Key Usage"
  contents:
  - "2.10.  New Section 9.1 - \"Extended Key Usage\"\n   Insert this section.\n  \
    \ The Extended Key Usage (EKU) extension is used to restrict the use of\n   a\
    \ certificate to specific applications.  We define three different\n   EKUs in\
    \ this document.  The ASN.1 to define these EKUs is:\n      id-kp-cmcCA OBJECT\
    \ IDENTIFIER ::= { id-kp 27 }\n      id-kp-cmcRA OBJECT IDENTIFIER ::= { id-kp\
    \ 28 }\n      id-kp-cmcArchive OBJECT IDENTIFIER ::= { id-kp 29 }\n   The usage\
    \ description for each of the EKUs is as follows:\n   CMC Certification Authorities\
    \  are identified by the id-kp-cmcCA\n      extended key usage.  The certificate\
    \ may be the same as or\n      different than the CA certificate.  If a different\
    \ certificate is\n      used, the certificates containing the id-kp-cmcCA extended\
    \ key\n      usage SHOULD have the same name as the certificate used for\n   \
    \   issuing the certificates.  (Using a separate key pair for CMC\n      protocol\
    \ operations and for issuing certificates and CRLs\n      decreases the number\
    \ of operations for which the private key used\n      to sign certificates and\
    \ CRLs would be used.)\n   CMC Registration Authorities  are identified by the\
    \ id-kp-cmcRA\n      extended key usage.  This usage is placed into RA certificates.\n\
    \   CMC Archive Servers  are identified by the id-kp-cmcArchive extended\n   \
    \   key usage.  CMC Archive Servers and the associated protocol are to\n     \
    \ be defined in a future document.\n"
- title: 2.11.  New Section 9.2 - "Subject Information Access"
  contents:
  - "2.11.  New Section 9.2 - \"Subject Information Access\"\n   Insert this section.\n\
    \   The subject information access extension indicates how to access\n   information\
    \ and services for the subject of the certificate.  We\n   define a new value\
    \ for use in this extension, to identify the\n   different locations that CMC\
    \ services will be available.  If this\n   value is placed in a certificate, an\
    \ appropriate extended key usage\n   defined in Section 9.1 MUST be included in\
    \ the certificate as well.\n   The id-ad-cmc OID is used when the subject offers\
    \ certification\n   services using the CMC protocol.  If the CMC services are\
    \ available\n   via HTTP or FTP, accessLocation MUST be a uniformResourceIdentifier.\n\
    \   If the CMC services are available via electronic mail, accessLocation\n  \
    \ MUST be an rfc822Name.  If CMC services are available using TCP/IP,\n   the\
    \ dNSName or iPAddress name forms MUST be used.  Since the\n   GeneralName data\
    \ structure does not permit the inclusion of a port\n   number, in the absence\
    \ of other external configuration information,\n   the value of 5318 should be\
    \ used.  (The port registration is in\n   Section 3.2.)  The semantics of other\
    \ name forms of accessLocation\n   (when accessMethod is id-ad-cmc) are not defined\
    \ by this\n   specification.\n   The ASN.1 type for this extension is GeneralName\
    \ (see Section 4.2.1.8\n   of [RFC5280]).\n   id-ad-cmc OBJECT IDENTIFIER ::=\
    \ { id-ad 12 }\n"
- title: 2.12.  Update Section 8 - "Security Considerations"
  contents:
  - "2.12.  Update Section 8 - \"Security Considerations\"\n   Add the following paragraphs\
    \ to the end of Section 8.\n   A number of controls such as the RA Identity Proof\
    \ Witness control\n   exist for an RA to either make assertions about or modify\
    \ a\n   certification request.  Any upstream request processor, such as a CA,\n\
    \   MUST verify that the RA is fully identified and authorized to make\n   the\
    \ assertion or modification it is claiming.  If it is not\n   identified or authorized,\
    \ then any request MUST be rejected.\n   CMC servers, both RAs and CAs, need to\
    \ perform due diligence in\n   checking the contents of a certification request.\
    \  At an absolute\n   minimum, all fields should be checked to ensure that the\
    \ policies of\n   the CA/RA are correctly enforced.  While all fields need to\
    \ be\n   checked, special care should be taken with names, name forms,\n   algorithm\
    \ choices, and algorithm parameters.\n"
- title: '3.  Updates to RFC 5273 - "Certificate Management over CMS (CMC):'
  contents:
  - "3.  Updates to RFC 5273 - \"Certificate Management over CMS (CMC):\n    Transport\
    \ Protocols\"\n"
- title: 3.1.  Update Section 5 - "TCP-Based Protocol"
  contents:
  - "3.1.  Update Section 5 - \"TCP-Based Protocol\"\n   Replace paragraph 3 in Section\
    \ 5 with the following.\n   CMC requires a registered port number to send and\
    \ receive CMC\n   messages over TCP.  The title of this IP Protocol number is\n\
    \   \"pkix-cmc\".  The value of this TCP port is 5318.\n   Prior to this update,\
    \ CMC did not have a registered port number and\n   used an externally configured\
    \ port from the Private Port range.\n   Client implementations MAY want to continue\
    \ to allow for this to\n   occur.  Servers SHOULD change to use the new port.\
    \  It is expected\n   that HTTP will continue to be the primary transport method\
    \ used by\n   CMC installations.\n"
- title: 3.2.  New Section 6 - "IANA Considerations"
  contents:
  - "3.2.  New Section 6 - \"IANA Considerations\"\n   Insert this new section before\
    \ the current Section 6.\n   IANA has assigned a TCP port number in the Registered\
    \ Port Number\n   range for the use of CMC.\n   Service name: pkix-cmc\n   Port\
    \ Number: 5318\n   Transport protocol: TCP\n   Description: PKIX Certificate Management\
    \ using CMS (CMC)\n   Reference: RFC 6402\n   Assignee: iesg@ietf.org\n   Contact:\
    \ chair@ietf.org\n"
- title: 4.  Updates to RFC 5274 - "Certificate Management Message over CMS
  contents:
  - "4.  Updates to RFC 5274 - \"Certificate Management Message over CMS\n    (CMC):\
    \ Compliance Requirements\"\n"
- title: 4.1.  Update to Section 4.2 - "Controls"
  contents:
  - "4.1.  Update to Section 4.2 - \"Controls\"\n   Add the following lines to the\
    \ end of Table 1.\n   The following table lists the name and level of support\
    \ required for\n   each control.\n             +---------------------------+-----+------+-----+\n\
    \             | Control                   | EE  | RA   | CA  |\n             +---------------------------+-----+------+-----+\n\
    \             | RA Identity Proof Witness | N/A | MUST | (2) |\n             |\
    \                           |     |      |     |\n             | Response Body\
    \             | (6) | (6)  | N/A |\n             +---------------------------+-----+------+-----+\n\
    \                Addition to Table 1: CMC Control Attributes\n   The following\
    \ note should be added.\n   6. EE's SHOULD implement if designed to work with\
    \ RAs and MUST\n      implement if intended to be used in environments where RAs\
    \ are\n      used for identity validation or key generation.  RAs SHOULD\n   \
    \   implement and validate responses for consistency.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document contains a new IANA Considerations\
    \ section to be added\n   to [RFC5273] as part of this update.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   No changes are made to the existing security\
    \ considerations of RFC\n   5273 and RFC 5274.  The security considerations for\
    \ RFC 5272 have\n   been slightly modified (Section 2.12).\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC5272]     Schaad, J. and M. Myers, \"Certificate Management\
    \ over\n                 CMS (CMC)\", RFC 5272, June 2008.\n   [RFC5273]     Schaad,\
    \ J. and M. Myers, \"Certificate Management over\n                 CMS (CMC):\
    \ Transport Protocols\", RFC 5273, June 2008.\n   [RFC5274]     Schaad, J. and\
    \ M. Myers, \"Certificate Management\n                 Messages over CMS (CMC):\
    \ Compliance Requirements\",\n                 RFC 5274, June 2008.\n   [RFC5280]\
    \     Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n                 Housley,\
    \ R., and W. Polk, \"Internet X.509 Public Key\n                 Infrastructure\
    \ Certificate and Certificate Revocation\n                 List (CRL) Profile\"\
    , RFC 5280, May 2008.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [CMS]         Housley, R., \"Cryptographic Message\
    \ Syntax (CMS)\",\n                 STD 70, RFC 5652, September 2009.\n   [RFC6403]\
    \     Zieglar, L., Turner, S., and M. Peck, \"Suite B Profile\n              \
    \   of Certificate Management over CMS\", RFC 6403, November\n               \
    \  2011.\n   [RFC4211]     Schaad, J., \"Internet X.509 Public Key Infrastructure\n\
    \                 Certificate Request Message Format (CRMF)\", RFC 4211,\n   \
    \              September 2005.\n   [RFC5912]     Hoffman, P. and J. Schaad, \"\
    New ASN.1 Modules for the\n                 Public Key Infrastructure Using X.509\
    \ (PKIX)\",\n                 RFC 5912, June 2010.\n"
- title: Appendix A.  ASN.1 Modules
  contents:
  - 'Appendix A.  ASN.1 Modules

    '
- title: A.1.  1988 ASN.1 Module
  contents:
  - "A.1.  1988 ASN.1 Module\n   This section contains the updated ASN.1 module for\
    \ [RFC5272].  This\n   module replaces the module in Appendix A of that document.\
    \  Although\n   a 2008 ASN.1 module is provided, this remains the normative module\
    \ as\n   per the policy of the PKIX working group.\n   EnrollmentMessageSyntax-2011-v88\n\
    \    { iso(1) identified-organization(3) dod(6) internet(1)\n      security(5)\
    \ mechanisms(5) pkix(7) id-mod(0)\n      id-mod-enrollMsgSyntax-2011-88(76) }\n\
    \   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n    -- EXPORTS All --\n    -- The\
    \ types and values defined in this module are exported for use\n    -- in the\
    \ other ASN.1 modules.  Other applications may use them for\n    -- their own\
    \ purposes.\n    IMPORTS\n      -- PKIX Part 1 - Implicit    From [RFC5280]\n\
    \         GeneralName, CRLReason, ReasonFlags, GeneralNames\n         FROM PKIX1Implicit88\
    \ {iso(1) identified-organization(3) dod(6)\n                 internet(1) security(5)\
    \ mechanisms(5) pkix(7) id-mod(0)\n                 id-pkix1-implicit(19)}\n \
    \     -- PKIX Part 1 - Explicit    From [RFC5280]\n         AlgorithmIdentifier,\
    \ Extension, Name, CertificateSerialNumber,\n         id-ad, id-kp\n         FROM\
    \ PKIX1Explicit88 {iso(1) identified-organization(3) dod(6)\n                \
    \ internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n                 id-pkix1-explicit(18)}\n\
    \      -- Cryptographic Message Syntax   FROM [CMS]\n         ContentInfo, Attribute,\
    \ IssuerAndSerialNumber\n           FROM CryptographicMessageSyntax2004 { iso(1)\
    \ member-body(2)\n                us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n\
    \                modules(0) cms-2004(24)}\n    -- CRMF                       \
    \  FROM [RFC4211]\n       CertReqMsg, PKIPublicationInfo, CertTemplate\n     \
    \  FROM PKIXCRMF-2005 {iso(1) identified-organization(3) dod(6)\n            \
    \  internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n              id-mod-crmf2005(36)};\n\
    \      -- Global Types\n         -- UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET\
    \ STRING\n           -- The content of this type conforms to RFC 3629.\n     id-pkix\
    \ OBJECT IDENTIFIER  ::= { iso(1) identified-organization(3)\n         dod(6)\
    \ internet(1) security(5) mechanisms(5) pkix(7) }\n    id-cmc OBJECT IDENTIFIER\
    \ ::= {id-pkix 7}   -- CMC controls\n    id-cct OBJECT IDENTIFIER ::= {id-pkix\
    \ 12}  -- CMC content types\n    -- The following controls have the type OCTET\
    \ STRING\n    id-cmc-identityProof OBJECT IDENTIFIER ::= {id-cmc 3}\n    id-cmc-dataReturn\
    \ OBJECT IDENTIFIER ::= {id-cmc 4}\n    id-cmc-regInfo OBJECT IDENTIFIER ::= {id-cmc\
    \ 18}\n    id-cmc-responseInfo OBJECT IDENTIFIER ::= {id-cmc 19}\n    id-cmc-queryPending\
    \ OBJECT IDENTIFIER ::= {id-cmc 21}\n    id-cmc-popLinkRandom OBJECT IDENTIFIER\
    \ ::= {id-cmc 22}\n    id-cmc-popLinkWitness OBJECT IDENTIFIER ::= {id-cmc 23}\n\
    \    -- The following controls have the type UTF8String\n    id-cmc-identification\
    \ OBJECT IDENTIFIER ::= {id-cmc 2}\n    -- The following controls have the type\
    \ INTEGER\n    id-cmc-transactionId OBJECT IDENTIFIER ::= {id-cmc 5}\n    -- The\
    \ following controls have the type OCTET STRING\n    id-cmc-senderNonce OBJECT\
    \ IDENTIFIER ::= {id-cmc 6}\n    id-cmc-recipientNonce OBJECT IDENTIFIER ::= {id-cmc\
    \ 7}\n    -- This is the content type used for a request message\n    --     in\
    \ the protocol\n    id-cct-PKIData OBJECT IDENTIFIER ::= { id-cct 2 }\n    PKIData\
    \ ::= SEQUENCE {\n        controlSequence    SEQUENCE SIZE(0..MAX) OF TaggedAttribute,\n\
    \        reqSequence        SEQUENCE SIZE(0..MAX) OF TaggedRequest,\n        cmsSequence\
    \        SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,\n        otherMsgSequence\
    \   SEQUENCE SIZE(0..MAX) OF OtherMsg\n    }\n     bodyIdMax INTEGER ::= 4294967295\n\
    \     BodyPartID ::= INTEGER(0..bodyIdMax)\n    TaggedAttribute ::= SEQUENCE {\n\
    \        bodyPartID         BodyPartID,\n        attrType           OBJECT IDENTIFIER,\n\
    \        attrValues         SET OF AttributeValue\n    }\n     AttributeValue\
    \ ::= ANY\n     TaggedRequest ::= CHOICE {\n         tcr               [0] TaggedCertificationRequest,\n\
    \         crm               [1] CertReqMsg,\n         orm               [2] SEQUENCE\
    \ {\n             bodyPartID            BodyPartID,\n             requestMessageType\
    \    OBJECT IDENTIFIER,\n             requestMessageValue   ANY DEFINED BY requestMessageType\n\
    \         }\n     }\n     TaggedCertificationRequest ::= SEQUENCE {\n        \
    \ bodyPartID            BodyPartID,\n         certificationRequest  CertificationRequest\n\
    \     }\n     CertificationRequest ::= SEQUENCE {\n       certificationRequestInfo\
    \  SEQUENCE {\n         version                   INTEGER,\n         subject \
    \                  Name,\n         subjectPublicKeyInfo      SEQUENCE {\n    \
    \       algorithm                 AlgorithmIdentifier,\n           subjectPublicKey\
    \          BIT STRING },\n         attributes                [0] IMPLICIT SET\
    \ OF Attribute },\n       signatureAlgorithm        AlgorithmIdentifier,\n   \
    \    signature                 BIT STRING\n     }\n    TaggedContentInfo ::= SEQUENCE\
    \ {\n        bodyPartID              BodyPartID,\n        contentInfo        \
    \     ContentInfo\n    }\n    OtherMsg ::= SEQUENCE {\n        bodyPartID    \
    \    BodyPartID,\n        otherMsgType      OBJECT IDENTIFIER,\n        otherMsgValue\
    \     ANY DEFINED BY otherMsgType }\n    --  This defines the response message\
    \ in the protocol\n    id-cct-PKIResponse OBJECT IDENTIFIER ::= { id-cct 3 }\n\
    \    ResponseBody ::= PKIResponse\n    PKIResponse ::= SEQUENCE {\n        controlSequence\
    \   SEQUENCE SIZE(0..MAX) OF TaggedAttribute,\n        cmsSequence       SEQUENCE\
    \ SIZE(0..MAX) OF TaggedContentInfo,\n        otherMsgSequence  SEQUENCE SIZE(0..MAX)\
    \ OF OtherMsg\n    }\n    -- Used to return status state in a response\n    id-cmc-statusInfo\
    \ OBJECT IDENTIFIER ::= {id-cmc 1}\n    CMCStatusInfo ::= SEQUENCE {\n       \
    \ cMCStatus       CMCStatus,\n        bodyList        SEQUENCE SIZE (1..MAX) OF\
    \ BodyPartID,\n        statusString    UTF8String OPTIONAL,\n        otherInfo\
    \        CHOICE {\n          failInfo         CMCFailInfo,\n          pendInfo\
    \         PendInfo } OPTIONAL\n    }\n    PendInfo ::= SEQUENCE {\n        pendToken\
    \        OCTET STRING,\n        pendTime         GeneralizedTime\n    }\n    CMCStatus\
    \ ::= INTEGER {\n        success         (0),\n        failed          (2),\n\
    \        pending         (3),\n        noSupport       (4),\n        confirmRequired\
    \ (5),\n        popRequired     (6),\n        partial                (7)\n   \
    \ }\n    -- Note:\n    -- The spelling of unsupportedExt is corrected in this\
    \ version.\n    -- In RFC 2797, it was unsuportedExt.\n    CMCFailInfo ::= INTEGER\
    \ {\n        badAlg          (0),\n        badMessageCheck (1),\n        badRequest\
    \      (2),\n        badTime         (3),\n        badCertId       (4),\n    \
    \    unsupportedExt  (5),\n        mustArchiveKeys (6),\n        badIdentity \
    \    (7),\n        popRequired     (8),\n        popFailed       (9),\n      \
    \  noKeyReuse      (10),\n        internalCAError (11),\n        tryLater    \
    \    (12),\n        authDataFail    (13)\n    }\n    -- Used for RAs to add extensions\
    \ to certification requests\n    id-cmc-addExtensions OBJECT IDENTIFIER ::= {id-cmc\
    \ 8}\n    AddExtensions ::= SEQUENCE {\n        pkiDataReference    BodyPartID,\n\
    \        certReferences      SEQUENCE OF BodyPartID,\n        extensions     \
    \     SEQUENCE OF Extension\n    }\n    id-cmc-encryptedPOP OBJECT IDENTIFIER\
    \ ::= {id-cmc 9}\n    id-cmc-decryptedPOP OBJECT IDENTIFIER ::= {id-cmc 10}\n\
    \    EncryptedPOP ::= SEQUENCE {\n        request       TaggedRequest,\n     \
    \   cms             ContentInfo,\n        thePOPAlgID     AlgorithmIdentifier,\n\
    \        witnessAlgID    AlgorithmIdentifier,\n        witness         OCTET STRING\n\
    \    }\n    DecryptedPOP ::= SEQUENCE {\n        bodyPartID      BodyPartID,\n\
    \        thePOPAlgID     AlgorithmIdentifier,\n        thePOP          OCTET STRING\n\
    \    }\n     id-cmc-lraPOPWitness OBJECT IDENTIFIER ::= {id-cmc 11}\n     LraPopWitness\
    \ ::= SEQUENCE {\n         pkiDataBodyid   BodyPartID,\n         bodyIds     \
    \    SEQUENCE OF BodyPartID\n     }\n    --\n    id-cmc-getCert OBJECT IDENTIFIER\
    \ ::= {id-cmc 15}\n    GetCert ::= SEQUENCE {\n        issuerName      GeneralName,\n\
    \        serialNumber    INTEGER }\n    id-cmc-getCRL OBJECT IDENTIFIER ::= {id-cmc\
    \ 16}\n    GetCRL ::= SEQUENCE {\n        issuerName    Name,\n        cRLName\
    \       GeneralName OPTIONAL,\n        time          GeneralizedTime OPTIONAL,\n\
    \        reasons       ReasonFlags OPTIONAL }\n    id-cmc-revokeRequest OBJECT\
    \ IDENTIFIER ::= {id-cmc 17}\n    RevokeRequest ::= SEQUENCE {\n        issuerName\
    \            Name,\n        serialNumber          INTEGER,\n        reason   \
    \             CRLReason,\n        invalidityDate        GeneralizedTime OPTIONAL,\n\
    \        passphrase            OCTET STRING OPTIONAL,\n        comment       \
    \        UTF8String OPTIONAL }\n    id-cmc-confirmCertAcceptance OBJECT IDENTIFIER\
    \ ::= {id-cmc 24}\n    CMCCertId ::= IssuerAndSerialNumber\n    -- The following\
    \ is used to request V3 extensions be added to a\n    -- certificate\n    id-ExtensionReq\
    \ OBJECT IDENTIFIER ::= {iso(1) member-body(2)\n         us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) 14}\n    ExtensionReq ::= SEQUENCE SIZE (1..MAX) OF Extension\n\
    \    -- The following exists to allow Diffie-Hellman Certification\n    -- Request\
    \ Messages to be well-formed\n    id-alg-noSignature OBJECT IDENTIFIER ::= {id-pkix\
    \ id-alg(6) 2}\n    NoSignatureValue ::= OCTET STRING\n    --  Unauthenticated\
    \ attribute to carry removable data.\n    --    This could be used in an update\
    \ of \"CMC Extensions: Server\n    --    Side Key Generation and Key Escrow\"\
    \ (February 2005) and in\n    --    other documents.\n    id-aa OBJECT IDENTIFIER\
    \ ::= { iso(1) member-body(2) us(840)\n          rsadsi(113549) pkcs(1) pkcs-9(9)\
    \ smime(16) id-aa(2)}\n    id-aa-cmc-unsignedData OBJECT IDENTIFIER ::= {id-aa\
    \ 34}\n    CMCUnsignedData ::= SEQUENCE {\n        bodyPartPath        BodyPartPath,\n\
    \        identifier          OBJECT IDENTIFIER,\n        content             ANY\
    \ DEFINED BY identifier\n    }\n    --  Replaces CMC Status Info\n    --\n   \
    \ id-cmc-statusInfoV2 OBJECT IDENTIFIER ::= {id-cmc 25}\n    CMCStatusInfoV2 ::=\
    \ SEQUENCE {\n       cMCStatus             CMCStatus,\n       bodyList       \
    \       SEQUENCE SIZE (1..MAX) OF\n                                      BodyPartReference,\n\
    \       statusString          UTF8String OPTIONAL,\n       otherInfo         \
    \    CHOICE {\n         failInfo               CMCFailInfo,\n         pendInfo\
    \               PendInfo,\n         extendedFailInfo       SEQUENCE {\n      \
    \      failInfoOID            OBJECT IDENTIFIER,\n            failInfoValue  \
    \        AttributeValue\n         }\n       } OPTIONAL\n    }\n    BodyPartReference\
    \ ::= CHOICE {\n       bodyPartID           BodyPartID,\n       bodyPartPath \
    \        BodyPartPath\n    }\n    BodyPartPath ::= SEQUENCE SIZE (1..MAX) OF BodyPartID\n\
    \    --  Allow for distribution of trust anchors\n    --\n    id-cmc-trustedAnchors\
    \ OBJECT IDENTIFIER ::= {id-cmc 26}\n    PublishTrustAnchors ::= SEQUENCE {\n\
    \        seqNumber      INTEGER,\n        hashAlgorithm  AlgorithmIdentifier,\n\
    \        anchorHashes     SEQUENCE OF OCTET STRING\n    }\n    id-cmc-authData\
    \ OBJECT IDENTIFIER ::= {id-cmc 27}\n    AuthPublish ::= BodyPartID\n    --  \
    \ These two items use BodyPartList\n    id-cmc-batchRequests OBJECT IDENTIFIER\
    \ ::= {id-cmc 28}\n    id-cmc-batchResponses OBJECT IDENTIFIER ::= {id-cmc 29}\n\
    \    BodyPartList ::= SEQUENCE SIZE (1..MAX) OF BodyPartID\n    --\n    id-cmc-publishCert\
    \ OBJECT IDENTIFIER ::= {id-cmc 30}\n    CMCPublicationInfo ::= SEQUENCE {\n \
    \       hashAlg                      AlgorithmIdentifier,\n        certHashes\
    \                   SEQUENCE OF OCTET STRING,\n        pubInfo               \
    \           PKIPublicationInfo\n    }\n    id-cmc-modCertTemplate OBJECT IDENTIFIER\
    \ ::= {id-cmc 31}\n    ModCertTemplate ::= SEQUENCE {\n        pkiDataReference\
    \             BodyPartPath,\n        certReferences               BodyPartList,\n\
    \        replace                      BOOLEAN DEFAULT TRUE,\n        certTemplate\
    \                 CertTemplate\n    }\n    -- Inform follow-on servers that one\
    \ or more controls have already\n    -- been processed\n    id-cmc-controlProcessed\
    \ OBJECT IDENTIFIER ::= {id-cmc 32}\n    ControlsProcessed ::= SEQUENCE {\n  \
    \      bodyList        SEQUENCE SIZE(1..MAX) OF BodyPartReference\n    }\n   \
    \ --  Identity Proof control w/ algorithm agility\n    id-cmc-identityProofV2\
    \ OBJECT IDENTIFIER ::= { id-cmc 34 }\n    IdentifyProofV2 ::= SEQUENCE {\n  \
    \      proofAlgID       AlgorithmIdentifier,\n        macAlgId         AlgorithmIdentifier,\n\
    \        witness          OCTET STRING\n    }\n    id-cmc-popLinkWitnessV2 OBJECT\
    \ IDENTIFIER ::= { id-cmc 33 }\n    PopLinkWitnessV2 ::= SEQUENCE {\n        keyGenAlgorithm\
    \   AlgorithmIdentifier,\n        macAlgorithm      AlgorithmIdentifier,\n   \
    \     witness           OCTET STRING\n    }\n    --\n    id-cmc-raIdentityWitness\
    \ OBJECT IDENTIFIER ::= {id-cmc 35}\n    --\n    --  Allow for an End-Entity to\
    \ request a change in name.\n    --  This item is added to RegControlSet in CRMF.\n\
    \    --\n    id-cmc-changeSubjectName OBJECT IDENTIFIER ::= {id-cmc 36}\n    ChangeSubjectName\
    \ ::= SEQUENCE {\n        subject             Name OPTIONAL,\n        subjectAlt\
    \          GeneralNames OPTIONAL\n    }\n    -- (WITH COMPONENTS {..., subject\
    \ PRESENT} |\n    --  WITH COMPONENTS {..., subjectAlt PRESENT} )\n    --\n  \
    \  --  Embedded response from a third party for processing\n    --\n    id-cmc-responseBody\
    \ OBJECT IDENTIFIER ::= {id-cmc 37}\n    --\n    --  Key purpose identifiers are\
    \ in the Extended Key Usage extension\n    --\n    id-kp-cmcCA OBJECT IDENTIFIER\
    \ ::= { id-kp 27 }\n    id-kp-cmcRA OBJECT IDENTIFIER ::= { id-kp 28 }\n    id-kp-cmcArchive\
    \ OBJECT IDENTIFIER ::= { id-kp 28 }\n    --\n    --  Subject Information Access\
    \ identifier\n    --\n    id-ad-cmc OBJECT IDENTIFIER ::= { id-ad 12 }\n   END\n"
- title: A.2.  2008 ASN.1 Module
  contents:
  - "A.2.  2008 ASN.1 Module\n   An updated 2008 ASN.1 module has been provided as\
    \ part of this\n   update.  The module contains those changes that were done to\
    \ update\n   the current ASN.1 standards (done for [RFC5912]) as well as changes\n\
    \   made for this document.\n"
- title: EnrollmentMessageSyntax-2011-v08
  contents:
  - "EnrollmentMessageSyntax-2011-v08\n    {iso(1) identified-organization(3) dod(6)\
    \ internet(1)\n    security(5) mechanisms(5) pkix(7) id-mod(0)\n    id-mod-enrollMsgSyntax-2011-08(76)}\n"
- title: DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n  EXPORTS ALL;\n  IMPORTS\n  AttributeSet{}, Extension{}, EXTENSION, ATTRIBUTE\n\
    \  FROM PKIX-CommonTypes-2009\n      {iso(1) identified-organization(3) dod(6)\
    \ internet(1) security(5)\n      mechanisms(5) pkix(7) id-mod(0) id-mod-pkixCommon-02(57)}\n\
    \  AlgorithmIdentifier{}, DIGEST-ALGORITHM, KEY-WRAP, KEY-DERIVATION,\n      MAC-ALGORITHM,\
    \ SIGNATURE-ALGORITHM, PUBLIC-KEY\n  FROM AlgorithmInformation-2009\n      {iso(1)\
    \ identified-organization(3) dod(6) internet(1) security(5)\n      mechanisms(5)\
    \ pkix(7) id-mod(0)\n      id-mod-algorithmInformation-02(58)}\n  CertificateSerialNumber,\
    \ GeneralName, CRLReason, ReasonFlags,\n      CertExtensions, GeneralNames\n \
    \ FROM PKIX1Implicit-2009\n      {iso(1) identified-organization(3) dod(6) internet(1)\
    \ security(5)\n      mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59)}\n\
    \  Name, id-pkix, PublicKeyAlgorithms, SignatureAlgorithms, id-ad, id-kp\n  FROM\
    \ PKIX1Explicit-2009\n      {iso(1) identified-organization(3) dod(6) internet(1)\
    \ security(5)\n      mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-explicit-02(51)}\n\
    \  ContentInfo, IssuerAndSerialNumber, CONTENT-TYPE\n  FROM CryptographicMessageSyntax-2010\n\
    \    { iso(1) member-body(2) us(840) rsadsi(113549)\n       pkcs(1) pkcs-9(9)\
    \ smime(16) modules(0) id-mod-cms-2009(58) }\n  CertReqMsg, PKIPublicationInfo,\
    \ CertTemplate\n  FROM PKIXCRMF-2009\n      {iso(1) identified-organization(3)\
    \ dod(6) internet(1) security(5)\n      mechanisms(5) pkix(7) id-mod(0) id-mod-crmf2005-02(55)}\n\
    \  mda-sha1\n  FROM PKIXAlgs-2009\n       { iso(1) identified-organization(3)\
    \ dod(6)\n       internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n   \
    \    id-mod-pkix1-algorithms2008-02(56)}\n  kda-PBKDF2, maca-hMAC-SHA1\n  FROM\
    \ CryptographicMessageSyntaxAlgorithms-2009\n      { iso(1) member-body(2) us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16) modules(0) id-mod-cmsalg-2001-02(37)\
    \ }\n  mda-sha256\n  FROM PKIX1-PSS-OAEP-Algorithms-2009\n       { iso(1) identified-organization(3)\
    \ dod(6)\n         internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n \
    \        id-mod-pkix1-rsa-pkalgs-02(54) } ;\n  --  CMS content types defined in\
    \ this document\n  CMC-ContentTypes CONTENT-TYPE ::= { ct-PKIData | ct-PKIResponse,\
    \ ... }\n  --  Signature Algorithms defined in this document\n  SignatureAlgs\
    \ SIGNATURE-ALGORITHM ::= { sa-noSignature }\n  --  CMS Unsigned Attributes\n\
    \  CMC-UnsignedAtts ATTRIBUTE ::= { aa-cmc-unsignedData }\n  --\n  --\n  id-cmc\
    \ OBJECT IDENTIFIER ::= {id-pkix 7}   -- CMC controls\n  id-cct OBJECT IDENTIFIER\
    \ ::= {id-pkix 12}  -- CMC content types\n  -- This is the content type for a\
    \ request message in the protocol\n  ct-PKIData CONTENT-TYPE ::=\n      { TYPE\
    \ PKIData IDENTIFIED BY id-cct-PKIData }\n  id-cct-PKIData OBJECT IDENTIFIER ::=\
    \ { id-cct 2 }\n  PKIData ::= SEQUENCE {\n      controlSequence    SEQUENCE SIZE(0..MAX)\
    \ OF TaggedAttribute,\n      reqSequence        SEQUENCE SIZE(0..MAX) OF TaggedRequest,\n\
    \      cmsSequence        SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,\n      otherMsgSequence\
    \   SEQUENCE SIZE(0..MAX) OF OtherMsg\n  }\n  BodyPartID ::= INTEGER(0..4294967295)\n\
    \  TaggedAttribute ::= SEQUENCE {\n      bodyPartID         BodyPartID,\n    \
    \  attrType           CMC-CONTROL.&id({Cmc-Control-Set}),\n      attrValues  \
    \       SET OF CMC-CONTROL.\n                             &Type({Cmc-Control-Set}{@attrType})\n\
    \  }\n  Cmc-Control-Set CMC-CONTROL ::= {\n      cmc-identityProof | cmc-dataReturn\
    \ | cmc-regInfo |\n      cmc-responseInfo | cmc-queryPending | cmc-popLinkRandom\
    \ |\n      cmc-popLinkWitness | cmc-identification | cmc-transactionId |\n   \
    \   cmc-senderNonce | cmc-recipientNonce | cmc-statusInfo |\n      cmc-addExtensions\
    \ | cmc-encryptedPOP | cmc-decryptedPOP |\n      cmc-lraPOPWitness | cmc-getCert\
    \ | cmc-getCRL |\n      cmc-revokeRequest | cmc-confirmCertAcceptance |\n    \
    \  cmc-statusInfoV2 | cmc-trustedAnchors | cmc-authData |\n      cmc-batchRequests\
    \ | cmc-batchResponses | cmc-publishCert |\n      cmc-modCertTemplate | cmc-controlProcessed\
    \ |\n      cmc-identityProofV2 | cmc-popLinkWitnessV2, ...,\n      cmc-raIdentityWitness\
    \ | cmc-responseBody }\n  OTHER-REQUEST ::= TYPE-IDENTIFIER\n  --  We do not define\
    \ any other requests in this document.\n  --     Examples might be attribute certification\
    \ requests.\n  OtherRequests OTHER-REQUEST ::= {...}\n  TaggedRequest ::= CHOICE\
    \ {\n      tcr               [0] TaggedCertificationRequest,\n      crm      \
    \         [1] CertReqMsg,\n      orm               [2] SEQUENCE {\n          bodyPartID\
    \            BodyPartID,\n          requestMessageType    OTHER-REQUEST.&id({OtherRequests}),\n\
    \          requestMessageValue   OTHER-REQUEST.&Type({OtherRequests}\n       \
    \                             {@.requestMessageType})\n      }\n  }\n  TaggedCertificationRequest\
    \ ::= SEQUENCE {\n      bodyPartID            BodyPartID,\n      certificationRequest\
    \  CertificationRequest\n  }\n  AttributeList ATTRIBUTE ::= {at-extension-req,\
    \ ...,\n      at-cmc-changeSubjectName}\n  CertificationRequest ::= SEQUENCE {\n\
    \     certificationRequestInfo  SEQUENCE {\n         version                 \
    \  INTEGER,\n         subject                   Name,\n         subjectPublicKeyInfo\
    \      SEQUENCE {\n             algorithm                 AlgorithmIdentifier{PUBLIC-KEY,\n\
    \                                           {PublicKeyAlgorithms}},\n        \
    \     subjectPublicKey          BIT STRING\n         },\n         attributes \
    \               [0] IMPLICIT SET OF\n                                       AttributeSet{{AttributeList}}\n\
    \      },\n      signatureAlgorithm        AlgorithmIdentifier\n             \
    \                       {SIGNATURE-ALGORITHM,\n                              \
    \          {SignatureAlgorithms}},\n      signature                 BIT STRING\n\
    \  }\n  TaggedContentInfo ::= SEQUENCE {\n      bodyPartID              BodyPartID,\n\
    \      contentInfo             ContentInfo\n  }\n  OTHER-MSG ::= TYPE-IDENTIFIER\n\
    \  --  No other messages currently defined\n  OtherMsgSet OTHER-MSG ::= {...}\n\
    \  OtherMsg ::= SEQUENCE {\n      bodyPartID        BodyPartID,\n      otherMsgType\
    \      OTHER-MSG.&id({OtherMsgSet}),\n      otherMsgValue     OTHER-MSG.&Type({OtherMsgSet}{@otherMsgType})\
    \ }\n  --  This defines the response message in the protocol\n  ct-PKIResponse\
    \ CONTENT-TYPE ::=\n      { TYPE PKIResponse IDENTIFIED BY id-cct-PKIResponse\
    \ }\n  id-cct-PKIResponse OBJECT IDENTIFIER ::= { id-cct 3 }\n  ResponseBody ::=\
    \ PKIResponse\n  PKIResponse ::= SEQUENCE {\n      controlSequence   SEQUENCE\
    \ SIZE(0..MAX) OF TaggedAttribute,\n      cmsSequence       SEQUENCE SIZE(0..MAX)\
    \ OF TaggedContentInfo,\n      otherMsgSequence  SEQUENCE SIZE(0..MAX) OF OtherMsg\n\
    \  }\n  CMC-CONTROL ::= TYPE-IDENTIFIER\n  -- The following controls have the\
    \ type OCTET STRING\n  cmc-identityProof CMC-CONTROL ::=\n      { OCTET STRING\
    \ IDENTIFIED BY id-cmc-identityProof }\n  id-cmc-identityProof OBJECT IDENTIFIER\
    \ ::= {id-cmc 3}\n  cmc-dataReturn CMC-CONTROL ::=\n      { OCTET STRING IDENTIFIED\
    \ BY id-cmc-dataReturn }\n  id-cmc-dataReturn OBJECT IDENTIFIER ::= {id-cmc 4}\n\
    \  cmc-regInfo CMC-CONTROL ::=\n      { OCTET STRING IDENTIFIED BY id-cmc-regInfo\
    \ }\n  id-cmc-regInfo OBJECT IDENTIFIER ::= {id-cmc 18}\n  cmc-responseInfo CMC-CONTROL\
    \ ::=\n      { OCTET STRING IDENTIFIED BY id-cmc-responseInfo }\n  id-cmc-responseInfo\
    \ OBJECT IDENTIFIER ::= {id-cmc 19}\n  cmc-queryPending CMC-CONTROL ::=\n    \
    \  { OCTET STRING IDENTIFIED BY id-cmc-queryPending }\n  id-cmc-queryPending OBJECT\
    \ IDENTIFIER ::= {id-cmc 21}\n  cmc-popLinkRandom CMC-CONTROL ::=\n      { OCTET\
    \ STRING IDENTIFIED BY id-cmc-popLinkRandom }\n  id-cmc-popLinkRandom OBJECT IDENTIFIER\
    \ ::= {id-cmc 22}\n  cmc-popLinkWitness CMC-CONTROL ::=\n      { OCTET STRING\
    \ IDENTIFIED BY id-cmc-popLinkWitness }\n  id-cmc-popLinkWitness OBJECT IDENTIFIER\
    \ ::= {id-cmc 23}\n  -- The following controls have the type UTF8String\n  cmc-identification\
    \ CMC-CONTROL ::=\n      { UTF8String IDENTIFIED BY id-cmc-identification }\n\
    \  id-cmc-identification OBJECT IDENTIFIER ::= {id-cmc 2}\n  -- The following\
    \ controls have the type INTEGER\n  cmc-transactionId CMC-CONTROL ::=\n      {\
    \ INTEGER IDENTIFIED BY id-cmc-transactionId }\n  id-cmc-transactionId OBJECT\
    \ IDENTIFIER ::= {id-cmc 5}\n  -- The following controls have the type OCTET STRING\n\
    \  cmc-senderNonce CMC-CONTROL ::=\n      { OCTET STRING IDENTIFIED BY id-cmc-senderNonce\
    \ }\n  id-cmc-senderNonce OBJECT IDENTIFIER ::= {id-cmc 6}\n  cmc-recipientNonce\
    \ CMC-CONTROL ::=\n      { OCTET STRING IDENTIFIED BY id-cmc-recipientNonce }\n\
    \  id-cmc-recipientNonce OBJECT IDENTIFIER ::= {id-cmc 7}\n  -- Used to return\
    \ status in a response\n  cmc-statusInfo CMC-CONTROL ::=\n      { CMCStatusInfo\
    \ IDENTIFIED BY id-cmc-statusInfo }\n  id-cmc-statusInfo OBJECT IDENTIFIER ::=\
    \ {id-cmc 1}\n  CMCStatusInfo ::= SEQUENCE {\n      cMCStatus       CMCStatus,\n\
    \      bodyList        SEQUENCE SIZE (1..MAX) OF BodyPartID,\n      statusString\
    \    UTF8String OPTIONAL,\n      otherInfo       CHOICE {\n         failInfo \
    \        CMCFailInfo,\n         pendInfo         PendInfo\n      } OPTIONAL\n\
    \  }\n  PendInfo ::= SEQUENCE {\n      pendToken        OCTET STRING,\n      pendTime\
    \         GeneralizedTime\n  }\n  CMCStatus ::= INTEGER {\n      success     \
    \    (0),\n      failed          (2),\n      pending         (3),\n      noSupport\
    \       (4),\n      confirmRequired (5),\n      popRequired     (6),\n      partial\
    \         (7)\n  }\n  CMCFailInfo ::= INTEGER {\n      badAlg          (0),\n\
    \      badMessageCheck (1),\n      badRequest      (2),\n      badTime       \
    \  (3),\n      badCertId       (4),\n      unsuportedExt   (5),\n      mustArchiveKeys\
    \ (6),\n      badIdentity     (7),\n      popRequired     (8),\n      popFailed\
    \       (9),\n      noKeyReuse      (10),\n      internalCAError (11),\n     \
    \ tryLater        (12),\n      authDataFail    (13)\n  }\n  -- Used for RAs to\
    \ add extensions to certification requests\n  cmc-addExtensions CMC-CONTROL ::=\n\
    \      { AddExtensions IDENTIFIED BY id-cmc-addExtensions }\n  id-cmc-addExtensions\
    \ OBJECT IDENTIFIER ::= {id-cmc 8}\n  AddExtensions ::= SEQUENCE {\n      pkiDataReference\
    \    BodyPartID,\n      certReferences      SEQUENCE OF BodyPartID,\n      extensions\
    \          SEQUENCE OF Extension{{CertExtensions}}\n  }\n  cmc-encryptedPOP CMC-CONTROL\
    \ ::=\n      { EncryptedPOP IDENTIFIED BY id-cmc-encryptedPOP }\n  cmc-decryptedPOP\
    \ CMC-CONTROL ::=\n      { DecryptedPOP IDENTIFIED BY id-cmc-decryptedPOP }\n\
    \  id-cmc-encryptedPOP OBJECT IDENTIFIER ::= {id-cmc 9}\n  id-cmc-decryptedPOP\
    \ OBJECT IDENTIFIER ::= {id-cmc 10}\n  EncryptedPOP ::= SEQUENCE {\n      request\
    \       TaggedRequest,\n      cms             ContentInfo,\n      thePOPAlgID\
    \     AlgorithmIdentifier{MAC-ALGORITHM, {POPAlgs}},\n      witnessAlgID    AlgorithmIdentifier{DIGEST-ALGORITHM,\n\
    \                          {WitnessAlgs}},\n      witness         OCTET STRING\n\
    \  }\n  POPAlgs MAC-ALGORITHM ::= {maca-hMAC-SHA1, ...}\n  WitnessAlgs DIGEST-ALGORITHM\
    \ ::= {mda-sha1, ...}\n  DecryptedPOP ::= SEQUENCE {\n      bodyPartID      BodyPartID,\n\
    \      thePOPAlgID     AlgorithmIdentifier{MAC-ALGORITHM, {POPAlgs}},\n      thePOP\
    \          OCTET STRING\n  }\n  cmc-lraPOPWitness CMC-CONTROL ::=\n      { LraPopWitness\
    \ IDENTIFIED BY id-cmc-lraPOPWitness }\n  id-cmc-lraPOPWitness OBJECT IDENTIFIER\
    \ ::= {id-cmc 11}\n  LraPopWitness ::= SEQUENCE {\n      pkiDataBodyid   BodyPartID,\n\
    \      bodyIds         SEQUENCE OF BodyPartID\n  }\n  --\n  cmc-getCert CMC-CONTROL\
    \ ::=\n      { GetCert IDENTIFIED BY id-cmc-getCert }\n  id-cmc-getCert OBJECT\
    \ IDENTIFIER ::= {id-cmc 15}\n  GetCert ::= SEQUENCE {\n      issuerName     \
    \ GeneralName,\n      serialNumber    INTEGER }\n  cmc-getCRL CMC-CONTROL ::=\n\
    \      { GetCRL IDENTIFIED BY id-cmc-getCRL }\n  id-cmc-getCRL OBJECT IDENTIFIER\
    \ ::= {id-cmc 16}\n  GetCRL ::= SEQUENCE {\n      issuerName    Name,\n      cRLName\
    \       GeneralName OPTIONAL,\n      time          GeneralizedTime OPTIONAL,\n\
    \      reasons       ReasonFlags OPTIONAL }\n  cmc-revokeRequest CMC-CONTROL ::=\n\
    \      { RevokeRequest IDENTIFIED BY id-cmc-revokeRequest}\n  id-cmc-revokeRequest\
    \ OBJECT IDENTIFIER ::= {id-cmc 17}\n  RevokeRequest ::= SEQUENCE {\n      issuerName\
    \            Name,\n      serialNumber          INTEGER,\n      reason       \
    \         CRLReason,\n      invalidityDate         GeneralizedTime OPTIONAL,\n\
    \      passphrase            OCTET STRING OPTIONAL,\n      comment           \
    \    UTF8String OPTIONAL }\n  cmc-confirmCertAcceptance CMC-CONTROL ::=\n    \
    \  { CMCCertId IDENTIFIED BY id-cmc-confirmCertAcceptance }\n  id-cmc-confirmCertAcceptance\
    \ OBJECT IDENTIFIER ::= {id-cmc 24}\n  CMCCertId ::= IssuerAndSerialNumber\n \
    \ -- The following is used to request V3 extensions be added\n  --     to a certificate\n\
    \  at-extension-req ATTRIBUTE ::=\n      { TYPE ExtensionReq IDENTIFIED BY id-ExtensionReq\
    \ }\n  id-ExtensionReq OBJECT IDENTIFIER ::= {iso(1) member-body(2) us(840)\n\
    \      rsadsi(113549) pkcs(1) pkcs-9(9) 14}\n  ExtensionReq ::= SEQUENCE SIZE\
    \ (1..MAX) OF\n      Extension{{CertExtensions}}\n  -- The following allows Diffie-Hellman\
    \ Certification Request\n  --     Messages to be well-formed\n  sa-noSignature\
    \ SIGNATURE-ALGORITHM ::= {\n      IDENTIFIER id-alg-noSignature\n      VALUE\
    \ NoSignatureValue\n      PARAMS TYPE NULL ARE required\n      HASHES { mda-sha1\
    \ }\n  }\n  id-alg-noSignature OBJECT IDENTIFIER ::= {id-pkix id-alg(6) 2}\n \
    \ NoSignatureValue ::= OCTET STRING\n  --  Unauthenticated attribute to carry\
    \ removable data.\n  id-aa OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n\
    \      rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2)}\n  aa-cmc-unsignedData\
    \ ATTRIBUTE ::=\n      { TYPE CMCUnsignedData IDENTIFIED BY id-aa-cmc-unsignedData\
    \ }\n  id-aa-cmc-unsignedData OBJECT IDENTIFIER ::= {id-aa 34}\n  CMCUnsignedData\
    \ ::= SEQUENCE {\n      bodyPartPath        BodyPartPath,\n      identifier  \
    \        TYPE-IDENTIFIER.&id,\n      content             TYPE-IDENTIFIER.&Type\n\
    \  }\n  --  Replaces CMC Status Info\n  --\n  cmc-statusInfoV2 CMC-CONTROL ::=\n\
    \      { CMCStatusInfoV2 IDENTIFIED BY id-cmc-statusInfoV2 }\n  id-cmc-statusInfoV2\
    \ OBJECT IDENTIFIER ::= {id-cmc 25}\n  EXTENDED-FAILURE-INFO ::= TYPE-IDENTIFIER\n\
    \  ExtendedFailures EXTENDED-FAILURE-INFO ::= {...}\n  CMCStatusInfoV2 ::= SEQUENCE\
    \ {\n     cMCStatus             CMCStatus,\n     bodyList              SEQUENCE\
    \ SIZE (1..MAX) OF\n                                    BodyPartReference,\n \
    \    statusString          UTF8String OPTIONAL,\n     otherInfo             CHOICE\
    \ {\n         failInfo               CMCFailInfo,\n         pendInfo         \
    \      PendInfo,\n         extendedFailInfo       [1] SEQUENCE {\n           \
    \ failInfoOID            TYPE-IDENTIFIER.&id\n                               \
    \        ({ExtendedFailures}),\n            failInfoValue          TYPE-IDENTIFIER.&Type\n\
    \                                       ({ExtendedFailures}\n                \
    \                           {@.failInfoOID})\n         }\n      } OPTIONAL\n \
    \ }\n  BodyPartReference ::= CHOICE {\n     bodyPartID           BodyPartID,\n\
    \     bodyPartPath         BodyPartPath\n  }\n  BodyPartPath ::= SEQUENCE SIZE\
    \ (1..MAX) OF BodyPartID\n  --  Allow for distribution of trust anchors\n  --\n\
    \  cmc-trustedAnchors CMC-CONTROL ::=\n      { PublishTrustAnchors IDENTIFIED\
    \ BY id-cmc-trustedAnchors }\n  id-cmc-trustedAnchors OBJECT IDENTIFIER ::= {id-cmc\
    \ 26}\n  PublishTrustAnchors ::= SEQUENCE {\n      seqNumber      INTEGER,\n \
    \     hashAlgorithm  AlgorithmIdentifier{DIGEST-ALGORITHM,\n                 \
    \        {HashAlgorithms}},\n      anchorHashes   SEQUENCE OF OCTET STRING\n \
    \ }\n  HashAlgorithms DIGEST-ALGORITHM ::= {\n     mda-sha1 | mda-sha256, ...\n\
    \  }\n  cmc-authData CMC-CONTROL ::=\n      { AuthPublish IDENTIFIED BY id-cmc-authData\
    \ }\n  id-cmc-authData OBJECT IDENTIFIER ::= {id-cmc 27}\n  AuthPublish ::= BodyPartID\n\
    \  --   These two items use BodyPartList\n  cmc-batchRequests CMC-CONTROL ::=\n\
    \      { BodyPartList IDENTIFIED BY id-cmc-batchRequests }\n  id-cmc-batchRequests\
    \ OBJECT IDENTIFIER ::= {id-cmc 28}\n  cmc-batchResponses CMC-CONTROL ::=\n  \
    \    { BodyPartList IDENTIFIED BY id-cmc-batchResponses }\n  id-cmc-batchResponses\
    \ OBJECT IDENTIFIER ::= {id-cmc 29}\n  BodyPartList ::= SEQUENCE SIZE (1..MAX)\
    \ OF BodyPartID\n  cmc-publishCert CMC-CONTROL ::=\n      { CMCPublicationInfo\
    \ IDENTIFIED BY id-cmc-publishCert }\n  id-cmc-publishCert OBJECT IDENTIFIER ::=\
    \ {id-cmc 30}\n  CMCPublicationInfo ::= SEQUENCE {\n      hashAlg        AlgorithmIdentifier{DIGEST-ALGORITHM,\n\
    \                           {HashAlgorithms}},\n      certHashes     SEQUENCE\
    \ OF OCTET STRING,\n      pubInfo        PKIPublicationInfo\n  }\n  cmc-modCertTemplate\
    \ CMC-CONTROL ::=\n      { ModCertTemplate IDENTIFIED BY id-cmc-modCertTemplate\
    \ }\n  id-cmc-modCertTemplate OBJECT IDENTIFIER ::= {id-cmc 31}\n  ModCertTemplate\
    \ ::= SEQUENCE {\n      pkiDataReference             BodyPartPath,\n      certReferences\
    \               BodyPartList,\n      replace                      BOOLEAN DEFAULT\
    \ TRUE,\n      certTemplate                 CertTemplate\n  }\n  -- Inform follow-on\
    \ servers that one or more controls have\n  --     already been processed\n  cmc-controlProcessed\
    \ CMC-CONTROL ::=\n      { ControlsProcessed IDENTIFIED BY id-cmc-controlProcessed\
    \ }\n  id-cmc-controlProcessed OBJECT IDENTIFIER ::= {id-cmc 32}\n  ControlsProcessed\
    \ ::= SEQUENCE {\n      bodyList              SEQUENCE SIZE(1..MAX) OF BodyPartReference\n\
    \  }\n  --  Identity Proof control w/ algorithm agility\n  cmc-identityProofV2\
    \ CMC-CONTROL ::=\n      { IdentityProofV2 IDENTIFIED BY id-cmc-identityProofV2\
    \ }\n  id-cmc-identityProofV2 OBJECT IDENTIFIER ::= { id-cmc 33 }\n  IdentityProofV2\
    \ ::= SEQUENCE {\n      proofAlgID       AlgorithmIdentifier{DIGEST-ALGORITHM,\n\
    \                           {WitnessAlgs}},\n      macAlgId         AlgorithmIdentifier{MAC-ALGORITHM,\
    \ {POPAlgs}},\n      witness          OCTET STRING\n  }\n  cmc-popLinkWitnessV2\
    \ CMC-CONTROL ::=\n      { PopLinkWitnessV2 IDENTIFIED BY id-cmc-popLinkWitnessV2\
    \ }\n  id-cmc-popLinkWitnessV2 OBJECT IDENTIFIER ::= { id-cmc 34 }\n  PopLinkWitnessV2\
    \ ::= SEQUENCE {\n      keyGenAlgorithm   AlgorithmIdentifier{KEY-DERIVATION,\n\
    \                            {KeyDevAlgs}},\n      macAlgorithm      AlgorithmIdentifier{MAC-ALGORITHM,\
    \ {POPAlgs}},\n      witness           OCTET STRING\n  }\n  KeyDevAlgs KEY-DERIVATION\
    \ ::= {kda-PBKDF2, ...}\n  cmc-raIdentityWitness CMC-CONTROL ::=\n     { BodyPartPath\
    \ IDENTIFIED BY id-cmc-raIdentityWitness }\n  id-cmc-raIdentityWitness OBJECT\
    \ IDENTIFIER ::= {id-cmc 35}\n  --\n  --  Allow for an End-Entity to request a\
    \ change in name.\n  --  This item is added to RegControlSet in CRMF.\n  --\n\
    \  at-cmc-changeSubjectName ATTRIBUTE ::=\n     { TYPE ChangeSubjectName IDENTIFIED\
    \ BY id-cmc-changeSubjectName }\n  id-cmc-changeSubjectName OBJECT IDENTIFIER\
    \ ::= {id-cmc 36}\n  ChangeSubjectName ::= SEQUENCE {\n      subject         \
    \    Name OPTIONAL,\n      subjectAlt          GeneralNames OPTIONAL\n  }\n  (WITH\
    \ COMPONENTS {..., subject PRESENT} |\n   WITH COMPONENTS {..., subjectAlt PRESENT}\
    \ )\n  --\n  --  Embedded response from a third party for processing\n  --\n \
    \ cmc-responseBody CMC-CONTROL ::= {\n     BodyPartPath IDENTIFIED BY id-cmc-responseBody\n\
    \  }\n  id-cmc-responseBody OBJECT IDENTIFIER ::= {id-cmc 37}\n  --\n  --  Key\
    \ purpose identifiers are in the Extended Key Usage extension\n  --\n  id-kp-cmcCA\
    \ OBJECT IDENTIFIER ::= { id-kp 27 }\n  id-kp-cmcRA OBJECT IDENTIFIER ::= { id-kp\
    \ 28 }\n  id-kp-cmcArchive OBJECT IDENTIFIER ::= { id-kp 29 }\n  --\n  --  Subject\
    \ Information Access identifier\n  --\n  id-ad-cmc OBJECT IDENTIFIER ::= { id-ad\
    \ 12 }\n"
- title: END
  contents:
  - 'END

    '
- title: Author's Address
  contents:
  - "Author's Address\n   Jim Schaad\n   Soaring Hawk Consulting\n   EMail: jimsch@augustcellars.com\n"
