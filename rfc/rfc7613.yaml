- title: __initial_text__
  contents:
  - " Preparation, Enforcement, and Comparison of Internationalized Strings\n    \
    \              Representing Usernames and Passwords\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes updated methods for handling Unicode strings\n\
    \   representing usernames and passwords.  The previous approach was\n   known\
    \ as SASLprep (RFC 4013) and was based on stringprep (RFC 3454).\n   The methods\
    \ specified in this document provide a more sustainable\n   approach to the handling\
    \ of internationalized usernames and\n   passwords.  The preparation, enforcement,\
    \ and comparison of\n   internationalized strings (PRECIS) framework, RFC 7564,\
    \ obsoletes RFC\n   3454, and this document obsoletes RFC 4013.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7613.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................5\n  \
    \ 3. Usernames .......................................................6\n    \
    \  3.1. Definition .................................................6\n      3.2.\
    \ UsernameCaseMapped Profile .................................7\n           3.2.1.\
    \ Preparation .........................................7\n           3.2.2. Enforcement\
    \ .........................................7\n           3.2.3. Comparison ..........................................8\n\
    \      3.3. UsernameCasePreserved Profile ..............................8\n  \
    \         3.3.1. Preparation .........................................8\n    \
    \       3.3.2. Enforcement .........................................8\n      \
    \     3.3.3. Comparison ..........................................9\n      3.4.\
    \ Case Mapping vs. Case Preservation .........................9\n      3.5. Application-Layer\
    \ Constructs ..............................10\n      3.6. Examples ..................................................11\n\
    \   4. Passwords ......................................................13\n  \
    \    4.1. Definition ................................................13\n    \
    \  4.2. OpaqueString Profile ......................................14\n      \
    \     4.2.1. Preparation ........................................14\n        \
    \   4.2.2. Enforcement ........................................14\n          \
    \ 4.2.3. Comparison .........................................15\n      4.3. Examples\
    \ ..................................................15\n   5. Use in Application\
    \ Protocols ...................................16\n   6. Migration ......................................................16\n\
    \      6.1. Usernames .................................................17\n  \
    \    6.2. Passwords .................................................18\n   7.\
    \ IANA Considerations ............................................19\n      7.1.\
    \ UsernameCaseMapped Profile ................................19\n      7.2. UsernameCasePreserved\
    \ Profile .............................20\n      7.3. OpaqueString Profile ......................................20\n\
    \      7.4. Stringprep Profile ........................................21\n  \
    \ 8. Security Considerations ........................................21\n    \
    \  8.1. Password/Passphrase Strength ..............................21\n      8.2.\
    \ Identifier Comparison .....................................21\n      8.3. Reuse\
    \ of PRECIS ...........................................21\n      8.4. Reuse of\
    \ Unicode ..........................................22\n   9. References .....................................................22\n\
    \      9.1. Normative References ......................................22\n  \
    \    9.2. Informative References ....................................23\n   Appendix\
    \ A. Differences from RFC 4013 .............................26\n   Acknowledgements\
    \ ..................................................27\n   Authors' Addresses\
    \ ................................................27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Usernames and passwords are widely used for authentication\
    \ and\n   authorization on the Internet, either directly when provided in\n  \
    \ plaintext (as in the PLAIN Simple Authentication and Security Layer\n   (SASL)\
    \ mechanism [RFC4616] and the HTTP Basic scheme\n   [HTTP-BASIC-AUTH]) or indirectly\
    \ when provided as the input to a\n   cryptographic algorithm such as a hash function\
    \ (as in the Salted\n   Challenge Response Authentication Mechanism (SCRAM) SASL\
    \ mechanism\n   [RFC5802] and the HTTP Digest scheme [HTTP-DIGEST-AUTH]).\n  \
    \ To increase the likelihood that the input and comparison of usernames\n   and\
    \ passwords will work in ways that make sense for typical users\n   throughout\
    \ the world, this document defines rules for preparing,\n   enforcing, and comparing\
    \ internationalized strings that represent\n   usernames and passwords.  Such\
    \ strings consist of characters from the\n   Unicode character set [Unicode],\
    \ with special attention to characters\n   outside the ASCII range [RFC20].  The\
    \ rules for handling such strings\n   are specified through profiles of the string\
    \ classes defined in the\n   preparation, enforcement, and comparison of internationalized\
    \ strings\n   (PRECIS) framework specification [RFC7564].\n   Profiles of the\
    \ PRECIS framework enable software to handle Unicode\n   characters outside the\
    \ ASCII range in an automated way, so that such\n   characters are treated carefully\
    \ and consistently in application\n   protocols.  In large measure, these profiles\
    \ are designed to protect\n   application developers from the potentially negative\
    \ consequences of\n   supporting the full range of Unicode characters.  For instance,\
    \ in\n   almost all application protocols it would be dangerous to treat the\n\
    \   Unicode character SUPERSCRIPT ONE (U+00B9) as equivalent to DIGIT ONE\n  \
    \ (U+0031), because that would result in false positives during\n   comparison,\
    \ authentication, and authorization (e.g., an attacker\n   could easy spoof an\
    \ account \"user1@example.com\").\n   Whereas a naive use of Unicode would make\
    \ such attacks trivially\n   easy, the PRECIS profile defined here for usernames\
    \ generally\n   protects applications from inadvertently causing such problems.\n\
    \   (Similar considerations apply to passwords, although here it is\n   desirable\
    \ to support a wider range of characters so as to maximize\n   entropy for purposes\
    \ of authentication.)\n   The methods defined here might be applicable wherever\
    \ usernames or\n   passwords are used.  However, the methods are not intended\
    \ for use in\n   preparing strings that are not usernames (e.g., Lightweight Directory\n\
    \   Access Protocol (LDAP) distinguished names), nor in cases where\n   identifiers\
    \ or secrets are not strings (e.g., keys and certificates)\n   or require specialized\
    \ handling.\n   This document obsoletes RFC 4013 (the SASLprep profile of stringprep\n\
    \   [RFC3454]) but can be used by technologies other than SASL [RFC4422],\n  \
    \ such as HTTP authentication as specified in [HTTP-BASIC-AUTH] and\n   [HTTP-DIGEST-AUTH].\n\
    \   This document does not modify the handling of internationalized\n   strings\
    \ in usernames and passwords as prescribed by existing\n   application protocols\
    \ that use SASLprep.  If the community that uses\n   such an application protocol\
    \ wishes to modernize its handling of\n   internationalized strings to use PRECIS\
    \ instead of stringprep, it\n   needs to explicitly update the existing application\
    \ protocol\n   definition (one example is [XMPP-ADDR], which is intended to obsolete\n\
    \   [RFC6122]).  Non-coordinated updates to protocol implementations are\n   discouraged\
    \ because they can have a negative impact on\n   interoperability and security.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   Many important terms used in this document are defined in\
    \ [RFC5890],\n   [RFC6365], [RFC7564], and [Unicode].  The term \"non-ASCII space\"\
    \n   refers to any Unicode code point having a Unicode general category of\n \
    \  \"Zs\", with the exception of U+0020 (here called \"ASCII space\").\n   As\
    \ used here, the term \"password\" is not literally limited to a word;\n   i.e.,\
    \ a password could be a passphrase consisting of more than one\n   word, perhaps\
    \ separated by spaces, punctuation, or other\n   non-alphanumeric characters.\n\
    \   Some SASL mechanisms (e.g., CRAM-MD5, DIGEST-MD5, and SCRAM) specify\n   that\
    \ the authentication identity used in the context of such\n   mechanisms is a\
    \ \"simple user name\" (see Section 2 of [RFC4422] as\n   well as [RFC4013]).\
    \  Various application technologies also assume\n   that the identity of a user\
    \ or account takes the form of a username\n   (e.g., authentication for the Hypertext\
    \ Transfer Protocol as\n   specified in [HTTP-BASIC-AUTH] and [HTTP-DIGEST-AUTH]),\
    \ whether or\n   not they use SASL.  Note well that the exact form of a username\
    \ in\n   any particular SASL mechanism or application technology is a matter\n\
    \   for implementation and deployment, and that a username does not\n   necessarily\
    \ map to any particular application identifier (such as the\n   localpart of an\
    \ email address).\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].\n"
- title: 3.  Usernames
  contents:
  - '3.  Usernames

    '
- title: 3.1.  Definition
  contents:
  - "3.1.  Definition\n   This document specifies that a username is a string of Unicode\
    \ code\n   points [Unicode], encoded using UTF-8 [RFC3629], and structured as\
    \ an\n   ordered sequence of \"userparts\".  A userpart is allowed to contain\n\
    \   only code points that are in turn allowed by the PRECIS\n   IdentifierClass\
    \ defined in Section 4.2 of [RFC7564], and thus\n   consists almost exclusively\
    \ of letters and digits.  A username can\n   consist of a single userpart or a\
    \ space-separated sequence of\n   userparts.\n   The syntax for a username is\
    \ defined as follows, using the Augmented\n   Backus-Naur Form (ABNF) [RFC5234].\n\
    \      username   = userpart *(1*SP userpart)\n      userpart   = 1*(idbyte)\n\
    \                   ;\n                   ; an \"idbyte\" is a byte used to represent\
    \ a\n                   ; UTF-8 encoded Unicode code point that can be\n     \
    \              ; contained in a string that conforms to the\n                \
    \   ; PRECIS IdentifierClass\n                   ;\n   All code points and blocks\
    \ not explicitly allowed in the PRECIS\n   IdentifierClass are disallowed; this\
    \ includes private use characters,\n   surrogate code points, and the other code\
    \ points and blocks that were\n   defined as \"Prohibited Output\" in [RFC4013].\
    \  In addition, common\n   constructions such as \"user@example.com\" (e.g., the\
    \ Network Access\n   Identifier from [RFC7542]) are allowed as usernames under\
    \ this\n   specification, as they were under [RFC4013].\n      Implementation\
    \ Note: The username construct defined in this\n      document does not necessarily\
    \ match what all deployed applications\n      might refer to as a \"username\"\
    \ or \"userid\" but instead provides a\n      relatively safe subset of Unicode\
    \ characters that can be used in\n      existing SASL mechanisms and in application\
    \ protocols that use\n      SASL, and even in most application protocols that\
    \ do not currently\n      use SASL.\n   A username MUST NOT be zero bytes in length.\
    \  This rule is to be\n   enforced after any normalization and mapping of code\
    \ points.\n   In protocols that provide usernames as input to a cryptographic\n\
    \   algorithm such as a hash function, the client will need to perform\n   enforcement\
    \ of the rules for the UsernameCaseMapped or\n   UsernameCasePreserved profile\
    \ before applying the algorithm.\n   This specification defines two profiles for\
    \ usernames: one that\n   performs case mapping and one that performs case preservation\
    \ (see\n   further discussion under Section 3.4).\n"
- title: 3.2.  UsernameCaseMapped Profile
  contents:
  - "3.2.  UsernameCaseMapped Profile\n   The definition of the UsernameCaseMapped\
    \ profile of the\n   IdentifierClass is provided in the following sections, including\n\
    \   detailed information about preparation, enforcement, and comparison\n   (for\
    \ details on the distinction between these actions, refer to\n   [RFC7564]).\n"
- title: 3.2.1.  Preparation
  contents:
  - "3.2.1.  Preparation\n   An entity that prepares a string according to this profile\
    \ MUST first\n   map fullwidth and halfwidth characters to their decomposition\n\
    \   mappings (see Unicode Standard Annex #11 [UAX11]).  This is necessary\n  \
    \ because the PRECIS \"HasCompat\" category specified in Section 9.17 of\n   [RFC7564]\
    \ would otherwise forbid fullwidth and halfwidth characters.\n   After applying\
    \ this width-mapping rule, the entity then MUST ensure\n   that the string consists\
    \ only of Unicode code points that conform to\n   the PRECIS IdentifierClass defined\
    \ in Section 4.2 of [RFC7564].  In\n   addition, the entity then MUST encode the\
    \ string as UTF-8 [RFC3629].\n"
- title: 3.2.2.  Enforcement
  contents:
  - "3.2.2.  Enforcement\n   An entity that performs enforcement according to this\
    \ profile MUST\n   prepare a string as described in Section 3.2.1 and MUST also\
    \ apply\n   the rules specified below for the UsernameCaseMapped profile (these\n\
    \   rules MUST be applied in the order shown):\n   1.  Width-Mapping Rule: Applied\
    \ as part of preparation (see above).\n   2.  Additional Mapping Rule: There is\
    \ no additional mapping rule.\n   3.  Case-Mapping Rule: Uppercase and titlecase\
    \ characters MUST be\n       mapped to their lowercase equivalents, preferably\
    \ using Unicode\n       Default Case Folding as defined in the Unicode Standard\
    \ [Unicode]\n       (at the time of this writing, the algorithm is specified in\n\
    \       Chapter 3 of [Unicode7.0], but the chapter number might change in\n  \
    \     a future version of the Unicode Standard); see further discussion\n    \
    \   in Section 3.4.\n   4.  Normalization Rule: Unicode Normalization Form C (NFC)\
    \ MUST be\n       applied to all characters.\n   5.  Directionality Rule: Applications\
    \ MUST apply the \"Bidi Rule\"\n       defined in [RFC5893] to strings that contain\
    \ right-to-left\n       characters (i.e., each of the six conditions of the Bidi\
    \ Rule\n       must be satisfied).\n"
- title: 3.2.3.  Comparison
  contents:
  - "3.2.3.  Comparison\n   An entity that performs comparison of two strings according\
    \ to this\n   profile MUST prepare each string as specified in Section 3.2.1 and\n\
    \   then enforce the rules specified in Section 3.2.2.  The two strings\n   are\
    \ to be considered equivalent if they are an exact octet-for-octet\n   match (sometimes\
    \ called \"bit-string identity\").\n"
- title: 3.3.  UsernameCasePreserved Profile
  contents:
  - "3.3.  UsernameCasePreserved Profile\n   The definition of the UsernameCasePreserved\
    \ profile of the\n   IdentifierClass is provided in the following sections, including\n\
    \   detailed information about preparation, enforcement, and comparison\n   (for\
    \ details on the distinction between these actions, refer to\n   [RFC7564]).\n"
- title: 3.3.1.  Preparation
  contents:
  - "3.3.1.  Preparation\n   An entity that prepares a string according to this profile\
    \ MUST first\n   map fullwidth and halfwidth characters to their decomposition\n\
    \   mappings (see Unicode Standard Annex #11 [UAX11]).  This is necessary\n  \
    \ because the PRECIS \"HasCompat\" category specified in Section 9.17 of\n   [RFC7564]\
    \ would otherwise forbid fullwidth and halfwidth characters.\n   After applying\
    \ this width-mapping rule, the entity then MUST ensure\n   that the string consists\
    \ only of Unicode code points that conform to\n   the PRECIS IdentifierClass defined\
    \ in Section 4.2 of [RFC7564].  In\n   addition, the entity then MUST encode the\
    \ string as UTF-8 [RFC3629].\n"
- title: 3.3.2.  Enforcement
  contents:
  - "3.3.2.  Enforcement\n   An entity that performs enforcement according to this\
    \ profile MUST\n   prepare a string as described in Section 3.3.1 and MUST also\
    \ apply\n   the rules specified below for the UsernameCasePreserved profile\n\
    \   (these rules MUST be applied in the order shown):\n   1.  Width-Mapping Rule:\
    \ Applied as part of preparation (see above).\n   2.  Additional Mapping Rule:\
    \ There is no additional mapping rule.\n   3.  Case-Mapping Rule: Uppercase and\
    \ titlecase characters MUST NOT be\n       mapped to their lowercase equivalents;\
    \ see further discussion in\n       Section 3.4.\n   4.  Normalization Rule: Unicode\
    \ Normalization Form C (NFC) MUST be\n       applied to all characters.\n   5.\
    \  Directionality Rule: Applications MUST apply the \"Bidi Rule\"\n       defined\
    \ in [RFC5893] to strings that contain right-to-left\n       characters (i.e.,\
    \ each of the six conditions of the Bidi Rule\n       must be satisfied).\n"
- title: 3.3.3.  Comparison
  contents:
  - "3.3.3.  Comparison\n   An entity that performs comparison of two strings according\
    \ to this\n   profile MUST prepare each string as specified in Section 3.3.1 and\n\
    \   then enforce the rules specified in Section 3.3.2.  The two strings\n   are\
    \ to be considered equivalent if they are an exact octet-for-octet\n   match (sometimes\
    \ called \"bit-string identity\").\n"
- title: 3.4.  Case Mapping vs. Case Preservation
  contents:
  - "3.4.  Case Mapping vs. Case Preservation\n   In order to accommodate the widest\
    \ range of username constructs in\n   applications, this document defines two\
    \ username profiles:\n   UsernameCaseMapped and UsernameCasePreserved.  These\
    \ two profiles\n   differ only in the Case-Mapping Rule and are otherwise identical.\n\
    \   Case mapping is a matter for the application protocol, protocol\n   implementation,\
    \ or end deployment.  In general, this document\n   suggests that it is preferable\
    \ to apply the UsernameCaseMapped\n   profile and therefore perform case mapping,\
    \ because not doing so can\n   lead to false positives during authentication and\
    \ authorization (as\n   described in [RFC6943]) and can result in confusion among\
    \ end users,\n   given the prevalence of case mapping in many existing protocols\
    \ and\n   applications.  However, there can be good reasons to apply the\n   UsernameCasePreserved\
    \ profile and thus not perform case mapping, such\n   as backward compatibility\
    \ with deployed infrastructure.\n   In particular:\n   o  SASL mechanisms that\
    \ follow the recommendations in this document\n      MUST specify whether and\
    \ when case mapping is to be applied to\n      authentication identifiers.  SASL\
    \ mechanisms SHOULD delay any case\n      mapping to the last possible moment,\
    \ such as when doing a lookup\n      by username, performing username comparisons,\
    \ or generating a\n      cryptographic salt from a username (if the last possible\
    \ moment\n      happens on the server, then decisions about case mapping can be\
    \ a\n      matter of deployment policy).  In keeping with [RFC4422], SASL\n  \
    \    mechanisms are not to apply this or any other profile to\n      authorization\
    \ identifiers, only to authentication identifiers.\n   o  Application protocols\
    \ that use SASL (such as IMAP [RFC3501] and\n      the Extensible Messaging and\
    \ Presence Protocol (XMPP) [RFC6120])\n      and that directly reuse this profile\
    \ MUST specify whether or not\n      case mapping is to be applied to authorization\
    \ identifiers.  Such\n      \"SASL application protocols\" SHOULD delay any case-mapping\
    \ of\n      authorization identifiers to the last possible moment, which\n   \
    \   happens to necessarily be on the server side (this enables\n      decisions\
    \ about case mapping to be a matter of deployment policy).\n      In keeping with\
    \ [RFC4422], SASL application protocols are not to\n      apply this or any other\
    \ profile to authentication identifiers,\n      only to authorization identifiers.\n\
    \   o  Application protocols that do not use SASL (such as HTTP\n      authentication\
    \ with the HTTP Basic and Digest schemes as specified\n      in [HTTP-BASIC-AUTH]\
    \ and [HTTP-DIGEST-AUTH]) but that directly\n      reuse this profile MUST specify\
    \ whether and when case mapping is\n      to be applied to authentication identifiers\
    \ or authorization\n      identifiers, or both.  Such \"non-SASL application protocols\"\
    \n      SHOULD delay any case mapping to the last possible moment, such as\n \
    \     when doing a lookup by username, performing username comparisons,\n    \
    \  or generating a cryptographic salt from a username (if the last\n      possible\
    \ moment happens on the server, then decisions about case\n      mapping can be\
    \ a matter of deployment policy).\n   If the specification for a SASL mechanism,\
    \ SASL application protocol,\n   or non-SASL application protocol uses the UsernameCaseMapped\
    \ profile,\n   it MUST clearly describe whether case mapping is to be applied\
    \ at the\n   level of the protocol itself, implementations thereof, or service\n\
    \   deployments (each of these approaches can be legitimate, depending on\n  \
    \ the application in question).\n"
- title: 3.5.  Application-Layer Constructs
  contents:
  - "3.5.  Application-Layer Constructs\n   Both the UsernameCaseMapped and UsernameCasePreserved\
    \ profiles enable\n   an application protocol, implementation, or deployment to\
    \ create\n   application-layer constructs such as a username that is a space-\n\
    \   separated set of userparts like \"Firstname Middlename Lastname\".\n   Although\
    \ such a construct is not a profile of the PRECIS\n   IdentifierClass (because\
    \ U+0020 SPACE is not allowed in the\n   IdentifierClass), it can be created at\
    \ the application layer because\n   U+0020 SPACE can be used as a separator between\
    \ instances of the\n   PRECIS IdentifierClass (e.g., userparts as defined in this\n\
    \   specification).\n"
- title: 3.6.  Examples
  contents:
  - "3.6.  Examples\n   The following examples illustrate a small number of userparts\
    \ (not\n   usernames) that are consistent with the format defined above (note\n\
    \   that the characters \"<\" and \">\" are used here to delineate the actual\n\
    \   userparts and are not part of the userpart strings).\n      +--------------------------+---------------------------------+\n\
    \      | # | Userpart             | Notes                           |\n      +--------------------------+---------------------------------+\n\
    \      | 1 | <juliet@example.com> | The at-sign is allowed in the   |\n      |\
    \   |                      | PRECIS IdentifierClass          |\n      +--------------------------+---------------------------------+\n\
    \      | 2 | <fussball>           |                                 |\n      +--------------------------+---------------------------------+\n\
    \      | 3 | <fu&#xDF;ball>       | The third character is LATIN    |\n      |\
    \   |                      | SMALL LETTER SHARP S (U+00DF)   |\n      +--------------------------+---------------------------------+\n\
    \      | 4 | <&#x3C0;>            | A userpart of GREEK SMALL       |\n      |\
    \   |                      | LETTER PI (U+03C0)              |\n      +--------------------------+---------------------------------+\n\
    \      | 5 | <&#x3A3;>            | A userpart of GREEK CAPITAL     |\n      |\
    \   |                      | LETTER SIGMA (U+03A3)           |\n      +--------------------------+---------------------------------+\n\
    \      | 6 | <&#x3C3;>            | A userpart of GREEK SMALL       |\n      |\
    \   |                      | LETTER SIGMA (U+03C3)           |\n      +--------------------------+---------------------------------+\n\
    \      | 7 | <&#x3C2;>            | A userpart of GREEK SMALL       |\n      |\
    \   |                      | LETTER FINAL SIGMA (U+03C2)     |\n      +--------------------------+---------------------------------+\n\
    \                   Table 1: A Sample of Legal Userparts\n   Several points are\
    \ worth noting.  Regarding examples 2 and 3:\n   although in German the character\
    \ eszett (LATIN SMALL LETTER SHARP S\n   (U+00DF)) can mostly be used interchangeably\
    \ with the two characters\n   \"ss\", the userparts in these examples are different\
    \ and (if desired)\n   a server would need to enforce a registration policy that\
    \ disallows\n   one of them if the other is registered.  Regarding examples 5,\
    \ 6, and\n   7: optional case-mapping of GREEK CAPITAL LETTER SIGMA (U+03A3) to\n\
    \   lowercase (i.e., to GREEK SMALL LETTER SIGMA (U+03C3)) during\n   comparison\
    \ would result in matching the userparts in examples 5 and\n   6; however, because\
    \ the PRECIS mapping rules do not account for the\n   special status of GREEK\
    \ SMALL LETTER FINAL SIGMA (U+03C2), the\n   userparts in examples 5 and 7 or\
    \ examples 6 and 7 would not be\n   matched during comparison.\n   The following\
    \ examples illustrate strings that are not valid\n   userparts (not usernames)\
    \ because they violate the format defined\n   above.\n      +--------------------------+---------------------------------+\n\
    \      | # | Non-Userpart String  | Notes                           |\n      +--------------------------+---------------------------------+\n\
    \      | 8 | <foo bar>            | Space (U+0020) is disallowed in |\n      |\
    \   |                      | the userpart                    |\n      +--------------------------+---------------------------------+\n\
    \      | 9 | <>                   | Zero-length userpart            |\n      +--------------------------+---------------------------------+\n\
    \      | 10| <henry&#x2163;>      | The sixth character is ROMAN    |\n      |\
    \   |                      | NUMERAL FOUR (U+2163)           |\n      +--------------------------+---------------------------------+\n\
    \      | 11| <&#x265A;>           | A localpart of BLACK CHESS KING |\n      |\
    \   |                      | (U+265A)                        |\n      +--------------------------+---------------------------------+\n\
    \        Table 2: A Sample of Strings That Violate the Userpart Rule\n   Here\
    \ again, several points are worth noting.  Regarding example 8:\n   although this\
    \ is not a valid userpart, it is a valid username because\n   it is a space-separated\
    \ sequence of userparts.  Regarding example 10:\n   the Unicode character ROMAN\
    \ NUMERAL FOUR (U+2163) has a compatibility\n   equivalent of the string formed\
    \ of LATIN CAPITAL LETTER I (U+0049)\n   and LATIN CAPITAL LETTER V (U+0056),\
    \ but characters with\n   compatibility equivalents are not allowed in the PRECIS\n\
    \   IdentifierClass.  Regarding example 11: symbol characters such as\n   BLACK\
    \ CHESS KING (U+265A) are not allowed in the PRECIS\n   IdentifierClass.\n"
- title: 4.  Passwords
  contents:
  - '4.  Passwords

    '
- title: 4.1.  Definition
  contents:
  - "4.1.  Definition\n   This document specifies that a password is a string of Unicode\
    \ code\n   points [Unicode], encoded using UTF-8 [RFC3629], and conformant to\n\
    \   the OpaqueString profile (specified below) of the PRECIS\n   FreeformClass\
    \ defined in Section 4.3 of [RFC7564].\n   The syntax for a password is defined\
    \ as follows, using the Augmented\n   Backus-Naur Form (ABNF) [RFC5234].\n   \
    \   password   = 1*(freebyte)\n                   ;\n                   ; a \"\
    freebyte\" is a byte used to represent a\n                   ; UTF-8 encoded Unicode\
    \ code point that can be\n                   ; contained in a string that conforms\
    \ to the\n                   ; PRECIS FreeformClass\n                   ;\n  \
    \ All code points and blocks not explicitly allowed in the PRECIS\n   FreeformClass\
    \ are disallowed; this includes private use characters,\n   surrogate code points,\
    \ and the other code points and blocks defined\n   as \"Prohibited Output\" in\
    \ Section 2.3 of RFC 4013 (when corrected per\n   [Err1812]).\n   A password MUST\
    \ NOT be zero bytes in length.  This rule is to be\n   enforced after any normalization\
    \ and mapping of code points.\n      Note: Some existing systems allow an empty\
    \ string in places where\n      a password would be expected (e.g., command-line\
    \ tools that might\n      be called from an automated script, or servers that\
    \ might need to\n      be restarted without human intervention).  From the perspective\
    \ of\n      this document (and RFC 4013 before it), these empty strings are\n\
    \      not passwords but are workarounds for the practical difficulty of\n   \
    \   using passwords in certain scenarios.  The prohibition of\n      zero-length\
    \ passwords is not a recommendation regarding password\n      strength (because\
    \ a password of only one byte is highly insecure)\n      but is meant to prevent\
    \ applications from mistakenly omitting a\n      password entirely; such an outcome\
    \ is possible when\n      internationalized characters are accepted, because a\
    \ non-empty\n      sequence of characters can result in a zero-length password\
    \ after\n      canonicalization.\n   In protocols that provide passwords as input\
    \ to a cryptographic\n   algorithm such as a hash function, the client will need\
    \ to perform\n   enforcement of the rules for the OpaqueString profile before\
    \ applying\n   the algorithm, because the password is not available to the server\
    \ in\n   plaintext form.\n"
- title: 4.2.  OpaqueString Profile
  contents:
  - "4.2.  OpaqueString Profile\n   The definition of the OpaqueString profile is\
    \ provided in the\n   following sections, including detailed information about\
    \ preparation,\n   enforcement, and comparison (for details on the distinction\
    \ between\n   these actions, refer to [RFC7564]).\n"
- title: 4.2.1.  Preparation
  contents:
  - "4.2.1.  Preparation\n   An entity that prepares a string according to this profile\
    \ MUST\n   ensure that the string consists only of Unicode code points that\n\
    \   conform to the FreeformClass base string class defined in [RFC7564].\n   In\
    \ addition, the entity MUST encode the string as UTF-8 [RFC3629].\n"
- title: 4.2.2.  Enforcement
  contents:
  - "4.2.2.  Enforcement\n   An entity that performs enforcement according to this\
    \ profile MUST\n   prepare a string as described in Section 4.2.1 and MUST also\
    \ apply\n   the rules specified below for the OpaqueString profile (these rules\n\
    \   MUST be applied in the order shown):\n   1.  Width-Mapping Rule: Fullwidth\
    \ and halfwidth characters MUST NOT\n       be mapped to their decomposition mappings\
    \ (see Unicode Standard\n       Annex #11 [UAX11]).\n   2.  Additional Mapping\
    \ Rule: Any instances of non-ASCII space MUST be\n       mapped to ASCII space\
    \ (U+0020); a non-ASCII space is any Unicode\n       code point having a Unicode\
    \ general category of \"Zs\" (with the\n       exception of U+0020).\n   3.  Case-Mapping\
    \ Rule: Uppercase and titlecase characters MUST NOT be\n       mapped to their\
    \ lowercase equivalents.\n   4.  Normalization Rule: Unicode Normalization Form\
    \ C (NFC) MUST be\n       applied to all characters.\n   5.  Directionality Rule:\
    \ There is no directionality rule.  The \"Bidi\n       Rule\" (defined in [RFC5893])\
    \ and similar rules are unnecessary\n       and inapplicable to passwords, because\
    \ they can reduce the range\n       of characters that are allowed in a string\
    \ and therefore reduce\n       the amount of entropy that is possible in a password.\
    \  Such rules\n       are intended to minimize the possibility that the same string\n\
    \       will be displayed differently on a layout system set for\n       right-to-left\
    \ display and a layout system set for left-to-right\n       display; however,\
    \ passwords are typically not displayed at all\n       and are rarely meant to\
    \ be interoperable across different layout\n       systems in the way that non-secret\
    \ strings like domain names and\n       usernames are.  Furthermore, it is perfectly\
    \ acceptable for\n       opaque strings other than passwords to be presented differently\n\
    \       in different layout systems, as long as the presentation is\n       consistent\
    \ in any given layout system.\n"
- title: 4.2.3.  Comparison
  contents:
  - "4.2.3.  Comparison\n   An entity that performs comparison of two strings according\
    \ to this\n   profile MUST prepare each string as specified in Section 4.2.1 and\n\
    \   then enforce the rules specified in Section 4.2.2.  The two strings\n   are\
    \ to be considered equivalent if they are an exact octet-for-octet\n   match (sometimes\
    \ called \"bit-string identity\").\n"
- title: 4.3.  Examples
  contents:
  - "4.3.  Examples\n   The following examples illustrate a small number of passwords\
    \ that\n   are consistent with the format defined above (note that the\n   characters\
    \ \"<\" and \">\" are used here to delineate the actual\n   passwords and are\
    \ not part of the password strings).\n   +------------------------------------+------------------------------+\n\
    \   | # | Password                       | Notes                        |\n  \
    \ +------------------------------------+------------------------------+\n   |\
    \ 12| <correct horse battery staple> | ASCII space is allowed       |\n   +------------------------------------+------------------------------+\n\
    \   | 13| <Correct Horse Battery Staple> | Differs by case from         |\n  \
    \ |   |                                | example 12                   |\n   +------------------------------------+------------------------------+\n\
    \   | 14| <&#x3C0;&#xDF;&#xE5;>          | Non-ASCII letters are OK     |\n  \
    \ |   |                                | (e.g., GREEK SMALL LETTER    |\n   |\
    \   |                                | PI (U+03C0))                 |\n   +------------------------------------+------------------------------+\n\
    \   | 15| <Jack of &#x2666;s>            | Symbols are OK (e.g., BLACK  |\n  \
    \ |   |                                | DIAMOND SUIT (U+2666))       |\n   +------------------------------------+------------------------------+\n\
    \   | 16| <foo&#x1680;bar>               | OGHAM SPACE MARK (U+1680) is |\n  \
    \ |   |                                | mapped to U+0020, and thus   |\n   |\
    \   |                                | the full string is mapped to |\n   |  \
    \ |                                | <foo bar>                    |\n   +------------------------------------+------------------------------+\n\
    \                   Table 3: A Sample of Legal Passwords\n   The following example\
    \ illustrates a string that is not a valid\n   password because it violates the\
    \ format defined above.\n   +------------------------------------+------------------------------+\n\
    \   | # | Password                       | Notes                        |\n  \
    \ +------------------------------------+------------------------------+\n   |\
    \ 17| <my cat is a &#x9;by>          | Controls are disallowed      |\n   +------------------------------------+------------------------------+\n\
    \            Table 4: A String That Violates the Password Rules\n"
- title: 5.  Use in Application Protocols
  contents:
  - "5.  Use in Application Protocols\n   This specification defines only the PRECIS-based\
    \ rules for the\n   handling of strings conforming to the UsernameCaseMapped and\n\
    \   UsernameCasePreserved profiles of the PRECIS IdentifierClass, and\n   strings\
    \ conforming to the OpaqueString profile of the PRECIS\n   FreeformClass.  It\
    \ is the responsibility of an application protocol\n   to specify the protocol\
    \ slots in which such strings can appear, the\n   entities that are expected to\
    \ enforce the rules governing such\n   strings, and at what points during protocol\
    \ processing or interface\n   handling the rules need to be enforced.  See Section\
    \ 6 of [RFC7564]\n   for guidelines on using PRECIS profiles in applications.\n\
    \   Above and beyond the PRECIS-based rules specified here, application\n   protocols\
    \ can also define application-specific rules governing such\n   strings (rules\
    \ regarding minimum or maximum length, further\n   restrictions on allowable characters\
    \ or character ranges, safeguards\n   to mitigate the effects of visually similar\
    \ characters, etc.),\n   application-layer constructs (see Section 3.5), and related\
    \ matters.\n   Some PRECIS profile definitions encourage entities that enforce\
    \ the\n   rules to be liberal in what they accept.  However, for usernames and\n\
    \   passwords such a policy can be problematic, because it can lead to\n   false\
    \ positives.  An in-depth discussion can be found in [RFC6943].\n"
- title: 6.  Migration
  contents:
  - "6.  Migration\n   The rules defined in this specification differ slightly from\
    \ those\n   defined by the SASLprep specification [RFC4013].  The following\n\
    \   sections describe these differences, along with their implications\n   for\
    \ migration, in more detail.\n"
- title: 6.1.  Usernames
  contents:
  - "6.1.  Usernames\n   Deployments that currently use SASLprep for handling usernames\
    \ might\n   need to scrub existing data when they migrate to the rules defined\
    \ in\n   this specification.  In particular:\n   o  SASLprep specified the use\
    \ of Unicode Normalization Form KC\n      (NFKC), whereas the UsernameCaseMapped\
    \ and UsernameCasePreserved\n      profiles employ Unicode Normalization Form\
    \ C (NFC).  In practice,\n      this change is unlikely to cause significant problems,\
    \ because\n      NFKC provides methods for mapping Unicode code points with\n\
    \      compatibility equivalents to those equivalents, whereas the PRECIS\n  \
    \    IdentifierClass entirely disallows Unicode code points with\n      compatibility\
    \ equivalents (i.e., during comparison, NFKC is more\n      \"aggressive\" about\
    \ finding matches than NFC).  A few examples\n      might suffice to indicate\
    \ the nature of the problem:\n      1.  LATIN SMALL LETTER LONG S (U+017F) is\
    \ compatibility equivalent\n          to LATIN SMALL LETTER S (U+0073).\n    \
    \  2.  ROMAN NUMERAL FOUR (U+2163) is compatibility equivalent to\n          LATIN\
    \ CAPITAL LETTER I (U+0049) and LATIN CAPITAL LETTER V\n          (U+0056).\n\
    \      3.  LATIN SMALL LIGATURE FI (U+FB01) is compatibility equivalent\n    \
    \      to LATIN SMALL LETTER F (U+0066) and LATIN SMALL LETTER I\n          (U+0069).\n\
    \      Under SASLprep, the use of NFKC also handled the mapping of\n      fullwidth\
    \ and halfwidth code points to their decomposition\n      mappings.\n      For\
    \ migration purposes, operators might want to search their\n      database of\
    \ usernames for names containing Unicode code points\n      with compatibility\
    \ equivalents and, where there is no conflict,\n      map those code points to\
    \ their equivalents.  Naturally, it is\n      possible that during this process\
    \ the operator will discover\n      conflicting usernames (e.g., HENRYIV with\
    \ the last two characters\n      being LATIN CAPITAL LETTER I (U+0049) and LATIN\
    \ CAPITAL LETTER V\n      (U+0056) vs. \"HENRYIV\" with the last character being\
    \ ROMAN NUMERAL\n      FOUR (U+2163), which is compatibility equivalent to U+0049\
    \ and\n      U+0056); in these cases, the operator will need to determine how\n\
    \      to proceed -- for instance, by disabling the account whose name\n     \
    \ contains a Unicode code point with a compatibility equivalent.\n      Such cases\
    \ are probably rare, but it is important for operators to\n      be aware of them.\n\
    \   o  SASLprep mapped the \"characters commonly mapped to nothing\" from\n  \
    \    Appendix B.1 of [RFC3454]) to nothing, whereas the PRECIS\n      IdentifierClass\
    \ entirely disallows most of these characters, which\n      correspond to the\
    \ code points from the PRECIS \"M\" category defined\n      under Section 9.13\
    \ of [RFC7564] (with the exception of MONGOLIAN\n      TODO SOFT HYPHEN (U+1806),\
    \ which was \"commonly mapped to nothing\"\n      in Unicode 3.2 but at the time\
    \ of this writing does not have a\n      derived property of Default_Ignorable_Code_Point\
    \ in Unicode 7.0).\n      For migration purposes, the operator might want to remove\
    \ from\n      usernames any code points contained in the PRECIS \"M\" category\n\
    \      (e.g., SOFT HYPHEN (U+00AD)).  Because these code points would\n      have\
    \ been \"mapped to nothing\" in stringprep, in practice a user\n      would not\
    \ notice the difference if, upon migration to PRECIS, the\n      code points are\
    \ removed.\n   o  SASLprep allowed uppercase and titlecase characters, whereas\
    \ the\n      UsernameCaseMapped profile maps uppercase and titlecase characters\n\
    \      to their lowercase equivalents (by contrast, the\n      UsernameCasePreserved\
    \ profile matches SASLprep in this regard).\n      For migration purposes, the\
    \ operator can use either the\n      UsernameCaseMapped profile (thus losing the\
    \ case information) or\n      the UsernameCasePreserved profile (thus ignoring\
    \ case difference\n      when comparing usernames).\n"
- title: 6.2.  Passwords
  contents:
  - "6.2.  Passwords\n   Depending on local service policy, migration from RFC 4013\
    \ to this\n   specification might not involve any scrubbing of data (because\n\
    \   passwords might not be stored in the clear anyway); however, service\n   providers\
    \ need to be aware of possible issues that might arise during\n   migration. \
    \ In particular:\n   o  SASLprep specified the use of Unicode Normalization Form\
    \ KC\n      (NFKC), whereas the OpaqueString profile employs Unicode\n      Normalization\
    \ Form C (NFC).  Because NFKC is more aggressive about\n      finding matches\
    \ than NFC, in practice this change is unlikely to\n      cause significant problems\
    \ and indeed has the security benefit of\n      probably resulting in fewer false\
    \ positives when comparing\n      passwords.  A few examples might suffice to\
    \ indicate the nature of\n      the problem:\n      1.  LATIN SMALL LETTER LONG\
    \ S (U+017F) is compatibility equivalent\n          to LATIN SMALL LETTER S (U+0073).\n\
    \      2.  ROMAN NUMERAL FOUR (U+2163) is compatibility equivalent to\n      \
    \    LATIN CAPITAL LETTER I (U+0049) and LATIN CAPITAL LETTER V\n          (U+0056).\n\
    \      3.  LATIN SMALL LIGATURE FI (U+FB01) is compatibility equivalent\n    \
    \      to LATIN SMALL LETTER F (U+0066) and LATIN SMALL LETTER I\n          (U+0069).\n\
    \      Under SASLprep, the use of NFKC also handled the mapping of\n      fullwidth\
    \ and halfwidth code points to their decomposition\n      mappings.  Although\
    \ it is expected that code points with\n      compatibility equivalents are rare\
    \ in existing passwords, some\n      passwords that matched when SASLprep was\
    \ used might no longer work\n      when the rules in this specification are applied.\n\
    \   o  SASLprep mapped the \"characters commonly mapped to nothing\" from\n  \
    \    Appendix B.1 of [RFC3454]) to nothing, whereas the PRECIS\n      FreeformClass\
    \ entirely disallows such characters, which correspond\n      to the code points\
    \ from the PRECIS \"M\" category defined under\n      Section 9.13 of [RFC7564]\
    \ (with the exception of MONGOLIAN TODO\n      SOFT HYPHEN (U+1806), which was\
    \ commonly mapped to nothing in\n      Unicode 3.2 but at the time of this writing\
    \ is allowed by\n      Unicode 7.0).  In practice, this change will probably have\
    \ no\n      effect on comparison, but user-oriented software might reject such\n\
    \      code points instead of ignoring them during password preparation.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has made the updates described below.\n"
- title: 7.1.  UsernameCaseMapped Profile
  contents:
  - "7.1.  UsernameCaseMapped Profile\n   IANA has added the following entry to the\
    \ \"PRECIS Profiles\" registry.\n   Name:  UsernameCaseMapped.\n   Base Class:\
    \  IdentifierClass.\n   Applicability:  Usernames in security and application\
    \ protocols.\n   Replaces:  The SASLprep profile of stringprep.\n   Width-Mapping\
    \ Rule:  Map fullwidth and halfwidth characters to their\n      decomposition\
    \ mappings.\n   Additional Mapping Rule:  None.\n   Case-Mapping Rule:  Map uppercase\
    \ and titlecase characters to\n      lowercase.\n   Normalization Rule:  NFC.\n\
    \   Directionality Rule:  The \"Bidi Rule\" defined in RFC 5893 applies.\n   Enforcement:\
    \  To be defined by security or application protocols that\n      use this profile.\n\
    \   Specification:  RFC 7613 (this document), Section 3.2.\n"
- title: 7.2.  UsernameCasePreserved Profile
  contents:
  - "7.2.  UsernameCasePreserved Profile\n   IANA has added the following entry to\
    \ the \"PRECIS Profiles\" registry.\n   Name:  UsernameCasePreserved.\n   Base\
    \ Class:  IdentifierClass.\n   Applicability:  Usernames in security and application\
    \ protocols.\n   Replaces:  The SASLprep profile of stringprep.\n   Width-Mapping\
    \ Rule:  Map fullwidth and halfwidth characters to their\n      decomposition\
    \ mappings.\n   Additional Mapping Rule:  None.\n   Case-Mapping Rule:  None.\n\
    \   Normalization Rule:  NFC.\n   Directionality Rule:  The \"Bidi Rule\" defined\
    \ in RFC 5893 applies.\n   Enforcement:  To be defined by security or application\
    \ protocols that\n      use this profile.\n   Specification:  RFC 7613 (this document),\
    \ Section 3.3.\n"
- title: 7.3.  OpaqueString Profile
  contents:
  - "7.3.  OpaqueString Profile\n   IANA has added the following entry to the \"PRECIS\
    \ Profiles\" registry.\n   Name:  OpaqueString.\n   Base Class:  FreeformClass.\n\
    \   Applicability:  Passwords and other opaque strings in security and\n     \
    \ application protocols.\n   Replaces:  The SASLprep profile of stringprep.\n\
    \   Width-Mapping Rule:  None.\n   Additional Mapping Rule:  Map non-ASCII space\
    \ characters to ASCII\n      space.\n   Case-Mapping Rule:  None.\n   Normalization\
    \ Rule:  NFC.\n   Directionality Rule:  None.\n   Enforcement:  To be defined\
    \ by security or application protocols that\n      use this profile.\n   Specification:\
    \  RFC 7613 (this document), Section 4.2.\n"
- title: 7.4.  Stringprep Profile
  contents:
  - "7.4.  Stringprep Profile\n   The stringprep specification [RFC3454] did not provide\
    \ for entries in\n   the \"Stringprep Profiles\" registry to have any state except\
    \ \"Current\"\n   or \"Not Current\".  Because this document obsoletes RFC 4013,\
    \ which\n   registered the SASLprep profile of stringprep, IANA has marked that\n\
    \   profile as \"Not Current\" and cited this document as an additional\n   reference.\n"
- title: 8.  Security Considerations
  contents:
  - '8.  Security Considerations

    '
- title: 8.1.  Password/Passphrase Strength
  contents:
  - "8.1.  Password/Passphrase Strength\n   The ability to include a wide range of\
    \ characters in passwords and\n   passphrases can increase the potential for creating\
    \ a strong password\n   with high entropy.  However, in practice, the ability\
    \ to include such\n   characters ought to be weighed against the possible need\
    \ to reproduce\n   them on various devices using various input methods.\n"
- title: 8.2.  Identifier Comparison
  contents:
  - "8.2.  Identifier Comparison\n   The process of comparing identifiers (such as\
    \ SASL simple user names,\n   authentication identifiers, and authorization identifiers)\
    \ can lead\n   to either false negatives or false positives, both of which have\n\
    \   security implications.  A more detailed discussion can be found in\n   [RFC6943].\n"
- title: 8.3.  Reuse of PRECIS
  contents:
  - "8.3.  Reuse of PRECIS\n   The security considerations described in [RFC7564]\
    \ apply to the\n   IdentifierClass and FreeformClass base string classes used\
    \ in this\n   document for usernames and passwords, respectively.\n"
- title: 8.4.  Reuse of Unicode
  contents:
  - "8.4.  Reuse of Unicode\n   The security considerations described in [UTS39] apply\
    \ to the use of\n   Unicode characters in usernames and passwords.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of\n            \
    \  ISO 10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629,\n              November\
    \ 2003, <http://www.rfc-editor.org/info/rfc3629>.\n   [RFC5234]  Crocker, D.,\
    \ Ed., and P. Overell, \"Augmented BNF for\n              Syntax Specifications:\
    \ ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n\
    \              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5890]  Klensin,\
    \ J., \"Internationalized Domain Names for\n              Applications (IDNA):\
    \ Definitions and Document Framework\",\n              RFC 5890, DOI 10.17487/RFC5890,\
    \ August 2010,\n              <http://www.rfc-editor.org/info/rfc5890>.\n   [RFC6365]\
    \  Hoffman, P. and J. Klensin, \"Terminology Used in\n              Internationalization\
    \ in the IETF\", BCP 166, RFC 6365,\n              DOI 10.17487/RFC6365, September\
    \ 2011,\n              <http://www.rfc-editor.org/info/rfc6365>.\n   [RFC7564]\
    \  Saint-Andre, P. and M. Blanchet, \"PRECIS Framework:\n              Preparation,\
    \ Enforcement, and Comparison of\n              Internationalized Strings in Application\
    \ Protocols\",\n              RFC 7564, DOI 10.17487/RFC7564, May 2015,\n    \
    \          <http://www.rfc-editor.org/info/rfc7564>.\n   [UAX11]    Unicode Standard\
    \ Annex #11, \"East Asian Width\", edited by\n              Ken Lunde.  An integral\
    \ part of The Unicode Standard,\n              <http://unicode.org/reports/tr11/>.\n\
    \   [Unicode]  The Unicode Consortium, \"The Unicode Standard\",\n           \
    \   <http://www.unicode.org/versions/latest/>.\n   [Unicode7.0]\n            \
    \  The Unicode Consortium, \"The Unicode Standard,\n              Version 7.0.0\"\
    , (Mountain View, CA: The Unicode\n              Consortium, 2014 ISBN 978-1-936213-09-2),\n\
    \              <http://www.unicode.org/versions/Unicode7.0.0/>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [Err1812]  RFC Errata, Erratum ID 1812, RFC\
    \ 4013,\n              <http://www.rfc-editor.org>.\n   [HTTP-BASIC-AUTH]\n  \
    \            Reschke, J., \"The 'Basic' HTTP Authentication Scheme\",\n      \
    \        Work in Progress, draft-ietf-httpauth-basicauth-update-07,\n        \
    \      February 2015.\n   [HTTP-DIGEST-AUTH]\n              Shekh-Yusef, R., Ed.,\
    \ Ahrens, D., and S. Bremer, \"HTTP\n              Digest Access Authentication\"\
    , Work in Progress,\n              draft-ietf-httpauth-digest-19, April 2015.\n\
    \   [RFC20]    Cerf, V., \"ASCII format for network interchange\", STD 80,\n \
    \             RFC 20, DOI 10.17487/RFC0020, October 1969,\n              <http://www.rfc-editor.org/info/rfc20>.\n\
    \   [RFC3454]  Hoffman, P. and M. Blanchet, \"Preparation of\n              Internationalized\
    \ Strings (\"stringprep\")\", RFC 3454,\n              DOI 10.17487/RFC3454, December\
    \ 2002,\n              <http://www.rfc-editor.org/info/rfc3454>.\n   [RFC3501]\
    \  Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL -\n              VERSION 4rev1\"\
    , RFC 3501, DOI 10.17487/RFC3501,\n              March 2003, <http://www.rfc-editor.org/info/rfc3501>.\n\
    \   [RFC4013]  Zeilenga, K., \"SASLprep: Stringprep Profile for User Names\n \
    \             and Passwords\", RFC 4013, DOI 10.17487/RFC4013,\n             \
    \ February 2005, <http://www.rfc-editor.org/info/rfc4013>.\n   [RFC4422]  Melnikov,\
    \ A., Ed., and K. Zeilenga, Ed., \"Simple\n              Authentication and Security\
    \ Layer (SASL)\", RFC 4422,\n              DOI 10.17487/RFC4422, June 2006,\n\
    \              <http://www.rfc-editor.org/info/rfc4422>.\n   [RFC4616]  Zeilenga,\
    \ K., Ed., \"The PLAIN Simple Authentication and\n              Security Layer\
    \ (SASL) Mechanism\", RFC 4616,\n              DOI 10.17487/RFC4616, August 2006,\n\
    \              <http://www.rfc-editor.org/info/rfc4616>.\n   [RFC5802]  Newman,\
    \ C., Menon-Sen, A., Melnikov, A., and N. Williams,\n              \"Salted Challenge\
    \ Response Authentication Mechanism\n              (SCRAM) SASL and GSS-API Mechanisms\"\
    , RFC 5802,\n              DOI 10.17487/RFC5802, July 2010,\n              <http://www.rfc-editor.org/info/rfc5802>.\n\
    \   [RFC5891]  Klensin, J., \"Internationalized Domain Names in\n            \
    \  Applications (IDNA): Protocol\", RFC 5891,\n              DOI 10.17487/RFC5891,\
    \ August 2010,\n              <http://www.rfc-editor.org/info/rfc5891>.\n   [RFC5893]\
    \  Alvestrand, H., Ed., and C. Karp, \"Right-to-Left Scripts\n              for\
    \ Internationalized Domain Names for Applications\n              (IDNA)\", RFC\
    \ 5893, DOI 10.17487/RFC5893, August 2010,\n              <http://www.rfc-editor.org/info/rfc5893>.\n\
    \   [RFC5894]  Klensin, J., \"Internationalized Domain Names for\n           \
    \   Applications (IDNA): Background, Explanation, and\n              Rationale\"\
    , RFC 5894, DOI 10.17487/RFC5894, August 2010,\n              <http://www.rfc-editor.org/info/rfc5894>.\n\
    \   [RFC6120]  Saint-Andre, P., \"Extensible Messaging and Presence\n        \
    \      Protocol (XMPP): Core\", RFC 6120, DOI 10.17487/RFC6120,\n            \
    \  March 2011, <http://www.rfc-editor.org/info/rfc6120>.\n   [RFC6122]  Saint-Andre,\
    \ P., \"Extensible Messaging and Presence\n              Protocol (XMPP): Address\
    \ Format\", RFC 6122,\n              DOI 10.17487/RFC6122, March 2011,\n     \
    \         <http://www.rfc-editor.org/info/rfc6122>.\n   [RFC6943]  Thaler, D.,\
    \ Ed., \"Issues in Identifier Comparison for\n              Security Purposes\"\
    , RFC 6943, DOI 10.17487/RFC6943,\n              May 2013, <http://www.rfc-editor.org/info/rfc6943>.\n\
    \   [RFC7542]  DeKok, A., \"The Network Access Identifier\", RFC 7542,\n     \
    \         DOI 10.17487/RFC7542, May 2015,\n              <http://www.rfc-editor.org/info/rfc7542>.\n\
    \   [UTS39]    Unicode Technical Standard #39, \"Unicode Security\n          \
    \    Mechanisms\", edited by Mark Davis and Michel Suignard,\n              <http://unicode.org/reports/tr39/>.\n\
    \   [XMPP-ADDR]\n              Saint-Andre, P., \"Extensible Messaging and Presence\n\
    \              Protocol (XMPP): Address Format\", Work in Progress,\n        \
    \      draft-ietf-xmpp-6122bis-24, June 2015.\n"
- title: Appendix A.  Differences from RFC 4013
  contents:
  - "Appendix A.  Differences from RFC 4013\n   This document builds upon the PRECIS\
    \ framework defined in [RFC7564],\n   which differs fundamentally from the stringprep\
    \ technology [RFC3454]\n   used in SASLprep [RFC4013].  The primary difference\
    \ is that\n   stringprep profiles allowed all characters except those characters\n\
    \   that were explicitly disallowed, whereas PRECIS profiles disallow all\n  \
    \ characters except those characters that are explicitly allowed (this\n   \"\
    inclusion model\" was originally used for internationalized domain\n   names in\
    \ [RFC5891]; see [RFC5894] for further discussion).  It is\n   important to keep\
    \ this distinction in mind when comparing the\n   technology defined in this document\
    \ to SASLprep [RFC4013].\n   The following substantive modifications were made\
    \ from RFC 4013.\n   o  A single SASLprep algorithm was replaced by three separate\n\
    \      algorithms: one for usernames with case mapping, one for usernames\n  \
    \    with case preservation, and one for passwords.\n   o  The new preparation\
    \ algorithms use PRECIS instead of a stringprep\n      profile.  The new algorithms\
    \ work independently of Unicode\n      versions.\n   o  As recommended in the\
    \ PRECIS framework, changed the Unicode\n      normalization form from NFKC to\
    \ NFC.\n   o  Some Unicode code points that were mapped to nothing in RFC 4013\n\
    \      are simply disallowed by PRECIS.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document borrows some text from [RFC4013] and [RFC6120].\n\
    \   The following individuals provided helpful feedback on this document:\n  \
    \ Marc Blanchet, Ben Campbell, Alan DeKok, Joe Hildebrand, Jeffrey\n   Hutzelman,\
    \ Simon Josefsson, Jonathan Lennox, James Manger, Matt\n   Miller, Chris Newman,\
    \ Yutaka OIWA, Pete Resnick, Andrew Sullivan,\n   Nico Williams, and Yoshiro YONEYA.\
    \  Nico Williams in particular\n   deserves special recognition for providing\
    \ text that was used in\n   Section 3.4.  Thanks also to Takahiro NEMOTO and Yoshiro\
    \ YONEYA for\n   implementation feedback.\n   Robert Sparks and Derek Atkins reviewed\
    \ the document on behalf of the\n   General Area Review Team and the Security\
    \ Directorate, respectively.\n   Benoit Claise and Stephen Farrell provided helpful\
    \ input during IESG\n   review.\n   Thanks to Matt Miller as document shepherd,\
    \ Marc Blanchet and Yoshiro\n   YONEYA as working group chairs, and Pete Resnick\
    \ and Barry Leiba as\n   area directors.\n   Peter Saint-Andre wishes to acknowledge\
    \ Cisco Systems, Inc., for\n   employing him during his work on earlier draft\
    \ versions of this\n   document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Peter Saint-Andre\n   &yet\n   Email: peter@andyet.com\n\
    \   URI:   https://andyet.com/\n   Alexey Melnikov\n   Isode Ltd\n   5 Castle\
    \ Business Village\n   36 Station Road\n   Hampton, Middlesex  TW12 2BX\n   United\
    \ Kingdom\n   Email: Alexey.Melnikov@isode.com\n"
