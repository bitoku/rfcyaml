- title: __initial_text__
  contents:
  - "            Session Initiation Protocol (SIP) Extension for\n              Partial\
    \ Notification of Presence Information\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   By default, presence delivered using the presence event package\
    \ for\n   the Session Initiation Protocol (SIP) is represented in the Presence\n\
    \   Information Data Format (PIDF).  A PIDF document contains a set of\n   elements,\
    \ each representing a different aspect of the presence being\n   reported.  When\
    \ any subset of the elements change, even just a single\n   element, a new document\
    \ containing the full set of elements is\n   delivered.  This memo defines an\
    \ extension allowing delivery of only\n   the presence data that has actually\
    \ changed.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Conventions  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Introduction to the Partial Notification Mechanism . .\
    \ . . . .  3\n     3.1.  Basic Presence Agent Operation . . . . . . . . . . .\
    \ . . .  3\n     3.2.  Operation with Partial Notification  . . . . . . . . .\
    \ . .  3\n   4.  Client and Server Operations . . . . . . . . . . . . . . . .\
    \ .  4\n     4.1.  Content-Type for Partial Notifications . . . . . . . . . .\
    \  4\n     4.2.  Watcher Generation of SUBSCRIBE Requests . . . . . . . . .  4\n\
    \     4.3.  Presence Agent Processing of SUBSCRIBE Requests  . . . . .  4\n  \
    \   4.4.  Presence Agent Generation of Partial Notifications . . . .  5\n    \
    \ 4.5.  Watcher Processing of NOTIFY Requests  . . . . . . . . . .  6\n   5. \
    \ Examples . . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n   6.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 13\n   7.  Acknowledgments\
    \  . . . . . . . . . . . . . . . . . . . . . . . 13\n   8.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 14\n     8.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . . 14\n     8.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A presence event package for Session Initiation Protocol\
    \ (SIP) [3]\n   allows users ('watchers') to subscribe to other users'\n   ('presentities')\
    \ presence information.  The presence information is\n   composed of multiple\
    \ pieces of data that are delivered to the\n   watcher.  The size of the presence\
    \ information document can be large\n   (i.e., the presence document can contain\
    \ an arbitrary number of\n   elements called presence tuples that convey data).\
    \  As specified in\n   RFC 2778 [9] and the presence event package for SIP [3],\
    \ a Presence\n   Agent (PA) always delivers in presence notifications all the\
    \ presence\n   data that has been authorized for a certain watcher.  This is done\n\
    \   regardless of what presence data has changed compared to last\n   notification.\
    \  It may not be reasonable to send the complete presence\n   information over\
    \ low bandwidth and high latency links when only part\n   of the presence information\
    \ has actually changed.  This may end up\n   degrading the presence service and\
    \ causing bad perception at the\n   watcher side.\n   This document defines a\
    \ partial notification approach where the\n   presence server delivers to the\
    \ watchers only those parts of the\n   presence information that have changed\
    \ compared to the presence\n   information sent in the previous notifications.\
    \  This reduces the\n   amount of data that is transported over the network.\n\
    \   This mechanism utilizes the presence event package for SIP [3] and a\n   new\
    \ MIME type for carrying partial Presence Information Data Format\n   documents\
    \ [2].\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in RFC 2119\
    \ [1] and\n   indicate requirement levels for compliant implementations.\n   This\
    \ document makes use of the vocabulary defined in RFC 2778 [9],\n   RFC 3265 [6],\
    \ the presence event package for SIP [3], and the PIDF\n   extension for Partial\
    \ Presence [2].\n"
- title: 3.  Introduction to the Partial Notification Mechanism
  contents:
  - "3.  Introduction to the Partial Notification Mechanism\n   This chapter briefly\
    \ introduces the regular functionality of the\n   presence service, and gives\
    \ an overview of the partial notification\n   solution.  This section is informational\
    \ in nature.  It does not\n   contain any normative statements.\n"
- title: 3.1.  Basic Presence Agent Operation
  contents:
  - "3.1.  Basic Presence Agent Operation\n   The presence service normally operates\
    \ so that a watcher sends a SIP\n   SUBSCRIBE request targeted to the presentity.\
    \  The request is routed\n   to the presence agent where the presentity's presence\
    \ information is\n   stored.  The SUBSCRIBE request can include an Accept header\
    \ field\n   that indicates the supported content types.\n   The presence agent\
    \ receives the SUBSCRIBE request and if there is no\n   Accept header indicating\
    \ the supported content types or the Accept\n   header contains the default PIDF\
    \ content type, the PA will generate\n   presence notifications using the default\
    \ PIDF format [5].  The PIDF\n   document can contain one or multiple XML elements.\
    \  The PIDF document\n   includes a set of elements defined in RFC 2778 [9], and\
    \ its\n   extensions for representing the presence information.  This PIDF\n \
    \  document will be carried in the body of a NOTIFY request constructed\n   as\
    \ per RFC 3265 [6].  During basic operation, the presence document\n   always\
    \ contains the full state corresponding to the presence status\n   of the presentity,\
    \ as determined by the PA local policy and\n   authorization rules.\n"
- title: 3.2.  Operation with Partial Notification
  contents:
  - "3.2.  Operation with Partial Notification\n   The partial notification mechanism\
    \ allows a watcher to request that,\n   whenever possible, notifications contain\
    \ only presence information\n   that has actually changed.  A watcher that wants\
    \ to receive partial\n   notifications according to this document, creates a SIP\
    \ SUBSCRIBE\n   request similar to that of a regular presence subscription.  However,\n\
    \   the SIP SUBSCRIBE request contains an Accept header field whose value\n  \
    \ contains the \"application/pidf-diff+xml\" tag as well as the\n   \"application/pidf+xml\"\
    \ tag.\n   When the presence agent receives the subscription, it examines the\n\
    \   Accept header field value and if the \"application/pidf-diff+xml\"\n   value\
    \ is present, it can decide to use the partial notifications\n   mechanism specified\
    \ in this memo.  The presence agent builds NOTIFY\n   requests that contain the\
    \ Content-Type header field set to\n   \"application/pidf-diff+xml\".  The first\
    \ NOTIFY request that contains\n   presence information will contain a full presence\
    \ document.\n   Subsequent NOTIFY requests can contain partial presence documents.\n\
    \   This behavior is described in detail in Section 4.\n"
- title: 4.  Client and Server Operations
  contents:
  - "4.  Client and Server Operations\n   Unless otherwise specified in this document,\
    \ the regular watcher and\n   presence agent behavior is applied as defined in\
    \ the SIP presence\n   event package [3].\n"
- title: 4.1.  Content-Type for Partial Notifications
  contents:
  - "4.1.  Content-Type for Partial Notifications\n   Entities supporting the partial\
    \ notification extension described in\n   this document MUST support the 'application/pidf-diff+xml'\
    \ content\n   type specified in the PIDF extension for partial presence [2].\n"
- title: 4.2.  Watcher Generation of SUBSCRIBE Requests
  contents:
  - "4.2.  Watcher Generation of SUBSCRIBE Requests\n   A SUBSCRIBE request can be\
    \ used to negotiate the preferred content\n   type to be used in the notifications.\
    \  The Accept header field is\n   used for this purpose as specified in RFC 3261\
    \ [4].  When a watcher\n   wants to allow the presence agent to send partial notifications\
    \ the\n   watcher MUST include an Accept header field in its SUBSCRIBE request.\n\
    \   The value of the Accept header field MUST contain 'application/\n   pidf-diff+xml'\
    \ (in addition to 'application/pidf+xml' required by the\n   SIP presence event\
    \ package [3]).  The watcher MAY include a \"q\"\n   parameter with each Accept\
    \ value to indicate the relative preference\n   of that value.\n"
- title: 4.3.  Presence Agent Processing of SUBSCRIBE Requests
  contents:
  - "4.3.  Presence Agent Processing of SUBSCRIBE Requests\n   The presence agent\
    \ receives subscriptions from watchers and generates\n   notifications according\
    \ to the SIP presence event package [3].  If\n   the watcher has indicated the\
    \ supported content types in the Accept\n   header field of the SUBSCRIBE request,\
    \ the presence agent compares\n   the values included in the Accept header field\
    \ with the supported\n   ones, and decides which one to use.  If the watcher has\
    \ indicated\n   preferred accept values by means of \"q\" parameters, the presence\n\
    \   agent SHOULD base the decision on those preferences, unless otherwise\n  \
    \ indicated by the presence agent local policy.\n"
- title: 4.4.  Presence Agent Generation of Partial Notifications
  contents:
  - "4.4.  Presence Agent Generation of Partial Notifications\n   Once a subscription\
    \ is accepted and installed, the PA MUST deliver\n   the full state of the presence\
    \ information in the first partial\n   notification that contains a presence document\
    \ having <pidf-full>\n   root element.  If the presence agent decides to send\
    \ notifications\n   that include a presence document according to this specification,\
    \ the\n   presence agent MUST build a presence document according to the PIDF\n\
    \   extension for Partial Presence [2] and MUST set the Content-Type\n   header\
    \ field to the value 'application/pidf-diff+xml'.\n   When using the 'application/pidf-diff+xml'\
    \ MIME type, the PA MUST\n   include a \"version\" attribute; for the first partial\
    \ notification\n   (within a given subscription), the PA MUST initialize version\
    \ to\n   value one (1).  This version counter is scoped to the subscription,\n\
    \   and is incremented by one within each partial notification.  The\n   version\
    \ value is only reset when the given subscription is\n   terminated.  It is not\
    \ reset when the subscription is refreshed.\n   When the PA generates a partial\
    \ presence document, the PA SHOULD\n   include only that presence information\
    \ that has changed compared to\n   the previous notifications.  It is up to the\
    \ PA's local policy to\n   determine what is considered as a change to the previous\
    \ state.\n   The PA MUST construct the partial presence document according to\
    \ the\n   following logic:\n   o  The PA MUST construct the presence information\
    \ according to the\n      PIDF extension for Partial Presence [2].  All the information\
    \ that\n      has been added to the presence document is listed inside <add>\n\
    \      elements.  All information that has been removed from the presence\n  \
    \    document is listed inside <remove> elements, and all information\n      that\
    \ has been changed is listed under <replace> elements.\n   o  The PA MUST include\
    \ a \"version\" attribute in the presence\n      document.  The PA MUST increment\
    \ the version number by one\n      compared to the earlier successfully sent presence\
    \ document in the\n      PIDF extension for Partial Presence [2] format to the\
    \ watcher\n      associated with a certain subscription.\n   The PA MUST NOT send\
    \ a new NOTIFY request that contains a partial\n   notification for the same Request-URI\
    \ until it has received a final\n   response from the watcher for the previous\
    \ one or the previous NOTIFY\n   request has timed out.\n   When the PA receives\
    \ a SUBSCRIBE request (refresh or termination)\n   within the associated subscription,\
    \ it SHOULD send a NOTIFY request\n   containing the full presence document.\n\
    \   If the PA has used other than the 'application/pidf-diff+xml' content\n  \
    \ type in notifications within the existing subscription, and changes\n   to deliver\
    \ partial notifications, the PA MUST deliver the full state\n   of the presence\
    \ information containing a presence document having\n   <pidf-full> root element\
    \ as the first partial notification.\n"
- title: 4.5.  Watcher Processing of NOTIFY Requests
  contents:
  - "4.5.  Watcher Processing of NOTIFY Requests\n   Watcher processes all NOTIFY\
    \ requests that contain 'application/\n   pidf+xml' content type as specified\
    \ in RFC 3856 [3].\n   When the watcher receives the first notification containing\
    \ the\n   'application/pidf-diff+xml' MIME body the watcher MUST initialize an\n\
    \   internal version counter, related to this subscription, to the value\n   of\
    \ the \"version\" included in the presence document.  This version\n   counter\
    \ is scoped to the subscription.  The watcher MUST also store\n   the received\
    \ full presence document as its local copy.\n   When the watcher receives a subsequent\
    \ 'application/pidf-diff+xml'\n   encoded presence document the watcher MUST compare\
    \ the received\n   \"version\" attribute with the local version counter.  If the\
    \ watcher\n   receives a presence document with the \"version\" attribute value\
    \ equal\n   or lower than the locally stored version number, it is considered\
    \ a\n   PA failure, and the watcher SHOULD discard the document without\n   further\
    \ processing.  Otherwise, the watcher MUST modify its locally\n   stored information\
    \ according to the following logic:\n   o  If the root element of the presence\
    \ document is <pidf-full>, the\n      watcher must replace its local copy of the\
    \ presence document with\n      the presence document received in the 'application/pidf-diff+xml'\n\
    \      body and set the internal version value to the value of the\n      \"version\"\
    \ attribute included in the presence document.\n   o  If the root element of the\
    \ presence document is <pidf-diff> and\n      the received version number is incremented\
    \ by one compared with\n      the local version counter, the watcher MUST apply\
    \ the changes to\n      its local copy of the full presence document indicated\
    \ in the\n      received 'application/pidf-diff+xml' document as specified in\
    \ PIDF\n      extension for Partial Presence [2].  The watcher MUST increment\n\
    \      the local version counter by one.\n   o  If the root element of the presence\
    \ document is <pidf-diff> and\n      the received \"version\" value is higher\
    \ by more than one compared\n      with the locally stored value, the watcher\
    \ assumes that one or\n      more NOTIFYs were lost.  The watcher SHOULD either\
    \ refresh the\n      subscription in order to receive a full presence document\
    \ or\n      terminate the subscription.\n   If the watcher encounters a processing\
    \ error while processing the\n   received 'application/pidf-diff+xml' encoded\
    \ presence document, look\n   at Section 5.1 of [8].  In this case, the watcher\
    \ SHOULD renew the\n   subscription.  The watcher MAY also fall back to normal\
    \ presence\n   operations by not inserting 'application/pidf-diff+xml' in a new\n\
    \   SUBSCRIBE request.  It is hardly reasonable to signal this error to\n   the\
    \ notifier even if the error exists in the notifier process.\n   If the PA changes\
    \ the content type used in notifications within the\n   existing subscription,\
    \ the watcher MUST discard all the previously\n   received presence information\
    \ (except local version counter) from\n   that particular presentity and process\
    \ the new content as specified\n   for that content type.  The local version counter\
    \ MUST NOT be\n   discarded because if the PA changes back to 'application/\n\
    \   pidf-diff+xml', the MIME type version counter will continue to\n   increase\
    \ from the last version value.\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   The following message flow shows an example applying the partial\n\
    \   notifications mechanism.\n   A watcher sends a SUBSCRIBE request declaring\
    \ support for the default\n   presence format ('application/pidf+xml) and for\
    \ the partial\n   notification format ('application/pidf-diff+xml') in the Accept\n\
    \   header field value.  The watcher uses the \"q\" parameter to set the\n   preference\
    \ for receiving partial notifications.  The PA accepts the\n   subscription and,\
    \ based on the \"q\" parameter value, selects to send\n   partial notifications\
    \ in NOTIFY requests.  The first NOTIFY request\n   includes the full state of\
    \ presence information.  The following\n   notifications only include information\
    \ about delta of the presence\n   information from the previous NOTIFY requests.\n\
    \       Watcher                   Presence Agent                  PUA\n      \
    \      | F1 SUBSCRIBE              |                         |\n            |-------------------------->|\
    \                         |\n            | F2 200 OK                 |       \
    \                  |\n            |<--------------------------|              \
    \           |\n            | F3 NOTIFY                 |                     \
    \    |\n            |<--------------------------|                         |\n\
    \            | F4 200 OK                 |                         |\n       \
    \     |-------------------------->|                         |\n            | \
    \                          |                         |\n            |        \
    \                   |   Update presence       |\n            |               \
    \            |<----------------------- |\n            |                      \
    \     |                         |\n            | F5 NOTIFY                 | \
    \                        |\n            |<--------------------------|        \
    \                 |\n            | F6 200 OK                 |               \
    \          |\n            |-------------------------->|                      \
    \   |\n         Message Details\n      F1 SUBSCRIBE   watcher->example.com server\n\
    \            SUBSCRIBE sip:resource@example.com SIP/2.0\n            Via: SIP/2.0/TCP\
    \ watcherhost.example.com;\n              branch=z9hG4bKnashds7\n            To:\
    \ <sip:resource@example.com>\n            From: <sip:watcher@example.com> ;tag=xfg9\n\
    \            Call-ID: 2010@watcherhost.example.com\n            CSeq: 17766 SUBSCRIBE\n\
    \            Max-Forwards: 70\n            Event: presence\n            Accept:\
    \ application/pidf+xml;q=0.3,\n              application/pidf-diff+xml;q=1\n \
    \           Contact: <sip:user@watcherhost.example.com>\n            Expires:\
    \ 3600\n            Content-Length: 0\n      The PA accepts the subscription and\
    \ generates a 200 OK response\n      to the SUBSCRIBE request\n         F2 200\
    \ OK   example.com server ->watcher\n            SIP/2.0 200 OK\n            Via:\
    \ SIP/2.0/TCP watcherhost.example.com;\n              branch=z9hG4bKnashds7\n\
    \              ;received=192.0.2.1\n            To: <sip:resource@example.com>;tag=ffd2\n\
    \            From: <sip:watcher@example.com>;tag=xfg9\n            Call-ID: 2010@watcherhost.example.com\n\
    \            CSeq: 17766 SUBSCRIBE\n            Event: presence\n            Expires:\
    \ 3600\n            Contact: <sip:server.example.com>\n            Content-Length:\
    \ 0\n      The PA, based on the \"q\" parameter value in the Accept header\n \
    \     of the SUBSCRIBE request (F1), decides to use partial\n      notifications.\
    \  The PA creates the first NOTIFY request that\n      includes the full presence\
    \ document.\n         F3 NOTIFY  example.com server -> watcher\n            NOTIFY\
    \ sip:user@watcherhost.example.com SIP/2.0\n            Via: SIP/2.0/TCP server.example.com;\n\
    \              branch=z9hG4bKna998sk\n            To: <sip:watcher@example.com>;tag=xfg9\n\
    \            From: <sip:resource@example.com>;tag=ffd2\n            Call-ID: 2010@watcherhost.example.com\n\
    \            Event: presence\n            Subscription-State: active;expires=3599\n\
    \            Max-Forwards: 70\n            CSeq: 8775 NOTIFY\n            Contact:\
    \ <sip:server.example.com>\n            Content-Type: application/pidf-diff+xml\n\
    \            Content-Length: ...\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n      <p:pidf-full xmlns=\"urn:ietf:params:xml:ns:pidf\"\n             xmlns:p=\"\
    urn:ietf:params:xml:ns:pidf-diff\"\n             xmlns:r=\"urn:ietf:params:xml:ns:pidf:rpid\"\
    \n             xmlns:c=\"urn:ietf:params:xml:ns:pidf:caps\"\n             xmlns:cp=\"\
    urn:ietf:params:xml:ns:pidf:cipid\"\n             xmlns:dm=\"urn:ietf:params:xml:ns:pidf:data-model\"\
    \n             entity=\"sip:resource@example.com\"\n             version=\"1\"\
    >\n       <tuple id=\"sg89ae\">\n        <status>\n         <basic>open</basic>\n\
    \        </status>\n        <c:servcaps>\n         <c:audio>true</c:audio>\n \
    \        <c:video>false</c:video>\n         <c:message>true</c:message>\n    \
    \    </c:servcaps>\n         <r:relationship><r:assistant/></r:relationship>\n\
    \        <contact priority=\"0.8\">tel:09012345678</contact>\n       </tuple>\n\
    \       <tuple id=\"cg231jcr\">\n        <status>\n         <basic>open</basic>\n\
    \        </status>\n        <contact priority=\"1.0\">im:res@example.com</contact>\n\
    \       </tuple>\n       <tuple id=\"r1230d\">\n        <status>\n         <basic>closed</basic>\n\
    \        </status>\n        <cp:homepage>http://example.com/~res/</cp:homepage>\n\
    \        <cp:icon>http://example.com/~res/icon.gif</cp:icon>\n        <cp:card>http://example.com/~res/card.vcd</cp:card>\n\
    \        <contact priority=\"0.9\">sip:resource@example.com</contact>\n      \
    \ </tuple>\n       <note xml:lang=\"en\">Full state presence document</note>\n\
    \       <dm:person id=\"fdkfj\">\n         <r:activities>\n          <r:on-the-phone/>\n\
    \          <r:busy/>\n         </r:activities>\n       </dm:person>\n       <dm:device\
    \ id=\"u00b40c7\">\n         <c:devcaps>\n          <c:mobility>\n           <c:supported>\n\
    \            <c:mobile/>\n           </c:supported>\n          </c:mobility>\n\
    \         </c:devcaps>\n         <dm:deviceID>mac:xxx</dm:deviceID>\n       </dm:device>\n\
    \      </p:pidf-full>\n         F4 200 OK watcher -> example.com server\n    \
    \        SIP/2.0 200 OK\n            Via: SIP/2.0/TCP server.example.com;\n  \
    \            branch=z9hG4bKna998sk\n              ;received=192.0.2.2\n      \
    \      To: <sip:watcher@example.com>;tag=xfg9\n            From: <sip:resource@example.com>;tag=ffd2\n\
    \            Call-ID: 2010@watcherhost.example.com\n            CSeq: 8775 NOTIFY\n\
    \            Content-Length: 0\n            At a later time, the presentity's\
    \ presence information\n            changes.  The PA generates a NOTIFY request\n\
    \            that includes information about the changes.\n      F5 NOTIFY example.com\
    \ server -> watcher\n            NOTIFY sip:user@watcherhost.example.com SIP/2.0\n\
    \            Via: SIP/2.0/TCP server.example.com;\n              branch=z9hG4bKna998sl\n\
    \            To: <sip:watcher@example.com>;tag=xfg9\n            From: <sip:resource@example.com>;tag=ffd2\n\
    \            Call-ID: 2010@watcherhost.example.com\n            CSeq: 8776 NOTIFY\n\
    \            Event: presence\n            Subscription-State: active;expires=3543\n\
    \            Max-Forwards: 70\n            Contact: <sip:server.example.com>\n\
    \            Content-Type: application/pidf-diff+xml\n            Content-Length:\
    \ ...\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <p:pidf-diff xmlns=\"\
    urn:ietf:params:xml:ns:pidf\"\n                   xmlns:p=\"urn:ietf:params:xml:ns:pidf-diff\"\
    \n                   xmlns:r=\"urn:ietf:params:xml:ns:pidf:rpid\"\n          \
    \         xmlns:dm=\"urn:ietf:params:xml:ns:pidf:data-model\"\n              \
    \  entity=\"sip:resource@example.com\"\n                version=\"2\">\n     \
    \  <p:add sel=\"presence/note\" pos=\"before\"><tuple id=\"ert4773\">\n      \
    \  <status>\n         <basic>open</basic>\n        </status>\n        <contact\
    \ priority=\"0.4\">mailto:res@example.com</contact>\n        <note xml:lang=\"\
    en\">This is a new tuple inserted\n              between the last tuple and note\
    \ element</note>\n       </tuple>\n       </p:add>\n       <p:replace sel=\"*/tuple[@id='r1230d']/status/basic/text()\"\
    \n        >open</p:replace>\n       <p:remove sel=\"*/dm:person/r:activities/r:busy\"\
    />\n       <p:replace sel=\"*/tuple[@id='cg231jcr']/contact/@priority\"\n    \
    \    >0.7</p:replace>\n      </p:pidf-diff>\n      F6 200 OK watcher-> example.com\
    \ server\n            SIP/2.0 200 OK\n            Via: SIP/2.0/TCP server.example.com;\n\
    \              branch=z9hG4bKna998sl\n             ;received=192.0.2.2\n     \
    \       To: <sip:watcher@example.com>;tag=xfg9\n            From: <sip:resource@example.com>;tag=ffd2\n\
    \            Call-ID: 2010@watcherhost.example.com\n            CSeq: 8776 NOTIFY\n\
    \            Content-Length: 0\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This specification relies on the presence event\
    \ package for SIP [3].\n   Partial notifications can reveal information about\
    \ what has changed\n   compared to the previous notification.  This can make it\
    \ easier for\n   an eavesdropper to know what kind of changes are happening in\
    \ the\n   presentity's presence information.  However, the same information can\n\
    \   be found if the presence event package is used with baseline PIDF\n   [5].\n\
    \   A third party can inject a NOTIFY request with partial state that\n   will\
    \ cause the watcher to think it has missed a partial notification\n   and to request\
    \ a new full presence document.  This is no worse than\n   what we have without\
    \ this extension since a party that could perform\n   such action could also send\
    \ a NOTIFY with Subscription-State:\n   terminated and achieve the same effect\
    \ without knowing about the\n   extension.  Partial Notification does not make\
    \ the situation any\n   worse, and the protection mechanisms from the existing\
    \ system apply\n   to preventing this attack against the partial notification\
    \ mechanism.\n   Presence-related security considerations are extensively discussed\
    \ in\n   the presence event package for SIP [3] and all those identified\n   security\
    \ considerations apply to this document as well.  Issues\n   described in the\
    \ presence event package for SIP [3], including\n   confidentiality, message integrity\
    \ and authenticity, outbound\n   authentication, replay prevention, Denial-of-Service\
    \ (DoS) attacks\n   against thirst parties and DoS attacks against servers all\
    \ apply here\n   without any change.\n   It is RECOMMENDED that TLS [7] be used\
    \ between elements to provide\n   hop-by-hop confidentially protection.  Furthermore,\
    \ S/MIME MAY be\n   used for integrity and authenticity of SUBSCRIBE and NOTIFY\
    \ requests.\n   This is described in Section 23 of RFC 3261.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The authors would like to thank Jari Urpalainen, Jyrki\
    \ Aarnos,\n   Jonathan Rosenberg, Dean Willis, Kriztian Kiss, Juha Kalliokulju,\n\
    \   Miguel Garcia, Anders Kristensen, Yannis Pavlidis, Ben Cambell,\n   Robert\
    \ Sparks, and Tim Moran for their valuable comments.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n \
    \  [2]  Lonnfors, M., Khartabil, H., Leppanen, E., and J. Urpalainen,\n      \
    \  \"Presence Information Data Format (PIDF) Extension for Partial\n        Presence\"\
    , RFC 5262, August 008.\n   [3]  Rosenberg, J., \"A Presence Event Package for\
    \ the Session\n        Initiation Protocol (SIP)\", RFC 3856, August 2004.\n \
    \  [4]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n       \
    \ Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n        Session\
    \ Initiation Protocol\", RFC 3261, June 2002.\n   [5]  Sugano, H., Fujimoto, S.,\
    \ Klyne, G., Bateman, A., Carr, W., and\n        J. Peterson, \"Presence Information\
    \ Data Format (PIDF)\",\n        RFC 3863, August 2004.\n   [6]  Roach, A., \"\
    SIP-Specific Event Notification\", RFC 3265,\n        June 2002.\n   [7]  Dierks,\
    \ T. and E. Rescorla, \"The TLS Protocol Version 1.1\",\n        RFC 4346, April\
    \ 2006.\n   [8]  Urpalainen, J., \"An Extensible Markup Language (XML) Patch\n\
    \        Operations Framework Utilizing XML Path Language (XPath)\n        Selectors\"\
    , RFC 5261, September 2008.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [9]  Day, M., Rosenberg, J., and H. Sugano,\
    \ \"A Model for Presence and\n        Instant Messaging\", RFC 2778, February\
    \ 2000.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mikko Lonnfors\n   Nokia\n   P.O. Box 321\n   Helsinki\n\
    \   Finland\n   Phone: +358 71 8008000\n   EMail: mikko.lonnfors@nokia.com\n \
    \  Jose Costa-Requena\n   Nokia\n   P.O. Box 321\n   Helsinki\n   Finland\n  \
    \ Phone: +358 71 8008000\n   EMail: jose.costa-requena@nokia.com\n   Eva Leppanen\n\
    \   Nokia\n   Lempaala\n   Finland\n   EMail: eva.leppanen@saunalahti.fi\n   Hisham\
    \ Khartabil\n   Ericsson\n   Melbourne\n   Australia\n   Phone: +61 416 108 890\n\
    \   EMail: hisham.khartabil@gmail.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
