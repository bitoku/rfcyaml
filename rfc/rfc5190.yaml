- title: __initial_text__
  contents:
  - '       Definitions of Managed Objects for Middlebox Communication

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols in the Internet community.\n   In\
    \ particular, it describes a set of managed objects that allow\n   configuring\
    \ middleboxes, such as firewalls and network address\n   translators, in order\
    \ to enable communication across these devices.\n   The definitions of managed\
    \ objects in this documents follow closely\n   the MIDCOM semantics defined in\
    \ RFC 5189.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. The Internet-Standard Management Framework ......................4\n  \
    \ 3. Overview ........................................................4\n    \
    \  3.1. Terminology ................................................5\n   4. Realizing\
    \ the MIDCOM Protocol with SNMP .........................6\n      4.1. MIDCOM\
    \ Sessions ............................................6\n           4.1.1. Authentication\
    \ and Authorization ....................6\n      4.2. MIDCOM Transactions ........................................7\n\
    \           4.2.1. Asynchronous Transactions ...........................7\n  \
    \         4.2.2. Configuration Transactions ..........................8\n    \
    \       4.2.3. Monitoring Transactions ............................11\n      \
    \     4.2.4. Atomicity of MIDCOM Transactions ...................12\n        \
    \          4.2.4.1. Asynchronous MIDCOM Transactions ..........12\n          \
    \        4.2.4.2. Session Establishment and\n                           Termination\
    \ Transactions ..................12\n                  4.2.4.3. Monitoring Transactions\
    \ ...................13\n                  4.2.4.4. Lifetime Change Transactions\
    \ ..............13\n                  4.2.4.5. Transactions Establishing New\n\
    \                           Policy Rules ..............................14\n  \
    \         4.2.5. Access Control .....................................14\n    \
    \  4.3. Access Control Policies ...................................14\n   5. Structure\
    \ of the MIB Module ....................................15\n      5.1. Transaction\
    \ Objects .......................................16\n           5.1.1. midcomRuleTable\
    \ ....................................17\n           5.1.2. midcomGroupTable ...................................19\n\
    \      5.2. Configuration Objects .....................................20\n  \
    \         5.2.1. Capabilities .......................................20\n    \
    \       5.2.2. midcomConfigFirewallTable ..........................21\n      5.3.\
    \ Monitoring Objects ........................................22\n           5.3.1.\
    \ midcomResourceTable ................................22\n           5.3.2. midcomStatistics\
    \ ...................................24\n      5.4. Notifications .............................................25\n\
    \   6. Recommendations for Configuration and Operation ................26\n  \
    \    6.1. Security Model Configuration ..............................26\n    \
    \  6.2. VACM Configuration ........................................27\n      6.3.\
    \ Notification Configuration ................................28\n      6.4. Simultaneous\
    \ Access .......................................28\n      6.5. Avoiding Idempotency\
    \ Problems .............................29\n      6.6. Interface Indexing Problems\
    \ ...............................29\n      6.7. Applicability Restrictions ................................30\n\
    \   7. Usage Examples for MIDCOM Transactions .........................30\n  \
    \    7.1. Session Establishment (SE) ................................31\n    \
    \  7.2. Session Termination (ST) ..................................31\n      7.3.\
    \ Policy Reserve Rule (PRR) .................................31\n      7.4. Policy\
    \ Enable Rule (PER) after PRR ........................33\n      7.5. Policy Enable\
    \ Rule (PER) without Previous PRR .............34\n      7.6. Policy Rule Lifetime\
    \ Change (RLC) .........................35\n      7.7. Policy Rule List (PRL)\
    \ ....................................35\n      7.8. Policy Rule Status (PRS)\
    \ ..................................35\n      7.9. Asynchronous Policy Rule Event\
    \ (ARE) ......................36\n      7.10. Group Lifetime Change (GLC) ..............................36\n\
    \      7.11. Group List (GL) ..........................................36\n  \
    \    7.12. Group Status (GS) ........................................37\n   8.\
    \ Usage Examples for Monitoring Objects ..........................37\n      8.1.\
    \ Monitoring NAT Resources ..................................37\n      8.2. Monitoring\
    \ Firewall Resources .............................38\n   9. Definitions ....................................................38\n\
    \   10. Security Considerations .......................................85\n  \
    \    10.1. General Security Issues ..................................85\n    \
    \  10.2. Unauthorized Middlebox Configuration .....................86\n      10.3.\
    \ Unauthorized Access to Middlebox Configuration ...........87\n      10.4. Unauthorized\
    \ Access to MIDCOM Service Configuration ......88\n   11. Acknowledgements ..............................................88\n\
    \   12. IANA Considerations ...........................................88\n  \
    \ 13. Normative References ..........................................88\n   14.\
    \ Informative References ........................................90\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo defines a portion of the Management Information\
    \ Base (MIB)\n   for use with network management protocols in the Internet community.\n\
    \   In particular, it describes a set of managed objects that allow\n   controlling\
    \ middleboxes.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 2.  The Internet-Standard Management Framework
  contents:
  - "2.  The Internet-Standard Management Framework\n   For a detailed overview of\
    \ the documents that describe the current\n   Internet-Standard Management Framework,\
    \ please refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed objects are\
    \ accessed via a virtual information store, termed\n   the Management Information\
    \ Base or MIB.  MIB objects are generally\n   accessed through the Simple Network\
    \ Management Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms\
    \ defined in the\n   Structure of Management Information (SMI).  This memo specifies\
    \ a MIB\n   module that is compliant to the SMIv2, which is described in STD 58,\n\
    \   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580\n   [RFC2580].\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   The managed objects defined in this document serve for controlling\n\
    \   firewalls and Network Address Translators (NATs).  As defined in\n   [RFC3234],\
    \ firewalls and NATs belong to the group of middleboxes.  A\n   middlebox is a\
    \ device on the datagram path between source and\n   destination, which performs\
    \ other functions than just IP routing.  As\n   outlined in [RFC3303], firewalls\
    \ and NATs are potential obstacles to\n   packet streams, for example, if dynamically\
    \ negotiated UDP or TCP\n   port numbers are used, as in many peer-to-peer communication\n\
    \   applications.\n   As one possible solution for this problem, the IETF MIDCOM\
    \ working\n   group defined a framework [RFC3303], requirements [RFC3304], and\n\
    \   protocol semantics [RFC5189] for communication between applications\n   and\
    \ middleboxes acting as firewalls, NATs, or a combination of both.\n   The MIDCOM\
    \ architecture and framework define a model in which trusted\n   third parties\
    \ can be delegated to assist middleboxes in performing\n   their operations, without\
    \ requiring application intelligence being\n   embedded in the middleboxes.  This\
    \ trusted third party is referred to\n   as the MIDCOM agent.  The MIDCOM protocol\
    \ is defined between a MIDCOM\n   agent and a middlebox.\n   The managed objects\
    \ defined in this document can be used for\n   dynamically configuring middleboxes\
    \ on the datagram path to permit\n   datagrams traversing the middleboxes.  This\
    \ way, applications can,\n   for example, request pinholes at firewalls and address\
    \ bindings at\n   NATs.\n   Besides managed objects for controlling the middlebox\
    \ operation, this\n   document also defines managed objects that provide information\
    \ on\n   middlebox resource usage (such as firewall pinholes, NAT bindings,\n\
    \   NAT sessions, etc.) affected by requests.\n   Since firewalls and NATs are\
    \ critical devices concerning network\n   security, security issues of middlebox\
    \ communication need to be\n   considered very carefully.\n"
- title: 3.1.  Terminology
  contents:
  - "3.1.  Terminology\n   The terminology used in this document is fully aligned\
    \ with the\n   terminology defined in [RFC5189] except for the term 'MIDCOM agent'.\n\
    \   For this term, there is a conflict between the MIDCOM terminology and\n  \
    \ the SNMP terminology.  The roles of entities participating in SNMP\n   communication\
    \ are called 'manager' and 'agent' with the agent acting\n   as server for requests\
    \ from the manager.  This use of the term\n   'agent' is different from its use\
    \ in the MIDCOM framework: The SNMP\n   manager corresponds to the MIDCOM agent\
    \ and the SNMP agent\n   corresponds to the MIDCOM middlebox, also called MIDCOM\
    \ server.  In\n   order to avoid confusion in this document specifying a MIB module,\
    \ we\n   replace the term 'MIDCOM agent' with 'MIDCOM client'.  Whenever the\n\
    \   term 'agent' is used in this document, it refers to the SNMP agent.\n   Figure\
    \ 1 sketches the entities of MIDCOM in relationship to SNMP\n   manager and SNMP\
    \ agent.\n                  +---------+     MIDCOM      +-----------+\n      \
    \            | MIDCOM  |<~ ~ ~ ~ ~ ~ ~ ~>|  MIDCOM   |\n                  | Client\
    \  |   Transaction   | middlebox |\n                  |         |            \
    \     | (server)  |\n                  +---------+                 +-----------+\n\
    \                       ^                            ^\n                     \
    \  |                            |\n                       v                  \
    \          v\n                  +---------+                 +-----------+\n  \
    \                |  SNMP   |      SNMP       |   SNMP    |\n                 \
    \ | Manager |<===============>|   Agent   |\n                  +---------+   \
    \ Protocol     +-----------+\n                    Figure 1: Mapping of MIDCOM\
    \ to SNMP\n"
- title: 4.  Realizing the MIDCOM Protocol with SNMP
  contents:
  - "4.  Realizing the MIDCOM Protocol with SNMP\n   In order to realize middlebox\
    \ communication as described in\n   [RFC5189], several aspects and properties\
    \ of the MIDCOM protocol need\n   to be mapped to SNMP capabilities and expressed\
    \ in terms of the\n   Structure of Management Information version 2 (SMIv2).\n\
    \   Basic concepts to be mapped are MIDCOM sessions and MIDCOM\n   transactions.\
    \  For both, access control policies need to be\n   supported.\n"
- title: 4.1.  MIDCOM Sessions
  contents:
  - "4.1.  MIDCOM Sessions\n   SNMP has no direct support for sessions.  Therefore,\
    \ they need to be\n   modeled.  A MIDCOM session is stateful and has a context\
    \ that is\n   valid for several transactions.  For SNMP, a context is valid for\
    \ a\n   single transaction only, for example, covering just a single\n   request/reply\
    \ pair of messages.\n   Properties of sessions that are utilized by the MIDCOM\
    \ semantics and\n   not available in SNMP need to be modeled.  Particularly, the\n\
    \   middlebox needs to be able to authenticate MIDCOM clients, authorize\n   access\
    \ to policy rules, and send notification messages concerning\n   policy rules\
    \ to MIDCOM clients participating in a session.  In the\n   MIDCOM-MIB module,\
    \ authentication and access control are performed on\n   a per-message basis using\
    \ an SNMPv3 security model, such as the\n   User-based Security Model (USM) [RFC3414],\
    \ for authentication, and\n   the View-based Access Control Model (VACM) [RFC3415]\
    \ for access\n   control.  Sending notifications to MIDCOM clients is controlled\
    \ by\n   access control models such as VACM and a mostly static configuration\n\
    \   of objects in the SNMP-TARGET-MIB [RFC3413] and the SNMP-\n   NOTIFICATION-MIB\
    \ [RFC3413].\n   This session model is static except that the MIDCOM client can\
    \ switch\n   on and off the generation of SNMP notifications that the middlebox\n\
    \   sends.  Recommended configurations of VACM and the SNMP-TARGET-MIB\n   and\
    \ the SNMP-NOTIFICATION-MIB that can serve for modeling a session\n   are described\
    \ in detail in section 6.\n"
- title: 4.1.1.  Authentication and Authorization
  contents:
  - "4.1.1.  Authentication and Authorization\n   MIDCOM sessions are required for\
    \ providing authentication,\n   authorization, and encryption for messages exchanged\
    \ between a MIDCOM\n   client and a middlebox.  SNMPv3 provides these features\
    \ on a per-\n   message basis instead of a per-session basis applying a security\n\
    \   model and an access control model, such as USM and VACM.  Per-message\n  \
    \ security mechanisms can be considered as overhead compared to per-\n   session\
    \ security mechanisms, but it certainly satisfies the security\n   requirements\
    \ of middlebox communication.\n   For each authenticated MIDCOM client, access\
    \ to the MIDCOM-MIB,\n   particularly to policy rules, should be configured as\
    \ part of the\n   VACM configuration of the SNMP agent.\n"
- title: 4.2.  MIDCOM Transactions
  contents:
  - "4.2.  MIDCOM Transactions\n   [RFC5189] defines the MIDCOM protocol semantics\
    \ in terms of\n   transactions and transaction parameters.  Transactions are grouped\n\
    \   into request-reply transactions and asynchronous transactions.\n   SNMP offers\
    \ simple transactions that in general cannot be mapped\n   one-to-one to MIDCOM\
    \ transactions.  This section describes how the\n   MIDCOM-MIB module implements\
    \ MIDCOM transactions using SNMP\n   transactions.  The concerned MIDCOM transactions\
    \ are asynchronous\n   transactions and request-reply transactions.  Within the\
    \ set of\n   request-reply transactions, we distinguish configuration transactions\n\
    \   and monitoring transactions, because they are implemented in slightly\n  \
    \ different ways by using SNMP transactions.\n   The SNMP terminology as defined\
    \ in [RFC3411] does not use the concept\n   of transactions, but of SNMP operations.\
    \  For the considerations in\n   this section, we use the terms SNMP GET transaction\
    \ and SNMP SET\n   transaction.  An SNMP GET transaction consists of an SNMP Read\
    \ Class\n   operation and an SNMP Response Class operation.  An SNMP SET\n   transaction\
    \ consists of an SNMP Write Class operation and an SNMP\n   Response Class operation.\n"
- title: 4.2.1.  Asynchronous Transactions
  contents:
  - "4.2.1.  Asynchronous Transactions\n   Asynchronous transactions can easily be\
    \ modeled by SNMP Notification\n   Class operations.  An asynchronous transaction\
    \ contains a\n   notification message with one to three parameters.  The message\
    \ can\n   be realized as an SNMP Notification Class operation with the\n   parameters\
    \ implemented as managed objects contained in the\n   notification.\n        \
    \       +--------------+  notification +------------+\n               | MIDCOM\
    \ client|<--------------| middlebox  |\n               +--------------+    message\
    \    +------------+\n                      MIDCOM asynchronous transaction\n \
    \              +--------------+      SNMP     +------------+\n               |\
    \ SNMP manager |<--------------| SNMP agent |\n               +--------------+\
    \  notification +------------+\n             Implementation of MIDCOM asynchronous\
    \ transaction\n                 Figure 2: MIDCOM asynchronous transaction\n  \
    \              mapped to SNMP Notification Class operation\n   One of the parameters\
    \ is the transaction identifier that should be\n   unique per middlebox.  It does\
    \ not have to be unique for all\n   notifications sent by the particular SNMP\
    \ agent, but for all sent\n   notifications that are defined by the MIDCOM-MIB\
    \ module.\n   Note that SNMP notifications are usually sent as unreliable UDP\n\
    \   packets and may be dropped before they reach their destination.  If a\n  \
    \ MIDCOM client is expecting an asynchronous notification on a specific\n   transaction,\
    \ it would be the job of the MIDCOM client to poll the\n   middlebox periodically\
    \ and monitor the transaction in case\n   notifications are lost along the way.\n"
- title: 4.2.2.  Configuration Transactions
  contents:
  - "4.2.2.  Configuration Transactions\n   All request-reply transactions contain\
    \ a request message, a reply\n   message, and potentially also a set of notifications.\
    \  In general,\n   they cannot be modeled by just having a single SNMP message\
    \ per\n   MIDCOM message, because some of the MIDCOM messages carry a large set\n\
    \   of parameters that do not necessarily fit into an SNMP message\n   consisting\
    \ of a single UDP packet only.\n   For configuration transactions, the MIDCOM\
    \ request message can be\n   modeled by one or more SNMP SET transactions.  The\
    \ action of sending\n   the MIDCOM request to the middlebox is realized by writing\
    \ the\n   parameters contained in the message to managed objects at the SNMP\n\
    \   agent.  If necessary, the SNMP SET transaction includes creating\n   these\
    \ managed objects.  If not all parameters of the MIDCOM request\n   message can\
    \ be set by a single SNMP SET transaction, then more than\n   one SET transaction\
    \ is used; see Figure 3.  Completion of the last of\n   the SNMP transactions\
    \ indicates that all required parameters are set\n   and that processing of the\
    \ MIDCOM request message can start at the\n   middlebox.\n   Please note that\
    \ a single SNMP SET transaction consists of an SNMP\n   SET request message and\
    \ an SNMP SET reply message.  Both are sent as\n   unreliable UDP packets and\
    \ may be dropped before they reach their\n   destination.  If the SNMP SET request\
    \ message or the SNMP reply\n   message is lost, then the SNMP manager (the MIDCOM\
    \ client) needs to\n   take action, for example, by just repeating the SET transaction\
    \ or by\n   first checking the success of the initial write transaction with an\n\
    \   SNMP GET transaction and then only repeating the SNMP SET transaction\n  \
    \ if necessary.\n               +--------------+    request    +------------+\n\
    \               | MIDCOM client|-------------->| middlebox  |\n              \
    \ +--------------+    message    +------------+\n                          MIDCOM\
    \ request message\n               +--------------+               +------------+\n\
    \               |              |    SNMP SET   |            |\n              \
    \ |              |-------------->|            |\n               |            \
    \  |    message    |            |\n               |              |           \
    \    |            |\n               |              |    SNMP SET   |         \
    \   |\n               |              |<--------------|            |\n        \
    \       |              | reply message |            |\n               | SNMP manager\
    \ |               | SNMP agent |\n               |              |    SNMP SET\
    \   |            |\n               |              |- - - - - - - >|          \
    \  |\n               |              |    message    |            |\n         \
    \      |              |               |            |\n               |       \
    \       |    SNMP SET   |            |\n               |              |< - - -\
    \ - - - -|            |\n               |              | reply message |     \
    \       |\n               |              |               |            |\n    \
    \           |              |  . . .        |            |\n               +--------------+\
    \               +------------+\n                 Implementation of MIDCOM request\
    \ message\n                   by one or more SNMP SET transactions\n         \
    \            Figure 3: MIDCOM request message\n                      mapped to\
    \ SNMP SET transactions\n   The MIDCOM reply message can be modeled in two ways.\
    \  The first way\n   is an SNMP Notification Class operation optionally followed\
    \ by one or\n   more SNMP GET transactions as shown in Figure 4.  The MIDCOM server\n\
    \   informs the MIDCOM client about the end of processing the request by\n   sending\
    \ an SNMP notification.  If possible, the SNMP notification\n   carries all reply\
    \ parameters.  If this is not possible, then the SNMP\n   manager has to perform\
    \ additional SNMP GET transactions as long as\n   necessary to receive all of\
    \ the reply parameters.\n               +--------------+     reply     +------------+\n\
    \               | MIDCOM client|<--------------| middlebox  |\n              \
    \ +--------------+    message    +------------+\n                           MIDCOM\
    \ reply message\n               +--------------+               +------------+\n\
    \               |              |     SNMP      |            |\n              \
    \ |              |<--------------|            |\n               |            \
    \  |  notification |            |\n               |              |           \
    \    |            |\n               |              |    SNMP GET   |         \
    \   |\n               |              |-------------->|            |\n        \
    \       |              |    message    |            |\n               | SNMP manager\
    \ |               | SNMP agent |\n               |              |    SNMP GET\
    \   |            |\n               |              |<--------------|          \
    \  |\n               |              | reply message |            |\n         \
    \      |              |               |            |\n               |       \
    \       |    SNMP GET   |            |\n               |              |- - - -\
    \ - - - >|            |\n               |              |    message    |     \
    \       |\n               |              |               |            |\n    \
    \           |              |    SNMP GET   |            |\n               |  \
    \            |< - - - - - - -|            |\n               |              | reply\
    \ message |            |\n               |              |               |    \
    \        |\n               |              |  . . .        |            |\n   \
    \            +--------------+               +------------+\n                 \
    \ Implementation of MIDCOM reply message\n                          by an SNMP\
    \ notification\n                   and one or more SNMP GET transactions\n   \
    \                   Figure 4: MIDCOM reply message\n         mapped to SNMP notification\
    \ and optional GET transactions\n   The second way replaces the SNMP Notification\
    \ Class operation by a\n   polling operation of the SNMP manager.  The manager\
    \ polls status\n   information at the SNMP agent using SNMP GET transactions until\
    \ it\n   detects the end of the processing of the request.  Then it uses one\n\
    \   or more SNMP GET transactions to receive all of the reply parameters.\n  \
    \ Note that this second way requires more SNMP operations, but is more\n   reliable\
    \ than the first way using an SNMP Notification Class\n   operation.\n"
- title: 4.2.3.  Monitoring Transactions
  contents:
  - "4.2.3.  Monitoring Transactions\n   The realization of MIDCOM monitoring transactions\
    \ in terms of SNMP\n   transactions is simpler.  The request message is very short\
    \ and just\n   specifies a piece of information that the MIDCOM client wants to\n\
    \   retrieve.\n               +--------------+    request    +------------+\n\
    \               |              |-------------->|            |\n              \
    \ |              |    message    |            |\n               | MIDCOM client|\
    \               | middlebox  |\n               |              |     reply    \
    \ |            |\n               |              |<--------------|            |\n\
    \               +--------------+    message    +------------+\n              \
    \         MIDCOM monitoring transaction\n               +--------------+     \
    \          +------------+\n               |              |    SNMP GET   |   \
    \         |\n               |              |-------------->|            |\n  \
    \             |              |    message    |            |\n               |\
    \              |               |            |\n               |              |\
    \    SNMP GET   |            |\n               |              |<--------------|\
    \            |\n               |              | reply message |            |\n\
    \               | SNMP manager |               | SNMP agent |\n              \
    \ |              |    SNMP GET   |            |\n               |            \
    \  |- - - - - - - >|            |\n               |              |    message\
    \    |            |\n               |              |               |         \
    \   |\n               |              |    SNMP GET   |            |\n        \
    \       |              |< - - - - - - -|            |\n               |      \
    \        | reply message |            |\n               |              |     \
    \          |            |\n               |              |  . . .        |   \
    \         |\n               +--------------+               +------------+\n  \
    \            Implementation of MIDCOM monitoring transaction\n               \
    \      by one or more SNMP GET messages\n                  Figure 5: MIDCOM monitoring\
    \ transaction\n                      mapped to SNMP GET transactions\n   Since\
    \ monitoring is a strength of SNMP, there are sufficient means to\n   realize\
    \ MIDCOM monitoring transactions simpler than MIDCOM\n   configuration transactions.\n\
    \   All MIDCOM monitoring transactions can be realized as a sequence of\n   SNMP\
    \ GET transactions.  The number of SNMP GET transactions required\n   depends\
    \ on the amount of information to be retrieved.\n"
- title: 4.2.4.  Atomicity of MIDCOM Transactions
  contents:
  - "4.2.4.  Atomicity of MIDCOM Transactions\n   Given the realizations of MIDCOM\
    \ transactions by means of SNMP\n   transactions, atomicity of the MIDCOM transactions\
    \ is not fully\n   guaranteed anymore.  However, this section shows that atomicity\n\
    \   provided by the MIB module specified in section 9 is still sufficient\n  \
    \ for meeting the MIDCOM requirements specified in [RFC3304].\n"
- title: 4.2.4.1.  Asynchronous MIDCOM Transactions
  contents:
  - "4.2.4.1.  Asynchronous MIDCOM Transactions\n   There are two asynchronous MIDCOM\
    \ transactions: Asynchronous Session\n   Termination (AST) and Asynchronous Policy\
    \ Rule Event (ARE).  The very\n   static realization of MIDCOM sessions in the\
    \ MIDCOM-MIB, as described\n   by section 4.1, does not anymore support the asynchronous\
    \ termination\n   of a session.  Therefore, the AST transaction is not modeled.\
    \  For\n   the ARE, atomicity is maintained, because it is modeled by a single\n\
    \   atomic SNMP notification transaction.\n   In addition, the MIDCOM-MIB supports\
    \ an Asynchronous Group Event\n   transaction, which is an aggregation of a set\
    \ of ARE transactions.\n   Also, this MIDCOM transaction is implemented by a single\
    \ SNMP\n   transaction.\n"
- title: 4.2.4.2.  Session Establishment and Termination Transactions
  contents:
  - "4.2.4.2.  Session Establishment and Termination Transactions\n   The MIDCOM-MIB\
    \ models MIDCOM sessions in a very static way.  The only\n   dynamic actions within\
    \ these transactions are enabling and disabling\n   the generation of SNMP notifications\
    \ at the SNMP agent.\n   For the Session Establishment (SE) transaction, the MIDCOM\
    \ client\n   first reads the middlebox capabilities.  It is not relevant whether\n\
    \   or not this action is atomic because a dynamic change of the\n   middlebox\
    \ capabilities is not to be expected.  Therefore, also non-\n   atomic implementations\
    \ of this action are acceptable.\n   Then, the MIDCOM agent needs to enable the\
    \ generation of SNMP\n   notifications at the middlebox.  This can be realized\
    \ by writing to a\n   single managed object in the SNMP-NOTIFICATION-MIB [RFC3413].\
    \  But\n   even other implementations are acceptable, because atomicity is not\n\
    \   required for this step.\n   For the Session Termination (ST) transaction,\
    \ the only required\n   action is disabling the generation of SNMP notifications\
    \ at the\n   middlebox.  As for the SE transaction, this action can be realized\n\
    \   atomically by using the SNMP-NOTIFICATION-MIB, but also other\n   implementations\
    \ are acceptable because atomicity is not required for\n   this action.\n"
- title: 4.2.4.3.  Monitoring Transactions
  contents:
  - "4.2.4.3.  Monitoring Transactions\n   Potentially, the monitoring transactions\
    \ Policy Rule List (PRL),\n   Policy Rule Status (PRS), Group List (GL), and Group\
    \ Status (GS) are\n   not atomic, because these transactions may be implemented\
    \ by more\n   than one SNMP GET operation.\n   The problem that might occur is\
    \ that while the monitoring transaction\n   is performed, the monitored items\
    \ may change.  For example, while\n   reading a long list of policies, new policies\
    \ may be added and\n   already read policies may be deleted.  This is not in line\
    \ with the\n   protocol semantics.  However, it is not in direct conflict with\
    \ the\n   MIDCOM requirement requesting the middlebox state to be stable and\n\
    \   known by the MIDCOM client, because the middlebox notifies the MIDCOM\n  \
    \ client on all changes to its state that are performed during the\n   monitoring\
    \ transaction by sending notifications.\n   If the MIDCOM client receives such\
    \ a notification while performing a\n   monitoring transaction (or shortly after\
    \ completing it), the MIDCOM\n   client can then either repeat the monitoring\
    \ transaction or integrate\n   the result of the monitoring transaction with the\
    \ information\n   received via notifications during the transaction.  In both\
    \ cases,\n   the MIDCOM client will know the state of the middlebox.\n"
- title: 4.2.4.4.  Lifetime Change Transactions
  contents:
  - "4.2.4.4.  Lifetime Change Transactions\n   For the policy Rule Lifetime Change\
    \ (RLC) transaction and the Group\n   Lifetime Change (GLC) transaction, atomicity\
    \ is maintained.  They\n   both have very few parameters for the request message\
    \ and the reply\n   message.  The request parameters can be transmitted by a single\
    \ SNMP\n   SET request message, and the reply parameters can be transmitted by\
    \ a\n   single SNMP notification message.  In order to prevent idempotency\n \
    \  problems by retransmitting an SNMP request after a lost SNMP reply,\n   it\
    \ is RECOMMENDED that either snmpSetSerialNo (see [RFC3418]) is\n   included in\
    \ the corresponding SNMP SET request or the value of the\n   SNMP retransmission\
    \ timer be lower than the smallest requested\n   lifetime value.  The same recommendation\
    \ applies to the smallest\n   requested value for the midcomRuleStorageTime. \
    \ MIDCOM client\n   implementations MAY completely avoid this problem by configuring\n\
    \   their SNMP stack such that no retransmissions are sent.\n"
- title: 4.2.4.5.  Transactions Establishing New Policy Rules
  contents:
  - "4.2.4.5.  Transactions Establishing New Policy Rules\n   Analogous to the monitoring\
    \ transactions, the atomicity may not be\n   given for Policy Reserve Rule (PRR)\
    \ and Policy Enable Rule (PER)\n   transactions.  Both transactions are potentially\
    \ implemented using\n   more than one SNMP SET operation and GET operation for\
    \ obtaining\n   transaction reply parameters.  The solution for this loss of\n\
    \   atomicity is the same as for the monitoring transactions.\n   There is an\
    \ additional atomicity problem for PRR and PER.  If\n   transferring request parameters\
    \ requires more than a single SET\n   operation, then there is the potential problem\
    \ that multiple MIDCOM\n   clients sharing the same permissions are able to access\
    \ the same\n   policy rule.  In this case, a client could alter request parameters\n\
    \   already set by another client before the first client could complete\n   the\
    \ request.  However, this is acceptable since usually only one\n   agent is creating\
    \ a policy rule and filling it subsequently.  It can\n   also be assumed that\
    \ in most cases where clients share permissions,\n   they act in a more or less\
    \ coordinated way avoiding such\n   interferences.\n   All atomicity problems\
    \ caused by using multiple SNMP SET transactions\n   for implementing the MIDCOM\
    \ request message can be avoided by\n   transferring all request parameters with\
    \ a single SNMP SET\n   transaction.\n"
- title: 4.2.5.  Access Control
  contents:
  - "4.2.5.  Access Control\n   Since SNMP does not offer per-session authentication\
    \ and\n   authorization, authentication and authorization are performed per\n\
    \   SNMP message sent from the MIDCOM client to the middlebox.\n   For each transaction,\
    \ the MIDCOM client has to authenticate itself as\n   an authenticated principal,\
    \ such as a USM user.  Then, the\n   principal's access rights to all resources\
    \ affected by the\n   transaction are checked.  Access right control is realized\
    \ by\n   configuring the access control mechanisms, such as VACM, at the SNMP\n\
    \   agent.\n"
- title: 4.3.  Access Control Policies
  contents:
  - "4.3.  Access Control Policies\n   Potentially, a middlebox has to control access\
    \ for a large set of\n   MIDCOM clients and to a large set of policy rules configuring\n\
    \   firewall pinholes and NAT bindings.  Therefore, it can be beneficial\n   to\
    \ use access control policies for specifying access control rules.\n   Generating,\
    \ provisioning, and managing these policies are out of\n   scope of this MIB module.\n\
    \   However, if such an access control policy system is used, then the\n   SNMP\
    \ agent acts as a policy enforcement point.  An access control\n   policy system\
    \ must transform all active policies into configurations\n   of, for example,\
    \ the SNMP agent's View-based Access Control Model\n   (VACM).\n   The mechanisms\
    \ of access control models, such as VACM, allow an\n   access control policy system\
    \ to enforce MIDCOM client authentication\n   rules and general access control\
    \ of MIDCOM clients to middlebox\n   control.\n   The mechanisms of VACM can be\
    \ used to enforce access control of\n   authenticated clients to MIDCOM-MIB policy\
    \ rules based on the concept\n   of ownership.  For example, an access control\
    \ policy can specify that\n   MIDCOM-MIB policy rules owned by user A cannot be\
    \ accessed at all by\n   user B, can be read by user C, and can be read and modified\
    \ by user\n   D.\n   Further access control policies can control access to concrete\n\
    \   middlebox resources.  These are enforced, when a MIDCOM request is\n   processed.\
    \  For example, an authenticated MIDCOM client may be\n   authorized to request\
    \ new MIDCOM policies to be established, but only\n   for certain IP address ranges.\
    \  The enforcement of this kind of\n   policies may not be realizable using available\
    \ SNMP mechanisms, but\n   needs to be performed by the individual MIB module\
    \ implementation.\n"
- title: 5.  Structure of the MIB Module
  contents:
  - "5.  Structure of the MIB Module\n   The MIB module defined in section 9 contains\
    \ three kinds of managed\n   objects:\n   -   Transaction objects\n       Transaction\
    \ objects are required for implementing the MIDCOM\n       protocol requirements\
    \ defined in [RFC3304] and the MIDCOM\n       protocol semantics defined in [RFC5189].\n\
    \   -   Configuration objects\n       Configuration objects can be used for retrieving\
    \ middlebox\n       capability information (mandatory) and for setting parameters\
    \ of\n       the implementation of transaction objects (optional).\n   -   Monitoring\
    \ objects\n       The optional monitoring objects provide information about used\n\
    \       resources and about MIDCOM transaction statistics.\n   The transaction\
    \ objects are organized in two tables: the\n   midcomRuleTable and the midcomGroupTable.\
    \  Entity relationships of\n   entries of these tables and the midcomResourceTable\
    \ from the\n   monitoring objects are illustrated by Figure 6.\n             \
    \               +--------------------+\n                            |  midcomRuleEntry\
    \   |\n                            |     indexed by     |\n                  \
    \          |  midcomRuleOwner   |\n                            |  midcomGroupIndex\
    \  |\n                            |  midcomRuleIndex   |\n                   \
    \         +--------------------+\n                        1...n |            \
    \    | 1\n                              |                |\n                 \
    \           1 |                | 1\n           +--------------------+        \
    \    +---------------------+\n           |  midcomGroupEntry  |            | midcomResourceEntry\
    \ |\n           |     indexed by     |            |     indexed by      |\n  \
    \         |  midcomRuleOwner   |            |  midcomRuleOwner    |\n        \
    \   |  midcomGroupIndex  |            |  midcomGroupIndex   |\n           +--------------------+\
    \            |  midcomRuleIndex    |\n                                       \
    \      +---------------------+\n                                             \
    \  |        |        |\n                                               |     \
    \   |        |\n                                               v        v    \
    \    v\n                                              NAT   Firewall   other\n\
    \                                              MIB      MIB      MIB\n       \
    \       Figure 6: Entity relationships of table entries\n   A MIDCOM client can\
    \ create and delete entries in the midcomRuleTable.\n   Entries in the midcomGroupTable\
    \ are generated automatically as soon\n   as there is an entry in the midcomRuleTable\
    \ using the\n   midcomGroupIndex.  The midcomGroupTable can be used as shortcut\
    \ for\n   accessing all member rules with a single transaction.  MIDCOM clients\n\
    \   can group policy rules for various purposes.  For example, they can\n   assign\
    \ a unique value for the midcomGroupIndex to all rules belonging\n   to a single\
    \ application or an application session served by the\n   MIDCOM agent.\n   The\
    \ midcomResourceTable augments the midcomRuleTable by information\n   on the relationship\
    \ of entries of the midcomRuleTable to resources\n   listed in other MIB modules,\
    \ such as the NAT-MIB [RFC4008].\n"
- title: 5.1.  Transaction Objects
  contents:
  - "5.1.  Transaction Objects\n   The transaction objects are structured according\
    \ to the MIDCOM\n   semantics described in [RFC5189] into two subtrees, one for\
    \ policy\n   rule control and one for policy rule group control.\n"
- title: 5.1.1.  midcomRuleTable
  contents:
  - "5.1.1.  midcomRuleTable\n   The midcomRuleTable contains information about policy\
    \ rules including\n   policy rules to be established, policy rules for which establishing\n\
    \   failed, established policy rules, and terminated policy rules.\n   Entries\
    \ in this table are indexed by the combination of\n   midcomRuleOwner, midcomGroupIndex,\
    \ and midcomRuleIndex.  The\n   midcomRuleOwner is the owner of the rule; the\
    \ midcomGroupIndex is the\n   index of the group of which the policy rule is a\
    \ member.\n   midcomRuleOwner is of type SnmpAdminString, a textual convention\
    \ that\n   allows for use of the SNMPv3 View-based Access Control Model (VACM\n\
    \   [RFC3415]) and allows a management application to identify its\n   entries.\n\
    \   Entries in this table are created by writing to midcomRuleRowStatus.\n   Entries\
    \ are removed when both their midcomRuleLifetime and\n   midcomRuleStorageTime\
    \ are timed out by counting down to 0.  A MIDCOM\n   client can explicitly remove\
    \ an entry by setting midcomRuleLifetime\n   and midcomRuleStorageTime to 0.\n\
    \   The table contains the following columnar objects:\n   o   midcomRuleIndex\n\
    \       The index of this entry must be unique in combination with the\n     \
    \  midcomRuleOwner and the midcomGroupIndex of the entry.\n   o   midcomRuleAdminStatus\n\
    \       For establishing a new policy rule, a set of objects in this\n       entry\
    \ needs to be written first.  These objects are the request\n       parameters.\
    \  Then, by writing either reserve(1) or enable(2) to\n       this object, the\
    \ MIDCOM-MIB implementation is triggered to start\n       processing the parameters\
    \ and tries to establish the specified\n       policy rule.\n   o   midcomRuleOperStatus\n\
    \       This read-only object indicates the current status of the entry.\n   \
    \    The entry may have an initializing state, it may have a transient\n     \
    \  state while processing requests, it may have an error state after\n       a\
    \ request was rejected, it may have a state where a policy rule\n       is established,\
    \ or it may have a terminated state.\n   o   midcomRuleStorageType\n       This\
    \ object indicates whether or not the policy rule is stored as\n       volatile,\
    \ non-volatile, or permanent.  Depending on the MIDCOM-\n       MIB implementation,\
    \ this object may be writable.\n   o   midcomRuleStorageTime\n       This object\
    \ indicates how long the entry will still exist after\n       entering an error\
    \ state or a termination state.\n   o   midcomRuleError\n       This object is\
    \ a string indicating the reason for entering an\n       error state.\n   o  \
    \ midcomRuleInterface\n       This object indicates the IP interface for which\
    \ enforcement of a\n       policy rule is requested or performed, respectively.\n\
    \   o   midcomRuleFlowDirection\n       This object indicates a flow direction\
    \ for which a policy enable\n       rule was requested or established, respectively.\n\
    \   o   midcomRuleMaxIdleTime\n       This object indicates the maximum idle time\
    \ of the policy rule in\n       seconds.  If no packet to which the policy rule\
    \ applies passes\n       the middlebox for the time specified by midcomRuleMaxIdleTime,\n\
    \       then the policy rule enters a termination state.\n   o   midcomRuleTransportProtocol\n\
    \       This object indicates a transport protocol for which a policy\n      \
    \ reserve rule or policy enable rule was requested or established,\n       respectively.\n\
    \   o   midcomRulePortRange\n       This object indicates a port range for which\
    \ a policy reserve\n       rule or policy enable rule was requested or established,\n\
    \       respectively.\n   o   midcomRuleLifetime\n       This object indicates\
    \ the remaining lifetime of an established\n       policy rule.  The MIDCOM client\
    \ can change the remaining lifetime\n       by writing to it.\n   Beyond the listed\
    \ objects, the table contains 10 further objects\n   describing address parameters.\
    \  They include the IP version, IP\n   address, prefix length and port number\
    \ for the internal address (A0),\n   inside address (A1), outside address (A2),\
    \ and external address (A3).\n   These objects serve as parameters specifying\
    \ a request or an\n   established policy, respectively.\n   A0, A1, A2, and A3\
    \ are address tuples defined according to the MIDCOM\n   semantics [RFC5189].\
    \  Each of them identifies either a communication\n   endpoint at an internal\
    \ or external device or an allocated address at\n   the middlebox.\n         +----------+\
    \                                 +----------+\n         | internal | A0    A1\
    \ +-----------+ A2    A3 | external |\n         | endpoint +----------+ middlebox\
    \ +----------+ endpoint |\n         +----------+          +-----------+      \
    \    +----------+\n                     Figure 7: Address tuples A0 - A3\n   \
    \ - A0 - internal endpoint: Address tuple A0 specifies a communication\n     \
    \ endpoint of a device within the internal network, with respect to\n      the\
    \ middlebox.\n    - A1 - middlebox inside address: Address tuple A1 specifies\
    \ a\n      virtual communication endpoint at the middlebox within the\n      internal\
    \ network.  A1 is the destination address for packets\n      passing from the\
    \ internal endpoint to the middlebox and is the\n      source for packets passing\
    \ from the middlebox to the internal\n      endpoint.\n    - A2 - middlebox outside\
    \ address: Address tuple A2 specifies a\n      virtual communication endpoint\
    \ at the middlebox within the\n      external network.  A2 is the destination\
    \ address for packets\n      passing from the external endpoint to the middlebox\
    \ and is the\n      source for packets passing from the middlebox to the external\n\
    \      endpoint.\n    - A3 - external endpoint: Address tuple A3 specifies a communication\n\
    \      endpoint of a device within the external network, with respect to\n   \
    \   the middlebox.\n   The MIDCOM-MIB requires the MIDCOM client to specify address\
    \ tuples\n   A0 and A3.  This might be a problem for applications that are not\n\
    \   designed in a firewall-friendly way.  An example is an FTP\n   application\
    \ that uses the PORT command (instead of the recommended\n   PASV command).  The\
    \ problem only occurs when the middlebox offers\n   twice-NAT functionality, and\
    \ it can be fixed following\n   recommendations for firewall-friendly communication.\n"
- title: 5.1.2.  midcomGroupTable
  contents:
  - "5.1.2.  midcomGroupTable\n   The midcomGroupTable has an entry per existing policy\
    \ rule group.\n   Entries in this table are created automatically when creating\
    \ member\n   entries in the midcomRuleTable.  Entries are automatically removed\n\
    \   from this table when the last member entry is removed from the\n   midcomRuleTable.\
    \  Entries cannot be created or removed explicitly by\n   the MIDCOM client.\n\
    \   Entries are indexed by the midcomRuleOwner of the rules that belong\n   to\
    \ the group and by a specific midcomGroupIndex.  This allows each\n   midcomRuleOwner\
    \ to maintain its own independent group namespace.\n   An entry of the table contains\
    \ the following objects:\n   o   midcomGroupIndex\n       The index of this entry\
    \ must be unique in combination with the\n       midcomRuleOwner of the entry.\n\
    \   o   midcomGroupLifetime\n       This object indicates the maximum of the remaining\
    \ lifetimes of\n       all established policy rules that are members of the group.\
    \  The\n       MIDCOM client can change the remaining lifetime of all member\n\
    \       policies by writing to this object.\n"
- title: 5.2.  Configuration Objects
  contents:
  - "5.2.  Configuration Objects\n   The configuration subtree contains middlebox\
    \ capability and\n   configuration information.  Some of the contained objects\
    \ are\n   (optionally) writable and can also be used for configuring the\n   middlebox\
    \ service.\n   The capabilities subtree contains some general capability information\n\
    \   and detailed information per supported IP interface.  The\n   midcomConfigFirewallTable\
    \ can be used to configure how the MIDCOM-MIB\n   implementation creates firewall\
    \ rules in its firewall modules.\n   Note that typically, configuration objects\
    \ are not intended to be\n   written by MIDCOM clients.  In general, write access\
    \ to these objects\n   needs to be restricted more strictly than write access\
    \ to transaction\n   objects.\n"
- title: 5.2.1.  Capabilities
  contents:
  - "5.2.1.  Capabilities\n   Information on middlebox capabilities, i.e., capabilities\
    \ of the\n   MIDCOM-MIB implementation, is provided by the midcomCapabilities\n\
    \   subtree of managed objects.  The following objects are defined:\n   o   midcomConfigMaxLifetime\n\
    \       This object indicates the maximum lifetime that this middlebox\n     \
    \  allows policy rules to have.\n   o   midcomConfigPersistentRules\n       This\
    \ is a boolean object indicating whether or not the middlebox\n       is capable\
    \ of storing policy rules persistently.\n       Further capabilities are provided\
    \ by the midcomConfigIfTable per\n       IP interface.  This table contains just\
    \ two objects.  The first\n       one is a BITS object called midcomConfigIfBits\
    \ containing the\n       following bit values:\n   o   ipv4 and ipv6\n       These\
    \ two bit values provide information on which IP versions are\n       supported\
    \ by the middlebox at the indexed interface.\n   o   addressWildcards and portWildcards\n\
    \       These two bit values provide information on wildcarding supported\n  \
    \     by the middlebox at the indexed interface.\n   o   firewall and nat\n  \
    \     These two bit values provide information on availability of\n       firewall\
    \ and NAT functionality at the indexed interface.\n   o   portTranslation, protocolTranslation,\
    \ and twiceNat\n       These three bit values provide information on the kind\
    \ of NAT\n       functionality available at the indexed interface.\n   o   inside\n\
    \       This bit indicates whether or not the indexed interface is an\n      \
    \ inside interface with respect to NAT functionality.\n   The second object, called\
    \ midcomConfigIfEnabled, indicates whether\n   the middlebox capabilities described\
    \ by midcomConfigIfBits are\n   available or not available at the indexed IP interface.\n\
    \   The midcomConfigIfTable uses index 0 for indicating capabilities that\n  \
    \ are available for all interfaces.\n"
- title: 5.2.2.  midcomConfigFirewallTable
  contents:
  - "5.2.2.  midcomConfigFirewallTable\n   The midcomConfigFirewallTable serves for\
    \ configuring how policy rules\n   created by MIDCOM clients are realized as firewall\
    \ rules of a\n   firewall implementation.  Particularly, the priority used for\n\
    \   MIDCOM-MIB policy rules can be configured.  For a single firewall\n   implementation\
    \ at a particular IP interface, all MIDCOM-MIB policy\n   rules are realized as\
    \ firewall rules with the same priority.  Also, a\n   firewall rule group name\
    \ can be configured.  The table is indexed by\n   the IP interface index.\n  \
    \ An entry of the table contains the following objects:\n   o   midcomConfigFirewallGroupId\n\
    \       This object indicates the firewall rule group to which all\n       firewall\
    \ rules of the MIDCOM server are assigned.\n   o   midcomConfigFirewallPriority\n\
    \       This object indicates the priority assigned to all firewall rules\n  \
    \     of the MIDCOM server.\n"
- title: 5.3.  Monitoring Objects
  contents:
  - "5.3.  Monitoring Objects\n   The monitoring objects are structured into two subtrees:\
    \ the resource\n   subtree and the statistics subtree.  The resource subtree provides\n\
    \   information about which resources are used by which policy rule.  The\n  \
    \ statistics subtree provides statistics about the usage of transaction\n   objects.\n"
- title: 5.3.1.  midcomResourceTable
  contents:
  - "5.3.1.  midcomResourceTable\n   Information about resource usage per policy rule\
    \ is provided by the\n   midcomResourceTable.  Each entry in the midcomResourceTable\
    \ describes\n   resource usage of exactly one policy rule.\n   Resources are NAT\
    \ resources and firewall resources, depending on the\n   type of middlebox.  Used\
    \ NAT resources include NAT bindings and NAT\n   sessions.  NAT address mappings\
    \ are not covered.  For firewalls,\n   firewall filter rules are considered as\
    \ resources.\n   The values provided by the following objects on NAT binds and\
    \ NAT\n   sessions may refer to the detailed resource usage description in the\n\
    \   NAT-MIB module [RFC4008].\n   The values provided by the following objects\
    \ on firewall rules may\n   refer to more detailed firewall resource usage descriptions\
    \ in other\n   MIB modules.\n   Entries in the midcomResourceTable are only valid\
    \ if the\n   midcomRuleOperStatus object of the corresponding entry in the\n \
    \  midcomRuleTable has a value of either reserved(7) or enabled(8).\n   An entry\
    \ of the table contains the following objects:\n   o   midcomRscNatInternalAddrBindMode\n\
    \       This object indicates whether the binding of the internal address\n  \
    \     is an address NAT binding or an address-port NAT binding.\n   o   midcomRscNatInternalAddrBindId\n\
    \       This object identifies the NAT binding for the internal address\n    \
    \   in the NAT engine.\n   o   midcomRscNatExternalAddrBindMode\n       This object\
    \ indicates whether the binding of the external address\n       is an address\
    \ NAT binding or an address-port NAT binding.\n   o   midcomRscNatExternalAddrBindId\n\
    \       This object identifies the NAT binding for the external address\n    \
    \   in the NAT engine.\n   o   midcomRscNatSessionId1\n       This object links\
    \ to the first NAT session associated with one of\n       the above NAT bindings.\n\
    \   o   midcomRscNatSessionId2\n       This object links to the optional second\
    \ NAT session associated\n       with one of the above NAT bindings.\n   o   midcomRscFirewallRuleId\n\
    \       This object indicates the firewall rule for this policy rule.\n   The\
    \ MIDCOM-MIB module does not require a middlebox to implement\n   further specific\
    \ middlebox (NAT, firewall, etc.) MIB modules as, for\n   example, the NAT-MIB\
    \ module [RFC4008].\n   The resource identifiers in the midcomResourceTable may\
    \ be vendor\n   proprietary in the cases where the middlebox does not implement\
    \ the\n   NAT-MIB [RFC4008] or a firewall MIB.  The MIDCOM-MIB module affects\n\
    \   NAT binding and sessions, as well as firewall pinholes.  It is\n   intentionally\
    \ not specified in the MIDCOM-MIB module how these NAT\n   and firewall resources\
    \ are allocated and managed, since this depends\n   on the MIDCOM-MIB implementation\
    \ and middlebox's capabilities.\n   However, the midcomResourceTable is useful\
    \ for understanding which\n   resources are affected by which MIDCOM-MIB transaction.\n\
    \   The midcomResourceTable is beneficial to the middlebox administrator\n   in\
    \ that the table lists all MIDCOM transactions and the middlebox\n   specific\
    \ resources to which these transactions refer.  For instance,\n   multiple MIDCOM\
    \ clients might end up using the same NAT bind, yet\n   each MIDCOM client might\
    \ define a Lifetime parameter and\n   directionality for the bind that is specific\
    \ to the transaction.\n   MIDCOM-MIB implementations are responsible for impacting\
    \ underlying\n   middlebox resources so as to satisfy the sometimes overlapping\n\
    \   requirements on the same resource from multiple MIDCOM clients.\n   Managing\
    \ these resources is not a trivial task for MIDCOM-MIB\n   implementers.  It is\
    \ possible that different MIDCOM-MIB policy rules\n   owned by different MIDCOM\
    \ clients share a NAT binding or a firewall\n   rule.  Then common properties,\
    \ for example, the lifetime of the\n   resource, need to be managed such that\
    \ all clients are served well\n   and changes to these resources need to be communicated\
    \ to all\n   affected clients.  Also, dependencies between resources, for example,\n\
    \   the precedence order of firewall rules, need to be considered\n   carefully\
    \ in order to avoid that different policy rules --\n   potentially owned by different\
    \ clients -- influence each other.\n   MIDCOM clients may use the midcomResourceTable\
    \ of the MIDCOM-MIB\n   module in conjunction with the NAT-MIB module [RFC4008]\
    \ to determine\n   which resources of the NAT are used for MIDCOM.  The NAT-MIB\
    \ module\n   stores the configured NAT bindings and sessions, and MIDCOM clients\n\
    \   can use the information of the midcomResourceTable to sort out those\n   NAT\
    \ resources that are used by the MIDCOM-MIB module.\n"
- title: 5.3.2.  midcomStatistics
  contents:
  - "5.3.2.  midcomStatistics\n   The statistics subtree contains a set of non-columnar\
    \ objects that\n   provide 'MIDCOM protocol statistics', i.e., statistics about\
    \ the\n   usage of transaction objects.\n   o   midcomCurrentOwners\n       This\
    \ object indicates the number of different values for\n       midcomRuleOwner\
    \ for all current entries in the midcomRuleTable.\n   o   midcomOwnersTotal\n\
    \       This object indicates the summarized number of all different\n       values\
    \ that occurred for midcomRuleOwner in the midcomRuleTable\n       current and\
    \ in the past.\n   o   midcomTotalRejectedRuleEntries\n       This object indicates\
    \ the total number of failed attempts to\n       create an entry in the midcomRuleTable.\n\
    \   o   midcomCurrentRulesIncomplete\n       This object indicates the total number\
    \ of policy rules that have\n       not been fully loaded into a table row of\
    \ the midcomRuleTable.\n   o   midcomTotalIncorrectReserveRules\n       This object\
    \ indicates the total number of policy reserve rules\n       that were rejected\
    \ because the request was incorrect.\n   o   midcomTotalRejectedReserveRules\n\
    \       This object indicates the total number of policy reserve rules\n     \
    \  that were failed while being processed.\n   o   midcomCurrentActiveReserveRules\n\
    \       This object indicates the number of currently active policy\n       reserve\
    \ rules in the midcomRuleTable.\n   o   midcomTotalExpiredReserveRules\n     \
    \  This object indicates the total number of expired policy reserve\n       rules.\n\
    \   o   midcomTotalTerminatedOnRqReserveRules\n       This object indicates the\
    \ total number of policy reserve rules\n       that were terminated on request.\n\
    \   o   midcomTotalTerminatedReserveRules\n       This object indicates the total\
    \ number of policy reserve rules\n       that were terminated, but not on request.\n\
    \   o   midcomTotalIncorrectEnableRules\n       This object indicates the total\
    \ number of policy enable rules\n       that were rejected because the request\
    \ was incorrect.\n   o   midcomTotalRejectedEnableRules\n       This object indicates\
    \ the total number of policy enable rules\n       that were failed while being\
    \ processed.\n   o   midcomCurrentActiveEnableRules\n       This object indicates\
    \ the number of currently active policy\n       enable rules in the midcomRuleTable.\n\
    \   o   midcomTotalExpiredEnableRules\n       This object indicates the total\
    \ number of expired policy enable\n       rules.\n   o   midcomTotalTerminatedOnRqEnableRules\n\
    \       This object indicates the total number of policy enable rules\n      \
    \ that were terminated on request.\n   o   midcomTotalTerminatedEnableRules\n\
    \       This object indicates the total number of policy enable rules\n      \
    \ that were terminated, but not on request.\n"
- title: 5.4.  Notifications
  contents:
  - "5.4.  Notifications\n   For informing MIDCOM clients about state changes of MIDCOM-MIB\n\
    \   implementations, three notifications can be used.  They notify the\n   MIDCOM\
    \ client about state changes of individual policy rules or of\n   groups of policy\
    \ rules.  Different notifications are used for\n   different kinds of transactions.\n\
    \   For asynchronous transactions, unsolicited notifications are used.\n   The\
    \ only asynchronous transaction that needs to be modeled by the\n   MIDCOM-MIB\
    \ is the Asynchronous Policy Rule Event (ARE).  The ARE may\n   be caused by the\
    \ expiration of a policy rule lifetime, the expiration\n   of the idle time, or\
    \ an internal change in policy rule lifetime by\n   the MIDCOM-MIB implementation\
    \ for whatever reason.\n   For configuration transactions, solicited notifications\
    \ are used.\n   This concerns the Policy Reserve Rule (PRR) transaction, the Policy\n\
    \   Enable Rule (PER) transaction, the Policy Rule Lifetime Change (RLC)\n   transaction,\
    \ and the Group Lifetime Change (GLC) transaction.\n   The separation between\
    \ unsolicited and solicited notifications gives\n   the implementer of a MIDCOM\
    \ client some freedom to make design\n   decisions on how to model the MIDCOM\
    \ reply message as described at\n   the end of section 4.2.2.  Depending on the\
    \ choice, processing of\n   solicited notifications may not be required.  In such\
    \ a case,\n   delivery of solicited notification may be disabled, for example,\
    \ by\n   an appropriate configuration of the snmpNotifyFilterTable such that\n\
    \   solicited notifications are filtered differently to unsolicited\n   notifications.\n\
    \   o   midcomUnsolicitedRuleEvent\n       This notification can be generated\
    \ for indicating the change of a\n       policy rule's state or lifetime.  It\
    \ is used for performing the\n       ARE transaction.\n   o   midcomSolicitedRuleEvent\n\
    \       This notification can be generated for indicating the requested\n    \
    \   change of a policy rule's state or lifetime.  It is used for\n       performing\
    \ PRR, PER, and RLC transactions.\n   o   midcomSolicitedGroupEvent\n       This\
    \ notification can be generated for indicating the requested\n       change of\
    \ a policy rule group's lifetime.  It is used for\n       performing the GLC transaction.\n"
- title: 6.  Recommendations for Configuration and Operation
  contents:
  - "6.  Recommendations for Configuration and Operation\n   Configuring MIDCOM-MIB\
    \ security is highly sensitive for obvious\n   reasons.  This section gives recommendations\
    \ for securely configuring\n   the SNMP agent acting as MIDCOM server.  In addition,\
    \ recommendations\n   for avoiding idempotency problems are given and restrictions\
    \ of\n   MIDCOM-MIB applicability to a special set of applications are\n   discussed.\n"
- title: 6.1.  Security Model Configuration
  contents:
  - "6.1.  Security Model Configuration\n   Since controlling firewalls and NATs is\
    \ highly sensitive, it is\n   RECOMMENDED that SNMP Command Responders implementing\
    \ the MIDCOM-MIB\n   module use the authPriv security level for all users that\
    \ may access\n   managed objects of the MIDCOM-MIB module.\n"
- title: 6.2.  VACM Configuration
  contents:
  - "6.2.  VACM Configuration\n   Entries in the midcomRuleTable and the midcomGroupTable\
    \ provide\n   information about existing firewall pinholes and/or NAT sessions.\n\
    \   They also could be used for manipulating firewall pinholes and/or NAT\n  \
    \ sessions.  Therefore, access control to these objects is essential\n   and should\
    \ be restrictive.\n   It is RECOMMENDED that SNMP Command Responders instantiating\
    \ an\n   implementation of the MIDCOM-MIB module use VACM for controlling\n  \
    \ access to managed objects in the midcomRuleTable and the\n   midcomGroupTable.\n\
    \   It is further RECOMMENDED that individual MIDCOM clients, acting as\n   SNMP\
    \ Command Generators, only have access to an entry in the\n   midcomRuleTable,\
    \ the midcomResourceTable, or the midcomGroupTable, if\n   they created the entry\
    \ directly in the midcomRuleTable or indirectly\n   in the midcomGroupTable and\
    \ midcomResourceTable.  Exceptions to this\n   recommendation are situations where\
    \ access by multiple MIDCOM clients\n   to managed objects is explicitly required.\
    \  One example is fail-over\n   for MIDCOM agents where the stand-by MIDCOM agent\
    \ needs the same\n   access rights to managed objects as the currently active\
    \ MIDCOM\n   agent.  Another example is a supervisor MIDCOM agent that monitors\n\
    \   activities of other MIDCOM agents and/or may be used by network\n   management\
    \ systems to modify entries in tables of the MIDCOM-MIB.\n   For this reason,\
    \ all three tables listed above have the\n   midcomRuleOwner as initial index.\
    \  It is RECOMMENDED that MIDCOM\n   clients acting as SNMP Command Generator\
    \ have access to the\n   midcomRuleTable and the midcomGroupTable restricted to\
    \ entries with\n   the initial index matching either their SNMP securityName or\
    \ their\n   VACM groupName.  It is RECOMMENDED that they do not have access to\n\
    \   entries in these tables with initial indices other than their SNMP\n   securityName\
    \ or their VACM groupName.  It is RECOMMENDED that this\n   VACM configuration\
    \ is applied to read access, write access, and\n   notify access for all objects\
    \ in the midcomRuleTable and the\n   midcomGroupTable.\n   Note that less restrictive\
    \ access rights MAY be granted to other\n   users, for example, to a network management\
    \ application, that\n   monitors MIDCOM policy rules.\n"
- title: 6.3.  Notification Configuration
  contents:
  - "6.3.  Notification Configuration\n   For each MIDCOM client that has access to\
    \ the midcomRuleTable, a\n   notification target SHOULD be configured at a Command\
    \ Responder\n   instantiating an implementation of the MIDCOM-MIB.  It is RECOMMENDED\n\
    \   that such a configuration be retrievable from the Command Responder\n   via\
    \ the SNMP-TARGET-MIB [RFC3413].\n   For each entry of the snmpTargetAddrTable\
    \ that is related to a MIDCOM\n   client, there SHOULD be an individual corresponding\
    \ entry in the\n   snmpTargetParamsTable.\n   An implementation of the MIDCOM-MIB\
    \ SHOULD also implement the SNMP-\n   NOTIFICATION-MIB [RFC3413].  An instance\
    \ of an implementation of the\n   MIDCOM-MIB SHOULD have an individual entry in\
    \ the\n   snmpNotifyFilterProfileTable for each MIDCOM client that has access\n\
    \   to the midcomRuleTable.\n   An instance of an implementation of the MIDCOM-MIB\
    \ SHOULD allow\n   MIDCOM clients to start and stop the generation of notifications\n\
    \   targeted at themselves.  This SHOULD be realized by giving the MIDCOM\n  \
    \ clients write access to the snmpNotifyFilterTable.  If appropriate\n   entries\
    \ of the snmpNotifyFilterTable are established in advance, then\n   this can be\
    \ achieved by granting MIDCOM clients write access only to\n   the columnar object\
    \ snmpNotifyFilterType.\n   It is RECOMMENDED that VACM be configured such that\
    \ each MIDCOM agent\n   can only access entries in the snmpTargetAddrTable, the\n\
    \   snmpTargetParamsTable, the snmpNotifyFilterProfileTable, and the\n   snmpFilterTable\
    \ that concern that particular MIDCOM agent.\n   Typically, read access to the\
    \ snmpTargetAddrTable, the\n   snmpTargetParamsTable, and the snmpNotifyFilterProfileTable\
    \ is\n   sufficient.  Write access may be required for objects of the\n   snmpFilterTable.\n"
- title: 6.4.  Simultaneous Access
  contents:
  - "6.4.  Simultaneous Access\n   Situations with two MIDCOM clients simultaneously\
    \ modifying the same\n   policy rule should be avoided.  For each entry in the\n\
    \   midcomRuleTable, there should be only one client at a time that\n   modifies\
    \ it.  If two MIDCOM clients share the same midcomRuleOwner\n   index of the midcomRuleTable,\
    \ then conflicts can be avoided, for\n   example, by\n      - scheduling access\
    \ times, as, for example, in the fail-over case;\n      - using different midcomGroupIndex\
    \ values per client; or\n      - using non-overlapping intervals for values of\
    \ the\n        midcomRuleIndex per client.\n"
- title: 6.5.  Avoiding Idempotency Problems
  contents:
  - "6.5.  Avoiding Idempotency Problems\n   As already discussed in section 4.2.4.4,\
    \ the following recommendation\n   is given for avoiding idempotency problems.\n\
    \   In general, idempotency problems can be solved by including\n   snmpSetSerialNo\
    \ (see [RFC3418]) in SNMP SET requests.\n   In case this feature is not used,\
    \ it is RECOMMENDED that the value of\n   the SNMP retransmission timer of a MIDCOM\
    \ client (acting as SNMP\n   Command Generator) is lower than the smallest requested\
    \ value for any\n   rule lifetime or rule idle time in order to prevent idempotency\n\
    \   problems with setting midcomRuleLifetime and midcomRuleMaxIdleTime\n   when\
    \ retransmitting an SNMP SET request after a lost SNMP reply.\n   MIDCOM client\
    \ implementations MAY completely avoid this problem by\n   configuring their SNMP\
    \ stack such that no retransmissions are sent.\n   Similar considerations apply\
    \ to MIDCOM-MIB implementations acting as\n   Notification Originator when sending\
    \ a notification\n   (midcomUnsolicitedRuleEvent, midcomSolicitedRuleEvent or\n\
    \   midcomSolicitedGroupEvent) containing the remaining lifetime of a\n   policy\
    \ rule or a policy rule group, respectively.\n"
- title: 6.6.  Interface Indexing Problems
  contents:
  - "6.6.  Interface Indexing Problems\n   A well-known problem of MIB modules is\
    \ indexing IP interfaces after a\n   re-initialization of the managed device.\
    \  The index for interfaces\n   provided by the ifTable (see IF-MIB in [RFC2863])\
    \ may change during\n   re-initialization, for example, when physical interfaces\
    \ are added or\n   removed.\n   The MIDCOM-MIB module uses the interface index\
    \ for indicating at\n   which interface which policy rule is (or is to be) applied.\
    \  Also,\n   this index is used for indicating how policy rules are prioritized\
    \ at\n   certain interfaces.  The MIDCOM-MIB module specification requires\n \
    \  that information provided is always correct.  This implies that after\n   re-initialization,\
    \ interface index values of policy rules or firewall\n   configurations may have\
    \ changed even though they still refer to the\n   same interface as before the\
    \ re-initialization.\n   MIDCOM client implementations need to be aware of this\
    \ potential\n   behavior.  It is RECOMMENDED that before writing the value or\
    \ using\n   the value of indices that depend on the ifTable the MIDCOM client\n\
    \   checks if the middlebox has been re-initialized recently.\n   MIDCOM-MIB module\
    \ implementations MUST track interface changes of IP\n   interface indices in\
    \ the ifTable.  This implies that after a re-\n   initialization of a middlebox,\
    \ a MIDCOM-MIB implementation MUST make\n   sure that each instance of an interface\
    \ index in the MIDCOM-MIB\n   tables still points to the same interface as before\
    \ the re-\n   initialization.  For any instance for which this is not possible,\
    \ all\n   affected entries in tables of the MIDCOM-MIB module MUST be either\n\
    \   terminated, disabled, or deleted, as specified in the DESCRIPTION\n   clause\
    \ of the respective object.  This concerns all objects in the\n   MIDCOM-MIB module\
    \ that are of type InterfaceIndexOrZero.\n"
- title: 6.7.  Applicability Restrictions
  contents:
  - "6.7.  Applicability Restrictions\n   As already discussed in section 5.1.1, the\
    \ MIDCOM-MIB requires the\n   MIDCOM client to specify address tuples A0 and A3.\
    \  This can be a\n   problem for applications that do not have this information\
    \ available\n   when they need to configure the middlebox.  For some applications,\n\
    \   there are usage scenarios where address information is only available\n  \
    \ for a single address realm, A0 and A1 in the private realm or A2 and\n   A3\
    \ in the public realm.  An example is an FTP application using the\n   PORT command\
    \ (instead of the PASV command).  The problem occurs when\n   the middlebox offers\
    \ twice-NAT functionality.\n"
- title: 7.  Usage Examples for MIDCOM Transactions
  contents:
  - "7.  Usage Examples for MIDCOM Transactions\n   This section presents some examples\
    \ that explain how a MIDCOM client\n   acting as SNMP manager can use the MIDCOM-MIB\
    \ module defined in this\n   memo.  The purpose of these examples is to explain\
    \ the steps that are\n   required to perform MIDCOM transactions.  For each MIDCOM\
    \ transaction\n   defined in the MIDCOM semantics [RFC5189], a sequence of SNMP\n\
    \   operations that realizes the transaction is described.\n   The examples described\
    \ below are recommended procedures for MIDCOM\n   clients.  Clients may choose\
    \ to operate differently.\n   For example, they may choose not to receive solicited\
    \ notifications\n   on completion of a transaction, but to poll the MIDCOM-MIB\
    \ instead\n   until the transaction is completed.  This can be achieved by\n \
    \  performing step 2 of the SE transaction (see below) differently.  The\n   MIDCOM\
    \ agent then creates an entry in the snmpNotifyFilterTable such\n   that only\
    \ the midcomUnsolicitedRuleEvent may pass the filter and is\n   sent to the MIDCOM\
    \ client.  In this case, the PER, PRR, and RLC\n   transactions require a polling\
    \ loop wherever in the example below the\n   MIDCOM client waits for a notification.\n"
- title: 7.1.  Session Establishment (SE)
  contents:
  - "7.1.  Session Establishment (SE)\n   The MIDCOM-MIB realizes most properties\
    \ of MIDCOM sessions in a very\n   static way.  Only the generation of notifications\
    \ targeted at the\n   MIDCOM client is enabled by the client for session establishment.\n\
    \   1. The MIDCOM client checks the middlebox capabilities by reading\n      objects\
    \ in the midcomCapabilitiesGroup.\n   2. The MIDCOM client enables generation\
    \ of notifications on events\n      concerning the policy rules controlled by\
    \ the client.  If the\n      SNMP-NOTIFICATION-MIB is supported as recommended\
    \ by section 6.3\n      of this document, then the agent just has to change the\
    \ value of a\n      object snmpNotifyFilterType in the corresponding entry of\
    \ the\n      snmpNotifyFilterTable from included(1) to excluded(2).\n"
- title: 7.2.  Session Termination (ST)
  contents:
  - "7.2.  Session Termination (ST)\n   For terminating a session, the MIDCOM client\
    \ just disables the\n   generation of notifications for this client.\n   1. The\
    \ MIDCOM client disables generation of notifications on events\n      concerning\
    \ the policy rules controlled by the client.  If the\n      SNMP-NOTIFICATION-MIB\
    \ is supported as recommended by section 6.3\n      of this document, then the\
    \ agent just has to change the value of a\n      object snmpNotifyFilterType in\
    \ the corresponding entry of the\n      snmpNotifyFilterTable from included(1)\
    \ to excluded(2).\n"
- title: 7.3.  Policy Reserve Rule (PRR)
  contents:
  - "7.3.  Policy Reserve Rule (PRR)\n   This example explains steps that may be performed\
    \ by a MIDCOM client\n   to establish a policy reserve rule.\n   1. The MIDCOM\
    \ client creates a new entry in the midcomRuleTable by\n      writing to midcomRuleRowStatus.\
    \  The chosen value for index object\n      midcomGroupIndex determines the group\
    \ membership of the created\n      rule.  Note that choosing an unused value for\
    \ midcomGroupIndex\n      creates a new entry in the midcomGroupTable.\n   2.\
    \ The MIDCOM client sets the following objects in the new entry of\n      the\
    \ midcomRuleTable to specify all request parameters of the PRR\n      transaction:\n\
    \         - midcomRuleMaxIdleTime\n         - midcomRuleInterface\n         -\
    \ midcomRuleTransportProtocol\n         - midcomRulePortRange\n         - midcomRuleInternalIpVersion\n\
    \         - midcomRuleExternalIpVersion\n         - midcomRuleInternalIpAddr\n\
    \         - midcomRuleInternalIpPrefixLength\n         - midcomRuleInternalPort\n\
    \         - midcomRuleLifetime\n      Note that several of these parameters have\
    \ default values that can\n      be used.\n   3. The MIDCOM client sets the midcomRuleAdminStatus\
    \ objects in the\n      new row of the midcomRuleTable to reserve(1).\n   4. The\
    \ MIDCOM client awaits a midcomSolicitedRuleEvent notification\n      concerning\
    \ the new policy rule in the midcomRuleTable.  Waiting\n      for the notification\
    \ is timed out after a pre-selected maximum\n      waiting time.  In case of a\
    \ timeout while waiting for the\n      notification or if the client does not\
    \ use notifications, the\n      MIDCOM client retrieves the status of the midcomRuleEntry\
    \ by one\n      or more SNMP GET operations.\n   5. After receiving the midcomSolicitedRuleEvent\
    \ notification, the\n      MIDCOM client checks the lifetime value carried by\
    \ the\n      notification.  If it is greater than 0, the MIDCOM client reads\n\
    \      all positive reply parameters of the PRR transaction:\n         - midcomRuleOutsideIpAddr\n\
    \         - midcomRuleOutsidePort\n         - midcomRuleMaxIdleTime\n        \
    \ - midcomRuleLifetime\n      If the lifetime equals 0, then the MIDCOM client\
    \ reads the\n      midcomRuleOperStatus and the midcomRuleError in order to analyze\n\
    \      the failure reason.\n   6. Optionally, after receiving the midcomSolicitedRuleEvent\n\
    \      notification with a lifetime value greater than 0, the MIDCOM\n      client\
    \ may check the midcomResourceTable for the middlebox\n      resources allocated\
    \ for this policy reserve rule.  Note that PRR\n      does not necessarily allocate\
    \ any middlebox resource visible in\n      the NAT-MIB module or in a firewall\
    \ MIB module, since it does a\n      reservation only.  If, however, the PRR overlaps\
    \ with already\n      existing PERs, then the PRR may be related to middlebox\
    \ resources\n      visible in other MIB modules.\n"
- title: 7.4.  Policy Enable Rule (PER) after PRR
  contents:
  - "7.4.  Policy Enable Rule (PER) after PRR\n   This example explains steps that\
    \ may be performed by a MIDCOM client\n   to establish a policy enable rule after\
    \ a corresponding policy\n   reserve rule was already established.\n   1. The\
    \ MIDCOM client sets the following objects in the row of the\n      established\
    \ PRR in the midcomRuleTable to specify all request\n      parameters of the PER\
    \ transaction:\n         - midcomRuleMaxIdleTime\n         - midcomRuleExternalIpAddr\n\
    \         - midcomRuleExternalIpPrefixLength\n         - midcomRuleExternalPort\n\
    \         - midcomRuleFlowDirection\n      Note that several of these parameters\
    \ have default values that can\n      be used.\n   2. The MIDCOM client sets the\
    \ midcomRuleAdminStatus objects in the\n      row of the established PRR in the\
    \ midcomRuleTable to enable(1).\n   3. The MIDCOM client awaits a midcomSolicitedRuleEvent\
    \ notification\n      concerning the new row in the midcomRuleTable.  Waiting\
    \ for the\n      notification is timed out after a pre-selected maximum waiting\n\
    \      time.  In case of a timeout while waiting for the notification or\n   \
    \   if the client does not use notifications, the MIDCOM client\n      retrieves\
    \ the status of the midcomRuleEntry by one or more SNMP\n      GET operations.\n\
    \   4. After receiving the midcomSolicitedRuleEvent notification, the\n      MIDCOM\
    \ client checks the lifetime value carried by the\n      notification.  If it\
    \ is greater than 0, the MIDCOM client reads\n      all positive reply parameters\
    \ of the PER transaction:\n         - midcomRuleInsideIpAddr\n         - midcomRuleInsidePort\n\
    \         - midcomRuleMaxIdleTime\n      If the lifetime equals 0, then the MIDCOM\
    \ client reads the\n      midcomRuleOperStatus and the midcomRuleError in order\
    \ to analyze\n      the failure reason.\n   5. Optionally, after receiving the\
    \ midcomSolicitedRuleEvent\n      notification with a lifetime value greater than\
    \ 0, the MIDCOM\n      client may check the midcomResourceTable for the allocated\n\
    \      middlebox resources for this policy enable rule.\n"
- title: 7.5.  Policy Enable Rule (PER) without Previous PRR
  contents:
  - "7.5.  Policy Enable Rule (PER) without Previous PRR\n   This example explains\
    \ steps that may be performed by a MIDCOM client\n   to establish a policy enable\
    \ rule for which no PRR transaction has\n   been performed before.\n   1. Identical\
    \ to step 1 for PRR (section 7.3).\n   2. Identical to step 2 for PRR (section\
    \ 7.3).\n   3. The MIDCOM client sets the following objects in the new row of\
    \ the\n      midcomRuleTable to specify all request parameters of the PER\n  \
    \    transaction:\n         - midcomRuleInterface\n         - midcomRuleFlowDirection\n\
    \         - midcomRuleTransportProtocol\n         - midcomRulePortRange\n    \
    \     - midcomRuleInternalIpVersion\n         - midcomRuleExternalIpVersion\n\
    \         - midcomRuleInternalIpAddr\n         - midcomRuleInternalIpPrefixLength\n\
    \         - midcomRuleInternalPort\n         - midcomRuleExternalIpAddr\n    \
    \     - midcomRuleExternalIpPrefixLength\n         - midcomRuleExternalPort\n\
    \         - midcomRuleLifetime\n      Note that several of these parameters have\
    \ default values that can\n      be used.\n   4. The MIDCOM client sets the midcomRuleAdminStatus\
    \ objects in the\n      new row of the midcomRuleTable to enable(1).\n   5. Identical\
    \ to step 4 for PRR (section 7.3).\n   6. After receiving the midcomSolicitedRuleEvent\
    \ notification, the\n      MIDCOM client checks the lifetime value carried by\
    \ the\n      notification.  If it is greater than 0, the MIDCOM client reads\n\
    \      all positive reply parameters of the PRR transaction:\n         - midcomRuleInsideIpAddr\n\
    \         - midcomRuleInsidePort\n         - midcomRuleOutsideIpAddr\n       \
    \  - midcomRuleOutsidePort\n         - midcomRuleMaxIdleTime\n      If the lifetime\
    \ equals 0, then the MIDCOM client reads the\n      midcomRuleOperStatus and the\
    \ midcomRuleError in order to analyze\n      the failure reason.\n   7. Optionally,\
    \ after receiving the midcomSolicitedRuleEvent\n      notification with a lifetime\
    \ value greater than 0, the MIDCOM\n      client may check the midcomResourceTable\
    \ for the allocated\n      middlebox resources for this policy enable rule.\n"
- title: 7.6.  Policy Rule Lifetime Change (RLC)
  contents:
  - "7.6.  Policy Rule Lifetime Change (RLC)\n   This example explains steps that\
    \ may be performed by a MIDCOM client\n   to change the lifetime of a policy rule.\
    \  Changing the lifetime to 0\n   implies terminating the policy rule.\n   1.\
    \ The MIDCOM client issues a SET request for writing the desired\n   lifetime\
    \ to the midcomRuleLifetime object in the corresponding row of\n   the midcomRuleTable.\
    \  This does not have any effect if the lifetime\n   is already expired.\n   2.\
    \ The MIDCOM client awaits a midcomSolicitedRuleEvent notification\n   concerning\
    \ the corresponding row in the midcomRuleTable.  Waiting for\n   the notification\
    \ is timed out after a pre-selected maximum waiting\n   time.  In case of a timeout\
    \ while waiting for the notification or if\n   the client does not use notifications,\
    \ the MIDCOM client retrieves\n   the status of the midcomRuleEntry by one or\
    \ more SNMP GET operations.\n   3. After receiving the midcomSolicitedRuleEvent\
    \ notification MIDCOM\n   client checks the lifetime value carried by the notification.\n"
- title: 7.7.  Policy Rule List (PRL)
  contents:
  - "7.7.  Policy Rule List (PRL)\n   The SNMP agent can browse the list of policy\
    \ rules by browsing the\n   midcomRuleTable.  For each observed row in this table,\
    \ the SNMP agent\n   should check the midcomRuleOperStatus in order to find out\
    \ if the row\n   contains information about an established policy rule or of a\
    \ rule\n   that is under construction or already terminated.\n"
- title: 7.8.  Policy Rule Status (PRS)
  contents:
  - "7.8.  Policy Rule Status (PRS)\n   The SNMP agent can retrieve all status information\
    \ and properties of\n   a policy rule by reading the managed objects in the corresponding\
    \ row\n   of the midcomRuleTable.\n"
- title: 7.9.  Asynchronous Policy Rule Event (ARE)
  contents:
  - "7.9.  Asynchronous Policy Rule Event (ARE)\n   There are two different triggers\
    \ for the ARE.  It may be triggered by\n   the expiration of a policy rule's lifetime\
    \ or the expiration of the\n   idle time.  But beyond this, the MIDCOM-MIB implementation\
    \ may\n   terminate a policy rule at any time.  In all cases, two steps are\n\
    \   required for performing this transaction:\n   1. The MIDCOM-MIB implementation\
    \ sends a midcomUnsolicitedRuleEvent\n      notification containing a lifetime\
    \ value of 0 to the MIDCOM client\n      owning the rule.\n   2. If the midcomRuleStorageTime\
    \ object in the corresponding row of\n      the midcomRuleTable has a value of\
    \ 0, then the MIDCOM-MIB\n      implementation removes the row from the table.\
    \  Otherwise, it sets\n      in this row the midcomRuleLifetime object to 0 and\
    \ changes the\n      midcomRuleOperStatus object.  If the event was triggered\
    \ by policy\n      lifetime expiration, then the midcomRuleOperStatus is set to\n\
    \      timedOut(9); otherwise, it is set to terminated(11).\n"
- title: 7.10.  Group Lifetime Change (GLC)
  contents:
  - "7.10.  Group Lifetime Change (GLC)\n   This example explains steps that may be\
    \ performed by a MIDCOM client\n   to change the lifetime of a policy rule group.\
    \  Changing the lifetime\n   to 0 implies terminating all member policies of the\
    \ group.\n   1. The MIDCOM client issues a SET request for writing the desired\n\
    \      lifetime to the midcomGroupLifetime object in the corresponding\n     \
    \ row of the midcomGroupTable.\n   2. The MIDCOM client waits for a midcomSolicitedGroupEvent\n\
    \      notification concerning the corresponding row in the\n      midcomGroupTable.\
    \  Waiting for the notification is timed out after\n      a pre-selected maximum\
    \ waiting time.  In case of a timeout while\n      waiting for the notification\
    \ or if the client does not use\n      notifications, the MIDCOM client retrieves\
    \ the status of the\n      midcomGroupEntry by one or more SNMP GET operations.\n\
    \   3. After receiving the midcomSolicitedRuleEvent notification, the\n      MIDCOM\
    \ client checks the lifetime value carried by the\n      notification.\n"
- title: 7.11.  Group List (GL)
  contents:
  - "7.11.  Group List (GL)\n   The SNMP agent can browse the list of policy rule\
    \ groups by browsing\n   the midcomGroupTable.  For each observed row in this\
    \ table, the SNMP\n   agent should check the midcomGroupLifetime in order to find\
    \ out if\n   the group does contain established policies.\n"
- title: 7.12.  Group Status (GS)
  contents:
  - "7.12.  Group Status (GS)\n   The SNMP agent can retrieve all member policies\
    \ of a group by\n   browsing the midcomRuleTable using the midcomGroupIndex of\
    \ the\n   particular group.  For retrieving the remaining lifetime of the\n  \
    \ group, the SNMP agent reads the midcomGroupLifetime object in the\n   corresponding\
    \ row of the midcomGroupTable.\n"
- title: 8.  Usage Examples for Monitoring Objects
  contents:
  - "8.  Usage Examples for Monitoring Objects\n   This section presents some examples\
    \ that explain how a MIDCOM client\n   can use the midcomResourceTable to correlate\
    \ policy rules with the\n   used middlebox resources.  One example is given for\
    \ middleboxes\n   implementing the NAT-MIB and another one is given for firewalls.\n"
- title: 8.1.  Monitoring NAT Resources
  contents:
  - "8.1.  Monitoring NAT Resources\n   When a rule in the midcomRuleTable is executed,\
    \ it directly impacts\n   the middlebox resources.  The midcomResourceTable provides\
    \ the\n   information on the relationships between the MIDCOM-MIB policy rules\n\
    \   and the middlebox resources used for enforcing these rules.\n   A MIDCOM-MIB\
    \ policy rule will cause the creation or modification of\n   up to two NAT bindings\
    \ and up to two NAT sessions.  Two NAT bindings\n   are impacted in the case of\
    \ a session being subject to twice-NAT.\n   Two NAT bindings may also be impacted\
    \ when midcomRulePortRange is set\n   to pair(2) in the policy rule.  In the majority\
    \ of cases, where\n   traditional NAT is implemented, only a single NAT binding\
    \ may be\n   adequate.  Note, however, that this BindId is set to 0 if the\n \
    \  middlebox is implementing symmetric NAT function.  Two NAT sessions\n   are\
    \ created or modified only when the midcomRulePortRange is set to\n   pair(2)\
    \ in the policy rule.\n   When support for the NAT-MIB module is also available\
    \ at the\n   middlebox, the parameters in the combination of the midcomRuleTable\n\
    \   and the midcomResourceTable for a given rule can be used to index the\n  \
    \ corresponding BIND and NAT session resources effected in the NAT-MIB.\n   These\
    \ parameters are valuable to monitor the impact on the NAT\n   module, even when\
    \ the NAT-MIB module is not implemented at the\n   middlebox.\n   The impact of\
    \ MIDCOM rules on the NAT resources is important because\n   a MIDCOM rule not\
    \ only can create BINDs and NAT sessions, but also is\n   capable of modifying\
    \ the NAT objects that already exist.  For\n   example, FlowDirection and MaxIdleTime\
    \ parameters in a MIDCOM rule\n   directly affect the TranslationEntity and MaxIdleTime\
    \ of the\n   associated NAT bind object.  Likewise, MaxIdleTime in a MIDCOM rule\n\
    \   has a direct impact on the MaxIdleTime of the associated NAT session\n   object.\
    \  The lifetime parameter in the MIDCOM rule directly impacts\n   the lifetime\
    \ of all the impacted NAT BIND and NAT session objects.\n"
- title: 8.2.  Monitoring Firewall Resources
  contents:
  - "8.2.  Monitoring Firewall Resources\n   When a MIDCOM-MIB policy rule is established\
    \ at a middlebox with\n   firewall capabilities, this may lead to the creation\
    \ of one or more\n   new firewall rules.  Note that in general a single firewall\
    \ rule per\n   MIDCOM-MIB policy rule will be sufficient.  For each policy rule,\
    \ a\n   MIDCOM client can explore the corresponding firewall filter rule by\n\
    \   reading the midcomResourceEntry in the midcomResourceTable that\n   corresponds\
    \ to the midcomRuleEntry describing the rule.  The\n   identification of the firewall\
    \ filter rule is stored in object\n   midcomRscFirewallRuleId.  The value of midcomRscFirewallRuleId\
    \ may\n   correspond directly to any firewall filter rule number or to an entry\n\
    \   in a locally available firewall MIB module.\n"
- title: 9.  Definitions
  contents:
  - "9.  Definitions\n   The following MIB module imports from [RFC2578], [RFC2579],\n\
    \   [RFC2580], [RFC2863], [RFC3411], [RFC4001], and [RFC4008].\n   MIDCOM-MIB\
    \ DEFINITIONS ::= BEGIN\n   IMPORTS\n       MODULE-IDENTITY, OBJECT-TYPE,\n  \
    \     NOTIFICATION-TYPE, Unsigned32,\n       Counter32, Gauge32, mib-2\n     \
    \      FROM SNMPv2-SMI                  -- RFC 2578\n       TEXTUAL-CONVENTION,\
    \ TruthValue,\n       StorageType, RowStatus\n           FROM SNMPv2-TC      \
    \             -- RFC 2579\n       MODULE-COMPLIANCE, OBJECT-GROUP,\n       NOTIFICATION-GROUP\n\
    \           FROM SNMPv2-CONF                 -- RFC 2580\n       SnmpAdminString\n\
    \           FROM SNMP-FRAMEWORK-MIB          -- RFC 3411\n       InetAddressType,\
    \ InetAddress,\n       InetPortNumber,\n       InetAddressPrefixLength\n     \
    \      FROM INET-ADDRESS-MIB            -- RFC 4001\n       InterfaceIndexOrZero\n\
    \           FROM IF-MIB                      -- RFC 2863\n       NatBindIdOrZero\n\
    \           FROM NAT-MIB;                    -- RFC 4008\n   midcomMIB MODULE-IDENTITY\n\
    \       LAST-UPDATED \"200708091011Z\"  -- August 09, 2007\n       ORGANIZATION\
    \ \"IETF Middlebox Communication Working Group\"\n       CONTACT-INFO\n      \
    \    \"WG charter:\n             http://www.ietf.org/html.charters/midcom-charter.html\n\
    \           Mailing Lists:\n             General Discussion: midcom@ietf.org\n\
    \             To Subscribe: midcom-request@ietf.org\n             In Body: subscribe\
    \ your_email_address\n           Co-editor:\n             Juergen Quittek\n  \
    \           NEC Europe Ltd.\n             Kurfuersten-Anlage 36\n            \
    \ 69115 Heidelberg\n             Germany\n             Tel: +49 6221 4342-115\n\
    \             Email: quittek@nw.neclab.eu\n           Co-editor:\n           \
    \  Martin Stiemerling\n             NEC Europe Ltd.\n             Kurfuersten-Anlage\
    \ 36\n             69115 Heidelberg\n             Germany\n             Tel: +49\
    \ 6221 4342-113\n             Email: stiemerling@nw.neclab.eu\n           Co-editor:\n\
    \             Pyda Srisuresh\n             Kazeon Systems, Inc.\n            \
    \ 1161 San Antonio Rd.\n             Mountain View, CA 94043\n             U.S.A.\n\
    \             Tel: +1 408 836-4773\n             Email: srisuresh@yahoo.com\"\n\
    \       DESCRIPTION\n           \"This MIB module defines a set of basic objects\
    \ for\n            configuring middleboxes, such as firewalls and network\n  \
    \          address translators, in order to enable communication\n           \
    \ across these devices.\n            Managed objects defined in this MIB module\
    \ are structured\n            in three kinds of objects:\n              - transaction\
    \ objects required according to the MIDCOM\n                protocol requirements\
    \ defined in RFC 3304 and according\n                to the MIDCOM protocol semantics\
    \ defined in RFC 3989,\n              - configuration objects that can be used\
    \ for retrieving or\n                setting parameters of the implementation\
    \ of transaction\n                objects,\n              - optional monitoring\
    \ objects that provide information\n                about used resource and statistics\n\
    \            The transaction objects are organized in two subtrees:\n        \
    \      - objects modeling MIDCOM policy rules in the\n                midcomRuleTable\n\
    \              - objects modeling MIDCOM policy rule groups in the\n         \
    \       midcomGroupTable\n            Note that typically, configuration objects\
    \ are not intended\n            to be written by MIDCOM clients.  In general,\
    \ write access\n            to these objects needs to be restricted more strictly\
    \ than\n            write access to objects in the transaction subtrees.\n   \
    \         Copyright (C) The Internet Society (2008).  This version\n         \
    \   of this MIB module is part of RFC 5190;  see the RFC\n            itself for\
    \ full legal notices.\"\n       REVISION    \"200708091011Z\"  -- August 09, 2007\n\
    \       DESCRIPTION \"Initial version, published as RFC 5190.\"\n       ::= {\
    \ mib-2 171 }\n   --\n   -- main components of this MIB module\n   --\n   midcomNotifications\
    \   OBJECT IDENTIFIER ::= { midcomMIB 0 }\n   midcomObjects         OBJECT IDENTIFIER\
    \ ::= { midcomMIB 1 }\n   midcomConformance     OBJECT IDENTIFIER ::= { midcomMIB\
    \ 2 }\n   --  Transaction objects required according to the MIDCOM\n   --  protocol\
    \ requirements defined in RFC 3304 and according to\n   --  the MIDCOM protocol\
    \ semantics defined in RFC 3989\n   midcomTransaction     OBJECT IDENTIFIER ::=\
    \ { midcomObjects 1 }\n   --  Configuration objects that can be used for retrieving\n\
    \   --  middlebox capability information (mandatory) and for\n   --  setting parameters\
    \ of the implementation of transaction\n   --  objects (optional)\n   midcomConfig\
    \   OBJECT IDENTIFIER ::= { midcomObjects 2 }\n   --  Optional monitoring objects\
    \ that provide information about\n   --  used resource and statistics\n   midcomMonitoring\
    \      OBJECT IDENTIFIER ::= { midcomObjects 3 }\n   --\n   -- Transaction Objects\n\
    \   --\n   -- Transaction objects are structured according to the MIDCOM\n   --\
    \ protocol semantics into two groups:\n   --   - objects modeling MIDCOM policy\
    \ rules in the midcomRuleTable\n   --   - objects modeling MIDCOM policy rule\
    \ groups in the\n   --     midcomGroupTable\n   --\n   -- Policy rule subtree\n\
    \   --\n   -- The midcomRuleTable lists policy rules\n   -- including policy reserve\
    \ rules and policy enable rules.\n   --\n   midcomRuleTable OBJECT-TYPE\n    \
    \   SYNTAX      SEQUENCE OF MidcomRuleEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This table lists\
    \ policy rules.\n            It is indexed by the midcomRuleOwner, the\n     \
    \       midcomGroupIndex, and the midcomRuleIndex.\n            This implies that\
    \ a rule is a member of exactly\n            one group and that group membership\
    \ cannot\n            be changed.\n            Entries can be deleted by writing\
    \ to\n            midcomGroupLifetime or midcomRuleLifetime\n            and potentially\
    \ also to midcomRuleStorageTime.\"\n       ::= { midcomTransaction 3 }\n   midcomRuleEntry\
    \ OBJECT-TYPE\n       SYNTAX      MidcomRuleEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"An entry describing\
    \ a particular MIDCOM policy rule.\"\n       INDEX { midcomRuleOwner, midcomGroupIndex,\
    \ midcomRuleIndex }\n       ::= { midcomRuleTable 1 }\n   MidcomRuleEntry ::=\
    \ SEQUENCE {\n       midcomRuleOwner                   SnmpAdminString,\n    \
    \   midcomRuleIndex                   Unsigned32,\n       midcomRuleAdminStatus\
    \             INTEGER,\n       midcomRuleOperStatus              INTEGER,\n  \
    \     midcomRuleStorageType             StorageType,\n       midcomRuleStorageTime\
    \             Unsigned32,\n       midcomRuleError                   SnmpAdminString,\n\
    \       midcomRuleInterface               InterfaceIndexOrZero,\n       midcomRuleFlowDirection\
    \           INTEGER,\n       midcomRuleMaxIdleTime             Unsigned32,\n \
    \      midcomRuleTransportProtocol       Unsigned32,\n       midcomRulePortRange\
    \               INTEGER,\n       midcomRuleInternalIpVersion       InetAddressType,\n\
    \       midcomRuleExternalIpVersion       InetAddressType,\n       midcomRuleInternalIpAddr\
    \          InetAddress,\n       midcomRuleInternalIpPrefixLength  InetAddressPrefixLength,\n\
    \       midcomRuleInternalPort            InetPortNumber,\n       midcomRuleExternalIpAddr\
    \          InetAddress,\n       midcomRuleExternalIpPrefixLength  InetAddressPrefixLength,\n\
    \       midcomRuleExternalPort            InetPortNumber,\n       midcomRuleInsideIpAddr\
    \            InetAddress,\n       midcomRuleInsidePort              InetPortNumber,\n\
    \       midcomRuleOutsideIpAddr           InetAddress,\n       midcomRuleOutsidePort\
    \             InetPortNumber,\n       midcomRuleLifetime                Unsigned32,\n\
    \       midcomRuleRowStatus               RowStatus\n   }\n   midcomRuleOwner\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString (SIZE (0..32))\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"The manager who owns this row in the midcomRuleTable.\n            This object\
    \ SHOULD uniquely identify an authenticated\n            MIDCOM client.  This\
    \ object is part of the table index to\n            allow for the use of the SNMPv3\
    \ View-based Access Control\n            Model (VACM, RFC 3415).\"\n       ::=\
    \ { midcomRuleEntry 1 }\n   midcomRuleIndex OBJECT-TYPE\n       SYNTAX      Unsigned32\
    \ (1..4294967295)\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The value of this object must be unique in\n\
    \            combination with the values of the objects\n            midcomRuleOwner\
    \ and midcomGroupIndex in this row.\"\n       ::= { midcomRuleEntry 3 }\n   midcomRuleAdminStatus\
    \ OBJECT-TYPE\n       SYNTAX      INTEGER {\n                       reserve(1),\n\
    \                       enable(2),\n                       notSet(3)\n       \
    \            }\n       MAX-ACCESS  read-create\n       STATUS      current\n \
    \      DESCRIPTION\n           \"The value of this object indicates the desired\
    \ status of\n            the policy rule.  See the definition of midcomRuleOperStatus\n\
    \            for a description of the values.\n            When a midcomRuleEntry\
    \ is created without explicitly setting\n            this object, its value will\
    \ be notSet(3).\n            However, a SET request can only set this object to\
    \ either\n            reserve(1) or enable(2).  Attempts to set this object to\n\
    \            notSet(3) will always fail with an 'inconsistentValue'\n        \
    \    error.  Note that this error code is SNMP specific.  If the\n           \
    \ MIB module is used with other protocols than SNMP, errors\n            with\
    \ similar semantics specific to those protocols should\n            be returned.\n\
    \            When the midcomRuleAdminStatus object is set, then the\n        \
    \    MIDCOM-MIB implementation will try to read the respective\n            relevant\
    \ objects of the entry and try to achieve the\n            corresponding midcomRuleOperStatus.\n\
    \            Setting midcomRuleAdminStatus to value reserve(1) when\n        \
    \    object midcomRuleOperStatus has a value of reserved(7)\n            does\
    \ not have any effect on the policy rule.\n            Setting midcomRuleAdminStatus\
    \ to value enable(2) when\n            object midcomRuleOperStatus has a value\
    \ of enabled(8)\n            does not have any effect on the policy rule.\n  \
    \          Depending on whether the midcomRuleAdminStatus is set to\n        \
    \    reserve(1) or enable(2), several objects must be set in\n            advance.\
    \  They serve as parameters of the policy rule to be\n            established.\n\
    \            When object midcomRuleAdminStatus is set to reserve(1),\n       \
    \     then the following objects in the same entry are of\n            relevance:\n\
    \                - midcomRuleInterface\n                - midcomRuleTransportProtocol\n\
    \                - midcomRulePortRange\n                - midcomRuleInternalIpVersion\n\
    \                - midcomRuleExternalIpVersion\n                - midcomRuleInternalIpAddr\n\
    \                - midcomRuleInternalIpPrefixLength\n                - midcomRuleInternalPort\n\
    \                - midcomRuleLifetime\n            MIDCOM-MIB implementation may\
    \ also consider the value\n            of object midcomRuleMaxIdleTime when establishing\n\
    \            a reserve rule.\n            When object midcomRuleAdminStatus is\
    \ set to enable(2),\n            then the following objects in the same entry\
    \ are of\n            relevance:\n                - midcomRuleInterface\n    \
    \            - midcomRuleFlowDirection\n                - midcomRuleMaxIdleTime\n\
    \                - midcomRuleTransportProtocol\n                - midcomRulePortRange\n\
    \                - midcomRuleInternalIpVersion\n                - midcomRuleExternalIpVersion\n\
    \                - midcomRuleInternalIpAddr\n                - midcomRuleInternalIpPrefixLength\n\
    \                - midcomRuleInternalPort\n                - midcomRuleExternalIpAddr\n\
    \                - midcomRuleExternalIpPrefixLength\n                - midcomRuleExternalPort\n\
    \                - midcomRuleLifetime\n            When retrieved, the object\
    \ returns the last set value.\n            If no value has been set, it returns\
    \ the default value\n            notSet(3).\"\n       DEFVAL { notSet }\n    \
    \   ::= { midcomRuleEntry 4 }\n   midcomRuleOperStatus OBJECT-TYPE\n       SYNTAX\
    \      INTEGER {\n                       newEntry(1),\n                      \
    \ setting(2),\n                       checkingRequest(3),\n                  \
    \     incorrectRequest(4),\n                       processingRequest(5),\n   \
    \                    requestRejected(6),\n                       reserved(7),\n\
    \                       enabled(8),\n                       timedOut(9),\n   \
    \                    terminatedOnRequest(10),\n                       terminated(11),\n\
    \                       genericError(12)\n                   }\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n           \"The\
    \ actual status of the policy rule.  The\n            midcomRuleOperStatus object\
    \ may have the following values:\n            - newEntry(1) indicates that the\
    \ entry in the\n              midcomRuleTable was created, but not modified yet.\n\
    \              Such an entry needs to be filled with values specifying\n     \
    \         a request first.\n            - setting(2) indicates that the entry\
    \ has been already\n              modified after generating it, but no request\
    \ was made\n              yet.\n            - checkingRequest(3) indicates that\
    \ midcomRuleAdminStatus\n              has recently been set and that the MIDCOM-MIB\n\
    \              implementation is currently checking the parameters of\n      \
    \        the request.  This is a transient state.  The value of\n            \
    \  this object will change to either incorrectRequest(4)\n              or processingRequest(5)\
    \ without any external\n              interaction.  A MIDCOM-MIB implementation\
    \ MAY return\n              this value while checking request parameters.\n  \
    \          - incorrectRequest(4) indicates that checking a request\n         \
    \     resulted in detecting an incorrect value in one of the\n              objects\
    \ containing request parameters.  The failure\n              reason is indicated\
    \ by the value of midcomRuleError.\n            - processingRequest(5) indicates\
    \ that\n              midcomRuleAdminStatus has recently been set and that\n \
    \             the MIDCOM-MIB implementation is currently processing\n        \
    \      the request and trying to configure the middlebox\n              accordingly.\
    \  This is a transient state.  The value of\n              this object will change\
    \ to either requestRejected(6),\n              reserved(7), or enabled(8) without\
    \ any external\n              interaction.  A MIDCOM-MIB implementation MAY return\n\
    \              this value while processing a request.\n            - requestRejected(6)\
    \ indicates that a request to establish\n              a policy rule specified\
    \ by the entry was rejected.  The\n              reason for rejection is indicated\
    \ by the value of\n              midcomRuleError.\n            - reserved(7) indicates\
    \ that the entry describes an\n              established policy reserve rule.\n\
    \              These values of MidcomRuleEntry are meaningful\n              for\
    \ a reserved policy rule:\n                  - midcomRuleMaxIdleTime\n       \
    \           - midcomRuleInterface\n                  - midcomRuleTransportProtocol\n\
    \                  - midcomRulePortRange\n                  - midcomRuleInternalIpVersion\n\
    \                  - midcomRuleExternalIpVersion\n                  - midcomRuleInternalIpAddr\n\
    \                  - midcomRuleInternalIpPrefixLength\n                  - midcomRuleInternalPort\n\
    \                  - midcomRuleOutsideIpAddr\n                  - midcomRuleOutsidePort\n\
    \                  - midcomRuleLifetime\n            - enabled(8) indicates that\
    \ the entry describes an\n              established policy enable rule.\n    \
    \          These values of MidcomRuleEntry are meaningful\n              for an\
    \ enabled policy rule:\n                  - midcomRuleFlowDirection\n        \
    \          - midcomRuleInterface\n                  - midcomRuleMaxIdleTime\n\
    \                  - midcomRuleTransportProtocol\n                  - midcomRulePortRange\n\
    \                  - midcomRuleInternalIpVersion\n                  - midcomRuleExternalIpVersion\n\
    \                  - midcomRuleInternalIpAddr\n                  - midcomRuleInternalIpPrefixLength\n\
    \                  - midcomRuleInternalPort\n                  - midcomRuleExternalIpAddr\n\
    \                  - midcomRuleExternalIpPrefixLength\n                  - midcomRuleExternalPort\n\
    \                  - midcomRuleInsideIpAddr\n                  - midcomRuleInsidePort\n\
    \                  - midcomRuleOutsideIpAddr\n                  - midcomRuleOutsidePort\n\
    \                  - midcomRuleLifetime\n            - timedOut(9) indicates that\
    \ the lifetime of a previously\n              established policy rule has expired\
    \ and that the policy\n              rule is terminated for this reason.\n   \
    \         - terminatedOnRequest(10) indicates that a previously\n            \
    \  established policy rule was terminated by an SNMP\n              manager setting\
    \ the midcomRuleLifetime to 0 or\n              setting midcomGroupLifetime to\
    \ 0.\n            - terminated(11) indicates that a previously established\n \
    \             policy rule was terminated by the MIDCOM-MIB\n              implementation\
    \ for a reason other than lifetime\n              expiration or an explicit request\
    \ from a MIDCOM client.\n            - genericError(12) indicates that the policy\
    \ rule\n              specified by the entry is not established due to\n     \
    \         an error condition not listed above.\n            The states timedOut(9),\
    \ terminatedOnRequest(10), and\n            terminated(11) are referred to as\
    \ termination states.\n            The states incorrectRequest(4), requestRejected(6),\n\
    \            and genericError(12) are referred to as error states.\n         \
    \   The checkingRequest(3) and processingRequest(5)\n            states are transient\
    \ states, which will lead to either\n            one of the error states or the\
    \ reserved(7) state or the\n            enabled(8) state.  MIDCOM-MIB implementations\
    \ MAY return\n            these values when checking or processing requests.\"\
    \n       DEFVAL { newEntry }\n       ::= { midcomRuleEntry 5 }\n   midcomRuleStorageType\
    \ OBJECT-TYPE\n       SYNTAX      StorageType\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"When retrieved,\
    \ this object returns the storage\n            type of the policy rule.  Writing\
    \ to this object can\n            change the storage type of the particular row\
    \ from\n            volatile(2) to nonVolatile(3) or vice versa.\n           \
    \ Attempts to set this object to permanent will always\n            fail with\
    \ an 'inconsistentValue' error.  Note that this\n            error code is SNMP\
    \ specific.  If the MIB module is used\n            with other protocols than\
    \ SNMP, errors with similar\n            semantics specific to those protocols\
    \ should be\n            returned.\n            If midcomRuleStorageType has the\
    \ value permanent(4),\n            then all objects in this row whose MAX-ACCESS\
    \ value\n            is read-create must be read-only.\"\n       DEFVAL { volatile\
    \ }\n       ::= { midcomRuleEntry 6 }\n   midcomRuleStorageTime OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32\n       UNITS       \"seconds\"\n       MAX-ACCESS\
    \  read-create\n       STATUS      current\n       DESCRIPTION\n           \"\
    The value of this object specifies how long this row\n            can exist in\
    \ the midcomRuleTable after the\n            midcomRuleOperStatus switched to\
    \ a termination state or\n            to an error state.  This object returns\
    \ the remaining\n            time that the row may exist before it is aged out.\n\
    \            After expiration or termination of the context, the value\n     \
    \       of this object ticks backwards.  The entry in the\n            midcomRuleTable\
    \ is destroyed when the value reaches 0.\n            The value of this object\
    \ may be set in order to increase\n            or reduce the remaining time that\
    \ the row may exist.\n            Setting the value to 0 will destroy this entry\
    \ as soon as\n            the midcomRuleOperStatus switched to a termination state\n\
    \            or to an error state.\n            Note that there is no guarantee\
    \ that the row is stored as\n            long as this object indicates.  At any\
    \ time, the MIDCOM-\n            MIB implementation may decide to remove a row\
    \ describing\n            a terminated policy rule before the storage time of\
    \ the\n            corresponding row in the midcomRuleTable reaches the\n    \
    \        value of 0.  In this case, the information stored in this\n         \
    \   row is not available anymore.\n            If object midcomRuleStorageType\
    \ indicates that the policy\n            rule has the storage type permanent(4),\
    \ then this object has\n            a constant value of 4294967295.\"\n      \
    \ DEFVAL { 0 }\n       ::= { midcomRuleEntry 7 }\n   midcomRuleError OBJECT-TYPE\n\
    \       SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-only\n       STATUS\
    \      current\n       DESCRIPTION\n           \"This object contains a descriptive\
    \ error message if\n            the transition into the operational status reserved(7)\n\
    \            or enabled(8) failed.  Implementations must reset the\n         \
    \   error message to a zero-length string when a new\n            attempt to change\
    \ the policy rule status to reserved(7)\n            or enabled(8) is started.\n\
    \            RECOMMENDED values to be returned in particular cases\n         \
    \   include\n              - 'lack of IP addresses'\n              - 'lack of\
    \ port numbers'\n              - 'lack of resources'\n              - 'specified\
    \ NAT interface does not exist'\n              - 'specified NAT interface does\
    \ not support NAT'\n              - 'conflict with already existing policy rule'\n\
    \              - 'no internal IP wildcarding allowed'\n              - 'no external\
    \ IP wildcarding allowed'\n            The semantics of these error messages and\
    \ the corresponding\n            behavior of the MIDCOM-MIB implementation are\
    \ specified\n            in sections 2.3.9 and 2.3.10 of RFC 3989.\"\n       REFERENCE\n\
    \           \"RFC 3989, sections 2.3.9 and 2.3.10\"\n       DEFVAL { ''H }\n \
    \      ::= { midcomRuleEntry 8 }\n   midcomRuleInterface OBJECT-TYPE\n       SYNTAX\
    \      InterfaceIndexOrZero\n       MAX-ACCESS  read-create\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"This object indicates the IP interface\
    \ for which\n            enforcement of a policy rule is requested or performed,\n\
    \            respectively.\n            The interface is identified by its index\
    \ in the ifTable\n            (see IF-MIB in RFC 2863).  If the object has a value\
    \ of 0,\n            then no particular interface is indicated.\n            This\
    \ object is used as input to a request for establishing\n            a policy\
    \ rule as well as for indicating the properties of\n            an established\
    \ policy rule.\n            If object midcomRuleOperStatus of the same entry has\
    \ the\n            value newEntry(1) or setting(2), then this object can be\n\
    \            written by a manager in order to request its preference\n       \
    \     concerning the interface at which it requests NAT service.\n           \
    \ The default value of 0 indicates that the manager does not\n            have\
    \ a preferred interface or does not have sufficient\n            topology information\
    \ for specifying one.  Writing to this\n            object in any state other\
    \ than newEntry(1) or setting(2)\n            will always fail with an 'inconsistentValue'\
    \ error.\n            Note that this error code is SNMP specific.  If the MIB\n\
    \            module is used with other protocols than SNMP, errors with\n    \
    \        similar semantics specific to those protocols should be\n           \
    \ returned.\n            If object midcomRuleOperStatus of the same entry has\
    \ the\n            value reserved(7) or enabled(8), then this object indicates\n\
    \            the interface at which NAT service for this rule is\n           \
    \ performed.  If NAT service is not required for enforcing\n            the policy\
    \ rule, then the value of this object is 0.  Also,\n            if the MIDCOM-MIB\
    \ implementation cannot indicate an\n            interface, because it does not\
    \ have this information or\n            because NAT service is not offered at\
    \ a particular single\n            interface, then the value of the object is\
    \ 0.\n            Note that the index of a particular interface in the\n     \
    \       ifTable may change after a re-initialization of the\n            middlebox,\
    \ for example, after adding another interface to\n            it.  In such a case,\
    \ the value of this object may change,\n            but the interface referred\
    \ to by the MIDCOM-MIB MUST still\n            be the same.  If, after a re-initialization\
    \ of the\n            middlebox, the interface referred to before\n          \
    \  re-initialization cannot be uniquely mapped anymore to a\n            particular\
    \ entry in the ifTable, then the value of object\n            midcomRuleOperStatus\
    \ of the same entry MUST be changed to\n            terminated(11).\n        \
    \    If object midcomRuleOperStatus of the same entry has a\n            value\
    \ other than newEntry(1), setting(2), reserved(7), or\n            enabled(8),\
    \ then the value of this object is irrelevant.\"\n       DEFVAL { 0 }\n      \
    \ ::= { midcomRuleEntry 9 }\n   midcomRuleFlowDirection OBJECT-TYPE\n       SYNTAX\
    \      INTEGER {\n                       inbound(1),\n                       outbound(2),\n\
    \                       biDirectional(3)\n                   }\n       MAX-ACCESS\
    \  read-create\n       STATUS      current\n       DESCRIPTION\n           \"\
    This parameter specifies the direction of enabled\n            communication,\
    \ either inbound(1), outbound(2), or\n            biDirectional(3).\n        \
    \    The semantics of this object depends on the protocol\n            the rule\
    \ relates to.  If the rule is independent of\n            the transport protocol\
    \ (midcomRuleTransportProtocol\n            has a value of 0) or if the transport\
    \ protocol is UDP,\n            then the value of midcomRuleFlowDirection indicates\n\
    \            the direction of packets traversing the middlebox.\n            In\
    \ this case, value inbound(1) indicates that packets\n            are traversing\
    \ from outside to inside, value outbound(2)\n            indicates that packets\
    \ are traversing from inside to\n            outside.  For both values, inbound(1)\
    \ and outbound(2)\n            packets can traverse the middlebox only unidirectional.\n\
    \            A bidirectional flow is indicated by value\n            biDirectional(3).\n\
    \            If the transport protocol is TCP, the packet flow is\n          \
    \  always bidirectional, but the value of\n            midcomRuleFlowDirection\
    \ indicates that:\n              - inbound(1): bidirectional TCP packet flow.\n\
    \                First packet, with TCP SYN flag set, must arrive\n          \
    \      at an outside interface of the middlebox.\n              - outbound(2):\
    \ bidirectional TCP packet flow.\n                First packet, with TCP SYN flag\
    \ set, must arrive\n                at an inside interface of the middlebox.\n\
    \              - biDirectional(3): bidirectional TCP packet flow.\n          \
    \      First packet, with TCP SYN flag set, may arrive\n                at an\
    \ inside or an outside interface of the middlebox.\n            This object is\
    \ used as input to a request for\n            establishing a policy enable rule\
    \ as well as for\n            indicating the properties of an established policy\
    \ rule.\n            If object midcomRuleOperStatus of the same entry has a\n\
    \            value of either newEntry(1), setting(2), or reserved(7),\n      \
    \      then this object can be written by a manager in order to\n            specify\
    \ a requested direction to be enabled by a policy\n            rule.  Writing\
    \ to this object in any state other than\n            newEntry(1), setting(2),\
    \ or reserved(7) will always fail\n            with an 'inconsistentValue' error.\n\
    \            Note that this error code is SNMP specific.  If the MIB\n       \
    \     module is used with other protocols than SNMP, errors with\n           \
    \ similar semantics specific to those protocols should be\n            returned.\n\
    \            If object midcomRuleOperStatus of the same entry has the\n      \
    \      value enabled(8), then this object indicates the enabled\n            flow\
    \ direction.\n            If object midcomRuleOperStatus of the same entry has\
    \ a\n            value other than newEntry(1), setting(2), reserved(7), or\n \
    \           enabled(8), then the value of this object is irrelevant.\"\n     \
    \  DEFVAL { outbound }\n       ::= { midcomRuleEntry 10 }\n   midcomRuleMaxIdleTime\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32\n       UNITS       \"seconds\"\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Maximum idle time of the policy rule in seconds.\n            If\
    \ no packet to which the policy rule applies passes the\n            middlebox\
    \ for the specified midcomRuleMaxIdleTime, then\n            the policy rule enters\
    \ the termination state timedOut(9).\n            A value of 0 indicates that\
    \ the policy does not require\n            an individual idle time and that instead,\
    \ a default idle\n            time chosen by the middlebox is used.\n        \
    \    A value of 4294967295 ( = 2^32 - 1 ) indicates that the\n            policy\
    \ does not time out if it is idle.\n            This object is used as input to\
    \ a request for\n            establishing a policy enable rule as well as for\n\
    \            indicating the properties of an established policy rule.\n      \
    \      If object midcomRuleOperStatus of the same entry has a\n            value\
    \ of either newEntry(1), setting(2), or reserved(7),\n            then this object\
    \ can be written by a manager in order to\n            specify a maximum idle\
    \ time for the policy rule to be\n            requested.  Writing to this object\
    \ in any state others\n            than newEntry(1), setting(2), or reserved(7)\
    \ will always\n            fail with an 'inconsistentValue' error.\n         \
    \   Note that this error code is SNMP specific.  If the MIB\n            module\
    \ is used with other protocols than SNMP, errors with\n            similar semantics\
    \ specific to those protocols should be\n            returned.\n            If\
    \ object midcomRuleOperStatus of the same entry has the\n            value enabled(8),\
    \ then this object indicates the maximum\n            idle time of the policy\
    \ rule.  Note that even if a maximum\n            idle time greater than zero\
    \ was requested, the middlebox\n            may not be able to support maximum\
    \ idle times and set the\n            value of this object to zero when entering\
    \ state\n            enabled(8).\n            If object midcomRuleOperStatus of\
    \ the same entry has a\n            value other than newEntry(1), setting(2),\
    \ reserved(7), or\n            enabled(8), then the value of this object is irrelevant.\"\
    \n       DEFVAL { 0 }\n       ::= { midcomRuleEntry 11 }\n   midcomRuleTransportProtocol\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..255)\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The transport protocol.\n\
    \            Valid values for midcomRuleTransportProtocol\n            other than\
    \ zero are defined at:\n            http://www.iana.org/assignments/protocol-numbers\n\
    \            This object is used as input to a request for establishing\n    \
    \        a policy rule as well as for indicating the properties of\n         \
    \   an established policy rule.\n            If object midcomRuleOperStatus of\
    \ the same entry has a\n            value of either newEntry(1) or setting(2),\
    \ then this\n            object can be written by a manager in order to specify\
    \ a\n            requested transport protocol.  If translation of an IP\n    \
    \        address only is requested, then this object must have the\n         \
    \   default value 0.  Writing to this object in any state\n            other than\
    \ newEntry(1) or setting(2) will always fail\n            with an 'inconsistentValue'\
    \ error.\n            Note that this error code is SNMP specific.  If the MIB\n\
    \            module is used with other protocols than SNMP, errors with\n    \
    \        similar semantics specific to those protocols should be\n           \
    \ returned.\n            If object midcomRuleOperStatus of the same entry has\
    \ the\n            value reserved(7) or enabled(8), then this object\n       \
    \     indicates which transport protocol is enforced by this\n            policy\
    \ rule.  A value of 0 indicates a rule acting on IP\n            addresses only.\n\
    \            If object midcomRuleOperStatus of the same entry has a\n        \
    \    value other than newEntry(1), setting(2), reserved(7), or\n            enabled(8),\
    \ then the value of this object is irrelevant.\"\n       DEFVAL { 0 }\n      \
    \ ::= { midcomRuleEntry 12 }\n   midcomRulePortRange OBJECT-TYPE\n       SYNTAX\
    \      INTEGER {\n                       single(1),\n                       pair(2)\n\
    \                   }\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The range of port numbers.\n            This\
    \ object is used as input to a request for establishing\n            a policy\
    \ rule as well as for indicating the properties of\n            an established\
    \ policy rule.  It is relevant to the\n            operation of the MIDCOM-MIB\
    \ implementation only if the\n            value of object midcomTransportProtocol\
    \ in the same entry\n            has a value other than 0.\n            If object\
    \ midcomRuleOperStatus of the same entry has the\n            value newEntry(1)\
    \ or setting(2), then this object can be\n            written by a manager in\
    \ order to specify the requested\n            size of the port range.  With single(1)\
    \ just a single\n            port number is requested, with pair(2) a consecutive\
    \ pair\n            of port numbers is requested with the lower number being\n\
    \            even.  Requesting a consecutive pair of port numbers may\n      \
    \      be used by RTP [RFC3550] and may even be required to\n            support\
    \ older RTP applications.\n            Writing to this object in any state other\
    \ than\n            newEntry(1), setting(2) or reserved(7) will always fail\n\
    \            with an 'inconsistentValue' error.\n            Note that this error\
    \ code is SNMP specific.  If the MIB\n            module is used with other protocols\
    \ than SNMP, errors with\n            similar semantics specific to those protocols\
    \ should be\n            returned.\n            If object midcomRuleOperStatus\
    \ of the same entry has a\n            value of either reserved(7) or enabled(8),\
    \ then this\n            object will have the value that it had before the\n \
    \           transition to this state.\n            If object midcomRuleOperStatus\
    \ of the same entry has a\n            value other than newEntry(1), setting(2),\
    \ reserved(7), or\n            enabled(8), then the value of this object is irrelevant.\"\
    \n       DEFVAL { single }\n       ::= { midcomRuleEntry 13}\n   midcomRuleInternalIpVersion\
    \ OBJECT-TYPE\n       SYNTAX      InetAddressType\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"IP version of the\
    \ internal address (A0) and the inside\n            address (A1).  Allowed values\
    \ are ipv4(1), ipv6(2),\n            ipv4z(3), and ipv6z(4).\n            This\
    \ object is used as input to a request for establishing\n            a policy\
    \ rule as well as for indicating the properties of\n            an established\
    \ policy rule.\n            If object midcomRuleOperStatus of the same entry has\
    \ the\n            value newEntry(1) or setting(2), then this object can be\n\
    \            written by a manager in order to specify the IP version\n       \
    \     required at the inside of the middlebox.  Writing to this\n            object\
    \ in any state other than newEntry(1) or setting(2)\n            will always fail\
    \ with an 'inconsistentValue' error.\n            Note that this error code is\
    \ SNMP specific.  If the MIB\n            module is used with other protocols\
    \ than SNMP, errors with\n            similar semantics specific to those protocols\
    \ should be\n            returned.\n            If object midcomRuleOperStatus\
    \ of the same entry has the\n            value reserved(7) or enabled(8), then\
    \ this object\n            indicates the internal/inside IP version.\n       \
    \     If object midcomRuleOperStatus of the same entry has a\n            value\
    \ other than newEntry(1), setting(2), reserved(7), or\n            enabled(8),\
    \ then the value of this object is irrelevant.\"\n       DEFVAL { ipv4 }\n   \
    \    ::= { midcomRuleEntry 14 }\n   midcomRuleExternalIpVersion OBJECT-TYPE\n\
    \       SYNTAX      InetAddressType\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"IP version of the external address\
    \ (A3) and the outside\n            address (A2).  Allowed values are ipv4(1)\
    \ and ipv6(2).\n            This object is used as input to a request for establishing\n\
    \            a policy rule as well as for indicating the properties of\n     \
    \       an established policy rule.\n            If object midcomRuleOperStatus\
    \ of the same entry has the\n            value newEntry(1) or setting(2), then\
    \ this object can be\n            written by a manager in order to specify the\
    \ IP version\n            required at the outside of the middlebox.  Writing to\n\
    \            this object in any state other than newEntry(1) or\n            setting(2)\
    \ will always fail with an 'inconsistentValue'\n            error.\n         \
    \   Note that this error code is SNMP specific.  If the MIB\n            module\
    \ is used with other protocols than SNMP, errors with\n            similar semantics\
    \ specific to those protocols should be\n            returned.\n            If\
    \ object midcomRuleOperStatus of the same entry has the\n            value reserved(7)\
    \ or enabled(8), then this object\n            indicates the external/outside\
    \ IP version.\n            If object midcomRuleOperStatus of the same entry has\
    \ a\n            value other than newEntry(1), setting(2), reserved(7) or\n  \
    \          enabled(8), then the value of this object is irrelevant.\"\n      \
    \ DEFVAL { ipv4 }\n       ::= { midcomRuleEntry 15 }\n   midcomRuleInternalIpAddr\
    \ OBJECT-TYPE\n       SYNTAX      InetAddress\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The internal IP\
    \ address (A0).\n            This object is used as input to a request for establishing\n\
    \            a policy rule as well as for indicating the properties of\n     \
    \       an established policy rule.\n            If object midcomRuleOperStatus\
    \ of the same entry has the\n            value newEntry(1) or setting(2), then\
    \ this object can be\n            written by a manager in order to specify the\
    \ internal IP\n            address for which a reserve policy rule or a enable\
    \ policy\n            rule is requested to be established.  Writing to this\n\
    \            object in any state other than newEntry(1) or setting(2)\n      \
    \      will always fail with an 'inconsistentValue' error.\n            Note that\
    \ this error code is SNMP specific.  If the MIB\n            module is used with\
    \ other protocols than SNMP, errors with\n            similar semantics specific\
    \ to those protocols should be\n            returned.\n            If object midcomRuleOperStatus\
    \ of the same entry has the\n            value reserved(7) or enabled(8), then\
    \ this object will\n            have the value which it had before the transition\
    \ to this\n            state.\n            If object midcomRuleOperStatus of the\
    \ same entry has a\n            value other than newEntry(1), setting(2), reserved(7)\
    \ or\n            enabled(8), then the value of this object is irrelevant.\"\n\
    \       ::= { midcomRuleEntry 16 }\n   midcomRuleInternalIpPrefixLength OBJECT-TYPE\n\
    \       SYNTAX      InetAddressPrefixLength\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The prefix length\
    \ of the internal IP address used for\n            wildcarding.  A value of 0\
    \ indicates a full wildcard;\n            in this case, the value of midcomRuleInternalIpAddr\
    \ is\n            irrelevant.  If midcomRuleInternalIpVersion has a value\n  \
    \          of ipv4(1), then a value > 31 indicates no wildcarding\n          \
    \  at all.  If midcomRuleInternalIpVersion has a value\n            of ipv4(2),\
    \ then a value > 127 indicates no wildcarding\n            at all.  A MIDCOM-MIB\
    \ implementation that does not\n            support IP address wildcarding MUST\
    \ implement this object\n            as read-only with a value of 128.  A MIDCOM\
    \ that does\n            not support wildcarding based on prefix length MAY\n\
    \            restrict allowed values for this object to 0 and 128.\n         \
    \   This object is used as input to a request for establishing\n            a\
    \ policy rule as well as for indicating the properties of\n            an established\
    \ policy rule.\n            If object midcomRuleOperStatus of the same entry has\
    \ the\n            value newEntry(1) or setting(2), then this object can be\n\
    \            written by a manager in order to specify the prefix length\n    \
    \        of the internal IP address for which a reserve policy rule\n        \
    \    or an enable policy rule is requested to be established.\n            Writing\
    \ to this object in any state other than newEntry(1)\n            or setting(2)\
    \ will always fail with an 'inconsistentValue'\n            error.\n         \
    \   Note that this error code is SNMP specific.  If the MIB\n            module\
    \ is used with other protocols than SNMP, errors with\n            similar semantics\
    \ specific to those protocols should be\n            returned.\n            If\
    \ object midcomRuleOperStatus of the same entry has the\n            value reserved(7)\
    \ or enabled(8), then this object will\n            have the value which it had\
    \ before the transition to this\n            state.\n            If object midcomRuleOperStatus\
    \ of the same entry has a\n            value other than newEntry(1), setting(2),\
    \ reserved(7), or\n            enabled(8), then the value of this object is irrelevant.\"\
    \n       DEFVAL { 128 }\n       ::= { midcomRuleEntry 17 }\n   midcomRuleInternalPort\
    \ OBJECT-TYPE\n       SYNTAX      InetPortNumber\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The internal port\
    \ number.  A value of 0 is a wildcard.\n            This object is used as input\
    \ to a request for establishing\n            a policy rule as well as for indicating\
    \ the properties of\n            an established policy rule.  It is relevant to\
    \ the\n            operation of the MIDCOM-MIB implementation only if the\n  \
    \          value of object midcomTransportProtocol in the same entry\n       \
    \     has a value other than 0.\n            If object midcomRuleOperStatus of\
    \ the same entry has the\n            value newEntry(1) or setting(2), then this\
    \ object can be\n            written by a manager in order to specify the internal\
    \ port\n            number for which a reserve policy rule or an enable policy\n\
    \            rule is requested to be established.  Writing to this\n         \
    \   object in any state other than newEntry(1) or setting(2)\n            will\
    \ always fail with an 'inconsistentValue' error.\n            Note that this error\
    \ code is SNMP specific.  If the MIB\n            module is used with other protocols\
    \ than SNMP, errors with\n            similar semantics specific to those protocols\
    \ should be\n            returned.\n            If object midcomRuleOperStatus\
    \ of the same entry has the\n            value reserved(7) or enabled(8), then\
    \ this object will\n            have the value that it had before the transition\
    \ to this\n            state.\n            If object midcomRuleOperStatus of the\
    \ same entry has a\n            value other than newEntry(1), setting(2), reserved(7),\
    \ or\n            enabled(8), then the value of this object is irrelevant.\"\n\
    \       DEFVAL { 0 }\n       ::= { midcomRuleEntry 18 }\n   midcomRuleExternalIpAddr\
    \ OBJECT-TYPE\n       SYNTAX      InetAddress\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The external IP\
    \ address (A3).\n            This object is used as input to a request for establishing\n\
    \            a policy rule as well as for indicating the properties of\n     \
    \       an established policy rule.\n            If object midcomRuleOperStatus\
    \ of the same entry has the\n            value newEntry(1), setting(2), or reserved(7),\
    \ then this\n            object can be written by a manager in order to specify\
    \ the\n            external IP address for which an enable policy rule is\n  \
    \          requested to be established.  Writing to this object in\n         \
    \   any state other than newEntry(1), setting(2), or reserved(7)\n           \
    \ will always fail with an 'inconsistentValue' error.\n            Note that this\
    \ error code is SNMP specific.  If the MIB\n            module is used with other\
    \ protocols than SNMP, errors with\n            similar semantics specific to\
    \ those protocols should be\n            returned.\n            If object midcomRuleOperStatus\
    \ of the same entry has the\n            value enabled(8), then this object will\
    \ have the value\n            that it had before the transition to this state.\n\
    \            If object midcomRuleOperStatus of the same entry has a\n        \
    \    value other than newEntry(1), setting(2), reserved(7), or\n            enabled(8),\
    \ then the value of this object is irrelevant.\"\n       ::= { midcomRuleEntry\
    \ 19 }\n   midcomRuleExternalIpPrefixLength OBJECT-TYPE\n       SYNTAX      InetAddressPrefixLength\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The prefix length of the external IP address used for\n        \
    \    wildcarding.  A value of 0 indicates a full wildcard;\n            in this\
    \ case, the value of midcomRuleExternalIpAddr is\n            irrelevant.  If\
    \ midcomRuleExternalIpVersion has a value\n            of ipv4(1), then a value\
    \ > 31 indicates no wildcarding\n            at all.  If midcomRuleExternalIpVersion\
    \ has a value\n            of ipv4(2), then a value > 127 indicates no wildcarding\n\
    \            at all.  A MIDCOM-MIB implementation that does not\n            support\
    \ IP address wildcarding MUST implement this object\n            as read-only\
    \ with a value of 128.  A MIDCOM that does\n            not support wildcarding\
    \ based on prefix length MAY\n            restrict allowed values for this object\
    \ to 0 and 128.\n            This object is used as input to a request for establishing\n\
    \            a policy rule as well as for indicating the properties of\n     \
    \       an established policy rule.\n            If object midcomRuleOperStatus\
    \ of the same entry has the\n            value newEntry(1), setting(2), or reserved(7),\
    \ then this\n            object can be written by a manager in order to specify\
    \ the\n            prefix length of the external IP address for which an\n   \
    \         enable policy rule is requested to be established.\n            Writing\
    \ to this object in any state other than\n            newEntry(1), setting(2),\
    \ or reserved(7) will always fail\n            with an 'inconsistentValue' error.\n\
    \            Note that this error code is SNMP specific.  If the MIB\n       \
    \     module is used with other protocols than SNMP, errors with\n           \
    \ similar semantics specific to those protocols should be\n            returned.\n\
    \            If object midcomRuleOperStatus of the same entry has the\n      \
    \      value enabled(8), then this object will have the value\n            that\
    \ it had before the transition to this state.\n            If object midcomRuleOperStatus\
    \ of the same entry has a\n            value other than newEntry(1), setting(2),\
    \ reserved(7), or\n            enabled(8), then the value of this object is irrelevant.\"\
    \n       DEFVAL { 128 }\n       ::= { midcomRuleEntry 20 }\n   midcomRuleExternalPort\
    \ OBJECT-TYPE\n       SYNTAX      InetPortNumber\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The external port\
    \ number.  A value of 0 is a wildcard.\n            This object is used as input\
    \ to a request for establishing\n            a policy rule as well as for indicating\
    \ the properties of\n            an established policy rule.  It is relevant to\
    \ the\n            operation of the MIDCOM-MIB implementation only if the\n  \
    \          value of object midcomTransportProtocol in the same entry\n       \
    \     has a value other than 0.\n            If object midcomRuleOperStatus of\
    \ the same entry has the\n            value newEntry(1), setting(2) or reserved(7),\
    \ then this\n            object can be written by a manager in order to specify\
    \ the\n            external port number for which an enable policy rule is\n \
    \           requested to be established.  Writing to this object in\n        \
    \    any state other than newEntry(1), setting(2) or reserved(7)\n           \
    \ will always fail with an 'inconsistentValue' error.\n            Note that this\
    \ error code is SNMP specific.  If the MIB\n            module is used with other\
    \ protocols than SNMP, errors with\n            similar semantics specific to\
    \ those protocols should be\n            returned.\n            If object midcomRuleOperStatus\
    \ of the same entry has the\n            value enabled(8), then this object will\
    \ have the value\n            which it had before the transition to this state.\n\
    \            If object midcomRuleOperStatus of the same entry has a\n        \
    \    value other than newEntry(1), setting(2), reserved(7) or\n            enabled(8),\
    \ then the value of this object is irrelevant.\"\n       DEFVAL { 0 }\n      \
    \ ::= { midcomRuleEntry 21 }\n   midcomRuleInsideIpAddr OBJECT-TYPE\n       SYNTAX\
    \      InetAddress\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The inside IP address at the middlebox (A1).\n\
    \            The value of this object is relevant only if\n            object\
    \ midcomRuleOperStatus of the same entry has\n            a value of either reserved(7)\
    \ or enabled(8).\"\n       ::= { midcomRuleEntry 22 }\n   midcomRuleInsidePort\
    \ OBJECT-TYPE\n       SYNTAX      InetPortNumber\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The inside port\
    \ number at the middlebox.\n            A value of 0 is a wildcard.\n        \
    \    The value of this object is relevant only if\n            object midcomRuleOperStatus\
    \ of the same entry has\n            a value of either reserved(7) or enabled(8).\"\
    \n       ::= { midcomRuleEntry 23 }\n   midcomRuleOutsideIpAddr OBJECT-TYPE\n\
    \       SYNTAX      InetAddress\n       MAX-ACCESS  read-only\n       STATUS \
    \     current\n       DESCRIPTION\n           \"The outside IP address at the\
    \ middlebox (A2).\n            The value of this object is relevant only if\n\
    \            object midcomRuleOperStatus of the same entry has\n            a\
    \ value of either reserved(7) or enabled(8).\"\n       ::= { midcomRuleEntry 24\
    \ }\n   midcomRuleOutsidePort OBJECT-TYPE\n       SYNTAX      InetPortNumber\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The outside port number at the middlebox.\n            A value of\
    \ 0 is a wildcard.\n            The value of this object is relevant only if\n\
    \            object midcomRuleOperStatus of the same entry has\n            a\
    \ value of either reserved(7) or enabled(8).\"\n       ::= { midcomRuleEntry 25\
    \ }\n   midcomRuleLifetime OBJECT-TYPE\n       SYNTAX      Unsigned32\n      \
    \ UNITS       \"seconds\"\n       MAX-ACCESS  read-create\n       STATUS     \
    \ current\n       DESCRIPTION\n           \"The remaining lifetime in seconds\
    \ of this policy rule.\n            Lifetime of a policy rule starts when object\n\
    \            midcomRuleOperStatus in the same entry enters either\n          \
    \  state reserved(7) or state enabled(8).\n            This object is used as\
    \ input to a request for establishing\n            a policy rule as well as for\
    \ indicating the properties of\n            an established policy rule.\n    \
    \        If object midcomRuleOperStatus of the same entry has a\n            value\
    \ of either newEntry(1) or setting(2), then this\n            object can be written\
    \ by a manager in order to specify\n            the requested lifetime of a policy\
    \ rule to be established.\n            If object midcomRuleOperStatus of the same\
    \ entry has a\n            value of either reserved(7) or enabled(8), then this\n\
    \            object indicates the (continuously decreasing) remaining\n      \
    \      lifetime of the established policy rule.  Note that when\n            entering\
    \ state reserved(7) or enabled(8), the MIDCOM-MIB\n            implementation\
    \ can choose a lifetime shorter than the one\n            requested.\n       \
    \     Unlike other parameters of the policy rule, this parameter\n           \
    \ can still be written in state reserved(7) and enabled(8).\n            Writing\
    \ to this object is processed by the MIDCOM-MIB\n            implementation by\
    \ choosing a lifetime value that is\n            greater than 0 and less than\
    \ or equal to the minimum of\n            the requested value and the value specified\
    \ by object\n            midcomConfigMaxLifetime:\n             0 <= lt_granted\
    \ <= MINIMUM(lt_requested, lt_maximum)\n            where:\n               - lt_granted\
    \ is the actually granted lifetime by the\n                 MIDCOM-MIB implementation\n\
    \               - lt_requested is the requested lifetime of the MIDCOM\n     \
    \            client\n               - lt_maximum is the value of object\n    \
    \             midcomConfigMaxLifetime\n            SNMP SET requests to this object\
    \ may be rejected or the\n            value of the object after an accepted SET\
    \ operation may be\n            less than the value that was contained in the\
    \ SNMP SET\n            request.\n            Successfully writing a value of\
    \ 0 terminates the policy\n            rule.  Note that after a policy rule is\
    \ terminated, still\n            the entry will exist as long as indicated by\
    \ the value of\n            midcomRuleStorageTime.\n            Writing to this\
    \ object in any state other than\n            newEntry(1), setting(2), reserved(7),\
    \ or enabled(7)\n            will always fail with an 'inconsistentValue' error.\n\
    \            Note that this error code is SNMP specific.  If the MIB\n       \
    \     module is used with other protocols than SNMP, errors with\n           \
    \ similar semantics specific to those protocols should be\n            returned.\n\
    \            If object midcomRuleOperStatus of the same entry has a\n        \
    \    value other than newEntry(1), setting(2), reserved(7), or\n            enabled(8),\
    \ then the value of this object is irrelevant.\"\n       DEFVAL { 180 }\n    \
    \   ::= { midcomRuleEntry 26 }\n   midcomRuleRowStatus OBJECT-TYPE\n       SYNTAX\
    \      RowStatus\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"A control that allows entries to be added and\
    \ removed from\n            this table.\n            Entries can also be removed\
    \ from this table by setting\n            objects midcomRuleLifetime and midcomRuleStorageTime\
    \ of\n            an entry to 0.\n            Attempts to set a row notInService(2)\
    \ where the value\n            of the midcomRuleStorageType object is permanent(4)\
    \ or\n            readOnly(5) will result in an 'notWritable' error.\n       \
    \     Note that this error code is SNMP specific.  If the MIB\n            module\
    \ is used with other protocols than SNMP, errors with\n            similar semantics\
    \ specific to those protocols should be\n            returned.\n            The\
    \ value of this object has no effect on whether other\n            objects in\
    \ this conceptual row can be modified.\"\n       ::= { midcomRuleEntry 27 }\n\
    \   --\n   -- Policy rule group subtree\n   --\n   -- The midcomGroupTable lists\
    \ all current policy rule groups.\n   --\n   midcomGroupTable OBJECT-TYPE\n  \
    \     SYNTAX      SEQUENCE OF MidcomGroupEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This table lists\
    \ all current policy rule groups.\n            Entries in this table are created\
    \ or removed\n            implicitly when entries in the midcomRuleTable are\n\
    \            created or removed, respectively.  A group entry\n            in\
    \ this table only exists as long as there are\n            member rules of this\
    \ group in the midcomRuleTable.\n            The table serves for listing the\
    \ existing groups and\n            their remaining lifetimes and for changing\
    \ lifetimes\n            of groups and implicitly of all group members.\n    \
    \        Groups and all their member policy rules can only be\n            deleted\
    \ by deleting all member policies in the\n            midcomRuleTable.\n     \
    \       Setting midcomGroupLifetime will result in setting\n            the lifetime\
    \ of all policy members to the same value.\"\n       ::= { midcomTransaction 4\
    \ }\n   midcomGroupEntry OBJECT-TYPE\n       SYNTAX      MidcomGroupEntry\n  \
    \     MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"An entry describing properties of a particular\n            MIDCOM\
    \ policy rule group.\"\n       INDEX { midcomRuleOwner, midcomGroupIndex }\n \
    \      ::= { midcomGroupTable 1 }\n   MidcomGroupEntry ::= SEQUENCE {\n      \
    \ midcomGroupIndex      Unsigned32,\n       midcomGroupLifetime   Unsigned32\n\
    \   }\n   midcomGroupIndex OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..4294967295)\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The index of this group for the midcomRuleOwner.\n            A\
    \ group is identified by the combination of\n            midcomRuleOwner and midcomGroupIndex.\n\
    \            The value of this index must be unique per\n            midcomRuleOwner.\"\
    \n       ::= { midcomGroupEntry 2 }\n   midcomGroupLifetime OBJECT-TYPE\n    \
    \   SYNTAX      Unsigned32\n       UNITS       \"seconds\"\n       MAX-ACCESS\
    \  read-write\n       STATUS      current\n       DESCRIPTION\n           \"When\
    \ retrieved, this object delivers the maximum\n            lifetime in seconds\
    \ of all member rules of this group,\n            i.e., of all rows in the midcomRuleTable\
    \ that have the\n            same values for midcomRuleOwner and midcomGroupIndex.\n\
    \            Successfully writing to this object modifies the\n            lifetime\
    \ of all member policies.  Successfully\n            writing a value of 0 terminates\
    \ all member policies\n            and implicitly deletes the group as soon as\
    \ all member\n            entries are removed from the midcomRuleTable.\n    \
    \        Note that after a group's lifetime is expired or is\n            set\
    \ to 0, still the corresponding entry in the\n            midcomGroupTable will\
    \ exist as long as terminated\n            member policy rules are stored as entries\
    \ in the\n            midcomRuleTable.\n            Writing to this object is\
    \ processed by the MIDCOM-MIB\n            implementation by choosing a lifetime\
    \ value that is\n            greater than 0 and less than or equal to the minimum\
    \ of\n            the requested value and the value specified by object\n    \
    \        midcomConfigMaxLifetime:\n             0 <= lt_granted <= MINIMUM(lt_requested,\
    \ lt_maximum)\n            where:\n               - lt_granted is the actually\
    \ granted lifetime by the\n                 MIDCOM-MIB implementation\n      \
    \         - lt_requested is the requested lifetime of the MIDCOM\n           \
    \      client\n               - lt_maximum is the value of object\n          \
    \       midcomConfigMaxLifetime\n            SNMP SET requests to this object\
    \ may be rejected or the\n            value of the object after an accepted SET\
    \ operation may be\n            less than the value that was contained in the\
    \ SNMP SET\n            request.\"\n       ::= { midcomGroupEntry 3 }\n   --\n\
    \   -- Configuration Objects\n   --\n   --  Configuration objects that can be\
    \ used for retrieving\n   --  middlebox capability information (mandatory) and\
    \ for\n   --  setting parameters of the implementation of transaction\n   -- \
    \ objects (optional).\n   --\n   --  Note that typically configuration objects\
    \ are not intended\n   --  to be written by MIDCOM clients.  In general, write\
    \ access\n   --  to these objects needs to be restricted more strictly than\n\
    \   --  write access to transaction objects.\n   --\n   --\n   -- Capabilities\
    \ subtree\n   --\n   -- This subtree contains objects to which MIDCOM clients\
    \ should\n   -- have read access.\n   --\n   midcomConfigMaxLifetime OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32\n       UNITS       \"seconds\"\n       MAX-ACCESS\
    \  read-write\n       STATUS      current\n       DESCRIPTION\n           \"When\
    \ retrieved, this object returns the maximum lifetime,\n            in seconds,\
    \ that this middlebox allows policy rules to\n            have.\"\n       ::=\
    \ { midcomConfig 1 }\n   midcomConfigPersistentRules OBJECT-TYPE\n       SYNTAX\
    \      TruthValue\n       MAX-ACCESS  read-write\n       STATUS      current\n\
    \       DESCRIPTION\n           \"When retrieved, this object returns true(1)\
    \ if the\n            MIDCOM-MIB implementation can store policy rules\n     \
    \       persistently.  Otherwise, it returns false(2).\n            A value of\
    \ true(1) indicates that there may be\n            entries in the midcomRuleTable\
    \ with object\n            midcomRuleStorageType set to value nonVolatile(3).\"\
    \n       ::= { midcomConfig 2 }\n   midcomConfigIfTable OBJECT-TYPE\n       SYNTAX\
    \      SEQUENCE OF MidcomConfigIfEntry\n       MAX-ACCESS  not-accessible\n  \
    \     STATUS      current\n       DESCRIPTION\n           \"This table indicates\
    \ capabilities of the MIDCOM-MIB\n            implementation per IP interface.\n\
    \            The table is indexed by the object midcomConfigIfIndex.\n       \
    \     For indexing a single interface, this object contains\n            the value\
    \ of the ifIndex object that is associated\n            with the interface.  If\
    \ an entry with\n            midcomConfigIfIndex = 0 occurs, then bits set in\n\
    \            objects of this entry apply to all interfaces for which\n       \
    \     there is no entry in this table with the interface's\n            index.\"\
    \n       ::= { midcomConfig 3 }\n   midcomConfigIfEntry OBJECT-TYPE\n       SYNTAX\
    \      MidcomConfigIfEntry\n       MAX-ACCESS  not-accessible\n       STATUS \
    \     current\n       DESCRIPTION\n           \"An entry describing the capabilities\
    \ of a middlebox\n            with respect to the indexed IP interface.\"\n  \
    \     INDEX { midcomConfigIfIndex }\n       ::= { midcomConfigIfTable 1 }\n  \
    \ MidcomConfigIfEntry ::= SEQUENCE {\n       midcomConfigIfIndex          InterfaceIndexOrZero,\n\
    \       midcomConfigIfBits           BITS,\n       midcomConfigIfEnabled     \
    \   TruthValue\n   }\n   midcomConfigIfIndex OBJECT-TYPE\n       SYNTAX      InterfaceIndexOrZero\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The index of an entry in the midcomConfigIfTable.\n            For\
    \ values different from zero, this object\n            identifies an IP interface\
    \ by containing the same\n            value as the ifIndex object associated with\
    \ the\n            interface.\n            Note that the index of a particular\
    \ interface in the\n            ifTable may change after a re-initialization of\
    \ the\n            middlebox, for example, after adding another interface to\n\
    \            it.  In such a case, the value of this object may change,\n     \
    \       but the interface referred to by the MIDCOM-MIB MUST still\n         \
    \   be the same.  If, after a re-initialization of the\n            middlebox,\
    \ the interface referred to before\n            re-initialization cannot be uniquely\
    \ mapped anymore to a\n            particular entry in the ifTable, then the value\
    \ of object\n            midcomConfigIfEnabled of the same entry MUST be changed\
    \ to\n            false(2).\n            If the object has a value of 0, then\
    \ values\n            specified by further objects of the same entry\n       \
    \     apply to all interfaces for which there is no\n            explicit entry\
    \ in the midcomConfigIfTable.\"\n       ::= { midcomConfigIfEntry 1 }\n   midcomConfigIfBits\
    \ OBJECT-TYPE\n       SYNTAX      BITS {\n                       ipv4(0),\n  \
    \                     ipv6(1),\n                       addressWildcards(2),\n\
    \                       portWildcards(3),\n                       firewall(4),\n\
    \                       nat(5),\n                       portTranslation(6),\n\
    \                       protocolTranslation(7),\n                       twiceNat(8),\n\
    \                       inside(9)\n                   }\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"When retrieved,\
    \ this object returns a set of bits\n            indicating the capabilities (or\
    \ configuration) of\n            the middlebox with respect to the referenced\
    \ IP interface.\n            If the index equals 0, then all set bits apply to\
    \ all\n            interfaces.\n            If the ipv4(0) bit is set, then the\
    \ middlebox supports\n            IPv4 at the indexed IP interface.\n        \
    \    If the ipv6(1) bit is set, then the middlebox supports\n            IPv6\
    \ at the indexed IP interface.\n            If the addressWildcards(2) bit is\
    \ set, then the\n            middlebox supports IP address wildcarding at the\
    \ indexed\n            IP interface.\n            If the portWildcards(3) bit\
    \ is set, then the\n            middlebox supports port wildcarding at the indexed\n\
    \            IP interface.\n            If the firewall(4) bit is set, then the\
    \ middlebox offers\n            firewall functionality at the indexed interface.\n\
    \            If the nat(5) bit is set, then the middlebox offers\n           \
    \ network address translation service at the indexed\n            interface.\n\
    \            If the portTranslation(6) bit is set, then the middlebox\n      \
    \      offers port translation service at the indexed interface.\n           \
    \ This bit is only relevant if nat(5) is set.\n            If the protocolTranslation(7)\
    \ bit is set, then the\n            middlebox offers protocol translation service\
    \ between\n            IPv4 and IPv6 at the indexed interface.  This bit is only\n\
    \            relevant if nat(5) is set.\n            If the twiceNat(8) bit is\
    \ set, then the middlebox offers\n            twice network address translation\
    \ service at the indexed\n            interface.  This bit is only relevant if\
    \ nat(5) is set.\n            If the inside(9) bit is set, then the indexed interface\
    \ is\n            an inside interface with respect to NAT functionality.\n   \
    \         Otherwise, it is an outside interface.  This bit is only\n         \
    \   relevant if nat(5) is set.  An SNMP agent supporting both\n            the\
    \ MIDCOM-MIB module and the NAT-MIB module SHOULD ensure\n            that the\
    \ value of this object is consistent with the values\n            of corresponding\
    \ objects in the NAT-MIB module.\"\n       ::= { midcomConfigIfEntry 2 }\n   midcomConfigIfEnabled\
    \ OBJECT-TYPE\n       SYNTAX      TruthValue\n       MAX-ACCESS  read-write\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The value of this\
    \ object indicates the availability of\n            the middlebox service described\
    \ by midcomConfigIfBits\n            at the indexed IP interface.\n          \
    \  By writing to this object, the MIDCOM support for the\n            entire IP\
    \ interface can be switched on or off.  Setting\n            this object to false(2)\
    \ immediately stops middlebox\n            support at the indexed IP interface.\
    \  This implies that\n            all policy rules that use NAT or firewall resources\
    \ at\n            the indexed IP interface are terminated immediately.\n     \
    \       In this case, the MIDCOM agent MUST send\n            midcomUnsolicitedRuleEvent\
    \ to all MIDCOM clients that\n            have access to one of the terminated\
    \ rules.\"\n       DEFVAL { true }\n       ::= { midcomConfigIfEntry 3 }\n   --\n\
    \   -- Firewall subtree\n   --\n   -- This subtree contains the firewall configuration\
    \ table\n   --\n   midcomConfigFirewallTable OBJECT-TYPE\n       SYNTAX      SEQUENCE\
    \ OF MidcomConfigFirewallEntry\n       MAX-ACCESS  not-accessible\n       STATUS\
    \      current\n       DESCRIPTION\n          \"This table lists the firewall\
    \ configuration per IP interface.\n           It can be used for configuring how\
    \ policy rules created by\n           MIDCOM clients are realized as firewall\
    \ rules of a firewall\n           implementation.  Particularly, the priority\
    \ used for MIDCOM\n           policy rules can be configured.  For a single firewall\n\
    \           implementation at a particular IP interface, all MIDCOM\n        \
    \   policy rules are realized as firewall rules with the same\n           priority.\
    \  Also, a firewall rule group name can be\n           configured.\n         \
    \  The table is indexed by the object midcomConfigFirewallIndex.\n           For\
    \ indexing a single interface, this object contains the\n           value of the\
    \ ifIndex object that is associated with the\n           interface.  If an entry\
    \ with midcomConfigFirewallIndex = 0\n           occurs, then bits set in objects\
    \ of this entry apply to all\n           interfaces for which there is no entry\
    \ in this table for the\n           interface's index.\"\n       ::= { midcomConfig\
    \ 4 }\n   midcomConfigFirewallEntry OBJECT-TYPE\n       SYNTAX      MidcomConfigFirewallEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \          \"An entry describing a particular set of\n           firewall resources.\"\
    \n       INDEX { midcomConfigFirewallIndex }\n       ::= { midcomConfigFirewallTable\
    \ 1 }\n   MidcomConfigFirewallEntry ::= SEQUENCE {\n       midcomConfigFirewallIndex\
    \      InterfaceIndexOrZero,\n       midcomConfigFirewallGroupId    SnmpAdminString,\n\
    \       midcomConfigFirewallPriority   Unsigned32\n   }\n   midcomConfigFirewallIndex\
    \ OBJECT-TYPE\n       SYNTAX      InterfaceIndexOrZero\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The index of an\
    \ entry in the midcomConfigFirewallTable.\n            For values different from\
    \ 0, this object identifies an\n            IP interface by containing the same\
    \ value as the ifIndex\n            object associated with the interface.\n  \
    \          Note that the index of a particular interface in the\n            ifTable\
    \ may change after a re-initialization of the\n            middlebox, for example,\
    \ after adding another interface to\n            it.  In such a case, the value\
    \ of this object may change,\n            but the interface referred to by the\
    \ MIDCOM-MIB MUST still\n            be the same.  If, after a re-initialization\
    \ of the\n            middlebox, the interface referred to before\n          \
    \  re-initialization cannot be uniquely mapped anymore to a\n            particular\
    \ entry in the ifTable, then the entry in the\n            midcomConfigFirewallTable\
    \ MUST be deleted.\n            If the object has a value of 0, then values specified\
    \ by\n            further objects of the same entry apply to all interfaces\n\
    \            for which there is no explicit entry in the\n            midcomConfigFirewallTable.\"\
    \n       ::= { midcomConfigFirewallEntry 1 }\n   midcomConfigFirewallGroupId OBJECT-TYPE\n\
    \       SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-write\n       STATUS\
    \      current\n       DESCRIPTION\n          \"The firewall rule group to which\
    \ all firewall rules are\n           assigned that the MIDCOM server creates for\
    \ the interface\n           indicated by object midcomConfigFirewallIndex.  If\
    \ the\n           value of object midcomConfigFirewallIndex is 0, then all\n \
    \          firewall rules of the MIDCOM server that are created for\n        \
    \   interfaces with no specific entry in the\n           midcomConfigFirewallTable\
    \ are assigned to the firewall\n           rule group indicated by the value of\
    \ this object.\"\n       ::= { midcomConfigFirewallEntry 2 }\n   midcomConfigFirewallPriority\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32\n       MAX-ACCESS  read-write\n\
    \       STATUS      current\n       DESCRIPTION\n          \"The priority assigned\
    \ to all firewall rules that the\n           MIDCOM server creates for the interface\
    \ indicated by\n           object midcomConfigFirewallIndex.  If the value of\
    \ object\n           midcomConfigFirewallIndex is 0, then this priority is\n \
    \          assigned to all firewall rules of the MIDCOM server that\n        \
    \   are created for interfaces for which there is no specific\n           entry\
    \ in the midcomConfigFirewallTable.\"\n       ::= { midcomConfigFirewallEntry\
    \ 3 }\n   --\n   -- Monitoring Objects\n   --\n   -- Monitoring objects are structured\
    \ into two groups,\n   -- the midcomResourceGroup providing information about\
    \ used\n   -- resources and the midcomStatisticsGroup providing information\n\
    \   -- about MIDCOM transaction statistics.\n   --\n   -- Resources subtree\n\
    \   --\n   -- The MIDCOM resources subtree contains a set of managed\n   -- objects\
    \ describing the currently used resources of NAT\n   -- and firewall implementations.\n\
    \   --\n   --\n   -- Textual conventions for objects of the resource subtree\n\
    \   --\n   MidcomNatBindMode ::= TEXTUAL-CONVENTION\n       STATUS      current\n\
    \       DESCRIPTION\n          \"An indicator of the kind of NAT resources used\
    \ by a policy\n           rule.  This definition corresponds to the definition\
    \ of\n           NatBindMode in the NAT-MIB (RFC 4008).  Value none(3) can\n \
    \          be used to indicate that the policy rule does not use\n           any\
    \ NAT binding.\n           \"\n       SYNTAX      INTEGER {\n                \
    \       addressBind(1),\n                       addressPortBind(2),\n        \
    \               none(3)\n                   }\n   MidcomNatSessionIdOrZero ::=\
    \ TEXTUAL-CONVENTION\n       DISPLAY-HINT \"d\"\n       STATUS      current\n\
    \       DESCRIPTION\n          \"A unique ID that is assigned to each NAT session\
    \ by\n           a NAT implementation.  This definition corresponds to\n     \
    \      the definition of NatSessionId in the NAT-MIB (RFC 4008).\n           Value\
    \ 0 can be used to indicate that the policy rule does\n           not use any\
    \ NAT binding.\"\n       SYNTAX      Unsigned32\n   --\n   -- The MIDCOM resource\
    \ table\n   --\n   midcomResourceTable OBJECT-TYPE\n       SYNTAX      SEQUENCE\
    \ OF MidcomResourceEntry\n       MAX-ACCESS  not-accessible\n       STATUS   \
    \   current\n       DESCRIPTION\n          \"This table lists all used middlebox\
    \ resources per\n           MIDCOM policy rule.\n           The midcomResourceTable\
    \ augments the\n           midcomRuleTable.\"\n       ::= { midcomMonitoring 1\
    \ }\n   midcomResourceEntry OBJECT-TYPE\n       SYNTAX      MidcomResourceEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \          \"An entry describing a particular set of middlebox\n           resources.\"\
    \n       AUGMENTS { midcomRuleEntry }\n       ::= { midcomResourceTable 1 }\n\
    \   MidcomResourceEntry ::= SEQUENCE {\n       midcomRscNatInternalAddrBindMode\
    \   MidcomNatBindMode,\n       midcomRscNatInternalAddrBindId     NatBindIdOrZero,\n\
    \       midcomRscNatInsideAddrBindMode     MidcomNatBindMode,\n       midcomRscNatInsideAddrBindId\
    \       NatBindIdOrZero,\n       midcomRscNatSessionId1             MidcomNatSessionIdOrZero,\n\
    \       midcomRscNatSessionId2             MidcomNatSessionIdOrZero,\n       midcomRscFirewallRuleId\
    \            Unsigned32\n   }\n   midcomRscNatInternalAddrBindMode OBJECT-TYPE\n\
    \       SYNTAX      MidcomNatBindMode\n       MAX-ACCESS  read-only\n       STATUS\
    \      current\n       DESCRIPTION\n          \"An indication of whether this\
    \ policy rule uses an address\n           NAT bind or an address-port NAT bind\
    \ for binding the\n           internal address.\n           If the MIDCOM-MIB\
    \ module is operated together with\n           the NAT-MIB module (RFC 4008) then\
    \ object\n           midcomRscNatInternalAddrBindMode contains the same\n    \
    \       value as the corresponding object\n           natSessionPrivateSrcEPBindMode\
    \ of the NAT-MIB module.\"\n       ::= { midcomResourceEntry 4 }\n   midcomRscNatInternalAddrBindId\
    \ OBJECT-TYPE\n       SYNTAX      NatBindIdOrZero\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n          \"This object references\
    \ to the allocated internal NAT\n           bind that is used by this policy rule.\
    \  A NAT bind\n           describes the mapping of internal addresses to\n   \
    \        outside addresses.  MIDCOM-MIB implementations can\n           read this\
    \ object to learn the corresponding NAT bind\n           resource for this particular\
    \ policy rule.\n           If the MIDCOM-MIB module is operated together with\n\
    \           the NAT-MIB module (RFC 4008) then object\n           midcomRscNatInternalAddrBindId\
    \ contains the same\n           value as the corresponding object\n          \
    \ natSessionPrivateSrcEPBindId of the NAT-MIB module.\"\n       ::= { midcomResourceEntry\
    \ 5 }\n   midcomRscNatInsideAddrBindMode OBJECT-TYPE\n       SYNTAX      MidcomNatBindMode\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \          \"An indication of whether this policy rule uses an address\n     \
    \      NAT bind or an address-port NAT bind for binding the\n           external\
    \ address.\n           If the MIDCOM-MIB module is operated together with\n  \
    \         the NAT-MIB module (RFC 4008), then object\n           midcomRscNatInsideAddrBindMode\
    \ contains the same\n           value as the corresponding object\n          \
    \ natSessionPrivateDstEPBindMode of the NAT-MIB module.\"\n       ::= { midcomResourceEntry\
    \ 6 }\n   midcomRscNatInsideAddrBindId OBJECT-TYPE\n       SYNTAX      NatBindIdOrZero\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \          \"This object refers to the allocated external NAT\n           bind\
    \ that is used by this policy rule.  A NAT bind\n           describes the mapping\
    \ of external addresses to\n           inside addresses.  MIDCOM-MIB implementations\
    \ can\n           read this object to learn the corresponding NAT bind\n     \
    \      resource for this particular policy rule.\n           If the MIDCOM-MIB\
    \ module is operated together with the\n           NAT-MIB module (RFC 4008),\
    \ then object\n           midcomRscNatInsideAddrBindId contains the same\n   \
    \        value as the corresponding object\n           natSessionPrivateDstEPBindId\
    \ of the NAT-MIB module.\"\n       ::= { midcomResourceEntry 7 }\n   midcomRscNatSessionId1\
    \ OBJECT-TYPE\n       SYNTAX      MidcomNatSessionIdOrZero\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n          \"This\
    \ object refers to the first allocated NAT session for\n           this policy\
    \ rule.  MIDCOM-MIB implementations can read this\n           object to learn\
    \ whether or not a NAT session for a\n           particular policy rule is used.\
    \  A value of 0 means that no\n           NAT session is allocated for this policy\
    \ rule.  A value\n           other than 0 refers to the NAT session.\"\n     \
    \ ::= { midcomResourceEntry 8 }\n   midcomRscNatSessionId2 OBJECT-TYPE\n     \
    \  SYNTAX      MidcomNatSessionIdOrZero\n       MAX-ACCESS  read-only\n      \
    \ STATUS      current\n       DESCRIPTION\n          \"This object refers to the\
    \ second allocated NAT session for\n           this policy rule.  MIDCOM-MIB implementations\
    \ can read this\n           object to learn whether or not a NAT session for a\n\
    \           particular policy rule is used.  A value of 0 means that no\n    \
    \       NAT session is allocated for this policy rule.  A value\n           other\
    \ than 0 refers to the NAT session.\"\n       ::= { midcomResourceEntry 9 }\n\
    \   midcomRscFirewallRuleId OBJECT-TYPE\n       SYNTAX      Unsigned32\n     \
    \  MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n   \
    \       \"This object refers to the allocated firewall\n           rule in the\
    \ firewall engine for this policy rule.\n           MIDCOM-MIB implementations\
    \ can read this value to\n           learn whether a firewall rule for this particular\n\
    \           policy rule is used or not.  A value of 0 means that\n           no\
    \ firewall rule is allocated for this policy rule.\n           A value other than\
    \ 0 refers to the firewall rule\n           number within the firewall engine.\"\
    \n       ::= { midcomResourceEntry 10 }\n   --\n   -- Statistics subtree\n   --\n\
    \   -- The MIDCOM statistics subtree contains a set of managed\n   -- objects\
    \ providing statistics about the usage of transaction\n   -- objects.\n   --\n\
    \   midcomStatistics      OBJECT IDENTIFIER ::= { midcomMonitoring 2 }\n   midcomCurrentOwners\
    \ OBJECT-TYPE\n       SYNTAX      Gauge32\n       MAX-ACCESS  read-only\n    \
    \   STATUS      current\n       DESCRIPTION\n          \"The number of different\
    \ values for midcomRuleOwner\n           for all current entries in the midcomRuleTable.\"\
    \n       ::= { midcomStatistics 1 }\n   midcomTotalRejectedRuleEntries OBJECT-TYPE\n\
    \       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n          \"The total number of failed attempts\
    \ to create an entry\n           in the midcomRuleTable.\"\n       ::= { midcomStatistics\
    \ 2 }\n   midcomCurrentRulesIncomplete OBJECT-TYPE\n       SYNTAX      Gauge32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \          \"The current number of policy rules that are incomplete.\n       \
    \    Policy rules are loaded via row entries in the\n           midcomRuleTable.\
    \  This object counts policy rules that are\n           loaded but not fully specified,\
    \ i.e., they are in state\n           newEntry(1) or setting(2).\"\n       ::=\
    \ { midcomStatistics 3 }\n   midcomTotalIncorrectReserveRules OBJECT-TYPE\n  \
    \     SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS     \
    \ current\n       DESCRIPTION\n          \"The total number of policy reserve\
    \ rules that failed\n           parameter check and entered state incorrectRequest(4).\"\
    \n       ::= { midcomStatistics 4 }\n   midcomTotalRejectedReserveRules OBJECT-TYPE\n\
    \       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n          \"The total number of policy reserve\
    \ rules that failed\n           while being processed and entered state requestRejected(6).\"\
    \n       ::= { midcomStatistics 5 }\n   midcomCurrentActiveReserveRules OBJECT-TYPE\n\
    \       SYNTAX      Gauge32\n       MAX-ACCESS  read-only\n       STATUS     \
    \ current\n       DESCRIPTION\n          \"The number of currently active policy\
    \ reserve rules.\"\n       ::= { midcomStatistics 6 }\n   midcomTotalExpiredReserveRules\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n          \"The total number of\
    \ expired policy reserve rules\n           (entered termination state timedOut(9)).\"\
    \n       ::= { midcomStatistics 7 }\n   midcomTotalTerminatedOnRqReserveRules\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n          \"The total number of\
    \ policy reserve rules that were\n           terminated on request (entered termination\
    \ state\n           terminatedOnRequest(10)).\"\n       ::= { midcomStatistics\
    \ 8 }\n   midcomTotalTerminatedReserveRules OBJECT-TYPE\n       SYNTAX      Counter32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \          \"The total number of policy reserve rules that were\n           terminated,\
    \ but not on request (entered termination state\n           terminated(11)).\"\
    \n       ::= { midcomStatistics 9 }\n   midcomTotalIncorrectEnableRules OBJECT-TYPE\n\
    \       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n          \"The total number of policy enable\
    \ rules that failed\n           parameter check and entered state incorrectRequest(4).\"\
    \n       ::= { midcomStatistics 10 }\n   midcomTotalRejectedEnableRules OBJECT-TYPE\n\
    \       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n          \"The total number of policy enable\
    \ rules that failed\n           while being processed and entered state requestRejected(6).\"\
    \n       ::= { midcomStatistics 11 }\n   midcomCurrentActiveEnableRules OBJECT-TYPE\n\
    \       SYNTAX      Gauge32\n       MAX-ACCESS  read-only\n       STATUS     \
    \ current\n       DESCRIPTION\n          \"The number of currently active policy\
    \ enable rules.\"\n       ::= { midcomStatistics 12 }\n   midcomTotalExpiredEnableRules\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n          \"The total number of\
    \ expired policy enable rules\n           (entered termination state timedOut(9)).\"\
    \n       ::= { midcomStatistics 13 }\n   midcomTotalTerminatedOnRqEnableRules\
    \ OBJECT-TYPE\n       SYNTAX      Counter32\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n          \"The total number of\
    \ policy enable rules that were\n           terminated on request (entered termination\
    \ state\n           terminatedOnRequest(10)).\"\n       ::= { midcomStatistics\
    \ 14 }\n   midcomTotalTerminatedEnableRules OBJECT-TYPE\n       SYNTAX      Counter32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \          \"The total number of policy enable rules that were\n           terminated,\
    \ but not on request (entered termination state\n           terminated(11)).\"\
    \n       ::= { midcomStatistics 15 }\n   --\n   -- Notifications.\n   --\n   midcomUnsolicitedRuleEvent\
    \ NOTIFICATION-TYPE\n       OBJECTS     { midcomRuleOperStatus, midcomRuleLifetime\
    \ }\n       STATUS      current\n       DESCRIPTION\n           \"This notification\
    \ is generated whenever the value of\n            midcomRuleOperStatus enters\
    \ any error state or any\n            termination state without an explicit trigger\
    \ by a\n            MIDCOM client.\"\n       ::= { midcomNotifications 1 }\n \
    \  midcomSolicitedRuleEvent NOTIFICATION-TYPE\n       OBJECTS     { midcomRuleOperStatus,\
    \ midcomRuleLifetime }\n       STATUS      current\n       DESCRIPTION\n     \
    \      \"This notification is generated whenever the value\n            of midcomRuleOperStatus\
    \ enters one of the states\n            {reserved, enabled, any error state, any\
    \ termination state}\n            as a result of a MIDCOM agent writing successfully\
    \ to\n            object midcomRuleAdminStatus.\n            In addition, it is\
    \ generated when the lifetime of\n            a rule was changed by successfully\
    \ writing to object\n            midcomRuleLifetime.\"\n       ::= { midcomNotifications\
    \ 2 }\n   midcomSolicitedGroupEvent NOTIFICATION-TYPE\n       OBJECTS     { midcomGroupLifetime\
    \ }\n       STATUS      current\n       DESCRIPTION\n           \"This notification\
    \ is generated for indicating that the\n            lifetime of all member rules\
    \ of the group was changed by\n            successfully writing to object midcomGroupLifetime.\n\
    \            Note that this notification is only sent if the lifetime\n      \
    \      of a group was changed by successfully writing to object\n            midcomGroupLifetime.\
    \  No notification is sent\n              - if a group's lifetime is changed by\
    \ writing to object\n                midcomRuleLifetime of any of its member policies,\n\
    \              - if a group's lifetime expires (in this case,\n              \
    \  notifications are sent for all member policies), or\n              - if the\
    \ group is terminated by terminating the last\n                of its member policies\
    \ without writing to object\n                midcomGroupLifetime.\"\n       ::=\
    \ { midcomNotifications 3 }\n   --\n   -- Conformance information\n   --\n   midcomCompliances\
    \ OBJECT IDENTIFIER ::= { midcomConformance 1 }\n   midcomGroups      OBJECT IDENTIFIER\
    \ ::= { midcomConformance 2 }\n   --\n   -- compliance statements\n   --\n   --\
    \ This is the MIDCOM compliance definition ...\n   --\n   midcomCompliance MODULE-COMPLIANCE\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The compliance statement\
    \ for implementations of the\n            MIDCOM-MIB module.\n            Note\
    \ that compliance with this compliance\n            statement requires compliance\
    \ with the\n            ifCompliance3 MODULE-COMPLIANCE statement of the\n   \
    \         IF-MIB [RFC2863].\"\n       MODULE      -- this module\n       MANDATORY-GROUPS\
    \ {\n               midcomRuleGroup,\n               midcomNotificationsGroup,\n\
    \               midcomCapabilitiesGroup,\n               midcomStatisticsGroup\n\
    \       }\n       GROUP   midcomConfigFirewallGroup\n       DESCRIPTION\n    \
    \      \"A compliant implementation does not have to implement\n           the\
    \ midcomConfigFirewallGroup.\"\n       GROUP   midcomResourceGroup\n       DESCRIPTION\n\
    \          \"A compliant implementation does not have to implement\n         \
    \  the midcomResourceGroup.\"\n       OBJECT midcomRuleInternalIpPrefixLength\n\
    \       MIN-ACCESS  read-only\n       DESCRIPTION\n          \"Write access is\
    \ not required.  When write access is\n           not supported, return 128 as\
    \ the value of this object.\n           A value of 128 means that the function\
    \ represented by\n           this option is not supported.\"\n       OBJECT midcomRuleExternalIpPrefixLength\n\
    \       MIN-ACCESS  read-only\n       DESCRIPTION\n          \"Write access is\
    \ not required.  When write access is\n           not supported, return 128 as\
    \ the value of this object.\n           A value of 128 means that the function\
    \ represented by\n           this option is not supported.\"\n       OBJECT midcomRuleMaxIdleTime\n\
    \       MIN-ACCESS  read-only\n       DESCRIPTION\n          \"Write access is\
    \ not required.  When write access is\n           not supported, return 0 as the\
    \ value of this object.\n           A value of 0 means that the function represented\
    \ by\n           this option is not supported.\"\n       OBJECT midcomRuleInterface\n\
    \       MIN-ACCESS  read-only\n       DESCRIPTION\n          \"Write access is\
    \ not required.\"\n       OBJECT midcomConfigMaxLifetime\n       MIN-ACCESS  read-only\n\
    \       DESCRIPTION\n          \"Write access is not required.\"\n       OBJECT\
    \ midcomConfigPersistentRules\n       MIN-ACCESS  read-only\n       DESCRIPTION\n\
    \          \"Write access is not required.\"\n       OBJECT midcomConfigIfEnabled\n\
    \       MIN-ACCESS  read-only\n       DESCRIPTION\n          \"Write access is\
    \ not required.\"\n       OBJECT midcomConfigFirewallGroupId\n       MIN-ACCESS\
    \  read-only\n       DESCRIPTION\n          \"Write access is not required.\"\n\
    \       OBJECT midcomConfigFirewallPriority\n       MIN-ACCESS  read-only\n  \
    \     DESCRIPTION\n          \"Write access is not required.\"\n       ::= { midcomCompliances\
    \ 1 }\n   midcomRuleGroup OBJECT-GROUP\n       OBJECTS {\n           midcomRuleAdminStatus,\n\
    \           midcomRuleOperStatus,\n           midcomRuleStorageType,\n       \
    \    midcomRuleStorageTime,\n           midcomRuleError,\n           midcomRuleInterface,\n\
    \           midcomRuleFlowDirection,\n           midcomRuleMaxIdleTime,\n    \
    \       midcomRuleTransportProtocol,\n           midcomRulePortRange,\n      \
    \     midcomRuleInternalIpVersion,\n           midcomRuleExternalIpVersion,\n\
    \           midcomRuleInternalIpAddr,\n           midcomRuleInternalIpPrefixLength,\n\
    \           midcomRuleInternalPort,\n           midcomRuleExternalIpAddr,\n  \
    \         midcomRuleExternalIpPrefixLength,\n           midcomRuleExternalPort,\n\
    \           midcomRuleInsideIpAddr,\n           midcomRuleInsidePort,\n      \
    \     midcomRuleOutsideIpAddr,\n           midcomRuleOutsidePort,\n          \
    \ midcomRuleLifetime,\n           midcomRuleRowStatus,\n           midcomGroupLifetime\n\
    \       }\n       STATUS      current\n       DESCRIPTION\n           \"A collection\
    \ of objects providing information about\n            policy rules and policy\
    \ rule groups.\"\n       ::= { midcomGroups 1 }\n   midcomCapabilitiesGroup OBJECT-GROUP\n\
    \       OBJECTS {\n           midcomConfigMaxLifetime,\n           midcomConfigPersistentRules,\n\
    \           midcomConfigIfBits,\n           midcomConfigIfEnabled\n       }\n\
    \       STATUS      current\n       DESCRIPTION\n           \"A collection of\
    \ objects providing information about\n            the capabilities of a middlebox.\"\
    \n       ::= { midcomGroups 2 }\n   midcomConfigFirewallGroup OBJECT-GROUP\n \
    \      OBJECTS {\n           midcomConfigFirewallGroupId,\n           midcomConfigFirewallPriority\n\
    \       }\n       STATUS      current\n       DESCRIPTION\n           \"A collection\
    \ of objects providing information about\n            the firewall rule group\
    \ and firewall rule priority to\n            be used by firewalls loaded through\
    \ MIDCOM.\"\n       ::= { midcomGroups 3 }\n   midcomResourceGroup OBJECT-GROUP\n\
    \       OBJECTS {\n           midcomRscNatInternalAddrBindMode,\n           midcomRscNatInternalAddrBindId,\n\
    \           midcomRscNatInsideAddrBindMode,\n           midcomRscNatInsideAddrBindId,\n\
    \           midcomRscNatSessionId1,\n           midcomRscNatSessionId2,\n    \
    \       midcomRscFirewallRuleId\n       }\n       STATUS      current\n      \
    \ DESCRIPTION\n           \"A collection of objects providing information about\n\
    \            the used NAT and firewall resources.\"\n       ::= { midcomGroups\
    \ 4 }\n   midcomStatisticsGroup OBJECT-GROUP\n       OBJECTS {\n           midcomCurrentOwners,\n\
    \           midcomTotalRejectedRuleEntries,\n           midcomCurrentRulesIncomplete,\n\
    \           midcomTotalIncorrectReserveRules,\n           midcomTotalRejectedReserveRules,\n\
    \           midcomCurrentActiveReserveRules,\n           midcomTotalExpiredReserveRules,\n\
    \           midcomTotalTerminatedOnRqReserveRules,\n           midcomTotalTerminatedReserveRules,\n\
    \           midcomTotalIncorrectEnableRules,\n           midcomTotalRejectedEnableRules,\n\
    \           midcomCurrentActiveEnableRules,\n           midcomTotalExpiredEnableRules,\n\
    \           midcomTotalTerminatedOnRqEnableRules,\n           midcomTotalTerminatedEnableRules\n\
    \       }\n       STATUS      current\n       DESCRIPTION\n           \"A collection\
    \ of objects providing statistical\n            information about the MIDCOM server.\"\
    \n       ::= { midcomGroups 5 }\n   midcomNotificationsGroup NOTIFICATION-GROUP\n\
    \        NOTIFICATIONS {\n            midcomUnsolicitedRuleEvent,\n          \
    \  midcomSolicitedRuleEvent,\n            midcomSolicitedGroupEvent\n        }\n\
    \        STATUS    current\n        DESCRIPTION\n            \"The notifications\
    \ emitted by the midcomMIB.\"\n        ::= { midcomGroups 6 }\n   END\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Obviously, securing access to firewall and NAT\
    \ configuration is\n   extremely important for maintaining network security. \
    \ This section\n   first describes general security issues of the MIDCOM-MIB module\
    \ and\n   then discusses three concrete security threats: unauthorized\n   middlebox\
    \ configuration, unauthorized access to middlebox\n   configuration information,\
    \ and unauthorized access to the MIDCOM\n   service configuration.\n"
- title: 10.1.  General Security Issues
  contents:
  - "10.1.  General Security Issues\n   There are a number of management objects defined\
    \ in this MIB module\n   with a MAX-ACCESS clause of read-write and/or read-create.\
    \  Such\n   objects may be considered sensitive or vulnerable in some network\n\
    \   environments.  But also access to managed objects with a MAX-ACCESS\n   clause\
    \ of read-only may be considered sensitive or vulnerable.  The\n   support for\
    \ SET and GET operations in a non-secure environment\n   without proper protection\
    \ can have a negative effect on network\n   operations.\n   SNMP versions prior\
    \ to SNMPv3 did not include adequate security.\n   Even if the network itself\
    \ is secure (for example by using IPsec),\n   even then, there is no control as\
    \ to who on the secure network is\n   allowed to access and GET/SET (read/change/create/delete)\
    \ the objects\n   in this MIB module.\n   Deployment of SNMP versions prior to\
    \ SNMPv3 is NOT RECOMMENDED.\n   Compliant MIDCOM-MIB implementations MUST support\
    \ SNMPv3 security\n   services including data integrity, identity authentication,\
    \ data\n   confidentiality, and replay protection.\n   It is REQUIRED that the\
    \ implementations support the security features\n   as provided by the SNMPv3\
    \ framework.  Specifically, the use of the\n   User-based Security Model RFC 3414\
    \ [RFC3414] and the View-based\n   Access Control Model RFC 3415 [RFC3415] is\
    \ RECOMMENDED.\n   It is then a customer/operator responsibility to ensure that\
    \ the SNMP\n   entity giving access to an instance of this MIB is properly\n \
    \  configured to give access to the objects only to those principals\n   (users)\
    \ that have legitimate rights to indeed GET or SET\n   (change/create/delete)\
    \ them.\n   To facilitate the provisioning of access control by a security\n \
    \  administrator using the View-based Access Control Model (VACM)\n   defined\
    \ in RFC 3415 [RFC3415] for tables in which multiple users may\n   need to independently\
    \ create or modify entries, the initial index is\n   used as an \"owner index\"\
    .  This is supported by the midcomRuleTable\n   and the midcomGroupTable.  Each\
    \ of them uses midcomRuleOwner as the\n   initial index.  midcomRuleOwner has\
    \ the syntax of SnmpAdminString,\n   and can thus be trivially mapped to an SNMP\
    \ securityName or a\n   groupName as defined in VACM, in accordance with a security\
    \ policy.\n   All entries in the two mentioned tables belonging to a particular\n\
    \   user will have the same value for this initial index.  For a given\n   user's\
    \ entries in a particular table, the object identifiers for the\n   information\
    \ in these entries will have the same subidentifiers\n   (except for the \"column\"\
    \ subidentifier) up to the end of the encoded\n   owner index.  To configure VACM\
    \ to permit access to this portion of\n   the table, one would create vacmViewTreeFamilyTable\
    \ entries with the\n   value of vacmViewTreeFamilySubtree including the owner\
    \ index portion,\n   and vacmViewTreeFamilyMask \"wildcarding\" the column subidentifier.\n\
    \   More elaborate configurations are possible.\n"
- title: 10.2.  Unauthorized Middlebox Configuration
  contents:
  - "10.2.  Unauthorized Middlebox Configuration\n   The most dangerous threat to\
    \ network security related to the MIDCOM-\n   MIB module is unauthorized access\
    \ to facilities for establishing\n   policy rules.  In such a case, unauthorized\
    \ principals would write to\n   the midcomRuleTable for opening firewall pinholes\
    \ and/or for creating\n   NAT maps, bindings, and/or sessions.  Establishing policies\
    \ can be\n   used to gain access to networks and systems that are protected by\n\
    \   firewalls and/or NATs.\n   If this protection is removed by unauthorized access\
    \ to MIDCOM-MIB\n   policies, then the resulting degradation of network security\
    \ can be\n   severe.  Confidential information protected by a firewall might\n\
    \   become accessible to unauthorized principals, attacks exploiting\n   security\
    \ leaks of systems in the protected network might become\n   possible from external\
    \ networks, and it might be possible to stop\n   firewalls blocking denial-of-service\
    \ attacks.\n   MIDCOM-MIB implementations MUST provide means for strict\n   authentication,\
    \ message integrity check, and write access control to\n   managed objects that\
    \ can be used for establishing policy rules.\n   These are objects in the midcomRuleTable\
    \ and midcomGroupTable with a\n   MAX-ACCESS clause of read-write and/or read-create.\n\
    \   Particularly sensitive is write access to the managed object\n   midcomRuleAdminStatus,\
    \ because writing it causes policy rules to be\n   established.\n   Also, writing\
    \ to other managed objects in the two tables can make\n   security vulnerable\
    \ if it interferes with the authorized\n   establishment of a policy rule, for\
    \ example, by wildcarding a policy\n   rule after the corresponding entry in the\
    \ midcomRuleTable is created,\n   but before the authorized owner establishes\
    \ the rule by writing to\n   midcomRuleAdminStatus.\n   Not only unauthorized\
    \ establishment, but also unauthorized lifetime\n   extension of an existing policy\
    \ rule may be considered sensitive or\n   vulnerable in some network environments.\
    \  Therefore, means for strict\n   authentication, message integrity check, and\
    \ write access control to\n   managed object midcomGroupLifetime MUST be provided\
    \ by MIDCOM-MIB\n   implementations.\n"
- title: 10.3.  Unauthorized Access to Middlebox Configuration
  contents:
  - "10.3.  Unauthorized Access to Middlebox Configuration\n   Another threat to network\
    \ security is unauthorized access to entries\n   in the midcomRuleTable.  The\
    \ entries contain information about\n   existing pinholes in the firewall and/or\
    \ about the current NAT\n   configuration.  This information can be used for attacking\
    \ the\n   internal network from outside.  Therefore, a MIDCOM-MIB\n   implementation\
    \ MUST also provide means for read access control to the\n   midcomRuleTable.\n\
    \   Also, a MIDCOM-MIB implementation SHOULD provide means for protecting\n  \
    \ different authenticated MIDCOM agents from each other, such that, for\n   example,\
    \ an authenticated user can only read entries in the\n   midcomRuleTable for which\
    \ the initial index midcomRuleOwner matches\n   the client's SNMP securityName\
    \ or VACM groupName.\n"
- title: 10.4.  Unauthorized Access to MIDCOM Service Configuration
  contents:
  - "10.4.  Unauthorized Access to MIDCOM Service Configuration\n   There are three\
    \ objects with a MAX-ACCESS clause of read-write that\n   configure the MIDCOM\
    \ service: midcomConfigIfEnabled,\n   midcomFirewallGroupId, and midcomFirewallPriority.\n\
    \   Unauthorized writing to object midcomConfigIfEnabled can cause\n   serious\
    \ interruptions of network service.\n   Writing to midcomFirewallGroupId and/or\
    \ midcomFirewallPriority can be\n   used to increase or reduce the priority of\
    \ firewall rules that are\n   generated when a policy rule is established in the\
    \ midcomRuleTable.\n   Increasing the priority might permit firewall rules generated\
    \ via the\n   MIDCOM-MIB module to overrule basic security rules at the firewall\n\
    \   that should have higher priority than the ones generated via the\n   MIDCOM-MIB\
    \ module.\n   Therefore, also for these objects, means for strict control of write\n\
    \   access MUST be provided by a MIDCOM-MIB implementation.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   This memo is based on a long history of discussion\
    \ within the MIDCOM\n   MIB design team.  Many thanks to Mary Barnes, Jeff Case,\
    \ Wes\n   Hardaker, David Harrington, and Tom Taylor for fruitful comments and\n\
    \   recommendations and to Juergen Schoenwaelder acting as a very\n   constructive\
    \ MIB doctor.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   IANA has assigned an OID for the MIB module in this\
    \ document:\n               Descriptor        OBJECT IDENTIFIER value\n      \
    \         ----------        -----------------------\n               midcomMIB\
    \         { mib-2 171 }\n"
- title: 13.  Normative References
  contents:
  - "13.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5189]  Stiemerling, M., Quittek, J., and T. Taylor, \"Middlebox\n\
    \              Communication (MIDCOM) Protocol Semantics\", RFC 5189,\n      \
    \        March 2008.\n   [RFC2578]  McCloghrie, K., Perkins, D., Schoenwaelder,\
    \ J., Case, J.,\n              Rose, M. and S. Waldbusser, \"Structure of Management\n\
    \              Information Version 2 (SMIv2)\", STD 58, RFC 2578, April\n    \
    \          1999.\n   [RFC2579]  McCloghrie, K., Perkins, D., Schoenwaelder, J.,\
    \ Case, J.,\n              Rose, M. and S. Waldbusser, \"Textual Conventions for\n\
    \              SMIv2\", STD 58, RFC 2579, April 1999.\n   [RFC2580]  McCloghrie,\
    \ K., Perkins, D., Schoenwaelder, J., Case, J.,\n              Rose, M. and S.\
    \ Waldbusser, \"Conformance Statements for\n              SMIv2\", STD 58, RFC\
    \ 2580, April 1999.\n   [RFC2863]  McCloghrie, K. and F. Kastenholz, \"The Interfaces\
    \ Group\n              MIB\", RFC 2863, June 2000.\n   [RFC3411]  Harrington,\
    \ D., Presuhn, R. and B. Wijnen, \"An\n              Architecture for Describing\
    \ Simple Network Management\n              Protocol (SNMP) Management Frameworks\"\
    , STD 62, RFC 3411,\n              December 2002.\n   [RFC3413]  Levi, D., Meyer,\
    \ P., and B. Stewart, \"Simple Network\n              Management Protocol Applications\"\
    , STD 62, RFC 3413,\n              December 2002.\n   [RFC3414]  Blumenthal, U.\
    \ and B. Wijnen, \"User-based Security Model\n              (USM) for version\
    \ 3 of the Simple Network Management\n              Protocol (SNMPv3)\", STD 62,\
    \ RFC 3414, December 2002.\n   [RFC3418]  Presuhn, R., Ed., \"Management Information\
    \ Base (MIB) for\n              the Simple Network Management Protocol (SNMP)\"\
    , STD 62,\n              RFC 3418, December 2002.\n   [RFC3550]  Schulzrinne,\
    \ H., Casner, S., Frederick, R., and V.\n              Jacobson, \"RTP: A Transport\
    \ Protocol for Real-Time\n              Applications\", STD 64, RFC 3550, July\
    \ 2003.\n   [RFC4001]  Daniele, M., Haberman, B., Routhier, S., and J.\n     \
    \         Schoenwaelder, \"Textual Conventions for Internet Network\n        \
    \      Addresses\", RFC 4001, February 2005.\n   [RFC4008]  Rohit, R., Srisuresh,\
    \ P., Raghunarayan, R., Pai, N., and\n              C. Wang, \"Definitions of\
    \ Managed Objects for Network\n              Address Translators (NAT)\", RFC\
    \ 4008, March 2005.\n"
- title: 14.  Informative References
  contents:
  - "14.  Informative References\n   [RFC3410]  Case, J., Mundy, R., Partain, D. and\
    \ B. Stewart,\n              \"Introduction and Applicability Statements for Internet-\n\
    \              Standard Management Framework\", RFC 3410, December 2002.\n   [RFC3234]\
    \  Carpenter, B. and S. Brim, \"Middleboxes: Taxonomy and\n              Issues\"\
    , RFC 3234, February 2002.\n   [RFC3303]  Srisuresh, P., Kuthan, J., Rosenberg,\
    \ J., Molitor, A., and\n              A. Rayhan, \"Middlebox communication architecture\
    \ and\n              framework\", RFC 3303, August 2002.\n   [RFC3304]  Swale,\
    \ R., Mart, P., Sijben, P., Brim, S., and M. Shore,\n              \"Middlebox\
    \ Communications (midcom) Protocol Requirements\",\n              RFC 3304, August\
    \ 2002.\n   [RFC3415]  Wijnen, B., Presuhn, R., and K. McCloghrie, \"View-based\n\
    \              Access Control Model (VACM) for the Simple Network\n          \
    \    Management Protocol (SNMP)\", STD 62, RFC 3415, December\n              2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Juergen Quittek\n   NEC Europe Ltd.\n   Kurfuersten-Anlage\
    \ 36\n   69115 Heidelberg\n   Germany\n   Phone: +49 6221 4342-115\n   EMail:\
    \ quittek@nw.neclab.eu\n   Martin Stiemerling\n   NEC Europe Ltd.\n   Kurfuersten-Anlage\
    \ 36\n   69115 Heidelberg\n   Germany\n   Phone: +49 6221 4342-113\n   EMail:\
    \ stiemerling@nw.neclab.eu\n   Pyda Srisuresh\n   Kazeon Systems, Inc.\n   1161\
    \ San Antonio Rd.\n   Mountain View, CA 94043\n   U.S.A.\n   Phone: +1 408 836\
    \ 4773\n   EMail: srisuresh@yahoo.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
