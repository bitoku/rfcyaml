- title: __initial_text__
  contents:
  - '            Some Thoughts in Defense of the TELNET Go-Ahead

    '
- title: This note is a reply to Edward Taft's "Second Thoughts on TELNET Go-
  contents:
  - 'This note is a reply to Edward Taft''s "Second Thoughts on TELNET Go-

    '
- title: 'Ahead" (NIC #20812).  Specifically, I will attempt to show the'
  contents:
  - 'Ahead" (NIC #20812).  Specifically, I will attempt to show the

    '
- title: 'following about the three main directions of his objections:'
  contents:
  - "following about the three main directions of his objections:\n     1. It is the\
    \ idea of line-at-a-time systems which are esthetically\n     unappealing, not\
    \ the GA mechanism.  This may be a valid point, but\n     given the large number\
    \ of such systems on the net, it would seem a\n     rather academic one.\n   \
    \  2. The specified GA mechanism will in fact work very well between\n     (reasonably\
    \ implemented) line-at-a-time systems, and should provide\n     significant help\
    \ elsewhere.\n     3. While the GA mechanism may not be correct in all cases,\
    \ it can\n     provide significant advantages fro the line-at-a-time systems and\n\
    \     users.\n   My comments will be arranged under the original headings from\
    \ the\n   subject RFC (NIC #20812).\n"
- title: '"TECHNOLOGY"'
  contents:
  - "\"TECHNOLOGY\"\n   The definitions of \"half-duplex\" and \"reverse break\" are\n\
    \   satisfactory.  Two points should be made regarding \"reverse break\",\n  \
    \ however.  First: having reverse break on the terminal is of course not\n   sufficient;\
    \ the operating system must support it.  As \"support\" is\n   equivalent to \"\
    require\" in this context, it is not too surprising\n   that some systems do not\
    \ in fact do this.  That is, there are systems\n   which will not type through\
    \ an unlocked keyboard until the user\n   manually turns the line around, and\
    \ the operational problems with\n   such systems are much less than might be assumed.\
    \  Second, at least on\n   IBM 2741's and equivalent, the line turnaround takes\
    \ a significant\n   amount of time, during which user-typed characters may be\
    \ missed or\n   garbled.  In fact, a fairly standard mode of operation with systems\n\
    \   that use reverse break (including TIP's) is to automatically enter\n   a \"\
    line delete\" character and start over every time the reverse break\n   is used\
    \ while typing, which can hardly be called esthetic.  One\n   solution to this\
    \ problem would be for the system to not use reverse\n   break once the user has\
    \ begun typing (as suggested near the end of\n   NIC #20812), but most systems\
    \ (including TIP's) do not do this.\n   Some discussion is also warranted at this\
    \ point about line-at-a-time\n   systems (hereafter abbreviated as LAAT systems).\
    \  One prime reason for\n   LAAT operation is to avoid the overhead of interrupting\
    \ the CPU (and\n   possibly the user process) for every character typed.  Instead,\n\
    \   characters are buffered (in a controller, a front-end computer, etc)\n   until\
    \ some \"end-of-line\" signal is received; they are then passed to\n   the system\
    \ in a group.  This means that the system is totally unaware\n   that any typing\
    \ has occurred until the \"end-of-line\" signal is sent;\n   a partially completed\
    \ line will literally never be recognized.\n"
- title: '"ESTHETIC OBJECTIONS TO GA"'
  contents:
  - "\"ESTHETIC OBJECTIONS TO GA\"\n   From the above, I feel that one can see that\
    \ it is the operating mode\n   of a system rather than the type of features of\
    \ its terminals which\n   determines whether GA is useful or not.  For example,\
    \ IBM front-ends\n   handle Teletypes in LAAT mode, while the TIP attempts to\
    \ run 2741's\n   as full-duplex devices (with something less than \"a very good\
    \ job at\n   turning the line around,\" from my experience).\n   At any rate,\
    \ the half-duplex/full-duplex debate can go on forever --\n   the problem here\
    \ is to try to smooth the way for users on local LAAT\n   systems connected to\
    \ foreign systems of varying characteristics.\n"
- title: '"WHY GA WON''T WORK"'
  contents:
  - "\"WHY GA WON'T WORK\"\n   As mentioned, in LAAT systems no terminal input is\
    \ recognized until\n   the specified \"end-of-line\" character is entered, preceding\
    \ characters\n   having been buffered in a front-end etc.  This can of course\
    \ be\n   carried over into server TELNET: incoming network messages can be\n \
    \  buffered at a very low level in the NCP awaiting a TELNET end-of-line\n   signal.\
    \  User processes wanting input would remain blocked until the\n   end-of-line\
    \ is received, rather than being handed each character as\n   it is read.  In\
    \ fact, this is the implementation in all of the LAAT\n   systems with which I\
    \ am familiar.  The reason for doing this is\n   obvious: many hosts continue\
    \ to send single characters even in LAAT\n   systems, resulting in a significant\
    \ increase in overhead.  Equally\n   obvious is the fact that in this mode the\
    \ GA mechanism will function\n   quite well, in fact as well as turning the line\
    \ around to unlock the\n   keyboard of a local terminal.\n   This further brings\
    \ us what is to me one of the main reasons for the\n   GA mechanisms: the need\
    \ for a scheme similar to the above for user\n   TELNET's.  The problem is as\
    \ follows: a user TELNET on a LAAT system\n   has no required \"end-of-message\"\
    \ signal for incoming server-generated\n   messages, and so is required to read\
    \ each character as it comes, with\n   attendant overhead.  In addition, the user\
    \ process is forced to write\n   each character as it arrives, since it never\
    \ knows when the server\n   will stop sending.  On systems which support reverse\
    \ break this\n   results in little more than erratic terminal behavior, but on\
    \ systems\n   which do not support it, it is left up to the user to manually turn\n\
    \   the line around (which he can do reasonably well with \"attention\").\n  \
    \ Of course the overhead of handling character-at-a-time input on a\n   line-at-a-time\
    \ system is also significant.\n   This is what I see as the most valuable reason\
    \ for the GA mechanism,\n   as was noted in NIC#20812: it is not so much a request\
    \ for input as\n   an assurance (although not an irrevocable one) that the server\
    \ is\n   through sending output.  In fact, that is what the name implies to me:\n\
    \   go ahead, it's your turn to type, I'm through for a while.  Perhaps\n   some\
    \ of the objections would be eased if this aspect were given more\n   emphasis?\
    \ As an aside, the problem of spontaneous system messages\n   that might be generated\
    \ after a GA is sent is not a major one in\n   practice, as the user will surely\
    \ see the message as soon as he\n   manually turns the line around (enters his\
    \ next input line).  Note of\n   course that the spontaneous message should also\
    \ have a GA following,\n   to serve as  \"end-of-message\" to the receiving NCP.\
    \  Further, if\n   the user system supports reverse break, it can deliver the\
    \ message as\n   soon as it likes.\n"
- title: '"IMPLEMENTATION PROBLEMS"'
  contents:
  - "\"IMPLEMENTATION PROBLEMS\"\n   Perhaps the above discussion will remove some\
    \ of the objections from\n   this section? The GA should be sent when a system\
    \ has a \"reasonable\n   assurance\" that it is not going to generate additional\
    \ output (eg,\n   after a system prompt).  If this assumption turns out to be\
    \ false\n   there is no problem: the additional output is simply sent, also\n\
    \   followed by a GA.  The main point here is that known multi-line output\n \
    \  (eg, editor printout, message-of-the-day, SYSTAT) would have only the\n   single\
    \ GA on the end.\n   Finally about linking.  I agree that on a system like TENEX\
    \ links\n   should probably not use GA's, but have you been involved in a\n  \
    \ link to a user on a LAAT system? The LAAT user is of course generating\n   complete\
    \ lines, which are sent over such a link.  This can\n   be very disconcerting\
    \ to a character-at-a-time user, who all of a\n   sudden has dozens of characters\
    \ printing at full terminal speed\n   (often against the right margin).  And I\
    \ can hardly imagine linking\n   from a 2741 on a TIP to a TENEX user: one would\
    \ never get anything\n   typed, with all the line turnarounds.\n   In fact, in\
    \ all the linking that I have done from our (LAAT) system\n   to TENEX we have\
    \ very quickly agreed on a manual GA mechanism (eg,\n   \"over\").  For straight\
    \ conversational links I do not feel that it is\n   unreasonable to have a simple\
    \ way to ask your local process to send a\n   GA (although GA is mostly defined\
    \ in the server-to-user context,\n   which breaks down somewhat here).  One further\
    \ supportive comment: a\n   spoken conversation is of course line-at-a-time, with\
    \ \"obvious cues\"\n   (pauses, questions, etc.) serving as GA's.  The situation\
    \ is of course\n   quite livable, even when spontaneous talk overrides the GA\
    \ (\"Oh,\n   before you answer that, ...\").  This occasionally results in the\
    \ need to\n   repeat a line, in an exact analogy to the problem of lines garbled\
    \ by\n   a reverse break or printed against the right margin.\n   The problem\
    \ of links containing system output intermixed with user\n   input is more difficult.\
    \  In any implementation it seems the LAAT user\n   will have to be aware of what\
    \ is happening and manually control his\n   terminal to some extent, but that\
    \ is reasonable when dealing with an\n   \"alien\" system.  More definition work\
    \ is called for in this area, to\n   solve the efficiency problem for LAAT hosts.\n"
- title: '"A PROPOSAL"'
  contents:
  - "\"A PROPOSAL\"\n   The proposal appears on the surface to be that \"suppress\
    \ GA\" should\n   be the NVT default, which would be perfectly acceptable to me\
    \ (and I\n   would suppose to other LAAT users): two additional messages upon\n\
    \   opening a connection is a small enough price.\n   But in fact that is not\
    \ the proposal at all -- the proposal is really\n   to remove the requirement\
    \ that all server systems implement the GA.\n   This I object to very strenuously\
    \ since, as I feel I have shown, the\n   benefit to the LAAT system and user of\
    \ GA far outweigh its cost to\n   other types of server systems.  And of course\
    \ the expense of going\n   into \"suppress GA\" mode when appropriate is truly\
    \ negligible.\n   The proposal for having those user TELNET's which do not support\n\
    \   reverse break retain permanent control over terminals is also weak,\n   even\
    \ without GA.  In our current implementation the assumption is that\n   for each\
    \ line entered by the user, the server system will respeed\n   with something.\
    \  Control of the terminal is thus retained after input\n   until some output\
    \ is received and printed, when the terminal is again\n   made available for input.\
    \  The \"attention\" key is defined as a toggle\n   switch to control the terminal\
    \ keyboard: if pressed while the\n   keyboard is unlocked (open for input) it\
    \ will lock it until the next\n   available output message and if pressed while\
    \ keyboard is locked\n   it will be unlocked for input.  The user may also enter\
    \ a true unlocked\n   mode, in which the terminal is always returned to him for\
    \ additional\n   input (after printing all queued output).  This is used, for\n\
    \   example, for input to a text editor which does not issue prompts for\n   each\
    \ line, the mode may be changed at any time by the user, and the\n   \"attention\"\
    \ key may of course be used to retrieve expected but\n   infrequent output.  This\
    \ combination mode has proven much more effective\n   than the proposed \"user\
    \ must press attention for all input\" mode.\n   Of course the addition of GA\
    \ will allow the user process to wait for\n   a \"complete\" reply before printing\
    \ anything, which will eliminate\n   much of the use of \"attention\", as well\
    \ as improve system efficiency.\n"
- title: A GRIPE OF MY OWN
  contents:
  - "A GRIPE OF MY OWN\n   I would like to add one complaint of my own at this point.\
    \  The\n   implementation schedule for the new TELNET called for a date of July\
    \ 1\n   when systems should accept new TELNET without causing errors.\n   This\
    \ date was presumably agreed to by responsible representatives of\n   effectively\
    \ all active network sites.  My system has been using the\n   new TELNET since\
    \ early September (significantly after the allowable\n   date) but I have been\
    \ forced to disable all server-generated GA's\n   because (among other problems)\
    \ TENEX \"SNDMSG\" does not work when GA's\n   are received over the FTP TELNET\
    \ control connection.  Disabling the\n   GA's was of course required in order\
    \ for me to receive any deliveries\n   from the Network Information Center.  This\
    \ brings up three points.\n   First, I sincerely hope that service functions like\
    \ the NIC intend to\n   accept the new TELNET protocol by the January 1 implementation\
    \ date.\n   Second, in response to RFC#593 by Alex McKenzie and Jon Postel, I\
    \ do\n   not feel that attempting to use a second TCP socket for \"new TELNET\"\
    \n   will work, because of the use of TELNET by FTP.  In fact, it does not\n \
    \  seem too difficult to make a \"compatible\" TELNET which will accept\n   either\
    \ mode (which sites have had since July 1 to do) and I feel that\n   this is the\
    \ most reasonable implementation method, even if it makes\n   the January 1 date\
    \ impractical.  And third, perhaps sites should be\n   more cautious about commitments\
    \ to implementation schedules in the\n   future.\n         [ This RFC was put\
    \ into machine readable form for entry ]\n         [ into the online RFC archives\
    \ by Mirsad Todorovac 5/98 ]\n"
