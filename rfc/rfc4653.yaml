- title: __initial_text__
  contents:
  - '        Improving the Robustness of TCP to Non-Congestion Events

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies Non-Congestion Robustness (NCR) for TCP.\
    \  In\n   the absence of explicit congestion notification from the network, TCP\n\
    \   uses loss as an indication of congestion.  One of the ways TCP\n   detects\
    \ loss is using the arrival of three duplicate acknowledgments.\n   However, this\
    \ heuristic is not always correct, notably in the case\n   when network paths\
    \ reorder segments (for whatever reason), resulting\n   in degraded performance.\
    \  TCP-NCR is designed to mitigate this\n   degraded performance by increasing\
    \ the number of duplicate\n   acknowledgments required to trigger loss recovery,\
    \ based on the\n   current state of the connection, in an effort to better disambiguate\n\
    \   true segment loss from segment reordering.  This document specifies\n   the\
    \ changes to TCP, as well as the costs and benefits of these\n   modifications.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Terminology ................................................4\n  \
    \ 2. NCR Description .................................................5\n   3.\
    \ Algorithm .......................................................6\n      3.1.\
    \ Initialization .............................................8\n      3.2. Terminating\
    \ Extended Limited Transmit and\n           Preventing Bursts ..........................................9\n\
    \      3.3. Extended Limited Transmit .................................10\n  \
    \    3.4. Entering Loss Recovery ....................................11\n   4.\
    \ Advantages .....................................................12\n   5. Disadvantages\
    \ ..................................................12\n   6. Related Work ...................................................13\n\
    \   7. Security Considerations ........................................14\n  \
    \ 8. Acknowledgments ................................................14\n   9.\
    \ IANA Considerations ............................................14\n   10. References\
    \ ....................................................14\n      10.1. Normative\
    \ References .....................................14\n      10.2. Informative\
    \ References ...................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   One strength of TCP [RFC793] lies in its ability to adjust\
    \ its\n   sending rate according to the perceived congestion in the network\n\
    \   [Jac88, RFC2581].  In the absence of explicit notification of\n   congestion\
    \ from the network, TCP uses segment loss as an indication\n   of congestion (i.e.,\
    \ assuming queue overflow).  TCP receivers send\n   cumulative acknowledgments\
    \ (ACKs) indicating the next sequence number\n   expected from the sender for\
    \ arriving segments [RFC793].  When\n   segments arrive out of order, duplicate\
    \ ACKs are generated.  As\n   specified in [RFC2581], a TCP sender uses the arrival\
    \ of three\n   duplicate ACKs as an indication of segment loss.  The TCP sender\n\
    \   retransmits the lost segment and reduces the load imposed on the\n   network,\
    \ assuming the segment loss was caused by resource contention\n   within the network\
    \ path.  The TCP sender does not assume loss on the\n   first or second duplicate\
    \ ACK, but waits for three duplicate ACKs to\n   account for minor packet reordering.\
    \  However, the use of this\n   constant threshold of duplicate ACKs has several\
    \ problems that can be\n   mitigated with a dynamic threshold.\n   The following\
    \ is an example of TCP's behavior:\n     + TCP A is the data sender, and TCP B\
    \ is the data receiver.\n     + TCP A sends 10 segments, each consisting of a\
    \ single data byte\n       (i.e., transmits bytes 1-10 in segments 1-10).\n  \
    \   + Assume segment 3 is dropped in the network.\n     + TCP B cumulatively acknowledges\
    \ segments 1 and 2, making the\n       cumulative ACK transmitted to the sender\
    \ 3 (the next expected\n       sequence number).  (Note: TCP B may generate one\
    \ or two ACKs,\n       depending on whether delayed ACKs [RFC1122, RFC2581] are\n\
    \       employed.)\n     + The arrival of segments 4-10 at TCP B will each trigger\
    \ the\n       transmission of a cumulative ACK for sequence number 3.  (Note:\n\
    \       [RFC2581] recommends that delayed ACKs not be used when the ACK\n    \
    \   is triggered by an out-of-order segment.)\n     + When TCP A receives the\
    \ third duplicate ACK (or fourth ACK\n       overall) for sequence number 3, TCP\
    \ A will retransmit\n       segment 3 and reduce the sending rate by roughly half\
    \ (see\n       [RFC2581] for specifics on the congestion control state\n     \
    \  adjustments).\n   Alternatively, suppose segment 3 was not dropped by the network,\
    \ but\n   rather delayed such that segment 3 arrives at TCP B after segment 10.\n\
    \   The above scenario will play out in precisely the same manner\n   insomuch\
    \ as a retransmission of segment 3 will be triggered.  In\n   other words, TCP\
    \ is not capable of disambiguating this reordering\n   event from a segment loss,\
    \ resulting in an unnecessary retransmission\n   and rate reduction.\n   The following\
    \ is the specific motivation behind making TCP robust to\n   reordered segments:\n\
    \     * A number of Internet measurement studies have shown that packet\n    \
    \   reordering is not a rare phenomenon [Pax97, BPS99, JIDKT03,\n       GPL04].\
    \  Further, the reordering can be well beyond that required\n       for fast retransmit\
    \ to be falsely triggered.\n     * [BA02, ZKFP03] show the negative performance\
    \ implications that\n       packet reordering has on current TCP.\n     * The\
    \ requirement imposed by TCP for almost in-order packet\n       delivery places\
    \ a constraint on the design of future technology.\n       Novel routing algorithms,\
    \ network components, link-layer\n       retransmission mechanisms, and applications\
    \ could all be looked\n       at with a fresh perspective if TCP were to be more\
    \ robust to\n       segment reordering.  For instance, high-speed packet switches\n\
    \       could cause resequencing of packets if TCP were more robust.\n       There\
    \ has been work proposed in the literature explicitly to\n       ensure that packet\
    \ ordering is maintained in such switches (e.g.,\n       [KM02]).  Also, link-layer\
    \ mechanisms that attempt to recover\n       from packet corruption by retransmitting\
    \ could be allowed to\n       reorder packets, and thus increase the chances of\
    \ local loss\n       repair rather than rely on TCP to repair the loss (and,\n\
    \       needlessly reduce its sending rate).  Additional examples include\n  \
    \     multi-path routing, high-delay satellite links, and some of the\n      \
    \ schemes proposed for a differentiated services architecture.  By\n       making\
    \ TCP more robust to non-congestion events, TCP-NCR may open\n       the design\
    \ space of the future Internet components.\n   In this document, we specify a\
    \ set of TCP sender modifications to\n   provide Non-Congestion Robustness (NCR)\
    \ to TCP.  In particular, these\n   changes are built on top of TCP with selective\
    \ acknowledgments\n   (SACKs) [RFC2018] and the SACK-based loss recovery scheme\
    \ given in\n   [RFC3517], since SACK is widely deployed at this point ([MAF05]\n\
    \   indicates that 68% of web servers and 88% of web clients utilize SACK\n  \
    \ as of spring 2004).\n   Note that the TCP-NCR algorithm provided in this document\
    \ could be\n   easily adapted to SCTP [RFC2960] since SCTP uses congestion control\n\
    \   algorithms similar to TCP's (and thus has the same reordering\n   robustness\
    \ issues).\n   As noted in several places in the remainder of this document, we\n\
    \   consider TCP-NCR experimental in that more experience with the\n   techniques\
    \ is required before TCP-NCR should be used on a large scale\n   on the Internet.\
    \  We encourage implementation and experimentation\n   with TCP-NCR in the hopes\
    \ of gaining an understanding of its\n   suitability for wide-scale deployment.\n\
    \   The remainder of this document is organized as follows.  Section 2\n   provides\
    \ a high-level description of the TCP-NCR mechanisms.  In\n   Section 3, we specify\
    \ the TCP-NCR algorithm.  Section 4 provides a\n   brief overview of the benefits\
    \ of TCP-NCR, while Section 5 discusses\n   the drawbacks.  Section 6 discusses\
    \ related work.  Section 7\n   discusses security concerns.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n   Readers should be familiar with the TCP terminology (e.g.,\n\
    \   FlightSize, Pipe) given in [RFC2581] and [RFC3517].\n"
- title: 2.  NCR Description
  contents:
  - "2.  NCR Description\n   As discussed above, in the face of packet reordering,\
    \ three duplicate\n   ACKs may not be enough to disambiguate loss from reordering.\
    \  In this\n   section we provide a non-normative sketch of TCP-NCR.  The detailed\n\
    \   algorithms for implementing Non-Congestion Robustness for TCP are\n   presented\
    \ in the next section.\n   The general idea behind TCP-NCR is to increase the\
    \ threshold used to\n   trigger a fast retransmission from the current fixed value\
    \ of three\n   duplicate ACKs [RFC2581] to approximately a congestion window of\
    \ data\n   having left the network (but not less than the currently standardized\n\
    \   value of three duplicate ACKs).  Since cwnd represents the amount of\n   data\
    \ a TCP flow can transmit in one round-trip time (RTT), waiting to\n   receive\
    \ notice that cwnd bytes have left the network before deciding\n   whether the\
    \ root cause is loss or reordering imposes a delay of\n   roughly one RTT on both\
    \ the retransmission and the congestion control\n   response.  The appropriate\
    \ choice for a new value of the threshold is\n   essentially a trade-off between\
    \ making the best decision regarding\n   the cause of the duplicate ACKs and responsiveness.\
    \  The choice to\n   trigger a retransmission only after a cwnd's worth of data\
    \ is known\n   to have left the network represents roughly the largest amount\
    \ of\n   time a TCP can wait before the (often costly) retransmission timeout\n\
    \   may be triggered.  Therefore, the algorithm described in this\n   document\
    \ attempts to make the best decision possible at the expense\n   of timeliness.\n\
    \   Simply increasing the threshold before retransmitting a segment can\n   make\
    \ TCP brittle to packet loss or ACK loss since such loss reduces\n   the number\
    \ of duplicate ACKs that will arrive at the sender from the\n   receiver.  For\
    \ instance, if the cwnd is 10 segments and one segment\n   is lost, a duplicate\
    \ ACK threshold of 10 will never be met because\n   duplicate ACKs corresponding\
    \ to at most 9 segments will arrive at the\n   sender.  To offset the issue of\
    \ loss, we extend TCP's Limited\n   Transmit [RFC3042] scheme to allow for the\
    \ sending of new data during\n   the period when the TCP sender is disambiguating\
    \ loss and reordering.\n   This new data serves to increase the likelihood that\
    \ enough duplicate\n   ACKs arrive at the sender to trigger loss recovery if it\
    \ is\n   appropriate.\n   Note that TCP tightly couples reliability and congestion\
    \ control:\n   when a segment is declared lost, a retransmission is triggered,\
    \ and a\n   change to the sending rate is also made on the assumption that the\n\
    \   drop is due to resource contention [RFC2581].  Therefore, simply by\n   changing\
    \ the retransmission trigger, the congestion control response\n   is also changed.\
    \  However, we lack experience on the Internet as to\n   whether delaying the\
    \ point that a rate reduction takes place is\n   appropriate for wide-scale deployment.\
    \  Therefore, the Extended\n   Limited Transmit mechanism proposed in this document\
    \ offers two\n   variants for experimentation.\n   The first Extended Limited\
    \ Transmit variant, Careful Limited\n   Transmit, calls for the transmission of\
    \ one previously unsent\n   segment, in response to duplicate acknowledgments,\
    \ for every two\n   segments that are known to have left the network.  This effectively\n\
    \   halves the sending rate, since normal TCP operation calls for the\n   sending\
    \ of one segment for every segment that has left the network.\n   Further, the\
    \ halving starts immediately and is not delayed until a\n   retransmission is\
    \ triggered.  In the case of packet reordering (i.e.,\n   not segment loss), the\
    \ congestion control state is restored to its\n   previous state when reordering\
    \ is determined.\n   The second variant, Aggressive Limited Transmit, calls for\n\
    \   transmitting one previously unsent data segment, in response to\n   duplicate\
    \ acknowledgments, for every segment known to have left the\n   network.  With\
    \ this variant, while waiting to disambiguate the loss\n   from a reordering event,\
    \ ACK-clocked transmission continues at\n   roughly the same rate as before the\
    \ event started.  Retransmission\n   and the sending rate reduction happen per\
    \ [RFC2581, RFC3517], albeit\n   with the delayed threshold described above. \
    \ Although this approach\n   delays legitimate rate reductions (possibly slightly\
    \ and temporarily\n   aggravating overall congestion on the network), the scheme\
    \ has the\n   advantage of not reducing the transmission rate in the face of\n\
    \   segment reordering.\n   Which of the two Extended Limited Transmit variants\
    \ is best for use\n   on the Internet is an open question.\n"
- title: 3.  Algorithm
  contents:
  - "3.  Algorithm\n   The TCP-NCR modifications make two fundamental changes to the\
    \ way\n   [RFC3517] currently operates, as follows.\n   First, the trigger for\
    \ retransmitting a segment is changed from three\n   duplicate ACKs [RFC2581,\
    \ RFC3517] to indications that a congestion\n   window's worth of data has left\
    \ the network.  Second, TCP-NCR\n   decouples initial congestion control decisions\
    \ from retransmission\n   decisions, in some cases delaying congestion control\
    \ changes relative\n   to TCP's current behavior as defined in [RFC2581].  The\
    \ algorithm\n   provides two alternatives for extending Limited Transmit.  The\
    \ two\n   variants of extended Limited Transmit are:\n       Careful Limited Transmit\n\
    \        This variant calls for reducing the sending rate at\n        approximately\
    \ the same time [RFC2581] implementations reduce\n        the congestion window,\
    \ while at the same time withholding a\n        retransmission (and the final\
    \ congestion determination) for\n        approximately one RTT.\n       Aggressive\
    \ Limited Transmit\n        This variant calls for maintaining the sending rate\
    \ in the\n        face of duplicate ACKs until TCP concludes that a segment is\n\
    \        lost and needs to be retransmitted (which TCP-NCR delays by\n       \
    \ one RTT when compared with current loss recovery schemes).\n   A TCP-NCR implementation\
    \ MUST use either Careful Limited Transmit or\n   Aggressive Limited Transmit.\n\
    \   A constant MUST be set, depending on which variant of extended\n   Limited\
    \ Transmit is used, as follows:\n       Careful Limited Transmit\n        LT_F\
    \ = 2/3\n       Aggressive Limited Transmit\n        LT_F = 1/2\n   This constant\
    \ reflects the fraction of outstanding data (including\n   data sent during Extended\
    \ Limited Transmit) that must be SACKed\n   before a retransmission is triggered.\
    \  Since Aggressive Limited\n   Transmit sends a new segment for every segment\
    \ known to have left the\n   network, a total of roughly cwnd segments will be\
    \ sent during\n   Aggressive Limited Transmit, and therefore ideally a total of\
    \ roughly\n   2*cwnd segments will be outstanding when a retransmission is\n \
    \  triggered.  The duplicate ACK threshold is then set to LT_F = 1/2 of\n   2*cwnd\
    \ (or about 1 RTT worth of data).  The factor is different for\n   Careful Limited\
    \ Transmit because the sender only transmits one new\n   segment for every two\
    \ segments that are SACKed and therefore will\n   ideally have a total of 1.5*cwnd\
    \ segments outstanding when the\n   retransmission is to be triggered.  Hence,\
    \ the required threshold is\n   LT_F=2/3 of 1.5*cwnd to delay the retransmission\
    \ by roughly 1 RTT.\n   There are situations whereby the sender cannot transmit\
    \ new data\n   during Extended Limited Transmit (e.g., lack of data from the\n\
    \   application, receiver's advertised window limit).  These situations\n   can\
    \ lead to the problems discussed in the last section when a TCP\n   does not employ\
    \ Extended Limited Transmit and is starved for ACKs.\n   Therefore, TCP-NCR adapts\
    \ the duplicate ACK threshold on each SACK\n   arrival to be as robust as possible\
    \ given the actual amount of data\n   that has been transmitted, or roughly LT_F\
    \ times the number of\n   outstanding segments.\n   The TCP-NCR modifications\
    \ specified in this document lend themselves\n   to incremental deployment.  Only\
    \ the TCP implementation on the sender\n   side requires modification (assuming\
    \ both hosts support SACK).  The\n   changes themselves are modest.  However,\
    \ as will be discussed below,\n   availability of additional buffer space at the\
    \ receiver will help\n   maximize the benefits of using TCP-NCR but is not strictly\
    \ necessary.\n   The following algorithms depend on the notions provided by [RFC3517],\n\
    \   and we assume the reader is familiar with the terminology given in\n   [RFC3517].\
    \  The TCP-NCR algorithm can be adapted to alternate SACK-\n   based loss recovery\
    \ schemes.  [BR04, BSRV04] outline non-SACK-based\n   algorithms; however, we\
    \ do not specify those algorithms in this\n   document and do not recommend them\
    \ due to both the complexity and\n   security implications of having only a gross\
    \ understanding of the\n   number of outstanding segments in the network.\n  \
    \ A TCP connection using the Nagle algorithm [RFC896, RFC1122] MAY\n   employ\
    \ the TCP-NCR algorithm.  If a TCP implementation does implement\n   TCP-NCR,\
    \ the implementation MUST follow the various specifications\n   provided in Sections\
    \ 3.1 - 3.4.  If the Nagle algorithm is not being\n   used, there is no way to\
    \ accurately calculate the number of\n   outstanding segments in the network (and,\
    \ therefore, no good way to\n   derive an appropriate duplicate ACK threshold)\
    \ without adding state\n   to the TCP sender.  A TCP connection that does not\
    \ employ the Nagle\n   algorithm SHOULD NOT use TCP-NCR.  We envision that NCR\
    \ could be\n   adapted to an implementation that carefully tracks the sequence\n\
    \   numbers transmitted in each segment.  However, we leave this as\n   future\
    \ work.\n"
- title: 3.1.  Initialization
  contents:
  - "3.1.  Initialization\n   When entering a period of loss/reordering detection\
    \ and Extended\n   Limited Transmit, a TCP-NCR MUST initialize several state variables.\n\
    \   A TCP MUST enter Extended Limited Transmit upon receiving the first\n   ACK\
    \ with a SACK block after the reception of an ACK that (a) did not\n   contain\
    \ SACK information and (b) did increase the connection's\n   cumulative ACK point.\
    \  The initializations are:\n   (I.1) The TCP MUST save the current FlightSize.\n\
    \         FlightSizePrev = FlightSize\n   (I.2) The TCP MUST set a variable for\
    \ tracking the number of\n         segments for which an ACK does not trigger\
    \ a transmission\n         during Careful Limited Transmit.\n         Skipped\
    \ = 0\n         (Note: Skipped is not used during Aggressive Limited\n       \
    \  Transmit.)\n   (I.3) The TCP MUST set DupThresh (from [RFC3517]) based on the\n\
    \         current FlightSize.\n         DupThresh = max (LT_F * (FlightSize /\
    \ SMSS),3)\n         Note: We keep the lower bound of DupThresh = 3 from\n   \
    \      [RFC2581, RFC3517].\n   In addition to the above steps, the incoming ACK\
    \ MUST be processed\n   with the E series of steps in Section 3.3.\n"
- title: 3.2.  Terminating Extended Limited Transmit and Preventing Bursts
  contents:
  - "3.2.  Terminating Extended Limited Transmit and Preventing Bursts\n   Extended\
    \ Limited Transmit MUST be terminated at the start of loss\n   recovery as outlined\
    \ in Section 3.4.\n   The arrival of an ACK that advances the cumulative ACK point\
    \ while in\n   Extended Limited Transmit, but before loss recovery is triggered,\n\
    \   signals that a series of duplicate ACKs was caused by reordering and\n   not\
    \ congestion.  Therefore, the receipt of an ACK that extends the\n   cumulative\
    \ ACK point MUST terminate Extended Limited Transmit.  As\n   described below\
    \ (in (T.4)), an ACK that extends the cumulative ACK\n   point and *also* contains\
    \ SACK information will also trigger the\n   beginning of a new Extended Limited\
    \ Transmit phase.\n   Upon the termination of Extended Limited Transmit, and especially\n\
    \   when using the Careful variant, TCP-NCR may be in a situation where\n   the\
    \ entire cwnd is not being utilized, and therefore TCP-NCR will be\n   prone to\
    \ transmitting a burst of segments into the network.\n   Therefore, to mitigate\
    \ this bursting when a TCP-NCR in the Extended\n   Limited Transmit phase receives\
    \ an ACK that updates the cumulative\n   ACK point (regardless of whether the\
    \ ACK contains SACK information),\n   the following steps MUST be taken:\n   (T.1)\
    \ A TCP MUST reset cwnd to:\n         cwnd = min (FlightSize + SMSS,FlightSizePrev)\n\
    \         This step ensures that cwnd is not grossly larger than the\n       \
    \  amount of data outstanding, a situation that would cause a\n         line rate\
    \ burst.\n   (T.2) A TCP MUST set ssthresh to:\n         ssthresh = FlightSizePrev\n\
    \         This step provides TCP-NCR with a sense of \"history\".  If step\n \
    \        (T.1) reduces cwnd below FlightSizePrev, this step ensures that\n   \
    \      TCP-NCR will slow start back to the operating point in effect\n       \
    \  before Extended Limited Transmit.\n   (T.3) A TCP is now permitted to transmit\
    \ previously unsent data as\n         allowed by cwnd, FlightSize, application\
    \ data availability, and\n         the receiver's advertised window.\n   (T.4)\
    \ When an incoming ACK extends the cumulative ACK point and also\n         contains\
    \ SACK information, the initializations in steps (I.2)\n         and (I.3) from\
    \ Section 3.1 MUST be taken (but step (I.1) MUST\n         NOT be executed) to\
    \ re-start Extended Limited Transmit.  In\n         addition, the series of steps\
    \ in Section 3.3 (the \"E\" steps)\n         MUST be taken.\n"
- title: 3.3.  Extended Limited Transmit
  contents:
  - "3.3.  Extended Limited Transmit\n   On each ACK containing SACK information that\
    \ arrives after TCP-NCR\n   has entered the Extended Limited Transmit phase (as\
    \ outlined in\n   Section 3.1) and before Extended Limited Transmit terminates,\
    \ the\n   sender MUST use the following procedure.\n   (E.1) The SetPipe () procedure\
    \ from [RFC3517] MUST be used to set\n         the \"pipe\" variable (which represents\
    \ the number of bytes\n         still considered \"in the network\").  Note: the\
    \ current value\n         of DupThresh MUST be used by SetPipe () to produce an\
    \ accurate\n         assessment of the amount of data still considered in the\n\
    \         network.\n   (E.2) If the comparison in equation (1), below, holds and\
    \ there are\n         SMSS bytes of previously unsent data available for\n   \
    \      transmission, then the sender MUST transmit one segment of SMSS\n     \
    \    bytes.\n           (pipe + Skipped) <= (FlightSizePrev - SMSS)          \
    \    (1)\n         If the comparison in equation (1) does not hold or no new data\n\
    \         can be transmitted (due to lack of data from the application\n     \
    \    or the advertised window limit), skip to step (E.6).\n   (E.3) Pipe MUST\
    \ be incremented by SMSS bytes.\n   (E.4) If using Careful Limited Transmit, Skipped\
    \ MUST be incremented\n         by SMSS bytes to ensure that the next SMSS bytes\
    \ of SACKed data\n         processed does not trigger a Limited Transmit transmission\n\
    \         (since the goal of Careful Limited Transmit is to send upon\n      \
    \   receipt of every second duplicate ACK).\n   (E.5) A TCP MUST return to step\
    \ (E.2) to ensure that as many bytes\n         as are appropriate are transmitted.\
    \  This provides robustness\n         to ACK loss that can be (largely) compensated\
    \ for using SACK\n         information.\n   (E.6) DupThresh MUST be reset via:\n\
    \           DupThresh = max (LT_F * (FlightSize / SMSS),3)\n         where FlightSize\
    \ is the total number of bytes that have not\n         been cumulatively acknowledged\
    \ (which is different from\n         \"pipe\").\n"
- title: 3.4.  Entering Loss Recovery
  contents:
  - "3.4.  Entering Loss Recovery\n   When a segment is deemed lost via the algorithms\
    \ in [RFC3517],\n   Extended Limited Transmit MUST be terminated, leaving the\
    \ algorithms\n   in [RFC3517] to govern TCP's behavior.  One slight change to\n\
    \   [RFC3517] MUST be made, however.  In Section 5, step (2) of [RFC3517]\n  \
    \ MUST be changed to:\n       (2) ssthresh = cwnd = (FlightSizePrev / 2)\n   This\
    \ ensures that the congestion control modifications are made with\n   respect\
    \ to the amount of data in the network before FlightSize was\n   increased by\
    \ Extended Limited Transmit.\n   Note: Once the algorithm in [RFC3517] takes over\
    \ from Extended\n   Limited Transmit, the DupThresh value MUST be held constant\
    \ until the\n   loss recovery phase is terminated.\n"
- title: 4.  Advantages
  contents:
  - "4.  Advantages\n   The major advantages of TCP-NCR are twofold.  As discussed\
    \ in Section\n   1, TCP-NCR will open up the design space for network applications\
    \ and\n   components that are currently constrained by TCP's lack of robustness\n\
    \   to packet reordering.  The second advantage is in terms of an\n   increase\
    \ in TCP performance.\n   [BR04] presents ns-2 [NS-2] simulations of a pre-cursor\
    \ to the TCP-\n   NCR algorithm specified in this document, called TCP-DCR (Delayed\n\
    \   Congestion Response).  The paper shows that TCP-DCR aids performance\n   in\
    \ comparison to unmodified TCP in the presence of packet reordering.\n   In addition,\
    \ the extended version of [BR04] presents results based on\n   emulations involving\
    \ Linux (kernel 2.4.24).  These results show that\n   the performance of TCP-DCR\
    \ is similar to Linux's native\n   implementation that seeks to \"undo\" wrong\
    \ decisions according to\n   duplicate-SACK (DSACK) [RFC2883] feedback (similar\
    \ to the schemes\n   outlined in [ZKFP03]), when packets are reordered by less\
    \ than one\n   RTT.  The advantage of using TCP-DCR over the DSACK-based scheme\
    \ is\n   that the DSACK-based scheme tries to estimate the exact amount of\n \
    \  reordering in the network using fairly complex algorithms, whereas\n   TCP-DCR\
    \ achieves similar results with less complicated modifications.\n   In addition,\
    \ [BR04,BSRV04] illustrate the ability of TCP-DCR to allow\n   for the improvement\
    \ of other parts of the system.  For example, these\n   papers show that increasing\
    \ TCP's robustness to packet reordering\n   allows a novel wireless ARQ mechanism\
    \ to be added at the link-layer.\n   The added robustness of the link-layer to\
    \ channel errors, in turn,\n   increases TCP performance by not requiring TCP\
    \ to retransmit packets\n   that were dropped due to corruption (and thus also\
    \ prevents TCP from\n   needlessly reducing the sending rate when retransmitting\
    \ these\n   segments).\n"
- title: 5.  Disadvantages
  contents:
  - "5.  Disadvantages\n   Although all the changes outlined above are implemented\
    \ in the\n   sender, the receiver also potentially has a part to play.  In\n \
    \  particular, TCP-NCR increases the receiver's buffering requirement by\n   up\
    \ to an extra cwnd -- in the case of the TCP sender using Aggressive\n   Limited\
    \ Transmit and actual loss occurring in the network.\n   Therefore, to maximize\
    \ the benefits from TCP-NCR, receivers should\n   advertise a large window to\
    \ absorb the extra out-of-order traffic.\n   In the case that the additional buffer\
    \ requirements are not met, the\n   use of the above algorithm takes into account\
    \ the reduced advertised\n   window -- with a corresponding loss in robustness\
    \ to packet\n   reordering.\n   In addition, using TCP-NCR could delay the delivery\
    \ of data to the\n   application by up to one RTT because the fast retransmission\
    \ point is\n   delayed by roughly one RTT in TCP-NCR.  Applications that are\n\
    \   sensitive to such delays should turn off the TCP-NCR option.  For\n   instance,\
    \ a socket option could be introduced to allow applications\n   to control whether\
    \ NCR would be used for a particular connection.\n   Finally, the use of TCP-NCR\
    \ makes the recovery from congestion events\n   sluggish in comparison to the\
    \ standard reaction in [RFC2581].  [BR04,\n   BSRV04] show (via simulation) that\
    \ the delay in congestion response\n   has minimal impact on the connection itself\
    \ and the traffic sharing a\n   bottleneck.  [BBFS01] also indicates (again, via\
    \ simulation) that\n   \"slowly responsive\" congestion control may be safe for\
    \ deployment in\n   the Internet.  These studies suggest that schemes that slightly\
    \ delay\n   congestion control decisions may be reasonable; however, further\n\
    \   experimentation on the Internet is required to verify these results.\n"
- title: 6.  Related Work
  contents:
  - "6.  Related Work\n   Over the past few years, several solutions have been proposed\
    \ to\n   improve the performance of TCP in the face of segment reordering.\n \
    \  These schemes generally fall into one of two categories (with some\n   overlap):\
    \ mechanisms that try to prevent spurious retransmits from\n   happening and mechanisms\
    \ that try to detect spurious retransmits and\n   \"undo\" the needless congestion\
    \ control state changes that have been\n   taken.\n   [BA02,ZKFP03] attempt to\
    \ prevent segment reordering from triggering\n   spurious retransmits by using\
    \ various algorithms to approximate the\n   duplicate ACK threshold required to\
    \ disambiguate loss and reordering\n   over a given network path at a given time.\
    \  TCP-NCR similarly tries\n   to prevent spurious retransmits.  However, TCP-NCR\
    \ takes a simplified\n   approach compared to those in [BA02, ZKFP03], in that\
    \ TCP-NCR simply\n   delays retransmission by an amount based on the current cwnd\
    \ (in\n   comparison to standard TCP), while the other schemes use relatively\n\
    \   complex algorithms in an attempt to derive a more precise value for\n   DupThresh\
    \ that depends on the current patterns of packet reordering.\n   While TCP-NCR\
    \ offers simplicity, the other schemes may offer more\n   precision such that\
    \ applications would not be forced to wait as long\n   for their retransmissions.\
    \  Future work could be undertaken to\n   achieve robustness without needless\
    \ delay.\n   On the other hand, several schemes have been developed to detect\
    \ and\n   mitigate needless retransmissions after the fact.  [RFC3522, RFC3708,\n\
    \   BA02, RFC4015, RFC4138] present algorithms to detect spurious\n   retransmits\
    \ and mitigate the changes these events made to the\n   congestion control state.\
    \  TCP-NCR could be used in conjunction with\n   these algorithms, with TCP-NCR\
    \ attempting to prevent spurious\n   retransmits and some other scheme kicking\
    \ in if the prevention\n   failed.  In addition, note that TCP-NCR is concentrated\
    \ on preventing\n   spurious fast retransmits; some of the above algorithms also\
    \ attempt\n   to detect and mitigate spurious timeout-based retransmits.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   General attacks against the congestion control\
    \ of TCP are described\n   in [RFC2581].  SACK-based loss recovery for TCP [RFC3517]\
    \ mitigates\n   some of the duplicate ACK attacks against TCP's congestion control.\n\
    \   This document builds upon that work, and the Extended Limited\n   Transmit\
    \ algorithms specified in this document have been designed to\n   thwart the ACK\
    \ division problems that are described in [RFC3465].\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   Feedback from Lars Eggert, Ted Faber, Wesley Eddy, Gorry\
    \ Fairhurst,\n   Sally Floyd, Sara Landstrom, Nauzad Sadry, Pasi Sarolahti, Joe\
    \ Touch,\n   Nitin Vaidya, and the TCPM working group have contributed\n   significantly\
    \ to this document.  Our thanks to all!\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC793]  Postel, J., \"Transmission Control Protocol\"\
    , STD 7, RFC\n             793, September 1981.\n   [RFC2018] Mathis, M., Mahdavi,\
    \ J., Floyd, S., and A. Romanow, \"TCP\n             Selective Acknowledgement\
    \ Options\", RFC 2018, October 1996.\n   [RFC2119] Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2581] Allman, M., Paxson, V., and W. Stevens, \"TCP Congestion\n\
    \             Control\", RFC 2581, April 1999.\n   [RFC3042] Allman, M., Balakrishnan,\
    \ H., and S. Floyd, \"Enhancing\n             TCP's Loss Recovery Using Limited\
    \ Transmit\", RFC 3042,\n             January 2001.\n   [RFC3517] Blanton, E.,\
    \ Allman, M., Fall, K., and L. Wang, \"A\n             Conservative Selective\
    \ Acknowledgment (SACK)-based Loss\n             Recovery Algorithm for TCP\"\
    , RFC 3517, April 2003.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [BA02]    E. Blanton and M. Allman, \"On Making\
    \ TCP More Robust to\n             Packet Reordering,\" ACM Computer Communication\
    \ Review,\n             January 2002.\n   [BBFS01]  D. Bansal, H. Balakrishnan,\
    \ S. Floyd and S. Shenker,\n             \"Dynamic Behavior of Slowly Responsive\
    \ Congestion Control\n             Algorithms\", Proceedings of ACM SIGCOMM, Sep.\
    \ 2001.\n   [BPS99]   J. Bennett, C. Partridge, and N. Shectman, \"Packet\n  \
    \           reordering is not pathological network behavior,\" IEEE/ACM\n    \
    \         Transactions on Networking, December 1999.\n   [BR04]    Sumitha Bhandarkar\
    \ and A. L. Narasimha Reddy, \"TCP-DCR:\n             Making TCP Robust to Non-Congestion\
    \ Events\", In the\n             Proceedings of Networking 2004 conference, May\
    \ 2004.\n             Extended version available as tech report TAMU-ECE-2003-04.\n\
    \   [BSRV04]  Sumitha Bhandarkar, Nauzad Sadry, A. L. Narasimha Reddy and\n  \
    \           Nitin Vaidya, \"TCP-DCR: A Novel Protocol for Tolerating\n       \
    \      Wireless Channel Errors\", to appear in IEEE Transactions on\n        \
    \     Mobile Computing.\n   [GPL04]   Ladan Gharai, Colin Perkins and Tom Lehman,\
    \ \"Packet\n             Reordering, High Speed Networks and Transport Protocol\n\
    \             Performance\", ICCCN 2004, October 2004.\n   [Jac88]   V. Jacobson,\
    \ \"Congestion Avoidance and Control\", Computer\n             Communication Review,\
    \ vol. 18, no. 4, pp. 314-329, Aug.\n             1988.  ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z.\n\
    \   [JIDKT03] S. Jaiswal, G. Iannaccone, C. Diot, J. Kurose, and D.\n        \
    \     Towsley, \"Measurement and Classification of Out-of-Sequence\n         \
    \    Packets in a Tier-1 IP Backbone,\" Proceedings of IEEE\n             INFOCOM,\
    \ 2003.\n   [KM02]    I. Keslassy and N. McKeown, \"Maintaining packet order in\n\
    \             twostage switches,\" Proceedings of the IEEE Infocom, June\n   \
    \          2002\n   [MAF05]   A. Medina, M. Allman, S. Floyd.  Measuring the Evolution\
    \ of\n             Transport Protocols in the Internet.  ACM Computer\n      \
    \       Communication Review, 35(2), April 2005.\n   [NS-2]    ns-2 Network Simulator.\
    \ http://www.isi.edu/nsnam/\n   [Pax97]   V. Paxson, \"End-to-End Internet Packet\
    \ Dynamics,\"\n             Proceedings of ACM SIGCOMM, September 1997.\n   [RFC896]\
    \  Nagle, J., \"Congestion control in IP/TCP internetworks\",\n             RFC\
    \ 896, January 1984.\n   [RFC1122] Braden, R., \"Requirements for Internet Hosts\
    \ -\n             Communication Layers\", STD 3, RFC 1122, October 1989.\n   [RFC2883]\
    \ Floyd, S., Mahdavi, J., Mathis, M., and M. Podolsky, \"An\n             Extension\
    \ to the Selective Acknowledgement (SACK) Option\n             for TCP\", RFC\
    \ 2883, July 2000.\n   [RFC2960] R. Stewart, Q. Xie, K. Morneault, C. Sharp, H.\n\
    \             Schwarzbauer, T. Taylor, I. Rytina, M. Kalla, L. Zhang, V.\n   \
    \          Paxson.  Stream Control Transmission Protocol.  October\n         \
    \    2000.\n   [RFC3465] Allman, M., \"TCP Congestion Control with Appropriate\
    \ Byte\n             Counting (ABC)\", RFC 3465, February 2003.\n   [RFC3522]\
    \ Ludwig, R. and M. Meyer, \"The Eifel Detection Algorithm for\n             TCP\"\
    , RFC 3522, April 2003.\n   [RFC3708] Blanton, E. and M. Allman, \"Using TCP Duplicate\
    \ Selective\n             Acknowledgement (DSACKs) and Stream Control Transmission\n\
    \             Protocol (SCTP) Duplicate Transmission Sequence Numbers\n      \
    \       (TSNs) to Detect Spurious Retransmissions\", RFC 3708,\n             February\
    \ 2004.\n   [RFC4015] Ludwig, R. and A. Gurtov, \"The Eifel Response Algorithm\
    \ for\n             TCP\", RFC 4015, February 2005.\n   [RFC4138] Sarolahti, P.\
    \ and M. Kojo, \"Forward RTO-Recovery (F-RTO):\n             An Algorithm for\
    \ Detecting Spurious Retransmission Timeouts\n             with TCP and the Stream\
    \ Control Transmission Protocol\n             (SCTP)\", RFC 4138, August 2005.\n\
    \   [ZKFP03]  M. Zhang, B. Karp, S. Floyd, L. Peterson, \"RR-TCP: A\n        \
    \     Reordering-Robust TCP with DSACK\", in Proceedings of the\n            \
    \ Eleventh IEEE International Conference on Networking\n             Protocols\
    \ (ICNP 2003), Atlanta, GA, November, 2003.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sumitha Bhandarkar\n   Dept. of Elec. Engg.\n   214 ZACH\n\
    \   College Station, TX 77843-3128\n   Phone: (512) 468-8078\n   EMail: sumitha@tamu.edu\n\
    \   URL: http://students.cs.tamu.edu/sumitha/\n   A. L. Narasimha Reddy\n   Professor\n\
    \   Dept. of Elec. Engg.\n   315C WERC\n   College Station, TX 77843-3128\n  \
    \ Phone: (979) 845-7598\n   EMail: reddy@ee.tamu.edu\n   URL: http://ee.tamu.edu/~reddy/\n\
    \   Mark Allman\n   ICSI Center for Internet Research\n   1947 Center Street,\
    \ Suite 600\n   Berkeley, CA 94704-1198\n   Phone: (440) 235-1792\n   EMail: mallman@icir.org\n\
    \   URL: http://www.icir.org/mallman/\n   Ethan Blanton\n   Purdue University\
    \ Computer Science\n   305 North University Street\n   West Lafayette, IN  47907\n\
    \   EMail: eblanton@cs.purdue.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
