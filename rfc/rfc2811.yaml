- title: __initial_text__
  contents:
  - '                Internet Relay Chat: Channel Management

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   One of the most notable characteristics of the IRC (Internet Relay\n\
    \   Chat) protocol is to allow for users to be grouped in forums, called\n   channels,\
    \ providing a mean for multiple users to communicate\n   together.\n   There was\
    \ originally a unique type of channels, but with the years,\n   new types appeared\
    \ either as a response to a need, or for\n   experimental purposes.\n   This document\
    \ specifies how channels, their characteristics and\n   properties are managed\
    \ by IRC servers.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n         4.1.2  Channel Operator Status ...........................\
    \   8\n         4.1.3  Voice Privilege ...................................   8\n\
    \      4.2  Channel Flags ..........................................   8\n   \
    \      4.2.1  Anonymous Flag ....................................   8\n      \
    \   4.2.2  Invite Only Flag ..................................   8\n         4.2.3\
    \  Moderated Channel Flag ............................   9\n         4.2.4  No\
    \ Messages To Channel From Clients On The Outside    9\n         4.2.5  Quiet\
    \ Channel .....................................   9\n         4.2.6  Private and\
    \ Secret Channels .......................   9\n         4.2.7  Server Reop Flag\
    \ ..................................  10\n         4.2.8  Topic .............................................\
    \  10\n         4.2.9  User Limit ........................................  10\n\
    \         4.2.10  Channel Key ......................................  10\n   \
    \   4.3  Channel Access Control .................................  10\n      \
    \   4.3.1  Channel Ban and Exception .........................  11\n         4.3.2\
    \  Channel Invitation ................................  11\n   5.  Current Implementations\
    \ ....................................  11\n      5.1  Tracking Recently Used\
    \ Channels ........................  11\n      5.2  Safe Channels ..........................................\
    \  12\n         5.2.1  Channel Identifier ................................  12\n\
    \         5.2.2  Channel Delay .....................................  12\n   \
    \      5.2.3  Abuse Window ......................................  13\n      \
    \   5.2.4  Preserving Sanity In The Name Space ...............  13\n         5.2.5\
    \  Server Reop Mechanism .............................  13\n   6.  Current problems\
    \ ...........................................  14\n      6.1  Labels .................................................\
    \  14\n         6.1.1  Channel Delay .....................................  14\n\
    \         6.1.2  Safe Channels .....................................  15\n   \
    \   6.2  Mode Propagation Delays ................................  15\n      6.3\
    \  Collisions And Channel Modes ...........................  15\n      6.4  Resource\
    \ Exhaustion ....................................  16\n   7.  Security Considerations\
    \ ....................................  16\n      7.1  Access Control .........................................\
    \  16\n      7.2  Channel Privacy ........................................  16\n\
    \      7.3 Anonymity ...............................................  17\n   8.\
    \  Current support and availability ...........................  17\n   9.  Acknowledgements\
    \ ...........................................  17\n   10. References ................................................\
    \   18\n   11. Author's Address ..........................................   18\n\
    \   12. Full Copyright Statement ...................................  19\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document defines in detail on how channels are managed\
    \ by the\n   IRC servers and will be mostly useful to people working on\n   implementing\
    \ an IRC server.\n   While the concepts defined here are an important part of\
    \ IRC, they\n   remain non essential for implementing clients.  While the trend\
    \ seems\n   to be towards more and more complex and \"intelligent\" clients which\n\
    \   are able to take advantage of knowing the internal workings of\n   channels\
    \ to provide the users with a more friendly interface, simple\n   clients can\
    \ be implemented without reading this document.\n   Many of the concepts defined\
    \ here were designed with the IRC\n   architecture [IRC-ARCH] in mind and mostly\
    \ make sense in this\n   context.  However, many others could be applied to other\n\
    \   architectures in order to provide forums for a conferencing system.\n   Finally,\
    \ it is to be noted that IRC users may find some of the\n   following sections\
    \ of interest, in particular sections 2 (Channel\n   Characteristics) and 4 (Channel\
    \ Modes).\n"
- title: 2. Channel Characteristics
  contents:
  - "2. Channel Characteristics\n   A channel is a named group of one or more users\
    \ which will all\n   receive messages addressed to that channel.  A channel is\n\
    \   characterized by its name, properties and current members.\n"
- title: 2.1 Namespace
  contents:
  - "2.1 Namespace\n   Channels names are strings (beginning with a '&', '#', '+'\
    \ or '!'\n   character) of length up to fifty (50) characters.  Channel names\
    \ are\n   case insensitive.\n   Apart from the the requirement that the first\
    \ character being either\n   '&', '#', '+' or '!' (hereafter called \"channel\
    \ prefix\"). The only\n   restriction on a channel name is that it SHALL NOT contain\
    \ any spaces\n   (' '), a control G (^G or ASCII 7), a comma (',' which is used\
    \ as a\n   list item separator by the protocol).  Also, a colon (':') is used\
    \ as\n   a delimiter for the channel mask.  The exact syntax of a channel name\n\
    \   is defined in \"IRC Server Protocol\" [IRC-SERVER].\n   The use of different\
    \ prefixes effectively creates four (4) distinct\n   namespaces for channel names.\
    \  This is important because of the\n   protocol limitations regarding namespaces\
    \ (in general).  See section\n   6.1 (Labels) for more details on these limitations.\n"
- title: 2.2 Channel Scope
  contents:
  - "2.2 Channel Scope\n   A channel entity is known by one or more servers on the\
    \ IRC network.\n   A user can only become member of a channel known by the server\
    \ to\n   which the user is directly connected.  The list of servers which know\n\
    \   of the existence of a particular channel MUST be a contiguous part of\n  \
    \ the IRC network, in order for the messages addressed to the channel\n   to be\
    \ sent to all the channel members.\n   Channels with '&' as prefix are local to\
    \ the server where they are\n   created.\n   Other channels are known to one (1)\
    \ or more servers that are\n   connected to the network, depending on the channel\
    \ mask:\n      If there is no channel mask, then the channel is known to all\n\
    \      the servers.\n      If there is a channel mask, then the channel MUST only\
    \ be known\n      to servers which has a local user on the channel, and to its\n\
    \      neighbours if the mask matches both the local and neighbouring\n      server\
    \ names.  Since other servers have absolutely no knowledge of\n      the existence\
    \ of such a channel, the area formed by the servers\n      having a name matching\
    \ the mask has to be contiguous for the\n      channel to be known by all these\
    \ servers.  Channel masks are best\n      used in conjunction with server hostmasking\
    \ [IRC-SERVER].\n"
- title: 2.3 Channel Properties
  contents:
  - "2.3 Channel Properties\n   Each channel has its own properties, which are defined\
    \ by channel\n   modes.  Channel modes can be manipulated by the channel members.\
    \  The\n   modes affect the way servers manage the channels.\n   Channels with\
    \ '+' as prefix do not support channel modes.  This means\n   that all the modes\
    \ are unset, with the exception of the 't' channel\n   flag which is set.\n"
- title: 2.4 Privileged Channel Members
  contents:
  - "2.4 Privileged Channel Members\n   In order for the channel members to keep some\
    \ control over a channel,\n   and some kind of sanity, some channel members are\
    \ privileged.  Only\n   these members are allowed to perform the following actions\
    \ on the\n   channel:\n        INVITE  - Invite a client to an invite-only channel\
    \ (mode +i)\n        KICK    - Eject a client from the channel\n        MODE \
    \   - Change the channel's mode, as well as\n                  members' privileges\n\
    \        PRIVMSG - Sending messages to the channel (mode +n, +m, +v)\n       \
    \ TOPIC   - Change the channel topic in a mode +t channel\n"
- title: 2.4.1 Channel Operators
  contents:
  - "2.4.1 Channel Operators\n   The channel operators (also referred to as a \"chop\"\
    \ or \"chanop\") on a\n   given channel are considered to 'own' that channel.\
    \  Ownership of a\n   channel is shared among channel operators.\n   Channel operators\
    \ are identified by the '@' symbol next to their\n   nickname whenever it is associated\
    \ with a channel (i.e., replies to\n   the NAMES, WHO and WHOIS commands).\n \
    \  Since channels starting with the character '+' as prefix do not\n   support\
    \ channel modes, no member can therefore have the status of\n   channel operator.\n"
- title: 2.4.2 Channel Creator
  contents:
  - "2.4.2 Channel Creator\n   A user who creates a channel with the character '!'\
    \ as prefix is\n   identified as the \"channel creator\".  Upon creation of the\
    \ channel,\n   this user is also given channel operator status.\n   In recognition\
    \ of this status, the channel creators are endowed with\n   the ability to toggle\
    \ certain modes of the channel which channel\n   operators may not manipulate.\n\
    \   A \"channel creator\" can be distinguished from a channel operator by\n  \
    \ issuing the proper MODE command.  See the \"IRC Client Protocol\"\n   [IRC-CLIENT]\
    \ for more information on this topic.\n"
- title: 3. Channel lifetime
  contents:
  - "3. Channel lifetime\n   In regard to the lifetime of a channel, there are typically\
    \ two\n   groups of channels: standard channels which prefix is either '&', '#'\n\
    \   or '+', and \"safe channels\" which prefix is '!'.\n"
- title: 3.1 Standard channels
  contents:
  - "3.1 Standard channels\n   These channels are created implicitly when the first\
    \ user joins it,\n   and cease to exist when the last user leaves it.  While the\
    \ channel\n   exists, any client can reference the channel using the name of the\n\
    \   channel.\n   The user creating a channel automatically becomes channel operator\n\
    \   with the notable exception of channels which name is prefixed by the\n   character\
    \ '+', see section 4 (Channel modes).  See section 2.4.1\n   (Channel Operators)\
    \ for more details on this title.\n   In order to avoid the creation of duplicate\
    \ channels (typically when\n   the IRC network becomes disjoint because of a split\
    \ between two\n   servers), channel names SHOULD NOT be allowed to be reused by\
    \ a user\n   if a channel operator (See Section 2.4.1 (Channel Operators)) has\n\
    \   recently left the channel because of a network split.  If this\n   happens,\
    \ the channel name is temporarily unavailable.  The duration\n   while a channel\
    \ remains unavailable should be tuned on a per IRC\n   network basis.  It is important\
    \ to note that this prevents local\n   users from creating a channel using the\
    \ same name, but does not\n   prevent the channel to be recreated by a remote\
    \ user. The latter\n   typically happens when the IRC network rejoins.  Obviously,\
    \ this\n   mechanism only makes sense for channels which name begins with the\n\
    \   character '#', but MAY be used for channels which name begins with\n   the\
    \ character '+'.  This mechanism is commonly known as \"Channel\n   Delay\".\n"
- title: 3.2 Safe Channels
  contents:
  - "3.2 Safe Channels\n   Unlike other channels, \"safe channels\" are not implicitly\
    \ created.  A\n   user wishing to create such a channel MUST request the creation\
    \ by\n   sending a special JOIN command to the server in which the channel\n \
    \  identifier (then unknown) is replaced by the character '!'.  The\n   creation\
    \ process for this type of channel is strictly controlled.\n   The user only chooses\
    \ part of the channel name (known as the channel\n   \"short name\"), the server\
    \ automatically prepends the user provided\n   name with a channel identifier\
    \ consisting of five (5) characters.\n   The channel name resulting from the combination\
    \ of these two elements\n   is unique, making the channel safe from abuses based\
    \ on network\n   splits.\n   The user who creates such a channel automatically\
    \ becomes \"channel\n   creator\".  See section 2.4.2 (Channel Creator) for more\
    \ details on\n   this title.\n   A server MUST NOT allow the creation of a new\
    \ channel if another\n   channel with the same short name exists; or if another\
    \ channel with\n   the same short name existed recently AND any of its member(s)\
    \ left\n   because of a network split.  Such channel ceases to exist after last\n\
    \   user leaves AND no other member recently left the channel because of\n   a\
    \ network split.\n   Unlike the mechanism described in section 5.2.2 (Channel\
    \ Delay), in\n   this case, channel names do not become unavailable: these channels\n\
    \   may continue to exist after the last user left.  Only the user\n   creating\
    \ the channel becomes \"channel creator\", users joining an\n   existing empty\
    \ channel do not automatically become \"channel creator\"\n   nor \"channel operator\"\
    .\n   To ensure the uniqueness of the channel names, the channel identifier\n\
    \   created by the server MUST follow specific rules.  For more details\n   on\
    \ this, see section 5.2.1 (Channel Identifier).\n"
- title: 4. Channel Modes
  contents:
  - "4. Channel Modes\n   The various modes available for channels are as follows:\n\
    \        O - give \"channel creator\" status;\n        o - give/take channel operator\
    \ privilege;\n        v - give/take the voice privilege;\n        a - toggle the\
    \ anonymous channel flag;\n        i - toggle the invite-only channel flag;\n\
    \        m - toggle the moderated channel;\n        n - toggle the no messages\
    \ to channel from clients on the\n            outside;\n        q - toggle the\
    \ quiet channel flag;\n        p - toggle the private channel flag;\n        s\
    \ - toggle the secret channel flag;\n        r - toggle the server reop channel\
    \ flag;\n        t - toggle the topic settable by channel operator only flag;\n\
    \        k - set/remove the channel key (password);\n        l - set/remove the\
    \ user limit to channel;\n        b - set/remove ban mask to keep users out;\n\
    \        e - set/remove an exception mask to override a ban mask;\n        I -\
    \ set/remove an invitation mask to automatically override\n            the invite-only\
    \ flag;\n   Unless mentioned otherwise below, all these modes can be manipulated\n\
    \   by \"channel operators\" by using the MODE command defined in \"IRC\n   Client\
    \ Protocol\" [IRC-CLIENT].\n"
- title: 4.1 Member Status
  contents:
  - "4.1 Member Status\n   The modes in this category take a channel member nickname\
    \ as argument\n   and affect the privileges given to this user.\n"
- title: 4.1.1 "Channel Creator" Status
  contents:
  - "4.1.1 \"Channel Creator\" Status\n   The mode 'O' is only used in conjunction\
    \ with \"safe channels\" and\n   SHALL NOT be manipulated by users.  Servers use\
    \ it to give the user\n   creating the channel the status of \"channel creator\"\
    .\n"
- title: 4.1.2 Channel Operator Status
  contents:
  - "4.1.2 Channel Operator Status\n   The mode 'o' is used to toggle the operator\
    \ status of a channel\n   member.\n"
- title: 4.1.3 Voice Privilege
  contents:
  - "4.1.3 Voice Privilege\n   The mode 'v' is used to give and take voice privilege\
    \ to/from a\n   channel member.  Users with this privilege can talk on moderated\n\
    \   channels.  (See section 4.2.3 (Moderated Channel Flag).\n"
- title: 4.2 Channel Flags
  contents:
  - "4.2 Channel Flags\n   The modes in this category are used to define properties\
    \ which\n   affects how channels operate.\n"
- title: 4.2.1 Anonymous Flag
  contents:
  - "4.2.1 Anonymous Flag\n   The channel flag 'a' defines an anonymous channel. \
    \ This means that\n   when a message sent to the channel is sent by the server\
    \ to users,\n   and the origin is a user, then it MUST be masked.  To mask the\n\
    \   message, the origin is changed to \"anonymous!anonymous@anonymous.\"\n   (e.g.,\
    \ a user with the nickname \"anonymous\", the username \"anonymous\"\n   and from\
    \ a host called \"anonymous.\").  Because of this, servers MUST\n   forbid users\
    \ from using the nickname \"anonymous\".  Servers MUST also\n   NOT send QUIT\
    \ messages for users leaving such channels to the other\n   channel members but\
    \ generate a PART message instead.\n   On channels with the character '&' as prefix,\
    \ this flag MAY be\n   toggled by channel operators, but on channels with the\
    \ character '!'\n   as prefix, this flag can be set (but SHALL NOT be unset) by\
    \ the\n   \"channel creator\" only.  This flag MUST NOT be made available on\n\
    \   other types of channels.\n   Replies to the WHOIS, WHO and NAMES commands\
    \ MUST NOT reveal the\n   presence of other users on channels for which the anonymous\
    \ flag is\n   set.\n"
- title: 4.2.2 Invite Only Flag
  contents:
  - "4.2.2 Invite Only Flag\n   When the channel flag 'i' is set, new members are\
    \ only accepted if\n   their mask matches Invite-list (See section 4.3.2) or they\
    \ have been\n   invited by a channel operator.  This flag also restricts the usage\
    \ of\n   the INVITE command (See \"IRC Client Protocol\" [IRC-CLIENT]) to\n  \
    \ channel operators.\n"
- title: 4.2.3 Moderated Channel Flag
  contents:
  - "4.2.3 Moderated Channel Flag\n   The channel flag 'm' is used to control who\
    \ may speak on a channel.\n   When it is set, only channel operators, and members\
    \ who have been\n   given the voice privilege may send messages to the channel.\n\
    \      This flag only affects users.\n"
- title: 4.2.4 No Messages To Channel From Clients On The Outside
  contents:
  - "4.2.4 No Messages To Channel From Clients On The Outside\n   When the channel\
    \ flag 'n' is set, only channel members MAY send\n   messages to the channel.\n\
    \      This flag only affects users.\n"
- title: 4.2.5 Quiet Channel
  contents:
  - "4.2.5 Quiet Channel\n   The channel flag 'q' is for use by servers only.  When\
    \ set, it\n   restricts the type of data sent to users about the channel\n   operations:\
    \ other user joins, parts and nick changes are not sent.\n   From a user's point\
    \ of view, the channel contains only one user.\n   This is typically used to create\
    \ special local channels on which the\n   server sends notices related to its\
    \ operations.  This was used as a\n   more efficient and flexible way to replace\
    \ the user mode 's' defined\n   in RFC 1459 [IRC].\n"
- title: 4.2.6 Private and Secret Channels
  contents:
  - "4.2.6 Private and Secret Channels\n   The channel flag 'p' is used to mark a\
    \ channel \"private\" and the\n   channel flag 's' to mark a channel \"secret\"\
    .  Both properties are\n   similar and conceal the existence of the channel from\
    \ other users.\n   This means that there is no way of getting this channel's name\
    \ from\n   the server without being a member.  In other words, these channels\n\
    \   MUST be omitted from replies to queries like the WHOIS command.\n   When a\
    \ channel is \"secret\", in addition to the restriction above, the\n   server\
    \ will act as if the channel does not exist for queries like the\n   TOPIC, LIST,\
    \ NAMES commands.  Note that there is one exception to\n   this rule: servers\
    \ will correctly reply to the MODE command.\n   Finally, secret channels are not\
    \ accounted for in the reply to the\n   LUSERS command (See \"Internet Relay Chat:\
    \ Client Protocol\" [IRC-\n   CLIENT]) when the <mask> parameter is specified.\n\
    \   The channel flags 'p' and 's' MUST NOT both be set at the same time.\n   If\
    \ a MODE message originating from a server sets the flag 'p' and the\n   flag\
    \ 's' is already set for the channel, the change is silently\n   ignored.  This\
    \ should only happen during a split healing phase\n   (mentioned in the \"IRC\
    \ Server Protocol\" document [IRC-SERVER]).\n"
- title: 4.2.7 Server Reop Flag
  contents:
  - "4.2.7 Server Reop Flag\n   The channel flag 'r' is only available on channels\
    \ which name begins\n   with the character '!' and MAY only be toggled by the\
    \ \"channel\n   creator\".\n   This flag is used to prevent a channel from having\
    \ no channel\n   operator for an extended period of time.  When this flag is set,\
    \ any\n   channel that has lost all its channel operators for longer than the\n\
    \   \"reop delay\" period triggers a mechanism in servers to reop some or\n  \
    \ all of the channel inhabitants.  This mechanism is described more in\n   detail\
    \ in section 5.2.4 (Channel Reop Mechanism).\n"
- title: 4.2.8 Topic
  contents:
  - "4.2.8 Topic\n   The channel flag 't' is used to restrict the usage of the TOPIC\n\
    \   command to channel operators.\n"
- title: 4.2.9 User Limit
  contents:
  - "4.2.9 User Limit\n   A user limit may be set on channels by using the channel\
    \ flag 'l'.\n   When the limit is reached, servers MUST forbid their local users\
    \ to\n   join the channel.\n   The value of the limit MUST only be made available\
    \ to the channel\n   members in the reply sent by the server to a MODE query.\n"
- title: 4.2.10 Channel Key
  contents:
  - "4.2.10 Channel Key\n   When a channel key is set (by using the mode 'k'), servers\
    \ MUST\n   reject their local users request to join the channel unless this key\n\
    \   is given.\n   The channel key MUST only be made visible to the channel members\
    \ in\n   the reply sent by the server to a MODE query.\n"
- title: 4.3 Channel Access Control
  contents:
  - "4.3 Channel Access Control\n   The last category of modes is used to control\
    \ access to the channel,\n   they take a mask as argument.\n   In order to reduce\
    \ the size of the global database for control access\n   modes set for channels,\
    \ servers MAY put a maximum limit on the number\n   of such modes set for a particular\
    \ channel.  If such restriction is\n   imposed, it MUST only affect user requests.\
    \  The limit SHOULD be\n   homogeneous on a per IRC network basis.\n"
- title: 4.3.1 Channel Ban and Exception
  contents:
  - "4.3.1 Channel Ban and Exception\n   When a user requests to join a channel, his\
    \ local server checks if\n   the user's address matches any of the ban masks set\
    \ for the channel.\n   If a match is found, the user request is denied unless\
    \ the address\n   also matches an exception mask set for the channel.\n   Servers\
    \ MUST NOT allow a channel member who is banned from the\n   channel to speak\
    \ on the channel, unless this member is a channel\n   operator or has voice privilege.\
    \ (See Section 4.1.3 (Voice\n   Privilege)).\n   A user who is banned from a channel\
    \ and who carries an invitation\n   sent by a channel operator is allowed to join\
    \ the channel.\n"
- title: 4.3.2 Channel Invitation
  contents:
  - "4.3.2 Channel Invitation\n   For channels which have the invite-only flag set\
    \ (See Section 4.2.2\n   (Invite Only Flag)), users whose address matches an invitation\
    \ mask\n   set for the channel are allowed to join the channel without any\n \
    \  invitation.\n"
- title: 5. Current Implementations
  contents:
  - "5. Current Implementations\n   The only current implementation of these rules\
    \ as part of the IRC\n   protocol is the IRC server, version 2.10.\n   The rest\
    \ of this section deals with issues that are mostly of\n   importance to those\
    \ who wish to implement a server but some parts may\n   also be of interest for\
    \ client writers.\n"
- title: 5.1 Tracking Recently Used Channels
  contents:
  - "5.1 Tracking Recently Used Channels\n   This mechanism is commonly known as \"\
    Channel Delay\" and generally\n   only applies to channels which names is prefixed\
    \ with the character\n   '#' (See Section 3.1 \"Standard channels\").\n   When\
    \ a network split occurs, servers SHOULD keep track of which\n   channels lost\
    \ a \"channel operator\" as the result of the break.  These\n   channels are then\
    \ in a special state which lasts for a certain period\n   of time.  In this particular\
    \ state, the channels cannot cease to\n   exist.  If all the channel members leave\
    \ the channel, the channel\n   becomes unavailable: the server local clients cannot\
    \ join the channel\n   as long as it is empty.\n   Once a channel is unavailable,\
    \ it will become available again either\n   because a remote user has joined the\
    \ channel (most likely because the\n   network is healing), or because the delay\
    \ period has expired (in\n   which case the channel ceases to exist and may be\
    \ re-created).\n   The duration for which a channel death is delayed SHOULD be\
    \ set\n   considering many factors among which are the size (user wise) of the\n\
    \   IRC network, and the usual duration of network splits.  It SHOULD be\n   uniform\
    \ on all servers for a given IRC network.\n"
- title: 5.2 Safe Channels
  contents:
  - "5.2 Safe Channels\n   This document introduces the notion of \"safe channels\"\
    .  These\n   channels have a name prefixed with the character '!' and great effort\n\
    \   is made to avoid collisions in this name space.  Collisions are not\n   impossible,\
    \ however they are very unlikely.\n"
- title: 5.2.1 Channel Identifier
  contents:
  - "5.2.1 Channel Identifier\n   The channel identifier is a function of the time.\
    \  The current time\n   (as defined under UNIX by the number of seconds elapsed\
    \ since\n   00:00:00 GMT, January 1, 1970) is converted in a string of five (5)\n\
    \   characters using the following base:\n   \"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    \ (each character has a decimal\n   value starting from 0 for 'A' to 35 for '0').\n\
    \   The channel identifier therefore has a periodicity of 36^5 seconds\n   (about\
    \ 700 days).\n"
- title: 5.2.2 Channel Delay
  contents:
  - "5.2.2 Channel Delay\n   These channels MUST be subject to the \"channel delay\"\
    \ mechanism\n   described in section 5.1 (Channel Delay).  However, the mechanism\
    \ is\n   slightly adapted to fit better.\n   Servers MUST keep track of all such\
    \ channels which lose members as\n   the result of a network split, no matter\
    \ whether the user is a\n   \"channel operator\" or not.\n   However, these channels\
    \ do NOT ever become unavailable, it is always\n   possible to join them even\
    \ when they are empty.\n"
- title: 5.2.3 Abuse Window
  contents:
  - "5.2.3 Abuse Window\n   Because the periodicity is so long, attacks on a particular\
    \ channel\n   (name) may only occur once in a very long while.  However, with\
    \ luck\n   and patience, it is still possible for a user to cause a channel\n\
    \   collision.  In order to avoid this, servers MUST \"look in the future\"\n\
    \   and keep a list of channel names which identifier is about to be used\n  \
    \ (in the coming few days for example). Such list should remain small,\n   not\
    \ be a burden for servers to maintain and be used to avoid channel\n   collisions\
    \ by preventing the re-creation of such channel for a longer\n   period of time\
    \ than channel delay does.\n   Eventually a server MAY choose to extend this procedure\
    \ to forbid\n   creation of channels with the same shortname only (then ignoring\
    \ the\n   channel identifier).\n"
- title: 5.2.4 Preserving Sanity In The Name Space
  contents:
  - "5.2.4 Preserving Sanity In The Name Space\n   The combination of the mechanisms\
    \ described in sections 5.2.2 and\n   5.2.3 makes it quite difficult for a user\
    \ to create a channel\n   collision. However, another type of abuse consists of\
    \ creating many\n   channels having the same shortname, but different identifiers.\
    \  To\n   prevent this from happening, servers MUST forbid the creation of a\n\
    \   new channel which has the same shortname of a channel currently\n   existing.\n"
- title: 5.2.5 Server Reop Mechanism
  contents:
  - "5.2.5 Server Reop Mechanism\n   When a channel has been opless for longer than\
    \ the \"reop delay\"\n   period and has the channel flag 'r' set (See Section\
    \ 4.2.7 (Server\n   Reop Flag)), IRC servers are responsible for giving the channel\n\
    \   operator status randomly to some of the members.\n   The exact logic used\
    \ for this mechanism by the current implementation\n   is described below.  Servers\
    \ MAY use a different logic, but that it\n   is strongly RECOMMENDED that all\
    \ servers use the same logic on a\n   particular IRC network to maintain coherence\
    \ as well as fairness.\n   For the same reason, the \"reop delay\" SHOULD be uniform\
    \ on all\n   servers for a given IRC network.  As for the \"channel delay\", the\n\
    \   value of the \"reop delay\" SHOULD be set considering many factors\n   among\
    \ which are the size (user wise) of the IRC network, and the\n   usual duration\
    \ of network splits.\n   a) the reop mechanism is triggered after a random time\
    \ following the\n      expiration of the \"reop delay\".  This should limit the\
    \ eventuality\n      of the mechanism being triggered at the same time (for the\
    \ same\n      channel) on two separate servers.\n   b) If the channel is small\
    \ (five (5) users or less), and the \"channel\n      delay\" for this channel\
    \ has expired,\n        Then reop all channel members if at least one member is\
    \ local to\n        the server.\n   c) If the channel is small (five (5) users\
    \ or less), and the \"channel\n      delay\" for this channel has expired, and\
    \ the \"reop delay\" has\n      expired for longer than its value,\n        Then\
    \ reop all channel members.\n   d) For other cases, reop at most one member on\
    \ the channel, based on\n      some method build into the server. If you don't\
    \ reop a member, the\n      method should be such that another server will probably\
    \ op\n      someone. The method SHOULD be the same over the whole network. A\n\
    \      good heuristic could be just random reop.\n      (The current implementation\
    \ actually tries to choose a member\n      local to the server who has not been\
    \ idle for too long, eventually\n      postponing action, therefore letting other\
    \ servers have a chance\n      to find a \"not too idle\" member.  This is over\
    \ complicated due to\n      the fact that servers only know the \"idle\" time\
    \ of their local\n      users)\n"
- title: 6. Current problems
  contents:
  - "6. Current problems\n   There are a number of recognized problems with the way\
    \ IRC channels\n   are managed.  Some of these can be directly attributed to the\
    \ rules\n   defined in this document, while others are the result of the\n   underlying\
    \ \"IRC Server Protocol\" [IRC-SERVER].  Although derived from\n   RFC 1459 [IRC],\
    \ this document introduces several novelties in an\n   attempt to solve some of\
    \ the known problems.\n"
- title: 6.1 Labels
  contents:
  - "6.1 Labels\n   This document defines one of the many labels used by the IRC\n\
    \   protocol.  Although there are several distinct namespaces (based on\n   the\
    \ channel name prefix), duplicates inside each of these are not\n   allowed. \
    \ Currently, it is possible for users on different servers to\n   pick the label\
    \ which may result in collisions (with the exception of\n   channels known to\
    \ only one server where they can be averted).\n"
- title: 6.1.1 Channel Delay
  contents:
  - "6.1.1 Channel Delay\n   The channel delay mechanism described in section 5.1\
    \ (Tracking\n   Recently Used Channels) and used for channels prefixed with the\n\
    \   character '#' is a simple attempt at preventing collisions from\n   happening.\
    \  Experience has shown that, under normal circumstances, it\n   is very efficient;\
    \ however, it obviously has severe limitations\n   keeping it from being an adequate\
    \ solution to the problem discussed\n   here.\n"
- title: 6.1.2 Safe Channels
  contents:
  - "6.1.2 Safe Channels\n   \"Safe channels\" described in section 3.2 (Safe Channels)\
    \ are a better\n   way to prevent collisions from happening as it prevents users\
    \ from\n   having total control over the label they choose.  The obvious\n   drawback\
    \ for such labels is that they are not user friendly.\n   However, it is fairly\
    \ trivial for a client program to improve on\n   this.\n"
- title: 6.2 Mode Propagation Delays
  contents:
  - "6.2 Mode Propagation Delays\n   Because of network delays induced by the network,\
    \ and because each\n   server on the path is REQUIRED to check the validity of\
    \ mode changes\n   (e.g., user exists and has the right privileges), it is not\
    \ unusual\n   for a MODE message to only affect part of the network, often creating\n\
    \   a discrepancy between servers on the current state of a channel.\n   While\
    \ this may seem easy to fix (by having only the original server\n   check the\
    \ validity of mode changes), it was decided not to do so for\n   various reasons.\
    \  One concern is that servers cannot trust each\n   other, and that a misbehaving\
    \ servers can easily be detected.  This\n   way of doing so also stops wave effects\
    \ on channels which are out of\n   synch when mode changes are issued from different\
    \ directions.\n"
- title: 6.3 Collisions And Channel Modes
  contents:
  - "6.3 Collisions And Channel Modes\n   The \"Internet Relay Chat: Server Protocol\"\
    \ document [IRC-SERVER]\n   describes how channel data is exchanged when two servers\
    \ connect to\n   each other.  Channel collisions (either legitimate or not) are\n\
    \   treated as inclusive events, meaning that the resulting channel has\n   for\
    \ members all the users who are members of the channel on either\n   server prior\
    \ to the connection.\n   Similarly, each server sends the channel modes to the\
    \ other one.\n   Therefore, each server also receives these channel modes.  There\
    \ are\n   three types of modes for a given channel: flags, masks, and data.\n\
    \   The first two types are easy to deal with as they are either set or\n   unset.\
    \  If such a mode is set on one server, it MUST be set on the\n   other server\
    \ as a result of the connection.\n   As topics are not sent as part of this exchange,\
    \ they are not a\n   problem.  However, channel modes 'l' and 'k' are exchanged,\
    \ and if\n   they are set on both servers prior to the connection, there is no\n\
    \   mechanism to decide which of the two values takes precedence.  It is\n   left\
    \ up to the users to fix the resulting discrepancy.\n"
- title: 6.4 Resource Exhaustion
  contents:
  - "6.4 Resource Exhaustion\n   The mode based on masks defined in section 4.3 make\
    \ the IRC servers\n   (and network) vulnerable to a simple abuse of the system:\
    \ a single\n   channel operator can set as many different masks as possible on\
    \ a\n   particular channel.  This can easily cause the server to waste\n   memory,\
    \ as well as network bandwidth (since the info is propagated to\n   other servers).\
    \  For this reason it is RECOMMENDED that a limit be\n   put on the number of\
    \ such masks per channels as mentioned in section\n   4.3.\n   Moreover, more\
    \ complex mechanisms MAY be used to avoid having\n   redundant masks set for the\
    \ same channel.\n"
- title: 7. Security Considerations
  contents:
  - '7. Security Considerations

    '
- title: 7.1 Access Control
  contents:
  - "7.1 Access Control\n   One of the main ways to control access to a channel is\
    \ to use masks\n   which are based on the username and hostname of the user connections.\n\
    \   This mechanism can only be efficient and safe if the IRC servers have\n  \
    \ an accurate way of authenticating user connections, and if users\n   cannot\
    \ easily get around it.  While it is in theory possible to\n   implement such\
    \ a strict authentication mechanism, most IRC networks\n   (especially public\
    \ networks) do not have anything like this in place\n   and provide little guaranty\
    \ about the accuracy of the username and\n   hostname for a particular client\
    \ connection.\n   Another way to control access is to use a channel key, but since\
    \ this\n   key is sent in plaintext, it is vulnerable to traditional man in the\n\
    \   middle attacks.\n"
- title: 7.2 Channel Privacy
  contents:
  - "7.2 Channel Privacy\n   Because channel collisions are treated as inclusive events\
    \ (See\n   Section 6.3), it is possible for users to join a channel overriding\n\
    \   its access control settings.  This method has long been used by\n   individuals\
    \ to \"take over\" channels by \"illegitimately\" gaining\n   channel operator\
    \ status on the channel.  The same method can be used\n   to find out the exact\
    \ list of members of a channel, as well as to\n   eventually receive some of the\
    \ messages sent to the channel.\n"
- title: 7.3 Anonymity
  contents:
  - "7.3 Anonymity\n   The anonymous channel flag (See Section 4.2.1) can be used\
    \ to render\n   all users on such channel \"anonymous\" by presenting all messages\
    \ to\n   the channel as originating from a pseudo user which nickname is\n   \"\
    anonymous\".  This is done at the client-server level, and no\n   anonymity is\
    \ provided at the server-server level.\n   It should be obvious to readers, that\
    \ the level of anonymity offered\n   is quite poor and insecure, and that clients\
    \ SHOULD display strong\n   warnings for users joining such channels.\n"
- title: 8. Current support and availability
  contents:
  - "8. Current support and availability\n     Mailing lists for IRC related discussion:\n\
    \       General discussion: ircd-users@irc.org\n       Protocol development: ircd-dev@irc.org\n\
    \     Software implementations:\n       ftp://ftp.irc.org/irc/server\n       ftp://ftp.funet.fi/pub/unix/irc\n\
    \       ftp://coombs.anu.edu.au/pub/irc\n     Newsgroup: alt.irc\n"
- title: 9. Acknowledgements
  contents:
  - "9. Acknowledgements\n   Parts of this document were copied from the RFC 1459\
    \ [IRC] which\n   first formally documented the IRC Protocol.  It has also benefited\n\
    \   from many rounds of review and comments.  In particular, the\n   following\
    \ people have made significant contributions to this\n   document:\n   Matthew\
    \ Green, Michael Neumayer, Volker Paulsen, Kurt Roeckx, Vesa\n   Ruokonen, Magnus\
    \ Tjernstrom, Stefan Zehl.\n"
- title: 10. References
  contents:
  - "10. References\n   [KEYWORDS]   Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [IRC]\
    \        Oikarinen, J. and D. Reed, \"Internet Relay Chat\n                Protocol\"\
    , RFC 1459, May 1993.\n   [IRC-ARCH]   Kalt, C., \"Internet Relay Chat: Architecture\"\
    , RFC 2810,\n                April 2000.\n   [IRC-CLIENT] Kalt, C., \"Internet\
    \ Relay Chat: Client Protocol\", RFC\n                2812, April 2000.\n   [IRC-SERVER]\
    \ Kalt, C., \"Internet Relay Chat: Server Protocol\", RFC\n                2813,\
    \ April 2000.\n"
- title: 11. Author's Address
  contents:
  - "11. Author's Address\n   Christophe Kalt\n   99 Teaneck Rd, Apt #117\n   Ridgefield\
    \ Park, NJ 07660\n   USA\n   EMail: kalt@stealth.net\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
