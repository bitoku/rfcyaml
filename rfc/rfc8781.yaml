- contents:
  - '              Discovering PREF64 in Router Advertisements

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies a Neighbor Discovery option to be used in\n
    \  Router Advertisements (RAs) to communicate prefixes of Network\n   Address
    and Protocol Translation from IPv6 clients to IPv4 servers\n   (NAT64) to hosts.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8781.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Requirements Language\n     1.2.
    \ Terminology\n   2.  Use Cases for Communicating the NAT64 Prefix to Hosts\n
    \  3.  Why Include the NAT64 Prefix in Router Advertisements?\n   4.  Option Format\n
    \    4.1.  Scaled Lifetime Processing\n   5.  Usage Guidelines\n     5.1.  Handling
    Multiple NAT64 Prefixes\n     5.2.  PREF64 Consistency\n   6.  IANA Considerations\n
    \  7.  Security Considerations\n   8.  References\n     8.1.  Normative References\n
    \    8.2.  Informative References\n   Acknowledgements\n   Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   NAT64 [RFC6146] with DNS Extensions for Network Address
    Translation\n   from IPv6 clients to IPv4 servers (DNS64) [RFC6147] is a widely\n
    \  deployed mechanism to provide IPv4 access on IPv6-only networks.  In\n   various
    scenarios, the host must be aware of the NAT64 prefix in use\n   by the network.
    \ This document specifies a Neighbor Discovery\n   [RFC4861] option to be used
    in Router Advertisements (RAs) to\n   communicate NAT64 prefixes to hosts.\n"
  - contents:
    - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n"
    title: 1.1.  Requirements Language
  - contents:
    - "1.2.  Terminology\n   PREF64 (or NAT64 prefix):  An IPv6 prefix used for IPv6
      address\n      synthesis [RFC6146];\n   NAT64:  Network Address and Protocol
      Translation from IPv6 clients to\n      IPv4 servers [RFC6146];\n   Router Advertisement
      (RA):  A message used by IPv6 routers to\n      advertise their presence together
      with various link and Internet\n      parameters [RFC4861];\n   DNS64: a mechanism
      for synthesizing AAAA records from A records\n   [RFC6147];\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Use Cases for Communicating the NAT64 Prefix to Hosts\n   On networks employing
    NAT64, it is useful for hosts to know the NAT64\n   prefix for several reasons,
    including the following:\n   *  Enabling DNS64 functions on end hosts.  In particular:\n
    \     -  Local DNSSEC validation (DNS64 in stub-resolver mode).  As\n         discussed
    in [RFC6147], Section 2, the stub resolver in the\n         host \"will try to
    obtain (real) AAAA RRs, and in case they are\n         not available, the DNS64
    function will synthesize AAAA RRs for\n         internal usage.\"  Therefore,
    to perform the DNS64 function, the\n         stub resolver needs to know the NAT64
    prefix.  This is required\n         in order to use DNSSEC on a NAT64 network.\n
    \     -  Trusted DNS server.  AAAA synthesis is required for the host to\n         be
    able to use a DNS server not provided by the network (e.g.,\n         a DNS-over-TLS
    [RFC7858] or DNS-over-HTTPS [RFC8484] server\n         with which the host has
    an existing trust relationship).\n      -  Networks with no DNS64 server.  Hosts
    that support AAAA\n         synthesis and are aware of the NAT64 prefix in use
    do not need\n         the network to perform the DNS64 function at all.\n   *
    \ Enabling NAT64 address-translation functions on end hosts.  For\n      example:\n
    \     -  IPv4 address literals on an IPv6-only host.  As described in\n         [RFC8305],
    Section 7.1, IPv6-only hosts connecting to IPv4\n         address literals can
    translate the IPv4 literal to an IPv6\n         literal.\n      -  464XLAT [RFC6877].
    464XLAT requires the host be aware of the\n         NAT64 prefix.\n"
  title: 2.  Use Cases for Communicating the NAT64 Prefix to Hosts
- contents:
  - "3.  Why Include the NAT64 Prefix in Router Advertisements?\n   Fate sharing:
    \ NAT64 requires routing to be configured.  IPv6 routing\n      configuration
    requires receiving an IPv6 RA [RFC4861].  Therefore,\n      using RAs to provide
    hosts with the NAT64 prefix ensures that\n      NAT64 reachability information
    shares the fate of the rest of the\n      network configuration on the host.\n
    \  Atomic configuration:  Including the NAT64 prefix in the RA minimizes\n      the
    number of packets required to configure a host.  Only one\n      packet (an RA)
    is required to complete the network configuration.\n      This speeds up the process
    of connecting to a network that\n      supports NAT64/DNS64.  It also simplifies
    host implementation by\n      removing the possibility that the host can have
    an incomplete\n      Layer 3 configuration (e.g., IPv6 addresses and prefixes,
    but no\n      NAT64 prefix).\n   Updatability:  It is possible to change the NAT64
    prefix at any time,\n      because when it changes, it is possible to notify hosts
    by sending\n      a new RA.\n   Deployability:  All IPv6 hosts and networks are
    required to support\n      Neighbor Discovery [RFC4861] so just a minor extension
    to the\n      existing implementation is required.  Other options, such as\n      [RFC7225],
    require implementing other protocols (e.g., Port\n      Control Protocol (PCP)
    [RFC7225]), which could be considered an\n      obstacle for deployment.\n"
  title: 3.  Why Include the NAT64 Prefix in Router Advertisements?
- contents:
  - "4.  Option Format\n      0                   1                   2                   3\n
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     |
    \    Type      |    Length     |     Scaled Lifetime     | PLC |\n     |              Highest
    96 bits of the Prefix                    |\n                    Figure 1: NAT64
    Prefix Option Format\n   Fields:\n   Type:  8-bit identifier of the PREF64 option
    type (38)\n   Length:  8-bit unsigned integer.  The length of the option (including\n
    \     the Type and Length fields) is in units of 8 octets.  The sender\n      MUST
    set the length to 2.  The receiver MUST ignore the PREF64\n      option if the
    Length field value is not 2.\n   Scaled Lifetime:  13-bit unsigned integer.  The
    maximum time in units\n      of 8 seconds over which this NAT64 prefix MAY be
    used.  See\n      Section 4.1 for the Scaled Lifetime field processing rules.\n
    \  PLC (Prefix Length Code):  3-bit unsigned integer.  This field\n      encodes
    the NAT64 Prefix Length defined in [RFC6052].  The PLC\n      field values 0,
    1, 2, 3, 4, and 5 indicate the NAT64 prefix length\n      of 96, 64, 56, 48, 40,
    and 32 bits, respectively.  The receiver\n      MUST ignore the PREF64 option
    if the Prefix Length Code field is\n      not set to one of those values.\n   Highest
    96 bits of the Prefix:  96-bit unsigned integer.  Contains\n      bits 0 - 95
    of the NAT64 prefix.\n"
  - contents:
    - "4.1.  Scaled Lifetime Processing\n   It would be highly undesirable for the
      NAT64 prefix to have a\n   lifetime shorter than the Router Lifetime, which
      is defined in\n   Section 4.2 of [RFC4861] as a 16-bit unsigned integer.  If
      the NAT64\n   prefix lifetime is not at least equal to the default Router Lifetime,\n
      \  it might lead to scenarios in which the NAT64 prefix lifetime expires\n   before
      the arrival of the next unsolicited RA.  Therefore, the Scaled\n   Lifetime
      encodes the NAT64 prefix lifetime in units of 8 seconds.\n   The receiver MUST
      multiply the Scaled Lifetime value by 8 (for\n   example, by a logical left
      shift) to calculate the maximum time in\n   seconds the prefix MAY be used.
      \ The maximum lifetime of the NAT64\n   prefix is thus 65528 seconds.  To ensure
      that the NAT64 prefix does\n   not expire before the default router, it is NOT
      RECOMMENDED to\n   configure default Router Lifetimes greater than 65528 seconds
      when\n   using this option.  A lifetime of 0 indicates that the prefix SHOULD\n
      \  NOT be used anymore.\n   By default, the value of the Scaled Lifetime field
      SHOULD be set to\n   the lesser of 3 x MaxRtrAdvInterval [RFC4861] divided by
      8, or 8191.\n   Router vendors SHOULD allow administrators to specify nonzero\n
      \  lifetime values that are not divisible by 8.  In such cases, the\n   router
      SHOULD round the provided value up to the nearest integer that\n   is divisible
      by 8 and smaller than 65536, then divide the result by 8\n   (or perform a logical
      right shift by 3) and set the Scaled Lifetime\n   field to the resulting value.
      \ If a nonzero lifetime value that is to\n   be divided by 8 (or subjected to
      a logical right shift by 3) is less\n   than 8, then the Scaled Lifetime field
      SHOULD be set to 1.  This last\n   step ensures that lifetimes under 8 seconds
      are encoded as a nonzero\n   Scaled Lifetime.\n"
    title: 4.1.  Scaled Lifetime Processing
  title: 4.  Option Format
- contents:
  - "5.  Usage Guidelines\n   This option specifies exactly one NAT64 prefix for all
    IPv4\n   destinations.  If the network operator wants to route different parts\n
    \  of the IPv4 address space to different NAT64 devices, this can be\n   accomplished
    by routing more specific subprefixes of the NAT64 prefix\n   to those devices.
    \ For example, suppose an operator is using the\n   [RFC1918] address space 10.0.0.0/8
    internally.  That operator might\n   want to route 10.0.0.0/8 through NAT64 device
    A, and the rest of the\n   IPv4 space through NAT64 device B.  If the operator's
    NAT64 prefix is\n   2001:db8:a:b::/96, then the operator can route\n   2001:db8:a:b::a00:0/104
    to NAT64 A and 2001:db8:a:b::/96 to NAT64 B.\n   This option may appear more than
    once in an RA (e.g., when gracefully\n   renumbering the network from one NAT64
    prefix to another).  Host\n   behavior with regard to synthesizing IPv6 addresses
    from IPv4\n   addresses SHOULD follow the recommendations given in Section 3 of\n
    \  [RFC7050], limited to the NAT64 prefixes that have a nonzero\n   lifetime.\n
    \  In a network (or a provisioning domain) that provides both IPv4 and\n   NAT64,
    it may be desirable for certain IPv4 addresses not to be\n   translated.  An example
    might be private address ranges that are\n   local to the network/provisioning
    domain and that should not be\n   reached through the NAT64.  This type of configuration
    cannot be\n   conveyed to hosts using this option, or through other NAT64 prefix\n
    \  provisioning mechanisms such as [RFC7050] or [RFC7225].  This problem\n   does
    not apply in IPv6-only networks: the host in an IPv6-only\n   network does not
    have an IPv4 address and cannot reach any IPv4\n   destinations without the NAT64.\n"
  - contents:
    - "5.1.  Handling Multiple NAT64 Prefixes\n   In some cases, a host may receive
      multiple NAT64 prefixes from\n   different sources.  Possible scenarios include
      (but are not limited\n   to):\n   *  the host is using multiple mechanisms to
      discover PREF64 prefixes\n      (e.g., by using PCP [RFC7225]) and/or resolving
      an IPv4-only fully\n      qualified domain name [RFC7050] in addition to receiving
      the\n      PREF64 RA option);\n   *  the PREF64 option presents in a single
      RA more than once;\n   *  the host receives multiple RAs with different PREF64
      prefixes on a\n      given interface.\n   When multiple PREF64s are discovered
      via the RA PREF64 Option (either\n   the Option presents more than once in a
      single RA or multiple RAs are\n   received), host behavior with regard to synthesizing
      IPv6 addresses\n   from IPv4 addresses SHOULD follow the recommendations given
      in\n   Section 3 of [RFC7050], limited to the NAT64 prefixes that have a\n   nonzero
      lifetime.\n   When different PREF64s are discovered using multiple mechanisms,\n
      \  hosts SHOULD select one source of information only.  The RECOMMENDED\n   order
      is:\n   *  PCP-discovered prefixes [RFC7225], if supported;\n   *  PREF64s discovered
      via the RA Option;\n   *  PREF64s resolving an IPv4-only fully qualified domain
      name\n      [RFC7050]\n   Note: If the network provides PREF64s via both this
      RA Option and\n   [RFC7225], hosts that receive the PREF64 via the RA Option
      may choose\n   to use it immediately (before waiting for the PCP to complete);\n
      \  therefore, some traffic may not reflect any more detailed\n   configuration
      provided by the PCP.\n   The host SHOULD treat the PREF64 as being specific
      to the network\n   interface it was received on.  Hosts that are aware of Provisioning\n
      \  Domain (PvD, [RFC7556]) MUST treat the PREF64 as being scoped to the\n   implicit
      or explicit PvD.\n"
    title: 5.1.  Handling Multiple NAT64 Prefixes
  - contents:
    - "5.2.  PREF64 Consistency\n   Section 6.2.7 of [RFC4861] recommends that routers
      inspect RAs sent\n   by other routers to ensure that all routers onlink advertise\n
      \  consistent information.  Routers SHOULD inspect valid PREF64 options\n   received
      on a given link and verify the consistency.  Detected\n   inconsistencies indicate
      that one or more routers might be\n   misconfigured.  Routers SHOULD log such
      cases to system or network\n   management.  Routers SHOULD check and compare
      the following\n   information:\n   *  set of PREF64s with a nonzero lifetime;\n
      \  *  set of PREF64s with a zero lifetime.\n   Routers that are aware of PvD
      ([RFC7556]) MUST only compare\n   information scoped to the same implicit or
      explicit PvD.\n"
    title: 5.2.  PREF64 Consistency
  title: 5.  Usage Guidelines
- contents:
  - "6.  IANA Considerations\n   IANA has assigned a new IPv6 Neighbor Discovery Option
    type for the\n   PREF64 option defined in this document in the \"IPv6 Neighbor\n
    \  Discovery Option Formats\" registry [IANA].\n                          | Description
    \  | Type |\n                          | PREF64 option | 38   |\n                             Table
    1: New IANA\n                            Registry Assignment\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   Because RAs are required in all IPv6 configuration
    scenarios, on\n   IPv6-only networks, RAs must already be secured -- e.g., by
    deploying\n   an RA-Guard [RFC6105].  Providing all configuration in RAs reduces\n
    \  the attack surface to be targeted by malicious attackers trying to\n   provide
    hosts with invalid configuration, as compared to distributing\n   the configuration
    through multiple different mechanisms that need to\n   be secured independently.\n
    \  If a host is provided with an incorrect NAT64 prefix, the IPv6-only\n   host
    might not be able to communicate with IPv4-only destinations.\n   Connectivity
    to destinations reachable over IPv6 would not be\n   impacted just by providing
    a host with an incorrect prefix; however,\n   if attackers are capable of sending
    rogue RAs, they can perform\n   denial-of-service or man-in-the-middle attacks,
    as described in\n   [RFC6104].\n   The security measures that must already be
    in place to ensure that\n   RAs are only received from legitimate sources eliminate
    the problem\n   of NAT64 prefix validation described in Section 3.1 of [RFC7050].\n"
  title: 7.  Security Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [IANA]     IANA, \"Internet Control Message
      Protocol version 6\n              (ICMPv6) Parameters\",\n              <https://www.iana.org/assignments/icmpv6-parameters>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC4861]  Narten,
      T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor Discovery
      for IP version 6 (IPv6)\", RFC 4861,\n              DOI 10.17487/RFC4861, September
      2007,\n              <https://www.rfc-editor.org/info/rfc4861>.\n   [RFC6052]
      \ Bao, C., Huitema, C., Bagnulo, M., Boucadair, M., and X.\n              Li,
      \"IPv6 Addressing of IPv4/IPv6 Translators\", RFC 6052,\n              DOI 10.17487/RFC6052,
      October 2010,\n              <https://www.rfc-editor.org/info/rfc6052>.\n   [RFC7050]
      \ Savolainen, T., Korhonen, J., and D. Wing, \"Discovery of\n              the
      IPv6 Prefix Used for IPv6 Address Synthesis\",\n              RFC 7050, DOI
      10.17487/RFC7050, November 2013,\n              <https://www.rfc-editor.org/info/rfc7050>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC1918]  Rekhter, Y., Moskowitz, B., Karrenberg,
      D., de Groot, G.\n              J., and E. Lear, \"Address Allocation for Private\n
      \             Internets\", BCP 5, RFC 1918, DOI 10.17487/RFC1918,\n              February
      1996, <https://www.rfc-editor.org/info/rfc1918>.\n   [RFC6104]  Chown, T. and
      S. Venaas, \"Rogue IPv6 Router Advertisement\n              Problem Statement\",
      RFC 6104, DOI 10.17487/RFC6104,\n              February 2011, <https://www.rfc-editor.org/info/rfc6104>.\n
      \  [RFC6105]  Levy-Abegnoli, E., Van de Velde, G., Popoviciu, C., and J.\n              Mohacsi,
      \"IPv6 Router Advertisement Guard\", RFC 6105,\n              DOI 10.17487/RFC6105,
      February 2011,\n              <https://www.rfc-editor.org/info/rfc6105>.\n   [RFC6146]
      \ Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful\n              NAT64:
      Network Address and Protocol Translation from IPv6\n              Clients to
      IPv4 Servers\", RFC 6146, DOI 10.17487/RFC6146,\n              April 2011, <https://www.rfc-editor.org/info/rfc6146>.\n
      \  [RFC6147]  Bagnulo, M., Sullivan, A., Matthews, P., and I. van\n              Beijnum,
      \"DNS64: DNS Extensions for Network Address\n              Translation from
      IPv6 Clients to IPv4 Servers\", RFC 6147,\n              DOI 10.17487/RFC6147,
      April 2011,\n              <https://www.rfc-editor.org/info/rfc6147>.\n   [RFC6877]
      \ Mawatari, M., Kawashima, M., and C. Byrne, \"464XLAT:\n              Combination
      of Stateful and Stateless Translation\",\n              RFC 6877, DOI 10.17487/RFC6877,
      April 2013,\n              <https://www.rfc-editor.org/info/rfc6877>.\n   [RFC7225]
      \ Boucadair, M., \"Discovering NAT64 IPv6 Prefixes Using the\n              Port
      Control Protocol (PCP)\", RFC 7225,\n              DOI 10.17487/RFC7225, May
      2014,\n              <https://www.rfc-editor.org/info/rfc7225>.\n   [RFC7556]
      \ Anipko, D., Ed., \"Multiple Provisioning Domain\n              Architecture\",
      RFC 7556, DOI 10.17487/RFC7556, June 2015,\n              <https://www.rfc-editor.org/info/rfc7556>.\n
      \  [RFC7858]  Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,\n              and
      P. Hoffman, \"Specification for DNS over Transport\n              Layer Security
      (TLS)\", RFC 7858, DOI 10.17487/RFC7858, May\n              2016, <https://www.rfc-editor.org/info/rfc7858>.\n
      \  [RFC8305]  Schinazi, D. and T. Pauly, \"Happy Eyeballs Version 2:\n              Better
      Connectivity Using Concurrency\", RFC 8305,\n              DOI 10.17487/RFC8305,
      December 2017,\n              <https://www.rfc-editor.org/info/rfc8305>.\n   [RFC8484]
      \ Hoffman, P. and P. McManus, \"DNS Queries over HTTPS\n              (DoH)\",
      RFC 8484, DOI 10.17487/RFC8484, October 2018,\n              <https://www.rfc-editor.org/info/rfc8484>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgements\n   Thanks to the following people (in alphabetical order) for
    their\n   review and feedback: Mikael Abrahamsson, Mark Andrews, Brian E\n   Carpenter,
    David Farmer, Nick Heatley, Robert Hinden, Martin Hunek,\n   Tatuya Jinmei, Benjamin
    Kaduk, Erik Kline, Suresh Krishnan, Warren\n   Kumari, David Lamparter, Barry
    Leiba, Jordi Palet Martinez, Tommy\n   Pauly, Alexandre Petrescu, Michael Richardson,
    David Schinazi, Ole\n   Troan, Eric Vynke, Bernie Volz.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Lorenzo Colitti\n   Google\n   Shibuya 3-21-3, Tokyo\n
    \  150-0002\n   Japan\n   Email: lorenzo@google.com\n   Jen Linkova\n   Google\n
    \  1 Darling Island Rd\n   Pyrmont NSW 2009\n"
  title: Authors' Addresses
