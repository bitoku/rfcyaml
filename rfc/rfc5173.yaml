- contents:
  - '                 Sieve Email Filtering: Body Extension

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document defines a new command for the \"Sieve\" email filtering\n
    \  language that tests for the occurrence of one or more strings in the\n   body
    of an email message.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   The \"body\" test checks for the occurrence of one or more
    strings in\n   the body of an email message.  Such a test was initially discussed\n
    \  for the [SIEVE] base document, but was subsequently removed because\n   it
    was thought to be too costly to implement.\n   Nevertheless, several server vendors
    have implemented some form of\n   the \"body\" test.\n   This document reintroduces
    the \"body\" test as an extension, and\n   specifies its syntax and semantics.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [KEYWORDS].\n   Conventions for notations are as in [SIEVE] Section 1.1, including\n
    \  the use of the \"Usage:\" label for the definition of text and tagged\n   argument
    syntax.\n   The rules for interpreting the grammar are defined in [SIEVE] and\n
    \  inherited by this specification.  In particular, readers of this\n   document
    are reminded that according to [SIEVE] Sections 2.6.2 and\n   2.6.3, optional
    arguments such as COMPARATOR and MATCH-TYPE can\n   appear in any order.\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Capability Identifier\n   The capability string associated with the extension
    defined in this\n   document is \"body\".\n"
  title: 3.  Capability Identifier
- contents:
  - "4.  Test body\n   Usage: \"body\" [COMPARATOR] [MATCH-TYPE] [BODY-TRANSFORM]\n
    \               <key-list: string-list>\n   The body test matches content in the
    body of an email message, that\n   is, anything following the first empty line
    after the header.  (The\n   empty line itself, if present, is not considered to
    be part of the\n   body.)\n   The COMPARATOR and MATCH-TYPE keyword parameters
    are defined in\n   [SIEVE].  As specified in Sections 2.7.1 and 2.7.3 of [SIEVE],
    the\n   default COMPARATOR is \"i;ascii-casemap\" and the default MATCH-TYPE is\n
    \  \":is\".\n   The BODY-TRANSFORM is a keyword parameter that governs how a set
    of\n   strings to be matched against are extracted from the body of the\n   message.
    \ If a message consists of a header only, not followed by an\n   empty line, then
    that set is empty and all \"body\" tests return false,\n   including those that
    test for an empty string.  (This is similar to\n   how the \"header\" test always
    fails when the named header fields\n   aren't present.)  Otherwise, the transform
    must be followed as\n   defined below in Section 5.\n   Note that the transformations
    defined here do *not* match against\n   each line of the message independently,
    so the strings will usually\n   contain CRLFs.  How these can be matched is governed
    by the\n   comparator and match-type.  For example, with the default comparator\n
    \  of \"i;ascii-casemap\", they can be included literally in the key\n   strings,
    or be matched with the \"*\" or \"?\" wildcards of the :matches\n   match-type,
    or be skipped with :contains.\n"
  title: 4.  Test body
- contents:
  - "5.  Body Transform\n   Prior to matching content in a message body, \"transformations\"
    can be\n   applied that filter and decode certain parts of the body.  These\n
    \  transformations are selected by a \"BODY-TRANSFORM\" keyword parameter.\n   Usage:
    \":raw\"\n        / \":content\" <content-types: string-list>\n        / \":text\"\n
    \  The default transformation is :text.\n"
  - contents:
    - "5.1.  Body Transform \":raw\"\n   The \":raw\" transform matches against the
      entire undecoded body of a\n   message as a single item.\n   If the specified
      body-transform is \":raw\", the [MIME] structure of\n   the body is irrelevant.
      \ The implementation MUST NOT remove any\n   transfer encoding from the message,
      MUST NOT refuse to filter\n   messages with syntactic errors (unless the environment
      it is part of\n   rejects them outright), and MUST treat multipart boundaries
      or the\n   MIME headers of enclosed body parts as part of the content being\n
      \  matched against, instead of MIME structures to interpret.\n   Example:\n
      \       require \"body\";\n        # This will match a message containing the
      literal text\n        # \"MAKE MONEY FAST\" in body parts (ignoring any\n        #
      content-transfer-encodings) or MIME headers other than\n        # the outermost
      RFC 2822 header.\n        if body :raw :contains \"MAKE MONEY FAST\" {\n                discard;\n
      \       }\n"
    title: 5.1.  Body Transform ":raw"
  - contents:
    - "5.2.  Body Transform \":content\"\n   If the body transform is \":content\",
      the MIME parts that have the\n   specified content types are matched against
      independently.\n   If an individual content type begins or ends with a '/' (slash)
      or\n   contains multiple slashes, then it matches no content types.\n   Otherwise,
      if it contains a slash, then it specifies a full\n   <type>/<subtype> pair,
      and matches only that specific content type.\n   If it is the empty string,
      all MIME content types are matched.\n   Otherwise, it specifies a <type> only,
      and any subtype of that type\n   matches it.\n   The search for MIME parts matching
      the :content specification is\n   recursive and automatically descends into
      multipart and\n   message/rfc822 MIME parts.  All MIME parts with matching types
      are\n   searched for the key strings.  The test returns true if any\n   combination
      of a searched MIME part and key-list argument match.\n   If the :content specification
      matches a multipart MIME part, only the\n   prologue and epilogue sections of
      the part will be searched for the\n   key strings, treating the entire prologue
      and the entire epilogue as\n   separate strings; the contents of nested parts
      are only searched if\n   their respective types match the :content specification.\n
      \  If the :content specification matches a message/rfc822 MIME part,\n   only
      the header of the nested message will be searched for the key\n   strings, treating
      the header as a single string; the contents of the\n   nested message body parts
      are only searched if their content type\n   matches the :content specification.\n
      \  For other MIME types, the entire part will be searched as a single\n   string.\n
      \  (Matches against container types with an empty match string can be\n   useful
      as tests for the existence of such parts.)\n   Example:\n        From: Whomever\n
      \       To: Someone\n        Date: Whenever\n        Subject: whatever\n        Content-Type:
      multipart/mixed; boundary=outer\n     &  This is a multi-part message in MIME
      format.\n     &\n        --outer\n        Content-Type: multipart/alternative;
      boundary=inner\n     &  This is a nested multi-part message in MIME format.\n
      \    &\n        --inner\n        Content-Type: text/plain; charset=\"us-ascii\"\n
      \    $  Hello\n     $\n        --inner\n        Content-Type: text/html; charset=\"us-ascii\"\n
      \    %  <html><body>Hello</body></html>\n     %\n        --inner--\n     &\n
      \    &  This is the end of the inner MIME multipart.\n     &\n        --outer\n
      \       Content-Type: message/rfc822\n     !  From: Someone Else\n     !  Subject:
      hello request\n     $  Please say Hello\n     $\n        --outer--\n     &\n
      \    &  This is the end of the outer MIME multipart.\n   In the above example,
      the '&', '$', '%', and '!' characters at the\n   start of a line are used to
      illustrate what portions of the example\n   message are used in tests:\n   -
      the lines starting with '&' are the ones that are tested when a\n     'body
      :content \"multipart\" :contains \"MIME\"' test is executed.\n   - the lines
      starting with '$' are the ones that are tested when a\n     'body :content \"text/plain\"
      :contains \"Hello\"' test is executed.\n   - the lines starting with '%' are
      the ones that are tested when a\n     'body :content \"text/html\" :contains
      \"Hello\"' test is executed.\n   - the lines starting with '$' or '%' are the
      ones that are tested\n     when a 'body :content \"text\" :contains \"Hello\"'
      test is executed.\n   - the lines starting with '!' are the ones that are tested
      when a\n     'body :content \"message/rfc822\" :contains \"Hello\"' test is\n
      \    executed.\n   Comparisons are performed on octets.  Implementations decode
      the\n   content-transfer-encoding and convert text to [UTF-8] as input to the\n
      \  comparator.  MIME parts that cannot be decoded and converted MAY be\n   treated
      as plain US-ASCII, omitted, or processed according to local\n   conventions.
      \ A NUL octet (character zero) SHOULD NOT cause early\n   termination of the
      content being compared against.  Implementations\n   MUST support the \"quoted-printable\",
      \"base64\", \"7bit\", \"8bit\", and\n   \"binary\" content transfer encodings.
      \ Implementations MUST be capable\n   of converting to UTF-8 the US-ASCII, ISO-8859-1,
      and the US-ASCII\n   subset of ISO-8859-* character sets.\n   Each matched part
      is matched against independently: search\n   expressions MUST NOT match across
      MIME part boundaries.  MIME headers\n   of the containing part MUST NOT be included
      in the data.\n   Example:\n        require [\"body\", \"fileinto\"];\n        #
      Save any message with any text MIME part that contains the\n        # words
      \"missile\" or \"coordinates\" in the \"secrets\" folder.\n        if body :content
      \"text\" :contains [\"missile\", \"coordinates\"] {\n                fileinto
      \"secrets\";\n        }\n        # Save any message with an audio/mp3 MIME part
      in\n        # the \"jukebox\" folder.\n        if body :content \"audio/mp3\"
      :contains \"\" {\n                fileinto \"jukebox\";\n        }\n"
    title: 5.2.  Body Transform ":content"
  - contents:
    - "5.3.  Body Transform \":text\"\n   The \":text\" body transform matches against
      the results of an\n   implementation's best effort at extracting UTF-8 encoded
      text from a\n   message.\n   It is unspecified whether this transformation results
      in a single\n   string or multiple strings being matched against.  All the text\n
      \  extracted from a given non-container MIME part MUST be in the same\n   string.\n
      \  In simple implementations, :text MAY be treated the same as :content\n   \"text\".\n
      \  Sophisticated implementations MAY strip mark-up from the text prior\n   to
      matching, and MAY convert media types other than text to text\n   prior to matching.\n
      \  (For example, they may be able to convert proprietary text editor\n   formats
      to text or apply optical character recognition algorithms to\n   image data.)\n
      \  Example:\n        require [\"body\", \"fileinto\"];\n        # Save messages
      mentioning the project schedule in the\n        # project/schedule folder.\n
      \       if body :text :contains \"project schedule\" {\n                fileinto
      \"project/schedule\";\n        }\n"
    title: 5.3.  Body Transform ":text"
  title: 5.  Body Transform
- contents:
  - "6.  Interaction with Other Sieve Extensions\n   Any extension that extends the
    grammar for the COMPARATOR or MATCH-\n   TYPE nonterminals will also affect the
    implementation of \"body\".\n   Wildcard expressions used with \"body\" are exempt
    from the side\n   effects described in [VARIABLES].  That is, they MUST NOT set
    match\n   variables (${1}, ${2}...) to the input values corresponding to\n   wildcard
    sequences in the matched pattern.  However, if the extension\n   is present, variable
    references in the key strings or content type\n   strings are evaluated as described
    in this document.\n"
  title: 6.  Interaction with Other Sieve Extensions
- contents:
  - "7.  IANA Considerations\n   The following template specifies the IANA registration
    of the Sieve\n   extension specified in this document:\n   To: iana@iana.org\n
    \  Subject: Registration of new Sieve extension\n   Capability name: body\n   Description:
    \    Provides a test for matching against the\n                    body of the
    message being processed\n   RFC number:      RFC 5173\n   Contact Address: The
    Sieve discussion list\n                    <ietf-mta-filters@imc.org>\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Security Considerations\n   The system MUST be sized and restricted in such
    a manner that even\n   malicious use of body matching does not deny service to
    other users\n   of the host system.\n   Filters relying on string matches in the
    raw body of an email message\n   may be more general than intended.  Text matches
    are no replacement\n   for a spam, virus, or other security related filtering
    system.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Acknowledgments\n   This document has been revised in part based on comments
    and\n   discussions that took place on and off the SIEVE mailing list.\n   Thanks
    to Cyrus Daboo, Ned Freed, Bob Johannessen, Simon Josefsson,\n   Mark E. Mallett,
    Chris Markle, Alexey Melnikov, Ken Murchison, Greg\n   Shapiro, Tim Showalter,
    Nigel Swinson, Dowson Tong, and Christian\n   Vogt for reviews and suggestions.\n"
  title: 9.  Acknowledgments
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [KEYWORDS]   Bradner, S., \"Key words for use
      in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [MIME]       Freed, N. and N. Borenstein, \"Multipurpose Internet
      Mail\n                Extensions (MIME) Part One: Format of Internet Message\n
      \               Bodies\", RFC 2045, November 1996.\n   [SIEVE]      Guenther,
      P., Ed., and T. Showalter, Ed., \"Sieve: An\n                Email Filtering
      Language\", RFC 5228, January 2008.\n   [UTF-8]      Yergeau, F., \"UTF-8, a
      transformation format of ISO\n                10646\", STD 63, RFC 3629, November
      2003.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [VARIABLES]  Homme, K., \"Sieve Email Filtering:
      Variables Extension\",\n                RFC 5229, January 2008.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Authors' Addresses\n   Jutta Degener\n   5245 College Ave, Suite #127\n   Oakland,
    CA 94618\n   EMail: jutta@pobox.com\n   Philip Guenther\n   Sendmail, Inc.\n   6425
    Christie Ave, 4th Floor\n   Emeryville, CA 94608\n   EMail: guenther@sendmail.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
