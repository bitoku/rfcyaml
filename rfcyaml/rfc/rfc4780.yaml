- contents:
  - "                    Management Information Base for\n                 the Session
    Initiation Protocol (SIP)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n
    \  for use with network management protocols in the Internet community.\n   In
    particular, it describes a set of managed objects that are used to\n   manage
    Session Initiation Protocol (SIP) entities, which include User\n   Agents, and
    Proxy, Redirect and Registrar servers.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Conventions .....................................................2\n   3.
    The Internet-Standard Management Framework ......................2\n   4. Overview
    ........................................................3\n   5. Structure of
    the SIP MIB ........................................3\n      5.1. Textual Conventions
    ........................................6\n      5.2. Relationship to the Network
    Services MIB ...................6\n      5.3. IMPORTed MIB Modules and REFERENCE
    Clauses ................10\n   6. Accommodating SIP Extension Methods ............................11\n
    \  7. Definitions ....................................................12\n      7.1.
    SIP Textual Conventions ...................................12\n      7.2. SIP
    Common MIB Module .....................................15\n      7.3. SIP User
    Agent MIB Module .................................55\n      7.4. SIP Server MIB
    Module (Proxy, Redirect, and\n           Registrar Servers) ........................................59\n
    \  8. IANA Considerations ............................................77\n   9.
    Security Considerations ........................................78\n   10. Contributor
    Acknowledgments ...................................80\n   11. References ....................................................80\n
    \     11.1. Normative References .....................................80\n      11.2.
    Informative References ...................................81\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This memo defines a portion of the Management Information
    Base (MIB)\n   for use with network management protocols in the Internet community.\n
    \  In particular, it describes a set of managed objects that are used to\n   manage
    Session Initiation Protocol (SIP) entities, which include User\n   Agents, and
    Proxy, Redirect and Registrar servers.  The managed\n   objects defined in this
    document are intended to provide basic SIP\n   protocol management for SIP entities.
    \ The management of\n   application-specific or service-specific SIP configuration
    is out of\n   scope.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n"
  title: 2.  Conventions
- contents:
  - "3.  The Internet-Standard Management Framework\n   For a detailed overview of
    the documents that describe the current\n   Internet-Standard Management Framework,
    please refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed objects are accessed
    via a virtual information store, termed\n   the Management Information Base or
    MIB.  MIB objects are generally\n   accessed through the Simple Network Management
    Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms defined
    in the\n   Structure of Management Information (SMI).  This memo specifies a set\n
    \  of MIB modules that are compliant to the SMIv2, which is described in\n   STD
    58, comprised of RFC 2578 [RFC2578], RFC 2579 [RFC2579], and RFC\n   2580 [RFC2580].\n"
  title: 3.  The Internet-Standard Management Framework
- contents:
  - "4.  Overview\n   SIP [RFC3261] is an application-layer control (signaling) protocol\n
    \  for creating, modifying, and terminating sessions with one or more\n   participants.
    \ These sessions include Internet telephone calls,\n   multimedia distribution,
    and multimedia conferences.\n   This MIB provides some managed objects for SIP
    entities defined in\n   RFC 3261 [RFC3261] - User Agents (UA), and Proxy, Redirect,
    and\n   Registrar servers.  It is intended to provide management of the basic\n
    \  SIP entities.  It provides for monitoring of status and protocol\n   statistics,
    as well as for configuration of SIP entities.\n"
  title: 4.  Overview
- contents:
  - "5.  Structure of the SIP MIB\n   Four MIB modules are specified: SIP-COMMON-MIB,
    SIP-SERVER-MIB, SIP-\n   UA-MIB, and SIP-TC-MIB.  SIP-COMMON-MIB contains common
    MIB objects\n   used in all the SIP entities.  SIP-SERVER-MIB contains objects\n
    \  specific to Proxy, Redirect, and Registrar servers.  SIP-UA-MIB\n   includes
    objects specific to User Agents.  SIP-TC-MIB defines the\n   textual conventions
    used throughout the MIB modules.\n   The MIB modules contain the following groups
    of objects:\n   SIP-COMMON-MIB: Management objects common to all the SIP entities\n
    \  o  sipCommonMIBObjects\n      *  sipCommonCfgBase: This object group defines
    configuration\n         objects common to all SIP entities, including the SIP
    protocol\n         version, the type of SIP entity (UA, proxy, redirect, registrar\n
    \        servers), the operational and administrative status, the SIP\n         organization
    name, the maximum number of SIP transactions an\n         entity can manage, etc.\n
    \     *  sipCommonCfgTimer: This object group defines timer\n         configuration
    objects applicable to SIP user agent and stateful\n         SIP proxy entities.\n
    \     *  sipCommonSummaryStats: This object group defines a table\n         containing
    the summary statistics objects applicable to all SIP\n         entities, including
    the total number of all SIP requests and\n         responses in/out and the total
    number of transactions.\n      *  sipCommonMethodStats: This object group defines
    a table\n         containing the SIP method statistics objects applicable to all\n
    \        SIP entities, including the number of outbound and inbound\n         requests
    on a per method basis.  Retransmissions, where\n         appropriate, are also
    included in these statistics.\n      *  sipCommonStatusCode: This object group
    defines a table\n         indicating the number of SIP responses (in and out)
    that the\n         SIP entity has been requested to monitor on a per-method basis\n
    \        (100, 200, 302, etc.).\n      *  sipCommonStatsTrans: This object group
    defines a table\n         containing a gauge reflecting the number of transactions\n
    \        currently awaiting definitive responses by the managed SIP\n         entity.\n
    \     *  sipCommonStatsRetry: This object group defines statistic\n         objects
    indicating the number of retransmissions sent on a\n         per-method basis.\n
    \     *  sipCommonOtherStats: This object group defines additional\n         statistics
    objects including the number of SIP requests\n         received with unsupported
    URIs, the number of requests received\n         with unsupported SIP methods,
    and the number of discarded\n         messages.\n      *  sipCommonNotifObjects:
    This object group defines objects\n         accessible only via a notification
    (MAX ACCESS clause of\n         accessible-for-notify): they are related to the
    SNMP\n         notifications defined in this MIB module.\n   The SIP-COMMON-MIB
    also contains notifications, including:\n   o  sipCommonStatusCodeNotif: indicates
    that a specific status code\n      has been sent or received by the system.\n
    \  o  sipCommonStatusCodeThreshExceededNotif: indicates that a specific\n      status
    code has been sent or received by the system frequently\n      enough to exceed
    the configured threshold.\n   SIP-SERVER-MIB: Groups of objects for SIP Proxy,
    Redirect, and\n   Registrar servers\n   o  sipServerMIBObjects\n      *  sipServerCfg:
    This object group defines common server\n         configuration objects including
    the SIP server host address.\n      *  sipServerProxyCfg: This object group defines
    configuration\n         objects for SIP Proxy Servers including the proxy mode
    of\n         operation (stateless, stateful, call stateful), the proxy\n         authentication
    method(s), realm, etc.\n      *  sipServerProxyStats: This object group defines
    a table\n         containing the statistics objects applicable to SIP Proxy\n
    \        Servers.  It includes the number of occurrences of unsupported\n         options
    being specified in received Proxy-Require headers.\n      *  sipServerRegCfg:
    This object group defines common configuration\n         objects for SIP Registrar
    servers, including the ability to\n         accept third-party registrations,
    such as the maximum\n         registration expiry that may be requested by user
    agents, the\n         maximum number of users the registrar can support, the number\n
    \        of currently registered users, per contact registration\n         information,
    etc.\n      *  sipServerRegStats: This object group contains summary\n         statistics
    objects for SIP Registrar servers.  Precisely, it\n         contains the number
    of REGISTER requests that have been\n         accepted or rejected.\n   SIP-UA-MIB:
    Group of objects for SIP User Agents\n   o  sipUAMIBObjects\n      *  sipUACfgServer:
    This object group specifies SIP server\n         configuration objects applicable
    to SIP user agents including\n         the Internet address of the SIP Server
    the UA uses to register,\n         proxy, or redirect calls.\n   To conform with
    this specification, an SNMP agent MUST implement the\n   SIP-TC-MIB module, plus
    the SIP-COMMON-MIB module and one of the SIP\n   entity-type-specific MIB modules
    (SIP-SERVER-MIB or SIP-UA-MIB) as\n   applicable for each instance of a SIP entity
    being managed.  If a\n   device has more than one SIP entity or multiple instances
    of the same\n   entity type, it MUST implement multiple SIP modules.  Section
    5.2\n   describes handling of multiple instances in detail.\n"
  - contents:
    - "5.1.  Textual Conventions\n   The data types SipTCTransportProtocol, SipTCEntityRole,\n
      \  SipTCOptionTagHeaders, and SipTCMethodName are defined in the SIP-\n   TC-MIB
      module and used as Textual Conventions in this document.\n"
    title: 5.1.  Textual Conventions
  - contents:
    - "5.2.  Relationship to the Network Services MIB\n   In the design of the SIP
      MIB, the authors considered the following\n   requirement: the SIP MIB must
      allow a single system with a single\n   SNMP agent to support multiple instances
      of various SIP MIB modules.\n   This requirement is met by using the framework
      provided by the\n   Network Services Monitoring MIB, NETWORK-SERVICES-MIB, RFC
      2788\n   [RFC2788].\n   A device implementing the SIP MIB MUST support the NETWORK-SERVICES-\n
      \  MIB and, at a minimum, MUST support the index and name objects\n   (applIndex
      and applName) in the application table (applTable).  In\n   order to allow each
      instance of a SIP entity to be managed as a\n   separate network service application,
      a naming convention SHOULD be\n   used to make the application name unique.
      \ For example, if a system\n   is running 2 SIP UAs that need to be managed
      as 2 separate SIP\n   entities, by convention, the application names used in
      the Network\n   Services Monitoring MIB application table should be \"sip_ua1\"
      and\n   \"sip_ua2\".  This convention allows each instance to have its own row\n
      \  in the application table (applTable).\n   It is therefore RECOMMENDED that
      the following application name\n   conventions be adopted:\n   o  for a SIP
      Proxy entity, the applName value SHOULD be equal to a\n      character string
      starting with \"sip_proxy\" followed by a unique\n      application instance
      identifier, for example, \"sip_proxy1\",\n      \"sip_proxy17\".\n   o  for
      a SIP Registrar entity, the applName value SHOULD be equal to\n      a character
      string starting with \"sip_registrar\" followed by a\n      unique application
      instance identifier, for example,\n      \"sip_registrar1\", \"sip_registrar2\".\n
      \  o  for a SIP User Agent entity, the applName value SHOULD be equal to\n      a
      character string starting with \"sip_ua\" followed by a unique\n      application
      instance identifier, for example, \"sip_ua1\",\n      \"sip_ua2\".\n   o  for
      any combination of Proxy, Registrar, or Redirect Server being\n      managed
      as a single aggregate entity, the applName value for the\n      combined server
      entity SHOULD reflect the appropriate combination\n      followed by a unique
      application instance identifier.  In order to\n      facilitate consistent agent
      behavior and management application\n      expectations, the following order
      of names is RECOMMENDED:\n         *  if Proxy exists, list first.\n         *
      \ if Proxy and Redirect exists, list Redirect second.\n         *  if Registrar
      exists, always list last.\n      For example \"sip_proxy1\", \"sip_proxy_registrar1\",\n
      \     \"sip_proxy_redirect5\", \"sip_proxy_redirect_registrar2\", or\n      \"sip_registrar1\".\n
      \  o  Note: the value of the network service application index\n      (applIndex)
      may be different from the instance identifier used in\n      the system (the
      applIndex is dynamically created and is the value\n      assigned by the SNMP
      agent at the creation of the table entry,\n      whereas the value of the instance
      identifier to be used in the\n      application name is provided as part of
      the application name\n      applName by the system administrator or configuration
      files of the\n      SIP entity).  This note is illustrated in the first example\n
      \     provided below.\n   Finally, the SNMP agent MAY support any combination
      of the other\n   attributes in applTable.  If supported, the following objects
      SHOULD\n   have values populated as follows:\n   o  applVersion: version of
      the SIP application.\n   o  applUptime: the value of applUptime MUST be identical
      to the value\n      of sipCommonCfgServiceStartTime defined in the SIP-COMMON-MIB\n
      \     module.\n   o  applOperStatus: the value of applOperStatus SHOULD reflect
      the\n      operational status of sipCommonCfgServiceOperStatus, at least by\n
      \     means of a mapping.\n   o  applLastChange: the value of applLastChange
      MUST be identical to\n      the value of sipCommonCfgServiceLastChange defined
      in the SIP-\n      COMMON module.\n   A number of other objects are defined
      as part of the applTable.  They\n   are not included for the sake of brevity
      and due to the fact that\n   they do not enhance the concept being presented.\n
      \  Example 1:\n   The tables below illustrate how a system acting as both Proxy
      and\n   Registrar server might be configured to maintain separate SIP-\n   COMMON-MIB
      instances.\n   The NETWORK-SERVICES-MIB applTable might be populated as follows:\n
      \           +-----------+-------------------+----------------------+\n            |
      applIndex |      applName     |    applDescription   |\n            +-----------+-------------------+----------------------+\n
      \           |     1     |   \"sip_proxy10\"   |   \"ACME SIP Proxy\"   |\n            |
      \    2     | \"sip_registrar17\" | \"ACME SIP Registrar\" |\n            +-----------+-------------------+----------------------+\n
      \  The SIP-COMMON-MIB sipCommonCfgTable would have two rows: one for the\n   proxy
      (applIndex=1) and one for the registrar (applIndex=2).  The\n   SIP-SERVER-MIB
      tables would, however, only be populated with one row\n   indexed by applIndex=1
      and applIndex=2, respectively, if the server\n   provides either proxy or registrar.\n
      \  The SIP-COMMON-MIB sipCommonCfgTable might be populated as:\n   +---------+------------------------+--------------------------+-----+\n
      \  |applIndex| sipCommonCfgProtocol   | sipCommonCfgServiceOper  | ... |\n   |
      \        | Version                | Status                   |     |\n   +---------+------------------------+--------------------------+-----+\n
      \  |    1    |        \"SIP/2.0\"       |           up(1)          |     |\n
      \  |    2    |        \"SIP/2.0\"       |       restarting(4)      |     |\n
      \  +---------+------------------------+--------------------------+-----+\n   while
      the sipServerProxyCfgTable in SIP-SERVER-MIB might be populated\n   as:\n            +-----------+-------------------------------+-----+\n
      \           | applIndex | sipServerCfgProxyStatefulness | ... |\n            +-----------+-------------------------------+-----+\n
      \           |     1     |          stateless(1)         |     |\n            +-----------+-------------------------------+-----+\n
      \  and the sipServerRegUserTable in SIP-SERVER-MIB might be populated\n   as:\n
      \     +-----------+-----------------------+---------------------+-----+\n      |
      applIndex | sipServerRegUserIndex | sipServerRegUserUri | ... |\n      +-----------+-----------------------+---------------------+-----+\n
      \     |     2     |           1           |   bob@example.com   |     |\n      |
      \    2     |           2           |  alice@example.com  |     |\n      |     2
      \    |           3           |   jim@example.com   |     |\n      |     2     |
      \          4           |   john@example.com  |     |\n      +-----------+-----------------------+---------------------+-----+\n
      \  Example 2:\n   This example illustrates how to represent a system acting
      as both\n   Proxy and Registrar server, where the two entities share a single\n
      \  instance of SIP-COMMON-MIB.\n   The NETWORK-SERVICES-MIB applTable might
      be populated as follows:\n   +-----------+------------------------+------------------------------+\n
      \  | applIndex |        applName        |        applDescription       |\n   +-----------+------------------------+------------------------------+\n
      \  |     1     | \"sip_proxy_registrar1\" |      \"ACME SIP Proxy and     |\n
      \  |           |                        |          Registrar\"          |\n
      \  +-----------+------------------------+------------------------------+\n   The
      SIP-COMMON-MIB sipCommonCfgTable would have only one row to cover\n   both the
      proxy and the registrar.\n   The SIP-COMMON-MIB sipCommonCfgTable might be populated
      as:\n  +----------+---------------------------+-----------------------------+\n
      \ |applIndex |sipCommonCfgProtocolVersion|sipCommonCfgServiceOperStatus|\n  +----------+---------------------------+-----------------------------+\n
      \ |     1    |         \"SIP/2.0\"         |            up(1)            |\n
      \ +----------+---------------------------+-----------------------------+\n   while
      the sipServerRegUserTable in SIP-SERVER-MIB might be populated\n   as:\n      +-----------+-----------------------+---------------------+-----+\n
      \     | applIndex | sipServerRegUserIndex | sipServerRegUserUri | ... |\n      +-----------+-----------------------+---------------------+-----+\n
      \     |     2     |           1           |   bob@example.com   |     |\n      |
      \    2     |           2           |  alice@example.com  |     |\n      |     2
      \    |           3           |  kevin@example.com  |     |\n      |     2     |
      \          4           |    jf@example.com   |     |\n      +-----------+-----------------------+---------------------+-----+\n
      \  The NETWORK-SERVICES-MIB assocTable is not considered a requirement\n   for
      SIP systems.  It is not a mandatory group for compliance with the\n   NETWORK-SERVICES-MIB
      module.\n   The relationship between the value of applOperStatus and\n   sipCommonCfgServiceOperStatus
      is as follows:\n   +-------------------------------+---------------+-------------------+\n
      \  | sipCommonCfgServiceOperStatus |       --      |   applOperStatus  |\n   |
      \                              |  corresponds  |                   |\n   |                               |
      \    to -->    |                   |\n   +-------------------------------+---------------+-------------------+\n
      \  |               up              |      -->      |         up        |\n   |
      \             down             |      -->      |        down       |\n   |           congested
      \          |      -->      |     congested     |\n   |           restarting
      \         |      -->      |     restarting    |\n   |           quiescing           |
      \     -->      |     quiescing     |\n   |            testing            |      -->
      \     |         up        |\n   |            unknown            |      -->      |
      --indeterminate-- |\n   +-------------------------------+---------------+-------------------+\n
      \  If the sipOperStatus is 'unknown', there is no corresponding value of\n   applOperStatus.
      \ Therefore, the last known value of applOperStatus\n   SHOULD be maintained
      until the sipOperStatus transitions to a value\n   that can be mapped appropriately.\n"
    title: 5.2.  Relationship to the Network Services MIB
  - contents:
    - "5.3.  IMPORTed MIB Modules and REFERENCE Clauses\n   The SIP MIB modules defined
      in this document IMPORT definitions\n   normatively from the following MIB modules,
      beyond [RFC2578],\n   [RFC2579], and [RFC2580]: INET-ADDRESS-MIB [RFC4001],
      NETWORK-\n   SERVICES-MIB [RFC2788], SNMP-FRAMEWORK-MIB [RFC3411].\n   This
      MIB module also includes REFERENCE clauses that normatively\n   refer to SIP
      [RFC3261] and INET-ADDRESS-MIB [RFC4001].\n   Finally, this MIB module makes
      informative references to several RFCs\n   in some of the examples described
      in the DESCRIPTION clauses,\n   including Reliability of Provisional Responses
      in SIP [RFC3262] and\n   SIP over SCTP [RFC4168].\n"
    title: 5.3.  IMPORTed MIB Modules and REFERENCE Clauses
  title: 5.  Structure of the SIP MIB
- contents:
  - "6.  Accommodating SIP Extension Methods\n   The core set of SIP methods is defined
    in RFC 3261 [RFC3261].  Other\n   IETF RFCs define additional methods.  In the
    future, additional\n   methods may be defined.  In order to avoid having to update
    the SIP-\n   COMMON-MIB module to accommodate these extension methods, we use
    a\n   method identifier name (SipTCMethodName TEXTUAL-CONVENTION) to\n   represent
    all SIP methods registered with IANA.\n   For example, the sipCommonMethodSupportedTable
    is the main table for\n   listing all of the SIP methods supported by a system,
    including the\n   SIP methods defined in RFC 3261 [RFC3261] and other SIP methods\n
    \  registered with IANA.  The table is informational in nature and\n   populated
    by the system.  Entries cannot be added or deleted by an\n   SNMP manager.\n   The
    SIP specification (RFC 3261 [RFC3261], Section 27.4) establishes\n   the sub-registries
    for SIP Methods and Response Codes under\n   http://www.iana.org/assignments/sip-parameters.
    \ This document uses\n   the existing sub-registry for the names of registered
    SIP methods.\n   For example, in the sipCommonMethodSupportedTable of SIP-COMMON-MIB,\n
    \  the sipCommonMethodSupportedName values can be represented as\n   follows:\n
    \               +------------------------------+\n                | sipCommonMethodSupportedName
    |\n                +------------------------------+\n                |             \"ACK\"
    \           |\n                |             \"BYE\"            |\n                |
    \          \"CANCEL\"           |\n                |           \"INVITE\"           |\n
    \               |           \"OPTIONS\"          |\n                +------------------------------+\n"
  title: 6.  Accommodating SIP Extension Methods
- contents:
  - '7.  Definitions

    '
  - contents:
    - '7.1.  SIP Textual Conventions

      '
    - 'SIP-TC-MIB DEFINITIONS ::= BEGIN

      '
    - "IMPORTS\n    MODULE-IDENTITY,\n    mib-2\n          FROM SNMPv2-SMI        --
      RFC 2578\n    TEXTUAL-CONVENTION\n          FROM SNMPv2-TC;        -- RFC 2579\n"
    - "sipTC MODULE-IDENTITY\n    LAST-UPDATED \"200704200000Z\"\n    ORGANIZATION
      \"IETF Session Initiation Protocol Working Group\"\n    CONTACT-INFO\n             \"SIP
      WG email: sip@ietf.org\n              Co-editor  Kevin Lingle\n                         Cisco
      Systems, Inc.\n              postal:    7025 Kit Creek Road\n                         P.O.
      Box 14987\n                         Research Triangle Park, NC 27709\n                         USA\n
      \             email:     klingle@cisco.com\n              phone:     +1 919
      476 2029\n              Co-editor  Joon Maeng\n              email:     jmaeng@austin.rr.com\n
      \             Co-editor  Jean-Francois Mule\n                         CableLabs\n
      \             postal:    858 Coal Creek Circle\n                         Louisville,
      CO 80027\n                         USA\n              email:     jf.mule@cablelabs.com\n
      \             phone:     +1 303 661 9100\n              Co-editor  Dave Walker\n
      \             email:     drwalker@rogers.com\"\n    DESCRIPTION\n       \"Session
      Initiation Protocol (SIP) MIB TEXTUAL-CONVENTION\n        module used by other
      SIP-related MIB Modules.\n        Copyright (C) The IETF Trust (2007).  This
      version of\n        this MIB module is part of RFC 4780; see the RFC itself
      for\n        full legal notices.\"\n    REVISION     \"200704200000Z\"\n    DESCRIPTION\n
      \      \"Initial version of the IETF SIP-TC-MIB module.  This version\n        published
      as part of RFC 4780.\"\n     ::= { mib-2 148 }\n"
    - '--

      '
    - '-- Textual Conventions

      '
    - '--

      '
    - "SipTCTransportProtocol ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n
      \      \"This convention is a bit map.  Each bit represents a transport\n        protocol.
      \ If a bit has value 1, then that selected transport\n        protocol is in
      some way dependent on the context of the object\n        using this convention.
      \ If a bit has value 0, then that\n        transport protocol is not selected.
      \ Combinations of bits can\n        be set when multiple transport protocols
      are selected.\n        bit 0: a protocol other than those defined here\n        bit
      1: User Datagram Protocol\n        bit 2: Transmission Control Protocol\n        bit
      3: Stream Control Transmission Protocol\n        bit 4: Transport Layer Security
      Protocol over TCP\n        bit 5: Transport Layer Security Protocol over SCTP\n
      \      \"\n    REFERENCE \"RFC 3261, Section 18 and RFC 4168\"\n    SYNTAX      BITS
      {\n                  other(0),  -- none of the following\n                  udp(1),\n
      \                 tcp(2),\n                  sctp(3),   -- RFC4168\n                  tlsTcp(4),\n
      \                 tlsSctp(5) -- RFC 4168\n                }\n"
    - "SipTCEntityRole ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n
      \      \"This convention defines the role of a SIP entity.  Examples of\n        SIP
      entities are proxies, user agents, redirect servers,\n        registrars, or
      combinations of the above.\n        User Agent (UA): A logical entity that can
      act as both a user\n        agent client and user agent server.\n        User
      Agent Client (UAC): A logical entity that creates a new\n        request, and
      then uses the client transaction state machinery\n        to send it.  The role
      of UAC lasts only for the duration of\n        that transaction.  In other words,
      if a piece of software\n        initiates a request, it acts as a UAC for the
      duration of that\n        transaction.  If it receives a request later, it assumes
      the\n        role of a user agent server for the processing of that\n        transaction.\n
      \       User Agent Server (UAS): A logical entity that generates a\n        response
      to a SIP request.  The response accepts, rejects,\n        or redirects the
      request.  This role lasts only for the\n        duration of that transaction.
      \ In other words, if a piece of\n        software responds to a request, it
      acts as a UAS for the\n        duration of that transaction.  If it generates
      a request\n        later, it assumes the role of a user agent client for the\n
      \       processing of that transaction.\n        Proxy, Proxy Server: An intermediary
      entity that acts as both\n        a server and a client for the purpose of making
      requests on\n        behalf of other clients.  A proxy server primarily plays
      the\n        role of routing, which means its job is to ensure that a\n        request
      is sent to another entity 'closer' to the targeted\n        user.  Proxies are
      also useful for enforcing policy.  A proxy\n        interprets and, if necessary,
      rewrites specific parts of a\n        request message before forwarding it.\n
      \       Redirect Server: A redirect server is a user agent server that\n        generates
      3xx responses to requests it receives, directing the\n        client to contact
      an alternate set of URIs.\n        Registrar: A registrar is a server that accepts
      REGISTER\n        requests and places the information it receives in those\n
      \       requests into the location service for the domain it handles.\"\n    REFERENCE\n
      \      \"RFC 3261, Section 6\"\n    SYNTAX      BITS {\n                  other(0),\n
      \                 userAgent(1),\n                  proxyServer(2),\n                  redirectServer(3),\n
      \                 registrarServer(4)\n                }\n"
    - "SipTCOptionTagHeaders ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n
      \      \"This convention defines the header fields that use the option\n        tags
      per Section 19.2 of RFC 3261.  These tags are used in\n        Require (Section
      20.32), Proxy-Require (Section 20.29),\n        Supported (Section 20.37), and
      Unsupported (Section 20.40)\n        header fields.\"\n    REFERENCE\n       \"RFC
      3261, Sections 19.2, 20.32, 20.29, 20.37, and 20.40\"\n    SYNTAX      BITS
      {\n                  require(0),       -- Require header\n                  proxyRequire(1),
      \ -- Proxy-Require header\n                  supported(2),     -- Supported
      header\n                  unsupported(3)    -- Unsupported header\n                }\n"
    - "SipTCMethodName ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n
      \      \"This TEXTUAL-CONVENTION is a string that uniquely identifies a\n        SIP
      method.  The scope of uniqueness is the context of all\n        defined SIP
      methods.\n        Experimental support of extension methods is acceptable and\n
      \       expected.  Extension methods are those defined in\n        Internet-Draft
      documents but not yet allocated and\n        officially sanctioned by IANA.\n
      \       To support experimental extension methods, any object using\n        this
      TEXTUAL-CONVENTION as syntax MAY return/accept a method\n        identifier
      value other than those sanctioned by IANA.  That\n        system MUST ensure
      no collisions with officially assigned\n        method names.\"\n    REFERENCE\n
      \      \"RFC 3261, Section 27.4\"\n    SYNTAX      OCTET STRING (SIZE (1..100))\n"
    - 'END

      '
    title: 7.1.  SIP Textual Conventions
  - contents:
    - '7.2.  SIP Common MIB Module

      '
    - 'SIP-COMMON-MIB DEFINITIONS ::= BEGIN

      '
    - "IMPORTS\n    MODULE-IDENTITY,\n    OBJECT-TYPE,\n    NOTIFICATION-TYPE,\n    Counter32,\n
      \   Gauge32,\n    TimeTicks,\n    Unsigned32,\n    mib-2\n          FROM SNMPv2-SMI
      \            -- RFC 2578\n    RowStatus,\n    TimeStamp,\n    TruthValue\n          FROM
      SNMPv2-TC              -- RFC 2579\n    MODULE-COMPLIANCE,\n    OBJECT-GROUP,\n
      \   NOTIFICATION-GROUP\n          FROM SNMPv2-CONF            -- RFC 2580\n
      \   SnmpAdminString\n          FROM SNMP-FRAMEWORK-MIB     -- RFC 3411\n    SipTCTransportProtocol,\n
      \   SipTCMethodName,\n    SipTCEntityRole,\n    SipTCOptionTagHeaders\n          FROM
      SIP-TC-MIB             -- RFC 4780\n    applIndex\n          FROM NETWORK-SERVICES-MIB
      \  -- RFC 2788\n    InetPortNumber\n          FROM INET-ADDRESS-MIB;      --
      RFC 4001\n"
    - "sipCommonMIB MODULE-IDENTITY\n    LAST-UPDATED \"200704200000Z\"\n    ORGANIZATION
      \"IETF Session Initiation Protocol Working Group\"\n    CONTACT-INFO\n             \"SIP
      WG email: sip@ietf.org\n              Co-editor  Kevin Lingle\n                         Cisco
      Systems, Inc.\n              postal:    7025 Kit Creek Road\n                         P.O.
      Box 14987\n                         Research Triangle Park, NC 27709\n                         USA\n
      \             email:     klingle@cisco.com\n              phone:     +1 919
      476 2029\n              Co-editor  Joon Maeng\n              email:     jmaeng@austin.rr.com\n
      \             Co-editor  Jean-Francois Mule\n                         CableLabs\n
      \             postal:    858 Coal Creek Circle\n                         Louisville,
      CO 80027\n                         USA\n              email:     jf.mule@cablelabs.com\n
      \             phone:     +1 303 661 9100\n              Co-editor  Dave Walker\n
      \             email:     drwalker@rogers.com\"\n    DESCRIPTION\n       \"Session
      Initiation Protocol (SIP) Common MIB module.  This\n        module defines objects
      that may be common to all SIP entities.\n        SIP is an application-layer
      signaling protocol for creating,\n        modifying and terminating multimedia
      sessions with one or more\n        participants.  These sessions include Internet
      multimedia\n        conferences and Internet telephone calls.  SIP is defined
      in\n        RFC 3261 (June 2002).\n        This MIB is defined for managing
      objects that are common to\n        SIP User Agents (UAs), Proxy, Redirect,
      and Registrar servers.\n        Objects specific to each of these entities MAY
      be managed using\n        entity specific MIBs defined in other modules.\n        Copyright
      (C) The IETF Trust (2007).  This version of\n        this MIB module is part
      of RFC 4780; see the RFC itself for\n        full legal notices.\"\n    REVISION
      \    \"200704200000Z\"\n    DESCRIPTION\n        \"Initial version of the IETF
      SIP-COMMON-MIB module.  This\n         version published as part of RFC 4780.\"\n
      \    ::= { mib-2 149 }\n"
    - '-- Top-Level Components of this MIB.

      '
    - 'sipCommonMIBNotifications OBJECT IDENTIFIER ::= { sipCommonMIB 0 }

      '
    - 'sipCommonMIBObjects       OBJECT IDENTIFIER ::= { sipCommonMIB 1 }

      '
    - 'sipCommonMIBConformance   OBJECT IDENTIFIER ::= { sipCommonMIB 2 }

      '
    - '--

      '
    - '-- This MIB contains objects that are common to all SIP entities.

      '
    - '--

      '
    - '-- Common basic configuration

      '
    - 'sipCommonCfgBase       OBJECT IDENTIFIER ::= { sipCommonMIBObjects 1 }

      '
    - '-- Protocol timer configuration

      '
    - 'sipCommonCfgTimer      OBJECT IDENTIFIER ::= { sipCommonMIBObjects 2 }

      '
    - '-- SIP message summary statistics

      '
    - 'sipCommonSummaryStats  OBJECT IDENTIFIER ::= { sipCommonMIBObjects 3 }

      '
    - '-- Per method statistics

      '
    - 'sipCommonMethodStats   OBJECT IDENTIFIER ::= { sipCommonMIBObjects 4 }

      '
    - '-- Per Status code or status code class statistics

      '
    - 'sipCommonStatusCode    OBJECT IDENTIFIER ::= { sipCommonMIBObjects 5 }

      '
    - '-- Transaction statistics

      '
    - 'sipCommonStatsTrans    OBJECT IDENTIFIER ::= { sipCommonMIBObjects 6 }

      '
    - '-- Method retry statistics

      '
    - 'sipCommonStatsRetry    OBJECT IDENTIFIER ::= { sipCommonMIBObjects 7 }

      '
    - '-- Other statistics

      '
    - 'sipCommonOtherStats    OBJECT IDENTIFIER ::= { sipCommonMIBObjects 8 }

      '
    - '-- Accessible-for-notify objects

      '
    - 'sipCommonNotifObjects  OBJECT IDENTIFIER ::= { sipCommonMIBObjects 9 }

      '
    - '--

      '
    - '-- Common Configuration Objects

      '
    - '--

      '
    - "sipCommonCfgTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonCfgEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains the common configuration objects applicable\n        to all SIP
      entities.\"\n    ::= { sipCommonCfgBase 1 }\n"
    - "sipCommonCfgEntry OBJECT-TYPE\n    SYNTAX      SipCommonCfgEntry\n    MAX-ACCESS
      \ not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A row of
      common configuration.\n        Each row represents objects for a particular
      SIP entity\n        instance present in this system.  applIndex is used to uniquely\n
      \       identify these instances of SIP entities and correlate them\n        through
      the common framework of the NETWORK-SERVICES-MIB (RFC\n        2788).\"\n    INDEX
      { applIndex }\n    ::= { sipCommonCfgTable 1 }\n"
    - "SipCommonCfgEntry ::= SEQUENCE {\n        sipCommonCfgProtocolVersion      SnmpAdminString,\n
      \       sipCommonCfgServiceOperStatus    INTEGER,\n        sipCommonCfgServiceStartTime
      \    TimeTicks,\n        sipCommonCfgServiceLastChange    TimeTicks,\n        sipCommonCfgOrganization
      \        SnmpAdminString,\n        sipCommonCfgMaxTransactions      Unsigned32,\n
      \       sipCommonCfgServiceNotifEnable   BITS,\n        sipCommonCfgEntityType
      \          SipTCEntityRole\n    }\n"
    - "sipCommonCfgProtocolVersion OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object will reflect the version of SIP supported by this\n        SIP entity.
      \ It will follow the same format as SIP version\n        information contained
      in the SIP messages generated by this SIP\n        entity.  For example, entities
      supporting SIP version 2 will\n        return 'SIP/2.0' as dictated by the standard.\"\n
      \   REFERENCE\n       \"RFC 3261, Section 7.1\"\n    ::= { sipCommonCfgEntry
      1 }\n"
    - "sipCommonCfgServiceOperStatus OBJECT-TYPE\n    SYNTAX      INTEGER {\n                  unknown(1),\n
      \                 up(2),\n                  down(3),\n                  congested(4),\n
      \                 restarting(5),\n                  quiescing(6),\n                  testing(7)\n
      \               }\n    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n
      \      \"This object contains the current operational state of\n        the
      SIP application.\n        unknown    : The operational status cannot be determined\n
      \                    for some reason.\n        up         : The application
      is operating normally and is\n                     processing (receiving and
      possibly issuing) SIP\n                     requests and responses.\n        down
      \      : The application is currently unable to process\n                     SIP
      messages.\n        congested  : The application is operational but no additional\n
      \                    inbound transactions can be accommodated at the\n                     moment.\n
      \       restarting : The application is currently unavailable, but it\n                     is
      in the process of restarting and will\n                     presumably, soon
      be able to process SIP messages.\n        quiescing  : The application is currently
      operational\n                     but has been administratively put into\n                     quiescence
      mode.  Additional inbound\n                     transactions MAY be rejected.\n
      \       testing    : The application is currently in test mode\n                     and
      MAY not be able to process SIP messages.\n        The operational status values
      defined for this object are not\n        based on any specific information contained
      in the SIP\n        standard.\"\n    ::= { sipCommonCfgEntry 2 }\n"
    - "sipCommonCfgServiceStartTime OBJECT-TYPE\n    SYNTAX      TimeTicks\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"The value of
      sysUpTime at the time the SIP entity was last\n        started.  If started
      prior to the last re-initialization of the\n        local network management
      subsystem, then this object contains a\n        zero value.\"\n    ::= { sipCommonCfgEntry
      3 }\n"
    - "sipCommonCfgServiceLastChange OBJECT-TYPE\n    SYNTAX      TimeTicks\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"The value of
      sysUpTime at the time the SIP entity entered its\n        current operational
      state.  If the current state was entered\n        prior to the last re-initialization
      of the local network\n        management subsystem, then this object contains
      a zero value.\"\n    ::= { sipCommonCfgEntry 4 }\n"
    - "sipCommonCfgOrganization OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      contains the organization name that the SIP entity\n        inserts into Organization
      headers of SIP messages processed by\n        this system.  If the string is
      empty, no Organization header is\n        to be generated.\"\n    REFERENCE\n
      \      \"RFC 3261, Section 20.25\"\n    ::= { sipCommonCfgEntry 5 }\n"
    - "sipCommonCfgMaxTransactions OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..4294967295)\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object indicates the maximum number of simultaneous\n        transactions per
      second that the SIP entity can manage.  In\n        general, the value of this
      object SHOULD reflect a level of\n        transaction processing per second
      that is considered high\n        enough to impact the system's CPU and/or memory
      resources to\n        the point of deteriorating SIP call processing but not
      high\n        enough to cause catastrophic system failure.\"\n    ::= { sipCommonCfgEntry
      6 }\n"
    - "sipCommonCfgServiceNotifEnable OBJECT-TYPE\n    SYNTAX      BITS {\n                  sipCommonServiceColdStart(0),\n
      \                 sipCommonServiceWarmStart(1),\n                  sipCommonServiceStatusChanged(2)\n
      \               }\n    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n
      \      \"This object specifies which SIP service related notifications\n        are
      enabled.  Each bit represents a specific notification.  If\n        a bit has
      a value 1, the associated notification is enabled and\n        will be generated
      by the SIP entity at the appropriate time.\n        Support for these notifications
      is OPTIONAL: either none or all\n        notification values are supported.
      \ If an implementation does\n        not support this object, it should return
      a 'noSuchObject'\n        exception to an SNMP GET operation.  If notifications
      are\n        supported, this object's default value SHOULD reflect\n        sipCommonServiceColdStart
      and sipCommonServiceWarmStart enabled\n        and sipCommonServiceStatusChanged
      disabled.\n        This object value SHOULD persist across reboots.\"\n    DEFVAL
      { { sipCommonServiceColdStart,\n               sipCommonServiceWarmStart } }\n
      \   ::= { sipCommonCfgEntry 7 }\n"
    - "sipCommonCfgEntityType OBJECT-TYPE\n    SYNTAX      SipTCEntityRole\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      identifies the list of SIP entities to which this\n        row is related.  It
      is defined as a bit map.  Each bit\n        represents a type of SIP entity.
      \ If a bit has value 1, the\n        SIP entity represented by this row plays
      the role of this\n        entity type.  If a bit has value 0, the SIP entity
      represented\n        by this row does not act as this entity type.  Combinations\n
      \       of bits can be set when the SIP entity plays multiple SIP\n        roles.\"\n
      \   ::= { sipCommonCfgEntry 8 }\n"
    - '--

      '
    - '-- Support for multiple ports

      '
    - '--

      '
    - "sipCommonPortTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonPortEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains the list of ports that each SIP entity in\n        this system
      is allowed to use.  These ports can be advertised\n        using the Contact
      header in a REGISTER request or response.\"\n    ::= { sipCommonCfgBase 2 }\n"
    - "sipCommonPortEntry OBJECT-TYPE\n    SYNTAX      SipCommonPortEntry\n    MAX-ACCESS
      \ not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"Specification
      of a particular port.\n        Each row represents those objects for a particular
      SIP entity\n        present in this system.  applIndex is used to uniquely identify\n
      \       these instances of SIP entities and correlate them through\n        the
      common framework of the NETWORK-SERVICES-MIB (RFC 2788).\"\n    INDEX { applIndex,
      sipCommonPort }\n    ::= { sipCommonPortTable 1 }\n"
    - "SipCommonPortEntry ::= SEQUENCE {\n        sipCommonPort                 InetPortNumber,\n
      \       sipCommonPortTransportRcv     SipTCTransportProtocol\n    }\n"
    - "sipCommonPort OBJECT-TYPE\n    SYNTAX      InetPortNumber (1..65535)\n    MAX-ACCESS
      \ not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This object
      reflects a particular port that can be used by the\n        SIP application.\"\n
      \   ::= { sipCommonPortEntry 1 }\n"
    - "sipCommonPortTransportRcv OBJECT-TYPE\n    SYNTAX      SipTCTransportProtocol\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object will specify the transport protocol the SIP entity\n        will use
      to receive SIP messages.\n        This object is a bit map.  Each bit represents
      a transport\n        protocol.  If a bit has value 1, then that transport protocol\n
      \       is currently being used.  If a bit has value 0, then that\n        transport
      protocol is currently not being used.\"\n    ::= { sipCommonPortEntry 2 }\n"
    - '--

      '
    - '-- Support for SIP option tags (SIP extensions).

      '
    - '-- SIP extensions MAY be supported or required by SIP entities.

      '
    - '--

      '
    - "sipCommonOptionTagTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonOptionTagEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains a list of the SIP option tags (SIP\n        extensions) that
      are either required, supported, or\n        unsupported by the SIP entity.  These
      option tags are\n        used in the Require, Proxy-Require, Supported, and\n
      \       Unsupported header fields.\n        Example: If a user agent client
      supports, and requires the\n        server to support, reliability of provisional
      responses\n        (RFC 3262), this table contains a row with the option tag
      string\n        '100rel' in sipCommonOptionTag and the OCTET STRING value of\n
      \       '1010 0000' or '0xA0' in sipCommonOptionTagHeaderField.\n        If
      a server does not support the required feature (indicated in\n        a Require
      header to a UAS, or in a Proxy-Require to a Proxy\n        Server), the server
      returns a 420 Bad Extension listing the\n        feature in an Unsupported header.\n
      \       Normally, the list of such features supported by an entity is\n        static
      (i.e., will not change over time).\"\n    REFERENCE\n       \"RFC 3261, Sections
      19.2, 20.32, 20.29, 20.37, and 20.40\"\n    ::= { sipCommonCfgBase 3 }\n"
    - "sipCommonOptionTagEntry OBJECT-TYPE\n    SYNTAX      SipCommonOptionTagEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A
      particular SIP option tag (extension) supported or\n        unsupported by the
      SIP entity, and which may be supported or\n        required by a peer.\n        Each
      row represents those objects for a particular SIP entity\n        present in
      this system.  applIndex is used to uniquely identify\n        these instances
      of SIP entities and correlate them through the\n        common framework of
      the NETWORK-SERVICES-MIB (RFC 2788).\"\n    INDEX { applIndex, sipCommonOptionTagIndex
      }\n    ::= { sipCommonOptionTagTable 1 }\n"
    - "SipCommonOptionTagEntry ::= SEQUENCE {\n        sipCommonOptionTagIndex        Unsigned32,\n
      \       sipCommonOptionTag             SnmpAdminString,\n        sipCommonOptionTagHeaderField
      \ SipTCOptionTagHeaders\n    }\n"
    - "sipCommonOptionTagIndex OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..4294967295)\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      object uniquely identifies a conceptual row in the table.\"\n    ::= { sipCommonOptionTagEntry
      1 }\n"
    - "sipCommonOptionTag OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      indicates the SIP option tag.  The option tag names\n       are registered with
      IANA and available at http://www.iana.org.\"\n    REFERENCE \"RFC 3261, Section
      27.1\"\n    ::= { sipCommonOptionTagEntry 2 }\n"
    - "sipCommonOptionTagHeaderField OBJECT-TYPE\n    SYNTAX      SipTCOptionTagHeaders\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object indicates whether the SIP option tag is supported\n        (Supported
      header), unsupported (Unsupported header), or\n        required (Require or
      Proxy-Require header) by the SIP entity.\n        A SIP option tag may be both
      supported and required.\"\n    ::= { sipCommonOptionTagEntry 3 }\n"
    - '--

      '
    - '-- Supported SIP Methods

      '
    - '--

      '
    - "sipCommonMethodSupportedTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonMethodSupportedEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains a list of methods supported by each SIP\n        entity in this
      system (see the standard set of SIP methods in\n        Section 7.1 of RFC 3261).
      \ Any additional methods that may be\n        incorporated into the SIP protocol
      can be represented by this\n        table without any requirement to update
      this MIB module.\n        The table is informational in nature and conveys capabilities\n
      \       of the managed system to the SNMP Manager.\n        From a protocol
      point of view, the list of methods advertised\n        by the SIP entity in
      the Allow header (Section 20.5 of RFC\n        3261) MUST be consistent with
      the methods reflected in this\n        table.\"\n ::= { sipCommonCfgBase 4 }\n"
    - "sipCommonMethodSupportedEntry OBJECT-TYPE\n    SYNTAX      SipCommonMethodSupportedEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A
      particular method supported by the SIP entity.\n        Each row represents
      those objects for a particular SIP entity\n        present in this system.  applIndex
      is used to uniquely identify\n        these instances of SIP entities and correlate
      them through\n        the common framework of the NETWORK-SERVICES-MIB (RFC
      2788).\"\n    INDEX { applIndex, sipCommonMethodSupportedIndex }\n    ::= {
      sipCommonMethodSupportedTable 1 }\n"
    - "SipCommonMethodSupportedEntry ::= SEQUENCE {\n        sipCommonMethodSupportedIndex
      \    Unsigned32,\n        sipCommonMethodSupportedName      SipTCMethodName\n
      \   }\n"
    - "sipCommonMethodSupportedIndex OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..4294967295)\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      object uniquely identifies a conceptual row in the table\n        and reflects
      an assigned number used to identify a specific\n        SIP method.\n        This
      identifier is suitable for referencing the associated\n        method throughout
      this and other MIBs supported by this managed\n        system.\"\n    ::= {
      sipCommonMethodSupportedEntry 1 }\n"
    - "sipCommonMethodSupportedName OBJECT-TYPE\n    SYNTAX      SipTCMethodName\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object reflects the supported method's name.  The method\n        name MUST
      be all upper case (e.g., 'INVITE').\"\n ::= { sipCommonMethodSupportedEntry
      2 }\n"
    - '--

      '
    - '-- SIP Timer Configuration

      '
    - '--

      '
    - "sipCommonCfgTimerTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonCfgTimerEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains timer configuration objects applicable to\n        SIP user agent
      and SIP stateful Proxy Server entities.\"\n    ::= { sipCommonCfgTimer 1 }\n"
    - "sipCommonCfgTimerEntry OBJECT-TYPE\n    SYNTAX      SipCommonCfgTimerEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A
      row of timer configuration.\n        Each row represents those objects for a
      particular SIP entity\n        present in this system.  applIndex is used to
      uniquely identify\n        these instances of SIP entities and correlate them
      through\n        the common framework of the NETWORK-SERVICES-MIB (RFC 2788).\n
      \       The objects in this table entry SHOULD be non-volatile and\n        their
      value SHOULD be kept at reboot.\"\n    INDEX { applIndex }\n    ::= { sipCommonCfgTimerTable
      1 }\n"
    - "SipCommonCfgTimerEntry ::= SEQUENCE {\n        sipCommonCfgTimerA               Unsigned32,\n
      \       sipCommonCfgTimerB               Unsigned32,\n        sipCommonCfgTimerC
      \              Unsigned32,\n        sipCommonCfgTimerD               Unsigned32,\n
      \       sipCommonCfgTimerE               Unsigned32,\n        sipCommonCfgTimerF
      \              Unsigned32,\n        sipCommonCfgTimerG               Unsigned32,\n
      \       sipCommonCfgTimerH               Unsigned32,\n        sipCommonCfgTimerI
      \              Unsigned32,\n        sipCommonCfgTimerJ               Unsigned32,\n
      \       sipCommonCfgTimerK               Unsigned32,\n        sipCommonCfgTimerT1
      \             Unsigned32,\n        sipCommonCfgTimerT2              Unsigned32,\n
      \       sipCommonCfgTimerT4              Unsigned32\n    }\n"
    - "sipCommonCfgTimerA OBJECT-TYPE\n    SYNTAX      Unsigned32 (100..1000)\n    UNITS
      \     \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the initial value for the retransmit
      timer\n        for the INVITE method.  The retransmit timer doubles after each\n
      \       retransmission, ensuring an exponential backoff in network\n        traffic.
      \ This object represents the initial time a SIP entity\n        will wait to
      receive a provisional response to an INVITE before\n        resending the INVITE
      request.\"\n    REFERENCE\n       \"RFC 3261, Section 17.1.1.2\"\n    DEFVAL
      { 500 }\n    ::= { sipCommonCfgTimerEntry 1 }\n"
    - "sipCommonCfgTimerB OBJECT-TYPE\n    SYNTAX      Unsigned32 (32000..300000)\n
      \   UNITS      \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the maximum time a SIP entity
      will wait to\n        receive a final response to an INVITE.  The timer is started\n
      \       upon transmission of the initial INVITE request.\"\n    REFERENCE\n
      \      \"RFC 3261, Section 17.1.1.2\"\n    DEFVAL { 32000 }\n"
    - '::= { sipCommonCfgTimerEntry 2 }

      '
    - "sipCommonCfgTimerC OBJECT-TYPE\n    SYNTAX      Unsigned32 (180000..300000)\n
      \   UNITS      \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the maximum time a SIP Proxy
      Server will\n        wait to receive a provisional response to an INVITE.  The
      Timer\n        C MUST be set for each client transaction when an INVITE\n        request
      is proxied.\"\n    REFERENCE\n       \"RFC 3261, Section 16.6\"\n    DEFVAL
      { 180000 }\n    ::= { sipCommonCfgTimerEntry 3 }\n"
    - "sipCommonCfgTimerD OBJECT-TYPE\n    SYNTAX      Unsigned32 (0..300000)\n    UNITS
      \     \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the amount of time that the server\n
      \       transaction can remain in the 'Completed' state when unreliable\n        transports
      are used.  The default value MUST be equal to or\n        greater than 32000
      for UDP transport, and its value MUST be 0\n        for TCP/SCTP transport.\"\n
      \   REFERENCE\n       \"RFC 3261, Section 17.1.1.2\"\n    DEFVAL { 32000 }\n
      \   ::= { sipCommonCfgTimerEntry 4 }\n"
    - "sipCommonCfgTimerE OBJECT-TYPE\n    SYNTAX      Unsigned32 (100..1000)\n    UNITS
      \     \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the initial value for the retransmit
      timer\n        for a non-INVITE method while in 'Trying' state.  The\n        retransmit
      timer doubles after each retransmission until it\n        reaches T2 to ensure
      an exponential backoff in network traffic.\n        This object represents the
      initial time a SIP entity will wait\n        to receive a provisional response
      to the request before\n        resending the non-INVITE request.\"\n    REFERENCE\n
      \      \"RFC 3261, Section 17.1.2.2\"\n    DEFVAL { 500 }\n    ::= { sipCommonCfgTimerEntry
      5 }\n"
    - "sipCommonCfgTimerF  OBJECT-TYPE\n    SYNTAX      Unsigned32 (32000..300000)\n
      \   UNITS      \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the maximum time a SIP entity
      will wait to\n        receive a final response to a non-INVITE request.  The
      timer is\n        started upon transmission of the initial request.\"\n    REFERENCE\n
      \      \"RFC 3261, Section 17.1.2.2\"\n    DEFVAL { 32000 }\n    ::= { sipCommonCfgTimerEntry
      6 }\n"
    - "sipCommonCfgTimerG  OBJECT-TYPE\n    SYNTAX      Unsigned32 (0..1000)\n    UNITS
      \     \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the initial value for the retransmit
      timer\n        for final responses to INVITE requests.  If timer G fires, the\n
      \       response is passed to the transport layer again for\n        retransmission,
      and timer G is set to fire in MIN(2*T1, T2)\n        seconds.  From then on,
      when timer G fires, the response is\n        passed to the transport again for
      transmission, and timer G is\n        reset with a value that doubles, unless
      that value exceeds T2,\n        in which case, it is reset with the value of
      T2.  The default\n        value MUST be T1 for UDP transport, and its value
      MUST be 0 for\n        reliable transport like TCP/SCTP.\"\n    REFERENCE\n
      \      \"RFC 3261, Section 17.2.1\"\n    DEFVAL { 500 }\n    ::= { sipCommonCfgTimerEntry
      7 }\n"
    - "sipCommonCfgTimerH  OBJECT-TYPE\n    SYNTAX      Unsigned32 (32000..300000)\n
      \   UNITS      \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the maximum time a server will
      wait to\n        receive an ACK before it abandons retransmitting the response.\n
      \       The timer is started upon entering the 'Completed' state.\"\n    REFERENCE\n
      \      \"RFC 3261, Section 17.2.1\"\n    DEFVAL { 32000 }\n    ::= { sipCommonCfgTimerEntry
      8 }\n"
    - "sipCommonCfgTimerI  OBJECT-TYPE\n    SYNTAX      Unsigned32 (0..10000)\n    UNITS
      \     \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the maximum time a SIP entity
      will wait to\n        receive additional ACK message retransmissions.\n        The
      timer is started upon entering the 'Confirmed' state.  The\n        default
      value MUST be T4 for UDP transport and its value MUST\n        be 0 for reliable
      transport like TCP/SCTP.\"\n    REFERENCE\n       \"RFC 3261, Section 17.2.1\"\n
      \   DEFVAL { 5000 }\n    ::= { sipCommonCfgTimerEntry 9 }\n"
    - "sipCommonCfgTimerJ  OBJECT-TYPE\n    SYNTAX      Unsigned32 (32000..300000)\n
      \   UNITS      \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the maximum time a SIP server
      will wait to\n        receive retransmissions of non-INVITE requests.  The timer
      is\n        started upon entering the 'Completed' state for non-INVITE\n        transactions.
      \ When timer J fires, the server MUST transition to\n        the 'Terminated'
      state.\"\n    REFERENCE\n       \"RFC 3261, Section 17.2.2\"\n    DEFVAL { 32000
      }\n    ::= { sipCommonCfgTimerEntry 10 }\n"
    - "sipCommonCfgTimerK  OBJECT-TYPE\n    SYNTAX      Unsigned32 (0..10000)\n    UNITS
      \     \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the maximum time a SIP client
      will wait to\n        receive retransmissions of responses to non-INVITE requests.\n
      \       The timer is started upon entering the 'Completed' state for\n        non-INVITE
      transactions.  When timer K fires, the server MUST\n        transition to the
      'Terminated' state.  The default value MUST\n        be T4 for UDP transport,
      and its value MUST be 0 for reliable\n        transport like TCP/SCTP.\"\n    REFERENCE\n
      \      \"RFC 3261, Section 17.1.2.2\"\n    DEFVAL { 5000 }\n    ::= { sipCommonCfgTimerEntry
      11 }\n"
    - "sipCommonCfgTimerT1  OBJECT-TYPE\n    SYNTAX      Unsigned32 (200..10000)\n
      \   UNITS      \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the T1 timer for a SIP entity.
      \ T1 is an\n        estimate of the round-trip time (RTT) between the client
      and\n        server transactions.\"\n    REFERENCE\n       \"RFC 3261, Section
      17\"\n    DEFVAL { 500 }\n    ::= { sipCommonCfgTimerEntry 12 }\n"
    - "sipCommonCfgTimerT2  OBJECT-TYPE\n    SYNTAX      Unsigned32 (200..10000)\n
      \   UNITS      \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the T2 timer for a SIP entity.
      \ T2 is the\n        maximum retransmit interval for non-INVITE requests and
      INVITE\n        responses.  It's used in various parts of the protocol to reset\n
      \       other Timer* objects to this value.\"\n    REFERENCE\n       \"RFC 3261,
      Section 17\"\n    DEFVAL { 4000 }\n    ::= { sipCommonCfgTimerEntry 13 }\n"
    - "sipCommonCfgTimerT4  OBJECT-TYPE\n    SYNTAX      Unsigned32 (200..10000)\n
      \   UNITS      \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the T4 timer for a SIP entity.
      \ T4 is the\n        maximum duration a message will remain in the network.
      \ It\n        represents the amount of time the network will take to clear\n
      \       messages between client and server transactions.  It's used in\n        various
      parts of the protocol to reset other Timer* objects to\n        this value.\"\n
      \   REFERENCE\n       \"RFC 3261, Section 17\"\n    DEFVAL { 5000 }\n    ::=
      { sipCommonCfgTimerEntry 14 }\n"
    - '--

      '
    - '-- Common Statistics Objects

      '
    - '--

      '
    - '--

      '
    - '-- Summary Statistics

      '
    - '--

      '
    - "sipCommonSummaryStatsTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonSummaryStatsEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains the summary statistics objects applicable\n        to all SIP
      entities.  Each row represents those objects for a\n        particular SIP entity
      present in this system.\"\n    ::= { sipCommonSummaryStats 1 }\n"
    - "sipCommonSummaryStatsEntry OBJECT-TYPE\n    SYNTAX      SipCommonSummaryStatsEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A
      row of summary statistics.\n        Each row represents those objects for a
      particular SIP entity\n        present in this system.  applIndex is used to
      uniquely identify\n        these instances of SIP entities and correlate them
      through\n        the common framework of the NETWORK-SERVICES-MIB (RFC 2788).\"\n
      \   INDEX { applIndex }\n    ::= { sipCommonSummaryStatsTable 1 }\n"
    - "SipCommonSummaryStatsEntry ::= SEQUENCE {\n        sipCommonSummaryInRequests
      \        Counter32,\n        sipCommonSummaryOutRequests        Counter32,\n
      \       sipCommonSummaryInResponses        Counter32,\n        sipCommonSummaryOutResponses
      \      Counter32,\n        sipCommonSummaryTotalTransactions  Counter32,\n        sipCommonSummaryDisconTime
      \        TimeStamp\n    }\n"
    - "sipCommonSummaryInRequests OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      indicates the total number of SIP request messages\n        received by the
      SIP entity, including retransmissions.\n        Discontinuities in the value
      of this counter can occur at\n        re-initialization of the SIP entity or
      service.  A Management\n        Station can detect discontinuities in this counter
      by\n        monitoring the sipCommonSummaryDisconTime object in the same\n        row.\"\n
      \   ::= { sipCommonSummaryStatsEntry 1 }\n"
    - "sipCommonSummaryOutRequests OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      contains the total number of SIP request messages\n        sent out (originated
      and relayed) by the SIP entity.  Where a\n        particular message is sent
      more than once, for example as a\n        retransmission or as a result of forking,
      each transmission is\n        counted separately.\n        Discontinuities in
      the value of this counter can occur at\n        re-initialization of the SIP
      entity or service.  A Management\n        Station can detect discontinuities
      in this counter by\n        monitoring the sipCommonSummaryDisconTime object
      in the same\n        row.\"\n    ::= { sipCommonSummaryStatsEntry 2 }\n"
    - "sipCommonSummaryInResponses OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      contains the total number of SIP response messages\n        received by the
      SIP entity, including retransmissions.\n        Discontinuities in the value
      of this counter can occur at\n        re-initialization of the SIP entity or
      service.  A Management\n        Station can detect discontinuities in this counter
      by\n        monitoring the sipCommonSummaryDisconTime object in the same\n        row.\"\n
      \   ::= { sipCommonSummaryStatsEntry 3 }\n"
    - "sipCommonSummaryOutResponses OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      contains the total number of SIP response messages\n        sent (originated
      and relayed) by the SIP entity including\n        retransmissions.\n        Discontinuities
      in the value of this counter can occur at\n        re-initialization of the
      SIP entity or service.  A Management\n        Station can detect discontinuities
      in this counter by\n        monitoring the sipCommonSummaryDisconTime object
      in the same\n        row.\"\n    ::= { sipCommonSummaryStatsEntry 4 }\n"
    - "sipCommonSummaryTotalTransactions OBJECT-TYPE\n    SYNTAX      Counter32\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object contains a count of the number of transactions that\n        are in progress
      and transactions that have reached the\n        'Terminated' state.  It is not
      applicable to stateless SIP Proxy\n        Servers.\n        A SIP transaction
      occurs between a client and a server, and\n        comprises all messages from
      the first request sent from the\n        client to the server, up to a final
      (non-1xx) response sent\n        from the server to the client.\n        If
      the request is INVITE and the final response is a non-2xx,\n        the transaction
      also include an ACK to the response.  The ACK\n        for a 2xx response to
      an INVITE request is a separate\n        transaction.\n        The branch ID
      parameter in the Via header field values serves\n        as a transaction identifier.\n
      \       A transaction is identified by the CSeq sequence number within\n        a
      single call leg.  The ACK request has the same CSeq number as\n        the corresponding
      INVITE request, but comprises a transaction\n        of its own.\n        In
      the case of a forked request, each branch counts as a single\n        transaction.\n
      \       For a transaction stateless Proxy Server, this counter is\n        always
      0.\n        Discontinuities in the value of this counter can occur at\n        re-initialization
      of the SIP entity or service.  A Management\n        Station can detect discontinuities
      in this counter by\n        monitoring the sipCommonSummaryDisconTime object
      in the same\n        row.\"\n    ::= { sipCommonSummaryStatsEntry 5 }\n"
    - "sipCommonSummaryDisconTime  OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"The value of
      the sysUpTime object when the counters for the\n        summary statistics objects
      in this row last experienced a\n        discontinuity.\"\n    ::= { sipCommonSummaryStatsEntry
      6 }\n"
    - '--

      '
    - '-- SIP Method Statistics

      '
    - '-- Total counts for each SIP method.

      '
    - '--

      '
    - "sipCommonMethodStatsTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonMethodStatsEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains the method statistics objects for SIP\n        entities.  Each
      row represents those objects for a particular\n        SIP entity present in
      this system.\"\n    ::= { sipCommonMethodStats 1 }\n"
    - "sipCommonMethodStatsEntry OBJECT-TYPE\n    SYNTAX      SipCommonMethodStatsEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A
      row of per entity method statistics.\n        Each row represents those objects
      for a particular SIP entity\n        present in this system.  applIndex is used
      to uniquely identify\n        these instances of SIP entities and correlate
      them through\n        the common framework of the NETWORK-SERVICES-MIB (RFC
      2788).\"\n    INDEX { applIndex, sipCommonMethodStatsName }\n    ::= { sipCommonMethodStatsTable
      1 }\n"
    - "SipCommonMethodStatsEntry ::= SEQUENCE {\n        sipCommonMethodStatsName
      \  SipTCMethodName,\n        sipCommonMethodStatsOutbounds    Counter32,\n        sipCommonMethodStatsInbounds
      \    Counter32,\n        sipCommonMethodStatsDisconTime   TimeStamp\n    }\n"
    - "sipCommonMethodStatsName OBJECT-TYPE\n    SYNTAX      SipTCMethodName\n    MAX-ACCESS
      \ not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This object
      uniquely identifies the SIP method related to the\n        objects in a particular
      row.\"\n    ::= { sipCommonMethodStatsEntry 1 }\n"
    - "sipCommonMethodStatsOutbounds OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      reflects the total number of requests sent by the\n        SIP entity, excluding
      retransmissions.  Retransmissions are\n        counted separately and are not
      reflected in this counter.  A\n        Management Station can detect discontinuities
      in this counter\n        by monitoring the sipCommonMethodStatsDisconTime object
      in the\n        same row.\"\n    REFERENCE\n       \"RFC 3261, Section 7.1\"\n
      \   ::= { sipCommonMethodStatsEntry 2 }\n"
    - "sipCommonMethodStatsInbounds OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      reflects the total number of requests received by\n        the SIP entity.  Retransmissions
      are counted separately and are\n        not reflected in this counter.  A Management
      Station can detect\n        discontinuities in this counter by monitoring the\n
      \       sipCommonMethodStatsDisconTime object in the same row.\"\n    REFERENCE\n
      \      \"RFC 3261, Section 7.1\"\n    ::= { sipCommonMethodStatsEntry 3 }\n"
    - "sipCommonMethodStatsDisconTime  OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"The value of
      the sysUpTime object when the counters for the\n        method statistics objects
      in this row last experienced a\n        discontinuity.\"\n    ::= { sipCommonMethodStatsEntry
      4 }\n"
    - '--

      '
    - '-- Support for specific status codes

      '
    - '--

      '
    - "sipCommonStatusCodeTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonStatusCodeEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains the list of SIP status codes that each SIP\n        entity in
      this system has been requested to monitor.  It is the\n        mechanism by
      which specific status codes are monitored.\n        Entries created in this
      table must not persist across reboots.\"\n    ::= { sipCommonStatusCode 1 }\n"
    - "sipCommonStatusCodeEntry OBJECT-TYPE\n    SYNTAX      SipCommonStatusCodeEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      row contains information on a particular SIP status code\n        that the SIP
      entity has been requested to monitor.  Entries\n        created in this table
      must not persist across reboots.\n        Each row represents those objects
      for a particular SIP entity\n        present in this system.  applIndex is used
      to uniquely identify\n        these instances of SIP entities and correlate
      them through\n        the common framework of the NETWORK-SERVICES-MIB (RFC
      2788).\"\n    INDEX { applIndex, sipCommonStatusCodeMethod,\n            sipCommonStatusCodeValue
      }\n    ::= { sipCommonStatusCodeTable 1 }\n"
    - "SipCommonStatusCodeEntry ::= SEQUENCE {\n        sipCommonStatusCodeMethod
      \    SipTCMethodName,\n        sipCommonStatusCodeValue      Unsigned32,\n        sipCommonStatusCodeIns
      \       Counter32,\n        sipCommonStatusCodeOuts       Counter32,\n        sipCommonStatusCodeRowStatus
      \ RowStatus,\n        sipCommonStatusCodeDisconTime TimeStamp\n    }\n"
    - "sipCommonStatusCodeMethod OBJECT-TYPE\n    SYNTAX      SipTCMethodName\n    MAX-ACCESS
      \ not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This object
      uniquely identifies a conceptual row in the\n        table.\"\n    ::= { sipCommonStatusCodeEntry
      1 }\n"
    - "sipCommonStatusCodeValue OBJECT-TYPE\n    SYNTAX      Unsigned32 (100..999)\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      object contains a SIP status code value that the SIP\n        entity has been
      requested to monitor.  All of the other\n        information in the row is related
      to this value.\"\n    ::= { sipCommonStatusCodeEntry 2 }\n"
    - "sipCommonStatusCodeIns OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      reflects the total number of response messages\n        received by the SIP
      entity with the status code value contained\n        in the sipCommonStatusCodeValue
      column.\n        Discontinuities in the value of this counter can occur at\n
      \       re-initialization of the SIP entity or service, or when the\n        monitoring
      of the status code is temporarily disabled.  A\n        Management Station can
      detect discontinuities in this counter\n        by monitoring the sipCommonStatusCodeDisconTime
      object in the\n        same row.\"\n    ::= { sipCommonStatusCodeEntry 3 }\n"
    - "sipCommonStatusCodeOuts OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      reflects the total number of response messages sent\n        by the SIP entity
      with the status code value contained in the\n        sipCommonStatusCodeValue
      column.\n        Discontinuities in the value of this counter can occur at\n
      \       re-initialization of the SIP entity or service, or when the\n        monitoring
      of the Status code is temporarily disabled.  A\n        Management Station can
      detect discontinuities in this counter\n        by monitoring the sipCommonStatusCodeDisconTime
      object in the\n        same row.\"\n    ::= { sipCommonStatusCodeEntry 4 }\n"
    - "sipCommonStatusCodeRowStatus OBJECT-TYPE\n    SYNTAX      RowStatus\n    MAX-ACCESS
      \ read-create\n    STATUS      current\n    DESCRIPTION\n       \"The row augmentation
      in sipCommonStatusCodeNotifTable will be\n        governed by the value of this
      RowStatus.\n        The values 'createAndGo' and 'destroy' are the only valid\n
      \       values allowed for this object.  If a row exists, it will\n        reflect
      a status of 'active' when queried.\"\n    ::= { sipCommonStatusCodeEntry 5 }\n"
    - "sipCommonStatusCodeDisconTime  OBJECT-TYPE\n    SYNTAX TimeStamp\n    MAX-ACCESS
      read-only\n    STATUS current\n    DESCRIPTION\n       \"The value of the sysUpTime
      object when the counters for the\n        status code statistics objects in
      this row last experienced\n        a discontinuity.\"\n    ::= { sipCommonStatusCodeEntry
      6 }\n"
    - '--

      '
    - '-- Support for specific status code notifications

      '
    - '--

      '
    - "sipCommonStatusCodeNotifTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonStatusCodeNotifEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains objects to control notifications related to\n        particular
      status codes that each SIP entity in this system has\n        been requested
      to monitor.\n        There is an entry in this table corresponding to each entry
      in\n        sipCommonStatusCodeTable.  Therefore, this table augments\n        sipCommonStatusCodeTable
      and utilizes the same index\n        methodology.\n        The objects in this
      table are not included directly in the\n        sipCommonStatusCodeTable simply
      to keep the status code\n        notification control objects separate from
      the actual status\n        code statistics.\"\n    ::= { sipCommonStatusCode
      2 }\n"
    - "sipCommonStatusCodeNotifEntry OBJECT-TYPE\n    SYNTAX      SipCommonStatusCodeNotifEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      row contains information controlling notifications for a\n        particular
      SIP status code that the SIP entity has been\n        requested to monitor.\"\n
      \   AUGMENTS { sipCommonStatusCodeEntry }\n    ::= { sipCommonStatusCodeNotifTable
      1 }\n"
    - "SipCommonStatusCodeNotifEntry ::= SEQUENCE {\n        sipCommonStatusCodeNotifSend
      \        TruthValue,\n        sipCommonStatusCodeNotifEmitMode     INTEGER,\n
      \       sipCommonStatusCodeNotifThresh       Unsigned32,\n        sipCommonStatusCodeNotifInterval
      \    Unsigned32\n    }\n"
    - "sipCommonStatusCodeNotifSend OBJECT-TYPE\n    SYNTAX      TruthValue\n    MAX-ACCESS
      \ read-write\n    STATUS      current\n    DESCRIPTION\n       \"This object
      controls whether a sipCommonStatusCodeNotif is\n        emitted when the status
      code value specified by\n        sipCommonStatusCodeValue is sent or received.
      \ If the value of\n        this object is 'true', then a notification is sent.
      \ If it is\n        'false', no notification is sent.\n        Note well that
      a notification MAY be emitted for every message\n        sent or received that
      contains the particular status code.\n        Depending on the status code involved,
      this can cause a\n        significant number of notification emissions that
      could be\n        detrimental to network performance.  Managers are forewarned
      to\n        be prudent in the use of this object to enable notifications.\n
      \       Look to sipCommonStatusCodeNotifEmitMode for alternative\n        controls
      for sipCommonStatusCodeNotif emissions.\"\n    DEFVAL { false }\n    ::= { sipCommonStatusCodeNotifEntry
      1 }\n"
    - "sipCommonStatusCodeNotifEmitMode OBJECT-TYPE\n    SYNTAX      INTEGER {\n                  normal(1),\n
      \                 oneShot(2),\n                  triggered(3)  -- read-only\n
      \               }\n    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n
      \      \"The object sipCommonStatusCodeNotifSend MUST be set to 'true'\n        for
      the values of this object to have any effect.  It is\n        RECOMMENDED that
      the desired emit mode be established by this\n        object prior to setting
      sipCommonStatusCodeNotifSend to 'true'.\n        This object and the sipCommonStatusCodeNotifSend
      object can\n        obviously be set independently, but their respective values\n
      \       will have a dependency on each other and the resulting\n        notifications.\n
      \       This object specifies the mode for emissions of\n        sipCommonStatusCodeNotif
      notifications.\n        normal    : sipCommonStatusCodeNotif notifications will
      be\n                    emitted by the system for each SIP response\n                    message
      sent or received that contains the\n                    desired status code.\n
      \       oneShot   : Only one sipCommonStatusCodeNotif notification\n                    will
      be emitted.  It will be the next SIP response\n                    message sent
      or received that contains the\n                    desired status code.\n                    No
      more notifications are emitted until this\n                    object is set
      to 'oneShot' again or set to\n                    'normal'.  This option is
      provided as a means of\n                    quelling the potential promiscuous
      behavior that\n                    can be associated with the\n                    sipCommonStatusCodeNotif.\n
      \       triggered : This value is only readable and cannot be set.  It\n                    reflects
      that the 'oneShot' case has occurred,\n                    and indicates that
      the mode needs to be reset to\n                    get further notifications.
      \ The mode is reset by\n                    setting this object to 'oneShot'
      or 'normal'.\"\n    DEFVAL { oneShot }\n    ::= { sipCommonStatusCodeNotifEntry
      2 }\n"
    - "sipCommonStatusCodeNotifThresh OBJECT-TYPE\n    SYNTAX      Unsigned32\n    MAX-ACCESS
      \ read-write\n    STATUS      current\n    DESCRIPTION\n       \"This object
      specifies the number of response messages sent or\n        received by this
      system that are considered excessive.  Based\n        on crossing that threshold,
      a\n        sipCommonStatusCodeThreshExceededInNotif notification or a\n        sipCommonStatusCodeThreshExceededOutNotif
      will be sent.  The\n        sipCommonStatusCodeThreshExceededInNotif and\n        sipCommonStatusCodeThreshExceededOutNotif
      notifications can be\n        used as an early warning mechanism in lieu of
      using\n        sipCommonStatusCodeNotif.\n        Note that the configuration
      applied by this object will be\n        applied equally to inbound and outbound
      response messages.\"\n    DEFVAL { 500 }\n    ::= { sipCommonStatusCodeNotifEntry
      3 }\n"
    - "sipCommonStatusCodeNotifInterval OBJECT-TYPE\n    SYNTAX      Unsigned32\n
      \   UNITS      \"seconds\"\n    MAX-ACCESS  read-write\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object specifies the time interval over which,
      if\n        sipCommonStatusCodeThresh is exceeded with respect to sent or\n
      \       received messages, a sipCommonStatusCodeThreshExceededInNotif\n        or
      sipCommonStatusCodeThreshExceededOutNotif notification will\n        be sent.\n
      \       Note that the configuration applied by this object will be\n        applied
      equally to inbound and outbound response messages.\"\n    DEFVAL { 60 }\n    ::=
      { sipCommonStatusCodeNotifEntry 4 }\n"
    - '--

      '
    - '-- Transaction Statistics

      '
    - '--

      '
    - "sipCommonTransCurrentTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonTransCurrentEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains information on the transactions currently\n        awaiting definitive
      responses by each SIP entity in this\n        system.\n        This table does
      not apply to transaction stateless Proxy\n        Servers.\"\n    ::= { sipCommonStatsTrans
      1 }\n"
    - "sipCommonTransCurrentEntry OBJECT-TYPE\n    SYNTAX      SipCommonTransCurrentEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"Information
      on a particular SIP entity's current transactions.\n        Each row represents
      those objects for a particular SIP entity\n        present in this system.  applIndex
      is used to uniquely identify\n        these instances of SIP entities and correlate
      them through\n        the common framework of the NETWORK-SERVICES-MIB (RFC
      2788).\"\n    INDEX { applIndex }\n    ::= { sipCommonTransCurrentTable 1 }\n"
    - "SipCommonTransCurrentEntry ::= SEQUENCE {\n        sipCommonTransCurrentactions
      \ Gauge32\n    }\n"
    - "sipCommonTransCurrentactions OBJECT-TYPE\n    SYNTAX      Gauge32 (0..4294967295)\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object contains the number of transactions awaiting\n        definitive (non-1xx)
      response.  In the case of a forked\n        request, each branch counts as a
      single transaction\n        corresponding to the entity identified by applIndex.\"\n"
    - '::= { sipCommonTransCurrentEntry 1 }

      '
    - '--

      '
    - '-- SIP Retry Statistics

      '
    - '--

      '
    - '-- This group contains various statistics objects about

      '
    - '-- retransmission counts.

      '
    - '--

      '
    - "sipCommonStatsRetryTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonStatsRetryEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains retry statistics objects applicable to each\n        SIP entity
      in this system.\"\n    ::= { sipCommonStatsRetry 1 }\n"
    - "sipCommonStatsRetryEntry OBJECT-TYPE\n    SYNTAX      SipCommonStatsRetryEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A
      row of retry statistics.\n        Each row represents those objects for a particular
      SIP entity\n        present in this system.  applIndex is used to uniquely identify\n
      \       these instances of SIP entities and correlate them through the\n        common
      framework of the NETWORK-SERVICES-MIB (RFC 2788).\"\n    INDEX { applIndex,
      sipCommonStatsRetryMethod }\n    ::= { sipCommonStatsRetryTable 1 }\n"
    - "SipCommonStatsRetryEntry ::= SEQUENCE {\n        sipCommonStatsRetryMethod
      \           SipTCMethodName,\n        sipCommonStatsRetries                Counter32,\n
      \       sipCommonStatsRetryFinalResponses    Counter32,\n        sipCommonStatsRetryNonFinalResponses
      Counter32,\n        sipCommonStatsRetryDisconTime        TimeStamp\n    }\n"
    - "sipCommonStatsRetryMethod OBJECT-TYPE\n    SYNTAX      SipTCMethodName\n    MAX-ACCESS
      \ not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This object
      uniquely identifies the SIP method related to the\n        objects in a row.\"\n
      \   ::= { sipCommonStatsRetryEntry 1 }\n"
    - "sipCommonStatsRetries OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      reflects the total number of request\n        retransmissions that have been
      sent by the SIP entity.  Note\n        that there could be multiple retransmissions
      per request.\n        Discontinuities in the value of this counter can occur
      at\n        re-initialization of the SIP entity or service.  A Management\n
      \       Station can detect discontinuities in this counter by\n        monitoring
      the sipCommonStatsRetryDisconTime object in the same\n        row.\"\n    ::=
      { sipCommonStatsRetryEntry 2 }\n"
    - "sipCommonStatsRetryFinalResponses OBJECT-TYPE\n    SYNTAX      Counter32\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object reflects the total number of Final Response retries\n        that have
      been sent by the SIP entity.  Note that there could\n        be multiple retransmissions
      per request.\n        Discontinuities in the value of this counter can occur
      at\n        re-initialization of the SIP entity or service.  A Management\n
      \       Station can detect discontinuities in this counter by\n        monitoring
      the sipCommonStatsRetryDisconTime object in the same\n        row.\"\n    ::=
      { sipCommonStatsRetryEntry 3 }\n"
    - "sipCommonStatsRetryNonFinalResponses OBJECT-TYPE\n    SYNTAX      Counter32\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object reflects the total number of non-Final Response\n        retries that
      have been sent by the SIP entity.\n        Discontinuities in the value of this
      counter can occur at\n        re-initialization of the SIP entity or service.
      \ A Management\n        Station can detect discontinuities in this counter by\n
      \       monitoring the sipCommonStatsRetryDisconTime object in the same\n        row.\"\n
      \   ::= { sipCommonStatsRetryEntry 4 }\n"
    - "sipCommonStatsRetryDisconTime  OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"The value of
      the sysUpTime object when the counters for the\n        retry statistics objects
      in this row last experienced a\n        discontinuity.\"\n    ::= { sipCommonStatsRetryEntry
      5 }\n"
    - '--

      '
    - '-- Other Common Statistics

      '
    - '--

      '
    - "sipCommonOtherStatsTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipCommonOtherStatsEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains other common statistics supported by each\n        SIP entity
      in this system.\"\n    ::= { sipCommonOtherStats 1 }\n"
    - "sipCommonOtherStatsEntry OBJECT-TYPE\n    SYNTAX      SipCommonOtherStatsEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"Information
      on a particular SIP entity's other common\n        statistics.\n        Each
      row represents those objects for a particular SIP entity\n        present in
      this system.  applIndex is used to uniquely identify\n        these instances
      of SIP entities and correlate them through\n        the common framework of
      the NETWORK-SERVICES-MIB (RFC 2788).\"\n    INDEX { applIndex }\n    ::= { sipCommonOtherStatsTable
      1 }\n"
    - "SipCommonOtherStatsEntry ::= SEQUENCE {\n        sipCommonOtherStatsNumUnsupportedUris
      \    Counter32,\n        sipCommonOtherStatsNumUnsupportedMethods  Counter32,\n
      \       sipCommonOtherStatsOtherwiseDiscardedMsgs Counter32,\n        sipCommonOtherStatsDisconTime
      \  TimeStamp\n    }\n"
    - "sipCommonOtherStatsNumUnsupportedUris OBJECT-TYPE\n    SYNTAX      Counter32\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"Number
      of RequestURIs received with an unsupported scheme.\n        A server normally
      responds to such requests with a 400 Bad\n        Request status code.\n        Discontinuities
      in the value of this counter can occur at\n        re-initialization of the
      SIP entity or service.  A Management\n        Station can detect discontinuities
      in this counter by\n        monitoring the sipCommonOtherStatsDisconTime object
      in the same\n        row.\"\n    ::= { sipCommonOtherStatsEntry 1 }\n"
    - "sipCommonOtherStatsNumUnsupportedMethods OBJECT-TYPE\n    SYNTAX      Counter32\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"Number
      of SIP requests received with unsupported methods.  A\n        server normally
      responds to such requests with a 501 (Not\n        Implemented) or 405 (Method
      Not Allowed).\n        Discontinuities in the value of this counter can occur
      at\n        re-initialization of the SIP entity or service.  A Management\n
      \       Station can detect discontinuities in this counter by\n        monitoring
      the sipCommonOtherStatsDisconTime object in the same\n        row.\"\n    ::=
      { sipCommonOtherStatsEntry 2 }\n"
    - "sipCommonOtherStatsOtherwiseDiscardedMsgs OBJECT-TYPE\n    SYNTAX      Counter32\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"Number
      of SIP messages received that, for any number of\n        reasons, was discarded
      without a response.\n        Discontinuities in the value of this counter can
      occur at\n        re-initialization of the SIP entity or service.  A Management\n
      \       Station can detect discontinuities in this counter by\n        monitoring
      the sipCommonOtherStatsDisconTime object in the same\n        row.\"\n    ::=
      { sipCommonOtherStatsEntry 3 }\n"
    - "sipCommonOtherStatsDisconTime OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"The value of
      the sysUpTime object when the counters for the\n        statistics objects in
      this row last experienced a\n        discontinuity.\"\n    ::= { sipCommonOtherStatsEntry
      4 }\n"
    - '--

      '
    - '-- Notification related objects

      '
    - '--

      '
    - '--

      '
    - '-- Status code related notification objects.

      '
    - '--

      '
    - "sipCommonStatusCodeNotifTo OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS
      \ accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n       \"This
      object contains the value of the To header in the message\n        containing
      the status code that caused the notification.  The\n        header name will
      be part of this object value.  For example,\n        'To: Watson '.\"\n    ::=
      { sipCommonNotifObjects 1 }\n"
    - "sipCommonStatusCodeNotifFrom OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n
      \   MAX-ACCESS  accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n
      \      \"This object contains the value of the From header in the\n        message
      containing the status code that caused the\n        notification.  The header
      name will be part of this object\n        value.  For example, 'From: Watson
      '.\"\n    ::= { sipCommonNotifObjects 2 }\n"
    - "sipCommonStatusCodeNotifCallId OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n
      \   MAX-ACCESS  accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n
      \      \"This object contains the value of the Call-ID in the message\n        containing
      the status code that caused the notification.  The\n        header name will
      be part of this object value.  For example,\n        'Call-ID: 5551212@example.com'.\"\n
      \   ::= { sipCommonNotifObjects 3 }\n"
    - "sipCommonStatusCodeNotifCSeq OBJECT-TYPE\n    SYNTAX      Unsigned32\n    MAX-ACCESS
      \ accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n       \"This
      object contains the CSeq value in the message containing\n        the status
      code that caused the notification.  The header name\n        will be part of
      this object value.  For example, 'CSeq: 1722\n        INVITE'.\"\n    ::= {
      sipCommonNotifObjects 4 }\n"
    - '--

      '
    - '-- General notification related objects.

      '
    - '--

      '
    - "sipCommonNotifApplIndex OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..2147483647)\n
      \   MAX-ACCESS  accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n
      \      \"This object contains the applIndex as described in RFC 2788.\n        This
      object is created in order to allow a variable binding\n        containing a
      value of applIndex in a notification.\"\n    ::= { sipCommonNotifObjects 5 }\n"
    - "sipCommonNotifSequenceNumber OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..2147483647)\n
      \   MAX-ACCESS  accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n
      \      \"This object contains a sequence number for each notification\n        generated
      by this SIP entity.  Each notification SHOULD have a\n        unique sequence
      number.  A network manager can use this\n        information to determine whether
      notifications from a\n        particular SIP entity have been missed.  The value
      of this\n        object MUST start at 1 and increase by 1 with each generated\n
      \       notification.  If a system restarts, the sequence number MAY\n        start
      again from 1.\"\n    ::= { sipCommonNotifObjects 6 }\n"
    - '--

      '
    - '-- Notifications

      '
    - '--

      '
    - "sipCommonStatusCodeNotif NOTIFICATION-TYPE\n    OBJECTS {\n       sipCommonNotifSequenceNumber,\n
      \      sipCommonNotifApplIndex,\n       sipCommonStatusCodeNotifTo,\n       sipCommonStatusCodeNotifFrom,\n
      \      sipCommonStatusCodeNotifCallId,\n       sipCommonStatusCodeNotifCSeq,\n
      \      sipCommonStatusCodeIns,\n       sipCommonStatusCodeOuts\n    }\n    STATUS
      \     current\n    DESCRIPTION\n       \"Signifies that a specific status code
      has been sent or received\n        by the system.\"\n    ::= { sipCommonMIBNotifications
      1 }\n"
    - "sipCommonStatusCodeThreshExceededInNotif NOTIFICATION-TYPE\n    OBJECTS {\n
      \      sipCommonNotifSequenceNumber,\n       sipCommonNotifApplIndex,\n       sipCommonStatusCodeIns\n
      \   }\n    STATUS      current\n    DESCRIPTION\n       \"Signifies that a specific
      status code was found to have been\n        received by the system frequently
      enough to exceed the\n        configured threshold.  This notification can be
      used as\n        an early warning mechanism in lieu of using\n        sipCommonStatusCodeNotif.\"\n
      \   ::= { sipCommonMIBNotifications 2 }\n"
    - "sipCommonStatusCodeThreshExceededOutNotif NOTIFICATION-TYPE\n    OBJECTS {\n
      \      sipCommonNotifSequenceNumber,\n       sipCommonNotifApplIndex,\n       sipCommonStatusCodeOuts\n
      \   }\n    STATUS      current\n    DESCRIPTION\n       \"Signifies that a specific
      status code was found to have been\n        sent by the system enough to exceed
      the configured threshold.\n        This notification can be used as an early
      warning mechanism in\n        lieu of using sipCommonStatusCodeNotif.\"\n    ::=
      { sipCommonMIBNotifications 3 }\n"
    - "sipCommonServiceColdStart NOTIFICATION-TYPE\n    OBJECTS {\n       sipCommonNotifSequenceNumber,\n
      \      sipCommonNotifApplIndex,\n       sipCommonCfgServiceStartTime\n    }\n
      \   STATUS      current\n    DESCRIPTION\n       \"Signifies that the SIP service
      has reinitialized itself or\n        started for the first time.  This SHOULD
      result from a hard\n        'down' to 'up' administrative status change.  The
      configuration\n        or behavior of the service MAY be altered.\"\n    ::=
      { sipCommonMIBNotifications 4 }\n"
    - "sipCommonServiceWarmStart NOTIFICATION-TYPE\n    OBJECTS {\n       sipCommonNotifSequenceNumber,\n
      \      sipCommonNotifApplIndex,\n       sipCommonCfgServiceLastChange\n    }\n
      \   STATUS      current\n    DESCRIPTION\n       \"Signifies that the SIP service
      has reinitialized itself and is\n        restarting after an administrative
      'reset'.  The configuration\n        or behavior of the service MAY be altered.\"\n
      \   ::= { sipCommonMIBNotifications 5 }\n"
    - "sipCommonServiceStatusChanged NOTIFICATION-TYPE\n    OBJECTS {\n       sipCommonNotifSequenceNumber,\n
      \      sipCommonNotifApplIndex,\n       sipCommonCfgServiceLastChange,\n       sipCommonCfgServiceOperStatus\n
      \   }\n    STATUS      current\n    DESCRIPTION\n       \"Signifies that the
      SIP service operational status has changed.\"\n    ::= { sipCommonMIBNotifications
      6 }\n"
    - '--

      '
    - '-- Conformance

      '
    - '--

      '
    - "sipCommonMIBCompliances\n    OBJECT IDENTIFIER ::= { sipCommonMIBConformance
      1 }\n"
    - "sipCommonMIBGroups\n    OBJECT IDENTIFIER ::= { sipCommonMIBConformance 2 }\n"
    - '--

      '
    - '-- Compliance Statements

      '
    - '--

      '
    - "sipCommonCompliance MODULE-COMPLIANCE\n    STATUS      current\n    DESCRIPTION\n
      \      \"The compliance statement for SIP entities.\"\n    MODULE -- this module\n
      \       MANDATORY-GROUPS { sipCommonConfigGroup,\n                           sipCommonStatsGroup\n
      \                        }\n    OBJECT       sipCommonStatusCodeRowStatus\n
      \   SYNTAX       RowStatus { active(1) }\n    WRITE-SYNTAX RowStatus { createAndGo(4),
      destroy(6) }\n    DESCRIPTION\n       \"Support for createAndWait and notInService
      is not required.\"\n    OBJECT       sipCommonCfgServiceNotifEnable\n    MIN-ACCESS
      \  not-accessible\n    DESCRIPTION\n       \"This object is optional and does
      not need to be supported.\"\n    GROUP        sipCommonInformationalGroup\n
      \   DESCRIPTION\n       \"This group is OPTIONAL.  A SIP entity can elect to
      not provide\n        any support for these objects, as they provide optional\n
      \       information.\"\n    GROUP        sipCommonConfigTimerGroup\n    DESCRIPTION\n
      \      \"This group is OPTIONAL.  A SIP entity can elect to not provide\n        any
      timer configuration.\"\n    GROUP        sipCommonStatsRetryGroup\n    DESCRIPTION\n
      \      \"This group is OPTIONAL.  A SIP entity can elect to not provide\n        any
      retry statistics.\"\n    GROUP        sipCommonNotifGroup\n    DESCRIPTION\n
      \      \"This group is OPTIONAL.  A SIP entity can elect to not provide\n        any
      notifications.  If implemented, the\n        sipCommonStatusCodeNotifGroup and
      sipCommonNotifObjectsGroup\n        MUST also be implemented.\"\n    GROUP        sipCommonStatusCodeNotifGroup\n
      \   DESCRIPTION\n       \"This group is OPTIONAL.  A SIP entity can elect to
      not provide\n        any notifications.  If implemented, the sipCommonNotifGroup
      and\n        sipCommonNotifObjectsGroup MUST also be implemented.\"\n    GROUP
      \       sipCommonNotifObjectsGroup\n    DESCRIPTION\n       \"This group is
      OPTIONAL.  A SIP entity can elect to not provide\n        any notifications.
      \ If implemented, the\n        sipCommonStatusCodeNotifGroup and sipCommonNotifGroup
      MUST also\n        be implemented.\"\n    ::= { sipCommonMIBCompliances 1 }\n"
    - '--

      '
    - '-- Units of Conformance

      '
    - '--

      '
    - "sipCommonConfigGroup OBJECT-GROUP\n    OBJECTS {\n            sipCommonCfgProtocolVersion,\n
      \           sipCommonCfgServiceOperStatus,\n            sipCommonCfgServiceStartTime,\n
      \           sipCommonCfgServiceLastChange,\n            sipCommonPortTransportRcv,\n
      \           sipCommonOptionTag,\n            sipCommonOptionTagHeaderField,\n
      \           sipCommonCfgMaxTransactions,\n            sipCommonCfgServiceNotifEnable,\n
      \           sipCommonCfgEntityType,\n            sipCommonMethodSupportedName\n
      \   }\n    STATUS  current\n    DESCRIPTION\n       \"A collection of objects
      providing configuration common to all\n        SIP entities.\"\n    ::= { sipCommonMIBGroups
      1 }\n"
    - "sipCommonInformationalGroup OBJECT-GROUP\n    OBJECTS {\n            sipCommonCfgOrganization\n
      \   }\n    STATUS  current\n    DESCRIPTION\n       \"A collection of objects
      providing configuration common to all\n        SIP entities.\"\n    ::= { sipCommonMIBGroups
      2 }\n"
    - "sipCommonConfigTimerGroup OBJECT-GROUP\n    OBJECTS {\n            sipCommonCfgTimerA,\n
      \           sipCommonCfgTimerB,\n            sipCommonCfgTimerC,\n            sipCommonCfgTimerD,\n
      \           sipCommonCfgTimerE,\n            sipCommonCfgTimerF,\n            sipCommonCfgTimerG,\n
      \           sipCommonCfgTimerH,\n            sipCommonCfgTimerI,\n            sipCommonCfgTimerJ,\n
      \           sipCommonCfgTimerK,\n            sipCommonCfgTimerT1,\n            sipCommonCfgTimerT2,\n
      \           sipCommonCfgTimerT4\n    }\n    STATUS  current\n    DESCRIPTION\n
      \      \"A collection of objects providing timer configuration common to\n        all
      SIP entities.\"\n    ::= { sipCommonMIBGroups 3 }\n"
    - "sipCommonStatsGroup OBJECT-GROUP\n    OBJECTS {\n            sipCommonSummaryInRequests,\n
      \           sipCommonSummaryOutRequests,\n            sipCommonSummaryInResponses,\n
      \           sipCommonSummaryOutResponses,\n            sipCommonSummaryTotalTransactions,\n
      \           sipCommonSummaryDisconTime,\n            sipCommonMethodStatsOutbounds,\n
      \           sipCommonMethodStatsInbounds,\n            sipCommonMethodStatsDisconTime,\n
      \           sipCommonStatusCodeIns,\n            sipCommonStatusCodeOuts,\n
      \           sipCommonStatusCodeRowStatus,\n            sipCommonStatusCodeDisconTime,\n
      \           sipCommonTransCurrentactions,\n            sipCommonOtherStatsNumUnsupportedUris,\n
      \           sipCommonOtherStatsNumUnsupportedMethods,\n            sipCommonOtherStatsOtherwiseDiscardedMsgs,\n
      \           sipCommonOtherStatsDisconTime\n    }\n    STATUS  current\n    DESCRIPTION\n
      \      \"A collection of objects providing statistics common to all SIP\n        entities.\"\n
      \   ::= { sipCommonMIBGroups 4 }\n"
    - "sipCommonStatsRetryGroup OBJECT-GROUP\n    OBJECTS {\n             sipCommonStatsRetries,\n
      \            sipCommonStatsRetryFinalResponses,\n             sipCommonStatsRetryNonFinalResponses,\n
      \            sipCommonStatsRetryDisconTime\n    }\n    STATUS  current\n    DESCRIPTION\n
      \      \"A collection of objects providing retry statistics.\"\n    ::= { sipCommonMIBGroups
      5 }\n"
    - "sipCommonNotifGroup NOTIFICATION-GROUP\n    NOTIFICATIONS {\n            sipCommonStatusCodeNotif,\n
      \           sipCommonStatusCodeThreshExceededInNotif,\n            sipCommonStatusCodeThreshExceededOutNotif,\n
      \           sipCommonServiceColdStart,\n            sipCommonServiceWarmStart,\n
      \           sipCommonServiceStatusChanged\n    }\n    STATUS  current\n    DESCRIPTION\n
      \      \"A collection of notifications common to all SIP entities.\"\n    ::=
      { sipCommonMIBGroups 6 }\n"
    - "sipCommonStatusCodeNotifGroup OBJECT-GROUP\n    OBJECTS {\n            sipCommonStatusCodeNotifSend,\n
      \           sipCommonStatusCodeNotifEmitMode,\n            sipCommonStatusCodeNotifThresh,\n
      \           sipCommonStatusCodeNotifInterval\n   }\n    STATUS  current\n    DESCRIPTION\n
      \      \"A collection of objects related to the control and attribution\n        of
      notifications common to all SIP entities.\"\n    ::= { sipCommonMIBGroups 7
      }\n"
    - "sipCommonNotifObjectsGroup OBJECT-GROUP\n    OBJECTS {\n            sipCommonStatusCodeNotifTo,\n
      \           sipCommonStatusCodeNotifFrom,\n            sipCommonStatusCodeNotifCallId,\n
      \           sipCommonStatusCodeNotifCSeq,\n            sipCommonNotifApplIndex,\n
      \           sipCommonNotifSequenceNumber\n    }\n    STATUS  current\n    DESCRIPTION\n
      \      \"A collection of accessible-for-notify objects related to the\n        notification
      defined in this MIB module.\"\n    ::= { sipCommonMIBGroups 8 }\n"
    - 'END

      '
    title: 7.2.  SIP Common MIB Module
  - contents:
    - '7.3.  SIP User Agent MIB Module

      '
    - 'SIP-UA-MIB DEFINITIONS ::= BEGIN

      '
    - "IMPORTS\n    MODULE-IDENTITY,\n    OBJECT-TYPE,\n    Unsigned32,\n    mib-2\n
      \         FROM SNMPv2-SMI             -- RFC 2578\n    MODULE-COMPLIANCE,\n
      \   OBJECT-GROUP\n          FROM SNMPv2-CONF            -- RFC 2580\n    applIndex\n
      \         FROM NETWORK-SERVICES-MIB   -- RFC 2788\n    InetAddressType,\n    InetAddress\n
      \         FROM INET-ADDRESS-MIB       -- RFC 4001\n    SipTCEntityRole\n          FROM
      SIP-TC-MIB;            -- RFC 4780\n"
    - "sipUAMIB MODULE-IDENTITY\n    LAST-UPDATED   \"200704200000Z\"\n    ORGANIZATION
      \  \"IETF Session Initiation Protocol Working Group\"\n    CONTACT-INFO\n             \"SIP
      WG email: sip@ietf.org\n              Co-editor  Kevin Lingle\n                         Cisco
      Systems, Inc.\n              postal:    7025 Kit Creek Road\n                         P.O.
      Box 14987\n                         Research Triangle Park, NC 27709\n                         USA\n
      \             email:     klingle@cisco.com\n              phone:     +1 919
      476 2029\n              Co-editor  Joon Maeng\n              email:     jmaeng@austin.rr.com\n
      \             Co-editor  Jean-Francois Mule\n                         CableLabs\n
      \             postal:    858 Coal Creek Circle\n                         Louisville,
      CO 80027\n                         USA\n              email:     jf.mule@cablelabs.com\n
      \             phone:     +1 303 661 9100\n              Co-editor  Dave Walker\n
      \             email:     drwalker@rogers.com\"\n    DESCRIPTION\n       \"Session
      Initiation Protocol (SIP) User Agent (UA) MIB module.\n        SIP is an application-layer
      signaling protocol for creating,\n        modifying, and terminating multimedia
      sessions with one or more\n        participants.  These sessions include Internet
      multimedia\n        conferences and Internet telephone calls.  SIP is defined
      in\n        RFC 3261 (June 2002).\n        A User Agent is an application that
      contains both a User Agent\n        Client (UAC) and a User Agent Server (UAS).
      \ A UAC is an\n        application that initiates a SIP request.  A UAS is an\n
      \       application that contacts the user when a SIP request is\n        received
      and that returns a response on behalf of the user.\n        The response accepts,
      rejects, or redirects the request.\n        Copyright (C) The IETF Trust (2007).
      \ This version of\n        this MIB module is part of RFC 4780; see the RFC
      itself for\n        full legal notices.\"\n    REVISION        \"200704200000Z\"\n
      \   DESCRIPTION\n       \"Initial version of the IETF SIP-UA-MIB module.  This
      version\n        published as part of RFC 4780.\"\n     ::= { mib-2 150 }\n"
    - '-- Top-Level Components of this MIB.

      '
    - 'sipUAMIBObjects        OBJECT IDENTIFIER ::= { sipUAMIB 1 }

      '
    - 'sipUAMIBConformance    OBJECT IDENTIFIER ::= { sipUAMIB 2 }

      '
    - '--

      '
    - '-- This MIB contains objects related to SIP User Agents.

      '
    - '--

      '
    - 'sipUACfgServer         OBJECT IDENTIFIER ::= { sipUAMIBObjects 1 }

      '
    - '--

      '
    - '-- SIP Server Configuration

      '
    - '--

      '
    - "sipUACfgServerTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipUACfgServerEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains SIP server configuration objects applicable\n        to each
      SIP user agent in this system.\"\n    ::= { sipUACfgServer 1 }\n"
    - "sipUACfgServerEntry OBJECT-TYPE\n    SYNTAX      SipUACfgServerEntry\n    MAX-ACCESS
      \ not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A row of
      server configuration.\n        Each row represents those objects for a particular
      SIP user\n        agent present in this system.  applIndex is used to uniquely\n
      \       identify these instances of SIP user agents and correlate\n        them
      through the common framework of the NETWORK-SERVICES-MIB\n        (RFC 2788).
      \ The same value of applIndex used in the\n        corresponding SIP-COMMON-MIB
      is used here.\"\n    INDEX { applIndex, sipUACfgServerIndex }\n    ::= { sipUACfgServerTable
      1 }\n"
    - "SipUACfgServerEntry ::= SEQUENCE {\n        sipUACfgServerIndex       Unsigned32,\n
      \       sipUACfgServerAddressType InetAddressType,\n        sipUACfgServerAddress
      \    InetAddress,\n        sipUACfgServerRole        SipTCEntityRole\n    }\n"
    - "sipUACfgServerIndex OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..4294967295)\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A
      unique identifier of a server address when multiple addresses\n        are configured
      by the SIP entity.  If one address isn't\n        reachable, then another can
      be tried.\"\n    ::= { sipUACfgServerEntry 1 }\n"
    - "sipUACfgServerAddressType OBJECT-TYPE\n    SYNTAX      InetAddressType\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      reflects the type of address contained in the\n        associated instance of
      sipUACfgServerAddress.\"\n    REFERENCE\n       \"INET-ADDRESS-MIB (RFC 4001)\"\n
      \   ::= { sipUACfgServerEntry 2 }\n"
    - "sipUACfgServerAddress OBJECT-TYPE\n    SYNTAX      InetAddress\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      reflects the address of a SIP server this user\n        agent will use to proxy/redirect
      calls.  The type of this\n        address is determined by the value of the\n
      \       sipUACfgServerAddressType object.\"\n    REFERENCE \"INET-ADDRESS-MIB
      (RFC 4001)\"\n    ::= { sipUACfgServerEntry 3 }\n"
    - "sipUACfgServerRole OBJECT-TYPE\n    SYNTAX      SipTCEntityRole\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      reflects the function of the SIP server this user\n        agent should communicate
      with: registrar, proxy (outbound\n        proxy), etc.\"\n    ::= { sipUACfgServerEntry
      4 }\n"
    - '--

      '
    - '-- Conformance

      '
    - '--

      '
    - 'sipUAMIBCompliances OBJECT IDENTIFIER ::= { sipUAMIBConformance 1 }

      '
    - 'sipUAMIBGroups      OBJECT IDENTIFIER ::= { sipUAMIBConformance 2 }

      '
    - '--

      '
    - '-- Compliance Statements

      '
    - '--

      '
    - "sipUACompliance MODULE-COMPLIANCE\n    STATUS      current\n    DESCRIPTION\n
      \      \"The compliance statement for SIP entities that implement the\n        SIP-UA-MIB
      module.\"\n    MODULE -- this module\n        MANDATORY-GROUPS { sipUAConfigGroup
      }\n    ::= { sipUAMIBCompliances 1 }\n"
    - '--

      '
    - '-- Units of Conformance

      '
    - '--

      '
    - "sipUAConfigGroup OBJECT-GROUP\n    OBJECTS {\n            sipUACfgServerAddressType,\n
      \           sipUACfgServerAddress,\n            sipUACfgServerRole\n    }\n
      \   STATUS  current\n    DESCRIPTION\n       \"A collection of objects providing
      information about the\n        configuration of SIP User Agents.\"\n    ::=
      { sipUAMIBGroups 1 }\n"
    - 'END

      '
    title: 7.3.  SIP User Agent MIB Module
  - contents:
    - '7.4.  SIP Server MIB Module (Proxy, Redirect, and Registrar Servers)

      '
    - 'SIP-SERVER-MIB DEFINITIONS ::= BEGIN

      '
    - "IMPORTS\n    MODULE-IDENTITY,\n    OBJECT-TYPE,\n    Counter32,\n    Unsigned32,\n
      \   Gauge32,\n    mib-2\n          FROM SNMPv2-SMI             -- RFC 2578\n
      \   TruthValue,\n    TimeStamp, DateAndTime\n          FROM SNMPv2-TC              --
      RFC 2579\n    MODULE-COMPLIANCE,\n    OBJECT-GROUP\n          FROM SNMPv2-CONF
      \           -- RFC 2580\n    SnmpAdminString\n          FROM SNMP-FRAMEWORK-MIB
      \    -- RFC 3411\n    applIndex\n          FROM NETWORK-SERVICES-MIB   -- RFC
      2788\n    InetAddressType,\n    InetAddress\n          FROM INET-ADDRESS-MIB;
      \     -- RFC 4001\n"
    - "sipServerMIB MODULE-IDENTITY\n    LAST-UPDATED   \"200704200000Z\"\n    ORGANIZATION
      \  \"IETF Session Initiation Protocol\n                    Working Group\"\n
      \   CONTACT-INFO\n       \"SIP WG email: sip@ietf.org\n           Co-editor:
      Kevin Lingle\n                      Cisco Systems, Inc.\n              postal:
      7025 Kit Creek Road\n                      P.O. Box 14987\n                      Research
      Triangle Park, NC 27709\n                      USA\n             email:   klingle@cisco.com\n
      \            phone:   +1 919 476 2029\n           Co-editor: Joon Maeng\n               email:
      jmaeng@austin.rr.com\n           Co-editor: Jean-Francois Mule\n                      CableLabs\n
      \             postal: 858 Coal Creek Circle\n                      Louisville,
      CO 80027\n                      USA\n               email: jf.mule@cablelabs.com\n
      \              phone: +1 303 661 9100\n           Co-editor: Dave Walker\n               email:
      drwalker@rogers.com\n          \"\n    DESCRIPTION\n       \"Session Initiation
      Protocol (SIP) Server MIB module.  SIP is an\n        application-layer signaling
      protocol for creating, modifying,\n        and terminating multimedia sessions
      with one or more\n        participants.  These sessions include Internet multimedia\n
      \       conferences and Internet telephone calls.  SIP is defined in\n        RFC
      3261 (June 2002).\n        This MIB is defined for the management of SIP Proxy,
      Redirect,\n        and Registrar Servers.\n        A Proxy Server acts as both
      a client and a server.  It accepts\n        requests from other clients, either
      responding to them or\n        passing them on to other servers, possibly after
      modification.\n        A Redirect Server accepts requests from clients and returns\n
      \       zero or more addresses to that client.  Unlike a User Agent\n        Server,
      it does not accept calls.\n        A Registrar is a server that accepts REGISTER
      requests.  A\n        Registrar is typically co-located with a Proxy or Redirect\n
      \       Server.\n        Copyright (C) The IETF Trust (2007).  This version
      of\n        this MIB module is part of RFC 4780; see the RFC itself for\n        full
      legal notices.\"\n    REVISION        \"200704200000Z\"\n    DESCRIPTION\n       \"Initial
      version of the IETF SIP-SERVER-MIB module.  This\n       version published as
      part of RFC 4780.\"\n  ::= { mib-2 151 }\n"
    - '-- Top-Level Components of this MIB.

      '
    - 'sipServerMIBObjects     OBJECT IDENTIFIER ::= { sipServerMIB 1 }

      '
    - 'sipServerMIBConformance OBJECT IDENTIFIER ::= { sipServerMIB 2 }

      '
    - '--

      '
    - '-- These groups contain objects common to all SIP servers.

      '
    - '--

      '
    - 'sipServerCfg            OBJECT IDENTIFIER ::= { sipServerMIBObjects 1 }

      '
    - '--

      '
    - '-- Common Server Configuration Objects

      '
    - '--

      '
    - "sipServerCfgTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipServerCfgEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains configuration objects applicable to SIP\n        Redirect and
      Proxy Servers.\"\n    ::= { sipServerCfg 1 }\n"
    - "sipServerCfgEntry OBJECT-TYPE\n    SYNTAX      SipServerCfgEntry\n    MAX-ACCESS
      \ not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A row of
      common configuration.\n        Each row represents those objects for a particular
      SIP server\n        present in this system.  applIndex is used to uniquely identify\n
      \       these instances of SIP servers and correlate them through\n        the
      common framework of the NETWORK-SERVICES-MIB (RFC 2788).\n        The same value
      of applIndex used in the corresponding\n        SIP-COMMON-MIB is used here.\"\n
      \   INDEX { applIndex }\n    ::= { sipServerCfgTable 1 }\n"
    - "SipServerCfgEntry ::=\n    SEQUENCE {\n        sipServerCfgHostAddressType
      \      InetAddressType,\n        sipServerCfgHostAddress           InetAddress\n
      \   }\n"
    - "sipServerCfgHostAddressType OBJECT-TYPE\n    SYNTAX      InetAddressType\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"The
      type of Internet address by which the SIP server is\n        reachable.\"\n
      \   REFERENCE\n       \"RFC 3261, Section 19.1.1\"\n    ::= { sipServerCfgEntry
      1 }\n"
    - "sipServerCfgHostAddress OBJECT-TYPE\n    SYNTAX      InetAddress\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This is the
      host portion of a SIP URI that is assigned to the\n        SIP server.  It MAY
      contain a fully qualified domain name or\n        an IP address.  The length
      of the value will depend on the type\n        of address specified.  The type
      of address given by this object\n        is controlled by sipServerCfgHostAddressType.\"\n
      \   REFERENCE\n       \"RFC 3261, Section 19.1.1\"\n    ::= { sipServerCfgEntry
      2 }\n"
    - '--

      '
    - '-- This group contains MIB objects

      '
    - '-- related to SIP Proxy Servers.

      '
    - '--

      '
    - 'sipServerProxyCfg      OBJECT IDENTIFIER ::= { sipServerMIBObjects 3 }

      '
    - 'sipServerProxyStats    OBJECT IDENTIFIER ::= { sipServerMIBObjects 4 }

      '
    - '--

      '
    - '-- Proxy Server Configuration

      '
    - '--

      '
    - "sipServerProxyCfgTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipServerProxyCfgEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains configuration objects applicable to SIP\n        Proxy Servers.\"\n
      \   ::= { sipServerProxyCfg 1 }\n"
    - "sipServerProxyCfgEntry OBJECT-TYPE\n    SYNTAX      SipServerProxyCfgEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A
      row of common proxy configuration.\n        Each row represents those objects
      for a particular SIP server\n        present in this system.  applIndex is used
      to uniquely identify\n        these instances of SIP servers and correlate them
      through the\n        common framework of the NETWORK-SERVICES-MIB (RFC 2788).
      \ The\n        same value of applIndex used in the corresponding\n        SIP-COMMON-MIB
      is used here.\"\n    INDEX { applIndex }\n    ::= { sipServerProxyCfgTable 1
      }\n"
    - "SipServerProxyCfgEntry ::=\n    SEQUENCE {\n        sipServerCfgProxyStatefulness
      \    INTEGER,\n        sipServerCfgProxyRecursion        TruthValue,\n        sipServerCfgProxyRecordRoute
      \     TruthValue,\n        sipServerCfgProxyAuthMethod       BITS,\n        sipServerCfgProxyAuthDefaultRealm
      SnmpAdminString\n    }\n"
    - "sipServerCfgProxyStatefulness OBJECT-TYPE\n    SYNTAX      INTEGER {\n                  stateless(1),\n
      \                 transactionStateful(2),\n                  callStateful(3)\n
      \               }\n    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n
      \      \"This object reflects the default mode of operation for the\n        Proxy
      Server entity.\n        A stateless proxy is a logical entity that does not
      maintain\n        the client or server transaction state machines when it\n
      \       processes requests.  A stateless proxy forwards every request it\n        receives
      downstream and every response it receives upstream.  If\n        the value of
      this object is stateless(1), the proxy defaults to\n        stateless operations.\n
      \       A transaction stateful proxy, or simply a 'stateful proxy', is\n        a
      logical entity that maintains the client and server\n        transaction state
      machines during the processing of a request.\n        A (transaction) stateful
      proxy is not the same as a call\n        stateful proxy.  If the value of this
      object is\n        transactionStateful(2), the proxy is stateful on a transaction\n
      \       basis.\n        A call stateful proxy is a logical entity if it retains
      state\n        for a dialog from the initiating INVITE to the terminating BYE\n
      \       request.  A call stateful proxy is always transaction stateful,\n        but
      the converse is not necessarily true.  If the value of this\n        object
      is callStateful(3), the proxy is call stateful.\"\n    REFERENCE\n        \"RFC
      3261, Section 16\"\n    ::= { sipServerProxyCfgEntry 1 }\n"
    - "sipServerCfgProxyRecursion OBJECT-TYPE\n    SYNTAX      TruthValue\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      reflects whether or not the Proxy performs a\n        recursive search on the
      Contacts provided in 3xx redirects.\n        If the value of this object is
      'true', a recursive search is\n        performed.  If the value is 'false',
      no search is performed,\n        and the 3xx response is sent upstream towards
      the source of\n        the request.\"\n    REFERENCE\n       \"RFC 3261 Sections
      16.5 and 16.6\"\n    ::= { sipServerProxyCfgEntry 2 }\n"
    - "sipServerCfgProxyRecordRoute OBJECT-TYPE\n    SYNTAX     TruthValue\n    MAX-ACCESS
      read-only\n    STATUS     current\n    DESCRIPTION\n       \"This object reflects
      whether or not the proxy adds itself to\n        the Record-Route header as
      a default action.  This header is\n        used to list the proxies that insist
      on being in the signaling\n        path for subsequent requests related to the
      call leg.\n        If the value of this object is 'true', the proxy adds itself
      to\n        the end of the Record-Route header, creating the header if\n        required.
      \ If the value is 'false', the proxy does not add\n        itself to the Record-Route
      header.\"\n    REFERENCE\n       \"RFC 3261, Section 20.30\"\n    ::= { sipServerProxyCfgEntry
      3 }\n"
    - '--

      '
    - '-- Security

      '
    - '--

      '
    - "sipServerCfgProxyAuthMethod OBJECT-TYPE\n    SYNTAX      BITS {\n                  none(0),\n
      \                 tls(1),\n                  digest(2)\n                }\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object reflects the authentication methods that MAY be\n        used to authenticate
      request originators.\n        bit 0  no authentication is performed\n        bit
      1  TLS is used\n        bit 2  HTTP Digest is used.\"\n    REFERENCE\n       \"RFC
      3261 Sections 22, 23, 26, 26.2.3\"\n    ::= { sipServerProxyCfgEntry 4 }\n"
    - "sipServerCfgProxyAuthDefaultRealm OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object reflects the default realm value used in\n        Proxy-Authenticate
      headers.  Note that this MAY need to be\n        stored per user, in which case,
      this default value is ignored.\n       \"\n    REFERENCE\n       \"RFC 3261,
      Section 22.1\"\n    ::= { sipServerProxyCfgEntry 5 }\n"
    - '--

      '
    - '-- Proxy Server Statistics

      '
    - '--

      '
    - "sipServerProxyStatsTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipServerProxyStatsEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains the statistics objects applicable to all\n        SIP Proxy Servers
      in this system.\"\n    ::= { sipServerProxyStats 1 }\n"
    - "sipServerProxyStatsEntry OBJECT-TYPE\n    SYNTAX      SipServerProxyStatsEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A
      row of summary statistics.\n        Each row represents those objects for a
      particular SIP server\n        present in this system.  applIndex is used to
      uniquely identify\n        these instances of SIP servers and correlate them
      through the\n        common framework of the NETWORK-SERVICES-MIB (RFC 2788).
      \ The\n        same value of applIndex used in the corresponding\n        SIP-COMMON-MIB
      is used here.\"\n    INDEX { applIndex }\n    ::= { sipServerProxyStatsTable
      1 }\n"
    - "SipServerProxyStatsEntry ::=\n    SEQUENCE {\n        sipServerProxyStatProxyReqFailures
      Counter32,\n        sipServerProxyStatsDisconTime      TimeStamp\n    }\n"
    - "sipServerProxyStatProxyReqFailures OBJECT-TYPE\n    SYNTAX      Counter32\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object contains the number of occurrences of unsupported\n        options being
      specified in received Proxy-Require headers.\n        Such occurrences result
      in a 420 Bad Extension status code\n        being returned.\n        Discontinuities
      in the value of this counter can occur at\n        re-initialization of the
      SIP entity or service.  A Management\n        Station can detect discontinuities
      in this counter by\n        monitoring the sipServerProxyStatsDisconTime object
      in the same\n        row.\"\n    ::= { sipServerProxyStatsEntry 1 }\n"
    - "sipServerProxyStatsDisconTime OBJECT-TYPE\n SYNTAX      TimeStamp\n MAX-ACCESS
      \ read-only\n STATUS      current\n DESCRIPTION\n    \"The value of the sysUpTime
      object when the counters for the server\n     statistics objects in this row
      last experienced a discontinuity.\"\n ::= { sipServerProxyStatsEntry 2 }\n"
    - '--

      '
    - '-- This group contains MIB objects related to SIP Registrars.

      '
    - '--

      '
    - 'sipServerRegCfg         OBJECT IDENTIFIER ::= { sipServerMIBObjects 5 }

      '
    - 'sipServerRegStats       OBJECT IDENTIFIER ::= { sipServerMIBObjects 6 }

      '
    - '--

      '
    - '-- Registrar Configuration

      '
    - '--

      '
    - "sipServerRegCfgTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipServerRegCfgEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains configuration objects applicable to SIP\n        Registrars.\"\n
      \   ::= { sipServerRegCfg 1 }\n"
    - "sipServerRegCfgEntry OBJECT-TYPE\n    SYNTAX      SipServerRegCfgEntry\n    MAX-ACCESS
      \ not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A row of
      common Registrar configuration.\n        Each row represents those objects for
      a particular SIP server\n        present in this system.  applIndex is used
      to uniquely identify\n        these instances of SIP servers and correlate them
      through the\n        common framework of the NETWORK-SERVICES-MIB (RFC 2788).
      \ The\n        same value of applIndex used in the corresponding\n        SIP-COMMON-MIB
      is used here.\"\n    INDEX { applIndex }\n    ::= { sipServerRegCfgTable 1 }\n"
    - "SipServerRegCfgEntry ::=\n    SEQUENCE {\n        sipServerRegMaxContactExpiryDuration
      \ Unsigned32,\n        sipServerRegMaxUsers                  Unsigned32,\n        sipServerRegCurrentUsers
      \             Gauge32,\n        sipServerRegDfltRegActiveInterval     Unsigned32\n
      \   }\n"
    - "sipServerRegMaxContactExpiryDuration OBJECT-TYPE\n    SYNTAX      Unsigned32
      (0..4294967295)\n    UNITS      \"seconds\"\n    MAX-ACCESS  read-only\n    STATUS
      \     current\n    DESCRIPTION\n       \"This object reflects the maximum expiry
      that may be requested\n        by a User Agent for a particular Contact.  User
      Agents can\n        specify expiry using either an Expiry header in a REGISTER\n
      \       request, or using an Expires parameter in a Contact header in\n        a
      REGISTER request.  If the value requested by the User Agent\n        is greater
      than the value of this object, then the contact\n        information is given
      the duration specified by this object, and\n        that duration is indicated
      to the User Agent in the response.\"\n    ::= { sipServerRegCfgEntry 1 }\n"
    - "sipServerRegMaxUsers OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..4294967295)\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object reflects the maximum number of users that the\n        Registrar supports.
      \ The current number of users is reflected\n        by sipServerRegCurrentUsers.\"\n
      \   ::= { sipServerRegCfgEntry 2 }\n"
    - "sipServerRegCurrentUsers OBJECT-TYPE\n    SYNTAX      Gauge32 (0..4294967295)\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object reflects the number of users currently registered\n        with the Registrar.\"\n
      \   ::= { sipServerRegCfgEntry 3 }\n"
    - "sipServerRegDfltRegActiveInterval OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..4294967295)\n
      \   UNITS      \"seconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n
      \   DESCRIPTION\n       \"This object reflects the default time interval the
      Registrar\n        considers registrations to be active.  The value is used
      to\n        compute the Expires header in the REGISTER response.  If a user\n
      \       agent requests a time interval shorter than specified by this\n        object,
      the Registrar SHOULD honor that request.  If a Contact\n        entry does not
      have an 'expires' parameter, the value of the\n        Expires header field
      is used instead.  If a Contact entry has no\n        'expires' parameter and
      no Expires header field is present,\n        the value of this object is used
      as the default value.\"\n    REFERENCE\n       \"RFC 3261, Section 10.2\"\n
      \   ::= { sipServerRegCfgEntry 4 }\n"
    - '--

      '
    - '-- Per User Information

      '
    - '--

      '
    - "sipServerRegUserTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipServerRegUserEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains information on all users registered to each\n        Registrar
      in this system.\"\n    ::= { sipServerRegCfg 2 }\n"
    - "sipServerRegUserEntry OBJECT-TYPE\n    SYNTAX      SipServerRegUserEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      entry contains information for a single user registered to\n        this Registrar.\n
      \       Each row represents those objects for a particular SIP server\n        present
      in this system.  applIndex is used to uniquely identify\n        these instances
      of SIP servers and correlate them through the\n        common framework of the
      NETWORK-SERVICES-MIB (RFC 2788).  The\n        same value of applIndex used
      in the corresponding\n        SIP-COMMON-MIB is used here.\"\n    INDEX { applIndex,
      sipServerRegUserIndex }\n    ::= { sipServerRegUserTable 1 }\n"
    - "SipServerRegUserEntry ::=\n    SEQUENCE {\n        sipServerRegUserIndex                  Unsigned32,\n
      \       sipServerRegUserUri                    SnmpAdminString,\n        sipServerRegUserAuthenticationFailures
      Counter32,\n        sipServerRegUserDisconTime             TimeStamp\n    }\n"
    - "sipServerRegUserIndex OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..4294967295)\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      object uniquely identifies a conceptual row in the table.\"\n    ::= { sipServerRegUserEntry
      1 }\n"
    - "sipServerRegUserUri OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      contains the user's address-of-record.  It is the\n        main form by which
      the Registrar knows the user.  The format is\n        typically 'user@domain'.
      \ It is contained in the To header for\n        all REGISTER requests.\"\n    ::=
      { sipServerRegUserEntry 2 }\n"
    - "sipServerRegUserAuthenticationFailures OBJECT-TYPE\n    SYNTAX      Counter32\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object contains a count of the number of times the user\n        has failed
      authentication.\n        Discontinuities in the value of this counter can occur
      due to\n        successful user authentications and at re-initialization of\n
      \       the SIP entity or service.  A Management Station can detect\n        discontinuities
      in this counter by monitoring the\n        sipServerRegUserDisconTime object
      in the same row.\"\n    ::= { sipServerRegUserEntry 3 }\n"
    - "sipServerRegUserDisconTime OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"The value of
      the sysUpTime object when the counters for the\n        user registration statistics
      objects in this row last\n        experienced a discontinuity.\"\n    ::= {
      sipServerRegUserEntry 4 }\n"
    - '--

      '
    - '-- Per Contact Information

      '
    - '--

      '
    - "sipServerRegContactTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipServerRegContactEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains information on every location where a\n        registered user
      (specified by sipServerRegUserIndex) wishes to\n        be found (i.e., the
      user has provided contact information to\n        each SIP Registrar in this
      system).\"\n    ::= { sipServerRegCfg 3 }\n"
    - "sipServerRegContactEntry OBJECT-TYPE\n    SYNTAX      SipServerRegContactEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      entry contains information for a single Contact.  Multiple\n        contacts
      may exist for a single user.\n        Each row represents those objects for
      a particular SIP server\n        present in this system.  applIndex is used
      to uniquely identify\n        these instances of SIP servers and correlate them
      through the\n        common framework of the NETWORK-SERVICES-MIB (RFC 2788).
      \ The\n        same value of applIndex used in the corresponding\n        SIP-COMMON-MIB
      is used here.\"\n    INDEX { applIndex,\n            sipServerRegUserIndex,\n
      \           sipServerRegContactIndex\n          }\n    ::= { sipServerRegContactTable
      1 }\n"
    - "SipServerRegContactEntry ::=\n    SEQUENCE {\n        sipServerRegContactIndex
      \       Unsigned32,\n        sipServerRegContactDisplayName  SnmpAdminString,\n
      \       sipServerRegContactURI          SnmpAdminString,\n        sipServerRegContactLastUpdated
      \ TimeStamp,\n        sipServerRegContactExpiry       DateAndTime,\n        sipServerRegContactPreference
      \  SnmpAdminString\n    }\n"
    - "sipServerRegContactIndex OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..4294967295)\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"Along
      with the sipServerRegUserIndex, this object uniquely\n        identifies a conceptual
      row in the table.\"\n    ::= { sipServerRegContactEntry 1 }\n"
    - "sipServerRegContactDisplayName OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object contains the display name for the Contact.  For\n        example, 'Santa
      at Home', or 'Santa on his Sled', corresponding\n        to contact URIs of
      sip:BigGuy@example.com or\n        sip:sclaus817@example.com, respectively.\"\n
      \   ::= { sipServerRegContactEntry 2 }\n"
    - "sipServerRegContactURI OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      contains either a SIP URI where the user can be\n        contacted.  This URI
      is normally returned to a client from a\n        Redirect Server, or is used
      as the RequestURI in a SIP request\n        line for requests forwarded by a
      proxy.\"\n    ::= { sipServerRegContactEntry 3 }\n"
    - "sipServerRegContactLastUpdated OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      indicates the time when this contact information\n        was accepted.  If
      the contact information is updated via a\n        subsequent REGISTER of the
      same information, this object is\n        also updated.\"\n    ::= { sipServerRegContactEntry
      4 }\n"
    - "sipServerRegContactExpiry OBJECT-TYPE\n    SYNTAX      DateAndTime\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      contains the date and time when the contact\n        information will no longer
      be valid.  Such times may be\n        specified by the user at registration
      (i.e., Expires header or\n        expiry parameter in the Contact information),
      or a system\n        default can be applied.\"\n    ::= { sipServerRegContactEntry
      5 }\n"
    - "sipServerRegContactPreference OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n
      \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \"This
      object indicates a relative preference for the particular\n        Contact header
      field value compared to other bindings for this\n        address-of-record.
      \ A registering user may provide this\n        preference as a 'qvalue' parameter
      in the Contact header.\n        The format of this item is a decimal number
      between 0 and 1\n        (for example 0.9).  Higher values indicate locations
      preferred\n        by the user.\"\n    REFERENCE\n       \"RFC 3261, Section
      10.2.1.2, 16.6, and 20.10\"\n    ::= { sipServerRegContactEntry 6 }\n"
    - '--

      '
    - '-- Registrar Statistics

      '
    - '--

      '
    - "sipServerRegStatsTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF SipServerRegStatsEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"This
      table contains the summary statistics objects applicable\n        to all SIP
      Registrars in this system.\"\n    ::= { sipServerRegStats 1 }\n"
    - "sipServerRegStatsEntry OBJECT-TYPE\n    SYNTAX      SipServerRegStatsEntry\n
      \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n       \"A
      row of summary statistics.\n        Each row represents those objects for a
      particular SIP server\n        present in this system.  applIndex is used to
      uniquely identify\n        these instances of SIP servers and correlate them
      through the\n        common framework of the NETWORK-SERVICES-MIB (RFC 2788).
      \ The\n        same value of applIndex used in the corresponding\n        SIP-COMMON-MIB
      is used here.\"\n    INDEX { applIndex }\n    ::= { sipServerRegStatsTable 1
      }\n"
    - "SipServerRegStatsEntry ::=\n    SEQUENCE {\n        sipServerRegStatsAcceptedRegs
      \    Counter32,\n        sipServerRegStatsRejectedRegs     Counter32,\n        sipServerRegStatsDisconTime
      \      TimeStamp\n    }\n"
    - "sipServerRegStatsAcceptedRegs OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      contains a count of the number of REGISTER requests\n        that have been
      accepted (status code 200) by the Registrar.\n        This includes additions
      of new contact information, refreshing\n        contact information, as well
      as requests for deletion of\n        contact information.\n        Discontinuities
      in the value of this counter can occur at\n        re-initialization of the
      SIP entity or service.  A Management\n        Station can detect discontinuities
      in this counter by\n        monitoring the sipServerRegStatsDisconTime object
      in the same\n        row.\"\n    ::= { sipServerRegStatsEntry 1 }\n"
    - "sipServerRegStatsRejectedRegs OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"This object
      contains a count of the number REGISTER requests\n        that have been rejected
      by the Registrar.\n        Discontinuities in the value of this counter can
      occur at\n        re-initialization of the SIP entity or service.  A Management\n
      \       Station can detect discontinuities in this counter by\n        monitoring
      the sipServerRegStatsDisconTime object in the same\n        row.\"\n  ::= {
      sipServerRegStatsEntry 2 }\n"
    - "sipServerRegStatsDisconTime OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS
      \ read-only\n    STATUS      current\n    DESCRIPTION\n       \"The value of
      the sysUpTime object when the counters for the\n        registrar statistics
      objects in this row last experienced a\n        discontinuity.\"\n ::= { sipServerRegStatsEntry
      3 }\n"
    - '--

      '
    - '-- Conformance

      '
    - '--

      '
    - "sipServerMIBCompliances\n         OBJECT IDENTIFIER ::= { sipServerMIBConformance
      1 }\n"
    - "sipServerMIBGroups\n         OBJECT IDENTIFIER ::= { sipServerMIBConformance
      2 }\n"
    - '--

      '
    - '-- Compliance Statements

      '
    - '--

      '
    - "sipServerProxyServerCompliance MODULE-COMPLIANCE\n    STATUS      current\n
      \   DESCRIPTION\n       \"The compliance statement for SIP entities acting as
      Proxy\n        Servers.\"\n    MODULE -- this module\n        MANDATORY-GROUPS
      { sipServerConfigGroup,\n                           sipServerProxyConfigGroup,\n
      \                          sipServerProxyStatsGroup\n                         }\n
      \   ::= { sipServerMIBCompliances 1 }\n"
    - "sipRedirectServerCompliance MODULE-COMPLIANCE\n    STATUS      current\n    DESCRIPTION\n
      \      \"The compliance statement for SIP entities acting as Redirect\n        Servers.\"\n
      \   MODULE -- this module\n        MANDATORY-GROUPS { sipServerConfigGroup }\n
      \   ::= { sipServerMIBCompliances 2 }\n"
    - "sipServerRegistrarServerCompliance MODULE-COMPLIANCE\n    STATUS      current\n
      \   DESCRIPTION\n       \"The compliance statement for SIP entities acting as\n
      \       Registrars.\"\n    MODULE -- this module\n        MANDATORY-GROUPS {
      sipServerConfigGroup,\n                           sipServerRegistrarConfigGroup,\n
      \                          sipServerRegistrarStatsGroup }\n    GROUP sipServerRegistrarUsersGroup\n
      \   DESCRIPTION\n       \"This is an optional group.\"\n    ::= { sipServerMIBCompliances
      3 }\n"
    - '--

      '
    - '-- Units of Conformance

      '
    - '--

      '
    - "sipServerConfigGroup OBJECT-GROUP\n    OBJECTS {\n            sipServerCfgHostAddressType,\n
      \           sipServerCfgHostAddress\n    }\n    STATUS      current\n    DESCRIPTION\n
      \      \"A collection of objects providing configuration common to SIP\n        Proxy
      and Redirect servers.\"\n    ::= { sipServerMIBGroups 1 }\n"
    - "sipServerProxyConfigGroup OBJECT-GROUP\n    OBJECTS {\n            sipServerCfgProxyStatefulness,\n
      \           sipServerCfgProxyRecursion,\n            sipServerCfgProxyRecordRoute,\n
      \           sipServerCfgProxyAuthMethod,\n            sipServerCfgProxyAuthDefaultRealm\n
      \   }\n    STATUS      current\n    DESCRIPTION\n       \"A collection of objects
      providing configuration for SIP Proxy\n        servers.\"\n    ::= { sipServerMIBGroups
      2 }\n"
    - "sipServerProxyStatsGroup OBJECT-GROUP\n    OBJECTS {\n            sipServerProxyStatProxyReqFailures,\n
      \           sipServerProxyStatsDisconTime\n    }\n    STATUS      current\n
      \   DESCRIPTION\n       \"A collection of objects providing statistics for SIP
      Proxy\n        servers.\"\n    ::= { sipServerMIBGroups 3 }\n"
    - "sipServerRegistrarConfigGroup OBJECT-GROUP\n    OBJECTS {\n            sipServerRegMaxContactExpiryDuration,\n
      \           sipServerRegMaxUsers,\n            sipServerRegCurrentUsers,\n            sipServerRegDfltRegActiveInterval\n
      \   }\n    STATUS      current\n    DESCRIPTION\n       \"A collection of objects
      providing configuration for SIP\n        Registrars.\"\n    ::= { sipServerMIBGroups
      4 }\n"
    - "sipServerRegistrarStatsGroup OBJECT-GROUP\n    OBJECTS {\n            sipServerRegStatsAcceptedRegs,\n
      \           sipServerRegStatsRejectedRegs,\n            sipServerRegStatsDisconTime\n
      \   }\n    STATUS      current\n    DESCRIPTION\n       \"A collection of objects
      providing statistics for SIP\n        Registrars.\"\n    ::= { sipServerMIBGroups
      5 }\n"
    - "sipServerRegistrarUsersGroup OBJECT-GROUP\n    OBJECTS {\n            sipServerRegUserUri,\n
      \           sipServerRegUserAuthenticationFailures,\n            sipServerRegUserDisconTime,\n
      \           sipServerRegContactDisplayName,\n            sipServerRegContactURI,\n
      \           sipServerRegContactLastUpdated,\n            sipServerRegContactExpiry,\n
      \           sipServerRegContactPreference\n    }\n    STATUS      current\n
      \   DESCRIPTION\n       \"A collection of objects related to registered users.\"\n
      \   ::= { sipServerMIBGroups 6 }\n"
    - 'END

      '
    title: 7.4.  SIP Server MIB Module (Proxy, Redirect, and Registrar Servers)
  title: 7.  Definitions
- contents:
  - "8.  IANA Considerations\n   The MIB modules defined in this document use the
    following IANA-\n   assigned OBJECT IDENTIFIER values recorded in the SMI Numbers\n
    \  registry:\n                +--------------+-------------------------+\n                |
    Descriptor   | OBJECT IDENTIFIER value |\n                +--------------+-------------------------+\n
    \               | sipTC        | { mib-2 148 }           |\n                |
    sipCommonMIB | { mib-2 149 }           |\n                | sipUAMIB     | { mib-2
    150 }           |\n                | sipServerMIB | { mib-2 151 }           |\n
    \               +--------------+-------------------------+\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   There are a number of management objects defined
    in the SIP-COMMON-\n   MIB MIB module with a MAX-ACCESS clause of read-write and/or
    read-\n   create.  Such objects may be considered sensitive or vulnerable in\n
    \  some network environments.  The support for SET operations in a non-\n   secure
    environment without proper protection can have a negative\n   effect on network
    operations.\n   The following read-create object in SIP-COMMON-MIB is used to\n
    \  configure the status code statistics that will be monitored by the\n   SIP
    entity:\n      sipCommonStatusCodeRowStatus:\n      If this object is SET maliciously,
    it may result in an over-\n      allocation of resources in a system for the purpose
    of\n      accumulating and maintaining statistics.\n   The following read-write
    objects in SIP-COMMON-MIB are used to\n   configure the behavior of certain SNMP
    notifications potentially\n   generated by a SIP entity:\n      sipCommonStatusCodeNotifSend,
    sipCommonStatusCodeNotifEmitMode,\n      sipCommonStatusCodeNotifThresh, sipCommonStatusCodeNotifInterval,\n
    \     sipCommonCfgServiceNotifEnable:\n      If these objects are SET maliciously,
    it may result in a system\n      and/or network performance impact due to the
    generation of SNMP\n      notifications.\n   Some of the readable objects in the
    MIB modules (i.e., objects with a\n   MAX-ACCESS other than not-accessible) may
    be considered sensitive or\n   vulnerable in some network environments.  It is
    thus important to\n   control even GET and/or NOTIFY access to these objects and
    possibly\n   to even encrypt the values of these objects when sending them over\n
    \  the network via SNMP.\n   The following object values may contain private or
    confidential\n   customer information like first name, last name, customer\n   identification,
    location, company affiliation, the time the\n   information was updated, etc.\n
    \     sipServerRegContactDisplayName, sipServerRegContactURI,\n      sipServerRegContactLastUpdated
    and sipCommonCfgOrganization.\n   The sipCommonCfgTable table contains some objects
    that may help\n   attackers gain knowledge about the status and operations of
    the SIP\n   service.  In particular, the object value of\n   sipCommonCfgServiceOperStatus
    may indicate that the SIP entity is in\n   congested state and may lead attackers
    to build additional service\n   attacks to overload the system.\n   The sipCommonCfgEntityType
    object indicates the type of SIP entity,\n   and the sipCommonMethodSupportedTable
    table contains in the SIP-\n   COMMON-MIB MIB module list of SIP methods supported
    by each entity in\n   the system.  Gaining access to this information may allow
    attackers\n   to build method-specific attacks or use unsupported methods to create\n
    \  denial-of-service attack scenarios.\n   In the SIP-UA-MIB MIB module, the sipUACfgServerTable
    contains the\n   address of the SIP servers providing services to the UA, and\n
    \  obtaining this information may disclose some private or sensitive\n   information
    about the SIP service usage.\n   In the SIP-SERVER-MIB MIB module, the sipServerCfgProxyAuthMethod\n
    \  object defines the authentication methods supported by the server and\n   may
    be used to build specific denial-of-service attackers targeted at\n   the security
    mechanisms employed by the SIP entity.\n   SNMP versions prior to SNMPv3 did not
    include adequate security.\n   Even if the network itself is secure (for example
    by using IPsec),\n   even then, there is no control as to who on the secure network
    is\n   allowed to access and GET/SET (read/change/create/delete) the objects\n
    \  in this set of MIB modules.\n   It is RECOMMENDED that implementers consider
    the security features as\n   provided by the SNMPv3 framework (see RFC 3410 [RFC3410]),
    including\n   full support for the SNMPv3 cryptographic mechanisms (for\n   authentication
    and privacy).\n   Further, deployment of SNMP versions prior to SNMPv3 is NOT\n
    \  RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\n   enable
    cryptographic security.  It is then a customer/operator\n   responsi when bility
    to ensure that the SNMP entity giving access to\n   an instance of this MIB module
    is properly configured to give access\n   to the objects only to those principals
    (users) that have legitimate\n   rights to indeed GET or SET (change/create/delete)
    them.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Contributor Acknowledgments\n   We wish to thank the members of the IETF
    SIP and SIPPING working\n   groups, and the SIP-MIB Design team for their comments
    and\n   suggestions.  Detailed comments were provided by Tom Taylor, Kavitha\n
    \  Patchayappan, Dan Romascanu, Cullen Jennings, Orit Levin, AC\n   Mahendran,
    Mary Barnes, Rohan Mahy, Bob Penfield, Charles Eckel, and\n   Dean Willis.  Special
    thanks to Bert Wijnen for his expert reviews,\n   which have greatly improved
    the SIP MIB modules.\n"
  title: 10.  Contributor Acknowledgments
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n
      \             A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,
      \"SIP:  Session Initiation Protocol\", RFC 3261,\n              June 2002.\n
      \  [RFC2578]  McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n              \"Structure
      of Management Information Version 2 (SMIv2)\",\n              STD 58, RFC 2578,
      April 1999.\n   [RFC2579]  McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n
      \             \"Textual Conventions for SMIv2\", STD 58, RFC 2579, April\n              1999.\n
      \  [RFC2580]  McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n              \"Conformance
      Statements for SMIv2\", STD 58, RFC 2580,\n              April 1999.\n   [RFC2788]
      \ Freed, N. and S. Kille, \"Network Services Monitoring MIB\",\n              RFC
      2788, March 2000.\n   [RFC3411]  Harrington, D., Presuhn, R., and B. Wijnen,
      \"An\n              Architecture for Describing Simple Network Management\n
      \             Protocol (SNMP) Management Frameworks\", STD 62, RFC 3411,\n              December
      2002.\n   [RFC4001]  Daniele, M., Haberman, B., Routhier, S., and J.\n              Schoenwaelder,
      \"Textual Conventions for Internet Network\n              Addresses\", RFC 4001,
      February 2005.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC3410]  Case, J., Mundy, R., Partain,
      D., and B. Stewart,\n              \"Introduction and Applicability Statements
      for Internet-\n              Standard Management Framework\", RFC 3410, December
      2002.\n   [RFC3262]  Rosenberg, J. and H. Schulzrinne, \"Reliability of\n              Provisional
      Responses in Session Initiation Protocol\n              (SIP)\", RFC 3262, June
      2002.\n   [RFC4168]  Rosenberg, J., Schulzrinne, H., and G. Camarillo, \"The\n
      \             Stream Control Transmission Protocol (SCTP) as a Transport\n              for
      the Session Initiation Protocol (SIP)\", RFC 4168,\n              October 2005.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Authors' Addresses\n   Kevin Lingle\n   Cisco Systems, Inc.\n   7025 Kit Creek
    Road\n   P.O. Box 14987\n   Research Triangle Park, NC  27709\n   US\n   Phone:
    +1 919 476 2029\n   EMail: klingle@cisco.com\n   Jean-Francois Mule\n   CableLabs\n
    \  858 Coal Creek Circle\n   Louisville, CO  80027\n   US\n   Phone: +1 303 661
    9100\n   EMail: jf.mule@cablelabs.com\n   Joon Maeng\n   5612 Sedona Drive\n   Austin,
    TX  78759\n   US\n   Phone: +1 512 418 0590\n   EMail: jmaeng@austin.rr.com\n
    \  Dave Walker\n   EMail: drwalker@rogers.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
