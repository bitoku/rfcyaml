- title: __initial_text__
  contents:
  - "                          An IPv6 Prefix for\n        Overlay Routable Cryptographic\
    \ Hash Identifiers (ORCHID)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document introduces Overlay Routable Cryptographic Hash\n \
    \  Identifiers (ORCHID) as a new, experimental class of IPv6-address-\n   like\
    \ identifiers.  These identifiers are intended to be used as\n   endpoint identifiers\
    \ at applications and Application Programming\n   Interfaces (API) and not as\
    \ identifiers for network location at the\n   IP layer, i.e., locators.  They\
    \ are designed to appear as application\n   layer entities and at the existing\
    \ IPv6 APIs, but they should not\n   appear in actual IPv6 headers.  To make them\
    \ more like vanilla IPv6\n   addresses, they are expected to be routable at an\
    \ overlay level.\n   Consequently, while they are considered non-routable addresses\
    \ from\n   the IPv6 layer point-of-view, all existing IPv6 applications are\n\
    \   expected to be able to use them in a manner compatible with current\n   IPv6\
    \ addresses.\n   This document requests IANA to allocate a temporary prefix out\
    \ of the\n   IPv6 addressing space for Overlay Routable Cryptographic Hash\n \
    \  Identifiers.  By default, the prefix will be returned to IANA in\n   2014,\
    \ with continued use requiring IETF consensus.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Rationale and Intent . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  ORCHID Properties  . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     1.3.  Expected use of ORCHIDs  . . . . . . . . . . . . . .\
    \ . . .  4\n     1.4.  Action Plan  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  4\n     1.5.  Terminology  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  4\n   2.  Cryptographic Hash Identifier Construction . . . . . . . . . .\
    \  5\n   3.  Routing Considerations . . . . . . . . . . . . . . . . . . . .  6\n\
    \     3.1.  Overlay Routing  . . . . . . . . . . . . . . . . . . . . .  6\n  \
    \ 4.  Collision Considerations . . . . . . . . . . . . . . . . . . .  7\n   5.\
    \  Design Choices . . . . . . . . . . . . . . . . . . . . . . . .  9\n   6.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . .  9\n   7.  IANA Considerations\
    \  . . . . . . . . . . . . . . . . . . . . . 10\n   8.  Acknowledgments  . . .\
    \ . . . . . . . . . . . . . . . . . . . . 11\n   9.  References . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . 11\n     9.1.  Normative References .\
    \ . . . . . . . . . . . . . . . . . . 11\n     9.2.  Informative References .\
    \ . . . . . . . . . . . . . . . . . 11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document introduces Overlay Routable Cryptographic\
    \ Hash\n   Identifiers (ORCHID), a new class of IP address-like identifiers.\n\
    \   These identifiers are intended to be globally unique in a statistical\n  \
    \ sense (see Section 4), non-routable at the IP layer, and routable at\n   some\
    \ overlay layer.  The identifiers are securely bound, via a secure\n   hash function,\
    \ to the concatenation of an input bitstring and a\n   context tag.  Typically,\
    \ but not necessarily, the input bitstring\n   will include a suitably encoded\
    \ public cryptographic key.\n"
- title: 1.1.  Rationale and Intent
  contents:
  - "1.1.  Rationale and Intent\n   These identifiers are expected to be used at the\
    \ existing IPv6\n   Application Programming Interfaces (API) and application protocols\n\
    \   between consenting hosts.  They may be defined and used in different\n   contexts,\
    \ suitable for different overlay protocols.  Examples of\n   these include Host\
    \ Identity Tags (HIT) in the Host Identity Protocol\n   (HIP) [HIP-BASE] and Temporary\
    \ Mobile Identifiers (TMI) for Mobile\n   IPv6 Privacy Extension [PRIVACYTEXT].\n\
    \   As these identifiers are expected to be used along with IPv6\n   addresses\
    \ at both applications and APIs, co-ordination is desired to\n   make sure that\
    \ an ORCHID is not inappropriately taken for a vanilla\n   IPv6 address and vice\
    \ versa.  In practice, allocation of a separate\n   prefix for ORCHIDs seems to\
    \ suffice, making them compatible with IPv6\n   addresses at the upper layers\
    \ while simultaneously making it trivial\n   to prevent their usage at the IP\
    \ layer.\n   While being technically possible to use ORCHIDs between consenting\n\
    \   hosts without any co-ordination with the IETF and the IANA, the\n   authors\
    \ would consider such practice potentially dangerous.  A\n   specific danger would\
    \ be realised if the IETF community later decided\n   to use the ORCHID prefix\
    \ for some different purpose.  In that case,\n   hosts using the ORCHID prefix\
    \ would be, for practical purposes,\n   unable to use the prefix for the other\
    \ new purpose.  That would lead\n   to partial balkanisation of the Internet,\
    \ similar to what has\n   happened as a result of historical hijackings of non-RFC\
    \ 1918\n   [RFC1918] IPv4 addresses for private use.\n   The whole need for the\
    \ proposed allocation grows from the desire to\n   be able to use ORCHIDs with\
    \ existing applications and APIs.  This\n   desire leads to the potential conflict,\
    \ mentioned above.  Resolving\n   the conflict requires the proposed allocation.\n\
    \   One can argue that the desire to use these kinds of identifiers via\n   existing\
    \ APIs is architecturally wrong, and there is some truth in\n   that argument.\
    \  Indeed, it would be more desirable to introduce a new\n   API and update all\
    \ applications to use identifiers, rather than\n   locators, via that new API.\
    \  That is exactly what we expect to happen\n   in the long run.\n   However,\
    \ given the current state of the Internet, we do not consider\n   it viable to\
    \ introduce any changes that, at once, require\n   applications to be rewritten\
    \ and host stacks to be updated.  Rather\n   than that, we believe in piece-wise\
    \ architectural changes that\n   require only one of the existing assets to be\
    \ touched.  ORCHIDs are\n   designed to address this situation: to allow people\
    \ to experiment\n   with protocol stack extensions, such as secure overlay routing,\
    \ HIP,\n   or Mobile IP privacy extensions, without requiring them to update\n\
    \   their applications.  The goal is to facilitate large-scale\n   experiments\
    \ with minimum user effort.\n   For example, there already exists, at the time\
    \ of this writing, HIP\n   implementations that run fully in user space, using\
    \ the operating\n   system to divert a certain part of the IPv6 address space\
    \ to a user\n   level daemon for HIP processing.  In practical terms, these\n\
    \   implementations are already using a certain IPv6 prefix for\n   differentiating\
    \ HIP identifiers from IPv6 addresses, allowing them\n   both to be used by the\
    \ existing applications via the existing APIs.\n   This document argues for allocating\
    \ an experimental prefix for such\n   purposes, thereby paving the way for large-scale\
    \ experiments with\n   cryptographic identifiers without the dangers caused by\
    \ address-space\n   hijacking.\n"
- title: 1.2.  ORCHID Properties
  contents:
  - "1.2.  ORCHID Properties\n   ORCHIDs are designed to have the following properties:\n\
    \   o  Statistical uniqueness; also see Section 4\n   o  Secure binding to the\
    \ input parameters used in their generation\n      (i.e., the context identifier\
    \ and a bitstring).\n   o  Aggregation under a single IPv6 prefix.  Note that\
    \ this is only\n      needed due to the co-ordination need as indicated above.\
    \  Without\n      such co-ordination need, the ORCHID namespace could potentially\
    \ be\n      completely flat.\n   o  Non-routability at the IP layer, by design.\n\
    \   o  Routability at some overlay layer, making them, from an\n      application\
    \ point of view, semantically similar to IPv6 addresses.\n   As mentioned above,\
    \ ORCHIDs are intended to be generated and used in\n   different contexts, as\
    \ suitable for different mechanisms and\n   protocols.  The context identifier\
    \ is meant to be used to\n   differentiate between the different contexts; see\
    \ Section 4 for a\n   discussion of the related API and kernel level implementation\
    \ issues,\n   and Section 5 for the design choices explaining why the context\n\
    \   identifiers are used.\n"
- title: 1.3.  Expected use of ORCHIDs
  contents:
  - "1.3.  Expected use of ORCHIDs\n   Examples of identifiers and protocols that\
    \ are expected to adopt the\n   ORCHID format include Host Identity Tags (HIT)\
    \ in the Host Identity\n   Protocol [HIP-BASE] and the Temporary Mobile Identifiers\
    \ (TMI) in the\n   Simple Privacy Extension for Mobile IPv6 [PRIVACYTEXT].  The\
    \ format\n   is designed to be extensible to allow other experimental proposals\
    \ to\n   share the same namespace.\n"
- title: 1.4.  Action Plan
  contents:
  - "1.4.  Action Plan\n   This document requests IANA to allocate an experimental\
    \ prefix out of\n   the IPv6 addressing space for Overlay Routable Cryptographic\
    \ Hash\n   Identifiers.\n"
- title: 1.5.  Terminology
  contents:
  - "1.5.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 2.  Cryptographic Hash Identifier Construction
  contents:
  - "2.  Cryptographic Hash Identifier Construction\n   An ORCHID is generated using\
    \ the algorithm below.  The algorithm\n   takes a bitstring and a context identifier\
    \ as input and produces an\n   ORCHID as output.\n   Input      :=  any bitstring\n\
    \   Hash Input :=  Context ID | Input\n   Hash       :=  Hash_function( Hash Input\
    \ )\n   ORCHID     :=  Prefix | Encode_100( Hash )\n   where:\n   |          \
    \     : Denotes concatenation of bitstrings\n   Input           : A bitstring\
    \ that is unique or statistically unique\n                     within a given\
    \ context. The bitstring is intended\n                     to be associated with\
    \ the to-be-created ORCHID in\n                     the given context.\n   Context\
    \ ID      : A randomly generated value defining the expected\n               \
    \      usage context for the particular ORCHID and the\n                     hash\
    \ function to be used for generation of ORCHIDs\n                     in this\
    \ context.  These values are allocated out of\n                     the namespace\
    \ introduced for CGA Type Tags; see RFC\n                     3972 and\n     \
    \                http://www.iana.org/assignments/cga-message-types.\n   Hash_function\
    \   : The one-way hash function (i.e., hash function with\n                  \
    \   pre-image resistance and second pre-image\n                     resistance)\
    \ to be used according to the document\n                     defining the context\
    \ usage identified by the\n                     Context ID.  For example, the\
    \ current version of\n                     the HIP specification defines SHA1\
    \ [RFC3174] as\n                     the hash function to be used to generate\
    \ ORCHIDs\n                     used in the HIP protocol [HIP-BASE].\n   Encode_100(\
    \ )   : An extraction function in which output is obtained\n                 \
    \    by extracting the middle 100-bit-long bitstring\n                     from\
    \ the argument bitstring.\n   Prefix          : A constant 28-bit-long bitstring\
    \ value\n                     (2001:10::/28).\n   To form an ORCHID, two pieces\
    \ of input data are needed.  The first\n   piece can be any bitstring, but is\
    \ typically expected to contain a\n   public cryptographic key and some other\
    \ data.  The second piece is a\n   context identifier, which is a 128-bit-long\
    \ datum, allocated as\n   specified in Section 7.  Each specific experiment (such\
    \ as HIP HITs\n   or MIP6 TMIs) is expected to allocate their own, specific context\n\
    \   identifier.\n   The input bitstring and context identifier are concatenated\
    \ to form\n   an input datum, which is then fed to the cryptographic hash function\n\
    \   to be used according to the document defining the context usage\n   identified\
    \ by the Context ID.  The result of the hash function is\n   processed by an encoding\
    \ function, resulting in a 100-bit-long value.\n   This value is prepended with\
    \ the 28-bit ORCHID prefix.  The result is\n   the ORCHID, a 128-bit-long bitstring\
    \ that can be used at the IPv6\n   APIs in hosts participating to the particular\
    \ experiment.\n   The ORCHID prefix is allocated under the IPv6 global unicast\
    \ address\n   block.  Hence, ORCHIDs are indistinguishable from IPv6 global unicast\n\
    \   addresses.  However, it should be noted that ORCHIDs do not conform\n   with\
    \ the IPv6 global unicast address format defined in Section 2.5.4\n   of [RFC4291]\
    \ since they do not have a 64-bit Interface ID formatted\n   as described in Section\
    \ 2.5.1. of [RFC4291].\n"
- title: 3.  Routing Considerations
  contents:
  - "3.  Routing Considerations\n   ORCHIDs are designed to serve as location independent\
    \ endpoint-\n   identifiers rather than IP-layer locators.  Therefore, routers\
    \ MAY be\n   configured not to forward any packets containing an ORCHID as a\n\
    \   source or a destination address.  If the destination address is an\n   ORCHID\
    \ but the source address is a valid unicast source address,\n   routers MAY be\
    \ configured to generate an ICMP Destination\n   Unreachable, Administratively\
    \ Prohibited message.\n   Due to the experimental nature of ORCHIDs, router software\
    \ MUST NOT\n   include any special handling code for ORCHIDs.  In other words,\
    \ the\n   non-routability property of ORCHIDs, if implemented, MUST be\n   implemented\
    \ via configuration and NOT by hardwired software code.  At\n   this time, it\
    \ is RECOMMENDED that the default router configuration\n   not handle ORCHIDs\
    \ in any special way.  In other words, there is no\n   need to touch existing\
    \ or new routers due to this experiment.  If\n   such a reason should later appear,\
    \ for example, due to a faulty\n   implementation leaking ORCHIDs to the IP layer,\
    \ the prefix can be and\n   should be blocked by a simple configuration rule.\n"
- title: 3.1.  Overlay Routing
  contents:
  - "3.1.  Overlay Routing\n   As mentioned multiple times, ORCHIDs are designed to\
    \ be non-routable\n   at the IP layer.  However, there are multiple ongoing research\n\
    \   efforts for creating various overlay routing and resolution\n   mechanisms\
    \ for flat identifiers.  For example, the Host Identity\n   Indirection Infrastructure\
    \ (Hi3) [Hi3] and Node Identity\n   Internetworking Architecture (NodeID) [NodeID]\
    \ proposals, outline\n   ways for using a Distributed Hash Table to forward HIP\
    \ packets based\n   on the Host Identity Tag.\n   What is common to the various\
    \ research proposals is that they create\n   a new kind of resolution or routing\
    \ infrastructure on top of the\n   existing Internet routing structure.  In practical\
    \ terms, they allow\n   delivery of packets based on flat, non-routable identifiers,\n\
    \   utilising information stored in a distributed database.  Usually, the\n  \
    \ database used is based on Distributed Hash Tables.  This effectively\n   creates\
    \ a new routing network on top of the existing IP-based routing\n   network, capable\
    \ of routing packets that are not addressed by IP\n   addresses but some other\
    \ kind of identifiers.\n   Typical benefits from overlay routing include location\
    \ independence,\n   more scalable multicast, anycast, and multihoming support\
    \ than in IP,\n   and better DoS resistance than in the vanilla Internet.  The\
    \ main\n   drawback is typically an order of magnitude of slower performance,\n\
    \   caused by an easily largish number of extra look-up or forwarding\n   steps\
    \ needed.  Consequently, in most practical cases, the overlay\n   routing system\
    \ is used only during initial protocol state set-up (cf.\n   TCP handshake), after\
    \ which the communicating endpoints exchange\n   packets directly with IP, bypassing\
    \ the overlay network.\n   The net result of the typical overlay routing approaches\
    \ is a\n   communication service whose basic functionality is comparable to that\n\
    \   provided by classical IP but provides considerably better resilience\n   that\
    \ vanilla IP in dynamic networking environments.  Some experiments\n   also introduce\
    \ additional functionality, such as enhanced security or\n   ability to effectively\
    \ route through several IP addressing domains.\n   The authors expect ORCHIDs\
    \ to become fully routable, via one or more\n   overlay systems, before the end\
    \ of the experiment.\n"
- title: 4.  Collision Considerations
  contents:
  - "4.  Collision Considerations\n   As noted above, the aim is that ORCHIDs are\
    \ globally unique in a\n   statistical sense.  That is, given the ORCHID referring\
    \ to a given\n   entity, the probability of the same ORCHID being used to refer\
    \ to\n   another entity elsewhere in the Internet must be sufficiently low so\n\
    \   that it can be ignored for most practical purposes.  We believe that\n   the\
    \ presented design meets this goal; see Section 5.\n   Consider next the very\
    \ rare case that some ORCHID happens to refer to\n   two different entities at\
    \ the same time, at two different locations\n   in the Internet.  Even in this\
    \ case, the probability of this fact\n   becoming visible (and therefore a matter\
    \ of consideration) at any\n   single location in the Internet is negligible.\
    \  For the vast majority\n   of cases, the two simultaneous uses of the ORCHID\
    \ will never cross\n   each other.  However, while rare, such collisions are still\
    \ possible.\n   This section gives reasonable guidelines on how to mitigate the\n\
    \   consequences in the case that such a collision happens.\n   As mentioned above,\
    \ ORCHIDs are expected to be used at the legacy\n   IPv6 APIs between consenting\
    \ hosts.  The context ID is intended to\n   differentiate between the various\
    \ experiments, or contexts, sharing\n   the ORCHID namespace.  However, the context\
    \ ID is not present in the\n   ORCHID itself, but only in front of the input bitstring\
    \ as an input\n   to the hash function.  While this may lead to certain implementation-\n\
    \   related complications, we believe that the trade-off of allowing the\n   hash\
    \ result part of an ORCHID being longer more than pays off the\n   cost.\n   Because\
    \ ORCHIDs are not routable at the IP layer, in order to send\n   packets using\
    \ ORCHIDs at the API level, the sending host must have\n   additional overlay\
    \ state within the stack to determine which\n   parameters (e.g., what locators)\
    \ to use in the outgoing packet.  An\n   underlying assumption here, and a matter\
    \ of fact in the proposals\n   that the authors are aware of, is that there is\
    \ an overlay protocol\n   for setting up and maintaining this additional state.\
    \  It is assumed\n   that the state-set-up protocol carries the input bitstring,\
    \ and that\n   the resulting ORCHID-related state in the stack can be associated\n\
    \   back with the appropriate context and state-set-up protocol.\n   Even though\
    \ ORCHID collisions are expected to be extremely rare, two\n   kinds of collisions\
    \ may still happen.  First, it is possible that two\n   different input bitstrings\
    \ within the same context may map to the\n   same ORCHID.  In this case, the state-set-up\
    \ mechanism is expected to\n   resolve the conflict, for example, by indicating\
    \ to the peer that the\n   ORCHID in question is already in use.\n   A second\
    \ type of collision may happen if two input bitstrings, used\n   in different\
    \ usage contexts, map to the same ORCHID.  In this case,\n   the main confusion\
    \ is about which context to use.  In order to\n   prevent these types of collisions,\
    \ it is RECOMMENDED that\n   implementations that simultaneously support multiple\
    \ different\n   contexts maintain a node-wide unified database of known ORCHIDs,\
    \ and\n   indicate a conflict if any of the mechanisms attempt to register an\n\
    \   ORCHID that is already in use.  For example, if a given ORCHID is\n   already\
    \ being used as a HIT in HIP, it cannot simultaneously be used\n   as a TMI in\
    \ Mobile IP.  Instead, if Mobile IP attempts to use the\n   ORCHID, it will be\
    \ notified (by the kernel) that the ORCHID in\n   question is already in use.\n"
- title: 5.  Design Choices
  contents:
  - "5.  Design Choices\n   The design of this namespace faces two competing forces:\n\
    \   o  As many bits as possible should be preserved for the hash result.\n   o\
    \  It should be possible to share the namespace between multiple\n      mechanisms.\n\
    \   The desire to have a long hash result requires that the prefix be as\n   short\
    \ as possible, and use few (if any) bits for additional encoding.\n   The present\
    \ design takes this desire to the maxim: all the bits\n   beyond the prefix are\
    \ used as hash output.  This leaves no bits in\n   the ORCHID itself available\
    \ for identifying the context.\n   Additionally, due to security considerations,\
    \ the present design\n   REQUIRES that the hash function used in constructing\
    \ ORCHIDs be\n   constant; see Section 6.\n   The authors explicitly considered\
    \ including a hash-extension\n   mechanism, similar to the one in CGA [RFC3972],\
    \ but decided to leave\n   it out.  There were two reasons: desire for simplicity,\
    \ and the\n   somewhat unclear IPR situation around the hash-extension mechanism.\n\
    \   If there is a future revision of this document, we strongly advise\n   the\
    \ future authors to reconsider the decision.\n   The desire to allow multiple\
    \ mechanisms to share the namespace has\n   been resolved by including the context\
    \ identifier in the hash-\n   function input.  While this does not allow the mechanism\
    \ to be\n   directly inferred from a ORCHID, it allows one to verify that a given\n\
    \   input bitstring and ORCHID belong to a given context, with high-\n   probability;\
    \ but also see Section 6.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   ORCHIDs are designed to be securely bound to\
    \ the Context ID and the\n   bitstring used as the input parameters during their\
    \ generation.  To\n   provide this property, the ORCHID generation algorithm relies\
    \ on the\n   second-preimage resistance (a.k.a. one-way) property of the hash\n\
    \   function used in the generation [RFC4270].  To have this property and\n  \
    \ to avoid collisions, it is important that the allocated prefix is as\n   short\
    \ as possible, leaving as many bits as possible for the hash\n   output.\n   For\
    \ a given Context ID, all mechanisms using ORCHIDs MUST use exactly\n   the same\
    \ mechanism for generating an ORCHID from the input bitstring.\n   Allowing different\
    \ mechanisms, without explicitly encoding the\n   mechanism in the Context ID\
    \ or the ORCHID itself, would allow so-\n   called bidding-down attacks.  That\
    \ is, if multiple different hash\n   functions were allowed to construct ORCHIDs\
    \ valid for the same\n   Context ID, and if one of the hash functions became insecure,\
    \ that\n   would allow attacks against even those ORCHIDs valid for the same\n\
    \   Context ID that had been constructed using the other, still secure\n   hash\
    \ functions.\n   Due to the desire to keep the hash output value as long as possible,\n\
    \   the hash function is not encoded in the ORCHID itself, but rather in\n   the\
    \ Context ID.  Therefore, the present design allows only one method\n   per given\
    \ Context ID for constructing ORCHIDs from input bitstrings.\n   If other methods\
    \ (perhaps using more secure hash functions) are later\n   needed, they MUST use\
    \ a different Context ID.  Consequently, the\n   suggested method to react to\
    \ the hash result becoming too short, due\n   to increased computational power,\
    \ or to the used hash function\n   becoming insecure due to advances in cryptology,\
    \ is to allocate a new\n   Context ID and cease to use the present one.\n   As\
    \ of today, SHA1 [RFC3174] is considered as satisfying the second-\n   preimage\
    \ resistance requirement.  The current version of the HIP\n   specification defines\
    \ SHA1 [RFC3174] as the hash function to be used\n   to generate ORCHIDs for the\
    \ Context ID used by the HIP protocol\n   [HIP-BASE].\n   In order to preserve\
    \ a low enough probability of collisions (see\n   Section 4), each method MUST\
    \ utilize a mechanism that makes sure that\n   the distinct input bitstrings are\
    \ either unique or statistically\n   unique within that context.  There are several\
    \ possible methods to\n   ensure this; for example, one can include into the input\
    \ bitstring a\n   globally maintained counter value, a pseudo-random number of\n\
    \   sufficient entropy (minimum 100 bits), or a randomly generated public\n  \
    \ cryptographic key.  The Context ID makes sure that input bitstrings\n   from\
    \ different contexts never overlap.  These together make sure that\n   the probability\
    \ of collisions is determined only by the probability\n   of natural collisions\
    \ in the hash space and is not increased by a\n   possibility of colliding input\
    \ bitstrings.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA allocated a temporary non-routable 28-bit prefix\
    \ from the IPv6\n   address space.  By default, the prefix will be returned to\
    \ IANA in\n   2014, continued use requiring IETF consensus.  As per [RFC4773],\
    \ the\n   28-bit prefix was drawn out of the IANA Special Purpose Address\n  \
    \ Block, namely 2001:0000::/23, in support of the experimental usage\n   described\
    \ in this document.  IANA has updated the IPv6 Special\n   Purpose Address Registry.\n\
    \   During the discussions related to this document, it was suggested\n   that\
    \ other identifier spaces may be allocated from this block later.\n   However,\
    \ this document does not define such a policy or allocations.\n   The Context\
    \ Identifier (or Context ID) is a randomly generated value\n   defining the usage\
    \ context of an ORCHID and the hash function to be\n   used for generation of\
    \ ORCHIDs in this context.  This document\n   defines no specific value.\n   We\
    \ propose sharing the name space introduced for CGA Type Tags.\n   Hence, defining\
    \ new values would follow the rules of Section 8 of\n   [RFC3972], i.e., on a\
    \ First Come First Served basis.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   Special thanks to Geoff Huston for his sharp but constructive\n\
    \   critique during the development of this memo.  Tom Henderson helped\n   to\
    \ clarify a number of issues.  This document has also been improved\n   by reviews,\
    \ comments, and discussions originating from the IPv6,\n   Internet Area, and\
    \ IETF communities.\n   Julien Laganier is partly funded by Ambient Networks,\
    \ a research\n   project supported by the European Commission under its Sixth\n\
    \   Framework Program.  The views and conclusions contained herein are\n   those\
    \ of the authors and should not be interpreted as necessarily\n   representing\
    \ the official policies or endorsements, either expressed\n   or implied, of the\
    \ Ambient Networks project or the European\n   Commission.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC3972]      Aura, T., \"Cryptographically Generated Addresses\n\
    \                  (CGA)\", RFC 3972, March 2005.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [HIP-BASE]     Moskowitz, R., \"Host Identity\
    \ Protocol\", Work\n                  in Progress, February 2007.\n   [Hi3]  \
    \        Nikander, P., Arkko, J., and B. Ohlman, \"Host Identity\n           \
    \       Indirection Infrastructure (Hi3)\", November 2004.\n   [NodeID]      \
    \ Ahlgren, B., Arkko, J., Eggert, L., and J. Rajahalme,\n                  \"\
    A Node Identity Internetworking Architecture\n                  (NodeID)\", April\
    \ 2006.\n   [PRIVACYTEXT]  Dupont, F., \"A Simple Privacy Extension for Mobile\n\
    \                  IPv6\", Work in Progress, July 2006.\n   [RFC1918]      Rekhter,\
    \ Y., Moskowitz, R., Karrenberg, D., Groot, G.,\n                  and E. Lear,\
    \ \"Address Allocation for Private\n                  Internets\", BCP 5, RFC\
    \ 1918, February 1996.\n   [RFC3174]      Eastlake, D. and P. Jones, \"US Secure\
    \ Hash Algorithm 1\n                  (SHA1)\", RFC 3174, September 2001.\n  \
    \ [RFC4270]      Hoffman, P. and B. Schneier, \"Attacks on Cryptographic\n   \
    \               Hashes in Internet Protocols\", RFC 4270,\n                  November\
    \ 2005.\n   [RFC4291]      Hinden, R. and S. Deering, \"IP Version 6 Addressing\n\
    \                  Architecture\", RFC 4291, February 2006.\n   [RFC4773]    \
    \  Huston, G., \"Administration of the IANA Special\n                  Purpose\
    \ IPv6 Address Block\", RFC 4773, December 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Pekka Nikander\n   Ericsson Research Nomadic Lab\n   JORVAS\
    \  FI-02420\n   Finland\n   Phone: +358 9 299 1\n   EMail: pekka.nikander@nomadiclab.com\n\
    \   Julien Laganier\n   DoCoMo Communications Laboratories Europe GmbH\n   Landsberger\
    \ Strasse 312\n   Munich  80687\n   Germany\n   Phone: +49 89 56824 231\n   EMail:\
    \ julien.ietf@laposte.net\n   Francis Dupont\n   CELAR\n   EMail: Francis.Dupont@fdupont.fr\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
