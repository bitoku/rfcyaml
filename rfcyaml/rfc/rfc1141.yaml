- title: __initial_text__
  contents:
  - '             Incremental Updating of the Internet Checksum

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo correctly describes the incremental update\
    \ procedure for\n   use with the standard Internet checksum.  It is intended to\
    \ replace\n   the description of Incremental Update in RFC 1071.  This is not\
    \ a\n   standard but rather, an implementation technique.  Distribution of\n \
    \  this memo is unlimited.\n"
- title: Description
  contents:
  - "Description\n   In RFC 1071 on pages 4 and 5, there is a description of a method\
    \ to\n   update the IP checksum in the IP header without having to completely\n\
    \   recompute the checksum.  In particular, the RFC recommends the\n   following\
    \ equation for computing the update checksum C' from the\n   original checksum\
    \ C, and the old and new values of byte m:\n         C' = C + (-m) + m' = C +\
    \ (m' - m)\n   While the equation above is correct, it is not very useful for\n\
    \   incremental updates since the equation above updates the checksum C,\n   rather\
    \ than the 1's complement of the checksum, ~C, which is the\n   value stored in\
    \ the checksum field.  In addition, it suffers because\n   the notation does not\
    \ clearly specify that all arithmetic, including\n   the unary negation, must\
    \ be performed one's complement, and so is\n   difficult to use to build working\
    \ code.  The useful calculation for\n   2's complement machines is:\n        \
    \ ~C' = ~(C + (-m) + m') = ~C + (m - m') = ~C + m + ~m'\n   In the oft-mentioned\
    \ case of updating the IP TTL field, subtracting\n   one from the TTL means ADDING\
    \ 1 or 256 as appropriate to the checksum\n   field in the packet, using one's\
    \ complement addition.  One big-endian\n   non-portable implementation in C looks\
    \ like:\n      unsigned long sum;\n      ipptr->ttl--;                  /* decrement\
    \ ttl */\n      sum = ipptr->Checksum + 0x100;  /* increment checksum high byte*/\n\
    \      ipptr->Checksum = (sum + (sum>>16)) /* add carry */\n   This special case\
    \ can be optimized in many ways: for instance, you\n   can bundle updating and\
    \ checking the ttl.  Compiler mileage may vary.\n   Here is a more general and\
    \ possibly more helpful example which\n   updates the ttl by n seconds:\n    \
    \  UpdateTTL(iph,n)\n      struct ip_hdr *ipptr;\n      unsigned char n;\n   \
    \   {\n          unsigned long sum;\n          unsigned short old;\n         \
    \ old = ntohs(*(unsigned short *)&ipptr->ttl);\n          ipptr->ttl -= n;\n \
    \         sum = old + (~ntohs(*(unsigned short *)&ipptr->ttl) & 0xffff);\n   \
    \       sum += ntohs(ipptr->Checksum);\n          sum = (sum & 0xffff) + (sum>>16);\n\
    \          ipptr->Checksum = htons(sum + (sum>>16));\n      }\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not addressed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tracy Mallory\n   BBN Communications Corporation\n   50\
    \ Moulton Street\n   Cambridge, MA 02238\n   Phone: (617) 873-3193\n   EMail:\
    \ tmallory@CCV.BBN.COM\n   A. Kullberg\n   BBN Communications Corporation\n  \
    \ 50 Moulton Street\n   Cambridge, MA 02238\n   Phone: (617) 873-4000\n   EMail:\
    \  akullberg@BBN.COM\n"
