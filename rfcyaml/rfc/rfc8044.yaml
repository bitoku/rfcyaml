- contents:
  - '                          Data Types in RADIUS

    '
  title: __initial_text__
- contents:
  - "Abstract\n   RADIUS specifications have used data types for two decades without\n
    \  defining them as managed entities.  During this time, RADIUS\n   implementations
    have named the data types and have used them in\n   attribute definitions.  This
    document updates the specifications to\n   better follow established practice.
    \ We do this by naming the data\n   types defined in RFC 6158, which have been
    used since at least the\n   publication of RFC 2865.  We provide an IANA registry
    for the data\n   types and update the \"RADIUS Attribute Types\" registry to include
    a\n   Data Type field for each attribute.  Finally, we recommend that\n   authors
    of RADIUS specifications use these types in preference to\n   existing practice.
    \ This document updates RFCs 2865, 3162, 4072,\n   6158, 6572, and 7268.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8044.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Specification Problems with Data Types .....................4\n      1.2.
    Implementation Problems with Data Types ....................5\n      1.3. No Mandated
    Changes ........................................5\n      1.4. Requirements Language
    ......................................5\n   2. Use of Data Types ...............................................6\n
    \     2.1. Specification Use of Data Types ............................6\n           2.1.1.
    Field Names for Attribute Values ....................6\n           2.1.2. Attribute
    Definitions Using Data Types ..............7\n           2.1.3. Format of Attribute
    Definitions .....................8\n           2.1.4. Defining a New Data Type
    ............................9\n      2.2. Implementation Use of Data Types ...........................9\n
    \  3. Data Type Definitions ..........................................10\n      3.1.
    integer ...................................................12\n      3.2. enum
    ......................................................12\n      3.3. time ......................................................13\n
    \     3.4. text ......................................................14\n      3.5.
    string ....................................................15\n      3.6. concat
    ....................................................16\n      3.7. ifid ......................................................17\n
    \     3.8. ipv4addr ..................................................18\n      3.9.
    ipv6addr ..................................................18\n      3.10. ipv6prefix
    ...............................................19\n      3.11. ipv4prefix ...............................................20\n
    \     3.12. integer64 ................................................22\n      3.13.
    tlv ......................................................23\n      3.14. vsa
    ......................................................24\n      3.15. extended
    .................................................26\n      3.16. long-extended
    ............................................27\n      3.17. evs ......................................................30\n
    \  4. Updated Registries .............................................31\n      4.1.
    New \"Data Type\" Registry ..................................31\n      4.2. Updates
    to the \"RADIUS Attribute Types\" Registry ..........32\n   5. Security Considerations
    ........................................32\n   6. IANA Considerations ............................................33\n
    \  7. References .....................................................33\n      7.1.
    Normative References ......................................33\n      7.2. Informative
    References ....................................34\n   Acknowledgments ...................................................35\n
    \  Author's Address ..................................................35\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   RADIUS specifications have historically defined attributes
    in terms\n   of name, value, and data type.  Of these three pieces of information,\n
    \  the name is recorded by IANA in the \"RADIUS Attribute Types\" registry\n   but
    is not otherwise managed or restricted, as discussed in\n   [RFC6929], Section
    2.7.1.  The value is managed by IANA and recorded\n   in that registry.  The data
    type is not managed or recorded in the\n   \"RADIUS Attribute Types\" registry.
    \ Experience has shown that there\n   is a need to create well-known data types
    and have them managed\n   by IANA.\n   This document defines an IANA RADIUS \"Data
    Type\" registry and updates\n   the \"RADIUS Attribute Types\" registry to use
    those newly defined\n   data types.  It recommends how both specifications and\n
    \  implementations should use the data types.  It extends the \"RADIUS\n   Attribute
    Types\" registry to have a data type for each assigned\n   attribute.\n   In this
    section, we review the use of data types in specifications\n   and implementations.
    \ We highlight ambiguities and inconsistencies.\n   The rest of this document
    is devoted to resolving those problems.\n"
  - contents:
    - "1.1.  Specification Problems with Data Types\n   When attributes are defined
      in the specifications, the terms \"Value\"\n   and \"String\" are used to refer
      to the contents of an attribute.\n   However, these names are used recursively
      and inconsistently.  We\n   suggest that defining a field to recursively contain
      itself is\n   problematic.\n   A number of data type names and definitions are
      given in\n   [RFC2865], Section 5, at the bottom of page 25.  These data types
      are\n   named and clearly defined.  However, this practice was not continued\n
      \  in later specifications.\n   Specifically, [RFC2865] defines attributes of
      data type \"address\" to\n   carry IPv4 addresses.  Despite this definition,
      [RFC3162] defines\n   attributes of data type \"Address\" to carry IPv6 addresses.
      \ We\n   suggest that the use of the word \"address\" to refer to disparate\n
      \  data types is problematic.\n   Other failures are that [RFC3162] does not
      give a data type name and\n   definition for the data types IPv6 address, Interface-Id,
      or IPv6\n   prefix.  [RFC2869] defines Event-Timestamp to carry a time but does\n
      \  not reuse the \"time\" data type defined in [RFC2865].  Instead, it\n   just
      repeats the \"time\" definition.  [RFC6572] defines multiple\n   attributes
      that carry IPv4 prefixes.  However, an \"IPv4 prefix\" data\n   type is not
      named, defined as a data type, or called out as an\n   addition to RADIUS.  Further,
      [RFC6572] does not follow the\n   recommendations of [RFC6158] and does not
      explain why it fails to\n   follow those recommendations.\n   These ambiguities
      and inconsistencies need to be resolved.\n"
    title: 1.1.  Specification Problems with Data Types
  - contents:
    - "1.2.  Implementation Problems with Data Types\n   RADIUS implementations often
      use \"dictionaries\" to map attribute\n   names to type values and define data
      types for each attribute.  The\n   data types in the dictionaries are defined
      by each implementation but\n   correspond to the \"ad hoc\" data types used
      in the specifications.\n   In effect, implementations have seen the need for
      well-defined\n   data types and have created them.  It is time for RADIUS\n
      \  specifications to follow this practice.\n"
    title: 1.2.  Implementation Problems with Data Types
  - contents:
    - "1.3.  No Mandated Changes\n   This document mandates no changes to any past,
      present, or future\n   RADIUS implementation.  It instead documents existing
      practice in\n   order to simplify the process of writing RADIUS specifications,\n
      \  clarify the interpretation of RADIUS standards, and improve the\n   communication
      between specification authors and IANA.\n   This document suggests that implementations
      SHOULD use the data types\n   defined here, in preference to any ad hoc data
      types currently in\n   use.  This suggestion should have a minimal effect on\n
      \  implementations, as most ad hoc data types are compatible with the\n   ones
      defined here.  Any difference will typically be limited to the\n   name of the
      data type.\n   This document updates [RFC6158] to permit the data types defined
      in\n   the \"Data Type\" registry as \"basic data types\", as per Section 2.1
      of\n   [RFC6158].  The recommendations of [RFC6158] are otherwise unchanged.\n"
    title: 1.3.  No Mandated Changes
  - contents:
    - "1.4.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 1.4.  Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  Use of Data Types\n   The data types can be used in two places: specifications
    and\n   implementations.  This section discusses both uses and gives guidance\n
    \  on using the data types.\n"
  - contents:
    - "2.1.  Specification Use of Data Types\n   In this section, we give recommendations
      for how specifications\n   should be written using data types.  We first describe
      how attribute\n   field names can be consistently named.  We then describe how\n
      \  attribute definitions should use the data types and deprecate the use\n   of
      \"ASCII art\" for attribute definitions.  We suggest a format for\n   new attribute
      definitions.  This format includes recommended fields\n   and suggestions for
      how those fields should be described.\n   Finally, we make recommendations for
      how new data types should be\n   defined.\n"
    - contents:
      - "2.1.1.  Field Names for Attribute Values\n   Previous specifications used
        inconsistent and conflicting names for\n   the contents of RADIUS attributes.
        \ For example, the term \"Value\" is\n   used in [RFC2865], Section 5 to define
        a field that carries the\n   contents of an attribute.  It is then used in
        later sections as the\n   subfield of attribute contents.  The result is that
        the field is\n   defined as recursively containing itself.  Similarly, \"String\"
        is\n   used both as a data type and as a subfield of other data types.\n   We
        correct this ambiguity by using context-specific names for various\n   fields
        of attributes and data types.  It then becomes clear that, for\n   example,
        a field called \"VSA-Data\" must contain different data than a\n   field called
        \"EVS-Data\".  Each new name is defined where it is used.\n   We also define
        the following term:\n      Attr-Data\n         The Value field of an Attribute
        as defined in\n         [RFC2865], Section 5.  The contents of this field
        MUST be of a\n         valid data type as defined in the RADIUS \"Data Type\"
        registry.\n   We consistently use \"Attr-Data\" to refer to the contents of
        an\n   attribute, instead of the more ambiguous name \"Value\".  It is\n   RECOMMENDED
        that new specifications follow this practice.\n   We consistently use \"Value\"
        to refer to the contents of a data type,\n   where that data type is simple.
        \ For example, an \"integer\" can have a\n   \"Value\".  In contrast, a Vendor-Specific
        Attribute carries complex\n   information and thus cannot have a \"Value\".\n
        \  For data types that carry complex information, we name the fields\n   based
        on the data type.  For example, a Vendor-Specific Attribute is\n   defined
        to carry a \"vsa\" data type, and the contents of that\n   data type are described
        herein as \"VSA-Data\".\n   These terms are used in preference to the term
        \"String\", which was\n   previously used in ambiguous ways.  It is RECOMMENDED
        that future\n   specifications use type-specific names and the same naming
        scheme for\n   new types.  This use will maintain consistent definitions and
        help to\n   avoid ambiguities.\n"
      title: 2.1.1.  Field Names for Attribute Values
    - contents:
      - "2.1.2.  Attribute Definitions Using Data Types\n   New RADIUS specifications
        MUST define attributes using data types\n   from the RADIUS \"Data Type\"
        registry.  The specification may, of\n   course, define a new data type, update
        the \"Data Type\" registry, and\n   use the new data type, all in the same
        document.  The guidelines\n   given in [RFC6929] MUST be followed when defining
        a new data type.\n   Attributes can usually be completely described via the
        Attribute Type\n   value, name, and data type.  The use of ASCII art is then
        limited\n   only to the definition of new data types and for complex data
        types.\n   Use of the new extended attributes [RFC6929] makes ASCII art even\n
        \  more problematic.  An attribute can be allocated from any of the\n   extended
        spaces, with more than one option for the attribute header\n   format.  This
        allocation decision is made after the specification has\n   been accepted
        for publication.  As the allocation affects the format\n   of the attribute
        header, it is essentially impossible to create the\n   correct ASCII art prior
        to final publication.  Allocation from the\n   different spaces also changes
        the value of the Length field, making\n   it difficult to define it correctly
        prior to final publication of the\n   document.\n   It is therefore RECOMMENDED
        that ASCII art diagrams not be used for\n   new RADIUS attribute specifications.\n"
      title: 2.1.2.  Attribute Definitions Using Data Types
    - contents:
      - "2.1.3.  Format of Attribute Definitions\n   When defining a new attribute,
        the following fields SHOULD be given:\n      Description\n         A description
        of the meaning and interpretation of the\n         attribute.\n      Type\n
        \        The Attribute Type value, given in the \"dotted number\" notation\n
        \        from [RFC6929].  Specifications can often leave this as \"TBD\"\n
        \        (to be determined) and request that IANA fill in the allocated\n
        \        values.\n      Length\n         A description of the length of the
        attribute.  For attributes\n         of variable length, a maximum length
        SHOULD be given.  Since\n         the Length value may depend on the Type
        value, the definition\n         of Length may be affected by IANA allocations.\n
        \     Data Type\n         One of the named data types from the RADIUS \"Data
        Type\"\n         registry.\n      Value\n         A description of any attribute-specific
        limitations on the\n         values carried by the specified data type.  If
        there are no\n         attribute-specific limitations, then the description
        of this\n         field can be omitted, so long as the Description field is\n
        \        sufficiently explanatory.\n         Where the values are limited
        to a subset of the possible range,\n         valid range(s) MUST be defined.\n
        \        For attributes of data type \"enum\", a list of enumerated values\n
        \        and names MUST be given, as shown in [RFC2865], Section 5.6.\n   Using
        a consistent format for attribute definitions helps to make the\n   definitions
        clearer.\n"
      title: 2.1.3.  Format of Attribute Definitions
    - contents:
      - "2.1.4.  Defining a New Data Type\n   When a specification needs to define
        a new data type, it SHOULD\n   follow the format used by the definitions in
        Section 3 of this\n   document.  The text at the start of the data type definition
        MUST\n   describe the data type, including the expected use, and why a new\n
        \  data type is required.  That text SHOULD include limits on expected\n   values
        and why those limits exist.  The fields \"Name\", \"Value\",\n   \"Length\",
        and \"Format\" MUST be given, along with values.\n   The Name field SHOULD
        be a single name, all lowercase.\n   Contractions such as \"ipv4addr\" are
        RECOMMENDED where they add\n   clarity.\n   We note that the use of \"Value\"
        in the RADIUS \"Data Type\" registry\n   can be confusing.  That name is also
        used in attribute definitions,\n   but with a different meaning.  We trust
        that the meaning here is\n   clear from the context.\n   The Value field SHOULD
        be given as \"TBD\" in specifications.  That\n   number is assigned by IANA.\n
        \  The Format field SHOULD be defined with ASCII art in order to have a\n
        \  precise definition.  Machine-readable formats are also RECOMMENDED.\n   The
        definition of a new data type should be done only when absolutely\n   necessary.
        \ We do not expect a need for a large number of new\n   data types.  When
        defining a new data type, the guidelines of\n   [RFC6929] with respect to
        data types MUST be followed.\n   It is RECOMMENDED that vendors not define
        \"vendor-specific\"\n   data types.  As discussed in [RFC6929], those data
        types are rarely\n   necessary and can cause interoperability problems.\n
        \  Any new data type MUST have a unique name in the RADIUS \"Data Type\"\n
        \  registry.  The number of the data type will be assigned by IANA.\n"
      title: 2.1.4.  Defining a New Data Type
    title: 2.1.  Specification Use of Data Types
  - contents:
    - "2.2.  Implementation Use of Data Types\n   Implementations not supporting a
      particular data type MUST treat\n   attributes of that data type as being of
      data type \"string\", as\n   defined in Section 3.5.  It is RECOMMENDED that
      such attributes\n   be treated as \"invalid attributes\", as defined in\n   [RFC6929],
      Section 2.8.\n   Where the contents of a data type do not match the definition,\n
      \  implementations MUST treat the enclosing attribute as being an\n   invalid
      attribute.  This requirement includes, but is not limited to,\n   the following
      situations:\n   *  Attributes with values outside of the allowed range(s) for
      the\n      data type, e.g., as given in the data types \"integer\", \"ipv4addr\",\n
      \     \"ipv6addr\", \"ipv4prefix\", \"ipv6prefix\", or \"enum\".\n   *  \"text\"
      attributes where the contents do not match the required\n      format.\n   *
      \ Attributes where the length is shorter or longer than the allowed\n      length(s)
      for the given data type.\n   The requirements for Reserved fields are more difficult
      to quantify.\n   Implementations SHOULD be able to receive and process attributes\n
      \  where Reserved fields are non-zero.  We do not, however, define any\n   \"correct\"
      processing of such attributes.  Instead, specifications\n   that define one
      or more new meanings for Reserved fields SHOULD\n   describe how each new meaning
      is compatible with older\n   implementations.  We expect that such descriptions
      are derived from\n   practical experience with implementations.  Implementations
      MUST set\n   Reserved fields to zero when creating attributes.\n"
    title: 2.2.  Implementation Use of Data Types
  title: 2.  Use of Data Types
- contents:
  - "3.  Data Type Definitions\n   This section defines the new data types.  For each
    data type, it\n   gives a definition, a name, a number, a length, and an encoding\n
    \  format.  Where relevant, it describes subfields contained within the\n   data
    type.  These definitions have no impact on existing RADIUS\n   implementations.
    \ There is no requirement that implementations use\n   these names.\n   Where
    possible, the name of each data type has been taken from\n   previous specifications.
    \ In some cases, a different name has been\n   chosen.  The change of name is
    sometimes required to avoid ambiguity\n   (i.e., \"address\" versus \"Address\").
    \ Otherwise, the new name has been\n   chosen to be compatible with [RFC2865]
    or with usage in common\n   implementations.  In some cases, new names are chosen
    to clarify the\n   interpretation of the data type.\n   The numbers assigned herein
    for the data types have no meaning other\n   than to permit them to be tracked
    by IANA.  As RADIUS does not encode\n   information about data types in a packet,
    the numbers assigned to a\n   data type will never occur in a packet.  It is RECOMMENDED
    that new\n   implementations use the names defined in this document in order to\n
    \  avoid confusion.  Existing implementations may choose to use the\n   names
    defined here, but that is not required.\n   The encoding of each data type is
    taken from previous specifications.\n   The fields are transmitted from left to
    right.\n   Where the data types have interdependencies, the simplest data type\n
    \  is given first, and dependent ones are given later.\n   We do not create specific
    data types for the \"tagged\" attributes\n   (i.e., attributes containing a Tag
    field) defined in [RFC2868].  That\n   specification defines the tagged attributes
    as being backwards\n   compatible with pre-existing data types.  In addition,\n
    \  [RFC6158], Section 2.1 says that tagged attributes should not be\n   used.
    \ There is therefore no benefit to defining additional\n   data types for these
    attributes.  We trust that implementors will be\n   aware that tagged attributes
    must be treated differently from\n   non-tagged attributes of the same data type.\n
    \  Similarly, we do not create data types for some attributes having a\n   complex
    structure, such as CHAP-Password, ARAP-Features, or\n   Location-Information.
    \ (\"CHAP\" refers to the Challenge Handshake\n   Authentication Protocol, and
    \"ARAP\" refers to the Apple Remote Access\n   Protocol.)  We need to strike a
    balance between correcting earlier\n   mistakes and making this document more
    complex.  In some cases, it is\n   better to treat complex attributes as being
    of type \"string\", even\n   though they need to be interpreted by RADIUS implementations.
    \ The\n   guidelines given in Section 6.3 of [RFC6929] were used to make this\n
    \  determination.\n"
  - contents:
    - "3.1.  integer\n   The \"integer\" data type encodes a 32-bit unsigned integer
      in network\n   byte order.  Where the range of values for a particular attribute
      is\n   limited to a subset of the values, specifications MUST define the\n   valid
      range.  Attributes with Values outside of the allowed ranges\n   SHOULD be treated
      as invalid attributes.\n   Name\n      integer\n   Value\n      1\n   Length\n
      \     Four octets\n   Format\n       0                   1                   2
      \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Value                                                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: 3.1.  integer
  - contents:
    - "3.2.  enum\n   The \"enum\" data type encodes a 32-bit unsigned integer in
      network\n   byte order.  It differs from the \"integer\" data type only in that
      it\n   is used to define enumerated types, such as Service-Type (Section 5.6\n
      \  of [RFC2865]).  Specifications MUST define a valid set of enumerated\n   values,
      along with a unique name for each value.  Attributes with\n   Values outside
      of the allowed enumerations SHOULD be treated as\n   invalid attributes.\n   Name\n
      \     enum\n   Value\n      2\n   Length\n      Four octets\n   Format\n       0
      \                  1                   2                   3\n       0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Value                                                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: 3.2.  enum
  - contents:
    - "3.3.  time\n   The \"time\" data type encodes time as a 32-bit unsigned value
      in\n   network byte order and in seconds since 00:00:00 UTC, January 1,\n   1970.
      \ We note that dates before the year 2017 are likely to indicate\n   configuration
      errors or lack of access to the correct time.\n   Note that the \"time\" attribute
      is defined to be unsigned, which means\n   that it is not subject to a signed
      integer overflow in the year 2038.\n   Name\n      time\n   Value\n      3\n
      \  Length\n      Four octets\n   Format\n       0                   1                   2
      \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Time                                                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: 3.3.  time
  - contents:
    - "3.4.  text\n   The \"text\" data type encodes UTF-8 text [RFC3629].  The maximum\n
      \  length of the text is given by the encapsulating attribute.  Where\n   the
      range of lengths for a particular attribute is limited to a\n   subset of possible
      lengths, specifications MUST define the valid\n   range(s).  Attributes with
      lengths outside of the allowed values\n   SHOULD be treated as invalid attributes.\n
      \  Attributes of type \"text\" that are allocated in the standard space\n   (Section
      1.2 of [RFC6929]) are limited to no more than 253 octets of\n   data.  Attributes
      of type \"text\" that are allocated in the extended\n   space can be longer.
      \ In both cases, these limits are reduced when\n   the data is encapsulated
      inside of another attribute.\n   Where the text is intended to carry data in
      a particular format\n   (e.g., Framed-Route), the format MUST be given.  The
      specification\n   SHOULD describe the format in a machine-readable way, such
      as via the\n   Augmented Backus-Naur Form (ABNF) [RFC5234].  Attributes with\n
      \  Values not matching the defined format SHOULD be treated as\n   invalid attributes.\n
      \  Note that the \"text\" data type does not terminate with a NUL octet\n   (hex
      00).  The Attribute has a Length field and does not use a\n   terminator.  Texts
      of length zero (0) MUST NOT be sent; omit the\n   entire attribute instead.\n
      \  Name\n      text\n   Value\n      4\n   Length\n      One or more octets\n
      \  Format\n       0\n       0 1 2 3 4 5 6 7\n      +-+-+-+-+-+-+-+-\n      |
      \ Value    ...\n      +-+-+-+-+-+-+-+-\n"
    title: 3.4.  text
  - contents:
    - "3.5.  string\n   The \"string\" data type encodes binary data as a sequence
      of\n   undistinguished octets.  Where the range of lengths for a particular\n
      \  attribute is limited to a subset of possible lengths, specifications\n   MUST
      define the valid range(s).  Attributes with lengths outside of\n   the allowed
      values SHOULD be treated as invalid attributes.\n   Attributes of type \"string\"
      that are allocated in the standard space\n   (Section 1.2 of [RFC6929]) are
      limited to no more than 253 octets of\n   data.  Attributes of type \"string\"
      that are allocated in the extended\n   space can be longer.  In both cases,
      these limits are reduced when\n   the data is encapsulated inside of another
      attribute.\n   Note that the \"string\" data type does not terminate with a
      NUL octet\n   (hex 00).  The Attribute has a Length field and does not use a\n
      \  terminator.  Strings of length zero (0) MUST NOT be sent; omit the\n   entire
      attribute instead.  Where there is a need to encapsulate\n   complex data structures
      and TLVs cannot be used, the \"string\"\n   data type MUST be used.  This requirement
      includes encapsulation of\n   data structures defined outside of RADIUS that
      are opaque to the\n   RADIUS infrastructure.  It also includes encapsulation
      of some data\n   structures that are not opaque to RADIUS, such as the contents
      of\n   CHAP-Password.\n   There is little reason to define a new RADIUS data
      type for only one\n   attribute.  However, where the complex data type cannot
      be\n   represented as TLVs and is expected to be used in many attributes, a\n
      \  new data type SHOULD be defined.\n   These requirements are stronger than
      [RFC6158], which makes the above\n   encapsulation a \"SHOULD\".  This document
      defines data types for use\n   in RADIUS, so there are few reasons to avoid
      using them.\n   Name\n      string\n   Value\n      5\n   Length\n      One
      or more octets\n   Format\n       0\n       0 1 2 3 4 5 6 7\n      +-+-+-+-+-+-+-+-\n
      \     |  Octets    ...\n      +-+-+-+-+-+-+-+-\n"
    title: 3.5.  string
  - contents:
    - "3.6.  concat\n   The \"concat\" data type permits the transport of more than
      253 octets\n   of data in a \"standard space\" [RFC6929] attribute.  It is otherwise\n
      \  identical to the \"string\" data type.\n   If multiple attributes of this
      data type are contained in a packet,\n   all attributes of the same type code
      MUST be in order, and they MUST\n   be consecutive attributes in the packet.\n
      \  The amount of data transported in a \"concat\" data type can be no more\n
      \  than the RADIUS packet size.  In practice, the requirement to\n   transport
      multiple attributes means that the limit may be\n   substantially smaller than
      one RADIUS packet.  As a rough guide, it\n   is RECOMMENDED that this data type
      transport no more than 2048 octets\n   of data.\n   The \"concat\" data type
      MAY be used for \"standard space\" attributes.\n   It MUST NOT be used for attributes
      in the \"short extended space\" or\n   the \"long extended space\".  It MUST
      NOT be used in any field or\n   subfields of the following data types: \"tlv\",
      \"vsa\", \"extended\",\n   \"long-extended\", or \"evs\".\n   Name\n      concat\n
      \  Value\n      6\n   Length\n      One or more octets\n   Format\n       0\n
      \      0 1 2 3 4 5 6 7\n      +-+-+-+-+-+-+-+-\n      |  Octets    ...\n      +-+-+-+-+-+-+-+-\n"
    title: 3.6.  concat
  - contents:
    - "3.7.  ifid\n   The \"ifid\" data type encodes an Interface-Id as an 8-octet
      IPv6\n   Interface Identifier in network byte order.\n   Name\n      ifid\n
      \  Value\n      7\n   Length\n      Eight octets\n   Format\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Interface-Id ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \          ... Interface-Id                                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: 3.7.  ifid
  - contents:
    - "3.8.  ipv4addr\n   The \"ipv4addr\" data type encodes an IPv4 address in network
      byte\n   order.  Where the range of addresses for a particular attribute is\n
      \  limited to a subset of possible addresses, specifications MUST define\n   the
      valid range(s).  Attributes with Address values outside of the\n   allowed range(s)
      SHOULD be treated as invalid attributes.\n   Name\n      ipv4addr\n   Value\n
      \     8\n   Length\n      Four octets\n   Format\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Address                                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: 3.8.  ipv4addr
  - contents:
    - "3.9.  ipv6addr\n   The \"ipv6addr\" data type encodes an IPv6 address in network
      byte\n   order.  Where the range of addresses for a particular attribute is\n
      \  limited to a subset of possible addresses, specifications MUST define\n   the
      valid range(s).  Attributes with Address values outside of the\n   allowed range(s)
      SHOULD be treated as invalid attributes.\n   Name\n      ipv6addr\n   Value\n
      \     9\n   Length\n      Sixteen octets\n   Format\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Address ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \          ... Address ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \          ... Address ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \          ... Address                                                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: 3.9.  ipv6addr
  - contents:
    - "3.10.  ipv6prefix\n   The \"ipv6prefix\" data type encodes an IPv6 prefix,
      using both a\n   prefix length and an IPv6 address in network byte order.  Where
      the\n   range of prefixes for a particular attribute is limited to a subset\n
      \  of possible prefixes, specifications MUST define the valid range(s).\n   Attributes
      with Address values outside of the allowed range(s) SHOULD\n   be treated as
      invalid attributes.\n   Attributes with a Prefix-Length field having a value
      greater than 128\n   MUST be treated as invalid attributes.\n   Name\n      ipv6prefix\n
      \  Value\n      10\n   Length\n      At least two, and no more than eighteen,
      octets\n   Format\n       0                   1                   2                   3\n
      \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    Reserved   | Prefix-Length |  Prefix ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \          ... Prefix ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \          ... Prefix ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \          ... Prefix                                                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Subfields\n      Reserved\n         This field, which is reserved and MUST
      be present, is always\n         set to zero.  This field is one octet in length.\n
      \     Prefix-Length\n         The length of the prefix, in bits.  At least 0
      and no larger\n         than 128.  This field is one octet in length.\n      Prefix\n
      \        The Prefix field is up to 16 octets in length.  Bits outside of\n         the
      Prefix-Length, if included, MUST be zero.\n         The Prefix field SHOULD
      NOT contain more octets than necessary\n         to encode the Prefix field.\n"
    title: 3.10.  ipv6prefix
  - contents:
    - "3.11.  ipv4prefix\n   The \"ipv4prefix\" data type encodes an IPv4 prefix,
      using both a\n   prefix length and an IPv4 address in network byte order.  Where
      the\n   range of prefixes for a particular attribute is limited to a subset\n
      \  of possible prefixes, specifications MUST define the valid range(s).\n   Attributes
      with Address values outside of the allowed range(s) SHOULD\n   be treated as
      invalid attributes.\n   Attributes with a Prefix-Length field having a value
      greater than 32\n   MUST be treated as invalid attributes.\n   Name\n      ipv4prefix\n
      \  Value\n      11\n   Length\n      Six octets\n   Format\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    Reserved   | Prefix-Length |  Prefix ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \          ... Prefix                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Subfields\n      Reserved\n         This field, which is reserved and MUST
      be present, is always\n         set to zero.  This field is one octet in length.\n
      \        Note that this definition differs from that given in [RFC6572].\n         See
      \"Prefix-Length\", below, for an explanation.\n      Prefix-Length\n         The
      length of the prefix, in bits.  The values MUST be no\n         larger than
      32.  This field is one octet in length.  Note that\n         this definition
      differs from that given in [RFC6572].\n         As compared to [RFC6572], the
      Prefix-Length field has increased\n         in size by two bits, both of which
      must be zero.  The\n         Reserved field has decreased in size by two bits.
      \ The result\n         is that both fields are aligned on octet boundaries,
      which\n         removes the need for bit masking of the fields.\n         Since
      [RFC6572] required the Reserved field to be zero, the\n         definition here
      is compatible with the definition in the\n         original specification.\n
      \     Prefix\n         The Prefix field is 4 octets in length.  Bits outside
      of the\n         Prefix-Length MUST be zero.  Unlike the \"ipv6prefix\" data
      type,\n         this field is fixed length.  If the address is all zeros (i.e.,\n
      \        \"0.0.0.0\"), then the Prefix-Length MUST be set to 32.\n"
    title: 3.11.  ipv4prefix
  - contents:
    - "3.12.  integer64\n   The \"integer64\" data type encodes a 64-bit unsigned
      integer in\n   network byte order.  Where the range of values for a particular\n
      \  attribute is limited to a subset of the values, specifications MUST\n   define
      the valid range(s).  Attributes with Values outside of the\n   allowed range(s)
      SHOULD be treated as invalid attributes.\n   Name\n      integer64\n   Value\n
      \     12\n   Length\n      Eight octets\n   Format\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Value ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           ... Value                                                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: 3.12.  integer64
  - contents:
    - "3.13.  tlv\n   The \"tlv\" data type encodes a Type-Length-Value, as defined
      in\n   [RFC6929], Section 2.3.\n   Name\n      tlv\n   Value\n      13\n   Length\n
      \     Three or more octets\n   Format\n       0                   1                   2
      \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |   TLV-Type    |  TLV-Length   |     TLV-Data ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Subfields\n      TLV-Type\n         This field is one octet.  Up-to-date
      values of this field are\n         specified according to the policies and rules
      described in\n         [RFC6929], Section 10.  Values of 254-255 are reserved
      for use\n         by future extensions to RADIUS.  The value 26 has no special\n
      \        meaning and MUST NOT be treated as a Vendor-Specific Attribute.\n         The
      TLV-Type is meaningful only within the context defined by\n         Type fields
      of the encapsulating Attributes, using the\n         dotted-number notation
      introduced in [RFC6929].\n         A RADIUS server MAY ignore Attributes with
      an unknown\n         \"TLV-Type\".\n         A RADIUS client MAY ignore Attributes
      with an unknown\n         \"TLV-Type\".\n         A RADIUS proxy SHOULD forward
      Attributes with an unknown\n         \"TLV-Type\" verbatim.\n      TLV-Length\n
      \        The TLV-Length field is one octet and indicates the length of\n         this
      TLV, including the TLV-Type, TLV-Length, and TLV-Value\n         fields.  It
      MUST have a value between 3 and 255.  If a client\n         or server receives
      a TLV with an invalid TLV-Length, then the\n         attribute that encapsulates
      that TLV MUST be considered to be\n         an invalid attribute and is handled
      as per\n         [RFC6929], Section 2.8.\n         TLVs having a TLV-Length
      of two (2) MUST NOT be sent; omit the\n         entire TLV instead.\n      TLV-Data\n
      \        The TLV-Data field is one or more octets and contains\n         information
      specific to the attribute.  The format and length\n         of the TLV-Data
      field are determined by the TLV-Type and\n         TLV-Length fields.\n         The
      TLV-Data field MUST contain only known RADIUS data types.\n         The TLV-Data
      field MUST NOT contain any of the following\n         data types: \"concat\",
      \"vsa\", \"extended\", \"long-extended\",\n         or \"evs\".\n"
    title: 3.13.  tlv
  - contents:
    - "3.14.  vsa\n   The \"vsa\" data type encodes vendor-specific data, as given
      in\n   [RFC2865], Section 5.26.  It is used only in the Attr-Data field of a\n
      \  Vendor-Specific Attribute.  It MUST NOT appear in the contents of any\n   other
      data type.\n   Where an implementation determines that an attribute of data
      type\n   \"vsa\" contains data that does not match the expected format, it\n
      \  SHOULD treat that attribute as being an invalid attribute.\n   Name\n      vsa\n
      \  Value\n      14\n   Length\n      Five or more octets\n   Format\n       0
      \                  1                   2                   3\n       0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                            Vendor-Id                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |  VSA-Data ....\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Subfields\n      Vendor-Id\n         The 4 octets are the Network Management
      Private Enterprise Code\n         [PEN] of the vendor in network byte order.\n
      \     VSA-Data\n         The VSA-Data field is one or more octets.  The actual
      format of\n         the information is site specific or application specific,
      and a\n         robust implementation SHOULD support the field as\n         undistinguished
      octets.\n         The codification of the range of allowed usage of this field
      is\n         outside the scope of this specification.\n         The \"vsa\"
      data type SHOULD contain a sequence of \"tlv\"\n         data types.  The interpretation
      of the TLV-Type and TLV-Data\n         fields is dependent on the vendor's definition
      of that\n         attribute.\n         The \"vsa\" data type MUST be used as
      the contents of the\n         Attr-Data field of the Vendor-Specific Attribute.
      \ The \"vsa\"\n         data type MUST NOT appear in the contents of any other\n
      \        data type.\n"
    title: 3.14.  vsa
  - contents:
    - "3.15.  extended\n   The \"extended\" data type encodes the \"Extended Type\"
      format, as given\n   in [RFC6929], Section 2.1.  It is used only in the Attr-Data
      field of\n   an attribute allocated from the standard space.  It MUST NOT appear\n
      \  in the contents of any other data type.\n   Name\n      extended\n   Value\n
      \     15\n   Length\n      Two or more octets\n   Format\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Extended-Type | Ext-Data ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Subfields\n      Extended-Type\n         The Extended-Type field is one octet.
      \ Up-to-date values of\n         this field are specified according to the policies
      and rules\n         described in [RFC6929], Section 10.  Unlike the Type field\n
      \        defined in [RFC2865], Section 5, no values are allocated for\n         experimental
      or implementation-specific use.  Values 241-255\n         are reserved and MUST
      NOT be used.\n         The Extended-Type is meaningful only within a context
      defined\n         by the Type field.  That is, this field may be thought of
      as\n         defining a new type space of the form \"Type.Extended-Type\".\n
      \        See [RFC6929], Section 2.1 for additional discussion.\n         A RADIUS
      server MAY ignore Attributes with an unknown\n         \"Type.Extended-Type\".\n
      \        A RADIUS client MAY ignore Attributes with an unknown\n         \"Type.Extended-Type\".\n
      \     Ext-Data\n         The Ext-Data field is one or more octets.\n         The
      contents of this field MUST be a valid data type as defined\n         in the
      RADIUS \"Data Type\" registry.  The Ext-Data field\n         MUST NOT contain
      any of the following data types: \"concat\",\n         \"vsa\", \"extended\",
      \"long-extended\", or \"evs\".\n         Implementations supporting this specification
      MUST use the\n         Identifier of \"Type.Extended-Type\" to determine the\n
      \        interpretation of the Ext-Data field.\n"
    title: 3.15.  extended
  - contents:
    - "3.16.  long-extended\n   The \"long-extended\" data type encodes the \"Long
      Extended Type\"\n   format, as given in [RFC6929], Section 2.2.  It is used
      only in the\n   Attr-Data field of an attribute.  It MUST NOT appear in the
      contents\n   of any other data type.\n   Name\n      long-extended\n   Value\n
      \     16\n   Length\n      Three or more octets\n   Format\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Extended-Type |M|T| Reserved  | Ext-Data ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Subfields\n      Extended-Type\n         This field is identical to the Extended-Type
      field defined\n         above in Section 3.15.\n      M (More)\n         The
      More field (M flag) is one (1) bit in length and indicates\n         whether
      or not the current attribute contains \"more\" than\n         251 octets of
      data.  The More field MUST be clear (0) if the\n         Length field has a
      value less than 255.  The More field MAY be\n         set (1) if the Length
      field has a value of 255.\n         If the More field is set (1), it indicates
      that the Ext-Data\n         field has been fragmented across multiple RADIUS
      attributes.\n         When the More field is set (1), the Attribute MUST have
      a\n         Length field value of 255; there MUST be an attribute following\n
      \        this one; and the next attribute MUST have both the same Type\n         and
      Extended-Type.  That is, multiple fragments of the same\n         value MUST
      be in order and MUST be consecutive attributes in\n         the packet, and
      the last attribute in a packet MUST NOT have\n         the More field set (1).\n
      \        That is, a packet containing a fragmented attribute needs to\n         contain
      all fragments of the attribute, and those fragments\n         need to be contiguous
      in the packet.  RADIUS does not support\n         inter-packet fragmentation,
      which means that fragmenting an\n         attribute across multiple packets
      is impossible.\n         If a client or server receives an attribute fragment
      with the\n         More field set (1), but for which no subsequent fragment
      can be\n         found, then the fragmented attribute is considered to be an\n
      \        invalid attribute and is handled as per [RFC6929], Section 2.8.\n      T
      (Truncation)\n         This field is one bit in size and is called \"T\" for
      Truncation.\n         It indicates that the attribute is intentionally truncated
      in\n         this chunk and is to be continued in the next chunk of the\n         sequence.
      \ The combination of the M flag and the T flag\n         indicates that the
      attribute is fragmented (M flag) but that\n         all of the fragments are
      not available in this chunk (T flag).\n         Proxies implementing [RFC6929]
      will see these attributes as\n         invalid (they will not be able to reconstruct
      them), but they\n         will still forward them, as Section 5.2 of [RFC6929]
      indicates\n         that they SHOULD forward unknown attributes anyway.\n         Please
      see [RFC7499] for further discussion of the uses of\n         this flag.\n      Reserved\n
      \        This field is six bits long and is reserved for future use.\n         Implementations
      MUST set it to zero (0) when encoding an\n         attribute for sending in
      a packet.  The contents SHOULD be\n         ignored on reception.\n         Future
      specifications may define one or more additional\n         meanings for this
      field.  Implementations therefore MUST NOT\n         treat this field as invalid
      if it is non-zero.\n      Ext-Data\n         The Ext-Data field is one or more
      octets.\n         The contents of this field MUST be a valid data type as defined\n
      \        in the RADIUS \"Data Type\" registry.  The Ext-Data field MUST\n         NOT
      contain any of the following data types: \"concat\", \"vsa\",\n         \"extended\",
      \"long-extended\", or \"evs\".\n         Implementations supporting this specification
      MUST use the\n         Identifier of \"Type.Extended-Type\" to determine the\n
      \        interpretation of the Ext-Data field.\n         The length of the data
      MUST be taken as the sum of the lengths\n         of the fragments (i.e., Ext-Data
      fields) from which it is\n         constructed.  Any interpretation of the resulting
      data MUST\n         occur after the fragments have been reassembled.  If the\n
      \        reassembled data does not match the expected format, each\n         fragment
      MUST be treated as an invalid attribute, and the\n         reassembled data
      MUST be discarded.\n         We note that the maximum size of a fragmented attribute
      is\n         limited only by the RADIUS packet length limitation.\n         Implementations
      MUST be able to handle the case where one\n         fragmented attribute completely
      fills the packet.\n"
    title: 3.16.  long-extended
  - contents:
    - "3.17.  evs\n   The \"evs\" data type encodes an Extended-Vendor-Specific Attribute,
      as\n   given in [RFC6929], Section 2.4.  The \"evs\" data type is used solely\n
      \  to extend the vendor-specific space.  It MAY appear inside of an\n   \"extended\"
      data type or a \"long-extended\" data type.  It MUST NOT\n   appear in the contents
      of any other data type.\n   Where an implementation determines that an attribute
      of data type\n   \"evs\" contains data that does not match the expected format,
      it\n   SHOULD treat that attribute as being an invalid attribute.\n   Name\n
      \     evs\n   Value\n      17\n   Length\n      Six or more octets\n   Format\n
      \      0                   1                   2                   3\n       0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                            Vendor-Id                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |  Vendor-Type   |  EVS-Data ....\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Subfields\n      Vendor-Id\n         The 4 octets are the Network Management
      Private Enterprise Code\n         [PEN] of the vendor in network byte order.\n
      \     Vendor-Type\n         The Vendor-Type field is one octet.  Values are
      assigned at the\n         sole discretion of the vendor.\n      EVS-Data\n         The
      EVS-Data field is one or more octets.  It SHOULD\n         encapsulate a previously
      defined RADIUS data type.\n         Non-standard data types SHOULD NOT be used.
      \ We note that the\n         EVS-Data field may be of data type \"tlv\".\n         The
      actual format of the information is site specific or\n         application specific,
      and a robust implementation SHOULD\n         support the field as undistinguished
      octets.  We recognize that\n         vendors have complete control over the
      contents and format of\n         the Ext-Data field; at the same time, we recommend
      that good\n         practices be followed.\n         Further codification of
      the range of allowed usage of this\n         field is outside the scope of this
      specification.\n"
    title: 3.17.  evs
  title: 3.  Data Type Definitions
- contents:
  - "4.  Updated Registries\n   This section defines a new IANA registry for RADIUS
    data types and\n   then updates the existing \"RADIUS Attribute Types\" registry
    to use\n   the data types from the new registry.\n"
  - contents:
    - "4.1.  New \"Data Type\" Registry\n   This section defines a new registry located
      under \"RADIUS Types\",\n   called \"Data Type\".  The registration procedures
      for the \"Data Type\"\n   registry are \"Standards Action\" [RFC5226].\n   The
      \"Data Type\" registry contains three columns of data, as follows.\n   Value\n
      \     The number of the data type.  The Value field is an artifact of\n      the
      registry and has no on-the-wire meaning.\n   Description\n      The name of
      the data type.  This field is used only for the\n      registry and has no on-the-wire
      meaning.\n   Reference\n      The specification where the data type was defined.\n
      \  The initial contents of the registry are as follows.\n      Value  Description
      \   Reference\n      -----  -----------    -------------------\n          1
      \ integer        [RFC2865], RFC 8044\n          2  enum           [RFC2865],
      RFC 8044\n          3  time           [RFC2865], RFC 8044\n          4  text
      \          [RFC2865], RFC 8044\n          5  string         [RFC2865], RFC 8044\n
      \         6  concat         RFC 8044\n          7  ifid           [RFC3162],
      RFC 8044\n          8  ipv4addr       [RFC2865], RFC 8044\n          9  ipv6addr
      \      [RFC3162], RFC 8044\n         10  ipv6prefix     [RFC3162], RFC 8044\n
      \        11  ipv4prefix     [RFC6572], RFC 8044\n         12  integer64      [RFC6929],
      RFC 8044\n         13  tlv            [RFC6929], RFC 8044\n         14  vsa
      \           [RFC2865], RFC 8044\n         15  extended       [RFC6929], RFC
      8044\n         16  long-extended  [RFC6929], RFC 8044\n         17  evs            [RFC6929],
      RFC 8044\n"
    title: 4.1.  New "Data Type" Registry
  - contents:
    - "4.2.  Updates to the \"RADIUS Attribute Types\" Registry\n   This section updates
      the \"RADIUS Attribute Types\" registry to have a\n   new column, which is inserted
      between the existing \"Description\" and\n   \"Reference\" columns.  The new
      column is named \"Data Type\".  The\n   contents of that column are the name
      of a data type, corresponding to\n   the attribute in that row, or blank if
      the Attribute Type is\n   unassigned.  The name of the data type is taken from
      the RADIUS\n   \"Data Type\" registry, as defined above.\n   The existing registration
      requirements for the \"RADIUS Attribute\n   Types\" registry are otherwise unchanged.\n"
    title: 4.2.  Updates to the "RADIUS Attribute Types" Registry
  title: 4.  Updated Registries
- contents:
  - "5.  Security Considerations\n   This specification is concerned solely with updates
    to IANA\n   registries.  As such, there are no security considerations with the\n
    \  document itself.\n   However, the use of inconsistent names and poorly defined
    entities in\n   a protocol is problematic.  Inconsistencies in specifications
    can\n   lead to security and interoperability problems in implementations.\n   Further,
    having one canonical source for the definition of data types\n   means that an
    implementor has fewer specifications to read.  The\n   implementation work is
    therefore simpler and more likely to be\n   correct.\n   The goal of this specification
    is to reduce ambiguities in the RADIUS\n   protocol, which we believe will lead
    to more robust and more secure\n   implementations.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   IANA has created one new registry, as described in
    Section 4.1.\n   IANA has updated the \"RADIUS Attribute Types\" registry, as
    described\n   in Section 4.2.\n   IANA requires that all allocation requests in
    the \"RADIUS Attribute\n   Types\" registry contain a Data Type field, which is
    required to\n   contain one of the \"Data Type\" names contained in the RADIUS
    \"Data\n   Type\" registry.\n   IANA requires that updates to the RADIUS \"Data
    Type\" registry contain\n   the following fields, with the associated instructions:\n
    \  *  Value.  IANA is instructed to assign the next unused integer in\n      sequence
    to new data type definitions.\n   *  Name.  IANA is instructed to require that
    this name be unique in\n      the registry.\n   *  Reference.  IANA is instructed
    to update this field with a\n      reference to the document that defines the
    data type.\n"
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2865]  Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n              \"Remote
      Authentication Dial In User Service (RADIUS)\",\n              RFC 2865, DOI
      10.17487/RFC2865, June 2000,\n              <http://www.rfc-editor.org/info/rfc2865>.\n
      \  [RFC3162]  Aboba, B., Zorn, G., and D. Mitton, \"RADIUS and IPv6\",\n              RFC
      3162, DOI 10.17487/RFC3162, August 2001,\n              <http://www.rfc-editor.org/info/rfc3162>.\n
      \  [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of\n              ISO
      10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629,\n              November 2003,
      <http://www.rfc-editor.org/info/rfc3629>.\n   [RFC4072]  Eronen, P., Ed., Hiller,
      T., and G. Zorn, \"Diameter\n              Extensible Authentication Protocol
      (EAP) Application\",\n              RFC 4072, DOI 10.17487/RFC4072, August 2005,\n
      \             <http://www.rfc-editor.org/info/rfc4072>.\n   [RFC5234]  Crocker,
      D., Ed., and P. Overell, \"Augmented BNF for\n              Syntax Specifications:
      ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC6158]  DeKok,
      A., Ed., and G. Weber, \"RADIUS Design Guidelines\",\n              BCP 158,
      RFC 6158, DOI 10.17487/RFC6158, March 2011,\n              <http://www.rfc-editor.org/info/rfc6158>.\n
      \  [RFC6572]  Xia, F., Sarikaya, B., Korhonen, J., Ed., Gundavelli, S.,\n              and
      D. Damic, \"RADIUS Support for Proxy Mobile IPv6\",\n              RFC 6572,
      DOI 10.17487/RFC6572, June 2012,\n              <http://www.rfc-editor.org/info/rfc6572>.\n
      \  [RFC7499]  Perez-Mendez, A., Ed., Marin-Lopez, R., Pereniguez-Garcia,\n              F.,
      Lopez-Millan, G., Lopez, D., and A. DeKok, \"Support of\n              Fragmentation
      of RADIUS Packets\", RFC 7499,\n              DOI 10.17487/RFC7499, April 2015,\n
      \             <http://www.rfc-editor.org/info/rfc7499>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [PEN]      IANA, \"PRIVATE ENTERPRISE NUMBERS\",\n
      \             <http://www.iana.org/assignments/enterprise-numbers/>.\n   [RFC2868]
      \ Zorn, G., Leifer, D., Rubens, A., Shriver, J., Holdrege,\n              M.,
      and I. Goyret, \"RADIUS Attributes for Tunnel Protocol\n              Support\",
      RFC 2868, DOI 10.17487/RFC2868, June 2000,\n              <http://www.rfc-editor.org/info/rfc2868>.\n
      \  [RFC2869]  Rigney, C., Willats, W., and P. Calhoun, \"RADIUS\n              Extensions\",
      RFC 2869, DOI 10.17487/RFC2869, June 2000,\n              <http://www.rfc-editor.org/info/rfc2869>.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,
      May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC6929]
      \ DeKok, A. and A. Lior, \"Remote Authentication Dial In User\n              Service
      (RADIUS) Protocol Extensions\", RFC 6929,\n              DOI 10.17487/RFC6929,
      April 2013,\n              <http://www.rfc-editor.org/info/rfc6929>.\n   [RFC7268]
      \ Aboba, B., Malinen, J., Congdon, P., Salowey, J., and M.\n              Jones,
      \"RADIUS Attributes for IEEE 802 Networks\",\n              RFC 7268, DOI 10.17487/RFC7268,
      July 2014,\n              <http://www.rfc-editor.org/info/rfc7268>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgments\n   Thanks to the RADEXT WG participants for their patience and
    reviews\n   of this document.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Alan DeKok\n   The FreeRADIUS Server Project\n   Email:
    aland@freeradius.org\n"
  title: Author's Address
