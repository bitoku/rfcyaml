Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in TCP/IP based internets.
In particular it defines objects for managing a client of the Common Open Policy Service (COPS) protocol.
This memo includes a MIB module in a manner that is compliant to the SMIv2 [V2SMI].
The SNMP Management Framework presently consists of five major components:  An overall architecture, described in an Architecture for Describing SNMP Management Frameworks [ARCH].
Mechanisms for describing and naming objects and events for the purpose of management.
The first version of this Structure of Management Information (SMI) is called SMIv1 and described in STD 16, RFC 1155 [V1SMI], STD 16, RFC 1212 [V1CONCISE] and RFC 1215 [V1TRAPS].
The second version, called SMIv2, is described in STD 58, RFC 2578 [V2SMI], STD 58, RFC 2579 [V2TC] and STD 58, RFC 2580 [V2CONFORM].
Message protocols for transferring management information.
The first version of the SNMP message protocol is called SNMPv1 and described in STD 15, RFC 1157 [V1PROTO].
A second version of the SNMP message protocol, which is not an Internet standards track protocol, is called SNMPv2c and described in RFC 1901 [V2COMMUNITY] and RFC 1906 [V2TRANS].
The third version of the message protocol is called SNMPv3 and described in RFC1906 [V2TRANS], Message Processing and Dispatching [V3MPC] and User based Security Model [V3USM].
Protocol operations for accessing management information.
The first set of protocol operations and associated PDU formats is described in STD 15, RFC 1157 [V1PROTO].
A second set of protocol operations and associated PDU formats is described in RFC 1905 [V2PROTO].
A set of fundamental applications described in SNMPv3 Applications [V3APPS] and the view based access control mechanism described in View based Access Control Model [V3VACM].
A more detailed introduction to the current SNMP Management Framework can be found in RFC 2570 [V3INTRO].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the mechanisms defined in the SMI.
This memo specifies a MIB module that is compliant to the SMIv2.
A MIB conforming to the SMIv1 can be produced through the appropriate translations.
The resulting translated MIB must be semantically equivalent, except where objects or events are omitted because no translation is possible (use of Counter64).
Some machine readable information in SMIv2 will be converted into textual descriptions in SMIv1 during the translation process.
However, this loss of machine readable information is not considered to change the semantics of the MIB.
The COPS protocol [COPS] is a client server protocol intended for the communication of policy requests and decisions between a Policy Enforcement Point (PEP) and a Policy Decision Point (PDP).
The PEP acts as a COPS client in this scenario.
The model for policy out  sourcing, of which the COPS protocol provides one part, is described in [FRAMEWORK].
This MIB is intended to provide management of the important features of a COPS protocol client module.
It does not provide management for a COPS server this is outside the scope of the current memo.
It provides for monitoring of status and protocol statistics, as well as for configuration of the client, in particular for telling it where to locate its servers.
Other mechanisms for achieving this function without SNMP configuration might include use of the Service Location Protocol [SRVLOC] although this is outside the scope of this memo and are not specified by the COPS protocol itself.
This MIB also does not provide management of specific COPS client  types e.g., for use with the RSVP protocol [RSVP][COPSRSVP].
Structure of COPS Client MIB Objects in this MIB are arranged into groups.
Each group is organized as a set of related objects.
The overall structure is described below.
This group contains objects that represent COPS protocol capabilities implemented by this COPS client.
This group contains objects that indicate the current status of connection(s) to COPS servers, including per server protocol statistics.
It maintains last known statistics for all of the servers with which the client has ever been connected since agent restart.
This group contains objects that allow for configuration of COPS server addresses and the order to which connections should be attempted.
It contains a table of per server objects as well as scalars for configuration of the retry algorithm to be used by a client to obtain a connection to an appropriate server.
The datatypes CopsClientState, CopsServerEntryType, CopsErrorCode, CopsTcpPort and CopsAuthType are used as textual conventions in this document.
These textual conventions have NO effect on either the syntax nor the semantics of any managed object.
Objects defined using these conventions are always encoded by means of the rules that define their primitive type.
Hence, no changes to the SMI or the SNMP are necessary to accommodate these textual conventions which are adopted merely for the convenience of readers.
3.5.  Relationship to Other MIBs 3.5.1.
Relationship to the 'system' group
This MIB contains definitions for a single COPS protocol client represented by a single SNMP agent and instance of the MIB 2 system group [MIB2].
It does not address the case of multiple co located COPS protocol clients.
MIB COPS CLIENT MIB DEFINITIONS ::
IMPORTS MODULE IDENTITY, OBJECT TYPE, Counter32,
Integer32, Unsigned32, mib 2 FROM SNMPv2
SMI TimeStamp, TimeInterval, RowStatus, TEXTUAL CONVENTION FROM SNMPv2
TC MODULE COMPLIANCE, OBJECT GROUP FROM SNMPv2 CONF InetAddressType, InetAddress FROM INET ADDRESS MIB;
"The COPS (Common Open Policy Service)
Mark Stevens (WG co chair) Phone:
1 978 287 9102 Email:
408 579 2821 Email: ah
David Partain Phone:  46 13 28
41 44 Email: David.Partain@ericsson.com Editor:
John Seligson Phone:  1 408 495 2992
A value indicating the state of a COPS client."
Keepalive timer has expired,   client is in process of   tearing down connection. }
"A value indicating how a COPS server entry came into existence."
"A value describing a COPS protocol error.
Codes are identical to those used by the COPS protocol itself.
A value indicating a TCP protocol port number."
A value indicating a type of security authentication mechanism."
Capabilities of the COPS client to connect to a COPS server:
A table of information regarding COPS servers as seen from the point of view of a COPS client.
This table contains entries for both statically configured and dynamically learned servers (from a PDP Redirect operation).
One entry exists in this table for each COPS Client Type served by the COPS server.
In addition, an entry will exist with copsClientServerClientType 0
(zero) representing information about the underlying connection itself: this is consistent with the COPS specification which reserves this value for this purpose."
A set of information regarding a single COPS server serving a single COPS Client Type from the point of view of a COPS client.
Counter32 } copsClientServerAddressType OBJECT TYPE SYNTAX
"The type of address in copsClientServerAddress."
current DESCRIPTION "The IPv4, IPv6 or DNS address of a COPS Server.
Note that, since this is an index to the table, the DNS name must be short enough to fit into the maximum length of indices allowed by the management protocol in use."
"The COPS protocol Client Type for which this entry applies.
Multiple Client Types can be served by a single COPS server.
The value 0 (zero) indicates that this entry contains information about the underlying connection itself.
The TCP port number on the COPS server to which the client should connect/is connected."
COPS servers may be configured by network management into copsClientServerConfigTable and appear in this entry with type copsServerStatic(1).
Alternatively, the may be notified from another COPS server by means of the COPS PDP Redirect mechanism and appear as copsServerRedirect(2)."
Timestamp of the last time that this client attempted to connect to this COPS server."
The state of the connection and COPS protocol with respect to this COPS server."
"The value of the COPS protocol Keepalive timeout, in centiseconds, currently in use by this client, as specified by this COPS server in the Client Accept operation.
A value of zero indicates no keepalive activity is expected."
"The value of the COPS protocol Accounting timeout, in centiseconds, currently in use by this client, as specified by the COPS server in the Client Accept operation.
A value of zero indicates no accounting activity is to be performed.
"A count of the total number of COPS messages that this client has received from this COPS server marked for this Client Type.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the total number of COPS messages that this client has sent to this COPS server marked for this Client Type.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the total number of COPS messages that this client has received from this COPS server marked for this Client Type that contained errors in syntax.
This value is cumulative since agent restart and is not zeroed on new connections."
"The code contained in the last COPS protocol Error Object received by this client from this COPS server marked for this Client Type.
This value is not zeroed on COPS Client Open operations."
"A count of the number of times that this COPS client has tried (successfully or otherwise) to open an TCP connection to a COPS server.
This value is cumulative  since agent restart and is not zeroed on new connections.
This value is not incremented for entries representing a non zero Client Type."
"A count of the number of times that this COPS client has failed to open an TCP connection to a COPS server.
This value is cumulative since agent restart and is not zeroed on new connections.
This value is not incremented for entries representing a non zero Client Type."
"A count of the number of times that this COPS client has tried to perform a COPS Client Open to a COPS server for this Client Type.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the number of times that this COPS client has failed to perform a COPS Client Open to a COPS server for this Client Type.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the total number of COPS messages that this client has received from COPS servers that referred to Client Types that are unsupported by this client.
This value is cumulative since agent restart and is not zeroed on new connections.
This value is not incremented for entries representing a non zero Client Type."
"A count of the total number of COPS messages that this client has received from COPS servers marked for this Client Type that had a COPS protocol Version number that is unsupported by this client.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the total number of COPS messages that this client has received from COPS servers marked for this Client Type that had a COPS protocol Message Length that did not match the actual received message.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the total number of COPS messages that this client has received from COPS servers marked for this Client Type that had a COPS protocol
Op Code that was unrecognised by this client.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the total number of COPS messages that this client has received from COPS servers marked for this Client Type that contained a COPS protocol object C Num that was unrecognised by this client.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the total number of COPS messages that this client has received from COPS servers marked for this Client Type that contained a COPS protocol object C Type that was not defined for the C Nums known by this client.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the total number of COPS messages that this client attempted to send to COPS servers marked for this Client Type that resulted in a transmit error.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the total number of COPS messages that this client has received from COPS servers marked for this Client Type that did not contain a permitted set of COPS protocol objects.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the total number of COPS messages that this client has received from COPS servers marked for this Client Type that had a COPS protocol
Op Code that should not have been sent to a COPS client e.g. Open Requests.
This value is cumulative since agent restart and is not zeroed on new connections."
"A count of the total number of times that this client has been shut down for this Client Type by COPS servers that had detected a COPS protocol Keepalive timeout.
This value is cumulative since agent restart and is not zeroed on new connections."
{ copsClientServerCurrentEntry 28 } copsClientErrAuthFailures OBJECT TYPE SYNTAX
current DESCRIPTION "Table of possible COPS servers to try to connect to in order of copsClientServerConfigPriority.
There may be multiple entries in this table for the same server and client type which specify different security mechanisms: these mechanisms will be attempted by the client in the priority order given.
Note that a server learned by means of PDPRedirect always takes priority over any of these configured entries."
A set of configuration information regarding a single COPS server from the point of view of a COPS client.
"The type of address in copsClientServerConfigAddress."
current DESCRIPTION "The IPv4, IPv6 or DNS address of a COPS Server.
Note that, since this is an index to the table, the DNS name must be short enough to fit into the maximum length of indices allowed by the management protocol in use."
"The COPS protocol Client Type for which this entry applies and for which this COPS server is capable of serving.
Multiple Client Types can be served by a single COPS server.
"The type of authentication mechanism for this COPS client to request when negotiating security at the start of a connection to a COPS server.
REFERENCE "RFC 2748 section 4."
"The TCP port number on the COPS server to which the client should connect."
"The priority of this entry relative to other entries.
COPS client will attempt to contact COPS servers for the appropriate Client Type.
Higher numbers are tried first.
The order to be used amongst server entries with the same priority is undefined.
COPS servers that are notified to the client using the COPS protocol PDP Redirect mechanism are always used in preference to any entries in this table."
"The algorithm by which the client should retry when it fails to connect to a COPS server.
current DESCRIPTION "A retry count for use by the retry algorithm.
Each retry algorithm needs to specify how it uses this value.
For the 'sequential(2)' algorithm, this value is the number of times the client should retry to connect to one COPS server before moving on to another.
For the 'roundRobin(3)' algorithm, this value is not used.
A retry interval for use by the retry algorithm.
Each retry algorithm needs to specify how it uses this value.
For the 'sequential(2)' algorithm, this value is the time to wait between retries of a connection to the same COPS server.
For the 'roundRobin(3)' algorithm, the client always attempts to connect to each Server in turn, until one succeeds or they all fail; if they all fail, then the client waits for the value of this interval before restarting the algorithm."
} copsClientGroups OBJECT IDENTIFIER ::
copsDeviceStatusGroup OBJECT GROUP OBJECTS { copsClientCapabilities, copsClientServerTcpPort, copsClientServerType, copsClientServerAuthType, copsClientServerLastConnAttempt, copsClientState, copsClientServerKeepaliveTime, copsClientServerAccountingTime, copsClientInPkts, copsClientOutPkts, copsClientInErrs, copsClientLastError, copsClientTcpConnectAttempts, copsClientTcpConnectFailures, copsClientOpenAttempts, copsClientOpenFailures, copsClientErrUnsupportClienttype, copsClientErrUnsupportedVersion, copsClientErrLengthMismatch, copsClientErrUnknownOpcode, copsClientErrUnknownCnum
A collection of objects for monitoring the status of connections to COPS servers and statistics for a COPS client."
"A collection of objects for configuring COPS server information."
MODULE MANDATORY GROUPS { copsDeviceStatusGroup, copsDeviceConfigGroup } OBJECT
"Write access is required only if the device supports the configuration of COPS server information."
MIN ACCESS  read only DESCRIPTION
"Write access is required only if the device supports the configuration of COPS server information."
MIN ACCESS  read only DESCRIPTION
"Write access is required only if the device supports the configuration of COPS server information."
MIN ACCESS  read only DESCRIPTION
"Write access is required only if the device supports the configuration of COPS server information."
MIN ACCESS  read only DESCRIPTION
"Write access is required only if the device supports the configuration of COPS server information."
copsClientServerConfigRetryIntvl MIN ACCESS  read only DESCRIPTION
"Write access is required only if the device supports the configuration of COPS server information."
There are a number of management objects defined in this MIB that have a MAX ACCESS clause of read create.
Such objects may be considered sensitive or vulnerable in some network environments.
The support for SET operations in a non secure environment without proper protection can have a negative effect on network operations.
by itself is not a secure environment.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and
the objects in this MIB.
It is recommended that the implementers consider the security features as provided by the SNMPv3 framework.
Specifically, the use of the User based Security Model [USM] and the View based Access Control Model [VACM] is recommended.
It is then a customer/user responsibility to ensure that the SNMP entity giving access to an instance of this MIB, is properly configured to give access to the objects only to those principals (users) that have legitimate rights to indeed GET or SET
The IETF takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent
to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights.
Information on the IETF's procedures with respect to rights in standards track and standards related documentation can be found in BCP 11.
Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementors or users of this specification can be obtained from the IETF Secretariat.
The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights which may cover technology that may be required to practice this standard.
Please address the information to the IETF Executive Director.
