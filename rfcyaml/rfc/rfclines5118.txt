Abstract This document provides examples of Session Initiation Protocol (SIP) test messages designed to exercise and "torture" the code of an IPv6 enabled SIP implementation.
This document is informational, and is  not normative  on any aspect of SIP.
This document contains test messages based on the current version (2.0) of the Session Initiation Protocol as defined in [RFC3261].
This document is expected to be used as a companion document to the more general SIP torture test document [RFC4475], which does not include specific tests for IPv6 network identifiers.
This document does not attempt to catalog every way to make an invalid message, nor does it attempt to be comprehensive in exploring unusual, but valid, messages.
Instead, it tries to focus on areas that may cause interoperability problems in IPv6 deployments.
This document contains many examples of SIP messages with IPv6 network identifiers.
The appendix contains an encoded binary form containing the bit exact representation of all the messages and the script needed to decode them into separate files.
The IPv6 addresses used in this document correspond to the 2001: DB8::/32 address prefix reserved for documentation [RFC3489].
Likewise, the IPv4 addresses used in this document correspond to the 192.0.2.0/24 address block as described in [RFC3330].
Although SIP is a text based protocol, some of these examples cannot be unambiguously rendered without additional markup due to the constraints placed on the formatting of RFCs.
This document uses the <allOneLine/> markup convention established in [RFC4475] to avoid ambiguity and meet the Internet Draft layout requirements.
For the sake of completeness, the text defining this markup from Section 2.1 of [RFC4475]
is reproduced in its entirety below: Several of these examples contain unfolded lines longer than 72 characters.
These are captured between <allOneLine/> tags.
The single unfolded line is reconstructed by directly concatenating all lines appearing between the tags (discarding any line feeds or carriage returns).
There will be no whitespace at the end of lines.
Any whitespace appearing at a fold point will appear at the beginning of a line.
The following represent the same string of bits: Header name: first value, reallylongsecondvalue, third value <allOneLine
first value, reallylongsecondvalue , third value </allOneLine> <allOneLine
Header name: first value, reallylong second value, third value
Note that this is NOT SIP header line folding, where different strings of bits have equivalent meaning.
SIP and IPv6 Network Configuration System level issues like deploying a dual stack proxy server, populating DNS with A and AAAA Resource Records (RRs), zero  configuration discovery of outbound proxies for IPv4 and IPv6 networks, when a dual stack proxy should Record Route itself, and media issues also play a major part in the transition to IPv6.
This document does not, however, address these issues.
Instead, a companion document [sip trans] provides more guidance on these issues.
The test messages are organized into several sections.
only the SIP parser and others stress both the parser and the application above it.
Some messages are valid and some are not.
Each example clearly calls out what makes any invalid messages incorrect.
Please refer to the complete Augmented Backus Naur Form (ABNF) in [RFC3261] on representing IPv6 references in SIP messages.
When an IPv6 reference is part of a SIP Uniform Resource Identifier (URI), RFC 3261 mandates that the "IPv6reference" production rule be used to recognize tokens that comprise an IPv6 reference.
More specifically, the ABNF states the following: SIP URI
[ userinfo ] hostport uri parameters [ headers ]
Port Ambiguous in a SIP URI
IPv6 uses the colon to delimit octets.
This may lead to ambiguity if the port number on which to contact a SIP server is inadvertently conflated with the IPv6 reference.
Consider the REGISTER request below.
Unfortunately, since the IPv6 address in the R URI is compressed, the intended port number becomes the last octet of the reference.
From a parsing perspective, the request below is well formed.
However, from a semantic point of view, it will not yield the desired result.
Raw IPv6 addresses can occur in many header fields, including the Contact, Route, and Record Route header fields.
They also can appear as the result of the "sent by" production rule of the Via header field.
Implementers are urged to consult the ABNF in [RFC3261] for a complete list of fields where a SIP URI can appear.
98176 REGISTER Content Length: 0 4.4.
Port Unambiguous in a SIP URI
In contrast to the example in Section 4.3, the following REGISTER request leaves no ambiguity whatsoever on where the IPv6 address ends and the port number begins.
This REGISTER request is well formatted per the grammar in [RFC3261].
port unambiguous REGISTER sip:[2001:db8::10]:5070 SIP/2.0
98176 REGISTER Content Length: 0 4.5.
IPv6 Reference Delimiters in Via Header
IPv6 references can also appear in Via header fields; more specifically in the "sent by" production rule and the "via received" production rule.
However, this is not the case for the "via received" non terminal.
The "via received" production rule is defined as follows:
via received   "received" EQUAL (IPv4address / IPv6address)
This has led to the situation documented during the 18th SIP Interoperability Event [Email SIPit]: Those testing IPv6 made different assumptions about enclosing literal v6 addresses in Vias in [].
By the end of the event, most implementations were accepting either.
Its about 50/50 on what gets sent.
While it would be beneficial if the same non terminal ("IPv6reference") was used for both the "sent by" and "via received" production rules, there has not been a consensus in the working group to that effect.
The two test cases below are designed to stress this behavior.
A SIP implementation receiving either of these messages must parse them successfully.
The request below contains an IPv6 address in the Via "received" parameter.
Even though this is not a valid request based on a strict interpretation of the grammar in [RFC3261], robust implementations must nonetheless be able to parse the topmost Via header field and continue processing the request.
Message Details: via received param with delim BYE sip:[2001:db8::10]
db8::9:255]; branch z9hG4bKas3 111 </allOneLine
SSG9559905523997077@hlau 4100 Max Forwards: 70 CSeq:
321 BYE Content Length: 0
This request is valid according to the grammar in [RFC3261].
via received param no delim OPTIONS sip:[2001:db8::10]
SSG95523997077@hlau 4100 Max Forwards: 70 Contact: "Caller"
921 OPTIONS Content Length: 0 4.6.
SIP Request with IPv6 Addresses in Session Description Protocol (SDP)
This request below is valid and well
formed according to the grammar in [RFC3261].
8612 INVITE Max Forwards: 70 Content Type: application/sdp Content Length: 268 v 0 o
IN IP6 2001:db8::20 s Live video feed for today's meeting c IN IP6 2001:db8::20 t 3338481189 3370017201 m audio 6000 RTP/AVP 2
a rtpmap:2 G726 32/8000 m video 6024 RTP/AVP 107
Multiple IP Addresses in SIP Headers
The request below is valid and well
formed according to the grammar in [RFC3261].
The Via list contains a mix of IPv4 addresses and IPv6 references.
mult ip in header BYE sip:user@host.example.net
> Call ID: 997077@lau 4100
user@example.com;tag 81x2 Content Length: 0 4.8.
Multiple IP Addresses in SDP
The request below is valid and well formed according to the grammar in [RFC3261].
The SDP contains multiple media lines, and each media line is identified by a different network connection address.
Max Forwards: 70 CSeq: 8912 INVITE Content Type: application/sdp Content Length: 181 v 0 o bob 280744730 28977631
IN IP4 host.example.com s  t 0 0
m audio 22334 RTP/AVP 0
c IN IP4 192.0.2.1 m video 6024 RTP/AVP 107 c IN IP6 2001:db8::1 a rtpmap:107 H263 1998/90000 4.9.
An IPv4 mapped IPv6 address is usually represented with the last 32 bits appearing as a dotted decimal IPv4 address; e.g.
A SIP implementation receiving a message that contains such a mapped address must be prepared to parse it successfully.
An IPv4 mapped IPv6 address may appear in signaling, or in the SDP carried by the signaling message, or in both.
The message below is well formed according to the grammar in [RFC3261].
The Via list contains two Via headers, both of which include an IPv4 mapped IPv6 address.
An IPv4 mapped IPv6 address also appears in the Contact header and the SDP.
ipv4 mapped ipv6 INVITE sip:user@example.com
SSG9559905523997077@hlau 4100 Contact: "T. desk phone"
612 INVITE Max Forwards: 70 Content Type: application/sdp Content Length: 236 v 0 o assistant 971731711378798081 0
IN IP6 ::ffff:192.0.2.2 s Call me soon, please!
ffff:192.0.2.2 t 3338481189 3370017201 m audio 6000 RTP/AVP 2 a
rtpmap:2 G726 32/8000 m video 6024 RTP/AVP 107
a rtpmap:107 H263 1998/90000 4.10.
IPv6 Reference Bug in RFC 3261 ABNF It is possible to follow the IPv6reference production rule of RFC 3261 ABNF   the relevant portion of which is reproduced at the top of Section 4   and arrive at the following construct:
[2001:db8:::192.0.2.1] Note the extra colon before the IPv4 address in the above construct.
The correct construct, of course, is: [2001
The ABNF pertaining to IPv6 references in RFC 3261 was derived from RFC 2373 [RFC2373], which has been obsoleted by RFC 4291 [RFC4291].
The specific behavior of inserting an extra colon was inherited from RFC 2373, and has been remedied in RFC 4291.
However, following the Robustness Principle [RFC1122], an implementation must tolerate both of the above constructs.
The message below includes an extra colon in the IPv6 reference.
A SIP implementation receiving such a message may exhibit robustness by successfully parsing the IPv6 reference (it can choose to ignore the extra colon when parsing the IPv6 reference.
If the SIP implementation is acting in the role of a proxy, it may additionally serialize the message without the extra colon to aid the next downstream server).
ipv6 bug abnf 3 colons
689 OPTIONS Max Forwards: 70 Content Length:
The next message has the correct syntax for the IPv6 reference in the R URI.
ipv6 correct abnf 2 colons OPTIONS sip:
689 OPTIONS Max Forwards: 70 Content Length: 0 5.
This document presents examples of SIP messages with IPv6 references contained in the signaling headers and SDP payload.
While this document may clarify the behavior of SIP elements processing a message with IPv6 references, it does not normatively change the base SIP [RFC3261] specification in any way.
Consequently, all security considerations in [RFC3261] apply.
Parsers must carefully consider edge conditions and malicious input as part of their design.
Attacks on many Internet systems use crafted input to cause implementations to behave in undesirable ways.
Many of the messages in this document are designed to stress a parser implementation at points traditionally used for such attacks.
This document does not, however, attempt to be comprehensive.
It contains some common pitfalls that the authors have discovered while parsing IPv6 identifiers in SIP implementations.
Appendix A.  Bit Exact Archive of Each Test Message
The following text block is an encoded, gzip compressed TAR archive of files that represent each of the example messages discussed in Section 4.
; Alternatively, the base 64 encoded block can be edited by hand to remove document structure lines and fed as input to any base 64 decoding utility.
fb8dY0/3rbBX7Z9p2AjS/1Tx3UEb9W9iclZNxReb9D81xpc0u5v3QGyimvj27VqIi K60hDtQoxGeuutqn19aRmGZUHDwMSyOOT8fDASk7 pWpvahe/Fohfb4E2nDhwZfQb BwPfkG/Bj8m2xdM43W/xJu7iW/9iAIQyyQdR F/f6ez/8IkInsgHP3iu9WO88BNIG imIjtydi1/
JeDq3WXr uvPuKlVxrEbedrqmreh6uPo/TvgXbVg2eqJubxXcTMiTN8hwpuC99Mf5Utso12/LV GsSzIdhQ5Sh9rJlasb/vu fTgCK W8s I9pyn9OKv
RAhGKse77uyJE7PlIbhfxni/1 fg6X7Pwzzav nDHxqd1qfPl4/3/ZPHqqvBfabkrAuB0fdDrKWN4QwArNxefFCsJX/ X9x4cEQFKOQ/Xth/I4v/GcMV/8vAPP93IPdTgncdzh7EkWWgKMH35A3ilOJEUTzJ7 L10ehdifv5r0tdF17vTid7zR7531CigmP/
