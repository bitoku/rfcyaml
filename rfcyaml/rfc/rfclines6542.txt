Abstract Currently, channel bindings are implemented using an MD5 hash in the Kerberos Version 5 Generic Security Service Application Programming Interface (GSS API) mechanism (RFC 4121).
This document updates RFC 4121 to allow channel bindings using algorithms negotiated based on Kerberos crypto framework as defined in RFC 3961.
In addition, because this update makes use of the last extensible field in the Kerberos client server exchange message, extensions are defined to allow future protocol extensions.
Introduction With the recently discovered weaknesses in the MD5 hash algorithm (see [RFC6151]), there is a need to use stronger hash algorithms.
The Kerberos Version 5 Generic Security Service Application Programming Interface (GSS API) mechanism [RFC4121] uses MD5 to calculate channel binding verifiers.
This document specifies an update to the mechanism that allows it to create channel binding information based on negotiated algorithms.
This will allow deploying new algorithms incrementally without breaking interoperability with older implementations when new attacks arise in the future.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The term "little endian order" is used for brevity to refer to the least significant octet first encoding, while the term "big endian order" is used for the most significant octet first encoding.
When generating a channel binding verifier, Bnd, a hash is computed from the channel binding fields.
Initiators MUST populate the Bnd field in order to maintain interoperability with existing acceptors.
In addition, initiators MUST populate the extension field (Exts) defined below.
Structure of the Exts Field
The 0x8003 GSS checksum has the same structure described in [RFC4121] except that the Exts field is now defined; the entire structure of the 0x8003 checksum, including the now defined Exts field, follows:
Four octet context establishment flags in little endian order as described in Section 4.1.1.1 of [RFC4121].
The delegation option identifier ( 1) in little endian order [optional].
This field and the next two fields are present if and only if GSS C DELEG FLAG is set as described in Section 4.1.1.1 of [RFC4121].
The length of the Deleg field in little endian order [optional].
If multiple extensions are present, then there MUST be at most one instance of a given extension type.
The Channel Binding Extension When channel binding is used, the Exts MUST include the following extension: data type 0x00000000 data value
The output obtained by applying the Kerberos V get mic operation [RFC3961] with key usage number 43 to the channel binding data as described in [RFC4121], Section 4.1.1.2 (using get mic instead of MD5).
The key used is the sub session key from the authenticator, if it is present; otherwise, the key used is the session key from the ticket.
The get mic algorithm is chosen as the "required checksum mechanism" for the encryption type of the key used.
Initiators that are unwilling to use an MD5 hash of the channel bindings MUST set the Bnd field to sixteen octets of hex value FF.
Security Considerations With this mechanism
, initiators get no indication as to whether the acceptors check or ignore channel bindings.
It is up to the application whether or not to enforce the use of channel bindings.
[RFC5056] and [RFC5554] give guidance for application developers on channel binding usage.
IANA Considerations IANA has created a new top level registry titled "Kerberos V GSS API Mechanism Parameters," separate from the existing Kerberos parameters registry.
Within this registry, IANA has created a sub registry of "Kerberos V GSS API Mechanism Extension Types" with four field entries (Type Number, Type Name, Description, and Reference) and, initially, a single registration: 0x00000000, "Channel Binding MIC," "Extension for the verifier of the channel bindings," [RFC6542].
Using the guidelines for allocation as described in [RFC5226], type number assignments are as follows: 0x00000000
