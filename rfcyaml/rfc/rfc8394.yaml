- title: __initial_text__
  contents:
  - ''
- title: Split Network Virtualization Edge (Split-NVE) Control-Plane Requirements
  contents:
  - 'Split Network Virtualization Edge (Split-NVE) Control-Plane Requirements

    '
- title: Abstract
  contents:
  - "Abstract\n   In the Split Network Virtualization Edge (Split-NVE) architecture,\n\
    \   the functions of the NVE are split across a server and a piece of\n   external\
    \ network equipment that is called an \"External NVE\".  The\n   server-resident\
    \ control-plane functionality resides in control\n   software, which may be part\
    \ of hypervisor or container-management\n   software; for simplicity, this document\
    \ refers to the hypervisor as\n   the \"location\" of this software.\n   One or\
    \ more control-plane protocols between a hypervisor and its\n   associated External\
    \ NVE(s) are used by the hypervisor to distribute\n   its virtual-machine networking\
    \ state to the External NVE(s) for\n   further handling.  This document illustrates\
    \ the functionality\n   required by this type of control-plane signaling protocol\
    \ and\n   outlines the high-level requirements.  Virtual-machine states as well\n\
    \   as state transitioning are summarized to help clarify the protocol\n   requirements.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8394.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................4\n  \
    \    1.2. Target Scenarios ...........................................6\n   2.\
    \ VM Lifecycle ....................................................7\n      2.1.\
    \ VM Creation Event ..........................................8\n      2.2. VM\
    \ Live Migration Event ....................................8\n      2.3. VM Termination\
    \ Event .......................................9\n      2.4. VM Pause, Suspension,\
    \ and Resumption Events ...............10\n   3. Hypervisor-to-NVE Control-Plane\
    \ Protocol Functionality .........10\n      3.1. VN_Connect and VN_Disconnect\
    \ ..............................10\n      3.2. TSI Associate and Activate ................................12\n\
    \      3.3. TSI De-Associate and Deactivate ...........................15\n  \
    \ 4. Hypervisor-to-NVE Control-Plane Protocol Requirements ..........16\n   5.\
    \ VDP Applicability and Enhancement Needs ........................17\n   6. Security\
    \ Considerations ........................................19\n   7. IANA Considerations\
    \ ............................................20\n   8. References .....................................................21\n\
    \      8.1. Normative References ......................................21\n  \
    \    8.2. Informative References ....................................22\n   Appendix\
    \ A. VDP Illustrations (per IEEE 802.1Q) (for Information\n               Only)\
    \ .................................................23\n   Acknowledgements ..................................................25\n\
    \   Authors' Addresses ................................................26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In the Split Network Virtualization Edge (Split-NVE) architecture\n\
    \   shown in Figure 1, the functionality of the NVE is split across an\n   end\
    \ device supporting virtualization and an external network device\n   that is\
    \ called an \"External NVE\".  The portion of the NVE\n   functionality located\
    \ on the end device is called the \"tNVE\"\n   (terminal-side NVE), and the portion\
    \ located on the External NVE is\n   called the \"nNVE\" (network-side NVE) in\
    \ this document.  Overlay\n   encapsulation/decapsulation functions are normally\
    \ offloaded to the\n   nNVE on the External NVE.\n                       +------------\
    \ Split-NVE ---------+\n                       |                             \
    \   |\n                       |                                |\n     +-----------------|-----+\
    \                          |\n     | +---------------|----+|                 \
    \         |\n     | | +--+         \\|/   ||                          |\n    \
    \ | | |V |TSI  +-------+ ||                   +------|-------------+\n     | |\
    \ |M |-----+       | ||                   |     \\|/            |\n     | | +--+\
    \     |       | ||                   |+--------+          |\n     | | +--+   \
    \  | tNVE  | ||-------------------||        |          |\n     | | |V |TSI  |\
    \       | ||                   || nNVE   |          |\n     | | |M |-----|   \
    \    | ||                   ||        |          |\n     | | +--+     +-------+\
    \ ||                   |+--------+          |\n     | |                    ||\
    \                   +--------------------+\n     | +-----Hypervisor-----+|\n \
    \    +-----------------------+\n            End Device                       \
    \        External NVE\n                       Figure 1: Split-NVE Structure\n\
    \   The tNVE is normally implemented as a part of a hypervisor or\n   container\
    \ and/or a virtual switch in a virtualized end device.  This\n   document uses\
    \ the term \"hypervisor\" throughout when describing the\n   Split-NVE scenario\
    \ where part of the NVE functionality is offloaded\n   to a separate device from\
    \ the \"hypervisor\" that contains a VM\n   (Virtual Machine) connected to a VN\
    \ (Virtual Network).  In this\n   context, the term \"hypervisor\" is meant to\
    \ cover any device type\n   where part of the NVE functionality is offloaded in\
    \ this fashion,\n   e.g., a Network Service Appliance or Linux Container.\n  \
    \ The Network Virtualization over Layer 3 (NVO3) problem statement\n   [RFC7364]\
    \ discusses the need for a control-plane protocol (or\n   protocols) to populate\
    \ each NVE with the state needed to perform the\n   required functions.  In one\
    \ scenario, an NVE provides overlay\n   encapsulation/decapsulation packet-forwarding\
    \ services to Tenant\n   Systems that are co-resident within the NVE on the same\
    \ end device\n   (e.g., when the NVE is embedded within a hypervisor or a Network\n\
    \   Service Appliance).  In such cases, there is no need for a\n   standardized\
    \ protocol between the hypervisor and the NVE, as the\n   interaction is implemented\
    \ via software on a single device.  However,\n   in the Split-NVE architecture\
    \ scenarios shown in Figures 2 through 4\n   (see Section 1.2), one or more control-plane\
    \ protocols between a\n   hypervisor and its associated External NVE(s) are required\
    \ for the\n   hypervisor to distribute the VM's networking states to the NVE(s)\
    \ for\n   further handling.  The protocol is an NVE-internal protocol and runs\n\
    \   between tNVE and nNVE logical entities.  This protocol is mentioned\n   in\
    \ the \"third work area\" text in Section 4.5 of the NVO3 problem\n   statement\
    \ [RFC7364].\n   VM states and state transitioning are summarized in this document,\n\
    \   showing events where the NVE needs to take specific actions.  Such\n   events\
    \ might correspond to actions that the control-plane signaling\n   protocol or\
    \ protocols need to take between the tNVE and the nNVE in\n   the Split-NVE scenario.\
    \  The high-level requirements to be fulfilled\n   are listed in Section 4.\n\
    \   To describe the requirements, this document uses VMs as an example of\n  \
    \ Tenant Systems, even though a VM is just one type of Tenant System\n   that\
    \ may connect to a VN.  For example, a service instance within a\n   Network Service\
    \ Appliance is another type of Tenant System, as are\n   systems running on OS-level\
    \ virtualization technologies like\n   containers.  The fact that VMs have lifecycles\
    \ (e.g., can be created\n   and destroyed, can be moved, and can be started or\
    \ stopped) results\n   in a general set of protocol requirements, most of which\
    \ are\n   applicable to other forms of Tenant Systems, although not all of the\n\
    \   requirements are applicable to all forms of Tenant Systems.\n   Section 2\
    \ describes VM states and state transitioning in the VM's\n   lifecycle.  Section\
    \ 3 introduces hypervisor-to-NVE control-plane\n   protocol functionality derived\
    \ from VM operations and network events.\n   Section 4 outlines the requirements\
    \ of the control-plane protocol to\n   achieve the required functionality.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   This document uses the same terminology\
    \ as the terminology found in\n   [RFC7365].  This section defines additional\
    \ terminology used by this\n   document.\n   Split-NVE:  A type of NVE (Network\
    \ Virtualization Edge) where the\n      functionalities are split across an end\
    \ device supporting\n      virtualization and an external network device.\n  \
    \ tNVE:  Terminal-side NVE.  The portion of Split-NVE functionalities\n      located\
    \ on the end device supporting virtualization.  The tNVE\n      interacts with\
    \ a Tenant System through an internal interface in\n      the end device.\n  \
    \ nNVE:  Network-side NVE.  The portion of Split-NVE functionalities\n      located\
    \ on the network device that is directly or indirectly\n      connected to the\
    \ end device that contains the corresponding tNVE.\n      The nNVE normally performs\
    \ encapsulation to and decapsulation from\n      the overlay network.\n   External\
    \ NVE:  The physical network device that contains the nNVE.\n   Hypervisor:  The\
    \ logical collection of software, firmware, and/or\n      hardware that allows\
    \ the creation and running of server or service\n      appliance virtualization.\
    \  The tNVE is located under a hypervisor.\n      The term \"hypervisor\" is loosely\
    \ used in this document to refer to\n      the end device supporting the virtualization.\
    \  For simplicity, we\n      also use the term \"hypervisor\" to represent both\
    \ the hypervisor\n      and the container.\n   Container:  Please see \"Hypervisor:\"\
    \ above.\n   VN Profile:  Metadata that is associated with a VN and applied to\
    \ any\n      attachment point to the VN (i.e., VAP (Virtual Access Point)\n  \
    \    properties that are applied to all VAPs associated with a given VN\n    \
    \  and used by an NVE when ingressing/egressing packets to/from a\n      specific\
    \ VN).  Metadata could include such information as Access\n      Control Lists\
    \ (ACLs) and QoS settings.  The VN Profile contains\n      parameters that apply\
    \ to the VN as a whole.  Control protocols\n      between the NVE and the NVA\
    \ (Network Virtualization Authority)\n      could use the VN ID or VN Name to\
    \ obtain the VN Profile.\n   VSI:  Virtual Station Interface.  See [IEEE802.1Q].\n\
    \   VDP:  VSI Discovery and Configuration Protocol.  See [IEEE802.1Q].\n"
- title: 1.2.  Target Scenarios
  contents:
  - "1.2.  Target Scenarios\n   In the Split-NVE architecture, an External NVE can\
    \ provide offloading\n   of the encapsulation/decapsulation functions and network\
    \ policy\n   enforcement as well as offloading of overhead from the VN overlay\n\
    \   protocol.  This offloading may improve performance and/or save\n   resources\
    \ in the end device (e.g., hypervisor) using the\n   External NVE.\n   Figures\
    \ 2 through 4 give example scenarios for the Split-NVE\n   architecture.\n   \
    \           Hypervisor             Access Switch\n         +------------------+\
    \       +-----+-------+\n         | +--+   +-------+ |       |     |       |\n\
    \         | |VM|---|       | | VLAN  |     |       |\n         | +--+   | tNVE\
    \  |---------+ nNVE|       +--- Underlying\n         | +--+   |       | | Trunk\
    \ |     |       |    Network\n         | |VM|---|       | |       |     |    \
    \   |\n         | +--+   +-------+ |       |     |       |\n         +------------------+\
    \       +-----+-------+\n                 Figure 2: Hypervisor with an External\
    \ NVE\n             Hypervisor       L2 Switch\n         +---------------+   \
    \  +-----+     +----+---+\n         | +--+   +----+ |     |     |     |    | \
    \  |\n         | |VM|---|    | |VLAN |     |VLAN |    |   |\n         | +--+ \
    \  |tNVE|-------+     +-----+nNVE|   +--- Underlying\n         | +--+   |    |\
    \ |Trunk|     |Trunk|    |   |    Network\n         | |VM|---|    | |     |  \
    \   |     |    |   |\n         | +--+   +----+ |     |     |     |    |   |\n\
    \         +---------------+     +-----+     +----+---+\n                 Figure\
    \ 3: Hypervisor with an External NVE\n                Connected through an Ethernet\
    \ Access Switch\n        Network Service Appliance          Access Switch\n  \
    \   +-----------------------------+      +-----+-------+\n     | +---------------+\
    \    | \\    |      |     |       |\n     | |Network Service|----|  \\   |   \
    \   |     |       |\n     | |Instance       |    |   \\  | VLAN |     |      \
    \ |\n     | +---------------+    |tNVE| |------+nNVE |       +--- Underlying\n\
    \     | +---------------+    |    | | Trunk|     |       |    Network\n     |\
    \ |Network Service|----|   /  |      |     |       |\n     | |Instance       |\
    \    |  /   |      |     |       |\n     | +---------------+    | /    |     \
    \ |     |       |\n     +-----------------------------+      +-----+-------+\n\
    \     Figure 4: Physical Network Service Appliance with an External NVE\n   Tenant\
    \ Systems connect to External NVEs via a Tenant System Interface\n   (TSI).  The\
    \ TSI logically connects to the External NVE via a VAP\n   [RFC8014].  The External\
    \ NVE may provide Layer 2 or Layer 3\n   forwarding.  In the Split-NVE architecture,\
    \ the External NVE may be\n   able to reach multiple Media Access Control (MAC)\
    \ addresses and IP\n   addresses via a TSI.  An IP address can be in either IPv4\
    \ or IPv6\n   format.  For example, Tenant Systems that are providing network\n\
    \   services (such as a transparent firewall, load balancer, or VPN\n   gateway)\
    \ are likely to have a complex address hierarchy.  This\n   implies that if a\
    \ given TSI de-associates from one VN, all the MAC\n   and/or IP addresses are\
    \ also de-associated.  There is no need to\n   signal the deletion of every MAC\
    \ or IP address when the TSI is\n   brought down or deleted.  In the majority\
    \ of cases, a VM will be\n   acting as a simple host that will have a single TSI\
    \ as well as a\n   single MAC and IP address visible to the External NVE.\n  \
    \ Figures 2 through 4 show the use of VLANs to separate traffic for\n   multiple\
    \ VNs between the tNVE and the nNVE; VLANs are not strictly\n   necessary if only\
    \ one VN is involved, but multiple VNs are expected\n   in most cases.  Hence,\
    \ this document assumes the presence of VLANs.\n"
- title: 2.  VM Lifecycle
  contents:
  - "2.  VM Lifecycle\n   Figure 2 of [RFC7666] shows the states and transitions of\
    \ a VM.  Some\n   of the VM states are of interest to the External NVE.  This\
    \ section\n   illustrates the relevant phases and events in the VM lifecycle.\
    \  Note\n   that the following subsections do not give exhaustive descriptions\
    \ of\n   VM lifecycle states.  Rather, they are intended as illustrative\n   examples\
    \ that are relevant to the Split-NVE architecture and not as\n   prescriptive\
    \ text; the goal is to capture sufficient detail to set a\n   context for the\
    \ signaling-protocol functionality and requirements\n   described in the following\
    \ sections.\n"
- title: 2.1.  VM Creation Event
  contents:
  - "2.1.  VM Creation Event\n   The VM creation event causes the VM state to transition\
    \ from the\n   \"preparing\" state to the \"shutdown\" state and then to the \"\
    running\"\n   state [RFC7666].  The end device allocates and initializes local\n\
    \   virtual resources like storage in the VM's preparing state.  In the\n   shutdown\
    \ state, the VM has everything ready, except that CPU\n   execution is not scheduled\
    \ by the hypervisor and the VM's memory is\n   not resident in the hypervisor.\
    \  The transition from the shutdown\n   state to the running state normally requires\
    \ human action or a\n   system-triggered event.  The running state indicates that\
    \ the VM is\n   in the normal execution state.  As part of transitioning the VM\
    \ to\n   the running state, the hypervisor must also provision network\n   connectivity\
    \ for the VM's TSI(s) so that Ethernet frames can be sent\n   and received correctly.\
    \  Initially, when in the running state, no\n   ongoing migration, suspension,\
    \ or shutdown is in process.\n   In the VM creation phase, the VM's TSI has to\
    \ be associated with the\n   External NVE.  \"Association\" here indicates that\
    \ the hypervisor and\n   the External NVE have signaled each other and reached\
    \ some form of\n   agreement.  Relevant networking parameters or information have\
    \ been\n   provisioned properly.  The External NVE should be informed of the\n\
    \   VM's TSI MAC address and/or IP address.  In addition to external\n   network\
    \ connectivity, the hypervisor may provide local network\n   connectivity between\
    \ the VM's TSI and TSIs for other VMs that are\n   co-resident on the same hypervisor.\
    \  When the intra- or\n   inter-hypervisor connectivity is extended to the External\
    \ NVE, a\n   locally significant tag, e.g., VLAN ID, should be used between the\n\
    \   hypervisor and the External NVE to differentiate each VN's traffic.\n   Both\
    \ the hypervisor and External NVE sides must agree on that tag\n   value for traffic\
    \ identification, isolation, and forwarding.\n   The External NVE may need to\
    \ do some preparation before it signals\n   successful association with the TSI.\
    \  Such preparation may include\n   locally saving the states and binding information\
    \ of the TSI and its\n   VN or communicating with the NVA for network provisioning.\n\
    \   A TSI association should be performed before the VM enters the\n   running\
    \ state, preferably in the shutdown state.  If the association\n   with an External\
    \ NVE fails, the VM should not go into the running\n   state.\n"
- title: 2.2.  VM Live Migration Event
  contents:
  - "2.2.  VM Live Migration Event\n   Live migration is sometimes referred to as\
    \ \"hot\" migration in that,\n   from an external viewpoint, the VM appears to\
    \ continue to run while\n   being migrated to another server (e.g., TCP connections\
    \ generally\n   survive this class of migration).  In contrast, \"cold\" migration\n\
    \   consists of shutting down VM execution on one server and restarting\n   it\
    \ on another.  For simplicity, the following abstract summary of\n   live migration\
    \ assumes shared storage, so that the VM's storage is\n   accessible to the source\
    \ and destination servers.  Assume that the VM\n   \"live migrates\" from hypervisor\
    \ 1 to hypervisor 2.  Such a migration\n   event involves state transitions on\
    \ both source hypervisor 1 and\n   destination hypervisor 2.  The VM state on\
    \ source hypervisor 1\n   transitions from the running state to the \"migrating\"\
    \ state and then\n   to the shutdown state [RFC7666].  The VM state on destination\n\
    \   hypervisor 2 transitions from the shutdown state to the migrating\n   state\
    \ and then to the running state.\n   The External NVE connected to destination\
    \ hypervisor 2 has to\n   associate the migrating VM's TSI with itself (i.e.,\
    \ the External NVE)\n   by discovering the TSI's MAC and/or IP addresses, discovering\
    \ its VN,\n   discovering its locally significant VLAN ID (if any), and\n   provisioning\
    \ other network-related parameters of the TSI.  The\n   External NVE may be informed\
    \ about the VM's peer VMs, storage\n   devices, and other network appliances with\
    \ which the VM needs to\n   communicate or is communicating.  The migrated VM\
    \ on destination\n   hypervisor 2 should not go to the running state until all\
    \ the network\n   provisioning and binding have been done.\n   The VM state on\
    \ both the source hypervisor and the destination\n   hypervisor will be the migrating\
    \ state during the transfer of VM\n   execution.  The migrating VM should not\
    \ be in the running state at\n   the same time on the source hypervisor and destination\
    \ hypervisor\n   during migration.  The VM on the source hypervisor does not\n\
    \   transition to the shutdown state until the VM successfully enters the\n  \
    \ running state on the destination hypervisor.  It is possible that the\n   VM\
    \ on the source hypervisor stays in the migrating state for a while\n   after\
    \ the VM on the destination hypervisor enters the running state.\n"
- title: 2.3.  VM Termination Event
  contents:
  - "2.3.  VM Termination Event\n   A VM termination event is also referred to as\
    \ \"powering off\" a VM.  A\n   VM termination event leads to the VM's transition\
    \ to the shutdown\n   state.  Per [RFC7666], there are two possible causes of\
    \ VM\n   termination:\n   1.  A running VM has undergone a normal \"power-off\"\
    .\n   2.  The VM has been migrated to another hypervisor, and the VM image\n \
    \      on the source hypervisor has to stop executing and be shut down.\n   In\
    \ VM termination, the External NVE connecting to that VM needs to\n   deprovision\
    \ the VM, i.e., delete the network parameters associated\n   with that VM.  In\
    \ other words, the External NVE has to de-associate\n   the VM's TSI.\n"
- title: 2.4.  VM Pause, Suspension, and Resumption Events
  contents:
  - "2.4.  VM Pause, Suspension, and Resumption Events\n   A VM pause event leads\
    \ to the VM transitioning from the running state\n   to the \"paused\" state.\
    \  The paused state indicates that the VM is\n   resident in memory but that CPU\
    \ execution is not scheduled by the\n   hypervisor [RFC7666].  The VM can be easily\
    \ reactivated from the\n   paused state to the running state.\n   A VM suspension\
    \ event leads to the VM transitioning from the running\n   state to the \"suspended\"\
    \ state.  A VM resumption event leads to the\n   VM transitioning from the suspended\
    \ state to the running state.  In\n   the suspended state, the memory and CPU\
    \ execution state of the VM are\n   saved to persistent storage.  During this\
    \ state, CPU execution for\n   the VM is not scheduled by the hypervisor [RFC7666].\n\
    \   In the Split-NVE architecture, the External NVE should not\n   de-associate\
    \ the paused or suspended VM, as the VM can return to the\n   running state at\
    \ any time.\n"
- title: 3.  Hypervisor-to-NVE Control-Plane Protocol Functionality
  contents:
  - "3.  Hypervisor-to-NVE Control-Plane Protocol Functionality\n   The following\
    \ subsections show illustrative examples of the state\n   transitions of an External\
    \ NVE that are relevant to hypervisor-to-NVE\n   signaling-protocol functionality.\
    \  Note: This is not prescriptive\n   text for the full state machine.\n"
- title: 3.1.  VN_Connect and VN_Disconnect
  contents:
  - "3.1.  VN_Connect and VN_Disconnect\n   In the Split-NVE scenario, a protocol\
    \ is needed between the end\n   device (e.g., hypervisor) and the External NVE\
    \ it is using, in order\n   to make the External NVE aware of the changing VN\
    \ membership\n   requirements of the Tenant Systems within the end device.\n \
    \  A key driver for using a protocol rather than using static\n   configuration\
    \ of the External NVE is that the VN connectivity\n   requirements can change\
    \ frequently as VMs are brought up, moved, and\n   brought down on various hypervisors\
    \ throughout the data center or\n   external cloud.\n   Figure 5 shows the state\
    \ transition for a VAP on the External NVE.\n   An NVE that supports the hypervisor-to-NVE\
    \ control-plane protocol\n   should support one instance of the state machine\
    \ for each active VN.\n   The state transition on the External NVE is normally\
    \ triggered by\n   events and behaviors on the hypervisor-facing side.  Some of\
    \ the\n   interleaved interactions between the NVE and the NVA will be\n   illustrated\
    \ to better explain the whole procedure, while other\n   interactions will not\
    \ be shown.\n   +----------------+   Receive VN_Connect;     +----------------------+\n\
    \   |VN_Disconnected |   return Local_Tag value  |VN_Connected          |\n  \
    \ +----------------+   for VN if successful;   +----------------------+\n   |VN_ID;\
    \          |-------------------------->|VN_ID;                |\n   |VN_State=\
    \       |                           |VN_State=VN_Connected;|\n   |VN_Disconnected;|\
    \                           |Num_TSI_Associated;   |\n   |                |<--Receive\
    \ VN_Disconnect---|Local_Tag;            |\n   +----------------+            \
    \               |VN_Context;           |\n                                   \
    \             +----------------------+\n           Figure 5: State Transition\
    \ Example of a VAP Instance\n                            on an External NVE\n\
    \   The External NVE must be notified when an end device requires a\n   connection\
    \ to a particular VN and when it no longer requires a\n   connection.  Connection\
    \ cleanup for the failed devices should be\n   employed.  Note that this topic\
    \ is out of scope for the protocol\n   specified in this document.\n   In addition,\
    \ the External NVE should provide a local tag value for\n   each connected VN\
    \ to the end device to use for exchanging packets\n   between the end device and\
    \ the External NVE (e.g., a locally\n   significant tag value per [IEEE802.1Q]).\
    \  How \"local\" the\n   significance is depends on whether\n   1.  the hypervisor\
    \ has a direct physical connection to the\n       External NVE (in which case\
    \ the significance is local to the\n       physical link) or\n   2.  there is\
    \ an Ethernet switch (e.g., a blade switch) connecting the\n       hypervisor\
    \ to the NVE (in which case the significance is local to\n       the intervening\
    \ switch and all the links connected to it).\n   These VLAN tags are used to differentiate\
    \ between different VNs as\n   packets cross the shared-access network to the\
    \ External NVE.  When\n   the External NVE receives packets, it uses the VLAN\
    \ tag to identify\n   their VN coming from a given TSI, strips the tag, adds the\n\
    \   appropriate overlay encapsulation for that VN, and sends it towards\n   the\
    \ corresponding remote NVE across the underlying IP network.\n   The Identification\
    \ of the VN in this protocol could be through either\n   a VN Name or a VN ID.\
    \  A globally unique VN Name facilitates\n   portability of a tenant's virtual\
    \ data center.  Once an External NVE\n   receives a VN_Connect message, the NVE\
    \ needs a way to get a\n   VN_Context allocated (or to receive the already-allocated\
    \ VN_Context)\n   for a given VN Name or VN ID (as well as any other information\
    \ needed\n   to transmit encapsulated packets).  How this is done is the subject\n\
    \   of the NVE-to-NVA protocol; see the \"first two areas of work\" text in\n\
    \   Section 4.5 of [RFC7364].  The External NVE needs to synchronize the\n   mapping\
    \ information of the local tag and VN Name or VN ID with\n   the NVA.\n   The\
    \ VN_Connect message can be explicit or implicit.  \"Explicit\" means\n   that\
    \ the hypervisor sends a request message explicitly for the\n   connection to\
    \ a VN.  \"Implicit\" means that the External NVE receives\n   other messages,\
    \ e.g., the very first TSI Associate message (see the\n   next subsection) for\
    \ a given VN, that implicitly indicate its\n   interest in connecting to a VN.\n\
    \   A VN_Disconnect message indicates that the NVE can release all the\n   resources\
    \ for that disconnected VN and transition to the\n   VN_Disconnected state.  The\
    \ local tag assigned for that VN can\n   possibly be reclaimed for use by another\
    \ VN.\n"
- title: 3.2.  TSI Associate and Activate
  contents:
  - "3.2.  TSI Associate and Activate\n   Typically, a TSI is assigned a single MAC\
    \ address, and all frames\n   transmitted and received on that TSI use that single\
    \ MAC address.  As\n   mentioned earlier, it is also possible for a Tenant System\
    \ to\n   exchange frames using multiple MAC addresses or packets with multiple\n\
    \   IP addresses.\n   Particularly in the case of a Tenant System that is forwarding\
    \ frames\n   or packets from other Tenant Systems, the External NVE will need\
    \ to\n   communicate the mapping between the NVE's IP address on the\n   underlying\
    \ network and ALL the addresses the Tenant System is\n   forwarding on behalf\
    \ of the corresponding VN to the NVA.\n   The NVE has two ways it can discover\
    \ the tenant addresses for which\n   frames are to be forwarded to a given end\
    \ device (and ultimately to\n   the Tenant System within that end device).\n \
    \  1.  It can glean the addresses by inspecting the source addresses in\n    \
    \   packets it receives from the end device.\n   2.  The hypervisor can explicitly\
    \ signal the address associations of\n       a TSI to the External NVE.  An address\
    \ association includes all\n       the MAC and/or IP addresses possibly used as\
    \ source addresses in\n       a packet sent from the hypervisor to the External\
    \ NVE.  The\n       External NVE may further use this information to filter the\n\
    \       future traffic from the hypervisor.\n   To use the second approach above,\
    \ the control-plane protocol running\n   between the hypervisor and the NVE must\
    \ support end devices\n   communicating new tenant-address associations for a\
    \ given TSI within\n   a given VN.\n   Figure 6 shows an example of a state transition\
    \ for a TSI connecting\n   to a VAP on the External NVE.  An NVE that supports\
    \ the hypervisor-\n   to-NVE control-plane protocol may support one instance of\
    \ the state\n   machine for each TSI connecting to a given VN.\n             \
    \   De-Associate   +--------+     De-Associate\n              +--------------->|\
    \  Init  |<--------------------+\n              |                +--------+  \
    \                   |\n              |                |        |             \
    \        |\n              |                |        |                     |\n\
    \              |                +--------+                     |\n           \
    \   |                  |    |                       |\n              |       Associate\
    \  |    |  Activate             |\n              |      +-----------+    +-----------+\
    \           |\n              |      |                            |           |\n\
    \              |      |                            |           |\n           \
    \   |     \\|/                          \\|/          |\n      +--------------------+\
    \                  +---------------------+\n      |     Associated     |     \
    \             |       Activated     |\n      +--------------------+          \
    \        +---------------------+\n      |TSI_ID;             |               \
    \   |TSI_ID;              |\n      |Port;               |-----Activate---->|Port;\
    \                |\n      |VN_ID;              |                  |VN_ID;    \
    \           |\n      |State=Associated;   |                  |State=Activated;\
    \     |-+\n    +-|Num_Of_Addr;        |<---Deactivate ---|Num_Of_Addr;       \
    \  | |\n    | |List_Of_Addr;       |                  |List_Of_Addr;        |\
    \ |\n    | +--------------------+                  +---------------------+ |\n\
    \    |                    /|\\                     /|\\                  |\n \
    \   |                     |                       |                   |\n    +---------------------+\
    \                       +-------------------+\n     add/remove/updt addr;    \
    \                    add/remove/updt addr;\n     or update port;             \
    \                 or update port;\n           Figure 6: State Transition Example\
    \ of a TSI Instance\n                            on an External NVE\n   The Associated\
    \ state of a TSI instance on an External NVE indicates\n   that all the addresses\
    \ for that TSI have already associated with the\n   VAP of the External NVE on\
    \ a given port, e.g., on port p for a given\n   VN, but no real traffic to and\
    \ from the TSI is expected and allowed\n   to pass through.  An NVE has reserved\
    \ all the necessary resources for\n   that TSI.  An External NVE may report the\
    \ mappings of its underlay IP\n   address and the associated TSI addresses to\
    \ the NVA, and relevant\n   network nodes may save such information to their mapping\
    \ tables but\n   not their forwarding tables.  An NVE may create ACLs or filter\
    \ rules\n   based on the associated TSI addresses on that attached port p but\
    \ not\n   enable them yet.  The local tag for the VN corresponding to the TSI\n\
    \   instance should be provisioned on port p to receive packets.\n   The VM migration\
    \ event (discussed in Section 2) may cause the\n   hypervisor to send an Associate\
    \ message to the NVE connected to the\n   destination hypervisor of the migration.\
    \  A VM creation event may\n   also trigger the same scenario.\n   The Activated\
    \ state of a TSI instance on an External NVE indicates\n   that all the addresses\
    \ for that TSI are functioning correctly on a\n   given port, e.g., port p, and\
    \ traffic can be received from and sent\n   to that TSI via the NVE.  The mappings\
    \ of the NVE's underlay IP\n   address and the associated TSI addresses should\
    \ be added to the\n   forwarding table rather than the mapping table on relevant\
    \ network\n   nodes.  ACLs or filter rules based on the associated TSI addresses\
    \ on\n   the attached port p on the NVE are enabled.  The local tag for the VN\n\
    \   corresponding to the TSI instance must be provisioned on port p to\n   receive\
    \ packets.\n   The Activate message makes the state transition from Init or\n\
    \   Associated to Activated.  VM creation, VM migration, and VM\n   resumption\
    \ events (discussed in Section 2) may trigger sending the\n   Activate message\
    \ from the hypervisor to the External NVE.\n   TSI information may get updated\
    \ in either the Associated state or the\n   Activated state.  The following are\
    \ considered updates to the TSI\n   information: add or remove the associated\
    \ addresses, update the\n   current associated addresses (for example, update\
    \ the IP address for\n   a given MAC address), and update the NVE port information\
    \ based on\n   where the NVE receives messages.  Such updates do not change the\n\
    \   state of the TSI.  When any address associated with a given TSI\n   changes,\
    \ the NVE should inform the NVA to update the mapping\n   information for the\
    \ NVE's underlying address and the associated TSI\n   addresses.  The NVE should\
    \ also change its local ACLs or filter\n   settings accordingly for the relevant\
    \ addresses.  Port information\n   updates will cause the provisioning of the\
    \ local tag for the VN\n   corresponding to the TSI instance on the new port and\
    \ removal from\n   the old port.\n"
- title: 3.3.  TSI De-Associate and Deactivate
  contents:
  - "3.3.  TSI De-Associate and Deactivate\n   De-Associate and Deactivate behaviors\
    \ are conceptually the reverse of\n   Associate and Activate.\n   From the Activated\
    \ state to the Associated state, the External NVE\n   needs to make sure the resources\
    \ are still reserved but the addresses\n   associated with the TSI are not functioning.\
    \  No traffic to or from\n   the TSI is expected or allowed to pass through. \
    \ For example, the NVE\n   needs to tell the NVA to remove the relevant information\
    \ regarding\n   address mapping from the forwarding and routing tables.  ACLs\
    \ and\n   filter rules regarding the relevant addresses should be disabled.\n\
    \   From the Associated or Activated state to the Init state, the NVE\n   releases\
    \ all the resources relevant to TSI instances.  The NVE should\n   also inform\
    \ the NVA to remove the relevant entries from the mapping\n   table.  ACLs or\
    \ filter rules regarding the relevant addresses should\n   be removed.  Local\
    \ tag provisioning on the connecting port on the NVE\n   should be cleared.\n\
    \   A VM suspension event (discussed in Section 2) may cause the relevant\n  \
    \ TSI instance(s) on the NVE to transition from the Activated state to\n   the\
    \ Associated state.\n   A VM pause event normally does not affect the state of\
    \ the relevant\n   TSI instance(s) on the NVE, as the VM is expected to run again\
    \ soon.\n   A VM shutdown event will normally cause the relevant TSI instance(s)\n\
    \   on the NVE to transition to the Init state from the Activated state.\n   All\
    \ resources should be released.\n   A VM migration will cause the TSI instance\
    \ on the source NVE to leave\n   the Activated state.  When a VM migrates to another\
    \ hypervisor\n   connecting to the same NVE, i.e., the source and destination\
    \ NVE are\n   the same, the NVE should use the TSI_ID and the incoming port to\n\
    \   differentiate two TSI instances.\n   Although the triggering messages for\
    \ the state transition shown in\n   Figure 6 do not indicate the difference between\
    \ a VM\n   creation/shutdown event and a VM migration arrival/departure event,\n\
    \   the External NVE can make optimizations if it is given such\n   information.\
    \  For example, if the NVE knows that the incoming\n   Activate message is caused\
    \ by migration rather than VM creation, some\n   mechanisms may be employed or\
    \ triggered to make sure the dynamic\n   configurations or provisionings on the\
    \ destination NVE are the same\n   as those on the source NVE for the migrated\
    \ VM.  For example, an IGMP\n   query [RFC2236] can be triggered by the destination\
    \ External NVE to\n   the migrated VM so that the VM is forced to send an IGMP\
    \ report to\n   the multicast router.  The multicast router can then correctly\
    \ route\n   the multicast traffic to the new External NVE for those multicast\n\
    \   groups the VM joined before the migration.\n"
- title: 4.  Hypervisor-to-NVE Control-Plane Protocol Requirements
  contents:
  - "4.  Hypervisor-to-NVE Control-Plane Protocol Requirements\n   Req-1:   The protocol\
    \ MUST support a bridged network connecting end\n            devices to the External\
    \ NVE.\n   Req-2:   The protocol MUST support multiple end devices sharing the\n\
    \            same External NVE via the same physical port across a\n         \
    \   bridged network.\n   Req-3:   The protocol MAY support an end device using\
    \ multiple\n            External NVEs simultaneously, but only one External NVE\
    \ for\n            each VN (active-standby External NVE case for a VN).\n   Req-4:\
    \   The protocol MAY support an end device using multiple\n            External\
    \ NVEs simultaneously for the same VN (active-active\n            External NVE\
    \ case for a VN).\n   Req-5:   The protocol MUST allow the end device to initiate\
    \ a request\n            to its associated External NVE to be connected/disconnected\n\
    \            to a given VN.\n   Req-6:   The protocol MUST allow an External NVE\
    \ initiating a request\n            to its connected end devices to be disconnected\
    \ from a\n            given VN.\n   Req-7:   When a Tenant System attaches to\
    \ a VN, the protocol MUST\n            allow for an end device and its External\
    \ NVE to negotiate\n            one or more locally significant tags for carrying\
    \ traffic\n            associated with a specific VN (e.g., tags per [IEEE802.1Q]).\n\
    \   Req-8:   The protocol MUST allow an end device initiating a request\n    \
    \        to associate/de-associate and/or activate/deactivate some or\n      \
    \      all addresses of a TSI instance to a VN on an NVE port.\n   Req-9:   The\
    \ protocol MUST allow the External NVE initiating a\n            request to de-associate\
    \ and/or deactivate some or all\n            addresses of a TSI instance to a\
    \ VN on an NVE port.\n   Req-10:  The protocol MUST allow an end device initiating\
    \ a request\n            to add, remove, or update address(es) associated with\
    \ a TSI\n            instance on the External NVE.  Addresses can be expressed\
    \ in\n            different formats -- for example, MAC, IP, or IP-MAC pair.\n\
    \   Req-11:  The protocol MUST allow the External NVE and the connected\n    \
    \        end device to authenticate each other.\n   Req-12:  The protocol MUST\
    \ be able to run over Layer 2 links between\n            the end device and its\
    \ External NVE.\n   Req-13:  The protocol SHOULD support an end device that indicates\n\
    \            that an Associate or Activate request from the end device is\n  \
    \          the result of a VM hot migration event.\n"
- title: 5.  VDP Applicability and Enhancement Needs
  contents:
  - "5.  VDP Applicability and Enhancement Needs\n   The Virtual Station Interface\
    \ (VSI) Discovery and Configuration\n   Protocol (VDP) [IEEE802.1Q] can be the\
    \ control-plane protocol running\n   between the hypervisor and the External NVE.\
    \  Appendix A provides\n   informative VDP illustrations for the reader.\n   VDP\
    \ facilitates the automatic discovery and configuration of Edge\n   Virtual Bridging\
    \ (EVB) stations and EVB bridges.  An EVB station is\n   normally an end station\
    \ running multiple VMs.  In this document, it\n   is considered conceptually equivalent\
    \ to a hypervisor.  An EVB bridge\n   is conceptually equivalent to the External\
    \ NVE.\n   VDP is able to pre-associate/associate/de-associate a VSI on an EVB\n\
    \   station with a port on the EVB bridge.  In the context of this\n   document,\
    \ a VSI is conceptually approximate to a virtual port by\n   which a VM connects\
    \ to the hypervisor.  The EVB station and the EVB\n   bridge can reach agreement\
    \ on VLAN ID(s) assigned to a VSI via a VDP\n   message exchange.  Other configuration\
    \ parameters can be exchanged\n   via VDP as well.  VDP is carried over the Edge\
    \ Control Protocol (ECP)\n   [IEEE802.1Q], which provides reliable transportation\
    \ over a Layer 2\n   network.\n   VDP needs some extensions to fulfill the requirements\
    \ listed in\n   Section 4 of this document.  Table 1 shows the needed extensions\n\
    \   and/or clarifications in the NVO3 context.\n   +------+-----------+-----------------------------------------------+\n\
    \   | Req  | Supported |                    Remarks                    |\n   |\
    \      | by VDP?   |                                               |\n   +------+-----------+-----------------------------------------------+\n\
    \   | Req-1|           |                                               |\n   +------+\
    \           |Needs extension.  Must be able to send to a    |\n   | Req-2|   \
    \        |specific unicast MAC, and should be able to    |\n   +------+ Partially\
    \ |send to a non-reserved well-known multicast    |\n   | Req-3|           |address\
    \ other than the nearest customer bridge |\n   +------+           |address.  \
    \                                     |\n   | Req-4|           |             \
    \                                  |\n   +------+-----------+-----------------------------------------------+\n\
    \   | Req-5| Yes       |The VN is indicated by GroupID.                |\n   +------+-----------+-----------------------------------------------+\n\
    \   | Req-6| Yes       |The bridge sends a De-Associate.               |\n   +------+-----------+------------------------+----------------------+\n\
    \   |      |           |VID==NULL in the request.  The bridge returns  |\n   |\
    \      |           |the assigned VLAN ID (VID) value in the        |\n   | Req-7|\
    \ Yes       |response.  GroupID, which is optionally present|\n   |      |   \
    \        |in the request, is equivalent to the VN ID in  |\n   |      |      \
    \     |the context of NVO3.  Multiple VLANs per group |\n   |      |         \
    \  |are allowed.                                   |\n   +------+-----------+------------------------+----------------------+\n\
    \   |      |           |     Requirements       |    VDP Equivalent    |\n   |\
    \      |           +------------------------+----------------------+\n   | Req-8|\
    \ Partially | Associate/De-Associate |Pre-Assoc/De-Associate|\n   |      |   \
    \        | Activate/Deactivate    |Associate/De-Associate|\n   |      |      \
    \     +------------------------+----------------------|\n   |      |         \
    \  |Needs extension to allow Associate->Pre-Assoc. |\n   +------+-----------+------------------------+----------------------+\n\
    \   | Req-9| Yes       |The VDP bridge initiates a De-Associate.       |\n   +------+-----------+-----------------------------------------------+\n\
    \   |Req-10| Partially |Needs extension for an IPv4/IPv6 address.      |\n   |\
    \      |           |Add a new \"filter information format\" type.    |\n   +------+-----------+-----------------------------------------------+\n\
    \   |      |           |An out-of-band mechanism is preferred, e.g.,   |\n   |\
    \      |           |MACsec or 802.1X.  Implicit authentication     |\n   |Req-11|\
    \ No        |based on control of physical connectivity      |\n   |      |   \
    \        |exists in VDP when the External NVE connects to|\n   |      |      \
    \     |the end device directly and is reachable with  |\n   |      |         \
    \  |the nearest customer bridge address.           |\n   +------+-----------+-----------------------------------------------+\n\
    \   |Req-12| Yes       |VDP naturally runs on the Layer 2 protocol.    |\n   +------+-----------+-----------------------------------------------+\n\
    \   |      |           |A migration event may cause the M-bit to be set|\n   |\
    \      |           |to 1 in the VDP request to the migration       |\n   |   \
    \   |           |destination hypervisor and the S-bit to be set |\n   |      |\
    \           |to 1 in the VDP request to the migration source|\n   |      |   \
    \        |hypervisor.  However, a setting of M-bit = 0 or|\n   |Req-13| Partially\
    \ |S-bit = 0 can indicate that no information is  |\n   |      |           |available\
    \ regarding migration or that the      |\n   |      |           |events in question\
    \ are not caused by migration.|\n   |      |           |To fully meet the requirement,\
    \ this ambiguity  |\n   |      |           |would need to be fixed so that migration\
    \ or no |\n   |      |           |migration could be safely inferred from the\
    \    |\n   |      |           |M-bit or S-bit settings.                      \
    \ |\n   +------+-----------+-----------------------------------------------+\n\
    \    Table 1: Comparison of Split-NVE Requirements and VDP Capabilities\n   By\
    \ simply adding the ability to carry Layer 3 addresses as per\n   Req-10, VDP\
    \ can provide most of the hypervisor-to-NVE control-plane\n   functionality required.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   External NVEs must ensure that only properly\
    \ authorized Tenant\n   Systems are allowed to join and become a part of any particular\
    \ VN.\n   In some cases, the tNVE may want to connect to the nNVE for\n   provisioning\
    \ purposes.  This may require that the tNVE authenticate\n   the nNVE in addition\
    \ to the nNVE authenticating the tNVE.  If a\n   secure channel is required between\
    \ the tNVE and the nNVE to carry the\n   encrypted Split-NVE control-plane protocol,\
    \ then existing mechanisms\n   such as MACsec [IEEE802.1AE] can be used.  In some\
    \ deployments,\n   authentication may be implicit, based on control of physical\n\
    \   connectivity, e.g., if the nNVE is located in the bridge that is\n   directly\
    \ connected to the server that contains the tNVE.  The use of\n   the \"nearest\
    \ customer bridge address\" in VDP [IEEE802.1Q] is an\n   example of where this\
    \ sort of implicit authentication is possible,\n   although explicit authentication\
    \ also applies in that case.\n   As the control-plane protocol results in configuration\
    \ changes for\n   both the tNVE and the nNVE, tNVE and nNVE implementations should\
    \ log\n   all state changes, including those described in Section 3.\n   Implementations\
    \ should also log significant protocol events, such as\n   the establishment or\
    \ loss of control-plane protocol connectivity\n   between the tNVE and the nNVE,\
    \ as well as authentication results.\n   In addition, External NVEs will need\
    \ appropriate mechanisms to ensure\n   that any hypervisor wishing to use the\
    \ services of an NVE is properly\n   authorized to do so.  One design point is\
    \ whether the hypervisor\n   should\n   1.  supply the External NVE with necessary\
    \ information (e.g., VM\n       addresses, VN information, or other parameters)\
    \ that the\n       External NVE uses directly or\n   2.  only supply a VN ID and\
    \ an identifier for the associated VM\n       (e.g., its MAC address), with the\
    \ External NVE using that\n       information to obtain the information needed\
    \ to validate the\n       hypervisor-provided parameters or obtain related parameters\
    \ in a\n       secure manner.\n   The former approach can be used in a trusted\
    \ environment so that the\n   External NVE can directly use all the information\
    \ retrieved from the\n   hypervisor for local configuration.  It relieves the\
    \ External NVE\n   side of effort related to information retrieval and/or validation.\n\
    \   The latter approach gives more reliable information, as the\n   External NVE\
    \ needs to retrieve it from a management-system database.\n   In particular, some\
    \ network-related parameters, such as VLAN IDs, can\n   be passed back to the\
    \ hypervisor to be used as a form of provisioning\n   that is more authoritative.\
    \  However, in certain cases it is\n   difficult or inefficient for an External\
    \ NVE to be granted rights to\n   access or query information on those management\
    \ systems.  The\n   External NVE then has to obtain the information from the hypervisor.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [IEEE802.1Q]\n              IEEE, \"IEEE Standard\
    \ for Local and metropolitan area\n              networks--Bridges and Bridged\
    \ Networks\", IEEE Standard\n              802.1Q-2014, DOI 10.1109/IEEESTD.2014.6991462.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC7365]\
    \  Lasserre, M., Balus, F., Morin, T., Bitar, N., and Y.\n              Rekhter,\
    \ \"Framework for Data Center (DC) Network\n              Virtualization\", RFC\
    \ 7365, DOI 10.17487/RFC7365,\n              October 2014, <https://www.rfc-editor.org/info/rfc7365>.\n\
    \   [RFC7666]  Asai, H., MacFaden, M., Schoenwaelder, J., Shima, K., and\n   \
    \           T. Tsou, \"Management Information Base for Virtual Machines\n    \
    \          Controlled by a Hypervisor\", RFC 7666,\n              DOI 10.17487/RFC7666,\
    \ October 2015,\n              <https://www.rfc-editor.org/info/rfc7666>.\n  \
    \ [RFC8014]  Black, D., Hudson, J., Kreeger, L., Lasserre, M., and T.\n      \
    \        Narten, \"An Architecture for Data-Center Network\n              Virtualization\
    \ over Layer 3 (NVO3)\", RFC 8014,\n              DOI 10.17487/RFC8014, December\
    \ 2016,\n              <https://www.rfc-editor.org/info/rfc8014>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n              RFC 2119\
    \ Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174, May 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [IEEE802.1AE]\n              IEEE, \"IEEE Standard\
    \ for Local and Metropolitan Area\n              Networks: Media Access Control\
    \ (MAC) Security\",\n              IEEE Standard 802.1AE-2006,\n             \
    \ DOI 10.1109/IEEESTD.2006.245590.\n   [NVO3-HYPERVISOR-NVE-CP]\n            \
    \  Kreeger, L., Narten, T., and D. Black, \"Network\n              Virtualization\
    \ Hypervisor-to-NVE Overlay Control Protocol\n              Requirements\", Work\
    \ in Progress, draft-kreeger-nvo3-\n              hypervisor-nve-cp-01, February\
    \ 2013.\n   [NVO3-TES-NVE]\n              Yingjie, G. and L. Yizhou, \"The mechanism\
    \ and signalling\n              between TES and NVE\", Work in Progress, draft-gu-nvo3-tes-\n\
    \              nve-mechanism-01, October 2012.\n   [NVO3-VM-NVE]\n           \
    \   Kompella, K., Rekhter, Y., Morin, T., and D. Black,\n              \"Signaling\
    \ Virtual Machine Activity to the Network\n              Virtualization Edge\"\
    , Work in Progress, draft-kompella-\n              nvo3-server2nve-02, April 2013.\n\
    \   [RFC2236]  Fenner, W., \"Internet Group Management Protocol,\n           \
    \   Version 2\", RFC 2236, DOI 10.17487/RFC2236, November 1997,\n            \
    \  <https://www.rfc-editor.org/info/rfc2236>.\n   [RFC4122]  Leach, P., Mealling,\
    \ M., and R. Salz, \"A Universally\n              Unique IDentifier (UUID) URN\
    \ Namespace\", RFC 4122,\n              DOI 10.17487/RFC4122, July 2005,\n   \
    \           <https://www.rfc-editor.org/info/rfc4122>.\n   [RFC7364]  Narten,\
    \ T., Ed., Gray, E., Ed., Black, D., Fang, L.,\n              Kreeger, L., and\
    \ M. Napierala, \"Problem Statement:\n              Overlays for Network Virtualization\"\
    , RFC 7364,\n              DOI 10.17487/RFC7364, October 2014,\n             \
    \ <https://www.rfc-editor.org/info/rfc7364>.\n"
- title: Appendix A.  VDP Illustrations (per IEEE 802.1Q) (for Information Only)
  contents:
  - "Appendix A.  VDP Illustrations (per IEEE 802.1Q) (for Information Only)\n   VDP\
    \ (the VSI Discovery and Discovery and Configuration Protocol; see\n   Clause\
    \ 41 of [IEEE802.1Q]) can be considered as a controlling\n   protocol running\
    \ between the hypervisor and the external bridge.  The\n   VDP association TLV\
    \ structure is formatted as shown in Figure 7.\n   +--------+--------+------+-----+--------+------+------+------+------+\n\
    \   |TLV Type|TLV Info|Status|VSI  |VSI Type|VSI ID|VSI ID|Filter|Filter|\n  \
    \ |        |String  |      |Type |Version |Format|      |Info  |Info  |\n   |\
    \        |Length  |      |ID   |        |      |      |Format|      |\n   +--------+--------+------+-----+--------+------+------+------+------+\n\
    \   |                 |      |<--VSI Type and instance--->|<--Filter--->|\n  \
    \ |                 |      |<-------------VSI attributes------------->|\n   |<--TLV\
    \ header--->|<-----------TLV information string ------------->|\n            \
    \           Figure 7: VDP Association TLV\n   There are basically four TLV types.\n\
    \   1.  Pre-Associate: The Pre-Associate is used to Pre-Associate a VSI\n    \
    \   instance with a bridge port.  The bridge validates the request\n       and\
    \ returns a failure status in the case of errors.  A successful\n       Pre-Associate\
    \ does not imply that the indicated VSI Type or\n       provisioning will be applied\
    \ to any traffic flowing through the\n       VSI.  By allowing the bridge to obtain\
    \ the VSI Type prior to an\n       association, the Pre-Associate enables faster\
    \ response to an\n       Associate.\n   2.  Pre-Associate with Resource Reservation:\
    \ The Pre-Associate with\n       Resource Reservation involves the same steps\
    \ as those for the\n       Pre-Associate, but on success it also reserves resources\
    \ in the\n       bridge to prepare for a subsequent Associate request.\n   3.\
    \  Associate: The Associate request creates and activates an\n       association\
    \ between a VSI instance and a bridge port.  A bridge\n       allocates any required\
    \ bridge resources for the referenced VSI.\n       The bridge activates the configuration\
    \ for the VSI Type ID.  This\n       association is then applied to the traffic\
    \ flow to/from the VSI\n       instance.\n   4.  De-Associate: The De-Associate\
    \ is used to remove an association\n       between a VSI instance and a bridge\
    \ port.  Pre-associated and\n       associated VSIs can be de-associated.  The\
    \ De-Associate releases\n       any resources that were reserved as a result of\
    \ prior Associate\n       or Pre-Associate operations for that VSI instance.\n\
    \   The De-Associate can be initiated by either side, and the other types\n  \
    \ can only be initiated by the server side.\n   Some important flag values in\
    \ the VDP Status field are as follows:\n   1.  M-bit (Bit 5): M-bit = 1: indicates\
    \ that the user of the VSI\n       (e.g., the VM) is migrating.  M-bit = 0: no\
    \ indication of whether\n       the VSI user is migrating.  The M-bit is used\
    \ as an indicator\n       relative to the VSI to which the user is migrating.\n\
    \   2.  S-bit (Bit 6): S-bit = 1: indicates that the VSI user (e.g., the\n   \
    \    VM) is suspended.  S-bit = 0: no indication of whether the VSI\n       user\
    \ is suspended.  A keep-alive Associate request with S-bit = 1\n       can be\
    \ sent when the VSI user is suspended.  The S-bit is used as\n       an indicator\
    \ relative to the VSI from which the user is\n       migrating.\n   The filter\
    \ information format currently defines four types.\n   Information for each of\
    \ these types is shown in detail in Figures 8\n   through 11.  \"PCP\" stands\
    \ for Priority Code Point [IEEE802.1Q].  The\n   PCP value, if specified, is used\
    \ by the EVB station as the default\n   PCP value associated with the VSI and\
    \ VID.  The filter information\n   contains a PCP Significant (PS) bit associated\
    \ with each PCP field,\n   indicating whether the PCP field carries a PCP value\
    \ (binary 1) or\n   does not carry a PCP value (binary 0).\n                 +----------+-------+--------+--0------+\n\
    \                 | # of     | PS    | PCP    | VID     |\n                 |entries\
    \   |(1 bit)|(3 bits)|(12 bits)|\n                 |(2 octets)|       |      \
    \  |         |\n                 +----------+-------+--------+---------+\n   \
    \                         |<---Repeated per entry--->|\n                  Figure\
    \ 8: VID Filter Information Format\n          +----------+--------------+-------+--------+---------+\n\
    \          | # of     |  MAC address | PS    | PCP    | VID     |\n          |entries\
    \   |  (6 octets)  |(1 bit)|(3 bits)|(12 bits)|\n          |(2 octets)|      \
    \        |       |        |         |\n          +----------+--------------+-------+--------+---------+\n\
    \                     |<----------Repeated per entry----------->|\n          \
    \      Figure 9: MAC/VID Filter Information Format\n         +----------+--------------+-------+--------+---------+\n\
    \         | # of     |  GroupID     | PS    | PCP    | VID     |\n         |entries\
    \   |  (4 octets)  |(1 bit)|(3 bits)|(12 bits)|\n         |(2 octets)|       \
    \       |       |        |         |\n         +----------+--------------+-------+--------+---------+\n\
    \                    |<----------Repeated per entry----------->|\n           \
    \  Figure 10: GroupID/VID Filter Information Format\n     +----------+----------+-------------+-------+--------+---------+\n\
    \     | # of     | GroupID  | MAC address | PS    | PCP    | VID     |\n     |entries\
    \   |(4 octets)| (6 octets)  |(1 bit)|(3 bits)|(12 bits)|\n     |(2 octets)| \
    \         |             |       |        |         |\n     +----------+----------+-------------+-------+--------+---------+\n\
    \                |<---------------Repeated per entry---------------->|\n     \
    \      Figure 11: GroupID/MAC/VID Filter Information Format\n   The null VID can\
    \ be used in the VDP Request sent from the station to\n   the external bridge.\
    \  The null VID indicates that the set of VID\n   values associated with the VSI\
    \ is expected to be supplied by the\n   bridge.  The set of VID values is returned\
    \ to the station via the VDP\n   Response.  The returned VID values can be locally\
    \ significant values.\n   When GroupID is used, it is equivalent to the VN ID\
    \ in NVO3.  GroupID\n   will be provided by the station to the bridge.  The bridge\
    \ maps\n   GroupID to a locally significant VLAN ID.\n   The VSI ID in the VDP\
    \ association TLV that identifies a VM can be in\n   one of the following formats:\
    \ IPv4 address, IPv6 address, MAC\n   address, Universally Unique Identifier (UUID)\
    \ [RFC4122], or locally\n   defined.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document was initiated based on the merger of the following\n\
    \   documents: [NVO3-HYPERVISOR-NVE-CP], [NVO3-TES-NVE], and\n   [NVO3-VM-NVE].\
    \  Thanks to all the coauthors and contributing members\n   of those documents.\n\
    \   The authors would like to specially thank Lucy Yong and Jon Hudson\n   for\
    \ their generous help in improving this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Yizhou Li\n   Huawei Technologies\n   101 Software Avenue\n\
    \   Nanjing  210012\n   China\n   Phone: +86-25-56625409\n   Email: liyizhou@huawei.com\n\
    \   Donald Eastlake 3rd\n   Huawei R&D USA\n   155 Beaver Street\n   Milford,\
    \ MA  01757\n   United States of America\n   Phone: +1-508-333-2270\n   Email:\
    \ d3e3e3@gmail.com\n   Lawrence Kreeger\n   Arrcus, Inc.\n   Email: lkreeger@gmail.com\n\
    \   Thomas Narten\n   IBM\n   Email: narten@us.ibm.com\n   David Black\n   Dell\
    \ EMC\n   176 South Street\n   Hopkinton, MA  01748\n   United States of America\n\
    \   Email: david.black@dell.com\n"
