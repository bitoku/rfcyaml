- contents:
  - '               IMAP4 Access Control List (ACL) Extension

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The Access Control List (ACL) extension (RFC 2086) of the Internet\n
    \  Message Access Protocol (IMAP) permits mailbox access control lists\n   to
    be retrieved and manipulated through the IMAP protocol.\n   This document is a
    revision of RFC 2086.  It defines several new\n   access control rights and clarifies
    which rights are required for\n   different IMAP commands.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction and Overview .......................................3\n
    \     1.1. Conventions Used in This Document ..........................3\n   2.
    Access Control ..................................................3\n      2.1.
    Standard Rights ............................................5\n           2.1.1.
    Obsolete Rights .....................................5\n      2.2. Rights Defined
    in RFC 2086 .................................8\n   3. Access control management
    commands and responses ................8\n      3.1. SETACL Command .............................................8\n
    \     3.2. DELETEACL Command ..........................................9\n      3.3.
    GETACL Command ............................................10\n      3.4. LISTRIGHTS
    Command ........................................10\n      3.5. MYRIGHTS Command
    ..........................................11\n      3.6. ACL Response ..............................................11\n
    \     3.7. LISTRIGHTS Response .......................................12\n      3.8.
    MYRIGHTS Response .........................................12\n   4. Rights Required
    to Perform Different IMAP4rev1 Commands ........12\n   5. Other Considerations
    ...........................................17\n      5.1. Additional Requirements
    and Implementation Notes ..........17\n           5.1.1. Servers ............................................17\n
    \          5.1.2. Clients ............................................18\n      5.2.
    Mapping of ACL Rights to READ-WRITE and READ-ONLY\n           Response Codes ............................................19\n
    \  6. Security Considerations ........................................20\n   7.
    Formal Syntax ..................................................21\n   8. IANA
    Considerations ............................................22\n   9. Internationalization
    Considerations ............................22\n   Appendix A. Changes since RFC
    2086 ................................23\n   Appendix B. Compatibility with RFC
    2086 ...........................24\n   Appendix C. Known Deficiencies ....................................24\n
    \  Appendix D. Acknowledgements ......................................25\n   Normative
    References ..............................................25\n   Informative References
    ............................................25\n"
  title: Table of Contents
- contents:
  - "1.  Introduction and Overview\n   The ACL (Access Control List) extension of
    the Internet Message\n   Access Protocol [IMAP4] permits mailbox access control
    lists to be\n   retrieved and manipulated through the IMAP protocol.\n   This
    document is a revision of RFC 2086 [RFC2086].  It tries to\n   clarify different
    ambiguities in RFC 2086, in particular, the use of\n   UTF-8 [UTF-8] in access
    identifiers, which rights are required for\n   different IMAP4 commands, and how
    READ-WRITE/READ-ONLY response codes\n   are related to ACL.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   In examples, \"C:\" and \"S:\"
      indicate lines sent by the client and\n   server respectively.\n   In all examples
      \"/\" character is used as hierarchy separator.\n   The key words \"MUST\",
      \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD
      NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to
      be interpreted as described in RFC 2119 [KEYWORDS].\n   The phrase \"ACL server\"
      is just a shortcut for saying \"IMAP server\n   that supports ACL extension
      as defined in this document\".\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction and Overview
- contents:
  - "2.  Access Control\n   The ACL extension is present in any IMAP4 implementation
    that returns\n   \"ACL\" as one of the supported capabilities to the CAPABILITY
    command.\n   A server implementation conformant to this document MUST also return\n
    \  rights (see below) not defined in Section 2.2 in the \"RIGHTS=\"\n   capability.\n
    \  An access control list is a set of <access identifier,rights> pairs.\n   An
    ACL applies to a mailbox name.\n   Access identifier (or just \"identifier\")
    is a UTF-8 [UTF-8] string.\n   The identifier \"anyone\" is reserved to refer
    to the universal\n   identity (all authentications, including anonymous).  All
    user name\n   strings accepted by the LOGIN or AUTHENTICATE commands to\n   authenticate
    to the IMAP server are reserved as identifiers for the\n   corresponding users.
    \ Identifiers starting with a dash (\"-\") are\n   reserved for \"negative rights\",
    described below.  All other\n   identifier strings are interpreted in an implementation-defined\n
    \  manner.\n   Rights is a string listing a (possibly empty) set of alphanumeric\n
    \  characters, each character listing a set of operations that is being\n   controlled.
    \ Lowercase letters are reserved for \"standard\" rights,\n   listed in Section
    2.1.  (Note that for compatibility with deployed\n   clients and servers uppercase
    rights are not allowed.)  The set of\n   standard rights can only be extended
    by a standards-track document.\n   Digits are reserved for implementation- or
    site-defined rights.\n   An implementation MAY tie rights together or MAY force
    rights to\n   always or never be granted to particular identifiers.  For example,\n
    \  in an implementation that uses UNIX mode bits, the rights \"swite\" are\n   tied,
    the \"a\" right is always granted to the owner of a mailbox and\n   is never granted
    to another user.  If rights are tied in an\n   implementation, the implementation
    must be conservative in granting\n   rights in response to SETACL commands--unless
    all rights in a tied\n   set are specified, none of that set should be included
    in the ACL\n   entry for that identifier.  A client can discover the set of rights\n
    \  that may be granted to a given identifier in the ACL for a given\n   mailbox
    name by using the LISTRIGHTS command.\n   It is possible for multiple identifiers
    in an access control list to\n   apply to a given user.  For example, an ACL may
    include rights to be\n   granted to the identifier matching the user, one or more\n
    \  implementation-defined identifiers matching groups that include the\n   user,
    and/or the identifier \"anyone\".  How these rights are combined\n   to determine
    the user's access is implementation defined.  An\n   implementation may choose,
    for example, to use the union of the\n   rights granted to the applicable identifiers.
    \ An implementation may\n   instead choose, for example, to use only those rights
    granted to the\n   most specific identifier present in the ACL.  A client can
    determine\n   the set of rights granted to the logged-in user for a given mailbox\n
    \  name by using the MYRIGHTS command.\n   When an identifier in an ACL starts
    with a dash (\"-\"), that indicates\n   that associated rights are to be removed
    from the identifier prefixed\n   by the dash.  This is referred to as a \"negative
    right\".  This\n   differs from DELETEACL in that a negative right is added to
    the ACL\n   and is a part of the calculation of the rights.\n   Let's assume that
    an identifier \"fred\" refers to a user with login\n   \"fred\".  If the identifier
    \"-fred\" is granted the \"w\" right, that\n   indicates that the \"w\" right
    is to be removed from users matching the\n   identifier \"fred\", even though
    the user \"fred\" might have the \"w\"\n   right as a consequence of some other
    identifier in the ACL.  A\n   DELETEACL of \"fred\" simply deletes the identifier
    \"fred\" from the\n   ACL; it does not affect any rights that the user \"fred\"
    may get from\n   another entry in the ACL, in particular it doesn't affect rights\n
    \  granted to the identifier \"-fred\".\n   Server implementations are not required
    to support \"negative right\"\n   identifiers.\n"
  - contents:
    - "2.1.  Standard Rights\n   The currently defined standard rights are (note that
      the list below\n   doesn't list all commands that use a particular right):\n
      \  l - lookup (mailbox is visible to LIST/LSUB commands, SUBSCRIBE\n       mailbox)\n
      \  r - read (SELECT the mailbox, perform STATUS)\n   s - keep seen/unseen information
      across sessions (set or clear\n       \\SEEN flag via STORE, also set \\SEEN
      during APPEND/COPY/\n       FETCH BODY[...])\n   w - write (set or clear flags
      other than \\SEEN and \\DELETED via\n       STORE, also set them during APPEND/COPY)\n
      \  i - insert (perform APPEND, COPY into mailbox)\n   p - post (send mail to
      submission address for mailbox,\n       not enforced by IMAP4 itself)\n   k
      - create mailboxes (CREATE new sub-mailboxes in any\n       implementation-defined
      hierarchy, parent mailbox for the new\n       mailbox name in RENAME)\n   x
      - delete mailbox (DELETE mailbox, old mailbox name in RENAME)\n   t - delete
      messages (set or clear \\DELETED flag via STORE, set\n       \\DELETED flag
      during APPEND/COPY)\n   e - perform EXPUNGE and expunge as a part of CLOSE\n
      \  a - administer (perform SETACL/DELETEACL/GETACL/LISTRIGHTS)\n"
    - contents:
      - "2.1.1.  Obsolete Rights\n   Due to ambiguity in RFC 2086, some existing RFC
        2086 server\n   implementations use the \"c\" right to control the DELETE
        command.\n   Others chose to use the \"d\" right to control the DELETE command.
        \ For\n   the former group, let's define the \"create\" right as union of
        the \"k\"\n   and \"x\" rights, and the \"delete\" right as union of the \"e\"
        and \"t\"\n   rights.  For the latter group, let's define the \"create\" rights
        as a\n   synonym to the \"k\" right, and the \"delete\" right as union of
        the \"e\",\n   \"t\", and \"x\" rights.\n   For compatibility with RFC 2086,
        this section defines two virtual\n   rights \"d\" and \"c\".\n   If a client
        includes the \"d\" right in a rights list, then it MUST be\n   treated as
        if the client had included every member of the \"delete\"\n   right.  (It
        is not an error for a client to specify both the \"d\"\n   right and one or
        more members of the \"delete\" right, but the effect\n   is no different than
        if just the \"d\" right or all members of the\n   \"delete\" right had been
        specified.)\n   When any of the \"delete\" member rights is set in a list
        of rights,\n   the server MUST also include the \"d\" right when returning
        the list in\n   a MYRIGHTS or ACL response.  This is to enable older clients\n
        \  conforming to RFC 2086 to work with newer servers. (*)\n   Example:    C:
        A001 SeTacl INBOX/Drafts David lrswida\n               S: A001 OK Setacl complete\n
        \  The client has specified the \"d\" right in the SETACL command above\n
        \  and it expands to \"et\" on the server:\n               C: A002 getacl
        INBOX/Drafts\n               S: * ACL INBOX Fred rwipslxcetda David lrswideta\n
        \              S: A002 OK Getacl complete\n   If the identifier specified
        in the LISTRIGHTS command can be granted\n   any of the \"delete\" member
        rights on a mailbox, then the server MUST\n   include the \"d\" right in the
        corresponding LISTRIGHTS response. (*)\n   If the member rights aren't tied
        to non-member rights, then the \"d\"\n   right is returned by itself in the
        LISTRIGHTS response.  If any of\n   the member rights needs to be tied to
        one (or more) non-member right,\n   then the \"d\" right and all of the member
        rights need to be tied to\n   the same non-member right(s) (**).\n   If a
        client includes the \"c\" right in a rights list, then it MUST be\n   treated
        as if the client had included every member of the \"create\"\n   right.  (It
        is not an error for a client to specify both the \"c\"\n   right and one or
        more members of the \"create\" right, but the effect\n   is no different than
        if just the \"c\" right or all members of the\n   \"create\" right had been
        specified.)\n   When any of the \"create\" member rights is set in a list
        of rights,\n   the server MUST also include the \"c\" right when returning
        the list in\n   a MYRIGHTS or ACL response.  This is to enable older clients\n
        \  conforming to RFC 2086 to work with newer servers. (*)\n   Example:    C:
        A003 Setacl INBOX/Drafts Byron lrswikda\n               S: A001 OK Setacl
        complete\n               C: A002 getAcl INBOX/Drafts\n               S: *
        ACL INBOX Fred rwipslxcetda Byron lrswikcdeta\n               S: A002 OK Getacl
        complete\n   The client has specified the \"d\" right in the SETACL command
        above\n   and it expands to \"et\" on the server: As the client has specified
        the\n   \"k\" right (which is a member of the \"c\" right), the server also\n
        \  returns the \"c\" right.\n   If the identifier specified in the LISTRIGHTS
        command can be granted\n   any of the \"create\" member rights on a mailbox,
        then the server MUST\n   include the \"c\" right in the corresponding LISTRIGHTS
        response. (*)\n   If the member rights aren't tied to non-member rights, then
        the \"c\"\n   right is returned by itself in the LISTRIGHTS response.  If
        any of\n   the member rights needs to be tied to one (or more) non-member
        right,\n   then the \"c\" right and all of the member rights need to be tied
        to\n   the same non-member right(s) (**).\n   Example: The server that ties
        the rights as follows:\n               lr s w i p k x t\n            and c=k\n
        \           will return:\n               S: * LISTRIGHTS archive/imap anyone
        \"\"\n                  lr s w i p k x t c d\n   Example: The server that
        ties the rights as follows:\n               lr s w i p k xte\n            and
        c=k\n            will return:\n               S: * LISTRIGHTS archive/imap
        anyone \"\"\n                  lr s w i p k xte c d\n   Example: The server
        that ties the rights as follows:\n               lr s w i p k x te\n            and
        c=k\n            will return:\n               S: * LISTRIGHTS archive/imap
        anyone \"\"\n                  lr s w i p k c x te d\n   Example: The server
        that ties the rights as follows:\n               lr swte i p k x\n            and
        c=kx\n            will return:\n               S: * LISTRIGHTS archive/imap
        anyone \"\"\n                  lr swted i p k x c\n   (*)  Clients conforming
        to this document MUST ignore the virtual \"d\"\n        and \"c\" rights in
        MYRIGHTS, ACL, and LISTRIGHTS responses.\n   (**) The IMAPEXT Working Group
        has debated this issue in great length\n        and after reviewing existing
        ACL implementations concluded that\n        this is a reasonable restriction.\n"
      title: 2.1.1.  Obsolete Rights
    title: 2.1.  Standard Rights
  - contents:
    - "2.2.  Rights Defined in RFC 2086\n   The \"RIGHTS=\" capability MUST NOT include
      any of the rights defined\n   in RFC 2086: \"l\", \"r\", \"s\", \"w\", \"i\",
      \"p\", \"a\", \"c\", \"d\", and the\n   digits (\"0\" .. \"9\").\n"
    title: 2.2.  Rights Defined in RFC 2086
  title: 2.  Access Control
- contents:
  - "3.  Access control management commands and responses\n   Servers, when processing
    a command that has an identifier as a\n   parameter (i.e., any of SETACL, DELETEACL,
    and LISTRIGHTS commands),\n   SHOULD first prepare the received identifier using
    \"SASLprep\" profile\n   [SASLprep] of the \"stringprep\" algorithm [Stringprep].
    \ If the\n   preparation of the identifier fails or results in an empty string,\n
    \  the server MUST refuse to perform the command with a BAD response.\n   Note
    that Section 6 recommends additional identifier's verification\n   steps.\n"
  - contents:
    - "3.1.  SETACL Command\n   Arguments:  mailbox name\n               identifier\n
      \              access right modification\n   Data:       no specific data for
      this command\n   Result:     OK - setacl completed\n               NO - setacl
      failure: can't set acl\n               BAD - arguments invalid\n   The SETACL
      command changes the access control list on the specified\n   mailbox so that
      the specified identifier is granted permissions as\n   specified in the third
      argument.\n   The third argument is a string containing an optional plus (\"+\")
      or\n   minus (\"-\") prefix, followed by zero or more rights characters.  If\n
      \  the string starts with a plus, the following rights are added to any\n   existing
      rights for the identifier.  If the string starts with a\n   minus, the following
      rights are removed from any existing rights for\n   the identifier.  If the
      string does not start with a plus or minus,\n   the rights replace any existing
      rights for the identifier.\n   Note that an unrecognized right MUST cause the
      command to return the\n   BAD response.  In particular, the server MUST NOT
      silently ignore\n   unrecognized rights.\n   Example:    C: A001 GETACL INBOX/Drafts\n
      \              S: * ACL INBOX/Drafts Fred rwipslxetad Chris lrswi\n               S:
      A001 OK Getacl complete\n               C: A002 SETACL INBOX/Drafts Chris +cda\n
      \              S: A002 OK Setacl complete\n               C: A003 GETACL INBOX/Drafts\n
      \              S: * ACL INBOX/Drafts Fred rwipslxetad Chris lrswicdakxet\n               S:
      A003 OK Getacl complete\n               C: A035 SETACL INBOX/Drafts John lrQswicda\n
      \              S: A035 BAD Uppercase rights are not allowed\n               C:
      A036 SETACL INBOX/Drafts John lrqswicda\n               S: A036 BAD The q right
      is not supported\n"
    title: 3.1.  SETACL Command
  - contents:
    - "3.2.  DELETEACL Command\n   Arguments:  mailbox name\n               identifier\n
      \  Data:       no specific data for this command\n   Result:     OK - deleteacl
      completed\n               NO - deleteacl failure: can't delete acl\n              BAD
      - arguments invalid\n   The DELETEACL command removes any <identifier,rights>
      pair for the\n   specified identifier from the access control list for the specified\n
      \  mailbox.\n   Example:    C: B001 getacl INBOX\n               S: * ACL INBOX
      Fred rwipslxetad -Fred wetd $team w\n               S: B001 OK Getacl complete\n
      \              C: B002 DeleteAcl INBOX Fred\n               S: B002 OK Deleteacl
      complete\n               C: B003 GETACL INBOX\n               S: * ACL INBOX
      -Fred wetd $team w\n               S: B003 OK Getacl complete\n"
    title: 3.2.  DELETEACL Command
  - contents:
    - "3.3.  GETACL Command\n   Arguments:  mailbox name\n   Data:       untagged
      responses: ACL\n   Result:     OK - getacl completed\n               NO - getacl
      failure: can't get acl\n              BAD - arguments invalid\n   The GETACL
      command returns the access control list for mailbox in an\n   untagged ACL response.\n
      \  Some implementations MAY permit multiple forms of an identifier to\n   reference
      the same IMAP account.  Usually, such implementations will\n   have a canonical
      form that is stored internally.  An ACL response\n   caused by a GETACL command
      MAY include a canonicalized form of the\n   identifier that might be different
      from the one used in the\n   corresponding SETACL command.\n   Example:    C:
      A002 GETACL INBOX\n               S: * ACL INBOX Fred rwipsldexta\n               S:
      A002 OK Getacl complete\n"
    title: 3.3.  GETACL Command
  - contents:
    - "3.4.  LISTRIGHTS Command\n   Arguments:  mailbox name\n               identifier\n
      \  Data:       untagged responses: LISTRIGHTS\n   Result:     OK - listrights
      completed\n               NO - listrights failure: can't get rights list\n               BAD
      - arguments invalid\n   The LISTRIGHTS command takes a mailbox name and an identifier
      and\n   returns information about what rights can be granted to the\n   identifier
      in the ACL for the mailbox.\n   Some implementations MAY permit multiple forms
      of an identifier to\n   reference the same IMAP account.  Usually, such implementations
      will\n   have a canonical form that is stored internally.  A LISTRIGHTS\n   response
      caused by a LISTRIGHTS command MUST always return the same\n   form of an identifier
      as specified by the client.  This is to allow\n   the client to correlate the
      response with the command.\n   Example:    C: a001 LISTRIGHTS ~/Mail/saved smith\n
      \              S: * LISTRIGHTS ~/Mail/saved smith la r swicdkxte\n               S:
      a001 OK Listrights completed\n   Example:    C: a005 listrights archive/imap
      anyone\n               S: * LISTRIGHTS archive.imap anyone \"\"\n                  l
      r s w i p k x t e c d a 0 1 2 3 4 5 6 7 8 9\n               S: a005 Listrights
      successful\n"
    title: 3.4.  LISTRIGHTS Command
  - contents:
    - "3.5.  MYRIGHTS Command\n   Arguments:  mailbox name\n   Data:       untagged
      responses: MYRIGHTS\n   Result:     OK - myrights completed\n               NO
      - myrights failure: can't get rights\n               BAD - arguments invalid\n
      \  The MYRIGHTS command returns the set of rights that the user has to\n   mailbox
      in an untagged MYRIGHTS reply.\n   Example:    C: A003 MYRIGHTS INBOX\n               S:
      * MYRIGHTS INBOX rwiptsldaex\n               S: A003 OK Myrights complete\n"
    title: 3.5.  MYRIGHTS Command
  - contents:
    - "3.6.  ACL Response\n   Data:       mailbox name\n               zero or more
      identifier rights pairs\n   The ACL response occurs as a result of a GETACL
      command.  The first\n   string is the mailbox name for which this ACL applies.
      \ This is\n   followed by zero or more pairs of strings; each pair contains
      the\n   identifier for which the entry applies followed by the set of rights\n
      \  that the identifier has.\n   Section 2.1.1 details additional server requirements
      related to\n   handling of the virtual \"d\" and \"c\" rights.\n"
    title: 3.6.  ACL Response
  - contents:
    - "3.7.  LISTRIGHTS Response\n   Data:       mailbox name\n               identifier\n
      \              required rights\n               list of optional rights\n   The
      LISTRIGHTS response occurs as a result of a LISTRIGHTS command.\n   The first
      two strings are the mailbox name and identifier for which\n   this rights list
      applies.  Following the identifier is a string\n   containing the (possibly
      empty) set of rights the identifier will\n   always be granted in the mailbox.\n
      \  Following this are zero or more strings each containing a set of\n   rights
      the identifier can be granted in the mailbox.  Rights\n   mentioned in the same
      string are tied together.  The server MUST\n   either grant all tied rights
      to the identifier in the mailbox or\n   grant none.  Section 2.1.1 details additional
      server requirements\n   related to handling of the virtual \"d\" and \"c\" rights.\n
      \  The same right MUST NOT be listed more than once in the LISTRIGHTS\n   command.\n"
    title: 3.7.  LISTRIGHTS Response
  - contents:
    - "3.8.  MYRIGHTS Response\n   Data:       mailbox name\n               rights\n
      \  The MYRIGHTS response occurs as a result of a MYRIGHTS command.  The\n   first
      string is the mailbox name for which these rights apply.  The\n   second string
      is the set of rights that the client has.\n   Section 2.1.1 details additional
      server requirements related to\n   handling of the virtual \"d\" and \"c\" rights.\n"
    title: 3.8.  MYRIGHTS Response
  title: 3.  Access control management commands and responses
- contents:
  - "4.  Rights Required to Perform Different IMAP4rev1 Commands\n   Before executing
    a command, an ACL-compliant server MUST check which\n   rights are required to
    perform it.  This section groups command by\n   functions they perform and list
    the rights required.  It also gives\n   the detailed description of any special
    processing required.\n   For the purpose of this section the UID counterpart of
    a command is\n   considered to be the same command, e.g., both UID COPY and COPY\n
    \  commands require the same set of rights.\n   The table below summarizes different
    rights or their combinations\n   that are required in order to perform different
    IMAP operations.  As\n   it is not always possible to express complex right checking
    and\n   interactions, the description after the table should be used as the\n
    \  primary reference.\n   +-------------------+---+---+---+---+---+---+---+---+---+---+---+---+\n
    \  |Operations\\Rights  | l | r | s | w | i | k | x | t | e | a |Any|Non|\n   +-------------------+---+---+---+---+---+---+---+---+---+---+---+---+\n
    \  |                  commands in authenticated state                  |\n   +-------------------------------------------------------------------+\n
    \  |      LIST         | + |   |   |   |   |   |   |   |   |   |   |   |\n   |
    \  SUBSCRIBE       | * |   |   |   |   |   |   |   |   |   |   | * |\n   |  UNSUBSCRIBE
    \     |   |   |   |   |   |   |   |   |   |   |   | + |\n   |      LSUB         |
    * |   |   |   |   |   |   |   |   |   |   | * |\n   |CREATE (for parent)|   |
    \  |   |   |   | + |   |   |   |   |   |   |\n   |     DELETE        |   | ? |
    \  |   |   |   | + | ? | ? |   |   |   |\n   |     RENAME        |   |   |   |
    \  |   | + | + |   |   |   |   |   |\n   |  SELECT/EXAMINE   |   | + |   |   |
    \  |   |   |   |   |   |   |   |\n   |      STATUS       |   | + |   |   |   |
    \  |   |   |   |   |   |   |\n   |  SETACL/DELETEACL |   |   |   |   |   |   |
    \  |   |   | + |   |   |\n   | GETACL/LISTRIGHTS |   |   |   |   |   |   |   |
    \  |   | + |   |   |\n   |     MYRIGHTS      |   |   |   |   |   |   |   |   |
    \  |   | + |   |\n   |      APPEND       |   |   | ? | ? | + |   |   | ? |   |
    \  |   |   |\n   +-------------------------------------------------------------------+\n
    \  |                     commands in selected state                    |\n   +-------------------------------------------------------------------+\n
    \  |       COPY        |   |   | ? | ? | + |   |   | ? |   |   |   |   |\n   |
    \    EXPUNGE       |   |   |   |   |   |   |   |   | + |   |   |   |\n   |      CLOSE
    \       |   |   |   |   |   |   |   |   | ? |   |   |   |\n   |      FETCH        |
    \  |   | ? |   |   |   |   |   |   |   |   |   |\n   |   STORE flags     |   |
    \  | ? | ? |   |   |   | ? |   |   |   |   |\n   +-------------------+---+---+---+---+---+---+---+---+---+---+---+---+\n
    \  Note: for all commands in the selected state, the \"r\" is implied,\n   because
    it is required to SELECT/EXAMINE a mailbox.  Servers are not\n   required to check
    presence of the \"r\" right once a mailbox is\n   successfully selected.\n   Legend:\n
    \   +     - The right is required\n    *     - Only one of the rights marked with
    * is required\n            (see description below)\n    ?     - The right is OPTIONAL
    (see description below)\n    \"Any\" - at least one of the \"l\", \"r\", \"i\",
    \"k\", \"x\", \"a\" rights is\n            required\n    \"Non\" - No rights required
    to perform the command\n   Listing and subscribing/unsubscribing mailboxes:\n
    \     LIST - \"l\" right is required.  However, unlike other commands\n      (e.g.,
    SELECT) the server MUST NOT return a NO response if it\n      can't list a mailbox.\n
    \     Note that if the user has \"l\" right to a mailbox \"A/B\", but not to\n
    \     its parent mailbox \"A\", the LIST command should behave as if the\n      mailbox
    \"A\" doesn't exist, for example:\n               C: A777 LIST \"\" *\n               S:
    * LIST (\\NoInferiors) \"/\" \"A/B\"\n               S: * LIST () \"/\" \"C\"\n
    \              S: * LIST (\\NoInferiors) \"/\" \"C/D\"\n               S: A777
    OK LIST completed\n      SUBSCRIBE - \"l\" right is required only if the server
    checks for\n      mailbox existence when performing SUBSCRIBE.\n      UNSUBSCRIBE
    - no rights required to perform this operation.\n      LSUB - \"l\" right is required
    only if the server checks for mailbox\n      existence when performing SUBSCRIBE.
    \ However, unlike other\n      commands (e.g., SELECT) the server MUST NOT return
    a NO response\n      if it can't list a subscribed mailbox.\n   Mailbox management:\n
    \     CREATE - \"k\" right on a nearest existing parent mailbox.  When a\n      new
    mailbox is created, it SHOULD inherit the ACL from the parent\n      mailbox (if
    one exists) in the defined hierarchy.\n      DELETE - \"x\" right on the mailbox.
    \ Note that some servers don't\n      allow to delete a non-empty mailbox.  If
    this is the case, the\n      user would also need \"r\", \"e\", and \"t\" rights,
    in order to open\n      the mailbox and empty it.\n      The DELETE command MUST
    delete the ACL associated with the deleted\n      mailbox.\n      RENAME - Moving
    a mailbox from one parent to another requires the\n      \"x\" right on the mailbox
    itself and the \"k\" right for the new\n      parent.  For example, if the user
    wants to rename the mailbox\n      named \"A/B/C\" to \"D/E\", the user must have
    the \"x\" right for the\n      mailbox \"A/B/C\" and the \"k\" right for the mailbox
    \"D\".\n      The RENAME command SHOULD NOT change the ACLs on the renamed\n      mailbox
    and submailboxes.\n   Copying or appending messages:\n      Before performing
    a COPY/APPEND command, the server MUST check if\n      the user has \"i\" right
    for the target mailbox.  If the user\n      doesn't have \"i\" right, the operation
    fails.  Otherwise for each\n      copied/appended message the server MUST check
    if the user has\n         \"t\" right - when the message has \\Deleted flag set\n
    \        \"s\" right - when the message has \\Seen flag set\n         \"w\" right
    - for all other message flags.\n      Only when the user has a particular right
    are the corresponding\n      flags stored for the newly created message.  The
    server MUST NOT\n      fail a COPY/APPEND if the user has no rights to set a particular\n
    \     flag.\n   Example:    C: A003 MYRIGHTS TargetMailbox\n               S:
    * MYRIGHTS TargetMailbox rwis\n               S: A003 OK Myrights complete\n               C:
    A004 FETCH 1:3 (FLAGS)\n               S: * 1 FETCH (FLAGS (\\Draft \\Deleted)\n
    \              S: * 2 FETCH (FLAGS (\\Answered)\n               S: * 3 FETCH (FLAGS
    ($Forwarded \\Seen)\n               S: A004 OK Fetch Completed\n               C:
    A005 COPY 1:3 TargetMailbox\n               S: A005 OK Copy completed\n               C:
    A006 SELECT TargetMailbox\n                  ...\n               S: A006 Select
    Completed\n      Let's assume that the copied messages received message numbers\n
    \     77:79.\n               C: A007 FETCH 77:79 (FLAGS)\n               S: *
    77 FETCH (FLAGS (\\Draft))\n               S: * 78 FETCH (FLAGS (\\Answered))\n
    \              S: * 79 FETCH (FLAGS ($Forwarded \\Seen))\n               S: A007
    OK Fetch Completed\n      \\Deleted flag was lost on COPY, as the user has no
    \"t\" right in\n      the target mailbox.\n      If the MYRIGHTS command with
    the tag A003 would have returned:\n               S: * MYRIGHTS TargetMailbox
    rsti\n      the response from the FETCH with the tag A007 would have been:\n               C:
    A007 FETCH 77:79 (FLAGS)\n               S: * 77 FETCH (FLAGS (\\Deleted))\n               S:
    * 78 FETCH (FLAGS ())\n               S: * 79 FETCH (FLAGS (\\Seen))\n               S:
    A007 OK Fetch Completed\n      In the latter case, \\Answered, $Forwarded, and
    \\Draft flags were\n      lost on COPY, as the user has no \"w\" right in the
    target mailbox.\n   Expunging the selected mailbox:\n      EXPUNGE - \"e\" right
    on the selected mailbox.\n      CLOSE - \"e\" right on the selected mailbox.  If
    the server is\n      unable to expunge the mailbox because the user doesn't have
    the\n      \"e\" right, the server MUST ignore the expunge request, close the\n
    \     mailbox, and return the tagged OK response.\n   Fetch information about
    a mailbox and its messages:\n      SELECT/EXAMINE/STATUS - \"r\" right on the
    mailbox.\n      FETCH - A FETCH request that implies setting \\Seen flag MUST
    NOT\n      set it, if the current user doesn't have \"s\" right.\n   Changing
    flags:\n      STORE - the server MUST check if the user has\n         \"t\" right
    - when the user modifies \\Deleted flag\n         \"s\" right - when the user
    modifies \\Seen flag\n         \"w\" right - for all other message flags.\n      STORE
    operation SHOULD NOT fail if the user has rights to modify\n      at least one
    flag specified in the STORE, as the tagged NO\n      response to a STORE command
    is not handled very well by deployed\n      clients.\n   Changing ACLs:\n      SETACL/DELETEACL
    - \"a\" right on the mailbox.\n   Reading ACLs:\n      GETACL - \"a\" right on
    the mailbox.\n      MYRIGHTS - any of the following rights is required to perform
    the\n      operation: \"l\", \"r\", \"i\", \"k\", \"x\", \"a\".\n      LISTRIGHTS
    - \"a\" right on the mailbox.\n"
  title: 4.  Rights Required to Perform Different IMAP4rev1 Commands
- contents:
  - '5.  Other Considerations

    '
  - contents:
    - '5.1.  Additional Requirements and Implementation Notes

      '
    - contents:
      - "5.1.1.  Servers\n   This document defines an additional capability that is
        used to\n   announce the list of extra rights (excluding the ones defined
        in RFC\n   2086) supported by the server.  The set of rights MUST include
        \"t\",\n   \"e\", \"x\", and \"k\".  Note that the extra rights can appear
        in any\n   order.\n   Example:    C: 1 capability\n               S: * CAPABILITY
        IMAP4REV1 STARTTLS LITERAL+\n                  ACL RIGHTS=texk\n               S:
        1 OK completed\n   Any server implementing an ACL extension MUST accurately
        reflect the\n   current user's rights in FLAGS and PERMANENTFLAGS responses.\n
        \  Example:    C: A142 SELECT INBOX\n               S: * 172 EXISTS\n               S:
        * 1 RECENT\n               S: * OK [UNSEEN 12] Message 12 is first unseen\n
        \              S: * OK [UIDVALIDITY 3857529045] UIDs valid\n               S:
        * OK [UIDNEXT 4392] Predicted next UID\n               S: * FLAGS (\\Answered
        \\Flagged \\Deleted \\Seen \\Draft)\n               S: * OK [PERMANENTFLAGS
        (\\Seen \\Answered \\Flagged \\*)] L\n               S: A142 OK [READ-WRITE]
        SELECT completed\n               C: A143 MYRIGHTS INBOX\n               S:
        * MYRIGHTS INBOX lrwis\n               S: A143 OK completed\n   Note that
        in order to get better performance the client MAY pipeline\n   SELECT and
        MYRIGHTS commands:\n               C: A142 SELECT INBOX\n               C:
        A143 MYRIGHTS INBOX\n               S: * 172 EXISTS\n               S: * 1
        RECENT\n               S: * OK [UNSEEN 12] Message 12 is first unseen\n               S:
        * OK [UIDVALIDITY 3857529045] UIDs valid\n               S: * OK [UIDNEXT
        4392] Predicted next UID\n               S: * FLAGS (\\Answered \\Flagged
        \\Deleted \\Seen \\Draft)\n               S: * OK [PERMANENTFLAGS (\\Seen
        \\Answered \\Flagged \\*)] L\n               S: A142 OK [READ-WRITE] SELECT
        completed\n               S: * MYRIGHTS INBOX lrwis\n               S: A143
        OK completed\n   Servers MAY cache the rights a user has on a mailbox when
        the mailbox\n   is selected, so that if a client's rights on a mailbox are
        changed\n   with SETACL or DELETEACL, commands specific to the selected state\n
        \  (e.g., STORE, EXPUNGE) might not reflect the changed rights until the\n
        \  mailbox is re-selected.  If the server checks the rights on each\n   command,
        then it SHOULD send FLAGS and PERMANENTFLAGS responses if\n   they have changed.
        \ If such server detects that the user no longer\n   has read access to the
        mailbox, it MAY send an untagged BYE response\n   and close connection.  It
        MAY also refuse to execute all commands\n   specific to the selected state
        until the mailbox is closed; however,\n   server implementors should note
        that most clients don't handle NO\n   responses very well.\n   An ACL server
        MAY modify one or more ACLs for one or more identifiers\n   as a side effect
        of modifying the ACL specified in a\n   SETACL/DELETEACL.  If the server does
        that, it MUST send untagged ACL\n   response(s) to notify the client about
        the changes made.\n   An ACL server implementation MUST treat received ACL
        modification\n   commands as a possible ambiguity with respect to subsequent
        commands\n   affected by the ACL, as described in Section 5.5 of [IMAP4].
        \ Hence a\n   pipeline SETACL + MYRIGHTS is an ambiguity with respect to the\n
        \  server, meaning that the server must execute the SETACL command to\n   completion
        before the MYRIGHTS.  However, clients are permitted to\n   send such a pipeline.\n"
      title: 5.1.1.  Servers
    - contents:
      - "5.1.2.  Clients\n   The following requirement is put on clients in order
        to allow for\n   future extensibility.  A client implementation that allows
        a user to\n   read and update ACLs MUST preserve unrecognized rights that
        it\n   doesn't allow the user to change.  That is, if the client\n   1) can
        read ACLs\n    and\n   2) can update ACLs\n    but\n   3) doesn't allow the
        user to change the rights the client doesn't\n   recognize, then it MUST preserve
        unrecognized rights.\n   Otherwise the client could risk unintentionally removing
        permissions\n   it doesn't understand.\n"
      title: 5.1.2.  Clients
    title: 5.1.  Additional Requirements and Implementation Notes
  - contents:
    - "5.2.  Mapping of ACL Rights to READ-WRITE and READ-ONLY Response Codes\n   A
      particular ACL server implementation MAY allow \"shared multiuser\n   access\"
      to some mailboxes.  \"Shared multiuser access\" to a mailbox\n   means that
      multiple different users are able to access the same\n   mailbox, if they have
      proper access rights.  \"Shared multiuser\n   access\" to the mailbox doesn't
      mean that the ACL for the mailbox is\n   currently set to allow access by multiple
      users.  Let's denote a\n   \"shared multiuser write access\" as a \"shared multiuser
      access\" when a\n   user can be granted flag modification rights (any of \"w\",
      \"s\", or\n   \"t\").\n   Section 4 describes which rights are required for
      modifying different\n   flags.\n   If the ACL server implements some flags as
      shared for a mailbox\n   (i.e., the ACL for the mailbox MAY be set up so that
      changes to those\n   flags are visible to another user), let's call the set
      of rights\n   associated with these flags (as described in Section 4) for that\n
      \  mailbox collectively as \"shared flag rights\".  Note that the \"shared\n
      \  flag rights\" set MAY be different for different mailboxes.\n   If the server
      doesn't support \"shared multiuser write access\" to a\n   mailbox or doesn't
      implement shared flags on the mailbox, \"shared\n   flag rights\" for the mailbox
      is defined to be the empty set.\n   Example 1: Mailbox \"banan\" allows \"shared
      multiuser write access\" and\n              implements flags \\Deleted, \\Answered,
      and $MDNSent as\n              shared flags. \"Shared flag rights\" for the
      mailbox \"banan\"\n              is a set containing flags \"t\" (because system
      flag\n              \\Deleted requires \"t\" right) and \"w\" (because both\n
      \             \\Answered and $MDNSent require \"w\" right).\n   Example 2: Mailbox
      \"apple\" allows \"shared multiuser write access\" and\n              implements
      \\Seen system flag as shared flag. \"Shared flag\n              rights\" for
      the mailbox \"apple\" contains \"s\" right\n              because system flag
      \\Seen requires \"s\" right.\n   Example 3: Mailbox \"pear\" allows \"shared
      multiuser write access\" and\n              implements flags \\Seen, \\Draft
      as shared flags. \"Shared\n              flag rights\" for the mailbox \"apple\"
      is a set containing\n              flags \"s\" (because system flag \\Seen requires
      \"s\" right)\n              and \"w\" (because system flag \\Draft requires
      \"w\" right).\n   The server MUST include a READ-ONLY response code in the tagged
      OK\n   response to a SELECT command if none of the following rights is\n   granted
      to the current user:\n    \"i\", \"e\", and \"shared flag rights\"(***).\n   The
      server SHOULD include a READ-WRITE response code in the tagged OK\n   response
      if at least one of the \"i\", \"e\", or \"shared flag\n   rights\"(***) is granted
      to the current user.\n   (***) Note that a future extension to this document
      can extend the\n   list of rights that causes the server to return the READ-WRITE\n
      \  response code.\n   Example 1 (continued): The user that has \"lrs\" rights
      for the mailbox\n                          \"banan\".  The server returns READ-ONLY\n
      \                         response code on SELECT, as none of \"iewt\"\n                          rights
      is granted to the user.\n   Example 2 (continued): The user that has \"rit\"
      rights for the mailbox\n                          \"apple\".  The server returns
      READ-WRITE\n                          response code on SELECT, as the user has
      \"i\"\n                          right.\n   Example 3 (continued): The user
      that has \"rset\" rights for the\n                          mailbox \"pear\".
      \ The server returns READ-WRITE\n                          response code on
      SELECT, as the user has \"e\"\n                          and \"s\" rights.\n"
    title: 5.2.  Mapping of ACL Rights to READ-WRITE and READ-ONLY Response Codes
  title: 5.  Other Considerations
- contents:
  - "6.  Security Considerations\n   An implementation MUST make sure the ACL commands
    themselves do not\n   give information about mailboxes with appropriately restricted
    ACLs.\n   For example, when a user agent executes a GETACL command on a mailbox\n
    \  that the user has no permission to LIST, the server would respond to\n   that
    request with the same error that would be used if the mailbox\n   did not exist,
    thus revealing no existence information, much less the\n   mailbox's ACL.\n   IMAP
    clients implementing ACL that are able to modify ACLs SHOULD\n   warn a user that
    wants to give full access (or even just the \"a\"\n   right) to the special identifier
    \"anyone\".\n   This document relies on [SASLprep] to describe steps required
    to\n   perform identifier canonicalization (preparation).  The preparation\n   algorithm
    in SASLprep was specifically designed such that its output\n   is canonical, and
    it is well-formed.  However, due to an anomaly\n   [PR29] in the specification
    of Unicode normalization, canonical\n   equivalence is not guaranteed for a select
    few character sequences.\n   Identifiers prepared with SASLprep can be stored
    and returned by an\n   ACL server.  The anomaly affects ACL manipulation and evaluation
    of\n   identifiers containing the selected character sequences.  These\n   sequences,
    however, do not appear in well-formed text.  In order to\n   address this problem,
    an ACL server MAY reject identifiers containing\n   sequences described in [PR29]
    by sending the tagged BAD response.\n   This is in addition to the requirement
    to reject identifiers that\n   fail SASLprep preparation as described in Section
    3.\n   Other security considerations described in [IMAP4] are relevant to\n   this
    document.  In particular, ACL information is sent in the clear\n   over the network
    unless confidentiality protection is negotiated.\n   This can be accomplished
    either by the use of STARTTLS, negotiated\n   privacy protection in the AUTHENTICATE
    command, or some other\n   protection mechanism.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Formal Syntax\n   Formal syntax is defined using ABNF [ABNF], extending the
    ABNF rules\n   in Section 9 of [IMAP4].  Elements not defined here can be found
    in\n   [ABNF] and [IMAP4].\n   Except as noted otherwise, all alphabetic characters
    are case\n   insensitive.  The use of uppercase or lowercase characters to define\n
    \  token strings is for editorial clarity only.  Implementations MUST\n   accept
    these strings in a case-insensitive fashion.\n   LOWER-ALPHA     =  %x61-7A   ;;
    a-z\n   acl-data        = \"ACL\" SP mailbox *(SP identifier SP\n                       rights)\n
    \  capability      =/ rights-capa\n                       ;;capability is defined
    in [IMAP4]\n   command-auth    =/ setacl / deleteacl / getacl /\n                       listrights
    / myrights\n                       ;;command-auth is defined in [IMAP4]\n   deleteacl
    \      = \"DELETEACL\" SP mailbox SP identifier\n   getacl          = \"GETACL\"
    SP mailbox\n   identifier      = astring\n   listrights      = \"LISTRIGHTS\"
    SP mailbox SP identifier\n   listrights-data = \"LISTRIGHTS\" SP mailbox SP identifier\n
    \                          SP rights *(SP rights)\n   mailbox-data    =/ acl-data
    / listrights-data / myrights-data\n                       ;;mailbox-data is defined
    in [IMAP4]\n   mod-rights      = astring\n                       ;; +rights to
    add, -rights to remove\n                       ;; rights to replace\n   myrights
    \       = \"MYRIGHTS\" SP mailbox\n   myrights-data   = \"MYRIGHTS\" SP mailbox
    SP rights\n   new-rights      = 1*LOWER-ALPHA\n                       ;; MUST
    include \"t\", \"e\", \"x\", and \"k\".\n                       ;; MUST NOT include
    standard rights listed\n                       ;; in section 2.2\n   rights          =
    astring\n                       ;; only lowercase ASCII letters and digits\n                       ;;
    are allowed.\n   rights-capa     = \"RIGHTS=\" new-rights\n                       ;;
    RIGHTS=... capability\n   setacl          = \"SETACL\" SP mailbox SP identifier\n
    \                      SP mod-rights\n"
  title: 7.  Formal Syntax
- contents:
  - "8.  IANA Considerations\n   IMAP4 capabilities are registered by publishing a
    standards-track or\n   IESG-approved experimental RFC.  The registry is currently
    located\n   at:\n      http://www.iana.org/assignments/imap4-capabilities\n   This
    document defines the RIGHTS= IMAP capability.  IANA has added\n   this capability
    to the registry.\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Internationalization Considerations\n   Section 3 states requirements on
    servers regarding\n   internationalization of identifiers.\n"
  title: 9.  Internationalization Considerations
- contents:
  - "Appendix A.  Changes since RFC 2086\n   1.   Changed the charset of \"identifier\"
    from US-ASCII to UTF-8.\n   2.   Specified that mailbox deletion is controlled
    by the \"x\" right\n        and EXPUNGE is controlled by the \"e\" right.\n   3.
    \  Added the \"t\" right that controls STORE \\Deleted.  Redefined the\n        \"d\"
    right to be a macro for \"e\", \"t\", and possibly \"x\".\n   4.   Added the \"k\"
    right that controls CREATE.  Redefined the \"c\"\n        right to be a macro
    for \"k\" and possibly \"x\".\n   5.   Specified that the \"a\" right also controls
    DELETEACL.\n   6.   Specified that the \"r\" right also controls STATUS.\n   7.
    \  Removed the requirement to check the \"r\" right for CHECK, SEARCH\n        and
    FETCH, as this is required for SELECT/EXAMINE to be\n        successful.\n   8.
    \  LISTRIGHTS requires the \"a\" right on the mailbox (same as\n        SETACL).\n
    \  9.   Deleted \"PARTIAL\", this is a deprecated feature of RFC 1730.\n   10.
    \ Specified that the \"w\" right controls setting flags other than\n        \\Seen
    and \\Deleted on APPEND.  Also specified that the \"s\" right\n        controls
    the \\Seen flag and that the \"t\" right controls the\n        \\Deleted flag.\n
    \  11.  Specified that SUBSCRIBE is NOT allowed with the \"r\" right.\n   12.
    \ Specified that the \"l\" right controls SUBSCRIBE.\n   13.  GETACL is NOT allowed
    with the \"r\" right, even though there are\n        several implementations that
    allows that.  If a user only has\n        \"r\" right, GETACL can disclose information
    about identifiers\n        existing on the mail system.\n   14.  Clarified that
    RENAME requires the \"k\" right for the new parent\n        and the \"x\" right
    for the old name.\n   15.  Added new section that describes which rights are required\n
    \       and/or checked when performing various IMAP commands.\n   16.  Added mail
    client security considerations when dealing with\n        special identifier \"anyone\".\n
    \  17.  Clarified that negative rights are not the same as DELETEACL.\n   18.
    \ Added \"Compatibility with RFC 2086\" section.\n   19.  Added section about
    mapping of ACL rights to READ-WRITE and\n        READ-ONLY response codes.\n   20.
    \ Changed BNF to ABNF.\n   21.  Added \"Implementation Notes\" section.\n   22.
    \ Updated \"References\" section.\n   23.  Added more examples.\n   24.  Clarified
    when the virtual \"c\" and \"d\" rights are returned in\n        ACL, MYRIGHTS,
    and LISTRIGHTS responses.\n"
  title: Appendix A.  Changes since RFC 2086
- contents:
  - "Appendix B.  Compatibility with RFC 2086\n   This non-normative section gives
    guidelines as to how an existing RFC\n   2086 server implementation may be updated
    to comply with this\n   document.\n   This document splits the \"d\" right into
    several new different rights:\n   \"t\", \"e\", and possibly \"x\" (see Section
    2.1.1 for more details).  The\n   \"d\" right remains for backward-compatibility,
    but it is a virtual\n   right.  There are two approaches for RFC 2086 server implementors
    to\n   handle the \"d\" right and the new rights that have replaced it:\n   a.
    \ Tie \"t\", \"e\" (and possibly \"x) together - almost no changes.\n   b.  Implement
    separate \"x\", \"t\" and \"e\".  Return the \"d\" right in a\n       MYRIGHTS
    response or an ACL response containing ACL information\n       when any of the
    \"t\", \"e\" (and \"x\") is granted.\n   In a similar manner this document splits
    the \"c\" right into several\n   new different rights: \"k\" and possibly \"x\"
    (see Section 2.1.1 for\n   more details).  The \"c\" right remains for backwards-compatibility
    but\n   it is a virtual right.  Again, RFC 2086 server implementors can\n   choose
    to tie rights or to implement separate rights, as described\n   above.\n   Also
    check Sections 5.1.1 and 5.1.2, as well as Appendix A, to see\n   other changes
    required.  Server implementors should check which\n   rights are required to invoke
    different IMAP4 commands as described\n   in Section 4.\n"
  title: Appendix B.  Compatibility with RFC 2086
- contents:
  - "Appendix C.  Known Deficiencies\n   This specification has some known deficiencies
    including:\n   1.  This is inadequate to provide complete read-write access to\n
    \      mailboxes protected by Unix-style rights bits because there is no\n       equivalent
    to \"chown\" and \"chgrp\" commands nor is there a good\n       way to discover
    such limitations are present.\n   2.  Because this extension leaves the specific
    semantics of how\n       rights are combined by the server as implementation defined,
    the\n       ability to build a user-friendly interface is limited.\n   3.  Users,
    groups, and special identifiers (e.g., anyone) exist in\n       the same namespace.\n
    \  The work-in-progress \"ACL2\" extension is intended to redesign this\n   extension
    to address these deficiencies without the constraint of\n   backward-compatibility
    and may eventually supercede this facility.\n   However, RFC 2086 is deployed
    in multiple implementations so this\n   intermediate step, which fixes the straightforward
    deficiencies in a\n   backward-compatible fashion, is considered worthwhile.\n"
  title: Appendix C.  Known Deficiencies
- contents:
  - "Appendix D.  Acknowledgements\n   This document is a revision of RFC 2086 written
    by John G. Myers.\n   Editor appreciates comments received from Mark Crispin,
    Chris Newman,\n   Cyrus Daboo, John G. Myers, Dave Cridland, Ken Murchison, Steve
    Hole,\n   Vladimir Butenko, Larry Greenfield, Robert Siemborski, Harrie\n   Hazewinkel,
    Philip Guenther, Brian Candler, Curtis King, Lyndon\n   Nerenberg, Lisa Dusseault,
    Arnt Gulbrandsen, and other participants\n   of the IMAPEXT working group.\n"
  title: Appendix D.  Acknowledgements
- contents:
  - "Normative References\n   [KEYWORDS]   Bradner, S., \"Key words for use in RFCs
    to Indicate\n                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
    \  [ABNF]       Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n                Specifications:
    ABNF\", RFC 4234, October 2005.\n   [IMAP4]      Crispin, M., \"INTERNET MESSAGE
    ACCESS PROTOCOL - VERSION\n                4rev1\", RFC 3501, March 2003.\n   [UTF-8]
    \     Yergeau, F., \"UTF-8, a transformation format of ISO\n                10646\",
    STD 63, RFC 3629, November 2003.\n   [Stringprep] Hoffman, P. and M. Blanchet,
    \"Preparation of\n                Internationalized Strings (\"stringprep\")\",
    RFC 3454,\n                December 2002.\n   [SASLprep]   Zeilenga, K., \"SASLprep:
    Stringprep Profile for User\n                Names and Passwords\", RFC 4013,
    February 2005.\n"
  title: Normative References
- contents:
  - "Informative References\n   [RFC2086]    Myers, J., \"IMAP4 ACL extension\", RFC
    2086,\n                January 1997.\n   [PR29]       \"Public Review Issue #29:
    Normalization Issue\",\n                February 2004,\n                <http://www.unicode.org/review/pr-29.html>.\n"
  title: Informative References
- contents:
  - "Author's Address\n   Alexey Melnikov\n   Isode Ltd.\n   5 Castle Business Village\n
    \  36 Station Road\n   Hampton, Middlesex  TW12 2BX\n   GB\n   EMail: alexey.melnikov@isode.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
