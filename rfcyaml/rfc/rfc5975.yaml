- title: __initial_text__
  contents:
  - "                             QSPEC Template\n    for the Quality-of-Service NSIS\
    \ Signaling Layer Protocol (NSLP)\n"
- title: Abstract
  contents:
  - "Abstract\n   The Quality-of-Service (QoS) NSIS signaling layer protocol (NSLP)\
    \ is\n   used to signal QoS reservations and is independent of a specific QoS\n\
    \   model (QOSM) such as IntServ or Diffserv.  Rather, all information\n   specific\
    \ to a QOSM is encapsulated in a separate object, the QSPEC.\n   This document\
    \ defines a template for the QSPEC including a number of\n   QSPEC parameters.\
    \  The QSPEC parameters provide a common language to\n   be reused in several\
    \ QOSMs and thereby aim to ensure the\n   extensibility and interoperability of\
    \ QoS NSLP.  While the base\n   protocol is QOSM-agnostic, the parameters that\
    \ can be carried in the\n   QSPEC object are possibly closely coupled to specific\
    \ models.  The\n   node initiating the NSIS signaling adds an Initiator QSPEC,\
    \ which\n   indicates the QSPEC parameters that must be interpreted by the\n \
    \  downstream nodes less the reservation fails, thereby ensuring the\n   intention\
    \ of the NSIS initiator is preserved along the signaling\n   path.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5975.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Conventions Used in This Document ..........................6\n  \
    \ 2. Terminology .....................................................6\n   3.\
    \ QSPEC Framework .................................................7\n      3.1.\
    \ QoS Models .................................................7\n      3.2. QSPEC\
    \ Objects ..............................................9\n      3.3. QSPEC Parameters\
    \ ..........................................11\n           3.3.1. Traffic Model\
    \ Parameter ............................12\n           3.3.2. Constraints Parameters\
    \ .............................14\n           3.3.3. Traffic-Handling Directives\
    \ ........................16\n           3.3.4. Traffic Classifiers ................................17\n\
    \      3.4. Example of QSPEC Processing ...............................17\n  \
    \ 4. QSPEC Processing and Procedures ................................20\n    \
    \  4.1. Local QSPEC Definition and Processing .....................20\n      4.2.\
    \ Reservation Success/Failure, QSPEC Error Codes,\n           and INFO-SPEC Notification\
    \ ................................23\n           4.2.1. Reservation Failure and\
    \ Error E Flag ...............24\n           4.2.2. QSPEC Parameter Not Supported\
    \ N Flag ...............25\n           4.2.3. INFO-SPEC Coding of Reservation\
    \ Outcome ............25\n           4.2.4. QNE Generation of a RESPONSE Message\
    \ ...............26\n           4.2.5. Special Case of Local QSPEC ........................27\n\
    \      4.3. QSPEC Procedures ..........................................27\n  \
    \         4.3.1. Two-Way Transactions ...............................28\n    \
    \       4.3.2. Three-Way Transactions .............................30\n      \
    \     4.3.3. Resource Queries ...................................32\n        \
    \   4.3.4. Bidirectional Reservations .........................33\n          \
    \ 4.3.5. Preemption .........................................33\n      4.4. QSPEC\
    \ Extensibility .......................................33\n   5. QSPEC Functional\
    \ Specification .................................33\n      5.1. General QSPEC\
    \ Formats .....................................33\n           5.1.1. Common Header\
    \ Format ...............................34\n           5.1.2. QSPEC Object Header\
    \ Format .........................36\n      5.2. QSPEC Parameter Coding ....................................37\n\
    \           5.2.1. <TMOD-1> Parameter .................................37\n  \
    \         5.2.2. <TMOD-2> Parameter .................................38\n    \
    \       5.2.3. <Path Latency> Parameter ...........................39\n      \
    \     5.2.4. <Path Jitter> Parameter ............................40\n        \
    \   5.2.5. <Path PLR> Parameter ...............................41\n          \
    \ 5.2.6. <Path PER> Parameter ...............................42\n           5.2.7.\
    \ <Slack Term> Parameter .............................43\n           5.2.8. <Preemption\
    \ Priority> and <Defending Priority>\n                  Parameters .........................................43\n\
    \           5.2.9. <Admission Priority> Parameter .....................44\n  \
    \         5.2.10. <RPH Priority> Parameter ..........................45\n    \
    \       5.2.11. <Excess Treatment> Parameter ......................46\n      \
    \     5.2.12. <PHB Class> Parameter .............................48\n        \
    \   5.2.13. <DSTE Class Type> Parameter .......................49\n          \
    \ 5.2.14. <Y.1541 QoS Class> Parameter ......................50\n   6. Security\
    \ Considerations ........................................51\n   7. IANA Considerations\
    \ ............................................51\n   8. Acknowledgements ...............................................55\n\
    \   9. Contributors ...................................................55\n  \
    \ 10. Normative References ..........................................57\n   11.\
    \ Informative References ........................................59\n   Appendix\
    \ A. Mapping of QoS Desired, QoS Available, and QoS\n      Reserved of NSIS onto\
    \ AdSpec, TSpec, and RSpec of RSVP IntServ .62\n   Appendix B. Example of TMOD\
    \ Parameter Encoding ....................62\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The QoS NSIS signaling layer protocol (NSLP) [RFC5974] is\
    \ used to\n   signal QoS reservations for a data flow, provide forwarding resources\n\
    \   (QoS) for that flow, and establish and maintain state at nodes along\n   the\
    \ path of the flow.  The design of QoS NSLP is conceptually similar\n   to the\
    \ decoupling between RSVP [RFC2205] and the IntServ architecture\n   [RFC2210],\
    \ where a distinction is made between the operation of the\n   signaling protocol\
    \ and the information required for the operation of\n   the Resource Management\
    \ Function (RMF).  [RFC5974] describes the\n   signaling protocol, while this\
    \ document describes the RMF-related\n   information carried in the QSPEC (QoS\
    \ Specification) object carried\n   in QoS NSLP messages.\n   [RFC5974] defines\
    \ four QoS NSLP messages -- RESERVE, QUERY, RESPONSE,\n   and NOTIFY -- each of\
    \ which may carry the QSPEC object, while this\n   document describes a template\
    \ for the QSPEC object.  The QSPEC object\n   carries information on traffic descriptions,\
    \ resources required,\n   resources available, and other information required\
    \ by the RMF.\n   Therefore, the QSPEC template described in this document is\
    \ closely\n   tied to QoS NSLP, and the reader should be familiar with [RFC5974]\
    \ to\n   fully understand this document.\n   A QoS-enabled domain supports a particular\
    \ QoS model (QOSM), which is\n   a method to achieve QoS for a traffic flow. \
    \ A QOSM incorporates QoS\n   provisioning methods and a QoS architecture, and\
    \ defines the behavior\n   of the RMF that reserves resources for each flow, including\
    \ inputs\n   and outputs.  The QoS NSLP protocol is able to signal QoS\n   reservations\
    \ for different QOSMs, wherein all information specific to\n   a QOSM is encapsulated\
    \ in the QSPEC object, and only the RMF specific\n   to a given QOSM will need\
    \ to interpret the QSPEC.  Examples of QOSMs\n   are IntServ, Diffserv admission\
    \ control, and those specified in\n   [CL-QOSM], [RFC5976], and [RFC5977].\n \
    \  QSPEC parameters include, for example:\n      o  a mandatory traffic model\
    \ (TMOD) parameter,\n      o  constraints parameters such as path latency and\
    \ path jitter,\n      o  traffic handling directives such as excess treatment,\
    \ and\n      o  traffic classifiers such as PHB class.\n   While the base protocol\
    \ is QOSM-agnostic, the parameters that can be\n   carried in the QSPEC object\
    \ are possibly closely coupled to specific\n   models.\n   QSPEC objects loosely\
    \ correspond to the TSpec, RSpec, and AdSpec\n   objects specified in RSVP and\
    \ may contain, respectively, a\n   description of QoS Desired, QoS Reserved, and\
    \ QoS Available.  Going\n   beyond RSVP functionality, the QSPEC also allows indicating\
    \ a range\n   of acceptable QoS by defining a QSPEC object denoting minimum QoS.\n\
    \   Usage of these QSPEC objects is not bound to particular message\n   types,\
    \ thus allowing for flexibility.  A QSPEC object collecting\n   information about\
    \ available resources may travel in any QoS NSLP\n   message, for example, a QUERY\
    \ message or a RESERVE message, as\n   defined in [RFC5974].  The QSPEC travels\
    \ in QoS NSLP messages but is\n   opaque to the QoS NSLP and is only interpreted\
    \ by the RMF.\n   Interoperability between QoS NSIS entities (QNEs) in different\n\
    \   domains is enhanced by the definition of a common set of QSPEC\n   parameters.\
    \  A QoS NSIS initiator (QNI) initiating the QoS NSLP\n   signaling adds an Initiator\
    \ QSPEC object containing parameters\n   describing the desired QoS, normally\
    \ based on the QOSM it supports.\n   QSPEC parameters flagged by the QNI must\
    \ be interpreted by all QNEs\n   in the path, else the reservation fails.  In\
    \ contrast, QSPEC\n   parameters not flagged by the QNI may be skipped if not\
    \ understood.\n   Additional QSPEC parameters can be defined by informational\n\
    \   specification documents, and thereby ensure the extensibility and\n   flexibility\
    \ of QoS NSLP.\n   A Local QSPEC can be defined in a local domain with the Initiator\n\
    \   QSPEC encapsulated, where the Local QSPEC must be functionally\n   consistent\
    \ with the Initiator QSPEC in terms of defined source\n   traffic and other constraints.\
    \  That is, a domain-specific local\n   QSPEC can be defined and processed in\
    \ a local domain, which could,\n   for example, enable simpler processing by QNEs\
    \ within the local\n   domain.\n   In Section 3.4, an example of QSPEC processing\
    \ is provided.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   Initiator QSPEC: The Initiator QSPEC is included in a QoS\
    \ NSLP\n   message by the QNI/QNR.  It travels end-to-end to the QNR/QNI and is\n\
    \   never removed.\n   Local QSPEC: A Local QSPEC is used in a local domain and\
    \ is domain\n   specific.  It encapsulates the Initiator QSPEC and is removed\
    \ at the\n   egress of the local domain.\n   Minimum QoS: QSPEC object that, together\
    \ with a description of QoS\n   Desired or QoS Available, allows the QNI to specify\
    \ a QoS range,\n   i.e., an upper and lower bound.  If the QoS Desired cannot\
    \ be\n   reserved, QNEs are going to decrease the reservation until the\n   minimum\
    \ QoS is hit.  Note that the term \"minimum\" is used\n   generically, since for\
    \ some parameters, such as loss rate and\n   latency, what is specified is the\
    \ maximum acceptable value.\n   QNE: QoS NSIS Entity, a node supporting QoS NSLP.\n\
    \   QNI: QoS NSIS Initiator, a node initiating QoS NSLP signaling.\n   QNR: QoS\
    \ NSIS Receiver, a node terminating QoS NSLP signaling.\n   QoS Available: QSPEC\
    \ object containing parameters describing the\n   available resources.  They are\
    \ used to collect information along a\n   reservation path.\n   QoS Desired: QSPEC\
    \ object containing parameters describing the\n   desired QoS for which the sender\
    \ requests reservation.\n   QoS Model (QOSM): a method to achieve QoS for a traffic\
    \ flow, e.g.,\n   IntServ Controlled Load; specifies the subset of QSPEC QoS\n\
    \   constraints and traffic handling directives that a QNE implementing\n   that\
    \ QOSM is capable of supporting and how resources will be managed\n   by the RMF.\n\
    \   QoS Reserved: QSPEC object containing parameters describing the\n   reserved\
    \ resources and related QoS parameters.\n   QSPEC: the object of QoS NSLP that\
    \ contains all QoS-specific\n   information.\n   QSPEC parameter: Any parameter\
    \ appearing in a QSPEC; for example,\n   traffic model (TMOD), path latency, and\
    \ excess treatment parameters.\n   QSPEC Object: Main building blocks containing\
    \ a QSPEC parameter set\n   that is the input or output of an RMF operation.\n\
    \   QSPEC Type: Identifies a particular QOSM used in the QSPEC\n   Resource Management\
    \ Function (RMF): Functions that are related to\n   resource management and processing\
    \ of QSPEC parameters.\n"
- title: 3. QSPEC Framework
  contents:
  - "3. QSPEC Framework\n   The overall framework for the QoS NSLP is that [RFC5974]\
    \ defines QoS\n   signaling and semantics, the QSPEC template defines the container\
    \ and\n   semantics for QoS parameters and objects, and informational\n   specifications\
    \ define QoS methods and procedures for using QoS\n   signaling and QSPEC parameters/objects\
    \ within specific QoS\n   deployments.  QoS NSLP is a generic QoS signaling protocol\
    \ that can\n   signal for many QOSMs.\n"
- title: 3.1.  QoS Models
  contents:
  - "3.1.  QoS Models\n   A QOSM is a method to achieve QoS for a traffic flow, e.g.,\
    \ IntServ\n   Controlled Load [CL-QOSM], Resource Management with Diffserv\n \
    \  [RFC5977], and QoS signaling for Y.1541 QoS classes [RFC5976].  A\n   QOSM\
    \ specifies a set of QSPEC parameters that describe the QoS\n   desired and how\
    \ resources will be managed by the RMF.  The RMF\n   implements functions that\
    \ are related to resource management and\n   processes the QSPEC parameters.\n\
    \   QOSMs affect the operation of the RMF in NSIS-capable nodes and the\n   information\
    \ carried in QSPEC objects.  Under some circumstances\n   (e.g., aggregation),\
    \ they may cause a separate NSLP session to be\n   instantiated by having the\
    \ RMF as a QNI.  QOSM specifications may\n   define RMF triggers that cause the\
    \ QoS NSLP to run semantics within\n   the underlying QoS NSLP signaling state\
    \ and messaging processing\n   rules, as defined in Section 5.2 of [RFC5974].\
    \  New QoS NSLP message\n   processing rules can only be defined in extensions\
    \ to QoS NSLP.  If a\n   QOSM specification defines triggers that deviate from\
    \ existing QoS\n   NSLP processing rules, the fallback for QNEs not supporting\
    \ that QOSM\n   are the QoS NSLP state transition/message processing rules.\n\
    \   The QOSM specification includes how the requested QoS resources will\n   be\
    \ described and how they will be managed by the RMF.  For this\n   purpose, the\
    \ QOSM specification defines a set of QSPEC parameters it\n   uses to describe\
    \ the desired QoS and resource control in the RMF, and\n   it may define additional\
    \ QSPEC parameters.\n   When a QoS NSLP message travels through different domains,\
    \ it may\n   encounter different QOSMs.  Since QOSMs use different QSPEC\n   parameters\
    \ for describing resources, the QSPEC parameters included by\n   the QNI may not\
    \ be understood in other domains.  The QNI therefore\n   can flag those QSPEC\
    \ parameters it considers vital with the M flag.\n   QSPEC parameters with the\
    \ M flag set must be interpreted by the\n   downstream QNEs, or the reservation\
    \ fails.  QSPEC parameters without\n   the M flag set should be interpreted by\
    \ the downstream QNEs, but may\n   be ignored if not understood.\n   A QOSM specification\
    \ SHOULD include the following:\n   - role of QNEs, e.g., location, frequency,\
    \ statefulness, etc.\n   - QSPEC definition including QSPEC parameters\n   - QSPEC\
    \ procedures applicable to this QOSM\n   - QNE processing rules describing how\
    \ QSPEC information is treated\n     and interpreted in the RMF, e.g., admission\
    \ control, scheduling,\n     policy control, QoS parameter accumulation (e.g.,\
    \ delay)\n   - at least one bit-level QSPEC example\n   - QSPEC parameter behavior\
    \ for new QSPEC parameters that the QOSM\n     specification defines\n   - a definition\
    \ of what happens in case of preemption if the default\n     QNI behavior (teardown\
    \ preempted reservation) is not followed (see\n     Section 4.3.5)\n   A QOSM\
    \ specification MAY include the following:\n   - definitions of additional QOSM-specific\
    \ error codes, as discussed\n     in Section 4.2.3\n   - the QoS-NSLP options\
    \ a QOSM wants to use, when several options are\n     available for a QOSM (e.g.,\
    \ Local QSPEC to either a) hide the\n     Initiator QSPEC within a local domain\
    \ message, or b) encapsulate\n     the Initiator QSPEC).\n   QOSMs are free, subject\
    \ to IANA registration and review rules, to\n   extend QSPECs by adding parameters\
    \ of any of the kinds supported by\n   the QSPEC.  This includes traffic description\
    \ parameters, constraint\n   parameters, and traffic handling directives.  QOSMs\
    \ are not\n   permitted, however, to reinterpret or redefine the QSPEC parameters\n\
    \   specified in this document.  Note that signaling functionality is\n   only\
    \ defined by the QoS NSLP document [RFC5974] and not by this\n   document or by\
    \ QOSM specification documents.\n"
- title: 3.2.  QSPEC Objects
  contents:
  - "3.2.  QSPEC Objects\n   The QSPEC is the object of QoS NSLP containing QSPEC\
    \ objects and\n   parameters.  QSPEC objects are the main building blocks of the\
    \ QSPEC\n   parameter set that is input or output of an RMF operation.  QSPEC\n\
    \   parameters are the parameters appearing in a QSPEC, which must\n   include\
    \ the traffic model parameter (TMOD), and may optionally\n   include constraints\
    \ (e.g., path latency), traffic handling directives\n   (e.g., excess treatment),\
    \ and traffic classifiers (e.g., PHB class).\n   The RMF implements functions\
    \ that are related to resource management\n   and processes the QSPEC parameters.\n\
    \   The QSPEC consists of a QSPEC version number and QSPEC objects.  IANA\n  \
    \ assigns a new QSPEC version number when the current version is\n   deprecated\
    \ or deleted (as required by a specification).  Note that a\n   new QSPEC version\
    \ number is not needed when new QSPEC parameters are\n   specified.  Later QSPEC\
    \ versions MUST be backward compatible with\n   earlier QSPEC versions.  That\
    \ is, a version n+1 device must support\n   QSPEC version n (or earlier).  On\
    \ the other hand, if a QSPEC version\n   n (or earlier) device receives an NSLP\
    \ message specifying QSPEC\n   version n+1, then the version n device responds\
    \ with an 'Incompatible\n   QSPEC' error code (0x0f) response, as discussed in\
    \ Section 4.2.3,\n   allowing the QNE that sent the NSLP message to retry with\
    \ a lower\n   QSPEC version.\n   This document provides a template for the QSPEC\
    \ in order to promote\n   interoperability between QOSMs.  Figure 1 illustrates\
    \ how the QSPEC\n   is composed of up to 4 QSPEC objects, namely QoS Desired,\
    \ QoS\n   Available, QoS Reserved, and Minimum QoS.  Each of these QSPEC\n   objects\
    \ consists of a number of QSPEC parameters.  A given QSPEC may\n   contain only\
    \ a subset of the QSPEC objects, e.g., QoS Desired.  The\n   QSPEC objects QoS\
    \ Desired, QoS Available, QoS Reserved and Minimum\n   QoS MUST all be supported\
    \ by QNEs and MAY appear in any QSPEC object\n   carried in any QoS NSLP message\
    \ (RESERVE, QUERY, RESPONSE, NOTIFY).\n   See [RFC5974] for descriptions of the\
    \ QoS NSLP RESERVE, QUERY,\n   RESPONSE, and NOTIFY messages.\n   +---------------------------------------+\n\
    \   |            QSPEC Objects              |\n   +---------------------------------------+\n\
    \   \\________________ ______________________/\n                    V\n   +----------+----------+---------+-------+\n\
    \   |QoS Desir.|QoS Avail.|QoS Rsrv.|Min QoS|\n   +----------+----------+---------+-------+\n\
    \   \\____ ____/\\___ _____/\\___ ____/\\__ ___/\n        V         V        \
    \  V        V\n   +-------------+...     +-------------+...\n   |QSPEC Para. 1|\
    \        |QSPEC Para. n|\n   +-------------+...     +-------------+...\n     \
    \  Figure 1: Structure of the QSPEC\n   Use of the 4 QSPEC objects (QoS Desired,\
    \ QoS Available, QoS Reserved,\n   and Minimum QoS) is described in Section 4.3\
    \ for 3 message sequences\n   and 7 object combinations.\n   The QoS Desired Object\
    \ describe the resources the QNI desires to\n   reserve, and hence this is a read-only\
    \ QSPEC object in that the QSPEC\n   parameters carried in the object may not\
    \ be overwritten.  QoS Desired\n   is always included in a RESERVE message and\
    \ sometimes included in the\n   QUERY message (see Section 4.3 for details).\n\
    \   As described in Section 4.3, the QoS Available object may travel in a\n  \
    \ RESERVE message, RESPONSE Message, or QUERY message and may collect\n   information\
    \ on the resources currently available on the path.  In\n   this case, QoS Available\
    \ is a read-write object, which means the\n   QSPEC parameters contained in QoS\
    \ Available may be updated, but they\n   cannot be deleted.  As such, each QNE\
    \ MUST inspect all parameters of\n   this QSPEC object, and if resources available\
    \ to this QNE are less\n   than what a particular parameter says currently, the\
    \ QNE MUST adapt\n   this parameter accordingly.  Hence, when the message arrives\
    \ at the\n   recipient of the message, <QoS Available> reflects the bottleneck\
    \ of\n   the resources currently available on a path.  It can be used in a\n \
    \  QUERY message, for example, to collect the available resources along\n   a\
    \ data path.\n   When QoS Available travels in a RESPONSE message, it in fact\
    \ just\n   transports the result of a previous measurement performed by a\n  \
    \ RESERVE or QUERY message back to the initiator.  Therefore, in this\n   case,\
    \ QoS Available is read-only.  In one other instance described in\n   Section\
    \ 4.3.2 (Case 3), QoS Available is sent by the QNI in a RESERVE\n   message as\
    \ a read-only QSPEC object (see Section 4.3.2 for details).\n   The QoS Reserved\
    \ object reflects the resources that are being\n   reserved.  It is a read-only\
    \ object and is always included in a\n   RESPONSE message if QoS Desired is included\
    \ in the RESERVE message\n   (see Section 4.3 for details).\n   Minimum QoS does\
    \ not have an equivalent in RSVP.  It allows the QNI\n   to define a range of\
    \ acceptable QoS levels by including both the\n   desired QoS value and the minimum\
    \ acceptable QoS in the same message.\n   Note that the term \"minimum\" is used\
    \ generically, since for some\n   parameters, such as loss rate and latency, what\
    \ is specified is the\n   maximum acceptable value.  It is a read-only object,\
    \ and may be\n   included in a RESERVE message, RESPONSE message, or QUERY message\n\
    \   (see Section 4.3 for details).  The desired QoS is included with a\n   QoS\
    \ Desired and/or a QoS Available QSPEC object seeded to the desired\n   QoS value.\
    \  The minimum acceptable QoS value MAY be coded in the\n   Minimum QoS QSPEC\
    \ object.  As the message travels towards the QNR,\n   QoS Available is updated\
    \ by QNEs on the path.  If its value drops\n   below the value of Minimum QoS,\
    \ the reservation fails and is aborted.\n   When this method is employed, the\
    \ QNR signals back to the QNI the\n   value of QoS Available attained in the end,\
    \ because the reservation\n   may need to be adapted accordingly (see Section\
    \ 4.3 for details).\n   Note that the relationship of QSPEC objects to RSVP objects\
    \ is\n   covered in Appendix A.\n"
- title: 3.3.  QSPEC Parameters
  contents:
  - "3.3.  QSPEC Parameters\n   QSPEC parameters provide a common language for building\
    \ QSPEC\n   objects.  This document defines a number of QSPEC parameters;\n  \
    \ additional parameters may be defined in separate QOSM specification\n   documents.\
    \  For example, QSPEC parameters are defined in [RFC5976]\n   and [RFC5977].\n\
    \   One QSPEC parameter, <TMOD>, is special.  It provides a description\n   of\
    \ the traffic for which resources are reserved.  This parameter must\n   be included\
    \ by the QNI, and it must be interpreted by all QNEs.  All\n   other QSPEC parameters\
    \ are populated by a QNI if they are applicable\n   to the underlying QoS desired.\
    \  For these QSPEC parameters, the QNI\n   sets the M flag if they must be interpreted\
    \ by downstream QNEs.  If\n   QNEs cannot interpret the parameter, the reservation\
    \ fails.  QSPEC\n   parameters populated by a QNI without the M flag set should\
    \ be\n   interpreted by downstream QNEs, but may be ignored if not understood.\n\
    \   In this document, the term 'interpret' means, in relation to RMF\n   processing\
    \ of QSPEC parameters, that the RMF processes the QSPEC\n   parameter according\
    \ to the commonly accepted normative procedures\n   specified by references given\
    \ for each QSPEC parameter.  Note that a\n   QNE need only interpret a QSPEC parameter\
    \ if it is populated in the\n   QSPEC object by the QNI; if not populated in the\
    \ QSPEC, the QNE does\n   not interpret it of course.\n   Note that when an ingress\
    \ QNE in a local domain defines a Local QSPEC\n   and encapsulates the Initiator\
    \ QSPEC, the QNEs in the interior local\n   domain need only process the Local\
    \ QSPEC and can ignore the Initiator\n   (encapsulated) QSPEC.  However, edge\
    \ QNEs in the local domain indeed\n   must interpret the QSPEC parameters populated\
    \ in the Initiator QSPEC\n   with the M flag set and should interpret QSPEC parameters\
    \ populated\n   in the Initiator QSPEC without the M flag set.\n   As described\
    \ in the previous section, QoS parameters may be\n   overwritten depending on\
    \ which QSPEC object and which message they\n   appear in.\n"
- title: 3.3.1.  Traffic Model Parameter
  contents:
  - "3.3.1.  Traffic Model Parameter\n   The <Traffic Model> (TMOD) parameter is mandatory\
    \ for the QNI to\n   include in the Initiator QSPEC and mandatory for downstream\
    \ QNEs to\n   interpret.  The traffic description specified by the TMOD parameter\n\
    \   is a container consisting of 5 sub-parameters [RFC2212]:\n   o  rate (r) specified\
    \ in octets per second\n   o  bucket size (b) specified in octets\n   o  peak\
    \ rate (p) specified in octets per second\n   o  minimum policed unit (m) specified\
    \ in octets\n   o  maximum packet size (MPS) specified in octets\n   The TMOD\
    \ parameter takes the form of a token bucket of rate (r) and\n   bucket size (b),\
    \ plus a peak rate (p), minimum policed unit (m), and\n   maximum packet size\
    \ (MPS).\n   Both b and r MUST be positive.  The rate, r, is measured in octets\
    \ of\n   IP packets per second, and can range from 1 octet per second to as\n\
    \   large as 40 teraoctets per second.  The bucket depth, b, is also\n   measured\
    \ in octets and can range from 1 octet to 250 gigaoctets.  The\n   peak rate,\
    \ p, is measured in octets of IP packets per second and has\n   the same range\
    \ and suggested representation as the bucket rate.\n   The peak rate is the maximum\
    \ rate at which the source and any\n   reshaping (defined below) may inject bursts\
    \ of traffic into the\n   network.  More precisely, it is a requirement that for\
    \ all time\n   periods the amount of data sent cannot exceed MPS+pT, where MPS\
    \ is\n   the maximum packet size and T is the length of the time period.\n   Furthermore,\
    \ p MUST be greater than or equal to the token bucket\n   rate, r.  If the peak\
    \ rate is unknown or unspecified, then p MUST be\n   set to infinity.\n   The\
    \ minimum policed unit, m, is an integer measured in octets.  All\n   IP packets\
    \ less than size m will be counted, when policed and tested\n   for conformance\
    \ to the TMOD, as being of size m.\n   The maximum packet size, MPS, is the biggest\
    \ packet that will conform\n   to the traffic specification; it is also measured\
    \ in octets.  The\n   flow MUST be rejected if the requested maximum packet size\
    \ is larger\n   than the MTU of the link.  Both m and MPS MUST be positive, and\
    \ m\n   MUST be less than or equal to MPS.\n   Policing compares arriving traffic\
    \ against the TMOD parameters at the\n   edge of the network.  Traffic is policed\
    \ to ensure it conforms to the\n   token bucket.  Reshaping attempts to restore\
    \ the (possibly distorted)\n   traffic's shape to conform to the TMOD parameters,\
    \ and traffic that\n   is in violation of the TMOD is discovered because the reshaping\
    \ fails\n   and the reshaping buffer overflows.\n   The token bucket and peak\
    \ rate parameters require that traffic MUST\n   obey the rule that over all time\
    \ periods, the amount of data sent\n   cannot exceed MPS+min[pT, rT+b-MPS], where\
    \ r and b are the token\n   bucket parameters, MPS is the maximum packet size,\
    \ and T is the\n   length of the time period (note that when p is infinite, this\
    \ reduces\n   to the standard token bucket requirement).  For the purposes of\
    \ this\n   accounting, links MUST count packets that are smaller than the\n  \
    \ minimum policing unit as being of size m.  Packets that arrive at an\n   element\
    \ and cause a violation of the MPS + min[pT, rT+b-MPS] bound\n   are considered\
    \ non-conformant.\n   All 5 of the sub-parameters MUST be included in the TMOD\
    \ parameter.\n   The TMOD parameter can be set to describe the traffic source.\
    \  If,\n   for example, TMOD is set to specify bandwidth only, then set r = peak\n\
    \   rate = p, b = large, and m = large.  As another example, if TMOD is\n   set\
    \ for TCP traffic, then set r = average rate, b = large, and p =\n   large.\n\
    \   When the 5 TMOD sub-parameters are included in QoS Available, they\n   provide\
    \ information, for example, about the TMOD resources available\n   along the path\
    \ followed by a data flow.  The value of TMOD at a QNE\n   is an estimate of the\
    \ TMOD resources the QNE has available for\n   packets following the path up to\
    \ the next QNE, including its outgoing\n   link, if this link exists.  Furthermore,\
    \ the QNI MUST account for the\n   resources of the ingress link, if this link\
    \ exists.  Computation of\n   the value of this parameter SHOULD take into account\
    \ all information\n   available to the QNE about the path, taking into consideration\n\
    \   administrative and policy controls, as well as physical resources.\n   The\
    \ output composed value is the minimum of the QNE's value and the\n   input composed\
    \ value for r, b, p, and MPS, and the maximum of the\n   QNE's value and the input\
    \ composed value for m.  This quantity, when\n   composed end-to-end, informs\
    \ the QNR (or QNI in a RESPONSE message)\n   of the minimal TMOD resources along\
    \ the path from QNI to QNR.\n   Two TMOD parameters are defined in Section 5,\
    \ <TMOD-1> and <TMOD-2>,\n   where the second parameter (<TMOD-2>) is specified\
    \ as could be needed\n   to support some Diffserv applications.  For example,\
    \ it is typically\n   assumed that Diffserv Expedited Forwarding (EF) traffic\
    \ is shaped at\n   the ingress by a single rate token bucket.  Therefore, a single\
    \ TMOD\n   parameter is sufficient to signal Diffserv EF traffic.  However, for\n\
    \   Diffserv Assured Forwarding (AF) traffic, two sets of token bucket\n   parameters\
    \ are needed -- one for the average traffic and one for the\n   burst traffic.\
    \  [RFC2697] defines a Single Rate Three Color Marker\n   (srTCM), which meters\
    \ a traffic stream and marks its packets\n   according to three traffic parameters,\
    \ Committed Information Rate\n   (CIR), Committed Burst Size (CBS), and Excess\
    \ Burst Size (EBS), to be\n   either green, yellow, or red.  A packet is marked\
    \ green if it does\n   not exceed the CBS; yellow if it does exceed the CBS, but\
    \ not the\n   EBS; and red otherwise.  [RFC2697] defines specific procedures using\n\
    \   two token buckets that run at the same rate.  Therefore, 2 TMOD\n   parameters\
    \ are sufficient to distinguish among 3 levels of drop\n   precedence.  An example\
    \ is also described in the Appendix to\n   [RFC2597].\n"
- title: 3.3.2.  Constraints Parameters
  contents:
  - "3.3.2.  Constraints Parameters\n   <Path Latency>, <Path Jitter>, <Path PLR>,\
    \ and <Path PER> are QSPEC\n   parameters describing the desired path latency,\
    \ path jitter, packet\n   loss ratio, and path packet error ratio, respectively.\
    \  Since these\n   parameters are cumulative, an individual QNE cannot decide\
    \ whether\n   the desired path latency, etc., is available, and hence they cannot\n\
    \   decide whether a reservation fails.  Rather, when these parameters\n   are\
    \ included in <Desired QoS>, the QNI SHOULD also include\n   corresponding parameters\
    \ in a QoS Available QSPEC object in order to\n   facilitate collecting this information.\n\
    \   The <Path Latency> parameter accumulates the latency of the packet\n   forwarding\
    \ process associated with each QNE, where the latency is\n   defined to be the\
    \ mean packet delay, measured in microseconds, added\n   by each QNE.  This delay\
    \ results from the combination of link\n   propagation delay, packet processing,\
    \ and queuing.  Each QNE MUST add\n   the propagation delay of its outgoing link,\
    \ if this link exists.\n   Furthermore, the QNI SHOULD add the propagation delay\
    \ of the ingress\n   link, if this link exists.  The composition rule for the\
    \ <Path\n   Latency> parameter is summation with a clamp of (2^32) - 1 on the\n\
    \   maximum value.  This quantity, when composed end-to-end, informs the\n   QNR\
    \ (or QNI in a RESPONSE message) of the minimal packet delay along\n   the path\
    \ from QNI to QNR.  The purpose of this parameter is to\n   provide a minimum\
    \ path latency for use with services that provide\n   estimates or bounds on additional\
    \ path delay [RFC2212].\n   The <Path Jitter> parameter accumulates the jitter\
    \ of the packet\n   forwarding process associated with each QNE, where the jitter\
    \ is\n   defined to be the nominal jitter, measured in microseconds, added by\n\
    \   each QNE.  IP packet jitter, or delay variation, is defined in\n   [RFC3393],\
    \ Section 3.4 (Type-P-One-way-ipdv), and where the [RFC3393]\n   selection function\
    \ includes the packet with minimum delay such that\n   the distribution is equivalent\
    \ to 2-point delay variation in\n   [Y.1540].  The suggested evaluation interval\
    \ is 1 minute.  This\n   jitter results from packet-processing limitations, and\
    \ includes any\n   variable queuing delay that may be present.  Each QNE MUST\
    \ add the\n   jitter of its outgoing link, if this link exists.  Furthermore,\
    \ the\n   QNI SHOULD add the jitter of the ingress link, if this link exists.\n\
    \   The composition method for the <Path Jitter> parameter is the\n   combination\
    \ of several statistics describing the delay variation\n   distribution with a\
    \ clamp on the maximum value (note that the methods\n   of accumulation and estimation\
    \ of nominal QNE jitter are specified in\n   clause 8 of [Y.1541]).  This quantity,\
    \ when composed end-to-end,\n   informs the QNR (or QNI in a RESPONSE message)\
    \ of the nominal packet\n   jitter along the path from QNI to QNR.  The purpose\
    \ of this parameter\n   is to provide a nominal path jitter for use with services\
    \ that\n   provide estimates or bounds on additional path delay [RFC2212].\n \
    \  The <Path PLR> parameter is the unit-less ratio of total lost IP\n   packets\
    \ to total transmitted IP packets.  <Path PLR> accumulates the\n   packet loss\
    \ ratio (PLR) of the packet-forwarding process associated\n   with each QNE, where\
    \ the PLR is defined to be the PLR added by each\n   QNE.  Each QNE MUST add the\
    \ PLR of its outgoing link, if this link\n   exists.  Furthermore, the QNI MUST\
    \ add the PLR of the ingress link,\n   if this link exists.  The composition rule\
    \ for the <Path PLR>\n   parameter is summation with a clamp on the maximum value.\
    \ (This\n   assumes sufficiently low PLR values such that summation error is not\n\
    \   significant; however, a more accurate composition function is\n   specified\
    \ in clause 8 of [Y.1541].)  This quantity, when composed\n   end-to-end, informs\
    \ the QNR (or QNI in a RESPONSE message) of the\n   minimal packet PLR along the\
    \ path from QNI to QNR.\n   Packet error ratio [Y.1540, Y.1541] is the unit-less\
    \ ratio of total\n   errored IP packet outcomes to the total of successful IP\
    \ packet\n   transfer outcomes plus errored IP packet outcomes in a population\
    \ of\n   interest, with a resolution of at least 10^-9.  If lesser resolution\n\
    \   is available in a value, the unused digits MUST be set to zero.  Note\n  \
    \ that the number of errored packets observed is directly related to\n   the confidence\
    \ in the result.  The <Path PER> parameter accumulates\n   the packet error ratio\
    \ (PER) of the packet forwarding process\n   associated with each QNE, where the\
    \ PER is defined to be the PER\n   added by each QNE.  Each QNE MUST add the PER\
    \ of its outgoing link,\n   if this link exists.  Furthermore, the QNI SHOULD\
    \ add the PER of the\n   ingress link, if this link exists.  The composition rule\
    \ for the\n   <Path PER> parameter is summation with a clamp on the maximum value.\n\
    \   (This assumes sufficiently low PER values such that summation error\n   is\
    \ not significant; however, a more accurate composition function is\n   specified\
    \ in clause 8 of [Y.1541].)  This quantity, when composed\n   end-to-end, informs\
    \ the QNR (or QNI in a RESPONSE message) of the\n   minimal packet PER along the\
    \ path from QNI to QNR.\n   The slack term parameter is the difference between\
    \ desired delay and\n   delay obtained by using bandwidth reservation, and it\
    \ is used to\n   reduce the resource reservation for a flow [RFC2212].\n"
- title: 3.3.3.  Traffic-Handling Directives
  contents:
  - "3.3.3.  Traffic-Handling Directives\n   An application MAY like to reserve resources\
    \ for packets and also\n   specify a specific traffic-handling behavior, such\
    \ as <Excess\n   Treatment>.  In addition, as discussed in Section 3.1, an application\n\
    \   MAY like to define RMF triggers that cause the QoS NSLP to run\n   semantics\
    \ within the underlying QoS NSLP signaling state / messaging\n   processing rules,\
    \ as defined in Section 5.2 of [RFC5974].  Note,\n   however, that new QoS NSLP\
    \ message processing rules can only be\n   defined in extensions to the QoS NSLP.\
    \  As with constraints\n   parameters and other QSPEC parameters, Traffic Handling\
    \ Directives\n   parameters may be defined in QOSM specifications in order to\
    \ provide\n   support for QOSM-specific resource management functions.  Such QOSM-\n\
    \   specific parameters are already defined, for example, in [RFC5976],\n   [RFC5977],\
    \ and [CL-QOSM].  Generally, a Traffic Handling Directives\n   parameters is expected\
    \ to be set by the QNI in <QoS Desired>, and to\n   not be included in <QoS Available>.\
    \  If such a parameter is included\n   in <QoS Available>, QNEs may change their\
    \ value.\n   The <Preemption Priority> parameter is the priority of the new flow\n\
    \   compared with the <Defending Priority> of previously admitted flows.\n   Once\
    \ a flow is admitted, the preemption priority becomes irrelevant.\n   The <Defending\
    \ Priority> parameter is used to compare with the\n   preemption priority of new\
    \ flows.  For any specific flow, its\n   preemption priority MUST always be less\
    \ than or equal to the\n   defending priority.  <Admission Priority> and <RPH\
    \ Priority> provide\n   an essential way to differentiate flows for emergency\
    \ services,\n   Emergency Telecommunications Service (ETS), E911, etc., and assign\n\
    \   them a higher admission priority than normal priority flows and best-\n  \
    \ effort priority flows.\n   The <Excess Treatment> parameter describes how the\
    \ QNE will process\n   out-of-profile traffic.  Excess traffic MAY be dropped,\
    \ shaped,\n   and/or re-marked.\n"
- title: 3.3.4.  Traffic Classifiers
  contents:
  - "3.3.4.  Traffic Classifiers\n   An application MAY like to reserve resources\
    \ for packets with a\n   particular Diffserv per-hop behavior (PHB) [RFC2475].\
    \  Note that PHB\n   class is normally set by a downstream QNE to tell the QNI\
    \ how to mark\n   traffic to ensure the treatment that is designated by admission\n\
    \   control; however, setting of the parameter by the QNI is not\n   precluded.\
    \  An application MAY like to reserve resources for packets\n   with a particular\
    \ QoS class, e.g., Y.1541 QoS class [Y.1541] or\n   Diffserv-aware MPLS traffic\
    \ engineering (DSTE) class type [RFC3564,\n   RFC4124].  These parameters are\
    \ useful in various QOSMs, e.g.,\n   [RFC5976], [RFC5977], and other QOSMs yet\
    \ to be defined (e.g., DSTE-\n   QOSM).  This is intended to provide guidelines\
    \ to QOSMs on how to\n   encode these parameters; use of the PHB class parameter\
    \ is\n   illustrated in the example in the following section.\n"
- title: 3.4.  Example of QSPEC Processing
  contents:
  - "3.4.  Example of QSPEC Processing\n   This section illustrates the operation\
    \ and use of the QSPEC within\n   the NSLP.  The example configuration in shown\
    \ in Figure 2.\n   +----------+      /-------\\       /--------\\       /--------\\\
    \n   | Laptop   |     |   Home  |     |  Cable   |     | Diffserv |\n   | Computer\
    \ |-----| Network |-----| Network  |-----| Network  |----+\n   +----------+  \
    \   | No QOSM |     |DQOS QOSM |     | RMD QOSM |    |\n                     \\\
    -------/       \\--------/       \\--------/     |\n                         \
    \                                            |\n                     +-----------------------------------------------+\n\
    \                     |\n                     |    /--------\\      +----------+\n\
    \                     |   |    XG    |     | Handheld |\n                    \
    \ +---| Wireless |-----|  Device  |\n                         | XG QOSM  |   \
    \  +----------+\n                          \\--------/\n      Figure 2: Example\
    \ Configuration of QoS-NSLP/QSPEC Operation\n   In this configuration, a laptop\
    \ computer and a handheld wireless\n   device are the endpoints for some application\
    \ that has QoS\n   requirements.  Assume initially that the two endpoints are\
    \ stationary\n   during the application session, later we consider mobile endpoints.\n\
    \   For this session, the laptop computer is connected to a home network\n   that\
    \ has no QoS support.  The home network is connected to a\n   CableLabs-type cable\
    \ access network with dynamic QoS (DQOS) support,\n   such as specified in the\
    \ [DQOS] for cable access networks.  That\n   network is connected to a Diffserv\
    \ core network that uses the\n   Resource Management in Diffserv QoS Model [RFC5977].\
    \  On the other\n   side of the Diffserv core is a wireless access network built\
    \ on\n   generation \"X\" technology with QoS support as defined by generation\n\
    \   \"X\".  And finally, the handheld endpoint is connected to the wireless\n\
    \   access network.\n   We assume that the laptop is the QNI, and the handheld\
    \ device is the\n   QNR.  The QNI will signal an Initiator QSPEC object to achieve\
    \ the\n   QoS desired on the path.\n   The QNI sets QoS Desired, QoS Available,\
    \ and possibly Minimum QoS\n   QSPEC objects in the Initiator QSPEC, and initializes\
    \ QoS Available\n   to QoS Desired.  Each QNE on the path reads and interprets\
    \ those\n   parameters in the Initiator QSPEC and checks to see if QoS Available\n\
    \   resources can be reserved.  If not, the QNE reduces the respective\n   parameter\
    \ values in QoS Available and reserves these values.  The\n   minimum parameter\
    \ values are given in Minimum QoS, if populated; they\n   are zero if Minimum\
    \ QoS is not included.  If one or more parameters\n   in QoS Available fails to\
    \ satisfy the corresponding minimum values in\n   Minimum QoS, the QNE generates\
    \ a RESPONSE message to the QNI and the\n   reservation is aborted.  Otherwise,\
    \ the QNR generates a RESPONSE to\n   the QNI with the QoS Available for the reservation.\
    \  If a QNE cannot\n   reserve QoS Desired resources, the reservation fails.\n\
    \   The QNI populates QSPEC parameters to ensure correct treatment of its\n  \
    \ traffic in domains down the path.  Let us assume the QNI wants to\n   achieve\
    \ QoS guarantees similar to IntServ Controlled Load service,\n   and also is interested\
    \ in what path latency it can achieve.\n   Additionally, to ensure correct treatment\
    \ further down the path, the\n   QNI includes <PHB Class> in <QoS Desired>.  The\
    \ QNI therefore\n   includes in the QSPEC\n      QoS Desired = <TMOD> <PHB Class>\n\
    \      QoS Available = <TMOD> <Path Latency>\n   Since <Path Latency> and <PHB\
    \ Class> are not vital parameters from\n   the QNI's perspective, it does not\
    \ raise their M flags.\n   There are three possibilities when a RESERVE message\
    \ is received at a\n   QNE at a domain border; they are described in the example:\n\
    \   - the QNE just leaves the QSPEC as is.\n   - the QNE can add a Local QSPEC\
    \ and encapsulate the Initiator QSPEC\n     (see discussion in Section 4.1; this\
    \ is new in QoS NSLP -- RSVP\n     does not do this).\n   - the QNE can 'hide'\
    \ the initiator RESERVE message so that only the\n     edge QNE processes the\
    \ initiator RESERVE message, which then\n     bypasses intermediate nodes between\
    \ the edges of the domain and\n     issues its own local RESERVE message (see\
    \ Section 3.3.1 of\n     [RFC5974]).  For this new local RESERVE message, the\
    \ QNE acts as\n     the QNI, and the QSPEC in the domain is an Initiator QSPEC.\
    \  A\n     similar procedure is also used by RSVP in making aggregate\n     reservations,\
    \ in which case there is not a new intra-domain\n     (aggregate) RESERVE for\
    \ each newly arriving inter-domain (per-flow)\n     RESERVE, but the aggregate\
    \ reservation is updated by the border QNE\n     (or QNI) as need be.  This is\
    \ also how RMD works [RFC5977].\n   For example, at the RMD domain, a local RESERVE\
    \ with its own RMD\n   Initiator QSPEC corresponding to the RMD-QOSM is generated\
    \ based on\n   the original Initiator QSPEC according to the procedures described\
    \ in\n   Section 4.5 of [RFC5974] and in [RFC5977].  The ingress QNE to the\n\
    \   RMD domain maps the TMOD parameters contained in the original\n   Initiator\
    \ QSPEC to the equivalent TMOD parameter representing only\n   the peak bandwidth\
    \ in the Local QSPEC.  The local RMD QSPEC for\n   example also needs <PHB Class>,\
    \ which in this case was provided by\n   the QNI.\n   Furthermore, if the node\
    \ can, at the egress to the RMD domain, it\n   updates QoS Available on behalf\
    \ of the entire RMD domain.  If it\n   cannot (since the M flag is not set for\
    \ <Path Latency>), it raises\n   the parameter-specific, Not Supported N flag,\
    \ warning the QNR that\n   the final latency value in QoS Available is imprecise.\n\
    \   In the XG domain, the Initiator QSPEC is translated into a local\n   QSPEC\
    \ using a similar procedure as described above.  The Local QSPEC\n   becomes the\
    \ current QSPEC used within the XG domain, and the\n   Initiator QSPEC is encapsulated.\
    \  This saves the QNEs within the XG\n   domain the trouble of re-translating\
    \ the Initiator QSPEC, and\n   simplifies processing in the local domain.  At\
    \ the egress edge of the\n   XG domain, the translated Local QSPEC is removed,\
    \ and the Initiator\n   QSPEC returns to the number one position.\n   If the reservation\
    \ was successful, eventually the RESERVE request\n   arrives at the QNR (otherwise,\
    \ the QNE at which the reservation\n   failed aborts the RESERVE and sends an\
    \ error RESPONSE back to the\n   QNI).  If the RII was included in the QoS NSLP\
    \ message, the QNR\n   generates a positive RESPONSE with QSPEC objects QoS Reserved\
    \ and QoS\n   Available.  The parameters appearing in QoS Reserved are the same\
    \ as\n   in QoS Desired, with values copied from QoS Available.  Hence, the\n\
    \   QNR includes the following QSPEC objects in the RESPONSE:\n      QoS Reserved\
    \ = <TMOD> <PHB Class>\n      QoS Available = <TMOD> <Path Latency>\n   If the\
    \ handheld device on the right of Figure 2 is mobile, and moves\n   through different\
    \ XG wireless networks, then the QoS might change on\n   the path since different\
    \ XG wireless networks might support different\n   QOSMs.  As a result, QoS NSLP/QSPEC\
    \ processing will have to\n   renegotiate the QoS Available on the path.  From\
    \ a QSPEC perspective,\n   this is like a new reservation on the new section of\
    \ the path and is\n   basically the same as any other rerouting event -- to the\
    \ QNEs on the\n   new path, it looks like a new reservation.  That is, in this\
    \ mobile\n   scenario, the new segment may support a different QOSM than the old\n\
    \   segment, and the QNI would now signal a new reservation explicitly\n   (or\
    \ implicitly with the next refreshing RESERVE message) to account\n   for the\
    \ different QOSM in the XG wireless domain.  Further details on\n   rerouting\
    \ are specified in [RFC5974].\n   For bit-level examples of QSPECs, see the documents\
    \ specifying QOSMs:\n   [CL-QOSM], [RFC5976], and [RFC5977].\n"
- title: 4.  QSPEC Processing and Procedures
  contents:
  - "4.  QSPEC Processing and Procedures\n   Three flags are used in QSPEC processing,\
    \ the M flag, E flag, and N\n   flag, which are explained in this section.  The\
    \ QNI sets the M flag\n   for each QSPEC parameter it populates that MUST be interpreted\
    \ by\n   downstream QNEs.  If a QNE does not support the parameter, it sets\n\
    \   the N flag and fails the reservation.  If the QNE supports the\n   parameter\
    \ but cannot meet the resources requested by the parameter,\n   it sets the E\
    \ flag and fails the reservation.\n   If the M flag is not set, the downstream\
    \ QNE SHOULD interpret the\n   parameter.  If the QNE does not support the parameter,\
    \ it sets the N\n   flag and forwards the reservation.  If the QNE supports the\
    \ parameter\n   but cannot meet the resources requested by the parameter, it sets\
    \ the\n   E flag and fails the reservation.\n"
- title: 4.1.  Local QSPEC Definition and Processing
  contents:
  - "4.1.  Local QSPEC Definition and Processing\n   A QNE at the edge of a local\
    \ domain may either a) translate the\n   Initiator QSPEC into a Local QSPEC and\
    \ encapsulate the Initiator\n   QSPEC in the RESERVE message, or b) 'hide' the\
    \ Initiator QSPEC\n   through the local domain and reserve resources by generating\
    \ a new\n   RESERVE message through the local domain containing the Local QSPEC.\n\
    \   In either case, the Initiator QSPEC parameters are interpreted at the\n  \
    \ local domain edges.\n   A Local QSPEC may allow a simpler control plane in a\
    \ local domain.\n   The edge nodes in the local domain must interpret the Initiator\
    \ QSPEC\n   parameters.  They can either initiate a parallel session with Local\n\
    \   QSPEC or define a Local QSPEC and encapsulate the Initiator QSPEC, as\n  \
    \ illustrated in Figure 3.  The Initiator/Local QSPEC bit identifies\n   whether\
    \ the QSPEC is an Initiator QSPEC or a Local QSPEC.  The QSPEC\n   Type indicates,\
    \ for example, that the initiator of the local QSPEC\n   uses to a certain QOSM,\
    \ e.g., CL-QSPEC Type.  It may be useful for\n   the QNI to signal a QSPEC Type\
    \ based on some QOSM (which will\n   necessarily entail populating certain QOSM-related\
    \ parameters) so\n   that a downstream QNE can chose amongst various QOSM-related\n\
    \   processes it might have.  That is, the QNI populates the QSPEC Type,\n   e.g.,\
    \ CL-QSPEC Type and sets the Initiator/Local QSPEC bit to\n   'Initiator'.  A\
    \ local QNE can decide, for whatever reasons, to insert\n   a Local QSPEC Type,\
    \ e.g., RMD-QSPEC Type, and set the local QSPEC\n   Type = RMD-QSPEC and set the\
    \ Initiator/Local QSPEC bit to 'Local'\n   (and encapsulate the Initiator QSPEC\
    \ in the RESERVE or whatever NSLP\n   message).\n   +--------------------------------+\\\
    \n   |   QSPEC Type, QSPEC Procedure  | \\\n   +--------------------------------+\
    \ / Common QSPEC Header\n   |   Init./Local QSPEC bit=Local  |/\n   +================================+\\\
    \n   |  Local-QSPEC Parameter 1       | \\\n   +--------------------------------+\
    \  \\\n   |             ....               |   Local-QSPEC Parameters\n   +--------------------------------+\
    \  /\n   |  Local-QSPEC Parameter n       | /\n   +--------------------------------+/\n\
    \   | +----------------------------+ |\n   | | QSPEC Type, QSPEC Procedure| |\n\
    \   | +----------------------------+ |\n   | | Init./Local QSPEC bit=Init.| |\n\
    \   | +============================+ |\n   | |                            | |\
    \ Encapsulated Initiator QSPEC\n   | |          ....              | |\n   | +----------------------------+\
    \ |\n   +--------------------------------+\n                 Figure 3: Defining\
    \ a Local QSPEC\n   Here the QoS-NSLP only sees and passes one QSPEC up to the\
    \ RMF.\n   Thus, the type of the QSPEC may change within a local domain.  Hence:\n\
    \   o  the QNI signals its QoS requirements with the Initiator QSPEC,\n   o  the\
    \ ingress edge QNE in the local domain translates the Initiator\n      QSPEC parameters\
    \ to equivalent parameters in the local QSPEC,\n   o  the QNEs in the local domain\
    \ only interpret the Local QSPEC\n      parameters, and\n   o  the egress QNE\
    \ in the local domain processes the Local QSPEC and\n      also interprets the\
    \ QSPEC parameters in the Initiator QSPEC.\n   The Local QSPEC MUST be consistent\
    \ with the Initiator QSPEC.  That\n   is, it MUST NOT specify a lower level of\
    \ resources than specified by\n   the Initiator QSPEC.  For example, in RMD the\
    \ TMOD parameters\n   contained in the original Initiator QSPEC are mapped to\
    \ the\n   equivalent TMOD parameter representing only the peak bandwidth in the\n\
    \   Local QSPEC.\n   Note that it is possible to use both a) hiding a QSPEC through\
    \ a\n   local domain by initiating a new RESERVE at the domain edge, and b)\n\
    \   defining a Local QSPEC and encapsulating the Initiator QSPEC, as\n   defined\
    \ above.  However, it is not expected that both the hiding and\n   encapsulating\
    \ functions would be used at the same time for the same\n   flow.\n   The support\
    \ of Local QSPECs is illustrated in Figure 4 for a single\n   flow to show where\
    \ the Initiator and Local QSPECs are used.  The QNI\n   initiates an end-to-end,\
    \ inter-domain QoS NSLP RESERVE message\n   containing the Initiator QSPEC for\
    \ the Y.1541 QOSM.  As illustrated\n   in Figure 4, the RESERVE message crosses\
    \ multiple domains supporting\n   different QOSMs.  In this illustration, the\
    \ Initiator QSPEC arrives\n   in a QoS NSLP RESERVE message at the ingress node\
    \ of the local-QOSM\n   domain.  At the ingress edge node of the local-QOSM domain,\
    \ the end-\n   to-end, inter-domain QoS-NSLP message triggers the generation of\
    \ a\n   Local QSPEC, and the Initiator QSPEC is encapsulated within the\n   messages\
    \ signaled through the local domain.  The local QSPEC is used\n   for QoS processing\
    \ in the local-QOSM domain, and the Initiator QSPEC\n   is used for QoS processing\
    \ outside the local domain.\n   In this example, the QNI sets <QoS Desired>, <Minimum\
    \ QoS>, and <QoS\n   Available> objects to include objectives for the <Path Latency>,\n\
    \   <Path Jitter>, and <Path PER> parameters.  The QNE / local domain\n   sets\
    \ the cumulative parameters, e.g., <Path Latency>, that can be\n   achieved in\
    \ the <QoS Available> object (but not less than specified\n   in <Minimum QoS>).\
    \  If the <QoS Available> fails to satisfy one or\n   more of the <Minimum QoS>\
    \ objectives, the QNE / local domain notifies\n   the QNI and the reservation\
    \ is aborted.  If any QNE cannot meet the\n   requirements designated by the Initiator\
    \ QSPEC to support a QSPEC\n   parameter with the M bit set to zero, the QNE sets\
    \ the N flag for\n   that parameter to one.  Otherwise, the QNR notifies the QNI\
    \ of the\n   <QoS Available> for the reservation.\n   |------|   |------|    \
    \                       |------|   |------|\n   | e2e  |<->| e2e  |<------------------------->|\
    \ e2e  |<->| e2e  |\n   | QOSM |   | QOSM |                           | QOSM |\
    \   | QOSM |\n   |      |   |------|   |-------|   |-------|   |------|   |  \
    \    |\n   | NSLP |   | NSLP |<->| NSLP  |<->| NSLP  |<->| NSLP |   | NSLP |\n\
    \   |Y.1541|   |local |   |local  |   |local  |   |local |   |Y.1541|\n   | QOSM\
    \ |   | QOSM |   | QOSM  |   | QOSM  |   | QOSM |   | QOSM |\n   |------|   |------|\
    \   |-------|   |-------|   |------|   |------|\n   -----------------------------------------------------------------\n\
    \   |------|   |------|   |-------|   |-------|   |------|   |------|\n   | NTLP\
    \ |<->| NTLP |<->| NTLP  |<->| NTLP  |<->| NTLP |<->| NTLP |\n   |------|   |------|\
    \   |-------|   |-------|   |------|   |------|\n     QNI         QNE        QNE\
    \         QNE         QNE       QNR\n   (End)  (Ingress Edge) (Interior)  (Interior)\
    \ (Egress Edge)  (End)\n     Figure 4: Example of Initiator and Local Domain QOSM\
    \ Operation\n"
- title: 4.2.  Reservation Success/Failure, QSPEC Error Codes, and INFO-SPEC
  contents:
  - "4.2.  Reservation Success/Failure, QSPEC Error Codes, and INFO-SPEC\n      Notification\n\
    \   A reservation may not be successful for several reasons:\n   - a reservation\
    \ may fail because the desired resources are not\n     available.  This is a reservation\
    \ failure condition.\n   - a reservation may fail because the QSPEC is erroneous\
    \ or because of\n     a QNE fault.  This is an error condition.\n   A reservation\
    \ may be successful even though some parameters could not\n   be interpreted or\
    \ updated properly:\n   - a QSPEC parameter cannot be interpreted because it is\
    \ an unknown\n     QSPEC parameter type.  This is a QSPEC parameter not supported\n\
    \     condition.  However, the reservation does not fail.  The QNI can\n     still\
    \ decide whether to keep or tear down the reservation depending\n     on the procedures\
    \ specified by the QNI's QOSM.\n   The following sections provide details on the\
    \ handling of\n   unsuccessful reservations and reservations where some parameters\n\
    \   could not be met, as follows:\n   - details on flags used inside the QSPEC\
    \ to convey information on\n     success or failure of individual parameters.\
    \  The formats and\n     semantics of all flags are given in Section 5.\n   -\
    \ the content of the INFO-SPEC [RFC5974], which carries a code\n     indicating\
    \ the outcome of reservations.\n   - the generation of a RESPONSE message to the\
    \ QNI containing both\n     QSPEC and INFO-SPEC objects.\n   Note that when there\
    \ are routers along the path between the QNI and\n   QNR where QoS cannot be provided,\
    \ then the QoS-NSLP generic flag\n   BREAK (B) is set.  The BREAK flag is discussed\
    \ in Section 3.3.5 of\n   [RFC5974].\n"
- title: 4.2.1.  Reservation Failure and Error E Flag
  contents:
  - "4.2.1.  Reservation Failure and Error E Flag\n   The QSPEC parameters each have\
    \ a 'reservation failure error E flag'\n   to indicate which (if any) parameters\
    \ could not be satisfied.  When a\n   resource cannot be satisfied for a particular\
    \ parameter, the QNE\n   detecting the problem raises the E flag in this parameter.\
    \  Note that\n   the TMOD parameter and all QSPEC parameters with the M flag set\
    \ MUST\n   be examined by the RMF, and all QSPEC parameters with the M flag not\n\
    \   set SHOULD be examined by the RMF, and the E flag set to indicate\n   whether\
    \ the parameter could or could not be satisfied.  Additionally,\n   the E flag\
    \ in the corresponding QSPEC object MUST be raised when a\n   resource cannot\
    \ be satisfied for this parameter.  If the reservation\n   failure problem cannot\
    \ be located at the parameter level, only the E\n   flag in the QSPEC object is\
    \ raised.\n   When an RMF cannot interpret the QSPEC because the coding is\n \
    \  erroneous, it raises corresponding reservation failure E flags in the\n   QSPEC.\
    \  Normally, all QSPEC parameters MUST be examined by the RMF,\n   and the erroneous\
    \ parameters appropriately flagged.  In some cases,\n   however, an error condition\
    \ may occur and the E flag of the error-\n   causing QSPEC parameter is raised\
    \ (if possible), but the processing\n   of further parameters may be aborted.\n\
    \   Note that if the QSPEC and/or any QSPEC parameter is found to be\n   erroneous,\
    \ then any QSPEC parameters not satisfied are ignored and\n   the E Flags in the\
    \ QSPEC object MUST NOT be set for those parameters\n   (unless they are erroneous).\n\
    \   Whether E flags denote reservation failure or error can be determined\n  \
    \ by the corresponding error code in the INFO-SPEC in QoS NSLP, as\n   discussed\
    \ below.\n"
- title: 4.2.2.  QSPEC Parameter Not Supported N Flag
  contents:
  - "4.2.2.  QSPEC Parameter Not Supported N Flag\n   Each QSPEC parameter has an\
    \ associated 'Not Supported N flag'.  If\n   the Not Supported N flag is set,\
    \ then at least one QNE along the data\n   transmission path between the QNI and\
    \ QNR cannot interpret the\n   specified QSPEC parameter.  A QNE MUST set the\
    \ Not Supported N flag\n   if it cannot interpret the QSPEC parameter.  If the\
    \ M flag for the\n   parameter is not set, the message should continue to be forwarded\
    \ but\n   with the N flag set, and the QNI has the option of tearing down the\n\
    \   reservation.\n   If a QNE in the path does not support a QSPEC parameter,\
    \ e.g., <Path\n   Latency>, and sets the N flag, then downstream QNEs that support\
    \ the\n   parameter SHOULD still update the parameter, even if the N flag is\n\
    \   set.  However, the presence of the N flag will indicate that the\n   cumulative\
    \ value only provides a bound, and the QNI/QNR decides\n   whether or not to accept\
    \ the reservation with the N flag set.\n"
- title: 4.2.3.  INFO-SPEC Coding of Reservation Outcome
  contents:
  - "4.2.3.  INFO-SPEC Coding of Reservation Outcome\n   As prescribed by [RFC5974],\
    \ the RESPONSE message always contains the\n   INFO-SPEC with an appropriate 'error'\
    \ code.  It usually also contains\n   a QSPEC with QSPEC objects, as described\
    \ in Section 4.3 (\"QSPEC\n   Procedures\").  The RESPONSE message MAY omit the\
    \ QSPEC in case of a\n   successful reservation.\n   The following guidelines\
    \ are provided for setting the error codes in\n   the INFO-SPEC, based on the\
    \ codes provided in Section 5.1.3.6 of\n   [RFC5974]:\n   - NSLP error class 2\
    \ (Success) / 0x01 (Reservation Success):\n     This code is set when all QSPEC\
    \ parameters have been satisfied.  In\n     this case, no E Flag is set; however,\
    \ one or more N flags may be\n     set.\n   - NSLP error class 4 (Transient Failure)\
    \ / 0x07 (Reservation\n     Failure):\n     This code is set when at least one\
    \ QSPEC parameter could not be\n     satisfied, or when a QSPEC parameter with\
    \ M flag set could not be\n     interpreted.  E flags are set for the parameters\
    \ that could not be\n     satisfied at each QNE up to the QNE issuing the RESPONSE\
    \ message.\n     The N flag is set for those parameters that could not be\n  \
    \   interpreted by at least one QNE.  In this case, QNEs receiving the\n     RESPONSE\
    \ message MUST remove the corresponding reservation.\n   - NSLP error class 3\
    \ (Protocol Error) / 0x0c (Malformed QSPEC):\n     Some QSPEC parameters had associated\
    \ errors, E Flags are set for\n     parameters that had errors, and the QNE where\
    \ the error was found\n     rejects the reservation.\n   - NSLP error class 3\
    \ (Protocol Error) / 0x0f (Incompatible QSPEC):\n     A higher version QSPEC is\
    \ signaled and not supported by the QNE.\n   - NSLP error class 6 (QoS Model Error):\n\
    \     QOSM error codes can be defined by QOSM specification documents.  A\n  \
    \   registry is defined in Section 7, IANA Considerations.\n"
- title: 4.2.4.  QNE Generation of a RESPONSE Message
  contents:
  - "4.2.4.  QNE Generation of a RESPONSE Message\n   - Successful Reservation Condition\n\
    \     When a RESERVE message arrives at a QNR and no E Flag is set, the\n    \
    \ reservation is successful.  A RESPONSE message may be generated\n     with INFO-SPEC\
    \ code 'Reservation Success' as described above and in\n     Section 4.3 (\"QSPEC\
    \ Procedures\").\n   - Reservation Failure Condition\n     When a QNE detects\
    \ that a reservation failure occurs for at least\n     one parameter, the QNE\
    \ sets the E Flags for the QSPEC parameters\n     and QSPEC object that failed\
    \ to be satisfied.  According to\n     [RFC5974], the QNE behavior depends on\
    \ whether it is stateful or\n     not.  When a stateful QNE determines the reservation\
    \ failed, it\n     formulates a RESPONSE message that includes an INFO-SPEC with\
    \ the\n     'reservation failure' error code and QSPEC object.  The QSPEC in\n\
    \     the RESPONSE message includes the failed QSPEC parameters marked\n     with\
    \ the E Flag to clearly identify them.\n     The default action for a stateless\
    \ QoS NSLP QNE that detects a\n     reservation failure condition is that it MUST\
    \ continue to forward\n     the RESERVE message to the next stateful QNE, with\
    \ the E Flags\n     appropriately set for each QSPEC parameter.  The next stateful\
    \ QNE\n     then formulates the RESPONSE message as described above.\n   - Malformed\
    \ QSPEC Error Condition\n     When a stateful QNE detects that one or more QSPEC\
    \ parameters are\n     erroneous, the QNE sets the error code 'malformed QSPEC'\
    \ in the\n     INFO-SPEC.  In this case, the QSPEC object with the E Flags\n \
    \    appropriately set for the erroneous parameters is returned within\n     the\
    \ INFO-SPEC object.  The QSPEC object can be truncated or fully\n     included\
    \ within the INFO-SPEC.\n     According to [RFC5974], the QNE behavior depends\
    \ on whether it is\n     stateful or not.  When a stateful QNE determines a malformed\
    \ QSPEC\n     error condition, it formulates a RESPONSE message that includes\
    \ an\n     INFO-SPEC with the 'malformed QSPEC' error code and QSPEC object.\n\
    \     The QSPEC in the RESPONSE message includes, if possible, only the\n    \
    \ erroneous QSPEC parameters and no others.  The erroneous QSPEC\n     parameter(s)\
    \ are marked with the E Flag to clearly identify them.\n     If QSPEC parameters\
    \ are returned in the INFO-SPEC that are not\n     marked with the E flag, then\
    \ any values of these parameters are\n     irrelevant and MUST be ignored by the\
    \ QNI.\n     The default action for a stateless QoS NSLP QNE that detects a\n\
    \     malformed QSPEC error condition is that it MUST continue to forward\n  \
    \   the RESERVE message to the next stateful QNE, with the E Flags\n     appropriately\
    \ set for each QSPEC parameter.  The next stateful QNE\n     will then act as\
    \ described in [RFC5974].\n     A 'malformed QSPEC' error code takes precedence\
    \ over the\n     'reservation failure' error code, and therefore the case of\n\
    \     reservation failure and QSPEC/RMF error conditions are disjoint,\n     and\
    \ the same E Flag can be used in both cases without ambiguity.\n"
- title: 4.2.5.  Special Case of Local QSPEC
  contents:
  - "4.2.5.  Special Case of Local QSPEC\n     When an unsuccessful reservation problem\
    \ occurs inside a local\n     domain where a Local QSPEC is used, only the topmost\
    \ (local) QSPEC\n     is affected (e.g., E flags are raised, etc.).  The encapsulated\n\
    \     Initiator QSPEC is untouched.  However, when the message (RESPONSE\n   \
    \  in case of stateful QNEs; RESERVE in case of stateless QNEs)\n     reaches\
    \ the edge of the local domain, the Local QSPEC is removed.\n     The edge QNE\
    \ must update the Initiator QSPEC on behalf of the\n     entire domain, reflecting\
    \ the information received in the Local\n     QSPEC.  This update concerns both\
    \ parameter values and flags.  Note\n     that some intelligence is needed in\
    \ mapping the E flags, etc., from\n     the local QSPEC to the Initiator QSPEC.\
    \  For example, even if there\n     is no direct match between the parameters\
    \ in the local and\n     Initiator QSPECs, E flags could still be raised in the\
    \ latter.\n"
- title: 4.3.  QSPEC Procedures
  contents:
  - "4.3.  QSPEC Procedures\n     While the QSPEC template aims to put minimal restrictions\
    \ on usage\n     of QSPEC objects, interoperability between QNEs and between QOSMs\n\
    \     must be ensured.  We therefore give below an exhaustive list of\n     QSPEC\
    \ object combinations for the message sequences described in\n     QoS NSLP [RFC5974].\
    \  A specific QOSM may prescribe that only a\n     subset of the procedures listed\
    \ below may be used.\n     Note that QoS NSLP does not mandate the usage of a\
    \ RESPONSE\n     message.  A positive RESPONSE message will only be generated\
    \ if the\n     QNE includes an RII (Request Identification Information) in the\n\
    \     RESERVE message, and a negative RESPONSE message is always\n     generated\
    \ in case of an error or failure.  Some of the QSPEC\n     procedures below, however,\
    \ are only meaningful when a RESPONSE\n     message is possible.  The QNI SHOULD\
    \ in these cases include an RII.\n"
- title: 4.3.1.  Two-Way Transactions
  contents:
  - "4.3.1.  Two-Way Transactions\n     Here, the QNI issues a RESERVE message, which\
    \ may be replied to by\n     a RESPONSE message.  The following 3 cases for QSPEC\
    \ object usage\n     exist:\n     MESSAGE  | OBJECT      | OBJECTS INCLUDED  \
    \ | OBJECTS INCLUDED\n     SEQUENCE | COMBINATION | IN RESERVE MESSAGE | IN RESPONSE\
    \ MESSAGE\n     -----------------------------------------------------------------\n\
    \     0        | 0           | QoS Desired        | QoS Reserved\n           \
    \   |             |                    |\n     0        | 1           | QoS Desired\
    \        | QoS Reserved\n              |             | QoS Available      | QoS\
    \ Available\n              |             |                    |\n     0      \
    \  | 2           | QoS Desired        | QoS Reserved\n              |        \
    \     | QoS Available      | QoS Available\n              |             | Minimum\
    \ QoS        |\n       Table 1: Message Sequence 0: Two-Way Transactions\n   \
    \             Defining Object Combinations 0, 1, and 2\n     Case 1:\n     If\
    \ only QoS Desired is included in the RESERVE message, the\n     implicit assumption\
    \ is that exactly these resources must be\n     reserved.  If this is not possible,\
    \ the reservation fails.  The\n     parameters in QoS Reserved are copied from\
    \ the parameters in QoS\n     Desired.  If the reservation is successful, the\
    \ RESPONSE message\n     can be omitted in this case.  If a RESPONSE message was\
    \ requested\n     by a QNE on the path, the QSPEC in the RESPONSE message can\
    \ be\n     omitted.\n     Case 2:\n     When QoS Available is included in the\
    \ RESERVE message also, some\n     parameters will appear only in QoS Available\
    \ and not in QoS\n     Desired.  It is assumed that the value of these parameters\
    \ is\n     collected for informational purposes only (e.g., path latency).\n \
    \    However, some parameters in QoS Available can be the same as in QoS\n   \
    \  Desired.  For these parameters, the implicit message is that the\n     QNI\
    \ would be satisfied by a reservation with lower parameter values\n     than specified\
    \ in QoS Desired.  For these parameters, the QNI seeds\n     the parameter values\
    \ in QoS Available to those in QoS Desired\n     (except for cumulative parameters\
    \ such as <Path Latency>).\n     Each QNE interprets the parameters in QoS Available\
    \ according to\n     its current capabilities.  Reservations in each QNE are hence\
    \ based\n     on current parameter values in QoS Available (and additionally\n\
    \     those parameters that only appear in QoS Desired).  The drawback of\n  \
    \   this approach is that, if the resulting resource reservation\n     becomes\
    \ gradually smaller towards the QNR, QNEs close to the QNI\n     have an oversized\
    \ reservation, possibly resulting in unnecessary\n     costs for the user.  Of\
    \ course, in the RESPONSE the QNI learns what\n     the actual reservation is\
    \ (from the QoS RESERVED object) and can\n     immediately issue a properly sized\
    \ refreshing RESERVE.  The\n     advantage of the approach is that the reservation\
    \ is performed in\n     half-a-roundtrip time.\n     The QSPEC parameter IDs and\
    \ values included in the QoS Reserved\n     object in the RESPONSE message MUST\
    \ be the same as those in the QoS\n     Desired object in the RESERVE message.\
    \  For those QSPEC parameters\n     that were also included in the QoS Available\
    \ object in the RESERVE\n     message, their value is copied from the QoS Available\
    \ object (in\n     RESERVE) into the QoS Reserved object (in RESPONSE).  For the\
    \ other\n     QSPEC parameters, the value is copied from the QoS Desired object\n\
    \     (the reservation would fail if the corresponding QoS could not be\n    \
    \ reserved).\n     All parameters in the QoS Available object in the RESPONSE\
    \ message\n     are copied with their values from the QoS Available object in\
    \ the\n     RESERVE message (irrespective of whether they have also been copied\n\
    \     into the QoS Desired object).  Note that the parameters in the QoS\n   \
    \  Available object can be overwritten in the RESERVE message, whereas\n     they\
    \ cannot be overwritten in the RESPONSE message.\n     In this case, the QNI SHOULD\
    \ request a RESPONSE message since it\n     will otherwise not learn what QoS\
    \ is available.\n     Case 3:\n     This case is handled as case 2, except that\
    \ the reservation fails\n     when QoS Available becomes less than Minimum QoS\
    \ for one parameter.\n     If a parameter appears in the QoS Available object\
    \ but not in the\n     Minimum QoS object, it is assumed that there is no minimum\
    \ value\n     for this parameter.\n     Regarding Traffic Handling Directives,\
    \ the default rule is that all\n     QSPEC parameters that have been included\
    \ in the RESERVE message by\n     the QNI are also included in the RESPONSE message\
    \ by the QNR with\n     the value they had when arriving at the QNR.  When traveling\
    \ in the\n     RESPONSE message, all Traffic Handling Directives parameters are\n\
    \     read-only.  Note that a QOSM specification may define its own\n     Traffic\
    \ Handling Directives parameters and processing rules.\n"
- title: 4.3.2.  Three-Way Transactions
  contents:
  - "4.3.2.  Three-Way Transactions\n     Here, the QNR issues a QUERY message that\
    \ is replied to by the QNI\n     with a RESERVE message if the reservation was\
    \ successful.  The QNR\n     in turn sends a RESPONSE message to the QNI.  The\
    \ following 3 cases\n     for QSPEC object usage exist:\n     MSG.|OBJ.|OBJECTS\
    \ INCLUDED |OBJECTS INCLUDED   |OBJECTS INCLUDED\n     SEQ.|COM.|IN QUERY MESSAGE\
    \ |IN RESERVE MESSAGE |IN RESPONSE MESSAGE\n     -------------------------------------------------------------------\n\
    \     1   |0   |QoS Desired      |QoS Desired        |QoS Reserved\n         |\
    \    |                 |                   |\n     1   |1   |QoS Desired     \
    \ |QoS Desired        |QoS Reserved\n         |    |(Minimum QoS)    |QoS Available\
    \      |QoS Available\n         |    |                 |(Minimum QoS)      |\n\
    \         |    |                 |                   |\n     1   |2   |QoS Desired\
    \      |QoS Desired        |QoS Reserved\n         |    |QoS Available    |QoS\
    \ Available      |\n       Table 2: Message Sequence 1: Three-Way Transactions\n\
    \                Defining Object Combinations 0, 1, and 2\n     Cases 1 and 2:\n\
    \     The idea is that the sender (QNR in this scenario) needs to inform\n   \
    \  the receiver (QNI in this scenario) about the QoS it desires.  To\n     this\
    \ end, the sender sends a QUERY message to the receiver\n     including a QoS\
    \ Desired QSPEC object.  If the QoS is negotiable, it\n     additionally includes\
    \ a (possibly zero) Minimum QoS object, as in\n     Case 2.\n     The RESERVE\
    \ message includes the QoS Available object if the sender\n     signaled that\
    \ QoS is negotiable (i.e., it included the Minimum QoS\n     object).  If the\
    \ Minimum QoS object received from the sender is\n     included in the QUERY message,\
    \ the QNI also includes the Minimum\n     QoS object in the RESERVE message.\n\
    \     For a successful reservation, the RESPONSE message in case 1 is\n     optional\
    \ (as is the QSPEC inside).  In case 2, however, the\n     RESPONSE message is\
    \ necessary in order for the QNI to learn about\n     the QoS available.\n   \
    \  Case 3:\n     This is the 'RSVP-style' scenario.  The sender (QNR in this\n\
    \     scenario) issues a QUERY message with a QoS Desired object\n     informing\
    \ the receiver (QNI in this scenario) about the QoS it\n     desires, as above.\
    \  It also includes a QoS Available object to\n     collect path properties. \
    \ Note that here path properties are\n     collected with the QUERY message, whereas\
    \ in the previous case, 2\n     path properties were collected in the RESERVE\
    \ message.\n     Some parameters in the QoS Available object may be the same as\
    \ in\n     the QoS Desired object.  For these parameters, the implicit message\n\
    \     is that the sender would be satisfied by a reservation with lower\n    \
    \ parameter values than specified in QoS Desired.\n     It is possible for the\
    \ QoS Available object to contain parameters\n     that do not appear in the QoS\
    \ Desired object.  It is assumed that\n     the value of these parameters is collected\
    \ for informational\n     purposes only (e.g., path latency).  Parameter values\
    \ in the QoS\n     Available object are seeded according to the sender's capabilities.\n\
    \     Each QNE remaps or approximately interprets the parameter values\n     according\
    \ to its current capabilities.\n     The receiver (QNI in this scenario) signals\
    \ the QoS Desired object\n     as follows: For those parameters that appear in\
    \ both the QoS\n     Available object and QoS Desired object in the QUERY message,\
    \ it\n     takes the (possibly remapped) QSPEC parameter values from the QoS\n\
    \     Available object.  For those parameters that only appear in the QoS\n  \
    \   Desired object, it adopts the parameter values from the QoS Desired\n    \
    \ object.\n     The parameters in the QoS Available QSPEC object in the RESERVE\n\
    \     message are copied with their values from the QoS Available QSPEC\n    \
    \ object in the QUERY message.  Note that the parameters in the QoS\n     Available\
    \ object can be overwritten in the QUERY message, whereas\n     they cannot be\
    \ overwritten in the RESERVE message.\n     The advantage of this model compared\
    \ to the sender-initiated\n     reservation is that the situation of over-reservation\
    \ in QNEs close\n     to the QNI (as described above) does not occur.  On the\
    \ other hand,\n     the QUERY message may find, for example, a particular bandwidth\
    \ is\n     not available.  When the actual reservation is performed, however,\n\
    \     the desired bandwidth may meanwhile have become free.  That is, the\n  \
    \   'RSVP style' may result in a smaller reservation than necessary.\n     The\
    \ sender includes all QSPEC parameters it cares about in the\n     QUERY message.\
    \  Parameters that can be overwritten are updated by\n     QNEs as the QUERY message\
    \ travels towards the receiver.  The\n     receiver includes all QSPEC parameters\
    \ arriving in the QUERY\n     message also in the RESERVE message, with the value\
    \ they had when\n     arriving at the receiver.  Again, QOSM-specific QSPEC parameters\n\
    \     and procedures may be defined in QOSM specification documents.\n     Also\
    \ in this scenario, the QNI SHOULD request a RESPONSE message\n     since it will\
    \ otherwise not learn what QoS is available.\n     Regarding Traffic Handling\
    \ Directives, the default rule is that all\n     QSPEC parameters that have been\
    \ included in the RESERVE message by\n     the QNI are also included in the RESPONSE\
    \ message by the QNR with\n     the value they had when arriving at the QNR. \
    \ When traveling in the\n     RESPONSE message, all Traffic Handling Directives\
    \ parameters are\n     read-only.  Note that a QOSM specification may define its\
    \ own\n     Traffic Handling Directives parameters and processing rules.\n"
- title: 4.3.3.  Resource Queries
  contents:
  - "4.3.3.  Resource Queries\n     Here, the QNI issues a QUERY message in order\
    \ to investigate what\n     resources are currently available.  The QNR replies\
    \ with a RESPONSE\n     message.\n     MESSAGE  | OBJECT      | OBJECTS INCLUDED\
    \   | OBJECTS INCLUDED\n     SEQUENCE | COMBINATION | IN QUERY MESSAGE   | IN\
    \ RESPONSE MESSAGE\n     -----------------------------------------------------------------\n\
    \     2        | 0           | QoS Available      | QoS Available\n          \
    \ Table 3: Message Sequence 2: Resource Queries\n                    Defining\
    \ Object Combination 0\n     Note that the QoS Available object when traveling\
    \ in the QUERY\n     message can be overwritten, whereas in the RESPONSE message\
    \ it\n     cannot be overwritten.\n     Regarding Traffic Handling Directives,\
    \ the default rule is that all\n     QSPEC parameters that have been included\
    \ in the RESERVE message by\n     the QNI are also included in the RESPONSE message\
    \ by the QNR with\n     the value they had when arriving at the QNR.  When traveling\
    \ in the\n     RESPONSE message, all Traffic Handling Directives parameters are\n\
    \     read-only.  Note that a QOSM specification may define its own\n     Traffic\
    \ Handling Directives parameters and processing rules.\n"
- title: 4.3.4.  Bidirectional Reservations
  contents:
  - "4.3.4.  Bidirectional Reservations\n     On a QSPEC level, bidirectional reservations\
    \ are no different from\n     unidirectional reservations, since QSPECs for different\
    \ directions\n     never travel in the same message.\n"
- title: 4.3.5.  Preemption
  contents:
  - "4.3.5.  Preemption\n     A flow can be preempted by a QNE based on QNE policy,\
    \ where a\n     decision to preempt a flow may account for various factors such\
    \ as,\n     for example, the values of the QSPEC preemption priority and\n   \
    \  defending priority parameters as described in Section 5.2.8.  In\n     this\
    \ case, the reservation state for this flow is torn down in the\n     QNE, and\
    \ the QNE sends a NOTIFY message to the QNI, as described in\n     [RFC5974].\
    \  The NOTIFY message carries an INFO-SPEC with the error\n     code as described\
    \ in [RFC5974].  A QOSM specification document may\n     specify whether a NOTIFY\
    \ message also carries a QSPEC object.  The\n     QNI would normally tear down\
    \ the preempted reservation by sending a\n     RESERVE message with the TEAR flag\
    \ set using the SII of the\n     preempted reservation.  However, the QNI can\
    \ follow other\n     procedures as specified in its QOSM specification document.\n"
- title: 4.4.  QSPEC Extensibility
  contents:
  - "4.4.  QSPEC Extensibility\n     Additional QSPEC parameters MAY need to be defined\
    \ in the future\n     and are defined in separate informational documents.  For\
    \ example,\n     QSPEC parameters are defined in [RFC5977] and [RFC5976].\n  \
    \   Guidelines on the technical criteria to be followed in evaluating\n     requests\
    \ for new codepoint assignments for QSPEC objects and QSPEC\n     parameters are\
    \ given in Section 7, IANA Considerations.\n"
- title: 5.  QSPEC Functional Specification
  contents:
  - "5.  QSPEC Functional Specification\n     This section defines the encodings of\
    \ the QSPEC parameters.  We\n     first give the general QSPEC formats and then\
    \ the formats of the\n     QSPEC objects and parameters.\n     Network octet order\
    \ ('big-endian') for all 16- and 32-bit integers,\n     as well as 32-bit floating\
    \ point numbers, is as specified in\n     [RFC4506], [IEEE754], and [NETWORK-OCTET-ORDER].\n"
- title: 5.1.  General QSPEC Formats
  contents:
  - "5.1.  General QSPEC Formats\n     The format of the QSPEC closely follows that\
    \ used in GIST [RFC5971]\n     and QoS NSLP [RFC5974].  Every object (and parameter)\
    \ has the\n     following general format:\n   o  The overall format is Type-Length-Value\
    \ (in that order).\n   o  Some parts of the type field are set aside for control\
    \ flags.\n   o  Length has the units of 32-bit words, and measures the length\
    \ of\n      Value.  If there is no Value, Length=0.  The Object length\n     \
    \ excludes the header.\n   o  Value is a whole number of 32-bit words.  If there\
    \ is any padding\n      required, the length and location MUST be defined by the\
    \ object-\n      specific format information; objects that contain variable-length\n\
    \      types may need to include additional length subfields to do so.\n   o \
    \ Any part of the object used for padding or defined as reserved\n      (\"r\"\
    ) MUST be set to 0 on transmission and MUST be ignored on\n      reception.\n\
    \   o  Empty QSPECs and empty QSPEC Objects MUST NOT be used.\n   o  Duplicate\
    \ objects, duplicate parameters, and/or multiple\n      occurrences of a parameter\
    \ MUST NOT be used.\n       0                   1                   2        \
    \           3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Common QSPEC Header                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      //\
    \                       QSPEC Objects                         //\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 5.1.1.  Common Header Format
  contents:
  - "5.1.1.  Common Header Format\n   The Common QSPEC Header is a fixed 4-octet object\
    \ containing the\n   QSPEC Version, QSPEC Type, an identifier for the QSPEC Procedure\
    \ (see\n   Section 4.3), and an Initiator/Local QSPEC bit:\n    0            \
    \       1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Vers.|I|QSPECType|r|r|  QSPEC Proc.  |        Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Vers.: Identifies the QSPEC version number.  QSPEC Version 0 is\n        \
    \  assigned by this specification in Section 7 (IANA\n          Considerations).\n\
    \   QSPEC Type: Identifies the particular type of QSPEC, e.g., a QSPEC\n     \
    \          Type corresponding to a particular QOSM.  QSPEC Type 0\n          \
    \     (default) is assigned by this specification in Section 7\n             \
    \  (IANA Considerations).\n   QSPEC Proc.: Identifies the QSPEC procedure and\
    \ is composed of two\n                times 4 bits.  The first field identifies\
    \ the Message\n                Sequence; the second field identifies the QSPEC\
    \ Object\n                Combination used for this particular message sequence:\n\
    \                 0 1 2 3 4 5 6 7\n                +-+-+-+-+-+-+-+-+\n       \
    \         |Mes.Sq |Obj.Cmb|\n                +-+-+-+-+-+-+-+-+\n             \
    \   The Message Sequence field can attain the following\n                values:\n\
    \                0: Sender-Initiated Reservations\n                1: Receiver-Initiated\
    \ Reservations\n                2: Resource Queries\n                The Object\
    \ Combination field can take the values between\n                1 and 3 indicated\
    \ in the tables in Section 4.3:\n                Message Sequence: 0\n       \
    \         Object Combination: 0, 1, 2\n                Semantic: see Table 1 in\
    \ Section 4.3.1\n                Message Sequence: 1\n                Object Combination:\
    \ 0, 1, 2\n                Semantic: see Table 2 in Section 4.3.2\n          \
    \      Message Sequence: 2\n                Object Combination: 0\n          \
    \      Semantic: see Table 3 in Section 4.3.3\n   I: Initiator/Local QSPEC bit\
    \ identifies whether the QSPEC is an\n      initiator QSPEC or a Local QSPEC,\
    \ and is set to the following\n      values:\n               0: Initiator QSPEC\n\
    \               1: Local QSPEC\n   Length: The total length of the QSPEC (in 32-bit\
    \ words) excluding the\n           common header\n   The QSPEC Objects field is\
    \ a collection of QSPEC objects (QoS\n   Desired, QoS Available, etc.), which\
    \ share a common format and each\n   contain several parameters.\n"
- title: 5.1.2.  QSPEC Object Header Format
  contents:
  - "5.1.2.  QSPEC Object Header Format\n   QSPEC objects share a common header format:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |E|r|r|r|       Object Type     |r|r|r|r|         Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   E Flag: Set if an error occurs on object level\n   Object Type = 0: QoS Desired\
    \ (parameters cannot be overwritten)\n               = 1: QoS Available (parameters\
    \ may be overwritten; see\n                    Section 3.2)\n               =\
    \ 2: QoS Reserved (parameters cannot be overwritten)\n               = 3: Minimum\
    \ QoS (parameters cannot be overwritten)\n   The r bits are reserved.\n   Each\
    \ QSPEC or QSPEC parameter within an object is encoded in the same\n   way in\
    \ TLV format using a similar parameter header:\n    0                   1    \
    \               2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|     Parameter ID      |r|r|r|r|         Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   M Flag: When set, indicates the subsequent parameter MUST be\n           interpreted.\
    \  Otherwise, the parameter can be ignored if not\n           understood.\n  \
    \ E Flag: When set, indicates either a) a reservation failure where the\n    \
    \       QSPEC parameter is not met, or b) an error occurred when this\n      \
    \     parameter was being interpreted (see Section 4.2.1).\n   N Flag: Not Supported\
    \ QSPEC parameter flag (see Section 4.2.2).\n   Parameter ID: Assigned consecutively\
    \ to each QSPEC parameter.\n                 Parameter IDs are assigned to each\
    \ QSPEC parameter\n                 defined in this document in Sections 5.2 and\
    \ 7 (IANA\n                 Considerations).\n   Parameters are usually coded\
    \ individually, for example, the <Excess\n   Treatment> parameter (Section 5.2.11).\
    \  However, it is also possible\n   to combine several sub-parameters into one\
    \ parameter field, which is\n   called 'container coding'.  This coding is useful\
    \ if either a) the\n   sub-parameters always occur together (as for example the\
    \ 5 sub-\n   parameters that jointly make up the TMOD), or b) in order to make\n\
    \   coding more efficient when the length of each sub-parameter value is\n   much\
    \ less than a 32-bit word (as for example described in [RFC5977])\n   and to avoid\
    \ header overload.  When a container is defined, the\n   Parameter ID and the\
    \ M, E, and N flags refer to the container.\n   Examples of container parameters\
    \ are <TMOD> (specified below) and the\n   PHR (Per Hop Reservation) container\
    \ parameter specified in [RFC5977].\n"
- title: 5.2.  QSPEC Parameter Coding
  contents:
  - "5.2.  QSPEC Parameter Coding\n   The references in the following sections point\
    \ to the normative\n   procedures for processing the QSPEC parameters and sub-parameters.\n"
- title: 5.2.1.  <TMOD-1> Parameter
  contents:
  - "5.2.1.  <TMOD-1> Parameter\n   The <TMOD-1> parameter consists of the <r>, <b>,\
    \ <p>, <m>, and <MPS>\n   sub-parameters [RFC2212], which all must be populated\
    \ in the <TMOD-1>\n   parameter.  Note that a second TMOD QSPEC parameter <TMOD-2>\
    \ is\n   specified below in Section 5.2.2.\n   The coding for the <TMOD-1> parameter\
    \ is as follows:\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |1|E|0|r|\
    \           1           |r|r|r|r|          5            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  TMOD Rate-1 (r) (32-bit IEEE floating point number)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  TMOD Size-1 (b) (32-bit IEEE floating point number)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Peak Data Rate-1 (p) (32-bit IEEE floating point number)     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Minimum Policed Unit-1 (m) (32-bit unsigned integer)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maximum Packet Size-1 (MPS) (32-bit unsigned integer)        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The <TMOD-1> parameters are represented by three floating point\n   numbers\
    \ in single-precision IEEE floating point format [IEEE754]\n   followed by two\
    \ 32-bit integers in network octet order.  The first\n   floating point value\
    \ is the rate (r), the second floating point value\n   is the bucket size (b),\
    \ the third floating point is the peak rate\n   (p), the first unsigned integer\
    \ is the minimum policed unit (m), and\n   the second unsigned integer is the\
    \ maximum packet size (MPS).  The\n   values of r and p are measured in octets\
    \ per second; b, m, and MPS\n   are measured in octets.  When r, b, and p terms\
    \ are represented as\n   IEEE floating point values, the sign bit MUST be zero\
    \ (all values\n   MUST be non-negative).  Exponents less than 127 (i.e., 0) are\n\
    \   prohibited.  Exponents greater than 162 (i.e., positive 35) are\n   discouraged,\
    \ except for specifying a peak rate of infinity.  Infinity\n   is represented\
    \ with an exponent of all ones (255), and a sign bit and\n   mantissa of all zeroes.\n"
- title: 5.2.2.  <TMOD-2> Parameter
  contents:
  - "5.2.2.  <TMOD-2> Parameter\n   A second QSPEC <TMOD-2> parameter is specified\
    \ as could be needed,\n   for example, to support some Diffserv applications.\n\
    \   The coding for the <TMOD-2> parameter is as follows:\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           2           |r|r|r|r|          5            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  TMOD Rate-2 (r) (32-bit IEEE floating point number)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  TMOD Size-2 (b) (32-bit IEEE floating point number)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Peak Data Rate-2 (p) (32-bit IEEE floating point number)     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Minimum Policed Unit-2 (m) (32-bit unsigned integer)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maximum Packet Size-2 (MPS) (32-bit unsigned integer)        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The <TMOD-2> parameters are represented by three floating point\n   numbers\
    \ in single-precision IEEE floating point format [IEEE754]\n   followed by two\
    \ 32-bit integers in network octet order.  The first\n   floating point value\
    \ is the rate (r), the second floating point value\n   is the bucket size (b),\
    \ the third floating point is the peak rate\n   (p), the first unsigned integer\
    \ is the minimum policed unit (m), and\n   the second unsigned integer is the\
    \ maximum packet size (MPS).  The\n   values of r and p are measured in octets\
    \ per second; b, m, and MPS\n   are measured in octets.  When r, b, and p terms\
    \ are represented as\n   IEEE floating point values, the sign bit MUST be zero\
    \ (all values\n   MUST be non-negative).  Exponents less than 127 (i.e., 0) are\n\
    \   prohibited.  Exponents greater than 162 (i.e., positive 35) are\n   discouraged,\
    \ except for specifying a peak rate of infinity.  Infinity\n   is represented\
    \ with an exponent of all ones (255), and a sign bit and\n   mantissa of all zeroes.\n"
- title: 5.2.3.  <Path Latency> Parameter
  contents:
  - "5.2.3.  <Path Latency> Parameter\n    0                   1                 \
    \  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           3           |r|r|r|r|          1            |\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   |                Path Latency (32-bit unsigned integer)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Path Latency [RFC2215] is a single 32-bit unsigned integer in\n   network\
    \ octet order.  The intention of the Path Latency parameter is\n   the same as\
    \ the Minimal Path Latency parameter defined in Section 3.4\n   of [RFC2215].\
    \  The purpose of this parameter is to provide a baseline\n   minimum path latency\
    \ for use with services that provide estimates or\n   bounds on additional path\
    \ delay, such as in [RFC2212].  Together with\n   the queuing delay bound offered\
    \ by [RFC2212] and similar services,\n   this parameter gives the application\
    \ knowledge of both the minimum\n   and maximum packet delivery delay.\n   The\
    \ composition rule for the <Path Latency> parameter is summation\n   with a clamp\
    \ of (2^32) - 1 on the maximum value.  The latencies are\n   average values reported\
    \ in units of one microsecond.  A system with\n   resolution less than one microsecond\
    \ MUST set unused digits to zero.\n   An individual QNE can add a latency value\
    \ between 1 and 2^28\n   (somewhat over two minutes), and the total latency added\
    \ across all\n   QNEs can range as high as (2^32)-2.  If the sum of the different\n\
    \   elements delays exceeds (2^32)-2, the end-to-end cumulative delay\n   SHOULD\
    \ be reported as indeterminate = (2^32)-1.  A QNE that cannot\n   accurately predict\
    \ the latency of packets it is processing MUST raise\n   the Not Supported N flag\
    \ and either leave the value of Path Latency\n   as is, or add its best estimate\
    \ of its lower bound.  A raised not-\n   supported flag indicates the value of\
    \ Path Latency is a lower bound\n   of the real Path Latency.  The distinguished\
    \ value (2^32)-1 is taken\n   to mean indeterminate latency because the composition\
    \ function limits\n   the composed sum to this value; it indicates the range of\
    \ the\n   composition calculation was exceeded.\n"
- title: 5.2.4.  <Path Jitter> Parameter
  contents:
  - "5.2.4.  <Path Jitter> Parameter\n    0                   1                  \
    \ 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           4           |r|r|r|r|          4            |\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   |    Path Jitter STAT1(variance) (32-bit unsigned integer)      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Path Jitter STAT2(99.9%-ile) (32-bit unsigned integer)     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Path Jitter STAT3(minimum Latency) (32-bit unsigned integer)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Path Jitter STAT4(Reserved)     (32-bit unsigned integer)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Path Jitter is a set of four 32-bit unsigned integers in network\n   octet\
    \ order [RFC3393, Y.1540, Y.1541].  As noted in Section 3.3.2,\n   the Path Jitter\
    \ parameter is called \"IP Delay Variation\" in\n   [RFC3393].  The Path Jitter\
    \ parameter is the combination of four\n   statistics describing the Jitter distribution\
    \ with a clamp of (2^32)\n   - 1 on the maximum of each value.  The jitter STATs\
    \ are reported in\n   units of one microsecond.  A system with resolution less\
    \ than one\n   microsecond MUST set unused digits to zero.  An individual QNE\
    \ can\n   add jitter values between 1 and 2^28 (somewhat over two minutes), and\n\
    \   the total jitter computed across all QNEs can range as high as\n   (2^32)-2.\
    \  If the combination of the different element values exceeds\n   (2^32)-2, the\
    \ end-to-end cumulative jitter SHOULD be reported as\n   indeterminate.  A QNE\
    \ that cannot accurately predict the jitter of\n   packets it is processing MUST\
    \ raise the not-supported flag and either\n   leave the value of Path Jitter as\
    \ is, or add its best estimate of its\n   STAT values.  A raised not-supported\
    \ flag indicates the value of Path\n   Jitter is a lower bound of the real Path\
    \ Jitter.  The distinguished\n   value (2^32)-1 is taken to mean indeterminate\
    \ jitter.  A QNE that\n   cannot accurately predict the jitter of packets it is\
    \ processing\n   SHOULD set its local Path Jitter parameter to this value.  Because\n\
    \   the composition function limits the total to this value, receipt of\n   this\
    \ value at a network element or application indicates that the\n   true Path Jitter\
    \ is not known.  This MAY happen because one or more\n   network elements could\
    \ not supply a value or because the range of the\n   composition calculation was\
    \ exceeded.\n   NOTE: The Jitter composition function makes use of the <Path Latency>\n\
    \   parameter.  Composition functions for loss, latency, and jitter may\n   be\
    \ found in [Y.1541].  Development continues on methods to combine\n   jitter values\
    \ to estimate the value of the complete path, and\n   additional statistics may\
    \ be needed to support new methods (the\n   methods are standardized in [RFC5481]\
    \ and [COMPOSITION]).\n"
- title: 5.2.5.  <Path PLR> Parameter
  contents:
  - "5.2.5.  <Path PLR> Parameter\n    0                   1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           5           |r|r|r|r|          1            |\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   |             Path Packet Loss Ratio (32-bit floating point)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Path PLR is a single 32-bit single precision IEEE floating point\n   number\
    \ in network octet order [Y.1541].  As defined in [Y.1540], Path\n   PLR is the\
    \ ratio of total lost IP packets to total transmitted IP\n   packets.  An evaluation\
    \ interval of 1 minute is suggested in\n   [Y.1541], in which the number of losses\
    \ observed is directly related\n   to the confidence in the result.  The composition\
    \ rule for the <Path\n   PLR> parameter is summation with a clamp of 10^-1 on\
    \ the maximum\n   value.  The PLRs are reported in units of 10^-11.  A system\
    \ with\n   resolution less than 10^-11 MUST set unused digits to zero.  An\n \
    \  individual QNE adds its local PLR value (up to a maximum of 10^-2) to\n   the\
    \ total Path PLR value (up to a maximum of 10^-1) , where the\n   acceptability\
    \ of the total Path PLR value added across all QNEs is\n   determined based on\
    \ the QOSM being used.  The maximum limit of 10^-2\n   on a QNE's local PLR value\
    \ and the maximum limit (clamp value) of\n   10^-1 on the accumulated end-to-end\
    \ Path PLR value are used to\n   preserve the accuracy of the simple additive\
    \ accumulation function\n   specified and to avoid more complex accumulation functions.\n\
    \   Furthermore, if these maximums are exceeded, then the path would\n   likely\
    \ not meet the QoS objectives.  If the sum of the different\n   elements' values\
    \ exceeds 10^-1, the end-to-end cumulative PLR SHOULD\n   be reported as indeterminate.\
    \  A QNE that cannot accurately predict\n   the PLR of packets it is processing\
    \ MUST raise the not-supported flag\n   and either leave the value of Path PLR\
    \ as is, or add its best\n   estimate of its lower bound.  A raised not-supported\
    \ flag indicates\n   the value of Path PLR is a lower bound of the real Path PLR.\
    \  The\n   distinguished value 10^-1 is taken to mean indeterminate PLR.  A QNE\n\
    \   that cannot accurately predict the PLR of packets it is processing\n   SHOULD\
    \ set its local path PLR parameter to this value.  Because the\n   composition\
    \ function limits the composed sum to this value, receipt\n   of this value at\
    \ a network element or application indicates that the\n   true path PLR is not\
    \ known.  This MAY happen because one or more\n   network elements could not supply\
    \ a value or because the range of the\n   composition calculation was exceeded.\n"
- title: 5.2.6.  <Path PER> Parameter
  contents:
  - "5.2.6.  <Path PER> Parameter\n    0                   1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           6           |r|r|r|r|          1            |\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   |             Path Packet Error Ratio (32-bit floating point)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Path PER is a single 32-bit single precision IEEE floating point\n   number\
    \ in network octet order [Y.1541].  As defined in [Y.1540], Path\n   PER is the\
    \ ratio of total errored IP packets to the total of\n   successful IP Packets\
    \ plus errored IP packets, in which the number of\n   errored packets observed\
    \ is directly related to the confidence in the\n   result.  The composition rule\
    \ for the <Path PER> parameter is\n   summation with a clamp of 10^-1 on the maximum\
    \ value.  The PERs are\n   reported in units of 10^-11.  A system with resolution\
    \ less than\n   10^-11 MUST set unused digits to zero.  An individual QNE adds\
    \ its\n   local PER value (up to a maximum of 10^-2) to the total Path PER\n \
    \  value (up to a maximum of 10^-1) , where the acceptability of the\n   total\
    \ Path PER value added across all QNEs is determined based on the\n   QOSM being\
    \ used.  The maximum limit of 10^-2 on a QNE's local PER\n   value and the maximum\
    \ limit (clamp value) of 10^-1 on the accumulated\n   end-to-end Path PER value\
    \ are used to preserve the accuracy of the\n   simple additive accumulation function\
    \ specified and to avoid more\n   complex accumulation functions.  Furthermore,\
    \ if these maximums are\n   exceeded, then the path would likely not meet the\
    \ QoS objectives.  If\n   the sum of the different elements' values exceeds 10^-1,\
    \ the end-to-\n   end cumulative PER SHOULD be reported as indeterminate.  A QNE\
    \ that\n   cannot accurately predict the PER of packets it is processing MUST\n\
    \   raise the Not Supported N flag and either leave the value of Path PER\n  \
    \ as is, or add its best estimate of its lower bound.  A raised Not\n   Supported\
    \ N flag indicates the value of Path PER is a lower bound of\n   the real Path\
    \ PER.  The distinguished value 10^-1 is taken to mean\n   indeterminate PER.\
    \  A QNE that cannot accurately predict the PER of\n   packets it is processing\
    \ SHOULD set its local path PER parameter to\n   this value.  Because the composition\
    \ function limits the composed sum\n   to this value, receipt of this value at\
    \ a network element or\n   application indicates that the true path PER is not\
    \ known.  This MAY\n   happen because one or more network elements could not supply\
    \ a value\n   or because the range of the composition calculation was exceeded.\n"
- title: 5.2.7.  <Slack Term> Parameter
  contents:
  - "5.2.7.  <Slack Term> Parameter\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           7           |r|r|r|r|          1            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Slack Term (S)  (32-bit unsigned integer)              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Slack term S MUST be nonnegative and is measured in microseconds\n   [RFC2212].\
    \  The Slack term, S, is represented as a 32-bit unsigned\n   integer.  Its value\
    \ can range from 0 to (2^32)-1 microseconds.\n"
- title: 5.2.8.  <Preemption Priority> and <Defending Priority> Parameters
  contents:
  - "5.2.8.  <Preemption Priority> and <Defending Priority> Parameters\n   The coding\
    \ for the <Preemption Priority> and <Defending Priority>\n   sub-parameters is\
    \ as follows [RFC3181]:\n    0                   1                   2       \
    \            3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           8           |r|r|r|r|          1            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Preemption Priority        |      Defending Priority       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Preemption Priority: The priority of the new flow compared with the\n    \
    \  defending priority of previously admitted flows.  Higher values\n      represent\
    \ higher priority.\n   Defending Priority: Once a flow is admitted, the preemption\
    \ priority\n      becomes irrelevant.  Instead, its defending priority is used\
    \ to\n      compare with the preemption priority of new flows.\n   As specified\
    \ in [RFC3181], <Preemption Priority> and <Defending\n   Priority> are 16-bit\
    \ integer values, and both MUST be populated if\n   the parameter is used.\n"
- title: 5.2.9.  <Admission Priority> Parameter
  contents:
  - "5.2.9.  <Admission Priority> Parameter\n   The coding for the <Admission Priority>\
    \ parameter is as follows:\n    0                   1                   2    \
    \               3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           9           |r|r|r|r|          1            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Y.2171 Adm Pri.|Admis. Priority|        (Reserved)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Two fields are provided for the <Admission Priority> parameter and\n   are\
    \ populated according to the following rules.\n   <Y.2171 Admission Priority>\
    \ values are globally significant on an\n   end-to-end basis.  High priority flows,\
    \ normal priority flows, and\n   best-effort priority flows can have access to\
    \ resources depending on\n   their admission priority value, as described in [Y.2171],\
    \ as follows:\n   <Y.2171 Admission Priority>:\n   0 - best-effort priority flow\n\
    \   1 - normal priority flow\n   2 - high priority flow\n   If the QNI signals\
    \ <Y.2171 Admission Priority>, it populates both the\n   <Y.2171 Admission Priority>\
    \ and <Admission Priority> fields with the\n   same value.  Downstream QNEs MUST\
    \ NOT change the value in the <Y.2171\n   Admission Priority> field so that end-to-end\
    \ consistency is\n   maintained and MUST treat the flow priority according to\
    \ the value\n   populated.  A QNE in a local domain MAY reset a different value\
    \ of\n   <Admission Priority> in a Local QSPEC, but (as specified in Section\n\
    \   4.1) the Local QSPEC MUST be consistent with the Initiator QSPEC.\n   That\
    \ is, the local domain MUST specify an <Admission Priority> in the\n   Local QSPEC\
    \ that is functionally equivalent to the <Y.2171 Admission\n   Priority> specified\
    \ by the QNI in the Initiator QSPEC.\n   If the QNI signals admission priority\
    \ according to [EMERGENCY-RSVP],\n   it populates a locally significant value\
    \ in the <Admission Priority>\n   field and places all ones in the <Y.2171 Admission\
    \ Priority> field.\n   In this case, the functional significance of the <Admission\
    \ Priority>\n   value is specified by the local network administrator.  Higher\
    \ values\n   indicate higher priority.  Downstream QNEs and RSVP nodes MAY reset\n\
    \   the <Admission Priority> value according to the local rules specified\n  \
    \ by the local network administrator, but MUST NOT reset the value of\n   the\
    \ <Y.2171 Admission Priority> field.\n   A reservation without an <Y.2171 Admission\
    \ Priority> parameter MUST\n   be treated as a reservation with an <Y.2171 Admission\
    \ Priority> = 1.\n"
- title: 5.2.10.  <RPH Priority> Parameter
  contents:
  - "5.2.10.  <RPH Priority> Parameter\n   The coding for the <RPH Priority> parameter\
    \ is as follows:\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |M|E|N|r|\
    \           10          |r|r|r|r|          1            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         RPH Namespace         | RPH Priority  |   (Reserved)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   [RFC4412] defines a resource priority header (RPH) with parameters\n   \"\
    RPH Namespace\" and \"RPH Priority\", and if populated is applicable\n   only\
    \ to flows with high admission priority.  A registry is created in\n   [RFC4412]\
    \ and extended in [EMERG-RSVP] for IANA to assign the RPH\n   priority parameter.\
    \  In the extended registry, \"Namespace Numerical\n   Values\" are assigned by\
    \ IANA to RPH Namespaces and \"Priority\n   Numerical Values\" are assigned to\
    \ the RPH Priority.\n   Note that the <Admission Priority> parameter MAY be used\
    \ in\n   combination with the <RPH Priority> parameter, which depends on the\n\
    \   supported QOSM.  Furthermore, if more than one RPH namespace is\n   supported\
    \ by a QOSM, then the QOSM MUST specify how the mapping\n   between the priorities\
    \ belonging to the different RPH namespaces are\n   mapped to each other.\n  \
    \ Note also that additional work is needed to communicate these flow\n   priority\
    \ values to bearer-level network elements\n   [VERTICAL-INTERFACE].\n   For the\
    \ 4 priority parameters, the following cases are permissible\n   (procedures specified\
    \ in references):\n   1 parameter:  <Admission Priority> [Y.2171]\n   2 parameters:\
    \ <Admission Priority>, <RPH Priority> [RFC4412]\n   2 parameters: <Preemption\
    \ Priority>, <Defending Priority> [RFC3181]\n   3 parameters: <Preemption Priority>,\
    \ <Defending Priority>,\n                 <Admission Priority> [3GPP-1, 3GPP-2,\
    \ 3GPP-3]\n   4 parameters: <Preemption Priority>, <Defending Priority>,\n   \
    \              <Admission Priority>, <RPH Priority> [3GPP-1, 3GPP-2,\n       \
    \          3GPP-3]\n   It is permissible to have <Admission Priority> without\
    \ <RPH\n   Priority>, but not permissible to have <RPH Priority> without\n   <Admission\
    \ Priority>.  (Alternatively, <RPH Priority> is ignored in\n   instances without\
    \ <Admission Priority>.)\n   Functionality similar to enhanced Multi-Level Precedence\
    \ and\n   Preemption service (eMLPP; as defined in [3GPP-1, 3GPP-2]) specifies\n\
    \   use of <Admission Priority> corresponding to the 'queuing allowed'\n   part\
    \ of eMLPP, as well as <Preemption/Defending Priority>\n   corresponding to the\
    \ 'preemption capable' and 'may be preempted'\n   parts of eMLPP.\n"
- title: 5.2.11.  <Excess Treatment> Parameter
  contents:
  - "5.2.11.  <Excess Treatment> Parameter\n    0                   1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           11          |r|r|r|r|          1            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Excess Trtmnt |Re-mark Val|             Reserved              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Excess Treatment: Indicates how the QNE SHOULD process out-of-profile\n  \
    \    traffic, that is, traffic not covered by the <TMOD> parameter.\n      The\
    \ Excess Treatment Parameter is set by the QNI.  Allowed values\n      are as\
    \ follows:\n      0: drop\n      1: shape\n      2: re-mark\n      3: no metering\
    \ or policing is permitted\n      If no Excess Treatment Parameter is specified,\
    \ the default is that\n      there are no guarantees to excess traffic, i.e.,\
    \ a QNE can do\n      whatever it finds suitable.\n      When excess treatment\
    \ is set to 'drop', all marked traffic MUST be\n      dropped by the QNE/RMF.\n\
    \      When excess treatment is set to 'shape', it is expected that the\n    \
    \  QoS Desired object carries a TMOD parameter, and excess traffic is\n      shaped\
    \ to this TMOD.  The bucket size in the TMOD parameter for\n      excess traffic\
    \ specifies the queuing behavior, and when the\n      shaping causes unbounded\
    \ queue growth at the shaper, any traffic\n      in excess of the TMOD for excess\
    \ traffic SHOULD be dropped.  If\n      excess treatment is set to 'shape' and\
    \ no TMOD parameter is given,\n      the E flag is set for the parameter and the\
    \ reservation fails.  If\n      excess treatment is set to 'shape' and two TMOD\
    \ parameters are\n      specified, then the QOSM specification dictates how excess\
    \ traffic\n      should be shaped in that case.\n      When excess treatment is\
    \ set to 're-mark', the Excess Treatment\n      Parameter MUST carry the re-mark\
    \ value, and the re-mark values and\n      procedures MUST be specified in the\
    \ QOSM specification document.\n      For example, packets may be re-marked to\
    \ pertain to a particular\n      QoS class (Diffserv Code Point (DSCP) value).\
    \  In the latter case,\n      re-marking relates to a Diffserv model where packets\
    \ arrive marked\n      as belonging to a certain QoS class / DSCP, and when they\
    \ are\n      identified as excess, they should then be re-marked to a different\n\
    \      QoS Class (DSCP value) indicated in the 'Re-mark Value', as\n      follows:\n\
    \   Re-mark Value (6 bits): indicates DSCP value [RFC2474] to re-mark\n      packets\
    \ to when identified as excess\n   If 'no metering or policing is permitted' is\
    \ signaled, the QNE should\n   accept the Excess Treatment Parameter set by the\
    \ sender with special\n   care so that excess traffic should not cause a problem.\
    \  To request\n   the Null Meter [RFC3290] is especially strong, and should be\
    \ used\n   with caution.\n   A NULL metering application [RFC2997] would not include\
    \ the traffic\n   profile, and conceptually it should be possible to support this\
    \ with\n   the QSPEC.  A QSPEC without a traffic profile is not excluded by the\n\
    \   current specification.  However, note that the traffic profile is\n   important\
    \ even in those cases when the excess treatment is not\n   specified, e.g., in\
    \ negotiating bandwidth for the best-effort\n   aggregate.  However, a \"NULL\
    \ Service QOSM\" would need to be specified\n   where the desired QNE Behavior\
    \ and the corresponding QSPEC format are\n   described.\n   As an example behavior\
    \ for a NULL metering, in the properly\n   configured Diffserv router, the resources\
    \ are shared between the\n   aggregates by the scheduling disciplines.  Thus,\
    \ if the incoming rate\n   increases, it will influence the state of a queue within\
    \ that\n   aggregate, while all the other aggregates will be provided sufficient\n\
    \   bandwidth resources.  NULL metering is useful for best-effort and\n   signaling\
    \ data, where there is no need to meter and police this data\n   as it will be\
    \ policed implicitly by the allocated bandwidth and,\n   possibly, active queue\
    \ management mechanism.\n"
- title: 5.2.12.  <PHB Class> Parameter
  contents:
  - "5.2.12.  <PHB Class> Parameter\n   The coding for the <PHB Class> parameter is\
    \ as follows [RFC3140]:\n    0                   1                   2       \
    \            3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           12          |r|r|r|r|          1            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           PHB Field           |            (Reserved)         |\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   The above encoding is consistent with [RFC3140], and the following\n   four\
    \ figures show four possible formats based on the value of the PHB\n   Field.\n\
    \   Single PHB:\n       0                   1\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      | DSCP      |0 0 0 0\
    \ 0 0 0 0 0 0|\n      +---+---+---+---+---+---+---+---+\n   Set of PHBs:\n   \
    \    0                   1\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | DSCP      |0 0 0 0 0 0 0 0 1 0|\n      +---+---+---+---+---+---+---+---+\n\
    \   PHBs not defined by standards action, i.e., experimental or local use\n  \
    \ PHBs as allowed by [RFC2474].  In this case, an arbitrary 12-bit PHB\n   identification\
    \ code, assigned by the IANA, is placed left-justified\n   in the 16-bit field.\
    \  Bit 15 is set to 1, and bit 14 is zero for a\n   single PHB or 1 for a set\
    \ of PHBs.  Bits 12 and 13 are zero.\n   Single non-standard PHB (experimental\
    \ or local):\n       0                   1\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |      PHB ID CODE     \
    \ |0 0 0 1|\n      +---+---+---+---+---+---+---+---+\n   Set of non-standard PHBs\
    \ (experimental or local):\n       0                   1\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |      PHB\
    \ ID CODE      |0 0 1 1|\n      +---+---+---+---+---+---+---+---+\n   Bits 12\
    \ and 13 are reserved either for expansion of the PHB\n   identification code,\
    \ or for other use, at some point in the future.\n   In both cases, when a single\
    \ PHBID is used to identify a set of PHBs\n   (i.e., bit 14 is set to 1), that\
    \ set of PHBs MUST constitute a PHB\n   Scheduling Class (i.e., use of PHBs from\
    \ the set MUST NOT cause\n   intra-microflow traffic reordering when different\
    \ PHBs from the set\n   are applied to traffic in the same microflow).  The set\
    \ of AF1x PHBs\n   [RFC2597] is an example of a PHB Scheduling Class.  Sets of\
    \ PHBs that\n   do not constitute a PHB Scheduling Class can be identified by\
    \ using\n   more than one PHBID.\n   The registries needed to use RFC 3140 already\
    \ exist; see\n   [DSCP-REGISTRY] and [PHBID-CODES-REGISTRY].  Hence, no new registry\n\
    \   needs to be created for this purpose.\n"
- title: 5.2.13.  <DSTE Class Type> Parameter
  contents:
  - "5.2.13.  <DSTE Class Type> Parameter\n   A description of the semantic of the\
    \ parameter values can be found in\n   [RFC4124].  The coding for the <DSTE Class\
    \ Type> parameter is as\n   follows:\n    0                   1              \
    \     2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           13          |r|r|r|r|          1            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |DSTE Cls. Type |                (Reserved)                     |\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   DSTE Class Type: Indicates the DSTE class type.  Values currently\n   allowed\
    \ are 0, 1, 2, 3, 4, 5, 6, and 7.\n"
- title: 5.2.14.  <Y.1541 QoS Class> Parameter
  contents:
  - "5.2.14.  <Y.1541 QoS Class> Parameter\n   The coding for the <Y.1541 QoS Class>\
    \ parameter [Y.1541] is as\n   follows:\n    0                   1           \
    \        2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |M|E|N|r|           14          |r|r|r|r|          1            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Y.1541 QoS Cls.|                (Reserved)                     |\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   Y.1541 QoS Class: Indicates the Y.1541 QoS Class.  Values currently\n   allowed\
    \ are 0, 1, 2, 3, 4, 5, 6, and 7.\n      Class 0:\n      Real-time, highly interactive\
    \ applications, sensitive to jitter.\n      Mean delay <= 100 ms, delay variation\
    \ <= 50 ms, and loss ratio <=\n      10^-3.  Application examples include VoIP\
    \ and video\n      teleconference.\n      Class 1:\n      Real-time, interactive\
    \ applications, sensitive to jitter.  Mean\n      delay <= 400 ms, delay variation\
    \ <= 50 ms, and loss ratio <=\n      10^-3.  Application examples include VoIP\
    \ and video\n      teleconference.\n      Class 2:\n      Highly interactive transaction\
    \ data.  Mean delay <= 100 ms, delay\n      variation is unspecified, loss ratio\
    \ <= 10^-3.  Application\n      examples include signaling.\n      Class 3:\n\
    \      Interactive transaction data.  Mean delay <= 400 ms, delay\n      variation\
    \ is unspecified, loss ratio <= 10^-3.  Application\n      examples include signaling.\n\
    \      Class 4:\n      Low Loss Only applications.  Mean delay <= 1 s, delay variation\
    \ is\n      unspecified, loss ratio <= 10^-3.  Application examples include\n\
    \      short transactions, bulk data, and video streaming.\n      Class 5:\n \
    \     Unspecified applications with unspecified mean delay, delay\n      variation,\
    \ and loss ratio.  Application examples include\n      traditional applications\
    \ of default IP networks.\n      Class 6:\n      Applications that are highly\
    \ sensitive to loss.  Mean delay <= 100\n      ms, delay variation <= 50 ms, and\
    \ loss ratio <= 10^-5.\n      Application examples include television transport,\
    \ high-capacity\n      TCP transfers, and Time-Division Multiplexing (TDM) circuit\n\
    \      emulation.\n      Class 7:\n      Applications that are highly sensitive\
    \ to loss.  Mean delay <= 400\n      ms, delay variation <= 50 ms, and loss ratio\
    \ <= 10^-5.\n      Application examples include television transport, high-capacity\n\
    \      TCP transfers, and TDM circuit emulation.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   QSPEC security is directly tied to QoS NSLP security,\
    \ and the QoS\n   NSLP document [RFC5974] has a very detailed security discussion\
    \ in\n   Section 7.  All the considerations detailed in Section 7 of [RFC5974]\n\
    \   apply to QSPEC.\n   The priority parameter raises possibilities for theft-of-service\n\
    \   attacks because users could claim an emergency priority for their\n   flows\
    \ without real need, thereby effectively preventing serious\n   emergency calls\
    \ to get through.  Several options exist for countering\n   such attacks, for\
    \ example:\n   - only some user groups (e.g., the police) are authorized to set\
    \ the\n     emergency priority bit\n   - any user is authorized to employ the\
    \ emergency priority bit for\n     particular destination addresses (e.g., police)\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This section defines the registries and initial codepoint\
    \ assignments\n   for the QSPEC template, in accordance with BCP 26, RFC 5226\n\
    \   [RFC5226].  It also defines the procedural requirements to be\n   followed\
    \ by IANA in allocating new codepoints.\n   This specification creates the following\
    \ registries with the\n   structures as defined below:\n   Object Types (12 bits):\n\
    \   The following values are allocated as specified in Section 5:\n      0: QoS\
    \ Desired\n      1: QoS Available\n      2: QoS Reserved\n      3: Minimum QoS\n\
    \   Further values are as follows:\n      4-63: Unassigned\n      64-67: Private/Experimental\
    \ Use\n      68-4095: Reserved\n      (Note: 'Reserved' just means 'do not give\
    \ these out'.)\n   The registration procedure is Specification Required.\n   QSPEC\
    \ Version (4 bits):\n   The following value is allocated by this specification:\n\
    \      0: Version 0 QSPEC\n   Further values are as follows:\n      1-15: Unassigned\n\
    \   The registration procedure is Specification Required.  (A\n   specification\
    \ is required to depreciate, delete, or modify QSPEC\n   versions.)\n   QSPEC\
    \ Type (5 bits):\n   The following values are allocated by this specification:\n\
    \      0: Default\n      1: Y.1541-QOSM [RFC5976]\n      2: RMD-QOSM [RFC5977]\n\
    \   Further values are as follows:\n      3-12: Unassigned\n      13-16: Local/Experimental\
    \ Use\n      17-31: Reserved\n   The registration procedure is Specification Required.\n\
    \   QSPEC Procedure (8 bits):\n   The QSPEC Procedure object consists of the Message\
    \ Sequence parameter\n   (4 bits) and the Object Combination parameter (4 bits),\
    \ as discussed\n   in Section 4.3.  Message Sequences 0 (Two-Way Transactions),\
    \ 1\n   (Three-Way Transactions), and 2 (Resource Queries) are explained in\n\
    \   Sections 4.3.1, 4.3.2, and 4.3.3, respectively.  Tables 1, 2, and 3\n   in\
    \ Section 4.3 assign the Object Combination Number to Message\n   Sequences 0,\
    \ 1, and 2, respectively.  The values assigned by this\n   specification for the\
    \ Message Sequence parameter and the Object\n   Combination parameter are summarized\
    \ here:\n   MSG.|OBJ.|OBJECTS INCLUDED |OBJECTS INCLUDED   |OBJECTS INCLUDED\n\
    \   SEQ.|COM.|IN QUERY MESSAGE |IN RESERVE MESSAGE |IN RESPONSE MESSAGE\n   -------------------------------------------------------------------\n\
    \   0   |0   |N/A              |QoS Desired        |QoS Reserved\n       |   \
    \ |                 |                   |\n   0   |1   |N/A              |QoS\
    \ Desired        |QoS Reserved\n       |    |N/A              |QoS Available \
    \     |QoS Available\n       |    |                 |                   |\n  \
    \ 0   |2   |N/A              |QoS Desired        |QoS Reserved\n       |    |N/A\
    \              |QoS Available      |QoS Available\n       |    |N/A          \
    \    |Minimum QoS        |\n       |    |                 |                  \
    \ |\n   1   |0   |QoS Desired      |QoS Desired        |QoS Reserved\n       |\
    \    |                 |                   |\n   1   |1   |QoS Desired      |QoS\
    \ Desired        |QoS Reserved\n       |    |(Minimum QoS)    |QoS Available \
    \     |QoS Available\n       |    |                 |(Minimum QoS)      |\n  \
    \     |    |                 |                   |\n   1   |2   |QoS Desired \
    \     |QoS Desired        |QoS Reserved\n       |    |QoS Available    |QoS Available\
    \      |\n       |    |                 |                   |\n   2   |0   |QoS\
    \ Available    |N/A                |QoS Available\n   Further values of the Message\
    \ Sequence parameter (4 bits) are as\n   follows:\n      3-15: Unassigned\n  \
    \ Further values of the Object Combination parameter (4 bits) are as\n   follows:\n\
    \      Message  | Object\n      Sequence | Combination\n      ---------------------------\n\
    \        0      | 3-15: Unassigned\n        1      | 3-15: Unassigned\n      \
    \  2      | 1-15: Unassigned\n        3-15   | 0-15: Unassigned\n   The registration\
    \ procedure is Specification Required.  (A\n   specification is required to depreciate,\
    \ delete, or modify QSPEC\n   Procedures.)\n   QoS Model Error Code (8 bits):\n\
    \   QoS Model Error Codes may be defined for NSLP error class 6 (QoS\n   Model\
    \ Error), as described in Section 6.4 of [RFC5974].  Values are\n   as follows:\n\
    \      0-63: Unassigned\n      64-67: Private/Experimental Use\n      68-255:\
    \ Reserved\n   The registration procedure is Specification Required.  (A\n   specification\
    \ is required to depreciate, delete, or modify QoS Model\n   Error Codes.)\n \
    \  Parameter ID (12 bits):\n   The following values are allocated by this specification:\n\
    \   1-14: assigned as specified in Section 5.2:\n      1: <TMOD-1>\n      2: <TMOD-2>\n\
    \      3: <Path Latency>\n      4: <Path Jitter>\n      5: <Path PLR>\n      6:\
    \ <Path PER>\n      7: <Slack Term>\n      8: <Preemption Priority> and <Defending\
    \ Priority>\n      9: <Admission Priority>\n      10: <RPH Priority>\n      11:\
    \ <Excess Treatment>\n      12: <PHB Class>\n      13: <DSTE Class Type>\n   \
    \   14: <Y.1541 QoS Class>\n   Further values are as follows:\n      15-255: Unassigned\n\
    \      256-259: Private/Experimental Use\n      260-4095: Reserved\n   The registration\
    \ procedure is Specification Required. (A\n   specification is required to depreciate,\
    \ delete, or modify Parameter\n   IDs.)\n   Y.2171 Admission Priority Parameter\
    \ (8 bits):\n   The following values are allocated by this specification:\n  \
    \ 0-2: assigned as specified in Section 5.2.9:\n      0: best-effort priority\
    \ flow\n      1: normal priority flow\n      2: high priority flow\n   Further\
    \ values are as follows:\n      3-63: Unassigned\n      64-255: Reserved\n   The\
    \ registration procedure is Specification Required.\n   RPH Namespace Parameter\
    \ (16 bits):\n   Note that [RFC4412] creates a registry for RPH Namespace and\
    \ Priority\n   values already (see Section 12.6 of [RFC4412]), and an extension\
    \ to\n   this registry is created in [EMERG-RSVP], which will also be used for\n\
    \   the QSPEC RPH parameter.  In the extended registry, \"Namespace\n   Numerical\
    \ Values\" are assigned by IANA to RPH Namespaces, and\n   \"Priority Numerical\
    \ Values\" are assigned to the RPH Priority.  There\n   are no additional IANA\
    \ requirements made by this specification for\n   the RPH Namespace Parameter.\n\
    \   Excess Treatment Parameter (8 bits):\n   The following values are allocated\
    \ by this specification:\n   0-3: assigned as specified in Section 5.2.11:\n \
    \     0: drop\n      1: shape\n      2: re-mark\n      3: no metering or policing\
    \ is permitted\n   Further values are as follows:\n      4-63: Unassigned\n  \
    \    64-255: Reserved\n   The registration procedure is Specification Required.\n\
    \   Y.1541 QoS Class Parameter (8 bits):\n   The following values are allocated\
    \ by this specification:\n   0-7: assigned as specified in Section 5.2.14:\n \
    \     0: Y.1541 QoS Class 0\n      1: Y.1541 QoS Class 1\n      2: Y.1541 QoS\
    \ Class 2\n      3: Y.1541 QoS Class 3\n      4: Y.1541 QoS Class 4\n      5:\
    \ Y.1541 QoS Class 5\n      6: Y.1541 QoS Class 6\n      7: Y.1541 QoS Class 7\n\
    \   Further values are as follows:\n      8-63: Unassigned\n      64-255: Reserved\n\
    \   The registration procedure is Specification Required.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The authors would like to thank (in alphabetical order)\
    \ David Black,\n   Ken Carlberg, Anna Charny, Christian Dickman, Adrian Farrel,\
    \ Ruediger\n   Geib, Matthias Friedrich, Xiaoming Fu, Janet Gunn, Robert Hancock,\n\
    \   Chris Lang, Jukka Manner, Martin Stiemerling, An Nguyen, Tom Phelan,\n   James\
    \ Polk, Alexander Sayenko, John Rosenberg, Hannes Tschofenig, and\n   Sven van\
    \ den Bosch for their very helpful suggestions.\n"
- title: 9.  Contributors
  contents:
  - "9.  Contributors\n   This document is the result of the NSIS Working Group effort.\
    \  In\n   addition to the authors/editors listed in Section 12, the following\n\
    \   people contributed to the document:\n   Roland Bless\n   Institute of Telematics,\
    \ Karlsruhe Institute of Technology (KIT)\n   Zirkel 2, Building 20.20\n   P.O.\
    \ Box 6980\n   Karlsruhe  76049\n   Germany\n   Phone: +49 721 608 6413\n   EMail:\
    \ bless@kit.edu\n   URI: http://tm.kit.edu/~bless\n   Chuck Dvorak\n   AT&T\n\
    \   Room 2A37\n   180 Park Avenue, Building 2\n   Florham Park, NJ 07932\n   Phone:\
    \ +1 973-236-6700\n   Fax: +1 973-236-7453\n   EMail: cdvorak@research.att.com\n\
    \   Yacine El Mghazli\n   Alcatel\n   Route de Nozay\n   91460 Marcoussis cedex\n\
    \   FRANCE\n   Phone: +33 1 69 63 41 87\n   EMail: yacine.el_mghazli@alcatel.fr\n\
    \   Georgios Karagiannis\n   University of Twente\n   P.O. BOX 217\n   7500 AE\
    \ Enschede\n   The Netherlands\n   EMail: g.karagiannis@ewi.utwente.nl\n   Andrew\
    \ McDonald\n   Siemens/Roke Manor Research\n   Roke Manor Research Ltd.\n   Romsey,\
    \ Hants SO51 0ZN\n   UK\n   EMail: andrew.mcdonald@roke.co.uk\n   Al Morton\n\
    \   AT&T\n   Room D3-3C06\n   200 S. Laurel Avenue\n   Middletown, NJ 07748\n\
    \   Phone: +1 732 420-1571\n   Fax: +1 732 368-1192\n   EMail: acmorton@att.com\n\
    \   Bernd Schloer\n   University of Goettingen\n   EMail: bschloer@cs.uni-goettingen.de\n\
    \   Percy Tarapore\n   AT&T\n   Room D1-33\n   200 S. Laurel Avenue\n   Middletown,\
    \ NJ 07748\n   Phone: +1 732 420-4172\n   EMail: tarapore@.att.com\n   Lars Westberg\n\
    \   Ericsson Research\n   Torshamnsgatan 23\n   SE-164 80 Stockholm, Sweden\n\
    \   EMail: Lars.Westberg@ericsson.com\n"
- title: 10.  Normative References
  contents:
  - "10.  Normative References\n   [3GPP-1]        3GPP TS 22.067 V7.0.0 (2006-03)\
    \ Technical\n                   Specification, 3rd Generation Partnership Project;\n\
    \                   Technical Specification Group Services and System\n      \
    \             Aspects; enhanced Multi Level Precedence and\n                 \
    \  Preemption service (eMLPP) - Stage 1 (Release 7).\n   [3GPP-2]        3GPP\
    \ TS 23.067 V7.1.0 (2006-03) Technical\n                   Specification, 3rd\
    \ Generation Partnership Project;\n                   Technical Specification\
    \ Group Core Network; enhanced\n                   Multi-Level Precedence and\
    \ Preemption service (eMLPP)\n                   - Stage 2 (Release 7).\n   [3GPP-3]\
    \        3GPP TS 24.067 V6.0.0 (2004-12) Technical\n                   Specification,\
    \ 3rd Generation Partnership Project;\n                   Technical Specification\
    \ Group Core Network; enhanced\n                   Multi-Level Precedence and\
    \ Preemption service (eMLPP)\n                   - Stage 3 (Release 6).\n   [RFC2119]\
    \       Bradner, S., \"Key words for use in RFCs to Indicate\n               \
    \    Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2210]       Wroclawski,\
    \ J., \"The Use of RSVP with IETF Integrated\n                   Services\", RFC\
    \ 2210, September 1997.\n   [RFC2212]       Shenker, S., Partridge, C., and R.\
    \ Guerin,\n                   \"Specification of Guaranteed Quality of Service\"\
    , RFC\n                   2212, September 1997.\n   [RFC2215]       Shenker, S.\
    \ and J. Wroclawski, \"General\n                   Characterization Parameters\
    \ for Integrated Service\n                   Network Elements\", RFC 2215, September\
    \ 1997.\n   [RFC3140]       Black, D., Brim, S., Carpenter, B., and F. Le\n  \
    \                 Faucheur, \"Per Hop Behavior Identification Codes\",\n     \
    \              RFC 3140, June 2001.\n   [RFC3181]       Herzog, S., \"Signaled\
    \ Preemption Priority Policy\n                   Element\", RFC 3181, October\
    \ 2001.\n   [RFC4124]       Le Faucheur, F., Ed., \"Protocol Extensions for\n\
    \                   Support of Diffserv-aware MPLS Traffic Engineering\",\n  \
    \                 RFC 4124, June 2005.\n   [RFC4412]       Schulzrinne, H. and\
    \ J. Polk, \"Communications Resource\n                   Priority for the Session\
    \ Initiation Protocol (SIP)\",\n                   RFC 4412, February 2006.\n\
    \   [RFC4506]       Eisler, M., Ed., \"XDR: External Data Representation\n   \
    \                Standard\", STD 67, RFC 4506, May 2006.\n   [RFC5971]       Schulzrinne,\
    \ H. and R. Hancock, \"GIST: General\n                   Internet Signalling Transport\"\
    , RFC 5971, October\n                   2010.\n   [RFC5974]       Manner, J.,\
    \ Karagiannis, G., and A. McDonald, \"NSIS\n                   Signaling Layer\
    \ Protocol (NSLP) for Quality-of-\n                   Service Signaling\", RFC\
    \ 5974, October 2010.\n   [Y.1541]        ITU-T Recommendation Y.1541, \"Network\
    \ Performance\n                   Objectives for IP-Based Services\", February\
    \ 2006.\n   [Y.2171]        ITU-T Recommendation Y.2171, \"Admission Control\n\
    \                   Priority Levels in Next Generation Networks\",\n         \
    \          September 2006.\n"
- title: 11.  Informative References
  contents:
  - "11.  Informative References\n   [COMPOSITION]   Morton, A. and E. Stephan, \"\
    Spacial Composition of\n                   Metrics\", Work in Progress, July 2010.\n\
    \   [DQOS]          CableLabs, \"PacketCable Dynamic Quality of Service\n    \
    \               Specification\", CableLabs Specification\n                   PKT-SP-DQOS-I12-050812,\
    \ August 2005.\n   [EMERG-RSVP]    Le Faucheur, F., Polk, J., and K. Carlberg,\
    \ \"Resource\n                   ReSerVation Protocol (RSVP) Extensions for Admission\n\
    \                   Priority\", Work in Progress, March 2010.\n   [G.711]    \
    \     ITU-T Recommendation G.711, \"Pulse code modulation\n                  \
    \ (PCM) of voice frequencies\", November 1988.\n   [IEEE754]       Institute of\
    \ Electrical and Electronics Engineers,\n                   \"IEEE Standard for\
    \ Binary Floating-Point Arithmetic\",\n                   ANSI/IEEE Standard 754-1985,\
    \ August 1985.\n   [CL-QOSM]       Kappler, C., \"A QoS Model for Signaling IntServ\n\
    \                   Controlled-Load Service with NSIS\", Work in Progress,\n \
    \                  April 2010.\n   [DSCP-REGISTRY] IANA, \"Differentiated Services\
    \ Field Codepoints\",\n                   http://www.iana.org.\n   [NETWORK-OCTET-ORDER]\n\
    \                   Wikipedia, \"Endianness\",\n                   http://en.wikipedia.org/wiki/Endianness.\n\
    \   [PHBID-CODES-REGISTRY]\n                   IANA, \"Per Hop Behavior Identification\
    \ Codes\",\n                   http://www.iana.org.\n   [RFC1701]       Hanks,\
    \ S., Li, T., Farinacci, D., and P. Traina,\n                   \"Generic Routing\
    \ Encapsulation (GRE)\", RFC 1701,\n                   October 1994.\n   [RFC1702]\
    \       Hanks, S., Li, T., Farinacci, D., and P. Traina,\n                   \"\
    Generic Routing Encapsulation over IPv4 networks\",\n                   RFC 1702,\
    \ October 1994.\n   [RFC2003]       Perkins, C., \"IP Encapsulation within IP\"\
    , RFC 2003,\n                   October 1996.\n   [RFC2004]       Perkins, C.,\
    \ \"Minimal Encapsulation within IP\", RFC\n                   2004, October 1996.\n\
    \   [RFC2205]       Braden, R., Ed., Zhang, L., Berson, S., Herzog, S.,\n    \
    \               and S. Jamin, \"Resource ReSerVation Protocol (RSVP)\n       \
    \            -- Version 1 Functional Specification\", RFC 2205,\n            \
    \       September 1997.\n   [RFC2473]       Conta, A. and S. Deering, \"Generic\
    \ Packet Tunneling\n                   in IPv6 Specification\", RFC 2473, December\
    \ 1998.\n   [RFC2474]       Nichols, K., Blake, S., Baker, F., and D. Black,\n\
    \                   \"Definition of the Differentiated Services Field (DS\n  \
    \                 Field) in the IPv4 and IPv6 Headers\", RFC 2474,\n         \
    \          December 1998.\n   [RFC2475]       Blake, S., Black, D., Carlson, M.,\
    \ Davies, E., Wang,\n                   Z., and W. Weiss, \"An Architecture for\
    \ Differentiated\n                   Service\", RFC 2475, December 1998.\n   [RFC2597]\
    \       Heinanen, J., Baker, F., Weiss, W., and J.\n                   Wroclawski,\
    \ \"Assured Forwarding PHB Group\", RFC 2597,\n                   June 1999.\n\
    \   [RFC2697]       Heinanen, J. and R. Guerin, \"A Single Rate Three\n      \
    \             Color Marker\", RFC 2697, September 1999.\n   [RFC2997]       Bernet,\
    \ Y., Smith, A., and B. Davie, \"Specification\n                   of the Null\
    \ Service Type\", RFC 2997, November 2000.\n   [RFC3290]       Bernet, Y., Blake,\
    \ S., Grossman, D., and A. Smith,\n                   \"An Informal Management\
    \ Model for Diffserv Routers\",\n                   RFC 3290, May 2002.\n   [RFC3393]\
    \       Demichelis, C. and P. Chimento, \"IP Packet Delay\n                  \
    \ Variation Metric for IP Performance Metrics (IPPM)\",\n                   RFC\
    \ 3393, November 2002.\n   [RFC3550]       Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V.\n                   Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \                   Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3564]\
    \       Le Faucheur, F. and W. Lai, \"Requirements for Support\n             \
    \      of Differentiated Services-aware MPLS Traffic\n                   Engineering\"\
    , RFC 3564, July 2003.\n   [RFC4213]       Nordmark, E. and R. Gilligan, \"Basic\
    \ Transition\n                   Mechanisms for IPv6 Hosts and Routers\", RFC\
    \ 4213,\n                   October 2005.\n   [RFC4301]       Kent, S. and K.\
    \ Seo, \"Security Architecture for the\n                   Internet Protocol\"\
    , RFC 4301, December 2005.\n   [RFC4303]       Kent, S., \"IP Encapsulating Security\
    \ Payload (ESP)\",\n                   RFC 4303, December 2005.\n   [RFC5226]\
    \       Narten, T. and H. Alvestrand, \"Guidelines for Writing\n             \
    \      an IANA Considerations Section in RFCs\", BCP 26, RFC\n               \
    \    5226, May 2008.\n   [RFC5481]       Morton, A. and B. Claise, \"Packet Delay\
    \ Variation\n                   Applicability Statement\", RFC 5481, March 2009.\n\
    \   [RFC5976]       Ash, G., Morton, A., Dolly, M., Tarapore, P., Dvorak,\n  \
    \                 C., and Y.  El Mghazli, \"Y.1541-QOSM: Model for\n         \
    \          Networks Using Y.1541 Quality-of-Service Classes\",\n             \
    \      RFC 5976, October 2010.\n   [RFC5977]       Bader, A., Westberg, L., Karagiannis,\
    \ G., Kappler, C,\n                   and T. Phelan, \"RMD-QOSM: The NSIS Quality-of-Service\n\
    \                   Model for Resource Management in Diffserv\", RFC 5977,\n \
    \                  October 2010.\n   [VERTICAL-INTERFACE]\n                  \
    \ Dolly, M., Tarapore, P., and S. Sayers, \"Discussion\n                   on\
    \ Associating of Control Signaling Messages with\n                   Media Priority\
    \ Levels\", T1S1.7 and PRQC, October\n                   2004.\n   [Y.1540]  \
    \      ITU-T Recommendation Y.1540, \"Internet Protocol Data\n               \
    \    Communication Service - IP Packet Transfer and\n                   Availability\
    \ Performance Parameters\", December 2002.\n"
- title: Appendix A.  Mapping of QoS Desired, QoS Available, and QoS Reserved of
  contents:
  - "Appendix A.  Mapping of QoS Desired, QoS Available, and QoS Reserved of\n   \
    \          NSIS onto AdSpec, TSpec, and RSpec of RSVP IntServ\n   The union of\
    \ QoS Desired, QoS Available, and QoS Reserved can provide\n   all functionality\
    \ of the objects specified in RSVP IntServ; however,\n   it is difficult to provide\
    \ an exact mapping.\n   In RSVP, the Sender TSpec specifies the traffic an application\
    \ is\n   going to send (e.g., TMOD).  The AdSpec can collect path\n   characteristics\
    \ (e.g., delay).  Both are issued by the sender.  The\n   receiver sends the FlowSpec\
    \ that includes a Receiver TSpec describing\n   the resources reserved using the\
    \ same parameters as the Sender TSpec,\n   as well as an RSpec that provides additional\
    \ IntServ QoS Model\n   specific parameters, e.g., Rate and Slack.\n   The RSVP\
    \ TSpec, AdSpec, and RSpec are tailored to the receiver-\n   initiated signaling\
    \ employed by RSVP and the IntServ QoS Model.  For\n   example, to the knowledge\
    \ of the authors, it is not possible for the\n   sender to specify a desired maximum\
    \ delay except implicitly and\n   mutably by seeding the AdSpec accordingly. \
    \ Likewise, the RSpec is\n   only meaningfully sent in the receiver-issued RSVP\
    \ RESERVE message.\n   For this reason, our discussion at this point leads us\
    \ to a slightly\n   different mapping of necessary functionality to objects, which\
    \ should\n   result in more flexible signaling models.\n"
- title: Appendix B.  Example of TMOD Parameter Encoding
  contents:
  - "Appendix B.  Example of TMOD Parameter Encoding\n   In an example VoIP application\
    \ that uses RTP [RFC3550] and the G.711\n   Codec [G.711], the TMOD-1 parameter\
    \ could be set as follows:\n   In the simplest case, the Minimum Policed Unit\
    \ m is the sum of the\n   IP, UDP, and RTP headers + payload.  The IP header in\
    \ the IPv4 case\n   has a size of 20 octets (40 octets if IPv6 is used).  The\
    \ UDP header\n   has a size of 8 octets, and RTP uses a 12-octet header.  The\
    \ G.711\n   Codec specifies a bandwidth of 64 kbit/s (8000 octets/s).  Assuming\n\
    \   RTP transmits voice datagrams every 20 ms, the payload for one\n   datagram\
    \ is 8000 octets/s * 0.02 s = 160 octets.\n   IPv4 + UDP + RTP + payload: m =\
    \ 20 + 8 + 12 + 160 octets = 200 octets\n   IPv6 + UDP + RTP + payload: m = 40\
    \ + 8 + 12 + 160 octets = 220 octets\n   The Rate r specifies the amount of octets\
    \ per second.  50 datagrams\n   are sent per second.\n   IPv4: r = 50 1/s * m\
    \ = 10,000 octets/s\n   IPv6: r = 50 1/s * m = 11,000 octets/s\n   The bucket\
    \ size b specifies the maximum burst.  In this example, a\n   burst of 10 packets\
    \ is used.\n   IPv4: b = 10 * m = 2000 octets\n   IPv6: b = 10 * m = 2200 octets\n\
    \   A number of extra headers (e.g., for encapsulation) may be included\n   in\
    \ the datagram.  A non-exhaustive list is given below.  For\n   additional headers,\
    \ m, r, and b have to be set accordingly.\n   Protocol Header Size\n   --------------------------+------------\n\
    \   GRE [RFC1701]             |    8 octets\n   GREIP4 [RFC1702]          |  4-8\
    \ octets\n   IP4INIP4 [RFC2003]        |   20 octets\n   MINENC [RFC2004]    \
    \      | 8-12 octets\n   IP6GEN [RFC2473]          |   40 octets\n   IP6INIP4\
    \ [RFC4213]        |   20 octets\n   IPsec [RFC4301, RFC4303]  |    variable\n\
    \   --------------------------+------------\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Gerald Ash (Editor)\n   AT&T\n   EMail: gash5107@yahoo.com\n\
    \   Attila Bader (Editor)\n   Traffic Lab\n   Ericsson Research\n   Ericsson Hungary\
    \ Ltd.\n   Laborc u. 1 H-1037\n   Budapest Hungary\n   EMail: Attila.Bader@ericsson.com\n\
    \   Cornelia Kappler (Editor)\n   ck technology concepts\n   Berlin, Germany\n\
    \   EMail: cornelia.kappler@cktecc.de\n   David R. Oran (Editor)\n   Cisco Systems,\
    \ Inc.\n   7 Ladyslipper Lane\n   Acton, MA 01720, USA\n   EMail:  oran@cisco.com\n"
