Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
This memo obsoletes RFC 1650 "Definitions of Managed Objects for the Ethernet like Interface Types using SMIv2".
This memo extends that specification by including management information useful for the management of 100 Mb/s Ethernet interfaces.
Ethernet technology, as defined by the 802.3 Working Group of the IEEE, continues to evolve, with scalable increases in speed, new types of cabling and interfaces, and new features.
This evolution may require changes in the managed objects in order to reflect this new functionality.
This document, as with other documents issued by this working group, reflect a certain stage in the evolution of Ethernet technology.
In the future, this document might be revised, or new documents might be issued by the Ethernet Interfaces and Hub MIB Working Group, in order to reflect the evolution of Ethernet technology.
This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it defines objects for managing ethernet like interfaces.
This memo also includes a MIB module.
This MIB module extends the list of managed objects specified in the earlier version of this MIB: RFC1650 [11].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [13].
The SNMP Network Management Framework
The SNMP Network Management Framework consists of several components.
For the purpose of this specification, the applicable components of the Framework are the SMI and related documents [2, 3, 4], which define the mechanisms used for describing and naming objects for the purpose of management.
The Framework permits new objects to be defined for the purpose of experimentation and evaluation.
Object Definitions Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the subset of Abstract Syntax Notation One (ASN.1)
[1] defined in the SMI [2].
In particular, each object object type is named by an OBJECT IDENTIFIER, an administratively assigned name.
The object type together with an object instance serves to uniquely identify a specific instantiation of the object.
For human convenience, we often use a textual string, termed the descriptor, to refer to the object type.
Overview Instances of these object types represent attributes of an interface to an ethernet like communications medium.
At present, ethernet like media are identified by the following values of the ifType object in the Interfaces MIB [12]:
The definitions presented here are based on the IEEE 802.3 Layer Management Specification [5], as originally interpreted by Frank Kastenholz then of Interlan in [7].
Implementors of these MIB objects should note that the IEEE document explicitly describes (in the form of Pascal pseudocode)
when, where, and how various MAC attributes are measured.
The IEEE document also describes the effects of MAC actions that may be invoked by manipulating instances of the MIB objects defined here.
To the extent that some of the attributes defined in [5] are represented by previously defined objects in MIB 2 [16] or in the Interfaces MIB [12], such attributes are not redundantly represented by objects defined in this memo.
Among the attributes represented by objects defined in other memos are the number of octets transmitted or received on a particular interface, the number of frames transmitted or received on a particular interface, the promiscuous status of an interface, the MAC address of an interface, and multicast information associated with an interface.
This section applies only when this MIB is used in conjunction with the "old" (RFC 1213) [16] interface group.
The relationship between an ethernet like interface and an interface in the context of the Internet standard MIB is one to one.
As such, the value of an ifIndex object instance can be directly used to identify corresponding instances of the objects defined herein.
For agents which implement the (now deprecated)
Relation to the Interfaces MIB
The Interface MIB [12] requires that any MIB which is an adjunct of the Interface MIB clarify specific areas within the Interface MIB.
These areas were intentionally left vague in the Interface MIB to avoid over constraining the MIB, thereby precluding management of certain media types.
Section 3.3 of [12] enumerates several areas which a media specific MIB must clarify.
Each of these areas is addressed in a following subsection.
The implementor is referred to [12] in order to understand the general intent of these areas.
This MIB does not provide for layering.
One could foresee the development of an 802.2 and enet transceiver MIB.
They could be higher and lower sublayers, respectively.
All that THIS document should do is allude to the possibilities and urge the implementor to be aware of the possibility and that they may have requirements which supersede the requirements in this document.
This medium does not support virtual circuits and this area is not applicable to this MIB.
This MIB defines two tests for media which are instrumented with this MIB; TDR and Loopback.
Implementation of these tests is not required.
Many common interface chips do not support one or both of these tests.
These two tests are provided as a convenience, allowing a common method to invoke the test.
Standard MIBs do not include objects in which to return the results of the TDR test.
Any needed objects MUST be provided in the vendor specific MIB.
Note that the ifTestTable is now deprecated.
Work is underway to define a replacement MIB for system and interface testing.
It is expected that the tests defined in this document will be usable in this replacement MIB.
This table contains all IEEE
802.3 addresses, unicast, multicast, and broadcast, for which this interface will receive packets and forward them up to a higher layer entity for local consumption.
The format of the address, contained in ifRcvAddressAddress, is the same as for ifPhysAddress.
In the event that the interface is part of a MAC bridge, this table does not include unicast addresses which are accepted for possible forwarding out some other port.
This table is explicitly not intended to provide a bridge address filtering mechanism.
This object contains the IEEE 802.3 address which is placed in the source address field of any Ethernet, Starlan, or IEEE 802.3 frames that originate at this interface.
Usually this will be kept in ROM on the interface hardware.
Some systems may set this address via software.
In a system where there are several such addresses the designer has a tougher choice.
The address chosen should be the one most likely to be of use to network management
(e.g.  the address placed in ARP responses for systems which are primarily IP systems).
If the designer truly can not chose, use of the factory  provided ROM address is suggested.
If the address can not be determined, an octet string of zero length should be returned.
The address is stored in binary in this object.
The address is stored in "canonical" bit order, that is, the Group Bit is positioned as the low order bit of the first octet.
Thus, the first byte of a multicast address would have the bit 0x01 set.
This MIB applies to interfaces which have any of the following ifType values: ethernetCsmacd(6) iso88023Csmacd(7) starLan(11)
It is RECOMMENDED that all Ethernet like interfaces use an ifType of ethernetCsmacd(6) regardless of the speed that the interface is running or the link layer encapsulation in use.
iso88023Csmacd(7) and starLan(11) are supported for backwards compatability.
There are two other interface types defined in the IANAifType MIB for 100 Mbit Ethernet.
They are fastEther(62), and fastEtherFX(69).
This document takes the position that an Ethernet is an Ethernet, and Ethernet interfaces SHOULD always have the same value of ifType.
Information on the particular flavor of Ethernet that an interface is running is available from ifSpeed in the Interfaces MIB, and ifMauType in the 802.3 MAU MIB.
An Ethernet like interface SHOULD NOT use the fastEther(62
Interfaces with any of the supported ifType values map to the EtherLike MIB in the same manner.
Which compliance statement an interface should implement is dependent on the maximum speed supported on the interface.
The EtherLike MIB etherCompliance compliance statement applies to all Ethernet like interfaces
whose maximum supported speed is 10 Mbit/sec or less.
There are no implementation differences.
Similarly, the EtherLike MIB ether100MbsCompliance compliance statement applies to all Ethernet  like interfaces whose maximum supported speed is 100Mbit/sec.
An interface that is capable of operating at 100Mbit/sec MUST implement the ether100MbsCompliance compliance statement, even if it is currently operating at a lower speed.
Counters in the ether100MbsCompliance compliance statement that only apply to 100 Mbit interfaces would simply not increment when the interface is operating at a lower speed.
The following table provides specific implementation guidelines for applying the interface group objects to ethernet like media.
Each ethernet like interface is represented by an ifEntry.
The dot3StatsTable in this MIB module is indexed by dot3StatsIndex.
The interface identified by a particular value of dot3StatsIndex is the same interface as identified by the same value of ifIndex.
For current ethernet like interfaces, this will be equal to 1,000,000 (1 million), 10,000,000 (10 million), or 100,000,000 (100 million).
If the interface implements auto negotiation, auto negotiation is enabled for this interface, and the interface has not yet negotiated to an operational speed, this object SHOULD reflect the maximum speed supported by the interface.
Note that this object MUST NOT indicate a doubled value when operating in full duplex mode.
It MUST indicate the correct line speed regardless of the current duplex mode.
The correct object to use to determine the duplex mode of the interface is the ifMauType object in the 802.3 MAU MIB.
Support for 'testing' is not required.
The operational state of the interface.
Support for 'testing' is not required.
The value 'dormant' has no meaning for an ethernet like interface.
The number of octets in valid MAC frames received on this interface, including the MAC header and FCS.
The sum for this interface of dot3StatsAlignmentErrors, dot3StatsFCSErrors, dot3StatsFrameTooLongs, dot3StatsInternalMacReceiveErrors and dot3StatsSymbolErrors.
The number of octets transmitted in valid MAC frames on this interface, including the MAC header and FCS.
The sum for this interface of: dot3StatsSQETestErrors, dot3StatsLateCollisions, dot3StatsExcessiveCollisions, dot3StatsInternalMacTransmitErrors and dot3StatsCarrierSenseErrors.
Note that a future revision of this document may support faster interfaces, and therefore may require support for these counters.
The current operational speed of the interface in millions of bits per second.
For current ethernet like interfaces, this will be equal to 1, 10, or 100.
If the interface implements auto negotiation, auto negotiation is enabled for this interface, and the interface has not yet negotiated to an operational speed, this object SHOULD reflect the maximum speed supported by the interface.
Note that this object MUST NOT indicate a doubled value when operating in full duplex mode.
It MUST indicate the correct line speed regardless of the current duplex mode.
The correct object to use to determine the duplex mode of the interface is the ifMauType object in the 802.3 MAU MIB.
This will normally be 'true'.
Relation to the 802.3 MAU MIB Support for the mauModIfCompl compliance statement of the MAU MIB [14] is REQUIRED for Ethernet like interfaces.
This MIB is needed in order to allow applications to determine the current MAU type in use by the interface.
The MAU type indicates not only the media type in use, but also indicates whether the interface is operating in half  duplex or full duplex mode.
Implementing this MIB module without implementing the MAU MIB would leave applications with no standard way to determine the duplex mode of the interface.
Corresponding SNMP Object oMacEntity .aMACID
The following IEEE 802.3 managed objects have been removed from this MIB module as a result of implementation feedback:
Please see [15] for the detailed reasoning on why these objects were removed.
IMPORTS MODULE IDENTITY, OBJECT TYPE, OBJECT IDENTITY,
Counter32, mib 2, transmission FROM
SNMPv2 SMI MODULE COMPLIANCE, OBJECT GROUP FROM SNMPv2
Hub MIB Working Group" CONTACT INFO "
John Flick Postal: Hewlett Packard Company 8000
M/S 5556 Roseville, CA 95747 5556
, Suite 410 San Jose, CA, 95131
The MIB module to describe generic objects for Ethernet like network interfaces.
This MIB is an updated version of the Ethernet like MIB in RFC 1650."
Dot3StatsEntry MAX ACCESS not accessible STATUS
current DESCRIPTION "Statistics for a collection of ethernet like interfaces attached to a particular system."
Dot3StatsEntry MAX ACCESS not accessible STATUS
current DESCRIPTION "Statistics for a particular interface to an ethernet like medium."
"An index value that uniquely identifies an interface to an ethernet like medium.
The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex."
A count of frames received on a particular interface that are not an integral number of octets in length and do not pass the FCS check.
The count represented by an instance of this object is incremented when the alignmentError status is returned by the MAC service to the LLC (or other MAC user).
Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC."
A count of frames received on a particular interface that are an integral number of octets in length but do not pass the FCS check.
The count represented by an instance of this object is incremented when the frameCheckError status is returned by the MAC service to the LLC (or other MAC user).
Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC."
"A count of successfully transmitted frames on a particular interface for which transmission is inhibited by exactly one collision.
A frame that is counted by an instance of this object is also counted by the corresponding instance of either the ifOutUcastPkts, ifOutMulticastPkts, or ifOutBroadcastPkts, and is not counted by the corresponding instance of the dot3StatsMultipleCollisionFrames object.
"A count of successfully transmitted frames on a particular interface for which transmission is inhibited by more than one collision.
A frame that is counted by an instance of this object is also counted by the corresponding instance of either the ifOutUcastPkts, ifOutMulticastPkts, or ifOutBroadcastPkts, and is not counted by the corresponding instance of the dot3StatsSingleCollisionFrames object.
"A count of times that the SQE TEST ERROR message is generated by the PLS sublayer for a particular interface.
The SQE TEST ERROR message is defined in section 7.2.2.2.4 of ANSI/IEEE 802.3 1985
and its generation is described in section 7.2.4.6 of the same document."
The count represented by an instance of this object does not include frames involved in collisions."
The number of times that a collision is detected on a particular interface later than 512 bit times into the transmission of a packet.
Five hundred and twelve bit times corresponds to 51.2 microseconds on a 10 Mbit/s system.
A (late) collision included in a count represented by an instance of this object is also considered as a (generic) collision for purposes of other collision related statistics."
A frame is only counted by an instance of this object if it is not counted by the corresponding instance of either the dot3StatsLateCollisions object, the dot3StatsExcessiveCollisions object, or the dot3StatsCarrierSenseErrors object.
The precise meaning of the count represented by an instance of this object
In particular, an instance of this object may represent a count of transmission errors on a particular interface that are not otherwise counted."
The number of times that the carrier sense condition was lost or never asserted when attempting to transmit a frame on a particular interface.
The count represented by an instance of this object is incremented at most once per transmission attempt, even if the carrier sense condition fluctuates during a transmission attempt."
A count of frames received on a particular interface that exceed the maximum permitted frame size.
The count represented by an instance of this object is incremented when the frameTooLong status is returned by the MAC service to the LLC (or other MAC user).
Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC."
A count of frames for which reception on a particular interface fails due to an internal MAC sublayer receive error.
A frame is only counted by an instance of this object if it is not counted by the corresponding instance of either the dot3StatsFrameTooLongs object, the dot3StatsAlignmentErrors object, or the dot3StatsFCSErrors object.
The precise meaning of the count represented by an instance of this object
In particular, an instance of this object may represent a count of receive errors on a particular interface that are not otherwise counted."
"This object contains an OBJECT IDENTIFIER which identifies the chipset used to realize the interface.
Ethernet like interfaces are typically built out of several different chips.
The MIB implementor is presented with a decision of which chip to identify via this object.
The implementor should identify the chip which is usually called the Medium Access Control chip.
If no such chip is easily identifiable, the implementor should identify the chip which actually gathers the transmit and receive statistics and error indications.
This would allow a manager station to correlate the statistics and the chip generating them, giving it the ability to take into account any known anomalies in the chip."
"The number of times there was an invalid data symbol when a valid carrier was present on a particular interface.
The count represented by an instance of this object is incremented at most once per carrier event, even if multiple symbol errors occur during the carrier event."
the Ethernet like Collision Statistics group   Implementation of this group is optional; it is appropriate   for all systems which have the necessary metering dot3CollTable OBJECT
SEQUENCE OF Dot3CollEntry MAX ACCESS
A cell in the histogram of per frame collisions for a particular interface.
An instance of this object represents the frequency of individual MAC frames for which the transmission (successful or otherwise) on a particular interface is accompanied by a particular number of media collisions.
A count of individual MAC frames for which the transmission (successful or otherwise) on a particular interface occurs after the frame has experienced exactly the number of collisions in the associated dot3CollCount object.
For example, a frame which is transmitted on interface 77 after experiencing exactly 4 collisions would be indicated by incrementing only dot3CollFrequencies.77.4.
No other instance of dot3CollFrequencies would be incremented in this example."
current DESCRIPTION "The Time Domain Reflectometry (TDR) test is specific to ethernet like interfaces of type 10Base5 and 10Base2.
The TDR value may be useful in determining the approximate distance to a cable fault.
It is advisable to repeat this test to check for a consistent resulting TDR value, to verify that there is a fault.
A TDR test returns as its result the time interval, measured in 10 MHz ticks or 100 nsec units, between the start of TDR test transmission and the subsequent detection of a collision or deassertion of carrier.
On successful completion of a TDR test, the result is stored as the value of an appropriate instance of an appropriate vendor specific MIB object, and the OBJECT IDENTIFIER of that instance is stored in the appropriate instance of the appropriate test result code object (thereby indicating where the result has been stored)."
This test configures the MAC chip and executes an internal loopback test of memory, data paths, and the MAC chip logic.
This loopback test can only be executed if the interface is offline.
Once the test has completed, the MAC chip should be reinitialized for network operation, but it should remain offline.
If an error occurs during a test, the appropriate test result object will be set to indicate a failure.
The two OBJECT IDENTIFIER values
and dot3ErrorLoopbackError may be used to provided more information as values for an appropriate test result code object."
"Expected data not received (or not received correctly) in loopback test."
The object dot3StatsEtherChipSet is provided to   identify the MAC hardware used to communicate on an   interface.
The following hardware chipsets are   registered:
"The authoritative identifier for the Advanced Micro Devices Am7990 Local Area Network Controller for Ethernet (LANCE)."
The authoritative identifier for the Advanced Micro Devices Am79900 chip."
The authoritative identifier for the Advanced Micro Devices Am79C960 PCnet ISA Single Chip Ethernet Controller for ISA."
The authoritative identifier for the Advanced Micro Devices Am79C961 PCnet ISA  Single Chip Plug & Play Full Duplex Ethernet Controller for ISA."
The authoritative identifier for the Advanced Micro Devices AM79C970A PCnet PCI II Single Chip Full Duplex Ethernet Controller for PCI Local Bus."
The authoritative identifier for the Advanced Micro Devices Am79C971 PCnet FAST Single Chip Full Duplex 10/100 Mbps Ethernet Controller for PCI Local Bus."
"The authoritative identifier for the Intel 82586 IEEE 802.3 Ethernet LAN Coprocessor."
The authoritative identifier for the Intel 82596 High Performance 32 Bit Local Area Network Coprocessor."
"The authoritative identifier for the Intel 82557 Fast Ethernet PCI Bus Lan Controller."
"The authoritative identifier for the SEEQ 8003 chip set."
The authoritative identifier for the SEEQ 80C03 Full Duplex CMOS Ethernet Data Link Controller (MAC)."
"The authoritative identifier for the SEEQ 4 Port 84C30 Full Duplex CMOS Ethernet 10
MBit/Sec Data Link Controller (MAC)."
MBit/Sec Data Link Controller (MAC)."
Ethernet 10/100 Mbit/Sec Data Link Controller (MAC)."
The authoritative identifier for the SEEQ 4 Port 84C300 Fast Ethernet Controller (MAC)."
The authoritative identifier for the SEEQ 4 Port 84301 Fast Ethernet Controller (MAC)."
"The authoritative identifier for the SEEQ 8100
Gigabit Ethernet Controller (MAC & PCS).
The authoritative identifier for the National Semiconductor DP8390 Network Interface Controller."
The authoritative identifier for the National Semiconductor DP83932 Systems Oriented Network Interface Controller (SONIC)."
The authoritative identifier for the
National Semiconductor DP83905 AT Local Area Network Twisted Pair Interface (AT/LANTIC)."
The authoritative identifier for the National Semiconductor DP83907
AT Twisted Pair Enhanced Coaxial Network Interface Controller (AT/LANTIC II)."
The authoritative identifier for the National Semiconductor DP83916 Systems Oriented Network Interface Controller (SONIC 16)."
The authoritative identifier for the National Semiconductor DP83934 Systems Oriented Network Interface Controller with Twisted Pair Interface (SONIC T)."
The authoritative identifier for the National Semiconductor DP83936AVUL Full Duplex Systems  Oriented Network Interface Controller with Twisted Pair Interface (SONIC T)."
"The authoritative identifier for the Fujitsu 86950 chip."
The authoritative identifier for the Fujitsu MB86965A EtherCoupler Single Chip Ethernet Controller."
The authoritative identifier for the Fujitsu MB86965B EtherCoupler Single Chip Ethernet Controller (supports full duplex)."
"The authoritative identifier for the Digital Semiconductor DC21040 chip."
The authoritative identifier for the Digital Semiconductor 21041 PCI Ethernet LAN Controller."
The authoritative identifier for the Digital Semiconductor 21143 PCI/CardBus 10/100
The authoritative identifier for the Digital Semiconductor 21340 10/100 MB/s managed buffered port switch."
"The authoritative identifier for the Digital Semiconductor 21540 PCI/CardBus Ethernet LAN Controller with Modem Interface."
"The authoritative identifier for the Texas Instruments TNETE100 ThunderLAN PCI Fast Ethernet Controller."
"The authoritative identifier for the Texas Instruments TNETE110 ThunderLAN
PCI 10BASE T Ethernet Adapter."
The authoritative identifier for the
"The authoritative identifier for the Texas Instruments
"The authoritative identifier for the Toshiba TC35815F PCI Based 100/10Mbps Ethernet Controller."
"The authoritative identifier for the Lucent Technologies ATT1MX10 (Spinnaker) Quad MAC and Tranceiver for Ethernet Frame Switching."
The authoritative identifier for the Lucent Technologies LUC3M08 Eight Ethernet MACs for 10/100
"The authoritative identifier for the Galileo Technology GT 48001A Switched Ethernet Controller."
"The authoritative identifier for the Galileo Technology GT 48002A Switched Fast Ethernet Controller."
The authoritative identifier for the Galileo Technology GT 48004A
Four Port Fast Ethernet Switch for Multiport 10/100BASE
"The authoritative identifier for the Galileo Technology GT 48208
"The authoritative identifier for the Jato Technologies JT1001 GigEMAC Server 10/100/1000Mbps Ethernet Controller with PCI interface."
"The authoritative identifier for the XaQTI XQ18110FP GigaPower Protocol Accelerator."
For those chipsets not represented above, OBJECT IDENTIFIER   assignment is required in other documentation
In the future, management of chipset registrations may be   delegated to the Internet Assigned Numbers Authority (IANA).
"The compliance statement for managed network entities which have ethernet like network interfaces."
It is appropriate for all systems which have the necessary metering.
Implementation in such systems is highly recommended."
The compliance statement for managed network entities which have 100 Mb/sec ethernet like network interfaces.
MODULE    this module MANDATORY GROUPS { etherStats100MbsGroup }
It is appropriate for all systems which have the necessary metering.
Implementation in such systems is highly recommended."
A collection of objects providing information applicable to 100 Mb/sec ethernet like network interfaces."
There are no management objects defined in this MIB that have a MAX  ACCESS clause of read write and/or read create.
So, if this MIB is implemented correctly, then there is no risk that an intruder can alter or create any management objects of this MIB via direct SNMP SET operations.
There are a number of managed objects in this MIB that may be considered to contain sensitive information.
In particular, the dot3StatsEtherChipSet object may be considered sensitive in many environments, since it would allow an intruder to obtain information about which vendor's equipment is in use on the network.
Therefore, it may be important in some environments to control read access to these objects and possibly to even encrypt the values of these object when sending them over the network via SNMP.
Not all versions of SNMP provide features for such a secure environment.
by itself is such an insecure environment.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and GET (read)
the objects in this MIB.
It is recommended that the implementors consider the security features as provided by the SNMPv3 framework.
Specifically, the use of the User based Security Model RFC 2274 [17] and the View based Access Control Model RFC 2275
It is then a customer/user responsibility to ensure that the SNMP entity giving access to an instance of this MIB, is properly configured to give access to those objects only to those principals (users) that have legitimate rights to access them.
This section enumerates changes made to RFC 1650 to produce this document.
The MODULE IDENTITY has been updated to reflect the changes in the MIB.
A new object, dot3StatsSymbolErrors, has been added.
The definition of the object dot3StatsIndex has been converted to use the SMIv2 OBJECT TYPE macro.
A new conformance group, etherStats100MbsGroup, has been added.
A new compliance statement, ether100MbsCompliance, has been added.
The Acknowledgements were extended to provide a more complete history of the origin of this document.
The discussion of ifType has been expanded.
A section on mapping of Interfaces MIB objects has been added.
(9)   A section defining the relationship of this MIB to the MAU MIB has been added.
(10)  A section on the mapping of IEEE 802.3 managed objects to this MIB and the Interfaces MIB has been added.
(11)  Converted the dot3Tests, dot3Errors, and dot3ChipSets OIDs to use the OBJECT IDENTITY macro.
(12)  Added to the list of registered dot3ChipSets.
(13)  An intellectual property notice and copyright notice were added, as required by RFC 2026.
