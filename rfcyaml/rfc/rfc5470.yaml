- title: __initial_text__
  contents:
  - '              Architecture for IP Flow Information Export

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n   This document may contain\
    \ material from IETF Documents or IETF\n   Contributions published or made publicly\
    \ available before November\n   10, 2008.  The person(s) controlling the copyright\
    \ in some of this\n   material may not have granted the IETF Trust the right to\
    \ allow\n   modifications of such material outside the IETF Standards Process.\n\
    \   Without obtaining an adequate license from the person(s) controlling\n   the\
    \ copyright in such materials, this document may not be modified\n   outside the\
    \ IETF Standards Process, and derivative works of it may\n   not be created outside\
    \ the IETF Standards Process, except to format\n   it for publication as an RFC\
    \ or to translate it into languages other\n   than English.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines the IP Flow Information eXport (IPFIX) architecture\n\
    \   for the selective monitoring of IP Flows, and for the export of\n   measured\
    \ IP Flow information from an IPFIX Device to a Collector.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Document Scope .............................................3\n  \
    \    1.2. IPFIX Documents Overview ...................................3\n   2.\
    \ Terminology .....................................................4\n   3. Examples\
    \ of Flows ...............................................8\n   4. IPFIX Reference\
    \ Model ..........................................10\n   5. IPFIX Functional and\
    \ Logical Blocks ............................12\n      5.1. Metering Process ..........................................12\n\
    \           5.1.1. Flow Expiration ....................................12\n  \
    \         5.1.2. Flow Export ........................................13\n    \
    \  5.2. Observation Point .........................................13\n      5.3.\
    \ Selection Criteria for Packets ............................13\n           5.3.1.\
    \ Sampling Functions, Si .............................14\n           5.3.2. Filter\
    \ Functions, Fi ...............................15\n      5.4. Observation Domain\
    \ ........................................15\n      5.5. Exporting Process .........................................15\n\
    \      5.6. Collecting Process ........................................16\n  \
    \    5.7. Summary ...................................................17\n   6.\
    \ Overview of the IPFIX Protocol .................................18\n      6.1.\
    \ Information Model Overview ................................19\n      6.2. Flow\
    \ Records ..............................................19\n      6.3. Control\
    \ Information .......................................20\n      6.4. Reporting\
    \ Responsibilities ................................21\n   7. IPFIX Protocol Details\
    \ .........................................21\n      7.1. The IPFIX Basis Protocol\
    \ ..................................21\n      7.2. IPFIX Protocol on the Collecting\
    \ Process ..................22\n      7.3. Support for Applications ..................................22\n\
    \   8. Export Models ..................................................23\n  \
    \    8.1. Export with Reliable Control Connection ...................23\n    \
    \  8.2. Collector Failure Detection and Recovery ..................23\n      8.3.\
    \ Collector Redundancy ......................................24\n   9. IPFIX Flow\
    \ Collection in Special Situations ....................24\n   10. Security Considerations\
    \ .......................................25\n      10.1. Data Security ............................................25\n\
    \           10.1.1. Host-Based Security ...............................26\n  \
    \         10.1.2. Authentication-Only ...............................26\n    \
    \       10.1.3. Encryption ........................................26\n      10.2.\
    \ IPFIX End-Point Authentication ...........................27\n      10.3. IPFIX\
    \ Overload ...........................................27\n           10.3.1. Denial-of-Service\
    \ (DoS) Attack Prevention .........27\n   11. IANA Considerations ...........................................28\n\
    \      11.1. Numbers Used in the Protocol .............................28\n  \
    \    11.2. Numbers Used in the Information Model ....................29\n   12.\
    \ Acknowledgements ..............................................29\n   13. References\
    \ ....................................................30\n      13.1. Normative\
    \ References .....................................30\n      13.2. Informative\
    \ References ...................................30\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   There are several applications, e.g., usage-based accounting,\
    \ traffic\n   profiling, traffic engineering, attack/intrusion detection, quality-\n\
    \   of-service (QoS) monitoring, that require Flow-based IP traffic\n   measurements.\
    \  It is therefore important to have a standard way of\n   exporting information\
    \ related to IP Flows.  This document defines an\n   architecture for IP traffic\
    \ Flow monitoring, measuring, and\n   exporting.  It provides a high-level description\
    \ of an IPFIX Device's\n   key components and their functions.\n"
- title: 1.1.  Document Scope
  contents:
  - "1.1.  Document Scope\n   This document defines the architecture for IPFIX.  Its\
    \ main\n   objectives are to:\n   o  Describe the key IPFIX architectural components,\
    \ consisting of (at\n      least) IPFIX Devices and Collectors communicating using\
    \ the IPFIX\n      protocol.\n   o  Define the IPFIX architectural requirements,\
    \ e.g., recovery,\n      security, etc.\n   o  Describe the characteristics of\
    \ the IPFIX protocol.\n"
- title: 1.2.  IPFIX Documents Overview
  contents:
  - "1.2.  IPFIX Documents Overview\n   The IPFIX protocol provides network administrators\
    \ with access to IP\n   Flow information.  This document specifies the architecture\
    \ for the\n   export of measured IP Flow information from an IPFIX Exporting\n\
    \   Process to a Collecting Process, per the requirements defined in RFC\n   3917\
    \ [1].  The IPFIX protocol document, RFC 5101 [3], specifies how\n   IPFIX data\
    \ records and templates are carried via a congestion-aware\n   transport protocol,\
    \ from IPFIX Exporting Process to IPFIX Collecting\n   Process.  IPFIX has a formal\
    \ description of IPFIX information\n   elements (fields), their name, type, and\
    \ additional semantic\n   information, as specified in RFC 5102 [2].  Finally,\
    \ RFC 5472 [4]\n   describes what type of applications can use the IPFIX protocol\
    \ and\n   how they can use the information provided.  Furthermore, it shows how\n\
    \   the IPFIX framework relates to other architectures and frameworks.\n   Note\
    \ that the IPFIX system does not provide for remote configuration\n   of an IPFIX\
    \ device.  Instead, implementors must provide an effective\n   way to configure\
    \ their IPFIX devices.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The definitions of basic IPFIX terms such as IP Traffic Flow,\n\
    \   Exporting Process, Collecting Process, Observation Point, etc., are\n   semantically\
    \ identical with those found in the IPFIX requirements\n   document, RFC 3917\
    \ [1].  Some of the terms have been expanded for\n   more clarity when defining\
    \ the protocol.  Additional definitions\n   required for the architecture have\
    \ also been defined.  For terms that\n   are defined here and in RFC 5101 [3],\
    \ the definitions are equivalent\n   in both documents.\n   * Observation Point\n\
    \      An Observation Point is a location in the network where IP packets\n  \
    \    can be observed.  Examples include: a line to which a probe is\n      attached,\
    \ a shared medium, such as an Ethernet-based LAN, a single\n      port of a router,\
    \ or a set of interfaces (physical or logical) of\n      a router.\n      Note\
    \ that every Observation Point is associated with an\n      Observation Domain\
    \ (defined below), and that one Observation Point\n      may be a superset of\
    \ several other Observation Points.  For\n      example, one Observation Point\
    \ can be an entire line card.  That\n      would be the superset of the individual\
    \ Observation Points at the\n      line card's interfaces.\n   * Observation Domain\n\
    \      An Observation Domain is the largest set of Observation Points for\n  \
    \    which Flow information can be aggregated by a Metering Process.\n      For\
    \ example, a router line card may be an Observation Domain if it\n      is composed\
    \ of several interfaces, each of which is an Observation\n      Point.  In the\
    \ IPFIX Message it generates, the Observation Domain\n      includes its Observation\
    \ Domain ID, which is unique per Exporting\n      Process.  That way, the Collecting\
    \ Process can identify the\n      specific Observation Domain from the Exporter\
    \ that sends the IPFIX\n      Messages.  Every Observation Point is associated\
    \ with an\n      Observation Domain.  It is recommended that Observation Domain\
    \ IDs\n      also be unique per IPFIX Device.\n   * IP Traffic Flow or Flow\n\
    \      There are several definitions of the term 'flow' being used by the\n  \
    \    Internet community.  Within the context of IPFIX we use the\n      following\
    \ definition:\n      A Flow is defined as a set of IP packets passing an Observation\n\
    \      Point in the network during a certain time interval.  All packets\n   \
    \   belonging to a particular Flow have a set of common properties.\n      Each\
    \ property is defined as the result of applying a function to\n      the values\
    \ of:\n      1.  one or more packet header fields (e.g., destination IP\n    \
    \      address), transport header fields (e.g., destination port\n          number),\
    \ or application header fields (e.g., RTP header fields\n          [5]).\n   \
    \   2.  one or more characteristics of the packet itself (e.g., number\n     \
    \     of MPLS labels)\n      3.  one or more fields derived from packet treatment\
    \ (e.g., next\n          hop IP address, output interface)\n      A packet is\
    \ defined as belonging to a Flow if it completely\n      satisfies all the defined\
    \ properties of the Flow.\n      This definition covers the range from a Flow\
    \ containing all\n      packets observed at a network interface to a Flow consisting\
    \ of\n      just a single packet between two applications.  It includes\n    \
    \  packets selected by a sampling mechanism.\n   * Flow Key\n      Each of the\
    \ fields that:\n      1.  belongs to the packet header (e.g., destination IP address),\n\
    \      2.  is a property of the packet itself (e.g., packet length),\n      3.\
    \  is derived from packet treatment (e.g., Autonomous System (AS)\n          number),\
    \ and\n      4.  is used to define a Flow\n      is termed a Flow Key.\n   * Flow\
    \ Record\n      A Flow Record contains information about a specific Flow that\
    \ was\n      observed at an Observation Point.  A Flow Record contains measured\n\
    \      properties of the Flow (e.g., the total number of bytes for all\n     \
    \ the Flow's packets) and usually characteristic properties of the\n      Flow\
    \ (e.g., source IP address).\n   * Metering Process\n      The Metering Process\
    \ generates Flow Records.  Inputs to the\n      process are packet headers and\
    \ characteristics observed at an\n      Observation Point, and packet treatment\
    \ at the Observation Point\n      (for example, the selected output interface).\n\
    \      The Metering Process consists of a set of functions that includes\n   \
    \   packet header capturing, timestamping, sampling, classifying, and\n      maintaining\
    \ Flow Records.\n      The maintenance of Flow Records may include creating new\
    \ records,\n      updating existing ones, computing Flow statistics, deriving\n\
    \      further Flow properties, detecting Flow expiration, passing Flow\n    \
    \  Records to the Exporting Process, and deleting Flow Records.\n   * Exporting\
    \ Process\n      The Exporting Process sends Flow Records to one or more Collecting\n\
    \      Processes.  The Flow Records are generated by one or more Metering\n  \
    \    Processes.\n   * Exporter\n      A device that hosts one or more Exporting\
    \ Processes is termed an\n      Exporter.\n   * IPFIX Device\n      An IPFIX Device\
    \ hosts at least one Exporting Process.  It may host\n      further Exporting\
    \ Processes and arbitrary numbers of Observation\n      Points and Metering Processes.\n\
    \   * Collecting Process\n      A Collecting Process receives Flow Records from\
    \ one or more\n      Exporting Processes.  The Collecting Process might process\
    \ or\n      store received Flow Records, but such actions are out of scope for\n\
    \      this document.\n   * Collector\n      A device that hosts one or more Collecting\
    \ Processes is termed a\n      Collector.\n   * Template\n      A Template is\
    \ an ordered sequence of <type, length> pairs used to\n      completely specify\
    \ the structure and semantics of a particular set\n      of information that needs\
    \ to be communicated from an IPFIX Device\n      to a Collector.  Each Template\
    \ is uniquely identifiable by means\n      of a Template ID.\n   * Control Information,\
    \ Data Stream\n      The information that needs to be exported from the IPFIX\
    \ Device\n      can be classified into the following categories:\n      Control\
    \ Information\n         This includes the Flow definition, selection criteria\
    \ for\n         packets within the Flow sent by the Exporting Process, and\n \
    \        templates describing the data to be exported.  Control\n         Information\
    \ carries all the information needed for the end-\n         points to understand\
    \ the IPFIX protocol, and specifically for\n         the Collector to understand\
    \ and interpret the data sent by the\n         sending Exporter.\n      Data Stream\n\
    \         This includes Flow Records carrying the field values for the\n     \
    \    various observed Flows at each of the Observation Points.\n   * IPFIX Message\n\
    \      An IPFIX Message is a message originating at the Exporting Process\n  \
    \    that carries the IPFIX records of this Exporting Process and whose\n    \
    \  destination is a Collecting Process.  An IPFIX Message is\n      encapsulated\
    \ at the transport layer.\n   * Information Element\n      An Information Element\
    \ is a protocol and encoding-independent\n      description of an attribute that\
    \ may appear in an IPFIX Record.\n      The IPFIX information model, RFC 5102\
    \ [2], defines the base set of\n      Information Elements for IPFIX.  The type\
    \ associated with an\n      Information Element indicates constraints on what\
    \ it may contain\n      and also determines the valid encoding mechanisms for\
    \ use in\n      IPFIX.\n"
- title: 3.  Examples of Flows
  contents:
  - "3.  Examples of Flows\n   Some examples of Flows are listed below.  In the IPv4\
    \ examples, we\n   use interface addresses in three different 26-bit (/26) subnets.\
    \  In\n   the IPv6 examples, we use 'mac addr-nn' in the low-order 64 bits to\n\
    \   indicate the IEEE MAC (Media Access Control) address of host\n   interface\
    \ nn.\n   Example 1: Flow Keys define the different fields by which Flows are\n\
    \   distinguished.  The different combination of their field values\n   creates\
    \ unique Flows.  If {source IP address, destination IP address,\n   DSCP} are\
    \ Flow Keys, then all of these are different Flows:\n     1. {192.0.2.1,   192.0.2.65,\
    \ 4}\n     2. {192.0.2.23,  192.0.2.67, 4}\n     3. {192.0.2.23,  192.0.2.67,\
    \ 2}\n     4. {192.0.2.129, 192.0.2.67, 4}\n     5. {2001:DB8::0:mac-addr-01,\
    \ 2001:DB8::1:mac-addr-11, 4}\n     6. {2001:DB8::0:mac-addr-02, 2001:DB8::1:mac-addr-13,\
    \ 4}\n     7. {2001:DB8::0:mac-addr-02, 2001:DB8::1:mac-addr-13, 2}\n     8. {2001:DB8::2:mac-addr-21,\
    \ 2001:DB8::1:mac-addr-13, 4}\n   Example 2: A mask function can be applied to\
    \ all the packets that\n   pass through an Observation Point, in order to aggregate\
    \ some values.\n   This could be done by defining the set of Flow Keys as {source\
    \ IP\n   address, destination IP address, DSCP} as in Example 1 above, and\n \
    \  applying functions that mask out the source and destination IP\n   addresses\
    \ (least significant 6 bits for IPv4, 64 bits for IPv6).  The\n   eight Flows\
    \ from Example 1 would now be aggregated into six Flows by\n   merging the Flows\
    \ 1+2 and 5+6 into single Flows:\n     1. {192.0.2.0/26,   192.0.2.64/26, 4}\n\
    \     2. {192.0.2.0/26,   192.0.2.64/26, 2}\n     3. {192.0.2.128/26, 192.0.2.64/26,\
    \ 4}\n     4. {2001:DB8::0/64, 2001:DB8::1/64, 4}\n     5. {2001:DB8::0/64, 2001:DB8::1/64,\
    \ 2}\n     6. {2001:DB8::2/64, 2001:DB8::1/64, 4}\n   Example 3: A filter defined\
    \ by some Flow Key values can be applied on\n   all packets that pass the Observation\
    \ Point, in order to select only\n   certain Flows.  The filter is defined by\
    \ choosing fixed values for\n   specific Keys from the packet.\n   All the packets\
    \ that go from a customer network 192.0.2.0/26 to\n   another customer network\
    \ 192.0.2.64/26 with DSCP value of 4 define a\n   Flow.  All other combinations\
    \ don't define a Flow and are not taken\n   into account.  The three Flows from\
    \ Example 2 would now be reduced to\n   one Flow by filtering out Flows 2 and\
    \ 3, leaving only Flow 1,\n   {192.0.2.0/26, 192.0.2.64/26, 4}.\n   Similarly,\
    \ for the IPv6 packets in the examples above, one could\n   filter out Flows 5\
    \ and 6 to leave Flow 4.\n   The above examples can be thought of as a function\
    \ F() taking as\n   input {source IP address, destination IP address, DSCP}. \
    \ The\n   function selects only the packets that satisfy all three of the\n  \
    \ following conditions:\n   1.  Mask out the least significant 6 bits of source\
    \ IP address, match\n       against 192.0.2.0.\n   2.  Mask out the least significant\
    \ 6 bits of destination IP address,\n       match against 192.0.2.64.\n   3. \
    \ Only accept DSCP value equal to 4.\n   Depending on the values of {source IP\
    \ address, destination IP\n   address, DSCP} of the different observed packets,\
    \ the Metering\n   Process function F() would choose/filter/aggregate different\
    \ sets of\n   packets, which would create different Flows.  For example, for\n\
    \   various combinations of values of {source IP address, destination IP\n   address,\
    \ DSCP}, F(source IP address, destination IP address, DSCP)\n   would result in\
    \ the definition of one or more Flows.\n"
- title: 4.  IPFIX Reference Model
  contents:
  - "4.  IPFIX Reference Model\n   The figure below shows the reference model for\
    \ IPFIX.  This figure\n   covers the various possible scenarios that can exist\
    \ in an IPFIX\n   system.\n                             +----------------+   \
    \  +----------------+\n                             |[*Application 1]| ... |[*Application\
    \ n]|\n                             +--------+-------+     +-------+--------+\n\
    \                                      ^                     ^\n             \
    \                         |                     |\n                          \
    \            + = = = = -+- = = = = +\n                                       \
    \          ^\n                                                 |\n   +------------------------+\
    \            +-------+------------------+\n   |IPFIX Exporter          |     \
    \       | Collector(1)             |\n   |[Exporting Process(es)] |<---------->|\
    \ [Collecting Process(es)] |\n   +------------------------+            +--------------------------+\n\
    \           ....                                  ....\n   +------------------------+\
    \           +---------------------------+\n   |IPFIX Device(i)         |     \
    \      | Collector(j)              |\n   |[Observation Point(s)]  |<--------->|\
    \ [Collecting Process(es)]  |\n   |[Metering Process(es)]  |     +---->| [*Application(s)]\
    \         |\n   |[Exporting Process(es)] |     |     +---------------------------+\n\
    \   +------------------------+     .\n          ....                    .    \
    \          ....\n   +------------------------+     |     +--------------------------+\n\
    \   |IPFIX Device(m)         |     |     | Collector(n)             |\n   |[Observation\
    \ Point(s)]  |<----+---->| [Collecting Process(es)] |\n   |[Metering Process(es)]\
    \  |           | [*Application(s)]        |\n   |[Exporting Process(es)] |   \
    \        +--------------------------+\n   +------------------------+\n   The various\
    \ functional components are indicated within brackets [].\n   The functional components\
    \ within [*] are not part of the IPFIX\n   architecture.  The interfaces shown\
    \ by \"<----->\" are defined by the\n   IPFIX architecture, but those shown by\
    \ \"<= = = =>\" are not.\n                      Figure 1: IPFIX Reference Model\n\
    \   The figure below shows a typical IPFIX Device where the IPFIX\n   components\
    \ are shown in rectangular boxes.\n           +--------------------------------------------------+\n\
    \           |                 IPFIX Device                     |\n           |\
    \                                          +-----+ |\n           |        +-------\
    \ ... ------------+--------->    | |\n           |        |                  \
    \      |        |     | |\n           |   +----+----+              +----+----+\
    \   |     | |\n           |   |Metering |              |Metering |   |  E  | |\n\
    \           |   |Process 1|              |Process N|   |  x  | |\n           |\
    \   +---------+              +---------+   |  p  | |\n           |        ^  \
    \                      ^        |  o  | |\n           | +------+--------+    \
    \ +---------+------+ |  r  | |\n           | | Obsv Domain 1 |     | Obsv Domain\
    \ N  | |  t  | |\n           | |+-----+-------+|     |+-------+------+| |  i \
    \ | |\n           | ||Obsv Pt 1..j || ... ||Obsv Pt j+1..M|| |  n  | |\n     \
    \      | |+-------------+|     |+--------------+| |  g  | | Export\n   Packets\
    \ | +------^--------+     +---------^------+ |     | | packets\n   --->----+--------+----------\
    \ ... ---------+        |     | |   to\n      In   |                         \
    \                 |     +--------->\n           |        . . . . .           \
    \              |     | |Collector\n           |                              \
    \            |     | |\n           |        +------ ... -------------+--------->\
    \    | |\n           |        |                        |        |     | |\n  \
    \         |   +----+----+              +----+----+   |  P  | |\n           | \
    \  |Metering |              |Metering |   |  r  | |\n           |   |Process 1|\
    \              |Process N|   |  o  | |\n           |   +---------+           \
    \   +---------+   |  c  | |\n           |        ^                        ^  \
    \      |  e  | |\n           | +------+--------+     +---------+------+ |  s \
    \ | |\n           | | Obsv Domain 1 |     | Obsv Domain N  | |  s  | |\n     \
    \      | |+-----+-------+|     |+-------+------+| |     | |\n           | ||Obsv\
    \ Pt 1..k || ... ||Obsv Pt k+1..M|| |     | |\n           | |+-------------+|\
    \     |+--------------+| |     | |\n   Packets | +------^--------+     +---------^------+\
    \ +-----+ |\n   --->----+--------+---------- ... ---------+                |\n\
    \      In   |                                                  |\n           +--------------------------------------------------+\n\
    \                          Figure 2: IPFIX Device\n"
- title: 5.  IPFIX Functional and Logical Blocks
  contents:
  - '5.  IPFIX Functional and Logical Blocks

    '
- title: 5.1.  Metering Process
  contents:
  - "5.1.  Metering Process\n   Every Observation Point in an IPFIX Device, participating\
    \ in Flow\n   measurements, must be associated with at least one Metering Process.\n\
    \   Every packet coming into an Observation Point goes into each of the\n   Metering\
    \ Processes associated with the Observation Point.  Broadly,\n   each Metering\
    \ Process observes the packets that pass an Observation\n   Point, does timestamping,\
    \ and classifies the packets into Flow(s)\n   based on the selection criteria.\n\
    \   The Metering Process is a functional block that manages all the Flows\n  \
    \ generated from an Observation Domain.  The typical functions of a\n   Metering\
    \ Process may include:\n   o  Maintaining database(s) of all the Flow Records\
    \ from an\n      Observation Domain.  This includes creating new Flow Records,\n\
    \      updating existing ones, computing Flow Records statistics,\n      deriving\
    \ further Flow properties, and adding non-Flow-specific\n      information based\
    \ on the packet treatment (in some cases, fields\n      like AS numbers, router\
    \ state, etc.)\n   o  Maintaining statistics about the Metering Process itself,\
    \ such as\n      Flow Records generated, packets observed, etc.\n"
- title: 5.1.1.  Flow Expiration
  contents:
  - "5.1.1.  Flow Expiration\n   A Flow is considered to have expired under the following\
    \ conditions:\n   1.  If no packets belonging to the Flow have been observed for\
    \ a\n       certain period of time.  This time period should be configurable\n\
    \       at the Metering Process, with a minimum value of 0 seconds for\n     \
    \  immediate expiration.  Note that a zero timeout would report a\n       Flow\
    \ as a sequence of single-packet Flows.\n   2.  If the IPFIX Device experiences\
    \ resource constraints, a Flow may\n       be prematurely expired (e.g., lack\
    \ of memory to store Flow\n       Records).\n   3.  For long-running Flows, the\
    \ Metering Process should expire the\n       Flow on a regular basis or based\
    \ on some expiration policy.  This\n       periodicity or expiration policy should\
    \ be configurable at the\n       Metering Process.  When a long-running Flow is\
    \ expired, its Flow\n       Record may still be maintained by the Metering Process\
    \ so that\n       the Metering Process does not need to create a new Flow Record\n\
    \       for further observed packets of the same Flow.\n"
- title: 5.1.2.  Flow Export
  contents:
  - "5.1.2.  Flow Export\n   The Exporting Process decides when and whether to export\
    \ an expired\n   Flow.  A Flow can be exported because it expired for any of the\n\
    \   reasons mentioned in Section 5.1.1, \"Flow Expiration\".  For example:\n \
    \  the Exporting Process exports a portion of the expired Flows every\n   'x'\
    \ seconds.\n   For long-lasting Flows, the Exporting Process should export the\
    \ Flow\n   Records on a regular basis or based on some export policy.  This\n\
    \   periodicity or export policy should be configurable at the Exporting\n   Process.\n"
- title: 5.2.  Observation Point
  contents:
  - "5.2.  Observation Point\n   A Flow Record can be better analysed if the Observation\
    \ Point from\n   which it was measured is known.  As such, it is recommended that\n\
    \   IPFIX Devices send this information to Collectors.  In cases where\n   there\
    \ is a single Observation Point or where the Observation Point\n   information\
    \ is not relevant, the Metering Process may choose not to\n   add the Observation\
    \ Point information to the Flow Records.\n"
- title: 5.3.  Selection Criteria for Packets
  contents:
  - "5.3.  Selection Criteria for Packets\n   A Metering Process may define rules\
    \ so that only certain packets\n   within an incoming stream of packets are chosen\
    \ for measurement at an\n   Observation Point.  This may be done by one of the\
    \ two methods\n   defined below or a combination of them, in either order.  A\n\
    \   combination of each of these methods can be adopted to select the\n   packets,\
    \ i.e., one can define a set of methods {F1, S1, F2, S2, S3}\n   executed in a\
    \ specified sequence at an Observation Point to select\n   particular Flows.\n\
    \   The figure below shows the operations that may be applied as part of\n   a\
    \ typical Metering Process.\n                 +---------------------------+\n\
    \                 |  packet header capturing  |\n                 +---------------------------+\n\
    \                              |\n                              v\n          \
    \       +---------------------------+\n                 |       timestamping \
    \       |\n                 +---------------------------+\n                  \
    \            |\n                              v\n            +--------------->\
    \ +\n            |                 |\n            |                 v\n      \
    \      |    +----------------------------------------------+\n            |  \
    \  |   sampling Si (1:1 in case of no sampling)   |\n            |    +----------------------------------------------+\n\
    \            |                 |\n            |                 v\n          \
    \  |    +----------------------------------------------+\n            |    | \
    \ filtering Fi (select all when no criteria)  |\n            |    +----------------------------------------------+\n\
    \            |                 |\n            |                 v\n          \
    \  +-----------------+\n                              |\n                    \
    \          v\n                 +---------------------------+\n               \
    \  |          Flows            |\n                 +---------------------------+\n\
    \                 Figure 3: Selection Criteria for Packets\n   Note that packets\
    \ could be selected before or after any IP\n   processing, i.e., before there\
    \ is any IP checksum validation, IP\n   filtering, etc., or after one or more\
    \ of these steps.  This has an\n   impact on what kinds of traffic (or erroneous\
    \ conditions) IPFIX can\n   observe.  It is recommended that packets are selected\
    \ after their\n   checksums have been verified.\n"
- title: 5.3.1.  Sampling Functions, Si
  contents:
  - "5.3.1.  Sampling Functions, Si\n   A sampling function determines which packets\
    \ within a stream of\n   incoming packets are selected for measurement, i.e.,\
    \ packets that\n   satisfy the sampling criteria for this Metering Process.\n\
    \   Example: sample every 100th packet that was received at an\n   Observation\
    \ Point.\n   Choosing all the packets is a special case where the sampling rate\
    \ is\n   1:1.\n"
- title: 5.3.2.  Filter Functions, Fi
  contents:
  - "5.3.2.  Filter Functions, Fi\n   A Filter Function selects only those incoming\
    \ packets that satisfy a\n   function on fields defined by the packet header fields,\
    \ fields\n   obtained while doing the packet processing, or properties of the\n\
    \   packet itself.\n   Example: Mask/Match of the fields that define a filter.\
    \  A filter\n   might be defined as {Protocol == TCP, Destination Port < 1024}.\n\
    \   Several such filters could be used in any sequence to select packets.\n  \
    \ Note that packets selected by a (sequence of) filter functions may be\n   further\
    \ classified by other filter functions, i.e., the selected\n   packets may belong\
    \ to several Flows, any or all of which are\n   exported.\n"
- title: 5.4.  Observation Domain
  contents:
  - "5.4.  Observation Domain\n   The Observation Domain is a logical block that presents\
    \ a single\n   identity for a group of Observation Points within an IPFIX Device.\n\
    \   Each {Observation Point, Metering Process} pair belongs to a single\n   Observation\
    \ Domain.  An IPFIX Device could have multiple Observation\n   Domains, each of\
    \ which has a subset of the total set of Observation\n   Points in it.  Each Observation\
    \ Domain must carry a unique ID within\n   the context of an IPFIX Device.  Note\
    \ that in the case of multiple\n   Observation Domains, a unique ID per Observation\
    \ Domain must be\n   transmitted as a parameter to the Exporting Function.  That\
    \ unique ID\n   is referred to as the IPFIX Observation Domain ID.\n"
- title: 5.5.  Exporting Process
  contents:
  - "5.5.  Exporting Process\n   The Exporting Process is the functional block that\
    \ sends data to one\n   or more IPFIX Collectors using the IPFIX protocol.  On\
    \ one side, the\n   Exporting Process interfaces with Metering Process(es) to\
    \ get Flow\n   Records; while on the other side, it talks to a Collecting Process\
    \ on\n   the Collector(s).\n   There may be additional rules defined within an\
    \ Observation Domain so\n   that only certain Flow Records are exported.  This\
    \ may be done by\n   either one or a combination of Si and Fi, as described in\n\
    \   Section 5.3, \"Selection Criteria for Packets\".\n   Example: Only the Flow\
    \ Records that meet the following selection\n   criteria are exported:\n   1.\
    \  All Flow Records whose destination IP address matches\n       {192.0.33.5}.\n\
    \   2.  Every other (i.e., sampling rate 1 in 2) Flow Record whose\n       destination\
    \ IP address matches {192.0.11.30}.\n"
- title: 5.6.  Collecting Process
  contents:
  - "5.6.  Collecting Process\n   Collecting Processes use a Flow Record's Template\
    \ ID to interpret\n   that Flow Record's Information Elements.  To allow this,\
    \ an IPFIX\n   Exporter must ensure that an IPFIX Collector knows the Template\
    \ ID\n   for each incoming Flow Record.  To interpret incoming Flow Records,\n\
    \   an IPFIX Collector may also need to know the function F() that was\n   used\
    \ by the Metering Process for each Flow.\n   The functions of the Collecting Process\
    \ must include:\n   o  Identifying, accepting, and decoding the IPFIX Messages\
    \ from\n      different <Exporting Process, Observation Domain> pairs.\n   o \
    \ Storing the Control Information and Flow Records received from an\n      IPFIX\
    \ Device.\n   At a high level, the Collecting Process:\n   1.  Receives and stores\
    \ the Control Information.\n   2.  Decodes and stores the Flow Records using the\
    \ Control\n       Information.\n"
- title: 5.7.  Summary
  contents:
  - "5.7.  Summary\n   The figure below shows the functions performed in sequence\
    \ by the\n   various functional blocks in an IPFIX Device.\n                 \
    \   Packet(s) coming into Observation Point(s)\n                      |      \
    \                             |\n                      v                     \
    \              v\n     +----------------+-------------------------+   +-----+-------+\n\
    \     |          Metering Process on an          |   |             |\n     | \
    \            Observation Point            |   |             |\n     |        \
    \                                  |   |             |\n     |   packet header\
    \ capturing                |   |             |\n     |        |              \
    \                   |...| Metering    |\n     |   timestamping               \
    \            |   | Process N   |\n     |        |                            \
    \     |   |             |\n     | +----->+                                 | \
    \  |             |\n     | |      |                                 |   |    \
    \         |\n     | |   sampling Si (1:1 in case of no       |   |           \
    \  |\n     | |      |          sampling)              |   |             |\n  \
    \   | |   filtering Fi (select all when        |   |             |\n     | | \
    \     |          no criteria)           |   |             |\n     | +------+ \
    \                                |   |             |\n     |        |        \
    \                         |   |             |\n     |        |        Timing out\
    \ Flows         |   |             |\n     |        |    Handle resource overloads\
    \    |   |             |\n     +--------|---------------------------------+  \
    \ +-----|-------+\n              |                                           |\n\
    \      Flow Records (identified by Observation Domain)  Flow Records\n       \
    \       |                                           |\n              +---------+---------------------------------+\n\
    \                        |\n   +--------------------|----------------------------------------------+\n\
    \   |                    |     Exporting Process                        |\n  \
    \ |+-------------------|-------------------------------------------+  |\n   ||\
    \                   v       IPFIX Protocol                      |  |\n   ||+-----------------------------+\
    \  +----------------------------+|  |\n   |||Rules for                    |  |Functions\
    \                   ||  |\n   ||| Picking/sending Templates   |  |-Packetise selected\
    \ Control ||  |\n   ||| Picking/sending Flow Records|->|  & data Information into\
    \   ||  |\n   ||| Encoding Template & data    |  |  IPFIX export packets.    \
    \ ||  |\n   ||| Selecting Flows to export(*)|  |-Handle export errors       ||\
    \  |\n   ||+-----------------------------+  +----------------------------+|  |\n\
    \   |+----------------------------+----------------------------------+  |\n  \
    \ |                             |                                     |\n   |\
    \                    exported IPFIX Messages                        |\n   |  \
    \                           |                                     |\n   |    \
    \            +------------+-----------------+                   |\n   |      \
    \          |  Anonymise export packet(*)  |                   |\n   |        \
    \        +------------+-----------------+                   |\n   |          \
    \                   |                                     |\n   |            \
    \    +------------+-----------------+                   |\n   |              \
    \  |       Transport  Protocol    |                   |\n   |                +------------+-----------------+\
    \                   |\n   |                             |                    \
    \                 |\n   +-----------------------------+-------------------------------------+\n\
    \                                 |\n                                 v\n    \
    \                IPFIX export packet to Collector\n   (*) indicates that the block\
    \ is optional.\n                 Figure 4: IPFIX Device functional blocks\n"
- title: 6.  Overview of the IPFIX Protocol
  contents:
  - "6.  Overview of the IPFIX Protocol\n   An IPFIX Device consists of a set of cooperating\
    \ processes that\n   implement the functional blocks described in the previous\
    \ section.\n   Alternatively, an IPFIX Device can be viewed simply as a network\n\
    \   entity that implements the IPFIX protocol.  At the IPFIX Device, the\n   protocol\
    \ functionality resides in the Exporting Process.  The IPFIX\n   Exporting Process\
    \ gets Flow Records from a Metering Process, and\n   sends them to the Collector(s).\n\
    \   At a high level, an IPFIX Device performs the following tasks:\n   1.  Encodes\
    \ Control Information into Templates.\n   2.  Encodes packets observed at the\
    \ Observation Points into Flow\n       Records.\n   3.  Packetises the selected\
    \ Templates and Flow Records into IPFIX\n       Messages.\n   4.  Sends IPFIX\
    \ Messages to the Collector.\n   The IPFIX protocol communicates information from\
    \ an IPFIX Exporter to\n   an IPFIX Collector.  That information includes not\
    \ only Flow Records,\n   but also information about the Metering Process.  Such\
    \ information\n   (referred to as Control Information) includes details of the\
    \ data\n   fields in Flow Records.  It may also include statistics from the\n\
    \   Metering Process, such as the number of packets lost (i.e., not\n   metered).\n\
    \   For details of the IPFIX protocol, please refer to RFC 5101 [3].\n"
- title: 6.1.  Information Model Overview
  contents:
  - "6.1.  Information Model Overview\n   The IP Flow Information eXport (IPFIX) protocol\
    \ serves for\n   transmitting information related to measured IP traffic over\
    \ the\n   Internet.  The protocol specification in RFC 5101 [3] defines how\n\
    \   Information Elements are transmitted.  For Information Elements, it\n   specifies\
    \ the encoding of a set of basic data types.  However, the\n   list of fields\
    \ that can be transmitted by the protocol, such as Flow\n   attributes (source\
    \ IP address, number of packets, etc.) and\n   information about the Metering\
    \ and Exporting Process (packet\n   Observation Point, sampling rate, Flow timeout\
    \ interval, etc.), is\n   not specified in RFC 5101 [3].  Instead, it is defined\
    \ in the IPFIX\n   information model in RFC 5102 [2].\n   The information model\
    \ provides a complete description of the\n   properties of every IPFIX Information\
    \ Element.  It does this by\n   specifying each element's name, Field Type, data\
    \ type, etc., and\n   providing a description of each element.  Element descriptions\
    \ give\n   the semantics of the element, i.e., say how it is derived from a Flow\n\
    \   or other information available within an IPFIX Device.\n"
- title: 6.2.  Flow Records
  contents:
  - "6.2.  Flow Records\n   The following rules provide guidelines to be followed\
    \ while encoding\n   the Flow Records information:\n   A Flow Record contains\
    \ enough information so that the Collecting\n   Process can identify the corresponding\
    \ <Per-Flow Control Information,\n   Configuration Control Information>.\n   The\
    \ Exporting Process encodes a given Information Element (as\n   specified in RFC\
    \ 5102 [2]), based on the encoding standards\n   prescribed by RFC 5101 [3].\n"
- title: 6.3.  Control Information
  contents:
  - "6.3.  Control Information\n   The following rules provide guidelines to be followed\
    \ while encoding\n   the Control Information:\n   o  Per-Flow Control Information\
    \ should be encoded such that the\n      Collecting Process can capture the structure\
    \ and semantics of the\n      corresponding Flow data for each of the Flow Records\
    \ exported by\n      the IPFIX Device.\n   o  Configuration Control Information\
    \ is conveyed to a Collector so\n      that its Collecting Process can capture\
    \ the structure and\n      semantics of the corresponding configuration data.\
    \  The\n      configuration data, which is also Control Information, should\n\
    \      carry additional information on the Observation Domain within\n      which\
    \ the configuration takes effect.\n   For example, sampling using the same sampling\
    \ algorithm, say 1 in 100\n   packets, is configured on two Observation Points\
    \ O1 and O2.  The\n   configuration in this case may be encoded as {ID, observation\
    \ points\n   (O1,O2), sampling algorithm, interval (1 in 100)}, where ID is the\n\
    \   Observation Domain ID for the domain containing O1 and O2.  The\n   Observation\
    \ Domain ID uniquely identifies this configuration, and\n   must be sent within\
    \ the Flow Records in order to be able to match the\n   right configuration control\
    \ information.\n   The Control Information is used by the Collecting Process to:\n\
    \   o  Decode and interpret Flow Records.\n   o  Understand the state of the Exporting\
    \ Process.\n   Sending Control Information from the Exporting Process in a timely\n\
    \   and reliable manner is critical to the proper functioning of the\n   IPFIX\
    \ Collecting Process.  The following approaches may be taken for\n   the export\
    \ of Control Information:\n   1.  Send all the Control Information pertaining\
    \ to Flow Records prior\n       to sending the Flow Records themselves.  This\
    \ includes any\n       incremental changes to the definition of the Flow Records.\n\
    \   2.  Notify, on a near real-time basis, the state of the IPFIX Device\n   \
    \    to the Collecting Process.  This includes all changes such as a\n       configuration\
    \ change that affects the Flow behaviour, changes to\n       Exporting Process\
    \ resources that alter export rates, etc., which\n       the Collector needs to\
    \ be aware of.\n   3.  Since it is vital that a Collecting Process maintains accurate\n\
    \       knowledge of the Exporter's state, the export of the Control\n       Information\
    \ should be done such that it reaches the Collector\n       reliably.  One way\
    \ to achieve this is to send the Control\n       Information over a reliable transport.\n"
- title: 6.4.  Reporting Responsibilities
  contents:
  - "6.4.  Reporting Responsibilities\n   From time to time, an IPFIX Device may not\
    \ be able to observe all the\n   packets reaching one of its Observation Points.\
    \  This could occur if\n   a Metering Process finds itself temporarily short of\
    \ resources.  For\n   example, it might run out of packet buffers for IPFIX export.\n\
    \   In such situations, the IPFIX Device should attempt to count the\n   number\
    \ of packet losses that have occurred, and report them to its\n   Collector(s).\
    \  If it is not possible to count losses accurately,\n   e.g., when transport\
    \ layer (i.e., non-IPFIX) errors are detected, the\n   IPFIX Device should report\
    \ this fact, and perhaps indicate the time\n   period during which some packets\
    \ might not have been observed.\n"
- title: 7.  IPFIX Protocol Details
  contents:
  - "7.  IPFIX Protocol Details\n   When the IPFIX Working Group was chartered, there\
    \ were existing\n   common practices in the area of Flow export, for example,\
    \ NetFlow,\n   CRANE (Common Reliable Accounting for Network Element), LFAP (Light-\n\
    \   weight Flow Admission Protocol), RTFM (Real-time Traffic Flow\n   Measurement),\
    \ etc.  IPFIX's charter required the Working Group to\n   consider those existing\
    \ practices, and select the one that was the\n   closest fit to the IPFIX requirements\
    \ in RFC 3917 [1].  Additions or\n   modifications would then be made to the selected\
    \ protocol to fit it\n   exactly into the IPFIX architecture.\n"
- title: 7.1.  The IPFIX Basis Protocol
  contents:
  - "7.1.  The IPFIX Basis Protocol\n   The Working Group went through an extensive\
    \ evaluation of the various\n   existing protocols that were available, weighing\
    \ the level of\n   compliance with the requirements, and selected one of the candidates\n\
    \   as the basis for the IPFIX protocol.  For more details of the\n   evaluation\
    \ process, please see RFC 3955 [6].\n   In the basis protocol, Flow Records are\
    \ defined by Templates, where a\n   Template is an ordered set of the Information\
    \ Elements appearing in a\n   Flow Record, together with their field sizes within\
    \ those records.\n   This approach provides the following advantages:\n   o  Using\
    \ the Template mechanism, new fields can be added to IPFIX\n      Flow Records\
    \ without changing the structure of the export record\n      format.\n   o  Templates\
    \ that are sent to the Collecting Process carry structural\n      information\
    \ about the exported Flow Record fields.  Therefore, if\n      the Collector does\
    \ not understand the semantics of new fields, it\n      can ignore them, but still\
    \ interpret the Flow Record.\n   o  Because the template mechanism is flexible,\
    \ it allows the export\n      of only the required fields from the Flows to the\
    \ Collecting\n      Process.  This helps to reduce the exported Flow data volume\
    \ and\n      possibly provide memory savings at the Exporting Process and\n  \
    \    Collecting Process.  Sending only the required information can\n      also\
    \ reduce network load.\n"
- title: 7.2.  IPFIX Protocol on the Collecting Process
  contents:
  - "7.2.  IPFIX Protocol on the Collecting Process\n   The Collecting Process is\
    \ responsible for:\n   1.  Receiving and decoding Flow Records from the IPFIX\
    \ Devices.\n   2.  Reporting on the loss of Flow Records sent to the Collecting\n\
    \       Process by an IPFIX Exporting Process.\n   Complete details of the IPFIX\
    \ protocol are given in RFC 5101 [3].\n"
- title: 7.3.  Support for Applications
  contents:
  - "7.3.  Support for Applications\n   Applications that use the information collected\
    \ by IPFIX may be\n   Billing or Intrusion Detection sub-systems, etc.  These\
    \ applications\n   may be an integral part of the Collecting Process, or they\
    \ may be co-\n   located with the Collecting Process.  The way by which these\n\
    \   applications interface with IPFIX systems to get the desired\n   information\
    \ is out of scope for this document.\n"
- title: 8.  Export Models
  contents:
  - '8.  Export Models

    '
- title: 8.1.  Export with Reliable Control Connection
  contents:
  - "8.1.  Export with Reliable Control Connection\n   As mentioned in RFC 3917 [1],\
    \ an IPFIX Device must be able to\n   transport its Control Information and Data\
    \ Stream over a congestion-\n   aware transport protocol.\n   If the network in\
    \ which the IPFIX Device and Collecting Process are\n   located does not guarantee\
    \ reliability, at least the Control\n   Information should be exported over a\
    \ reliable transport.  The Data\n   Stream may be exported over a reliable or\
    \ unreliable transport\n   protocol.\n   Possible transport protocols include:\n\
    \   o  SCTP: Supports reliable and unreliable transport.\n   o  TCP: Provides\
    \ reliable transport only.\n   o  UDP: Provides unreliable transport only.  Network\
    \ operators would\n      need to avoid congestion by keeping traffic within their\
    \ own\n      administrative domains.  For example, one could use a dedicated\n\
    \      network (or Ethernet link) to carry IPFIX traffic from Exporter to\n  \
    \    Collector.\n"
- title: 8.2.  Collector Failure Detection and Recovery
  contents:
  - "8.2.  Collector Failure Detection and Recovery\n   The transport connection (in\
    \ the case of a connection-oriented\n   protocol) is pre-configured between the\
    \ IPFIX Device and the\n   Collector.  The IPFIX protocol does not provide any\
    \ mechanism for\n   configuring the Exporting and Collecting Processes.\n   Once\
    \ connected, an IPFIX Collector receives Control Information and\n   uses that\
    \ information to interpret Flow Records.  The IPFIX Device\n   should set a keepalive\
    \ (e.g., the keepalive timeout in the case of\n   TCP, the HEARTBEAT interval\
    \ in the case of SCTP) to a sufficiently\n   low value so that it can quickly\
    \ detect a Collector failure.  Note,\n   however, that extremely short keepalive\
    \ intervals can incorrectly\n   abort the connection during transient periods\
    \ of congestion.  They\n   can also cause some level of additional network load\
    \ during otherwise\n   idle periods.\n   Collector failure refers to the crash\
    \ or restart of the Collecting\n   Process or of the Collector itself.  A Collector\
    \ failure is detected\n   at the IPFIX Device by the break in the connection-oriented\
    \ transport\n   protocol session; depending on the transport protocol, the connection\n\
    \   timeout mechanisms differ.  On detecting a keepalive timeout in a\n   single\
    \ Collector scenario, the IPFIX Device should stop sending Flow\n   Records to\
    \ the Collector and try to reestablish the transport\n   connection.  If Collecting\
    \ Process failover is supported by the\n   Exporting Process, backup session(s)\
    \ may be opened in advance, and\n   Control Information sent to the failover Collecting\
    \ Process.\n   There could be one or more secondary Collectors with priority\n\
    \   assigned to them.  The primary Collector crash is detected at the\n   IPFIX\
    \ Device.  On detecting loss of connectivity, the IPFIX Device\n   opens a Data\
    \ Stream with the secondary Collector of the next highest\n   priority.  If that\
    \ secondary was not opened in advance, both the\n   Control Information and Data\
    \ Stream must be sent to it.  That\n   Collector might then become the primary,\
    \ or the Exporting Process\n   might try to reestablish the original session.\n"
- title: 8.3.  Collector Redundancy
  contents:
  - "8.3.  Collector Redundancy\n   Configuring redundant Collectors is an alternative\
    \ to configuring\n   backup Collectors.  In this model, all Collectors simultaneously\n\
    \   receive the Control Information and Data Streams.  Multiple {Control\n   Information,\
    \ Data Stream} pairs could be sent, each to a different\n   Collector, from the\
    \ same IPFIX Device.  Since the IPFIX protocol\n   requires a congestion-aware\
    \ transport, achieving redundancy using\n   multicast is not an option.\n"
- title: 9.  IPFIX Flow Collection in Special Situations
  contents:
  - "9.  IPFIX Flow Collection in Special Situations\n   An IPFIX Device can generate,\
    \ receive, and/or alter two special types\n   of traffic, which are listed below.\n\
    \   Tunnel traffic:\n      The IPFIX Device could be the head, midpoint, or end-point\
    \ of a\n      tunnel.  In such cases, the IPFIX Device could be handling Generic\n\
    \      Routing Encapsulation (GRE) [8], IPinIP [7], or Layer Two\n      Tunneling\
    \ Protocol version 3 [9] traffic.\n   VPN traffic:\n      The IPFIX Device could\
    \ be a provider-edge device that receives\n      traffic from customer sites belonging\
    \ to different Virtual Private\n      Networks.\n   Similarly, IPFIX could be\
    \ implemented on devices which perform one or\n   more of the following special\
    \ services:\n   o  Explicitly drop packets.  For example, a device that provides\n\
    \      firewall service drops packets based on some administrative\n      policy.\n\
    \   o  Alter the values of fields used as IPFIX Flow Keys of interest.\n     \
    \ For example, a device that provides NAT service can change the\n      source\
    \ and/or destination IP address.\n   In cases such as those listed above, there\
    \ should be clear guidelines\n   as to:\n   o  How and when to classify the packets\
    \ as Flows in the IPFIX Device.\n   o  If multiple encapsulations are used to\
    \ define Flows, how to convey\n      the same fields (e.g., IP address) in different\
    \ layers.\n   o  How to differentiate Flows based on different private domains.\n\
    \      For example, overlapping IP addresses in Layer-3 VPNs.\n   o  What extra\
    \ information needs to be exported so that the Collector\n      can make a clear\
    \ interpretation of the received Flow Records.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Flow information can be used for various purposes,\
    \ such as usage-\n   based accounting, traffic profiling, traffic engineering,\
    \ and\n   intrusion detection.  The security requirements may differ\n   significantly\
    \ for such applications.  To be able to satisfy the\n   security needs of various\
    \ IPFIX users, an IPFIX system must provide\n   different levels of security protection.\n"
- title: 10.1.  Data Security
  contents:
  - "10.1.  Data Security\n   IPFIX data comprises Control Information and Data Streams\
    \ generated\n   by the IPFIX Device.\n   The IPFIX data may exist in both the\
    \ IPFIX Device and the Collector.\n   In addition, the data is also transferred\
    \ on the wire from the IPFIX\n   Device to the Collector when it is exported.\
    \  To provide security,\n   the data should be protected from common network attacks.\n\
    \   The protection of IPFIX data within the end system (IPFIX Device and\n   Collector)\
    \ is out of scope for this document.  It is assumed that the\n   end system operator\
    \ will provide adequate security for the IPFIX\n   data.\n   The IPFIX architecture\
    \ must allow different levels of protection to\n   the IPFIX data on the wire.\
    \  Wherever security functions are\n   required, it is recommended that users\
    \ should leverage lower layers\n   using either TLS or DTLS (Datagram Transport\
    \ Layer Security), if\n   these can successfully satisfy the security requirement\
    \ of IPFIX data\n   protection.\n   To protect the data on the wire, three levels\
    \ of granularity should\n   be supported; these are described in the following\
    \ subsections.\n"
- title: 10.1.1.  Host-Based Security
  contents:
  - "10.1.1.  Host-Based Security\n   Security may not be required when the transport\
    \ between the IPFIX\n   Device and the Collector is perceived as safe.  This option\
    \ allows\n   the protocol to run most efficiently without extra overhead, and\
    \ an\n   IPFIX system must support it.\n"
- title: 10.1.2.  Authentication-Only
  contents:
  - "10.1.2.  Authentication-Only\n   Authentication-only protection provides IPFIX\
    \ users with the\n   assurance of data integrity and authenticity.  The data exchanged\n\
    \   between the IPFIX Device and the Collector is protected by an\n   authentication\
    \ signature.  Any modification of the IPFIX data will be\n   detected by the recipient,\
    \ resulting in the discarding of the\n   received data.  However, the authentication-only\
    \ option doesn't offer\n   data confidentiality.\n   The IPFIX user should not\
    \ use authentication-only when sensitive or\n   confidential information is being\
    \ exchanged.  An IPFIX solution\n   should support this option.  The authentication-only\
    \ option should\n   provide replay attack protection.  Some means to achieve this\
    \ level\n   of security are:\n   o  Encapsulating Security Payload (with a null\
    \ encryption algorithm)\n   o  Transport Layer Security (with a null encryption\
    \ algorithm)\n   o  IP Authentication Header\n"
- title: 10.1.3.  Encryption
  contents:
  - "10.1.3.  Encryption\n   Data encryption provides the best protection for IPFIX\
    \ data.  The\n   IPFIX data is encrypted at the sender, and only the intended\n\
    \   recipient can decrypt and have access to the data.  This option must\n   be\
    \ used when the transport between the IPFIX Device and the Collector\n   is unsafe,\
    \ and the IPFIX data needs to be protected.  It is\n   recommended that the underlying\
    \ transport layer's security functions\n   be used for this purpose.  Some means\
    \ to achieve this level of\n   security are:\n   o  Encapsulating Security Payload\n\
    \   o  Transport Layer Security Protocol\n   The data encryption option adds overhead\
    \ to the IPFIX data transfer.\n   It may limit the rate that an Exporter can report\
    \ its Flow Records to\n   the Collector, due to the resource requirement for running\n\
    \   encryption.\n"
- title: 10.2.  IPFIX End-Point Authentication
  contents:
  - "10.2.  IPFIX End-Point Authentication\n   It is important to make sure that the\
    \ IPFIX Device is talking to the\n   \"right\" Collector rather than to a masquerading\
    \ Collector.  The same\n   logic also holds true from the Collector's point of\
    \ view, i.e., it\n   may want to make sure it is collecting the Flow Records from\
    \ the\n   \"right\" IPFIX Device.  An IPFIX system should allow the end-point\n\
    \   authentication capability so that either one-way or mutual\n   authentication\
    \ can be performed between the IPFIX Device and\n   Collector.\n   The IPFIX architecture\
    \ should use any existing transport protection\n   protocols, such as TLS, to\
    \ fulfil the authentication requirement.\n"
- title: 10.3.  IPFIX Overload
  contents:
  - "10.3.  IPFIX Overload\n   An IPFIX Device could become overloaded under various\
    \ conditions.\n   This may be because of exhaustion of internal resources used\
    \ for Flow\n   generation and/or export.  Such overloading may cause loss of data\n\
    \   from the Exporting Process, either from lack of export bandwidth\n   (possibly\
    \ caused by an unusually high number of observed Flows) or\n   from network congestion\
    \ in the path from Exporter to Collector.\n   IPFIX Collectors should be able\
    \ to detect the loss of exported Flow\n   Records, and should at least record\
    \ the number of lost Flow Records.\n"
- title: 10.3.1.  Denial-of-Service (DoS) Attack Prevention
  contents:
  - "10.3.1.  Denial-of-Service (DoS) Attack Prevention\n   Since one of the potential\
    \ usages for IPFIX is for intrusion\n   detection, it is important for the IPFIX\
    \ architecture to support some\n   kind of DoS resistance.\n"
- title: 10.3.1.1.  Network under Attack
  contents:
  - "10.3.1.1.  Network under Attack\n   The network itself may be under attack, resulting\
    \ in an overwhelming\n   number of IPFIX Messages.  An IPFIX system should try\
    \ to capture as\n   much information as possible.  However, when a large number\
    \ of IPFIX\n   Messages are generated in a short period of time, the IPFIX system\n\
    \   may become overloaded.\n"
- title: 10.3.1.2.  Generic DoS Attack on the IPFIX Device and Collector
  contents:
  - "10.3.1.2.  Generic DoS Attack on the IPFIX Device and Collector\n   The IPFIX\
    \ Device and Collector may be subject to generic DoS attacks,\n   just as any\
    \ system on any open network.  These types of attacks are\n   not IPFIX specific.\
    \  Preventing and responding to such types of\n   attacks are out of the scope\
    \ of this document.\n"
- title: 10.3.1.3.  IPFIX-Specific DoS Attack
  contents:
  - "10.3.1.3.  IPFIX-Specific DoS Attack\n   There are some specific attacks on the\
    \ IPFIX portion of the IPFIX\n   Device or Collector:\n   o  The attacker could\
    \ overwhelm the Collector with spoofed IPFIX\n      Export packets.  One way to\
    \ solve this problem is to periodically\n      synchronise the sequence numbers\
    \ of the Flow Records between the\n      Exporting and Collecting Processes.\n\
    \   o  The attacker could provide false reports to the Collector by\n      sending\
    \ spoofed packets.\n   The problems mentioned above can be solved to a large extent\
    \ if the\n   control packets are encrypted both ways, thereby providing more\n\
    \   information that the Collector could use to identify and ignore\n   spoofed\
    \ data packets.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   The IPFIX Architecture, as set out in this document,\
    \ has two sets of\n   assigned numbers, as outlined in the following subsections.\n"
- title: 11.1.  Numbers Used in the Protocol
  contents:
  - "11.1.  Numbers Used in the Protocol\n   IPFIX Messages, as described in RFC 5101\
    \ [3], use two fields with\n   assigned values.  These are the IPFIX Version Number,\
    \ indicating\n   which version of the IPFIX Protocol was used to export an IPFIX\n\
    \   Message, and the IPFIX Set ID, indicating the type for each set of\n   information\
    \ within an IPFIX Message.\n   Values for the IPFIX Version Number and the IPFIX\
    \ Set ID, together\n   with the considerations for assigning them, are defined\
    \ in RFC 5101\n   [3].\n"
- title: 11.2.  Numbers Used in the Information Model
  contents:
  - "11.2.  Numbers Used in the Information Model\n   Fields of the IPFIX protocol\
    \ carry information about traffic\n   measurement.  They are modelled as elements\
    \ of the IPFIX information\n   model RFC 5102 [2].  Each Information Element describes\
    \ a field that\n   may appear in an IPFIX Message.  Within an IPFIX Message, the\
    \ field\n   type is indicated by its Field Type.\n   Values for the IPFIX Information\
    \ Element IDs, together with the\n   considerations for assigning them, are defined\
    \ in RFC 5102 [2].\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   The document editors wish to thank all the people contributing\
    \ to the\n   discussion of this document on the mailing list, and the design teams\n\
    \   for many valuable comments.  In particular, the following made\n   significant\
    \ contributions:\n      Tanja Zseby\n      Paul Calato\n      Dave Plonka\n  \
    \    Jeffrey Meyer\n      K.C.Norseth\n      Vamsi Valluri\n      Cliff Wang\n\
    \      Ram Gopal\n      Jc Martin\n      Carter Bullard\n      Reinaldo Penno\n\
    \      Simon Leinen\n      Kevin Zhang\n      Paul Aitken\n      Brian Trammell\n\
    \      Special thanks to Dave Plonka for the multiple thorough reviews.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [1]  Quittek, J., Zseby, T., Claise, B., and\
    \ S. Zander, \"Requirements\n        for IP Flow Information Export (IPFIX)\"\
    , RFC 3917, October 2004.\n   [2]  Quittek, J., Bryant, S., Claise, B., Aitken,\
    \ P., and J. Meyer,\n        \"Information for Model IP Flow Information Export\"\
    , RFC 5102,\n        January 2008.\n   [3]  Claise, B., \"Specification of the\
    \ IP Flow Information Export\n        (IPFIX) Protocol for the Exchange of IP\
    \ Traffic Flow\n        Information\", RFC 5101, January 2008.\n   [4]  Zseby,\
    \ T., Boschi, E., Brownlee, N., and B. Claise, \"IPFIX\n        Applicability\"\
    , RFC 5472, March 2009.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [5]  Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V. Jacobson,\n        \"RTP: A Transport Protocol for Real-Time Applications\"\
    , STD 64,\n        RFC 3550, July 2003.\n   [6]  Leinen, S., \"Evaluation of Candidate\
    \ Protocols for IP Flow\n        Information Export (IPFIX)\", RFC 3955, October\
    \ 2004.\n   [7]  Simpson, W., \"IP in IP Tunneling\", RFC 1853, October 1995.\n\
    \   [8]  Farinacci, D., Li, T., Hanks, S., Meyer, D., and P. Traina,\n       \
    \ \"Generic Routing Encapsulation (GRE)\", RFC 2784, March 2000.\n   [9]  Lau,\
    \ J., Townsley, M., and I. Goyret, \"Layer Two Tunneling\n        Protocol - Version\
    \ 3 (L2TPv3)\", RFC 3931, March 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ganesh Sadasivan\n   Rohati Systems\n   1192 Borregas\
    \ Ave.\n   Sunnyvale, CA  94089\n   USA\n   EMail: gsadasiv@rohati.com\n   Nevil\
    \ Brownlee\n   CAIDA | The University of Auckland\n   Private Bag 92019\n   Auckland\
    \  1142\n   New Zealand\n   Phone: +64 9 373 7599 x88941\n   EMail: n.brownlee@auckland.ac.nz\n\
    \   Benoit Claise\n   Cisco Systems, Inc.\n   De Kleetlaan 6a b1\n   1831 Diegem\n\
    \   Belgium\n   Phone: +32 2 704 5622\n   EMail: bclaise@cisco.com\n   Juergen\
    \ Quittek\n   NEC Laboratories Europe, NEC Europe Ltd.\n   Kurfuersten-Anlage\
    \ 36\n   Heidelberg  69115\n   Germany\n   Phone: +49 6221 4342-115\n   EMail:\
    \ quittek@nw.neclab.eu\n   URI:   http://www.neclab.eu/\n"
