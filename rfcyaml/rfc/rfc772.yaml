- title: __initial_text__
  contents:
  - '                         MAIL TRANSFER PROTOCOL

    '
- title: PREFACE
  contents:
  - "PREFACE\n   This is a first draft of this protocol and comments are very\n  \
    \ definitely requested.\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   The objective of Mail Transfer Protocol (MTP) is to transfer\
    \ mail\n   reliably and efficiently.\n   This paper assumes knowledge of the following\
    \ protocols described in\n   the ARPA Internet Protocol Handbook.  The reader\
    \ will note strong\n   similarities to portions of the File Transfer Protocol;\
    \ in part, this\n   is due to the original ARPA Network implementation of computer\
    \ mail\n   as a feature of FTP.\n      The ARPANET Host-to-Host Protocol [Network\
    \ Control Protocol] (NCP)\n      The Transmission Control Protocol (TCP)\n   \
    \   The TELNET Protocol (TELNET)\n      The File Transfer Protocol (FTP)\n"
- title: DISCUSSION
  contents:
  - "DISCUSSION\n   In this section, the terminology and the MTP model are discussed.\n\
    \   The terms defined in this section are only those that have special\n   significance\
    \ in MTP.  Some of the terminology is very specific to the\n   MTP model; some\
    \ readers may wish to turn to the section on the MTP\n   model while reviewing\
    \ the terminology.\n   TERMINOLOGY\n      ASCII\n         The ASCII character\
    \ set as defined in the ARPA Internet\n         Protocol Handbook.  In MTP, ASCII\
    \ characters are defined to be\n         the lower half of an eight-bit code set\
    \ (i.e., the most\n         significant bit is zero) and is called NVT-ASCII.\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \    control connection\n         The TCP full-duplex communication path or two\
    \ NCP simplex\n         communication paths between a sender-MTP and a receiver-MTP\
    \ for\n         the exchange of commands, replies, and mail text.  The control\n\
    \         connection operates according to the TELNET Protocol.\n      data mode\n\
    \         The mail is transmitted over the control connection as a stream\n  \
    \       of octets.  (In FTP terminology this is called stream mode.)\n      data\
    \ structure\n         The internal structure of mail is considered to be a continuous\n\
    \         sequence of data octets.  (In FTP terminology this is called\n     \
    \    file-structure.)\n      data representation\n         The internal representation\
    \ of all data (i.e., mail) is in\n         NVT-ASCII.\n      host\n         A\
    \ computer in the internetwork environment on which mailboxes\n         reside.\n\
    \      MTP commands\n         A set of commands which comprise the control information\n\
    \         flowing from the sender-MTP to the receiver-MTP.\n      mail\n     \
    \    An ordered set of computer data of arbitrary length, which\n         conforms\
    \ to the standard set in RFC 733 (Standard for the\n         Format of ARPA Network\
    \ Text Messages).\n      mailbox\n         A character string (address) which\
    \ identifies a user to whom\n         mail is to be sent.  Mailbox normally consists\
    \ of the host and\n         user specifications.  The standard mailbox naming\
    \ convention is\n         defined to be \"user@host\".  Additionally, the \"container\"\
    \ in\n         which mail is stored.\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n    \
    \  NVT\n         The Network Virtual Terminal as defined in the TELNET Protocol.\n\
    \      octet\n         Bytes in MTP are octets (8 bits).  This is not necessarily\
    \ the\n         same byte size in which data is stored in a host.\n      reply\n\
    \         A reply is an acknowledgment (positive or negative) sent from\n    \
    \     receiver to sender via the control connection in response to a\n       \
    \  MTP command.  The general form of a reply is a completion code\n         (including\
    \ error codes) followed by a text string.  The codes\n         are for use by\
    \ programs and the text is usually intended for\n         human users.\n     \
    \ receiver-MTP process\n         A process which transfers mail in cooperation\
    \ with a sender-MTP\n         process.  It \"listens\" on its port/socket L for\
    \ a connection\n         from a sender-MTP and establishes a control connection\
    \ using\n         the TELNET Protocol.  It receives MTP commands from the\n  \
    \       sender-MTP, sends replies, and governs the transfer of mail.\n      sender-MTP\
    \ process\n         A process which transfers mail in cooperation with a\n   \
    \      receiver-MTP process.  A local language may be used in the user\n     \
    \    interface command/reply dialogue.  The sender-MTP initiates the\n       \
    \  control connection from its port/socket U to the receiver-MTP\n         process.\
    \  It initiates MTP commands, receives replies, and\n         governs the transfer\
    \ of mail.\n      user\n         A human being (or a process on behalf of a human\
    \ being) wishing\n         to obtain mail transfer service.  In addition, a recipient\
    \ of\n         computer mail.\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \ THE MTP MODEL\n      With the above definitions in mind, the following model\
    \ (shown in\n      Figure 1) may be diagrammed for an MTP service.\n         \
    \         ------------                ------------\n                  |      \
    \    |                |          |    --------\n                  |          |\
    \      MTP       |          |<-->| User |\n                  | Receiver-|Commands/Replies|\
    \  Sender- |    --------\n      --------    |   MTP    |<-------------->|    MTP\
    \   |    --------\n      | Mail |<-->|          |      Mail      |          |<-->|\
    \ Mail |\n      |System|    |          |                |          |    |System|\n\
    \      --------    ------------                ------------    --------\n    \
    \              Receiver-MTP                 Sender-MTP\n                     \
    \      Model for MTP Use\n                                Figure 1\n      In the\
    \ model described in Figure 1, the sender-MTP initiates the\n      TCP/NCP control\
    \ connection which follows the TELNET Protocol.  At\n      the initiation of the\
    \ user, standard MTP commands are generated by\n      the sender-MTP and transmitted\
    \ to the receiver-MTP via the control\n      connection.  Standard replies are\
    \ sent from the receiver-MTP to\n      the sender-MTP over the control connection\
    \ in response to the\n      commands.  In addition, mail is sent over the control\
    \ connection.\n"
- title: MAIL TRANSFER FUNCTIONS
  contents:
  - "MAIL TRANSFER FUNCTIONS\n   The control connection is used for the transfer of\
    \ commands which\n   describe the functions to be performed, the replies to commands,\
    \ as\n   well as the actual transfer of mail.  Mail is transferred only via\n\
    \   the control connection.\n   The communication channel from the sender-MTP\
    \ to the receiver-MTP is\n   established by a TCP/NCP control connection from\
    \ the sender to a\n   standard receiver port/socket.  The sender-MTP is responsible\
    \ for\n   sending MTP commands, interpreting the replies received, and sending\n\
    \   the mail; the receiver-MTP interprets commands, sends replies, and\n   receives\
    \ the mail.\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n   MAIL\
    \ REPRESENTATION AND STORAGE\n      Mail is transferred from a storage device\
    \ in the sending host to a\n      storage device in the receiving host.  It may\
    \ be necessary to\n      perform certain transformations on the mail because data\
    \ storage\n      representations in the two systems are different.  For example,\n\
    \      NVT-ASCII has different data storage representations in different\n   \
    \   systems.  PDP-10's generally store NVT-ASCII as five 7-bit ASCII\n      characters,\
    \ left-justified in a 36-bit word.  360's store\n      NVT-ASCII as four 8-bit\
    \ EBCDIC codes in a 32-bit word.  Multics\n      stores NVT-ASCII as four 9-bit\
    \ characters in a 36-bit word.\n      For the sake of simplicity, all data must\
    \ be represented in MTP as\n      NVT-ASCII.  This means that characters must\
    \ be converted into the\n      standard NVT-ASCII representation when transmitting\
    \ text,\n      regardless of whether the sending and receiving hosts are\n   \
    \   dissimilar.  The sender converts the data from its internal\n      character\
    \ representation to the standard 8-bit NVT-ASCII\n      representation (see the\
    \ TELNET specification).  The receiver\n      converts the data from the standard\
    \ form to its own internal form.\n      In accordance with this standard, the\
    \ <CRLF> sequence should be\n      used to denote the end of a line of text.\n\
    \      The mail in MTP has no internal structure and is considered to be\n   \
    \   a continuous sequence of data octets.\n   ERROR RECOVERY AND RESTART\n   \
    \   There is no provision for detecting bits lost or scrambled in data\n     \
    \ transfer; this level of error control is handled by the TCP/NCP.\n      In addition,\
    \ there is no restart procedure provided to protect\n      senders from gross\
    \ system failures (including failures of a host,\n      an MTP-process, or the\
    \ underlying network).\n"
- title: MTP COMMANDS
  contents:
  - "MTP COMMANDS\n   COMMAND SEMANTICS\n      The MTP commands define the mail transfer\
    \ or the mail system\n      function requested by the user.  The syntax of mailboxes\
    \ must\n      conform to receiver site conventions (with standard defaults\n \
    \     applicable).  In response to an MTP transfer command, the mail\n      shall\
    \ always be transferred over the control connection.\n      The Mail Transfer\
    \ Protocol follows the specifications of the\n      TELNET Protocol for all communications\
    \ over the control\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \    connection.  Although the language used for TELNET communication\n      can\
    \ be a negotiated option, the \"TELNET language\" and the\n      corresponding\
    \ \"TELNET end of line code\" are required to be\n      NVT-ASCII and <CRLF> respectively.\
    \  No other specifications of the\n      TELNET Protocol will be cited.\n    \
    \  MTP commands are NVT-ASCII strings terminated by <CRLF>.  The\n      command\
    \ codes themselves are alphabetic characters terminated by\n      the character\
    \ <SP> (space) if parameters follow and <CRLF>\n      otherwise.\n      The MTP\
    \ commands are discussed below.  In the description of a few\n      of the commands\
    \ in this section the possible replies are given\n      explicitly.  MTP replies\
    \ are discussed in the next section.\n         MAIL (MAIL)\n            This command\
    \ allows a sender-MTP to send mail over the\n            control connection. \
    \ The argument field contains a sender\n            and optional path sequence.\
    \  If the path sequence is\n            present, it consists of an optional list\
    \ of hosts and a\n            destination mailbox.  When the list of hosts is\
    \ present, it\n            is source routing information and indicates that the\
    \ mail\n            must be forwarded to the first host on the list.  Following\n\
    \            this command line the receiver treats all subsequent\n          \
    \  characters as mail text from the sender.  The mail text is\n            terminated\
    \ by the character sequence \"CRLF.CRLF\".\n            As mail is forwarded along\
    \ the path sequence, each\n            forwarding host must remove itself from\
    \ the list.  When mail\n            reaches its ultimate destination (the path\
    \ sequence has only\n            a (possibly empty) destination mailbox), the\
    \ receiver\n            inserts it into the destination mailbox in accordance\
    \ with\n            its host mail conventions.  If the second argument field is\n\
    \            blank (one or more spaces) or empty (<CRLF>), the mail is\n     \
    \       destined for a printer or other designated place for site\n          \
    \  general delivery mail.  The mail may be marked as sent from\n            the\
    \ sender as specified by the first argument field.\n         MAIL RECIPIENT SCHEME\
    \ QUESTION (MRSQ)\n            This MTP command is used to select a scheme for\
    \ the\n            transmission of mail to several users at the same host.  The\n\
    \            schemes are to list the recipients first, or to send the\n      \
    \      mail first.\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n    \
    \     MAIL RECIPIENT (MRCP)\n            This command is used to identify the\
    \ individual recipients\n            of the mail in the transmission of mail for\
    \ multiple users\n            at one host.\n         HELP (HELP)\n           \
    \ This command causes the receiver to send helpful information\n            regarding\
    \ its implementation status over the control\n            connection to the receiver.\
    \  The command may take an\n            argument (e.g., any command name) and\
    \ return more specific\n            information as a response.  The reply is type\
    \ 211 or 214.\n         QUIT (QUIT)\n            This command specifies that the\
    \ receiver must close the\n            control connection.\n         NOOP (NOOP)\n\
    \            This command does not affect any parameters or previously\n     \
    \       entered commands.  It specifies no action other than that\n          \
    \  the receiver send an OK reply.\n   COMMAND SYNTAX\n      The commands (and\
    \ their functions and semantics) are TELNET\n      NVT-ASCII strings transmitted\
    \ over the control connection.  The\n      functions and semantics of commands\
    \ are described in the section\n      on MTP Commands.  The reply sequences are\
    \ discussed in the section\n      on Sequencing of Commands and Replies.  Scenarios\
    \ illustrating the\n      use of commands are provided in the section on Typical\
    \ MTP\n      Scenarios.  The command syntax is specified in this section.\n  \
    \    The commands begin with a command code followed by an argument\n      field.\
    \  The command codes are four alphabetic characters.  Upper\n      and lower case\
    \ alphabetic characters are to be treated\n      identically.  Thus any of the\
    \ following may represent the mail\n      command:\n         MAIL    Mail    mail\
    \    MaIl    mAIl\n      This also applies to any symbols representing parameter\
    \ values,\n      such as R or r for RECIPIENT first.  The command codes and the\n\
    \      argument fields are separated by one or more spaces.\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \    The argument field consists of a variable length character string\n     \
    \ ending with the character sequence <CRLF>.  It should be noted\n      that the\
    \ receiver is to take no action until the end of line code\n      is received.\n\
    \      The syntax is specified below in NVT-ASCII.  All characters in the\n  \
    \    argument field are ASCII characters.  Square brackets denote an\n      optional\
    \ argument field.  If the option is not taken, the\n      appropriate default\
    \ is implied.\n      The following are the MTP commands:\n         MAIL <SP> FROM:<sender>\
    \ [<SP> TO:<path>] <CRLF>\n         MRSQ [<SP> <scheme>] <CRLF>\n         MRCP\
    \ <SP> TO:<path> <CRLF>\n         HELP [<SP> <string>] <CRLF>\n         QUIT <CRLF>\n\
    \         NOOP <CRLF>\n      The syntax of the above argument fields (using BNF\
    \ notation where\n      applicable) is given below.  The \"...\" notation indicates\
    \ that a\n      field may be repeated one or more times.\n         <sender> ::=\
    \ \"<\" <mailbox> \">\"\n         <path> ::= \"<\" [\"@\" <host> \",\" ...] <mailbox>\
    \ \">\"\n         <scheme> ::= \"R\" | \"T\" | \"?\"\n         <string> ::= <char>\
    \ | <char><string>\n         <mailbox> ::= <user> \"@\" <host>\n         <host>\
    \ ::= <string>\n         <user> ::= <string>\n         <char> ::= any of the 128\
    \ ASCII characters except <CR> and <LF>\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n   CONTROL\
    \ FUNCTIONS\n      Most time-sharing systems provide mechanisms to allow a terminal\n\
    \      user to regain control of a \"runaway\" process.  When used locally,\n\
    \      such systems have access to all user-supplied signals, whether\n      these\
    \ are normal characters or special \"out of band\" signals.\n      When terminals\
    \ are connected to the system through the network,\n      the system does not\
    \ necessarily have access to all user signals;\n      the network's flow control\
    \ mechanisms may cause such signals to be\n      buffered elsewhere, for example\
    \ in the user's host.\n      To counter this problem, the TELNET \"Synch\" mechanism\
    \ is used.  A\n      Synch signal consists of a TCP Urgent or an NCP Interrupt\n\
    \      notification, coupled with the TELNET command DATA MARK (DM).\n      This\
    \ notification, which is not subject to the flow control\n      pertaining to\
    \ the TELNET connection, is used to invoke special\n      handling of the data\
    \ stream by the process which receives it.  In\n      this mode the data stream\
    \ is immediately scanned for a TELNET\n      Interrupt Process (IP) command. \
    \ (The rationale for the use of the\n      TELNET IP command is to allow an existing\
    \ server TELNET module to\n      sit \"under\" the MTP.  If this code were directly\
    \ implemented in\n      the MTP the IP command would be unnecessary.)  The TELNET\
    \ command\n      DM is the synchronizing mark in the data stream which indicates\n\
    \      that any special signal has already occurred and the recipient can\n  \
    \    return to normal processing of the data stream.  For a more\n      complete\
    \ understanding of this mechanism, see the TELNET Protocol\n      Specification\
    \ in the Internet Protocol Handbook.\n      The effect of this mechanism is to\
    \ to discard all characters (up\n      to the DM) between the sender of the Synch\
    \ and its recipeint.\n      Thus, all characters in the control connection are\
    \ ignored until\n      the TELNET command DM is received.  The full sequence is\n\
    \      illustrated below.  Each vertical bar (|) represents the boundary\n   \
    \   between data octets; IAC refers to the TELNET command code\n      Interpret\
    \ As Command.\n                       Old                       New\n        \
    \            -+-+-+-+-+-----+---+--+---+--+-  \n                  ...|M|A|I|L|\
    \ ... |IAC|IP|IAC|DM|...\n                    -+-+-+-+-+-----+---+--+---+--+-\
    \  \n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: MTP REPLIES
  contents:
  - "MTP REPLIES\n   Replies to Mail Transfer Protocol commands are devised to ensure\
    \ the\n   synchronization of requests and actions in the process of mail\n   transfer,\
    \ and to guarantee that the sender-MTP always knows the state\n   of the receiver.\
    \  Every command must generate at least one reply,\n   although there may be more\
    \ than one.  In the latter case, the\n   multiple replies must be easily distinguished.\
    \  Additionally, some\n   commands must occur sequentially, such as MRSQ T->MAIL->MRCP\
    \ or\n   MRSQ R->MRCP->MAIL.  Replies to these sequences show the existence of\n\
    \   an intermediate state if all preceding commands have been successful.\n  \
    \ A failure at any point in the sequence necessitates the repetition of\n   the\
    \ entire sequence from the beginning.\n      The details of the command-reply\
    \ sequence are made explicit in the\n      section on State Diagrams.\n   An MTP\
    \ reply consists of a three digit number (transmitted as three\n   alphanumeric\
    \ characters) followed by some text.  The number is\n   intended for use by automata\
    \ to determine what state to enter next;\n   the text is meant for the human user.\
    \  It is intended that the three\n   digits contain enough encoded information\
    \ that the sender-MTP will\n   not need to examine the text and may either discard\
    \ it or pass it on\n   to the user, as appropriate.  In particular, the text may\
    \ be\n   receiver-dependent, so there are likely to be varying texts for each\n\
    \   reply code.\n   Formally, a reply is defined to be the sequence:  a three-digit\
    \ code,\n   space <SP>, one line of text (where the maximum line length is 65),\n\
    \   and a terminal <CRLF>.  Occasionally the text is longer than a single\n  \
    \ line; in these cases the complete text must be bracketed so the\n   sender-MTP\
    \ knows when it can stop reading the reply.  This requires a\n   special first\
    \ line format to indicate a multiple line reply, and\n   another on the last line\
    \ to so designate it.  Both lines will contain\n   the appropriate reply code\
    \ which indicates the transaction state.\n      Thus the format for multi-line\
    \ replies is that the first line will\n      begin with the exact required reply\
    \ code, followed immediately by\n      a Hyphen, \"-\" (also known as minus),\
    \ followed by text.  The last\n      line will begin with the same code, followed\
    \ immediately by space\n      <SP>, optionally some text, and <CRLF>.\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n    \
    \     For example:\n                                123-First line\n         \
    \                       Second line\n                                  234 A line\
    \ beginning with numbers\n                                123 The last line\n\
    \      The sender-MTP then simply needs to search for the second\n      occurrence\
    \ of the same reply code followed by <SP> (space> at the\n      beginning of a\
    \ line, and ignore all intermediary lines.  If an\n      intermediary line begins\
    \ with a three-digit number, the receiver\n      must pad the front to avoid confusion.\n\
    \         This scheme allows standard system routines to be used for\n       \
    \  reply information, with \"artificial\" first and last lines\n         tacked\
    \ on.  In the rare cases where these routines are able to\n         generate three\
    \ digits and a space at the beginning of any line,\n         the beginning of\
    \ each text line should be offset by some\n         neutral text, like space.\n\
    \      This scheme assumes that multi-line replies may not be nested.  In\n  \
    \    general, reply nesting will not occur except for random system\n      messages\
    \ (also called spontaneous replies) which may interrupt\n      another reply.\
    \  System messages (i.e., those not processed by the\n      receiver-MTP) will\
    \ NOT carry reply codes and may occur anywhere in\n      the command-reply sequence.\
    \  They may be ignored by the sender-MTP\n      as they are only information for\
    \ the human user.\n   The three digits of the reply each have a special significance.\
    \  This\n   is intended to allow a range of very simple to very sophisticated\n\
    \   response by the sender-MTP.  The first digit denotes whether the\n   response\
    \ is good, bad or incomplete.  (Referring to the state\n   diagram) an unsophisticated\
    \ sender-MTP will be able to determine its\n   next action (proceed as planned,\
    \ redo, retrench, etc.) by simply\n   examining this first digit.  A sender-MTP\
    \ that wants to know\n   approximately what kind of error occurred (e.g., mail\
    \ system error,\n   command syntax error) may examine the second digit, reserving\
    \ the\n   third digit for the finest gradation of information.\n      There are\
    \ five values for the first digit of the reply code:\n         1yz   Positive\
    \ Preliminary reply\n            The requested action is being initiated; expect\
    \ another\n            reply before proceeding with a new command.  (The sender-MTP\n\
    \            sending another command before the completion reply would be\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \          in violation of protocol.  However, receiver-MTP processes\n      \
    \      should queue any commands that arrive while a preceding\n            command\
    \ is in progress.)\n         2yz   Positive Completion reply\n            The\
    \ requested action has been successfully completed.  A new\n            request\
    \ may be initiated.\n         3yz   Positive Intermediate reply\n            The\
    \ command has been accepted, but the requested action is\n            being held\
    \ in abeyance, pending receipt of further\n            information.  The sender-MTP\
    \ should send another command\n            specifying this information.  This\
    \ reply is used in command\n            sequence groups.\n         4yz   Transient\
    \ Negative Completion reply\n            The command was not accepted and the\
    \ requested action did\n            not occur.  However, the error condition is\
    \ temporary and\n            the action may be requested again.  The sender should\
    \ return\n            to the beginning of the command sequence (if any).  It is\n\
    \            difficult to assign a meaning to \"transient\" when two\n       \
    \     different sites (receiver- and sender- MTPs) must agree on\n           \
    \ the interpretation.  Each reply in this category might have\n            a different\
    \ time value, but the sender-MTP is encouraged to\n            try again.  A rule\
    \ of thumb to determine if a reply fits\n            into the 4yz or the 5yz category\
    \ (see below) is that replies\n            are 4yz if they can be repeated without\
    \ any change in\n            command form or in properties of the sender or receiver.\n\
    \            (E.g., the command is repeated identically; the receiver\n      \
    \      does not put up a new implementation).\n         5yz   Permanent Negative\
    \ Completion reply\n            The command was not accepted and the requested\
    \ action did\n            not occur.  The sender-MTP is discouraged from repeating\
    \ the\n            exact request (in the same sequence).  Even some \"permanent\"\
    \n            error conditions can be corrected, so the human user may\n     \
    \       want to direct the sender-MTP to reinitiate the command\n            sequence\
    \ by direct action at some point in the future (e.g.,\n            after the spelling\
    \ has been changed, or the user has altered\n            his/her directory status.)\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n    \
    \  The second digit encodes responses in specific categories:\n         x0z  \
    \ Syntax -- These replies refer to syntax errors,\n               syntactically\
    \ correct commands that don't fit any\n               functional category, and\
    \ unimplemented or superfluous\n               commands.\n         x1z   Information\
    \ --  These are replies to requests for\n               information, such as status\
    \ or help.\n         x2z   Connections -- These are replies referring to the control\n\
    \               connection.\n         x3z   Unspecified as yet.\n         x4z\
    \   Unspecified as yet.\n         x5z   Mail system -- These replies indicate\
    \ the status of the\n               receiver mail system vis-a-vis the requested\
    \ transfer or\n               other mail system action.\n      The third digit\
    \ gives a finer gradation of meaning in each\n      category specified by the\
    \ second digit.  The list of replies below\n      will illustrate this.  Each\
    \ reply text is recommended rather than\n      mandatory, and may even change\
    \ according to the command with which\n      it is associated.  On the other hand,\
    \ the reply codes must\n      strictly follow the specifications in this section.\
    \  Receiver\n      implementations should not invent new codes for slightly different\n\
    \      situations from the ones described here, but rather adapt codes\n     \
    \ already defined.\n         A command such as NOOP whose successful execution\
    \ does not\n         offer the sender-MTP any new information will return a 200\n\
    \         reply.  The response is 502 when the command requests an\n         unimplemented\
    \ non-site-specific action.  A refinement of that\n         is the 504 reply for\
    \ a command that IS implemented, but that\n         requests an unimplemented\
    \ parameter.\n   REPLY CODES BY FUNCTION GROUPS\n      200 Command okay\n    \
    \  500 Syntax error, command unrecognized\n         [This may include errors such\
    \ as command line too long]\n      501 Syntax error in parameters or arguments\n\
    \      502 Command not implemented\n      503 Bad sequence of commands\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \    211 System status, or system help reply\n      214 Help message\n       \
    \  [Information on how to use the receiver or the meaning of a\n         particular\
    \ non-standard command; this reply is useful only to\n         the human user]\n\
    \      215 <scheme> is the preferred scheme\n      120 <host> Service ready in\
    \ nnn minutes\n      220 <host> Service ready for new user\n      221 <host> Service\
    \ closing control connection\n      421 <host> Service not available, closing\
    \ control connection\n         [This may be a reply to any command if the service\
    \ knows it\n         must shut down]\n      151 User not local; will forward to\
    \ <user>@<host>\n      152 User unknown; mail will be forwarded by the operator\n\
    \      250 Requested mail action okay, completed\n      450 Requested mail action\
    \ not taken: mailbox unavailable\n         [E.g., mailbox busy]\n      550 Requested\
    \ action not taken: mailbox unavailable\n         [E.g., mailbox not found, no\
    \ access]\n      451 Requested action aborted: local error in processing\n   \
    \   452 Requested action not taken: insufficient system storage space\n      552\
    \ Requested mail action aborted: exceeded storage allocation\n         [For current\
    \ mailbox location]\n      553 Requested action not taken: mailbox name not allowed\n\
    \      354 Start mail input; end with <CR><LF>.<CR><LF>\n   NUMERIC ORDER LIST\
    \ OF REPLY CODES\n      120 <host> Service ready in nnn minutes\n      151 User\
    \ not local; will forward to <user>@<host>\n      152 User unknown; mail will\
    \ be forwarded by the operator\n      200 Command okay\n      211 System status,\
    \ or system help reply\n      214 Help message\n         [Information on how to\
    \ use the receiver or the meaning of a\n         particular non-standard command;\
    \ this reply is useful only to\n         the human user]\n      215 <scheme> is\
    \ the preferred scheme\n      220 <host> Service ready for new user\n      221\
    \ <host> Service closing control connection\n      250 Requested mail action okay,\
    \ completed\n      354 Start mail input; end with <CR><LF>.<CR><LF>\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n    \
    \  421 <host> Service not available, closing control connection\n         [This\
    \ may be a reply to any command if the service knows it\n         must shut down]\n\
    \      450 Requested mail action not taken: mailbox unavailable\n         [E.g.,\
    \ mailbox busy]\n      451 Requested action aborted: local error in processing\n\
    \      452 Requested action not taken: insufficient system storage space\n   \
    \   500 Syntax error, command unrecognized\n         [This may include errors\
    \ such as command line too long]\n      501 Syntax error in parameters or arguments\n\
    \      502 Command not implemented\n      503 Bad sequence of commands\n     \
    \ 550 Requested action not taken: mailbox unavailable\n         [E.g., mailbox\
    \ not found, no access]\n      552 Requested mail action aborted: exceeded storage\
    \ allocation\n         [For current mailbox location]\n      553 Requested action\
    \ not taken: mailbox name not allowed\n"
- title: DISCUSSION OF MAIL TRANSFER
  contents:
  - "DISCUSSION OF MAIL TRANSFER\n   The basic command for transmitting mail is MAIL.\
    \  This command causes\n   the transmitted data to be entered into the recipient's\
    \ mailbox.\n      MAIL <SP> \"FROM:\" <sender> [<SP> \"TO:\" <path>] <CRLF>\n\
    \         <sender> is a mailbox and <path> is a source routing list of\n     \
    \    hosts and destination mailbox.  If accepted, it returns a 354\n         reply\
    \ and considers all succeeding lines to be the message\n         text.  It is\
    \ terminated by a line containing only a period,\n         upon which a 250 completion\
    \ reply is returned.  Various errors\n         are possible.\n   There are two\
    \ possible preliminary replies that a receiver may use to\n   indicate that it\
    \ is accepting mail for a user whose mailbox is not at\n   that receiver.\n  \
    \    151 User not local; will forward to <user>@<host>\n         This reply indicates\
    \ that the receiver knows the user's mailbox\n         is on another host and\
    \ will take responsibility for forwarding\n         the mail to that host.  For\
    \ example, at BBN (or ISI) there are\n         several hosts.  Each has a list\
    \ of many of the users on the\n         hosts.  Each host can accept mail for\
    \ any user on their list\n         and forward it to the correct host.\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \    152 User Unknown; mail will be forwarded by the operator\n         This reply\
    \ indicates that the host does not recognize the user\n         name, but that\
    \ it will accept the mail and have the operator\n         attempt to deliver it.\
    \  This is useful if the user name is\n         misspelled, but may be a disservice\
    \ if the mail is really\n         undeliverable.\n   If forwarding by the operator\
    \ is unacceptable or if the user would\n   prefer to send the mail directly to\
    \ the recipient's actual host, the\n   dialogue may be terminated upon receipt\
    \ of one of these preliminary\n   responses.\n   There are two MTP commands which\
    \ allow the text of a message to be\n   mailed to several recipients simultaneously;\
    \ such message\n   transmission is far more efficient than the practice of sending\
    \ the\n   text again and again for each additional recipient at a site.  In\n\
    \   one, all recipients are specified first, and then the text is sent.\n   In\
    \ the other, the order is reversed and the text is sent first,\n   followed by\
    \ the recipients.  Both schemes are necessary because\n   neither by itself is\
    \ optimal for all systems, as will be explained\n   later.  To select a particular\
    \ scheme, the MRSQ command is used; to\n   specify recipients after a scheme is\
    \ chosen, MRCP commands are given;\n   and to furnish text, the MAIL command is\
    \ used.\n   SCHEME SELECTION:  MRSQ\n      MRSQ is the means by which a sender-MTP\
    \ can test for MRSQ/MRCP\n      implementation, select a particular scheme, reset\
    \ its state, and\n      even do some rudimentary negotiation.  Its format is as\
    \ follows:\n         MRSQ [<SP> <scheme>] <CRLF>\n         <scheme> is a single\
    \ character.  The following are defined:\n            R  Recipients first.  If\
    \ this is not implemented, T must be.\n            T  Text first.  If this is\
    \ not implemented, R must be.\n            ?  Request for preference.  This must\
    \ always be implemented.\n            No argument means a \"selection\" of none\
    \ of the schemes (the\n            default).\n         Possible replies are:\n\
    \            200 OK, we'll use specified scheme\n            215 <scheme> This\
    \ is the scheme I prefer\n            501 I understand MRSQ but can't use that\
    \ scheme\n            5xx Command unrecognized or unimplemented\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n    \
    \  There are three aspects of MRSQ.  The first is that an MRSQ with\n      no\
    \ argument must always return a 200 reply and restore the default\n      state\
    \ of having no scheme selected.  Any other reply implies that\n      MRSQ and\
    \ hence MRCP are not understood or cannot be performed\n      correctly.\n   \
    \   The second is that the use of \"?\" as a <scheme> asks the MTP\n      receiver\
    \ to return a 215 reply in which the receiver specifies a\n      \"preferred\"\
    \ scheme.  The format of this reply is simple:\n         215 <SP> <scheme> [<SP>\
    \ <arbitrary text>] <CRLF>\n         Any other reply (e.g., 4xx or 5xx) implies\
    \ that MRSQ and MRCP\n         are not implemented, because \"?\" must always\
    \ be implemented if\n         MRSQ is.\n      The third important point about\
    \ MRSQ is that it always has the\n      side effect of resetting all schemes to\
    \ their initial state.  This\n      reset must be done no matter what the reply\
    \ will be -- 200, 215,\n      or 501.  The actions necessary for a reset will\
    \ be explained when\n      discussing how each scheme actually works.\n   MESSAGE\
    \ TEXT SPECIFICATION:  MAIL\n      Regardless of which scheme (if any) has been\
    \ selected, a MAIL\n      command with a non-null \"TO\" argument will behave\
    \ exactly as\n      before; the MRSQ/MRCP commands have no effect on it.  However,\
    \ a\n      normal MAIL command does have the same side effect as MRSQ; it\n  \
    \    \"resets\" the current scheme to its initial state.\n      It is only when\
    \ the \"TO\" argument is null (e.g., MAIL FROM:<X@Y>\n      <CRLF>) that the particular\
    \ scheme chosen is important.  Rather\n      than producing an error (as most\
    \ receivers currently do), the\n      receiver will accept message text for this\
    \ \"null\" specification.\n      What it does with it depends on which scheme\
    \ is in effect, and\n      will be described in the section on Scheme Mechanics.\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \ RECIPIENT SPECIFICATION:  MRCP\n      In order to specify recipient names (i.e.,\
    \ mailboxes) and receive\n      some acknowledgment (or refusal) for each name,\
    \ the following\n      command is used:\n         MRCP <SP> TO:<path> <CRLF>\n\
    \         Reply for no scheme:\n            503 No scheme specified yet; use MRSQ\n\
    \         Replies for scheme T are identical to those for MAIL.\n         Replies\
    \ for scheme R (recipients first):\n            200 OK, name stored\n        \
    \    452 Recipient table full, this name not stored\n            553 Recipient\
    \ name rejected\n            4xx Temporary error, try this name again later\n\
    \            5xx Permanent error, report to sender\n      Note that use of this\
    \ command is an error if no scheme has been\n      selected yet; an MRSQ <scheme>\
    \ must have been given if MRCP is to\n      be used.\n   SCHEME MECHANICS:  MRSQ\
    \ R (RECIPIENTS-FIRST)\n      In the recipients-first scheme, MRCP is used to\
    \ specify names\n      which the MTP receiver stores in a list or table.  Normally\
    \ the\n      reply for each MRCP will be either a 200 for acceptance or a\n  \
    \    4xx/5xx rejection code.  All 5xx codes are permanent rejections\n      (e.g.,\
    \ user not known) which should be reported to the human user,\n      whereas 4xx\
    \ codes in general connote some temporary error that may\n      be rectified later.\
    \  None of the 4xx/5xx replies impinge on\n      previous or succeeding MRCP commands,\
    \ except for 452 which\n      indicates that no further MRCPs will succeed unless\
    \ a message is\n      sent to the already stored recipients or a reset is done.\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n    \
    \  Sending message text to stored recipients is done by giving a MAIL\n      command\
    \ with no \"TO\" argument; that is, just MAIL <SP> <sender>\n      <CRLF>.  Transmission\
    \ of the message text is exactly the same as\n      for normal MAIL.  However,\
    \ a positive acknowledgment at the end of\n      transmission means the message\
    \ has been sent to ALL recipients\n      that were remembered with MRCP, and a\
    \ failure code means that it\n      should be considered to have failed for ALL\
    \ of these specified\n      recipients.  This applies regardless of the actual\
    \ error code.\n      Regardless of what the reply signifies, all stored recipient\
    \ names\n      are flushed and forgotten -- in other words, things are reset to\n\
    \      their initial state.  This purging of the recipient name list must\n  \
    \    also be done as the reset side effect of any use of MRSQ.\n      A 452 reply\
    \ to an MRCP can be handled by using MAIL to specify the\n      message for currently\
    \ stored recipients, and then sending more\n      MRCPs and another MAIL, as many\
    \ times as necessary.  For example,\n      if a receiver only had room for 10\
    \ names this would result in a\n      50-recipient message being sent 5 times,\
    \ to 10 different\n      recipients each time.\n      If a sender attempts to\
    \ specify message text (MAIL with no \"TO\"\n      argument) before any successful\
    \ MRCPs have been given, this should\n      be treated exactly as a \"normal\"\
    \ MAIL with a null recipient would\n      be; some receivers return an error,\
    \ such as \"550 Null recipient\".\n      See the example in Appendix A for a mail\
    \ transfer using MRSQ R.\n   SCHEME MECHANICS:  MRSQ T (TEXT-FIRST)\n      In\
    \ the text-first scheme, MAIL with no \"TO\" argument is used to\n      specify\
    \ message text, which the receiver stores away.  Succeeding\n      MRCPs are then\
    \ treated as if they were MAIL commands, except that\n      none of the text transfer\
    \ manipulations are done; the stored\n      message text is sent to the specified\
    \ recipient, and a reply code\n      is returned identical to that which an actual\
    \ MAIL would invoke.\n      (Note that ANY 2xx code indicates success.)\n    \
    \  The stored message text is not forgotten until the next MAIL or\n      MRSQ,\
    \ which will either replace it with new text or flush it\n      entirely.  Any\
    \ use of MRSQ will reset this scheme by flushing\n      stored text, as will any\
    \ use of MAIL with a non-null argument.\n      If an MRCP is seen before any message\
    \ text has been stored, the\n      sender in effect is trying to send a null message;\
    \ some receivers\n      might allow this, others would return an error code.\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \    See the example in Appendix B for a mail transfer using MRSQ T.\n   WHY TWO\
    \ SCHEMES ANYWAY?\n      Because neither by itself is optimal for all systems.\
    \  MRSQ R\n      allows more of a \"bulk\" mailing because everything is saved\
    \ up and\n      then mailed simultaneously.  This is very useful for systems such\n\
    \      as ITS where the MTP-receiver does not itself write mail directly,\n  \
    \    but hands it on to a central mailer demon of great power.  The\n      more\
    \ information (e.g., recipients) associated with a single\n      \"hand-off\"\
    , the more efficiently mail can be delivered.\n      By contrast, MRSQ T is geared\
    \ to receiver-MTPs which want to\n      deliver mail directly, in one-by-one incremental\
    \ fashion.  For\n      each given recipient this scheme returns an individual\n\
    \      success/failure reply code which may depend on variable mail\n      system\
    \ factors such as exceeding disk allocation, mailbox access\n      conflicts,\
    \ and so forth.  If these receiver-MTPs tried to emulate\n      MRSQ Rs bulk mailing,\
    \ they would have to ensure that a success\n      reply to the MAIL indeed meant\
    \ that it had been delivered to ALL\n      recipients specified -- not just some.\n\
    \   NOTES:\n      * Because these commands are not required in the minimum\n \
    \       implementation of MTP, one must be prepared to deal with sites\n     \
    \   which don't recognize either MRSQ or MRCP.  \"MRSQ\" and \"MRSQ ?\"\n    \
    \    are explicitly designed as tests to see whether either scheme is\n      \
    \  implemented.  MRCP is not designed as a test, and a failure\n        return\
    \ of the \"unimplemented\" variety could be confused with \"No\n        scheme\
    \ selected yet\", or even with \"Recipient unknown\".\n      * There is no way\
    \ to indicate in a positive response to \"MRSQ ?\"\n        that the preferred\
    \ \"scheme\" for a receiver is that of the\n        default state; i.e., none\
    \ of the multi-recipient schemes.  The\n        rationale is that in this case,\
    \ it would be pointless to\n        implement MRSQ/MRCP at all, and the response\
    \ would therefore be\n        negative.\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n    \
    \  * One reason that the use of MAIL is restricted to null \"TO\"\n        arguments\
    \ with this multi-recipient extension is the ambiguity\n        that would result\
    \ if a non-null \"TO\" argument were allowed.  For\n        example, if MRSQ R\
    \ was in effect and some MRCPs had been given,\n        and a MAIL FROM:<X@Y>\
    \ TO:<FOO><CRLF> was done, there would be no\n        way to distinguish a failure\
    \ reply for mailbox \"FOO\" from a\n        global failure for all recipients\
    \ specified.  A similar\n        situation exists for MRSQ T; it would not be\
    \ clear whether the\n        text was stored and the mailbox failed, or vice versa,\
    \ or both.\n      * \"Resets\" are done by all MRSQs and \"normal\" MAILs to avoid\n\
    \        confusion and overly complicated implementation.  The MRSQ\n        command\
    \ implies a change or uncertainty of status, and the MAIL\n        command would\
    \ otherwise have to use some independent mechanisms\n        to avoid clobbering\
    \ the data bases (e.g., message text storage\n        area) used by the T/R schemes.\
    \  However, once a scheme is\n        selected, it remains \"in effect\" just\
    \ as an FTP \"TYPE A\" remains\n        selected.  The recommended way for doing\
    \ a reset, without\n        changing the current selection, is with \"MRSQ ?\"\
    .  Remember that\n        \"MRSQ\" alone reverts to the no-scheme state.\n   \
    \   * It is permissible to intersperse other MTP commands among the\n        MRSQ/MRCP/MAIL\
    \ sequences.\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: DECLARATIVE SPECIFICATIONS
  contents:
  - "DECLARATIVE SPECIFICATIONS\n   MINIMUM IMPLEMENTATION\n      In order to make\
    \ MTP workable without needless error messages, the\n      following minimum implementation\
    \ is required for all receivers:\n         COMMANDS -- QUIT\n                \
    \     MAIL\n                     NOOP\n      In terms of FTP, the values of the\
    \ transfer parameters must be:\n         TYPE -- ASCII\n         MODE -- STREAM\n\
    \         STRU -- FILE-STRUCTURE\n      All hosts must use the above values for\
    \ mail transfer.\n   CONNECTIONS\n      The receiver-MTP shall \"listen\" on Port\
    \ L.  The sender-MTP shall\n      initiate the TCP/NCP control connection.  The\
    \ control connection\n      consists of a full-duplex connection under TCP; it\
    \ is two simplex\n      connections under NCP.  Receiver- and sender- MTPs should\
    \ follow\n      the conventions of the TELNET Protocol as specified in the ARPA\n\
    \      Internet Protocol Handbook.  Receivers are under no obligation to\n   \
    \   provide for editing of command lines and may specify that it be\n      done\
    \ in the sender host.  The control connection shall be closed\n      by the receiver\
    \ at the sender's request after all transfers and\n      replies are completed.\n\
    \   SEQUENCING OF COMMANDS AND REPLIES\n      The communication between the sender\
    \ and receiver is intended to\n      be an alternating dialogue.  As such, the\
    \ sender issues an MTP\n      command and the receiver responds with a prompt\
    \ primary reply.\n      The sender should wait for this initial primary success\
    \ or failure\n      response before sending further commands.\n      Certain commands\
    \ require a second reply for which the sender\n      should also wait.  These\
    \ replies may, for example, report on the\n      progress or completion of mail\
    \ transfer.  They are secondary\n      replies to mail transfer commands.\n  \
    \    One important group of informational replies is the connection\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n    \
    \  greetings.  Under normal circumstances, a receiver will send a 220\n      reply,\
    \ \"awaiting input\", when the connection is completed.  The\n      sender should\
    \ wait for this greeting message before sending any\n      commands.  If the receiver\
    \ is unable to accept input right away,\n      it should send a 120 \"expected\
    \ delay\" reply immediately and a 220\n      reply when ready.  The sender will\
    \ then know not to hang up if\n      there is a delay.\n         Note: all the\
    \ greeting type replies have the official name of\n         the server host as\
    \ the first word following the reply code.\n      The table below lists alternative\
    \ success and failure replies for\n      each command.  These must be strictly\
    \ adhered to; a receiver may\n      substitute text in the replies, but the meaning\
    \ and action implied\n      by the code numbers and by the specific command reply\
    \ sequence\n      cannot be altered.\n      COMMAND-REPLY SEQUENCES\n        \
    \ In this section, the command-reply sequence is presented.  Each\n         command\
    \ is listed with its possible replies; command groups are\n         listed together.\
    \  Preliminary replies are listed first (with\n         their succeeding replies\
    \ indented under them), then positive\n         and negative completion, and finally\
    \ intermediary replies with\n         the remaining commands from the sequence\
    \ following.  The 421\n         reply (service not available, closing control\
    \ connection) may\n         be given at any point if the MTP-receiver knows it\
    \ must shut\n         down.  This listing forms the basis for the state diagrams,\n\
    \         which will be presented separately.\n            CONNECTION ESTABLISHMENT\n\
    \               120\n                  220\n               220\n             \
    \  421\n            MAIL ACTION COMMANDS\n               MAIL\n              \
    \    151, 152\n                     354\n                        250\n       \
    \                 451, 552\n                  354\n                     250\n\
    \                     451, 552\n                  450, 550, 452, 553\n       \
    \           500, 501, 502, 421\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \             MRSQ\n                  200, 215\n                  500, 501, 502,\
    \ 421\n               MRCP\n                  151, 152\n                     200\n\
    \                  200\n                  450, 550, 452, 553\n               \
    \   500, 501, 502, 503, 421\n               QUIT\n                  221\n    \
    \        INFORMATIONAL COMMANDS\n               HELP\n                  211, 214\n\
    \                  500, 501, 502, 421\n            MISCELLANEOUS COMMANDS\n  \
    \             NOOP\n                  200\n                  500 421\n"
- title: STATE DIAGRAMS
  contents:
  - "STATE DIAGRAMS\n   Here we present state diagrams for a very simple minded MTP\n\
    \   implementation.  Only the first digit of the reply codes is used.\n   There\
    \ is one state diagram for each group of MTP commands.\n   The command groupings\
    \ were determined by constructing a model for\n   each command and then collecting\
    \ together the commands with\n   structurally identical models.\n   For each command\
    \ there are three possible outcomes:  \"success\" (S),\n   \"failure\" (F), and\
    \ \"error\" (E). In the state diagrams below we use\n   the symbol B for \"begin\"\
    , and the symbol W for \"wait for reply\".\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n   We\
    \ first present the diagram that represents the most MTP commands:\n         \
    \                      1,3    +---+\n                          ----------->| E\
    \ |\n                         |            +---+\n                         |\n\
    \      +---+    cmd    +---+    2      +---+\n      | B |---------->| W |---------->|\
    \ S |\n      +---+           +---+           +---+\n                         |\n\
    \                         |     4,5    +---+\n                          ----------->|\
    \ F |\n                                      +---+\n      This diagram models\
    \ the commands:\n         HELP, MRCP, MRSQ, NOOP, QUIT.\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n  \
    \ A more complex diagram models the MAIL command:\n                   ----  1\n\
    \                  |    |\n      +---+  cmd   -->+---+     2     +---+\n     \
    \ | B |---------->| W |---------->| E |\n      +---+           +---+        -->+---+\n\
    \                       | |        |\n                3      | | 4,5    |\n  \
    \       --------------  ------   |\n        |                      |  |   +---+\n\
    \        |               ------------->| S |\n        |              |   1,3 |\
    \  |   +---+\n        |             2|  --------\n        |              | | \
    \    |\n        V              | |     |\n      +---+   text    +---+ 4,5 ----->+---+\n\
    \      |   |---------->| W |---------->| F |\n      +---+           +---+    \
    \       +---+\n      Note that the \"text\" here is a series of lines sent from\
    \ the\n      sender to the receiver with no response expected until the last\n\
    \      line is sent.  (The last line must consist of only a single\n      period.)\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n   Finally\
    \ we present a generalized diagram that could be used to model\n   the command\
    \ and reply interchange:\n               ------------------------------------\n\
    \              |                                    |\n      Begin   |       \
    \                             |\n        |     V                             \
    \       |\n        |   +---+  cmd   +---+ 2         +---+     |\n         -->|\
    \   |------->|   |---------->|   |     |\n            |   |        | W |     \
    \      | S |-----|\n         -->|   |     -->|   |-----      |   |     |\n   \
    \     |   +---+    |   +---+ 4,5 |     +---+     |\n        |     |      |   \
    \ | |      |               |\n        |     |      |   1| |3     |     +---+ \
    \    |\n        |     |      |    | |      |     |   |     |\n        |     |\
    \       ----  |       ---->| F |-----\n        |     |             |         \
    \   |   |\n        |     |             |            +---+\n         -------------------\n\
    \              |\n              |\n              V\n             End\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: CONNECTION ESTABLISHMENT
  contents:
  - "CONNECTION ESTABLISHMENT\n   The MTP control connection is established via TCP/NCP\
    \ between the\n   receiver process port/socket L and the sender process port/socket\
    \ U.\n   This protocol is assigned the service port/socket 57 (71 octal), that\n\
    \   is L=57.\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n"
- title: APPENDIX A
  contents:
  - "APPENDIX A\n                  Example of MRSQ R (Recipients-first)\n   This is\
    \ an example of how MRSQ R is used.  First the sender must\n   establish that\
    \ the receiver in fact implements MRSQ.\n      S: MRSQ <CRLF>\n      R: 200 OK,\
    \ no scheme selected\n   An MRSQ with a null argument always returns a 200 if\
    \ implemented,\n   selecting the default \"scheme\", i.e., none of them.  If MRSQ\
    \ were not\n   implemented, a code of 4xx or 5xx would be returned.\n      S:\
    \ MRSQ R <CRLF>\n      R: 200 OK, using that scheme\n   All is well; now the recipients\
    \ can be specified.\n      S: MRCP TO:<Foo@Y> <CRLF>\n      R: 200 OK\n      S:\
    \ MRCP TO:<Raboof@Y> <CRLF>\n      R: 553  No such user here\n      S: MRCP TO:<bar@Y>\
    \ <CRLF>\n      R: 200 OK\n      S: MRCP TO:<@Y,@X,fubar@Z> <CRLF>\n      R: 200\
    \ OK\n   Note that the failure of \"Raboof\" has no effect on the storage of\n\
    \   mail for \"Foo\", \"bar\" or the mail to be forwarded to \"fubar@Z\"\n   through\
    \ host \"X\".  Now the message text is furnished, by giving a\n   MAIL command\
    \ with no \"TO\" argument.\n      S: MAIL FROM:<waldo@A><CRLF>\n      R: 354 Type\
    \ mail, ended by <CRLF>.<CRLF>\n      S: Blah blah blah blah....etc. etc. etc.\n\
    \      S: <CRLF>.<CRLF>\n      R: 250 Mail sent\n   The mail text has now been\
    \ sent to \"Foo\" and \"bar\" as well as\n   forwarded to \"fubar@Z\".\n"
- title: September 1980                                                   RFC 772
  contents:
  - 'September 1980                                                   RFC 772

    '
- title: Mail Transfer Protocol
  contents:
  - "Mail Transfer Protocol                                                  \n"
- title: APPENDIX B
  contents:
  - "APPENDIX B\n                     Example of MRSQ T (Text-first)\n   Using the\
    \ same message as the previous example to establish that the\n   receiver implements\
    \ MRSQ.\n      S: MRSQ ? <CRLF>\n      R: 215 T Text first, please\n   MRSQ is\
    \ indeed implemented, and the receiver says that it prefers\n   \"T\", but that\
    \ needn't stop the sender from trying something else.\n      S: MRSQ R <CRLF>\n\
    \      R: 501 Sorry, I really can't do that\n   It's possible that it could have\
    \ understood \"R\" also, but in general\n   it's best to use the \"preferred\"\
    \ scheme, since the receiver knows\n   which is most efficient for its particular\
    \ site.\n      S: MRSQ T <CRLF>\n      R: 200 OK, using that scheme\n   Scheme\
    \ \"T\" is now selected, and the message text is sent by giving a\n   mail command\
    \ with no \"TO\" argument.\n      S: MAIL FROM:<WALDO@A><CRLF>\n      R: 354 Type\
    \ mail, ended by <CRLF>.<CRLF>\n      S: Blah blah blah blah....etc. etc. etc.\n\
    \      S: <CRLF>.<CRLF>\n      R: 250 Mail stored\n   Now recipients can be specified.\n\
    \      S: MRCP TO:<Foo@Y> <CRLF>\n      R: 250 Stored mail sent\n      S: MRCP\
    \ TO:<Raboof@Y> <CRLF>\n      R: 553  No such user here\n      S: MRCP TO:<bar@Y>\
    \ <CRLF>\n      R: 250 Stored mail sent\n      S: MRCP TO:<@Y,@X,fubar@Z> <CRLF>\n\
    \      R: 200 OK\n"
- title: RFC 772                                                   September 1980
  contents:
  - "RFC 772                                                   September 1980\n  \
    \                                                Mail Transfer Protocol\n   The\
    \ text has now been sent to \"Foo\" and \"bar\" at host \"Y\" and will be\n  \
    \ forwarded to \"fubar@Z\" through host \"X\", and still remains stored.  A\n\
    \   new message can be sent with another MAIL/MRCP ... sequence, but a\n   careful\
    \ sender would reset the state using the exchange below.\n      S: MRSQ ? <CRLF>\n\
    \      R: 215 T Text first, please\n   Which resets the state without altering\
    \ the scheme in effect.\n"
