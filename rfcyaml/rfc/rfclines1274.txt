Abstract This document suggests an X.500 Directory Schema, or Naming Architecture, for use in the COSINE and Internet X.500 pilots.
The schema is independent of any specific implementation.
As well as indicating support for the standard object classes and attributes, a large number of generally useful object classes and attributes are also defined.
An appendix to this document includes a machine processable version of the schema.
This document also proposes a mechanism for allowing the schema to evolve in line with emerging requirements.
Proformas to support this process are included.
Corrections and additions to the schema should be sent to na
update@cs.ucl.ac.uk list, as described within.
Introduction Directory Services are a fundamental requirement of both human and computer communications' systems.
Human users need to be able to look up various details about other people: for example, telephone numbers, facsimile numbers and paper mail addresses.
Computing systems also need Directory Services for several purposes: for example, to support address look ups for a variety of services, and to support user friendly naming and distribution lists in electronic mail systems.
Directory Services have recently been standardised and published as the 1988 CCITT X.500 / ISO IS9594 recommendations [1].
The standard provides a good basis for the provision of real services, and a considerable amount of Directory Service piloting activity is currently underway.
In the U.S., the PSI White Pages Pilot [4] has stimulated use of X.500 on the Internet.
In Britain, the U.K. Academic Community Directory Pilot [5] is similarly promoting use of X.500. 2.
Motivation and aims of this document
In a number of areas the X.500 standard only provides a basis for services.
One such area is the Directory's Schema or Naming Architecture.
The standard defines a number of useful object classes, in X.521, and attribute types, in X.520.
These are intended to be generally useful across a range of directory applications.
However, while these standard definitions are a useful starting point, they are insufficient as a basis for a large scale pilot directory.
While it is possible for directory administrators to define their own sets of additional attribute types and object classes, this is undesirable for some common attributes and objects.
The same objects and attribute types would be privately defined many times over.
This would result in the directory's generality being diminished as remote systems
would be unable to determine the semantics of these privately defined data types.
A number of useful additions to the standard definitions were made in this note's forerunner, "The THORN and RARE Naming Architecture" [2].
These have been heavily used in early X.500 piloting activities.
Furthermore, both the THORN and Quipu X.500 implementations have made use of these definitions.
Since the afore mentioned note was issued, a number of further requirements have come to light as the volume and variety of piloting activity has increased.
Yet further requirements seem likely as the scale of X.500 pilot services increases.
Thus, it is argued that it is not sufficient to merely reissue an updated version of the original note.
The schema is a "living document" that needs procedures for: Allowing submission of requests for new attributes and object classes to be added into the schema; Allowing groups of object classes and attribute types defined elsewhere to be integrated into the schema.
Checking for the redundancy of any previously defined attribute types and object classes.
This document attempts to establish procedures to allow for the continual updating of the schema.
Two proformas are set out for this purpose.
In addition, descriptive detail is provided for the additional object classes and attribute types defined in the schema.
These descriptions follow the style used in X.520 and X.521.
Finally, also following the style adopted in the standards documents, appendices will include the entire schema.
Plain text versions of the document's appendices are intended to be machine processable to allow derivation of a system's schema tables.
Appendix C lists all the schema's object classes and attribute types in their respective ASN.1 macro formats.
The scope and intended remit of this coordination activity should be clearly understood.
Esoteric and local, highly experimental requirements  should continue to be met by private definitions.
Requirements which have support from more than one site will usually be integrated into the schema.
Put in other words, the tendency will be for the inclusion, as opposed to the exclusion, of useful additions to the schema.
An attempt will be made to avoid duplication of object classes and attribute types for essentially similar real world objects.
What conformance to this schema means It is not reasonable to require that a DSA which supports this schema has specific code to handle each of the defined syntaxes.
However, the following requirements are made of a system which claims conformance to this specification: 1.
A DSA shall be able to store all of the attributes and object class values specified.
(Note that this implies support for all the object classes and attribute types required by strong authentication as defined in X.509.)
A DUA shall be able to identify each attribute type and object class to the user, with an appropriate representation (e.g., a string).
These statement are qualified for large attributes values (>1kbyte).
A conforming DSA does not have to store such attribute values, and a DUA does not have to display such values, although it must indicate their presence.
The following are desirable, but not required: 1.
For a DSA to match correctly on the basis of all attribute syntaxes defined 2.
For a DSA to enforce the Object Class schema implied by these definitions 3.
For a DUA to correctly display the attribute values (syntaxes) defined 4.
For DUAs and DSAs to maintain compatibility with a previous version of the schema.
4.  Requesting new object classes and attribute types
This section defines procedures for requesting new object classes and attribute types to be added to the schema.
Proformas for object classes and attribute types are specified, and examples given of how to use them.
A mechanism for making requests for large groups of new object classes and attribute types is described in the next section.
As stated earlier, it is anticipated that the schema will evolve considerably over time.
As X.500 is used to support a widening range of applications, there will be requirements for extensions to the schema.
This document proposes formalising this procedure by requiring requests for additions to the schema to be submitted as completed proformas.
This stipulation will greatly simplify subsequent revisions of the schema.
There is one qualification to the above with respect to requests for modifications to an existing object class.
If a modification to an object class merely involves additional, optional attributes, the object class will be enhanced as requested.
Systems are expected to be resilient to such changes to the schema.
However, requests to modify an object class, such that the mandatory attribute types require altering, will not be met.
Instead, a new object class will be created, and the original object class expired following the scheme described in the next main section.
It is anticipated that most requests for modifications to the schema will be met without any need for editorial intervention.
Sometimes, however, some discussion between the submitter of a request and the schema's editor may be required.
For example, the editor may have to judge the relative merits of two very similar requests and, as a result, one of the parties may not get quite what they want.
In cases such as this where the submitter of a request feels aggrieved about an editorial decision, the requestor may appeal to a broader community by explaining their views to the mailing list osi
Heed will be paid to any consensus that emerges from discussions on the schema on this list.
If it proves that this list is used almost solely for discussions on schema issues, a separate discussion list will be created.
To facilitate the production of the afore mentioned proformas, tools are included in Appendix B which will verify that a proforma has been correctly formatted.
Completed proformas should be mailed to na update@cs.ucl.ac.uk 4.1.
Object Class proforma This section gives an example, completed proforma for a new object class, alcoholic drink.
A proforma for object class specified in BNF is included in Appendix A. Object Class: Alcoholic Drink Description:
The Alcoholic Drink object class is used to define entries representing intoxicating beverages.
alcoholicDrink OBJECT CLASS SUBCLASS OF drink MUST CONTAIN {
percentAlcohol} MAY CONTAIN { normalServing, hue}
An object class description consists of three fields, separated by blank lines.
The keywords Object Class, Description and ASN1OCMacro, and their suffixed colons, must be included exactly as above.
The Object Class field should be used for a textual description of the object class.
This will be at most three or four words.
The Description field should contain some explanatory text about the intended use of the object class.
This can run to a number of lines.
The ASN1OCMacro field should follow the definition of the object class macro as specified in X.501.
The above example shows the main features.
There are many more examples which can studied in the section defining the Pilot Object Classes.
This section gives an example completed proforma for a new attribute type, hue (one of the attribute types in the alcoholic drink object class).
The Hue attribute type specifies the hue of an object.
(Note that a description may run to several lines.)
SYNTAX caseIgnoreStringSyntax (SIZE (1 .. ub hue))
An attribute type description consists of five fields, separated by blank lines.
The keywords Attribute Type, Description, OCMust, OCMay and ASN1ATMacro, and their suffixed colons, must be included exactly as above.
The Attribute Type field should be used for a textual description of the attribute type.
This will be at most three or four words.
The Description field should contain some explanatory text about the intended use of the attribute type.
This can run to a number of lines.
The OCMust field should contain a comma separated list of object classes for which this attribute is mandatory.
The OCMay field should contain a comma separated list of object classes for which this attribute is optional.
The ASN1ATMacro field should follow the definition of the attribute macro as specified in X.501.
The above example shows some of the features.
In particular, please note the format for specifying size constraints.
Integrating groups of object classes and attribute types.
This section describes two mechanisms that may be employed to allow the integration of a substantial number of new object classes and attribute types into the schema.
The first mechanism allows for the transition of groups of related, privately defined object classes and attribute types into the schema.
An example of when such a transition might be appropriate is when some experimental use of the Directory is widely adopted within the pilot.
Such a transition will be made if the following conditions hold: The definitions are well structured: i.e., they are not scattered over a multiplicity of object identifier subtrees.
The definitions are in use at a number of sites, and having to adopt new object identifiers would be unnecessarily disruptive.
A second mechanism allows for the allocation of an object subtree for a group of new definitions.
A pilotGroups object identifier has been defined for this purpose.
This method will be suitable for an experiment requiring a considerable number of new object identifiers to be defined.
This approach allows for flexibility during experimentation and should simplify both the management and the coherence of the pilot's object identifiers.
In both cases, the object classes, attribute types and syntaxes should be defined and described in an RFC.
It is suggested that such documents should follow the style used in this document for object class and attribute type definitions.
A reference will be given in this schema to the document containing the definitions.
Removing "old" object classes and attribute types.
It is also important that object classes and attribute types which are no longer used or useful are removed from the schema.
Some object classes and attribute types initially defined as pilot extensions may be included as standard definitions in future versions of the standard.
In such a case, it is important that there should be a fairly rapid transition to the standard definitions.
Another possibility is that newer, more specific definitions obviate the original definitions.
First, it is crucial that "old" definitions are retired as gracefully as possible.
The intention to retire a definition will be sent to the osi ds@cs.ucl.ac.uk mail list.
In the absence of objections, the definition will be marked for expiry with a given expiry date.
The definition will remain in the schema until the expiry date.
Users of the schema should ensure that they make the transition to new, alternative definitions in the interim.
Second, users of the schema must have the right to argue for the retention of definitions which they regard as necessary, there being no other definitions which closely meet their requirements.
It is clearly impossible to lay down hard and fast rules on this point, as no two instances will ever be quite the same.
It is intended that the refereeing on these matters will be sympathetic!
As for requests for additions, an aggrieved user can "go to arbitration" by initiating a discussion on the osi ds@cs.ucl.ac.uk mail list.
Some additional object identifiers are defined for this schema.
These are also reproduced in Appendix C. data OBJECT IDENTIFIER ::
{ccitt 9} pss OBJECT IDENTIFIER ::
A number of generally useful object classes are defined in X.521, and these are supported.
Refer to that document for descriptions of the suggested usage of these object classes.
The ASN.1 for these object classes is reproduced for completeness in Appendix C. 8.2.
A number of object classes defined in X.400 are supported.
Refer to X.402 for descriptions of the usage of these object classes.
The ASN.1 for these object classes is reproduced for completeness in Appendix C. 8.3.
COSINE/Internet object classes This section attempts to fuse together the object classes designed for use in the COSINE and Internet pilot activities.
Descriptions are given of the suggested usage of these object classes.
The ASN.1 for these object classes is also reproduced in Appendix C. 8.3.1.
The PilotObject object class is used as a sub class to allow some common, useful attributes to be assigned to entries of all other object classes.
The PilotPerson object class is used as a sub class of person, to allow the use of a number of additional attributes to be assigned to entries of object class person.
pilotPerson OBJECT CLASS SUBCLASS OF person MAY CONTAIN { userid, textEncodedORAddress, rfc822Mailbox, favouriteDrink, roomNumber, userClass,
The Account object class is used to define entries representing computer accounts.
The userid attribute should be used for naming entries of this object class.
The Document object class is used to define entries which represent documents.
The Room object class is used to define entries representing rooms.
The commonName attribute should be used for naming pentries of this object class.
The Document Series object class is used to define an entry which represents a series of documents (e.g., The Request For Comments papers).
CLASS SUBCLASS OF top MUST CONTAIN
The Domain object class is used to define entries which represent DNS or NRS domains.
The domainComponent attribute should be used for naming entries of this object class.
The usage of this object class is described in more detail in [3].
domain OBJECT CLASS SUBCLASS OF top MUST CONTAIN { domainComponent} MAY CONTAIN { associatedName, organizationName,
The RFC822 Local Part object class is used to define entries which represent the local part of RFC822 mail addresses.
This treats this part of an RFC822 address as a domain.
The usage of this object class is described in more detail in [3].
The DNS Domain (Domain NameServer) object class is used to define entries for DNS domains.
The usage of this object class is described in more detail in [3].
The Domain Related Object object class is used to define entries which represent DNS/NRS domains which are "equivalent" to an X.500 domain: e.g., an organisation or organisational unit.
The usage of this object class is described in more detail in [3].
The Friendly Country object class is used to define country entries in the DIT.
The object class is used to allow friendlier naming of countries than that allowed by the object class country.
The naming attribute of object class country, countryName, has to be a 2 letter string defined in ISO 3166.
The Simple Security Object object class is used to allow an entry to have a userPassword attribute when an entry's principal object classes do not allow userPassword as an attribute type.
The PilotOrganization object class is used as a sub class of organization and organizationalUnit to allow a number of additional attributes to be assigned to entries of object classes organization and organizationalUnit.
pilotOrganization OBJECT CLASS SUBCLASS OF organization, organizationalUnit
The PilotDSA object class is used as a sub class of the dsa object class to allow additional attributes to be assigned to entries for DSAs.
The Quality Labelled Data object class is used to allow the assignment of the data quality attributes to subtrees in the DIT.
See [8] for more details.
qualityLabelledData OBJECT CLASS SUBCLASS OF top MUST CONTAIN
A number of generally useful attribute types are defined in X.520, and these are supported.
Refer to that document for descriptions of the suggested usage of these attribute types.
The ASN.1 for these attribute types is reproduced for completeness in Appendix C. 9.2.
The standard X.400 attribute types are supported.
See X.402 for full details.
The ASN.1 for these attribute types is reproduced in Appendix C. 9.3.
This section describes all the attribute types defined for use in the COSINE and Internet pilots.
Descriptions are given as to the suggested usage of these attribute types.
The ASN.1 for these attribute types is reproduced in Appendix C. 9.3.1.
The Userid attribute type specifies a computer system login name.
userid ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 .. ub user identifier))
The Text Encoded O/R Address attribute type specifies a text encoding of an X.400 O/R address, as specified in RFC 987.
The use of this attribute is deprecated as the attribute is intended for interim use only.
This attribute will be the first candidate for the attribute expiry mechanisms!
ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
ub text encoded or address))
The RFC822 Mailbox attribute type specifies an electronic mailbox attribute following the syntax specified in RFC 822.
Note that this attribute should not be used for greybook or other non Internet order mailboxes.
The Information attribute type specifies any general information pertinent to an object.
It is recommended that specific usage of this attribute type is avoided, and that specific requirements are met by other (possibly additional) attribute types.
info ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 .. ub information))
The Favourite Drink attribute type specifies the favourite drink of an object (or person).
favouriteDrink ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
The Room Number attribute type specifies the room number of an object.
Note that the commonName attribute should be used for naming room objects.
roomNumber ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 .. ub room number))
The Photo attribute type specifies a "photograph" for an object.
This should be encoded in G3 fax as explained in recommendation T.4, with an ASN.1 wrapper to make it compatible with an X.400 BodyPart as defined in X.420.
User Class The User Class attribute type specifies a category of computer user.
The semantics placed on this attribute are for local interpretation.
Examples of current usage od this attribute in academia
are undergraduate student, researcher, lecturer, etc.
Note that the organizationalStatus attribute may now often be preferred as it makes no distinction between computer users and others.
userClass ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
The Host attribute type specifies a host computer.
host ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 .. ub host))
The Manager attribute type specifies the manager of an object represented by an entry.
The Document Identifier attribute type specifies a unique identifier for a document.
documentIdentifier ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
The Document Title attribute type specifies the title of a document.
documentTitle ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
The Document Version attribute type specifies the version number of a document.
documentVersion ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
The Document Author attribute type specifies the distinguished name of the author of a document.
The Document Location attribute type specifies the location of the document original.
documentLocation ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
The Home Telephone Number attribute type specifies a home telephone number associated with a person.
Secretary The Secretary attribute type specifies the secretary of a person.
The attribute value for Secretary is a distinguished name.
The Other Mailbox attribute type specifies values for electronic mailbox types other than X.400 and rfc822.
SYNTAX SEQUENCE { mailboxType PrintableString,
The Last Modified Time attribute type specifies the last time, in UTC time, that an entry was modified.
Ideally, this attribute should be maintained by the DSA.
By attribute specifies the distinguished name of the last user to modify the associated entry.
Ideally, this attribute should be maintained by the DSA.
The Domain Component attribute type specifies a DNS/NRS domain.
For example, "uk" or "ac".
domainComponent ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreIA5StringSyntax SINGLE VALUE :
The A Record attribute type specifies a type
A (Address) DNS resource record [6]
aRecord ATTRIBUTE WITH ATTRIBUTE SYNTAX DNSRecordSyntax
The MX Record attribute type specifies a type MX (Mail Exchange)
mXRecord ATTRIBUTE WITH ATTRIBUTE SYNTAX DNSRecordSyntax :
The NS Record attribute type specifies an NS (Name Server) DNS resource record [6]
The SOA Record attribute type specifies a type SOA (Start of Authority) DNS resorce record [6]
sOARecord ATTRIBUTE WITH ATTRIBUTE SYNTAX DNSRecordSyntax
The CNAME Record attribute type specifies a type CNAME (Canonical Name)
The Associated Domain attribute type specifies a DNS or NRS domain which is associated with an object in the DIT.
For example, the entry in the DIT with a distinguished name "C GB, O University College London" would have an associated domain of "UCL.AC.UK.
Note that all domains should be represented in rfc822 order.
See [3] for more details of usage of this attribute.
The Associated Name attribute type specifies an entry in the organisational DIT associated with a DNS/NRS domain.
See [3] for more details of usage of this attribute.
The Home postal address attribute type specifies a home postal address for an object.
This should be limited to up to 6 lines of 30 characters each.
homePostalAddress ATTRIBUTE WITH ATTRIBUTE SYNTAX postalAddress MATCHES FOR EQUALITY :
The Personal Title attribute type specifies a personal title for a person.
Examples of personal titles are "Ms", "Dr", "Prof" and "Rev".
personalTitle ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
The Mobile Telephone Number attribute type specifies a mobile telephone number associated with a person.
The Pager Telephone Number attribute type specifies a pager telephone number for an object.
Friendly Country Name The Friendly Country Name attribute type specifies names of countries in human readable format.
The standard attribute country name must be one of the two letter codes defined in ISO 3166.
Unique Identifier The Unique Identifier attribute type specifies a "unique identifier" for an object represented in the Directory.
The domain within which the identifier is unique, and the exact semantics of the identifier, are for local definition.
For a person, this might be an institution wide payroll number.
For an organisational unit, it might be a department code.
uniqueIdentifier ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
The Organisational Status attribute type specifies a category by which a person is often referred to in an organisation.
Examples of usage in academia might include undergraduate student, researcher, lecturer, etc.
A Directory administrator should probably consider carefully the distinctions between this and the title and userClass attributes.
organizationalStatus ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 .. ub organizational status))
The Janet Mailbox attribute type specifies an electronic mailbox attribute following the syntax specified in the Grey Book of the Coloured Book series.
This attribute is intended for the convenience of U.K users unfamiliar with rfc822 and little endian mail addresses.
Entries using this attribute MUST also include an rfc822Mailbox attribute.
An attribute to allow users to indicate a preference for inclusion of their names on mailing lists (electronic or physical).
The absence of such an attribute should be interpreted as if the attribute was present with value
This attribute should be interpreted by anyone using the directory to derive mailing lists, and its value respected.
SYNTAX ENUMERATED { no list inclusion(0), any list inclusion(1)
may be added to lists
the list provider   views as related to the   users professional inter    ests, perhaps evaluated   from the business of the   organisation or keywords   in the entry. }
The Building Name attribute type specifies the name of the building where an organisation or organisational unit is based.
buildingName ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 .. ub building name))
The DSA Quality attribute type specifies the purported quality of a DSA.
It allows a DSA manager to indicate the expected level of availability of the DSA.
See [8] for details of the syntax.
dSAQuality ATTRIBUTE WITH ATTRIBUTE SYNTAX
Single Level Quality The Single Level Quality attribute type specifies the purported data quality at the level immediately below in the DIT.
See [8] for details of the syntax.
singleLevelQuality ATTRIBUTE WITH ATTRIBUTE SYNTAX DataQualitySyntax
The Subtree Minimum Quality attribute type specifies the purported minimum data quality for a DIT subtree.
See [8] for more discussion and details of the syntax.
subtreeMinimumQuality ATTRIBUTE WITH ATTRIBUTE SYNTAX DataQualitySyntax
The Subtree Maximum Quality attribute type specifies the purported maximum data quality for a DIT subtree.
See [8] for more discussion and details of the syntax.
subtreeMaximumQuality ATTRIBUTE WITH ATTRIBUTE SYNTAX DataQualitySyntax
The Personal Signature attribute type allows for a representation of a person's signature.
This should be encoded in G3 fax as explained in recommendation T.4, with an ASN.1 wrapper to make it compatible with an X.400 BodyPart as defined in X.420.
The DIT Redirect attribute type is used to indicate that the object described by one entry now has a newer entry in the DIT.
The entry containing the redirection attribute should be expired after a suitable grace period.
This attribute may be used when an individual changes his/her place of work, and thus acquires a new organisational DN.
dITRedirect ATTRIBUTE WITH ATTRIBUTE SYNTAX distinguishedNameSyntax
The Audio attribute type allows the storing of sounds in the Directory.
The attribute uses a u law encoded sound file as used by the "play" utility on a Sun 4.
This is an interim format.
audio ATTRIBUTE WITH ATTRIBUTE SYNTAX Audio (SIZE (1 .. ub audio))
The Publisher of Document attribute is the person and/or organization that published a document.
SYNTAX IA5String MATCHES FOR EQUALITY SUBSTRINGS iA5StringSyntax
] Context, [1] Address space
Upper bounds on length of attribute values ub document identifier INTEGER :
A Object Class and Attribute Type proformas
These are specified in BNF.
First some useful definitions, common to both proformas.
empty> APPENDIX B Format checking tools
This section includes the source for format checking tools for the two proformas.
The tools are written as Bourne shell scripts for UNIX systems.
"notOK" exit 1 } oc
substr($0, n 1) state   "
" if (state   "initial") print "Expecting Object Class:" else print "Expecting ASN1OCMacro:" state   "notOK" exit 1 } while (getline > 0) if (length($0)
> 0) continue else break state
Parsing has got confused on seeing line: "
$0 state   "notOK" exit 1 } END { if (state
Input looks OK" } 2.
"Description:" exit 1 } while (getline > 0) if (length($0)
"OCMust:" exit 1 } state
Parsing has got confused on seeing line: "
$0 state   "notOK" exit 1 } END { if (state   "initial") print "Expecting Attribute Type:" else if (state   "gotAT") print "Expecting Description:" else if (state   "gotDesc") print "
" else if (state   "gotOCMust") print "Expecting OCMay:" else if (state   "gotOCMay") print "Expecting ASN1ATMacro:" if (state !
"OK") print "Got " got else print "
" } APPENDIX C Summary of all Object Classes and Attribute Types
OBJECT CLASS SUBCLASS OF top MUST CONTAIN { organizationName} MAY CONTAIN {
MAY CONTAIN { localeAttributeSet, organizationalUnitName, postalAttributeSet, telecommunicationAttributeSet
} groupOfNames OBJECT CLASS SUBCLASS OF top MUST CONTAIN {
OBJECT CLASS SUBCLASS OF person MUST CONTAIN { localityName} MAY CONTAIN { localeAttributeSet,
mhsDistributionList OBJECT CLASS SUBCLASS OF top MUST CONTAIN { commonName, mhsDLSubmitPermissions
mhsMessageStore OBJECT CLASS SUBCLASS OF applicationEntity
OBJECT CLASS SUBCLASS OF applicationEntity
dNSDomain OBJECT CLASS SUBCLASS OF domain
OBJECT CLASS SUBCLASS OF country MUST CONTAIN { friendlyCountryName} ::
pilotObjectClass 19} pilotOrganization OBJECT CLASS SUBCLASS OF organization, organizationalUnit
MAY CONTAIN { buildingName} ::
OBJECT CLASS SUBCLASS OF top MUST CONTAIN
:  {attributeType 16} postalCode ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1..ub postal code))
} preferredDeliveryMethod ATTRIBUTE WITH ATTRIBUTE SYNTAX
mhsAttributeType 3} mhsDLSubmitPermissions ATTRIBUTE WITH ATTRIBUTE
mhsAttributeType 5} mhsORAddresses ATTRIBUTE WITH ATTRIBUTE
mhsPreferredDeliveryMethods ATTRIBUTE WITH ATTRIBUTE SYNTAX
ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
ub text encoded or address))
4} favouriteDrink ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
SYNTAX SEQUENCE { mailboxType PrintableString,
22} lastModifiedTime ATTRIBUTE WITH ATTRIBUTE
:  {pilotAttributeType 23} lastModifiedBy ATTRIBUTE WITH ATTRIBUTE
39} personalTitle ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
43} uniqueIdentifier ATTRIBUTE WITH ATTRIBUTE SYNTAX caseIgnoreStringSyntax (SIZE (1 ..
46} mailPreferenceOption ATTRIBUTE WITH ATTRIBUTE
SYNTAX ENUMERATED { no list inclusion(0), any list inclusion(1)
may be added to lists
the list provider   views as related to the   users professional inter    ests, perhaps evaluated   from the business of the   organisation or keywords   in the entry. }
49} singleLevelQuality ATTRIBUTE WITH ATTRIBUTE
subtreeMinimumQuality ATTRIBUTE WITH ATTRIBUTE SYNTAX DataQualitySyntax
51} subtreeMaximumQuality ATTRIBUTE WITH ATTRIBUTE SYNTAX DataQualitySyntax
52} personalSignature ATTRIBUTE WITH ATTRIBUTE
SYNTAX IA5String MATCHES FOR EQUALITY SUBSTRINGS iA5StringSyntax
] Context, [1] Address space
, routes [2] SEQUENCE OF SEQUENCE { Route cost, Addressing info } }
Upper bounds on length of attribute values ub document identifier INTEGER :
250000 Security Considerations Security issues are not discussed in this memo.
