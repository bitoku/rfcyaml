- title: __initial_text__
  contents:
  - '       The NewReno Modification to TCP''s Fast Recovery Algorithm

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   RFC 2001 [RFC2001] documents the following four intertwined TCP\n\
    \   congestion control algorithms: Slow Start, Congestion Avoidance, Fast\n  \
    \ Retransmit, and Fast Recovery.  RFC 2581 [RFC2581] explicitly allows\n   certain\
    \ modifications of these algorithms, including modifications\n   that use the\
    \ TCP Selective Acknowledgement (SACK) option [MMFR96],\n   and modifications\
    \ that respond to \"partial acknowledgments\" (ACKs\n   which cover new data,\
    \ but not all the data outstanding when loss was\n   detected) in the absence\
    \ of SACK.  This document describes a specific\n   algorithm for responding to\
    \ partial acknowledgments, referred to as\n   NewReno.  This response to partial\
    \ acknowledgments was first proposed\n   by Janey Hoe in [Hoe95].\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   For the typical implementation of the TCP Fast Recovery algorithm\n\
    \   described in [RFC2581] (first implemented in the 1990 BSD Reno\n   release,\
    \ and referred to as the Reno algorithm in [FF96]), the TCP\n   data sender only\
    \ retransmits a packet after a retransmit timeout has\n   occurred, or after three\
    \ duplicate acknowledgements have arrived\n   triggering the Fast Retransmit algorithm.\
    \  A single retransmit\n   timeout might result in the retransmission of several\
    \ data packets,\n   but each invocation of the Reno Fast Retransmit algorithm\
    \ leads to\n   the retransmission of only a single data packet.\n   Problems can\
    \ arise, therefore, when multiple packets have been\n   dropped from a single\
    \ window of data and the Fast Retransmit and Fast\n   Recovery algorithms are\
    \ invoked.  In this case, if the SACK option is\n   available, the TCP sender\
    \ has the information to make intelligent\n   decisions about which packets to\
    \ retransmit and which packets not to\n   retransmit during Fast Recovery.  This\
    \ document applies only for TCP\n   connections that are unable to use the TCP\
    \ Selective Acknowledgement\n   (SACK) option.\n   In the absence of SACK, there\
    \ is little information available to the\n   TCP sender in making retransmission\
    \ decisions during Fast Recovery.\n   From the three duplicate acknowledgements,\
    \ the sender infers a packet\n   loss, and retransmits the indicated packet. \
    \ After this, the data\n   sender could receive additional duplicate acknowledgements,\
    \ as the\n   data receiver acknowledges additional data packets that were already\n\
    \   in flight when the sender entered Fast Retransmit.\n   In the case of multiple\
    \ packets dropped from a single window of data,\n   the first new information\
    \ available to the sender comes when the\n   sender receives an acknowledgement\
    \ for the retransmitted packet (that\n   is the packet retransmitted when Fast\
    \ Retransmit was first entered).\n   If there had been a single packet drop, then\
    \ the acknowledgement for\n   this packet will acknowledge all of the packets\
    \ transmitted before\n   Fast Retransmit was entered (in the absence of reordering).\
    \  However,\n   when there were multiple packet drops, then the acknowledgement\
    \ for\n   the retransmitted packet will acknowledge some but not all of the\n\
    \   packets transmitted before the Fast Retransmit.  We call this packet\n   a\
    \ partial acknowledgment.\n   Along with several other suggestions, [Hoe95] suggested\
    \ that during\n   Fast Recovery the TCP data sender respond to a partial acknowledgment\n\
    \   by inferring that the indicated packet has been lost, and\n   retransmitting\
    \ that packet.  This document describes a modification\n   to the Fast Recovery\
    \ algorithm in Reno TCP that incorporates a\n   response to partial acknowledgements\
    \ received during Fast Recovery.\n   We call this modified Fast Recovery algorithm\
    \ NewReno, because it is\n   a slight but significant variation of the basic Reno\
    \ algorithm.  This\n   document does not discuss the other suggestions in [Hoe95]\
    \ and\n   [Hoe96], such as a change to the ssthresh parameter during Slow-\n \
    \  Start, or the proposal to send a new packet for every two duplicate\n   acknowledgements\
    \ during Fast Recovery.  The version of NewReno in\n   this document also draws\
    \ on other discussions of NewReno in the\n   literature [LM97].\n   We do not\
    \ claim that the NewReno version of Fast Recovery described\n   here is an optimal\
    \ modification of Fast Recovery for responding to\n   partial acknowledgements,\
    \ for TCPs that are unable to use SACK.\n   Based on our experiences with the\
    \ NewReno modification in the NS\n   simulator [NS], we believe that this modification\
    \ improves the\n   performance of the Fast Retransmit and Fast Recovery algorithms\
    \ in a\n   wide variety of scenarios, and we are simply documenting it for the\n\
    \   benefit of the IETF community.  We encourage the use of this\n   modification\
    \ to Fast Recovery, and we further encourage feedback\n   about operational experiences\
    \ with this or related modifications.\n"
- title: 2. Definitions
  contents:
  - "2. Definitions\n   This document assumes that the reader is familiar with the\
    \ terms\n   MAXIMUM SEGMENT SIZE (MSS), CONGESTION WINDOW (cwnd), and FLIGHT SIZE\n\
    \   (FlightSize) defined in [RFC2581].  FLIGHT SIZE is defined as in\n   [RFC2581]\
    \ as follows:\n      FLIGHT SIZE:\n         The amount of data that has been sent\
    \ but not yet acknowledged.\n"
- title: 3. The Fast Retransmit and Fast Recovery algorithms in NewReno
  contents:
  - "3. The Fast Retransmit and Fast Recovery algorithms in NewReno\n   The standard\
    \ implementation of the Fast Retransmit and Fast Recovery\n   algorithms is given\
    \ in [RFC2581].  The NewReno modification of these\n   algorithms is given below.\
    \  This NewReno modification differs from\n   the implementation in [RFC2581]\
    \ only in the introduction of the\n   variable \"recover\" in step 1, and in the\
    \ response to a partial or new\n   acknowledgement in step 5.  The modification\
    \ defines a \"Fast Recovery\n   procedure\" that begins when three duplicate ACKs\
    \ are received and\n   ends when either a retransmission timeout occurs or an\
    \ ACK arrives\n   that acknowledges all of the data up to and including the data\
    \ that\n   was outstanding when the Fast Recovery procedure began.\n   1.  When\
    \ the third duplicate ACK is received and the sender is not\n       already in\
    \ the Fast Recovery procedure, set ssthresh to no more\n       than the value\
    \ given in equation 1 below.  (This is equation 3\n       from [RFC2581]).\n \
    \        ssthresh = max (FlightSize / 2, 2*MSS)           (1)\n       Record the\
    \ highest sequence number transmitted in the variable\n       \"recover\".\n \
    \  2.  Retransmit the lost segment and set cwnd to ssthresh plus 3*MSS.\n    \
    \   This artificially \"inflates\" the congestion window by the number\n     \
    \  of segments (three) that have left the network and which the\n       receiver\
    \ has buffered.\n   3.  For each additional duplicate ACK received, increment\
    \ cwnd by\n       MSS.  This artificially inflates the congestion window in order\n\
    \       to reflect the additional segment that has left the network.\n   4.  Transmit\
    \ a segment, if allowed by the new value of cwnd and the\n       receiver's advertised\
    \ window.\n   5.  When an ACK arrives that acknowledges new data, this ACK could\
    \ be\n       the acknowledgment elicited by the retransmission from step 2, or\n\
    \       elicited by a later retransmission.\n       If this ACK acknowledges all\
    \ of the data up to and including\n       \"recover\", then the ACK acknowledges\
    \ all the intermediate\n       segments sent between the original transmission\
    \ of the lost\n       segment and the receipt of the third duplicate ACK.  Set\
    \ cwnd to\n       either (1) min (ssthresh, FlightSize + MSS); or (2) ssthresh,\n\
    \       where ssthresh is the value set in step 1; this is termed\n       \"deflating\"\
    \ the window.  (We note that \"FlightSize\" in step 1\n       referred to the\
    \ amount of data outstanding in step 1, when Fast\n       Recovery was entered,\
    \ while \"FlightSize\" in step 5 refers to the\n       amount of data outstanding\
    \ in step 5, when Fast Recovery is\n       exited.) If the second option is selected,\
    \ the implementation\n       should take measures to avoid a possible burst of\
    \ data, in case\n       the amount of data outstanding in the network was much\
    \ less than\n       the new congestion window allows [HTH98].  Exit the Fast Recovery\n\
    \       procedure.\n       If this ACK does *not* acknowledge all of the data\
    \ up to and\n       including \"recover\", then this is a partial ACK.  In this\
    \ case,\n       retransmit the first unacknowledged segment.  Deflate the\n  \
    \     congestion window by the amount of new data acknowledged, then\n       add\
    \ back one MSS and send a new segment if permitted by the new\n       value of\
    \ cwnd.  This \"partial window deflation\" attempts to\n       ensure that, when\
    \ Fast Recovery eventually ends, approximately\n       ssthresh amount of data\
    \ will be outstanding in the network.  Do\n       not exit the Fast Recovery procedure\
    \ (i.e., if any duplicate ACKs\n       subsequently arrive, execute Steps 3 and\
    \ 4 above).\n       For the first partial ACK that arrives during Fast Recovery,\
    \ also\n       reset the retransmit timer.\n   Note that in Step 5, the congestion\
    \ window is deflated when a partial\n   acknowledgement is received.  The congestion\
    \ window was likely to\n   have been inflated considerably when the partial acknowledgement\
    \ was\n   received.  In addition, depending on the original pattern of packet\n\
    \   losses, the partial acknowledgement might acknowledge nearly a window\n  \
    \ of data.  In this case, if the congestion window was not deflated,\n   the data\
    \ sender might be able to send nearly a window of data back-\n   to-back.\n  \
    \ There are several possible variants to the simple response to partial\n   acknowledgements\
    \ described above.  First, there is a question of when\n   to reset the retransmit\
    \ timer after a partial acknowledgement.  This\n   is discussed further in Section\
    \ 4 below.\n   There is a related question of how many packets to retransmit after\n\
    \   each partial acknowledgement.  The algorithm described above\n   retransmits\
    \ a single packet after each partial acknowledgement.  This\n   is the most conservative\
    \ alternative, in that it is the least likely\n   to result in an unnecessarily-retransmitted\
    \ packet.  A variant that\n   would recover faster from a window with many packet\
    \ drops would be to\n   effectively Slow-Start, requiring less than N roundtrip\
    \ times to\n   recover from N losses [Hoe96].  With this slightly-more-aggressive\n\
    \   response to partial acknowledgements, it would be advantageous to\n   reset\
    \ the retransmit timer after each retransmission.  Because we\n   have not experimented\
    \ with this variant in our simulator, we do not\n   discuss this variant further\
    \ in this document.\n   A third question involves avoiding multiple Fast Retransmits\
    \ caused\n   by the retransmission of packets already received by the receiver.\n\
    \   This is discussed in Section 5 below.  Avoiding multiple Fast\n   Retransmits\
    \ is particularly important if more aggressive responses to\n   partial acknowledgements\
    \ are implemented, because in this case the\n   sender is more likely to retransmit\
    \ packets already received by the\n   receiver.\n   As a final note, we would\
    \ observe that in the absence of the SACK\n   option, the data sender is working\
    \ from limited information.  One\n   could spend a great deal of time considering\
    \ exactly which variant of\n   Fast Recovery is optimal for which scenario in\
    \ this case.  When the\n   issue of recovery from multiple dropped packets from\
    \ a single window\n   of data is of particular importance, the best alternative\
    \ would be to\n   use the SACK option.\n"
- title: 4. Resetting the retransmit timer.
  contents:
  - "4. Resetting the retransmit timer.\n   The algorithm in Section 3 resets the\
    \ retransmit timer only after the\n   first partial ACK.  In this case, if a large\
    \ number of packets were\n   dropped from a window of data, the TCP data sender's\
    \ retransmit timer\n   will ultimately expire, and the TCP data sender will invoke\
    \ Slow-\n   Start.  (This is illustrated on page 12 of [F98].)  We call this the\n\
    \   Impatient variant of NewReno.\n   In contrast, the NewReno simulations in\
    \ [FF96] illustrate the\n   algorithm described above, with the modification that\
    \ the retransmit\n   timer is reset after each partial acknowledgement.  We call\
    \ this the\n   Slow-but-Steady variant of NewReno.  In this case, for a window\
    \ with\n   a large number of packet drops, the TCP data sender retransmits at\n\
    \   most one packet per roundtrip time.  (This behavior is illustrated in\n  \
    \ the New-Reno TCP simulation of Figure 5 in [FF96], and on page 11 of\n   [F98].)\n\
    \   For TCP implementations where the Retransmission Timeout Value (RTO)\n   is\
    \ generally not much larger than the round-trip time (RTT), the\n   Impatient\
    \ variant can result in a retransmit timeout even in a\n   scenario with a small\
    \ number of packet drops.  For TCP\n   implementations where the Retransmission\
    \ Timeout Value (RTO) is\n   usually considerably larger than the round-trip time\
    \ (RTT), the Slow-\n   but-Steady variant can remain in Fast Recovery for a long\
    \ time when\n   multiple packets have been dropped from a window of data.  Neither\
    \ of\n   these variants are optimal; one possibility for a more optimal\n   algorithm\
    \ might be one that recovered more quickly from multiple\n   packet drops, and\
    \ combined this with the Slow-but-Steady variant in\n   terms of resetting the\
    \ retransmit timers.  We note, however, that\n   there is a limitation to the\
    \ potential performance in this case in\n   the absence of the SACK option.\n"
- title: 5. Avoiding Multiple Fast Retransmits
  contents:
  - "5. Avoiding Multiple Fast Retransmits\n   In the absence of the SACK option,\
    \ a duplicate acknowledgement\n   carries no information to identify the data\
    \ packet or packets at the\n   TCP data receiver that triggered that duplicate\
    \ acknowledgement.  The\n   TCP data sender is unable to distinguish between a\
    \ duplicate\n   acknowledgement that results from a lost or delayed data packet,\
    \ and\n   a duplicate acknowledgement that results from the sender's\n   retransmission\
    \ of a data packet that had already been received at the\n   TCP data receiver.\
    \  Because of this, multiple segment losses from a\n   single window of data can\
    \ sometimes result in unnecessary multiple\n   Fast Retransmits (and multiple\
    \ reductions of the congestion window)\n   [Flo94].\n   With the Fast Retransmit\
    \ and Fast Recovery algorithms in Reno or\n   NewReno TCP, the performance problems\
    \ caused by multiple Fast\n   Retransmits are relatively minor (compared to the\
    \ potential problems\n   with Tahoe TCP, which does not implement Fast Recovery).\n\
    \   Nevertheless, unnecessary Fast Retransmits can occur with Reno or\n   NewReno\
    \ TCP, particularly if a Retransmit Timeout occurs during Fast\n   Recovery. \
    \ (This is illustrated for Reno on page 6 of [F98], and for\n   NewReno on page\
    \ 8 of [F98].)  With NewReno, the data sender remains\n   in Fast Recovery until\
    \ either a Retransmit Timeout, or until all of\n   the data outstanding when Fast\
    \ Retransmit was entered has been\n   acknowledged.  Thus with NewReno, the problem\
    \ of multiple Fast\n   Retransmits from a single window of data can only occur\
    \ after a\n   Retransmit Timeout.\n   The following modification to the algorithms\
    \ in Section 3 eliminates\n   the problem of multiple Fast Retransmits.  (This\
    \ modification is\n   called \"bugfix\" in [F98], and is illustrated on pages\
    \ 7 and 9.)  This\n   modification uses a new variable \"send_high\", whose initial\
    \ value is\n   the initial send sequence number.  After each retransmit timeout,\
    \ the\n   highest sequence numbers transmitted so far is recorded in the\n   variable\
    \ \"send_high\".\n   If, after a retransmit timeout, the TCP data sender retransmits\
    \ three\n   consecutive packets that have already been received by the data\n\
    \   receiver, then the TCP data sender will receive three duplicate\n   acknowledgements\
    \ that do not acknowledge \"send_high\".  In this case,\n   the duplicate acknowledgements\
    \ are not an indication of a new\n   instance of congestion.  They are simply\
    \ an indication that the\n   sender has unnecessarily retransmitted at least three\
    \ packets.\n   We note that if the TCP data sender receives three duplicate\n\
    \   acknowledgements that do not acknowledge \"send_high\", the sender does\n\
    \   not know whether these duplicate acknowledgements resulted from a new\n  \
    \ packet drop or not.  For a TCP that implements the bugfix described\n   in this\
    \ section for avoiding multiple fast retransmits, the sender\n   does not infer\
    \ a packet drop from duplicate acknowledgements in these\n   circumstances.  As\
    \ always, the retransmit timer is the backup\n   mechanism for inferring packet\
    \ loss in this case.\n   The modification to Fast Retransmit for avoiding multiple\
    \ Fast\n   Retransmits replaces Step 1 in Section 3 with Step 1A below.  In\n\
    \   addition, the modification adds Step 6 below:\n   1A. When the third duplicate\
    \ ACK is received and the sender is not\n       already in the Fast Recovery procedure,\
    \ check to see if those\n       duplicate ACKs cover more than \"send_high\".\
    \  If they do, then set\n       ssthresh to no more than the value given in equation\
    \ 1, record\n       the the highest sequence number transmitted in the variable\n\
    \       \"recover\", and go to Step 2.  If the duplicate ACKs don't cover\n  \
    \     \"send_high\", then do nothing.  That is, do not enter the Fast\n      \
    \ Retransmit and Fast Recovery procedure, do not change ssthresh,\n       do not\
    \ go to Step 2 to retransmit the \"lost\" segment, and do not\n       execute\
    \ Step 3 upon subsequent duplicate ACKs.\n   Steps 2-5 are the same as those steps\
    \ in Section 3 above.\n   6.  After a retransmit timeout, record the highest sequence\
    \ number\n       transmitted in the variable \"send_high\" and exit the Fast\n\
    \       Recovery procedure if applicable.\n   Step 1A above, in checking whether\
    \ the duplicate ACKs cover *more*\n   than \"send_high\", is the Careful variant\
    \ of this algorithm.  Another\n   possible variant would be to require simply\
    \ that the three duplicate\n   acknowledgements *cover* \"send_high\" before initiating\
    \ another Fast\n   Retransmit.  We call this the Less Careful variant to Fast\n\
    \   Retransmit.\n   There are two separate scenarios in which the TCP sender could\n\
    \   receive three duplicate acknowledgements acknowledging \"send_high\"\n   but\
    \ no more than \"send_high\".  One scenario would be that the data\n   sender\
    \ transmitted four packets with sequence numbers higher than\n   \"send_high\"\
    , that the first packet was dropped in the network, and\n   the following three\
    \ packets triggered three duplicate\n   acknowledgements acknowledging \"send_high\"\
    .  The second scenario\n   would be that the sender unnecessarily retransmitted\
    \ three packets\n   below \"send_high\", and that these three packets triggered\
    \ three\n   duplicate acknowledgements acknowledging \"send_high\".  In the absence\n\
    \   of SACK, the TCP sender in unable to distinguish between these two\n   scenarios.\n\
    \   For the Careful variant of Fast Retransmit, the data sender would\n   have\
    \ to wait for a retransmit timeout in the first scenario, but\n   would not have\
    \ an unnecessary Fast Retransmit in the second scenario.\n   For the Less Careful\
    \ variant to Fast Retransmit, the data sender\n   would Fast Retransmit as desired\
    \ in the first scenario, and would\n   unnecessarily Fast Retransmit in the second\
    \ scenario.  The NS\n   simulator has implemented the Less Careful variant of\
    \ NewReno, and\n   the TCP implementation in Sun's Solaris 7 implements the Careful\n\
    \   variant.  This document recommends the Careful variant given in Step\n   1A\
    \ above.\n"
- title: 6. Implementation issues for the data receiver.
  contents:
  - "6. Implementation issues for the data receiver.\n   [RFC2001] specifies that\
    \ \"Out-of-order data segments SHOULD be\n   acknowledged immediately, in order\
    \ to trigger the fast retransmit\n   algorithm.\" Neal Cardwell has noted [C98]\
    \ that some data receivers do\n   not send an immediate acknowledgement when they\
    \ send a partial\n   acknowledgment, but instead wait first for their delayed\n\
    \   acknowledgement timer to expire.  As [C98] notes, this severely\n   limits\
    \ the potential benefit from NewReno by delaying the receipt of\n   the partial\
    \ acknowledgement at the data sender.  Our recommendation\n   is that the data\
    \ receiver send an immediate acknowledgement for an\n   out-of-order segment,\
    \ even when that out-of-order segment fills a\n   hole in the buffer.\n"
- title: 7. Simulations
  contents:
  - "7. Simulations\n   Simulations with NewReno are illustrated with the validation\
    \ test\n   \"tcl/test/test-all-newreno\" in the NS simulator.  The command\n \
    \  \"../../ns test-suite-newreno.tcl reno\" shows a simulation with Reno\n   TCP,\
    \ illustrating the data sender's lack of response to a partial\n   acknowledgement.\
    \  In contrast, the command \"../../ns test-suite-\n   newreno.tcl newreno_B\"\
    \ shows a simulation with the same scenario\n   using the NewReno algorithms described\
    \ in this paper.\n   The tests \"../../ns test-suite-newreno.tcl newreno1_B0\"\
    \ and \"../../ns\n   test-suite-newreno.tcl newreno1_B\" show the Slow-but-Steady\
    \ and the\n   Impatient variants of NewReno, respectively.\n"
- title: 8. Conclusions
  contents:
  - "8. Conclusions\n   Our recommendation is that TCP implementations include the\
    \ NewReno\n   modification to the Fast Recovery algorithm given in Section 3,\
    \ along\n   with the modification for avoiding multiple Fast Retransmits given\
    \ in\n   Section 5.  The NewReno modification given in Section 3 can be\n   important\
    \ even for TCP implementations that support the SACK option,\n   because the SACK\
    \ option can only be used for TCP connections when\n   both TCP end-nodes support\
    \ the SACK option.  The NewReno modification\n   given in Section 3 implements\
    \ the Impatient rather than the Slow-but-\n   Steady variant of NewReno.\n   While\
    \ this document mentions several possible variations to the\n   NewReno algorithm,\
    \ we have not explored all of these possible\n   variations, and therefore are\
    \ unable to make recommendations about\n   some of them.  Our belief is that the\
    \ differences between any two\n   variants of NewReno are small compared to the\
    \ differences between\n   Reno and NewReno.  That is, the important thing is to\
    \ implement\n   NewReno instead of Reno, for a TCP invocation without SACK; it\
    \ is\n   less important exactly which variant of NewReno is implemented.\n"
- title: 9. Acknowledgements
  contents:
  - "9. Acknowledgements\n   Many thanks to Anil Agarwal, Mark Allman, Vern Paxson,\
    \ Kacheong Poon,\n   and Bernie Volz for detailed feedback on this document.\n"
- title: 10. References
  contents:
  - "10. References\n   [C98]         Neal Cardwell, \"delayed ACKs for retransmitted\
    \ packets:\n                 ouch!\". November 1998.  Email to the tcpimpl mailing\n\
    \                 list, Message-ID \"Pine.LNX.4.02A.9811021421340.26785-\n   \
    \              100000@sake.cs.washington.edu\", archived at\n                \
    \ \"http://tcp-impl.lerc.nasa.gov/tcp-impl\".\n   [F98]         Sally Floyd. \
    \ Revisions to RFC 2001.  Presentation to\n                 the TCPIMPL Working\
    \ Group, August 1998.  URLs\n                 \"ftp://ftp.ee.lbl.gov/talks/sf-tcpimpl-aug98.ps\"\
    \ and\n                 \"ftp://ftp.ee.lbl.gov/talks/sf-tcpimpl-aug98.pdf\".\n\
    \   [FF96]        Kevin Fall and Sally Floyd.  Simulation-based\n            \
    \     Comparisons of Tahoe, Reno and SACK TCP.  Computer\n                 Communication\
    \ Review, July 1996.  URL\n                 \"ftp://ftp.ee.lbl.gov/papers/sacks.ps.Z\"\
    .\n   [Flo94]       S. Floyd, TCP and Successive Fast Retransmits.\n         \
    \        Technical report, October 1994.  URL\n                 \"ftp://ftp.ee.lbl.gov/papers/fastretrans.ps\"\
    .\n   [Hen98]       Tom Henderson, Re: NewReno and the 2001 Revision.\n      \
    \           September 1998.  Email to the tcpimpl mailing list,\n            \
    \     Message ID \"Pine.BSI.3.95.980923224136.26134A-\n                 100000@raptor.CS.Berkeley.EDU\"\
    , archived at\n                 \"http://tcp-impl.lerc.nasa.gov/tcp-impl\".\n\
    \   [Hoe95]       J. Hoe, Startup Dynamics of TCP's Congestion Control\n     \
    \            and Avoidance Schemes. Master's Thesis, MIT, 1995.  URL\n       \
    \          \"http://ana-www.lcs.mit.edu/anaweb/ps-papers/hoe-\n              \
    \   thesis.ps\".\n   [Hoe96]       J. Hoe, \"Improving the Start-up Behavior of\
    \ a\n                 Congestion Control Scheme for TCP\",  In ACM SIGCOMM,\n\
    \                 August 1996.  URL\n                 \"http://www.acm.org/sigcomm/sigcomm96/program.html\"\
    .\n   [HTH98]       Hughes, A., Touch, J.  and J. Heidemann, \"Issues in TCP\n\
    \                 Slow-Start Restart After Idle\", Work in Progress, March\n \
    \                1998.\n   [LM97]        Dong Lin and Robert Morris, \"Dynamics\
    \ of Random Early\n                 Detection\", SIGCOMM 97, September 1997. \
    \ URL\n                 \"http://www.acm.org/sigcomm/sigcomm97/program.html\"\
    .\n   [MMFR96]      Mathis, M., Mahdavi, J., Floyd, S. and A. Romanow, \"TCP\n\
    \                 Selective Acknowledgement Options\", RFC 2018, October\n   \
    \              1996.\n   [NS]          The UCB/LBNL/VINT Network Simulator (NS).\
    \ URL\n                 \"http://www-mash.cs.berkeley.edu/ns/\".\n   [RFC2001]\
    \     Stevens, W., \"TCP Slow Start, Congestion Avoidance,\n                 Fast\
    \ Retransmit, and Fast Recovery Algorithms\", RFC\n                 2001, January\
    \ 1997.\n   [RFC2581]     Stevens, W., Allman, M. and V. Paxson, \"TCP Congestion\n\
    \                 Control\", RFC 2581, April 1999.\n"
- title: 11. Security Considerations
  contents:
  - "11. Security Considerations\n   RFC 2581 discusses general security considerations\
    \ concerning TCP\n   congestion control.  This document describes a specific algorithm\n\
    \   that conforms with the congestion control requirements of RFC 2581,\n   and\
    \ so those considerations apply to this algorithm, too.  There are\n   no known\
    \ additional security concerns for this specific algorithm.\n"
- title: 12. AUTHORS' ADDRESSES
  contents:
  - "12. AUTHORS' ADDRESSES\n   Sally Floyd\n   AT&T Center for Internet Research\
    \ at ICSI (ACIRI)\n   Phone: +1 (510) 642-4274 x189\n   EMail: floyd@acm.org\n\
    \   URL:  http://www.aciri.org/floyd/\n   Tom Henderson\n   University of California\
    \ at Berkeley\n   Phone: +1 (510) 642-8919\n   EMail: tomh@cs.berkeley.edu\n \
    \  URL: http://www.cs.berkeley.edu/~tomh/\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
