- contents:
  - '      Specification of the Controlled-Load Network Element Service

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This memo specifies the network element behavior required to deliver\n
    \  Controlled-Load service in the Internet.  Controlled-load service\n   provides
    the client data flow with a quality of service closely\n   approximating the QoS
    that same flow would receive from an unloaded\n   network element, but uses capacity
    (admission) control to assure that\n   this service is received even when the
    network element is overloaded.\n"
  title: Abstract
- contents:
  - "1. Introduction\n   This document defines the requirements for network elements
    that\n   support the Controlled-Load service.  This memo is one of a series of\n
    \  documents that specify the network element behavior required to\n   support
    various qualities of service in IP internetworks.  Services\n   described in these
    documents are useful both in the global Internet\n   and private IP networks.\n
    \  This document is based on the service specification template given in\n   [1].
    Please refer to that document for definitions and additional\n   information about
    the specification of qualities of service within\n   the IP protocol family.\n"
  title: 1. Introduction
- contents:
  - "2. End-to-End Behavior\n   The end-to-end behavior provided to an application
    by a series of\n   network elements providing controlled-load service tightly\n
    \  approximates the behavior visible to applications receiving best-\n   effort
    service *under unloaded conditions* from the same series of\n   network elements.
    \ Assuming the network is functioning correctly,\n   these applications may assume
    that:\n     - A very high percentage of transmitted packets will be\n     successfully
    delivered by the network to the receiving end-nodes.\n     (The percentage of
    packets not successfully delivered must closely\n     approximate the basic packet
    error rate of the transmission\n     medium).\n     - The transit delay experienced
    by a very high percentage of the\n     delivered packets will not greatly exceed
    the minimum transmit\n     delay experienced by any successfully delivered packet.
    (This\n     minimum transit delay includes speed-of-light delay plus the fixed\n
    \    processing time in routers and other communications devices along\n     the
    path.)\n   To ensure that these conditions are met, clients requesting\n   controlled-load
    service provide the intermediate network elements\n   with a estimation of the
    data traffic they will generate; the TSpec.\n   In return, the service ensures
    that network element resources\n   adequate to process traffic falling within
    this descriptive envelope\n   will be available to the client. Should the client's
    traffic\n   generation properties fall outside of the region described by the\n
    \  TSpec parameters, the QoS provided to the client may exhibit\n   characteristics
    indicative of overload, including large numbers of\n   delayed or dropped packets.
    The service definition does not require\n   that the precise characteristics of
    this overload behavior match\n   those which would be received by a best-effort
    data flow traversing\n   the same path under overloaded conditions.\n      NOTE:
    In this memo, the term \"unloaded\" is used in the sense of\n      \"not heavily
    loaded or congested\" rather than in the sense of \"no\n      other network traffic
    whatsoever\".\n"
  title: 2. End-to-End Behavior
- contents:
  - "3. Motivation\n   The controlled load service is intended to support a broad
    class of\n   applications which have been developed for use in today's Internet,\n
    \  but are highly sensitive to overloaded conditions.  Important members\n   of
    this class are the \"adaptive real-time applications\" currently\n   offered by
    a number of vendors and researchers. These applications\n   have been shown to
    work well on unloaded nets, but to degrade quickly\n   under overloaded conditions.
    A service which mimics unloaded nets\n   serves these applications well.\n   The
    controlled-load service is intentionally minimal, in that there\n   are no optional
    functions or capabilities in the specification. The\n   service offers only a
    single function, and system and application\n   designers can assume that all
    implementations will be identical in\n   this respect.\n   Internally, the controlled-load
    service is suited to a wide range of\n   implementation techniques, including
    evolving scheduling and\n   admission control algorithms that allow implementations
    to be highly\n   efficient in the use of network resources. It is equally amenable
    to\n   extremely simple implementation in circumstances where maximum\n   utilization
    of network resources is not the only concern.\n"
  title: 3. Motivation
- contents:
  - "4. Network Element Data Handling Requirements\n   Each network element accepting
    a request for controlled-load service\n   must ensure that adequate bandwidth
    and packet processing resources\n   are available to handle the requested level
    of traffic, as given by\n   the requestor's TSpec. This must be accomplished through
    active\n   admission control. All resources important to the operation of the\n
    \  network element must be considered when admitting a request. Common\n   examples
    of such resources include link bandwidth, router or switch\n   port buffer space,
    and computational capacity of the packet\n   forwarding engine.\n   The controlled-load
    service does not accept or make use of specific\n   target values for control
    parameters such as delay or loss. Instead,\n   acceptance of a request for controlled-load
    service is defined to\n   imply a commitment by the network element to provide
    the requestor\n   with service closely equivalent to that provided to uncontrolled\n
    \  (best-effort) traffic under lightly loaded conditions.\n   The definition of
    \"closely equivalent to unloaded best-effort\n   service\" is necessarily imprecise.
    It is easiest to define this\n   quality of service by describing the events which
    are expected to\n   *not* occur with any frequency. A flow receiving controlled-load\n
    \  service at a network element may expect to experience:\n     - Little or no
    average packet queueing delay over all timescales\n     significantly larger than
    the \"burst time\". The burst time is\n     defined as the time required for the
    flow's maximum size data burst\n     to be transmitted at the flow's requested
    transmission rate, where\n     the burst size and rate are given by the flow's
    TSpec, as described\n     below.\n     - Little or no congestion loss over all
    timescales significantly\n     larger than the \"burst time\" defined above.  In
    this context,\n     congestion loss includes packet losses due to shortage of
    any\n     required processing resource, such as buffer space or link\n     bandwidth.
    \ Although occasional congestion losses may occur, any\n     substantial sustained
    loss represents a failure of the admission\n     control algorithm.\n   The basic
    effect of this language is to establish an expectation on\n   the *duration* of
    a disruption in delivery service. Events of shorter\n   duration are viewed as
    statistical effects which may occur in normal\n   operation. Events of longer
    duration are indicative of failure to\n   allocate adequate capacity to the controlled-load
    flow.\n   A network element may employ statistical approaches to decide whether\n
    \  adequate capacity is available to accept a service request. For\n   example,
    a network element processing a number of flows with long-\n   term characteristics
    predicted through measurement of past behavior\n   may be able to overallocate
    its resources to some extent without\n   reducing the level of service delivered
    to the flows.\n   A network element may employ any appropriate scheduling means
    to\n   ensure that admitted flows receive appropriate service.\n      NOTE: The
    flexibility implied by the above paragraph exists within\n      definite limits.
    Readers should observe that the specification's\n      requirement that the delay
    and loss behavior described above\n      imposes concrete requirements on implementations.\n
    \     Perhaps the most important requirement is that the implementation\n      has
    to make bandwidth greater than the Tspec token rate available\n      to the flow
    in certain situations. The requirement for the\n      availability of extra bandwidth
    may be derived from the fluid\n      model of traffic scheduling (e.g. [7]). If
    a flow receives exactly\n      its promised token rate at all times, queueing
    caused by an over-\n      rate burst arriving at the network element may never
    clear,\n      causing the traffic queueing delay to permanantly increase. This\n
    \     will happen if the flow continues to generate traffic at exactly\n      the
    token rate after emitting the burst.\n      To control the long-term effects of
    traffic bursts, a Controlled\n      Load implementation has several options. At
    minimum, a mechanism\n      must be present to \"borrow\" bandwidth needed to
    clear bursts from\n      the network. There are a number of ways to implement
    such a\n      mechanism, ranging from explicit borrowing schemes within the\n
    \     traffic scheduler to implicit schemes based on statistical\n      multiplexing
    and measurement-based admission control. The\n      specification does not prefer
    any method over any other, but does\n      require that some such mechanism must
    exist.\n      Similarly, the requirement for low congestion loss for in-Tspec\n
    \     traffic implies that buffer management must have some flexibility.\n      Because
    the controlled-load service does not reshape traffic to\n      its token-bucket
    parameters at every node, traffic flowing through\n      the network will be distorted
    as it traverses queueing points.\n      This distortion is particularly likely
    to occur during traffic\n      bursts, precisely when buffering is most heavily
    used. In these\n      circumstances, rigidly restricting the buffering capacity
    to a\n      size equal to the flow's TSpec burst size may lead to congestion\n
    \     loss. An implementaton should be prepared to make additional\n      buffering
    available to bursting flows. Again, this may be\n      accomplished in a number
    of ways. One obvious choice is\n      statistical multiplexing of a shared buffer
    pool.\n   Links are not permitted to fragment packets which receive the\n   controlled-load
    service. Packets larger than the MTU of the link must\n   be treated as nonconformant
    to the TSpec. This implies that they will\n   be forwarded according to the rules
    described in the Policing section\n   below.\n   Implementations of controlled-load
    service are not required to\n   provide any control of short-term packet delay
    jitter beyond that\n   described above. However, the use of packet scheduling
    algorithms\n   that provide additional jitter control is not prohibited by this\n
    \  specification.\n   Packet losses due to non-congestion-related causes, such
    as link\n   errors, are not bounded by this service.\n"
  title: 4. Network Element Data Handling Requirements
- contents:
  - "5. Invocation Information\n   The controlled-load service is invoked by specifying
    the data flow's\n   desired traffic parameters (TSpec) to the network element.
    Requests\n   placed for a new flow will be accepted if the network element has
    the\n   capacity to forward the flow's packets as described above. Requests\n
    \  to change the TSpec for an existing flow should be treated as a new\n   invocation,
    in the sense that admission control must be reapplied to\n   the flow. Requests
    that reduce the TSpec for an existing flow (in the\n   sense that the new TSpec
    is strictly smaller than the old TSpec\n   according to the ordering rules given
    below) should never be denied\n   service.\n   The Controlled-Load service uses
    the TOKEN_BUCKET_TSPEC defined in\n   Reference [5] to describe a data flow's
    traffic parameters. This\n   TSpec takes the form of a token bucket specification
    plus a peak rate\n   (p), a minimum policed unit (m) and a maximum packet size
    (M).\n   The token bucket specification includes a bucket rate r and a bucket\n
    \  depth, b.  Both r and b must be positive.  The rate, r, is measured\n   in
    bytes of IP datagrams per second. Values of this parameter may\n   range from
    1 byte per second to 40 terabytes per second. Network\n   elements MUST return
    an error for requests containing values outside\n   this range. Network elements
    MUST return an error for any request\n   containing a value within this range
    which cannot be supported by the\n   element. In practice, only the first few
    digits of the r parameter\n   are significant, so the use of floating point representations,\n
    \  accurate to at least 0.1% is encouraged.\n   The bucket depth, b, is measured
    in bytes. Values of this parameter\n   may range from 1 byte to 250 gigabytes.
    Network elements MUST return\n   an error for requests containing values outside
    this range. Network\n   elements MUST return an error for any request containing
    a value\n   within this range which cannot be supported by the element. In\n   practice,
    only the first few digits of the b parameter are\n   significant, so the use of
    floating point representations, accurate\n   to at least 0.1% is encouraged.\n
    \  The range of values allowed for these parameters is intentionally\n   large
    to allow for future network technologies. Any given network\n   element is not
    expected to support the full range of values.\n   The peak rate, p, is measured
    in bytes of IP datagrams per second and\n   has the same range and suggested representation
    as the bucket rate.\n   The peak rate parameter exists in this version of the
    specification\n   primarily for TSpec compatability with other QoS control services
    and\n   the shared TOKEN_BUCKET_TSPEC parameter. While some admission control\n
    \  and buffer allocation algorithms may find the peak rate value useful,\n   the
    field may always be ignored by a Controlled-Load service\n   conforming to this
    version of the specification. That is, the service\n   module at a network element
    may always assume that the peak data rate\n   arriving at that element is the
    line rate of the incoming interface,\n   and the service's evaluation criteria
    do not require a network\n   element to consider the peak rate value. More explicit
    use of the\n   peak-rate parameter by a Controlled-Load service module may be
    added\n   to the specification in the future.\n   The minimum policed unit, m,
    is an integer measured in bytes.  All IP\n   datagrams less than size m will be
    counted against the token bucket\n   as being of size m. The maximum packet size,
    M, is the biggest packet\n   that will conform to the traffic specification; it
    is also measured\n   in bytes.  Network elements MUST reject a service request
    if the\n   requested maximum packet size is larger than the MTU of the link.\n
    \  Both m and M must be positive, and m must be less then or equal to M.\n   The
    preferred concrete representation for the TSpec is three floating\n   point numbers
    in single-precision IEEE floating point format followed\n   by two 32-bit integers
    in network byte order.  The first value is the\n   rate (r), the second value
    is the bucket size (b), the third is the\n   peak rate (p), the fourth is the
    minimum policed unit (m), and the\n   fifth is the maximum packet size (M). For
    the parameters (r) and (b),\n   only bit-patterns which represent valid non-negative
    floating point\n   numbers are allowed. Negative numbers (including \"negative
    zero),\n   infinities, and NAN's are not allowed.  For the parameter (p) only\n
    \  bit-patterns which represent valid non-negative floating point\n   numbers
    or positive infinity are allowed. Positive infinity is\n   represented with an
    exponent of all ones (255) and a sign bit and\n   mantissa of all zeroes. Negative
    numbers (including \"negative zero\"),\n   negative infinity, and NAN's are not
    allowed.\n      NOTE: An implementation which utilizes general-purpose hardware
    or\n      software IEEE floating-point support may wish to verify that\n      arriving
    parameters meet this requirement before using the\n      parameters in floating-point
    computations, in order to avoid\n      unexpected exceptions or traps.\n   The
    controlled-load service is assigned service_name 5.\n   The TOKEN_BUCKET_TSPEC
    parameter used by the Controlled-Load service\n   is general parameter number
    127, as indicated in [5].\n"
  title: 5. Invocation Information
- contents:
  - "6. Exported Information\n   The controlled-load service has no required characterization\n
    \  parameters. Individual implementations may export appropriate\n   implementation-specific
    measurement and monitoring information.\n"
  title: 6. Exported Information
- contents:
  - "7. Policing\n   The controlled-load service is provided to a flow on the basis
    that\n   the flow's traffic conforms to a TSpec given at flow setup time. This\n
    \  section defines the meaning of conformance to the controlled-load\n   TSpec,
    describes the circumstances under which a controlled-load\n   flow's traffic might
    *not* conform to the TSpec, and specifies the\n   network element's action in
    those circumstances.\n   Controlled-load service modules provide QoS control for
    traffic\n   conforming to the TSpec given at setup time.  The TSpec's token\n
    \  bucket parameters require that traffic must obey the rule that over\n   all
    time periods, the amount of data sent does not exceed rT+b, where\n   r and b
    are the token bucket parameters and T is the length of the\n   time period.  For
    the purposes of this accounting, links must count\n   packets that are smaller
    than the minimal policing unit m to be of\n   size m.  Packets that arrive at
    an element and cause a violation of\n   the the rT+b bound are considered nonconformant.\n
    \  Additionally, packets bigger than the outgoing link MTU are\n   considered
    nonconformant.  It is expected that this situation will\n   not arise with any
    frequency, because flow setup mechanisms are\n   expected to notify the sending
    application of the appropriate path\n   MTU.\n   In the presence of nonconformant
    packets arriving for one or more\n   controlled-load flows, each network element
    must ensure locally that\n   the following requirements are met:\n     1) The
    network element MUST continue to provide the contracted\n     quality of service
    to those controlled-load flows not experiencing\n     excess traffic.\n     2)
    The network element SHOULD prevent excess controlled-load\n     traffic from unfairly
    impacting the handling of arriving best-\n     effort traffic.  This requirement
    is discussed further in Section 9\n     of this document (Guidelines for Implementors).\n
    \    3) Consistent with points 1 and 2, the network element MUST attempt\n     to
    forward the excess traffic on a best-effort basis if sufficient\n     resources
    are available.\n   Network elements must not assume that that arrival of nonconformant\n
    \  traffic for a specific controlled-load flow will be unusual, or\n   indicative
    of error.  In certain circumstances (particularly, routers\n   acting as the \"split
    points\" of a multicast distribution tree\n   supporting a shared reservation)
    large numbers of packets will fail\n   the conformance test *as a matter of normal
    operation*.\n   Network elements must not assume that data sources or upstream\n
    \  elements have taken action to \"police\" controlled-load flows by\n   limiting
    their traffic to conform to the flow's TSpec.  Each network\n   element providing
    controlled-load service MUST independently ensure\n   that the requirements given
    above are met in the presence of\n   nonconformant arriving traffic for one or
    more controlled-load flows.\n   Network elements may use any appropriate implementation
    mechanism to\n   meet the requirements given above.  Examples of such mechanisms\n
    \  include token-bucket policing filters and per-flow scheduling\n   algorithms.
    \ However, it is insufficient to simply place all\n   controlled-load flows into
    the same shared resource pool, without\n   first ensuring that non-conformant
    flows are prevented from starving\n   conformant flows of the necessary processing
    resources.\n   Further discussion of this issue may be found in Section 11 of
    this\n   note.\n   Beyond requirements 2 and 3 above, the controlled-load service
    does\n   not define the QoS behavior delivered to flows with non-conformant\n
    \  arriving traffic.  Specifically, it is permissible either to degrade\n   the
    service delivered to all of the flow's packets equally, or to\n   sort the flow's
    packets into a conformant set and a nonconformant set\n   and deliver different
    levels of service to the two sets. This point\n   is discussed further in Section
    9 of this note.\n   When resources are available, network elements at points within
    the\n   interior of the network SHOULD be prepared to accommodate packet\n   bursts
    somewhat larger than the actual TSpec. This requirement\n   derives from the traffic
    distortion effect described in Section 4. As\n   described there, it may be met
    either through explicit means or\n   statistical multiplexing of shared buffering
    resources.\n   When handling such traffic, it is permissible to allow some delaying\n
    \  of a packet if that delay would allow it to pass the policing\n   function.
    \ (In other words, to reshape the traffic).  However, the\n   overall requirement
    for limiting the duration of any such traffic\n   distortion must be considered.
    The challenge is to define a viable\n   reshaping function.\n   Intuitively, a
    plausible approach is to allow a delay of (roughly) up\n   to the maximum queueing
    delay experienced by completely conforming\n   packets before declaring that a
    packet has failed to pass the\n   policing function. The merit of this approach,
    and the precise\n   wording of the specification that describes it, require further\n
    \  study.\n"
  title: 7. Policing
- contents:
  - "8. Ordering and Merging\n   The controlled-load service TSpec is ordered according
    to the\n   following rule: TSpec A is a substitute for (\"as good or better than\"\n
    \  or \"greater than or equal to\") TSpec B if and only if:\n     (1) the token
    bucket rate r for TSpec A is greater than or equal to\n     that of TSpec B,\n
    \    (2) the token bucket depth b for TSpec A is greater than or equal\n     to
    that of TSpec B,\n     (3) the peak rate p for TSpec A is greater than or equal
    to that of\n     TSpec B,\n     (4) the minimum policed unit m for TSpec A is
    less than or equal to\n     that of TSpec B,\n     (5) the maximum packet size
    M of TSpec A is greater than or equal\n     to that of TSpec B.\n   Note that
    not all TSpecs can be ordered with respect to each other.\n   If two TSpecs differ
    but not all five of the points above are true,\n   then the TSpecs are unordered.\n
    \  A merged TSpec is the TSpec used by the RSVP protocol when merging a\n   set
    of TSpecs to create a \"merged\" reservation. TSpec merging is\n   described further
    in [4] and [3]. The TSpec merge operation addresses\n   two requirements:\n     -
    The \"merged\" TSpec parameters are used as the traffic flow's\n     TSpec at
    the local node.\n     - The merged parameters are passed upstream to traffic source(s)
    to\n     describe characteristics of the actually installed reservation\n     along
    the data path.\n   For the controlled-load service, a merged TSpec may be calculated\n
    \  over a set of TSpecs by taking:\n     (1) the largest token bucket rate r;\n
    \    (2) the largest token bucket size b;\n     (3) the largest peak rate p;\n
    \    (4) the smallest minimal policed unit m;\n     (5) the *smallest* maximum
    packet size M;\n   across all members of the set.\n   A Least Common TSpec is
    a TSpec adequate to describe the traffic from\n   any one of a number of traffic
    flows. The least common TSpec may be\n   useful when creating a shared reservation
    for a number of flows using\n   SNMP or another management protocol. This differs
    from the merged\n   TSpec described above in that the computed parameters are
    not passed\n   upstream to the sources of traffic.\n   For the controlled-load
    service, the Least Common TSpec may be\n   calculated over a set of TSpecs by
    taking:\n     (1) the largest token bucket rate r;\n     (2) the largest token
    bucket size b;\n     (3) the largest peak rate p;\n     (4) the smallest minimal
    policed unit m;\n     (5) the largest maximum packet size M;\n   across all members
    of the set.\n   The sum of n controlled-load service TSpecs is used when computing\n
    \  the TSpec for a shared reservation of n flows. It is computed by\n   taking:\n
    \    - The sum across all TSpecs of the token bucket rate parameter r.\n     -
    The sum across all TSpecs of the token bucket size parameter b.\n     - The sum
    across all TSpecs of the peak rate parameter p.\n     - The minimum across all
    TSpecs of the minimum policed unit\n       parameter m.\n     - The maximum across
    all TSpecs of the maximum packet size\n       parameter M.\n   The minimum of
    two TSpecs differs according to whether the TSpecs can\n   be ordered according
    to the \"greater than or equal to\" rule above.\n   If one TSpec is less than
    the other TSpec, the smaller TSpec is the\n   minimum.  For unordered TSpecs,
    a different rule is used.  The\n   minimum of two unordered TSpecs is determined
    by comparing the\n   respective values in the two TSpecs and choosing:\n     (1)
    the smaller token bucket rate r;\n     (2) the *larger* token bucket size b;\n
    \    (3) the smaller peak rate p;\n     (4) the *smaller* minimum policed unit
    m;\n     (5) the smaller maximum packet size M;\n"
  title: 8. Ordering and Merging
- contents:
  - "9. Guidelines for Implementors\n   REQUIREMENTS PLACED ON ADMISSION CONTROL ALGORITHM:
    The intention of\n   this service specification is that network elements deliver
    a level\n   of service closely approximating best-effort service under unloaded\n
    \  conditions. As with best-effort service under these conditions, it is\n   not
    required that every single packet must be successfully delivered\n   with zero
    queueing delay. Network elements providing controlled-load\n   service are permitted
    to oversubscribe the available resources to\n   some extent, in the sense that
    the bandwidth and buffer requirements\n   indicated by summing the TSpec token
    buckets of all controlled-load\n   flows may exceed the maximum capabilities of
    the network element.\n   However, this oversubscription may only be done in cases
    where the\n   element is quite sure that actual utilization is less than the sum
    of\n   the token buckets would suggest, so that the implementor's\n   performance
    goals will be met. This information may come from\n   measurement of the aggregate
    traffic flow, specific knowledge of\n   application traffic statistics, or other
    means. The most conservative\n   approach, rejection of new flows whenever the
    addition of their\n   traffic would cause the strict sum of the token buckets
    to exceed the\n   capacity of the network element (including consideration of
    resources\n   needed to maintain the delay and loss characteristics specified
    by\n   the service) may be appropriate in other circumstances.\n   Specific issues
    related to this subject are discussed in the\n   \"Evaluation Criteria\" and \"Examples
    of Implementation\" sections\n   below.\n   INTERACTION WITH BEST-EFFORT TRAFFIC:
    Implementors of this service\n   should clearly understand that in certain circumstances
    (routers\n   acting as the \"split points\" of a multicast distribution tree\n
    \  supporting a shared reservation) large numbers of a flow's packets\n   may
    fail the TSpec conformance test *as a matter of normal\n   operation*.  According
    to the requirements of Section 7, these\n   packets should be forwarded on a best-effort
    basis if resources\n   permit.\n   If the network element's best-effort queueing
    algorithm does not\n   distinguish between these packets and elastic best-effort
    traffic\n   such as TCP flows, THE EXCESS CONTROLLED-LOAD PACKETS WILL \"BACK
    OFF\"\n   THE ELASTIC TRAFFIC AND DOMINATE THE BEST-EFFORT BANDWIDTH USAGE. The\n
    \  integrated services framework does not currently address this issue.\n   However,
    several possible solutions to the problem are known [RED,\n   xFQ].  Network elements
    supporting the controlled load service should\n   implement some mechanism in
    their best-effort queueing path to\n   discriminate between classes of best-effort
    traffic and provide\n   elastic traffic with protection from inelastic best-effort
    flows.\n   Two basic approaches are available to meet this requirement. The\n
    \  network element can maintain separate resource allocations for\n   different
    classes of best-effort traffic, so that no one class will\n   excessively dominate
    the loaded best-effort mix. Alternatively, an\n   element can process excess controlled-load
    traffic at somewhat lower\n   priority than elastic best-effort traffic, so as
    to completely avoid\n   the back-off effect discussed above.\n   If most or all
    controlled-load traffic arises from non-rate-adaptive\n   real-time applications,
    the use of priority mechanisms might be\n   desirable. If most controlled-load
    traffic arises from rate-adaptive\n   realtime or elastic applications attempting
    to establish a bounded\n   minimum level of service, the use of separate resource
    classes might\n   be preferable. However, this is not a firm guideline. In practice,\n
    \  the network element designer's choice of mechanism will depend\n   heavily
    on both the goals of the design and the implementation\n   techniques appropriate
    for the designer's platform. This version of\n   the service specification does
    not specify one or the other behavior,\n   but leaves the choice to the implementor.\n
    \  FORWARDING BEHAVIOR IN PRESENCE OF NONCONFORMANT TRAFFIC: As\n   indicated
    in Section 7, the controlled-load service does not define\n   the QoS behavior
    delivered to flows with non-conformant arriving\n   traffic.  It is permissible
    either to degrade the service delivered\n   to all of the flow's packets equally,
    or to sort the flow's packets\n   into a conformant set and a nonconformant set
    and deliver different\n   levels of service to the two sets.\n   In the first
    case, expected queueing delay and packet loss\n   probability will rise for all
    packets in the flow, but packet\n   delivery reordering will, in general, remain
    at low levels. This\n   behavior is preferable for those applications or transport
    protocols\n   which are sensitive to excessive packet reordering. A possible\n
    \  example is an unmodified TCP connection, which would see reordering\n   as
    lost packets, triggering duplicate acks and hence excessive\n   retransmissions.\n
    \  In the second case, some subset of the flow's packets will be\n   delivered
    with low loss and delay, while some other subset will be\n   delivered with higher
    loss and potentially higher delay. The delayed\n   packets will appear to the
    receiver to have been reordered in the\n   network, while the non-delayed packets
    will, on average, arrive in a\n   more timely fashion than if all packets were
    treated equally. This\n   might be preferable for applications which are highly
    time-sensitive,\n   such as interactive conferencing tools.\n"
  title: 9. Guidelines for Implementors
- contents:
  - "10. Evaluation Criteria\n   The basic requirement placed on an implementation
    of controlled-load\n   service is that, under all conditions, it provide accepted
    data flows\n   with service closely similar to the service that same flow would\n
    \  receive using best-effort service under unloaded conditions.\n   This suggests
    a simple two-step evaluation strategy. Step one is to\n   compare the service
    given best-effort traffic and controlled-load\n   traffic under underloaded conditions.\n
    \    - Measure the packet loss rate and delay characteristics of a test\n     flow
    using best-effort service and with no load on the network\n     element.\n     -
    Compare those measurements with measurements of the same flow\n     receiving
    controlled-load service with no load on the network\n     element.\n     Closer
    measurements indicate higher evaluation ratings. A\n     substantial difference
    in the delay characteristics, such as the\n     smoothing which would be seen
    in an implementation which scheduled\n     the controlled-load flow using a fixed,
    constant-bitrate algorithm,\n     should result in a somewhat lower rating.\n
    \  Step two is to observe the change in service received by a\n   controlled-load
    flow as the load increases.\n     - Increase the background traffic load on the
    network element,\n     while continuing to measuring the loss and delay characteristics
    of\n     the controlled-load flow. Characteristics which remain essentially\n
    \    constant as the element is driven into overload indicate a high\n     evaluation
    rating. Minor changes in the delay distribution indicate\n     a somewhat lower
    rating. Significant increases in delay or loss\n     indicate a poor evaluation
    rating.\n   This simple model is not adequate to fully evaluate the performance\n
    \  of controlled-load service. Three additional variables affect the\n   evaluation.
    The first is the short-term burstiness of the traffic\n   stream used to perform
    the tests outlined above. The second is the\n   degree of long-term change in
    the controlled-load traffic within the\n   bounds of its TSpec.  (Changes in this
    characteristic will have great\n   effect on the effectiveness of certain admission
    control algorithms.)\n   The third is the ratio of controlled-load traffic to
    other traffic at\n   the network element (either best effort or other controlled\n
    \  services).\n   The third variable should be specifically evaluated using the\n
    \  following procedure.\n     With no controlled-load flows in place, overload
    the network\n     element with best-effort traffic (as indicated by substantial\n
    \    packet loss and queueing delay).\n     Execute requests for controlled-load
    service giving TSpecs with\n     increasingly large rate and burst parameters.
    If the request is\n     accepted, verify that traffic matching the TSpec is in
    fact handled\n     with characteristics closely approximating the unloaded\n     measurements
    taken above.\n     Repeat these experiments to determine the range of traffic\n
    \    parameter (rate, burst size) values successfully handled by the\n     network
    element. The useful range of each parameter must be\n     determined for several
    settings of the other parameter, to map out\n     a two-dimensional \"region\"
    of successfully handled TSpecs. When\n     compared with network elements providing
    similar capabilities, this\n     region indicates the relative ability of the
    elements to provide\n     controlled-load service under high load. A larger region
    indicates\n     a higher evaluation rating.\n"
  title: 10. Evaluation Criteria
- contents:
  - "11. Examples of Implementation\n   One possible implementation of controlled-load
    service is to provide\n   a queueing mechanism with two priority levels; a high
    priority one\n   for controlled-load and a lower priority one for best effort
    service.\n   An admission control algorithm is used to limit the amount of traffic\n
    \  placed into the high-priority queue. This algorithm may be based\n   either
    on the specified characteristics of the high-priority flows\n   (using information
    provided by the TSpecs), or on the measured\n   characteristics of the existing
    high-priority flows and the TSpec of\n   the new request.\n   Another possible
    implementation of controlled-load service is based\n   on the existing capabilities
    of network elements which support\n   \"traffic classes\" based on mechanisms
    such as weighted fair queueing\n   or class-based queueing [6]. In this case,
    it is sufficient to map\n   data flows accepted for controlled-load service into
    an existing\n   traffic class with adequate capacity to avoid overload. This\n
    \  requirement is enforced by an admission control algorithm which\n   considers
    the characteristics of the traffic class, the\n   characteristics of the traffic
    already admitted to the class, and the\n   TSpec of the new flow requesting service.
    Again, the admission\n   control algorithm may be based either on the TSpec-specified
    or the\n   measured characteristics of the existing traffic.\n   A specific case
    of the above approach is to employ a scheduler which\n   implements weighted fair
    queueing or similar load-management scheme,\n   allocating a separate scheduling
    queue with correctly chosen weight\n   to each individual controlled-load flow.
    \ In this circumstance, the\n   traffic scheduler also plays the role of the policing
    function, by\n   ensuring that nonconformant traffic arriving for one controlled-load\n
    \  flow does not affect either other controlled-load flows or the best-\n   effort
    traffic. This elimination of mechanism is balanced by the\n   drawback that the
    approach does not benefit from any performance or\n   resource usage gain arising
    from statistical aggregation of several\n   flows into a single queueing class.\n
    \  Admission control algorithms based on specified characteristics are\n   likely
    be appropriate when the number of flows in the high-priority\n   class is small,
    or the traffic characteristics of the flows appear\n   highly variable. In these
    situations the measured behavior of the\n   aggregate controlled-load traffic
    stream may not serve as an\n   effective predictor of future traffic, leading
    a measurement-based\n   admission control algorithm to produce incorrect results.
    Conversely,\n   in situations where the past behavior of the aggregate controlled-\n
    \  load traffic *is* a good predictor of future behavior, a measurement-\n   based
    admission control algorithm may allow more traffic to be\n   admitted to the controlled-load
    service class with no degradation in\n   performance. An implementation may choose
    to switch between these two\n   approaches depending on the nature of the traffic
    stream at a given\n   time.\n   A variety of techniques may be used to provide
    the desired isolation\n   between excess (nonconformant) controlled-load traffic
    and other\n   best-effort traffic. Use of a low priority queue for nonconformant\n
    \  controlled-load traffic is simple, but other approaches may provide\n   superior
    service or fit better into existing architectures.  Variants\n   of fair queueing
    or weighted fair queueing may be used to allocate a\n   percentage of the available
    resources to different best-effort\n   traffic classes. One approach would be
    to allocate each controlled-\n   load flow a a 1/N \"fair share\" percentage of
    the available best-\n   effort bandwidth for its excess traffic. An alternate
    approach would\n   be to provide a single WFQ resource class for all excess controlled-\n
    \  load traffic.  Finally, alternate mechanisms such as RED [xxx] may be\n   used
    to provide the same overall function.\n"
  title: 11. Examples of Implementation
- contents:
  - "12. Examples of Use\n   The controlled-load service may be used by any application
    which can\n   make use of best-effort service, but is best suited to those\n   applications
    which can usefully characterize their traffic\n   requirements.  Applications
    based on the transport of \"continuous\n   media\" data, such as digitized audio
    or video, are an important\n   example of this class.\n   The controlled-load
    service is not isochronous and does not provide\n   any explicit information about
    transmission delay. For this reason,\n   applications with end-to-end timing requirements,
    including the\n   continuous-media class mentioned above, provide an application-\n
    \  specific timing recovery mechanism, similar or identical to the\n   mechanisms
    required when these applications use best-effort service.\n   A protocol useful
    to applications requiring this capability is the\n   IETF Real-Time Transport
    Protocol [2].\n   Load-sensitive applications may choose to request controlled-load\n
    \  service whenever they are run. Alternatively, these applications may\n   monitor
    their own performance and request controlled-load service\n   from the network
    only when best-effort service is not providing\n   acceptable performance. The
    first strategy provides higher assurance\n   that the level of quality delivered
    to the user will not change over\n   the lifetime of an application session. The
    second strategy provides\n   greated flexibility and offers cost savings in environments
    where\n   levels of service above best-effort incur a charge.\n"
  title: 12. Examples of Use
- contents:
  - "13. Security Considerations\n   A network element implementing the service described
    here is\n   intentionally and explicitly expected to give preferential treatment\n
    \  to selected packet traffic. This memo does not describe the mechanism\n   used
    to indicate which traffic is to receive the preferential\n   treatment - rather,
    the controlled-load service described here may be\n   invoked by a number of mechanisms,
    including RSVP, SNMP network\n   management software, or proprietary control software.
    However, any\n   mechanism used to invoke the controlled load service must provide\n
    \  security sufficient to guard against use of this preferential\n   treatment
    capability by undesired or unauthorized traffic.  A correct\n   implementation
    of the controlled-load service is *not* susceptable to\n   a denial-of-service
    attack based on maliciously requesting a very\n   small resource allocation for
    the attacked traffic flow. This is\n   because the service specification requires
    that traffic in excess of\n   the requested level be carried on a best-effort
    basis, rather than\n   being dropped. This requirement is discussed further in
    Section 7 of\n   this memo.\n   Of necessity, giving preferential service to certain
    traffic flows\n   implies giving less service to other traffic flows.  Thus, it
    is\n   possible to conduct a denial of service attack by maliciously\n   reconfiguring
    the controlled-load \"admission control algorithm\" to\n   allow overallocation
    of available bandwidth or other forwarding\n   resources, starving non-controlled-load
    flows. In general, this is\n   unlikely to increase the network's vulnerability
    to attack, because\n   many other reconfigurations of a router or host can cause
    denial of\n   service. It is reasonable to assume that whatever means is used
    to\n   protect against other reconfiguration attacks will be adequate to\n   protect
    against this one as well.\n"
  title: 13. Security Considerations
- contents:
  - "Appendix 1: Use of the Controlled-Load service with RSVP\n   The use of Controlled-Load
    service in conjunction with the RSVP\n   resource reservation setup protocol is
    specified in reference [4].\n   This document gives the format of RSVP FLOWSPEC,
    SENDER_TSPEC, and\n   ADSPEC objects needed to support applications desiring Controlled-\n
    \  Load service and gives information about how RSVP processes those\n   objects.
    The RSVP protocol itself is specified in Reference [3].\n"
  title: 'Appendix 1: Use of the Controlled-Load service with RSVP'
- contents:
  - "References\n   [1] Shenker, S., and J. Wroclawski. \"Network Element Service\n
    \  Specification Template\", RFC 2216, September 1997.\n   [2] Schulzrinne, H.,
    Casner, S., Frederick, R., and V. Jacobson.\n   \"RTP: A Transport Protocol for
    Real-Time Applications\", RFC 1889,\n   January 1996.\n   [3] Braden, R., Ed.,
    et. al., \"Resource Reservation Protocol (RSVP) -\n   Version 1 Functional Specification\",
    RFC 2205, September 1997.\n   [4] Wroclawski, J., \"The use of RSVP with IETF
    Integrated Services\",\n   RFC 2210, September 1997.\n   [5] Shenker, S., and
    J. Wroclawski, \"General Characterization\n   Parameters for Integrated Service
    Network Elements\", RFC 2215,\n   September 1997.\n   [6] S. Floyd, and V. Jacobson.
    \ \"Link-sharing and Resource Management\n   Models for Packet Networks,\" IEEE/ACM
    Transactions on Networking,\n   Vol. 3 No. 4, pp. 365-386, August 1995.\n   [7]
    A. K. J. Parekh. \"A Generalized Processor Sharing Approach to\n   Flow Control
    in Integrated Service Networks\". MIT Laboratory for\n   Information and Decision
    Systems, Report LIDS-TH-2089, February 1992\n"
  title: References
- contents:
  - "Author's Address\n   John Wroclawski\n   MIT Laboratory for Computer Science\n
    \  545 Technology Sq.\n   Cambridge, MA  02139\n   Phone: 617-253-7885\n   Fax:
    \  617-253-2673 (FAX)\n   EMail: jtw@lcs.mit.edu\n"
  title: Author's Address
