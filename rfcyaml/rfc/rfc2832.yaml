- title: __initial_text__
  contents:
  - '          NSI Registry Registrar Protocol (RRP) Version 1.1.0

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a protocol for the registration and\n  \
    \ management of second level domain names and associated name servers\n   in both\
    \ generic Top Level Domains (gTLDs) and country code Top Level\n   Domains (ccTLDs).\
    \ This protocol was developed by the Network\n   Solutions Registry for use within\
    \ the Shared Registration System and\n   is being published \"as-is\" to document\
    \ the protocol implementation\n   developed by the Network Solutions, Inc. Registry.\n\
    \   Internet domain name registration typically involves three entities:\n   a\
    \ registrant who wishes to register a domain name, a registrar who\n   provides\
    \ services to the registrant, and a registry that provides\n   services to the\
    \ registrar while serving as the authoritative\n   repository of all functional\
    \ information required to resolve names\n   registered in the registry's TLDs.\
    \  This document describes a\n   protocol for registry-registrar communication\
    \ only.  The protocol\n   does not provide any registrant services.\n   This document\
    \ is being discussed on the \"rrp\" mailing list.  To join\n   the list, send\
    \ a message to <majordomo@NSIRegistry.com> with the\n   words \"subscribe rrp\"\
    \ in the body of the message. There is also a web\n   site for the mailing list\
    \ archives at\n   <http://www.NSIRegistry.net/maillist/rrp>.\n"
- title: Conventions Used In This Document
  contents:
  - "Conventions Used In This Document\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [MUSTSHOULD]. Further,\n   the term \"implicit attribute\" refers to an entity\
    \ attribute whose\n   value is derived either from another attribute or is dependent\
    \ on an\n   established RRP session.\n   In examples, \"C:\" represents lines\
    \ sent by the registrar client and\n   \"S:\" represents lines sent by the registry\
    \ server.\n   The term \"System\" is used in this document to collectively refer\
    \ to\n   this protocol and the software and hardware that implements the\n   protocol.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction .................................................\
    \    3\n   2. Security Services ............................................ \
    \   4\n   2.1 Connection Security .........................................  \
    \  4\n   2.2 System Data Security ........................................   \
    \ 5\n   3. Connection Model .............................................    5\n\
    \   4. Protocol Description .........................................    6\n \
    \  4.1 Request Format ..............................................    7\n  \
    \ 4.2 Response Format .............................................    8\n   4.3\
    \ Protocol Commands ...........................................    8\n   4.3.1\
    \ ADD .......................................................    8\n   4.3.2 CHECK\
    \ .....................................................   11\n   4.3.3 DEL .......................................................\
    \   12\n   4.3.4 DESCRIBE .................................................. \
    \  14\n   4.3.5 MOD .......................................................  \
    \ 14\n   4.3.6 QUIT ......................................................   16\n\
    \   4.3.7 RENEW .....................................................   17\n \
    \  4.3.8 SESSION ...................................................   18\n  \
    \ 4.3.9 STATUS ....................................................   18\n   4.3.10\
    \ TRANSFER .................................................   21\n   5. Response\
    \ Codes ...............................................   23\n   5.1 Response\
    \ Code Summary .......................................   23\n   5.2 Command-Response\
    \ Correspondence .............................   28\n   6. Domain Status Codes\
    \ ..........................................   29\n   6.1 Domain Status Code Description\
    \ ..............................   30\n   7. Formal Syntax ................................................\
    \   30\n   8. Internationalization ......................................... \
    \  35\n   9. Known Issues .................................................  \
    \ 35\n   10. Security Considerations .....................................   37\n\
    \   11. IANA Considerations .........................................   37\n \
    \  12. References ..................................................   37\n  \
    \ 13. Acknowledgments .............................................   38\n   14.\
    \ Authors' Addresses ..........................................   38\n   15. Full\
    \ Copyright Statement ....................................   39\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes the specifications for the NSI Registry\n\
    \   Registrar Protocol (RRP) version 1.1.0, a TCP-based, 7-bit US-ASCII\n   text\
    \ protocol that permits multiple registrars to provide second\n   level Internet\
    \ domain name registration services in the top level\n   domains (TLDs) administered\
    \ by a TLD registry. RRP is specified using\n   Augmented Backus-Nauer Form (ABNF)\
    \ as described in [ABNF]. Note that\n   all ABNF string literals are case-insensitive\
    \ and the examples\n   provided in this document may use mixed case to improve\
    \ readability.\n   RRP was developed by the Network Solutions, Inc. Registry under\
    \ the\n   auspices of the Shared Registration System program. The protocol was\n\
    \   initially deployed in April 1999 as part of a test bed implementation\n  \
    \ of the Shared Registration System with five registrars. Additional\n   registrars\
    \ began using the protocol in July 1999. The operational\n   experiences of both\
    \ the registry and the registrars identified\n   several \"lessons learned\" which\
    \ have been documented here as \"Known\n   Issues\".\n   This document provides\
    \ both a description of a protocol and notice of\n   learned operational issues\
    \ that may be useful as first steps in\n   developing a standards track domain\
    \ registration services protocol.\n   This document and the protocol it describes\
    \ may be modified in the\n   future based on continued operational experience\
    \ and community\n   reaction.\n   The registry stores information about registered\
    \ domain names and\n   associated name servers. A domain name's data includes\
    \ its name, name\n   servers, registrar, registration expiration date, and status.\
    \ A name\n   server's data includes its server name, IP addresses, and registrar.\n\
    \   A registrar MAY perform the following registration service procedures\n  \
    \ using RRP:\n   - Determine if a domain name has been registered.\n   - Register\
    \ a domain name.\n   - Renew the registration of a domain name.\n   - Cancel the\
    \ registration of a domain name.\n   - Update the name servers of a domain name.\n\
    \   - Transfer a domain name from another registrar.\n   - Examine the status\
    \ of domain names that the registrar has\n     registered.\n   - Modify the status\
    \ of domain names that the registrar has\n     registered.\n   - Determine if\
    \ a name server has been registered.\n   - Register a name server.\n   - Update\
    \ the IP addresses of a name server.\n   - Delete a name server.\n   - Examine\
    \ the status of name servers that the registrar has\n     registered.\n   All\
    \ RRP commands include features to provide idempotency.  That is,\n   the effect\
    \ of each command is the same if the command is executed\n   once or if the command\
    \ is executed multiple times. This property is\n   extremely useful in situations\
    \ when a command is retried due to an\n   error condition that results in a missed\
    \ command response and a\n   command retry is attempted. Command retries will\
    \ be caught by the\n   System and rejected with an appropriate error response\
    \ code. Command\n   parameters that do not provide idempotency will be explained\
    \ fully as\n   part of the appropriate command description.\n"
- title: 2. Security Services
  contents:
  - "2. Security Services\n   RRP provides only basic password-based registrar authentication\n\
    \   services.  Additional security services, including privacy and\n   registrar\
    \ authentication using public key cryptography, are provided\n   through other\
    \ System features.\n"
- title: 2.1 Connection Security
  contents:
  - "2.1 Connection Security\n   Each RRP session MUST be encrypted using the Secure\
    \ Socket Layer\n   (SSL) v3.0 protocol as specified in [SSL]. SSL provides privacy\n\
    \   services that reduce the risk of inadvertent disclosure of\n   registrar-sensitive\
    \ information, such as the registrar's user\n   identifier and password.\n   SSL\
    \ supports mutual authentication of both the client and server\n   using signed\
    \ digital certificates. The Shared Registration System\n   implemented by the\
    \ NSI Registry requires digital certificates issued\n   by a commercial certification\
    \ authority for both registrar clients\n   and public registry RRP servers. Both\
    \ the registrar client and the\n   public registry RRP server are authenticated\
    \ when establishing an SSL\n   connection. Further, a registrar MUST be authenticated\
    \ when\n   establishing an RRP connection via the RRP SESSION command by\n   providing\
    \ a registrar user identifier and password known only to the\n   registrar and\
    \ the System. Registrars may change their session\n   password at any time using\
    \ the RRP SESSION command.\n   The SSL protocol is not an IETF Standards Track\
    \ protocol. The\n   Transport Layer Security protocol, specified in [TLS], is\
    \ a Standards\n   Track protocol that provides SSL v3.0 compatibility features.\n"
- title: 2.2 System Data Security
  contents:
  - "2.2 System Data Security\n   The System stores information about the registered\
    \ domain names and\n   their name servers.  Only the current registrar of a registered\n\
    \   domain name is authorized to query it, update its name servers, and\n   cancel\
    \ or renew it. Any registrar can request a transfer of a domain\n   name and its\
    \ associated name servers from another registrar to the\n   requesting registrar.\
    \ Only the current sponsoring registrar can\n   receive and explicitly approve\
    \ or reject domain transfer requests.\n   Only a name server's registrar can query,\
    \ update, and delete it.  In\n   general, name servers must be registered through\
    \ the current\n   registrar of the name server's parent domain name, though an\n\
    \   implementation MAY allow use of name servers registered in other TLDs\n  \
    \ without specifying IP addresses or requiring parent domain\n   registration.\
    \ Use of ccTLD name servers for a gTLD domain name is one\n   such example.\n\
    \   Name servers are implicitly transferred by the System when their\n   parent\
    \ domain name is transferred. In addition, a name server cannot\n   be deleted\
    \ if it is hosting domain names.\n"
- title: 3. Connection Model
  contents:
  - "3. Connection Model\n   IANA has assigned TCP port 648 for RRP use. All RRP implementations\n\
    \   MUST provide RRP services over SSL on TCP port 648. An RRP server\n   MUST\
    \ return a banner in the following format to confirm that a\n   connection has\
    \ been established:\n   <registry name> RRP Server version <version><crlf>\n \
    \  <server build date and time><crlf>\n   Each line ends with carriage return\
    \ and line feed characters. The\n   server build date and time string includes\
    \ the day, month, date, time\n   (specified in hours, minutes, and seconds), the\
    \ local time zone, and\n   the four-digit year. A dot (\".\") in column one on\
    \ a line by itself\n   marks the end of banner text.\n   Example\n   A registrar\
    \ successfully establishes a connection with the NSI\n   Registry on TCP port\
    \ 648:\n   S:NSI RRP Server version 1.1.0\n   S:Mon Oct 25 20:20:34 EDT 1999\n\
    \   S:.\n"
- title: 4. Protocol Description
  contents:
  - "4. Protocol Description\n   A typical RRP session will go through a number of\
    \ states during its\n   lifetime.  Figure 1 illustrates the possible states of\
    \ an RRP server.\n   Initially, the server waits for a client connection and\n\
    \   authentication (PRE).  All client connections MUST be authenticated.\n   \
    \                                   |\n                                      |\n\
    \                                      v\n                             +-----------------+\
    \   Timeout\n                             |   Waiting for   |-------------------+\n\
    \   Authentication Succeeded  |      Client     |                   |\n      \
    \             +---------|  Authentication | Authentication    |\n            \
    \       |         |      (PRE)      |-----+  Failed     |\n                  \
    \ |         +-----------------+     |             |\n                   |    \
    \                             |             |\n                   V          \
    \                       V             |\n             +-----------+     Succeeded\
    \    +--------------------+ |\n             |Waiting for|<-----------------| \
    \   Waiting for     | |\n             |  Command  |----------+       |Authentication\
    \ Retry| |\n             |   (WFC)   |  Timeout |       |       (WFR)        |\
    \ |\n             +-----------+          |       +--------------------+ |\n  \
    \               |   ^              |           |         |        |\n        \
    \         |   |              |   Timeout |         | Failed |\n         Request\
    \ V   |Response      |           |         |        |\n             +-----------+\
    \          |           V         V        V\n             | Executing |      \
    \    |          +--------------------+\n             |  Command  |          +--------->|\
    \    Disconnected    |\n             |   (EXE)   |-------------------->|     \
    \  (DIS)        |\n             +-----------+          QUIT       +--------------------+\n\
    \                Figure 1: RRP Server Finite State Machine\n   If the authentication\
    \ fails, the server gives the client another\n   chance to identify itself (WFR).\
    \ If the authentication fails again,\n   the server disconnects (DIS).  Otherwise,\
    \ the server waits for a\n   request from the client (WFC).  Upon receiving a\
    \ request, the server\n   executes it and responds to the client with the result\
    \ (EXE). The\n   server then waits again for another request from the client (WFC).\
    \ If\n   the client sends a QUIT command, the server ends the session and\n  \
    \ disconnects (DIS). To keep its state in sync with that of the server,\n   the\
    \ client SHOULD wait for a response from the server before sending\n   another\
    \ request on the same connection.  The following table\n   summarizes these states:\n\
    \        PRE     Waiting for client connection and authentication\n        WFR\
    \     Waiting for authentication retry\n        WFC     Waiting for a command\
    \ from an authenticated client\n        EXE     Executing a command\n        DIS\
    \     Disconnected\n   The WFR and WFC states MAY time out. An implementation\
    \ SHOULD define\n   inactivity timeout periods for these states based on System-specific\n\
    \   factors, including (but not limited to) resource availability and\n   security\
    \ risk. In the absence of other factors, a default timeout\n   period of 10 minutes\
    \ SHOULD be used. The server MAY disconnect if the\n   server is in one of these\
    \ states and no message is received from the\n   client during the timeout period.\n"
- title: 4.1 Request Format
  contents:
  - "4.1 Request Format\n   An RRP request nominally consists of a command name, an\
    \ entity block,\n   command options, and an end-of-command delimiter. Command\
    \ options and\n   entity blocks collectively define command parameters and their\n\
    \   specification is order independent; examples provided in this\n   document\
    \ specify entity blocks before command options.\n     CommandName [EntityBlock]\
    \ [CommandOptions] EndOfCommand\n   A command name specifies the type of an RRP\
    \ request.  A command is a\n   word or abbreviation terminated by a carriage-return\
    \ linefeed (crlf)\n   sequence.\n     CommandName<crlf>\n   An entity block specifies\
    \ the data in an RRP request. It consists of\n   attribute name-value pairs specifying\
    \ the entity and all of the\n   attributes of the entity.  Each attribute name-value\
    \ pair starts with\n   the attribute name, followed by a colon, the attribute\
    \ value, and is\n   finally terminated by a carriage-return linefeed sequence.\
    \  Entity\n   blocks are optional for some requests.\n     entityName:entityValue<crlf>\n\
    \     attributeName:attributeValue<crlf>\n   Command options specify control parameters\
    \ for an RRP request. A\n   command option starts with a dash, followed by the\
    \ option name, a\n   colon, the option value, and is finally terminated by a carriage-\n\
    \   return linefeed sequence.\n     -commandOptionName:commandOptionValue<crlf>\n\
    \   An EndOfCommand delimiter specifies the end of an RRP request.  It\n   consists\
    \ of a dot (\".\") in column one followed by a carriage-return\n   linefeed sequence.\n\
    \     .<crlf>\n"
- title: 4.2 Response Format
  contents:
  - "4.2 Response Format\n   An RRP response starts with a three-digit response code,\
    \ followed by\n   a space, an ASCII text description of the response, a carriage-return\n\
    \   linefeed sequence, and zero or more attribute name-value pair lines.\n   An\
    \ RRP response is terminated by a dot in column one followed by a\n   carriage-return\
    \ linefeed sequence.\n     ResponseCode<space>responseDescription<crlf>\n    \
    \ [attributeName:attributeValue<crlf>]\n     .<crlf>\n"
- title: 4.3 Protocol Commands
  contents:
  - "4.3 Protocol Commands\n   Implementations of RRP commands MUST provide \"all\
    \ or nothing\" success\n   and failure operation. Failed command execution MUST\
    \ leave the System\n   in the same state it was in before the command was attempted\
    \ and\n   failed.\n   All RRP commands include features to provide idempotency.\
    \ Command\n   features that are not idempotent are explained fully as needed as\n\
    \   part of the appropriate command description.\n"
- title: 4.3.1 ADD
  contents:
  - "4.3.1 ADD\n   This command allows a registrar to register a domain name or a\
    \ name\n   server in the System.\n"
- title: 4.3.1.1 Registering a Domain Name
  contents:
  - "4.3.1.1 Registering a Domain Name\n   The request to register a domain name MUST\
    \ contain the following\n   data:\n   - The \"EntityName\" parameter set to value\
    \ \"Domain\".\n   - Fully qualified second level domain name in the \"DomainName\"\
    \n     parameter.\n   The request to register a domain name MAY contain 1 or more,\
    \ and a\n   maximum of 13, fully qualified name servers hosting the domain name\n\
    \   in multiple instances of the \"NameServer\" parameter. The name servers\n\
    \   MUST have already been registered in the registry. Implementations\n   MAY\
    \ allow specification of name servers associated with domains\n   registered in\
    \ other TLDs. For example, an implementation MAY allow\n   use of ccTLD name servers\
    \ for gTLD domain name registration.\n   The request to register a domain name\
    \ MAY contain the initial\n   registration period in years for the domain being\
    \ registered in a\n   single instance of the \"Period\" parameter. The System\
    \ MUST provide a\n   default initial registration period in years if the \"Period\"\
    \n   parameter is not provided. The acceptable year values for the\n   \"Period\"\
    \ parameter are implementation specific.\n   The System will register the domain\
    \ name to the registrar for the\n   period specified by the registrar. If the\
    \ registrar does not specify\n   a registration period, a System-specified default\
    \ value MUST be used\n   for the initial registration period. If the domain name\
    \ is\n   successfully registered, the System MUST return the registration\n  \
    \ expiration date in the \"registration expiration date\" attribute in\n   the\
    \ response.\n   Authorized User: All registrars MAY use the ADD command to register\n\
    \   domain names.\n   Examples\n   A registrar registers a domain name without\
    \ specifying name servers:\n   C:add<crlf>\n   C:EntityName:Domain<crlf>\n   C:DomainName:example.com<crlf>\n\
    \   C:-Period:10<crlf>\n   C:.<crlf>\n   S:200 Command completed successfully<crlf>\n\
    \   S:registration expiration date:2009-09-22 10:27:00.0<crlf>\n   S:status:ACTIVE<crlf>\n\
    \   S:.<crlf>\n   A registrar registers a domain name using previously-registered\
    \ name\n   servers:\n   C:add<crlf>\n   C:EntityName:Domain<crlf>\n   C:DomainName:example2.com<crlf>\n\
    \   C:-Period:10<crlf>\n   C:NameServer:ns1.example.com<crlf>\n   C:NameServer:ns2.example.com<crlf>\n\
    \   C:.<crlf>\n   S:200 Command completed successfully<crlf>\n   S:registration\
    \ expiration date:2000-09-22 10:27:00.0<crlf>\n   S:status:ACTIVE<crlf>\n   S:.<crlf>\n"
- title: 4.3.1.2 Registering a Name Server
  contents:
  - "4.3.1.2 Registering a Name Server\n   The request to register a name server MUST\
    \ contain the following\n   data:\n   - The \"EntityName\" parameter set to value\
    \ \"NameServer\".\n   - Fully qualified server name of the name server in the\
    \ \"NameServer\"\n     parameter.\n   If the name server being registered is the\
    \ child of a registered\n   domain name, the name server registration request\
    \ MUST include one or\n   more, and a maximum of 13, name server IP addresses\
    \ in multiple\n   instances of the \"IPAddress\" parameter. Name servers associated\
    \ with\n   domains registered in other TLDs SHOULD NOT be specified with IP\n\
    \   addresses to reduce the possibility of duplicating DNS NS records for\n  \
    \ the name servers in multiple zone files.\n   The registrar MUST register the\
    \ name server in the System before\n   using it to host domain names. Further,\
    \ the name server MUST be\n   registered through the same registrar that is the\
    \ current registrar\n   of its parent domain name. The System MAY allow any registrar\
    \ to use\n   the name server to host domain names.\n   Authorized User: All registrars\
    \ MAY use the ADD command to register\n   name servers.\n   Examples\n   A registrar\
    \ registers a new name server in an existing domain name:\n   C:add<crlf>\n  \
    \ C:EntityName:NameServer<crlf>\n   C:NameServer:ns1.example.com<crlf>\n   C:IPAddress:198.41.1.11<crlf>\n\
    \   C:.<crlf>\n   S:200 Command completed successfully<crlf>\n   S:.<crlf>\n"
- title: 4.3.2 CHECK
  contents:
  - "4.3.2 CHECK\n   This command allows a registrar to determine if a domain name\
    \ or name\n   server has been registered in the System.\n"
- title: 4.3.2.1 Domain Name Check
  contents:
  - "4.3.2.1 Domain Name Check\n   The request to determine if a domain name is registered\
    \ MUST contain\n   the following data:\n   - The \"EntityName\" parameter set\
    \ to value \"Domain\".\n     - Fully qualified second level domain name in the\
    \ \"DomainName\"\n     parameter.\n   The System MUST provide a positive or negative\
    \ response to document\n   domain name availability at the moment the command\
    \ is executed.\n   Authorized User: All registrars MAY use the CHECK command to\n\
    \   determine if a domain name has been registered or not.\n   Examples\n   A\
    \ registrar checks the availability of a domain name in the System:\n   C:check<crlf>\n\
    \   C:EntityName:Domain<crlf>\n   C:DomainName:example.com<crlf>\n   C:.<crlf>\n\
    \   S:211 Domain name not available<crlf>\n   S:.<crlf>\n"
- title: 4.3.2.2 Name Server Check
  contents:
  - "4.3.2.2 Name Server Check\n   The request to determine if a name server is registered\
    \ MUST contain\n   the following data:\n   - The \"EntityName\" parameter set\
    \ to value \"NameServer\".\n   - Fully qualified server name in the \"NameServer\"\
    \ parameter.\n   The System MUST provide a positive or negative response to document\n\
    \   name server availability at the moment the command is executed. If\n   the\
    \ name server has been registered, the System MUST return the IP\n   address(es)\
    \ of the name server.\n   Authorized User: All registrars MAY use the CHECK command\
    \ to\n   determine if a name server has been registered or not.\n   Examples\n\
    \   A registrar checks the availability of a server name in the System:\n   C:check<crlf>\n\
    \   C:EntityName:Nameserver<crlf>\n   C:Nameserver:ns1.example.com<crlf>\n   C:.<crlf>\n\
    \   S:213 Name server not available<crlf>\n   S:ipAddress:192.10.10.10<crlf>\n\
    \   S:.<crlf>\n"
- title: 4.3.3 DEL
  contents:
  - "4.3.3 DEL\n   This command allows a registrar to delete (cancel the registration)\n\
    \   of a domain name or delete a name server.\n"
- title: 4.3.3.1 Deleting a Domain Name
  contents:
  - "4.3.3.1 Deleting a Domain Name\n   The request to cancel the registration of\
    \ a domain name MUST contain\n   the following data:\n   - The \"EntityName\"\
    \ parameter set to value \"Domain\".\n   - Fully qualified second level domain\
    \ name in the \"DomainName\"\n     parameter.\n   A request to delete a domain\
    \ name SHOULD cause the deletion of all\n   name servers that are children of\
    \ the domain name being deleted. The\n   name servers SHOULD be deleted if they\
    \ are not actively hosting other\n   domains. A domain MUST not be deleted if\
    \ it has child name servers\n   hosting other domains.\n   Authorized User: The\
    \ current registrar of a domain name MAY use the\n   DEL command to delete a domain\
    \ name from the System.\n   Examples\n   A registrar deletes a domain name, implicitly\
    \ deleting all name\n   servers registered in the domain:\n   C:del<crlf>\n  \
    \ C:EntityName:Domain<crlf>\n   C:DomainName:example.com<crlf>\n   C:.<crlf>\n\
    \   S:200 Command completed successfully<crlf>\n   S:.<crlf>\n"
- title: 4.3.3.2 Deleting a Name Server
  contents:
  - "4.3.3.2 Deleting a Name Server\n   The request to delete a name server MUST contain\
    \ the following data:\n   - The \"EntityName\" parameter set to value \"NameServer\"\
    .\n   - Fully qualified name of the name server in the \"NameServer\"\n     parameter.\n\
    \   A name server MUST not be deleted if it is hosting domains. Deleting\n   such\
    \ domains or name servers is prohibited because their deletion\n   WILL result\
    \ in orphaning the hosted domains.\n   Authorized User: The current registrar\
    \ of a name server MAY use the\n   DEL command to delete a name server from the\
    \ System.\n   Examples\n   A registrar deletes a name server that is not hosting\
    \ domains:\n   C:del<crlf>\n   C:EntityName:NameServer<crlf>\n   C:NameServer:ns1.registrarA.com<crlf>\n\
    \   C:.<crlf>\n   S:200 Command completed successfully<crlf>\n   S:.<crlf>\n \
    \  A registrar tries to delete a name server that is hosting domains:\n   C:del<crlf>\n\
    \   C:EntityName:NameServer<crlf>\n   C:NameServer:ns1.registrarA.com<crlf>\n\
    \   C:.<crlf>\n   S:532 Domain names linked with name server<crlf>\n   S:.<crlf>\n"
- title: 4.3.4 DESCRIBE
  contents:
  - "4.3.4 DESCRIBE\n   This command allows a registrar to obtain general information\
    \ about\n   an RRP implementation. The command MAY contain the following\n   parameters:\n\
    \   - The \"Target\" parameter set to value \"Protocol\".\n   The implementation\
    \ MUST return the protocol version number whether or\n   not the request contains\
    \ the \"Target\" parameter.\n   Authorized User: All registrars MAY use the DESCRIBE\
    \ command.\n   Examples\n   A registrar obtains general information about an RRP\
    \ implementation:\n   C:describe<crlf>\n   C:-Target:Protocol<crlf>\n   C:.<crlf>\n\
    \   S:200 Command completed successfully<crlf>\n   S:Protocol:RRP 1.1.0<crlf>\n\
    \   S:.<crlf>\n"
- title: 4.3.5 MOD
  contents:
  - "4.3.5 MOD\n   This command allows a registrar to update a registered domain name\
    \ or\n   a name server. The command allows the following operations on an\n  \
    \ attribute value for both single-valued and multi-valued attributes:\n   - Add\
    \ an attribute value. The value to be added MUST be unique among\n     the values\
    \ of the attribute. For a single-valued attribute, it\n     replaces the current\
    \ value.\n   - Remove an attribute value. The value to be removed MUST exist.\n\
    \     Further, an attribute value cannot be removed if it is the only\n     value\
    \ of a required attribute.\n   Attribute values to be removed are identified by\
    \ tagging with an \"=\"\n   suffix.\n"
- title: 4.3.5.1 Domain Modification
  contents:
  - "4.3.5.1 Domain Modification\n   The request to modify a registered domain name\
    \ MUST contain the\n   following data:\n   - The \"EntityName\" parameter set\
    \ to value \"Domain\".\n   - Fully qualified second level domain name in the \"\
    DomainName\"\n     parameter.\n   The registrar can perform the following update\
    \ operations on the\n   domain name:\n   - Update the name servers of the domain\
    \ name by setting one or more\n     instances of the \"NameServer\" parameter.\n\
    \   - Update the status of the domain name by setting one or more\n     instances\
    \ of the \"Status\" parameter. Valid values for the \"Status\"\n     parameter\
    \ are defined in Section 6.\n   Authorized User: The current registrar of a domain\
    \ name MAY use the\n   MOD command to modify the attributes of a domain name.\n\
    \   Examples\n   A registrar removes one name server (ns1) from a domain and adds\
    \ a\n   new name server (ns3) to the same domain:\n   C:mod<crlf>\n   C:EntityName:Domain<crlf>\n\
    \   C:DomainName:example.com<crlf>\n   C:NameServer:ns3.registrarA.com<crlf>\n\
    \   C:NameServer:ns1.registrarA.com=<crlf>\n   C:.<crlf>\n   S:200 Command completed\
    \ successfully<crlf>\n   S:.<crlf>\n"
- title: 4.3.5.2 Name Server Modification
  contents:
  - "4.3.5.2 Name Server Modification\n   The request to update a name server MUST\
    \ contain the following data:\n   - The \"EntityName\" parameter set to value\
    \ \"NameServer\".\n   - Fully qualified server name of the name server in the\
    \ \"NameServer\"\n     parameter.\n   The registrar can perform the following\
    \ update operations on the name\n   server:\n   - Update the \"NameServer\" attribute\
    \ of the name server. This allows a\n     registrar to change the name of a name\
    \ server while preserving all\n     existing associations.\n   - Update the IP\
    \ addresses of the name server by setting one or more\n     instances of the \"\
    IPAddress\" parameter.\n   Authorized User: The current registrar of a name server\
    \ MAY use the\n   MOD command to modify the attributes of a domain name.\n   Examples\n\
    \   A registrar changes the name and IP address of a name server:\n   C:mod<crlf>\n\
    \   C:EntityName:NameServer<crlf>\n   C:NameServer:ns1.registrarA.com<crlf>\n\
    \   C:NewNameServer:ns2.registrarA.com<crlf>\n   C:IPAddress:198.42.1.11<crlf>\n\
    \   C:IPAddress:198.41.1.11=<crlf>\n   C:.<crlf>\n   S:200 Command completed successfully<crlf>\n\
    \   S:.<crlf>\n"
- title: 4.3.6 QUIT
  contents:
  - "4.3.6 QUIT\n   This command allows a registrar to close an RRP connection. A\n\
    \   response MUST be sent before closing the connection.\n   Authorized User:\
    \ All registrars MAY use the QUIT command.\n   Examples\n   A registrar ends an\
    \ RRP session and closes an existing connection:\n   C:quit<crlf>\n   C:.<crlf>\n\
    \   S:220 Command completed successfully. Server closing connection<crlf>\n  \
    \ S:.<crlf>\n"
- title: 4.3.7 RENEW
  contents:
  - "4.3.7 RENEW\n   This command allows a registrar to renew a domain name in the\
    \ System.\n   The request to renew a domain name MUST contain the following data:\n\
    \   - The \"EntityName\" parameter set to value \"Domain\".\n   - Fully qualified\
    \ second level domain name in the \"DomainName\"\n     parameter.\n   The request\
    \ to renew a domain name MAY contain the renewal period in\n   years for the domain\
    \ being renewed in a single instance of a \"Period\"\n   parameter and a single\
    \ instance of a \"CurrentExpirationYear\"\n   parameter. These parameters MUST\
    \ appear together if either is\n   specified, though the order in which the parameters\
    \ appear is\n   insignificant. The \"Period\" parameter identifies the number\
    \ of years\n   to be added to the registration. The \"CurrentExpirationYear\"\n\
    \   parameter identifies the current expiration year, and is required to\n   ensure\
    \ that repeated attempts to retry this command do not result in\n   multiple successful\
    \ renewals. The System MUST provide a default\n   number of renewal years if the\
    \ \"Period\" and \"CurrentExpirationYear\"\n   parameters are not provided. Repeated\
    \ use of this command without the\n   \"Period\" and \"CurrentExpirationYear\"\
    \ parameters may result in\n   repeated successful renewals since idempotency\
    \ is not provided when\n   these parameters are not used. The acceptable year\
    \ values for the\n   \"Period\" parameter are implementation specific subject\
    \ to syntax\n   restrictions.\n   The System renews the domain name for a period\
    \ specified by the\n   registrar. If the domain name renewal is completed successfully,\
    \ the\n   System MUST return the new registration expiration date in the\n   \"\
    RegistrationExpirationDate\" attribute in the response.\n   Authorized User: The\
    \ current registrar of a domain name MAY use the\n   RENEW command.\n   Examples\n\
    \   A registrar renews a domain name using a specified renewal period:\n   C:renew<crlf>\n\
    \   C:EntityName:Domain<crlf>\n   C:DomainName:example.com<crlf>\n   C:-Period:9<crlf>\n\
    \   C:-CurrentExpirationYear:2001<crlf>\n   C:.<crlf>\n   S:200 Command completed\
    \ successfully<crlf>\n   S:registration expiration date:2010-09-22 10:27:00.0<crlf>\n\
    \   S:.<crlf>\n"
- title: 4.3.8 SESSION
  contents:
  - "4.3.8 SESSION\n   This command allows a registrar to establish an RRP session.\
    \ A\n   registrar can also use this command to change their password. The\n  \
    \ request to establish an RRP connection MUST contain the following\n   command\
    \ parameters:\n   - The \"Id\" parameter set to the registrar's System user ID.\n\
    \   - The \"Password\" parameter set to the registrar's current System\n     password.\n\
    \   The request to establish an RRP session MAY contain a new password\n   for\
    \ the registrar in a single instance of the \"NewPassword\"\n   parameter.\n \
    \  The registrar MUST send this command to the System before any other\n   command.\
    \  If the command fails due to invalid information (such as an\n   invalid registrar\
    \ ID or password), the registrar can resend this\n   request with corrected information.\
    \ If the command fails a second\n   time, the System SHOULD close the connection.\n\
    \   Authorized User: All registrars MAY use the SESSION command.\n   Examples\n\
    \   A registrar establishes an RRP session:\n   C:session<crlf>\n   C:-Id:registrarA<crlf>\n\
    \   C:-Password:i-am-registrarA<crlf>\n   C:.<crlf>\n   S:200 Command completed\
    \ successfully<crlf>\n   S:.<crlf>\n"
- title: 4.3.9 STATUS
  contents:
  - "4.3.9 STATUS\n   This command allows a registrar to determine the current status\
    \ of a\n   domain name or name server.\n"
- title: 4.3.9.1 Domain Status
  contents:
  - "4.3.9.1 Domain Status\n   The request to query a domain name MUST contain the\
    \ following data:\n   - The \"EntityName\" parameter set to value \"Domain\".\n\
    \   - Fully qualified second level domain name in the \"DomainName\"\n     parameter.\n\
    \   The response from the System MAY contain the following data:\n   - Fully qualified\
    \ server names of name servers hosting the domain\n     name in multiple instances\
    \ of the \"nameserver\" attribute.\n   - Registration expiration date in the \"\
    registration expiration date\"\n     attribute.\n   - ID of the current registrar\
    \ of the domain name in the \"registrar\"\n     attribute.\n   - Date the domain\
    \ name was transferred by the current registrar in\n     the \"registrar transfer\
    \ date\" attribute.\n   - Current statuses of the domain name in multiple instances\
    \ of the\n     \"status\" attribute.\n   - Date the domain name was originally\
    \ registered in the \"created\n     date\" attribute.\n   - ID of the registrar\
    \ that originally registered the domain name in\n     the \"created by\" attribute.\n\
    \   - Date the domain name was last updated in the \"updated date\"\n     attribute.\n\
    \   - ID of the entity (either a registrar or the registry) that last\n     updated\
    \ the domain name in the \"updated by\" attribute.\n   Authorized User: The current\
    \ registrar of a domain name MAY use the\n   STATUS command to view current domain\
    \ name attributes.\n   Examples\n   The current registrar of a domain name queries\
    \ the domain name:\n   C:status<crlf>\n   C:EntityName:Domain<crlf>\n   C:DomainName:example.com<crlf>\n\
    \   C:.<crlf>\n   S:200 Command completed successfully<crlf>\n   S:nameserver:ns2.registrarA.com<crlf>\n\
    \   S:nameserver:ns3.registrarA.com<crlf>\n   S:registration expiration date:2010-09-22\
    \ 10:27:00.0<crlf>\n   S:registrar:registrarA<crlf>\n   S:registrar transfer date:1999-09-22\
    \ 10:27:00.0<crlf>\n   S:status:ACTIVE<crlf>\n   S:created date:1998-09-22 10:27:00.0<crlf>\n\
    \   S:created by:registrarA<crlf>\n   S:updated date:2002-09-22 10:27:00.0<crlf>\n\
    \   S:updated by:registrarA<crlf>\n   S:.<crlf>\n   A registrar queries a domain\
    \ name currently registered by another\n   registrar:\n   C:status<crlf>\n   C:EntityName:Domain<crlf>\n\
    \   C:DomainName:example.com<crlf>\n   C:.<crlf>\n   S:531 Authorization failed<crlf>\n\
    \   S:.<crlf>\n"
- title: 4.3.9.2 Name Server Status
  contents:
  - "4.3.9.2 Name Server Status\n   The request to query a name server MUST contain\
    \ the following data:\n   - The \"EntityName\" parameter set to value \"NameServer\"\
    .\n   - Fully qualified name of the name server in the \"NameServer\"\n     parameter.\n\
    \   The response from the System MAY contain the following data:\n   - Fully qualified\
    \ name of the name server in the \"nameserver\"\n     attribute.\n   - IP addresses\
    \ of the name server in multiple instances of the\n     \"ipaddress\" attribute.\n\
    \   - ID of the current registrar of the name server in the \"registrar\"\n  \
    \   attribute.\n   - Date the name server was transferred by the current registrar\
    \ in\n     the \"registrar transfer date\" attribute.\n   - Date the name server\
    \ was registered in the \"created date\"\n     attribute.\n   - ID of the entity\
    \ that registered the name server in the \"created\n     by\" attribute.\n   -\
    \ Date the name server was last updated in the \"updated date\"\n     attribute.\n\
    \   - ID of the entity that last updated the name server in the \"updated\n  \
    \   by\" attribute.\n   Authorized User: The current registrar of a name server\
    \ MAY use the\n   STATUS command to view current domain name attributes.\n   Examples\n\
    \   The current registrar of a name server queries the name server:\n   C:status<crlf>\n\
    \   C:EntityName:NameServer<crlf>\n   C:NameServer:ns1.registrarA.com<crlf>\n\
    \   C:.<crlf>\n   S:200 Command completed successfully<crlf>\n   S:ipaddress:198.42.1.11<crlf>\n\
    \   S:registrar:registrarA<crlf>\n   S:registrar transfer date:1999-09-22 10:27:00.0<crlf>\n\
    \   S:CreatedDate:1998-09-22 10:27:00.0<crlf>\n   S:CreatedBy:registrarA<crlf>\n\
    \   S:UpdatedDate:2002-09-22 10:27:00.0<crlf>\n   S:UpdatedBy:registrarA<crlf>\n\
    \   S:.<crlf>\n   A registrar queries a name server that was registered by another\n\
    \   registrar:\n   C:status<crlf>\n   C:EntityName:NameServer<crlf>\n   C:NameServer:ns1.registrarA.com<crlf>\n\
    \   C:.<crlf>\n   S:531 Authorization failed<crlf>\n   S:.<crlf>\n"
- title: 4.3.10 TRANSFER
  contents:
  - "4.3.10 TRANSFER\n   This command allows a registrar to request transfer of domain\
    \ name\n   sponsorship from a second registrar and to approve or reject transfer\n\
    \   requests initiated by other registrars. The request to transfer a\n   domain\
    \ name MUST contain the following data:\n   - The \"EntityName\" parameter set\
    \ to value \"Domain\".\n   - Fully qualified second level domain name in the \"\
    DomainName\"\n     parameter.\n   The identity of the requesting registrar is\
    \ derived from the current\n   active session. The identity of the current sponsoring\
    \ registrar (the\n   registrar who must approve or reject the transfer request)\
    \ is known\n   by the registry and does not need to be known by the requesting\n\
    \   registrar in advance of issuing the transfer request.\n   The System MUST\
    \ notify the potential losing registrar when a domain\n   transfer request has\
    \ been received using an out-of-band transport\n   mechanism such as electronic\
    \ mail and/or transaction reporting. The\n   losing registrar SHOULD then explicitly\
    \ approve or reject the\n   transfer. A request to approve or reject a transfer\
    \ request MUST\n   contain a single instance of the \"Approve\" parameter with\
    \ a value of\n   \"Yes\" to approve the transfer or a value of \"No\" to reject\
    \ the\n   transfer. A server implementation MAY provide a default approval or\n\
    \   rejection action to be taken if the losing registrar does not\n   explicitly\
    \ approve or reject the transfer request within a fixed\n   amount of time. The\
    \ criteria used by registrars to approve or deny\n   requested transfers are typically\
    \ based on business policies that are\n   beyond the scope of this document.\n\
    \   Approval of a transfer by the current sponsoring registrar results in\n  \
    \ a change of sponsorship to the original requesting registrar.\n   Approval attempts\
    \ by any other registrar MUST result in explicit\n   failure of the attempted\
    \ approval.  Rejection of the transfer by the\n   current sponsoring registrar\
    \ results in an end to the transfer\n   request with no change in sponsorship.\
    \ Rejection attempts by any\n   other registrar MUST result in explicit failure\
    \ of the attempted\n   rejection.\n   Name servers MUST be implicitly transferred\
    \ when their parent domain\n   name is transferred.\n   Authorized User: All registrars\
    \ MAY use the TRANSFER command to\n   request transfer of registration service\
    \ authority to the requesting\n   registrar. Only the current sponsoring registrar\
    \ of a domain name may\n   explicitly approve or reject a requested transfer.\
    \ The registry MAY\n   implicitly approve or reject requested transfers after\
    \ a fixed amount\n   of time.\n   Examples\n   A registrar requests transfer of\
    \ a domain name from another\n   registrar:\n   C:transfer<crlf>\n   C:EntityName:Domain<crlf>\n\
    \   C:DomainName:example.com<crlf>\n   C:.<crlf>\n   S:200 Command completed successfully<crlf>\n\
    \   S:.<crlf>\n   The original registrar approves the transfer request:\n   C:transfer<crlf>\n\
    \   C:-Approve:Yes<crlf>\n   C:EntityName:Domain<crlf>\n   C:DomainName:example.com<crlf>\n\
    \   C:.<crlf>\n   S:200 Command completed successfully<crlf>\n   S:.<crlf>\n"
- title: 5. Response Codes
  contents:
  - "5. Response Codes\n   RRP commands may return a variety of response codes to\
    \ signify normal\n   completion or error conditions. This section documents all\
    \ of the\n   defined RRP response codes.\n"
- title: 5.1 Response Code Summary
  contents:
  - "5.1 Response Code Summary\n   200 Command completed successfully\n   This is\
    \ the normal response for successful completion of most RRP\n   commands.\n  \
    \ 210 Domain name available\n   This is the normal response for successful completion\
    \ of an RRP CHECK\n   command for a domain name that is not currently registered.\n\
    \   211 Domain name not available\n   This is the normal response for successful\
    \ completion of an RRP CHECK\n   command for a domain name that is currently registered.\n\
    \   212 Name server available\n   This is the normal response for successful completion\
    \ of an RRP CHECK\n   command for a name server that is not currently registered.\n\
    \   213 Name server not available\n   This is the normal response for successful\
    \ completion of an RRP CHECK\n   command for a name server that is currently registered.\n\
    \   220 Command completed successfully. Server closing connection This is\n  \
    \ the normal response for successful completion of an RRP QUIT command.\n   It\
    \ may also be returned by other RRP commands if a transient\n   situation is noted\
    \ that requires closing the connection after\n   successfully completing the RRP\
    \ command.\n   420 Command failed due to server error. Server closing connection\
    \ A\n   transient server error has caused RRP command failure and session\n  \
    \ termination. A new session must be established before continued\n   processing\
    \ can be attempted.\n   421 Command failed due to server error. Client should\
    \ try again A\n   transient server error has caused RRP command failure. A subsequent\n\
    \   retry may produce successful results.\n   500 Invalid command name\n   A client-specified\
    \ RRP command name was not recognized as a valid RRP\n   command name.\n   501\
    \ Invalid command option\n   A client-specified RRP command parameter was not\
    \ recognized as a\n   valid RRP command parameter.\n   502 Invalid entity value\n\
    \   The \"value\" of an entity name-value pair is invalid. Command blocks\n  \
    \ that require an \"EntityName\" parameter also require a value that\n   specifies\
    \ the entity name, and the provided value is invalid.\n   503 Invalid attribute\
    \ name\n   A client-specified RRP command parameter was not recognized as a\n\
    \   valid RRP command parameter.\n   504 Missing required attribute\n   A parameter\
    \ required to execute the RRP command was not provided by\n   the client. The\
    \ command should be retried with all required\n   parameters specified.\n   505\
    \ Invalid attribute value syntax\n   A supplied parameter value is syntactically\
    \ incorrect. For example, a\n   year value digit such as \"5\" may be required\
    \ but the client provided\n   a string of characters such as \"five\".\n   506\
    \ Invalid option value\n   A client-specified value for an RRP command parameter\
    \ is out-of-\n   bounds or otherwise not within acceptable System limits.\n  \
    \ 507 Invalid command format\n   The specified command does not resemble a well-formed\
    \ RRP command.\n   The command should be retried using the proper command structure\
    \ and\n   syntax.\n   508 Missing required entity\n   An entity required for command\
    \ completion was not provided by the\n   client. For example, the CHECK command\
    \ requires specification of\n   either a \"Domain\" entity or a \"Nameserver\"\
    \ entity.\n   509 Missing command option\n   A command parameter that isn't really\
    \ optional (such as the registrar\n   ID in a SESSION command) was not provided\
    \ by the client. The command\n   should be retried with all needed parameters.\n\
    \   520 Server closing connection. Client should try opening new\n   connection;\
    \ <why>\n   A timeout event has been detected, and the client's session is being\n\
    \   ended.  The System SHOULD define timeout periods to begin a client\n   command,\
    \ complete a client command, and for the duration of an open\n   session. The\
    \ reason for the timeout MUST be provided at the end of\n   the response code\
    \ string.\n   521 Too many sessions open. Server closing connection\n   A System-defined\
    \ limit on the number of open connections has been\n   exceeded, and it is impossible\
    \ to establish a new session at the\n   moment. It may be possible to establish\
    \ a session by waiting for a\n   few moments or by closing existing unused sessions.\n\
    \   530 Authentication failed\n   The client-supplied registrar identifier or\
    \ password was not\n   recognized by the System. A subsequent retry with valid\
    \ values may\n   produce successful results. Repeated authorization failures MAY\n\
    \   result in termination of the TCP connection.\n   531 Authorization failed\n\
    \   Registrars may not view or alter data associated with either the\n   registry\
    \ or another registrar. This response code is typically\n   returned when a registrar\
    \ attempts to view or modify data belonging\n   to either the registry or another\
    \ registrar. A typical situation\n   includes doing a STATUS command for a domain\
    \ registered to another\n   registrar.\n   532 Domain names linked with name server\n\
    \   The name server is hosting active domains. This error occurs when a\n   registrar\
    \ is trying to delete a server that is the name server for\n   active domains.\
    \  The registry MUST not allow the registrar to delete\n   this server. All of\
    \ the domain names using this server MUST be\n   modified to use a different name\
    \ server before the name server can be\n   deleted.\n   533 Domain name has active\
    \ name servers\n   The domain name has active name servers. The registrar is trying\
    \ to\n   delete a domain name that is a parent domain of an active name\n   server,\
    \ i.e., a server that is hosting active domains. All of the\n   name servers within\
    \ the domain MUST be removed from service before\n   the domain can be deleted.\n\
    \   534 Domain name has not been flagged for transfer\n   The registrar is trying\
    \ to approve or reject a domain name transfer\n   for a domain name that is not\
    \ pending transfer.\n   535 Restricted IP address\n   IANA identifies certain\
    \ IP address ranges that are not valid for\n   normal use.  The registrar is trying\
    \ to use an IP address that is in\n   a restricted IP address range as identified\
    \ by IANA.\n   536 Domain already flagged for transfer\n   The registrar tried\
    \ to perform a transfer command for a domain name\n   that is awaiting approval\
    \ of an earlier transfer request.\n   540 Attribute value is not unique\n   A\
    \ supplied attribute value is not unique. This occurs when the\n   registrar is\
    \ adding a domain name that already exists in the\n   registry, a server that\
    \ already exists in the registry, or an IP\n   address that is already being used\
    \ by another server in the registry.\n   Another possibility occurs when performing\
    \ domain modifications and\n   the registrar is adding a server that is already\
    \ in the list of\n   servers for the domain name or setting a domain name to a\
    \ status to\n   which it is already set. The RRP STATUS command MAY be used to\n\
    \   determine current domain name status before attempting to change the\n   status.\
    \ When modifying or adding a name server, the IP address of the\n   name server\
    \ might not be unique. The registry MUST not allow IP\n   addresses to be used\
    \ by more than one server.\n   541 Invalid attribute value\n   A supplied parameter\
    \ value is invalid. Examples of invalid attribute\n   values include an invalid\
    \ IP address, an invalid domain name, an\n   invalid server name, or an invalid\
    \ renewal period.\n   542 Invalid old value for an attribute\n   A current attribute\
    \ value to be modified is invalid. The registrar is\n   trying to modify an attribute\
    \ of a server or a domain name that does\n   not exist in the registry.\n   543\
    \ Final or implicit attribute cannot be updated\n   The registrar is attempting\
    \ to modify an attribute that is only\n   modifiable by the registry. Registrars\
    \ can not modify final or\n   implicit attribute values.\n   544 Entity on hold\n\
    \   The attempted operation was rejected because the entity is on HOLD\n   status.\
    \ If the HOLD status was set by the registrar, the status can\n   be changed using\
    \ the MOD command and the requested command can be\n   retried. If the HOLD status\
    \ was set by the registry, the registrar\n   must contact the registry to change\
    \ the status before the command can\n   be successful.\n   545 Entity reference\
    \ not found\n   A required entity reference was not found. This occurs when the\n\
    \   registrar tries to add a new name server and the parent domain of the\n  \
    \ name server does not exist in the registry. It also occurs when the\n   user\
    \ is trying to add a new name server to a domain name when the\n   name server\
    \ does not exist in the registry.\n   546 Credit limit exceeded\n   The registrar's\
    \ credit limit has been exceeded. This is an\n   implementation specific error\
    \ that occurs when a potentially billable\n   operation, such as adding a domain\
    \ name, renewing a domain name, or\n   transferring a domain name, is attempted\
    \ and the registrar does not\n   have sufficient financial standing with the registry\
    \ to complete the\n   operation.\n   547 Invalid command sequence\n   RRP commands\
    \ are issued using a well-formed syntax that requires\n   entry of command structures\
    \ in particular sequences. This response\n   code indicates that an ill-formed\
    \ command was received and rejected.\n   548 Domain is not up for renewal\n  \
    \ A RENEW command was attempted during a period in which the domain can\n   not\
    \ be renewed. Implementations MAY limit renewal periods to\n   particular time\
    \ frames, such as within 90 days of the domain's\n   expiration. This response\
    \ indicates that the RENEW command was\n   received outside of the System-defined\
    \ domain renewal period.\n   549 Command failed\n   A System error prevented successful\
    \ completion of the requested RRP\n   command.  Retrying the command might produce\
    \ success, but a repeated\n   failure indicates a System error condition.\n  \
    \ 550 Parent domain not registered\n   The parent domain of a name server being\
    \ registered is not\n   registered. This occurs when the registrar tries to add\
    \ a new name\n   server and the parent domain for the server does not exist in\
    \ the\n   registry.\n   551 Parent domain status does not allow for operation\n\
    \   The status of the parent domain does not allow the requested\n   operation.\
    \ This occurs when a registrar tries to modify a server\n   whose parent domain\
    \ is flagged as LOCK or HOLD in the registry.\n   552 Domain status does not allow\
    \ for operation\n   The status of the domain does not allow the requested operation.\
    \ This\n   occurs when a registrar tries to modify or delete a domain that is\n\
    \   flagged as LOCK or HOLD in the registry.\n   553 Operation not allowed. Domain\
    \ pending transfer\n   The status of the domain does not allow the requested operation.\
    \ The\n   registrar is attempting to delete a domain that is pending approval\n\
    \   or denial of a transfer request.\n   554 Domain already registered\n   A registrar\
    \ tried to register a domain name that has already been\n   registered by the\
    \ same registrar.\n   555 Domain already renewed\n   A registrar tried to renew\
    \ a domain using the same parameters as\n   specified for an earlier, successful\
    \ renewal. This will commonly\n   occur when executing the same RENEW command\
    \ more than once.\n   556 Maximum registration period exceeded\n   A registrar\
    \ tried to renew a domain registration, and the resulting\n   new registration\
    \ period exceeds the System-defined maximum\n   registration period. If there\
    \ is renewal time available with the\n   System-defined maximum registration period\
    \ it may be possible to\n   retry the RENEW command with specified renewal period\
    \ parameters.\n"
- title: 5.2 Command-Response Correspondence
  contents:
  - "5.2 Command-Response Correspondence\n   The session between the client and the\
    \ server is intended to be an\n   alternating dialogue. Each command issued by\
    \ a client MUST be acted\n   upon by the server, which MUST return a response\
    \ code to document the\n   success or failure of command execution. \"Success\"\
    \ means that the\n   command completed normal execution without error.  \"Failure\"\
    \ means\n   that the System did not complete the command as requested. Failure\n\
    \   may be due to either syntax, semantic, data, or System errors.\n   A complete\
    \ list of response codes for each RRP command is listed\n   below.\n   Command:\
    \ ADD\n   Success: 200, 220\n   Failure: 420, 421, 500, 502, 503, 504, 505, 507,\
    \ 508, 520, 531, 535,\n   540, 541, 545, 546, 547, 549, 550, 554\n   Command:\
    \ CHECK\n   Success: 210, 211, 212, 213\n   Failure: 220, 420, 421, 500, 502,\
    \ 503, 504, 505, 507, 508, 520, 541,\n   547, 549\n   Command: DEL\n   Success:\
    \ 200, 220\n   Failure: 420, 421, 500, 502, 503, 504, 505, 507, 508, 520, 531,\
    \ 532,\n   533, 541, 544, 545, 547, 549, 551, 552, 553\n   Command: DESCRIBE\n\
    \   Success: 200, 220\n   Failure: 420, 421, 500, 501, 506, 507, 509, 520, 547,\
    \ 549\n   Command: MOD\n   Success: 200, 220\n   Failure: 420, 421, 500, 502,\
    \ 503, 504, 505, 507, 508, 520, 531, 535,\n   540, 541, 542, 543, 544, 545, 547,\
    \ 549, 550, 551, 552, 553\n   Command: QUIT\n   Success: 220\n   Failure: 420,\
    \ 421, 500, 507, 520, 547, 549\n   Command: RENEW\n   Success: 200, 220\n   Failure:\
    \ 420, 421, 500, 502, 503, 504, 505, 507, 508, 520, 531, 541,\n   545, 546, 547,\
    \ 548, 549, 552, 553, 555, 556\n   Command: SESSION\n   Success: 200, 220\n  \
    \ Failure: 420, 421, 500, 501, 506, 507, 508, 509, 520, 521, 530, 531,\n   547,\
    \ 549\n   Command: STATUS\n   Success: 200, 220\n   Failure: 420, 421, 500, 501,\
    \ 502, 503, 504, 505, 506, 507, 508, 520,\n   531, 541, 545, 547, 549\n   Command:\
    \ TRANSFER\n   Success: 200, 220\n   Failure: 420, 421, 500, 501, 502, 503, 504,\
    \ 505, 506, 507, 508, 520,\n   531, 534, 536, 541, 544, 545, 546, 547, 549, 552,\
    \ 553\n"
- title: 6. Domain Status Codes
  contents:
  - "6. Domain Status Codes\n   The status of a domain can be viewed using the RRP\
    \ STATUS command and\n   modified using the RRP MOD command. Both the registry\
    \ and the\n   sponsoring registrar MAY view and change the status of a domain.\
    \ The\n   criteria for status changes are highly dependent on registry and\n \
    \  registrar business models and are thus beyond the scope of this\n   specification.\n\
    \   The domain's status SHOULD have a direct bearing on whether or not\n   the\
    \ domain appears in the appropriate TLD zone file and whether or\n   not the domain\
    \ can be modified. A domain can have more than one\n   assigned status, e.g.,\
    \ REGISTRAR-HOLD and REGISTRAR-LOCK. If a domain\n   is in ACTIVE status, then\
    \ the domain name can only be in this status.\n   When a registrar sets a domain\
    \ name to REGISTRAR-LOCK, the registry\n   MUST automatically remove the ACTIVE\
    \ status. When the registrar\n   removes the REGISTRAR-LOCK and other domain statuses,\
    \ the registry\n   MUST automatically set the domain name status to ACTIVE.\n"
- title: 6.1 Domain Status Code Description
  contents:
  - "6.1 Domain Status Code Description\n   ACTIVE: This is the default status of\
    \ a domain at registration time.\n   The registry sets the domain to this status.\
    \ The domain is modifiable\n   by the registrar. The domain can be renewed. The\
    \ domain SHALL be\n   included in the zone file when in this status if the domain\
    \ has at\n   least one associated name server.\n   REGISTRY-LOCK: The registry\
    \ sets the domain to this status. The\n   domain cannot be modified or deleted\
    \ by the registrar. The registry\n   MUST remove the REGISTRY-LOCK status for\
    \ the registrar to modify the\n   domain. The domain can be renewed. The domain\
    \ SHALL be included in\n   the zone file when in this status if the domain has\
    \ at least one\n   associated name server.\n   REGISTRY-HOLD: The registry sets\
    \ the domain to this status. The\n   domain cannot be modified or deleted by the\
    \ registrar. The registry\n   MUST remove the REGISTRY-HOLD status for the registrar\
    \ to modify the\n   domain. The domain can be renewed. The domain SHALL NOT be\
    \ included\n   in the zone file when in this status.\n   REGISTRAR-HOLD: The registrar\
    \ of the domain sets the domain to this\n   status. The domain can not be modified\
    \ or deleted when in this\n   status. The registrar MUST remove REGISTRAR-HOLD\
    \ status to modify the\n   domain. The domain can be renewed. The domain SHALL\
    \ NOT be included\n   in the zone file when in this status.\n   REGISTRAR-LOCK:\
    \ The registrar of the domain sets the domain to this\n   status. The domain cannot\
    \ be modified or deleted when in this status.\n   The registrar MUST remove REGISTRAR-LOCK\
    \ status to modify the domain.\n   The domain can be renewed. The domain SHALL\
    \ be included in the zone\n   file when in this status.\n   REGISTRY-DELETE-NOTIFY:\
    \ A domain is set on this status if it has\n   expired and has child name servers\
    \ that are hosting other domains.\n   Only the registry may set this status. The\
    \ domain SHALL be included\n   in the zone file when in this status if the domain\
    \ has at least one\n   associated name server.\n"
- title: 7. Formal Syntax
  contents:
  - "7. Formal Syntax\n   The following syntax specification uses the augmented Backus-Naur\n\
    \   Form (BNF) as described in [ABNF].\n"
- title: ; ABNF specification for Registry Registrar Protocol (RRP) v1.1.0
  contents:
  - '; ABNF specification for Registry Registrar Protocol (RRP) v1.1.0

    '
- title: ; Note that character string literals are case insensitive.
  contents:
  - '; Note that character string literals are case insensitive.

    '
- title: ; Lexical tokens
  contents:
  - '; Lexical tokens

    '
- title: space = %x20 ; " "
  contents:
  - 'space = %x20 ; " "

    '
- title: dot = %x2E ; "."
  contents:
  - 'dot = %x2E ; "."

    '
- title: dash = %x2D ; "-"
  contents:
  - 'dash = %x2D ; "-"

    '
- title: underscore = %x5F ; "_"
  contents:
  - 'underscore = %x5F ; "_"

    '
- title: colon = %x3A ; ":"
  contents:
  - 'colon = %x3A ; ":"

    '
- title: cr = %x0D ; ASCII carriage return
  contents:
  - 'cr = %x0D ; ASCII carriage return

    '
- title: lf = %x0A ; ASCII linefeed
  contents:
  - 'lf = %x0A ; ASCII linefeed

    '
- title: crlf = cr lf
  contents:
  - 'crlf = cr lf

    '
- title: alpha = %x41-5A / %x61-7A ; A-Z / a-z
  contents:
  - 'alpha = %x41-5A / %x61-7A ; A-Z / a-z

    '
- title: digit = %x30-39 ; 0-9
  contents:
  - 'digit = %x30-39 ; 0-9

    '
- title: dns-char = alpha / digit / dash
  contents:
  - 'dns-char = alpha / digit / dash

    '
- title: id-char = alpha / digit / underscore / dash
  contents:
  - 'id-char = alpha / digit / underscore / dash

    '
- title: id-prefix = alpha / digit
  contents:
  - 'id-prefix = alpha / digit

    '
- title: id-word = id-prefix *id-char
  contents:
  - 'id-word = id-prefix *id-char

    '
- title: printable-char = %x20-7E ; ASCII " " - "~"
  contents:
  - 'printable-char = %x20-7E ; ASCII " " - "~"

    '
- title: ; Start of basic grammar.
  contents:
  - '; Start of basic grammar.

    '
- title: year = 4digit
  contents:
  - 'year = 4digit

    '
- title: month = 2digit
  contents:
  - 'month = 2digit

    '
- title: day = 2digit
  contents:
  - 'day = 2digit

    '
- title: ymd = year dash month dash day
  contents:
  - 'ymd = year dash month dash day

    '
- title: hour = 2digit
  contents:
  - 'hour = 2digit

    '
- title: minute = 2digit
  contents:
  - 'minute = 2digit

    '
- title: second = 2digit
  contents:
  - 'second = 2digit

    '
- title: split-second = 1digit
  contents:
  - 'split-second = 1digit

    '
- title: hms = hour colon minute colon second dot split-second
  contents:
  - 'hms = hour colon minute colon second dot split-second

    '
- title: time-stamp = ymd space hms
  contents:
  - 'time-stamp = ymd space hms

    '
- title: ip-address = 1*3digit dot 1*3digit dot 1*3digit dot 1*3digit
  contents:
  - 'ip-address = 1*3digit dot 1*3digit dot 1*3digit dot 1*3digit

    '
- title: password = 4*16printable-char
  contents:
  - 'password = 4*16printable-char

    '
- title: option-name = 1*128id-word
  contents:
  - 'option-name = 1*128id-word

    '
- title: option-tag = dash option-name
  contents:
  - 'option-tag = dash option-name

    '
- title: option-value = 1*128id-word
  contents:
  - 'option-value = 1*128id-word

    '
- title: attribute-name = 1*128id-word
  contents:
  - 'attribute-name = 1*128id-word

    '
- title: attribute-value = 1*128printable-char
  contents:
  - 'attribute-value = 1*128printable-char

    '
- title: attribute-line = attribute-name colon attribute-value crlf
  contents:
  - 'attribute-line = attribute-name colon attribute-value crlf

    '
- title: response = 3digit space 1*printable-char crlf
  contents:
  - 'response = 3digit space 1*printable-char crlf

    '
- title: version-number = "RRP" space 1*digit dot 1*digit dot 1*digit
  contents:
  - 'version-number = "RRP" space 1*digit dot 1*digit dot 1*digit

    '
- title: label = id-prefix [*61dns-char id-prefix]
  contents:
  - 'label = id-prefix [*61dns-char id-prefix]

    '
- title: sldn = label dot label
  contents:
  - 'sldn = label dot label

    '
- title: servername = *(label dot) sldn
  contents:
  - 'servername = *(label dot) sldn

    '
- title: period = %x31-39 / (%x31-39 %x30-39) ; "1" - "9" or "10" - "99"
  contents:
  - 'period = %x31-39 / (%x31-39 %x30-39) ; "1" - "9" or "10" - "99"

    '
- title: period-option = dash "Period" colon period crlf
  contents:
  - 'period-option = dash "Period" colon period crlf

    '
- title: yesno = "Yes" / "No"
  contents:
  - 'yesno = "Yes" / "No"

    '
- title: domainstatus = "Active" / "Registry-Lock" / "Registry-Hold" /
  contents:
  - "domainstatus = \"Active\" / \"Registry-Lock\" / \"Registry-Hold\" /\n       \
    \        \"Registrar-Lock\" / \"Registrar-Hold\" /\n               \"Registry-Delete-Notify\"\
    \n"
- title: ; RRP commands and responses.
  contents:
  - '; RRP commands and responses.

    '
- title: rrp = add / check / delete / describe / mod / quit / renew /
  contents:
  - "rrp = add / check / delete / describe / mod / quit / renew /\n      session /\
    \ status / transfer\n"
- title: add = add-request add-response
  contents:
  - 'add = add-request add-response

    '
- title: check = check-request check-response
  contents:
  - 'check = check-request check-response

    '
- title: delete = del-request del-response
  contents:
  - 'delete = del-request del-response

    '
- title: describe = describe-request describe-response
  contents:
  - 'describe = describe-request describe-response

    '
- title: mod = mod-request mod-response
  contents:
  - 'mod = mod-request mod-response

    '
- title: quit = quit-request quit-response
  contents:
  - 'quit = quit-request quit-response

    '
- title: renew = renew-request renew-response
  contents:
  - 'renew = renew-request renew-response

    '
- title: session = session-request session-response
  contents:
  - 'session = session-request session-response

    '
- title: status = status-request status-response
  contents:
  - 'status = status-request status-response

    '
- title: transfer = transfer-request transfer-response
  contents:
  - 'transfer = transfer-request transfer-response

    '
- title: ; ADD command.
  contents:
  - '; ADD command.

    '
- title: add-request = add-domain-request / add-nameserver-request
  contents:
  - 'add-request = add-domain-request / add-nameserver-request

    '
- title: add-response = add-domain-response / add-nameserver-response
  contents:
  - 'add-response = add-domain-response / add-nameserver-response

    '
- title: add-domain-request = "add" crlf
  contents:
  - "add-domain-request = \"add\" crlf\n \"EntityName\" colon \"Domain\" crlf\n \"\
    DomainName\" colon sldn crlf\n [period-option]\n 0*13(\"NameServer\" colon servername\
    \ crlf)\n dot crlf\n"
- title: add-nameserver-request = "add" crlf
  contents:
  - "add-nameserver-request = \"add\" crlf\n \"EntityName\" colon \"NameServer\" crlf\n\
    \ \"NameServer\" colon servername crlf\n 1*(\"IPAddress\" colon ip-address crlf)\n\
    \ dot crlf\n"
- title: add-domain-response = response
  contents:
  - "add-domain-response = response\n \"RegistrationExpirationDate\" colon time-stamp\
    \ crlf\n \"status\" colon domainstatus crlf\n dot crlf\n"
- title: add-nameserver-response = response
  contents:
  - "add-nameserver-response = response\n dot crlf\n"
- title: ; CHECK command.
  contents:
  - '; CHECK command.

    '
- title: check-request = check-domain-request / check-nameserver-request
  contents:
  - 'check-request = check-domain-request / check-nameserver-request

    '
- title: check-response = check-domain-response / check-nameserver-response
  contents:
  - 'check-response = check-domain-response / check-nameserver-response

    '
- title: check-domain-request = "check" crlf
  contents:
  - "check-domain-request = \"check\" crlf\n \"EntityName\" colon \"Domain\" crlf\n\
    \ \"DomainName\" colon sldn crlf\n dot crlf\n"
- title: check-nameserver-request = "check" crlf
  contents:
  - "check-nameserver-request = \"check\" crlf\n \"EntityName\" colon \"NameServer\"\
    \ crlf\n \"NameServer\" colon servername crlf\n dot crlf\n"
- title: check-domain-response = response
  contents:
  - "check-domain-response = response\n dot crlf\n"
- title: check-nameserver-response = available-check-nameserver-response /
  contents:
  - "check-nameserver-response = available-check-nameserver-response /\n         \
    \                   notavailable-check-nameserver-response\n"
- title: available-check-nameserver-response = response
  contents:
  - "available-check-nameserver-response = response\n dot crlf\n"
- title: notavailable-check-nameserver-response = response
  contents:
  - "notavailable-check-nameserver-response = response\n 1*(\"IPAddress\" colon ip-address\
    \ crlf)\n dot crlf\n"
- title: ; DEL command.
  contents:
  - '; DEL command.

    '
- title: del-request = del-domain-request / del-nameserver-request
  contents:
  - 'del-request = del-domain-request / del-nameserver-request

    '
- title: del-response = response
  contents:
  - "del-response = response\n dot crlf\n"
- title: del-domain-request = "del" crlf
  contents:
  - "del-domain-request = \"del\" crlf\n \"EntityName\" colon \"Domain\" crlf\n \"\
    DomainName\" colon sldn crlf\n dot crlf\n"
- title: del-nameserver-request = "del" crlf
  contents:
  - "del-nameserver-request = \"del\" crlf\n \"EntityName\" colon \"NameServer\" crlf\n\
    \ \"NameServer\" colon servername crlf\n dot crlf\n"
- title: ; DESCRIBE command.
  contents:
  - '; DESCRIBE command.

    '
- title: describe-request = "describe" crlf
  contents:
  - "describe-request = \"describe\" crlf\n [target-option]\n *(option-tag colon option-value\
    \ crlf)\n dot crlf\n"
- title: describe-response = response
  contents:
  - "describe-response = response\n \"Protocol\" colon version-number crlf\n *attribute-line\n\
    \ dot crlf\n"
- title: target-option = dash "Target" colon "Protocol" crlf
  contents:
  - 'target-option = dash "Target" colon "Protocol" crlf

    '
- title: ; MOD command.
  contents:
  - '; MOD command.

    '
- title: mod-request = mod-domain-request / mod-nameserver-request
  contents:
  - 'mod-request = mod-domain-request / mod-nameserver-request

    '
- title: mod-response = response
  contents:
  - "mod-response = response\n *attribute-line\n dot crlf\n"
- title: mod-domain-request = "mod" crlf
  contents:
  - "mod-domain-request = \"mod\" crlf\n \"EntityName\" colon \"Domain\" crlf\n \"\
    DomainName\" colon sldn crlf\n *(add-attribute-value-line /\n remove-attribute-value-line\
    \ /\n replace-attribute-value-line)\n dot crlf\n"
- title: mod-nameserver-request = "mod" crlf
  contents:
  - "mod-nameserver-request = \"mod\" crlf\n \"EntityName\" colon \"NameServer\" crlf\n\
    \ \"NameServer\" colon servername crlf\n [\"NewNameServer\" colon attribute-value\
    \ crlf]\n *(add-attribute-value-line /\n remove-attribute-value-line /\n replace-attribute-value-line)\n\
    \ dot crlf\n"
- title: add-attribute-value-line =
  contents:
  - "add-attribute-value-line =\n attribute-name colon new-attribute-value\n"
- title: remove-attribute-value-line =
  contents:
  - "remove-attribute-value-line =\n attribute-name colon old-attribute-value \"=\"\
    \n"
- title: replace-attribute-value-line =
  contents:
  - "replace-attribute-value-line =\n attribute-name colon old-attribute-value \"\
    =\"\n new-attribute-value\n"
- title: old-attribute-value = attribute-value
  contents:
  - 'old-attribute-value = attribute-value

    '
- title: new-attribute-value = attribute-value
  contents:
  - 'new-attribute-value = attribute-value

    '
- title: ; QUIT command.
  contents:
  - '; QUIT command.

    '
- title: quit-request = "quit" crlf
  contents:
  - "quit-request = \"quit\" crlf\n dot crlf\n"
- title: quit-response = response
  contents:
  - "quit-response = response\n dot crlf\n"
- title: ; RENEW command.
  contents:
  - '; RENEW command.

    '
- title: renew-request = "renew" crlf
  contents:
  - "renew-request = \"renew\" crlf\n \"EntityName\" colon \"Domain\" crlf\n \"DomainName\"\
    \ colon sldn crlf\n [renew-period-option]\n dot crlf\n"
- title: expiration-year-option = dash "CurrentExpirationYear" colon year crlf
  contents:
  - 'expiration-year-option = dash "CurrentExpirationYear" colon year crlf

    '
- title: renew-period-option = period-option expiration-year-option /
  contents:
  - "renew-period-option = period-option expiration-year-option /\n              \
    \        expiration-year-option period-option\n"
- title: renew-response = response
  contents:
  - "renew-response = response\n \"RegistrationExpirationDate\" colon time-stamp crlf\n\
    \ dot crlf\n"
- title: ; SESSION command.
  contents:
  - '; SESSION command.

    '
- title: session-request = "session" crlf
  contents:
  - "session-request = \"session\" crlf\n registrar-id-option\n registrar-password-option\n\
    \ [registrar-newpassword-option]\n dot crlf\n"
- title: session-response = response
  contents:
  - "session-response = response\n dot crlf\n"
- title: registrar-id-option = dash "Id" colon option-value crlf
  contents:
  - 'registrar-id-option = dash "Id" colon option-value crlf

    '
- title: registrar-password-option =
  contents:
  - "registrar-password-option =\n dash \"Password\" colon password crlf\n"
- title: registrar-newpassword-option =
  contents:
  - "registrar-newpassword-option =\n dash \"NewPassword\" colon password crlf\n"
- title: ; STATUS command.
  contents:
  - '; STATUS command.

    '
- title: status-request = status-domain-request /
  contents:
  - "status-request = status-domain-request /\n                 status-nameserver-request\n"
- title: status-response = response
  contents:
  - "status-response = response\n *attribute-line\n dot crlf\n"
- title: status-domain-request = "status" crlf
  contents:
  - "status-domain-request = \"status\" crlf\n \"EntityName\" colon \"Domain\" crlf\n\
    \ \"DomainName\" colon sldn crlf\n dot crlf\n"
- title: status-nameserver-request = "status" crlf
  contents:
  - "status-nameserver-request = \"status\" crlf\n \"EntityName\" colon \"NameServer\"\
    \ crlf\n \"NameServer\" colon servername crlf\n dot crlf\n"
- title: ; TRANSFER command.
  contents:
  - '; TRANSFER command.

    '
- title: transfer-request = "transfer" crlf
  contents:
  - "transfer-request = \"transfer\" crlf\n [approve-option]\n \"EntityName\" colon\
    \ \"Domain\" crlf\n \"DomainName\" colon sldn crlf\n dot crlf\n"
- title: transfer-response = response
  contents:
  - "transfer-response = response\n \"RegistrationExpirationDate\" colon time-stamp\
    \ crlf\n dot crlf\n"
- title: approve-option = dash "Approve" colon yesno crlf
  contents:
  - 'approve-option = dash "Approve" colon yesno crlf

    '
- title: ; End of grammar.
  contents:
  - '; End of grammar.

    '
- title: 8. Internationalization
  contents:
  - "8. Internationalization\n   RRP is defined using 7-bit US-ASCII characters. Other\
    \ character sets\n   and character codes are not currently supported.\n"
- title: 9. Known Issues
  contents:
  - "9. Known Issues\n   RRP was not designed to provide bulk data query features.\
    \ The primary\n   goal of the original protocol designers was to provide a fast,\
    \ light\n   weight transactional protocol that could be implemented with minimal\n\
    \   need for database queries that would take a \"long\" time to complete\n  \
    \ or that would return a \"large\" amount of data. Implementers SHOULD\n   consider\
    \ developing offline reporting features to provide bulk data\n   for registrar\
    \ reporting in a fashion suitable for the given\n   registry-registrar operating\
    \ environment.\n   This version of RRP does contain a few limitations noted over\
    \ the\n   course of several months of operational experience with live domain\n\
    \   name registrars.  Later versions of this protocol or its successors\n   should\
    \ strive to resolve or address each of the following issues:\n   The DESCRIBE\
    \ command should return information describing System-\n   defined default implementation\
    \ values.\n   Use of the RENEW command without the \"CurrentExpirationYear\" and\n\
    \   \"Period\" parameters does not provide idempotency. Repeated execution\n \
    \  of a RENEW command without these parameters can result in multiple\n   successful\
    \ RENEW commands, which may not be the desired action if a\n   registrar is retrying\
    \ a RENEW command due to network connectivity\n   problems.\n   Time stamps returned\
    \ by RRP do not include time zone identifiers and\n   SHOULD be interpreted as\
    \ local registry time.\n   The protocol does not provide features for a registrar\
    \ to become\n   aware of domain transfer requests and responses. Systems must\
    \ rely on\n   means outside of the protocol, such as electronic mail and/or\n\
    \   registry-provided reports, to inform registrars of transfer requests\n   and\
    \ responses.\n   The protocol does not provide features for a registrar to determine\n\
    \   all of the domains served by a name server. Systems must provide this\n  \
    \ information using a method outside of the protocol, such as through\n   periodic\
    \ extracts from a System database.\n   The protocol does not provide features\
    \ to manage lame delegation of\n   name servers. Any registrar may \"use\" name\
    \ servers registered by\n   another registrar.  When a registrar tries to delete\
    \ a domain or name\n   server it is quite possible that name servers in the domain\
    \ to be\n   deleted or the name server to be deleted will be associated with\n\
    \   other live domains, precluding immediate deletion.  Systems must rely\n  \
    \ on means outside of the protocol to manage lame delegation of name\n   servers.\n\
    \   The use of \"=\" within the MOD command to indicate a value to be\n   removed\
    \ is somewhat confusing. A more explicit means of identifying\n   old and new\
    \ attribute values within the protocol syntax could make\n   this feature more\
    \ obvious.\n   The CHECK command also returns name server IP addresses when\n\
    \   returning positive confirmation of the registration of a name server.\n  \
    \ This extra information may be useful, but it is inconsistent with the\n   limited\
    \ function of the command.  The command should return a\n   positive or negative\
    \ response and nothing more.\n   The formal protocol syntax described in this\
    \ document requires a\n   specific order for the elements of a command entity\
    \ block and command\n   options. The NSI Registry's server-side implementation\
    \ of the\n   protocol provides the additional flexibility of allowing order\n\
    \   independent specification of options and entity block elements.\n   Client-side\
    \ implementers are strongly urged to observe the order of\n   command elements\
    \ as specified here to ensure compliance if the more\n   restricted form is enforced\
    \ in the future.\n   RRP does not return time stamps or transaction identifiers\
    \ to track\n   transactions. The NSI Registry provides registrars with daily and\n\
    \   weekly reports that include time stamps in local registry time to\n   document\
    \ and synchronize data on a per-registrar basis.\n"
- title: 10. Security Considerations
  contents:
  - "10. Security Considerations\n   Misuse of the Registry Registrar Protocol can\
    \ have catastrophic\n   operational consequences for registrants, registrars,\
    \ and registries.\n   As such, all registrars must be authenticated prior to all\n\
    \   interactions with the registry.  In addition, all data exchanged\n   between\
    \ the registrar and the registry must be protected to avoid\n   unintended disclosure\
    \ of information.\n"
- title: 11. IANA Considerations
  contents:
  - "11. IANA Considerations\n   IANA assigned TCP port 648 for RRP use in November\
    \ 1998. No other\n   action is required of IANA to support operation of this protocol.\n\
    \   IANA has reserved certain IPv4 address ranges as described in\n   [ALLOCATION].\
    \  Implementers MUST ensure that name server IP addresses\n   do not fall into\
    \ one of the reserved address ranges to avoid\n   operational DNS errors.\n"
- title: 12. References
  contents:
  - "12. References\n   [ABNF]       Crocker, D. (Editor) and P. Overell, \"Augmented\
    \ BNF for\n                Syntax Specifications: ABNF\", RFC 2234, November 1997.\n\
    \   [ALLOCATION] Hubbard, K., Kosters, M., Conrad, D., Karrenberg, D. and\n  \
    \              J. Postel, \"Internet Registry IP Allocation Guidelines\",\n  \
    \              BCP 12, RFC 2050, November 1996.\n   [MUSTSHOULD] Bradner, S.,\
    \ \"Key Words for Use in RFCs to Indicate\n                Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [SSL]        A. Frier, P. Karlton, and P.\
    \ Kocher, \"The SSL 3.0\n                Protocol\", Netscape Communications Corp.,\
    \ November 18,\n                1996.\n   [TLS]        Dierks T. and C. Allen,\
    \ \"The TLS Protocol Version 1.0\",\n                RFC 2246, January 1999.\n"
- title: 13. Acknowledgments
  contents:
  - "13. Acknowledgments\n   Many people have contributed significantly to this document\
    \ and the\n   protocol it describes. Brad McMillen and Neeran Saraf deserve special\n\
    \   mention as co-authors of an earlier internal protocol specification.\n   Other\
    \ content contributors to the earlier internal specification\n   include Aristotle\
    \ Balogh, Chris Bason, Mark Kosters, Jasdip Singh,\n   and Yibing Wu. Finally,\
    \ significant contributors to the review of\n   this document include Steve Mahlstedt\
    \ and Chris Smith.\n"
- title: 14. Authors' Addresses
  contents:
  - "14. Authors' Addresses\n   Scott Hollenbeck\n   Network Solutions, Inc. Registry\n\
    \   505 Huntmar Park Dr.\n   Herndon, VA 20170\n   USA\n   EMail: shollenb@netsol.com\n\
    \   Manoj Srivastava\n   Network Solutions, Inc. Registry\n   505 Huntmar Park\
    \ Dr.\n   Herndon, VA 20170\n   USA\n   EMail: manojs@netsol.com\n"
- title: 15.  Full Copyright Statement
  contents:
  - "15.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
