Abstract This document describes an algorithm for challenge response authentication developed by the Initiative for Open Authentication (OATH).
The specified mechanisms leverage the HMAC based One Time Password (HOTP) algorithm and offer one way and mutual authentication, and electronic signature capabilities.
The Initiative for Open Authentication (OATH)
[OATH] has identified several use cases and scenarios that require an asynchronous variant to accommodate users who do not want to maintain a synchronized authentication system.
A commonly accepted method for this is to use a challenge response scheme.
Such a challenge response mode of authentication is widely adopted in the industry.
Several vendors already offer software applications and hardware devices implementing challenge response   but each of those uses vendor specific proprietary algorithms.
For the benefits of users there is a need for a standardized challenge response algorithm that allows multi sourcing of token purchases and validation systems to facilitate the democratization of strong authentication.
Additionally, this specification describes the means to create symmetric key based short 'electronic signatures'.
Such signatures are variants of challenge response mode where the data to be signed becomes the challenge or is used to derive the challenge.
Note that the term 'electronic signature' and 'signature' are used interchangeably in this document.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
This section presents the main requirements that drove this algorithm design.
A lot of emphasis was placed on flexibility and usability, under the constraints and specificity of the HMAC based One Time Password (HOTP) algorithm [RFC4226] and hardware token capabilities.
The algorithm MUST support challenge response based authentication.
The algorithm MUST be capable of supporting symmetric key based short electronic signatures.
Essentially, this is a variation of challenge response where the challenge is derived from the data that needs to be signed.
The algorithm MUST be capable of supporting server authentication, whereby the user can verify that he/she is talking to a trusted server.
The algorithm SHOULD use HOTP [RFC4226] as a key building block.
The length and format of the input challenge SHOULD be configurable.
The output length and format of the generated response SHOULD be configurable.
The challenge MAY be generated with integrity checking (e.g., parity bits).
This will allow tokens with pin pads to perform simple error checking when the user enters the challenge value into a token.
There MUST be a unique secret (key) for each token/soft token that is shared between the token and the authentication server.
The keys MUST be randomly generated or derived using a key derivation algorithm.
The algorithm MAY enable additional data attributes such as a timestamp or session information to be included in the computation.
These data inputs MAY be used individually or all together.
OCRA Background OATH introduced the HOTP algorithm as a first open, freely available building block towards strengthening authentication for end users in a variety of applications.
One time passwords are very efficient at solving specific security issues thanks to the dynamic nature of OTP computations.
After carefully analyzing different use cases, OATH came to the conclusion that providing for extensions to the HOTP algorithms was important.
A very natural extension is to introduce a challenge mode for computing HOTP values based on random questions.
Equally beneficial is being able to perform mutual authentication between two parties, or short signature computation for authenticating transaction to improve the security of e commerce applications.
The HOTP algorithm, as defined in [RFC4226], is based on an increasing counter value and a static symmetric key known only to the prover and verifier parties.
Truncate(HMAC SHA1(K,C)) where Truncate represents the function that converts an HMAC SHA 1 value into an HOTP value.
We refer the reader to [RFC4226] for the full description and further details on the rationale and security analysis of HOTP.
The present document describes the different variants based on similar constructions as HOTP.
The OATH Challenge Response Algorithm (OCRA) is a generalization of HOTP with variable data inputs not solely based on an incremented counter and secret key values.
The definition of OCRA requires a cryptographic function, a key K and a set of DataInput parameters.
This section first formally introduces OCRA and then introduces the definitions and default values recommended for all parameters.
In a nutshell, OCRA   CryptoFunction(K, DataInput)
where:  K: a shared secret key known to both parties  DataInput: a structure that contains the concatenation of the various input data values defined in details in section 5.1  CryptoFunction: this is the function performing the OCRA computation from the secret key K and the DataInput material; CryptoFunction is described in details in Section 5.2 5.1.
This structure is the concatenation over byte array of the OCRASuite value as defined in section 6 with the different parameters used in the computation, save for the secret key K. DataInput   {OCRASuite   00
P   S   T} where:  OCRASuite is a value representing the suite of operations to compute an OCRA response  00 is a byte value used as a separator
C is an unsigned 8 byte counter value processed high order bit first, and MUST be synchronized between all parties; It loops around from "{Hex}0" to "{Hex}FFFFFFFFFFFFFFFF" and then starts over at "{Hex}0".
Note that 'C' is optional for all OCRA modes described in this document.
Q, mandatory, is a 128 byte list of (concatenated) challenge question(s) generated by the parties; if Q is less than 128 bytes, then it should be padded with zeroes to the right  P is a hash (SHA 1 [RFC3174], SHA 256 and SHA 512
[SHA2] are supported) value of PIN/password that is known to all parties during the execution of the algorithm; the length of P will depend on the hash function that is used  S is a UTF 8 [RFC3629] encoded string of length up to 512 bytes that contains information about the current session; the length of S is defined in the OCRASuite string
T is an 8 byte unsigned integer in big endian order (i.e., network byte order) representing the number of time steps (seconds, minutes, hours, or days depending on the specified granularity) since midnight UTC of January 1, 1970 [UT].
More specifically, if the OCRA computation includes a timestamp T, you should first convert your current local time to UTC time; you can then derive the UTC time in the proper format (i.e., seconds, minutes, hours, or days elapsed from epoch time); the size of the time step is specified in the OCRASuite string as described in Section 6.3
When computing a response, the concatenation order is always the following:
C   OTHER PARTY GENERATED CHALLENGE QUESTION
If a value is empty (i.e., a certain input is not used in the computation)
then the value is simply not represented in the string.
The counter on the token or client MUST be incremented every time a new computation is requested by the user.
The server's counter value MUST only be incremented after a successful OCRA authentication.
The default CryptoFunction is HOTP SHA1 6,
i.e., the default mode of computation for OCRA is HOTP with the default 6 digit dynamic truncation and a combination of DataInput values as the message to compute the HMAC SHA1 digest.
We denote t as the length in decimal digits of the truncation output.
For instance, if t   6, then the output of the truncation is a 6 digit (decimal) value.
We define the HOTP family of functions as an extension to HOTP:
HOTP H t: these are the different possible truncated versions of HOTP, using the dynamic truncation method for extracting an HOTP value from the HMAC output 2.
We will denote HOTP H t as the realization of an HOTP function that uses an HMAC function with the hash function H, and the dynamic truncation as described in [RFC4226] to extract a t digit value 3.
t 0 means that no truncation is performed and the full HMAC value is used for authentication purposes We list the following preferred modes of computation, where   denotes the default
HOTP with SHA 1 as the hash function for HMAC and a dynamic truncation to a 4 digit value; this mode is not recommended in the general case, but it can be useful when a very short authentication code is needed by an application  HOTP SHA1 6
: HOTP with SHA 1 as the hash function for HMAC and a dynamic truncation to a 6 digit value  HOTP SHA1 8:
HOTP with SHA 1 as the hash function for HMAC and a dynamic truncation to an 8 digit value  HOTP SHA256 6
: HOTP with SHA 256 as the hash function for HMAC and a dynamic truncation to a 6 digit value  HOTP SHA512 6:
HOTP with SHA 512 as the hash function for HMAC and a dynamic truncation to a 6 digit value This table summarizes all possible values for the CryptoFunction:
The OCRASuite An OCRASuite value is a text string that captures one mode of operation for OCRA, completely specifying the various options for that computation.
An OCRASuite value is represented as follows:
The OCRASuite value is the concatenation of three sub components that are described below.
Some example OCRASuite strings are described in Section 6.4.
The client and server need to agree on one or two values of OCRASuite.
These values may be agreed upon at the time of token provisioning or, for more sophisticated client server interactions, these values may be negotiated for every transaction.
The provisioning of OCRA keys and related metadata such as OCRASuite is out of scope for this document.
[RFC6030] specifies one key container specification that facilitates provisioning of such data between the client and the server.
Note that for Mutual Challenge Response or Signature with Server Authentication modes, the client and server will need to agree on two values of OCRASuite   one for server computation and another for client computation.
: Indicates the version of OCRA.
OCRA v where v represents the version number (e.g., 1, 2).
This document specifies version 1 of OCRA.
: Indicates the function used to compute OCRA values
Values: Permitted values are described in Section 5.2.
Plain Signature computation Each input that is used for the computation is represented by a single letter (except Q), and they are separated by a hyphen.
The input for challenge is further qualified by the formats supported by the client for challenge question(s).
The default challenge format is N08, numeric and up to 8 digits.
The input for P is further qualified by the hash function used for the PIN/password.
Supported values for hash function can be:
Hash function (H) SHA1, SHA256, SHA512.
The default hash function for P is SHA1.
The input for S is further qualified by the length of the session data in bytes.
The client and server could agree to any length but the typical values are: Length (nnn) 064, 128, 256, and 512.
The default length is 064 bytes.
The input for timestamps is further qualified by G, size of the time  step.
Time step Size Table Default value for G is 1M, i.e., time step size is one minute and the T represents the number of minutes since epoch time [UT].
Here are some examples of OCRASuite strings:  "OCRA 1:
C QN08 PSHA1" means version 1 of OCRA with HMAC SHA512 function, truncated to an 8 digit value, using the counter, a random challenge, and a SHA1 digest of the PIN/password as parameters.
It also indicates that the client supports only numeric challenge up to 8 digits in length
QA10 T1M" means version 1 of OCRA with HMAC  SHA256 function, truncated to a 6 digit value, using a random alphanumeric challenge up to 10 characters in length and a timestamp in number of minutes since epoch time  "OCRA 1:HOTP SHA1 4:
QH8 S512" means version 1 of OCRA with HMAC  SHA1 function, truncated to a 4 digit value, using a random hexadecimal challenge up to 8 nibbles and a session value of 512 bytes 7.
This section describes the typical modes in which the above defined computation can be used for authentication.
Challenge Response A challenge response is a security mechanism in which the verifier presents a question (challenge) to the prover, who must provide a valid answer (response) to be authenticated.
To use this algorithm for a one way challenge response, the verifier will communicate a challenge value (typically randomly generated) to the prover.
The prover will use the challenge in the computation as described above.
The prover then communicates the response to the verifier to authenticate.
Therefore in this mode, the typical data inputs will be: C Counter, optional.
Q Challenge question, mandatory, supplied by the verifier.
P Hashed version of PIN/password, optional.
The diagram below shows the message exchange between the client (prover) and the server (verifier) to complete a one way challenge  response authentication.
It is assumed that the client and server have a pre shared key K that is used for the computation.
Mutual Challenge Response Mutual challenge response is a variation of one way challenge  response where both the client and server mutually authenticate each other.
To use this algorithm, the client will first send a random client  challenge to the server.
The server computes the server response and sends it to the client along with a server challenge.
The client will first verify the server response to be assured that it is talking to a valid server.
It will then compute the client  response and send it to the server to authenticate.
The server verifies the client response to complete the two way authentication process.
In this mode there are two computations: client response and server  response.
There are two separate challenge questions, generated by both parties.
We denote these challenge questions Q1 and Q2.
Typical data inputs for server response computation will be: C Counter, optional.
QC Challenge question, mandatory, supplied by the client.
QS Challenge question, mandatory, supplied by the server.
Typical data inputs for client response computation will be: C Counter, optional.
QS Challenge question, mandatory, supplied by the server.
QC Challenge question, mandatory, supplied by the client.
P Hashed version of PIN/password, optional.
The following diagram shows the messages that are exchanged between the client and the server to complete a two way mutual challenge  response authentication.
It is assumed that the client and server have a pre shared key K (or pair of keys if using dual key mode of computation) that is used for the computation.
, [C]   QS   QC   [P S T]) !
In this section we describe the typical modes in which the above defined computation can be used for electronic signatures.
To use this algorithm in plain signature mode, the server will communicate a signature challenge value to the client (signer).
The signature challenge is either the data to be signed or derived from the data to be signed using a hash function, for example.
The client will use the signature challenge in the computation as described above.
The client then communicates the signature value (response) to the server to authenticate.
Therefore in this mode, the data inputs will be: C Counter, optional.
QS Signature challenge, mandatory, supplied by the server.
P Hashed version of PIN/password, optional.
The picture below shows the messages that are exchanged between the client (prover) and the server (verifier) to complete a plain signature operation.
It is assumed that the client and server have a pre shared key K that is used for the computation.
This mode is a variation of the plain signature mode where the client can first authenticate the server before generating a electronic signature.
To use this algorithm, the client will first send a random client  challenge to the server.
The server computes the server response and sends it to the client along with a signature challenge.
The client will first verify the server response to authenticate that it is talking to a valid server.
It will then compute the signature and send it to the server.
In this mode there are two computations: client signature and server  response.
Typical data inputs for server response computation will be: C Counter, optional.
QC Challenge question, mandatory, supplied by the client.
QS Signature challenge, mandatory, supplied by the server.
Typical data inputs for client signature computation will be: C Counter, optional.
QC Challenge question, mandatory, supplied by the client.
QS Signature challenge, mandatory, supplied by the server.
P Hashed version of PIN/password, optional.
The diagram below shows the messages that are exchanged between the client and the server to complete a signature with server authentication transaction.
It is assumed that the client and server have a pre shared key K (or pair of keys if using dual key mode of computation) that is used for the computation.
( K, [C]   QS   QC
Any algorithm is only as secure as the application and the authentication protocols that implement it.
Therefore, this section discusses the critical security requirements that our choice of algorithm imposes on the authentication protocol and validation software.
The security and strength of this algorithm depend on the properties of the underlying building block HOTP, which is a construction based on HMAC [RFC2104] using SHA 1
(or SHA 256 or SHA 512
[SHA2]) as the hash function.
The conclusion of the security analysis detailed in [RFC4226] is that, for all practical purposes, the outputs of the dynamic truncation on distinct counter inputs are uniformly and independently distributed strings.
The analysis demonstrates that the best possible attack against the HOTP function is the brute force attack.
In the authentication mode, the client MUST support two factor authentication, i.e., the communication and verification of something you know (secret code such as a password, pass phrase, PIN code, etc.)
and something you have (token).
The secret code is known only to the user and usually entered with the Response value for authentication purpose (two factor authentication).
Alternatively, instead of sending something you know to the server, the client may use a hash of the password or PIN code in the computation itself, thus implicitly enabling two factor authentication.
IC2 Keys SHOULD be of the length of the CryptoFunction output to facilitate interoperability.
IC3 Keys SHOULD be chosen at random or using a cryptographically strong pseudo random generator properly seeded with a random value.
We RECOMMEND following the recommendations in [RFC4086] for all pseudo random and random generations.
The pseudo random numbers used for generating the keys SHOULD successfully pass the randomness test specified in [CN].
IC4 Challenge questions SHOULD be 20 byte values and MUST be at least t byte values where t stands for the digit length of the OCRA truncation output.
IC5 On the client side, the keys SHOULD be embedded in a tamper  resistant device or securely implemented in a software application.
Additionally, by embedding the keys in a hardware device, you also have the advantage of improving the flexibility (mobility) of the authentication system.
IC6 All the communications SHOULD take place over a secure channel, e.g.
, SSL/TLS [RFC5246], IPsec connections.
IC7 OCRA, when used in mutual authentication mode or in signature with server authentication mode, MAY use dual key mode
i.e., there are two keys that are shared between the client and the server.
One shared key is used to generate the server response on the server side and to verify it on the client side.
The other key is used to create the response or signature on the client side and to verify it on the server side.
We recommend that implementations MAY use the session information, S, as an additional input in the computation.
For example, S could be the session identifier from the TLS session.
This will mitigate against certain types of man in the middle attacks.
However, this will introduce the additional dependency that first of all the prover needs to have access to the session identifier to compute the response and the verifier will need access to the session identifier to verify the response.
[RFC5056] contains a relevant discussion of using Channel Bindings to Secure Channels.
In the signature mode, whenever the counter or time (defined as optional elements) are not used in the computation, there might be a risk of replay attack and the implementers should carefully consider this issue in the light of their specific application requirements and security guidelines.
The server SHOULD also provide whenever possible a mean for the client (if able) to verify the validity of the signature challenge.
We also RECOMMEND storing the keys securely in the validation system, and more specifically, encrypting them using tamper resistant hardware encryption and exposing them only when required: for example, the key is decrypted when needed to verify an OCRA response, and re encrypted immediately to limit exposure in the RAM for a short period of time.
The key store MUST be in a secure area, to avoid as much as possible direct attack on the validation system and secrets database.
Particularly, access to the key material should be limited to programs and processes required by the validation system only.
This document introduced several variants of HOTP for challenge  response based authentication and short signature like computations.
The OCRASuite provides for an easy integration and support of different flavors within an authentication and validation system.
Finally, OCRA should enable mutual authentication both in connected and off line modes, with the support of different response sizes and mode of operations.
Appendix A.  Reference Implementation <CODE BEGINS
2011 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This method uses the JCE to provide the crypto   algorithm.
HMAC computes a Hashed Message Authentication Code with the   crypto hash algorithm as a parameter.
the bytes to use for the HMAC key
/ private static byte[] hmac sha1(String crypto, byte[] keyBytes, byte[] text){ Mac hmac   null; try { hmac   Mac.getInstance(crypto); SecretKeySpec macKey   new SecretKeySpec(keyBytes, "RAW")
Adding one byte to get the right conversion //
values starting with "0" can be converted byte[] bArray   new BigInteger("10"
This method generates an OCRA HOTP value for the given   set of parameters.
; String result   null; int ocraSuiteLength   (ocraSuite.getBytes()).length; int counterLength   0;
int questionLength   0; int passwordLength   0
; int sessionInformationLength   0; int
> 1) crypto   "HmacSHA256"; if(CryptoFunction.toLowerCase().indexOf("sha512")
The size of the byte array message to be encrypted //
Fix the length of the HEX string
Put the bytes of "Counter" to the message //
HEX encoded if(counterLength > 0 ){ bArray   hexStr2Bytes(counter); System.arraycopy(bArray, 0, msg,
Put the bytes of "password" to the message //
HEX encoded if(passwordLength > 0){ bArray   hexStr2Bytes(password); System.arraycopy(bArray, 0, msg, ocraSuiteLength
Input is text encoded if(sessionInformationLength > 0 ){ bArray   hexStr2Bytes(sessionInformation); System.arraycopy(bArray, 0, msg, ocraSuiteLength
Put the bytes of "time" to the message //
Input is text value of minutes if(timeStampLength
Appendix B.  Test Vectors Generation <CODE BEGINS> /
2011 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
public class TestOCRA { public static String asHex (byte buf[])
(); BigInteger b   new BigInteger("0"); String sDate   "
; i ){ question   "
i; qHex   new String((new BigInteger(question,10)) .toString(16)).toUpperCase
(); ocra   OCRA.generateOCRA(ocraSuite,seed,counter, qHex,password, sessionInformation,timeStamp); System.out.println("Key:
"; for(int i 0; i < 10; i ){ counter   "
i; qHex   new String((new BigInteger(question,10)) .toString(16)).toUpperCase
i; qHex   new String((new BigInteger(question,10)) .toString(16)).toUpperCase
"; for(int i 0; i < 10; i ){ question   "
i; qHex   new String((new BigInteger(question,10)) .toString(16)).toUpperCase
i; ocra   OCRA.generateOCRA(ocraSuite,seed,counter, qHex,password,sessionInformation,timeStamp); System.out.println("Key:
(); ocra   OCRA.generateOCRA(ocraSuite,seed,counter, qHex,password,sessionInformation,timeStamp); System.out.println("Key:
i < STOP; i ){ question   "
HOTP SHA512 8:QA08 PSHA1"; System.out.println("OCRASuite (server computation)
i ){ ocraSuite   ocraSuite1; question   "
; i < STOP; i ){ question
This section provides test values that can be used for the OCRA interoperability test.
Standard 20Byte key: 3132333435363738393031323334353637383930 Standard 32Byte key: 3132333435363738393031323334353637383930313233343536373839303132
Standard 64Byte key: 313233343536373839303132333435363738393031323334353637383930313233343 53637383930313233343536373839303132333435363738393031323334
SHA1 hash value: 7110eda4d09e062aa5e4a390b0a572ac0d2c0220 C.1.
Mutual Challenge Response OCRASuite (server computation)
QA08 OCRASuite (client computation)   OCRA 1:HOTP SHA256 8:
QA08 OCRASuite (server computation)   OCRA 1:
QA08 OCRASuite (client computation)   OCRA 1:
In this mode of operation, Q represents the signature challenge.
