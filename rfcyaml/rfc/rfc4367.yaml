- title: __initial_text__
  contents:
  - '          What''s in a Name: False Assumptions about DNS Names

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Domain Name System (DNS) provides an essential service on the\n\
    \   Internet, mapping structured names to a variety of data, usually IP\n   addresses.\
    \  These names appear in email addresses, Uniform Resource\n   Identifiers (URIs),\
    \ and other application-layer identifiers that are\n   often rendered to human\
    \ users.  Because of this, there has been a\n   strong demand to acquire names\
    \ that have significance to people,\n   through equivalence to registered trademarks,\
    \ company names, types of\n   services, and so on.  There is a danger in this\
    \ trend; the humans and\n   automata that consume and use such names will associate\
    \ specific\n   semantics with some names and thereby make assumptions about the\n\
    \   services that are, or should be, provided by the hosts associated\n   with\
    \ the names.  Those assumptions can often be false, resulting in a\n   variety\
    \ of failure conditions.  This document discusses this problem\n   in more detail\
    \ and makes recommendations on how it can be avoided.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Target Audience .................................................4\n  \
    \ 3. Modeling Usage of the DNS .......................................4\n   4.\
    \ Possible Assumptions ............................................5\n      4.1.\
    \ By the User ................................................5\n      4.2. By\
    \ the Client ..............................................6\n      4.3. By the\
    \ Server ..............................................7\n   5. Consequences of\
    \ False Assumptions ...............................8\n   6. Reasons Why the Assumptions\
    \ Can Be False ........................9\n      6.1. Evolution ..................................................9\n\
    \      6.2. Leakage ...................................................10\n  \
    \    6.3. Sub-Delegation ............................................10\n    \
    \  6.4. Mobility ..................................................12\n      6.5.\
    \ Human Error ...............................................12\n   7. Recommendations\
    \ ................................................12\n   8. A Note on RFC 2219\
    \ and RFC 2782 ................................13\n   9. Security Considerations\
    \ ........................................14\n   10. Acknowledgements ..............................................14\n\
    \   11. IAB Members ...................................................14\n  \
    \ 12. Informative References ........................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Domain Name System (DNS) [1] provides an essential service\
    \ on the\n   Internet, mapping structured names to a variety of different types\
    \ of\n   data.  Most often it is used to obtain the IP address of a host\n   associated\
    \ with that name [2] [1] [3].  However, it can be used to\n   obtain other information,\
    \ and proposals have been made for nearly\n   everything, including geographic\
    \ information [4].\n   Domain names are most often used in identifiers used by\
    \ application\n   protocols.  The most well known include email addresses and\
    \ URIs,\n   such as the HTTP URL [5], Real Time Streaming Protocol (RTSP) URL\n\
    \   [6], and SIP URI [7].  These identifiers are ubiquitous, appearing on\n  \
    \ business cards, web pages, street signs, and so on.  Because of this,\n   there\
    \ has been a strong demand to acquire domain names that have\n   significance\
    \ to people through equivalence to registered trademarks,\n   company names, types\
    \ of services, and so on.  Such identifiers serve\n   many business purposes,\
    \ including extension of brand, advertising,\n   and so on.\n   People often make\
    \ assumptions about the type of service that is or\n   should be provided by a\
    \ host associated with that name, based on\n   their expectations and understanding\
    \ of what the name implies.  This,\n   in turn, triggers attempts by organizations\
    \ to register domain names\n   based on that presumed user expectation.  Examples\
    \ of this are the\n   various proposals for a Top-Level Domain (TLD) that could\
    \ be\n   associated with adult content [8], the requests for creation of TLDs\n\
    \   associated with mobile devices and services, and even phishing\n   attacks.\n\
    \   When these assumptions are codified into the behavior of an\n   automaton,\
    \ such as an application client or server, as a result of\n   implementor choice,\
    \ management directive, or domain owner policy, the\n   overall system can fail\
    \ in various ways.  This document describes a\n   number of typical ways in which\
    \ these assumptions can be codified,\n   how they can be wrong, the consequences\
    \ of those mistakes, and the\n   recommended ways in which they can be avoided.\n\
    \   Section 4 describes some of the possible assumptions that clients,\n   servers,\
    \ and people can make about a domain name.  In this context,\n   an \"assumption\"\
    \ is defined as any behavior that is expected when\n   accessing a service at\
    \ a domain name, even though the behavior is not\n   explicitly codified in protocol\
    \ specifications.  Frequently, these\n   assumptions involve ignoring parts of\
    \ a specification based on an\n   assumption that the client or server is deployed\
    \ in an environment\n   that is more rigid than the specification allows.  Section\
    \ 5\n   overviews some of the consequences of these false assumptions.\n   Generally\
    \ speaking, these consequences can include a variety of\n   different interoperability\
    \ failures, user experience failures, and\n   system failures.  Section 6 discusses\
    \ why these assumptions can be\n   false from the very beginning or become false\
    \ at some point in the\n   future.  Most commonly, they become false because the\
    \ environment\n   changes in unexpected ways over time, and what was a valid assumption\n\
    \   before, no longer is.  Other times, the assumptions prove wrong\n   because\
    \ they were based on the belief that a specific community of\n   clients and servers\
    \ was participating, and an element outside of that\n   community began participating.\n\
    \   Section 7 then provides some recommendations.  These recommendations\n   encapsulate\
    \ some of the engineering mantras that have been at the\n   root of Internet protocol\
    \ design for decades.  These include:\n      Follow the specifications.\n    \
    \  Use the capability negotiation techniques provided in the\n      protocols.\n\
    \      Be liberal in what you accept, and conservative in what you send.\n   \
    \   [18]\n   Overall, automata should not change their behavior within a protocol\n\
    \   based on the domain name, or some component of the domain name, of\n   the\
    \ host they are communicating with.\n"
- title: 2.  Target Audience
  contents:
  - "2.  Target Audience\n   This document has several audiences.  Firstly, it is\
    \ aimed at\n   implementors who ultimately develop the software that make the\
    \ false\n   assumptions that are the subject of this document.  The\n   recommendations\
    \ described here are meant to reinforce the engineering\n   guidelines that are\
    \ often understood by implementors, but frequently\n   forgotten as deadlines\
    \ near and pressures mount.\n   The document is also aimed at technology managers,\
    \ who often develop\n   the requirements that lead to these false assumptions.\
    \  For them,\n   this document serves as a vehicle for emphasizing the importance\
    \ of\n   not taking shortcuts in the scope of applicability of a project.\n  \
    \ Finally, this document is aimed at domain name policy makers and\n   administrators.\
    \  For them, it points out the perils in establishing\n   domain policies that\
    \ get codified into the operation of applications\n   running within that domain.\n"
- title: 3.  Modeling Usage of the DNS
  contents:
  - "3.  Modeling Usage of the DNS\n                       +--------+\n          \
    \             |        |\n                       |        |\n                \
    \       |  DNS   |\n                       |Service |\n                      \
    \ |        |\n                       +--------+\n                         ^  \
    \ |\n                         |   |\n                         |   |\n        \
    \                 |   |\n          /--\\           |   |\n         |    |    \
    \      |   V\n         |    |        +--------+                     +--------+\n\
    \          \\--/         |        |                     |        |\n         \
    \   |          |        |                     |        |\n         ---+---   \
    \    | Client |-------------------->| Server |\n            |          |     \
    \   |                     |        |\n            |          |        |      \
    \               |        |\n           /\\          +--------+               \
    \      +--------+\n          /  \\\n         /    \\\n         User\n        \
    \                         Figure 1\n   Figure 1 shows a simple conceptual model\
    \ of how the DNS is used by\n   applications.  A user of the application obtains\
    \ an identifier for\n   particular content or service it wishes to obtain.  This\
    \ identifier\n   is often a URL or URI that contains a domain name.  The user\
    \ enters\n   this identifier into its client application (for example, by typing\n\
    \   in the URL in a web browser window).  The client is the automaton (a\n   software\
    \ and/or hardware system) that contacts a server for that\n   application in order\
    \ to provide service to the user.  To do that, it\n   contacts a DNS server to\
    \ resolve the domain name in the identifier to\n   an IP address.  It then contacts\
    \ the server at that IP address.  This\n   simple model applies to application\
    \ protocols such as HTTP [5], SIP\n   [7], RTSP [6], and SMTP [9].\n   >From this\
    \ model, it is clear that three entities in the system can\n   potentially make\
    \ false assumptions about the service provided by the\n   server.  The human user\
    \ may form expectations relating to the content\n   of the service based on a\
    \ parsing of the host name from which the\n   content originated.  The server\
    \ might assume that the client\n   connecting to it supports protocols that it\
    \ does not, can process\n   content that it cannot, or has capabilities that it\
    \ does not.\n   Similarly, the client might assume that the server supports\n\
    \   protocols, content, or capabilities that it does not.  Furthermore,\n   applications\
    \ can potentially contain a multiplicity of humans,\n   clients, and servers,\
    \ all of which can independently make these false\n   assumptions.\n"
- title: 4.  Possible Assumptions
  contents:
  - "4.  Possible Assumptions\n   For each of the three elements, there are many types\
    \ of false\n   assumptions that can be made.\n"
- title: 4.1.  By the User
  contents:
  - "4.1.  By the User\n   The set of possible assumptions here is nearly boundless.\
    \  Users\n   might assume that an HTTP URL that looks like a company name maps\
    \ to\n   a server run by that company.  They might assume that an email from a\n\
    \   email address in the .gov TLD is actually from a government employee.\n  \
    \ They might assume that the content obtained from a web server within\n   a TLD\
    \ labeled as containing adult materials (for example, .sex)\n   actually contains\
    \ adult content [8].  These assumptions are\n   unavoidable, may all be false,\
    \ and are not the focus of this\n   document.\n"
- title: 4.2.  By the Client
  contents:
  - "4.2.  By the Client\n   Even though the client is an automaton, it can make some\
    \ of the same\n   assumptions that a human user might make.  For example, many\
    \ clients\n   assume that any host with a hostname that begins with \"www\" is\
    \ a web\n   server, even though this assumption may be false.\n   In addition,\
    \ the client concerns itself with the protocols needed to\n   communicate with\
    \ the server.  As a result, it might make assumptions\n   about the operation\
    \ of the protocols for communicating with the\n   server.  These assumptions manifest\
    \ themselves in an implementation\n   when a standardized protocol negotiation\
    \ technique defined by the\n   protocol is ignored, and instead, some kind of\
    \ rule is coded into the\n   software that comes to its own conclusion about what\
    \ the negotiation\n   would have determined.  The result is often a loss of\n\
    \   interoperability, degradation in reliability, and worsening of user\n   experience.\n\
    \   Authentication Algorithm: Though a protocol might support a\n      multiplicity\
    \ of authentication techniques, a client might assume\n      that a server always\
    \ supports one that is only optional according\n      to the protocol.  For example,\
    \ a SIP client contacting a SIP\n      server in a domain that is apparently used\
    \ to identify mobile\n      devices (for example, www.example.cellular) might\
    \ assume that the\n      server supports the optional Authentication and Key Agreement\n\
    \      (AKA) digest technique [10], just because of the domain name that\n   \
    \   was used to access the server.  As another example, a web client\n      might\
    \ assume that a server with the name https.example.com\n      supports HTTP over\
    \ Transport Layer Security (TLS) [16].\n   Data Formats: Though a protocol might\
    \ allow a multiplicity of data\n      formats to be sent from the server to the\
    \ client, the client might\n      assume a specific one, rather than using the\
    \ content labeling and\n      negotiation capabilities of the underlying protocol.\
    \  For example,\n      an RTSP client might assume that all audio content delivered\
    \ to it\n      from media.example.cellular uses a low-bandwidth codec.  As\n \
    \     another example, a mail client might assume that the contents of\n     \
    \ messages it retrieves from a mail server at mail.example.cellular\n      are\
    \ always text, instead of checking the MIME headers [11] in the\n      message\
    \ in order to determine the actual content type.\n   Protocol Extensions: A client\
    \ may attempt an operation on the server\n      that requires the server to support\
    \ an optional protocol\n      extension.  However, rather than implementing the\
    \ necessary\n      fallback logic, the client may falsely assume that the extension\n\
    \      is supported.  As an example, a SIP client that requires reliable\n   \
    \   provisional responses to its request (RFC 3262 [17]) might assume\n      that\
    \ this extension is supported on servers in the domain\n      sip.example.telecom.\
    \  Furthermore, the client would not implement\n      the fallback behavior defined\
    \ in RFC 3262, since it would assume\n      that all servers it will communicate\
    \ with are in this domain and\n      that all therefore support this extension.\
    \  However, if the\n      assumptions prove wrong, the client is unable to make\
    \ any phone\n      calls.\n   Languages: A client may support facilities for processing\
    \ text\n      content differently depending on the language of the text.  Rather\n\
    \      than determining the language from markers in the message from the\n  \
    \    server, the client might assume a language based on the domain\n      name.\
    \  This assumption can easily be wrong.  For example, a client\n      might assume\
    \ that any text in a web page retrieved from a server\n      within the .de country\
    \ code TLD (ccTLD) is in German, and attempt\n      a translation to Finnish.\
    \  This would fail dramatically if the\n      text was actually in French.  Unfortunately,\
    \ this client behavior\n      is sometimes exhibited because the server has not\
    \ properly labeled\n      the language of the content in the first place, often\
    \ because the\n      server assumed such a labeling was not needed.  This is an\
    \ example\n      of how these false assumptions can create vicious cycles.\n"
- title: 4.3.  By the Server
  contents:
  - "4.3.  By the Server\n   The server, like the client, is an automaton.  Let us\
    \ consider one\n   servicing a particular domain -- www.company.cellular, for\
    \ example.\n   It might assume that all clients connecting to this domain support\n\
    \   particular capabilities, rather than using the underlying protocol to\n  \
    \ make this determination.  Some examples include:\n   Authentication Algorithm:\
    \ The server can assume that a client\n      supports a particular, optional,\
    \ authentication technique, and it\n      therefore does not support the mandatory\
    \ one.\n   Language: The server can serve content in a particular language,\n\
    \      based on an assumption that clients accessing the domain speak a\n    \
    \  particular language, or based on an assumption that clients coming\n      from\
    \ a particular IP address speak a certain language.\n   Data Formats: The server\
    \ can assume that the client supports a\n      particular set of MIME types and\
    \ is only capable of sending ones\n      within that set.  When it generates content\
    \ in a protocol\n      response, it ignores any content negotiation headers that\
    \ were\n      present in the request.  For example, a web server might ignore\n\
    \      the Accept HTTP header field and send a specific image format.\n   Protocol\
    \ Extensions: The server might assume that the client supports\n      a particular\
    \ optional protocol extension, and so it does not\n      support the fallback\
    \ behavior necessary in the case where the\n      client does not.\n   Client\
    \ Characteristics: The server might assume certain things about\n      the physical\
    \ characteristics of its clients, such as memory\n      footprint, processing\
    \ power, screen sizes, screen colors, pointing\n      devices, and so on.  Based\
    \ on these assumptions, it might choose\n      specific behaviors when processing\
    \ a request.  For example, a web\n      server might always assume that clients\
    \ connect through cell\n      phones, and therefore return content that lacks\
    \ images and is\n      tuned for such devices.\n"
- title: 5.  Consequences of False Assumptions
  contents:
  - "5.  Consequences of False Assumptions\n   There are numerous negative outcomes\
    \ that can arise from the various\n   false assumptions that users, servers, and\
    \ clients can make.  These\n   include:\n   Interoperability Failure: In these\
    \ cases, the client or server\n      assumed some kind of protocol operation,\
    \ and this assumption was\n      wrong.  The result is that the two are unable\
    \ to communicate, and\n      the user receives some kind of an error.  This represents\
    \ a total\n      interoperability failure, manifesting itself as a lack of service\n\
    \      to users of the system.  Unfortunately, this kind of failure\n      persists.\
    \  Repeated attempts over time by the client to access the\n      service will\
    \ fail.  Only a change in the server or client software\n      can fix this problem.\n\
    \   System Failure: In these cases, the client or server misinterpreted a\n  \
    \    protocol operation, and this misinterpretation was serious enough\n     \
    \ to uncover a bug in the implementation.  The bug causes a system\n      crash\
    \ or some kind of outage, either transient or permanent (until\n      user reset).\
    \  If this failure occurs in a server, not only will\n      the connecting client\
    \ lose service, but other clients attempting\n      to connect will not get service.\
    \  As an example, if a web server\n      assumes that content passed to it from\
    \ a client (created, for\n      example, by a digital camera) is of a particular\
    \ content type, and\n      it always passes image content to a codec for decompression\
    \ prior\n      to storage, the codec might crash when it unexpectedly receives\
    \ an\n      image compressed in a different format.  Of course, it might crash\n\
    \      even if the Content-Type was correct, but the compressed bitstream\n  \
    \    was invalid.  False assumptions merely introduce additional\n      failure\
    \ cases.\n   Poor User Experience: In these cases, the client and server\n   \
    \   communicate, but the user receives a diminished user experience.\n      For\
    \ example, if a client on a PC connects to a web site that\n      provides content\
    \ for mobile devices, the content may be\n      underwhelming when viewed on the\
    \ PC.  Or, a client accessing a\n      streaming media service may receive content\
    \ of very low bitrate,\n      even though the client supported better codecs.\
    \  Indeed, if a user\n      wishes to access content from both a cellular device\
    \ and a PC\n      using a shared address book (that is, an address book shared\n\
    \      across multiple devices), the user would need two entries in that\n   \
    \   address book, and would need to use the right one from the right\n      device.\
    \  This is a poor user experience.\n   Degraded Security: In these cases, a weaker\
    \ security mechanism is\n      used than the one that ought to have been used.\
    \  As an example, a\n      server in a domain might assume that it is only contacted\
    \ by\n      clients with a limited set of authentication algorithms, even\n  \
    \    though the clients have been recently upgraded to support a\n      stronger\
    \ set.\n"
- title: 6.  Reasons Why the Assumptions Can Be False
  contents:
  - "6.  Reasons Why the Assumptions Can Be False\n   Assumptions made by clients\
    \ and servers about the operation of\n   protocols when contacting a particular\
    \ domain are brittle, and can be\n   wrong for many reasons.  On the server side,\
    \ many of the assumptions\n   are based on the notion that a domain name will\
    \ only be given to, or\n   used by, a restricted set of clients.  If the holder\
    \ of the domain\n   name assumes something about those clients, and can assume\
    \ that only\n   those clients use the domain name, then it can configure or program\n\
    \   the server to operate specifically for those clients.  Both parts of\n   this\
    \ assumption can be wrong, as discussed in more detail below.\n   On the client\
    \ side, the notion is similar, being based on the\n   assumption that a server\
    \ within a particular domain will provide a\n   specific type of service.  Sub-delegation\
    \ and evolution, both\n   discussed below, can make these assumptions wrong.\n"
- title: 6.1.  Evolution
  contents:
  - "6.1.  Evolution\n   The Internet and the devices that access it are constantly\
    \ evolving,\n   often at a rapid pace.  Unfortunately, there is a tendency to\
    \ build\n   for the here and now, and then worry about the future at a later\n\
    \   time.  Many of the assumptions above are predicated on\n   characteristics\
    \ of today's clients and servers.  Support for specific\n   protocols, authentication\
    \ techniques, or content are based on today's\n   standards and today's devices.\
    \  Even though they may, for the most\n   part, be true, they won't always be.\
    \  An excellent example is mobile\n   devices.  A server servicing a domain accessed\
    \ by mobile devices\n   might try to make assumptions about the protocols, protocol\n\
    \   extensions, security mechanisms, screen sizes, or processor power of\n   such\
    \ devices.  However, all of these characteristics can and will\n   change over\
    \ time.\n   When they do change, the change is usually evolutionary.  The result\n\
    \   is that the assumptions remain valid in some cases, but not in\n   others.\
    \  It is difficult to fix such systems, since it requires the\n   server to detect\
    \ what type of client is connecting, and what its\n   capabilities are.  Unless\
    \ the system is built and deployed with these\n   capability negotiation techniques\
    \ built in to begin with, such\n   detection can be extremely difficult.  In fact,\
    \ fixing it will often\n   require the addition of such capability negotiation\
    \ features that, if\n   they had been in place and used to begin with, would have\
    \ avoided the\n   problem altogether.\n"
- title: 6.2.  Leakage
  contents:
  - "6.2.  Leakage\n   Servers also make assumptions because of the belief that they\
    \ will\n   only be accessed by specific clients, and in particular, those that\n\
    \   are configured or provisioned to use the domain name.  In essence,\n   there\
    \ is an assumption of community -- that a specific community\n   knows and uses\
    \ the domain name, while others outside of the community\n   do not.\n   The problem\
    \ is that this notion of community is a false one.  The\n   Internet is global.\
    \  The DNS is global.  There is no technical\n   barrier that separates those\
    \ inside of the community from those\n   outside.  The ease with which information\
    \ propagates across the\n   Internet makes it extremely likely that such domain\
    \ names will\n   eventually find their way into clients outside of the presumed\n\
    \   community.  The ubiquitous presence of domain names in various URI\n   formats,\
    \ coupled with the ease of conveyance of URIs, makes such\n   leakage merely a\
    \ matter of time.  Furthermore, since the DNS is\n   global, and since it can\
    \ only have one root [12], it becomes possible\n   for clients outside of the\
    \ community to search and find and use such\n   \"special\" domain names.\n  \
    \ Indeed, this leakage is a strength of the Internet architecture, not\n   a weakness.\
    \  It enables global access to services from any client\n   with a connection\
    \ to the Internet.  That, in turn, allows for rapid\n   growth in the number of\
    \ customers for any particular service.\n"
- title: 6.3.  Sub-Delegation
  contents:
  - "6.3.  Sub-Delegation\n   Clients and users make assumptions about domains because\
    \ of the\n   notion that there is some kind of centralized control that can\n\
    \   enforce those assumptions.  However, the DNS is not centralized; it\n   is\
    \ distributed.  If a domain doesn't delegate its sub-domains and has\n   its records\
    \ within a single zone, it is possible to maintain a\n   centralized policy about\
    \ operation of its domain.  However, once a\n   domain gets sufficiently large\
    \ that the domain administrators begin\n   to delegate sub-domains to other authorities,\
    \ it becomes increasingly\n   difficult to maintain any kind of central control\
    \ on the nature of\n   the service provided in each sub-domain.\n   Similarly,\
    \ the usage of domain names with human semantic connotation\n   tends to lead\
    \ to a registration of multiple domains in which a\n   particular service is to\
    \ run.  As an example, a service provider with\n   the name \"example\" might\
    \ register and set up its services in\n   \"example.com\", \"example.net\", and\
    \ generally example.foo for each foo\n   that is a valid TLD.  This, like sub-delegation,\
    \ results in a growth\n   in the number of domains over which it is difficult\
    \ to maintain\n   centralized control.\n   Not that it is not possible, since\
    \ there are many examples of\n   successful administration of policies across\
    \ sub-domains many levels\n   deep.  However, it takes an increasing amount of\
    \ effort to ensure\n   this result, as it requires human intervention and the\
    \ creation of\n   process and procedure.  Automated validation of adherence to\
    \ policies\n   is very difficult to do, as there is no way to automatically verify\n\
    \   many policies that might be put into place.\n   A less costly process for\
    \ providing centralized management of\n   policies is to just hope that any centralized\
    \ policies are being\n   followed, and then wait for complaints or perform random\
    \ audits.\n   Those approaches have many problems.\n   The invalidation of assumptions\
    \ due to sub-delegation is discussed in\n   further detail in Section 4.1.3 of\
    \ [8] and in Section 3.3 of [20].\n   As a result of the fragility of policy continuity\
    \ across sub-\n   delegations, if a client or user assumes some kind of property\n\
    \   associated with a TLD (such as \".wifi\"), it becomes increasingly more\n\
    \   likely with the number of sub-domains that this property will not\n   exist\
    \ in a server identified by a particular name.  For example, in\n   \"store.chain.company.provider.wifi\"\
    , there may be four levels of\n   delegation from \".wifi\", making it quite likely\
    \ that, unless the\n   holder of \".wifi\" is working diligently, the properties\
    \ that the\n   holder of \".wifi\" wishes to enforce are not present.  These\n\
    \   properties may not be present due to human error or due to a willful\n   decision\
    \ not to adhere to them.\n"
- title: 6.4.  Mobility
  contents:
  - "6.4.  Mobility\n   One of the primary value propositions of a hostname as an\
    \ identifier\n   is its persistence.  A client can change IP addresses, yet still\n\
    \   retain a persistent identifier used by other hosts to reach it.\n   Because\
    \ their value derives from their persistence, hostnames tend to\n   move with\
    \ a host not just as it changes IP addresses, but as it\n   changes access network\
    \ providers and technologies.  For this reason,\n   assumptions made about a host\
    \ based on the presumed access network\n   corresponding to that hostname tend\
    \ to be wrong over time.  As an\n   example, a PC might normally be connected\
    \ to its broadband provider,\n   and through dynamic DNS have a hostname within\
    \ the domain of that\n   provider.  However, one cannot assume that any host within\
    \ that\n   network has access over a broadband link; the user could connect\n\
    \   their PC over a low-bandwidth wireless access network and still\n   retain\
    \ its domain name.\n"
- title: 6.5.  Human Error
  contents:
  - "6.5.  Human Error\n   Of course, human error can be the source of errors in any\
    \ system, and\n   the same is true here.  There are many examples relevant to\
    \ the\n   problem under discussion.\n   A client implementation may make the assumption\
    \ that, just because a\n   DNS SRV record exists for a particular protocol in\
    \ a particular\n   domain, indicating that the service is available on some port,\
    \ that\n   the service is, in fact, running there.  This assumption could be\n\
    \   wrong because the SRV records haven't been updated by the system\n   administrators\
    \ to reflect the services currently running.  As another\n   example, a client\
    \ might assume that a particular domain policy\n   applies to all sub-domains.\
    \  However, a system administrator might\n   have omitted to apply the policy\
    \ to servers running in one of those\n   sub-domains.\n"
- title: 7.  Recommendations
  contents:
  - "7.  Recommendations\n   Based on these problems, the clear conclusion is that\
    \ clients,\n   servers, and users should not make assumptions on the nature of\
    \ the\n   service provided to, or by, a domain.  More specifically, however,\n\
    \   the following can be said:\n   Follow the specifications: When specifications\
    \ define mandatory\n      baseline procedures and formats, those should be implemented\
    \ and\n      supported, even if the expectation is that optional procedures\n\
    \      will most often be used.  For example, if a specification mandates\n  \
    \    a particular baseline authentication technique, but allows others\n     \
    \ to be negotiated and used, implementations need to implement the\n      baseline\
    \ authentication algorithm even if the other ones are used\n      most of the\
    \ time.  Put more simply, the behavior of the protocol\n      machinery should\
    \ never change based on the domain name of the\n      host.\n   Use capability\
    \ negotiation: Many protocols are engineered with\n      capability negotiation\
    \ mechanisms.  For example, a content\n      negotiation framework has been defined\
    \ for protocols using MIME\n      content [13] [14] [15].  SIP allows for clients\
    \ to negotiate the\n      media types used in the multimedia session, as well\
    \ as protocol\n      parameters.  HTTP allows for clients to negotiate the media\
    \ types\n      returned in requests for content.  When such features are\n   \
    \   available in a protocol, client and servers should make use of\n      them\
    \ rather than making assumptions about supported capabilities.\n      A corollary\
    \ is that protocol designers should include such\n      mechanisms when evolution\
    \ is expected in the usage of the\n      protocol.\n   \"Be liberal in what you\
    \ accept, and conservative in what you send\"\n      [18]:  This axiom of Internet\
    \ protocol design is applicable here\n      as well.  Implementations should be\
    \ prepared for the full breadth\n      of what a protocol allows another entity\
    \ to send, rather than be\n      limiting in what it is willing to receive.\n\
    \   To summarize -- there is never a need to make assumptions.  Rather\n   than\
    \ doing so, utilize the specifications and the negotiation\n   capabilities they\
    \ provide, and the overall system will be robust and\n   interoperable.\n"
- title: 8.  A Note on RFC 2219 and RFC 2782
  contents:
  - "8.  A Note on RFC 2219 and RFC 2782\n   Based on the definition of an assumption\
    \ given here, the behavior\n   hinted at by records in the DNS also represents\
    \ an assumption.  RFC\n   2219 [19] defines well-known aliases that can be used\
    \ to construct\n   domain names for reaching various well-known services in a\
    \ domain.\n   This approach was later followed by the definition of a new resource\n\
    \   record, the SRV record [2], which specifies that a particular service\n  \
    \ is running on a server in a domain.  Although both of these\n   mechanisms are\
    \ useful as a hint that a particular service is running\n   in a domain, both\
    \ of them represent assumptions that may be false.\n   However, they differ in\
    \ the set of reasons why those assumptions\n   might be false.\n   A client that\
    \ assumes that \"ftp.example.com\" is an FTP server may be\n   wrong because the\
    \ presumed naming convention in RFC 2219 was not\n   known by, or not followed\
    \ by, the owner of domain.com.  With RFC\n   2782, an SRV record for a particular\
    \ service would be present only by\n   explicit choice of the domain administrator,\
    \ and thus a client that\n   assumes that the corresponding host provides this\
    \ service would be\n   wrong only because of human error in configuration.  In\
    \ this case,\n   the assumption is less likely to be wrong, but it certainly can\
    \ be.\n   The only way to determine with certainty that a service is running on\n\
    \   a host is to initiate a connection to the port for that service, and\n   check.\
    \  Implementations need to be careful not to codify any\n   behaviors that cause\
    \ failures should the information provided in the\n   record actually be false.\
    \  This borders on common sense for robust\n   implementations, but it is valuable\
    \ to raise this point explicitly.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   One of the assumptions that can be made by clients\
    \ or servers is the\n   availability and usage (or lack thereof) of certain security\n\
    \   protocols and algorithms.  For example, a client accessing a service\n   in\
    \ a particular domain might assume a specific authentication\n   algorithm or\
    \ hash function in the application protocol.  It is\n   possible that, over time,\
    \ weaknesses are found in such a technique,\n   requiring usage of a different\
    \ mechanism.  Similarly, a system might\n   start with an insecure mechanism,\
    \ and then decide later on to use a\n   secure one.  In either case, assumptions\
    \ made on security properties\n   can result in interoperability failures, or\
    \ worse yet, providing\n   service in an insecure way, even though the client\
    \ asked for, and\n   thought it would get, secure service.  These kinds of assumptions\
    \ are\n   fundamentally unsound even if the records themselves are secured with\n\
    \   DNSSEC.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The IAB would like to thank John Klensin, Keith Moore\
    \ and Peter Koch\n   for their comments.\n"
- title: 11.  IAB Members
  contents:
  - "11.  IAB Members\n   Internet Architecture Board members at the time of writing\
    \ of this\n   document are:\n      Bernard Aboba\n      Loa Andersson\n      Brian\
    \ Carpenter\n      Leslie Daigle\n      Patrik Faltstrom\n      Bob Hinden\n \
    \     Kurtis Lindqvist\n      David Meyer\n      Pekka Nikander\n      Eric Rescorla\n\
    \      Pete Resnick\n      Jonathan Rosenberg\n"
- title: 12.  Informative References
  contents:
  - "12.  Informative References\n   [1]   Mockapetris, P., \"Domain names - concepts\
    \ and facilities\",\n         STD 13, RFC 1034, November 1987.\n   [2]   Gulbrandsen,\
    \ A., Vixie, P., and L. Esibov, \"A DNS RR for\n         specifying the location\
    \ of services (DNS SRV)\", RFC 2782,\n         February 2000.\n   [3]   Mealling,\
    \ M., \"Dynamic Delegation Discovery System (DDDS) Part\n         Three: The Domain\
    \ Name System (DNS) Database\", RFC 3403,\n         October 2002.\n   [4]   Davis,\
    \ C., Vixie, P., Goodwin, T., and I. Dickinson, \"A Means\n         for Expressing\
    \ Location Information in the Domain Name System\",\n         RFC 1876, January\
    \ 1996.\n   [5]   Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter,\
    \ L.,\n         Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol --\n\
    \         HTTP/1.1\", RFC 2616, June 1999.\n   [6]   Schulzrinne, H., Rao, A.,\
    \ and R. Lanphier, \"Real Time Streaming\n         Protocol (RTSP)\", RFC 2326,\
    \ April 1998.\n   [7]   Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\
    \ A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n\
    \         Session Initiation Protocol\", RFC 3261, June 2002.\n   [8]   Eastlake,\
    \ D., \".sex Considered Dangerous\", RFC 3675,\n         February 2004.\n   [9]\
    \   Klensin, J., \"Simple Mail Transfer Protocol\", RFC 2821,\n         April\
    \ 2001.\n   [10]  Niemi, A., Arkko, J., and V. Torvinen, \"Hypertext Transfer\n\
    \         Protocol (HTTP) Digest Authentication Using Authentication and\n   \
    \      Key Agreement (AKA)\", RFC 3310, September 2002.\n   [11]  Freed, N. and\
    \ N. Borenstein, \"Multipurpose Internet Mail\n         Extensions (MIME) Part\
    \ One: Format of Internet Message Bodies\",\n         RFC 2045, November 1996.\n\
    \   [12]  Internet Architecture Board, \"IAB Technical Comment on the\n      \
    \   Unique DNS Root\", RFC 2826, May 2000.\n   [13]  Klyne, G., \"Indicating Media\
    \ Features for MIME Content\",\n         RFC 2912, September 2000.\n   [14]  Klyne,\
    \ G., \"A Syntax for Describing Media Feature Sets\",\n         RFC 2533, March\
    \ 1999.\n   [15]  Klyne, G., \"Protocol-independent Content Negotiation\n    \
    \     Framework\", RFC 2703, September 1999.\n   [16]  Rescorla, E., \"HTTP Over\
    \ TLS\", RFC 2818, May 2000.\n   [17]  Rosenberg, J. and H. Schulzrinne, \"Reliability\
    \ of Provisional\n         Responses in Session Initiation Protocol (SIP)\", RFC\
    \ 3262,\n         June 2002.\n   [18]  Braden, R., \"Requirements for Internet\
    \ Hosts - Communication\n         Layers\", STD 3, RFC 1122, October 1989.\n \
    \  [19]  Hamilton, M. and R. Wright, \"Use of DNS Aliases for Network\n      \
    \   Services\", BCP 17, RFC 2219, October 1997.\n   [20]  Faltstrom, P., \"Design\
    \ Choices When Expanding DNS\", Work in\n         Progress, June 2005.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jonathan Rosenberg, Editor\n   IAB\n   600 Lanidex Plaza\n\
    \   Parsippany, NJ  07054\n   US\n   Phone: +1 973 952-5000\n   EMail: jdrosen@cisco.com\n\
    \   URI:   http://www.jdrosen.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
