- title: __initial_text__
  contents:
  - '    IP Network Address Translator (NAT) Terminology and Considerations

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Preface
  contents:
  - "Preface\n   The motivation behind this document is to provide clarity to the\n\
    \   terms used in conjunction with Network Address Translators.  The term\n  \
    \ \"Network Address Translator\" means different things in different\n   contexts.\
    \ The intent of this document is to define the various\n   flavors of NAT and\
    \ standardize the meaning of terms used.\n   The authors listed are editors for\
    \ this document and owe the content\n   to contributions from members of the working\
    \ group. Large chunks of\n   the document titled, \"IP Network Address Translator\
    \ (NAT)\" were\n   extracted almost as is, to form the initial basis for this\
    \ document.\n   The editors would like to thank the authors Pyda Srisuresh and\
    \ Kjeld\n   Egevang for the same. The editors would like to thank Praveen\n  \
    \ Akkiraju for his contributions in describing NAT deployment\n   scenarios. The\
    \ editors would also like to thank the IESG members\n   Scott Bradner, Vern Paxson\
    \ and Thomas Narten for their detailed\n   review of the document and adding clarity\
    \ to the text.\n"
- title: Abstract
  contents:
  - "Abstract\n   Network Address Translation is a method by which IP addresses are\n\
    \   mapped from one realm to another, in an attempt to provide\n   transparent\
    \ routing to hosts. Traditionally, NAT devices are used to\n   connect an isolated\
    \ address realm with private unregistered addresses\n   to an external realm with\
    \ globally unique registered addresses. This\n   document attempts to describe\
    \ the operation of NAT devices and the\n   associated considerations in general,\
    \ and to define the terminology\n   used to identify various flavors of NAT.\n"
- title: 1. Introduction and Overview
  contents:
  - "1. Introduction and Overview\n   The need for IP Address translation arises when\
    \ a network's internal\n   IP addresses cannot be used outside the network either\
    \ because they\n   are invalid for use outside, or because the internal addressing\
    \ must\n   be kept private from the external network.\n   Address translation\
    \ allows (in many cases, except as noted in\n   sections 8 and 9) hosts in a private\
    \ network to transparently\n   communicate with destinations on an external network\
    \ and vice versa.\n   There are a variety of flavors of NAT and terms to match\
    \ them. This\n   document attempts to define the terminology used and to identify\n\
    \   various flavors of NAT. The document also attempts to describe other\n   considerations\
    \ applicable to NAT devices in general.\n   Note, however, this document is not\
    \ intended to describe the\n   operations of individual NAT variations or the\
    \ applicability of NAT\n   devices.\n   NAT devices attempt to provide a transparent\
    \ routing solution to end\n   hosts trying to communicate from disparate address\
    \ realms. This is\n   achieved by modifying end node addresses en-route and maintaining\n\
    \   state for these updates so that datagrams pertaining to a session are\n  \
    \ routed to the right end-node in either realm. This solution only\n   works when\
    \ the applications do not use the IP addresses as part of\n   the protocol itself.\
    \ For example, identifying endpoints using DNS\n   names rather than addresses\
    \ makes applications less dependent of the\n   actual addresses that NAT chooses\
    \ and avoids the need to also\n   translate payload contents when NAT changes\
    \ an IP address.\n   The NAT function cannot by itself support all applications\n\
    \   transparently and often must co-exist with application level gateways\n  \
    \ (ALGs) for this reason. People looking to deploy NAT based solutions\n   need\
    \ to determine their application requirements first and assess the\n   NAT extensions\
    \ (i.e., ALGs) necessary to provide application\n   transparency for their environment.\n\
    \   IPsec techniques which are intended to preserve the Endpoint\n   addresses\
    \ of an IP packet will not work with NAT enroute for most\n   applications in\
    \ practice. Techniques such as AH and ESP protect the\n   contents of the IP headers\
    \ (including the source and destination\n   addresses) from modification. Yet,\
    \ NAT's fundamental role is to alter\n   the addresses in the IP header of a packet.\n"
- title: 2. Terminology and concepts used
  contents:
  - "2. Terminology and concepts used\n   Terms most frequently used in the context\
    \ of NAT are defined here for\n   reference.\n"
- title: 2.1. Address realm or realm
  contents:
  - "2.1. Address realm or realm\n   An address realm is a network domain in which\
    \ the network addresses\n   are uniquely assigned to entities such that datagrams\
    \ can be routed\n   to them. Routing protocols used within the network domain\
    \ are\n   responsible for finding routes to entities given their network\n   addresses.\
    \ Note that this document is limited to describing NAT in\n   IPv4 environment\
    \ and does not address the use of NAT in other types\n   of environment. (e.g.\
    \ IPv6 environments)\n"
- title: 2.2. Transparent routing
  contents:
  - "2.2. Transparent routing\n   The term \"transparent routing\" is used throughout\
    \ the document to\n   identify the routing functionality that a NAT device provides.\
    \  This\n   is different from the routing functionality provided by a traditional\n\
    \   router device in that a traditional router routes packets within a\n   single\
    \ address realm.\n   Transparent routing refers to routing a datagram between\
    \ disparate\n   address realms, by modifying address contents in the IP header\
    \ to be\n   valid in the address realm into which the datagram is routed.\n  \
    \ Section 3.2 has a detailed description of transparent routing.\n"
- title: 2.3. Session flow vs. Packet flow
  contents:
  - "2.3. Session flow vs. Packet flow\n   Connection or session flows are different\
    \ from packet flows.  A\n   session flow  indicates the direction in which the\
    \ session was\n   initiated with reference to a network interface. Packet flow\
    \ is the\n   direction in which the packet has traveled with reference to a\n\
    \   network interface. Take for example, an outbound telnet session.  The\n  \
    \ telnet session consists of packet flows in both inbound and outbound\n   directions.\
    \ Outbound telnet packets carry terminal keystrokes and\n   inbound telnet packets\
    \ carry screen displays from the telnet server.\n   For purposes of discussion\
    \ in this document, a session is defined as\n   the set of traffic that is managed\
    \ as a unit for translation.\n   TCP/UDP sessions are uniquely identified by the\
    \ tuple of (source IP\n   address, source TCP/UDP port, target IP address, target\
    \ TCP/UDP\n   port). ICMP query sessions are identified by the tuple of (source\
    \ IP\n   address, ICMP query ID, target IP address). All other sessions are\n\
    \   characterized by the tuple of (source IP address, target IP address,\n   IP\
    \ protocol).\n   Address translations performed by NAT are session based and would\n\
    \   include translation of incoming as well as outgoing packets belonging\n  \
    \ to that session. Session direction is identified by the direction of\n   the\
    \ first packet of that session (see sec 2.5).\n   Note, there is no guarantee\
    \ that the idea of a session, determined as\n   above by NAT, will coincide with\
    \ the application's idea of a session.\n   An application might view a bundle\
    \ of sessions (as viewed by NAT) as\n   a single session and might not even view\
    \ its communication with its\n   peers as a session. Not all applications are\
    \ guaranteed to work\n   across realms, even with an ALG (defined below in section\
    \ 2.9)\n   enroute.\n"
- title: 2.4. TU ports, Server ports, Client ports
  contents:
  - "2.4. TU ports, Server ports, Client ports\n   For the reminder of this document,\
    \ we will refer TCP/UDP ports\n   associated with an IP address simply as \"TU\
    \ ports\".\n   For most TCP/IP hosts, TU port range 0-1023 is used by servers\n\
    \   listening for incoming connections. Clients trying to initiate a\n   connection\
    \ typically select a source TU port in the range of 1024-\n   65535. However,\
    \ this convention is not universal and not always\n   followed. Some client stations\
    \ initiate connections using a source TU\n   port number in the range of 0-1023,\
    \ and there are servers listening\n   on TU port numbers in the range of 1024-65535.\n\
    \   A list of assigned TU port services may be found in RFC 1700 [Ref 2].\n"
- title: 2.5. Start of session for TCP, UDP and others
  contents:
  - "2.5. Start of session for TCP, UDP and others\n   The first packet of every TCP\
    \ session tries to establish a session\n   and contains connection startup information.\
    \ The first packet of a\n   TCP session may be recognized by the presence of SYN\
    \ bit and absence\n   of ACK bit in the TCP flags. All TCP packets, with the exception\
    \ of\n   the first packet, must have the ACK bit set.\n   However, there is no\
    \ deterministic way of recognizing the start of a\n   UDP based session or any\
    \ non-TCP session. A heuristic approach would\n   be to assume the first packet\
    \ with hitherto non-existent session\n   parameters (as defined in section 2.3)\
    \ as constituting the start of\n   new session.\n"
- title: 2.6. End of session for TCP, UDP and others
  contents:
  - "2.6. End of session for TCP, UDP and others\n   The end of a TCP session is detected\
    \ when FIN is acknowledged by both\n   halves of the session or when either half\
    \ receives a segment with the\n   RST bit in TCP flags field. However, because\
    \ it is impossible for a\n   NAT device to know whether the packets it sees will\
    \ actually be\n   delivered to the destination (they may be dropped between the\
    \ NAT\n   device and the destination), the NAT device cannot safely assume that\n\
    \   the segments containing FINs or SYNs will be the last packets of the\n   session\
    \ (i.e., there could be retransmissions).  Consequently, a\n   session can be\
    \ assumed to have been terminated only after a period of\n   4 minutes subsequent\
    \ to this detection. The need for this extended\n   wait period is described in\
    \ RFC 793 [Ref 7], which suggests a TIME-\n   WAIT duration of 2 * MSL (Maximum\
    \ Segment Lifetime) or 4 minutes.\n   Note that it is also possible for a TCP\
    \ connection to terminate\n   without the NAT device becoming aware of the event\
    \ (e.g., in the case\n   where one or both peers reboot). Consequently, garbage\
    \ collection is\n   necessary on NAT devices to clean up unused state about TCP\
    \ sessions\n   that no longer exist. However, it is not possible in the general\
    \ case\n   to distinguish between connections that have been idle for an\n   extended\
    \ period of time from those that no longer exist.  In the case\n   of UDP-based\
    \ sessions, there is no single way to determine when a\n   session ends, since\
    \ UDP-based protocols are application specific.\n   Many heuristic approaches\
    \ are used to terminate sessions. You can\n   make the assumption that TCP sessions\
    \ that have not been used for\n   say, 24 hours, and non-TCP sessions that have\
    \ not been used for a\n   couple of minutes, are terminated. Often this assumption\
    \ works, but\n   sometimes it doesn't. These idle period session timeouts vary\
    \ a great\n   deal both from application to application and for different sessions\n\
    \   of the same application. Consequently, session timeouts must be\n   configurable.\
    \ Even so, there is no guarantee that a satisfactory\n   value can be found. Further,\
    \ as stated in section 2.3, there is no\n   guarantee that NAT's view of session\
    \ termination will coincide with\n   that of the application.\n   Another way\
    \ to handle session terminations is to timestamp entries\n   and keep them as\
    \ long as possible and retire the longest idle session\n   when it becomes necessary.\n"
- title: 2.7. Public/Global/External network
  contents:
  - "2.7. Public/Global/External network\n   A Global or Public Network is an address\
    \ realm with unique network\n   addresses assigned by Internet Assigned Numbers\
    \ Authority (IANA) or\n   an equivalent address registry. This network is also\
    \ referred as\n   External network during NAT discussions.\n"
- title: 2.8. Private/Local network
  contents:
  - "2.8. Private/Local network\n   A private network is an address realm independent\
    \ of external network\n   addresses. Private network may also be referred alternately\
    \ as Local\n   Network. Transparent routing between hosts in private realm and\n\
    \   external realm is facilitated by a NAT router.\n   RFC 1918 [Ref 1] has recommendations\
    \ on address space allocation for\n   private networks. Internet Assigned Numbers\
    \ Authority (IANA) has\n   three blocks of IP address space, namely 10/8, 172.16/12,\
    \ and\n   192.168/16 set aside for private internets. In pre-CIDR notation, the\n\
    \   first block is nothing but a single class A network number, while the\n  \
    \ second block is a set of 16 contiguous class B networks, and the\n   third block\
    \ is a set of 256 contiguous class C networks.\n   An organization that decides\
    \ to use IP addresses in the address space\n   defined above can do so without\
    \ coordination with IANA or any other\n   Internet registry such as APNIC, RIPE\
    \ and ARIN.  The address space\n   can thus be used privately by many independent\
    \ organizations at the\n   same time. However, if those independent organizations\
    \ later decide\n   they wish to communicate with each other or the public Internet,\
    \ they\n   will either have to renumber their networks or enable NAT on their\n\
    \   border routers.\n"
- title: 2.9. Application Level gateway (ALG)
  contents:
  - "2.9. Application Level gateway (ALG)\n   Not all applications lend themselves\
    \ easily to translation by NAT\n   devices; especially those that include IP addresses\
    \ and TCP/UDP ports\n   in the payload. Application Level Gateways (ALGs) are\
    \ application\n   specific translation agents that allow an application on a host\
    \ in\n   one address realm to connect to its counterpart running on a host in\n\
    \   different realm transparently. An ALG may interact with NAT to set up\n  \
    \ state, use NAT state information, modify application specific payload\n   and\
    \ perform whatever else is necessary to get the application running\n   across\
    \ disparate address realms.\n   ALGs may not always utilize NAT state information.\
    \ They may glean\n   application payload and simply notify NAT to add additional\
    \ state\n   information in some cases. ALGs are similar to Proxies, in that, both\n\
    \   ALGs and proxies facilitate Application specific communication\n   between\
    \ clients and servers. Proxies use a special protocol to\n   communicate with\
    \ proxy clients and relay client data to servers and\n   vice versa. Unlike Proxies,\
    \ ALGs do not use a special protocol to\n   communicate with application clients\
    \ and do not require changes to\n   application clients.\n"
- title: 3. What is NAT?
  contents:
  - "3. What is NAT?\n   Network Address Translation is a method by which IP addresses\
    \ are\n   mapped from one address realm to another, providing transparent\n  \
    \ routing to end hosts. There are many variations of address\n   translation that\
    \ lend themselves to different applications.  However,\n   all flavors of NAT\
    \ devices should share the following\n   characteristics.\n          a) Transparent\
    \ Address assignment.\n          b) Transparent routing through address translation.\n\
    \             (routing here refers to forwarding packets, and not\n          \
    \   exchanging routing information)\n          c) ICMP error packet payload translation.\n\
    \   Below is a diagram illustrating a scenario in which NAT is enabled on\n  \
    \ a stub domain border router, connected to the Internet through a\n   regional\
    \ router made available by a service provider.\n       \\ | /                \
    \  .                               /\n   +---------------+  WAN     .        \
    \   +-----------------+/\n   |Regional Router|----------------------|Stub Router\
    \ w/NAT|---\n   +---------------+          .           +-----------------+\\\n\
    \                              .                      |        \\\n          \
    \                    .                      |  LAN\n                         \
    \     .               ---------------\n                        Stub border\n \
    \       Figure 1: A typical NAT operation scenario\n"
- title: 3.1. Transparent Address Assignment
  contents:
  - "3.1. Transparent Address Assignment\n   NAT binds addresses in private network\
    \ with addresses in global\n   network and vice versa to provide transparent routing\
    \ for the\n   datagrams traversing between address realms. The binding in some\n\
    \   cases may extend to transport level identifiers (such as TCP/UDP\n   ports).\
    \ Address binding is done at the start of a session. The\n   following sub-sections\
    \ describe two types of address assignments.\n"
- title: 3.1.1. Static Address assignment
  contents:
  - "3.1.1. Static Address assignment\n   In the case of static address assignment,\
    \ there is one-to-one address\n   mapping for hosts between a private network\
    \ address and an external\n   network address for the lifetime of NAT operation.\
    \  Static address\n   assignment ensures that NAT does not have to administer\
    \ address\n   management with session flows.\n"
- title: 3.1.2. Dynamic Address assignment
  contents:
  - "3.1.2. Dynamic Address assignment\n   In this case, external addresses are assigned\
    \ to private network\n   hosts or vice versa, dynamically based on usage requirements\
    \ and\n   session flow determined heuristically by NAT. When the last session\n\
    \   using an address binding is terminated, NAT would free the binding so\n  \
    \ that the global address could be recycled for later use. The exact\n   nature\
    \ of address assignment is specific to individual NAT\n   implementations.\n"
- title: 3.2. Transparent routing
  contents:
  - "3.2. Transparent routing\n   A NAT router sits at the border between two address\
    \ realms and\n   translates addresses in IP headers so that when the packet leaves\
    \ one\n   realm and enters another, it can be routed properly. Because NAT\n \
    \  devices have connections to multiple address realms, they must be\n   careful\
    \ to not improperly propagate information (e.g., via routing\n   protocols) about\
    \ networks from one address realm into another, where\n   such an advertisement\
    \ would be deemed unacceptable.\n   There are three phases to Address translation,\
    \ as follows. Together\n   these phases result in creation, maintenance and termination\
    \ of state\n   for sessions passing through NAT devices.\n"
- title: 3.2.1. Address binding
  contents:
  - "3.2.1. Address binding\n   Address binding is the phase in which a local node\
    \ IP address is\n   associated with an external address or vice versa, for purposes\
    \ of\n   translation. Address binding is fixed with static address assignments\n\
    \   and is dynamic at session startup time with dynamic address\n   assignments.\
    \ Once the binding between two addresses is in place, all\n   subsequent sessions\
    \ originating from or to this host will use the\n   same binding for session based\
    \ packet translation.\n   New address bindings are made at the start of a new\
    \ session, if such\n   an address binding didn't already exist. Once a local address\
    \ is\n   bound to an external address, all subsequent sessions originating\n \
    \  from the same local address or directed to the same local address\n   will\
    \ use the same binding.\n   The start of each new session will result in the creation\
    \ of a state\n   to facilitate translation of datagrams pertaining to the session.\n\
    \   There can be many simultaneous sessions originating from the same\n   host,\
    \ based on a single address binding.\n"
- title: 3.2.2. Address lookup and translation
  contents:
  - "3.2.2. Address lookup and translation\n   Once a state is established for a session,\
    \ all packets belonging to\n   the session will be subject to address lookup (and\
    \ transport\n   identifier lookup, in some cases) and translation.\n   Address\
    \ or transport identifier translation for a datagram will\n   result in the datagram\
    \ forwarding from the origin address realm to\n   the destination address realm\
    \ with network addresses appropriately\n   updated.\n"
- title: 3.2.3. Address unbinding
  contents:
  - "3.2.3. Address unbinding\n   Address unbinding is the phase in which a private\
    \ address is no\n   longer associated with a global address for purposes of translation.\n\
    \   NAT will perform address unbinding when it believes that the last\n   session\
    \ using an address binding has terminated.  Refer section 2.6\n   for some heuristic\
    \ ways to handle session terminations.\n"
- title: 3.3. ICMP error packet translation
  contents:
  - "3.3. ICMP error packet translation\n   All ICMP error messages (with the exception\
    \ of Redirect message type)\n   will need to be modified, when passed through\
    \ NAT. The ICMP error\n   message types needing NAT modification would include\
    \ Destination-\n   Unreachable, Source-Quench, Time-Exceeded and Parameter-Problem.\
    \  NAT\n   should not attempt to modify a Redirect message type.\n   Changes to\
    \ ICMP error message will include changes to the original IP\n   packet (or portions\
    \ thereof) embedded in the payload of the ICMP\n   error message. In order for\
    \ NAT to be completely transparent to end\n   hosts, the IP address of the IP\
    \ header embedded in the payload of the\n   ICMP packet must be modified, the\
    \ checksum field of the same IP\n   header must correspondingly be modified, and\
    \ the accompanying\n   transport header. The ICMP header checksum must also be\
    \ modified to\n   reflect changes made to the IP and transport headers in the\
    \ payload.\n   Furthermore, the normal IP header must also be modified.\n"
- title: 4.0. Various flavors of NAT
  contents:
  - "4.0. Various flavors of NAT\n   There are many variations of address translation\
    \ that lend themselves\n   to different applications. NAT flavors listed in the\
    \ following sub-\n   sections are by no means exhaustive, but they do capture\
    \ the\n   significant differences that abound.\n   The following diagram will\
    \ be used as a base model to illustrate NAT\n   flavors. Host-A, with address\
    \ Addr-A is located in a private realm,\n   represented by the network N-Pri.\
    \ N-Pri is isolated from external\n   network through a NAT router. Host-X, with\
    \ address Addr-X is located\n   in an external realm, represented by the network\
    \ N-Ext.  NAT router\n   with two interfaces, each attached to one of the realms\
    \ provides\n   transparent routing between the two realms. The interface to the\n\
    \   external realm is assigned an address of Addr-Nx and the interface to\n  \
    \ private realm is assigned an address of Addr-Np.  Further, it may be\n   understood\
    \ that addresses Addr-A and Addr-Np correspond to N-Pri\n   network and the addresses\
    \ Addr-X and Addr-Nx correspond to N-Ext\n   network.\n                      \
    \            ________________\n                                 (            \
    \    )\n                                (   External       )    +--+\n       \
    \                        (  Address Realm     )-- |__|\n                     \
    \           (     (N-Ext)      )   /____\\\n                                 (________________)\
    \    Host-X\n                                        |              (Addr-X)\n\
    \                                        |(Addr-Nx)\n                        \
    \   +--------------+\n                           |              |\n          \
    \                 |  NAT router  |\n                           |             \
    \ |\n                           +--------------+\n                           \
    \  |(Addr-Np)\n                             |\n                     ----------------\n\
    \                    (                )\n        +--+       (     Private    \
    \  )\n        |__|------(    Address Realm   )\n       /____\\      (     (N-pri)\
    \      )\n       Host-A       (________________)\n       (Addr-A)\n          \
    \   Figure 2: A base model to illustrate NAT terms.\n"
- title: 4.1. Traditional NAT (or) Outbound NAT
  contents:
  - "4.1. Traditional NAT (or) Outbound NAT\n   Traditional NAT would allow hosts\
    \ within a private network to\n   transparently access hosts in the external network,\
    \ in most cases.\n   In a traditional NAT, sessions are uni-directional, outbound\
    \ from the\n   private network. This is in contrast with Bi-directional NAT, which\n\
    \   permits sessions in both inbound and outbound directions. A detailed\n   description\
    \ of Bi-directional NAT may be found in section 4.2.\n   The following is a description\
    \ of the properties of realms supported\n   by traditional NAT. IP addresses of\
    \ hosts in external network are\n   unique and valid in external as well as private\
    \ networks. However,\n   the addresses of hosts in private network are unique\
    \ only within the\n   private network and may not be valid in the external network.\
    \ In\n   other words, NAT would not advertise private networks to the external\n\
    \   realm. But, networks from the external realm may be advertised within\n  \
    \ the private network.  The addresses used within private network must\n   not\
    \ overlap with the external addresses. Any given address must\n   either be a\
    \ private address or an external address; not both.\n   A traditional NAT router\
    \ in figure 2 would allow Host-A to initiate\n   sessions to Host-X, but not the\
    \ other way around. Also, N-Ext is\n   routable from within N-Pri, whereas N-Pri\
    \ may not be routable from\n   N-Ext.\n   Traditional NAT is primarily used by\
    \ sites using private addresses\n   that wish to allow outbound sessions from\
    \ their site.\n   There are two variations to traditional NAT, namely Basic NAT\
    \ and\n   NAPT (Network Address Port Translation). These are discussed in the\n\
    \   following sub-sections.\n"
- title: 4.1.1. Basic NAT
  contents:
  - "4.1.1. Basic NAT\n   With Basic NAT, a block of external addresses are set aside\
    \ for\n   translating addresses of hosts in a private domain as they originate\n\
    \   sessions to the external domain. For packets outbound from the\n   private\
    \ network, the source IP address and related fields such as IP,\n   TCP, UDP and\
    \ ICMP header checksums are translated. For inbound\n   packets, the destination\
    \ IP address and the checksums as listed above\n   are translated.\n   A Basic\
    \ NAT router in figure 2 may be configured to translate N-Pri\n   into a block\
    \ of external addresses, say Addr-i through Addr-n,\n   selected from the external\
    \ network N-Ext.\n"
- title: 4.1.2. Network Address Port Translation (NAPT)
  contents:
  - "4.1.2. Network Address Port Translation (NAPT)\n   NAPT extends the notion of\
    \ translation one step further by also\n   translating transport identifier (e.g.,\
    \ TCP and UDP port numbers,\n   ICMP query identifiers). This allows the transport\
    \ identifiers of a\n   number of private hosts to be multiplexed into the transport\n\
    \   identifiers of a single external address. NAPT allows a set of hosts\n   to\
    \ share a single external address. Note that NAPT can be combined\n   with Basic\
    \ NAT so that a pool of external addresses are used in\n   conjunction with port\
    \ translation.\n   For packets outbound from the private network, NAPT would translate\n\
    \   the source IP address, source transport identifier and related fields\n  \
    \ such as IP, TCP, UDP and ICMP header checksums. Transport identifier\n   can\
    \ be one of TCP/UDP port or ICMP query ID. For inbound packets, the\n   destination\
    \ IP address, destination transport identifier and the IP\n   and transport header\
    \ checksums are translated.\n   A NAPT router in figure 2 may be configured to\
    \ translate sessions\n   originated from N-Pri into a single external address,\
    \ say Addr-i.\n   Very often, the external interface address Addr-Nx of NAPT router\
    \ is\n   used as the address to map N-Pri to.\n"
- title: 4.2. Bi-directional NAT (or) Two-Way NAT
  contents:
  - "4.2. Bi-directional NAT (or) Two-Way NAT\n   With a Bi-directional NAT, sessions\
    \ can be initiated from hosts in\n   the public network as well as the private\
    \ network. Private network\n   addresses are bound to globally unique addresses,\
    \ statically or\n   dynamically as connections are established in either direction.\
    \  The\n   name space (i.e., their Fully Qualified Domain Names) between hosts\n\
    \   in private and external networks is assumed to be end-to-end unique.\n   Hosts\
    \ in external realm access private realm hosts by using DNS for\n   address resolution.\
    \ A DNS-ALG must be employed in conjunction with\n   Bi-Directional NAT to facilitate\
    \ name to address mapping.\n   Specifically, the DNS-ALG must be capable of translating\
    \ private\n   realm addresses in DNS Queries and responses into their external\n\
    \   realm address bindings, and vice versa, as DNS packets traverse\n   between\
    \ private and external realms.\n   The address space requirements outlined for\
    \ traditional NAT routers\n   are applicable here as well.\n   A Bi-directional\
    \ NAT router in figure 2 would allow Host-A to\n   initiate sessions to Host-X,\
    \ and Host-X to initiate sessions to\n   Host-A. Just as with traditional NAT,\
    \ N-Ext is routable from within\n   N-Pri, but N-Pri may not be routable from\
    \ N-Ext.\n"
- title: 4.3. Twice NAT
  contents:
  - "4.3. Twice NAT\n   Twice NAT is a variation of NAT in that both the source and\n\
    \   destination addresses are modified by NAT as a datagram crosses\n   address\
    \ realms. This is in contrast to Traditional-NAT and Bi-\n   Directional NAT,\
    \ where only one of the addresses (either source or\n   destination) is translated.\
    \ Note, there is no such term as 'Once-\n   NAT'.\n   Twice NAT is necessary when\
    \ private and external realms have address\n   collisions. The most common case\
    \ where this would happen is when a\n   site had (improperly) numbered its internal\
    \ nodes using public\n   addresses that have been assigned to another organization.\n\
    \   Alternatively, a site may have changed from one provider to another,\n   but\
    \ chosen to keep (internally) the addresses it had been assigned by\n   the first\
    \ provider. That provider might then later reassign those\n   addresses to someone\
    \ else. The key issue in such cases is that the\n   address of the host in the\
    \ external realm may have been assigned the\n   same address as a host within\
    \ the local site. If that address were to\n   appear in a packet, it would be\
    \ forwarded to the internal node rather\n   than through the NAT device to the\
    \ external realm. Twice-NAT attempts\n   to bridge these realms by translating\
    \ both source and destination\n   address of an IP packet, as the packet transitions\
    \ realms.\n   Twice-NAT works as follows. When Host-A wishes to initiate a session\n\
    \   to Host-X, it issues a DNS query for Host-X. A DNS-ALG intercepts the\n  \
    \ DNS query, and in the response returned to Host-A the DNS-ALG\n   replaces the\
    \ address for Host-X with one that is properly routable in\n   the local site\
    \ (say Host-XPRIME). Host A then initiates communication\n   with Host-XPRIME.\
    \ When the packets traverse the NAT device, the\n   source IP address is translated\
    \ (as in the case of traditional NAT)\n   and the destination address is translated\
    \ to Host-X. A similar\n   translation is performed on return packets coming from\
    \ Host-X.\n   The following is a description of the properties of realms supported\n\
    \   by Twice-NAT. Network address of hosts in external network are unique\n  \
    \ in external networks, but not within private network.  Likewise, the\n   network\
    \ address of hosts in private network are unique only within\n   the private network.\
    \ In other words, the address space used in\n   private network to locate hosts\
    \ in private and public networks is\n   unrelated to the address space used in\
    \ public network to locate hosts\n   in private and public networks.  Twice NAT\
    \ would not be allowed to\n   advertise local networks to the external network\
    \ or vice versa.\n   A Twice NAT router in figure 2 would allow Host-A to initiate\n\
    \   sessions to Host-X, and Host-X to initiate sessions to Host-A.\n   However,\
    \ N-Ext (or a subset of N-Ext) is not routable from within N-\n   Pri, and N-Pri\
    \ is not routable from N-Ext.\n   Twice NAT is typically used when address space\
    \ used in a Private\n   network overlaps with addresses used in the Public space.\
    \  For\n   example, say a private site uses the 200.200.200.0/24 address space\n\
    \   which is officially assigned to another site in the public internet.\n   Host_A\
    \ (200.200.200.1) in Private space seeks to connect to Host_X\n   (200.200.200.100)\
    \ in Public space. In order to make this connection\n   work, Host_X's address\
    \ is mapped to a different address for Host_A\n   and vice versa. The twice NAT\
    \ located at the Private site border may\n   be configured as follows:\n     \
    \  Private to Public : 200.200.200.0/24 -> 138.76.28.0/24\n       Public to Private\
    \ : 200.200.200.0/24 -> 172.16.1.0/24\n       Datagram flow  : Host_A(Private)\
    \ ->  Host_X(Public)\n       a) Within private network\n          DA: 172.16.1.100\
    \      SA: 200.200.200.1\n       b) After twice-NAT translation\n         DA:\
    \ 200.200.200.100    SA: 138.76.28.1\n       Datagram flow Host_X (Public) ->\
    \ Host_A (Private)\n       a) Within Public network\n          DA: 138.76.28.1\
    \       SA: 200.200.200.100\n       b) After twice-NAT translation, in private\
    \ network\n          SA: 200.200.200.1     DA: 172.16.1.100\n"
- title: 4.4. Multihomed NAT
  contents:
  - "4.4. Multihomed NAT\n   There are limitations to using NAT. For example, requests\
    \ and\n   responses pertaining to a session must be routed via the same NAT\n\
    \   router, as a NAT router maintains state information for sessions\n   established\
    \ through it. For this reason, it is often suggested that\n   NAT routers be operated\
    \ on a border router unique to a stub domain,\n   where all IP packets are either\
    \ originated from the domain or\n   destined to the domain. However, such a configuration\
    \ would turn a\n   NAT router into a single point of failure.\n   In order for\
    \ a private network to ensure that connectivity with\n   external networks is\
    \ retained even as one of the NAT links fail, it\n   is often desirable to multihome\
    \ the private network to same or\n   multiple service providers with multiple\
    \ connections from the private\n   domain, be it from same or different NAT boxes.\n\
    \   For example, a private network could have links to two different\n   providers\
    \ and the sessions from private hosts could flow through the\n   NAT router with\
    \ the best metric for a destination. When one of NAT\n   routers fail, the other\
    \ could route traffic for all connections.\n   Multiple NAT boxes or multiple\
    \ links on the same NAT box, sharing the\n   same NAT configuration can provide\
    \ fail-safe backup for each other.\n   In such a case, it is necessary for backup\
    \ NAT device to exchange\n   state information so that a backup NAT can take on\
    \ session load\n   transparently when the primary NAT fails. NAT backup becomes\
    \ simpler,\n   when configuration is based on static maps.\n"
- title: 5.0. Realm Specific IP (RSIP)
  contents:
  - "5.0. Realm Specific IP (RSIP)\n   \"Realm Specific IP\" (RSIP) is used to characterize\
    \ the functionality\n   of a realm-aware host in a private realm, which assumes\
    \ realm-\n   specific IP address to communicate with hosts in private or external\n\
    \   realm.\n   A \"Realm Specific IP Client\" (RSIP client) is a host in a private\n\
    \   network that adopts an address in an external realm when connecting\n   to\
    \ hosts in that realm to pursue end-to-end communication. Packets\n   generated\
    \ by hosts on either end in such a setup would be based on\n   addresses that\
    \ are end-to-end unique in the external realm and do not\n   require translation\
    \ by an intermediary process.\n   A \"Realm Specific IP Server\" (RSIP server)\
    \ is a node resident on both\n   private and external realms, that can facilitate\
    \ routing of external\n   realm packets within a private realm. These packets\
    \ may either have\n   been originated by an RSIP client or directed to an RSIP-client.\n\
    \   RSIP-Server may also be the same node that assigns external realm\n   addresses\
    \ to RSIP-Clients.\n   There are two variations to RSIP, namely Realm-specific\
    \ Address IP\n   (RSA-IP) and Realm-Specific Address and Port IP (RSAP-IP). These\n\
    \   variations are discussed in the following sub-sections.\n"
- title: 5.1. Realm Specific Address IP (RSA-IP)
  contents:
  - "5.1. Realm Specific Address IP (RSA-IP)\n   A Realm Specific Address IP (RSA-IP)\
    \ client adopts an IP address from\n   the external address space when connecting\
    \ to a host in external\n   realm. Once an RSA-IP client assumes an external address,\
    \ no other\n   host in private or external domain can assume the same address,\
    \ until\n   that address is released by the RSA-IP client.\n   The following is\
    \ a discussion of routing alternatives that may be\n   pursued for the end-to-end\
    \ RSA-IP packets within private realm.  One\n   approach would be to tunnel the\
    \ packet to the destination. The outer\n   header can be translated by NAT as\
    \ normal without affecting the\n   addresses used in the internal header. Another\
    \ approach would be to\n   set up a bi-directional tunnel between the RSA-IP Client\
    \ and the\n   border router straddling the two address realms. Packets to and\
    \ from\n   the client would be tunneled, but packets would be forwarded as\n \
    \  normal between the border router and the remote destination. Note,\n   the\
    \ tunnel from the client TO the border router may not be necessary.\n   You might\
    \ be able to just forward the packet directly. This should\n   work so long as\
    \ your internal network isn't filtering packets based\n   on source addresses\
    \ (which in this case would be external addresses).\n   As an example, Host-A\
    \ in figure 2 above, could assume an address\n   Addr-k from the external realm\
    \ and act as RSA-IP-Client to allow\n   end-to-end sessions between Addr-k and\
    \ Addr-X. Traversal of end-to-\n   end packets within private realm may be illustrated\
    \ as follows:\n   First method, using NAT router enroute to translate:\n   ===================================================\n\
    \   Host-A               NAT router               Host-X\n   ------          \
    \     -----------              ------\n   <Outer IP header, with\n   src=Addr-A,\
    \ Dest=Addr-X>,\n   embedding\n   <End-to-end packet, with\n   src=Addr-k, Dest=Addr-X>\n\
    \   ----------------------------->\n                        <Outer IP header,\
    \ with\n                        src=Addr-k, Dest=Addr-X>,\n                  \
    \      embedding\n                        <End-to-end packet, with\n         \
    \               src=Addr-k,  Dest=Addr-X>\n                        --------------------------->\n\
    \                             .\n                             .\n            \
    \                 .\n                                              <Outer IP header,\
    \ with\n                                              src=Addr-X, Dest=Addr-k>,\n\
    \                                              embedding\n                   \
    \                           <End-to-end packet, with\n                       \
    \                       src=Addr-X, Dest=Addr-k>\n                           \
    \          <---------------------------------\n                        <Outer\
    \ IP header, with\n                        src=Addr-X, Dest=Addr-A>,\n       \
    \                 embedding <End-to-end packet,\n                        with\
    \ src=Addr-X, Dest=Addr-k>\n              <--------------------------------------\n\
    \   Second method, using a tunnel within private realm:\n   ==================================================\n\
    \   Host-A               NAT router               Host-X\n   ------          \
    \     -----------              ------\n   <Outer IP header, with\n   src=Addr-A,\
    \ Dest=Addr-Np>,\n   embedding\n   <End-to-end packet, with\n   src=Addr-k, Dest=Addr-X>\n\
    \   ----------------------------->\n                        <End-to-end packet,\
    \ with\n                        src=Addr-k, Dest=Addr-X>\n                   \
    \     ------------------------------->\n                             .\n     \
    \                        .\n                             .\n                 \
    \                            <End-to-end packet, with\n                      \
    \                       src=Addr-X, Dest=Addr-k>\n                           \
    \         <--------------------------------\n                        <Outer IP\
    \ header, with\n                        src=Addr-Np, Dest=Addr-A>,\n         \
    \               embedding <End-to-end packet,\n                        with src=Addr-X,\
    \ Dest=Addr-k>\n                  <----------------------------------\n   There\
    \ may be other approaches to pursue.\n   An RSA-IP-Client has the following characteristics.\
    \ The collective\n   set of operations performed by an RSA-IP-Client may be termed\
    \ \"RSA-\n   IP\".\n   1. Aware of the realm to which its peer nodes belong.\n\
    \   2. Assumes an address from external realm when communicating with\n      hosts\
    \ in that realm. Such an address may be assigned statically\n      or obtained\
    \ dynamically (through a yet-to-be-defined protocol)\n      from a node capable\
    \ of assigning addresses from external realm.\n      RSA-IP-Server could be the\
    \ node coordinating external realm\n      address assignment.\n   3. Route packets\
    \ to external hosts using an approach amenable to\n      RSA-IP-Server. In all\
    \ cases, RSA-IP-Client will likely need\n      to act as a tunnel end-point, capable\
    \ of encapsulating\n      end-to-end packets while forwarding and decapsulating\
    \ in the\n      return path.\n   \"Realm Specific Address IP Server\" (RSA-IP\
    \ server) is a node resident\n   on both private and external realms, that facilitates\
    \ routing of\n   external realm packets specific to RSA-IP clients inside a private\n\
    \   realm. An RSA-IP-Server may be described as having the following\n   characteristics.\n\
    \   1. May be configured to assign addresses from external realm to\n      RSA-IP-Clients,\
    \ either statically or dynamically.\n   2. Must be a router resident on both the\
    \ private and external\n      address realms.\n   3. Must be able to provide a\
    \ mechanism to route external realm\n      packets within private realm. Of the\
    \ two approaches described,\n      the first approach requires RSA-IP-Server to\
    \ be a NAT router\n      providing transparent routing for the outer header. This\n\
    \      approach requires the external peer to be a tunnel end-point.\n      With\
    \ the second approach, an RSA-IP-Server could be any router\n      (including\
    \ a NAT router) that can be a tunnel end-point with\n      RSA-IP-Clients.  It\
    \ would detunnel end-to-end packets outbound\n      from RSA-IP-Clients and forward\
    \ to external hosts. On the\n      return path, it would locate RSA-IP-Client\
    \ tunnel, based on the\n      destination address of the end-to-end packet and\
    \ encapsulate the\n      packet in a tunnel to forward to RSA-IP-Client.\n   RSA-IP-Clients\
    \ may pursue any of the IPsec techniques, namely\n   transport or tunnel mode\
    \ Authentication and confidentiality using AH\n   and ESP headers on the embedded\
    \ packets. Any of the tunneling\n   techniques may be adapted for encapsulation\
    \ between RSA-IP-Client and\n   RSA-IP-Server or between RSA-IP-Client and external\
    \ host.  For\n   example, IPsec tunnel mode encapsulation is a valid type of\n\
    \   encapsulation that ensures IPsec authentication and confidentiality\n   for\
    \ the embedded end-to-end packets.\n"
- title: 5.2 Realm Specific Address and port IP (RSAP-IP)
  contents:
  - "5.2 Realm Specific Address and port IP (RSAP-IP)\n   Realm Specific Address and\
    \ port IP (RSAP-IP) is a variation of RSIP\n   in that multiple private hosts\
    \ use a single external address,\n   multiplexing on transport IDentifiers (i.e.,\
    \ TCP/UDP port numbers and\n   ICMP Query IDs).\n   \"RSAP-IP-Client\" may be\
    \ defined similar to RSA-IP-Client with the\n   variation that RSAP-IP-Client\
    \ assumes a tuple of (external address,\n   transport Identifier) when connecting\
    \ to hosts in external realm to\n   pursue end-to-end communication. As such,\
    \ communication with external\n   nodes for an RSAP-IP-Client may be limited to\
    \ TCP, UDP and ICMP\n   sessions.\n   \"RSAP-IP-Server\" is similar to RSA-IP-Server\
    \ in that it facilitates\n   routing of external realm packets specific to RSAP-IP\
    \ clients inside\n   a private realm. Typically, an RSAP-IP-Server would also\
    \ be the one\n   to assign transport tuples to RSAP-IP-Clients.\n   A NAPT router\
    \ enroute could serve as RSAP-IP-Server, when the outer\n   encapsulation is TCP/UDP\
    \ based and is addressed between the RSAP-IP-\n   Client and external peer. This\
    \ approach requires the external peer to\n   be  the end-point of TCP/UDP based\
    \ tunnel. Using this approach,\n   RSAP-IP-Clients may pursue any of the IPsec\
    \ techniques, namely\n   transport or tunnel mode authentication and confidentiality\
    \ using AH\n   and ESP headers on the embedded packets.  Note however, IPsec tunnel\n\
    \   mode is not a valid type of encapsulation, as a NAPT router cannot\n   provide\
    \ routing transparency to AH and ESP protocols.\n   Alternately, packets may be\
    \ tunneled between RSAP-IP-Client and\n   RSAP-IP-Server such that RSAP-IP-Server\
    \ would detunnel packets\n   outbound from RSAP-IP-Clients and forward to external\
    \ hosts. On the\n   return path, RSAP-IP-Server  would locate RSAP-IP-Client tunnel,\n\
    \   based on the tuple of (destination address, transport Identifier) and\n  \
    \ encapsulate the original packet within a tunnel to forward to RSAP-\n   IP-Client.\
    \ With this approach, there is no limitation on the\n   tunneling technique employed\
    \ between RSAP-IP-Client and RSAP-IP-\n   Server. However, there are limitations\
    \ to applying IPsec based\n   security on end-to-end packets.  Transport mode\
    \ based authentication\n   and integrity may be attained.  But, confidentiality\
    \ cannot be\n   permitted because RSAP-IP-Server must be able to examine the\n\
    \   destination transport Identifier in order to identify the RSAP-IP-\n   tunnel\
    \ to forward inbound packets to. For this reason, only the\n   transport mode\
    \ TCP, UDP and ICMP packets protected by AH and ESP-\n   authentication can traverse\
    \ a RSAP-IP-Server using this approach.\n   As an example, say Host-A in figure\
    \ 2 above, obtains a tuple of\n   (Addr-Nx, TCP port T-Nx) from NAPT router to\
    \ act as RSAP-IP-Client to\n   initiate end-to-end TCP sessions with Host-X. \
    \ Traversal of end-to-\n   end packets within private realm may be illustrated\
    \ as follows. In\n   the first method, outer layer of the outgoing packet from\
    \ Host-A uses\n   (private address Addr-A, source port T-Na) as source tuple to\n\
    \   communicate with Host-X. NAPT router enroute translates this tuple\n   into\
    \ (Addr-Nx, Port T-Nxa). This translation is independent of RSAP-\n   IP-Client\
    \ tuple parameters used in the embedded packet.\n   First method, using NAPT router\
    \ enroute to translate:\n   ====================================================\n\
    \   Host-A               NAPT router              Host-X\n   ------          \
    \     -----------              ------\n   <Outer TCP/UDP packet, with\n   src=Addr-A,\
    \ Src Port=T-Na,\n   Dest=Addr-X>,\n   embedding\n   <End-to-end packet, with\n\
    \   src=Addr-Nx, Src Port=T-Nx, Dest=Addr-X>\n   ----------------------------->\n\
    \                        <Outer TCP/UDP packet, with\n                       \
    \ src=Addr-Nx, Src Port=T-Nxa,\n                        Dest=Addr-X>,\n      \
    \                  embedding\n                        <End-to-end packet, with\n\
    \                        src=Addr-Nx, Src Port=T-Nx, Dest=Addr-X>\n          \
    \              --------------------------------------->\n                    \
    \         .\n                             .\n                             .\n\
    \                                             <Outer TCP/UDP packet with\n   \
    \                                          src=Addr-X, Dest=Addr-Nx,\n       \
    \                                      Dest Port=T-Nxa>,\n                   \
    \                          embedding\n                                       \
    \      <End-to-end packet, with\n                                            \
    \ src=Addr-X, Dest=Addr-Nx,\n                                             Dest\
    \ Port=T-Nx>\n                                     <----------------------------------\n\
    \                        <Outer TCP/UDP packet, with\n                       \
    \ src=Addr-X, Dest=Addr-A,\n                        Dest Port=T-Na>,\n       \
    \                 embedding\n                        <End-to-end packet, with\n\
    \                        src=Addr-X, Dest=Addr-Nx,\n                        Dest\
    \ Port=T-Nx>\n              <-----------------------------------\n   Second method,\
    \ using a tunnel within private realm:\n   ==================================================\n\
    \   Host-A               NAPT router              Host-X\n   ------          \
    \     -----------              ------\n   <Outer IP header, with\n   src=Addr-A,\
    \ Dest=Addr-Np>,\n   embedding\n   <End-to-end packet, with\n   src=Addr-Nx, Src\
    \ Port=T-Nx,\n   Dest=Addr-X>\n   ----------------------------->\n           \
    \             <End-to-end packet, with\n                        src=Addr-Nx, Src\
    \ Port=T-Nx,\n                        Dest=Addr-X>\n                        -------------------------------->\n\
    \                             .\n                             .\n            \
    \                 .\n                                             <End-to-end\
    \ packet, with\n                                             src=Addr-X, Dest=Addr-Nx,\n\
    \                                             Dest Port=T-Nx>\n              \
    \                     <----------------------------------\n                  \
    \      <Outer IP header, with\n                        src=Addr-Np, Dest=Addr-A>,\n\
    \                        embedding\n                        <End-to-end packet,\
    \ with\n                        src=Addr-X, Dest=Addr-Nx,\n                  \
    \      Dest Port=T-Nx>\n                <----------------------------------\n"
- title: 6.0. Private Networks and Tunnels
  contents:
  - "6.0. Private Networks and Tunnels\n   Let us consider the case where your private\
    \ network is connected to\n   the external world via tunnels. In such a case,\
    \ tunnel encapsulated\n   traffic may or may not contain translated packets depending\
    \ upon the\n   characteristics of address realms a tunnel is bridging.\n   The\
    \ following subsections discuss two scenarios where tunnels are\n   used (a) in\
    \ conjunction with Address translation, and (b) without\n   translation.\n"
- title: 6.1. Tunneling translated packets
  contents:
  - "6.1. Tunneling translated packets\n   All variations of  address translations\
    \ discussed in the previous\n   section can be applicable to direct connected\
    \ links as well as\n   tunnels and virtual private networks (VPNs).\n   For example,\
    \ a private network connected to a business partner\n   through a VPN could employ\
    \ traditional NAT to communicate with the\n   partner. Likewise, it is possible\
    \ to employ twice NAT, if the\n   partner's address space overlapped with the\
    \ private network.  There\n   could be a NAT device on one end of the tunnel or\
    \ on both ends of the\n   tunnel. In all cases, traffic across the VPN can be\
    \ encrypted for\n   security purposes. Security here refers to security for traffic\n\
    \   across VPNs alone. End-to-end security requires trusting NAT devices\n   within\
    \ private network.\n"
- title: 6.2. Backbone partitioned private Networks
  contents:
  - "6.2. Backbone partitioned private Networks\n   There are many instances where\
    \ a private network (such as a corporate\n   network) is spread over different\
    \ locations and use public backbone\n   for communications between those locations.\
    \ In such cases, it is not\n   desirable to do address translation, both because\
    \ large numbers of\n   hosts may want to communicate across the backbone, thus\
    \ requiring\n   large address tables, and because there will be more applications\n\
    \   that depend on configured addresses, as opposed to going to a name\n   server.\
    \ We call such a private network a backbone-partitioned private\n   network.\n\
    \   Backbone-partitioned stubs should behave as though they were a non-\n   partitioned\
    \ stub. That is, the routers in all partitions should\n   maintain routes to the\
    \ local address spaces of all partitions. Of\n   course, the (public) backbones\
    \ do not maintain routes to any local\n   addresses. Therefore, the border routers\
    \ must tunnel (using VPNs)\n   through the backbones using encapsulation.  To\
    \ do this, each NAT box\n   will set aside a global address for tunneling.\n \
    \  When a NAT box x in stub partition X wishes to deliver a packet to\n   stub\
    \ partition Y, it will encapsulate the packet in an IP header with\n   destination\
    \ address set to the global address of NAT box y that has\n   been reserved for\
    \ encapsulation. When NAT box y receives a packet\n   with that destination address,\
    \ it decapsulates the IP header and\n   routes the packet internally.  Note, there\
    \ is no address translation\n   in the process; merely transfer of private network\
    \ packets over an\n   external network tunnel backbone.\n"
- title: 7.0. NAT operational characteristics
  contents:
  - "7.0. NAT operational characteristics\n   NAT devices are application unaware\
    \ in that the translations are\n   limited to IP/TCP/UDP/ICMP headers and ICMP\
    \ error messages only.  NAT\n   devices do not change the payload of the packets,\
    \ as payloads tend to\n   be application specific.\n   NAT devices (without the\
    \ inclusion of ALGs) do not examine or modify\n   transport payload. For this\
    \ reason, NAT devices are transparent to\n   applications in many cases. There\
    \ are two areas, however, where NAT\n   devices often cause difficulties: 1) when\
    \ an application payload\n   includes an IP address, and 2) when end-to-end security\
    \ is needed.\n   Note, this is not a comprehensive list.\n   Application layer\
    \ security techniques that do not make use of or\n   depend on IP addresses will\
    \ work correctly in the presence of NAT\n   (e.g., TLS,  SSL and ssh). In contrast,\
    \ transport layer techniques\n   such as IPSec transport mode or the TCP MD5 Signature\
    \ Option RFC 2385\n   [Ref 17] do not.\n   In IPSec transport mode, both AH and\
    \ ESP have an integrity check\n   covering the entire payload. When the payload\
    \ is TCP or UDP, the\n   TCP/UDP checksum is covered by the integrity check. When\
    \ a NAT device\n   modifies an address the checksum is no longer valid with respect\
    \ to\n   the new address. Normally, NAT also updates the checksum, but this is\n\
    \   ineffective when AH and ESP are used.  Consequently, receivers will\n   discard\
    \ a packet either because it fails the IPSec integrity check\n   (if the NAT device\
    \ updates the checksum), or because the checksum is\n   invalid (if the NAT device\
    \ leaves the checksum unmodified).\n   Note that IPsec tunnel mode ESP is permissible\
    \ so long as the\n   embedded packet contents are unaffected by the outer IP header\n\
    \   translation. Although this technique does not work in traditional NAT\n  \
    \ deployments (i.e., where hosts are unaware that NATs are present),\n   the technique\
    \ is applicable to Realm-Specific IP as described in\n   Section 5.0.\n   Note\
    \ also that end-to-end ESP based transport mode authentication and\n   confidentiality\
    \ are permissible for packets such as ICMP, whose IP\n   payload content is unaffected\
    \ by the outer IP header translation.\n   NAT devices also break fundamental assumptions\
    \ by public key\n   distribution infrastructures such as Secure DNS RFC 2535 [Ref\
    \ 18] and\n   X.509 certificates with signed public keys. In the case of Secure\n\
    \   DNS, each DNS RRset is signed with a key from within the zone.\n   Moreover,\
    \ the authenticity of a specific key is verified by following\n   a chain of trust\
    \ that goes all the way to the DNS root.  When a DNS-\n   ALG modifies addresses\
    \ (e.g., as in the case of Twice-NAT),\n   verification of signatures fails.\n\
    \   It may be of interest to note that IKE (Session key negotiation\n   protocol)\
    \ is a UDP based session layer protocol and is not protected\n   by network based\
    \ IPsec security. Only a portion of the individual\n   payloads within IKE are\
    \ protected. As a result, IKE sessions are\n   permissible across NAT, so long\
    \ as IKE payload does not contain\n   addresses and/or transport IDs specific\
    \ to one realm and not the\n   other. Given that IKE is used to setup IPSec associations,\
    \ and there\n   are at present no known ways of making IPSec work through a NAT\n\
    \   function, it is a future work item to take advantage of IKE through a\n  \
    \ NAT box.\n   One of the most popular internet applications \"FTP\" would not\
    \ work\n   with the definition of NAT as described. The following sub-section\
    \ is\n   devoted to describing how FTP is supported on NAT devices.  FTP ALG\n\
    \   is an integral part of most NAT implementations. Some vendors may\n   choose\
    \ to include additional ALGs to custom support other\n   applications on the NAT\
    \ device.\n"
- title: 7.1. FTP support
  contents:
  - "7.1. FTP support\n   \"PORT\" command and \"PASV\" response in FTP control session\
    \ payload\n   identify the IP address and TCP port that must be used for the data\n\
    \   session it supports. The arguments to the PORT command and PASV\n   response\
    \ are an IP address and a TCP port in ASCII. An FTP ALG is\n   required to monitor\
    \ and update the FTP control session payload so\n   that information contained\
    \ in the payload is relevant to end nodes.\n   The ALG must also update NAT with\
    \ appropriate data session tuples and\n   session orientation so that NAT could\
    \ set up state information for\n   the FTP data sessions.\n   Because the address\
    \ and TCP port are encoded in ASCII, this may\n   result in a change in the size\
    \ of packet.  For instance,\n   10,18,177,42,64,87 is 18 ASCII characters, whereas\n\
    \   193,45,228,137,64,87 is 20 ASCII characters. If the new size is same\n   as\
    \ the previous, only the TCP checksum needs adjustment as a result\n   of change\
    \ of data. If the new size is less than or greater than the\n   previous, TCP\
    \ sequence numbers must also be changed to reflect the\n   change in length of\
    \ FTP control data portion.  A special table may be\n   used by the ALG to correct\
    \ the TCP sequence and acknowledge numbers.\n   The sequence number and acknowledgement\
    \ correction will need to be\n   performed on all future packet of the connection.\n"
- title: 8.0. NAT limitations
  contents:
  - '8.0. NAT limitations

    '
- title: 8.1. Applications with IP-address Content
  contents:
  - "8.1. Applications with IP-address Content\n   Not All applications lend themselves\
    \ easily to address translation by\n   NAT devices. Especially, the applications\
    \ that carry IP address (and\n   TU port, in case of NAPT) inside the payload.\
    \ Application Level\n   Gateways, or ALGs must be used to perform translations\
    \ on packets\n   pertaining to such applications. ALGs may optionally utilize\
    \ address\n   (and TU port) assignments made by NAT and perform translations\n\
    \   specific to the application. The combination of NAT functionality and\n  \
    \ ALGs will not provide end-to-end security assured by IPsec.  However,\n   tunnel\
    \ mode IPsec can be accomplished with NAT router serving as\n   tunnel end point.\n\
    \   SNMP is one such application with address content in payload. NAT\n   routers\
    \ would not translate IP addresses within SNMP payloads. It is\n   not uncommon\
    \ for an SNMP specific ALG to reside on a NAT router to\n   perform SNMP MIB translations\
    \ proprietary to the private network.\n"
- title: 8.2. Applications with inter-dependent control and data sessions
  contents:
  - "8.2. Applications with inter-dependent control and data sessions\n   NAT devices\
    \ operate on the assumption that each session is\n   independent.  Session characteristics\
    \ like session orientation,\n   source and destination IP addresses, session protocol,\
    \ and source and\n   destination transport level identifiers are determined independently\n\
    \   at the start of each new session.\n   However, there are applications such\
    \ as H.323 that use one or more\n   control sessions to set the characteristics\
    \ of the follow-on sessions\n   in their control session payload. Such applications\
    \ require use of\n   application specific ALGs that can interpret and translate\
    \ the\n   payload, if necessary. Payload interpretation would help NAT be\n  \
    \ prepared for the follow-on data sessions.\n"
- title: 8.3. Debugging Considerations
  contents:
  - "8.3. Debugging Considerations\n   NAT increases the probability of mis-addressing.\
    \ For example, same\n   local address may be bound to different global address\
    \ at different\n   times and vice versa. As a result, any traffic flow study based\n\
    \   purely on global addresses and TU ports could be confused and might\n   misinterpret\
    \ the results.\n   If a host is abusing the Internet in some way (such as trying\
    \ to\n   attack another machine or even sending large amounts of junk mail or\n\
    \   something) it is more difficult to pinpoint the source of the trouble\n  \
    \ because the IP address of the host is hidden in a NAT router.\n"
- title: 8.4. Translation of fragmented FTP control packets
  contents:
  - "8.4. Translation of fragmented FTP control packets\n   Translation of fragmented\
    \ FTP control packets is tricky when the\n   packets contain \"PORT\" command\
    \ or response to \"PASV\" command.\n   Clearly, this is a pathological case. NAT\
    \ router would need to\n   assemble the fragments together first and then translate\
    \ prior to\n   forwarding.\n   Yet another case would be when each character of\
    \ packets containing\n   \"PORT\" command or response to \"PASV\" is sent in a\
    \ separate datagram,\n   unfragmented. In this case, NAT would simply have to\
    \ let the packets\n   through, without translating the TCP payload. Of course,\
    \ the\n   application will fail if the payload needed to be altered. The\n   application\
    \ could still work in a few cases, where the payload\n   contents can be valid\
    \ in both realms, without modifications enroute.\n   For example, FTP originated\
    \ from a private host would still work\n   while traversing a traditional NAT\
    \ or bi-directional NAT device, so\n   long as the FTP control session employed\
    \ PASV command to establish\n   data sessions. The reason being that the address\
    \ and port number\n   specified by FTP server in the PASV response (sent as multiple\n\
    \   unfragmented packets) is valid to the private host, as is. The NAT\n   device\
    \ will simply view the ensuing data session (also originating\n   from private\
    \ host) as an independent TCP session.\n"
- title: 8.5. Compute intensive
  contents:
  - "8.5. Compute intensive\n   NAT is compute intensive even with the help of a clever\
    \ checksum\n   adjustment algorithm, as each data packet is subject to NAT lookup\n\
    \   and modifications.  As a result, router forwarding throughput could\n   be\
    \ slowed considerably. However, so long as the processing capacity\n   of the\
    \ NAT device exceeds line processing rate, this should not be a\n   problem.\n"
- title: 9.0. Security Considerations
  contents:
  - "9.0. Security Considerations\n   Many people view traditional NAT router as a\
    \ one-way (session)\n   traffic filter, restricting sessions from external hosts\
    \ into their\n   machines. In addition, when address assignment in NAT router\
    \ is done\n   dynamically, that makes it harder for an attacker to point to any\n\
    \   specific host in the NAT domain. NAT routers may be used in\n   conjunction\
    \ with firewalls to filter unwanted traffic.\n   If NAT devices and ALGs are not\
    \ in a trusted boundary, that is a\n   major security problem, as ALGs could snoop\
    \ end user traffic payload.\n   Session level payload could be encrypted end to\
    \ end, so long as the\n   payload does not contain IP addresses and/or transport\
    \ identifiers\n   that are valid in only one of the realms. With the exception\
    \ of RSIP,\n   end-to-end IP network level security assured by current IPsec\n\
    \   techniques is not attainable with NAT devices in between. One of the\n   ends\
    \ must be a NAT box. Refer section 7.0 for a discussion on why\n   end-to-end\
    \ IPsec security cannot be assured with NAT devices along\n   the route.\n   The\
    \ combination of NAT functionality, ALGs and firewalls will provide\n   a transparent\
    \ working environment for a private networking domain.\n   With the exception\
    \ of RSIP, end-to-end network security assured by\n   IPsec cannot be attained\
    \ for end-hosts within the private network\n   (Refer section 5.0 for RSIP operation).\
    \ In all other cases, if you\n   want to use end-to-end IPsec, there cannot be\
    \ a NAT device in the\n   path. If we make the assumption that NAT devices are\
    \ part of a\n   trusted boundary, tunnel mode IPsec can be accomplished with NAT\n\
    \   router (or a combination of NAT, ALGs and firewall) serving as tunnel\n  \
    \ end point.\n   NAT devices, when combined with ALGs, can ensure that the datagrams\n\
    \   injected into Internet have no private addresses in headers or\n   payload.\
    \ Applications that do not meet these requirements may be\n   dropped using firewall\
    \ filters. For this reason, it is not uncommon\n   to find NAT, ALG and firewall\
    \ functions co-exist to provide security\n   at the borders of a private network.\
    \ NAT gateways can be used as\n   tunnel end points to provide secure VPN transport\
    \ of packet data\n   across an external network domain.\n   Below are some additional\
    \ security considerations associated with NAT\n   routers.\n   1. UDP sessions\
    \ are inherently unsafe. Responses to a datagram\n      could come from an address\
    \ different from the target address\n      used by sender ([Ref 4]). As a result,\
    \ an incoming UDP packet\n      might match the outbound session of a traditional\
    \ NAT router\n      only in part (the destination address and UDP port number\
    \ of\n      the packet match, but the source address and port number may\n   \
    \   not). In such a case, there is a potential security compromise\n      for\
    \ the NAT device in permitting inbound packets with partial\n      match. This\
    \ UDP security issue is also inherent to firewalls.\n      Traditional NAT implementations\
    \ that do not track datagrams on\n      a per-session basis but lump states of\
    \ multiple UDP sessions\n      using the same address binding into a single unified\
    \ session\n      could compromise the security even further. This is because,\n\
    \      the granularity of packet matching would be further limited to\n      just\
    \ the destination address of the inbound UDP packets.\n   2. Multicast sessions\
    \ (UDP based) are another source for security\n      weakness for traditional-NAT\
    \ routers. Once again, firewalls face\n      the same security dilemma as the\
    \ NAT routers.\n      Say, a host on private network initiated a multicast session.\n\
    \      Datagram sent by the private host could trigger responses in the\n    \
    \  reverse direction from multiple external hosts. Traditional-NAT\n      implementations\
    \ that use a single state to track a multicast\n      session cannot determine\
    \ for certain if the incoming UDP packet\n      is in response to an existing\
    \ multicast session or the start of\n      new UDP session initiated by an attacker.\n\
    \   3. NAT devices can be a target for attacks.\n      Since NAT devices are Internet\
    \ hosts they can be the target of a\n      number of different attacks, such as\
    \ SYN flood and ping flood\n      attacks. NAT devices should employ the same\
    \ sort of protection\n      techniques as Internet-based servers do.\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   [1]  Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot,G. and\
    \ E.\n        Lear, \"Address Allocation for Private Internets\", BCP 5, RFC\n\
    \        1918, February 1996.\n   [2]  Reynolds, J. and J. Postel, \"Assigned\
    \ Numbers\", STD 2, RFC 1700,\n        October, 1994.\n   [3]  Braden, R., \"\
    Requirements for Internet Hosts -- Communication\n        Layers\", STD 3, RFC\
    \ 1122, October 1989.\n   [4]  Braden, R., \"Requirements for Internet Hosts --\
    \ Application and\n        Support\", STD 3, RFC 1123, October 1989.\n   [5] \
    \ Baker, F., \"Requirements for IP Version 4 Routers\", RFC 1812,\n        June\
    \ 1995.\n   [6]  Postel, J. and J. Reynolds, \"File Transfer Protocol (FTP)\"\
    , STD\n        9, RFC 959, October 1985.\n   [7]  Postel, J., \"Transmission Control\
    \ Protocol (TCP) Specification\",\n        STD 7,  RFC 793, September 1981.\n\
    \   [8]  Postel, J., \"Internet Control Message Protocol Specification\"\n   \
    \     STD 5, RFC 792, September 1981.\n   [9]  Postel, J., \"User Datagram Protocol\
    \ (UDP)\", STD 6, RFC 768,\n        August 1980.\n   [10] Mogul, J. and J. Postel,\
    \ \"Internet Standard Subnetting\n        Procedure\", STD 5, RFC 950, August\
    \ 1985.\n   [11] Carpenter, B., Crowcroft, J. and Y. Rekhter, \"IPv4 Address\n\
    \        Behavior Today\", RFC 2101, February 1997.\n   [12] Kent, S. and  R.\
    \ Atkinson, \"Security Architecture for the\n        Internet Protocol\", RFC\
    \ 2401, November 1998.\n   [13] Kent, S. and  R. Atkinson, \"IP Encapsulating\
    \ Security Payload\n        (ESP)\", RFC 2406, November 1998.\n   [14] Kent, S.\
    \ and  R. Atkinson, \"IP Authentication Header\", RFC 2402,\n        November\
    \ 1998.\n   [15] Harkins, D. and  D. Carrel, \"The Internet Key Exchange (IKE)\"\
    ,\n        RFC 2409, November 1998.\n   [16] Piper, D., \"The Internet IP Security\
    \ Domain of Interpretation\n        for ISAKMP\", RFC 2407, November 1998.\n \
    \  [17] Heffernan, A., \"Protection of BGP Sessions via the TCP MD5\n        Signature\
    \ Option\", RFC 2385, August 1998.\n   [18] Eastlake, D., \"Domain Name System\
    \ Security Extensions\", RFC\n        2535, March 1999.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Pyda Srisuresh\n   Lucent Technologies\n   4464 Willow\
    \ Road\n   Pleasanton, CA 94588-8519\n   U.S.A.\n   Phone: (925) 737-2153\n  \
    \ Fax:   (925) 737-2110\n   EMail: srisuresh@lucent.com\n   Matt Holdrege\n  \
    \ Lucent Technologies\n   1701 Harbor Bay Parkway\n   Alameda, CA 94502\n   Phone:\
    \ (510) 769-6001\n   EMail: holdrege@lucent.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
