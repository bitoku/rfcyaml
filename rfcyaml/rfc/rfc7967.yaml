- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                  A. Bhattacharyya
  contents:
  - "Independent Submission                                  A. Bhattacharyya\n Constrained\
    \ Application Protocol (CoAP) Option for No Server Response\n"
- title: Abstract
  contents:
  - "Abstract\n   There can be machine-to-machine (M2M) scenarios where server\n \
    \  responses to client requests are redundant.  This kind of open-loop\n   exchange\
    \ (with no response path from the server to the client) may be\n   desired to\
    \ minimize resource consumption in constrained systems while\n   updating many\
    \ resources simultaneously or performing high-frequency\n   updates.  CoAP already\
    \ provides Non-confirmable (NON) messages that\n   are not acknowledged by the\
    \ recipient.  However, the request/response\n   semantics still require the server\
    \ to respond with a status code\n   indicating \"the result of the attempt to\
    \ understand and satisfy the\n   request\", per RFC 7252.\n   This specification\
    \ introduces a CoAP option called 'No-Response'.\n   Using this option, the client\
    \ can explicitly express to the server\n   its disinterest in all responses against\
    \ the particular request.\n   This option also provides granular control to enable\
    \ expression of\n   disinterest to a particular response class or a combination\
    \ of\n   response classes.  The server MAY decide to suppress the response by\n\
    \   not transmitting it back to the client according to the value of the\n   No-Response\
    \ option in the request.  This option may be effective for\n   both unicast and\
    \ multicast requests.  This document also discusses a\n   few examples of applications\
    \ that benefit from this option.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7967.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Potential Benefits .........................................4\n  \
    \    1.2. Terminology ................................................4\n   2.\
    \ Option Definition ...............................................5\n      2.1.\
    \ Granular Control over Response Suppression .................5\n      2.2. Method-Specific\
    \ Applicability Considerations ...............8\n   3. Miscellaneous Aspects ...........................................9\n\
    \      3.1. Reusing Tokens .............................................9\n  \
    \    3.2. Taking Care of Congestion Control and Server-Side\n           Flow Control\
    \ ..............................................10\n      3.3. Considerations\
    \ regarding Caching of Responses .............11\n      3.4. Handling the No-Response\
    \ Option for a HTTP-to-CoAP\n           Reverse Proxy .............................................11\n\
    \   4. Application Scenarios ..........................................12\n  \
    \    4.1. Frequent Update of Geolocation from Vehicles to\n           Backend\
    \ Server ............................................12\n           4.1.1. Using\
    \ No-Response with PUT .........................13\n           4.1.2. Using No-Response\
    \ with POST ........................14\n                  4.1.2.1. POST Updating\
    \ a Fixed Target Resource .....14\n                  4.1.2.2. POST Updating through\
    \ Query String ........15\n      4.2. Multicasting Actuation Command from a Handheld\
    \ Device\n           to a Group of Appliances ..................................15\n\
    \           4.2.1. Using Granular Response Suppression ................16\n  \
    \ 5. IANA Considerations ............................................16\n   6.\
    \ Security Considerations ........................................16\n   7. References\
    \ .....................................................16\n      7.1. Normative\
    \ References ......................................16\n      7.2. Informative\
    \ References ....................................17\n   Acknowledgments ...................................................18\n\
    \   Authors' Addresses ................................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification defines a new option for the Constrained\n\
    \   Application Protocol (CoAP) [RFC7252] called 'No-Response'.  This\n   option\
    \ enables clients to explicitly express their disinterest in\n   receiving responses\
    \ back from the server.  The disinterest can be\n   expressed at the granularity\
    \ of response classes (e.g., 2.xx) or a\n   combination of classes (e.g., 2.xx\
    \ and 5.xx).  By default, this\n   option indicates interest in all response classes.\
    \  The server MAY\n   decide to suppress the response by not transmitting it back\
    \ to the\n   client according to the value of the No-Response option in the\n\
    \   request.\n   Along with the technical details, this document presents some\n\
    \   practical application scenarios that highlight the usefulness of this\n  \
    \ option.  [ITS-LIGHT] and [CoAP-ADAPT] contain the background research\n   for\
    \ this document.\n   In this document, when it is mentioned that a request from\
    \ a client\n   is with No-Response, the intended meaning is that the client\n\
    \   expresses its disinterest for all or some selected classes of\n   responses.\n"
- title: 1.1.  Potential Benefits
  contents:
  - "1.1.  Potential Benefits\n   The use of the No-Response option should be driven\
    \ by typical\n   application requirements and, particularly, characteristics of\
    \ the\n   information to be updated.  If this option is opportunistically used\n\
    \   in a fitting M2M application, then the concerned system may benefit\n   in\
    \ the following aspects.  (However, note that this option is\n   elective, and\
    \ servers can simply ignore the preference expressed by\n   the client.)\n   \
    \   *  Reduction in network congestion due to effective reduction of\n       \
    \  the overall traffic.\n      *  Reduction in server-side load by relieving the\
    \ server from\n         responding to requests for which responses are not necessary.\n\
    \      *  Reduction in battery consumption at the constrained\n         endpoint(s).\n\
    \      *  Reduction in overall communication cost.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The terms used in this document are in conformance with\
    \ those defined\n   in [RFC7252].\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Option Definition
  contents:
  - "2.  Option Definition\n   The properties of the No-Response option are given\
    \ in Table 1.  In\n   this table, the C, U, N, and R columns indicate the properties\n\
    \   Critical, Unsafe, NoCacheKey, and Repeatable, respectively.\n   +--------+---+---+---+---+-------------+--------+--------+---------+\n\
    \   | Number | C | U | N | R |   Name      | Format | Length | Default |\n   +--------+---+---+---+---+-------------+--------+--------+---------+\n\
    \   |   258  |   | X | - |   | No-Response |  uint  |  0-1   |    0    |\n   +--------+---+---+---+---+-------------+--------+--------+---------+\n\
    \                       Table 1: Option Properties\n   This option is a request\
    \ option.  It is elective and not repeatable.\n   This option is Unsafe-to-Forward,\
    \ as the intermediary MUST know how\n   to interpret this option.  Otherwise,\
    \ the intermediary (without\n   knowledge about the special unidirectional nature\
    \ of the request)\n   would wait for responses.\n   Note: Since CoAP maintains\
    \ a clear separation between the\n      request/response and the message sub-layer,\
    \ this option does not\n      have any dependency on the type of message\n   \
    \   (Confirmable/Non-confirmable).  So, even the absence of a message\n      sub-layer\
    \ (e.g., CoAP over TCP [CoAP-TCP-TLS]) should have no\n      effect on the interpretation\
    \ of this option.  However, considering\n      the CoAP-over-UDP scenario [RFC7252],\
    \ NON messages are best suited\n      to this option because of the expected benefits.\
    \  Using\n      No-Response with NON messages gets rid of any kind of reverse\n\
    \      traffic, and the interaction becomes completely open loop.\n      Using\
    \ this option with CON requests may not serve the desired\n      purpose if piggybacked\
    \ responses are triggered.  But, if the\n      server responds with a separate\
    \ response (which, perhaps, the\n      client does not care about), then this\
    \ option can be useful.\n      Suppressing the separate response reduces traffic\
    \ by one\n      additional CoAP message in this case.\n   This option contains\
    \ values to indicate disinterest in all or a\n   particular class or combination\
    \ of classes of responses as described\n   in Section 2.1.\n"
- title: 2.1.  Granular Control over Response Suppression
  contents:
  - "2.1.  Granular Control over Response Suppression\n   This option enables granular\
    \ control over response suppression by\n   allowing the client to express its\
    \ disinterest in a typical class or\n   combination of classes of responses. \
    \ For example, a client may\n   explicitly tell the receiver that no response\
    \ is required unless\n   something 'bad' happens and a response of class 4.xx\
    \ or 5.xx is to be\n   fed back to the client.  No response of the class 2.xx\
    \ is required in\n   such case.\n   Note: Section 2.7 of [RFC7390] describes a\
    \ scheme where a server in\n      the multicast group may decide on its own to\
    \ suppress responses\n      for group communication with granular control.  The\
    \ client does\n      not have any knowledge about that.  However, on the other\
    \ hand,\n      the No-Response option enables the client to explicitly inform\
    \ the\n      servers about its disinterest in responses.  Such explicit control\n\
    \      on the client side may be helpful for debugging network resources.\n  \
    \    An example scenario is described in Section 4.2.1.\n   The server MUST send\
    \ back responses of the classes for which the\n   client has not expressed any\
    \ disinterest.  There may be instances\n   where a server, on its own, decides\
    \ to suppress responses.  An\n   example is suppression of responses by multicast\
    \ servers as described\n   in Section 2.7 of [RFC7390].  If such a server receives\
    \ a request\n   with a No-Response option showing 'interest' in specific response\n\
    \   classes (i.e., not expressing disinterest for these options), then\n   any\
    \ default behavior of suppressing responses, if present, MUST be\n   overridden\
    \ to deliver those responses that are of interest to the\n   client.\n   So, for\
    \ example, suppose a multicast server suppresses all responses\n   by default\
    \ and receives a request with a No-Response option\n   expressing disinterest\
    \ in 2.xx (success) responses only.  Note that\n   the option value naturally\
    \ expresses interest in error responses 4.xx\n   and 5.xx in this case.  Thus,\
    \ the server must send back a response if\n   the concerned request caused an\
    \ error.\n   The option value is defined as a bit map (Table 2) to achieve\n \
    \  granular suppression.  Its length can be 0 bytes (empty) or 1 byte.\n   +-------+-----------------------+-----------------------------------+\n\
    \   | Value | Binary Representation |          Description              |\n  \
    \ +-------+-----------------------+-----------------------------------+\n   |\
    \   0   |      <empty>          | Interested in all responses.      |\n   +-------+-----------------------+-----------------------------------+\n\
    \   |   2   |      00000010         | Not interested in 2.xx responses. |\n  \
    \ +-------+-----------------------+-----------------------------------+\n   |\
    \   8   |      00001000         | Not interested in 4.xx responses. |\n   +-------+-----------------------+-----------------------------------+\n\
    \   |  16   |      00010000         | Not interested in 5.xx responses. |\n  \
    \ +-------+-----------------------+-----------------------------------+\n    \
    \                      Table 2: Option Values\n   The conventions used in deciding\
    \ the option values are:\n   1.  To suppress an individual class: Set bit number\
    \ (n-1) starting\n       from the least significant bit (bit number 0) to suppress\
    \ all\n       responses belonging to class n.xx.  So,\n               option value\
    \ to suppress n.xx class = 2**(n-1)\n   2.  To suppress a combination of classes:\
    \ Set each corresponding bit\n       according to point 1 above.  Example: The\
    \ option value will be 18\n       (binary: 00010010) to suppress both 2.xx and\
    \ 5.xx responses.\n       This is essentially bitwise OR of the corresponding\
    \ individual\n       values for suppressing 2.xx and 5.xx.  The \"CoAP Response\
    \ Codes\"\n       registry (see Section 12.1.2 of [RFC7252]) defines 2.xx, 4.xx,\n\
    \       and 5.xx responses.  So, an option value of 26 (binary: 00011010)\n  \
    \     will request to suppress all response codes defined in [RFC7252].\n   Note:\
    \ When No-Response is used with value 26 in a request, the client\n      endpoint\
    \ SHOULD cease listening to response(s) to the particular\n      request.  On\
    \ the other hand, showing interest in at least one\n      class of response means\
    \ that the client endpoint can no longer\n      completely cease listening activity\
    \ and must be configured to\n      listen during some application specific time-out\
    \ period for the\n      particular request.  The client endpoint never knows whether\
    \ the\n      present request will be a success or a failure.  Thus, for\n    \
    \  example, if the client decides to open up the response for errors\n      (4.xx\
    \ and 5.xx), then it has to wait for the entire time-out\n      period -- even\
    \ for the instances where the request is successful\n      (and the server is\
    \ not supposed to send back a response).  Note\n      that in this context there\
    \ may be situations when the response to\n      errors might get lost.  In such\
    \ a situation, the client would wait\n      during the time-out period but would\
    \ not receive any response.\n      However, this should not give the client the\
    \ impression that the\n      request was necessarily successful.  In other words,\
    \ in this case,\n      the client cannot distinguish between response suppression\
    \ and\n      message loss.  The application designer needs to tackle this\n  \
    \    situation.  For example, while performing frequent updates, the\n      client\
    \ may strategically interweave requests without No-Response\n      option into\
    \ a series of requests with No-Response to check\n      periodically that things\
    \ are fine at the server end and the server\n      is actively responding.\n"
- title: 2.2.  Method-Specific Applicability Considerations
  contents:
  - "2.2.  Method-Specific Applicability Considerations\n   The following table provides\
    \ a ready reference on the possible\n   applicability of this option with four\
    \ REST methods.  This table is\n   for the type of possible interactions foreseen\
    \ at the time of\n   preparing this specification.  The key words from RFC 2119\
    \ such as\n   \"SHOULD NOT\", etc., deliberately have not been used in this table\n\
    \   because it only contains suggestions.\n   +-------------+----------------------------------------------------+\n\
    \   | Method Name |              Remarks on Applicability              |\n   +-------------+----------------------------------------------------+\n\
    \   |             | This should not be used with a conventional GET    |\n   |\
    \             | request when the client requests the contents      |\n   |   \
    \          | of a resource.  However, this option may be useful |\n   |      \
    \       | for exceptional cases where GET requests have side |\n   |     GET \
    \    | effects.  For instance, the proactive cancellation |\n   |            \
    \ | procedure for observing a request [RFC7641]        |\n   |             | requires\
    \ a client to issue a GET request with the  |\n   |             | Observe option\
    \ set to 1 ('deregister').  If it is  |\n   |             | more efficient to\
    \ use this deregistration instead  |\n   |             | of reactive cancellation\
    \ (rejecting the next       |\n   |             | notification with RST), the\
    \ client MAY express its |\n   |             | disinterest in the response to\
    \ such a GET request. |\n   +-------------+----------------------------------------------------+\n\
    \   |             | Suitable for frequent updates (particularly in NON |\n   |\
    \             | messages) on existing resources.  Might not be     |\n   |   \
    \          | useful when PUT is used to create a new resource,  |\n   |      \
    \       | as it may be important for the client to know that |\n   |     PUT \
    \    | the resource creation was actually successful in   |\n   |            \
    \ | order to carry out future actions.  Also, it may be|\n   |             | important\
    \ to ensure that a resource was actually   |\n   |             | created rather\
    \ than updating an existing resource. |\n   +-------------+----------------------------------------------------+\n\
    \   |             | If POST is used to update a target resource,       |\n   |\
    \             | then No-Response can be used in the same manner as |\n   |   \
    \          | in PUT.  This option may also be useful while      |\n   |     POST\
    \    | updating through query strings rather than updating|\n   |            \
    \ | a fixed target resource (see Section 4.1.2.2 for an|\n   |             | example).\
    \                                          |\n   +-------------+----------------------------------------------------+\n\
    \   |             | Deletion is usually a permanent action.  If the    |\n   |\
    \    DELETE   | client wants to ensure that the deletion request   |\n   |   \
    \          | was properly executed, then this option should not |\n   |      \
    \       | be used with the request.                          |\n   +-------------+----------------------------------------------------+\n\
    \    Table 3: Suggested Applicability of No-Response with REST Methods\n"
- title: 3.  Miscellaneous Aspects
  contents:
  - "3.  Miscellaneous Aspects\n   This section further describes important implementation\
    \ aspects worth\n   considering while using the No-Response option.  The following\n\
    \   discussion contains guidelines and requirements (derived by combining\n  \
    \ [RFC7252], [RFC7390], and [RFC5405]) for the application developer.\n"
- title: 3.1.  Reusing Tokens
  contents:
  - "3.1.  Reusing Tokens\n   Tokens provide a matching criteria between a request\
    \ and the\n   corresponding response.  The life of a Token starts when it is\n\
    \   assigned to a request and ends when the final matching response is\n   received.\
    \  Then, the Token can again be reused.  However, a request\n   with No-Response\
    \ typically does not have any guaranteed response\n   path.  So, the client has\
    \ to decide on its own about when it can\n   retire a Token that has been used\
    \ in an earlier request so that the\n   Token can be reused in a future request.\
    \  Since the No-Response\n   option is 'elective', a server that has not implemented\
    \ this option\n   will respond back.  This leads to the following two scenarios:\n\
    \   The first scenario is when the client is never going to care about\n   any\
    \ response coming back or about relating the response to the\n   original request.\
    \  In that case, it MAY reuse the Token value at\n   liberty.\n   However, as\
    \ a second scenario, let us consider that the client sends\n   two requests where\
    \ the first request is with No-Response and the\n   second request (with the same\
    \ Token) is without No-Response.  In this\n   case, a delayed response to the\
    \ first one can be interpreted as a\n   response to the second request (client\
    \ needs a response in the second\n   case) if the time interval between using\
    \ the same Token is not long\n   enough.  This creates a problem in the request-response\
    \ semantics.\n   The most ideal solution would be to always use a unique Token\
    \ for\n   requests with No-Response.  But if a client wants to reuse a Token,\n\
    \   then in most practical cases the client implementation SHOULD\n   implement\
    \ an application-specific reuse time after which it can reuse\n   the Token. \
    \ A minimum reuse time for Tokens with a similar expression\n   as in Section\
    \ 2.5 of [RFC7390] SHOULD be used:\n   TOKEN_REUSE_TIME = NON_LIFETIME + MAX_SERVER_RESPONSE_DELAY\
    \ +\n                      MAX_LATENCY\n   NON_LIFETIME and MAX_LATENCY are defined\
    \ in Section 4.8.2 of\n   [RFC7252].  MAX_SERVER_RESPONSE_DELAY has the same interpretation\
    \ as\n   in Section 2.5 of [RFC7390] for a multicast request.  For a unicast\n\
    \   request, since the message is sent to only one server,\n   MAX_SERVER_RESPONSE_DELAY\
    \ means the expected maximum response delay\n   from the particular server to\
    \ that client that sent the request.  For\n   multicast requests, MAX_SERVER_RESPONSE_DELAY\
    \ has the same\n   interpretation as in Section 2.5 of [RFC7390].  So, for multicast\
    \ it\n   is the expected maximum server response delay \"over all servers that\n\
    \   the client can send a multicast request to\", per [RFC7390].  This\n   response\
    \ delay for a given server includes its specific Leisure\n   period; where Leisure\
    \ is defined in Section 8.2 of [RFC7252].  In\n   general, the Leisure for a server\
    \ may not be known to the client.  A\n   lower bound for Leisure, lb_Leisure,\
    \ is defined in [RFC7252], but not\n   an upper bound as is needed in this case.\
    \  Therefore, the upper bound\n   can be estimated by taking N (N>>1) times the\
    \ lower bound lb_Leisure:\n                          lb_Leisure = S * G / R\n\
    \   where\n   S = estimated response size\n   G = group size estimate\n   R =\
    \ data transfer rate\n   Any estimate of MAX_SERVER_RESPONSE_DELAY MUST be larger\
    \ than\n   DEFAULT_LEISURE, as defined in [RFC7252].\n   Note: If it is not possible\
    \ for the client to get a reasonable\n      estimate of the MAX_SERVER_RESPONSE_DELAY,\
    \ then the client, to be\n      safe, SHOULD use a unique Token for each stream\
    \ of messages.\n"
- title: 3.2.  Taking Care of Congestion Control and Server-Side Flow Control
  contents:
  - "3.2.  Taking Care of Congestion Control and Server-Side Flow Control\n   This\
    \ section provides guidelines for basic congestion control.\n   Better congestion\
    \ control mechanisms can be designed as future work.\n   If this option is used\
    \ with NON messages, then the interaction\n   becomes completely open loop.  The\
    \ absence of any feedback from the\n   server-end affects congestion-control mechanisms.\
    \  In this case, the\n   communication pattern maps to the scenario where the\
    \ application\n   cannot maintain an RTT estimate as described in Section 3.1.2\
    \ of\n   [RFC5405].  Hence, per [RFC5405], a 3-second interval is suggested as\n\
    \   the minimum interval between successive updates, and it is suggested\n   to\
    \ use an even less aggressive rate when possible.  However, in case\n   of a higher\
    \ rate of updates, the application MUST have some knowledge\n   about the channel,\
    \ and an application developer MUST interweave\n   occasional closed-loop exchanges\
    \ (e.g., NON messages without\n   No-Response, or CON messages) to get an RTT\
    \ estimate between the\n   endpoints.\n   Interweaving requests without No-Response\
    \ is a MUST in case of an\n   aggressive request rate for applications where server-side\
    \ flow\n   control is necessary.  For example, as proposed in [CoAP-PUBSUB], a\n\
    \   broker MAY return 4.29 (Too Many Requests) in order to request a\n   client\
    \ to slow down the request rate.  Interweaving requests without\n   No-Response\
    \ allows the client to listen to such a response.\n"
- title: 3.3.  Considerations regarding Caching of Responses
  contents:
  - "3.3.  Considerations regarding Caching of Responses\n   The cacheability of CoAP\
    \ responses does not depend on the request\n   method, but it depends on the Response\
    \ Code.  The No-Response option\n   does not lead to any impact on cacheability\
    \ of responses.  If a\n   request containing No-Response triggers a cacheable\
    \ response, then\n   the response MUST be cached.  However, the response MAY not\
    \ be\n   transmitted considering the value of the No-Response option in the\n\
    \   request.\n   For example, if a request with No-Response triggers a cacheable\n\
    \   response of 4.xx class with Max-Age not equal to 0, then the response\n  \
    \ must be cached.  The cache will return the response to subsequent\n   similar\
    \ requests without No-Response as long as the Max-Age has not\n   elapsed.\n"
- title: 3.4.  Handling the No-Response Option for a HTTP-to-CoAP Reverse Proxy
  contents:
  - "3.4.  Handling the No-Response Option for a HTTP-to-CoAP Reverse Proxy\n   A\
    \ HTTP-to-CoAP reverse proxy MAY translate an incoming HTTP request\n   to a corresponding\
    \ CoAP request indicating that no response is\n   required (showing disinterest\
    \ in all classes of responses) based on\n   some application-specific requirement.\
    \  In this case, it is\n   RECOMMENDED that the reverse proxy generate an HTTP\
    \ response with\n   status code 204 (No Content) when such response is allowed.\
    \  The\n   generated response is sent after the proxy has successfully sent out\n\
    \   the CoAP request.\n   If the reverse proxy applies No-Response for one or\
    \ more classes of\n   responses, it will wait for responses up to an application-specific\n\
    \   maximum time (T_max) before responding to the HTTP side.  If a\n   response\
    \ of a desired class is received within T_max, then the\n   response gets translated\
    \ to HTTP as defined in [HTTP-to-CoAP].\n   However, if the proxy does not receive\
    \ any response within T_max, it\n   is RECOMMENDED that the reverse Proxy send\
    \ an HTTP response with\n   status code 204 (No Content) when allowed for the\
    \ specific HTTP\n   request method.\n"
- title: 4.  Application Scenarios
  contents:
  - "4.  Application Scenarios\n   This section describes some examples of application\
    \ scenarios that\n   may potentially benefit from the use of the No-Response option.\n"
- title: 4.1.  Frequent Update of Geolocation from Vehicles to Backend Server
  contents:
  - "4.1.  Frequent Update of Geolocation from Vehicles to Backend Server\n   Let\
    \ us consider an intelligent traffic system (ITS) consisting of\n   vehicles equipped\
    \ with a sensor gateway comprising sensors like GPS\n   and accelerometer sensors.\
    \  The sensor gateway acts as a CoAP client.\n   It connects to the Internet using\
    \ a low-bandwidth cellular connection\n   (e.g., General Packet Radio Service\
    \ (GPRS)).  The GPS coordinates of\n   the vehicle are periodically updated to\
    \ the backend server.\n   While performing frequent location updates, retransmitting\
    \ (through\n   the CoAP CON mechanism) a location coordinate that the vehicle\
    \ has\n   already left is not efficient as it adds redundant traffic to the\n\
    \   network.  Therefore, the updates are done using NON messages.\n   However,\
    \ given the huge number of vehicles updating frequently, the\n   NON exchange\
    \ will also trigger a huge number of responses from the\n   backend.  Thus, the\
    \ cumulative load on the network will be quite\n   significant.  Also, the client\
    \ in this case may not be interested in\n   getting responses to location update\
    \ requests for a location it has\n   already passed and when the next location\
    \ update is imminent.\n   On the contrary, if the client endpoints on the vehicles\
    \ explicitly\n   declare that they do not need any status response back from the\n\
    \   server, then load will be reduced significantly.  The assumption is\n   that\
    \ the high rate of updates will compensate for the stray losses in\n   geolocation\
    \ reports.\n   Note: It may be argued that the above example application can also\
    \ be\n      implemented using the Observe option [RFC7641] with NON\n      notifications.\
    \  But, in practice, implementing with Observe would\n      require lot of bookkeeping\
    \ at the data collection endpoint at the\n      backend (observer).  The observer\
    \ needs to maintain all the\n      observe relationships with each vehicle.  The\
    \ data collection\n      endpoint may be unable to know all its data sources beforehand.\n\
    \      The client endpoints at vehicles may go offline or come back\n      online\
    \ randomly.  In the case of Observe, the onus is always on\n      the data collection\
    \ endpoint to establish an observe relationship\n      with each data source.\
    \  On the other hand, implementation will be\n      much simpler if initiating\
    \ is left to the data source to carry out\n      updates using the No-Response\
    \ option.  Another way of looking at\n      it is that the implementation choice\
    \ depends on where there is\n      interest to initiate the update.  In an Observe\
    \ scenario, the\n      interest is expressed by the data consumer.  In contrast,\
    \ the\n      classic update case applies when the interest is from the data\n\
    \      producer.  The No-Response option makes classic updates consume\n     \
    \ even less resources.\n   The following subsections illustrate some sample exchanges\
    \ based on\n   the application described above.\n"
- title: 4.1.1.  Using No-Response with PUT
  contents:
  - "4.1.1.  Using No-Response with PUT\n   Each vehicle is assigned a dedicated resource\
    \ \"vehicle-stat-<n>\",\n   where <n> can be any string uniquely identifying the\
    \ vehicle.  The\n   update requests are sent using NON messages.  The No-Response\
    \ option\n   causes the server not to respond back.\n   Client Server\n   |  \
    \    |\n   |      |\n   +----->| Header: PUT (T=NON, Code=0.03, MID=0x7d38)\n\
    \   | PUT  | Token: 0x53\n   |      | Uri-Path: \"vehicle-stat-00\"\n   |    \
    \  | Content Type: text/plain\n   |      | No-Response: 26\n   |      | Payload:\n\
    \   |      | \"VehID=00&RouteID=DN47&Lat=22.5658745&Long=88.4107966667&\n   |\
    \      | Time=2013-01-13T11:24:31\"\n   |      |\n   [No response from the server.\
    \  Next update in 20 s.]\n   |      |\n   +----->| Header: PUT (T=NON, Code=0.03,\
    \ MID=0x7d39)\n   | PUT  | Token: 0x54\n   |      | Uri-Path: \"vehicle-stat-00\"\
    \n   |      | Content Type: text/plain\n   |      | No-Response: 26\n   |    \
    \  | Payload:\n   |      | \"VehID=00&RouteID=DN47&Lat=22.5649015&Long=88.4103511667&\n\
    \   |      | Time=2013-01-13T11:24:51\"\n     Figure 1: Example of Unreliable\
    \ Update with No-Response Option\n                                Using PUT\n"
- title: 4.1.2.  Using No-Response with POST
  contents:
  - '4.1.2.  Using No-Response with POST

    '
- title: 4.1.2.1.  POST Updating a Fixed Target Resource
  contents:
  - "4.1.2.1.  POST Updating a Fixed Target Resource\n   In this case, POST acts the\
    \ same way as PUT.  The exchanges are the\n   same as above.  The updated values\
    \ are carried as payload of POST as\n   shown in Figure 2.\n   Client Server\n\
    \   |      |\n   |      |\n   +----->| Header: POST (T=NON, Code=0.02, MID=0x7d38)\n\
    \   | POST | Token: 0x53\n   |      | Uri-Path: \"vehicle-stat-00\"\n   |    \
    \  | Content Type: text/plain\n   |      | No-Response: 26\n   |      | Payload:\n\
    \   |      | \"VehID=00&RouteID=DN47&Lat=22.5658745&Long=88.4107966667&\n   |\
    \      | Time=2013-01-13T11:24:31\"\n   |      |\n   [No response from the server.\
    \  Next update in 20 s.]\n   |      |\n   +----->| Header: POST (T=NON, Code=0.02,\
    \ MID=0x7d39)\n   | POST | Token: 0x54\n   |      | Uri-Path: \"vehicle-stat-00\"\
    \n   |      | Content Type: text/plain\n   |      | No-Response: 26\n   |    \
    \  | Payload:\n   |      | \"VehID=00&RouteID=DN47&Lat=22.5649015&Long=88.4103511667&\n\
    \   |      | Time=2013-01-13T11:24:51\"\n    Figure 2: Example of Unreliable Update\
    \ with No-Response Option\n                   Using POST as the Update Method\n"
- title: 4.1.2.2.  POST Updating through Query String
  contents:
  - "4.1.2.2.  POST Updating through Query String\n   It may be possible that the\
    \ backend infrastructure deploys a\n   dedicated database to store the location\
    \ updates.  In such a case,\n   the client can update through a POST by sending\
    \ a query string in the\n   URI.  The query string contains the name/value pairs\
    \ for each update.\n   No-Response can be used in the same manner as for updating\
    \ fixed\n   resources.  The scenario is depicted in Figure 3.\n   Client Server\n\
    \   |      |\n   |      |\n   +----->| Header: POST (T=NON, Code=0.02, MID=0x7d38)\n\
    \   | POST | Token: 0x53\n   |      | Uri-Path: \"updateOrInsertInfo\"\n   | \
    \     | Uri-Query: \"VehID=00\"\n   |      | Uri-Query: \"RouteID=DN47\"\n   |\
    \      | Uri-Query: \"Lat=22.5658745\"\n   |      | Uri-Query: \"Long=88.4107966667\"\
    \n   |      | Uri-Query: \"Time=2013-01-13T11:24:31\"\n   |      | No-Response:\
    \ 26\n   |      |\n   [No response from the server.  Next update in 20 s.]\n \
    \  |      |\n   +----->| Header: POST (T=NON, Code=0.02, MID=0x7d39)\n   | POST\
    \ | Token: 0x54\n   |      | Uri-Path: \"updateOrInsertInfo\"\n   |      | Uri-Query:\
    \ \"VehID=00\"\n   |      | Uri-Query: \"RouteID=DN47\"\n   |      | Uri-Query:\
    \ \"Lat=22.5649015\"\n   |      | Uri-Query: \"Long=88.4103511667\"\n   |    \
    \  | Uri-Query: \"Time=2013-01-13T11:24:51\"\n   |      | No-Response: 26\n  \
    \ |      |\n    Figure 3: Example of Unreliable Update with No-Response Option\n\
    \    Using POST with a Query String to Insert Update Information\n           \
    \          into the Backend Database\n"
- title: 4.2.  Multicasting Actuation Command from a Handheld Device to a Group
  contents:
  - "4.2.  Multicasting Actuation Command from a Handheld Device to a Group\n    \
    \  of Appliances\n   A handheld device (e.g., a smart phone) may be programmed\
    \ to act as\n   an IP-enabled switch to remotely operate on one or more IP-enabled\n\
    \   appliances.  For example, a multicast request to switch on/off all\n   the\
    \ lights of a building can be sent.  In this case, the IP switch\n   application\
    \ can use the No-Response option in a NON request message\n   to reduce the traffic\
    \ generated due to simultaneous CoAP responses\n   from all the lights.\n   Thus,\
    \ No-Response helps in reducing overall communication cost and\n   the probability\
    \ of network congestion in this case.\n"
- title: 4.2.1.  Using Granular Response Suppression
  contents:
  - "4.2.1.  Using Granular Response Suppression\n   The IP switch application may\
    \ optionally use granular response\n   suppression such that the error responses\
    \ are not suppressed.  In\n   that case, the lights that could not execute the\
    \ request would\n   respond back and be readily identified.  Thus, explicit suppression\n\
    \   of option classes by the multicast client may be useful to debug the\n   network\
    \ and the application.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   The IANA had previously assigned number 284 to this\
    \ option in the\n   \"CoAP Option Numbers\" registry.  IANA has updated this as\
    \ shown\n   below:\n            +--------+--------------+-------------+\n    \
    \        | Number |     Name     |  Reference  |\n            +--------+--------------+-------------+\n\
    \            |   258  | No-Response  |  RFC 7967   |\n            +--------+--------------+-------------+\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The No-Response option defined in this document\
    \ presents no security\n   considerations beyond those in Section 11 of the base\
    \ CoAP\n   specification [RFC7252].\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n   \
    \           Application Protocol (CoAP)\", RFC 7252,\n              DOI 10.17487/RFC7252,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7252>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [CoAP-ADAPT]\n              Bandyopadhyay, S.,\
    \ Bhattacharyya, A., and A. Pal,\n              \"Adapting protocol characteristics\
    \ of CoAP using sensed\n              indication for vehicular analytics\", 11th\
    \ ACM Conference\n              on Embedded Networked Sensor Systems (SenSys '13),\n\
    \              DOI 10.1145/2517351.2517422, November 2013.\n   [CoAP-PUBSUB]\n\
    \              Koster, M., Keranen, A., and J. Jimenez, \"Publish-\n         \
    \     Subscribe Broker for the Constrained Application Protocol\n            \
    \  (CoAP)\", Work in Progress, draft-koster-core-coap-\n              pubsub-05,\
    \ July 2016.\n   [CoAP-TCP-TLS]\n              Bormann, C., Lemay, S., Tschofenig,\
    \ H., Hartke, K.,\n              Silverajan, B., and B. Raymor, Ed., \"CoAP (Constrained\n\
    \              Application Protocol) over TCP, TLS, and WebSockets\", Work\n \
    \             in Progress, draft-ietf-core-coap-tcp-tls-04, August 2016.\n   [HTTP-to-CoAP]\n\
    \              Castellani, A., Loreto, S., Rahman, A., Fossati, T., and\n    \
    \          E. Dijk, \"Guidelines for HTTP-to-CoAP Mapping\n              Implementations\"\
    , Work in Progress, draft-ietf-core-http-\n              mapping-13, July 2016.\n\
    \   [ITS-LIGHT]\n              Bhattacharyya, A., Bandyopadhyay, S., and A. Pal,\n\
    \              \"ITS-light: Adaptive lightweight scheme to resource\n        \
    \      optimize intelligent transportation tracking system (ITS)\n           \
    \   - Customizing CoAP for opportunistic optimization\", 10th\n              International\
    \ Conference on Mobile and Ubiquitous Systems:\n              Computing, Networking\
    \ and Services (MobiQuitous 2013),\n              DOI 10.1007/978-3-319-11569-6_58,\
    \ December 2013.\n   [RFC5405]  Eggert, L. and G. Fairhurst, \"Unicast UDP Usage\
    \ Guidelines\n              for Application Designers\", BCP 145, RFC 5405,\n\
    \              DOI 10.17487/RFC5405, November 2008,\n              <http://www.rfc-editor.org/info/rfc5405>.\n\
    \   [RFC7390]  Rahman, A., Ed., and E. Dijk, Ed., \"Group Communication\n    \
    \          for the Constrained Application Protocol (CoAP)\", RFC\n          \
    \    7390, DOI 10.17487/RFC7390, October 2014,\n              <http://www.rfc-editor.org/info/rfc7390>.\n\
    \   [RFC7641]  Hartke, K., \"Observing Resources in the Constrained\n        \
    \      Application Protocol (CoAP)\", RFC 7641,\n              DOI 10.17487/RFC7641,\
    \ September 2015,\n              <http://www.rfc-editor.org/info/rfc7641>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Thanks to Carsten Bormann, Matthias Kovatsch, Esko Dijk,\
    \ Bert\n   Greevenbosch, Akbar Rahman, and Klaus Hartke for their valuable\n \
    \  input.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Abhijan Bhattacharyya\n   Tata Consultancy Services Ltd.\n\
    \   Kolkata, India\n   Email: abhijan.bhattacharyya@tcs.com\n   Soma Bandyopadhyay\n\
    \   Tata Consultancy Services Ltd.\n   Kolkata, India\n   Email: soma.bandyopadhyay@tcs.com\n\
    \   Arpan Pal\n   Tata Consultancy Services Ltd.\n   Kolkata, India\n   Email:\
    \ arpan.pal@tcs.com\n   Tulika Bose\n   Tata Consultancy Services Ltd.\n   Kolkata,\
    \ India\n   Email: tulika.bose@tcs.com\n"
