- title: __initial_text__
  contents:
  - '                    Post Office Protocol - Version 3

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Overview
  contents:
  - "Overview\n   This memo is a revision to RFC 1460, a Draft Standard.  It makes\
    \ the\n   following changes from that document:\n      - removed text regarding\
    \ \"split-UA model\", which didn't add\n        anything to the understanding\
    \ of POP\n      - clarified syntax of commands, keywords, and arguments\n    \
    \  - clarified behavior on broken connection\n      - explicitly permitted an\
    \ inactivity autologout timer\n      - clarified the requirements of the \"exclusive-access\
    \ lock\"\n      - removed implementation-specific wording regarding the parsing\
    \ of\n        the maildrop\n      - allowed servers to close the connection after\
    \ a failed\n        authentication command\n      - removed the LAST command\n\
    \      - fixed typo in example of TOP command\n      - clarified that the second\
    \ argument to the TOP command is non-\n        negative\n      - added the optional\
    \ UIDL command\n      - added warning regarding length of shared secrets with\
    \ APOP\n      - added additional warnings to the security considerations section\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   On certain types of smaller nodes in the Internet it is often\n\
    \   impractical to maintain a message transport system (MTS).  For\n   example,\
    \ a workstation may not have sufficient resources (cycles,\n   disk space) in\
    \ order to permit a SMTP server [RFC821] and associated\n   local mail delivery\
    \ system to be kept resident and continuously\n   running.  Similarly, it may\
    \ be expensive (or impossible) to keep a\n   personal computer interconnected\
    \ to an IP-style network for long\n   amounts of time (the node is lacking the\
    \ resource known as\n   \"connectivity\").\n   Despite this, it is often very\
    \ useful to be able to manage mail on\n   these smaller nodes, and they often\
    \ support a user agent (UA) to aid\n   the tasks of mail handling.  To solve this\
    \ problem, a node which can\n   support an MTS entity offers a maildrop service\
    \ to these less endowed\n   nodes.  The Post Office Protocol - Version 3 (POP3)\
    \ is intended to\n   permit a workstation to dynamically access a maildrop on\
    \ a server\n   host in a useful fashion.  Usually, this means that the POP3 is\
    \ used\n   to allow a workstation to retrieve mail that the server is holding\n\
    \   for it.\n   For the remainder of this memo, the term \"client host\" refers\
    \ to a\n   host making use of the POP3 service, while the term \"server host\"\
    \n   refers to a host which offers the POP3 service.\n"
- title: 2. A Short Digression
  contents:
  - "2. A Short Digression\n   This memo does not specify how a client host enters\
    \ mail into the\n   transport system, although a method consistent with the philosophy\
    \ of\n   this memo is presented here:\n      When the user agent on a client host\
    \ wishes to enter a message\n      into the transport system, it establishes an\
    \ SMTP connection to\n      its relay host (this relay host could be, but need\
    \ not be, the\n      POP3 server host for the client host).\n"
- title: 3. Basic Operation
  contents:
  - "3. Basic Operation\n   Initially, the server host starts the POP3 service by\
    \ listening on\n   TCP port 110.  When a client host wishes to make use of the\
    \ service,\n   it establishes a TCP connection with the server host.  When the\n\
    \   connection is established, the POP3 server sends a greeting.  The\n   client\
    \ and POP3 server then exchange commands and responses\n   (respectively) until\
    \ the connection is closed or aborted.\n   Commands in the POP3 consist of a keyword,\
    \ possibly followed by one\n   or more arguments.  All commands are terminated\
    \ by a CRLF pair.\n   Keywords and arguments consist of printable ASCII characters.\n\
    \   Keywords and arguments are each separated by a single SPACE\n   character.\
    \  Keywords are three or four characters long. Each argument\n   may be up to\
    \ 40 characters long.\n   Responses in the POP3 consist of a status indicator\
    \ and a keyword\n   possibly followed by additional information.  All responses\
    \ are\n   terminated by a CRLF pair.  There are currently two status\n   indicators:\
    \ positive (\"+OK\") and negative (\"-ERR\").\n   Responses to certain commands\
    \ are multi-line.  In these cases, which\n   are clearly indicated below, after\
    \ sending the first line of the\n   response and a CRLF, any additional lines\
    \ are sent, each terminated\n   by a CRLF pair.  When all lines of the response\
    \ have been sent, a\n   final line is sent, consisting of a termination octet\
    \ (decimal code\n   046, \".\") and a CRLF pair.  If any line of the multi-line\
    \ response\n   begins with the termination octet, the line is \"byte-stuffed\"\
    \ by\n   pre-pending the termination octet to that line of the response.\n   Hence\
    \ a multi-line response is terminated with the five octets\n   \"CRLF.CRLF\".\
    \  When examining a multi-line response, the client checks\n   to see if the line\
    \ begins with the termination octet.  If so and if\n   octets other than CRLF\
    \ follow, the the first octet of the line (the\n   termination octet) is stripped\
    \ away.  If so and if CRLF immediately\n   follows the termination character,\
    \ then the response from the POP\n   server is ended and the line containing \"\
    .CRLF\" is not considered\n   part of the multi-line response.\n   A POP3 session\
    \ progresses through a number of states during its\n   lifetime.  Once the TCP\
    \ connection has been opened and the POP3\n   server has sent the greeting, the\
    \ session enters the AUTHORIZATION\n   state.  In this state, the client must\
    \ identify itself to the POP3\n   server.  Once the client has successfully done\
    \ this, the server\n   acquires resources associated with the client's maildrop,\
    \ and the\n   session enters the TRANSACTION state.  In this state, the client\n\
    \   requests actions on the part of the POP3 server.  When the client has\n  \
    \ issued the QUIT command, the session enters the UPDATE state.  In\n   this state,\
    \ the POP3 server releases any resources acquired during\n   the TRANSACTION state\
    \ and says goodbye.  The TCP connection is then\n   closed.\n   A POP3 server\
    \ MAY have an inactivity autologout timer.  Such a timer\n   MUST be of at least\
    \ 10 minutes' duration.  The receipt of any command\n   from the client during\
    \ that interval should suffice to reset the\n   autologout timer.  When the timer\
    \ expires, the session does NOT enter\n   the UPDATE state--the server should\
    \ close the TCP connection without\n   removing any messages or sending any response\
    \ to the client.\n"
- title: 4. The AUTHORIZATION State
  contents:
  - "4. The AUTHORIZATION State\n   Once the TCP connection has been opened by a POP3\
    \ client, the POP3\n   server issues a one line greeting.  This can be any string\
    \ terminated\n   by CRLF.  An example might be:\n      S:  +OK POP3 server ready\n\
    \   Note that this greeting is a POP3 reply.  The POP3 server should\n   always\
    \ give a positive response as the greeting.\n   The POP3 session is now in the\
    \ AUTHORIZATION state.  The client must\n   now identify and authenticate itself\
    \ to the POP3 server.  Two\n   possible mechanisms for doing this are described\
    \ in this document,\n   the USER and PASS command combination and the APOP command.\
    \  The APOP\n   command is described later in this document.\n   To authenticate\
    \ using the USER and PASS command combination, the\n   client must first issue\
    \ the USER command.  If the POP3 server\n   responds with a positive status indicator\
    \ (\"+OK\"), then the client\n   may issue either the PASS command to complete\
    \ the authentication, or\n   the QUIT command to terminate the POP3 session. \
    \ If the POP3 server\n   responds with a negative status indicator (\"-ERR\")\
    \ to the USER\n   command, then the client may either issue a new authentication\n\
    \   command or may issue the QUIT command.\n   When the client issues the PASS\
    \ command, the POP3 server uses the\n   argument pair from the USER and PASS commands\
    \ to determine if the\n   client should be given access to the appropriate maildrop.\n\
    \   Once the POP3 server has determined through the use of any\n   authentication\
    \ command that the client should be given access to the\n   appropriate maildrop,\
    \ the POP3 server then acquires an exclusive-\n   access lock on the maildrop,\
    \ as necessary to prevent messages from\n   being modified or removed before the\
    \ session enters the UPDATE state.\n   If the lock is successfully acquired, the\
    \ POP3 server responds with a\n   positive status indicator.  The POP3 session\
    \ now enters the\n   TRANSACTION state, with no messages marked as deleted.  If\
    \ the the\n   maildrop cannot be opened for some reason (for example, a lock can\n\
    \   not be acquired, the client is denied access to the appropriate\n   maildrop,\
    \ or the maildrop cannot be parsed), the POP3 server responds\n   with a negative\
    \ status indicator.  (If a lock was acquired but the\n   POP3 server intends to\
    \ respond with a negative status indicator, the\n   POP3 server must release the\
    \ lock prior to rejecting the command.)\n   After returning a negative status\
    \ indicator, the server may close the\n   connection.  If the server does not\
    \ close the connection, the client\n   may either issue a new authentication command\
    \ and start again, or the\n   client may issue the QUIT command.\n   After the\
    \ POP3 server has opened the maildrop, it assigns a message-\n   number to each\
    \ message, and notes the size of each message in octets.\n   The first message\
    \ in the maildrop is assigned a message-number of\n   \"1\", the second is assigned\
    \ \"2\", and so on, so that the n'th message\n   in a maildrop is assigned a message-number\
    \ of \"n\".  In POP3 commands\n   and responses, all message-number's and message\
    \ sizes are expressed\n   in base-10 (i.e., decimal).\n   Here are summaries for\
    \ the three POP3 commands discussed thus far:\n      USER name\n         Arguments:\n\
    \             a string identifying a mailbox (required), which is of\n       \
    \      significance ONLY to the server\n         Restrictions:\n             may\
    \ only be given in the AUTHORIZATION state after the POP3\n             greeting\
    \ or after an unsuccessful USER or PASS command\n         Possible Responses:\n\
    \             +OK name is a valid mailbox\n             -ERR never heard of mailbox\
    \ name\n         Examples:\n             C: USER mrose\n             S: +OK mrose\
    \ is a real hoopy frood\n                ...\n             C: USER frated\n  \
    \           S: -ERR sorry, no mailbox for frated here\n      PASS string\n   \
    \      Arguments:\n             a server/mailbox-specific password (required)\n\
    \         Restrictions:\n             may only be given in the AUTHORIZATION state\
    \ after a\n             successful USER command\n         Discussion:\n      \
    \       Since the PASS command has exactly one argument, a POP3\n            \
    \ server may treat spaces in the argument as part of the\n             password,\
    \ instead of as argument separators.\n         Possible Responses:\n         \
    \    +OK maildrop locked and ready\n             -ERR invalid password\n     \
    \        -ERR unable to lock maildrop\n         Examples:\n             C: USER\
    \ mrose\n             S: +OK mrose is a real hoopy frood\n             C: PASS\
    \ secret\n             S: +OK mrose's maildrop has 2 messages (320 octets)\n \
    \              ...\n             C: USER mrose\n             S: +OK mrose is a\
    \ real hoopy frood\n             C: PASS secret\n             S: -ERR maildrop\
    \ already locked\n      QUIT\n         Arguments: none\n         Restrictions:\
    \ none\n         Possible Responses:\n             +OK\n         Examples:\n \
    \            C: QUIT\n             S: +OK dewey POP3 server signing off\n"
- title: 5. The TRANSACTION State
  contents:
  - "5. The TRANSACTION State\n   Once the client has successfully identified itself\
    \ to the POP3 server\n   and the POP3 server has locked and opened the appropriate\
    \ maildrop,\n   the POP3 session is now in the TRANSACTION state.  The client\
    \ may now\n   issue any of the following POP3 commands repeatedly.  After each\n\
    \   command, the POP3 server issues a response.  Eventually, the client\n   issues\
    \ the QUIT command and the POP3 session enters the UPDATE state.\n   Here are\
    \ the POP3 commands valid in the TRANSACTION state:\n      STAT\n         Arguments:\
    \ none\n         Restrictions:\n             may only be given in the TRANSACTION\
    \ state\n         Discussion:\n             The POP3 server issues a positive\
    \ response with a line\n             containing information for the maildrop.\
    \  This line is\n             called a \"drop listing\" for that maildrop.\n \
    \            In order to simplify parsing, all POP3 servers required to\n    \
    \         use a certain format for drop listings.  The positive\n            \
    \ response consists of \"+OK\" followed by a single space, the\n             number\
    \ of messages in the maildrop, a single space, and the\n             size of the\
    \ maildrop in octets.  This memo makes no\n             requirement on what follows\
    \ the maildrop size.  Minimal\n             implementations should just end that\
    \ line of the response\n             with a CRLF pair.  More advanced implementations\
    \ may\n             include other information.\n                NOTE: This memo\
    \ STRONGLY discourages implementations\n                from supplying additional\
    \ information in the drop\n                listing.  Other, optional, facilities\
    \ are discussed\n                later on which permit the client to parse the\
    \ messages\n                in the maildrop.\n             Note that messages\
    \ marked as deleted are not counted in\n             either total.\n         Possible\
    \ Responses:\n             +OK nn mm\n         Examples:\n             C: STAT\n\
    \             S: +OK 2 320\n      LIST [msg]\n         Arguments:\n          \
    \   a message-number (optional), which, if present, may NOT\n             refer\
    \ to a message marked as deleted\n         Restrictions:\n             may only\
    \ be given in the TRANSACTION state\n         Discussion:\n             If an\
    \ argument was given and the POP3 server issues a\n             positive response\
    \ with a line containing information for\n             that message.  This line\
    \ is called a \"scan listing\" for\n             that message.\n             If\
    \ no argument was given and the POP3 server issues a\n             positive response,\
    \ then the response given is multi-line.\n             After the initial +OK,\
    \ for each message in the maildrop,\n             the POP3 server responds with\
    \ a line containing information\n             for that message.  This line is\
    \ also called a \"scan\n             listing\" for that message.\n           \
    \  In order to simplify parsing, all POP3 servers are required\n             to\
    \ use a certain format for scan listings.  A scan listing\n             consists\
    \ of the message-number of the message, followed by\n             a single space\
    \ and the exact size of the message in octets.\n             This memo makes no\
    \ requirement on what follows the message\n             size in the scan listing.\
    \  Minimal implementations should\n             just end that line of the response\
    \ with a CRLF pair.  More\n             advanced implementations may include other\
    \ information, as\n             parsed from the message.\n                NOTE:\
    \ This memo STRONGLY discourages implementations\n                from supplying\
    \ additional information in the scan\n                listing.  Other, optional,\
    \ facilities are discussed\n                later on which permit the client to\
    \ parse the messages\n                in the maildrop.\n             Note that\
    \ messages marked as deleted are not listed.\n         Possible Responses:\n \
    \            +OK scan listing follows\n             -ERR no such message\n   \
    \      Examples:\n             C: LIST\n             S: +OK 2 messages (320 octets)\n\
    \             S: 1 120\n             S: 2 200\n             S: .\n           \
    \    ...\n             C: LIST 2\n             S: +OK 2 200\n               ...\n\
    \             C: LIST 3\n             S: -ERR no such message, only 2 messages\
    \ in maildrop\n      RETR msg\n         Arguments:\n             a message-number\
    \ (required) which may not refer to a\n             message marked as deleted\n\
    \         Restrictions:\n             may only be given in the TRANSACTION state\n\
    \         Discussion:\n             If the POP3 server issues a positive response,\
    \ then the\n             response given is multi-line.  After the initial +OK,\
    \ the\n             POP3 server sends the message corresponding to the given\n\
    \             message-number, being careful to byte-stuff the termination\n  \
    \           character (as with all multi-line responses).\n         Possible Responses:\n\
    \             +OK message follows\n             -ERR no such message\n       \
    \  Examples:\n             C: RETR 1\n             S: +OK 120 octets\n       \
    \      S: <the POP3 server sends the entire message here>\n             S: .\n\
    \      DELE msg\n         Arguments:\n             a message-number (required)\
    \ which may not refer to a\n             message marked as deleted\n         Restrictions:\n\
    \             may only be given in the TRANSACTION state\n         Discussion:\n\
    \             The POP3 server marks the message as deleted.  Any future\n    \
    \         reference to the message-number associated with the message\n      \
    \       in a POP3 command generates an error.  The POP3 server does\n        \
    \     not actually delete the message until the POP3 session\n             enters\
    \ the UPDATE state.\n         Possible Responses:\n             +OK message deleted\n\
    \             -ERR no such message\n         Examples:\n             C: DELE 1\n\
    \             S: +OK message 1 deleted\n                ...\n             C: DELE\
    \ 2\n             S: -ERR message 2 already deleted\n      NOOP\n         Arguments:\
    \ none\n         Restrictions:\n             may only be given in the TRANSACTION\
    \ state\n         Discussion:\n             The POP3 server does nothing, it merely\
    \ replies with a\n             positive response.\n         Possible Responses:\n\
    \             +OK\n         Examples:\n             C: NOOP\n             S: +OK\n\
    \      RSET\n         Arguments: none\n         Restrictions:\n             may\
    \ only be given in the TRANSACTION state\n         Discussion:\n             If\
    \ any messages have been marked as deleted by the POP3\n             server, they\
    \ are unmarked.  The POP3 server then replies\n             with a positive response.\n\
    \         Possible Responses:\n             +OK\n         Examples:\n        \
    \     C: RSET\n             S: +OK maildrop has 2 messages (320 octets)\n"
- title: 6. The UPDATE State
  contents:
  - "6. The UPDATE State\n   When the client issues the QUIT command from the TRANSACTION\
    \ state,\n   the POP3 session enters the UPDATE state.  (Note that if the client\n\
    \   issues the QUIT command from the AUTHORIZATION state, the POP3\n   session\
    \ terminates but does NOT enter the UPDATE state.)\n   If a session terminates\
    \ for some reason other than a client-issued\n   QUIT command, the POP3 session\
    \ does NOT enter the UPDATE state and\n   MUST not remove any messages from the\
    \ maildrop.\n      QUIT\n         Arguments: none\n         Restrictions: none\n\
    \         Discussion:\n             The POP3 server removes all messages marked\
    \ as deleted from\n             the maildrop.  It then releases any exclusive-access\
    \ lock\n             on the maildrop and replies as to the status of these\n \
    \            operations.  The TCP connection is then closed.\n         Possible\
    \ Responses:\n             +OK\n         Examples:\n             C: QUIT\n   \
    \          S: +OK dewey POP3 server signing off (maildrop empty)\n           \
    \     ...\n             C: QUIT\n             S: +OK dewey POP3 server signing\
    \ off (2 messages left)\n                ...\n"
- title: 7. Optional POP3 Commands
  contents:
  - "7. Optional POP3 Commands\n   The POP3 commands discussed above must be supported\
    \ by all minimal\n   implementations of POP3 servers.\n   The optional POP3 commands\
    \ described below permit a POP3 client\n   greater freedom in message handling,\
    \ while preserving a simple POP3\n   server implementation.\n      NOTE: This\
    \ memo STRONGLY encourages implementations to support\n      these commands in\
    \ lieu of developing augmented drop and scan\n      listings.  In short, the philosophy\
    \ of this memo is to put\n      intelligence in the part of the POP3 client and\
    \ not the POP3\n      server.\n      TOP msg n\n         Arguments:\n        \
    \     a message-number (required) which may NOT refer to to a\n             message\
    \ marked as deleted, and a non-negative number\n             (required)\n    \
    \     Restrictions:\n             may only be given in the TRANSACTION state\n\
    \         Discussion:\n             If the POP3 server issues a positive response,\
    \ then the\n             response given is multi-line.  After the initial +OK,\
    \ the\n             POP3 server sends the headers of the message, the blank\n\
    \             line separating the headers from the body, and then the\n      \
    \       number of lines indicated message's body, being careful to\n         \
    \    byte-stuff the termination character (as with all multi-\n             line\
    \ responses).\n             Note that if the number of lines requested by the\
    \ POP3\n             client is greater than than the number of lines in the\n\
    \             body, then the POP3 server sends the entire message.\n         Possible\
    \ Responses:\n             +OK top of message follows\n             -ERR no such\
    \ message\n         Examples:\n             C: TOP 1 10\n             S: +OK\n\
    \             S: <the POP3 server sends the headers of the\n                message,\
    \ a blank line, and the first 10 lines\n                of the body of the message>\n\
    \             S: .\n                ...\n             C: TOP 100 3\n         \
    \    S: -ERR no such message\n      UIDL [msg]\n      Arguments:\n          a\
    \ message-number (optionally)  If a message-number is given,\n          it may\
    \ NOT refer to a message marked as deleted.\n      Restrictions:\n          may\
    \ only be given in the TRANSACTION state.\n      Discussion:\n          If an\
    \ argument was given and the POP3 server issues a positive\n          response\
    \ with a line containing information for that message.\n          This line is\
    \ called a \"unique-id listing\" for that message.\n          If no argument was\
    \ given and the POP3 server issues a positive\n          response, then the response\
    \ given is multi-line.  After the\n          initial +OK, for each message in\
    \ the maildrop, the POP3 server\n          responds with a line containing information\
    \ for that message.\n          This line is called a \"unique-id listing\" for\
    \ that message.\n          In order to simplify parsing, all POP3 servers are\
    \ required to\n          use a certain format for unique-id listings.  A unique-id\n\
    \          listing consists of the message-number of the message,\n          followed\
    \ by a single space and the unique-id of the message.\n          No information\
    \ follows the unique-id in the unique-id listing.\n          The unique-id of\
    \ a message is an arbitrary server-determined\n          string, consisting of\
    \ characters in the range 0x21 to 0x7E,\n          which uniquely identifies a\
    \ message within a maildrop and\n          which persists across sessions. The\
    \ server should never reuse\n          an unique-id in a given maildrop, for as\
    \ long as the entity\n          using the unique-id exists.\n          Note that\
    \ messages marked as deleted are not listed.\n      Possible Responses:\n    \
    \      +OK unique-id listing follows\n          -ERR no such message\n      Examples:\n\
    \          C: UIDL\n          S: +OK\n          S: 1 whqtswO00WBw418f9t5JxYwZ\n\
    \          S: 2 QhdPYR:00WBw1Ph7x7\n          S: .\n             ...\n       \
    \   C: UIDL 2\n          S: +OK 2 QhdPYR:00WBw1Ph7x7\n             ...\n     \
    \     C: UIDL 3\n          S: -ERR no such message, only 2 messages in maildrop\n\
    \      APOP name digest\n         Arguments:\n             a string identifying\
    \ a mailbox and a MD5 digest string\n             (both required)\n         Restrictions:\n\
    \             may only be given in the AUTHORIZATION state after the POP3\n  \
    \           greeting\n         Discussion:\n             Normally, each POP3 session\
    \ starts with a USER/PASS\n             exchange.  This results in a server/user-id\
    \ specific\n             password being sent in the clear on the network.  For\n\
    \             intermittent use of POP3, this may not introduce a sizable\n   \
    \          risk.  However, many POP3 client implementations connect to\n     \
    \        the POP3 server on a regular basis -- to check for new\n            \
    \ mail.  Further the interval of session initiation may be on\n             the\
    \ order of five minutes.  Hence, the risk of password\n             capture is\
    \ greatly enhanced.\n             An alternate method of authentication is required\
    \ which\n             provides for both origin authentication and replay\n   \
    \          protection, but which does not involve sending a password\n       \
    \      in the clear over the network.  The APOP command provides\n           \
    \  this functionality.\n             A POP3 server which implements the APOP command\
    \ will\n             include a timestamp in its banner greeting.  The syntax of\n\
    \             the timestamp corresponds to the `msg-id' in [RFC822], and\n   \
    \          MUST be different each time the POP3 server issues a banner\n     \
    \        greeting.  For example, on a UNIX implementation in which a\n       \
    \      separate UNIX process is used for each instance of a POP3\n           \
    \  server, the syntax of the timestamp might be:\n                <process-ID.clock@hostname>\n\
    \             where `process-ID' is the decimal value of the process's\n     \
    \        PID, clock is the decimal value of the system clock, and\n          \
    \   hostname is the fully-qualified domain-name corresponding\n             to\
    \ the host where the POP3 server is running.\n             The POP3 client makes\
    \ note of this timestamp, and then\n             issues the APOP command.  The\
    \ `name' parameter has\n             identical semantics to the `name' parameter\
    \ of the USER\n             command. The `digest' parameter is calculated by applying\n\
    \             the MD5 algorithm [RFC1321] to a string consisting of the\n    \
    \         timestamp (including angle-brackets) followed by a shared\n        \
    \     secret.  This shared secret is a string known only to the\n            \
    \ POP3 client and server.  Great care should be taken to\n             prevent\
    \ unauthorized disclosure of the secret, as knowledge\n             of the secret\
    \ will allow any entity to successfully\n             masquerade as the named\
    \ user.  The `digest' parameter\n             itself is a 16-octet value which\
    \ is sent in hexadecimal\n             format, using lower-case ASCII characters.\n\
    \             When the POP3 server receives the APOP command, it verifies\n  \
    \           the digest provided.  If the digest is correct, the POP3\n       \
    \      server issues a positive response, and the POP3 session\n             enters\
    \ the TRANSACTION state.  Otherwise, a negative\n             response is issued\
    \ and the POP3 session remains in the\n             AUTHORIZATION state.\n   \
    \          Note that as the length of the shared secret increases, so\n      \
    \       does the difficulty of deriving it.  As such, shared\n             secrets\
    \ should be long strings (considerably longer than\n             the 8-character\
    \ example shown below).\n         Possible Responses:\n             +OK maildrop\
    \ locked and ready\n             -ERR permission denied\n         Examples:\n\
    \             S: +OK POP3 server ready <1896.697170952@dbc.mtview.ca.us>\n   \
    \          C: APOP mrose c4c9334bac560ecc979e58001b3e22fb\n             S: +OK\
    \ maildrop has 1 message (369 octets)\n             In this example, the shared\
    \  secret  is  the  string  `tan-\n             staaf'.  Hence, the MD5 algorithm\
    \ is applied to the string\n                <1896.697170952@dbc.mtview.ca.us>tanstaaf\n\
    \             which produces a digest value of\n                c4c9334bac560ecc979e58001b3e22fb\n"
- title: 8. POP3 Command Summary
  contents:
  - "8. POP3 Command Summary\n   Minimal POP3 Commands:\n      USER name         \
    \      valid in the AUTHORIZATION state\n      PASS string\n      QUIT\n     \
    \ STAT                    valid in the TRANSACTION state\n      LIST [msg]\n \
    \     RETR msg\n      DELE msg\n      NOOP\n      RSET\n      QUIT           \
    \         valid in the UPDATE state\n   Optional POP3 Commands:\n      APOP name\
    \ digest        valid in the AUTHORIZATION state\n      TOP msg n            \
    \   valid in the TRANSACTION state\n      UIDL [msg]\n   POP3 Replies:\n     \
    \ +OK\n      -ERR\n   Note that with the exception of the STAT, LIST, and UIDL\
    \ commands,\n   the reply given by the POP3 server to any command is significant\
    \ only\n   to \"+OK\" and \"-ERR\".  Any text occurring after this reply may be\n\
    \   ignored by the client.\n"
- title: 9. Example POP3 Session
  contents:
  - "9. Example POP3 Session\n   S: <wait for connection on TCP port 110>\n   C: <open\
    \ connection>\n   S:    +OK POP3 server ready <1896.697170952@dbc.mtview.ca.us>\n\
    \   C:    APOP mrose c4c9334bac560ecc979e58001b3e22fb\n   S:    +OK mrose's maildrop\
    \ has 2 messages (320 octets)\n   C:    STAT\n   S:    +OK 2 320\n   C:    LIST\n\
    \   S:    +OK 2 messages (320 octets)\n   S:    1 120\n   S:    2 200\n   S: \
    \   .\n   C:    RETR 1\n   S:    +OK 120 octets\n   S:    <the POP3 server sends\
    \ message 1>\n   S:    .\n   C:    DELE 1\n   S:    +OK message 1 deleted\n  \
    \ C:    RETR 2\n   S:    +OK 200 octets\n   S:    <the POP3 server sends message\
    \ 2>\n   S:    .\n   C:    DELE 2\n   S:    +OK message 2 deleted\n   C:    QUIT\n\
    \   S:    +OK dewey POP3 server signing off (maildrop empty)\n   C:  <close connection>\n\
    \   S:  <wait for next connection>\n"
- title: 10. Message Format
  contents:
  - "10. Message Format\n   All messages transmitted during a POP3 session are assumed\
    \ to conform\n   to the standard for the format of Internet text messages [RFC822].\n\
    \   It is important to note that the octet count for a message on the\n   server\
    \ host may differ from the octet count assigned to that message\n   due to local\
    \ conventions for designating end-of-line.  Usually,\n   during the AUTHORIZATION\
    \ state of the POP3 session, the POP3 server\n   can calculate the size of each\
    \ message in octets when it opens the\n   maildrop.  For example, if the POP3\
    \ server host internally represents\n   end-of-line as a single character, then\
    \ the POP3 server simply counts\n   each occurrence of this character in a message\
    \ as two octets.  Note\n   that lines in the message which start with the termination\
    \ octet need\n   not be counted twice, since the POP3 client will remove all byte-\n\
    \   stuffed termination characters when it receives a multi-line\n   response.\n"
- title: 11. References
  contents:
  - "11. References\n   [RFC821] Postel, J., \"Simple Mail Transfer Protocol\", STD\
    \ 10, RFC\n       821, USC/Information Sciences Institute, August 1982.\n   [RFC822]\
    \ Crocker, D., \"Standard for the Format of ARPA-Internet Text\n       Messages\"\
    , STD 11, RFC 822, University of Delaware, August 1982.\n   [RFC1321] Rivest,\
    \ R. \"The MD5 Message-Digest Algorithm\", RFC 1321,\n       MIT Laboratory for\
    \ Computer Science, April, 1992.\n"
- title: 12. Security Considerations
  contents:
  - "12. Security Considerations\n   It is conjectured that use of the APOP command\
    \ provides origin\n   identification and replay protection for a POP3 session.\n\
    \   Accordingly, a POP3 server which implements both the PASS and APOP\n   commands\
    \ must not allow both methods of access for a given user; that\n   is, for a given\
    \ \"USER name\" either the PASS or APOP command is\n   allowed, but not both.\n\
    \   Further, note that as the length of the shared secret increases, so\n   does\
    \ the difficulty of deriving it.\n   Servers that answer -ERR to the USER command\
    \ are giving potential\n   attackers clues about which names are valid\n   Use\
    \ of the PASS command sends passwords in the clear over the\n   network.\n   Use\
    \ of the RETR and TOP commands sends mail in the clear over the\n   network.\n\
    \   Otherwise, security issues are not discussed in this memo.\n"
- title: 13. Acknowledgements
  contents:
  - "13. Acknowledgements\n   The POP family has a long and checkered history.  Although\
    \ primarily\n   a minor revision to RFC 1460, POP3 is based on the ideas presented\
    \ in\n   RFCs 918, 937, and 1081.\n   In addition, Alfred Grimstad, Keith McCloghrie,\
    \ and Neil Ostroff\n   provided significant comments on the APOP command.\n"
- title: 14. Authors' Addresses
  contents:
  - "14. Authors' Addresses\n   John G. Myers\n   Carnegie-Mellon University\n   5000\
    \ Forbes Ave\n   Pittsburgh, PA 15213\n   EMail: jgm+@cmu.edu\n   Marshall T.\
    \ Rose\n   Dover Beach Consulting, Inc.\n   420 Whisman Court\n   Mountain View,\
    \ CA  94043-2186\n   EMail: mrose@dbc.mtview.ca.us\n"
