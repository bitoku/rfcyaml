- contents:
  - '        Asynchronous Layered Coding (ALC) Protocol Instantiation

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes the Asynchronous Layered Coding (ALC)\n
    \  protocol, a massively scalable reliable content delivery protocol.\n   Asynchronous
    Layered Coding combines the Layered Coding Transport\n   (LCT) building block,
    a multiple rate congestion control building\n   block and the Forward Error Correction
    (FEC) building block to\n   provide congestion controlled reliable asynchronous
    delivery of\n   content to an unlimited number of concurrent receivers from a
    single\n   sender.  This document obsoletes RFC 3450.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5775.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n     1.1.  Delivery Service Models  . . . . . . . . . . . . .
    . . . .  4\n     1.2.  Scalability  . . . . . . . . . . . . . . . . . . . . .
    . .  4\n     1.3.  Environmental Requirements and Considerations  . . . . . .
    \ 5\n   2.  Architecture Definition  . . . . . . . . . . . . . . . . . . .  5\n
    \    2.1.  LCT Building Block . . . . . . . . . . . . . . . . . . . .  7\n     2.2.
    \ Multiple Rate Congestion Control Building Block  . . . . .  9\n     2.3.  FEC
    Building Block . . . . . . . . . . . . . . . . . . . . 10\n     2.4.  Session
    Description  . . . . . . . . . . . . . . . . . . . 11\n     2.5.  Packet Authentication
    Building Block . . . . . . . . . . . 12\n   3.  Conformance Statement  . . . .
    . . . . . . . . . . . . . . . . 12\n   4.  Functionality Definition . . . . .
    . . . . . . . . . . . . . . 13\n     4.1.  Packet Format Used by ALC  . . . .
    . . . . . . . . . . . . 13\n     4.2.  LCT Header Extension Fields  . . . . .
    . . . . . . . . . . 14\n     4.3.  Sender Operation . . . . . . . . . . . . .
    . . . . . . . . 15\n     4.4.  Receiver Operation . . . . . . . . . . . . . .
    . . . . . . 15\n   5.  Security Considerations  . . . . . . . . . . . . . . .
    . . . . 16\n     5.1.  Baseline Secure ALC Operation  . . . . . . . . . . . .
    . . 18\n       5.1.1.  IPsec Approach . . . . . . . . . . . . . . . . . . . .
    18\n       5.1.2.  IPsec Requirements . . . . . . . . . . . . . . . . . . 19\n
    \  6.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 21\n   7.
    \ Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 21\n   8.  Changes
    from RFC 3450  . . . . . . . . . . . . . . . . . . . . 21\n   9.  References .
    . . . . . . . . . . . . . . . . . . . . . . . . . 22\n     9.1.  Normative References
    . . . . . . . . . . . . . . . . . . . 22\n     9.2.  Informative References .
    . . . . . . . . . . . . . . . . . 23\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes a massively scalable reliable content\n
    \  delivery protocol, Asynchronous Layered Coding (ALC), for multiple\n   rate
    congestion controlled reliable content delivery.  The protocol\n   is specifically
    designed to provide massive scalability using IP\n   multicast as the underlying
    network service.  Massive scalability in\n   this context means the number of
    concurrent receivers for an object\n   is potentially in the millions, the aggregate
    size of objects to be\n   delivered in a session ranges from hundreds of kilobytes
    to hundreds\n   of gigabytes, each receiver can initiate reception of an object\n
    \  asynchronously, the reception rate of each receiver in the session is\n   the
    maximum fair bandwidth available between that receiver and the\n   sender, and
    all of this can be supported using a single sender.\n   Because ALC is focused
    on reliable content delivery, the goal is to\n   deliver objects as quickly as
    possible to each receiver while at the\n   same time remaining network friendly
    to competing traffic.  Thus, the\n   congestion control used in conjunction with
    ALC should strive to\n   maximize use of available bandwidth between receivers
    and the sender\n   while at the same time backing off aggressively in the face
    of\n   competing traffic.\n   The sender side of ALC consists of generating packets
    based on\n   objects to be delivered within the session and sending the\n   appropriately
    formatted packets at the appropriate rates to the\n   channels associated with
    the session.  The receiver side of ALC\n   consists of joining appropriate channels
    associated with the session,\n   performing congestion control by adjusting the
    set of joined channels\n   associated with the session in response to detected
    congestion, and\n   using the packets to reliably reconstruct objects.  All information\n
    \  flow in an ALC session is in the form of data packets sent by a\n   single
    sender to channels that receivers join to receive data.\n   ALC does specify the
    Session Description needed by receivers before\n   they join a session, but the
    mechanisms by which receivers obtain\n   this required information is outside
    the scope of ALC.  An\n   application that uses ALC may require that receivers
    report\n   statistics on their reception experience back to the sender, but the\n
    \  mechanisms by which receivers report back statistics is outside the\n   scope
    of ALC.  In general, ALC is designed to be a minimal protocol\n   instantiation
    that provides reliable content delivery without\n   unnecessary limitations to
    the scalability of the basic protocol.\n   This document is a product of the IETF
    RMT WG and follows the general\n   guidelines provided in [RFC3269].\n   A previous
    version of this document was published in the\n   \"Experimental\" category as
    [RFC3450] and is obsoleted by this\n   document.\n   This Proposed Standard specification
    is thus based on and backwards\n   compatible with the protocol defined in [RFC3450]
    updated according\n   to accumulated experience and growing protocol maturity
    since its\n   original publication.  Said experience applies both to this\n   specification
    itself and to congestion control strategies related to\n   the use of this specification.\n
    \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
    \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n
    \  document are to be interpreted as described in BCP 14, [RFC2119].\n"
  - contents:
    - "1.1.  Delivery Service Models\n   ALC can support several different reliable
      content delivery service\n   models as described in [RFC5651].\n"
    title: 1.1.  Delivery Service Models
  - contents:
    - "1.2.  Scalability\n   Massive scalability is a primary design goal for ALC.
      \ IP multicast\n   is inherently massively scalable, but the best effort service
      that it\n   provides does not provide session management functionality,\n   congestion
      control, or reliability.  ALC provides all of this on top\n   of IP multicast
      without sacrificing any of the inherent scalability\n   of IP multicast.  ALC
      has the following properties:\n   o  To each receiver, it appears as if there
      is a dedicated session\n      from the sender to the receiver, where the reception
      rate adjusts\n      to congestion along the path from sender to receiver.\n
      \  o  To the sender, there is no difference in load or outgoing rate if\n      one
      receiver or a million (or any number of) receivers are joined\n      to the
      session, independent of when the receivers join and leave.\n   o  No feedback
      packets are required from receivers to the sender.\n   o  Almost all packets
      in the session that pass through a bottleneck\n      link are utilized by downstream
      receivers, and the session shares\n      the link with competing flows fairly
      in proportion to their\n      utility.\n   Thus, ALC provides a massively scalable
      content delivery transport\n   that is network friendly.\n   ALC intentionally
      omits any application-specific features that could\n   potentially limit its
      scalability.  By doing so, ALC provides a\n   minimal protocol that is massively
      scalable.  Applications may be\n   built on top of ALC to provide additional
      features that may limit the\n   scalability of the application.  Such applications
      are outside the\n   scope of this document.\n"
    title: 1.2.  Scalability
  - contents:
    - "1.3.  Environmental Requirements and Considerations\n   All of the environmental
      requirements and considerations that apply\n   to the LCT building block [RFC5651],
      the FEC building block\n   [RFC5052], the multiple rate congestion control building
      block, and\n   to any additional building blocks that ALC uses also apply to
      ALC.\n   The IP multicast model defined in [RFC1112] is commonly known as Any-\n
      \  Source Multicast (ASM), in contrast to Source-Specific Multicast\n   (SSM)
      which is defined in [RFC3569].  One issue that is specific to\n   ALC with respect
      to ASM is the way the multiple rate congestion\n   control building block interacts
      with ASM.  The congestion control\n   building block may use the measured difference
      in time between when a\n   join to a channel is sent and when the first packet
      from the channel\n   arrives in determining the receiver reception rate.  The
      congestion\n   control building block may also use packet sequence numbers per\n
      \  channel to measure losses, and this is also used to determine the\n   receiver
      reception rate.  These features raise two concerns with\n   respect to ASM:
      The time difference between when the join to a\n   channel is sent and when
      the first packet arrives can be significant\n   due to the use of Rendezvous
      Points (RPs) and the Multicast Source\n   Discovery Protocol (MSDP) [RFC3618]
      protocol, and packets can be lost\n   in the switch over from the (*,G) join
      to the RP and the (S,G) join\n   directly to the sender.  Both of these issues
      could potentially\n   substantially degrade the reception rate of receivers.
      \ To ameliorate\n   these concerns, it is recommended during deployment to ensure
      that\n   the RP be as close to the sender as possible.  SSM does not share\n
      \  these same concerns.  For a fuller consideration of these issues,\n   consult
      the multiple rate congestion control building block.\n"
    title: 1.3.  Environmental Requirements and Considerations
  title: 1.  Introduction
- contents:
  - "2.  Architecture Definition\n   ALC uses the LCT building block [RFC5651] to
    provide in-band session\n   management functionality.  ALC uses a multiple rate
    congestion\n   control building block that is compliant with [RFC2357] to provide\n
    \  congestion control that is feedback free.  Receivers adjust their\n   reception
    rates individually by joining and leaving channels\n   associated with the session.
    \ ALC uses the FEC building block\n   [RFC5052] to provide reliability.  The sender
    generates encoding\n   symbols based on the object to be delivered using FEC codes
    and sends\n   them in packets to channels associated with the session.  Receivers\n
    \  simply wait for enough packets to arrive in order to reliably\n   reconstruct
    the object.  Thus, there is no request for retransmission\n   of individual packets
    from receivers that miss packets in order to\n   assure reliable reception of
    an object, and the packets and their\n   rate of transmission out of the sender
    can be independent of the\n   number and the individual reception experiences
    of the receivers.\n   The definition of a session for ALC is the same as it is
    for LCT.  An\n   ALC session comprises multiple channels originating at a single\n
    \  sender that are used for some period of time to carry packets\n   pertaining
    to the transmission of one or more objects that can be of\n   interest to receivers.
    \ Congestion control is performed over the\n   aggregate of packets sent to channels
    belonging to a session.  The\n   fact that an ALC session is restricted to a single
    sender does not\n   preclude the possibility of receiving packets for the same
    objects\n   from multiple senders.  However, each sender would be sending packets\n
    \  to a different session to which congestion control is individually\n   applied.
    \ Although receiving concurrently from multiple sessions is\n   allowed, how this
    is done at the application level is outside the\n   scope of this document.\n
    \  ALC is a protocol instantiation as defined in [RFC3048].  This\n   document
    describes version 1 of ALC, which MUST use version 1 of LCT\n   described in [RFC5651].
    \ Like LCT, ALC is designed to be used with\n   the IP multicast network service.
    \ This specification defines ALC as\n   payload of the UDP transport protocol
    [RFC0768] that supports the IP\n   multicast delivery of packets.\n   The ALC
    packet format is illustrated in Figure 1.  An ALC packet\n   header immediately
    follows the IP/UDP header and consists of the\n   default LCT header that is described
    in [RFC5651] followed by the FEC\n   Payload ID that is described in [RFC5052].
    \ The Congestion Control\n   Information field within the LCT header carries the
    required\n   Congestion Control Information that is described in the multiple
    rate\n   congestion control building block specified that is compliant with\n
    \  [RFC2357].  The packet payload that follows the ALC packet header\n   consists
    of encoding symbols that are identified by the FEC Payload\n   ID as described
    in [RFC5052].\n               +----------------------------------------+\n               |
    \              IP Header                |\n               +----------------------------------------+\n
    \              |              UDP Header                |\n               +----------------------------------------+\n
    \              |              LCT Header                |\n               +----------------------------------------+\n
    \              |            FEC Payload Id              |\n               +----------------------------------------+\n
    \              |           Encoding Symbols             |\n               +----------------------------------------+\n
    \                       Figure 1: ALC Packet Format\n   Each receiver is required
    to obtain a Session Description before\n   joining an ALC session.  As described
    later, the Session Description\n   includes out-of-band information required for
    the LCT, FEC, and the\n   multiple rate congestion control building blocks.  The
    FEC Object\n   Transmission Information specified in the FEC building block\n
    \  [RFC5052] required for each object to be received by a receiver can\n   be
    communicated to a receiver either out-of-band or in-band using a\n   Header Extension.
    \ The means for communicating the Session\n   Description and the FEC Object Transmission
    Information to a receiver\n   is outside the scope of this document.\n"
  - contents:
    - "2.1.  LCT Building Block\n   LCT requires receivers to be able to uniquely
      identify and\n   demultiplex packets associated with an LCT session, and ALC
      inherits\n   and strengthens this requirement.  A Transport Session Identifier\n
      \  (TSI) MUST be associated with each session and MUST be carried in the\n   LCT
      header of each ALC packet.  The TSI is scoped by the sender IP\n   address,
      and the (sender IP address, TSI) pair MUST uniquely identify\n   the session.\n
      \  The LCT header contains a Congestion Control Information (CCI) field\n   that
      MUST be used to carry the Congestion Control Information from\n   the specified
      multiple rate congestion control protocol.  There is a\n   field in the LCT
      header that specifies the length of the CCI field,\n   and the multiple rate
      congestion control building block MUST uniquely\n   identify a format of the
      CCI field that corresponds to this length.\n   The LCT header contains a Codepoint
      field that MAY be used to\n   communicate to a receiver the settings for information
      that may vary\n   during a session.  If used, the mapping between settings and\n
      \  Codepoint values is to be communicated in the Session Description,\n   and
      this mapping is outside the scope of this document.  For example,\n   the FEC
      Encoding ID that is part of the FEC Object Transmission\n   Information, as
      specified in the FEC building block [RFC5052], could\n   vary for each object
      carried in the session, and the Codepoint value\n   could be used to communicate
      the FEC Encoding ID to be used for each\n   object.  The mapping between FEC
      Encoding IDs and Codepoints could\n   be, for example, the identity mapping.\n
      \  If more than one object is to be carried within a session, then the\n   Transmission
      Object Identifier (TOI) MUST be used in the LCT header\n   to identify which
      packets are to be associated with which objects.\n   In this case, the receiver
      MUST use the TOI to associate received\n   packets with objects.  The TOI is
      scoped by the IP address of the\n   sender and the TSI, i.e., the TOI is scoped
      by the session.  The TOI\n   for each object is REQUIRED to be unique within
      a session, but is not\n   required be unique across sessions.  Furthermore,
      the same object MAY\n   have a different TOI in different sessions.  The mapping
      between TOIs\n   and objects carried in a session is outside the scope of this\n
      \  document.\n   If only one object is carried within a session, then the TOI
      MAY be\n   omitted from the LCT header.\n   The LCT header from version 1 of
      the LCT building block [RFC5651]\n   MUST be used.\n   The LCT Header includes
      a two-bit Protocol Specific Indication (PSI)\n   field in bits 6 and 7 of the
      first word of the LCT header.  These two\n   bits are used by ALC as follows:\n
      \      0                   1                   2                   3\n       0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                  +-+-+\n
      \              ...|X|Y|...\n                  +-+-+\n                   Figure
      2: PSI Bits within LCT Header\n      PSI bit X - Source Packet Indicator (SPI)\n
      \     PSI bit Y - Reserved\n   The Source Packet Indicator is used with systematic
      FEC Schemes which\n   define a different FEC Payload ID format for packets containing
      only\n   source data compared to the FEC Payload ID format for packets\n   containing
      repair data.  For such FEC Schemes, the SPI MUST be set to\n   1 when the FEC
      Payload ID format for packets containing only source\n   data is used, and the
      SPI MUST be set to zero when the FEC Payload ID\n   for packets containing repair
      data is used.  In the case of FEC\n   Schemes that define only a single FEC
      Payload ID format, the SPI MUST\n   be set to zero by the sender and MUST be
      ignored by the receiver.\n   Support of two FEC Payload ID formats allows FEC
      Payload ID\n   information that is only of relevance when FEC decoding is to
      be\n   performed to be provided in the FEC Payload ID format for packets\n   containing
      repair data.  This information need not be processed by\n   receivers that do
      not perform FEC decoding (either because no FEC\n   decoding is required or
      because the receiver does not support FEC\n   decoding).\n"
    title: 2.1.  LCT Building Block
  - contents:
    - "2.2.  Multiple Rate Congestion Control Building Block\n   At a minimum, implementations
      of ALC MUST support [RFC3738].  Note\n   that [RFC3738] has been published in
      the \"Experimental\" category and\n   thus has lower maturity level than the
      present document.  Caution\n   should be used since it may be less stable than
      this document.\n   Congestion control MUST be applied to all packets within
      a session\n   independently of which information about which object is carried
      in\n   each packet.  Multiple rate congestion control is specified because\n
      \  of its suitability to scale massively and because of its suitability\n   for
      reliable content delivery.  [RFC3738] specifies in-band\n   Congestion Control
      Information (CCI) that MUST be carried in the CCI\n   field of the LCT header.\n
      \  Alternative multiple rate congestion control building blocks MAY be\n   supported,
      but only a single congestion control building block may be\n   used in a given
      ALC session.  The congestion control building block\n   to be used in an ALC
      session is specified in the Session Description\n   (see Section 2.4).  A multiple
      rate congestion control building block\n   MAY specify more than one format
      for the CCI field, but it MUST\n   specify at most one format for each of the
      possible lengths 32, 64,\n   96, or 128 bits.  The value of C in the LCT header
      that determines\n   the length of the CCI field MUST correspond to one of the
      lengths for\n   the CCI defined in the multiple rate congestion control building\n
      \  block; this length MUST be the same for all packets sent to a\n   session,
      and the CCI format that corresponds to the length as\n   specified in the multiple
      rate congestion control building block MUST\n   be the format used for the CCI
      field in the LCT header.\n   When using a multiple rate congestion control building
      block, a\n   sender sends packets in the session to several channels at\n   potentially
      different rates.  Then, individual receivers adjust their\n   reception rate
      within a session by adjusting to which set of channels\n   they are joined at
      each point in time depending on the available\n   bandwidth between the receiver
      and the sender, but independent of\n   other receivers.\n"
    title: 2.2.  Multiple Rate Congestion Control Building Block
  - contents:
    - "2.3.  FEC Building Block\n   The FEC building block [RFC5052] provides reliable
      object delivery\n   within an ALC session.  Each object sent in the session
      is\n   independently encoded using FEC codes as described in [RFC3453],\n   which
      provide a more in-depth description of the use of FEC codes in\n   reliable
      content delivery protocols.  All packets in an ALC session\n   MUST contain
      an FEC Payload ID in a format that is compliant with the\n   FEC Scheme in use.
      \ The FEC Payload ID uniquely identifies the\n   encoding symbols that constitute
      the payload of each packet, and the\n   receiver MUST use the FEC Payload ID
      to determine how the encoding\n   symbols carried in the payload of the packet
      were generated from the\n   object as described in the FEC building block.\n
      \  As described in [RFC5052], a receiver is REQUIRED to obtain the FEC\n   Object
      Transmission Information for each object for which data\n   packets are received
      from the session.  In the context of ALC, the\n   FEC Object Transmission Information
      includes:\n   o  The FEC Encoding ID.\n   o  If an Under-Specified FEC Encoding
      ID is used, then the FEC\n      Instance ID associated with the FEC Encoding
      ID.\n   o  For each object in the session, the transfer length of the object\n
      \     in bytes.\n   Additional FEC Object Transmission Information may be required\n
      \  depending on the FEC Scheme that is used (identified by the FEC\n   Encoding
      ID).\n   Some of the FEC Object Transmission Information MAY be implicit based\n
      \  on the FEC Scheme and/or implementation.  As an example, source block\n   lengths
      may be derived by a fixed algorithm from the object length.\n   As another example,
      it may be that all source blocks are the same\n   length and this is what is
      passed out-of-band to the receiver.  As\n   another example, it could be that
      the full-sized source block length\n   is provided, and this is the length used
      for all but the last source\n   block, which is calculated based on the full
      source block length and\n   the object length.  As another example, it could
      be that the same FEC\n   Encoding ID and FEC Instance ID are always used for
      a particular\n   application, and thus the FEC Encoding ID and FEC Instance
      ID are\n   implicitly defined.\n   Sometimes the objects that will be sent in
      a session are completely\n   known before the receiver joins the session, in
      which case the FEC\n   Object Transmission Information for all objects in the
      session can be\n   communicated to receivers before they join the session.  At
      other\n   times, the objects may not know when the session begins, receivers\n
      \  may join a session in progress and may not be interested in some\n   objects
      for which transmission has finished, or receivers may leave a\n   session before
      some objects are even available within the session.\n   In these cases, the
      FEC Object Transmission Information for each\n   object may be dynamically communicated
      to receivers at or before the\n   time packets for the object are received from
      the session.  This may\n   be accomplished using an out-of-band mechanism, in-band
      using the\n   Codepoint field or a Header Extension, or any combination of these\n
      \  methods.  How the FEC Object Transmission Information is communicated\n   to
      receivers is outside the scope of this document.\n"
    title: 2.3.  FEC Building Block
  - contents:
    - "2.4.  Session Description\n   Before a receiver can join an ALC session, the
      receiver needs to\n   obtain a Session Description that contains the following
      information:\n   o  The multiple rate congestion control building block to be
      used for\n      the session;\n   o  The sender IP address;\n   o  The number
      of channels in the session;\n   o  The address and port number used for each
      channel in the session;\n   o  The Transport Session ID (TSI) to be used for
      the session;\n   o  An indication of whether or not the session carries packets
      for\n      more than one object;\n   o  If Header Extensions are to be used,
      the format of these Header\n      Extensions.\n   o  Enough information to determine
      the packet authentication scheme\n      being used, if one is being used.\n
      \  How the Session Description is communicated to receivers is outside\n   the
      scope of this document.\n   The Codepoint field within the LCT portion of the
      header CAN be used\n   to communicate in-band some of the dynamically changing
      information\n   within a session.  To do this, a mapping between Codepoint values
      and\n   the different dynamic settings MUST be included within the Session\n
      \  Description, and then settings to be used are communicated via the\n   Codepoint
      value placed into each packet.  For example, it is possible\n   that multiple
      objects are delivered within the same session and that\n   a different FEC encoding
      algorithm is used for different types of\n   objects.  Then the Session Description
      could contain the mapping\n   between Codepoint values and FEC Encoding IDs.
      \ As another example,\n   it is possible that a different packet authentication
      scheme is used\n   for different packets sent to the session.  In this case,
      the mapping\n   between the packet authentication scheme and Codepoint values
      could\n   be provided in the Session Description.  Combinations of settings
      can\n   be mapped to Codepoint values as well.  For example, a particular\n
      \  combination of a FEC Encoding ID and a packet authentication scheme\n   could
      be associated with a Codepoint value.\n   The Session Description could also
      include, but is not limited to:\n   o  The mappings between combinations of
      settings and Codepoint\n      values;\n   o  The data rates used for each channel;\n
      \  o  The length of the packet payload;\n   o  Any information that is relevant
      to each object being transported,\n      such as the Object Transmission Information
      for each object, when\n      the object will be available within the session,
      and for how long.\n   The Session Description could be in a form such as the
      Session\n   Description Protocol (SDP) as defined in [RFC4566], XML metadata
      as\n   defined in [RFC3023], or HTTP/MIME headers as defined in [RFC2616],\n
      \  etc.  It might be carried in a session announcement protocol such as\n   SAP
      as defined in [RFC2974], obtained using a proprietary session\n   control protocol,
      located on a web page with scheduling information,\n   or conveyed via email
      or other out-of-band methods.  Discussion of\n   Session Description formats
      and methods for communication of Session\n   Descriptions to receivers is beyond
      the scope of this document.\n"
    title: 2.4.  Session Description
  - contents:
    - "2.5.  Packet Authentication Building Block\n   It is RECOMMENDED that implementors
      of ALC use some packet\n   authentication scheme to protect the protocol from
      attacks.  Suitable\n   schemes are described in [RFC5776] and [RMT-SIMPLE].\n"
    title: 2.5.  Packet Authentication Building Block
  title: 2.  Architecture Definition
- contents:
  - "3.  Conformance Statement\n   This Protocol Instantiation document, in conjunction
    with the LCT\n   building block [RFC5651], the FEC building block [RFC5052], and\n
    \  [RFC3738] completely specifies a working reliable multicast transport\n   protocol
    that conforms to the requirements described in [RFC2357].\n"
  title: 3.  Conformance Statement
- contents:
  - "4.  Functionality Definition\n   This section describes the format and functionality
    of the data\n   packets carried in an ALC session as well as the sender and receiver\n
    \  operations for a session.\n"
  - contents:
    - "4.1.  Packet Format Used by ALC\n   The packet format used by ALC is the UDP
      header followed by the LCT\n   header followed by the FEC Payload ID followed
      by the packet payload.\n   The LCT header is defined in the LCT building block
      [RFC5651] and the\n   FEC Payload ID is described in the FEC building block
      [RFC5052].  The\n   Congestion Control Information field in the LCT header contains
      the\n   required Congestion Control Information that is described in the\n   multiple
      rate congestion control building block used.  The packet\n   payload contains
      encoding symbols generated from an object.  If more\n   than one object is carried
      in the session, then the Transmission\n   Object ID (TOI) within the LCT header
      MUST be used to identify from\n   which object the encoding symbols are generated.
      \ Within the scope of\n   an object, encoding symbols carried in the payload
      of the packet are\n   identified by the FEC Payload ID as described in the FEC
      building\n   block.\n   The version number of ALC specified in this document
      is 1.  The\n   version number field of the LCT header MUST be interpreted as
      the ALC\n   version number field.  This version of ALC implicitly makes use
      of\n   version 1 of the LCT building block defined in [RFC5651].\n   The overall
      ALC packet format is depicted in Figure 3.  The packet is\n   an IP packet,
      either IPv4 or IPv6, and the IP header precedes the UDP\n   header.  The ALC
      packet format has no dependencies on the IP version\n   number.\n        0                   1
      \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                         UDP Header                            |\n       |
      \                                                              |\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      \      |                         LCT Header                            |\n       |
      \                                                              |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                       FEC Payload ID                          |\n       |
      \                                                              |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                     Encoding Symbol(s)                        |\n       |
      \                          ...                                 |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                   Figure 3: Overall ALC Packet Format\n   In some special
      cases an ALC sender may need to produce ALC packets\n   that do not contain
      any payload.  This may be required, for example,\n   to signal the end of a
      session or to convey congestion control\n   information.  These data-less packets
      do not contain the FEC Payload\n   ID either, but only the LCT header fields.
      \ The total datagram\n   length, conveyed by outer protocol headers (e.g., the
      IP or UDP\n   header), enables receivers to detect the absence of the ALC payload\n
      \  and FEC Payload ID.\n   For ALC, the length of the TSI field within the LCT
      header is\n   REQUIRED to be non-zero.  This implies that the sender MUST NOT
      set\n   both the LCT flags S and H to zero.\n"
    title: 4.1.  Packet Format Used by ALC
  - contents:
    - "4.2.  LCT Header Extension Fields\n   This specification defines a new LCT
      Header Extension, \"EXT_FTI\", for\n   the purpose of communicating the FEC
      Object Transmission Information\n   in association with data packets of an object.
      \ The LCT Header\n   Extension Type for EXT_FTI is 64.\n   The Header Extension
      Content (HEC) field of the EXT_FTI LCT Header\n   Extension contains the encoded
      FEC Object Transmission Information as\n   defined in [RFC5052].  The format
      of the encoded FEC Object\n   Transmission Information is dependent on the FEC
      Scheme in use and so\n   is outside the scope of this document.\n"
    title: 4.2.  LCT Header Extension Fields
  - contents:
    - "4.3.  Sender Operation\n   The sender operation, when using ALC, includes all
      the points made\n   about the sender operation when using the LCT building block\n
      \  [RFC5651], the FEC building block [RFC5052], and the multiple rate\n   congestion
      control building block.\n   A sender using ALC should make available the required
      Session\n   Description as described in Section 2.4.  A sender should also make\n
      \  available the required FEC Object Transmission Information as\n   described
      in Section 2.3.\n   Within a session, a sender transmits a sequence of packets
      to the\n   channels associated with the session.  The ALC sender MUST obey the\n
      \  rules for filling in the CCI field in the packet headers, and it MUST\n   send
      packets at the appropriate rates to the channels associated with\n   the session
      as dictated by the multiple rate congestion control\n   building block.\n   The
      ALC sender MUST use the same TSI for all packets in the session.\n   Several
      objects MAY be delivered within the same ALC session.  If\n   more than one
      object is to be delivered within a session, then the\n   sender MUST use the
      TOI field.  Each object MUST be identified by a\n   unique TOI within the session,
      and the sender MUST use corresponding\n   TOI for all packets pertaining to
      the same object.  The FEC Payload\n   ID MUST correspond to the encoding symbol(s)
      for the object carried\n   in the payload of the packet.\n   It is RECOMMENDED
      that packet authentication be used.  If packet\n   authentication is used, then
      the Header Extensions described in\n   Section 4.2 MAY be used to carry the
      authentication.\n"
    title: 4.3.  Sender Operation
  - contents:
    - "4.4.  Receiver Operation\n   The receiver operation, when using ALC, includes
      all the points made\n   about the receiver operation when using the LCT building
      block\n   [RFC5651], the FEC building block [RFC5052], and the multiple rate\n
      \  congestion control building block.\n   To be able to participate in a session,
      a receiver needs to obtain\n   the required Session Description as listed in
      Section 2.4.  How\n   receivers obtain a Session Description is outside the
      scope of this\n   document.\n   As described in Section 2.3, a receiver needs
      to obtain the required\n   FEC Object Transmission Information for each object
      for which the\n   receiver receives and processes packets.\n   Upon receipt
      of each packet, the receiver proceeds with the following\n   steps in the order
      listed.\n   1.  The receiver MUST parse the packet header and verify that it
      is a\n       valid header.  If it is not valid, then the packet MUST be\n       discarded
      without further processing.\n   2.  The receiver MUST verify that the sender
      IP address together with\n       the TSI carried in the header matches one of
      the (sender IP\n       address, TSI) pairs that was received in a Session Description\n
      \      and to which the receiver is currently joined.  If there is not a\n       match,
      then the packet MUST be silently discarded without further\n       processing.
      \ The remaining steps are performed within the scope\n       of the (sender
      IP address, TSI) session of the received packet.\n   3.  The receiver MUST process
      and act on the CCI field in accordance\n       with the multiple rate congestion
      control building block.\n   4.  If more than one object is carried in the session,
      the receiver\n       MUST verify that the TOI carried in the LCT header is valid.
      \ If\n       the TOI is not valid, the packet MUST be discarded without\n       further
      processing.\n   5.  The receiver SHOULD process the remainder of the packet,\n
      \      including interpreting the other header fields appropriately, and\n       using
      the FEC Payload ID and the encoding symbol(s) in the\n       payload to reconstruct
      the corresponding object.\n   It is RECOMMENDED that packet authentication be
      used.  If packet\n   authentication is used, then it is RECOMMENDED that the
      receiver\n   immediately check the authenticity of a packet before proceeding
      with\n   step (3) above.  If immediate checking is possible and if the packet\n
      \  fails the check, then the receiver MUST silently discard the packet.\n"
    title: 4.4.  Receiver Operation
  title: 4.  Functionality Definition
- contents:
  - "5.  Security Considerations\n   The same security considerations that apply to
    the LCT, FEC, and the\n   multiple rate congestion control building blocks also
    apply to ALC.\n   ALC is especially vulnerable to denial-of-service attacks by\n
    \  attackers that try to send forged packets to the session, which would\n   prevent
    successful reconstruction or cause inaccurate reconstruction\n   of large portions
    of the object by receivers.  ALC is also\n   particularly affected by such an
    attack because many receivers may\n   receive the same forged packet.  There are
    two ways to protect\n   against such attacks, one at the application level and
    one at the\n   packet level.  It is RECOMMENDED that prevention be provided at
    both\n   levels.\n   At the application level, it is RECOMMENDED that an integrity
    check\n   on the entire received object be done once the object is\n   reconstructed
    to ensure it is the same as the sent object.  Moreover,\n   in order to obtain
    strong cryptographic integrity protection, a\n   digital signature verifiable
    by the receiver SHOULD be used to\n   provide this application-level integrity
    check.  However, if even one\n   corrupted or forged packet is used to reconstruct
    the object, it is\n   likely that the received object will be reconstructed incorrectly.\n
    \  This will appropriately cause the integrity check to fail and in this\n   case,
    the inaccurately reconstructed object SHOULD be discarded.\n   Thus, the acceptance
    of a single forged packet can be an effective\n   denial-of-service attack for
    distributing objects, but an object\n   integrity check at least prevents inadvertent
    use of inaccurately\n   reconstructed objects.  The specification of an application-level\n
    \  integrity check of the received object is outside the scope of this\n   document.\n
    \  At the packet level, it is RECOMMENDED that a packet-level\n   authentication
    be used to ensure that each received packet is an\n   authentic and uncorrupted
    packet containing data for the object\n   arriving from the specified sender.
    \ Packet-level authentication has\n   the advantage that corrupt or forged packets
    can be discarded\n   individually and the received authenticated packets can be
    used to\n   accurately reconstruct the object.  Thus, the effect of a denial-of-\n
    \  service attack that injects forged packets is proportional only to\n   the
    number of forged packets, and not to the object size.\n   [RMT-SIMPLE]and [RFC5776]
    described packet level authentication\n   schemes that can be used with the ALC
    protocol.\n   In addition to providing protection against reconstruction of\n
    \  inaccurate objects, packet-level authentication can also provide some\n   protection
    against denial-of-service attacks on the multiple rate\n   congestion control.
    \ Attackers can try to inject forged packets with\n   incorrect congestion control
    information into the multicast stream,\n   thereby potentially adversely affecting
    network elements and\n   receivers downstream of the attack, and much less significantly
    the\n   rest of the network and other receivers.  Thus, it is also\n   RECOMMENDED
    that packet-level authentication be used to protect\n   against such attacks.
    \ Timed Efficient Stream Loss-Tolerant\n   Authentication (TESLA) [RFC5776] can
    also be used to some extent to\n   limit the damage caused by such attacks.  However,
    with TESLA, a\n   receiver can only determine if a packet is authentic several
    seconds\n   after it is received, and thus an attack against the congestion\n
    \  control protocol can be effective for several seconds before the\n   receiver
    can react to slow down the session reception rate.\n   Some packet authentication
    schemes such as TESLA [RFC5776] do not\n   allow an immediate authenticity check.
    \ In this case, the receiver\n   SHOULD check the authenticity of a packet as
    soon as possible, and if\n   the packet fails the check, then it MUST be silently
    discarded before\n   Step 5 above.  It is RECOMMENDED that if receivers detect
    many\n   packets that fail authentication checks within a session, the above\n
    \  procedure should be modified for this session so that Step 3 is\n   delayed
    until after the authentication check and only performed if\n   the check succeeds.\n
    \  Reverse Path Forwarding checks SHOULD be enabled in all network\n   routers
    and switches along the path from the sender to receivers to\n   limit the possibility
    of a bad agent injecting forged packets into\n   the multicast tree data path.\n"
  - contents:
    - "5.1.  Baseline Secure ALC Operation\n   This section describes a baseline mode
      of secure ALC protocol\n   operation based on application of the IPsec security
      protocol.  This\n   approach is documented here to provide a reference of an\n
      \  interoperable secure mode of operation.  However, additional\n   approaches
      to ALC security, including other forms of IPsec\n   application, MAY be specified
      in the future.  For example, the use of\n   the EXT_AUTH Header Extension could
      enable ALC-specific\n   authentication or security encapsulation headers similar
      to those of\n   IPsec to be specified and inserted into the ALC/LCT protocol
      message\n   headers.  This would allow header compression techniques to be\n
      \  applied to IP and ALC protocol headers when needed in a similar\n   fashion
      to that of RTP [RFC3550] and as preserved in the\n   specification for Secure
      Real Time Protocol (SRTP) [RFC3711].\n   The baseline approach described is
      applicable to ALC operation\n   configured for SSM (or SSM-like) operation where
      there is a single\n   sender.  The receiver set would maintain a single IPsec
      Security\n   Association (SA) for each ALC sender.\n"
    - contents:
      - "5.1.1.  IPsec Approach\n   To support this baseline form of secure ALC one-to-many
        SSM\n   operation, each node SHALL be configured with a transport mode IPsec\n
        \  Security Association and corresponding Security Policy Database (SPD)\n
        \  entry.  This entry will be used for sender-to-group multicast packet\n
        \  authentication and optionally encryption.\n   The ALC sender SHALL use
        an IPsec SA configured for Encapsulating\n   Security Payload (ESP) protocol
        [RFC4303] operation with the option\n   for data origination authentication
        enabled.  It is also RECOMMENDED\n   that this IPsec ESP SA be also configured
        to provide confidentiality\n   protection for IP packets containing ALC protocol
        messages.  This is\n   suggested to make the realization of complex replay
        attacks much more\n   difficult.  The encryption key for this SA SHALL be
        preplaced at the\n   sender and receiver(s) prior to ALC protocol operation.
        \ Use of\n   automated key management is RECOMMENDED as a rekey SHALL be required\n
        \  prior to expiration of the sequence space for the SA.  This is\n   necessary
        so that receivers may use the built-in IPsec replay attack\n   protection
        possible for an IPsec SA with a single source (the ALC\n   sender).  Thus,
        the receivers SHALL enable replay attack protection\n   for this SA used to
        secure ALC sender traffic.  The sender IPsec SPD\n   entry MUST be configured
        to process outbound packets to the\n   destination address and UDP port number
        of the applicable ALC\n   session.\n   The ALC receiver(s) MUST be configured
        with the SA and SPD entry to\n   properly process the IPsec-secured packets
        from the sender.  Note\n   that use of ESP confidentiality, as RECOMMENDED,
        for secure ALC\n   protocol operation makes it more difficult for adversaries
        to conduct\n   effective replay attacks that may mislead receivers on content\n
        \  reception.  This baseline approach can be used for ALC protocol\n   sessions
        with multiple senders if a distinct SA is established for\n   each sender.\n
        \  In early deployments of this baseline approach to ALC security, it is\n
        \  anticipated that key management will be conducted out-of-band with\n   respect
        to ALC protocol operation.  For ALC unidirectional operation,\n   it is possible
        that receivers may retrieve keying information from a\n   central server via
        out-of-band (with respect to ALC) communication as\n   needed or otherwise
        conduct group key updates with a similar\n   centralized approach.  However,
        it may be possible with some key\n   management schemes for rekey messages
        to be transmitted to the group\n   as a message or transport object within
        the ALC reliable transfer\n   session.  An additional specification is necessary
        to define an in-\n   band key management scheme for ALC sessions perhaps using
        the\n   mechanisms of the automated group key management specifications cited\n
        \  in this document.\n"
      title: 5.1.1.  IPsec Approach
    - contents:
      - "5.1.2.  IPsec Requirements\n   In order to implement this secure mode of
        ALC protocol operation, the\n   following IPsec capabilities are required.\n"
      - contents:
        - "5.1.2.1.  Selectors\n   The implementation MUST be able to use the source
          address,\n   destination address, protocol (UDP), and UDP port numbers as\n
          \  selectors in the SPD.\n"
        title: 5.1.2.1.  Selectors
      - contents:
        - "5.1.2.2.  Mode\n   IPsec in transport mode MUST be supported.  The use
          of IPsec\n   [RFC4301] processing for secure ALC traffic SHOULD also be
          REQUIRED\n   such that unauthenticated packets are not received by the ALC\n
          \  protocol implementation.\n"
        title: 5.1.2.2.  Mode
      - contents:
        - "5.1.2.3.  Key Management\n   An automated key management scheme for group
          key distribution and\n   rekeying such as the Group Domain of Interpretation
          (GDOI) [RFC3547],\n   Group Secure Association Key Management Protocol (GSAKMP)
          [RFC4535],\n   or Multimedia Internet KEYing (MIKEY) [RFC3830] SHOULD be
          used.\n   Relatively short-lived ALC sessions MAY be able to use Manual
          Keying\n   with a single, preplaced key, particularly if Extended Sequence\n
          \  Numbering (ESN) [RFC4303] is available in the IPsec implementation\n
          \  used.  It should also be noted that it may be possible for key update\n
          \  messages (e.g., the GDOI GROUPKEY-PUSH message) to be included in the\n
          \  ALC application reliable data transmission as transport objects if\n
          \  appropriate interfaces were available between the ALC application and\n
          \  the key management daemon.\n"
        title: 5.1.2.3.  Key Management
      - contents:
        - "5.1.2.4.  Security Policy\n   Receivers SHOULD accept connections only
          from the designated,\n   authorized sender(s).  It is expected that appropriate
          key management\n   will provide encryption keys only to receivers authorized
          to\n   participate in a designated session.  The approach outlined here\n
          \  allows receiver sets to be controlled on a per-sender basis.\n"
        title: 5.1.2.4.  Security Policy
      - contents:
        - "5.1.2.5.  Authentication and Encryption\n   Large ALC group sizes may necessitate
          some form of key management\n   that does rely upon shared secrets.  The
          GDOI and GSAKMP protocols\n   mentioned here allow for certificate-based
          authentication.  These\n   certificates SHOULD use IP addresses for authentication.
          \ However, it\n   is likely that available group key management implementations
          will\n   not be ALC-specific.\n"
        title: 5.1.2.5.  Authentication and Encryption
      - contents:
        - "5.1.2.6.  Availability\n   The IPsec requirements profile outlined here
          is commonly available on\n   many potential ALC hosts.  The principal issue
          is that configuration\n   and operation of IPsec typically requires privileged
          user\n   authorization.  Automated key management implementations are\n
          \  typically configured with the privileges necessary to allow the\n   needed
          system IPsec configuration.\n"
        title: 5.1.2.6.  Availability
      title: 5.1.2.  IPsec Requirements
    title: 5.1.  Baseline Secure ALC Operation
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   This specification registers one value in the LCT
    Header Extensions\n   Types namespace as follows:\n                 +-------+---------+--------------------+\n
    \                | Value | Name    | Reference          |\n                 +-------+---------+--------------------+\n
    \                | 64    | EXT_FTI | This specification |\n                 +-------+---------+--------------------+\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgments\n   This specification is substantially based on RFC 3450
    [RFC3450] and\n   thus credit for the authorship of this document is primarily
    due to\n   the authors of RFC 3450: Mike Luby, Jim Gemmel, Lorenzo Vicisano,\n
    \  Luigi Rizzo, and Jon Crowcroft.  Vincent Roca, Justin Chapweske, and\n   Roger
    Kermode also contributed to RFC 3450.  Additional thanks are\n   due to Vincent
    Roca and Rod Walsh for contributions to this update to\n   Proposed Standard.\n"
  title: 7.  Acknowledgments
- contents:
  - "8.  Changes from RFC 3450\n   This section summarizes the changes that were made
    from the\n   \"Experimental\" version of this specification published as RFC 3450\n
    \  [RFC3450]:\n   o  Updated all references to the obsoleted RFC 2068 to RFC 2616.\n
    \  o  Removed the 'Statement of Intent' from the introduction.  (The\n      Statement
    of Intent was meant to clarify the \"Experimental\" status\n      of RFC 3450.)\n
    \  o  Removed the 'Intellectual Property Issues' Section and replaced\n      with
    a standard IPR Statement.\n   o  Removed material duplicated in LCT.\n   o  Updated
    references in this document to new versions of the LCT\n      Building Block and
    the FEC Building Block, and aligned this\n      document with changes in the new
    version of the FEC Building\n      Block.\n   o  Split normative and informative
    references.\n   o  Material applicable in a general LCT context, not just for
    ALC has\n      been moved to LCT.\n   o  The first bit of the \"Protocol-Specific
    Indication\" in the LCT\n      Header is defined as a \"Source Packet Indication\".
    \ This is used\n      in the case that an FEC Scheme defines two FEC Payload ID
    formats,\n      one of which is for packets containing only source symbols that\n
    \     can be processed by receivers that do not support FEC Decoding.\n   o  Definition
    and IANA registration of the EXT_FTI LCT Header\n      Extension.\n"
  title: 8.  Changes from RFC 3450
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC0768]     Postel, J., \"User Datagram Protocol\",
      STD 6, RFC 768,\n                 August 1980.\n   [RFC1112]     Deering, S.,
      \"Host extensions for IP multicasting\",\n                 STD 5, RFC 1112,
      August 1989.\n   [RFC2119]     Bradner, S., \"Key words for use in RFCs to Indicate\n
      \                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2616]
      \    Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n                 Masinter,
      L., Leach, P., and T. Berners-Lee, \"Hypertext\n                 Transfer Protocol
      -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3023]     Murata, M., St. Laurent,
      S., and D. Kohn, \"XML Media\n                 Types\", RFC 3023, January 2001.\n
      \  [RFC3738]     Luby, M. and V. Goyal, \"Wave and Equation Based Rate\n                 Control
      (WEBRC) Building Block\", RFC 3738, April 2004.\n   [RFC4301]     Kent, S. and
      K. Seo, \"Security Architecture for the\n                 Internet Protocol\",
      RFC 4301, December 2005.\n   [RFC4303]     Kent, S., \"IP Encapsulating Security
      Payload (ESP)\",\n                 RFC 4303, December 2005.\n   [RFC4566]     Handley,
      M., Jacobson, V., and C. Perkins, \"SDP:\n                 Session Description
      Protocol\", RFC 4566, July 2006.\n   [RFC5052]     Watson, M., Luby, M., and
      L. Vicisano, \"Forward Error\n                 Correction (FEC) Building Block\",
      RFC 5052,\n                 August 2007.\n   [RFC5651]     Luby, M., Watson,
      M., and L. Vicisano, \"Layered Coding\n                 Transport (LCT) Building
      Block\", RFC 5651,\n                 October 2009.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC2357]     Mankin, A., Romanov, A., Bradner,
      S., and V. Paxson,\n                 \"IETF Criteria for Evaluating Reliable
      Multicast\n                 Transport and Application Protocols\", RFC 2357,\n
      \                June 1998.\n   [RFC2974]     Handley, M., Perkins, C., and
      E. Whelan, \"Session\n                 Announcement Protocol\", RFC 2974, October
      2000.\n   [RFC3048]     Whetten, B., Vicisano, L., Kermode, R., Handley, M.,\n
      \                Floyd, S., and M. Luby, \"Reliable Multicast Transport\n                 Building
      Blocks for One-to-Many Bulk-Data Transfer\",\n                 RFC 3048, January
      2001.\n   [RFC3269]     Kermode, R. and L. Vicisano, \"Author Guidelines for\n
      \                Reliable Multicast Transport (RMT) Building Blocks and\n                 Protocol
      Instantiation documents\", RFC 3269,\n                 April 2002.\n   [RFC3450]
      \    Luby, M., Gemmell, J., Vicisano, L., Rizzo, L., and J.\n                 Crowcroft,
      \"Asynchronous Layered Coding (ALC) Protocol\n                 Instantiation\",
      RFC 3450, December 2002.\n   [RFC3453]     Luby, M., Vicisano, L., Gemmell,
      J., Rizzo, L.,\n                 Handley, M., and J. Crowcroft, \"The Use of
      Forward\n                 Error Correction (FEC) in Reliable Multicast\",\n
      \                RFC 3453, December 2002.\n   [RFC3547]     Baugher, M., Weis,
      B., Hardjono, T., and H. Harney,\n                 \"The Group Domain of Interpretation\",
      RFC 3547,\n                 July 2003.\n   [RFC3550]     Schulzrinne, H., Casner,
      S., Frederick, R., and V.\n                 Jacobson, \"RTP: A Transport Protocol
      for Real-Time\n                 Applications\", STD 64, RFC 3550, July 2003.\n
      \  [RFC3569]     Bhattacharyya, S., \"An Overview of Source-Specific\n                 Multicast
      (SSM)\", RFC 3569, July 2003.\n   [RFC3618]     Fenner, B. and D. Meyer, \"Multicast
      Source Discovery\n                 Protocol (MSDP)\", RFC 3618, October 2003.\n
      \  [RFC3711]     Baugher, M., McGrew, D., Naslund, M., Carrara, E., and\n                 K.
      Norrman, \"The Secure Real-time Transport Protocol\n                 (SRTP)\",
      RFC 3711, March 2004.\n   [RFC3830]     Arkko, J., Carrara, E., Lindholm, F.,
      Naslund, M., and\n                 K. Norrman, \"MIKEY: Multimedia Internet
      KEYing\",\n                 RFC 3830, August 2004.\n   [RFC4535]     Harney,
      H., Meth, U., Colegrove, A., and G. Gross,\n                 \"GSAKMP: Group
      Secure Association Key Management\n                 Protocol\", RFC 4535, June
      2006.\n   [RFC5776]     Roca, V., Francillon, A., and S. Faurite, \"Use of Timed\n
      \                Efficient Stream Loss-Tolerant Authentication (TESLA)\n                 in
      the Asynchronous Layered Coding (ALC) and NACK-\n                 Oriented Reliable
      Multicast (NORM) Protocols\",\n                 RFC 5776, April 2010.\n   [RMT-SIMPLE]
      \ Roca, V., \"Simple Authentication Schemes for the ALC\n                 and
      NORM Protocols\", Work in Progress, October 2009.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Michael Luby\n   Qualcomm, Inc.\n   3165 Kifer Road\n
    \  Santa Clara, CA  95051\n   US\n   EMail: luby@qualcomm.com\n   Mark Watson\n
    \  Qualcomm, Inc.\n   3165 Kifer Road\n   Santa Clara, CA  95051\n   US\n   EMail:
    watson@qualcomm.com\n   Lorenzo Vicisano\n   Qualcomm, Inc.\n   3165 Kifer Road\n
    \  Santa Clara, CA  95051\n   US\n   EMail: vicisano@qualcomm.com\n"
  title: Authors' Addresses
