- title: __initial_text__
  contents:
  - '                   Operations Model for Router Keying

    '
- title: Abstract
  contents:
  - "Abstract\n   The IETF is engaged in an effort to analyze the security of routing\n\
    \   protocol authentication according to design guidelines discussed in\n   RFC\
    \ 6518, \"Keying and Authentication for Routing Protocols (KARP)\n   Design Guidelines\"\
    .  Developing an operational and management model\n   for routing protocol security\
    \ that works with all the routing\n   protocols will be critical to the deployability\
    \ of these efforts.\n   This document gives recommendations to operators and implementors\n\
    \   regarding management and operation of router authentication.  These\n   recommendations\
    \ will also assist protocol designers in understanding\n   management issues they\
    \ will face.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7211.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Requirements Notation . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Breakdown of KARP Configuration . . . . . . . . . . . .\
    \ . . .   3\n     3.1.  Integrity of the Key Table  . . . . . . . . . . . . .\
    \ . .   5\n     3.2.  Management of Key Table . . . . . . . . . . . . . . . .\
    \ .   5\n     3.3.  Interactions with Automated Key Management  . . . . . . .\
    \   6\n     3.4.  Virtual Routing and Forwarding Instances (VRFs) . . . . .  \
    \ 6\n   4.  Credentials and Authorization . . . . . . . . . . . . . . . .   6\n\
    \     4.1.  Preshared Keys  . . . . . . . . . . . . . . . . . . . . .   8\n  \
    \     4.1.1.  Sharing Keys and Zones of Trust . . . . . . . . . . .   9\n    \
    \   4.1.2.  Key Separation and Protocol Design  . . . . . . . . .  10\n     4.2.\
    \  Asymmetric Keys . . . . . . . . . . . . . . . . . . . . .  10\n     4.3.  Public\
    \ Key Infrastructure . . . . . . . . . . . . . . . .  11\n     4.4.  The Role\
    \ of Central Servers . . . . . . . . . . . . . . .  12\n   5.  Grouping Peers\
    \ Together . . . . . . . . . . . . . . . . . . .  12\n   6.  Administrator Involvement\
    \ . . . . . . . . . . . . . . . . . .  14\n     6.1.  Enrollment  . . . . . .\
    \ . . . . . . . . . . . . . . . . .  14\n     6.2.  Handling Faults . . . . .\
    \ . . . . . . . . . . . . . . . .  15\n   7.  Upgrade Considerations  . . . .\
    \ . . . . . . . . . . . . . . .  16\n   8.  Security Considerations . . . . .\
    \ . . . . . . . . . . . . . .  17\n   9.  Acknowledgments . . . . . . . . . .\
    \ . . . . . . . . . . . . .  17\n   10. References  . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  17\n     10.1.  Normative References . . . . . . .\
    \ . . . . . . . . . . .  17\n     10.2.  Informative References . . . . . . .\
    \ . . . . . . . . . .  18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Keying and Authentication of Routing Protocols (KARP)\
    \ working\n   group is designing improvements to the cryptographic authentication\n\
    \   of IETF routing protocols.  These improvements include enhancing how\n   integrity\
    \ functions are handled within each protocol as well as\n   designing an automated\
    \ key management solution.\n   This document discusses issues to consider when\
    \ thinking about the\n   operational and management model for KARP.  Each implementation\
    \ will\n   take its own approach to management; this is one area for vendor\n\
    \   differentiation.  However, it is desirable to have a common baseline\n   for\
    \ the management objects allowing administrators, security\n   architects, and\
    \ protocol designers to understand what management\n   capabilities they can depend\
    \ on in heterogeneous environments.\n   Similarly, designing and deploying the\
    \ protocol will be easier when\n   thought is paid to a common operational model.\
    \  This will also help\n   with the design of NETCONF schemas or MIBs later. \
    \ This document\n   provides recommendations to help establish such a baseline.\n\
    \   This document also gives recommendations for how management and\n   operational\
    \ issues can be approached as protocols are revised and as\n   support is added\
    \ for the key table [RFC7210].\n   Routing security faces interesting challenges\
    \ not present with some\n   other security domains.  Routers need to function\
    \ in order to\n   establish network connectivity.  As a result, centralized services\n\
    \   cannot typically be used for authentication or other security tasks;\n   see\
    \ Section 4.4.  In addition, routers' roles affect how new routers\n   are installed\
    \ and how problems are handled; see Section 6.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Breakdown of KARP Configuration
  contents:
  - "3.  Breakdown of KARP Configuration\n   Routing authentication configuration\
    \ includes configuration of key\n   material used to authenticate routers as well\
    \ as parameters needed to\n   use these keys.  Configuration also includes information\
    \ necessary to\n   use an automated key management protocol to configure router\
    \ keying.\n   The key table [RFC7210] describes configuration needed for manual\n\
    \   keying.  Configuration of automated key management is a work in\n   progress.\n\
    \   There are multiple ways of structuring configuration information.\n   One\
    \ factor to consider is the scope of the configuration information.\n   Several\
    \ protocols are peer-to-peer routing protocols where a\n   different key could\
    \ potentially be used for each neighbor.  Other\n   protocols require that the\
    \ same group key be used for all nodes in an\n   administrative domain or routing\
    \ area.  In other cases, the same\n   group key needs to be used for all routers\
    \ on an interface, but\n   different group keys can be used for each interface.\n\
    \   Within situations where a per-interface, per-area, or per-peer key\n   can\
    \ be used for manually configured long-term keys, that flexibility\n   may not\
    \ be desirable from an operational standpoint.  For example,\n   consider OSPF\
    \ [RFC2328].  Each router on an OSPF link needs to use\n   the same authentication\
    \ configuration, including the set of keys used\n   for reception and the set\
    \ of keys used for transmission, but it may\n   use different keys for different\
    \ links.  The most general management\n   model would be to configure keys per\
    \ link.  However, for deployments\n   where the area uses the same key, it would\
    \ be strongly desirable to\n   configure the key as a property of the area.  If\
    \ the keys are\n   configured per link, they can get out of sync.  In order to\
    \ support\n   generality of configuration and common operational situations, it\n\
    \   would be desirable to have some sort of inheritance where default\n   configurations\
    \ are made per area unless overridden per interface.\n   As described in [RFC7210],\
    \ the cryptographic keys are separated from\n   the interface configuration into\
    \ their own configuration store.  Each\n   routing protocol is responsible for\
    \ defining the form of the peer\n   specification used by that protocol.  Thus,\
    \ each routing protocol\n   needs to define the scope of keys.  For group keying,\
    \ the peer\n   specification names the group.  A protocol could define a peer\n\
    \   specification indicating the key had a link scope and also a peer\n   specification\
    \ for scoping a key to a specific area.  For link-scoped\n   keys, it is generally\
    \ best to define a single peer specification\n   indicating the key has a link\
    \ scope and to use interface restrictions\n   to restrict the key to the appropriate\
    \ link.\n   Operational Requirements: implementations of this model MUST support\n\
    \   configuration of keys at the most general scope for the underlying\n   protocol;\
    \ protocols supporting per-peer keys MUST permit\n   configuration of per-peer\
    \ keys, protocols supporting per-interface\n   keys MUST support configuration\
    \ of per-interface keys, and so on for\n   any additional scopes.  Implementations\
    \ MUST NOT permit configuration\n   of an inappropriate key scope.  For example,\
    \ configuration of\n   separate keys per interface would be inappropriate to support\
    \ for a\n   protocol requiring per-area keys.  This restriction can be enforced\n\
    \   by rules specified by each routing protocol for validating key table\n   entries.\
    \  As such, these implementation requirements are best\n   addressed by care being\
    \ taken in how routing protocols specify the\n   use of the key tables.\n"
- title: 3.1.  Integrity of the Key Table
  contents:
  - "3.1.  Integrity of the Key Table\n   The routing key table [RFC7210] provides\
    \ a very general mechanism to\n   abstract the storage of keys for routing protocols.\
    \  To avoid\n   misconfiguration and simplify problem determination, the router\
    \ MUST\n   verify the internal consistency of entries added to the table.\n  \
    \ Routing protocols describe how their protocol interacts with the key\n   table\
    \ including what validation MUST be performed.  At a minimum, the\n   router MUST\
    \ verify:\n   o  The cryptographic algorithms are valid for the protocol.\n  \
    \ o  The key derivation function is valid for the protocol.\n   o  The direction\
    \ is valid for the protocol.  For example, if a\n      protocol requires the same\
    \ session key be used in both directions,\n      the direction field in the key\
    \ table entry associated with the\n      session key MUST be specified as \"both\"\
    .\n   o  The peer specification is consistent with the protocol.\n   Other checks\
    \ are possible.  For example, the router could verify that\n   if a key is associated\
    \ with a peer, that peer is a configured peer\n   for the specified protocol.\
    \  However, this may be undesirable.  It\n   may be desirable to load a key table\
    \ when some peers have not yet\n   been configured.  Also, it may be desirable\
    \ to share portions of a\n   key table across devices even when their current\
    \ configuration does\n   not require an adjacency with a particular peer in the\
    \ interest of\n   uniform configuration or preparing for fail-over.  For these\
    \ reasons,\n   these additional checks are generally undesirable.\n"
- title: 3.2.  Management of Key Table
  contents:
  - "3.2.  Management of Key Table\n   Several management interfaces will be quite\
    \ common.  For service\n   provider deployments, the configuration management\
    \ system can simply\n   update the key table.  However, for smaller deployments,\
    \ efficient\n   management interfaces that do not require a configuration management\n\
    \   system are important.  In these environments, configuration\n   interfaces\
    \ (such as web interfaces and command-line interfaces)\n   provided directly by\
    \ the router will be important for easy management\n   of the router.\n   As part\
    \ of adding a new key, it is typically desirable to set an\n   expiration time\
    \ for an old key.  The management interface SHOULD\n   provide a mechanism to\
    \ easily update the expiration time for a\n   current key used with a given peer\
    \ or interface.  Also, when adding a\n   key, it is desirable to push the key\
    \ out to nodes that will need it,\n   allowing use for receiving packets and then\
    \ later for enabling\n   transmit.  This can be accomplished automatically by\
    \ providing a\n   delay between when a key becomes valid for reception and\n \
    \  transmission.  However, some environments may not be able to predict\n   when\
    \ all the necessary changes will be made.  In these cases, having\n   a mechanism\
    \ to enable a key for sending is desirable.  The management\n   interface SHOULD\
    \ provide an easy mechanism to update the direction of\n   an existing key or\
    \ to enable a disabled key.\n   Implementations SHOULD permit a configuration\
    \ in which if no\n   unexpired key is available, existing security associations\
    \ continue\n   using the expired key with which they were established.\n   Implementations\
    \ MUST support a configuration in which security\n   associations fail if no unexpired\
    \ key is available for them.  See\n   Section 6.2 for a discussion of reporting\
    \ and managing security\n   faults including those related to key expiration.\n"
- title: 3.3.  Interactions with Automated Key Management
  contents:
  - "3.3.  Interactions with Automated Key Management\n   Consideration is required\
    \ for how an automated key management\n   protocol will assign key IDs for group\
    \ keys.  All members of the\n   group may need to use the same key ID.  This requires\
    \ careful\n   coordination of global key IDs.  Interactions with the peer key\
    \ ID\n   field may make this easier; this requires additional study.\n   Automated\
    \ key management protocols also assign keys for single peers.\n   If the key ID\
    \ is global and needs to be coordinated between the\n   receiver and transmitter,\
    \ then there is complexity in key management\n   protocols that can be avoided\
    \ if key IDs are not global.\n"
- title: 3.4.  Virtual Routing and Forwarding Instances (VRFs)
  contents:
  - "3.4.  Virtual Routing and Forwarding Instances (VRFs)\n   Many core and enterprise\
    \ routers support multiple routing instances.\n   For example, a router serving\
    \ multiple VPNs is likely to have a\n   forwarding/routing instance for each of\
    \ these VPNs.  Each VRF will\n   require its own routing key table.\n"
- title: 4.  Credentials and Authorization
  contents:
  - "4.  Credentials and Authorization\n   Several methods for authentication have\
    \ been proposed for KARP.  The\n   simplest is preshared keys used directly as\
    \ traffic keys.  In this\n   mode, the traffic integrity keys are directly configured.\
    \  This is\n   the mode supported by most of today's routing protocols.\n   As\
    \ discussed in [RTG-AUTH], preshared keys can be used as the input\n   to a key\
    \ derivation function (KDF) to generate traffic keys.  For\n   example, the TCP\
    \ Authentication Option (TCP-AO) [RFC5925] derives\n   keys based on the initial\
    \ TCP session state.  Typically, a KDF will\n   combine a long-term key with public\
    \ inputs exchanged as part of the\n   protocol to form fresh session keys.  A\
    \ KDF could potentially be used\n   with some inputs that are configured along\
    \ with the long-term key.\n   Also, it's possible that inputs to a KDF will be\
    \ private and\n   exchanged as part of the protocol, although this will be uncommon\
    \ in\n   KARP's uses of KDFs.\n   Preshared keys could also be used by an automated\
    \ key management\n   protocol.  In this mode, preshared keys would be used for\n\
    \   authentication.  However, traffic keys would be generated by some\n   key-agreement\
    \ mechanism or transported in a key encryption key\n   derived from the preshared\
    \ key.  This mode may provide better replay\n   protection.  Also, in the absence\
    \ of active attackers, key-agreement\n   strategies such as Diffie-Hellman can\
    \ be used to produce high-quality\n   traffic keys even from relatively weak preshared\
    \ keys.  These key-\n   agreement mechanisms are valuable even when active attackers\
    \ are\n   present, although an active attacker can mount a man-in-the-middle\n\
    \   attack if the preshared key is sufficiently weak.\n   Public keys can be used\
    \ for authentication within an automated key\n   management protocol.  The KARP\
    \ design guide [RFC6518] describes a\n   mode in which routers have the hashes\
    \ of peer routers' public keys.\n   In this mode, a traditional public-key infrastructure\
    \ is not\n   required.  The advantage of this mode is that a router only contains\n\
    \   its own keying material, limiting the scope of a compromise.  The\n   disadvantage\
    \ is that when a router is added or deleted from the set\n   of authorized routers,\
    \ all routers in that set need to be updated.\n   Note that self-signed certificates\
    \ are a common way of communicating\n   public keys in this style of authentication.\n\
    \   Certificates signed by a certification authority or some other PKI\n   could\
    \ be used for authentication within an automated key management\n   protocol.\
    \  The advantage of this approach is that routers may not\n   need to be directly\
    \ updated when peers are added or removed.  The\n   disadvantage is that more\
    \ complexity and cost are required.\n   Each of these approaches has a different\
    \ set of management and\n   operational requirements.  Key differences include\
    \ how authorization\n   is handled and how identity works.  This section discusses\
    \ these\n   differences.\n"
- title: 4.1.  Preshared Keys
  contents:
  - "4.1.  Preshared Keys\n   In the protocol, manual preshared keys are either unnamed\
    \ or named by\n   a key ID (which is a small integer -- typically 16 or 32 bits).\n\
    \   Implementations that support multiple keys for protocols that have no\n  \
    \ names for keys need to try all possible keys before deciding a packet\n   cannot\
    \ be validated [RFC4808].  Typically key IDs are names used by\n   one group or\
    \ peer.\n   Manual preshared keys are often known by a group of peers rather than\n\
    \   just one other peer.  This is an interesting security property:\n   unlike\
    \ with digitally signed messages or protocols where symmetric\n   keys are known\
    \ only to two parties, it is impossible to identify the\n   peer sending a message\
    \ cryptographically.  However, it is possible to\n   show that the sender of a\
    \ message is one of the parties who knows the\n   preshared key.  Within the routing\
    \ threat model, the peer sending a\n   message can be identified only because\
    \ peers are trusted and thus can\n   be assumed to correctly label the packets\
    \ they send.  This contrasts\n   with a protocol where cryptographic means such\
    \ as digital signatures\n   are used to verify the origin of a message.  As a\
    \ consequence,\n   authorization is typically based on knowing the preshared key\
    \ rather\n   than on being a particular peer.  Note that once an authorization\n\
    \   decision is made, the peer can assert its identity; this identity is\n   trusted\
    \ just as the routing information from the peer is trusted.\n   Doing an additional\
    \ check for authorization based on the identity\n   included in the packet would\
    \ provide little value: an attacker who\n   somehow had the key could claim the\
    \ identity of an authorized peer,\n   and an attacker without the key should be\
    \ unable to claim the\n   identity of any peer.  Such a check is not required\
    \ by the KARP\n   threat model: inside attacks are not in scope.\n   Preshared\
    \ keys used with key derivation work similarly to manual\n   preshared keys. \
    \ However, to form the actual traffic keys, session-\n   or peer-specific information\
    \ is combined with the key.  From an\n   authorization standpoint, the derivation\
    \ key works the same as a\n   manual key.  An additional routing protocol step\
    \ or transport step\n   forms the key that is actually used.\n   Preshared keys\
    \ that are used via automatic key management have not\n   yet been specified for\
    \ KARP, although ongoing work suggests they will\n   be needed.  Their naming\
    \ and authorization may differ from existing\n   uses of preshared keys in routing\
    \ protocols.  In particular, such\n   keys may end up being known only by two\
    \ peers.  Alternatively, they\n   may also be known by a group of peers.  Authorization\
    \ could\n   potentially be based on peer identity, although it is likely that\n\
    \   knowing the right key will be sufficient.  There does not appear to\n   be\
    \ a compelling reason to decouple the authorization of a key for\n   some purpose\
    \ from the authorization of peers holding that key to\n   perform the authorized\
    \ function.\n"
- title: 4.1.1.  Sharing Keys and Zones of Trust
  contents:
  - "4.1.1.  Sharing Keys and Zones of Trust\n   Care needs to be taken when symmetric\
    \ keys are used for multiple\n   purposes.  Consider the implications of using\
    \ the same preshared key\n   for two interfaces: it becomes impossible to cryptographically\n\
    \   distinguish a router on one interface from a router on another\n   interface.\
    \  So, a router that is trusted to participate in a routing\n   protocol on one\
    \ interface becomes implicitly trusted for the other\n   interfaces that share\
    \ the key.  For many cases, such as link-state\n   routers in the same routing\
    \ area, there is no significant advantage\n   that an attacker could gain from\
    \ this trust within the KARP threat\n   model.  However, other protocols, such\
    \ as BGP and RIP, permit routes\n   to be filtered across a trust boundary.  For\
    \ these protocols,\n   participation in one interface might be more advantageous\
    \ than\n   another.  Operationally, when this trust distinction is important to\n\
    \   a deployment, different keys need to be used on each side of the\n   trust\
    \ boundary.  Key derivation can help prevent this problem in\n   cases of accidental\
    \ misconfiguration.  However, key derivation cannot\n   protect against a situation\
    \ where a system was incorrectly trusted to\n   have the key used to perform the\
    \ derivation.  This question of trust\n   is important to the KARP threat model\
    \ because it is essential to\n   determining whether a party is an insider for\
    \ a particular routing\n   protocol.  A customer router that is an insider for\
    \ a BGP peering\n   relationship with a service provider is not typically an insider\
    \ when\n   considering the security of that service provider's IGP.  Similarly,\n\
    \   to the extent that there are multiple zones of trust and a routing\n   protocol\
    \ is determining whether a particular router is within a\n   certain zone, the\
    \ question of untrusted actors is within the scope of\n   the routing threat model.\n\
    \   Key derivation can be part of a management solution for having\n   multiple\
    \ keys for different zones of trust.  A master key could be\n   combined with\
    \ peer, link, or area identifiers to form a router-\n   specific preshared key\
    \ that is loaded onto routers.  Provided that\n   the master key lives only on\
    \ the management server and not the\n   individual routers, trust is preserved.\
    \  However, in many cases,\n   generating independent keys for the routers and\
    \ storing the result is\n   more practical.  If the master key were somehow compromised,\
    \ all the\n   resulting keys would need to be changed.  However, if independent\n\
    \   keys are used, the scope of a compromise may be more limited.\n"
- title: 4.1.2.  Key Separation and Protocol Design
  contents:
  - "4.1.2.  Key Separation and Protocol Design\n   More subtle problems with key\
    \ separation can appear in protocol\n   design.  Two protocols that use the same\
    \ traffic keys may work\n   together in unintended ways permitting one protocol\
    \ to be used to\n   attack the other.  Consider two hypothetical protocols.  Protocol\
    \ A\n   starts its messages with a set of extensions that are ignored if not\n\
    \   understood.  Protocol B has a fixed header at the beginning of its\n   messages\
    \ but ends messages with extension information.  It may be\n   that the same message\
    \ is valid both as part of protocol A and\n   protocol B.  An attacker may be\
    \ able to gain an advantage by getting\n   a router to generate this message with\
    \ one protocol under situations\n   where the other protocol would not generate\
    \ the message.  This\n   hypothetical example is overly simplistic; real-world\
    \ attacks\n   exploiting key separation weaknesses tend to be complicated and\n\
    \   involve specific properties of the cryptographic functions involved.\n   The\
    \ key point is that whenever the same key is used in multiple\n   protocols, attacks\
    \ may be possible.  All the involved protocols need\n   to be analyzed to understand\
    \ the scope of potential attacks.\n   Key separation attacks interact with the\
    \ KARP operational model in a\n   number of ways.  Administrators need to be aware\
    \ of situations where\n   using the same manual traffic key with two different\
    \ protocols (or\n   the same protocol in different contexts) creates attack\n\
    \   opportunities.  Design teams should consider how their protocol might\n  \
    \ interact with other routing protocols and describe any attacks\n   discovered\
    \ so that administrators can understand the operational\n   implications.  When\
    \ designing automated key management or new\n   cryptographic authentication within\
    \ routing protocols, we need to be\n   aware that administrators expect to be\
    \ able to use the same preshared\n   keys in multiple contexts.  As a result,\
    \ we should use appropriate\n   key derivation functions so that different cryptographic\
    \ keys are\n   used even when the same initial input key is used.\n"
- title: 4.2.  Asymmetric Keys
  contents:
  - "4.2.  Asymmetric Keys\n   Outside of a PKI, public keys are expected to be known\
    \ by the hash of\n   a key or (potentially self-signed) certificate.  The Session\n\
    \   Description Protocol provides a standardized mechanism for naming\n   keys\
    \ (in that case, certificates) based on hashes (Section 5 of\n   [RFC4572]). \
    \ KARP SHOULD adopt this approach or another approach\n   already standardized\
    \ within the IETF rather than inventing a new\n   mechanism for naming public\
    \ keys.\n   A public key is typically expected to belong to one peer.  As a peer\n\
    \   generates new keys and retires old keys, its public key may change.\n   For\
    \ this reason, from a management standpoint, peers should be\n   thought of as\
    \ associated with multiple public keys rather than as\n   containing a single\
    \ public-key hash as an attribute of the peer\n   object.\n   Authorization of\
    \ public keys could be done either by key hash or by\n   peer identity.  Performing\
    \ authorizations by peer identity should\n   make it easier to update the key\
    \ of a peer without risk of losing\n   authorizations for that peer.  However,\
    \ management interfaces need to\n   be carefully designed to avoid making this\
    \ extra level of indirection\n   complicated for operators.\n"
- title: 4.3.  Public Key Infrastructure
  contents:
  - "4.3.  Public Key Infrastructure\n   When a PKI is used, certificates are used.\
    \  The certificate binds a\n   key to a name of a peer.  The key management protocol\
    \ is responsible\n   for exchanging certificates and validating them to a trust\
    \ anchor.\n   Authorization needs to be done in terms of peer identities not in\n\
    \   terms of keys.  One reason for this is that when a peer changes its\n   key,\
    \ the new certificate needs to be sufficient for authentication to\n   continue\
    \ functioning even though the key has never been seen before.\n   Potentially,\
    \ authorization could be performed in terms of groups of\n   peers rather than\
    \ single peers.  An advantage of this is that it may\n   be possible to add a\
    \ new router with no authentication-related\n   configuration of the peers of\
    \ that router.  For example, a domain\n   could decide that any router with a\
    \ particular keyPurposeID signed by\n   the organization's certificate authority\
    \ is permitted to join the\n   IGP.  Just as in configurations where cryptographic\
    \ authentication is\n   not used, automatic discovery of this router can establish\n\
    \   appropriate adjacencies.\n   Assuming that self-signed certificates are used\
    \ by routers that wish\n   to use public keys but that do not need a PKI, then\
    \ PKI and the\n   \"infrastructure-less\" mode of public-key operation described\
    \ in the\n   previous section can work well together.  One router could identify\n\
    \   its peers based on names and use certificate validation.  Another\n   router\
    \ could use hashes of certificates.  This could be very useful\n   for border\
    \ routers between two organizations.  Smaller organizations\n   could use public\
    \ keys and larger organizations could use PKI.\n   A PKI has significant operational\
    \ concerns including certification\n   practices, handling revocation, and operational\
    \ practices around\n   certificate validation.  The Routing PKI (RPKI) has addressed\
    \ these\n   concerns within the scope of BGP and the validation of address\n \
    \  ownership.  Adapting these practices to routing protocol\n   authentication\
    \ is outside the scope of this document.\n"
- title: 4.4.  The Role of Central Servers
  contents:
  - "4.4.  The Role of Central Servers\n   An area to explore is the role of central\
    \ servers like RADIUS or\n   directories.  Routers need to securely operate in\
    \ order to provide\n   network routing services.  Routers cannot generally contact\
    \ a central\n   server while establishing routing because the router might not\
    \ have a\n   functioning route to the central service until after routing is\n\
    \   established.  As a result, a system where keys are pushed by a\n   central\
    \ management system is an undesirable result for router keying.\n   However, central\
    \ servers may play a role in authorization and key\n   rollover.  For example,\
    \ a node could send a hash of a public key to a\n   RADIUS server.\n   If central\
    \ servers do play a role, it will be critical to make sure\n   that they are not\
    \ required during routine operation or a cold-start\n   of a network.  They are\
    \ more likely to play a role in enrollment of\n   new peers or key migration/compromise.\n\
    \   Another area where central servers may play a role is for group key\n   agreement.\
    \  As an example, [OSPF-AUTO] discusses the potential need\n   for key-agreement\
    \ servers in OSPF.  Other routing protocols that use\n   multicast or broadcast\
    \ such as IS-IS are likely to need a similar\n   approach.  Multicast key-agreement\
    \ protocols need to allow operators\n   to choose which key servers will generate\
    \ traffic keys.  The quality\n   of random numbers [RFC4086] is likely to differ\
    \ between systems.  As\n   a result, operators may have preferences for where\
    \ keys are\n   generated.\n"
- title: 5.  Grouping Peers Together
  contents:
  - "5.  Grouping Peers Together\n   One significant management consideration will\
    \ be the grouping of\n   management objects necessary to determine who is authorized\
    \ to act as\n   a peer for a given routing action.  As discussed previously, the\n\
    \   following objects are potentially required:\n   o  Key objects are required.\
    \  Symmetric keys may be preshared, and\n      knowledge of the key may be used\
    \ as the decision factor in\n      authorization.  Knowledge of the private key\
    \ corresponding to\n      asymmetric public keys may be used directly for authorization\
    \ as\n      well.  During key transitions, more than one key may refer to a\n\
    \      given peer.  Group preshared keys may refer to multiple peers.\n   o  Peer\
    \ objects are required.  A peer is a router that this router\n      might wish\
    \ to communicate with.  Peers may be identified by names\n      or keys.\n   o\
    \  Objects representing peer groups are required.  Groups of peers\n      may\
    \ be authorized for a given routing protocol.\n   Establishing a management model\
    \ is difficult because of the complex\n   relationships between each set of objects.\
    \  As discussed, there may\n   be more than one key for a peer.  However, in the\
    \ preshared key case,\n   there may be more than one peer for a key.  This is\
    \ true both for\n   group security association protocols such as an IGP or one-to-one\n\
    \   protocols where the same key is used administratively.  In some of\n   these\
    \ situations, it may be undesirable to explicitly enumerate the\n   peers in the\
    \ configuration; for example, IGP peers are auto-\n   discovered for broadcast\
    \ links but not for non-broadcast multi-access\n   links.\n   Peers may be identified\
    \ either by name or key.  If peers are\n   identified by key, it is strongly desirable\
    \ from an operational\n   standpoint to consider any peer identifiers or names\
    \ to be a local\n   matter and not require the identifiers or names to be synchronized.\n\
    \   Obviously, if peers are identified by names (for example, with\n   certificates\
    \ in a PKI), identifiers need to be synchronized between\n   the authorized peer\
    \ and the peer making the authorization decision.\n   In many cases, peers will\
    \ explicitly be identified in routing\n   protocol configuration.  In these cases,\
    \ it is possible to attach the\n   authorization information (keys or identifiers)\
    \ to the peer's\n   configuration object.  Two cases do not involve enumerating\
    \ peers.\n   The first is the case where preshared keys are shared among a group\n\
    \   of peers.  It is likely that this case can be treated from a\n   management\
    \ standpoint as a single peer representing all the peers\n   that share the keys.\
    \  The other case is one where certificates in a\n   PKI are used to introduce\
    \ peers to a router.  In this case, rather\n   than configuring peers, the router\
    \ needs to be configured with\n   information on which certificates represent\
    \ acceptable peers.\n   Another consideration is which routing protocols share\
    \ peers.  For\n   example, it may be common for LDP peers to also be peers of\
    \ some\n   other routing protocol.  Also, RSVP - Traffic Engineering (RSVP-TE)\n\
    \   may be associated with some TE-based IGP.  In some of these cases, it\n  \
    \ would be desirable to use the same authorization information for both\n   routing\
    \ protocols.\n   Finally, as discussed in Section 7, it is sometimes desirable\
    \ to\n   override some aspect of the configuration for a peer in a group.  As\n\
    \   an example, when rotating to a new key, it is desirable to be able to\n  \
    \ roll that key out to each peer that will use the key, even if in the\n   stable\
    \ state the key is configured for a peer group.\n   In order to develop a management\
    \ model for authorization, the working\n   group needs to consider several questions.\
    \  What protocols support\n   auto-discovery of peers?  What protocols require\
    \ more configuration\n   of a peer than simply the peer's authorization information\
    \ and\n   network address?  What management operations are going to be common\n\
    \   as security information for peers is configured and updated?  What\n   operations\
    \ will be common while performing key transitions or while\n   migrating to new\
    \ security technologies?\n"
- title: 6.  Administrator Involvement
  contents:
  - "6.  Administrator Involvement\n   One key operational question is what areas\
    \ will administrator\n   involvement be required.  Likely areas where involvement\
    \ may be\n   useful include enrollment of new peers.  Fault recovery should also\n\
    \   be considered.\n"
- title: 6.1.  Enrollment
  contents:
  - "6.1.  Enrollment\n   One area where the management of routing security needs\
    \ to be\n   optimized is the deployment of a new router.  In some cases, a new\n\
    \   router may be deployed on an existing network where routing to\n   management\
    \ servers is already available.  In other cases, routers may\n   be deployed as\
    \ part of connecting or creating a site.  Here, the\n   router and infrastructure\
    \ may not be available until the router has\n   securely authenticated.\n   In\
    \ general, security configuration can be treated as an additional\n   configuration\
    \ item that needs to be set up to establish service.\n   There is no significant\
    \ security value in protecting routing protocol\n   keys more than administrative\
    \ password or Authentication,\n   Authorization, and Accounting (AAA) secrets\
    \ that can be used to gain\n   login access to a router.  These existing secrets\
    \ can be used to make\n   configuration changes that impact routing protocols\
    \ as much as\n   disclosure of a routing protocol key.  Operators already have\n\
    \   procedures in place for these items.  So, it is appropriate to use\n   similar\
    \ procedures for routing protocol keys.  It is reasonable to\n   improve existing\
    \ configuration procedures and the routing protocol\n   procedures over time.\
    \  However, it is more desirable to deploy KARP\n   with security similar to that\
    \ used for managing existing secrets than\n   to delay deploying KARP.\n   Operators\
    \ MAY develop higher assurance procedures for dealing with\n   keys.  For example,\
    \ asymmetric keys can be generated on a router and\n   never exported from the\
    \ router.  Operators can evaluate the cost vs.\n   security and the availability\
    \ tradeoffs of these procedures.\n"
- title: 6.2.  Handling Faults
  contents:
  - "6.2.  Handling Faults\n   Faults may interact with operational practice in at\
    \ least two ways.\n   First, security solutions may introduce faults.  For example,\
    \ if\n   certificates expire in a PKI, previous adjacencies may no longer\n  \
    \ form.  Operational practice will require a way of repairing these\n   errors.\
    \  This may end up being very similar to repairing other faults\n   that can partition\
    \ a network.\n   Notifications will play a critical role in avoiding security\
    \ faults.\n   Implementations SHOULD use appropriate mechanisms to notify operators\n\
    \   as security resources are about to expire.  Notifications can include\n  \
    \ messages to consoles, logged events, Simple Network Management\n   Protocol\
    \ (SNMP) traps, or notifications within a routing protocol.\n   One strategy is\
    \ to have increasing escalations of notifications.\n   Monitoring will also play\
    \ an important role in avoiding security\n   faults such as certificate expiration.\
    \  Some classes of security\n   fault, including issues with certificates, will\
    \ affect only key\n   management protocols.  Other security faults can affect\
    \ routing\n   protocols directly.  However, the protocols MUST still have adequate\n\
    \   operational mechanisms to recover from these situations.  Also, some\n   faults,\
    \ such as those resulting from a compromise or actual attack on\n   a facility,\
    \ are inherent and may not be prevented.\n   A second class of faults is equipment\
    \ faults that impact security.\n   For example, if keys are stored on a router\
    \ and never exported from\n   that device, failure of a router implies a need\
    \ to update security\n   provisioning on the replacement router and its peers.\n\
    \   One approach, recommended by work on securing BGP [KEYING] is to\n   maintain\
    \ the router's keying material so that when a router is\n   replaced the same\
    \ keys can be used.  Router keys can be maintained on\n   a central server.  These\
    \ approaches permit the credentials of a\n   router to be recovered.  This provides\
    \ valuable options in case of\n   hardware fault.  The failing router can be recovered\
    \ without changing\n   credentials on other routers or waiting for keys to be\
    \ certified.\n   One disadvantage of this approach is that even if public-key\n\
    \   cryptography is used, the private keys are located on more than just\n   the\
    \ router.  A system in which keys were generated on a router and\n   never exported\
    \ from that router would typically make it more\n   difficult for an attacker\
    \ to obtain the keys.  For most environments,\n   the ability to quickly replace\
    \ a router justifies maintaining keys\n   centrally.\n   More generally, keying\
    \ is another item of configuration that needs to\n   be restored to reestablish\
    \ service when equipment fails.  Operators\n   typically perform the minimal configuration\
    \ necessary to get a router\n   back in contact with the management server.  The\
    \ same would apply for\n   keys.  Operators who do not maintain copies of key\
    \ material for\n   performing key recovery on routers would need to perform a\
    \ bit more\n   work to regain contact with the management server.  It seems\n\
    \   reasonable to assume that management servers will be able to cause\n   keys\
    \ to be generated or distributed sufficiently to fully restore\n   service.\n"
- title: 7.  Upgrade Considerations
  contents:
  - "7.  Upgrade Considerations\n   It needs to be possible to deploy automated key\
    \ management in an\n   organization without either having to disable existing\
    \ security or\n   disrupting routing.  As a result, it needs to be possible to\
    \ perform\n   a phased upgrade from manual keying to automated key management.\n\
    \   This upgrade procedure needs to be easy and have a very low risk of\n   disrupting\
    \ routing.  Today, many operators do not update keys because\n   the perceived\
    \ risk of an attack is lower than the cost of an update\n   combined with the\
    \ potential cost of routing disruptions during the\n   update.  Even when a routing\
    \ protocol has technical mechanisms that\n   permit an update with no disruption\
    \ in service, there is still a\n   potential cost of service disruptions as operational\
    \ procedures and\n   practices need to correctly use the technical mechanisms.\n\
    \   For peer-to-peer protocols such as BGP, upgrading to automated key\n   management\
    \ can be relatively easy.  First, code that supports\n   automated key management\
    \ needs to be loaded on both peers.  Then, the\n   adjacency can be upgraded.\
    \  The configuration can be updated to\n   switch to automated key management\
    \ when the second router reboots.\n   Alternatively, if the key management protocols\
    \ involved can detect\n   that both peers now support automated key management,\
    \ then a key can\n   potentially be negotiated for an existing session.\n   The\
    \ situation is more complex for organizations that have not\n   upgraded from\
    \ TCP MD5 [RFC2385] to the TCP Authentication Option\n   [RFC5925].  Today, routers\
    \ typically need to understand whether a\n   given peer supports TCP MD5 or TCP-AO\
    \ before opening a TCP\n   connection.  In addition, many implementations support\
    \ grouping\n   configuration (including security configuration) of related peers\n\
    \   together.  Implementations make it challenging to move from TCP MD5\n   to\
    \ TCP-AO before all peers in the group are ready.  Operators\n   perceive it as\
    \ high risk to update the configuration of a large\n   number of peers.  One particularly\
    \ risky situation is upgrading the\n   configuration of Internal BGP (iBGP) peers.\n\
    \   The situation is more complicated for multicast protocols.  It's\n   typically\
    \ not desirable to bring down an entire link to reconfigure\n   it as using automated\
    \ key management.  Two approaches should be\n   considered.  One is to support\
    \ key table rows that enable the\n   automated key management and manually configured\
    \ keying for the same\n   link at the same time.  Coordinating this may be challenging\
    \ from an\n   operational standpoint.  Another possibility is for the automated\
    \ key\n   management protocol to actually select the same traffic key that is\n\
    \   being used manually.  This could be accomplished by having an option\n   in\
    \ the key management protocol to export the current manual group key\n   through\
    \ the automated key management protocol.  Then after all nodes\n   are configured\
    \ with automated key management, manual key entries can\n   be removed.  The next\
    \ re-key after all nodes have manual entries\n   removed will generate a new fresh\
    \ key.  Group key management\n   protocols are RECOMMENDED to support an option\
    \ to export existing\n   manual keys during initial deployment of automated key\
    \ management.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document does not define a protocol.  It\
    \ does discuss the\n   operational and management implications of several security\n\
    \   technologies.\n   Close synchronization of time can impact the security of\
    \ routing\n   protocols in a number of ways.  Time is used to control when keys\
    \ MAY\n   begin being used and when they MUST NOT be used any longer as\n   described\
    \ in [RFC7210].  Routers need to have tight enough time\n   synchronization that\
    \ receivers permit a key to be utilized for\n   validation prior to the first\
    \ use of that key for generation of\n   integrity-protected messages; otherwise,\
    \ availability will be\n   impacted.  If time synchronization is too loose, then\
    \ a key can be\n   used beyond its intended lifetime.  The Network Time Protocol\
    \ (NTP)\n   can be used to provide time synchronization.  For some protocols,\n\
    \   time synchronization is also important for replay detection.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   Funding for Sam Hartman's work on this memo is provided\
    \ by Huawei.\n   The authors would like to thank Bill Atwood, Randy Bush, Wes\
    \ George,\n   Gregory Lebovitz, and Russ White for valuable reviews.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC7210]  Housley, R., Polk, T., Hartman, S., and D. Zhang,\n   \
    \           \"Database of Long-Lived Symmetric Cryptographic Keys\", RFC\n   \
    \           7210, April 2014.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [KEYING]   Turner, S., Patel, K., and R. Bush,\
    \ \"Router Keying for\n              BGPsec\", Work in Progress, May 2014.\n \
    \  [OSPF-AUTO]\n              Liu, Y., \"OSPFv3 Automated Group Keying Requirements\"\
    ,\n              Work in Progress, July 2007.\n   [RFC2328]  Moy, J., \"OSPF Version\
    \ 2\", STD 54, RFC 2328, April 1998.\n   [RFC2385]  Heffernan, A., \"Protection\
    \ of BGP Sessions via the TCP MD5\n              Signature Option\", RFC 2385,\
    \ August 1998.\n   [RFC4086]  Eastlake, D., Schiller, J., and S. Crocker, \"Randomness\n\
    \              Requirements for Security\", BCP 106, RFC 4086, June 2005.\n  \
    \ [RFC4572]  Lennox, J., \"Connection-Oriented Media Transport over the\n    \
    \          Transport Layer Security (TLS) Protocol in the Session\n          \
    \    Description Protocol (SDP)\", RFC 4572, July 2006.\n   [RFC4808]  Bellovin,\
    \ S., \"Key Change Strategies for TCP-MD5\", RFC\n              4808, March 2007.\n\
    \   [RFC5925]  Touch, J., Mankin, A., and R. Bonica, \"The TCP\n             \
    \ Authentication Option\", RFC 5925, June 2010.\n   [RFC6518]  Lebovitz, G. and\
    \ M. Bhatia, \"Keying and Authentication for\n              Routing Protocols\
    \ (KARP) Design Guidelines\", RFC 6518,\n              February 2012.\n   [RTG-AUTH]\
    \ Polk, T. and R. Housley, \"Routing Authentication Using A\n              Database\
    \ of Long-Lived Cryptographic Keys\", Work in\n              Progress, November\
    \ 2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sam Hartman\n   Painless Security\n   EMail: hartmans-ietf@mit.edu\n\
    \   Dacheng Zhang\n   Huawei Technologies Co. Ltd.\n   EMail: zhangdacheng@huawei.com\n"
