- title: __initial_text__
  contents:
  - '             Data Link Switching: Switch-to-Switch Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This RFC describes IBM's support of Data Link Switching over TCP/IP.\n\
    \   The RFC is being distributed to members of the Internet community in\n   order\
    \ to solicit their reactions to the proposals contained in it.\n   While the issues\
    \ discussed may not be directly relevant to the\n   research problems of the Internet,\
    \ they may be interesting to a\n   number of researchers and implementors.\n \
    \  Any questions or comments relative to the contents of this RFC should\n   be\
    \ sent to the following Internet address: dlsw@ralvma.vnet.ibm.com.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction                                       \
    \              2\n   2. Overview                                             \
    \            2\n   3. Transport Connection                                   \
    \          4\n      3.1. SSP Frame Formats                                   \
    \        5\n      3.2. Address Parameters                                    \
    \      8\n      3.3. Message Types                                           \
    \   10\n   4. Protocol Specification                                         \
    \ 11\n      4.1. Protocol Flow Diagrams                                     11\n\
    \           4.1.1. Connect Protocols                                   11\n  \
    \         4.1.2. Link Restart Protocols                              13\n    \
    \       4.1.3. Disconnect Protocols                                15\n      4.2.\
    \ DLS State Machine                                          16\n           4.2.1\
    \ Data Link Switch States                              16\n           4.2.2 State\
    \ Transition Tables                              21\n      4.3. NetBIOS Datagrams\
    \                                          30\n   Acknowledgments            \
    \                                        32\n   References                   \
    \                                      32\n   Security Considerations        \
    \                                    32\n   Authors' Addresses               \
    \                                  33\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Data Link Switching (DLS) is a forwarding mechanism for the\
    \ IBM SNA\n   and IBM NetBIOS protocols.  It does not provide full routing, but\n\
    \   instead provides switching at the Data Link layer and encapsulation\n   in\
    \ TCP/IP for transport over the Internet.  This memo documents the\n   Switch-to-Switch\
    \ Protocol (SSP) that is used between IBM 6611 Network\n   Processors.\n   Today,\
    \ the IBM 6611 supports SNA (PU 2 and PU 4) systems and NetBIOS\n   systems attached\
    \ to token-ring networks, as well as SNA (PU 2)\n   systems attached to SDLC links.\
    \  For the later case, the SDLC\n   attached systems are provided with a LAN appearance\
    \ within the IBM\n   6611.  For the LAN attached systems, the IBM 6611 appears\
    \ as a\n   source-routing bridge.  Remote systems that are accessed through the\n\
    \   IBM 6611 appear as systems attached to an adjacent ring.  This ring\n   is\
    \ a virtual ring that is manifested within each IBM 6611.\n"
- title: 2. Overview
  contents:
  - "2. Overview\n   Data Link Switching was developed to provide support for SNA\
    \ and\n   NetBIOS in multi-protocol routers.  Since SNA and NetBIOS are\n   basically\
    \ connection oriented protocols, the Data Link Control\n   procedure that they\
    \ use on the LAN is IEEE 802.2 Logical Link Control\n   (LLC) Type 2.  Data Link\
    \ Switching also accommodates SNA protocols\n   over WAN links via the SDLC protocol.\n\
    \   IEEE 802.2 LLC Type 2 was designed with the assumption that the\n   network\
    \ transit delay would be small and predictable (i.e., a local\n   LAN).  Therefore\
    \ the LLC elements of procedure use a fixed timer for\n   detecting lost frames.\
    \  When bridging is used over wide area lines\n   (especially at lower speeds),\
    \ the network delay is larger and it can\n   vary greatly based upon congestion.\
    \  When the delay exceeds the\n   time-out value LLC attempts to retransmit. \
    \ If the frame is not\n   actually lost, only delayed, it is possible for the\
    \ LLC Type 2\n   procedures to become confused.  And as a result, the link is\n\
    \   eventually taken down.\n   Given the use of LLC Type 2 services, Data Link\
    \ Switching addresses\n   the following bridging problems:\n         DLC Time-outs\n\
    \         DLC Acknowledgments over the WAN\n         Flow and Congestion Control\n\
    \         Broadcast Control of Search Packets\n         Source-Route Bridging\
    \ Hop Count Limits\n   NetBIOS also makes extensive use of datagram services that\
    \ use LLC\n   Type 1.  In this case, Data Link Switching addresses the last two\n\
    \   problems in the above list.\n   The principal difference between Data Link\
    \ Switching and bridging is\n   that DLS terminates the Data Link Control whereas\
    \ bridging does not.\n   The following figure illustrates this difference based\
    \ upon two end\n   systems operating with LLC Type 2 services.\n    Bridging\n\
    \    --------             Bridge           Bridge\n    +------+             +----+\
    \           +----+             +------+\n    | End  | +---------+ |    +-----/\
    \     |    | +---------+ | End  |\n    |System+-+   LAN   +-+    |    /------+\
    \    +-+   LAN   +-+System|\n    |      | +---------+ |    |  TCP/IP   |    |\
    \ +---------+ |      |\n    +------+             +----+           +----+     \
    \        +------+\n   Info------------------------------------------------------->\n\
    \       <-------------------------------------------------------RR\n    Data Link\
    \ Switching\n    -------------------\n    +------+             +----+        \
    \   +----+             +------+\n    | End  | +---------+ |    +-----/     | \
    \   | +---------+ | End  |\n    |System+-+   LAN   +-+DLS |    /------+ DLS+-+\
    \   LAN   +-+System|\n    |      | +---------+ |    |  TCP/IP   |    | +---------+\
    \ |      |\n    +------+             +----+           +----+             +------+\n\
    \   Info------------------->   -------------> Info\n       <-------------------RR\
    \                 ---------------->\n                                        \
    \      <----------------RR\n           Figure 1.  Data Link Switching Contrasted\
    \ to Bridging\n   In traditional bridging, the Data Link Control is end-to-end.\
    \  Data\n   Link Switching terminates the LLC Type 2 connection at the switch.\n\
    \   This means that the LLC Type 2 connections do not cross the wide area\n  \
    \ network.  The DLS multiplexes LLC connections onto a TCP connection\n   to another\
    \ DLS.  Therefore, the LLC connections at each end are\n   totally independent\
    \ of each other.  It is the responsibility of the\n   Data Link Switch to deliver\
    \ frames that it has received from a LLC\n   connection to the other end.  TCP\
    \ is used between the Data Link\n   Switches to guarantee delivery of frames.\n\
    \   As a result of this design, LLC time-outs are limited to the local\n   LAN\
    \ (i.e., they do not traverse the wide area).  Also, the LLC Type 2\n   acknowledgments\
    \ (RR's) do not traverse the WAN, thereby reducing\n   traffic across the wide\
    \ area links.  For SDLC links, polling and poll\n   response occurs locally, not\
    \ over the WAN.  Broadcast of search\n   frames is controlled by the Data Link\
    \ Switches once the location of a\n   target system is discovered.  Finally, the\
    \ switches can now apply\n   back pressure to the end systems to provide flow\
    \ and congestion\n   control.\n   Data Link Switching uses LAN addressing to set\
    \ up connections between\n   SNA systems.  SDLC attached devices are defined with\
    \ MAC addresses to\n   enable them to communicate with LAN attached devices. \
    \ For NetBIOS\n   systems, Data Link Switching uses the NetBIOS name to forward\n\
    \   datagrams and to set up connections for NetBIOS sessions.  For\n   circuit\
    \ establishment, SNA systems send TEST (or in some cases, XID)\n   frames to the\
    \ null (x'00') SAP.  NetBIOS systems have an address\n   resolution procedure,\
    \ based upon the Name Query and Name Recognized\n   frames, that is used to establish\
    \ an end-to-end circuit.\n   Since Data Link Switching may be implemented in multi-protocol\n\
    \   routers, there may be situations where both bridging and switching\n   are\
    \ enabled.  SNA frames can be identified by their link SAP.\n   Typical SAP values\
    \ for SNA are x'04', x'08', and x'0C'.  NetBIOS\n   always uses a link SAP value\
    \ of x'F0'.\n"
- title: 3. Transport Connection
  contents:
  - "3. Transport Connection\n   Data Link Switches can be in used in pairs or by\
    \ themselves.  A\n   Single DLS internally switches one data link to another without\
    \ using\n   TCP (DLC(1) to DLC(2) in the figure below).  A paired DLS multiplexes\n\
    \   data links over a reliable transport using a Switch-to-Switch\n   Protocol\
    \ (SSP).  This RFC will document the frame formats and\n   protocols for this\
    \ multiplexing between Data Link Switches.  The\n   initial implementation of\
    \ SSP uses TCP as the reliable transport\n   between Data Link Switches.  However,\
    \ other transport connections\n   such as OSI TP4 could be used.\n    +-----------------------------------------------+Switch-to-Switch\n\
    \    |               DLC Interfaces                  | Protocol (SSP)\n    |+------------+\
    \   DLC Request    +------------+ |\n    ||    Data    |<---------------- |  \
    \          | |Send SSP Frame\n    ||    Link    | DLC Indication   |         \
    \   | |-------------->\n    ||  Control 1 |----------------->|            | |\n\
    \    |+------------+                  | Data Link  | |\n    |+------------+  \
    \ DLC Request    |  Switch    | |\n    ||    Data    |<---------------- |    \
    \        | |Rec. SSP Frame\n    ||    Link    | DLC Indication   |           \
    \ | |<-------------\n    ||  Control 2 | ---------------->|            | |\n \
    \   |+------------+                  +------------+ |\n    |                 \
    \  Multi-Protocol Router       |\n    +-----------------------------------------------+\n\
    \                     Figure 2.  DLS System Diagram\n   Before Data Link Switching\
    \ can occur between two routers, they must\n   establish a TCP connection between\
    \ them.  Each DLS will maintain a\n   list of DLS capable routers and their status\
    \ (active/inactive).  Once\n   this connection is established, the DLS will employ\
    \ SSP to establish\n   end-to-end circuits over the transport connection.  Within\
    \ the\n   transport connection is a specific set of  DLS message units.  The\n\
    \   message formats and types for these PDUs are documented in the\n   following\
    \ sections.\n   The default parameters associated with the TCP connections between\n\
    \   Data Link Switches are as follows:\n            Socket Family     AF_INET\
    \        (Internet protocols)\n            Socket Type       SOCK_STREAM    (stream\
    \ socket)\n            Read Port Number  2065\n            Write Port Number 2067\n\
    \   Two or more Data Link Switches may be attached to the same LAN,\n   consisting\
    \ of a number of token-ring segments interconnected by\n   source-routing bridges.\
    \  In this case, a TCP connection is not\n   defined between bridges attached\
    \ to the same LAN.  This will allow\n   using systems to select one of the possible\
    \ Data Link Switches in a\n   similar manner to the selection of a bridge path\
    \ through a source-\n   routed bridged network.  The virtual ring segment in each\
    \ Data Link\n   Switch attached to a common LAN must be configured with the same\
    \ ring\n   number.  This will prevent LAN frames sent by one Data Link Switch\n\
    \   from being propagated through the other Data Link Switches.\n"
- title: 3.1. SSP Frame Formats
  contents:
  - "3.1. SSP Frame Formats\n   The following diagrams show the two message headers\
    \ for traffic\n   between Data Link Switches.  The control message header is used\
    \ for\n   all messages except information messages.  The information message\n\
    \   header is 16 bytes long, and the control message header is 72 bytes\n   long.\
    \  The first sixteen bytes of the control message header are\n   identical to\
    \ the information message header.\n     CONTROL MESSAGES (72 Bytes)\n    +-----------------------------------------------------------------+\n\
    \    | Version Number                  Reserved Field                  |\n   \
    \ | Message Length               ---->           .                  |\n    | Remote\
    \ Data Link Correlator  ---->           .                  |\n    |          \
    \  .                                 .                  |\n    | Remote DLC Port\
    \ ID           ---->           .                  |\n    |            .      \
    \                           .                  |\n    | Reserved Field       \
    \        ---->           .                  |\n    | Message Type            \
    \        Reserved Field                  |\n    | Protocol ID                \
    \     Header Number                   |\n    | Header Length                ---->\
    \           .                  |\n    | Reserved Field               ---->   \
    \        .                  |\n    | Reserved Field                  Message Type\
    \                    |\n    | Target MAC Address           ---->           . \
    \                 |\n    |            .                                 .    \
    \              |\n    |            .                                 .       \
    \           |\n    | Origin MAC Address           ---->           .          \
    \        |\n    |            .                                 .             \
    \     |\n    |            .                                 .                \
    \  |\n    | Origin Link SAP                 Target Link SAP                 |\n\
    \    | Frame Direction                 Reserved Field                  |\n   \
    \ | Message Length               ---->           .                  |\n    | DLC\
    \ Header Length            ---->           .                  |\n    | Origin\
    \ DLC Port ID           ---->           .                  |\n    |          \
    \  .                                 .                  |\n    | Origin Data Link\
    \ Correlator  ---->           .                  |\n    |            .       \
    \                          .                  |\n    | Origin Transport ID   \
    \       ---->           .                  |\n    |            .             \
    \                    .                  |\n    | Target DLC Port ID          \
    \ ---->           .                  |\n    |            .                   \
    \              .                  |\n    | Target Data Link Correlator  ---->\
    \           .                  |\n    |            .                         \
    \        .                  |\n    | Target Transport ID          ---->      \
    \     .                  |\n    |            .                               \
    \  .                  |\n    | Reserved Field               ---->           .\
    \                  |\n    |            .                                 .   \
    \               |\n    +-----------------------------------------------------------------+\n\
    \             (Even Byte)                      (Odd Byte)\n     INFORMATION MESSAGE\
    \ (16 Bytes)\n    +-----------------------------------------------------------------+\n\
    \    | Version                         Reserved Field                  |\n   \
    \ | Message Length               ---->           .                  |\n    | Remote\
    \ Data Link Correlator  ---->           .                  |\n    |          \
    \  .                                 .                  |\n    | Remote DLC Port\
    \ ID           ---->           .                  |\n    |            .      \
    \                           .                  |\n    | Reserved Field       \
    \        ---->           .                  |\n    | Message Type            \
    \        Reserved Field                  |\n    +-----------------------------------------------------------------+\n\
    \             (Even Byte)                      (Odd Byte)\n   The Version Number\
    \ is set to x'4B', indicating a numeric value of 75.\n   The Header Length is\
    \ x'00 48', indicating a numeric value of 72\n   bytes.\n   The Header Number\
    \ is x'01', indicating a value of one.\n   The Frame Direction field is set to\
    \ x'01' for frames sent from the\n   origin DLS to the target DLS, and is set\
    \ to x'02' for frames sent\n   from the target DLS to the origin DLS.\n      Note:\
    \  The Remote Data Link Correlator and Remote DLC Port ID are\n      set equal\
    \ to the Target Data Link Correlator and Target DLC Port\n      ID if the Frame\
    \ Direction field is set to x'01', and are set equal\n      to the Origin Data\
    \ Link Correlator and Origin DLC Port ID if the\n      Direction Field is set\
    \ to x'02'.\n   The Protocol ID field is set to x'42', indicating a numeric value\
    \ of\n   66.\n   The Message Length field defines the number of bytes within the\
    \ data\n   field following the header.  Note that this value is specified in two\n\
    \   different fields of the message header.\n   The DLC Header Length is set to\
    \ zero for SNA and is set to x'23' for\n   NetBIOS datagrams, indicating a length\
    \ of 35 bytes.  This includes\n   the Access Control (AC) field, the Frame Control\
    \ (FC) field,\n   Destination MAC Address (DA), the Source MAC Address (SA), the\n\
    \   Routing Information (RI) field (padded to 18 bytes), the Destination\n   link\
    \ SAP (DSAP), the Source link SAP (SSAP), and the LLC control\n   field (UI).\n\
    \   The values for the Message Type field are defined in a later section.\n  \
    \ Note that this value is specified in two different fields of the\n   message\
    \ header.\n   Reserved fields are set to zero upon transmission and should be\n\
    \   ignored upon receipt.\n"
- title: 3.2. Address Parameters
  contents:
  - "3.2. Address Parameters\n   A data link is defined as a logical association between\
    \ the two end\n   stations using Data Link Switching.  It is identified by a Data\
    \ Link\n   ID (14 bytes) consisting of the pair of attachment addresses\n   associated\
    \ with each end system.  Each attachment address is\n   represented by the concatenation\
    \ of the MAC address (6 bytes) and the\n   LLC address (1 byte).\n     DATA LINK\
    \ ID   (14 Bytes)\n    +-----------------------------------------------------------------+\n\
    \    |Target MAC Address           ---->         .                     |\n   \
    \ |           .                               .                     |\n    | \
    \          .                               .                     |\n    |Origin\
    \ MAC Address           ---->         .                     |\n    |         \
    \  .                               .                     |\n    |           .\
    \                               .                     |\n    |Origin Link SAP\
    \                   Target Link SAP                |\n    +-----------------------------------------------------------------+\n\
    \   An end-to-end circuit is identified by a pair of Circuit ID's.  A\n   Circuit\
    \ ID is a 64 bit  number that identifies the DLC circuit within\n   a single DLS.\
    \  It consists of a DLC Port ID (4 bytes), and a Data\n   Link Correlator (4 bytes).\
    \  This value is unique in a single DLS and\n   is assigned locally.  The pair\
    \ of Circuit ID's along with the\n   identifiers of the Data Link Switches, uniquely\
    \ identify a single\n   end-to-end circuit.  Each DLS must keep a table of these\
    \ Circuit ID\n   pairs, one for the local end of the circuit and the other for\
    \ the\n   remote end of the circuit.  In order to identify which Data Link\n \
    \  Switch originated the establishment of a circuit, the terms, origin\n   DLS\
    \ and target DLS, will be employed in this document.\n     CIRCUIT ID   (8 Bytes)\n\
    \    +-----------------------------------------------------------------+\n   \
    \ |DLC Port ID                  ---->         .                     |\n    | \
    \          .                               .                     |\n    |Data\
    \ Link Correlator         ---->         .                     |\n    |       \
    \    .                               .                     |\n    +-----------------------------------------------------------------+\n\
    \   The Origin Transport ID and the Target Transport ID fields in the\n   message\
    \ header are used to identify the individual TCP/IP port on a\n   Data Link Switch.\
    \  The values have only local significance.  However,\n   each Data Link Switch\
    \ is required to reflect the values contained in\n   these two fields, along with\
    \ the associated values for DLC Port ID\n   and the Data Link Correlator, when\
    \ returning a message to the other\n   Data Link Switch.\n   The following figure\
    \ shows the use of the addressing parameters\n   during the establishment of an\
    \ end-to-end connection.  The CANUREACH,\n   ICANREACH, and REACH_ACK messages\
    \ all carry the Data Link ID,\n   consisting of the MAC and Link SAP addresses\
    \ associated with the two\n   end stations.  Upon receipt of a CANUREACH message,\
    \ the target DLS\n   starts a data link for each port, thereby obtaining a Data\
    \ Link\n   Correlator.  If the target station can be reached, an ICANREACH\n \
    \  message is returned to the origin DLS containing the Target Circuit\n   ID\
    \ parameter.  Upon receipt, the origin DLS starts a data link and\n   returns\
    \ the Origin Circuit ID to the target DLS within the REACH_ACK\n   message.  If\
    \ the REACH_ACK message is not successfully received, the\n   target Data Link\
    \ Switch can obtain the Origin Circuit ID from a\n   subsequent message (i.e.,\
    \ CONTACT, XIDFRAME, or DGRMFRAME).\n     +------------+                     \
    \             +------------+\n     |Disconnected|                            \
    \      |Disconnected|\n     +------------+     CANUREACH (Data Link ID)     +------------+\n\
    \           ------------------------------------------------->\n             \
    \  ICANREACH (Data Link ID, Target Circuit ID)\n           <------------------------------------------------\n\
    \         REACH_ACK (Data Link ID, Origin Cir ID, Target Cir ID)\n           ------------------------------------------------->\n\
    \     +------------+                                  +------------+\n     |Circuit\
    \ Est.|                                  |Circuit Est.|\n     +------------+ \
    \                                 +------------+\n         XIDFRAME (Data Link\
    \ ID, Origin Cir ID, Target Cir ID)\n           <------------------------------------------------>\n\
    \          CONTACT (Data Link ID, Origin Cir ID, Target Cir ID)\n           ------------------------------------------------->\n\
    \         CONTACTED (Data Link ID, Origin Cir ID, Target Cir ID)\n           <-------------------------------------------------\n\
    \     +------------+                                  +------------+\n     | Connected\
    \  |                                  | Connected  |\n     +------------+    \
    \                              +------------+\n            INFOFRAME (Remote Circuit\
    \ ID = Target Circuit ID)\n           ------------------------------------------------->\n\
    \            INFOFRAME (Remote Circuit ID = Origin Circuit ID)\n           <-------------------------------------------------\n\
    \                  Figure 3.  DLS Circuits and Connections\n   During the exchange\
    \ of the XIDFRAME, CONTACT, and CONTACTED messages,\n   the pair of Circuit ID\
    \ parameters is included in the message format\n   along with the DATA LINK ID\
    \ parameter.  Once the connection has been\n   established, the INFOFRAME messages\
    \ are exchanged with the shorter\n   header.  This header contains only the Circuit\
    \ ID associated with the\n   remote DLS.  The Remote Data Link Correlator and\
    \ the Remote DLC Port\n   ID are set equal to the Data Link Correlator and the\
    \ DLC Port ID that\n   are associated with the origin or target Data Link Switch,\
    \ dependent\n   upon the direction of the packet.\n"
- title: 3.3. Message Types
  contents:
  - "3.3. Message Types\n   The following table lists the protocol data units that\
    \ are exchanged\n   between Data Link Switches.  All values not listed are reserved\
    \ for\n   potential use in follow-on releases.\n     Command       Function  \
    \                     Hex Value\n     -------       --------                 \
    \      ---------\n     CANUREACH     Can U Reach Station            x'03'\n  \
    \   ICANREACH     I Can Reach Station            x'04'\n     REACH_ACK     Reach\
    \ Acknowledgment           x'05'\n     DGRMFRAME     Datagram Frame (See note)\
    \      x'06'\n     XIDFRAME      XID Frame                      x'07'\n     CONTACT\
    \       Contact Remote Station         x'08'\n     CONTACTED     Remote Station\
    \ Contacted       x'09'\n     RESTART_DL    Restart Data Link              x'10'\n\
    \     DL_RESTARTED  Data Link Restarted            x'11'\n     INFOFRAME     Information\
    \ (I) Frame          x'0A'\n     HALT_DL       Halt Data Link                \
    \ x'0E'\n     DL_HALTED     Data Link Halted               x'0F'\n     NETBIOS_NQ\
    \    NetBIOS Name Query             x'12'\n     NETBIOS_NR    NetBIOS Name Recognized\
    \        x'13'\n     DATAFRAME     Data Frame (See note)          x'14'\n    \
    \ NETBIOS_ANQ   NetBIOS Add Name Query         x'1A'\n     NETBIOS_ANR   NetBIOS\
    \ Add Name Response      x'1B'\n                      Table 1.  SSP Message Types\n\
    \      Note: Both the DGRMFRAME and DATAFRAME messages are used to carry\n   \
    \   information received by the DLC entity within UI frames.  As will\n      be\
    \ explained below, the DGRMFRAME message is addressed according\n      to a pair\
    \ of Circuit IDs, while the DATAFRAME message is addressed\n      according to\
    \ a Data Link ID, being composed of a pair of MAC\n      addresses and a pair\
    \ of link SAP addresses.  The latter is\n      employed prior to the establishment\
    \ of an end-to-end circuit when\n      Circuit IDs have yet to be established.\n\
    \   For the exchange of NetBIOS control messages, the entire DLC header\n   is\
    \ carried as part of the message unit.  This includes the MAC\n   header, with\
    \ the routing information field padded to 18 bytes, and\n   the LLC header.  The\
    \ following message types are affected:\n   NETBIOS_NQ, NETBIOS_NR, NETBIOS_ANQ,\
    \ NETBIOS_ANR, and DATAFRAME when\n   being used by NetBIOS systems.  The routing\
    \ information in the DLC\n   header is not used by the remote Data Link Switch\
    \ upon receiving the\n   above five messages.\n"
- title: 4. Protocol Specification
  contents:
  - "4. Protocol Specification\n   This section provides a description of the Switch-to-Switch\n\
    \   Protocols.  Included is a set of high-level protocol flows and a\n   detail\
    \ set of state transition tables.  The states and the protocols\n   are described\
    \ in terms that are intended to be generic to different\n   platforms.  Emphasis\
    \ of the technical details is to ensure\n   operability of the IBM 6611 with another\
    \ vendor's implementation.\n   Notes are inserted at points where the IBM 6611\
    \ performs local\n   actions that are specific to the AIX platform upon which\
    \ it operates.\n"
- title: 4.1. Protocol Flow Diagrams
  contents:
  - "4.1. Protocol Flow Diagrams\n   The switch-to-switch protocols are used to setup\
    \ and take down\n   circuits between a pair of Data Link Switches.  Once a circuit\
    \ is\n   established, the end stations on the local networks can employ LLC\n\
    \   Type 1 (connectionless) protocols.  In addition, the end systems can\n   establish\
    \ an end-to-end connection for support of LLC Type 2\n   (connection oriented)\
    \ protocols.\n   The term, Data Link, is used in this document to refer to both\
    \ a\n   \"logical data link\" when supporting Type 1 LLC services, and a \"data\n\
    \   link connection\" when supporting Type 2 LLC services.  In both cases,\n \
    \  the Data Link in defined by the concatenation of the destination MAC\n   address\
    \ (DA), the source MAC address (SA), the destination link SAP\n   (DSAP) and source\
    \ link SAP (SSAP).\n"
- title: 4.1.1. Connect Protocols
  contents:
  - "4.1.1. Connect Protocols\n   The following figure depicts the protocol flows\
    \ that are used for the\n   establishment of a circuit between a pair of Data\
    \ Link Switches,\n   followed by the establishment of a connection between the\
    \ pair of end\n   systems.  The figure is drawn assuming that the two end systems\
    \ are\n   SNA (the protocol flow for NetBIOS systems is described in a later\n\
    \   paragraph).\n   Data Link  Data Link                         Data Link  Data\
    \ Link\n    Control    Switch                            Switch     Control\n\
    \   --------------------                         --------------------\n      +------------+\
    \                                 +------------+\n      |Disconnected|       \
    \                          |Disconnected|\n      +------------+              \
    \                   +------------+\n"
- title: Test Command                  CANUREACH                     Test Comd.
  contents:
  - "Test Command                  CANUREACH                     Test Comd.\n  ---------->\
    \    --------------------------------------->     ------->\n (DSAP=Null)     \
    \            (DSAP=SSAP)\n                                                   \
    \      Test Response\n                              ICANREACH                \
    \     <---------\n"
- title: Test Response    <---------------------------------------
  contents:
  - "Test Response    <---------------------------------------\n  <----------    \
    \             REACH ACK\n                 --------------------------------------->\n\
    \      +------------+                                 +------------+\n      |Circuit\
    \ Est.|                                 |Circuit Est.|\n      +------------+ \
    \                                +------------+\n    SABME                   \
    \   CONTACT\n  ---------->    --------------------------------------->     SABME\n\
    \      UA                                                      ------->\n  <----------\n\
    \     RNR                                                        UA\n  <----------\
    \                 CONTACTED                      <-------\n                 <---------------------------------------\n\
    \      +------------+                                 +------------+\n      |\
    \ Connected  |                                 | Connected  |\n      +------------+\
    \                                 +------------+\n      RR\n   <---------\n  \
    \             Figure 4.  DLS Connect  Message Protocols\n   Upon receipt of a\
    \ Test command from the origin station, the origin\n   DLS will send a CANUREACH\
    \ (i.e., can you reach) message to the target\n   DLS.  If the target DLS is not\
    \ known to the origin DLS, the CANUREACH\n   message is sent to all remote Data\
    \ Link Switches defined to the\n   origin DLS.  The receipt of the CANUREACH message\
    \ causes the target\n   DLS to send a Test command searching for the target station.\
    \  The\n   target station will return a Test response, causing the target DLS\
    \ to\n   return an ICANREACH (i.e., I can reach) message to the origin DLS.\n\
    \   If multiple Data Link Switches can reach the target station, the\n   origin\
    \ DLS will receive multiple ICANREACH messages.  The origin DLS\n   will select\
    \ the first message and send a REACH_ACK (i.e., reach\n   acknowledgment) message\
    \ to the selected Data Link Switch.  During\n   this exchange of messages, both\
    \ Data Link Switches change states from\n   the Disconected state to the Circuit\
    \ Established state.  Once the\n   circuit is established, Type-1 frames, such\
    \ as XID, may be exchanged\n   between the origin and target stations.\n   To\
    \ establish a connection, the origin station sends a SABME command.\n   Upon receipt\
    \ of this command, the origin DLS will send a CONTACT\n   message to the target\
    \ DLS and return a UA response to the origin\n   station.  To inhibit traffic\
    \ flow until the connection is established\n   to the remote station, a RNR supervisory\
    \ frame is sent to the origin\n   station.  The CONTACT message will cause the\
    \ target DLS to send a\n   SABME command to the target station, which in return\
    \ will reply with\n   a UA response.  Upon receipt of the UA response, the target\
    \ DLS will\n   send a CONTACTED message to the origin DLS.  The origin DLS will\
    \ now\n   send an RR supervisory frame to the origin station.  During this\n \
    \  exchange of messages, both Data Link Switches change states from the\n   Circuit\
    \ Established state to the Connected state.\n   For NetBIOS end systems, the protocol\
    \ flows are similar but employ\n   different frames and SSP messages.  Instead\
    \ of using a Test command\n   frame to initiate the circuit, a NetBIOS system\
    \ will use a Name Query\n   frame.  Receipt of a Name Query frame will cause the\
    \ Data Link Switch\n   to issue a NETBIOS_NQ message instead of the CANUREACH\
    \ message.  In a\n   like fashion, the Test response is replaced with a Name Recognized\n\
    \   frame and the ICANREACH message is replaced with a NETBIOS_NR\n   message.\
    \  As with the SNA protocol flows, the receipt of a NETBIOS_NR\n   message causes\
    \ the origin Data Link Switch to respond with a\n   REACH_ACK message.\n"
- title: 4.1.2. Link Restart Protocols
  contents:
  - "4.1.2. Link Restart Protocols\n   The following figure depicts the protocol flows\
    \ that result from\n   restarting the end-to-end connection.  This causes the\
    \ Data Link\n   Switches to terminate the existing connection and to enter the\n\
    \   Circuit Established state awaiting the start of a new connection.\n     Data\
    \ Link   Data Link                     Data Link   Data Link\n      Control  \
    \   Switch                        Switch      Control\n     ---------------------\
    \                     ---------------------\n          +-----------+         \
    \                    +-----------+\n          | Connected |                  \
    \           | Connected |\n    SABME +-----------+                           \
    \  +-----------+\n  ----------->                 RESTART_DL\n      DM        \
    \   ------------------------------------->     DISC\n  <-----------          \
    \                                     -------->\n                            \
    \                                   UA\n                         DL_RESTARTED\
    \ (Case 1)              <--------\n                   <-------------------------------------\n\
    \          +-----------+                             +-----------+\n         \
    \ |Circuit Est|                             |Circuit Est|\n          +-----------+\
    \                             +-----------+\n                        ...........\
    \ or ...........\n    SABME\n  ----------->           DL_RESTARTED (Case 2)\n\
    \       UA          <-------------------------------------\n  <-----------   \
    \                                   +-----------+\n                          \
    \                          |Circuit Est|\n                                CONTACT\
    \             +-----------+\n      RNR           ------------------------------------>\n\
    \  <----------\n             Figure 5.  DLS Link Restart Message Protocols\n \
    \  Upon receipt of a SABME command from the origin station, the origin\n   DLS\
    \ will send a RESTART_DL message to the target DLS.  A DM response\n   is also\
    \ returned to the origin station and the data link is\n   restarted.\n   Upon\
    \ receipt of the RESTART_DL message, the target DLS will issue a\n   DISC command\
    \ to the target station.  The target station is expected\n   to return a UA response.\
    \  The target DLS will then restart its data\n   link and send an DL_RESTARTED\
    \ message back to the origin DLS.  During\n   this exchange of messages, both\
    \ Data Link Switches change states from\n   Connected state to Circuit Established\
    \ state.\n   If the origin station now resends the SABME command, the origin DLS\n\
    \   will send a CONTACT message to the target DLS.  If the SABME command\n   is\
    \ received prior to the receipt of the DL_RESTARTED message (case 2\n   in the\
    \ figure), the CONNECT message is delayed until the DL_RESTARTED\n   message is\
    \ received.  The resulting protocol flows at this point\n   parallel those given\
    \ above for the connect sequence.\n"
- title: 4.1.3. Disconnect Protocols
  contents:
  - "4.1.3. Disconnect Protocols\n   The following figure depicts the protocol flows\
    \ that result from the\n   end system terminating an existing connection.  Not\
    \ only is the\n   connection terminated, but the circuit between the Data Link\
    \ Switches\n   is taken down.\n     Data Link  Data Link                     \
    \ Data Link  Data Link\n      Control    Switch                         Switch\
    \     Control\n     --------------------                      --------------------\n\
    \          +-----------+                             +-----------+\n         \
    \ | Connected |                             | Connected |\n          +-----------+\
    \                             +-----------+\n      DISC\n   ---------->      \
    \            HALT_DL\n       UA         ------------------------------------->\
    \      DISC\n   <----------                                              --------->\n\
    \                                                               UA\n         \
    \                      DL_HALTED                    <--------\n              \
    \    <-------------------------------------\n          +-----------+         \
    \                    +-----------+\n          |Disconnectd|                  \
    \           |Disconnectd|\n          +-----------+                           \
    \  +-----------+\n                          ......... or ..........\n        \
    \  +-----------+                             +-----------+\n          | Connected\
    \ |                             | Connected |\n          +-----------+       \
    \                      +-----------+\n       DISC              TCP Connection\
    \ Failure               DISC\n    <--------     <------------------------------------>\
    \    --------->\n        UA                                                  \
    \   UA\n    -------->                                               <--------\n\
    \          +-----------+                             +-----------+\n         \
    \ |Disconnectd|                             |Disconnectd|\n          +-----------+\
    \                             +-----------+\n              Figure 6.  DLS Disconnect\
    \ Message Protocols\n   Upon receipt of a DISC command from the origin station,\
    \ the origin\n   DLS will reply with a UA response and issue a HALT_DL message\
    \ to the\n   target DLS.  Upon receipt of the HALT_DL message, the target DLS\
    \ will\n   send a DISC command to the target station.  The target station will\n\
    \   then respond with a UA response, causing the target DLS to return a\n   DL_HALTED\
    \ message to the origin DLS.  During this exchange of\n   messages, both Data\
    \ Link Switches change states from the Connected\n   state to the Disconnected\
    \ state.\n   If the TCP connection between two Data Link Switches fails, all\n\
    \   connections that are currently multiplexed on the failed TCP\n   connection\
    \ will be taken down.  This implies that both Data Link\n   Switches will send\
    \ DISC commands to all the local systems that are\n   associated with the failed\
    \ connections.  Upon sending the DISC\n   command, the Data Link Switch will enter\
    \ the DISCONNECT state for\n   each circuit.\n"
- title: 4.2. DLS State Machine
  contents:
  - "4.2. DLS State Machine\n   The following state tables describe the states for\
    \ a single\n   connection through the Data Link Switch.  State information is\
    \ kept\n   for each connection.  The initial state for a connection is\n   DISCONNECT.\
    \  The steady state is either CIRCUIT_ESTABLISHED or\n   CONNECTED.  In the former\
    \ state, an end-to-end circuit has been\n   established allowing the support of\
    \ Type 1 LLC between the end\n   systems.  The latter state exists when an end-to-end\
    \ connection has\n   been established for the support of Type 2 LLC services between\
    \ the\n   end systems.\n   For SNA, circuit establishment is via the use of IEEE\
    \ 802.2 Test or\n   XID  frames.  SNA devices send these frames to the null SAP\
    \ in order\n   to determine the source route information in support of bridging.\n\
    \   Normally SNA devices use SAP x'04', x'08', or x'0C'.  Typically the\n   SAP\
    \ would be used to determine if the Test frames should be sent to\n   the DLS\
    \ code in the router.  If both bridging and DLS are enabled,\n   this allows the\
    \ product to ensure that SNA frames are not both\n   bridged and switched.\n \
    \  For NetBIOS, circuit establishment is via the Name Query and Name\n   Recognized\
    \ frames.  These frames are used for both address resolution\n   and source route\
    \ determination.  Normally NetBIOS devices use SAP\n   x'F0'.\n"
- title: 4.2.1. Data Link Switch States
  contents:
  - "4.2.1. Data Link Switch States\n   The Switch-to-Switch Protocols will be formally\
    \ defined through a\n   single state machine.  The following table lists the eleven\
    \ possible\n   states.  A separate state machine is employed for each end-to-end\n\
    \   circuit that is maintained by the Data Link Switch.  The three steady\n  \
    \ states are DISCONNECTED, CIRCUIT_ESTABLISHED, and CONNECTED.\n     State Name\
    \            Description\n     ----------            -----------\n     CIRCUIT_ESTABLISHED\
    \   The end-to-end circuit has been\n                           established. \
    \ At this time LLC Type 1\n                           services are available from\
    \ end-to-end.\n     CIRCUIT_PENDING       The target DLS is awaiting a REACH_ACK\n\
    \                           response to an ICANREACH message.\n     CIRCUIT_RESTART\
    \       The DLS that originated the reset is\n                           awaiting\
    \ the restart of the data link\n                           and the DL_RESTARTED\
    \ response to a\n                           RESTART_DL message.\n     CONNECTED\
    \             The end-to-end connection has been\n                           established\
    \ thereby allowing LLC Type 2\n                           services from end-to-end\
    \ in addition to\n                           LLC Type 1 services.\n     CONNECT_PENDING\
    \       The origin DLS is awaiting the CONTACTED\n                           response\
    \ to a CONTACT message.\n     CONTACT_PENDING       The target DLS is awaiting\
    \ the\n                           DLC_CONTACTED confirmation to a DLC_CONTACT\n\
    \                           signal (i.e., DLC is waiting for a UA\n          \
    \                 response to an SABME command).\n     DISCONNECTED          The\
    \ initial state with no circuit or\n                           connection established,\
    \ the DLS is awaiting\n                           either a CANUREACH, an ICANREACH,\
    \ a\n                           NETBIOS_NQ, or a NETBIOS_NR message.\n     DISCONNECT_PENDING\
    \    The DLS that originated the disconnect\n                           is awaiting\
    \ the DL_HALTED response to a\n                           HALT_DL message.\n \
    \    HALT_PENDING          The remote DLS is awaiting the DLC_DL_HALTED\n    \
    \                       indication following the DLC_HALT_DL request\n       \
    \                    (i.e., DLC is waiting for a UA response to a\n          \
    \                 DISC command).\n     RESTART_PENDING       The remote DLS is\
    \ awaiting the DLC_DL_HALTED\n                           indication following\
    \ the DLC_HALT_DL request\n                           (i.e., DLC is waiting for\
    \ a UA response to a\n                           DISC command), and the restart\
    \ of the data\n                           link.\n     RESOLVE_PENDING       The\
    \ target DLS is awaiting either the\n                           DLC_DL_STARTED\
    \ indication following the\n                           DLC_START_DL reqest (i.e.,\
    \ DLC is waiting\n                           for a Test response as a result of\
    \ sending a\n                           Test command), or a NB_Name_Recognized\n\
    \                           frame in response to a NB_Name_Query frame.\n    \
    \               Table 2.  Data Link Switch States\n   The following figure depicts\
    \ the events that cause a transition to a\n   new state.  The resulting action(s)\
    \ are not explicitly shown.  The\n   DISCONNECT_PENDING state will be entered\
    \ whenever a DLC error\n   condition occurs in any of the other states (except\
    \ RESOLVE_PENDING),\n   or when a DISC command is received by the DLC.\n     \
    \          DLC_RESOLVE_C+----+        +----DLC_ERROR---+\n                   \
    \         |    |       \\|/               |\n  +------------+            +>+--+---------+\
    \  CANUREACH  +-+----------+\n  | Disconnect +--DL_HALTED-->|Disconnected|------------>|\
    \  Resolve   |\n  |   Pending  |<+   +------->|            |<-------+    |  Pending\
    \   |\n  +---------+--+ |   |        +-----+------+        |    +-----+------+\n\
    \   /|\\      | HALT_DL|         /|\\  |/|\\/|\\         |          |\n"
- title: DLC_ERROR   +----+   |     +----+   | |  +------+   |    DLC_DL_STARTED
  contents:
  - "DLC_ERROR   +----+   |     +----+   | |  +------+   |    DLC_DL_STARTED\n   \
    \ |                |     |        |HALT_DL(ts)|   +------+   |\n             \
    \        |     | ICANREACH|         |   HALT_DL(ts)|\n       +--HALT_DL(ts)+ \
    \    |        | |         |          |   |\n       |               HALT_DL(ts)\
    \  | |     HALT_DL(ts)    |   |\n       |                   |        | |     \
    \    |          |   |\n       |   +-RESTART_DL(ts)+----+   | |         |     \
    \     |   |\n       |   |               |   \\|/ \\|/|         |          |  \\\
    |/\n  +----+---+---+           |  +-------+----+    |        +-+----------+\n\
    \  |  Contact   |<-CONTACT--+--+   Circuit  |<-REACH_ACK--+   Circuit  |\n  |\
    \  Pending   |           |  | Established| (DLC not    |   Pending  |\n  +-----+------+\
    \           |  +----------+-+   contacted)+-+------+---+\n        |   /|\\   \
    \         |   /|\\ /|\\   |      |          |      |\n        |    |         \
    \ +--+----+   |    |      |          |      |\n        |    +-CONTACT--+--+--------+----+------+----------+\
    \  REACH_ACK\n        |               |  |RESTART_DL(ts)      |       (DLC contacted)\n\
    \    DLC_CONTACTED       |  +------+ |    |      +--------------+  |\n       \
    \ |               |         | |    | DLC_CONTACTED       |  |\n        +---------------+-------+\
    \ | |    +-----------------+   |  |\n        +-----DL_RESTARTED      | | |   \
    \                   |   |  |\n        |  (DLC not contacted) \\|/| |         \
    \            \\|/  | \\|/\n  +-----+------+              +---+-+------+  CONTACTED\
    \  +-----+------+\n  |   Circuit  |<-DLC_RESET---+  Connected |<------------+\
    \   Connect  |\n  |   Restart  |              |            |             |   Pending\
    \  |\n  +----------+-+              +------------+             +-----+------+\n\
    \       /|\\   |                  DL_RESTARTED              /|\\  |\n        |\
    \    +----------------(DLC contacted)--------------+   |\n        |          \
    \                                            |\n        +-------------------------DLC_RESET--------------------+\n\
    \      Figure 7.  DLS State Transitions  (ts = transitional state)\n   The DISCONNECT\
    \ state is the initial state for a new circuit.  One end\n   station starts the\
    \ connection via a TEST or XID command (i.e.,\n   DLC_RESOLVE_C) or a NetBIOS\
    \ Name Query command (not explicitly\n   shown).  Upon receipt, the Data Link\
    \ Switches exchange a set of\n   CANUREACH, ICANREACH and REACH_ACK messages.\
    \  Upon completion of this\n   three-legged exchange, both Data Link Switches\
    \ will be in the\n   CIRCUIT_ESTABLISHED state.  Two pending states also exist\
    \ during this\n   exchange.  The RESOLVE_PENDING state is entered by the target\
    \ Data\n   Link Switch awaiting a Test response to a Test Command and the\n  \
    \ CIRCUIT_PENDING state is entered by the target DLS awaiting the\n   REACH_ACK\
    \ reply to an ICANREACH message.\n   The CIRCUIT_ESTABLISHED state allows for\
    \ the exchange of LLC Type 1\n   frames such as the XID exchanges between SNA\
    \ stations that occurs\n   prior to the establishment of a connection.  Also,\
    \ datagram traffic\n   (i.e., UI frames)  may be sent and received between the\
    \ end stations.\n   These exchanges use the XIDFRAME and DGRMFRAME messages sent\
    \ between\n   the Data Link Switches.\n   In the CIRCUIT_ESTABLISHED state, the\
    \ receipt of a SABME command\n   (i.e., DLC_CONTACTED) causes the origin DLS to\
    \ issue a CONTACT\n   message, to send an RNR supervisory frame (i.e., DLC_ENTER_BUSY)\
    \ to\n   the origin station, and to enter the CONNECT_PENDING state awaiting a\n\
    \   CONTACTED message.  The target DLS, upon the receipt of a CONTACT\n   message,\
    \ will issue a SABME command (i.e., DLC_CONTACT) and enter the\n   Contact Pending\
    \ state.  Once the UA response is received (i.e.,\n   DLC_CONTACTED), the target\
    \ DLS sends a CONTACTED message and enters\n   the CONNECTED state.  When received,\
    \ the origin DLS enters the\n   Connected state and sends an RR supervisory frame\
    \ (i.e.,\n   DLC_EXIT_BUSY).\n   The CONNECTED state is the steady state for normal\
    \ data flow once a\n   connection has been established.  Information frames (i.e.,\
    \ INFOFRAME\n   messages) are simply sent back and forth between the end points\
    \ of\n   the connection.  This is the path that should be optimized for\n   performance.\n\
    \   The connection is terminated upon the receipt of a DISC frame or\n   under\
    \ some other error condition detected by DLC (i.e., DLC_ERROR).\n   Upon receipt\
    \ of this indication, the DLS will halt the local data\n   link, send a HALT_DL\
    \ message to the remote DLS, and enter the\n   DISCONNECT_PENDING State.  When\
    \ the HALT_DL frame is received by the\n   other DLS, the local DLC is halted\
    \ for this data link, a DL_HALTED\n   message is returned, and the DISCONNECTED\
    \ state is entered.  Receipt\n   of this DL_HALTED message causes the other DLS\
    \ to also enter the\n   DISCONNECTED state.\n   The CIRCUIT_RESTART state is entered\
    \ if one of the Data Link Switches\n   receives a SABME command  (i.e., DLC_RESET)\
    \ while in the CONNECTED\n   state.  This causes a DM command to be returned to\
    \ the origin station\n   and a RESTART_DL message to be sent to the remote Data\
    \ Link Switch.\n   This causes the remote data link to be halted and then restarted.\n\
    \   The remote DLS will then send a DL_RESTARTED message back to the\n   first\
    \ DLS.  The receipt of the DL_RESTARTED message causes the first\n   DLS to issue\
    \ a new CONTACT message, assuming that the local DLC has\n   been contacted (i.e.,\
    \ the origin station has resent the SABME\n   command).  This is eventually responded\
    \ to by a CONTACTED message.\n   Following this exchange, both Data Link Switches\
    \ will return to the\n   CONNECTED state.  If the local DLC has not been contacted,\
    \ the\n   receipt of a DL_RESTARTED command causes the Data Link Switch to\n \
    \  enter the CIRCUIT_ESTABLISHED state awaiting the receipt of a SABME\n   command\
    \ (i.e., DLC_CONTACTED signal).\n   In the figure, the transition labeled HALT_DL(ts)\
    \ represents the\n   HALT_PENDING state and the transition labeled RESTART_DL(ts)\n\
    \   represents the RESTART_PENDING state.  Both these transitional states\n  \
    \ have only one input event and only one output action.  While in these\n   states,\
    \ the Data Link Switch is awaiting responses from the local\n   station on the\
    \ adjacent LAN (i.e., a UA response to a DISC command).\n   Also in the RESTART_PENDING\
    \ state, the Data Link Switch will attempt\n   to restart the data link prior\
    \ to sending a DL_RESTARTED message.\n   For the IBM 6611 implementation, the\
    \ start of a data link involves\n   the exchange of a Test command/response on\
    \ the adjacent LAN (i.e.,\n   DLC_START_DL).  For other implementations, this\
    \ additional exchange\n   may not be required.\n"
- title: 4.2.2. State Transition Tables
  contents:
  - "4.2.2. State Transition Tables\n   This section provides a detail representation\
    \ of the Data Link\n   Switch, as document by a set of state machines.  The first\
    \ state\n   machine documents the sending and receiving of SSP messages.  Many\
    \ of\n   the transitions are dependent upon local signals between the Data\n \
    \  Link Switch entity and one of the DLC entities.  These signals and\n   their\
    \ definitions are given in the following tables.\n     Event Name      Description\n\
    \     ----------      -----------\n     DLC_CONTACTED   Contact Indication:  DLC\
    \ has received an SABME\n                     command and will send a UA response,\
    \ or DLC has\n                     received a UA response as a result of sending\
    \ an\n                     SABME command.\n     DLC_DGRM        Datagram Indication:\
    \  DLC has received a UI frame.\n     DLC_ERROR       Error condition indicated\
    \ by DLC:  Such a\n                     condition occurs when a DISC command is\
    \ received\n                     or when DLC experiences an unrecoverable error.\n\
    \     DLC_INFO        Information Indication:  DLC has received an\n         \
    \            Information (I) frame.\n     DLC_DL_HALTED   Data Link Halted Indication:\
    \  DLC has\n                     received a UA response to a DISC command.\n \
    \    DLC_DL_STARTED  Data Link Started Indication:  DLC has\n                \
    \     received a Test response from the null SAP.\n     DLC_RESET       Reset\
    \ Indication:  DLC has received an SABME\n                     command during\
    \ the time a connection is\n                     currently active and has responded\
    \ with DM.\n     DLC_RESOLVE_C   Resolve Command Indication:  DLC has received\n\
    \                     a Test command addressed to the null SAP, or an\n      \
    \               XID command addressed to the null SAP.\n     DLC_XID         XID\
    \ Indication:  DLC has received an XID command\n                     or response\
    \ to a non-null SAP.\n                       Table 3.  Local DLC Events\n    \
    \ Action Name     Description\n     -----------     -----------\n     DLC_CONTACT\
    \     Contact Station Request:  DLC will send a SABME\n                     command.\n\
    \     DLC_DGRM        Datagram Request:  DLC will send a UI frame.\n     DLC_ENTER_BUSY\
    \  Enter Link Station Busy:  DLC will send an\n                     RNR supervisory\
    \ frame.\n     DLC_EXIT_BUSY   Exit Link Station Busy:  DLC will send an RR\n\
    \                     supervisory frame.\n     DLC_HALT_DL     Halt Data Link\
    \ Request:  DLC will send a DISC\n                     command.\n     DLC_INFO\
    \        Information Request:  DLC will send an I frame.\n     DLC_RESOLVE_R \
    \  Resolve Response Request:  DLC will send a\n                     Test response\
    \ or XID response from the null SAP.\n     DLC_START_DL    Start Data Link Request:\
    \  DLC will send a Test\n                     command to the null SAP.\n     DLC_XID\
    \         XID Request:  DLC will send an XID command or an\n                 \
    \    XID response.\n                      Table 4.  Local DLC Actions\n   The\
    \ Data Link Switch may be described by a state transition table\n   consisting\
    \ of eleven states.  Each of these states is described below\n   in terms of the\
    \ events, actions, and next state for each transition.\n   If a particular event\
    \ is not listed for a given state, no action and\n   no state transition should\
    \ occur for that event.  Any significant\n   comments concerning the transitions\
    \ within a given state are given\n   immediately following the table representing\
    \ the state.\n   A separate state machine is maintained by the Data Link Switch\
    \ for\n   each end-to-end circuit.  The number of circuits that may be\n   supported\
    \ by each Data Link Switch is a local implementation option.\n"
- title: 4.2.2.1   DISCONNECTED State
  contents:
  - "4.2.2.1   DISCONNECTED State\n     Event                  Action(s)         \
    \ Next State\n     -----                  ---------          ----------\n    \
    \ Receive CANUREACH      DLC_START_DL       RESOLVE_PENDING\n     Receive ICANREACH\
    \      Send REACH_ACK,    CIRCUIT_ESTABLISHED\n                            DLC_RESOLVE_R\n\
    \                            (See note 1)\n     Receive DATAFRAME      DLC_DGRM\n\
    \     Receive NETBIOS_NQ     DLC_DGRM           RESOLVE_PENDING\n     Receive\
    \ NETBIOS_NR     Send REACH_ACK,    CIRCUIT_ESTABLISHED\n                    \
    \        DLC_DGRM\n                            (See note 2)\n     DLC_RESOLVE_C\
    \          Send CANUREACH\n     DLC_DGRM               If NB_Name_Query:\n   \
    \                         Send NETBIOS_NQ,\n                            Else:\n\
    \                            Send DATAFRAME\n   It is assumed that each Data Link\
    \ Switch will build a set of topology\n   tables giving the identity of each Data\
    \ Link Switch that can reach a\n   specific MAC address or a specific NetBIOS\
    \ name.  This table can be\n   built based upon the origin address information\
    \ received within the\n   CANUREACH message or NETBIOS_NQ message and the target\
    \ address\n   information within the ICANREACH message or NETBIOS_NR message.\
    \  As a\n   consequence, the amount of search traffic can be kept to a minimum.\n\
    \   Upon receipt of a Test command or XID command to the null SAP (i.e.,\n   DLC_RESOLVE_C\
    \ signal from DLC), the Data Link Switch will check the\n   topology table prior\
    \ to sending the CANUREACH message.  If the target\n   MAC address is in the table,\
    \ the CANUREACH message will be sent to\n   only those Data Link Switches that\
    \ are known to be able to reach the\n   given MAC address.  If the MAC address\
    \ is not in the table, the\n   CANUREACH message will be sent to all known Data\
    \ Link Switches.\n   Since the destination link SAP (DSAP) value is null, the\
    \ Target Link\n   SAP field in the CANUREACH message header is set equal to the\
    \ Origin\n   Link SAP value.\n   Upon receipt of a NB_Name_Query the Data Link\
    \ Switch will check the\n   topology table prior to sending the NETBIOS_NQ message.\
    \  If the\n   target NetBIOS name is in the table, the NETBIOS_NQ message will\
    \ be\n   sent to only those Data Link Switches that are known to be able to\n\
    \   reach the given NetBIOS name.  If the NetBIOS name is not in the\n   table,\
    \ the NETBIOS_NQ message will be sent to all known Data Link\n   Switches.\n \
    \  For SNA, the DISCONNECTED state is exited upon receipt of a CANUREACH\n   message\
    \ by a prospective target Data Link Switch, or upon receipt of\n   an ICANREACH\
    \ message by the origin Data Link Switch.  In the former\n   case, the Data Link\
    \ Switch will issue a Test command to the target\n   station (i.e., DLC_START_DL\
    \ signal is presented to DLC).  In the\n   later case, a Test response is sent\
    \ to the origin station (i.e.,\n   DLC_RESOLVE_R will be issued) and a REACH_ACK\
    \ message will be\n   returned to the target Data Link Switch.\n      Note 1-\
    \  The IBM 6611 will not send a Test response, but will send\n      a Test command\
    \ to the station that originated the resolve\n      procedure (i.e., a DLC_START_DL\
    \ will be issued) in order to start\n      the data link.\n   For NetBIOS, the\
    \ DISCONNECTED state is exited upon the receipt of a\n   NETBIOS_NQ message by\
    \ the prospective target Data Link Switch, or\n   upon the receipt of a NETBIOS_NR\
    \ message by the origin Data Link\n   Switch.  In the former case, the Data Link\
    \ Switch will send a\n   NB_Name_Query frame.  In the later case, the Data Link\
    \ Switch will\n   send a NB_Name_Recognized frame to the origin station and a\
    \ REACH_ACK\n   message will be returned to the target Data Link Switch.\n   \
    \   Note 2-  The IBM 6611 will also send a Test command (i.e., a\n      DLC_START_DL\
    \ will be issued) to the station that originated the\n      name resolution in\
    \ order to start the data link.\n"
- title: 4.2.2.2   RESOLVE_PENDING State
  contents:
  - "4.2.2.2   RESOLVE_PENDING State\n     Event                  Action(s)      \
    \        Next State\n     -----                  ---------              ----------\n\
    \     Receive DATAFRAME      DLC_DGRM\n     DLC_DL_STARTED         Send ICANREACH\
    \         CIRCUIT_PENDING\n     DLC_ERROR                                    \
    \ DISCONNECTED\n     DLC_DGRM               If NB_Name_Recognized: If\n      \
    \                      Send NETBIOS_NR        NB_Name_Recognized:\n          \
    \                  (See note),            CIRCUIT_PENDING\n                  \
    \          Else:\n                            Send DATAFRAME\n   The RESOLVE_PENDING\
    \ state is entered upon receipt of a CANUREACH\n   message or a NETBIOS_NQ message\
    \ by the target DLS.  In the former\n   case, a data link is started, causing\
    \ a Test command to be sent by\n   the DLC.  In the later case, a NB_Name_Query\
    \ frame is sent.  This\n   frame is directed to a group MAC address.\n   Any CANUREACH\
    \ messages received in the RESOLVE_PENDING state will be\n   responded to if a\
    \ DLC_DL_STARTED signal is received.  The Data Link\n   Switch may also update\
    \ its topology information based upon the origin\n   MAC address information in\
    \ each CANUREACH message.\n   Upon the receipt of a DLC_DL_STARTED signal in the\
    \ RESOLVE_PENDING\n   state, the Data Link Switch may update its topology table\
    \ base upon\n   the remote MAC address information.  The ICANREACH message should\
    \ be\n   returned to all Data Link Switches that had sent a CANUREACH message.\n\
    \   In a similar fashion, the Data Link Switch may update its topology\n   table\
    \ upon the receipt of a NB_Name_Recognized frame and a NETBIOS_NR\n   message\
    \ will be returned to all Data Link Switches that have sent a\n   NETBIOS_NQ message.\n\
    \   The RESOLVE_PENDING state is exited once the data link has been\n   started\
    \ (i.e., a DLC_DL_STARTED signal is received as a result of a\n   Test response\
    \ received by the DLC) or a NB_Name_Recognized frame is\n   received (i.e., a\
    \ DLC_DGRM signal is received).  The target Data Link\n   Switch will then enter\
    \ the CIRCUIT_PENDING state.\n      Note:  The IBM 6611 will also send a Test\
    \ command in order to\n      start the data link to the station that responded\
    \ to the Name\n      Query frame (i.e., a DLC_START_DL will be issued).\n"
- title: 4.2.2.3   CIRCUIT_PENDING State
  contents:
  - "4.2.2.3   CIRCUIT_PENDING State\n     Event                  Action(s)      \
    \   Next State\n     -----                  ---------         ----------\n   \
    \  Receive CONTACT        DLC_CONTACT       CONTACT_PENDING\n     Receive HALT_DL\
    \        DLC_HALT_DL       HALT_PENDING\n     Receive REACH_ACK      If Connected:\
    \     If Connected:\n                            Send CONTACT      CONNECT_PENDING,\n\
    \                                              else: CIRCUIT_ESTABLISHED\n   \
    \  Receive XIDFRAME       DLC_XID\n     Receive DGRMFRAME      DLC_DGRM\n    \
    \ Receive DATAFRAME      DLC_DGRM\n     DLC_CONTACTED          DLC_ENTER_BUSY\n\
    \     DLC_ERROR              Send HALT_DL      DISCONNECT_PENDING\n     DLC_XID\
    \                Send XIDFRAME\n     DLC_DGRM               Send DGRMFRAME\n \
    \  The CIRCUIT_PENDING state is entered by the target Data Link Switch\n   following\
    \ the sending of an ICANREACH message or the sending of a\n   NETBIOS_NR message.\
    \  In this state it is awaiting the reception of a\n   REACH_ACK message from\
    \ the origin Data Link Switch.  If a connection\n   does not exist with the target\
    \ station (i.e., the normal case), the\n   Data Link Switch will enter the CIRCUIT_ESTABLISHED\
    \ state.\n   If the target Data Link Switch happens to receive a SABME command\n\
    \   from the target station while in the CIRCUIT_PENDING state (i.e., a\n   DLC_CONTACTED\
    \ signal received from the DLC), the reception of the\n   REACH_ACK message will\
    \ cause the Data Link Switch to enter the\n   CONNECT_PENDING state and to send\
    \ a CONTACT message to the other Data\n   Link Switch.  Thus the target Data Link\
    \ Switch has assumed the role\n   of the origin Data Link Switch.\n"
- title: 4.2.2.4   CONNECT_PENDING State
  contents:
  - "4.2.2.4   CONNECT_PENDING State\n  Event                 Action(s)          \
    \          Next State\n  -----                 ---------                    ----------\n\
    \  Receive CONTACTED     DLC_EXIT_BUSY                CONNECTED\n  Receive HALT_DL\
    \       DLC_HALT_DL                  HALT_PENDING\n  Receive DGRMFRAME     DLC_DGRM\n\
    \  Receive DATAFRAME     DLC_DGRM\n  DLC_RESET             Send RESTART_DL (See\
    \ note)   CIRCUIT_RESTART\n  DLC_ERROR             Send HALT_DL              \
    \   DISCONNECT_PENDING\n  DLC_DGRM              Send DGRMFRAME\n   The CONNECT_PENDING\
    \ state is entered by the origin Data Link Switch\n   when a DLC_CONTACTED signal\
    \ has been received from the DLC (i.e., a\n   SABME command has been received).\
    \  A CONTACT message is then issued.\n   The state is exited upon the receipt\
    \ of a CONTACTED message from the\n   target Data Link Switch.  If a DLC_RESET\
    \ signal is received, the\n   local data link is restarted and a RESTART_DL message\
    \ is sent to the\n   remote DLS.\n      Note:  The IBM 6611 will also send a Test\
    \ command in order to\n      restart the data link to the station that sent the\
    \ SABME command\n      (i.e., a DLC_START_DL will be issued).\n"
- title: 4.2.2.5   CIRCUIT_ESTABLISHED State
  contents:
  - "4.2.2.5   CIRCUIT_ESTABLISHED State\n  Event                 Action(s)      \
    \              Next State\n  -----                 ---------                 \
    \   ----------\n  Receive CONTACT       DLC_CONTACT                  CONTACT_PENDING\n\
    \  Receive HALT_DL       DLC_HALT_DL                  HALT_PENDING\n  Receive\
    \ XIDFRAME      DLC_XID\n  Receive DGRMFRAME     DLC_DGRM\n  Receive DATAFRAME\
    \     DLC_DGRM\n  DLC_CONTACTED         Send CONTACT                 CONNECT_PENDING\n\
    \                        DLC_ENTER_BUSY\n  DLC_ERROR             Send HALT_DL\
    \                 DISCONNECT_PENDING\n  DLC_DGRM              Send DGRMFRAME\n\
    \  DLC_XID               Send XIDFRAME\n   The CIRCUIT_ESTABLISHED state is entered\
    \ by the origin Data Link\n   Switch from the DISCONNECTED state, and by the target\
    \ Data Link\n   Switch from the CIRCUIT_PENDING state.  The state is exited when\
    \ a\n   connection is started (i.e., DLC receives a SABME command).  The next\n\
    \   state is CONTACT_PENDING for the target Data Link Switch and\n   CONNECT_PENDING\
    \ for the origin Data Link Switch.\n"
- title: 4.2.2.6   CONTACT_PENDING State
  contents:
  - "4.2.2.6   CONTACT_PENDING State\n  Event                 Action(s)          \
    \          Next State\n  -----                 ---------                    ----------\n\
    \  Receive HALT_DL       DLC_HALT_DL                  HALT_PENDING\n  Receive\
    \ RESTART_DL    DLC_HALT_DL                  RESTART_PENDING\n  Receive DGRMFRAME\
    \     DLC_DGRM\n  Receive DATAFRAME     DLC_DGRM\n  DLC_CONTACTED         Send\
    \ CONTACTED               CONNECTED\n  DLC_ERROR             Send HALT_DL    \
    \             DISCONNECT_PENDING\n  DLC_DGRM              Send DGRMFRAME\n   The\
    \ CONTACT_PENDING state is entered by the target Data Link Switch\n   upon the\
    \ receipt of a CONTACT message.  This causes the Data Link\n   Switch to issue\
    \ a DLC_CONTACT signal to the DLC (i.e., DLC sends a\n   SABME command).  This\
    \ state is then exited upon the receipt of a\n   DLC_CONTACTED signal from the\
    \ DLC (i.e., a UA response received).\n   If a RESTART_DL message is received,\
    \ indicating that the remote Data\n   Link Switch has received a DLC_RESET signal,\
    \ the local Data Link\n   Switch will send a DISC command frame on the adjacent\
    \ LAN (i.e.,\n   DLC_HALT_DL signal) and enter the RESTART_PENDING state.\n"
- title: 4.2.2.7   CONNECTED State
  contents:
  - "4.2.2.7   CONNECTED State\n  Event                 Action(s)                \
    \   Next State\n  -----                 ---------                   ----------\n\
    \  Receive HALT_DL       DLC_HALT_DL                 HALT_PENDING\n  Receive RESTART_DL\
    \    DLC_HALT_DL                 RESTART_PENDING\n  Receive DGRMFRAME     DLC_DGRM\n\
    \  Receive INFOFRAME     DLC_INFO\n  Receive DATAFRAME     DLC_DGRM\n  DLC_RESET\
    \             Send RESTART_DL (See note)  CIRCUIT_RESTART\n  DLC_ERROR       \
    \      Send HALT_DL                DISCONNECT_PENDING\n  DLC_DGRM            \
    \  Send DGRMFRAME\n  DLC_INFO              Send INFOFRAME\n   The CONNECTED state\
    \ is entered by the origin Data Link Switch from\n   the CONNECT_PENDING state\
    \ upon the receipt of a CONTACTED message.\n   The CONNECTED state is entered\
    \ by the target Data Link Switch from\n   the CONTACT_PENDING state upon the receipt\
    \ of a DLC_CONTACTED signal.\n   At this time, the target Data Link Switch will\
    \ return a CONTACTED\n   message to the origin Data Link Switch.\n   The CONNECTED\
    \ state is exited usually under one of two conditions: a\n   DLC_ERROR signal\
    \ received from the DLC (e.g., a DISC command received\n   by the local DLC),\
    \ or a HALT_DL message received from the other Data\n   Link Switch (e.g., a DISC\
    \ command received by the remote DLC).\n   A SABME command (i.e., a DLC_RESET\
    \ signal) received by either Data\n   Link Switch will also cause the two Data\
    \ Link Switches to leave the\n   CONNECTED state and eventually restart a new\
    \ circuit.\n      Note:  The IBM 6611 will also send a Test command in order to\n\
    \      restart the data link to the station that sent the SABME command\n    \
    \  (i.e., a DLC_START_DL will be issued).\n   Following the receipt of a reset\
    \ signal, the Data Link Switch will\n   send a RESTART_DL message to the other\
    \ Data Link Switch and will\n   enter the CIRCUIT_RESTART state.  Upon the receipt\
    \ of the RESTART_DL\n   message, the remote Data Link Switch will send a DISC\
    \ command (i.e.,\n   DLC_HALT_DL signal) and enter the RESTART_PENDING state.\n"
- title: 4.2.2.8   CIRCUIT_RESTART State
  contents:
  - "4.2.2.8   CIRCUIT_RESTART State\n  Event                 Action(s)          \
    \   Next State\n  -----                 ---------             ----------\n  Receive\
    \ DL_RESTARTED  If Connected:         If Connected:\n                        Send\
    \ CONTACT          CONNECT_PENDING,\n                                        \
    \      else: CIRCUIT_ESTABLISHED\n  Receive DATAFRAME     DLC_DGRM\n  DLC_ERROR\
    \             Send HALT_DL          DISCONNECT_PENDING\n  DLC_DGRM           \
    \   Send DATAFRAME\n   The CIRCUIT_RESTART state is entered if a DLC_RESET signal\
    \ is\n   received from the local DLC.  This was caused by the receipt of a\n \
    \  SABME command while a connection was currently active.  A DM response\n   will\
    \ be issued to the SABME command and the Data Link Switch will\n   attempt to\
    \ restart the end-to- end circuit.\n   The CIRCUIT_RESTART state is exited through\
    \ one of two transitions.\n   The next state depends upon the time the local DLC\
    \ has reached the\n   contacted state (i.e., a DLC_CONTACTED signal is presented)\
    \ relative\n   to the receipt of the DL_RESTARTED message.  This signal is caused\
    \ by\n   the origin station resending the SABME command that initially caused\n\
    \   the DATA Link Switch to enter the CIRCUIT_RESTART state.  The two\n   cases\
    \ are as follows:\n          1) DL_RESTARTED message received before the\n   \
    \       DLC_CONTACTED signal-  In this case, the\n          CIRCUIT_ESTABLISHED\
    \ state is entered.\n          2) DL_RESTARTED message received after the\n  \
    \        DLC_CONTACTED signal-  In this case, the\n          CONNECT_PENDING state\
    \ is entered.\n"
- title: 4.2.2.9   DISCONNECT_PENDING State
  contents:
  - "4.2.2.9   DISCONNECT_PENDING State\n     Event                     Action(s)\
    \             Next State\n     -----                     ---------           \
    \  ----------\n     Receive DL_HALTED                               DISCONNECTED\n\
    \     Receive HALT_DL           Send DL_HALTED\n     Receive DATAFRAME       \
    \  DLC_DGRM\n     DLC_DGRM                  Send DATAFRAME\n   The DISCONNECT_PENDING\
    \ state is entered when a DLC_ERROR signal is\n   received from the local DLC.\
    \  Upon receipt of this signal, a HALT\n   message is sent.  Once an DL_HALTED\
    \ message is received, the state is\n   exited, and the Data Link Switch enters\
    \ the DISCONNECTED state.\n"
- title: 4.2.2.10  RESTART_PENDING State
  contents:
  - "4.2.2.10  RESTART_PENDING State\n     Event                     Action(s)   \
    \          Next State\n     -----                     ---------             ----------\n\
    \     Receive DATAFRAME         DLC_DGRM\n     DLC_DL_HALTED (See note)  Send\
    \ DL_RESTARTED     CIRCUIT_ESTABLISHED\n     DLC_ERROR                 Send HALT_DL\
    \          DISCONNECT_PENDING\n     DLC_DGRM                  Send DATAFRAME\n\
    \   The RESTART_PENDING state is entered upon the receipt of a RESTART_DL\n  \
    \ message from the remote DLS while the local Data Link Switch is in\n   either\
    \ the CONTACT_PENDING state or the CONNECTED state.  These cause\n   the local\
    \ DLC to issue a DISC command.  Upon the receipt of the UA\n   response (DLC_DL_HALTED),\
    \ the data link is restarted, a DL_RESTARTED\n   message is returned to the remote\
    \ DLS, and the CIRCUIT_ESTABLISHED\n   state is entered.\n      Note:  The IBM\
    \ 6611 will send a Test command in order to restart\n      the data link to the\
    \ target station (i.e., a DLC_START_DL will be\n      issued) prior to sending\
    \ the DL_RESTARTED message.\n"
- title: 4.2.2.11  HALT_PENDING State
  contents:
  - "4.2.2.11  HALT_PENDING State\n     Event                     Action(s)      \
    \    Next State\n     -----                     ---------          ----------\n\
    \     Receive DATAFRAME         DLC_DGRM\n     DLC_DL_HALTED             Send\
    \ DL_HALTED     DISCONNECTED\n     DLC_ERROR                 Send DL_HALTED  \
    \   DISCONNECTED\n     DLC_DGRM                  Send DATAFRAME\n   The HALT_PENDING\
    \ state is entered upon the receipt of a HALT_DL\n   message.  This causes the\
    \ local DLC to issue a DISC command.  Upon\n   the receipt of the UA response\
    \ (DLC_DL_HALTED), a DL_HALTED message\n   is returned to the remote DLS and the\
    \ DISCONNECTED state is entered.\n"
- title: 4.3. NetBIOS Datagrams
  contents:
  - "4.3. NetBIOS Datagrams\n   The NetBIOS protocols use a number of UI frames for\
    \ directory\n   services and the transmission of datagrams.  Most of these frames\
    \ are\n   directed to a group MAC address (GA) with the routing information\n\
    \   field indicating spanning tree explorer (STE).  Two of the frames,\n   NB_Add_Name_Response\
    \ and NB_Status_Response, are directed to a\n   specific MAC address with the\
    \ routing information field indicating a\n   specifically routed frame (SRF).\
    \  The handling of these frames is\n   summarized in the following table.\n  \
    \   Event                        Action(s)          Comment\n     -----      \
    \                  ---------          -------\n     DLC_DGRM (NB Group Address):\
    \ Send NETBIOS_ANQ   Transmitted to all\n          NB_Add_Name_Query         \
    \                 remote DLS\n     DLC_DGRM (Specific Address): Send NETBIOS_ANR\
    \   Transmitted to\n          NB_Add_Name_Response                       specific\
    \ DLS\n     DLC_DGRM (Specific Address): Send DATAFRAME     Transmitted to all\n\
    \          NB_Status_Response                         remote DLS\n     DLC_DGRM\
    \ (NB Group Address): Send DATAFRAME     Transmitted to all\n          NB_Name_in_Conflict,\
    \                       remote DLS\n          NB_Add_Group_Name_Query,\n     \
    \     NB_Datagram,\n          NB_Datagram_Broadcast,\n          NB_Status_Query,\n\
    \          NB_Terminate_Trace\n                      Table 5.  NetBIOS DLC Frames\n\
    \   The above actions do not apply in the following states:\n   CIRCUIT_ESTABLISHED,\
    \ CONTACT_PENDING, CONNECT_PENDING, CONNECTED, and\n   CIRCUIT_PENDING.  The handling\
    \ of the remaining two UI frames used by\n   NetBIOS systems, NB_Name_Query and\
    \ NB_Name_Recognized, are documented\n   as part of the DLS state machine in the\
    \ previous section (i.e.,\n   DISCONNECTED and RESOLVE_PENDING states).  Furthermore,\
    \ the handling\n   of NetBIOS datagrams (i.e., NB_Datagram) sent to a specific\
    \ MAC\n   address is also governed by the DLS state machine.\n      Note:  The\
    \ IBM 6611 will also issue Test frames during the\n      exchange of the NetBIOS,\
    \ NB_Name_Query and NB_Name_Recognized.\n      This exchange of protocol data\
    \ units occurs during the start of a\n      data link and is used to determine\
    \ the routing information.  Most\n      other implementations of NetBIOS will\
    \ use the\n      NB_Name_Query/NB_Name_Recognized exchange to determine routes\
    \ in\n      conjunction with resolving the NetBIOS names.  These differences\n\
    \      are not reflected in the SSP protocols.\n   The handling of the NetBIOS\
    \ specific SSP messages is given in the\n   following table.\n     Event     \
    \      Action(s)                  Comment\n     -----           ---------    \
    \              -------\n     NETBIOS_ANQ     DLC_DGRM:                  Routed\
    \ STE\n                         NB_Add_Name_Query      (NB Group Address)\n  \
    \   NETBIOS_ANR     DLC_DGRM:                  Routed SRF\n                  \
    \       NB_Add_Name_Response   (Specific MAC Address)\n     NETBIOS_NQ      DLC_DGRM:\
    \                  Routed STE\n                         NB_Name_Query        \
    \  (NB Group Address)\n     NETBIOS_NR      DLC_DGRM:                  Routed\
    \ SRF\n                         NB_Name_Recognized     (Specific MAC Address)\n\
    \     DATAFRAME       DLC_DGRM                   Routed STE\n                \
    \                                (If NB_Status_Response:\n                   \
    \                             Specific MAC Address\n                         \
    \                       Else: NB Group Address)\n                     Table 6.\
    \  NetBIOS SSP Messages\n   The above actions apply to all DLS states.  The handling\
    \ of NetBIOS\n   datagrams sent within DGRMFRAME messages is governed by the DLS\
    \ state\n   machine.  The DGRMFRAME message type is employed instead of the\n\
    \   DATAFRAME message type once the end-to-end circuit has been\n   established.\
    \  At that time, the message is addressed according to the\n   pair of Circuit\
    \ IDs in the message header instead of relying upon the\n   MAC address information\
    \ in the token ring header.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Randall Campbell, David Miller, Gene Cox, Ravi Periasamy,\
    \ and The\n   Ghost of Christmas Past.\n"
- title: References
  contents:
  - "References\n     1) ISO 8802-2/IEEE Std 802.2 International Standard,\n     \
    \   Information Processing Systems, Local Area Networks, Part 2:\n        Logical\
    \ Link Control, December 31, 1989\n     2) The NETBIOS Frames Protocol, IBM Local\
    \ Area Technical\n        Reference, SC30-3383-03, Chapter 5, December 1990\n\
    \     3) ISO/IEC DIS 10038 DAM 2, MAC Bridging, Source Routing\n        Supplement,\
    \ December 1991\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Roy C. Dixon\n   IBM Networking Systems\n   Department\
    \ B57, Building 060\n   P.O. Box 12195\n   Research Triangle Park, NC 27709\n\
    \   Phone: (919) 543-3380\n   EMail: rcdixon@ralvmg.vnet.ibm.com\n   David M.\
    \ Kushi\n   IBM Research Division\n   T. J. Watson Research Center\n   Room H0-C07\n\
    \   30 Saw Mill River Road\n   Hawthorne, NY 10532\n   Phone: (914) 784-7815\n\
    \   EMail: kushi@watson.ibm.com\n   Note: Any questions or comments relative to\
    \ the contents of this RFC\n   should be sent to the following Internet address:\n\
    \   dlsw@ralvma.vnet.ibm.com.  This address will be used to coordinate\n   the\
    \ handling of responses.\n"
