- title: __initial_text__
  contents:
  - '                          SNMP over AppleTalk

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   This memo describes the method by which the Simple Network Management\n\
    \   Protocol (SNMP) as specified in [1] can be used over AppleTalk\n   protocols\
    \ [2] instead of the Internet UDP/IP protocol stack.  This\n   specification is\
    \ useful for network elements which have AppleTalk\n   support but lack TCP/IP\
    \ support.  It should be noted that if  a\n   network element supports multiple\
    \ protocol stacks, and UDP is\n   available, it is the preferred network layer\
    \ to use.\n   SNMP has been successful in managing Internet capable network\n\
    \   elements which support the protocol stack at least through UDP, the\n   connectionless\
    \ Internet transport layer protocol.  As originally\n   designed, SNMP is capable\
    \ of running over any reasonable transport\n   mechanism (not necessarily a transport\
    \ protocol) that supports bi-\n   directional flow and addressability.\n   Many\
    \ non-Internet capable network elements are present in networks.\n   Some of these\
    \ elements are equipped with the AppleTalk protocols.\n   One method of using\
    \ SNMP to manage these elements is to define a\n   method of transmitting an SNMP\
    \ message inside an AppleTalk protocol\n   data unit.\n   This RFC is the product\
    \ of the SNMP over a Multi-protocol Internet\n   Working Group of the Internet\
    \ Engineering Task Force (IETF).\n"
- title: 1. Background
  contents:
  - "1. Background\n   The AppleTalk equivalent of UDP (and IP) is DDP (Datagram Delivery\n\
    \   Protocol).  The header field of a DDP datagram includes (at least\n   conceptually)\
    \ source and destination network numbers, source and\n   destination node numbers,\
    \ and source and destination socket numbers.\n   Additionally, DDP datagrams include\
    \ a \"protocol type\" in the header\n   field which may be used to further demultiplex\
    \ packets.  The data\n   portion of a DDP datagram may contain from zero to 586\
    \ octets.\n   AppleTalk's Name Binding Protocol (NBP) is a distributed name-to-\n\
    \   address mapping protocol.  NBP names are logically of the form\n   \"object:type@zone\"\
    , where \"zone\" is determined, loosely, by the\n   network on which the named\
    \ entity resides; \"type\" is the kind of\n   entity being named; and \"object\"\
    \ is any string which causes\n   \"object:type@zone\" to be unique in the AppleTalk\
    \ internet.\n   Generally, \"object\" also helps an end-user determine which instance\n\
    \   of a specific type of service is being accessed.  NBP names are not\n   case\
    \ sensitive.  Each field of the NBP name (\"object\", \"type\", and\n   \"zone\"\
    ) is  limited to 32 octets.  The octets usually consist of\n   human-readable\
    \ ascii characters.\n"
- title: 2. Specification
  contents:
  - "2. Specification\n   SNMP REQUESTS encapsulated according to this standard will\
    \ be sent to\n   DDP socket number 8; they will contain a DDP protocol type of\
    \ 8.  The\n   data octets of the DDP datagram will be a standard SNMP message\
    \ as\n   defined in [1].\n   SNMP RESPONSES encapsulated according to this standard\
    \ will be sent\n   to the DDP socket number which originated the corresponding\
    \ SNMP\n   request; they will contain a DDP protocol type of 8.  The data octets\n\
    \   of the DDP datagram will be a standard SNMP message as defined in\n   [1].\
    \  (Note:  as stated in [1], section 4.1, the *source* address of\n   a RESPONSE\
    \ PDU will be the same as the *destination* address of the\n   corresponding REQUEST\
    \ PDU.)\n   A network element which is capable of responding to SNMP REQUESTS\n\
    \   over AppleTalk must advertise this capability via the AppleTalk Name\n   Binding\
    \ Protocol using an NBP type of \"SNMP Agent\" (hex 53, 4E, 4D,\n   50, 20, 41,\
    \  67, 65, 6E, 74).\n   A network management station which is capable of receiving\
    \ an SNMP\n   TRAP must advertise this capability via the AppleTalk Name Binding\n\
    \   Protocol using an NBP type of \"SNMP Trap Handler\" (hex 53, 4E, 4D,\n   50,\
    \ 20, 54, 72, 61, 70, 20, 48, 61, 6E, 64, 6C, 65, 72).\n   SNMP TRAPS encapsulated\
    \ according to this standard will be sent to\n   DDP socket number 9; they will\
    \ contain a DDP protocol type of 8.  The\n   data octets of the DDP datagram will\
    \ be a standard SNMP message as\n   defined in [1].  The agent-addr field of the\
    \ Trap-PDU must be filled\n   with a NetworkAddress of all zeros (the unknown\
    \ IP address). Thus, to\n   identify the trap sender, the name and value of the\
    \ nbpObject and\n   nbpZone corresponding to the nbpEntry with the nbpType equal\
    \ to \"SNMP\n   Agent\" should be included in the variable-bindings of any trap\
    \ that\n   is sent [3].\n   The NBP name for both an agent and a trap handler\
    \ should be stable -\n   it should not change any more often than the IP address\
    \ of a typical\n   TCP/IP end system changes.  It is suggested that the NBP name\
    \ be\n   stored in some form of stable storage (PRAM, local disk, etc.).\n"
- title: 3. Discussion of AppleTalk Addressing
  contents:
  - '3. Discussion of AppleTalk Addressing

    '
- title: 3.1 Introduction
  contents:
  - "3.1 Introduction\n   The AppleTalk protocol suite has certain features not manifest\
    \ in the\n   standard TCP/IP suite.  Its unique naming strategy and the dynamic\n\
    \   nature of address assignment can cause problems for SNMP management\n   stations\
    \ that wish to manage AppleTalk networks.  TCP/IP end nodes,\n   as of this writing,\
    \ have an associated IP address which distinguishes\n   each from the other. \
    \ AppleTalk end nodes, in general, have no such\n   characteristic.  The network\
    \ level address, while often relatively\n   stable, can change at every reboot\
    \ (or more frequently).\n   Thus, a thrust of this proposal is that a \"name\"\
    \ (as opposed to an\n   \"address\") for an end system be used as the identifying\
    \ attribute.\n   This is the equivalent, when dealing with TCP/IP end nodes, of\
    \ using\n   the domain name.  While the mapping (DNS name, IP address) is more\n\
    \   stable than the mapping (NBP name, DDP address), the mapping (DNS\n   name,\
    \ IP address) is not required to exist (e.g., hosts with no host\n   name, only\
    \ an IP address). In contrast, all AppleTalk nodes that\n   implement this specification\
    \ are required to respond to NBP lookups\n   and confirms (e.g., implement the\
    \ NBP protocol stub), which\n   guarantees that the mapping (NBP name, DDP address)\
    \ will exist.\n   In determining the SNMP name to register for an agent, it is\n\
    \   suggested that the SNMP name be a name which is associated with other\n  \
    \ network services offered by the machine.  On a Macintosh system, for\n   example,\
    \ it is suggested that the system name (the \"Macintosh Name\"\n   for System\
    \ 7.0 which is used to advertise file sharing, program-to-\n   program communication,\
    \ and possibly other services) be used as the\n   \"object\" field of the NBP\
    \ name.  This name has AppleTalk\n   significance, and is tightly bound to the\
    \ network's concept of a\n   given system's identity.\n   NBP lookups, which are\
    \ used to turn NBP names into DDP addresses, can\n   cause large amounts of network\
    \ traffic as well as consume CPU\n   resources. It is also the case that the ability\
    \ to perform an NBP\n   lookup is sensitive to certain network disruptions (such\
    \ as zone\n   table inconsistencies, etc.) which would not prevent direct AppleTalk\n\
    \   communications between a management station and an agent.\n   Thus, it is\
    \ recommended that NBP lookups be used infrequently with\n   the primary purpose\
    \ being to create a cache of name-to-address\n   mappings. These cached mappings\
    \ should then be used for any further\n   SNMP requests. It is recommended that\
    \ SNMP management stations\n   maintain this cache between reboots.  This caching\
    \ can help minimize\n   network traffic, reduce CPU load on the network, and allow\
    \ for (some\n   amount of) network trouble shooting when the basic name-to-address\n\
    \   translation mechanism is broken.\n"
- title: '3.2 How To Acquire NBP names:'
  contents:
  - "3.2 How To Acquire NBP names:\n   A management station may have a pre-configured\
    \ list of names of\n   agents to manage. A management station may allow for an\
    \ interaction\n   with an operator in which a list of manageable agents is acquired\n\
    \   (via NBP) and presented for the operator to choose which agents\n   should\
    \ be managed by that management station.  Finally, a management\n   station may\
    \ manage all manageable agents in a set of zones or\n   networks.\n   An agent\
    \ must be configured with the name of a specific management\n   station or group\
    \ of management stations before sending SNMP traps.\n   In the absence of any\
    \ such configured information, an agent is NOT to\n   generate any SNMP traps.\
    \  In particular, an agent is NEVER to\n   initiate a wildcard NBP lookup to find\
    \ a management station to\n   receive a trap.  All NBP lookups generated by an\
    \ agent must be fully\n   specified.  Note, however, that this does not apply\
    \ to a\n   configuration utility that might be associated with such an agent.\n\
    \   Such a utility may well allow a user to navigate around the network\n   to\
    \ select a management station or stations to receive SNMP traps from\n   the agent.\n"
- title: '3.3 When To Turn NBP Names Into Addresses:'
  contents:
  - "3.3 When To Turn NBP Names Into Addresses:\n   When SNMP agents or management\
    \ stations use a cache entry to address\n   an SNMP packet, they should attempt\
    \ to confirm the mapping if it\n   hasn't been confirmed in T1 seconds.  This\
    \ cache entry lifetime, T1,\n   has a minimum, default value of 60 seconds.  This\
    \ value should be\n   configurable.\n   A management station may decide to prime\
    \ its cache of names prior to\n   actually sending any SNMP requests to any given\
    \ agent.  In general,\n   it is expected that a management station may want to\
    \ keep certain\n   mappings \"more current\" than other mappings.  In particular,\
    \ those\n   nodes which represent the network infrastructure (routers, etc.) may\n\
    \   be deemed \"more important\" by the management station.\n   Note, however,\
    \ that a long-running management station starting up and\n   reading a configuration\
    \ file containing a number of NBP names should\n   not attempt to prime its cache\
    \ all at once.  It should, instead,\n   issue the resolutions over an extended\
    \ period of time (perhaps in\n   some pre-determined or configured priority order).\
    \  Each resolution\n   might, in fact, be a wildcard lookup in a given zone.\n\
    \   An agent should NEVER prime its cache.  It should do NBP lookups (or\n   confirms)\
    \ only when it needs to send an SNMP trap to a given\n   management station. \
    \ An agent does not need to confirm a cache entry\n   to reply to a request.\n"
- title: '3.4 How To Turn NBP Names Into Addresses:'
  contents:
  - "3.4 How To Turn NBP Names Into Addresses:\n   If the only piece of information\
    \ available is the NBP name, then an\n   NBP lookup should be performed to turn\
    \ that name into a DDP address.\n   However, if there is a piece of stale information,\
    \ it can be used as\n   a hint to perform an NBP confirm (which sends a unicast\
    \ to the\n   network address which is presumed to be the target of the name\n\
    \   lookup) to see if the stale information is, in fact, still valid.\n   An NBP\
    \ name to DDP address mapping can also be confirmed implicitly\n   using only\
    \ SNMP transactions.  If a management station is sending a\n   get-request, it\
    \ can add a request, in the same packet, for the\n   destination's nbpObject and\
    \ nbpZone corresponding to the nbpEntry\n   with the nbpType equal to \"SNMP Agent\"\
    \ [3].  The source DDP address\n   can be gleaned from the reply and used with\
    \ the nbpObject and nbpZone\n   returned to confirm the cache entry.\n   The above\
    \ notwithstanding, for set-requests, there is a race\n   condition that can occur\
    \ where an SNMP request may go to the wrong\n   agent (because the old node went\
    \ down and a new node came up with the\n   same DDP address.)  This is problematic\
    \ becase the wrong agent might\n   generate a response packet that the management\
    \ station could not\n   distinguish from a reply from the intended agent.  In\
    \ the future,\n   when SNMP security is implemented, each packet is authenticated\
    \ at\n   the destination, and the reply should implicitly confirm the validity\n\
    \   of the cache entry used and prevent this race condition.\n"
- title: '3.5 What if NBP is broken:'
  contents:
  - "3.5 What if NBP is broken:\n   Under some circumstances, there may be connectivity\
    \ between a\n   management station and an agent, but the NBP machinery required\
    \ to\n   turn an NBP name into a DDP address may be broken.  Examples of\n   failures\
    \ which would cause this include:  NBP FwdReq (forward NBP\n   lookup onto locally\
    \ attached network) broken at a router on the\n   network containing the agent;\
    \ NBP BrRq (NBP broadcast request)\n   mechanism broken at a router on the network\
    \ containing the managment\n   station (because of a zone table mis-configuration,\
    \ for example); or\n   NBP broken in the target node.\n   A management station\
    \ which is dedicated to AppleTalk management might\n   choose to alleviate some\
    \ of these failures by implementing the router\n   portion of NBP within the management\
    \ station itself.  For example,\n   the management station might already know\
    \ all the zones on the\n   AppleTalk internet and the networks on which each zone\
    \ appears.\n   Given an NBP lookup which fails, the management station could send\
    \ an\n   NBP FwdReq to the network in which the agent was last located.  If\n\
    \   that failed, the station could then send an NBP LkUp (an NBP lookup\n   packet)\
    \ as a directed (DDP) multicast to each network number on that\n   network.  Of\
    \ the above (single) failures, this combined approach will\n   solve the case\
    \ where either the local router's BrRq to NBP FwdReq\n   mechanism is broken or\
    \ the remote router's NBP FwdReq to NBP LkUp\n   mechanism is broken.\n"
- title: 4. Acknowledgements
  contents:
  - "4. Acknowledgements\n   Some of the boilerplate in this memo is copied from [4],\
    \ [5], and\n   [6].  The Apple-IP Working Group was instrumental in defining this\n\
    \   document.  Their support and work was greatly appreciated.\n"
- title: 5. References
  contents:
  - "5. References\n   [1] Case, J., Fedor, M., Schoffstall, M., and J. Davin, \"\
    A Simple\n       Network Management Protocol (SNMP)\", STD 15, RFC 1157, SNMP\n\
    \       Research, Performance Systems International, Performance Systems\n   \
    \    International, MIT Laboratory for Computer Science, May 1990.\n   [2] Sidhu,\
    \ G., Andrews, R., and A. Oppenheimer, \"Inside AppleTalk\n       (Second Edition)\"\
    , Addison-Wesley, 1990.\n   [3] Waldbusser, S., \"AppleTalk Management Information\
    \ Base\", RFC\n       1243, Carnegie Mellon University, August 1991.\n   [4] Schoffstall,\
    \ M., Davin, C., Fedor, M., and J. Case, \"SNMP over\n       Ethernet\", RFC 1089,\
    \ Rensselaer Polytechnic Institute, MIT\n       Laboratory for Computer Science,\
    \ NYSERNet, Inc., University of\n       Tennessee at Knoxville, February 1989.\n\
    \   [5] Bostock, S., \"SNMP over IPX\", RFC 1420, Novell, Inc., March 1993.\n\
    \   [6] Piscitello, D., \"Guidelines for the Specification of Protocol\n     \
    \  Support of the SNMP\", Work in Progress.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   Security issues are discussed in section 3.4.\n"
- title: 7. Authors' Addresses
  contents:
  - "7. Authors' Addresses\n   Greg Minshall\n   Novell, Inc.\n   1340 Treat Blvd,\
    \ ste. 500\n   Walnut Creek, CA  94596\n   Phone: 510 947-0998\n   Fax:   510\
    \ 947-1238\n   EMail:  minshall@wc.novell.com\n   Mike Ritter\n   Apple Computer,\
    \ Inc.\n   10500 North De Anza Boulevard, MS: 35-K\n   Cupertino, California 95014\n\
    \   Phone: 408 862-8088\n   Fax:   408 862-1159\n   EMail: MWRITTER@applelink.apple.com\n"
