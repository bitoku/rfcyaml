- title: __initial_text__
  contents:
  - '              Application REQuested IP over ATM (AREQUIPA)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n   This RFC has not had the benefit of the rigorous\
    \ peer review that is\n   part of the process in an IETF working group.  The technology\
    \ it\n   describes has been implemented and is now undergoing testing. It\n  \
    \ would be wise to analyze the results of this testing as well as to\n   understand\
    \ alternatives before committing to this approach for IP\n   over ATM with QoS\
    \ guarantees.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a method for allowing ATM-attached hosts\
    \ that\n   have direct ATM connectivity to set up end-to-end IP over ATM\n   connections\
    \ within the reachable ATM cloud, on request from\n   applications, and for the\
    \ exclusive use by the requesting\n   applications. This allows the requesting\
    \ applications to benefit in a\n   straightforward way from ATM's inherent ability\
    \ to guarantee the\n   quality of service (QoS).\n   Given a mapping from service\
    \ classes, as defined by INTSERV[6], to\n   ATM traffic descriptors, Arequipa\
    \ can be used to implement integrated\n   services over ATM link layers. Usage\
    \ of Arequipa to provide\n   integrated services even if ATM is only available\
    \ for intermediate\n   links is not discussed in this document but should be straight-\n\
    \   forward.\n   The major advantage of using an approach like Arequipa is that\
    \ it\n   needs to be implemented only on the hosts using it. It requires no\n\
    \   extra service (eg. NHRP or RSVP) to be deployed on the switches or\n   routers\
    \ of the ATM cloud.\n   We discuss the implementation of Arequipa for hosts running\
    \ IPv4 and\n   IPv6. As an illustration, we also discuss how World-Wide-Web\n\
    \   applications can use Arequipa to deliver documents with a guaranteed\n   quality\
    \ of service.\n   In particular we show how\n     - Arequipa can be implemented\
    \ in IPv4 by slightly modifying the\n     - Arequipa can be implemented in IPv6[3]\
    \ by the appropriate use of\n       flow labels and the extension of the neighbour\
    \ cache,\n     - Arequipa can be used in the Web by adding extra information in\n\
    \       the headers of HTTP requests and responses.\n   Finally, we address safety\
    \ and security implications.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   QoS guarantees are important for delivery of multi-media\
    \ data and\n   commercial services on the Internet. When two applications on\n\
    \   machines running IP over ATM need to transfer data, all the necessary\n  \
    \ gears to guarantee QoS can be found in the ATM layer.  We consider\n   the case\
    \ where it is desired to use end-to-end ATM connections\n   between applications\
    \ residing on ATM hosts that have end-to-end ATM\n   connectivity.\n   Opening\
    \ direct ATM connections between two applications is possible,\n   but then the\
    \ already available transport protocols, like TCP, can not\n   be reused.\n  \
    \ This is why we propose Application REQuested IP over ATM (AREQUIPA).\n   Arequipa\
    \ allows applications to request that two machines be\n   connected by a direct\
    \ ATM connection with given QoS at the link\n   level. Arequipa makes sure that\
    \ only data from the applications that\n   requested the connection actually goes\
    \ through that connection. After\n   setup of the Arequipa connection, the applications\
    \ can use the\n   standard IP protocol suite to exchange data.\n"
- title: 2. API semantics
  contents:
  - "2. API semantics\n   We now define a semantical API for Arequipa. Note that an\
    \ actual API\n   may perform additional functions (eg.  mapping of a given service\n\
    \   specification to ATM traffic descriptors)\n   We define the three new API\
    \ functions for the TCP/IP stack:\n   Arequipa_preset (socket_descriptor, destination\
    \ IP address,\n                    destination protid/port, destination ATM Address,\n\
    \                    ATM service and QoS parameters)\n     Arequipa_preset establishes\
    \ or prepares establishment of a new ATM\n     connection to the given address\
    \ with the given ATM service and QoS.\n     It makes sure that any further data\
    \ sent on the specified socket\n     will use the new ATM connection.\n     Arequipa_preset\
    \ is invoked before a TCP/IP connection is\n     established or before sending\
    \ data(grams), respectively. (Active\n     open.)\n   Arequipa_expect (socket_descriptor,\
    \ allow)\n     Arequipa_expect prepares the system to use an expected incoming\n\
    \     Arequipa connection for outgoing traffic of a given socket. If\n     allow\
    \ equals TRUE then, as soon as the socket receives data from an\n     incoming\
    \ Arequipa connection, all its return traffic is sent over\n     that Arequipa\
    \ connection. If allow equals FALSE the traffic from\n     that socket is always\
    \ sent over the standard IP route. Note that\n     Arequipa_expect is only applicable\
    \ to connection oriented sockets,\n     eg. TCP sockets or connected UDP sockets.\n\
    \     Arequipa_expect is invoked by the peer which is expecting\n     data(grams)\
    \ or accepting connections. (Passive open.) It is\n     typically called immediately\
    \ after a socket has been created. It\n     may also be called when a data transfer\
    \ is already going on.\n   Arequipa_close (socket_descriptor)\n     Closes the\
    \ corresponding ATM connection. Any further traffic\n     between the endpoints\
    \ is routed like other traffic. Arequipa_close\n     is implied when closing the\
    \ socket.\n   Note that the use of Arequipa_expect or _preset only reflects the\n\
    \   direction of the initial dialog in the Arequipa connection. Actual\n   data\
    \ can flow in both directions.\n   An actual implementation may use less arguments\
    \ for Arequipa_preset\n   if some of the information is already passed by other\
    \ networking\n   operations.\n"
- title: 3. Implementation with IPv4
  contents:
  - "3. Implementation with IPv4\n   To implement Arequipa with IPv4, ATMARP must\
    \ be able not only to\n   handle associations of ATM addresses and IP addresses,\
    \ but also\n   associations of one ATM address with an IP address plus endpoint\n\
    \   (socket). This allows to dedicate an ATM connection for the traffic\n   between\
    \ two endpoints.\n   For the active open, a destination ATM address must be associated\n\
    \   with a socket. In systems using per-socket route and ARP caching,\n   this\
    \ can be done by presetting the caches with the appropriate\n   values. Establishment\
    \ of the SVC is delegated to ATMARP. Care must be\n   taken that routing and ARP\
    \ information obtained through Arequipa does\n   not leak to other parts of the\
    \ system.\n   For the passive open, an incoming SVC must be associated with the\n\
    \   socket that terminates the corresponding connection or data flow.\n   Most\
    \ of this functionality is already available in the existing\n   protocol stack.\
    \ To avoid an incoming Arequipa SVC to be mistaken for\n   an IP-over-ATM SVC,\
    \ the setup message uses a specific Broadband High\n   Layer Identifier (BHLI),\
    \ see below. Seeing the BHLI, ATMARP knows\n   that the SVC is of the dedicated\
    \ type. The socket to which it has to\n   be associated is identified as soon\
    \ as a datagram is received through\n   the SVC. If an Arequipa_expect has been\
    \ done for that socket, then\n   the SVC is used for all return traffic of that\
    \ socket.\n   If application A1 on host H1 wants a direct ATM connection to\n\
    \   application A2 on host H2 it does the following:\n   Both applications first\
    \ get in contact using the standard IP over ATM\n   to exchange the ATM address\
    \ of the receiver (atm2) and the endpoints\n   (S1, S2) (i.e. protocol and port\
    \ number; we assume that a protocol\n   with ports, such as TCP or UDP, is used)\
    \ at both hosts between which\n   communication will occur. How this is performed\
    \ depends on the\n   application protocols. In Section 5 we give an example for\
    \ HTTP.\n   A2 invokes Arequipa_expect to indicate that it wants to make use of\n\
    \   an expected incoming ATM connection.\n   A1 invokes Arequipa_preset to open\
    \ or prepare opening of an ATM\n   connection to H2 using ATM address atm2 and\
    \ the QoS desired by A1 as\n   soon as data is sent through S1. The connection\
    \ is associated with S1\n   such that no other traffic  (e.g. generated by other\
    \ applications)\n   uses the new ATM connection.\n   An Arequipa connection shall\
    \ be signaled by using the procedures and\n   codings described in RFC1755 [7],\
    \ with the addition that the BHLI\n   information element be included in the SETUP\
    \ message, with the\n   following coding:\n    ------------------------------------------------------------------\n\
    \    | bb_high_layer_information                                      |\n    ------------------------------------------------------------------\n\
    \    |  high_layer_information_type    3            (vendor-specific  |\n    |\
    \                                               application id.) |\n    |  high_layer_information\
    \         00-60-D7     (EPFL OUI)        |\n    |                            \
    \     01-00-00-01  (Arequipa)        |\n    ------------------------------------------------------------------\n\
    \   As soon as data arrives from H1:S1 at H2:S2, the ATM connection the\n   data\
    \ has arrived on is identified as the dedicated connection for\n   this data flow\
    \ and S2 is changed to exclusively send on that\n   connection.\n   From this\
    \ point on all traffic exchanged between S1 of A1 and S2 of\n   A2 will use the\
    \ new ATM connection with the desired QoS.\n   Note that it is possible for H1\
    \ and H2 to belong to the same LIS [2]\n   and still decide to use an Arequipa\
    \ connection between applications,\n   in addition to one or several other, non-Arequipa\
    \ ATM connections\n   between hosts H1 and H2. There may also exist several Arequipa\n\
    \   connections between two hosts.\n"
- title: 4. Implementation with IPv6
  contents:
  - "4. Implementation with IPv6\n   With IPv6, sources take advantage of the Flow\
    \ Label field in the IPv6\n   header [3].\n   We assume as in [4] that the conceptual\
    \ host model uses, among\n   others, a neighbour cache and a destination cache.\
    \ The destination\n   cache holds entries about destinations to which traffic\
    \ has been sent\n   recently, while the neighbour cache holds entries about neighbours\
    \ to\n   which traffic has been sent recently. With the classical IP over ATM\n\
    \   model [1], entries in the neighbour cache can only refer to systems\n   in\
    \ the same LIS; we propose to go beyond this limitation and allow\n   systems\
    \ beyond the LIS to appear there and be treated as neighbours,\n   in the case\
    \ where a direct link level connection (here, an ATM\n   connection) can be established.\n\
    \   The destination is keyed in [4] by the IP (destination) address. We\n   replace\
    \ this by the IP (destination) address and flow label.\n   We assume that with\
    \ IPv6, a mechanism will be provided for\n   applications to request flow labels\
    \ which, at the host, form a unique\n   flow-label/destination-address pair. This\
    \ will prevent two different\n   flows which go to the same destination from accidentally\
    \ using the\n   same flow label. Such a uniqueness requirement is also desirable\
    \ for\n   other applications which rely on flow-label/destination-address\n  \
    \ pairs, like for example RSVP.\n   A typical scenario is:\n   Application A1\
    \ on host H1 and application A2 on host H2 first get in\n   contact using the\
    \ standard IP over ATM to exchange their ATM address\n   (atm1, atm2) and to define\
    \ a protocol, port number pair (S1, S2) and\n   flow labels (L1, L2) for the communication\
    \ over the ATM connection.\n   (We assume that a protocol with ports, such as\
    \ TCP or UDP, is used).\n   How this is performed depends on the application protocols.\
    \ In\n   Section 5 we give an example for HTTP.\n   A2 tells its networking entity\
    \ that it wants to send its outgoing\n   packets with flow label L2 over an expected\
    \ incoming ATM connection.\n   A1 tells its data link entity to open an ATM connection\
    \ to H2 using\n   ATM address atm2, with the QoS desired by A1. The connection\
    \ is\n   associated with L1 and L2 as explained below so that no other traffic\n\
    \   generated by other applications uses the new ATM connection.\n   From this\
    \ point on all traffic exchanged between applications A1 on\n   H1 and application\
    \ A2 on H2 will use this ATM connection.\n   An example of destination and neighbour\
    \ cache entries at H1 is given\n   below.\n  Destination Cache\n           IPAddr\
    \    flowLabel   neighbourCache   pathMTU\n            H2         L1         \
    \ ptr1             (1)\n            H2         *           ptr2             (2)\n\
    \  Neighbour Cache\n   IPAddr  linkLayerAddr  isRouter  reachabilityState  invalidationTimer\n\
    \   H2      v2              no        (3)                t2\n   R3      v3   \
    \           yes       REACHABLE          t3\n   In the example, the route to destination\
    \ H2 for all traffic other\n   than the one using the ATM connection requested\
    \ between application\n   A1 and A2 uses the default route (perhaps set up by\
    \ the classical IP\n   model), with router R3 as the next hop; v2 is a pointer\
    \ to an ATM\n   interface and a VPCI/VCI that identifies the Arequipa connection.\n\
    \   Similarly, v3 points to the ATM connection to router R3. ptr1 points\n   to\
    \ the first line in Neighbour Cache, and ptr2 to the second one.\n   Path MTUs\
    \ (1) and (2) are obtained by ATM signaling; they may be\n   different. Reachability\
    \ state (3) is determined as usual by the\n   reachability protocol [4].\n   Host\
    \ H1 must restrict the use of this ATM connection to datagrams\n   with flow label\
    \ L1. Other traffic from H1 to H2 must use the generic\n   entry in the destination\
    \ table (flow label = \"*\").  Host H1 must\n   restrict the use of flow label\
    \ L1 for destination H2 to traffic\n   generated by application A1 on port S1.\
    \ (The same holds by analogy\n   for host H2).\n   On the receiving side, host\
    \ H2 may use label L1 for routing\n   internally the IP packets to the appropriate\
    \ entity.\n"
- title: '5. Example: Arequipa for the Web'
  contents:
  - "5. Example: Arequipa for the Web\n   This is a brief explanation of how Web [5]\
    \ servers and browsers can\n   use Arequipa to transmit documents with a guaranteed\
    \ QoS.\n   What we describe below does not violate the standards of HTML and\n\
    \   HTTP but makes use of their built-in extensibility. The server and\n   client\
    \ we describe can thus interact seamlessly with non-modified\n   servers or clients.\
    \ A similar extension could be used if Web\n   documents were to be exchanged\
    \ using RSVP.\n   Browsers add one extra field in all their requests or responses\
    \ to\n   indicate their ATM address. Web documents are extended with meta\n  \
    \ information to describe the ATM service and corresponding QoS needed\n   to\
    \ transmit them. Note that this information could be in form of an\n   intserv\
    \ flowspec and mapped to ATM traffic descriptors.\n   If a browser always wants\
    \ documents with QoS meta-information to be\n   delivered using Arequipa, it adds\
    \ an additional field in its request\n   to indicate the port on which it is expecting\
    \ the data.\n   If a browser wants to decide whether Arequipa should be used or\
    \ not,\n   it does not give the port on which the server should send the data.\n\
    \   When a server gets a request with an ATM address, it checks whether\n   the\
    \ requested document has QoS meta-information. If this is not the\n   case, it\
    \ delivers the document like a standard server. If the\n   document has QoS meta-information,\
    \ the server looks for a port\n   information in the request. If it finds a port,\
    \ it opens an Arequipa\n   socket (Arequipa_preset) to the ATM address of the\
    \ client with the\n   QoS given in the document. It sends the reply through this\
    \ new\n   connection. If the server finds no port information, it sends only\n\
    \   the header of the reply (which includes meta-information) over the\n   standard\
    \ HTTP connection, as if the client had issued a HEAD or GET-\n   IF-MODIFIED\
    \ request.\n   When a client receives the header of a document it can decide whether\n\
    \   it wants the document to be transmitted using Arequipa or not. A\n   client\
    \ without a priori knowledge about the document, may therefore\n   always want\
    \ to retrieve the header before requesting the full\n   document.\n   Illustration:\n\
    \   A client requests some documents but wants to decide if QoS sensitive\n  \
    \ documents should be sent using Arequipa or not. Thus it adds to its\n   requests\
    \ its ATM address but not the socket information.\n     GET batman.mpeg\n    \
    \ UserAgent: MyAgent/1.0\n     ATM-address: my_public_address.my_private_address\n\
    \   The server checks batman.mpeg for QoS meta info. It finds the meta\n   info\
    \ and sees an ATM address, but no socket pragma in the request. It\n   only returns\
    \ the header of the document, which includes the meta-\n   information:\n    \
    \                                    HTTP/1.0 200 OK\n                       \
    \                 Server: MyAgent/1.0\n                                      \
    \  ATM-Service: CBR\n                                        ATM-QoS-PCR: 2000\n\
    \                                        Content-type: video/mpeg\n   The client\
    \ sees the QoS info and decides that it wants to download\n   the document using\
    \ Arequipa. It opens a TCP socket for listening,\n   makes the Arequipa_expect\
    \ call and sends the following request:\n     GET batman.mpeg\n     UserAgent:\
    \ MyAgent/1.0\n     ATM-address: my_public_address.my_private_address\n     Pragma:\
    \ socket=TCP.8090\n   Again the server checks batman.mpeg for QoS meta info. It\
    \ finds the\n   meta info and sees the ATM address and the socket pragma in the\n\
    \   request. It creates a TCP socket, makes the Arequipa_preset call,\n   connects\
    \ its TCP socket to the one of the client and sends the\n   response over the\
    \ new TCP connection:\n                                        HTTP/1.0 200 OK\n\
    \                                        Server: MyAgent/1.0 ATM.address\n   \
    \                                     ATM-Service: CBR\n                     \
    \                   ATM-QoS-PCR: 2000\n                                      \
    \  Content-type: video/mpeg\n                                        <mpeg data>\n\
    \   When the server sends the data over the new TCP connection it also\n   sends\
    \ a copy of the response header over the TCP connection on which\n   the request\
    \ was made. For example, this allows a browser to spawn a\n   viewer before requesting\
    \ the data, to give the Arequipa connection to\n   the viewer and to still get\
    \ the status of the request over the normal\n   TCP connection.\n"
- title: 6. Safety considerations (loops)
  contents:
  - "6. Safety considerations (loops)\n   A major concern about ATM shortcuts in IP\
    \ networks are routing loops.\n   Arequipa is not prone to such dangers since\
    \ it establishes\n   connections between applications and not between hosts. All\
    \ datagrams\n   traveling through an Arequipa connection are destined for a given\n\
    \   socket on the machine at the end of the connection and don't need to\n   be\
    \ forwarded by the IP layer. Therefore, neither hosts nor routers\n   implementing\
    \ Arequipa as described in this document must ever forward\n   IP packets received\
    \ over Arequipa connections.\n"
- title: 7. Security considerations
  contents:
  - "7. Security considerations\n   The main security problem we see with Arequipa\
    \ is that it could be\n   used to bypass IP firewalls.\n   IP firewalls are used\
    \ to protect private networks connected to\n   untrusted IP networks. The network\
    \ is configured such that all\n   traffic going into or coming from the protected\
    \ network has to go\n   through the machine(s) acting as a firewall.\n   If hosts\
    \ in a network protected by a firewall are able to establish\n   direct ATM connections\
    \ to hosts outside the protected network, then\n   Arequipa could be used to bypass\
    \ the firewall. To avoid this, hosts\n   inside a protected network should not\
    \ be given direct connectivity to\n   the outside of the network.\n   Arequipa\
    \ can be used in a safe way by machines inside and outside a\n   protected network,\
    \ if an application proxy is installed on the\n   firewall. In the Web, this is\
    \ a typical scenario. Proxy HTTP servers\n   are often found on firewalls, not\
    \ only for security reasons, but also\n   for caching. If an application proxy\
    \ is used, each host can establish\n   an Arequipa connection to the proxy which\
    \ can then relay and monitor\n   the traffic across the firewall.\n   Note that\
    \ hosts can easily identify (and refuse) unsolicited Arequipa\n   connections\
    \ by the BHLI identifier that is passed at connection\n   setup.\n"
- title: 8. References
  contents:
  - "8. References\n   [1] Laubach, M., Classical IP and ARP over ATM, RFC1577,\n\
    \       January 1994.\n   [2] Cole, R. G., D. H. Shur, C. Villamizar, IP over\
    \ ATM: A Framework\n       Document, RFC1932, April 1996.\n   [3] Hinden, R. and\
    \ S. Deering, Internet Protocol Version (IPv6)\n       Addressing Architecture,\
    \ RFC1884, December 1995.\n   [4] Narten, T., E. Nordmark and W.A. Simpson, Neighbour\
    \ Discovery for\n       IPv6 (IPv6), RFC1970, August 1996.\n   [5] Berners-Lee,\
    \ T., R. Fielding, H. Nielsen, Hypertext Transfer\n       Protocol -- HTTP/1.0,\
    \ RFC1945, May 1996.\n   [6] Shenker, S./J. Wroclawski, Network Element Service\
    \ Specification\n       Template, Work in Progess, November, 1995.\n   [7] Perez,\
    \ M., F.-C. Liaw, A. Mankin, E. Hoffman, D. Grossman, A.\n       Malis, ATM Signaling\
    \ Support for IP over ATM, RFC1755, February\n       1995.\n"
- title: 9.  Authors' Address
  contents:
  - "9.  Authors' Address\n      Werner Almesberger,\n      Jean-Yves Le Boudec,\n\
    \      Philippe Oechslin (contact author)\n      Laboratoire de Reseaux de Communication\n\
    \      Swiss Federal Institute of Technology (EPFL)\n      1015 Lausanne\n   \
    \   Switzerland\n      email: {almesber, leboudec, oechslin}@di.epfl.ch\n"
