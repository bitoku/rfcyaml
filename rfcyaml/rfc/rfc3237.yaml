- title: __initial_text__
  contents:
  - '                Requirements for Reliable Server Pooling

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a basic set of requirements for reliable server\n\
    \   pooling.\n   The goal of Reliable Server Pooling (RSerPool) is to develop\
    \ an\n   architecture and protocols for the management and operation of server\n\
    \   pools supporting highly reliable applications, and for client access\n   mechanisms\
    \ to a server pool.\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Overview
  contents:
  - "1.1.  Overview\n   The Internet is always on.  Many users expect services to\
    \ be always\n   available; many businesses depend upon connectivity 24 hours a\
    \ day, 7\n   days a week, 365 days a year.  In order to fulfill this level of\n\
    \   performance, many proprietary solutions and operating system\n   dependent\
    \ solutions have been developed to provide highly reliable\n   and highly available\
    \ servers.\n   This document defines requirements for an architecture and protocols\n\
    \   enabling pooling of servers to support high reliability and\n   availability\
    \ for applications.\n   The range of applications that can benefit from reliable\
    \ server\n   pooling includes both mobile and real-time applications.  Reliable\n\
    \   server pooling mechanisms will be designed to support functionality\n   for\
    \ flexible pooling such as registration and deregistration, and\n   load balancing\
    \ of traffic across the server pool.  Mechanisms will\n   need to balance the\
    \ needs of scalability, overhead traffic and\n   response time to changes in pool\
    \ status, as discussed below.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This document uses the following terms:\n      Operation\
    \ scope:\n         The part of the network visible to pool users by a specific\n\
    \         instance of the reliable server pooling protocols.\n      Pool (or server\
    \ pool):\n         A collection of servers providing the same application\n  \
    \       functionality.\n      Pool handle (or pool name):\n         A logical\
    \ pointer to a pool.  Each server pool will be\n         identifiable in the operation\
    \ scope of the system by a unique\n         pool handle or \"name\".\n      Pool\
    \ element:\n         A server entity having registered to a pool.\n      Pool\
    \ user:\n         A server pool user.\n      Pool element handle (or endpoint\
    \ handle):\n         A logical pointer to a particular pool element in a pool,\n\
    \         consisting of the name of the pool and one or more destination\n   \
    \      transport addresses for the pool element.\n      Name space:\n        \
    \ A cohesive structure of pool names and relations that may be\n         queried\
    \ by an internal or external agent.\n      Name server:\n         Entity which\
    \ is responsible for managing and maintaining the\n         name space within\
    \ the RSerPool operation scope.\n      RSerPool:\n         The architecture and\
    \ protocols for reliable server pooling.\n"
- title: 1.3.  Abbreviations
  contents:
  - "1.3.  Abbreviations\n      PE:   Pool element\n      PU:   Pool user\n      SCTP:\
    \ Stream Control Transmission Protocol\n      TCP:  Transmission Control Protocol\n"
- title: 2.  Requirements
  contents:
  - '2.  Requirements

    '
- title: 2.1.  Robustness
  contents:
  - "2.1.  Robustness\n   The solution must allow itself to be implemented and deployed\
    \ in such\n   a way that there is no single point of failure in the system.\n"
- title: 2.2.  Failover Support
  contents:
  - "2.2.  Failover Support\n   The RSerPool architecture must be able to detect failure\
    \ of pool\n   elements and name servers supporting the pool, and support failover\n\
    \   to available alternate resources.\n"
- title: 2.3.  Communication Model
  contents:
  - "2.3.  Communication Model\n   The general architecture should support flexibility\
    \ of the\n   communication model between pool users and pool elements, especially\n\
    \   allowing for a peer-to-peer relationship to support some\n   applications.\n"
- title: 2.4.  Processing Power
  contents:
  - "2.4.  Processing Power\n   It should be possible to use the protocol stack in\
    \ small devices,\n   like handheld wireless devices.  The solution must scale\
    \ to devices\n   with a differing range of processing power.\n"
- title: 2.5.  Transport Protocol
  contents:
  - "2.5.  Transport Protocol\n   The protocols used for the pool handling should\
    \ not cause network\n   congestion.  This means that it should not generate heavy\
    \ traffic,\n   even in case of failures, and has to use flow control and congestion\n\
    \   avoidance algorithms which are interoperable with currently deployed\n   techniques,\
    \ especially the flow control of TCP [RFC793] and SCTP\n   [RFC2960] and must\
    \ be compliant with [RFC2914].\n   The architecture should not rely on multicast\
    \ capabilities of the\n   underlying layer.  Nevertheless, it can make use of\
    \ it if multicast\n   capabilities are available.\n   Network failures have to\
    \ be handled and concealed from the\n   application layer as much as possible\
    \ by the transport protocol.\n   This means that the underlying transport protocol\
    \ must provide a\n   strong network failure handling capability on top of an acknowledged\n\
    \   error-free non-duplicated data delivery service.  The failure of a\n   network\
    \ element must be handled by the transport protocol in such a\n   way that the\
    \ timing requirements are still fulfilled.\n"
- title: 2.6.  Support of RSerPool Unaware Clients
  contents:
  - "2.6.  Support of RSerPool Unaware Clients\n   The architecture should allow for\
    \ ease of interaction between pools\n   and non-RSerPool-aware clients.  However,\
    \ it is assumed that only\n   RSerPool-aware participants will receive maximum\
    \ timing and\n   notification benefits the architecture offers.\n"
- title: 2.7.  Registering and Deregistering
  contents:
  - "2.7.  Registering and Deregistering\n   Another important requirement is that\
    \ servers should be able to\n   register to (become PEs) and deregister from a\
    \ server pool\n   transparently without an interruption in service.  This means\
    \ that\n   after a PE has deregistered, it will continue to serve PUs which\n\
    \   started their connection before the deregistration of the PE.  New\n   connections\
    \ will be directed towards an alternative PE.\n   Servers should be able to register\
    \ in multiple server pools which may\n   belong to different namespaces.\n"
- title: 2.8.  Naming
  contents:
  - "2.8.  Naming\n   Server pools are identified by pool handles.  These pool handles\
    \ are\n   only valid inside the operation scope.  Interoperability between\n \
    \  different namespaces has to be provided by other mechanisms.\n"
- title: 2.9.  Name Resolution
  contents:
  - "2.9.  Name Resolution\n   The name resolution should not result in a pool element\
    \ which is not\n   operational.  This might be important for fulfilling the timing\n\
    \   requirements described below.\n"
- title: 2.10.  Server Selection
  contents:
  - "2.10.  Server Selection\n   The RSerPool mechanisms must be able to support different\
    \ server\n   selection mechanisms.  These are called server pool policies.\n \
    \  Examples of server pool policies are:\n      -  Round Robin\n      -  Least\
    \ used\n      -  Most used\n   The set of supported policies must be extensible\
    \ in the sense that\n   new policies can be added as required.  Non-stochastic\
    \ and stochastic\n   policies can be supported.\n   There must be a way for the\
    \ client to provide operational status\n   feedback to the name server about the\
    \ pool elements.\n   The name server protocols must be extensible to allow more\
    \ refined\n   server selection mechanisms to be implemented as they are developed\n\
    \   in the future.\n   For some applications it is important that a client repeatedly\n\
    \   connects to the same server in a pool if it is possible, i.e., if\n   that\
    \ server is still alive.  This feature should be supported through\n   the use\
    \ of pool element handles.\n"
- title: 2.11.  Timing Requirements and Scaling
  contents:
  - "2.11.  Timing Requirements and Scaling\n   Handling of name resolution must be\
    \ fast to support real-time\n   applications.  Moreover, the name space should\
    \ reflect pool\n   membership changes to the client application as rapidly as\
    \ possible,\n   i.e., not waiting until the client application next reconnects.\n\
    \   The architecture should support control of timing parameters based on\n  \
    \ specific needs, e.g., of an application or implementation.\n   In order to support\
    \ more rapid and accurate response, the\n   requirements on scalability of the\
    \ mechanism are limited to server\n   pools consisting of a suitably large but\
    \ not Internet-wide number of\n   elements, as necessary to support bounded delay\
    \ in handling real-time\n   name resolution.\n   Also, there is no requirement\
    \ to support hierarchical organization of\n   name servers for scalability.  Instead,\
    \ it is envisioned that the set\n   of name servers supporting a particular pool\
    \ is organized as a flat\n   space of equivalent servers.  Accordingly, the impact\
    \ of relatively\n   frequent updates to ensure accurate reflection of the status\
    \ of pool\n   elements is limited to the set of name servers supporting a specific\n\
    \   pool.\n"
- title: 2.12.  Scalability
  contents:
  - "2.12.  Scalability\n   The RSerPool architecture should not require a limitation\
    \ on the\n   number of server pools or on the number of pool users, although the\n\
    \   size of an individual pool may be limited by timing requirements as\n   defined\
    \ above.\n"
- title: 2.13.  Security Requirements
  contents:
  - '2.13.  Security Requirements

    '
- title: 2.13.1.  General
  contents:
  - "2.13.1.  General\n   -  The scaling characteristics of the security architecture\
    \ should be\n      compatible with those given previously.\n   -  The security\
    \ architecture should support hosts having a wide range\n      of processing powers.\n"
- title: 2.13.2.  Name Space Services
  contents:
  - "2.13.2.  Name Space Services\n   -  It must not be possible for an attacker to\
    \ falsely register as a\n      pool element with the name server either by masquerading\
    \ as\n      another pool element or by registering in violation of local\n   \
    \   authorization policy.\n   -  It must not be possible for an attacker to deregister\
    \ a server\n      which has successfully registered with the name server.\n  \
    \ -  It must not be possible for an attacker to spoof the response to a\n    \
    \  query to the name server\n   -  It must be possible to protect the privacy\
    \ of queries to the name\n      server and responses to those queries from the\
    \ name server.\n   -  Communication among name servers must be afforded the same\n\
    \      protections as communication between clients and name servers.\n"
- title: 2.13.3.  Security State
  contents:
  - "2.13.3.  Security State\n   The security context of an application is a subset\
    \ of the overall\n   context, and context or state sharing is explicitly out-of-scope\
    \ for\n   RSerPool.  Because RSerPool does introduce new security\n   vulnerabilities\
    \ to existing applications application designers\n   employing RSerPool should\
    \ be aware of problems inherent in failing\n   over secured connections.  Security\
    \ services necessarily retain some\n   state and this state may have to be moved\
    \ or re-established.\n   Examples of this state include authentication or retained\
    \ ciphertext\n   for ciphers operating in cipher block chaining (CBC) or cipher\n\
    \   feedback (CFB) mode.  These problems must be addressed by the\n   application\
    \ or by future work on RSerPool.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   Security issues are discussed in section 2.13.\n"
- title: 4.  Acknowledgements
  contents:
  - "4.  Acknowledgements\n   The authors would like to thank Bernard Aboba, Matt\
    \ Holdrege, Eliot\n   Lear, Christopher Ross, Werner Vogels and many others for\
    \ their\n   invaluable comments and suggestions.\n"
- title: 5.  References
  contents:
  - "5.  References\n   [RFC793]  Postel, J., \"Transmission Control Protocol\", STD\
    \ 7, RFC\n             793, September 1981.\n   [RFC959]  Postel, J. and J. Reynolds,\
    \ \"File Transfer Protocol (FTP)\",\n             STD 9, RFC 959, October 1985.\n\
    \   [RFC2026] Bradner, S., \"The Internet Standards Process -- Revision\n    \
    \         3\", BCP 9, RFC 2026, October 1996.\n   [RFC2608] Guttman, E., Perkins,\
    \ C., Veizades, J. and M. Day, \"Service\n             Location Protocol, Version\
    \ 2\", RFC 2608, June 1999.\n   [RFC2719] Ong, L., Rytina, I., Garcia, M., Schwarzbauer,\
    \ H., Coene,\n             L., Lin, H., Juhasz, I., Holdrege, M. and C. Sharp,\n\
    \             \"Framework Architecture for Signaling Transport\", RFC 2719,\n\
    \             October 1999.\n   [RFC2914] Floyd, S., \"Congestion Control Principles\"\
    , BCP 41, RFC\n             2914, September 2000.\n   [RFC2960] Stewart, R., Xie,\
    \ Q., Morneault, K., Sharp, C.,\n             Schwarzbauer, H., Taylor, T., Rytina,\
    \ I., Kalla, M., Zhang,\n             L. and V. Paxson, \"Stream Control Transmission\
    \ Protocol\",\n             RFC 2960, November 2000.\n"
- title: 6.  Authors' Addresses
  contents:
  - "6.  Authors' Addresses\n   Michael Tuexen\n   Siemens AG\n   ICN WN CS SE 51\n\
    \   D-81359 Munich\n   Germany\n   Phone:   +49 89 722 47210\n   EMail: Michael.Tuexen@icn.siemens.de\n\
    \   Qiaobing Xie\n   Motorola, Inc.\n   1501 W. Shure Drive, #2309\n   Arlington\
    \ Heights, Il 60004\n   USA\n   Phone: +1 847 632 3028\n   EMail: qxie1@email.mot.com\n\
    \   Randall Stewart\n   Cisco Systems, Inc.\n   24 Burning Bush Trail\n   Crystal\
    \ Lake, Il 60012\n   USA\n   Phone: +1 815 477 2127\n   EMail: rrs@cisco.com\n\
    \   Melinda Shore\n   Cisco Systems, Inc.\n   809 Hayts Rd\n   Ithaca, NY 14850\n\
    \   USA\n   Phone: +1 607 272 7512\n   EMail: mshore@cisco.com\n   Lyndon Ong\n\
    \   Ciena\n   10480 Ridgeview Court\n   Cupertino, CA 95014\n   USA\n   Phone:\
    \ +1 408 366 3358\n   EMail: lyong@ciena.com\n   John Loughney\n   Nokia Research\
    \ Center\n   PO Box 407\n   FIN-00045 Nokia Group\n   Finland\n   Phone: +358\
    \ 50 483 6242\n   EMail: john.loughney@nokia.com\n   Maureen Stillman\n   Nokia\n\
    \   127 W. State Street\n   Ithaca, NY 14850\n   USA\n   Phone: +1 607 273 0724\
    \ 62\n   EMail: maureen.stillman@nokia.com\n"
- title: 7.  Full Copyright Statement
  contents:
  - "7.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
