- title: __initial_text__
  contents:
  - "                 Stream Control Transmission Protocol:\n                    \
    \ Errata and Issues in RFC 4960\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is a compilation of issues found since the publication\n\
    \   of RFC 4960 in September 2007, based on experience with implementing,\n  \
    \ testing, and using the Stream Control Transmission Protocol (SCTP)\n   along\
    \ with the suggested fixes.  This document provides deltas to RFC\n   4960 and\
    \ is organized in a time-ordered way.  The issues are listed\n   in the order\
    \ in which they were brought up.  Because some text is\n   changed several times,\
    \ the last delta in the text is the one that\n   should be applied.  In addition\
    \ to the deltas, a description of each\n   problem and the details of the solution\
    \ for each are also provided.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8540.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Conventions . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Corrections to RFC 4960 . . . . . . . . . . . . . . . .\
    \ . . .   4\n     3.1.  Path Error Counter Threshold Handling . . . . . . . .\
    \ . .   4\n     3.2.  Upper-Layer Protocol Shutdown Request Handling  . . . .\
    \ .   5\n     3.3.  Registration of New Chunk Types . . . . . . . . . . . . .\
    \   6\n     3.4.  Variable Parameters for INIT Chunks . . . . . . . . . . .  \
    \ 7\n     3.5.  CRC32c Sample Code on 64-Bit Platforms  . . . . . . . . .   8\n\
    \     3.6.  Endpoint Failure Detection  . . . . . . . . . . . . . . .   9\n  \
    \   3.7.  Data Transmission Rules . . . . . . . . . . . . . . . . .  10\n    \
    \ 3.8.  T1-Cookie Timer . . . . . . . . . . . . . . . . . . . . .  11\n     3.9.\
    \  Miscellaneous Typos . . . . . . . . . . . . . . . . . . .  12\n     3.10. CRC32c\
    \ Sample Code  . . . . . . . . . . . . . . . . . . .  19\n     3.11. partial_bytes_acked\
    \ after T3-rtx Expiration . . . . . . .  19\n     3.12. Order of Adjustments of\
    \ partial_bytes_acked and cwnd  . .  20\n     3.13. HEARTBEAT ACK and the Association\
    \ Error Counter . . . . .  21\n     3.14. Path for Fast Retransmission  . . .\
    \ . . . . . . . . . . .  22\n     3.15. Transmittal in Fast Recovery  . . . .\
    \ . . . . . . . . . .  23\n     3.16. Initial Value of ssthresh . . . . . . .\
    \ . . . . . . . . .  24\n     3.17. Automatically CONFIRMED Addresses . . . .\
    \ . . . . . . . .  25\n     3.18. Only One Packet after Retransmission Timeout\
    \  . . . . . .  26\n     3.19. INIT ACK Path for INIT in COOKIE-WAIT State . .\
    \ . . . . .  27\n     3.20. Zero Window Probing and Unreachable Primary Path \
    \ . . . .  28\n     3.21. Normative Language in Section 10 of RFC 4960  . . .\
    \ . . .  29\n     3.22. Increase of partial_bytes_acked in Congestion Avoidance\
    \ .  32\n     3.23. Inconsistent Handling of Notifications  . . . . . . . . .\
    \  33\n     3.24. SACK.Delay Not Listed as a Protocol Parameter . . . . . .  37\n\
    \     3.25. Processing of Chunks in an Incoming SCTP Packet . . . . .  39\n  \
    \   3.26. Increasing the cwnd in the Congestion Avoidance Phase . .  41\n    \
    \ 3.27. Refresh of cwnd and ssthresh after Idle Period  . . . . .  43\n     3.28.\
    \ Window Updates after Receiver Window Opens Up . . . . . .  45\n     3.29. Path\
    \ of DATA and Reply Chunks . . . . . . . . . . . . . .  46\n     3.30. \"Outstanding\
    \ Data\", \"Flightsize\", and \"Data in Flight\"\n           Key Terms . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  47\n     3.31. Degradation of cwnd\
    \ due to Max.Burst  . . . . . . . . . .  49\n     3.32. Reduction of RTO.Initial\
    \  . . . . . . . . . . . . . . . .  50\n     3.33. Ordering of Bundled SACK and\
    \ ERROR Chunks . . . . . . . .  51\n     3.34. Undefined Parameter Returned by\
    \ RECEIVE Primitive . . . .  52\n     3.35. DSCP Changes  . . . . . . . . . .\
    \ . . . . . . . . . . . .  53\n     3.36. Inconsistent Handling of ICMPv4 and\
    \ ICMPv6 Messages . . .  55\n     3.37. Handling of Soft Errors . . . . . . .\
    \ . . . . . . . . . .  56\n     3.38. Honoring cwnd . . . . . . . . . . . . .\
    \ . . . . . . . . .  57\n     3.39. Zero Window Probing . . . . . . . . . . .\
    \ . . . . . . . .  58\n     3.40. Updating References regarding ECN . . . . .\
    \ . . . . . . .  60\n     3.41. Host Name Address Parameter Deprecated  . . .\
    \ . . . . . .  62\n     3.42. Conflicting Text regarding the 'Supported Address\
    \ Types'\n           Parameter . . . . . . . . . . . . . . . . . . . . . . . .\
    \  66\n     3.43. Integration of RFC 6096 . . . . . . . . . . . . . . . . .  67\n\
    \     3.44. Integration of RFC 6335 . . . . . . . . . . . . . . . . .  70\n  \
    \   3.45. Integration of RFC 7053 . . . . . . . . . . . . . . . . .  72\n    \
    \ 3.46. CRC32c Code Improvements  . . . . . . . . . . . . . . . .  76\n     3.47.\
    \ Clarification of Gap Ack Blocks in SACK Chunks  . . . . .  87\n     3.48. Handling\
    \ of SSN Wraparounds . . . . . . . . . . . . . . .  89\n     3.49. Update to RFC\
    \ 2119 Boilerplate Text . . . . . . . . . . .  90\n     3.50. Removal of Text\
    \ (Previously Missed in RFC 4960) . . . . .  91\n   4.  IANA Considerations .\
    \ . . . . . . . . . . . . . . . . . . . .  91\n   5.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  92\n   6.  References  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  92\n     6.1.  Normative References  .\
    \ . . . . . . . . . . . . . . . . .  92\n     6.2.  Informative References  .\
    \ . . . . . . . . . . . . . . . .  92\n   Acknowledgements  . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  94\n   Authors' Addresses  . . . . . . . . .\
    \ . . . . . . . . . . . . . .  94\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document contains a compilation of all defects for\
    \ [RFC4960]\n   (\"Stream Control Transmission Protocol\") that were found up\
    \ until the\n   publication of this document.  These defects may be of an editorial\n\
    \   or technical nature.  This document may be thought of as a companion\n   document\
    \ to be used in the implementation of the Stream Control\n   Transmission Protocol\
    \ (SCTP) to clarify errors in the original SCTP\n   document.\n   This document\
    \ provides a history of the changes that will be compiled\n   into a bis document\
    \ for [RFC4960].  It is structured similarly to\n   [RFC4460].\n   Each error\
    \ will be detailed within this document in the form of:\n   o  The problem description,\n\
    \   o  The text quoted from [RFC4960],\n   o  The replacement text that should\
    \ be placed into an upcoming bis\n      document, and\n   o  A description of\
    \ the solution.\n   Note that when reading this document one must use care to\
    \ ensure that\n   a field or item is not updated later on within the document.\
    \  Since\n   this document is a historical record of the sequential changes that\n\
    \   have been found necessary at various interop events and through\n   discussion\
    \ on the Transport Area Working Group mailing list, the last\n   delta in the\
    \ text is the one that should be applied.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n"
- title: 3.  Corrections to RFC 4960
  contents:
  - '3.  Corrections to RFC 4960

    '
- title: 3.1.  Path Error Counter Threshold Handling
  contents:
  - '3.1.  Path Error Counter Threshold Handling

    '
- title: 3.1.1.  Description of the Problem
  contents:
  - "3.1.1.  Description of the Problem\n   The handling of the 'Path.Max.Retrans'\
    \ parameter is described in\n   Sections 8.2 and 8.3 of [RFC4960] in an inconsistent\
    \ way.  Whereas\n   Section 8.2 of [RFC4960] says that a path is marked inactive\
    \ when the\n   path error counter exceeds the threshold, Section 8.3 of [RFC4960]\n\
    \   says that the path is marked inactive when the path error counter\n   reaches\
    \ the threshold.\n   This issue was reported as an errata for [RFC4960] with\n\
    \   Errata ID 1440.\n"
- title: 3.1.2.  Text Changes to the Document
  contents:
  - "3.1.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 8.3)\n\
    \   ---------\n   When the value of this counter reaches the protocol parameter\n\
    \   'Path.Max.Retrans', the endpoint should mark the corresponding\n   destination\
    \ address as inactive if it is not so marked, and may also\n   optionally report\
    \ to the upper layer the change of reachability of\n   this destination address.\
    \  After this, the endpoint should continue\n   HEARTBEAT on this destination\
    \ address but should stop increasing the\n   counter.\n   ---------\n   New text:\
    \ (Section 8.3)\n   ---------\n   When the value of this counter exceeds the protocol\
    \ parameter\n   'Path.Max.Retrans', the endpoint SHOULD mark the corresponding\n\
    \   destination address as inactive if it is not so marked and MAY also\n   optionally\
    \ report to the upper layer the change in reachability of\n   this destination\
    \ address.  After this, the endpoint SHOULD continue\n   HEARTBEAT on this destination\
    \ address but SHOULD stop increasing the\n   counter.\n   This text has been modified\
    \ by multiple errata.  It is further\n   updated in Section 3.23.\n"
- title: 3.1.3.  Solution Description
  contents:
  - "3.1.3.  Solution Description\n   The intended state change should happen when\
    \ the threshold is\n   exceeded.\n"
- title: 3.2.  Upper-Layer Protocol Shutdown Request Handling
  contents:
  - '3.2.  Upper-Layer Protocol Shutdown Request Handling

    '
- title: 3.2.1.  Description of the Problem
  contents:
  - "3.2.1.  Description of the Problem\n   Section 9.2 of [RFC4960] describes the\
    \ handling of received SHUTDOWN\n   chunks in the SHUTDOWN-RECEIVED state instead\
    \ of the handling of\n   shutdown requests from its upper layer in this state.\n\
    \   This issue was reported as an errata for [RFC4960] with\n   Errata ID 1574.\n"
- title: 3.2.2.  Text Changes to the Document
  contents:
  - "3.2.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 9.2)\n\
    \   ---------\n   Once an endpoint has reached the SHUTDOWN-RECEIVED state, it\
    \ MUST NOT\n   send a SHUTDOWN in response to a ULP request, and should discard\n\
    \   subsequent SHUTDOWN chunks.\n   ---------\n   New text: (Section 9.2)\n  \
    \ ---------\n   Once an endpoint has reached the SHUTDOWN-RECEIVED state, it MUST\n\
    \   ignore ULP shutdown requests but MUST continue responding to SHUTDOWN\n  \
    \ chunks from its peer.\n   This text is in final form and is not further updated\
    \ in this\n   document.\n"
- title: 3.2.3.  Solution Description
  contents:
  - "3.2.3.  Solution Description\n   The text never intended that the SCTP endpoint\
    \ ignore SHUTDOWN chunks\n   from its peer.  If it did, the endpoints could never\
    \ gracefully\n   terminate associations in some cases.\n"
- title: 3.3.  Registration of New Chunk Types
  contents:
  - '3.3.  Registration of New Chunk Types

    '
- title: 3.3.1.  Description of the Problem
  contents:
  - "3.3.1.  Description of the Problem\n   Section 14.1 of [RFC4960] should deal\
    \ with new chunk types; however,\n   the text only refers to parameter types.\n\
    \   This issue was reported as an errata for [RFC4960] with\n   Errata ID 2592.\n"
- title: 3.3.2.  Text Changes to the Document
  contents:
  - "3.3.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 14.1)\n\
    \   ---------\n   The assignment of new chunk parameter type codes is done through\
    \ an\n   IETF Consensus action, as defined in [RFC2434].  Documentation of the\n\
    \   chunk parameter MUST contain the following information:\n   ---------\n  \
    \ New text: (Section 14.1)\n   ---------\n   The assignment of new chunk type\
    \ codes is done through an IETF\n   Consensus action, as defined in [RFC8126].\
    \  Documentation for the\n   chunk type MUST contain the following information:\n\
    \   This text has been modified by multiple errata.  It is further\n   updated\
    \ in Section 3.43.\n"
- title: 3.3.3.  Solution Description
  contents:
  - "3.3.3.  Solution Description\n   The new text refers to chunk types as intended\
    \ and changes the\n   reference to [RFC8126].\n"
- title: 3.4.  Variable Parameters for INIT Chunks
  contents:
  - '3.4.  Variable Parameters for INIT Chunks

    '
- title: 3.4.1.  Description of the Problem
  contents:
  - "3.4.1.  Description of the Problem\n   In Section 3.3.2 of [RFC4960], newlines\
    \ in wrong places break the\n   layout of the table of variable parameters for\
    \ the INIT chunk.\n   This issue was reported as an errata for [RFC4960] with\n\
    \   Errata ID 3291 and Errata ID 3804.\n"
- title: 3.4.2.  Text Changes to the Document
  contents:
  - "3.4.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 3.3.2)\n\
    \   ---------\n   Variable Parameters                  Status     Type Value\n\
    \   -------------------------------------------------------------\n   IPv4 Address\
    \ (Note 1)               Optional    5 IPv6 Address\n   (Note 1)             \
    \  Optional    6 Cookie Preservative\n   Optional    9 Reserved for ECN Capable\
    \ (Note 2)   Optional\n   32768 (0x8000) Host Name Address (Note 3)          Optional\n\
    \   11 Supported Address Types (Note 4)    Optional    12\n   ---------\n   New\
    \ text: (Section 3.3.2)\n   ---------\n   Variable Parameters                \
    \  Status     Type Value\n   -------------------------------------------------------------\n\
    \   IPv4 Address (Note 1)               Optional    5\n   IPv6 Address (Note 1)\
    \               Optional    6\n   Cookie Preservative                 Optional\
    \    9\n   Reserved for ECN Capable (Note 2)   Optional    32768 (0x8000)\n  \
    \ Host Name Address (Note 3)          Optional    11\n   Supported Address Types\
    \ (Note 4)    Optional    12\n   This text is in final form and is not further\
    \ updated in this\n   document.\n"
- title: 3.4.3.  Solution Description
  contents:
  - "3.4.3.  Solution Description\n   The formatting of the table is corrected.\n"
- title: 3.5.  CRC32c Sample Code on 64-Bit Platforms
  contents:
  - '3.5.  CRC32c Sample Code on 64-Bit Platforms

    '
- title: 3.5.1.  Description of the Problem
  contents:
  - "3.5.1.  Description of the Problem\n   The sample code for CRC32c computation,\
    \ as provided in [RFC4960],\n   assumes that a variable of type unsigned long\
    \ uses 32 bits.  This is\n   not true on some 64-bit platforms (for example, platforms\
    \ that\n   use LP64).\n   This issue was reported as an errata for [RFC4960] with\n\
    \   Errata ID 3423.\n"
- title: 3.5.2.  Text Changes to the Document
  contents:
  - "3.5.2.  Text Changes to the Document\n   ---------\n   Old text: (Appendix C)\n\
    \   ---------\n   unsigned long\n   generate_crc32c(unsigned char *buffer, unsigned\
    \ int length)\n   {\n     unsigned int i;\n     unsigned long crc32 = ~0L;\n \
    \  ---------\n   New text: (Appendix C)\n   ---------\n   unsigned long\n   generate_crc32c(unsigned\
    \ char *buffer, unsigned int length)\n   {\n     unsigned int i;\n     unsigned\
    \ long crc32 = 0xffffffffL;\n   This text has been modified by multiple errata.\
    \  It is further\n   updated in Section 3.10 and again in Section 3.46.\n"
- title: 3.5.3.  Solution Description
  contents:
  - "3.5.3.  Solution Description\n   The new text uses 0xffffffffL instead of ~0L;\
    \ this gives the same\n   value on platforms using 32 bits or 64 bits for variables\
    \ of type\n   unsigned long.\n"
- title: 3.6.  Endpoint Failure Detection
  contents:
  - '3.6.  Endpoint Failure Detection

    '
- title: 3.6.1.  Description of the Problem
  contents:
  - "3.6.1.  Description of the Problem\n   The handling of the association error\
    \ counter defined in Section 8.1\n   of [RFC4960] can result in an association\
    \ failure even if the path\n   used for data transmission is available (but idle).\n\
    \   This issue was reported as an errata for [RFC4960] with\n   Errata ID 3788.\n"
- title: 3.6.2.  Text Changes to the Document
  contents:
  - "3.6.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 8.1)\n\
    \   ---------\n   An endpoint shall keep a counter on the total number of consecutive\n\
    \   retransmissions to its peer (this includes retransmissions to all the\n  \
    \ destination transport addresses of the peer if it is multi-homed),\n   including\
    \ unacknowledged HEARTBEAT chunks.\n   ---------\n   New text: (Section 8.1)\n\
    \   ---------\n   An endpoint SHOULD keep a counter on the total number of consecutive\n\
    \   retransmissions to its peer (this includes data retransmissions to\n   all\
    \ the destination transport addresses of the peer if it is\n   multi-homed), including\
    \ the number of unacknowledged HEARTBEAT chunks\n   observed on the path that\
    \ is currently used for data transfer.\n   Unacknowledged HEARTBEAT chunks observed\
    \ on paths different from the\n   path currently used for data transfer SHOULD\
    \ NOT increment the\n   association error counter, as this could lead to association\
    \ closure\n   even if the path that is currently used for data transfer is\n \
    \  available (but idle).\n   This text has been modified by multiple errata. \
    \ It is further\n   updated in Section 3.23.\n"
- title: 3.6.3.  Solution Description
  contents:
  - "3.6.3.  Solution Description\n   A more refined handling of the association error\
    \ counter is defined.\n"
- title: 3.7.  Data Transmission Rules
  contents:
  - '3.7.  Data Transmission Rules

    '
- title: 3.7.1.  Description of the Problem
  contents:
  - "3.7.1.  Description of the Problem\n   When integrating the changes to Section\
    \ 6.1 A) of [RFC2960] as\n   described in Section 2.15.2 of [RFC4460], some text\
    \ was duplicated\n   and became the final paragraph of Section 6.1 A) of [RFC4960].\n\
    \   This issue was reported as an errata for [RFC4960] with\n   Errata ID 4071.\n"
- title: 3.7.2.  Text Changes to the Document
  contents:
  - "3.7.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 6.1\
    \ A))\n   ---------\n   The sender MUST also have an algorithm for sending new\
    \ DATA chunks to\n   avoid silly window syndrome (SWS) as described in [RFC0813].\
    \  The\n   algorithm can be similar to the one described in Section 4.2.3.4 of\n\
    \   [RFC1122].\n   However, regardless of the value of rwnd (including if it is\
    \ 0), the\n   data sender can always have one DATA chunk in flight to the receiver\n\
    \   if allowed by cwnd (see rule B below).  This rule allows the sender\n   to\
    \ probe for a change in rwnd that the sender missed due to the SACK\n   having\
    \ been lost in transit from the data receiver to the data\n   sender.\n   ---------\n\
    \   New text: (Section 6.1 A))\n   ---------\n   The sender MUST also have an\
    \ algorithm for sending new DATA chunks to\n   avoid silly window syndrome (SWS)\
    \ as described in [RFC1122].  The\n   algorithm can be similar to the algorithm\
    \ described in\n   Section 4.2.3.4 of [RFC1122].\n   This text is in final form\
    \ and is not further updated in this\n   document.\n"
- title: 3.7.3.  Solution Description
  contents:
  - "3.7.3.  Solution Description\n   The last paragraph of Section 6.1 A) is removed,\
    \ as had been intended\n   in Section 2.15.2 of [RFC4460].\n"
- title: 3.8.  T1-Cookie Timer
  contents:
  - '3.8.  T1-Cookie Timer

    '
- title: 3.8.1.  Description of the Problem
  contents:
  - "3.8.1.  Description of the Problem\n   Figure 4 of [RFC4960] illustrates the\
    \ SCTP association setup.\n   However, it incorrectly shows that the T1-init timer\
    \ is used in the\n   COOKIE-ECHOED state, whereas the T1-cookie timer should have\
    \ been\n   used instead.\n   This issue was reported as an errata for [RFC4960]\
    \ with\n   Errata ID 4400.\n"
- title: 3.8.2.  Text Changes to the Document
  contents:
  - "3.8.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 5.1.6,\
    \ Figure 4)\n   ---------\n   COOKIE ECHO [Cookie_Z] ------\\\n   (Start T1-init\
    \ timer)         \\\n   (Enter COOKIE-ECHOED state)    \\---> (build TCB enter\
    \ ESTABLISHED\n                                         state)\n             \
    \                     /---- COOKIE-ACK\n                                 /\n \
    \  (Cancel T1-init timer, <-----/\n    Enter ESTABLISHED state)\n   ---------\n\
    \   New text: (Section 5.1.6, Figure 4)\n   ---------\n   COOKIE ECHO [Cookie_Z]\
    \ ------\\\n   (Start T1-cookie timer)       \\\n   (Enter COOKIE-ECHOED state)\
    \    \\---> (build TCB, enter ESTABLISHED\n                                  \
    \       state)\n                                  /---- COOKIE-ACK\n         \
    \                        /\n   (Cancel T1-cookie timer, <---/\n    enter ESTABLISHED\
    \ state)\n   This text has been modified by multiple errata.  It is further\n\
    \   updated in Section 3.9.\n"
- title: 3.8.3.  Solution Description
  contents:
  - "3.8.3.  Solution Description\n   The figure is changed such that the T1-cookie\
    \ timer is used instead\n   of the T1-init timer.\n"
- title: 3.9.  Miscellaneous Typos
  contents:
  - '3.9.  Miscellaneous Typos

    '
- title: 3.9.1.  Description of the Problem
  contents:
  - "3.9.1.  Description of the Problem\n   While processing [RFC4960], some typos\
    \ were not caught.\n   One typo was reported as an errata for [RFC4960] with Errata\
    \ ID 5003.\n"
- title: 3.9.2.  Text Changes to the Document
  contents:
  - "3.9.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 1.6)\n\
    \   ---------\n   Transmission Sequence Numbers wrap around when they reach 2**32\
    \ - 1.\n   That is, the next TSN a DATA chunk MUST use after transmitting TSN\
    \ =\n   2*32 - 1 is TSN = 0.\n   ---------\n   New text: (Section 1.6)\n   ---------\n\
    \   Transmission Sequence Numbers wrap around when they reach 2**32 - 1.\n   That\
    \ is, the next TSN a DATA chunk MUST use after transmitting\n   TSN = 2**32 -\
    \ 1 is TSN = 0.\n   This text is in final form and is not further updated in this\n\
    \   document.\n   ---------\n   Old text: (Section 3.3.10.9)\n   ---------\n \
    \  No User Data: This error cause is returned to the originator of a\n   DATA\
    \ chunk if a received DATA chunk has no user data.\n   ---------\n   New text:\
    \ (Section 3.3.10.9)\n   ---------\n   No User Data: This error cause is returned\
    \ to the originator of a\n   DATA chunk if a received DATA chunk has no user data.\n\
    \   This text is in final form and is not further updated in this\n   document.\n\
    \   ---------\n   Old text: (Section 6.7, Figure 9)\n   ---------\n   Endpoint\
    \ A                                    Endpoint Z {App\n   sends 3 messages; strm\
    \ 0} DATA [TSN=6,Strm=0,Seq=2] ----------\n   -----> (ack delayed) (Start T3-rtx\
    \ timer)\n   DATA [TSN=7,Strm=0,Seq=3] --------> X (lost)\n   DATA [TSN=8,Strm=0,Seq=4]\
    \ ---------------> (gap detected,\n                                          \
    \     immediately send ack)\n                                   /----- SACK [TSN\
    \ Ack=6,Block=1,\n                                  /             Start=2,End=2]\n\
    \                           <-----/ (remove 6 from out-queue,\n    and mark 7\
    \ as \"1\" missing report)\n   ---------\n   New text: (Section 6.7, Figure 9)\n\
    \   ---------\n   Endpoint A                                    Endpoint Z\n \
    \  {App sends 3 messages; strm 0}\n   DATA [TSN=6,Strm=0,Seq=2] --------------->\
    \ (ack delayed)\n   (Start T3-rtx timer)\n   DATA [TSN=7,Strm=0,Seq=3] -------->\
    \ X (lost)\n   DATA [TSN=8,Strm=0,Seq=4] ---------------> (gap detected,\n   \
    \                                            immediately send ack)\n         \
    \                          /----- SACK [TSN Ack=6,Block=1,\n                 \
    \                 /             Start=2,End=2]\n                           <-----/\n\
    \   (remove 6 from out-queue,\n    and mark 7 as \"1\" missing report)\n   This\
    \ text is in final form and is not further updated in this\n   document.\n   ---------\n\
    \   Old text: (Section 6.10)\n   ---------\n   An endpoint bundles chunks by simply\
    \ including multiple chunks in one\n   outbound SCTP packet.  The total size of\
    \ the resultant IP datagram,\n   including the SCTP packet and IP headers, MUST\
    \ be less that or equal\n   to the current Path MTU.\n   ---------\n   New text:\
    \ (Section 6.10)\n   ---------\n   An endpoint bundles chunks by simply including\
    \ multiple chunks in one\n   outbound SCTP packet.  The total size of the resultant\
    \ IP datagram,\n   including the SCTP packet and IP headers, MUST be less than\
    \ or equal\n   to the current Path MTU (PMTU).\n   This text is in final form\
    \ and is not further updated in this\n   document.\n   ---------\n   Old text:\
    \ (Section 10.1 O))\n   ---------\n   o  Receive Unacknowledged Message\n    \
    \  Format: RECEIVE_UNACKED(data retrieval id, buffer address, buffer\n       \
    \       size, [,stream id] [, stream sequence number] [,partial\n            \
    \  flag] [,payload protocol-id])\n   ---------\n   New text: (Section 10.1 O))\n\
    \   ---------\n   O) Receive Unacknowledged Message\n      Format: RECEIVE_UNACKED(data\
    \ retrieval id, buffer address, buffer\n              size [,stream id] [,stream\
    \ sequence number] [,partial\n              flag] [,payload protocol-id])\n  \
    \ This text is in final form and is not further updated in this\n   document.\n\
    \   ---------\n   Old text: (Section 10.1 M))\n   ---------\n   M) Set Protocol\
    \ Parameters\n      Format: SETPROTOCOLPARAMETERS(association id,\n          \
    \    [,destination transport address,]\n              protocol parameter list)\n\
    \   ---------\n   New text: (Section 10.1 M))\n   ---------\n   M) Set Protocol\
    \ Parameters\n      Format: SETPROTOCOLPARAMETERS(association id,\n          \
    \    [destination transport address,]\n              protocol parameter list)\n\
    \   This text is in final form and is not further updated in this\n   document.\n\
    \   ---------\n   Old text: (Appendix C)\n   ---------\n   ICMP2) An implementation\
    \ MAY ignore all ICMPv6 messages where the\n          type field is not \"Destination\
    \ Unreachable\", \"Parameter\n          Problem\",, or \"Packet Too Big\".\n \
    \  ---------\n   New text: (Appendix C)\n   ---------\n   ICMP2) An implementation\
    \ MAY ignore all ICMPv6 messages where the\n          type field is not \"Destination\
    \ Unreachable\", \"Parameter\n          Problem\", or \"Packet Too Big\".\n  \
    \ This text is in final form and is not further updated in this\n   document.\n\
    \   ---------\n   Old text: (Appendix C)\n   ---------\n   ICMP7) If the ICMP\
    \ message is either a v6 \"Packet Too Big\" or a v4\n          \"Fragmentation\
    \ Needed\", an implementation MAY process this\n          information as defined\
    \ for PATH MTU discovery.\n   ---------\n   New text: (Appendix C)\n   ---------\n\
    \   ICMP7) If the ICMP message is either a v6 \"Packet Too Big\" or a v4\n   \
    \       \"Fragmentation Needed\", an implementation MAY process this\n       \
    \   information as defined for PMTU discovery.\n   This text is in final form\
    \ and is not further updated in this\n   document.\n   ---------\n   Old text:\
    \ (Section 5.4)\n   ---------\n   2)  For the receiver of the COOKIE ECHO, the\
    \ only CONFIRMED address\n      is the one to which the INIT-ACK was sent.\n \
    \  ---------\n   New text: (Section 5.4)\n   ---------\n   2)  For the receiver\
    \ of the COOKIE ECHO, the only CONFIRMED address\n       is the address to which\
    \ the INIT ACK was sent.\n   This text is in final form and is not further updated\
    \ in this\n   document.\n   ---------\n   Old text: (Section 5.1.6, Figure 4)\n\
    \   ---------\n   COOKIE ECHO [Cookie_Z] ------\\\n   (Start T1-init timer)  \
    \       \\\n   (Enter COOKIE-ECHOED state)    \\---> (build TCB enter ESTABLISHED\n\
    \                                         state)\n                           \
    \       /---- COOKIE-ACK\n                                 /\n   (Cancel T1-init\
    \ timer, <-----/\n    Enter ESTABLISHED state)\n   ---------\n   New text: (Section\
    \ 5.1.6, Figure 4)\n   ---------\n   COOKIE ECHO [Cookie_Z] ------\\\n   (Start\
    \ T1-cookie timer)       \\\n   (Enter COOKIE-ECHOED state)    \\---> (build TCB,\
    \ enter ESTABLISHED\n                                         state)\n       \
    \                           /---- COOKIE ACK\n                               \
    \  /\n   (Cancel T1-cookie timer, <---/\n    enter ESTABLISHED state)\n   This\
    \ text has been modified by multiple errata.  It includes\n   modifications from\
    \ Section 3.8.  It is in final form and is not\n   further updated in this document.\n\
    \   ---------\n   Old text: (Section 5.2.5)\n   ---------\n   5.2.5.  Handle Duplicate\
    \ COOKIE-ACK.\n   ---------\n   New text: (Section 5.2.5)\n   ---------\n   5.2.5.\
    \  Handle Duplicate COOKIE ACK.\n   This text is in final form and is not further\
    \ updated in this\n   document.\n   ---------\n   Old text: (Section 8.3)\n  \
    \ ---------\n   By default, an SCTP endpoint SHOULD monitor the reachability of\
    \ the\n   idle destination transport address(es) of its peer by sending a\n  \
    \ HEARTBEAT chunk periodically to the destination transport\n   address(es). \
    \ HEARTBEAT sending MAY begin upon reaching the\n   ESTABLISHED state and is discontinued\
    \ after sending either SHUTDOWN\n   or SHUTDOWN-ACK.  A receiver of a HEARTBEAT\
    \ MUST respond to a\n   HEARTBEAT with a HEARTBEAT-ACK after entering the COOKIE-ECHOED\
    \ state\n   (INIT sender) or the ESTABLISHED state (INIT receiver), up until\n\
    \   reaching the SHUTDOWN-SENT state (SHUTDOWN sender) or the SHUTDOWN-\n   ACK-SENT\
    \ state (SHUTDOWN receiver).\n   ---------\n   New text: (Section 8.3)\n   ---------\n\
    \   By default, an SCTP endpoint SHOULD monitor the reachability of the\n   idle\
    \ destination transport address(es) of its peer by sending a\n   HEARTBEAT chunk\
    \ periodically to the destination transport\n   address(es).  HEARTBEAT sending\
    \ MAY begin upon reaching the\n   ESTABLISHED state and is discontinued after\
    \ sending either SHUTDOWN\n   or SHUTDOWN ACK.  A receiver of a HEARTBEAT MUST\
    \ respond to a\n   HEARTBEAT with a HEARTBEAT ACK after entering the COOKIE-ECHOED\
    \ state\n   (INIT sender) or the ESTABLISHED state (INIT receiver), up until\n\
    \   reaching the SHUTDOWN-SENT state (SHUTDOWN sender) or the\n   SHUTDOWN-ACK-SENT\
    \ state (SHUTDOWN receiver).\n   This text is in final form and is not further\
    \ updated in this\n   document.\n"
- title: 3.9.3.  Solution Description
  contents:
  - "3.9.3.  Solution Description\n   Several typos have been fixed.\n"
- title: 3.10.  CRC32c Sample Code
  contents:
  - '3.10.  CRC32c Sample Code

    '
- title: 3.10.1.  Description of the Problem
  contents:
  - "3.10.1.  Description of the Problem\n   The CRC32c computation is described in\
    \ Appendix B of [RFC4960].\n   However, the corresponding sample code and its\
    \ explanation appear at\n   the end of Appendix C of [RFC4960], which deals with\
    \ ICMP handling.\n"
- title: 3.10.2.  Text Changes to the Document
  contents:
  - "3.10.2.  Text Changes to the Document\n   The text in Appendix C of [RFC4960],\
    \ starting with the following\n   sentence, needs to be moved to the end of Appendix\
    \ B.\n      The following non-normative sample code is taken from an\n      open-source\
    \ CRC generator [WILLIAMS93], using the \"mirroring\"\n      technique and yielding\
    \ a lookup table for SCTP CRC32c with\n      256 entries, each 32 bits wide.\n\
    \   This text has been modified by multiple errata.  It includes\n   modifications\
    \ from Section 3.5.  It is further updated in\n   Section 3.46.\n"
- title: 3.10.3.  Solution Description
  contents:
  - "3.10.3.  Solution Description\n   The text is moved to the appropriate location.\n"
- title: 3.11.  partial_bytes_acked after T3-rtx Expiration
  contents:
  - '3.11.  partial_bytes_acked after T3-rtx Expiration

    '
- title: 3.11.1.  Description of the Problem
  contents:
  - "3.11.1.  Description of the Problem\n   Section 7.2.3 of [RFC4960] explicitly\
    \ states that partial_bytes_acked\n   should be reset to 0 after packet loss detection\
    \ from selective\n   acknowledgment (SACK), but this information is not accounted\
    \ for in\n   the case of T3-rtx timer expiration.\n"
- title: 3.11.2.  Text Changes to the Document
  contents:
  - "3.11.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 7.2.3)\n\
    \   ---------\n   When the T3-rtx timer expires on an address, SCTP should perform\
    \ slow\n   start by:\n   ssthresh = max(cwnd/2, 4*MTU)\n   cwnd = 1*MTU\n   ---------\n\
    \   New text: (Section 7.2.3)\n   ---------\n   When the T3-rtx timer expires\
    \ on an address, SCTP SHOULD perform slow\n   start by:\n   ssthresh = max(cwnd/2,\
    \ 4*MTU)\n   cwnd = 1*MTU\n   partial_bytes_acked = 0\n   This text is in final\
    \ form and is not further updated in this\n   document.\n"
- title: 3.11.3.  Solution Description
  contents:
  - "3.11.3.  Solution Description\n   The new text specifies that partial_bytes_acked\
    \ should be reset to 0\n   after T3-rtx timer expiration.\n"
- title: 3.12.  Order of Adjustments of partial_bytes_acked and cwnd
  contents:
  - '3.12.  Order of Adjustments of partial_bytes_acked and cwnd

    '
- title: 3.12.1.  Description of the Problem
  contents:
  - "3.12.1.  Description of the Problem\n   Section 7.2.2 of [RFC4960] likely implies\
    \ the wrong order of\n   adjustments applied to partial_bytes_acked and cwnd in\
    \ the congestion\n   avoidance phase.\n"
- title: 3.12.2.  Text Changes to the Document
  contents:
  - "3.12.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 7.2.2)\n\
    \   ---------\n   o  When partial_bytes_acked is equal to or greater than cwnd\
    \ and\n      before the arrival of the SACK the sender had cwnd or more bytes\n\
    \      of data outstanding (i.e., before arrival of the SACK, flightsize\n   \
    \   was greater than or equal to cwnd), increase cwnd by MTU, and\n      reset\
    \ partial_bytes_acked to (partial_bytes_acked - cwnd).\n   ---------\n   New text:\
    \ (Section 7.2.2)\n   ---------\n   o  (1) when partial_bytes_acked is equal to\
    \ or greater than cwnd and\n      (2) before the arrival of the SACK the sender\
    \ had cwnd or more\n      bytes of data outstanding (i.e., before the arrival\
    \ of the SACK,\n      flightsize was greater than or equal to cwnd), partial_bytes_acked\n\
    \      is reset to (partial_bytes_acked - cwnd).  Next, cwnd is increased\n  \
    \    by 1*MTU.\n   This text has been modified by multiple errata.  It is further\n\
    \   updated in Section 3.26.\n"
- title: 3.12.3.  Solution Description
  contents:
  - "3.12.3.  Solution Description\n   The new text defines the exact order of adjustments\
    \ of\n   partial_bytes_acked and cwnd in the congestion avoidance phase.\n"
- title: 3.13.  HEARTBEAT ACK and the Association Error Counter
  contents:
  - '3.13.  HEARTBEAT ACK and the Association Error Counter

    '
- title: 3.13.1.  Description of the Problem
  contents:
  - "3.13.1.  Description of the Problem\n   Sections 8.1 and 8.3 of [RFC4960] prescribe\
    \ that the receiver of a\n   HEARTBEAT ACK must reset the association overall\
    \ error count.  In\n   some circumstances, e.g., when a router discards DATA chunks\
    \ but not\n   HEARTBEAT chunks due to the larger size of the DATA chunk, it might\n\
    \   be better to not clear the association error counter on reception of\n   the\
    \ HEARTBEAT ACK and reset it only on reception of the SACK to avoid\n   stalling\
    \ the association.\n"
- title: 3.13.2.  Text Changes to the Document
  contents:
  - "3.13.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 8.1)\n\
    \   ---------\n   The counter shall be reset each time a DATA chunk sent to that\
    \ peer\n   endpoint is acknowledged (by the reception of a SACK) or a HEARTBEAT\n\
    \   ACK is received from the peer endpoint.\n   ---------\n   New text: (Section\
    \ 8.1)\n   ---------\n   The counter MUST be reset each time a DATA chunk sent\
    \ to that peer\n   endpoint is acknowledged (by the reception of a SACK).  When\
    \ a\n   HEARTBEAT ACK is received from the peer endpoint, the counter SHOULD\n\
    \   also be reset.  The receiver of the HEARTBEAT ACK MAY choose not to\n   clear\
    \ the counter if there is outstanding data on the association.\n   This allows\
    \ for handling the possible difference in reachability\n   based on DATA chunks\
    \ and HEARTBEAT chunks.\n   This text is in final form and is not further updated\
    \ in this\n   document.\n   ---------\n   Old text: (Section 8.3)\n   ---------\n\
    \   Upon the receipt of the HEARTBEAT ACK, the sender of the HEARTBEAT\n   should\
    \ clear the error counter of the destination transport address\n   to which the\
    \ HEARTBEAT was sent, and mark the destination transport\n   address as active\
    \ if it is not so marked.  The endpoint may\n   optionally report to the upper\
    \ layer when an inactive destination\n   address is marked as active due to the\
    \ reception of the latest\n   HEARTBEAT ACK.  The receiver of the HEARTBEAT ACK\
    \ must also clear the\n   association overall error count as well (as defined\
    \ in Section 8.1).\n   ---------\n   New text: (Section 8.3)\n   ---------\n \
    \  Upon the receipt of the HEARTBEAT ACK, the sender of the HEARTBEAT\n   MUST\
    \ clear the error counter of the destination transport address to\n   which the\
    \ HEARTBEAT was sent and mark the destination transport\n   address as active\
    \ if it is not so marked.  The endpoint MAY\n   optionally report to the upper\
    \ layer when an inactive destination\n   address is marked as active due to the\
    \ reception of the latest\n   HEARTBEAT ACK.  The receiver of the HEARTBEAT ACK\
    \ SHOULD also clear\n   the association overall error count (as defined in Section\
    \ 8.1).\n   This text has been modified by multiple errata.  It is further\n \
    \  updated in Section 3.23.\n"
- title: 3.13.3.  Solution Description
  contents:
  - "3.13.3.  Solution Description\n   The new text provides the possibility of not\
    \ resetting the\n   association overall error count when a HEARTBEAT ACK is received\
    \ if\n   there are valid reasons for not doing so.\n"
- title: 3.14.  Path for Fast Retransmission
  contents:
  - '3.14.  Path for Fast Retransmission

    '
- title: 3.14.1.  Description of the Problem
  contents:
  - "3.14.1.  Description of the Problem\n   [RFC4960] clearly describes where to\
    \ retransmit data that is timed\n   out when the peer is multi-homed, but the\
    \ same is not stated for fast\n   retransmissions.\n"
- title: 3.14.2.  Text Changes to the Document
  contents:
  - "3.14.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 6.4)\n\
    \   ---------\n   Furthermore, when its peer is multi-homed, an endpoint SHOULD\
    \ try to\n   retransmit a chunk that timed out to an active destination transport\n\
    \   address that is different from the last destination address to which\n   the\
    \ DATA chunk was sent.\n   ---------\n   New text: (Section 6.4)\n   ---------\n\
    \   Furthermore, when its peer is multi-homed, an endpoint SHOULD try to\n   retransmit\
    \ a chunk that timed out to an active destination transport\n   address that is\
    \ different from the last destination address to which\n   the DATA chunk was\
    \ sent.\n   When its peer is multi-homed, an endpoint SHOULD send fast\n   retransmissions\
    \ to the same destination transport address to which\n   the original data was\
    \ sent.  If the primary path has been changed and\n   the original data was sent\
    \ to the old primary path before the Fast\n   Retransmit, the implementation MAY\
    \ send it to the new primary path.\n   This text is in final form and is not further\
    \ updated in this\n   document.\n"
- title: 3.14.3.  Solution Description
  contents:
  - "3.14.3.  Solution Description\n   The new text clarifies where to send fast retransmissions.\n"
- title: 3.15.  Transmittal in Fast Recovery
  contents:
  - '3.15.  Transmittal in Fast Recovery

    '
- title: 3.15.1.  Description of the Problem
  contents:
  - "3.15.1.  Description of the Problem\n   The Fast Retransmit on Gap Reports algorithm\
    \ intends that only the\n   very first packet may be sent regardless of cwnd in\
    \ the Fast Recovery\n   phase, but rule 3) in Section 7.2.4 of [RFC4960] misses\
    \ this\n   clarification.\n"
- title: 3.15.2.  Text Changes to the Document
  contents:
  - "3.15.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 7.2.4)\n\
    \   ---------\n   3)  Determine how many of the earliest (i.e., lowest TSN) DATA\
    \ chunks\n       marked for retransmission will fit into a single packet, subject\n\
    \       to constraint of the path MTU of the destination transport\n       address\
    \ to which the packet is being sent.  Call this value K.\n       Retransmit those\
    \ K DATA chunks in a single packet.  When a Fast\n       Retransmit is being performed,\
    \ the sender SHOULD ignore the value\n       of cwnd and SHOULD NOT delay retransmission\
    \ for this single\n       packet.\n   ---------\n   New text: (Section 7.2.4)\n\
    \   ---------\n   3)  If not in Fast Recovery, determine how many of the earliest\n\
    \       (i.e., lowest TSN) DATA chunks marked for retransmission will fit\n  \
    \     into a single packet, subject to constraint of the PMTU of\n       the destination\
    \ transport address to which the packet is being\n       sent.  Call this value\
    \ K.  Retransmit those K DATA chunks in a\n       single packet.  When a Fast\
    \ Retransmit is being performed, the\n       sender SHOULD ignore the value of\
    \ cwnd and SHOULD NOT delay\n       retransmission for this single packet.\n \
    \  This text is in final form and is not further updated in this\n   document.\n"
- title: 3.15.3.  Solution Description
  contents:
  - "3.15.3.  Solution Description\n   The new text explicitly specifies that only\
    \ the first packet in the\n   Fast Recovery phase be sent and that the cwnd limitations\
    \ be\n   disregarded.\n"
- title: 3.16.  Initial Value of ssthresh
  contents:
  - '3.16.  Initial Value of ssthresh

    '
- title: 3.16.1.  Description of the Problem
  contents:
  - "3.16.1.  Description of the Problem\n   The initial value of ssthresh should\
    \ be set arbitrarily high.  Using\n   the advertised receiver window of the peer\
    \ is inappropriate if the\n   peer increases its window after the handshake. \
    \ Furthermore, a higher\n   requirement level needs to be used, since not following\
    \ the advice\n   may result in performance problems.\n"
- title: 3.16.2.  Text Changes to the Document
  contents:
  - "3.16.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 7.2.1)\n\
    \   ---------\n   o  The initial value of ssthresh MAY be arbitrarily high (for\n\
    \      example, implementations MAY use the size of the receiver\n      advertised\
    \ window).\n   ---------\n   New text: (Section 7.2.1)\n   ---------\n   o  The\
    \ initial value of ssthresh SHOULD be arbitrarily high (e.g.,\n      the size\
    \ of the largest possible advertised window).\n   This text is in final form and\
    \ is not further updated in this\n   document.\n"
- title: 3.16.3.  Solution Description
  contents:
  - "3.16.3.  Solution Description\n   The same value as the value suggested in [RFC5681],\
    \ Section 3.1, is\n   now used as an appropriate initial value.  Also, the same\
    \ requirement\n   level is used.\n"
- title: 3.17.  Automatically CONFIRMED Addresses
  contents:
  - '3.17.  Automatically CONFIRMED Addresses

    '
- title: 3.17.1.  Description of the Problem
  contents:
  - "3.17.1.  Description of the Problem\n   The Path Verification procedure of [RFC4960]\
    \ prescribes that any\n   address passed to the sender of the INIT by its upper\
    \ layer be\n   automatically CONFIRMED.  This, however, is unclear if (1) only\n\
    \   addresses in the request to initiate association establishment or\n   (2)\
    \ any addresses provided by the upper layer in any requests (e.g.,\n   in 'Set\
    \ Primary') are considered.\n"
- title: 3.17.2.  Text Changes to the Document
  contents:
  - "3.17.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 5.4)\n\
    \   ---------\n   1)  Any address passed to the sender of the INIT by its upper\
    \ layer\n      is automatically considered to be CONFIRMED.\n   ---------\n  \
    \ New text: (Section 5.4)\n   ---------\n   1)  Any addresses passed to the sender\
    \ of the INIT by its upper layer\n       in the request to initialize an association\
    \ are automatically\n       considered to be CONFIRMED.\n   This text is in final\
    \ form and is not further updated in this\n   document.\n"
- title: 3.17.3.  Solution Description
  contents:
  - "3.17.3.  Solution Description\n   The new text clarifies that only addresses\
    \ provided by the upper\n   layer in the request to initialize an association\
    \ are automatically\n   CONFIRMED.\n"
- title: 3.18.  Only One Packet after Retransmission Timeout
  contents:
  - '3.18.  Only One Packet after Retransmission Timeout

    '
- title: 3.18.1.  Description of the Problem
  contents:
  - "3.18.1.  Description of the Problem\n   [RFC4960] is not completely clear when\
    \ it describes data transmission\n   after T3-rtx timer expiration.  Section 7.2.1\
    \ of [RFC4960] does not\n   specify how many packets are allowed to be sent after\
    \ T3-rtx timer\n   expiration if more than one packet fits into cwnd.  At the\
    \ same time,\n   Section 7.2.3 of [RFC4960] has text without normative language\
    \ saying\n   that SCTP should ensure that no more than one packet will be in\n\
    \   flight after T3-rtx timer expiration until successful\n   acknowledgement.\
    \  The text is therefore inconsistent.\n"
- title: 3.18.2.  Text Changes to the Document
  contents:
  - "3.18.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 7.2.1)\n\
    \   ---------\n   o  The initial cwnd after a retransmission timeout MUST be no\
    \ more\n      than 1*MTU.\n   ---------\n   New text: (Section 7.2.1)\n   ---------\n\
    \   o  The initial cwnd after a retransmission timeout MUST be no more\n     \
    \ than 1*MTU, and only one packet is allowed to be in flight until\n      successful\
    \ acknowledgement.\n   This text is in final form and is not further updated in\
    \ this\n   document.\n"
- title: 3.18.3.  Solution Description
  contents:
  - "3.18.3.  Solution Description\n   The new text clearly specifies that only one\
    \ packet is allowed to be\n   sent after T3-rtx timer expiration until successful\
    \ acknowledgement.\n"
- title: 3.19.  INIT ACK Path for INIT in COOKIE-WAIT State
  contents:
  - '3.19.  INIT ACK Path for INIT in COOKIE-WAIT State

    '
- title: 3.19.1.  Description of the Problem
  contents:
  - "3.19.1.  Description of the Problem\n   In the case of an INIT received in the\
    \ COOKIE-WAIT state, [RFC4960]\n   prescribes that an INIT ACK be sent to the\
    \ same destination address\n   to which the original INIT has been sent.  [RFC4960]\
    \ does not address\n   the possibility of the upper layer providing multiple remote\
    \ IP\n   addresses while requesting the association establishment.  If the\n \
    \  upper layer has provided multiple IP addresses and only a subset of\n   these\
    \ addresses are supported by the peer, then the destination\n   address of the\
    \ original INIT may be absent in the incoming INIT and\n   sending an INIT ACK\
    \ to that address is useless.\n"
- title: 3.19.2.  Text Changes to the Document
  contents:
  - "3.19.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 5.2.1)\n\
    \   ---------\n   Upon receipt of an INIT in the COOKIE-WAIT state, an endpoint\
    \ MUST\n   respond with an INIT ACK using the same parameters it sent in its\n\
    \   original INIT chunk (including its Initiate Tag, unchanged).  When\n   responding,\
    \ the endpoint MUST send the INIT ACK back to the same\n   address that the original\
    \ INIT (sent by this endpoint) was sent.\n   ---------\n   New text: (Section\
    \ 5.2.1)\n   ---------\n   Upon receipt of an INIT in the COOKIE-WAIT state, an\
    \ endpoint MUST\n   respond with an INIT ACK using the same parameters it sent\
    \ in its\n   original INIT chunk (including its Initiate Tag, unchanged).  When\n\
    \   responding, the following rules MUST be applied:\n   1)  The INIT ACK MUST\
    \ only be sent to an address passed by the upper\n       layer in the request\
    \ to initialize the association.\n   2)  The INIT ACK MUST only be sent to an\
    \ address reported in the\n       incoming INIT.\n   3)  The INIT ACK SHOULD be\
    \ sent to the source address of the received\n       INIT.\n   This text is in\
    \ final form and is not further updated in this\n   document.\n"
- title: 3.19.3.  Solution Description
  contents:
  - "3.19.3.  Solution Description\n   The new text requires sending an INIT ACK to\
    \ a destination address\n   that is passed by the upper layer and reported in\
    \ the incoming INIT.\n   If the source address of the INIT meets these conditions,\
    \ sending the\n   INIT ACK to the source address of the INIT is the preferred\
    \ behavior.\n"
- title: 3.20.  Zero Window Probing and Unreachable Primary Path
  contents:
  - '3.20.  Zero Window Probing and Unreachable Primary Path

    '
- title: 3.20.1.  Description of the Problem
  contents:
  - "3.20.1.  Description of the Problem\n   Section 6.1 of [RFC4960] states that\
    \ when sending zero window probes,\n   SCTP should neither increment the association\
    \ counter nor increment\n   the destination address error counter if it continues\
    \ to receive new\n   packets from the peer.  However, the reception of new packets\
    \ from\n   the peer does not guarantee the peer's reachability, and if the\n \
    \  destination address becomes unreachable during zero window probing,\n   SCTP\
    \ cannot get an updated rwnd until it switches the destination\n   address for\
    \ probes.\n"
- title: 3.20.2.  Text Changes to the Document
  contents:
  - "3.20.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 6.1\
    \ A))\n   ---------\n   If the sender continues to receive new packets from the\
    \ receiver\n   while doing zero window probing, the unacknowledged window probes\n\
    \   should not increment the error counter for the association or any\n   destination\
    \ transport address.  This is because the receiver MAY keep\n   its window closed\
    \ for an indefinite time.  Refer to Section 6.2 on\n   the receiver behavior when\
    \ it advertises a zero window.\n   ---------\n   New text: (Section 6.1 A))\n\
    \   ---------\n   If the sender continues to receive SACKs from the peer while\
    \ doing\n   zero window probing, the unacknowledged window probes SHOULD NOT\n\
    \   increment the error counter for the association or any destination\n   transport\
    \ address.  This is because the receiver could keep its\n   window closed for\
    \ an indefinite time.  Section 6.2 describes the\n   receiver behavior when it\
    \ advertises a zero window.\n   This text is in final form and is not further\
    \ updated in this\n   document.\n"
- title: 3.20.3.  Solution Description
  contents:
  - "3.20.3.  Solution Description\n   The new text clarifies that if the receiver\
    \ continues to send SACKs,\n   the sender of probes should not increment the error\
    \ counter of the\n   association and the destination address even if the SACKs\
    \ do not\n   acknowledge the probes.\n"
- title: 3.21.  Normative Language in Section 10 of RFC 4960
  contents:
  - '3.21.  Normative Language in Section 10 of RFC 4960

    '
- title: 3.21.1.  Description of the Problem
  contents:
  - "3.21.1.  Description of the Problem\n   Section 10 of [RFC4960] is informative.\
    \  Therefore, normative\n   language such as MUST and MAY cannot be used there.\
    \  However, there\n   are several places in Section 10 of [RFC4960] where MUST\
    \ and MAY\n   are used.\n"
- title: 3.21.2.  Text Changes to the Document
  contents:
  - "3.21.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 10.1\
    \ E))\n   ---------\n   o  no-bundle flag - instructs SCTP not to bundle this\
    \ user data with\n      other outbound DATA chunks.  SCTP MAY still bundle even\
    \ when this\n      flag is present, when faced with network congestion.\n   ---------\n\
    \   New text: (Section 10.1 E))\n   ---------\n   o  no-bundle flag - instructs\
    \ SCTP not to bundle this user data with\n      other outbound DATA chunks.  When\
    \ faced with network congestion,\n      SCTP may still bundle the data, even when\
    \ this flag is present.\n   This text is in final form and is not further updated\
    \ in this\n   document.\n   ---------\n   Old text: (Section 10.1 G))\n   ---------\n\
    \   o  Stream Sequence Number - the Stream Sequence Number assigned by\n     \
    \ the sending SCTP peer.\n   o  partial flag - if this returned flag is set to\
    \ 1, then this\n      Receive contains a partial delivery of the whole message.\
    \  When\n      this flag is set, the stream id and Stream Sequence Number MUST\n\
    \      accompany this receive.  When this flag is set to 0, it indicates\n   \
    \   that no more deliveries will be received for this Stream Sequence\n      Number.\n\
    \   ---------\n   New text: (Section 10.1 G))\n   ---------\n   o  stream sequence\
    \ number - the Stream Sequence Number assigned by\n      the sending SCTP peer.\n\
    \   o  partial flag - if this returned flag is set to 1, then this\n      primitive\
    \ contains a partial delivery of the whole message.  When\n      this flag is\
    \ set, the stream id and stream sequence number must\n      accompany this primitive.\
    \  When this flag is set to 0, it\n      indicates that no more deliveries will\
    \ be received for this stream\n      sequence number.\n   This text is in final\
    \ form and is not further updated in this\n   document.\n   ---------\n   Old\
    \ text: (Section 10.1 N))\n   ---------\n   o  Stream Sequence Number - this value\
    \ is returned indicating the\n      Stream Sequence Number that was associated\
    \ with the message.\n   o  partial flag - if this returned flag is set to 1, then\
    \ this\n      message is a partial delivery of the whole message.  When this\n\
    \      flag is set, the stream id and Stream Sequence Number MUST\n      accompany\
    \ this receive.  When this flag is set to 0, it indicates\n      that no more\
    \ deliveries will be received for this Stream Sequence\n      Number.\n   ---------\n\
    \   New text: (Section 10.1 N))\n   ---------\n   o  stream sequence number -\
    \ this value is returned indicating the\n      Stream Sequence Number that was\
    \ associated with the message.\n   o  partial flag - if this returned flag is\
    \ set to 1, then this\n      message is a partial delivery of the whole message.\
    \  When this\n      flag is set, the stream id and stream sequence number must\n\
    \      accompany this primitive.  When this flag is set to 0, it\n      indicates\
    \ that no more deliveries will be received for this stream\n      sequence number.\n\
    \   This text is in final form and is not further updated in this\n   document.\n\
    \   ---------\n   Old text: (Section 10.1 O))\n   ---------\n   o  Stream Sequence\
    \ Number - this value is returned indicating the\n      Stream Sequence Number\
    \ that was associated with the message.\n   o  partial flag - if this returned\
    \ flag is set to 1, then this\n      message is a partial delivery of the whole\
    \ message.  When this\n      flag is set, the stream id and Stream Sequence Number\
    \ MUST\n      accompany this receive.  When this flag is set to 0, it indicates\n\
    \      that no more deliveries will be received for this Stream Sequence\n   \
    \   Number.\n   ---------\n   New text: (Section 10.1 O))\n   ---------\n   o\
    \  stream sequence number - this value is returned indicating the\n      Stream\
    \ Sequence Number that was associated with the message.\n   o  partial flag -\
    \ if this returned flag is set to 1, then this\n      message is a partial delivery\
    \ of the whole message.  When this\n      flag is set, the stream id and stream\
    \ sequence number must\n      accompany this primitive.  When this flag is set\
    \ to 0, it\n      indicates that no more deliveries will be received for this\
    \ stream\n      sequence number.\n   This text is in final form and is not further\
    \ updated in this\n   document.\n"
- title: 3.21.3.  Solution Description
  contents:
  - "3.21.3.  Solution Description\n   The normative language is removed from Section\
    \ 10.  In addition, the\n   consistency of the text has been improved.\n"
- title: 3.22.  Increase of partial_bytes_acked in Congestion Avoidance
  contents:
  - '3.22.  Increase of partial_bytes_acked in Congestion Avoidance

    '
- title: 3.22.1.  Description of the Problem
  contents:
  - "3.22.1.  Description of the Problem\n   Two issues have been discovered in the\
    \ text in Section 7.2.2 of\n   [RFC4960] regarding partial_bytes_acked handling:\n\
    \   o  If the Cumulative TSN Ack Point is not advanced but the SACK chunk\n  \
    \    acknowledges new TSNs in the Gap Ack Blocks, these newly\n      acknowledged\
    \ TSNs are not considered for partial_bytes_acked even\n      though these TSNs\
    \ were successfully received by the peer.\n   o  Duplicate TSNs are not considered\
    \ in partial_bytes_acked even\n      though they confirm that the DATA chunks\
    \ were successfully\n      received by the peer.\n"
- title: 3.22.2.  Text Changes to the Document
  contents:
  - "3.22.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 7.2.2)\n\
    \   ---------\n   o  Whenever cwnd is greater than ssthresh, upon each SACK arrival\n\
    \      that advances the Cumulative TSN Ack Point, increase\n      partial_bytes_acked\
    \ by the total number of bytes of all new chunks\n      acknowledged in that SACK\
    \ including chunks acknowledged by the new\n      Cumulative TSN Ack and by Gap\
    \ Ack Blocks.\n   ---------\n   New text: (Section 7.2.2)\n   ---------\n   o\
    \  Whenever cwnd is greater than ssthresh, upon each SACK arrival,\n      increase\
    \ partial_bytes_acked by the total number of bytes of all\n      new chunks acknowledged\
    \ in that SACK, including chunks\n      acknowledged by the new Cumulative TSN\
    \ Ack, by Gap Ack Blocks,\n      and by the number of bytes of duplicated chunks\
    \ reported in\n      Duplicate TSNs.\n   This text has been modified by multiple\
    \ errata.  It is further\n   updated in Section 3.26.\n"
- title: 3.22.3.  Solution Description
  contents:
  - "3.22.3.  Solution Description\n   In the new text, partial_bytes_acked is increased\
    \ by TSNs reported as\n   duplicated, as well as TSNs newly acknowledged in Gap\
    \ Ack Blocks,\n   even if the Cumulative TSN Ack Point is not advanced.\n"
- title: 3.23.  Inconsistent Handling of Notifications
  contents:
  - '3.23.  Inconsistent Handling of Notifications

    '
- title: 3.23.1.  Description of the Problem
  contents:
  - "3.23.1.  Description of the Problem\n   [RFC4960] uses inconsistent normative\
    \ and non-normative language when\n   describing rules for sending notifications\
    \ to the upper layer.  For\n   example, Section 8.2 of [RFC4960] says that when\
    \ a destination\n   address becomes inactive due to an unacknowledged DATA chunk\
    \ or\n   HEARTBEAT chunk, SCTP SHOULD send a notification to the upper layer;\n\
    \   however, Section 8.3 of [RFC4960] says that when a destination\n   address\
    \ becomes inactive due to an unacknowledged HEARTBEAT chunk,\n   SCTP may send\
    \ a notification to the upper layer.\n   These inconsistent descriptions need\
    \ to be corrected.\n"
- title: 3.23.2.  Text Changes to the Document
  contents:
  - "3.23.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 8.1)\n\
    \   ---------\n   An endpoint shall keep a counter on the total number of consecutive\n\
    \   retransmissions to its peer (this includes retransmissions to all the\n  \
    \ destination transport addresses of the peer if it is multi-homed),\n   including\
    \ unacknowledged HEARTBEAT chunks.\n   ---------\n   New text: (Section 8.1)\n\
    \   ---------\n   An endpoint SHOULD keep a counter on the total number of consecutive\n\
    \   retransmissions to its peer (this includes data retransmissions to\n   all\
    \ the destination transport addresses of the peer if it is\n   multi-homed), including\
    \ the number of unacknowledged HEARTBEAT chunks\n   observed on the path that\
    \ is currently used for data transfer.\n   Unacknowledged HEARTBEAT chunks observed\
    \ on paths different from the\n   path currently used for data transfer SHOULD\
    \ NOT increment the\n   association error counter, as this could lead to association\
    \ closure\n   even if the path that is currently used for data transfer is\n \
    \  available (but idle).  If the value of this counter exceeds the limit\n   indicated\
    \ in the protocol parameter 'Association.Max.Retrans', the\n   endpoint SHOULD\
    \ consider the peer endpoint unreachable and SHALL stop\n   transmitting any more\
    \ data to it (and thus the association enters the\n   CLOSED state).  In addition,\
    \ the endpoint SHOULD report the failure\n   to the upper layer and optionally\
    \ report back all outstanding user\n   data remaining in its outbound queue. \
    \ The association is\n   automatically closed when the peer endpoint becomes unreachable.\n\
    \   This text has been modified by multiple errata.  It includes\n   modifications\
    \ from Section 3.6.  It is in final form and is not\n   further updated in this\
    \ document.\n   ---------\n   Old text: (Section 8.2)\n   ---------\n   When an\
    \ outstanding TSN is acknowledged or a HEARTBEAT sent to that\n   address is acknowledged\
    \ with a HEARTBEAT ACK, the endpoint shall\n   clear the error counter of the\
    \ destination transport address to which\n   the DATA chunk was last sent (or\
    \ HEARTBEAT was sent).  When the peer\n   endpoint is multi-homed and the last\
    \ chunk sent to it was a\n   retransmission to an alternate address, there exists\
    \ an ambiguity as\n   to whether or not the acknowledgement should be credited\
    \ to the\n   address of the last chunk sent.  However, this ambiguity does not\n\
    \   seem to bear any significant consequence to SCTP behavior.  If this\n   ambiguity\
    \ is undesirable, the transmitter may choose not to clear the\n   error counter\
    \ if the last chunk sent was a retransmission.\n   ---------\n   New text: (Section\
    \ 8.2)\n   ---------\n   When an outstanding TSN is acknowledged or a HEARTBEAT\
    \ sent to that\n   address is acknowledged with a HEARTBEAT ACK, the endpoint\
    \ SHOULD\n   clear the error counter of the destination transport address to which\n\
    \   the DATA chunk was last sent (or HEARTBEAT was sent) and SHOULD also\n   report\
    \ to the upper layer when an inactive destination address is\n   marked as active.\
    \  When the peer endpoint is multi-homed and the last\n   chunk sent to it was\
    \ a retransmission to an alternate address, there\n   exists an ambiguity as to\
    \ whether or not the acknowledgement could be\n   credited to the address of the\
    \ last chunk sent.  However, this\n   ambiguity does not seem to have significant\
    \ consequences for SCTP\n   behavior.  If this ambiguity is undesirable, the transmitter\
    \ MAY\n   choose not to clear the error counter if the last chunk sent was a\n\
    \   retransmission.\n   This text is in final form and is not further updated\
    \ in this\n   document.\n   ---------\n   Old text: (Section 8.3)\n   ---------\n\
    \   When the value of this counter reaches the protocol parameter\n   'Path.Max.Retrans',\
    \ the endpoint should mark the corresponding\n   destination address as inactive\
    \ if it is not so marked, and may also\n   optionally report to the upper layer\
    \ the change of reachability of\n   this destination address.  After this, the\
    \ endpoint should continue\n   HEARTBEAT on this destination address but should\
    \ stop increasing the\n   counter.\n   ---------\n   New text: (Section 8.3)\n\
    \   ---------\n   When the value of this counter exceeds the protocol parameter\n\
    \   'Path.Max.Retrans', the endpoint SHOULD mark the corresponding\n   destination\
    \ address as inactive if it is not so marked and SHOULD\n   also report to the\
    \ upper layer the change in reachability of this\n   destination address.  After\
    \ this, the endpoint SHOULD continue\n   HEARTBEAT on this destination address\
    \ but SHOULD stop increasing the\n   counter.\n   This text has been modified\
    \ by multiple errata.  It includes\n   modifications from Section 3.1.  It is\
    \ in final form and is not\n   further updated in this document.\n   ---------\n\
    \   Old text: (Section 8.3)\n   ---------\n   Upon the receipt of the HEARTBEAT\
    \ ACK, the sender of the HEARTBEAT\n   should clear the error counter of the destination\
    \ transport address\n   to which the HEARTBEAT was sent, and mark the destination\
    \ transport\n   address as active if it is not so marked.  The endpoint may\n\
    \   optionally report to the upper layer when an inactive destination\n   address\
    \ is marked as active due to the reception of the latest\n   HEARTBEAT ACK.  The\
    \ receiver of the HEARTBEAT ACK must also clear the\n   association overall error\
    \ count as well (as defined in Section 8.1).\n   ---------\n   New text: (Section\
    \ 8.3)\n   ---------\n   Upon the receipt of the HEARTBEAT ACK, the sender of\
    \ the HEARTBEAT\n   SHOULD clear the error counter of the destination transport\
    \ address\n   to which the HEARTBEAT was sent and mark the destination transport\n\
    \   address as active if it is not so marked.  The endpoint SHOULD report\n  \
    \ to the upper layer when an inactive destination address is marked as\n   active\
    \ due to the reception of the latest HEARTBEAT ACK.  The\n   receiver of the HEARTBEAT\
    \ ACK SHOULD also clear the association\n   overall error count (as defined in\
    \ Section 8.1).\n   This text has been modified by multiple errata.  It includes\n\
    \   modifications from Section 3.13.  It is in final form and is not\n   further\
    \ updated in this document.\n   ---------\n   Old text: (Section 9.2)\n   ---------\n\
    \   An endpoint should limit the number of retransmissions of the\n   SHUTDOWN\
    \ chunk to the protocol parameter 'Association.Max.Retrans'.\n   If this threshold\
    \ is exceeded, the endpoint should destroy the TCB\n   and MUST report the peer\
    \ endpoint unreachable to the upper layer (and\n   thus the association enters\
    \ the CLOSED state).\n   ---------\n   New text: (Section 9.2)\n   ---------\n\
    \   An endpoint SHOULD limit the number of retransmissions of the\n   SHUTDOWN\
    \ chunk to the protocol parameter 'Association.Max.Retrans'.\n   If this threshold\
    \ is exceeded, the endpoint SHOULD destroy the TCB\n   and SHOULD report the peer\
    \ endpoint unreachable to the upper layer\n   (and thus the association enters\
    \ the CLOSED state).\n   This text is in final form and is not further updated\
    \ in this\n   document.\n   ---------\n   Old text: (Section 9.2)\n   ---------\n\
    \   The sender of the SHUTDOWN ACK should limit the number of\n   retransmissions\
    \ of the SHUTDOWN ACK chunk to the protocol parameter\n   'Association.Max.Retrans'.\
    \  If this threshold is exceeded, the\n   endpoint should destroy the TCB and\
    \ may report the peer endpoint\n   unreachable to the upper layer (and thus the\
    \ association enters the\n   CLOSED state).\n   ---------\n   New text: (Section\
    \ 9.2)\n   ---------\n   The sender of the SHUTDOWN ACK SHOULD limit the number\
    \ of\n   retransmissions of the SHUTDOWN ACK chunk to the protocol parameter\n\
    \   'Association.Max.Retrans'.  If this threshold is exceeded, the\n   endpoint\
    \ SHOULD destroy the TCB and SHOULD report the peer endpoint\n   unreachable to\
    \ the upper layer (and thus the association enters the\n   CLOSED state).\n  \
    \ This text is in final form and is not further updated in this\n   document.\n"
- title: 3.23.3.  Solution Description
  contents:
  - "3.23.3.  Solution Description\n   The inconsistencies are removed by consistently\
    \ using SHOULD.\n"
- title: 3.24.  SACK.Delay Not Listed as a Protocol Parameter
  contents:
  - '3.24.  SACK.Delay Not Listed as a Protocol Parameter

    '
- title: 3.24.1.  Description of the Problem
  contents:
  - "3.24.1.  Description of the Problem\n   SCTP as specified in [RFC4960] supports\
    \ delaying SACKs.  The timer\n   value for this is a parameter, and Section 6.2\
    \ of [RFC4960] specifies\n   a default and maximum value for it.  However, (1)\
    \ defining a name for\n   this parameter and (2) listing it in the table of protocol\
    \ parameters\n   in Section 15 of [RFC4960] are missing.\n   This issue was reported\
    \ as an errata for [RFC4960] with\n   Errata ID 4656.\n"
- title: 3.24.2.  Text Changes to the Document
  contents:
  - "3.24.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 6.2)\n\
    \   ---------\n   An implementation MUST NOT allow the maximum delay to be configured\n\
    \   to be more than 500 ms.  In other words, an implementation MAY lower\n   this\
    \ value below 500 ms but MUST NOT raise it above 500 ms.\n   ---------\n   New\
    \ text: (Section 6.2)\n   ---------\n   An implementation MUST NOT allow the maximum\
    \ delay (protocol\n   parameter 'SACK.Delay') to be configured to be more than\
    \ 500 ms.  In\n   other words, an implementation MAY lower the value of SACK.Delay\n\
    \   below 500 ms but MUST NOT raise it above 500 ms.\n   This text is in final\
    \ form and is not further updated in this\n   document.\n   ---------\n   Old\
    \ text: (Section 15)\n   ---------\n   The following protocol parameters are RECOMMENDED:\n\
    \      RTO.Initial - 3 seconds\n      RTO.Min - 1 second\n      RTO.Max - 60 seconds\n\
    \      Max.Burst - 4\n      RTO.Alpha - 1/8\n      RTO.Beta - 1/4\n      Valid.Cookie.Life\
    \ - 60 seconds\n      Association.Max.Retrans - 10 attempts\n      Path.Max.Retrans\
    \ - 5 attempts (per destination address)\n      Max.Init.Retransmits - 8 attempts\n\
    \      HB.interval - 30 seconds\n      HB.Max.Burst - 1\n   ---------\n   New\
    \ text: (Section 15)\n   ---------\n   The following protocol parameters are RECOMMENDED:\n\
    \      RTO.Initial: 3 seconds\n      RTO.Min: 1 second\n      RTO.Max: 60 seconds\n\
    \      Max.Burst: 4\n      RTO.Alpha: 1/8\n      RTO.Beta: 1/4\n      Valid.Cookie.Life:\
    \ 60 seconds\n      Association.Max.Retrans: 10 attempts\n      Path.Max.Retrans:\
    \ 5 attempts (per destination address)\n      Max.Init.Retransmits: 8 attempts\n\
    \      HB.interval: 30 seconds\n      HB.Max.Burst: 1\n      SACK.Delay: 200 milliseconds\n\
    \   This text has been modified by multiple errata.  It is further\n   updated\
    \ in Section 3.32.\n"
- title: 3.24.3.  Solution Description
  contents:
  - "3.24.3.  Solution Description\n   The parameter is given the name 'SACK.Delay'\
    \ and added to the list of\n   protocol parameters.\n"
- title: 3.25.  Processing of Chunks in an Incoming SCTP Packet
  contents:
  - '3.25.  Processing of Chunks in an Incoming SCTP Packet

    '
- title: 3.25.1.  Description of the Problem
  contents:
  - "3.25.1.  Description of the Problem\n   There are a few places in [RFC4960] where\
    \ text specifies that the\n   receiver of a packet must discard it while processing\
    \ the chunks of\n   the packet.  Whether or not the receiver has to roll back\
    \ state\n   changes already performed while processing the packet is unclear.\n\
    \   The intention of [RFC4960] is to process an incoming packet chunk by\n   chunk\
    \ and not to perform any prescreening of chunks in the received\n   packet.  Thus,\
    \ by discarding one chunk, the receiver also causes the\n   discarding of all\
    \ further chunks.\n"
- title: 3.25.2.  Text Changes to the Document
  contents:
  - "3.25.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 3.2)\n\
    \   ---------\n   00 -  Stop processing this SCTP packet and discard it, do not\n\
    \         process any further chunks within it.\n   01 -  Stop processing this\
    \ SCTP packet and discard it, do not\n         process any further chunks within\
    \ it, and report the\n         unrecognized chunk in an 'Unrecognized Chunk Type'.\n\
    \   ---------\n   New text: (Section 3.2)\n   ---------\n   00 -  Stop processing\
    \ this SCTP packet; discard the unrecognized\n         chunk and all further chunks.\n\
    \   01 -  Stop processing this SCTP packet, discard the unrecognized\n       \
    \  chunk and all further chunks, and report the unrecognized\n         chunk in\
    \ an 'Unrecognized Chunk Type'.\n   This text is in final form and is not further\
    \ updated in this\n   document.\n   ---------\n   Old text: (Section 11.3)\n \
    \  ---------\n   It is helpful for some firewalls if they can inspect just the\
    \ first\n   fragment of a fragmented SCTP packet and unambiguously determine\n\
    \   whether it corresponds to an INIT chunk (for further information,\n   please\
    \ refer to [RFC1858]).  Accordingly, we stress the requirements,\n   stated in\
    \ Section 3.1, that (1) an INIT chunk MUST NOT be bundled\n   with any other chunk\
    \ in a packet, and (2) a packet containing an INIT\n   chunk MUST have a zero\
    \ Verification Tag.  Furthermore, we require\n   that the receiver of an INIT\
    \ chunk MUST enforce these rules by\n   silently discarding an arriving packet\
    \ with an INIT chunk that is\n   bundled with other chunks or has a non-zero verification\
    \ tag and\n   contains an INIT-chunk.\n   ---------\n   New text: (Section 11.3)\n\
    \   ---------\n   It is helpful for some firewalls if they can inspect just the\
    \ first\n   fragment of a fragmented SCTP packet and unambiguously determine\n\
    \   whether it corresponds to an INIT chunk (for further information,\n   please\
    \ refer to [RFC1858]).  Accordingly, we stress the requirements,\n   as stated\
    \ in Section 3.1, that (1) an INIT chunk MUST NOT be bundled\n   with any other\
    \ chunk in a packet and (2) a packet containing an INIT\n   chunk MUST have a\
    \ zero Verification Tag.  The receiver of an INIT\n   chunk MUST silently discard\
    \ the INIT chunk and all further chunks if\n   the INIT chunk is bundled with\
    \ other chunks or the packet has a\n   non-zero Verification Tag.\n   This text\
    \ is in final form and is not further updated in this\n   document.\n"
- title: 3.25.3.  Solution Description
  contents:
  - "3.25.3.  Solution Description\n   The new text makes it clear that chunks can\
    \ be processed from the\n   beginning to the end and that no rollback or prescreening\
    \ is\n   required.\n"
- title: 3.26.  Increasing the cwnd in the Congestion Avoidance Phase
  contents:
  - '3.26.  Increasing the cwnd in the Congestion Avoidance Phase

    '
- title: 3.26.1.  Description of the Problem
  contents:
  - "3.26.1.  Description of the Problem\n   Section 7.2.2 of [RFC4960] prescribes\
    \ that cwnd be increased by 1*MTU\n   per RTT if the sender has cwnd or more bytes\
    \ of data outstanding to\n   the corresponding address in the congestion avoidance\
    \ phase.\n   However, this is described without normative language.  Moreover,\n\
    \   Section 7.2.2 of [RFC4960] includes an algorithm that specifies how\n   an\
    \ implementation can achieve this, but this algorithm is\n   underspecified and\
    \ actually allows increasing cwnd by more than 1*MTU\n   per RTT.\n"
- title: 3.26.2.  Text Changes to the Document
  contents:
  - "3.26.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 7.2.2)\n\
    \   ---------\n   When cwnd is greater than ssthresh, cwnd should be incremented\
    \ by\n   1*MTU per RTT if the sender has cwnd or more bytes of data\n   outstanding\
    \ for the corresponding transport address.\n   ---------\n   New text: (Section\
    \ 7.2.2)\n   ---------\n   When cwnd is greater than ssthresh, cwnd SHOULD be\
    \ incremented by\n   1*MTU per RTT if the sender has cwnd or more bytes of data\n\
    \   outstanding for the corresponding transport address.  The basic\n   guidelines\
    \ for incrementing cwnd during congestion avoidance are as\n   follows:\n   o\
    \  SCTP MAY increment cwnd by 1*MTU.\n   o  SCTP SHOULD increment cwnd by 1*MTU\
    \ once per RTT when the sender\n      has cwnd or more bytes of data outstanding\
    \ for the corresponding\n      transport address.\n   o  SCTP MUST NOT increment\
    \ cwnd by more than 1*MTU per RTT.\n   This text is in final form and is not further\
    \ updated in this\n   document.\n   ---------\n   Old text: (Section 7.2.2)\n\
    \   ---------\n   o  Whenever cwnd is greater than ssthresh, upon each SACK arrival\n\
    \      that advances the Cumulative TSN Ack Point, increase\n      partial_bytes_acked\
    \ by the total number of bytes of all new chunks\n      acknowledged in that SACK\
    \ including chunks acknowledged by the new\n      Cumulative TSN Ack and by Gap\
    \ Ack Blocks.\n   o  When partial_bytes_acked is equal to or greater than cwnd\
    \ and\n      before the arrival of the SACK the sender had cwnd or more bytes\n\
    \      of data outstanding (i.e., before arrival of the SACK, flightsize\n   \
    \   was greater than or equal to cwnd), increase cwnd by MTU, and\n      reset\
    \ partial_bytes_acked to (partial_bytes_acked - cwnd).\n   ---------\n   New text:\
    \ (Section 7.2.2)\n   ---------\n   o  Whenever cwnd is greater than ssthresh,\
    \ upon each SACK arrival,\n      increase partial_bytes_acked by the total number\
    \ of bytes of all\n      new chunks acknowledged in that SACK, including chunks\n\
    \      acknowledged by the new Cumulative TSN Ack, by Gap Ack Blocks,\n      and\
    \ by the number of bytes of duplicated chunks reported in\n      Duplicate TSNs.\n\
    \   o  (1) when partial_bytes_acked is greater than cwnd and (2) before\n    \
    \  the arrival of the SACK the sender had less than cwnd bytes of\n      data\
    \ outstanding (i.e., before the arrival of the SACK, flightsize\n      was less\
    \ than cwnd), reset partial_bytes_acked to cwnd.\n   o  (1) when partial_bytes_acked\
    \ is equal to or greater than cwnd and\n      (2) before the arrival of the SACK\
    \ the sender had cwnd or more\n      bytes of data outstanding (i.e., before the\
    \ arrival of the SACK,\n      flightsize was greater than or equal to cwnd), partial_bytes_acked\n\
    \      is reset to (partial_bytes_acked - cwnd).  Next, cwnd is increased\n  \
    \    by 1*MTU.\n   This text has been modified by multiple errata.  It includes\n\
    \   modifications from Sections 3.12 and 3.22.  It is in final form and\n   is\
    \ not further updated in this document.\n"
- title: 3.26.3.  Solution Description
  contents:
  - "3.26.3.  Solution Description\n   The basic guidelines for incrementing cwnd\
    \ during the congestion\n   avoidance phase are added into Section 7.2.2.  The\
    \ guidelines include\n   the normative language and are aligned with [RFC5681].\n\
    \   The algorithm from Section 7.2.2 is improved and now does not allow\n   increasing\
    \ cwnd by more than 1*MTU per RTT.\n"
- title: 3.27.  Refresh of cwnd and ssthresh after Idle Period
  contents:
  - '3.27.  Refresh of cwnd and ssthresh after Idle Period

    '
- title: 3.27.1.  Description of the Problem
  contents:
  - "3.27.1.  Description of the Problem\n   [RFC4960] prescribes that cwnd per RTO\
    \ be adjusted if the endpoint\n   does not transmit data on a given transport\
    \ address.  In addition to\n   that, it prescribes that cwnd be set to the initial\
    \ value after a\n   sufficiently long idle period.  The latter is excessive. \
    \ Moreover,\n   what is considered a sufficiently long idle period is unclear.\n\
    \   [RFC4960] doesn't specify the handling of ssthresh in the idle case.\n   If\
    \ ssthresh is reduced due to packet loss, ssthresh is never\n   recovered.  So,\
    \ traffic can end up in congestion avoidance all the\n   time, resulting in a\
    \ low sending rate and bad performance.  The\n   problem is even more serious\
    \ for SCTP: in a multi-homed SCTP\n   association, traffic that switches back\
    \ to the previously failed\n   primary path will also lead to the situation where\
    \ traffic ends up in\n   congestion avoidance.\n"
- title: 3.27.2.  Text Changes to the Document
  contents:
  - "3.27.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 7.2.1)\n\
    \   ---------\n   o  The initial cwnd before DATA transmission or after a sufficiently\n\
    \      long idle period MUST be set to min(4*MTU, max (2*MTU, 4380\n      bytes)).\n\
    \   ---------\n   New text: (Section 7.2.1)\n   ---------\n   o  The initial cwnd\
    \ before data transmission MUST be set to\n      min(4*MTU, max (2*MTU, 4380 bytes)).\n\
    \   ---------\n   Old text: (Section 7.2.1)\n   ---------\n   o  When the endpoint\
    \ does not transmit data on a given transport\n      address, the cwnd of the\
    \ transport address should be adjusted to\n      max(cwnd/2, 4*MTU) per RTO.\n\
    \   ---------\n   New text: (Section 7.2.1)\n   ---------\n   o  While the endpoint\
    \ does not transmit data on a given transport\n      address, the cwnd of the\
    \ transport address SHOULD be adjusted to\n      max(cwnd/2, 4*MTU) once per RTO.\
    \  Before the first cwnd\n      adjustment, the ssthresh of the transport address\
    \ SHOULD be set to\n      the cwnd.\n   This text is in final form and is not\
    \ further updated in this\n   document.\n"
- title: 3.27.3.  Solution Description
  contents:
  - "3.27.3.  Solution Description\n   A rule about cwnd adjustment after a sufficiently\
    \ long idle period is\n   removed.\n   The text is updated to describe the handling\
    \ of ssthresh.  When the\n   idle period is detected, the cwnd value is copied\
    \ to ssthresh.\n"
- title: 3.28.  Window Updates after Receiver Window Opens Up
  contents:
  - '3.28.  Window Updates after Receiver Window Opens Up

    '
- title: 3.28.1.  Description of the Problem
  contents:
  - "3.28.1.  Description of the Problem\n   The sending of SACK chunks for window\
    \ updates is only indirectly\n   referenced in Section 6.2 of [RFC4960], which\
    \ states that an SCTP\n   receiver must not generate more than one SACK for every\
    \ incoming\n   packet, other than to update the offered window.\n   However, to\
    \ avoid performance problems, it is necessary to send the\n   window updates when\
    \ the receiver window opens up.\n"
- title: 3.28.2.  Text Changes to the Document
  contents:
  - "3.28.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 6.2)\n\
    \   ---------\n   An SCTP receiver MUST NOT generate more than one SACK for every\n\
    \   incoming packet, other than to update the offered window as the\n   receiving\
    \ application consumes new data.\n   ---------\n   New text: (Section 6.2)\n \
    \  ---------\n   An SCTP receiver MUST NOT generate more than one SACK for every\n\
    \   incoming packet, other than to update the offered window as the\n   receiving\
    \ application consumes new data.  When the window opens up,\n   an SCTP receiver\
    \ SHOULD send additional SACK chunks to update the\n   window even if no new data\
    \ is received.  The receiver MUST avoid\n   sending a large number of window updates\
    \ -- in particular, large\n   bursts of them.  One way to achieve this is to send\
    \ a window update\n   only if the window can be increased by at least a quarter\
    \ of the\n   receive buffer size of the association.\n   This text is in final\
    \ form and is not further updated in this\n   document.\n"
- title: 3.28.3.  Solution Description
  contents:
  - "3.28.3.  Solution Description\n   The new text makes it clear that additional\
    \ SACK chunks for window\n   updates should be sent as long as excessive bursts\
    \ are avoided.\n"
- title: 3.29.  Path of DATA and Reply Chunks
  contents:
  - '3.29.  Path of DATA and Reply Chunks

    '
- title: 3.29.1.  Description of the Problem
  contents:
  - "3.29.1.  Description of the Problem\n   Section 6.4 of [RFC4960] describes the\
    \ transmission policy for\n   multi-homed SCTP endpoints.  However, this policy\
    \ has the following\n   issues:\n   o  It states that a SACK should be sent to\
    \ the source address of an\n      incoming DATA.  However, it is known that other\
    \ SACK policies\n      (e.g., always sending SACKs to the primary path) may be\
    \ more\n      beneficial in some situations.\n   o  Also, it initially states\
    \ that an endpoint should always transmit\n      DATA chunks to the primary path\
    \ but then states that the rule for\n      the transmittal of reply chunks should\
    \ also be followed if the\n      endpoint is bundling DATA chunks together with\
    \ the reply chunk.\n      The second statement contradicts the first statement.\
    \  Some\n      implementations were having problems with it and sent DATA chunks\n\
    \      bundled with reply chunks to a different destination address than\n   \
    \   the primary path, causing many gaps.\n"
- title: 3.29.2.  Text Changes to the Document
  contents:
  - "3.29.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 6.4)\n\
    \   ---------\n   An endpoint SHOULD transmit reply chunks (e.g., SACK, HEARTBEAT\
    \ ACK,\n   etc.) to the same destination transport address from which it\n   received\
    \ the DATA or control chunk to which it is replying.  This\n   rule should also\
    \ be followed if the endpoint is bundling DATA chunks\n   together with the reply\
    \ chunk.\n   However, when acknowledging multiple DATA chunks received in packets\n\
    \   from different source addresses in a single SACK, the SACK chunk may\n   be\
    \ transmitted to one of the destination transport addresses from\n   which the\
    \ DATA or control chunks being acknowledged were received.\n   ---------\n   New\
    \ text: (Section 6.4)\n   ---------\n   An endpoint SHOULD transmit reply chunks\
    \ (e.g., INIT ACK, COOKIE ACK,\n   HEARTBEAT ACK) in response to control chunks\
    \ to the same destination\n   transport address from which it received the control\
    \ chunk to which\n   it is replying.\n   The selection of the destination transport\
    \ address for packets\n   containing SACK chunks is implementation dependent.\
    \  However, an\n   endpoint SHOULD NOT vary the destination transport address\
    \ of a SACK\n   when it receives DATA chunks coming from the same source address.\n\
    \   When acknowledging multiple DATA chunks received in packets from\n   different\
    \ source addresses in a single SACK, the SACK chunk MAY be\n   transmitted to\
    \ one of the destination transport addresses from which\n   the DATA or control\
    \ chunks being acknowledged were received.\n   This text is in final form and\
    \ is not further updated in this\n   document.\n"
- title: 3.29.3.  Solution Description
  contents:
  - "3.29.3.  Solution Description\n   The SACK transmission policy is left implementation\
    \ dependent, but\n   the new text now specifies that the policy not vary the destination\n\
    \   address of a packet containing a SACK chunk unless there are reasons\n   for\
    \ not doing so, as varying the destination address may negatively\n   impact RTT\
    \ measurement.\n   New text removes a confusing statement that prescribes following\
    \ the\n   rule for transmittal of reply chunks when the endpoint is bundling\n\
    \   DATA chunks together with the reply chunk.\n"
- title: 3.30.  "Outstanding Data", "Flightsize", and "Data in Flight" Key Terms
  contents:
  - '3.30.  "Outstanding Data", "Flightsize", and "Data in Flight" Key Terms

    '
- title: 3.30.1.  Description of the Problem
  contents:
  - "3.30.1.  Description of the Problem\n   [RFC4960] uses the key terms \"outstanding\
    \ data\", \"flightsize\", and\n   \"data in flight\" in formulas and statements,\
    \ but Section 1.3\n   (\"Key Terms\") of [RFC4960] does not provide their definitions.\n\
    \   Furthermore, outstanding data does not include DATA chunks that are\n   classified\
    \ as lost but that have not yet been retransmitted, and\n   there is a paragraph\
    \ in Section 6.1 of [RFC4960] where this statement\n   is broken.\n"
- title: 3.30.2.  Text Changes to the Document
  contents:
  - "3.30.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 1.3)\n\
    \   ---------\n   o  Congestion window (cwnd): An SCTP variable that limits the\
    \ data,\n      in number of bytes, a sender can send to a particular destination\n\
    \      transport address before receiving an acknowledgement.\n   ...\n   o  Outstanding\
    \ TSN (at an SCTP endpoint): A TSN (and the associated\n      DATA chunk) that\
    \ has been sent by the endpoint but for which it\n      has not yet received an\
    \ acknowledgement.\n   ---------\n   New text: (Section 1.3)\n   ---------\n \
    \  o  Congestion window (cwnd): An SCTP variable that limits outstanding\n   \
    \   data, in number of bytes, that a sender can send to a particular\n      destination\
    \ transport address before receiving an acknowledgement.\n   ...\n   o  Flightsize:\
    \ The amount of bytes of outstanding data to a\n      particular destination transport\
    \ address at any given time.\n   ...\n   o  Outstanding data (or \"data outstanding\"\
    \ or \"data in flight\"): The\n      total amount of the DATA chunks associated\
    \ with outstanding TSNs.\n      A retransmitted DATA chunk is counted once in\
    \ outstanding data.  A\n      DATA chunk that is classified as lost but that has\
    \ not yet been\n      retransmitted is not in outstanding data.\n   o  Outstanding\
    \ TSN (at an SCTP endpoint): A TSN (and the associated\n      DATA chunk) that\
    \ has been sent by the endpoint but for which it\n      has not yet received an\
    \ acknowledgement.\n   This text is in final form and is not further updated in\
    \ this\n   document.\n   ---------\n   Old text: (Section 6.1)\n   ---------\n\
    \   C) When the time comes for the sender to transmit, before sending new\n  \
    \    DATA chunks, the sender MUST first transmit any outstanding DATA\n      chunks\
    \ that are marked for retransmission (limited by the current\n      cwnd).\n \
    \  ---------\n   New text: (Section 6.1)\n   ---------\n   C) When the time comes\
    \ for the sender to transmit, before sending new\n      DATA chunks, the sender\
    \ MUST first transmit any DATA chunks that\n      are marked for retransmission\
    \ (limited by the current cwnd).\n   This text is in final form and is not further\
    \ updated in this\n   document.\n"
- title: 3.30.3.  Solution Description
  contents:
  - "3.30.3.  Solution Description\n   Section 1.3 is corrected to include explanations\
    \ of the key terms\n   \"outstanding data\", \"data in flight\", and \"flightsize\"\
    .  Section 6.1\n   is corrected to now use \"any DATA chunks\" instead of \"any\
    \ outstanding\n   DATA chunks\".\n"
- title: 3.31.  Degradation of cwnd due to Max.Burst
  contents:
  - '3.31.  Degradation of cwnd due to Max.Burst

    '
- title: 3.31.1.  Description of the Problem
  contents:
  - "3.31.1.  Description of the Problem\n   Some implementations were experiencing\
    \ a degradation of cwnd because\n   of the Max.Burst limit.  This was due to misinterpretation\
    \ of the\n   suggestion in Section 6.1 of [RFC4960] regarding how to use the\n\
    \   Max.Burst parameter when calculating the number of packets to\n   transmit.\n"
- title: 3.31.2.  Text Changes to the Document
  contents:
  - "3.31.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 6.1)\n\
    \   ---------\n   D) When the time comes for the sender to transmit new DATA chunks,\n\
    \      the protocol parameter Max.Burst SHOULD be used to limit the\n      number\
    \ of packets sent.  The limit MAY be applied by adjusting\n      cwnd as follows:\n\
    \      if((flightsize + Max.Burst*MTU) < cwnd) cwnd = flightsize +\n      Max.Burst*MTU\n\
    \      Or it MAY be applied by strictly limiting the number of packets\n     \
    \ emitted by the output routine.\n   ---------\n   New text: (Section 6.1)\n \
    \  ---------\n   D) When the time comes for the sender to transmit new DATA chunks,\n\
    \      the protocol parameter Max.Burst SHOULD be used to limit the\n      number\
    \ of packets sent.  The limit MAY be applied by adjusting\n      cwnd temporarily,\
    \ as follows:\n      if ((flightsize + Max.Burst*MTU) < cwnd)\n          cwnd\
    \ = flightsize + Max.Burst*MTU\n      Or, it MAY be applied by strictly limiting\
    \ the number of packets\n      emitted by the output routine.  When calculating\
    \ the number of\n      packets to transmit, and particularly when using the formula\n\
    \      above, cwnd SHOULD NOT be changed permanently.\n   This text is in final\
    \ form and is not further updated in this\n   document.\n"
- title: 3.31.3.  Solution Description
  contents:
  - "3.31.3.  Solution Description\n   The new text clarifies that cwnd should not\
    \ be changed when applying\n   the Max.Burst limit.  This mitigates packet bursts\
    \ related to the\n   reception of SACK chunks but not bursts related to an application\n\
    \   sending a burst of user messages.\n"
- title: 3.32.  Reduction of RTO.Initial
  contents:
  - '3.32.  Reduction of RTO.Initial

    '
- title: 3.32.1.  Description of the Problem
  contents:
  - "3.32.1.  Description of the Problem\n   [RFC4960] uses 3 seconds as the default\
    \ value for RTO.Initial in\n   accordance with Section 4.2.3.1 of [RFC1122]. \
    \ [RFC6298] updates\n   [RFC1122] and lowers the initial value of the retransmission\
    \ timer\n   from 3 seconds to 1 second.\n"
- title: 3.32.2.  Text Changes to the Document
  contents:
  - "3.32.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 15)\n\
    \   ---------\n   The following protocol parameters are RECOMMENDED:\n      RTO.Initial\
    \ - 3 seconds\n      RTO.Min - 1 second\n      RTO.Max - 60 seconds\n      Max.Burst\
    \ - 4\n      RTO.Alpha - 1/8\n      RTO.Beta - 1/4\n      Valid.Cookie.Life -\
    \ 60 seconds\n      Association.Max.Retrans - 10 attempts\n      Path.Max.Retrans\
    \ - 5 attempts (per destination address)\n      Max.Init.Retransmits - 8 attempts\n\
    \      HB.interval - 30 seconds\n      HB.Max.Burst - 1\n   ---------\n   New\
    \ text: (Section 15)\n   ---------\n   The following protocol parameters are RECOMMENDED:\n\
    \      RTO.Initial: 1 second\n      RTO.Min: 1 second\n      RTO.Max: 60 seconds\n\
    \      Max.Burst: 4\n      RTO.Alpha: 1/8\n      RTO.Beta: 1/4\n      Valid.Cookie.Life:\
    \ 60 seconds\n      Association.Max.Retrans: 10 attempts\n      Path.Max.Retrans:\
    \ 5 attempts (per destination address)\n      Max.Init.Retransmits: 8 attempts\n\
    \      HB.interval: 30 seconds\n      HB.Max.Burst: 1\n      SACK.Delay: 200 milliseconds\n\
    \   This text has been modified by multiple errata.  It includes\n   modifications\
    \ from Section 3.24.  It is in final form and is not\n   further updated in this\
    \ document.\n"
- title: 3.32.3.  Solution Description
  contents:
  - "3.32.3.  Solution Description\n   The default value for RTO.Initial has been\
    \ lowered to 1 second to be\n   in tune with [RFC6298].\n"
- title: 3.33.  Ordering of Bundled SACK and ERROR Chunks
  contents:
  - '3.33.  Ordering of Bundled SACK and ERROR Chunks

    '
- title: 3.33.1.  Description of the Problem
  contents:
  - "3.33.1.  Description of the Problem\n   When an SCTP endpoint receives a DATA\
    \ chunk with an invalid stream\n   identifier, it shall acknowledge it by sending\
    \ a SACK chunk and\n   indicate that the stream identifier was invalid by sending\
    \ an ERROR\n   chunk.  These two chunks may be bundled.  However, in the case\
    \ of\n   bundling, [RFC4960] requires that the ERROR chunk follow the SACK\n \
    \  chunk.  This restriction regarding the ordering of the chunks is not\n   necessary\
    \ and might limit interoperability.\n"
- title: 3.33.2.  Text Changes to the Document
  contents:
  - "3.33.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 6.5)\n\
    \   ---------\n   Every DATA chunk MUST carry a valid stream identifier.  If an\n\
    \   endpoint receives a DATA chunk with an invalid stream identifier, it\n   shall\
    \ acknowledge the reception of the DATA chunk following the\n   normal procedure,\
    \ immediately send an ERROR chunk with cause set to\n   \"Invalid Stream Identifier\"\
    \ (see Section 3.3.10), and discard the\n   DATA chunk.  The endpoint may bundle\
    \ the ERROR chunk in the same\n   packet as the SACK as long as the ERROR follows\
    \ the SACK.\n   ---------\n   New text: (Section 6.5)\n   ---------\n   Every\
    \ DATA chunk MUST carry a valid stream identifier.  If an\n   endpoint receives\
    \ a DATA chunk with an invalid stream identifier, it\n   SHOULD acknowledge the\
    \ reception of the DATA chunk following the\n   normal procedure, immediately\
    \ send an ERROR chunk with cause set to\n   \"Invalid Stream Identifier\" (see\
    \ Section 3.3.10), and discard the\n   DATA chunk.  The endpoint MAY bundle the\
    \ ERROR chunk and the SACK\n   chunk in the same packet.\n   This text is in final\
    \ form and is not further updated in this\n   document.\n"
- title: 3.33.3.  Solution Description
  contents:
  - "3.33.3.  Solution Description\n   The unnecessary restriction regarding the ordering\
    \ of the SACK and\n   ERROR chunks has been removed.\n"
- title: 3.34.  Undefined Parameter Returned by RECEIVE Primitive
  contents:
  - '3.34.  Undefined Parameter Returned by RECEIVE Primitive

    '
- title: 3.34.1.  Description of the Problem
  contents:
  - "3.34.1.  Description of the Problem\n   [RFC4960] provides a description of an\
    \ abstract API.  In the\n   definition of the RECEIVE primitive, an optional parameter\
    \ with name\n   \"delivery number\" is mentioned.  However, no definition of this\n\
    \   parameter is given in [RFC4960], and the parameter is unnecessary.\n"
- title: 3.34.2.  Text Changes to the Document
  contents:
  - "3.34.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 10.1\
    \ G))\n   ---------\n   G) Receive\n   Format: RECEIVE(association id, buffer\
    \ address, buffer size\n           [,stream id])\n   -> byte count [,transport\
    \ address] [,stream id] [,stream sequence\n      number] [,partial flag] [,delivery\
    \ number] [,payload protocol-id]\n   ---------\n   New text: (Section 10.1 G))\n\
    \   ---------\n   G) Receive\n   Format: RECEIVE(association id, buffer address,\
    \ buffer size\n           [,stream id])\n   -> byte count [,transport address]\
    \ [,stream id] [,stream sequence\n      number] [,partial flag] [,payload protocol-id]\n\
    \   This text is in final form and is not further updated in this\n   document.\n"
- title: 3.34.3.  Solution Description
  contents:
  - "3.34.3.  Solution Description\n   The undefined parameter has been removed.\n"
- title: 3.35.  DSCP Changes
  contents:
  - '3.35.  DSCP Changes

    '
- title: 3.35.1.  Description of the Problem
  contents:
  - "3.35.1.  Description of the Problem\n   The upper layer can change the Differentiated\
    \ Services Code Point\n   (DSCP) used for packets being sent.  Changing the DSCP\
    \ can result in\n   packets hitting different queues on the path.  Therefore,\
    \ congestion\n   control should be initialized when the DSCP is changed by the\
    \ upper\n   layer.  This is not described in [RFC4960].\n"
- title: 3.35.2.  Text Changes to the Document
  contents:
  - "3.35.2.  Text Changes to the Document\n   ---------\n   New text: (Section 7.2.5)\n\
    \   ---------\n   7.2.5.  Making Changes to Differentiated Services Code Points\n\
    \      SCTP implementations MAY allow an application to configure the\n      Differentiated\
    \ Services Code Point (DSCP) used for sending\n      packets.  If a DSCP change\
    \ might result in outgoing packets being\n      queued in different queues, the\
    \ congestion control parameters for\n      all affected destination addresses\
    \ MUST be reset to their initial\n      values.\n   This text is in final form\
    \ and is not further updated in this\n   document.\n   ---------\n   Old text:\
    \ (Section 10.1 M))\n   ---------\n   Mandatory attributes:\n   o  association\
    \ id - local handle to the SCTP association.\n   o  protocol parameter list -\
    \ the specific names and values of the\n      protocol parameters (e.g., Association.Max.Retrans;\
    \ see\n      Section 15) that the SCTP user wishes to customize.\n   ---------\n\
    \   New text: (Section 10.1 M))\n   ---------\n   Mandatory attributes:\n   o\
    \  association id - local handle to the SCTP association.\n   o  protocol parameter\
    \ list - the specific names and values of the\n      protocol parameters (e.g.,\
    \ Association.Max.Retrans (see\n      Section 15), or other parameters like the\
    \ DSCP) that the SCTP user\n      wishes to customize.\n   This text is in final\
    \ form and is not further updated in this\n   document.\n"
- title: 3.35.3.  Solution Description
  contents:
  - "3.35.3.  Solution Description\n   Text describing the required action for DSCP\
    \ changes has been added.\n"
- title: 3.36.  Inconsistent Handling of ICMPv4 and ICMPv6 Messages
  contents:
  - '3.36.  Inconsistent Handling of ICMPv4 and ICMPv6 Messages

    '
- title: 3.36.1.  Description of the Problem
  contents:
  - "3.36.1.  Description of the Problem\n   Appendix C of [RFC4960] describes the\
    \ handling of ICMPv4 and ICMPv6\n   messages.  The handling of ICMP messages indicating\
    \ that the port\n   number is unreachable, as described in the enumerated procedures,\
    \ is\n   not consistent with the description given in [RFC4960] after the\n  \
    \ procedures.  Furthermore, the text explicitly describes the handling\n   of\
    \ ICMPv6 packets indicating reachability problems but does not do\n   the same\
    \ for the corresponding ICMPv4 packets.\n"
- title: 3.36.2.  Text Changes to the Document
  contents:
  - "3.36.2.  Text Changes to the Document\n   ---------\n   Old text: (Appendix C)\n\
    \   ---------\n   ICMP3) An implementation MAY ignore any ICMPv4 messages where\
    \ the\n          code does not indicate \"Protocol Unreachable\" or\n        \
    \  \"Fragmentation Needed\".\n   ---------\n   New text: (Appendix C)\n   ---------\n\
    \   ICMP3) An implementation SHOULD ignore any ICMP messages where the\n     \
    \     code indicates \"Port Unreachable\".\n   This text is in final form and\
    \ is not further updated in this\n   document.\n   ---------\n   Old text: (Appendix\
    \ C)\n   ---------\n   ICMP9) If the ICMPv6 code is \"Destination Unreachable\"\
    , the\n          implementation MAY mark the destination into the unreachable\n\
    \          state or alternatively increment the path error counter.\n   ---------\n\
    \   New text: (Appendix C)\n   ---------\n   ICMP9) If the ICMP type is \"Destination\
    \ Unreachable\", the\n          implementation MAY move the destination to the\
    \ unreachable\n          state or, alternatively, increment the path error counter.\n\
    \   This text has been modified by multiple errata.  It is further\n   updated\
    \ in Section 3.37.\n"
- title: 3.36.3.  Solution Description
  contents:
  - "3.36.3.  Solution Description\n   The text has been changed to describe the intended\
    \ handling of ICMP\n   messages indicating that the port number is unreachable\
    \ by replacing\n   the third rule.  Also, the limitation to ICMPv6 in the ninth\
    \ rule has\n   been removed.\n"
- title: 3.37.  Handling of Soft Errors
  contents:
  - '3.37.  Handling of Soft Errors

    '
- title: 3.37.1.  Description of the Problem
  contents:
  - "3.37.1.  Description of the Problem\n   [RFC1122] defines the handling of soft\
    \ errors and hard errors for\n   TCP.  Appendix C of [RFC4960] only deals with\
    \ hard errors.\n"
- title: 3.37.2.  Text Changes to the Document
  contents:
  - "3.37.2.  Text Changes to the Document\n   ---------\n   Old text: (Appendix C)\n\
    \   ---------\n   ICMP9) If the ICMPv6 code is \"Destination Unreachable\", the\n\
    \          implementation MAY mark the destination into the unreachable\n    \
    \      state or alternatively increment the path error counter.\n   ---------\n\
    \   New text: (Appendix C)\n   ---------\n   ICMP9) If the ICMP type is \"Destination\
    \ Unreachable\", the\n          implementation MAY move the destination to the\
    \ unreachable\n          state or, alternatively, increment the path error counter.\n\
    \          SCTP MAY provide information to the upper layer indicating\n      \
    \    the reception of ICMP messages when reporting a network status\n        \
    \  change.\n   This text has been modified by multiple errata.  It includes\n\
    \   modifications from Section 3.36.  It is in final form and is not\n   further\
    \ updated in this document.\n"
- title: 3.37.3.  Solution Description
  contents:
  - "3.37.3.  Solution Description\n   Text has been added allowing SCTP to notify\
    \ the application in the\n   case of soft errors.\n"
- title: 3.38.  Honoring cwnd
  contents:
  - '3.38.  Honoring cwnd

    '
- title: 3.38.1.  Description of the Problem
  contents:
  - "3.38.1.  Description of the Problem\n   When using the slow start algorithm,\
    \ SCTP increases the congestion\n   window only when it is being fully utilized.\
    \  Since SCTP uses DATA\n   chunks and does not use the congestion window to fragment\
    \ user\n   messages, this requires that some overbooking of the congestion\n \
    \  window be allowed.\n"
- title: 3.38.2.  Text Changes to the Document
  contents:
  - "3.38.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 6.1)\n\
    \   ---------\n   B) At any given time, the sender MUST NOT transmit new data\
    \ to a\n      given transport address if it has cwnd or more bytes of data\n \
    \     outstanding to that transport address.\n   ---------\n   New text: (Section\
    \ 6.1)\n   ---------\n   B) At any given time, the sender MUST NOT transmit new\
    \ data to a\n      given transport address if it has cwnd + (PMTU - 1) or more\
    \ bytes\n      of data outstanding to that transport address.  If data is\n  \
    \    available, the sender SHOULD exceed cwnd by up to (PMTU - 1) bytes\n    \
    \  on a new data transmission if the flightsize does not currently\n      reach\
    \ cwnd.  The breach of cwnd MUST constitute one packet only.\n   This text is\
    \ in final form and is not further updated in this\n   document.\n   ---------\n\
    \   Old text: (Section 7.2.1)\n   ---------\n   o  Whenever cwnd is greater than\
    \ zero, the endpoint is allowed to\n      have cwnd bytes of data outstanding\
    \ on that transport address.\n   ---------\n   New text: (Section 7.2.1)\n   ---------\n\
    \   o  Whenever cwnd is greater than zero, the endpoint is allowed to\n      have\
    \ cwnd bytes of data outstanding on that transport address.  A\n      limited\
    \ overbooking as described in Section 6.1 B) SHOULD be\n      supported.\n   This\
    \ text is in final form and is not further updated in this\n   document.\n"
- title: 3.38.3.  Solution Description
  contents:
  - "3.38.3.  Solution Description\n   Text was added to clarify how the cwnd limit\
    \ should be handled.\n"
- title: 3.39.  Zero Window Probing
  contents:
  - '3.39.  Zero Window Probing

    '
- title: 3.39.1.  Description of the Problem
  contents:
  - "3.39.1.  Description of the Problem\n   The text in Section 6.1 of [RFC4960]\
    \ that describes zero window\n   probing does not clearly address the case where\
    \ the window is not\n   zero but is too small for the next DATA chunk to be transmitted.\n\
    \   Even in this case, zero window probing has to be performed to avoid\n   deadlocks.\n"
- title: 3.39.2.  Text Changes to the Document
  contents:
  - "3.39.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 6.1)\n\
    \   ---------\n   A) At any given time, the data sender MUST NOT transmit new\
    \ data to\n      any destination transport address if its peer's rwnd indicates\n\
    \      that the peer has no buffer space (i.e., rwnd is 0; see Section\n     \
    \ 6.2.1).  However, regardless of the value of rwnd (including if it\n      is\
    \ 0), the data sender can always have one DATA chunk in flight to\n      the receiver\
    \ if allowed by cwnd (see rule B, below).  This rule\n      allows the sender\
    \ to probe for a change in rwnd that the sender\n      missed due to the SACK's\
    \ having been lost in transit from the data\n      receiver to the data sender.\n\
    \      When the receiver's advertised window is zero, this probe is\n      called\
    \ a zero window probe.  Note that a zero window probe SHOULD\n      only be sent\
    \ when all outstanding DATA chunks have been\n      cumulatively acknowledged\
    \ and no DATA chunks are in flight.  Zero\n      window probing MUST be supported.\n\
    \   ---------\n   New text: (Section 6.1)\n   ---------\n   A) At any given time,\
    \ the data sender MUST NOT transmit new data to\n      any destination transport\
    \ address if its peer's rwnd indicates\n      that the peer has no buffer space\
    \ (i.e., rwnd is smaller than the\n      size of the next DATA chunk; see Section\
    \ 6.2.1).  However,\n      regardless of the value of rwnd (including if it is\
    \ 0), the data\n      sender can always have one DATA chunk in flight to the receiver\n\
    \      if allowed by cwnd (see rule B, below).  This rule allows the\n      sender\
    \ to probe for a change in rwnd that the sender missed\n      due to the SACK's\
    \ having been lost in transit from the data\n      receiver to the data sender.\n\
    \      When the receiver has no buffer space, this probe is called a\n      zero\
    \ window probe.  Note that a zero window probe SHOULD only be\n      sent when\
    \ all outstanding DATA chunks have been cumulatively\n      acknowledged and no\
    \ DATA chunks are in flight.  Zero window\n      probing MUST be supported.\n\
    \   This text is in final form and is not further updated in this\n   document.\n"
- title: 3.39.3.  Solution Description
  contents:
  - "3.39.3.  Solution Description\n   The terminology is used in a cleaner way.\n"
- title: 3.40.  Updating References regarding ECN
  contents:
  - '3.40.  Updating References regarding ECN

    '
- title: 3.40.1.  Description of the Problem
  contents:
  - "3.40.1.  Description of the Problem\n   For Explicit Congestion Notification\
    \ (ECN), [RFC4960] refers only to\n   [RFC3168], which has been updated by [RFC8311].\
    \  This needs to be\n   reflected in the text when referring to ECN.\n"
- title: 3.40.2.  Text Changes to the Document
  contents:
  - "3.40.2.  Text Changes to the Document\n   ---------\n   Old text: (Appendix A)\n\
    \   ---------\n   ECN [RFC3168] describes a proposed extension to IP that details\
    \ a\n   method to become aware of congestion outside of datagram loss.\n   ---------\n\
    \   New text: (Appendix A)\n   ---------\n   ECN as specified in [RFC3168] (updated\
    \ by [RFC8311]) describes an\n   extension to IP that details a method for becoming\
    \ aware of\n   congestion outside of datagram loss.\n   This text is in final\
    \ form and is not further updated in this\n   document.\n   ---------\n   Old\
    \ text: (Appendix A)\n   ---------\n   In general, [RFC3168] should be followed\
    \ with the following\n   exceptions.\n   ---------\n   New text: (Appendix A)\n\
    \   ---------\n   In general, [RFC3168] (updated by [RFC8311]) SHOULD be followed,\
    \ with\n   the following exceptions.\n   This text is in final form and is not\
    \ further updated in this\n   document.\n   ---------\n   Old text: (Appendix\
    \ A)\n   ---------\n   [RFC3168] details negotiation of ECN during the SYN and\
    \ SYN-ACK\n   stages of a TCP connection.\n   ---------\n   New text: (Appendix\
    \ A)\n   ---------\n   [RFC3168] (updated by [RFC8311]) details the negotiation\
    \ of ECN\n   during the SYN and SYN-ACK stages of a TCP connection.\n   This text\
    \ is in final form and is not further updated in this\n   document.\n   ---------\n\
    \   Old text: (Appendix A)\n   ---------\n   [RFC3168] details a specific bit\
    \ for a receiver to send back in its\n   TCP acknowledgements to notify the sender\
    \ of the Congestion\n   Experienced (CE) bit having arrived from the network.\n\
    \   ---------\n   New text: (Appendix A)\n   ---------\n   [RFC3168] (updated\
    \ by [RFC8311]) details a specific bit for a\n   receiver to send back in its\
    \ TCP acknowledgements to notify the\n   sender of the Congestion Experienced\
    \ (CE) bit that the CE bit has\n   arrived from the network.\n   This text is\
    \ in final form and is not further updated in this\n   document.\n   ---------\n\
    \   Old text: (Appendix A)\n   ---------\n   [RFC3168] details a specific bit\
    \ for a sender to send in the header\n   of its next outbound TCP segment to indicate\
    \ to its peer that it has\n   reduced its congestion window.\n   ---------\n \
    \  New text: (Appendix A)\n   ---------\n   [RFC3168] (updated by [RFC8311]) details\
    \ a specific bit for a sender\n   to send in the header of its next outbound TCP\
    \ segment to indicate to\n   its peer that it has reduced its congestion window.\n\
    \   This text is in final form and is not further updated in this\n   document.\n"
- title: 3.40.3.  Solution Description
  contents:
  - "3.40.3.  Solution Description\n   References to [RFC8311] have been added.  Some\
    \ wordsmithing was also\n   done while making those updates.\n"
- title: 3.41.  Host Name Address Parameter Deprecated
  contents:
  - '3.41.  Host Name Address Parameter Deprecated

    '
- title: 3.41.1.  Description of the Problem
  contents:
  - "3.41.1.  Description of the Problem\n   [RFC4960] defines three types of address\
    \ parameters to be used with\n   INIT and INIT ACK chunks:\n   1.  IPv4 Address\
    \ parameters.\n   2.  IPv6 Address parameters.\n   3.  Host Name Address parameters.\n\
    \   The first two parameter types are supported by the SCTP kernel\n   implementations\
    \ of FreeBSD, Linux, and Solaris, but the third is not.\n   In addition, the first\
    \ two were successfully tested in all nine\n   interoperability tests for SCTP,\
    \ but the third has never been\n   successfully tested.  Therefore, the Host Name\
    \ Address parameter\n   should be deprecated.\n"
- title: 3.41.2.  Text Changes to the Document
  contents:
  - "3.41.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 3.3.2)\n\
    \   ---------\n   Note 3: An INIT chunk MUST NOT contain more than one Host Name\n\
    \   Address parameter.  Moreover, the sender of the INIT MUST NOT combine\n  \
    \ any other address types with the Host Name Address in the INIT.  The\n   receiver\
    \ of INIT MUST ignore any other address types if the Host Name\n   Address parameter\
    \ is present in the received INIT chunk.\n   ---------\n   New text: (Section\
    \ 3.3.2)\n   ---------\n   Note 3: An INIT chunk MUST NOT contain the Host Name\
    \ Address\n   parameter.  The receiver of an INIT chunk containing a Host Name\n\
    \   Address parameter MUST send an ABORT and MAY include an \"Unresolvable\n \
    \  Address\" error cause.\n   This text is in final form and is not further updated\
    \ in this\n   document.\n   ---------\n   Old text: (Section 3.3.2.1)\n   ---------\n\
    \   The sender of INIT uses this parameter to pass its Host Name (in\n   place\
    \ of its IP addresses) to its peer.  The peer is responsible for\n   resolving\
    \ the name.  Using this parameter might make it more likely\n   for the association\
    \ to work across a NAT box.\n   ---------\n   New text: (Section 3.3.2.1)\n  \
    \ ---------\n   The sender of an INIT chunk MUST NOT include this parameter. \
    \ The\n   usage of the Host Name Address parameter is deprecated.\n   This text\
    \ is in final form and is not further updated in this\n   document.\n   ---------\n\
    \   Old text: (Section 3.3.2.1)\n   ---------\n   Address Type: 16 bits (unsigned\
    \ integer)\n      This is filled with the type value of the corresponding address\n\
    \      TLV (e.g., IPv4 = 5, IPv6 = 6, Host name = 11).\n   ---------\n   New text:\
    \ (Section 3.3.2.1)\n   ---------\n   Address Type: 16 bits (unsigned integer)\n\
    \      This is filled with the type value of the corresponding address\n     \
    \ TLV (e.g., IPv4 = 5, IPv6 = 6).  The value indicating the Host\n      Name Address\
    \ parameter (Host name = 11) MUST NOT be used.\n   This text is in final form\
    \ and is not further updated in this\n   document.\n   ---------\n   Old text:\
    \ (Section 3.3.3)\n   ---------\n   Note 3: The INIT ACK chunks MUST NOT contain\
    \ more than one Host Name\n   Address parameter.  Moreover, the sender of the\
    \ INIT ACK MUST NOT\n   combine any other address types with the Host Name Address\
    \ in the\n   INIT ACK.  The receiver of the INIT ACK MUST ignore any other address\n\
    \   types if the Host Name Address parameter is present.\n   ---------\n   New\
    \ text: (Section 3.3.3)\n   ---------\n   Note 3: An INIT ACK chunk MUST NOT contain\
    \ the Host Name Address\n   parameter.  The receiver of INIT ACK chunks containing\
    \ a Host Name\n   Address parameter MUST send an ABORT and MAY include an \"Unresolvable\n\
    \   Address\" error cause.\n   This text is in final form and is not further updated\
    \ in this\n   document.\n   ---------\n   Old text: (Section 5.1.2)\n   ---------\n\
    \   B) If there is a Host Name parameter present in the received INIT or\n   \
    \   INIT ACK chunk, the endpoint shall resolve that host name to a\n      list\
    \ of IP address(es) and derive the transport address(es) of\n      this peer by\
    \ combining the resolved IP address(es) with the SCTP\n      source port.\n  \
    \    The endpoint MUST ignore any other IP Address parameters if they\n      are\
    \ also present in the received INIT or INIT ACK chunk.\n      The time at which\
    \ the receiver of an INIT resolves the host name\n      has potential security\
    \ implications to SCTP.  If the receiver of\n      an INIT resolves the host name\
    \ upon the reception of the chunk,\n      and the mechanism the receiver uses\
    \ to resolve the host name\n      involves potential long delay (e.g., DNS query),\
    \ the receiver may\n      open itself up to resource attacks for the period of\
    \ time while it\n      is waiting for the name resolution results before it can\
    \ build the\n      State Cookie and release local resources.\n      Therefore,\
    \ in cases where the name translation involves potential\n      long delay, the\
    \ receiver of the INIT MUST postpone the name\n      resolution till the reception\
    \ of the COOKIE ECHO chunk from the\n      peer.  In such a case, the receiver\
    \ of the INIT SHOULD build the\n      State Cookie using the received Host Name\
    \ (instead of destination\n      transport addresses) and send the INIT ACK to\
    \ the source IP\n      address from which the INIT was received.\n      The receiver\
    \ of an INIT ACK shall always immediately attempt to\n      resolve the name upon\
    \ the reception of the chunk.\n      The receiver of the INIT or INIT ACK MUST\
    \ NOT send user data\n      (piggy-backed or stand-alone) to its peer until the\
    \ host name is\n      successfully resolved.\n      If the name resolution is\
    \ not successful, the endpoint MUST\n      immediately send an ABORT with \"Unresolvable\
    \ Address\" error cause\n      to its peer.  The ABORT shall be sent to the source\
    \ IP address\n      from which the last peer packet was received.\n   ---------\n\
    \   New text: (Section 5.1.2)\n   ---------\n   B) If there is a Host Name Address\
    \ parameter present in the received\n      INIT or INIT ACK chunk, the endpoint\
    \ MUST immediately send an\n      ABORT and MAY include an \"Unresolvable Address\"\
    \ error cause\n      to its peer.  The ABORT SHALL be sent to the source\n   \
    \   IP address from which the last peer packet was received.\n   This text is\
    \ in final form and is not further updated in this\n   document.\n   ---------\n\
    \   Old text: (Section 11.2.4.1)\n   ---------\n   The use of the host name feature\
    \ in the INIT chunk could be used to\n   flood a target DNS server.  A large backlog\
    \ of DNS queries, resolving\n   the host name received in the INIT chunk to IP\
    \ addresses, could be\n   accomplished by sending INITs to multiple hosts in a\
    \ given domain.\n   In addition, an attacker could use the host name feature in\
    \ an\n   indirect attack on a third party by sending large numbers of INITs to\n\
    \   random hosts containing the host name of the target.  In addition to\n   the\
    \ strain on DNS resources, this could also result in large numbers\n   of INIT\
    \ ACKs being sent to the target.  One method to protect against\n   this type\
    \ of attack is to verify that the IP addresses received from\n   DNS include the\
    \ source IP address of the original INIT.  If the list\n   of IP addresses received\
    \ from DNS does not include the source IP\n   address of the INIT, the endpoint\
    \ MAY silently discard the INIT.\n   This last option will not protect against\
    \ the attack against the DNS.\n   ---------\n   New text: (Section 11.2.4.1)\n\
    \   ---------\n   Support for the Host Name Address parameter has been removed\
    \ from the\n   protocol.  Endpoints receiving INIT or INIT ACK chunks containing\
    \ the\n   Host Name Address parameter MUST send an ABORT chunk in response and\n\
    \   MAY include an \"Unresolvable Address\" error cause.\n   This text is in final\
    \ form and is not further updated in this\n   document.\n"
- title: 3.41.3.  Solution Description
  contents:
  - "3.41.3.  Solution Description\n   The usage of the Host Name Address parameter\
    \ has been deprecated.\n"
- title: 3.42.  Conflicting Text regarding the 'Supported Address Types'
  contents:
  - "3.42.  Conflicting Text regarding the 'Supported Address Types'\n       Parameter\n"
- title: 3.42.1.  Description of the Problem
  contents:
  - "3.42.1.  Description of the Problem\n   Section 5.1.2 of [RFC4960] contains conflicting\
    \ text regarding the\n   receipt of an SCTP packet containing an INIT chunk sent\
    \ from an\n   address for which the corresponding address type is not listed in\
    \ the\n   'Supported Address Types' parameter.  The text states that the\n   association\
    \ MUST be aborted, but it also states that the association\n   SHOULD be established\
    \ and there SHOULD NOT be any error indication.\n"
- title: 3.42.2.  Text Changes to the Document
  contents:
  - "3.42.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 5.1.2)\n\
    \   ---------\n   The sender of INIT may include a 'Supported Address Types' parameter\n\
    \   in the INIT to indicate what types of address are acceptable.  When\n   this\
    \ parameter is present, the receiver of INIT (initiate) MUST\n   either use one\
    \ of the address types indicated in the Supported\n   Address Types parameter\
    \ when responding to the INIT, or abort the\n   association with an \"Unresolvable\
    \ Address\" error cause if it is\n   unwilling or incapable of using any of the\
    \ address types indicated by\n   its peer.\n   ---------\n   New text: (Section\
    \ 5.1.2)\n   ---------\n   The sender of INIT chunks MAY include a 'Supported\
    \ Address Types'\n   parameter in the INIT to indicate what types of addresses\
    \ are\n   acceptable.\n   This text is in final form and is not further updated\
    \ in this\n   document.\n"
- title: 3.42.3.  Solution Description
  contents:
  - "3.42.3.  Solution Description\n   The conflicting text has been removed.\n"
- title: 3.43.  Integration of RFC 6096
  contents:
  - '3.43.  Integration of RFC 6096

    '
- title: 3.43.1.  Description of the Problem
  contents:
  - "3.43.1.  Description of the Problem\n   [RFC6096] updates [RFC4960] by adding\
    \ the \"Chunk Flags\" registry.\n   This should be integrated into the base specification.\n"
- title: 3.43.2.  Text Changes to the Document
  contents:
  - "3.43.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 14.1)\n\
    \   ---------\n   14.1.  IETF-Defined Chunk Extension\n      The assignment of\
    \ new chunk parameter type codes is done through\n      an IETF Consensus action,\
    \ as defined in [RFC2434].  Documentation\n      of the chunk parameter MUST contain\
    \ the following information:\n      a) A long and short name for the new chunk\
    \ type.\n      b) A detailed description of the structure of the chunk, which\n\
    \         MUST conform to the basic structure defined in Section 3.2.\n      c)\
    \ A detailed definition and description of the intended use of\n         each\
    \ field within the chunk, including the chunk flags if any.\n      d) A detailed\
    \ procedural description of the use of the new chunk\n         type within the\
    \ operation of the protocol.\n      The last chunk type (255) is reserved for\
    \ future extension if\n      necessary.\n   ---------\n   New text: (Section 14.1)\n\
    \   ---------\n   14.1.  IETF-Defined Chunk Extension\n      The assignment of\
    \ new chunk type codes is done through an IETF\n      Review action, as defined\
    \ in [RFC8126].  Documentation for a new\n      chunk MUST contain the following\
    \ information:\n      a)  A long and short name for the new chunk type.\n    \
    \  b)  A detailed description of the structure of the chunk, which\n         \
    \ MUST conform to the basic structure defined in Section 3.2.\n      c)  A detailed\
    \ definition and description of the intended use of\n          each field within\
    \ the chunk, including the chunk flags\n          (if any).  Defined chunk flags\
    \ will be used as initial entries\n          in the chunk flags table for the\
    \ new chunk type.\n      d)  A detailed procedural description of the use of the\
    \ new chunk\n          type within the operation of the protocol.\n      The last\
    \ chunk type (255) is reserved for future extension if\n      necessary.\n   \
    \   For each new chunk type, IANA creates a registration table for the\n     \
    \ chunk flags of that type.  The procedure for registering\n      particular chunk\
    \ flags is described in Section 14.2.\n   This text has been modified by multiple\
    \ errata.  It includes\n   modifications from Section 3.3.  It is in final form\
    \ and is not\n   further updated in this document.\n   ---------\n   New text:\
    \ (Section 14.2)\n   ---------\n   14.2.  New IETF Chunk Flags Registration\n\
    \      The assignment of new chunk flags is done through an RFC Required\n   \
    \   action, as defined in [RFC8126].  Documentation for the chunk\n      flags\
    \ MUST contain the following information:\n      a)  A name for the new chunk\
    \ flag.\n      b)  A detailed procedural description of the use of the new chunk\n\
    \          flag within the operation of the protocol.  It MUST be\n          considered\
    \ that implementations not supporting the flag will\n          send '0' on transmit\
    \ and just ignore it on receipt.\n      IANA selects a chunk flags value.  This\
    \ MUST be one of 0x01, 0x02,\n      0x04, 0x08, 0x10, 0x20, 0x40, or 0x80, which\
    \ MUST be unique within\n      the chunk flag values for the specific chunk type.\n\
    \   This text is in final form and is not further updated in this\n   document.\n\
    \   Please note that Sections 14.2, 14.3, 14.4, and 14.5 as shown in\n   [RFC4960]\
    \ will need to be renumbered when [RFC4960] is updated.\n"
- title: 3.43.3.  Solution Description
  contents:
  - "3.43.3.  Solution Description\n   [RFC6096] has been integrated, and the reference\
    \ has been updated to\n   [RFC8126].\n"
- title: 3.44.  Integration of RFC 6335
  contents:
  - '3.44.  Integration of RFC 6335

    '
- title: 3.44.1.  Description of the Problem
  contents:
  - "3.44.1.  Description of the Problem\n   [RFC6335] updates [RFC4960] by updating\
    \ procedures for the \"Service\n   Name and Transport Protocol Port Number Registry\"\
    .  This should be\n   integrated into the base specification.  Also, the \"Guidelines\
    \ for\n   Writing an IANA Considerations Section in RFCs\" reference needs to\
    \ be\n   changed to [RFC8126].\n"
- title: 3.44.2.  Text Changes to the Document
  contents:
  - "3.44.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 14.5)\n\
    \   ---------\n   SCTP services may use contact port numbers to provide service\
    \ to\n   unknown callers, as in TCP and UDP.  IANA is therefore requested to\n\
    \   open the existing Port Numbers registry for SCTP using the following\n   rules,\
    \ which we intend to mesh well with existing Port Numbers\n   registration procedures.\
    \  An IESG-appointed Expert Reviewer supports\n   IANA in evaluating SCTP port\
    \ allocation requests, according to the\n   procedure defined in [RFC2434].\n\
    \   Port numbers are divided into three ranges.  The Well Known Ports are\n  \
    \ those from 0 through 1023, the Registered Ports are those from 1024\n   through\
    \ 49151, and the Dynamic and/or Private Ports are those from\n   49152 through\
    \ 65535.  Well Known and Registered Ports are intended\n   for use by server applications\
    \ that desire a default contact point on\n   a system.  On most systems, Well\
    \ Known Ports can only be used by\n   system (or root) processes or by programs\
    \ executed by privileged\n   users, while Registered Ports can be used by ordinary\
    \ user processes\n   or programs executed by ordinary users.  Dynamic and/or Private\
    \ Ports\n   are intended for temporary use, including client-side ports, out-of-\n\
    \   band negotiated ports, and application testing prior to registration\n   of\
    \ a dedicated port; they MUST NOT be registered.\n   The Port Numbers registry\
    \ should accept registrations for SCTP ports\n   in the Well Known Ports and Registered\
    \ Ports ranges.  Well Known and\n   Registered Ports SHOULD NOT be used without\
    \ registration.  Although\n   in some cases -- such as porting an application\
    \ from TCP to SCTP --\n   it may seem natural to use an SCTP port before registration\n\
    \   completes, we emphasize that IANA will not guarantee registration of\n   particular\
    \ Well Known and Registered Ports.  Registrations should be\n   requested as early\
    \ as possible.\n   Each port registration SHALL include the following information:\n\
    \   o  A short port name, consisting entirely of letters (A-Z and a-z),\n    \
    \  digits (0-9), and punctuation characters from \"-_+./*\" (not\n      including\
    \ the quotes).\n   o  The port number that is requested for registration.\n  \
    \ o  A short English phrase describing the port's purpose.\n   o  Name and contact\
    \ information for the person or entity performing\n      the registration, and\
    \ possibly a reference to a document defining\n      the port's use.  Registrations\
    \ coming from IETF working groups\n      need only name the working group, but\
    \ indicating a contact person\n      is recommended.\n   Registrants are encouraged\
    \ to follow these guidelines when submitting\n   a registration.\n   o  A port\
    \ name SHOULD NOT be registered for more than one SCTP port\n      number.\n \
    \  o  A port name registered for TCP MAY be registered for SCTP as well.\n   \
    \   Any such registration SHOULD use the same port number as the\n      existing\
    \ TCP registration.\n   o  Concrete intent to use a port SHOULD precede port registration.\n\
    \      For example, existing TCP ports SHOULD NOT be registered in\n      advance\
    \ of any intent to use those ports for SCTP.\n   ---------\n   New text: (Section\
    \ 14.5)\n   ---------\n   SCTP services can use contact port numbers to provide\
    \ service to\n   unknown callers, as in TCP and UDP.  IANA is therefore requested\
    \ to\n   open the existing \"Service Name and Transport Protocol Port Number\n\
    \   Registry\" for SCTP using the following rules, which we intend to mesh\n \
    \  well with existing port-number registration procedures.  An\n   IESG-appointed\
    \ expert reviewer supports IANA in evaluating SCTP port\n   allocation requests,\
    \ according to the procedure defined in [RFC8126].\n   The details of this process\
    \ are defined in [RFC6335].\n   This text is in final form and is not further\
    \ updated in this\n   document.\n"
- title: 3.44.3.  Solution Description
  contents:
  - "3.44.3.  Solution Description\n   [RFC6335] has been integrated, and the reference\
    \ has been updated to\n   [RFC8126].\n"
- title: 3.45.  Integration of RFC 7053
  contents:
  - '3.45.  Integration of RFC 7053

    '
- title: 3.45.1.  Description of the Problem
  contents:
  - "3.45.1.  Description of the Problem\n   [RFC7053] updates [RFC4960] by adding\
    \ the I bit to the DATA chunk.\n   This should be integrated into the base specification.\n"
- title: 3.45.2.  Text Changes to the Document
  contents:
  - "3.45.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 3.3.1)\n\
    \   ---------\n   The following format MUST be used for the DATA chunk:\n    \
    \    0                   1                   2                   3\n        0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Type = 0    | Reserved|U|B|E|    Length                     |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                              TSN                              |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \      Stream Identifier S      |   Stream Sequence Number n    |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                  Payload Protocol Identifier                  |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   \\                                                               \\\n    \
    \   /                 User Data (seq n of Stream S)                 /\n      \
    \ \\                                                               \\\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Reserved:\
    \ 5 bits\n      Should be set to all '0's and ignored by the receiver.\n   ---------\n\
    \   New text: (Section 3.3.1)\n   ---------\n   The following format MUST be used\
    \ for the DATA chunk:\n        0                   1                   2     \
    \              3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Type = 0    |  Res  |I|U|B|E|    Length                     |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                              TSN                              |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \      Stream Identifier S      |   Stream Sequence Number n    |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                  Payload Protocol Identifier                  |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   \\                                                               \\\n    \
    \   /                 User Data (seq n of Stream S)                 /\n      \
    \ \\                                                               \\\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Res: 4\
    \ bits\n      SHOULD be set to all '0's and ignored by the receiver.\n   I bit:\
    \ 1 bit\n      The (I)mmediate bit MAY be set by the sender whenever the sender\n\
    \      of a DATA chunk can benefit from the corresponding SACK chunk\n      being\
    \ sent back without delay.  See Section 4 of [RFC7053] for a\n      discussion\
    \ of the benefits.\n   This text is in final form and is not further updated in\
    \ this\n   document.\n   ---------\n   New text: (Append to Section 6.1)\n   ---------\n\
    \   Whenever the sender of a DATA chunk can benefit from the\n   corresponding\
    \ SACK chunk being sent back without delay, the sender\n   MAY set the I bit in\
    \ the DATA chunk header.  Please note that why the\n   sender has set the I bit\
    \ is irrelevant to the receiver.\n   Reasons for setting the I bit include, but\
    \ are not limited to, the\n   following (see Section 4 of [RFC7053] for a discussion\
    \ of the\n   benefits):\n   o  The application requests that the I bit of the\
    \ last DATA chunk of\n      a user message be set when providing the user message\
    \ to the SCTP\n      implementation (see Section 7).\n   o  The sender is in the\
    \ SHUTDOWN-PENDING state.\n   o  The sending of a DATA chunk fills the congestion\
    \ or receiver\n      window.\n   This text is in final form and is not further\
    \ updated in this\n   document.\n   ---------\n   Old text: (Section 6.2)\n  \
    \ ---------\n   Note: The SHUTDOWN chunk does not contain Gap Ack Block fields.\n\
    \   Therefore, the endpoint should use a SACK instead of the SHUTDOWN\n   chunk\
    \ to acknowledge DATA chunks received out of order.\n   ---------\n   New text:\
    \ (Section 6.2)\n   ---------\n   Note: The SHUTDOWN chunk does not contain Gap\
    \ Ack Block fields.\n   Therefore, the endpoint SHOULD use a SACK instead of the\
    \ SHUTDOWN\n   chunk to acknowledge DATA chunks received out of order.\n   Upon\
    \ receipt of an SCTP packet containing a DATA chunk with the I bit\n   set, the\
    \ receiver SHOULD NOT delay the sending of the corresponding\n   SACK chunk, i.e.,\
    \ the receiver SHOULD immediately respond with the\n   corresponding SACK chunk.\n\
    \   Please note that this change is only about adding a paragraph.\n   This text\
    \ is in final form and is not further updated in this\n   document.\n   ---------\n\
    \   Old text: (Section 10.1 E))\n   ---------\n   E) Send\n    Format: SEND(association\
    \ id, buffer address, byte count [,context]\n            [,stream id] [,life time]\
    \ [,destination transport address]\n            [,unordered flag] [,no-bundle\
    \ flag] [,payload protocol-id] )\n    -> result\n   ---------\n   New text: (Section\
    \ 10.1 E))\n   ---------\n   E) Send\n    Format: SEND(association id, buffer\
    \ address, byte count [,context]\n            [,stream id] [,life time] [,destination\
    \ transport address]\n            [,unordered flag] [,no-bundle flag] [,payload\
    \ protocol-id]\n            [,sack-immediately])\n    -> result\n   This text\
    \ is in final form and is not further updated in this\n   document.\n   ---------\n\
    \   New text: (Append optional parameter in item E) of Section 10.1)\n   ---------\n\
    \   o  sack-immediately flag - set the I bit on the last DATA chunk used\n   \
    \   for the user message to be transmitted.\n   This text is in final form and\
    \ is not further updated in this\n   document.\n"
- title: 3.45.3.  Solution Description
  contents:
  - "3.45.3.  Solution Description\n   [RFC7053] has been integrated.\n"
- title: 3.46.  CRC32c Code Improvements
  contents:
  - '3.46.  CRC32c Code Improvements

    '
- title: 3.46.1.  Description of the Problem
  contents:
  - "3.46.1.  Description of the Problem\n   The code given for the CRC32c computations\
    \ uses types such as \"long\",\n   which may have different lengths on different\
    \ operating systems or\n   processors.  Therefore, the code needs to be changed,\
    \ so that it uses\n   specific types such as uint32_t.\n   Some syntax errors\
    \ and a comment also need to be fixed.\n   We remind the reader that per Section\
    \ 3.10.2 of this document most of\n   Appendix C of RFC 4960 will be moved to\
    \ Appendix B in the bis\n   document (thus the \"Old text: (Appendix C)\" and\
    \ \"New text:\n   (Appendix B)\" items in this section).\n"
- title: 3.46.2.  Text Changes to the Document
  contents:
  - "3.46.2.  Text Changes to the Document\n   ---------\n   Old text: (Appendix C)\n\
    \   ---------\n   /*************************************************************/\n\
    \   /* Note Definition for Ross Williams table generator would   */\n   /* be:\
    \ TB_WIDTH=4, TB_POLLY=0x1EDC6F41, TB_REVER=TRUE        */\n   /* For Mr. Williams\
    \ direct calculation code use the settings */\n   /* cm_width=32, cm_poly=0x1EDC6F41,\
    \ cm_init=0xFFFFFFFF,      */\n   /* cm_refin=TRUE, cm_refot=TRUE, cm_xorort=0x00000000\
    \        */\n   /*************************************************************/\n\
    \   /* Example of the crc table file */\n   #ifndef __crc32cr_table_h__\n   #define\
    \ __crc32cr_table_h__\n   #define CRC32C_POLY 0x1EDC6F41\n   #define CRC32C(c,d)\
    \ (c=(c>>8)^crc_c[(c^(d))&0xFF])\n   unsigned long  crc_c[256] =\n   {\n   0x00000000L,\
    \ 0xF26B8303L, 0xE13B70F7L, 0x1350F3F4L,\n   0xC79A971FL, 0x35F1141CL, 0x26A1E7E8L,\
    \ 0xD4CA64EBL,\n   0x8AD958CFL, 0x78B2DBCCL, 0x6BE22838L, 0x9989AB3BL,\n   0x4D43CFD0L,\
    \ 0xBF284CD3L, 0xAC78BF27L, 0x5E133C24L,\n   0x105EC76FL, 0xE235446CL, 0xF165B798L,\
    \ 0x030E349BL,\n   0xD7C45070L, 0x25AFD373L, 0x36FF2087L, 0xC494A384L,\n   0x9A879FA0L,\
    \ 0x68EC1CA3L, 0x7BBCEF57L, 0x89D76C54L,\n   0x5D1D08BFL, 0xAF768BBCL, 0xBC267848L,\
    \ 0x4E4DFB4BL,\n   0x20BD8EDEL, 0xD2D60DDDL, 0xC186FE29L, 0x33ED7D2AL,\n   0xE72719C1L,\
    \ 0x154C9AC2L, 0x061C6936L, 0xF477EA35L,\n   0xAA64D611L, 0x580F5512L, 0x4B5FA6E6L,\
    \ 0xB93425E5L,\n   0x6DFE410EL, 0x9F95C20DL, 0x8CC531F9L, 0x7EAEB2FAL,\n   0x30E349B1L,\
    \ 0xC288CAB2L, 0xD1D83946L, 0x23B3BA45L,\n   0xF779DEAEL, 0x05125DADL, 0x1642AE59L,\
    \ 0xE4292D5AL,\n   0xBA3A117EL, 0x4851927DL, 0x5B016189L, 0xA96AE28AL,\n   0x7DA08661L,\
    \ 0x8FCB0562L, 0x9C9BF696L, 0x6EF07595L,\n   0x417B1DBCL, 0xB3109EBFL, 0xA0406D4BL,\
    \ 0x522BEE48L,\n   0x86E18AA3L, 0x748A09A0L, 0x67DAFA54L, 0x95B17957L,\n   0xCBA24573L,\
    \ 0x39C9C670L, 0x2A993584L, 0xD8F2B687L,\n   0x0C38D26CL, 0xFE53516FL, 0xED03A29BL,\
    \ 0x1F682198L,\n   0x5125DAD3L, 0xA34E59D0L, 0xB01EAA24L, 0x42752927L,\n   0x96BF4DCCL,\
    \ 0x64D4CECFL, 0x77843D3BL, 0x85EFBE38L,\n   0xDBFC821CL, 0x2997011FL, 0x3AC7F2EBL,\
    \ 0xC8AC71E8L,\n   0x1C661503L, 0xEE0D9600L, 0xFD5D65F4L, 0x0F36E6F7L,\n   0x61C69362L,\
    \ 0x93AD1061L, 0x80FDE395L, 0x72966096L,\n   0xA65C047DL, 0x5437877EL, 0x4767748AL,\
    \ 0xB50CF789L,\n   0xEB1FCBADL, 0x197448AEL, 0x0A24BB5AL, 0xF84F3859L,\n   0x2C855CB2L,\
    \ 0xDEEEDFB1L, 0xCDBE2C45L, 0x3FD5AF46L,\n   0x7198540DL, 0x83F3D70EL, 0x90A324FAL,\
    \ 0x62C8A7F9L,\n   0xB602C312L, 0x44694011L, 0x5739B3E5L, 0xA55230E6L,\n   0xFB410CC2L,\
    \ 0x092A8FC1L, 0x1A7A7C35L, 0xE811FF36L,\n   0x3CDB9BDDL, 0xCEB018DEL, 0xDDE0EB2AL,\
    \ 0x2F8B6829L,\n   0x82F63B78L, 0x709DB87BL, 0x63CD4B8FL, 0x91A6C88CL,\n   0x456CAC67L,\
    \ 0xB7072F64L, 0xA457DC90L, 0x563C5F93L,\n   0x082F63B7L, 0xFA44E0B4L, 0xE9141340L,\
    \ 0x1B7F9043L,\n   0xCFB5F4A8L, 0x3DDE77ABL, 0x2E8E845FL, 0xDCE5075CL,\n   0x92A8FC17L,\
    \ 0x60C37F14L, 0x73938CE0L, 0x81F80FE3L,\n   0x55326B08L, 0xA759E80BL, 0xB4091BFFL,\
    \ 0x466298FCL,\n   0x1871A4D8L, 0xEA1A27DBL, 0xF94AD42FL, 0x0B21572CL,\n   0xDFEB33C7L,\
    \ 0x2D80B0C4L, 0x3ED04330L, 0xCCBBC033L,\n   0xA24BB5A6L, 0x502036A5L, 0x4370C551L,\
    \ 0xB11B4652L,\n   0x65D122B9L, 0x97BAA1BAL, 0x84EA524EL, 0x7681D14DL,\n   0x2892ED69L,\
    \ 0xDAF96E6AL, 0xC9A99D9EL, 0x3BC21E9DL,\n   0xEF087A76L, 0x1D63F975L, 0x0E330A81L,\
    \ 0xFC588982L,\n   0xB21572C9L, 0x407EF1CAL, 0x532E023EL, 0xA145813DL,\n   0x758FE5D6L,\
    \ 0x87E466D5L, 0x94B49521L, 0x66DF1622L,\n   0x38CC2A06L, 0xCAA7A905L, 0xD9F75AF1L,\
    \ 0x2B9CD9F2L,\n   0xFF56BD19L, 0x0D3D3E1AL, 0x1E6DCDEEL, 0xEC064EEDL,\n   0xC38D26C4L,\
    \ 0x31E6A5C7L, 0x22B65633L, 0xD0DDD530L,\n   0x0417B1DBL, 0xF67C32D8L, 0xE52CC12CL,\
    \ 0x1747422FL,\n   0x49547E0BL, 0xBB3FFD08L, 0xA86F0EFCL, 0x5A048DFFL,\n   0x8ECEE914L,\
    \ 0x7CA56A17L, 0x6FF599E3L, 0x9D9E1AE0L,\n   0xD3D3E1ABL, 0x21B862A8L, 0x32E8915CL,\
    \ 0xC083125FL,\n   0x144976B4L, 0xE622F5B7L, 0xF5720643L, 0x07198540L,\n   0x590AB964L,\
    \ 0xAB613A67L, 0xB831C993L, 0x4A5A4A90L,\n   0x9E902E7BL, 0x6CFBAD78L, 0x7FAB5E8CL,\
    \ 0x8DC0DD8FL,\n   0xE330A81AL, 0x115B2B19L, 0x020BD8EDL, 0xF0605BEEL,\n   0x24AA3F05L,\
    \ 0xD6C1BC06L, 0xC5914FF2L, 0x37FACCF1L,\n   0x69E9F0D5L, 0x9B8273D6L, 0x88D28022L,\
    \ 0x7AB90321L,\n   0xAE7367CAL, 0x5C18E4C9L, 0x4F48173DL, 0xBD23943EL,\n   0xF36E6F75L,\
    \ 0x0105EC76L, 0x12551F82L, 0xE03E9C81L,\n   0x34F4F86AL, 0xC69F7B69L, 0xD5CF889DL,\
    \ 0x27A40B9EL,\n   0x79B737BAL, 0x8BDCB4B9L, 0x988C474DL, 0x6AE7C44EL,\n   0xBE2DA0A5L,\
    \ 0x4C4623A6L, 0x5F16D052L, 0xAD7D5351L,\n   };\n   #endif\n   ---------\n   New\
    \ text: (Appendix B)\n   ---------\n   <CODE BEGINS>\n   /****************************************************************/\n\
    \   /* Note: The definitions for Ross Williams's table generator    */\n   /*\
    \ would be TB_WIDTH=4, TB_POLY=0x1EDC6F41, TB_REVER=TRUE.      */\n   /* For Mr.\
    \ Williams's direct calculation code, use the settings */\n   /* cm_width=32,\
    \ cm_poly=0x1EDC6F41, cm_init=0xFFFFFFFF,         */\n   /* cm_refin=TRUE, cm_refot=TRUE,\
    \ cm_xorot=0x00000000.           */\n   /****************************************************************/\n\
    \   /* Example of the crc table file */\n   #ifndef __crc32cr_h__\n   #define\
    \ __crc32cr_h__\n   #define CRC32C_POLY 0x1EDC6F41UL\n   #define CRC32C(c,d) (c=(c>>8)^crc_c[(c^(d))&0xFF])\n\
    \   uint32_t crc_c[256] =\n   {\n   0x00000000UL, 0xF26B8303UL, 0xE13B70F7UL,\
    \ 0x1350F3F4UL,\n   0xC79A971FUL, 0x35F1141CUL, 0x26A1E7E8UL, 0xD4CA64EBUL,\n\
    \   0x8AD958CFUL, 0x78B2DBCCUL, 0x6BE22838UL, 0x9989AB3BUL,\n   0x4D43CFD0UL,\
    \ 0xBF284CD3UL, 0xAC78BF27UL, 0x5E133C24UL,\n   0x105EC76FUL, 0xE235446CUL, 0xF165B798UL,\
    \ 0x030E349BUL,\n   0xD7C45070UL, 0x25AFD373UL, 0x36FF2087UL, 0xC494A384UL,\n\
    \   0x9A879FA0UL, 0x68EC1CA3UL, 0x7BBCEF57UL, 0x89D76C54UL,\n   0x5D1D08BFUL,\
    \ 0xAF768BBCUL, 0xBC267848UL, 0x4E4DFB4BUL,\n   0x20BD8EDEUL, 0xD2D60DDDUL, 0xC186FE29UL,\
    \ 0x33ED7D2AUL,\n   0xE72719C1UL, 0x154C9AC2UL, 0x061C6936UL, 0xF477EA35UL,\n\
    \   0xAA64D611UL, 0x580F5512UL, 0x4B5FA6E6UL, 0xB93425E5UL,\n   0x6DFE410EUL,\
    \ 0x9F95C20DUL, 0x8CC531F9UL, 0x7EAEB2FAUL,\n   0x30E349B1UL, 0xC288CAB2UL, 0xD1D83946UL,\
    \ 0x23B3BA45UL,\n   0xF779DEAEUL, 0x05125DADUL, 0x1642AE59UL, 0xE4292D5AUL,\n\
    \   0xBA3A117EUL, 0x4851927DUL, 0x5B016189UL, 0xA96AE28AUL,\n   0x7DA08661UL,\
    \ 0x8FCB0562UL, 0x9C9BF696UL, 0x6EF07595UL,\n   0x417B1DBCUL, 0xB3109EBFUL, 0xA0406D4BUL,\
    \ 0x522BEE48UL,\n   0x86E18AA3UL, 0x748A09A0UL, 0x67DAFA54UL, 0x95B17957UL,\n\
    \   0xCBA24573UL, 0x39C9C670UL, 0x2A993584UL, 0xD8F2B687UL,\n   0x0C38D26CUL,\
    \ 0xFE53516FUL, 0xED03A29BUL, 0x1F682198UL,\n   0x5125DAD3UL, 0xA34E59D0UL, 0xB01EAA24UL,\
    \ 0x42752927UL,\n   0x96BF4DCCUL, 0x64D4CECFUL, 0x77843D3BUL, 0x85EFBE38UL,\n\
    \   0xDBFC821CUL, 0x2997011FUL, 0x3AC7F2EBUL, 0xC8AC71E8UL,\n   0x1C661503UL,\
    \ 0xEE0D9600UL, 0xFD5D65F4UL, 0x0F36E6F7UL,\n   0x61C69362UL, 0x93AD1061UL, 0x80FDE395UL,\
    \ 0x72966096UL,\n   0xA65C047DUL, 0x5437877EUL, 0x4767748AUL, 0xB50CF789UL,\n\
    \   0xEB1FCBADUL, 0x197448AEUL, 0x0A24BB5AUL, 0xF84F3859UL,\n   0x2C855CB2UL,\
    \ 0xDEEEDFB1UL, 0xCDBE2C45UL, 0x3FD5AF46UL,\n   0x7198540DUL, 0x83F3D70EUL, 0x90A324FAUL,\
    \ 0x62C8A7F9UL,\n   0xB602C312UL, 0x44694011UL, 0x5739B3E5UL, 0xA55230E6UL,\n\
    \   0xFB410CC2UL, 0x092A8FC1UL, 0x1A7A7C35UL, 0xE811FF36UL,\n   0x3CDB9BDDUL,\
    \ 0xCEB018DEUL, 0xDDE0EB2AUL, 0x2F8B6829UL,\n   0x82F63B78UL, 0x709DB87BUL, 0x63CD4B8FUL,\
    \ 0x91A6C88CUL,\n   0x456CAC67UL, 0xB7072F64UL, 0xA457DC90UL, 0x563C5F93UL,\n\
    \   0x082F63B7UL, 0xFA44E0B4UL, 0xE9141340UL, 0x1B7F9043UL,\n   0xCFB5F4A8UL,\
    \ 0x3DDE77ABUL, 0x2E8E845FUL, 0xDCE5075CUL,\n   0x92A8FC17UL, 0x60C37F14UL, 0x73938CE0UL,\
    \ 0x81F80FE3UL,\n   0x55326B08UL, 0xA759E80BUL, 0xB4091BFFUL, 0x466298FCUL,\n\
    \   0x1871A4D8UL, 0xEA1A27DBUL, 0xF94AD42FUL, 0x0B21572CUL,\n   0xDFEB33C7UL,\
    \ 0x2D80B0C4UL, 0x3ED04330UL, 0xCCBBC033UL,\n   0xA24BB5A6UL, 0x502036A5UL, 0x4370C551UL,\
    \ 0xB11B4652UL,\n   0x65D122B9UL, 0x97BAA1BAUL, 0x84EA524EUL, 0x7681D14DUL,\n\
    \   0x2892ED69UL, 0xDAF96E6AUL, 0xC9A99D9EUL, 0x3BC21E9DUL,\n   0xEF087A76UL,\
    \ 0x1D63F975UL, 0x0E330A81UL, 0xFC588982UL,\n   0xB21572C9UL, 0x407EF1CAUL, 0x532E023EUL,\
    \ 0xA145813DUL,\n   0x758FE5D6UL, 0x87E466D5UL, 0x94B49521UL, 0x66DF1622UL,\n\
    \   0x38CC2A06UL, 0xCAA7A905UL, 0xD9F75AF1UL, 0x2B9CD9F2UL,\n   0xFF56BD19UL,\
    \ 0x0D3D3E1AUL, 0x1E6DCDEEUL, 0xEC064EEDUL,\n   0xC38D26C4UL, 0x31E6A5C7UL, 0x22B65633UL,\
    \ 0xD0DDD530UL,\n   0x0417B1DBUL, 0xF67C32D8UL, 0xE52CC12CUL, 0x1747422FUL,\n\
    \   0x49547E0BUL, 0xBB3FFD08UL, 0xA86F0EFCUL, 0x5A048DFFUL,\n   0x8ECEE914UL,\
    \ 0x7CA56A17UL, 0x6FF599E3UL, 0x9D9E1AE0UL,\n   0xD3D3E1ABUL, 0x21B862A8UL, 0x32E8915CUL,\
    \ 0xC083125FUL,\n   0x144976B4UL, 0xE622F5B7UL, 0xF5720643UL, 0x07198540UL,\n\
    \   0x590AB964UL, 0xAB613A67UL, 0xB831C993UL, 0x4A5A4A90UL,\n   0x9E902E7BUL,\
    \ 0x6CFBAD78UL, 0x7FAB5E8CUL, 0x8DC0DD8FUL,\n   0xE330A81AUL, 0x115B2B19UL, 0x020BD8EDUL,\
    \ 0xF0605BEEUL,\n   0x24AA3F05UL, 0xD6C1BC06UL, 0xC5914FF2UL, 0x37FACCF1UL,\n\
    \   0x69E9F0D5UL, 0x9B8273D6UL, 0x88D28022UL, 0x7AB90321UL,\n   0xAE7367CAUL,\
    \ 0x5C18E4C9UL, 0x4F48173DUL, 0xBD23943EUL,\n   0xF36E6F75UL, 0x0105EC76UL, 0x12551F82UL,\
    \ 0xE03E9C81UL,\n   0x34F4F86AUL, 0xC69F7B69UL, 0xD5CF889DUL, 0x27A40B9EUL,\n\
    \   0x79B737BAUL, 0x8BDCB4B9UL, 0x988C474DUL, 0x6AE7C44EUL,\n   0xBE2DA0A5UL,\
    \ 0x4C4623A6UL, 0x5F16D052UL, 0xAD7D5351UL,\n   };\n   #endif\n   This text has\
    \ been modified by multiple errata.  It includes\n   modifications from Section\
    \ 3.10.  It is in final form and is not\n   further updated in this document.\n\
    \   ---------\n   Old text: (Appendix C)\n   ---------\n   /* Example of table\
    \ build routine */\n   #include <stdio.h>\n   #include <stdlib.h>\n   #define\
    \ OUTPUT_FILE   \"crc32cr.h\"\n   #define CRC32C_POLY    0x1EDC6F41L\n   FILE\
    \ *tf;\n   unsigned long\n   reflect_32 (unsigned long b)\n   {\n     int i;\n\
    \     unsigned long rw = 0L;\n     for (i = 0; i < 32; i++){\n         if (b &\
    \ 1)\n           rw |= 1 << (31 - i);\n         b >>= 1;\n     }\n     return\
    \ (rw);\n   }\n   unsigned long\n   build_crc_table (int index)\n   {\n     int\
    \ i;\n     unsigned long rb;\n     rb = reflect_32 (index);\n     for (i = 0;\
    \ i < 8; i++){\n         if (rb & 0x80000000L)\n          rb = (rb << 1) ^ CRC32C_POLY;\n\
    \         else\n          rb <<= 1;\n     }\n     return (reflect_32 (rb));\n\
    \   }\n   main ()\n   {\n     int i;\n     printf (\"\\nGenerating CRC-32c table\
    \ file <%s>\\n\",\n     OUTPUT_FILE);\n     if ((tf = fopen (OUTPUT_FILE, \"w\"\
    )) == NULL){\n         printf (\"Unable to open %s\\n\", OUTPUT_FILE);\n     \
    \    exit (1);\n     }\n     fprintf (tf, \"#ifndef __crc32cr_table_h__\\n\");\n\
    \     fprintf (tf, \"#define __crc32cr_table_h__\\n\\n\");\n     fprintf (tf,\
    \ \"#define CRC32C_POLY 0x%08lX\\n\",\n     CRC32C_POLY);\n     fprintf (tf,\n\
    \     \"#define CRC32C(c,d) (c=(c>>8)^crc_c[(c^(d))&0xFF])\\n\");\n     fprintf\
    \ (tf, \"\\nunsigned long  crc_c[256] =\\n{\\n\");\n     for (i = 0; i < 256;\
    \ i++){\n         fprintf (tf, \"0x%08lXL, \", build_crc_table (i));\n       \
    \  if ((i & 3) == 3)\n           fprintf (tf, \"\\n\");\n     }\n     fprintf\
    \ (tf, \"};\\n\\n#endif\\n\");\n     if (fclose (tf) != 0)\n       printf (\"\
    Unable to close <%s>.\" OUTPUT_FILE);\n     else\n       printf (\"\\nThe CRC-32c\
    \ table has been written to <%s>.\\n\",\n         OUTPUT_FILE);\n   }\n   ---------\n\
    \   New text: (Appendix B)\n   ---------\n   /* Example of table build routine\
    \ */\n   #include <stdio.h>\n   #include <stdlib.h>\n   #define OUTPUT_FILE  \
    \ \"crc32cr.h\"\n   #define CRC32C_POLY    0x1EDC6F41UL\n   static FILE *tf;\n\
    \   static uint32_t\n   reflect_32(uint32_t b)\n   {\n     int i;\n     uint32_t\
    \ rw = 0UL;\n     for (i = 0; i < 32; i++) {\n         if (b & 1)\n          \
    \ rw |= 1 << (31 - i);\n         b >>= 1;\n     }\n     return (rw);\n   }\n \
    \  static uint32_t\n   build_crc_table (int index)\n   {\n     int i;\n     uint32_t\
    \ rb;\n     rb = reflect_32(index);\n     for (i = 0; i < 8; i++) {\n        \
    \ if (rb & 0x80000000UL)\n          rb = (rb << 1) ^ (uint32_t)CRC32C_POLY;\n\
    \         else\n          rb <<= 1;\n     }\n     return (reflect_32(rb));\n \
    \  }\n   int\n   main (void)\n   {\n     int i;\n     printf(\"\\nGenerating CRC32c\
    \ table file <%s>.\\n\",\n     OUTPUT_FILE);\n     if ((tf = fopen(OUTPUT_FILE,\
    \ \"w\")) == NULL) {\n         printf(\"Unable to open %s.\\n\", OUTPUT_FILE);\n\
    \         exit (1);\n     }\n     fprintf(tf, \"#ifndef __crc32cr_h__\\n\");\n\
    \     fprintf(tf, \"#define __crc32cr_h__\\n\\n\");\n     fprintf(tf, \"#define\
    \ CRC32C_POLY 0x%08XUL\\n\",\n       (uint32_t)CRC32C_POLY);\n     fprintf(tf,\n\
    \       \"#define CRC32C(c,d) (c=(c>>8)^crc_c[(c^(d))&0xFF])\\n\");\n     fprintf(tf,\
    \ \"\\nuint32_t crc_c[256] =\\n{\\n\");\n     for (i = 0; i < 256; i++) {\n  \
    \       fprintf(tf, \"0x%08XUL,\", build_crc_table (i));\n         if ((i & 3)\
    \ == 3)\n           fprintf(tf, \"\\n\");\n         else\n           fprintf(tf,\
    \ \" \");\n     }\n     fprintf(tf, \"};\\n\\n#endif\\n\");\n     if (fclose(tf)\
    \ != 0)\n       printf(\"Unable to close <%s>.\\n\", OUTPUT_FILE);\n     else\n\
    \       printf(\"\\nThe CRC32c table has been written to <%s>.\\n\",\n       \
    \  OUTPUT_FILE);\n   }\n   This text has been modified by multiple errata.  It\
    \ includes\n   modifications from Section 3.10.  It is in final form and is not\n\
    \   further updated in this document.\n   ---------\n   Old text: (Appendix C)\n\
    \   ---------\n   /* Example of crc insertion */\n   #include \"crc32cr.h\"\n\
    \   unsigned long\n   generate_crc32c(unsigned char *buffer, unsigned int length)\n\
    \   {\n     unsigned int i;\n     unsigned long crc32 = ~0L;\n     unsigned long\
    \ result;\n     unsigned char byte0,byte1,byte2,byte3;\n     for (i = 0; i < length;\
    \ i++){\n         CRC32C(crc32, buffer[i]);\n     }\n     result = ~crc32;\n \
    \    /*  result now holds the negated polynomial remainder;\n      *  since the\
    \ table and algorithm is \"reflected\" [williams95].\n      *  That is, result\
    \ has the same value as if we mapped the message\n      *  to a polynomial, computed\
    \ the host-bit-order polynomial\n      *  remainder, performed final negation,\
    \ then did an end-for-end\n      *  bit-reversal.\n      *  Note that a 32-bit\
    \ bit-reversal is identical to four inplace\n      *  8-bit reversals followed\
    \ by an end-for-end byteswap.\n      *  In other words, the bytes of each bit\
    \ are in the right order,\n      *  but the bytes have been byteswapped.  So we\
    \ now do an explicit\n      *  byteswap.  On a little-endian machine, this byteswap\
    \ and\n      *  the final ntohl cancel out and could be elided.\n      */\n  \
    \   byte0 = result & 0xff;\n     byte1 = (result>>8) & 0xff;\n     byte2 = (result>>16)\
    \ & 0xff;\n     byte3 = (result>>24) & 0xff;\n     crc32 = ((byte0 << 24) |\n\
    \              (byte1 << 16) |\n              (byte2 << 8)  |\n              byte3);\n\
    \     return ( crc32 );\n   }\n   int\n   insert_crc32(unsigned char *buffer,\
    \ unsigned int length)\n   {\n     SCTP_message *message;\n     unsigned long\
    \ crc32;\n     message = (SCTP_message *) buffer;\n     message->common_header.checksum\
    \ = 0L;\n     crc32 = generate_crc32c(buffer,length);\n     /* and insert it into\
    \ the message */\n     message->common_header.checksum = htonl(crc32);\n     return\
    \ 1;\n   }\n   int\n   validate_crc32(unsigned char *buffer, unsigned int length)\n\
    \   {\n     SCTP_message *message;\n     unsigned int i;\n     unsigned long original_crc32;\n\
    \     unsigned long crc32 = ~0L;\n     /* save and zero checksum */\n     message\
    \ = (SCTP_message *) buffer;\n     original_crc32 = ntohl(message->common_header.checksum);\n\
    \     message->common_header.checksum = 0L;\n     crc32 = generate_crc32c(buffer,length);\n\
    \     return ((original_crc32 == crc32)? 1 : -1);\n   }\n   ---------\n   New\
    \ text: (Appendix B)\n   ---------\n   /* Example of crc insertion */\n   #include\
    \ \"crc32cr.h\"\n   uint32_t\n   generate_crc32c(unsigned char *buffer, unsigned\
    \ int length)\n   {\n     unsigned int i;\n     uint32_t crc32 = 0xffffffffUL;\n\
    \     uint32_t result;\n     uint8_t byte0, byte1, byte2, byte3;\n     for (i\
    \ = 0; i < length; i++) {\n         CRC32C(crc32, buffer[i]);\n     }\n     result\
    \ = ~crc32;\n     /*  result now holds the negated polynomial remainder,\n   \
    \   *  since the table and algorithm are \"reflected\" [williams95].\n      *\
    \  That is, result has the same value as if we mapped the message\n      *  to\
    \ a polynomial, computed the host-bit-order polynomial\n      *  remainder, performed\
    \ final negation, and then did an\n      *  end-for-end bit-reversal.\n      *\
    \  Note that a 32-bit bit-reversal is identical to four in-place\n      *  8-bit\
    \ bit-reversals followed by an end-for-end byteswap.\n      *  In other words,\
    \ the bits of each byte are in the right order,\n      *  but the bytes have been\
    \ byteswapped.  So, we now do an explicit\n      *  byteswap.  On a little-endian\
    \ machine, this byteswap and\n      *  the final ntohl cancel out and could be\
    \ elided.\n      */\n     byte0 = result & 0xff;\n     byte1 = (result>>8) & 0xff;\n\
    \     byte2 = (result>>16) & 0xff;\n     byte3 = (result>>24) & 0xff;\n     crc32\
    \ = ((byte0 << 24) |\n              (byte1 << 16) |\n              (byte2 << 8)\
    \  |\n              byte3);\n     return (crc32);\n   }\n   int\n   insert_crc32(unsigned\
    \ char *buffer, unsigned int length)\n   {\n     SCTP_message *message;\n    \
    \ uint32_t crc32;\n     message = (SCTP_message *) buffer;\n     message->common_header.checksum\
    \ = 0UL;\n     crc32 = generate_crc32c(buffer,length);\n     /* and insert it\
    \ into the message */\n     message->common_header.checksum = htonl(crc32);\n\
    \     return 1;\n   }\n   int\n   validate_crc32(unsigned char *buffer, unsigned\
    \ int length)\n   {\n     SCTP_message *message;\n     unsigned int i;\n     uint32_t\
    \ original_crc32;\n     uint32_t crc32;\n     /* save and zero checksum */\n \
    \    message = (SCTP_message *)buffer;\n     original_crc32 = ntohl(message->common_header.checksum);\n\
    \     message->common_header.checksum = 0L;\n     crc32 = generate_crc32c(buffer,\
    \ length);\n     return ((original_crc32 == crc32)? 1 : -1);\n   }\n   <CODE ENDS>\n\
    \   This text has been modified by multiple errata.  It includes\n   modifications\
    \ from Sections 3.5 and 3.10.  It is in final form and is\n   not further updated\
    \ in this document.\n"
- title: 3.46.3.  Solution Description
  contents:
  - "3.46.3.  Solution Description\n   The code was changed to use platform-independent\
    \ types.\n"
- title: 3.47.  Clarification of Gap Ack Blocks in SACK Chunks
  contents:
  - '3.47.  Clarification of Gap Ack Blocks in SACK Chunks

    '
- title: 3.47.1.  Description of the Problem
  contents:
  - "3.47.1.  Description of the Problem\n   The Gap Ack Blocks in the SACK chunk\
    \ are intended to be isolated.\n   However, this is not mentioned with normative\
    \ text.\n   This issue was reported as part of an errata for [RFC4960] with\n\
    \   Errata ID 5202.\n"
- title: 3.47.2.  Text Changes to the Document
  contents:
  - "3.47.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 3.3.4)\n\
    \   ---------\n   The SACK also contains zero or more Gap Ack Blocks.  Each Gap\
    \ Ack\n   Block acknowledges a subsequence of TSNs received following a break\n\
    \   in the sequence of received TSNs.  By definition, all TSNs\n   acknowledged\
    \ by Gap Ack Blocks are greater than the value of the\n   Cumulative TSN Ack.\n\
    \   ---------\n   New text: (Section 3.3.4)\n   ---------\n   The SACK also contains\
    \ zero or more Gap Ack Blocks.  Each Gap Ack\n   Block acknowledges a subsequence\
    \ of TSNs received following a break\n   in the sequence of received TSNs.  The\
    \ Gap Ack Blocks SHOULD be\n   isolated.  This means that the TSN just before\
    \ each Gap Ack Block and\n   the TSN just after each Gap Ack Block have not been\
    \ received.  By\n   definition, all TSNs acknowledged by Gap Ack Blocks are greater\
    \ than\n   the value of the Cumulative TSN Ack.\n   This text is in final form\
    \ and is not further updated in this\n   document.\n   ---------\n   Old text:\
    \ (Section 3.3.4)\n   ---------\n   Gap Ack Blocks:\n      These fields contain\
    \ the Gap Ack Blocks.  They are repeated for\n      each Gap Ack Block up to the\
    \ number of Gap Ack Blocks defined in\n      the Number of Gap Ack Blocks field.\
    \  All DATA chunks with TSNs\n      greater than or equal to (Cumulative TSN Ack\
    \ + Gap Ack Block\n      Start) and less than or equal to (Cumulative TSN Ack\
    \ + Gap Ack\n      Block End) of each Gap Ack Block are assumed to have been received\n\
    \      correctly.\n   ---------\n   New text: (Section 3.3.4)\n   ---------\n\
    \   Gap Ack Blocks:\n      These fields contain the Gap Ack Blocks.  They are\
    \ repeated for\n      each Gap Ack Block up to the number of Gap Ack Blocks defined\
    \ in\n      the Number of Gap Ack Blocks field.  All DATA chunks with TSNs\n \
    \     greater than or equal to (Cumulative TSN Ack + Gap Ack Block\n      Start)\
    \ and less than or equal to (Cumulative TSN Ack + Gap Ack\n      Block End) of\
    \ each Gap Ack Block are assumed to have been received\n      correctly.  Gap\
    \ Ack Blocks SHOULD be isolated.  This means that\n      the DATA chunks with\
    \ TSNs equal to (Cumulative TSN Ack + Gap Ack\n      Block Start - 1) and (Cumulative\
    \ TSN Ack + Gap Ack Block End + 1)\n      have not been received.\n   This text\
    \ is in final form and is not further updated in this\n   document.\n"
- title: 3.47.3.  Solution Description
  contents:
  - "3.47.3.  Solution Description\n   Normative text describing the intended usage\
    \ of Gap Ack Blocks has\n   been added.\n"
- title: 3.48.  Handling of SSN Wraparounds
  contents:
  - '3.48.  Handling of SSN Wraparounds

    '
- title: 3.48.1.  Description of the Problem
  contents:
  - "3.48.1.  Description of the Problem\n   The Stream Sequence Number (SSN) is used\
    \ for preserving the ordering\n   of user messages within each SCTP stream.  The\
    \ SSN is limited to\n   16 bits.  Therefore, multiple wraparounds of the SSN might\
    \ happen\n   within the current send window.  To allow the receiver to deliver\n\
    \   ordered user messages in the correct sequence, the sender should\n   limit\
    \ the number of user messages per stream.\n"
- title: 3.48.2.  Text Changes to the Document
  contents:
  - "3.48.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 6.1)\n\
    \   ---------\n   Note: The data sender SHOULD NOT use a TSN that is more than\
    \ 2**31 -\n   1 above the beginning TSN of the current send window.\n   ---------\n\
    \   New text: (Section 6.1)\n   ---------\n   Note: The data sender SHOULD NOT\
    \ use a TSN that is more than\n   2**31 - 1 above the beginning TSN of the current\
    \ send window.\n   Note: For each stream, the data sender SHOULD NOT have more\
    \ than\n   2**16 - 1 ordered user messages in the current send window.\n   This\
    \ text is in final form and is not further updated in this\n   document.\n"
- title: 3.48.3.  Solution Description
  contents:
  - "3.48.3.  Solution Description\n   The data sender is required to limit the number\
    \ of ordered user\n   messages within the current send window.\n"
- title: 3.49.  Update to RFC 2119 Boilerplate Text
  contents:
  - '3.49.  Update to RFC 2119 Boilerplate Text

    '
- title: 3.49.1.  Description of the Problem
  contents:
  - "3.49.1.  Description of the Problem\n   The text to be used to refer to the terms\
    \ (\"key words\") defined in\n   [RFC2119] has been updated by [RFC8174].  This\
    \ needs to be integrated\n   into the base specification.\n"
- title: 3.49.2.  Text Changes to the Document
  contents:
  - "3.49.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 2)\n\
    \   ---------\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   ---------\n   New text: (Section 2)\n   ---------\n   The\
    \ key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n\
    \   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\"\
    , and\n   \"OPTIONAL\" in this document are to be interpreted as described in\n\
    \   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,\
    \ as shown here.\n   This text is in final form and is not further updated in\
    \ this\n   document.\n"
- title: 3.49.3.  Solution Description
  contents:
  - "3.49.3.  Solution Description\n   The text has been updated to the text specified\
    \ in [RFC8174].\n"
- title: 3.50.  Removal of Text (Previously Missed in RFC 4960)
  contents:
  - '3.50.  Removal of Text (Previously Missed in RFC 4960)

    '
- title: 3.50.1.  Description of the Problem
  contents:
  - "3.50.1.  Description of the Problem\n   When integrating the changes to Section\
    \ 7.2.4 of [RFC2960] as\n   described in Section 2.8.2 of [RFC4460], some text\
    \ was not removed\n   and is therefore still in [RFC4960].\n"
- title: 3.50.2.  Text Changes to the Document
  contents:
  - "3.50.2.  Text Changes to the Document\n   ---------\n   Old text: (Section 7.2.4)\n\
    \   ---------\n   A straightforward implementation of the above keeps a counter\
    \ for\n   each TSN hole reported by a SACK.  The counter increments for each\n\
    \   consecutive SACK reporting the TSN hole.  After reaching 3 and\n   starting\
    \ the Fast-Retransmit procedure, the counter resets to 0.\n   Because cwnd in\
    \ SCTP indirectly bounds the number of outstanding\n   TSN's, the effect of TCP\
    \ Fast Recovery is achieved automatically with\n   no adjustment to the congestion\
    \ control window size.\n   ---------\n   New text: (Section 7.2.4)\n   ---------\n\
    \   This text is in final form and is not further updated in this\n   document.\n"
- title: 3.50.3.  Solution Description
  contents:
  - "3.50.3.  Solution Description\n   The text has finally been removed.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   Section 3.44 of this document suggests new text that\
    \ would update the\n   \"Service Name and Transport Protocol Port Number Registry\"\
    \ for SCTP\n   to be consistent with [RFC6335].\n   IANA has confirmed that it\
    \ is OK to make the proposed text change in\n   an upcoming Standards Track document\
    \ that will update [RFC4960].\n   IANA is not asked to perform any other action,\
    \ and this document does\n   not request that IANA make a change to any registry.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document does not add any security considerations\
    \ to those given\n   in [RFC4960].\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4960]  Stewart, R., Ed., \"Stream Control Transmission Protocol\",\n \
    \             RFC 4960, DOI 10.17487/RFC4960, September 2007,\n              <https://www.rfc-editor.org/info/rfc4960>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC1122]  Braden, R., Ed., \"Requirements for\
    \ Internet Hosts -\n              Communication Layers\", STD 3, RFC 1122,\n \
    \             DOI 10.17487/RFC1122, October 1989,\n              <https://www.rfc-editor.org/info/rfc1122>.\n\
    \   [RFC1858]  Ziemba, G., Reed, D., and P. Traina, \"Security\n             \
    \ Considerations for IP Fragment Filtering\", RFC 1858,\n              DOI 10.17487/RFC1858,\
    \ October 1995,\n              <https://www.rfc-editor.org/info/rfc1858>.\n  \
    \ [RFC2960]  Stewart, R., Xie, Q., Morneault, K., Sharp, C.,\n              Schwarzbauer,\
    \ H., Taylor, T., Rytina, I., Kalla, M.,\n              Zhang, L., and V. Paxson,\
    \ \"Stream Control Transmission\n              Protocol\", RFC 2960, DOI 10.17487/RFC2960,\
    \ October 2000,\n              <https://www.rfc-editor.org/info/rfc2960>.\n  \
    \ [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n     \
    \         of Explicit Congestion Notification (ECN) to IP\",\n              RFC\
    \ 3168, DOI 10.17487/RFC3168, September 2001,\n              <https://www.rfc-editor.org/info/rfc3168>.\n\
    \   [RFC4460]  Stewart, R., Arias-Rodriguez, I., Poon, K., Caro, A., and\n   \
    \           M. Tuexen, \"Stream Control Transmission Protocol (SCTP)\n       \
    \       Specification Errata and Issues\", RFC 4460,\n              DOI 10.17487/RFC4460,\
    \ April 2006,\n              <https://www.rfc-editor.org/info/rfc4460>.\n   [RFC5681]\
    \  Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion\n              Control\"\
    , RFC 5681, DOI 10.17487/RFC5681, September 2009,\n              <https://www.rfc-editor.org/info/rfc5681>.\n\
    \   [RFC6096]  Tuexen, M. and R. Stewart, \"Stream Control Transmission\n    \
    \          Protocol (SCTP) Chunk Flags Registration\", RFC 6096,\n           \
    \   DOI 10.17487/RFC6096, January 2011,\n              <https://www.rfc-editor.org/info/rfc6096>.\n\
    \   [RFC6298]  Paxson, V., Allman, M., Chu, J., and M. Sargent,\n            \
    \  \"Computing TCP's Retransmission Timer\", RFC 6298,\n              DOI 10.17487/RFC6298,\
    \ June 2011,\n              <https://www.rfc-editor.org/info/rfc6298>.\n   [RFC6335]\
    \  Cotton, M., Eggert, L., Touch, J., Westerlund, M., and S.\n              Cheshire,\
    \ \"Internet Assigned Numbers Authority (IANA)\n              Procedures for the\
    \ Management of the Service Name and\n              Transport Protocol Port Number\
    \ Registry\", BCP 165,\n              RFC 6335, DOI 10.17487/RFC6335, August 2011,\n\
    \              <https://www.rfc-editor.org/info/rfc6335>.\n   [RFC7053]  Tuexen,\
    \ M., Ruengeler, I., and R. Stewart, \"SACK-\n              IMMEDIATELY Extension\
    \ for the Stream Control Transmission\n              Protocol\", RFC 7053, DOI\
    \ 10.17487/RFC7053, November 2013,\n              <https://www.rfc-editor.org/info/rfc7053>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8311]  Black, D., \"Relaxing Restrictions on Explicit Congestion\n   \
    \           Notification (ECN) Experimentation\", RFC 8311,\n              DOI\
    \ 10.17487/RFC8311, January 2018,\n              <https://www.rfc-editor.org/info/rfc8311>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors wish to thank Pontus Andersson, Eric W. Biederman,\
    \ Cedric\n   Bonnet, Spencer Dawkins, Gorry Fairhurst, Benjamin Kaduk, Mirja\n\
    \   Kuehlewind, Peter Lei, Gyula Marosi, Lionel Morand, Jeff Morriss,\n   Karen\
    \ E. E. Nielsen, Tom Petch, Kacheong Poon, Julien Pourtet, Irene\n   Ruengeler,\
    \ Michael Welzl, and Qiaobing Xie for their invaluable\n   comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Randall R. Stewart\n   Netflix, Inc.\n   Chapin, SC  29036\n\
    \   United States of America\n   Email: randall@lakerest.net\n   Michael Tuexen\n\
    \   Muenster University of Applied Sciences\n   Stegerwaldstrasse 39\n   48565\
    \ Steinfurt\n   Germany\n   Email: tuexen@fh-muenster.de\n   Maksim Proshin\n\
    \   Ericsson\n   Kistavaegen 25\n   Stockholm  164 80\n   Sweden\n   Email: mproshin@tieto.mera.ru\n"
