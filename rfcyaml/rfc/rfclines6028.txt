Abstract This document specifies two extensions to the Host Identity Protocol (HIP) to implement multi hop routing.
The first extension allows implementing source routing in HIP.
That is, a node sending a HIP packet can define a set of nodes that the HIP packet should traverse.
The second extension allows a HIP packet to carry and record the list of nodes that forwarded it.
1.  Introduction When the Host Identity Protocol (HIP) [RFC5201] is used in certain contexts, nodes need the ability to perform source routing.
That is, a node needs the ability to send a HIP signaling packet that will traverse a set of nodes before reaching its destination.
Such features are needed, e.g., in the HIP Based Overlay Networking Environment (HIP BONE)
[HIP BONE] or if two nodes wish to keep a third, or more, HIP nodes on the signaling path.
This document defines an extension that provides HIP with this functionality.
Additionally, when HIP signaling packets are routed through multiple nodes, some of these nodes (e.g., the destination host) need the ability to know the nodes that a particular packet traversed.
This document defines another extension that provides HIP with this functionality.
These two extensions enable multi hop routing in HIP.
Before these extensions were specified, there were standardized ways for supporting only a single intermediate node (e.g., a rendezvous server [RFC5204]) between the source of a HIP packet and its destination.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
The following terms used in this document are similar to those defined by REsource LOcation
[P2PSIP BASE] but are used here in the context of HIP.
Destination list:  A list of Host Identity Tags (HITs) of the nodes that a HIP packet should traverse.
Via list:  A list of HITs of the nodes that a HIP packet has traversed.
A response to a message is routed back using the same set of intermediary nodes as the original message used, except in reversed order.
Also known as symmetric recursive routing.
The multi hop routing extensions may be used in different contexts, and whether a new HIP signaling packet should, for example, include a Via list or have different options enabled can depend on the particular use case, local policies, and different protocols using the extension.
This section defines how the new parameters are handled, but when to use these extensions, or how to configure them, is out of scope for this document.
Creating and Processing Via Lists
When a node sending a HIP packet needs to record the nodes that are on the path that the HIP packet traverses, it includes an empty ROUTE VIA parameter in the packet.
A node that receives a packet with a ROUTE VIA parameter SHOULD add its own HIT to the end of the ROUTE VIA parameter, unless it is the final recipient of the packet.
If the node uses a different HIT on the HIP association it used for receiving the packet than for sending it forward, it SHOULD also add the receiving HIT to the route list before the sending HIT.
If the node is the final recipient of the packet, and the received packet generates a response HIP packet, the node checks the SYMMETRIC flag from the ROUTE VIA parameter.
If the SYMMETRIC flag is set, the node MUST create a ROUTE DST parameter from the ROUTE VIA parameter, as described in Section 3.2, and include it in the response packet.
Also, if an intermediary node generates a new HIP packet (e.g., an error NOTIFY packet) due to a HIP packet that had a ROUTE VIA parameter with the SYMMETRIC flag set, and the new packet is intended for the sender of the original HIP packet, the node SHOULD construct and add a ROUTE DST parameter into the new packet as in the previous case.
A node that needs to define the other nodes that should be on the path
a HIP packet traverses adds a ROUTE DST parameter to the HIP packet.
The node may either decide the path independently, or it may create the path based on a ROUTE VIA parameter.
Only the originator of a signed HIP packet can add a ROUTE DST parameter to the HIP packet, and none of the nodes on the path can modify it, since the parameter is covered by the signature.
When a node creates a ROUTE DST parameter due to receiving a packet with a ROUTE VIA parameter, it copies all the HITs in the ROUTE
VIA parameter to the ROUTE DST parameter, but in reversed order.
This results in the HIP response packet being forwarded using the same path as the packet for which the response was generated.
If exactly the same set of nodes should be traversed by the response packet,
(see Table 1) also SHOULD be set in the ROUTE
VIA parameter (and eventually copied to the ROUTE DST parameter)
to prevent the response packet from possibly skipping some nodes on the list.
When a node receives a HIP packet that contains a ROUTE DST parameter, it first looks up its own HIT from the route list.
If the node's own HIT is not in the list and the node is not the receiver of the packet, the packet was incorrectly forwarded and MUST be dropped.
If the node's HIT is in the list more than once, the list is invalid and the packet MUST be dropped to avoid forwarding loops.
The next hop for the packet is the HIT after the node's own HIT in the list.
If the node's HIT was the last HIT in the list, the next hop is the receiver's HIT in the HIP header.
If the MUST FOLLOW flag in the ROUTE DST parameter is not set, the node SHOULD check whether it has a valid locator for one of the nodes later in the list, or for the receiver of the packet, and it MAY select such a node as the next hop.
If the MUST FOLLOW flag is set, the node MUST NOT skip any nodes in the list.
If the node has a valid locator for the next hop, it MUST forward the HIP packet to the next hop node.
If the node cannot determine a valid locator for the next hop node, it SHOULD drop the packet and SHOULD send back a NOTIFY error packet with type UNKNOWN
The Notification Data field for the error notifications SHOULD contain the HIP header of the rejected packet and the ROUTE DST parameter.
Fragmentation Considerations Via and Destination lists with multiple HITs can substantially increase the size of the HIP packets, and thus fragmentation issues (see Section 5.1.3 of [RFC5201]) should be taken into consideration when these extensions are used.
Via lists in particular should be used with care, since the final size of the packet is not known unless the maximum possible amount of hops is known beforehand.
Both parameters do still have a maximum size based on the maximum number of allowed HITs (see Section 4.1).
This memo defines two new HIP parameters that are used for recording a route via multiple nodes (ROUTE VIA) and for defining a route that a packet should traverse by the sender of the packet (ROUTE DST).
The ROUTE DST parameter is integrity protected with the signature (where present) but ROUTE VIA is not, so that intermediary nodes can add their own HITs to the list.
Both ROUTE DST and ROUTE
VIA are critical parameters (as defined in Section 5.2.1 of [RFC5201]), since the packet will not be properly routed unless all nodes on the path recognize the parameters.
VIA: 64017 Length    length in octets, excluding Type and Length (i.e., number of HITs   16
VIA and ROUTE DST Parameters Figure 1 shows the format of both ROUTE VIA and ROUTE DST parameters.
The ROUTE DST parameter, if present, MUST have at least one HIT, but the ROUTE VIA parameter can also have zero HITs.
The ROUTE DST and ROUTE
VIA parameters SHALL NOT contain more than 32 HITs.
The Flags field is used for requesting special handling for Via and Destination lists.
The flags defined in this document are shown in Table 1.
The Reserved field can be used by future extensions; it MUST be zero when sending and ignored when receiving this parameter.
Bit Flags in ROUTE VIA and ROUTE
The "Pos" column in Table 1 shows the bit position of the flag (as in Figure 1) in the Flags field, "Name" gives the name of the flag used in this document, and "Purpose" gives a brief description of the meaning of that flag.
The flags apply to both ROUTE VIA and ROUTE DST parameters, and when a ROUTE DST parameter is added to a packet because of a ROUTE VIA parameter, the same flags MUST be copied to the ROUTE DST parameter.
This section is to be interpreted according to [RFC5226].
This document updates the IANA Registry for HIP Parameter Types [RFC5201] by assigning new HIP Parameter Type values for the new HIP Parameters: ROUTE VIA and ROUTE DST (defined in Section 4).
This document also defines a new Notify Packet Type [RFC5201], UNKNOWN NEXT HOP, in Section 3.3.
The ROUTE DST and ROUTE
VIA parameters utilize bit flags, for which IANA has created and now maintains a new sub registry entitled "HIP Via Flags" under the "Host Identity Protocol (HIP) Parameters" registry.
Initial values for the registry are given in Table 1; future assignments are to be made through IETF Review or IESG Approval
Assignments consist of the bit position and the name of the flag.
The standard HIP mechanisms (e.g., using signatures, puzzles, and the ENCRYPTED parameter [RFC5201]) provide protection against eavesdropping; replay; message insertion, deletion, and modification; and man in the middle attacks.
Yet, the extensions described in this document allow nodes to route HIP messages via other nodes and hence possibly try to mount Denial of Service (DoS) attacks against them.
The following sections describe possible attacks and means to mitigate them.
Forged Destination and Via Lists
The Destination list is protected by the HIP signature so that the receiver of the message can check that the list was indeed created by the sender of the message and not modified on the path.
Also, the nodes forwarding the message MAY check the signature of the forwarded packets if they have the Host Identity (HI) of the sender (e.g., from an I2 or R1 message [RFC5201]) and drop packets whose signature check fails.
With forwarding nodes checking the signature and allowing messages to be forwarded only from nodes for which there is an active HIP association, it is also possible to reliably identify attacking nodes.
The limited amount of HITs allowed in a Destination list limits the impact of attacks using a forged Destination list, and the attacker also needs to know a set of HIP nodes that are able to route the message hop by hop for the attack to be effective.
A forged Via list results in a similar attack as with the Destination list and with similar limitations.
However, in this attack the Destination list generated from the Via list is validly signed by the responding node.
To limit the effect of this kind of attack, a responding node may further decrease the maximum acceptable number of nodes in the Via lists or allow only certain HITs in the lists.
However, using these mechanisms requires either good knowledge of the overlay network (i.e., maximum realistic amount of hops) or knowing the HITs of all potential nodes forwarding the messages.
A malicious node could craft a destination route list that contains the same HIT more than once and thus create a forwarding loop.
The check described in Section 3.3 should break such loops, but nodes MAY in addition utilize the OVERLAY TTL [HIP BONE] parameter for additional protection against forwarding loops.
