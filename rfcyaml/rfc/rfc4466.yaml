- contents:
  - '                   Collected Extensions to IMAP4 ABNF

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   Over the years, many documents from IMAPEXT and LEMONADE working\n
    \  groups, as well as many individual documents, have added syntactic\n   extensions
    to many base IMAP commands described in RFC 3501.  For\n   ease of reference,
    this document collects most of such ABNF changes\n   in one place.\n   This document
    also suggests a set of standard patterns for adding\n   options and extensions
    to several existing IMAP commands defined in\n   RFC 3501.  The patterns provide
    for compatibility between existing\n   and future extensions.\n   This document
    updates ABNF in RFCs 2088, 2342, 3501, 3502, and 3516.\n   It also includes part
    of the errata to RFC 3501.  This document\n   doesn't specify any semantic changes
    to the listed RFCs.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Purpose of This Document ...................................2\n      1.2.
    Conventions Used in This Document ..........................3\n   2. IMAP ABNF
    Extensions ............................................3\n      2.1. Optional
    Parameters with the SELECT/EXAMINE Commands .......3\n      2.2. Extended CREATE
    Command ....................................4\n      2.3. Extended RENAME Command
    ....................................5\n      2.4. Extensions to FETCH and UID
    FETCH Commands .................6\n      2.5. Extensions to STORE and UID STORE
    Commands .................6\n      2.6. Extensions to SEARCH Command ...............................7\n
    \          2.6.1. Extended SEARCH Command .............................7\n           2.6.2.
    ESEARCH untagged response ...........................8\n      2.7. Extensions
    to APPEND Command ...............................8\n   3. Formal Syntax ...................................................9\n
    \  4. Security Considerations ........................................14\n   5.
    Normative References ...........................................15\n   6. Acknowledgements
    ...............................................15\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Purpose of This Document\n   This document serves several purposes:\n
      \     1.  rationalize and generalize ABNF for some existing IMAP\n          extensions;\n
      \     2.  collect the ABNF in one place in order to minimize cross\n          references
      between documents;\n      3.  define building blocks for future extensions so
      that they can\n          be used together in a compatible way.\n   It is expected
      that a future revision of this document will be\n   incorporated into a revision
      of RFC 3501.\n   This document updates ABNF in RFCs 2088, 2342, 3501, 3502,
      and 3516.\n   It also includes part of the errata to RFC 3501.  This document\n
      \  doesn't specify any semantic changes to the listed RFCs.\n   The ABNF in
      section 6 of RFC 2342 got rewritten to conform to the\n   ABNF syntax as defined
      in RFC 4234 and to reference new non-terminals\n   from RFC 3501.  It was also
      restructured to allow for better\n   readability.  There were no changes \"on
      the wire\".\n   Section 2 extends ABNF for SELECT, EXAMINE, CREATE, RENAME,
      FETCH/UID\n   FETCH, STORE/UID STORE, SEARCH, and APPEND commands in a consistent\n
      \  manner.  Extensions to all the commands but APPEND have the same\n   structure.
      \ Extensibility for the APPEND command was done slightly\n   differently in
      order to preserve backward compatibility with existing\n   extensions.\n   Section
      2 also defines a new ESEARCH response, whose purpose is to\n   define a better
      version of the SEARCH response defined in RFC 3501.\n   Section 3 defines the
      collected ABNF that replaces pieces of ABNF in\n   the aforementioned RFCs.
      \ The collected ABNF got generalized to allow\n   for easier future extensibility.\n"
    title: 1.1.  Purpose of This Document
  - contents:
    - "1.2.  Conventions Used in This Document\n   In examples, \"C:\" and \"S:\"
      indicate lines sent by the client and\n   server, respectively.\n   The key
      words \"MUST\", \"MUST NOT\", \"SHOULD\", \"SHOULD NOT\", and \"MAY\"\n   in
      this document are to be interpreted as defined in \"Key words for\n   use in
      RFCs to Indicate Requirement Levels\" [KEYWORDS].\n"
    title: 1.2.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  IMAP ABNF Extensions\n   This section is not normative.  It provides some
    background on the\n   intended use of different extensions and it gives some guidance
    about\n   how future extensions should extend the described commands.\n"
  - contents:
    - "2.1.  Optional Parameters with the SELECT/EXAMINE Commands\n   This document
      adds the ability to include one or more parameters with\n   the IMAP SELECT
      (section 6.3.1 of [IMAP4]) or EXAMINE (section 6.3.2\n   of [IMAP4]) commands,
      to turn on or off certain standard behaviors,\n   or to add new optional behaviors
      required for a particular extension.\n   There are two possible modes of operation:\n
      \  o  A global state change where a single use of the optional parameter\n      will
      affect the session state from that time on, irrespective of\n      subsequent
      SELECT/EXAMINE commands.\n   o  A per-mailbox state change that will affect
      the session only for\n      the duration of the new selected state.  A subsequent\n
      \     SELECT/EXAMINE without the optional parameter will cancel its\n      effect
      for the newly selected mailbox.\n   Optional parameters to the SELECT or EXAMINE
      commands are added as a\n   parenthesized list of attribute/value pairs, and
      appear after the\n   mailbox name in the standard SELECT or EXAMINE command.
      \ The order of\n   individual parameters is arbitrary.  A parameter value is
      optional\n   and may consist of atoms, strings, or lists in a specific order.
      \ If\n   the parameter value is present, it always appears in parentheses (*).\n
      \  Any parameter not defined by extensions that the server supports must\n   be
      rejected with a BAD response.\n      Example:\n              C: a SELECT INBOX
      (ANNOTATE)\n              S: ...\n              S: a OK SELECT complete\n      In
      the above example, a single parameter is used with the SELECT\n      command.\n
      \     Example:\n              C: a EXAMINE INBOX (ANNOTATE RESPONSES (\"UID
      Responses\")\n                 CONDSTORE)\n              S: ...\n              S:
      a OK EXAMINE complete\n      In the above example, three parameters are used
      with the EXAMINE\n      command.  The second parameter consists of two items:
      an atom\n      \"RESPONSES\" followed by a quoted string.\n      Example:\n
      \             C: a SELECT INBOX (BLURDYBLOOP)\n              S: a BAD Unknown
      parameter in SELECT command\n      In the above example, a parameter not supported
      by the server is\n      used.  This results in the BAD response from the server.\n
      \  (*) - if a parameter has a mandatory value, which can always be\n   represented
      as a number or a sequence-set, the parameter value does\n   not need the enclosing
      ().  See ABNF for more details.\n"
    title: 2.1.  Optional Parameters with the SELECT/EXAMINE Commands
  - contents:
    - "2.2.  Extended CREATE Command\n   Arguments:  mailbox name\n               OPTIONAL
      list of CREATE parameters\n   Responses:  no specific responses for this command\n
      \  Result:     OK - create completed\n               NO - create failure: cannot
      create mailbox with\n                    that name\n               BAD - argument(s)
      invalid\n   This document adds the ability to include one or more parameters
      with\n   the IMAP CREATE command (see section 6.3.3 of [IMAP4]), to turn on
      or\n   off certain standard behaviors, or to add new optional behaviors\n   required
      for a particular extension.  No CREATE parameters are\n   defined in this document.\n
      \  Optional parameters to the CREATE command are added as a\n   parenthesized
      list of attribute/value pairs after the mailbox name.\n   The order of individual
      parameters is arbitrary.  A parameter value\n   is optional and may consist
      of atoms, strings, or lists in a specific\n   order.  If the parameter value
      is present, it always appears in\n   parentheses (*).  Any parameter not defined
      by extensions that the\n   server supports must be rejected with a BAD response.\n
      \  (*) - if a parameter has a mandatory value, which can always be\n   represented
      as a number or a sequence-set, the parameter value does\n   not need the enclosing
      ().  See ABNF for more details.\n"
    title: 2.2.  Extended CREATE Command
  - contents:
    - "2.3.  Extended RENAME Command\n   Arguments:  existing mailbox name\n               new
      mailbox name\n               OPTIONAL list of RENAME parameters\n   Responses:
      \ no specific responses for this command\n   Result:     OK - rename completed\n
      \              NO - rename failure: cannot rename mailbox with\n                    that
      name, cannot rename to mailbox with\n                    that name, etc.\n               BAD
      - argument(s) invalid\n   This document adds the ability to include one or more
      parameters with\n   the IMAP RENAME command (see section 6.3.5 of [IMAP4]),
      to turn on or\n   off certain standard behaviors, or to add new optional behaviors\n
      \  required for a particular extension.  No RENAME parameters are\n   defined
      in this document.\n   Optional parameters to the RENAME command are added as
      a\n   parenthesized list of attribute/value pairs after the new mailbox\n   name.
      \ The order of individual parameters is arbitrary.  A parameter\n   value is
      optional and may consist of atoms, strings, or lists in a\n   specific order.
      \ If the parameter value is present, it always appears\n   in parentheses (*).
      \ Any parameter not defined by extensions that the\n   server supports must
      be rejected with a BAD response.\n   (*) - if a parameter has a mandatory value,
      which can always be\n   represented as a number or a sequence-set, the parameter
      value does\n   not need the enclosing ().  See ABNF for more details.\n"
    title: 2.3.  Extended RENAME Command
  - contents:
    - "2.4.  Extensions to FETCH and UID FETCH Commands\n   Arguments:  sequence set\n
      \              message data item names or macro\n               OPTIONAL fetch
      modifiers\n   Responses:  untagged responses: FETCH\n   Result:     OK - fetch
      completed\n               NO - fetch error: cannot fetch that data\n               BAD
      - command unknown or arguments invalid\n   This document extends the syntax
      of the FETCH and UID FETCH commands\n   (see section 6.4.5 of [IMAP4]) to include
      optional FETCH modifiers.\n   No fetch modifiers are defined in this document.\n
      \  The order of individual modifiers is arbitrary.  Each modifier is an\n   attribute/value
      pair.  A modifier value is optional and may consist\n   of atoms and/or strings
      and/or lists in a specific order.  If the\n   modifier value is present, it
      always appears in parentheses (*).  Any\n   modifiers not defined by extensions
      that the server supports must be\n   rejected with a BAD response.\n   (*) -
      if a modifier has a mandatory value, which can always be\n   represented as
      a number or a sequence-set, the modifier value does\n   not need the enclosing
      ().  See ABNF for more details.\n"
    title: 2.4.  Extensions to FETCH and UID FETCH Commands
  - contents:
    - "2.5.  Extensions to STORE and UID STORE Commands\n   Arguments:  message set\n
      \              OPTIONAL store modifiers\n               message data item name\n
      \              value for message data item\n   Responses:  untagged responses:
      FETCH\n   Result:     OK - store completed\n               NO - store error:
      cannot store that data\n               BAD - command unknown or arguments invalid\n
      \  This document extends the syntax of the STORE and UID STORE commands\n   (see
      section 6.4.6 of [IMAP4]) to include optional STORE modifiers.\n   No store
      modifiers are defined in this document.\n   The order of individual modifiers
      is arbitrary.  Each modifier is an\n   attribute/value pair.  A modifier value
      is optional and may consist\n   of atoms and/or strings and/or lists in a specific
      order.  If the\n   modifier value is present, it always appears in parentheses
      (*).  Any\n   modifiers not defined by extensions that the server supports must
      be\n   rejected with a BAD response.\n   (*) - if a modifier has a mandatory
      value, which can always be\n   represented as a number or a sequence-set, the
      modifier value does\n   not need the enclosing ().  See ABNF for more details.\n"
    title: 2.5.  Extensions to STORE and UID STORE Commands
  - contents:
    - '2.6.  Extensions to SEARCH Command

      '
    - contents:
      - "2.6.1.  Extended SEARCH Command\n   Arguments:  OPTIONAL result specifier\n
        \              OPTIONAL [CHARSET] specification\n               searching
        criteria (one or more)\n   Responses:  REQUIRED untagged response: SEARCH
        (*)\n   Result:     OK - search completed\n               NO - search error:
        cannot search that [CHARSET] or\n                    criteria\n               BAD
        - command unknown or arguments invalid\n   This section updates definition
        of the SEARCH command described in\n   section 6.4.4 of [IMAP4].\n   The SEARCH
        command is extended to allow for result options.  This\n   document does not
        define any result options.\n   The order of individual options is arbitrary.
        \ Individual options may\n   contain parameters enclosed in parentheses (**).
        \ If an option has\n   parameters, they consist of atoms and/or strings and/or
        lists in a\n   specific order.  Any options not defined by extensions that
        the\n   server supports must be rejected with a BAD response.\n   (*) - An
        extension to the SEARCH command may require another untagged\n   response,
        or no untagged response to be returned.  Section 2.6.2\n   defines a new ESEARCH
        untagged response that replaces the SEARCH\n   untagged response.  Note that
        for a given extended SEARCH command the\n   SEARCH and ESEARCH responses SHOULD
        be mutually exclusive, i.e., only\n   one of them should be returned.\n   (**)
        - if an option has a mandatory parameter, which can always be\n   represented
        as a number or a sequence-set, the option parameter does\n   not need the
        enclosing ().  See ABNF for more details.\n"
      title: 2.6.1.  Extended SEARCH Command
    - contents:
      - "2.6.2.  ESEARCH untagged response\n   Contents:   one or more search-return-data
        pairs\n   The ESEARCH response SHOULD be sent as a result of an extended SEARCH\n
        \  or UID SEARCH command specified in section 2.6.1.\n   The ESEARCH response
        starts with an optional search correlator.  If\n   it is missing, then the
        response was not caused by a particular IMAP\n   command, whereas if it is
        present, it contains the tag of the command\n   that caused the response to
        be returned.\n   The search correlator is followed by an optional UID indicator.
        \ If\n   this indicator is present, all data in the ESEARCH response refers
        to\n   UIDs, otherwise all returned data refers to message numbers.\n   The
        rest of the ESEARCH response contains one or more search data\n   pairs.  Each
        pair starts with unique return item name, followed by a\n   space and the
        corresponding data.  Search data pairs may be returned\n   in any order.  Unless
        specified otherwise by an extension, any return\n   item name SHOULD appear
        only once in an ESEARCH response.\n   Example:    S: * ESEARCH UID COUNT 5
        ALL 4:19,21,28\n   Example:    S: * ESEARCH (TAG \"a567\") UID COUNT 5 ALL
        4:19,21,28\n   Example:    S: * ESEARCH COUNT 5 ALL 1:17,21\n"
      title: 2.6.2.  ESEARCH untagged response
    title: 2.6.  Extensions to SEARCH Command
  - contents:
    - "2.7.  Extensions to APPEND Command\n   The IMAP BINARY extension [BINARY] extends
      the APPEND command to\n   allow a client to append data containing NULs by using
      the <literal8>\n   syntax.  The ABNF was rewritten to allow for easier extensibility
      by\n   IMAP extensions.  This document hasn't specified any semantical\n   changes
      to the [BINARY] extension.\n   In addition, the non-terminal \"literal8\" defined
      in [BINARY] got\n   extended to allow for non-synchronizing literals if both
      [BINARY] and\n   [LITERAL+] extensions are supported by the server.\n   The
      IMAP MULTIAPPEND extension [MULTIAPPEND] extends the APPEND\n   command to allow
      a client to append multiple messages atomically.\n   This document defines a
      common syntax for the APPEND command that\n   takes into consideration syntactic
      extensions defined by both\n   [BINARY] and [MULTIAPPEND] extensions.\n"
    title: 2.7.  Extensions to APPEND Command
  title: 2.  IMAP ABNF Extensions
- contents:
  - "3.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n
    \  Form (ABNF) notation as specified in [ABNF].\n   Non-terminals referenced but
    not defined below are as defined by\n   [IMAP4].\n   Except as noted otherwise,
    all alphabetic characters are case-\n   insensitive.  The use of uppercase or
    lowercase characters to define\n   token strings is for editorial clarity only.
    \ Implementations MUST\n   accept these strings in a case-insensitive fashion.\n
    \  append          = \"APPEND\" SP mailbox 1*append-message\n                     ;;
    only a single append-message may appear\n                     ;; if MULTIAPPEND
    [MULTIAPPEND] capability\n                     ;; is not present\n   append-message
    \ = append-opts SP append-data\n   append-ext      = append-ext-name SP append-ext-value\n
    \                    ;; This non-terminal define extensions to\n                     ;;
    to message metadata.\n   append-ext-name = tagged-ext-label\n   append-ext-value=
    tagged-ext-val\n                     ;; This non-terminal shows recommended syntax\n
    \                    ;; for future extensions.\n   append-data     = literal /
    literal8 / append-data-ext\n   append-data-ext = tagged-ext\n                     ;;
    This non-terminal shows recommended syntax\n                     ;; for future
    extensions,\n                     ;; i.e., a mandatory label followed\n                     ;;
    by parameters.\n   append-opts     = [SP flag-list] [SP date-time] *(SP append-ext)\n
    \                    ;; message metadata\n   charset         = atom / quoted\n
    \                    ;; Exact syntax is defined in [CHARSET].\n   create          =
    \"CREATE\" SP mailbox\n                     [create-params]\n                     ;;
    Use of INBOX gives a NO error.\n   create-params   = SP \"(\" create-param *(
    SP create-param) \")\"\n   create-param-name = tagged-ext-label\n   create-param
    \     = create-param-name [SP create-param-value]\n   create-param-value= tagged-ext-val\n
    \                    ;; This non-terminal shows recommended syntax\n                     ;;
    for future extensions.\n   esearch-response  = \"ESEARCH\" [search-correlator]
    [SP \"UID\"]\n                        *(SP search-return-data)\n                      ;;
    Note that SEARCH and ESEARCH responses\n                      ;; SHOULD be mutually
    exclusive,\n                      ;; i.e., only one of the response types\n                      ;;
    should be\n                      ;; returned as a result of a command.\n   examine
    \        = \"EXAMINE\" SP mailbox [select-params]\n                     ;; modifies
    the original IMAP EXAMINE command\n                     ;; to accept optional
    parameters\n   fetch           = \"FETCH\" SP sequence-set SP (\"ALL\" / \"FULL\"
    /\n                     \"FAST\" / fetch-att /\n                     \"(\" fetch-att
    *(SP fetch-att) \")\")\n                     [fetch-modifiers]\n                     ;;
    modifies the original IMAP4 FETCH command to\n                     ;; accept optional
    modifiers\n   fetch-modifiers = SP \"(\" fetch-modifier *(SP fetch-modifier) \")\"\n
    \  fetch-modifier  = fetch-modifier-name [ SP fetch-modif-params ]\n   fetch-modif-params
    \ = tagged-ext-val\n                     ;; This non-terminal shows recommended
    syntax\n                     ;; for future extensions.\n   fetch-modifier-name
    = tagged-ext-label\n   literal8        = \"~{\" number [\"+\"] \"}\" CRLF *OCTET\n
    \                     ;; A string that might contain NULs.\n                      ;;
    <number> represents the number of OCTETs\n                      ;; in the response
    string.\n                      ;; The \"+\" is only allowed when both LITERAL+
    and\n                      ;; BINARY extensions are supported by the server.\n
    \  mailbox-data      =/ Namespace-Response /\n                        esearch-response\n
    \  Namespace         = nil / \"(\" 1*Namespace-Descr \")\"\n   Namespace-Command
    = \"NAMESPACE\"\n   Namespace-Descr   = \"(\" string SP\n                          (DQUOTE
    QUOTED-CHAR DQUOTE / nil)\n                           *(Namespace-Response-Extension)
    \")\"\n   Namespace-Response-Extension = SP string SP\n                     \"(\"
    string *(SP string) \")\"\n   Namespace-Response = \"NAMESPACE\" SP Namespace\n
    \                       SP Namespace SP Namespace\n         ;; This response is
    currently only allowed\n         ;; if the IMAP server supports [NAMESPACE].\n
    \        ;; The first Namespace is the Personal Namespace(s)\n         ;; The
    second Namespace is the Other Users' Namespace(s)\n         ;; The third Namespace
    is the Shared Namespace(s)\n   rename          = \"RENAME\" SP mailbox SP mailbox\n
    \                    [rename-params]\n                     ;; Use of INBOX as
    a destination gives\n                     ;; a NO error, unless rename-params\n
    \                    ;; is not empty.\n   rename-params     = SP \"(\" rename-param
    *( SP rename-param) \")\"\n   rename-param      = rename-param-name [SP rename-param-value]\n
    \  rename-param-name = tagged-ext-label\n   rename-param-value= tagged-ext-val\n
    \                    ;; This non-terminal shows recommended syntax\n                     ;;
    for future extensions.\n   response-data   = \"*\" SP response-payload CRLF\n
    \  response-payload= resp-cond-state / resp-cond-bye /\n                     mailbox-data
    / message-data / capability-data\n   search          = \"SEARCH\" [search-return-opts]\n
    \                    SP search-program\n   search-correlator  = SP \"(\" \"TAG\"
    SP tag-string \")\"\n   search-program     = [\"CHARSET\" SP charset SP]\n                        search-key
    *(SP search-key)\n                        ;; CHARSET argument to SEARCH MUST be\n
    \                       ;; registered with IANA.\n   search-return-data = search-modifier-name
    SP search-return-value\n                        ;; Note that not every SEARCH
    return option\n                        ;; is required to have the corresponding\n
    \                       ;; ESEARCH return data.\n   search-return-opts = SP \"RETURN\"
    SP \"(\" [search-return-opt\n                        *(SP search-return-opt)]
    \")\"\n   search-return-opt = search-modifier-name [SP search-mod-params]\n   search-return-value
    = tagged-ext-val\n                        ;; Data for the returned search option.\n
    \                       ;; A single \"nz-number\"/\"number\" value\n                        ;;
    can be returned as an atom (i.e., without\n                        ;; quoting).
    \ A sequence-set can be returned\n                        ;; as an atom as well.\n
    \  search-modifier-name = tagged-ext-label\n   search-mod-params = tagged-ext-val\n
    \                    ;; This non-terminal shows recommended syntax\n                     ;;
    for future extensions.\n   select          = \"SELECT\" SP mailbox [select-params]\n
    \                    ;; modifies the original IMAP SELECT command to\n                     ;;
    accept optional parameters\n   select-params   = SP \"(\" select-param *(SP select-param)
    \")\"\n   select-param    = select-param-name [SP select-param-value]\n                     ;;
    a parameter to SELECT may contain one or\n                     ;; more atoms and/or
    strings and/or lists.\n   select-param-name= tagged-ext-label\n   select-param-value=
    tagged-ext-val\n                     ;; This non-terminal shows recommended syntax\n
    \                    ;; for future extensions.\n   status-att-list = status-att-val
    *(SP status-att-val)\n                     ;; Redefines status-att-list from RFC
    3501.\n                     ;; status-att-val is defined in RFC 3501 errata\n
    \  status-att-val  = (\"MESSAGES\" SP number) /\n                     (\"RECENT\"
    SP number) /\n                     (\"UIDNEXT\" SP nz-number) /\n                     (\"UIDVALIDITY\"
    SP nz-number) /\n                     (\"UNSEEN\" SP number)\n                     ;;
    Extensions to the STATUS responses\n                     ;; should extend this
    production.\n                     ;; Extensions should use the generic\n                     ;;
    syntax defined by tagged-ext.\n   store           = \"STORE\" SP sequence-set
    [store-modifiers]\n                     SP store-att-flags\n                     ;;
    extend [IMAP4] STORE command syntax\n                     ;; to allow for optional
    store-modifiers\n   store-modifiers =  SP \"(\" store-modifier *(SP store-modifier)\n
    \                      \")\"\n   store-modifier  = store-modifier-name [SP store-modif-params]\n
    \  store-modif-params = tagged-ext-val\n                     ;; This non-terminal
    shows recommended syntax\n                     ;; for future extensions.\n   store-modifier-name
    = tagged-ext-label\n   tag-string         = string\n                        ;;
    tag of the command that caused\n                        ;; the ESEARCH response,
    sent as\n                        ;; a string.\n   tagged-ext          = tagged-ext-label
    SP tagged-ext-val\n                          ;; recommended overarching syntax
    for\n                          ;; extensions\n   tagged-ext-label    = tagged-label-fchar
    *tagged-label-char\n                         ;; Is a valid RFC 3501 \"atom\".\n
    \  tagged-label-fchar  = ALPHA / \"-\" / \"_\" / \".\"\n   tagged-label-char   =
    tagged-label-fchar / DIGIT / \":\"\n   tagged-ext-comp     = astring /\n                         tagged-ext-comp
    *(SP tagged-ext-comp) /\n                         \"(\" tagged-ext-comp \")\"\n
    \                         ;; Extensions that follow this general\n                          ;;
    syntax should use nstring instead of\n                          ;; astring when
    appropriate in the context\n                          ;; of the extension.\n                          ;;
    Note that a message set or a \"number\"\n                          ;; can always
    be represented as an \"atom\".\n                          ;; An URL should be
    represented as\n                          ;; a \"quoted\" string.\n   tagged-ext-simple
    \  = sequence-set / number\n   tagged-ext-val      = tagged-ext-simple /\n                         \"(\"
    [tagged-ext-comp] \")\"\n"
  title: 3.  Formal Syntax
- contents:
  - "4.  Security Considerations\n   This document updates ABNF in RFCs 2088, 2342,
    3501, 3502, and 3516.\n   The updated documents must be consulted for security
    considerations\n   for the extensions that they define.\n   As a protocol gets
    more complex, parser bugs become more common\n   including buffer overflow, denial
    of service, and other common\n   security coding errors.  To the extent that this
    document makes the\n   parser more complex, it makes this situation worse.  To
    the extent\n   that this document makes the parser more consistent and thus simpler,\n
    \  the situation is improved.  The impact will depend on how many\n   deployed
    IMAP extensions are consistent with this document.\n   Implementers are encouraged
    to take care of these issues when\n   extending existing implementations.  Future
    IMAP extensions should\n   strive for consistency and simplicity to the greatest
    extent\n   possible.\n   Extensions to IMAP commands that are permitted in NOT
    AUTHENTICATED\n   state are more sensitive to these security issues due to the
    larger\n   possible attacker community prior to authentication, and the fact\n
    \  that some IMAP servers run with elevated privileges in that state.\n   This
    document does not extend any commands permitted in NOT\n   AUTHENTICATED state.
    \ Future IMAP extensions to commands permitted in\n   NOT AUTHENTICATED state
    should favor simplicity over consistency or\n   extensibility.\n"
  title: 4.  Security Considerations
- contents:
  - "5.  Normative References\n   [KEYWORDS]    Bradner, S., \"Key words for use in
    RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119, March
    1997.\n   [IMAP4]       Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL -\n                 VERSION
    4rev1\", RFC 3501, March 2003.\n   [ABNF]        Crocker, D., Ed., and P. Overell,
    \"Augmented BNF for\n                 Syntax Specifications: ABNF\", RFC 4234,
    October 2005.\n   [CHARSET]     Freed, N. and J. Postel, \"IANA Charset Registration\n
    \                Procedures\", BCP 19, RFC 2978, October 2000.\n   [MULTIAPPEND]
    Crispin, M., \"Internet Message Access Protocol (IMAP) -\n                 MULTIAPPEND
    Extension\", RFC 3502, March 2003.\n   [NAMESPACE]   Gahrns, M. and C. Newman,
    \"IMAP4 Namespace\", RFC 2342,\n                 May 1998.\n   [LITERAL+]    Myers,
    J., \"IMAP4 non-synchronizing literals\", RFC\n                 2088, January
    1997.\n   [BINARY]      Nerenberg, L., \"IMAP4 Binary Content Extension\", RFC\n
    \                3516, April 2003.\n"
  title: 5.  Normative References
- contents:
  - "6.  Acknowledgements\n   This documents is based on ideas proposed by Pete Resnick,
    Mark\n   Crispin, Ken Murchison, Philip Guenther, Randall Gellens, and Lyndon\n
    \  Nerenberg.\n   However, all errors and omissions must be attributed to the
    authors\n   of the document.\n   Thanks to Philip Guenther, Dave Cridland, Mark
    Crispin, Chris Newman,\n   Elwyn Davies, and Barry Leiba for comments and corrections.\n
    \  literal8 syntax was taken from RFC 3516.\n"
  title: 6.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Alexey Melnikov\n   Isode Limited\n   5 Castle Business
    Village\n   36 Station Road\n   Hampton, Middlesex, TW12 2BX\n   UK\n   EMail:
    Alexey.Melnikov@isode.com\n   Cyrus Daboo\n   EMail: cyrus@daboo.name\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
