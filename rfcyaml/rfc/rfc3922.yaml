- contents:
  - "    Mapping the Extensible Messaging and Presence Protocol (XMPP) to\n              Common
    Presence and Instant Messaging (CPIM)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo describes a mapping between the Extensible Messaging and\n
    \  Presence Protocol (XMPP) and the Common Presence and Instant\n   Messaging
    (CPIM) specifications.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Approach . . . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  Address Mapping  . . . . . . . . . . . . . . . . . . . . .
    . .  4\n   4.  Syntax Mapping of Instant Messages . . . . . . . . . . . . . .
    \ 5\n   5.  Syntax Mapping of Presence Information . . . . . . . . . . . . 13\n
    \  6.  XMPP-CPIM Gateway as Presence Service  . . . . . . . . . . . . 26\n   7.
    \ Security Considerations  . . . . . . . . . . . . . . . . . . . 31\n   8.  References
    . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n   Author's Address .
    . . . . . . . . . . . . . . . . . . . . . . . . 33\n   Full Copyright Statement
    . . . . . . . . . . . . . . . . . . . . . 34\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Overview\n   The Instant Messaging and Presence (IMPP) Working Group
      has defined\n   an abstract framework for interoperability among instant messaging\n
      \  (IM) and presence systems that are compliant with [IMP-REQS].  This\n   framework
      is commonly called Common Presence and Instant Messaging or\n   \"CPIM\".  The
      CPIM family of specifications include a Common Profile\n   for Instant Messaging
      [CPIM] (also called CPIM), a Common Profile for\n   Presence [CPP], a CPIM Message
      Format [MSGFMT], and a Common Presence\n   Information Data Format [PIDF].  (Note:
      To prevent confusion, Common\n   Presence and Instant Messaging is referred
      to herein collectively as\n   \"the CPIM specifications\", whereas the Common
      Profile for Instant\n   Messaging is referred to as \"CPIM\".)\n   This memo
      describes how the Extensible Messaging and Presence\n   Protocol ([XMPP-CORE],
      [XMPP-IM]) maps to the abstract model\n   contained in the CPIM specifications,
      mainly for the purpose of\n   establishing gateways between XMPP services and
      non-XMPP services\n   that conform to [IMP-REQS].  Such a gateway, referred
      to herein as an\n   \"XMPP-CPIM gateway\", may be established to interpret the
      protocols of\n   one service and translate them into the protocols of the other\n
      \  service.  We can visualize this relationship as follows:\n     +-------------+
      \       +-------------+        +------------+\n     |             |        |
      \            |        |            |\n     |    XMPP     |        |  XMPP-CPIM
      \ |        |  Non-XMPP  |\n     |   Service   | <----> |   Gateway   | <---->
      |  Service   |\n     |             |        |             |        |            |\n
      \    +-------------+        +-------------+        +------------+\n   This memo
      defines a mapping for use by a gateway that translates\n   between XMPP and
      a non-XMPP protocol via the CPIM specifications.\n   Such a gateway is not an
      intermediate hop on a network of non-XMPP\n   servers (whose native formats
      may or may not be defined by the CPIM\n   specifications), but a dedicated translator
      between XMPP and a\n   non-XMPP protocol, where the CPIM specifications define
      the common\n   formats into which the protocols are translated for purposes
      of\n   interworking.\n   The mapping defined herein applies to instant messages
      and presence\n   information that are not encrypted or signed for end-to-end
      security.\n   For information about secure communications to or from an XMPP\n
      \  service through an XMPP-CPIM gateway, refer to [XMPP-E2E].\n"
    title: 1.1.  Overview
  - contents:
    - "1.2.  Terminology\n   This memo inherits vocabulary defined in [IMP-MODEL].
      \ Terms such as\n   CLOSED, INSTANT INBOX, INSTANT MESSAGE, OPEN , PRESENCE
      SERVICE,\n   PRESENTITY, SUBSCRIPTION, and WATCHER are used in the same meaning
      as\n   defined therein.\n   This memo also inherits vocabulary defined in [XMPP-CORE].
      \ Terms\n   such as ENTITY, NODE IDENTIFIER, DOMAIN IDENTIFIER, RESOURCE\n   IDENTIFIER,
      MESSAGE STANZA, and PRESENCE STANZA are used in the same\n   meaning as defined
      therein.\n"
    title: 1.2.  Terminology
  - contents:
    - "1.3.  Conventions Used in this Document\n   The capitalized key words \"MUST\",
      \"MUST NOT\", \"REQUIRED\", \"SHALL\",\n   \"SHALL NOT\", \"SHOULD\", \"SHOULD
      NOT\", \"RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to
      be interpreted as described in\n   [TERMS].\n"
    title: 1.3.  Conventions Used in this Document
  title: 1.  Introduction
- contents:
  - "2.  Approach\n   XMPP and CPIM are distinctly foreign technologies.  Therefore,
    care\n   must be taken in mapping between XMPP and the abstract syntax defined\n
    \  by the CPIM specifications.\n   At root, XMPP is a data transport protocol
    for streaming XML elements\n   (called \"stanzas\") between any two endpoints
    on the network; message\n   and presence stanzas are two of the core data elements
    defined in\n   XMPP and are often used to exchange instant messages and presence\n
    \  information between IM users (although the inherent extensibility of\n   XML
    enables applications to use the general semantics of these stanza\n   types for
    other purposes).  XMPP is not based on [MIME]; instead,\n   [XMPP-CORE] defines
    XML schemas for both message and presence stanzas\n   (for example, the <body/>
    child of a message stanza contains XML\n   character data that is usually intended
    to be read by a human user).\n   The CPIM specifications provide common formats
    for instant messaging\n   and presence through two [MIME] content-types: \"Message/CPIM\"
    for\n   messages ([MSGFMT]) and \"application/pidf+xml\" for presence ([PIDF]).\n
    \  The syntax of \"Message/CPIM\" objects is similar to but stricter than\n   that
    defined in [RFC2822], and provides the ability to include\n   arbitrary MIME media
    types [MIMETYPES].  By contrast, each\n   \"application/pidf+xml\" object is a
    complete XML document whose\n   structure is defined by an XML schema.\n   The
    approach taken herein is to specify mappings from XMPP elements\n   and attributes
    to the headers and MIME formats defined by [MSGFMT]\n   and [PIDF] in order to
    comply with the semantics defined by [CPIM]\n   and [CPP].  Naturally, mappings
    in the opposite direction are\n   provided as well.\n"
  title: 2.  Approach
- contents:
  - '3.  Address Mapping

    '
  - contents:
    - "3.1.  Overview\n   Address mapping may be required since the address formats
      used to\n   identify XMPP entities (specified in [XMPP-CORE]) are different
      from\n   those used to identify instant inboxes (the im: URI scheme specified\n
      \  in [CPIM]) and presentities (the pres: URI scheme specified in\n   [CPP]).
      \ In particular, different characters are allowed in im: and\n   pres: URIs
      than are allowed in XMPP addresses:\n   o  The following [US-ASCII] characters
      are allowed in im:/pres: URIs\n      but not in XMPP addresses: #26; (&), #27;
      ('), and #2f; (/).\n   o  Many non-US-ASCII (specifically, UTF-8) characters
      are allowed in\n      XMPP addresses but not allowed in im:/pres: URIs, since
      XMPP\n      allows internationalized local-part addresses.\n   Note: In this
      document we discuss characters allowed in local-part\n   addresses only (i.e.,
      we have ruled the mapping of domain names as\n   out of scope for the initial
      version of this document, since it is a\n   matter for the Domain Name System
      and the translation of fully\n   internationalized domain names).\n"
    title: 3.1.  Overview
  - contents:
    - "3.2.  XMPP to CPIM\n   The following is a high-level algorithm for mapping
      an XMPP address\n   to an im: or pres: URI:\n   1.  Split XMPP address into
      node identifier (local-part; mapping\n       described in remaining steps),
      domain identifier (hostname;\n       mapping is out of scope), and resource
      identifier (specifier for\n       particular device or connection; discard this
      for cross-system\n       interoperability)\n   2.  Apply Nodeprep profile of
      [STRINGPREP] (as specified in\n       [XMPP-CORE]) for canonicalization (OPTIONAL)\n
      \  3.  Translate #26; to &, #27; to ', and #2f; to / respectively\n   4.  For
      each byte, if the byte is not in the set A-Za-z0-9!$*.?_~+=\n       then change
      to %hexhex as described in Section 2.2.5 of\n       [URL-GUIDE]\n   5.  Combine
      resulting local-part with mapped hostname to form\n       local@domain address\n
      \  6.  Prepend with 'im:' scheme (for XMPP <message/> stanzas) or\n       'pres:'
      scheme (for XMPP <presence/> stanzas)\n"
    title: 3.2.  XMPP to CPIM
  - contents:
    - "3.3.  CPIM to XMPP\n   The following is a high-level algorithm for mapping
      an im: or pres:\n   URI to an XMPP address:\n   1.  Remove URI scheme\n   2.
      \ Split at the first '@' character into local-part and hostname\n       (mapping
      the latter is out of scope)\n   3.  Translate %hexhex to equivalent octets as
      described in Section\n       2.2.5 of [URL-GUIDE]\n   4.  Treat result as a
      UTF-8 string\n   5.  Translate & to #26;, ' to #27;, and / to #2f respectively\n
      \  6.  Apply Nodeprep profile of [STRINGPREP] (as specified in\n       [XMPP-CORE])
      for canonicalization (OPTIONAL)\n   7.  Recombine local-part with mapped hostname
      to form local@domain\n       address\n"
    title: 3.3.  CPIM to XMPP
  title: 3.  Address Mapping
- contents:
  - "4.  Syntax Mapping of Instant Messages\n   This section describes how a gateway
    SHOULD map instant messages\n   between an XMPP service and a non-XMPP service
    using a \"Message/CPIM\"\n   object as the bearer of encapsulated text content
    in order to comply\n   with the instant messaging semantics defined by [CPIM].\n"
  - contents:
    - "4.1.  Message Syntax Mapping from XMPP to CPIM Specifications\n   This section
      defines the mapping of syntax primitives from XMPP\n   message stanzas to \"Message/CPIM\"
      objects with encapsulated text\n   content.\n   Note: As specified in [MIME],
      the default Content-type of a MIME\n   object is \"Content-type: text/plain;
      charset=us-ascii\".  Because XMPP\n   uses the [UTF-8] character encoding exclusively,
      the encapsulated\n   MIME object generated by an XMPP-CPIM gateway MUST set
      the\n   \"Content-type\" MUST be set to \"text/plain\" and the charset MUST
      be\n   set to \"utf-8\".\n"
    - contents:
      - "4.1.1.  From Address\n   The 'from' attribute of an XMPP message stanza maps
        to the 'From'\n   header of a \"Message/CPIM\" object.  In XMPP, the sender's
        server\n   stamps or validates the \"from\" address and sets its value to
        the full\n   <user@host/resource> negotiated between client and server during\n
        \  authentication and resource binding as defined in [XMPP-CORE].  Thus\n
        \  an XMPP-CPIM gateway will receive from the sender's XMPP server a\n   message
        stanza containing a \"from\" address of the form\n   <user@host/resource>.
        \ To map the 'from' attribute of an XMPP message\n   stanza to the 'From'
        header of a \"Message/CPIM\" object, the gateway\n   MUST remove the resource
        identifier, MUST append the \"im:\"  Instant\n   Messaging URI scheme to the
        front of the address, and MAY include a\n   CPIM \"Formal-name\" for the sender
        (if known).\n   Example: From Address Mapping\n   XMPP 'from' attribute\n
        \    <message from='juliet@example.com/balcony'>\n       ...\n     </message>\n
        \  CPIM 'From' header\n     From: Juliet Capulet <im:juliet@example.com>\n"
      title: 4.1.1.  From Address
    - contents:
      - "4.1.2.  To Address\n   The 'to' attribute of an XMPP message stanza maps
        to the 'To' header\n   of a \"Message/CPIM\" object.  In XMPP, the sender
        SHOULD include a\n   'to' attribute on a message stanza, and MUST include
        it if the\n   message is intended for delivery to another user.  Thus an XMPP-CPIM\n
        \  gateway will receive from the sender's XMPP server a message stanza\n   containing
        a \"to\" address of the form <user@host> or\n   <user@host/resource>.  To
        map the 'to' attribute of an XMPP message\n   stanza to the 'To' header of
        a \"Message/CPIM\" object, the gateway\n   MUST remove the resource identifier
        (if included), MUST append the\n   \"im:\" Instant Messaging URI scheme to
        the front of the address, and\n   MAY include a CPIM \"Formal-name\" for the
        recipient (if known).\n   Example: To Address Mapping\n   XMPP 'to' attribute\n
        \    <message to='romeo@example.net/orchard'>\n       ...\n     </message>\n
        \  CPIM 'To' header\n     To: Romeo Montague <im:romeo@example.net>\n"
      title: 4.1.2.  To Address
    - contents:
      - "4.1.3.  Stanza ID\n   An XMPP message stanza MAY possess an 'id' attribute,
        which is used\n   by the sending application for the purpose of tracking stanzas
        and is\n   not a globally-unique identifier such as is defined by the MIME\n
        \  Content-ID header.  Because the XMPP 'id' attribute does not have the\n
        \  same meaning as the MIME Content-ID header, it SHOULD NOT be mapped\n   to
        that header; however, if the 'id' is known to be unique (e.g., if\n   it is
        generated to be unique by the XMPP server and that fact is\n   known by the
        XMPP-CPIM gateway), then it SHOULD be so mapped.\n"
      title: 4.1.3.  Stanza ID
    - contents:
      - "4.1.4.  Message Type\n   An XMPP message stanza MAY possess a 'type' attribute,
        which is used\n   by the sending application to capture the conversational
        context of\n   the message.  There is no mapping of an XMPP 'type' attribute
        to a\n   \"Message/CPIM\" header, common MIME features, or encapsulated text\n
        \  content.  Therefore if an XMPP stanza received by an XMPP-CPIM\n   gateway
        possesses a 'type' attribute, the gateway SHOULD ignore the\n   value provided.\n"
      title: 4.1.4.  Message Type
    - contents:
      - "4.1.5.  Message Thread\n   An XMPP message stanza MAY contain a <thread/>
        child element to\n   specify the conversation thread in which the message
        is situated.\n   There is no mapping of an XMPP <thread/> element to a \"Message/CPIM\"\n
        \  header, common MIME features, or encapsulated text content. Therefore\n
        \  if an XMPP message stanza received by an XMPP-CPIM gateway contains a\n
        \  <thread/> child element, the gateway SHOULD ignore the value\n   provided.\n"
      title: 4.1.5.  Message Thread
    - contents:
      - "4.1.6.  Message Subject\n   An XMPP message stanza MAY include a <subject/>
        child element.  If\n   included, it maps to the 'Subject' header of a \"Message/CPIM\"
        object.\n   To map the XMPP <subject/> element to the 'Subject' header of
        a\n   \"Message/CPIM\" object, the gateway SHOULD simply map the XML\n   character
        data of the XMPP <subject/> element to the value of the\n   'Subject' header.
        \ The <subject/> element MAY include an 'xml:lang'\n   attribute specifying
        the language in which the subject is written. If\n   an 'xml:lang' attribute
        is provided, it MUST be mapped by including\n   ';lang=tag' after the header
        name and colon, where 'tag' is the value\n   of the 'xml:lang' attribute.\n
        \  Example: Subject Mapping\n   XMPP <subject/> element\n     <subject>Hi!</subject>\n
        \    <subject xml:lang='cz'>Ahoj!</subject>\n   CPIM 'Subject' header\n     Subject:
        Hi!\n     Subject:;lang=cz Ahoj!\n"
      title: 4.1.6.  Message Subject
    - contents:
      - "4.1.7.  Message Body\n   The <body/> child element of an XMPP message stanza
        is used to\n   provide the primary meaning of the message.  The XML character
        data\n   of the XMPP <body/> element maps to the encapsulated text message\n
        \  content.\n   Example: Message Body\n   XMPP message <body/>\n     <message>\n
        \      <body>Wherefore art thou, Romeo?</body>\n     </message>\n   Encapsulated
        MIME text content\n     Content-type: text/plain; charset=utf-8\n     Content-ID:
        <123456789@example.net>\n     Wherefore art thou, Romeo?\n"
      title: 4.1.7.  Message Body
    - contents:
      - "4.1.8.  Message Extensions\n   As defined in [XMPP-CORE], an XMPP message
        stanza may contain\n   \"extended\" content in any namespace in order to supplement
        or extend\n   the semantics of the core message stanza.  With the exception
        of\n   extended information qualified by the\n   'urn:ietf:params:xml:ns:xmpp-e2e'
        namespace as defined in [XMPP-E2E],\n   an XMPP-CPIM gateway SHOULD ignore
        such information and not pass it\n   through the gateway to the intended recipient.
        \ No mapping for such\n   information is defined.\n"
      title: 4.1.8.  Message Extensions
    - contents:
      - "4.1.9.  Gateway-Generated CPIM Syntax\n   CPIM specifies the existence of
        \"Message/CPIM\" headers in addition to\n   those described above, but there
        is no exact analogue for those\n   headers in the core XMPP specifications.
        \ These include:\n   o  cc -- specifies the address of an entity that is to
        receive a\n      \"courtesy copy\" of the message (i.e., a non-primary addressee)\n
        \  o  DateTime -- specifies the datetime at which the message was sent\n   o
        \ NS -- specifies the namespace of a feature extension\n   o  Require -- specifies
        mandatory-to-recognize features\n   An XMPP-CPIM gateway MAY independently
        generate such headers based on\n   its own information (e.g., the datetime
        at which it received a\n   message stanza from an XMPP entity) or based on
        data encoded in\n   non-core XMPP extensions, but rules for doing so are out
        of scope for\n   this memo.\n"
      title: 4.1.9.  Gateway-Generated CPIM Syntax
    title: 4.1.  Message Syntax Mapping from XMPP to CPIM Specifications
  - contents:
    - "4.2.  Message Syntax Mapping from CPIM Specifications to XMPP\n   This section
      defines the mapping of syntax primitives from\n   \"Message/CPIM\" objects with
      encapsualted text content to XMPP message\n   stanzas.\n"
    - contents:
      - "4.2.1.  From Address\n   The 'From' header of a \"Message/CPIM\" object maps
        to the 'from'\n   attribute of an XMPP message stanza.  To map the CPIM 'From'
        header\n   to the XMPP 'from' attribute, the gateway MUST remove the \"im:\"\n
        \  Instant Messaging URI scheme from the front of the address and MUST\n   remove
        the CPIM \"Formal-name\" (if provided).\n   Example: From Address Mapping\n
        \  CPIM 'From' header\n     From: Romeo Montague <im:romeo@example.net>\n
        \  XMPP 'from' attribute\n     <message from='romeo@example.net'>\n       ...\n
        \    </message>\n"
      title: 4.2.1.  From Address
    - contents:
      - "4.2.2.  To Address\n   The 'To' header of a \"Message/CPIM\" object maps
        to the 'to' attribute\n   of an XMPP message stanza.  To map the CPIM 'To'
        header to the XMPP\n   'to' attribute, the gateway MUST remove the \"im:\"
        Instant Messaging\n   URI scheme from the front of the address and MUST remove
        the CPIM\n   \"Formal-name\" (if provided).  If the gateway possesses knowledge
        of\n   the resource identifier in use by the XMPP entity, the gateway MAY\n
        \  append the resource identifier to the address.\n   Example: To Address
        Mapping\n   CPIM 'To' header\n     To: Juliet Capulet <im:juliet@example.com>\n
        \  XMPP 'to' attribute\n     <message to='juliet@example.com/balcony'>\n       ...\n
        \    </message>\n"
      title: 4.2.2.  To Address
    - contents:
      - "4.2.3.  Courtesy Copy\n   The core XMPP specification does not include syntax
        for specifying a\n   \"courtesy copy\" (non-primary addressee) for a message
        stanza.\n   Therefore, if an XMPP-CPIM gateway receives a \"Message/CPIM\"
        object\n   that contains a 'cc' header, it SHOULD NOT pass the information\n
        \  contained in that header on to the XMPP recipient.\n"
      title: 4.2.3.  Courtesy Copy
    - contents:
      - "4.2.4.  DateTime Header\n   The core XMPP specification does not include
        syntax for specifying\n   the datetime at which a message stanza was sent.
        \ Therefore, if an\n   XMPP-CPIM gateway receives a \"Message/CPIM\" object
        that contains a\n   'DateTime' header, it SHOULD NOT pass the information
        contained in\n   that header on to the XMPP recipient.\n"
      title: 4.2.4.  DateTime Header
    - contents:
      - "4.2.5.  Message Subject\n   The 'Subject' header of a \"Message/CPIM\" object
        maps to the\n   <subject/> child element of an XMPP message stanza.  To map
        the CPIM\n   'Subject' header to the XMPP <subject/> element, the gateway
        SHOULD\n   simply map the value of the 'Subject' header to the XML character\n
        \  data of the XMPP <subject/> element.  The 'Subject' header MAY\n   specify
        the \"lang\" in which the subject is written.  If \"lang\"\n   information
        is provided, it MUST be mapped to the 'xml:lang'\n   attribute of the <subject/>
        element, where the value of the\n   'xml:lang' attribute is the \"tag\" value
        supplied in the string\n   ';lang=tag' included after the CPIM 'Subject' header
        name and colon.\n   Example: Subject Mapping\n   CPIM 'Subject' header\n     Subject:
        Hi!\n     Subject:;lang=cz Ahoj!\n   XMPP <subject/> element\n     <subject>Hi!</subject>\n
        \    <subject xml:lang='cz'>Ahoj!</subject>\n"
      title: 4.2.5.  Message Subject
    - contents:
      - "4.2.6.  Header Extensions\n   \"Message/CPIM\" objects MAY include an optional
        'NS' header to specify\n   the namespace of a feature extension.  An XMPP-CPIM
        gateway MUST NOT\n   pass such headers through to the XMPP recipient, and
        no mapping for\n   such headers is defined.\n"
      title: 4.2.6.  Header Extensions
    - contents:
      - "4.2.7.  Require Header\n   \"Message/CPIM\" objects MAY include an optional
        'Require' header to\n   specify mandatory-to-recognize features.  In general,
        such a header\n   would be included by the non-XMPP sending application to
        (1) insist\n   that the receiving application needs to understand functionality\n
        \  specified by a particular header or (2) indicate that some non-header\n
        \  semantics need to be implemented by the receiving application in\n   order
        to understand the contents of the message (e.g.,\n   \"Locale.MustRenderKanji\").
        \ Because the mandatory-to-recognize\n   features would be required of the
        XMPP receiving application rather\n   than the XMPP-CPIM gateway itself, the
        gateway cannot properly handle\n   the 'Require' header without detailed knowledge
        about the\n   capabilities of the XMPP receiving application.  Therefore,
        it seems\n   appropriate that the XMPP-CPIM gateway SHOULD return a warning
        or\n   error to the non-XMPP sending application if it includes one or more\n
        \  'Require' headers in a \"Message/CPIM\" object; the exact nature of the\n
        \  warning or error will depend on the nature of the non-XMPP technology\n
        \  used by the foreign system, and is not defined herein.  Furthermore,\n
        \  any mapping of the 'Require' header into XMPP or an XMPP extension is\n
        \  left up to the implementation or to a future specification.\n"
      title: 4.2.7.  Require Header
    - contents:
      - "4.2.8.  MIME Content-ID\n   XMPP does not include an element or attribute
        that captures a\n   globally unique ID as is defined for the Content-ID MIME
        header as\n   specified in [MIME].  If an XMPP-CPIM gateway receives a MIME
        object\n   that includes a Content-ID, it MAY provide the Content-ID as the\n
        \  value of the message stanza's 'id' attribute, but this is OPTIONAL.\n   Example:
        Content-ID for Encapsulated Object\n   MIME header\n     Content-ID: <123456789@example.net>\n
        \  XMPP 'id' attribute (OPTIONAL)\n     <message id='123456789@example.net'>\n
        \      ...\n     </message>\n"
      title: 4.2.8.  MIME Content-ID
    - contents:
      - "4.2.9.  Message Body\n   If the Content-type of an encapsulated MIME object
        is \"text/plain\",\n   then the encapsulated text message content maps to
        the XML character\n   data of the <body/> child element of an XMPP message
        stanza.\n   Example: Message Body\n   Encapsulated MIME text content\n     Content-type:
        text/plain; charset=utf-8\n     Content-ID: <123456789@example.net>\n     Wherefore
        art thou?\n   XMPP message <body/>\n     <message id='123456789@example.net'>\n
        \      <body>Wherefore art thou?</body>\n     </message>\n   If the Content-Type
        is not \"text/plain\", the XMPP-CPIM gateway MAY\n   map the content to an
        XMPP extension but MUST NOT map it to the\n   <body/> child of the XMPP message
        stanza, which is allowed to contain\n   XML character data only.  The only
        exception to this rule is a\n   multi-part MIME object of the kind specified
        in [XMPP-E2E], which is\n   to be mapped as described in that memo.\n   If
        the charset is \"US-ASCII\" or \"UTF-8\", the gateway MUST map the\n   \"Message/CPIM\"
        object; otherwise it SHOULD NOT.\n"
      title: 4.2.9.  Message Body
    - contents:
      - "4.2.10.  Gateway-Generated XMPP Syntax\n   XMPP specifies the existence of
        a 'type' attribute for XMPP message\n   stanzas, which enables the sender
        to define the conversational\n   context of the message.  There is no exact
        analogue for this\n   attribute in CPIM.  An XMPP-CPIM gateway MAY independently
        generate\n   the 'type' attribute based on its own information, but this is\n
        \  OPTIONAL and rules for doing so are out of scope for this memo.\n"
      title: 4.2.10.  Gateway-Generated XMPP Syntax
    title: 4.2.  Message Syntax Mapping from CPIM Specifications to XMPP
  title: 4.  Syntax Mapping of Instant Messages
- contents:
  - "5.  Syntax Mapping of Presence Information\n   This section describes how a gateway
    SHOULD map presence information\n   between an XMPP service and a non-XMPP service
    using a \"Message/CPIM\"\n   object as the bearer of an encapsulated [PIDF] object
    in order to\n   comply with the presence semantics defined by [CPP].\n"
  - contents:
    - "5.1.  Presence Syntax Mapping from XMPP to CPIM Specifications\n   This section
      defines the mapping of syntax primitives from XMPP\n   presence stanzas to \"Message/CPIM\"
      objects with encapsulated\n   \"application/pidf+xml\" objects.\n   Note: As
      specified in [MIME], the default Content-type of a MIME\n   object is \"Content-type:
      text/plain; charset=us-ascii\".  Because XMPP\n   uses the [UTF-8] character
      encoding exclusively and because PIDF\n   specifies the \"application/pidf+xml\"
      MIME type, the encapsulated MIME\n   object generated by an XMPP-CPIM gateway
      for presence information\n   MUST set the 'Content-type' header for that object.
      \ The\n   \"Content-type\" MUST be set to \"application/pidf+xml\" and the charset\n
      \  MUST be set to \"utf-8\".\n"
    - contents:
      - "5.1.1.  From Address\n   The 'from' attribute of an XMPP presence stanza
        maps to the 'From'\n   header of a \"Message/CPIM\" object.  In XMPP, the
        sender's server\n   stamps or validates the \"from\" address and sets its
        value to the\n   <user@host/resource> negotiated between client and server
        during\n   authenticating and resource binding as defined in [XMPP-CORE].
        \ Thus\n   an XMPP-CPIM gateway will receive from the sender's XMPP server
        a\n   presence stanza containing a \"from\" address of the form\n   <user@host/resource>.
        \ To map the 'from' attribute of an XMPP\n   presence stanza to the 'From'
        header of a \"Message/CPIM\" object, the\n   gateway MUST remove the resource
        identifier, MUST append the \"im:\"\n   Instant Messaging URI scheme to the
        front of the address, and MAY\n   include a CPIM \"Formal-name\" for the sender
        (if known).\n   Example: From Address Mapping\n   XMPP 'from' attribute\n
        \    <presence from='juliet@example.com/balcony'>\n       ...\n     </presence>\n
        \  CPIM 'From' header\n     From: Juliet Capulet <im:juliet@example.com>\n
        \  In addition, the 'from' attribute of an XMPP presence stanza maps to\n
        \  the 'entity' attribute of a PIDF <presence/> root element.  To map\n   the
        XMPP 'from' attribute to the PIDF 'entity' attribute, the gateway\n   MUST
        remove the resource identifier and MUST append the \"pres:\"\n   Instant Messaging
        URI scheme to the front of the address.\n   Example: From Address Mapping
        (PIDF)\n   XMPP 'from' attribute\n     <presence from='juliet@example.com/balcony'>\n
        \      ...\n     </presence>\n   PIDF 'entity' attribute\n     <presence entity='pres:juliet@example.com'>\n
        \      ...\n     </presence>\n   Finally, an XMPP-CPIM gateway SHOULD map
        the resource identifier of\n   the XMPP address contained in the XMPP 'from'
        attribute to the 'id'\n   attribute of the PIDF <tuple/> child element.\n
        \  Example: Resource Identifier Mapping\n   XMPP 'from' attribute\n     <presence
        from='juliet@example.com/balcony'>\n       ...\n     </presence>\n   PIDF
        'id' for <tuple/>\n     <presence entity='pres:juliet@example.com'>\n       <tuple
        id='balcony'>\n         ...\n       </tuple>\n     </presence>\n"
      title: 5.1.1.  From Address
    - contents:
      - "5.1.2.  To Address\n   The 'to' attribute of an XMPP presence stanza maps
        to the 'To' header\n   of a \"Message/CPIM\" object.  In XMPP, the sender
        MAY include a 'to'\n   attribute on a presence stanza, and MUST include it
        if the presence\n   stanza is intended for delivery directly to another user
        (presence\n   stanzas intended for broadcasting are stamped with a 'to' address
        by\n   the sender's server).  Thus an XMPP-CPIM gateway will receive from\n
        \  the sender's XMPP server a presence stanza containing a \"to\" address\n
        \  of the form <user@host> or <user@host/resource>.  To map the 'to'\n   attribute
        of an XMPP presence stanza to the 'To' header of a\n   \"Message/CPIM\" object,
        the gateway MUST remove the resource\n   identifier (if included), MUST append
        the \"im:\" Instant Messaging URI\n   scheme to the front of the address,
        and MAY include a CPIM\n   \"Formal-name\" for the recipient (if known).\n
        \  Example: To Address Mapping\n   XMPP 'to' attribute\n     <presence to='romeo@example.net/orchard'>\n
        \      ...\n     </presence>\n   CPIM 'To' header\n     To: Romeo Montague
        <im:romeo@example.net>\n"
      title: 5.1.2.  To Address
    - contents:
      - "5.1.3.  Stanza ID\n   An XMPP presence stanza MAY possess an 'id' attribute,
        which is used\n   by the sending application for the purpose of tracking stanzas
        and is\n   not a globally-unique identifier such as is defined by the MIME\n
        \  Content-ID header.  Because the XMPP 'id' attribute does not have the\n
        \  same meaning as the MIME Content-ID header, it SHOULD NOT be mapped\n   to
        that header; however, if the 'id' is known to be unique (e.g., if\n   it is
        generated to be unique by the XMPP server and that fact is\n   known by the
        XMPP-CPIM gateway), then it SHOULD be so mapped.\n"
      title: 5.1.3.  Stanza ID
    - contents:
      - "5.1.4.  Presence Type\n   An XMPP presence stanza MAY possess a 'type' attribute.
        \ If no 'type'\n   attribute is included, the presence stanza indicates that
        the sender\n   is available; this state maps to the PIDF basic presence type
        of\n   OPEN.  If the 'type' attribute has a value of \"unavailable\", the\n
        \  presence stanza indicates that the sender is no longer available;\n   this
        state maps to the PIDF basic presence type of CLOSED.  Thus both\n   the absence
        of a 'type' attribute and a 'type' attribute set to a\n   value of \"unavailable\"
        correspond to the [CPP] \"notify operation\".\n   All other presence types
        are used to manage presence subscriptions or\n   probe for current presence;
        mappings for these other presence types\n   are defined under XMPP-CPIM Gateway
        as Presence Service (Section 6).\n   Example: Available Presence\n   XMPP
        available presence\n     <presence from='juliet@example.com/balcony'/>\n   PIDF
        basic presence (OPEN)\n     <?xml version='1.0' encoding='UTF-8'?>\n     <presence
        xmlns='urn:ietf:params:xml:ns:pidf'\n               entity='pres:juliet@example.com'>\n
        \      <tuple id='balcony'>\n         <status>\n           <basic>open</basic>\n
        \        </status>\n       </tuple>\n     </presence>\n   Example: Unavailable
        Presence\n   XMPP unavailable presence\n     <presence from='juliet@example.com/balcony'
        type='unavailable'/>\n   PIDF basic presence (CLOSED)\n     <?xml version='1.0'
        encoding='UTF-8'?>\n     <presence xmlns='urn:ietf:params:xml:ns:pidf'\n               entity='pres:romeo@example.net'>\n
        \      <tuple id='balcony'>\n         <status>\n           <basic>closed</basic>\n
        \        </status>\n       </tuple>\n     </presence>\n"
      title: 5.1.4.  Presence Type
    - contents:
      - "5.1.5.  Show Element\n   The <show/> child element of an XMPP presence stanza
        provides\n   additional information about the sender's availability.  The
        XML\n   character data of the XMPP <show/> element maps to extended <status/>\n
        \  content in PIDF.  The defined values of the <show/> element are\n   'away',
        'chat', 'dnd', and 'xa'; as soon as values are specified for\n   extended
        status states in the 'urn:ietf:params:xml:ns:pidf:im'\n   namespace, the XMPP
        values will be mapped to the PIDF values.\n   Example: Show Element\n   XMPP
        <show/> element\n     <presence from='juliet@example.com/balcony'>\n       <show>away</show>\n
        \    </presence>\n   PIDF extended presence information\n     <?xml version='1.0'
        encoding='UTF-8'?>\n     <presence xmlns='urn:ietf:params:xml:ns:pidf'\n               xmlns:im='urn:ietf:params:xml:ns:pidf:im'\n
        \              entity='pres:juliet@example.com'>\n       <tuple id='balcony'>\n
        \        <status>\n           <basic>open</basic>\n           <im:im>away</im:im>\n
        \        </status>\n       </tuple>\n     </presence>\n"
      title: 5.1.5.  Show Element
    - contents:
      - "5.1.6.  Status Element\n   The <status/> child element of an XMPP presence
        stanza provides a\n   user-defined, natural-language description of the sender's
        detailed\n   availability state.  The XMPP <status/> element maps to the PIDF\n
        \  <note/> child of the PIDF <tuple/> element.\n   Example: Status Element\n
        \  XMPP <status/> element\n     <presence from='juliet@example.com/balcony'>\n
        \      <show>away</show>\n       <status>retired to the chamber</status>\n
        \    </presence>\n   PIDF <note/> element\n     <?xml version='1.0' encoding='UTF-8'?>\n
        \    <presence xmlns='urn:ietf:params:xml:ns:pidf'\n               xmlns:im='urn:ietf:params:xml:ns:pidf:im'\n
        \              entity='pres:juliet@example.com'>\n       <tuple id='balcony'>\n
        \        <status>\n           <basic>open</basic>\n           <im:im>away</im:im>\n
        \        </status>\n         <note>retired to the chamber</note>\n       </tuple>\n
        \    </presence>\n"
      title: 5.1.6.  Status Element
    - contents:
      - "5.1.7.  Presence Priority\n   An XMPP presence stanza MAY contain a <priority/>
        child element whose\n   value is an integer between -128 and +127.  The value
        of this element\n   MAY be mapped to the 'priority' attribute of the <contact/>
        child of\n   the PIDF <tuple/> element.  If the value of the XMPP <priority/>\n
        \  element is negative, an XMPP-CPIM gateway MUST NOT map the value. The\n
        \  range of allowable values for the PIDF 'priority' attribute is any\n   decimal
        number from zero to one inclusive, with a maximum of three\n   decimal places.
        \ If an XMPP-CPIM gateway maps these values, it SHOULD\n   treat XMPP <priority>0</priority>
        as PIDF priority='0' and XMPP\n   <priority>127</priority> as PIDF priority='1',
        mapping intermediate\n   values appropriately so that they are unique (e.g.,
        XMPP priority 1\n   to PIDF priority 0.007, XMPP priority 2 to PIDF priority
        0.015, and\n   so on up through mapping XMPP priority 126 to PIDF priority
        0.992;\n   note that this is an example only, and that the exact mapping shall\n
        \  be determined by the XMPP-CPIM gateway).\n   Example: Presence Priority\n
        \  XMPP <status/> element\n     <presence from='juliet@example.com/balcony'>\n
        \      <priority>13</priority>\n     </presence>\n   PIDF <note/> element\n
        \    <?xml version='1.0' encoding='UTF-8'?>\n     <presence xmlns='urn:ietf:params:xml:ns:pidf'\n
        \              entity='pres:juliet@example.com'>\n       <tuple id='balcony'>\n
        \        ...\n         <contact priority='0.102'>im:juliet@example.com</contact>\n
        \      </tuple>\n     </presence>\n"
      title: 5.1.7.  Presence Priority
    - contents:
      - "5.1.8.  Presence Extensions\n   As defined in [XMPP-CORE], an XMPP presence
        stanza may contain\n   \"extended\" content in any namespace in order to supplement
        or extend\n   the semantics of the core presence stanza.  With the exception
        of\n   extended information qualified by the\n   'urn:ietf:params:xml:ns:xmpp-e2e'
        namespace as defined in [XMPP-E2E],\n   an XMPP-CPIM gateway SHOULD ignore
        such information and not pass it\n   through the gateway to the intended recipient.
        \ No mapping for such\n   information is defined.\n"
      title: 5.1.8.  Presence Extensions
    - contents:
      - '5.1.9.  Gateway-Generated CPIM and PIDF Syntax

        '
      - contents:
        - "5.1.9.1.  CPIM Message Headers\n   CPIM specifies the existence of \"Message/CPIM\"
          headers in addition to\n   those described above, but there is no exact
          analogue for those\n   headers in the core XMPP specifications.  These include:\n
          \  o  cc -- specifies the address of an entity that is to receive a\n      \"courtesy
          copy\" of the presence information (i.e., a non-primary\n      addressee)\n
          \  o  DateTime -- specifies the datetime at which the presence\n      information
          was sent\n   o  NS -- specifies the namespace of a feature extension\n   o
          \ Subject -- specifies the subject or topic of the encapsulated\n      \"Message/CPIM\"
          object\n   o  Require -- specifies mandatory-to-recognize features\n   An
          XMPP-CPIM gateway MAY independently generate such headers based on\n   its
          own information (e.g., the datetime at which it received a\n   presence
          stanza from an XMPP entity) or based on data encoded in\n   non-core XMPP
          extensions, but rules for doing so are out of scope for\n   this memo.\n"
        title: 5.1.9.1.  CPIM Message Headers
      - contents:
        - "5.1.9.2.  PIDF Elements\n   PIDF specifies the existence of XML elements
          in addition to those\n   described above, but there is no exact analogue
          for those XML\n   elements in the core XMPP specifications.  These include:\n
          \  o  <contact/> -- specifies an address (e.g., an im:, tel:, or mailto:\n
          \     URI) at which one may communicate with the presentity; an\n      XMPP-CPIM
          gateway MAY include this element, in which case it\n      SHOULD set its
          value to the <user@host> of the XMPP sender,\n      prepended by the \"im:\"
          Instant Messaging URI scheme.\n   o  <timestamp/> -- specifies the datetime
          at which the presence\n      information was sent; an XMPP-CPIM gateway
          MAY independently\n      generate this element based on its own information
          (e.g., the\n      datetime at which it received the presence stanza from
          an XMPP\n      entity) or based on data encoded in non-core XMPP extensions,
          but\n      rules for doing so are out of scope for this memo.\n"
        title: 5.1.9.2.  PIDF Elements
      title: 5.1.9.  Gateway-Generated CPIM and PIDF Syntax
    title: 5.1.  Presence Syntax Mapping from XMPP to CPIM Specifications
  - contents:
    - "5.2.  Presence Syntax Mapping from CPIM Specifications to XMPP\n   This section
      defines the mapping of syntax primitives from\n   \"Message/CPIM\" objects with
      encapsulated \"application/pidf+xml\"\n   objects to XMPP presence stanzas.\n
      \  Note: An XMPP-CPIM gateway MUST NOT map to an XMPP presence stanza a\n   \"Message/CPIM\"
      object whose encapsulated MIME object has a\n   Content-type other than \"application/pidf+xml\"
      (with the exception of\n   multi-part MIME objects as specified in [XMPP-E2E]).\n"
    - contents:
      - "5.2.1.  From Address\n   The 'From' header of a \"Message/CPIM\" object maps
        to the <user@host>\n   portion of the 'from' attribute of an XMPP presence
        stanza, and the\n   'id' attribute of the PIDF <tuple/> child element maps
        to the\n   resource identifier portion XMPP 'from' attribute.  Therefore,
        to map\n   the CPIM and PIDF information to the XMPP 'from' attribute, the\n
        \  gateway MUST remove the \"im:\" Instant Messaging URI scheme from the\n
        \  front of the address and MUST remove the CPIM \"Formal-name\" (if\n   provided)
        in order to generate the <user@host> portion of the XMPP\n   'from' attribute,
        then add a '/' character followed by the value of\n   the PIDF <tuple/> element's
        'id' attribute.\n   Example: From Address Mapping\n   CPIM 'From' header\n
        \    From: Romeo Montague <im:romeo@example.net>\n   XMPP 'from' attribute\n
        \    <presence from='romeo@example.net'>\n       ...\n     </presence>\n   Example:
        Resource Identifier Mapping\n   XMPP 'from' attribute\n     <presence from='juliet@example.com/balcony'>\n
        \      ...\n     </presence>\n   PIDF 'id' for <tuple/>\n     <presence entity='pres:juliet@example.com'>\n
        \      <tuple id='balcony'>\n         ...\n       </tuple>\n     </presence>\n"
      title: 5.2.1.  From Address
    - contents:
      - "5.2.2.  To Address\n   The 'To' header of a \"Message/CPIM\" object maps
        to the 'to' attribute\n   of an XMPP presence stanza.  To map the CPIM 'To'
        header to the XMPP\n   'to' attribute, the gateway MUST remove the \"im:\"
        Instant Messaging\n   URI scheme from the front of the address and MUST remove
        the CPIM\n   \"Formal-name\" (if provided).  If the gateway possesses knowledge
        of\n   the resource identifier in use by the XMPP entity, the gateway MAY\n
        \  append the resource identifier to the address.\n   Example: To Address
        Mapping\n   CPIM 'To' header\n     To: Juliet Capulet <im:juliet@example.com>\n
        \  XMPP 'to' attribute\n     <presence to='juliet@example.com/balcony'>\n
        \      ...\n     </presence>\n"
      title: 5.2.2.  To Address
    - contents:
      - "5.2.3.  Courtesy Copy\n   The core XMPP specification does not include syntax
        for specifying a\n   \"courtesy copy\" (non-primary addressee) for a presence
        stanza.\n   Therefore, if an XMPP-CPIM gateway receives a \"Message/CPIM\"
        object\n   with encapsulated PIDF object that contains a 'cc' header, it SHOULD\n
        \  NOT pass the information contained in that header on to the XMPP\n   recipient.\n"
      title: 5.2.3.  Courtesy Copy
    - contents:
      - "5.2.4.  DateTime Header\n   The core XMPP specification does not include
        syntax for specifying\n   the datetime at which a presence stanza was sent.
        \ Therefore, if an\n   XMPP-CPIM gateway receives a \"Message/CPIM\" object
        with encapsulated\n   PIDF object that contains a 'DateTime' header, it SHOULD
        NOT pass the\n   information contained in that header on to the XMPP recipient.\n"
      title: 5.2.4.  DateTime Header
    - contents:
      - "5.2.5.  Subject Header\n   An XMPP presence stanza contains no information
        that can be mapped to\n   the 'Subject' header of a \"Message/CPIM\" object.
        \ Therefore, if an\n   XMPP-CPIM gateway receives a \"Message/CPIM\" object
        with encapsulated\n   PIDF object that contains a 'Subject' header, it SHOULD
        NOT pass the\n   information contained in that header on to the XMPP recipient.\n"
      title: 5.2.5.  Subject Header
    - contents:
      - "5.2.6.  Header Extensions\n   \"Message/CPIM\" objects MAY include an optional
        'NS' header to specify\n   the namespace of a feature extension.  An XMPP-CPIM
        gateway MUST NOT\n   pass such headers through to the XMPP recipient, and
        no mapping for\n   such headers is defined.\n"
      title: 5.2.6.  Header Extensions
    - contents:
      - "5.2.7.  Require Header\n   \"Message/CPIM\" objects MAY include an optional
        'Require' header to\n   specify mandatory-to-recognize features.  An XMPP-CPIM
        gateway MUST\n   NOT pass such headers through to the XMPP recipient, and
        no mapping\n   for such headers is defined.\n"
      title: 5.2.7.  Require Header
    - contents:
      - "5.2.8.  MIME Content-ID\n   XMPP does not include an element or attribute
        that captures a\n   globally unique ID as is defined for the Content-ID MIME
        header as\n   specified in [MIME].  If an XMPP-CPIM gateway receives a MIME
        object\n   that includes a Content-ID, it MAY provide the Content-ID as the\n
        \  value of the presence stanza's 'id' attribute, but this is OPTIONAL.\n
        \  Example: Content-ID for Encapsulated Object\n   MIME header\n     Content-ID:
        <123456789@example.net>\n   XMPP 'id' attribute (OPTIONAL)\n     <presence
        id='123456789@example.net'>\n       ...\n     </presence>\n"
      title: 5.2.8.  MIME Content-ID
    - contents:
      - "5.2.9.  Basic Presence Status\n   The basic presence status types defined
        in PIDF are OPEN and CLOSED.\n   The PIDF basic presence status of OPEN maps
        to an XMPP presence\n   stanza that possesses no 'type' attribute (indicating
        default\n   availability).  The PIDF basic presence status of CLOSED maps
        to an\n   XMPP presence stanza that possesses a 'type' attribute with a value\n
        \  of \"unavailable\".\n   Example: OPEN Presence\n   PIDF basic presence
        (OPEN)\n     <?xml version='1.0' encoding='UTF-8'?>\n     <presence xmlns='urn:ietf:params:xml:ns:pidf'\n
        \              entity='pres:romeo@example.net'>\n       <tuple id='orchard'>\n
        \        <status>\n           <basic>open</basic>\n         </status>\n       </tuple>\n
        \    </presence>\n   XMPP available presence\n     <presence from='romeo@example.net/orchard'/>\n
        \  Example: CLOSED Presence\n   PIDF basic presence (CLOSED)\n     <?xml version='1.0'
        encoding='UTF-8'?>\n     <presence xmlns='urn:ietf:params:xml:ns:pidf'\n               entity='pres:romeo@example.net'>\n
        \      <tuple id='orchard'>\n         <status>\n           <basic>closed</basic>\n
        \        </status>\n       </tuple>\n     </presence>\n   XMPP unavailable
        presence\n     <presence from='romeo@example.net/orchard'\n               type='unavailable'/>\n"
      title: 5.2.9.  Basic Presence Status
    - contents:
      - "5.2.10.  Extended Status Information\n   PIDF documents may contain extended
        <status/> content.  As of this\n   writing there are no pre-defined extended
        status states that can be\n   mapped to the defined values of the XMPP <show/>
        element ('away',\n   'chat', 'dnd', and 'xa').  Once PIDF extensions for such
        extended\n   status states are defined within the Internet Standards Process,
        a\n   gateway SHOULD map those extensions; however, any such mapping is out\n
        \  of scope for this memo, since the relevant PIDF extensions have not\n   yet
        been defined.\n   Example: Extended Status Information (provisional)\n   PIDF
        extended presence information\n     <?xml version='1.0' encoding='UTF-8'?>\n
        \    <presence xmlns='urn:ietf:params:xml:ns:pidf'\n               xmlns:im='urn:ietf:params:xml:ns:pidf:im'\n
        \              entity='pres:romeo@example.net'>\n       <tuple id='orchard'>\n
        \        <status>\n           <basic>open</basic>\n           <im:im>busy</im:im>\n
        \        </status>\n       </tuple>\n     </presence>\n   XMPP <show/> element\n
        \    <presence from='romeo@example.net/orchard'>\n       <show>dnd</show>\n
        \    </presence>\n"
      title: 5.2.10.  Extended Status Information
    - contents:
      - "5.2.11.  Note Element\n   A PIDF <tuple/> element may contain a <note/> child
        that provides a\n   user-defined, natural-language description of the sender's
        detailed\n   availability state.  The PIDF <note/> element maps to the XMPP\n
        \  <status/> element.\n   Example: Note Element\n   PIDF <note/> element\n
        \    <?xml version='1.0' encoding='UTF-8'?>\n     <presence xmlns='urn:ietf:params:xml:ns:pidf'\n
        \              xmlns:im='urn:ietf:params:xml:ns:pidf:im'\n               entity='pres:romeo@example.net'>\n
        \      <tuple id='orchard'>\n         <status>\n           <basic>open</basic>\n
        \          <im:im>busy</im:im>\n         </status>\n         <note>Wooing
        Juliet</note>\n       </tuple>\n     </presence>\n   XMPP <status/> element\n
        \    <presence from='romeo@example.net/orchard'>\n       <show>dnd</show>\n
        \      <status>Wooing Juliet</status>\n     </presence>\n   A PIDF document
        with zero tuples MAY contain one or more <note/>\n   elements as direct children
        of the PIDF <presence/> element.  There\n   is no mapping of such a PIDF document
        to an XMPP presence stanza; an\n   entity on the non-XMPP side of an XMPP-CPIM
        gateway SHOULD NOT send\n   such a PIDF document to an XMPP recipient if possible,
        and an\n   XMPP-CPIM gateway MUST NOT map such a PIDF document to an XMPP\n
        \  presence stanza (see Zero Resources (Section 6.3.2)).\n"
      title: 5.2.11.  Note Element
    - contents:
      - "5.2.12.  Contact Element\n   A PIDF document may contain a <contact/> element
        specifying the URI\n   of an address at which the principal can be contacted
        (e.g., an im:,\n   tel:, or mailto: URI).  The core XMPP specification does
        not include\n   syntax for specifying the URI of a contact address, since
        the contact\n   address is implicit in the 'from' attribute of the XMPP presence\n
        \  stanza.  Therefore, if an XMPP-CPIM gateway receives a \"Message/CPIM\"\n
        \  object with encapsulated PIDF object that contains a <contact/>\n   element,
        it SHOULD NOT pass the XML character data of the <contact/>\n   element on
        to the XMPP recipient.  (However, see Inclusion of\n   Complete PIDF Document
        (Section 5.2.15) below.)\n   Example: PIDF Contact Element\n   PIDF <contact/>
        element\n     <?xml version='1.0' encoding='UTF-8'?>\n     <presence xmlns='urn:ietf:params:xml:ns:pidf'\n
        \              entity='pres:romeo@example.net'>\n       <tuple id='orchard'>\n
        \        ...\n         <contact>im:romeo@example.net</contact>\n       </tuple>\n
        \    </presence>\n   XMPP presence stanza\n     <presence from='romeo@example.net/orchard'/>\n"
      title: 5.2.12.  Contact Element
    - contents:
      - "5.2.13.  Presence Priority\n   The <contact/> child of the PIDF <tuple/>
        element MAY possess a\n   'priority' attribute whose value is a decimal number
        between zero and\n   one (with a maximum of three decimal places).  The value
        of this\n   attribute MAY be mapped to the <priority/> child element of an
        XMPP\n   presence stanza.  An XMPP-CPIM gateway MUST NOT map PIDF priority\n
        \  values to negative values of the XMPP <priority/> element.  If an\n   XMPP-CPIM
        gateway maps these values, it SHOULD treat PIDF\n   priority='0' as XMPP <priority>0</priority>
        and PIDF priority='1' as\n   <priority>127</priority>, mapping intermediate
        values appropriately\n   so that they are unique (e.g., PIDF priorities between
        0.001 and\n   0.007 to XMPP priority 1, PIDF priorities between 0.008 and
        0.015 to\n   XMPP priority 2, and so on up through mapping PIDF priorities
        between\n   0.992 and 0.999 to XMPP priority 126; note that this is an example\n
        \  only, and that the exact mapping shall be determined by the XMPP-CPIM\n
        \  gateway).\n"
      title: 5.2.13.  Presence Priority
    - contents:
      - "5.2.14.  Timestamp Element\n   The core XMPP specification does not include
        syntax for specifying\n   the datetime or timestamp at which a presence stanza
        was sent.\n   Therefore, if an XMPP-CPIM gateway receives a \"Message/CPIM\"
        object\n   with encapsulated PIDF object that contains a <timestamp/> element,\n
        \  it SHOULD NOT pass the XML character data of the <timestamp/> element\n
        \  on to the XMPP recipient.\n"
      title: 5.2.14.  Timestamp Element
    - contents:
      - "5.2.15.  Inclusion of Complete PIDF Document\n   Certain PIDF elements do
        not map to XMPP presence stanza syntax\n   (e.g., the XML character data of
        the <contact/> element).  However,\n   an XMPP client may be able to handle
        such information by parsing a\n   native PIDF document.  To make this possible,
        an XMPP-CPIM gateway\n   MAY include the complete PIDF document as a child
        element of the\n   presence stanza, as described in [XMPP-PIDF].  If an XMPP
        client does\n   not understand this extended data, it naturally MUST ignore
        it.\n"
      title: 5.2.15.  Inclusion of Complete PIDF Document
    title: 5.2.  Presence Syntax Mapping from CPIM Specifications to XMPP
  title: 5.  Syntax Mapping of Presence Information
- contents:
  - "6.  XMPP-CPIM Gateway as Presence Service\n   [CPP] defines semantics for an
    abstract presence service.  An\n   XMPP-CPIM gateway MAY function as such a presence
    service, and if so\n   an XMPP entity can use defined XMPP syntax to interact
    with the\n   gateway's presence service.  Because [PIDF] does not specify syntax\n
    \  for semantic operations such as subscribe, this section defines only\n   the
    XMPP interactions with the presence service offered by an\n   XMPP-CPIM gateway,
    not the translation of such XMPP syntax into PIDF.\n   (Note: Detailed information
    about XMPP presence services can be found\n   in [XMPP-IM]; as much as possible,
    an XMPP-CPIM gateway SHOULD\n   implement the syntax, semantics, and server business
    rules defined\n   therein.)\n"
  - contents:
    - "6.1.  Requesting a Subscription\n   If an XMPP entity wants to subscribe to
      the presence information of a\n   non-XMPP presentity through an XMPP-CPIM gateway,
      it MUST send a\n   presence stanza of type \"subscribe\" to the target presentity.
      \ The\n   syntax mapping is as follows:\n   o  The XMPP 'from' attribute (user@host)
      MUST be mapped to the CPP\n      \"watcher parameter\" field (pres:user@host).
      \ The XMPP-CPIM gateway\n      MUST append the \"pres:\" Presence URI scheme
      to the front of the\n      address.\n   o  The XMPP 'to' attribute (user@host)
      MUST be mapped to the CPP\n      \"target parameter\" field (pres:user@host).
      \ The XMPP-CPIM gateway\n      MUST append the \"pres:\" Presence URI scheme
      to the front of the\n      address.\n   o  There is no XMPP mapping for the
      CPP \"duration parameter\", since\n      XMPP subscriptions are active until
      they have been explicitly\n      \"unsubscribed\".\n   o  The XMPP 'id' attribute
      SHOULD be mapped to the CPP \"TransID\"\n      field.\n   If the target presentity
      approves the subscription request (through\n   whatever protocol it uses to
      interact with the gateway), the\n   XMPP-CPIM gateway MUST return a presence
      stanza of type \"subscribed\"\n   to the XMPP entity and notify the XMPP entity
      of the target's current\n   available presence.  Thereafter, until the subscription
      is cancelled,\n   the gateway MUST notify the subscribing XMPP entity every
      time the\n   target's presence information changes.\n   If the target presentity
      denies the subscription request, the\n   XMPP-CPIM gateway MUST return a presence
      stanza of type\n   \"unsubscribed\" to the XMPP entity and MUST NOT invoke the
      notify\n   operation.\n   In addition to the approval and denial cases, one
      of the following\n   exceptions may occur:\n   o  The target parameter (XMPP
      \"to\" address) does not refer to a valid\n      presentity; if this exception
      occurs, the XMPP-CPIM gateway MUST\n      return an <item-not-found/> stanza
      error to the XMPP entity.\n   o  Access control rules do not permit the entity
      to subscribe to the\n      target; if this exception occurs, the XMPP-CPIM gateway
      MUST\n      return a <forbidden/> stanza error to the XMPP entity.\n   o  There
      exists a pre-existing subscription or in-progress subscribe\n      operation
      between the XMPP entity and the target presentity; if\n      this exception
      occurs, the XMPP-CPIM gateway SHOULD return a\n      <conflict/> stanza error
      to the XMPP entity.\n   XMPP services assume that a subscription is active until
      it is\n   explicitly terminated.  However, non-XMPP services may implement\n
      \  subscriptions of limited duration, which must be periodically\n   refreshed
      in order to mimic the permanence of XMPP subscriptions.\n   Therefore, an XMPP-to-CPIM
      gateway may need to send such refreshes to\n   the non-XMPP entity on behalf
      of the XMPP entity to that the\n   subscription does not expire.  Whether such
      refreshes are necessary\n   depends on the native protocol implemented by the
      CPIM-aware non-XMPP\n   service to which the gateway is translating.\n"
    title: 6.1.  Requesting a Subscription
  - contents:
    - "6.2.  Receiving a Subscription Request\n   If a non-XMPP presentity wants to
      subscribe to the presence\n   information of an XMPP entity through an XMPP-CPIM
      gateway, it MUST\n   use whatever protocol it uses to interact with the gateway
      in order\n   to request the subscription; subject to local access rules, the\n
      \  gateway MUST then send a presence stanza of type \"subscribe\" to the\n   XMPP
      entity from the non-XMPP watcher.  The syntax mapping is as\n   follows:\n   o
      \ The CPP \"watcher parameter\" field (pres:user@host) MUST be mapped\n      to
      the XMPP 'from' attribute (user@host).  The XMPP-CPIM gateway\n      MUST remove
      the \"pres:\" Presence URI scheme from the front of the\n      address.\n   o
      \ The CPP \"target parameter\" field (pres:user@host) MUST be mapped\n      to
      the XMPP 'to' attribute (user@host).  The XMPP-CPIM gateway\n      MUST remove
      the \"pres:\" Presence URI scheme from the front of the\n      address.\n   o
      \ There is no XMPP mapping for the CPP \"duration parameter\", since\n      XMPP
      subscriptions are active until they have been explicitly\n      \"unsubscribed\".\n
      \  o  The CPP \"TransID\" field SHOULD be mapped to the XMPP 'id'\n      attribute.\n
      \  If the target XMPP entity approves the subscription request, it MUST\n   send
      a presence stanza of type \"subscribed\" to the watcher\n   presentity.  The
      XMPP-CPIM gateway MUST then notify the watcher\n   presentity of the target
      XMPP entity's current available presence.\n   Thereafter, until the subscription
      is cancelled, the gateway MUST\n   notify the watcher presentity every time
      the target's presence\n   information changes.\n   If the target XMPP entity
      denies the subscription request, it MUST\n   send a presence stanza of type
      \"unsubscribed\" to the watcher\n   presentity.  The XMPP-CPIM gateway MUST
      NOT invoke the notify\n   operation.\n   In addition to the approval and denial
      cases, one of the following\n   exceptions MAY occur:\n   o  The target parameter
      (XMPP \"to\" address) does not refer to a valid\n      XMPP entity\n   o  Access
      control rules do not permit the watcher presentity to\n      subscribe to the
      target XMPP entity\n   o  There exists a pre-existing subscription or in-progress
      subscribe\n      operation between the watcher presentity and the target XMPP\n
      \     entity\n   If any of these exceptions occurs, the XMPP-CPIM gateway MUST
      inform\n   the watcher presentity of failure.\n   XMPP services assume that
      a subscription is active until it is\n   explicitly terminated.  With the exception
      of handling duration\n   parameters whose value is zero, handling duration parameters
      will be\n   highly dependent on the implementation and requirements of the\n
      \  XMPP-CPIM gateway.  Since there are no explicit requirements for\n   supporting
      a \"duration parameter\" specified in either [IMP-MODEL] or\n   [IMP-REQS],
      duration parameter mapping is a local issue that falls\n   outside the scope
      of this memo.  However, an XMPP-CPIM gateway MAY\n   keep track of the duration
      parameter if received from an entity on\n   the non-XMPP service and delete
      the subscription after that duration\n   parameter expires.\n"
    title: 6.2.  Receiving a Subscription Request
  - contents:
    - "6.3.  The Notify Operation\n   An XMPP-CPIM gateway invokes the CPP \"notify
      operation\" whenever the\n   presence information associated with an XMPP entity
      or CPP presentity\n   changes and there are subscribers to that information
      on the other\n   side of the gateway.  The syntax mapping for presence information\n
      \  related to a notify operation is defined under Mapping for Presence\n   (Section
      5).\n"
    - contents:
      - "6.3.1.  Multiple Resources\n   Semantically, PIDF contains the notion of
        multiple presence \"tuples\".\n   Normally, a PIDF document will contain at
        least one tuple but MAY\n   contain more than one tuple (or zero tuples, for
        which see next\n   section).  In the terminology of XMPP, each tuple would
        map to\n   presence information for a separate resource.  However, XMPP does
        not\n   include the ability to send presence information about more than one\n
        \  resource at a time, since the resource that generates the presence\n   information
        is contained in the 'from' address of a presence stanza.\n   Therefore, an
        XMPP-CPIM gateway that acts as a presence service\n   SHOULD split a PIDF
        document that contains multiple tuples into\n   multiple XMPP presence stanzas,
        and SHOULD generate only one PIDF\n   document (with multiple tuples) if an
        XMPP user currently has\n   multiple connected resources.\n   In the interest
        of not multiplying XMPP stanzas beyond necessity, an\n   XMPP-CPIM gateway
        SHOULD generate an XMPP presence stanza only if the\n   presence information
        contained in a PIDF tuple communicates a change\n   in the availability status
        of the device or application associated\n   with that tuple ID.\n   In the
        interest of complying with the PIDF recommendation to provide\n   information
        about multiple \"resources\" in multiple tuples rather than\n   in multiple
        PIDF documents, an XMPP-CPIM gateway SHOULD include\n   information about
        all of an XMPP user's resources in one PIDF\n   document (with one tuple for
        each resource), even if the availability\n   status of only one resource has
        changed.\n"
      title: 6.3.1.  Multiple Resources
    - contents:
      - "6.3.2.  Zero Resources\n   A PIDF document may contain zero tuples.  For
        example:\n   PIDF Document with Zero Tuples\n     <presence entity='pres:juliet@example.com'\n
        \              xmlns='urn:ietf:params:xml:ns:pidf'/>\n   Because (1) the 'entity'
        attribute of a PIDF <presence/> element maps\n   to the <user@host> portion
        of an XMPP address and (2) the 'id'\n   attribute of a PIDF <tuple/> element
        maps to the resource identifier\n   portion of an XMPP address, a PIDF document
        that contains zero tuples\n   would provide presence information about a <user@host>
        rather than a\n   <user@host/resource> when mapped to XMPP.  Although the
        notion of\n   presence notifications about a mere user rather than one of
        the\n   user's resources is nearly meaningless in the XMPP context, an\n   XMPP-CPIM
        gateway SHOULD map a PIDF document with zero tuples to an\n   XMPP presence
        stanza whose 'from' address is the user@host of the\n   non-XMPP entity.  However,
        an XMPP-CPIM gateway MUST NOT generate a\n   PIDF document with zero <tuple/>
        children when receiving a presence\n   stanza from an XMPP entity (i.e., all
        PIDF documents communicated by\n   the gateway to a non-XMPP service MUST
        contain at least one <tuple/>\n   element).\n"
      title: 6.3.2.  Zero Resources
    title: 6.3.  The Notify Operation
  - contents:
    - "6.4.  Unsubscribing\n   If an XMPP entity wants to unsubscribe from the presence
      of a\n   non-XMPP presentity through an XMPP-CPIM gateway, it MUST send a\n
      \  presence stanza of type \"unsubscribe\" to the target presentity.  The\n
      \  syntax mapping is as follows:\n   o  The XMPP 'from' attribute (user@host)
      MUST be mapped to the CPP\n      \"watcher parameter\" field (pres:user@host).
      \ The XMPP-CPIM gateway\n      MUST append the \"pres:\" Presence URI scheme
      to the front of the\n      address.\n   o  The XMPP 'to' attribute (user@host)
      MUST be mapped to the CPP\n      \"target parameter\" field (pres:user@host).
      \ The XMPP-CPIM gateway\n      MUST append the \"pres:\" Presence URI scheme
      to the front of the\n      address.\n   o  The CPP \"duration parameter\" MUST
      be set to zero.\n   o  The XMPP 'id' attribute SHOULD be mapped to the CPP \"TransID\"\n
      \     field.\n   If the target parameter (XMPP \"to\" address) does not refer
      to a valid\n   presentity, the XMPP-CPIM gateway MUST return an <item-not-found/>\n
      \  stanza error to the XMPP entity.\n   Upon receiving the presence stanza of
      type \"unsubscribe\" from the\n   XMPP entity, the XMPP-CPIM gateway MUST NOT
      send further presence\n   notifications to the XMPP entity.\n"
    title: 6.4.  Unsubscribing
  - contents:
    - "6.5.  Cancelling a Subscription\n   If an XMPP entity wants to cancel a non-XMPP
      presentity's\n   subscription to the entity's presence through an XMPP-CPIM
      gateway,\n   it MUST send a presence stanza of type \"unsubscribed\" to the
      target\n   presentity.  The syntax mapping is as follows:\n   o  The XMPP 'from'
      attribute (user@host) MUST be mapped to the CPP\n      \"watcher parameter\"
      field (pres:user@host).  The XMPP-CPIM gateway\n      MUST add the \"pres:\"
      Presence URI scheme to the front of the\n      address.\n   o  The XMPP 'to'
      attribute (user@host) MUST be mapped to the CPP\n      \"target parameter\"
      field (pres:user@host).  The XMPP-CPIM gateway\n      MUST add the \"pres:\"
      Presence URI scheme to the front of the\n      address.\n   o  The CPP \"duration
      parameter\" MUST be set to zero.\n   o  The XMPP 'id' attribute SHOULD be mapped
      to the CPP \"TransID\"\n      field.\n   Upon receiving the presence stanza
      of type \"unsubscribed\" from the\n   XMPP entity, the XMPP-CPIM gateway MUST
      NOT send further presence\n   notifications to the watcher presentity.\n"
    title: 6.5.  Cancelling a Subscription
  title: 6.  XMPP-CPIM Gateway as Presence Service
- contents:
  - "7.  Security Considerations\n   Detailed security considerations for instant
    messaging and presence\n   protocols are given in [IMP-REQS], specifically in
    Sections 5.1\n   through 5.4.\n   This document specifies methods for exchanging
    instant messages and\n   presence information through a gateway that implements
    [CPIM] and\n   [CPP].  Such a gateway MUST be compliant with the minimum security\n
    \  requirements of the instant messaging and presence protocols with\n   which
    it interfaces.  The introduction of gateways to the security\n   model of instant
    messaging and presence in RFC 2779 also introduces\n   some new risks.  In particular,
    end-to-end security properties\n   (especially confidentiality and integrity)
    between instant messaging\n   and presence user agents that interface through
    an XMPP-CPIM gateway\n   can be provided only if common formats are supported;
    these formats\n   are specified fully in [XMPP-E2E].\n"
  title: 7.  Security Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [CPIM]       Peterson, J., \"Common Profile
      for Instant Messaging\n                (CPIM)\", RFC 3860, August 2004.\n   [CPP]
      \       Peterson, J., \"Common Profile for Presence (CPP)\", RFC\n                3859,
      August 2004.\n   [IMP-MODEL]  Day, M., Rosenberg, J., and H. Sugano, \"A Model
      for\n                Presence and Instant Messaging\", RFC 2778, February\n
      \               2000.\n   [IMP-REQS]   Day, M., Aggarwal, S., Mohr, G., and
      J. Vincent,\n                \"Instant Messaging / Presence Protocol Requirements\",\n
      \               RFC 2779, February 2000.\n   [MIME]       Freed, N. and N. Borenstein,
      \"Multipurpose Internet Mail\n                Extensions (MIME) Part One: Format
      of Internet Message\n                Bodies\", RFC 2045, November 1996.\n   [MSGFMT]
      \    Klyne, G. and D. Atkins, \"Common Presence and Instant\n                Messaging
      (CPIM): Message Format\", RFC 3862, August\n                2004.\n   [PIDF]
      \      Sugano, H., Fujimoto, S., Klyne, G., Bateman, A., Carr,\n                W.,
      and J. Peterson, \"Presence Information Data Format\n                (PIDF)\",
      RFC 3863, August 2004.\n   [STRINGPREP] Hoffman, P. and M. Blanchet, \"Preparation
      of\n                Internationalized Strings (stringprep)\", RFC 3454,\n                December
      2002.\n   [TERMS]      Bradner, S., \"Key words for use in RFCs to Indicate\n
      \               Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [URL-GUIDE]
      \ Masinter, L., Alvestrand, H., Zigmond, D., and R. Petke,\n                \"Guidelines
      for new URL Schemes\", RFC 2718, November\n                1999.\n   [US-ASCII]
      \  Cerf, V., \"ASCII format for network interchange\", RFC\n                20,
      October 1969.\n   [UTF-8]      Yergeau, F., \"UTF-8, a transformation format
      of ISO\n                10646\", STD 63, RFC 3629, November 2003.\n   [XMPP-CORE]
      \ Saint-Andre, P., Ed., \"Extensible Messaging and Presence\n                Protocol
      (XMPP): Core\", RFC 3920, October 2004.\n   [XMPP-E2E]   Saint-Andre, P., Ed.,
      \"End-to-End Signing and Object\n                Encryption in the Extensible
      Messaging and Presence\n                Protocol (XMPP)\", RFC 3923, October
      2004.\n   [XMPP-IM]    Saint-Andre (ed.), P., \"Extensible Messaging and\n                Presence
      Protocol (XMPP): Instant Messaging and\n                Presence\", RFC 3921,
      October 2004.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC2822]    Resnick, P., Ed., \"Internet
      Message Format\", RFC 2822,\n                April 2001.\n   [MIMETYPES]  Freed,
      N. and N. Borenstein, \"Multipurpose Internet Mail\n                Extensions
      (MIME) Part Two: Media Types\", RFC 2046,\n                November 1996.\n
      \  [XMPP-PIDF]  Saint-Andre, P., \"Transporting Presence Information\n                Data/Format
      (PIDF) over the Extensible Messaging and\n                Presence Protocol
      (XMPP)\", Work in Progress, February\n                2004.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Author's Address\n   Peter Saint-Andre\n   Jabber Software Foundation\n   EMail:
    stpeter@jabber.org\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/S HE\n   REPRESENTS OR IS
    SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING TASK
    FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED
    TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the IETF's procedures with respect
    to rights in IETF Documents can\n   be found in BCP 78 and BCP 79.\n   Copies
    of IPR disclosures made to the IETF Secretariat and any\n   assurances of licenses
    to be made available, or the result of an\n   attempt made to obtain a general
    license or permission for the use of\n   such proprietary rights by implementers
    or users of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
