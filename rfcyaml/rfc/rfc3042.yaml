- contents:
  - '          Enhancing TCP''s Loss Recovery Using Limited Transmit

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document proposes a new Transmission Control Protocol (TCP)\n
    \  mechanism that can be used to more effectively recover lost segments\n   when
    a connection's congestion window is small, or when a large\n   number of segments
    are lost in a single transmission window.  The\n   \"Limited Transmit\" algorithm
    calls for sending a new data segment in\n   response to each of the first two
    duplicate acknowledgments that\n   arrive at the sender.  Transmitting these segments
    increases the\n   probability that TCP can recover from a single lost segment
    using the\n   fast retransmit algorithm, rather than using a costly retransmission\n
    \  timeout.  Limited Transmit can be used both in conjunction with, and\n   in
    the absence of, the TCP selective acknowledgment (SACK) mechanism.\n"
  title: Abstract
- contents:
  - "1   Introduction\n   A number of researchers have observed that TCP's loss recovery\n
    \  strategies do not work well when the congestion window at a TCP\n   sender
    is small.  This can happen, for instance, because there is\n   only a limited
    amount of data to send, or because of the limit\n   imposed by the receiver-advertised
    window, or because of the\n   constraints imposed by end-to-end congestion control
    over a\n   connection with a small bandwidth-delay product\n   [Riz96,Mor97,BPS+98,Bal98,LK98].
    \ When a TCP detects a missing\n   segment, it enters a loss recovery phase using
    one of two methods.\n   First, if an acknowledgment (ACK) for a given segment
    is not received\n   in a certain amount of time a retransmission timeout occurs
    and the\n   segment is resent [RFC793,PA00].  Second, the \"Fast Retransmit\"\n
    \  algorithm resends a segment when three duplicate ACKs arrive at the\n   sender
    [Jac88,RFC2581].  However, because duplicate ACKs from the\n   receiver are also
    triggered by packet reordering in the Internet, the\n   TCP sender waits for three
    duplicate ACKs in an attempt to\n   disambiguate segment loss from packet reordering.
    \ Once in a loss\n   recovery phase, a number of techniques can be used to retransmit
    lost\n   segments, including slow start-based recovery or Fast Recovery\n   [RFC2581],
    NewReno [RFC2582], and loss recovery based on selective\n   acknowledgments (SACKs)
    [RFC2018,FF96].\n   TCP's retransmission timeout (RTO) is based on measured round-trip\n
    \  times (RTT) between the sender and receiver, as specified in [PA00].\n   To
    prevent spurious retransmissions of segments that are only delayed\n   and not
    lost, the minimum RTO is conservatively chosen to be 1\n   second.  Therefore,
    it behooves TCP senders to detect and recover\n   from as many losses as possible
    without incurring a lengthy timeout\n   when the connection remains idle.  However,
    if not enough duplicate\n   ACKs arrive from the receiver, the Fast Retransmit
    algorithm is never\n   triggered---this situation occurs when the congestion window
    is small\n   or if a large number of segments in a window are lost.  For instance,\n
    \  consider a congestion window (cwnd) of three segments.  If one\n   segment
    is dropped by the network, then at most two duplicate ACKs\n   will arrive at
    the sender.  Since three duplicate ACKs are required\n   to trigger Fast Retransmit,
    a timeout will be required to resend the\n   dropped packet.\n   [BPS+97] found
    that roughly 56% of retransmissions sent by a busy web\n   server were sent after
    the RTO expires, while only 44% were handled\n   by Fast Retransmit.  In addition,
    only 4% of the RTO-based\n   retransmissions could have been avoided with SACK,
    which of course\n   has to continue to disambiguate reordering from genuine loss.
    \ In\n   contrast, using the technique outlined in this document and in\n   [Bal98],
    25% of the RTO-based retransmissions in that dataset would\n   have likely been
    avoided.\n   The next section of this document outlines small changes to TCP\n
    \  senders that will decrease the reliance on the retransmission timer,\n   and
    thereby improve TCP performance when Fast Retransmit is not\n   triggered.  These
    changes do not adversely affect the performance of\n   TCP nor interact adversely
    with other connections, in other\n   circumstances.\n"
  - contents:
    - "1.1 Terminology\n   In this document, he key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \"MAY\",\n   AND \"OPTIONAL\" are to be interpreted as described in RFC 2119
      [1] and\n   indicate requirement levels for protocols.\n"
    title: 1.1 Terminology
  title: 1   Introduction
- contents:
  - "2   The Limited Transmit Algorithm\n   When a TCP sender has previously unsent
    data queued for transmission\n   it SHOULD use the Limited Transmit algorithm,
    which calls for a TCP\n   sender to transmit new data upon the arrival of the
    first two\n   consecutive duplicate ACKs when the following conditions are\n   satisfied:\n
    \    * The receiver's advertised window allows the transmission of the\n       segment.\n
    \    * The amount of outstanding data would remain less than or equal\n       to
    the congestion window plus 2 segments.  In other words, the\n       sender can
    only send two segments beyond the congestion window\n       (cwnd).\n   The congestion
    window (cwnd) MUST NOT be changed when these new\n   segments are transmitted.
    \ Assuming that these new segments and the\n   corresponding ACKs are not dropped,
    this procedure allows the sender\n   to infer loss using the standard Fast Retransmit
    threshold of three\n   duplicate ACKs [RFC2581].  This is more robust to reordered
    packets\n   than if an old packet were retransmitted on the first or second\n
    \  duplicate ACK.\n   Note: If the connection is using selective acknowledgments
    [RFC2018],\n   the data sender MUST NOT send new segments in response to duplicate\n
    \  ACKs that contain no new SACK information, as a misbehaving receiver\n   can
    generate such ACKs to trigger inappropriate transmission of data\n   segments.
    \ See [SCWA99] for a discussion of attacks by misbehaving\n   receivers.\n   Limited
    Transmit follows the \"conservation of packets\" congestion\n   control principle
    [Jac88].  Each of the first two duplicate ACKs\n   indicate that a segment has
    left the network.  Furthermore, the\n   sender has not yet decided that a segment
    has been dropped and\n   therefore has no reason to assume that the current congestion
    control\n   state is inaccurate.  Therefore, transmitting segments does not\n
    \  deviate from the spirit of TCP's congestion control principles.\n   [BPS99]
    shows that packet reordering is not a rare network event.\n   [RFC2581] does not
    provide for sending of data on the first two\n   duplicate ACKs that arrive at
    the sender.  This causes a burst of\n   segments to be sent when an ACK for new
    data does arrive following\n   packet reordering.  Using Limited Transmit, data
    packets will be\n   clocked out by incoming ACKs and therefore transmission will
    not be\n   as bursty.\n   Note: Limited Transmit is implemented in the ns simulator
    [NS].\n   Researchers wishing to investigate this mechanism further can do so\n
    \  by enabling \"singledup_\" for the given TCP connection.\n"
  title: 2   The Limited Transmit Algorithm
- contents:
  - "3   Related Work\n   Deployment of Explicit Congestion Notification (ECN) [Flo94,RFC2481]\n
    \  may benefit connections with small congestion window sizes [SA00].\n   ECN
    provides a method for indicating congestion to the end-host\n   without dropping
    segments.  While some segment drops may still occur,\n   ECN may allow TCP to
    perform better with small congestion window\n   sizes because the sender can avoid
    many of the Fast Retransmits and\n   Retransmit Timeouts that would otherwise
    have been needed to detect\n   dropped segments [SA00].\n   When ECN-enabled TCP
    traffic competes with non-ECN-enabled TCP\n   traffic, ECN-enabled traffic can
    receive up to 30% higher goodput.\n   For bulk transfers, the relative performance
    benefit of ECN is\n   greatest when on average each flow has 3-4 outstanding packets
    during\n   each round-trip time [ZQ00].  This should be a good estimate for the\n
    \  performance impact of a flow using Limited Transmit, since both ECN\n   and
    Limited Transmit reduce the reliance on the retransmission timer\n   for signaling
    congestion.\n   The Rate-Halving congestion control algorithm [MSML99] uses a
    form of\n   limited transmit, as it calls for transmitting a data segment on\n
    \  every second duplicate ACK that arrives at the sender.  The algorithm\n   decouples
    the decision of what to send from the decision of when to\n   send.  However,
    similar to Limited Transmit the algorithm will always\n   send a new data segment
    on the second duplicate ACK that arrives at\n   the sender.\n"
  title: 3   Related Work
- contents:
  - "4   Security Considerations\n   The additional security implications of the changes
    proposed in this\n   document, compared to TCP's current vulnerabilities, are
    minimal.\n   The potential security issues come from the subversion of end-to-end\n
    \  congestion control from \"false\" duplicate ACKs, where a \"false\"\n   duplicate
    ACK is a duplicate ACK that does not actually acknowledge\n   new data received
    at the TCP receiver.  False duplicate ACKs could\n   result from duplicate ACKs
    that are themselves duplicated in the\n   network, or from misbehaving TCP receivers
    that send false duplicate\n   ACKs to subvert end-to-end congestion control [SCWA99,RFC2581].\n
    \  When the TCP data receiver has agreed to use the SACK option, the TCP\n   data
    sender has fairly strong protection against false duplicate\n   ACKs.  In particular,
    with SACK, a duplicate ACK that acknowledges\n   new data arriving at the receiver
    reports the sequence numbers of\n   that new data.  Thus, with SACK, the TCP sender
    can verify that an\n   arriving duplicate ACK acknowledges data that the TCP sender
    has\n   actually sent, and for which no previous acknowledgment has been\n   received,
    before sending new data as a result of that acknowledgment.\n   For further protection,
    the TCP sender could keep a record of packet\n   boundaries for transmitted data
    packets, and recognize at most one\n   valid acknowledgment for each packet (e.g.,
    the first acknowledgment\n   acknowledging the receipt of all of the sequence
    numbers in that\n   packet).\n   One could imagine some limited protection against
    false duplicate\n   ACKs for a non-SACK TCP connection, where the TCP sender keeps
    a\n   record of the number of packets transmitted, and recognizes at most\n   one
    acknowledgment per packet to be used for triggering the sending\n   of new data.
    \ However, this accounting of packets transmitted and\n   acknowledged would require
    additional state and extra complexity at\n   the TCP sender, and does not seem
    necessary.\n   The most important protection against false duplicate ACKs comes
    from\n   the limited potential of duplicate ACKs in subverting end-to-end\n   congestion
    control.  There are two separate cases to consider: when\n   the TCP sender receives
    less than a threshold number of duplicate\n   ACKs, and when the TCP sender receives
    at least a threshold number of\n   duplicate ACKs.  In the latter case a TCP with
    Limited Transmit will\n   behave essentially the same as a TCP without Limited
    Transmit in that\n   the congestion window will be halved and a loss recovery
    period will\n   be initiated.\n   When a TCP sender receives less than a threshold
    number of duplicate\n   ACKs a misbehaving receiver could send two duplicate ACKs
    after each\n   regular ACK.  One might imagine that the TCP sender would send
    at\n   three times its allowed sending rate.  However, using Limited\n   Transmit
    as outlined in section 2 the sender is only allowed to\n   exceed the congestion
    window by less than the duplicate ACK threshold\n   (of three segments), and thus
    would not send a new packet for each\n   duplicate ACK received.\n"
  title: 4   Security Considerations
- contents:
  - "Acknowledgments\n   Bill Fenner, Jamshid Mahdavi and the Transport Area Working
    Group\n   provided valuable feedback on an early version of this document.\n"
  title: Acknowledgments
- contents:
  - "References\n   [Bal98]   Hari Balakrishnan.  Challenges to Reliable Data Transport\n
    \            over Heterogeneous Wireless Networks.  Ph.D. Thesis,\n             University
    of California at Berkeley, August 1998.\n   [BPS+97]  Hari Balakrishnan, Venkata
    Padmanabhan, Srinivasan Seshan,\n             Mark Stemm, and Randy Katz.  TCP
    Behavior of a Busy Web\n             Server:  Analysis and Improvements.  Technical
    Report\n             UCB/CSD-97-966, August 1997.  Available from\n             http://nms.lcs.mit.edu/~hari/papers/csd-97-966.ps.
    \ (Also\n             in Proc. IEEE INFOCOM Conf., San Francisco, CA, March\n
    \            1998.)\n   [BPS99]   Jon Bennett, Craig Partridge, Nicholas Shectman.
    \ Packet\n             Reordering is Not Pathological Network Behavior.  IEEE/ACM\n
    \            Transactions on Networking, December 1999.\n   [FF96]    Kevin Fall,
    Sally Floyd.  Simulation-based Comparisons of\n             Tahoe, Reno, and SACK
    TCP.  ACM Computer Communication\n             Review, July 1996.\n   [Flo94]
    \  Sally Floyd.  TCP and Explicit Congestion Notification.\n             ACM Computer
    Communication Review, October 1994.\n   [Jac88]   Van Jacobson.  Congestion Avoidance
    and Control.  ACM\n             SIGCOMM 1988.\n   [LK98]    Dong Lin, H.T. Kung.
    \ TCP Fast Recovery Strategies:\n             Analysis and Improvements.  Proceedings
    of InfoCom, March\n             1998.\n   [MSML99]  Matt Mathis, Jeff Semke, Jamshid
    Mahdavi, Kevin Lahey.  The\n             Rate Halving Algorithm, 1999. URL:\n
    \            http://www.psc.edu/networking/rate_halving.html.\n   [Mor97]   Robert
    Morris.  TCP Behavior with Many Flows.  Proceedings\n             of the Fifth
    IEEE International Conference on Network\n             Protocols.  October 1997.\n
    \  [NS]      Ns network simulator.  URL: http://www.isi.edu/nsnam/.\n   [PA00]
    \   Paxson, V. and M. Allman, \"Computing TCP's Retransmission\n             Timer\",
    RFC 2988, November 2000.\n   [Riz96]   Luigi Rizzo.  Issues in the Implementation
    of Selective\n             Acknowledgments for TCP.  January, 1996.  URL:\n             http://www.iet.unipi.it/~luigi/selack.ps\n
    \  [SA00]    Hadi Salim, J. and U. Ahmed, \"Performance Evaluation of\n             Explicit
    Congestion Notification (ECN) in IP Networks\", RFC\n             2884, July 2000.\n
    \  [SCWA99]  Stefan Savage, Neal Cardwell, David Wetherall, Tom\n             Anderson.
    \ TCP Congestion Control with a Misbehaving\n             Receiver.  ACM Computer
    Communications Review, October\n             1999.\n   [RFC793]  Postel, J., \"Transmission
    Control Protocol\", STD 7, RFC\n             793, September 1981.\n   [RFC2018]
    Mathis, M., Mahdavi, J., Floyd, S. and A. Romanow, \"TCP\n             Selective
    Acknowledgement Options\", RFC 2018, October 1996.\n   [RFC2119] Bradner, S.,
    \"Key words for use in RFCs to Indicate\n             Requirement Levels\", BCP
    14, RFC 2119, March 1997.\n   [RFC2481] Ramakrishnan, K. and S. Floyd, \"A Proposal
    to Add Explicit\n             Congestion Notification (ECN) to IP\", RFC 2481,
    January\n             1999.\n   [RFC2581] Allman, M., Paxson, V. and W. Stevens,
    \"TCP Congestion\n             Control\", RFC 2581, April 1999.\n   [RFC2582]
    Floyd, S. and T. Henderson, \"The NewReno Modification to\n             TCP's
    Fast Recovery Algorithm\", RFC 2582, April 1999.\n   [ZQ00]    Yin Zhang and Lili
    Qiu, Understanding the End-to-End\n             Performance Impact of RED in a
    Heterogeneous Environment,\n             Cornell CS Technical Report 2000-1802,
    July 2000.  URL\n             http://www.cs.cornell.edu/yzhang/papers.htm.\n"
  title: References
- contents:
  - "Authors' Addresses\n   Mark Allman\n   NASA Glenn Research Center/BBN Technologies\n
    \  Lewis Field\n   21000 Brookpark Rd.  MS 54-5\n   Cleveland, OH  44135\n   Phone:
    +1-216-433-6586\n   Fax:   +1-216-433-8705\n   EMail: mallman@grc.nasa.gov\n   http://roland.grc.nasa.gov/~mallman\n
    \  Hari Balakrishnan\n   Laboratory for Computer Science\n   545 Technology Square\n
    \  Massachusetts Institute of Technology\n   Cambridge, MA 02139\n   EMail: hari@lcs.mit.edu\n
    \  http://nms.lcs.mit.edu/~hari/\n   Sally Floyd\n   AT&T Center for Internet
    Research at ICSI (ACIRI)\n   1947 Center St, Suite 600\n   Berkeley, CA 94704\n
    \  Phone: +1-510-666-2989\n   EMail: floyd@aciri.org\n   http://www.aciri.org/floyd/\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
