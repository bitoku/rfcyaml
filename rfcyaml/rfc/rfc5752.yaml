- contents:
  - '       Multiple Signatures in Cryptographic Message Syntax (CMS)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Cryptographic Message Syntax (CMS) SignedData includes the SignerInfo\n
    \  structure to convey per-signer information.  SignedData supports\n   multiple
    signers and multiple signature algorithms per signer with\n   multiple SignerInfo
    structures.  If a signer attaches more than one\n   SignerInfo, there are concerns
    that an attacker could perform a\n   downgrade attack by removing the SignerInfo(s)
    with the 'strong'\n   algorithm(s).  This document defines the multiple-signatures\n
    \  attribute, its generation rules, and its processing rules to allow\n   signers
    to convey multiple SignerInfo objects while protecting\n   against downgrade attacks.
    \ Additionally, this attribute may assist\n   during periods of algorithm migration.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5752.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Conventions Used in This Document ..........................3\n   2.
    Rationale .......................................................3\n      2.1.
    Attribute Design Requirements ..............................4\n   3. Multiple
    Signature Indication ...................................5\n   4. Message Generation
    and Processing ...............................6\n      4.1. SignedData Type ............................................6\n
    \     4.2. EncapsulatedContentInfo Type ...............................7\n      4.3.
    SignerInfo Type ............................................7\n      4.4. Message
    Digest Calculation Process .........................7\n           4.4.1. multiple-signatures
    Signed Attribute Generation .....7\n           4.4.2. Message Digest Calculation
    Process ..................7\n      4.5. Signature Generation Process ...............................8\n
    \     4.6. Signature Verification Process .............................8\n   5.
    Signature Evaluation Processing .................................8\n      5.1.
    Evaluation of a SignerInfo Object ..........................9\n      5.2. Evaluation
    of a SignerInfo Set .............................9\n      5.3. Evaluation of a
    SignedData Set ............................10\n   6. Security Considerations ........................................11\n
    \  7. References .....................................................11\n      7.1.
    Normative References ......................................11\n      7.2. Informative
    References ....................................12\n   Appendix A. ASN.1 Module...........................................13\n
    \  Appendix B. Background.............................................15\n      B.1.
    Attacks....................................................15\n      B.2. Hashes
    in CMS..............................................15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Cryptographic Message Syntax (CMS; see [CMS]) defined
    SignerInfo\n   to provide data necessary for relying parties to verify the signer's\n
    \  digital signature, which is also included in the SignerInfo\n   structure.
    \ Signers include more than one SignerInfo in a SignedData\n   if they use different
    digest or signature algorithms.  Each\n   SignerInfo exists independently and
    new SignerInfo structures can be\n   added or existing ones removed without perturbing
    the remaining\n   signatures.\n   The concern is that if an attacker successfully
    attacked a hash or\n   signature algorithm, the attacker could remove all SignerInfo\n
    \  structures except the SignerInfo with the successfully attacked hash\n   or
    signature algorithm.  The relying party is then left with the\n   attacked SignerInfo
    even though the relying party supported more than\n   just the attacked hash or
    signature algorithm.\n   A solution is to have signers include a pointer to all
    the signer's\n   SignerInfo structures.  If an attacker removes any SignerInfo,
    then\n   relying parties will be aware that an attacker has removed one or\n   more
    SignerInfo objects.\n   Note that this attribute ought not be confused with the\n
    \  countersignature attribute (see Section 11.4 of [CMS]) as this is not\n   intended
    to sign over an existing signature.  Rather, it is to\n   provide a pointer to
    additional signatures by the signer that are all\n   at the same level.  That
    is, countersignature provides a serial\n   signature while the attribute defined
    herein provides pointers to\n   parallel signatures by the same signer.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [RFC2119].\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Rationale\n   The rationale for this specification is to protect against
    downgrade\n   attacks that remove the 'strong' signature to leave the 'weak'\n
    \  signature, which has presumably been successfully attacked.  If a CMS\n   SignedData
    object has multiple SignerInfo objects, then the attacker,\n   whether it be Alice,
    Bob, or Mallory, can remove a SignerInfo object\n   without the relying party
    being aware that more than one was\n   generated.\n   Removal of a SignerInfo
    does not render the signature invalid nor\n   does it constitute an error.  In
    the following scenario, a signer\n   generates a SignedData with two SignerInfo
    objects, one with a 'weak'\n   algorithm and one with a 'strong' algorithm; there
    are three types of\n   relying parties:\n   1) Those that support only a 'weak'
    algorithm.  If both SignerInfo\n      objects are present, the relying party processes
    the algorithm it\n      supports.  If both SignerInfo objects are not present,
    the relying\n      party can easily determine that another SignerInfo has been\n
    \     removed, but not changed.  In both cases, if the 'weak' signature\n      verifies,
    the relying party MAY consider the signature valid.\n   2) Those that support
    only a 'strong' algorithm.  If both SignerInfo\n      objects are present, the
    relying party processes the algorithm it\n      supports.  If both SignerInfo
    objects are not present, the relying\n      party can easily determine that another
    SignerInfo has been\n      removed, but the relying party doesn't care.  In both
    cases, if\n      the 'strong' signature verifies, the relying party MAY consider\n
    \     the signature valid.\n   3) Those that support both a 'weak' algorithm and
    a 'strong'\n      algorithm.  If both SignerInfo objects are present, the relying\n
    \     party processes both algorithms.  If both SignerInfo objects are\n      not
    present, the relying party can easily determine that another\n      SignerInfo
    has been removed.  In both cases, if the 'strong'\n      and/or 'weak' signatures
    verify, the relying party MAY consider\n      the signature valid.  (Policy may
    dictate that both signatures are\n      required to validate if present.)\n   Local
    policy MAY dictate that the removal of the 'strong' algorithm\n   results in an
    invalid signature.  See Section 5 for further\n   processing.\n"
  - contents:
    - "2.1.  Attribute Design Requirements\n   The attribute will have the following
      characteristics:\n   1) Use CMS attribute structure;\n   2) Be computable before
      any signatures are applied;\n   3) Contain enough information to identify individual
      signatures\n      (i.e., a particular SignerInfo); and\n   4) Contain enough
      information to resist collision, preimage, and\n      second preimage attacks.\n"
    title: 2.1.  Attribute Design Requirements
  title: 2.  Rationale
- contents:
  - "3.  Multiple Signature Indication\n   The multiple-signatures attribute type
    specifies a pointer to a\n   signer's other multiple-signatures attribute(s).
    \ For example, if a\n   signer applies three signatures, there must be two attribute
    values\n   for multiple-signatures in each SignerInfo.  The 1st SignerInfo\n   object
    points to the 2nd and 3rd SignerInfo objects.  The 2nd\n   SignerInfo object points
    to the 1st and 3rd SignerInfo objects.  The\n   3rd SignerInfo object points to
    the 1st and 2nd SignerInfo objects.\n   The multiple-signatures attribute MUST
    be a signed attribute.  The\n   number of attribute values included in a SignerInfo
    is the number of\n   signatures applied by a signer less one.  This attribute
    is multi-\n   valued, and there MAY be more than one AttributeValue present.  The\n
    \  following object identifier identifies the multiple-signatures\n   attribute:\n
    \     id-aa-multipleSignatures OBJECT IDENTIFIER ::= {\n        iso(1) member-body(2)
    us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n        id-aa(16) 51 }\n   multiple-signatures
    attribute values have the ASN.1 type\n   MultipleSignatures:\n      MultipleSignatures
    ::= SEQUENCE {\n        bodyHashAlg     DigestAlgorithmIdentifier,\n        signAlg
    \        SignatureAlgorithmIdentifier,\n        signAttrsHash   SignAttrsHash,\n
    \       cert            ESSCertIDv2 OPTIONAL}\n      SignAttrsHash ::= SEQUENCE
    {\n        algID            DigestAlgorithmIdentifier,\n        hash             OCTET
    STRING }\n   The fields in MultipleSignatures have the following meaning:\n   -
    bodyHashAlg includes the digest algorithmIdentifier for the\n     referenced multiple-signatures
    attribute.\n   - signAlg includes the signature algorithmIdentifier for the\n
    \    referenced multiple-signatures attribute.\n   - signAttrsHash has two fields:\n
    \    -- algId MUST match the digest algorithm for the SignerInfo in\n        which
    this multiple-signatures attribute value is placed.\n     -- hash is the hash
    value of the signedAttrs (see Section 4.3).\n   - cert is optional.  It identities
    the certificate used to sign the\n     SignerInfo that contains the other multiple-signatures\n
    \    attribute(s).  It MUST be present if the fields in the other\n     multiple-signatures
    attribute(s) are the same.\n   The following is an example:\n      SignedData\n
    \       DigestAlg=sha1,sha256\n        SignerInfo1                SignerInfo2\n
    \         digestAlg=sha1             digestAlg=sha256\n          signatureAlg=dsawithsha1
    \  signatureAlg=ecdsawithsha256\n          signedAttrs=               signedAttrs=\n
    \           signingTime1               signingTime1\n            messageDigest1
    \            messageDigest2\n            multiSig1=                 multiSig2=\n
    \             bodyHash=sha256           bodyHash=sha1\n              signAlg=ecdsawithsha256
    \  signAlg=dsawithsha1\n                signAttrsHash=          signAttrsHash=\n
    \               algID=sha1              algID=sha256\n                hash=value1
    \            hash=value2\n"
  title: 3.  Multiple Signature Indication
- contents:
  - "4.  Message Generation and Processing\n   The following are the additional procedures
    for message generation\n   when using the multiple-signatures attribute.  These
    paragraphs track\n   with Sections 5.1-5.6 in [CMS].\n"
  - contents:
    - "4.1.  SignedData Type\n   The following steps MUST be followed by a signer
      when generating\n   SignedData:\n   - The signer MUST indicate the CMS version.\n
      \  - The signer SHOULD include the digest algorithm used in\n     SignedData.digestAlgorithms,
      if the digest algorithm's identifier\n     is not already present.\n   - The
      signer MUST include the encapContentInfo.  Note that the\n     encapContentInfo
      is the same for all signers in this SignedData.\n   - The signer SHOULD add
      certificates sufficient to contain\n     certificate paths from a recognized
      \"root\" or \"top-level\n     certification authority\" to the signer, if the
      signer's\n     certificates are not already present.\n   - The signer MAY include
      the Certificate Revocation Lists (CRLs)\n     necessary to validate the digital
      signature, if the CRLs are not\n     already present.\n   - The signer MUST:\n
      \    -- Retain the existing signerInfo objects.\n     -- Include their signerInfo
      object(s).\n"
    title: 4.1.  SignedData Type
  - contents:
    - "4.2.  EncapsulatedContentInfo Type\n   The procedures for generating EncapsulatedContentInfo
      are as\n   specified in Section 5.2 of [CMS].\n"
    title: 4.2.  EncapsulatedContentInfo Type
  - contents:
    - "4.3.  SignerInfo Type\n   The procedures for generating SignerInfo are as specified
      in Section\n   4.4.1 of [CMS] with the following addition:\n   The signer MUST
      include the multiple-signatures attribute in\n   signedAttrs.\n"
    title: 4.3.  SignerInfo Type
  - contents:
    - '4.4.  Message Digest Calculation Process

      '
    - contents:
      - "4.4.1.  multiple-signatures Signed Attribute Generation\n   The procedure
        for generating the multiple-signatures signed attribute\n   is as follows:\n
        \  1) All other signed attributes are placed in the respective\n      SignerInfo
        structures, but the signatures are not yet computed for\n      the SignerInfo.\n
        \  2) The multiple-signatures attributes are added to each of the\n      SignerInfo
        structures with the SignAttrsHash.hash field containing\n      a zero-length
        octet string.\n   3) The correct SignAttrsHash.hash value is computed for
        each of the\n      SignerInfo structures.\n   4) After all hash values have
        been computed, the correct hash values\n      are placed into their respective
        SignAttrsHash.hash fields.\n"
      title: 4.4.1.  multiple-signatures Signed Attribute Generation
    - contents:
      - "4.4.2.  Message Digest Calculation Process\n   The remaining procedures for
        generating the message-digest attribute\n   are as specified in Section 5.4
        of [CMS].\n"
      title: 4.4.2.  Message Digest Calculation Process
    title: 4.4.  Message Digest Calculation Process
  - contents:
    - "4.5.  Signature Generation Process\n   The procedures for signature generation
      are as specified in Section\n   5.5 of [CMS].\n"
    title: 4.5.  Signature Generation Process
  - contents:
    - "4.6.  Signature Verification Process\n   The procedures for signature verification
      are as specified in Section\n   5.6 of [CMS] with the following addition:\n
      \  If the SignedData signerInfo includes the multiple-signatures\n   attribute,
      the attribute's values must be calculated as described in\n   Section 4.4.1.\n
      \  For every SignerInfo to be considered present for a given signer, the\n   number
      of MultipleSignatures AttributeValue(s) present in a given\n   SignerInfo MUST
      equal the number of SignerInfo objects for that\n   signer less one and the
      hash value present in each of the\n   MultipleSignatures AttributeValue(s) MUST
      match the output of the\n   message digest calculation from Section 4.4.1 for
      each SignerInfo.\n   The hash corresponding to the n-th SignerInfo must match
      the value in\n   the multiple-signatures attribute that points to the n-th SignerInfo\n
      \  present in all other SignerInfo objects.\n"
    title: 4.6.  Signature Verification Process
  title: 4.  Message Generation and Processing
- contents:
  - "5.  Signature Evaluation Processing\n   This section describes recommended processing
    of signatures when\n   there are more than one SignerInfo present in a message.
    \ This may be\n   due to either multiple SignerInfo objects being present in a
    single\n   SignedData object or multiple SignerData objects embedded in each\n
    \  other.\n   The text in this section is non-normative.  The processing described\n
    \  is highly recommended, but is not forced.  Changes in the processing\n   that
    have the same results with somewhat different orders of\n   processing is sufficient.\n
    \  Order of operations:\n   1) Evaluate each SignerInfo object independently.\n
    \  2) Combine the results of all SignerInfo objects at the same level\n      (i.e.,
    attached to the same SignerData object).\n   3) Combine the results of the nested
    SignerData objects.  Note that\n      this should ignore the presence of other
    CMS objects between the\n      SignedData objects.\n"
  - contents:
    - "5.1.  Evaluation of a SignerInfo Object\n   When evaluating a SignerInfo object,
      there are three different pieces\n   that need to be examined.\n   The first
      piece is the mathematics of the signature itself (i.e., can\n   one actually
      successfully do the computations and get the correct\n   answer?).  This result
      is one of three results.  The mathematics\n   succeeds, the mathematics fails,
      or the mathematics cannot be\n   evaluated.  The type of things that lead to
      the last state are non-\n   implementation of an algorithm or required inputs,
      such as the public\n   key, are missing.\n   The second piece is the validation
      of the source of the public key.\n   For CMS, this is generally determined by
      extracting the public key\n   from a certificate.  The certificate needs to
      be evaluated.  This is\n   done by the procedures outlined in [PROFILE].  In
      addition to the\n   processing described in that document, there may be additional\n
      \  requirements on certification path processing that are required by\n   the
      application in question.  One such set of additional processing\n   is described
      in [SMIME-CERT].  One piece of information that is part\n   of this additional
      certificate path processing is local and\n   application policy.  The output
      of this processing can actually be\n   one of four different states:  Success,
      Failure, Indeterminate, and\n   Warning.  The first three states are described
      in [PROFILE]; Warning\n   would be generated when it is possible that some information
      is\n   currently acceptable, but may not be acceptable either in the near\n
      \  future or under some circumstances.\n   The third piece of the validation
      is local and application policy as\n   applied to the contents of the SignerInfo
      object.  This would cover\n   such issues as the requirements on mandatory signed
      attributes or\n   requirements on signature algorithms.\n"
    title: 5.1.  Evaluation of a SignerInfo Object
  - contents:
    - "5.2.  Evaluation of a SignerInfo Set\n   Combining the results of the individual
      SignerInfo objects into a\n   result for a SignedData object requires knowledge
      of the results for\n   the individual SignerInfo objects, the required application
      policy,\n   and any local policies.  The default processing if no other rules
      are\n   applied should be:\n   1) Group the SignerInfo objects by the signer.\n
      \  2) Take the best result from each signer.\n   3) Take the worst result from
      all of the different signers; this is\n      the result for the SignedData object.\n
      \  Application and local policy can affect each of the steps outlined\n   above.\n
      \  In Step 1:\n   - If the subject name or subject alternative name(s) cannot
      be used\n     to determine if two SignerInfo objects were created by the same\n
      \    identity, then applications need to specify how such matching is to\n     be
      done.  As an example, the S/MIME message specification [SMIME-\n     MSG] could
      say that as long as the same rfc822Name exists in either\n     the subject name
      or the subject alt name they are the same\n     identity.  This would be true
      even if other information that did\n     not match existed in these fields.\n
      \  - Some applications may specify that this step should be skipped;\n     this
      has the effect of making each SignerInfo object independent of\n     all other
      SignerInfo objects even if the signing identity is the\n     same.  Applications
      that specify this need to be aware that\n     algorithm rollover will not work
      correctly in this case.\n   In Step 2:\n   - The major policy implication at
      this step is the treatment of and\n     order for the indeterminate states.
      \ In most cases, this state\n     would be placed between the failure and warning
      states.  Part of\n     the issue is the question of having a multi-state or
      a binary\n     answer as to success or failure of an evaluation.  Not every\n
      \    application can deal with the statement \"try again later\".  It may\n
      \    also be dependent on what the reason for the indeterminate state\n     is.
      \ It makes more sense to try again later if the problem is that\n     a CRL
      cannot be found than if you are not able to evaluate the\n     algorithm for
      the signature.\n   In Step 3:\n   - The same policy implications from Step 2
      apply here.\n"
    title: 5.2.  Evaluation of a SignerInfo Set
  - contents:
    - "5.3.  Evaluation of a SignedData Set\n   Simple applications will generally
      use the worst single outcome\n   (success, unknown, failure) as the outcome
      for a set of SignedData\n   objects (i.e., one failure means the entire item
      fails).  However,\n   not all applications will want to have this behavior.\n
      \  A work flow application could work as follows:\n   The second signer will
      modify the original content, keep the original\n   signature, and then sign
      the message.  This means that only the\n   outermost signature is of significance
      during evaluation.  The second\n   signer is asserting that they successfully
      validated the inner\n   signature as part of its processing.\n   A Signed Mail
      application could work as follows:\n   If signatures are added for the support
      of [ESS] features, then the\n   fact that an outer layer signature cannot be
      validated can be treated\n   as a non-significant failure.  The only thing that
      matters is that\n   the originator signature is valid.  This means that all
      outer layer\n   signatures that fail can be stripped from the message prior
      to\n   display leaving only the inner-most valid signature to be displayed.\n"
    title: 5.3.  Evaluation of a SignedData Set
  title: 5.  Signature Evaluation Processing
- contents:
  - "6.  Security Considerations\n   Security considerations from the hash and signature
    algorithms used\n   to produce the SignerInfo apply.\n   If the hashing and signing
    operations are performed by different\n   entities, the entity creating the signature
    must ensure that the hash\n   comes from a \"trustworthy\" source.  This can be
    partially mitigated\n   by requiring that multiple hashes using different algorithms
    are\n   provided.\n   This attribute cannot be relied upon in the event that all
    of the\n   algorithms used in the signer attribute are 'cracked'.  It is not\n
    \  possible for a verifier to determine that a collision could not be\n   found
    that satisfies all of the algorithms.\n   Local policy and applications greatly
    affect signature processing.\n   The application of local policy and the requirements
    specific to an\n   application can both affect signature processing.  This means
    that a\n   signature valid in one context or location can fail validation in a\n
    \  different context or location.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use
      in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [CMS]         Housley, R., \"Cryptographic Message Syntax (CMS)\",
      RFC\n                 5652, September 2009.\n   [PROFILE]     Cooper, D., Santesson,
      S., Farrell, S., Boeyen, S.,\n                 Housley, R., and W. Polk, \"Internet
      X.509 Public Key\n                 Infrastructure Certificate and Certificate
      Revocation\n                 List (CRL) Profile\", RFC 5280, May 2008.\n   [SMIME-CERT]
      \ Ramsdell, B. and S. Turner, \"Secure/Multipurpose\n                 Internet
      Mail Extensions (S/MIME) Version 3.2\n                 Certificate Handling\",
      RFC 5750, January 2010.\n   [SMIME-MSG]   Ramsdell, B. and S. Turner, \"Secure/Multipurpose\n
      \                Internet Mail Extensions (S/MIME) Version 3.2 Message\n                 Specification\",
      RFC 5751, January 2010.\n   [ESS]         Hoffman, P., Ed., \"Enhanced Security
      Services for\n                 S/MIME\", RFC 2634, June 1999.\n   [ESSCertID]
      \  Schaad, J., \"Enhanced Security Services (ESS) Update:\n                 Adding
      CertID Algorithm Agility\", RFC 5035, August\n                 2007.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [ATTACK]      Hoffman, P. and B. Schneier,
      \"Attacks on Cryptographic\n                 Hashes in Internet Protocols\",
      RFC 4270, November 2005.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - 'Appendix A.  ASN.1 Module

    '
  - "MultipleSignatures-2008\n  { iso(1) member-body(2) us(840) rsadsi(113549)\n    pkcs(1)
    pkcs9(9) smime(16) modules(0)\n    id-mod-multipleSig-2008(34) }\n   DEFINITIONS
    IMPLICIT TAGS ::=\n   BEGIN\n"
  - '-- EXPORTS All

    '
  - '-- The types and values defined in this module are exported for use

    '
  - '-- in the other ASN.1 modules.  Other applications may use them for

    '
  - '-- their own purposes.

    '
  - 'IMPORTS

    '
  - "-- Imports from RFC 5652 [CMS], 12.1\n     DigestAlgorithmIdentifier, SignatureAlgorithmIdentifier\n
    \    FROM CryptographicMessageSyntax2004\n       { iso(1) member-body(2) us(840)
    rsadsi(113549)\n         pkcs(1) pkcs9(9) smime(16) modules(0) cms-2004(24) }\n"
  - "-- Imports from RFC 5035 [ESSCertID], Appendix A\n     ESSCertIDv2\n     FROM
    ExtendedSecurityServices-2006\n       { iso(1) member-body(2) us(840) rsadsi(113549)\n
    \        pkcs(1) pkcs9(9) smime(16) modules(0) id-mod-ess-2006(30) }\n"
  - ';

    '
  - '-- Section 3.0

    '
  - 'id-aa-multipleSignatures OBJECT IDENTIFIER ::= { iso(1) member-body(2)

    '
  - 'us(840) rsadsi(113549) pkcs(1) pkcs9(9) id-aa(2) 51 }

    '
  - "MultipleSignatures ::= SEQUENCE {\n  bodyHashAlg     DigestAlgorithmIdentifier,\n
    \ signAlg         SignatureAlgorithmIdentifier,\n  signAttrsHash   SignAttrsHash,\n
    \ cert            ESSCertIDv2 OPTIONAL }\n"
  - "SignAttrsHash ::= SEQUENCE {\n  algID            DigestAlgorithmIdentifier,\n
    \ hash             OCTET STRING }\n"
  - 'END -- of MultipleSignatures-2008

    '
  title: Appendix A.  ASN.1 Module
- contents:
  - "Appendix B.  Background\n   This is an informational appendix.  This appendix
    enumerates all\n   locations in CMS where hashes are used and the possible attacks
    on\n   those hash locations.\n"
  - contents:
    - "B.1.  Attacks\n   As noted in [ATTACK], the following types of resistance are
      needed\n   against known attacks:\n   1) Collision Resistance: Find x and y
      where x != y and H(x) = H(y)\n   2) Preimage Resistance: Given y, find x where
      H(x) = y\n   3) Second Preimage Resistance: Given y, find x where H(x) = H(y)\n
      \  Note:  It is known that a collision resistance attack is simpler than\n   a
      second preimage resistance attack, and it is presumed that a second\n   preimage
      resistance attack is simpler than a preimage attack.\n"
    title: B.1.  Attacks
  - contents:
    - "B.2.  Hashes in CMS\n   Within a SignerInfo there are two places where hashes
      are applied and\n   hence can be attacked: the body and the signed attributes.
      \ The\n   following outlines the entity that creates the hash, the entity that\n
      \  attacks the hash, and the type of resistance required:\n   1) Hash of the
      Body (i.e., the octets comprising the value of the\n      encapContentInfo.eContent
      OCTET STRING omitting the tag and length\n      octets, as per 5.4 of [CMS]).\n
      \     a) If Alice creates the body to be hashed, then:\n         i) Alice can
      attack the hash.  This attack requires a\n            successful collision resistance
      attack.\n        ii) Mallory can attack the hash.  This attack requires a\n
      \           successful second preimage resistance attack.\n      b) If Alice
      hashes a body provided by Bob, then:\n         i) Alice can attack the hash.
      \ This attack requires a\n            successful second preimage attack.\n        ii)
      Bob can attack the hash.  This attack requires a successful\n            Collision
      Resistance attack.  If Alice has the ability to\n            \"change\" the
      content of the body in some fashion, then this\n            attack requires
      a successful second preimage attack.  (One\n            example would be to
      use a keyed hash function.)\n       iii) Mallory can attack the hash.  This
      attack requires a\n            successful second preimage attack.\n      c)
      If Alice signs using a hash value provided by Bob (in this\n         case, Alice
      is presumed to never see the body in question),\n         then:\n         i)
      Alice can attack the hash.  This attack requires a\n            successful preimage
      attack.\n        ii) Bob can attack the hash.  This attack requires a successful\n
      \           collision resistance attack.  Unlike case (b), there is\n            nothing
      that Alice can do to upgrade the attack.\n       iii) Mallory can attack the
      hash.  This requires a successful\n            preimage attack if the content
      is unavailable to Mallory and\n            a successful second preimage attack
      if the content is\n            available to Mallory.\n   2) Hash of signed attributes
      (i.e., the complete Distinguished\n      Encoding Rules (DER) encoding of the
      SignedAttrs value contained\n      in the signedAttrs field, as per 5.4 of [CMS]).\n
      \     There is a difference between hashing the body and hashing the\n      SignedAttrs
      value in that one should not accept a sequence of\n      attributes to be signed
      from a third party.  In fact, one should\n      not accept attributes to be
      included in the signed attributes list\n      from a third party.  The attributes
      are about the signature you\n      are applying and not about the body.  If
      there is meta-information\n      that needs to be attached to the body by a
      third party, then they\n      need to provide their own signature and you need
      to add a\n      countersignature.  (Note: The fact that the signature is to
      be\n      used as a countersignature is a piece of information that should\n
      \     be accepted, but it does not directly provide an attribute that is\n      inserted
      in the signed attribute list.)\n      a) Alice can attack the hash.  This requires
      a successful\n         collision resistance attack.\n      b) Mallory can attack
      the hash.  This requires a successful second\n         preimage resistance attack.\n
      \     c) Bob can attack the hash and Bob controls the value of the\n         message
      digest attribute used.  This case is analogous to the\n         current attacks
      [ATTACK].  Bob can attack the hash value\n         generated by Alice based
      on a prediction of the signed\n         attributes and the hash algorithm Alice
      will be using to create\n         the signature.  If Bob successfully predicts
      these items, the\n         attack requires a successful collision resistance
      attack.  (It\n         is expected that if Alice uses a keyed hashing function
      as part\n         of the signature, this attack will be more difficult as Bob\n
      \        would have a harder time prediction the key value.)\n   It should be
      noted that both of these attacks are considered to be\n   more difficult than
      the attack on the body since more structure is\n   designed into the data to
      be hashed than is frequently found in the\n   body and the data is shorter in
      length than that of the body.\n   The successful prediction of the signing-time
      attribute is expected\n   to be more difficult than with certificates as the
      time would not\n   generally be rounded.  Time stamp services can make this
      more\n   unpredictable by using a random delay before issuing the signature.\n
      \  Allowing a third party to provide a hash value could potentially make\n   an
      attack simpler when keyed hash functions are used since there is\n   more data
      than can be modified without changing the overall structure\n   of the signed
      attribute structure.\n"
    title: B.2.  Hashes in CMS
  title: Appendix B.  Background
- contents:
  - "Authors' Addresses\n   Sean Turner\n   IECA, Inc.\n   3057 Nutley Street, Suite
    106\n   Fairfax, VA 22031\n   USA\n   EMail: turners@ieca.com\n   Jim Schaad\n
    \  Soaring Hawk Consulting\n   EMail: jimsch@exmsft.com\n"
  title: Authors' Addresses
